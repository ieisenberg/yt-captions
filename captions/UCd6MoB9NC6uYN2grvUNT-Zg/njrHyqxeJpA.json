[
  {
    "text": "all right it's not quite 3:30 yet but I",
    "start": "620",
    "end": "6120"
  },
  {
    "text": "want to use the time before we actually dive into the talk to learn a little bit more about you and your backgrounds so",
    "start": "6120",
    "end": "13019"
  },
  {
    "text": "please raise your hands if the following holds true for you who here is a front-end developer all right if you a",
    "start": "13019",
    "end": "23100"
  },
  {
    "text": "little bit of front-end developers who is a back-end developer okay",
    "start": "23100",
    "end": "28769"
  },
  {
    "text": "who would fancy themselves as full-stack developers okay so that's also the",
    "start": "28769",
    "end": "34020"
  },
  {
    "text": "front-end developers who among the back-end developers who's using node.js",
    "start": "34020",
    "end": "40230"
  },
  {
    "text": "for the daily work okay who's using Java",
    "start": "40230",
    "end": "45829"
  },
  {
    "text": "okay that's roughly 50/50 do we have anyone who is neither using JavaScript",
    "start": "45829",
    "end": "52199"
  },
  {
    "text": "or Java nobody oh yeah one person which language okay fair typescript cool last",
    "start": "52199",
    "end": "63090"
  },
  {
    "text": "question who has not heard about graph QL at all yet who has no idea what graph careless all right everybody is somewhat",
    "start": "63090",
    "end": "70979"
  },
  {
    "text": "okay one person so I hope that this talk especially caters to you then because it's also very much an introduction to",
    "start": "70979",
    "end": "77580"
  },
  {
    "text": "graph QL and building and deploying graph QL servers with AWS lambda and Prisma so let's dive into the talk so my",
    "start": "77580",
    "end": "86430"
  },
  {
    "text": "name is Nicolas Burke and I work as a developer at a company called Graff cool and we're a start-up we were based in",
    "start": "86430",
    "end": "91740"
  },
  {
    "text": "Berlin and we're building tooling around graph QL and the latest product that",
    "start": "91740",
    "end": "96960"
  },
  {
    "text": "we've built is called Prisma which is kind of the glue between a database and your graph GL server and you're going to",
    "start": "96960",
    "end": "103049"
  },
  {
    "text": "see how exactly it's going to be used when you're building graph GL servers and this is the agenda for today so",
    "start": "103049",
    "end": "110280"
  },
  {
    "text": "first I'm going to start with a brief introduction to graph QL so that we're all on the same page about like the the",
    "start": "110280",
    "end": "115890"
  },
  {
    "text": "core concepts of it then I'll talk about graph QL server development and and the",
    "start": "115890",
    "end": "121829"
  },
  {
    "text": "main mechanics that work inside a graphical server then I have a large practical part prepared where I am",
    "start": "121829",
    "end": "127740"
  },
  {
    "text": "actually going to show you how to build a graphical server from scratch and deploy it using AWS lambda",
    "start": "127740",
    "end": "133800"
  },
  {
    "text": "and then in the end I have one slide with a bit of the lessons learned for using lambda with graph QL so let's",
    "start": "133800",
    "end": "141480"
  },
  {
    "text": "start with the graphical introduction and the big question what is graph QL so",
    "start": "141480",
    "end": "146850"
  },
  {
    "text": "very briefly stated it's basically a new API standard that was developed and open sourced by Facebook in 2015 but Facebook",
    "start": "146850",
    "end": "154530"
  },
  {
    "text": "already started working on it in 2012 but only open source the actual specification along with a JavaScript",
    "start": "154530",
    "end": "160890"
  },
  {
    "text": "reference implementation for graph QL in 2015 and it basically is a cruel",
    "start": "160890",
    "end": "166890"
  },
  {
    "text": "language for api's and Ann and it makes it possible to work against an API in a",
    "start": "166890",
    "end": "173910"
  },
  {
    "text": "declarative way it enables a declarative way of fetching and updating data against api's to really understand how",
    "start": "173910",
    "end": "182610"
  },
  {
    "text": "it works let's consider the example of a simple blogging application with the following profile screen so on top of",
    "start": "182610",
    "end": "188580"
  },
  {
    "text": "that profile screen we would just have the first name of the user then we would have a list of the posts that this user",
    "start": "188580",
    "end": "194820"
  },
  {
    "text": "has written and the last three followers of the user so how would we tackle this",
    "start": "194820",
    "end": "201480"
  },
  {
    "text": "situation typically with the REST API in a REST API we could design the API in a way that we would have three different",
    "start": "201480",
    "end": "207900"
  },
  {
    "text": "endpoints and these endpoints would cater the needs of that profile screen so we would have the users ID endpoint",
    "start": "207900",
    "end": "214290"
  },
  {
    "text": "that returns information about a given user the users ID post endpoint that returns all the posts of a given user",
    "start": "214290",
    "end": "221040"
  },
  {
    "text": "and users ID followers endpoint to return all the followers of a given user",
    "start": "221040",
    "end": "226700"
  },
  {
    "text": "if we now want to implement that profile screen on the front-end so for all the full-stack developers here",
    "start": "226700",
    "end": "232500"
  },
  {
    "text": "how would you now tackle this with an API that is designed like this you basically would have to go and make three different requests to these three",
    "start": "232500",
    "end": "239459"
  },
  {
    "text": "different endpoints so first to get the first name of the user you have to hit the users at the endpoint with the",
    "start": "239459",
    "end": "245310"
  },
  {
    "text": "corresponding ID of the user and it would return some JSON data that might look like this might look a bit",
    "start": "245310",
    "end": "251610"
  },
  {
    "text": "different depending on how your API is designed depending on how your data model is actually structured but here we",
    "start": "251610",
    "end": "258419"
  },
  {
    "text": "retrieve the ID the name the address and the birthday of the user that we're accessing and we can already spot like a",
    "start": "258419",
    "end": "266250"
  },
  {
    "text": "small problem with this because right now we're downloading information from the server that we",
    "start": "266250",
    "end": "271440"
  },
  {
    "text": "don't need at this particular point in time we really only need the first name of the user but we're downloading",
    "start": "271440",
    "end": "276600"
  },
  {
    "text": "additional information so that's not really a desirable situation but at",
    "start": "276600",
    "end": "282000"
  },
  {
    "text": "least we have access to the first name and we can display it on the profile screen then we're going to hit the users",
    "start": "282000",
    "end": "288570"
  },
  {
    "text": "ID post endpoint and again potentially download a lot of additional data we",
    "start": "288570",
    "end": "294330"
  },
  {
    "text": "don't really know what we're going to receive from the server but it could be more information for each post object",
    "start": "294330",
    "end": "300510"
  },
  {
    "text": "like the content or potentially also the comments of that post so again we're",
    "start": "300510",
    "end": "307050"
  },
  {
    "text": "downloading information which is go which is going to slow down the performance of the app it's going to",
    "start": "307050",
    "end": "312240"
  },
  {
    "text": "make the entire network request slower and is also putting weight on the users",
    "start": "312240",
    "end": "319530"
  },
  {
    "text": "plan for data but at least we have the titles of the post so we can render them",
    "start": "319530",
    "end": "325080"
  },
  {
    "text": "on the screen and exactly the same situation for the followers endpoint so we had the users ID followers endpoint",
    "start": "325080",
    "end": "331830"
  },
  {
    "text": "get some JSON data back and display the first names of the followers on the",
    "start": "331830",
    "end": "336930"
  },
  {
    "text": "screen so how would we tackle that same situation now with a graphical API so",
    "start": "336930",
    "end": "343410"
  },
  {
    "text": "the first and very important difference between rest and graph QL is that with rest you usually have a set of endpoints",
    "start": "343410",
    "end": "350130"
  },
  {
    "text": "and each of these endpoints returns fixed data structures so it's set in stone already what a specific what a",
    "start": "350130",
    "end": "357570"
  },
  {
    "text": "specific endpoint is going to return that structure is fixed with graph QL we",
    "start": "357570",
    "end": "362880"
  },
  {
    "text": "have a different situation because graph QL API is only expose a single endpoint and return",
    "start": "362880",
    "end": "367890"
  },
  {
    "text": "flexible data structures and the way how that works is that the client can decide what data it wants to request from the",
    "start": "367890",
    "end": "374520"
  },
  {
    "text": "server how does that look like so here we have the same situation now with",
    "start": "374520",
    "end": "381030"
  },
  {
    "text": "graph QL where we will now go and send a graph key a query that could look like this to the server we're using and we're",
    "start": "381030",
    "end": "390540"
  },
  {
    "text": "using an HTTP POST request and putting basically the query into the body of the post and we can precisely specify here",
    "start": "390540",
    "end": "399000"
  },
  {
    "text": "inside that query the data that we need from the so we say that we need the name of a user the titles of the post of a user",
    "start": "399000",
    "end": "406050"
  },
  {
    "text": "and the names of the last three followers of a user so we really can specify inside that query the data that",
    "start": "406050",
    "end": "413130"
  },
  {
    "text": "we want to request from the server and at this point you don't have to you don't have to understand yet why we can",
    "start": "413130",
    "end": "418890"
  },
  {
    "text": "put these words into the query I'll talk about this a little bit when we're talking about the graphical schema but",
    "start": "418890",
    "end": "424260"
  },
  {
    "text": "it already shows you that we can precisely declare the data the data requirements on the client side and the",
    "start": "424260",
    "end": "430770"
  },
  {
    "text": "server is going to respond with exactly that data so the response from the server might look like this again we",
    "start": "430770",
    "end": "439350"
  },
  {
    "text": "receive some payload from the server formatted as JSON and the structure of",
    "start": "439350",
    "end": "446730"
  },
  {
    "text": "the response the structure of this JSON object here is equivalent to the",
    "start": "446730",
    "end": "452580"
  },
  {
    "text": "structure that we saw in the query so it has exactly the same fields that we were using in the query username post title",
    "start": "452580",
    "end": "459030"
  },
  {
    "text": "followers name are exactly the fields that we saw in the query before so the",
    "start": "459030",
    "end": "465300"
  },
  {
    "text": "client can basically predict the data and the structure of the data that is going to be returned by the server and",
    "start": "465300",
    "end": "471840"
  },
  {
    "text": "one way of looking at a graph Kurian factors to look at it as an empty",
    "start": "471840",
    "end": "477290"
  },
  {
    "text": "basically as an empty JSON object and where we only provide the keys but not the values and the server is just going",
    "start": "477290",
    "end": "484470"
  },
  {
    "text": "to do the job and fill in the values for the requested keys so it's a very simple and straightforward syntax to ask for",
    "start": "484470",
    "end": "491880"
  },
  {
    "text": "data and we get all the data at once so we can display everything at once we",
    "start": "491880",
    "end": "497910"
  },
  {
    "text": "saved two network requests and we also saved the the download of additional data if you want to learn more about",
    "start": "497910",
    "end": "506340"
  },
  {
    "text": "graph QL and why it might be good for you to use it you can check out this this blog article and then a more like",
    "start": "506340",
    "end": "513120"
  },
  {
    "text": "Saro graphical introduction on a website that is called how to graph cure come where you find a lot of tutorials all",
    "start": "513120",
    "end": "519719"
  },
  {
    "text": "around graph QL all right so let's now talk about graph QL server development",
    "start": "519720",
    "end": "525270"
  },
  {
    "text": "how can you build a graphical server that gives your client applications that much power in general no matter which",
    "start": "525270",
    "end": "534180"
  },
  {
    "text": "programming language which which programming language you are going to use because you can build",
    "start": "534180",
    "end": "539280"
  },
  {
    "text": "graphical servers with basically your favorite programming languages not it's",
    "start": "539280",
    "end": "544320"
  },
  {
    "text": "not bound to a particular programming language and no matter which programming language you use you'll always find",
    "start": "544320",
    "end": "550020"
  },
  {
    "text": "these three different parts inside the graphical server and the first part is the structure so that really is the",
    "start": "550020",
    "end": "556710"
  },
  {
    "text": "graphical schema that defines the API operations then we have the behavior of",
    "start": "556710",
    "end": "562200"
  },
  {
    "text": "the graph QL schema which is implemented with resolver functions and then we have",
    "start": "562200",
    "end": "567900"
  },
  {
    "text": "a network layer that takes care of just processing the network requests creating the response and sending that back to",
    "start": "567900",
    "end": "573450"
  },
  {
    "text": "the client so let's take so let's take a closer look at each of these three",
    "start": "573450",
    "end": "579300"
  },
  {
    "text": "components so the graphical schema is strongly typed and it's written in",
    "start": "579300",
    "end": "585330"
  },
  {
    "text": "what's called the graph QL schema definition language so graph QL has its own type language that which allows you",
    "start": "585330",
    "end": "592200"
  },
  {
    "text": "to write a schema and express the the data types that you're using in your",
    "start": "592200",
    "end": "597630"
  },
  {
    "text": "applications and also the different kinds of operations that your graph your server is going to accept maybe you've",
    "start": "597630",
    "end": "603960"
  },
  {
    "text": "used a tool like swagger before and in swagger of the correspondent tool to the",
    "start": "603960",
    "end": "609330"
  },
  {
    "text": "graphical schema language would be llamo because there you define the structure of your API with the mo and it really",
    "start": "609330",
    "end": "617220"
  },
  {
    "text": "defines the capabilities of your API so it's a really strong contract for client-server communication and the",
    "start": "617220",
    "end": "625950"
  },
  {
    "text": "graphical schema has three special route types so you can define various data",
    "start": "625950",
    "end": "631020"
  },
  {
    "text": "types just using the graphical schema language but there are three special route types which correspond to the",
    "start": "631020",
    "end": "637850"
  },
  {
    "text": "different operations that are possible with graph care so the first type is called query and that defines the",
    "start": "637850",
    "end": "644970"
  },
  {
    "text": "queries so it allows you to read data from the backend then you have the mutation type and mutations define the",
    "start": "644970",
    "end": "653460"
  },
  {
    "text": "operations when you want to make changes to the data in the backend so if you so",
    "start": "653460",
    "end": "658890"
  },
  {
    "text": "if you want to compare this with rest there you're usually using post put and delete requests to make changes to the",
    "start": "658890",
    "end": "664740"
  },
  {
    "text": "data in the backend here the corresponding concept for that is mutations and then you also have subscriptions",
    "start": "664740",
    "end": "670870"
  },
  {
    "text": "which allow you to use real time data inside your apps so subscriptions also",
    "start": "670870",
    "end": "676480"
  },
  {
    "text": "use the same syntax as queries and mutations but allow you to subscribe to specific events and ask for particular",
    "start": "676480",
    "end": "683290"
  },
  {
    "text": "data that is related to these events let's take a quick look at an example so",
    "start": "683290",
    "end": "690040"
  },
  {
    "text": "here we probably have the most basic graphical schema that you could imagine where we're using the graphical schema",
    "start": "690040",
    "end": "696160"
  },
  {
    "text": "definition language to define just this one root type there's one special root type called query and this hello field",
    "start": "696160",
    "end": "703240"
  },
  {
    "text": "is of type string the exclamation mark means that the string is required so whenever I request the hello field it",
    "start": "703240",
    "end": "710590"
  },
  {
    "text": "means that it has to return a string it cannot be now if we see a schema like",
    "start": "710590",
    "end": "715930"
  },
  {
    "text": "this we can derive from that schema the queries that we can send to the API in",
    "start": "715930",
    "end": "721300"
  },
  {
    "text": "this case we really only can send one query and that looks like this we don't",
    "start": "721300",
    "end": "726610"
  },
  {
    "text": "have a lot of we don't have a lot of possibilities because the schema is so simple we only can send a query that",
    "start": "726610",
    "end": "731740"
  },
  {
    "text": "contains the single field and the response that a server might sent looks like this so again a simple object where",
    "start": "731740",
    "end": "740140"
  },
  {
    "text": "the key is hello it corresponds to the field and the query and the string that is going to be returned that is provided",
    "start": "740140",
    "end": "748150"
  },
  {
    "text": "by the resolver functions that we're going to take a look at in a bit so let's take a look at a bit more useful",
    "start": "748150",
    "end": "754900"
  },
  {
    "text": "example of the graphical schema and let's see how we would implement or",
    "start": "754900",
    "end": "760540"
  },
  {
    "text": "define the crud operations for a user type so craps stands for create read update",
    "start": "760540",
    "end": "766240"
  },
  {
    "text": "delete and this refers to the common operations that you usually want to do with data so first we're using the",
    "start": "766240",
    "end": "773170"
  },
  {
    "text": "schema language again to define a user type so just a simple type with an ID and a name then the query type this time",
    "start": "773170",
    "end": "782380"
  },
  {
    "text": "has two fields the first field user allows to retrieve one particular user",
    "start": "782380",
    "end": "788500"
  },
  {
    "text": "and the second field allows to retrieve a list of users and to complete the",
    "start": "788500",
    "end": "795040"
  },
  {
    "text": "crowd API we would add the create user update user and delete user mutations and each of these takes a different",
    "start": "795040",
    "end": "802270"
  },
  {
    "text": "number of or takes takes a different set of arguments for the create user we only",
    "start": "802270",
    "end": "807920"
  },
  {
    "text": "provide the name when we're creating a new one we assume that the ID is generated on the server-side update user",
    "start": "807920",
    "end": "813440"
  },
  {
    "text": "takes both to identify the user that is to be updated and the new name and then the lead user to delete a user with a",
    "start": "813440",
    "end": "819920"
  },
  {
    "text": "given ID if we now consider the user query of this graphical schema and think",
    "start": "819920",
    "end": "827720"
  },
  {
    "text": "about what what I can really look like that we would send to the API it's very much the same query that we saw on the",
    "start": "827720",
    "end": "834200"
  },
  {
    "text": "first slide where I introduced graph QL where we send a user query that that",
    "start": "834200",
    "end": "839330"
  },
  {
    "text": "looks like this where user inside the query is called the root field and then we can add more fields to the query",
    "start": "839330",
    "end": "847190"
  },
  {
    "text": "actually it's called the selection set of the query so name is part of the selection set of the query and user is",
    "start": "847190",
    "end": "853400"
  },
  {
    "text": "called the root field of the query and what we can put into the selection set",
    "start": "853400",
    "end": "859280"
  },
  {
    "text": "is defined by the return value of the original field on the query type because",
    "start": "859280",
    "end": "864620"
  },
  {
    "text": "that is of type user we're allowed to put the fields of the user type into the selection set and the server might",
    "start": "864620",
    "end": "874190"
  },
  {
    "text": "respond with data that looks like this so again it's important to realize that the structure of the query dictates the",
    "start": "874190",
    "end": "881150"
  },
  {
    "text": "structure of the JSON object that is returned by the server so now let's talk",
    "start": "881150",
    "end": "887450"
  },
  {
    "text": "about resolver functions because so far we only learned about like the abstract way of defining the capabilities of the",
    "start": "887450",
    "end": "894860"
  },
  {
    "text": "API in terms of the graphical schema but we don't know how a graphical server now actually decide decides what it is going",
    "start": "894860",
    "end": "901970"
  },
  {
    "text": "to return for a query that is coming in so this is done this is the runs responsibility of resolver functions and",
    "start": "901970",
    "end": "908660"
  },
  {
    "text": "they provide the concrete implementation of the API and in general you have one",
    "start": "908660",
    "end": "914150"
  },
  {
    "text": "resolver function per field in the graphical schema so each field that you",
    "start": "914150",
    "end": "919820"
  },
  {
    "text": "define inside your schema will have one backing resolver and that resolver is responsible to fetch the data for",
    "start": "919820",
    "end": "926900"
  },
  {
    "text": "precisely that field and that means basically that the process of resolving",
    "start": "926900",
    "end": "932660"
  },
  {
    "text": "a query of executing a query basically comes down to just an all the result of our functions for the",
    "start": "932660",
    "end": "939070"
  },
  {
    "text": "fields that are contained inside the query so again here is the hello world",
    "start": "939070",
    "end": "945730"
  },
  {
    "text": "example with our simple graphical schema on the left and on the right we have a possible resolver implementation so we",
    "start": "945730",
    "end": "952150"
  },
  {
    "text": "define a JavaScript object that is called resolvers and again the structure of that object has to map to the",
    "start": "952150",
    "end": "959590"
  },
  {
    "text": "structure of the schema definition so inside the resolver subject we have a field that is called query and that",
    "start": "959590",
    "end": "966100"
  },
  {
    "text": "again is an object that has a field that is called hello and these two fields they have to be called like this because",
    "start": "966100",
    "end": "971860"
  },
  {
    "text": "this is how we named the types and the fields inside the graphical schema and",
    "start": "971860",
    "end": "977610"
  },
  {
    "text": "then we just return a very simple string the hello world string for this resolver",
    "start": "977610",
    "end": "984430"
  },
  {
    "text": "function so when a query comes in all the graphical server needs to do is invoke this resolve a function for the",
    "start": "984430",
    "end": "990130"
  },
  {
    "text": "one field that is contained in the query and returns the hello field the the hello world screen let's take the same",
    "start": "990130",
    "end": "998590"
  },
  {
    "text": "look at at the same crud user example again so here we have the crud user",
    "start": "998590",
    "end": "1004200"
  },
  {
    "text": "schema and on the right now we have the resolvers so again we have the resolvers",
    "start": "1004200",
    "end": "1011100"
  },
  {
    "text": "object that follows the structure of the graphical schema so query user users",
    "start": "1011100",
    "end": "1016850"
  },
  {
    "text": "mutation create user update user delete user user ID name so for all of these we",
    "start": "1016850",
    "end": "1023430"
  },
  {
    "text": "now have corresponding resolver functions each resolver function actually always receives four input",
    "start": "1023430",
    "end": "1030150"
  },
  {
    "text": "arguments a couple of these don't even use these input arguments so I just have left them out inside the parentheses and",
    "start": "1030150",
    "end": "1036420"
  },
  {
    "text": "at most we're using two so we don't know yet what the other two ones are but we are going to see those in the demo here",
    "start": "1036420",
    "end": "1042688"
  },
  {
    "text": "we only see the root and the arcs field the arcs just carry the input arguments",
    "start": "1042689",
    "end": "1049560"
  },
  {
    "text": "for the corresponding operation so if we took so if we take a look at the create user mutation for example this field",
    "start": "1049560",
    "end": "1056520"
  },
  {
    "text": "takes a name argument and on the right side the create user resolver function",
    "start": "1056520",
    "end": "1062610"
  },
  {
    "text": "is using this name argument to create a new user and in this particular context",
    "start": "1062610",
    "end": "1068730"
  },
  {
    "text": "we're just assuming the ability of a global DB DB object which",
    "start": "1068730",
    "end": "1074300"
  },
  {
    "text": "provides like an interface to a database so I've put that there just for",
    "start": "1074300",
    "end": "1079440"
  },
  {
    "text": "simplicity in the real world in your resolvers you would actually go and have to write your sequel queries or access",
    "start": "1079440",
    "end": "1086100"
  },
  {
    "text": "the database and whatever way you you do and you might notice that the resolvers",
    "start": "1086100",
    "end": "1093270"
  },
  {
    "text": "for the user type actually follow a very trivial pattern so they receive this route input argument and simply return",
    "start": "1093270",
    "end": "1100440"
  },
  {
    "text": "the ID and the name fields so when you're actually implementing a graphical server you don't have to explicitly",
    "start": "1100440",
    "end": "1105690"
  },
  {
    "text": "spell them out the graphical reference implementation that you're using is going to infer these resolvers for you",
    "start": "1105690",
    "end": "1112410"
  },
  {
    "text": "so you don't have to write that much boilerplate and only you have to write resolvers when it makes sense for you",
    "start": "1112410",
    "end": "1119540"
  },
  {
    "text": "then we have the network layer so the network layer can be implemented with a couple of libraries in the demo which",
    "start": "1119540",
    "end": "1126840"
  },
  {
    "text": "I'm going to show I'm going to use a library that is called graphical yoga which is built on which is built on",
    "start": "1126840",
    "end": "1133200"
  },
  {
    "text": "Express GIS which is a very popular node web framework and the network layer of",
    "start": "1133200",
    "end": "1142350"
  },
  {
    "text": "course is also the the point where you put various sorts of like your network",
    "start": "1142350",
    "end": "1148830"
  },
  {
    "text": "configuration like the port or the endpoints that your server is going to expose and it's also where you would",
    "start": "1148830",
    "end": "1156180"
  },
  {
    "text": "configure any sorts of middleware if you use analytics logging or crash reporting any sorts like this this is all part of",
    "start": "1156180",
    "end": "1162180"
  },
  {
    "text": "the network layer so if we put all of this together the schema the resolvers",
    "start": "1162180",
    "end": "1167400"
  },
  {
    "text": "and the network layer imagine this now to be like a JavaScript file that is called server GIS or index Dodge is the",
    "start": "1167400",
    "end": "1174570"
  },
  {
    "text": "entry point for your server here we would have the graphical schema it's again just these schema defined as a",
    "start": "1174570",
    "end": "1181740"
  },
  {
    "text": "JavaScript string then we would have the resolvers which we also already saw in",
    "start": "1181740",
    "end": "1186780"
  },
  {
    "text": "the previous slide and now we haven't seen code for the network layer but basically the network layer could be",
    "start": "1186780",
    "end": "1192390"
  },
  {
    "text": "implemented like this where we import the graphical server class from the graphical yoga library and then we",
    "start": "1192390",
    "end": "1198210"
  },
  {
    "text": "simply instantiate a new graphical server with the schema and the resolver functions and",
    "start": "1198210",
    "end": "1203730"
  },
  {
    "text": "the server and from that point on we could go and send graph QL queries to",
    "start": "1203730",
    "end": "1209010"
  },
  {
    "text": "localhost 4000 and that's precisely what I want to show you in the demo so in the",
    "start": "1209010",
    "end": "1215370"
  },
  {
    "text": "demo I'm going to build and deploy a graphical server and the goal is to build a clone of the medium blogging API",
    "start": "1215370",
    "end": "1222560"
  },
  {
    "text": "and in particular we are going to implement the following operations so for queries the API is going to allow to",
    "start": "1222560",
    "end": "1229290"
  },
  {
    "text": "retrieve a list of all the posts and filter for title or content and it",
    "start": "1229290",
    "end": "1234690"
  },
  {
    "text": "should also be possible to retrieve a single post by its ID for mutations we",
    "start": "1234690",
    "end": "1240870"
  },
  {
    "text": "are going to allow to create a new draft in the API so each post will have a published flag and as soon as that",
    "start": "1240870",
    "end": "1247230"
  },
  {
    "text": "publish flag is set to false it's a draft and once we publish the draft then it's a published post and the publish",
    "start": "1247230",
    "end": "1254070"
  },
  {
    "text": "flag flag will be set to true and we're also going to implement an operation",
    "start": "1254070",
    "end": "1260460"
  },
  {
    "text": "where we can delete post post objects in the backend and this is the architecture",
    "start": "1260460",
    "end": "1267030"
  },
  {
    "text": "that we're going to use so today we're going to focus on the graphical server",
    "start": "1267030",
    "end": "1272730"
  },
  {
    "text": "the graphical server can be deployed with lambda for Prisma which is going to",
    "start": "1272730",
    "end": "1278100"
  },
  {
    "text": "provide the glue between the database and the server as I mentioned in the beginning we were going to use Fargate",
    "start": "1278100",
    "end": "1286080"
  },
  {
    "text": "later on but at first I'm going to develop locally with docker and then on",
    "start": "1286080",
    "end": "1292920"
  },
  {
    "text": "the backend when you're using Fargate you can of course use the AWS RDS tools",
    "start": "1292920",
    "end": "1301440"
  },
  {
    "text": "and use a my sequel database or something like this as you prefer so let's go to the demo",
    "start": "1301440",
    "end": "1309590"
  },
  {
    "text": "here is the code for the graph QL server and in the beginning I really want to",
    "start": "1310850",
    "end": "1317970"
  },
  {
    "text": "show you how a raw graph QL server works so for now we are not going to use a database we're not going to use Prisma",
    "start": "1317970",
    "end": "1324540"
  },
  {
    "text": "we're just going to focus on the raw functionality of a graphical server so",
    "start": "1324540",
    "end": "1329610"
  },
  {
    "text": "here is basically the graph QL schema which looks very similar to the schemas",
    "start": "1329610",
    "end": "1336750"
  },
  {
    "text": "that we have seen the slides before so the post is our model type basically this is our data",
    "start": "1336750",
    "end": "1342750"
  },
  {
    "text": "model it has an ID the title content and the publish field then we define three",
    "start": "1342750",
    "end": "1348480"
  },
  {
    "text": "API operations which is the posts operation the create draft operation and the publish operation and since for now",
    "start": "1348480",
    "end": "1357750"
  },
  {
    "text": "we're not using an actual database but only store the data inside an array in",
    "start": "1357750",
    "end": "1365970"
  },
  {
    "text": "memory I have to find this post data array with one post object so this has",
    "start": "1365970",
    "end": "1371100"
  },
  {
    "text": "the ID title content and published fields and then a little helper to generate unique IDs and the resolvers",
    "start": "1371100",
    "end": "1380280"
  },
  {
    "text": "which i've set up at the moment they correspond to the structure of the graph",
    "start": "1380280",
    "end": "1385560"
  },
  {
    "text": "cured schema so we have one resolver for the posts field we have one resolver for",
    "start": "1385560",
    "end": "1390960"
  },
  {
    "text": "the create draft field in the create draft field we simply create a new post",
    "start": "1390960",
    "end": "1396480"
  },
  {
    "text": "object with the data that was provided in the arguments and then we push this",
    "start": "1396480",
    "end": "1404520"
  },
  {
    "text": "new post on our post data array and return it and the same for the publish",
    "start": "1404520",
    "end": "1409770"
  },
  {
    "text": "mutation here we first need to find the posts that we want to publish based on its ID and then we set the publish flag",
    "start": "1409770",
    "end": "1416760"
  },
  {
    "text": "to true and finally we return it and in the end we put everything together using graph",
    "start": "1416760",
    "end": "1421860"
  },
  {
    "text": "cure yoga okay so let's go ahead and see",
    "start": "1421860",
    "end": "1427410"
  },
  {
    "text": "what happens when we run this server in",
    "start": "1427410",
    "end": "1433950"
  },
  {
    "text": "fact I want to show you this with a graphical playground who here has used a",
    "start": "1433950",
    "end": "1443340"
  },
  {
    "text": "graphic your playground before alright so for those of you who don't know what",
    "start": "1443340",
    "end": "1449310"
  },
  {
    "text": "I graphic your playground is it's basically a graphical sort of an sort of",
    "start": "1449310",
    "end": "1456390"
  },
  {
    "text": "a graphical IDE which you can use to send requests to your graphical API so",
    "start": "1456390",
    "end": "1464100"
  },
  {
    "text": "you can send queries and mutations to the graphical API and it comes with this",
    "start": "1464100",
    "end": "1469490"
  },
  {
    "text": "auto-generated documentation on the right which is generated based on the graphical schema so the graphical",
    "start": "1469490",
    "end": "1476369"
  },
  {
    "text": "playground knows the schema of the API and it and and it is thus able to",
    "start": "1476369",
    "end": "1482190"
  },
  {
    "text": "generate a documentation for you so that you can see the operations that you can send to the API so here I see that I can",
    "start": "1482190",
    "end": "1488460"
  },
  {
    "text": "send a query that is called posts which I'm going to do now and I'm going to",
    "start": "1488460",
    "end": "1496470"
  },
  {
    "text": "retrieve all the different fields and inside the playground I also get this",
    "start": "1496470",
    "end": "1502190"
  },
  {
    "text": "Auto completion feature here which is also only possible thanks to the graphical schema I now click the play",
    "start": "1502190",
    "end": "1509190"
  },
  {
    "text": "button and the server now returns that one post which I defined in the post",
    "start": "1509190",
    "end": "1514289"
  },
  {
    "text": "data array I can also go ahead and send a mutation to create a new draft and",
    "start": "1514289",
    "end": "1521460"
  },
  {
    "text": "again I'm getting really nice how to completion features here and here inside",
    "start": "1521460",
    "end": "1533249"
  },
  {
    "text": "the query I can always dictate the data which I want to receive from the server so so here I do the same for a mutation",
    "start": "1533249",
    "end": "1540899"
  },
  {
    "text": "and I can send a couple of mutations and if I go back to the post query I will see that all of these have now been",
    "start": "1540899",
    "end": "1547470"
  },
  {
    "text": "added to the post data array with incrementing indices here for the IDS and finally let's also test the publish",
    "start": "1547470",
    "end": "1555239"
  },
  {
    "text": "mutation for the very first post so now",
    "start": "1555239",
    "end": "1565139"
  },
  {
    "text": "we've set the publish flag of the first post to true let's end the operation and",
    "start": "1565139",
    "end": "1570779"
  },
  {
    "text": "we see that it's now set to true so the current implementation of our graph crossover kind of works but everything",
    "start": "1570779",
    "end": "1577109"
  },
  {
    "text": "that is happening is just happening in memory because we only have this array once we kill the server and restarted",
    "start": "1577109",
    "end": "1582899"
  },
  {
    "text": "all this data is going to be gone but in any case I want to show you a bit more how we can now further implement the API",
    "start": "1582899",
    "end": "1589799"
  },
  {
    "text": "according to the requirements that we specified in the beginning so I'm going to add by adding to start by adding the",
    "start": "1589799",
    "end": "1595799"
  },
  {
    "text": "filter functionality here and where we can provide a search string to the query",
    "start": "1595799",
    "end": "1602129"
  },
  {
    "text": "and by the way I'm doing life here so if you see that I have a type of",
    "start": "1602129",
    "end": "1607350"
  },
  {
    "text": "somewhere or anything like this feel free to shout it at me because I don't want to go and dip back in front of all",
    "start": "1607350",
    "end": "1613020"
  },
  {
    "text": "of you the first thing that we need to do to implement that filter is to access the",
    "start": "1613020",
    "end": "1619800"
  },
  {
    "text": "arcs object that is coming in here that is now going to carry the search string and here I'm adding a test if we have",
    "start": "1619800",
    "end": "1627120"
  },
  {
    "text": "the search string then we actually want to go and filter the post data array and",
    "start": "1627120",
    "end": "1633230"
  },
  {
    "text": "we want to filter it according to whether the title includes that search",
    "start": "1633230",
    "end": "1640380"
  },
  {
    "text": "string or the content of the posts",
    "start": "1640380",
    "end": "1646320"
  },
  {
    "text": "includes that search string and if we",
    "start": "1646320",
    "end": "1651390"
  },
  {
    "text": "don't have a search string because in the graphical schema I defined it not as required so if I did this then this",
    "start": "1651390",
    "end": "1658500"
  },
  {
    "text": "would mean that we couldn't send the post query without providing the search string argument but because I'm leaving",
    "start": "1658500",
    "end": "1663810"
  },
  {
    "text": "out the exclamation mark it means that the search search string is malleable and that means we can send the post",
    "start": "1663810",
    "end": "1669420"
  },
  {
    "text": "query without it so we have to account for that case as well in which case we don't filter and simply retain turn post",
    "start": "1669420",
    "end": "1676200"
  },
  {
    "text": "data so here is how we implement the search string operation so let's go",
    "start": "1676200",
    "end": "1682740"
  },
  {
    "text": "ahead and restart the server and see if it works",
    "start": "1682740",
    "end": "1688070"
  },
  {
    "text": "okay first we see that we only have this one post because I restarted the server",
    "start": "1692470",
    "end": "1699610"
  },
  {
    "text": "and now I can go ahead and provide a search string and if I do this for",
    "start": "1699610",
    "end": "1710600"
  },
  {
    "text": "example then we just get an empty array back but if I say QL which is part of the title right here then we get the",
    "start": "1710600",
    "end": "1718279"
  },
  {
    "text": "post back so the filtering seems to work let's now move on with the two other operations where we want to retrieve a",
    "start": "1718279",
    "end": "1725090"
  },
  {
    "text": "single post by its ID and we want to be",
    "start": "1725090",
    "end": "1732499"
  },
  {
    "text": "able to delete a post also by its ID now",
    "start": "1732499",
    "end": "1739759"
  },
  {
    "text": "I have to go and implement the corresponding resolvers and in fact when you work with graph QL and you're",
    "start": "1739759",
    "end": "1744830"
  },
  {
    "text": "implementing a graph GL server you'll always have this process the first thing when you want to add a new feature to",
    "start": "1744830",
    "end": "1750350"
  },
  {
    "text": "the API will always be that you have to go and extend the graph GL schema with the corresponding types and API",
    "start": "1750350",
    "end": "1756619"
  },
  {
    "text": "operations and then you have to go and implement the resolvers and that is also referred to as schema driven or a schema",
    "start": "1756619",
    "end": "1762860"
  },
  {
    "text": "first development so now I add the post query right here we also retrieve the",
    "start": "1762860",
    "end": "1771740"
  },
  {
    "text": "arcs and this time everything we have to do is just call find on the post data",
    "start": "1771740",
    "end": "1782149"
  },
  {
    "text": "array and compare each posts ID with the",
    "start": "1782149",
    "end": "1787279"
  },
  {
    "text": "ID that was provided in the query and that should give us the the post or return now and the delete post we're",
    "start": "1787279",
    "end": "1797929"
  },
  {
    "text": "going to implement as well host delete",
    "start": "1797929",
    "end": "1805490"
  },
  {
    "text": "index so here we are first looking for",
    "start": "1805490",
    "end": "1810590"
  },
  {
    "text": "the index of the post that we want to",
    "start": "1810590",
    "end": "1816409"
  },
  {
    "text": "delete comparing the IDS of every post if we",
    "start": "1816409",
    "end": "1825250"
  },
  {
    "text": "find this then the post delete index",
    "start": "1825250",
    "end": "1830620"
  },
  {
    "text": "will be greater than minus one in which case we want to delete it from the post",
    "start": "1830620",
    "end": "1838029"
  },
  {
    "text": "data array using splice starting at the",
    "start": "1838029",
    "end": "1843490"
  },
  {
    "text": "post delete index and deleting exactly one element and in that case we want to",
    "start": "1843490",
    "end": "1855100"
  },
  {
    "text": "return the post which we delete it and otherwise we just return now did any one",
    "start": "1855100",
    "end": "1863049"
  },
  {
    "text": "spot a type or anything so far nobody's",
    "start": "1863049",
    "end": "1868240"
  },
  {
    "text": "hopefully it's gonna work so I'm restarting the server and sending",
    "start": "1868240",
    "end": "1874269"
  },
  {
    "text": "the query that seems to work let me go and create a couple of drafts here so we",
    "start": "1874269",
    "end": "1882340"
  },
  {
    "text": "only received this one because we still have the search string if I remove the search string then we should get all the",
    "start": "1882340",
    "end": "1887980"
  },
  {
    "text": "posts which I just created with the mutation so let's try if we can retrieve a single post with our new post or e",
    "start": "1887980",
    "end": "1896908"
  },
  {
    "text": "posts so here we receive this one post and the same for let's test the delete",
    "start": "1905429",
    "end": "1915730"
  },
  {
    "text": "post mutation so we currently have a little back in the playground where it won't reload the schema when I restart",
    "start": "1915730",
    "end": "1922929"
  },
  {
    "text": "the server so otherwise it would also show me the auto completion for these operations so now I deleted post zero if",
    "start": "1922929",
    "end": "1932649"
  },
  {
    "text": "I go back to the posts query from the first place we see that it was deleted so our API implementation works alright",
    "start": "1932649",
    "end": "1942159"
  },
  {
    "text": "so far so good we just built a graphical server that is able to store data in memory which",
    "start": "1942159",
    "end": "1950140"
  },
  {
    "text": "doesn't help us very much in real-world applications so in real-world applications you really want to use databases to store your data",
    "start": "1950140",
    "end": "1956529"
  },
  {
    "text": "persistently beyond the lifetimes of your servers and of course the example",
    "start": "1956529",
    "end": "1964210"
  },
  {
    "text": "which I've chosen for this talk is very very simple we only have one type with a few fields so this would probably also",
    "start": "1964210",
    "end": "1971110"
  },
  {
    "text": "be relatively straightforward to implement with the database and to actually go and write sequel queries",
    "start": "1971110",
    "end": "1977260"
  },
  {
    "text": "inside your resolvers but with graph QL or the core strengths of graph QL",
    "start": "1977260",
    "end": "1983020"
  },
  {
    "text": "actually is that it also allows you to query deeply nested data from your API so in a real world application this post",
    "start": "1983020",
    "end": "1990539"
  },
  {
    "text": "this post model would probably have relations to other object types such as",
    "start": "1990539",
    "end": "1996309"
  },
  {
    "text": "for example a user type which could be the author of a post or it could have comments and then we could have a client",
    "start": "1996309",
    "end": "2002520"
  },
  {
    "text": "that is requesting all the data for a post including the author and all the",
    "start": "2002520",
    "end": "2008549"
  },
  {
    "text": "comments that the author maybe has written so it can really write queries that are deeply nested go deep go",
    "start": "2008549",
    "end": "2013909"
  },
  {
    "text": "multiple levels deep in nesting and implementing the resolvers for these",
    "start": "2013909",
    "end": "2020159"
  },
  {
    "text": "kinds of scenarios can be super complicated and also has a lot of performance traps and the way how you're",
    "start": "2020159",
    "end": "2025590"
  },
  {
    "text": "accessing the database in the way how you're performing joins or when you're using MongoDB how you structure the the",
    "start": "2025590",
    "end": "2032159"
  },
  {
    "text": "the database access calls and that's basic exactly the reason why we build Prisma",
    "start": "2032159",
    "end": "2038200"
  },
  {
    "text": "as kind of a layer in between your database and the graphical server which makes it super easy for you to implement",
    "start": "2038200",
    "end": "2044710"
  },
  {
    "text": "the resolver functions so now I want to show you how you can leverage Prisma to",
    "start": "2044710",
    "end": "2050470"
  },
  {
    "text": "implement your resolvers and the first thing that I'm going to do for that is simply delete everything that I have",
    "start": "2050470",
    "end": "2057010"
  },
  {
    "text": "written so far because we don't need it we now want to access a database inside",
    "start": "2057010",
    "end": "2062050"
  },
  {
    "text": "our resolvers so I'm commenting all of these out and commenting the post out as",
    "start": "2062050",
    "end": "2069940"
  },
  {
    "text": "well and in the graphical schema I'm also commenting out the corresponding",
    "start": "2069940",
    "end": "2075070"
  },
  {
    "text": "operations because if I tried to start the server and I defined these",
    "start": "2075070",
    "end": "2081040"
  },
  {
    "text": "operations but didn't have resolver functions for them then the graphical server would also throw me an error so I",
    "start": "2081040",
    "end": "2086679"
  },
  {
    "text": "have to put comments on all of these alright so now we have set up our",
    "start": "2086679",
    "end": "2093579"
  },
  {
    "text": "application so far and I quickly want to go back to the architecture diagram that we saw on the previous slide so here you",
    "start": "2093579",
    "end": "2102160"
  },
  {
    "text": "will notice that Prisma as well as your graphical server both expose graph QL IP",
    "start": "2102160",
    "end": "2107980"
  },
  {
    "text": "is so when you're building graphical servers with Prisma then you're going to deal with two graphical IP is why do we",
    "start": "2107980",
    "end": "2115750"
  },
  {
    "text": "need to graph your IP is why can the client not simply directly access the Prisma API why do we need another layer",
    "start": "2115750",
    "end": "2122800"
  },
  {
    "text": "on top of that think about it that way when you're building applications today you're also used usually having some",
    "start": "2122800",
    "end": "2129069"
  },
  {
    "text": "sort of a database layer and an API an application layer and this is exactly",
    "start": "2129069",
    "end": "2134109"
  },
  {
    "text": "the same idea that we were using when building graphical service with Prisma so Prisma basically just corresponds to",
    "start": "2134109",
    "end": "2140349"
  },
  {
    "text": "your database layer everybody who has access to the Prisma graph QL API can basically do to your database whatever",
    "start": "2140349",
    "end": "2146980"
  },
  {
    "text": "they want so this is not something that you want to expose to your client applications rather what you're going to",
    "start": "2146980",
    "end": "2152530"
  },
  {
    "text": "do is you're going to add another layer on top of that Prisma also exposes a",
    "start": "2152530",
    "end": "2157810"
  },
  {
    "text": "crud api which basically is similar to like the API is that you get from",
    "start": "2157810",
    "end": "2163180"
  },
  {
    "text": "databases so you can really do everything that you would like to do with the data you have a lot of",
    "start": "2163180",
    "end": "2168819"
  },
  {
    "text": "flexibility in the operations that you sent but usually when you're building applications you want to tailor your API more to the",
    "start": "2168819",
    "end": "2175810"
  },
  {
    "text": "needs of your client applications so you you you really want to make sure that the the API that you expose is",
    "start": "2175810",
    "end": "2183100"
  },
  {
    "text": "convenient for the clients that are going to access them in the end so this is another reason why you would use the",
    "start": "2183100",
    "end": "2189220"
  },
  {
    "text": "API layer on top of the Prisma layer and finally if your application needs some sort of business logic if you need",
    "start": "2189220",
    "end": "2195520"
  },
  {
    "text": "transform data or validate data or integrate with third-party services because you have some sort of legacy",
    "start": "2195520",
    "end": "2201580"
  },
  {
    "text": "system or you want to integrate a payment process with stripe or something like this this is all functionality that",
    "start": "2201580",
    "end": "2207490"
  },
  {
    "text": "all goes into the graph GL server layer and not into the Prisma layer because Prisma basically only is a way to access",
    "start": "2207490",
    "end": "2214180"
  },
  {
    "text": "your database so let's go ahead and start to create the database and the",
    "start": "2214180",
    "end": "2220840"
  },
  {
    "text": "corresponding Prisma service in the first place the way how I'm going to do this is by creating a new directory right here that",
    "start": "2220840",
    "end": "2227500"
  },
  {
    "text": "I'm calling database and inside the database directory I'm creating two",
    "start": "2227500",
    "end": "2232630"
  },
  {
    "text": "files which are V which provide like the",
    "start": "2232630",
    "end": "2238960"
  },
  {
    "text": "the minimal setup that you need to get started with Prisma so we have one file",
    "start": "2238960",
    "end": "2245260"
  },
  {
    "text": "that is called data model graph QL and one that is fault called Prisma llamo let's start with the data model dot",
    "start": "2245260",
    "end": "2251050"
  },
  {
    "text": "graph GL file so here you're going to use the graphical schema language again to define the structure of your database",
    "start": "2251050",
    "end": "2258310"
  },
  {
    "text": "so basically in this particular case I can just go ahead and copy over the post",
    "start": "2258310",
    "end": "2264430"
  },
  {
    "text": "type because this represents the data model but because this is now going to",
    "start": "2264430",
    "end": "2269830"
  },
  {
    "text": "be processed by Prisma and translated into sequel tables I can add special",
    "start": "2269830",
    "end": "2274870"
  },
  {
    "text": "directives that indicate to Prisma special behavior of particular fields so",
    "start": "2274870",
    "end": "2281500"
  },
  {
    "text": "the Edit unique directive is ensures that we never have to post records inside the database that have",
    "start": "2281500",
    "end": "2288220"
  },
  {
    "text": "the same ID value and then I can also provide a default value for the",
    "start": "2288220",
    "end": "2293470"
  },
  {
    "text": "published field right here which I'm going to set to false so that every post that we initially create will always be",
    "start": "2293470",
    "end": "2300280"
  },
  {
    "text": "a draft and so once I deploy the prisoner service which I'm going to do in just a bit this is going",
    "start": "2300280",
    "end": "2307390"
  },
  {
    "text": "to be translated into an actual database table but I don't have to write these",
    "start": "2307390",
    "end": "2312690"
  },
  {
    "text": "create tables sequel statements I can just simply define my data model using",
    "start": "2312690",
    "end": "2319119"
  },
  {
    "text": "the schema language and the second file that I created is this Prisma llamo fire",
    "start": "2319119",
    "end": "2324459"
  },
  {
    "text": "here and it takes a couple of properties so first I need to define the name for",
    "start": "2324459",
    "end": "2331150"
  },
  {
    "text": "my Prisma service then I need to define a stage so the stage can be just a",
    "start": "2331150",
    "end": "2336609"
  },
  {
    "text": "random string but usually you want to call it something like def or staging or prod to represent the environment that",
    "start": "2336609",
    "end": "2343180"
  },
  {
    "text": "the serve is going to run in then you have to specify the data model to tell",
    "start": "2343180",
    "end": "2348489"
  },
  {
    "text": "Prisma what kind of tables it should create for you and then finally you want",
    "start": "2348489",
    "end": "2353680"
  },
  {
    "text": "to protect your API with a secret which is going to be used to generate JW TS",
    "start": "2353680",
    "end": "2360309"
  },
  {
    "text": "which are required to access the Prisma graphical API so this is now kind of the",
    "start": "2360309",
    "end": "2367209"
  },
  {
    "text": "minimal setup that you need to get started with Prisma and I want to do one more thing I also want to change this",
    "start": "2367209",
    "end": "2373930"
  },
  {
    "text": "graphical config file here that we haven't talked about yet so graphical",
    "start": "2373930",
    "end": "2379660"
  },
  {
    "text": "config is a standard for how you configure graphical files that is going",
    "start": "2379660",
    "end": "2384759"
  },
  {
    "text": "to be used by various tools for example the graphical playground so here I'm now defining information about my -",
    "start": "2384759",
    "end": "2391269"
  },
  {
    "text": "graphical api's - this graphical config file and this information later on is",
    "start": "2391269",
    "end": "2396729"
  },
  {
    "text": "going to be used by the playground so at the moment I already have the definition of my application layer of my app and",
    "start": "2396729",
    "end": "2404890"
  },
  {
    "text": "the schema path which is located in source schema graph QL so this is just the graphical schema that I have been",
    "start": "2404890",
    "end": "2411130"
  },
  {
    "text": "have been working with the entire time and then I provide this extension with the endpoint and now I want to add",
    "start": "2411130",
    "end": "2417160"
  },
  {
    "text": "information about my second graph QL API which I call database which corresponds",
    "start": "2417160",
    "end": "2422949"
  },
  {
    "text": "to Prisma the schema path for that is going to be in a generated directory so",
    "start": "2422949",
    "end": "2430329"
  },
  {
    "text": "this graph QL API I'm not going to write myself but this is going to be Auto generated by Prisma",
    "start": "2430329",
    "end": "2436900"
  },
  {
    "text": "and as an extension we're just going to add a prism extension and pointed to the",
    "start": "2436900",
    "end": "2443910"
  },
  {
    "text": "Prisma llamó file and this is all we",
    "start": "2443910",
    "end": "2450670"
  },
  {
    "text": "need to get started with Prisma so now when I want to deploy my place my service and use the prism a graphical",
    "start": "2450670",
    "end": "2456640"
  },
  {
    "text": "API I need to run the prism I deploy command and it's going to ask me where I",
    "start": "2456640",
    "end": "2462519"
  },
  {
    "text": "want to deploy my Prisma service my Prisma api and i have a couple of options here so i can deploy it to",
    "start": "2462519",
    "end": "2469180"
  },
  {
    "text": "public development clusters which basically are a sandbox a free sandbox for you to get started so if you want to",
    "start": "2469180",
    "end": "2475480"
  },
  {
    "text": "get started with prism if you just want to try it out Prisma is completely open source so you can just deploy it to your",
    "start": "2475480",
    "end": "2481029"
  },
  {
    "text": "favorite cloud provider or you can use these public development classes just to",
    "start": "2481029",
    "end": "2486970"
  },
  {
    "text": "get started quickly and play around with it then I have the Stargate cluster which I have configured previously which",
    "start": "2486970",
    "end": "2493390"
  },
  {
    "text": "are which we're going to use in the end but for now I just want to deploy locally with docker so now the the",
    "start": "2493390",
    "end": "2502690"
  },
  {
    "text": "prisoners Eli is creating a local local local service for it I haven't I don't",
    "start": "2502690",
    "end": "2509950"
  },
  {
    "text": "have docker running at the moment so that should be the case if I want to",
    "start": "2509950",
    "end": "2514989"
  },
  {
    "text": "deploy to dr. so and this year I because of my choice it also added this local",
    "start": "2514989",
    "end": "2521999"
  },
  {
    "text": "property because I chose the local cluster in the prompt of the CLI it added this to my Prisma llamó file so",
    "start": "2521999",
    "end": "2528339"
  },
  {
    "text": "from now on it's not going to ask me anymore where it should deploy the API so let's try it again",
    "start": "2528339",
    "end": "2536130"
  },
  {
    "text": "all right do we have any questions of",
    "start": "2548710",
    "end": "2558500"
  },
  {
    "text": "our everything clear yeah of the post query here um ah so",
    "start": "2558500",
    "end": "2576700"
  },
  {
    "text": "they don't want to graph kill the pull in the schema file here ah right so here",
    "start": "2579849",
    "end": "2591980"
  },
  {
    "text": "we are using two exclamation marks and that so they refer to two different",
    "start": "2591980",
    "end": "2598609"
  },
  {
    "text": "things the this exclamation mark refers to the list which means that this entire a",
    "start": "2598609",
    "end": "2605330"
  },
  {
    "text": "query can never return now it will always at least return an empty list but it won't return now and the fact that we",
    "start": "2605330",
    "end": "2613040"
  },
  {
    "text": "have this exclamation mark in here on the post element means that the elements inside the list can also never be now so",
    "start": "2613040",
    "end": "2619910"
  },
  {
    "text": "no matter what this query is going to return the client can always be 100%",
    "start": "2619910",
    "end": "2625010"
  },
  {
    "text": "sure that it's never going to be returned now it's either an empty list or a list that only contains post",
    "start": "2625010",
    "end": "2630770"
  },
  {
    "text": "elements but never now elements okay so we see that something has happened here",
    "start": "2630770",
    "end": "2637369"
  },
  {
    "text": "we now have the development cluster and we see that it created this post type",
    "start": "2637369",
    "end": "2644990"
  },
  {
    "text": "with all these different fields and and it also spit out this endpoint and it",
    "start": "2644990",
    "end": "2651560"
  },
  {
    "text": "also said that writing database schema to source generated Prisma graph key L so this is the file that I specified in",
    "start": "2651560",
    "end": "2658010"
  },
  {
    "text": "the graphical config let's actually quickly take a look at this generator file because it now represents the graph",
    "start": "2658010",
    "end": "2664970"
  },
  {
    "text": "GL API of Prisma so if I go to the query",
    "start": "2664970",
    "end": "2670160"
  },
  {
    "text": "type for example we see that we have this post query the individual post query a host connection query which allows us to",
    "start": "2670160",
    "end": "2676850"
  },
  {
    "text": "do more advanced queries like with aggregation and also more advanced approaches for pagination and in general",
    "start": "2676850",
    "end": "2685100"
  },
  {
    "text": "this API is a lot more powerful than the API is then I have implemented before because this is now really the interface",
    "start": "2685100",
    "end": "2691370"
  },
  {
    "text": "to the database it defines basically all the operations that you can send to the deck to the database with graph QL and",
    "start": "2691370",
    "end": "2698270"
  },
  {
    "text": "to just take a look at the mutation type as well we have a create post update",
    "start": "2698270",
    "end": "2703550"
  },
  {
    "text": "post delete post mutation and absurd post mutation and update many and delete",
    "start": "2703550",
    "end": "2708920"
  },
  {
    "text": "many matching mutations so that's the API that's provided for you by Prisma",
    "start": "2708920",
    "end": "2715160"
  },
  {
    "text": "with graph QL and if I now want to use this API again I can use a graphical playground I'm actually going to restart",
    "start": "2715160",
    "end": "2722900"
  },
  {
    "text": "it here and in that playground we now",
    "start": "2722900",
    "end": "2728840"
  },
  {
    "text": "won't be able to access the graphical server layer the graphical API layer that I've been using before because it's",
    "start": "2728840",
    "end": "2735380"
  },
  {
    "text": "not running and I still need to implement it but we now get the second project here on the Left which is called",
    "start": "2735380",
    "end": "2743590"
  },
  {
    "text": "data base because that's what I specified in the graphical config file",
    "start": "2743590",
    "end": "2749410"
  },
  {
    "text": "and so what's really cool about this",
    "start": "2749410",
    "end": "2756080"
  },
  {
    "text": "basically is that I now have a setup where I can access the API server and the database in the same playground and",
    "start": "2756080",
    "end": "2763340"
  },
  {
    "text": "both with graph QL so if you think about it it's somewhat like using a tool like postman to send HTTP requests through",
    "start": "2763340",
    "end": "2770480"
  },
  {
    "text": "your REST API and a tool like sequel Pro to interact with your database both in",
    "start": "2770480",
    "end": "2775670"
  },
  {
    "text": "one application and I could now go ahead and write a query or a mutation here to",
    "start": "2775670",
    "end": "2782660"
  },
  {
    "text": "create a new post and in fact I have prepared one so I can quickly copy that",
    "start": "2782660",
    "end": "2788750"
  },
  {
    "text": "over so here is the mutation that I want",
    "start": "2788750",
    "end": "2794090"
  },
  {
    "text": "to send the API is a little bit different than the API that we design",
    "start": "2794090",
    "end": "2800150"
  },
  {
    "text": "ourselves just because this is the very powerful API that is now running against the database so now I'm sending this",
    "start": "2800150",
    "end": "2806780"
  },
  {
    "text": "mutation and I'm actually creating a post inside the database which is",
    "start": "2806780",
    "end": "2812390"
  },
  {
    "text": "configured locally on my machine I can",
    "start": "2812390",
    "end": "2817430"
  },
  {
    "text": "also go ahead and send a query to check that this actually worked",
    "start": "2817430",
    "end": "2823568"
  },
  {
    "text": "not a mutation publish the set to false",
    "start": "2823630",
    "end": "2833000"
  },
  {
    "text": "initially because we specified the at default directive so now we see that the database layer is in place and now we",
    "start": "2833000",
    "end": "2839930"
  },
  {
    "text": "have to go and implement the actual API layer and that means we have to go and",
    "start": "2839930",
    "end": "2845240"
  },
  {
    "text": "again implement the resolver functions sorry here we go so let's go back to",
    "start": "2845240",
    "end": "2850700"
  },
  {
    "text": "index j s and the way how we're going to implement resolver functions with Prisma",
    "start": "2850700",
    "end": "2856730"
  },
  {
    "text": "is going to be very similar every time and we are this time going to use the two additional arguments that are passed",
    "start": "2856730",
    "end": "2863390"
  },
  {
    "text": "into resolver functions so I'm not going into too much detail into how these how",
    "start": "2863390",
    "end": "2870349"
  },
  {
    "text": "these arguments work but the third argument context basically is a way for you to provide initial information to",
    "start": "2870349",
    "end": "2877700"
  },
  {
    "text": "the to be resolved event and truly resolver functions and the info object",
    "start": "2877700",
    "end": "2883549"
  },
  {
    "text": "carries information about the incoming query so I'll explain a little bit more what does this means in a bit basically",
    "start": "2883549",
    "end": "2891319"
  },
  {
    "text": "what we want to do here at this point is we just want to access an object on the context that we call DB which we haven't",
    "start": "2891319",
    "end": "2897740"
  },
  {
    "text": "created yet but I just want to write this implementation already and on that object we can now go ahead and basically",
    "start": "2897740",
    "end": "2905359"
  },
  {
    "text": "invoke functions that correspond to graph clear queries that are running against the prisoner API so here I just",
    "start": "2905359",
    "end": "2911839"
  },
  {
    "text": "want to send the post query that we saw on the playground before or which we",
    "start": "2911839",
    "end": "2918559"
  },
  {
    "text": "just saw on the playground so the invocation of this post function basically does the same as invoking or",
    "start": "2918559",
    "end": "2924109"
  },
  {
    "text": "sending this post query against the Prisma API but how does the the",
    "start": "2924109",
    "end": "2930470"
  },
  {
    "text": "graphical server know which fields it needs to put into this selection set of the query so that's what the second",
    "start": "2930470",
    "end": "2937430"
  },
  {
    "text": "argument here is used for and I could in fact just write the fields which I want to retrieve",
    "start": "2937430",
    "end": "2942920"
  },
  {
    "text": "feel like this but we because we want to retrieve these fields drying dynamically",
    "start": "2942920",
    "end": "2950059"
  },
  {
    "text": "according to the data that is provided in the incoming query we can actually use this info object which carries the",
    "start": "2950059",
    "end": "2957200"
  },
  {
    "text": "information of the income incoming query as an abstract syntax tree all right so",
    "start": "2957200",
    "end": "2963859"
  },
  {
    "text": "for this to work we need to create this DB object so let's go ahead and do this next and we can create or attach things",
    "start": "2963859",
    "end": "2972440"
  },
  {
    "text": "to the context initially right here and this time again I'm going to copy it",
    "start": "2972440",
    "end": "2978290"
  },
  {
    "text": "over just for the sake of time and because that's a lot of typing so what's",
    "start": "2978290",
    "end": "2989180"
  },
  {
    "text": "happening here is that we're instantiating this Prisma binding instance and i have to import that from",
    "start": "2989180",
    "end": "2995089"
  },
  {
    "text": "the Prisma binding library which I already added before in case we have",
    "start": "2995089",
    "end": "3000400"
  },
  {
    "text": "trouble with the Wi-Fi so I'm importing that from this Prisma binding package and now I'm using this class and",
    "start": "3000400",
    "end": "3008319"
  },
  {
    "text": "instantiate it with the following properties so I passed the Prisma graph",
    "start": "3008319",
    "end": "3013420"
  },
  {
    "text": "KL schema to it the one that was auto-generated I passed the endpoint to it with the see what was the end point",
    "start": "3013420",
    "end": "3025319"
  },
  {
    "text": "if you ever forget the end point you can print it with the Prisma info command",
    "start": "3026130",
    "end": "3033660"
  },
  {
    "text": "here is my end point and I need to provide and then the secret is the one",
    "start": "3033660",
    "end": "3040270"
  },
  {
    "text": "that is taken from Prisma llamo and he is specifying debug as true means that",
    "start": "3040270",
    "end": "3046990"
  },
  {
    "text": "we are going to log all the graphical queries which are going to be generated in the end to the console all right if I",
    "start": "3046990",
    "end": "3055540"
  },
  {
    "text": "haven't forgotten anything the post query should already work so we can go",
    "start": "3055540",
    "end": "3062440"
  },
  {
    "text": "ahead and start the server again it's running on localhost let's also go ahead",
    "start": "3062440",
    "end": "3069790"
  },
  {
    "text": "and restart the graphical playground",
    "start": "3069790",
    "end": "3075720"
  },
  {
    "text": "so now we're back again on the application layer so that is the same graphical API that I built from the very",
    "start": "3079340",
    "end": "3086100"
  },
  {
    "text": "beginning where we have the post query the create graft mutation published and these rather simple operations but at",
    "start": "3086100",
    "end": "3092700"
  },
  {
    "text": "the moment only post because that's the only one that we have commented in the code at the moment and we see that",
    "start": "3092700",
    "end": "3098490"
  },
  {
    "text": "basically now when I send this query what happens is that our graphical post",
    "start": "3098490",
    "end": "3103620"
  },
  {
    "text": "resolver the one in index j s gets invoked but rather than having to write",
    "start": "3103620",
    "end": "3108630"
  },
  {
    "text": "any sequel here to return the corresponding data I'm leveraging the underlying Prisma api with this binding",
    "start": "3108630",
    "end": "3115590"
  },
  {
    "text": "here and we see that the proper data is returned so let me go ahead and return",
    "start": "3115590",
    "end": "3122670"
  },
  {
    "text": "the other operations and the implementation is going to look very very similar every time because now we",
    "start": "3122670",
    "end": "3129180"
  },
  {
    "text": "just have to access the the Prisma",
    "start": "3129180",
    "end": "3135000"
  },
  {
    "text": "binding instance here which which is the interface to the database can't forget",
    "start": "3135000",
    "end": "3143340"
  },
  {
    "text": "the info object here so here we're asking for a post with a specific ID we",
    "start": "3143340",
    "end": "3149100"
  },
  {
    "text": "are filtering with the where argument for a specific ID and implementing",
    "start": "3149100",
    "end": "3154980"
  },
  {
    "text": "mutations works in exactly the same way except that now we are not accessing the",
    "start": "3154980",
    "end": "3160890"
  },
  {
    "text": "query field but the mutation field here and we are using the queries and",
    "start": "3160890",
    "end": "3167700"
  },
  {
    "text": "mutations provided by the Prisma api so we have to provide data title character",
    "start": "3167700",
    "end": "3175710"
  },
  {
    "text": "title content package content and",
    "start": "3175710",
    "end": "3181980"
  },
  {
    "text": "provide the info object let's quickly",
    "start": "3181980",
    "end": "3187400"
  },
  {
    "text": "test this if everything works so I'm removing the comment from the post query",
    "start": "3187400",
    "end": "3194010"
  },
  {
    "text": "and the comment from the create draft we just to see if everything works so far",
    "start": "3194010",
    "end": "3200150"
  },
  {
    "text": "restart the server publish so we move to comment on publish",
    "start": "3200150",
    "end": "3208230"
  },
  {
    "text": "apparently starting the server going",
    "start": "3208230",
    "end": "3215070"
  },
  {
    "text": "back to the playground and testing if we can now create a new draft we created",
    "start": "3215070",
    "end": "3221280"
  },
  {
    "text": "one you drive two new drafts going back to the post query these are now returned from the database and we should also be",
    "start": "3221280",
    "end": "3228420"
  },
  {
    "text": "able to retrieve a single draft with the post query is Alex ID all right thank",
    "start": "3228420",
    "end": "3244470"
  },
  {
    "text": "you perfect and I also quickly want to",
    "start": "3244470",
    "end": "3249570"
  },
  {
    "text": "implement the publish and delete post mutations so here we are now returning",
    "start": "3249570",
    "end": "3254810"
  },
  {
    "text": "contacts DB mutation and from the prison my API we're using the update post",
    "start": "3254810",
    "end": "3260520"
  },
  {
    "text": "mutation providing information about which post we want to update so this is",
    "start": "3260520",
    "end": "3266490"
  },
  {
    "text": "our X dot ID and the data that we want to update is we want to set the",
    "start": "3266490",
    "end": "3271740"
  },
  {
    "text": "published flag to true and again we pass the info object so that we know which",
    "start": "3271740",
    "end": "3279119"
  },
  {
    "text": "fields them to be returned and then we also can implement the delete mutation",
    "start": "3279119",
    "end": "3288109"
  },
  {
    "text": "in exactly the same way okay so this is",
    "start": "3288109",
    "end": "3297180"
  },
  {
    "text": "the entire implementation of the API let me restart the server once again I of",
    "start": "3297180",
    "end": "3309150"
  },
  {
    "text": "course have to remove the comments here servers running let's move to the",
    "start": "3309150",
    "end": "3315330"
  },
  {
    "text": "playground let's so if we sent the post query all the posts have been persisted",
    "start": "3315330",
    "end": "3321930"
  },
  {
    "text": "so here here they are still there if I want to publish a post I copy the idea",
    "start": "3321930",
    "end": "3327660"
  },
  {
    "text": "of that post go to the publish mutation send it and sending the post query again",
    "start": "3327660",
    "end": "3334800"
  },
  {
    "text": "this was now also like this in the database all right so",
    "start": "3334800",
    "end": "3342200"
  },
  {
    "text": "the last step now is to deploy this graph to your server so what do you do when you want to take this graph to your",
    "start": "3342200",
    "end": "3348480"
  },
  {
    "text": "server into production a really neat way",
    "start": "3348480",
    "end": "3353550"
  },
  {
    "text": "to deploy your graphical servers is to just use AWS lambda and so I don't know",
    "start": "3353550",
    "end": "3359040"
  },
  {
    "text": "who of you has used the AWS GUI for lambda but that's not super user-friendly so for this particular",
    "start": "3359040",
    "end": "3364470"
  },
  {
    "text": "talk I'm going to use a tool that is called up that is just a very simple comment line tool where you have one",
    "start": "3364470",
    "end": "3370410"
  },
  {
    "text": "command inside your terminal that you need to call that literally is called up and that is going to deploy your project",
    "start": "3370410",
    "end": "3376350"
  },
  {
    "text": "to lambda but before I do so I actually need to change this endpoint of my",
    "start": "3376350",
    "end": "3381990"
  },
  {
    "text": "prisoner API because at the moment my prisoner API is accessed locally it's the one that is running on docker but",
    "start": "3381990",
    "end": "3387870"
  },
  {
    "text": "once I deploy my application to lambda then this localhost won't be available anymore so I need to have some URL here",
    "start": "3387870",
    "end": "3394410"
  },
  {
    "text": "that points to a Prisma service that is also deployed to the web and for that I'm going to use the Fargate cluster",
    "start": "3394410",
    "end": "3400560"
  },
  {
    "text": "that I quickly mentioned in the beginning so I'm removing the class or property from the prison my llamo file",
    "start": "3400560",
    "end": "3406050"
  },
  {
    "text": "and invoke Prisma deploy again then this time I'm choosing the Fargate cluster",
    "start": "3406050",
    "end": "3412670"
  },
  {
    "text": "and there was already the endpoint for it so I'm copying that and putting it",
    "start": "3412670",
    "end": "3419790"
  },
  {
    "text": "here so this URL now again is the Prisma",
    "start": "3419790",
    "end": "3425550"
  },
  {
    "text": "api for my database so I could go there I have a fresh database and send the",
    "start": "3425550",
    "end": "3432120"
  },
  {
    "text": "post Cruz that we saw before and now I'm going to use the up command up expects a",
    "start": "3432120",
    "end": "3439920"
  },
  {
    "text": "app JSON file in my current directory I don't have that yet but it has a wizard that lets me create it so I'm choosing",
    "start": "3439920",
    "end": "3446160"
  },
  {
    "text": "the default project name the default AWS profile and here for the region I'm",
    "start": "3446160",
    "end": "3451680"
  },
  {
    "text": "actually choosing the North Virginia reason because that is where my fog 8 cluster is deployed and you want to make",
    "start": "3451680",
    "end": "3457440"
  },
  {
    "text": "sure to deploy your graphical server in the same AWS region or data center where",
    "start": "3457440",
    "end": "3462630"
  },
  {
    "text": "you also have your Prisma api deployed to really reduce the latency and don't have any performance",
    "start": "3462630",
    "end": "3470520"
  },
  {
    "text": "problems on that end and now it is deploying the server so while it's doing",
    "start": "3470520",
    "end": "3476610"
  },
  {
    "text": "that that can take up to one or two minutes I quickly want to finish off with my slides here is the backup video",
    "start": "3476610",
    "end": "3484920"
  },
  {
    "text": "in case anything goes wrong with the Wi-Fi we never know so if you want to",
    "start": "3484920",
    "end": "3490170"
  },
  {
    "text": "learn more about how to build a graphical server then again I can recommend to you a tutorial on how to graph your thumb or a bit of a shorter",
    "start": "3490170",
    "end": "3498060"
  },
  {
    "text": "tutorial which is directly on our blog and we also have tutorials for",
    "start": "3498060",
    "end": "3503760"
  },
  {
    "text": "deployment with the AWS tooling so if you want to learn how to deploy graphical server with app which is the",
    "start": "3503760",
    "end": "3509310"
  },
  {
    "text": "tool that I'm using right now there's also a tutorial on our blog as well as a tutorial that explains to you how you can deploy a prism or services prism or",
    "start": "3509310",
    "end": "3516240"
  },
  {
    "text": "clusters to Fargate didn't deploy yet so",
    "start": "3516240",
    "end": "3527190"
  },
  {
    "text": "we're going to move on so on the plus side when using AWS for deploying",
    "start": "3527190",
    "end": "3532560"
  },
  {
    "text": "graphical servers super easy and super fast to deploy your graphical servers in the first place and you also get all the",
    "start": "3532560",
    "end": "3538740"
  },
  {
    "text": "benefits of the integrated security model and the compliance that comes with AWS lambda so it's compliant by default",
    "start": "3538740",
    "end": "3545190"
  },
  {
    "text": "with all these regulations like DDP R or HIPPA you can use these nice deployment",
    "start": "3545190",
    "end": "3550650"
  },
  {
    "text": "tools like app and it's very very cost effective of course to run your service with lambda as well the only real",
    "start": "3550650",
    "end": "3556770"
  },
  {
    "text": "downside when you're using lambda for a deployment of your graphical servers is that they cannot handle real-time",
    "start": "3556770",
    "end": "3562560"
  },
  {
    "text": "subscriptions the reason for that is that subscriptions are usually implemented with WebSockets and the way",
    "start": "3562560",
    "end": "3568800"
  },
  {
    "text": "how they work is that clients have to subscribe to specific events on the server side and open connections that",
    "start": "3568800",
    "end": "3575609"
  },
  {
    "text": "means again that the server needs to maintain these connections it needs to maintain state where it stores which",
    "start": "3575609",
    "end": "3583950"
  },
  {
    "text": "clients have subscribed to what operations with lambda we cannot deploy stateful applications because lambda",
    "start": "3583950",
    "end": "3589940"
  },
  {
    "text": "will is going to tear down the instances once they are not needed anymore and all the state that you stored there is",
    "start": "3589940",
    "end": "3595650"
  },
  {
    "text": "breaking so an alternative to net to that if you need real-time subscriptions",
    "start": "3595650",
    "end": "3600780"
  },
  {
    "text": "then you can use forget all right so it was deployed I forget",
    "start": "3600780",
    "end": "3610330"
  },
  {
    "text": "one thing and I don't think so I forgot to add a start script to package Jason",
    "start": "3610330",
    "end": "3616180"
  },
  {
    "text": "so if I now open the URL we're only going to see an internal server error let me quickly add a start script so",
    "start": "3616180",
    "end": "3626050"
  },
  {
    "text": "this happened last week in Cologne already and I haven't learned from it I",
    "start": "3626050",
    "end": "3632020"
  },
  {
    "text": "have to deploy again with up so at the",
    "start": "3632020",
    "end": "3637900"
  },
  {
    "text": "moment we only see this internal server error because the AWS lamda server didn't know how to start the server",
    "start": "3637900",
    "end": "3643000"
  },
  {
    "text": "that's why I added the start script I have one more slide and then we see if",
    "start": "3643000",
    "end": "3649240"
  },
  {
    "text": "the deployment works so if you want to learn more about graph QL we are",
    "start": "3649240",
    "end": "3654780"
  },
  {
    "text": "actually going to organize a conference in June on June 15 in Berlin and it's",
    "start": "3654780",
    "end": "3664030"
  },
  {
    "text": "the the biggest graph to a conference that's happening in Europe and we'll have the creators of graph Kiel from",
    "start": "3664030",
    "end": "3669820"
  },
  {
    "text": "Facebook as speakers at the conference so it's really a good opportunity to get in touch with the graphical community",
    "start": "3669820",
    "end": "3676150"
  },
  {
    "text": "and learn more about the the entire ecosystem hopefully it gets deployed so",
    "start": "3676150",
    "end": "3684220"
  },
  {
    "text": "I don't want to keep you much longer if you're interested that this actually worked in the end you can come up",
    "start": "3684220",
    "end": "3690280"
  },
  {
    "text": "afterwards to me and that is all I have",
    "start": "3690280",
    "end": "3696280"
  },
  {
    "text": "thank you [Applause]",
    "start": "3696280",
    "end": "3705020"
  },
  {
    "text": "and maybe we can take one or two questions I can also understand if you",
    "start": "3705020",
    "end": "3712980"
  },
  {
    "text": "want to go out in the sunshine so alright thanks",
    "start": "3712980",
    "end": "3720829"
  }
]