[
  {
    "text": "hello everyone thank you for attending today's webinar um and and taking the time out of your busy schedules uh we",
    "start": "80",
    "end": "7120"
  },
  {
    "text": "have a lot of material to cover today but please uh keep uh asking questions in the chat window like Bowen said so we",
    "start": "7120",
    "end": "13599"
  },
  {
    "text": "we'll talk about Amazon cloudfront today and how you can use cloudfront which is aws's content delivery service to",
    "start": "13599",
    "end": "21439"
  },
  {
    "text": "accelerate your static Dynamic and interactive content uh essentially all different types of content that you may",
    "start": "21439",
    "end": "27679"
  },
  {
    "text": "have on your web application so you know the the first slide I hear I",
    "start": "27679",
    "end": "34640"
  },
  {
    "text": "have here is you may be wondering well you know why is this even there why performance matters I think most of us",
    "start": "34640",
    "end": "40000"
  },
  {
    "text": "get it but I I still think it's it's good to set the context and you know here that performance is important",
    "start": "40000",
    "end": "46680"
  },
  {
    "text": "because performance translate to higher page views performance directly impacts your customer experience and leads to",
    "start": "46680",
    "end": "52640"
  },
  {
    "text": "higher conversion rates and these are all uh business metrics that we all care about when it comes to having a user",
    "start": "52640",
    "end": "60320"
  },
  {
    "text": "facing web application to put a little bit more data to that if you look at um this",
    "start": "60320",
    "end": "67960"
  },
  {
    "text": "slide over here uh there was a study done by Aberdine Group which uh shows",
    "start": "67960",
    "end": "73520"
  },
  {
    "text": "that for an e-commerce site that makes $100,000 a day in Revenue a 1C delay in",
    "start": "73520",
    "end": "80119"
  },
  {
    "text": "page loow time can result in a loss of $2.5 million in sales over the course of",
    "start": "80119",
    "end": "86600"
  },
  {
    "text": "the year and these are big numbers and you can also see the loss in conversions page views as well as customer",
    "start": "86600",
    "end": "92799"
  },
  {
    "text": "satisfaction so this is why we think performance is important and we all care about performance and uh would love to",
    "start": "92799",
    "end": "100000"
  },
  {
    "text": "share a lot of tips with you today on how you can use Amazon cloudfront to improve",
    "start": "100000",
    "end": "105759"
  },
  {
    "text": "performance so when you think about performance uh and when I see customers",
    "start": "105759",
    "end": "111040"
  },
  {
    "text": "and where they're spending their time uh a lot of time is spent in improving backend infrastructure performance",
    "start": "111040",
    "end": "117439"
  },
  {
    "text": "whether that's your database and making that fast as fast fast as possible whether that's your application tier or your web tier um but 80% of a users",
    "start": "117439",
    "end": "128039"
  },
  {
    "text": "perceived latency really comes from the front end chtml is the objects that they download from your application um that's",
    "start": "128039",
    "end": "135680"
  },
  {
    "text": "where they you know that's where the latency over the network when uh they are trying to download uh your HTML on",
    "start": "135680",
    "end": "142599"
  },
  {
    "text": "your application uh or your website from uh from a web server that's where the",
    "start": "142599",
    "end": "148800"
  },
  {
    "text": "the slowness uh comes into Factor so how do we tackle that uh how can we think",
    "start": "148800",
    "end": "154519"
  },
  {
    "text": "about improving the performance of a web application that you may have well a typical application has two different",
    "start": "154519",
    "end": "160959"
  },
  {
    "text": "types of content and this is just to simplify the world of course web applications are complicated these days",
    "start": "160959",
    "end": "166800"
  },
  {
    "text": "but if you think about it at the highest level there's static or reusable content and there's dynamic or interactive",
    "start": "166800",
    "end": "173080"
  },
  {
    "text": "content for static content you can either set High ttls uh so that the",
    "start": "173080",
    "end": "178120"
  },
  {
    "text": "content can live in a cache for long period of time or you can set low ttls if the content is updated frequently and",
    "start": "178120",
    "end": "184640"
  },
  {
    "text": "then dynamic or interactive content really cannot be cached uh so you have to set a zero TTL there but um we'll",
    "start": "184640",
    "end": "191920"
  },
  {
    "text": "walk through some uh some examples of how you can improve uh performance of dynamic content as well using Amazon",
    "start": "191920",
    "end": "199200"
  },
  {
    "text": "Cloud so here are some examples of static or reusable content you see images you know your stylesheets",
    "start": "199200",
    "end": "205879"
  },
  {
    "text": "JavaScript files uh and then on the right you see a a screen grab of the amazon.com website where um you can you",
    "start": "205879",
    "end": "214560"
  },
  {
    "text": "you know you see uh related products so users who viewed this book also uh",
    "start": "214560",
    "end": "220599"
  },
  {
    "text": "viewed these other books um this is customized content um on the amazon.com",
    "start": "220599",
    "end": "226200"
  },
  {
    "text": "website and uh you know you would think that okay this is personalized to a set",
    "start": "226200",
    "end": "231400"
  },
  {
    "text": "of users so it couldn't really be cached uh but we'll see how even this content can be cached uh at the CDN Edge notes",
    "start": "231400",
    "end": "241040"
  },
  {
    "text": "but typically you know when I talk to customers they use an architecture that looks something like this well to",
    "start": "241040",
    "end": "247840"
  },
  {
    "text": "deliver their web application they have their static content which is sitting in an Amazon S3 bucket or their own origin",
    "start": "247840",
    "end": "253799"
  },
  {
    "text": "servers uh being fronted by a CDN Amazon cloudfront uh with the CDN example.com",
    "start": "253799",
    "end": "259880"
  },
  {
    "text": "domain but their Dynamic content users are going directly to the origin servers",
    "start": "259880",
    "end": "265759"
  },
  {
    "text": "to download the dynamic content so the reason customers do this uh and you know",
    "start": "265759",
    "end": "273160"
  },
  {
    "text": "what they say is well my Dynamic content cannot be cached um that's right so you",
    "start": "273160",
    "end": "279479"
  },
  {
    "text": "know so the response I get is why cach my Dynamic content uh or why use the CDN",
    "start": "279479",
    "end": "284960"
  },
  {
    "text": "for my Dynamic content um the argument there is dynamic content for example",
    "start": "284960",
    "end": "290120"
  },
  {
    "text": "your HTML Pages affect 100% of your viewers so all your viewers the first thing they need to do is download your",
    "start": "290120",
    "end": "296280"
  },
  {
    "text": "HTML before they can start before the page can start rendering on the the browser um and and the the browser can",
    "start": "296280",
    "end": "302840"
  },
  {
    "text": "start downloading the static assets on that page so it's important to optimize the performance of your Dynamic content",
    "start": "302840",
    "end": "308759"
  },
  {
    "text": "to the extent possible so why not use an architecture that looks something like",
    "start": "308759",
    "end": "314840"
  },
  {
    "text": "this where the cloudfront CDN node can front both your static and your Dynamic",
    "start": "314840",
    "end": "322120"
  },
  {
    "text": "content so users can go to cloudfront First using a single domain name www.example.com to download both the",
    "start": "322120",
    "end": "329120"
  },
  {
    "text": "dynamic in the static content the static content may be cached for a long or a short period of time at the edge node",
    "start": "329120",
    "end": "335360"
  },
  {
    "text": "and the dynamic content is probably not cached it has a zero TTL and gets simply",
    "start": "335360",
    "end": "340560"
  },
  {
    "text": "proxied via the edge note so when when when ask when we ask",
    "start": "340560",
    "end": "348000"
  },
  {
    "text": "customers so why not have an architecture like that why not put uh Cloud front uh in front of your Dynamic",
    "start": "348000",
    "end": "353720"
  },
  {
    "text": "content or a CDN in front of your Dynamic content uh customers typically say some combination of these uh these",
    "start": "353720",
    "end": "359960"
  },
  {
    "text": "statements either I don't see the value each request is unique and must go back to the origin",
    "start": "359960",
    "end": "365800"
  },
  {
    "text": "server or customers say well I see the value I understand the technical details here but my current CDN charges me",
    "start": "365800",
    "end": "372840"
  },
  {
    "text": "premium rates for dynamic content acceleration with so many additional fees that it's it's too expensive for me",
    "start": "372840",
    "end": "378880"
  },
  {
    "text": "to utilize this technology or customers are often uh",
    "start": "378880",
    "end": "384199"
  },
  {
    "text": "frustrated with the how difficult it is to configure their currency and uh for",
    "start": "384199",
    "end": "390680"
  },
  {
    "text": "dynamic content acceleration they say that it requires expensive Professional Services and it's not self",
    "start": "390680",
    "end": "397199"
  },
  {
    "text": "service so how can Amazon cloudfront help and and this is really think of",
    "start": "397199",
    "end": "402360"
  },
  {
    "text": "this as the agenda slide for our for our uh session today where we'll talk about several different techniques and",
    "start": "402360",
    "end": "408680"
  },
  {
    "text": "technologies that Amazon cloudfront has implemented um that can help speed up the delivery of both your static and",
    "start": "408680",
    "end": "415360"
  },
  {
    "text": "dynamic content and I want to especially highlight the last point there which is",
    "start": "415360",
    "end": "420680"
  },
  {
    "text": "cloudfront pricing for static content is the same as Dynamic content um so we",
    "start": "420680",
    "end": "427479"
  },
  {
    "text": "don't differentiate between static and dynamic content in terms of pricing um they're both priced at the same low",
    "start": "427479",
    "end": "432919"
  },
  {
    "text": "rates and the pay youo pricing that's available on the website so let's Dive Right",
    "start": "432919",
    "end": "440199"
  },
  {
    "text": "In so going back to our our two types of content that we talked about unique or",
    "start": "440199",
    "end": "445759"
  },
  {
    "text": "reusable contents what are these unique or reusable content is uh you know an object that does not",
    "start": "445759",
    "end": "453080"
  },
  {
    "text": "change for a given period of time it's something that you can cash and deliver the exact same object over and over",
    "start": "453080",
    "end": "458400"
  },
  {
    "text": "again to multiple users who are requesting it and then dynamic or interactive",
    "start": "458400",
    "end": "464360"
  },
  {
    "text": "content is the opposite of that where the content changes as soon as it gets created so this is personalized to a",
    "start": "464360",
    "end": "470919"
  },
  {
    "text": "particular user and caching does not provide any benefit because you can't reuse it you can't deliver it again to",
    "start": "470919",
    "end": "476879"
  },
  {
    "text": "another user so let's look at an example website here uh this is an e-commerce website a",
    "start": "476879",
    "end": "485360"
  },
  {
    "text": "bookstore um and uh for this website you know this website has both",
    "start": "485360",
    "end": "492680"
  },
  {
    "text": "Dynamic and static content the dynamic content as I've pointed out here is the index.jsp it's the HTML page just to",
    "start": "492680",
    "end": "499800"
  },
  {
    "text": "keep things simple that's the dynamic part of this site and then the images that you see the product images on the",
    "start": "499800",
    "end": "506039"
  },
  {
    "text": "page are the stat are examples of static content now this particular page takes 1.5",
    "start": "506039",
    "end": "512518"
  },
  {
    "text": "seconds currently to download for a user and going back to our statistic that we",
    "start": "512519",
    "end": "519320"
  },
  {
    "text": "saw from Aberdine group um the 1.5 seconds if we could lower that to.5",
    "start": "519320",
    "end": "525800"
  },
  {
    "text": "seconds or reduce the download time of this page by a second this particular e-commerce website could be earning $2.5",
    "start": "525800",
    "end": "533399"
  },
  {
    "text": "million more in a year in in sales so let's see if we we can do that",
    "start": "533399",
    "end": "540480"
  },
  {
    "text": "how can we improve the the performance of this particular web application well we can accelerate the static content on",
    "start": "540480",
    "end": "547000"
  },
  {
    "text": "that application and we can accelerate the dynamic content that's there on this",
    "start": "547000",
    "end": "552120"
  },
  {
    "text": "application so I would assume uh a lot of you are familiar with waterfall graphs um every major browser shows the",
    "start": "552120",
    "end": "560680"
  },
  {
    "text": "waterfall graphs where you can see for every object that the browser downloads including your uh base index.html page",
    "start": "560680",
    "end": "568680"
  },
  {
    "text": "um you see the the amount of time that was taken to download each of those",
    "start": "568680",
    "end": "574800"
  },
  {
    "text": "objects and for each object the the bar the time bar is also broken up into",
    "start": "574800",
    "end": "580600"
  },
  {
    "text": "things like DNS lookup the TCP connection time time to first bite and the content download time",
    "start": "580600",
    "end": "587560"
  },
  {
    "text": "itself so you see here that the top bar here is for the index.jsp for our",
    "start": "587560",
    "end": "595160"
  },
  {
    "text": "example um e-commerce website and then the the bar s down below are for each of",
    "start": "595160",
    "end": "600640"
  },
  {
    "text": "the individual objects that the browser needs to download uh from the server for this particular",
    "start": "600640",
    "end": "607720"
  },
  {
    "text": "website so let's go about and first optimize the static content that's",
    "start": "607920",
    "end": "614000"
  },
  {
    "text": "that's on their site and see what performance Improvement that can provide to us so again on this waterfall graph",
    "start": "614000",
    "end": "620160"
  },
  {
    "text": "you see the static contents are the smaller bars down below the first longer bar uh and these are things like images",
    "start": "620160",
    "end": "627200"
  },
  {
    "text": "or music or video files or text objects your JavaScript your your",
    "start": "627200",
    "end": "633120"
  },
  {
    "text": "CSS so static content is something that by definition does not change quickly",
    "start": "633120",
    "end": "640600"
  },
  {
    "text": "and we can distribute that to more than one user um so how long can you cash your static content you could cach it",
    "start": "640600",
    "end": "646800"
  },
  {
    "text": "for a few seconds a few minutes hours days um and caching is a way to serve",
    "start": "646800",
    "end": "653399"
  },
  {
    "text": "that content to more than one user um so that your request doesn't need to go all the way back to to your web",
    "start": "653399",
    "end": "661279"
  },
  {
    "text": "server so let's look at an example here so there's a user uh user request a from",
    "start": "661279",
    "end": "666519"
  },
  {
    "text": "this computer who's",
    "start": "666519",
    "end": "669839"
  },
  {
    "text": "making seems to be a little bit of trouble here okay uh this user is uh",
    "start": "673600",
    "end": "679639"
  },
  {
    "text": "requesting an image from the edge location and the edge location doesn't",
    "start": "679639",
    "end": "685680"
  },
  {
    "text": "have this image today so the edge location sends a request back to the origin server the origin server responds",
    "start": "685680",
    "end": "692279"
  },
  {
    "text": "back to the edge location and the edge location can now cach this object you see a red dot at the edge location and",
    "start": "692279",
    "end": "697880"
  },
  {
    "text": "then the edge location responds back to the user with the object and the user has downloaded this object now the next",
    "start": "697880",
    "end": "704160"
  },
  {
    "text": "user user request B that comes to the same Edge location for that same object",
    "start": "704160",
    "end": "710240"
  },
  {
    "text": "before the object has expired because it's casted over there The Edge location does not need to go back to the origin",
    "start": "710240",
    "end": "716160"
  },
  {
    "text": "this time it can just respond back to the browser with that with that image or",
    "start": "716160",
    "end": "721360"
  },
  {
    "text": "with that object so that's the benefit that caching your static objects across the",
    "start": "721360",
    "end": "728760"
  },
  {
    "text": "globe using a CDN like Amazon cloudfront provides because cloudfront Edge nodes",
    "start": "728760",
    "end": "735760"
  },
  {
    "text": "that are distributed around the world and today we have 46 nodes around the world they you you help you bring your",
    "start": "735760",
    "end": "743760"
  },
  {
    "text": "content closer to your users so your users don't have to go all the way back to your origin servers",
    "start": "743760",
    "end": "750879"
  },
  {
    "text": "so optimizing static content you use caching and that helps improve the experience and the performance for your",
    "start": "752079",
    "end": "759240"
  },
  {
    "text": "users uh it helps offload your infrastructure as well because the requests are not making all the way back",
    "start": "759240",
    "end": "765000"
  },
  {
    "text": "to the origin or at least not all requests are making back to the origin so that help relieves uh load on your",
    "start": "765000",
    "end": "770839"
  },
  {
    "text": "origin servers so looking at our example uh web",
    "start": "770839",
    "end": "777040"
  },
  {
    "text": "application again before caching the static objects that were on that page uh",
    "start": "777040",
    "end": "782639"
  },
  {
    "text": "we we said that the page took about 1.5 seconds or 1.46 seconds in this case to",
    "start": "782639",
    "end": "788839"
  },
  {
    "text": "load after we cached all of the static content we notice that the load time for",
    "start": "788839",
    "end": "795040"
  },
  {
    "text": "the entire page goes down basically in half um so 770 milliseconds now so",
    "start": "795040",
    "end": "800920"
  },
  {
    "text": "that's a huge Improvement the page is loading much faster so are we really done we' have",
    "start": "800920",
    "end": "806600"
  },
  {
    "text": "cached all of our static content well not so",
    "start": "806600",
    "end": "811760"
  },
  {
    "text": "fast so let's look at our water waterall graph again what we' have done so far is we've taken some of our static objects",
    "start": "811839",
    "end": "819240"
  },
  {
    "text": "such as the just the JavaScript the CSS um and the images and cach them at the",
    "start": "819240",
    "end": "825880"
  },
  {
    "text": "cloudfront edge notes great that helped bring down the page load time significantly but what about some other",
    "start": "825880",
    "end": "832279"
  },
  {
    "text": "types of static content or reusable contents that may be there on that page uh as well as our index. GSP we have",
    "start": "832279",
    "end": "838759"
  },
  {
    "text": "haven't really touched those objects yet at all so the the the overall goal here",
    "start": "838759",
    "end": "846880"
  },
  {
    "text": "should be as you're looking at your web application uh even beyond the static",
    "start": "846880",
    "end": "852440"
  },
  {
    "text": "objects is to cash as much as you can cash as much as possible to identify objects to identify resources on your",
    "start": "852440",
    "end": "859920"
  },
  {
    "text": "application that impact user download time and performance and figure out ways",
    "start": "859920",
    "end": "865839"
  },
  {
    "text": "in which you could cache it at the EDG note",
    "start": "865839",
    "end": "870680"
  },
  {
    "text": "so you know you may ask well I'm already caching my images my CSS my JavaScript",
    "start": "872000",
    "end": "877480"
  },
  {
    "text": "what else can I cache",
    "start": "877480",
    "end": "881360"
  },
  {
    "text": "so so there um I would I would say you know I would",
    "start": "884160",
    "end": "890800"
  },
  {
    "text": "give you one approach you can you can find other approaches in terms of how you can identify objects on your application that you can cache but one",
    "start": "890800",
    "end": "897199"
  },
  {
    "text": "of the approaches could be well colle SCT your web application logs from your web tier uh these are generally w3c",
    "start": "897199",
    "end": "903680"
  },
  {
    "text": "compliance standardized logs and you can run a log analysis tool or run a report",
    "start": "903680",
    "end": "909240"
  },
  {
    "text": "using either an AWS service such as EMR which is our elastic map produce service",
    "start": "909240",
    "end": "914279"
  },
  {
    "text": "or RDS which is a relational database store uh or red shift and you can identify the top end URLs that your",
    "start": "914279",
    "end": "920839"
  },
  {
    "text": "users are requesting so running that analysis for our example website we see",
    "start": "920839",
    "end": "927240"
  },
  {
    "text": "uh 220 users requesting the index.jsp 200 we requesting the the book",
    "start": "927240",
    "end": "933240"
  },
  {
    "text": "one. JF image and so on so we have already cached the GIF which is the",
    "start": "933240",
    "end": "939519"
  },
  {
    "text": "image the CSS files which is the cascading stylesheet and the Javascript file for this page you see there is a",
    "start": "939519",
    "end": "946240"
  },
  {
    "text": "lot of other URLs that have been requested fairly frequently in this short period of time that we did the log",
    "start": "946240",
    "end": "951800"
  },
  {
    "text": "analysis for that we haven't really thought about caching so let's see if we could potentially cach some of those",
    "start": "951800",
    "end": "957920"
  },
  {
    "text": "URLs as well so what about content that is delivered via query strings could be a search",
    "start": "957920",
    "end": "964480"
  },
  {
    "text": "results for instance so in this example the this particular URL that has a query",
    "start": "964480",
    "end": "970199"
  },
  {
    "text": "string was requested 110 times so do we think this content could be cached maybe",
    "start": "970199",
    "end": "977160"
  },
  {
    "text": "it's reusable possibly cloudfront can cache content with query strings as well so",
    "start": "977160",
    "end": "984399"
  },
  {
    "text": "every unique query string combination is a new object in Cloud's cache so you",
    "start": "984399",
    "end": "989920"
  },
  {
    "text": "know the qu string parameter in in the URL uh you know name equals or search",
    "start": "989920",
    "end": "995519"
  },
  {
    "text": "equals whatever the user is searching on if you find in your web tier logs that a",
    "start": "995519",
    "end": "1001639"
  },
  {
    "text": "particular query string URL is requested multiple times then you can actually",
    "start": "1001639",
    "end": "1006959"
  },
  {
    "text": "cach that URL what about API calls so if you have",
    "start": "1006959",
    "end": "1014000"
  },
  {
    "text": "uh apis that you're delivering uh and then that your viewers are using using",
    "start": "1014000",
    "end": "1019480"
  },
  {
    "text": "uh so in this example category equals math so this API result will respond back with all of the math books or the",
    "start": "1019480",
    "end": "1025720"
  },
  {
    "text": "books that are categorized under the math category 100 customers call this API or 100 users so is this",
    "start": "1025720",
    "end": "1032480"
  },
  {
    "text": "reusable what about uh another API call that lists the top 10 books on that on",
    "start": "1032480",
    "end": "1038438"
  },
  {
    "text": "that example website is that reusable we saw 80 requests for that particular API",
    "start": "1038439",
    "end": "1043558"
  },
  {
    "text": "uh result so when you think about API calls for instance then you may think",
    "start": "1043559",
    "end": "1048960"
  },
  {
    "text": "that well my API results are actually database driven they're changing fairly frequently although not necessarily",
    "start": "1048960",
    "end": "1056120"
  },
  {
    "text": "every request but they're changing maybe every 5 seconds or 10 seconds as I'm as my database is continuously updating the",
    "start": "1056120",
    "end": "1062120"
  },
  {
    "text": "results in the back end well you know I couldn't really cash it or I may not get",
    "start": "1062120",
    "end": "1067280"
  },
  {
    "text": "the benefit from caching it so there what I would suggest is hey what if we changed our time unit",
    "start": "1067280",
    "end": "1075159"
  },
  {
    "text": "because you know content can be cached at at Cloud Edge locations not just for",
    "start": "1075159",
    "end": "1080240"
  },
  {
    "text": "hours not just for minutes but also for seconds so Cloud can cash your content for any unit of time including really",
    "start": "1080240",
    "end": "1086960"
  },
  {
    "text": "small units of time so if a particular API call gets you know a th000 hits uh",
    "start": "1086960",
    "end": "1094679"
  },
  {
    "text": "so if you have a read heavy API for instance you can offload your web tier from handling those 1,000 requests per",
    "start": "1094679",
    "end": "1101000"
  },
  {
    "text": "second you can also offload your load balancers whether it's your elastic load balancer uh elb or any other balancer",
    "start": "1101000",
    "end": "1108799"
  },
  {
    "text": "that you may be using um and let the cloud Edge location handle all of those requests for a second all of those",
    "start": "1108799",
    "end": "1115039"
  },
  {
    "text": "requests from the users this again helps you uh provision less capacity and helps",
    "start": "1115039",
    "end": "1121159"
  },
  {
    "text": "you reduce your costs at the origin server so you don't have to provision as many load balancers or web toer",
    "start": "1121159",
    "end": "1128520"
  },
  {
    "text": "servers so now let's say we have identified a short period of time that",
    "start": "1130159",
    "end": "1135480"
  },
  {
    "text": "we can cache our query strings and our API calls we've already cached our images JavaScript and CSS files we're",
    "start": "1135480",
    "end": "1142200"
  },
  {
    "text": "finally left with our base page our HTML page which is the index.jsp well you know 220 users",
    "start": "1142200",
    "end": "1149320"
  },
  {
    "text": "requested this um basically this impacts everyone and the requests are going all",
    "start": "1149320",
    "end": "1154520"
  },
  {
    "text": "the way back to the origin server can we potentially cach this typically not um it depends but",
    "start": "1154520",
    "end": "1162720"
  },
  {
    "text": "typically not so in our example for instance this is an example of dynamic content because in this example this web",
    "start": "1162720",
    "end": "1168840"
  },
  {
    "text": "page was customized or personalized to me it said hello Niar when I because I'm logged in so this is an example of",
    "start": "1168840",
    "end": "1175240"
  },
  {
    "text": "dynamic content and let's talk about how using a cloudfront edge node and proxying the request for this particular",
    "start": "1175240",
    "end": "1182039"
  },
  {
    "text": "page uh through that cloudfront edge note can help uh improve the performance even further for for this e-commerce",
    "start": "1182039",
    "end": "1190159"
  },
  {
    "text": "website so let's focus on our index. JSP page and the waterfall graph and our",
    "start": "1190159",
    "end": "1195400"
  },
  {
    "text": "goal is to um uh to really compress that um particular",
    "start": "1195400",
    "end": "1201960"
  },
  {
    "text": "waterfall graph to the extent we can now Dynamic content is not cachable we can't",
    "start": "1201960",
    "end": "1207440"
  },
  {
    "text": "really cach that at the edge at least in this example um but we can proxy that",
    "start": "1207440",
    "end": "1213600"
  },
  {
    "text": "request to the origin and back from the origin um via the cloudon edge note so",
    "start": "1213600",
    "end": "1219159"
  },
  {
    "text": "let's look at an example here the first user sends a request for dynamic for",
    "start": "1219159",
    "end": "1224679"
  },
  {
    "text": "dynamic content to an edge location The Edge location doesn't have this content because it's not cachable so the edge",
    "start": "1224679",
    "end": "1230000"
  },
  {
    "text": "location sends the request back to the origin the origin responds back and the origin sends the response and the edge",
    "start": "1230000",
    "end": "1236240"
  },
  {
    "text": "sends the response back to the user the origin instructs The Edge location to not cache this so the edge location",
    "start": "1236240",
    "end": "1241480"
  },
  {
    "text": "doesn't have this particular object in its cache so when the second user makes a request for the same object The Edge",
    "start": "1241480",
    "end": "1248080"
  },
  {
    "text": "location sends the request back to the origin again the origin responds back to the edge and then the edge will Pro will",
    "start": "1248080",
    "end": "1254080"
  },
  {
    "text": "deliver that particular object to the user so as you can see this this",
    "start": "1254080",
    "end": "1260240"
  },
  {
    "text": "basically demonstrate that every request is going all the way back to the origin",
    "start": "1260240",
    "end": "1265600"
  },
  {
    "text": "server so wouldn't that add latency that's that's a question that I",
    "start": "1265600",
    "end": "1270720"
  },
  {
    "text": "get sometimes from customers because you're you're adding another hop along",
    "start": "1270720",
    "end": "1275960"
  },
  {
    "text": "the way you're adding a cloudfront edge node that must proxy this request back to the origin server versus this user of",
    "start": "1275960",
    "end": "1282640"
  },
  {
    "text": "mine going directly to the origin server so how can we how can cloud help",
    "start": "1282640",
    "end": "1288559"
  },
  {
    "text": "optimize this Dynamic content delivery by putting cloudfront in the middle of a user and the origin server for a dynamic",
    "start": "1288559",
    "end": "1297400"
  },
  {
    "text": "request so our goal again is to compress this uh this particular waterfall chart",
    "start": "1297400",
    "end": "1302679"
  },
  {
    "text": "for our index.jsp page so let's look at it piece by piece",
    "start": "1302679",
    "end": "1308760"
  },
  {
    "text": "what does this waterall chart or what does this download time compose of uh this is composed of the dnf lookup time",
    "start": "1308760",
    "end": "1315360"
  },
  {
    "text": "the TCP connection time time to first bite and and the content download time",
    "start": "1315360",
    "end": "1321840"
  },
  {
    "text": "so how do we optimize and how do we compress each one of those bars uh each",
    "start": "1321840",
    "end": "1327360"
  },
  {
    "text": "one of those portions of that bar so for reduced DNS time we can use rout 53",
    "start": "1327360",
    "end": "1333159"
  },
  {
    "text": "which is Amazon's our authoritative DNS service for uh reduced connection time",
    "start": "1333159",
    "end": "1339720"
  },
  {
    "text": "we can take advantage of cloud Fern's keep alive connections back to the origin servers from every Edge node for",
    "start": "1339720",
    "end": "1345720"
  },
  {
    "text": "reduced first bite time we can again take advantage of cloud keep live connections and then for the content",
    "start": "1345720",
    "end": "1352080"
  },
  {
    "text": "download time even though we're not caching the content at the edge we can take advantage of cloud F TCB IP",
    "start": "1352080",
    "end": "1358039"
  },
  {
    "text": "optimizations to download that content faster when proxy via Cloud for Edge",
    "start": "1358039",
    "end": "1363919"
  },
  {
    "text": "location so let's use this as a reference again before we dive into optimizing our Dynamic content before",
    "start": "1363919",
    "end": "1370640"
  },
  {
    "text": "any Dynamic content optimization we were at 770 milliseconds for downloading this",
    "start": "1370640",
    "end": "1376960"
  },
  {
    "text": "page so how do we first improve our DNS time well with Amazon Route 53 which is",
    "start": "1376960",
    "end": "1384400"
  },
  {
    "text": "aws's authoritative DNS service you can get low latency DNS resolution",
    "start": "1384400",
    "end": "1392200"
  },
  {
    "text": "and that's because of the global network of DNS servers that Amazon rout 53 uses",
    "start": "1392200",
    "end": "1397679"
  },
  {
    "text": "that are distributed across the world um to making R 53 fast easy to use and a",
    "start": "1397679",
    "end": "1404840"
  },
  {
    "text": "cost effective authoritative DNS service the queries from your end users are routed to the nearest DNS server um and",
    "start": "1404840",
    "end": "1413520"
  },
  {
    "text": "that DNS server responds back in a very short period of Time Versus that query going to one Central DNS server or a",
    "start": "1413520",
    "end": "1420799"
  },
  {
    "text": "couple of DNS servers that you may be running so let's look at this in this in this example this may be a typical or",
    "start": "1420799",
    "end": "1427600"
  },
  {
    "text": "traditional architecture where you've got a couple of DNS servers running um you know one in the US one maybe in",
    "start": "1427600",
    "end": "1433799"
  },
  {
    "text": "Europe and these two are serving your entire Global um user Bas when resolving",
    "start": "1433799",
    "end": "1438880"
  },
  {
    "text": "DNS queries well instead R 53 has multiple uh DNS servers or multiple uh",
    "start": "1438880",
    "end": "1446080"
  },
  {
    "text": "nodes that are running across the world and your users get routed to the closest",
    "start": "1446080",
    "end": "1452240"
  },
  {
    "text": "DNS server that can answer their [Applause] query how about the TCP connection time",
    "start": "1452240",
    "end": "1459080"
  },
  {
    "text": "and the time to First Bite let's focus on those so we talked about using Amazon",
    "start": "1459080",
    "end": "1465440"
  },
  {
    "text": "Cloud fors to keep alive connections and and how those how that can help you uh",
    "start": "1465440",
    "end": "1470640"
  },
  {
    "text": "lower your uh your TCP connect time so what are the TCP IP bottlenecks",
    "start": "1470640",
    "end": "1478200"
  },
  {
    "text": "on the internet many of you are familiar with this um if you think about Dynamic",
    "start": "1478200",
    "end": "1483279"
  },
  {
    "text": "content Dynamic content is typically small in size we're talking about your the shell of your web page is the",
    "start": "1483279",
    "end": "1489399"
  },
  {
    "text": "HTML and HTTP which runs on tcpip gets",
    "start": "1489399",
    "end": "1494919"
  },
  {
    "text": "penalized uh for small um for objects that are small in size your Dynamic",
    "start": "1494919",
    "end": "1499960"
  },
  {
    "text": "content uh because there's a lot of time spent on establishing a TCP connection",
    "start": "1499960",
    "end": "1506039"
  },
  {
    "text": "um relative to the time that's required to download that relatively small a few kilobyte size",
    "start": "1506039",
    "end": "1512720"
  },
  {
    "text": "object the connection time really is um you know what's involved there is when",
    "start": "1512720",
    "end": "1518760"
  },
  {
    "text": "TCB does initiates a handshake from the client to another server uh it does a",
    "start": "1518760",
    "end": "1524440"
  },
  {
    "text": "sin a syac and an act so there's a three-way handshake so there's a there's a round trip that happens before the",
    "start": "1524440",
    "end": "1530960"
  },
  {
    "text": "client can even request the data that uh it needs to be downloaded so first the",
    "start": "1530960",
    "end": "1536120"
  },
  {
    "text": "connection needs to be established and then you can send the request for the data so this handshake delay um you know",
    "start": "1536120",
    "end": "1544399"
  },
  {
    "text": "U it it depends on the client to server latency because the round trip needs to Traverse the entire distance from the",
    "start": "1544399",
    "end": "1551480"
  },
  {
    "text": "browser to the server and come back so let's look at an example here uh",
    "start": "1551480",
    "end": "1559640"
  },
  {
    "text": "you know a TCP handshake starts with a sin uh you know in response it receives a the client receives as an act and then",
    "start": "1559640",
    "end": "1567440"
  },
  {
    "text": "the client responds back with an act and that and then request the data so that's the the length of time that takes for",
    "start": "1567440",
    "end": "1572720"
  },
  {
    "text": "the entire TCP handshake to occur so if your users today are not",
    "start": "1572720",
    "end": "1580480"
  },
  {
    "text": "using cloudfront for dynamic content so you have multiple users across the world",
    "start": "1580480",
    "end": "1585640"
  },
  {
    "text": "each of your users get connected to your infrastructure directly because there is no cloudfront proxy in the middle every",
    "start": "1585640",
    "end": "1592919"
  },
  {
    "text": "user causes a new TCP connection at your origin infrastructure because every",
    "start": "1592919",
    "end": "1599279"
  },
  {
    "text": "client browser must do that TCP handshake first before requesting data",
    "start": "1599279",
    "end": "1604320"
  },
  {
    "text": "so the more users you have the more TCP connections you need to establish with your origin",
    "start": "1604320",
    "end": "1610240"
  },
  {
    "text": "infrastructure and you're not leveraging the keep alive connections potentially that you could get from directing those",
    "start": "1610240",
    "end": "1617159"
  },
  {
    "text": "users to a proxy like a cloud for Edge node which could keep the connections alive and your origin servers wouldn't",
    "start": "1617159",
    "end": "1623840"
  },
  {
    "text": "need to do TCP handshakes all the time to serve all of your different",
    "start": "1623840",
    "end": "1628880"
  },
  {
    "text": "viewers so looking at it in this particular",
    "start": "1628880",
    "end": "1635639"
  },
  {
    "text": "diagram yes um you see um that all of these",
    "start": "1640000",
    "end": "1648080"
  },
  {
    "text": "different users are connecting uh directly with the elastic load balancer",
    "start": "1648080",
    "end": "1656440"
  },
  {
    "text": "um and they're all initiating TCP connections individually with the load",
    "start": "1656440",
    "end": "1662640"
  },
  {
    "text": "bouncer it's having a little technical issue here on my end I think you are able to see the",
    "start": "1669159",
    "end": "1675640"
  },
  {
    "text": "slides all right so so without the keep alive connections if all of your users",
    "start": "1675640",
    "end": "1681440"
  },
  {
    "text": "are connecting directly to the load balancer to your origin infrastructure that puts load on your web servers that",
    "start": "1681440",
    "end": "1687640"
  },
  {
    "text": "causes an increase in your memory in your CPU utilization and without the keep alive connections this load on your",
    "start": "1687640",
    "end": "1694399"
  },
  {
    "text": "web server increases your increases the time to First pite that your users can see so the longer your web tier takes to",
    "start": "1694399",
    "end": "1701559"
  },
  {
    "text": "respond back to the users requests uh with the data that they want to download",
    "start": "1701559",
    "end": "1707640"
  },
  {
    "text": "um that increases the time um that it takes the user to be able to see the",
    "start": "1707640",
    "end": "1714000"
  },
  {
    "text": "data that they've requested so just increases the time to first bite and that lowers",
    "start": "1714000",
    "end": "1719398"
  },
  {
    "text": "performance so how do keep alive connections help well keep alive connections they help you avoid",
    "start": "1719519",
    "end": "1725279"
  },
  {
    "text": "additional connections so not all of your users need to make a TCP establish",
    "start": "1725279",
    "end": "1731279"
  },
  {
    "text": "a TCP connection directly with the origin server so there are fewer handshakes as a result and that helps",
    "start": "1731279",
    "end": "1736720"
  },
  {
    "text": "improve the TCP be connect time and the time to First Bite so cloudfront utilizes keep Al",
    "start": "1736720",
    "end": "1745519"
  },
  {
    "text": "connections from each Edge node back to the origin server so users your users",
    "start": "1745519",
    "end": "1751159"
  },
  {
    "text": "will get connected to one of cloudfront 46 nodes cloudfront opens the keep alive",
    "start": "1751159",
    "end": "1757159"
  },
  {
    "text": "connection back to your web tier cloudfront keeps that connection open so that when we receive a request from",
    "start": "1757159",
    "end": "1764159"
  },
  {
    "text": "another user of yours for another object on your site or maybe the same object we",
    "start": "1764159",
    "end": "1769320"
  },
  {
    "text": "use the same connection that's kept alive back to your web tier to your origin infrastructure we don't need to",
    "start": "1769320",
    "end": "1775679"
  },
  {
    "text": "establish a new TCP connection from cloud front edge node back to the origin so we reuse the existing connection and",
    "start": "1775679",
    "end": "1784039"
  },
  {
    "text": "directly go and ask for the data so with cloudfront more users does not",
    "start": "1784039",
    "end": "1793120"
  },
  {
    "text": "equal more TCP connections again that's because of reusing existing connections that are already established from other",
    "start": "1793120",
    "end": "1799840"
  },
  {
    "text": "users who came prior to the current user uh that helps improve response time due",
    "start": "1799840",
    "end": "1806000"
  },
  {
    "text": "to fewer TCP handshakes and that helps uh also offload your web tier's CPU and",
    "start": "1806000",
    "end": "1811440"
  },
  {
    "text": "memory utilization so let's look at another diagram here",
    "start": "1811440",
    "end": "1817720"
  },
  {
    "text": "where your users are going to your first user goes to a CLR Edge node CL Edge",
    "start": "1817720",
    "end": "1822760"
  },
  {
    "text": "node establishes or does a TCP handshake because this is the first time the edge node is going back to the origin server",
    "start": "1822760",
    "end": "1829000"
  },
  {
    "text": "it keeps that connection alive so this when the second user comes to cloudfront requesting content the or the third user",
    "start": "1829000",
    "end": "1836760"
  },
  {
    "text": "comes that same kept that same connection that's already kept open with the origin servers utilized to download",
    "start": "1836760",
    "end": "1842039"
  },
  {
    "text": "that Dynamic content so we did a little bit of testing with this and what we saw is",
    "start": "1842039",
    "end": "1849480"
  },
  {
    "text": "when we sent a number of requests to um you know U so this this was a lab",
    "start": "1849480",
    "end": "1856279"
  },
  {
    "text": "test when we sent a a large number of requests to cloudfront uh Edge location",
    "start": "1856279",
    "end": "1861799"
  },
  {
    "text": "um and because the cloudfront edge location was keeping connections live with the origin server um the CPU",
    "start": "1861799",
    "end": "1869120"
  },
  {
    "text": "utilization at the origin web server with cloudfront and the keep alive connections was 6% which was",
    "start": "1869120",
    "end": "1876360"
  },
  {
    "text": "significantly below when there was no cloudfront and all of those requests",
    "start": "1876360",
    "end": "1881480"
  },
  {
    "text": "were going directly to the origin server with each request causing a TCP handshake and a connection uh and",
    "start": "1881480",
    "end": "1887679"
  },
  {
    "text": "establishing a connection so that's some significant savings there in terms of your CPU utilization so you don't have",
    "start": "1887679",
    "end": "1893960"
  },
  {
    "text": "to scale your origin infrastructure as much as you would if there were no Cloud",
    "start": "1893960",
    "end": "1901120"
  },
  {
    "text": "run so now let's get to uh the content download time and how can we optimize",
    "start": "1902600",
    "end": "1907919"
  },
  {
    "text": "the content download time and compress that further for our Dynamic content where every request has to go back to",
    "start": "1907919",
    "end": "1913600"
  },
  {
    "text": "the origin so this is where you can take advantage of Cloud FR TCP IP slow start",
    "start": "1913600",
    "end": "1919919"
  },
  {
    "text": "optimization so what does that mean uh TCP slow start uh this is a concept",
    "start": "1919919",
    "end": "1925639"
  },
  {
    "text": "that's out on the internet and it's there because we need to control the amount of data that's exchanged between",
    "start": "1925639",
    "end": "1931720"
  },
  {
    "text": "Two Hosts so the TCP handshake uh once that's established the number of packets",
    "start": "1931720",
    "end": "1938039"
  },
  {
    "text": "that can be sent between those two hosts start out small and then they grow over time as The Two Hosts are talking to",
    "start": "1938039",
    "end": "1944799"
  },
  {
    "text": "each other uh for a longer period of time so slow start is really uh they're",
    "start": "1944799",
    "end": "1949840"
  },
  {
    "text": "out on the internet to avoid overwhelming the internet so that not the entire megabytes of data can be sent",
    "start": "1949840",
    "end": "1956760"
  },
  {
    "text": "in a single packet and that may cause congestion on the pipes so what does CLR do to help with",
    "start": "1956760",
    "end": "1963799"
  },
  {
    "text": "slow start optimization well clarren helps optimize slow start by advertising a larger um uh initial congestion window",
    "start": "1963799",
    "end": "1973559"
  },
  {
    "text": "so that um you know so so that uh more data can",
    "start": "1973559",
    "end": "1979519"
  },
  {
    "text": "be sent in that initial request and then also since cloudfront keeps connections alive back to the origin server um that",
    "start": "1979519",
    "end": "1987960"
  },
  {
    "text": "slow that congestion window is actually optimized over time so that each new",
    "start": "1987960",
    "end": "1993039"
  },
  {
    "text": "user that requests content off of cloudfront cloudfront goes back to the origin server over an optimized",
    "start": "1993039",
    "end": "1999600"
  },
  {
    "text": "connection where more data can be sent from the origin back to the cloud Edge node um versus if the client was going",
    "start": "1999600",
    "end": "2007279"
  },
  {
    "text": "directly to the origin server and starting out at a small congestion window a slow start and then optim",
    "start": "2007279",
    "end": "2014000"
  },
  {
    "text": "getting that optimized over time so these are all techniques uh the",
    "start": "2014000",
    "end": "2022360"
  },
  {
    "text": "slow start optimization the TCP IP optimizations uh that are already keep",
    "start": "2022360",
    "end": "2027880"
  },
  {
    "text": "alive connections these are all already existing in cloudfront for accelerating",
    "start": "2027880",
    "end": "2033279"
  },
  {
    "text": "the delivery of your Dynamic content these are not configurations are not you need to tweak you get the benefit of",
    "start": "2033279",
    "end": "2039799"
  },
  {
    "text": "these optimizations simply by using cloudfront and setting the right time to live on your objects so that your",
    "start": "2039799",
    "end": "2047000"
  },
  {
    "text": "requests can either be C your objects can either be cached or proxied through a clar for Edge",
    "start": "2047000",
    "end": "2052878"
  },
  {
    "text": "note now you know we we started off with the example of an e-commerce website um",
    "start": "2052879",
    "end": "2059320"
  },
  {
    "text": "you know without doubt the e-commerce website will need to have some connections that would be over SSL um so",
    "start": "2059320",
    "end": "2066000"
  },
  {
    "text": "secure connections so how can we optimize those secure connections with cloudfront you can use uh cloudfront to",
    "start": "2066000",
    "end": "2073560"
  },
  {
    "text": "terminate SSL at the edge location um so your users can connect to cloudfront",
    "start": "2073560",
    "end": "2079040"
  },
  {
    "text": "over an SSL connection and we'll see how that can benefit in terms of offloading",
    "start": "2079040",
    "end": "2084118"
  },
  {
    "text": "load from your from your origin infrastructure so with SSL optimization",
    "start": "2084119",
    "end": "2089280"
  },
  {
    "text": "with cloudfront um you can use either the CLR certificate the star. cloudfront.net",
    "start": "2089280",
    "end": "2096040"
  },
  {
    "text": "certificate or you can bring your own custom certificate and upload that to",
    "start": "2096040",
    "end": "2101119"
  },
  {
    "text": "cloudfront and use that for your users to establish TCP",
    "start": "2101119",
    "end": "2107160"
  },
  {
    "text": "connections the SSL traffic gets terminated at the closest cloudfront Edge location",
    "start": "2107160",
    "end": "2113320"
  },
  {
    "text": "and there are couple of different patterns actually that that I've seen",
    "start": "2113320",
    "end": "2118920"
  },
  {
    "text": "customers use when it comes to using SSL with cloudfront uh you know I call them",
    "start": "2118920",
    "end": "2124079"
  },
  {
    "text": "a half Bridge SSL termination or a full Bridge SSL termination so let's talk about what those mean so in the half",
    "start": "2124079",
    "end": "2130119"
  },
  {
    "text": "Bridge SSL termination the client or the user connects to a clar edge location over https over an SSL connection and",
    "start": "2130119",
    "end": "2138359"
  },
  {
    "text": "then the cloud Edge node goes back to your origin infrastructure over",
    "start": "2138359",
    "end": "2144400"
  },
  {
    "text": "HTTP so you can see here all of your users are going to the edge node via https the connection gets terminated at",
    "start": "2144480",
    "end": "2151160"
  },
  {
    "text": "the edge node and then the edge node uses regular HTTP uh Which is less expensive from a",
    "start": "2151160",
    "end": "2157720"
  },
  {
    "text": "computation perspective to go back to your origin infrastructure so your users get the",
    "start": "2157720",
    "end": "2164000"
  },
  {
    "text": "encrypted Channel and the advantage of terminating SSL closer to them uh which helps",
    "start": "2164000",
    "end": "2171520"
  },
  {
    "text": "improve performance for them while the edge node is going back to your origin over HTTP that helps uh",
    "start": "2171520",
    "end": "2179200"
  },
  {
    "text": "bring um your content back to the H note faster so better performance by",
    "start": "2179200",
    "end": "2186200"
  },
  {
    "text": "leveraging HTP connections back to the origin and then also since the the SSL",
    "start": "2186200",
    "end": "2192839"
  },
  {
    "text": "handshake is a lot more expensive than just a regular TCP handshake um your origin uh is actually offloaded by",
    "start": "2192839",
    "end": "2199440"
  },
  {
    "text": "terminating SSL connections at the edge and if you weren't using cloudfront all of your users who need to use SSL would",
    "start": "2199440",
    "end": "2207920"
  },
  {
    "text": "be terminating the SSL connections at your origin infrastructure so your origin would need to scale further to be",
    "start": "2207920",
    "end": "2214599"
  },
  {
    "text": "able to support all of those SSL terminations so taking advantage of uh cloudfront",
    "start": "2214599",
    "end": "2221079"
  },
  {
    "text": "keep alive connections that's another benefit that you get even for SSL connections clar still keeps the connections open to your origin",
    "start": "2221079",
    "end": "2227240"
  },
  {
    "text": "infrastructure and all of the TCP IP optimizations and the window sizing that we talked about do apply for SSL",
    "start": "2227240",
    "end": "2233000"
  },
  {
    "text": "connections as well so how does that compare to the",
    "start": "2233000",
    "end": "2238400"
  },
  {
    "text": "full Bridge SSL termination in this scenario the users connect to a cloudfront edge node over https over an",
    "start": "2238400",
    "end": "2245720"
  },
  {
    "text": "SSL connection and then the edge node goes back to your origin infrastructure also over an SSL",
    "start": "2245720",
    "end": "2253960"
  },
  {
    "text": "connection so in this in this uh optimization your users are connecting",
    "start": "2253960",
    "end": "2259599"
  },
  {
    "text": "over https and then the edge node is also going over https to your origin infrastructure so you get the benefit of",
    "start": "2259599",
    "end": "2266359"
  },
  {
    "text": "endtoend encryption from the user all the way back to your origin server uh",
    "start": "2266359",
    "end": "2271760"
  },
  {
    "text": "and you're still getting the advantage of terminating the SSL connection from your users",
    "start": "2271760",
    "end": "2277119"
  },
  {
    "text": "closer to them at a cloud for Edge node um so that they don't have to establish",
    "start": "2277119",
    "end": "2283040"
  },
  {
    "text": "an SSL connection over a long Hall uh depending on where your users are uh",
    "start": "2283040",
    "end": "2288359"
  },
  {
    "text": "relative to your origin server so half brid uh or rather this",
    "start": "2288359",
    "end": "2295440"
  },
  {
    "text": "should be full Bridge uh full Bridge SSL termination also has the same benefits as the half Bridge it's taking advantage",
    "start": "2295440",
    "end": "2300920"
  },
  {
    "text": "of cloudfront keep Al connections as well as all of the TCP IP optimizations apply here as well",
    "start": "2300920",
    "end": "2308520"
  },
  {
    "text": "another um type of content uh that your interactive uh or e-commerce type",
    "start": "2308560",
    "end": "2315240"
  },
  {
    "text": "application may have is optimizing post or put uh it's using post or put uh HTTP",
    "start": "2315240",
    "end": "2322280"
  },
  {
    "text": "verbs or methods to actually upload content whether that's filling out a form a comment box logging into your",
    "start": "2322280",
    "end": "2328560"
  },
  {
    "text": "site add to card buttons Etc this is actually a feature that we launched less than a month ago uh because our",
    "start": "2328560",
    "end": "2335520"
  },
  {
    "text": "customers requested this feature um they wanted to use a single domain name for",
    "start": "2335520",
    "end": "2341160"
  },
  {
    "text": "their entire website and accelerate their entire website not just their static content but also their Dynamic",
    "start": "2341160",
    "end": "2346720"
  },
  {
    "text": "content their interactive content and be able to use post put or other HTTP",
    "start": "2346720",
    "end": "2352160"
  },
  {
    "text": "methods so how does cloudfront help optimize post or put with Amazon cloudfronts post put",
    "start": "2352160",
    "end": "2360079"
  },
  {
    "text": "verb optimization cloudfront supports multiple upload verbs so not just postp",
    "start": "2360079",
    "end": "2365160"
  },
  {
    "text": "put but also delete options and Patch so you can actually use cloudfront to deliver your restful apis um and you can",
    "start": "2365160",
    "end": "2372880"
  },
  {
    "text": "either cach the result the responses to the API calls or you can just proxy them and take advantage of the keep alive",
    "start": "2372880",
    "end": "2379200"
  },
  {
    "text": "connections and the TCP I optimizations um with post putut your",
    "start": "2379200",
    "end": "2385280"
  },
  {
    "text": "data actually won't get cached it's simply a proxy through a cloudfront edge node back to your origin",
    "start": "2385280",
    "end": "2392119"
  },
  {
    "text": "infrastructure and all of the dynamic content optimizations do apply though which is",
    "start": "2392560",
    "end": "2398800"
  },
  {
    "text": "uh keep alive connections TCP slow start as well as terminating the postp put",
    "start": "2398800",
    "end": "2403920"
  },
  {
    "text": "connections closer to the viewers um close the TCP connections uh using a",
    "start": "2403920",
    "end": "2410920"
  },
  {
    "text": "cloud Edge location nearby",
    "start": "2410920",
    "end": "2414240"
  },
  {
    "text": "them so some examples of where you would use",
    "start": "2419920",
    "end": "2425560"
  },
  {
    "text": "uh postp optimizations with cloudfront you can optimize your form posts uh so when your users are submitting a form on",
    "start": "2425560",
    "end": "2431599"
  },
  {
    "text": "your website um you can optimize your Ajax post requests on your application",
    "start": "2431599",
    "end": "2437720"
  },
  {
    "text": "uh you can even have your users upload content for example to your S3 pocket",
    "start": "2437720",
    "end": "2444040"
  },
  {
    "text": "via cloudfront Edge note uh by doing a post or a",
    "start": "2444040",
    "end": "2449520"
  },
  {
    "text": "put so going back to our waterfall chart for our example website or web",
    "start": "2450040",
    "end": "2456000"
  },
  {
    "text": "application a after utilizing cloudfront for dynamic content optimization we're",
    "start": "2456000",
    "end": "2462079"
  },
  {
    "text": "down from 770 milliseconds to 555 milliseconds for",
    "start": "2462079",
    "end": "2467280"
  },
  {
    "text": "downloading this entire page including the index.jsp now we're much closer to",
    "start": "2467280",
    "end": "2472599"
  },
  {
    "text": "reducing our uh page download Time by 1 second which can help us get that two",
    "start": "2472599",
    "end": "2478480"
  },
  {
    "text": "and a half additional million dollars in sales a year on that e-commerce site so",
    "start": "2478480",
    "end": "2483640"
  },
  {
    "text": "we go from 1.5 seconds to 0.5 seconds in",
    "start": "2483640",
    "end": "2488760"
  },
  {
    "text": "downloading this entire Page by caching everything that's possible and also proxying the dynamic content via Cloud",
    "start": "2488760",
    "end": "2494760"
  },
  {
    "text": "foret note so how can we improve the content download time even",
    "start": "2494760",
    "end": "2501880"
  },
  {
    "text": "further we can use Amazon route 53's latency based routing feature",
    "start": "2501880",
    "end": "2508200"
  },
  {
    "text": "so what latency based routing does is if you run multiple stacks of your",
    "start": "2508200",
    "end": "2513359"
  },
  {
    "text": "application in different ec2 regions around the world uh you can create",
    "start": "2513359",
    "end": "2518680"
  },
  {
    "text": "latency based routing or lbr records with ra 53 with the DNS service using",
    "start": "2518680",
    "end": "2524240"
  },
  {
    "text": "the API or the console and then tag each destination endpoint to that particular",
    "start": "2524240",
    "end": "2529280"
  },
  {
    "text": "ec2 region uh wherever your um application is uh is at and uh the endpoints can",
    "start": "2529280",
    "end": "2539079"
  },
  {
    "text": "either be C2 instances elastic IPS or elastic load balcers and what Route 53 will do is",
    "start": "2539079",
    "end": "2545559"
  },
  {
    "text": "route your end users to the endpoint that provides the lowest latency so the benefits that uh lbr with",
    "start": "2545559",
    "end": "2554319"
  },
  {
    "text": "Route 53 provides is better performance than running in a single region so you could be running an application stack in",
    "start": "2554319",
    "end": "2559400"
  },
  {
    "text": "multiple regions across the world uh you improve the reliability of your website",
    "start": "2559400",
    "end": "2564599"
  },
  {
    "text": "relative to running in a single region so it's a it's a beneficial from an availability",
    "start": "2564599",
    "end": "2569960"
  },
  {
    "text": "perspective um it's R53 does provide a really simple and easy implementation",
    "start": "2569960",
    "end": "2575960"
  },
  {
    "text": "then other DNS Solutions and significantly lower prices than other traditional DNS solutions for for this",
    "start": "2575960",
    "end": "2583359"
  },
  {
    "text": "particular uh feature so how can cloudfront and R53",
    "start": "2583359",
    "end": "2588599"
  },
  {
    "text": "work together and take advantage of and you can take advantage of the latency based routing feature that R53 offers",
    "start": "2588599",
    "end": "2594920"
  },
  {
    "text": "well you can use claron for the dynamic content acceleration and host your origin servers at multiple AWS locations",
    "start": "2594920",
    "end": "2603160"
  },
  {
    "text": "for instance in the US and in Europe and then create DNS records in rft 53 for",
    "start": "2603160",
    "end": "2609640"
  },
  {
    "text": "each of your origin locations and then just let raft 53 handle which clar for Edge node it wants",
    "start": "2609640",
    "end": "2617400"
  },
  {
    "text": "to send to which of your origin um locations based on where that edge node",
    "start": "2617400",
    "end": "2622599"
  },
  {
    "text": "is located so when cloudfront EDG nodes is trying to get data from your origin server those requests will be uh taking",
    "start": "2622599",
    "end": "2630640"
  },
  {
    "text": "advantage of leny based routing so for instance the edge notes that are closer to your original infrastructure Europe",
    "start": "2630640",
    "end": "2636800"
  },
  {
    "text": "will go to the Europe um uh origin location and the cloudfront nodes that are closer to your origin in the US will",
    "start": "2636800",
    "end": "2644760"
  },
  {
    "text": "go to the US origin location so R3 me does this by measuring",
    "start": "2644760",
    "end": "2651800"
  },
  {
    "text": "the latency between cloudfront and all of the configured origin servers that you have and resolves the origin host",
    "start": "2651800",
    "end": "2658359"
  },
  {
    "text": "name to that closest location for cloudfront when cloudfront is trying to fetch content from your Orin server and",
    "start": "2658359",
    "end": "2664040"
  },
  {
    "text": "this can help further reduce the download time for your content especially for dynamic content where the",
    "start": "2664040",
    "end": "2669520"
  },
  {
    "text": "edge node must always go back to your origin servers to retreat that",
    "start": "2669520",
    "end": "2676400"
  },
  {
    "text": "content so another quick example here uh where if",
    "start": "2677079",
    "end": "2684640"
  },
  {
    "text": "you have an AWS uh if your origin server is running in an AWS region just in the US your",
    "start": "2684640",
    "end": "2692040"
  },
  {
    "text": "users um connect to a cloudfront edge node and cloudfront goes back to the origin server in the US but if you have",
    "start": "2692040",
    "end": "2699119"
  },
  {
    "text": "a user also in Europe that user goes to a cloudfront edge node nearby but that edge node must go back to that same",
    "start": "2699119",
    "end": "2706240"
  },
  {
    "text": "origin server in the US because you have a single origin server",
    "start": "2706240",
    "end": "2711359"
  },
  {
    "text": "currently now with two Origin servers running in for instance us and Europe the example we're using here your users",
    "start": "2711800",
    "end": "2720200"
  },
  {
    "text": "in the US will go to a claron edge node in the US that's near them",
    "start": "2720200",
    "end": "2726520"
  },
  {
    "text": "that edge node will use Route 53 to resolve the DNS uh for your origin",
    "start": "2726520",
    "end": "2732359"
  },
  {
    "text": "servers Route 53 will respond back with the Us location but because this particular end user is in us and then",
    "start": "2732359",
    "end": "2738960"
  },
  {
    "text": "the edge node The cloudfront Edge node will go to your origin infrastructure in the",
    "start": "2738960",
    "end": "2744319"
  },
  {
    "text": "US the exact same thing happens for the Europe location of your origin",
    "start": "2744319",
    "end": "2749640"
  },
  {
    "text": "infrastructure your user in Europe goes to a cloudfront edge node close to them within Europe that edge node talks to a",
    "start": "2749640",
    "end": "2757640"
  },
  {
    "text": "53 DNS server that says um you know hey you are actually closer to the uh the",
    "start": "2757640",
    "end": "2765480"
  },
  {
    "text": "Europe location based on latency um so the The Edge node as a result of Route",
    "start": "2765480",
    "end": "2772440"
  },
  {
    "text": "53 route 53's latency based routing feature ends up connecting to the uh the",
    "start": "2772440",
    "end": "2778079"
  },
  {
    "text": "a your origin infrastructure in Europe this time instead of going all the way back to your origin in",
    "start": "2778079",
    "end": "2784800"
  },
  {
    "text": "US so I just wanted to take a second and",
    "start": "2784800",
    "end": "2790960"
  },
  {
    "text": "summarize uh because there's a lot of material that we covered um in this deck",
    "start": "2790960",
    "end": "2797000"
  },
  {
    "text": "so I think the key takeaways from my perspective are first",
    "start": "2797000",
    "end": "2803160"
  },
  {
    "text": "cache everything that you can your static content your reusable content",
    "start": "2803160",
    "end": "2808240"
  },
  {
    "text": "including your query strings or anything that you're customizing using cookies uh",
    "start": "2808240",
    "end": "2813640"
  },
  {
    "text": "the task that you have at hand is identify finding how long that content can be cached whether that's hours or",
    "start": "2813640",
    "end": "2819240"
  },
  {
    "text": "minutes or seconds but to the extent that you can cache all of your highly",
    "start": "2819240",
    "end": "2824400"
  },
  {
    "text": "and frequently requested URLs the more advantageous it'll be because uh you",
    "start": "2824400",
    "end": "2830480"
  },
  {
    "text": "will be able to serve them locally uh from an edge location close to your viewers second cloudfront can also help",
    "start": "2830480",
    "end": "2837839"
  },
  {
    "text": "speed up your Dynamic content including your uploads with post and put optimization uh feature that we recently",
    "start": "2837839",
    "end": "2844720"
  },
  {
    "text": "added third SSL termination when you're using SSL uh and you know your users",
    "start": "2844720",
    "end": "2851440"
  },
  {
    "text": "terminating uh their SSL connections at the edge that can help offload your origin",
    "start": "2851440",
    "end": "2857440"
  },
  {
    "text": "infrastructure and cloudfront does provide you the ability to use your custom uh domain name and assert that",
    "start": "2857440",
    "end": "2864079"
  },
  {
    "text": "you can upload to cloudfront for uh for SSL delivery using your own using your",
    "start": "2864079",
    "end": "2869599"
  },
  {
    "text": "own domain name fourth rough 53 is latency based routing can improve performance",
    "start": "2869599",
    "end": "2875680"
  },
  {
    "text": "performance further if you can run multiple stacks of of your application across the world in different regions",
    "start": "2875680",
    "end": "2882359"
  },
  {
    "text": "again depending on where your uh users actually are located and fifth just want to reiterate",
    "start": "2882359",
    "end": "2889599"
  },
  {
    "text": "that cloudfront is really easy to use with all of our features available via API calls so you can use them",
    "start": "2889599",
    "end": "2896480"
  },
  {
    "text": "programmatically or via the Management console and the pricing for static and dynamic content is exactly the same uh",
    "start": "2896480",
    "end": "2904079"
  },
  {
    "text": "we don't charge premium prices for Dynamic content so I wanted to close out with a",
    "start": "2904079",
    "end": "2911760"
  },
  {
    "text": "few customer examples uh to provide uh to give you some stories of how",
    "start": "2911760",
    "end": "2917359"
  },
  {
    "text": "different customers are using some of the features that we discussed uh in the early part of the",
    "start": "2917359",
    "end": "2923200"
  },
  {
    "text": "presentation so the first example I have here is for low TLS and the customer here is VOX media um vo media has uh a",
    "start": "2923200",
    "end": "2932400"
  },
  {
    "text": "live blog uh on their The Verge um website and where they in this live blog",
    "start": "2932400",
    "end": "2939760"
  },
  {
    "text": "they cover uh Live Events uh you know frequently in the tech industry as",
    "start": "2939760",
    "end": "2944920"
  },
  {
    "text": "they're happening and provide live blogging uh and updates to what's going on uh this is a great use case where um",
    "start": "2944920",
    "end": "2953720"
  },
  {
    "text": "you know even though this content is this page is updated every few seconds um the The Verge live blog gets a ton of",
    "start": "2953720",
    "end": "2962440"
  },
  {
    "text": "traffic um as the event is happening so for instance I have the screenshot of the the Amazon Kindle event here um and",
    "start": "2962440",
    "end": "2970440"
  },
  {
    "text": "as more and more users come here to the extent that vox can cach this page at",
    "start": "2970440",
    "end": "2976319"
  },
  {
    "text": "cluer and Edge nodes which is what they do they put a really low TTL and they're able to scale up to tens of thousands to",
    "start": "2976319",
    "end": "2984280"
  },
  {
    "text": "potentially hundreds of thousands of users uh coming to this one page by uh",
    "start": "2984280",
    "end": "2989880"
  },
  {
    "text": "taking advantage of caching at the edge node without uh overloading their origin infrastructure",
    "start": "2989880",
    "end": "2996160"
  },
  {
    "text": "so that's a great example of setting a low TLS for uh for interactive and live",
    "start": "2996160",
    "end": "3002240"
  },
  {
    "text": "content and and yet uh be able to not need to scale their origin",
    "start": "3002240",
    "end": "3008000"
  },
  {
    "text": "infrastructure another example here is uh tonar um this is the the largest",
    "start": "3008000",
    "end": "3014200"
  },
  {
    "text": "newspaper company in Canada and uh their website th star.com uh uses cloudfront",
    "start": "3014200",
    "end": "3020920"
  },
  {
    "text": "to deliver all types of content but uh in particular I wanted to call out how they use Query strings to um cache their",
    "start": "3020920",
    "end": "3029160"
  },
  {
    "text": "search results URL so you can see the URL in the screenshot that says th start.com search. HTML Q equals Kindle",
    "start": "3029160",
    "end": "3036960"
  },
  {
    "text": "and this is a Kindle results page so they can cach this page for a few seconds or a few minutes at a time so",
    "start": "3036960",
    "end": "3042599"
  },
  {
    "text": "that everyone searching on Kindle within that period of time will get the the cach copy of that page and those",
    "start": "3042599",
    "end": "3048240"
  },
  {
    "text": "requests never make it back to your to their origin infrastructure another example of a",
    "start": "3048240",
    "end": "3054319"
  },
  {
    "text": "customer or networks they have the WeatherBug uh mobile desktop uh application um and uh they use cookies",
    "start": "3054319",
    "end": "3063400"
  },
  {
    "text": "to customize the weather results uh for a particular zip code so I have uh the",
    "start": "3063400",
    "end": "3069240"
  },
  {
    "text": "screenshot of uh Las Vegas here uh the the weather data for them for for that",
    "start": "3069240",
    "end": "3074920"
  },
  {
    "text": "particular zip code and the zip code data is stored in a cookie so that",
    "start": "3074920",
    "end": "3080040"
  },
  {
    "text": "everyone in the Las Vegas area or everyone across the world who's requesting uh and wanting to see the weather",
    "start": "3080040",
    "end": "3086040"
  },
  {
    "text": "uh within that let's say 5 minute period that this page is cached with that particular cookie uh will get the same",
    "start": "3086040",
    "end": "3092400"
  },
  {
    "text": "cached uh copy of that page so those requests never end up making back to the origin server so that really helps",
    "start": "3092400",
    "end": "3098400"
  },
  {
    "text": "offload the origin servers so one of our newer features post and put uh ouala this is an",
    "start": "3098400",
    "end": "3105480"
  },
  {
    "text": "interesting uh example where UA is um one of our customers who's using Cloud Fern's new postp put patch and delete",
    "start": "3105480",
    "end": "3113440"
  },
  {
    "text": "capabilities uh and there's uh there's a quote here from um Elan who's",
    "start": "3113440",
    "end": "3119240"
  },
  {
    "text": "their Tech lead on the the site reliability engineering team where UA is",
    "start": "3119240",
    "end": "3124839"
  },
  {
    "text": "using cloudfront to accelerate their restful apis um that are running on Amazon ec2 by using Cloud foran nodes",
    "start": "3124839",
    "end": "3132640"
  },
  {
    "text": "and proing those requests back to their ec2 nodes um they are seeing uh lower packet",
    "start": "3132640",
    "end": "3140920"
  },
  {
    "text": "loss uh and better upload latency as a result of this",
    "start": "3140920",
    "end": "3147280"
  },
  {
    "text": "and then the final uh customer story I wanted to leave you with uh is mapbox um",
    "start": "3147720",
    "end": "3153720"
  },
  {
    "text": "this is a customer that provides uh map tiles and a lot of large um sites for",
    "start": "3153720",
    "end": "3158760"
  },
  {
    "text": "instance for square uh they integrate their Maps into their applications and",
    "start": "3158760",
    "end": "3164599"
  },
  {
    "text": "mapbox uh the number one requested feature that mapbox had from their Partners was uh to deliver these map Tes",
    "start": "3164599",
    "end": "3171040"
  },
  {
    "text": "over SSL so mapbox is taking advantage of cloudfront and the SSL termination at the CL Edge notes to provide SSL",
    "start": "3171040",
    "end": "3179640"
  },
  {
    "text": "functionality to the users of the applications where their maps are",
    "start": "3179640",
    "end": "3186240"
  },
  {
    "text": "integrated and then one last note uh you know before we go into questions um we",
    "start": "3187520",
    "end": "3193440"
  },
  {
    "text": "have uh the AWS reinvent Conference next week in Las Vegas and we have a few",
    "start": "3193440",
    "end": "3198760"
  },
  {
    "text": "cloudfront uh related uh sessions at the conference um if you are there at the",
    "start": "3198760",
    "end": "3203880"
  },
  {
    "text": "conference please definitely uh stop by and try to attend one of these sessions at this point we'll go to questions we",
    "start": "3203880",
    "end": "3209720"
  },
  {
    "text": "only have a few minutes left uh I'll try to answer as many questions as I can right now otherwise we'll respond back",
    "start": "3209720",
    "end": "3214880"
  },
  {
    "text": "to your questions via email uh thanks Niar um so yeah we've",
    "start": "3214880",
    "end": "3220079"
  },
  {
    "text": "had a lot of great questions and I I think I want to say just based on these questions we'll probably want to do a",
    "start": "3220079",
    "end": "3225720"
  },
  {
    "text": "schedule A office hours so look for that after reinvent so we'll be able to answer more in-depth questions um",
    "start": "3225720",
    "end": "3232720"
  },
  {
    "text": "oneon-one our attendance for those is a lot lower so um you'll be able to get your questions answered uh so one of the questions uh",
    "start": "3232720",
    "end": "3241599"
  },
  {
    "text": "is there an error on the page if there's an error on the page that's already been cached by cloudprint how can we force an",
    "start": "3241599",
    "end": "3246680"
  },
  {
    "text": "update on the cached files um sure so if a page is already",
    "start": "3246680",
    "end": "3251960"
  },
  {
    "text": "been cashed by cloudfront um there's a couple of different options one you know you can of course wait for the page to",
    "start": "3251960",
    "end": "3259000"
  },
  {
    "text": "expire in the cloudfront cache but since you want to force an update and let's say the the page was set to cash for a",
    "start": "3259000",
    "end": "3264799"
  },
  {
    "text": "long per of time uh cloudfront does provide an invalidation API uh so you",
    "start": "3264799",
    "end": "3270240"
  },
  {
    "text": "can actually request the that particular page to be invalidated uh and when you use that API call or you can use the",
    "start": "3270240",
    "end": "3276839"
  },
  {
    "text": "console and give us the URL of that page uh we will uh go out and um delete that",
    "start": "3276839",
    "end": "3283799"
  },
  {
    "text": "page the cached copy of that P page from all the different Edge notes across the world um also we have a question about",
    "start": "3283799",
    "end": "3291359"
  },
  {
    "text": "um how people can see a list of our Edge locations yeah so uh the you know as I",
    "start": "3291359",
    "end": "3297160"
  },
  {
    "text": "mentioned we have 46 Edge locations today and the list of all of our Edge locations is available on our website uh",
    "start": "3297160",
    "end": "3303319"
  },
  {
    "text": "so if you just go to aws.amazon.com cloudfront you'll be able to see a list",
    "start": "3303319",
    "end": "3308880"
  },
  {
    "text": "of all of our Edge locations over there and a lot of great information uh on that page also about our different",
    "start": "3308880",
    "end": "3314319"
  },
  {
    "text": "features um a developer guide that you can use to learn more about using cloudfront uh as well as our pricing is",
    "start": "3314319",
    "end": "3320480"
  },
  {
    "text": "available there on that page uh in addition to the ond demand pricing that we have on that page we also have uh uh",
    "start": "3320480",
    "end": "3326920"
  },
  {
    "text": "private pricing available for customers who have predictable demands and are able to make a commitment and you can",
    "start": "3326920",
    "end": "3332720"
  },
  {
    "text": "contact us via that page this is a kind of a high level question about uh using",
    "start": "3332720",
    "end": "3337880"
  },
  {
    "text": "S3 vers uh cloudfront and if you could briefly explain what the difference is",
    "start": "3337880",
    "end": "3344400"
  },
  {
    "text": "uh so s yeah using S3 vers cloudfront for Content delivery got it um so when",
    "start": "3344400",
    "end": "3349440"
  },
  {
    "text": "it comes to S3 versus cloudfront um you know you're it's Cloud firm gives you a",
    "start": "3349440",
    "end": "3357359"
  },
  {
    "text": "global um um Global infrastructure of servers",
    "start": "3357359",
    "end": "3363039"
  },
  {
    "text": "where you can where your content can be cached uh much closer to your viewers S3 on the other hand is a great storage",
    "start": "3363039",
    "end": "3370160"
  },
  {
    "text": "service where you can actually store your data uh for you know for high",
    "start": "3370160",
    "end": "3375240"
  },
  {
    "text": "availability and high durability um but S3 delivering content directly out of S3",
    "start": "3375240",
    "end": "3381039"
  },
  {
    "text": "while possible uh if your users are spread across the world will all be going back to a single S3 location where",
    "start": "3381039",
    "end": "3387839"
  },
  {
    "text": "your data lives to request that request that data so in terms of uh the TCP",
    "start": "3387839",
    "end": "3393640"
  },
  {
    "text": "connections and in terms of just Network latency so let's say your S3 pocket is in the east coast of the us in our us",
    "start": "3393640",
    "end": "3401160"
  },
  {
    "text": "east region and if your user is all the way in Singapore they're now going all the way uh across you know couple of",
    "start": "3401160",
    "end": "3409000"
  },
  {
    "text": "otions to uh the S3 bucket to request um to download that object versus they",
    "start": "3409000",
    "end": "3414720"
  },
  {
    "text": "could could be going to the cloud for location near them in Singapore and downloading it directly from there if",
    "start": "3414720",
    "end": "3420520"
  },
  {
    "text": "the content is cached there um Can an existing application",
    "start": "3420520",
    "end": "3425760"
  },
  {
    "text": "this will be the last question just to be given the time but uh can an existing application benefit from uh this optim",
    "start": "3425760",
    "end": "3432079"
  },
  {
    "text": "optimization scenario or should it be modified Rewritten uh so that's a great question actually and um you know your existing",
    "start": "3432079",
    "end": "3439520"
  },
  {
    "text": "applications can most certainly benefit from using cloudfront and all the optimizations cloudfront provides uh so",
    "start": "3439520",
    "end": "3446359"
  },
  {
    "text": "cloudfront uh you know uh has the ability to talk to multiple origin",
    "start": "3446359",
    "end": "3452480"
  },
  {
    "text": "servers so if your application today uses S3 for storage of your static",
    "start": "3452480",
    "end": "3457680"
  },
  {
    "text": "content an elb or an ec2 instance for the dynamic content uh you can configure",
    "start": "3457680",
    "end": "3462920"
  },
  {
    "text": "cloudfront to go to the different uh origin servers based on the URL path or",
    "start": "3462920",
    "end": "3469000"
  },
  {
    "text": "based on the type of content uh using our cache behaviors um feature and and",
    "start": "3469000",
    "end": "3475359"
  },
  {
    "text": "uh you know without modifying your backend infrastructure cloudfront will go to different resources or different",
    "start": "3475359",
    "end": "3481440"
  },
  {
    "text": "locations for different types of object um and and deliver them to the users who",
    "start": "3481440",
    "end": "3487119"
  },
  {
    "text": "are requesting that particular content from uh cloudfront so you can use a single domain name for your website",
    "start": "3487119",
    "end": "3493680"
  },
  {
    "text": "www.example.com point that domain name and point your users to a cloudfront Ed node and then configure the cloud friend",
    "start": "3493680",
    "end": "3501280"
  },
  {
    "text": "uh distribution uh so that the EDG node is smart and knows where to go for what type of content so you don't need to",
    "start": "3501280",
    "end": "3507000"
  },
  {
    "text": "change your existing um you know infrastructure you can just use our cach behaviors uh feature and uh take",
    "start": "3507000",
    "end": "3513599"
  },
  {
    "text": "advantage of all the cloud optimizations okay thank you Niar um I'm going to turn it back over to Bowen great um I like to",
    "start": "3513599",
    "end": "3521000"
  },
  {
    "text": "extend a special thank you to our presenter nihan for his time in a great presentation",
    "start": "3521000",
    "end": "3527359"
  }
]