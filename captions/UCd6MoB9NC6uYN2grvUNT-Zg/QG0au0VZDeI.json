[
  {
    "start": "0",
    "end": "95000"
  },
  {
    "text": "hello good morning good afternoon and good evening wherever you may be welcome to the AWS webinar called a walk through",
    "start": "13759",
    "end": "20680"
  },
  {
    "text": "the AWS Cloud application hosting on AWS I'm your host Mark kist technology",
    "start": "20680",
    "end": "26640"
  },
  {
    "text": "evangelist for APAC region at at Amazon web services and I'm working out of",
    "start": "26640",
    "end": "32720"
  },
  {
    "text": "Singapore so today let's look at these agend items first I'm going to tell you",
    "start": "34719",
    "end": "41039"
  },
  {
    "text": "some best practices how you could focus on your business how you can automate and scale your application then we look",
    "start": "41039",
    "end": "47120"
  },
  {
    "text": "at some design best practices for the cloud and finally how you could use data",
    "start": "47120",
    "end": "53120"
  },
  {
    "text": "to drive your business and iterate your application to become better suited for",
    "start": "53120",
    "end": "58160"
  },
  {
    "text": "your customers so let's start with the focus part",
    "start": "58160",
    "end": "63720"
  },
  {
    "text": "basically it all comes down to this this you should really focus on your business",
    "start": "63720",
    "end": "69799"
  },
  {
    "text": "and you should try to Outsource the what we call undifferentiated heavy lifting",
    "start": "69799",
    "end": "75640"
  },
  {
    "text": "because you don't want to be this guy anymore you basically just want to make an application or service you want to",
    "start": "75640",
    "end": "81560"
  },
  {
    "text": "provide it for your customers but you don't want to waste your precious scar resources on undifferentiated heavy",
    "start": "81560",
    "end": "88520"
  },
  {
    "text": "lifting like managing and building infrastructure owning and operating data centers or databases",
    "start": "88520",
    "end": "94799"
  },
  {
    "text": "Etc so the best practice here is that you should really simplify what you do",
    "start": "94799",
    "end": "101680"
  },
  {
    "start": "95000",
    "end": "95000"
  },
  {
    "text": "Outsource the systems that are undifferentiated as services that you just",
    "start": "101680",
    "end": "106960"
  },
  {
    "text": "rent in the Legacy way of doing it basically with building managing hosting",
    "start": "106960",
    "end": "113600"
  },
  {
    "text": "your own on premise infrastructures you actually spent a lot of your time and energy on managing that in",
    "start": "113600",
    "end": "119960"
  },
  {
    "text": "infrastructure and basically not enough time was left for your differentiated",
    "start": "119960",
    "end": "125119"
  },
  {
    "text": "action which is improving your service basically coding your business logic so now with AWS and cloud-based",
    "start": "125119",
    "end": "132360"
  },
  {
    "text": "infrastructure platforms and services you can just focus your energy",
    "start": "132360",
    "end": "137760"
  },
  {
    "text": "and your effort on your business logic Improvement your application coding and then a certain amount of reasonable",
    "start": "137760",
    "end": "145360"
  },
  {
    "text": "amount of energy on configuring your Cloud assets so let's start by looking at how you",
    "start": "145360",
    "end": "151840"
  },
  {
    "text": "should automate and scale your service we start with the most simple",
    "start": "151840",
    "end": "157160"
  },
  {
    "text": "building plug Amazon ec2 or our elastic compute Cloud that's the main core",
    "start": "157160",
    "end": "163640"
  },
  {
    "text": "utility that you need to start with basically that is your virtual machine or Cloud instance and how do you get",
    "start": "163640",
    "end": "170040"
  },
  {
    "text": "your Cloud instance well on the bottom left you can see the Ami or Amazon machine image we have a lot of public",
    "start": "170040",
    "end": "176959"
  },
  {
    "text": "Amis that you can start with so the IDE is that you choose the most relevant public Ami like Linux or Windows",
    "start": "176959",
    "end": "183720"
  },
  {
    "text": "instance image then you boot up an instance and maybe you customize it to your liking with your application code",
    "start": "183720",
    "end": "190480"
  },
  {
    "text": "your binaries whatever you need to build your service then you can rebundle this instance into a new custom",
    "start": "190480",
    "end": "198959"
  },
  {
    "text": "Ami but there are a couple of best practices how you could do it and this really depends on your own personal",
    "start": "198959",
    "end": "206280"
  },
  {
    "text": "preferences I'll show you the major major ways how people do this the",
    "start": "206280",
    "end": "211319"
  },
  {
    "text": "one on the left is called the fully preed Ami in this",
    "start": "211319",
    "end": "217360"
  },
  {
    "text": "version companies like Netflix prefer to have a fully preed Ami which say just",
    "start": "217360",
    "end": "224400"
  },
  {
    "text": "boot up spin up on instance and start there is no configuration no",
    "start": "224400",
    "end": "229599"
  },
  {
    "text": "orchestration happening anymore all the binaries configurations Etc are built",
    "start": "229599",
    "end": "235000"
  },
  {
    "text": "into the Ami and by the way if you're interested Netflix has open sourced the",
    "start": "235000",
    "end": "240040"
  },
  {
    "text": "Netflix OSS suite and one of the tools is called the amator so that's one way",
    "start": "240040",
    "end": "245280"
  },
  {
    "text": "you can be pre-bake your Amis if you're interested the other way what some",
    "start": "245280",
    "end": "250480"
  },
  {
    "text": "companies and people prefer to do is to use a so-called just enough operating system Ami so really minimal set of",
    "start": "250480",
    "end": "258479"
  },
  {
    "text": "operating system binaries just providing the basic core services from the operating system that you need and on",
    "start": "258479",
    "end": "264919"
  },
  {
    "text": "top of that they use tools like Chef papeto anipo to to finish loading the",
    "start": "264919",
    "end": "271560"
  },
  {
    "text": "binaries setting the configurations and starting the application services so this really",
    "start": "271560",
    "end": "278440"
  },
  {
    "text": "depends on your personal preferences now why did Netflix choose the one on the",
    "start": "278440",
    "end": "283520"
  },
  {
    "text": "left the reason is that Netflix wanted to avoid a couple of things things they",
    "start": "283520",
    "end": "288800"
  },
  {
    "text": "wanted to avoid the slowness of orchestrating they may spin up hundreds",
    "start": "288800",
    "end": "294440"
  },
  {
    "text": "of virtual machine instances at a time so they wanted them to come up as fast as possible the second reason is that",
    "start": "294440",
    "end": "301160"
  },
  {
    "text": "they wanted to avoid any potential failure mode related to the orchestration engines or Management",
    "start": "301160",
    "end": "307080"
  },
  {
    "text": "Systems all the repositories from which they download their packages but again cloud is flexible it",
    "start": "307080",
    "end": "314280"
  },
  {
    "text": "gives you choice so you can play with these different options and choose the one that works best for you however I",
    "start": "314280",
    "end": "320759"
  },
  {
    "text": "recommend a couple of things do not anymore use B scripts use smarter",
    "start": "320759",
    "end": "326000"
  },
  {
    "text": "configuration management tools like shet to anip and make sure one thing when you",
    "start": "326000",
    "end": "331680"
  },
  {
    "text": "put up your instance you do not have to ssh in if you need to SSH into your",
    "start": "331680",
    "end": "337160"
  },
  {
    "text": "instance to finish any configuration tasks you're doing it wrong you need to be able to fully automate spinning up",
    "start": "337160",
    "end": "344120"
  },
  {
    "text": "your instances and that they start all the services necessary for your application and nothing else make sure",
    "start": "344120",
    "end": "349400"
  },
  {
    "text": "that you're not running anything that is not needed for your application that is just wayte that you need to manage and",
    "start": "349400",
    "end": "355199"
  },
  {
    "text": "it could be a security security hle as well so lock down and remove all the service you don't need and remember you",
    "start": "355199",
    "end": "362680"
  },
  {
    "text": "can use the AWS trusted advisor to do a security audit of your system as",
    "start": "362680",
    "end": "367960"
  },
  {
    "text": "well so now you have your Ami whichever way you want to build it and from this you can spin up your customized",
    "start": "367960",
    "end": "374599"
  },
  {
    "text": "application instance the next thing that I recommend is optimizing the instance size it",
    "start": "374599",
    "end": "381280"
  },
  {
    "start": "377000",
    "end": "377000"
  },
  {
    "text": "really depends on your application stack your middleware and your product program how many resources do you need so please",
    "start": "381280",
    "end": "388919"
  },
  {
    "text": "look at the a Cloud watch metrics for CPU IO memory Etc and optimize the",
    "start": "388919",
    "end": "396599"
  },
  {
    "text": "instance size performance and resources compared to your application you need to do a",
    "start": "396599",
    "end": "403199"
  },
  {
    "text": "performance test to make sure that you don't run out of resources in a given instance type if you do try putting up a",
    "start": "403199",
    "end": "411759"
  },
  {
    "text": "larger instance type and executing the performance test again but don't run too",
    "start": "411759",
    "end": "417039"
  },
  {
    "text": "high instance types because then you just have waste and at a we have currently 17 different",
    "start": "417039",
    "end": "423080"
  },
  {
    "text": "instance types available from really small micro instances all the way up to Cluster computer and gpgpu instances",
    "start": "423080",
    "end": "430039"
  },
  {
    "text": "with SSD discs Etc and remember it's a balance between resources available and",
    "start": "430039",
    "end": "438360"
  },
  {
    "text": "cost now cloudwatch helps you investigate your current resources U",
    "start": "438560",
    "end": "445919"
  },
  {
    "text": "resource utilization of your instances but it's also used for for another task",
    "start": "445919",
    "end": "451160"
  },
  {
    "start": "451000",
    "end": "451000"
  },
  {
    "text": "order scaling so by changing the instance type basically rebooting your instance with either larger or smaller",
    "start": "451160",
    "end": "457879"
  },
  {
    "text": "instance you're scaling vertically or up and down however the best practice in",
    "start": "457879",
    "end": "464280"
  },
  {
    "text": "the cloud is to do horizontal scaling what people call scaling out or",
    "start": "464280",
    "end": "470240"
  },
  {
    "text": "in and the easy way to achieve this in AWS is by creating an Autos scaling",
    "start": "470240",
    "end": "475280"
  },
  {
    "text": "group with an Associated launch configuration so basically all you do is",
    "start": "475280",
    "end": "480319"
  },
  {
    "text": "that you define what are the Amis that need to be booted so for every application tier you would have a launch",
    "start": "480319",
    "end": "487280"
  },
  {
    "text": "configuration which is pointing to your customized Ami your machine image and then in the autoscaling group",
    "start": "487280",
    "end": "494199"
  },
  {
    "text": "you set the rules what other metrics like CPU load memory or even custom",
    "start": "494199",
    "end": "499919"
  },
  {
    "text": "metrics like your application internal buffer sizes cues Etc what are the",
    "start": "499919",
    "end": "505840"
  },
  {
    "text": "metrics that the system should be looking at to detect when your instances",
    "start": "505840",
    "end": "511000"
  },
  {
    "text": "are overloaded or getting loaded and then what are the actions that are happening automatically",
    "start": "511000",
    "end": "518399"
  },
  {
    "text": "when you reach these thresholds for example to scale out the system by adding more instances or to scale in by",
    "start": "518399",
    "end": "526519"
  },
  {
    "text": "removing instances from the group to save costs then a",
    "start": "526519",
    "end": "533360"
  },
  {
    "text": "reminder cloud computing is a little bit different you should not just lift and",
    "start": "533360",
    "end": "539680"
  },
  {
    "text": "drop Legacy servers into the cloud in the Legacy ways of building",
    "start": "539680",
    "end": "545279"
  },
  {
    "text": "it uh in your data center you have servers which had high identities you gave them names like Ferrari Lamborghini",
    "start": "545279",
    "end": "552880"
  },
  {
    "text": "maybe March and Homer you would log into them high identity means that servers",
    "start": "552880",
    "end": "558640"
  },
  {
    "text": "would have highly unique and specialized configurations at scale this becomes",
    "start": "558640",
    "end": "565399"
  },
  {
    "text": "unmanageable because in the Legacy Way Every server was highly tuned and",
    "start": "565399",
    "end": "570440"
  },
  {
    "text": "optimized and unique and if your servers got unhealthy then you got worried for",
    "start": "570440",
    "end": "576279"
  },
  {
    "text": "them and you nurse them back to health that doesn't work in the in the cloud that doesn't scale so the way to",
    "start": "576279",
    "end": "584000"
  },
  {
    "text": "think about the cloud virtual machines or instances is that they are cattle they are all supposed to be",
    "start": "584000",
    "end": "591079"
  },
  {
    "text": "identical if you spin up hundreds of them you don't have time to give them names and you don't want to give them",
    "start": "591079",
    "end": "596920"
  },
  {
    "text": "high identities or specialized configurations Cloud instances Implement a nonn good",
    "start": "596920",
    "end": "604079"
  },
  {
    "text": "State and if they deviate from this non good non good state or if they get unhealthy then you shoot them in the",
    "start": "604079",
    "end": "610399"
  },
  {
    "text": "head and replace them with another",
    "start": "610399",
    "end": "614200"
  },
  {
    "text": "one Okay so until now we have an Ami we have customized optimized instances and",
    "start": "615760",
    "end": "623279"
  },
  {
    "text": "we have Autos scaling groups now we can use Autos scaling with different ways one of them can be",
    "start": "623279",
    "end": "629600"
  },
  {
    "text": "looking at Q systems but a very handy way of doing a scaling is to put a load balancer in",
    "start": "629600",
    "end": "635720"
  },
  {
    "text": "front our elastic load balancing service is a natural brother and friend of the",
    "start": "635720",
    "end": "640959"
  },
  {
    "text": "Autos scaling groups and the recommendation here is that you would start load balancing from day one even",
    "start": "640959",
    "end": "647320"
  },
  {
    "text": "if you want to save cost and just work on one development and testing instance why because when you're",
    "start": "647320",
    "end": "654440"
  },
  {
    "text": "actually then taking off going into production you don't want to change your architecture in the middle basically it",
    "start": "654440",
    "end": "659920"
  },
  {
    "text": "will be the same as changing the engine on your airplane just when you're taking off so the best practice is to start",
    "start": "659920",
    "end": "666920"
  },
  {
    "text": "Auto scaling and elastic L balancing from day one but you can set the group size to one then you even get",
    "start": "666920",
    "end": "673079"
  },
  {
    "text": "selfhealing with a group size of one if your instance becomes unhealthy OS",
    "start": "673079",
    "end": "678920"
  },
  {
    "text": "scaling will just replace it but it will keep the number of instances in your",
    "start": "678920",
    "end": "684240"
  },
  {
    "text": "group as one later on you can just increase the limit to meet the production load",
    "start": "684240",
    "end": "691160"
  },
  {
    "text": "demands so now we have an auto scaling group that is automatically scaling out and in the number of instances based on",
    "start": "691160",
    "end": "697880"
  },
  {
    "text": "metrics and in front of that we have the elastic load balancing and ultimately we",
    "start": "697880",
    "end": "703120"
  },
  {
    "text": "will want to then point our domain name to this system so how does elastic load",
    "start": "703120",
    "end": "709240"
  },
  {
    "text": "balancing work well in the morning there's very little traffic and you can maybe get by with one instance but I",
    "start": "709240",
    "end": "714680"
  },
  {
    "text": "recommend two minimum two of everything you don't want to have single point of failures",
    "start": "714680",
    "end": "720600"
  },
  {
    "text": "then at 10 in the morning your system starts getting hot there are more people logging in metrics will show this and",
    "start": "720600",
    "end": "726480"
  },
  {
    "text": "auto scaling will automatically do an action which is to add an instance you can conf configure",
    "start": "726480",
    "end": "732839"
  },
  {
    "text": "and specify how many instances to add at a time is it one or is it more then you get a new instance and Order scaling",
    "start": "732839",
    "end": "739199"
  },
  {
    "text": "will notify the load balancing service that hey there's a new instance in the group load balancing system will execute",
    "start": "739199",
    "end": "747040"
  },
  {
    "text": "health checks and if the new instance passes the health checks it seems operational it is added to the active",
    "start": "747040",
    "end": "753839"
  },
  {
    "text": "pool and it will start getting some load which is then offloading the traffic from the original instances and",
    "start": "753839",
    "end": "759920"
  },
  {
    "text": "balancing the load equally in the evening at some point the load will taper off system will become",
    "start": "759920",
    "end": "767440"
  },
  {
    "text": "cool and it will trigger another threshold another Watermark we call it the low water mark the system is so cool",
    "start": "767440",
    "end": "775040"
  },
  {
    "text": "that we can actually remove instances to save costs we scale",
    "start": "775040",
    "end": "781120"
  },
  {
    "text": "because you don't want to do this you really don't want to have a success disaster the worst thing that can happen",
    "start": "782760",
    "end": "789399"
  },
  {
    "text": "is that people really love your service but so many people are using it that they basically suffocate your system and",
    "start": "789399",
    "end": "795519"
  },
  {
    "text": "then people will move will vote with their feet they will just move to another service so make sure that you",
    "start": "795519",
    "end": "802240"
  },
  {
    "text": "don't get these problem with your service here's a customer example anoto",
    "start": "802240",
    "end": "809920"
  },
  {
    "text": "have a really nice service where you can upload your pictures and they make a really cool video with music everything",
    "start": "809920",
    "end": "815880"
  },
  {
    "text": "out of your pictures now what happened to anoto they launched their service and",
    "start": "815880",
    "end": "821760"
  },
  {
    "text": "then in Facebook they went viral but because they use elastic load balancing and Order scaling they were able to meet",
    "start": "821760",
    "end": "828880"
  },
  {
    "text": "the demand you can see here in this graph that in just three days they went from about 40 instances running to over",
    "start": "828880",
    "end": "836160"
  },
  {
    "text": "3,000 and by the way those dips down there those are not problems those are not crashes those were autoscaling",
    "start": "836160",
    "end": "843639"
  },
  {
    "text": "removing instances when they were not needed so scaling up and down the system",
    "start": "843639",
    "end": "848839"
  },
  {
    "text": "as needed here's another example from Pinterest Pinterest is an up another",
    "start": "848839",
    "end": "855560"
  },
  {
    "text": "popular service they first of all use different types of instant pricing models to",
    "start": "855560",
    "end": "862160"
  },
  {
    "text": "optimize the costs on the bottom there which is the steady state traffic they use heavy utilization res resed",
    "start": "862160",
    "end": "869399"
  },
  {
    "text": "instances which give them volume discounts then they have light reserved instances and On",
    "start": "869399",
    "end": "875839"
  },
  {
    "text": "Demand so first of all that is cost optimization the second part is the load",
    "start": "875839",
    "end": "881880"
  },
  {
    "text": "balancing part you can see that at night time they run less",
    "start": "881880",
    "end": "887160"
  },
  {
    "text": "instances the effect is that during the peak time during the days their cost is",
    "start": "887160",
    "end": "892560"
  },
  {
    "text": "$52 per hour but at night with less instances they only pay $15 per hour and",
    "start": "892560",
    "end": "899519"
  },
  {
    "text": "still they serve all the traffic and people are happy they achieve 71% savings by doing this",
    "start": "899519",
    "end": "908600"
  },
  {
    "start": "910000",
    "end": "910000"
  },
  {
    "text": "optimization then remember the recommendation was Outsource anything",
    "start": "910680",
    "end": "916480"
  },
  {
    "text": "that is not Core Business to you Outsource them to Services database is",
    "start": "916480",
    "end": "921680"
  },
  {
    "text": "another great example databases are really difficult pasts because you need to have dbas who really know they live",
    "start": "921680",
    "end": "929040"
  },
  {
    "text": "with the database solution they know how to install it configure it patch it m maintain it scale it and Sh it Etc this",
    "start": "929040",
    "end": "936800"
  },
  {
    "text": "is a really really difficult task that requires specialized competence maybe you're a small startup you just want to",
    "start": "936800",
    "end": "943160"
  },
  {
    "text": "focus on a business logic code so Outsource the database management to something at AWS we have services that",
    "start": "943160",
    "end": "950399"
  },
  {
    "text": "let you have fully managed databases first of all we have our relational database service which is a",
    "start": "950399",
    "end": "956839"
  },
  {
    "text": "fully managed SQL solution you can choose between MySQL Oracle and",
    "start": "956839",
    "end": "962160"
  },
  {
    "text": "Microsoft SQL Server they are scalable they are fault tolerant they can be multi-az with the",
    "start": "962160",
    "end": "968639"
  },
  {
    "text": "click of a button or command basically you don't need to install or manage databases you just use them so use RDS",
    "start": "968639",
    "end": "976839"
  },
  {
    "text": "for SQL purposes but then there's another type of databases called",
    "start": "976839",
    "end": "982759"
  },
  {
    "text": "nosql and here we have the Amazon Dynamo DP the really interesting thing about",
    "start": "982759",
    "end": "988360"
  },
  {
    "text": "Dynamo d is that it gives you predictable performance it gives you sub",
    "start": "988360",
    "end": "994759"
  },
  {
    "text": "10 millisecond response times for re and rights so suddenly with the Dynamo DP if",
    "start": "994759",
    "end": "1000759"
  },
  {
    "text": "you're able to use a key Value Store your bottleneck is no longer the data",
    "start": "1000759",
    "end": "1006079"
  },
  {
    "text": "tier a lot of the web scale companies have been saying that their data tier scalability is the number one headache",
    "start": "1006079",
    "end": "1013240"
  },
  {
    "text": "for them what Dynamo DP does is that it gives you zero maintenance un limited scale key value",
    "start": "1013240",
    "end": "1020519"
  },
  {
    "text": "store with predictable consistent performance that probably moves the bottleneck then somewhere else in your",
    "start": "1020519",
    "end": "1027558"
  },
  {
    "text": "application but that's a good problem to have and the best practice here is to consider using both use SQL for those",
    "start": "1027559",
    "end": "1036079"
  },
  {
    "text": "complicated queries that you may have and use the key value store for really high performance performance puts and",
    "start": "1036079",
    "end": "1043240"
  },
  {
    "text": "gets for keys and values here we have a couple of",
    "start": "1043240",
    "end": "1048480"
  },
  {
    "text": "customers examples g a Japanese game developer is using Amazon RDS to scale",
    "start": "1048480",
    "end": "1055480"
  },
  {
    "text": "so compared to the previous Legacy solution they were able to scale to far higher number of users and reduce their",
    "start": "1055480",
    "end": "1062720"
  },
  {
    "text": "time to Market and development time using Amazon ads and half brick an Australian game",
    "start": "1062720",
    "end": "1069840"
  },
  {
    "text": "developer is using Dynamo DP successfully to scale they really like the",
    "start": "1069840",
    "end": "1075360"
  },
  {
    "text": "solution and it allows us allows them to free their time to focus on their application",
    "start": "1075360",
    "end": "1081919"
  },
  {
    "text": "development versus managing the database",
    "start": "1081919",
    "end": "1086200"
  },
  {
    "text": "here if you need to scale your RDS solution excuse me for even higher reads",
    "start": "1087360",
    "end": "1092960"
  },
  {
    "text": "and writes then you can really easily create read replicas so read replicas are",
    "start": "1092960",
    "end": "1099080"
  },
  {
    "text": "asynchronously replicated copies of your database in RDS you have your master",
    "start": "1099080",
    "end": "1104919"
  },
  {
    "text": "database and then you can create three replicas and what you do is that on your application side on your",
    "start": "1104919",
    "end": "1111840"
  },
  {
    "text": "SQL client side you direct the reads to the read replicas and this is offloading",
    "start": "1111840",
    "end": "1117799"
  },
  {
    "text": "the master but so that it can only handle the rights this is offloading IO from",
    "start": "1117799",
    "end": "1124240"
  },
  {
    "text": "the master reads are going to the read replicas if you need to increase your",
    "start": "1124240",
    "end": "1129559"
  },
  {
    "text": "SQL backend performance even more the recommendation is to use a caching tier",
    "start": "1129559",
    "end": "1135919"
  },
  {
    "text": "we have the Amazon elastic cach which is a m cach compat in memory cash when you use elastic cash",
    "start": "1135919",
    "end": "1143360"
  },
  {
    "text": "you can direct a lot of the calls away from the master data base into the elastic aser again offloading the master",
    "start": "1143360",
    "end": "1152760"
  },
  {
    "start": "1154000",
    "end": "1154000"
  },
  {
    "text": "database now let's talk about the application management ultimately you want to",
    "start": "1154480",
    "end": "1160880"
  },
  {
    "text": "automate everything you want to have efficiencies and you want to scale you",
    "start": "1160880",
    "end": "1166120"
  },
  {
    "text": "have a lot of different options how you manage your application on the left is the easy convenient",
    "start": "1166120",
    "end": "1173039"
  },
  {
    "text": "Outsource as much as you can option on the right is the are the options for I",
    "start": "1173039",
    "end": "1178520"
  },
  {
    "text": "want to have full control of everything so the most extreme option on the right is that you just use the be ec2 and you",
    "start": "1178520",
    "end": "1186960"
  },
  {
    "text": "manage configurations application management yourself you can do that but",
    "start": "1186960",
    "end": "1192440"
  },
  {
    "text": "again is that your core business so in this webinar I'm going to be recommending two options that I think",
    "start": "1192440",
    "end": "1199000"
  },
  {
    "text": "that I think are relevant the first one is AWS elastic beIN",
    "start": "1199000",
    "end": "1204400"
  },
  {
    "text": "stock this is a management solution that really lets you focus on just your core business which is your application",
    "start": "1204400",
    "end": "1212080"
  },
  {
    "text": "development here basically the idea is that you make application versions in your development and testing you have",
    "start": "1212080",
    "end": "1218919"
  },
  {
    "text": "here version 08 09 1.0 Etc and you need to test them",
    "start": "1218919",
    "end": "1224280"
  },
  {
    "text": "first what you want to do is just drop in your application into platform that can create test test",
    "start": "1224280",
    "end": "1231880"
  },
  {
    "text": "environments that are cheap small and then production environments that are",
    "start": "1231880",
    "end": "1237120"
  },
  {
    "text": "scaling to meet the demand from the customers and you just want to focus on the application",
    "start": "1237120",
    "end": "1243640"
  },
  {
    "text": "development Amazon AWS elastic beanock lets you do this really easily you just",
    "start": "1243640",
    "end": "1249240"
  },
  {
    "text": "basically drop your application package into bean stock currently we support the following",
    "start": "1249240",
    "end": "1256880"
  },
  {
    "text": "containers different programming languages and we are all the time adding more based on customer feedback so",
    "start": "1256880",
    "end": "1263880"
  },
  {
    "text": "please let us know if your favorite languages or execution environments are not listed here please let us know",
    "start": "1263880",
    "end": "1271279"
  },
  {
    "text": "either in the feedback or letting us know offline so how does pan St work you just",
    "start": "1271279",
    "end": "1278559"
  },
  {
    "text": "focus on the green part you create the application business logic code and you can Outsource the rest of the stack to",
    "start": "1278559",
    "end": "1285840"
  },
  {
    "text": "pan stock that includes all of the physical operating system language execution",
    "start": "1285840",
    "end": "1291360"
  },
  {
    "text": "environment web servers application servers Etc be manages those for",
    "start": "1291360",
    "end": "1298360"
  },
  {
    "text": "you what happens is that beanock will create automatically provisional",
    "start": "1298480",
    "end": "1304159"
  },
  {
    "text": "resources in ec2 and Associated services like load balancing you don't even need to configure the load balance yourself",
    "start": "1304159",
    "end": "1311000"
  },
  {
    "text": "you can set the rules but you don't need to manage it so pin creates the elastic",
    "start": "1311000",
    "end": "1316039"
  },
  {
    "text": "load balancing service it creates the auto scale groups you can overwrite the settings if you want but pin stop",
    "start": "1316039",
    "end": "1323320"
  },
  {
    "text": "manages them for you then pin stop report deploys the right number of",
    "start": "1323320",
    "end": "1329559"
  },
  {
    "text": "instances so it's right sizing your environment based on the load and it manages everything including",
    "start": "1329559",
    "end": "1336320"
  },
  {
    "text": "RDS databases if you want a database for application and it provides you with a c",
    "start": "1336320",
    "end": "1342840"
  },
  {
    "text": "name where you can point your traffic a c name is the domain name for your solution",
    "start": "1342840",
    "end": "1350519"
  },
  {
    "text": "all the logs and all the application versions are stored in Amazon S3 which",
    "start": "1351440",
    "end": "1356480"
  },
  {
    "text": "is our storage for the internet and remember S3 has 11 nines of",
    "start": "1356480",
    "end": "1362760"
  },
  {
    "text": "durability so how do you get your application into PS St well you can",
    "start": "1363960",
    "end": "1369159"
  },
  {
    "text": "integrate your application development environments like Eclipse directly into pin St you can just publish to pin St",
    "start": "1369159",
    "end": "1376360"
  },
  {
    "text": "launch from P to pin St from eclipse you can use git so you can use command line",
    "start": "1376360",
    "end": "1381960"
  },
  {
    "text": "to push your application new versions into pin stock for development testing or even production",
    "start": "1381960",
    "end": "1389240"
  },
  {
    "text": "environments so this is a really handy way of integrating your development testing integration and production",
    "start": "1389240",
    "end": "1395720"
  },
  {
    "text": "systems into a continuous integration continuous deployment",
    "start": "1395720",
    "end": "1401080"
  },
  {
    "text": "flow the next option is what I like to call infrastructure as code AWS cloud",
    "start": "1402279",
    "end": "1410039"
  },
  {
    "text": "formation this is another way which is a really handy way of managing your environments your applications and the",
    "start": "1410039",
    "end": "1417159"
  },
  {
    "text": "associated infrastructure ultimately you want to run something like this so this would be",
    "start": "1417159",
    "end": "1424159"
  },
  {
    "text": "your total solution it uses different Services you've outsourced the undifferentiated mark to AWS you focus",
    "start": "1424159",
    "end": "1431120"
  },
  {
    "text": "on your application development you use a lot of services so this is a total solution how",
    "start": "1431120",
    "end": "1437799"
  },
  {
    "text": "would you get this is deployed in a really efficient way that is repeatable",
    "start": "1437799",
    "end": "1443559"
  },
  {
    "text": "fast and cost efficient cloud formation lets you do",
    "start": "1443559",
    "end": "1449080"
  },
  {
    "text": "this by basically letting you describe your total solution as code so Cloud for",
    "start": "1449080",
    "end": "1455440"
  },
  {
    "text": "formation templates are Json compatible text files so basically you describe",
    "start": "1455440",
    "end": "1461919"
  },
  {
    "text": "your entire solution as a text file and you can store this in Version Control",
    "start": "1461919",
    "end": "1467279"
  },
  {
    "text": "and this is giving you a amazing opportunities and possibilities the cloud formation",
    "start": "1467279",
    "end": "1472640"
  },
  {
    "text": "templates have a structure basically first you have headers then some parameters you can do mappings like if",
    "start": "1472640",
    "end": "1479679"
  },
  {
    "text": "I'm in region Singapore my Ami is this if I'm in region Us East then my Ami is",
    "start": "1479679",
    "end": "1485000"
  },
  {
    "text": "that then you define the resources that you want to utilize like load balancing RDS databases Etc and then outputs like",
    "start": "1485000",
    "end": "1493240"
  },
  {
    "text": "this is the URL to my application this is the production system",
    "start": "1493240",
    "end": "1498760"
  },
  {
    "text": "here's an example a snippet from the cloud formation template this is an example of creating a distributed",
    "start": "1498760",
    "end": "1507039"
  },
  {
    "text": "replicated RDS database using cloud formation templates this example will create a MySQL version 5.5 which is by",
    "start": "1507039",
    "end": "1515600"
  },
  {
    "text": "the way multi- a enabled one of our customers who is",
    "start": "1515600",
    "end": "1522720"
  },
  {
    "start": "1521000",
    "end": "1521000"
  },
  {
    "text": "successfully using ploud formations is NASA so the Curiosity Mass Rover when",
    "start": "1522720",
    "end": "1528720"
  },
  {
    "text": "it's downloading sending the data from Mars back to Earth it's received by NASA",
    "start": "1528720",
    "end": "1534760"
  },
  {
    "text": "and then NASA TV is broadcasting the content from Curiosity to the rest of",
    "start": "1534760",
    "end": "1540799"
  },
  {
    "text": "the world including transcoding managing the content so how do they achieve this they",
    "start": "1540799",
    "end": "1547080"
  },
  {
    "text": "have a cloud formation template that describes a stack this stack has load",
    "start": "1547080",
    "end": "1552320"
  },
  {
    "text": "balancers it has engine X servers Etc and when they need it to scale they just",
    "start": "1552320",
    "end": "1558000"
  },
  {
    "text": "add made more of these stxs with the one click roll out they were able to scale",
    "start": "1558000",
    "end": "1564159"
  },
  {
    "text": "the system to meet the global demand when people were excited and they were watching The Curiosity R",
    "start": "1564159",
    "end": "1571240"
  },
  {
    "text": "Landing now you've built your system then you did a domain name what you do",
    "start": "1573320",
    "end": "1579679"
  },
  {
    "text": "is that you register a domain name for yourself but where do you put this domain name then well we have a service",
    "start": "1579679",
    "end": "1586960"
  },
  {
    "text": "called Amazon Route 50 tree which is a fully managed always on global domain",
    "start": "1586960",
    "end": "1593000"
  },
  {
    "text": "name service so here in this solution now we",
    "start": "1593000",
    "end": "1598279"
  },
  {
    "text": "have a relational database service in the back end we have the Autos scaling group of our application instances we've",
    "start": "1598279",
    "end": "1605520"
  },
  {
    "text": "got the elastic load balance on in front that's Health checking and balancing the load to the alive application",
    "start": "1605520",
    "end": "1612279"
  },
  {
    "text": "instances then you have your domain name my website.com you can basically associate this domain",
    "start": "1612279",
    "end": "1619399"
  },
  {
    "text": "name with the Amazon Route 53 service to for example an elastic load balancer or",
    "start": "1619399",
    "end": "1625360"
  },
  {
    "text": "a cloudfront distribution which is coming later this is a really handy way of managing the global DNS",
    "start": "1625360",
    "end": "1633679"
  },
  {
    "text": "service and if you want to go Global there's a handy option of doing",
    "start": "1633679",
    "end": "1640760"
  },
  {
    "text": "multi-region latency based routing so what happens is that Route 53",
    "start": "1640760",
    "end": "1648600"
  },
  {
    "text": "will'll analyze where is the user where is he coming from what is the latency",
    "start": "1648600",
    "end": "1653760"
  },
  {
    "text": "from the client to the different re regions where you have deployed your service and Route 53 will send the",
    "start": "1653760",
    "end": "1661480"
  },
  {
    "text": "response and director user to their nearest region where you're running your",
    "start": "1661480",
    "end": "1667320"
  },
  {
    "text": "service then you can optimize the service delivery time with the lowest latency for your",
    "start": "1667320",
    "end": "1673799"
  },
  {
    "text": "customers another way of optimizing the service delivery is by using our",
    "start": "1673960",
    "end": "1679279"
  },
  {
    "start": "1674000",
    "end": "1674000"
  },
  {
    "text": "cloudfront content delivery network service this is really important for",
    "start": "1679279",
    "end": "1685039"
  },
  {
    "text": "static Dynamic and streaming content delivery basically you don't want every",
    "start": "1685039",
    "end": "1690559"
  },
  {
    "text": "single request for the pictures for the videos Etc hitting your web servers and loading your",
    "start": "1690559",
    "end": "1696960"
  },
  {
    "text": "databases furthermore you want to serve the content from a location that is near the",
    "start": "1696960",
    "end": "1703080"
  },
  {
    "text": "subscribers near the users here we have groups of users from London Paris and New York",
    "start": "1703080",
    "end": "1709039"
  },
  {
    "text": "and with the cloudfront distribution we can cast the content near the",
    "start": "1709039",
    "end": "1714600"
  },
  {
    "text": "users that gives them low latency high bandwidth",
    "start": "1714600",
    "end": "1719919"
  },
  {
    "text": "connectivity and furthermore it's also offloading the pend systems so when you",
    "start": "1720120",
    "end": "1725840"
  },
  {
    "start": "1721000",
    "end": "1721000"
  },
  {
    "text": "look at the graphs here compared to not using a Content delivery network if you",
    "start": "1725840",
    "end": "1731320"
  },
  {
    "text": "use content deliver Network like cloudfront for static content you can reduce the response time make it faster",
    "start": "1731320",
    "end": "1737159"
  },
  {
    "text": "and you can also reduce the server load which means that you can scale down your system and save",
    "start": "1737159",
    "end": "1743559"
  },
  {
    "text": "costs to improve the system even better you can use CDN not only for static also",
    "start": "1743840",
    "end": "1749279"
  },
  {
    "text": "but also Dynamic content as an effect using the cloud you",
    "start": "1749279",
    "end": "1757799"
  },
  {
    "start": "1753000",
    "end": "1753000"
  },
  {
    "text": "can go Global in minutes there is nothing preventing you from going global",
    "start": "1757799",
    "end": "1764279"
  },
  {
    "text": "with your service you can start in your own region but if you think that your service has Global appeal you can",
    "start": "1764279",
    "end": "1770760"
  },
  {
    "text": "basically just replicate your system using for example cloud formation templates and just deploy it in all of",
    "start": "1770760",
    "end": "1777440"
  },
  {
    "text": "our nine regions if you want and then to speed up the content delivery we have 42 Edge locations The",
    "start": "1777440",
    "end": "1784840"
  },
  {
    "text": "Edge locations are hosting our Route 53 DNS service and the cloudfront content",
    "start": "1784840",
    "end": "1790919"
  },
  {
    "text": "delivery Network now let's look at design for",
    "start": "1790919",
    "end": "1797080"
  },
  {
    "text": "failure our architecture patterns this is your simple goal your",
    "start": "1797080",
    "end": "1803559"
  },
  {
    "text": "application should be always on it should continue to function delivering the service even if the underlying",
    "start": "1803559",
    "end": "1810880"
  },
  {
    "text": "system components fail are removed or replaced so a couple of simple rules",
    "start": "1810880",
    "end": "1818559"
  },
  {
    "text": "don't have any single points of failure analyze your architecture you",
    "start": "1818559",
    "end": "1824000"
  },
  {
    "text": "can use the help of our solution architecture TS identify any single",
    "start": "1824000",
    "end": "1829360"
  },
  {
    "text": "points of failure and take mitigating actions remove those then failure should not be an",
    "start": "1829360",
    "end": "1838480"
  },
  {
    "text": "exception failure of component systems and services should be considered a",
    "start": "1838480",
    "end": "1844039"
  },
  {
    "text": "normal action so assume that ultimately anything and everything can fail and",
    "start": "1844039",
    "end": "1849440"
  },
  {
    "text": "then design backwards from that so the first best practice is to",
    "start": "1849440",
    "end": "1855880"
  },
  {
    "text": "use multi-az deployment first a",
    "start": "1855880",
    "end": "1862000"
  },
  {
    "start": "1859000",
    "end": "1859000"
  },
  {
    "text": "reminder some of the AWS building blocks are inherently fault tolerant so when",
    "start": "1862000",
    "end": "1867519"
  },
  {
    "text": "you look at the list of services on the left all of those Services have built in",
    "start": "1867519",
    "end": "1872679"
  },
  {
    "text": "high availability and fault Tolerance on region level and the services on the right are",
    "start": "1872679",
    "end": "1878480"
  },
  {
    "text": "fa tolerant with the right architecture including using ec2 EBS Etc",
    "start": "1878480",
    "end": "1885000"
  },
  {
    "text": "so let's take a look here we have two availability zones",
    "start": "1885000",
    "end": "1890039"
  },
  {
    "text": "so availability zones are basically data centers within the same region that have low latency network connectivity between",
    "start": "1890039",
    "end": "1896720"
  },
  {
    "text": "them they have isolated network connections power connections flood",
    "start": "1896720",
    "end": "1901880"
  },
  {
    "text": "plane Etc so let's start with the database there you have your master database we",
    "start": "1901880",
    "end": "1908919"
  },
  {
    "text": "are using Amazon RDS service in this example for example with mySQL you can just handily with one",
    "start": "1908919",
    "end": "1916279"
  },
  {
    "text": "click command line or API call make a multi-az replicated RDS",
    "start": "1916279",
    "end": "1923159"
  },
  {
    "text": "solution then you have your database master in one of the availability zones and we will automatically create a",
    "start": "1923159",
    "end": "1929440"
  },
  {
    "text": "standby synchronous replica in another availability Zone in the unlikely event that this",
    "start": "1929440",
    "end": "1936880"
  },
  {
    "text": "master goes away something happens to it we will switch over the database we will",
    "start": "1936880",
    "end": "1943880"
  },
  {
    "text": "promote to replica to the to new master and to make sure that there always there is",
    "start": "1943880",
    "end": "1950080"
  },
  {
    "text": "always a replica we will start automatically then creating another synch synchronous replica in the",
    "start": "1950080",
    "end": "1956159"
  },
  {
    "text": "background in another availability Z your application clients will then",
    "start": "1956159",
    "end": "1962799"
  },
  {
    "text": "fail over the connections from the master the old Master to the new one in another availability",
    "start": "1962799",
    "end": "1970559"
  },
  {
    "text": "Zone that's not enough you also need to have multiac deployment for your application te so you you can very",
    "start": "1971200",
    "end": "1978320"
  },
  {
    "text": "handily and easily expand your old scaling group to span over multiple",
    "start": "1978320",
    "end": "1983880"
  },
  {
    "text": "availability zones and then the elastic load balancer",
    "start": "1983880",
    "end": "1989279"
  },
  {
    "text": "will distribute the traffic to instances across multiple availability",
    "start": "1989279",
    "end": "1995240"
  },
  {
    "text": "zones basically you will want to be able to withstand the total loss of an",
    "start": "1995240",
    "end": "2000600"
  },
  {
    "text": "availability zone so that none of your application tiers are hosted fully in only one AC don't have all your EGS in",
    "start": "2000600",
    "end": "2007559"
  },
  {
    "text": "one basket and then practice",
    "start": "2007559",
    "end": "2014279"
  },
  {
    "start": "2010000",
    "end": "2010000"
  },
  {
    "text": "failures there's a concept called game day I recommend looking into this",
    "start": "2014279",
    "end": "2019760"
  },
  {
    "text": "Netflix has built a really interesting service that they have open source as part of the Netflix OS Suite called",
    "start": "2019760",
    "end": "2025760"
  },
  {
    "text": "chaos mkey Netflix is running running this in production what it does is that",
    "start": "2025760",
    "end": "2030960"
  },
  {
    "text": "it will disable instances in production so failure should be a",
    "start": "2030960",
    "end": "2038720"
  },
  {
    "text": "commonplace incident you should be able to withstand individual component failures without the whole service",
    "start": "2038720",
    "end": "2044240"
  },
  {
    "text": "suffering so that the kpis don't go down for the end user so take a look at chaos",
    "start": "2044240",
    "end": "2049560"
  },
  {
    "text": "monkey and even consider running it in your own testing environments basically with the chaos",
    "start": "2049560",
    "end": "2055520"
  },
  {
    "text": "monkey you can introduce failures into your system and make sure that you can",
    "start": "2055520",
    "end": "2060760"
  },
  {
    "text": "survive them next is loose coupling",
    "start": "2060760",
    "end": "2069638"
  },
  {
    "text": "the rule here is that you really need to build Loosely coupled systems because the looser they are coupled the bigger",
    "start": "2069720",
    "end": "2076398"
  },
  {
    "text": "they scale and the better F tolerance they have what you want to do is to create",
    "start": "2076399",
    "end": "2084118"
  },
  {
    "text": "independent components design them as black boxes so",
    "start": "2084119",
    "end": "2090040"
  },
  {
    "text": "the idea here is that you make a component as a service the service exposes optimally on",
    "start": "2090040",
    "end": "2097400"
  },
  {
    "text": "a API for example restful API the API has known features and is stable the",
    "start": "2097400",
    "end": "2104960"
  },
  {
    "text": "internal imple implementation of this service can change so you can change the",
    "start": "2104960",
    "end": "2110560"
  },
  {
    "text": "language that you use to implement the component Services you can change the functions how it works without affecting",
    "start": "2110560",
    "end": "2118800"
  },
  {
    "text": "the services exposed by the API and here Netflix has introduced",
    "start": "2118800",
    "end": "2126359"
  },
  {
    "start": "2123000",
    "end": "2123000"
  },
  {
    "text": "another interesting testing tool called the latency monkey the latency monkey is apparently",
    "start": "2126359",
    "end": "2132599"
  },
  {
    "text": "even more difficult than the chaos monkey so chaos monkey is disabling Services it's rather easy to notice that",
    "start": "2132599",
    "end": "2139079"
  },
  {
    "text": "something is not there anymore it doesn't respond what if the response time from dependent Services is getting",
    "start": "2139079",
    "end": "2145760"
  },
  {
    "text": "slower and slower and slower that's what the latency monkey does so it introduces",
    "start": "2145760",
    "end": "2151880"
  },
  {
    "text": "High latency and slows slows down the responses between interdependent",
    "start": "2151880",
    "end": "2157280"
  },
  {
    "text": "services this is a tightly coupled application",
    "start": "2157280",
    "end": "2163720"
  },
  {
    "text": "example so here you have a receiver component and it's requesting a function",
    "start": "2163720",
    "end": "2169280"
  },
  {
    "text": "from a transcoder for example now if the transcoder is slow the receiver has to",
    "start": "2169280",
    "end": "2175839"
  },
  {
    "text": "wait so the code is just waiting it's probably using TCP connections Etc and",
    "start": "2175839",
    "end": "2183119"
  },
  {
    "text": "your whole application starts queuing and buffering internally and it may even crash if the dependent bodyy becomes",
    "start": "2183119",
    "end": "2189480"
  },
  {
    "text": "slow or unavailable so here the best practice is to use a q service the couple the two",
    "start": "2189480",
    "end": "2196920"
  },
  {
    "text": "components the first one drops the request in a queue and continues working with the next next",
    "start": "2196920",
    "end": "2203160"
  },
  {
    "text": "request the second party is just reading work from the queue and executing on",
    "start": "2203160",
    "end": "2210079"
  },
  {
    "text": "those this way you don't have component a fully depending on the speed of",
    "start": "2210079",
    "end": "2216280"
  },
  {
    "text": "component B the queue is decoupling them and it's also acting as a",
    "start": "2216280",
    "end": "2222680"
  },
  {
    "start": "2223000",
    "end": "2223000"
  },
  {
    "text": "buffer here we have a couple of Handy services that you should really take a look at the Amazon sqs or simple Q",
    "start": "2223319",
    "end": "2231839"
  },
  {
    "text": "service is an implementation of what we saw in the previous slide it's a handy",
    "start": "2231839",
    "end": "2237000"
  },
  {
    "text": "way of decoupling your services or your components by introducing cues so you",
    "start": "2237000",
    "end": "2242560"
  },
  {
    "text": "have workers that are putting stuff in queue some working cues and you have",
    "start": "2242560",
    "end": "2247800"
  },
  {
    "text": "other components that are reading work from the queue there is something called the visibility timeout so let's say that you",
    "start": "2247800",
    "end": "2254800"
  },
  {
    "text": "have some work in a queue a worker picks it up but then it dies it can happen",
    "start": "2254800",
    "end": "2259960"
  },
  {
    "text": "What happens to the message that the worker was working on well you can set a visibility time out when this time",
    "start": "2259960",
    "end": "2268000"
  },
  {
    "text": "passes the message goes back into the queue and then another worker can pick",
    "start": "2268000",
    "end": "2273599"
  },
  {
    "text": "it up and continue working the sqs is a highly reliable highly scalable Q",
    "start": "2273599",
    "end": "2279800"
  },
  {
    "text": "service that lets you do this if you need a more complicated workflow where you have questions should",
    "start": "2279800",
    "end": "2288040"
  },
  {
    "text": "I do this one next or should I do that one next when you have complicated execution logic a better best practice",
    "start": "2288040",
    "end": "2294920"
  },
  {
    "text": "is to use a simple workflow service it can reliably coordinate",
    "start": "2294920",
    "end": "2300000"
  },
  {
    "text": "processing steps and manage a distributed state in a complex system",
    "start": "2300000",
    "end": "2307640"
  },
  {
    "text": "so take a look at simple workflow service if you need to have decision trees in your execution flow use sqs for",
    "start": "2307640",
    "end": "2316680"
  },
  {
    "text": "simple queuing and buffering between two components where you know that a needs to talk to B you know the execution",
    "start": "2316680",
    "end": "2323760"
  },
  {
    "text": "logic if you have decision trees take a look at simple workflow",
    "start": "2323760",
    "end": "2329839"
  },
  {
    "text": "service then finally let's talk about being a",
    "start": "2331160",
    "end": "2336240"
  },
  {
    "text": "data driven driven business ultimately what you want to do is you want to save costs you want to focus you want to be",
    "start": "2336240",
    "end": "2344720"
  },
  {
    "text": "agile and you want to iterate your service and application startups need to start with",
    "start": "2344720",
    "end": "2351480"
  },
  {
    "text": "an MVP minimum viable product launch your product put it into production with",
    "start": "2351480",
    "end": "2358200"
  },
  {
    "text": "a very simple set of features and then listen to your customer feedback and",
    "start": "2358200",
    "end": "2363680"
  },
  {
    "text": "based on your customer feedback iterate rapidly introduce new Services features and fixes based on",
    "start": "2363680",
    "end": "2370960"
  },
  {
    "text": "exactly what your customers need you know this by looking at your",
    "start": "2370960",
    "end": "2376280"
  },
  {
    "text": "data and then let the data move the levers in your system be a datadriven",
    "start": "2376280",
    "end": "2382640"
  },
  {
    "text": "business how could you do this here's an example from our customer wuga which is a gaming",
    "start": "2382640",
    "end": "2389720"
  },
  {
    "text": "company now wuga have inapp purchases so they have a",
    "start": "2389720",
    "end": "2395480"
  },
  {
    "start": "2390000",
    "end": "2390000"
  },
  {
    "text": "premium model the game may be free but then they have Ina purchases for example",
    "start": "2395480",
    "end": "2401160"
  },
  {
    "text": "a magic wand to let you do amazing things in the game they want to",
    "start": "2401160",
    "end": "2406640"
  },
  {
    "text": "compare what is the best way to get people excited about buying this magic",
    "start": "2406640",
    "end": "2412599"
  },
  {
    "text": "w a nice way of doing this is AB testing now what bua have done is that",
    "start": "2412599",
    "end": "2419200"
  },
  {
    "text": "they try a couple of different things they have the old way of introducing the magic V one to the customer and then",
    "start": "2419200",
    "end": "2425960"
  },
  {
    "text": "they try different things different options and see which ones are the most interesting to the customers",
    "start": "2425960",
    "end": "2432920"
  },
  {
    "text": "how would you implement this in production for example like",
    "start": "2432920",
    "end": "2438440"
  },
  {
    "text": "this using cloud formation elastic bean stock for example deploy two copies of",
    "start": "2438440",
    "end": "2445880"
  },
  {
    "text": "your system so here we have the customer traffic from my game.com coming to the elastic Lo balancer through Route",
    "start": "2445880",
    "end": "2453119"
  },
  {
    "text": "53 and then you have two UT scaling groups you have group a with your",
    "start": "2453119",
    "end": "2459920"
  },
  {
    "text": "options a your first options for your game then you have a slightly modified",
    "start": "2459920",
    "end": "2465760"
  },
  {
    "text": "option set for Group B you put both in production and the load balancer is",
    "start": "2465760",
    "end": "2471680"
  },
  {
    "text": "equally balancing the traffic across these two different groups the most important thing here is",
    "start": "2471680",
    "end": "2477599"
  },
  {
    "text": "then the logs collect all the data these days with big data one definition of big",
    "start": "2477599",
    "end": "2484599"
  },
  {
    "text": "data is that data is Big dat data when it's cheaper just to store all of the",
    "start": "2484599",
    "end": "2490520"
  },
  {
    "text": "data than figure out do I need this data or what data do I need so the best practice that and we give to the",
    "start": "2490520",
    "end": "2497240"
  },
  {
    "text": "startups these days is just store all of your data figure out later what you want",
    "start": "2497240",
    "end": "2502520"
  },
  {
    "text": "to do with that if you don't store your data you might be throwing away something that is valuable where you get",
    "start": "2502520",
    "end": "2511400"
  },
  {
    "text": "insights so in this example we have two production systems running code version",
    "start": "2511400",
    "end": "2516680"
  },
  {
    "text": "a with different features and B you collect the logs that contain your customer actions",
    "start": "2516680",
    "end": "2522800"
  },
  {
    "text": "and experiences and you put them in S3 and make sure to separate them in S3 to test",
    "start": "2522800",
    "end": "2529800"
  },
  {
    "text": "group a and test group b now you have your locks the locks contain the information how people took to your new",
    "start": "2529800",
    "end": "2537520"
  },
  {
    "text": "service in a versus B now what you need to analyze the",
    "start": "2537520",
    "end": "2543079"
  },
  {
    "start": "2541000",
    "end": "2541000"
  },
  {
    "text": "locks here's another service that you really should Outsource Hadoop and related big data analytics",
    "start": "2543079",
    "end": "2550400"
  },
  {
    "text": "tools massively parallel processing you basically want to analyze your loog",
    "start": "2550400",
    "end": "2557000"
  },
  {
    "text": "files you might have a lot of loog files that means that a single serialized",
    "start": "2557000",
    "end": "2562160"
  },
  {
    "text": "system like an SQL database no longer has enough performance capacity storage",
    "start": "2562160",
    "end": "2567720"
  },
  {
    "text": "capacity and processing capacity to process your logs on time you need fresh",
    "start": "2567720",
    "end": "2572960"
  },
  {
    "text": "data so that you get fresh insights you need massively parallel",
    "start": "2572960",
    "end": "2578440"
  },
  {
    "text": "processing Amazon elastic map reduce lets you do this really easily it's a fully managed and hosted Hadoop",
    "start": "2578440",
    "end": "2585359"
  },
  {
    "text": "framework including other Hardo framework open source tools such as Hive",
    "start": "2585359",
    "end": "2592280"
  },
  {
    "text": "Pak AG space r and mahout so elastic map Ru lets you really",
    "start": "2592280",
    "end": "2599440"
  },
  {
    "text": "handily and easily create Hado clusters and then you can point your",
    "start": "2599440",
    "end": "2605440"
  },
  {
    "text": "data in S3 this this is the source data you can parallel stream this data into",
    "start": "2605440",
    "end": "2610800"
  },
  {
    "text": "your Hado clust in elastic map produ and then create job flows the job flows are",
    "start": "2610800",
    "end": "2617000"
  },
  {
    "text": "the map and reduce algorithms that are analyzing your content your data there",
    "start": "2617000",
    "end": "2623200"
  },
  {
    "text": "are different ways of doing this you can use Hive query language you can use speak or you can write the map",
    "start": "2623200",
    "end": "2630000"
  },
  {
    "text": "reduce jobs in streaming mode using cascading different",
    "start": "2630000",
    "end": "2635920"
  },
  {
    "text": "programming languages and by the way if you run elastic map ruce it's a really nice best practice to",
    "start": "2635920",
    "end": "2643640"
  },
  {
    "text": "use spot instances that's a really good way of saving costs Hado and elastic map ruce",
    "start": "2643640",
    "end": "2651160"
  },
  {
    "text": "work really well with spot instances because they can automatically replace",
    "start": "2651160",
    "end": "2656400"
  },
  {
    "text": "any failed or disappearing instances without loss of data then you use elastic map redu to",
    "start": "2656400",
    "end": "2664599"
  },
  {
    "text": "analyze your locks and to get the insights you can keep the results in Hado in hdfs",
    "start": "2664599",
    "end": "2672200"
  },
  {
    "text": "if you want and with Hive you can create a table or you can just export the results",
    "start": "2672200",
    "end": "2680440"
  },
  {
    "text": "from elastic map produce for example into RDS into a SQL database those are",
    "start": "2680440",
    "end": "2686760"
  },
  {
    "text": "your results and then you want to have data scientists who are discovering",
    "start": "2686760",
    "end": "2692920"
  },
  {
    "start": "2689000",
    "end": "2689000"
  },
  {
    "text": "value in the data they are creating the map reduce jobs that are analyzing the",
    "start": "2692920",
    "end": "2697960"
  },
  {
    "text": "content they are discovering value in your data and then they visualize it",
    "start": "2697960",
    "end": "2703040"
  },
  {
    "text": "using for example Tableau or D3 Etc here we have a couple of nice examples",
    "start": "2703040",
    "end": "2708880"
  },
  {
    "text": "showing how Chau can be pointed to a database that has the analytics results",
    "start": "2708880",
    "end": "2714880"
  },
  {
    "text": "to visualize your solution and then based on the learnings",
    "start": "2714880",
    "end": "2722920"
  },
  {
    "text": "the insights from the data analytics from your logs you want to iterate Your solution and improve it so here on the",
    "start": "2722920",
    "end": "2730440"
  },
  {
    "text": "left you in the black you have your development testing integration environment with continuous integration",
    "start": "2730440",
    "end": "2736880"
  },
  {
    "text": "that is producing new versions of your service stored in S3 you have version",
    "start": "2736880",
    "end": "2742119"
  },
  {
    "text": "one 1.1 1.2 to test these you can for example",
    "start": "2742119",
    "end": "2747800"
  },
  {
    "text": "use cloud formation to just spin up new complete Solutions based on your new",
    "start": "2747800",
    "end": "2754559"
  },
  {
    "text": "versions and then you can execute tests and you can put them into production",
    "start": "2754559",
    "end": "2759599"
  },
  {
    "text": "using infrastructure as code best practices media molecule is one of our",
    "start": "2759599",
    "end": "2765880"
  },
  {
    "start": "2763000",
    "end": "2763000"
  },
  {
    "text": "customers who is really happy doing this so they have increased flexibility running multiple environments creating",
    "start": "2765880",
    "end": "2772640"
  },
  {
    "text": "them on demand paying for them payer use model removing them when they don't need",
    "start": "2772640",
    "end": "2778480"
  },
  {
    "text": "them this allows them to them to do rapid development and",
    "start": "2778480",
    "end": "2783880"
  },
  {
    "text": "testing remember Amazon web services gives you the Lego building",
    "start": "2785040",
    "end": "2790680"
  },
  {
    "text": "blocks from the building blocks you build your solution and you start working in the",
    "start": "2790680",
    "end": "2798240"
  },
  {
    "text": "cloud go to aws.amazon.com for more information and remember you can get",
    "start": "2799400",
    "end": "2805640"
  },
  {
    "text": "started with our free tier thank you very much I'm Marist",
    "start": "2805640",
    "end": "2811160"
  },
  {
    "text": "technology evangelist wws based in Singapore",
    "start": "2811160",
    "end": "2816559"
  },
  {
    "text": "and now it's time for the",
    "start": "2817480",
    "end": "2820800"
  },
  {
    "text": "poll",
    "start": "2837480",
    "end": "2840480"
  },
  {
    "text": "okay e",
    "start": "2845839",
    "end": "2849880"
  },
  {
    "text": "okay excellent the results are in and looks like the winning choice is all of the above excellent thank you very much",
    "start": "2886920",
    "end": "2894280"
  },
  {
    "text": "now please remember your feedback is super important so please complete the survey at the end of this webinar let us",
    "start": "2894280",
    "end": "2900319"
  },
  {
    "text": "know your feedback and we will in a natural manner iterate our Solutions based on your",
    "start": "2900319",
    "end": "2905440"
  },
  {
    "text": "feedback thank you very much and see you next time now we can do questions and",
    "start": "2905440",
    "end": "2912920"
  },
  {
    "text": "answers now one question is is there a tool to create easily cloud formation",
    "start": "2924000",
    "end": "2929559"
  },
  {
    "text": "templates rather than doing it by hand absolutely the way that I use it myself",
    "start": "2929559",
    "end": "2935400"
  },
  {
    "text": "is that you can just a cloud formation template called a cloud forer so one of",
    "start": "2935400",
    "end": "2941000"
  },
  {
    "text": "the example templates that we have is a tool called Cloud forer so what it means that you would first build your AWS",
    "start": "2941000",
    "end": "2949240"
  },
  {
    "text": "environment however you want it and then you can launch This Cloud for a tool and it will make a cloud formation template",
    "start": "2949240",
    "end": "2956240"
  },
  {
    "text": "based on the solution you're running right now in your AWS account and then you can look at the",
    "start": "2956240",
    "end": "2963319"
  },
  {
    "text": "code and if necessary you can start modifying them this ch template and remember it's a really easy way to test",
    "start": "2963319",
    "end": "2969880"
  },
  {
    "text": "it just by launching a new environment based on this cloud formation template",
    "start": "2969880",
    "end": "2974920"
  },
  {
    "text": "and iteratively improving",
    "start": "2974920",
    "end": "2978359"
  },
  {
    "text": "it what is the speed of RDS and can I pay more to speed up my queue well first",
    "start": "2982200",
    "end": "2989760"
  },
  {
    "text": "of all RDS or Amazon relational database service the speed of the database",
    "start": "2989760",
    "end": "2995520"
  },
  {
    "text": "depends mostly first on your instance size so remember that you can do vertical scaling so do performance",
    "start": "2995520",
    "end": "3002640"
  },
  {
    "text": "testing and look at the cloudwatch metrics of your RDS database and if necessary increase the database size by",
    "start": "3002640",
    "end": "3010240"
  },
  {
    "text": "spinning up a bigger instance you can just modify the RDS database and choose",
    "start": "3010240",
    "end": "3016160"
  },
  {
    "text": "a larger instance size it will reboot with the larger instance size and if you're running a multi-az RDS it's not",
    "start": "3016160",
    "end": "3024400"
  },
  {
    "text": "going to give you downtime it will reboot one of the instances and switch the master database to the other",
    "start": "3024400",
    "end": "3029799"
  },
  {
    "text": "one so that's vertic you can vertically scale your RS instance but the second",
    "start": "3029799",
    "end": "3035319"
  },
  {
    "text": "thing is remember elastic cach you can put the m cach d compatible cashing solution in front and offload a lot of",
    "start": "3035319",
    "end": "3042119"
  },
  {
    "text": "the request from your master database and you can create read replicas and you can point the read requests away from",
    "start": "3042119",
    "end": "3049040"
  },
  {
    "text": "your master then your master just does wres so these are the different ways how",
    "start": "3049040",
    "end": "3054920"
  },
  {
    "text": "you can scale your RDS performance the other way then is to",
    "start": "3054920",
    "end": "3060799"
  },
  {
    "text": "really look at Dynamo DB and try to design an architect Your solution so that you use the RDS SQL database for",
    "start": "3060799",
    "end": "3069000"
  },
  {
    "text": "the complicated queries with joints Etc and for more simple key value store with",
    "start": "3069000",
    "end": "3075640"
  },
  {
    "text": "really high performance low millisecond reliable trut look at MySQL",
    "start": "3075640",
    "end": "3083559"
  },
  {
    "text": "sorry look at Dynamo DP so have a combination of SQL and no SQL in your",
    "start": "3083559",
    "end": "3088839"
  },
  {
    "text": "application logic if you",
    "start": "3088839",
    "end": "3091880"
  },
  {
    "text": "can then there's a question on AB testing can I have rules saying for example 25% of requests go somewhere",
    "start": "3094280",
    "end": "3102200"
  },
  {
    "text": "well one way is using Route 53 and weighted resolution so with Route",
    "start": "3102200",
    "end": "3109680"
  },
  {
    "text": "53 you can point different C backend systems to your",
    "start": "3109680",
    "end": "3114799"
  },
  {
    "text": "domain and in route 53 you can give weights like 25% of the traffic goes to",
    "start": "3114799",
    "end": "3122520"
  },
  {
    "text": "this system and 75% of the traffic goes to that system that's one way of doing",
    "start": "3122520",
    "end": "3127760"
  },
  {
    "text": "that another really interesting point to mention here is reduced operating mode",
    "start": "3127760",
    "end": "3134520"
  },
  {
    "text": "let's say that something happens to your application code and your production system is not",
    "start": "3134520",
    "end": "3140000"
  },
  {
    "text": "healthy you still want to serve your customers with some content so something",
    "start": "3140000",
    "end": "3145040"
  },
  {
    "text": "that I recommend is you using content website hosting directly from",
    "start": "3145040",
    "end": "3151240"
  },
  {
    "text": "S3 so have your Dynamic website as the production system but if some really",
    "start": "3151240",
    "end": "3156599"
  },
  {
    "text": "huge Calamity happens to that one you can just basically shift to weight in",
    "start": "3156599",
    "end": "3161839"
  },
  {
    "text": "Route 53 and direct 100% of your traffic to S3 and then do website hosting from an",
    "start": "3161839",
    "end": "3170079"
  },
  {
    "text": "S3 bucket now obviously that's not very Dynamic but it can still give a user",
    "start": "3170079",
    "end": "3175839"
  },
  {
    "text": "experience to customers so they so that they don't get a 503 service unavailable while you fix your primary site and then",
    "start": "3175839",
    "end": "3183280"
  },
  {
    "text": "when that's up and working nicely in Route 53 you shft the weight again and",
    "start": "3183280",
    "end": "3188440"
  },
  {
    "text": "you send your traffic back to your Dynamic site so look at look at website",
    "start": "3188440",
    "end": "3193559"
  },
  {
    "text": "hosting directly from S3",
    "start": "3193559",
    "end": "3197599"
  },
  {
    "text": "there's a question is the SQL Server",
    "start": "3226040",
    "end": "3231400"
  },
  {
    "text": "multiac so the Microsoft SQL server is not yet multi a enabled Oracle and MySQL",
    "start": "3231799",
    "end": "3241520"
  },
  {
    "text": "are there's a question how to decide if one should increase the RDS",
    "start": "3249880",
    "end": "3255319"
  },
  {
    "text": "size or provision more ions that is a good question it's",
    "start": "3255319",
    "end": "3260720"
  },
  {
    "text": "related to provisioned ions so if you first of all you need to look",
    "start": "3260720",
    "end": "3266640"
  },
  {
    "text": "at your cloudwatch metrics if you identify that for example your weight IO is increasing it means that your",
    "start": "3266640",
    "end": "3273040"
  },
  {
    "text": "processing whether it's your application or your database is waiting for Io so the CPU is limited by the",
    "start": "3273040",
    "end": "3281240"
  },
  {
    "text": "io then you might want to test provisioned iOS especially for",
    "start": "3281240",
    "end": "3286760"
  },
  {
    "text": "databases the best practice is to ensure that the iio performance is good enough",
    "start": "3286760",
    "end": "3292160"
  },
  {
    "text": "what is good enough it depends on your load your requirements and your solution",
    "start": "3292160",
    "end": "3297400"
  },
  {
    "text": "but look at the cloud watch metrics for Io and then you can test using provisioned iops for your Eeps",
    "start": "3297400",
    "end": "3304799"
  },
  {
    "text": "volumes and EPS optimized instance types go hand inand with the provision di then",
    "start": "3304799",
    "end": "3312040"
  },
  {
    "text": "you get consistent IO performance from your EPS volumes",
    "start": "3312040",
    "end": "3318079"
  },
  {
    "text": "there's a question on three theer applications how are business or data components",
    "start": "3332119",
    "end": "3337880"
  },
  {
    "text": "created do we need to create customizations for that well in short yes so first you need",
    "start": "3337880",
    "end": "3345960"
  },
  {
    "text": "to design your application architecture you want to specify do you have a presentation theer maybe the web service",
    "start": "3345960",
    "end": "3353319"
  },
  {
    "text": "do you have an application theer which is maybe separate from the web server tier and then your data tier",
    "start": "3353319",
    "end": "3359039"
  },
  {
    "text": "which could consist of RDS SQL databases or D DP no SQL or both Etc but a lot of",
    "start": "3359039",
    "end": "3368480"
  },
  {
    "text": "the companies we see these days do a so-called two tier so they have maybe",
    "start": "3368480",
    "end": "3373839"
  },
  {
    "text": "their web servers and applications in the front end instances naturally they have their own",
    "start": "3373839",
    "end": "3380319"
  },
  {
    "text": "customized Amis them whether they are orchestrated or not using something like Chef puet or anle pre dmis you have your",
    "start": "3380319",
    "end": "3388359"
  },
  {
    "text": "application tier in front which is auto scaling and load balanced connecting then to the data tier which could be a",
    "start": "3388359",
    "end": "3394839"
  },
  {
    "text": "combination of cqal and noal databases but you need to design this and we have solution Architects that are more than",
    "start": "3394839",
    "end": "3400880"
  },
  {
    "text": "happy to work with you on",
    "start": "3400880",
    "end": "3403880"
  },
  {
    "text": "those are there any special considerations to keep in mind when developing Java nodejs PHP apps to run",
    "start": "3408880",
    "end": "3416000"
  },
  {
    "text": "on bean stock no so basically you can just code as normal using beanock and",
    "start": "3416000",
    "end": "3423720"
  },
  {
    "text": "then beanock will let you very handily create the execution environments scale",
    "start": "3423720",
    "end": "3429039"
  },
  {
    "text": "them for you self heal them for you with auto scaling and load balancing manage your databases manage your C names Etc",
    "start": "3429039",
    "end": "3437880"
  },
  {
    "text": "where you point to your traffic so basically you can just use your favorite uh integrat the development environments",
    "start": "3437880",
    "end": "3445119"
  },
  {
    "text": "like eclipse you can use kit Etc and you can just push your applications into",
    "start": "3445119",
    "end": "3450760"
  },
  {
    "text": "being sto to be",
    "start": "3450760",
    "end": "3453599"
  },
  {
    "text": "executed is there chance that the elastic load balancer could fail well it's inherently built to be a highly",
    "start": "3458880",
    "end": "3465480"
  },
  {
    "text": "available reliable solution so elastic Lo balancing does not consist of single",
    "start": "3465480",
    "end": "3470760"
  },
  {
    "text": "points of failure no when is the best time to start using EMR or elastic map reduce very good",
    "start": "3470760",
    "end": "3478079"
  },
  {
    "text": "question I would actually like to say now is the best time because you want to",
    "start": "3478079",
    "end": "3483960"
  },
  {
    "text": "be a data driven business you want to iterate your application and features based on customer feedback you don't",
    "start": "3483960",
    "end": "3491319"
  },
  {
    "text": "know what you should do unless you look at your data your data contains the",
    "start": "3491319",
    "end": "3496839"
  },
  {
    "text": "insights you want to get to the insights but you don't want to have a data analytic solution that is performance",
    "start": "3496839",
    "end": "3503559"
  },
  {
    "text": "bound that will reach its maximum when you new scale up to a certain level of usage so elastic map reduce let you",
    "start": "3503559",
    "end": "3511240"
  },
  {
    "text": "really easily do massively parallel processing of of your loog files and have actionable insights from your data",
    "start": "3511240",
    "end": "3518119"
  },
  {
    "text": "so I would start playing with EMR immediately which I",
    "start": "3518119",
    "end": "3523720"
  },
  {
    "text": "do what kind of alerting and monitoring means are available well we've talked a lot about Cloud watch today that's",
    "start": "3523720",
    "end": "3530079"
  },
  {
    "text": "collecting the metrics both standard metrics and customizable metrics from your system then we have SNS simple",
    "start": "3530079",
    "end": "3537960"
  },
  {
    "text": "notification service so you can subscribe to different topics we can",
    "start": "3537960",
    "end": "3543240"
  },
  {
    "text": "notify you can configure notifications where something important happens in your",
    "start": "3543240",
    "end": "3548400"
  },
  {
    "text": "system we can some people use sqs Simple Q service also to pass messages of",
    "start": "3548400",
    "end": "3554480"
  },
  {
    "text": "events to other systems for example EMR elastic map",
    "start": "3554480",
    "end": "3559760"
  },
  {
    "text": "reduce includes ganglia integrated so you can use ganglia to monitor your Hado",
    "start": "3559760",
    "end": "3565599"
  },
  {
    "text": "clusters both the cluster and the node we have SIMPLE email service Etc so",
    "start": "3565599",
    "end": "3571160"
  },
  {
    "text": "you have a lot of ways and you want to monitor so that's another thing besides",
    "start": "3571160",
    "end": "3576440"
  },
  {
    "text": "collecting the locks make sure that you're monitoring a metric are in order you need to know what's happening to",
    "start": "3576440",
    "end": "3581760"
  },
  {
    "text": "your system okay one last question after this",
    "start": "3581760",
    "end": "3588960"
  },
  {
    "text": "if the site is down ah let's take this one the question",
    "start": "3599920",
    "end": "3606240"
  },
  {
    "text": "is is Bean stalk more of a prototyping environment from which you would then say build a cloudformation template or",
    "start": "3606240",
    "end": "3613440"
  },
  {
    "text": "is it intended for ongoing production very good question it's definitely intended for ongoing",
    "start": "3613440",
    "end": "3619880"
  },
  {
    "text": "production the difference is really personal preference so elastic pin stock",
    "start": "3619880",
    "end": "3626640"
  },
  {
    "text": "actually I recommend that for people who really want to just focus on application",
    "start": "3626640",
    "end": "3631839"
  },
  {
    "text": "development because then being stalk will handle all the undifferentiated",
    "start": "3631839",
    "end": "3637000"
  },
  {
    "text": "heavy listing and mck on your behalf you'll just focus on the application development you have continuous integration and deployment chains that",
    "start": "3637000",
    "end": "3644520"
  },
  {
    "text": "deploy and push new application versions into production and pin stock handles everything else scalability replacement",
    "start": "3644520",
    "end": "3652079"
  },
  {
    "text": "of failed instances database management Etc",
    "start": "3652079",
    "end": "3657920"
  },
  {
    "text": "what is then cloud formation well cloud formation is another option the main difference is that with",
    "start": "3658160",
    "end": "3664039"
  },
  {
    "text": "cloud formation you describe your entire solution as Json code so it's",
    "start": "3664039",
    "end": "3670240"
  },
  {
    "text": "infrastructure as code and then you can store this code in Version Control with cloud formation you have more choice and",
    "start": "3670240",
    "end": "3679520"
  },
  {
    "text": "control for your infrastructure components if you want to do that you",
    "start": "3679520",
    "end": "3686280"
  },
  {
    "text": "can do that very easily with cloud formation but with pin St you make the decis decision that you don't care you",
    "start": "3686280",
    "end": "3694039"
  },
  {
    "text": "focus on your application development and be stalk does everything else so if you're interested in these application",
    "start": "3694039",
    "end": "3699440"
  },
  {
    "text": "Management Solutions I recommend you to take a look at both and see which one you prefer in addition to that we have",
    "start": "3699440",
    "end": "3705920"
  },
  {
    "text": "pops works and you have the always the option of fully managing your application and",
    "start": "3705920",
    "end": "3712440"
  },
  {
    "text": "configuration by yourself using E2 Etc",
    "start": "3712440",
    "end": "3717838"
  },
  {
    "text": "just big questions kind of responding but some",
    "start": "3718359",
    "end": "3725440"
  },
  {
    "text": "waiting okay so now we are at the end of this webinar thank you for your great",
    "start": "3731160",
    "end": "3736480"
  },
  {
    "text": "questions we still have a lot of questions good questions that we didn't have time to answer here online we will",
    "start": "3736480",
    "end": "3742039"
  },
  {
    "text": "come back to those so we will definitely try to respond as many as as we can now I would like to really thank",
    "start": "3742039",
    "end": "3749200"
  },
  {
    "text": "everybody for the good questions and for joining this session I really hope that you enjoyed it and until the next time",
    "start": "3749200",
    "end": "3755640"
  },
  {
    "text": "then it's been a pleasure I'm Marist technology evangelist for AWS thank you",
    "start": "3755640",
    "end": "3761160"
  },
  {
    "text": "and see you next time goodbye",
    "start": "3761160",
    "end": "3765720"
  }
]