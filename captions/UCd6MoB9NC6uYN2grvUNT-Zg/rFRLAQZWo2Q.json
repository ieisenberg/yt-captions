[
  {
    "text": "In this video, you'll see how to use\nAWS Distro for OpenTelemetry (ADOT)",
    "start": "100",
    "end": "4661"
  },
  {
    "text": "to send cross-account metrics on\nAmazon Elastic Container Service(Amazon ECS).",
    "start": "4661",
    "end": "9059"
  },
  {
    "text": "With ADOT, you can collect and correlate datametrics,\nconfigure fined-grained permissions for cross-account access with Amazon ECS,",
    "start": "9722",
    "end": "16474"
  },
  {
    "text": "and leverage centralized metrics collection\nacross multiple AWS services.",
    "start": "16474",
    "end": "20410"
  },
  {
    "text": "For this demonstration, we'll work in theAWS Cloud9 integrated\ndevelopment environment (IDE), but you can use your preferred IDE.",
    "start": "21391",
    "end": "28726"
  },
  {
    "text": "We have two accounts: a central account for monitoring,\nand a workload account for hosting our ECS cluster.",
    "start": "31093",
    "end": "36349"
  },
  {
    "text": "To start, we'll create a new file in the workload account and load it\nwith a policy that grants assume-role permissions to our ECS task.",
    "start": "39629",
    "end": "45940"
  },
  {
    "text": "Now in the bash terminal window, we'll create an\nAWS Identity and Access Management (IAM) role from the policy.",
    "start": "46902",
    "end": "53128"
  },
  {
    "text": "It grants cross-account permissions to the\nAmazon ECS tasks we'll build later.",
    "start": "53703",
    "end": "57537"
  },
  {
    "text": "Let's visit our IAM console to view the role.",
    "start": "58421",
    "end": "60834"
  },
  {
    "text": "Now we'll go to the central account to create an\nAmazon Managed Service for Prometheus (AMP) workspace.",
    "start": "63143",
    "end": "68501"
  },
  {
    "text": "AMP is the monitoring solution\nwe’ll use in this example.",
    "start": "69000",
    "end": "71791"
  },
  {
    "text": "The workspace is where\nwe'll aggregate metricsdata.",
    "start": "78370",
    "end": "80563"
  },
  {
    "text": "Let's visit the AMP console to confirm\nthe workspace has been created.",
    "start": "81774",
    "end": "85101"
  },
  {
    "text": "Next, we'll create a set of permissions\non the central monitoring account",
    "start": "89620",
    "end": "92894"
  },
  {
    "text": "that allow cross-account access to AMP\nwith the minimum amount of restrictions.",
    "start": "92894",
    "end": "96703"
  },
  {
    "text": "In a new file, we’ll add a policy\nto allow assume-role access.",
    "start": "99243",
    "end": "102584"
  },
  {
    "text": "Now we can create an IAM role with\nwrite permissions to the AMP workspace.",
    "start": "112104",
    "end": "116012"
  },
  {
    "text": "To do this, we’ll need to find\nand supply the workload account ID.",
    "start": "116478",
    "end": "119482"
  },
  {
    "text": "Now we'll create a policy that gives the workload account permissions\nto perform assume-role actions in the central monitoring account.",
    "start": "127673",
    "end": "133481"
  },
  {
    "text": "Here's the file with the ID\nfrom the monitoring account.",
    "start": "138065",
    "end": "140626"
  },
  {
    "text": "Next, we'll create an IAM role for the assume-role\npermission and attach a policy.",
    "start": "143131",
    "end": "146935"
  },
  {
    "text": "The central monitoring account needs only remote-write\naccess to AMP, so we've accounted for that in the policy.",
    "start": "148165",
    "end": "153556"
  },
  {
    "text": "The IAM role assigns permissions for\nthe workload account to push data into AMP.",
    "start": "154712",
    "end": "158872"
  },
  {
    "text": "Let's check that the policy appears\nin our IAM console.",
    "start": "160159",
    "end": "162877"
  },
  {
    "text": "Here you can see the role we just created.",
    "start": "170780",
    "end": "172594"
  },
  {
    "text": "As you can see, the policy gives permissions\nto push data into Prometheus.",
    "start": "173758",
    "end": "177452"
  },
  {
    "text": "Now we'll set up a role for the central monitoring\naccount to access the workload account.",
    "start": "183309",
    "end": "187156"
  },
  {
    "text": "This cross-account access ensures both accounts\ncan connect with the AMP workspace.",
    "start": "187636",
    "end": "191679"
  },
  {
    "text": "Let's get the central monitoring account ID,\nand then go to the workload account page.",
    "start": "193011",
    "end": "196875"
  },
  {
    "text": "Here, we’ll paste the account ID, and then add the policy\nthat grants the central monitoring account assume-role access.",
    "start": "198867",
    "end": "204441"
  },
  {
    "text": "The policy file contains code that enables the assume-role\naction we established in the central monitoring account.",
    "start": "205741",
    "end": "210862"
  },
  {
    "text": "Back in the bash terminal, we’ll attach the policy to the role\nwe created for remote-write access to AMP.",
    "start": "213455",
    "end": "218882"
  },
  {
    "text": "Let's check the IAM console again to see\nthe ECS cross-account task role.",
    "start": "220134",
    "end": "224001"
  },
  {
    "text": "With the cross-account permissions complete,",
    "start": "228388",
    "end": "230156"
  },
  {
    "text": "we can now configure the ADOT collector\nand Amazon ECS infrastructure in the workload account.",
    "start": "230156",
    "end": "234797"
  },
  {
    "text": "First, we'll establish a directory\nfor the ADOT collector.",
    "start": "236051",
    "end": "238584"
  },
  {
    "text": "The directory appears as a new folder in the workload.",
    "start": "239918",
    "end": "242238"
  },
  {
    "text": "Next, we’ll attach the cross-account role policy.",
    "start": "243421",
    "end": "245635"
  },
  {
    "text": "We'll create another directory\nfor the main ADOT application.",
    "start": "246834",
    "end": "249434"
  },
  {
    "text": "Next, we'll install the Amazon ECS command line interface (CLI) tool\nto deploy applications using Docker Compose for Amazon ECS.",
    "start": "250621",
    "end": "258700"
  },
  {
    "text": "Now we can access the demo-app repository",
    "start": "260047",
    "end": "262345"
  },
  {
    "text": "and create a simple application that exposes\na Prometheus metrics endpoint using code available on GitHub.",
    "start": "262345",
    "end": "267527"
  },
  {
    "text": "Next, let's build a Docker file to allow\nour application to run inside Docker.",
    "start": "268731",
    "end": "272625"
  },
  {
    "text": "To recap our infrastructure so far, we have the demo-app\napplication set up to capture Prometheus metrics.",
    "start": "273871",
    "end": "279179"
  },
  {
    "text": "We also have a Docker file that will allow\nthe application to run inside a Docker container.",
    "start": "280047",
    "end": "284168"
  },
  {
    "text": "Next, we'll build Docker images and host them on Amazon Elastic Container\nRegistry (Amazon ECR) to use as part of an Amazon ECS task.",
    "start": "288310",
    "end": "296112"
  },
  {
    "text": "With this code, we'll build\nthe Docker image locally.",
    "start": "297527",
    "end": "299901"
  },
  {
    "text": "Let's set a default region.",
    "start": "304718",
    "end": "305878"
  },
  {
    "text": "Now we can create the Amazon ECR repository\nto host the Docker image.",
    "start": "309457",
    "end": "313191"
  },
  {
    "text": "Let's check it out in the Amazon ECR console.",
    "start": "314544",
    "end": "316718"
  },
  {
    "text": "Back in the workload account,\nlet's log in to the Amazon ECR repository.",
    "start": "321284",
    "end": "324938"
  },
  {
    "text": "It's empty, so let's push the Docker\nimage into the repository.",
    "start": "328070",
    "end": "331057"
  },
  {
    "text": "Once the process is completed, let's check the latest version\nof the image in the Amazon ECR console.",
    "start": "333504",
    "end": "338318"
  },
  {
    "text": "The next step is to configure the ADOT collector using\na custom Pipeline that collects, modifies, and exports its data.",
    "start": "343350",
    "end": "349138"
  },
  {
    "text": "We're building the pipeline in the workload account,\nso first we'll capture the workspace ID and central monitoring account ID.",
    "start": "350663",
    "end": "356397"
  },
  {
    "text": "Now let's move into the\naws-otel-collector directory.",
    "start": "378000",
    "end": "381094"
  },
  {
    "text": "We'll create a basic YAML configuration file.",
    "start": "387388",
    "end": "389588"
  },
  {
    "text": "The configuration code defines how the data will flow:\nreceivers connect to the AMP metrics,",
    "start": "391612",
    "end": "396477"
  },
  {
    "text": "processors initiate the ADOT collector\nto capture environmental metrics,",
    "start": "396477",
    "end": "400233"
  },
  {
    "text": "and exporters send the data to\nthe endpoint, our AMP workspace.",
    "start": "400233",
    "end": "403664"
  },
  {
    "text": "Let’s edit the code to change the region.",
    "start": "405077",
    "end": "406770"
  },
  {
    "text": "Next, we'll build a Docker file within the ADOT collector\nto coordinate with this configuration.",
    "start": "410513",
    "end": "414834"
  },
  {
    "text": "We'll supply code that captures\nthe latest files from the collector.",
    "start": "416869",
    "end": "419589"
  },
  {
    "text": "We also need an Amazon ECR\nrepository for the collector.",
    "start": "423810",
    "end": "426850"
  },
  {
    "text": "Now we'll build a Docker image\nthat pushes our data into the repository.",
    "start": "427784",
    "end": "431051"
  },
  {
    "text": "Now we'll define an assume-role policy and attach permissions\nso the collector-to-Amazon ECR task can run.",
    "start": "438821",
    "end": "444355"
  },
  {
    "text": "Now we can create our Amazon ECS cluster.",
    "start": "447406",
    "end": "449700"
  },
  {
    "text": "First, we'll use Docker Compose to create a link between\nthe ADOT collector and application containers.",
    "start": "450313",
    "end": "455126"
  },
  {
    "text": "Let's supply the workload account ID\nand create the Docker Compose file.",
    "start": "456304",
    "end": "459745"
  },
  {
    "text": "Our code links both the ADOT collector and the AMP application\nto the Amazon ECR repository hosted by the workload account.",
    "start": "463858",
    "end": "470286"
  },
  {
    "text": "Let’s view our Amazon ECR infrastructure so far.",
    "start": "473372",
    "end": "475932"
  },
  {
    "text": "We have two repositories:\nthe custom ADOT collector and main application.",
    "start": "478438",
    "end": "482145"
  },
  {
    "text": "Next, we'll create an Amazon ECS cluster hosted on an\nAmazon Virtual Private Cloud (Amazon VPC) in the workload account.",
    "start": "484797",
    "end": "491492"
  },
  {
    "text": "We'll use the Amazon ECS CLI to natively integrate\nwith our Docker files and launch it with AWS Fargate,",
    "start": "492231",
    "end": "498422"
  },
  {
    "text": "a completely managed container environment.",
    "start": "498422",
    "end": "500486"
  },
  {
    "text": "Let's name the configuration\nand specify the region.",
    "start": "501231",
    "end": "503671"
  },
  {
    "text": "Using the \"ecs-cli up\" command,\nlet's create the cluster.",
    "start": "504934",
    "end": "508294"
  },
  {
    "text": "Let's view the cluster\nin the Amazon ECS console.",
    "start": "509458",
    "end": "511978"
  },
  {
    "text": "Now we'll apply two security groups to the VPC.",
    "start": "517952",
    "end": "520472"
  },
  {
    "text": "Next, let's compose a new YAML file to establish the network configuration\nand task size for when we run the Docker images on Amazon ECS.",
    "start": "524556",
    "end": "531864"
  },
  {
    "text": "Now let's add the two subnets built\nwhen we created the VPC.",
    "start": "534437",
    "end": "537331"
  },
  {
    "text": "We’ll also add the security groups.",
    "start": "553141",
    "end": "554768"
  },
  {
    "text": "Now that the cluster and the configuration\nare ready, we’ll deploy the services.",
    "start": "564799",
    "end": "568053"
  },
  {
    "text": "Let's compose the ECS CLI configuration.",
    "start": "568557",
    "end": "570957"
  },
  {
    "text": "We'll also set up an Amazon CloudWatch Log group.",
    "start": "576000",
    "end": "578387"
  },
  {
    "text": "We can check on the progress\nin our Amazon ECS console.",
    "start": "579704",
    "end": "582597"
  },
  {
    "text": "Amazon ECS is currently running\nthe task definition.",
    "start": "586147",
    "end": "588946"
  },
  {
    "text": "We can also see that the task has\nthe two container definitions we established:",
    "start": "594663",
    "end": "598429"
  },
  {
    "text": "the ADOT collector and the AMP application.",
    "start": "598429",
    "end": "600851"
  },
  {
    "text": "At this point, the workload account is actively\ncollecting and sending metrics to AMP.",
    "start": "602198",
    "end": "606199"
  },
  {
    "text": "We can monitor this activity\nin our CloudWatch Logs.",
    "start": "607491",
    "end": "610091"
  },
  {
    "text": "From these active log events, we can tell that the ADOT collector\nis sending metrics across the workload account",
    "start": "615405",
    "end": "620253"
  },
  {
    "text": "into the AMP workspace\non the central monitoring account.",
    "start": "620253",
    "end": "623054"
  },
  {
    "text": "We can verify our configuration and visualize\nthe metrics using Amazon Managed Grafana.",
    "start": "624156",
    "end": "628490"
  },
  {
    "text": "To do that, we'll first need\nto create a new workspace.",
    "start": "631026",
    "end": "633533"
  },
  {
    "text": "Let's go to the Amazon Managed Grafana\nconsole and create one.",
    "start": "634010",
    "end": "637104"
  },
  {
    "text": "We'll use AWS Single-Sign On (AWS SSO)\nfor authentication and create a user.",
    "start": "645280",
    "end": "650494"
  },
  {
    "text": "Let's supply our credentials.",
    "start": "651671",
    "end": "653018"
  },
  {
    "text": "We'll retain the service managed\npermission type and move on.",
    "start": "660680",
    "end": "663440"
  },
  {
    "text": "Our data source will be Amazon Managed Service\nfor Prometheus since that's where our metrics are stored.",
    "start": "665841",
    "end": "670469"
  },
  {
    "text": "Let's complete the workspace setup.",
    "start": "671734",
    "end": "673241"
  },
  {
    "text": "While the workspace is being created,\nlet's go to AWS SSO, where we can manage users.",
    "start": "678401",
    "end": "682935"
  },
  {
    "text": "This user will be allowed to use SSO\nto access our Grafana workspace.",
    "start": "687211",
    "end": "690972"
  },
  {
    "text": "Let’s return to Amazon Managed Grafana.",
    "start": "692087",
    "end": "694100"
  },
  {
    "text": "Our workspace is now active.",
    "start": "696670",
    "end": "698389"
  },
  {
    "text": "Let’s make our user account an admin so\nthey can add resources and create dashboards.",
    "start": "698797",
    "end": "702878"
  },
  {
    "text": "Now let's enter the workspace through its URL.",
    "start": "712345",
    "end": "714545"
  },
  {
    "text": "As a final step we'll configure AMP\nas a data source for Amazon Managed Grafana,",
    "start": "718851",
    "end": "723199"
  },
  {
    "text": "completing the metrics collection architecture.",
    "start": "723199",
    "end": "725199"
  },
  {
    "text": "We'll select the same region\nthat hosts all our other services.",
    "start": "727417",
    "end": "730151"
  },
  {
    "text": "Now let's go to the Explore page and see if our metrics in\nthe central account are flowing from the workload account.",
    "start": "735676",
    "end": "740250"
  },
  {
    "text": "From the options, we'll choose the AMP workspace.",
    "start": "741219",
    "end": "743579"
  },
  {
    "text": "Here we can see that several metrics\nlabels are already available.",
    "start": "746195",
    "end": "748915"
  },
  {
    "text": "Let's find and use an “up” metric\nfor our first query.",
    "start": "749509",
    "end": "752082"
  },
  {
    "text": "Our query results show that the application\nhas been running since 5:34 p.m.",
    "start": "754671",
    "end": "758592"
  },
  {
    "text": "Now let’s run a rate query\non the application itself.",
    "start": "759291",
    "end": "761758"
  },
  {
    "text": "Because it produced results and encountered no errors, we can see that\nour cross-account metrics collection architecture is working properly.",
    "start": "773389",
    "end": "779576"
  },
  {
    "text": "We can even query Amazon ECS metrics.",
    "start": "782213",
    "end": "784520"
  },
  {
    "text": "For example, let's measure the CPU\nutilized by the ECS tasks.",
    "start": "784824",
    "end": "788584"
  },
  {
    "text": "We can repeat this cross-account configuration\nfor multiple workload accounts",
    "start": "790731",
    "end": "794145"
  },
  {
    "text": "and send that data into the same\ncentral monitoring account.",
    "start": "794145",
    "end": "796846"
  },
  {
    "text": "You've just seen how you can use ADOT to send\ncross-account metrics on Amazon ECS.",
    "start": "798312",
    "end": "802499"
  },
  {
    "text": "You can learn more about this topic in the\ndescription and links for this video.",
    "start": "803604",
    "end": "806751"
  },
  {
    "text": "Thanks for watching.\nNow it's your turn to try.",
    "start": "807000",
    "end": "808880"
  }
]