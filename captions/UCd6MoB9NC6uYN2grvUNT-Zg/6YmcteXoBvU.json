[
  {
    "start": "0",
    "end": "67000"
  },
  {
    "text": "hi everybody wow this is just really",
    "start": "0",
    "end": "5819"
  },
  {
    "text": "cool seeing a room like this full of people want to learn about Postgres seeing seeing Postgres grow over the",
    "start": "5819",
    "end": "11580"
  },
  {
    "text": "years and decades and and now we were room full of people you are learning about Postgres so I'm uh I'm Jim well",
    "start": "11580",
    "end": "19140"
  },
  {
    "text": "Jen ski I am a database engineer principal database engineer at AWS and",
    "start": "19140",
    "end": "26880"
  },
  {
    "text": "part of the Aurora Postgres and RDS Postgres team and unfortunately we have",
    "start": "26880",
    "end": "35070"
  },
  {
    "text": "a a screen over here and we have a clicker that doesn't work but we'll uh",
    "start": "35070",
    "end": "40140"
  },
  {
    "text": "we'll go on so we're about halfway through reinvent now we're the middle",
    "start": "40140",
    "end": "45510"
  },
  {
    "text": "day of the middle of the day of the middle of the week and a lot of the Postgres sessions have have already",
    "start": "45510",
    "end": "52050"
  },
  {
    "text": "happened but there's still some more related sessions that are coming up throughout the week there's also a new",
    "start": "52050",
    "end": "57329"
  },
  {
    "text": "one that just recently launched about learning about RDS on vmware check that",
    "start": "57329",
    "end": "63420"
  },
  {
    "text": "out for a deep dive into that that's tomorrow but what is relational database",
    "start": "63420",
    "end": "69689"
  },
  {
    "start": "67000",
    "end": "67000"
  },
  {
    "text": "services or RDS two simple way to run your relational database in the cloud",
    "start": "69689",
    "end": "74780"
  },
  {
    "text": "it's available in six different engines cloud native of aurora and comes in two",
    "start": "74780",
    "end": "80549"
  },
  {
    "text": "flavors of my sequel and Postgres we also have the open source engines of my",
    "start": "80549",
    "end": "85799"
  },
  {
    "text": "sequel maria DB and Postgres which we're going to focus on today and the commercial engines of sequel server and",
    "start": "85799",
    "end": "91920"
  },
  {
    "text": "oracle when you want to run Postgres on AWS there's a few different",
    "start": "91920",
    "end": "97650"
  },
  {
    "text": "options you run that self managed on ec2 and put your data on EBS volumes you",
    "start": "97650",
    "end": "103890"
  },
  {
    "text": "could run it in a managed service either through RDS or Postgres or Aurora with Postgres compatibility and now the",
    "start": "103890",
    "end": "110880"
  },
  {
    "start": "110000",
    "end": "110000"
  },
  {
    "text": "clicker is working cool but when you're doing doing that you have a few different choices you might have post",
    "start": "110880",
    "end": "117600"
  },
  {
    "text": "quest being open source some people have really customized Postgres created building it with custom configuration",
    "start": "117600",
    "end": "123930"
  },
  {
    "text": "options and doing that when you when you have something like that you're going to have to run it in a self-managed environment and when you do that your",
    "start": "123930",
    "end": "130140"
  },
  {
    "text": "DBA is you're gonna have to take on more work of setting up the platform installing Postgres configuring high",
    "start": "130140",
    "end": "136000"
  },
  {
    "text": "availability and monitoring and whatnot and they don't have as much time to deal with application level problems when you",
    "start": "136000",
    "end": "142480"
  },
  {
    "text": "use it through a managed service your data your DBAs now have time to work on the business critical problems whether",
    "start": "142480",
    "end": "148810"
  },
  {
    "text": "it's doing schema design earlier on in the process so this way you have good schemas as you're building your",
    "start": "148810",
    "end": "154420"
  },
  {
    "text": "applications or doing query tuning RDS in a row or Postgres allow you to will",
    "start": "154420",
    "end": "160180"
  },
  {
    "text": "take care of the platform issues for you so RDS for Postgres closely follows",
    "start": "160180",
    "end": "166450"
  },
  {
    "start": "163000",
    "end": "163000"
  },
  {
    "text": "along the Postgres community's release cycle the Postgres community has yearly major releases they're released out in",
    "start": "166450",
    "end": "172420"
  },
  {
    "text": "the early fall you notice the major release numbering scheme has changed a",
    "start": "172420",
    "end": "178750"
  },
  {
    "text": "little bit it used to be at the dot release so 9.6 is a major release over 9.5 but starting in Postgres 10 it",
    "start": "178750",
    "end": "185379"
  },
  {
    "text": "started having the first number as the the major release so 10 and then the latest major releases post-course 11",
    "start": "185379",
    "end": "191890"
  },
  {
    "text": "which is available in the preview environment if you want to test with some of the new features and functionality in Postgres 11 and we'll",
    "start": "191890",
    "end": "198370"
  },
  {
    "text": "talk about some of that today also post course has quarterly patch and update",
    "start": "198370",
    "end": "204250"
  },
  {
    "text": "maintenance releases apply them quickly they're usually there for bug and",
    "start": "204250",
    "end": "209319"
  },
  {
    "text": "security fixes so Aurora is built from",
    "start": "209319",
    "end": "214389"
  },
  {
    "text": "the ground up leveraging AWS services it's really ed it gives you some",
    "start": "214389",
    "end": "219760"
  },
  {
    "text": "additional performance characteristics and it automatically scale your storage up to 64 terabytes you don't have to pre",
    "start": "219760",
    "end": "226030"
  },
  {
    "text": "allocate the storage it'll scale it with you and it gives you additional durability and high availability options",
    "start": "226030",
    "end": "232359"
  },
  {
    "text": "and speaking of high availability how do you set it up Postgres with highly high availability",
    "start": "232359",
    "end": "238030"
  },
  {
    "text": "the first thing you do is backups even if you have automatic failover or replication or anything else any",
    "start": "238030",
    "end": "245500"
  },
  {
    "text": "database you need backups any database you care about you should be taking backups that includes your your development and and you're testing",
    "start": "245500",
    "end": "251980"
  },
  {
    "text": "instances you may want to be able to roll up back from a change having those",
    "start": "251980",
    "end": "257109"
  },
  {
    "text": "backups will help with RDS you have the ability to just click in and setup daily",
    "start": "257109",
    "end": "264190"
  },
  {
    "text": "backups you know your backups will run during your backup window and it will take every five",
    "start": "264190",
    "end": "270550"
  },
  {
    "text": "minutes take a snapshot of your your transaction logs and be able to save that off so this way you don't lose any",
    "start": "270550",
    "end": "276069"
  },
  {
    "text": "data in the event that you need to restore from backups when you're setting it up for production by default RDS is",
    "start": "276069",
    "end": "283690"
  },
  {
    "text": "give you a seven day retention set that up for more like three weeks you could have it up to 35 days",
    "start": "283690",
    "end": "290590"
  },
  {
    "text": "retention it's not uncommon that you want to be able to go back and look at a backup from a couple weeks ago to help diagnose a problem you're experiencing",
    "start": "290590",
    "end": "297280"
  },
  {
    "text": "today so if you have those backups you can go back and look in time but when",
    "start": "297280",
    "end": "303099"
  },
  {
    "text": "you're talking about backups the most common reason you're going to restore from backup is not because of some",
    "start": "303099",
    "end": "308770"
  },
  {
    "text": "catastrophic failure on your database server it's because of human error somebody accidentally dropped the table",
    "start": "308770",
    "end": "314470"
  },
  {
    "text": "truncated a table had there was a bug in a date and maintenance script that you need to go back and fix some of the data",
    "start": "314470",
    "end": "321430"
  },
  {
    "text": "with point-in-time restore you can restore your database to the instant before that event happened and you don't",
    "start": "321430",
    "end": "328509"
  },
  {
    "text": "have to restore it back to that main database you could store to another instance and it doesn't have to be the same instance size a lot of times if you",
    "start": "328509",
    "end": "335380"
  },
  {
    "text": "want to get back that drop table you want a temporary or loose story there's no reason to restore it to the same",
    "start": "335380",
    "end": "340630"
  },
  {
    "text": "instance type that you had it in production it could be smaller with a smaller amount of i/o ops in order to get that table back and load it back",
    "start": "340630",
    "end": "346630"
  },
  {
    "text": "into production but for any production server you want to set up automatic",
    "start": "346630",
    "end": "351819"
  },
  {
    "text": "failover and with that you'd set up multi AZ with multi AZ your",
    "start": "351819",
    "end": "357340"
  },
  {
    "text": "synchronously gonna replicate your data out to a second availability zone and in an inventive ating sort of failure RDS",
    "start": "357340",
    "end": "363940"
  },
  {
    "text": "will automatically promote that standby and redirect your DNS entries so this",
    "start": "363940",
    "end": "369130"
  },
  {
    "text": "way your application will reconnect to that and you'll be serving your customers again but with a highly",
    "start": "369130",
    "end": "375580"
  },
  {
    "text": "available database you need to secure it and for anything with security you start with communication to the database you",
    "start": "375580",
    "end": "382090"
  },
  {
    "start": "378000",
    "end": "378000"
  },
  {
    "text": "want to have encrypted communication to that database the same way you do to your web servers you want to use SSL",
    "start": "382090",
    "end": "388979"
  },
  {
    "text": "even if you're running everything in a protected VPC a lot of times DBAs may",
    "start": "388979",
    "end": "394839"
  },
  {
    "text": "connect from their laptops and other things you want to ensure that everything is encrypted across the entire path to your database",
    "start": "394839",
    "end": "401379"
  },
  {
    "text": "server wenyan to create a new RDS instance there's an SSL certificate on there that",
    "start": "401379",
    "end": "407620"
  },
  {
    "text": "you're able to leverage but it's optional it is their optional but you what I recommend is turn it on all the",
    "start": "407620",
    "end": "415629"
  },
  {
    "text": "time and you set the parameter force s SL you won't even want to do this on your development servers because a lot",
    "start": "415629",
    "end": "421539"
  },
  {
    "text": "of times you'll take data from production roll that back into your development servers and it just wastes encrypted all along but with encryption",
    "start": "421539",
    "end": "429220"
  },
  {
    "text": "over the network with SSL it is a two-way a a two-way communication",
    "start": "429220",
    "end": "434349"
  },
  {
    "text": "between the client and the server so the client also has influence over that it'll request a type of connection that",
    "start": "434349",
    "end": "441250"
  },
  {
    "text": "is going to have so with Postgres with",
    "start": "441250",
    "end": "446800"
  },
  {
    "text": "Postgres how the client requests the type of SSL connection it's by setting",
    "start": "446800",
    "end": "452080"
  },
  {
    "start": "447000",
    "end": "447000"
  },
  {
    "text": "the SSL mode parameter in your connection string there's six different options there two of them disable and",
    "start": "452080",
    "end": "459759"
  },
  {
    "text": "allow never use when you do it when it's set like that you're probably going to be sending things over clear text the",
    "start": "459759",
    "end": "467139"
  },
  {
    "text": "default is preferred when it's set if we prefer if SSL is enabled on the server",
    "start": "467139",
    "end": "472810"
  },
  {
    "text": "the clients going to use an SSL connection so by default with RDS having",
    "start": "472810",
    "end": "478659"
  },
  {
    "text": "SSL enabled on the server and set default client and having it for prefer",
    "start": "478659",
    "end": "483909"
  },
  {
    "text": "your by default you're gonna have SSL connections but really what you want to do is set it to require just in case",
    "start": "483909",
    "end": "490539"
  },
  {
    "text": "somebody disables SSL on the server you want to have that client also saying I'm",
    "start": "490539",
    "end": "495729"
  },
  {
    "text": "only going to talk to you if your network is encrypted so this will guard",
    "start": "495729",
    "end": "501009"
  },
  {
    "text": "against disabling that SSL on that server but you might have higher requirements from the security",
    "start": "501009",
    "end": "506229"
  },
  {
    "text": "perspective where you could set it to see verify CA what that'll do is verify that that certificate coming back from",
    "start": "506229",
    "end": "513190"
  },
  {
    "text": "the server is from a known certificate authority this will essentially verify",
    "start": "513190",
    "end": "518260"
  },
  {
    "text": "that you're connecting to an RDS server prevent somebody putting a some another",
    "start": "518260",
    "end": "523930"
  },
  {
    "text": "Postgres instance in between or something else that's responding on the default port it will ensure that it's",
    "start": "523930",
    "end": "529120"
  },
  {
    "text": "coming back the right way but you may have even more stringent requirements you want to",
    "start": "529120",
    "end": "534190"
  },
  {
    "text": "verify the hostname as well and setting it to verify full will verify the hostname be careful with that if you",
    "start": "534190",
    "end": "540970"
  },
  {
    "text": "have things where you want to set spin up multiple read replicas and you want to load balance across them order you're",
    "start": "540970",
    "end": "546010"
  },
  {
    "text": "setting a DNS entry for convenience it'll verify that the the hostname over",
    "start": "546010",
    "end": "551950"
  },
  {
    "text": "the hostname given to you by RDS when you create that database so if you create different DNS entries on top of",
    "start": "551950",
    "end": "557890"
  },
  {
    "text": "that these connections will fail but",
    "start": "557890",
    "end": "562990"
  },
  {
    "text": "when you have a secure communication now you want to authenticate and connect to the database Postgres by default uses md5 with a salt",
    "start": "562990",
    "end": "570670"
  },
  {
    "text": "for authentication to connect to authenticate against database users you'll create your user and give it some",
    "start": "570670",
    "end": "577030"
  },
  {
    "text": "sort of strong password you could have a valid until if you'd like and that works",
    "start": "577030",
    "end": "582310"
  },
  {
    "text": "really well for a lot of people in a lot of cases that's enough security for them but some people have more stringent",
    "start": "582310",
    "end": "588220"
  },
  {
    "text": "requirements some people have five or ten thousand Postgres databases and they need to centrally manage their users in",
    "start": "588220",
    "end": "595000"
  },
  {
    "text": "the event that a user leaves the company you want to be able to disable access for everybody for that user for all the",
    "start": "595000",
    "end": "601720"
  },
  {
    "text": "databases you also may have more complex password requirements in order to",
    "start": "601720",
    "end": "607510"
  },
  {
    "text": "accomplish this we you have the ability to authenticate with Identity and Access Management you could just enable it for",
    "start": "607510",
    "end": "613840"
  },
  {
    "text": "your RDS and Aurora post quest databases there we go",
    "start": "613840",
    "end": "620110"
  },
  {
    "text": "and when you do this you're you're authenticating against I am and from I",
    "start": "620110",
    "end": "626380"
  },
  {
    "text": "am you're getting a token that lives for 15 minutes and using that token in order to be able to connect to Postgres so",
    "start": "626380",
    "end": "633100"
  },
  {
    "text": "this way you're never authenticating directly against Postgres it's leveraging I am for that authentication",
    "start": "633100",
    "end": "638170"
  },
  {
    "text": "and post-course will go out and verify that against I am that you have a valid token and you can configure that so you",
    "start": "638170",
    "end": "648790"
  },
  {
    "text": "now have a new role inside of your Postgres databases as you update to the latest versions RDS I am so if you have",
    "start": "648790",
    "end": "657370"
  },
  {
    "text": "existing users that you now want to enable I am authentication you just grant that role to that existing user",
    "start": "657370",
    "end": "664470"
  },
  {
    "text": "you also have the ability to create new users and also grant that role and a notice on that create user",
    "start": "664470",
    "end": "671350"
  },
  {
    "text": "command we're not setting a password because Postgres isn't using that password you're authenticating against I",
    "start": "671350",
    "end": "676930"
  },
  {
    "text": "am NOT against Postgres Postgres is trusting I am to say that that user is valid so you have to create a user",
    "start": "676930",
    "end": "685870"
  },
  {
    "start": "684000",
    "end": "684000"
  },
  {
    "text": "account within iam when you're doing that set it as the same name as the",
    "start": "685870",
    "end": "691480"
  },
  {
    "text": "database user it just simplifies management and administration of that if you have different names trying to",
    "start": "691480",
    "end": "697329"
  },
  {
    "text": "associate them could get tedious having them the same name makes it simpler also",
    "start": "697329",
    "end": "702790"
  },
  {
    "text": "that user needs programmatic access in order to be able to generate a token",
    "start": "702790",
    "end": "708959"
  },
  {
    "text": "once you have that user you need to give it and granted a policy for RDS DB connect once in that policy you have to",
    "start": "709589",
    "end": "717819"
  },
  {
    "text": "give it a little bit of information what region is this database in what's the",
    "start": "717819",
    "end": "723579"
  },
  {
    "text": "account that that database is in most importantly what's the database ID here",
    "start": "723579",
    "end": "729129"
  },
  {
    "text": "you could give it a specific database ID but give it the wildcard star because if",
    "start": "729129",
    "end": "734290"
  },
  {
    "text": "you spin up a read replica off of that master or if you try to restore a database you'd have to change your",
    "start": "734290",
    "end": "739990"
  },
  {
    "text": "policy in order to login to that restored database or that read replica by giving it the wild card you restrict",
    "start": "739990",
    "end": "746290"
  },
  {
    "text": "it down to the databases within a region for a given account and then finally you",
    "start": "746290",
    "end": "752319"
  },
  {
    "text": "have to give it the database user you're connecting to this is the association between odd the I am user and the",
    "start": "752319",
    "end": "758679"
  },
  {
    "text": "database user again keeping everything all the same just simplifies things then",
    "start": "758679",
    "end": "764740"
  },
  {
    "start": "764000",
    "end": "764000"
  },
  {
    "text": "when you connect you need to generate that token whether or not you're connecting with post quests via the",
    "start": "764740",
    "end": "770019"
  },
  {
    "text": "command line that we're going to see here or you're using one of the GUI tools like PG admin that's hokum is",
    "start": "770019",
    "end": "775959"
  },
  {
    "text": "essentially used as a password with Postgres on the command line you have the number of different environment",
    "start": "775959",
    "end": "781959"
  },
  {
    "text": "variables like PG passwords so if you set the results of the the generate DB",
    "start": "781959",
    "end": "787120"
  },
  {
    "text": "auth token command as the PG password you can now use that and this is what",
    "start": "787120",
    "end": "792249"
  },
  {
    "text": "what that token looks like if you were connecting with the GUI tools you would copy and paste that token in order to",
    "start": "792249",
    "end": "798189"
  },
  {
    "text": "connect but with on the command line you don't have that because you're set you said it",
    "start": "798189",
    "end": "803610"
  },
  {
    "text": "via the environment variable but it does require SSL there we go so once you're",
    "start": "803610",
    "end": "811379"
  },
  {
    "text": "connected you need to authorize different objects within there you know you you have the same ability that you",
    "start": "811379",
    "end": "817949"
  },
  {
    "text": "do in other databases of locking down individual objects Postgres allows you to grant and voc privileges on",
    "start": "817949",
    "end": "823860"
  },
  {
    "text": "individual objects to different users and roles so you could revoke update privileges to your bi user you could",
    "start": "823860",
    "end": "831269"
  },
  {
    "text": "also go more fine-grained at the column level so you could revoke select privileges from everybody for a",
    "start": "831269",
    "end": "838110"
  },
  {
    "text": "sensitive column like Social Security number Postgres also has row-level security so you can create policies on",
    "start": "838110",
    "end": "845550"
  },
  {
    "text": "something like a sales table so a Sales Manager could only see the rows that it",
    "start": "845550",
    "end": "850740"
  },
  {
    "text": "could he or she is allowed to see through your given through your policy",
    "start": "850740",
    "end": "856369"
  },
  {
    "text": "so once you have your database it variably it's gonna scale your databases are gonna get bigger they're collecting",
    "start": "856369",
    "end": "862679"
  },
  {
    "text": "more and more data so you have a number of different instance sizes for RDS that",
    "start": "862679",
    "end": "869129"
  },
  {
    "start": "864000",
    "end": "864000"
  },
  {
    "text": "you could use everything from small a small T to one v of virtual CPU up to a 96 virtual CPU m5 instance you could",
    "start": "869129",
    "end": "878790"
  },
  {
    "text": "also scale your storage up to the night you can now scale your storage and RDS up to 32 terabytes and have 40,000",
    "start": "878790",
    "end": "887939"
  },
  {
    "text": "provisioned a UPS but with any given instance you want to take the best",
    "start": "887939",
    "end": "893819"
  },
  {
    "text": "advantage of the resources that are in there and a not uncommon scenario and a lot of schemas you have one or two",
    "start": "893819",
    "end": "899910"
  },
  {
    "text": "really large tables and a lot of other small ones and within that it's also not",
    "start": "899910",
    "end": "906179"
  },
  {
    "text": "uncommon that you have a small set of hot data and a lot of historical data maybe it's a sales table that you're",
    "start": "906179",
    "end": "912689"
  },
  {
    "text": "always dealing with the most recent sales orders and last years and two years ago sales orders you only do on",
    "start": "912689",
    "end": "918509"
  },
  {
    "text": "yearly reports or those sorts of scenario is primary prime example of a",
    "start": "918509",
    "end": "925079"
  },
  {
    "text": "for something that's a good candidate for partitioning what partitioning is is",
    "start": "925079",
    "end": "930269"
  },
  {
    "text": "taking one big large tables let that up into multiple small chunks and making that appear is one large table",
    "start": "930269",
    "end": "937710"
  },
  {
    "text": "out to the application server this gives you a couple advantages one in performance when you're running your",
    "start": "937710",
    "end": "944460"
  },
  {
    "text": "queries Postgres is able to prune away large amounts of that table even without accessing it and also around maintenance",
    "start": "944460",
    "end": "951390"
  },
  {
    "text": "if you need to perform maintenance operations on the partitions it's a lot smaller chunks and that's not something",
    "start": "951390",
    "end": "958620"
  },
  {
    "text": "new that's been in Postgres Postgres is a table partitioning for 15 years it's",
    "start": "958620",
    "end": "964220"
  },
  {
    "text": "but how it's been done is it used to be done you via a innovative technology",
    "start": "964220",
    "end": "969660"
  },
  {
    "text": "called table inheritance Postgres has had table inheritance that allows you to create child tables on underneath those",
    "start": "969660",
    "end": "976950"
  },
  {
    "text": "parent tables and you restrict access to the individual partitions or child tables based on constraints and then",
    "start": "976950",
    "end": "984090"
  },
  {
    "text": "Postgres would use those constraints to prune away the partitions but because people you would use table inheritance",
    "start": "984090",
    "end": "990750"
  },
  {
    "text": "for other things other than just table partitioning Postgres didn't have the ability to know how to route the data",
    "start": "990750",
    "end": "996150"
  },
  {
    "text": "into there so before Postgres 10 you had to create triggers in order to route that in there it's I like writing code",
    "start": "996150",
    "end": "1003650"
  },
  {
    "text": "and all but writing partitioning triggers is not always a fun thing to do it's just overhead of doing that and",
    "start": "1003650",
    "end": "1009800"
  },
  {
    "text": "you're adding overhead of just writing a trigger in the first place starting in Postgres 10 we now have partitioning",
    "start": "1009800",
    "end": "1016790"
  },
  {
    "start": "1014000",
    "end": "1014000"
  },
  {
    "text": "syntax and what this allows us to do is create actual partitions on there we're giving postgrads more metadata about",
    "start": "1016790",
    "end": "1023480"
  },
  {
    "text": "what we're trying to do with that table as opposed to just straight table inheritance we could have a lot of other",
    "start": "1023480",
    "end": "1028790"
  },
  {
    "text": "uses here most grass now knows we want to use it for table partitioning but",
    "start": "1028790",
    "end": "1034339"
  },
  {
    "text": "like any large feature in Postgres it really is something that evolves over",
    "start": "1034339",
    "end": "1040640"
  },
  {
    "text": "time with yearly release cycles Postgres iterates on large features like this",
    "start": "1040640",
    "end": "1046130"
  },
  {
    "text": "over and over again so in Postgres 10 if you wanted to create an index on the parent table you would get an error",
    "start": "1046130",
    "end": "1052130"
  },
  {
    "text": "you'd have to create it on all the individuals tables partitions themselves",
    "start": "1052130",
    "end": "1057250"
  },
  {
    "text": "but in Postgres 10 we did get that partitioning syntax for range and list partitioning and the big thing is the",
    "start": "1057250",
    "end": "1063830"
  },
  {
    "text": "triggers are no longer needed giving us a big formants gain on our data loads and what",
    "start": "1063830",
    "end": "1069440"
  },
  {
    "text": "those performance impact are is so if we had that orders table that we've been looking at we wanted a load in seven and",
    "start": "1069440",
    "end": "1076610"
  },
  {
    "text": "a half million rows which is about a gig of data with the old version with table inherence with triggers that would take",
    "start": "1076610",
    "end": "1083000"
  },
  {
    "text": "about eight minutes to load with the new partitioning syntax that now that same",
    "start": "1083000",
    "end": "1088400"
  },
  {
    "text": "amount of data loads in about 40 seconds but more than a 10x performance gain",
    "start": "1088400",
    "end": "1093800"
  },
  {
    "text": "giving us performance very close to loading data as if there were no partitioning at all on that table",
    "start": "1093800",
    "end": "1100300"
  },
  {
    "text": "but Postgres does continue to evolve in Postgres 11 again which is available in the preview environment you can now do",
    "start": "1100300",
    "end": "1106910"
  },
  {
    "text": "things like create and creating indexes on the parent table and that will push down the indexes on to the individual",
    "start": "1106910",
    "end": "1112970"
  },
  {
    "text": "partitions you could also now create primary keys and foreign keys which you couldn't do before also has the ability",
    "start": "1112970",
    "end": "1120560"
  },
  {
    "text": "to move data via updates so if you update a a column that's the partitioning key which would force that",
    "start": "1120560",
    "end": "1126170"
  },
  {
    "text": "road to move to a different partition Postgres will now move that to the different partition you also have the",
    "start": "1126170",
    "end": "1132380"
  },
  {
    "text": "far default partitioning so this way if you have data coming in with say a date you weren't expecting say january 1st",
    "start": "1132380",
    "end": "1139280"
  },
  {
    "text": "1970 and there's no partition for that that row would be pushed into that default partition the biggest advance is",
    "start": "1139280",
    "end": "1146720"
  },
  {
    "text": "really partition elimination at execution time before Postgres 11",
    "start": "1146720",
    "end": "1151850"
  },
  {
    "text": "Postgres would only prune away those partitions at optimizer time so you'd",
    "start": "1151850",
    "end": "1157670"
  },
  {
    "text": "have to have something in your where clause to tell Postgres eliminate all those other partitions but that's not",
    "start": "1157670",
    "end": "1164030"
  },
  {
    "text": "how people write code people write code by joining two other tables and me you want to be able to partition prune via",
    "start": "1164030",
    "end": "1171410"
  },
  {
    "text": "that joint so here's an example of just summing up all the sales orders for the",
    "start": "1171410",
    "end": "1178370"
  },
  {
    "text": "the mondays in q2 of 1992 right we know you know if we wanted to get that with",
    "start": "1178370",
    "end": "1185150"
  },
  {
    "text": "monthly partition we really only need to access three partitions but Postgres can't interpret that by just looking at",
    "start": "1185150",
    "end": "1191180"
  },
  {
    "text": "the sequel it's really getting that back from that dates table so with Postgres",
    "start": "1191180",
    "end": "1196520"
  },
  {
    "text": "11 now it could do it as part two and pruning at execution time that's a",
    "start": "1196520",
    "end": "1202100"
  },
  {
    "text": "35% performance improvement by being able to prune that at execution time and that gives us a huge benefit over what",
    "start": "1202100",
    "end": "1209600"
  },
  {
    "text": "Postgres nine six was which was a 74% improvement over the old way of doing",
    "start": "1209600",
    "end": "1214970"
  },
  {
    "text": "table inheritance with that I'm going to turn it over to Jeremy is fun all kinds",
    "start": "1214970",
    "end": "1227929"
  },
  {
    "text": "of stuff to talk about with Postgres push hard and I hope you still have lots",
    "start": "1227929",
    "end": "1235700"
  },
  {
    "text": "of room in your brain I'm gonna use the rest of the time that I have today to talk about two more topics that I think",
    "start": "1235700",
    "end": "1241369"
  },
  {
    "text": "are important to cover this year reinvent related to Postgres and the first one is having maintaining multiple",
    "start": "1241369",
    "end": "1249590"
  },
  {
    "text": "copies of our data we're all doing this right in fact I've put an example of one",
    "start": "1249590",
    "end": "1256340"
  },
  {
    "text": "of the reasons on the screen to your left right high availability that's one",
    "start": "1256340",
    "end": "1263029"
  },
  {
    "text": "reason another reason might be you want to squeeze that downtime window as small as possible while you're doing a major",
    "start": "1263029",
    "end": "1269090"
  },
  {
    "text": "upgrade or maybe you're moving from one platform to another right maintain those multiple copies you might need access to",
    "start": "1269090",
    "end": "1276080"
  },
  {
    "text": "more compute capacity than you can get from the biggest single server available another thing might be that you have a",
    "start": "1276080",
    "end": "1282830"
  },
  {
    "text": "geographically distributed application you want to move your data and your apps as close to your end users as possible",
    "start": "1282830",
    "end": "1289190"
  },
  {
    "text": "all over the world these are all some of the different reasons that we want to do replication maintain multiple copies of our data and Postgres as we've been",
    "start": "1289190",
    "end": "1297559"
  },
  {
    "text": "talking about this isn't a new database we've been around for a couple of decades the database has and replication",
    "start": "1297559",
    "end": "1303349"
  },
  {
    "text": "is nothing new the first production replication solutions for Postgres were over a decade ago now an RDS Postgres we",
    "start": "1303349",
    "end": "1313070"
  },
  {
    "text": "have eight patterns for replication that are really common and I want to run",
    "start": "1313070",
    "end": "1318109"
  },
  {
    "text": "through all eight of these real quickly and the first category is what I'll call sort of sequel base but really it's",
    "start": "1318109",
    "end": "1324649"
  },
  {
    "text": "there's ways you can do replication where you don't need anything special from the database outside of the sequel",
    "start": "1324649",
    "end": "1329720"
  },
  {
    "text": "standard first of all you can manage it entire yourself outside of the database or",
    "start": "1329720",
    "end": "1335140"
  },
  {
    "text": "secondly there are replication solutions that are based on triggers this is the",
    "start": "1335140",
    "end": "1341360"
  },
  {
    "text": "oldest way of doing replication in Postgres this is what's been around the longest and you might be tempted to",
    "start": "1341360",
    "end": "1347720"
  },
  {
    "text": "think because it's been around for so long maybe it's getting obsolete but that's not the case in fact I've talked to people just this past year where in",
    "start": "1347720",
    "end": "1354500"
  },
  {
    "text": "spite of the complexity and the cost and it made sense for them to manage it themselves or another thing to think",
    "start": "1354500",
    "end": "1360470"
  },
  {
    "text": "about you could have a Postgres database in one of your data centers that you haven't touched for like ten years you could still use a trigger based",
    "start": "1360470",
    "end": "1366890"
  },
  {
    "text": "solution on that database to move that data pretty much anywhere you wanted to however there are still some drawbacks",
    "start": "1366890",
    "end": "1373309"
  },
  {
    "text": "to the to these approaches if you want to manage it yourself there is there's a lot of complexity there there's a lot of",
    "start": "1373309",
    "end": "1380059"
  },
  {
    "text": "corner cases and it's your responsibility to cover all of this you also have to own the maintenance of that so that's that's hard that's expensive",
    "start": "1380059",
    "end": "1387669"
  },
  {
    "text": "trigger based solutions these have been around for a long time and they're very well understood it's also pretty widely",
    "start": "1387669",
    "end": "1394429"
  },
  {
    "text": "acknowledged that they increase the right IO load on your source database and there's also a noticeable CPU",
    "start": "1394429",
    "end": "1401090"
  },
  {
    "text": "overhead that you get so the thing the thing with these drawbacks is the",
    "start": "1401090",
    "end": "1407510"
  },
  {
    "text": "clicker will go for me is that you can't really solve these problems by just",
    "start": "1407510",
    "end": "1412850"
  },
  {
    "text": "tuning some parameters right they're inherent to the approach if you if you",
    "start": "1412850",
    "end": "1417919"
  },
  {
    "text": "want to solve this problem of having all of this inefficiency and you don't want to have all the complexity of managing",
    "start": "1417919",
    "end": "1423440"
  },
  {
    "text": "it yourself we need to take a different approach to replication and that brings",
    "start": "1423440",
    "end": "1428780"
  },
  {
    "text": "us to this a whole different approach which Postgres again brought in still",
    "start": "1428780",
    "end": "1434390"
  },
  {
    "text": "around a decade ago now which is physical replication now if you're not familiar with the concept in a nutshell",
    "start": "1434390",
    "end": "1440780"
  },
  {
    "start": "1437000",
    "end": "1437000"
  },
  {
    "text": "what physical replication means is that at the end of the day your your replica your copy kind of looks almost like what",
    "start": "1440780",
    "end": "1447799"
  },
  {
    "text": "you would get if you just copied the files from one server to another and this is not the way sequel based replication works you can have the same",
    "start": "1447799",
    "end": "1455690"
  },
  {
    "text": "schema you can have the same rows the same data you could even run the same sequel statements in the same order on",
    "start": "1455690",
    "end": "1461990"
  },
  {
    "text": "to databases but if you open up your files in a hex editor what you're going to find is they they don't look the same for example the",
    "start": "1461990",
    "end": "1468750"
  },
  {
    "text": "transaction identifier z' and the data structures that are underneath your tables those are going to be different in fact I have to sort of take a short",
    "start": "1468750",
    "end": "1476160"
  },
  {
    "text": "tangent here and point something out that you can see this for yourself and if you're on Postgres 10-5 inside of RDS",
    "start": "1476160",
    "end": "1483750"
  },
  {
    "text": "in fact this screenshot here this is an actual screen shot from a hex editor that you could use to open up your",
    "start": "1483750",
    "end": "1489420"
  },
  {
    "text": "Postgres data files from RDS and take a look at the byte level what's going on there the color coding in this hex",
    "start": "1489420",
    "end": "1495540"
  },
  {
    "text": "editor is taking each individual byte and its mapping that byte back to the data structure in the source code of",
    "start": "1495540",
    "end": "1502140"
  },
  {
    "text": "Postgres that you can download from the internet it's a level of transparency that's absolutely amazing I'm really",
    "start": "1502140",
    "end": "1508380"
  },
  {
    "text": "excited that we're able to give that capability in addition you can also use sequel there's an example at the top to",
    "start": "1508380",
    "end": "1513870"
  },
  {
    "text": "query against the data structures that are underneath your tables right and",
    "start": "1513870",
    "end": "1522060"
  },
  {
    "text": "coming back to our two Postgres and replication coming back to Postgres and",
    "start": "1522060",
    "end": "1528810"
  },
  {
    "text": "replication the the physical area so physical replication yes let me let me just move on to the next slide we have",
    "start": "1528810",
    "end": "1534960"
  },
  {
    "text": "basically two patterns for physical replication and RDS multi a-z we introduced earlier so multi",
    "start": "1534960",
    "end": "1540930"
  },
  {
    "text": "AC is the checkbox that you hit and the great thing about multi a-z is that you don't have to worry about tracking the",
    "start": "1540930",
    "end": "1546450"
  },
  {
    "text": "state of your cluster you don't have to manage the endpoints and you don't have to try to make sure that you configure",
    "start": "1546450",
    "end": "1551700"
  },
  {
    "text": "your database so that it's impossible to lose any data we've done all of that heavy lifting for you and made sure that",
    "start": "1551700",
    "end": "1558150"
  },
  {
    "text": "it's set up properly so the only thing that you have to do is check the box that's the reason that we do recommend to pretty much all of our customers for",
    "start": "1558150",
    "end": "1564510"
  },
  {
    "text": "your production systems to use multi a-z in the second pattern for doing physical",
    "start": "1564510",
    "end": "1570180"
  },
  {
    "text": "replication and RDS oh and I want to be careful here so on my sequel RDS the",
    "start": "1570180",
    "end": "1577470"
  },
  {
    "text": "read replicas are not physical replicas those are those are more like their logical replicas they're more like what",
    "start": "1577470",
    "end": "1583380"
  },
  {
    "text": "else describing earlier but and we're here for Postgres in an RDS Postgres read replicas are in fact physical",
    "start": "1583380",
    "end": "1589980"
  },
  {
    "text": "replicas so we benefit from the the efficiencies of just moving the log records across so where as multi a-z is",
    "start": "1589980",
    "end": "1597600"
  },
  {
    "text": "designed to give you higher availability read replicas have a different goal read replicas are designed to allow you to",
    "start": "1597600",
    "end": "1603930"
  },
  {
    "text": "run queries against your replica even if that replica is on the other side of the planet and a completely different region",
    "start": "1603930",
    "end": "1609630"
  },
  {
    "text": "you can run your queries there there are still some drawbacks with physical replication though maybe you guessed I",
    "start": "1609630",
    "end": "1616140"
  },
  {
    "text": "was going to go there first of all you can't just replicate when you're doing this kind of a model you can't pick one table out or just part of your database",
    "start": "1616140",
    "end": "1622890"
  },
  {
    "text": "and replicate that another thing is that you can't go across different different major versions of Postgres another thing",
    "start": "1622890",
    "end": "1629430"
  },
  {
    "text": "is that you can't you know in your replica your copy you can't make another table that you start doing rights on",
    "start": "1629430",
    "end": "1635850"
  },
  {
    "text": "that table it's it's pretty much read-only so we've solved the inefficiency problem that we had with",
    "start": "1635850",
    "end": "1643230"
  },
  {
    "text": "sequel based replication we don't have all that additional IO and CPU overhead but we've lost all the flexibility that",
    "start": "1643230",
    "end": "1649290"
  },
  {
    "text": "we had and this brings us now to Postgres his answer to that which is to",
    "start": "1649290",
    "end": "1656940"
  },
  {
    "text": "build a a replication solution that can meet all of these needs now I'm gonna",
    "start": "1656940",
    "end": "1662580"
  },
  {
    "text": "start from the bottom and I want to kind of step through how this thing is built because I think there's some really",
    "start": "1662580",
    "end": "1668250"
  },
  {
    "text": "important lessons to learn as we look at this remember that one of the first",
    "start": "1668250",
    "end": "1674370"
  },
  {
    "start": "1673000",
    "end": "1673000"
  },
  {
    "text": "problems we were trying to solve was was a write amplification problem really that with triggers when I flipped that",
    "start": "1674370",
    "end": "1681750"
  },
  {
    "text": "switch to turn on replication now every time I make a change to the database instead of one right I have to do two",
    "start": "1681750",
    "end": "1687750"
  },
  {
    "text": "writes because I have to I have to make my change and then I have to write keep track of that change over in some other",
    "start": "1687750",
    "end": "1693990"
  },
  {
    "text": "place for the replication stuff there's a simple solution to that and it's it's used it's used in a lot of databases",
    "start": "1693990",
    "end": "1699990"
  },
  {
    "text": "every modern database is has a log and that log it could be called a redo log",
    "start": "1699990",
    "end": "1705690"
  },
  {
    "text": "it might be we call it a right ahead log or we say wall for short and that log",
    "start": "1705690",
    "end": "1711300"
  },
  {
    "text": "every change in the database just goes into this log well the simple solution for that double write problem is that we",
    "start": "1711300",
    "end": "1717780"
  },
  {
    "text": "take advantage of the log we already have all the changes in this log if we can just start reading that log back and",
    "start": "1717780",
    "end": "1723090"
  },
  {
    "text": "using that then we don't need the second set of rights for replication and that's exactly what Postgres did the very first",
    "start": "1723090",
    "end": "1729600"
  },
  {
    "text": "earliest physical replication solutions for Postgres 10 years ago we just copied those logs over",
    "start": "1729600",
    "end": "1735850"
  },
  {
    "text": "to another server we replay those logs on the second server and bingo we've got a physical replica but there's a problem",
    "start": "1735850",
    "end": "1741970"
  },
  {
    "text": "here the problem is that I have to wait for the file to get filled up before I can copy it across so my my copy might",
    "start": "1741970",
    "end": "1749770"
  },
  {
    "text": "be five minutes behind it might be it could be up to like third depends how you configure it so to solve that",
    "start": "1749770",
    "end": "1755140"
  },
  {
    "text": "problem Postgres introduced something called streaming replication and the key thing here is this new process called a",
    "start": "1755140",
    "end": "1763210"
  },
  {
    "text": "wall sender it's a process that runs on your database server and what this process does is that he instead of",
    "start": "1763210",
    "end": "1770500"
  },
  {
    "text": "waiting to fill up the file before you copy that file to your second server this process can as soon as possible",
    "start": "1770500",
    "end": "1777610"
  },
  {
    "text": "send those bytes over the network to your replicas and this works beautifully with streaming replication and Postgres",
    "start": "1777610",
    "end": "1784630"
  },
  {
    "text": "even on old versions of Postgres your replica your physical replica instead of being a matter of minutes behind it's",
    "start": "1784630",
    "end": "1790600"
  },
  {
    "text": "now seconds if not milliseconds behind the master but there's still another problem because what if I have to",
    "start": "1790600",
    "end": "1797560"
  },
  {
    "text": "for some reason shut down my replica for a while I have to do some maintenance or there's a problem and while it's",
    "start": "1797560",
    "end": "1803260"
  },
  {
    "text": "shutdown the the source system is happily chugging along and and he goes through and he didn't need all those",
    "start": "1803260",
    "end": "1809260"
  },
  {
    "text": "logs so he cleaned some of them up and then I bring my replicas back online well that wall sender process can't send",
    "start": "1809260",
    "end": "1815110"
  },
  {
    "text": "the changes because they're gone so now I have to go to my backups pull the logs out of my backup system apply in the",
    "start": "1815110",
    "end": "1820930"
  },
  {
    "text": "old-fashioned way this is not optimal to solve that problem Postgres introduced something called replication slots and",
    "start": "1820930",
    "end": "1827880"
  },
  {
    "text": "really it's just a little bit of metadata inside of the database but it tells Postgres oh hey somebody's reading",
    "start": "1827880",
    "end": "1833680"
  },
  {
    "text": "the logs and they haven't read this one yet so don't so keep it until they come back and they read it that beautifully",
    "start": "1833680",
    "end": "1841900"
  },
  {
    "text": "works that worked beautifully it solved that problem and with with replication slots combined with streaming",
    "start": "1841900",
    "end": "1847690"
  },
  {
    "text": "replication building on top of the right ahead log we actually have a great physical replication solution where the",
    "start": "1847690",
    "end": "1855130"
  },
  {
    "text": "logs don't disappear the replicas can can stay current and have a very low lag",
    "start": "1855130",
    "end": "1860500"
  },
  {
    "text": "from the master and with all of this in place we started thinking what if we can",
    "start": "1860500",
    "end": "1865990"
  },
  {
    "text": "make that wall under process smarter what if we could upgrade the brains of that guy what if",
    "start": "1865990",
    "end": "1874059"
  },
  {
    "text": "that guy could understand the records that he's reading instead of just blindly sending the bytes over the",
    "start": "1874059",
    "end": "1880149"
  },
  {
    "text": "network so in Postgres 9/4 still a number of years ago Postgres introduced",
    "start": "1880149",
    "end": "1886539"
  },
  {
    "text": "something called logical decoding and what logical decoding did is it did",
    "start": "1886539",
    "end": "1892090"
  },
  {
    "text": "exactly this it just made the brains of the wall sunder like a whole lot smarter that the wall sundar now he can",
    "start": "1892090",
    "end": "1899739"
  },
  {
    "text": "understand the changes that are happening he can group them by transaction and then he can keep track",
    "start": "1899739",
    "end": "1906100"
  },
  {
    "text": "of the status of those transactions if a transaction aborts or it rolls back would just throw it away",
    "start": "1906100",
    "end": "1911289"
  },
  {
    "text": "if a transaction commits then at the point that that it commits then we can",
    "start": "1911289",
    "end": "1916929"
  },
  {
    "text": "send ship that thing over the network to wherever the destination is and then Postgres did something that is like",
    "start": "1916929",
    "end": "1922090"
  },
  {
    "text": "totally the Postgres style of doing things and they made that little piece that sends it over the network they made",
    "start": "1922090",
    "end": "1928690"
  },
  {
    "text": "it a plug-in based idea which is like yeah the more you work with the Postgres thing you see this is this is very much",
    "start": "1928690",
    "end": "1934600"
  },
  {
    "text": "like something they like to do to have things be extensible and pluggable so what that means is maybe I want to build",
    "start": "1934600",
    "end": "1941799"
  },
  {
    "text": "some kind of a service that consumes all the changes coming out of a Postgres",
    "start": "1941799",
    "end": "1946929"
  },
  {
    "text": "database but I'd like to get it as JSON okay so I just used the JSON plug-in and",
    "start": "1946929",
    "end": "1953379"
  },
  {
    "text": "now all those the wall sender when it sends those changes over the network to my service that I just built I get it as",
    "start": "1953379",
    "end": "1959679"
  },
  {
    "text": "JSON or maybe I want it as raw sequel you can do that too you just use that",
    "start": "1959679",
    "end": "1965440"
  },
  {
    "text": "plug-in and then any downstream system that's able to understand simple basic sequel statements can receive those",
    "start": "1965440",
    "end": "1971649"
  },
  {
    "text": "changes as sequel and you can plug them in down there with all of this in place",
    "start": "1971649",
    "end": "1977369"
  },
  {
    "text": "we're finally in the position to sort of introduce what was actually a real big announcement last year in Postgres 10",
    "start": "1977369",
    "end": "1984220"
  },
  {
    "text": "and we called it logical replication but",
    "start": "1984220",
    "end": "1989320"
  },
  {
    "text": "really if there's one thing I want you to take away from this this little part of our talk today it's this I want you",
    "start": "1989320",
    "end": "1995289"
  },
  {
    "text": "to see that the big logical replication announcement Postgres 10 it was not like this big",
    "start": "1995289",
    "end": "2001140"
  },
  {
    "text": "feature that was built from the ground up merged into Postgres 10 and shipped out it was actually just this small",
    "start": "2001140",
    "end": "2008130"
  },
  {
    "text": "layer on top because in this again by the way going back to what you see this",
    "start": "2008130",
    "end": "2014159"
  },
  {
    "text": "also when Jim talked about partitioning you see the way the Postgres database is developed and this is kind of an",
    "start": "2014159",
    "end": "2020700"
  },
  {
    "text": "important thing to understand is that the it's very common for them to iterate on features right so they'll get kind of",
    "start": "2020700",
    "end": "2027720"
  },
  {
    "text": "a core functionality in and then they'll harden that they'll mature that they'll they'll work that out and then they'll",
    "start": "2027720",
    "end": "2032880"
  },
  {
    "text": "add a little bit more the next year and then they'll add a bit more than next year it's a great process it's not super",
    "start": "2032880",
    "end": "2038669"
  },
  {
    "text": "marketing friendly sometimes but but it results in a wonderfully engineered piece of software so last year and",
    "start": "2038669",
    "end": "2045269"
  },
  {
    "text": "Postgres 10 we got logical replication which really the the three really big pieces that I see that that we're left",
    "start": "2045269",
    "end": "2051839"
  },
  {
    "text": "to do were the sequel sent well first you need is a process to apply the changes on the far side receive it and",
    "start": "2051839",
    "end": "2058470"
  },
  {
    "text": "apply it then you need that some sequel syntax got to work that out you got to work out a security model so what needs",
    "start": "2058470",
    "end": "2063570"
  },
  {
    "text": "superuser and what doesn't how are you gonna do grants and privileges and things like that but this was all built on top of logical decoding",
    "start": "2063570",
    "end": "2071608"
  },
  {
    "text": "well let's take a look at that actually let's go back to our other slide you see we have physical replication and",
    "start": "2071609",
    "end": "2078270"
  },
  {
    "text": "Postgres read replicas are built on they leverage the log for it for the",
    "start": "2078270",
    "end": "2083520"
  },
  {
    "text": "efficiency of it they're built on streaming replication and replication slots we have the we have the the",
    "start": "2083520",
    "end": "2090030"
  },
  {
    "text": "database migration service and there are a whole bunch of third-party solutions for taking data and streaming at all the",
    "start": "2090030",
    "end": "2096480"
  },
  {
    "text": "changes out of your Postgres database those are built on the log for efficiency streaming replication replication slots and the logical",
    "start": "2096480",
    "end": "2103230"
  },
  {
    "text": "decoding framework that we introduced in Postgres 94 and then we have the publication and subscription the in",
    "start": "2103230",
    "end": "2111359"
  },
  {
    "text": "Postgres 10 the logical replication that was introduced there and that's again built on the log for efficiency stream",
    "start": "2111359",
    "end": "2118230"
  },
  {
    "text": "your application or replication slots and the logical decoding framework that's been in there since 94 so if",
    "start": "2118230",
    "end": "2125520"
  },
  {
    "text": "you're looking for a logical replication solution and Postgres today it makes all",
    "start": "2125520",
    "end": "2130560"
  },
  {
    "text": "the sense in the world to start by just taking a look at what's right baked inside of the engine it's",
    "start": "2130560",
    "end": "2136710"
  },
  {
    "text": "simple it's available it's it's just a couple of simple sequel statements where you can create publications where you on",
    "start": "2136710",
    "end": "2144030"
  },
  {
    "text": "a table by table basis if you want to you can say this table published the changes for this table and then over in",
    "start": "2144030",
    "end": "2149160"
  },
  {
    "text": "another database you can say I want to subscribe to that publication and receive all those changes",
    "start": "2149160",
    "end": "2154970"
  },
  {
    "text": "yeah it's efficient it's simple it works well it is also worth mentioning one",
    "start": "2154970",
    "end": "2160410"
  },
  {
    "text": "other important choice that you have on RDS as well which is that we have an extension called PG logical quick word",
    "start": "2160410",
    "end": "2167760"
  },
  {
    "text": "about extensions because this is a concept that not every not every database has an extension in in Postgres",
    "start": "2167760",
    "end": "2176250"
  },
  {
    "text": "is is really almost like another it's another piece of code that can kind of",
    "start": "2176250",
    "end": "2181380"
  },
  {
    "text": "plug into the database to give us skills that it didn't have before make it sort of like an up you know upgrade its",
    "start": "2181380",
    "end": "2187740"
  },
  {
    "text": "capabilities sometimes extensions can be even that that's separate bit of code could be",
    "start": "2187740",
    "end": "2193920"
  },
  {
    "text": "maintained by a different group of people maybe an overlapping group of people a really fairly widely known one",
    "start": "2193920",
    "end": "2200310"
  },
  {
    "text": "is the geospatial capabilities there's an extension called post GIS and it's a whole community of people that maintain",
    "start": "2200310",
    "end": "2205770"
  },
  {
    "text": "this code you plug it into your Postgres and then when you type you it's a sequel",
    "start": "2205770",
    "end": "2210810"
  },
  {
    "text": "statement that says create extension and when you do that create extension it will load everything in and it will",
    "start": "2210810",
    "end": "2216210"
  },
  {
    "text": "really it's like adding all these capabilities to your database engine that you didn't have before we also have",
    "start": "2216210",
    "end": "2222030"
  },
  {
    "text": "one called PG logical and PG logical is a logical repla it's a set of code that will enable Postgres to do logical",
    "start": "2222030",
    "end": "2228600"
  },
  {
    "text": "replication it's been around for a bit longer in fact I I wouldn't be surprised to see",
    "start": "2228600",
    "end": "2234330"
  },
  {
    "text": "some some more capabilities trickle from PG logical over over the coming years",
    "start": "2234330",
    "end": "2239340"
  },
  {
    "text": "into the the core stuff some of the people that work on P geological are some of the same people that have been",
    "start": "2239340",
    "end": "2244500"
  },
  {
    "text": "helping develop the logical replication capabilities in core Postgres so if you",
    "start": "2244500",
    "end": "2249810"
  },
  {
    "text": "need support for older versions of Postgres if you need a little bit more sophistication and how you handle",
    "start": "2249810",
    "end": "2254910"
  },
  {
    "text": "conflicts or DDL or sequences take a look at the PG logical extension as well",
    "start": "2254910",
    "end": "2260630"
  },
  {
    "text": "so logical replication is something I was really excited to talk about but this last topic I actually think",
    "start": "2260630",
    "end": "2268480"
  },
  {
    "text": "this might be the single most important thing that we cover during our presentation today which is monitoring",
    "start": "2268480",
    "end": "2274740"
  },
  {
    "text": "when you think about monitoring in RDS I would like you to think about think",
    "start": "2274740",
    "end": "2280540"
  },
  {
    "start": "2276000",
    "end": "2276000"
  },
  {
    "text": "about monitoring in terms of four main tools that you have in your tool belt performance insights enhanced monitoring",
    "start": "2280540",
    "end": "2287470"
  },
  {
    "text": "cloud watch and then third-party solutions or custom things that you build yourself on top of our API",
    "start": "2287470",
    "end": "2294510"
  },
  {
    "text": "performance insights is one of the things I was just telling somebody before the talk started I'm a huge fan",
    "start": "2294510",
    "end": "2300310"
  },
  {
    "text": "of performance insights I've been I've been talking about it with everybody that I talked to over this past year",
    "start": "2300310",
    "end": "2305580"
  },
  {
    "text": "performance insights is like having a window into the inside of your database",
    "start": "2305580",
    "end": "2310780"
  },
  {
    "text": "to see what's really going on in a nutshell what it's showing you you at any given point in time you have a whole",
    "start": "2310780",
    "end": "2316390"
  },
  {
    "text": "bunch of connections some of those connections are active they're processing a sequel statement some of",
    "start": "2316390",
    "end": "2321400"
  },
  {
    "text": "them are not doing it they're idle and what performance incise is just summarizing the active sessions for you",
    "start": "2321400",
    "end": "2327340"
  },
  {
    "text": "so like in this picture over time and it's tell it's going to tell you what sequel statements are currently running",
    "start": "2327340",
    "end": "2333250"
  },
  {
    "text": "but then it tells you more than that tells you what they're doing and even it'll break down each sequel statement",
    "start": "2333250",
    "end": "2338500"
  },
  {
    "text": "to tell you for that sequel statement maybe 60% of the time was on the CPU but",
    "start": "2338500",
    "end": "2344020"
  },
  {
    "text": "maybe 40% of the time I was doing i/o and then you can go from there and you",
    "start": "2344020",
    "end": "2349360"
  },
  {
    "text": "can pull your maybe your query plan or your execution plan you can drill down on it but the great thing about",
    "start": "2349360",
    "end": "2355120"
  },
  {
    "text": "performance insights is that it with performance insights I'm able to much",
    "start": "2355120",
    "end": "2360130"
  },
  {
    "text": "much more quickly get straight to where I need to to go next in addition to the",
    "start": "2360130",
    "end": "2365980"
  },
  {
    "text": "two query plan one other point or thing I want to point out is that we do now on",
    "start": "2365980",
    "end": "2371500"
  },
  {
    "text": "Aurora this is on by default it's not always on by default and RDS Postgres is there's another extension there's an",
    "start": "2371500",
    "end": "2378130"
  },
  {
    "text": "extension called PG stat statements and this gives you a detailed statistics about the sequel statements that are",
    "start": "2378130",
    "end": "2384280"
  },
  {
    "text": "running in your database generally I recommend for people to turn this on because the value of that data is huge",
    "start": "2384280",
    "end": "2390160"
  },
  {
    "text": "when you're trying to troubleshoot systems it'll tell you things about the average execution time how long does",
    "start": "2390160",
    "end": "2396340"
  },
  {
    "text": "that sequel usually take to run which you get P I won't tell you did this sequel run for 30 seconds or 23 seconds but",
    "start": "2396340",
    "end": "2403370"
  },
  {
    "text": "it'll tell you it was running so you need the the statement stats to pull things like that one other point a quick",
    "start": "2403370",
    "end": "2409580"
  },
  {
    "text": "tip I wanted to throw in today is that I normally do this but this is I've seen",
    "start": "2409580",
    "end": "2416300"
  },
  {
    "text": "this one super clever thing that a couple customers did it's actually worth passing along which is put a comment if",
    "start": "2416300",
    "end": "2421970"
  },
  {
    "text": "you're able to sticking a comment at the beginning of your sequel statement was just something unique in that comment no",
    "start": "2421970",
    "end": "2428120"
  },
  {
    "text": "I filename and a line number a gooood something but the key is it's searchable and the really clever thing there is",
    "start": "2428120",
    "end": "2433970"
  },
  {
    "text": "that when a sequel statement pops to the top of performance insights or PG statements what that enables you to do",
    "start": "2433970",
    "end": "2439970"
  },
  {
    "text": "is is oh there's that string I can search on that and like in in basically like a second you're right at the line",
    "start": "2439970",
    "end": "2446150"
  },
  {
    "text": "of code in your application of source code you know exactly where that sequel statements come from and trust me I've",
    "start": "2446150",
    "end": "2451310"
  },
  {
    "text": "spent like I've spent so much time working with people and trying to figure out okay exactly which part of the code",
    "start": "2451310",
    "end": "2457490"
  },
  {
    "text": "was running this sequel statement cuz there's like three different places that look like maybe they could have made that sequel clever little trick that I",
    "start": "2457490",
    "end": "2464090"
  },
  {
    "text": "wanted to sort of mention just because I've seen that turn out to be so useful now we're performance insights is like",
    "start": "2464090",
    "end": "2470840"
  },
  {
    "text": "having a window into your database I think of enhancement monitoring as having a window into your operating",
    "start": "2470840",
    "end": "2476870"
  },
  {
    "text": "system it's almost like being able to log into the box with a shell you can see your top processes list you can see",
    "start": "2476870",
    "end": "2483950"
  },
  {
    "text": "a whole bunch of metrics from things like page tables to to memories detailed",
    "start": "2483950",
    "end": "2489800"
  },
  {
    "text": "memory statistics the load and the CPU usage IO stuff about what the operating system is doing the one thing that I do",
    "start": "2489800",
    "end": "2496100"
  },
  {
    "text": "want to point out with enhanced monitoring that I often find myself telling people is to pay attention to",
    "start": "2496100",
    "end": "2502130"
  },
  {
    "text": "the granularity so when you turn it on you can choose how frequently do I want snapshots every 15 seconds do I want to",
    "start": "2502130",
    "end": "2509120"
  },
  {
    "text": "take a snapshot every 10 seconds five seconds every every second literally just last week I was working with a",
    "start": "2509120",
    "end": "2515540"
  },
  {
    "text": "customer and we're trying to solve solve answer some questions and with even",
    "start": "2515540",
    "end": "2520850"
  },
  {
    "text": "though they were on an old version of Postgres with enhanced monitoring we could identify the exact second when the",
    "start": "2520850",
    "end": "2528500"
  },
  {
    "text": "kernel changed its behavior because of memory pressure on box and that level of granularity is",
    "start": "2528500",
    "end": "2534260"
  },
  {
    "text": "invaluable when you're troubleshooting so so I mean I would encourage you to flip on a em and run it with a low level",
    "start": "2534260",
    "end": "2541610"
  },
  {
    "text": "of granularity that you're you know don't do it at like a minute it's really valuable to have less than that finally cloud watch and cloud watch has",
    "start": "2541610",
    "end": "2549290"
  },
  {
    "text": "been around for a while but the thing that I find most valuable about cloud watch is not just the metrics but what",
    "start": "2549290",
    "end": "2554900"
  },
  {
    "text": "you can do with them right so you can use cloud watch to make sure that you get a lot you get alerted that you get a",
    "start": "2554900",
    "end": "2561620"
  },
  {
    "text": "page or a notification of some kind of a threshold gets the crossed and there's four things that I often I find myself",
    "start": "2561620",
    "end": "2568250"
  },
  {
    "text": "often telling customers to keep an eye on and it's worth sort of pointing out right here first of all is your",
    "start": "2568250",
    "end": "2574310"
  },
  {
    "text": "transaction ID usage so Postgres has we have a metric that's that will tell you",
    "start": "2574310",
    "end": "2579560"
  },
  {
    "text": "how many transaction IDs have been used and basically what this is giving you is",
    "start": "2579560",
    "end": "2585080"
  },
  {
    "text": "this telling you so in Postgres there's sort of a garbage collection process that's called vacuum and it's it's an",
    "start": "2585080",
    "end": "2591140"
  },
  {
    "text": "important thing to keep an eye on and what you kind of just want to know is that there's a metric that'll tell you",
    "start": "2591140",
    "end": "2596480"
  },
  {
    "text": "about your transaction ID usage and if you if you zoom out a little bit you should be able to see there's kind of a normal range that that thing runs in and",
    "start": "2596480",
    "end": "2603320"
  },
  {
    "text": "you want to know if it goes outside of that range so setting an alarm such that you know if this is doing something",
    "start": "2603320",
    "end": "2608630"
  },
  {
    "text": "unexpected secondly there's a metric call and this is a new one called DB",
    "start": "2608630",
    "end": "2614420"
  },
  {
    "text": "load or database load and this is coming from performance insights and what it's",
    "start": "2614420",
    "end": "2620180"
  },
  {
    "text": "telling you is at any given point in time it's real simple it's actually just telling you how many of my connections",
    "start": "2620180",
    "end": "2625460"
  },
  {
    "text": "are doing something right now the neat thing about that metric is that if you",
    "start": "2625460",
    "end": "2630530"
  },
  {
    "text": "build an alarm on that and I've actually been doing this for years even on like other database systems and other places",
    "start": "2630530",
    "end": "2636290"
  },
  {
    "text": "and I found that simple little metric it can catch CPU problems it can catch all",
    "start": "2636290",
    "end": "2642440"
  },
  {
    "text": "kinds of problems because often when something happens one of the ways that manifests itself is sequel might slow",
    "start": "2642440",
    "end": "2649820"
  },
  {
    "text": "down and if sequel slows down your connection number of active connections starts to go up as your application",
    "start": "2649820",
    "end": "2655340"
  },
  {
    "text": "picks up more connections from its connection pools so this metric can can alert you if there's a CPU problem or a",
    "start": "2655340",
    "end": "2660770"
  },
  {
    "text": "whole bunch of other things the third thing that you need to watch is memory on any date bass really any database it doesn't",
    "start": "2660770",
    "end": "2668599"
  },
  {
    "text": "matter the engine when you have high connection counts memory management is of paramount importance to quote a",
    "start": "2668599",
    "end": "2674839"
  },
  {
    "text": "colleague of mine actually who says that it's it's really true and it's certainly true with Postgres so we have a couple",
    "start": "2674839",
    "end": "2681200"
  },
  {
    "text": "of cloud watch metrics free able memory swap usage you want to keep an eye on this - it's just one of those things",
    "start": "2681200",
    "end": "2687320"
  },
  {
    "text": "that it's good to be proactive if this is something that's good to watch and possibly alarm on and the final thing is",
    "start": "2687320",
    "end": "2693890"
  },
  {
    "text": "your disk usage right it sounds kind of it sounds kind of like old-school a little bit but your disk usage for most",
    "start": "2693890",
    "end": "2700460"
  },
  {
    "text": "people it's gonna be a line with a slope but the thing you probably want to know is if that slope changes unexpectedly",
    "start": "2700460",
    "end": "2706130"
  },
  {
    "text": "right a little bit earlier I talked about replication slots you could as one",
    "start": "2706130",
    "end": "2711680"
  },
  {
    "text": "example you could build a service and your service is using logic the logical",
    "start": "2711680",
    "end": "2716690"
  },
  {
    "text": "decoding framework so you can efficiently consume all the changes from the database well what if somebody shuts",
    "start": "2716690",
    "end": "2722690"
  },
  {
    "text": "down that service for one reason or another and they forget to clean up the metadata in the database you know the",
    "start": "2722690",
    "end": "2728300"
  },
  {
    "text": "database doesn't know if that was temporary if they're gonna come back online in 15 minutes and they need those logs or if they're shut down permanently",
    "start": "2728300",
    "end": "2735170"
  },
  {
    "text": "so it's actually possible that you could accidentally get into a situation where you shut something now the database is",
    "start": "2735170",
    "end": "2741560"
  },
  {
    "text": "not able to clean up logs they're gonna start using disk space that's the sort of thing that the sooner you find out the better right if you find out 3-4",
    "start": "2741560",
    "end": "2748910"
  },
  {
    "text": "days down the road you have a lot more work to do with dealing with it and it's great if you can find out quickly with these sorts of things so it is slightly",
    "start": "2748910",
    "end": "2758450"
  },
  {
    "text": "crazy to try to cover five different topics in a deep dive session that's only one hour long but we've given it",
    "start": "2758450",
    "end": "2766280"
  },
  {
    "text": "our best shot and I think there's a lot of valuable stuff in there I'm just",
    "start": "2766280",
    "end": "2771290"
  },
  {
    "text": "gonna leave this slide up and Jim and I will be available for questions over here on the side if anybody wants to",
    "start": "2771290",
    "end": "2777470"
  },
  {
    "text": "come up and chat thank you [Applause]",
    "start": "2777470",
    "end": "2786529"
  }
]