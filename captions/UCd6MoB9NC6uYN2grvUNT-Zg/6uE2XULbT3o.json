[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "all right let's get started first of all thank you for taking time to join the session on architecting for high",
    "start": "5879",
    "end": "11719"
  },
  {
    "text": "availability it's great to see so many of you thank you very much my name is aarin um I'm with Amazon for about 8",
    "start": "11719",
    "end": "19680"
  },
  {
    "text": "years now I'm currently um based out of uh Europe where I'm part of the European team at at AWS U specifically I'm part",
    "start": "19680",
    "end": "27960"
  },
  {
    "text": "of the solutions architecture team as part of that team we help customers uh be successful on the Amazon platform to",
    "start": "27960",
    "end": "34640"
  },
  {
    "text": "build uh systems that are scalable fault tolerant highly available secure and so",
    "start": "34640",
    "end": "39920"
  },
  {
    "text": "on and today in this talk we'll be covering um some of the concepts that we talk with our customers about regarding",
    "start": "39920",
    "end": "47039"
  },
  {
    "text": "architecting for high availability there are five points that",
    "start": "47039",
    "end": "53960"
  },
  {
    "text": "I'd like to talk through today designing for failure multiple availability zones and how to properly use them",
    "start": "53960",
    "end": "60840"
  },
  {
    "text": "scaling selfhealing and loose coupling and what we're going to do here",
    "start": "60840",
    "end": "66520"
  },
  {
    "start": "65000",
    "end": "65000"
  },
  {
    "text": "is we'll actually build a system and by applying these five best practices we'll",
    "start": "66520",
    "end": "73119"
  },
  {
    "start": "73000",
    "end": "73000"
  },
  {
    "text": "end up building a system that is highly available now the first point I'd like",
    "start": "73119",
    "end": "79520"
  },
  {
    "text": "to make is that there are two groups of services that AWS offers on the left",
    "start": "79520",
    "end": "85000"
  },
  {
    "text": "hand side you see the services that are inherently fault tolerant scalable and",
    "start": "85000",
    "end": "91000"
  },
  {
    "text": "highly available we heard um Alysa Henry talk earlier during the keynote how S3",
    "start": "91000",
    "end": "98040"
  },
  {
    "text": "does some of the heavy lifting behind the scenes in terms of um you know dealing with with issues so you don't",
    "start": "98040",
    "end": "103399"
  },
  {
    "text": "have to worry about it so these services are designed to be highly available and by picking those and adding those to",
    "start": "103399",
    "end": "109240"
  },
  {
    "text": "your architecture you're basically taking advantage of all the work and Innovation that Amazon is doing behind",
    "start": "109240",
    "end": "114840"
  },
  {
    "text": "the scenes now on the other hand there are also services that can be used to build",
    "start": "114840",
    "end": "121479"
  },
  {
    "text": "highly available architectures but you will have to use some of the tools and features that those Services provide",
    "start": "121479",
    "end": "128119"
  },
  {
    "text": "correctly in order for those to be highly available and we'll talk about some of those right",
    "start": "128119",
    "end": "134040"
  },
  {
    "text": "now to get started we'll use Amazon ec2 and uh Amazon RDS our relational",
    "start": "134040",
    "end": "140720"
  },
  {
    "text": "database service and Amazon Route 53 for DNS to start building our very simple",
    "start": "140720",
    "end": "147720"
  },
  {
    "text": "system so here we go we'll take take ec2 to host our web server we will use the",
    "start": "147720",
    "end": "154599"
  },
  {
    "text": "relational database service which makes it really easy to manage um and you know provision databases in the cloud and",
    "start": "154599",
    "end": "161239"
  },
  {
    "text": "we'll use that to set up our database next we will use an elastic IP address",
    "start": "161239",
    "end": "166519"
  },
  {
    "text": "that points to the web server elastic IP addresses have um a couple of features",
    "start": "166519",
    "end": "173440"
  },
  {
    "text": "and the one that's relevant here is that you can actually map an elastic IP from one instance to another um automatically",
    "start": "173440",
    "end": "181120"
  },
  {
    "text": "so this is quite interesting and important um if you want to work around failures which we'll see in a second and",
    "start": "181120",
    "end": "187840"
  },
  {
    "text": "lastly we will use um Route 53 our DNS service to um resolve in this in this",
    "start": "187840",
    "end": "194560"
  },
  {
    "text": "case uh doy website.com to the elastic IP address now at this point we want to",
    "start": "194560",
    "end": "201440"
  },
  {
    "text": "start applying um the Five Points one by one designing for failure let's jump",
    "start": "201440",
    "end": "207040"
  },
  {
    "text": "into that and you know this morning we heard wner Fogle um again use the famous quote everything",
    "start": "207040",
    "end": "213360"
  },
  {
    "text": "fails all the time and it's just such an important point to keep in front of your",
    "start": "213360",
    "end": "218599"
  },
  {
    "text": "eyes um discs can fail power units fail um applications have bugs and they they",
    "start": "218599",
    "end": "225120"
  },
  {
    "text": "go down there memory leaks all kinds of things that can happen so what we want to do is really look at your",
    "start": "225120",
    "end": "230879"
  },
  {
    "text": "architecture and your system and see where are the single points of failures and then actually try and avoid them",
    "start": "230879",
    "end": "237599"
  },
  {
    "text": "obviously if your system has a single point of failure and that U System goes down or that single point of failure",
    "start": "237599",
    "end": "243319"
  },
  {
    "text": "goes down your entire system is down and then really assuming everything fails and work backwards from that and",
    "start": "243319",
    "end": "250319"
  },
  {
    "text": "anticipate how you would uh guard against um you know some of those failures and how you would remedy that",
    "start": "250319",
    "end": "255920"
  },
  {
    "text": "um in in seamless ways the goal really is to make sure",
    "start": "255920",
    "end": "261400"
  },
  {
    "text": "your application and your system continues to function and this is internet time with the increase of you",
    "start": "261400",
    "end": "268080"
  },
  {
    "start": "264000",
    "end": "264000"
  },
  {
    "text": "know mobile devices folks are connected um you just don't know how many people will join the party and will come to",
    "start": "268080",
    "end": "273840"
  },
  {
    "text": "your application um and you know come come visit your your site so the last thing you want to do is uh when when",
    "start": "273840",
    "end": "279960"
  },
  {
    "text": "there's high demand uh you know that your system is not available or you know that if there's a failure um you know",
    "start": "279960",
    "end": "285919"
  },
  {
    "text": "your system is is not working and uh you know in the past you might have been worried that nobody comes and uses your",
    "start": "285919",
    "end": "291680"
  },
  {
    "text": "application today you want to be ready that every everyone out there comes and visits your your system so let's go back",
    "start": "291680",
    "end": "299440"
  },
  {
    "text": "to what we have built so far and let's look at what would happen in an isolated",
    "start": "299440",
    "end": "304680"
  },
  {
    "text": "failure case let's assume the web server has crashed let's say it's a Memory leak",
    "start": "304680",
    "end": "310600"
  },
  {
    "text": "in the web application I'm sure many of you have encountered this in in your careers and system is",
    "start": "310600",
    "end": "317960"
  },
  {
    "text": "down with AWS since all of these are programmable components what you can do here is basically launch a replacement",
    "start": "317960",
    "end": "325039"
  },
  {
    "text": "instance which is now hosting a new web server and point the elastic IP to this",
    "start": "325039",
    "end": "331759"
  },
  {
    "text": "new server so your system is back up and running and uh it happens transparently to to your clients so that's a very",
    "start": "331759",
    "end": "339440"
  },
  {
    "text": "basic example of how to deal with with failures now Amazon EBS is another service I'd",
    "start": "339440",
    "end": "347039"
  },
  {
    "start": "344000",
    "end": "344000"
  },
  {
    "text": "like to introduce you to um often times you want to take state with you from",
    "start": "347039",
    "end": "352800"
  },
  {
    "text": "instance to instance if there is a failure and EBS or elastic Box Store gives you network backed storage volumes",
    "start": "352800",
    "end": "361160"
  },
  {
    "text": "whose lifetimes are independent from that of an instance what that means is if an instance fails or if you don't",
    "start": "361160",
    "end": "366919"
  },
  {
    "text": "longer need if you no longer need an instance you can shut it down but the data on your EBS volume will still be",
    "start": "366919",
    "end": "372520"
  },
  {
    "text": "there so you can move it to another instance As You Wish let's take a look how the architecture is when um there's",
    "start": "372520",
    "end": "380840"
  },
  {
    "text": "an EBS volume attached to the web server um if there's a failure now and we do",
    "start": "380840",
    "end": "386319"
  },
  {
    "text": "the same thing we uh launch a replacement instance and map the elastic IP address um you see that the EBS",
    "start": "386319",
    "end": "393440"
  },
  {
    "text": "volume is is still there and using the apis or the console you can easily um",
    "start": "393440",
    "end": "399319"
  },
  {
    "text": "attach this volume to the new instance now so if you want to take forward any kind of application State lock files or",
    "start": "399319",
    "end": "405199"
  },
  {
    "text": "anything you might need that's that's a good that's a good way to do",
    "start": "405199",
    "end": "410280"
  },
  {
    "text": "it now the next service I'd like to introduce is elastic low balancing in",
    "start": "410280",
    "end": "415759"
  },
  {
    "start": "411000",
    "end": "411000"
  },
  {
    "text": "our system that we've seen so far we um really had a couple plus single points of failures and elb lets you um scale",
    "start": "415759",
    "end": "423680"
  },
  {
    "text": "horizontally across multiple instances which is quite important so let's take a look how elb will be inserted here",
    "start": "423680",
    "end": "431599"
  },
  {
    "text": "instead of using the elastic IP pointing to a single web server what we see here is traffic is flowing through the",
    "start": "431599",
    "end": "438840"
  },
  {
    "text": "elastic L balancing service and traffic is spread across three",
    "start": "438840",
    "end": "444360"
  },
  {
    "text": "instances so at this point there is a feature of",
    "start": "444360",
    "end": "449520"
  },
  {
    "start": "447000",
    "end": "447000"
  },
  {
    "text": "elastic Lo balancing which is called health checks and as you might imagine what what this means is elb can be",
    "start": "449520",
    "end": "456639"
  },
  {
    "text": "configured to check the health of the instances that is behind it and if an",
    "start": "456639",
    "end": "463080"
  },
  {
    "text": "instance were no longer to pass that health check elb is smart about how it directs traffic it's really simple to",
    "start": "463080",
    "end": "470039"
  },
  {
    "text": "set up you can uh this is a screenshot from the AWS Management console uh you",
    "start": "470039",
    "end": "475319"
  },
  {
    "text": "basically pick the protocol pick the port pick the URI and you can configure a couple of values around a timeout and",
    "start": "475319",
    "end": "481720"
  },
  {
    "text": "the frequency of of your health checks and from there on elb will simply perform the health checks now back in",
    "start": "481720",
    "end": "489479"
  },
  {
    "text": "our architecture drawing let's see what happens now when one of the servers go down elb will continue to send traffic",
    "start": "489479",
    "end": "497400"
  },
  {
    "text": "to the good instances but we'll have figured out that hey this instance is no longer available or this web service is",
    "start": "497400",
    "end": "503080"
  },
  {
    "text": "no longer running and it will no longer send traffic to that once it detected that it needs to check the health of the",
    "start": "503080",
    "end": "511000"
  },
  {
    "text": "system though and when the system is back in operating order meaning it",
    "start": "511000",
    "end": "516120"
  },
  {
    "text": "passes the health check again elb continues to send traffic to that",
    "start": "516120",
    "end": "521240"
  },
  {
    "text": "instance yeah this very briefly was uh how we",
    "start": "521240",
    "end": "527519"
  },
  {
    "text": "designed for failure of single system failures you know in this case we had a memory leak in in the web service and um",
    "start": "527519",
    "end": "535320"
  },
  {
    "text": "we showed how we can use elastic IP address or elastic L balancing",
    "start": "535320",
    "end": "541440"
  },
  {
    "text": "themselves already and by using multiple of those you really can build systems that are highly available let's um take",
    "start": "599600",
    "end": "606480"
  },
  {
    "text": "a look at at the map we have quite a few regions at this point we have our latest",
    "start": "606480",
    "end": "612560"
  },
  {
    "text": "edition in Sydney which you can see here and these are regions and within those",
    "start": "612560",
    "end": "617760"
  },
  {
    "text": "regions we have these multiple availability zones and what's important here is um availability zones within the",
    "start": "617760",
    "end": "626519"
  },
  {
    "text": "same region provide low latency and inexpensive connectivity which is",
    "start": "626519",
    "end": "632519"
  },
  {
    "text": "important because you need to be able to synchronize your applications data across these zones and uh prepare for",
    "start": "632519",
    "end": "640079"
  },
  {
    "text": "you know if if there was any um problem in one of the azs you need to have your state replicated",
    "start": "640079",
    "end": "646480"
  },
  {
    "text": "over let's jump in at this point I'd like to introduce a feature of the",
    "start": "646480",
    "end": "651560"
  },
  {
    "start": "648000",
    "end": "648000"
  },
  {
    "text": "Amazon relational data service database service called uh multi-az um RDS provides quite a few uh",
    "start": "651560",
    "end": "659440"
  },
  {
    "text": "useful features in terms of you know setting up read read replicas and you know allowing you to scale up and down",
    "start": "659440",
    "end": "665720"
  },
  {
    "text": "um or adding adding storage volumes but here um multi-az is important",
    "start": "665720",
    "end": "671720"
  },
  {
    "text": "multi-az um in fact let's jump into our architecture and I'll explain it here in",
    "start": "671720",
    "end": "677839"
  },
  {
    "text": "multi-az deployment mode RDS will set set up a replica database in a second",
    "start": "677839",
    "end": "684920"
  },
  {
    "text": "availability zone so here we see on the upper left hand side the architecture that that we have just build in the",
    "start": "684920",
    "end": "691120"
  },
  {
    "text": "first availability Zone they're labeled A and B here and in zone B we have the",
    "start": "691120",
    "end": "697279"
  },
  {
    "text": "replica which is now synchronously replicated from from the main database",
    "start": "697279",
    "end": "704440"
  },
  {
    "text": "so it's fairly easy um to set up in fact that's um oh no sorry first we'll look",
    "start": "704440",
    "end": "711240"
  },
  {
    "text": "at what happens when there is a failure so when the main database fails RDS monitors that and actually switches over",
    "start": "711240",
    "end": "719040"
  },
  {
    "text": "um and promotes the replica to be the new master and the ec2 instances running",
    "start": "719040",
    "end": "724680"
  },
  {
    "text": "the web server continue to um you know have a database to talk to now in RDS",
    "start": "724680",
    "end": "731320"
  },
  {
    "text": "multi-az deployments the design idea is that there always needs to be a second",
    "start": "731320",
    "end": "736880"
  },
  {
    "text": "set of or you know data needs to be duplicated so what's happening RDS will set up a new replica of the database and",
    "start": "736880",
    "end": "746160"
  },
  {
    "text": "starts synchronous replication once again and the part you know synchronous here is important because the moment",
    "start": "746160",
    "end": "752199"
  },
  {
    "text": "something is committed to your database it is committed into two places now it's really easy to set up",
    "start": "752199",
    "end": "760120"
  },
  {
    "text": "it's as simple as going to the uh Management console and checking the",
    "start": "760120",
    "end": "765279"
  },
  {
    "text": "right option in in the dialogue but um underneath imagine all the things that are happening in terms of uh",
    "start": "765279",
    "end": "771920"
  },
  {
    "text": "facilitating the uh um you know replication monitoring for um you know",
    "start": "771920",
    "end": "777600"
  },
  {
    "text": "the the time that you need to uh shift over over traffic and so on so there's quite a bit of things happening under the covers",
    "start": "777600",
    "end": "783560"
  },
  {
    "text": "here now we've seen how we can bring the database across multiple availability",
    "start": "783560",
    "end": "790040"
  },
  {
    "start": "784000",
    "end": "784000"
  },
  {
    "text": "zones but how about the traffic to our web servers these are still in one a",
    "start": "790040",
    "end": "796600"
  },
  {
    "text": "like we've just seen now the good news is with Amazon elb uh you can easily",
    "start": "796600",
    "end": "803320"
  },
  {
    "text": "switch on the ability to send traffic to multiple azs let's jump back to our architecture here we have what we have",
    "start": "803320",
    "end": "810680"
  },
  {
    "text": "built so far you see the you know database replicated across to azs but our instances are still all in the first",
    "start": "810680",
    "end": "817880"
  },
  {
    "text": "a so by enabling elb for multi-az we can build something like",
    "start": "817880",
    "end": "825000"
  },
  {
    "text": "this you see traffic is coming into elb and we're Distributing traffic evenly",
    "start": "825000",
    "end": "830600"
  },
  {
    "text": "across two availability zones and each of the zones is running uh you in this",
    "start": "830600",
    "end": "836639"
  },
  {
    "text": "case two two instances and it's a best practice to run on um the the same amount of instances in each each Z",
    "start": "836639",
    "end": "844120"
  },
  {
    "text": "now this is the core architecture drawing that that you really should um",
    "start": "844120",
    "end": "849720"
  },
  {
    "text": "you know take take home with you in fact and um you know make sure uh you you use",
    "start": "849720",
    "end": "854800"
  },
  {
    "text": "these methodologies uh in in your system um in fact this is how the vast majority",
    "start": "854800",
    "end": "860440"
  },
  {
    "text": "of customers ensure that their system is highly available for example noia seen networks um based out of Finland this is",
    "start": "860440",
    "end": "867199"
  },
  {
    "text": "what they do this is how they ensure that system is highly available very critical",
    "start": "867199",
    "end": "873160"
  },
  {
    "text": "and yeah all right we talked about multiple availability zones and how to",
    "start": "873160",
    "end": "878199"
  },
  {
    "start": "875000",
    "end": "875000"
  },
  {
    "text": "use them in fact I I want to give a brief example of how not to use them for example it would be incorrect to just",
    "start": "878199",
    "end": "884519"
  },
  {
    "text": "randomly spread your instances across azs or for example even worse put all",
    "start": "884519",
    "end": "889720"
  },
  {
    "text": "your front ends into one a and all your app servers into the into the second a",
    "start": "889720",
    "end": "895800"
  },
  {
    "text": "that's not how you want to use them cuz now you actually made things worse the right way of doing it is to put isolated",
    "start": "895800",
    "end": "901639"
  },
  {
    "text": "application Stacks or independent application Stacks into each zone so that if one zone fails the system",
    "start": "901639",
    "end": "908199"
  },
  {
    "text": "continues to run so you know if aliens were to come down from from space and take out one of those azs your system",
    "start": "908199",
    "end": "914639"
  },
  {
    "text": "continues to run out of the other a so check that out next we'll talk about",
    "start": "914639",
    "end": "922079"
  },
  {
    "text": "scaling why is scaling important in in the context of high Avail High",
    "start": "922079",
    "end": "927320"
  },
  {
    "text": "availability well if your system becomes extremely popular",
    "start": "927320",
    "end": "934000"
  },
  {
    "text": "overnight you need to be able to scale up and provision enough capacity to",
    "start": "934000",
    "end": "939560"
  },
  {
    "text": "handle the peak demand so elasticity is one of the key um architecture patterns",
    "start": "939560",
    "end": "946040"
  },
  {
    "text": "here that you want to embrace and this is what the cloud is is really good at so you you need to be able to scale up",
    "start": "946040",
    "end": "951920"
  },
  {
    "text": "and be ready to scale up when you expect demand most because your users will not be able to differentiate between your",
    "start": "951920",
    "end": "958160"
  },
  {
    "text": "system not being a available because there's a failure or your system not being available because there are millions of other users knocking on the",
    "start": "958160",
    "end": "965040"
  },
  {
    "text": "door at the same time let's go back what we have built so far we see our system",
    "start": "965040",
    "end": "970560"
  },
  {
    "text": "across two availability zones now I'd like to introduce you to Cloud watch",
    "start": "970560",
    "end": "976399"
  },
  {
    "text": "Cloud watch is a monitoring service for your AWS resources in this case we're",
    "start": "976399",
    "end": "982399"
  },
  {
    "text": "looking at Cloud watch for ec2 instances here you get metrics like CPU disc",
    "start": "982399",
    "end": "988959"
  },
  {
    "text": "utilization Network utilization and so on and Cloud watch in combination with",
    "start": "988959",
    "end": "995800"
  },
  {
    "text": "our autoscaling service makes it really easy to scale up and scale down your ec2",
    "start": "995800",
    "end": "1001880"
  },
  {
    "start": "997000",
    "end": "997000"
  },
  {
    "text": "capacity basically you can configure these systems such that ec2 instances",
    "start": "1001880",
    "end": "1008040"
  },
  {
    "text": "that for in in this example like we'll see in a moment run your web server are added automatically based on for example",
    "start": "1008040",
    "end": "1015279"
  },
  {
    "text": "CPU utilization let's jump in and see how this looks like now you can you know",
    "start": "1015279",
    "end": "1021199"
  },
  {
    "text": "back to our architecture you see that uh these instances are now U monitored by",
    "start": "1021199",
    "end": "1026280"
  },
  {
    "text": "Cloud watch and you know systems are running what we will do is we add a",
    "start": "1026280",
    "end": "1033038"
  },
  {
    "text": "allos scaling group to uh basically manage these systems now and as load",
    "start": "1033039",
    "end": "1040720"
  },
  {
    "text": "increases you'll see the servers are starting to run hot you know CPU is is",
    "start": "1040720",
    "end": "1046079"
  },
  {
    "text": "running higher and they are slowly um maxed out now Cloud watch is going to",
    "start": "1046079",
    "end": "1052200"
  },
  {
    "text": "send CPU metrics to autoscaling and Autos scaling would have been configured",
    "start": "1052200",
    "end": "1057240"
  },
  {
    "text": "to basically um you know look at the threshold and the trigger that it needs to use and then the Autos scaling policy",
    "start": "1057240",
    "end": "1064480"
  },
  {
    "text": "will kick in where you B tell it which image or Amazon machine image to go and",
    "start": "1064480",
    "end": "1069840"
  },
  {
    "text": "launch and at this point autoscaling will automatically provision additional web",
    "start": "1069840",
    "end": "1075600"
  },
  {
    "text": "servers here we can see how these machines are starting and note how uh the low balcer only continues to send",
    "start": "1075600",
    "end": "1082799"
  },
  {
    "text": "traffic to the existing instances because it's uh communicating with autoscaling and it's doing its health",
    "start": "1082799",
    "end": "1088960"
  },
  {
    "text": "checks it's basically knowing that um those those instances are not ready yet but the moment they're ready to take",
    "start": "1088960",
    "end": "1095400"
  },
  {
    "text": "traffic you see that uh low balancing will send traffic to now six instances",
    "start": "1095400",
    "end": "1101000"
  },
  {
    "text": "that are equally spread across two zones and you also see that the system is no long no longer running hot so this",
    "start": "1101000",
    "end": "1108440"
  },
  {
    "text": "example scales from two to three instances in each a but we have customers who scale from you know 40 to",
    "start": "1108440",
    "end": "1114200"
  },
  {
    "text": "80 to 120 instances so this is really uh configurable and and flexible now when",
    "start": "1114200",
    "end": "1120440"
  },
  {
    "text": "the demand is going down again you uh see that the systems are running cooler",
    "start": "1120440",
    "end": "1126000"
  },
  {
    "text": "and auto scaling would be configured to basically take away capacity that is no longer used so here with three instances",
    "start": "1126000",
    "end": "1133360"
  },
  {
    "text": "running colder you could actually shoulder that load with just two instances and it would save you you",
    "start": "1133360",
    "end": "1139000"
  },
  {
    "text": "money so autoscaling will first talk to the lad balance load balancer and say",
    "start": "1139000",
    "end": "1144600"
  },
  {
    "text": "look stop sending traffic to those instance I'm about to take them down and it will then shut down the systems um",
    "start": "1144600",
    "end": "1151400"
  },
  {
    "text": "the low balancer will continue to send traffic to just two instances and we're back to how we were in the",
    "start": "1151400",
    "end": "1159320"
  },
  {
    "text": "beginning now autoscaling is a good way to deal with unexpected spikes we've seen that",
    "start": "1159320",
    "end": "1166200"
  },
  {
    "start": "1160000",
    "end": "1160000"
  },
  {
    "text": "you know automatically adds capacity as needed but it kind of depends on how quickly",
    "start": "1166200",
    "end": "1171960"
  },
  {
    "text": "your image or your army is ready in operational State sometimes it might take a couple of minutes or even 15",
    "start": "1171960",
    "end": "1178159"
  },
  {
    "text": "minutes you know depending on what you have to do on this instance or on this Army to get it ready to be operational",
    "start": "1178159",
    "end": "1184520"
  },
  {
    "text": "so you might consider just having a little bit of extra Headroom by just uh",
    "start": "1184520",
    "end": "1189720"
  },
  {
    "text": "you know adding one or two instances just in case you have a couple of unexpected spikes now for expected",
    "start": "1189720",
    "end": "1196200"
  },
  {
    "text": "spikes gets even easier AO scaling has a time-based trigger that can be",
    "start": "1196200",
    "end": "1202000"
  },
  {
    "text": "configured and in a lot of cases that's what customers will do for example you very well know when for example the um",
    "start": "1202000",
    "end": "1209640"
  },
  {
    "text": "uh Olympic Games in London started there's no surprise there you know people people know the day and the time",
    "start": "1209640",
    "end": "1214919"
  },
  {
    "text": "or if you're building an application in support of a TV show you know when that share when that show is on the air and",
    "start": "1214919",
    "end": "1220960"
  },
  {
    "text": "you can scale up accordingly now we talked about the front ends up until now and I briefly",
    "start": "1220960",
    "end": "1228360"
  },
  {
    "start": "1224000",
    "end": "1224000"
  },
  {
    "text": "want to make make one or two points about the data tier and actually want to go back to the slide I showed in the",
    "start": "1228360",
    "end": "1234200"
  },
  {
    "text": "beginning we offer quite a few services that are highly available and scalable",
    "start": "1234200",
    "end": "1239919"
  },
  {
    "text": "and fall tolerant by themselves so a really way to really easy way to add for",
    "start": "1239919",
    "end": "1245039"
  },
  {
    "text": "example a scalable storage system to to your architecture is simply by using",
    "start": "1245039",
    "end": "1250280"
  },
  {
    "text": "Amazon S3 and you don't have to worry about it it will worry about the scaling and all these aspects of of high",
    "start": "1250280",
    "end": "1256320"
  },
  {
    "text": "availability or if you need a high performance scalable database can use Dynamo DB and all these",
    "start": "1256320",
    "end": "1263600"
  },
  {
    "text": "things are taken care of for you so this makes it really convenient and easy to build really highly available",
    "start": "1263600",
    "end": "1271640"
  },
  {
    "text": "systems all right this was the point around scaling again um Auto scaling and",
    "start": "1271640",
    "end": "1277360"
  },
  {
    "text": "Cloud watch can be used um to scale up and scale down as needed you can keep some extra capacity around um what's",
    "start": "1277360",
    "end": "1284960"
  },
  {
    "text": "what's really important here and uh you know this this talk will not go into a lot of detail here but think about how",
    "start": "1284960",
    "end": "1290720"
  },
  {
    "text": "you package your images or your army so that they uh themselves get into a state",
    "start": "1290720",
    "end": "1296039"
  },
  {
    "text": "where they are usable like wner fogles was saying earlier you don't want to SSH into into machine in order to get it",
    "start": "1296039",
    "end": "1302200"
  },
  {
    "text": "ready and running you want to automate that and this makes assumption that you have built your system so that",
    "start": "1302200",
    "end": "1309200"
  },
  {
    "start": "1310000",
    "end": "1310000"
  },
  {
    "text": "happens this brings me to my fourth Point selfhealing here we want to look at um",
    "start": "1310279",
    "end": "1317679"
  },
  {
    "text": "detecting failures automatically and recovering from failures automatically",
    "start": "1317679",
    "end": "1323320"
  },
  {
    "text": "let's jump straight in and remember how we talked about the elb health checks in",
    "start": "1323320",
    "end": "1328440"
  },
  {
    "text": "our first lesson and Autos scaling just now now we're going to look at combining",
    "start": "1328440",
    "end": "1336120"
  },
  {
    "text": "those in our architecture now we see what we have built so far remember we have our web servers in the autoscaling",
    "start": "1336200",
    "end": "1343520"
  },
  {
    "text": "groups and we have elastic load balancer configured to spread traffic across those instances in this case now when an",
    "start": "1343520",
    "end": "1351360"
  },
  {
    "text": "instance goes down the health check in combination with autoscaling actually",
    "start": "1351360",
    "end": "1356919"
  },
  {
    "text": "does the trick here it'll detect that the system is bad autoscaling automatically terminates the bad",
    "start": "1356919",
    "end": "1363640"
  },
  {
    "text": "instance and brings up a new one and when that system is up and running um",
    "start": "1363640",
    "end": "1368919"
  },
  {
    "text": "the the the low balcer again um spreads traffic ac across all instances now here",
    "start": "1368919",
    "end": "1374120"
  },
  {
    "text": "we show that we simply throw away the old instance that's generally a good practice it's it's often not very",
    "start": "1374120",
    "end": "1379640"
  },
  {
    "text": "interesting to find out why exactly the system failed however you can very well keep that system around as well for",
    "start": "1379640",
    "end": "1385520"
  },
  {
    "text": "debugging or you know if you have that memory leag trying to understand um you know how how to fix it or where it",
    "start": "1385520",
    "end": "1390799"
  },
  {
    "text": "happens so that's also possible so we've seen here that health checks in combination with Autos scaling",
    "start": "1390799",
    "end": "1398400"
  },
  {
    "text": "gives you selfhealing systems but at this point I want to briefly talk about the concept of a degraded mode as well",
    "start": "1398400",
    "end": "1405799"
  },
  {
    "start": "1402000",
    "end": "1402000"
  },
  {
    "text": "because sometimes you just need more time imagine for example you have um a",
    "start": "1405799",
    "end": "1411000"
  },
  {
    "text": "problem at the data tier and you need to restore your database from a snapshot or you need to go and do something else",
    "start": "1411000",
    "end": "1416880"
  },
  {
    "text": "that just takes longer you want to buy yourself time and one way of doing this is to switch your system into degraded",
    "start": "1416880",
    "end": "1423640"
  },
  {
    "text": "mode what this means basically not every feature is fully functioning U maybe some parts of the system are readon or",
    "start": "1423640",
    "end": "1431240"
  },
  {
    "text": "maybe maybe even the entire system is read only but it is highly available if customers use their web browsers and uh",
    "start": "1431240",
    "end": "1438159"
  },
  {
    "text": "come visit your site they will at least see something and not you know get get a get a error response so a really easy",
    "start": "1438159",
    "end": "1445799"
  },
  {
    "text": "way to implement the degraded mode is to use Amazon S3's ability to host thetic",
    "start": "1445799",
    "end": "1452440"
  },
  {
    "text": "websites and then using Amazon rod 53 to basically shift traffic back and forth",
    "start": "1452440",
    "end": "1459039"
  },
  {
    "text": "between the static website in S3 and your production system that we have just built so let's go back to the drawing",
    "start": "1459039",
    "end": "1466120"
  },
  {
    "text": "board here let you know first this one to show you a snapshot here of a sorry screenshot here of how easy it is to",
    "start": "1466120",
    "end": "1472399"
  },
  {
    "text": "configure uh S3 for hosting your static website you basically check a mark and",
    "start": "1472399",
    "end": "1478240"
  },
  {
    "text": "tell it what is what the URI is and S3 does does the rest to um to host your",
    "start": "1478240",
    "end": "1484120"
  },
  {
    "text": "static website and you know static here means it's static from the perspective",
    "start": "1484120",
    "end": "1489320"
  },
  {
    "text": "of the server you can very well have some clever client side scripting in there that still gives a reasonably good",
    "start": "1489320",
    "end": "1495159"
  },
  {
    "text": "experience to your customers okay now we going to jump to the architecture drawing here we see how",
    "start": "1495159",
    "end": "1501600"
  },
  {
    "text": "um the record set in Route 53 is configured to send 100% of the traffic",
    "start": "1501600",
    "end": "1507039"
  },
  {
    "text": "over to your production system and you also see that the S3 website is is in",
    "start": "1507039",
    "end": "1512760"
  },
  {
    "text": "there but the waiting is set to zero that means that 0% of the um you know",
    "start": "1512760",
    "end": "1518440"
  },
  {
    "text": "DNS resolutions are going to S3 at this point and if you want to go into degraded mode it's as simple as shifting",
    "start": "1518440",
    "end": "1524760"
  },
  {
    "text": "those weights around so instead of sending 100% of the traffic to your production side you would send all that",
    "start": "1524760",
    "end": "1531200"
  },
  {
    "text": "traffic against the static side hosted in S3 and now you bought yourself time",
    "start": "1531200",
    "end": "1536720"
  },
  {
    "text": "now you can go back and uh do anything you need need to do to your system to get it back up and running you could",
    "start": "1536720",
    "end": "1542760"
  },
  {
    "text": "also you know here in this example I showed how to shift between uh your production system behind elb and using a",
    "start": "1542760",
    "end": "1548799"
  },
  {
    "text": "database like we like we build here and S3 but you could also have multiple systems um uh around so you can switch",
    "start": "1548799",
    "end": "1556799"
  },
  {
    "text": "traffic back and forth as you want to now when your system is back up and running you can either just you know",
    "start": "1556799",
    "end": "1563520"
  },
  {
    "text": "bring 100% of the traffic over or you can also do this more gradually um you know in case you're you're not quite",
    "start": "1563520",
    "end": "1568679"
  },
  {
    "text": "sure if you uh fixed the bottleneck or if it's all working so you can do it more gradually if you want",
    "start": "1568679",
    "end": "1574720"
  },
  {
    "text": "to all right here we talked about selfhealing um again the uh elb health",
    "start": "1574720",
    "end": "1580279"
  },
  {
    "text": "checks in combination with autoscaling and uh we talked about the concept of the degraded",
    "start": "1580279",
    "end": "1586360"
  },
  {
    "text": "mode the last best practice year is loose coupling this is really a",
    "start": "1586360",
    "end": "1592200"
  },
  {
    "text": "fascinating topic and uh we could probably have a whole session on this and I know Warner started talking about",
    "start": "1592200",
    "end": "1597760"
  },
  {
    "text": "this in his keynote uh as well and showed some examples here I want to uh show some additional examples",
    "start": "1597760",
    "end": "1604480"
  },
  {
    "text": "specifically around how to use queuing and buffering",
    "start": "1604480",
    "end": "1609720"
  },
  {
    "text": "um let's remind ourselves why loose coupling is important number one or one",
    "start": "1609720",
    "end": "1615799"
  },
  {
    "text": "one benefit is about scale you can scale the independent stages of your distributed system independently so you",
    "start": "1615799",
    "end": "1624000"
  },
  {
    "text": "can you know really use optimal capacity at each stage and change the amount of",
    "start": "1624000",
    "end": "1629159"
  },
  {
    "text": "capacity seamlessly second point is these Lucy couple systems help you be more fa",
    "start": "1629159",
    "end": "1637000"
  },
  {
    "text": "tolerant because a failure in one of your stages would not impact or would not trickle through to some of the other",
    "start": "1637000",
    "end": "1645120"
  },
  {
    "text": "stages this point I'd like to introduce you to the Amazon on simple Q service",
    "start": "1645120",
    "end": "1650200"
  },
  {
    "text": "sqs um sqs gives you a highly reliable scalable queuing service um in the cloud",
    "start": "1650200",
    "end": "1657200"
  },
  {
    "start": "1652000",
    "end": "1652000"
  },
  {
    "text": "so you can basically pass in messages uh from one area of your distributed system and pick them up somewhere else it's a",
    "start": "1657200",
    "end": "1663559"
  },
  {
    "text": "great way to tie together Loosely coupled or distributed systems",
    "start": "1663559",
    "end": "1669640"
  },
  {
    "text": "now here's an example of how a um system might look like and here is a uh media",
    "start": "1669640",
    "end": "1677399"
  },
  {
    "text": "transcoding pipe line and you know I'm this this example talks about media but this use case is no by no means limited",
    "start": "1677399",
    "end": "1685159"
  },
  {
    "text": "to Media we see a lot of applications using these kind of uh Loosely coupled background processing uh you know",
    "start": "1685159",
    "end": "1692039"
  },
  {
    "text": "e-commerce fulfillment uh batch transactions um and and so on so um yes",
    "start": "1692039",
    "end": "1698799"
  },
  {
    "text": "it's it's a media example but please don't think it's limited to to the media space and here what we see we have a",
    "start": "1698799",
    "end": "1706559"
  },
  {
    "text": "three-stage um process between receiving transcoding and um when the transcoding",
    "start": "1706559",
    "end": "1713159"
  },
  {
    "text": "is done to publish and notify customers of of the transcoded media file now the",
    "start": "1713159",
    "end": "1718440"
  },
  {
    "text": "way it's shown here is it's actually tightly coupled because receive directly calls into transcode which directly",
    "start": "1718440",
    "end": "1724600"
  },
  {
    "text": "calls into publish and notify now good and easy way to turn this into a loosy",
    "start": "1724600",
    "end": "1730320"
  },
  {
    "text": "coupled system is by putting sqs in between those stages so that when when a",
    "start": "1730320",
    "end": "1736720"
  },
  {
    "text": "file is received it will go into the the queue the queue buffers it and makes that um your media file available for",
    "start": "1736720",
    "end": "1743159"
  },
  {
    "text": "the next stage which transcode when you're done with transcoding you put it into the buffer and um uh it'll go into",
    "start": "1743159",
    "end": "1749679"
  },
  {
    "text": "the publish and notify stage let's go back to our architecture",
    "start": "1749679",
    "end": "1755480"
  },
  {
    "text": "drawing and this now uh has a couple of additional components I'll describe briefly what we",
    "start": "1755480",
    "end": "1761840"
  },
  {
    "text": "see here on the left bottom is the system that we have built up until now",
    "start": "1761840",
    "end": "1766880"
  },
  {
    "text": "you can see the elastic low balance bcer um spreading traffic across our web",
    "start": "1766880",
    "end": "1771919"
  },
  {
    "text": "servers um then on the um upper left hand side you see we added Dynamo DB to",
    "start": "1771919",
    "end": "1778799"
  },
  {
    "text": "our data tier to uh have a highly scalable and high performing no SQL",
    "start": "1778799",
    "end": "1784240"
  },
  {
    "text": "database that's where we keep metadata on the lower right hand side you see Amazon S3 for storage so we have",
    "start": "1784240",
    "end": "1792640"
  },
  {
    "text": "two buckets here one to store the original media files and one to store the trans",
    "start": "1792640",
    "end": "1798840"
  },
  {
    "text": "files in the upper middle of the of this drawing you see sqs this is the queue",
    "start": "1798840",
    "end": "1804679"
  },
  {
    "text": "and now we have a set of worker nodes that are behind the queue and they pull",
    "start": "1804679",
    "end": "1809720"
  },
  {
    "text": "the que for work this is where the transcoding work happens now I'd like to walk you through um how the system",
    "start": "1809720",
    "end": "1816760"
  },
  {
    "text": "operates by briefly following how a message comes in from the user and flows through this so step one the user",
    "start": "1816760",
    "end": "1823760"
  },
  {
    "text": "uploads a media file it flows through the L balancer through the web server get stored in S3 and you see a message",
    "start": "1823760",
    "end": "1831279"
  },
  {
    "text": "entering sqs here and at this point we have a single message waiting in sqs and",
    "start": "1831279",
    "end": "1838640"
  },
  {
    "text": "you see a single uh original uh media file in",
    "start": "1838640",
    "end": "1844640"
  },
  {
    "text": "S3 now the transcoding worker notes in the background continually pull the",
    "start": "1844640",
    "end": "1851039"
  },
  {
    "text": "queue and once there is a message in the queue one of the workers holds down the",
    "start": "1851039",
    "end": "1857440"
  },
  {
    "text": "message it goes to S3 pulls down the original media file and does its",
    "start": "1857440",
    "end": "1863120"
  },
  {
    "text": "transcoding when the transcoding is done it uploads the transcoded file into S3",
    "start": "1863120",
    "end": "1869279"
  },
  {
    "text": "for storage now this is the normal flow of of the system this point I'd like to introduce",
    "start": "1869279",
    "end": "1876960"
  },
  {
    "start": "1875000",
    "end": "1875000"
  },
  {
    "text": "you to the concept of a visibility timeout you can think of this as the",
    "start": "1876960",
    "end": "1882399"
  },
  {
    "text": "time allowance a worker node has to process a message and if within that visibility time the worker note didn't",
    "start": "1882399",
    "end": "1889399"
  },
  {
    "text": "go back to the queue and acknowledge that hey I'm I'm done with this I'm processed the message goes back into the",
    "start": "1889399",
    "end": "1895799"
  },
  {
    "text": "queue and is eligible again to be processed by other nodes the advantage here is that if there's any kind of",
    "start": "1895799",
    "end": "1902720"
  },
  {
    "text": "failure of the worker node the message is not lost but it gets processed by",
    "start": "1902720",
    "end": "1908000"
  },
  {
    "text": "another node let's take a look at how this looks like in our",
    "start": "1908000",
    "end": "1913200"
  },
  {
    "text": "architecture here again we're at the stage where we have a single message in the cube and you can see the three",
    "start": "1913200",
    "end": "1919720"
  },
  {
    "text": "worker noes in the background uh pulling the queue now again we have one worker note pull down the message get the",
    "start": "1919720",
    "end": "1926919"
  },
  {
    "text": "original file out of S3 but now instead of completing the work let's assume the",
    "start": "1926919",
    "end": "1933039"
  },
  {
    "text": "worker note fails and you see the message is still with the worker note at this point the",
    "start": "1933039",
    "end": "1939519"
  },
  {
    "text": "the que at this point will not know yet that the worker note failed but it will",
    "start": "1939519",
    "end": "1944600"
  },
  {
    "text": "the moment the visibility timeout expires and clearly as this work note worker note has failed it will not have",
    "start": "1944600",
    "end": "1951720"
  },
  {
    "text": "been able to go back to the queuing service and uh you know confirm that the",
    "start": "1951720",
    "end": "1956760"
  },
  {
    "text": "message can be taken out so what happens actually here a quick screenshot",
    "start": "1956760",
    "end": "1961960"
  },
  {
    "text": "on how to set up the visibility timeout it's as easy as going into the Management console and uh adjusting the",
    "start": "1961960",
    "end": "1969639"
  },
  {
    "text": "value uh shown here in the in the UI and it's really you know it's a it's a time span so here in this example we have 10",
    "start": "1969639",
    "end": "1976200"
  },
  {
    "text": "minutes this will work well if you know your transcoding step maybe takes four five six minutes on on average so at 10",
    "start": "1976200",
    "end": "1983880"
  },
  {
    "text": "minutes you know that hey something is wrong something failed we want to start reprocessing the same message on another",
    "start": "1983880",
    "end": "1991120"
  },
  {
    "text": "note all right here we're back the uh worker note now failed and the uh",
    "start": "1991120",
    "end": "1997679"
  },
  {
    "text": "visibility timeout is about to expire what we see now is that the message is",
    "start": "1997679",
    "end": "2002760"
  },
  {
    "text": "actually Back available in the queue eligible to be picked up by another",
    "start": "2002760",
    "end": "2008200"
  },
  {
    "text": "worker node and you see the remaining two worker nodes they continue to pull the queue um and and look for messages",
    "start": "2008200",
    "end": "2014960"
  },
  {
    "text": "in this case it's a rerun of that same message uh one of the other nodes picks up the message and we do the transcoding",
    "start": "2014960",
    "end": "2023440"
  },
  {
    "start": "2023000",
    "end": "2023000"
  },
  {
    "text": "yeah next concept I want to introduce is buffering buffering really helps with uh",
    "start": "2024279",
    "end": "2030639"
  },
  {
    "text": "unexpected demand spikes um if you know all of a sudden have a lot more um media",
    "start": "2030639",
    "end": "2036840"
  },
  {
    "text": "files coming into your system system that needs to be transcod that that need to be transcoded and um this this really",
    "start": "2036840",
    "end": "2043360"
  },
  {
    "text": "allows you to scale the independent stages of your distributed system um",
    "start": "2043360",
    "end": "2048878"
  },
  {
    "text": "accordingly so let's jump straight in and uh see how this looks in action here again the architecture that",
    "start": "2048879",
    "end": "2056200"
  },
  {
    "text": "we have built so far you see a single user here and now let's say your application is really popular and uh you",
    "start": "2056200",
    "end": "2064358"
  },
  {
    "text": "know demand is picking up this is by the way the architecture that a lot of customers are using for this um for",
    "start": "2064359",
    "end": "2070358"
  },
  {
    "text": "example Vio is doing this for uh video files lots of other examples you know",
    "start": "2070359",
    "end": "2076040"
  },
  {
    "text": "NASA is a a a similar approach um this is a really common pattern here so um",
    "start": "2076040",
    "end": "2081839"
  },
  {
    "text": "you hopefully this is something you can um try and introduce into your applications as well so scale is picking",
    "start": "2081839",
    "end": "2088480"
  },
  {
    "text": "up we have now a lot of users and look what's happening to the system a lot",
    "start": "2088480",
    "end": "2093520"
  },
  {
    "text": "more media files are being uploaded a lot more messages are inserted into the queue a lot more um things need to be",
    "start": "2093520",
    "end": "2101640"
  },
  {
    "text": "stored so the system overall is just humming and firing on all cylinders at",
    "start": "2101640",
    "end": "2106760"
  },
  {
    "text": "this time so see however that messages are already",
    "start": "2106760",
    "end": "2114160"
  },
  {
    "text": "piling up at this point so the three worker notes we have in the background are no longer able to keep the queue",
    "start": "2114160",
    "end": "2120480"
  },
  {
    "text": "empty so we have some buffering going on already now since we have configured",
    "start": "2120480",
    "end": "2125760"
  },
  {
    "text": "autoscaling for our front ends look what's happening web servers web",
    "start": "2125760",
    "end": "2131920"
  },
  {
    "text": "server capacity is increased and even more users are being uh being being supported by the system which actually",
    "start": "2131920",
    "end": "2139079"
  },
  {
    "text": "leads to even increased um ingestion of these media files that now need to be",
    "start": "2139079",
    "end": "2145040"
  },
  {
    "text": "transcoded and as with most things in life failures happen at at the worst",
    "start": "2145040",
    "end": "2150800"
  },
  {
    "text": "time so let's assume now we scaled the system even further and Bam we got one",
    "start": "2150800",
    "end": "2156400"
  },
  {
    "text": "of the worker nodes in the bag failing on us as well now we're kind of in a in a bad situation here availability might",
    "start": "2156400",
    "end": "2163480"
  },
  {
    "text": "start suffering because you know as customers or users upload media files they expect a certain responsiveness",
    "start": "2163480",
    "end": "2169800"
  },
  {
    "text": "they want to see that their media gets transcoded and that they get notified and now it's just taking",
    "start": "2169800",
    "end": "2176480"
  },
  {
    "text": "longer got quite a bit piled up in this Queue at this point",
    "start": "2177200",
    "end": "2182480"
  },
  {
    "text": "so what can help us here is cloudwatch metrics for Amazon SQ s we have seen",
    "start": "2182480",
    "end": "2189119"
  },
  {
    "text": "cloudwatch earlier how it works with the instances by basically picking up CPU and some of those metrics well for sqs",
    "start": "2189119",
    "end": "2196000"
  },
  {
    "text": "one of the metrics that is interesting is the number the approximate number of",
    "start": "2196000",
    "end": "2201240"
  },
  {
    "text": "messages in a queue and you can combine this with autoscaling so that autoscaling basically watches the queue",
    "start": "2201240",
    "end": "2208240"
  },
  {
    "text": "and adds and removes capacity based on how many items are in the",
    "start": "2208240",
    "end": "2214240"
  },
  {
    "text": "queue here a screenshot of the console here we can see that it's it's the approximate number of messages visible",
    "start": "2214240",
    "end": "2221079"
  },
  {
    "text": "again visible because of the visibility timeout it could be that there are items in the cube that are not visible that",
    "start": "2221079",
    "end": "2226560"
  },
  {
    "text": "are you know basically being processed by by worker nodes but here we want to look at the at the visible numbers",
    "start": "2226560",
    "end": "2234280"
  },
  {
    "text": "and let's say we configure Autos scaling for this now in the background Autos scaling will now see that there's a pile",
    "start": "2234280",
    "end": "2241720"
  },
  {
    "text": "of messages in the queue and it will provision a bunch of worker nodes and",
    "start": "2241720",
    "end": "2247400"
  },
  {
    "text": "look look at this this is now really picking up the pace here uh you see a lot of uh messages flowing from the Q",
    "start": "2247400",
    "end": "2254280"
  },
  {
    "text": "Service uh to the worker notes and you see that we are really making progress against uh you know transcoding these",
    "start": "2254280",
    "end": "2261040"
  },
  {
    "text": "files in fact you see the number of piled up items in the queue go down quickly and you see how we have a lot of",
    "start": "2261040",
    "end": "2267960"
  },
  {
    "text": "additional transcoded files showing up in S3 so this is good this is you know your system is is responsive again and",
    "start": "2267960",
    "end": "2274800"
  },
  {
    "text": "your customers can pick up the transcoded file quickly and now that the",
    "start": "2274800",
    "end": "2280760"
  },
  {
    "text": "number of messages in the queue has gone down again autoscaling will reprovision capacity and basically",
    "start": "2280760",
    "end": "2287760"
  },
  {
    "text": "bring in the number of worker nodes in the background and this is really nice example where we see two autoscaling",
    "start": "2287760",
    "end": "2294240"
  },
  {
    "text": "groups that really balance capacity on the front end and um in the Loosely",
    "start": "2294240",
    "end": "2299560"
  },
  {
    "text": "coupled back end here so that that's a good example of loose coupling in in action",
    "start": "2299560",
    "end": "2304880"
  },
  {
    "text": "here all right this uh concludes the five steps I want to go through but I'd",
    "start": "2304880",
    "end": "2309920"
  },
  {
    "text": "like to recap quickly just so that you know we really can can remember and take some of these home so first point was",
    "start": "2309920",
    "end": "2318480"
  },
  {
    "text": "about designing for failure here we used elastic Block store and elastic IPS to",
    "start": "2318480",
    "end": "2323680"
  },
  {
    "text": "work around single system failures we looked at how to use health checks and",
    "start": "2323680",
    "end": "2328839"
  },
  {
    "text": "elb we looked at using multiple availability zones but again they have to be used correctly don't just randomly",
    "start": "2328839",
    "end": "2335720"
  },
  {
    "text": "distribute your instances across a put you know don't don't put all your front ends in one a and all app servers into",
    "start": "2335720",
    "end": "2341760"
  },
  {
    "text": "another you got to build independent TXS of the system we look at how to scale up using",
    "start": "2341760",
    "end": "2347920"
  },
  {
    "text": "autoscaling this is critical if if your system is under demand you want to be able to quickly add capacity as needed",
    "start": "2347920",
    "end": "2354280"
  },
  {
    "text": "so that your end user experience is is positive so you know we looked at Auto scaling and how to set it up in",
    "start": "2354280",
    "end": "2360800"
  },
  {
    "text": "combination with Cloud watch here we looked at cell feeling basically",
    "start": "2360800",
    "end": "2366040"
  },
  {
    "text": "detecting issues and correct in them on the Fly and in fact customers really have innovated on this Dimension here",
    "start": "2366040",
    "end": "2372599"
  },
  {
    "text": "there is the Netflix chaos monkey for example that automatically injects failures into the system just just so",
    "start": "2372599",
    "end": "2379560"
  },
  {
    "text": "you exercise the selfhealing ability of your system that's a great best practice lastly we looked at loose",
    "start": "2379560",
    "end": "2386839"
  },
  {
    "text": "coupling we uh saw how we can use sqs the visibility timeout to guard against",
    "start": "2386839",
    "end": "2392800"
  },
  {
    "text": "failures of the worker nodes we have seen how to use buffering to increase and decreased capacity of the system",
    "start": "2392800",
    "end": "2399240"
  },
  {
    "text": "under under demand now remember your goal that your system needs to continue",
    "start": "2399240",
    "end": "2405079"
  },
  {
    "text": "to run so using some of those best practices please make sure your system",
    "start": "2405079",
    "end": "2410720"
  },
  {
    "text": "continues to run yeah lastly the point I want to make is",
    "start": "2410720",
    "end": "2415960"
  },
  {
    "start": "2413000",
    "end": "2413000"
  },
  {
    "text": "it's really about choice if you have a system that is you know for for development or testing or staging",
    "start": "2415960",
    "end": "2422560"
  },
  {
    "text": "purposes you might not need High availability you can save some money that's why some of those service services like ec2 and RDS they give you",
    "start": "2422560",
    "end": "2430440"
  },
  {
    "text": "choice if you have a production system it needs to be highly available so make sure you uh follow these five best",
    "start": "2430440",
    "end": "2437520"
  },
  {
    "text": "practices and some of the other ones to um make sure you have the right availability in",
    "start": "2437520",
    "end": "2443960"
  },
  {
    "text": "place a couple of resources we have uh the architecture Center Online this is where the solutions architecture team",
    "start": "2443960",
    "end": "2450640"
  },
  {
    "text": "provides best practices you find reference architectures there you find some white papers there um go there and",
    "start": "2450640",
    "end": "2457000"
  },
  {
    "text": "and read more if this is something interesting to you we have technical articles as well I'm sure many of you",
    "start": "2457000",
    "end": "2462440"
  },
  {
    "text": "have seen the AWS blog um and we also have a series of podcasts which um uh",
    "start": "2462440",
    "end": "2468079"
  },
  {
    "text": "you know illustrat some of these Concepts some related content specifically here at this conference um",
    "start": "2468079",
    "end": "2475319"
  },
  {
    "text": "shortly after 4:00 we have two uh talks that uh are are interesting and related",
    "start": "2475319",
    "end": "2480880"
  },
  {
    "text": "to this we have an intro to the chaos monkey uh so this is a great way to",
    "start": "2480880",
    "end": "2486280"
  },
  {
    "text": "learn more about the selfie dealing and you know what how how tools can um you know basically help you build system",
    "start": "2486280",
    "end": "2491839"
  },
  {
    "text": "that are highly available so if you know go go and see that one we also have a session about scale um also at the same",
    "start": "2491839",
    "end": "2499839"
  },
  {
    "text": "time so this about scaling mobile applications and web apps if you're Keen to we also have Hands-On labs and that",
    "start": "2499839",
    "end": "2507480"
  },
  {
    "text": "two that are relevant or related to the session there is lab number four which deals with scaling and there's lab",
    "start": "2507480",
    "end": "2514000"
  },
  {
    "text": "number 12 about loose coupling and I'm going to be around later I'll be outside",
    "start": "2514000",
    "end": "2519560"
  },
  {
    "text": "the the room in after this presentation if you have questions we also have the booth with solution architects in the in",
    "start": "2519560",
    "end": "2525880"
  },
  {
    "text": "the main room we all we all be all would be very happy to uh uh help you talk",
    "start": "2525880",
    "end": "2531480"
  },
  {
    "text": "through some of your questions that you might have",
    "start": "2531480",
    "end": "2535240"
  }
]