[
  {
    "text": "hi welcome to another episode of build with DynamoDB my name is Enzo chime and",
    "start": "3830",
    "end": "10559"
  },
  {
    "text": "oseco specialist focusing DynamoDB and today we're going to talk about advanced no sequel data modeling with Amazon",
    "start": "10559",
    "end": "17190"
  },
  {
    "text": "DynamoDB so we started last time with an example about modeling a movie database",
    "start": "17190",
    "end": "23310"
  },
  {
    "text": "so I'd like to take that example to completion this time and to really focus on the steps involved in the modeling so",
    "start": "23310",
    "end": "30420"
  },
  {
    "text": "this is an interesting example because well we can all relate to movies and",
    "start": "30420",
    "end": "35450"
  },
  {
    "text": "rather than go with a very simple tutorial data model from DynamoDB",
    "start": "35450",
    "end": "41790"
  },
  {
    "text": "documentation I extended it to include additional entities so that we have",
    "start": "41790",
    "end": "46910"
  },
  {
    "text": "movies movie actor and director entity",
    "start": "46910",
    "end": "52079"
  },
  {
    "text": "so I'm using an entity relationship diagram to show these entities as well",
    "start": "52079",
    "end": "58379"
  },
  {
    "text": "as relationships between them so an entity is an abstraction it can be",
    "start": "58379",
    "end": "63390"
  },
  {
    "text": "anything that we're modeling in our software model or database model from",
    "start": "63390",
    "end": "68850"
  },
  {
    "text": "real life in our case we have movies we have actors and we have directors and our access patterns really reflect these",
    "start": "68850",
    "end": "78720"
  },
  {
    "text": "entities right we have an access pattern that's about finding a movie or actor or",
    "start": "78720",
    "end": "84060"
  },
  {
    "text": "director by name or get movie details get actor details and so on then we also",
    "start": "84060",
    "end": "89970"
  },
  {
    "text": "have relationships in in access patterns movies and directors and actors find all",
    "start": "89970",
    "end": "97950"
  },
  {
    "text": "directors that an actor has worked with one way to think about to think about entities is they are always represented",
    "start": "97950",
    "end": "106200"
  },
  {
    "text": "using a noun and and relationships are represented usually using a verb so for",
    "start": "106200",
    "end": "112320"
  },
  {
    "text": "example an actor has worked with a director a movie has actors and so on so",
    "start": "112320",
    "end": "119280"
  },
  {
    "text": "let's see what one other thing actually entities can be independently",
    "start": "119280",
    "end": "125159"
  },
  {
    "text": "identifiable which is the case here movies can stand on their own we can",
    "start": "125159",
    "end": "131190"
  },
  {
    "text": "movie a movie an actor and a director",
    "start": "131190",
    "end": "136410"
  },
  {
    "text": "and D on its own by contrast for example we might want to have photos associated",
    "start": "136410",
    "end": "144720"
  },
  {
    "text": "with an actor or or a director and when if we decide to ever remove that record",
    "start": "144720",
    "end": "150630"
  },
  {
    "text": "that photo would be removed together with the actor or a director record so",
    "start": "150630",
    "end": "156150"
  },
  {
    "text": "that's a weak entity that's a or a child entity right and let's see how how we",
    "start": "156150",
    "end": "165150"
  },
  {
    "text": "model these these entities and so looking at our entity relationship",
    "start": "165150",
    "end": "171780"
  },
  {
    "text": "diagram and by the way I didn't mention the only reason I have my phone here is so that I can get notified about maybe",
    "start": "171780",
    "end": "181110"
  },
  {
    "text": "something questions that you you all might have in the in the chat room today",
    "start": "181110",
    "end": "186330"
  },
  {
    "text": "I also have my coworker on on the same team we work together beat Mahler he's",
    "start": "186330",
    "end": "193200"
  },
  {
    "text": "in the chat room answering your questions and I'm just hoping that I'll",
    "start": "193200",
    "end": "198480"
  },
  {
    "text": "remember to pay attention to to my phone and you know if you guys have",
    "start": "198480",
    "end": "205140"
  },
  {
    "text": "interesting questions the idea is that I can get a master here if not if I forget",
    "start": "205140",
    "end": "210930"
  },
  {
    "text": "miss we always have next time so anyway back back to entities and relationships",
    "start": "210930",
    "end": "218280"
  },
  {
    "text": "so the easiest place to start is to model these entities right and and this",
    "start": "218280",
    "end": "227459"
  },
  {
    "text": "is a stab at modeling showing a movie actor and a director item in what will",
    "start": "227459",
    "end": "234510"
  },
  {
    "text": "become our our table and our data model as you remember from one of the previous",
    "start": "234510",
    "end": "240060"
  },
  {
    "text": "shows we talked about modeling many to many relationships right and that takes",
    "start": "240060",
    "end": "245160"
  },
  {
    "text": "table a table and a GSI so it also takes having a partition and sort key so that",
    "start": "245160",
    "end": "252720"
  },
  {
    "text": "the partition and sort key are reversed between the table and and a GSI so",
    "start": "252720",
    "end": "259840"
  },
  {
    "text": "one of the things of course that we need to think about is about each entity what data that does it have what properties",
    "start": "259840",
    "end": "266530"
  },
  {
    "text": "does it have that we want to show in a view for that entity and the other thing",
    "start": "266530",
    "end": "273970"
  },
  {
    "text": "we need to think about is a partition key in our case this partition key will actually uniquely identify each entity",
    "start": "273970",
    "end": "281410"
  },
  {
    "text": "even though we have a short key short key is really reserved to model relationships with other entities so in",
    "start": "281410",
    "end": "289240"
  },
  {
    "text": "this case we're using a unique identifier for these entities movies are",
    "start": "289240",
    "end": "295360"
  },
  {
    "text": "kind of strange right we're kind of strained a little bit from the the",
    "start": "295360",
    "end": "300820"
  },
  {
    "text": "common the standard best practice of using a known pattern to form for our",
    "start": "300820",
    "end": "308320"
  },
  {
    "text": "primary or partition key and that's simply because it's hard to find something that's inherent in in movie",
    "start": "308320",
    "end": "316240"
  },
  {
    "text": "data in the movie record that uniquely identifies it title itself as you know",
    "start": "316240",
    "end": "321850"
  },
  {
    "text": "is not enough if we combine title and year we're still not really certain that",
    "start": "321850",
    "end": "327490"
  },
  {
    "text": "that'll work and so the foolproof failsafe approach is to use a unique ID",
    "start": "327490",
    "end": "335020"
  },
  {
    "text": "in this case and and we're gonna do the same for actors and directors and the",
    "start": "335020",
    "end": "341380"
  },
  {
    "text": "reason is this is public information about actors and directors or I mean",
    "start": "341380",
    "end": "346560"
  },
  {
    "text": "normally in the people database there is something else that uniquely identifies a person entity right that could be an",
    "start": "346560",
    "end": "354400"
  },
  {
    "text": "email address or something else right so",
    "start": "354400",
    "end": "359760"
  },
  {
    "text": "in our case I decided to for for these items that that contain entity specific",
    "start": "359760",
    "end": "366910"
  },
  {
    "text": "data I'm actually just going to repeat the partition key as that as the sort",
    "start": "366910",
    "end": "372580"
  },
  {
    "text": "key as well and that will come in handy later by the way that doesn't have to be",
    "start": "372580",
    "end": "378000"
  },
  {
    "text": "the same right you could choose to call this something else it's it's your own",
    "start": "378000",
    "end": "384280"
  },
  {
    "text": "convention right sometimes you see this called out as metadata right sort keys",
    "start": "384280",
    "end": "391970"
  },
  {
    "text": "metadata for it for the entity item or a zero record or something like that that",
    "start": "391970",
    "end": "397280"
  },
  {
    "text": "we know represents that sort of entity specific item so now that we have",
    "start": "397280",
    "end": "403040"
  },
  {
    "text": "entities and and we know what we want to show for each entity view if its movie",
    "start": "403040",
    "end": "408460"
  },
  {
    "text": "will will show here s name is the search name so we'll see how we use that in in",
    "start": "408460",
    "end": "416300"
  },
  {
    "text": "a GSI if we're looking for for for a movie same for actor or director and",
    "start": "416300",
    "end": "422750"
  },
  {
    "text": "then we we have of course all these other attributes that we're interested in next let's look at how we model",
    "start": "422750",
    "end": "431900"
  },
  {
    "text": "relationships between different entities so to model a relationship we need we",
    "start": "431900",
    "end": "437960"
  },
  {
    "text": "need a sort key right and so relationships are identified by the combination of the partition and sort",
    "start": "437960",
    "end": "443750"
  },
  {
    "text": "key and and of course that's a two-way relationship one way one direction movie",
    "start": "443750",
    "end": "450680"
  },
  {
    "text": "actor is modeled by the table in this example the other side of that relationship actor movie is modeled by",
    "start": "450680",
    "end": "458240"
  },
  {
    "text": "the by the GSI so the interesting thing about that the data that we have in this relationship record has to satisfy both",
    "start": "458240",
    "end": "465530"
  },
  {
    "text": "views so if we're showing a movie detail we're likely to have actor name",
    "start": "465530",
    "end": "472360"
  },
  {
    "text": "character CEO is the credit order but then you might wonder why do I need a",
    "start": "472360",
    "end": "478190"
  },
  {
    "text": "title again I know that I mean in the movie detail for this title well we'll need title for the other side of that",
    "start": "478190",
    "end": "484970"
  },
  {
    "text": "relationship for the actor movie so if requiring the GSI for an actor and we",
    "start": "484970",
    "end": "492890"
  },
  {
    "text": "want to show what movies they they were in if we don't have the title all we",
    "start": "492890",
    "end": "500000"
  },
  {
    "text": "have is the partition key the ID so then we would have to actually make an extra query to get the title since we want to",
    "start": "500000",
    "end": "508100"
  },
  {
    "text": "really satisfy the whole view with the with a single query single request we",
    "start": "508100",
    "end": "514190"
  },
  {
    "text": "will just add the title into the relationship record so the idea here is that that we can really minimize",
    "start": "514190",
    "end": "520940"
  },
  {
    "text": "number of round trips that we do with the database and show basically the",
    "start": "520940",
    "end": "528410"
  },
  {
    "text": "information that we need using a single query so if that's a movie detail that's",
    "start": "528410",
    "end": "533570"
  },
  {
    "text": "going to be the table and if it's the actor detail or a director detail that's",
    "start": "533570",
    "end": "540290"
  },
  {
    "text": "going to be the GSI and so speaking of queries and access patterns we should",
    "start": "540290",
    "end": "548420"
  },
  {
    "text": "start with the most important ones and then the question is what are the most",
    "start": "548420",
    "end": "553790"
  },
  {
    "text": "important access patterns right so in our case movie database I'd like to be",
    "start": "553790",
    "end": "560810"
  },
  {
    "text": "able to find a movie that I'm looking for so first I need to be able to find a",
    "start": "560810",
    "end": "566270"
  },
  {
    "text": "movie or an actor or a director and and and then the point of that is so that I",
    "start": "566270",
    "end": "573500"
  },
  {
    "text": "can see detailed detailed information about a given movie that I'm looking for",
    "start": "573500",
    "end": "579230"
  },
  {
    "text": "or an actor or a director so movie database first pattern find the movie",
    "start": "579230",
    "end": "585560"
  },
  {
    "text": "and then show the detail information for for the movie so finding a movie or in",
    "start": "585560",
    "end": "596300"
  },
  {
    "text": "fact person by name will will introduce another global secondary index and we",
    "start": "596300",
    "end": "603110"
  },
  {
    "text": "lose the field attribute s name as the partition key for this global secondary",
    "start": "603110",
    "end": "609380"
  },
  {
    "text": "index so when we search for a name on this index we'll be able to get movies",
    "start": "609380",
    "end": "616640"
  },
  {
    "text": "actors as well as directors using using this single basically GSI so we're",
    "start": "616640",
    "end": "624320"
  },
  {
    "text": "essentially overloading this GSI to get information about all about all entities",
    "start": "624320",
    "end": "631070"
  },
  {
    "text": "that we have now the other thing about GS eyes Lobel secondary indexes we can",
    "start": "631070",
    "end": "638390"
  },
  {
    "text": "project attributes from from the table items that we need and and in this case",
    "start": "638390",
    "end": "643940"
  },
  {
    "text": "we need to figure out once we find a given movie or actor or director what",
    "start": "643940",
    "end": "650600"
  },
  {
    "text": "what are the attributes that we should have that we present in that view and for movies that",
    "start": "650600",
    "end": "658090"
  },
  {
    "text": "could be here simply name name of the movie and the year and in that case the",
    "start": "658090",
    "end": "665200"
  },
  {
    "text": "next step would be from interested in that movie I can click on that movie use",
    "start": "665200",
    "end": "670270"
  },
  {
    "text": "the movie ID I'm gonna use this laser pointer right use the movie ID to get to",
    "start": "670270",
    "end": "677500"
  },
  {
    "text": "the full record about the movie for actors usually we'll see something like",
    "start": "677500",
    "end": "683740"
  },
  {
    "text": "known for so movies shows that are the",
    "start": "683740",
    "end": "689680"
  },
  {
    "text": "best known for and I can I can add that information of those attributes into the",
    "start": "689680",
    "end": "695440"
  },
  {
    "text": "GSI projection for actors and directors so GS eyes are very versatile and and so",
    "start": "695440",
    "end": "704070"
  },
  {
    "text": "here we're using one GSI to to query in",
    "start": "704070",
    "end": "709480"
  },
  {
    "text": "fact different types of data that we have two for each type of data we can",
    "start": "709480",
    "end": "715060"
  },
  {
    "text": "present different attributes that make sense for for that type of data and and",
    "start": "715060",
    "end": "720610"
  },
  {
    "text": "three by not projecting the entire item we're being more efficient possibly cost-effective definitely cost-effective",
    "start": "720610",
    "end": "729310"
  },
  {
    "text": "because the size of that GSI is not necessarily unnecessarily large so how",
    "start": "729310",
    "end": "739570"
  },
  {
    "text": "do we get movie details now that we've let's say search for a given movie blaze",
    "start": "739570",
    "end": "744880"
  },
  {
    "text": "we want to see the details we click on the link in in the in the window and how",
    "start": "744880",
    "end": "753070"
  },
  {
    "text": "do we get the details for for the movie will query the table on on the ID right",
    "start": "753070",
    "end": "759730"
  },
  {
    "text": "so the record in this case should include entity detail right which is",
    "start": "759730",
    "end": "768160"
  },
  {
    "text": "this top top item but also other related information so relationships what actors",
    "start": "768160",
    "end": "775600"
  },
  {
    "text": "are present were in that movie who was the director and and so on",
    "start": "775600",
    "end": "782079"
  },
  {
    "text": "and and the query itself if we query just on the partition key we're going to",
    "start": "782079",
    "end": "788079"
  },
  {
    "text": "get all of the records that have that same petition key so to get the full",
    "start": "788079",
    "end": "793980"
  },
  {
    "text": "item hierarchy as it's called right so all the items that share the same",
    "start": "793980",
    "end": "799869"
  },
  {
    "text": "partition key we just need specify the repetition key",
    "start": "799869",
    "end": "805449"
  },
  {
    "text": "and we have it all now you'll you'll notice that the sort key contains IDs",
    "start": "805449",
    "end": "815199"
  },
  {
    "text": "for actors and movies and we get that whole item hierarchy in a single query",
    "start": "815199",
    "end": "823949"
  },
  {
    "text": "then we might need to basically sort it in a specific order for example actors",
    "start": "823949",
    "end": "830339"
  },
  {
    "text": "we might want to sort in credit order and then display it that way",
    "start": "830339",
    "end": "836049"
  },
  {
    "text": "so next if we want to get actor details by ID we can query the GSI on that actor",
    "start": "836049",
    "end": "843819"
  },
  {
    "text": "ID remember that the search that we did for for a movie we use the same global",
    "start": "843819",
    "end": "849579"
  },
  {
    "text": "secondary index to search for actors as well so that search returns a record",
    "start": "849579",
    "end": "856720"
  },
  {
    "text": "that will include the primary key the partition key for for the actor now we",
    "start": "856720",
    "end": "861730"
  },
  {
    "text": "can get the full detail for the actor research the GSI and and of course the",
    "start": "861730",
    "end": "867490"
  },
  {
    "text": "this record will include all the movies that the actor has been in and and by",
    "start": "867490",
    "end": "874240"
  },
  {
    "text": "the way now we see the reason why we have the title in this record we didn't",
    "start": "874240",
    "end": "880119"
  },
  {
    "text": "need a title for the movie detail because we already know we're in the",
    "start": "880119",
    "end": "885399"
  },
  {
    "text": "movie detail for it for this title but when we do a query on the GSI if we",
    "start": "885399",
    "end": "893379"
  },
  {
    "text": "don't have the title all we have is the the movie ID the partition key and if we",
    "start": "893379",
    "end": "900459"
  },
  {
    "text": "would like to show the the title of the movie then we would either need to query",
    "start": "900459",
    "end": "905980"
  },
  {
    "text": "for the table for that petition key or",
    "start": "905980",
    "end": "911589"
  },
  {
    "text": "we can simply project the title into this record so this record again is is there to",
    "start": "911589",
    "end": "919410"
  },
  {
    "text": "basically include both materialized",
    "start": "919410",
    "end": "924519"
  },
  {
    "text": "views for movie actor as well as actor movie relationships and next if we if we",
    "start": "924519",
    "end": "936370"
  },
  {
    "text": "need to get director details by ID we would again query the GSI on the",
    "start": "936370",
    "end": "941709"
  },
  {
    "text": "director ID and same thing as with actor we would get all the records from the",
    "start": "941709",
    "end": "950019"
  },
  {
    "text": "GSI that have that same director ID as the partition key and so that would",
    "start": "950019",
    "end": "955930"
  },
  {
    "text": "include the entity specific record which is potentially directors bio their birth",
    "start": "955930",
    "end": "964660"
  },
  {
    "text": "and all these other fields maybe a photo and then all the relationship records",
    "start": "964660",
    "end": "971470"
  },
  {
    "text": "for for the movies that that director has has worked on and so that's the",
    "start": "971470",
    "end": "978310"
  },
  {
    "text": "relationship between movies and these other entities actors and and directors",
    "start": "978310",
    "end": "984690"
  },
  {
    "text": "you'll notice that I actually used a different approach for for this",
    "start": "984690",
    "end": "991449"
  },
  {
    "text": "particular record which represents actor director relationship I prepared it with",
    "start": "991449",
    "end": "998800"
  },
  {
    "text": "it with a special prefix because I actually don't want that record to show up when I'm showing the detail for for",
    "start": "998800",
    "end": "1007199"
  },
  {
    "text": "director or or the actor for that matter so we'll go into that next if we want to",
    "start": "1007199",
    "end": "1014850"
  },
  {
    "text": "find all directors that an actor has worked with and we use the actor ID we",
    "start": "1014850",
    "end": "1022620"
  },
  {
    "text": "would query the table for for actor ID and get the record basically item",
    "start": "1022620",
    "end": "1033660"
  },
  {
    "text": "hierarchy that is of all the directors that have worked with that with that",
    "start": "1033660",
    "end": "1039630"
  },
  {
    "text": "actor and the reverse relationship is finding all",
    "start": "1039630",
    "end": "1047600"
  },
  {
    "text": "actors that a director has worked with and for that we use a director ID so here I the reason I have this hash",
    "start": "1047600",
    "end": "1055160"
  },
  {
    "text": "basically is to separate that and prevent it from showing up when I'm when",
    "start": "1055160",
    "end": "1060770"
  },
  {
    "text": "I'm looking for when I'm searching just what a director so in other words when",
    "start": "1060770",
    "end": "1068270"
  },
  {
    "text": "I'm showing the director detail I want to see basically directors bio date of",
    "start": "1068270",
    "end": "1076700"
  },
  {
    "text": "birth and and so on and movies that the director has has done but I don't want",
    "start": "1076700",
    "end": "1082610"
  },
  {
    "text": "to see all the relationships with other actors in that same detail I want that to be an extra step so I'm using a",
    "start": "1082610",
    "end": "1089540"
  },
  {
    "text": "prefix just a convention in in my access pattern and application to to make that",
    "start": "1089540",
    "end": "1096920"
  },
  {
    "text": "an extra step to to basically show the relationships with actors that that",
    "start": "1096920",
    "end": "1103010"
  },
  {
    "text": "movie has worked on now you might wonder what about that particular relationship",
    "start": "1103010",
    "end": "1109550"
  },
  {
    "text": "because if I am looking for all the actors that a director has worked with",
    "start": "1109550",
    "end": "1114800"
  },
  {
    "text": "again here I don't I don't have the actor name I get the if I do this query",
    "start": "1114800",
    "end": "1120710"
  },
  {
    "text": "I am going to get this actor ID but not necessarily the name so to fix that we",
    "start": "1120710",
    "end": "1128150"
  },
  {
    "text": "will simply add actor name to this relationship item and that way we're",
    "start": "1128150",
    "end": "1136910"
  },
  {
    "text": "doing a single query to satisfy the question to answer the question what",
    "start": "1136910",
    "end": "1142310"
  },
  {
    "text": "actors has this director worked with also an actor can work with the same or",
    "start": "1142310",
    "end": "1149510"
  },
  {
    "text": "director of multiple times and vice versa how do we represent that there is",
    "start": "1149510",
    "end": "1156890"
  },
  {
    "text": "more than one way to do that clearly this relationship this item has",
    "start": "1156890",
    "end": "1163070"
  },
  {
    "text": "to be uniquely identifiable between the petition and sort key right so one way",
    "start": "1163070",
    "end": "1168620"
  },
  {
    "text": "we can do that is simply have an attribute in this record that's",
    "start": "1168620",
    "end": "1175809"
  },
  {
    "text": "a collection of titles that that are about collaboration between these two",
    "start": "1175809",
    "end": "1181950"
  },
  {
    "text": "persons so it could maybe be a list of titles and each item in in the in the",
    "start": "1181950",
    "end": "1190510"
  },
  {
    "text": "list could include the movie ID the title and an year that way if we're",
    "start": "1190510",
    "end": "1196539"
  },
  {
    "text": "showing this relationship we can actually see all the all the work all",
    "start": "1196539",
    "end": "1202059"
  },
  {
    "text": "the collaborations that they've had and and in fact not only that another way to",
    "start": "1202059",
    "end": "1208059"
  },
  {
    "text": "model this would be to say well okay it's a relationship but sometimes it",
    "start": "1208059",
    "end": "1214120"
  },
  {
    "text": "makes sense to promote the relationship into a full-blown entity so in that case",
    "start": "1214120",
    "end": "1220059"
  },
  {
    "text": "we can call this relationship a collaboration and if we do that that means that this new entity should have",
    "start": "1220059",
    "end": "1227529"
  },
  {
    "text": "its own petition key so we would create a petition for collaboration and in that",
    "start": "1227529",
    "end": "1233679"
  },
  {
    "text": "case every collaboration would be a unique record a unique item in in",
    "start": "1233679",
    "end": "1238899"
  },
  {
    "text": "dynamodb so this is just a couple of different ways that we can model these things and and and it really goes back",
    "start": "1238899",
    "end": "1247330"
  },
  {
    "text": "to what makes sense for particular access pattern from performance",
    "start": "1247330",
    "end": "1253299"
  },
  {
    "text": "perspective as well as cost perspective right we we're always aware of the goals",
    "start": "1253299",
    "end": "1259659"
  },
  {
    "text": "right of these data modeling exercises right we want to be able to effectively",
    "start": "1259659",
    "end": "1265480"
  },
  {
    "text": "efficiently answer questions from a database in a way that's going to scale",
    "start": "1265480",
    "end": "1270690"
  },
  {
    "text": "and perform at scale and that's going to be cost effective as well so next we",
    "start": "1270690",
    "end": "1280360"
  },
  {
    "text": "have a version two of this data model it's a it's a kind of a change to the",
    "start": "1280360",
    "end": "1288460"
  },
  {
    "text": "data model that's really based on the notion that one person in this case ethan hawke is",
    "start": "1288460",
    "end": "1297070"
  },
  {
    "text": "both a director and an actor and is is there is there a different way to model",
    "start": "1297070",
    "end": "1303370"
  },
  {
    "text": "that and and of course there is there's always a different way to model",
    "start": "1303370",
    "end": "1308480"
  },
  {
    "text": "something and really again goes back to what makes sense for your access patterns and and materialized views",
    "start": "1308480",
    "end": "1318710"
  },
  {
    "text": "right the shape of data the velocity of data the other question is we haven't",
    "start": "1318710",
    "end": "1324920"
  },
  {
    "text": "really talked about how do we update these things right and and for example in this case if we have ethan hawke",
    "start": "1324920",
    "end": "1331280"
  },
  {
    "text": "actor and ethan hawke director we effectively have two entity records for",
    "start": "1331280",
    "end": "1339400"
  },
  {
    "text": "basically the same person so one situation that's that's possible as a",
    "start": "1339400",
    "end": "1345110"
  },
  {
    "text": "result of that would be that if you if these two entities are not really kept",
    "start": "1345110",
    "end": "1350660"
  },
  {
    "text": "in sync somehow you could go to the information a record about the actor",
    "start": "1350660",
    "end": "1356570"
  },
  {
    "text": "ethan hawke and see that you know the bio is slightly different from the bio",
    "start": "1356570",
    "end": "1363980"
  },
  {
    "text": "of ethan hawke the director right so one way of avoiding that is to make sure",
    "start": "1363980",
    "end": "1369680"
  },
  {
    "text": "that we really truly only have one single entity item for for the same",
    "start": "1369680",
    "end": "1376340"
  },
  {
    "text": "person right so we could still keep the the notion of actors and directors",
    "start": "1376340",
    "end": "1381620"
  },
  {
    "text": "entities actor and director and maybe simply make one point to the other that's that's one option with you know",
    "start": "1381620",
    "end": "1389420"
  },
  {
    "text": "pros and cons another option is to simply conflict actors and director and",
    "start": "1389420",
    "end": "1395210"
  },
  {
    "text": "directors into a single entity that can have multiple roles so one role is a director and other role",
    "start": "1395210",
    "end": "1402620"
  },
  {
    "text": "is is an actor and and then using attributes to really indicate whether a",
    "start": "1402620",
    "end": "1409370"
  },
  {
    "text": "person has a particular role so in this case for example we conflate entity and",
    "start": "1409370",
    "end": "1417470"
  },
  {
    "text": "and a director item items for ethan hawke we remove the the relationship for",
    "start": "1417470",
    "end": "1424880"
  },
  {
    "text": "for the director but we add that record to the existing relationship for Ethan Hawke to indicate that he is also a",
    "start": "1424880",
    "end": "1432460"
  },
  {
    "text": "director as well and then we still have the the same pattern that",
    "start": "1432460",
    "end": "1439309"
  },
  {
    "text": "we're using for actor/director relationships and and now this becomes a",
    "start": "1439309",
    "end": "1444529"
  },
  {
    "text": "conflated sort of representation of that relationship where we see within this",
    "start": "1444529",
    "end": "1451640"
  },
  {
    "text": "relationship that the movie role is implicit because there is a character there's a credit order we could make it",
    "start": "1451640",
    "end": "1461080"
  },
  {
    "text": "explicit right right now it's implicit the the director role is more explicit",
    "start": "1461080",
    "end": "1467690"
  },
  {
    "text": "because we have a special attribute for it but in either case now we're we're in",
    "start": "1467690",
    "end": "1475820"
  },
  {
    "text": "fact using just a person entity to model both actors and directors so as we can",
    "start": "1475820",
    "end": "1484250"
  },
  {
    "text": "see there's there's always more than one way to do data model and the process is",
    "start": "1484250",
    "end": "1489470"
  },
  {
    "text": "iterative right for example we can we started in this exercise by modeling the",
    "start": "1489470",
    "end": "1495769"
  },
  {
    "text": "entities and we know that entities have to have a unique partition key the short",
    "start": "1495769",
    "end": "1503419"
  },
  {
    "text": "key we can decide on a convention that we want to use for the short key in in",
    "start": "1503419",
    "end": "1510500"
  },
  {
    "text": "this particular example it really made sense to make the short key the same as as the partition key sometimes the other",
    "start": "1510500",
    "end": "1518330"
  },
  {
    "text": "thing to be aware about the choice of short key because this is a many-to-many",
    "start": "1518330",
    "end": "1523419"
  },
  {
    "text": "relationship the short key will become a primary key in energy si so we have to",
    "start": "1523419",
    "end": "1530510"
  },
  {
    "text": "make sure that that we that we had that we had enough of a enough high",
    "start": "1530510",
    "end": "1537110"
  },
  {
    "text": "cardinality for that sort key right so that we don't get back pressure for the GSI on writes or or reads right so so",
    "start": "1537110",
    "end": "1547100"
  },
  {
    "text": "that sort key should be unique unique enough that that we avoid creating a",
    "start": "1547100",
    "end": "1553760"
  },
  {
    "text": "bottleneck basically on the sort key which is in fact the partition key for",
    "start": "1553760",
    "end": "1559070"
  },
  {
    "text": "for the GSI and another another question",
    "start": "1559070",
    "end": "1565279"
  },
  {
    "text": "now you know when I go and I like movies and we call myself a movie geek or a movie",
    "start": "1565279",
    "end": "1572610"
  },
  {
    "text": "buff but I've always been interesting interesting in movies watching movies looking up information about movies so",
    "start": "1572610",
    "end": "1580320"
  },
  {
    "text": "you can think about this database as maybe this is a database for movie buffs right because we're showing something",
    "start": "1580320",
    "end": "1586170"
  },
  {
    "text": "maybe we're adding value to this movie database by calling out specific",
    "start": "1586170",
    "end": "1592100"
  },
  {
    "text": "relationships between movies and actors people write in in movies so and of",
    "start": "1592100",
    "end": "1599370"
  },
  {
    "text": "course you can take this beyond to include other relationships and and so",
    "start": "1599370",
    "end": "1604440"
  },
  {
    "text": "on but typically when we run research you",
    "start": "1604440",
    "end": "1609810"
  },
  {
    "text": "know movie databases such as IMDB it's pretty clear that there's a text search",
    "start": "1609810",
    "end": "1615350"
  },
  {
    "text": "behind that because it's it's just more powerful right there's their search",
    "start": "1615350",
    "end": "1621720"
  },
  {
    "text": "capabilities in there and how could we you know as it may be next iteration on",
    "start": "1621720",
    "end": "1628290"
  },
  {
    "text": "this how could we add full text search capabilities due to our data so here",
    "start": "1628290",
    "end": "1636150"
  },
  {
    "text": "right so with DynamoDB we would do that using Amazon Elastic search right Amazon",
    "start": "1636150",
    "end": "1644820"
  },
  {
    "text": "Elastic search is a is a search service that really creates index indexes data",
    "start": "1644820",
    "end": "1653460"
  },
  {
    "text": "right that you feed it and then makes it searchable it's very configurable very powerful and",
    "start": "1653460",
    "end": "1660300"
  },
  {
    "text": "I don't know hood it actually uses a really powerful search technology called",
    "start": "1660300",
    "end": "1665880"
  },
  {
    "text": "Lucene and so how do we integrate dynamodb data our our movie database",
    "start": "1665880",
    "end": "1673890"
  },
  {
    "text": "with elastic search with that would D be the best way to do that is to use",
    "start": "1673890",
    "end": "1682890"
  },
  {
    "text": "dynamodb streams which is a transaction log of all change records to your data",
    "start": "1682890",
    "end": "1688500"
  },
  {
    "text": "in dynamo DB and it's easy it's as enabling that on a table if you remember",
    "start": "1688500",
    "end": "1694080"
  },
  {
    "text": "the first episode we had to enable streams for global tables in dynamo dB",
    "start": "1694080",
    "end": "1699540"
  },
  {
    "text": "global tables use DynamoDB streams as well and for for search we can enable",
    "start": "1699540",
    "end": "1707010"
  },
  {
    "text": "DynamoDB streams use a lambda function that integrate integrates really well with dynamodb streams to get all those",
    "start": "1707010",
    "end": "1714870"
  },
  {
    "text": "changes from your DynamoDB movie table and then write them to elasticsearch",
    "start": "1714870",
    "end": "1722360"
  },
  {
    "text": "this of course is an asynchronous operation but in our case we have a",
    "start": "1722360",
    "end": "1728880"
  },
  {
    "text": "database of what what's really reference data right movie that does not change",
    "start": "1728880",
    "end": "1734700"
  },
  {
    "text": "frequently but it's read very frequently so because of that it's perfectly",
    "start": "1734700",
    "end": "1740760"
  },
  {
    "text": "acceptable to have you know this additional latency of propagation the propagation is asynchronous",
    "start": "1740760",
    "end": "1747120"
  },
  {
    "text": "but it's reliable right dynamodb will reliably deliver data using DynamoDB",
    "start": "1747120",
    "end": "1753480"
  },
  {
    "text": "streams to to consumers that that want to read it in this case lambda service",
    "start": "1753480",
    "end": "1759290"
  },
  {
    "text": "when we create a lambda function we can use our dynamo DB stream as the source",
    "start": "1759290",
    "end": "1766230"
  },
  {
    "text": "to the lambda function and then that lambda function will start getting events batches of events that represent",
    "start": "1766230",
    "end": "1773520"
  },
  {
    "text": "changes to your data in in your dynamodb table the the lambda simply takes the",
    "start": "1773520",
    "end": "1778980"
  },
  {
    "text": "data feeds it to to elasticsearch and now you have a searchable movie movie",
    "start": "1778980",
    "end": "1785400"
  },
  {
    "text": "database the other nice thing about this approach is it effectively enables the",
    "start": "1785400",
    "end": "1790650"
  },
  {
    "text": "separation of your sort of oil TP side movie database which of course in this",
    "start": "1790650",
    "end": "1796440"
  },
  {
    "text": "case like I said it's reference data in any case does not change very frequently but still and then search side we have",
    "start": "1796440",
    "end": "1803340"
  },
  {
    "text": "elastic search a dedicated elastic search clustered that we can size as as needed right and so they're",
    "start": "1803340",
    "end": "1809670"
  },
  {
    "text": "independently configurable sizeable services on the one hand are our",
    "start": "1809670",
    "end": "1816630"
  },
  {
    "text": "database right where we can control the capacity in dynamodb however we want and",
    "start": "1816630",
    "end": "1822300"
  },
  {
    "text": "on the other hand we have querying capabilities search capabilities in this",
    "start": "1822300",
    "end": "1827370"
  },
  {
    "text": "case with elastic search and so this is effectively a",
    "start": "1827370",
    "end": "1832710"
  },
  {
    "text": "imitation of command query responsibility segregation or CQRS",
    "start": "1832710",
    "end": "1838460"
  },
  {
    "text": "pattern as well that in this case uses dynamodb streams and lambda as a",
    "start": "1838460",
    "end": "1845429"
  },
  {
    "text": "reliable delivery mechanism that we use to deliver events from DynamoDB to to",
    "start": "1845429",
    "end": "1853169"
  },
  {
    "text": "elasticsearch and that is really all the",
    "start": "1853169",
    "end": "1859679"
  },
  {
    "text": "all the content that I had for for us today we will continue next time with them",
    "start": "1859679",
    "end": "1866250"
  },
  {
    "text": "with another data modeling example will have Rick Houlihan again and in the",
    "start": "1866250",
    "end": "1872429"
  },
  {
    "text": "meantime please come come with questions",
    "start": "1872429",
    "end": "1878159"
  },
  {
    "text": "we had we're happy to take your questions live and and answer them and I",
    "start": "1878159",
    "end": "1884220"
  },
  {
    "text": "do see underground cheese weasel question in the current Movie Database",
    "start": "1884220",
    "end": "1891029"
  },
  {
    "text": "context how could we connect our DynamoDB to Redis or memcache server for",
    "start": "1891029",
    "end": "1898049"
  },
  {
    "text": "example I might want to pre cache a list of movies that a user has in their",
    "start": "1898049",
    "end": "1903750"
  },
  {
    "text": "collection in order to quickly display on a web page yeah so for connecting with Redis or man",
    "start": "1903750",
    "end": "1911520"
  },
  {
    "text": "cash so in this case elastic cache there isn't a built-in integration like there",
    "start": "1911520",
    "end": "1918899"
  },
  {
    "text": "is with with with lambda but but in fact we can use the similar approach for",
    "start": "1918899",
    "end": "1924450"
  },
  {
    "text": "example updates that are coming to the animo DB can be made available to to",
    "start": "1924450",
    "end": "1933480"
  },
  {
    "text": "elasticsearch the same way we're actually updating well to ElastiCache",
    "start": "1933480",
    "end": "1938669"
  },
  {
    "text": "the same way the way we're updating elastics are choosing dynamodb streams in lambda in this case lambda would",
    "start": "1938669",
    "end": "1945149"
  },
  {
    "text": "simply write to ElastiCache Rattus or a memcache instead of elasticsearch one",
    "start": "1945149",
    "end": "1952140"
  },
  {
    "text": "other thing that I'd like to point out dynamodb has its own caching layer dynamodb accelerator or Dax that",
    "start": "1952140",
    "end": "1958980"
  },
  {
    "text": "integrates with dynamodb seamlessly so that these updates can happen",
    "start": "1958980",
    "end": "1964220"
  },
  {
    "text": "without you really having to do anything special about it so Dax is is right through cash for",
    "start": "1964220",
    "end": "1972230"
  },
  {
    "text": "dynamo DB so if you have Dax in front of a dynamodb table and and you simply do",
    "start": "1972230",
    "end": "1979370"
  },
  {
    "text": "reads and writes through Dax then Dax will actually keep the cash of all the",
    "start": "1979370",
    "end": "1986390"
  },
  {
    "text": "updates Dax will automatically update its cash with with your changes the other nice",
    "start": "1986390",
    "end": "1992300"
  },
  {
    "text": "thing about Dax it's not a look aside or write aside cash",
    "start": "1992300",
    "end": "1997400"
  },
  {
    "text": "it's a write through cache and and it uses the same API as dynamodb so the",
    "start": "1997400",
    "end": "2003370"
  },
  {
    "text": "change is to introduce Dax into your solution are fairly minimal the client",
    "start": "2003370",
    "end": "2010120"
  },
  {
    "text": "is different but it implements the same interface so the only really change is to to your",
    "start": "2010120",
    "end": "2016870"
  },
  {
    "text": "code is to instantiate a Dax client so a",
    "start": "2016870",
    "end": "2023370"
  },
  {
    "text": "couple of more questions coming through okie bears our company is actually using",
    "start": "2023370",
    "end": "2029200"
  },
  {
    "text": "dynamo DB in real proud apps great question dynamo DB is used in real",
    "start": "2029200",
    "end": "2037090"
  },
  {
    "text": "production apps I believe in over 100,000 real customers",
    "start": "2037090",
    "end": "2045330"
  },
  {
    "text": "so including Amazon right so in fact one",
    "start": "2045330",
    "end": "2051429"
  },
  {
    "text": "of the reasons that dynamo DB exists is because of the scalability issues way",
    "start": "2051429",
    "end": "2057190"
  },
  {
    "text": "back in in early years of this century when the internet was very very young",
    "start": "2057190",
    "end": "2064090"
  },
  {
    "text": "and Amazon needed to scale its e-commerce business that gave rise to no",
    "start": "2064090",
    "end": "2070270"
  },
  {
    "text": "sequel dynamo was that was the first technology and then dynamo DB is a",
    "start": "2070270",
    "end": "2075908"
  },
  {
    "text": "server less fully managed and and an evolved version of a no sequel database",
    "start": "2075909",
    "end": "2082540"
  },
  {
    "text": "that we have today many other companies use dynamo DB in production across a",
    "start": "2082540",
    "end": "2089050"
  },
  {
    "text": "variety of verticals in fact just recently I published wrote a two blog",
    "start": "2089050",
    "end": "2094990"
  },
  {
    "text": "posts about design in a couple of verticals ad tech and gaming I'm working on some other",
    "start": "2094990",
    "end": "2100730"
  },
  {
    "text": "verticals that will include retail so for example one of the customers",
    "start": "2100730",
    "end": "2106310"
  },
  {
    "text": "dynamodb is Nike in in retail industry where they have some really interesting",
    "start": "2106310",
    "end": "2111350"
  },
  {
    "text": "scale problems around ecommerce right",
    "start": "2111350",
    "end": "2117050"
  },
  {
    "text": "events that they that they have sale events and they've even blogged about it so so if you go out there there's a lot",
    "start": "2117050",
    "end": "2125030"
  },
  {
    "text": "of really good content about how different customers use DynamoDB Samsung",
    "start": "2125030",
    "end": "2131720"
  },
  {
    "text": "is another interesting example they gave a presentation about how they use",
    "start": "2131720",
    "end": "2137000"
  },
  {
    "text": "DynamoDB at Raymond forget whether that",
    "start": "2137000",
    "end": "2142250"
  },
  {
    "text": "was a couple of rainbands ago were they they talked about how they migrated to",
    "start": "2142250",
    "end": "2149690"
  },
  {
    "text": "DynamoDB and and I believe the amount of data that they now have in DynamoDB is I",
    "start": "2149690",
    "end": "2158680"
  },
  {
    "text": "think 100 close to a petabyte basically and it's a it's a backing database for",
    "start": "2158680",
    "end": "2166460"
  },
  {
    "text": "for the profile data for I think it was Samsung Galaxy phone for them so",
    "start": "2166460",
    "end": "2176470"
  },
  {
    "text": "DynamoDB is the data base that a lot of customers use for highly well",
    "start": "2176470",
    "end": "2185450"
  },
  {
    "text": "mission-critical use cases that need scale and and performance is scale so",
    "start": "2185450",
    "end": "2190520"
  },
  {
    "text": "the answer yes is yes many companies are using done with DB in real production",
    "start": "2190520",
    "end": "2197350"
  },
  {
    "text": "another question from underground cheese basil is that an in-memory solution like rice or mac HD so this question is about",
    "start": "2197350",
    "end": "2205720"
  },
  {
    "text": "Dax yes sorry I did not mention that but Dax is an in-memory solution just like",
    "start": "2205720",
    "end": "2213980"
  },
  {
    "text": "memcache and and Redis the the main difference though is that Dax is really",
    "start": "2213980",
    "end": "2221060"
  },
  {
    "text": "specifically designed created for dynamodb and of course the benefit is",
    "start": "2221060",
    "end": "2226760"
  },
  {
    "text": "that the API same as dynamodb and and it's easy to integrate in in your existing",
    "start": "2226760",
    "end": "2233380"
  },
  {
    "text": "applications and looks like that was it",
    "start": "2233380",
    "end": "2238510"
  },
  {
    "text": "for for questions today thank you for watching and join us next time we'll",
    "start": "2238510",
    "end": "2244660"
  },
  {
    "text": "have Riku Lahan and we'll we'll talk more about advanced no sequel design",
    "start": "2244660",
    "end": "2251860"
  },
  {
    "text": "modeling we'll use another real-world example and thanks again",
    "start": "2251860",
    "end": "2258960"
  }
]