[
  {
    "text": "[Music]",
    "start": "0",
    "end": "2480"
  },
  {
    "text": "hi",
    "start": "2480",
    "end": "3040"
  },
  {
    "text": "i'm scott brian and i'm a solutions",
    "start": "3040",
    "end": "4560"
  },
  {
    "text": "architect here at aws in this video",
    "start": "4560",
    "end": "6879"
  },
  {
    "text": "i'm going to show you how you can use",
    "start": "6879",
    "end": "8320"
  },
  {
    "text": "amazon qrdb with dotnet",
    "start": "8320",
    "end": "10320"
  },
  {
    "text": "let's get started firstly let's take a",
    "start": "10320",
    "end": "12559"
  },
  {
    "text": "look at some of the key features and use",
    "start": "12559",
    "end": "14160"
  },
  {
    "text": "cases of amazon qrdb",
    "start": "14160",
    "end": "16480"
  },
  {
    "text": "amazon qrdb is a fully managed ledger",
    "start": "16480",
    "end": "18560"
  },
  {
    "text": "database that provides a transparent",
    "start": "18560",
    "end": "20400"
  },
  {
    "text": "immutable and cryptographically",
    "start": "20400",
    "end": "21840"
  },
  {
    "text": "verifiable transaction log owned by",
    "start": "21840",
    "end": "23840"
  },
  {
    "text": "central trustee authority",
    "start": "23840",
    "end": "26080"
  },
  {
    "text": "without security b your data's change",
    "start": "26080",
    "end": "27840"
  },
  {
    "text": "history is immutable",
    "start": "27840",
    "end": "29119"
  },
  {
    "text": "it cannot be altered or deleted and",
    "start": "29119",
    "end": "30640"
  },
  {
    "text": "using cryptography you can easily verify",
    "start": "30640",
    "end": "33040"
  },
  {
    "text": "there have been no",
    "start": "33040",
    "end": "33840"
  },
  {
    "text": "unintended modifications to your",
    "start": "33840",
    "end": "35200"
  },
  {
    "text": "applications data",
    "start": "35200",
    "end": "37200"
  },
  {
    "text": "amazoqdb is used in a mutable",
    "start": "37200",
    "end": "39200"
  },
  {
    "text": "transaction log known as a journal",
    "start": "39200",
    "end": "40960"
  },
  {
    "text": "that tracks each application data change",
    "start": "40960",
    "end": "42960"
  },
  {
    "text": "and maintains a complete and verifiable",
    "start": "42960",
    "end": "44559"
  },
  {
    "text": "history of changes over time",
    "start": "44559",
    "end": "47360"
  },
  {
    "text": "amazon qdb is easy to use as it provides",
    "start": "47360",
    "end": "49680"
  },
  {
    "text": "developers with a familiar sql like api",
    "start": "49680",
    "end": "51840"
  },
  {
    "text": "with the part ql data query standard",
    "start": "51840",
    "end": "54399"
  },
  {
    "text": "it has a flexible document data model",
    "start": "54399",
    "end": "56079"
  },
  {
    "text": "with amazon ion which is also json",
    "start": "56079",
    "end": "57840"
  },
  {
    "text": "compatible",
    "start": "57840",
    "end": "58800"
  },
  {
    "text": "and it has full support for transactions",
    "start": "58800",
    "end": "61440"
  },
  {
    "text": "and security b is also serverless",
    "start": "61440",
    "end": "63359"
  },
  {
    "text": "so it automatically scales to support",
    "start": "63359",
    "end": "64960"
  },
  {
    "text": "the the miles view application",
    "start": "64960",
    "end": "66640"
  },
  {
    "text": "and there are no servers to manage and",
    "start": "66640",
    "end": "68080"
  },
  {
    "text": "no read and write limits to configure",
    "start": "68080",
    "end": "70560"
  },
  {
    "text": "there are many use cases for amazon qrdb",
    "start": "70560",
    "end": "72960"
  },
  {
    "text": "ranging from banking applications where",
    "start": "72960",
    "end": "74560"
  },
  {
    "text": "you need to store debit and credit card",
    "start": "74560",
    "end": "76000"
  },
  {
    "text": "transactions across customer bank",
    "start": "76000",
    "end": "77439"
  },
  {
    "text": "accounts",
    "start": "77439",
    "end": "78080"
  },
  {
    "text": "or in retail where you need to track",
    "start": "78080",
    "end": "79840"
  },
  {
    "text": "every stage of a product supply chain",
    "start": "79840",
    "end": "82479"
  },
  {
    "text": "to learn more about the benefits and use",
    "start": "82479",
    "end": "84000"
  },
  {
    "text": "cases of amazon qrdb please visit",
    "start": "84000",
    "end": "86680"
  },
  {
    "text": "aws.amazon.com forward slash qrdb",
    "start": "86680",
    "end": "90960"
  },
  {
    "text": "now let's jump into visual studio code",
    "start": "90960",
    "end": "92880"
  },
  {
    "text": "and take a look at how you can use the",
    "start": "92880",
    "end": "94000"
  },
  {
    "text": "aws",
    "start": "94000",
    "end": "94960"
  },
  {
    "text": "sdk and the amazon qrdb.net driver to",
    "start": "94960",
    "end": "98000"
  },
  {
    "text": "create a ledger some tables and indexes",
    "start": "98000",
    "end": "100720"
  },
  {
    "text": "here we are in visual studio code and in",
    "start": "100720",
    "end": "102880"
  },
  {
    "text": "this demo we'll be building a vehicle",
    "start": "102880",
    "end": "104479"
  },
  {
    "text": "registration application",
    "start": "104479",
    "end": "106079"
  },
  {
    "text": "and you can find the schema for this",
    "start": "106079",
    "end": "107280"
  },
  {
    "text": "example edge in the getting started",
    "start": "107280",
    "end": "108640"
  },
  {
    "text": "guide for amazon qrdb",
    "start": "108640",
    "end": "111040"
  },
  {
    "text": "we'll look at the explorer on the left",
    "start": "111040",
    "end": "112079"
  },
  {
    "text": "hand side you can see i have three",
    "start": "112079",
    "end": "113280"
  },
  {
    "text": "projects",
    "start": "113280",
    "end": "114159"
  },
  {
    "text": "have a class library which contains the",
    "start": "114159",
    "end": "115520"
  },
  {
    "text": "model shared between the other projects",
    "start": "115520",
    "end": "117439"
  },
  {
    "text": "a console application to set up the",
    "start": "117439",
    "end": "118960"
  },
  {
    "text": "ledger and a project of a series of lab",
    "start": "118960",
    "end": "120960"
  },
  {
    "text": "functions to insert and create the data",
    "start": "120960",
    "end": "122479"
  },
  {
    "text": "within the ledger if we jump into the",
    "start": "122479",
    "end": "124640"
  },
  {
    "text": "ledger setup project you can see i have",
    "start": "124640",
    "end": "126240"
  },
  {
    "text": "four",
    "start": "126240",
    "end": "127759"
  },
  {
    "text": "create ledger create table create",
    "start": "127759",
    "end": "129440"
  },
  {
    "text": "indexes and sample data",
    "start": "129440",
    "end": "131760"
  },
  {
    "text": "and we'll be using the following nougat",
    "start": "131760",
    "end": "133040"
  },
  {
    "text": "packages for this project",
    "start": "133040",
    "end": "134879"
  },
  {
    "text": "amazon ion.net amazon document driver",
    "start": "134879",
    "end": "138800"
  },
  {
    "text": "and aws sdk or qrdb",
    "start": "138800",
    "end": "142480"
  },
  {
    "text": "the first thing we need to do is to",
    "start": "142480",
    "end": "143599"
  },
  {
    "text": "create our ledger in the create ledger",
    "start": "143599",
    "end": "144800"
  },
  {
    "text": "class and to do this we'll use",
    "start": "144800",
    "end": "146239"
  },
  {
    "text": "we need to use the amazon qdb client",
    "start": "146239",
    "end": "147680"
  },
  {
    "text": "class on the aws.sdk",
    "start": "147680",
    "end": "150239"
  },
  {
    "text": "we look inside the run method we're",
    "start": "150239",
    "end": "151599"
  },
  {
    "text": "going to first check to see if the",
    "start": "151599",
    "end": "153360"
  },
  {
    "text": "ledger exists",
    "start": "153360",
    "end": "154720"
  },
  {
    "text": "if it doesn't we're going to create it",
    "start": "154720",
    "end": "156480"
  },
  {
    "text": "and finally we'll wait for the ledger to",
    "start": "156480",
    "end": "157840"
  },
  {
    "text": "become active before forming any",
    "start": "157840",
    "end": "159200"
  },
  {
    "text": "additional operations such as creating",
    "start": "159200",
    "end": "160480"
  },
  {
    "text": "tables",
    "start": "160480",
    "end": "162239"
  },
  {
    "text": "to check to see if the ledger exists we",
    "start": "162239",
    "end": "164000"
  },
  {
    "text": "can call the listledges method on the",
    "start": "164000",
    "end": "165440"
  },
  {
    "text": "qrdb client and check to see if our",
    "start": "165440",
    "end": "167120"
  },
  {
    "text": "ledger name exists within the response",
    "start": "167120",
    "end": "169760"
  },
  {
    "text": "now we know the ledger doesn't exist",
    "start": "169760",
    "end": "171360"
  },
  {
    "text": "let's create the ledger",
    "start": "171360",
    "end": "173280"
  },
  {
    "text": "to do this you can call the createledger",
    "start": "173280",
    "end": "174800"
  },
  {
    "text": "method on the qrdb client class",
    "start": "174800",
    "end": "176480"
  },
  {
    "text": "passing in the ledger name whether you",
    "start": "176480",
    "end": "178480"
  },
  {
    "text": "want the leap protection",
    "start": "178480",
    "end": "179599"
  },
  {
    "text": "and also the permission mode",
    "start": "179599",
    "end": "182720"
  },
  {
    "text": "before we can create any tables or",
    "start": "182720",
    "end": "184640"
  },
  {
    "text": "indexes on the ledger we need to wait",
    "start": "184640",
    "end": "186239"
  },
  {
    "text": "for it to become active",
    "start": "186239",
    "end": "187840"
  },
  {
    "text": "to do this we can use the describe",
    "start": "187840",
    "end": "189360"
  },
  {
    "text": "ledger method on the qrdp client",
    "start": "189360",
    "end": "191120"
  },
  {
    "text": "and it will return information about the",
    "start": "191120",
    "end": "192560"
  },
  {
    "text": "newly created ledger including the",
    "start": "192560",
    "end": "194000"
  },
  {
    "text": "current state",
    "start": "194000",
    "end": "195519"
  },
  {
    "text": "we can simply repeat this call a few",
    "start": "195519",
    "end": "197040"
  },
  {
    "text": "times until the state is active and then",
    "start": "197040",
    "end": "199040"
  },
  {
    "text": "we can safely carry on",
    "start": "199040",
    "end": "201440"
  },
  {
    "text": "now the ledger has been created and is",
    "start": "201440",
    "end": "203040"
  },
  {
    "text": "active let's look at how you can use the",
    "start": "203040",
    "end": "204720"
  },
  {
    "text": "amazon qrdp.net driver to create tables",
    "start": "204720",
    "end": "207040"
  },
  {
    "text": "and indexes",
    "start": "207040",
    "end": "209040"
  },
  {
    "text": "here we are in the create table class",
    "start": "209040",
    "end": "210480"
  },
  {
    "text": "and in order to run statements against",
    "start": "210480",
    "end": "212080"
  },
  {
    "text": "the ledger we need an instance of the",
    "start": "212080",
    "end": "213360"
  },
  {
    "text": "qrdb driver",
    "start": "213360",
    "end": "215040"
  },
  {
    "text": "in this example i'm passing this into",
    "start": "215040",
    "end": "216720"
  },
  {
    "text": "the constructor so we can reuse the same",
    "start": "216720",
    "end": "218159"
  },
  {
    "text": "driver across multiple classes",
    "start": "218159",
    "end": "220239"
  },
  {
    "text": "if we quickly look in program.cs you can",
    "start": "220239",
    "end": "222159"
  },
  {
    "text": "see i used the qrdp driver builder",
    "start": "222159",
    "end": "224159"
  },
  {
    "text": "to build an instance of the driver which",
    "start": "224159",
    "end": "225599"
  },
  {
    "text": "we could pass into our classes",
    "start": "225599",
    "end": "228319"
  },
  {
    "text": "flipping back to the create tables class",
    "start": "228319",
    "end": "230239"
  },
  {
    "text": "and if we move down to the run method",
    "start": "230239",
    "end": "231760"
  },
  {
    "text": "we're going to run our create table",
    "start": "231760",
    "end": "233120"
  },
  {
    "text": "method for each of the tables required",
    "start": "233120",
    "end": "234720"
  },
  {
    "text": "for our vehicle registration application",
    "start": "234720",
    "end": "237360"
  },
  {
    "text": "like before we'll first check to see",
    "start": "237360",
    "end": "239200"
  },
  {
    "text": "whether the table exists and if not",
    "start": "239200",
    "end": "240879"
  },
  {
    "text": "create the table to check whether a",
    "start": "240879",
    "end": "243599"
  },
  {
    "text": "table exists within the ledger we can",
    "start": "243599",
    "end": "245040"
  },
  {
    "text": "use the qrb driver to list the existing",
    "start": "245040",
    "end": "246959"
  },
  {
    "text": "table names",
    "start": "246959",
    "end": "247680"
  },
  {
    "text": "and check to see if it has been created",
    "start": "247680",
    "end": "249120"
  },
  {
    "text": "previously",
    "start": "249120",
    "end": "250799"
  },
  {
    "text": "if the table doesn't exist we can use",
    "start": "250799",
    "end": "252879"
  },
  {
    "text": "the driver's execute method to execute",
    "start": "252879",
    "end": "254720"
  },
  {
    "text": "the create table statement",
    "start": "254720",
    "end": "256799"
  },
  {
    "text": "the execute method takes an action",
    "start": "256799",
    "end": "258079"
  },
  {
    "text": "delegate and you can use the transaction",
    "start": "258079",
    "end": "259680"
  },
  {
    "text": "executed parameter within the lambda",
    "start": "259680",
    "end": "261199"
  },
  {
    "text": "expression",
    "start": "261199",
    "end": "261840"
  },
  {
    "text": "execute the create table statement",
    "start": "261840",
    "end": "263280"
  },
  {
    "text": "passing in the table name to the string",
    "start": "263280",
    "end": "265360"
  },
  {
    "text": "now we have created some tables let's",
    "start": "265360",
    "end": "266960"
  },
  {
    "text": "create some indexes",
    "start": "266960",
    "end": "268479"
  },
  {
    "text": "if we go and take a look at the create",
    "start": "268479",
    "end": "269680"
  },
  {
    "text": "indexes class we can follow a similar",
    "start": "269680",
    "end": "271360"
  },
  {
    "text": "pattern to check if the index exists",
    "start": "271360",
    "end": "273280"
  },
  {
    "text": "and create it if not to check if an",
    "start": "273280",
    "end": "275520"
  },
  {
    "text": "index exists for a given table",
    "start": "275520",
    "end": "276960"
  },
  {
    "text": "we can create the system catalog passing",
    "start": "276960",
    "end": "278880"
  },
  {
    "text": "in the table name as the parameters of",
    "start": "278880",
    "end": "280160"
  },
  {
    "text": "the query",
    "start": "280160",
    "end": "281759"
  },
  {
    "text": "the qrdb driver takes parameters in the",
    "start": "281759",
    "end": "283440"
  },
  {
    "text": "form of ion values which you need",
    "start": "283440",
    "end": "285199"
  },
  {
    "text": "so we need to convert our string to an",
    "start": "285199",
    "end": "286720"
  },
  {
    "text": "ion value",
    "start": "286720",
    "end": "288400"
  },
  {
    "text": "we do this by using the value factory",
    "start": "288400",
    "end": "289840"
  },
  {
    "text": "from the ion.net package",
    "start": "289840",
    "end": "292479"
  },
  {
    "text": "and we can use this to build an ion",
    "start": "292479",
    "end": "293759"
  },
  {
    "text": "string object passing in the value we",
    "start": "293759",
    "end": "295440"
  },
  {
    "text": "want",
    "start": "295440",
    "end": "297120"
  },
  {
    "text": "the result of the query will contain a",
    "start": "297120",
    "end": "298400"
  },
  {
    "text": "list of indexes on the table in the form",
    "start": "298400",
    "end": "300080"
  },
  {
    "text": "of an ir list",
    "start": "300080",
    "end": "301600"
  },
  {
    "text": "we can get the indexes field from the",
    "start": "301600",
    "end": "302960"
  },
  {
    "text": "result and cast that to anon list",
    "start": "302960",
    "end": "305280"
  },
  {
    "text": "and we can iterate over that to see if",
    "start": "305280",
    "end": "306720"
  },
  {
    "text": "the expression field contains the field",
    "start": "306720",
    "end": "308400"
  },
  {
    "text": "name we want to check if there's an",
    "start": "308400",
    "end": "309600"
  },
  {
    "text": "index",
    "start": "309600",
    "end": "310000"
  },
  {
    "text": "on if the index doesn't exist",
    "start": "310000",
    "end": "313120"
  },
  {
    "text": "like before we can use execute method on",
    "start": "313120",
    "end": "314720"
  },
  {
    "text": "the driver to execute the create index",
    "start": "314720",
    "end": "316320"
  },
  {
    "text": "statement",
    "start": "316320",
    "end": "317199"
  },
  {
    "text": "finally we want to insert some sample",
    "start": "317199",
    "end": "318880"
  },
  {
    "text": "data into our ledger",
    "start": "318880",
    "end": "320400"
  },
  {
    "text": "if we look in the example data class",
    "start": "320400",
    "end": "322320"
  },
  {
    "text": "inside our method we're going to insert",
    "start": "322320",
    "end": "324080"
  },
  {
    "text": "some vehicles",
    "start": "324080",
    "end": "324800"
  },
  {
    "text": "people driving licenses and vehicle",
    "start": "324800",
    "end": "326639"
  },
  {
    "text": "registrations",
    "start": "326639",
    "end": "328880"
  },
  {
    "text": "again we'll be using a driver to call",
    "start": "328880",
    "end": "330240"
  },
  {
    "text": "the according the execute method to",
    "start": "330240",
    "end": "331680"
  },
  {
    "text": "insert the data",
    "start": "331680",
    "end": "333360"
  },
  {
    "text": "we take a look inside insert vehicles as",
    "start": "333360",
    "end": "335199"
  },
  {
    "text": "an example we're inserting multiple",
    "start": "335199",
    "end": "337039"
  },
  {
    "text": "documents as part of a single",
    "start": "337039",
    "end": "338160"
  },
  {
    "text": "transaction",
    "start": "338160",
    "end": "339039"
  },
  {
    "text": "and our insert method calls the execute",
    "start": "339039",
    "end": "340639"
  },
  {
    "text": "method on the transaction x feature",
    "start": "340639",
    "end": "342880"
  },
  {
    "text": "with the insert statement passing in the",
    "start": "342880",
    "end": "344800"
  },
  {
    "text": "document as a parameter to the query",
    "start": "344800",
    "end": "347520"
  },
  {
    "text": "again we need to convert this parameter",
    "start": "347520",
    "end": "348960"
  },
  {
    "text": "to an ion value and we use the iron",
    "start": "348960",
    "end": "350880"
  },
  {
    "text": "loader to do this",
    "start": "350880",
    "end": "352400"
  },
  {
    "text": "the load method takes a string and in",
    "start": "352400",
    "end": "354240"
  },
  {
    "text": "essence in instance we can pass the json",
    "start": "354240",
    "end": "356639"
  },
  {
    "text": "for the type",
    "start": "356639",
    "end": "357280"
  },
  {
    "text": "which will get converted into an io",
    "start": "357280",
    "end": "358720"
  },
  {
    "text": "value if we go to the aws console we can",
    "start": "358720",
    "end": "361120"
  },
  {
    "text": "see there are no ledgers",
    "start": "361120",
    "end": "362800"
  },
  {
    "text": "and if we run this console application",
    "start": "362800",
    "end": "364080"
  },
  {
    "text": "from visual studio code and wait for it",
    "start": "364080",
    "end": "365520"
  },
  {
    "text": "to complete",
    "start": "365520",
    "end": "366319"
  },
  {
    "text": "we can go back to the console and now",
    "start": "366319",
    "end": "368479"
  },
  {
    "text": "see there's a newly created ledger",
    "start": "368479",
    "end": "370880"
  },
  {
    "text": "if we use the query editor in the",
    "start": "370880",
    "end": "372160"
  },
  {
    "text": "console and press the arrow next to the",
    "start": "372160",
    "end": "374240"
  },
  {
    "text": "vehicle registration table",
    "start": "374240",
    "end": "375520"
  },
  {
    "text": "it will populate the query editor and we",
    "start": "375520",
    "end": "377440"
  },
  {
    "text": "can if we run that we can see it is",
    "start": "377440",
    "end": "379199"
  },
  {
    "text": "inserted all the sample data",
    "start": "379199",
    "end": "382479"
  },
  {
    "text": "now we have our ledger and tables",
    "start": "382800",
    "end": "384000"
  },
  {
    "text": "created let's take a look at how you use",
    "start": "384000",
    "end": "385759"
  },
  {
    "text": "the dot net qrb driver from the lambda",
    "start": "385759",
    "end": "387600"
  },
  {
    "text": "function to insert a secondary owner for",
    "start": "387600",
    "end": "389440"
  },
  {
    "text": "the vehicle registration",
    "start": "389440",
    "end": "390960"
  },
  {
    "text": "and then query the history of changes",
    "start": "390960",
    "end": "392400"
  },
  {
    "text": "for a particular vehicle registration",
    "start": "392400",
    "end": "394720"
  },
  {
    "text": "if we jump into the api project you can",
    "start": "394720",
    "end": "396720"
  },
  {
    "text": "see i have a series of lavender",
    "start": "396720",
    "end": "397759"
  },
  {
    "text": "functions which fall part of an aws sam",
    "start": "397759",
    "end": "399520"
  },
  {
    "text": "application",
    "start": "399520",
    "end": "400400"
  },
  {
    "text": "to insert and create documents in the",
    "start": "400400",
    "end": "401759"
  },
  {
    "text": "ledger for example to add a person or",
    "start": "401759",
    "end": "404000"
  },
  {
    "text": "vehicle",
    "start": "404000",
    "end": "404880"
  },
  {
    "text": "find vehicles registered to a particular",
    "start": "404880",
    "end": "406400"
  },
  {
    "text": "person and even create the updated",
    "start": "406400",
    "end": "407919"
  },
  {
    "text": "history of a vehicle registration",
    "start": "407919",
    "end": "410479"
  },
  {
    "text": "let's go into the add secondary only",
    "start": "410479",
    "end": "412000"
  },
  {
    "text": "function the first thing to mention is",
    "start": "412000",
    "end": "414080"
  },
  {
    "text": "i've put some common code used across",
    "start": "414080",
    "end": "415520"
  },
  {
    "text": "all the lambda functions in separate",
    "start": "415520",
    "end": "416880"
  },
  {
    "text": "services",
    "start": "416880",
    "end": "418160"
  },
  {
    "text": "for example creating a qrdp driver or",
    "start": "418160",
    "end": "420080"
  },
  {
    "text": "querying document metadata",
    "start": "420080",
    "end": "422960"
  },
  {
    "text": "diving into the function handler we are",
    "start": "422960",
    "end": "424720"
  },
  {
    "text": "executing the bulk of this code within",
    "start": "424720",
    "end": "426080"
  },
  {
    "text": "the context of the driver's execute",
    "start": "426080",
    "end": "427360"
  },
  {
    "text": "method",
    "start": "427360",
    "end": "428400"
  },
  {
    "text": "that means it will happen in the context",
    "start": "428400",
    "end": "429919"
  },
  {
    "text": "of the same transaction",
    "start": "429919",
    "end": "432720"
  },
  {
    "text": "first we're going to run some validation",
    "start": "432720",
    "end": "434080"
  },
  {
    "text": "to check see if the vehicle registration",
    "start": "434080",
    "end": "435360"
  },
  {
    "text": "relay exists for the supplied vin",
    "start": "435360",
    "end": "438080"
  },
  {
    "text": "we could do this by querying the vehicle",
    "start": "438080",
    "end": "439360"
  },
  {
    "text": "registration table passing in the vin as",
    "start": "439360",
    "end": "441360"
  },
  {
    "text": "a parameter",
    "start": "441360",
    "end": "442400"
  },
  {
    "text": "and we could check the result to see if",
    "start": "442400",
    "end": "443919"
  },
  {
    "text": "it contains the supplied vin",
    "start": "443919",
    "end": "446560"
  },
  {
    "text": "as we want to add a secondary owner to",
    "start": "446560",
    "end": "448240"
  },
  {
    "text": "existing vehicle registration if the vin",
    "start": "448240",
    "end": "450400"
  },
  {
    "text": "doesn't exist",
    "start": "450400",
    "end": "451199"
  },
  {
    "text": "we can abort the transaction",
    "start": "451199",
    "end": "454319"
  },
  {
    "text": "when the api is called the supplier the",
    "start": "454880",
    "end": "457199"
  },
  {
    "text": "caller supplies the gov id for the",
    "start": "457199",
    "end": "458639"
  },
  {
    "text": "person to be added as a secretary owner",
    "start": "458639",
    "end": "460560"
  },
  {
    "text": "and we need to convert this to the",
    "start": "460560",
    "end": "461759"
  },
  {
    "text": "document id of the matching person",
    "start": "461759",
    "end": "464560"
  },
  {
    "text": "once we know what the gov id is we can",
    "start": "464560",
    "end": "466240"
  },
  {
    "text": "do a lookup on them for the metadata of",
    "start": "466240",
    "end": "468240"
  },
  {
    "text": "the person table to get the document id",
    "start": "468240",
    "end": "471120"
  },
  {
    "text": "if we take a look at the code from the",
    "start": "471120",
    "end": "472240"
  },
  {
    "text": "metadata service can access the metadata",
    "start": "472240",
    "end": "474560"
  },
  {
    "text": "about a document by querying the",
    "start": "474560",
    "end": "475919"
  },
  {
    "text": "committed view",
    "start": "475919",
    "end": "477520"
  },
  {
    "text": "in this instance we are searching for",
    "start": "477520",
    "end": "478800"
  },
  {
    "text": "the document id from the metadata where",
    "start": "478800",
    "end": "481199"
  },
  {
    "text": "the identifier of the data matches a",
    "start": "481199",
    "end": "482800"
  },
  {
    "text": "particular value",
    "start": "482800",
    "end": "485120"
  },
  {
    "text": "an important thing to note about the",
    "start": "485120",
    "end": "486240"
  },
  {
    "text": "driver is you can only read the contents",
    "start": "486240",
    "end": "487840"
  },
  {
    "text": "of the result once",
    "start": "487840",
    "end": "489120"
  },
  {
    "text": "so in this instance i put all the ids",
    "start": "489120",
    "end": "490800"
  },
  {
    "text": "into a list before getting the first",
    "start": "490800",
    "end": "492240"
  },
  {
    "text": "result",
    "start": "492240",
    "end": "494560"
  },
  {
    "text": "once we have the document id for the",
    "start": "496000",
    "end": "497360"
  },
  {
    "text": "matching person if they don't already",
    "start": "497360",
    "end": "499680"
  },
  {
    "text": "exist as a secondary owner",
    "start": "499680",
    "end": "501120"
  },
  {
    "text": "we can convert that to an ion value and",
    "start": "501120",
    "end": "503440"
  },
  {
    "text": "execute the insert statement to insert",
    "start": "503440",
    "end": "505440"
  },
  {
    "text": "into the secondary owner's list for the",
    "start": "505440",
    "end": "506879"
  },
  {
    "text": "document",
    "start": "506879",
    "end": "509280"
  },
  {
    "text": "note in this query i have two parameters",
    "start": "509440",
    "end": "511120"
  },
  {
    "text": "specified by the question mark",
    "start": "511120",
    "end": "512560"
  },
  {
    "text": "and i'm passing two parameters to the",
    "start": "512560",
    "end": "514000"
  },
  {
    "text": "execute method and it will insert the",
    "start": "514000",
    "end": "516159"
  },
  {
    "text": "parameter values in the order area parts",
    "start": "516159",
    "end": "517599"
  },
  {
    "text": "into the execute method",
    "start": "517599",
    "end": "520080"
  },
  {
    "text": "i have all these lambda functions",
    "start": "520080",
    "end": "521440"
  },
  {
    "text": "already deployed into my aws account",
    "start": "521440",
    "end": "523200"
  },
  {
    "text": "and if we run the following call to this",
    "start": "523200",
    "end": "525040"
  },
  {
    "text": "api we can go create the vehicle",
    "start": "525040",
    "end": "526640"
  },
  {
    "text": "registration",
    "start": "526640",
    "end": "527440"
  },
  {
    "text": "table from the aws console i see that",
    "start": "527440",
    "end": "529200"
  },
  {
    "text": "it's adding a secondary owner to the",
    "start": "529200",
    "end": "532560"
  },
  {
    "text": "registration",
    "start": "532839",
    "end": "535839"
  },
  {
    "text": "one of the key features of using amazon",
    "start": "539200",
    "end": "540720"
  },
  {
    "text": "qdb is that it tracks each application",
    "start": "540720",
    "end": "543040"
  },
  {
    "text": "data change",
    "start": "543040",
    "end": "543839"
  },
  {
    "text": "and maintains a complete and verifiable",
    "start": "543839",
    "end": "545519"
  },
  {
    "text": "history of changes over time",
    "start": "545519",
    "end": "547839"
  },
  {
    "text": "let's look at how you can build an api",
    "start": "547839",
    "end": "549440"
  },
  {
    "text": "to query the history of the vehicle",
    "start": "549440",
    "end": "550560"
  },
  {
    "text": "registration we just added a secondary",
    "start": "550560",
    "end": "552399"
  },
  {
    "text": "owner to",
    "start": "552399",
    "end": "554720"
  },
  {
    "text": "if we take a look at the function",
    "start": "554720",
    "end": "555760"
  },
  {
    "text": "handler in the query vehicle",
    "start": "555760",
    "end": "556959"
  },
  {
    "text": "registration history function",
    "start": "556959",
    "end": "558800"
  },
  {
    "text": "we take the vin as a query string",
    "start": "558800",
    "end": "560240"
  },
  {
    "text": "parameter and we need to look up the",
    "start": "560240",
    "end": "561760"
  },
  {
    "text": "document id for the matching vehicle",
    "start": "561760",
    "end": "563279"
  },
  {
    "text": "registration for that vin",
    "start": "563279",
    "end": "565839"
  },
  {
    "text": "once we have the document id we can",
    "start": "565839",
    "end": "567600"
  },
  {
    "text": "create the data using the history",
    "start": "567600",
    "end": "568959"
  },
  {
    "text": "function",
    "start": "568959",
    "end": "570320"
  },
  {
    "text": "where the metadata id matches the",
    "start": "570320",
    "end": "571760"
  },
  {
    "text": "document id",
    "start": "571760",
    "end": "574240"
  },
  {
    "text": "note you can also supply a start and end",
    "start": "574240",
    "end": "575760"
  },
  {
    "text": "time to the history function",
    "start": "575760",
    "end": "577279"
  },
  {
    "text": "if you don't supply a time range as per",
    "start": "577279",
    "end": "578880"
  },
  {
    "text": "this example it will return the entire",
    "start": "578880",
    "end": "580640"
  },
  {
    "text": "history",
    "start": "580640",
    "end": "583040"
  },
  {
    "text": "finally once we have the result we can",
    "start": "584080",
    "end": "586160"
  },
  {
    "text": "take that and convert that back to a",
    "start": "586160",
    "end": "587519"
  },
  {
    "text": "model for our api to return",
    "start": "587519",
    "end": "590560"
  },
  {
    "text": "if we call this api passing in the vin",
    "start": "590560",
    "end": "592240"
  },
  {
    "text": "that we added the secondary entity",
    "start": "592240",
    "end": "594240"
  },
  {
    "text": "we can see it returns the entire history",
    "start": "594240",
    "end": "595760"
  },
  {
    "text": "for that document",
    "start": "595760",
    "end": "597680"
  },
  {
    "text": "in this instance we have version 0 which",
    "start": "597680",
    "end": "599839"
  },
  {
    "text": "is before we added the secondary owner",
    "start": "599839",
    "end": "601839"
  },
  {
    "text": "and also version 1 which includes the",
    "start": "601839",
    "end": "603440"
  },
  {
    "text": "newly added secondary owner",
    "start": "603440",
    "end": "606800"
  },
  {
    "text": "in this video we saw i can use the",
    "start": "607519",
    "end": "609040"
  },
  {
    "text": "aws.net sdk to create ledgers",
    "start": "609040",
    "end": "611519"
  },
  {
    "text": "and how you can use the amazon qrdp.net",
    "start": "611519",
    "end": "613360"
  },
  {
    "text": "driver to create tables and indexes",
    "start": "613360",
    "end": "615839"
  },
  {
    "text": "as well as inserting and creating",
    "start": "615839",
    "end": "617360"
  },
  {
    "text": "documents in the history of your amazon",
    "start": "617360",
    "end": "618800"
  },
  {
    "text": "qrdb",
    "start": "618800",
    "end": "620000"
  },
  {
    "text": "thanks for watching",
    "start": "620000",
    "end": "628320"
  }
]