[
  {
    "start": "0",
    "end": "11000"
  },
  {
    "text": "thanks so much for joining us this afternoon uh we'll be chatting today about uh what we call our serverless",
    "start": "40",
    "end": "5200"
  },
  {
    "text": "offering which is AWS Lambda and API",
    "start": "5200",
    "end": "10280"
  },
  {
    "text": "Gateway oh and uh should introduce myself I'm Tim Wagner I'm the general manager of of both of those",
    "start": "10280",
    "end": "16240"
  },
  {
    "start": "11000",
    "end": "11000"
  },
  {
    "text": "Services I want to start with a little bit of an introduction here and talk about this term serverless that a lot of",
    "start": "16240",
    "end": "23080"
  },
  {
    "text": "you have been hearing about and a lot of us have been have been talking about and today I'm going to take you",
    "start": "23080",
    "end": "29119"
  },
  {
    "text": "through a little bit of a journey here so we kind of began with virtualization at the Machine level machines as the",
    "start": "29119",
    "end": "35399"
  },
  {
    "text": "unit not just of virtualization but also the unit of scale so that as you want more compute power you scale out by",
    "start": "35399",
    "end": "42039"
  },
  {
    "text": "getting more machines and the idea behind this is to abstract the hardware or if you prefer",
    "start": "42039",
    "end": "47680"
  },
  {
    "text": "abstract pieces of the data cender and then you kind of either move",
    "start": "47680",
    "end": "52840"
  },
  {
    "text": "either inside or up the stack depending on your kind of preferred metaphor here to Containers you know to the docker",
    "start": "52840",
    "end": "58600"
  },
  {
    "text": "world now applications become the unit of scale you want more compute power",
    "start": "58600",
    "end": "64559"
  },
  {
    "text": "more capabilities you scale out to more copies of the application running in more of those",
    "start": "64559",
    "end": "70119"
  },
  {
    "text": "containers and here the unit of abstraction becomes the operating system so you're at operating at a slightly",
    "start": "70119",
    "end": "76200"
  },
  {
    "text": "higher level up and then finally we come to the term that we're we're discussing here which",
    "start": "76200",
    "end": "82280"
  },
  {
    "text": "is serus where functions become the unit of scale and as you want more compute power you run more copies of the",
    "start": "82280",
    "end": "88680"
  },
  {
    "text": "function right simply doing the the thing inside the language that it is that you want to get that you want to do",
    "start": "88680",
    "end": "94520"
  },
  {
    "text": "to get your work done and the abstraction level here is the language runtime itself so that function is",
    "start": "94520",
    "end": "100399"
  },
  {
    "text": "running in python or node or Java or some other language and of course as a portfolio we",
    "start": "100399",
    "end": "107960"
  },
  {
    "text": "have uh we have options in all of these here uh ec2 at the VM level ECS at the",
    "start": "107960",
    "end": "113439"
  },
  {
    "text": "container level in the middle and of course Lambda at the at the serverless",
    "start": "113439",
    "end": "118680"
  },
  {
    "text": "level so you've got the opportunity to select from among a variety of options here so how do you make that selection",
    "start": "118680",
    "end": "125560"
  },
  {
    "start": "125000",
    "end": "125000"
  },
  {
    "text": "how do you decide what part of uh of the system you want to work at well it",
    "start": "125560",
    "end": "131000"
  },
  {
    "text": "depends on how much flexibility and customization you're looking for VMS ec2 are great when you want to",
    "start": "131000",
    "end": "138440"
  },
  {
    "text": "be able to control the operating system you need to make choices like I'm going to run on Windows instead of Linux or I",
    "start": "138440",
    "end": "144080"
  },
  {
    "text": "need to set up a specific networking configuration because that's what my business or my workload demands",
    "start": "144080",
    "end": "150080"
  },
  {
    "text": "containers give you a higher level of abstraction they're a little easier to use they're great when what you want to",
    "start": "150080",
    "end": "155200"
  },
  {
    "text": "do is run a server when you need to be able to H own the thing that's actually going to take the input from the socket",
    "start": "155200",
    "end": "161239"
  },
  {
    "text": "and ultimately do some processing on it and it gives you control over the level of scaling and of course the choice of",
    "start": "161239",
    "end": "168280"
  },
  {
    "text": "that of that server that reception technology serverless is about running code when it's needed and for many of us",
    "start": "168280",
    "end": "174920"
  },
  {
    "text": "much of the time that's an appropriate level of abstraction because it makes things really easy is kind of the",
    "start": "174920",
    "end": "180360"
  },
  {
    "text": "easiest time to market the fewest choices to have to make and of course the least overhead and investment you",
    "start": "180360",
    "end": "185879"
  },
  {
    "text": "have to make in controlling some of the underlying infrastructure choices and we'll talk a little bit more",
    "start": "185879",
    "end": "191280"
  },
  {
    "text": "of course about the details of this as we go along here now the other thing I want to get through right up front is uh",
    "start": "191280",
    "end": "197280"
  },
  {
    "start": "193000",
    "end": "193000"
  },
  {
    "text": "a second term that we've been hearing a lot about which is microservices and there are a lot of",
    "start": "197280",
    "end": "202360"
  },
  {
    "text": "different ways to go about microservices this is not a talk specifically about microservices but I'd be remiss if I",
    "start": "202360",
    "end": "208360"
  },
  {
    "text": "didn't at least mention the connection between them and Lambda",
    "start": "208360",
    "end": "213400"
  },
  {
    "text": "and Amazon API Gateway which are the easiest way to create microservices in fact what you you could almost say is",
    "start": "213400",
    "end": "219799"
  },
  {
    "text": "that it's hard not to have a microservice when you build things on top of Lambda and Gateway because they",
    "start": "219799",
    "end": "226319"
  },
  {
    "text": "create a level of abstraction they also give uh to kind of look back to sort of",
    "start": "226319",
    "end": "231400"
  },
  {
    "text": "the the linuxis if you will U they make it easy to do one thing and do it well",
    "start": "231400",
    "end": "236760"
  },
  {
    "text": "for example if you're creating an event handler as a Lambda function that Handler is doing all and only the",
    "start": "236760",
    "end": "242599"
  },
  {
    "text": "task of handling that specific kind of event it's hard for it to be monolithic",
    "start": "242599",
    "end": "247799"
  },
  {
    "text": "it's hard for it to be difficult to deploy and it's hard for it to become sort of spaghetti with 50 other things",
    "start": "247799",
    "end": "253920"
  },
  {
    "text": "because it's just got one job to do okay with that um what we're going to",
    "start": "253920",
    "end": "262320"
  },
  {
    "text": "cover here today is first of all a little bit of an introduction to both of these services so for those of you who",
    "start": "262320",
    "end": "267759"
  },
  {
    "text": "haven't been using them yet I'm going to kind of step back talk a little bit about what they are why they exist kind",
    "start": "267759",
    "end": "273039"
  },
  {
    "text": "of how they relate to some of the other pieces that we've got I'll step you through a few different key use cases so",
    "start": "273039",
    "end": "279080"
  },
  {
    "text": "how you can if you will take the serverless design patterns and then put them in practice to actually create",
    "start": "279080",
    "end": "284800"
  },
  {
    "text": "Business Solutions I want to catch everybody up from kind of the last time we chatted at",
    "start": "284800",
    "end": "290680"
  },
  {
    "text": "if you were at reinvent and remind you of the things that these teams have kind of delivered since then and we'll also",
    "start": "290680",
    "end": "296600"
  },
  {
    "text": "use that section to talk about some best practices so how can you things like versioning and scheduling in VPC and get",
    "start": "296600",
    "end": "303680"
  },
  {
    "text": "more out of those features that are already in the product today um all the the uh AV uh uh kind of",
    "start": "303680",
    "end": "311560"
  },
  {
    "text": "God's willing we will step through some demos when we get to that next part and then we'll try to save a little bit of time at the end for",
    "start": "311560",
    "end": "318199"
  },
  {
    "start": "317000",
    "end": "317000"
  },
  {
    "text": "Q&A okay so the serverless Computing which we started off talking about uh is",
    "start": "318199",
    "end": "324039"
  },
  {
    "text": "is all about being able to run code exactly when you need it and that has some really wonderful properties",
    "start": "324039",
    "end": "329720"
  },
  {
    "text": "including only having to pay for it when you actually need it and the way we think of that the way we kind of talk",
    "start": "329720",
    "end": "335960"
  },
  {
    "text": "about it a lot is through this idea of triggers or events this kind of reactive Computing design where you either hook",
    "start": "335960",
    "end": "342000"
  },
  {
    "text": "that function up to something that is for example a resource that's changing like an S3 bucket that's receiving",
    "start": "342000",
    "end": "349120"
  },
  {
    "text": "objects or you run it as the back end of something the back end of an iot device",
    "start": "349120",
    "end": "354479"
  },
  {
    "text": "that's operating in the cloud or a mobile app that's operating in the cloud all of these can trigger functions and",
    "start": "354479",
    "end": "360479"
  },
  {
    "text": "then the functions themselves can be anything you want and in fact one of the misperceptions here I think sometimes is that the functions have to be simple in",
    "start": "360479",
    "end": "366880"
  },
  {
    "text": "fact the functions can be arbitrarily complicated the the Simplicity here comes from not having to manage the",
    "start": "366880",
    "end": "373199"
  },
  {
    "text": "infrastructure and from not having a monolithic presentation of that code but the code itself can be arbitrarily",
    "start": "373199",
    "end": "379000"
  },
  {
    "text": "complex so think hard algorithms simple infrastructure and then you can do",
    "start": "379000",
    "end": "384639"
  },
  {
    "text": "really interesting things with this you can do real-time data processing so instead of a large kind of multi-hour",
    "start": "384639",
    "end": "390440"
  },
  {
    "text": "Hadoop job imagine uh instead working on individual records as they flow through",
    "start": "390440",
    "end": "396599"
  },
  {
    "text": "an Amazon Kinesis stream in real time so you can change what might have been a very uh kind of lengthy or complicated",
    "start": "396599",
    "end": "402960"
  },
  {
    "text": "process into something that's operating in real time generating essentially instantaneous analytic",
    "start": "402960",
    "end": "408680"
  },
  {
    "text": "results you can build nicely scalable back ends and we'll take a look at some of those design patterns you can also",
    "start": "408680",
    "end": "414199"
  },
  {
    "text": "choreograph systems and this is one of the things that people often get started with on Lambda they take a bunch of",
    "start": "414199",
    "end": "419840"
  },
  {
    "text": "disperate systems maybe they use an alarm or some other kind of notification process and then they use that as a way",
    "start": "419840",
    "end": "425240"
  },
  {
    "text": "to wire things up great way to kind of kind of get started using serverless for some of the things that might otherwise",
    "start": "425240",
    "end": "431680"
  },
  {
    "text": "be challenging to stand up infrastructure for and then kind of broaden out workloads from there into some of the more data Centric",
    "start": "431680",
    "end": "440080"
  },
  {
    "start": "440000",
    "end": "440000"
  },
  {
    "text": "ideas now why would you do this in the first place well probably the most obvious piece is that serverless means",
    "start": "442000",
    "end": "448879"
  },
  {
    "text": "there are no servers to manage so that might mean faster time to Market lower it costs just in general an easier way",
    "start": "448879",
    "end": "455960"
  },
  {
    "text": "for you to get from the thing that you wanted to do which was run some business logic to the actual end",
    "start": "455960",
    "end": "462960"
  },
  {
    "text": "solution maybe a little more subtle is this idea of continuous scaling this idea that when you essentially do this",
    "start": "462960",
    "end": "469240"
  },
  {
    "text": "inversion of control and you let a system like Lambda be the one to call your code when you need it you stop",
    "start": "469240",
    "end": "475919"
  },
  {
    "text": "having to worry about the impedance matching questions like do I have have enough servers do I have enough containers have I planned my capacity",
    "start": "475919",
    "end": "483319"
  },
  {
    "text": "appropriately for the next six months are questions you don't have to ask and don't have to answer any",
    "start": "483319",
    "end": "488759"
  },
  {
    "text": "longer and because this is happening at the level of individual requests you also can't get it wrong so one of the",
    "start": "488759",
    "end": "495120"
  },
  {
    "text": "things you can't do is you can't pay for idle time on cold servers because you didn't get those cold servers in the",
    "start": "495120",
    "end": "500360"
  },
  {
    "text": "first place so it's got kind of a nice economic consequence to match up to the Simplicity",
    "start": "500360",
    "end": "507280"
  },
  {
    "text": "consequence So speaking of that accounting part of the equation let's just take a minute and look at the kind of the pricing structure here because",
    "start": "507280",
    "end": "513279"
  },
  {
    "text": "that's actually one of the really really interesting and Innovative things about Lambda you buy compute time in these",
    "start": "513279",
    "end": "519159"
  },
  {
    "text": "incredibly small uh granules what I think one uh uh media guy called",
    "start": "519159",
    "end": "524200"
  },
  {
    "text": "individual grains of sand so 100 milliseconds at a time for 21 micr cents for 128 Meg unit and a request charge of",
    "start": "524200",
    "end": "532200"
  },
  {
    "text": "20 micr cents for an individual call so these really really tiny little fragments of compute for really tiny",
    "start": "532200",
    "end": "539079"
  },
  {
    "text": "little amounts of money and then there are no minimums no an no fees no per device contracts or anything else and",
    "start": "539079",
    "end": "546600"
  },
  {
    "text": "the thing that we did that that I'm really excited about that makes it really easy to develop on Lambda is the",
    "start": "546600",
    "end": "552079"
  },
  {
    "text": "generous free tier so that you can call every month every account forever into",
    "start": "552079",
    "end": "558120"
  },
  {
    "text": "Lambda a million times for free makes it really easy to develop code and in some cases even to run entire production",
    "start": "558120",
    "end": "566680"
  },
  {
    "start": "567000",
    "end": "567000"
  },
  {
    "text": "systems so how do you actually do it I talk about the mechanics here so uh I",
    "start": "567000",
    "end": "572399"
  },
  {
    "text": "call this uh this first part here the byoc or bring your own code you know if you're kind of familiar with some of the older P systems some of them had this",
    "start": "572399",
    "end": "578920"
  },
  {
    "text": "sort of curated lockin problem right where you had to use only pure libraries",
    "start": "578920",
    "end": "584519"
  },
  {
    "text": "or only the libraries that the vendor was willing to make make available and we let you run anything our security",
    "start": "584519",
    "end": "589800"
  },
  {
    "text": "model is if if you bring it you can you can run it so you generated a library out of assembly code that's that's just",
    "start": "589800",
    "end": "595800"
  },
  {
    "text": "fine you want to bring an executable and invoke it that's just fine and in fact if you kind of you know think about that",
    "start": "595800",
    "end": "601760"
  },
  {
    "text": "for a second you you realize that also means you can bring your own language runtime so while we give you a few",
    "start": "601760",
    "end": "607120"
  },
  {
    "text": "different languages that make it easy to use for example python Java or node",
    "start": "607120",
    "end": "612839"
  },
  {
    "text": "you're also welcome and people have brought hasal and go and c and and lots",
    "start": "612839",
    "end": "618320"
  },
  {
    "text": "of others now once you're there as I said you can you can invoke that code either",
    "start": "618320",
    "end": "623480"
  },
  {
    "text": "synchronously or asynchronously you can hook it up to other parts of the AWS portfolio like S3 and Dynamo you can",
    "start": "623480",
    "end": "630560"
  },
  {
    "text": "wire it up to third parties we have blueprints for things like Splunk and algorithmia um uh uh slack channels and",
    "start": "630560",
    "end": "638639"
  },
  {
    "text": "other kinds of things that you can you can then very quickly create serverless solutions",
    "start": "638639",
    "end": "644279"
  },
  {
    "text": "for instead of picking instances instead of picking a particular machine type to decide how much power you want we give",
    "start": "644279",
    "end": "651320"
  },
  {
    "text": "you this one simple knob and you can turn that uh and we kind of it's sort of a power setting although we dem uh",
    "start": "651320",
    "end": "657519"
  },
  {
    "text": "demarcate it as a memory for sort of Simplicity down to 128 Meg or up to 1.5",
    "start": "657519",
    "end": "663600"
  },
  {
    "text": "gig and what I always tell people is we phrase this as memory but think of it as a power setting because what you're",
    "start": "663600",
    "end": "668839"
  },
  {
    "text": "really doing um and those of you familiar with cgroups will instantly realize why is essentially dialing the",
    "start": "668839",
    "end": "674360"
  },
  {
    "text": "percentage of the machine that you get so CPU memory um essentially dis iio bandwidth Network all kind of dialing at",
    "start": "674360",
    "end": "681399"
  },
  {
    "text": "the same time and then we've integrated this with Im so that and resource policies so it's",
    "start": "681399",
    "end": "687720"
  },
  {
    "text": "really easy to control who gets access to your individual Lambda",
    "start": "687720",
    "end": "692600"
  },
  {
    "text": "functions now creating these functions is uh is is very simple you can choose",
    "start": "693959",
    "end": "699480"
  },
  {
    "text": "to do uh use the command line uh CLI integration uh we have integration with visual studio and Eclipse if you prefer",
    "start": "699480",
    "end": "706279"
  },
  {
    "text": "idees um the programming model itself as I mentioned you know essentially Lambda",
    "start": "706279",
    "end": "711760"
  },
  {
    "text": "is the web server but apart from that you're welcome to use these underlying operating system abstractions so you can",
    "start": "711760",
    "end": "717360"
  },
  {
    "text": "create processes create threads write things to disk all the kind of the normal pieces of programming and allows",
    "start": "717360",
    "end": "723440"
  },
  {
    "text": "libraries to function normally and we call the mo the model here stateless and of course that's in",
    "start": "723440",
    "end": "729240"
  },
  {
    "text": "some ways a little bit of a misnomer because of course you're going to have state session State backend state in your data tier what that really means is",
    "start": "729240",
    "end": "736240"
  },
  {
    "text": "a separation of concerns so instead of entangling that state with your",
    "start": "736240",
    "end": "741440"
  },
  {
    "text": "computation we ask you to place that state in something else like S3 if it's objects Dynamo if you need read after",
    "start": "741440",
    "end": "748040"
  },
  {
    "text": "write consistent data uh nosql style database um or a conventional SQL database if you especially if you're",
    "start": "748040",
    "end": "754079"
  },
  {
    "text": "using VPC it also means there's no Affinity to the hardware that's one of the things that allows us to scale on your behalf",
    "start": "754079",
    "end": "760600"
  },
  {
    "text": "be fault tolerant on your behalf and and maintain down at the level of the operating system and the language",
    "start": "760600",
    "end": "766480"
  },
  {
    "text": "runtime security patches and other kinds of of heavy lifting on your",
    "start": "766480",
    "end": "771800"
  },
  {
    "text": "behalf and then finally we build in things like logging and monitoring although you're also welcome to extend",
    "start": "771800",
    "end": "777279"
  },
  {
    "text": "both of those with application Level metrics and log entries as",
    "start": "777279",
    "end": "783199"
  },
  {
    "start": "783000",
    "end": "783000"
  },
  {
    "text": "well so usually round about this time I always get this this question uh we're kind of doing this more oneon-one where",
    "start": "783199",
    "end": "789639"
  },
  {
    "text": "somebody will say but but what is Lambda I mean is it just is it just Docker under the covers so let's just's actually chat about that what what is",
    "start": "789639",
    "end": "796120"
  },
  {
    "text": "actually going on here so unsurprisingly this is a system that uses Linux",
    "start": "796120",
    "end": "801519"
  },
  {
    "text": "containers when we run your code we run it of course on a virtual machine abstraction which is also running a",
    "start": "801519",
    "end": "807079"
  },
  {
    "text": "container in which we're running a language run time that actually hosts your code the the function the function",
    "start": "807079",
    "end": "812320"
  },
  {
    "text": "that you gave us now it's not Docker because Docker is a slightly different abstraction for a slightly different",
    "start": "812320",
    "end": "817600"
  },
  {
    "text": "purpose but it shares all of the fundamental Os or kernel level pieces that Docker is using things like process",
    "start": "817600",
    "end": "823880"
  },
  {
    "text": "and network isolation c groups set comp to limit sort of surface area and so forth so that's kind of what's going on",
    "start": "823880",
    "end": "830839"
  },
  {
    "text": "at the at the level of actually running individual chunks of code I used to jokingly say that it was",
    "start": "830839",
    "end": "837720"
  },
  {
    "text": "uh the sort of the higher level part is the world's largest bin packing uh algorithm now I'm not so sure it's a joke any longer uh so what the rest of",
    "start": "837720",
    "end": "846120"
  },
  {
    "text": "Lambda is doing is kind of taking that request stream that comes in and finding in about a millisecond or so a good",
    "start": "846120",
    "end": "852360"
  },
  {
    "text": "place to go land it a place that is respective uh respectful of security policies packing policies the resources",
    "start": "852360",
    "end": "859480"
  },
  {
    "text": "you've asked for and so forth now that that has to land on something so we're also internally",
    "start": "859480",
    "end": "865560"
  },
  {
    "text": "basically providing ourselves with essentially a language runtime as a service um something that's vending out",
    "start": "865560",
    "end": "871440"
  },
  {
    "text": "places to go land that work and then on the APA Gateway side um it's essentially what you might call a",
    "start": "871440",
    "end": "877639"
  },
  {
    "text": "Swagger interpreter so something that is taking a description of an API um and coupling that uh so that we can build",
    "start": "877639",
    "end": "885120"
  },
  {
    "text": "API interfaces around this so let's chat a little bit about",
    "start": "885120",
    "end": "890800"
  },
  {
    "start": "888000",
    "end": "888000"
  },
  {
    "text": "about Gateway now we Now you kind of know what Lambda is so Gateway is this is a mechanism for hosting apis restful",
    "start": "890800",
    "end": "898120"
  },
  {
    "text": "endpoints that can be coming in from mobile app calls of course web apps um other",
    "start": "898120",
    "end": "903639"
  },
  {
    "text": "services and then it's Distributing those to some kind of backend uh some",
    "start": "903639",
    "end": "908720"
  },
  {
    "text": "kind of backend endpoint often an adws Lambda function but not necessarily could also be an endpoint you built",
    "start": "908720",
    "end": "914480"
  },
  {
    "text": "yourself on ec2 or any other publicly accessible endpoint can also be any",
    "start": "914480",
    "end": "919800"
  },
  {
    "text": "other AWS service so you can use this to front other AWS Services as well if you want to place a sort of your own custom",
    "start": "919800",
    "end": "926680"
  },
  {
    "text": "restful endpoint around them and then we throw in some logging and metering and caching and and dods protection on the",
    "start": "926680",
    "end": "933920"
  },
  {
    "text": "front end as well going to give you a complete package of that so you can use this to create a",
    "start": "933920",
    "end": "939399"
  },
  {
    "start": "937000",
    "end": "937000"
  },
  {
    "text": "unified mechanism for apis we list it as part of of serverless of course because it is sort of the interface to lambda's",
    "start": "939399",
    "end": "945600"
  },
  {
    "text": "implementation gives you that way to abstract and separate and encapsulate",
    "start": "945600",
    "end": "951120"
  },
  {
    "text": "functionality dos protection throttling monitoring logging those things make it easy to not have to go recreate the",
    "start": "951120",
    "end": "956959"
  },
  {
    "text": "wheel and do that undifferentiated heavy lifting on your own and then of course you're also able to authenticate and",
    "start": "956959",
    "end": "963279"
  },
  {
    "text": "authorize requests and we give you a choice of buil-in mechanisms for this as",
    "start": "963279",
    "end": "968560"
  },
  {
    "text": "well as a custom Mo solution which to No Surprise works by calling a Lambda",
    "start": "968560",
    "end": "974720"
  },
  {
    "text": "function and both of these services are available in five regions worldwide including the new Frankford Frankfurt",
    "start": "976000",
    "end": "982839"
  },
  {
    "text": "Germany region that we just launched uh uh about a month ago okay so I want to switch gears now",
    "start": "982839",
    "end": "989959"
  },
  {
    "text": "and talk a little bit about use cases so kind of with that understanding of what these two services are what are the you",
    "start": "989959",
    "end": "996639"
  },
  {
    "text": "know kind of modern day cloud and serverless design patterns that you can build with",
    "start": "996639",
    "end": "1002199"
  },
  {
    "start": "1002000",
    "end": "1002000"
  },
  {
    "text": "them so I think of them as kind of three different buckets the things that we see customers doing doing a lot with these",
    "start": "1002199",
    "end": "1008279"
  },
  {
    "text": "services and they tend to fall into either a data processing category think",
    "start": "1008279",
    "end": "1013519"
  },
  {
    "text": "like real-time streaming analytics or real-time object workflows scalable ends like mobile and",
    "start": "1013519",
    "end": "1020720"
  },
  {
    "text": "web app and iot uh Solutions or kind of third party serverless app ecosystems so",
    "start": "1020720",
    "end": "1027720"
  },
  {
    "text": "let's take a look at uh kind of an example of each here so the data processing one",
    "start": "1027720",
    "end": "1033438"
  },
  {
    "start": "1028000",
    "end": "1028000"
  },
  {
    "text": "typically looks like hooking Lambda up to one of these fat data pipes in AWS S3",
    "start": "1033439",
    "end": "1039720"
  },
  {
    "text": "Kinesis Dynamo sqs something where a lot of data is streaming",
    "start": "1039720",
    "end": "1044918"
  },
  {
    "text": "through and then you can use that to to do things like lightweight work workflow kickoff you can hook up a Lambda",
    "start": "1044919",
    "end": "1052520"
  },
  {
    "text": "function to thumbnail images to index documents basically anything that you",
    "start": "1052520",
    "end": "1057600"
  },
  {
    "text": "can think of to go process those resources and makes it really easy to uh",
    "start": "1057600",
    "end": "1063440"
  },
  {
    "text": "style something which is reactive in the sense of of allowing you to change audit",
    "start": "1063440",
    "end": "1068960"
  },
  {
    "text": "transform or notify so why functions you know and",
    "start": "1068960",
    "end": "1075400"
  },
  {
    "start": "1073000",
    "end": "1073000"
  },
  {
    "text": "here's a great kind of a great part in the story to kind of talk a little bit about why this works so well I mean of",
    "start": "1075400",
    "end": "1080760"
  },
  {
    "text": "course you can call into these other services from anything including functions that doesn't really differentiate this from kind of",
    "start": "1080760",
    "end": "1087280"
  },
  {
    "text": "conventional applications what does is the fact that these resources things like Dynamo can call functions through",
    "start": "1087280",
    "end": "1095039"
  },
  {
    "text": "events in a really nice reactive fashion so you put some data into Dynamo Dynamo",
    "start": "1095039",
    "end": "1100400"
  },
  {
    "text": "can go call a Lambda function to let you operate on that data so maybe you're ingesting zip codes for example and you",
    "start": "1100400",
    "end": "1107200"
  },
  {
    "text": "want to canonicalize those zip codes make sure that they're valid send yourself a text if you get any any bogus",
    "start": "1107200",
    "end": "1112320"
  },
  {
    "text": "ones a really nice way to kind of um to kind of build that system and you can even do a feedback loop because of",
    "start": "1112320",
    "end": "1118080"
  },
  {
    "text": "course you can be operating on the same data that's coming in the nice thing about this is it lets",
    "start": "1118080",
    "end": "1123159"
  },
  {
    "text": "you take a resource like an S3 bucket or a Dynamo table and turn it into an intelligent resource that has Behavior",
    "start": "1123159",
    "end": "1129640"
  },
  {
    "text": "not just the stock Behavior it came with from AWS but custom Behavior maybe it's an S3 bucket for example that just",
    "start": "1129640",
    "end": "1135960"
  },
  {
    "text": "automatically compresses all of its content and if you swing by the uh the dev Lounge later on I should be doing a",
    "start": "1135960",
    "end": "1141520"
  },
  {
    "text": "demo of that of course you don't have to present that object as itself you can",
    "start": "1141520",
    "end": "1146559"
  },
  {
    "text": "also stick an API on front of it and you can make it make it look like or feel like anything else you want so kind of a",
    "start": "1146559",
    "end": "1152799"
  },
  {
    "text": "kind of the ecosystem of functions and API is working together okay back to our second",
    "start": "1152799",
    "end": "1159280"
  },
  {
    "start": "1158000",
    "end": "1158000"
  },
  {
    "text": "category of use cases here automatically scalable backends and the recipe for this is fair",
    "start": "1159280",
    "end": "1165320"
  },
  {
    "text": "is usually fairly simple kind of starting from the back end a data tier of Dynamo DB for nosql or a SQL Server",
    "start": "1165320",
    "end": "1172880"
  },
  {
    "text": "if you prefer relational then Lambda for the scalable kind of cloud and server",
    "start": "1172880",
    "end": "1178280"
  },
  {
    "text": "portion of the compute and then some kind of client side either uh a mobile app where you've probably used AWS",
    "start": "1178280",
    "end": "1184880"
  },
  {
    "text": "mobile SDK and Cognito to build the authentication and connectivity portion on the client or if you're using iot AWS",
    "start": "1184880",
    "end": "1192720"
  },
  {
    "text": "iot to connect device that's going to be chirping mqtt in order to get its data up into the cloud and number three here",
    "start": "1192720",
    "end": "1199559"
  },
  {
    "text": "is optional um if you're doing HTML 5 Gateway might make sense in that architecture otherwise you might just go",
    "start": "1199559",
    "end": "1205200"
  },
  {
    "text": "straight to Lambda from the client so the third category here is is",
    "start": "1205200",
    "end": "1213440"
  },
  {
    "text": "one that actually excites me a lot because it's the thing that kind of sits around the frontier today of of what",
    "start": "1213440",
    "end": "1218559"
  },
  {
    "text": "Lambda is doing things like taking the the Alexa skills kit the the Amazon oops uh the",
    "start": "1218559",
    "end": "1227320"
  },
  {
    "text": "Amazon eco ecosystem and being able to connect apps up to that or being able to take a slack Channel and create",
    "start": "1227320",
    "end": "1233760"
  },
  {
    "text": "serverless Bots and in this case and we actually have a Blog on this one actually taking",
    "start": "1233760",
    "end": "1238919"
  },
  {
    "text": "both of those ecosystems and being able to couple them together so there's a really nice way to",
    "start": "1238919",
    "end": "1245400"
  },
  {
    "text": "take you know if you do have one of these these ecosystems to kind of bootstrap it and connect it to the things that developers want to do",
    "start": "1245400",
    "end": "1252039"
  },
  {
    "text": "without having to go out and ask your developers to learn how to stand up infrastructure super compelling",
    "start": "1252039",
    "end": "1257080"
  },
  {
    "text": "especially if infrastructure may not be the thing that that particular developer constituency is excited",
    "start": "1257080",
    "end": "1263120"
  },
  {
    "text": "about okay let's talk a little bit about uh kind of what the team has been up to and then I want to take a little bit uh",
    "start": "1263120",
    "end": "1268919"
  },
  {
    "text": "dive into some of these best practices that I mentioned so if you're kind of been",
    "start": "1268919",
    "end": "1275600"
  },
  {
    "text": "watching along you know that at reinvent we launched support for python which was our third language scheduled functions",
    "start": "1275600",
    "end": "1281039"
  },
  {
    "text": "we extended running times and we added versioning which allows you to to create immutable snapshots of your function as",
    "start": "1281039",
    "end": "1287760"
  },
  {
    "text": "well as be able to do things like roll back and we've been busy since then we've extended the storage limit",
    "start": "1287760",
    "end": "1295120"
  },
  {
    "text": "significantly especially with versioning we found people were bringing a lot of code onto the platform and we wanted to keep that free so we greatly increased",
    "start": "1295120",
    "end": "1301880"
  },
  {
    "text": "the amount of storage that you can bring on as we mentioned at reinvent we La we uh launched custom vpcs we'll talk a",
    "start": "1301880",
    "end": "1309120"
  },
  {
    "text": "little bit more about that on the uh the upcoming slides here just this week we increased the",
    "start": "1309120",
    "end": "1314799"
  },
  {
    "text": "granularity of schedules I know a lot of people have asked you know can we go from five minutes down to one and so",
    "start": "1314799",
    "end": "1320000"
  },
  {
    "text": "we've we're happy to uh have Lambda scheduled jobs and uh cloudwatch event",
    "start": "1320000",
    "end": "1325039"
  },
  {
    "text": "schedules that can now be operating at a minute level of granularity as I mentioned other regions we launched in in Frankfurt um a lot of",
    "start": "1325039",
    "end": "1333080"
  },
  {
    "text": "interest in having a second European European region especially for data sovereignty issues a couple of weeks ago",
    "start": "1333080",
    "end": "1339480"
  },
  {
    "text": "we um did what was probably the uh the most overdue one which was upgrading our node version so uh in addition to the",
    "start": "1339480",
    "end": "1346440"
  },
  {
    "text": "node 10 we now have 432 as well and we'll we'll chat a little bit in the demo session here um about some of the",
    "start": "1346440",
    "end": "1353159"
  },
  {
    "text": "differences there in the programming models on the Gateway side we did oneclick core setup in the in the",
    "start": "1353159",
    "end": "1359000"
  },
  {
    "text": "console and added stage variables I already mentioned Uh custom Lambda authorizers which is a nice way to do uh",
    "start": "1359000",
    "end": "1366080"
  },
  {
    "text": "Identity or or uh authorization protocol specific evaluation as requests are",
    "start": "1366080",
    "end": "1372480"
  },
  {
    "text": "coming into Gateway a Swagger Import and Export which we'll take a look at here and then just announce this we Cloud",
    "start": "1372480",
    "end": "1379200"
  },
  {
    "text": "information support for API Gateway so that you can now stand up uh Gateway uh",
    "start": "1379200",
    "end": "1384679"
  },
  {
    "text": "apis as well as Lambda functions and other pieces of infrastructure all in a single",
    "start": "1384679",
    "end": "1391400"
  },
  {
    "start": "1391000",
    "end": "1391000"
  },
  {
    "text": "package so let's chat about uh a couple of these a couple of these deeper topics and I call these some of the the how-to",
    "start": "1392840",
    "end": "1399200"
  },
  {
    "text": "guides because they encapsulate questions that I get a lot in these different domains so probably one of the most",
    "start": "1399200",
    "end": "1405760"
  },
  {
    "text": "frequently asked questions is hey I want to get of cold starts you know I've got maybe I'm using Java and so it takes a",
    "start": "1405760",
    "end": "1411960"
  },
  {
    "text": "little longer to get a function started or I have a very bursty operation and I want to make sure latency is low um you",
    "start": "1411960",
    "end": "1418000"
  },
  {
    "text": "know whenever that thing actually heats up one of the easiest ways to do this is to turn a schedule on that same function",
    "start": "1418000",
    "end": "1424279"
  },
  {
    "text": "so that you can actually prime it and if you only need one copy of it like for example an Amazon ex Echo Alexa skills",
    "start": "1424279",
    "end": "1431600"
  },
  {
    "text": "Kit app um a single schedule sort of chirping uh maybe a few times an hour is",
    "start": "1431600",
    "end": "1437679"
  },
  {
    "text": "all you need if you need to keep a large number of copies warm then you can use a schedule",
    "start": "1437679",
    "end": "1443720"
  },
  {
    "text": "and you can fan that schedule out as kind of as far as you like with as many Lambda functions calling other Lambda",
    "start": "1443720",
    "end": "1449240"
  },
  {
    "text": "functions in hierarchy and get up to very very large levels of traffic load very very",
    "start": "1449240",
    "end": "1455360"
  },
  {
    "text": "easily we'll take a look here in a second actually at the next one down which is how can you pull the que like sqs and the answer of course is you know",
    "start": "1455360",
    "end": "1462400"
  },
  {
    "text": "schedule a schedule a poll or against it so we'll take a look at that here in a bit um how can you get more timers we to",
    "start": "1462400",
    "end": "1468679"
  },
  {
    "text": "people who want to have lots of timers and probably the easiest way to do that is call into Lambda and then you simply do the fork out from Lambda so you can",
    "start": "1468679",
    "end": "1475360"
  },
  {
    "text": "easily have one function async invoke a lot of others and then of course for granularity finer than a minute all the",
    "start": "1475360",
    "end": "1481320"
  },
  {
    "text": "languages we support have some kind of sleep or timer feature um and you can sort of generate that internal set of",
    "start": "1481320",
    "end": "1487320"
  },
  {
    "text": "events or operations you know down to whatever level of of of granularity the",
    "start": "1487320",
    "end": "1492919"
  },
  {
    "text": "individual languages offer for example the node you can go down to a few milliseconds easily",
    "start": "1492919",
    "end": "1500000"
  },
  {
    "start": "1499000",
    "end": "1499000"
  },
  {
    "text": "on function versioning we get a similar kind of set of questions here so one of",
    "start": "1500840",
    "end": "1505880"
  },
  {
    "text": "the things I get asked a lot is hey these immutable snapshots are great love the immutability except where I don't",
    "start": "1505880",
    "end": "1512240"
  },
  {
    "text": "like what if I have config info and they generally kind of two ways that we see people sort of doing this the first one",
    "start": "1512240",
    "end": "1518080"
  },
  {
    "text": "is they retrieve that information from Dynamo or S3 U mutable config state in",
    "start": "1518080",
    "end": "1523159"
  },
  {
    "text": "the static portion of their function and then that is cach for the lifetime of the container of course you can refres",
    "start": "1523159",
    "end": "1528320"
  },
  {
    "text": "refesh it manually if you if you like that's probably the easiest most common way the other thing you can do which is",
    "start": "1528320",
    "end": "1533720"
  },
  {
    "text": "a little bit little bit tricky but kind of interesting is you can have another function whose sole purpose is to reply",
    "start": "1533720",
    "end": "1539720"
  },
  {
    "text": "with config information and then you conversion that function for the different versions of the configuration",
    "start": "1539720",
    "end": "1545000"
  },
  {
    "text": "effectively separating the lifetime and version stream of your config data from that of your underlying",
    "start": "1545000",
    "end": "1552320"
  },
  {
    "text": "code we implemented aliases to make roll back really easy in Lambda and so what",
    "start": "1552960",
    "end": "1558360"
  },
  {
    "text": "you do with that is you simply you know create an alias you point the Alias to a version and then roll back and roll",
    "start": "1558360",
    "end": "1563399"
  },
  {
    "text": "forward is as easy as changing what the Alias points to then for your clients people who are calling you you hand out",
    "start": "1563399",
    "end": "1569799"
  },
  {
    "text": "the the Arn of the Alias the moniker of the Alias instead of the underlying",
    "start": "1569799",
    "end": "1576399"
  },
  {
    "text": "versions now if you have a whole collection of functions or maybe functions plus apis that's where cloud",
    "start": "1576399",
    "end": "1582440"
  },
  {
    "text": "formation is a great solution because then you can transactionally update or change all of those at once",
    "start": "1582440",
    "end": "1589440"
  },
  {
    "text": "blue green deploy deployments is an interesting one because sometimes I get to ask this in the in the sort of spirit of well what do I have to do in Lambda",
    "start": "1589440",
    "end": "1595840"
  },
  {
    "text": "to achieve blue green deployments of my code and the answer is nothing that's the joy of serverless but you might want to do",
    "start": "1595840",
    "end": "1602679"
  },
  {
    "text": "traffic tra some kind of traffic flow control that might that makes perfect sense right maybe you're doing an AB",
    "start": "1602679",
    "end": "1607840"
  },
  {
    "text": "test for example and typically for that what people do is they insert a traffic cop another function on the front of",
    "start": "1607840",
    "end": "1613200"
  },
  {
    "text": "your Lambda functions which decides whether to call a or call B and if you",
    "start": "1613200",
    "end": "1618240"
  },
  {
    "text": "you hide that behind Gateway or behind aliases then you can also take that cop out over",
    "start": "1618240",
    "end": "1623799"
  },
  {
    "text": "time and then finally to lock a client or a device under a particular version well that's where that's that's where",
    "start": "1623799",
    "end": "1629159"
  },
  {
    "text": "versions are nice you can simply put the versions on directly into that client gives you access to multiple versions",
    "start": "1629159",
    "end": "1635120"
  },
  {
    "text": "multiple clients um at the same time okay let's switch gears to VPC",
    "start": "1635120",
    "end": "1641880"
  },
  {
    "start": "1639000",
    "end": "1639000"
  },
  {
    "text": "since this is one of our relatively new features and has some some kind of interesting uh qualities cuz it's a",
    "start": "1641880",
    "end": "1647200"
  },
  {
    "text": "little lower level than most Lambda features first of all I want to clear one thing up which is sometimes I I hear",
    "start": "1647200",
    "end": "1654159"
  },
  {
    "text": "people say well do I have to turn on VPC to get security and the answer is absolutely not your functions always run",
    "start": "1654159",
    "end": "1661039"
  },
  {
    "text": "in a VPC it's just that sometimes they run in our VPC and sometimes they run in your VPC but they're always secured",
    "start": "1661039",
    "end": "1668000"
  },
  {
    "text": "they're always in a VPC now if you want to access a",
    "start": "1668000",
    "end": "1673080"
  },
  {
    "text": "particular resource maybe you've got your relational database you're using you know MySQL or Aurora um elasticache",
    "start": "1673080",
    "end": "1680080"
  },
  {
    "text": "is holding some of your session stayed you've got private easy2 endpoints then turning on uh private VPC access for",
    "start": "1680080",
    "end": "1687600"
  },
  {
    "text": "your Lambda function makes sense and that also allows you to access all of the standard VPC infrastructure so",
    "start": "1687600",
    "end": "1693880"
  },
  {
    "text": "peering VPN endpoints private S3 endpoints and the like now probably the thing that goes",
    "start": "1693880",
    "end": "1700519"
  },
  {
    "text": "wrong most often is that when you turn this on even though it's there in the docs people forget that you're going to",
    "start": "1700519",
    "end": "1706440"
  },
  {
    "text": "lose access to the to the public internet so if you want that uh and some people do some people don't make sure",
    "start": "1706440",
    "end": "1713200"
  },
  {
    "text": "that you turn on manage n or have an ad instance in the VPC Simply Having Auto",
    "start": "1713200",
    "end": "1718360"
  },
  {
    "text": "assigned public IP or or um or Gateway alone is not going to sort of allow your",
    "start": "1718360",
    "end": "1723600"
  },
  {
    "text": "Lambda function to keep calling things like Dynamo and",
    "start": "1723600",
    "end": "1728440"
  },
  {
    "start": "1729000",
    "end": "1729000"
  },
  {
    "text": "S3 now a couple of best practices around bpc again it's optional don't turn it on",
    "start": "1729480",
    "end": "1734640"
  },
  {
    "text": "unless you need it it does have a latency impact because there's a bunch of stuff that we have to go do to set up",
    "start": "1734640",
    "end": "1739679"
  },
  {
    "text": "your function over and Beyond what would normally take place just to get a language runtime up and going second the",
    "start": "1739679",
    "end": "1746360"
  },
  {
    "text": "Enis that you use count against your quota so if you're using a whole bunch of Enis for something else you can make",
    "start": "1746360",
    "end": "1752480"
  },
  {
    "text": "make it such that Lambda will run out of them when it attempts to get more so roughly speaking Ure you have enough for",
    "start": "1752480",
    "end": "1758960"
  },
  {
    "text": "concurrent levels we do as much consolidation as we can that's OB obviously subject to some of our own",
    "start": "1758960",
    "end": "1765039"
  },
  {
    "text": "packing algorithms as well as ec2 limitations um but all up if you if you",
    "start": "1765039",
    "end": "1771159"
  },
  {
    "text": "if you account for concur your max concurrency you will definitely be safe and then of course please don't delete",
    "start": "1771159",
    "end": "1777480"
  },
  {
    "text": "or rename these Enis because that's how we're managing them make sure your subnets have enough IPS for all of them",
    "start": "1777480",
    "end": "1783640"
  },
  {
    "text": "and then this is your choice but the suggestion is have at least one Subnet in each AZ we'll obey if you don't but",
    "start": "1783640",
    "end": "1791760"
  },
  {
    "text": "it will also mean that if that AZ ever goes down we can't move your function and run it in the other one and so it defeats some of the natural fault",
    "start": "1791760",
    "end": "1797679"
  },
  {
    "text": "tolerance Lambda would otherwise be giving you okay if we can cut over in the back",
    "start": "1797679",
    "end": "1804080"
  },
  {
    "text": "to the demo here awesome good all right so let's start",
    "start": "1804080",
    "end": "1811039"
  },
  {
    "text": "with cloud formation so new feature this week uh cloud formation supporting API",
    "start": "1811039",
    "end": "1816279"
  },
  {
    "text": "Gateway so now you have the whole servess package Lambda new features of Lambda like as a reinvent like",
    "start": "1816279",
    "end": "1823159"
  },
  {
    "text": "versioning which are in there as well and your apis so what you're seeing here is a cloud formation template I'm going",
    "start": "1823159",
    "end": "1830320"
  },
  {
    "text": "to scroll down you can see some Lambda code here on the screen we'll take a look at that again",
    "start": "1830320",
    "end": "1836440"
  },
  {
    "text": "later and I'm going to go find here we are all right new part here defining",
    "start": "1836440",
    "end": "1843200"
  },
  {
    "text": "rest apis so I'm going to go ahead and copy",
    "start": "1843200",
    "end": "1848480"
  },
  {
    "text": "this we're going to cut over to cloud formation and I'm going to do this on the console because it's the easier",
    "start": "1848480",
    "end": "1854840"
  },
  {
    "text": "thing to demo here um but of course this works just as well in the command line",
    "start": "1854840",
    "end": "1860120"
  },
  {
    "text": "so I'm going to go ahead and paste in that template you won't be able to read it from here of course but it's the one that we just looked",
    "start": "1860120",
    "end": "1867440"
  },
  {
    "text": "at oops I'm going go ahead and and refresh so you can see this in the",
    "start": "1868519",
    "end": "1873960"
  },
  {
    "text": "designer here as well this is actually going to create an API Gateway and a couple of Lambda functions and a Dynamo",
    "start": "1873960",
    "end": "1881080"
  },
  {
    "text": "table and then it's going to do something cool not only is it going to wire them up it's actually going to run a custom Lambda function to pre-populate",
    "start": "1881080",
    "end": "1887480"
  },
  {
    "text": "a little bit data and so what you're seeing here is one Lambda function to do that pre-population and then another one",
    "start": "1887480",
    "end": "1894120"
  },
  {
    "text": "which is the actual quote unquote serverless back end that's going to offer up an inventory or catalog check",
    "start": "1894120",
    "end": "1900519"
  },
  {
    "text": "system and then it's going to wrap this is the Dynamo table here and then it's going to wrap an API Gateway end point",
    "start": "1900519",
    "end": "1906120"
  },
  {
    "text": "around that as well we're not going to stop to build a full-on web app or mobile app for this um but I'm going to",
    "start": "1906120",
    "end": "1911320"
  },
  {
    "text": "go ahead and let this thing get started and then what we'll do is we'll",
    "start": "1911320",
    "end": "1917240"
  },
  {
    "text": "take a we'll take a quick look at um at some of the some of the things it created so I'm going to finish step",
    "start": "1917240",
    "end": "1923600"
  },
  {
    "text": "stepping through",
    "start": "1923600",
    "end": "1926240"
  },
  {
    "text": "this we will get this out I finished it at like two in the",
    "start": "1935399",
    "end": "1943720"
  },
  {
    "text": "morning all right so here's here's the cloud formation stack uh you can see it's already started operating here and",
    "start": "1944519",
    "end": "1950960"
  },
  {
    "text": "again it's going to it's basically building three things for us an API Gateway or the the interface to this",
    "start": "1950960",
    "end": "1957399"
  },
  {
    "text": "functionality we're basically building a little backend inventory system think of it as a kind of like e-commerce retail",
    "start": "1957399",
    "end": "1963279"
  },
  {
    "text": "and we'll go ahead and and then look up an item in it um is putting a Lambda function uh in place to kind of do the",
    "start": "1963279",
    "end": "1969960"
  },
  {
    "text": "code for that backend the actual sort of database lookup and any other kind of data transformation analysis querying",
    "start": "1969960",
    "end": "1976360"
  },
  {
    "text": "Etc and then it's using Dynamo as the storage tier so it's going to with that",
    "start": "1976360",
    "end": "1981600"
  },
  {
    "text": "basically that one click on the on the cloud formation template it's going to stand all of those things up along with",
    "start": "1981600",
    "end": "1986760"
  },
  {
    "text": "all of the various permissions wire UPS event sources Etc to kind of connect all",
    "start": "1986760",
    "end": "1991880"
  },
  {
    "text": "of the dots together the sort of thing that we'd have to spend the next five minutes kind of piece mealing here",
    "start": "1991880",
    "end": "1997039"
  },
  {
    "text": "together from three different consoles otherwise so I'm going to go ahead and",
    "start": "1997039",
    "end": "2002320"
  },
  {
    "text": "refresh here and kind of see how far along this has gotten see gotten a little further here",
    "start": "2002320",
    "end": "2008480"
  },
  {
    "text": "we're up to building up some of the the IM rolles and so the nice thing of course about cloud formation for those",
    "start": "2008480",
    "end": "2013519"
  },
  {
    "text": "of you who aren't uh already users of it is that it provides this nice transactional wrapper around things you",
    "start": "2013519",
    "end": "2019880"
  },
  {
    "text": "see it creating all of all of these resources here and while we're not going to wait for it to reverse its way back out if something goes wrong it will",
    "start": "2019880",
    "end": "2025960"
  },
  {
    "text": "clean them up and if I go delete it again it will also go clean them up and so this is really nice because I get to",
    "start": "2025960",
    "end": "2031440"
  },
  {
    "text": "deal now with whole collections of microservices apis implementations and their Associated resources and back ends",
    "start": "2031440",
    "end": "2038760"
  },
  {
    "text": "as a unit rather than having to manually make sure that I have gotten all of them kind of staged and synced all at the",
    "start": "2038760",
    "end": "2045120"
  },
  {
    "text": "same time all right looks like we're getting",
    "start": "2045120",
    "end": "2051280"
  },
  {
    "text": "pretty close here I'm going to go over to API Gateway and um refresh this see",
    "start": "2051280",
    "end": "2056599"
  },
  {
    "text": "if we end up with a new API awesome so check inventory for item this is the API",
    "start": "2056599",
    "end": "2061760"
  },
  {
    "text": "that we just created this is the the front end to the back end if you will of this uh of this backend catalog system I",
    "start": "2061760",
    "end": "2068240"
  },
  {
    "text": "just made and we'll go in here to the get",
    "start": "2068240",
    "end": "2073800"
  },
  {
    "text": "method and you can see over on the side here that this is also calling a Lambda function so if I swing over to Lambda",
    "start": "2073800",
    "end": "2080720"
  },
  {
    "text": "just briefly I'm going to go ahead and refresh my list of Lambda functions as well and you can see that I've got two",
    "start": "2080720",
    "end": "2086800"
  },
  {
    "text": "functions here inventory insert that's the thing that's actually going to pre-populate Dynamo kind of running as a",
    "start": "2086800",
    "end": "2093280"
  },
  {
    "text": "custom function and then the actual back end which is the next one down the Dynamo DB check inventory for",
    "start": "2093280",
    "end": "2101000"
  },
  {
    "text": "item and then just to kind of complete this part I'm going to go ahead",
    "start": "2101119",
    "end": "2106680"
  },
  {
    "text": "and look something up I'm not going to bother to deploy this as I said um",
    "start": "2107960",
    "end": "2113160"
  },
  {
    "text": "obviously in in a in a more realistic demo we would uh we'd go ahead and build this into a complete uh web app or",
    "start": "2113160",
    "end": "2120119"
  },
  {
    "text": "mobile app and here you can see the retrieval from that from that test call is 99 items of this particular type of",
    "start": "2120119",
    "end": "2126359"
  },
  {
    "text": "of jacket so that is a sort of an end to end on the backend part of a serverless",
    "start": "2126359",
    "end": "2131520"
  },
  {
    "text": "system that we stood up basically with one click on a cloud formation template and as I said I won't bore you",
    "start": "2131520",
    "end": "2138560"
  },
  {
    "text": "with um making you sit through this but with one click here I can go ahead and start deleting that stack and it'll go",
    "start": "2138560",
    "end": "2144000"
  },
  {
    "text": "clean up everything that we just saw oh yep delete has already started",
    "start": "2144000",
    "end": "2152800"
  },
  {
    "text": "now all of this is great if you like cloud formation and cloud formation is really good if you've got a whole bunch",
    "start": "2152800",
    "end": "2159000"
  },
  {
    "text": "of AWS resources that you want to use and tie together like in this case we saw Gateway Lambda and dynb along with",
    "start": "2159000",
    "end": "2167040"
  },
  {
    "text": "Associated IM roles but let's suppose that you are just using API Gateway and Lambda and",
    "start": "2167040",
    "end": "2174760"
  },
  {
    "text": "you prefer something that's a little more um like open sourcy this is where Swagger comes in so for those of you who",
    "start": "2174760",
    "end": "2182119"
  },
  {
    "text": "aren't already familiar with it Swagger is an open- Source API definition language and here's an example from the",
    "start": "2182119",
    "end": "2189000"
  },
  {
    "text": "Swagger side of a pet store you know showing some of the cool things that they can do with the information that's",
    "start": "2189000",
    "end": "2194319"
  },
  {
    "text": "contained in that specification this one of the nice things about swaggers there's a whole tool set and kind of a",
    "start": "2194319",
    "end": "2199920"
  },
  {
    "text": "rich ecosystem and Community around it and you can also see things like this",
    "start": "2199920",
    "end": "2205359"
  },
  {
    "text": "getting produced in the community where uh people have editors and validation",
    "start": "2205359",
    "end": "2210680"
  },
  {
    "text": "Checkers and all kinds of nice stuff getting built up to support the Swagger",
    "start": "2210680",
    "end": "2215760"
  },
  {
    "text": "definition so let's take a look at this playing inside of API Gateway first of all I'm going to go",
    "start": "2215760",
    "end": "2222119"
  },
  {
    "text": "look at um a an API that I actually generated from the Lambda console sometime back called Lambda microservice",
    "start": "2222119",
    "end": "2229319"
  },
  {
    "text": "I was using this for the New York demo so let's come in here I'm going to go ahead and take a look at the stages here",
    "start": "2229319",
    "end": "2237720"
  },
  {
    "text": "go to the production stage under export and now we can see",
    "start": "2237720",
    "end": "2242960"
  },
  {
    "text": "that I can export this API definition as either um Json or yaml so I can",
    "start": "2242960",
    "end": "2250319"
  },
  {
    "text": "basically extract from API Gateway a portable definition of what that a what",
    "start": "2250319",
    "end": "2255640"
  },
  {
    "text": "that API represents so I'm going to just cut over here and show you very briefly what that",
    "start": "2255640",
    "end": "2262040"
  },
  {
    "text": "looks like so here's the Swagger file that that gets exported if you choose the Json",
    "start": "2262040",
    "end": "2267640"
  },
  {
    "text": "format the only thing I've changed in here is the title and you'll see why in a second and then if I scroll down a",
    "start": "2267640",
    "end": "2273119"
  },
  {
    "text": "little bit you'll see what is similar to but different than the cloud formation representation so this is another",
    "start": "2273119",
    "end": "2279280"
  },
  {
    "text": "definition now of an API only this time in the in the Swagger Json",
    "start": "2279280",
    "end": "2285319"
  },
  {
    "text": "format all right let's go ahead and grab this guy I'm going to hop back over into uh",
    "start": "2285319",
    "end": "2292400"
  },
  {
    "text": "into API Gateway and I'm going to create a new API except instead of doing it through the console normally I'm going",
    "start": "2292400",
    "end": "2297960"
  },
  {
    "text": "to import it I'm going to go ahead and paste that",
    "start": "2297960",
    "end": "2304279"
  },
  {
    "text": "file and here we go now you see it's like that quickly I've got an API that's been created from that",
    "start": "2305960",
    "end": "2312040"
  },
  {
    "text": "Swagger definition now if I try to go test this we're going to find it's hooked up to a",
    "start": "2312040",
    "end": "2317520"
  },
  {
    "text": "little hello world function in Lambda um that the information on the back end to",
    "start": "2317520",
    "end": "2322960"
  },
  {
    "text": "call the Lambda function is intact because that was in the Swagger file the one thing that hasn't happened here is that Lambda hasn't agreed to give this",
    "start": "2322960",
    "end": "2329200"
  },
  {
    "text": "new API permission to call it so in the interest of kind of doing a complete demo I'm going to swing over here if I",
    "start": "2329200",
    "end": "2335319"
  },
  {
    "text": "click test this is going to fail at the moment so I'm going to do a little trick I'm going to come in here I'm going to",
    "start": "2335319",
    "end": "2340560"
  },
  {
    "text": "edit the Lambda function except I'm not really going to edit just going to trick",
    "start": "2340560",
    "end": "2346759"
  },
  {
    "text": "it and what happened as a side effect of that is that is that I asked gateway to ask Lambda to authorize this function",
    "start": "2346800",
    "end": "2354760"
  },
  {
    "text": "now we've got permission to run it I'm going to go back to the method this is calling just a simple",
    "start": "2354760",
    "end": "2359839"
  },
  {
    "text": "little hello world so no arguments are necessary come down here and yep sure",
    "start": "2359839",
    "end": "2365400"
  },
  {
    "text": "enough we got a little High there back from Lambda so we built an entire API there um by exporting and then",
    "start": "2365400",
    "end": "2372359"
  },
  {
    "text": "reimporting an uh an API we could just as easily have gone to one of those Swagger editors and created a brand new",
    "start": "2372359",
    "end": "2378920"
  },
  {
    "text": "API from scratch and imported it that way as",
    "start": "2378920",
    "end": "2383640"
  },
  {
    "text": "well okay now we talked a little earlier",
    "start": "2385960",
    "end": "2391520"
  },
  {
    "text": "about um kind of two things you know one of them was how you can build some of these uh these serverless",
    "start": "2391520",
    "end": "2397920"
  },
  {
    "text": "uh data manipulation and data processing engines that allow you to scale to very",
    "start": "2397920",
    "end": "2403599"
  },
  {
    "text": "high levels of data throughput and we make that super easy with some of the event sources that you can just wire up in Lambda naturally",
    "start": "2403599",
    "end": "2410680"
  },
  {
    "text": "it's really easy to hook it up to S3 or Dynamo or kesis but what about sqs one of the things that we get asked a lot is",
    "start": "2410680",
    "end": "2416960"
  },
  {
    "text": "like well why you know why why isn't sqs an event source so what we did was we built a blueprint that lets you hook up a Lambda",
    "start": "2416960",
    "end": "2423599"
  },
  {
    "text": "function easily to sqs so that's what I'm looking at here",
    "start": "2423599",
    "end": "2428720"
  },
  {
    "text": "and I'll show you a little bit um because this is also interesting it's built using the new four uh node 432",
    "start": "2428720",
    "end": "2434920"
  },
  {
    "text": "support in Lambda so it's got some of the new features in it so first of all you can kind of see at the beginning",
    "start": "2434920",
    "end": "2440520"
  },
  {
    "text": "here uh the protocol is a little different instead of that context it's got a call back along with the message",
    "start": "2440520",
    "end": "2445920"
  },
  {
    "text": "that it's passing and what this blueprint is going to do and this is kind of a pattern",
    "start": "2445920",
    "end": "2452119"
  },
  {
    "text": "we've used in a few other places is it's essentially a dual entry blueprint so it's got one entry that the scheduler is",
    "start": "2452119",
    "end": "2458240"
  },
  {
    "text": "going to call so a cloudwatch event schedule that's basically pumping out schedules every minute now because I",
    "start": "2458240",
    "end": "2463319"
  },
  {
    "text": "figured I might as well make it as you know use the new level of granularity and then when it grabs things out of sqs it's going to call",
    "start": "2463319",
    "end": "2470079"
  },
  {
    "text": "back into itself again so it's actually async async invoking itself to do the",
    "start": "2470079",
    "end": "2475640"
  },
  {
    "text": "processing and we can go up to the top here and I'll show you um it essentially has these two pieces here's the process",
    "start": "2475640",
    "end": "2482520"
  },
  {
    "text": "piece so when a message gets processed out of sqs we're going to do something with it here the blueprint is just going",
    "start": "2482520",
    "end": "2488440"
  },
  {
    "text": "to log to make sure that you know something happened and then go ahead and delete the message and further down is",
    "start": "2488440",
    "end": "2494560"
  },
  {
    "text": "the polling mechanism this is the entry point the scheduler hits which causes it to go check the queue every few",
    "start": "2494560",
    "end": "2502880"
  },
  {
    "text": "minutes so we can come over and take a look here at uh at the cloudwatch events",
    "start": "2504680",
    "end": "2511000"
  },
  {
    "text": "this is the cloudwatch events schedule page so you can see these rules here and in particular you can see the schu schle",
    "start": "2511000",
    "end": "2517480"
  },
  {
    "text": "that I've set up for this one and if I click on that it takes me right back to the Lambda function we can go ahead and and add a",
    "start": "2517480",
    "end": "2525400"
  },
  {
    "text": "few messages to our",
    "start": "2525400",
    "end": "2528400"
  },
  {
    "text": "que and now those messages will go into the queue Lambda will be automatically",
    "start": "2533319",
    "end": "2539040"
  },
  {
    "text": "getting uh getting uh that Lambda function will be automatically getting called you know roughly once a minute uh",
    "start": "2539040",
    "end": "2545000"
  },
  {
    "text": "there's a little bit of Jitter build into it and then it will go and and extract the information from the queue",
    "start": "2545000",
    "end": "2550720"
  },
  {
    "text": "now the only representation we've got of that at the moment is log system I'm going to sort of hop over here to one",
    "start": "2550720",
    "end": "2556240"
  },
  {
    "text": "that I captured earlier so you can see uh what that looks like here's an example the first part of that blueprint",
    "start": "2556240",
    "end": "2562559"
  },
  {
    "text": "working where it grabs a message so you can see there's a message that's been received there and then a little further",
    "start": "2562559",
    "end": "2568200"
  },
  {
    "text": "down you can see the payload of the queue coming in and then as I mentioned before let's",
    "start": "2568200",
    "end": "2575160"
  },
  {
    "text": "what suppose that you want to actually do uh kind of a faster read maybe you've got a cube with a whole lot of things in",
    "start": "2575160",
    "end": "2580480"
  },
  {
    "text": "it well that's easy you can take the schedule and you can run multiple copies of the same Lambda functions so that all",
    "start": "2580480",
    "end": "2587000"
  },
  {
    "text": "of them are pulling in parallel and then if you want to be able to control that maybe you want to be",
    "start": "2587000",
    "end": "2592480"
  },
  {
    "text": "able to turn it up or down depending on the depth of the Q you can create another scheduled Lambda function which",
    "start": "2592480",
    "end": "2597720"
  },
  {
    "text": "looks at the depth of the que and makes a decision about the level of parallelism maybe updates a Dynamo table",
    "start": "2597720",
    "end": "2602839"
  },
  {
    "text": "or or a number in in S3 to allow you to control that so really easy mechanisms",
    "start": "2602839",
    "end": "2608960"
  },
  {
    "text": "for being able to for being able to um control the amount of and kind of the",
    "start": "2608960",
    "end": "2615319"
  },
  {
    "text": "throughput with which you grab things out of that queue",
    "start": "2615319",
    "end": "2621800"
  },
  {
    "text": "okay one last demo here see if I can make this a little",
    "start": "2622200",
    "end": "2628480"
  },
  {
    "text": "larger so I'm going to show you two copies of the same function and it's a real simple it's a real simple node",
    "start": "2628480",
    "end": "2634559"
  },
  {
    "text": "function here's the node the node 10 version so this this is our old our old node 10 programming",
    "start": "2634559",
    "end": "2640359"
  },
  {
    "text": "model and what this is going to do is just simply set a timer it's going to set a timer for a second and then when",
    "start": "2640359",
    "end": "2646160"
  },
  {
    "text": "the timer goes off it's going to say timer actually ran inside the log so let's go ahead and run this I'll",
    "start": "2646160",
    "end": "2654440"
  },
  {
    "text": "click the test button and we got a copy of the log",
    "start": "2654440",
    "end": "2660000"
  },
  {
    "text": "here so we see the timer running let's go ahead and try this again",
    "start": "2660599",
    "end": "2667680"
  },
  {
    "text": "uhoh timer didn't run well crap what happened here so this is what was",
    "start": "2670280",
    "end": "2677319"
  },
  {
    "text": "challenging about the previous programming model for node Lambda did not wait for the queue to automatically",
    "start": "2677319",
    "end": "2684520"
  },
  {
    "text": "drain and so you could if you weren't careful to use async properly to kind of tie things up at the end you could get",
    "start": "2684520",
    "end": "2690599"
  },
  {
    "text": "exactly this kind of erratic results sometimes that works and sometimes it didn't",
    "start": "2690599",
    "end": "2698040"
  },
  {
    "text": "so let's cross our fingers here and make sure that uh in the new version it does what it's supposed to do so variant of",
    "start": "2698040",
    "end": "2704839"
  },
  {
    "text": "the code this is the new node node 432 looks very",
    "start": "2704839",
    "end": "2711000"
  },
  {
    "text": "similar and we get the timer actually running at the time we expect the timer to actually be running here and what's",
    "start": "2713480",
    "end": "2720319"
  },
  {
    "text": "going on here you know we we call this kind of a kind of a e easy easy mode or",
    "start": "2720319",
    "end": "2725480"
  },
  {
    "text": "kind of Auto drain mode what we're doing here is simply waiting and node made this super easy with uh uh with some of",
    "start": "2725480",
    "end": "2731480"
  },
  {
    "text": "the new improvements for all of the background tasks to finish and you're still able to defeat this if you want",
    "start": "2731480",
    "end": "2737040"
  },
  {
    "text": "backward compatibility with the previous mechanism you can force an entry exit you know uh background background work",
    "start": "2737040",
    "end": "2742960"
  },
  {
    "text": "notwithstanding in the que but it's also really simple to be able now to sort of write something and",
    "start": "2742960",
    "end": "2749240"
  },
  {
    "text": "kind of get a similar reaction to what you would get if you ran note on the command line and it just automatically drained before exiting",
    "start": "2749240",
    "end": "2758079"
  },
  {
    "text": "okay if we can cut back to the um to the slides here we'll just wrap up the other",
    "start": "2758839",
    "end": "2764160"
  },
  {
    "text": "part of the presentation so we began by talking a",
    "start": "2764160",
    "end": "2770319"
  },
  {
    "start": "2766000",
    "end": "2766000"
  },
  {
    "text": "little bit about serverless and some of the serverless benefits and I want to kind of recapitulate that as we kind of",
    "start": "2770319",
    "end": "2775520"
  },
  {
    "text": "wrap up here into what I call the serverless manifesto like the why is it",
    "start": "2775520",
    "end": "2780599"
  },
  {
    "text": "that we think this is so important why is this becoming such an exciting idea that people are talking talking about as",
    "start": "2780599",
    "end": "2787599"
  },
  {
    "text": "kind of the new way to write and think about applications and and the answers are kind of all contained on here it's",
    "start": "2787599",
    "end": "2793960"
  },
  {
    "text": "the idea that functions rather than apps or machines or data centers become the unit of deployment and scaling a much",
    "start": "2793960",
    "end": "2801720"
  },
  {
    "text": "simpler and faster way to think about application design machines VMS even",
    "start": "2801720",
    "end": "2806839"
  },
  {
    "text": "containers aren't visible in the programming model any longer permanent storage is subject to separation of",
    "start": "2806839",
    "end": "2813160"
  },
  {
    "text": "concerns we put it we put it elsewhere which allows you to both choose the thing you want and also keeps your",
    "start": "2813160",
    "end": "2818440"
  },
  {
    "text": "compute free of being entangled with details of the data tier it's always been a great idea it's always been a",
    "start": "2818440",
    "end": "2824400"
  },
  {
    "text": "best practice this just helps enforce it in a similar way to the duration actually enforcing the fact that you",
    "start": "2824400",
    "end": "2830079"
  },
  {
    "text": "don't have a long a long lived uh or entangled piece of code scaling happens per request which",
    "start": "2830079",
    "end": "2837599"
  },
  {
    "text": "means that by construction by Design you don't under or over provision the",
    "start": "2837599",
    "end": "2842960"
  },
  {
    "text": "capacity because you just can't it's built in such a way that that doesn't happen",
    "start": "2842960",
    "end": "2848440"
  },
  {
    "text": "that means that you don't have to pay for Idol it also means that you're simplicit fault tolerant you don't need a PhD in distributed systems to figure",
    "start": "2848440",
    "end": "2855160"
  },
  {
    "text": "out how to build a highly available highly fault tolerant solution because the infrastructure already got that right for",
    "start": "2855160",
    "end": "2861040"
  },
  {
    "text": "you at the same time you can bring your own code and you get metrics and logging so the the boring parts and the Annoying",
    "start": "2861040",
    "end": "2867880"
  },
  {
    "text": "Parts don't get in your way so how do you get started on your",
    "start": "2867880",
    "end": "2874079"
  },
  {
    "text": "own personal serverless Revolution well if you're a product manager or a business analyst a great place to start",
    "start": "2874079",
    "end": "2880000"
  },
  {
    "text": "is the website we've got a bunch of scenarios customer stories that build on the design patterns we talked about here",
    "start": "2880000",
    "end": "2885440"
  },
  {
    "text": "and show you how real customers are making are making interesting and compelling Business Solutions out of",
    "start": "2885440",
    "end": "2892599"
  },
  {
    "text": "them most of you are probably developers and I suggest going and trying some of the same demos that you saw up",
    "start": "2892599",
    "end": "2899280"
  },
  {
    "text": "here the free tier is so large you consider that Lambda console clicking test all day long and never pay for it",
    "start": "2899280",
    "end": "2905480"
  },
  {
    "text": "so go ahead and create a function and run it said the first the first million of vks are free you can really easily add event",
    "start": "2905480",
    "end": "2912599"
  },
  {
    "text": "sources like S3 and if you come by the developer Lounge later on we'll show some demos uh of that or or HTTP end",
    "start": "2912599",
    "end": "2922000"
  },
  {
    "text": "points and then building a scalable backend is a great next step if you've",
    "start": "2923240",
    "end": "2928720"
  },
  {
    "text": "got an Amazon Echo you can easily connect yourself to to the Alexa skills kit using Lambda",
    "start": "2928720",
    "end": "2935440"
  },
  {
    "text": "to extend that application ecosystem build voice enabled apps uh or use the AWS iot to hook up devices really easy",
    "start": "2935440",
    "end": "2943200"
  },
  {
    "text": "way to get cloud computing hooked up to some of these emerging ecosystem",
    "start": "2943200",
    "end": "2949440"
  },
  {
    "text": "Frontiers",
    "start": "2965720",
    "end": "2968720"
  },
  {
    "text": "e",
    "start": "2995640",
    "end": "2998640"
  },
  {
    "text": "e for",
    "start": "3025640",
    "end": "3029680"
  }
]