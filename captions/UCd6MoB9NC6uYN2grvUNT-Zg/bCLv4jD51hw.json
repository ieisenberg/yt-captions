[
  {
    "start": "0",
    "end": "34000"
  },
  {
    "text": "Good morning everyone. I want to thank\nyou all for coming to this morning's",
    "start": "30",
    "end": "5160"
  },
  {
    "text": "presentation. My name is Brad Dispensa.\nI'm principal security specialist for",
    "start": "5160",
    "end": "10200"
  },
  {
    "text": "Amazon Web Services Public Sector.\nThis morning what I want to talk to you about is actual methods and\ntechniques that you can use to safeguard,",
    "start": "10200",
    "end": "21680"
  },
  {
    "text": "design, and leverage AWS tools to better\nunderstand how to secure your cloud, how",
    "start": "21680",
    "end": "29519"
  },
  {
    "text": "to use some of the fundamental\nprimitives that we have for AWS. So the",
    "start": "29519",
    "end": "36180"
  },
  {
    "start": "34000",
    "end": "132000"
  },
  {
    "text": "first part that I want to cover is that\nthere are a number of different services",
    "start": "36180",
    "end": "41399"
  },
  {
    "text": "that AWS offers on the platform and it\ngets more and more every single day. What",
    "start": "41399",
    "end": "47878"
  },
  {
    "text": "we're going to cover today throughout\nthis session is primitives that can be used across all of the different AWS\nservices. So while we won't cover every",
    "start": "47879",
    "end": "56909"
  },
  {
    "text": "single service on the platform, the\ntechniques and methods that we're going to be showcasing, this morning you're\ngoing to see how we can use those in a",
    "start": "56910",
    "end": "65010"
  },
  {
    "text": "reusable format across many different\nservices on the AWS platform, and the",
    "start": "65010",
    "end": "70409"
  },
  {
    "text": "same will be true when we touch some of\nthe fundamentals of how we control the network access for our environment as\nwell also before I start I want to give",
    "start": "70409",
    "end": "79500"
  },
  {
    "text": "a thanks internally to another amazonian\nwho really created this entire",
    "start": "79500",
    "end": "85110"
  },
  {
    "text": "presentation Becky Weiss, who is a senior\nprincipal in the Identity and Access Management team. So thank you to Becky\nfor this great content. To kick things",
    "start": "85110",
    "end": "96240"
  },
  {
    "text": "off, what we want to talk about is\nthere's again a number of different AWS",
    "start": "96240",
    "end": "101430"
  },
  {
    "text": "resources that we're going to be going\nthrough today. Our focus is really trying to understand what each one of these\ncore functions is and how we can",
    "start": "101430",
    "end": "109950"
  },
  {
    "text": "leverage them. For that again there's two\ncomponents that we're going to touch on. Today, the first is Identity and Access\nManagement for permissions and this is",
    "start": "109950",
    "end": "117540"
  },
  {
    "text": "really about how we control what we\ncall a principal can do on the AWS platform. The second is is that we're\ngoing to be looking at VPC level",
    "start": "117540",
    "end": "125968"
  },
  {
    "text": "controls so this is going to be the area\nof network controls and how we control ingress and egress for our network.\nSo the first question that you should be",
    "start": "125969",
    "end": "135520"
  },
  {
    "start": "132000",
    "end": "608000"
  },
  {
    "text": "asking is in order to be able to secure\nyour things you have to know where your things are. So I can't tell you how to\nsecure your environment if you don't",
    "start": "135520",
    "end": "145300"
  },
  {
    "text": "know what your environment looks like. So\nto put this into an analogy let's say that we have this house. the house looks\na little bit funny doesn't it. so there's",
    "start": "145300",
    "end": "155260"
  },
  {
    "text": "no points of entry the doors are sort of\nmissing so I can't really tell you how",
    "start": "155260",
    "end": "160330"
  },
  {
    "text": "to secure this because I don't know how\nthis environment is configured, But if we",
    "start": "160330",
    "end": "165459"
  },
  {
    "text": "add some points of entry now this\nis just a little look a little bit better. Now I can start to say ah okay so\nthese are these are the points of entry",
    "start": "165459",
    "end": "172120"
  },
  {
    "text": "these are where things are going come in\nand out of this environment so I can tell you that no this is a door the door\nopens this is where we're going to make",
    "start": "172120",
    "end": "178810"
  },
  {
    "text": "a change to this environment that can\nallow access to to this house as an analogy. So at AWS that yes as you\nlikely have heard by now we operate a",
    "start": "178810",
    "end": "190390"
  },
  {
    "text": "global infrastructure. So when we create\nour resources the first thing that you're going to be doing is going to be\nusing an AWS account and that AWS",
    "start": "190390",
    "end": "198939"
  },
  {
    "text": "account contains data that belongs only\nto you. So you as the customer have the",
    "start": "198940",
    "end": "203950"
  },
  {
    "text": "choice for which region which area that\nyou want to put your content. So within",
    "start": "203950",
    "end": "210849"
  },
  {
    "text": "that account again we have that region\nspace that we're going to be putting our content into and then within those\nregions you can move that content to any",
    "start": "210850",
    "end": "219700"
  },
  {
    "text": "of AWS's global networ.k today we have 21\navailable regions for you to use. So all",
    "start": "219700",
    "end": "226180"
  },
  {
    "text": "of the primitives that we're going to be\ntalking about today can be applied to those different regions and allow you\nto control access to how those regions",
    "start": "226180",
    "end": "234489"
  },
  {
    "text": "work. So the next portion is is that\nwithin the regions we have a method for",
    "start": "234489",
    "end": "239709"
  },
  {
    "text": "subdividing those and the way that we\nsubdivide them is through what we call an availability zone. An availability\nzone basically you can think of as one",
    "start": "239709",
    "end": "248109"
  },
  {
    "text": "or more discreet facilities within a\nregion and that's where we can put our workloads across multiple availability\nzones so that from an availability and",
    "start": "248109",
    "end": "257590"
  },
  {
    "text": "business continuity perspective we can\nhave a durable highly available deployment because the application is\nspread across a wide geographic",
    "start": "257590",
    "end": "265660"
  },
  {
    "text": "area within that region. So  within\nthese regions we also can create a",
    "start": "265660",
    "end": "272020"
  },
  {
    "text": "networking construct and that networking\nconstruct spans across all of those availability zones and what we refer to\nthis is as your VPC or virtual private",
    "start": "272020",
    "end": "282010"
  },
  {
    "text": "cloud. So here again this is something\nthat you control so you have chosen to make a private CIDR space for folks\nthat aren't familiar with that CIDR",
    "start": "282010",
    "end": "291250"
  },
  {
    "text": "notation this basically means that\nanything that's 10.0 dots something dot something will be housed inside of this\nnetwork and within that configuration",
    "start": "291250",
    "end": "301930"
  },
  {
    "text": "what we can then do is add in subnets\nand within those subnets that's how",
    "start": "301930",
    "end": "307389"
  },
  {
    "text": "we're going to allocate that large IP\nspace that we've provided at the first portion. So now we have subnets that are\nhoused in these availability zones",
    "start": "307390",
    "end": "315940"
  },
  {
    "text": "within this CIDR block and again all of\nthis is under your control you define how you want to place these resources. So\nafter that we can put things in there. So",
    "start": "315940",
    "end": "325900"
  },
  {
    "text": "now we can start to put things in like\nEC2 instances and these these are the virtual machines in the cloud that AWS\noffers. So now we've placed EC2 instances",
    "start": "325900",
    "end": "334720"
  },
  {
    "text": "in the cloud. The next thing that we can\ndo is that we can logically and",
    "start": "334720",
    "end": "340440"
  },
  {
    "text": "dynamically control access to those\nresources as well as adding additional resources like things like our\nrelational database service that allows",
    "start": "340440",
    "end": "349390"
  },
  {
    "text": "you to run \ndatabase engine services on AWS and a",
    "start": "349390",
    "end": "354700"
  },
  {
    "text": "managed format. So there's a lot of\nthings that run inside of this VPC. So another example that we can put in there\nis if you're using an active directory",
    "start": "354700",
    "end": "363190"
  },
  {
    "text": "controller. So if you're using for\ninstance managed AD you can put those Active Directory environments in here\nand so on and so on. So what you can see",
    "start": "363190",
    "end": "372340"
  },
  {
    "text": "is that there's a lot of resources that\nwe can put inside of the VPC and that's",
    "start": "372340",
    "end": "378040"
  },
  {
    "text": "just an example of some of the services.\nSo there are some services that will operate and that you will control access\nto through this  VPC construct, but",
    "start": "378040",
    "end": "386979"
  },
  {
    "text": "there's also a separate set of services\nthat are not inside of your VPC. And so",
    "start": "386980",
    "end": "393070"
  },
  {
    "text": "an example here would be something like\nS3. So S3 is in your account it's in your",
    "start": "393070",
    "end": "398470"
  },
  {
    "text": "control the data belongs to you but notice that it's not inside of your VPC. That's because it's a\nservice that AWS operates on your behalf.",
    "start": "398470",
    "end": "407069"
  },
  {
    "text": "So AWS is responsible for the underlying\ninfrastructure patching and maintenance",
    "start": "407069",
    "end": "412349"
  },
  {
    "text": "of that service S3, but you still have\ndirect access to it within your AWS",
    "start": "412349",
    "end": "417990"
  },
  {
    "text": "account. Another example of a service\nthat would exist outside of your VPC is something like Amazon SQS and then we\ncan look at other services like Dynamo",
    "start": "417990",
    "end": "427620"
  },
  {
    "text": "DB which again would have the ability\nfor you to interact with them inside of your account and in some cases you know\nwithin that particular region in",
    "start": "427620",
    "end": "435930"
  },
  {
    "text": "this case but it does not live inside of\nyour VPC. So there's a number of",
    "start": "435930",
    "end": "441930"
  },
  {
    "text": "different services as well that have the\nsame design pattern but the idea is just from a sort of primitive foundational\nconstruct, it's important to understand",
    "start": "441930",
    "end": "449909"
  },
  {
    "text": "that there are some things that will\nlive inside the VPC and there are some things that will live inside the region\ninside of your account. So how do I",
    "start": "449909",
    "end": "459509"
  },
  {
    "text": "understand where that difference lies?\nHow do I know whether or not something is inside of my VPC or if it's\nsomething that's inside of my account? If",
    "start": "459509",
    "end": "468839"
  },
  {
    "text": "you're new to AWS that might be a little\nbit confusing and you might want to try and better understand you know well I\nhave this service that I'm using now and",
    "start": "468839",
    "end": "475800"
  },
  {
    "text": "AWS just offered but I don't understand\nreading the documentation. Does this live in my VPC or does this live inside\nof the account? So I'll share with you a",
    "start": "475800",
    "end": "484169"
  },
  {
    "text": "little trick that you can use in order\nto find that out. So in this case you can just simply run a dig command. So in this\ncase I'm using dig to do a look up on",
    "start": "484169",
    "end": "493439"
  },
  {
    "text": "this RDS database and you can see that\nthe returned response is the private IP that belongs to the VPC in this case\nthe VPC that's in that 10.0 range. So we",
    "start": "493439",
    "end": "505499"
  },
  {
    "text": "can tell that this is something that\nlives inside of the VPC. Likewise if we",
    "start": "505499",
    "end": "510719"
  },
  {
    "text": "were to do the same thing with Amazon\nSQS, notice that this does not live within that VPC IP space so this is a\ngood example of something that would",
    "start": "510719",
    "end": "519719"
  },
  {
    "text": "tell you this is a service that is\noperating outside of your VPC and something that's operating just at the\nregion level inside of your account.",
    "start": "519719",
    "end": "530720"
  },
  {
    "text": "And again these are outside of your\naccount but it's really important to really stress everything that's in this\npicture is fully under your control.",
    "start": "531199",
    "end": "541100"
  },
  {
    "text": "So even though it's not inside of your VPC\nthat doesn't mean that you lose control to it and what we're going to look at\nwhen we look at some of these services",
    "start": "541100",
    "end": "549410"
  },
  {
    "text": "individually is the methods and\ntechniques that we can use from both a networking layer as well as an IAM\npolicy layer that will allow you to",
    "start": "549410",
    "end": "557420"
  },
  {
    "text": "restrict access to those resources. So in\norder to do that we need to understand",
    "start": "557420",
    "end": "564230"
  },
  {
    "text": "what are the methods that we're going to\nbe using to secure those resources. So everything in AWS that we use starts\nwith identity and access management",
    "start": "564230",
    "end": "572930"
  },
  {
    "text": "first because everything that happens on\nthe AWS platform is actually going to be",
    "start": "572930",
    "end": "578149"
  },
  {
    "text": "an API call and whether or not you're\nusing our AWS software development kit SDK or you're using our console\nenvironment or the CLI all of those are",
    "start": "578149",
    "end": "588139"
  },
  {
    "text": "going to rely on access tests that you\nwill provide via the identity and access management platform. and it's through\nthat that we're going to be using that",
    "start": "588139",
    "end": "596899"
  },
  {
    "text": "service to control that fine-grained\naccess to things that are inside of that network and even if it's outside of that\nnetwork we're going to still use IAM to",
    "start": "596899",
    "end": "604579"
  },
  {
    "text": "control our capability of interacting\nwith that. So first let's talk about the",
    "start": "604579",
    "end": "610870"
  },
  {
    "text": "first component of that which is the\nIdentity and Access Management part so for Identity and Access Management or\nwhat we call IAM basically what this is",
    "start": "610870",
    "end": "620720"
  },
  {
    "text": "is that the authentication and\nauthorization I stands for the authentication and the AM stands for\nthe authorization. It applies everywhere",
    "start": "620720",
    "end": "629209"
  },
  {
    "text": "in AWS. So let's start from the first\nportion which is the authentication",
    "start": "629209",
    "end": "634519"
  },
  {
    "text": "portion in this case the authentication\nor the eye is for humans. So I'm looking",
    "start": "634519",
    "end": "641720"
  },
  {
    "text": "across the crowd and I have yet to see\nan Android or a kiva robot roll through",
    "start": "641720",
    "end": "647000"
  },
  {
    "text": "so I think it's safe to assume that\neverybody in this room is human at this point is that a fair guess okay\ngood.",
    "start": "647000",
    "end": "653449"
  },
  {
    "text": "So for this this is where we're first\ngoing to be provisioning resources to",
    "start": "653449",
    "end": "659329"
  },
  {
    "text": "humans. So this happens through a couple\ndifferent ways we can use IAM to provide access to\nthese resources based on long-term",
    "start": "659329",
    "end": "668420"
  },
  {
    "text": "credentials that are provided in IAM or\nshort-term credentials. So if you've ever",
    "start": "668420",
    "end": "673639"
  },
  {
    "text": "used AWS before this should look\nfamiliar. This is an example of using IAM to pass credential information in\nthis case the the console login to allow",
    "start": "673640",
    "end": "684470"
  },
  {
    "text": "you to access that particular user and\nget that users privileges. So in that",
    "start": "684470",
    "end": "690800"
  },
  {
    "text": "case you're using this console based\nlogin to leverage the permissions of that particular user. The other side of\nthat is that there is an identity for",
    "start": "690800",
    "end": "702290"
  },
  {
    "text": "things that are not people for things\nthat maybe a developer has access to or",
    "start": "702290",
    "end": "707300"
  },
  {
    "text": "other resources in your account, so this\nwould be sort of the robots analogy. So those things need access too and a unique\ncapability of AWS is that we don't",
    "start": "707300",
    "end": "716630"
  },
  {
    "text": "require that developers have to put\nlong-lived credentials into their code instead they can use in a really unique\nfeature of AWS which is role-based",
    "start": "716630",
    "end": "725870"
  },
  {
    "text": "access. So role-based access allows you\nto control access to a given resource in",
    "start": "725870",
    "end": "731960"
  },
  {
    "text": "this case and IAM role to tell it that\nit can do something on that resources behalf. So if we look at this role being\nattached to an EC2 instance this role",
    "start": "731960",
    "end": "741230"
  },
  {
    "text": "allows you to deliver temporary\ncredentials for that EC2 instance to be able to perform a specific operation an\nAPI call with that particular",
    "start": "741230",
    "end": "750920"
  },
  {
    "text": "permission set. So the reason that that's\nnice is again that the developer doesn't have to bake in that username and\npassword that we saw on the previous",
    "start": "750920",
    "end": "759050"
  },
  {
    "text": "screen instead they can use this role\nbased access to get access to an underlying service. And what it's doing\nin the background is just using the",
    "start": "759050",
    "end": "766760"
  },
  {
    "text": "short-lived temporary credentials in\norder to make a call to a service like Amazon DynamoDB on the EC2 instances\nbehalf. Another really cool capability",
    "start": "766760",
    "end": "776300"
  },
  {
    "text": "there is that as part of using that\nrole-based STS access behind the scenes Amazon is rotating those credentials on\nyour behalf so you don't have to worry",
    "start": "776300",
    "end": "785600"
  },
  {
    "text": "about long-lived credentials because the\ncredentials have a finite lifetime and as part of that rol- based access we're\nconstantly making changes in the",
    "start": "785600",
    "end": "792830"
  },
  {
    "text": "background that allows that role to\nexpire the tokens that were being used. So this\nis true for other services as well. You",
    "start": "792830",
    "end": "799839"
  },
  {
    "text": "can use the same role based model for\nthings like AWS Lambda to allow that lambda function to have that permission\nor that capability of interoperating",
    "start": "799839",
    "end": "807700"
  },
  {
    "text": "with other API's or things like again a\nrole to be able to use application",
    "start": "807700",
    "end": "813610"
  },
  {
    "text": "auto-scaling\nin a service like Dynamo DB or to provide dynamic access to a service\nbased on an event that maybe happens",
    "start": "813610",
    "end": "821740"
  },
  {
    "text": "inside of your account. So there is one\nother scenario that we're not going to go as deep into but we want to give you\njust a little bit of a sense of",
    "start": "821740",
    "end": "829269"
  },
  {
    "text": "something to look for if you're a larger\nenterprise customer. So in this",
    "start": "829269",
    "end": "834670"
  },
  {
    "text": "environment we can also use this through\nsomething called Identity Federation.",
    "start": "834670",
    "end": "840190"
  },
  {
    "text": "So we're not going to go too deep into\nIdentity Federation for this talk today but if you want to do a little bit of\nresearch on your own the keyword to",
    "start": "840190",
    "end": "846490"
  },
  {
    "text": "lookup would be Federation for AWS. And\nin this example what you can see is that",
    "start": "846490",
    "end": "851589"
  },
  {
    "text": "we're using a corporate identity\nsolution. So this could be something like your Active Directory environment\nwhatever your IDP is so long as it you",
    "start": "851589",
    "end": "861010"
  },
  {
    "text": "know has the capability of supporting a\nSAML based request. We can use that to authenticate you through your own\ninfrastructure but then allow that",
    "start": "861010",
    "end": "869200"
  },
  {
    "text": "resource through that responding request\nto use a role on their behalf. So the",
    "start": "869200",
    "end": "874540"
  },
  {
    "text": "nice part there is that it's a single\nusername and password that your users already know and are already probably\nfamiliar with and what that Federation",
    "start": "874540",
    "end": "883180"
  },
  {
    "text": "allows them to do is then assume a role\nbased on that Federation. So this is",
    "start": "883180",
    "end": "888310"
  },
  {
    "text": "something that we see very commonly for\nlarger enterprise customers or customers that are using AWS in a large multi\naccount configuration. There are also",
    "start": "888310",
    "end": "899649"
  },
  {
    "text": "IAM roles. So it's really important to\nnote here is that for the IAM principal",
    "start": "899649",
    "end": "905500"
  },
  {
    "text": "roles are really used for automated\nprocesses, they're used for AWS services",
    "start": "905500",
    "end": "911260"
  },
  {
    "text": "or they're used for federated identities.\nSo they can again have these short-lived",
    "start": "911260",
    "end": "916959"
  },
  {
    "text": "credentials and IAM users are for\ndirect human access. So there are some customers that don't even create IAM\nusers in their account because they use",
    "start": "916959",
    "end": "925389"
  },
  {
    "text": "Federation or if they do create IAM\nusers the IAM users are used for sort of emergency\nsituations where you know perhaps an",
    "start": "925390",
    "end": "933910"
  },
  {
    "text": "issue is happening with our directory\nservice and they need to get access to that account. So users are for humans\nroles are for processes or things.",
    "start": "933910",
    "end": "943630"
  },
  {
    "start": "942000",
    "end": "1160000"
  },
  {
    "text": "So let's sort of take a deeper dive on that\nso that everybody feels comfortable with how this is actually working so in this\nexample let's say that we've got a role",
    "start": "943630",
    "end": "951700"
  },
  {
    "text": "authenticating to a service like Dynamo\nDB via the AWS CLI. So I want to again",
    "start": "951700",
    "end": "958960"
  },
  {
    "text": "just give you a tiny bit more detail\nunder the hood on how this actually happens. So if we were to actually look\nat the role based call to the Dynamo",
    "start": "958960",
    "end": "967420"
  },
  {
    "text": "DB engine what would it look like? So\nthis isn't something you need to know we're just providing this to you as sort\nof an example so that you can better",
    "start": "967420",
    "end": "976360"
  },
  {
    "text": "understand what's happening behind the\nscenes. So this big block of text here is an HTTP post that we have that has\ninformation about that role that's being",
    "start": "976360",
    "end": "985389"
  },
  {
    "text": "used and if we were to take this apart\nwhat you would see is the first portion here is the credential. This is the\naccess key that the role is using in",
    "start": "985390",
    "end": "992980"
  },
  {
    "text": "order to provide the capability for this\nprinciple to interact with the DynamoDB",
    "start": "992980",
    "end": "998589"
  },
  {
    "text": "service. So here you can see that\ncredential idea in the post but we",
    "start": "998590",
    "end": "1005340"
  },
  {
    "text": "also have this other part which is the\nsignature. This is an HMAC generated signature and what it's doing is it's\nusing the users private key on the",
    "start": "1005340",
    "end": "1013230"
  },
  {
    "text": "client device and the nice portion is is\nthat that HMAC signature basically is something that is unique to the entire\nrequest so it's not something that is",
    "start": "1013230",
    "end": "1022190"
  },
  {
    "text": "replayable. So the HMAC signature would\nbe generated on the fly on the client every time that the client makes a new\nrequest. And so that's basically how the",
    "start": "1022190",
    "end": "1030329"
  },
  {
    "text": "role is basically passing that\ninformation in the background to the DynamoDB service. So again not important\nthat you actually have to know that but",
    "start": "1030329",
    "end": "1037530"
  },
  {
    "text": "for some customers it's helpful to sort\nof see that visually. So the other",
    "start": "1037530",
    "end": "1043050"
  },
  {
    "text": "portion is we talked about the identity\nportion of it but now what about the",
    "start": "1043050",
    "end": "1048329"
  },
  {
    "text": "policy portion of it? So on the identity\naccess management side for this principle we have policies that can be\nassociated with this principle as well.",
    "start": "1048329",
    "end": "1056640"
  },
  {
    "text": "So every AWS service supports\nauthorization via IAM policy",
    "start": "1056640",
    "end": "1062760"
  },
  {
    "text": "and what that allows you to do is again\ncontrol fine-grained access to what that principle can do with the policies that\nare applied to it. The other thing is",
    "start": "1062760",
    "end": "1071550"
  },
  {
    "text": "that the policy can be attached to a\nrole or to a user or even to groups as well so it allows you to have roles that\ncan be used with policies and a",
    "start": "1071550",
    "end": "1080400"
  },
  {
    "text": "repeatable fashion so I can use the same\npolicy across multiple different principles inside of the account. And\nthen later on we're going to talk about",
    "start": "1080400",
    "end": "1087210"
  },
  {
    "text": "other places that this IAM policy can\nbe attached but well we'll save that one for a little bit later. So again this is\nsomething that's going to be used in the",
    "start": "1087210",
    "end": "1095850"
  },
  {
    "text": "overall process for the authorization\ndecision of whether or not a user or in",
    "start": "1095850",
    "end": "1101280"
  },
  {
    "text": "this case a role can perform a\nparticular operation. So every",
    "start": "1101280",
    "end": "1107310"
  },
  {
    "text": "authenticated call that you make to AWS\ngoes through authorization and in this case once the identity has been\nestablished the policies that are",
    "start": "1107310",
    "end": "1115290"
  },
  {
    "text": "attached to it make that determination\nof whether or not the resources to make",
    "start": "1115290",
    "end": "1120360"
  },
  {
    "text": "that call to better understand who's\nasking. If the IAM policy on your principle says it can't do something you\ncan't do it. So an explicit deny is",
    "start": "1120360",
    "end": "1128730"
  },
  {
    "text": "always going to trump an explicit allow\nand that's because we want to make sure that customers have that capability of\nsaying something explicitly is not",
    "start": "1128730",
    "end": "1135960"
  },
  {
    "text": "allowed and not allowing it to be\ntrumped by an allow statement. So again if it says you can't do it you can't do\nit and the policy has to be crafted so",
    "start": "1135960",
    "end": "1145200"
  },
  {
    "text": "that specifically it allows that\nspecific resource to be authorized to make that call. So in this case the\nprincipal has access to DynamoDB but the",
    "start": "1145200",
    "end": "1153750"
  },
  {
    "text": "policy also needs to be configured so\nthat the principal can interact with a specific DynamoDB. So to make this\nprocess easier for customers AWS offers a set of curated\nmanaged policies that are available to",
    "start": "1153750",
    "end": "1169710"
  },
  {
    "start": "1160000",
    "end": "1434000"
  },
  {
    "text": "all customers and you can see this in\nyour console today if you go into the policy console within IAM and look at\nthe orange boxes. These indicate manage",
    "start": "1169710",
    "end": "1178919"
  },
  {
    "text": "policies. So these are things that we see\nas common tasks for customers on the AWS platform, so things like I want to\nprovide EC2 read-only access or S3",
    "start": "1178920",
    "end": "1189060"
  },
  {
    "text": "read-only access. And the nice part is is\nthat you can go into each one of these and actually see what the policy is\nwhat it does so that you fully",
    "start": "1189060",
    "end": "1198029"
  },
  {
    "text": "understand what these manage policies\nare allowing a principal to actually do. So let's go in and actually read an IAM\npolicy. So this is a pretty simple policy.",
    "start": "1198030",
    "end": "1206550"
  },
  {
    "text": "This basically has a few components that\nwe're going to step through. The first part is the effect. The effect basically\nsays whether or not the principal is",
    "start": "1206550",
    "end": "1215010"
  },
  {
    "text": "allowed or denied to do something. So in\nthis case this is an allow statement. The principal is allowed and the next\nportion is the action what is the thing",
    "start": "1215010",
    "end": "1222870"
  },
  {
    "text": "that the principal can do and in this\ncase the action is DynamoDB star. So this",
    "start": "1222870",
    "end": "1228240"
  },
  {
    "text": "says that we are allowed to do DynamoDB\neverything. So we can allow full access",
    "start": "1228240",
    "end": "1233580"
  },
  {
    "text": "to everything within the DynamoDB API\nspace. And the next portion is the",
    "start": "1233580",
    "end": "1239190"
  },
  {
    "text": "resource. what are the things within that\nDynamoDB that we can interact with?",
    "start": "1239190",
    "end": "1244320"
  },
  {
    "text": "And so in this case the resource is\neverything, every DynamoDB table, everything that's inside of our account\nthat this principal has access to this",
    "start": "1244320",
    "end": "1253049"
  },
  {
    "text": "policy would allow. So in plain language\nthis basically allows the principal to take all DynamoDB actions but because I\nsuspect many of you in this audience our",
    "start": "1253050",
    "end": "1264840"
  },
  {
    "text": "security minded you know that this is\nprobably not a desirable state. We always want to try and design so that we are\nusing least permission and least",
    "start": "1264840",
    "end": "1273059"
  },
  {
    "text": "privilege where we can. So in this\ndesign what could we do to better restrict this? So one thing that we can\ntry and do is scope it down so that in",
    "start": "1273059",
    "end": "1282000"
  },
  {
    "text": "this case we're changing that action\nfrom a star to specific verbs. So now we're saying that there are a specific\nsubset of DynamoDB calls that we want to",
    "start": "1282000",
    "end": "1291510"
  },
  {
    "text": "allow. So in this case the batch get item\nget item and query capability and allows",
    "start": "1291510",
    "end": "1297600"
  },
  {
    "text": "this to basically take only as few\nspecific DynamoDB calls. The other thing that we can do as a change is that we\ncan modify the resource condition. So in",
    "start": "1297600",
    "end": "1305970"
  },
  {
    "text": "this case rather than saying that this\npolicy allows access to all DynamoDB",
    "start": "1305970",
    "end": "1310980"
  },
  {
    "text": "resources we can constrain it to a\nspecific set of DynamoDB resources. So in",
    "start": "1310980",
    "end": "1317070"
  },
  {
    "text": "a sort of plain language this allows the\nDynamoDB action to take these",
    "start": "1317070",
    "end": "1323669"
  },
  {
    "text": "specific verbs batch, get item and query\nfor these specific tables and",
    "start": "1323670",
    "end": "1329020"
  },
  {
    "text": "indexes within DynamoDB. So as you can see\nthis allows us much more fine-grained access rather than just allowing that\nthat wildcard star access to the",
    "start": "1329020",
    "end": "1338559"
  },
  {
    "text": "environment. \nAnother thing that maybe is a little bit confusing is is that well what is that\nblock of text what is that that resource",
    "start": "1338560",
    "end": "1345010"
  },
  {
    "text": "thing? So we refer to these as ARNs or\nAmazon resource names and if we were to",
    "start": "1345010",
    "end": "1352030"
  },
  {
    "text": "sort of dive into that Amazon resource\nname format what's really important to understand is that basically what the ARN defines are these things it's the",
    "start": "1352030",
    "end": "1359830"
  },
  {
    "text": "service, the region, the account ID that's\ngoing to be leveraged, and then any service specific name. So in this case\nfor DynamoDB it would be this specific",
    "start": "1359830",
    "end": "1368500"
  },
  {
    "text": "table and even a specific table name for\nthis resource. So we can again use this",
    "start": "1368500",
    "end": "1374320"
  },
  {
    "text": "to write even more granular I in\npolicies with another feature which is called a conditional. So this was a newer\nfeature that was offered earlier in last",
    "start": "1374320",
    "end": "1385299"
  },
  {
    "text": "year. In this case this conditional that\nwe're looking at on screen is unique because what we allow you to do is\nspecify a requested region. So for a lot",
    "start": "1385300",
    "end": "1394750"
  },
  {
    "text": "of our customers in the public sector\nspace what we hear is that there are regional constraint requirements. We need\nto make sure that a principal can only",
    "start": "1394750",
    "end": "1403059"
  },
  {
    "text": "use say DynamoDB if it's within the\nCanada region and we want to make sure that they can't use a service that's\nmaybe outside of the region maybe in",
    "start": "1403060",
    "end": "1411910"
  },
  {
    "text": "another country or in somewhere where\nthey just shouldn't have access. So in this case we can modify this policy so\nthat the principal only has",
    "start": "1411910",
    "end": "1419889"
  },
  {
    "text": "authorization to use it if it's in a\nspecific region. So this is a really powerful tool to allow you to have that\nfine-grained access to make a principal",
    "start": "1419890",
    "end": "1429580"
  },
  {
    "text": "specific only to a specific geography. So\nthere are also a number of ways that we",
    "start": "1429580",
    "end": "1438370"
  },
  {
    "text": "can use this for things like other\naccounts inside of our environment. So when customers get large enough they\ntend to not have just a single account.",
    "start": "1438370",
    "end": "1446500"
  },
  {
    "text": "What we're about to see is that\ncustomers will develop a number of different accounts that have different\ncapabilities. So it could be that you're",
    "start": "1446500",
    "end": "1453610"
  },
  {
    "text": "using something like AWS Organizations\nand what we want to do is have an environment that has developer maybe a\npre prod environment or",
    "start": "1453610",
    "end": "1462340"
  },
  {
    "text": "a separate enclave but what we want them\nto do is still have access to some of",
    "start": "1462340",
    "end": "1468100"
  },
  {
    "text": "those resources but they're in different\naccounts now. So how would we allow that principle that lives in one account to\naccess something that lives in say a",
    "start": "1468100",
    "end": "1477610"
  },
  {
    "text": "different account? So let's look at the\ntop portion here where we have an IAM role that has EC2 instances\nassociated with it but I have a",
    "start": "1477610",
    "end": "1485919"
  },
  {
    "text": "developer that has put code into S3 and\nwe want that developer to be able to have permission to get to that S3 bucket\nthat lives inside of another account.",
    "start": "1485919",
    "end": "1494919"
  },
  {
    "text": "Well how would we do that? So in this\ncase we can create a cross account role",
    "start": "1494919",
    "end": "1500710"
  },
  {
    "text": "or an autherization to access a different resource in a\ndifferent account. So in this case I can",
    "start": "1500710",
    "end": "1507730"
  },
  {
    "text": "authorize this principle to have the\ncapability of interacting with other services like in this case S3. but how\nhow do we provide access to that S3",
    "start": "1507730",
    "end": "1519639"
  },
  {
    "text": "bucket? It's not a person. It's not a\nrobot. So where is that access from",
    "start": "1519640",
    "end": "1525399"
  },
  {
    "text": "the S3 perspective allowing that control?\nSnd the answer is is that you can actually put policy on an S3 bucket as\nwell. So what you see policy on S3 bucket",
    "start": "1525399",
    "end": "1535450"
  },
  {
    "text": "is the S3 bucket policy but the\nlanguage is the same as what we were looking at a moment ago in the IAM\npolicy there's just a few little nuances",
    "start": "1535450",
    "end": "1544419"
  },
  {
    "text": "that are different and let's take a look\nat that. So this is an example of a resource based policy on an S3 bucket\nand you can see that the structure looks",
    "start": "1544419",
    "end": "1552580"
  },
  {
    "text": "very similar to what we were looking at\na moment ago but in this case now there's a new section here that I've\nhighlighted which is this principle.",
    "start": "1552580",
    "end": "1560500"
  },
  {
    "text": "So in this case what what this is basically\nsaying in plain language is for this particular principle we only want to\nallow this bucket to be accessed by this",
    "start": "1560500",
    "end": "1569320"
  },
  {
    "text": "specific account ID and by a specific\nrole. So if we think back to that diagram",
    "start": "1569320",
    "end": "1574630"
  },
  {
    "text": "that we had a minute ago the policy on\nthe S3 bucket can allow that specific",
    "start": "1574630",
    "end": "1579909"
  },
  {
    "text": "role from that developer that was\nattached to the EC2 instance to have access to this S3 bucket. And so what\nthat allows you to do is also pass",
    "start": "1579909",
    "end": "1589690"
  },
  {
    "text": "things like the resource on the bucket\npolicy as well. So you can see that this resource is\nto a particular bucket and also a",
    "start": "1589690",
    "end": "1597669"
  },
  {
    "text": "particular key string path as well so\nsome bucket some path. So we can get very",
    "start": "1597670",
    "end": "1602710"
  },
  {
    "text": "very granular with these bucket based\npolicies to very tightly control what a given principle has access to both from\nthe principle level but as you can see",
    "start": "1602710",
    "end": "1611409"
  },
  {
    "text": "is also from a resource based policy\nattached to the surface like S3.",
    "start": "1611410",
    "end": "1617500"
  },
  {
    "text": "So how does that actually sort of flow? So in\norder for this to work both ends need to",
    "start": "1617500",
    "end": "1622900"
  },
  {
    "text": "be authorized to make this call. So first\nthe EC2 IAM role needs to be able to",
    "start": "1622900",
    "end": "1628030"
  },
  {
    "text": "call to S3 and then the secondary\nportion is is that the resource based policy in this case S3 needs to allow\nauthorization and access to that S3",
    "start": "1628030",
    "end": "1637090"
  },
  {
    "text": "bucket. So no matter what this this has\nto be an explicit allow in both parts otherwise the default posture is deny\n and the user wouldn't have access to",
    "start": "1637090",
    "end": "1646660"
  },
  {
    "text": "that environment. So in this case you can\nsee you know does the principal have access and even with that cross account\nconfiguration they still would have",
    "start": "1646660",
    "end": "1654850"
  },
  {
    "text": "access to this resource. So let's look at\nsome examples of other cross account",
    "start": "1654850",
    "end": "1660610"
  },
  {
    "text": "access this is again that same type of\nscenario but in this case we can use that EC2 role to call to another role\nthat maybe has access to a different",
    "start": "1660610",
    "end": "1668919"
  },
  {
    "text": "service like DynamoDB and it would\nfollow the exact same design pattern of basically allowing you to assume a role\nacross in another account that can then",
    "start": "1668920",
    "end": "1677620"
  },
  {
    "text": "be used to call to in this case a\nservice like DynamoDB. So now I'm leveraging a completely separate role in\na completely separate account that can",
    "start": "1677620",
    "end": "1686230"
  },
  {
    "text": "be used across accounts to allow me to\nhave access to a specific resource that's authorized by that role that\nexists in another account. So if it's a",
    "start": "1686230",
    "end": "1696070"
  },
  {
    "text": "little bit confusing to understand well\nhow do I know what are the role capabilities or how would I understand\nyou know which services support this or don't.",
    "start": "1696070",
    "end": "1703980"
  },
  {
    "text": "There's a really helpful page that\nwe have which is an IAM reference page that lists basically for all AWS\nservices what is actually a lot. So each",
    "start": "1703980",
    "end": "1713650"
  },
  {
    "text": "service documents its own authorization\nfeatures and it often helps you with",
    "start": "1713650",
    "end": "1718660"
  },
  {
    "text": "some basic policy language as well so\nthat you can use it as sort of a starting point so that you know what\nwhat you need to look up or what you",
    "start": "1718660",
    "end": "1725710"
  },
  {
    "text": "need to be able to modify in your policy\nto allow it to actually perform something. So that first\nportion basically covers the IAM part",
    "start": "1725710",
    "end": "1734020"
  },
  {
    "text": "of our environment. But what I want to\nstep into next is how would we secure the networking portion of our\nenvironment. So let's do a deeper dive on",
    "start": "1734020",
    "end": "1743220"
  },
  {
    "start": "1736000",
    "end": "1762000"
  },
  {
    "text": "understanding how we can secure the VPC\nportion of our account. So if you",
    "start": "1743220",
    "end": "1749080"
  },
  {
    "text": "remember earlier this was our sample\naccount environment. so we've got our resources. how do we control the flow of\nstuff that's going on inside of your",
    "start": "1749080",
    "end": "1757210"
  },
  {
    "text": "network? so the first portion is is that\nif we look at inside of the network we",
    "start": "1757210",
    "end": "1763059"
  },
  {
    "start": "1762000",
    "end": "1852000"
  },
  {
    "text": "have a number of controls that are\nprovided by AWS. so the first one that we",
    "start": "1763060",
    "end": "1768580"
  },
  {
    "text": "can provide secure connectivity is via\nsomething called a security group. the security groups allow you to authorize\nonly the traffic that you expect to a",
    "start": "1768580",
    "end": "1777010"
  },
  {
    "text": "resource like EC2. so this is a stateful\npacket filter that wraps around resources that exist inside of your VPC\nand inside of your subnet and the",
    "start": "1777010",
    "end": "1786340"
  },
  {
    "text": "default posture for a security group is\nalways deny. so if it isn't explicitly allowed a user wouldn't be allowed to\nuse that from a network perspective. the",
    "start": "1786340",
    "end": "1797350"
  },
  {
    "text": "other thing that's sort of\ncounterintuitive from a security perspective but is also a really strong\ncapability for providing that secure",
    "start": "1797350",
    "end": "1804669"
  },
  {
    "text": "access to the environment is routing. so\nthrough routing we can also very tightly",
    "start": "1804670",
    "end": "1810280"
  },
  {
    "text": "control what access we allow to a\nresource and more importantly the ways",
    "start": "1810280",
    "end": "1815410"
  },
  {
    "text": "that a resource can egress from that\nnetwork or how it will go outside of your network to some place that may be\nexpected or unexpected destinations. and",
    "start": "1815410",
    "end": "1825549"
  },
  {
    "text": "then the final point is something that's\ncalled a VPC endpoint and VPC endpoints are really unique and powerful\nbecause they provide you with a least",
    "start": "1825550",
    "end": "1834220"
  },
  {
    "text": "privileged point of connectivity for\nservice and it also allows us to do really unique things with policy on\nthose VPC endpoints that",
    "start": "1834220",
    "end": "1843909"
  },
  {
    "text": "we'll touch on in just a couple minutes\nhere. so the first part I want to look at",
    "start": "1843910",
    "end": "1849010"
  },
  {
    "text": "is the example of the security group. so\nlet's dive in on that security group. so again security groups are stateful\npacket filters that allow you to control",
    "start": "1849010",
    "end": "1856929"
  },
  {
    "start": "1852000",
    "end": "2005000"
  },
  {
    "text": "the ingress and egress of traffic within\na resource. so here you can see that we've got a pretty\nenvironment, we've got an application",
    "start": "1856930",
    "end": "1864100"
  },
  {
    "text": "load balancer some compute resources and\na back-end database. so how would we apply security groups to those resources?\nso in this case if you were to sort of",
    "start": "1864100",
    "end": "1873160"
  },
  {
    "text": "logically think through the data flow\nthe first security group that I would want is that for this application load\nbalancer listening on TLS connection I",
    "start": "1873160",
    "end": "1882490"
  },
  {
    "text": "would say we would authorize HTTP s work\n443 for this security group. then we can",
    "start": "1882490",
    "end": "1888850"
  },
  {
    "text": "use a security group for the backend EC2\ninstances and say that basically what we",
    "start": "1888850",
    "end": "1894549"
  },
  {
    "text": "want them to do is have access from that\napplication load balancer and then we can also segment so that the database\nservice has the capability of listening",
    "start": "1894550",
    "end": "1904390"
  },
  {
    "text": "to traffic that we expect to come from\nthe EC2 instances. so if we were to sort",
    "start": "1904390",
    "end": "1910390"
  },
  {
    "text": "of dive in and actually look at that\nconnectivity you can see here from an inbound rules perspective this is pretty\nsimple right. we're allowing all public",
    "start": "1910390",
    "end": "1918580"
  },
  {
    "text": "internet access on port 443 and that's\nwhat we would look for for that first security group. but take a fine look at\nsome of the details on this next one",
    "start": "1918580",
    "end": "1928450"
  },
  {
    "text": "notice that this is just a little bit\ndifferent notice that the source is not a CIDR block instead a really powerful\nfeature for security groups is that you",
    "start": "1928450",
    "end": "1937120"
  },
  {
    "text": "can reference other security groups. so\nin this case what you're seeing is that we are listening on port 8 443 but the\nsource has to be something that came",
    "start": "1937120",
    "end": "1946570"
  },
  {
    "text": "from the application load balancer. so in\nthis way what we can do is basically rather than having to hard code IP\naddresses inside of your security group",
    "start": "1946570",
    "end": "1955419"
  },
  {
    "text": "we can make references to other security\ngroups that we expect the data to flow through. so in this case I expect our web\ntraffic is going to come through the",
    "start": "1955420",
    "end": "1963190"
  },
  {
    "text": "load balancer and nowhere else so that's\nhow we'll control that access and likewise if we were to look at the\nsecurity group for our database layer I",
    "start": "1963190",
    "end": "1970090"
  },
  {
    "text": "expect that the database will only be\naccessible via the compute layer and",
    "start": "1970090",
    "end": "1975789"
  },
  {
    "text": "nowhere else.\nso we can modify that database security group to do the same thing to have a\nreference to the upstream security group",
    "start": "1975790",
    "end": "1983350"
  },
  {
    "text": "which is the EC2 instances. so again this\nis really helpful to route developers because if you aren't familiar with that\nsort of networking connotation this",
    "start": "1983350",
    "end": "1991990"
  },
  {
    "text": "makes it really really easy to visually\nlook at the environment and then look at that data flow on an assignment.\nso the area that we want to dive into on",
    "start": "1991990",
    "end": "2000179"
  },
  {
    "text": "next is again routing which routing\nallows you to define the connectivity for the environment.\nso from an example of sort of a least",
    "start": "2000180",
    "end": "2009090"
  },
  {
    "start": "2005000",
    "end": "2068000"
  },
  {
    "text": "privilege what we can do within a VPC\nis every single VPC in subnet will have",
    "start": "2009090",
    "end": "2014279"
  },
  {
    "text": "a routing policy associated with it and\nthat routing policy allows us to define",
    "start": "2014280",
    "end": "2019320"
  },
  {
    "text": "least privilege for connectivity inside\nof that environment. so let's dive in on that. so in this case I've got two\nsubnets and I also want to make sure",
    "start": "2019320",
    "end": "2028380"
  },
  {
    "text": "that there's no communication for\nresources that exists say in this lower",
    "start": "2028380",
    "end": "2034100"
  },
  {
    "text": "subnet to a public resource. so in this\ncase this resources in this subnet cannot send packets outside of VPC.\nand we're controlling that through the",
    "start": "2034100",
    "end": "2043590"
  },
  {
    "text": "route table. so the route table will\nallow us to say that the only way that these can access the public internet is\nthrough something else like a NAT",
    "start": "2043590",
    "end": "2052169"
  },
  {
    "text": "gateway or a proxy host. so the route\ntable entry for this environment would look like this where you can see that\nthe destination that's allowed is",
    "start": "2052170",
    "end": "2060270"
  },
  {
    "text": "anything that's within the VPC IP side a\nrange but nowhere else.",
    "start": "2060270",
    "end": "2065850"
  },
  {
    "text": "there's no egress for the internet\ngateway. but if we looked at the upper subnet which sometimes referred to as a public",
    "start": "2065850",
    "end": "2075659"
  },
  {
    "text": "subnet. so public subnet is a little\nbit confusing because it's actually not a feature of a subnet to be public.\nthe thing that makes a subnet public or",
    "start": "2075660",
    "end": "2083669"
  },
  {
    "text": "not is that route table entry. so in this\ncase if we were to look at this route table entry which is publicly accessible\nit's because this EC2 instance has an ENI",
    "start": "2083670",
    "end": "2092790"
  },
  {
    "text": "that has a public IP address and then\nwe also have things like the application load balancer with public connectivity\nand that route table entry would be",
    "start": "2092790",
    "end": "2102500"
  },
  {
    "text": "specifying that if we want to talk\nexternally we would use the Internet",
    "start": "2102500",
    "end": "2107880"
  },
  {
    "text": "gateway to communicate to the public\ninternet with these resources. So resources that if we looked at this\nrouting table it allows us basically to",
    "start": "2107880",
    "end": "2117000"
  },
  {
    "text": "look at everything that has internet\nfacing connectivity. and again if we were",
    "start": "2117000",
    "end": "2123240"
  },
  {
    "text": "to look at the route table entry notice\nthat this one is just a little bit different you can see here that there's\nnow a new destination",
    "start": "2123240",
    "end": "2129539"
  },
  {
    "text": "is that zero zero zero CIDR range and\nthat zero zero zero CIDR range specifies the internet gateway or IGW\nthat these resources would use in order",
    "start": "2129540",
    "end": "2140040"
  },
  {
    "text": "to communicate with the public Internet.\nand so that's what makes this a public subnet is that that route table entry\nallows us to use that Internet gateway",
    "start": "2140040",
    "end": "2149850"
  },
  {
    "text": "to get outside of the Internet. the other\nportion for this is that we can control",
    "start": "2149850",
    "end": "2155880"
  },
  {
    "start": "2152000",
    "end": "2232000"
  },
  {
    "text": "access for that lower private subnet so\nthat we can allow the upper subnet to",
    "start": "2155880",
    "end": "2162299"
  },
  {
    "text": "transmit information out. in this case\nmay be these EC2 instances want to be",
    "start": "2162300",
    "end": "2167580"
  },
  {
    "text": "able to get out over the Internet but I\ndon't want them public facing. I want them to be in that private IP. so how\nwould I do that?",
    "start": "2167580",
    "end": "2173550"
  },
  {
    "text": "so if you remember just a little bit ago\nI mentioned that we could do something like an ACK gateway. so an ACK gateway\nexists in the public subnet and what we",
    "start": "2173550",
    "end": "2181349"
  },
  {
    "text": "can do is define a CIDR block inside of\nthe private route table entry that would",
    "start": "2181350",
    "end": "2186480"
  },
  {
    "text": "say if you want to go out to the public\ninternet the way that you'll go out to the public internet is via this NAT\ngateway and again that NAT gateway would",
    "start": "2186480",
    "end": "2194369"
  },
  {
    "text": "exist inside the public subnet which has\na route table entry that it would allow the data to flow out through the\ninternet gateway. So resources in the",
    "start": "2194370",
    "end": "2202320"
  },
  {
    "text": "subnet now can use that static route for\negress through the route table entry and",
    "start": "2202320",
    "end": "2208050"
  },
  {
    "text": "again using that NAT gateway so that's\nhow we would control access to a private subnet if we wanted it to still\nhave access to the Internet but not be",
    "start": "2208050",
    "end": "2216450"
  },
  {
    "text": "directly accessible via the Internet. And\nagain if you wanted to see sort of what",
    "start": "2216450",
    "end": "2222810"
  },
  {
    "text": "that would look like here and the lower\nsubnet the route table entry now has that zero-zero-zero CIDR range but what\nyou'll see is that that CIDR range",
    "start": "2222810",
    "end": "2230610"
  },
  {
    "text": "points to this NAT gateway. From a least\nprivileged perspective AWS offers a variety of different routing offerings\nthere are so many different ways that",
    "start": "2230610",
    "end": "2239100"
  },
  {
    "start": "2232000",
    "end": "2271000"
  },
  {
    "text": "you can control networking on AWS that\nwe can't go through them all today but there are a number of different\ntechniques within",
    "start": "2239100",
    "end": "2245720"
  },
  {
    "text": "AWS through things like Direct Connect\ntransit gateway peering connections all",
    "start": "2245720",
    "end": "2252030"
  },
  {
    "text": "of these will allow you to control that\nfine-grained access either through policy or through of these route table\nentries so you only need to have the",
    "start": "2252030",
    "end": "2259230"
  },
  {
    "text": "routes that you want in a particular\nsubnet and that's how we'll control access.\nWithin the VPC there's also something",
    "start": "2259230",
    "end": "2265539"
  },
  {
    "text": "called a VPC endpoint and these allow\nreally fine-grained least permission connectivity so let's say that I've got\nthese resources that exist inside of",
    "start": "2265539",
    "end": "2275980"
  },
  {
    "start": "2271000",
    "end": "2356000"
  },
  {
    "text": "these these VPC subnets and what I want\nthem to do is I want them to have access",
    "start": "2275980",
    "end": "2281049"
  },
  {
    "text": "to an application that we're going to\nexpose in maybe in a completely different account. So VPC endpoints\nallow you to actually point those",
    "start": "2281049",
    "end": "2289089"
  },
  {
    "text": "resources to that application that's\nbeing hosted in to another account as long as it's being fronted by a service\nlike the network load balancer and I can",
    "start": "2289089",
    "end": "2296650"
  },
  {
    "text": "use that basically to point internal\nresources to that hosted application",
    "start": "2296650",
    "end": "2302619"
  },
  {
    "text": "that it lives in a completely different\naccount. How would I know whether or not this is something that lives inside of\nmy VPC or something that lives in AWS",
    "start": "2302619",
    "end": "2311318"
  },
  {
    "text": "hosted space, again we can use that dig\ntrick and here we can see that this is again pointing to IP space that is not\nin the public IP space it's inside of",
    "start": "2311319",
    "end": "2321308"
  },
  {
    "text": "VPC. A really cool thing is is that these\nVPC endpoints can also be used not when",
    "start": "2321309",
    "end": "2326740"
  },
  {
    "text": "it's just two accounts that can be used\nacross multiple accounts and it's also important to note that behind the scenes\nAWS and through our traffic and",
    "start": "2326740",
    "end": "2336298"
  },
  {
    "text": "knowledge of the network all of these\naccounts have the exact same IP space",
    "start": "2336299",
    "end": "2341799"
  },
  {
    "text": "they all have the same CIDR block and\nso even though these all have the exact same IP space we can still route that\ntraffic appropriately because we know",
    "start": "2341799",
    "end": "2350619"
  },
  {
    "text": "through that VPC endpoint peering\nconnection what the ultimate destination is actually meant to be. So we can also\nuse this for private connectivity",
    "start": "2350619",
    "end": "2360520"
  },
  {
    "start": "2356000",
    "end": "2403000"
  },
  {
    "text": "services to things like services like\nAmazon CloudWatch logs so we can use this to basically say you know we want\nthese to have egress capabilities for",
    "start": "2360520",
    "end": "2370048"
  },
  {
    "text": "storing logs in a service like cloud\nwatch and again the method I could use to figure out well is cloud watch\nsomething that lives inside of my",
    "start": "2370049",
    "end": "2376599"
  },
  {
    "text": "account or is it something that lives\ninside the VPC we can use dig and we can see here that again this is a\nservice that exists outside of my  VPC",
    "start": "2376599",
    "end": "2384730"
  },
  {
    "text": "so I wouldn't have that that first\ncontrol which is the security group this is something that we're going to control\nthrough policy or through routing.",
    "start": "2384730",
    "end": "2394079"
  },
  {
    "text": "But again if I were to look at the Digg\ncommand from the EC2 instance again we would see the same thing it's pointing\nto external access creating a VPC",
    "start": "2395710",
    "end": "2405400"
  },
  {
    "start": "2403000",
    "end": "2464000"
  },
  {
    "text": "endpoint is pretty easy so in this case\nwhat we're looking at is just sort of a snapshot of that in the console so I\nwould define what service I want to use",
    "start": "2405400",
    "end": "2412930"
  },
  {
    "text": "so in this case I can select the cloud\nwatch log service and from there we",
    "start": "2412930",
    "end": "2419019"
  },
  {
    "text": "attach it to the VPC endpoint and we\ncan use that to allow these EC2 instances to communicate with that cloud\nwatch log service which again exists",
    "start": "2419019",
    "end": "2427359"
  },
  {
    "text": "outside of the VPC. But notice that\nthere's no internet gateway on any of these subnets or if you haven't seen\nthat yet that that's sort of the neat",
    "start": "2427359",
    "end": "2434950"
  },
  {
    "text": "trick here is that there was no egress\nthere was no capability of communicating with that public IP. So we're using the V\nPC endpoint to allow these EC2 instances",
    "start": "2434950",
    "end": "2443920"
  },
  {
    "text": "to talk to a service that lives outside\nof the  VPC but without having to expose",
    "start": "2443920",
    "end": "2449380"
  },
  {
    "text": "them to the public Internet. So in this\ncase when we constrain this so that",
    "start": "2449380",
    "end": "2454508"
  },
  {
    "text": "there's no internet gateway notice that\nwhen I use the Digg command it comes back as being within the VPC because\nwe're using the VPC endpoint which",
    "start": "2454509",
    "end": "2462130"
  },
  {
    "text": "allows that private access inside the V\nPC we can also use this for other services so same thing we can use it for\nservices like S3 to control access to S3",
    "start": "2462130",
    "end": "2471999"
  },
  {
    "start": "2464000",
    "end": "2485000"
  },
  {
    "text": "so you can see here we would attach that\npolicy or that  VPC endpoint to the",
    "start": "2471999",
    "end": "2478420"
  },
  {
    "text": "route table and allow us to say that\nanything that's going to S3 is going to be leveraging this VPC endpoint but\nthere's a really neat capability here",
    "start": "2478420",
    "end": "2486880"
  },
  {
    "start": "2485000",
    "end": "2524000"
  },
  {
    "text": "now within that VPC endpoint we can\nalso associate policy so again kind of",
    "start": "2486880",
    "end": "2492609"
  },
  {
    "text": "taking it back to the very first portion\nof this talk when I said that we can reuse these components over and over and\nover again this is an example of",
    "start": "2492609",
    "end": "2500859"
  },
  {
    "text": "basically using that construct where we\ncreated a policy that we could apply to principles or resource based policy to\nS3 but we can also use that same",
    "start": "2500859",
    "end": "2509529"
  },
  {
    "text": "construct to make a resource policy now\nfor VPC endpoints so in this case I can make a policy on this VPC endpoint that\nallows specific actions to take place",
    "start": "2509529",
    "end": "2519880"
  },
  {
    "text": "with this endpoint so again just like\nbefore this is the IAM policy syntax but",
    "start": "2519880",
    "end": "2525670"
  },
  {
    "text": "in this case the policy that we're going\nto associate with it the VPC endpoint is that we're going to\nconstrain the egress to the service S3",
    "start": "2525670",
    "end": "2534460"
  },
  {
    "text": "to specific buckets so in in plain\nlanguage what this policy is saying is that access from this network can talk\nto S3 only from these specific buckets",
    "start": "2534460",
    "end": "2547210"
  },
  {
    "text": "and don't notice that there's also a\ncondition here as well. This conditional string allows us to have a\nnewly-released capability within AWS",
    "start": "2547210",
    "end": "2557760"
  },
  {
    "text": "policy which allows you to specify a\nspecific organizational principle ID so",
    "start": "2557760",
    "end": "2565540"
  },
  {
    "text": "if you're not familiar with AWS\norganizations yet it's outside of the scope of this talk but AWS organizations\nallows you to group sets of accounts",
    "start": "2565540",
    "end": "2574450"
  },
  {
    "text": "together into sort of a treat based\napology so what this policy is doing is",
    "start": "2574450",
    "end": "2580570"
  },
  {
    "text": "actually pretty clever. What it's saying\nis is that the VPC can only communicate with these S3 buckets and it has to be\nsomething that's from a account that",
    "start": "2580570",
    "end": "2591400"
  },
  {
    "text": "would exist inside of that organization\norganizational structure so basically we would only have access if the resources\ninside of AWS organizations that we",
    "start": "2591400",
    "end": "2600700"
  },
  {
    "text": "expect. So now we have an endpoint policy\nthat's associated with this environment that allows us to control access but we\ncan also then apply another layer which",
    "start": "2600700",
    "end": "2609609"
  },
  {
    "text": "is policy again to the S3 bucket and so\nif we look at the resource based policy on S3 we can see that we can also apply\nthat conditional logic to the S3 bucket",
    "start": "2609610",
    "end": "2620079"
  },
  {
    "text": "policy so here you can see that we've\nadded a policy that says we're allowing everything inside of S3 but in this case\nthe source VPC has to be this VPC",
    "start": "2620080",
    "end": "2630460"
  },
  {
    "text": "endpoint. So basically what this is\nsaying is that it will only authorize actions when they came from this VPC\nand VPC endpoint so this is a really",
    "start": "2630460",
    "end": "2639550"
  },
  {
    "text": "powerful way to control access to the\nbucket because now the bucket will only allow communication if it came from that\nparticular VPC endpoint. So again really",
    "start": "2639550",
    "end": "2650110"
  },
  {
    "start": "2649000",
    "end": "2678000"
  },
  {
    "text": "really powerful and allows you to do\nthis for for this type of configuration",
    "start": "2650110",
    "end": "2655770"
  },
  {
    "text": "and again we can also apply that to the\nIAM policy as well so we could",
    "start": "2655770",
    "end": "2661940"
  },
  {
    "text": "apply this to a role on top of that so\nnow we have yet another fine grain layer of access control via the role which\nalso we could specify in the policy",
    "start": "2661940",
    "end": "2671150"
  },
  {
    "text": "syntax that all three of these have to\nuse this particular role in order to",
    "start": "2671150",
    "end": "2676430"
  },
  {
    "text": "access this environment. So you can\ncontrol your VPC like again any other",
    "start": "2676430",
    "end": "2684020"
  },
  {
    "start": "2678000",
    "end": "2883000"
  },
  {
    "text": "resource so we could use it to provide\nauthorization to how we move inside of",
    "start": "2684020",
    "end": "2690770"
  },
  {
    "text": "the environment. There's a couple key\nareas that I didn't cover in this talk but they're important for you to know\nall the same there are services like the",
    "start": "2690770",
    "end": "2699950"
  },
  {
    "text": "AWS key management service that allow\nyou to provide cryptographic capabilities within AWS so if you wanted\nto let's say encrypt and EBS volume or",
    "start": "2699950",
    "end": "2710210"
  },
  {
    "text": "encrypt objects inside of S3 we would be\nusing the KMS service in order to do. That KMS supports policy syntax just\nlike what we've been looking at so far",
    "start": "2710210",
    "end": "2719420"
  },
  {
    "text": "for the other services you'll see that\nthe conditional statements are going to be a little bit different because\nthey're based on the key policy but",
    "start": "2719420",
    "end": "2727520"
  },
  {
    "text": "which AWS offers so that you can apply\nfree SSL certificates to services like",
    "start": "2732290",
    "end": "2737810"
  },
  {
    "text": "our application load balancer API\ngateway cloud front and again we can",
    "start": "2737810",
    "end": "2742970"
  },
  {
    "text": "control who has access to use that\ncertificate management service via the policies that we just looked at\nthere's also visibility and detective",
    "start": "2742970",
    "end": "2751880"
  },
  {
    "text": "controls so things like cloud trail that\nallow us to basically see who has made",
    "start": "2751880",
    "end": "2757220"
  },
  {
    "text": "all these calls inside of our\nenvironment. So what I've shown you is all the different policies and the ways\nthat we can interact those policies but",
    "start": "2757220",
    "end": "2765260"
  },
  {
    "text": "from a security perspective I also need\nto know well who has modified these policies or who has made changes to them\nor who has access to them. We can",
    "start": "2765260",
    "end": "2773960"
  },
  {
    "text": "certainly address the question of who\nhas made changes and who is interacted with them via cloud trail because all\nAPI calls that take place on the",
    "start": "2773960",
    "end": "2781790"
  },
  {
    "text": "platform be it the console the SDK or\nthe CLI will flow through cloud trail",
    "start": "2781790",
    "end": "2787010"
  },
  {
    "text": "and we can actually see what a given\nprincipal has done in order to you know better understand or debug a problem,\nlikewise if I want",
    "start": "2787010",
    "end": "2795560"
  },
  {
    "text": "see what's taking place on side of our\nnetwork we can use VPC flow logs to look at net flow like data and I can use that\nto help me debug if I was looking at the",
    "start": "2795560",
    "end": "2803900"
  },
  {
    "text": "VPC networking layer and trying to\nunderstand is traffic not routing correctly or are we seeing traffic\nthat's not moving in a way that we can",
    "start": "2803900",
    "end": "2811370"
  },
  {
    "text": "expect. We can use that VPC flow log to\nhelp diagnose and better understand what's happening inside that  VPC and\nthen there's a number of higher-level",
    "start": "2811370",
    "end": "2819470"
  },
  {
    "text": "security services as well. So guard duty\nand inspector guard duty is a threat",
    "start": "2819470",
    "end": "2824840"
  },
  {
    "text": "intelligence service so guard duty looks\nfor you at the cloud trail log data and",
    "start": "2824840",
    "end": "2830210"
  },
  {
    "text": "also VPC flow log data as well as DNS\nlog data if you're using Amazon managed",
    "start": "2830210",
    "end": "2836990"
  },
  {
    "text": "DNS to look for anomalies or threats\ninside of your environment and it'll also report to you if a resource is\nbehaving in unexpected way and Amazon",
    "start": "2836990",
    "end": "2847520"
  },
  {
    "text": "inspector is an agent-based solution\nthat allows you to understand if resource like EC2 has been misconfigured\nor has susceptibility to unknown miss",
    "start": "2847520",
    "end": "2858500"
  },
  {
    "text": "configuration or vulnerability. So I hope\nthis was helpful for everyone and I hope this gives you a better understanding of\nhow IAM principal conditions work and",
    "start": "2858500",
    "end": "2867860"
  },
  {
    "text": "how you can apply VPC controls via VPC\nendpoints and routing and some of the",
    "start": "2867860",
    "end": "2873680"
  },
  {
    "text": "other features so I'll stick around and\nfolks have additional questions, but otherwise thank you very much and I hope\nyou guys have a great summit.",
    "start": "2873680",
    "end": "2885149"
  }
]