[
  {
    "start": "0",
    "end": "28000"
  },
  {
    "text": "hello everyone good afternoon my name is Nani Dattatreya I work for a Capital One",
    "start": "30",
    "end": "6480"
  },
  {
    "text": "and Capital One also has a booth in the conference explore please stop by to",
    "start": "6480",
    "end": "13380"
  },
  {
    "text": "find out what are the awesome things that we work in Capital One it is a pleasure for us sharing our experience",
    "start": "13380",
    "end": "19710"
  },
  {
    "text": "in containers operations management and automation with you today and here is my",
    "start": "19710",
    "end": "25410"
  },
  {
    "text": "colleague Satya hi thanks everyone my name is Satya and",
    "start": "25410",
    "end": "31439"
  },
  {
    "start": "28000",
    "end": "87000"
  },
  {
    "text": "mother syndrome I'm also an Enterprise Architect at Capital One this is what we are going to expert from the session",
    "start": "31439",
    "end": "37260"
  },
  {
    "text": "today we are going to review how Capital One embraced micro services and dark and how",
    "start": "37260",
    "end": "43079"
  },
  {
    "text": "ECS has simplified our journey and how our continuous attack evolution happened",
    "start": "43079",
    "end": "49610"
  },
  {
    "text": "with starting with classic ELB and the availability of application load",
    "start": "49610",
    "end": "54930"
  },
  {
    "text": "balancers the infrastructure stack evolved quite a bit to solve specific problems so we will review our different",
    "start": "54930",
    "end": "62010"
  },
  {
    "text": "infrastructure configurations then we will look at different operations like how we create the infrastructure stack",
    "start": "62010",
    "end": "69780"
  },
  {
    "text": "and manage it doing ma updates different deployment models like blooming and",
    "start": "69780",
    "end": "76470"
  },
  {
    "text": "deployment up and cannery deployment automations then we will review some of the lessons we have learned by the",
    "start": "76470",
    "end": "82439"
  },
  {
    "text": "adoption of SES and darker and what are we going to look forward to it all right",
    "start": "82439",
    "end": "89460"
  },
  {
    "start": "87000",
    "end": "143000"
  },
  {
    "text": "so it's an exciting time for us in the capital 1a technology organization we",
    "start": "89460",
    "end": "95790"
  },
  {
    "text": "are utilizing cloud first open source and micro services architecture",
    "start": "95790",
    "end": "102150"
  },
  {
    "text": "principles in building world-class digital products speaking of micro",
    "start": "102150",
    "end": "107369"
  },
  {
    "text": "services there are two aspects to this one side of the coin is the domain",
    "start": "107369",
    "end": "113369"
  },
  {
    "text": "aspect of it where our domain experts work on the scope size API and the",
    "start": "113369",
    "end": "120210"
  },
  {
    "text": "ontology of for micro services on the other side of the micro services coin is the DevOps side of the things where we",
    "start": "120210",
    "end": "127710"
  },
  {
    "text": "focus on independent run time for our micro services independent deployment",
    "start": "127710",
    "end": "133790"
  },
  {
    "text": "scalability and this is where we use darker to run our micro services as",
    "start": "133790",
    "end": "140880"
  },
  {
    "text": "containers in AWS cloud so in the embracing microservices",
    "start": "140880",
    "end": "146220"
  },
  {
    "text": "architecture for running our apps in AWS cloud we embrace the darker and ECS",
    "start": "146220",
    "end": "154170"
  },
  {
    "text": "Amazon's ec2 container service and our journey evolved over a period of last 18",
    "start": "154170",
    "end": "159990"
  },
  {
    "text": "months in using these two solutions using these two products right and ours",
    "start": "159990",
    "end": "168450"
  },
  {
    "text": "Capital One is a federated operating model it's a large enterprise and ours",
    "start": "168450",
    "end": "173970"
  },
  {
    "text": "is a federated operating model and what it implies is each team builds and owns",
    "start": "173970",
    "end": "180990"
  },
  {
    "text": "their application so you build you what there is no central team where all of",
    "start": "180990",
    "end": "186840"
  },
  {
    "text": "the enterprise goes and deploys their apps as containers each application team has the autonomy and they have the so",
    "start": "186840",
    "end": "195300"
  },
  {
    "text": "that their they can deliver at their own speed independent of other teams in turning their apps right so running",
    "start": "195300",
    "end": "203280"
  },
  {
    "text": "docker containers by itself is not very helpful for delivering micro services",
    "start": "203280",
    "end": "208650"
  },
  {
    "text": "for large enterprises it is the devops pipeline along with the container management solution with the",
    "start": "208650",
    "end": "215250"
  },
  {
    "text": "enterprise capabilities and operational aspects with production order and things",
    "start": "215250",
    "end": "220740"
  },
  {
    "text": "that is what makes the micro services click for the large enterprise like ours and so we have tens and hundreds of",
    "start": "220740",
    "end": "228690"
  },
  {
    "text": "teams and all of them have their individual stacks to run their micro services which means there will be tons",
    "start": "228690",
    "end": "236730"
  },
  {
    "text": "tens and hundreds of creative solutions if all of them start lighting their own",
    "start": "236730",
    "end": "241740"
  },
  {
    "text": "infrastructure code to run their to create their stack in the cloud so we",
    "start": "241740",
    "end": "247200"
  },
  {
    "text": "created set of self-service automation tools to provide that reliability and",
    "start": "247200",
    "end": "253760"
  },
  {
    "text": "scalability for our application teams to run the micro services so as an",
    "start": "253760",
    "end": "259200"
  },
  {
    "text": "application owner I am focusing only on my application development are not write",
    "start": "259200",
    "end": "264720"
  },
  {
    "text": "a single line of infrastructure code to run my docker abscess micro-services in",
    "start": "264720",
    "end": "270600"
  },
  {
    "text": "a cloud so rather as an application owner I would have my app build the",
    "start": "270600",
    "end": "275940"
  },
  {
    "text": "docker image and then provide a set of properties file and you provide that to self-service automation tools which will",
    "start": "275940",
    "end": "283140"
  },
  {
    "text": "create the stack and run your services in cloud and we have these tools",
    "start": "283140",
    "end": "288300"
  },
  {
    "text": "covering different operational aspects of it which we will do a deeper dive today right so in we started darker",
    "start": "288300",
    "end": "299910"
  },
  {
    "text": "journey like way before ECS was available to use in private V pcs so we",
    "start": "299910",
    "end": "306600"
  },
  {
    "text": "had open source solutions for container management solution and since then we",
    "start": "306600",
    "end": "312510"
  },
  {
    "text": "understand it is not trivial to run container management solution with",
    "start": "312510",
    "end": "318180"
  },
  {
    "text": "number of components that are required to provide dynamic service discovery load balancing operational aspects of it",
    "start": "318180",
    "end": "325320"
  },
  {
    "text": "so we started embracing ECS and today ezs is the most adopted container management solution in the company right",
    "start": "325320",
    "end": "332270"
  },
  {
    "text": "so given different types of applications so from the business side it's the",
    "start": "332270",
    "end": "337890"
  },
  {
    "text": "credit card servicing application auto loan servicing application i enterprise applications all of them take advantage",
    "start": "337890",
    "end": "344310"
  },
  {
    "text": "of Amazon's the ECS and darker a solution within different types of",
    "start": "344310",
    "end": "349350"
  },
  {
    "text": "architecture applications we have run micro services even driven applications",
    "start": "349350",
    "end": "355260"
  },
  {
    "text": "batch applications real-time aps and all of them use VCS based solution and ez is",
    "start": "355260",
    "end": "363860"
  },
  {
    "text": "significantly simplified our container solution which we will see in the course of this presentation it one of the",
    "start": "363860",
    "end": "371010"
  },
  {
    "text": "things that is very exciting for us for using using ecs compared to open source",
    "start": "371010",
    "end": "377130"
  },
  {
    "text": "solution like missiles which we used in the beginning is either ECS deeper",
    "start": "377130",
    "end": "382320"
  },
  {
    "text": "integration with the AWS native services like we take advantage of our I am rolls",
    "start": "382320",
    "end": "387510"
  },
  {
    "text": "the auto scaling the cloud watch matrix and how we monitor all of the AWS deeper",
    "start": "387510",
    "end": "393720"
  },
  {
    "text": "integration with the ECS we take advantage of them right so with ecs on",
    "start": "393720",
    "end": "398970"
  },
  {
    "text": "our automation tooling we have significantly reduced the time required for the application teams to",
    "start": "398970",
    "end": "405570"
  },
  {
    "text": "run their apps in Arabia's cloud with fully hardened production of production",
    "start": "405570",
    "end": "412560"
  },
  {
    "text": "ready container stack so moving on I",
    "start": "412560",
    "end": "417889"
  },
  {
    "start": "415000",
    "end": "648000"
  },
  {
    "text": "talked a little bit about the container management solution that is required to run your containers not just converting",
    "start": "417889",
    "end": "424199"
  },
  {
    "text": "containers but what are the other things that goes with it right so this is the end-to-end pipeline view of our DevOps",
    "start": "424199",
    "end": "432570"
  },
  {
    "text": "pipeline for our microscope for delivering micro-services right and here I want to talk about a",
    "start": "432570",
    "end": "439919"
  },
  {
    "text": "little bit about the each component in this pipeline and our goal is build in",
    "start": "439919",
    "end": "445490"
  },
  {
    "text": "operationally simple solution for each of the component we don't focus too much",
    "start": "445490",
    "end": "451800"
  },
  {
    "text": "on what tool sets we use because tools will change and we want to build each",
    "start": "451800",
    "end": "456840"
  },
  {
    "text": "component in the pipeline with an operationally simple solution and then",
    "start": "456840",
    "end": "461940"
  },
  {
    "text": "we want to integrate all this with the api's and tomorrow there will be a better tool that solves for the same",
    "start": "461940",
    "end": "468680"
  },
  {
    "text": "component capability then we will have to swap that one out and we did this quite swap out some of the tools what",
    "start": "468680",
    "end": "475169"
  },
  {
    "text": "you see here right so this is developers on one side on the on the other side is",
    "start": "475169",
    "end": "481650"
  },
  {
    "text": "your end users who or your app consumers and we have we have source control",
    "start": "481650",
    "end": "488909"
  },
  {
    "text": "management and we use get up Enterprise and we use for build we use Jenkins we",
    "start": "488909",
    "end": "494490"
  },
  {
    "text": "have two types of repos one is the code binary repo and other other one is the darker image repo we use mixes and we",
    "start": "494490",
    "end": "500849"
  },
  {
    "text": "use docker registry right and this is the runtime piece of your containers",
    "start": "500849",
    "end": "507210"
  },
  {
    "text": "container management solution these where your micro services run as containers and what are the what are the components of the capabilities right we",
    "start": "507210",
    "end": "513930"
  },
  {
    "text": "need a compute cluster we need a cluster manager we need a container code yellow right",
    "start": "513930",
    "end": "519000"
  },
  {
    "text": "and those are the components on what is the solutions we use easy to instance for the compute cluster and for cluster",
    "start": "519000",
    "end": "525720"
  },
  {
    "text": "manager and scheduler we use easy yes right on service discovery on dynamic",
    "start": "525720",
    "end": "531750"
  },
  {
    "text": "service discovery and load balancing before application load balancer was",
    "start": "531750",
    "end": "537120"
  },
  {
    "text": "released we ran our open source based solution for dynamic service discovery and load balancer right so dynamic",
    "start": "537120",
    "end": "544680"
  },
  {
    "text": "service discovery we use the console and for load balancing we used engine X on",
    "start": "544680",
    "end": "549750"
  },
  {
    "text": "the leader version of our stack which we will see we use a plb to provide the",
    "start": "549750",
    "end": "555210"
  },
  {
    "text": "same functionality which is the dynamic service discovery and load balancer right and we have the ELB and that is",
    "start": "555210",
    "end": "562710"
  },
  {
    "text": "fronted by API gateway and this is our clients access their apps so the pipeline view the the devops pipeline",
    "start": "562710",
    "end": "570330"
  },
  {
    "text": "how it works our developers check the code into source control and the tech lead commits the code and accept it it",
    "start": "570330",
    "end": "576510"
  },
  {
    "text": "triggers the build and the build would be like you know compiling the code if it's the java-based application pushes",
    "start": "576510",
    "end": "582330"
  },
  {
    "text": "the code to our binary pool and the Jenkins server also builds the docker image",
    "start": "582330",
    "end": "587670"
  },
  {
    "text": "pushes you to docker registry and makes an API call to our cluster manager and that will deploy our service in this",
    "start": "587670",
    "end": "595110"
  },
  {
    "text": "container management solution and depending upon what stack we use the curse containers that run gets",
    "start": "595110",
    "end": "601680"
  },
  {
    "text": "registered into the service discovery solution and it will be available for use we are the ELB endpoint to our api",
    "start": "601680",
    "end": "609390"
  },
  {
    "text": "gateway an EAP a gateway handle so all the gateway specific capabilities so this is the entry and pipeline view the",
    "start": "609390",
    "end": "616440"
  },
  {
    "text": "operations tools and the automation operations automation tools which we will go into a deeper dive today is this",
    "start": "616440",
    "end": "622920"
  },
  {
    "text": "dotted parts so all these pieces are like enterprise standard things each",
    "start": "622920",
    "end": "628230"
  },
  {
    "text": "application teams doesn't have to run or own those things it's enter standard Enterprise shared services this is what",
    "start": "628230",
    "end": "634860"
  },
  {
    "text": "each application teams create to run their the runtime for the micro services",
    "start": "634860",
    "end": "640440"
  },
  {
    "text": "they provide the input or automation tools or automation to stand up and run",
    "start": "640440",
    "end": "645480"
  },
  {
    "text": "that right so which will see them so moving on to containers tech evolution",
    "start": "645480",
    "end": "653810"
  },
  {
    "start": "648000",
    "end": "711000"
  },
  {
    "text": "looking at container stack evaluation this is about creating our infrastructure stack the infrastructure",
    "start": "654450",
    "end": "660880"
  },
  {
    "text": "stack highly depends on how we load by Nats docker containers so one of the significant problem statements in",
    "start": "660880",
    "end": "667990"
  },
  {
    "text": "running docker containers in production in a very high availability mode is how do you do service discovery",
    "start": "667990",
    "end": "673930"
  },
  {
    "text": "how do you do load balancing we are all know we all know that docker containers are launched at high port something like",
    "start": "673930",
    "end": "679600"
  },
  {
    "text": "32,000 and they can come and go you cannot count on docker containers running forever",
    "start": "679600",
    "end": "684670"
  },
  {
    "text": "so some up sometimes they come very ephemeral in like few minutes you can launch and do something so how do you",
    "start": "684670",
    "end": "691540"
  },
  {
    "text": "load balance these things how do you discover these things how do you register these things this significantly",
    "start": "691540",
    "end": "697570"
  },
  {
    "text": "depending depends on what tools we use and what the tool provides and what are those missing pieces we have to glue it",
    "start": "697570",
    "end": "703840"
  },
  {
    "text": "together so we will go through from classic ELB all the way up to application load balancer which was just",
    "start": "703840",
    "end": "709660"
  },
  {
    "text": "released in august in the solution number one when we started we had e CS",
    "start": "709660",
    "end": "715720"
  },
  {
    "text": "and classic load balancer this is a very simple stack when you launch a darker container it will launch it into your",
    "start": "715720",
    "end": "724150"
  },
  {
    "text": "computer oder the ECAC agent will register the instances to the classic e lb and stack is very simple and if you",
    "start": "724150",
    "end": "732310"
  },
  {
    "text": "want mutual SSL authentication you can decide to do TCP load balancing and your containers can do the certificate",
    "start": "732310",
    "end": "738310"
  },
  {
    "text": "verification along that stuff we will go deep dive into the solution after we",
    "start": "738310",
    "end": "743890"
  },
  {
    "start": "741000",
    "end": "780000"
  },
  {
    "text": "review all the available solutions okay what if you want to do more density",
    "start": "743890",
    "end": "749200"
  },
  {
    "text": "packing and also we want mutual SSL authentication density packing means now",
    "start": "749200",
    "end": "754510"
  },
  {
    "text": "you want to be able to maximize your computer if you have a em four large instance you want to take advantage of",
    "start": "754510",
    "end": "761200"
  },
  {
    "text": "all the CPU and memory in this we use e CS with classic load balancer with",
    "start": "761200",
    "end": "767260"
  },
  {
    "text": "console and registered doing the service Registration part and nginx along with",
    "start": "767260",
    "end": "773650"
  },
  {
    "text": "the console template doing the load balancing part and this provides you high density packing then in August",
    "start": "773650",
    "end": "782590"
  },
  {
    "start": "780000",
    "end": "807000"
  },
  {
    "text": "during the new Earth Summit Year WS made general availability of application",
    "start": "782590",
    "end": "787630"
  },
  {
    "text": "balancers which provide the service registration and discovery part so in",
    "start": "787630",
    "end": "793480"
  },
  {
    "text": "the solution number two we don't need those on the right side so this provides",
    "start": "793480",
    "end": "799120"
  },
  {
    "text": "a simple stack it is a high density packing but we do not have support for mutual SSL so which we'll go through why",
    "start": "799120",
    "end": "807240"
  },
  {
    "start": "807000",
    "end": "1014000"
  },
  {
    "text": "this is the first solution ECS and classic load balancer so in this the key",
    "start": "807240",
    "end": "814090"
  },
  {
    "text": "thing to notice you need to have a fixed port configuration map it for the docker",
    "start": "814090",
    "end": "819670"
  },
  {
    "text": "container to host port let's say you are running Apache and you are running it on port 8080 you need to have 40 8080 or",
    "start": "819670",
    "end": "827380"
  },
  {
    "text": "any other port map it to the host what that means is you can only run one",
    "start": "827380",
    "end": "833530"
  },
  {
    "text": "container of each service in the same ec2 instance so that kinds of limits you",
    "start": "833530",
    "end": "838930"
  },
  {
    "text": "if you have a three node cluster you can run the service only in three only three container sequent launch because of a",
    "start": "838930",
    "end": "845290"
  },
  {
    "text": "fixed host port so that does not mean that this limits you to a large extent say if you have a large compute cluster",
    "start": "845290",
    "end": "851860"
  },
  {
    "text": "you have a large number of services and if you can manage the port configuration",
    "start": "851860",
    "end": "857080"
  },
  {
    "text": "yourself and count down ECS to manage all of that and you need mutual SSL done at the container level",
    "start": "857080",
    "end": "865000"
  },
  {
    "text": "this will still work great so this is still used by some teams for the",
    "start": "865000",
    "end": "870250"
  },
  {
    "text": "simplicity of the stack now let us look at I want density packing I want couple",
    "start": "870250",
    "end": "877120"
  },
  {
    "text": "of services running in ten servers I want to say 200 us to be run and I want",
    "start": "877120",
    "end": "883290"
  },
  {
    "text": "you know complete service discovery management so in this case what happens is we run a highly available console",
    "start": "883290",
    "end": "891160"
  },
  {
    "text": "cluster looking at here this 3 node console cluster interacts with the",
    "start": "891160",
    "end": "897130"
  },
  {
    "text": "compute cluster we have console agents deployed in the computer cluster we have a common are called registrated which is",
    "start": "897130",
    "end": "903400"
  },
  {
    "text": "the open source software which listens to these events of docker containers launching does not matter what port",
    "start": "903400",
    "end": "909520"
  },
  {
    "text": "docker container gets launched so that gets registered into the console central agent through to the console servers",
    "start": "909520",
    "end": "916750"
  },
  {
    "text": "everybody pulls the console servers true of something all console template and the console template it's like a even driven",
    "start": "916750",
    "end": "922990"
  },
  {
    "text": "every time the console server reports a change it updates the nginx templates it",
    "start": "922990",
    "end": "928030"
  },
  {
    "text": "almost updates real-time and the engineer templates reloads the most",
    "start": "928030",
    "end": "933490"
  },
  {
    "text": "recent update to the load-balancing endpoints and the classic e load",
    "start": "933490",
    "end": "938710"
  },
  {
    "text": "balancers still routes a TCP load balancing to the nginx layer so you have one engine X process running in each of",
    "start": "938710",
    "end": "945610"
  },
  {
    "text": "these ec2 instances and the engine SQL routed to any of these instances there",
    "start": "945610",
    "end": "951070"
  },
  {
    "text": "is no guarantee that this nginx will only route to this because there is enough there is no affinity here we tested that it is less than one",
    "start": "951070",
    "end": "957130"
  },
  {
    "text": "millisecond latency even if you were to go to a different instance in this case this is this is a auto scaling group",
    "start": "957130",
    "end": "964210"
  },
  {
    "text": "with highly available configuration this is an auto scaling group this solves the high density packing issue so you can",
    "start": "964210",
    "end": "970750"
  },
  {
    "text": "run hundreds or thousands of containers and this console cluster will manage it and you can still do mutual essential",
    "start": "970750",
    "end": "977800"
  },
  {
    "text": "authentication you can do TCP load balancing here and nginx can do mutual SSL and certificate verification and can",
    "start": "977800",
    "end": "984280"
  },
  {
    "text": "still pass those details to the containers the containers can further",
    "start": "984280",
    "end": "989790"
  },
  {
    "text": "authenticate the nginx as the source and do or any other header validation like",
    "start": "989790",
    "end": "996430"
  },
  {
    "text": "the name of the original certificate that has passed so this provides you in",
    "start": "996430",
    "end": "1001920"
  },
  {
    "text": "spite of the complexity this has been still very popular within our solutions because it solves most of the service",
    "start": "1001920",
    "end": "1009450"
  },
  {
    "text": "discovery problems and it still supports mutually assassin authentication then",
    "start": "1009450",
    "end": "1014760"
  },
  {
    "start": "1014000",
    "end": "1100000"
  },
  {
    "text": "came application load balancer suddenly the stack is significantly simplified there is no console or nginx processes",
    "start": "1014760",
    "end": "1022050"
  },
  {
    "text": "to manage now if you look at here if you are not familiar with the application",
    "start": "1022050",
    "end": "1028650"
  },
  {
    "text": "load balancer it is like classic TLB like an entry point but you cannot load",
    "start": "1028650",
    "end": "1034290"
  },
  {
    "text": "balanced TCP here you can only load balanced HTTP or HTTPS and that uses",
    "start": "1034290",
    "end": "1039780"
  },
  {
    "text": "something called a target grow for all practical purposes target groups are like your load balancers the target",
    "start": "1039780",
    "end": "1046290"
  },
  {
    "text": "groups works with the easiest agency in each of these easiest instances and the ECAC agent as soon as this services come",
    "start": "1046290",
    "end": "1053580"
  },
  {
    "text": "and go they register the target group the target group get load-balanced by your load balancer",
    "start": "1053580",
    "end": "1059130"
  },
  {
    "text": "using the context paths so you can run multiple containers multiple services any number of containers in the",
    "start": "1059130",
    "end": "1065730"
  },
  {
    "text": "simplified stack and the one of the key limitation is you can only do a HTTP or",
    "start": "1065730",
    "end": "1073260"
  },
  {
    "text": "HTTPS load balancing here so that means you want to terminate the SSL your originating client certificate",
    "start": "1073260",
    "end": "1079440"
  },
  {
    "text": "information cannot be passed back to the containers so so we you have to rely on",
    "start": "1079440",
    "end": "1086880"
  },
  {
    "text": "parameter security like secondary groups network access control lists to manage the security so but this provides a",
    "start": "1086880",
    "end": "1093720"
  },
  {
    "text": "significantly simplified stack for the specific problems we are interested in",
    "start": "1093720",
    "end": "1102260"
  },
  {
    "text": "all right so you saw different three different types of stacks where right so",
    "start": "1103510",
    "end": "1108670"
  },
  {
    "text": "for the operations of automation what you want to do right so for US",
    "start": "1108670",
    "end": "1113850"
  },
  {
    "start": "1112000",
    "end": "1300000"
  },
  {
    "text": "operations automation is your force multiplier and like I said earlier our",
    "start": "1113850",
    "end": "1120280"
  },
  {
    "text": "application teams we want us to focus on the application development and not each",
    "start": "1120280",
    "end": "1125890"
  },
  {
    "text": "of the application team run or the right infrastructure coding for running the microscope base stack right so we",
    "start": "1125890",
    "end": "1133390"
  },
  {
    "text": "created the self service automation tools that does four things allocate",
    "start": "1133390",
    "end": "1139960"
  },
  {
    "text": "does that's fall under four categories one is the choose four stack creation",
    "start": "1139960",
    "end": "1146320"
  },
  {
    "text": "and the choose for deploying your micro services using a different release",
    "start": "1146320",
    "end": "1152710"
  },
  {
    "text": "strategies blue green or cannery and we have tools for army updates right so we",
    "start": "1152710",
    "end": "1160420"
  },
  {
    "text": "manage our own armies and we want to reiterate our stack with the latest armies and the tools for that and we",
    "start": "1160420",
    "end": "1167710"
  },
  {
    "text": "have tools for scaling and monitoring so these are the four buckets of tools that",
    "start": "1167710",
    "end": "1172750"
  },
  {
    "text": "we develop right and how our users use these tools our users prepare a property",
    "start": "1172750",
    "end": "1179230"
  },
  {
    "text": "file describing where they want to run their application it basically contains information like what is the AWS account",
    "start": "1179230",
    "end": "1187450"
  },
  {
    "text": "and what is the subnets availability zones etc to create their stack and",
    "start": "1187450",
    "end": "1193450"
  },
  {
    "text": "provide that tooling to either a Jenkins job or to your lambda function and this",
    "start": "1193450",
    "end": "1199630"
  },
  {
    "text": "lambda function or Jenkins job will create the stack folder right and likewise we have tools for",
    "start": "1199630",
    "end": "1205050"
  },
  {
    "text": "blue/green and Canada deployment these are all the key lambda functions and of all folks",
    "start": "1205050",
    "end": "1210490"
  },
  {
    "text": "trigger these lambda functions by dropping a property or parameter file to your bucket and this will provide them",
    "start": "1210490",
    "end": "1217210"
  },
  {
    "text": "those tools and the army update automation - likewise they say this is my older army that is",
    "start": "1217210",
    "end": "1222940"
  },
  {
    "text": "using my stack this the newer army and we have the tools that rehydrates the stack with the latest army and there is",
    "start": "1222940",
    "end": "1230410"
  },
  {
    "text": "no user disrupting end-user disruption it copies over all the services from all",
    "start": "1230410",
    "end": "1235900"
  },
  {
    "text": "cluster to new clothes that is another tool and we have tools for health checks at the container level",
    "start": "1235900",
    "end": "1242740"
  },
  {
    "text": "at the instance level and at the auto scaling group level and the cluster level right and we have inter",
    "start": "1242740",
    "end": "1248980"
  },
  {
    "text": "integration of our stack with the enterprise logging system we uses plunk and as part of the tooling we have the",
    "start": "1248980",
    "end": "1254950"
  },
  {
    "text": "spawn key agents that's bootstrap and connects to the Splunk server and all that good stuff right and we also have",
    "start": "1254950",
    "end": "1261420"
  },
  {
    "text": "built a test apparatus which is a standalone machine where we have jmeter",
    "start": "1261420",
    "end": "1267460"
  },
  {
    "text": "in flux DB and Griffon are on number of Jameson templates so the two-foot application teams when the stand of this",
    "start": "1267460",
    "end": "1274360"
  },
  {
    "text": "stack and the deployed their services they also have this test apparatus launching tests on their services for",
    "start": "1274360",
    "end": "1280690"
  },
  {
    "text": "the different types of JMX plants like you know you may have like a constant throughput or you may have the step-up",
    "start": "1280690",
    "end": "1287980"
  },
  {
    "text": "throughputs whatnot they have that tooling also in their hands so on the let's go over these four categories of",
    "start": "1287980",
    "end": "1295780"
  },
  {
    "text": "our automation tools and have a little deeper dive into these tools in this",
    "start": "1295780",
    "end": "1306730"
  },
  {
    "text": "section we cover the infrastructure creation automation why do you have to create the infrastructure consistently",
    "start": "1306730",
    "end": "1313240"
  },
  {
    "text": "as Noddy said we have several agents the company specific security agency ssh",
    "start": "1313240",
    "end": "1319930"
  },
  {
    "text": "agents monitoring agents some file system standards all that stuff we have",
    "start": "1319930",
    "end": "1326710"
  },
  {
    "text": "to create in a consistent manner writing each developer having its own CloudFormation template ethera form it's",
    "start": "1326710",
    "end": "1333010"
  },
  {
    "text": "going to create a sprawl of these templates so this is how our",
    "start": "1333010",
    "end": "1338680"
  },
  {
    "start": "1336000",
    "end": "1429000"
  },
  {
    "text": "infrastructure stack creation process looks like so as an application water",
    "start": "1338680",
    "end": "1345220"
  },
  {
    "text": "the developers are expected to prepare a property file so all they have know about is which VPC they are already in",
    "start": "1345220",
    "end": "1351820"
  },
  {
    "text": "an account hello this specific account they have B PC subnet security group",
    "start": "1351820",
    "end": "1357130"
  },
  {
    "text": "what instant size you need what is your auto scaling group size if you are using your auto scaling policy what are your",
    "start": "1357130",
    "end": "1362980"
  },
  {
    "text": "metrics for CPU memory disk all that stuff and provides some SMS topics for",
    "start": "1362980",
    "end": "1369130"
  },
  {
    "text": "critical alerts Merl adds all that stuff then they",
    "start": "1369130",
    "end": "1374380"
  },
  {
    "text": "create this parameter files and each lob is designated with a specific s3 bucket",
    "start": "1374380",
    "end": "1380620"
  },
  {
    "text": "and that triggers a lambda function the lambda function executes cetera form",
    "start": "1380620",
    "end": "1385950"
  },
  {
    "text": "template and the terraform template creates the infrastructure it takes about three minutes once you drop the",
    "start": "1385950",
    "end": "1393070"
  },
  {
    "text": "bucket for the easiest agent to register into the server and ready to launch containers so why we choose Terra firme",
    "start": "1393070",
    "end": "1401790"
  },
  {
    "text": "that is say you can go both ways against CloudFormation template we have some modularity in and more readability and",
    "start": "1401790",
    "end": "1408730"
  },
  {
    "text": "developers can also do quick desktop testing and all that stuff so we prefer terraform so we ran terraform originally",
    "start": "1408730",
    "end": "1416320"
  },
  {
    "text": "in the Jenkins with the lambdas with VPC support and all that stuff we started",
    "start": "1416320",
    "end": "1422470"
  },
  {
    "text": "running telephone within lambda it still finishes within five minutes so we haven't hit that limit yet so this is",
    "start": "1422470",
    "end": "1432310"
  },
  {
    "start": "1429000",
    "end": "1519000"
  },
  {
    "text": "how a typical parameter file looks like my instance type is m3 medium these are my subnet 1/2 we can provide any number",
    "start": "1432310",
    "end": "1439060"
  },
  {
    "text": "of comma separated subnets my comma separated security groups my is the -3 Max 9 and all that stuff related to the",
    "start": "1439060",
    "end": "1446770"
  },
  {
    "text": "compute cluster then my easiest cluster this is my name it will create an easiest cluster this is my I am role for",
    "start": "1446770",
    "end": "1453220"
  },
  {
    "text": "my cluster because it needs to access s3 buckets and whatnot this is our internal",
    "start": "1453220",
    "end": "1458410"
  },
  {
    "text": "docker registry URL and we have proxy server so we need to have that then this",
    "start": "1458410",
    "end": "1465160"
  },
  {
    "text": "one section covers all the alarms and scaling policies so all the scaling",
    "start": "1465160",
    "end": "1470410"
  },
  {
    "text": "policies say if your CPU more than 80 and scale out this is more reservation",
    "start": "1470410",
    "end": "1477760"
  },
  {
    "text": "policies for easy as we also have utilization policies so it's all obstructed into parameter files the",
    "start": "1477760",
    "end": "1484000"
  },
  {
    "text": "templates create those cloud or shell arms and manage the easiest work with",
    "start": "1484000",
    "end": "1489400"
  },
  {
    "text": "the easiest clusters for the scaling policies then some things may want to have a custom script because they have a",
    "start": "1489400",
    "end": "1496000"
  },
  {
    "text": "specific log file configuration or they want to download a certificate from their s3 bucket and configure the",
    "start": "1496000",
    "end": "1503080"
  },
  {
    "text": "containers with host volume mapping and use something with that so we provided a custom script anything we did in abstract in our main",
    "start": "1503080",
    "end": "1510760"
  },
  {
    "text": "stack people fill this with this gap and you know they do all kinds of stuff",
    "start": "1510760",
    "end": "1516419"
  },
  {
    "text": "whatever the custom things needed for the application so this is how yes three",
    "start": "1516419",
    "end": "1523570"
  },
  {
    "start": "1519000",
    "end": "1682000"
  },
  {
    "text": "stage stack creation happens we separated the three stages because the compute clusters typically each time am",
    "start": "1523570",
    "end": "1531580"
  },
  {
    "text": "I changes we have two it can be one month or two month or SF and you sue as you want something changes your security",
    "start": "1531580",
    "end": "1538539"
  },
  {
    "text": "groups ten years all that stuff you can if you want you can recreate the cluster as many times as you want so we create",
    "start": "1538539",
    "end": "1544450"
  },
  {
    "text": "the compute cluster in one set of parameter files create the compute cluster you said it is a different",
    "start": "1544450",
    "end": "1551230"
  },
  {
    "text": "folder on the same s3 bucket so it gets triggered according to which even gets",
    "start": "1551230",
    "end": "1556450"
  },
  {
    "text": "kicked off then we create a load balancer with a default target group in",
    "start": "1556450",
    "end": "1561909"
  },
  {
    "text": "this case this talks about application load balancer stack and in this case the",
    "start": "1561909",
    "end": "1567549"
  },
  {
    "text": "load balance are used to outlive the compute cluster so it can run for months or even years you know because the DNS",
    "start": "1567549",
    "end": "1573940"
  },
  {
    "text": "name people don't want to change it all that stuff so basically we create a load",
    "start": "1573940",
    "end": "1579610"
  },
  {
    "text": "balancer and we attach the load balancer we register these auto scaling group so",
    "start": "1579610",
    "end": "1585850"
  },
  {
    "text": "along with it and the third stage in this case here the third stage is services this is a one-to-many this you",
    "start": "1585850",
    "end": "1593200"
  },
  {
    "text": "can each time you run it you create a service or an update service so you run",
    "start": "1593200",
    "end": "1599019"
  },
  {
    "text": "it as many times as you want as the number of your services so this has things like what is your container image",
    "start": "1599019",
    "end": "1606039"
  },
  {
    "text": "what is how many what is the number of tasks you want to run and what is your",
    "start": "1606039",
    "end": "1611260"
  },
  {
    "text": "deployment plan minimum plum and 50% AG maximum two hundred and all that stuff all ECS service related stuff gets",
    "start": "1611260",
    "end": "1619809"
  },
  {
    "text": "obstructed into these from parameter files and once they do this the stacks",
    "start": "1619809",
    "end": "1625350"
  },
  {
    "text": "this services get each service get its won't target group and the target group",
    "start": "1625350",
    "end": "1631210"
  },
  {
    "text": "registers with these load balancer with a context wrote and",
    "start": "1631210",
    "end": "1636400"
  },
  {
    "text": "you can start getting load-balanced typically if you have your parameter",
    "start": "1636400",
    "end": "1641410"
  },
  {
    "text": "files first time it may take an hour for an application team to work with their security team and other administrative",
    "start": "1641410",
    "end": "1648550"
  },
  {
    "text": "team to find their right subnet security groups once that homework is done probably one or two hour maximum the",
    "start": "1648550",
    "end": "1655810"
  },
  {
    "text": "total time it takes if you have a docker image to run it takes about five to",
    "start": "1655810",
    "end": "1661120"
  },
  {
    "text": "seven minutes to run into the end and if you don't you no longer want it you can destroy it in a few minutes so and you",
    "start": "1661120",
    "end": "1668830"
  },
  {
    "text": "can do it as many times as you want so it's a you build you own so developers",
    "start": "1668830",
    "end": "1674710"
  },
  {
    "text": "create these hundreds of times if we can destroy it as often as they want all",
    "start": "1674710",
    "end": "1685180"
  },
  {
    "start": "1682000",
    "end": "1737000"
  },
  {
    "text": "right so what we just saw was like an asana application thing I use the three",
    "start": "1685180",
    "end": "1690670"
  },
  {
    "text": "micro functions and I created my stack that runs our micro services right so on",
    "start": "1690670",
    "end": "1697380"
  },
  {
    "text": "we use capital one private Amazon machine images and our cloud engine team",
    "start": "1697380",
    "end": "1705190"
  },
  {
    "text": "releases updates to our armies periodically and as our security and",
    "start": "1705190",
    "end": "1711550"
  },
  {
    "text": "regulatory requirements mandates us we are required to rehydrate our ec2",
    "start": "1711550",
    "end": "1718120"
  },
  {
    "text": "machines with the latest armies and when we have a stack that we have micro",
    "start": "1718120",
    "end": "1723280"
  },
  {
    "text": "services running them how do we update our application stack with the latest",
    "start": "1723280",
    "end": "1728650"
  },
  {
    "text": "armies without causing any disruption to our end users that is this set of your",
    "start": "1728650",
    "end": "1734260"
  },
  {
    "text": "army update automation tool how that works so here is the example where I have an",
    "start": "1734260",
    "end": "1740490"
  },
  {
    "start": "1737000",
    "end": "1798000"
  },
  {
    "text": "application right and I have this easiest cluster this is my application load balancer and in this application I",
    "start": "1740490",
    "end": "1747580"
  },
  {
    "text": "have two services once of each service learning two tasks I mean three tasks",
    "start": "1747580",
    "end": "1753280"
  },
  {
    "text": "here one two three so there are two services each service running three",
    "start": "1753280",
    "end": "1758860"
  },
  {
    "text": "tasks and I have two ec2 instances and as we can see this is old armies I am",
    "start": "1758860",
    "end": "1766870"
  },
  {
    "text": "getting notified by my security team that I need to rehydrate my stack with the",
    "start": "1766870",
    "end": "1772540"
  },
  {
    "text": "latest armies that has been published right as an application T I don't want",
    "start": "1772540",
    "end": "1777610"
  },
  {
    "text": "to write infrastructure code to update my armies but I don't want to cause any",
    "start": "1777610",
    "end": "1782920"
  },
  {
    "text": "disruption to my end users who are using this load balancer URL that are",
    "start": "1782920",
    "end": "1788380"
  },
  {
    "text": "accessing my services and I want to do this in less than a half hour and I want to use the automation tools to get this",
    "start": "1788380",
    "end": "1794590"
  },
  {
    "text": "Li a duration that and here is how we do that so we gain most of our automation",
    "start": "1794590",
    "end": "1801250"
  },
  {
    "start": "1798000",
    "end": "1935000"
  },
  {
    "text": "tooling is even t31 we are lambda functions and what as an application developer I do I prepare my properties",
    "start": "1801250",
    "end": "1809050"
  },
  {
    "text": "file and I dropped in a s3 bucket saying this is my stack this is my old army and",
    "start": "1809050",
    "end": "1815110"
  },
  {
    "text": "this is my new army and update my stack right so I but I drop that function I",
    "start": "1815110",
    "end": "1821380"
  },
  {
    "text": "drop the parameter file it kicks off this lambda function this lambda function is going to go and create a",
    "start": "1821380",
    "end": "1827230"
  },
  {
    "text": "brand new ECS cluster and it's going to create the same number of original stack",
    "start": "1827230",
    "end": "1833590"
  },
  {
    "text": "I had two machines it's going to create same number of machines but this time with the newer armies this is my first",
    "start": "1833590",
    "end": "1840820"
  },
  {
    "text": "lambda function and I have my next lambda function which gets triggered and",
    "start": "1840820",
    "end": "1846460"
  },
  {
    "text": "this is going to go on replicate all my easiest services that is running in my",
    "start": "1846460",
    "end": "1853420"
  },
  {
    "text": "old army based cluster to my new army based cluster so what's happening here",
    "start": "1853420",
    "end": "1859990"
  },
  {
    "text": "is when these two ECS services are created in this new ECS cluster these",
    "start": "1859990",
    "end": "1867130"
  },
  {
    "text": "services are also getting registered to the same load balancer to the same add",
    "start": "1867130",
    "end": "1874240"
  },
  {
    "text": "load balancer target groups so at this point in time what do we have is we have",
    "start": "1874240",
    "end": "1879280"
  },
  {
    "text": "this application load balancer and we have at this moment double the capacity of our services one kept one set of",
    "start": "1879280",
    "end": "1888370"
  },
  {
    "text": "services running in the new army base DCs cluster the other one is running on",
    "start": "1888370",
    "end": "1893650"
  },
  {
    "text": "the older army base cluster right so now we have all of these things perfectly",
    "start": "1893650",
    "end": "1899470"
  },
  {
    "text": "running then we have the next lambda function that goes on",
    "start": "1899470",
    "end": "1905690"
  },
  {
    "text": "deletes my ICS services it first gracefully stopped the easiest services meaning all the containers get stopped",
    "start": "1905690",
    "end": "1912299"
  },
  {
    "text": "on the world machine and the draining happens so we don't break any in-flight transactions and once all the containers",
    "start": "1912299",
    "end": "1918389"
  },
  {
    "text": "are drained in the old stack you have the ECI services stop and then it will",
    "start": "1918389",
    "end": "1923969"
  },
  {
    "text": "delete the stack it will remove it later terminate the ec2 instances it terminate",
    "start": "1923969",
    "end": "1930239"
  },
  {
    "text": "the launch configuration or a scaling group on the ECS cluster and what do we have now we have the new AM H tank",
    "start": "1930239",
    "end": "1938989"
  },
  {
    "text": "running the same ECS services same number but with this new am i right so",
    "start": "1938989",
    "end": "1945779"
  },
  {
    "text": "in less than a hour or so or those three micro functions work together in",
    "start": "1945779",
    "end": "1951440"
  },
  {
    "text": "rehydrating your application that was using your old army with your new army",
    "start": "1951440",
    "end": "1957119"
  },
  {
    "text": "so that is how we do our rehydration of our applications from the old armies to",
    "start": "1957119",
    "end": "1964049"
  },
  {
    "text": "the new armies let's we look at the",
    "start": "1964049",
    "end": "1971879"
  },
  {
    "start": "1965000",
    "end": "1976000"
  },
  {
    "text": "blue-green deployment automation what is blue billion deployment most of your familiar will quickly give you this is",
    "start": "1971879",
    "end": "1977759"
  },
  {
    "text": "courtesy of martin fowler so we have a blue service running and it was load",
    "start": "1977759",
    "end": "1985139"
  },
  {
    "text": "balanced by this and there is a brand new green service gets established and",
    "start": "1985139",
    "end": "1990359"
  },
  {
    "text": "you change the router that's the basic basically you establish the full capacity and you change the router to go",
    "start": "1990359",
    "end": "1998249"
  },
  {
    "text": "to the new service so how do we accomplish this in this context this is",
    "start": "1998249",
    "end": "2006919"
  },
  {
    "text": "where we start we have blue service this is a target group in this case application load balancer we have two tasks running for",
    "start": "2006919",
    "end": "2014450"
  },
  {
    "text": "this use case across two ec2 instances let us say so this is our starting point",
    "start": "2014450",
    "end": "2021700"
  },
  {
    "text": "now we have a green task so we launched",
    "start": "2021700",
    "end": "2027830"
  },
  {
    "text": "a new service which is basically a new version of the same service it gets its",
    "start": "2027830",
    "end": "2034549"
  },
  {
    "text": "won't target group one beta ELB Coletta's greenie lb r beta lb and application developer does all",
    "start": "2034549",
    "end": "2041990"
  },
  {
    "text": "kinds of testing this is still running no interruption to this nothing happens here and the application developer does",
    "start": "2041990",
    "end": "2048620"
  },
  {
    "text": "a beta testing for whatever number of days so far so good",
    "start": "2048620",
    "end": "2053648"
  },
  {
    "start": "2053000",
    "end": "2140000"
  },
  {
    "text": "now I want to switch the traffic what do we do so we don't alam de all of these",
    "start": "2053649",
    "end": "2058940"
  },
  {
    "text": "are triggered by lambda functions but the way we described before so we detach this whole set of",
    "start": "2058940",
    "end": "2067310"
  },
  {
    "text": "containers the easiest service from this target group the we did eyes the whole",
    "start": "2067310",
    "end": "2073669"
  },
  {
    "text": "target group and attach it to the the same load balancer with a higher",
    "start": "2073669",
    "end": "2078950"
  },
  {
    "text": "priority if you are familiar with the ALB or you would understand if not the priorities you can have several target",
    "start": "2078950",
    "end": "2086120"
  },
  {
    "text": "groups attached to a same application load balancer and depending on which has the lowest number that is the highest",
    "start": "2086120",
    "end": "2092090"
  },
  {
    "text": "priority so it gets load balance in this case we attach let us say the priority was 400 for example for the blue service",
    "start": "2092090",
    "end": "2098870"
  },
  {
    "text": "we detect one number so 399 and we attach this target group to this ELB and",
    "start": "2098870",
    "end": "2105850"
  },
  {
    "text": "what happens is this target group TLB basically starts routing to the listener",
    "start": "2105850",
    "end": "2112430"
  },
  {
    "text": "routes to the green tasks and the blue one slowly gets the in-flight ration",
    "start": "2112430",
    "end": "2118070"
  },
  {
    "text": "transactions complete but they are not drained they no longer get the traffic anymore because we haven't stopped the",
    "start": "2118070",
    "end": "2123230"
  },
  {
    "text": "containers yet so at this time all good now the developer has to make a call",
    "start": "2123230",
    "end": "2128330"
  },
  {
    "text": "operations personal ok there will be Splunk reports or other things which tells you that something is going wrong",
    "start": "2128330",
    "end": "2133670"
  },
  {
    "text": "or your goal let's say you're on a happy path you want to go over and move",
    "start": "2133670",
    "end": "2139550"
  },
  {
    "text": "forward so in this case what we do is we delete the blue service which basically",
    "start": "2139550",
    "end": "2147440"
  },
  {
    "start": "2140000",
    "end": "2161000"
  },
  {
    "text": "endures the two stage it stops drains and then it's it then also be deleted",
    "start": "2147440",
    "end": "2152960"
  },
  {
    "text": "the beta a and B also you can hang on to that if you want to test more services because you do not have to create one",
    "start": "2152960",
    "end": "2158480"
  },
  {
    "text": "bit error before each service say if you want to roll back so we just we will do",
    "start": "2158480",
    "end": "2164600"
  },
  {
    "start": "2161000",
    "end": "2197000"
  },
  {
    "text": "just the opposite of you submit the same lambda function with the parameter file with a action called rollback we will just do",
    "start": "2164600",
    "end": "2172230"
  },
  {
    "text": "the opposite of the original state basically we remove the priority and the",
    "start": "2172230",
    "end": "2178320"
  },
  {
    "text": "blue services start getting traffic to the original tasks and then we have a next action that will delete the green",
    "start": "2178320",
    "end": "2184440"
  },
  {
    "text": "service and you can start all over so that's how brogues in deployment happens",
    "start": "2184440",
    "end": "2192740"
  },
  {
    "text": "so general deployment right and not every application follows the same",
    "start": "2196820",
    "end": "2204360"
  },
  {
    "start": "2197000",
    "end": "2297000"
  },
  {
    "text": "release strategy in a large enterprise right under some applications you want",
    "start": "2204360",
    "end": "2209700"
  },
  {
    "text": "to incrementally release the new version of the app along with the older version",
    "start": "2209700",
    "end": "2215880"
  },
  {
    "text": "and see how it is performing and based on the performance that your how your",
    "start": "2215880",
    "end": "2223410"
  },
  {
    "text": "new version is working alongside the old version you will take this chance I have",
    "start": "2223410",
    "end": "2228570"
  },
  {
    "text": "released 1% of my containers the new version with the older version and you",
    "start": "2228570",
    "end": "2234750"
  },
  {
    "text": "would say the other thing is looking good let's increment it let's go forward by like 10% and let's wait and see for",
    "start": "2234750",
    "end": "2241260"
  },
  {
    "text": "like 30 minutes to see how it works and you would make such decisions and at some point you would say hey I don't",
    "start": "2241260",
    "end": "2247500"
  },
  {
    "text": "need like I don't want to go forward I want to roll back something is not",
    "start": "2247500",
    "end": "2253620"
  },
  {
    "text": "looking good so you can roll backwards from going to like from 10% to 20% you",
    "start": "2253620",
    "end": "2260130"
  },
  {
    "text": "will go from 10% to 0% so your older version works so how do we support this",
    "start": "2260130",
    "end": "2265860"
  },
  {
    "text": "type of canary release strategy with this automation touring right so like we",
    "start": "2265860",
    "end": "2273210"
  },
  {
    "text": "said like we have let's say like we say like like 10% you want to release here and then wait for some period of time",
    "start": "2273210",
    "end": "2279390"
  },
  {
    "text": "and you release 30% and then you make it go all the way everything's looking good",
    "start": "2279390",
    "end": "2284760"
  },
  {
    "text": "and all along you have the same load balancer where your clients their clients don't see any change of you",
    "start": "2284760",
    "end": "2292800"
  },
  {
    "text": "releasing your new version of the app into the mix so as an application",
    "start": "2292800",
    "end": "2298530"
  },
  {
    "start": "2297000",
    "end": "2371000"
  },
  {
    "text": "developer what do I have I have like this my deployment ID I'm just calling giving",
    "start": "2298530",
    "end": "2305630"
  },
  {
    "text": "it in an ID saying this is my deployment ID for my Canada relays deployment and this is my cluster easy as Foster and I",
    "start": "2305630",
    "end": "2314540"
  },
  {
    "text": "have my blue service we want and I have my green service b2 and we have the",
    "start": "2314540",
    "end": "2320660"
  },
  {
    "text": "number of tasks and this is the task definition so this is where it gets interesting I'm going to say here I want",
    "start": "2320660",
    "end": "2327380"
  },
  {
    "text": "to increment my canary relays by 20% and I want to wait for like 15 minutes and",
    "start": "2327380",
    "end": "2335030"
  },
  {
    "text": "if your thing is looking good then I want to go forward every 15 minutes and",
    "start": "2335030",
    "end": "2340510"
  },
  {
    "text": "while I increased like you're 15 like 20% of my canary I want to roll back my",
    "start": "2340510",
    "end": "2348500"
  },
  {
    "text": "original ones by 15% so I don't want to learn like hundred percent of blue and",
    "start": "2348500",
    "end": "2354710"
  },
  {
    "text": "under percent of the the newer version and the other percent of the world of version and what is this action this is",
    "start": "2354710",
    "end": "2360740"
  },
  {
    "text": "deploy right so I prepare this property file drop it in the s3 bucket and it's",
    "start": "2360740",
    "end": "2366200"
  },
  {
    "text": "going to trigger my lambda function which does this canary deployment and",
    "start": "2366200",
    "end": "2372040"
  },
  {
    "start": "2371000",
    "end": "2690000"
  },
  {
    "text": "this is the set of tools or that we use in our Kol deployment so let's go over",
    "start": "2372040",
    "end": "2378980"
  },
  {
    "text": "how these things work so again as you can see we use all AWS native services",
    "start": "2378980",
    "end": "2384590"
  },
  {
    "text": "here we use s3 bucket we use lambda function we use sqs and we use the SNS",
    "start": "2384590",
    "end": "2390620"
  },
  {
    "text": "topics for like ascending notifications and we use this over easy-easy is",
    "start": "2390620",
    "end": "2395660"
  },
  {
    "text": "clustered as like we just reviewed as an application order I am preparing my",
    "start": "2395660",
    "end": "2401870"
  },
  {
    "text": "deployment file I am Telling what is my easiest cluster and what is my older",
    "start": "2401870",
    "end": "2407330"
  },
  {
    "text": "service and what is my canary service and I drop into the bucket on my action",
    "start": "2407330",
    "end": "2412490"
  },
  {
    "text": "is deployed and this will trigger the lambda function and what does the lambda",
    "start": "2412490",
    "end": "2419000"
  },
  {
    "text": "function does it goes to my easiest cluster and at this point I have two",
    "start": "2419000",
    "end": "2425090"
  },
  {
    "text": "services one is the holder service on the other one is the canary service it's",
    "start": "2425090",
    "end": "2430670"
  },
  {
    "text": "going to increase the number of containers in my canary service by 20%",
    "start": "2430670",
    "end": "2437000"
  },
  {
    "text": "and when all those canary service containers come up and they all get registered in the same load balancer the",
    "start": "2437000",
    "end": "2444560"
  },
  {
    "text": "same target group when those are all done then it also goes on decrement by",
    "start": "2444560",
    "end": "2452230"
  },
  {
    "text": "20% the older service it does that and then it drops a message into the sqs",
    "start": "2452230",
    "end": "2461030"
  },
  {
    "text": "queue saying I did this much I incremented my newer version by 20% I",
    "start": "2461030",
    "end": "2467930"
  },
  {
    "text": "mentor my older by 20% and drops that message in the sqs queue and it also",
    "start": "2467930",
    "end": "2473720"
  },
  {
    "text": "puts that message in the s3 bucket will be maintained the state of this deployment right and once it does that",
    "start": "2473720",
    "end": "2481880"
  },
  {
    "text": "then it also sends notification to the operations folks of what just happened",
    "start": "2481880",
    "end": "2487880"
  },
  {
    "text": "it implemented the canary version by 20% that information also is published to",
    "start": "2487880",
    "end": "2493670"
  },
  {
    "text": "this SNS topic and we have another lambda function which is the poling",
    "start": "2493670",
    "end": "2499369"
  },
  {
    "text": "function to this SD a deployment queue it goes there and looks Oh I said like",
    "start": "2499369",
    "end": "2505700"
  },
  {
    "text": "that time that was like every 15 minutes it pulls and gets that information here",
    "start": "2505700",
    "end": "2511339"
  },
  {
    "text": "and based on that it goes and again updates the service so every 15 minutes",
    "start": "2511339",
    "end": "2517070"
  },
  {
    "text": "as long as there is no interruption it goes and starts incremental e rolling",
    "start": "2517070",
    "end": "2523400"
  },
  {
    "text": "out 20% of your canary version and once those gets registered into the service",
    "start": "2523400",
    "end": "2529609"
  },
  {
    "text": "target group it goes on the decrement the older version by the same amount it",
    "start": "2529609",
    "end": "2535490"
  },
  {
    "text": "continues to do that until all of the canary version is 100% on the older",
    "start": "2535490",
    "end": "2543020"
  },
  {
    "text": "version is off of the traffic here right so this is the happy path what we just",
    "start": "2543020",
    "end": "2549160"
  },
  {
    "text": "reviewed on why this happened let's say like the first 20% is up and you are",
    "start": "2549160",
    "end": "2555589"
  },
  {
    "text": "watching your logs and you are seeing some errors so showing up in the logs on you want to stop this thing so what do",
    "start": "2555589",
    "end": "2562820"
  },
  {
    "text": "we do go back at the same power properties file and here instead of",
    "start": "2562820",
    "end": "2569480"
  },
  {
    "text": "deploy you put a so what do you want to do like you want to suspend and see what's going",
    "start": "2569480",
    "end": "2575780"
  },
  {
    "text": "on that is one action you can do or your we are panicking nope this doesn't work let's roll back everything then in if",
    "start": "2575780",
    "end": "2583010"
  },
  {
    "text": "that's the decision you can say like a roll back so we have two options here I'm going to say like suspend so I'm",
    "start": "2583010",
    "end": "2588770"
  },
  {
    "text": "going to drop a mission up a action called suspend drop it into the bucket then everything stops there so you have",
    "start": "2588770",
    "end": "2596180"
  },
  {
    "text": "the 20% running and that can you are getting that traffic going through that and you can watch logs and see and then",
    "start": "2596180",
    "end": "2603080"
  },
  {
    "text": "you figured oh this is nothing alarming this is something that was expected I didn't have to stop it then go back to",
    "start": "2603080",
    "end": "2610580"
  },
  {
    "text": "the same pile here and here you see a less you so drop it again and it's going",
    "start": "2610580",
    "end": "2616940"
  },
  {
    "text": "to pick it up from whale it was left and roll forward with the same amount of",
    "start": "2616940",
    "end": "2622160"
  },
  {
    "text": "increments until you get 100% of this one and the other actions besides what we just saw the liquor deploy suspend or",
    "start": "2622160",
    "end": "2631280"
  },
  {
    "text": "lick roll forward in the sense you are doing like here other than like 15",
    "start": "2631280",
    "end": "2637040"
  },
  {
    "text": "minutes you say like you wait like for three hours for away 20 minutes out for you a 20% and you're do get this first",
    "start": "2637040",
    "end": "2643970"
  },
  {
    "text": "20 percent if we watch for three hour everything looked great and it does increment another 20 percent after three",
    "start": "2643970",
    "end": "2650390"
  },
  {
    "text": "hours and everything looks great and you're confident this is not going to go wrong and you say like roll forward then",
    "start": "2650390",
    "end": "2656420"
  },
  {
    "text": "it's not going to like 60 80 and 100 in the three hours interval every three",
    "start": "2656420",
    "end": "2661940"
  },
  {
    "text": "hours it just going to go all the way to 100% that is one action so that is roll",
    "start": "2661940",
    "end": "2667100"
  },
  {
    "text": "forward so depending upon what you were action during the candy release you have options like deploy suspend resume",
    "start": "2667100",
    "end": "2675220"
  },
  {
    "text": "rollback and roll forward all of that uses this chilling automation tooling to",
    "start": "2675220",
    "end": "2681530"
  },
  {
    "text": "make your the canary price work well right so on lastly some of the lessons",
    "start": "2681530",
    "end": "2691850"
  },
  {
    "start": "2690000",
    "end": "2851000"
  },
  {
    "text": "that we learned here right so go ahead setia cover the how the",
    "start": "2691850",
    "end": "2697700"
  },
  {
    "text": "important lessons we learned thank you we haven't done have slides but",
    "start": "2697700",
    "end": "2704030"
  },
  {
    "text": "a couple of things I want to cover as we have implemented high availability in",
    "start": "2704030",
    "end": "2709850"
  },
  {
    "text": "multi region using route 53 standard configurations from AWS we have similar",
    "start": "2709850",
    "end": "2717410"
  },
  {
    "text": "tools Jenkins Jenkins are lambda based you say that deployed in this region",
    "start": "2717410",
    "end": "2722690"
  },
  {
    "text": "deployed in this region this is my resiliency policy your routing policy",
    "start": "2722690",
    "end": "2728300"
  },
  {
    "text": "you can say that 6040 latency based routing or what not and what is your cloud watch alum for monitoring your",
    "start": "2728300",
    "end": "2734570"
  },
  {
    "text": "health and all that stuff and we have implemented that and we have implemented auto scaling policies for both",
    "start": "2734570",
    "end": "2740630"
  },
  {
    "text": "containers and underlying ec2 instances depending on various policies and also",
    "start": "2740630",
    "end": "2746840"
  },
  {
    "text": "you saw that the Blue Beam deployment launch is double the number of tasks what if you don't run out of capacity",
    "start": "2746840",
    "end": "2751850"
  },
  {
    "text": "the reservation alarms if you run out of 80 percentage of your capacity it will",
    "start": "2751850",
    "end": "2757850"
  },
  {
    "text": "launch more and once he eventually get rid of those instances the green ones",
    "start": "2757850",
    "end": "2763460"
  },
  {
    "text": "and the blue ones when you destroy them they were capacity will be restored back to what your arms are configured to so",
    "start": "2763460",
    "end": "2770530"
  },
  {
    "text": "ECS has significantly simplified our container stack operations leveraging",
    "start": "2770530",
    "end": "2776840"
  },
  {
    "text": "ECS the native tools along with ECS the integration is so powerful and with this",
    "start": "2776840",
    "end": "2783800"
  },
  {
    "text": "automation tooling we have deployed several production deployments in minutes we can say that so the day then",
    "start": "2783800",
    "end": "2790490"
  },
  {
    "text": "the development development teams have to just focus on the docker images test them fine and not worry about the",
    "start": "2790490",
    "end": "2797060"
  },
  {
    "text": "infrastructure stacks one last point on that is we have been certified by AWS as",
    "start": "2797060",
    "end": "2802730"
  },
  {
    "text": "a well architected framework we have if you have an enterprise contract with support with AWS you can also do it for",
    "start": "2802730",
    "end": "2809210"
  },
  {
    "text": "your company yet ablis has reviewed our design and we were offered I think it's",
    "start": "2809210",
    "end": "2816170"
  },
  {
    "text": "like something like 95 percentage compatibility there are a lot of security you have to balance between cost security and high availability that",
    "start": "2816170",
    "end": "2823670"
  },
  {
    "text": "you cannot have hundred in all of that when you have high availability you have redundancy that increases your cost then",
    "start": "2823670",
    "end": "2830360"
  },
  {
    "text": "when you are when you want to do security you know there are some things you have to do for some of those may",
    "start": "2830360",
    "end": "2835850"
  },
  {
    "text": "reduce your points that doesn't mean that well architected but it's a good indication of how your application is",
    "start": "2835850",
    "end": "2841610"
  },
  {
    "text": "due if you have a AWS Technical Account Manager you can work with him to get the",
    "start": "2841610",
    "end": "2846700"
  },
  {
    "text": "AWS well architected certification yeah",
    "start": "2846700",
    "end": "2852230"
  },
  {
    "start": "2851000",
    "end": "3009000"
  },
  {
    "text": "so lastly right so we were very hell excited to see in at today's morning",
    "start": "2852230",
    "end": "2858170"
  },
  {
    "text": "presentation where they were they announced that the support for container placement this is something we dearly",
    "start": "2858170",
    "end": "2864950"
  },
  {
    "text": "like to have and other feature that we would love to have is the container",
    "start": "2864950",
    "end": "2870590"
  },
  {
    "text": "level security groups as soon as we got the I am at the task level the easiest",
    "start": "2870590",
    "end": "2876110"
  },
  {
    "text": "task level the container level we took advantage of those features and that we are looking to have container level",
    "start": "2876110",
    "end": "2883070"
  },
  {
    "text": "security groups otherwise we have to apply the total sum of all security",
    "start": "2883070",
    "end": "2889250"
  },
  {
    "text": "groups or to all of the ec2 instances and I cannot run services that I want to",
    "start": "2889250",
    "end": "2896030"
  },
  {
    "text": "isolate in a single cluster I don't want to have share the security constructs",
    "start": "2896030",
    "end": "2901640"
  },
  {
    "text": "right so that is something we would love to see and balancing placements with",
    "start": "2901640",
    "end": "2907010"
  },
  {
    "text": "scale in and scale out so this is always a tricky one how you scale out and",
    "start": "2907010",
    "end": "2912140"
  },
  {
    "text": "scaling and you latter the right configuration otherwise you are saying like a CPU 80% scale out but our memory",
    "start": "2912140",
    "end": "2918620"
  },
  {
    "text": "if it is going down by like 50 percent scaling and you will go between scale out and scale in like a very awkwardly",
    "start": "2918620",
    "end": "2925490"
  },
  {
    "text": "and other things like we like to see the rather than to have the step up or step",
    "start": "2925490",
    "end": "2932570"
  },
  {
    "text": "down policies like just when you hit like 80 percent CPU we say step up take",
    "start": "2932570",
    "end": "2937850"
  },
  {
    "text": "two machines or add two machines or three machines we don't want to be in that step up step down business rather",
    "start": "2937850",
    "end": "2943850"
  },
  {
    "text": "we would like to say I want to maintain a target rate of like 60 percent CPU you",
    "start": "2943850",
    "end": "2949040"
  },
  {
    "text": "Amazon behind the scenes you take care of how many machines you want to add or",
    "start": "2949040",
    "end": "2954380"
  },
  {
    "text": "how many machines you want to scale down but give us the target rate that we want",
    "start": "2954380",
    "end": "2960140"
  },
  {
    "text": "to specify and not the number of step up or step down instances so those are some",
    "start": "2960140",
    "end": "2965420"
  },
  {
    "text": "of the things that we would like to see as the a ECS product that grows and we we are",
    "start": "2965420",
    "end": "2976469"
  },
  {
    "text": "very thankful for our partnership with Amazon easiest product team on the I am",
    "start": "2976469",
    "end": "2982579"
  },
  {
    "text": "for like feature and other features we had a preview and we and the application load band so we had a preview and Satya",
    "start": "2982579",
    "end": "2989249"
  },
  {
    "text": "and I published the engineering blog in Amazon easiest website talking about all the details and our different",
    "start": "2989249",
    "end": "2995789"
  },
  {
    "text": "configurations and the different features of that one so please check that one out going to get a chance so",
    "start": "2995789",
    "end": "3001279"
  },
  {
    "text": "that's about it for today's presentation and thank you for your time",
    "start": "3001279",
    "end": "3007150"
  },
  {
    "text": "[Applause]",
    "start": "3007150",
    "end": "3011529"
  }
]