[
  {
    "start": "0",
    "end": "36000"
  },
  {
    "text": "[Music]",
    "start": "410",
    "end": "11999"
  },
  {
    "text": "hello",
    "start": "12639",
    "end": "13200"
  },
  {
    "text": "i am amrita a cloud support engineer",
    "start": "13200",
    "end": "15599"
  },
  {
    "text": "here at the aws",
    "start": "15599",
    "end": "16720"
  },
  {
    "text": "office in bangalore sometimes customers",
    "start": "16720",
    "end": "19920"
  },
  {
    "text": "ask me how do i resolve the error",
    "start": "19920",
    "end": "22080"
  },
  {
    "text": "message um command not allowed when used",
    "start": "22080",
    "end": "24880"
  },
  {
    "text": "memory is greater than max memory for an",
    "start": "24880",
    "end": "27519"
  },
  {
    "text": "amazon elastic cache for redis cluster",
    "start": "27519",
    "end": "29840"
  },
  {
    "text": "node",
    "start": "29840",
    "end": "30800"
  },
  {
    "text": "so today i will show you how to fix this",
    "start": "30800",
    "end": "33200"
  },
  {
    "text": "error",
    "start": "33200",
    "end": "34239"
  },
  {
    "text": "let's get started when it's out of",
    "start": "34239",
    "end": "37440"
  },
  {
    "start": "36000",
    "end": "61000"
  },
  {
    "text": "memory",
    "start": "37440",
    "end": "38160"
  },
  {
    "text": "elastic cache for redis implements the",
    "start": "38160",
    "end": "40320"
  },
  {
    "text": "max memory policy that is set for the",
    "start": "40320",
    "end": "42879"
  },
  {
    "text": "cache nodes parameter",
    "start": "42879",
    "end": "44160"
  },
  {
    "text": "group the default value that is volatile",
    "start": "44160",
    "end": "47039"
  },
  {
    "text": "lru",
    "start": "47039",
    "end": "47920"
  },
  {
    "text": "frees up memory by evicting keys with a",
    "start": "47920",
    "end": "50399"
  },
  {
    "text": "set expiration time",
    "start": "50399",
    "end": "51840"
  },
  {
    "text": "that is ttl value when a cache node does",
    "start": "51840",
    "end": "55039"
  },
  {
    "text": "not have",
    "start": "55039",
    "end": "55760"
  },
  {
    "text": "any keys with a ttl value it returns an",
    "start": "55760",
    "end": "58719"
  },
  {
    "text": "error instead",
    "start": "58719",
    "end": "61199"
  },
  {
    "start": "61000",
    "end": "90000"
  },
  {
    "text": "following a few suggestions that you can",
    "start": "61199",
    "end": "63600"
  },
  {
    "text": "follow as per your use case",
    "start": "63600",
    "end": "65360"
  },
  {
    "text": "to prevent oom error messages",
    "start": "65360",
    "end": "68799"
  },
  {
    "text": "suggestion 1 set a ttl value for keys on",
    "start": "68799",
    "end": "71920"
  },
  {
    "text": "your node",
    "start": "71920",
    "end": "73200"
  },
  {
    "text": "you can set ttl for a key as below",
    "start": "73200",
    "end": "76799"
  },
  {
    "text": "in this example we have set the ttl",
    "start": "76799",
    "end": "79200"
  },
  {
    "text": "value for my key for 10 seconds",
    "start": "79200",
    "end": "82000"
  },
  {
    "text": "similarly you can set the ttl value for",
    "start": "82000",
    "end": "84560"
  },
  {
    "text": "keys on your node with the help of",
    "start": "84560",
    "end": "86560"
  },
  {
    "text": "custom code as per your requirement",
    "start": "86560",
    "end": "90320"
  },
  {
    "start": "90000",
    "end": "110000"
  },
  {
    "text": "the default volatile lru memory",
    "start": "90320",
    "end": "92479"
  },
  {
    "text": "management policy",
    "start": "92479",
    "end": "93840"
  },
  {
    "text": "then effects expired keys to free up",
    "start": "93840",
    "end": "96400"
  },
  {
    "text": "memory",
    "start": "96400",
    "end": "98880"
  },
  {
    "text": "if you set a ttl value you can also use",
    "start": "98960",
    "end": "102079"
  },
  {
    "text": "volatile tdl setting this setting",
    "start": "102079",
    "end": "105119"
  },
  {
    "text": "makes space by affecting only those keys",
    "start": "105119",
    "end": "107759"
  },
  {
    "text": "with an",
    "start": "107759",
    "end": "108240"
  },
  {
    "text": "expired set suggestion 2 update the",
    "start": "108240",
    "end": "111680"
  },
  {
    "text": "parameter group to use",
    "start": "111680",
    "end": "112960"
  },
  {
    "text": "different max memory policy parameter",
    "start": "112960",
    "end": "116719"
  },
  {
    "text": "in the custom parameter group the",
    "start": "116719",
    "end": "118320"
  },
  {
    "text": "default value would be",
    "start": "118320",
    "end": "119920"
  },
  {
    "text": "volatile lru volatile lru evict keys by",
    "start": "119920",
    "end": "123840"
  },
  {
    "text": "trying to remove the less recently used",
    "start": "123840",
    "end": "125920"
  },
  {
    "text": "keys first",
    "start": "125920",
    "end": "126960"
  },
  {
    "text": "but only among keys that have an expire",
    "start": "126960",
    "end": "129440"
  },
  {
    "text": "set",
    "start": "129440",
    "end": "130000"
  },
  {
    "text": "in order to make space for the new data",
    "start": "130000",
    "end": "132080"
  },
  {
    "text": "added",
    "start": "132080",
    "end": "133920"
  },
  {
    "text": "there are other settings available too",
    "start": "133920",
    "end": "136239"
  },
  {
    "text": "you can choose one which is suitable for",
    "start": "136239",
    "end": "138080"
  },
  {
    "text": "your workload in the max memory policy",
    "start": "138080",
    "end": "141200"
  },
  {
    "text": "all keys lru make space by evicting less",
    "start": "141200",
    "end": "144000"
  },
  {
    "text": "recently used keys first",
    "start": "144000",
    "end": "146319"
  },
  {
    "text": "all keys random make space by evicting",
    "start": "146319",
    "end": "148959"
  },
  {
    "text": "random keys",
    "start": "148959",
    "end": "150239"
  },
  {
    "text": "volatile random makes space by evicting",
    "start": "150239",
    "end": "152560"
  },
  {
    "text": "random keys with an expired set",
    "start": "152560",
    "end": "155040"
  },
  {
    "text": "additionally redis 4.0 offers least",
    "start": "155040",
    "end": "157840"
  },
  {
    "text": "frequently used",
    "start": "157840",
    "end": "158959"
  },
  {
    "text": "eviction modes like all keys lfu",
    "start": "158959",
    "end": "162239"
  },
  {
    "text": "make space by evicting the key that was",
    "start": "162239",
    "end": "164480"
  },
  {
    "text": "accessed the fewest number of times",
    "start": "164480",
    "end": "167280"
  },
  {
    "text": "volatile lfu makes space by evicting",
    "start": "167280",
    "end": "169680"
  },
  {
    "text": "keys with an expired set",
    "start": "169680",
    "end": "171680"
  },
  {
    "text": "starting with the one that was accessed",
    "start": "171680",
    "end": "173760"
  },
  {
    "text": "the fewest number of times",
    "start": "173760",
    "end": "176640"
  },
  {
    "start": "176000",
    "end": "235000"
  },
  {
    "text": "suggestion 3 delete some existing keys",
    "start": "176640",
    "end": "179200"
  },
  {
    "text": "manually to free up memory",
    "start": "179200",
    "end": "181040"
  },
  {
    "text": "you can delete existing keys to free up",
    "start": "181040",
    "end": "183200"
  },
  {
    "text": "memory by using",
    "start": "183200",
    "end": "184480"
  },
  {
    "text": "dl command for example",
    "start": "184480",
    "end": "187920"
  },
  {
    "text": "note that deleting existing keys only",
    "start": "187920",
    "end": "190400"
  },
  {
    "text": "temporarily resolves ohm errors",
    "start": "190400",
    "end": "192959"
  },
  {
    "text": "be sure to also consider your memory",
    "start": "192959",
    "end": "195120"
  },
  {
    "text": "management strategy",
    "start": "195120",
    "end": "198080"
  },
  {
    "text": "suggestion 4 choose a larger node type",
    "start": "198080",
    "end": "200800"
  },
  {
    "text": "than the current one",
    "start": "200800",
    "end": "202480"
  },
  {
    "text": "the maximum available memory on an",
    "start": "202480",
    "end": "204720"
  },
  {
    "text": "elastic cache for redis is determined by",
    "start": "204720",
    "end": "206959"
  },
  {
    "text": "the node type",
    "start": "206959",
    "end": "207920"
  },
  {
    "text": "and cannot be modified however you can",
    "start": "207920",
    "end": "210879"
  },
  {
    "text": "use",
    "start": "210879",
    "end": "211360"
  },
  {
    "text": "a larger node type with more storage",
    "start": "211360",
    "end": "214239"
  },
  {
    "text": "again",
    "start": "214239",
    "end": "215040"
  },
  {
    "text": "using a large node type only temporarily",
    "start": "215040",
    "end": "217360"
  },
  {
    "text": "resolves ohm errors",
    "start": "217360",
    "end": "219680"
  },
  {
    "text": "be sure to also rethink your memory",
    "start": "219680",
    "end": "222239"
  },
  {
    "text": "management strategy",
    "start": "222239",
    "end": "224799"
  },
  {
    "text": "thanks for watching and happy cloud",
    "start": "224799",
    "end": "226480"
  },
  {
    "text": "computing from all of us here at aws",
    "start": "226480",
    "end": "237599"
  }
]