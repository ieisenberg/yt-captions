[
  {
    "text": "hi everyone um I'm here today to talk about how we're rebuilding our",
    "start": "13519",
    "end": "18660"
  },
  {
    "text": "infrastructure on top of ecs docker and a whole host of other good tools you",
    "start": "18660",
    "end": "24300"
  },
  {
    "text": "have a lot of startups that start with maybe a few founders who have questionable ops skills maybe there's an",
    "start": "24300",
    "end": "29760"
  },
  {
    "text": "idea and they kind of hack together something that works but there's kind of a weird transition period between the",
    "start": "29760",
    "end": "35520"
  },
  {
    "text": "point where that startup really starts taking off and there's a lot of growth and you suddenly have this like fully baked ops team we're now you have alerts",
    "start": "35520",
    "end": "43290"
  },
  {
    "text": "for everything and out of scaling and out of provisioning and everything looks a lot more mature no more commits with",
    "start": "43290",
    "end": "50820"
  },
  {
    "text": "Yolo in the title that sort of thing you know so I wanted to talk about how we went through this transition over the",
    "start": "50820",
    "end": "57360"
  },
  {
    "text": "past year and kind of what changes we made because a lot of folks like Google",
    "start": "57360",
    "end": "63000"
  },
  {
    "text": "or Facebook or Twitter talk about how they achieve this at massive scale and but as a start-up you probably don't",
    "start": "63000",
    "end": "68700"
  },
  {
    "text": "have those resources or the time to build those sorts of systems so you can actually achieve a lot of them with a very small team built on top of AWS to",
    "start": "68700",
    "end": "75330"
  },
  {
    "text": "kind of frame the problem here on a bit out meeting i'm one of the co-founders and CTO of segments and what we do is",
    "start": "75330",
    "end": "81750"
  },
  {
    "text": "we're a single source of data for all of your customer data and so the idea is",
    "start": "81750",
    "end": "88170"
  },
  {
    "text": "that you send us data things like clicks people performing actions on your app or",
    "start": "88170",
    "end": "94049"
  },
  {
    "text": "your site maybe ad impressions and basically anything that you care about that you want to track relay to your customers and then we collected a sort",
    "start": "94049",
    "end": "100979"
  },
  {
    "text": "of a central store and fan it out to any of these different places that you want to use it maybe it's emailing them at a",
    "start": "100979",
    "end": "106049"
  },
  {
    "text": "tool like MailChimp or customer I oh maybe it's analyzing their data in mixpanel maybe it's putting in a data",
    "start": "106049",
    "end": "111270"
  },
  {
    "text": "warehouse we're sort of the central place for all that data so give you a kind of rough sense of the scale that we're dealing with we process around",
    "start": "111270",
    "end": "118259"
  },
  {
    "text": "tens of billions of calls every month coming through our API and then fanning out to all these different 150 services",
    "start": "118259",
    "end": "124380"
  },
  {
    "text": "that we support and we're managing a few hundred instances on AWS and leveraging",
    "start": "124380",
    "end": "129690"
  },
  {
    "text": "a lot of different services pretty heavily but of course it was always this way this is a photo from",
    "start": "129690",
    "end": "135840"
  },
  {
    "text": "actually our first office and using office here is a little bit liberal since it's our first apartment but we",
    "start": "135840",
    "end": "141960"
  },
  {
    "text": "had a bunch of whiteboards and much of screens and not a lot of ops knowledge at the time basically my co-founder Ilya",
    "start": "141960",
    "end": "147660"
  },
  {
    "text": "who's the shirtless one there I'm not in this picture since I'm taking the picture the two of us were sort of",
    "start": "147660",
    "end": "154620"
  },
  {
    "text": "responsible for provisioning out our whole AWS set up so we met with the solutions architect at the time and went",
    "start": "154620",
    "end": "161100"
  },
  {
    "text": "about as many best practices as we could like setting things up at a VPC and and then we were so pretty rudimentary so we",
    "start": "161100",
    "end": "168150"
  },
  {
    "text": "went back to trying to find product market fit um and that actually got us",
    "start": "168150",
    "end": "173550"
  },
  {
    "text": "through for a relatively long time we sort of provision all our instances through the AWS you I we do things",
    "start": "173550",
    "end": "180120"
  },
  {
    "text": "that's kind of custom one-off things and but over time as with most startups we",
    "start": "180120",
    "end": "185310"
  },
  {
    "text": "started really approaching a scale where this wasn't cutting it anymore and there are only a few of us who knew how to",
    "start": "185310",
    "end": "190830"
  },
  {
    "text": "deal with the backend systems me TJ and Garrett and more and more the dev team",
    "start": "190830",
    "end": "196560"
  },
  {
    "text": "wanted to be able to boot their own services but couldn't really do so in a way that we deemed safe so about six",
    "start": "196560",
    "end": "204239"
  },
  {
    "text": "months ago we decided to kind of restructure the whole thing and think what would happen if we built the system",
    "start": "204239",
    "end": "209670"
  },
  {
    "text": "today from the ground up and so this is that story in particular I'd like to talked about five major points of this",
    "start": "209670",
    "end": "215459"
  },
  {
    "text": "transition and some of the decisions we made when moving to this new production",
    "start": "215459",
    "end": "221220"
  },
  {
    "text": "setup the first one is using separate AWS accounts a second is how we adopted",
    "start": "221220",
    "end": "226620"
  },
  {
    "text": "docker and containers which I'm sure you've heard a lot about today the third is how we actually move to ecs for",
    "start": "226620",
    "end": "231959"
  },
  {
    "text": "running all these containers and different services the fourth is using terraform to actually provision",
    "start": "231959",
    "end": "237780"
  },
  {
    "text": "everything and make sure the configuration management look good and then the last one is using data dog to",
    "start": "237780",
    "end": "242790"
  },
  {
    "text": "monitor and alert for all of these systems running in production I'll start out with the separate AWS accounts which",
    "start": "242790",
    "end": "248790"
  },
  {
    "text": "was something that my teammate Garrett came up with I know several other shops are end up doing the same thing but",
    "start": "248790",
    "end": "254750"
  },
  {
    "text": "honestly it's been one of the best moves we made all year before we separate different accounts like dev staging and",
    "start": "254750",
    "end": "261840"
  },
  {
    "text": "prod by region or by instance tags but honestly that's pretty error-prone um and there's a pretty high degree",
    "start": "261840",
    "end": "268450"
  },
  {
    "text": "chance that one of your devs will accidentally do something on the wrong environment and so instead we said and",
    "start": "268450",
    "end": "275080"
  },
  {
    "text": "put that to bed and said hey we're going to use actually physically separate accounts they won't know anything about",
    "start": "275080",
    "end": "280090"
  },
  {
    "text": "each other and so we got actually really good isolation between them so things running in production have no concept",
    "start": "280090",
    "end": "286870"
  },
  {
    "text": "and can't even talk two things running in stage and additionally we ended up having a single sort of Bastion points",
    "start": "286870",
    "end": "294520"
  },
  {
    "text": "which I'll talk about in a second where we could basically create user accounts in just the ops accounts and then have a",
    "start": "294520",
    "end": "300340"
  },
  {
    "text": "single place where provisioning users and then single place for auditing what those users are doing and then as an",
    "start": "300340",
    "end": "305710"
  },
  {
    "text": "added bonus we also got consolidated building and reservations for each of these counts so if you want to look in some place like rusted advisor you can",
    "start": "305710",
    "end": "312070"
  },
  {
    "text": "figure out what's using one to generally walk through how this works with my sort of not design approved drawing here uh",
    "start": "312070",
    "end": "319500"
  },
  {
    "text": "basically everything goes through this obstacle which is sort of our jump or Bastion account if you will this is",
    "start": "319500",
    "end": "325930"
  },
  {
    "text": "where we create all of our IM users this is where people log in if they want to do stuff with production this is if",
    "start": "325930",
    "end": "331630"
  },
  {
    "text": "you're a new infrastructure engineer joining the team this is where you start and then from there we use the assumes",
    "start": "331630",
    "end": "337510"
  },
  {
    "text": "role API to actually assume roles in different accounts for those of you who are unfamiliar with IM roles they're",
    "start": "337510",
    "end": "343720"
  },
  {
    "text": "kind of like I am users but they're basically a decoupling from what you're able to do the policy versus the user",
    "start": "343720",
    "end": "349720"
  },
  {
    "text": "itself so we can have single IM users created in this ops accounts and then we can create roles in each of the other",
    "start": "349720",
    "end": "355630"
  },
  {
    "text": "accounts that they'll often too and at the time we just separated them into three separate accounts dev is really",
    "start": "355630",
    "end": "361900"
  },
  {
    "text": "our playground where you can do pretty much anything you want there no one's really relying on it for anything so if",
    "start": "361900",
    "end": "367540"
  },
  {
    "text": "you want to try it a new experiment you want to try out using dynamo you want to try it using this new service feel free",
    "start": "367540",
    "end": "372910"
  },
  {
    "text": "to go notes and you can actually play with it on top of AWS technology stage we keep a little bit more lockdown",
    "start": "372910",
    "end": "379240"
  },
  {
    "text": "because we want this to actually be a good staging environment so we don't want people to be trying their experiments all the time and then one",
    "start": "379240",
    "end": "385060"
  },
  {
    "text": "person is trying to actually preview whether the app looks good while another person has just broken everything and so",
    "start": "385060",
    "end": "390280"
  },
  {
    "text": "for that we try and make sure everything passes through CI there's a little bit more lockdown that occurs and then",
    "start": "390280",
    "end": "395440"
  },
  {
    "text": "finally prod as our production account and as weird noting that none of these accounts can't to each other they're all completely",
    "start": "395440",
    "end": "401230"
  },
  {
    "text": "isolated completely different the one thing they share is billing and I am",
    "start": "401230",
    "end": "406600"
  },
  {
    "text": "access and for how that actually works we can create these different IM roles",
    "start": "406600",
    "end": "411940"
  },
  {
    "text": "in each account where we basically grant access to users in another account so",
    "start": "411940",
    "end": "417370"
  },
  {
    "text": "you can you see here this is a just sample IM role that we have maybe you have like a read only one for accessing",
    "start": "417370",
    "end": "422770"
  },
  {
    "text": "day to day and then you have an admin one for actually making changes but you can grant access in our case to three",
    "start": "422770",
    "end": "429100"
  },
  {
    "text": "users in the ops account so this would be me Garrett and Amir and we're allowed",
    "start": "429100",
    "end": "435400"
  },
  {
    "text": "to assume the role which takes on this role in whatever permissions it has and then the other key thing here is that",
    "start": "435400",
    "end": "441190"
  },
  {
    "text": "you can ensure mfa access as well so you can say hey I'm not allowing anyone to assume this role without MFA and which",
    "start": "441190",
    "end": "449380"
  },
  {
    "text": "is incredibly nice because if I'm doing someone keys to this admin account or allowing them to make whatever provisioning they want I can be sure",
    "start": "449380",
    "end": "456730"
  },
  {
    "text": "that that's not being used by an attacker somewhere down the line even if we publish those keys accidentally how this works in practice through the",
    "start": "456730",
    "end": "462370"
  },
  {
    "text": "interface is that you then get this little menu up top saying hey I'm right now on the Alps admin role of the",
    "start": "462370",
    "end": "468340"
  },
  {
    "text": "segment account I can switch here between any of my stage proud or dev accounts pretty easily and this works",
    "start": "468340",
    "end": "474460"
  },
  {
    "text": "pretty well in practice it's the kind of thing where you can just switch between",
    "start": "474460",
    "end": "479650"
  },
  {
    "text": "different accounts and then use whatever you want and there are a few hiccups",
    "start": "479650",
    "end": "484690"
  },
  {
    "text": "with the UI where sometimes have you try and switch to something that doesn't exist in another account it'll right weirdly based upon the hash but for the",
    "start": "484690",
    "end": "490720"
  },
  {
    "text": "most part it's greatly simplified switching out so you don't have to log out and then log back in you might be",
    "start": "490720",
    "end": "495790"
  },
  {
    "text": "wondering how this actually works from the command line and for a while honestly was kind of a pain where we'd end up creating IM users and separate",
    "start": "495790",
    "end": "502150"
  },
  {
    "text": "accounts and like sort of defeat the purpose of what we were doing with these separate accounts and since then we've",
    "start": "502150",
    "end": "507550"
  },
  {
    "text": "actually adopted this tool built by the folks at 99designs called AWS bulb and what this does is it hooks into your AWS",
    "start": "507550",
    "end": "514360"
  },
  {
    "text": "config file so you can use the same sort of configure been using saying I want to offer this user I want to source from",
    "start": "514360",
    "end": "520990"
  },
  {
    "text": "this other accounts I want to switch between these different roles and and you can do that all from the command",
    "start": "520990",
    "end": "526540"
  },
  {
    "text": "line and what's even more badass is that it will off with the SDS system as well and then it will also request MF",
    "start": "526540",
    "end": "533529"
  },
  {
    "text": "a tokens right in your terminal so you can see here basically I've tried to exec on the Alps account I want to list",
    "start": "533529",
    "end": "539680"
  },
  {
    "text": "all these s three commands and the way this works under the hood is basically for any sub processes get spawned first",
    "start": "539680",
    "end": "546249"
  },
  {
    "text": "it'll off with SDS and then from there it will export those as environment variables if your access key and your",
    "start": "546249",
    "end": "552069"
  },
  {
    "text": "access secret um it'll ask you for your MFA token which is required remember to",
    "start": "552069",
    "end": "557829"
  },
  {
    "text": "do anything and then it will execute the command so that allows us to switch between these accounts really seamlessly",
    "start": "557829",
    "end": "563709"
  },
  {
    "text": "using the CLI with having to create a bunch of different configs or users and",
    "start": "563709",
    "end": "569470"
  },
  {
    "text": "those other accounts and lastly I touched upon this briefly but the very nice thing is that it allows you to do consolidated building as well and when",
    "start": "569470",
    "end": "576459"
  },
  {
    "text": "you get to AWS with any sort of large scale chances are you're going to want you in voicing for events so that you",
    "start": "576459",
    "end": "582850"
  },
  {
    "text": "don't have your credit card constantly being maxed out and there's a possibility that your account gets shut down which obviously a deal breaker for",
    "start": "582850",
    "end": "589360"
  },
  {
    "text": "any production service so this just really nicely allows you to enable invoicing for a single account which i",
    "start": "589360",
    "end": "594850"
  },
  {
    "text": "think you have to do through your account rep and and allow you to like break down cost per account as well so",
    "start": "594850",
    "end": "600910"
  },
  {
    "text": "in our case it's not such a huge deal yet since we only have three but for the case where we're trying to add up to n",
    "start": "600910",
    "end": "606069"
  },
  {
    "text": "accounts someday this will allow us to split by teams as well and and if you're using trusted advisor lets you see which",
    "start": "606069",
    "end": "612730"
  },
  {
    "text": "account sir well utilize and which ones are just sucking up your costs the next thing I want to talk about is how we actually run those services using docker",
    "start": "612730",
    "end": "619029"
  },
  {
    "text": "and containers and I'll start off with development and then gradually make our way how we make it to production so",
    "start": "619029",
    "end": "625180"
  },
  {
    "text": "containers they definitely dramatically simplify the way that we deploy code and I think the biggest thing that they've",
    "start": "625180",
    "end": "632110"
  },
  {
    "text": "done is basically democratized the process between the ops team and the development team where before if the",
    "start": "632110",
    "end": "638559"
  },
  {
    "text": "development team wanted to change a version of something that was running in production they have to bug the ops team and say hey can you guys update this can",
    "start": "638559",
    "end": "644379"
  },
  {
    "text": "I like run this with some sort of new thing now they basically established a queen API with containers and say ops",
    "start": "644379",
    "end": "650439"
  },
  {
    "text": "team says hey if you give me a container I will run it for you as long as it runs that's your responsibility but I'm",
    "start": "650439",
    "end": "655899"
  },
  {
    "text": "willing to run it on top of our infrastructure and the dev team says okay we'll create containers that run and we can change the runtime however we",
    "start": "655899",
    "end": "662589"
  },
  {
    "text": "see fit so that's massively allowed us to speed up our iteration of shipping because now",
    "start": "662589",
    "end": "669670"
  },
  {
    "text": "if we want to say upgrade a node version we don't have to figure out time for the ops team to upgrade across all machines",
    "start": "669670",
    "end": "675550"
  },
  {
    "text": "and then do kind of a hot reload and make sure everything looks good it's basically up to the dev team to upgrade",
    "start": "675550",
    "end": "681370"
  },
  {
    "text": "that in the particular container and then ship the new version and ecs as I'll talk about in a second helps us",
    "start": "681370",
    "end": "686590"
  },
  {
    "text": "guarantee safety there when we're actually upgrading um the other benefit is just we get good code isolation and",
    "start": "686590",
    "end": "693280"
  },
  {
    "text": "good code mirroring between different environments so we can ship the same docker containers and development we can",
    "start": "693280",
    "end": "700540"
  },
  {
    "text": "ship the same ones in staging and we can sip the same ones in production which actually gives us much more repeatable",
    "start": "700540",
    "end": "705940"
  },
  {
    "text": "builds basically we have a shared segment vm which itself is a docker container and we push updates to it and",
    "start": "705940",
    "end": "712480"
  },
  {
    "text": "it pulls them down automatically and we'll just make updates to that",
    "start": "712480",
    "end": "717970"
  },
  {
    "text": "container our use of dr is probably pretty vanilla honestly in terms of what we do for our dr files we just have a",
    "start": "717970",
    "end": "723850"
  },
  {
    "text": "common base image most of them are based off alpine for making like a really small image we copy whatever binaries in",
    "start": "723850",
    "end": "731620"
  },
  {
    "text": "the case of go or source code in the case of node into that container and then we give it an entry point with some",
    "start": "731620",
    "end": "737620"
  },
  {
    "text": "sort of configuration or command flags in all cases we do configuration through",
    "start": "737620",
    "end": "742660"
  },
  {
    "text": "environment variables or flags that are specified in terraform eventually I think we'll probably move to something",
    "start": "742660",
    "end": "748060"
  },
  {
    "text": "that's a little more file based or something vo like console or at CD but for now this works pretty well as being",
    "start": "748060",
    "end": "753550"
  },
  {
    "text": "like very audible so we can tell where things are coming from as well as being",
    "start": "753550",
    "end": "758830"
  },
  {
    "text": "very explicit the other piece for working in development as I said we can use the same containers in development",
    "start": "758830",
    "end": "764410"
  },
  {
    "text": "as we use in staging and production we make use of docker composed pretty heavily in development where we'll pull",
    "start": "764410",
    "end": "770530"
  },
  {
    "text": "down various images that we're building for different services at segment we've heavily embraced the micro service",
    "start": "770530",
    "end": "776230"
  },
  {
    "text": "approach where we have a bunch of individual services doing different things well and so each of those running",
    "start": "776230",
    "end": "781570"
  },
  {
    "text": "containers this is the running containers in production we might as well pull them down and just run them with different settings locally which is",
    "start": "781570",
    "end": "786640"
  },
  {
    "text": "what this script is doing and so basically each one of our services ships with a docker compose file which we can",
    "start": "786640",
    "end": "793270"
  },
  {
    "text": "use so you can either run your own services or you can run sort of the same setup that's running every or else that's at a high level kind of",
    "start": "793270",
    "end": "799240"
  },
  {
    "text": "how the pipeline works uh basically we have a repo which has a given service in",
    "start": "799240",
    "end": "804580"
  },
  {
    "text": "it we get push which pushes up to github if it's on master it'll actually trigger a build or if it's Paul requested which",
    "start": "804580",
    "end": "812080"
  },
  {
    "text": "will run through circle and run a bunch of tests and then if the tests pass and it's a tide release well then push it up",
    "start": "812080",
    "end": "817990"
  },
  {
    "text": "to docker hub um and then I'll get into shortly how we deploy that to ecs but it",
    "start": "817990",
    "end": "824710"
  },
  {
    "text": "sort of the long and the short of it is that we update via task definition and using a CLI tool or our slack which is",
    "start": "824710",
    "end": "833110"
  },
  {
    "text": "basically hooked up to the CLI tool it'll update with the ecs agent and then grab the new version of the TAS F and",
    "start": "833110",
    "end": "838990"
  },
  {
    "text": "then I'll pull it down from docker hub so actually running these things with ecs the kind of nice things that ecs",
    "start": "838990",
    "end": "844510"
  },
  {
    "text": "gives us one of the biggest ones is it handled zero downtime reloads for us you don't have to bake it into your code",
    "start": "844510",
    "end": "850000"
  },
  {
    "text": "anywhere basically when you're booting a new service what you can do is say hey",
    "start": "850000",
    "end": "855760"
  },
  {
    "text": "ecs I want to boot this new task definition I'll actually boot the new containers before removing the old ones",
    "start": "855760",
    "end": "861010"
  },
  {
    "text": "and that will remove the old ones that let the load balancer drain from connections to that instance you still",
    "start": "861010",
    "end": "866890"
  },
  {
    "text": "have to handle a few things yourself for instance if it's a worker or if it's something where you want the containers actually specifically close connections",
    "start": "866890",
    "end": "873430"
  },
  {
    "text": "before it exits but for the most part you don't really have to think about okay what if I reload this process was",
    "start": "873430",
    "end": "878710"
  },
  {
    "text": "it going to do because ecs handles that for you and moreover it makes sure a",
    "start": "878710",
    "end": "884020"
  },
  {
    "text": "particular instance is running or a version of your code is running which doesn't sound like a lot but we've had I want to say like two or three in-house",
    "start": "884020",
    "end": "890920"
  },
  {
    "text": "deployers at this point and you'd be surprised at how many times without any sort of consensus algorithm you end up with different versions of code running",
    "start": "890920",
    "end": "897190"
  },
  {
    "text": "at different times which is not good at all so ecs ensure is that okay all these",
    "start": "897190",
    "end": "903490"
  },
  {
    "text": "containers come to a consensus and no matter how many continuous deploys are going on maybe two different people are",
    "start": "903490",
    "end": "908680"
  },
  {
    "text": "deploying different things you're going to end up with the same version of code kind of no matter what a bigger reason we chose ecs over something like Cooper",
    "start": "908680",
    "end": "915910"
  },
  {
    "text": "Nettie's or nomads or fleets or any of the other schedulers out there is we",
    "start": "915910",
    "end": "921130"
  },
  {
    "text": "really like the ecs in or the AWS integration in particular you get free health checks with elb you get",
    "start": "921130",
    "end": "927910"
  },
  {
    "text": "CloudWatch metrics for free and you get nice schooling from the AWS a API which we use pretty heavily",
    "start": "927910",
    "end": "933959"
  },
  {
    "text": "everywhere else there's a lot of reasons for it that it just made it a very obvious choice for a shop that is really",
    "start": "933959",
    "end": "940410"
  },
  {
    "text": "heavily using AWS in the api's and and there are a few minor Gauchos around",
    "start": "940410",
    "end": "945930"
  },
  {
    "text": "ports and scheduling for instance you're trying to run everything on the same port it exposes it all on the instance so if you try and boot kind of new",
    "start": "945930",
    "end": "952680"
  },
  {
    "text": "containers there if you don't have extra capacity your scheduler is going to complain basically and definitely that",
    "start": "952680",
    "end": "957990"
  },
  {
    "text": "it can't add new containers but for the most part that's going to be resolved ecs claims that they're coming within",
    "start": "957990",
    "end": "964949"
  },
  {
    "text": "the next like three or four months so we feel pretty good about them actually patching that problem I wanted to give a",
    "start": "964949",
    "end": "972329"
  },
  {
    "text": "creep brief rundown of how we actually use ecs since different shops use ecs",
    "start": "972329",
    "end": "977430"
  },
  {
    "text": "differently and so at a high level we actually use route 53 to give each ELB a",
    "start": "977430",
    "end": "983449"
  },
  {
    "text": "service name so for instance if you're trying to connect to the all TLB that's at all segments local app app to segment",
    "start": "983449",
    "end": "990899"
  },
  {
    "text": "the local and genetics and genetic set segment doll local get the idea and and those are all internal names so they're",
    "start": "990899",
    "end": "997079"
  },
  {
    "text": "not accessible anywhere outside the Internet their internal eat all these two for the most part so it's how all of",
    "start": "997079",
    "end": "1002660"
  },
  {
    "text": "our services talk to each other and then et al B gets registered with a particular service so in our case ecs is",
    "start": "1002660",
    "end": "1008629"
  },
  {
    "text": "scheduling these different services across the diamond cluster it's running individual task definitions so let's say",
    "start": "1008629",
    "end": "1014179"
  },
  {
    "text": "it's running the app on servers one and two there and exon 3 and then they all service on service one if we need to",
    "start": "1014179",
    "end": "1019850"
  },
  {
    "text": "update the task definition it'll then run off on one of servers two and three give us zero downtime reloads and make",
    "start": "1019850",
    "end": "1026058"
  },
  {
    "text": "sure that we're automatically connecting to each elb why is this good well in particular we don't need any form of service discovery right and we can",
    "start": "1026059",
    "end": "1032899"
  },
  {
    "text": "basically just use DNS which has been working pretty well for the rest of the internet and then connect to all these",
    "start": "1032899",
    "end": "1038000"
  },
  {
    "text": "different services basically by their host name and that goes through the elb there are a few cases where this is has",
    "start": "1038000",
    "end": "1044659"
  },
  {
    "text": "a slight gotcha for instance say you want to connect to or something that creates a kind of multiple",
    "start": "1044659",
    "end": "1050720"
  },
  {
    "text": "instances for replication just having a single big service isn't going to cut it right you can't just say the same",
    "start": "1050720",
    "end": "1056630"
  },
  {
    "text": "hostname three times in a row so for that we're still kind of using a work in progress right now we use",
    "start": "1056630",
    "end": "1062700"
  },
  {
    "text": "individual host names for those instances as well which I'll get to in the terraform section but for the most",
    "start": "1062700",
    "end": "1068880"
  },
  {
    "text": "part it's worked out really well that means that we don't have to worry about uptime and downtime because ecs handles",
    "start": "1068880",
    "end": "1074790"
  },
  {
    "text": "the elb cycling for us and we get free metrics for every service which is huge",
    "start": "1074790",
    "end": "1080660"
  },
  {
    "text": "it just means that for any given service you don't have to worry about things like a request to hundreds 500 etc those",
    "start": "1080660",
    "end": "1086610"
  },
  {
    "text": "automatically get generated by cloud watch so the visibility is incredible um and speaking of visibility a lot of",
    "start": "1086610",
    "end": "1094230"
  },
  {
    "text": "folks have asked how do you separate different ecs clusters we've heard a bunch of different ways to do this some",
    "start": "1094230",
    "end": "1100440"
  },
  {
    "text": "people use like one giant cluster where they want to schedule everything some people have individual or clusters per service which is what we do and",
    "start": "1100440",
    "end": "1106890"
  },
  {
    "text": "basically for most things we keep individual clusters so we can actually get good insight into what the load is",
    "start": "1106890",
    "end": "1112830"
  },
  {
    "text": "and and we can more closely sort of form which instances they're using so for our",
    "start": "1112830",
    "end": "1119760"
  },
  {
    "text": "API and maybe we want to give those beefy instances maybe we want to give them large disks so that they're able to",
    "start": "1119760",
    "end": "1124770"
  },
  {
    "text": "actually buffer data in case something goes down for those integration workers which are you can see here kind of like",
    "start": "1124770",
    "end": "1131070"
  },
  {
    "text": "pegged in terms of CPU maybe we want to give those like a quicker CPU or more",
    "start": "1131070",
    "end": "1136590"
  },
  {
    "text": "compute optimized machine so it really helps us give a quick like high-level",
    "start": "1136590",
    "end": "1141720"
  },
  {
    "text": "overview of which instances and which services are acting up and then we have",
    "start": "1141720",
    "end": "1146760"
  },
  {
    "text": "a few sort of general default ones for stuff which is maybe not high load or we don't need as much visibility into that we kind of throw things for the rest of",
    "start": "1146760",
    "end": "1153660"
  },
  {
    "text": "the dev team talk about AWS accounts how we run containers how those actually get into production versus service and then",
    "start": "1153660",
    "end": "1159870"
  },
  {
    "text": "kind of the last piece year of actually running different services and provisioning our infrastructure is terraform and for those of you",
    "start": "1159870",
    "end": "1166380"
  },
  {
    "text": "unfamiliar with terraform terraform is kind of like cloud information on steroids it basically gives you a really",
    "start": "1166380",
    "end": "1172410"
  },
  {
    "text": "simple way to apply and then change infrastructure ramp production and and",
    "start": "1172410",
    "end": "1178740"
  },
  {
    "text": "I'd say one of the biggest benefits is actually that it calculates the diff for everything which I'll talk about in a second but basically if it doesn't have",
    "start": "1178740",
    "end": "1185550"
  },
  {
    "text": "to reprovision a low balance or pick the other instance because you're changing some sort of setting it won't it'll just",
    "start": "1185550",
    "end": "1191010"
  },
  {
    "text": "updated so that means that you guys should get really really quick iteration cycles for most things that don't",
    "start": "1191010",
    "end": "1196080"
  },
  {
    "text": "to be changed but where it does need to be changed it'll do the right thing and then finally it also has multi provider",
    "start": "1196080",
    "end": "1202350"
  },
  {
    "text": "support which I'll talk about once we get the data dog section as well honestly we haven't used this too",
    "start": "1202350",
    "end": "1208140"
  },
  {
    "text": "heavily but if you wanted to plug in to digital ocean line note any of these other tools there are a lot of modules",
    "start": "1208140",
    "end": "1213870"
  },
  {
    "text": "both on top of terraform which make changing that underlying infrastructure easy at a high level for those of you",
    "start": "1213870",
    "end": "1218880"
  },
  {
    "text": "haven't used terraform the way it works is basically a dev decides to make their changes to this configuration file",
    "start": "1218880",
    "end": "1224510"
  },
  {
    "text": "saying how they want to change the infrastructure then they run a terraform plan which does two things first it",
    "start": "1224510",
    "end": "1230700"
  },
  {
    "text": "refreshes from the state whether it's either local or remote and the state file is just sort of a big output you",
    "start": "1230700",
    "end": "1235950"
  },
  {
    "text": "can think of it almost like a cloud formation file describing the current state of the world and then it will",
    "start": "1235950",
    "end": "1241139"
  },
  {
    "text": "calculate the diff and like I said before if there's things like tags or instance name anything which can change",
    "start": "1241139",
    "end": "1247350"
  },
  {
    "text": "without needing to reboot the instance it will just do that and and then say",
    "start": "1247350",
    "end": "1252539"
  },
  {
    "text": "hey I don't need to change this instance around at all i'm just going to use my AP is in order to change it there if it",
    "start": "1252539",
    "end": "1258149"
  },
  {
    "text": "does need to reprovision the insurance instance it'll actually tell you hey i'm going to destroy this piece of infrastructure say for a security group",
    "start": "1258149",
    "end": "1264779"
  },
  {
    "text": "or new availability zone or something that ID and then boot a new one and then finally if you're the dead of you plan",
    "start": "1264779",
    "end": "1270360"
  },
  {
    "text": "the changes everything looks good you're going to say hey I'm going to apply everything and actually push it to production what this actually looks like",
    "start": "1270360",
    "end": "1276539"
  },
  {
    "text": "this might be for those of you unfamiliar with it a little hard to read uh it's actually this hachey for",
    "start": "1276539",
    "end": "1281610"
  },
  {
    "text": "configuration language version by the hachey corp guys which is sort of similar to a mix of JSON and yeah mille",
    "start": "1281610",
    "end": "1288360"
  },
  {
    "text": "it's nice because it provides comments but is a little more explicit than yamo and basically what this is doing here is",
    "start": "1288360",
    "end": "1294870"
  },
  {
    "text": "I'm just provisioning a a WS instance which I've turned my best an instant bastian instance and then giving it an",
    "start": "1294870",
    "end": "1301110"
  },
  {
    "text": "ami an instance type and then a few variables for things like the subnet ID and security groups and the nice thing",
    "start": "1301110",
    "end": "1307380"
  },
  {
    "text": "is that terraform with the AWS API is provide pretty sane defaults so you can",
    "start": "1307380",
    "end": "1313590"
  },
  {
    "text": "actually provision these instances with pretty minimal amount of config here is actually more than is like the bare",
    "start": "1313590",
    "end": "1319769"
  },
  {
    "text": "minimum necessary and it's nice because it actually makes it so your user doesn't have to care about most of the",
    "start": "1319769",
    "end": "1325620"
  },
  {
    "text": "things that are more advanced unless they really want to just in terms of how this looks in practice we execute our plan their refreshes",
    "start": "1325620",
    "end": "1332340"
  },
  {
    "text": "against the state which is either local or remote and then they'll say hey in this case there's no changes but if you",
    "start": "1332340",
    "end": "1338549"
  },
  {
    "text": "make some changes it'll provide a little diff similar to what git diff would do saying this is the changes I'm about to",
    "start": "1338549",
    "end": "1344370"
  },
  {
    "text": "make are you sure you're okay with making them and then you'd apply kind of the biggest learnings we had with terraform since honestly it's pretty",
    "start": "1344370",
    "end": "1351120"
  },
  {
    "text": "tricky to get started with and it is insanely flexible so there's a lot of",
    "start": "1351120",
    "end": "1358049"
  },
  {
    "text": "places where you can shoot yourself in the foot the biggest learnings that we've had are creating different modules",
    "start": "1358049",
    "end": "1363299"
  },
  {
    "text": "for each service with good defaults and modules are just a piece of terraform which could combine multiple different",
    "start": "1363299",
    "end": "1368879"
  },
  {
    "text": "what they call resources and so you could create a module say for your entire infrastructure if you want to",
    "start": "1368879",
    "end": "1374129"
  },
  {
    "text": "boot new instances of that infrastructure you could create ones for services for e lbs that sort of thing and the second big one is referencing",
    "start": "1374129",
    "end": "1381960"
  },
  {
    "text": "remote state where we can initially we kept all of our state in this git repo that would then people would make their",
    "start": "1381960",
    "end": "1388320"
  },
  {
    "text": "change and then they push up the repos other people other people would pull it down plan make changes push it back up",
    "start": "1388320",
    "end": "1394399"
  },
  {
    "text": "as you can guess with the dev team we're a small dev team of like 13 people but once you get to a dev team of more than",
    "start": "1394399",
    "end": "1400710"
  },
  {
    "text": "say three people start making changes at the same time and actually conflicting so you definitely don't want to have",
    "start": "1400710",
    "end": "1408240"
  },
  {
    "text": "conflicts in your state for your production infrastructure so what we",
    "start": "1408240",
    "end": "1413250"
  },
  {
    "text": "ended up doing is started referencing this remote state which is basically kept on s3 and it's basically atomic",
    "start": "1413250",
    "end": "1418919"
  },
  {
    "text": "where if you make a change you plan against that version of that state and then if you decide to apply if someone",
    "start": "1418919",
    "end": "1425490"
  },
  {
    "text": "else has made a change in between that point it'll actually reject the change um and the other two goals with",
    "start": "1425490",
    "end": "1432570"
  },
  {
    "text": "terraform we wanted to make it as little work as possible to create a service I always say that microservices only work",
    "start": "1432570",
    "end": "1438990"
  },
  {
    "text": "if it's actually easy to create them otherwise you're way too tempted to shoehorn whatever new functionality is",
    "start": "1438990",
    "end": "1444779"
  },
  {
    "text": "into an existing service and it just won't work and then also make it safe to update which hccs actually helps a lot",
    "start": "1444779",
    "end": "1451889"
  },
  {
    "text": "with going back to this diagram here alf referenced for what our services look like how do those actually look in",
    "start": "1451889",
    "end": "1459179"
  },
  {
    "text": "terraform because it's all good to say oh we use terraform for all of these things but where the rubber meets the road is a lot",
    "start": "1459179",
    "end": "1466320"
  },
  {
    "text": "more tricky so this is what a service looks like for any developer who's trying to create a new one and in this",
    "start": "1466320",
    "end": "1473070"
  },
  {
    "text": "case I just pulled this analytics Academy service off of our infrastructure basically analytics",
    "start": "1473070",
    "end": "1480090"
  },
  {
    "text": "Academy is just a static site so this one is fairly simple but first you'll",
    "start": "1480090",
    "end": "1485730"
  },
  {
    "text": "notice here it has this source for the module and this is where it's pulling most of the configuration this is where",
    "start": "1485730",
    "end": "1491850"
  },
  {
    "text": "the like sort of module source code lives and the great thing about these is that it can either be folders or they",
    "start": "1491850",
    "end": "1498270"
  },
  {
    "text": "can be get repos just reference via github so they're a bunch that hachey corpus put out there around best ways of",
    "start": "1498270",
    "end": "1505560"
  },
  {
    "text": "booting things like console eventually we hope to open source these so we could then just put github com / tagme io",
    "start": "1505560",
    "end": "1511740"
  },
  {
    "text": "stack module service and reference them from anywhere but ultimately they're",
    "start": "1511740",
    "end": "1519810"
  },
  {
    "text": "like super modular so that's something that we really like about it Tara for modules and then we have to give the",
    "start": "1519810",
    "end": "1525690"
  },
  {
    "text": "service a name which gets propagated to a bunch of other places that we use based upon convention we give it the",
    "start": "1525690",
    "end": "1530940"
  },
  {
    "text": "image that we're actually pulling from docker hub and so this is namespace of the segment namespace eventually I think",
    "start": "1530940",
    "end": "1536370"
  },
  {
    "text": "we'll use move to the ecs container service or amazon container registry",
    "start": "1536370",
    "end": "1541380"
  },
  {
    "text": "just because has a little bit better security guarantees than docker hub but for now we're using this and then",
    "start": "1541380",
    "end": "1548100"
  },
  {
    "text": "whatever version we're on a run and I mentioned before sort of this idea of remote state and you can actually have",
    "start": "1548100",
    "end": "1554820"
  },
  {
    "text": "multiple types of remote state that you're referencing and so here we've got this remote state which we're using as kind of a read-only state so we're",
    "start": "1554820",
    "end": "1561600"
  },
  {
    "text": "keeping this idea of core infrastructure different from the services that we're actually using so we might have this",
    "start": "1561600",
    "end": "1568200"
  },
  {
    "text": "site cluster which other devs can use and run stuff on top of but they can't touch it they can't actually upgrade the",
    "start": "1568200",
    "end": "1573930"
  },
  {
    "text": "number of instances without talking to someone on the ops team and then things like memory and CPU which we give same defaults for it but allow you to",
    "start": "1573930",
    "end": "1579990"
  },
  {
    "text": "overwrite if you want to say if you're running something small on stage but then something big elsewhere and finally",
    "start": "1579990",
    "end": "1585330"
  },
  {
    "text": "the environment whether it's dev stage or production if you're diving down into this basically we create this task",
    "start": "1585330",
    "end": "1590910"
  },
  {
    "text": "definition which again propagates these variables from the upper layer along with other variables that we provide",
    "start": "1590910",
    "end": "1597120"
  },
  {
    "text": "provide saying defaults for we create the lb and the route 53 name associate",
    "start": "1597120",
    "end": "1602220"
  },
  {
    "text": "with each of these which we also wrap in our own modules basically setting a lot of these common things from the remote",
    "start": "1602220",
    "end": "1607980"
  },
  {
    "text": "state but then passing along where we need to where things are configurable finally we pull it all together with the service and so you can see here this is",
    "start": "1607980",
    "end": "1614430"
  },
  {
    "text": "the ecs service and it combines this task that we created with inside the module as well as the elb so those",
    "start": "1614430",
    "end": "1621150"
  },
  {
    "text": "things together working in concert actually create our terraform service here and so the biggest learnings definitely use remote state and Hoshi",
    "start": "1621150",
    "end": "1628110"
  },
  {
    "text": "Corp offers their own version of this called Atlas where it's actually pretty cool it allow you to plan changes and",
    "start": "1628110",
    "end": "1634140"
  },
  {
    "text": "then basically someone has to sign off on them and check off and then they finally get merged and applied so that's",
    "start": "1634140",
    "end": "1639570"
  },
  {
    "text": "sort of a safety bucket against screwing up your infrastructure and we're using s3 for the moment which provides similar",
    "start": "1639570",
    "end": "1646020"
  },
  {
    "text": "sort of guarantees but not quite as good or visual and definitely use modules for different environments before we had",
    "start": "1646020",
    "end": "1652440"
  },
  {
    "text": "basically two big folders one for production and one for stage with all of our custom configuration and of course",
    "start": "1652440",
    "end": "1658620"
  },
  {
    "text": "it meant that stage quickly became out of sync with production so we weren't actually testing things in stage so if",
    "start": "1658620",
    "end": "1664890"
  },
  {
    "text": "you use modules then you should be able to reuse them between those two environments and hopefully just eventually boot up an entirely new",
    "start": "1664890",
    "end": "1670290"
  },
  {
    "text": "environment you want to use defaults liberally for sure and don't require",
    "start": "1670290",
    "end": "1676380"
  },
  {
    "text": "variables where you don't need them because then the user is going to have to learn this entire API and as you",
    "start": "1676380",
    "end": "1682290"
  },
  {
    "text": "could see from those previous slides the hachey corp configuration language it's like not the most I friendly thing so",
    "start": "1682290",
    "end": "1689670"
  },
  {
    "text": "you're going to want to try and save on as much of those as possible and then create a read-only State for remote",
    "start": "1689670",
    "end": "1695130"
  },
  {
    "text": "infrastructure and and kind of the last major learning that we had was actually you want to output a plan that's a",
    "start": "1695130",
    "end": "1701220"
  },
  {
    "text": "binary file when you're running plan you can decide whether you want to make changes directly to the state file that",
    "start": "1701220",
    "end": "1707070"
  },
  {
    "text": "you have or whether you want to output a by an area that then you run and the binary actually ends up being much",
    "start": "1707070",
    "end": "1712770"
  },
  {
    "text": "better because it actually checks against which version you're running now in which version the remote state has so",
    "start": "1712770",
    "end": "1718260"
  },
  {
    "text": "you can ensure that no one else made changes between then and now we may I'm not paid by dat adult advertise but it's",
    "start": "1718260",
    "end": "1726750"
  },
  {
    "text": "honestly the best monitoring tool we found and one of the best things opted all year so if you're not using it",
    "start": "1726750",
    "end": "1732580"
  },
  {
    "text": "now would highly highly highly recommend that you give it a shot and there are a couple really good things about it one",
    "start": "1732580",
    "end": "1738610"
  },
  {
    "text": "of them is that the API allows you to script dashboards and alerts which is something that I didn't really realize the full value of until we actually",
    "start": "1738610",
    "end": "1744700"
  },
  {
    "text": "started dealing with these at scale and they give you free metrics and reporting",
    "start": "1744700",
    "end": "1749850"
  },
  {
    "text": "along with our toolkit that we've added so using that you kind of get a lot of stuff out of the box for free which is",
    "start": "1749850",
    "end": "1755770"
  },
  {
    "text": "very convenient for the rest of the dev team um and they have excellent integrations for AWS along with Redis",
    "start": "1755770",
    "end": "1762130"
  },
  {
    "text": " basically console anything that you care to run they'll give you dashboards out to the box that are able",
    "start": "1762130",
    "end": "1768730"
  },
  {
    "text": "to customize as well and so all of our base am eyes provision with this data",
    "start": "1768730",
    "end": "1774220"
  },
  {
    "text": "dog agent which is built into docker and so it's able to run as a container it's able to grab stats from all the rest of",
    "start": "1774220",
    "end": "1780310"
  },
  {
    "text": "your containers and it's able to pull instances from the machine or metrics from the machine as far as the API is",
    "start": "1780310",
    "end": "1786850"
  },
  {
    "text": "concerned this was something that I hadn't really seen the full value of until we had these metrics it's a little",
    "start": "1786850",
    "end": "1792520"
  },
  {
    "text": "hard to see here but since we're sending data to these 150 different integrations we have a different queue for each one",
    "start": "1792520",
    "end": "1798550"
  },
  {
    "text": "and unfortunately n SQ doesn't allow you to tag these q's instead they say hey",
    "start": "1798550",
    "end": "1805000"
  },
  {
    "text": "we're just going to send along like a given name for each metric so we have the option to buy therefore king n SQ",
    "start": "1805000",
    "end": "1810070"
  },
  {
    "text": "which didn't sound too appealing or having our own sort of stats d rewriter so that this could show up well in data",
    "start": "1810070",
    "end": "1815890"
  },
  {
    "text": "dog instead we said hey we'll just script creating these 150 different dashboards in data dog took like a day",
    "start": "1815890",
    "end": "1823990"
  },
  {
    "text": "with a Python script and then we're ready to go and so this is kind of what it looks like and we can always just",
    "start": "1823990",
    "end": "1829630"
  },
  {
    "text": "recreate this dashboard wherever we want from our custom metadata and I'll actually get to sort of the holy grail",
    "start": "1829630",
    "end": "1836020"
  },
  {
    "text": "of this whole infrastructure a learning idea in a psych but that also relies on the API the other great thing is that we",
    "start": "1836020",
    "end": "1842140"
  },
  {
    "text": "actually get free metrics for a lot of different services and metrics are free",
    "start": "1842140",
    "end": "1848020"
  },
  {
    "text": "kind of two senses one is that any stats d stats you're recording the transmitted over UDP super cheap i grated on the",
    "start": "1848020",
    "end": "1854890"
  },
  {
    "text": "instance basically we tell our does like use metrics everywhere like if there's ever a case where it's actually slowing",
    "start": "1854890",
    "end": "1861310"
  },
  {
    "text": "down your program execution then you can sample which is also the SATs d and so for the most part",
    "start": "1861310",
    "end": "1866530"
  },
  {
    "text": "they're just totally free and totally super cheap so use them because they actually give us visibility into what's",
    "start": "1866530",
    "end": "1872470"
  },
  {
    "text": "going on the second here is that data dog also like I said plugs into a bunch",
    "start": "1872470",
    "end": "1878260"
  },
  {
    "text": "of AWS cloud watch metrics so you can see for a given a lb how many the",
    "start": "1878260",
    "end": "1883510"
  },
  {
    "text": "request latency five hundreds to hundreds for hundreds whether there's any spillover or back in connection",
    "start": "1883510",
    "end": "1889900"
  },
  {
    "text": "errors that are happening and allow you to learn on those and like I said we have custom kits for each of our",
    "start": "1889900",
    "end": "1895990"
  },
  {
    "text": "services that charge things like the number of go routines if you're running and go using p prof if you're using node",
    "start": "1895990",
    "end": "1902170"
  },
  {
    "text": "it will actually check whether the event loop is blocked it'll check stack size heap that sort of thing if you're",
    "start": "1902170",
    "end": "1908110"
  },
  {
    "text": "running a lot of infrastructure they actually have this sort of host level map review where you can basically",
    "start": "1908110",
    "end": "1914110"
  },
  {
    "text": "filter by anything that's instance tagged whatsoever so a lot of time we'll look at a given group of clusters and",
    "start": "1914110",
    "end": "1920890"
  },
  {
    "text": "figure out where the instances are pegged you can split by availability zone and here these are colored by cpu",
    "start": "1920890",
    "end": "1926920"
  },
  {
    "text": "so you can drill in to say if there's an instance one instance that's just like spiking and CPU you can really drill in",
    "start": "1926920",
    "end": "1932590"
  },
  {
    "text": "and figure out which one that is visually really easily and in a way that",
    "start": "1932590",
    "end": "1937810"
  },
  {
    "text": "most other tools I've seen don't allow you to do and this thing is super responsive for our several hundred",
    "start": "1937810",
    "end": "1943000"
  },
  {
    "text": "instances and it'll be interesting to see what happens when we get to thousands of instances that sort of",
    "start": "1943000",
    "end": "1948160"
  },
  {
    "text": "thing finally what as referring to is the Holy Grail remember before we provide it or we provisioned all of our",
    "start": "1948160",
    "end": "1953620"
  },
  {
    "text": "infrastructure using terraform and but we have these alerts that kind of live over in the separate area that aren't",
    "start": "1953620",
    "end": "1959680"
  },
  {
    "text": "connected to anything what we'd like to be able to do is actually script so that our alerts and our metrics are",
    "start": "1959680",
    "end": "1966870"
  },
  {
    "text": "monitoring our actual production infrastructure and they're referencing one another and how can we do that well",
    "start": "1966870",
    "end": "1974230"
  },
  {
    "text": "typically be really hard to do except for the fact that data or terraform recently added a data dog provider so",
    "start": "1974230",
    "end": "1980650"
  },
  {
    "text": "that you can actually specify and say hey I want to create this dashboard based upon service X and reference that",
    "start": "1980650",
    "end": "1986530"
  },
  {
    "text": "service directly just based upon what you've provisioned your production infrastructure to be so this is an early",
    "start": "1986530",
    "end": "1992470"
  },
  {
    "text": "version here of the code that my teammate Vince coated up and he pull requested the tear from repo and then after some changes i",
    "start": "1992470",
    "end": "1999200"
  },
  {
    "text": "think monday they actually merged it in which is really cool so soon will",
    "start": "1999200",
    "end": "2004330"
  },
  {
    "text": "basically be able to add this to our service module and say hey whenever we create a new service oh also create a",
    "start": "2004330",
    "end": "2010509"
  },
  {
    "text": "dashboard for that service with the elb metrics and the elb latency and oh also create alerts for them so that basically",
    "start": "2010509",
    "end": "2017110"
  },
  {
    "text": "out of the box if you're a developer you don't have to think about any of those things at all because they often often get missed so this is something that you",
    "start": "2017110",
    "end": "2025330"
  },
  {
    "text": "can only take advantage of via data API and it's something that terraform makes it really easy to manage the existing",
    "start": "2025330",
    "end": "2031740"
  },
  {
    "text": "state of your metrics or alerts so we'll be using this pretty heavily going on to make it really easy it's create",
    "start": "2031740",
    "end": "2038529"
  },
  {
    "text": "dashboards kind of off the fly without doing any work finally when all the time came to move we're ready to move from",
    "start": "2038529",
    "end": "2045429"
  },
  {
    "text": "this janky old proud account to this new thing which had all of our instances all of our configuration it was all set up",
    "start": "2045429",
    "end": "2051669"
  },
  {
    "text": "um and that process actually went very smoothly because we sort of got over a",
    "start": "2051669",
    "end": "2059290"
  },
  {
    "text": "few gotchas in the first place and the first thing we did was actually peer connections between our two be pcs and",
    "start": "2059290",
    "end": "2065589"
  },
  {
    "text": "make sure that they could talk to each other so we booted up all the services in our new production account but they're still talking to databases in",
    "start": "2065589",
    "end": "2072099"
  },
  {
    "text": "the old one now we're and some that were replicating in the new one to the old one just so we could switch kind of",
    "start": "2072099",
    "end": "2078310"
  },
  {
    "text": "seamlessly and one thing you want to make sure if you're ever changing out this sort of infrastructure is to",
    "start": "2078310",
    "end": "2083679"
  },
  {
    "text": "actually pre-warm lbs which is something that I hadn't known about it until about two years ago accidentally deleted a",
    "start": "2083679",
    "end": "2090190"
  },
  {
    "text": "production lb that was serving a lot of traffic and our entire API went down for",
    "start": "2090190",
    "end": "2096368"
  },
  {
    "text": "about 40 minutes while instances like booted up fortunately that hasn't",
    "start": "2096369",
    "end": "2101500"
  },
  {
    "text": "happened like ever since then because of all these safety checks that we put in place but it's a kind of thing to be",
    "start": "2101500",
    "end": "2106990"
  },
  {
    "text": "really cognizant uh if you're dealing with something where you're dealing with thousands of requests a second you're",
    "start": "2106990",
    "end": "2112180"
  },
  {
    "text": "going to have to ask for that you'll be to be warmed or you're going to have to warm it yourself with test traffic and",
    "start": "2112180",
    "end": "2118140"
  },
  {
    "text": "which we did actually a combination of those those two things we asked AWS to pre-warm it which was great they took",
    "start": "2118140",
    "end": "2124540"
  },
  {
    "text": "care of that but then we also gradually gradually ramp traffic and make sure that nothing was going wrong with our API",
    "start": "2124540",
    "end": "2130140"
  },
  {
    "text": "and just so we could see and verify for ourselves that all the traffic was being ramped properly this is pretty much",
    "start": "2130140",
    "end": "2136020"
  },
  {
    "text": "everything that we've done up in the past like nine months until now and kind",
    "start": "2136020",
    "end": "2142230"
  },
  {
    "text": "of what we have planned further is actually planning and applying vse I so if I'm a developer we don't need to kind",
    "start": "2142230",
    "end": "2148470"
  },
  {
    "text": "of keys everywhere there's something where we'll plan submit a pull request if the pull request looks good it'll",
    "start": "2148470",
    "end": "2153690"
  },
  {
    "text": "actually output that planned s3 and then we have some sort of admin who's looking over the plans and figuring out okay does everything look good and then they",
    "start": "2153690",
    "end": "2160290"
  },
  {
    "text": "just apply them and say they're good and secondly we further want to further d",
    "start": "2160290",
    "end": "2165630"
  },
  {
    "text": "couple our services from our core infrastructure on something like convox or similar where we're able to say hey I",
    "start": "2165630",
    "end": "2172260"
  },
  {
    "text": "want to basically change around the service configuration without having to touch all this kind of core",
    "start": "2172260",
    "end": "2177510"
  },
  {
    "text": "infrastructure we might continue using terraform for that and where we say anyone can access the service repo but",
    "start": "2177510",
    "end": "2184290"
  },
  {
    "text": "if you want to touch core infrastructure that's something that's remote read-only state and like I said we want to add",
    "start": "2184290",
    "end": "2190110"
  },
  {
    "text": "data dog monitoring to those service definitions so that if people want to boot new services they don't have to think about that because it often gets",
    "start": "2190110",
    "end": "2196350"
  },
  {
    "text": "forgotten and we want to mirror our route 53 entries that's kind of the one last piece that we haven't actually",
    "start": "2196350",
    "end": "2201690"
  },
  {
    "text": "moved over yet and then the ability to create just n accounts right now we have",
    "start": "2201690",
    "end": "2207690"
  },
  {
    "text": "three but it'd be really great if we go to spin up new environments all the time and script that totally and then not",
    "start": "2207690",
    "end": "2214080"
  },
  {
    "text": "have to worry about any individual account",
    "start": "2214080",
    "end": "2218300"
  }
]