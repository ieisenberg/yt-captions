[
  {
    "text": "Hello",
    "start": "0",
    "end": "733"
  },
  {
    "text": "and welcome back",
    "start": "733",
    "end": "1933"
  },
  {
    "text": "to the Apache Flink Learning series.",
    "start": "1933",
    "end": "4533"
  },
  {
    "text": "In today's talk,",
    "start": "4533",
    "end": "5500"
  },
  {
    "text": "we'll be covering an overview",
    "start": "5500",
    "end": "7233"
  },
  {
    "text": "of how we can write and create",
    "start": "7233",
    "end": "9533"
  },
  {
    "text": "Apache Flink applications.",
    "start": "9533",
    "end": "11400"
  },
  {
    "text": "So let's get started.",
    "start": "11400",
    "end": "14400"
  },
  {
    "text": "Apache Flink has different",
    "start": "19100",
    "end": "20600"
  },
  {
    "text": "programing APIs",
    "start": "20600",
    "end": "22100"
  },
  {
    "text": "available to write",
    "start": "22100",
    "end": "23400"
  },
  {
    "text": "and program streaming applications.",
    "start": "23400",
    "end": "26366"
  },
  {
    "text": "Each APIs offer",
    "start": "26366",
    "end": "27932"
  },
  {
    "text": "different levels of abstraction",
    "start": "27933",
    "end": "30066"
  },
  {
    "text": "and different levels of complexity",
    "start": "30066",
    "end": "32000"
  },
  {
    "text": "and flexibility.",
    "start": "32000",
    "end": "34166"
  },
  {
    "text": "At the highest level of abstraction,",
    "start": "34166",
    "end": "36600"
  },
  {
    "text": "we have Flink SQL.",
    "start": "36600",
    "end": "39300"
  },
  {
    "text": "This is a declarative language",
    "start": "39300",
    "end": "41433"
  },
  {
    "text": "that most are very familiar with.",
    "start": "41433",
    "end": "43600"
  },
  {
    "text": "Swimming",
    "start": "43600",
    "end": "44100"
  },
  {
    "text": "data is abstracted",
    "start": "44100",
    "end": "45466"
  },
  {
    "text": "as continuously changing tables.",
    "start": "45466",
    "end": "48466"
  },
  {
    "text": "With Flink SQL,",
    "start": "48766",
    "end": "50433"
  },
  {
    "text": "you can perform",
    "start": "50433",
    "end": "51300"
  },
  {
    "text": "a standard transformations",
    "start": "51300",
    "end": "53133"
  },
  {
    "text": "and perform",
    "start": "53133",
    "end": "53800"
  },
  {
    "text": "joins and aggregations through goodbyes.",
    "start": "53800",
    "end": "56800"
  },
  {
    "text": "It is the easiest API to start with,",
    "start": "57133",
    "end": "60133"
  },
  {
    "text": "but it is also the least flexible",
    "start": "60333",
    "end": "63333"
  },
  {
    "text": "because the SQL abstraction.",
    "start": "63800",
    "end": "66465"
  },
  {
    "text": "It's so different from the actual way",
    "start": "66466",
    "end": "68700"
  },
  {
    "text": "that streaming data is generated",
    "start": "68700",
    "end": "70799"
  },
  {
    "text": "and processed,",
    "start": "70800",
    "end": "72100"
  },
  {
    "text": "to which we don't have control",
    "start": "72100",
    "end": "73933"
  },
  {
    "text": "on how the logical graph",
    "start": "73933",
    "end": "75533"
  },
  {
    "text": "is going to be built.",
    "start": "75533",
    "end": "77100"
  },
  {
    "text": "So we might hit some",
    "start": "77100",
    "end": "78333"
  },
  {
    "text": "challenges along the way.",
    "start": "78333",
    "end": "79733"
  },
  {
    "text": "Next we have the table API.",
    "start": "81566",
    "end": "84566"
  },
  {
    "text": "There isn't much difference between SQL",
    "start": "84700",
    "end": "87000"
  },
  {
    "text": "and the table API",
    "start": "87000",
    "end": "88600"
  },
  {
    "text": "as they both make use",
    "start": "88600",
    "end": "89900"
  },
  {
    "text": "of the same abstraction of tables.",
    "start": "89900",
    "end": "92900"
  },
  {
    "text": "However,",
    "start": "92900",
    "end": "93966"
  },
  {
    "text": "the table API is a programmatic API",
    "start": "93966",
    "end": "96966"
  },
  {
    "text": "that directly integrates",
    "start": "97566",
    "end": "99466"
  },
  {
    "text": "with Java",
    "start": "99466",
    "end": "100200"
  },
  {
    "text": "and Python code,",
    "start": "100200",
    "end": "101766"
  },
  {
    "text": "allowing you to work with the data",
    "start": "101766",
    "end": "104066"
  },
  {
    "text": "in a way",
    "start": "104066",
    "end": "104566"
  },
  {
    "text": "that is more coupled",
    "start": "104566",
    "end": "105566"
  },
  {
    "text": "with the programing language",
    "start": "105566",
    "end": "107066"
  },
  {
    "text": "of your choosing,",
    "start": "107066",
    "end": "108466"
  },
  {
    "text": "where you can still use",
    "start": "108466",
    "end": "109600"
  },
  {
    "text": "joins, group",
    "start": "109600",
    "end": "110600"
  },
  {
    "text": "bys, filters,",
    "start": "110600",
    "end": "111600"
  },
  {
    "text": "among other transformations.",
    "start": "111600",
    "end": "114600"
  },
  {
    "text": "It may be that these",
    "start": "115133",
    "end": "116400"
  },
  {
    "text": "levels of abstraction",
    "start": "116400",
    "end": "117833"
  },
  {
    "text": "are too simple for your streaming",
    "start": "117833",
    "end": "119700"
  },
  {
    "text": "processing logic,",
    "start": "119700",
    "end": "121333"
  },
  {
    "text": "in which",
    "start": "121333",
    "end": "122133"
  },
  {
    "text": "you don't need to work",
    "start": "122133",
    "end": "123300"
  },
  {
    "text": "with the events as a table,",
    "start": "123300",
    "end": "124966"
  },
  {
    "text": "but actually",
    "start": "124966",
    "end": "125866"
  },
  {
    "text": "as a stream of continuous records.",
    "start": "125866",
    "end": "128866"
  },
  {
    "text": "Here is where we have",
    "start": "129766",
    "end": "131065"
  },
  {
    "text": "the data stream API,",
    "start": "131066",
    "end": "133500"
  },
  {
    "text": "in which you work with streams of events",
    "start": "133500",
    "end": "136500"
  },
  {
    "text": "where you can perform",
    "start": "136800",
    "end": "137833"
  },
  {
    "text": "transformations, aggregations, group bys.",
    "start": "137833",
    "end": "140833"
  },
  {
    "text": "The data stream API maps events 1 to 1",
    "start": "141566",
    "end": "144866"
  },
  {
    "text": "with actually",
    "start": "145100",
    "end": "146066"
  },
  {
    "text": "how Flink receives and processes",
    "start": "146066",
    "end": "148599"
  },
  {
    "text": "the data.",
    "start": "148600",
    "end": "149100"
  },
  {
    "text": "The code you write",
    "start": "150233",
    "end": "151633"
  },
  {
    "text": "defines the operator, the logical graph,",
    "start": "151633",
    "end": "154633"
  },
  {
    "text": "and the way the data flows across them.",
    "start": "154833",
    "end": "157833"
  },
  {
    "text": "The data Stream API still offers",
    "start": "158533",
    "end": "160666"
  },
  {
    "text": "some powerful constructions",
    "start": "160666",
    "end": "162366"
  },
  {
    "text": "and abstractions,",
    "start": "162366",
    "end": "163966"
  },
  {
    "text": "like different types of windowing",
    "start": "163966",
    "end": "165900"
  },
  {
    "text": "and first class",
    "start": "165900",
    "end": "167000"
  },
  {
    "text": "support for event time semantics,",
    "start": "167000",
    "end": "170000"
  },
  {
    "text": "and you can as well use its native",
    "start": "170233",
    "end": "172333"
  },
  {
    "text": "transformation methods",
    "start": "172333",
    "end": "174000"
  },
  {
    "text": "to build your own processing logic.",
    "start": "174000",
    "end": "177000"
  },
  {
    "text": "But if we want to go deeper,",
    "start": "177900",
    "end": "180299"
  },
  {
    "text": "and the data stream API",
    "start": "180300",
    "end": "181866"
  },
  {
    "text": "is not sufficient to tackle",
    "start": "181866",
    "end": "183900"
  },
  {
    "text": "the complexity of your use case,",
    "start": "183900",
    "end": "186433"
  },
  {
    "text": "you can go as deep at Flink internals",
    "start": "186433",
    "end": "189433"
  },
  {
    "text": "with the process function.",
    "start": "189500",
    "end": "192500"
  },
  {
    "text": "The process function gives you the finer",
    "start": "192566",
    "end": "194933"
  },
  {
    "text": "grained control",
    "start": "194933",
    "end": "196366"
  },
  {
    "text": "on processing of each single event",
    "start": "196366",
    "end": "199099"
  },
  {
    "text": "and application state.",
    "start": "199100",
    "end": "201633"
  },
  {
    "text": "It also allows you to implement custom",
    "start": "201633",
    "end": "203965"
  },
  {
    "text": "time semantic using timers.",
    "start": "203966",
    "end": "206900"
  },
  {
    "text": "For instance,",
    "start": "206900",
    "end": "207965"
  },
  {
    "text": "trying to invoke a custom action",
    "start": "207966",
    "end": "210266"
  },
  {
    "text": "whenever two records arrive",
    "start": "210266",
    "end": "212000"
  },
  {
    "text": "with a two second difference, or",
    "start": "212000",
    "end": "215000"
  },
  {
    "text": "if you want to build your",
    "start": "215133",
    "end": "216465"
  },
  {
    "text": "own custom windowing logic.",
    "start": "216466",
    "end": "218500"
  },
  {
    "text": "This is the",
    "start": "219466",
    "end": "220200"
  },
  {
    "text": "most powerful API Flink offers,",
    "start": "220200",
    "end": "223200"
  },
  {
    "text": "but also the most complex, as",
    "start": "223300",
    "end": "225900"
  },
  {
    "text": "it gives us the highest level of control.",
    "start": "225900",
    "end": "228900"
  },
  {
    "text": "It also gives the developer",
    "start": "229066",
    "end": "230965"
  },
  {
    "text": "the responsibility",
    "start": "230966",
    "end": "232066"
  },
  {
    "text": "of controlling precisely",
    "start": "232066",
    "end": "233933"
  },
  {
    "text": "what the application is doing.",
    "start": "233933",
    "end": "236933"
  },
  {
    "text": "In terms of programing languages.",
    "start": "237833",
    "end": "240032"
  },
  {
    "text": "All programmatic APIs",
    "start": "240033",
    "end": "242033"
  },
  {
    "text": "can be written in Java or any",
    "start": "242033",
    "end": "244800"
  },
  {
    "text": "JVM language like Kotlin or Scala,",
    "start": "244800",
    "end": "247800"
  },
  {
    "text": "or it can also be written in Python,",
    "start": "248400",
    "end": "251400"
  },
  {
    "text": "as SQL code can be sent directly",
    "start": "251800",
    "end": "254600"
  },
  {
    "text": "to an Apache Flink cluster",
    "start": "254600",
    "end": "256532"
  },
  {
    "text": "via dedicated interfaces,",
    "start": "256533",
    "end": "258900"
  },
  {
    "text": "or it can also be embedded in any Java",
    "start": "258900",
    "end": "261699"
  },
  {
    "text": "or Python application.",
    "start": "261700",
    "end": "264700"
  },
  {
    "text": "But let's stop with the theory,",
    "start": "265533",
    "end": "267300"
  },
  {
    "text": "and let's take a look",
    "start": "267300",
    "end": "268366"
  },
  {
    "text": "at some examples",
    "start": "268366",
    "end": "269766"
  },
  {
    "text": "of each of the Apache Flink APIs.",
    "start": "269766",
    "end": "272766"
  },
  {
    "text": "For all examples,",
    "start": "273500",
    "end": "274600"
  },
  {
    "text": "are we going to be shown in the Flink",
    "start": "274600",
    "end": "276600"
  },
  {
    "text": "learning series?",
    "start": "276600",
    "end": "277800"
  },
  {
    "text": "We're going to be using Intel AG",
    "start": "277800",
    "end": "280199"
  },
  {
    "text": "as our idea.",
    "start": "280200",
    "end": "281833"
  },
  {
    "text": "It allows us to compile",
    "start": "281833",
    "end": "283433"
  },
  {
    "text": "and run locally and",
    "start": "283433",
    "end": "285000"
  },
  {
    "text": "patch on Flink applications.",
    "start": "285000",
    "end": "286500"
  },
  {
    "text": "Even though we're",
    "start": "289366",
    "end": "290100"
  },
  {
    "text": "talking about our SQL API.",
    "start": "290100",
    "end": "293100"
  },
  {
    "text": "As you can see,",
    "start": "293133",
    "end": "294066"
  },
  {
    "text": "the SQL is going to be embedded",
    "start": "294066",
    "end": "296100"
  },
  {
    "text": "as part of the Java application.",
    "start": "296100",
    "end": "299100"
  },
  {
    "text": "In order to start, we need to provide",
    "start": "300066",
    "end": "303066"
  },
  {
    "text": "the stream execution environment",
    "start": "303066",
    "end": "306066"
  },
  {
    "text": "and from it the table environment.",
    "start": "306066",
    "end": "309066"
  },
  {
    "text": "This is where",
    "start": "309433",
    "end": "310100"
  },
  {
    "text": "we're going to be",
    "start": "310100",
    "end": "310566"
  },
  {
    "text": "executing our SQL logic.",
    "start": "310566",
    "end": "313300"
  },
  {
    "text": "And it's going to be providing",
    "start": "313300",
    "end": "314366"
  },
  {
    "text": "that abstraction of tables.",
    "start": "314366",
    "end": "316400"
  },
  {
    "text": "When we work with a Flink SQL application",
    "start": "316400",
    "end": "319400"
  },
  {
    "text": "we have three main components.",
    "start": "319933",
    "end": "322200"
  },
  {
    "text": "We have a source table.",
    "start": "322200",
    "end": "324233"
  },
  {
    "text": "We have a continuous query",
    "start": "324233",
    "end": "326333"
  },
  {
    "text": "and we have our sync table",
    "start": "326333",
    "end": "329333"
  },
  {
    "text": "for our tables.",
    "start": "329366",
    "end": "330600"
  },
  {
    "text": "We need to define them",
    "start": "330600",
    "end": "332533"
  },
  {
    "text": "and provide the schema beforehand.",
    "start": "332533",
    "end": "335533"
  },
  {
    "text": "This means that if our schema evolves,",
    "start": "336633",
    "end": "339333"
  },
  {
    "text": "we actually need to stop",
    "start": "339333",
    "end": "340733"
  },
  {
    "text": "and update our application",
    "start": "340733",
    "end": "342900"
  },
  {
    "text": "in order for it to be able to process.",
    "start": "342900",
    "end": "345900"
  },
  {
    "text": "We also provide the connection",
    "start": "346166",
    "end": "348900"
  },
  {
    "text": "configuration, the type of connector",
    "start": "348900",
    "end": "350833"
  },
  {
    "text": "that we want to use,",
    "start": "350833",
    "end": "352000"
  },
  {
    "text": "which in this case",
    "start": "352000",
    "end": "353066"
  },
  {
    "text": "we're going to be consuming data",
    "start": "353066",
    "end": "354833"
  },
  {
    "text": "from an Amazon Kinesis data stream",
    "start": "354833",
    "end": "357600"
  },
  {
    "text": "and all the necessary configuration",
    "start": "357600",
    "end": "360133"
  },
  {
    "text": "for it.",
    "start": "360133",
    "end": "360600"
  },
  {
    "text": "Flink SQL provides some",
    "start": "362433",
    "end": "364000"
  },
  {
    "text": "native transformations,",
    "start": "364000",
    "end": "365333"
  },
  {
    "text": "such as filters such as aggregations,",
    "start": "365333",
    "end": "368000"
  },
  {
    "text": "but there might be some process and logic",
    "start": "368000",
    "end": "370933"
  },
  {
    "text": "that may not be part of the library",
    "start": "370933",
    "end": "373700"
  },
  {
    "text": "for them.",
    "start": "373700",
    "end": "374433"
  },
  {
    "text": "You can then use user defined functions,",
    "start": "374433",
    "end": "377433"
  },
  {
    "text": "and you can",
    "start": "377466",
    "end": "378066"
  },
  {
    "text": "then provide them as Java classes.",
    "start": "378066",
    "end": "381200"
  },
  {
    "text": "So let's take a look at one.",
    "start": "381600",
    "end": "384600"
  },
  {
    "text": "Here.",
    "start": "385466",
    "end": "386266"
  },
  {
    "text": "We can use a Java library",
    "start": "386266",
    "end": "388666"
  },
  {
    "text": "that allows us to calculate",
    "start": "388666",
    "end": "391832"
  },
  {
    "text": "if the given cordinate is near an error.",
    "start": "392200",
    "end": "395866"
  },
  {
    "text": "One of the major airports",
    "start": "396000",
    "end": "397500"
  },
  {
    "text": "such as JFK, LGA or EWR.",
    "start": "397500",
    "end": "401400"
  },
  {
    "text": "Once that",
    "start": "403966",
    "end": "404466"
  },
  {
    "text": "we have our functions",
    "start": "404466",
    "end": "405833"
  },
  {
    "text": "and we have our source table,",
    "start": "405833",
    "end": "407700"
  },
  {
    "text": "we're able to run our continuous query.",
    "start": "407700",
    "end": "410766"
  },
  {
    "text": "We can provide those queries as views",
    "start": "412100",
    "end": "415200"
  },
  {
    "text": "if we want to use that query",
    "start": "415200",
    "end": "417000"
  },
  {
    "text": "as part of another query",
    "start": "417000",
    "end": "419333"
  },
  {
    "text": "in our application.",
    "start": "419333",
    "end": "421200"
  },
  {
    "text": "We're also able to run subqueries within",
    "start": "421200",
    "end": "424200"
  },
  {
    "text": "one query by itself.",
    "start": "424500",
    "end": "426033"
  },
  {
    "text": "So here we're creating a temporary view",
    "start": "427133",
    "end": "430133"
  },
  {
    "text": "where we are applying",
    "start": "430133",
    "end": "431566"
  },
  {
    "text": "those transformations and making sure",
    "start": "431566",
    "end": "434700"
  },
  {
    "text": "that we do not have any events,",
    "start": "435233",
    "end": "437900"
  },
  {
    "text": "that the airport code is null.",
    "start": "437900",
    "end": "440900"
  },
  {
    "text": "And then we can use that first view",
    "start": "441733",
    "end": "444000"
  },
  {
    "text": "as part of our next query",
    "start": "444000",
    "end": "446266"
  },
  {
    "text": "where we're doing an aggregation.",
    "start": "446266",
    "end": "448300"
  },
  {
    "text": "Counting",
    "start": "448300",
    "end": "449332"
  },
  {
    "text": "how many trips per airport have happened",
    "start": "449333",
    "end": "452966"
  },
  {
    "text": "in the last 10s.",
    "start": "453300",
    "end": "456300"
  },
  {
    "text": "Do bear in mind",
    "start": "457933",
    "end": "458900"
  },
  {
    "text": "that as we're doing",
    "start": "458900",
    "end": "459699"
  },
  {
    "text": "a window",
    "start": "459700",
    "end": "460400"
  },
  {
    "text": "aggregation,",
    "start": "460400",
    "end": "461366"
  },
  {
    "text": "we're not continuously counting",
    "start": "461366",
    "end": "463966"
  },
  {
    "text": "all the events that are near an airport,",
    "start": "463966",
    "end": "466966"
  },
  {
    "text": "but we're counting",
    "start": "467066",
    "end": "468300"
  },
  {
    "text": "just by ten second intervals.",
    "start": "468300",
    "end": "471300"
  },
  {
    "text": "And lastly,",
    "start": "471900",
    "end": "473100"
  },
  {
    "text": "we create our sync table or destination.",
    "start": "473100",
    "end": "476366"
  },
  {
    "text": "We also need to provide the schema",
    "start": "477200",
    "end": "480200"
  },
  {
    "text": "and the configuration for the connector.",
    "start": "480200",
    "end": "482966"
  },
  {
    "text": "Since we want to see this",
    "start": "482966",
    "end": "484100"
  },
  {
    "text": "within the screen,",
    "start": "484100",
    "end": "485066"
  },
  {
    "text": "we're just going to print.",
    "start": "485066",
    "end": "487866"
  },
  {
    "text": "Once we have those three main components,",
    "start": "487866",
    "end": "490866"
  },
  {
    "text": "it's time to tell from where",
    "start": "490866",
    "end": "493333"
  },
  {
    "text": "to where",
    "start": "493333",
    "end": "493833"
  },
  {
    "text": "we're going to be sending our data.",
    "start": "493833",
    "end": "496433"
  },
  {
    "text": "So since we have these views",
    "start": "496433",
    "end": "499400"
  },
  {
    "text": "of our continuous transformations,",
    "start": "499400",
    "end": "502133"
  },
  {
    "text": "we then say that",
    "start": "502133",
    "end": "503233"
  },
  {
    "text": "we want to insert into our sync table",
    "start": "503233",
    "end": "506633"
  },
  {
    "text": "the following query",
    "start": "507266",
    "end": "509266"
  },
  {
    "text": "and this following query.",
    "start": "509266",
    "end": "511100"
  },
  {
    "text": "It's using as its source.",
    "start": "511100",
    "end": "513900"
  },
  {
    "text": "The final view that we created.",
    "start": "513900",
    "end": "516266"
  },
  {
    "text": "We could be using the first table",
    "start": "516266",
    "end": "518800"
  },
  {
    "text": "and have.",
    "start": "518800",
    "end": "519365"
  },
  {
    "text": "Here's a way more complicated query.",
    "start": "519366",
    "end": "522366"
  },
  {
    "text": "But in this example",
    "start": "522566",
    "end": "523932"
  },
  {
    "text": "this is how we're doing.",
    "start": "523933",
    "end": "525000"
  },
  {
    "text": "So we if we execute.",
    "start": "526400",
    "end": "529400"
  },
  {
    "text": "Let's start",
    "start": "533833",
    "end": "534766"
  },
  {
    "text": "our data generator.",
    "start": "534766",
    "end": "537766"
  },
  {
    "text": "There we go.",
    "start": "543400",
    "end": "546400"
  },
  {
    "text": "And after 10s we can see some results.",
    "start": "549666",
    "end": "552666"
  },
  {
    "text": "But wait,",
    "start": "553366",
    "end": "554600"
  },
  {
    "text": "we talked about table and abstractions.",
    "start": "554600",
    "end": "557532"
  },
  {
    "text": "Why am I seeing individual",
    "start": "557533",
    "end": "559300"
  },
  {
    "text": "events being printed in the screen?",
    "start": "559300",
    "end": "562266"
  },
  {
    "text": "Well,",
    "start": "562266",
    "end": "563566"
  },
  {
    "text": "same as when we submit a query",
    "start": "563566",
    "end": "565699"
  },
  {
    "text": "to a database.",
    "start": "565700",
    "end": "566800"
  },
  {
    "text": "And the query planner builds",
    "start": "566800",
    "end": "569266"
  },
  {
    "text": "the graph of the builds",
    "start": "569266",
    "end": "570865"
  },
  {
    "text": "a processing logic.",
    "start": "570866",
    "end": "573066"
  },
  {
    "text": "Flink SQL does the same",
    "start": "573066",
    "end": "575133"
  },
  {
    "text": "that with the SQL code.",
    "start": "575133",
    "end": "577033"
  },
  {
    "text": "It builds the application graph.",
    "start": "577033",
    "end": "579933"
  },
  {
    "text": "It then",
    "start": "579933",
    "end": "581100"
  },
  {
    "text": "generates the operators",
    "start": "581100",
    "end": "582733"
  },
  {
    "text": "and the required state in order.",
    "start": "582733",
    "end": "584865"
  },
  {
    "text": "Then that",
    "start": "584866",
    "end": "585466"
  },
  {
    "text": "whenever we manipulate the data",
    "start": "585466",
    "end": "588200"
  },
  {
    "text": "within Flink,",
    "start": "588200",
    "end": "589766"
  },
  {
    "text": "it feels that as we're working",
    "start": "589766",
    "end": "591533"
  },
  {
    "text": "with a table.",
    "start": "591533",
    "end": "593566"
  },
  {
    "text": "But again, at its essence",
    "start": "593566",
    "end": "595733"
  },
  {
    "text": "are still stream streams of events.",
    "start": "595733",
    "end": "598699"
  },
  {
    "text": "So when we want to output",
    "start": "598700",
    "end": "601233"
  },
  {
    "text": "those results outside of Flink,",
    "start": "601233",
    "end": "604233"
  },
  {
    "text": "we're going to be seeing",
    "start": "604300",
    "end": "605532"
  },
  {
    "text": "streams of events as well.",
    "start": "605533",
    "end": "607800"
  },
  {
    "text": "Now let's look",
    "start": "611366",
    "end": "612300"
  },
  {
    "text": "at the table API.",
    "start": "612300",
    "end": "615300"
  },
  {
    "text": "Same as before",
    "start": "621133",
    "end": "622200"
  },
  {
    "text": "as we're given,",
    "start": "622200",
    "end": "623400"
  },
  {
    "text": "we are using an abstraction of tables.",
    "start": "623400",
    "end": "625933"
  },
  {
    "text": "We are creating that table environment",
    "start": "625933",
    "end": "628933"
  },
  {
    "text": "from the stream execution environment.",
    "start": "629166",
    "end": "632166"
  },
  {
    "text": "And again we have our source table.",
    "start": "632466",
    "end": "634800"
  },
  {
    "text": "We have a sync table.",
    "start": "634800",
    "end": "636266"
  },
  {
    "text": "And we're going to show",
    "start": "636266",
    "end": "637066"
  },
  {
    "text": "the transformations",
    "start": "637066",
    "end": "638032"
  },
  {
    "text": "that we can do along the way.",
    "start": "638033",
    "end": "640333"
  },
  {
    "text": "But since we are working",
    "start": "640333",
    "end": "642033"
  },
  {
    "text": "with that table abstraction",
    "start": "642033",
    "end": "644233"
  },
  {
    "text": "we again need to provide that schema",
    "start": "644233",
    "end": "646665"
  },
  {
    "text": "before we compile.",
    "start": "646666",
    "end": "648333"
  },
  {
    "text": "So",
    "start": "648333",
    "end": "650266"
  },
  {
    "text": "we create that schema.",
    "start": "650266",
    "end": "652399"
  },
  {
    "text": "But we're not now doing it",
    "start": "652400",
    "end": "654300"
  },
  {
    "text": "using that SQL.",
    "start": "654300",
    "end": "655899"
  },
  {
    "text": "We're using Java objects",
    "start": "655900",
    "end": "657500"
  },
  {
    "text": "and Java classes for it.",
    "start": "657500",
    "end": "660500"
  },
  {
    "text": "We create a temporary table",
    "start": "660633",
    "end": "662700"
  },
  {
    "text": "with that schema.",
    "start": "662700",
    "end": "664866"
  },
  {
    "text": "And we define the connector",
    "start": "664866",
    "end": "667200"
  },
  {
    "text": "and its configurations.",
    "start": "667200",
    "end": "670200"
  },
  {
    "text": "And then we can apply the same kind",
    "start": "670933",
    "end": "673032"
  },
  {
    "text": "of processing logic.",
    "start": "673033",
    "end": "674866"
  },
  {
    "text": "But if you notice it's more",
    "start": "674866",
    "end": "676400"
  },
  {
    "text": "tied into the programing language",
    "start": "676400",
    "end": "679400"
  },
  {
    "text": "of our choosing,",
    "start": "679400",
    "end": "680400"
  },
  {
    "text": "which in this case is Java.",
    "start": "680400",
    "end": "682033"
  },
  {
    "text": "We're still selecting columns.",
    "start": "683100",
    "end": "685300"
  },
  {
    "text": "We're still applying filters,",
    "start": "685300",
    "end": "687466"
  },
  {
    "text": "but we're applying it as methods",
    "start": "687466",
    "end": "690066"
  },
  {
    "text": "to our Java objects.",
    "start": "690066",
    "end": "692500"
  },
  {
    "text": "We apply the same transformation",
    "start": "692500",
    "end": "695133"
  },
  {
    "text": "and aggregation per ten second interval.",
    "start": "695133",
    "end": "698133"
  },
  {
    "text": "We create the destination table",
    "start": "699066",
    "end": "702066"
  },
  {
    "text": "where we're going to be",
    "start": "702366",
    "end": "703033"
  },
  {
    "text": "printing those results.",
    "start": "703033",
    "end": "705600"
  },
  {
    "text": "And we run our insert command",
    "start": "705600",
    "end": "708600"
  },
  {
    "text": "in which we're inserting the trip count",
    "start": "708600",
    "end": "711600"
  },
  {
    "text": "into our destination table.",
    "start": "712233",
    "end": "715233"
  },
  {
    "text": "So let's execute",
    "start": "717066",
    "end": "718300"
  },
  {
    "text": "this code as well.",
    "start": "718300",
    "end": "721300"
  },
  {
    "text": "Again we're seeing individual",
    "start": "729566",
    "end": "731766"
  },
  {
    "text": "streams of events being printed.",
    "start": "731766",
    "end": "734766"
  },
  {
    "text": "But now let's go",
    "start": "737466",
    "end": "738600"
  },
  {
    "text": "at the data stream API.",
    "start": "738600",
    "end": "741600"
  },
  {
    "text": "In the Data Stream API.",
    "start": "745833",
    "end": "747500"
  },
  {
    "text": "We've mentioned this briefly,",
    "start": "747500",
    "end": "749366"
  },
  {
    "text": "but everything that we write",
    "start": "749366",
    "end": "751200"
  },
  {
    "text": "in the main class,",
    "start": "751200",
    "end": "752866"
  },
  {
    "text": "it will be used",
    "start": "752866",
    "end": "754233"
  },
  {
    "text": "to create the logical graph.",
    "start": "754233",
    "end": "756532"
  },
  {
    "text": "So here we do have direct control on how",
    "start": "756533",
    "end": "760066"
  },
  {
    "text": "the data is going to be flowing",
    "start": "760066",
    "end": "761399"
  },
  {
    "text": "from one operator to another",
    "start": "761400",
    "end": "763333"
  },
  {
    "text": "for the data stream API.",
    "start": "764833",
    "end": "766300"
  },
  {
    "text": "We just need to have the stream",
    "start": "766300",
    "end": "768000"
  },
  {
    "text": "execution environment.",
    "start": "768000",
    "end": "771000"
  },
  {
    "text": "We build the properties.",
    "start": "771233",
    "end": "773266"
  },
  {
    "text": "So with all the necessary configuration",
    "start": "773266",
    "end": "775766"
  },
  {
    "text": "for our connector again",
    "start": "775766",
    "end": "777633"
  },
  {
    "text": "Kinesis data stream.",
    "start": "777633",
    "end": "780333"
  },
  {
    "text": "And we build our data stream,",
    "start": "780333",
    "end": "783333"
  },
  {
    "text": "we provide that in the Kinesis",
    "start": "783600",
    "end": "786100"
  },
  {
    "text": "Data Stream name.",
    "start": "786100",
    "end": "787500"
  },
  {
    "text": "And how are we going to be",
    "start": "787500",
    "end": "788633"
  },
  {
    "text": "this serializing those events.",
    "start": "788633",
    "end": "791633"
  },
  {
    "text": "We would be able to use",
    "start": "791766",
    "end": "793066"
  },
  {
    "text": "native",
    "start": "793066",
    "end": "793466"
  },
  {
    "text": "Deserialization provided for kinesis",
    "start": "793466",
    "end": "795766"
  },
  {
    "text": "so that we receive strings.",
    "start": "795766",
    "end": "797500"
  },
  {
    "text": "Or we can parse them directly into post.",
    "start": "797500",
    "end": "801000"
  },
  {
    "text": "So if I go.",
    "start": "802133",
    "end": "805133"
  },
  {
    "text": "I can then see",
    "start": "805500",
    "end": "806600"
  },
  {
    "text": "I can add that additional methods.",
    "start": "806600",
    "end": "809600"
  },
  {
    "text": "And I pass the fields that this class,",
    "start": "809633",
    "end": "813133"
  },
  {
    "text": "this Java object will have.",
    "start": "813500",
    "end": "816500"
  },
  {
    "text": "I apply transformations.",
    "start": "818700",
    "end": "820733"
  },
  {
    "text": "Then again, if you notice here",
    "start": "820733",
    "end": "822733"
  },
  {
    "text": "I'm not really defining",
    "start": "822733",
    "end": "824399"
  },
  {
    "text": "or registering user defined functions.",
    "start": "824400",
    "end": "827400"
  },
  {
    "text": "I can use its native constructions",
    "start": "827433",
    "end": "830032"
  },
  {
    "text": "such as flatMap or map",
    "start": "830033",
    "end": "832300"
  },
  {
    "text": "in order to build my processing logic",
    "start": "832300",
    "end": "835300"
  },
  {
    "text": "in SQL.",
    "start": "835300",
    "end": "836233"
  },
  {
    "text": "If I needed to do an aggregation,",
    "start": "836233",
    "end": "838066"
  },
  {
    "text": "I would use a group",
    "start": "838066",
    "end": "839000"
  },
  {
    "text": "by in the data stream API.",
    "start": "839000",
    "end": "841600"
  },
  {
    "text": "We use a key by",
    "start": "841600",
    "end": "842832"
  },
  {
    "text": "the key by make sure that",
    "start": "843900",
    "end": "845500"
  },
  {
    "text": "all the elements that have the same key",
    "start": "845500",
    "end": "848700"
  },
  {
    "text": "are routed to the same operator.",
    "start": "849500",
    "end": "852500"
  },
  {
    "text": "And once we do that,",
    "start": "854700",
    "end": "855966"
  },
  {
    "text": "we can apply our windowing logic",
    "start": "855966",
    "end": "858966"
  },
  {
    "text": "and do our aggregations.",
    "start": "859033",
    "end": "861566"
  },
  {
    "text": "Here we can see that",
    "start": "861566",
    "end": "862600"
  },
  {
    "text": "there's already some abstraction.",
    "start": "862600",
    "end": "864733"
  },
  {
    "text": "In order to do that windowing",
    "start": "864733",
    "end": "867133"
  },
  {
    "text": "and where we're going to be doing",
    "start": "867133",
    "end": "868500"
  },
  {
    "text": "that ten second interval.",
    "start": "868500",
    "end": "870366"
  },
  {
    "text": "And lastly we apply our aggregation where",
    "start": "870366",
    "end": "874033"
  },
  {
    "text": "we're going to be counting",
    "start": "874033",
    "end": "875066"
  },
  {
    "text": "the number of trips.",
    "start": "875066",
    "end": "877133"
  },
  {
    "text": "We define",
    "start": "877133",
    "end": "877800"
  },
  {
    "text": "where are we going to be",
    "start": "877800",
    "end": "878700"
  },
  {
    "text": "sending trip count.",
    "start": "878700",
    "end": "880466"
  },
  {
    "text": "Where do we directly send to print.",
    "start": "880466",
    "end": "883466"
  },
  {
    "text": "And we are going to now execute.",
    "start": "884000",
    "end": "887000"
  },
  {
    "text": "And we're going to see our events",
    "start": "888633",
    "end": "890066"
  },
  {
    "text": "after that ten second window.",
    "start": "890066",
    "end": "893066"
  },
  {
    "text": "This is a high level",
    "start": "894100",
    "end": "896466"
  },
  {
    "text": "explanation",
    "start": "896466",
    "end": "897466"
  },
  {
    "text": "or example of the data stream API,",
    "start": "897466",
    "end": "900466"
  },
  {
    "text": "because in the next chapter",
    "start": "900466",
    "end": "902300"
  },
  {
    "text": "we're going to be covering it in detail.",
    "start": "902300",
    "end": "905100"
  },
  {
    "text": "So stay tuned for the next session.",
    "start": "905100",
    "end": "907332"
  }
]