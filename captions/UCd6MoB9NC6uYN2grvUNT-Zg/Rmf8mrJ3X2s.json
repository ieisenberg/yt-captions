[
  {
    "start": "0",
    "end": "49000"
  },
  {
    "text": "hi and welcome to build with dynamodb this time we're going to talk about",
    "start": "60",
    "end": "5220"
  },
  {
    "text": "introduction to no sequel data modeling with Amazon DynamoDB my name is Enzo",
    "start": "5220",
    "end": "10920"
  },
  {
    "text": "which I'm a Solutions Architect focusing on no sequel is physically DynamoDB my name is Siva Raghupati I lead the no",
    "start": "10920",
    "end": "18000"
  },
  {
    "text": "sequel non-relational solutions architecture team delighted to be here thanks for joining us again this week if",
    "start": "18000",
    "end": "25560"
  },
  {
    "text": "you if you missed one of the sessions either the one that was last week which",
    "start": "25560",
    "end": "31949"
  },
  {
    "text": "by the way was a great session with Rick Houlihan on the database office hour which comes on right after this show",
    "start": "31949",
    "end": "38870"
  },
  {
    "text": "check it out it's online as well as our first show let's start off with a maybe",
    "start": "38870",
    "end": "44879"
  },
  {
    "text": "quick refresher about some of the key concepts in DynamoDB starting with the",
    "start": "44879",
    "end": "51360"
  },
  {
    "start": "49000",
    "end": "49000"
  },
  {
    "text": "table and partition sort key table items right as we said last time one of the",
    "start": "51360",
    "end": "58890"
  },
  {
    "text": "key things when working with dynamodb is the selection of partition key which is",
    "start": "58890",
    "end": "64559"
  },
  {
    "text": "mandatory and in addition it can have an optional sort key we didn't have a",
    "start": "64559",
    "end": "70049"
  },
  {
    "text": "question last time about what can I do with sort key and in this session we're",
    "start": "70049",
    "end": "75600"
  },
  {
    "text": "actually going to get a little more into it and start talking about data modeling",
    "start": "75600",
    "end": "80610"
  },
  {
    "text": "right and and how to select the partition key and what we can use sort",
    "start": "80610",
    "end": "86250"
  },
  {
    "text": "key for records in dynamodb tables are called items and each item has",
    "start": "86250",
    "end": "93390"
  },
  {
    "text": "attributes from one item to the next the attributes can be very different the",
    "start": "93390",
    "end": "100380"
  },
  {
    "text": "only thing that has to be there is the petition key and of course if you're using the sort key it has to be there as",
    "start": "100380",
    "end": "108689"
  },
  {
    "text": "well so as far as and the key has to be unique",
    "start": "108689",
    "end": "114930"
  },
  {
    "text": "right the primary key on this table has to be unique it could be just a partition key or a partition + Alt key",
    "start": "114930",
    "end": "121140"
  },
  {
    "text": "right depending upon whether you have a table with just the partition key or a table with the partition and a sort key",
    "start": "121140",
    "end": "127409"
  },
  {
    "text": "put together yes each item is identified uniquely by",
    "start": "127409",
    "end": "132620"
  },
  {
    "text": "either just the partition key or a combination of partition and sort key right so so now that we've kind of",
    "start": "132620",
    "end": "140569"
  },
  {
    "text": "established the terminology baseline so",
    "start": "140569",
    "end": "147010"
  },
  {
    "start": "145000",
    "end": "145000"
  },
  {
    "text": "partition key right if you look at the DynamoDB api is basically eyes they all",
    "start": "147010",
    "end": "153230"
  },
  {
    "text": "use the partition key whether we're writing an item reading an item or",
    "start": "153230",
    "end": "159290"
  },
  {
    "text": "deleting an item so it really is a is a foundational concept in DynamoDB also if",
    "start": "159290",
    "end": "167450"
  },
  {
    "text": "we're using batch api's as well as query or transactional api's they all take",
    "start": "167450",
    "end": "175150"
  },
  {
    "text": "partition key you have to have a partition key and so for example in case",
    "start": "175150",
    "end": "181040"
  },
  {
    "text": "of queries what that tells us I can query on a given partition key and",
    "start": "181040",
    "end": "187549"
  },
  {
    "text": "so this this gives you an idea what queries can do in DynamoDB if I'm if I'm",
    "start": "187549",
    "end": "194060"
  },
  {
    "text": "storing let's say sensor data telemetry telemetry data from a number of sensors",
    "start": "194060",
    "end": "201109"
  },
  {
    "text": "right I I do have to query based on a partition key so that also means that I",
    "start": "201109",
    "end": "207739"
  },
  {
    "text": "cannot query across all the sensors yeah and that's that's a key thing to know",
    "start": "207739",
    "end": "213440"
  },
  {
    "text": "about querying in dynamodb however with the with the sort key in the mix I can",
    "start": "213440",
    "end": "220579"
  },
  {
    "text": "query within the same partition key on a range of values based on the sort key",
    "start": "220579",
    "end": "227780"
  },
  {
    "text": "yep you know having a partition key kind of allows the system to partition through even though there may be",
    "start": "227780",
    "end": "233989"
  },
  {
    "text": "hundreds of thousands of partitions you know Dynamo fairly efficiently identifies what our is your query",
    "start": "233989",
    "end": "240620"
  },
  {
    "text": "pattern since it's always contains you always provide a partition key you know",
    "start": "240620",
    "end": "247010"
  },
  {
    "text": "it it nicely because certain lands and that partition and starts scanning the partition are out delivering results",
    "start": "247010",
    "end": "253190"
  },
  {
    "text": "from the partitions it's pretty important to actually pick the right partition key which we will go through",
    "start": "253190",
    "end": "260040"
  },
  {
    "text": "in detail the course of this course of today and that's closely related to the",
    "start": "260040",
    "end": "265170"
  },
  {
    "text": "latency yeah when using DynamoDB with with this model",
    "start": "265170",
    "end": "270980"
  },
  {
    "text": "you can talk about getting single-digit millisecond latency on these requests um",
    "start": "270980",
    "end": "278430"
  },
  {
    "text": "let's talk a little bit about the normalization and aggregates right for storing data in a relational database we",
    "start": "278430",
    "end": "287040"
  },
  {
    "start": "285000",
    "end": "285000"
  },
  {
    "text": "let's say for example storing orders and order items chances are we might have a",
    "start": "287040",
    "end": "292950"
  },
  {
    "text": "couple of tables right it's a very basic scenario but we still have a normalized",
    "start": "292950",
    "end": "299190"
  },
  {
    "text": "schema and by contrast in an no sequel",
    "start": "299190",
    "end": "304860"
  },
  {
    "text": "database we would try to store related data together and and again it goes back",
    "start": "304860",
    "end": "311010"
  },
  {
    "text": "to that idea of going to one place to write or read your data so if I if I'm",
    "start": "311010",
    "end": "319140"
  },
  {
    "text": "using same partition key for my order and my order items they will be stored",
    "start": "319140",
    "end": "325110"
  },
  {
    "text": "close together and I can actually use a single operation to either write or read",
    "start": "325110",
    "end": "331070"
  },
  {
    "text": "my my orders and so while we have normalized schema on a relational side",
    "start": "331070",
    "end": "337080"
  },
  {
    "text": "and no sequel databases we can normalize data and store them as aggregates so in",
    "start": "337080",
    "end": "344730"
  },
  {
    "text": "this case an order is an aggregate that I've worked with I need my order data when I'm writing",
    "start": "344730",
    "end": "351390"
  },
  {
    "text": "that order when I'm reading an order and so the concept of aggregates which comes",
    "start": "351390",
    "end": "358470"
  },
  {
    "text": "from now the the book escapes me and but",
    "start": "358470",
    "end": "366330"
  },
  {
    "text": "it's a well anyway it'll come back to me",
    "start": "366330",
    "end": "372360"
  },
  {
    "text": "I'm forgetting the domain the main driven right the main driven design is",
    "start": "372360",
    "end": "377490"
  },
  {
    "text": "where it comes from but as it turns out it really aligns well with the partitioning sharding",
    "start": "377490",
    "end": "384030"
  },
  {
    "text": "nature of no sequel databases because if we if we shard by partition key and the",
    "start": "384030",
    "end": "391260"
  },
  {
    "text": "is that to store our aggregates we always make sure that our aggregate is",
    "start": "391260",
    "end": "396990"
  },
  {
    "text": "always together that object whether it's an order object session object shopping",
    "start": "396990",
    "end": "402240"
  },
  {
    "text": "cart object is it stored together and in",
    "start": "402240",
    "end": "408030"
  },
  {
    "text": "in this case in this example restoring an order as a single item within",
    "start": "408030",
    "end": "414860"
  },
  {
    "text": "DynamoDB in our case but it may well be a collection of multiple items the one",
    "start": "414860",
    "end": "422730"
  },
  {
    "text": "thing today would have in common is they would have the same partition key you know so our aggregates could be composed",
    "start": "422730",
    "end": "429960"
  },
  {
    "text": "of several items but they will always have the same partition key so the",
    "start": "429960",
    "end": "437280"
  },
  {
    "text": "question that often comes up is so here we went from two tables to one and we",
    "start": "437280",
    "end": "445140"
  },
  {
    "text": "always talked about reducing the number of tables using whenever possible a single table to store your data so what",
    "start": "445140",
    "end": "454650"
  },
  {
    "text": "are some of the guidelines that we can use to determine how many tables should we use so we just talked about one using",
    "start": "454650",
    "end": "463110"
  },
  {
    "text": "aggregates and those access patterns to drive that decision another key aspect",
    "start": "463110",
    "end": "470130"
  },
  {
    "start": "470000",
    "end": "470000"
  },
  {
    "text": "of it that I always throw into that decision-making process is the broader",
    "start": "470130",
    "end": "478890"
  },
  {
    "text": "context of my design my architecture these days we all like to use",
    "start": "478890",
    "end": "484140"
  },
  {
    "text": "microservice architectures and one of the tenets of microservices is that each",
    "start": "484140",
    "end": "491010"
  },
  {
    "text": "service owns its own data and so in that context if we talk about having let's",
    "start": "491010",
    "end": "496950"
  },
  {
    "text": "say an e-commerce application in this example and potentially multiples many",
    "start": "496950",
    "end": "503760"
  },
  {
    "text": "services right but for example if we if we just focus on a subset of a shopping",
    "start": "503760",
    "end": "509250"
  },
  {
    "text": "cart product catalog an account service but we should at least have one table",
    "start": "509250",
    "end": "514770"
  },
  {
    "text": "for for each service as that allows us to keep those services",
    "start": "514770",
    "end": "522000"
  },
  {
    "text": "separated you know the couple basically if we put that now in the context of",
    "start": "522000",
    "end": "530070"
  },
  {
    "start": "527000",
    "end": "527000"
  },
  {
    "text": "charting and partitioning here's an example were restoring orders in in a",
    "start": "530070",
    "end": "536190"
  },
  {
    "text": "DynamoDB table and partition key is the order ID and we see that each one of",
    "start": "536190",
    "end": "543540"
  },
  {
    "text": "these aggregates has a different order ID if we take a look under the hood of",
    "start": "543540",
    "end": "549029"
  },
  {
    "text": "this dynamodb table if we were able to do that we would see that there are many",
    "start": "549029",
    "end": "554519"
  },
  {
    "text": "partitions right and when we do a put item on any of these orders the service",
    "start": "554519",
    "end": "563610"
  },
  {
    "text": "will hash the partition key and figure out what partition this this particular",
    "start": "563610",
    "end": "570120"
  },
  {
    "text": "order will go to and because they all have different partition keys different",
    "start": "570120",
    "end": "576240"
  },
  {
    "text": "values for the partition key they will all end up in different partitions and so the choice of the partition key in",
    "start": "576240",
    "end": "584190"
  },
  {
    "text": "this case allows us to to get even",
    "start": "584190",
    "end": "589680"
  },
  {
    "text": "distribution of data across the table and as we add more orders as our",
    "start": "589680",
    "end": "595079"
  },
  {
    "text": "business grows and now instead of thousands of orders we might be dealing with millions of orders this choice of",
    "start": "595079",
    "end": "603540"
  },
  {
    "text": "partition key allows us to scale and just continue to seamlessly handle the",
    "start": "603540",
    "end": "610139"
  },
  {
    "text": "the growth in scale of traffic and data volume in this in this scheme in this",
    "start": "610139",
    "end": "616920"
  },
  {
    "text": "modeling semantics order ID is a unique is unique so so we have a large number",
    "start": "616920",
    "end": "624480"
  },
  {
    "text": "of order ID the larger number of partition keys you have the better it scales the ideal situation would be",
    "start": "624480",
    "end": "631589"
  },
  {
    "text": "unique partition keys in this unit in this in this kind of schema so I think this way you know the hashing function",
    "start": "631589",
    "end": "637910"
  },
  {
    "text": "hashes all of the partition keys into its own way all partitions right your order ID is your scaling dimension yep",
    "start": "637910",
    "end": "645540"
  },
  {
    "text": "and by contrast if let's say in a",
    "start": "645540",
    "end": "652380"
  },
  {
    "text": "difference in we decided to select a different partition key for our orders just",
    "start": "652380",
    "end": "658910"
  },
  {
    "text": "because you might have an access that there may be calls for access by a",
    "start": "658910",
    "end": "664070"
  },
  {
    "text": "country and so in this example the partition keys country code whereas the",
    "start": "664070",
    "end": "670820"
  },
  {
    "start": "669000",
    "end": "669000"
  },
  {
    "text": "order ID is now the sort key the combination of two being unique and just",
    "start": "670820",
    "end": "678770"
  },
  {
    "text": "a country code of course would not be not be unique so but the the what",
    "start": "678770",
    "end": "687740"
  },
  {
    "text": "happens with with this data model is that because all our orders in this case",
    "start": "687740",
    "end": "694580"
  },
  {
    "text": "in this example have the same country code y'all end up in the same partition yep so this would be an anti-pattern or",
    "start": "694580",
    "end": "702710"
  },
  {
    "text": "how - this would be an anti-pattern for how to model maybe it is one of the ways of maybe fixing this would be you know",
    "start": "702710",
    "end": "709670"
  },
  {
    "text": "should the application concatenate the country code and the order ID and then",
    "start": "709670",
    "end": "715250"
  },
  {
    "text": "make it unique and then in that case again you have a large number of unique IDs and therefore it'll scale back and",
    "start": "715250",
    "end": "721850"
  },
  {
    "text": "right and there will be cases when you do want to maybe look up your orders by country code yeah but we'll talk about",
    "start": "721850",
    "end": "729200"
  },
  {
    "text": "options for that how how we can help him handle those cases right so the the",
    "start": "729200",
    "end": "736760"
  },
  {
    "text": "point though is that the choice of partition key is fundamental to horizontal scaling and and in fact as we",
    "start": "736760",
    "end": "746150"
  },
  {
    "start": "744000",
    "end": "744000"
  },
  {
    "text": "saw in this last example that if we're not able to accomplish that we end up",
    "start": "746150",
    "end": "751160"
  },
  {
    "text": "with too much pressure on maybe a very small subset or in this case in the",
    "start": "751160",
    "end": "757400"
  },
  {
    "text": "extreme case too much pressure on a single partition right and we're not scaling we're not scaling our traffic",
    "start": "757400",
    "end": "764720"
  },
  {
    "text": "we're not scaling our our database basically so this paradigm is applicable",
    "start": "764720",
    "end": "770660"
  },
  {
    "text": "to almost equal exactly the basis it's not only it and it's really exactly it's",
    "start": "770660",
    "end": "776030"
  },
  {
    "text": "really related to the sharding nature of the state we didn't know sequel databases so the problem here course is",
    "start": "776030",
    "end": "785480"
  },
  {
    "text": "that the extreme the unbalanced data or request distribution is what's what's preventing",
    "start": "785480",
    "end": "791510"
  },
  {
    "text": "the ability to scale so to kind of sum up the basic I think ideas behind the",
    "start": "791510",
    "end": "798710"
  },
  {
    "start": "794000",
    "end": "794000"
  },
  {
    "text": "partition key we're always looking for a partition key that affords even",
    "start": "798710",
    "end": "805520"
  },
  {
    "text": "distribution of data and and workload as they might grow right so if you're a",
    "start": "805520",
    "end": "811730"
  },
  {
    "text": "startup and and your main asset is your users and you're storing your user data user profiles you you want your ability",
    "start": "811730",
    "end": "819350"
  },
  {
    "text": "to store your user profiles to remain intact as you add more users so",
    "start": "819350",
    "end": "828100"
  },
  {
    "text": "partition keys are dimension of scale and it allows you to distribute these aggregates which might be user profiles",
    "start": "828100",
    "end": "835130"
  },
  {
    "text": "or accounts user accounts or what have you across petitions as as your user base",
    "start": "835130",
    "end": "843140"
  },
  {
    "text": "grows and that's what DynamoDB is really good at so ideal scaling conditions now",
    "start": "843140",
    "end": "850460"
  },
  {
    "text": "in real life you know that we can't always have ideal scaling conditions but",
    "start": "850460",
    "end": "858010"
  },
  {
    "text": "it's good to know what they are so that if we know that we cannot have all three",
    "start": "858010",
    "end": "865630"
  },
  {
    "text": "that we know that we might have to come up with with a design to accommodate",
    "start": "865630",
    "end": "871070"
  },
  {
    "text": "that to compensate for the lack of natural lack of you know these these",
    "start": "871070",
    "end": "878180"
  },
  {
    "text": "conditions and in fact as we as we move",
    "start": "878180",
    "end": "883430"
  },
  {
    "text": "forward yep in some of these future modeling data modeling sessions with dynamodb will address we'll talk about",
    "start": "883430",
    "end": "890840"
  },
  {
    "text": "patterns that we use solutions due to some of these patterns yep yes so yeah",
    "start": "890840",
    "end": "898400"
  },
  {
    "text": "why don't we then roll into sort of the modeling relationships that with Dunwoody be so you know we do a large",
    "start": "898400",
    "end": "905360"
  },
  {
    "text": "number of design reviews so I think you know one of the primary area where we start doing the design review is trying",
    "start": "905360",
    "end": "910730"
  },
  {
    "text": "to get a sense of what kind of answers you're trying to surface you know I",
    "start": "910730",
    "end": "917210"
  },
  {
    "text": "think we call this sort of access pattern modeling so as part of that respondent modeling once you understand",
    "start": "917210",
    "end": "922640"
  },
  {
    "text": "what kind of queries you have to you know service or what kind of you know puts and gets you have to service the",
    "start": "922640",
    "end": "929990"
  },
  {
    "text": "next thing immediately is sort of modeling your you know attributes and",
    "start": "929990",
    "end": "936080"
  },
  {
    "text": "and tables for the specific scenario there are three fundamental constructs",
    "start": "936080",
    "end": "941600"
  },
  {
    "text": "that we will go through today you know I think when you're when you're modeling relationships typically relationships",
    "start": "941600",
    "end": "946910"
  },
  {
    "text": "are one-to-one one-to-many and many-to-many we'll walk through in the",
    "start": "946910",
    "end": "952310"
  },
  {
    "text": "next few slides as to how you know we what type of constructs you can use in",
    "start": "952310",
    "end": "958490"
  },
  {
    "start": "955000",
    "end": "955000"
  },
  {
    "text": "dynamodb to model the scenarios for example if you are modeling key value relationships using a table with the",
    "start": "958490",
    "end": "966980"
  },
  {
    "text": "partition key as the key and the various attributes as values would be the way to",
    "start": "966980",
    "end": "973220"
  },
  {
    "text": "model the table in the specific scenario let's say the first table in the middle is a user's table and then the user ID",
    "start": "973220",
    "end": "980210"
  },
  {
    "text": "can be a partition key and the various attributes such as email join dates etc",
    "start": "980210",
    "end": "985840"
  },
  {
    "text": "can be attributes in this case the access pattern would be given a user ID",
    "start": "985840",
    "end": "991370"
  },
  {
    "text": "in this case Bob gave me all the details about Bob you know Bob's email join date",
    "start": "991370",
    "end": "997730"
  },
  {
    "text": "etc and that would be the access patent typically you'd be using a gate item or",
    "start": "997730",
    "end": "1002950"
  },
  {
    "text": "a bad cat item APR 2 2014 1 item gate",
    "start": "1002950",
    "end": "1013570"
  },
  {
    "text": "item you know it tends to be the best use most common most common usage",
    "start": "1013570",
    "end": "1020380"
  },
  {
    "text": "pattern performance wise it's the same right the other piece is also you could",
    "start": "1020380",
    "end": "1025390"
  },
  {
    "text": "put actually use a global secondary index also to actually model key value relationships for example if you had a",
    "start": "1025390",
    "end": "1033160"
  },
  {
    "text": "primary table called users table you could potentially have a user's email global secondary index in this case the",
    "start": "1033160",
    "end": "1041050"
  },
  {
    "text": "email is the partition key in the global secondary index so if you had let's say",
    "start": "1041050",
    "end": "1046270"
  },
  {
    "text": "another mechanism where you want to look up the users by email so you could potentially",
    "start": "1046270",
    "end": "1052540"
  },
  {
    "text": "service those lookups using the user email global secondary index so that's",
    "start": "1052540",
    "end": "1058780"
  },
  {
    "text": "what is shown at the bottom of the slide so key values scenario is a is a",
    "start": "1058780",
    "end": "1064000"
  },
  {
    "text": "fundamental scenario in fact many applications require massive scale in a number of those applications you know",
    "start": "1064000",
    "end": "1070300"
  },
  {
    "text": "you are simply handling a key value you know scenario in which case modeling the",
    "start": "1070300",
    "end": "1075490"
  },
  {
    "text": "scenario as that table part of a global secondary index with the with a key with",
    "start": "1075490",
    "end": "1083050"
  },
  {
    "text": "a partition key as the key is super important so that is the you know a",
    "start": "1083050",
    "end": "1088900"
  },
  {
    "text": "large number of use cases fall into this bucket and it's actually pretty simple and straightforward and dynamodb like we",
    "start": "1088900",
    "end": "1094870"
  },
  {
    "text": "talked about the for the fact that you pick a key you don't have to deal with partitioning re partitioning the data",
    "start": "1094870",
    "end": "1102330"
  },
  {
    "text": "Dunwoody be automatically partitions the data on your behalf and and spreads your",
    "start": "1102330",
    "end": "1107950"
  },
  {
    "text": "data across you know as number of partitions as that are needed each partition size is about you know it is",
    "start": "1107950",
    "end": "1114670"
  },
  {
    "text": "10 gigabytes so if you put more than ten gigabytes there it'll automatically split into multiple partitions you don't",
    "start": "1114670",
    "end": "1121870"
  },
  {
    "text": "have to deal with you know partitioning Andry partitioning it's really won't even know it you really won't even know it you know the only two parameters you",
    "start": "1121870",
    "end": "1129010"
  },
  {
    "text": "may have to worry about is you know really choosing the partition key at one point and maybe provisioning throughput",
    "start": "1129010",
    "end": "1134620"
  },
  {
    "text": "if you're manually provisioning this or auto scaling this or on demand if you use on the menu and you have to worry",
    "start": "1134620",
    "end": "1140260"
  },
  {
    "text": "about this simply choice of a good partition key would automatically you",
    "start": "1140260",
    "end": "1145720"
  },
  {
    "text": "know scale the app so that is the first pattern the second pattern are the dam",
    "start": "1145720",
    "end": "1151690"
  },
  {
    "text": "second pattern is really how do you model one-to-many relationships in many practical scenarios you have one-to-many",
    "start": "1151690",
    "end": "1158770"
  },
  {
    "start": "1158000",
    "end": "1158000"
  },
  {
    "text": "relationships in this specific example let's assume you have a device with a",
    "start": "1158770",
    "end": "1163780"
  },
  {
    "text": "device ID and it is actually a device is supposed to measure temperatures and pressure let's say this device measures",
    "start": "1163780",
    "end": "1170920"
  },
  {
    "text": "temperature and pressure various time points which is denoted as the epoch timestamp there so if you are storing",
    "start": "1170920",
    "end": "1177670"
  },
  {
    "text": "this data you could use a table with the partition key as the device ID and the",
    "start": "1177670",
    "end": "1183670"
  },
  {
    "text": "epoch as the sort key and you know combination of this should be unique that's about the only",
    "start": "1183670",
    "end": "1189399"
  },
  {
    "text": "constraint you have to worry about so once you choose that then you can you can quit II think you can actually quit",
    "start": "1189399",
    "end": "1196179"
  },
  {
    "text": "e this table using a query API within you can say for a given device ID equals",
    "start": "1196179",
    "end": "1202120"
  },
  {
    "text": "one give me all the records pertaining to this device or you can say something",
    "start": "1202120",
    "end": "1207700"
  },
  {
    "text": "to the effect for device ID equals one you know give me all the all the brackets or items with a timestamp",
    "start": "1207700",
    "end": "1215110"
  },
  {
    "text": "greater than a specific epoch or less than or between semantics can also be used so this is another powerful",
    "start": "1215110",
    "end": "1222240"
  },
  {
    "text": "mechanism for modeling 180 one-to-many relationships now this device",
    "start": "1222240",
    "end": "1228100"
  },
  {
    "text": "measurement you know primary partition key in the sort key mechanism can be implemented in",
    "start": "1228100",
    "end": "1235419"
  },
  {
    "text": "a global secondary index as well so the same the same semantics apply there so",
    "start": "1235419",
    "end": "1241929"
  },
  {
    "text": "if you're using a global secondary index then you can you can quit either global secondary index in a similar form yeah",
    "start": "1241929",
    "end": "1248350"
  },
  {
    "text": "so what's in a name sort key it doesn't mean that the data is sorted actually",
    "start": "1248350",
    "end": "1254350"
  },
  {
    "text": "the data is that's a great point in the data on physically he is sorted by the sort key within a specific partition",
    "start": "1254350",
    "end": "1261929"
  },
  {
    "text": "therefore scanning the data either forwards or backwards you know becomes very easy you can also have you know use",
    "start": "1261929",
    "end": "1269950"
  },
  {
    "text": "the query API and say give me the top and records for a specific advice you",
    "start": "1269950",
    "end": "1275380"
  },
  {
    "text": "know give me give me the top end records like in fact the specification of the of",
    "start": "1275380",
    "end": "1281740"
  },
  {
    "text": "the epoch is optional the sort he is optional you can simply query for in all",
    "start": "1281740",
    "end": "1287230"
  },
  {
    "text": "the records for a specific device for example those are some of the credit batters yeah you could use equality on",
    "start": "1287230",
    "end": "1293380"
  },
  {
    "text": "both the repetition key as well as as well as those are key as well right yeah the one nice thing about this approach",
    "start": "1293380",
    "end": "1300279"
  },
  {
    "text": "especially when it comes to you know sort key that that's time based you know",
    "start": "1300279",
    "end": "1307929"
  },
  {
    "text": "is that I can always get that latest value or version for that matter right",
    "start": "1307929",
    "end": "1313150"
  },
  {
    "text": "like I could use that sort key to store different versions of my data correct so",
    "start": "1313150",
    "end": "1319809"
  },
  {
    "text": "if you are versioning the data even if it's a key/value data store if you could use the sort key as a mechanism for",
    "start": "1319809",
    "end": "1327120"
  },
  {
    "text": "versioning this and therefore you can either get the get items in ascending",
    "start": "1327120",
    "end": "1332230"
  },
  {
    "text": "order of the descending order and then you know manually you know version this version this as well so the third",
    "start": "1332230",
    "end": "1340630"
  },
  {
    "text": "semantics that often is very popular is how do you model you know many to many",
    "start": "1340630",
    "end": "1346510"
  },
  {
    "text": "relationships here we need a base table or multiple and a GSI are multiple GSIS",
    "start": "1346510",
    "end": "1354309"
  },
  {
    "start": "1350000",
    "end": "1350000"
  },
  {
    "text": "to model that global second index is to model this relationship in this specific example I'm using the scenarios that of",
    "start": "1354309",
    "end": "1362470"
  },
  {
    "text": "games a user playing multiple games and an each game comprising of multiple",
    "start": "1362470",
    "end": "1368920"
  },
  {
    "text": "users so there is a many to many relationship between users and games so",
    "start": "1368920",
    "end": "1374200"
  },
  {
    "text": "in that scenario you could potentially use a table called user games table",
    "start": "1374200",
    "end": "1379240"
  },
  {
    "text": "where the partition key is the user ID and the sort key is the game ID you",
    "start": "1379240",
    "end": "1384730"
  },
  {
    "text": "could also have a global secondary index on the table in which case the partition",
    "start": "1384730",
    "end": "1390730"
  },
  {
    "text": "key is they use the the game ID and the sort key can be used an ID in which case",
    "start": "1390730",
    "end": "1397150"
  },
  {
    "text": "what happens is that since when you update the table the global secondary index gets automatically populated you",
    "start": "1397150",
    "end": "1403450"
  },
  {
    "text": "could when you when you want to find out for a given user give me all the games",
    "start": "1403450",
    "end": "1408520"
  },
  {
    "text": "that the user played you can query the primary table the user games table if you want to do a reverse lookup you know",
    "start": "1408520",
    "end": "1414790"
  },
  {
    "text": "given a game finding out all the users you could actually query the global secondary index forgetting for getting",
    "start": "1414790",
    "end": "1421960"
  },
  {
    "text": "the data so this comes fairly handy for scenarios where people would have to do",
    "start": "1421960",
    "end": "1428290"
  },
  {
    "text": "and somebody would have to do reverse lookup right so this this would be the",
    "start": "1428290",
    "end": "1433390"
  },
  {
    "text": "example of inverted index basically where you take that sort key yeah and and that becomes the petition key on the",
    "start": "1433390",
    "end": "1440590"
  },
  {
    "text": "global secondary in the and the petition key on the table becomes a sort key on the global",
    "start": "1440590",
    "end": "1447330"
  },
  {
    "text": "secondary in there and then you can you can implement this with to global secondary that successful in fact we'll",
    "start": "1447330",
    "end": "1452730"
  },
  {
    "text": "go through one of the examples going forward we will actually use a base",
    "start": "1452730",
    "end": "1458429"
  },
  {
    "text": "table for simply keeping the keeping the item and then a couple of global secondary indexes to to actually look at",
    "start": "1458429",
    "end": "1465390"
  },
  {
    "text": "the data in two different ways in box example right and then we will walk through so these are that is it so you",
    "start": "1465390",
    "end": "1472380"
  },
  {
    "text": "have basically three constructs to model all kinds of scenarios with DynamoDB",
    "start": "1472380",
    "end": "1478170"
  },
  {
    "text": "either you need to if you have a key value scenario simply use a table with",
    "start": "1478170",
    "end": "1484950"
  },
  {
    "text": "the with with a key and an attributes if you have a one-to-many relationship use",
    "start": "1484950",
    "end": "1490710"
  },
  {
    "text": "a table with the partition key and the sort key the partition key being on the one side and the sort key being on the",
    "start": "1490710",
    "end": "1497040"
  },
  {
    "text": "inside and if you have a many-to-many relationships then you would use a table and a global secondary index or multiple",
    "start": "1497040",
    "end": "1504570"
  },
  {
    "text": "global secondary indexes where you actually reverse you know the keys if",
    "start": "1504570",
    "end": "1509820"
  },
  {
    "text": "you will well your partition key becomes the sort on the other side and vice versa right and we are talking about",
    "start": "1509820",
    "end": "1516360"
  },
  {
    "text": "relationships here yeah so what's up for that right well I know in real life has",
    "start": "1516360",
    "end": "1522210"
  },
  {
    "text": "relationships since you often model those relationships and and what really matters you know to me is really sort of",
    "start": "1522210",
    "end": "1530280"
  },
  {
    "text": "looking at the problem from beginning at the end first in other words what kind of what are the query patterns what are",
    "start": "1530280",
    "end": "1538170"
  },
  {
    "text": "the answers I'm trying to surface and then work backwards from there I had to go design data model using the",
    "start": "1538170",
    "end": "1546179"
  },
  {
    "text": "constructs such as the partition key sort key and the global secondary indexes to be able to to be to be able",
    "start": "1546179",
    "end": "1553200"
  },
  {
    "text": "to actually match that scenarios need around is the way to model with DynamoDB",
    "start": "1553200",
    "end": "1558350"
  },
  {
    "text": "yeah yeah and and some of this really goes back to our fundamental goals that",
    "start": "1558350",
    "end": "1566670"
  },
  {
    "text": "you want to accomplish it and that's the ability to maintain performance at scale which is why we",
    "start": "1566670",
    "end": "1573700"
  },
  {
    "text": "talk about reducing the number of tables so that you know imagine if you had an",
    "start": "1573700",
    "end": "1578830"
  },
  {
    "text": "order yeah yeah and you use the same relational model where you have two",
    "start": "1578830",
    "end": "1583840"
  },
  {
    "text": "tables and maybe dozens of orders in your order item stable yeah you'd end up",
    "start": "1583840",
    "end": "1591160"
  },
  {
    "text": "having to go to the order table and then order items stable for each one of those",
    "start": "1591160",
    "end": "1597460"
  },
  {
    "text": "items yeah and and of course the larger the larger the order gets the more",
    "start": "1597460",
    "end": "1606000"
  },
  {
    "text": "interaction would with that table the more expensive it gets right whereas if",
    "start": "1606000",
    "end": "1611440"
  },
  {
    "text": "you model that aggregate such that it fits in in the same table under the same",
    "start": "1611440",
    "end": "1617500"
  },
  {
    "text": "partition key yeah all that goes away and and you're using access patterns",
    "start": "1617500",
    "end": "1622860"
  },
  {
    "text": "that give you what you need with a single request exactly and then and then",
    "start": "1622860",
    "end": "1629740"
  },
  {
    "text": "the query gets materialized efficiently as well because all the other partitions are pruned and the new date data",
    "start": "1629740",
    "end": "1636610"
  },
  {
    "text": "sufficiently retrieved from a specific partition that the nighttimes belong in",
    "start": "1636610",
    "end": "1642670"
  },
  {
    "text": "and then already being the and I'm never to you know picky or worried about",
    "start": "1642670",
    "end": "1651640"
  },
  {
    "text": "naming conventions because at the end of the name at the end of the day they're just names but that's one of the reasons",
    "start": "1651640",
    "end": "1658990"
  },
  {
    "text": "why we like to say no sequel rather than non-relational because relationships are",
    "start": "1658990",
    "end": "1665890"
  },
  {
    "text": "there and we don't want to create an impression that you don't have",
    "start": "1665890",
    "end": "1672340"
  },
  {
    "text": "relationships you know no sequel technologies in fact I think the power",
    "start": "1672340",
    "end": "1678370"
  },
  {
    "text": "of dynamo TVs also comes in me having the ability to model one-to-many and",
    "start": "1678370",
    "end": "1683890"
  },
  {
    "text": "many-to-many relationship and some of the most equal Indians just have a key value semantics and in which case it",
    "start": "1683890",
    "end": "1689770"
  },
  {
    "text": "becomes very difficult to model real-life scenarios right yeah let's see",
    "start": "1689770",
    "end": "1696700"
  },
  {
    "text": "what's next let's go with that with an example and we'll start gently with the with an",
    "start": "1696700",
    "end": "1704150"
  },
  {
    "text": "example that's fairly basic common and it's one of those examples that really",
    "start": "1704150",
    "end": "1709780"
  },
  {
    "text": "was one of the reasons for the need for these distributed data technologies back",
    "start": "1709780",
    "end": "1716090"
  },
  {
    "text": "in the day at Amazon shopping cart and session services were the ones that",
    "start": "1716090",
    "end": "1723320"
  },
  {
    "text": "needed to scale the most and they really",
    "start": "1723320",
    "end": "1728660"
  },
  {
    "text": "prompted the company to start looking into developing the distributed data technology and the first incarnation of",
    "start": "1728660",
    "end": "1736370"
  },
  {
    "start": "1736000",
    "end": "1736000"
  },
  {
    "text": "that was dynamo and that was now over 10 years ago and so you can think of dynamo",
    "start": "1736370",
    "end": "1742970"
  },
  {
    "text": "DB as a drannit kid in a way of that sort of first version so a real world",
    "start": "1742970",
    "end": "1754520"
  },
  {
    "text": "scenario in a lot of I think use cases you need a shopping cart service and in",
    "start": "1754520",
    "end": "1761240"
  },
  {
    "text": "this particular example a shopping cart turns out to be not a whole lot of data",
    "start": "1761240",
    "end": "1768290"
  },
  {
    "text": "in a single shopping it's also a very critical services it's no the shopping cart then customers cannot shop and",
    "start": "1768290",
    "end": "1774880"
  },
  {
    "text": "mission critical is a mission critical as well right so we're story as we can",
    "start": "1774880",
    "end": "1781850"
  },
  {
    "text": "imagine right cart items items that customers are buying restoring some",
    "start": "1781850",
    "end": "1788810"
  },
  {
    "text": "additional data we need to know cart ID maybe it's or account ID maybe it's not",
    "start": "1788810",
    "end": "1794000"
  },
  {
    "text": "but there is a certainly a mapping from",
    "start": "1794000",
    "end": "1799460"
  },
  {
    "text": "a user to their cart right and so we have we have an idea about the size",
    "start": "1799460",
    "end": "1805880"
  },
  {
    "text": "fairly small we need to be able to handle millions of carts in the table in",
    "start": "1805880",
    "end": "1813050"
  },
  {
    "text": "this case we worked with with the number of the ceiling of about 100 million so",
    "start": "1813050",
    "end": "1818210"
  },
  {
    "text": "we know the data volume itself was not very challenging right for DynamoDB it's",
    "start": "1818210",
    "end": "1824150"
  },
  {
    "text": "never really challenging the access pattern was really key value we just",
    "start": "1824150",
    "end": "1831110"
  },
  {
    "text": "needed to be able to access card data based on the currently so sorry this is a real customer scenario right that you",
    "start": "1831110",
    "end": "1837720"
  },
  {
    "text": "had solved and this is the debate the requirements look like they they wanted",
    "start": "1837720",
    "end": "1843059"
  },
  {
    "text": "to put million you know hundred million cards is what they were thinking about even though a dynamo can have the last",
    "start": "1843059",
    "end": "1849750"
  },
  {
    "text": "much as as many millions or billions that you want to put in there exact there's no limits of how many how many",
    "start": "1849750",
    "end": "1855900"
  },
  {
    "text": "cards you can put them there but this was a real scenario that here you're right for the customers right exactly",
    "start": "1855900",
    "end": "1860940"
  },
  {
    "text": "and the the throughput requirements were",
    "start": "1860940",
    "end": "1866220"
  },
  {
    "text": "more demanding the service would have to",
    "start": "1866220",
    "end": "1871230"
  },
  {
    "text": "have to handle ten thousand rights and ten thousand reads per second right so we are talking high",
    "start": "1871230",
    "end": "1879780"
  },
  {
    "text": "concurrency in this case and so how did",
    "start": "1879780",
    "end": "1886470"
  },
  {
    "text": "we go about modeling this again you know",
    "start": "1886470",
    "end": "1892980"
  },
  {
    "text": "to kind of go back to where people usually start right it's it's a it's a",
    "start": "1892980",
    "end": "1898440"
  },
  {
    "text": "relational database relational model and you could imagine how in this scenario",
    "start": "1898440",
    "end": "1903870"
  },
  {
    "text": "you would you would have a card table and then card item table with dynamodb",
    "start": "1903870",
    "end": "1909480"
  },
  {
    "text": "we want to start by looking at the aggregate in this case the aggregate is",
    "start": "1909480",
    "end": "1915270"
  },
  {
    "text": "the card yeah and so that means to me if if I can store my aggregates in a single",
    "start": "1915270",
    "end": "1922320"
  },
  {
    "text": "table that would be the that would be ideal yeah right and so so I have a question",
    "start": "1922320",
    "end": "1927630"
  },
  {
    "text": "here in this case what actually this may be two ways or more of modeling this right you should use a cart ID as the",
    "start": "1927630",
    "end": "1934429"
  },
  {
    "text": "that's the partition key and an item ID right has the range as well likewise or",
    "start": "1934429",
    "end": "1944280"
  },
  {
    "text": "key key I'll try to stick with the",
    "start": "1944280",
    "end": "1956970"
  },
  {
    "text": "partition key going forward but nevertheless same idea so any any reason",
    "start": "1956970",
    "end": "1962850"
  },
  {
    "text": "why you chose to just go with the key value semantics here right we did",
    "start": "1962850",
    "end": "1968820"
  },
  {
    "text": "consider both both options yeah because it seemed convenient to have the ability",
    "start": "1968820",
    "end": "1975480"
  },
  {
    "start": "1970000",
    "end": "1970000"
  },
  {
    "text": "to access individual items in a cart individually now because they would have",
    "start": "1975480",
    "end": "1981030"
  },
  {
    "text": "the same partition key that means that they would still be co-located stored together but that granularity seemed",
    "start": "1981030",
    "end": "1989399"
  },
  {
    "text": "like a good good benefit additional benefit to have the reason but then it",
    "start": "1989399",
    "end": "1997649"
  },
  {
    "text": "turned out well these carts are small yeah does does that different data model",
    "start": "1997649",
    "end": "2002990"
  },
  {
    "text": "using the item hierarchy as we call it word the cart items would be separate",
    "start": "2002990",
    "end": "2009460"
  },
  {
    "text": "DynamoDB items was there any benefit to doing it that way in this particular",
    "start": "2009460",
    "end": "2014720"
  },
  {
    "text": "scenario we determined that there there really wasn't any benefit so in other",
    "start": "2014720",
    "end": "2020330"
  },
  {
    "text": "words they they were okay with retrieving all the items in a car when they needed to and they didn't know they",
    "start": "2020330",
    "end": "2026570"
  },
  {
    "text": "didn't have the need to retrieve you know a specific item ID so there was a",
    "start": "2026570",
    "end": "2031760"
  },
  {
    "text": "need like that mover model this slightly and the customer reads did not really change because the cart object itself is",
    "start": "2031760",
    "end": "2039530"
  },
  {
    "text": "fairly 1k exactly or yeah that the read capacity unit right which is 4k alright",
    "start": "2039530",
    "end": "2045980"
  },
  {
    "text": "so for reads it did not really make any difference for rights either yeah right",
    "start": "2045980",
    "end": "2053450"
  },
  {
    "text": "we're still using the same amount of write capacity and and this was a simpler simpler model yeah essentially",
    "start": "2053450",
    "end": "2062388"
  },
  {
    "text": "and oftentimes based I realized and if you're using a key value the bag of",
    "start": "2062389",
    "end": "2067490"
  },
  {
    "text": "bytes you can have you could also potentially compress that even if you're having a bigger payloads there's a lot",
    "start": "2067490",
    "end": "2072980"
  },
  {
    "text": "of advantages in using a support key value scenario if there is indeed your access pattern exactly and now with this",
    "start": "2072980",
    "end": "2080868"
  },
  {
    "text": "model and items are stored in in a collection in a map and you could in fact do",
    "start": "2080869",
    "end": "2087510"
  },
  {
    "text": "updates where you don't necessarily have to read the entire card if you already",
    "start": "2087510",
    "end": "2093179"
  },
  {
    "text": "have a state that that card read in in your application you can also do an",
    "start": "2093180",
    "end": "2100890"
  },
  {
    "text": "update to the card and add a new item without having to extract the whole",
    "start": "2100890",
    "end": "2106560"
  },
  {
    "text": "thing or deal with the entire card that's that's still possible one one",
    "start": "2106560",
    "end": "2113460"
  },
  {
    "text": "question that then of course came up was well no sequel databases use eventual",
    "start": "2113460",
    "end": "2119010"
  },
  {
    "text": "consistency how can we make sure that we maintain data consistency when we update",
    "start": "2119010",
    "end": "2125010"
  },
  {
    "text": "the card and so that's that's really the the the key the key concept in fact how",
    "start": "2125010",
    "end": "2132540"
  },
  {
    "text": "do we how do we maintain data consistency no sequel databases and let's take a look at that in in general",
    "start": "2132540",
    "end": "2141770"
  },
  {
    "text": "so if we're talking about adding or removing items to the cart the the",
    "start": "2141770",
    "end": "2149670"
  },
  {
    "text": "algorithm essentially is this we have to read a cart and record the current state",
    "start": "2149670",
    "end": "2157290"
  },
  {
    "text": "usually would use a version that should be and and then when we update the card",
    "start": "2157290",
    "end": "2162770"
  },
  {
    "text": "whether it's to add or remove items or anything and in fact this update should",
    "start": "2162770",
    "end": "2170040"
  },
  {
    "text": "succeed if the version at the time is the same version that we have and that's how we know that nothing else has",
    "start": "2170040",
    "end": "2177030"
  },
  {
    "text": "changed the state of the cart in between right if that fails if that condition",
    "start": "2177030",
    "end": "2184080"
  },
  {
    "text": "fails means there has been an update and we need to reread so we need to reread",
    "start": "2184080",
    "end": "2189840"
  },
  {
    "text": "and start over all right so how one question here",
    "start": "2189840",
    "end": "2195690"
  },
  {
    "text": "dynamodb also has a consistent tree right when you're reading something",
    "start": "2195690",
    "end": "2201090"
  },
  {
    "text": "ranked card you could also say consistent really equals true and then",
    "start": "2201090",
    "end": "2206490"
  },
  {
    "text": "you'll get will retrieve the most current value isn't it so in this case what you're doing is here you don't care",
    "start": "2206490",
    "end": "2213630"
  },
  {
    "text": "to read the consistent value you can simply not use a consistent read and simply do",
    "start": "2213630",
    "end": "2221160"
  },
  {
    "text": "a regular read yeah absolutely even if I because rights are always consistent so when you're writing it if",
    "start": "2221160",
    "end": "2228420"
  },
  {
    "text": "there is a conflict you would fail right but but to optimistic concurrency control is a concurrency control",
    "start": "2228420",
    "end": "2236329"
  },
  {
    "text": "mechanism right so even if I were to use strongly consistent reads I'd still have",
    "start": "2236329",
    "end": "2243210"
  },
  {
    "text": "to use this mechanism to make sure that I maintain data consistency right in",
    "start": "2243210",
    "end": "2248640"
  },
  {
    "start": "2247000",
    "end": "2247000"
  },
  {
    "text": "this case you're assuming multiple writers may write to the car so you're even regarding the scenario where",
    "start": "2248640",
    "end": "2255180"
  },
  {
    "text": "exactly he didn't read something from the cart meanwhile somebody updated it and ran one last updates in are you sure",
    "start": "2255180",
    "end": "2261210"
  },
  {
    "text": "you're using the conditional update feature exactly in dynamo tune to ensure",
    "start": "2261210",
    "end": "2268769"
  },
  {
    "text": "rank you don't have any lost updates exactly cool and and and of course as",
    "start": "2268769",
    "end": "2276289"
  },
  {
    "text": "you know an astute viewer might notice well what what if what if there are a",
    "start": "2276289",
    "end": "2281400"
  },
  {
    "text": "lot of concurrent updates on the same object on the same item and that's a",
    "start": "2281400",
    "end": "2287039"
  },
  {
    "text": "fair question right I could be in a situation where I failed repeatedly",
    "start": "2287039",
    "end": "2293309"
  },
  {
    "text": "right and in that case my latency continues to grow so right contention",
    "start": "2293309",
    "end": "2299480"
  },
  {
    "text": "really is is is the issue here we'd have to miss the concurrency control it's an",
    "start": "2299480",
    "end": "2305160"
  },
  {
    "text": "approach that works really well for low right contention scenarios the use case",
    "start": "2305160",
    "end": "2311430"
  },
  {
    "text": "such as a shopping cart is actually typically one such scenario especially at the cottage shopping cart level right",
    "start": "2311430",
    "end": "2318299"
  },
  {
    "text": "so even though there might be a large number of updates to the shopping cart like it makes examples yeah the idea is",
    "start": "2318299",
    "end": "2325289"
  },
  {
    "text": "that we're in this example we're scaling our ability to serve many many users",
    "start": "2325289",
    "end": "2333299"
  },
  {
    "text": "using their own shopping carts yeah right and and I know there might be scenarios where you you might be sharing",
    "start": "2333299",
    "end": "2340079"
  },
  {
    "text": "your shopping cart with your family member for example we're still not talking about high right",
    "start": "2340079",
    "end": "2348440"
  },
  {
    "text": "contention even in such scenarios but we do have to have a correct algorithm",
    "start": "2348440",
    "end": "2353720"
  },
  {
    "text": "mechanism to maintain that data consistency and optimistic concurrency",
    "start": "2353720",
    "end": "2359569"
  },
  {
    "text": "control is that basic mechanism to do that with distributed no sequel",
    "start": "2359569",
    "end": "2366400"
  },
  {
    "text": "databases and there in case of DynamoDB right just to show some of the well JSON",
    "start": "2366400",
    "end": "2377359"
  },
  {
    "text": "requests right what they what they look like we're getting the card yeah will record the version and then on updates",
    "start": "2377359",
    "end": "2384980"
  },
  {
    "text": "we can do conditional put or update item in fact and in fact to go back here this",
    "start": "2384980",
    "end": "2393319"
  },
  {
    "text": "is the processor we do have to read the read the card and get that version yeah but we don't have to do that repeatedly",
    "start": "2393319",
    "end": "2399349"
  },
  {
    "text": "because if we're maintaining that object in memory and we do an update let's say",
    "start": "2399349",
    "end": "2404900"
  },
  {
    "text": "I'm putting more and more more items into my card I don't have to do that really single talk every single time",
    "start": "2404900",
    "end": "2411440"
  },
  {
    "text": "because I'm also maintaining that object yeah and as long as my updates go through yeah means that I'm actually in",
    "start": "2411440",
    "end": "2418069"
  },
  {
    "text": "sync yeah with with the database so I can continue so back to your question I do",
    "start": "2418069",
    "end": "2427880"
  },
  {
    "text": "have to call get item and at some point right should that call be strongly",
    "start": "2427880",
    "end": "2434390"
  },
  {
    "text": "consistent or eventually consistent right does it matter yeah and it doesn't because the",
    "start": "2434390",
    "end": "2439579"
  },
  {
    "text": "correctness of this approach does not depend on whether I'm using in the system yeah because let's say let's say",
    "start": "2439579",
    "end": "2446809"
  },
  {
    "text": "that I'm using eventually consistent read but what will happen is the",
    "start": "2446809",
    "end": "2452569"
  },
  {
    "text": "condition will fail and then I will just retry I will argue that in in the use",
    "start": "2452569",
    "end": "2459559"
  },
  {
    "text": "case such as the shopping cart service it actually makes sense not to use strongly consistent because typically",
    "start": "2459559",
    "end": "2467359"
  },
  {
    "text": "that right contention is not going to be in high dynamic consistency is very strong very you know the more data gets",
    "start": "2467359",
    "end": "2474200"
  },
  {
    "text": "consistent very fast in click so you might as well use a regular get Ryan not mentioned comprising read",
    "start": "2474200",
    "end": "2481300"
  },
  {
    "text": "equals true yeah and then since you billion conditional updates then it's totally fine if there is a conflict",
    "start": "2481300",
    "end": "2487720"
  },
  {
    "text": "it'll fail then you can retry exactly yeah so I'm curious that have we seen",
    "start": "2487720",
    "end": "2494230"
  },
  {
    "text": "any any questions from our friends in the in the chatroom let me check",
    "start": "2494230",
    "end": "2500830"
  },
  {
    "text": "yeah keep go we have Daniel Pete and Sean our teammates that are hanging out",
    "start": "2500830",
    "end": "2506109"
  },
  {
    "text": "with y'all in the chatroom so so to sum",
    "start": "2506109",
    "end": "2512470"
  },
  {
    "text": "it up reusing conditions in DynamoDB condition expression to be specific to",
    "start": "2512470",
    "end": "2518580"
  },
  {
    "start": "2518000",
    "end": "2518000"
  },
  {
    "text": "implement optimistic concurrency control which ensures data consistency between",
    "start": "2518580",
    "end": "2523720"
  },
  {
    "text": "updates the iron core can be eventually eventually consistent and you should",
    "start": "2523720",
    "end": "2529599"
  },
  {
    "text": "take advantage of that one one other thing so I forgot what I wanted to say",
    "start": "2529599",
    "end": "2542320"
  },
  {
    "text": "never mind move on another example that we mentioned earlier is about using",
    "start": "2542320",
    "end": "2548400"
  },
  {
    "text": "global secondary indexes to to implement",
    "start": "2548400",
    "end": "2554290"
  },
  {
    "text": "efficient and one question here okay from toulebonne and then in the case of",
    "start": "2554290",
    "end": "2560770"
  },
  {
    "text": "order and order items it is many to many relationships what if we want to store",
    "start": "2560770",
    "end": "2567220"
  },
  {
    "text": "one order with many items more than ten as one transaction transactional writes",
    "start": "2567220",
    "end": "2573700"
  },
  {
    "text": "can only support ten items for transactions how would we have transactions in that case that's a great",
    "start": "2573700",
    "end": "2580599"
  },
  {
    "text": "question right so if you're going to transact we you you have a limit of ten",
    "start": "2580599",
    "end": "2585790"
  },
  {
    "text": "items you know per transaction so I think this semantics can be used only for ten items you know as a whole",
    "start": "2585790",
    "end": "2594760"
  },
  {
    "text": "together and then you know this is where in the modeling semantics that we have",
    "start": "2594760",
    "end": "2600130"
  },
  {
    "text": "used here you know many customers want to you know read all of this thing as one unit anyway so actually simply using",
    "start": "2600130",
    "end": "2607210"
  },
  {
    "text": "a key and keeping all those items has that bag of bytes yeah so come in quite handy",
    "start": "2607210",
    "end": "2613130"
  },
  {
    "text": "right or you know kind of compressing that and spreading that across ten items",
    "start": "2613130",
    "end": "2618650"
  },
  {
    "text": "if you will in other words your sort key is really a mechanism for you did get a",
    "start": "2618650",
    "end": "2627260"
  },
  {
    "text": "number of items want too many relations to be the parent anyway so it doesn't have to correspond to a single single",
    "start": "2627260",
    "end": "2634340"
  },
  {
    "text": "item you could potentially compress multiple items the word this gets to be",
    "start": "2634340",
    "end": "2640160"
  },
  {
    "text": "somewhat if you're having a reverse lookup you're not give me an order an item and orders where these items for",
    "start": "2640160",
    "end": "2648740"
  },
  {
    "text": "faces then literally you have to actually put that on a single item in which case you know you can't transact",
    "start": "2648740",
    "end": "2654770"
  },
  {
    "text": "right all of them together that would be you know one of the limitations and that",
    "start": "2654770",
    "end": "2661220"
  },
  {
    "text": "does become a little bit awkward though right because you wouldn't actually like to work with your business objects right",
    "start": "2661220",
    "end": "2669380"
  },
  {
    "text": "note your order items and so another option would be to go back to using a",
    "start": "2669380",
    "end": "2675470"
  },
  {
    "text": "pattern that we used to use for these scenarios before we had transactions in the first place which is locking",
    "start": "2675470",
    "end": "2683510"
  },
  {
    "text": "essentially your items so let's say you have 20 items one one of the one of the",
    "start": "2683510",
    "end": "2691430"
  },
  {
    "text": "items in that item collection in dynamodb is a metadata item for your",
    "start": "2691430",
    "end": "2698210"
  },
  {
    "text": "order yeah where one of the attributes is is a essentially a lock yeah and so what you",
    "start": "2698210",
    "end": "2704510"
  },
  {
    "text": "would what you would do is take out the lock right to that attribute and and",
    "start": "2704510",
    "end": "2711230"
  },
  {
    "text": "then essentially implement transaction yourself make changes do do rights to",
    "start": "2711230",
    "end": "2718160"
  },
  {
    "text": "those value while you hold the lock and then update the update the lock right to release it basically so it does become",
    "start": "2718160",
    "end": "2727150"
  },
  {
    "text": "just more more work to do but this is how we used to do it before transactions",
    "start": "2727150",
    "end": "2734860"
  },
  {
    "text": "we had to do it to accomplish that basically and and that that is true the",
    "start": "2734860",
    "end": "2741670"
  },
  {
    "text": "transactional API currently has that limitation but we've actually heard a",
    "start": "2741670",
    "end": "2748030"
  },
  {
    "text": "few more than a few places customers asking for more than 10 items right",
    "start": "2748030",
    "end": "2754300"
  },
  {
    "text": "we're taking a look at that right well well aware of that request and asked so",
    "start": "2754300",
    "end": "2761130"
  },
  {
    "text": "yeah thank you for bringing that up a great question mm-hmm yes we're about 45",
    "start": "2761130",
    "end": "2771520"
  },
  {
    "text": "minutes into the show yeah and so this example is about the",
    "start": "2771520",
    "end": "2777430"
  },
  {
    "text": "messaging application where we need to show an inbox and outbox view of",
    "start": "2777430",
    "end": "2783640"
  },
  {
    "start": "2780000",
    "end": "2780000"
  },
  {
    "text": "messages that we get something that's easy to relate to because it's very similar for example to an email client",
    "start": "2783640",
    "end": "2790830"
  },
  {
    "text": "application that we all use every day we would like to model an inbox view where",
    "start": "2790830",
    "end": "2797890"
  },
  {
    "text": "we can limit the view to let's say 50 so one other question that comes up before",
    "start": "2797890",
    "end": "2803500"
  },
  {
    "text": "you jump into this okay this is question from slot to low the version idea is",
    "start": "2803500",
    "end": "2809170"
  },
  {
    "text": "there any specific reason why it is not an integer but a butters but a string I",
    "start": "2809170",
    "end": "2815140"
  },
  {
    "text": "guess slot two is is loading to your version identifier being that string",
    "start": "2815140",
    "end": "2824040"
  },
  {
    "text": "yeah right anything that you like really good yes because you're doing an",
    "start": "2824040",
    "end": "2829990"
  },
  {
    "text": "equality check on this the version numbers the version number could be an integer this is a great question again so yeah",
    "start": "2829990",
    "end": "2838270"
  },
  {
    "text": "the the only thing about about that is though if it's when it's an integer",
    "start": "2838270",
    "end": "2844090"
  },
  {
    "text": "yeah we can easily basically go an increment increment write a version",
    "start": "2844090",
    "end": "2849640"
  },
  {
    "text": "that's the reason why you know we're going with with it with a number yeah so",
    "start": "2849640",
    "end": "2854800"
  },
  {
    "text": "they did use a number or a string I didn't I used I use the number okay yeah yeah so and yeah because then it becomes",
    "start": "2854800",
    "end": "2864430"
  },
  {
    "text": "easy to just coming pump diversion and you know keep going that way look that's the that's",
    "start": "2864430",
    "end": "2870490"
  },
  {
    "text": "the reason why we would use the number there and so messaging application",
    "start": "2870490",
    "end": "2877540"
  },
  {
    "text": "modeling and inbox where we need to show messages up to 50 in in a single inbox",
    "start": "2877540",
    "end": "2884710"
  },
  {
    "text": "view and then same for the outbox restoring messages in in the table so",
    "start": "2884710",
    "end": "2891880"
  },
  {
    "start": "2889000",
    "end": "2889000"
  },
  {
    "text": "first take first attempt at solving this problem Mike I could see essentially",
    "start": "2891880",
    "end": "2898660"
  },
  {
    "text": "saying well we need to show messages for per user right so why not use that",
    "start": "2898660",
    "end": "2904840"
  },
  {
    "text": "recipient as the partition key and then we do want to have messages ordered by",
    "start": "2904840",
    "end": "2911640"
  },
  {
    "text": "time they receive them so the day of the",
    "start": "2911640",
    "end": "2916960"
  },
  {
    "text": "message becomes the sort key the messages could have attachments so we",
    "start": "2916960",
    "end": "2922750"
  },
  {
    "text": "could have in this case a view that has up to 50 items and each one could be up",
    "start": "2922750",
    "end": "2929380"
  },
  {
    "text": "to 200 250 kilobytes in size so you know",
    "start": "2929380",
    "end": "2936040"
  },
  {
    "text": "if we calculate the cost of such a query excuse me 50 items let's say that",
    "start": "2936040",
    "end": "2944500"
  },
  {
    "start": "2938000",
    "end": "2938000"
  },
  {
    "text": "average item size 10 kilobytes then we were applying the conversion ratio we're",
    "start": "2944500",
    "end": "2950650"
  },
  {
    "text": "trying to calculate the costing in read capacity units right so the conversion ratio uses the size of read capacity",
    "start": "2950650",
    "end": "2959680"
  },
  {
    "text": "unit which is 4 kilobytes and then we're perfectly fine with eventually",
    "start": "2959680",
    "end": "2965290"
  },
  {
    "text": "consistent reads we still come come up with 63 read capacity in it every time",
    "start": "2965290",
    "end": "2972370"
  },
  {
    "text": "so let's say we're dealing with hundreds thousands let alone millions users all",
    "start": "2972370",
    "end": "2979150"
  },
  {
    "text": "right so every time I look at my inbox that query would cost me 63 read",
    "start": "2979150",
    "end": "2985510"
  },
  {
    "text": "capacity units and that's because my messages might have attachments might be",
    "start": "2985510",
    "end": "2991060"
  },
  {
    "text": "anywhere from a few hundred bytes to maybe few hundred kilobytes inside",
    "start": "2991060",
    "end": "2997430"
  },
  {
    "text": "if I touch a PowerPoint slide and write 20 megabytes yes so but do I need all",
    "start": "2997430",
    "end": "3004990"
  },
  {
    "text": "that in my view yeah right it's my inbox view I don't need time another thing",
    "start": "3004990",
    "end": "3010240"
  },
  {
    "text": "that it does is also kind of when you're reading that many number of read capacity units from a specific partition",
    "start": "3010240",
    "end": "3016240"
  },
  {
    "text": "so you know I think of this as a heat so it was there's a lot of read capacity",
    "start": "3016240",
    "end": "3021370"
  },
  {
    "text": "units directed of the specific partition so I'm naturally thinking is there a way to spread the you know spread the read",
    "start": "3021370",
    "end": "3028330"
  },
  {
    "text": "heat of read because that's exactly across multiple partitions rather than you know right and also intuitively I",
    "start": "3028330",
    "end": "3036220"
  },
  {
    "text": "know that I know what's going on right I know that my messages are could be fat could be big and I also know that I",
    "start": "3036220",
    "end": "3042250"
  },
  {
    "text": "don't need that you know in my view deciding for the solution right now I know me too so you called it separating the bulk",
    "start": "3042250",
    "end": "3049570"
  },
  {
    "text": "data right let's say we store messages partition by message ID in a message",
    "start": "3049570",
    "end": "3054790"
  },
  {
    "text": "table let's see for Kenya as a GSI right so the nice thing about GSIS is that we",
    "start": "3054790",
    "end": "3060790"
  },
  {
    "start": "3056000",
    "end": "3056000"
  },
  {
    "text": "can project exactly what we need in that view to to the GSI and that GSI now we",
    "start": "3060790",
    "end": "3066430"
  },
  {
    "text": "do want to partition on recipient a date and what else do we need sender subject",
    "start": "3066430",
    "end": "3072990"
  },
  {
    "text": "message ID because it's a partition key on the table will be automatically",
    "start": "3072990",
    "end": "3079720"
  },
  {
    "text": "included right and and you know interestingly not I have to comment on that what is the message ID in this case",
    "start": "3079720",
    "end": "3086410"
  },
  {
    "text": "it's a foreign key yeah basically right from our GSI back to the table but now",
    "start": "3086410",
    "end": "3092440"
  },
  {
    "text": "my queries are a lot more cost-effective well they're more efficient I'm sending",
    "start": "3092440",
    "end": "3097810"
  },
  {
    "text": "less data annoying they're faster because I'm getting instead of I don't",
    "start": "3097810",
    "end": "3103360"
  },
  {
    "text": "know 500 kilobytes and I might be getting you know just a few kilobytes back from you for 50 messages because",
    "start": "3103360",
    "end": "3112710"
  },
  {
    "text": "each each of my items in the in the projected GSI is maybe just not even",
    "start": "3112710",
    "end": "3119170"
  },
  {
    "text": "it's maybe 128 bytes we are the couple of hundred bytes right and the cost is",
    "start": "3119170",
    "end": "3124990"
  },
  {
    "text": "down to one read capacity unit so also the idea here is that with",
    "start": "3124990",
    "end": "3130059"
  },
  {
    "text": "dynamo DB when we have a GSI that we satisfy our queries we structure remodel",
    "start": "3130059",
    "end": "3137589"
  },
  {
    "text": "that GSI so that whatever access battery we needed for would be completely",
    "start": "3137589",
    "end": "3144760"
  },
  {
    "text": "satisfied by querying the GSI so when we query the GSI we get the we get the data",
    "start": "3144760",
    "end": "3151630"
  },
  {
    "text": "that we need and we don't need to query the table and of course when you click let's say you're in your client app you",
    "start": "3151630",
    "end": "3158289"
  },
  {
    "text": "click on a particular item that's when you use that message ID to access the",
    "start": "3158289",
    "end": "3163539"
  },
  {
    "text": "entire item from from the message table and in box GSI same idea right I mean I",
    "start": "3163539",
    "end": "3171359"
  },
  {
    "start": "3167000",
    "end": "3167000"
  },
  {
    "text": "meant out box but you know this this really shows where were we",
    "start": "3171359",
    "end": "3176529"
  },
  {
    "text": "select the attributes that we want to project and now the GSI satisfies our",
    "start": "3176529",
    "end": "3182309"
  },
  {
    "text": "query inbox access pattern yeah we do we do the same for outbox GSI select the",
    "start": "3182309",
    "end": "3189940"
  },
  {
    "text": "attributes have a projection for the outbox partition key will be the sender in this case maybe that makes sense and",
    "start": "3189940",
    "end": "3198039"
  },
  {
    "text": "we're done so our messaging gap now as the main table has a materialized view",
    "start": "3198039",
    "end": "3204430"
  },
  {
    "text": "that's served by the inbox GSI and another materialized view that's sorted by the budgies whereas the primary table",
    "start": "3204430",
    "end": "3211779"
  },
  {
    "text": "is just a you know key pass a key it's",
    "start": "3211779",
    "end": "3218380"
  },
  {
    "text": "exactly just the key value based yeah what are the two global secondary",
    "start": "3218380",
    "end": "3224049"
  },
  {
    "text": "indexes you can think of them as views that allow you to paint your inbox and",
    "start": "3224049",
    "end": "3229839"
  },
  {
    "text": "the outbox if you will right and then not actually read all the big messages",
    "start": "3229839",
    "end": "3235450"
  },
  {
    "text": "yeah I only read those messages when somebody clicks on that item and then",
    "start": "3235450",
    "end": "3241359"
  },
  {
    "text": "wants to actually download that file or whatever is the large object exactly and",
    "start": "3241359",
    "end": "3246579"
  },
  {
    "text": "and and in fact this really goes back to couple of I think goals that we always",
    "start": "3246579",
    "end": "3253210"
  },
  {
    "text": "have when we when we do data modeling in LD be outside of trivia use cases write",
    "start": "3253210",
    "end": "3261630"
  },
  {
    "text": "DynamoDB is about scale and performance scale but cost is always a concern we",
    "start": "3261630",
    "end": "3267910"
  },
  {
    "start": "3266000",
    "end": "3266000"
  },
  {
    "text": "want to model basically in a way that's going to be cost effective as we scale",
    "start": "3267910",
    "end": "3274350"
  },
  {
    "text": "because ultimately you know you it's a it's a good problem to have what you",
    "start": "3274350",
    "end": "3281020"
  },
  {
    "text": "want to solve it in a way that they will continue to work as you grow yeah and",
    "start": "3281020",
    "end": "3286380"
  },
  {
    "text": "this is a really good example of that too because we really trimmed down that",
    "start": "3286380",
    "end": "3292270"
  },
  {
    "text": "materialized view the cost of queries is not more than it really needs to be yeah",
    "start": "3292270",
    "end": "3297910"
  },
  {
    "text": "and and also from the performance standpoint we're more efficient because",
    "start": "3297910",
    "end": "3305290"
  },
  {
    "text": "we're not unnecessarily querying and retrieving data that we don't need in",
    "start": "3305290",
    "end": "3311530"
  },
  {
    "text": "many cases actually being cost-efficient allows you to pick the right design pattern as well so even when we design",
    "start": "3311530",
    "end": "3318880"
  },
  {
    "text": "services I need of us we designed them to do their function extremely well and at low cost so kind of in many cases you",
    "start": "3318880",
    "end": "3326980"
  },
  {
    "text": "know kind of optimizing on cost allows you to pick the best design pattern as well right so cost matter yeah",
    "start": "3326980",
    "end": "3334270"
  },
  {
    "text": "absolutely cost as well as performance right I think we're just about out of",
    "start": "3334270",
    "end": "3339730"
  },
  {
    "text": "time and I was wondering if there any other questions yeah so I think thank you for coming to this we plan to do",
    "start": "3339730",
    "end": "3346780"
  },
  {
    "text": "this session every week so bring your questions we intend this to be a two-way communication for us to solve these",
    "start": "3346780",
    "end": "3352390"
  },
  {
    "text": "issues as we discuss this concepts as well so there's any more questions please you know keep sending them keep",
    "start": "3352390",
    "end": "3360040"
  },
  {
    "text": "them for next time I'm going back to the question maybe one last one where I",
    "start": "3360040",
    "end": "3367200"
  },
  {
    "text": "think slot-2 asked in our example you",
    "start": "3367200",
    "end": "3373750"
  },
  {
    "text": "had used v4 even though you meant this to be a number you put a string we four",
    "start": "3373750",
    "end": "3380020"
  },
  {
    "text": "rather than a number for version so I think the v4 was closed we're supposed to be a placeholder for where's the four",
    "start": "3380020",
    "end": "3386320"
  },
  {
    "text": "yeah which is some which might be will adjust the slice it's the semantics I think",
    "start": "3386320",
    "end": "3393010"
  },
  {
    "text": "actually it's just the semantics of the of those variables yeah yeah so in fact",
    "start": "3393010",
    "end": "3399040"
  },
  {
    "text": "it is yeah but then the example shows a string so that string it intervie for",
    "start": "3399040",
    "end": "3406299"
  },
  {
    "text": "imagine that to be a nine out of ten or a number of you exactly yeah sorry if",
    "start": "3406299",
    "end": "3411760"
  },
  {
    "text": "that was confusing but yeah and thank you for pointing that out cool there's",
    "start": "3411760",
    "end": "3417640"
  },
  {
    "text": "no more questions thank you for being at our session again and look forward to",
    "start": "3417640",
    "end": "3423040"
  },
  {
    "text": "seeing you again and we're continuing with with data modeling and and in dynamodb next time",
    "start": "3423040",
    "end": "3431049"
  },
  {
    "text": "do some advanced data modeling yeah I think so and looking forward to the next",
    "start": "3431049",
    "end": "3437619"
  },
  {
    "text": "session yeah thank you thank you bye bye",
    "start": "3437619",
    "end": "3442588"
  },
  {
    "text": "[Music]",
    "start": "3444410",
    "end": "3451808"
  }
]