[
  {
    "start": "0",
    "end": "66000"
  },
  {
    "text": "welcome to build with dynamodb my name is Enzo ch and the Solutions Architect focusing on those sequel dynamo DB",
    "start": "450",
    "end": "8130"
  },
  {
    "text": "specialist team and with me today hi guys my name is Shawn Shriver I'm a DynamoDB special solutions",
    "start": "8130",
    "end": "14639"
  },
  {
    "text": "architect same role as Eden and today we're gonna walk you through no sequel",
    "start": "14639",
    "end": "19859"
  },
  {
    "text": "data model in part two we kind of settled on a format for today we'd love to tell you some exciting new things",
    "start": "19859",
    "end": "25769"
  },
  {
    "text": "that have come from DynamoDB in the recent past including one of our most popular updates one that has had the",
    "start": "25769",
    "end": "33690"
  },
  {
    "text": "most retweets on Twitter customers are super excited about this this very first new item or at least from dynamo last",
    "start": "33690",
    "end": "40860"
  },
  {
    "text": "week yeah so then what DB of that capacity might be something you already know about we're super excited about the",
    "start": "40860",
    "end": "47219"
  },
  {
    "text": "feature but now even more so that it's in fact instant so just as of this last",
    "start": "47219",
    "end": "52920"
  },
  {
    "text": "week I think right we we announced that adaptive capacity is now instant which means that the the lead time that it",
    "start": "52920",
    "end": "60930"
  },
  {
    "text": "needed to react when first came out is not necessary anymore and now it",
    "start": "60930",
    "end": "66780"
  },
  {
    "text": "basically acts instantaneously on your tables and as before of course it's it's",
    "start": "66780",
    "end": "73260"
  },
  {
    "text": "there and it never goes away so what what it means is that as your application traffic workload changes",
    "start": "73260",
    "end": "80750"
  },
  {
    "text": "dynamodb adjusts per petition provisioning dynamically to accommodate",
    "start": "80750",
    "end": "86040"
  },
  {
    "text": "your traffic fluctuations now one thing that I'd like to point out I think we're",
    "start": "86040",
    "end": "91710"
  },
  {
    "text": "super excited about the fact that it's not just working like that so very",
    "start": "91710",
    "end": "97110"
  },
  {
    "text": "seamlessly basically right precisely it's it's instantly and so dynamo doctor",
    "start": "97110",
    "end": "102720"
  },
  {
    "text": "capacity is what basically let allows you to use the amount of capacity that you paid for and the provision and",
    "start": "102720",
    "end": "108630"
  },
  {
    "text": "throughput model so we used to have this slide that we'd present and it would show okay here's where throttling begins",
    "start": "108630",
    "end": "114570"
  },
  {
    "text": "here's where adaptive capacity kicks in and that gap was and we're from 5:00 to usually closer to 30 minutes and now it",
    "start": "114570",
    "end": "121860"
  },
  {
    "text": "happens in a split second and so the truth is with the doctor capacity when we say it's instantly available it means",
    "start": "121860",
    "end": "128220"
  },
  {
    "text": "that it is always available is always running so with zero reaction time yes and so",
    "start": "128220",
    "end": "135280"
  },
  {
    "text": "that's a feature that was released without any you know impact to end-users there's no requirement that you upgrade",
    "start": "135280",
    "end": "142270"
  },
  {
    "text": "your dynamodb API version it's available in all regions and on tables as well as",
    "start": "142270",
    "end": "148300"
  },
  {
    "text": "GS size on tables as well as global second index is exactly and you know one",
    "start": "148300",
    "end": "153490"
  },
  {
    "text": "of the reasons why we were able to you know release this is that we had so much development work that went into",
    "start": "153490",
    "end": "158530"
  },
  {
    "text": "on-demand capacity which allows you to only pay for what you use and and so we took some",
    "start": "158530",
    "end": "164710"
  },
  {
    "start": "160000",
    "end": "322000"
  },
  {
    "text": "of the technology and ply it to provision 3.0 yeah yes I see yeah one",
    "start": "164710",
    "end": "172510"
  },
  {
    "text": "thing that I'd like to point out about that is that of course there's still limits on what a single petition can do",
    "start": "172510",
    "end": "179680"
  },
  {
    "text": "so not to be confused yeah that's a very common question so ed uh you know adoptive capacity now that since",
    "start": "179680",
    "end": "186970"
  },
  {
    "text": "available sounds like it's uh it may even make partitions irrelevant that's",
    "start": "186970",
    "end": "192370"
  },
  {
    "text": "what I I had a customer asked on Twitter late last week so our partition is still",
    "start": "192370",
    "end": "199600"
  },
  {
    "text": "important with adaptive capacity now that's instantly available what are some of the things that we need to keep in",
    "start": "199600",
    "end": "205150"
  },
  {
    "text": "mind right right exactly but but you can see so that if you step back and look at",
    "start": "205150",
    "end": "210520"
  },
  {
    "text": "what has been done with the service over the past couple of years you can see the trend basically that really goes towards",
    "start": "210520",
    "end": "219390"
  },
  {
    "text": "completely making all this transparent",
    "start": "219390",
    "end": "225010"
  },
  {
    "text": "and super easy to use right for different kinds of workloads and that's",
    "start": "225010",
    "end": "231010"
  },
  {
    "text": "really kind of what we're looking at here this is one step on that so and",
    "start": "231010",
    "end": "238900"
  },
  {
    "text": "then let's say I have a table and I got 10,000 WCU's on it which are right to pass units which would let me write ten",
    "start": "238900",
    "end": "246100"
  },
  {
    "text": "thousand one kilobyte rows every single second if I had a table that I had today",
    "start": "246100",
    "end": "252310"
  },
  {
    "text": "and it had this adaptive capacity feature of course because that's built-in would I be able to say update a",
    "start": "252310",
    "end": "258160"
  },
  {
    "text": "single row ten thousand times per second right that's a good question no you could not",
    "start": "258160",
    "end": "263800"
  },
  {
    "text": "do that right because a single row could still only receive up to 1000 or consume",
    "start": "263800",
    "end": "270099"
  },
  {
    "text": "up to 1000 right capacity units so if you're talking about updates that are consuming 1 right capacity unit then you",
    "start": "270099",
    "end": "278500"
  },
  {
    "text": "can only still drive up to 1,000 right requests to a single room but and if I",
    "start": "278500",
    "end": "284050"
  },
  {
    "text": "had a situation where I had 10 rows and I had to you know send 500 requests per",
    "start": "284050",
    "end": "289900"
  },
  {
    "text": "second here fine requests per second per that you know per second over this partition but I only had you know half",
    "start": "289900",
    "end": "295780"
  },
  {
    "text": "as much or even a quarter as much provision capacity this is where doctor capacity will come to play exam no",
    "start": "295780",
    "end": "300849"
  },
  {
    "text": "longer have to rebalance capacity on the back end on deck available instantly and and this this is really great because",
    "start": "300849",
    "end": "306789"
  },
  {
    "text": "allows us not to have to worry about managing our petitions as much right we",
    "start": "306789",
    "end": "312880"
  },
  {
    "text": "can scale out and increase the number of petitions and then what DB will dynamically just manage the traffic",
    "start": "312880",
    "end": "319030"
  },
  {
    "text": "workload as as needed so very cool you also want to tell us about something",
    "start": "319030",
    "end": "324940"
  },
  {
    "start": "322000",
    "end": "496000"
  },
  {
    "text": "else oh yeah so I'm really excited about this I like the EMR dynamodb connector so I",
    "start": "324940",
    "end": "332650"
  },
  {
    "text": "know it's not like a whole bunch of letters put together but it's called and github will throw a link up there called",
    "start": "332650",
    "end": "337900"
  },
  {
    "text": "the EMR dynamodb connector it is a library that is open source and it's",
    "start": "337900",
    "end": "344740"
  },
  {
    "text": "what allows you to backup your dynamodb data to s3 so if you are using something",
    "start": "344740",
    "end": "352150"
  },
  {
    "text": "like data pipeline to export your table contents to s3 and this is very common for customers who have like analytics",
    "start": "352150",
    "end": "359500"
  },
  {
    "text": "jobs that run the background for example I have a customer they stored their review data for all of their properties",
    "start": "359500",
    "end": "367240"
  },
  {
    "text": "and so they have to track all these relationships like who's the reviewer who's the review EE which is the the",
    "start": "367240",
    "end": "373960"
  },
  {
    "text": "owner and then you know what was the entity that was reviewed they want to both establish links between all of that",
    "start": "373960",
    "end": "380500"
  },
  {
    "text": "in order to do that we're talking about you know a lot of data processing so they run these EMR jobs to back up data",
    "start": "380500",
    "end": "386919"
  },
  {
    "text": "2 2 2 s 3 s 3 and a problem that",
    "start": "386919",
    "end": "392199"
  },
  {
    "text": "customers had is that this connector didn't support on-demand capacity because on demand doesn't have a preset amount",
    "start": "392199",
    "end": "400090"
  },
  {
    "text": "of units instead it's based on your account limits in that region and I believe of what's the limit in say the",
    "start": "400090",
    "end": "407620"
  },
  {
    "text": "Northern Virginia region for dynamodb right capacity is that forty six forty",
    "start": "407620",
    "end": "412780"
  },
  {
    "text": "thousand forty thousand I think is the fault limit yeah so so then with this",
    "start": "412780",
    "end": "418090"
  },
  {
    "text": "limit what we do with the new connector is we let you apply a percentage such as",
    "start": "418090",
    "end": "423670"
  },
  {
    "text": "twenty five percent and we use that we multiply it by the table limit of forty thousand and we use that to set the the",
    "start": "423670",
    "end": "431560"
  },
  {
    "text": "ingest speed or the export speed from your diamond ODB table so this is enabling getting stay into s3 so you can",
    "start": "431560",
    "end": "438850"
  },
  {
    "text": "create a PFD nough it's putting destry's so you can create it be a hive or hql once it's an s3 you can also load it",
    "start": "438850",
    "end": "445990"
  },
  {
    "text": "into into redshift or repartition it so that it can be queried you know easily",
    "start": "445990",
    "end": "452380"
  },
  {
    "text": "with from Athena say if it's in like parque format so it opens up a whole wide swath of possibilities and so the",
    "start": "452380",
    "end": "460030"
  },
  {
    "text": "reason why this is our big announcement is it's not available yet in EMR",
    "start": "460030",
    "end": "465580"
  },
  {
    "text": "so you have to go grab this library off of the github repo clone it compile that",
    "start": "465580",
    "end": "471910"
  },
  {
    "text": "jar place it in s3 bucket and then either change the object ACL or go ahead",
    "start": "471910",
    "end": "479169"
  },
  {
    "text": "and create a sign URL and use that in your EMR jobs and your steps whenever you're trying to create creepies exports",
    "start": "479169",
    "end": "484570"
  },
  {
    "text": "you actually mint table but well worth the well worth the extra effort if you",
    "start": "484570",
    "end": "489700"
  },
  {
    "text": "if you really need to feature precisely unblocking those customers who really want to use that on demand capacity",
    "start": "489700",
    "end": "494770"
  },
  {
    "text": "right awesome so um before we jump into the new content for this session I'd",
    "start": "494770",
    "end": "501850"
  },
  {
    "start": "496000",
    "end": "702000"
  },
  {
    "text": "like us to do a quick review of what we went over last time so we talked about the normalization on aggregate to some",
    "start": "501850",
    "end": "508510"
  },
  {
    "text": "of the key concepts in know sequel data modeling right going from relational database where we have multiple tables",
    "start": "508510",
    "end": "514530"
  },
  {
    "text": "to know sequel where we have aggregates right and what our aggregate collections",
    "start": "514530",
    "end": "520780"
  },
  {
    "text": "of related data that we read and write together an example could be an order or",
    "start": "520780",
    "end": "526150"
  },
  {
    "text": "a shopping car and we go from a normalized kima 2d normalized aggregates so that we can",
    "start": "526150",
    "end": "533230"
  },
  {
    "text": "take advantage of efficiencies that we get with no sequel where we have charting and partitioning right so the",
    "start": "533230",
    "end": "541120"
  },
  {
    "text": "idea here is that we reduce the number of requests that we need to make whether we read or write data so in this example",
    "start": "541120",
    "end": "549490"
  },
  {
    "text": "again from last time we we have our aggregates orders in this case that have",
    "start": "549490",
    "end": "555459"
  },
  {
    "text": "a partition key and the choice of partition case here very important for even evenly balanced distribution of not",
    "start": "555459",
    "end": "564220"
  },
  {
    "text": "just data but also workload right and so each one of these is an aggregate and so",
    "start": "564220",
    "end": "570519"
  },
  {
    "text": "if we select this partition key such that we can horizontally scale what we",
    "start": "570519",
    "end": "576610"
  },
  {
    "text": "see is that as we add more orders and each order has a different partition key",
    "start": "576610",
    "end": "583120"
  },
  {
    "text": "we're able to scale this horizontally all day long I see so we're getting more partitions",
    "start": "583120",
    "end": "590160"
  },
  {
    "text": "by increasing our cringe capacity or we use on-demand and those partitions are",
    "start": "590160",
    "end": "595930"
  },
  {
    "text": "fully managed for us so we can take this orders table from you know 100 customers",
    "start": "595930",
    "end": "601420"
  },
  {
    "text": "you know that you might see one to a million customers you know six and ones down the line definitely some of the",
    "start": "601420",
    "end": "607329"
  },
  {
    "text": "growth plans that our customers have this this to me is one of the greatest things about cloud native server less",
    "start": "607329",
    "end": "614519"
  },
  {
    "text": "database such as dynamodb it allows you to incrementally scale your your",
    "start": "614519",
    "end": "620949"
  },
  {
    "text": "workload your database right so like you said if I'm a startup with very little",
    "start": "620949",
    "end": "627209"
  },
  {
    "text": "you know data at the beginning as I grow I should be able to just scale that",
    "start": "627209",
    "end": "632439"
  },
  {
    "text": "seamlessly and and and in fact the whole point of this is how we do data modeling",
    "start": "632439",
    "end": "642850"
  },
  {
    "text": "a design is to enable that scale and maintain that performance at scale and",
    "start": "642850",
    "end": "649180"
  },
  {
    "text": "dynamodb is really good at it but you do have to do a little bit of work in selecting that partition key sacrificing",
    "start": "649180",
    "end": "656139"
  },
  {
    "text": "a little bit of flexibility upfront right exactly and and being aware what your aggregates",
    "start": "656139",
    "end": "662029"
  },
  {
    "text": "are what are these data structures that we need to read and write together as a",
    "start": "662029",
    "end": "667940"
  },
  {
    "text": "unit and and if you do that right what we get is horizontal scale and",
    "start": "667940",
    "end": "674329"
  },
  {
    "text": "performance at scale because we always have a single round trip whether we're",
    "start": "674329",
    "end": "681230"
  },
  {
    "text": "reading or writing data or very few round trips basically that's that's the",
    "start": "681230",
    "end": "686329"
  },
  {
    "text": "goal and the other goal is cost as we scale and and dynamodb is able to scale",
    "start": "686329",
    "end": "693620"
  },
  {
    "text": "as we like to say virtually infinitely we'd like to manage the cost so that at any scale we have essentially reasonable",
    "start": "693620",
    "end": "701000"
  },
  {
    "text": "cost so partition key to recap good charting partitioning scheme is what the",
    "start": "701000",
    "end": "708319"
  },
  {
    "text": "Fords even distribution of data and workload as they grow and you know again back to the announcement of adaptive",
    "start": "708319",
    "end": "714290"
  },
  {
    "text": "capacity we still do need to worry about or basically design our petition keys so",
    "start": "714290",
    "end": "719990"
  },
  {
    "text": "you can horizontally scale because adaptive capacity can't help you magically shove all your petition keys",
    "start": "719990",
    "end": "727730"
  },
  {
    "text": "in a single partition yes I suppose I had one customer place 40 gigs of data under the same partition key well maybe",
    "start": "727730",
    "end": "734600"
  },
  {
    "text": "at that point that's a little bit too much you know I would say dynamo can always scale if you want to put 40 kids I did under the same partition key you",
    "start": "734600",
    "end": "742189"
  },
  {
    "text": "can definitely go ahead and try that one of the concerns is if you need to access the data very fast meaning read out",
    "start": "742189",
    "end": "748639"
  },
  {
    "text": "megabytes at a time and that can run into symbolics because our fundamental unit",
    "start": "748639",
    "end": "754850"
  },
  {
    "text": "is a partition and what we found is in in no sequel workloads you have hotkeys",
    "start": "754850",
    "end": "760569"
  },
  {
    "text": "in any database if it's whether it's Cassandra or you're gonna have hot",
    "start": "760569",
    "end": "766459"
  },
  {
    "text": "shards and in dynamo you know we surface those to you but you you so you may",
    "start": "766459",
    "end": "773000"
  },
  {
    "text": "think that you know you don't have that in your normal database but if you go look you see oh well this one has you",
    "start": "773000",
    "end": "778009"
  },
  {
    "text": "know a load of like four and it's like you know a quad-core it's got four threads right so you're hitting the peak",
    "start": "778009",
    "end": "784699"
  },
  {
    "text": "of what that server can do slowly yeah it's the same thing right because they'll work the same way they",
    "start": "784699",
    "end": "789740"
  },
  {
    "text": "partitioned based on an unwritten key so petition keys are dimension of scalability we",
    "start": "789740",
    "end": "795670"
  },
  {
    "text": "talked about that and about distributing aggregates across petitions and so ideal",
    "start": "795670",
    "end": "801970"
  },
  {
    "text": "scaling conditions we covered all that and then a really important concept is how how to accomplish data consistency",
    "start": "801970",
    "end": "809290"
  },
  {
    "text": "with no sequel databases right common belief is that because no sequel databases support mostly eventual",
    "start": "809290",
    "end": "816459"
  },
  {
    "text": "consistency that you you have to compromise on your data consistency and",
    "start": "816459",
    "end": "822459"
  },
  {
    "text": "the fact is you don't you know even in to your point in terms of history this I",
    "start": "822459",
    "end": "829060"
  },
  {
    "text": "think idea that that an on relational database must be eventually consistent",
    "start": "829060",
    "end": "834160"
  },
  {
    "text": "stems from that 2007 dynamo white paper yeah which was written by Amazon engineers many of them actually still",
    "start": "834160",
    "end": "841540"
  },
  {
    "text": "work at at AWS a one for example is a general manager in AWS and so that white",
    "start": "841540",
    "end": "849250"
  },
  {
    "text": "paper explained a it was an available and partition tolerant no sequel",
    "start": "849250",
    "end": "854800"
  },
  {
    "text": "database so he sacrificed the consistency in the cap theorem right and",
    "start": "854800",
    "end": "860319"
  },
  {
    "text": "so that that mindset that legacy because it was associated with the name dynamodb",
    "start": "860319",
    "end": "866920"
  },
  {
    "text": "kind of a lot of customers project that onto dynamo and they think that it is not a strongly consistent service",
    "start": "866920",
    "end": "873040"
  },
  {
    "text": "I usually joke and say that dynamodb is a kind of a grandkid of dynamo it's got",
    "start": "873040",
    "end": "883089"
  },
  {
    "text": "better genes that have kind of come in over the generations okay that's one way to yeah definitely interpret that but",
    "start": "883089",
    "end": "890740"
  },
  {
    "text": "but the thing is with dynamodb not only do you get strong consistency right yeah but you also have building blocks to",
    "start": "890740",
    "end": "898360"
  },
  {
    "text": "make sure that you can implement transactional behaviors so that you you don't have to worry about you're",
    "start": "898360",
    "end": "904209"
  },
  {
    "start": "903000",
    "end": "1089000"
  },
  {
    "text": "implementing services such as shopping cart which are mission-critical right you want to make sure you have",
    "start": "904209",
    "end": "909250"
  },
  {
    "text": "data consistency so if you might be sharing that cart with a family member you should still have expected outcome",
    "start": "909250",
    "end": "916029"
  },
  {
    "text": "whether you're both using it at the same time or not right and we do that using optimistic",
    "start": "916029",
    "end": "922540"
  },
  {
    "text": "concurrency control where and and also using conditional expression in the",
    "start": "922540",
    "end": "927580"
  },
  {
    "text": "animal DB to do check on the version so we cover this last time but I wanted to point this out because this is one of",
    "start": "927580",
    "end": "933820"
  },
  {
    "text": "key concepts in in no sequel and this is how you do it in dynamo DB and and by",
    "start": "933820",
    "end": "939580"
  },
  {
    "text": "the way we also said when you read a card you don't have to do strongly consistent reads because the correctness",
    "start": "939580",
    "end": "947200"
  },
  {
    "text": "of this approach does not depend on these rates being strongly consistent because what happens if that version",
    "start": "947200",
    "end": "953800"
  },
  {
    "text": "check fails right you you go back to the you redo the basically step you have to",
    "start": "953800",
    "end": "960430"
  },
  {
    "text": "retry that and then there's one fundamental dynamo that makes as possible and then there's one common question I get no I made that",
    "start": "960430",
    "end": "966820"
  },
  {
    "text": "question here occurring the fundamental the fundamental is that in dynamo data is always stored in three facilities or",
    "start": "966820",
    "end": "972670"
  },
  {
    "text": "three availability zones so when we accept a right we coordinate that right and we can do that consistently you know",
    "start": "972670",
    "end": "979630"
  },
  {
    "text": "we store that data in three places but when we do a read you can tell us to grab any one of those copies and if you",
    "start": "979630",
    "end": "986140"
  },
  {
    "text": "don't ask for a strongly consistent read that's what's going to happen schanke's read is gonna take you down to the",
    "start": "986140",
    "end": "992320"
  },
  {
    "text": "coordinator we're gonna be able to give you that exact wrote back so common question that I'm asked you tell me do I",
    "start": "992320",
    "end": "1000210"
  },
  {
    "text": "consume any read capacity units whenever I use my condition expression right well",
    "start": "1000210",
    "end": "1007260"
  },
  {
    "text": "the the answer is it depends whether you're doing reads alright if what you're doing is reads you only consume",
    "start": "1007260",
    "end": "1014250"
  },
  {
    "text": "read capacity and if you're doing right you only consume write capacity so if",
    "start": "1014250",
    "end": "1020010"
  },
  {
    "text": "I'm doing it correction right capacity reason so you won't use two types of",
    "start": "1020010",
    "end": "1025319"
  },
  {
    "text": "units in the same is all time requests are either writes or relay control point that's that's exactly right yeah so also",
    "start": "1025320",
    "end": "1032970"
  },
  {
    "text": "we've talked about relationships so you know no sequel right and and so oh we",
    "start": "1032970",
    "end": "1039750"
  },
  {
    "text": "have relationships yes we do and we implement those in in dynamo DB using a",
    "start": "1039750",
    "end": "1045270"
  },
  {
    "text": "key value access pattern on the table or JSI one-to-many relationship we use",
    "start": "1045270",
    "end": "1051270"
  },
  {
    "text": "partition and sort key we use that modeling basically either on",
    "start": "1051270",
    "end": "1056580"
  },
  {
    "text": "the table or GSI right and then we use query API typically to to read data and",
    "start": "1056580",
    "end": "1063450"
  },
  {
    "text": "then for many-to-many relationships we model those using a table and then what we call inverted GSI where we have a GSI",
    "start": "1063450",
    "end": "1072210"
  },
  {
    "text": "that takes the short key from the table and uses that as the partition key basically so even though we're talking",
    "start": "1072210",
    "end": "1079800"
  },
  {
    "text": "about no sequel we can still implement and work with relationships and one of the examples later on will actually show",
    "start": "1079800",
    "end": "1087780"
  },
  {
    "text": "how to do that so to recap again what are we trying to",
    "start": "1087780",
    "end": "1093030"
  },
  {
    "text": "accomplish good performance and reasonable cost at any scale right",
    "start": "1093030",
    "end": "1098130"
  },
  {
    "text": "that's the that's the kind of goal of these design exercises data modeling for",
    "start": "1098130",
    "end": "1103980"
  },
  {
    "text": "any non-trivial use cases and and now we know that we can model relationships and we can maintain data consistency on on",
    "start": "1103980",
    "end": "1112200"
  },
  {
    "text": "updates as well so for this to really be",
    "start": "1112200",
    "end": "1117480"
  },
  {
    "text": "able to do this you need to know access parents for reads and writes we need to know data size and shape in order to be",
    "start": "1117480",
    "end": "1124680"
  },
  {
    "text": "able to figure out what our aggregates should be right and data velocity what",
    "start": "1124680",
    "end": "1130260"
  },
  {
    "text": "our request rates how often do we do a particular request what our peak rates for for a given request so if you",
    "start": "1130260",
    "end": "1137370"
  },
  {
    "text": "remember last time we went over this shopping cart service example and we talked about modeling this is a key",
    "start": "1137370",
    "end": "1143670"
  },
  {
    "text": "value access pattern and this is based on a real customer you know customers are you know our main focus here at AWS",
    "start": "1143670",
    "end": "1150870"
  },
  {
    "text": "we based our roadmap on customer feedback so a lot of times we're not able to share who the customer is and",
    "start": "1150870",
    "end": "1156360"
  },
  {
    "text": "this happens to be one of those examples but what we bring you here is is ideas that are based online real world real",
    "start": "1156360",
    "end": "1162360"
  },
  {
    "text": "world scenarios from from the design reviews that we've done yeah absolutely and in this particular case we do of",
    "start": "1162360",
    "end": "1171270"
  },
  {
    "text": "course as always need to know what kind of data are we dealing with so we know and we know how much data there is we",
    "start": "1171270",
    "end": "1177450"
  },
  {
    "text": "know data size and about it's under one kilobyte we also know that total data volume in the worst",
    "start": "1177450",
    "end": "1184290"
  },
  {
    "text": "case scenario and and at scale so in this particular case this turned out to",
    "start": "1184290",
    "end": "1190200"
  },
  {
    "text": "be up to hundred million cards in the table and then folks so sorry you're",
    "start": "1190200",
    "end": "1196440"
  },
  {
    "text": "saying there's peak throughput yeah yeah and so what I'm hearing is 1k rows each",
    "start": "1196440",
    "end": "1201870"
  },
  {
    "text": "row represents a shopping cart right you have a hundred million shopping carts and next move yeah that's 100 gigs right",
    "start": "1201870",
    "end": "1211020"
  },
  {
    "text": "so that table may have like like a maximum size sounds like there may be",
    "start": "1211020",
    "end": "1216210"
  },
  {
    "text": "situation where these shopping carts expired over time or exactly cleared out",
    "start": "1216210",
    "end": "1221340"
  },
  {
    "text": "right so so most of the time what happens and and and in fact this is",
    "start": "1221340",
    "end": "1226560"
  },
  {
    "text": "really something that always helps is knowing sort of your application patterns right in this use case the",
    "start": "1226560",
    "end": "1234300"
  },
  {
    "text": "customer knew typical pattern is most people go on under ecommerce site they",
    "start": "1234300",
    "end": "1240150"
  },
  {
    "text": "put something in their cart and then they check up however there's a certain number of people who leave items in",
    "start": "1240150",
    "end": "1248100"
  },
  {
    "text": "their carts and that's fairly typical I've done yeah as well the cart",
    "start": "1248100",
    "end": "1253230"
  },
  {
    "text": "abandonment is a real thing yes that you on track can your analytic software exactly and and in fact in their case",
    "start": "1253230",
    "end": "1261390"
  },
  {
    "text": "what they wanted to do as a secondary use case this is something we did not talk about last time but in fact was",
    "start": "1261390",
    "end": "1268230"
  },
  {
    "text": "part of the requirements that they had was in front of price change notifications so for all the cards that",
    "start": "1268230",
    "end": "1275070"
  },
  {
    "text": "are sitting out there if items that are out there in carts get a lower price",
    "start": "1275070",
    "end": "1281100"
  },
  {
    "text": "let's say the price goes down changes in any way they wanted to be able to update those customers with with a new press",
    "start": "1281100",
    "end": "1287940"
  },
  {
    "text": "and so what it meant they had to read the the carts and figure out which carts that are still out there",
    "start": "1287940",
    "end": "1293760"
  },
  {
    "text": "have those items and so with it rise of iterating on that design you know what",
    "start": "1293760",
    "end": "1300750"
  },
  {
    "text": "I've heard things I've heard something like this [Music] in social media I've heard of this the",
    "start": "1300750",
    "end": "1306669"
  },
  {
    "text": "shopping tip where what you do is you go to a website where you want to buy something maybe you don't even login you",
    "start": "1306669",
    "end": "1313029"
  },
  {
    "start": "1307000",
    "end": "1464000"
  },
  {
    "text": "just let the ad tracking take over then you go find that thing that you've wanted for a long time you add it to your shopping cart and then you don't",
    "start": "1313029",
    "end": "1318669"
  },
  {
    "text": "check out and then what can happen is they can link it back to a kneeling email address and you may get an email",
    "start": "1318669",
    "end": "1324429"
  },
  {
    "text": "notification with a coupon so you can take it back and then finish that checkout and complete your purchase and",
    "start": "1324429",
    "end": "1330459"
  },
  {
    "text": "so if we're doing like these price change notifications sounds like a great way to even personalize the notifications that you're sending to a",
    "start": "1330459",
    "end": "1336369"
  },
  {
    "text": "user because if someone is anonymous and they log in they add something to the shopping cart and then you can find oh",
    "start": "1336369",
    "end": "1342399"
  },
  {
    "text": "the price went down some notifications say hey and the thing that you you know you want in some Windex a case of Windex",
    "start": "1342399",
    "end": "1348159"
  },
  {
    "text": "for $11.99 well it's $9.99 right now with one-day shipping from Amazon okay and that's",
    "start": "1348159",
    "end": "1353950"
  },
  {
    "text": "based the basic idea right so then we said wait a minute but but we have a",
    "start": "1353950",
    "end": "1360249"
  },
  {
    "text": "data model for the basic scenario which works really well scales well under pressure right for",
    "start": "1360249",
    "end": "1366159"
  },
  {
    "text": "eats and writes but now if we need to implement this price change notification how do we find those items there now",
    "start": "1366159",
    "end": "1373359"
  },
  {
    "text": "essentially buried in those carts and do we change the data model or not how do",
    "start": "1373359",
    "end": "1379089"
  },
  {
    "text": "we shrink our haystack to get down into just those cards that basically to know that was that was one one question but",
    "start": "1379089",
    "end": "1386589"
  },
  {
    "text": "however the the what one of the interesting points to me was that velocity here how often does this happen",
    "start": "1386589",
    "end": "1393940"
  },
  {
    "text": "right was not a key questions right and and this turned out to be a very",
    "start": "1393940",
    "end": "1399609"
  },
  {
    "text": "infrequent occurrence right maybe once every few days once a week and so when we talked about it this is a fully",
    "start": "1399609",
    "end": "1406809"
  },
  {
    "text": "internally driven right batch job okay ready a regularly scheduled batch",
    "start": "1406809",
    "end": "1411940"
  },
  {
    "text": "regularly scheduled batch job and I thought well let's just do simple math",
    "start": "1411940",
    "end": "1418029"
  },
  {
    "text": "what if we just scan the whole table and see what happens I see so you're going",
    "start": "1418029",
    "end": "1425440"
  },
  {
    "text": "to similar to the you more diamond DV connector which I mentioned earlier and kind of tend to double that phrase even",
    "start": "1425440",
    "end": "1431320"
  },
  {
    "text": "but you're you're you're extracting the full contents and the data running through your application and",
    "start": "1431320",
    "end": "1436450"
  },
  {
    "text": "looking for particular yes right because if you remember if you watch last episode the data model was key value and",
    "start": "1436450",
    "end": "1443830"
  },
  {
    "text": "so our our cart items are essentially in a in a map in a JSON structure of each",
    "start": "1443830",
    "end": "1449500"
  },
  {
    "text": "item I can't have a GSI oh and I probably don't want the GSI yes either",
    "start": "1449500",
    "end": "1454780"
  },
  {
    "text": "right so you can't and you can if you don't know the exact partition key and I know you can't read the data out you",
    "start": "1454780",
    "end": "1461110"
  },
  {
    "text": "have to go with the scan capital S stand a I to get the full contents if you don't know the key that's part of",
    "start": "1461110",
    "end": "1467410"
  },
  {
    "start": "1464000",
    "end": "1637000"
  },
  {
    "text": "dynamos hot down-low scales we use that consistent consistent hashing scheme we take that key you run through one-way",
    "start": "1467410",
    "end": "1472870"
  },
  {
    "text": "hashing function and then as you saw in a slide earlier we use that determine you know which partition falls on so",
    "start": "1472870",
    "end": "1478510"
  },
  {
    "text": "right scan makes a whole lot of sense in this in this case yeah exactly and so just just as a simple almost like back",
    "start": "1478510",
    "end": "1485680"
  },
  {
    "text": "on the envelope back huh napkin exercise what would this price notification job cost them in in DynamoDB if I wanted to",
    "start": "1485680",
    "end": "1493120"
  },
  {
    "text": "scan the table so the worst case scenario right is hundred million items that I need to scan once a week right",
    "start": "1493120",
    "end": "1500290"
  },
  {
    "text": "and and I can take my time to do it turns out this was not time critical we",
    "start": "1500290",
    "end": "1506230"
  },
  {
    "text": "could take 24 hours 12 hours or however many hours in fact the nice thing about",
    "start": "1506230",
    "end": "1511420"
  },
  {
    "text": "dynamodb I can change that provision capacity to the amount of capacity that",
    "start": "1511420",
    "end": "1517420"
  },
  {
    "text": "I need for this bad job and then do it right and maybe yeah and this makes a",
    "start": "1517420",
    "end": "1523360"
  },
  {
    "text": "lot of sense cuz you want to spread it over time you don't want to queue up 100 million emails to send through your MTA's you know as the other in just five",
    "start": "1523360",
    "end": "1531010"
  },
  {
    "text": "minutes dynamo could do that you could actually increase your provision capacity and scan the whole table as fast as you like exactly so and it's",
    "start": "1531010",
    "end": "1538660"
  },
  {
    "text": "it's gonna be the same cost right yeah exactly because the amount of reads and",
    "start": "1538660",
    "end": "1544120"
  },
  {
    "text": "writes that we do in either case actually stays the same the total amount of reads and writes is the same they're",
    "start": "1544120",
    "end": "1549550"
  },
  {
    "text": "just spread out over longer or shorter period of time and so it turned out this",
    "start": "1549550",
    "end": "1554680"
  },
  {
    "text": "this cost $22 per per batch job right so once a week you would have to incur an",
    "start": "1554680",
    "end": "1562720"
  },
  {
    "text": "extra $22 in in dynamodb cost for this service in order to implement the price notification job ID",
    "start": "1562720",
    "end": "1569740"
  },
  {
    "text": "on the table scan turned out this is very acceptable we did not have to change the existing data model design in",
    "start": "1569740",
    "end": "1577180"
  },
  {
    "text": "fact we did not have to compromise on the ability to scale on the shopping cart for the most important requirement",
    "start": "1577180",
    "end": "1584110"
  },
  {
    "text": "of this use case so in this case by using scan you actually still have flexibility so if you come up with a",
    "start": "1584110",
    "end": "1589900"
  },
  {
    "text": "requirement layer that you need to send these back to these emails in batch you can just do a scan after the fact yes",
    "start": "1589900",
    "end": "1596860"
  },
  {
    "text": "even months after you release a shopping cart yeah and and and so the point",
    "start": "1596860",
    "end": "1602260"
  },
  {
    "text": "really of this story is is really to show how that velocity plays into our design and and and how cost plays into",
    "start": "1602260",
    "end": "1610990"
  },
  {
    "text": "it as well right this this design is influenced greatly by not just what we",
    "start": "1610990",
    "end": "1616000"
  },
  {
    "text": "need needed in terms of technical requirements but also in terms of cost right did you get it done never had a",
    "start": "1616000",
    "end": "1622150"
  },
  {
    "text": "customer said they want to spend more money on AWS was everything for them that's one we have our price releases",
    "start": "1622150",
    "end": "1627430"
  },
  {
    "text": "you know our price drops as frequently as we can and we try to delight our customers in that way right alright so",
    "start": "1627430",
    "end": "1634980"
  },
  {
    "text": "let's move on talk about item hierarchies real quick this is something that is very important in in data",
    "start": "1634980",
    "end": "1643090"
  },
  {
    "start": "1637000",
    "end": "1842000"
  },
  {
    "text": "modelling done with them and so at this point we're well into this is the new content for this year or so for this app",
    "start": "1643090",
    "end": "1648520"
  },
  {
    "text": "for this episode right so item hierarchies are a way of organizing your",
    "start": "1648520",
    "end": "1654490"
  },
  {
    "text": "data in dynamodb so that effectively what is your logical view or record in",
    "start": "1654490",
    "end": "1662020"
  },
  {
    "text": "dynamodb becomes multiple items and we have a way of organizing that in a",
    "start": "1662020",
    "end": "1667600"
  },
  {
    "text": "hierarchy right and that's that's what we use composite sort key for this is",
    "start": "1667600",
    "end": "1673210"
  },
  {
    "text": "where a short key really comes into into play and depending on how we organize",
    "start": "1673210",
    "end": "1678310"
  },
  {
    "text": "this sort key we can be very selective in how we query and and and also on the",
    "start": "1678310",
    "end": "1685060"
  },
  {
    "text": "one hand but also how we write data on the other hand so we're sorting data based on the sort key on disks that's",
    "start": "1685060",
    "end": "1693310"
  },
  {
    "text": "exactly lexa graphical sort based on it looks like a string data type in this example eggs",
    "start": "1693310",
    "end": "1699370"
  },
  {
    "text": "and in this particular example we're restoring several types of products right books music albums movies and as",
    "start": "1699370",
    "end": "1707950"
  },
  {
    "text": "you can see we have a product ID and then the type is basically the sort key",
    "start": "1707950",
    "end": "1713770"
  },
  {
    "text": "in this case and it could be a book album but then we also see hierarchy in case of albums here where we have tracks",
    "start": "1713770",
    "end": "1721680"
  },
  {
    "text": "for movies we have actors and and this allows us to update these individual",
    "start": "1721680",
    "end": "1727990"
  },
  {
    "text": "tracks or actor records right without having to access all of the movie data",
    "start": "1727990",
    "end": "1734800"
  },
  {
    "text": "or the entire album data right so this can save us on write by by allowing us",
    "start": "1734800",
    "end": "1743020"
  },
  {
    "text": "to have this finer granularity but we can still take advantage of the fact that we have this hierarchy if we need",
    "start": "1743020",
    "end": "1750460"
  },
  {
    "text": "to access the entire record for the album let's see how that works so query",
    "start": "1750460",
    "end": "1757050"
  },
  {
    "text": "product ID 2 and short key is album ID",
    "start": "1757050",
    "end": "1762700"
  },
  {
    "text": "so exactly album ID and I'm getting that basically main record for the album I'm",
    "start": "1762700",
    "end": "1768040"
  },
  {
    "text": "not getting tracks I'm just getting the sort of the the metadata for the album",
    "start": "1768040",
    "end": "1774100"
  },
  {
    "text": "itself on the other hand if I if I change that sort key to use the begins",
    "start": "1774100",
    "end": "1781000"
  },
  {
    "text": "with function on the sort key and and I basically say sort key begins with give",
    "start": "1781000",
    "end": "1787600"
  },
  {
    "text": "me all the items that begin with album common track then I'm going to get only",
    "start": "1787600",
    "end": "1793150"
  },
  {
    "text": "only my tracks and I can also go all the way and just get get query on the particular track and another example is",
    "start": "1793150",
    "end": "1800680"
  },
  {
    "text": "if I want the entire album with tracks I can simply say give me all the all the",
    "start": "1800680",
    "end": "1807640"
  },
  {
    "text": "rows all the items for the product ID that I want and then each of these examples for using the query API in",
    "start": "1807640",
    "end": "1815020"
  },
  {
    "text": "dynamo capital Q query that word actually means something very specific and dynamic parlance and the only",
    "start": "1815020",
    "end": "1821260"
  },
  {
    "text": "requirement there is that you know the partition game so you know and so we're just using that sorted nature of the",
    "start": "1821260",
    "end": "1827410"
  },
  {
    "text": "data on disk using the sort key you know a question that has been asked in this case on the chat by destroyer I",
    "start": "1827410",
    "end": "1835820"
  },
  {
    "text": "want to call your destroyer September 10 2019 you know who you are the question was about how can we get",
    "start": "1835820",
    "end": "1842720"
  },
  {
    "start": "1842000",
    "end": "1968000"
  },
  {
    "text": "data back in a different sorted form and if you want data that's sorted differently on disk with the same",
    "start": "1842720",
    "end": "1849590"
  },
  {
    "text": "partition key what we would recommend is a global secondary index new great an alternate global secondary index and so",
    "start": "1849590",
    "end": "1856759"
  },
  {
    "text": "those are like DynamoDB tables but they're shown under the index tab and",
    "start": "1856759",
    "end": "1863239"
  },
  {
    "text": "the eros management console they have provision capacity read and write units or you can enable on-demand",
    "start": "1863239",
    "end": "1869599"
  },
  {
    "text": "mode and we just call in GS eyes by the way for those of you who are new to DynamoDB good old GS eyes",
    "start": "1869599",
    "end": "1876950"
  },
  {
    "text": "yeah and and they really are a different view into your data so we call",
    "start": "1876950",
    "end": "1882769"
  },
  {
    "text": "materialized views right every GSI is a different materialized view and why why is that it's because you can change what",
    "start": "1882769",
    "end": "1890809"
  },
  {
    "text": "your partition on and so when you decide to partition on a different attribute your data for that JSI is stored based",
    "start": "1890809",
    "end": "1898849"
  },
  {
    "text": "on that new partition and optionally the new sort key and so if you do want a",
    "start": "1898849",
    "end": "1904249"
  },
  {
    "text": "different sort order that's that's what you would do and another question is if I only went back the say the album",
    "start": "1904249",
    "end": "1911809"
  },
  {
    "text": "length how would I do that on the api's so that that would be how do I query out",
    "start": "1911809",
    "end": "1917299"
  },
  {
    "text": "the data but only get a single attribute well one thing I'll add and all that should complete the answer is that even",
    "start": "1917299",
    "end": "1923029"
  },
  {
    "text": "though you're retrieving a section of the road you're still paying for the whole road to be read from disk yeah",
    "start": "1923029",
    "end": "1928759"
  },
  {
    "text": "yeah so for that you would use that the first query that the green one where you would do the product ID basically and",
    "start": "1928759",
    "end": "1937820"
  },
  {
    "text": "then the short key would be album ID in this or problem in fact that the word",
    "start": "1937820",
    "end": "1944269"
  },
  {
    "text": "album and and that does get you the entire row you could have a projection",
    "start": "1944269",
    "end": "1951470"
  },
  {
    "text": "though to filter out the attribute projection expression right right",
    "start": "1951470",
    "end": "1957349"
  },
  {
    "text": "however as Sean as you just said you would still pay that the the RC you",
    "start": "1957349",
    "end": "1963480"
  },
  {
    "text": "that's equivalent to the entire item so alternatively you could create data",
    "start": "1963480",
    "end": "1971340"
  },
  {
    "start": "1968000",
    "end": "2023000"
  },
  {
    "text": "hierarchies that also use JSON documents and but what that would look like in",
    "start": "1971340",
    "end": "1976919"
  },
  {
    "text": "this case is majority of the day that would be simply JSON document and and",
    "start": "1976919",
    "end": "1982230"
  },
  {
    "text": "then we would maybe have some attributes maybe those attributes that we need to have another global secondary index on",
    "start": "1982230",
    "end": "1990000"
  },
  {
    "text": "those would be top-level attributes because you can't have project I mean you can't have GS eyes on nested",
    "start": "1990000",
    "end": "1997470"
  },
  {
    "text": "attributes and JSON so Dino is a definitely a multi doc or multi data",
    "start": "1997470",
    "end": "2004700"
  },
  {
    "text": "wherever you want to solve if it's a key value in a document data it does have document API yeah yeah it does have some",
    "start": "2004700",
    "end": "2010610"
  },
  {
    "text": "of those api's but then when it comes down to indexing documents the keys have",
    "start": "2010610",
    "end": "2015799"
  },
  {
    "text": "to be extractor a copy to the top level see active top-level attribute right exactly",
    "start": "2015799",
    "end": "2022059"
  },
  {
    "text": "next JSON overloading yeah so now we're going to talk about GSI overloading so",
    "start": "2022059",
    "end": "2028700"
  },
  {
    "text": "just like overlay and the concept is you create a single GSI and you call it",
    "start": "2028700",
    "end": "2034250"
  },
  {
    "text": "something like you know GSI PK or G site PK one and then you have all different",
    "start": "2034250",
    "end": "2039679"
  },
  {
    "text": "types of documents sitting in that GSI so what we have here is like an HR",
    "start": "2039679",
    "end": "2047029"
  },
  {
    "text": "record so we've got the employee name you know the year might have some information about quotas we might have",
    "start": "2047029",
    "end": "2054408"
  },
  {
    "text": "some job tiles and other information like that so we have a sort key that's",
    "start": "2054409",
    "end": "2060440"
  },
  {
    "text": "in here that's native to the data and we're going to do is pull that out and call that the GSI primary key and so",
    "start": "2060440",
    "end": "2067099"
  },
  {
    "text": "what we're doing here is instead of saying employee name is the attribute",
    "start": "2067099",
    "end": "2072530"
  },
  {
    "text": "name we're just saying everything is going to have GSI PK 1 every single row is kind of Jesus IP k 1 and then you're",
    "start": "2072530",
    "end": "2078888"
  },
  {
    "text": "going to read out that value and then from the value you're going to infer what type of record it is so you might",
    "start": "2078889",
    "end": "2086240"
  },
  {
    "text": "have the ability to on a GSI each of these is going to represent in different rows you have one room for an employee",
    "start": "2086240",
    "end": "2092060"
  },
  {
    "text": "name you're going to read that out get back the the employee name and some",
    "start": "2092060",
    "end": "2097149"
  },
  {
    "text": "other information about them right in the boy binary Zack yeah yeah that's it",
    "start": "2097150",
    "end": "2102310"
  },
  {
    "text": "you can find the top performance by quote by quarter and so when we say we got that year in that quarter that's",
    "start": "2102310",
    "end": "2107650"
  },
  {
    "text": "like a quota amount so you're gonna be able to see for that key do a query and get back the value and the reason why",
    "start": "2107650",
    "end": "2114610"
  },
  {
    "text": "this design is so important is instead of having you know ten GSIS or twenty GS is you can just have a couple of GS is",
    "start": "2114610",
    "end": "2121870"
  },
  {
    "text": "and overlap the attributes you know one one thing that I've seen that's very",
    "start": "2121870",
    "end": "2127390"
  },
  {
    "text": "common in our design use now is and I'm sure you've seen this we don't even call the primary key what it actually is we",
    "start": "2127390",
    "end": "2133600"
  },
  {
    "text": "use called a primary key or the partition key diamond the PK right the store keys just the SK so when we go to",
    "start": "2133600",
    "end": "2138910"
  },
  {
    "text": "Excel and we start our designs it's always a generic name right and it can",
    "start": "2138910",
    "end": "2144220"
  },
  {
    "text": "mean different things in different sort of contexts and different types of data because we might be sharing that",
    "start": "2144220",
    "end": "2150640"
  },
  {
    "text": "basically attribute between different types and and so in this case we have",
    "start": "2150640",
    "end": "2157210"
  },
  {
    "text": "this attribute called data so the other thing about JSON overloading now that we",
    "start": "2157210",
    "end": "2163810"
  },
  {
    "text": "can have up to 20 GS is per table not that much of an issue but but you know",
    "start": "2163810",
    "end": "2170080"
  },
  {
    "text": "what just I overloading kind of helps keep the cost down to write by",
    "start": "2170080",
    "end": "2175870"
  },
  {
    "text": "overloading that GSI on them to make another GSI I can reuse that same one",
    "start": "2175870",
    "end": "2182380"
  },
  {
    "text": "for different types of queries and and that's that's pretty cool too mhm and so",
    "start": "2182380",
    "end": "2188080"
  },
  {
    "text": "a lot of times I would say just I overloading that concept is it's kind of related to an item hierarchy because I",
    "start": "2188080",
    "end": "2194890"
  },
  {
    "text": "see some customers though although either go that GSI design that houses GSI or instead what they'll do so just",
    "start": "2194890",
    "end": "2201550"
  },
  {
    "text": "use a regular diamond Eve table and write like multiple rows different entities under the same table I think",
    "start": "2201550",
    "end": "2208000"
  },
  {
    "text": "we've got some examples that get into that as well so it's not just our Marquis but there's a lots of kind of overlap but you don't even need to go",
    "start": "2208000",
    "end": "2215740"
  },
  {
    "text": "with the global second or index it's not like we start by default that you're gonna have to have a GSI you know if you",
    "start": "2215740",
    "end": "2221080"
  },
  {
    "text": "if you have like a like a many-to-many relationship there's plenty of way to do it right yeah all right right",
    "start": "2221080",
    "end": "2228619"
  },
  {
    "start": "2227000",
    "end": "2338000"
  },
  {
    "text": "charting is another interesting concept so the theme of this of the show today",
    "start": "2228619",
    "end": "2235549"
  },
  {
    "text": "has been performance you know and at the you know lowest cost you know it's",
    "start": "2235549",
    "end": "2241190"
  },
  {
    "text": "optimize on the cost designing for performance and cost right yeah its performance and cost and so how do we",
    "start": "2241190",
    "end": "2248150"
  },
  {
    "text": "get the full performance out of DynamoDB well what we've seen in our customer clothes is that often times there's",
    "start": "2248150",
    "end": "2254420"
  },
  {
    "text": "always a slight imbalance I mean it's just the nature of the world you know I I had one customer their version of a",
    "start": "2254420",
    "end": "2260089"
  },
  {
    "text": "hot key would be a tractor getting stuck in a field and left in that position",
    "start": "2260089",
    "end": "2266029"
  },
  {
    "text": "overnight and then the partition key was a geo hash of the quadrant of the field and so it's reporting at five Hertz five",
    "start": "2266029",
    "end": "2273289"
  },
  {
    "text": "times per second all of the data it's all going to the same dynamodb partition so tractor get stuck in ditch and now we've",
    "start": "2273289",
    "end": "2280099"
  },
  {
    "text": "got a hot key so so how do we handle that and and so what we look for is as a",
    "start": "2280099",
    "end": "2287239"
  },
  {
    "text": "basic design tenant is keys with high cardinality and sometimes that's always the case tractor stuck in a ditch for",
    "start": "2287239",
    "end": "2293150"
  },
  {
    "text": "example we also want these to be spread or in that case it's really the second",
    "start": "2293150",
    "end": "2299539"
  },
  {
    "text": "part of that is really if you have you know a thousand tractors that's great because you have some some hide value of",
    "start": "2299539",
    "end": "2308299"
  },
  {
    "text": "keys that's a high key cardinality but if you only have one make of tractors let's say you know you are a company",
    "start": "2308299",
    "end": "2314390"
  },
  {
    "text": "makes tractors and so the make is that if you want to create a table where that is a partition key the make I'll call it",
    "start": "2314390",
    "end": "2321470"
  },
  {
    "text": "Acme that's an issue because low key cardinality and also you're gonna have a",
    "start": "2321470",
    "end": "2326749"
  },
  {
    "text": "lot of rows going to the same same partitioning Dynamo you can't really horizontally scale it yeah and so the",
    "start": "2326749",
    "end": "2334609"
  },
  {
    "text": "point is we realize that it may not be possible so how do you take something that's kind of in balance and put it into dynamo dB when we have this method",
    "start": "2334609",
    "end": "2341989"
  },
  {
    "start": "2338000",
    "end": "2373000"
  },
  {
    "text": "called get scatter gather and the idea behind scatter gather is we take",
    "start": "2341989",
    "end": "2348440"
  },
  {
    "text": "something we know which is a partition key that is you known to us and then we go in and yeah",
    "start": "2348440",
    "end": "2355360"
  },
  {
    "text": "right and then we use that to figure out where the day is going to go first what happens it rights are not well distributed to try to point home very",
    "start": "2355360",
    "end": "2362290"
  },
  {
    "text": "important you you end up with just more data per single petition then you can",
    "start": "2362290",
    "end": "2368770"
  },
  {
    "text": "have this is this is example of a customer I mentioned earlier where they put 40 gigs of data under the same partition key and this creates this as",
    "start": "2368770",
    "end": "2375700"
  },
  {
    "text": "heavy pressure on Dino diamond will always split out and have more partitions to you that scale but there's",
    "start": "2375700",
    "end": "2380800"
  },
  {
    "text": "definitely limits you know in terms of throughput can you actually read it back fast enough and it really goes back to",
    "start": "2380800",
    "end": "2386980"
  },
  {
    "text": "oh no sequel you know charted databases right there's only so much it can do",
    "start": "2386980",
    "end": "2392320"
  },
  {
    "text": "with a single server with a single node that's kind of really one one thing to",
    "start": "2392320",
    "end": "2397330"
  },
  {
    "text": "keep in mind anyway so so when we have this value that we know in this example",
    "start": "2397330",
    "end": "2403860"
  },
  {
    "text": "we're just going back to X value what we know is there's gonna be many values",
    "start": "2403860",
    "end": "2410710"
  },
  {
    "text": "under this let's say this you know X could be the name the manufacturer of",
    "start": "2410710",
    "end": "2416350"
  },
  {
    "text": "the tractor so I'd be Acme so how do we spread that across all of our Dynamo partitions so right charting enter right",
    "start": "2416350",
    "end": "2422890"
  },
  {
    "text": "charting right charting has a in this strategy a set number of shards or",
    "start": "2422890",
    "end": "2429010"
  },
  {
    "text": "possible key values where the data can be placed in so we will when we write",
    "start": "2429010",
    "end": "2434980"
  },
  {
    "text": "data we're always gonna pick a random number between 0 and n and could be 8 it",
    "start": "2434980",
    "end": "2440470"
  },
  {
    "text": "could be 10 it could be 100 depending on how much data you're putting into dynamo you have to randomly pick that and then",
    "start": "2440470",
    "end": "2447010"
  },
  {
    "text": "on read' you have to do that many queries to get all your results back so",
    "start": "2447010",
    "end": "2452280"
  },
  {
    "text": "after we run into hashing we're gonna place them on the partitions we're going to read and get all those values out",
    "start": "2452280",
    "end": "2458050"
  },
  {
    "text": "using the known values and so what we can call this is a simple write sharding",
    "start": "2458050",
    "end": "2463800"
  },
  {
    "text": "based purely on a number of buckets that you might put in your code or you might",
    "start": "2463800",
    "end": "2470680"
  },
  {
    "text": "store in a configuration file right and the other design this is one that's not",
    "start": "2470680",
    "end": "2478210"
  },
  {
    "text": "well understood by our customers I think without having a design like this in this format which is great so we can",
    "start": "2478210",
    "end": "2484570"
  },
  {
    "text": "show you an illustration of where the data goes without that it may be a little confusing so we have",
    "start": "2484570",
    "end": "2491110"
  },
  {
    "text": "this idea of creating a calculated partition key and so the calculated",
    "start": "2491110",
    "end": "2497050"
  },
  {
    "text": "partition key relies on a couple basic primitives first we have a hashing",
    "start": "2497050",
    "end": "2502870"
  },
  {
    "text": "algorithm which is going to take a string value or a number value and convert it into a set of bits or to a",
    "start": "2502870",
    "end": "2510010"
  },
  {
    "text": "number depending on whether it's the former or the latter so we're taking something that could be in any format",
    "start": "2510010",
    "end": "2515470"
  },
  {
    "text": "and then we're converting it to a number we're doing that because we want to do some very basic math we want to take",
    "start": "2515470",
    "end": "2521560"
  },
  {
    "text": "let's say a string representation of Acme convert it into utf-8 get the",
    "start": "2521560",
    "end": "2527410"
  },
  {
    "text": "integer or the long that represents that and then divided by 200 and get the",
    "start": "2527410",
    "end": "2532960"
  },
  {
    "text": "remainder and so we've got 200 buckets where that data can fly or it can fall into and so the great thing about this",
    "start": "2532960",
    "end": "2539290"
  },
  {
    "text": "is if you know I have a a you know brand of like acne or whatever it may be I can",
    "start": "2539290",
    "end": "2546640"
  },
  {
    "text": "drop this in and I can see exactly which partition the data would fall under or maybe you know serial number would be a",
    "start": "2546640",
    "end": "2553360"
  },
  {
    "text": "good one so if it's under Acme and then you know we have to got the serial number we can calculate that serial",
    "start": "2553360",
    "end": "2558400"
  },
  {
    "text": "number and say that's gonna be on this shard right and and so in one hand we",
    "start": "2558400",
    "end": "2564100"
  },
  {
    "text": "completely randomized that so and now you might be wondering well if it's random how do I access those individual",
    "start": "2564100",
    "end": "2571210"
  },
  {
    "text": "records and that really works in cases where you don't need to access a specific record but you really need to",
    "start": "2571210",
    "end": "2577000"
  },
  {
    "text": "query that the whole essentially collection of those of those item that",
    "start": "2577000",
    "end": "2582750"
  },
  {
    "text": "those items right and in this case where you have a concrete essentially or",
    "start": "2582750",
    "end": "2591090"
  },
  {
    "text": "basically solved it calculate it's calculated it allows you to access those",
    "start": "2591120",
    "end": "2596920"
  },
  {
    "text": "records individually hmm precisely and so we have the same end result where that data is distributed",
    "start": "2596920",
    "end": "2604320"
  },
  {
    "start": "2601000",
    "end": "2656000"
  },
  {
    "text": "and in some cases you can figure out which bucket and given key is going to",
    "start": "2604320",
    "end": "2609580"
  },
  {
    "text": "be in and in others you just need to to query all 20 to get the data out exactly",
    "start": "2609580",
    "end": "2614770"
  },
  {
    "text": "yeah yeah so I mean some cases were really make sense maybe if you're a",
    "start": "2614770",
    "end": "2620430"
  },
  {
    "text": "multi-tenant if you have a multi-use case and let's say your tenants have all",
    "start": "2620430",
    "end": "2625890"
  },
  {
    "text": "these events and for the primary use case you might be sharding your table on",
    "start": "2625890",
    "end": "2630990"
  },
  {
    "text": "event ID and it's all really well distributed well balanced but on the",
    "start": "2630990",
    "end": "2636840"
  },
  {
    "text": "other hand you need to be able to access all events that belong to the single tenant account and so you might have a",
    "start": "2636840",
    "end": "2642570"
  },
  {
    "text": "GSI on let's say account ID but the question now becomes can that GSI",
    "start": "2642570",
    "end": "2650580"
  },
  {
    "text": "sustain the write throughput on of those events so if you know the rate at which",
    "start": "2650580",
    "end": "2657420"
  },
  {
    "start": "2656000",
    "end": "2667000"
  },
  {
    "text": "these events are coming in is greater than 1,000 write capacity units per count your GSI will will start basically",
    "start": "2657420",
    "end": "2665880"
  },
  {
    "text": "sending back pressure to the table right because it can't handle more than 1,000 write capacity units and and in this",
    "start": "2665880",
    "end": "2672780"
  },
  {
    "start": "2667000",
    "end": "2785000"
  },
  {
    "text": "case the randomized sharding makes sense because what we really need the access",
    "start": "2672780",
    "end": "2679470"
  },
  {
    "text": "pattern for the GS is give me all the events that that are basically that belong to this particular count and and",
    "start": "2679470",
    "end": "2686760"
  },
  {
    "text": "that's one one use case in fact one scenario where this comes into play more",
    "start": "2686760",
    "end": "2692250"
  },
  {
    "text": "and more is gdpr where you simply need to be able to access data based on based on account",
    "start": "2692250",
    "end": "2699270"
  },
  {
    "text": "for example and so selecting the number of shards right is another thing that",
    "start": "2699270",
    "end": "2704670"
  },
  {
    "text": "you you do have to figure out in this case that that number of sharks really",
    "start": "2704670",
    "end": "2711440"
  },
  {
    "text": "should allow you to accomplish the scale that you need right and I we would",
    "start": "2711440",
    "end": "2717810"
  },
  {
    "text": "generally recommend that you put that data in a configuration file that it be",
    "start": "2717810",
    "end": "2723480"
  },
  {
    "text": "able to be increased that you have a single place where you can increase it and then for the advanced users you want",
    "start": "2723480",
    "end": "2729090"
  },
  {
    "text": "to you may want to identify which of those collections which of those keys are sufficiently large enough to need",
    "start": "2729090",
    "end": "2736620"
  },
  {
    "text": "that right charting so you may only shard the large tenants or the large",
    "start": "2736620",
    "end": "2742560"
  },
  {
    "text": "teams depending on the use case and in that case you probably create look another dynamo table and in there you'd",
    "start": "2742560",
    "end": "2748350"
  },
  {
    "text": "sort the metadata like this partition key has five shards this has ten shards and if you need to",
    "start": "2748350",
    "end": "2754140"
  },
  {
    "text": "increase it you just increment that by one using the the the right conditions",
    "start": "2754140",
    "end": "2760679"
  },
  {
    "text": "to increment it and then now you've got eleven shards instead of ten so you",
    "start": "2760679",
    "end": "2765989"
  },
  {
    "text": "always want to be able to change the number of shards you can count to pick a value and then you can always use a Dino",
    "start": "2765989",
    "end": "2771779"
  },
  {
    "text": "table on the side to store the metadata about the shards kind of purely on the application side it's not a feature that",
    "start": "2771779",
    "end": "2778049"
  },
  {
    "text": "support directly by dynamo right charting mmhmm right that's that you",
    "start": "2778049",
    "end": "2784469"
  },
  {
    "text": "mentioned added earlier that the concept of what do you have what do you do when you have a lot of values going to the",
    "start": "2784469",
    "end": "2789779"
  },
  {
    "start": "2785000",
    "end": "2794000"
  },
  {
    "text": "same GSI partition and now we have a concept of Jess I write charting so in",
    "start": "2789779",
    "end": "2796380"
  },
  {
    "start": "2794000",
    "end": "2846000"
  },
  {
    "text": "this example we've got a GSI primary key that set we have all these rows that are flowing in and we want to sort our our",
    "start": "2796380",
    "end": "2805229"
  },
  {
    "text": "statuses so we've got info critical and warning and so we want to be able to say",
    "start": "2805229",
    "end": "2812130"
  },
  {
    "text": "scan everything and get like just the status is back that's that's the start",
    "start": "2812130",
    "end": "2818429"
  },
  {
    "text": "of creating a GSI and it's like one things you can get out of a GSI but perhaps we want to just find all of the",
    "start": "2818429",
    "end": "2824579"
  },
  {
    "text": "items that are in critical state and so what we'll do this example is will create say five shards our partition key",
    "start": "2824579",
    "end": "2832349"
  },
  {
    "text": "is going to be you know zero through five or some value like that and then we",
    "start": "2832349",
    "end": "2838259"
  },
  {
    "text": "do five queries at one time and we say begin with begins with critical and we",
    "start": "2838259",
    "end": "2846269"
  },
  {
    "start": "2846000",
    "end": "2888000"
  },
  {
    "text": "can get back only the rows on the partition that are in the critical State what this also does for us is it",
    "start": "2846269",
    "end": "2852859"
  },
  {
    "text": "actually allows us to have the data that we need to access sorted and then we can",
    "start": "2852859",
    "end": "2858929"
  },
  {
    "text": "access all those rows that the have state critical easily yeah and in this",
    "start": "2858929",
    "end": "2866459"
  },
  {
    "text": "example as you're saying it was sorted so we could get everything that's in critical that was created in the last",
    "start": "2866459",
    "end": "2871469"
  },
  {
    "text": "hour we do a betweens with our query operation the everything is critical",
    "start": "2871469",
    "end": "2876929"
  },
  {
    "text": "between this date and that date and so that's just the beauty of GSI is with the sort key is a data sorted on",
    "start": "2876929",
    "end": "2883269"
  },
  {
    "text": "where you go right all right that's cool and next we have an example modeling a",
    "start": "2883269",
    "end": "2890109"
  },
  {
    "start": "2888000",
    "end": "2969000"
  },
  {
    "text": "movie database this is just an example I thought about this one of the tutorials",
    "start": "2890109",
    "end": "2896409"
  },
  {
    "text": "if you remember who those of you who watch the first episode we we have a tutorial that takes a movie database and",
    "start": "2896409",
    "end": "2904779"
  },
  {
    "text": "it's partitioned on year and and title and I thought okay what if we hit a rate",
    "start": "2904779",
    "end": "2911799"
  },
  {
    "text": "on it and and do it a little bit differently maybe a little more realistic",
    "start": "2911799",
    "end": "2917229"
  },
  {
    "text": "we're not we're not gonna do the entire did a model with all the entities that might be there but let's start with",
    "start": "2917229",
    "end": "2923799"
  },
  {
    "text": "movie actor and director and and see what that would look like in in dynamodb",
    "start": "2923799",
    "end": "2930640"
  },
  {
    "text": "and we might run out of time with this example but if we do I think we can just",
    "start": "2930640",
    "end": "2937929"
  },
  {
    "text": "continue next next time yeah let's let's see what we can do so we like the idea",
    "start": "2937929",
    "end": "2944380"
  },
  {
    "text": "of the movie actor director because there's there's people who can be actors",
    "start": "2944380",
    "end": "2950169"
  },
  {
    "text": "and directors it's never that simple that they're just an actor right when I",
    "start": "2950169",
    "end": "2955419"
  },
  {
    "text": "started you know I didn't even think about that right so I just model those as different sort of independent",
    "start": "2955419",
    "end": "2961479"
  },
  {
    "text": "entities right then speaking of which what's an independent entity right it's",
    "start": "2961479",
    "end": "2966909"
  },
  {
    "text": "an entity that can exist in its own right so an actor exists whether they're",
    "start": "2966909",
    "end": "2972729"
  },
  {
    "start": "2969000",
    "end": "3086000"
  },
  {
    "text": "movies or directors right as opposed to maybe you're how about a headshot",
    "start": "2972729",
    "end": "2978999"
  },
  {
    "text": "headshot exactly yeah that a lot of times those actors pages are maintained",
    "start": "2978999",
    "end": "2984849"
  },
  {
    "text": "by their agent or their publicist so that pictures usually only of them to",
    "start": "2984849",
    "end": "2990579"
  },
  {
    "text": "only be associated to their after profile not so the movie there right that would be a dependent or a child",
    "start": "2990579",
    "end": "2995829"
  },
  {
    "text": "entity because when I remove that actor I also want that hatchet to to go away",
    "start": "2995829",
    "end": "3001079"
  },
  {
    "text": "as well by contrast if you have let's say screenshots for movies with multiple",
    "start": "3001079",
    "end": "3007109"
  },
  {
    "text": "actors those might be independent entities top-level entities that",
    "start": "3007109",
    "end": "3012679"
  },
  {
    "text": "basically should still be there even if one of those actors is removed from the database or",
    "start": "3012679",
    "end": "3019230"
  },
  {
    "text": "or maybe even if the movies removed from the database so there is a there's a way",
    "start": "3019230",
    "end": "3025059"
  },
  {
    "text": "to model both basically and so it seems like for this design what we've had to",
    "start": "3025059",
    "end": "3030160"
  },
  {
    "text": "do is have a movie and a movie is a movie you know if there's there's you",
    "start": "3030160",
    "end": "3036069"
  },
  {
    "text": "know that's a pretty tight relationship but the same person can be both an actor",
    "start": "3036069",
    "end": "3042069"
  },
  {
    "text": "and a director so in no sequel terms what we've had to do is create one",
    "start": "3042069",
    "end": "3047499"
  },
  {
    "text": "representation for the director and one for the actor which does duplicate some",
    "start": "3047499",
    "end": "3052690"
  },
  {
    "text": "data for example the actor's name that's right that's one approach and whatever thing actually that we did",
    "start": "3052690",
    "end": "3060579"
  },
  {
    "text": "with this is let's see her a movie buff and you're interested in what directors",
    "start": "3060579",
    "end": "3065789"
  },
  {
    "text": "an actor has worked with and by the other way of that relationship the other",
    "start": "3065789",
    "end": "3071319"
  },
  {
    "text": "side that relationship would be if you're a director what what actors have",
    "start": "3071319",
    "end": "3077559"
  },
  {
    "text": "you directed right and so here entities are identified by the petition key",
    "start": "3077559",
    "end": "3084009"
  },
  {
    "text": "here's our initial design for how we would do this right basically we have a movie partition and then actors and",
    "start": "3084009",
    "end": "3091900"
  },
  {
    "start": "3086000",
    "end": "3160000"
  },
  {
    "text": "directors and so if you if you look at the top row for it for the movie partition you'll notice that the short",
    "start": "3091900",
    "end": "3097660"
  },
  {
    "text": "key in fact is that ethical to the partition key that's just by that's a",
    "start": "3097660",
    "end": "3103109"
  },
  {
    "text": "conscious choice in this case it could be something else but what it cannot be",
    "start": "3103109",
    "end": "3108970"
  },
  {
    "text": "is any other any other entity right",
    "start": "3108970",
    "end": "3114999"
  },
  {
    "text": "because that that particular record is the is the entity metadata it's that",
    "start": "3114999",
    "end": "3120789"
  },
  {
    "text": "that's did the record of details that are specific to two movies only right",
    "start": "3120789",
    "end": "3126039"
  },
  {
    "text": "and that's what what essentially distinguishes this as a top-level entity because entity record of the entity as a",
    "start": "3126039",
    "end": "3133480"
  },
  {
    "text": "record right exactly and we have the same for actors and directors and to be clear each of these each of these rows",
    "start": "3133480",
    "end": "3141190"
  },
  {
    "text": "of different sort keys those are different Dynamo items so it's one put item another item or a batter item",
    "start": "3141190",
    "end": "3147230"
  },
  {
    "text": "to put red 25 of those that it does so that the yellow items that are basically",
    "start": "3147230",
    "end": "3154640"
  },
  {
    "text": "colored in this diagram right are relationships which in fact take both",
    "start": "3154640",
    "end": "3161420"
  },
  {
    "start": "3160000",
    "end": "3216000"
  },
  {
    "text": "movie so as one entity and then the other side of that relationship is the",
    "start": "3161420",
    "end": "3166849"
  },
  {
    "text": "ID of either actor or director and that's how we establish and maintain",
    "start": "3166849",
    "end": "3172250"
  },
  {
    "text": "those those relationships so relationships always have to to",
    "start": "3172250",
    "end": "3178579"
  },
  {
    "text": "basically entities are presented right one by the petition key and one by the",
    "start": "3178579",
    "end": "3184220"
  },
  {
    "text": "sword key and so now the question is well what what data should we have for",
    "start": "3184220",
    "end": "3189680"
  },
  {
    "text": "each one and what do we get by by having this relationship right and so this is",
    "start": "3189680",
    "end": "3195859"
  },
  {
    "text": "where we essentially think about the materialized view the result set so if",
    "start": "3195859",
    "end": "3201829"
  },
  {
    "text": "we're thinking about no sequel 101 start with your queries start with your queries right and start with the most",
    "start": "3201829",
    "end": "3207440"
  },
  {
    "text": "important access patterns right so if I'm thinking about the movie detail I",
    "start": "3207440",
    "end": "3212930"
  },
  {
    "text": "should have all the details about the movie which are represented by and in",
    "start": "3212930",
    "end": "3218270"
  },
  {
    "start": "3216000",
    "end": "3257000"
  },
  {
    "text": "fact before I get to the movie detail how do I get to it right I have a partition key mm-hmm and that's that's",
    "start": "3218270",
    "end": "3226069"
  },
  {
    "text": "an ID that's a unique ID basically and why is that why is that the choice of",
    "start": "3226069",
    "end": "3231260"
  },
  {
    "text": "partition key and that simply kind of goes back to the notion that we should",
    "start": "3231260",
    "end": "3236599"
  },
  {
    "text": "we should have unique IDs and and be able to avoid duplicates and in in our",
    "start": "3236599",
    "end": "3246589"
  },
  {
    "text": "data but but in order to find the movie we need to have a GSI then and we have a",
    "start": "3246589",
    "end": "3254270"
  },
  {
    "text": "record we have an attribute s name and if we have a JSON that and it's just",
    "start": "3254270",
    "end": "3260060"
  },
  {
    "start": "3257000",
    "end": "3277000"
  },
  {
    "text": "like PK on top exactly say table and and once we have the the basically the name",
    "start": "3260060",
    "end": "3270859"
  },
  {
    "text": "of the movie then we actually have the movie ID now I can retrieve the record all the details for the movie",
    "start": "3270859",
    "end": "3278060"
  },
  {
    "text": "and in fact I can query that table on the movie ID and and retrieve all these associated records so actors that are in",
    "start": "3278060",
    "end": "3286400"
  },
  {
    "text": "the movie and then if I if I look at what I have as part of those records I have actor name and now you might be",
    "start": "3286400",
    "end": "3294080"
  },
  {
    "text": "wondering why do I have title of that movie again in that record and I had it",
    "start": "3294080",
    "end": "3300080"
  },
  {
    "text": "there for a different view basically for a different query and that but I also",
    "start": "3300080",
    "end": "3305150"
  },
  {
    "text": "have the name of the character in the movie seal is is the the order right in",
    "start": "3305150",
    "end": "3312830"
  },
  {
    "text": "the oh that's the credit order credit order yeah here they the actors always",
    "start": "3312830",
    "end": "3318320"
  },
  {
    "text": "argue about that and they try to get it you know in our contract I'm going to be credit or number two or some some some",
    "start": "3318320",
    "end": "3324020"
  },
  {
    "text": "actors want to be the very last in the cards and you know after the in the pre-roll like you know what they're",
    "start": "3324020",
    "end": "3329990"
  },
  {
    "text": "giving a movie they weren't ready and featuring Steve Zahn so by the way we're",
    "start": "3329990",
    "end": "3337370"
  },
  {
    "text": "running out of time and so we are we do have to stop here but stay with us next",
    "start": "3337370",
    "end": "3344450"
  },
  {
    "start": "3344000",
    "end": "3441000"
  },
  {
    "text": "time as well we filled up the maximum size of our no sequel modeling role we",
    "start": "3344450",
    "end": "3349940"
  },
  {
    "text": "capped out so we're gonna have to shard this fresh of capacity for today fresh",
    "start": "3349940",
    "end": "3355310"
  },
  {
    "text": "outta capacity we forgot switched on the man before we began so next time we will actually continue and finish this",
    "start": "3355310",
    "end": "3361040"
  },
  {
    "text": "exercise before we move on to the next topic in in the series absolutely you know I think the the great thing about",
    "start": "3361040",
    "end": "3367670"
  },
  {
    "text": "this for that is we could do experiment we need to get to come up with designs that maybe you haven't thought of before",
    "start": "3367670",
    "end": "3373910"
  },
  {
    "text": "and make sure that we're action-packed we give you as much information as we can in our time so if if we happen to",
    "start": "3373910",
    "end": "3380840"
  },
  {
    "text": "have a more information to share than there is time I think I think it shows that there's a lot of interest in this",
    "start": "3380840",
    "end": "3385910"
  },
  {
    "text": "topic and yeah yeah there's also much more that we can say don't be shy be active in the channel let us know what",
    "start": "3385910",
    "end": "3391880"
  },
  {
    "text": "you'd like to see what you like us to talk about on the show and bring your questions thank you so much and we'll",
    "start": "3391880",
    "end": "3397820"
  },
  {
    "text": "see you next time ye [Music]",
    "start": "3397820",
    "end": "3442639"
  }
]