[
  {
    "start": "0",
    "end": "53000"
  },
  {
    "text": "[Music]",
    "start": "1150",
    "end": "6000"
  },
  {
    "text": "hello I'm Jamila Jamila startup",
    "start": "6000",
    "end": "8080"
  },
  {
    "text": "Solutions architect at AWS I've been at",
    "start": "8080",
    "end": "10519"
  },
  {
    "text": "AWS just under three years working with",
    "start": "10519",
    "end": "13599"
  },
  {
    "text": "high priority and emerging startups in",
    "start": "13599",
    "end": "15679"
  },
  {
    "text": "the UK and Ireland at AWS there are",
    "start": "15679",
    "end": "18439"
  },
  {
    "text": "various types of solutions Architects",
    "start": "18439",
    "end": "21039"
  },
  {
    "text": "and I'm currently a startup Solutions",
    "start": "21039",
    "end": "23400"
  },
  {
    "text": "architect I help startups to build on",
    "start": "23400",
    "end": "25640"
  },
  {
    "text": "AWS to build their first product which",
    "start": "25640",
    "end": "28320"
  },
  {
    "text": "will become next big unit",
    "start": "28320",
    "end": "31000"
  },
  {
    "text": "let's get started with today's session",
    "start": "31000",
    "end": "32920"
  },
  {
    "text": "about choosing the right database for",
    "start": "32920",
    "end": "35480"
  },
  {
    "text": "your startup let's have a look at our",
    "start": "35480",
    "end": "37719"
  },
  {
    "text": "agenda what is a purpose build database",
    "start": "37719",
    "end": "40760"
  },
  {
    "text": "why do we need purpose build databases",
    "start": "40760",
    "end": "43160"
  },
  {
    "text": "what are the AWS purpose build databases",
    "start": "43160",
    "end": "45719"
  },
  {
    "text": "and what are the options and then last",
    "start": "45719",
    "end": "48680"
  },
  {
    "text": "but not least we will have a look at",
    "start": "48680",
    "end": "50600"
  },
  {
    "text": "let's build a bookstore app before we",
    "start": "50600",
    "end": "53120"
  },
  {
    "start": "53000",
    "end": "313000"
  },
  {
    "text": "start talking about the portfolio of",
    "start": "53120",
    "end": "55079"
  },
  {
    "text": "purpose build databases that are",
    "start": "55079",
    "end": "57079"
  },
  {
    "text": "available on a yes let's talk a little",
    "start": "57079",
    "end": "59480"
  },
  {
    "text": "bit about",
    "start": "59480",
    "end": "60519"
  },
  {
    "text": "what even is a purpose build database",
    "start": "60519",
    "end": "62680"
  },
  {
    "text": "and why we do we need them what we are",
    "start": "62680",
    "end": "65478"
  },
  {
    "text": "seeing on this slide could be a",
    "start": "65479",
    "end": "68400"
  },
  {
    "text": "monolithic application where all",
    "start": "68400",
    "end": "70600"
  },
  {
    "text": "different components are part of the",
    "start": "70600",
    "end": "72840"
  },
  {
    "text": "same application and this is okay some",
    "start": "72840",
    "end": "75439"
  },
  {
    "text": "customers need to build their product as",
    "start": "75439",
    "end": "77960"
  },
  {
    "text": "fast as possible especially startups and",
    "start": "77960",
    "end": "80560"
  },
  {
    "text": "minimize their time to Market so you",
    "start": "80560",
    "end": "83600"
  },
  {
    "text": "probably made some choices based on what",
    "start": "83600",
    "end": "86400"
  },
  {
    "text": "the team is familiar with and can",
    "start": "86400",
    "end": "89280"
  },
  {
    "text": "quickly get started",
    "start": "89280",
    "end": "90880"
  },
  {
    "text": "on however over time you may realize",
    "start": "90880",
    "end": "94680"
  },
  {
    "text": "that the design is imposing some",
    "start": "94680",
    "end": "97680"
  },
  {
    "text": "limitations such as ability to choose",
    "start": "97680",
    "end": "100479"
  },
  {
    "text": "the right programming language for the",
    "start": "100479",
    "end": "102360"
  },
  {
    "text": "right job although different modules may",
    "start": "102360",
    "end": "105320"
  },
  {
    "text": "have different scalability requirements",
    "start": "105320",
    "end": "107880"
  },
  {
    "text": "you are forced to scale the whole",
    "start": "107880",
    "end": "110399"
  },
  {
    "text": "application also compute and memory",
    "start": "110399",
    "end": "113399"
  },
  {
    "text": "requirements and this is also the case",
    "start": "113399",
    "end": "116320"
  },
  {
    "text": "when you choose a database for your",
    "start": "116320",
    "end": "118399"
  },
  {
    "text": "product different requirements for use",
    "start": "118399",
    "end": "121399"
  },
  {
    "text": "cases may require different databases",
    "start": "121399",
    "end": "124119"
  },
  {
    "text": "and however you need to solve them with",
    "start": "124119",
    "end": "126880"
  },
  {
    "text": "the database that you decided to go with",
    "start": "126880",
    "end": "130039"
  },
  {
    "text": "when the monolith becomes challenging to",
    "start": "130039",
    "end": "132599"
  },
  {
    "text": "manage and maintain then what we've seen",
    "start": "132599",
    "end": "135239"
  },
  {
    "text": "in our customers is that they break the",
    "start": "135239",
    "end": "138080"
  },
  {
    "text": "monolithic application down and they",
    "start": "138080",
    "end": "140360"
  },
  {
    "text": "start to move to a microservices",
    "start": "140360",
    "end": "142200"
  },
  {
    "text": "architecture where potentially each",
    "start": "142200",
    "end": "144599"
  },
  {
    "text": "component is implemented by a different",
    "start": "144599",
    "end": "148040"
  },
  {
    "text": "service but they all still work against",
    "start": "148040",
    "end": "150599"
  },
  {
    "text": "a single",
    "start": "150599",
    "end": "153080"
  },
  {
    "text": "database so what are the some challenges",
    "start": "153080",
    "end": "156720"
  },
  {
    "text": "that with one size fits all database can",
    "start": "156720",
    "end": "161200"
  },
  {
    "text": "happen first",
    "start": "161200",
    "end": "163640"
  },
  {
    "text": "scaling while monolithic architecture",
    "start": "163640",
    "end": "166760"
  },
  {
    "text": "seems like a good idea to quickly get",
    "start": "166760",
    "end": "168920"
  },
  {
    "text": "the application started over time you",
    "start": "168920",
    "end": "171680"
  },
  {
    "text": "may encounter some limitations that you",
    "start": "171680",
    "end": "174280"
  },
  {
    "text": "should be aware of right at the start of",
    "start": "174280",
    "end": "177640"
  },
  {
    "text": "building your startup first is scaling",
    "start": "177640",
    "end": "181680"
  },
  {
    "text": "limitations having monolithic database",
    "start": "181680",
    "end": "184840"
  },
  {
    "text": "for multiple Services created tide",
    "start": "184840",
    "end": "188200"
  },
  {
    "text": "coupling and the inability to deploy",
    "start": "188200",
    "end": "191080"
  },
  {
    "text": "service changes",
    "start": "191080",
    "end": "193040"
  },
  {
    "text": "independently if there are multiple",
    "start": "193040",
    "end": "195200"
  },
  {
    "text": "service accessing the same database",
    "start": "195200",
    "end": "198519"
  },
  {
    "text": "think about pick events combining",
    "start": "198519",
    "end": "200480"
  },
  {
    "text": "multiple Services into a monolithic",
    "start": "200480",
    "end": "202640"
  },
  {
    "text": "database would mean you will grow beyond",
    "start": "202640",
    "end": "205360"
  },
  {
    "text": "what a single database or server can",
    "start": "205360",
    "end": "207400"
  },
  {
    "text": "deliver so you will start thinking about",
    "start": "207400",
    "end": "209799"
  },
  {
    "text": "about horizontally scaling Shing which",
    "start": "209799",
    "end": "213519"
  },
  {
    "text": "has its own",
    "start": "213519",
    "end": "215480"
  },
  {
    "text": "complexities the next availability",
    "start": "215480",
    "end": "218799"
  },
  {
    "text": "challenges need similar configuration",
    "start": "218799",
    "end": "221720"
  },
  {
    "text": "for all services for highly available",
    "start": "221720",
    "end": "225640"
  },
  {
    "text": "replication security upgrade will",
    "start": "225640",
    "end": "228080"
  },
  {
    "text": "require some",
    "start": "228080",
    "end": "229840"
  },
  {
    "text": "downtime and larger blast",
    "start": "229840",
    "end": "233200"
  },
  {
    "text": "radius and last but not least High",
    "start": "233200",
    "end": "236640"
  },
  {
    "text": "operations your engineers will need to",
    "start": "236640",
    "end": "238879"
  },
  {
    "text": "invest time in patching upgrading and",
    "start": "238879",
    "end": "242599"
  },
  {
    "text": "managing the",
    "start": "242599",
    "end": "245200"
  },
  {
    "text": "infrastructure so what does decoupling",
    "start": "245200",
    "end": "247439"
  },
  {
    "text": "your data",
    "start": "247439",
    "end": "248920"
  },
  {
    "text": "means it typically means evolving from",
    "start": "248920",
    "end": "251879"
  },
  {
    "text": "monolithic and tightly coupled",
    "start": "251879",
    "end": "253680"
  },
  {
    "text": "architecture into microservices and",
    "start": "253680",
    "end": "256440"
  },
  {
    "text": "decoupled architecture each microservice",
    "start": "256440",
    "end": "259320"
  },
  {
    "text": "exposes an API application which is",
    "start": "259320",
    "end": "262120"
  },
  {
    "text": "discoverable and can be used in a",
    "start": "262120",
    "end": "264040"
  },
  {
    "text": "self-served manner in addition each",
    "start": "264040",
    "end": "267160"
  },
  {
    "text": "microservice has an independent life",
    "start": "267160",
    "end": "269400"
  },
  {
    "text": "cycle cycle which means that each one",
    "start": "269400",
    "end": "272080"
  },
  {
    "text": "can be developed deployed scaled and",
    "start": "272080",
    "end": "275800"
  },
  {
    "text": "managed in",
    "start": "275800",
    "end": "278440"
  },
  {
    "text": "independently breaking complex",
    "start": "278440",
    "end": "280479"
  },
  {
    "text": "applications into small pieces and then",
    "start": "280479",
    "end": "283199"
  },
  {
    "text": "picking the best tool to solve each",
    "start": "283199",
    "end": "285120"
  },
  {
    "text": "problem the best tool for a job usually",
    "start": "285120",
    "end": "288320"
  },
  {
    "text": "defers by use case need to evaluate",
    "start": "288320",
    "end": "291919"
  },
  {
    "text": "different technical aspects of each",
    "start": "291919",
    "end": "294240"
  },
  {
    "text": "module such as workload is going to be",
    "start": "294240",
    "end": "296960"
  },
  {
    "text": "transactional or analytical do we need",
    "start": "296960",
    "end": "299560"
  },
  {
    "text": "need to enforce relationship among",
    "start": "299560",
    "end": "301360"
  },
  {
    "text": "different entities what is the required",
    "start": "301360",
    "end": "303880"
  },
  {
    "text": "through put and latency what about the",
    "start": "303880",
    "end": "306240"
  },
  {
    "text": "access patterns what about the",
    "start": "306240",
    "end": "308400"
  },
  {
    "text": "consistency do we need an eventual",
    "start": "308400",
    "end": "310320"
  },
  {
    "text": "consistency or strong",
    "start": "310320",
    "end": "312120"
  },
  {
    "text": "one well let's work backwards from your",
    "start": "312120",
    "end": "315759"
  },
  {
    "start": "313000",
    "end": "601000"
  },
  {
    "text": "requirements and let's have a look what",
    "start": "315759",
    "end": "318000"
  },
  {
    "text": "are the AWS purpose build databases out",
    "start": "318000",
    "end": "321600"
  },
  {
    "text": "there so I'd like to introduce you the",
    "start": "321600",
    "end": "324479"
  },
  {
    "text": "bookstore app and its main",
    "start": "324479",
    "end": "327520"
  },
  {
    "text": "functionalities so on the corner you see",
    "start": "327520",
    "end": "330560"
  },
  {
    "text": "a QR code and a URL that you can type",
    "start": "330560",
    "end": "334360"
  },
  {
    "text": "and actually see the bookstore app in",
    "start": "334360",
    "end": "337800"
  },
  {
    "text": "action as a workshop you will be able to",
    "start": "337800",
    "end": "340720"
  },
  {
    "text": "see the full architecture all the",
    "start": "340720",
    "end": "342960"
  },
  {
    "text": "Integrity parts and even Deploy on your",
    "start": "342960",
    "end": "345160"
  },
  {
    "text": "AWS environment so the goal of the AWS",
    "start": "345160",
    "end": "349800"
  },
  {
    "text": "bookstore demo app is to provide a fully",
    "start": "349800",
    "end": "352639"
  },
  {
    "text": "functional web application that utilizes",
    "start": "352639",
    "end": "355520"
  },
  {
    "text": "multiple purpose-built AWS databases",
    "start": "355520",
    "end": "358919"
  },
  {
    "text": "increasing L modern web applications are",
    "start": "358919",
    "end": "362240"
  },
  {
    "text": "built using a multitude of different",
    "start": "362240",
    "end": "365160"
  },
  {
    "text": "databases developers break their large",
    "start": "365160",
    "end": "368199"
  },
  {
    "text": "applications into individual components",
    "start": "368199",
    "end": "371240"
  },
  {
    "text": "and select the best database for each",
    "start": "371240",
    "end": "374440"
  },
  {
    "text": "job modern applications have a diverse",
    "start": "374440",
    "end": "377639"
  },
  {
    "text": "set of access patterns and the",
    "start": "377639",
    "end": "379560"
  },
  {
    "text": "requirements imposed by those access",
    "start": "379560",
    "end": "381639"
  },
  {
    "text": "patterns will determine which database",
    "start": "381639",
    "end": "384560"
  },
  {
    "text": "can best serve those requirements so as",
    "start": "384560",
    "end": "388120"
  },
  {
    "text": "an example you see on this screen that",
    "start": "388120",
    "end": "391520"
  },
  {
    "text": "bookstore app has several components for",
    "start": "391520",
    "end": "395840"
  },
  {
    "text": "example search uh bookstore best sellers",
    "start": "395840",
    "end": "400000"
  },
  {
    "text": "um cookbooks recommendations for books",
    "start": "400000",
    "end": "403039"
  },
  {
    "text": "Etc and we will see in action which",
    "start": "403039",
    "end": "405520"
  },
  {
    "text": "databases will be applicable for each",
    "start": "405520",
    "end": "409759"
  },
  {
    "text": "component so we want to focus on using",
    "start": "410039",
    "end": "413440"
  },
  {
    "text": "different data stores in a single app we",
    "start": "413440",
    "end": "416039"
  },
  {
    "text": "will primarily look at four user",
    "start": "416039",
    "end": "419000"
  },
  {
    "text": "experience es customers searching for",
    "start": "419000",
    "end": "421639"
  },
  {
    "text": "the book they want bookstore bestsellers",
    "start": "421639",
    "end": "425960"
  },
  {
    "text": "cookbooks details about the book and",
    "start": "425960",
    "end": "428919"
  },
  {
    "text": "four recommendations for books based on",
    "start": "428919",
    "end": "432240"
  },
  {
    "text": "the books your friends have bought so",
    "start": "432240",
    "end": "435479"
  },
  {
    "text": "let's start with the front end there is",
    "start": "435479",
    "end": "437960"
  },
  {
    "text": "react web application cloudfront and",
    "start": "437960",
    "end": "441479"
  },
  {
    "text": "Amazon S3 to globally",
    "start": "441479",
    "end": "443520"
  },
  {
    "text": "distributed web application assets are",
    "start": "443520",
    "end": "446160"
  },
  {
    "text": "stored and maintained in Amazon hisory",
    "start": "446160",
    "end": "449000"
  },
  {
    "text": "like book cover photos Javascript file",
    "start": "449000",
    "end": "452840"
  },
  {
    "text": "Styles shets Etc Amazon cloudfront",
    "start": "452840",
    "end": "456599"
  },
  {
    "text": "caches the frontend content from Amazon",
    "start": "456599",
    "end": "460319"
  },
  {
    "text": "S3 and distributing it globally the",
    "start": "460319",
    "end": "464240"
  },
  {
    "text": "front end interacts with Amazon Cognito",
    "start": "464240",
    "end": "467280"
  },
  {
    "text": "and Amazon API Gateway only so you may",
    "start": "467280",
    "end": "471039"
  },
  {
    "text": "think why we're using Cognito it's for",
    "start": "471039",
    "end": "474039"
  },
  {
    "text": "authentication",
    "start": "474039",
    "end": "475759"
  },
  {
    "text": "requests Amazon cloud from our content",
    "start": "475759",
    "end": "478759"
  },
  {
    "text": "delivery Network to deliver content",
    "start": "478759",
    "end": "481520"
  },
  {
    "text": "securely with low latency Amazon is",
    "start": "481520",
    "end": "484840"
  },
  {
    "text": "threee for object storage to store and",
    "start": "484840",
    "end": "487720"
  },
  {
    "text": "retrieve data from anywhere and the",
    "start": "487720",
    "end": "490560"
  },
  {
    "text": "Cognito a service to implement customer",
    "start": "490560",
    "end": "492960"
  },
  {
    "text": "identity and access management system",
    "start": "492960",
    "end": "495280"
  },
  {
    "text": "that is secure and",
    "start": "495280",
    "end": "498199"
  },
  {
    "text": "scalable we start with the design of the",
    "start": "498199",
    "end": "501919"
  },
  {
    "text": "back end what are the resources that we",
    "start": "501919",
    "end": "505120"
  },
  {
    "text": "need to provide basic book catalog and",
    "start": "505120",
    "end": "509479"
  },
  {
    "text": "check out functionality let's chop it",
    "start": "509479",
    "end": "512080"
  },
  {
    "text": "down into pieces we have",
    "start": "512080",
    "end": "515440"
  },
  {
    "text": "books we have cards that books are added",
    "start": "515440",
    "end": "519120"
  },
  {
    "text": "to and we have check out to place an",
    "start": "519120",
    "end": "521959"
  },
  {
    "text": "order with books currently on the card",
    "start": "521959",
    "end": "525880"
  },
  {
    "text": "we will use API Gateway as the front",
    "start": "525880",
    "end": "528560"
  },
  {
    "text": "door to have frontend clients",
    "start": "528560",
    "end": "531080"
  },
  {
    "text": "interacting with the functionality and",
    "start": "531080",
    "end": "533399"
  },
  {
    "text": "business logic of our back end Amazon",
    "start": "533399",
    "end": "536839"
  },
  {
    "text": "API Gateway is fully managed service",
    "start": "536839",
    "end": "540600"
  },
  {
    "text": "that makes it easy for developers to",
    "start": "540600",
    "end": "542720"
  },
  {
    "text": "create publish maintain Monitor and",
    "start": "542720",
    "end": "545720"
  },
  {
    "text": "secure apis at any scale it handles all",
    "start": "545720",
    "end": "549600"
  },
  {
    "text": "the tasks involved in accepting and",
    "start": "549600",
    "end": "552440"
  },
  {
    "text": "processing up to hundreds of thousands",
    "start": "552440",
    "end": "554920"
  },
  {
    "text": "of congruent API",
    "start": "554920",
    "end": "557480"
  },
  {
    "text": "calls so based on the requirements we",
    "start": "557480",
    "end": "560519"
  },
  {
    "text": "come up with the end points that help us",
    "start": "560519",
    "end": "563279"
  },
  {
    "text": "implementing the desired functionalities",
    "start": "563279",
    "end": "566000"
  },
  {
    "text": "we're going to use AWS Lambda our",
    "start": "566000",
    "end": "569480"
  },
  {
    "text": "service to run code without thinking",
    "start": "569480",
    "end": "572160"
  },
  {
    "text": "about servers or",
    "start": "572160",
    "end": "574160"
  },
  {
    "text": "clusters the unit of the service is a",
    "start": "574160",
    "end": "577680"
  },
  {
    "text": "function where we will code the business",
    "start": "577680",
    "end": "579880"
  },
  {
    "text": "Logic for each endpoint this function",
    "start": "579880",
    "end": "583519"
  },
  {
    "text": "will be invoked by API Gateway upon HTTP",
    "start": "583519",
    "end": "588240"
  },
  {
    "text": "requests but so far we still don't know",
    "start": "588240",
    "end": "591720"
  },
  {
    "text": "which database we should be using we",
    "start": "591720",
    "end": "593920"
  },
  {
    "text": "just know we need a database to store",
    "start": "593920",
    "end": "596760"
  },
  {
    "text": "book card and Order information",
    "start": "596760",
    "end": "600720"
  },
  {
    "text": "well before choosing which database you",
    "start": "600720",
    "end": "603440"
  },
  {
    "start": "601000",
    "end": "962000"
  },
  {
    "text": "actually need to use for each component",
    "start": "603440",
    "end": "606079"
  },
  {
    "text": "you need to understand what type of data",
    "start": "606079",
    "end": "608200"
  },
  {
    "text": "you will be using for the database for",
    "start": "608200",
    "end": "612399"
  },
  {
    "text": "example if you have structured data you",
    "start": "612399",
    "end": "614839"
  },
  {
    "text": "may benefit from using Amazon RDS which",
    "start": "614839",
    "end": "617760"
  },
  {
    "text": "provides a management and automation",
    "start": "617760",
    "end": "620160"
  },
  {
    "text": "layer around database engines that takes",
    "start": "620160",
    "end": "623320"
  },
  {
    "text": "care of activities such as provisioning",
    "start": "623320",
    "end": "625640"
  },
  {
    "text": "configuration patching backups or",
    "start": "625640",
    "end": "629079"
  },
  {
    "text": "monitoring the health of",
    "start": "629079",
    "end": "631519"
  },
  {
    "text": "database within this management",
    "start": "631519",
    "end": "633800"
  },
  {
    "text": "framework we offer the widest variety of",
    "start": "633800",
    "end": "637279"
  },
  {
    "text": "database engines with two popular",
    "start": "637279",
    "end": "639959"
  },
  {
    "text": "commercial engines Microsoft SQL server",
    "start": "639959",
    "end": "642600"
  },
  {
    "text": "and Oracle and three popular open source",
    "start": "642600",
    "end": "645480"
  },
  {
    "text": "database engines such as MySQL post SQL",
    "start": "645480",
    "end": "649240"
  },
  {
    "text": "and",
    "start": "649240",
    "end": "650040"
  },
  {
    "text": "morb additionally it",
    "start": "650040",
    "end": "653200"
  },
  {
    "text": "offers Cloud native relational database",
    "start": "653200",
    "end": "656200"
  },
  {
    "text": "solution Amazon Aurora and here you also",
    "start": "656200",
    "end": "659760"
  },
  {
    "text": "see the benefits of each database",
    "start": "659760",
    "end": "662880"
  },
  {
    "text": "engines used by Amazon RDS such as easy",
    "start": "662880",
    "end": "665959"
  },
  {
    "text": "to administer available and durable",
    "start": "665959",
    "end": "668600"
  },
  {
    "text": "highly scalable and fast and secure but",
    "start": "668600",
    "end": "672240"
  },
  {
    "text": "if you have unstructured or",
    "start": "672240",
    "end": "674360"
  },
  {
    "text": "semi-structured data then you may",
    "start": "674360",
    "end": "676639"
  },
  {
    "text": "benefit from Amazon Dynamo DB which is a",
    "start": "676639",
    "end": "678880"
  },
  {
    "text": "fully managed serverless key value no",
    "start": "678880",
    "end": "681680"
  },
  {
    "text": "SQL database that delivers a single",
    "start": "681680",
    "end": "684240"
  },
  {
    "text": "digit millisecond performance at any",
    "start": "684240",
    "end": "687959"
  },
  {
    "text": "scale Dynamo DB has the ability to group",
    "start": "687959",
    "end": "691880"
  },
  {
    "text": "records together by a related key and",
    "start": "691880",
    "end": "696000"
  },
  {
    "text": "sort them by one of the attributes in",
    "start": "696000",
    "end": "698360"
  },
  {
    "text": "the records this makes it the perfect",
    "start": "698360",
    "end": "701079"
  },
  {
    "text": "data store for Access patterns that have",
    "start": "701079",
    "end": "703920"
  },
  {
    "text": "relatively simple lookup",
    "start": "703920",
    "end": "706720"
  },
  {
    "text": "requirements like getting a specific",
    "start": "706720",
    "end": "709160"
  },
  {
    "text": "book user or order record and that is",
    "start": "709160",
    "end": "713920"
  },
  {
    "text": "how we use it in the bookstore",
    "start": "713920",
    "end": "716360"
  },
  {
    "text": "app right another requirement we would",
    "start": "716360",
    "end": "720440"
  },
  {
    "text": "like to display to our users what books",
    "start": "720440",
    "end": "724079"
  },
  {
    "text": "we are selling the most our bests",
    "start": "724079",
    "end": "726480"
  },
  {
    "text": "sellers top 20 purchased or rated",
    "start": "726480",
    "end": "731639"
  },
  {
    "text": "books we want to create a leaderboard",
    "start": "732279",
    "end": "735519"
  },
  {
    "text": "with the rise of realtime applications",
    "start": "735519",
    "end": "738360"
  },
  {
    "text": "in memory database are growing in",
    "start": "738360",
    "end": "741240"
  },
  {
    "text": "popularity in memory databases",
    "start": "741240",
    "end": "743720"
  },
  {
    "text": "predominantly rely on Main memory for",
    "start": "743720",
    "end": "746880"
  },
  {
    "text": "data storage management and",
    "start": "746880",
    "end": "750360"
  },
  {
    "text": "manipulation Amazon elastic cache makes",
    "start": "750360",
    "end": "752880"
  },
  {
    "text": "it easy to set up manage and scale an",
    "start": "752880",
    "end": "755920"
  },
  {
    "text": "inmemory data store or cach",
    "start": "755920",
    "end": "759199"
  },
  {
    "text": "environment it also works with both the",
    "start": "759199",
    "end": "762199"
  },
  {
    "text": "redis and mcash",
    "start": "762199",
    "end": "765720"
  },
  {
    "text": "engines let's go back to our",
    "start": "765839",
    "end": "768160"
  },
  {
    "text": "architecture here we see the best",
    "start": "768160",
    "end": "770160"
  },
  {
    "text": "sellers",
    "start": "770160",
    "end": "771199"
  },
  {
    "text": "list Amazon elastic cash for reddis",
    "start": "771199",
    "end": "774720"
  },
  {
    "text": "reads ordered information from Amazon",
    "start": "774720",
    "end": "777519"
  },
  {
    "text": "Dynamo DB streams",
    "start": "777519",
    "end": "779839"
  },
  {
    "text": "creating a leaderboard of the top 20",
    "start": "779839",
    "end": "782800"
  },
  {
    "text": "purchased or rated",
    "start": "782800",
    "end": "786240"
  },
  {
    "text": "books what if we wanted to display book",
    "start": "786240",
    "end": "789720"
  },
  {
    "text": "recommendations based on what our",
    "start": "789720",
    "end": "791760"
  },
  {
    "text": "friends in the platform have",
    "start": "791760",
    "end": "795040"
  },
  {
    "text": "bought well Amazon Neptune is a fully",
    "start": "795040",
    "end": "799079"
  },
  {
    "text": "managed database service built for the",
    "start": "799079",
    "end": "802279"
  },
  {
    "text": "cloud that makes it easier to build and",
    "start": "802279",
    "end": "805519"
  },
  {
    "text": "run graph applications it designed to",
    "start": "805519",
    "end": "808920"
  },
  {
    "text": "efficiently access data that is highly",
    "start": "808920",
    "end": "811600"
  },
  {
    "text": "related where data modeled as a graph",
    "start": "811600",
    "end": "815279"
  },
  {
    "text": "you can use the open Gremlin and sparkl",
    "start": "815279",
    "end": "818279"
  },
  {
    "text": "query languages to access the data it is",
    "start": "818279",
    "end": "822160"
  },
  {
    "text": "high performance database allowing you",
    "start": "822160",
    "end": "824800"
  },
  {
    "text": "to query billions of relationships with",
    "start": "824800",
    "end": "828160"
  },
  {
    "text": "millisecond",
    "start": "828160",
    "end": "830160"
  },
  {
    "text": "latency Amazon Neptune provides social",
    "start": "830160",
    "end": "833639"
  },
  {
    "text": "recommendations based on what users",
    "start": "833639",
    "end": "836040"
  },
  {
    "text": "friends have purchased scaling as the",
    "start": "836040",
    "end": "839120"
  },
  {
    "text": "storefront grows with more products",
    "start": "839120",
    "end": "842120"
  },
  {
    "text": "pages and",
    "start": "842120",
    "end": "843880"
  },
  {
    "text": "users well what about search Amazon open",
    "start": "843880",
    "end": "847880"
  },
  {
    "text": "search service enables full text search",
    "start": "847880",
    "end": "851120"
  },
  {
    "text": "for our storefront enabling users to",
    "start": "851120",
    "end": "854000"
  },
  {
    "text": "find products based on a variety of",
    "start": "854000",
    "end": "856839"
  },
  {
    "text": "terms including author title and",
    "start": "856839",
    "end": "860839"
  },
  {
    "text": "category so you need to use the right",
    "start": "860839",
    "end": "863720"
  },
  {
    "text": "database for the right job previously we",
    "start": "863720",
    "end": "867440"
  },
  {
    "text": "covered some of these data databases",
    "start": "867440",
    "end": "869480"
  },
  {
    "text": "like relational database we covered",
    "start": "869480",
    "end": "871920"
  },
  {
    "text": "Dynamo DB we covered inmemory database",
    "start": "871920",
    "end": "875560"
  },
  {
    "text": "you can read up about graph database as",
    "start": "875560",
    "end": "878680"
  },
  {
    "text": "well but what about the other use cases",
    "start": "878680",
    "end": "881959"
  },
  {
    "text": "for example Amazon document Deb is a",
    "start": "881959",
    "end": "884360"
  },
  {
    "text": "fully managed native Json document",
    "start": "884360",
    "end": "886600"
  },
  {
    "text": "database that makes it easy and cost",
    "start": "886600",
    "end": "889399"
  },
  {
    "text": "effective to operate critical document",
    "start": "889399",
    "end": "892199"
  },
  {
    "text": "workloads at virtually any scale without",
    "start": "892199",
    "end": "895880"
  },
  {
    "text": "managing infrastructure it simplifies",
    "start": "895880",
    "end": "898720"
  },
  {
    "text": "your architecture by providing built-in",
    "start": "898720",
    "end": "901519"
  },
  {
    "text": "security best practices continuous",
    "start": "901519",
    "end": "904240"
  },
  {
    "text": "backups and Native Integrations with",
    "start": "904240",
    "end": "906880"
  },
  {
    "text": "other AWS",
    "start": "906880",
    "end": "908600"
  },
  {
    "text": "Services Amazon time stream which is",
    "start": "908600",
    "end": "911120"
  },
  {
    "text": "this fast scalable and serverless time",
    "start": "911120",
    "end": "914199"
  },
  {
    "text": "series",
    "start": "914199",
    "end": "915440"
  },
  {
    "text": "database with Amazon qldb which is",
    "start": "915440",
    "end": "918920"
  },
  {
    "text": "quantum Ledger database you can maintain",
    "start": "918920",
    "end": "921440"
  },
  {
    "text": "an immutable cryptographically",
    "start": "921440",
    "end": "923519"
  },
  {
    "text": "verifiable log of data changes it's",
    "start": "923519",
    "end": "926720"
  },
  {
    "text": "immutable and transparent",
    "start": "926720",
    "end": "930600"
  },
  {
    "text": "Journal Amazon key spaces key value",
    "start": "930839",
    "end": "934839"
  },
  {
    "text": "database it's a serverless scalable",
    "start": "934839",
    "end": "938199"
  },
  {
    "text": "highly available and managed Apache",
    "start": "938199",
    "end": "940600"
  },
  {
    "text": "Cassandra compatible database",
    "start": "940600",
    "end": "944519"
  },
  {
    "text": "service if you want to read more and",
    "start": "944680",
    "end": "947759"
  },
  {
    "text": "learn more about AWS database services",
    "start": "947759",
    "end": "951279"
  },
  {
    "text": "please use this link as shown on the",
    "start": "951279",
    "end": "955040"
  },
  {
    "text": "screen thank",
    "start": "955040",
    "end": "957600"
  },
  {
    "text": "you",
    "start": "957600",
    "end": "960600"
  },
  {
    "text": "[Music]",
    "start": "961070",
    "end": "964129"
  }
]