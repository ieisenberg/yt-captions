[
  {
    "text": "Welcome to 'Back to Basics'.",
    "start": "6425",
    "end": "8088"
  },
  {
    "text": "I'm Krupanidhi Jay,\na Senior Solutions Architect with AWS.",
    "start": "8601",
    "end": "12580"
  },
  {
    "text": "In this episode, we are going to talk\nabout chaos engineering with Fault Injection Simulator,",
    "start": "12581",
    "end": "17925"
  },
  {
    "text": "a fully managed service\nfor running fault injection experiments on AWS,",
    "start": "17925",
    "end": "22548"
  },
  {
    "text": "which makes it easier for you to improve\nyour application's performance,",
    "start": "22674",
    "end": "26311"
  },
  {
    "text": "observability, and resilience.",
    "start": "26311",
    "end": "28574"
  },
  {
    "text": "With Fault Injection Simulator or FIS,\nyou set up and run experiments",
    "start": "28859",
    "end": "33960"
  },
  {
    "text": "that help you create\nthe real world conditions needed",
    "start": "33960",
    "end": "36961"
  },
  {
    "text": "to uncover application issues\nthat can be difficult to find otherwise.",
    "start": "36961",
    "end": "41400"
  },
  {
    "text": "AWS FIS provides templates\nthat generate disruptions",
    "start": "41874",
    "end": "46311"
  },
  {
    "text": "and the controls and guardrails\nthat you need",
    "start": "46311",
    "end": "49032"
  },
  {
    "text": "to run experiments\nin your production environment.",
    "start": "49032",
    "end": "51949"
  },
  {
    "text": "Before we dive in, let's look at some of the challenges\nwith distributed systems.",
    "start": "52356",
    "end": "56619"
  },
  {
    "text": "Distributed systems have multiple components\nlocated on different systems",
    "start": "57073",
    "end": "61547"
  },
  {
    "text": "and vary greatly in implementation.",
    "start": "61802",
    "end": "64114"
  },
  {
    "text": "As distributed systems grow in complexity,",
    "start": "64344",
    "end": "67056"
  },
  {
    "text": "so does the difficulty in predicting failures.",
    "start": "67222",
    "end": "70145"
  },
  {
    "text": "Failures of mission critical distributor applications",
    "start": "70579",
    "end": "73715"
  },
  {
    "text": "can cost costly outages.",
    "start": "73715",
    "end": "75820"
  },
  {
    "text": "Even simple distributed systems are complex.",
    "start": "76471",
    "end": "79765"
  },
  {
    "text": "Let's take a look\nat the simple client server communication.",
    "start": "79765",
    "end": "82936"
  },
  {
    "text": "There are a lot of steps involved\nto complete a single round trip successfully.",
    "start": "83742",
    "end": "88150"
  },
  {
    "text": "Client puts a message into the network,",
    "start": "88659",
    "end": "91099"
  },
  {
    "text": "the network delivers the message to the server,",
    "start": "91099",
    "end": "93806"
  },
  {
    "text": "the server validates the message\nand updates its state if required.",
    "start": "94001",
    "end": "98312"
  },
  {
    "text": "Server puts the reply onto the network.",
    "start": "98724",
    "end": "101420"
  },
  {
    "text": "Network delivers the reply to the client,",
    "start": "101725",
    "end": "104418"
  },
  {
    "text": "and client validates the reply\nand updates its state if required.",
    "start": "104547",
    "end": "108911"
  },
  {
    "text": "There are so many permutations of failure\nthat can happen in the simple distributed system.",
    "start": "109405",
    "end": "113893"
  },
  {
    "text": "Now, imagine all these\nover thousands and millions of requests.",
    "start": "113893",
    "end": "117723"
  },
  {
    "text": "Traditional testing\nlike unit and functional tests are required,",
    "start": "118143",
    "end": "122551"
  },
  {
    "text": "but don't always address the complexity\nof a production environment.",
    "start": "122552",
    "end": "126124"
  },
  {
    "text": "Running these tests in isolation\nonly verify a known condition.",
    "start": "126773",
    "end": "131072"
  },
  {
    "text": "What about the random errors\nwe are not expecting?",
    "start": "131606",
    "end": "134059"
  },
  {
    "text": "The configuration drifts,\nthe network error,",
    "start": "134059",
    "end": "136893"
  },
  {
    "text": "the unknown conditions.",
    "start": "136893",
    "end": "138767"
  },
  {
    "text": "How can we test for something\nwhich we don't know about?",
    "start": "138767",
    "end": "141220"
  },
  {
    "text": "Luckily, that is a practice which helps\nwith these kinds of unknowns,",
    "start": "141220",
    "end": "145550"
  },
  {
    "text": "and it is chaos engineering.",
    "start": "145550",
    "end": "147578"
  },
  {
    "text": "Chaos engineering is the process\nof stressing an application",
    "start": "147907",
    "end": "151403"
  },
  {
    "text": "by creating disruptive events\nsuch as server outages, APA throttling, etc.;",
    "start": "151403",
    "end": "157033"
  },
  {
    "text": "observing how the system responds\nand implementing improvements.",
    "start": "157033",
    "end": "161005"
  },
  {
    "text": "We literally break things on purpose\nto build a more resilient system.",
    "start": "161005",
    "end": "165355"
  },
  {
    "text": "Chaos engineering is not about injecting faults\nrandomly without a purpose,",
    "start": "165355",
    "end": "170106"
  },
  {
    "text": "but injecting faults in a control environment ",
    "start": "170106",
    "end": "173397"
  },
  {
    "text": "with well-defined experiments",
    "start": "173397",
    "end": "175523"
  },
  {
    "text": "to build confidence in your application\nand tools to withstand failures.",
    "start": "175523",
    "end": "180961"
  },
  {
    "text": "To do that, you have to follow\na well-defined scientific method",
    "start": "181296",
    "end": "185778"
  },
  {
    "text": "that will take you from understanding\nthe steady state of the system",
    "start": "185778",
    "end": "189030"
  },
  {
    "text": "you're dealing with to articulating a hypothesis,\nrunning an experiment,",
    "start": "189030",
    "end": "194278"
  },
  {
    "text": "often using fault injection,\nverifying the results,",
    "start": "194278",
    "end": "197632"
  },
  {
    "text": "and finally learning from your experiments\nin order to improve the system.",
    "start": "197632",
    "end": "202381"
  },
  {
    "text": "While chaos engineering\nis a great option to have in your toolbox,",
    "start": "202798",
    "end": "206325"
  },
  {
    "text": "it's often hard to get started with it,",
    "start": "206325",
    "end": "208661"
  },
  {
    "text": "hard because most of the time\nyou have to stitch different tools,",
    "start": "208661",
    "end": "213458"
  },
  {
    "text": "scripts, and libraries together\nto cover the full spectrum of faults",
    "start": "213458",
    "end": "218032"
  },
  {
    "text": "you can inject in the system.",
    "start": "218032",
    "end": "220002"
  },
  {
    "text": "Compatibility of required libraries and agents",
    "start": "220449",
    "end": "223532"
  },
  {
    "text": "for these open source tools may be limited.",
    "start": "223532",
    "end": "226278"
  },
  {
    "text": "It is also difficult to ensure a safe environment\nin which to inject results. ",
    "start": "226663",
    "end": "231842"
  },
  {
    "text": "You want to be able to limit\nthe extent of potential issues",
    "start": "231843",
    "end": "235572"
  },
  {
    "text": "from an experiment and without guardrails,\nan experiment can go sideways",
    "start": "235572",
    "end": "240219"
  },
  {
    "text": "affecting the rest of your environment.",
    "start": "240219",
    "end": "242676"
  },
  {
    "text": "And finally,\nsome failures are really hard to reproduce.",
    "start": "242904",
    "end": "246671"
  },
  {
    "text": "It is important to realize that outages rarely happen\nbecause of a single failure.",
    "start": "247095",
    "end": "252536"
  },
  {
    "text": "It usually happens\nbecause of a combination of small failures ",
    "start": "252536",
    "end": "256450"
  },
  {
    "text": "all happening at the same time\nor in a sequence.",
    "start": "256451",
    "end": "260448"
  },
  {
    "text": "To address these concerns,\nwe launched AWS Fault Injection Simulator.",
    "start": "260448",
    "end": "265055"
  },
  {
    "text": "You can use AWS Fault Injection Simulator",
    "start": "265313",
    "end": "268393"
  },
  {
    "text": "via the AWS Console or the AWS CLI.",
    "start": "268394",
    "end": "272088"
  },
  {
    "text": "The Console is great for getting started\nand trying things out,",
    "start": "272283",
    "end": "275875"
  },
  {
    "text": "while the AWS CLI lets you automate things\nwith your CI/CD pipeline.",
    "start": "275875",
    "end": "281208"
  },
  {
    "text": "AWS FIS integrates\nwith IAM rules and policies,",
    "start": "281208",
    "end": "286102"
  },
  {
    "text": "so you can be sure that only authorized parties\ncan run experiments.",
    "start": "286102",
    "end": "290771"
  },
  {
    "text": "You can also define more fine grain controls,",
    "start": "290771",
    "end": "293972"
  },
  {
    "text": "for example, what type of faults\nare authorized and on which resources.",
    "start": "293972",
    "end": "298598"
  },
  {
    "text": "When you create\nyour chaos experiment from the console,",
    "start": "299222",
    "end": "302137"
  },
  {
    "text": "AWS FIS automatically creates a template for you,",
    "start": "302138",
    "end": "305817"
  },
  {
    "text": "a template you can export and reuse later.",
    "start": "305817",
    "end": "309011"
  },
  {
    "text": "We start with an experiment template,\nwhich will comprise of different port injection actions",
    "start": "309516",
    "end": "314735"
  },
  {
    "text": "like generating a high CPU load\non an EC2 instance.",
    "start": "314735",
    "end": "319222"
  },
  {
    "text": "FIS actions also help you control\nthe timeline and duration of the experiment.",
    "start": "319222",
    "end": "325637"
  },
  {
    "text": "FIS performs the actions\non the AWS resources that are specified as targets",
    "start": "326008",
    "end": "332639"
  },
  {
    "text": "when you start the experiment.",
    "start": "332640",
    "end": "334576"
  },
  {
    "text": "A target can be a specific resource,\nlike an EC2 instance or RDS database",
    "start": "334984",
    "end": "341255"
  },
  {
    "text": "in your AWS environment, or one or more resources\nthat match a criteria you specify.",
    "start": "341255",
    "end": "347616"
  },
  {
    "text": "You can monitor the experiment\nusing AWS CloudWatch,",
    "start": "348184",
    "end": "352246"
  },
  {
    "text": "and FIS can also be integrated\nwith Amazon EventBridge,",
    "start": "352246",
    "end": "356031"
  },
  {
    "text": "which allows you to integrate\nwith your existing monitoring tools.",
    "start": "356031",
    "end": "360390"
  },
  {
    "text": "Experiments once started automatically stop\nwhen all the actions are complete,",
    "start": "361363",
    "end": "366778"
  },
  {
    "text": "or you can optionally configure\nto stop the experiment",
    "start": "366778",
    "end": "369942"
  },
  {
    "text": "when an alarm or event is triggered.",
    "start": "369942",
    "end": "372745"
  },
  {
    "text": "Once the experiment is complete,",
    "start": "373894",
    "end": "375873"
  },
  {
    "text": "you can view the results of the experiment\nto identify any performance,",
    "start": "375873",
    "end": "380197"
  },
  {
    "text": "observability, or resilience issues.",
    "start": "380197",
    "end": "383125"
  },
  {
    "text": "You can use AWS FIS in periodic gameday events",
    "start": "383541",
    "end": "387837"
  },
  {
    "text": "by creating potential failure conditions",
    "start": "387838",
    "end": "390744"
  },
  {
    "text": "and observing how effectively\nthe team and systems respond.",
    "start": "390744",
    "end": "394896"
  },
  {
    "text": "You can also integrate FIS\ninto your continuous delivery pipeline.",
    "start": "395058",
    "end": "399501"
  },
  {
    "text": "This will enable you to repeatedly test\nthe impact of fault actions",
    "start": "399501",
    "end": "404523"
  },
  {
    "text": "as part of your software delivery process.",
    "start": "404523",
    "end": "407310"
  },
  {
    "text": "In this episode, we explore how you can run\nchaos engineering experiments",
    "start": "407683",
    "end": "412926"
  },
  {
    "text": "easily using AWS Fault Injection Simulator",
    "start": "412926",
    "end": "416375"
  },
  {
    "text": "FIS provides you the flexibility\nand built in safeguard mechanisms",
    "start": "416783",
    "end": "421551"
  },
  {
    "text": "to run chaos experiments at scale.",
    "start": "421551",
    "end": "424004"
  },
  {
    "text": "Check out the links\nbelow for more details.",
    "start": "424934",
    "end": "427410"
  },
  {
    "text": "See you next time.",
    "start": "427410",
    "end": "428709"
  }
]