[
  {
    "text": "[Music]",
    "start": "380",
    "end": "12000"
  },
  {
    "text": "hello",
    "start": "12000",
    "end": "12639"
  },
  {
    "text": "i'm srirach a cloud support associate",
    "start": "12639",
    "end": "14799"
  },
  {
    "text": "here at the aws office",
    "start": "14799",
    "end": "16320"
  },
  {
    "text": "in northern virginia today i am going to",
    "start": "16320",
    "end": "18560"
  },
  {
    "text": "show you four methods to retrieve data",
    "start": "18560",
    "end": "20960"
  },
  {
    "text": "from amazon cloudwatch logs specifically",
    "start": "20960",
    "end": "23519"
  },
  {
    "text": "when there are large volumes of log data",
    "start": "23519",
    "end": "25599"
  },
  {
    "text": "pushed to cloudwatch let's get started",
    "start": "25599",
    "end": "28640"
  },
  {
    "text": "first let's have a look at using",
    "start": "28640",
    "end": "30400"
  },
  {
    "text": "subscription filters",
    "start": "30400",
    "end": "32558"
  },
  {
    "text": "subscription filters are used to access",
    "start": "32559",
    "end": "34800"
  },
  {
    "text": "a real-time feed of log events from",
    "start": "34800",
    "end": "36719"
  },
  {
    "text": "cloudwatch logs and delivered them to",
    "start": "36719",
    "end": "38800"
  },
  {
    "text": "other services",
    "start": "38800",
    "end": "39760"
  },
  {
    "text": "such as the amazon kinesis stream amazon",
    "start": "39760",
    "end": "42399"
  },
  {
    "text": "kinesis data firehose stream",
    "start": "42399",
    "end": "44399"
  },
  {
    "text": "or aws lambda for custom processing",
    "start": "44399",
    "end": "47200"
  },
  {
    "text": "analysis",
    "start": "47200",
    "end": "48079"
  },
  {
    "text": "or loading to other systems let me",
    "start": "48079",
    "end": "50399"
  },
  {
    "text": "demonstrate an example",
    "start": "50399",
    "end": "51840"
  },
  {
    "text": "by using a cloudwatch subscription",
    "start": "51840",
    "end": "53600"
  },
  {
    "text": "filter that sends log data to your",
    "start": "53600",
    "end": "55680"
  },
  {
    "text": "lambda function",
    "start": "55680",
    "end": "57199"
  },
  {
    "text": "i'll use the aws command line interface",
    "start": "57199",
    "end": "59600"
  },
  {
    "text": "to explain this method",
    "start": "59600",
    "end": "61359"
  },
  {
    "text": "first create an aws identity and access",
    "start": "61359",
    "end": "64239"
  },
  {
    "text": "management role",
    "start": "64239",
    "end": "65600"
  },
  {
    "text": "with the trusted entity as aws lambda",
    "start": "65600",
    "end": "68799"
  },
  {
    "text": "permissions will be aws lambda basic",
    "start": "68799",
    "end": "71520"
  },
  {
    "text": "execution",
    "start": "71520",
    "end": "72080"
  },
  {
    "text": "role and then gave this role any name",
    "start": "72080",
    "end": "75840"
  },
  {
    "text": "let's copy the example trust policy from",
    "start": "75840",
    "end": "78159"
  },
  {
    "text": "here",
    "start": "78159",
    "end": "78960"
  },
  {
    "text": "now create the role cw log user",
    "start": "78960",
    "end": "87840"
  },
  {
    "text": "in the role attach this role with the",
    "start": "88240",
    "end": "90079"
  },
  {
    "text": "policy aws lambda basic execution role",
    "start": "90079",
    "end": "95280"
  },
  {
    "text": "create a lambda function now for this",
    "start": "97200",
    "end": "99439"
  },
  {
    "text": "example i am creating a hello world",
    "start": "99439",
    "end": "101360"
  },
  {
    "text": "lambda function",
    "start": "101360",
    "end": "102960"
  },
  {
    "text": "as you can see step 2 has an example",
    "start": "102960",
    "end": "105439"
  },
  {
    "text": "lambda function content",
    "start": "105439",
    "end": "107040"
  },
  {
    "text": "i am going to use that this is a very",
    "start": "107040",
    "end": "109439"
  },
  {
    "text": "simple lambda function",
    "start": "109439",
    "end": "110720"
  },
  {
    "text": "that displays whatever is pushed to the",
    "start": "110720",
    "end": "112479"
  },
  {
    "text": "log group as log events in json",
    "start": "112479",
    "end": "115759"
  },
  {
    "text": "i've created the file already i just",
    "start": "115759",
    "end": "118079"
  },
  {
    "text": "need to zip the file",
    "start": "118079",
    "end": "119200"
  },
  {
    "text": "using the command",
    "start": "119200",
    "end": "122078"
  },
  {
    "text": "let's create the lambda function",
    "start": "126960",
    "end": "130319"
  },
  {
    "text": "you have to edit the role arn with your",
    "start": "130319",
    "end": "132480"
  },
  {
    "text": "aws account number",
    "start": "132480",
    "end": "135680"
  },
  {
    "text": "now that we have created a lambda",
    "start": "138959",
    "end": "140480"
  },
  {
    "text": "function let's grant",
    "start": "140480",
    "end": "142080"
  },
  {
    "text": "cloudwatch logs permission to execute",
    "start": "142080",
    "end": "144319"
  },
  {
    "text": "the lambda function",
    "start": "144319",
    "end": "145280"
  },
  {
    "text": "edit this command replacing the",
    "start": "145280",
    "end": "147280"
  },
  {
    "text": "placeholder account",
    "start": "147280",
    "end": "148480"
  },
  {
    "text": "with your account and the placeholder",
    "start": "148480",
    "end": "150400"
  },
  {
    "text": "log group with the log group to process",
    "start": "150400",
    "end": "152879"
  },
  {
    "text": "note that you can use an existing log",
    "start": "152879",
    "end": "154800"
  },
  {
    "text": "group or create a new",
    "start": "154800",
    "end": "156000"
  },
  {
    "text": "one by using the api call create log",
    "start": "156000",
    "end": "158959"
  },
  {
    "text": "group",
    "start": "158959",
    "end": "160879"
  },
  {
    "text": "as you can see i am adding cloudwatch",
    "start": "160879",
    "end": "163200"
  },
  {
    "text": "logs permission to the function",
    "start": "163200",
    "end": "165200"
  },
  {
    "text": "so that log service can execute it and",
    "start": "165200",
    "end": "167680"
  },
  {
    "text": "push the logs",
    "start": "167680",
    "end": "168800"
  },
  {
    "text": "from log group test logs to lambda",
    "start": "168800",
    "end": "171519"
  },
  {
    "text": "function",
    "start": "171519",
    "end": "173920"
  },
  {
    "text": "after giving the permissions to lambda i",
    "start": "175280",
    "end": "177599"
  },
  {
    "text": "am now creating a subscription filter",
    "start": "177599",
    "end": "179680"
  },
  {
    "text": "using the api call put subscription",
    "start": "179680",
    "end": "182080"
  },
  {
    "text": "filter",
    "start": "182080",
    "end": "183599"
  },
  {
    "text": "similar to step 5 change the values",
    "start": "183599",
    "end": "186080"
  },
  {
    "text": "written in red",
    "start": "186080",
    "end": "188640"
  },
  {
    "text": "also you can see that there is no filter",
    "start": "188640",
    "end": "190720"
  },
  {
    "text": "pattern",
    "start": "190720",
    "end": "191680"
  },
  {
    "text": "but you can add filter patterns based on",
    "start": "191680",
    "end": "193519"
  },
  {
    "text": "your use case",
    "start": "193519",
    "end": "194959"
  },
  {
    "text": "this filter pattern is useful as you can",
    "start": "194959",
    "end": "196959"
  },
  {
    "text": "push log to a lambda function",
    "start": "196959",
    "end": "198879"
  },
  {
    "text": "only when a log matches the filter",
    "start": "198879",
    "end": "200560"
  },
  {
    "text": "pattern you have set",
    "start": "200560",
    "end": "203680"
  },
  {
    "text": "you can test this by pushing a sample",
    "start": "204159",
    "end": "206000"
  },
  {
    "text": "log data to the log group using the cli",
    "start": "206000",
    "end": "210560"
  },
  {
    "text": "i'm pushing a log data to the test logs",
    "start": "211200",
    "end": "213360"
  },
  {
    "text": "log group",
    "start": "213360",
    "end": "214720"
  },
  {
    "text": "this command will push a simple log for",
    "start": "214720",
    "end": "216720"
  },
  {
    "text": "the timestamp and message",
    "start": "216720",
    "end": "218879"
  },
  {
    "text": "the subscription filter we created is",
    "start": "218879",
    "end": "220799"
  },
  {
    "text": "accepting all messages",
    "start": "220799",
    "end": "222640"
  },
  {
    "text": "let's check out the output",
    "start": "222640",
    "end": "227840"
  },
  {
    "text": "as you can see the log events i have",
    "start": "236239",
    "end": "238400"
  },
  {
    "text": "pushed to test logs",
    "start": "238400",
    "end": "239599"
  },
  {
    "text": "the hello world lambda function will",
    "start": "239599",
    "end": "241120"
  },
  {
    "text": "print it",
    "start": "241120",
    "end": "243599"
  },
  {
    "text": "the next method i will show you is how",
    "start": "244879",
    "end": "246640"
  },
  {
    "text": "to retrieve log data",
    "start": "246640",
    "end": "248000"
  },
  {
    "text": "by running a query in cloudwatch login",
    "start": "248000",
    "end": "250560"
  },
  {
    "text": "sites",
    "start": "250560",
    "end": "251519"
  },
  {
    "text": "cloudwatch logs inside enable you to",
    "start": "251519",
    "end": "253599"
  },
  {
    "text": "interactively search",
    "start": "253599",
    "end": "254799"
  },
  {
    "text": "and analyze your log data in amazon",
    "start": "254799",
    "end": "257120"
  },
  {
    "text": "cloudwatch logs",
    "start": "257120",
    "end": "258560"
  },
  {
    "text": "you can perform queries to help you more",
    "start": "258560",
    "end": "261040"
  },
  {
    "text": "efficiently and effectively respond to",
    "start": "261040",
    "end": "263440"
  },
  {
    "text": "operational issues if an issue occurs",
    "start": "263440",
    "end": "266160"
  },
  {
    "text": "you can use cloudwatch logs insights",
    "start": "266160",
    "end": "268320"
  },
  {
    "text": "to identify potential causes and",
    "start": "268320",
    "end": "270320"
  },
  {
    "text": "validate deployed fixes",
    "start": "270320",
    "end": "272800"
  },
  {
    "text": "this is my cloudwatch console and as you",
    "start": "272800",
    "end": "275120"
  },
  {
    "text": "can see",
    "start": "275120",
    "end": "276960"
  },
  {
    "text": "i have a log group api diary where my",
    "start": "276960",
    "end": "279680"
  },
  {
    "text": "cloudtrail logs are pushed into",
    "start": "279680",
    "end": "281120"
  },
  {
    "text": "cloudwatch",
    "start": "281120",
    "end": "282320"
  },
  {
    "text": "i've configured my aws cloudtrail such",
    "start": "282320",
    "end": "284720"
  },
  {
    "text": "that whenever i make an api call",
    "start": "284720",
    "end": "287040"
  },
  {
    "text": "cloud rule pushes the data to cloudwatch",
    "start": "287040",
    "end": "288880"
  },
  {
    "text": "logs",
    "start": "288880",
    "end": "291040"
  },
  {
    "text": "from the navigation pane select insights",
    "start": "291040",
    "end": "294000"
  },
  {
    "text": "and select the log group api diary",
    "start": "294000",
    "end": "296160"
  },
  {
    "text": "from the search bar you can modify the",
    "start": "296160",
    "end": "299040"
  },
  {
    "text": "time range that you want to receive the",
    "start": "299040",
    "end": "300720"
  },
  {
    "text": "login sites from",
    "start": "300720",
    "end": "302240"
  },
  {
    "text": "i am keeping it as 1r currently",
    "start": "302240",
    "end": "305360"
  },
  {
    "text": "click on queries option when you hover",
    "start": "305360",
    "end": "307840"
  },
  {
    "text": "over the sample queries button you can",
    "start": "307840",
    "end": "310160"
  },
  {
    "text": "see the different queries",
    "start": "310160",
    "end": "312080"
  },
  {
    "text": "for this example i am using cloudtrail",
    "start": "312080",
    "end": "314240"
  },
  {
    "text": "queries",
    "start": "314240",
    "end": "316000"
  },
  {
    "text": "select the first sub-option number of",
    "start": "316000",
    "end": "318160"
  },
  {
    "text": "log entries by service",
    "start": "318160",
    "end": "319919"
  },
  {
    "text": "event type and region as you can see",
    "start": "319919",
    "end": "323360"
  },
  {
    "text": "the query for this is statscount by",
    "start": "323360",
    "end": "325919"
  },
  {
    "text": "event source",
    "start": "325919",
    "end": "326880"
  },
  {
    "text": "event name aws region click on apply",
    "start": "326880",
    "end": "332479"
  },
  {
    "text": "stats calculates aggregate statistics",
    "start": "333039",
    "end": "335360"
  },
  {
    "text": "and supports operators such as",
    "start": "335360",
    "end": "337120"
  },
  {
    "text": "sum average count min and max",
    "start": "337120",
    "end": "340560"
  },
  {
    "text": "so here we will display the count of all",
    "start": "340560",
    "end": "342560"
  },
  {
    "text": "the api calls",
    "start": "342560",
    "end": "343759"
  },
  {
    "text": "made by the event name the source and",
    "start": "343759",
    "end": "346400"
  },
  {
    "text": "the aws region",
    "start": "346400",
    "end": "348000"
  },
  {
    "text": "as you can see based on the output you",
    "start": "348000",
    "end": "350479"
  },
  {
    "text": "can know which api call was made",
    "start": "350479",
    "end": "352400"
  },
  {
    "text": "by based on the source region and count",
    "start": "352400",
    "end": "354720"
  },
  {
    "text": "of the number of times the call was made",
    "start": "354720",
    "end": "358720"
  },
  {
    "text": "you can also create your custom query",
    "start": "359199",
    "end": "361120"
  },
  {
    "text": "based on your use case",
    "start": "361120",
    "end": "363039"
  },
  {
    "text": "when you choose the log group you get",
    "start": "363039",
    "end": "364639"
  },
  {
    "text": "the list of discovered fields on the",
    "start": "364639",
    "end": "366160"
  },
  {
    "text": "right side",
    "start": "366160",
    "end": "367120"
  },
  {
    "text": "this is useful when you are creating a",
    "start": "367120",
    "end": "369039"
  },
  {
    "text": "custom query",
    "start": "369039",
    "end": "370400"
  },
  {
    "text": "you can read more about the query syntax",
    "start": "370400",
    "end": "372400"
  },
  {
    "text": "and find sample queries in this public",
    "start": "372400",
    "end": "374240"
  },
  {
    "text": "document",
    "start": "374240",
    "end": "376638"
  },
  {
    "text": "the next method is exporting log data to",
    "start": "377440",
    "end": "379840"
  },
  {
    "text": "amazon simple storage service",
    "start": "379840",
    "end": "383120"
  },
  {
    "text": "you can use this method if a use case is",
    "start": "383120",
    "end": "385440"
  },
  {
    "text": "to perform",
    "start": "385440",
    "end": "386160"
  },
  {
    "text": "custom processing and analysis of your",
    "start": "386160",
    "end": "388319"
  },
  {
    "text": "data or if you want to load into other",
    "start": "388319",
    "end": "390800"
  },
  {
    "text": "systems",
    "start": "390800",
    "end": "392400"
  },
  {
    "text": "to begin the export process step one is",
    "start": "392400",
    "end": "395280"
  },
  {
    "text": "to create an s3 bucket",
    "start": "395280",
    "end": "396720"
  },
  {
    "text": "to store the exported log data note that",
    "start": "396720",
    "end": "400000"
  },
  {
    "text": "you can store the files in s3 and define",
    "start": "400000",
    "end": "402720"
  },
  {
    "text": "lifecycle rules so that you can either",
    "start": "402720",
    "end": "405280"
  },
  {
    "text": "archive",
    "start": "405280",
    "end": "405919"
  },
  {
    "text": "or delete exported files automatically",
    "start": "405919",
    "end": "409280"
  },
  {
    "text": "log data can take up to 12 hours to",
    "start": "409280",
    "end": "411199"
  },
  {
    "text": "become available for export from",
    "start": "411199",
    "end": "412960"
  },
  {
    "text": "cloudwatch logs",
    "start": "412960",
    "end": "414160"
  },
  {
    "text": "for real-time analysis and processing",
    "start": "414160",
    "end": "416560"
  },
  {
    "text": "use subscription filters",
    "start": "416560",
    "end": "420080"
  },
  {
    "text": "i'm using the console to export log data",
    "start": "421440",
    "end": "424319"
  },
  {
    "text": "you can also use the aws cli",
    "start": "424319",
    "end": "427120"
  },
  {
    "text": "first let's create the s3 bucket",
    "start": "427120",
    "end": "430560"
  },
  {
    "text": "open the s3 console and choose create",
    "start": "430560",
    "end": "432720"
  },
  {
    "text": "bucket",
    "start": "432720",
    "end": "434560"
  },
  {
    "text": "let's give an appropriate name we'll",
    "start": "434560",
    "end": "436880"
  },
  {
    "text": "give it a unique name",
    "start": "436880",
    "end": "438160"
  },
  {
    "text": "such as api.diary2",
    "start": "438160",
    "end": "441360"
  },
  {
    "text": "and give the region as us west2 the",
    "start": "441360",
    "end": "444400"
  },
  {
    "text": "region you choose",
    "start": "444400",
    "end": "445599"
  },
  {
    "text": "must be the region where cloudwatch log",
    "start": "445599",
    "end": "447919"
  },
  {
    "text": "data resides",
    "start": "447919",
    "end": "449360"
  },
  {
    "text": "as cloudwatch logs doesn't support",
    "start": "449360",
    "end": "451199"
  },
  {
    "text": "exporting data to s3 in a different",
    "start": "451199",
    "end": "453199"
  },
  {
    "text": "region",
    "start": "453199",
    "end": "454160"
  },
  {
    "text": "choose create",
    "start": "454160",
    "end": "456880"
  },
  {
    "text": "after creating the bucket let's create",
    "start": "457199",
    "end": "459360"
  },
  {
    "text": "an imuser and provide full access to s3",
    "start": "459360",
    "end": "462160"
  },
  {
    "text": "and cloudwatch logs",
    "start": "462160",
    "end": "464720"
  },
  {
    "text": "open the iim console",
    "start": "464720",
    "end": "468080"
  },
  {
    "text": "select users and then add user",
    "start": "470000",
    "end": "473919"
  },
  {
    "text": "i am entering the username as cw log",
    "start": "473919",
    "end": "476560"
  },
  {
    "text": "export user",
    "start": "476560",
    "end": "479280"
  },
  {
    "text": "let's give this user programmatic access",
    "start": "479280",
    "end": "481919"
  },
  {
    "text": "and aws management console access",
    "start": "481919",
    "end": "486000"
  },
  {
    "text": "i'll give a custom password and choose",
    "start": "487280",
    "end": "489599"
  },
  {
    "text": "the next button",
    "start": "489599",
    "end": "493840"
  },
  {
    "text": "here let's keep permissions to our user",
    "start": "493919",
    "end": "497039"
  },
  {
    "text": "choose attach existing policies directly",
    "start": "497039",
    "end": "499759"
  },
  {
    "text": "and attach the amazon s3 full access",
    "start": "499759",
    "end": "503680"
  },
  {
    "text": "and cloudwatch logs full access policies",
    "start": "503680",
    "end": "506240"
  },
  {
    "text": "to the user",
    "start": "506240",
    "end": "508879"
  },
  {
    "text": "i'll just click next tags",
    "start": "508879",
    "end": "512240"
  },
  {
    "text": "next review and then create user",
    "start": "512240",
    "end": "517279"
  },
  {
    "text": "step 3 is setting permissions on an",
    "start": "517599",
    "end": "519518"
  },
  {
    "text": "amazon s3 bucket",
    "start": "519519",
    "end": "521518"
  },
  {
    "text": "let's go back to the amazon s3 console",
    "start": "521519",
    "end": "524959"
  },
  {
    "text": "and choose our bucket api.diary2",
    "start": "524959",
    "end": "528720"
  },
  {
    "text": "select permissions packet policy",
    "start": "528720",
    "end": "533760"
  },
  {
    "text": "let's copy the policy from this document",
    "start": "533760",
    "end": "537920"
  },
  {
    "text": "i'll edit the resource lines and change",
    "start": "540880",
    "end": "542720"
  },
  {
    "text": "it to my bucket name api.diary2",
    "start": "542720",
    "end": "549839"
  },
  {
    "text": "step 4 is creating an export task from",
    "start": "551360",
    "end": "553680"
  },
  {
    "text": "the cloudwatch console",
    "start": "553680",
    "end": "555600"
  },
  {
    "text": "open the cloudwatch console and select",
    "start": "555600",
    "end": "557360"
  },
  {
    "text": "log groups",
    "start": "557360",
    "end": "563839"
  },
  {
    "text": "i'll export the api diary log group",
    "start": "563839",
    "end": "566160"
  },
  {
    "text": "select the log group",
    "start": "566160",
    "end": "567839"
  },
  {
    "text": "choose actions and look for the option",
    "start": "567839",
    "end": "570560"
  },
  {
    "text": "export data to amazon s3",
    "start": "570560",
    "end": "573200"
  },
  {
    "text": "let's choose that you can define the",
    "start": "573200",
    "end": "576080"
  },
  {
    "text": "time range",
    "start": "576080",
    "end": "576880"
  },
  {
    "text": "of log data that you want to export",
    "start": "576880",
    "end": "580320"
  },
  {
    "text": "if you have multiple streams in the log",
    "start": "580320",
    "end": "582160"
  },
  {
    "text": "group you can also specify the log",
    "start": "582160",
    "end": "584000"
  },
  {
    "text": "stream that you want to export by",
    "start": "584000",
    "end": "585680"
  },
  {
    "text": "choosing this advanced button",
    "start": "585680",
    "end": "588959"
  },
  {
    "text": "if you wrote a bucket policy for a",
    "start": "589120",
    "end": "590640"
  },
  {
    "text": "bucket that was in a different account",
    "start": "590640",
    "end": "592800"
  },
  {
    "text": "click another account and mention the",
    "start": "592800",
    "end": "594720"
  },
  {
    "text": "aws account number where the s3 bucket",
    "start": "594720",
    "end": "596800"
  },
  {
    "text": "is present",
    "start": "596800",
    "end": "598320"
  },
  {
    "text": "mys3 bucket is in the same account so i",
    "start": "598320",
    "end": "600399"
  },
  {
    "text": "will keep it as the default",
    "start": "600399",
    "end": "602880"
  },
  {
    "text": "select the name of the bucket from the",
    "start": "602880",
    "end": "604640"
  },
  {
    "text": "drop down",
    "start": "604640",
    "end": "606160"
  },
  {
    "text": "the bucket must be in the same region as",
    "start": "606160",
    "end": "608000"
  },
  {
    "text": "your cloud watch logs",
    "start": "608000",
    "end": "610000"
  },
  {
    "text": "select the s3 bucket prefix as a",
    "start": "610000",
    "end": "612079"
  },
  {
    "text": "randomly generated prefix",
    "start": "612079",
    "end": "613680"
  },
  {
    "text": "in the bucket policy now let's choose",
    "start": "613680",
    "end": "616640"
  },
  {
    "text": "export data",
    "start": "616640",
    "end": "619839"
  },
  {
    "text": "you can view the status of the log data",
    "start": "619839",
    "end": "621760"
  },
  {
    "text": "that you exported to s3",
    "start": "621760",
    "end": "623360"
  },
  {
    "text": "by choosing actions and then view all",
    "start": "623360",
    "end": "626560"
  },
  {
    "text": "exports to s3",
    "start": "626560",
    "end": "628160"
  },
  {
    "text": "as you can see my export is already",
    "start": "628160",
    "end": "630240"
  },
  {
    "text": "completed",
    "start": "630240",
    "end": "631519"
  },
  {
    "text": "this is available in your s3 bucket as a",
    "start": "631519",
    "end": "633519"
  },
  {
    "text": "zipped json file",
    "start": "633519",
    "end": "635120"
  },
  {
    "text": "which you can now use for your batch",
    "start": "635120",
    "end": "636720"
  },
  {
    "text": "data processing or data analysis",
    "start": "636720",
    "end": "639040"
  },
  {
    "text": "and so on",
    "start": "639040",
    "end": "647839"
  },
  {
    "text": "the next and the final method is to use",
    "start": "655760",
    "end": "658160"
  },
  {
    "text": "get log events or filter log events api",
    "start": "658160",
    "end": "660720"
  },
  {
    "text": "call",
    "start": "660720",
    "end": "662079"
  },
  {
    "text": "note that this method isn't scalable due",
    "start": "662079",
    "end": "664480"
  },
  {
    "text": "to the transactions per second limits",
    "start": "664480",
    "end": "666480"
  },
  {
    "text": "for the get log events and filter log",
    "start": "666480",
    "end": "668320"
  },
  {
    "text": "events",
    "start": "668320",
    "end": "668880"
  },
  {
    "text": "api calls if you experience throttling",
    "start": "668880",
    "end": "671600"
  },
  {
    "text": "when performing these actions",
    "start": "671600",
    "end": "673519"
  },
  {
    "text": "use subscription filters instead",
    "start": "673519",
    "end": "676720"
  },
  {
    "text": "for calling an api using the aws cli",
    "start": "676720",
    "end": "679839"
  },
  {
    "text": "it's a best practice to visit a public",
    "start": "679839",
    "end": "681839"
  },
  {
    "text": "document aws cli page",
    "start": "681839",
    "end": "684560"
  },
  {
    "text": "so i'm copying the get logs event action",
    "start": "684560",
    "end": "686640"
  },
  {
    "text": "into my browser",
    "start": "686640",
    "end": "687680"
  },
  {
    "text": "and searching for it open the aws cli",
    "start": "687680",
    "end": "690880"
  },
  {
    "text": "command reference for this api",
    "start": "690880",
    "end": "693760"
  },
  {
    "text": "in this page you will find the",
    "start": "693760",
    "end": "695279"
  },
  {
    "text": "description for the command",
    "start": "695279",
    "end": "696880"
  },
  {
    "text": "it synopsis the different option you can",
    "start": "696880",
    "end": "699120"
  },
  {
    "text": "use with the command",
    "start": "699120",
    "end": "700640"
  },
  {
    "text": "and examples of how to use it",
    "start": "700640",
    "end": "704160"
  },
  {
    "text": "so i'll use ssh to connect back into my",
    "start": "704880",
    "end": "707360"
  },
  {
    "text": "instance",
    "start": "707360",
    "end": "708399"
  },
  {
    "text": "and enter the following aws cli command",
    "start": "708399",
    "end": "711360"
  },
  {
    "text": "you can also add additional values such",
    "start": "711360",
    "end": "713519"
  },
  {
    "text": "as",
    "start": "713519",
    "end": "714079"
  },
  {
    "text": "start time and time to give you a",
    "start": "714079",
    "end": "716399"
  },
  {
    "text": "filtered value",
    "start": "716399",
    "end": "719120"
  },
  {
    "text": "however note that currently the getlog",
    "start": "719120",
    "end": "721519"
  },
  {
    "text": "event api call",
    "start": "721519",
    "end": "722959"
  },
  {
    "text": "accepts time only in the epoch format",
    "start": "722959",
    "end": "727040"
  },
  {
    "text": "you must convert your time range to the",
    "start": "727040",
    "end": "728880"
  },
  {
    "text": "epoch format",
    "start": "728880",
    "end": "731279"
  },
  {
    "text": "i've already converted my time range to",
    "start": "731279",
    "end": "733040"
  },
  {
    "text": "the epoch format and given the value for",
    "start": "733040",
    "end": "735040"
  },
  {
    "text": "the parameters",
    "start": "735040",
    "end": "736079"
  },
  {
    "text": "start time and end time",
    "start": "736079",
    "end": "739360"
  },
  {
    "text": "as you can see compared to the previous",
    "start": "739839",
    "end": "742160"
  },
  {
    "text": "example",
    "start": "742160",
    "end": "743440"
  },
  {
    "text": "i get only the logs for the time range",
    "start": "743440",
    "end": "745760"
  },
  {
    "text": "entered",
    "start": "745760",
    "end": "748240"
  },
  {
    "text": "similarly you can use the filter log",
    "start": "748639",
    "end": "750480"
  },
  {
    "text": "events api call",
    "start": "750480",
    "end": "752160"
  },
  {
    "text": "as you can see from this aws cli",
    "start": "752160",
    "end": "754320"
  },
  {
    "text": "document",
    "start": "754320",
    "end": "755360"
  },
  {
    "text": "filter logs even offers some parameters",
    "start": "755360",
    "end": "758240"
  },
  {
    "text": "as get log events",
    "start": "758240",
    "end": "759519"
  },
  {
    "text": "but also a few additional parameters you",
    "start": "759519",
    "end": "762320"
  },
  {
    "text": "can get",
    "start": "762320",
    "end": "763360"
  },
  {
    "text": "log events for multiple log streams",
    "start": "763360",
    "end": "765200"
  },
  {
    "text": "using this api call",
    "start": "765200",
    "end": "767760"
  },
  {
    "text": "thanks for watching and happy cloud",
    "start": "767760",
    "end": "769519"
  },
  {
    "text": "computing from all of us here at aws",
    "start": "769519",
    "end": "773510"
  },
  {
    "text": "[Music]",
    "start": "773510",
    "end": "779059"
  }
]