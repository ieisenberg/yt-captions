[
  {
    "start": "0",
    "end": "24000"
  },
  {
    "text": "[Music]",
    "start": "50",
    "end": "1010"
  },
  {
    "text": "[Applause]",
    "start": "1010",
    "end": "4088"
  },
  {
    "text": "[Music]",
    "start": "4960",
    "end": "11689"
  },
  {
    "text": "hello i'm raghav an associate solutions",
    "start": "12080",
    "end": "14880"
  },
  {
    "text": "architect here at the aws offices in",
    "start": "14880",
    "end": "17039"
  },
  {
    "text": "texas today i'm going to show you how to",
    "start": "17039",
    "end": "19680"
  },
  {
    "text": "troubleshoot and fix failing health",
    "start": "19680",
    "end": "21520"
  },
  {
    "text": "checks for application load balancers",
    "start": "21520",
    "end": "23680"
  },
  {
    "text": "let's get started",
    "start": "23680",
    "end": "25840"
  },
  {
    "start": "24000",
    "end": "55000"
  },
  {
    "text": "the load balancer sends a health check",
    "start": "25840",
    "end": "27760"
  },
  {
    "text": "request to each registered target using",
    "start": "27760",
    "end": "30240"
  },
  {
    "text": "the specified port protocol and ping",
    "start": "30240",
    "end": "32960"
  },
  {
    "text": "path",
    "start": "32960",
    "end": "34800"
  },
  {
    "text": "if the health checks exceed unhealthy",
    "start": "34800",
    "end": "36719"
  },
  {
    "text": "threshold count consecutive failures the",
    "start": "36719",
    "end": "39200"
  },
  {
    "text": "load balancer takes the target out of",
    "start": "39200",
    "end": "41360"
  },
  {
    "text": "service",
    "start": "41360",
    "end": "42480"
  },
  {
    "text": "when the health checks exceed healthy",
    "start": "42480",
    "end": "44399"
  },
  {
    "text": "threshold count consecutive successes",
    "start": "44399",
    "end": "46719"
  },
  {
    "text": "then the load balancer puts the target",
    "start": "46719",
    "end": "49039"
  },
  {
    "text": "back in service",
    "start": "49039",
    "end": "51600"
  },
  {
    "text": "let's see how to check the health of",
    "start": "51600",
    "end": "53280"
  },
  {
    "text": "your targets on the aws management",
    "start": "53280",
    "end": "55280"
  },
  {
    "start": "55000",
    "end": "92000"
  },
  {
    "text": "console",
    "start": "55280",
    "end": "56480"
  },
  {
    "text": "log into the aws management console then",
    "start": "56480",
    "end": "59440"
  },
  {
    "text": "navigate to the amazon elastic compute",
    "start": "59440",
    "end": "61920"
  },
  {
    "text": "cloud console",
    "start": "61920",
    "end": "64239"
  },
  {
    "text": "next on the navigation pane under load",
    "start": "64239",
    "end": "66720"
  },
  {
    "text": "balancing choose target groups",
    "start": "66720",
    "end": "69439"
  },
  {
    "text": "choose the name of the target group to",
    "start": "69439",
    "end": "71360"
  },
  {
    "text": "open its details page",
    "start": "71360",
    "end": "73760"
  },
  {
    "text": "on the targets tab the health status",
    "start": "73760",
    "end": "76000"
  },
  {
    "text": "column indicates the status of each",
    "start": "76000",
    "end": "78159"
  },
  {
    "text": "target if the status is any value other",
    "start": "78159",
    "end": "80799"
  },
  {
    "text": "than healthy then the status details",
    "start": "80799",
    "end": "83040"
  },
  {
    "text": "column contains more information on the",
    "start": "83040",
    "end": "85520"
  },
  {
    "text": "reasons for health check failures",
    "start": "85520",
    "end": "87680"
  },
  {
    "text": "let us now see how to fix some of the",
    "start": "87680",
    "end": "89600"
  },
  {
    "text": "common health check failures",
    "start": "89600",
    "end": "92640"
  },
  {
    "start": "92000",
    "end": "169000"
  },
  {
    "text": "target response code mismatch",
    "start": "92640",
    "end": "95439"
  },
  {
    "text": "this indicates that the application load",
    "start": "95439",
    "end": "97439"
  },
  {
    "text": "balancer sent its health check http get",
    "start": "97439",
    "end": "100400"
  },
  {
    "text": "request to the target on the health",
    "start": "100400",
    "end": "102240"
  },
  {
    "text": "check port and path and received a",
    "start": "102240",
    "end": "104479"
  },
  {
    "text": "response outside the configured healthy",
    "start": "104479",
    "end": "106880"
  },
  {
    "text": "response range",
    "start": "106880",
    "end": "109119"
  },
  {
    "text": "in this case check your load balancer's",
    "start": "109119",
    "end": "111280"
  },
  {
    "text": "health check configuration to verify the",
    "start": "111280",
    "end": "113520"
  },
  {
    "text": "configured success code",
    "start": "113520",
    "end": "115439"
  },
  {
    "text": "then check whether the expected success",
    "start": "115439",
    "end": "117759"
  },
  {
    "text": "codes are being returned by your web",
    "start": "117759",
    "end": "119600"
  },
  {
    "text": "server and modify the success code value",
    "start": "119600",
    "end": "122240"
  },
  {
    "text": "if necessary",
    "start": "122240",
    "end": "124399"
  },
  {
    "text": "here you can see that the health check",
    "start": "124399",
    "end": "126079"
  },
  {
    "text": "protocol is http the health check port",
    "start": "126079",
    "end": "128879"
  },
  {
    "text": "is 80 and the health check pink path is",
    "start": "128879",
    "end": "131120"
  },
  {
    "text": "forward slash health",
    "start": "131120",
    "end": "133040"
  },
  {
    "text": "i've set the success code to 200 so that",
    "start": "133040",
    "end": "135440"
  },
  {
    "text": "my application responds with the http",
    "start": "135440",
    "end": "137680"
  },
  {
    "text": "200 to be considered healthy",
    "start": "137680",
    "end": "140800"
  },
  {
    "text": "let's now connect to my target's ip on",
    "start": "140800",
    "end": "143040"
  },
  {
    "text": "the configured ping path and check its",
    "start": "143040",
    "end": "145120"
  },
  {
    "text": "response code",
    "start": "145120",
    "end": "146879"
  },
  {
    "text": "as we can see my application is",
    "start": "146879",
    "end": "148640"
  },
  {
    "text": "responding with the http 404 and this is",
    "start": "148640",
    "end": "151760"
  },
  {
    "text": "the cause of the failing health checks",
    "start": "151760",
    "end": "154560"
  },
  {
    "text": "let's now change the health check ping",
    "start": "154560",
    "end": "156319"
  },
  {
    "text": "path to a path configured on my",
    "start": "156319",
    "end": "158319"
  },
  {
    "text": "application such as a root path so that",
    "start": "158319",
    "end": "161120"
  },
  {
    "text": "it returns the configured success code",
    "start": "161120",
    "end": "164560"
  },
  {
    "text": "when i do this i see that my target",
    "start": "164560",
    "end": "166560"
  },
  {
    "text": "became healthy",
    "start": "166560",
    "end": "169280"
  },
  {
    "start": "169000",
    "end": "323000"
  },
  {
    "text": "now let's see how to fix target timeout",
    "start": "169280",
    "end": "172000"
  },
  {
    "text": "request timed out errors",
    "start": "172000",
    "end": "174800"
  },
  {
    "text": "when you see this reason code it means",
    "start": "174800",
    "end": "176879"
  },
  {
    "text": "that the application load balancer sent",
    "start": "176879",
    "end": "178879"
  },
  {
    "text": "its",
    "start": "178879",
    "end": "179519"
  },
  {
    "text": "http get request to the target and",
    "start": "179519",
    "end": "181920"
  },
  {
    "text": "didn't receive a response before the",
    "start": "181920",
    "end": "183599"
  },
  {
    "text": "health check timeout elapsed",
    "start": "183599",
    "end": "186400"
  },
  {
    "text": "the load balancer sends a health check",
    "start": "186400",
    "end": "188159"
  },
  {
    "text": "request to the target as specified in",
    "start": "188159",
    "end": "190319"
  },
  {
    "text": "health check interval seconds and",
    "start": "190319",
    "end": "192000"
  },
  {
    "text": "expects a response within the health",
    "start": "192000",
    "end": "193840"
  },
  {
    "text": "check timeout period known as health",
    "start": "193840",
    "end": "195680"
  },
  {
    "text": "check timeout seconds",
    "start": "195680",
    "end": "197599"
  },
  {
    "text": "if the load balancer does not receive a",
    "start": "197599",
    "end": "199440"
  },
  {
    "text": "response within this health check",
    "start": "199440",
    "end": "200879"
  },
  {
    "text": "timeout period consecutively for the",
    "start": "200879",
    "end": "202959"
  },
  {
    "text": "unhealthy threshold count then the",
    "start": "202959",
    "end": "204959"
  },
  {
    "text": "target is marked as unhealthy",
    "start": "204959",
    "end": "208080"
  },
  {
    "text": "there are two main causes for this",
    "start": "208080",
    "end": "209680"
  },
  {
    "text": "failure",
    "start": "209680",
    "end": "210879"
  },
  {
    "text": "there there's a connectivity issue",
    "start": "210879",
    "end": "212080"
  },
  {
    "text": "between the load balancer and the target",
    "start": "212080",
    "end": "214480"
  },
  {
    "text": "the application isn't responding before",
    "start": "214480",
    "end": "216480"
  },
  {
    "text": "the health check timeout period",
    "start": "216480",
    "end": "219280"
  },
  {
    "text": "to check the connectivity between the",
    "start": "219280",
    "end": "220959"
  },
  {
    "text": "two make sure that the target and the",
    "start": "220959",
    "end": "222879"
  },
  {
    "text": "load balancer allow traffic to and from",
    "start": "222879",
    "end": "225120"
  },
  {
    "text": "each other on the health check port and",
    "start": "225120",
    "end": "227200"
  },
  {
    "text": "with the health check protocol",
    "start": "227200",
    "end": "230000"
  },
  {
    "text": "let's take a look at this on the console",
    "start": "230000",
    "end": "232640"
  },
  {
    "text": "in my case as you can see the configured",
    "start": "232640",
    "end": "234879"
  },
  {
    "text": "health check port is 80 and the protocol",
    "start": "234879",
    "end": "237200"
  },
  {
    "text": "is http",
    "start": "237200",
    "end": "238720"
  },
  {
    "text": "let's see the security group rules that",
    "start": "238720",
    "end": "240720"
  },
  {
    "text": "follow the best practices for this",
    "start": "240720",
    "end": "242400"
  },
  {
    "text": "configuration",
    "start": "242400",
    "end": "244640"
  },
  {
    "text": "to the left is the load balancer",
    "start": "244640",
    "end": "246080"
  },
  {
    "text": "security group and to the right is the",
    "start": "246080",
    "end": "248080"
  },
  {
    "text": "target security group",
    "start": "248080",
    "end": "250000"
  },
  {
    "text": "in the load balancer security group i'll",
    "start": "250000",
    "end": "252000"
  },
  {
    "text": "add an outbound rule to allow traffic to",
    "start": "252000",
    "end": "254640"
  },
  {
    "text": "the instance on the health check port",
    "start": "254640",
    "end": "257199"
  },
  {
    "text": "to do this let's copy the target",
    "start": "257199",
    "end": "258959"
  },
  {
    "text": "security group id and add it here as the",
    "start": "258959",
    "end": "261280"
  },
  {
    "text": "destination the port is 80.",
    "start": "261280",
    "end": "264400"
  },
  {
    "text": "let's save the changes",
    "start": "264400",
    "end": "266960"
  },
  {
    "text": "next in the target security group i'll",
    "start": "266960",
    "end": "269280"
  },
  {
    "text": "add an inbound rule to allow traffic",
    "start": "269280",
    "end": "271360"
  },
  {
    "text": "from the load balancer on the health",
    "start": "271360",
    "end": "273040"
  },
  {
    "text": "check port",
    "start": "273040",
    "end": "274400"
  },
  {
    "text": "let's copy the load balancer security",
    "start": "274400",
    "end": "276320"
  },
  {
    "text": "group id and add it here as the source",
    "start": "276320",
    "end": "278960"
  },
  {
    "text": "the port is 80.",
    "start": "278960",
    "end": "280560"
  },
  {
    "text": "let's save these changes",
    "start": "280560",
    "end": "283120"
  },
  {
    "text": "now the security group rules look good",
    "start": "283120",
    "end": "286880"
  },
  {
    "text": "verify that the network acl associated",
    "start": "286880",
    "end": "289360"
  },
  {
    "text": "with the subnets for your load balancer",
    "start": "289360",
    "end": "291280"
  },
  {
    "text": "nodes allows inbound traffic on the",
    "start": "291280",
    "end": "293199"
  },
  {
    "text": "ephemeral ports",
    "start": "293199",
    "end": "294639"
  },
  {
    "text": "verify that it also allows outbound",
    "start": "294639",
    "end": "297120"
  },
  {
    "text": "traffic on the health check port and",
    "start": "297120",
    "end": "299040"
  },
  {
    "text": "ephemeral port",
    "start": "299040",
    "end": "301680"
  },
  {
    "text": "also confirm that any os level firewalls",
    "start": "301680",
    "end": "304639"
  },
  {
    "text": "on the target allow health check traffic",
    "start": "304639",
    "end": "306800"
  },
  {
    "text": "in and out",
    "start": "306800",
    "end": "308320"
  },
  {
    "text": "if you see no issue with connectivity",
    "start": "308320",
    "end": "310400"
  },
  {
    "text": "then check your application locks to",
    "start": "310400",
    "end": "312240"
  },
  {
    "text": "determine how long the server takes to",
    "start": "312240",
    "end": "314320"
  },
  {
    "text": "respond",
    "start": "314320",
    "end": "315600"
  },
  {
    "text": "if your health check requests take",
    "start": "315600",
    "end": "317199"
  },
  {
    "text": "longer than the configure timeout adjust",
    "start": "317199",
    "end": "319680"
  },
  {
    "text": "the health check settings accordingly",
    "start": "319680",
    "end": "322800"
  },
  {
    "text": "the next recent code i'll discuss is",
    "start": "322800",
    "end": "324639"
  },
  {
    "start": "323000",
    "end": "378000"
  },
  {
    "text": "target failed health checks",
    "start": "324639",
    "end": "327280"
  },
  {
    "text": "this code indicates that the load",
    "start": "327280",
    "end": "328800"
  },
  {
    "text": "balancer received an error while",
    "start": "328800",
    "end": "330560"
  },
  {
    "text": "establishing a connection to the target",
    "start": "330560",
    "end": "332720"
  },
  {
    "text": "or that the target response was",
    "start": "332720",
    "end": "334720"
  },
  {
    "text": "malformed",
    "start": "334720",
    "end": "336720"
  },
  {
    "text": "to resolve the issue verify that your",
    "start": "336720",
    "end": "338880"
  },
  {
    "text": "application is up and running verify",
    "start": "338880",
    "end": "341680"
  },
  {
    "text": "that the target is listening for traffic",
    "start": "341680",
    "end": "343680"
  },
  {
    "text": "on the health check port",
    "start": "343680",
    "end": "345360"
  },
  {
    "text": "if your targets have multiple interfaces",
    "start": "345360",
    "end": "347440"
  },
  {
    "text": "attached then verify that your",
    "start": "347440",
    "end": "349199"
  },
  {
    "text": "application is listening on the correct",
    "start": "349199",
    "end": "350960"
  },
  {
    "text": "network interface",
    "start": "350960",
    "end": "353280"
  },
  {
    "text": "application load balancer uses the elb",
    "start": "353280",
    "end": "355680"
  },
  {
    "text": "security policy 201608",
    "start": "355680",
    "end": "358800"
  },
  {
    "text": "security policy for the https health",
    "start": "358800",
    "end": "361759"
  },
  {
    "text": "checks",
    "start": "361759",
    "end": "362880"
  },
  {
    "text": "make sure that the target supports one",
    "start": "362880",
    "end": "364880"
  },
  {
    "text": "or more matching ciphers and a protocol",
    "start": "364880",
    "end": "367440"
  },
  {
    "text": "provided by the load balancer in this",
    "start": "367440",
    "end": "369440"
  },
  {
    "text": "security policy to establish the tls",
    "start": "369440",
    "end": "371840"
  },
  {
    "text": "handshake",
    "start": "371840",
    "end": "374000"
  },
  {
    "text": "let me walk you through a few more",
    "start": "374000",
    "end": "375520"
  },
  {
    "text": "health check reason codes that you might",
    "start": "375520",
    "end": "377280"
  },
  {
    "text": "come across",
    "start": "377280",
    "end": "378880"
  },
  {
    "start": "378000",
    "end": "440000"
  },
  {
    "text": "elb initial health check",
    "start": "378880",
    "end": "381039"
  },
  {
    "text": "this indicates that the initial health",
    "start": "381039",
    "end": "382960"
  },
  {
    "text": "checks are in progress",
    "start": "382960",
    "end": "385120"
  },
  {
    "text": "elb registration in progress",
    "start": "385120",
    "end": "387919"
  },
  {
    "text": "this indicates that the target",
    "start": "387919",
    "end": "389360"
  },
  {
    "text": "registration is in progress",
    "start": "389360",
    "end": "392000"
  },
  {
    "text": "target deregistration in progress",
    "start": "392000",
    "end": "394720"
  },
  {
    "text": "this means that the target",
    "start": "394720",
    "end": "395919"
  },
  {
    "text": "deregistration is in progress",
    "start": "395919",
    "end": "398560"
  },
  {
    "text": "target invalid state",
    "start": "398560",
    "end": "400560"
  },
  {
    "text": "this indicates that the target is in",
    "start": "400560",
    "end": "402400"
  },
  {
    "text": "stopped state or terminated state",
    "start": "402400",
    "end": "405600"
  },
  {
    "text": "target ip unusable this means that the",
    "start": "405600",
    "end": "408960"
  },
  {
    "text": "target type is ip and that you are",
    "start": "408960",
    "end": "411039"
  },
  {
    "text": "choosing an ip address that is already",
    "start": "411039",
    "end": "413199"
  },
  {
    "text": "in use by a load balancer",
    "start": "413199",
    "end": "416240"
  },
  {
    "text": "target not a news",
    "start": "416240",
    "end": "418000"
  },
  {
    "text": "this indicates that the target group",
    "start": "418000",
    "end": "419759"
  },
  {
    "text": "isn't used by any load balancer or the",
    "start": "419759",
    "end": "422160"
  },
  {
    "text": "target is in an availability zone that",
    "start": "422160",
    "end": "424639"
  },
  {
    "text": "isn't enabled for its load balancer",
    "start": "424639",
    "end": "427759"
  },
  {
    "text": "target not registered",
    "start": "427759",
    "end": "429680"
  },
  {
    "text": "this means that the target isn't",
    "start": "429680",
    "end": "431199"
  },
  {
    "text": "registered to the target group",
    "start": "431199",
    "end": "434080"
  },
  {
    "text": "so now you know how to troubleshoot and",
    "start": "434080",
    "end": "436240"
  },
  {
    "text": "fix failing health checks for",
    "start": "436240",
    "end": "437759"
  },
  {
    "text": "application load balancers",
    "start": "437759",
    "end": "440479"
  },
  {
    "start": "440000",
    "end": "455000"
  },
  {
    "text": "thanks for watching and happy cloud",
    "start": "440479",
    "end": "442160"
  },
  {
    "text": "computing from all of us here at aws",
    "start": "442160",
    "end": "446030"
  },
  {
    "text": "[Applause]",
    "start": "446030",
    "end": "447840"
  },
  {
    "text": "[Music]",
    "start": "447840",
    "end": "450960"
  },
  {
    "text": "you",
    "start": "454160",
    "end": "456240"
  }
]