[
  {
    "start": "0",
    "end": "20000"
  },
  {
    "text": "[Music]",
    "start": "120",
    "end": "1100"
  },
  {
    "text": "[Applause]",
    "start": "1100",
    "end": "3060"
  },
  {
    "text": "[Music]",
    "start": "3060",
    "end": "7839"
  },
  {
    "text": "hello I'm Dan a senior technical account",
    "start": "7839",
    "end": "10160"
  },
  {
    "text": "manager here at the AWS office in Denver",
    "start": "10160",
    "end": "12639"
  },
  {
    "text": "today I'm going to show you how you can",
    "start": "12639",
    "end": "14080"
  },
  {
    "text": "upload a large file in multiple parts to",
    "start": "14080",
    "end": "16240"
  },
  {
    "text": "Amazon simple storage service let's get",
    "start": "16240",
    "end": "19199"
  },
  {
    "text": "started you can use the AWS CLI with",
    "start": "19199",
    "end": "22080"
  },
  {
    "start": "20000",
    "end": "148000"
  },
  {
    "text": "either highlevel AWS S3 commands or",
    "start": "22080",
    "end": "25000"
  },
  {
    "text": "low-level AWS S3 API commands to upload",
    "start": "25000",
    "end": "28320"
  },
  {
    "text": "large files to S3 it's a best practice",
    "start": "28320",
    "end": "31279"
  },
  {
    "text": "to use AWS S3 commands such as AWS S3 CP",
    "start": "31279",
    "end": "35800"
  },
  {
    "text": "for multi-part uploads and downloads",
    "start": "35800",
    "end": "38360"
  },
  {
    "text": "this is because AWS S3 commands",
    "start": "38360",
    "end": "40840"
  },
  {
    "text": "automatically perform multiart upload",
    "start": "40840",
    "end": "43000"
  },
  {
    "text": "and download Based on the file size by",
    "start": "43000",
    "end": "45640"
  },
  {
    "text": "default AWS S3 commands use multiart for",
    "start": "45640",
    "end": "48920"
  },
  {
    "text": "uploads and downloads for files larger",
    "start": "48920",
    "end": "50960"
  },
  {
    "text": "than 8 mte and automatically split files",
    "start": "50960",
    "end": "53399"
  },
  {
    "text": "into 8 mte chunks both the multi-art",
    "start": "53399",
    "end": "56680"
  },
  {
    "text": "size threshold and chunk size are",
    "start": "56680",
    "end": "58800"
  },
  {
    "text": "configurable",
    "start": "58800",
    "end": "60559"
  },
  {
    "text": "use AWS S3 API commands such as AWS S3",
    "start": "60559",
    "end": "64680"
  },
  {
    "text": "API create multi-art upload only when",
    "start": "64680",
    "end": "67400"
  },
  {
    "text": "AWS S3 commands don't support a specific",
    "start": "67400",
    "end": "70080"
  },
  {
    "text": "upload for example the multiart upload",
    "start": "70080",
    "end": "73360"
  },
  {
    "text": "involves multiple servers you manually",
    "start": "73360",
    "end": "75960"
  },
  {
    "text": "stop a multi-part upload and resume it",
    "start": "75960",
    "end": "77799"
  },
  {
    "text": "later or the AWS S3 command doesn't",
    "start": "77799",
    "end": "80960"
  },
  {
    "text": "support a required request",
    "start": "80960",
    "end": "84479"
  },
  {
    "text": "parameter first we are going to cover",
    "start": "84479",
    "end": "86759"
  },
  {
    "text": "using the AWS S3 CP command to copy a",
    "start": "86759",
    "end": "90400"
  },
  {
    "text": "large file to",
    "start": "90400",
    "end": "91560"
  },
  {
    "text": "S3 in this demo we'll use cloud shell in",
    "start": "91560",
    "end": "94479"
  },
  {
    "text": "the console to execute these commands",
    "start": "94479",
    "end": "97040"
  },
  {
    "text": "this example uses the command AWS S3 CP",
    "start": "97040",
    "end": "100960"
  },
  {
    "text": "to automatically perform a multi-part",
    "start": "100960",
    "end": "102880"
  },
  {
    "text": "upload when the object is large in this",
    "start": "102880",
    "end": "105399"
  },
  {
    "text": "case greater than 8 megabytes you can",
    "start": "105399",
    "end": "108079"
  },
  {
    "text": "also use other AWS S3 commands that",
    "start": "108079",
    "end": "110680"
  },
  {
    "text": "involve uploading objects into an S3",
    "start": "110680",
    "end": "112439"
  },
  {
    "text": "bucket for example AWS S3 sync or AWS S3",
    "start": "112439",
    "end": "118399"
  },
  {
    "text": "MV objects that you upload as multiple",
    "start": "118399",
    "end": "121159"
  },
  {
    "text": "parts to Amazon S3 have a different eag",
    "start": "121159",
    "end": "123600"
  },
  {
    "text": "format than objects that you use the",
    "start": "123600",
    "end": "125840"
  },
  {
    "text": "traditional put request to upload to",
    "start": "125840",
    "end": "128360"
  },
  {
    "text": "store the md5 check sum value of the",
    "start": "128360",
    "end": "130679"
  },
  {
    "text": "source file as a reference upload the",
    "start": "130679",
    "end": "133080"
  },
  {
    "text": "file with the check sum value as custom",
    "start": "133080",
    "end": "135200"
  },
  {
    "text": "metadata to add the md5 check sum value",
    "start": "135200",
    "end": "138319"
  },
  {
    "text": "as custom metadata include the optional",
    "start": "138319",
    "end": "140720"
  },
  {
    "text": "parameter metadata md5 and include the",
    "start": "140720",
    "end": "144360"
  },
  {
    "text": "files check sum in the upload",
    "start": "144360",
    "end": "146879"
  },
  {
    "text": "command in this example we'll generate a",
    "start": "146879",
    "end": "149400"
  },
  {
    "start": "148000",
    "end": "346000"
  },
  {
    "text": "check sum with open SSL and save it to",
    "start": "149400",
    "end": "152360"
  },
  {
    "text": "the variable md5 for later use please",
    "start": "152360",
    "end": "155360"
  },
  {
    "text": "note that the commands needed to",
    "start": "155360",
    "end": "156599"
  },
  {
    "text": "generate an md5 check sum may vary based",
    "start": "156599",
    "end": "159360"
  },
  {
    "text": "on your operating system and environment",
    "start": "159360",
    "end": "161760"
  },
  {
    "text": "next let's verify that the md5 check sum",
    "start": "161760",
    "end": "164360"
  },
  {
    "text": "was created we can now upload the file",
    "start": "164360",
    "end": "167440"
  },
  {
    "text": "and specify the md5 check sum that we",
    "start": "167440",
    "end": "169519"
  },
  {
    "text": "created in the last few",
    "start": "169519",
    "end": "171200"
  },
  {
    "text": "steps let's verify that the md5 check",
    "start": "171200",
    "end": "174200"
  },
  {
    "text": "sum was set for the file that was just",
    "start": "174200",
    "end": "175879"
  },
  {
    "text": "uploaded using a multi-part upload you",
    "start": "175879",
    "end": "178640"
  },
  {
    "text": "can use the AWS S3 API head object",
    "start": "178640",
    "end": "181920"
  },
  {
    "text": "command to retrieve metadata about an S3",
    "start": "181920",
    "end": "185080"
  },
  {
    "text": "object now that we have covered the high",
    "start": "185080",
    "end": "187400"
  },
  {
    "text": "Lev AWS S3 commands let's cover the",
    "start": "187400",
    "end": "189959"
  },
  {
    "text": "lowlevel AWS S3 API commands first you",
    "start": "189959",
    "end": "194360"
  },
  {
    "text": "want to split your file into multiple",
    "start": "194360",
    "end": "196080"
  },
  {
    "text": "parts for the upload if you're using a",
    "start": "196080",
    "end": "198080"
  },
  {
    "text": "Linux based operating system you can use",
    "start": "198080",
    "end": "200120"
  },
  {
    "text": "the split command in this case we'll",
    "start": "200120",
    "end": "202120"
  },
  {
    "text": "split our file into 8 megabyte chunks",
    "start": "202120",
    "end": "205120"
  },
  {
    "text": "with the low-level S3 API commands you",
    "start": "205120",
    "end": "207920"
  },
  {
    "text": "first create a multi-part upload and and",
    "start": "207920",
    "end": "209840"
  },
  {
    "text": "then upload each chunk of the file",
    "start": "209840",
    "end": "212200"
  },
  {
    "text": "you'll use the provided upload ID that",
    "start": "212200",
    "end": "214040"
  },
  {
    "text": "is generated as part of the output from",
    "start": "214040",
    "end": "215760"
  },
  {
    "text": "the create multipart upload command when",
    "start": "215760",
    "end": "218040"
  },
  {
    "text": "you upload each Chunk in this example we",
    "start": "218040",
    "end": "220840"
  },
  {
    "text": "are saving the upload ID to a variable",
    "start": "220840",
    "end": "223000"
  },
  {
    "text": "for use in later",
    "start": "223000",
    "end": "224519"
  },
  {
    "text": "commands let's verify that the upload ID",
    "start": "224519",
    "end": "227319"
  },
  {
    "text": "was generated in the last",
    "start": "227319",
    "end": "229200"
  },
  {
    "text": "step before you upload the first portion",
    "start": "229200",
    "end": "231720"
  },
  {
    "text": "of the split file you can optionally",
    "start": "231720",
    "end": "233879"
  },
  {
    "text": "calculate its md5 check sum if you don't",
    "start": "233879",
    "end": "237040"
  },
  {
    "text": "specify the md5 check sum the AWS C will",
    "start": "237040",
    "end": "240040"
  },
  {
    "text": "generate one for you prior to uploading",
    "start": "240040",
    "end": "242319"
  },
  {
    "text": "the file to S3 you can use the same",
    "start": "242319",
    "end": "245120"
  },
  {
    "text": "process that we used earlier in this",
    "start": "245120",
    "end": "246640"
  },
  {
    "text": "demo to calculate the check sum but this",
    "start": "246640",
    "end": "248879"
  },
  {
    "text": "time you'll need to base 64 en code the",
    "start": "248879",
    "end": "251239"
  },
  {
    "text": "output once again we are saving the",
    "start": "251239",
    "end": "253640"
  },
  {
    "text": "output from the command to a variable",
    "start": "253640",
    "end": "255360"
  },
  {
    "text": "for use in the later step verify that",
    "start": "255360",
    "end": "258400"
  },
  {
    "text": "the md5 check sum was generated in base",
    "start": "258400",
    "end": "260759"
  },
  {
    "text": "64 encoded for the first portion of the",
    "start": "260759",
    "end": "263040"
  },
  {
    "text": "multipart upload now you can upload the",
    "start": "263040",
    "end": "266320"
  },
  {
    "text": "first part of your multi-part upload",
    "start": "266320",
    "end": "268840"
  },
  {
    "text": "using the information you gathered from",
    "start": "268840",
    "end": "270360"
  },
  {
    "text": "the earlier steps run the following",
    "start": "270360",
    "end": "272160"
  },
  {
    "text": "command to upload the first part be sure",
    "start": "272160",
    "end": "274400"
  },
  {
    "text": "to record the provided e tag after each",
    "start": "274400",
    "end": "276800"
  },
  {
    "text": "part is uploaded for a later step in",
    "start": "276800",
    "end": "279240"
  },
  {
    "text": "this example we are using a to extract",
    "start": "279240",
    "end": "281639"
  },
  {
    "text": "the E tag from the command output repeat",
    "start": "281639",
    "end": "284600"
  },
  {
    "text": "the upload part command for each portion",
    "start": "284600",
    "end": "286520"
  },
  {
    "text": "of the file in this scenario we have",
    "start": "286520",
    "end": "288840"
  },
  {
    "text": "four total chunks so we'll perform the",
    "start": "288840",
    "end": "290639"
  },
  {
    "text": "md5 check sum calculation and upload",
    "start": "290639",
    "end": "293240"
  },
  {
    "text": "three more times to verify that all of",
    "start": "293240",
    "end": "295919"
  },
  {
    "text": "the parts of the file were uploaded you",
    "start": "295919",
    "end": "297759"
  },
  {
    "text": "can use the list Parts command this will",
    "start": "297759",
    "end": "300039"
  },
  {
    "text": "show you the size and E tag of the parts",
    "start": "300039",
    "end": "302400"
  },
  {
    "text": "that were uploaded to S3 for this",
    "start": "302400",
    "end": "304280"
  },
  {
    "text": "multi-part upload using the E tags",
    "start": "304280",
    "end": "306919"
  },
  {
    "text": "recorded from each uploaded part or from",
    "start": "306919",
    "end": "309400"
  },
  {
    "text": "the list Parts command create a file",
    "start": "309400",
    "end": "311600"
  },
  {
    "text": "called file parts.",
    "start": "311600",
    "end": "314360"
  },
  {
    "text": "Json in this file you input the E tags",
    "start": "314360",
    "end": "318080"
  },
  {
    "text": "and the associated part number that you",
    "start": "318080",
    "end": "319759"
  },
  {
    "text": "used for each part upload we'll use cat",
    "start": "319759",
    "end": "322919"
  },
  {
    "text": "to show the contents of a file that we",
    "start": "322919",
    "end": "325240"
  },
  {
    "text": "have already",
    "start": "325240",
    "end": "327280"
  },
  {
    "text": "created to finalize the multipart upload",
    "start": "327280",
    "end": "330440"
  },
  {
    "text": "you can use the complete multiart upload",
    "start": "330440",
    "end": "332919"
  },
  {
    "text": "command this command will use the",
    "start": "332919",
    "end": "334880"
  },
  {
    "text": "multiart upload file that you created in",
    "start": "334880",
    "end": "336880"
  },
  {
    "text": "the previous step to confirm which parts",
    "start": "336880",
    "end": "339600"
  },
  {
    "text": "of the upload should be included in the",
    "start": "339600",
    "end": "341560"
  },
  {
    "text": "finalized object now that the multi-part",
    "start": "341560",
    "end": "344520"
  },
  {
    "text": "upload has completed you can use the",
    "start": "344520",
    "end": "346680"
  },
  {
    "start": "346000",
    "end": "441000"
  },
  {
    "text": "list objects command to see the",
    "start": "346680",
    "end": "348520"
  },
  {
    "text": "finalized object in the bucket if you",
    "start": "348520",
    "end": "351039"
  },
  {
    "text": "use the highlevel AWS S3 commands for a",
    "start": "351039",
    "end": "353960"
  },
  {
    "text": "multi-art upload and the upload fails",
    "start": "353960",
    "end": "356400"
  },
  {
    "text": "then you must start a new multi-part",
    "start": "356400",
    "end": "358240"
  },
  {
    "text": "upload multi part upload failures occur",
    "start": "358240",
    "end": "361400"
  },
  {
    "text": "due to either a timeout or manual",
    "start": "361400",
    "end": "363720"
  },
  {
    "text": "cancellation in most cases the AWS CLI",
    "start": "363720",
    "end": "366960"
  },
  {
    "text": "automatically cancels the multi-part",
    "start": "366960",
    "end": "368639"
  },
  {
    "text": "upload and removes any multipart files",
    "start": "368639",
    "end": "371319"
  },
  {
    "text": "that you created this process can take",
    "start": "371319",
    "end": "373960"
  },
  {
    "text": "several minutes if you use the AWS S3",
    "start": "373960",
    "end": "377319"
  },
  {
    "text": "API commands and the process is",
    "start": "377319",
    "end": "379160"
  },
  {
    "text": "interrupted then remove incomplete parts",
    "start": "379160",
    "end": "381639"
  },
  {
    "text": "of the upload and then re-upload the",
    "start": "381639",
    "end": "384039"
  },
  {
    "text": "parts to remove the incomplete Parts use",
    "start": "384039",
    "end": "387160"
  },
  {
    "text": "the abort incomplete multi-part upload",
    "start": "387160",
    "end": "389639"
  },
  {
    "text": "Lo life cycle action or use AWS S3 API",
    "start": "389639",
    "end": "393319"
  },
  {
    "text": "commands to remove the incomplete Parts",
    "start": "393319",
    "end": "396440"
  },
  {
    "text": "run the list multipart uploads command",
    "start": "396440",
    "end": "398919"
  },
  {
    "text": "to list incomplete multi-art file",
    "start": "398919",
    "end": "401280"
  },
  {
    "text": "uploads replace the value for bucket",
    "start": "401280",
    "end": "403639"
  },
  {
    "text": "with the name of your bucket the command",
    "start": "403639",
    "end": "405680"
  },
  {
    "text": "returns a message similar to the",
    "start": "405680",
    "end": "406960"
  },
  {
    "text": "following one with any file parts that",
    "start": "406960",
    "end": "408759"
  },
  {
    "text": "weren't processed record the upload ID",
    "start": "408759",
    "end": "411680"
  },
  {
    "text": "since it will be used in The Next Step",
    "start": "411680",
    "end": "413960"
  },
  {
    "text": "run the abort multi-art upload command",
    "start": "413960",
    "end": "416400"
  },
  {
    "text": "to remove the incomplete Parts providing",
    "start": "416400",
    "end": "418639"
  },
  {
    "text": "the bucket key name and upload ID from",
    "start": "418639",
    "end": "421080"
  },
  {
    "text": "the previous",
    "start": "421080",
    "end": "422639"
  },
  {
    "text": "step validate that you've deleted all of",
    "start": "422639",
    "end": "425199"
  },
  {
    "text": "the incomplete multi-part uploads by",
    "start": "425199",
    "end": "427120"
  },
  {
    "text": "running the list multiart uploads",
    "start": "427120",
    "end": "429400"
  },
  {
    "text": "command again now you know how to create",
    "start": "429400",
    "end": "431960"
  },
  {
    "text": "a multi-part upload using highlevel AWS",
    "start": "431960",
    "end": "434879"
  },
  {
    "text": "S3 commands and lowlevel AWS S3 API",
    "start": "434879",
    "end": "439680"
  },
  {
    "text": "commands thanks for watching and happy",
    "start": "439680",
    "end": "442120"
  },
  {
    "start": "441000",
    "end": "456000"
  },
  {
    "text": "cloud computing from all of us here at",
    "start": "442120",
    "end": "443960"
  },
  {
    "text": "AWS",
    "start": "443960",
    "end": "445670"
  },
  {
    "text": "[Applause]",
    "start": "445670",
    "end": "447730"
  },
  {
    "text": "[Music]",
    "start": "447730",
    "end": "455839"
  }
]