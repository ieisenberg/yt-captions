[
  {
    "text": "Hello and welcome",
    "start": "300",
    "end": "1566"
  },
  {
    "text": "back to the Apache Flink Learning series.",
    "start": "1566",
    "end": "4566"
  },
  {
    "text": "In today's talk",
    "start": "10300",
    "end": "11266"
  },
  {
    "text": "will be giving",
    "start": "11266",
    "end": "12165"
  },
  {
    "text": "a high level overview about Apache Flink,",
    "start": "12166",
    "end": "15166"
  },
  {
    "text": "and then we'll dive deep into how data",
    "start": "16033",
    "end": "19266"
  },
  {
    "text": "flows",
    "start": "19266",
    "end": "20400"
  },
  {
    "text": "through an Apache Flink application.",
    "start": "20400",
    "end": "22900"
  },
  {
    "text": "Let's get started.",
    "start": "22900",
    "end": "24300"
  },
  {
    "text": "We can begin with a definition.",
    "start": "24300",
    "end": "27300"
  },
  {
    "text": "Apache Flink",
    "start": "28333",
    "end": "29100"
  },
  {
    "text": "is a framework for stateful computations",
    "start": "29100",
    "end": "32099"
  },
  {
    "text": "over unbounded and bounded data streams.",
    "start": "32266",
    "end": "35300"
  },
  {
    "text": "Starting with the word stateful,",
    "start": "36500",
    "end": "38900"
  },
  {
    "text": "we know that",
    "start": "38900",
    "end": "39533"
  },
  {
    "text": "from previous sections",
    "start": "39533",
    "end": "40900"
  },
  {
    "text": "of this learning series.",
    "start": "40900",
    "end": "43500"
  },
  {
    "text": "This means we're talking",
    "start": "43500",
    "end": "44766"
  },
  {
    "text": "about application state.",
    "start": "44766",
    "end": "47399"
  },
  {
    "text": "In other words,",
    "start": "47400",
    "end": "48100"
  },
  {
    "text": "we're retaining information about data",
    "start": "48100",
    "end": "51333"
  },
  {
    "text": "after it's",
    "start": "51600",
    "end": "52066"
  },
  {
    "text": "been processed",
    "start": "52066",
    "end": "53066"
  },
  {
    "text": "or seen by the application.",
    "start": "53066",
    "end": "55933"
  },
  {
    "text": "Apache Flink",
    "start": "55933",
    "end": "56833"
  },
  {
    "text": "can perform stateful computations.",
    "start": "56833",
    "end": "59833"
  },
  {
    "text": "Next, we have unbounded",
    "start": "61266",
    "end": "63333"
  },
  {
    "text": "and bounded data streams.",
    "start": "63333",
    "end": "66133"
  },
  {
    "text": "Unbounded data streams",
    "start": "66133",
    "end": "67500"
  },
  {
    "text": "would be ones",
    "start": "67500",
    "end": "68066"
  },
  {
    "text": "that have no fixed start and end.",
    "start": "68066",
    "end": "71066"
  },
  {
    "text": "They're continuous. In other words.",
    "start": "71266",
    "end": "73200"
  },
  {
    "text": "This is",
    "start": "74500",
    "end": "74933"
  },
  {
    "text": "in contrast with bounded data streams,",
    "start": "74933",
    "end": "78132"
  },
  {
    "text": "which are analogous to batch jobs",
    "start": "78666",
    "end": "81033"
  },
  {
    "text": "with a fixed start and end.",
    "start": "81033",
    "end": "83465"
  },
  {
    "text": "Apache Flink can do both.",
    "start": "83466",
    "end": "86133"
  },
  {
    "text": "Some other notable key",
    "start": "86133",
    "end": "87600"
  },
  {
    "text": "features of Apache Flink",
    "start": "87600",
    "end": "89566"
  },
  {
    "text": "would be exactly once state",
    "start": "89566",
    "end": "91266"
  },
  {
    "text": "consistency guarantees,",
    "start": "91266",
    "end": "93266"
  },
  {
    "text": "and those are achieved",
    "start": "93266",
    "end": "94233"
  },
  {
    "text": "through the state fulness",
    "start": "94233",
    "end": "95666"
  },
  {
    "text": "within the application.",
    "start": "95666",
    "end": "98233"
  },
  {
    "text": "Data stored durably in state",
    "start": "98233",
    "end": "100000"
  },
  {
    "text": "is not processed twice.",
    "start": "100000",
    "end": "103000"
  },
  {
    "text": "Apache Flink can also handle late data",
    "start": "103266",
    "end": "106266"
  },
  {
    "text": "with its event time",
    "start": "106933",
    "end": "108366"
  },
  {
    "text": "and watermarking capabilities.",
    "start": "108366",
    "end": "111366"
  },
  {
    "text": "Apache Flink has a layered API",
    "start": "111500",
    "end": "113466"
  },
  {
    "text": "set including Flink, SQL table,",
    "start": "113466",
    "end": "116466"
  },
  {
    "text": "data stream, and process function APIs.",
    "start": "116533",
    "end": "119533"
  },
  {
    "text": "These decrease in abstraction",
    "start": "120066",
    "end": "122400"
  },
  {
    "text": "and increase",
    "start": "122400",
    "end": "123366"
  },
  {
    "text": "in the amount of state control",
    "start": "123366",
    "end": "125200"
  },
  {
    "text": "you have as you increase,",
    "start": "125200",
    "end": "128200"
  },
  {
    "text": "respectively.",
    "start": "128466",
    "end": "131133"
  },
  {
    "text": "Apache Flink is highly available",
    "start": "131133",
    "end": "133099"
  },
  {
    "text": "and fault tolerant",
    "start": "133100",
    "end": "134366"
  },
  {
    "text": "due to its checkpointing mechanism",
    "start": "134366",
    "end": "136500"
  },
  {
    "text": "and the ability to run",
    "start": "136500",
    "end": "137600"
  },
  {
    "text": "an Apache Flink",
    "start": "137600",
    "end": "138400"
  },
  {
    "text": "cluster to withstand outages, lost nodes,",
    "start": "138400",
    "end": "142099"
  },
  {
    "text": "and corrupt data.",
    "start": "142333",
    "end": "143532"
  },
  {
    "text": "An Apache Flink is highly scalable,",
    "start": "145266",
    "end": "147800"
  },
  {
    "text": "capable of processing",
    "start": "147800",
    "end": "149066"
  },
  {
    "text": "millions of records per",
    "start": "149066",
    "end": "150299"
  },
  {
    "text": "second at low latency",
    "start": "150300",
    "end": "152600"
  },
  {
    "text": "depending on the connecting systems used",
    "start": "152600",
    "end": "154766"
  },
  {
    "text": "and the type of data",
    "start": "154766",
    "end": "155933"
  },
  {
    "text": "processing you're doing.",
    "start": "155933",
    "end": "157233"
  },
  {
    "text": "This type of scale is",
    "start": "157233",
    "end": "158500"
  },
  {
    "text": "definitely possible.",
    "start": "158500",
    "end": "161500"
  },
  {
    "text": "Apache Flink could be used",
    "start": "162966",
    "end": "164333"
  },
  {
    "text": "in many different use cases,",
    "start": "164333",
    "end": "166333"
  },
  {
    "text": "including but not limited to,",
    "start": "166333",
    "end": "168465"
  },
  {
    "text": "event driven applications.",
    "start": "168466",
    "end": "170866"
  },
  {
    "text": "This would be keeping track",
    "start": "170866",
    "end": "171933"
  },
  {
    "text": "of stateful computations along the way.",
    "start": "171933",
    "end": "174933"
  },
  {
    "text": "Streaming or batch data analysis.",
    "start": "176000",
    "end": "178500"
  },
  {
    "text": "Apache Flink can process",
    "start": "178500",
    "end": "179900"
  },
  {
    "text": "streaming and batch data",
    "start": "179900",
    "end": "181333"
  },
  {
    "text": "with minimal changes to the code.",
    "start": "181333",
    "end": "184333"
  },
  {
    "text": "ETL jobs you can transform and load data",
    "start": "185233",
    "end": "188566"
  },
  {
    "text": "into a variety",
    "start": "188566",
    "end": "189933"
  },
  {
    "text": "of different data systems",
    "start": "189933",
    "end": "191366"
  },
  {
    "text": "using Apache Flink.",
    "start": "191366",
    "end": "193800"
  },
  {
    "text": "Anomaly detection.",
    "start": "193800",
    "end": "195333"
  },
  {
    "text": "With Apache Flink,",
    "start": "195333",
    "end": "196265"
  },
  {
    "text": "you can leverage",
    "start": "196266",
    "end": "196966"
  },
  {
    "text": "built in anomaly detection capabilities",
    "start": "196966",
    "end": "199966"
  },
  {
    "text": "to identify anomalous data",
    "start": "199966",
    "end": "202966"
  },
  {
    "text": "and with the expressiveness in Apache",
    "start": "203333",
    "end": "206000"
  },
  {
    "text": "Flink APIs.",
    "start": "206000",
    "end": "207300"
  },
  {
    "text": "There really are",
    "start": "207300",
    "end": "208266"
  },
  {
    "text": "few use cases",
    "start": "208266",
    "end": "209400"
  },
  {
    "text": "Apache Flink can't accomplish.",
    "start": "209400",
    "end": "211299"
  },
  {
    "text": "It's important to remember that",
    "start": "212733",
    "end": "214266"
  },
  {
    "text": "Apache Flink",
    "start": "214266",
    "end": "215066"
  },
  {
    "text": "is not just an analytical framework.",
    "start": "215066",
    "end": "218066"
  },
  {
    "text": "It's an application framework",
    "start": "218100",
    "end": "220066"
  },
  {
    "text": "that can be used for analytical",
    "start": "220066",
    "end": "221900"
  },
  {
    "text": "and operational use cases.",
    "start": "221900",
    "end": "224900"
  },
  {
    "text": "Now that we've learned a little bit",
    "start": "226033",
    "end": "227666"
  },
  {
    "text": "about Apache Flink,",
    "start": "227666",
    "end": "229600"
  },
  {
    "text": "let's take a look",
    "start": "229600",
    "end": "230333"
  },
  {
    "text": "at how data flows",
    "start": "230333",
    "end": "231732"
  },
  {
    "text": "through an Apache Flink application.",
    "start": "231733",
    "end": "233533"
  },
  {
    "text": "And to end.",
    "start": "233533",
    "end": "236133"
  },
  {
    "text": "So suppose we have a data",
    "start": "236133",
    "end": "238400"
  },
  {
    "text": "set of all the taxi trips",
    "start": "238400",
    "end": "240900"
  },
  {
    "text": "that were taken in New York City.",
    "start": "240900",
    "end": "243700"
  },
  {
    "text": "The Apache Flink application will cover",
    "start": "243700",
    "end": "246099"
  },
  {
    "text": "in this use",
    "start": "246100",
    "end": "246766"
  },
  {
    "text": "case, will receive a stream of taxi trips",
    "start": "246766",
    "end": "250300"
  },
  {
    "text": "and count the number of trips",
    "start": "250733",
    "end": "252266"
  },
  {
    "text": "per destination.",
    "start": "252266",
    "end": "254000"
  },
  {
    "text": "These being the major airports",
    "start": "254000",
    "end": "256500"
  },
  {
    "text": "over a specific time period,",
    "start": "256500",
    "end": "259500"
  },
  {
    "text": "it will",
    "start": "259800",
    "end": "260099"
  },
  {
    "text": "then send those updates of these counts",
    "start": "260100",
    "end": "263100"
  },
  {
    "text": "to a destination as they occur.",
    "start": "263100",
    "end": "266100"
  },
  {
    "text": "On this screen,",
    "start": "267966",
    "end": "268900"
  },
  {
    "text": "we see the anatomy of an Apache",
    "start": "268900",
    "end": "270866"
  },
  {
    "text": "Flink application.",
    "start": "270866",
    "end": "272833"
  },
  {
    "text": "Every Apache Flink application",
    "start": "272833",
    "end": "274666"
  },
  {
    "text": "will look something like this,",
    "start": "274666",
    "end": "277533"
  },
  {
    "text": "containing a source on the left hand side",
    "start": "277533",
    "end": "280500"
  },
  {
    "text": "which receives data",
    "start": "280500",
    "end": "282166"
  },
  {
    "text": "from an external system.",
    "start": "282166",
    "end": "283500"
  },
  {
    "text": "We also have a",
    "start": "284733",
    "end": "285366"
  },
  {
    "text": "series of different transformations.",
    "start": "285366",
    "end": "288366"
  },
  {
    "text": "Transformations can be",
    "start": "288500",
    "end": "290233"
  },
  {
    "text": "a simple one message at a time.",
    "start": "290233",
    "end": "292500"
  },
  {
    "text": "Transformation like this.",
    "start": "292500",
    "end": "294466"
  },
  {
    "text": "Map on the left",
    "start": "294466",
    "end": "296433"
  },
  {
    "text": "to extract the destination.",
    "start": "296433",
    "end": "299400"
  },
  {
    "text": "Or they can do some sort of aggregation,",
    "start": "299400",
    "end": "302133"
  },
  {
    "text": "like counting the number of trips",
    "start": "302133",
    "end": "303900"
  },
  {
    "text": "per destination.",
    "start": "303900",
    "end": "306900"
  },
  {
    "text": "And then finally we'll have a sync",
    "start": "306933",
    "end": "309300"
  },
  {
    "text": "where we will send the data",
    "start": "309300",
    "end": "311000"
  },
  {
    "text": "outside of Apache Flink",
    "start": "311000",
    "end": "312533"
  },
  {
    "text": "when we're done processing it.",
    "start": "312533",
    "end": "315533"
  },
  {
    "text": "The programing model,",
    "start": "316600",
    "end": "318233"
  },
  {
    "text": "where an application is defined",
    "start": "318233",
    "end": "320333"
  },
  {
    "text": "as a sequence of processing steps, is",
    "start": "320333",
    "end": "323433"
  },
  {
    "text": "called the data flow model.",
    "start": "323433",
    "end": "326433"
  },
  {
    "text": "Now data flow is not unique",
    "start": "326600",
    "end": "328466"
  },
  {
    "text": "to Apache Flink,",
    "start": "328466",
    "end": "329933"
  },
  {
    "text": "but it allows you to represent",
    "start": "329933",
    "end": "332100"
  },
  {
    "text": "almost any application",
    "start": "332100",
    "end": "334233"
  },
  {
    "text": "where data flows through.",
    "start": "334233",
    "end": "337000"
  },
  {
    "text": "Let's see how this works in a little bit",
    "start": "337000",
    "end": "338633"
  },
  {
    "text": "more detail.",
    "start": "338633",
    "end": "341633"
  },
  {
    "text": "When you write your application",
    "start": "341866",
    "end": "344266"
  },
  {
    "text": "you actually code something like this.",
    "start": "344266",
    "end": "346800"
  },
  {
    "text": "You would",
    "start": "348066",
    "end": "348400"
  },
  {
    "text": "code it to count trips per destination.",
    "start": "348400",
    "end": "351400"
  },
  {
    "text": "And in order to do that,",
    "start": "351600",
    "end": "352766"
  },
  {
    "text": "we need to split",
    "start": "352766",
    "end": "354065"
  },
  {
    "text": "partition or key by the data before",
    "start": "354066",
    "end": "357566"
  },
  {
    "text": "or we count.",
    "start": "357566",
    "end": "360566"
  },
  {
    "text": "We know that",
    "start": "362966",
    "end": "363633"
  },
  {
    "text": "Apache Flink scales horizontally.",
    "start": "363633",
    "end": "366633"
  },
  {
    "text": "The application Apache Flink deploys",
    "start": "367566",
    "end": "370100"
  },
  {
    "text": "based on the data flow",
    "start": "370100",
    "end": "371533"
  },
  {
    "text": "you defined in",
    "start": "371533",
    "end": "372266"
  },
  {
    "text": "code, will look something like this.",
    "start": "372266",
    "end": "375266"
  },
  {
    "text": "Let's pretend we want to",
    "start": "376466",
    "end": "378000"
  },
  {
    "text": "parallel processing flows.",
    "start": "378000",
    "end": "381000"
  },
  {
    "text": "The source is parallelized.",
    "start": "381366",
    "end": "384233"
  },
  {
    "text": "If we're reading from a proportioned",
    "start": "384233",
    "end": "385900"
  },
  {
    "text": "input like an Apache Kafka topic",
    "start": "385900",
    "end": "388833"
  },
  {
    "text": "source partitions are then distributed.",
    "start": "388833",
    "end": "391833"
  },
  {
    "text": "We would then extract the destination,",
    "start": "394233",
    "end": "397233"
  },
  {
    "text": "sending the trip to the next operator,",
    "start": "397433",
    "end": "400066"
  },
  {
    "text": "and that operator would",
    "start": "400066",
    "end": "401300"
  },
  {
    "text": "then count the number of trips",
    "start": "401300",
    "end": "403432"
  },
  {
    "text": "to that destination.",
    "start": "403433",
    "end": "406433"
  },
  {
    "text": "Periodically,",
    "start": "408000",
    "end": "409266"
  },
  {
    "text": "the count would be sent",
    "start": "409266",
    "end": "410600"
  },
  {
    "text": "to the destination.",
    "start": "410600",
    "end": "413400"
  },
  {
    "text": "It's important to note",
    "start": "413400",
    "end": "414333"
  },
  {
    "text": "that data is partitioned",
    "start": "414333",
    "end": "416533"
  },
  {
    "text": "based on the destination. Here.",
    "start": "416533",
    "end": "418300"
  },
  {
    "text": "All trips that go to the",
    "start": "419400",
    "end": "420666"
  },
  {
    "text": "same airport are arriving",
    "start": "420666",
    "end": "423000"
  },
  {
    "text": "on the same count operator instance.",
    "start": "423000",
    "end": "426000"
  },
  {
    "text": "Additionally, application state",
    "start": "427133",
    "end": "430166"
  },
  {
    "text": "the counts per airport are partitioned",
    "start": "430566",
    "end": "433400"
  },
  {
    "text": "the same way",
    "start": "433400",
    "end": "434633"
  },
  {
    "text": "as the records",
    "start": "434633",
    "end": "435400"
  },
  {
    "text": "that are flowing through the application.",
    "start": "435400",
    "end": "438400"
  },
  {
    "text": "So why are we doing this?",
    "start": "440066",
    "end": "443066"
  },
  {
    "text": "The running count",
    "start": "443800",
    "end": "445500"
  },
  {
    "text": "is one of those stateful operations",
    "start": "445500",
    "end": "447633"
  },
  {
    "text": "that we've learned",
    "start": "447633",
    "end": "448233"
  },
  {
    "text": "about in previous videos.",
    "start": "448233",
    "end": "449766"
  },
  {
    "text": "In this learning series.",
    "start": "449766",
    "end": "451900"
  },
  {
    "text": "The running count of trips",
    "start": "451900",
    "end": "453199"
  },
  {
    "text": "to each destination",
    "start": "453200",
    "end": "454666"
  },
  {
    "text": "is contained in the state or application.",
    "start": "454666",
    "end": "457666"
  },
  {
    "text": "Flink is a distributed system",
    "start": "459933",
    "end": "462400"
  },
  {
    "text": "which can run on multiple machines.",
    "start": "462400",
    "end": "465400"
  },
  {
    "text": "We can partition the data",
    "start": "466200",
    "end": "468233"
  },
  {
    "text": "so that all trips",
    "start": "468233",
    "end": "469500"
  },
  {
    "text": "to the same destination",
    "start": "469500",
    "end": "471433"
  },
  {
    "text": "arrive on the same machine,",
    "start": "471433",
    "end": "473600"
  },
  {
    "text": "guaranteeing that the count of a specific",
    "start": "473600",
    "end": "476433"
  },
  {
    "text": "destination is on a single machine.",
    "start": "476433",
    "end": "479733"
  },
  {
    "text": "The application state can actually be",
    "start": "482533",
    "end": "484832"
  },
  {
    "text": "stored on the machine itself.",
    "start": "484833",
    "end": "486666"
  },
  {
    "text": "The benefit to doing this",
    "start": "487766",
    "end": "489600"
  },
  {
    "text": "is so that we don't have",
    "start": "489600",
    "end": "490600"
  },
  {
    "text": "to make remote calls to a data store",
    "start": "490600",
    "end": "493766"
  },
  {
    "text": "in order to update the count.",
    "start": "494500",
    "end": "497066"
  },
  {
    "text": "This would additionally give us",
    "start": "497066",
    "end": "498800"
  },
  {
    "text": "lower latency",
    "start": "498800",
    "end": "500332"
  },
  {
    "text": "when we want to do things",
    "start": "500333",
    "end": "501500"
  },
  {
    "text": "like update the state",
    "start": "501500",
    "end": "503533"
  },
  {
    "text": "and allows us to scale horizontally,",
    "start": "503533",
    "end": "506466"
  },
  {
    "text": "adding more machines",
    "start": "506466",
    "end": "507566"
  },
  {
    "text": "as we partition the state",
    "start": "507566",
    "end": "508900"
  },
  {
    "text": "Further",
    "start": "508900",
    "end": "511500"
  },
  {
    "text": "It's important to remember",
    "start": "511500",
    "end": "512766"
  },
  {
    "text": "it's not just processing",
    "start": "512766",
    "end": "514500"
  },
  {
    "text": "that we're distributing in Apache Flink.",
    "start": "514500",
    "end": "516900"
  },
  {
    "text": "It's also the state.",
    "start": "516900",
    "end": "519900"
  },
  {
    "text": "In order to understand",
    "start": "521533",
    "end": "522966"
  },
  {
    "text": "the future videos in this series,",
    "start": "522966",
    "end": "525966"
  },
  {
    "text": "as well as some Apache",
    "start": "526066",
    "end": "527665"
  },
  {
    "text": "Flink documentation",
    "start": "527666",
    "end": "528900"
  },
  {
    "text": "as you're reading through.",
    "start": "528900",
    "end": "530933"
  },
  {
    "text": "Let's define some common",
    "start": "530933",
    "end": "532766"
  },
  {
    "text": "Apache Flink terms.",
    "start": "532766",
    "end": "534365"
  },
  {
    "text": "Just so we're all on the same page.",
    "start": "534366",
    "end": "537366"
  },
  {
    "text": "The flow of operators",
    "start": "539633",
    "end": "541200"
  },
  {
    "text": "you define with your application",
    "start": "541200",
    "end": "542933"
  },
  {
    "text": "code is called the logical graph.",
    "start": "542933",
    "end": "546133"
  },
  {
    "text": "Each of the steps in your logical",
    "start": "547533",
    "end": "549166"
  },
  {
    "text": "graph is called an operator.",
    "start": "549166",
    "end": "550800"
  },
  {
    "text": "Sources",
    "start": "551933",
    "end": "552700"
  },
  {
    "text": "and syncs are also called operators,",
    "start": "552700",
    "end": "555700"
  },
  {
    "text": "but they're sometimes referred to",
    "start": "555866",
    "end": "557300"
  },
  {
    "text": "as the source operator",
    "start": "557300",
    "end": "558766"
  },
  {
    "text": "or the sync operator.",
    "start": "558766",
    "end": "561766"
  },
  {
    "text": "When we deploy our application,",
    "start": "563700",
    "end": "566166"
  },
  {
    "text": "we decide",
    "start": "566166",
    "end": "567066"
  },
  {
    "text": "what level of parallelism we want.",
    "start": "567066",
    "end": "570066"
  },
  {
    "text": "Application parallelism",
    "start": "570866",
    "end": "571966"
  },
  {
    "text": "is how our job is parallelized",
    "start": "571966",
    "end": "574500"
  },
  {
    "text": "into instances of operators,",
    "start": "574500",
    "end": "577200"
  },
  {
    "text": "and this becomes the default parallelism",
    "start": "577200",
    "end": "579900"
  },
  {
    "text": "for all operators in the graph.",
    "start": "579900",
    "end": "582900"
  },
  {
    "text": "Taking into account",
    "start": "585033",
    "end": "586200"
  },
  {
    "text": "the parallelism",
    "start": "586200",
    "end": "587066"
  },
  {
    "text": "and the flow between operators.",
    "start": "587066",
    "end": "589699"
  },
  {
    "text": "Apache Flink generates a physical graph.",
    "start": "589700",
    "end": "592700"
  },
  {
    "text": "This is what actually gets deployed",
    "start": "593333",
    "end": "595166"
  },
  {
    "text": "onto the Apache Flink cluster.",
    "start": "595166",
    "end": "598166"
  },
  {
    "text": "Based on the parallelism provided,",
    "start": "599833",
    "end": "602733"
  },
  {
    "text": "multiple instances of each operator",
    "start": "602733",
    "end": "605100"
  },
  {
    "text": "are deployed.",
    "start": "605100",
    "end": "606899"
  },
  {
    "text": "These parallel operators",
    "start": "606900",
    "end": "608233"
  },
  {
    "text": "are called subtasks.",
    "start": "608233",
    "end": "610633"
  },
  {
    "text": "Each operator generates",
    "start": "610633",
    "end": "612100"
  },
  {
    "text": "a number of subtasks",
    "start": "612100",
    "end": "613699"
  },
  {
    "text": "equal to the parallelism.",
    "start": "613700",
    "end": "616700"
  },
  {
    "text": "To recap, the application flow",
    "start": "618866",
    "end": "621366"
  },
  {
    "text": "based on our code",
    "start": "621366",
    "end": "622933"
  },
  {
    "text": "defines the logical graph.",
    "start": "622933",
    "end": "625933"
  },
  {
    "text": "A logical graph is a Dag or a",
    "start": "625966",
    "end": "628566"
  },
  {
    "text": "directed acyclic graph.",
    "start": "628566",
    "end": "630566"
  },
  {
    "text": "The logical graph is",
    "start": "632300",
    "end": "633399"
  },
  {
    "text": "composed of operators,",
    "start": "633400",
    "end": "635466"
  },
  {
    "text": "one or more sources,",
    "start": "635466",
    "end": "637333"
  },
  {
    "text": "some transformations,",
    "start": "637333",
    "end": "638466"
  },
  {
    "text": "and one or more sinks.",
    "start": "638466",
    "end": "641466"
  },
  {
    "text": "When we deploy our application,",
    "start": "643266",
    "end": "645433"
  },
  {
    "text": "we choose the parallelism",
    "start": "645433",
    "end": "648433"
  },
  {
    "text": "based on this",
    "start": "648833",
    "end": "650166"
  },
  {
    "text": "and the data flows between operators.",
    "start": "650166",
    "end": "653100"
  },
  {
    "text": "Apache Flink generates a physical graph",
    "start": "653100",
    "end": "656000"
  },
  {
    "text": "composed of subtasks.",
    "start": "656000",
    "end": "659000"
  },
  {
    "text": "And that's it for the definitions.",
    "start": "660066",
    "end": "662699"
  },
  {
    "text": "Stay tuned for the next videos",
    "start": "662700",
    "end": "664200"
  },
  {
    "text": "where we dive",
    "start": "664200",
    "end": "664866"
  },
  {
    "text": "deeper into Apache Flink",
    "start": "664866",
    "end": "666833"
  },
  {
    "text": "and Apache Flink concepts.",
    "start": "666833",
    "end": "669100"
  },
  {
    "text": "As always, thanks for watching.",
    "start": "669100",
    "end": "670633"
  },
  {
    "text": "Leave your questions in the comments",
    "start": "670633",
    "end": "672200"
  },
  {
    "text": "and we'll see you in the next video.",
    "start": "672200",
    "end": "673666"
  }
]