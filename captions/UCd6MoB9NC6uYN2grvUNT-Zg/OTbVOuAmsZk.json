[
  {
    "text": "- [Mohammad] Hello everyone.",
    "start": "2730",
    "end": "4860"
  },
  {
    "text": "My name's Mohamad Tahsin,\nyou can call me Mo.",
    "start": "4860",
    "end": "7740"
  },
  {
    "text": "I'm an AI/ML Specialist\nSolutions Architect with AWS.",
    "start": "7740",
    "end": "10893"
  },
  {
    "text": "This video was created in\nconjunction with Dhawal Patel,",
    "start": "12060",
    "end": "15990"
  },
  {
    "text": "who is a tech lead for Amazon Bedrock",
    "start": "15990",
    "end": "18600"
  },
  {
    "text": "and Claudio Mazzoni,",
    "start": "18600",
    "end": "20490"
  },
  {
    "text": "Senior Worldwide Specialist\nSolutions Architect for Gen AI.",
    "start": "20490",
    "end": "24900"
  },
  {
    "text": "Today we're gonna be going\nover how you can track,",
    "start": "24900",
    "end": "28350"
  },
  {
    "text": "allocate, budget, and\nmanage your cost and usage",
    "start": "28350",
    "end": "32250"
  },
  {
    "text": "of yourself and your customers",
    "start": "32250",
    "end": "35040"
  },
  {
    "text": "for applications you\ncreate with Amazon Bedrock.",
    "start": "35040",
    "end": "38823"
  },
  {
    "text": "Amazon Bedrock is the easiest way to build",
    "start": "42660",
    "end": "45840"
  },
  {
    "text": "and scale Gen AI applications.",
    "start": "45840",
    "end": "48333"
  },
  {
    "text": "It's an API based service\nthat allows you to select",
    "start": "49230",
    "end": "52050"
  },
  {
    "text": "some of the leading foundation\nmodel families of today",
    "start": "52050",
    "end": "55120"
  },
  {
    "text": "like Anthropic's Claudd,\nMeta's Llama, Amazon's Titan,",
    "start": "55957",
    "end": "60510"
  },
  {
    "text": "or Stability AI's Stable Diffusion.",
    "start": "60510",
    "end": "63633"
  },
  {
    "text": "You are able to fine tune\nor import customized models",
    "start": "64860",
    "end": "68790"
  },
  {
    "text": "on Amazon Bedrock.",
    "start": "68790",
    "end": "70143"
  },
  {
    "text": "You are able to orchestrate",
    "start": "71040",
    "end": "73020"
  },
  {
    "text": "Retrieval Augmented Generation or RAG.",
    "start": "73020",
    "end": "77039"
  },
  {
    "text": "You can even orchestrate\nagents on this platform.",
    "start": "77040",
    "end": "80728"
  },
  {
    "text": "And as always, you have the assurance",
    "start": "80728",
    "end": "83130"
  },
  {
    "text": "that the prompts and responses",
    "start": "83130",
    "end": "85049"
  },
  {
    "text": "you send and receive on Amazon Bedrock",
    "start": "85050",
    "end": "88020"
  },
  {
    "text": "are not used or stored by Amazon",
    "start": "88020",
    "end": "90840"
  },
  {
    "text": "and are not shared with a\nthird party model providers.",
    "start": "90840",
    "end": "94799"
  },
  {
    "text": "As you can see, there's\nmany different facets",
    "start": "94800",
    "end": "97980"
  },
  {
    "text": "to Amazon Bedrock,",
    "start": "97980",
    "end": "99450"
  },
  {
    "text": "but today we will solely focus\non cost and usage allocation",
    "start": "99450",
    "end": "104450"
  },
  {
    "text": "and spending for Amazon\nBedrock applications.",
    "start": "104640",
    "end": "107523"
  },
  {
    "text": "Now, let's get into the nitty gritties",
    "start": "109590",
    "end": "111420"
  },
  {
    "text": "of cost tagging and management.",
    "start": "111420",
    "end": "113880"
  },
  {
    "text": "So as an overview, first I\ndo want to mention exactly",
    "start": "113880",
    "end": "117509"
  },
  {
    "text": "why we are creating this video,",
    "start": "117510",
    "end": "119700"
  },
  {
    "text": "and why this aspect of Amazon\nBedrock is very useful.",
    "start": "119700",
    "end": "124700"
  },
  {
    "text": "Until now, if you were a developer",
    "start": "125010",
    "end": "127620"
  },
  {
    "text": "that built an application\non Amazon Bedrock",
    "start": "127620",
    "end": "130590"
  },
  {
    "text": "and you had multiple\nusers, customers, tenants,",
    "start": "130590",
    "end": "134040"
  },
  {
    "text": "departments, using said application,",
    "start": "134040",
    "end": "136833"
  },
  {
    "text": "all of the cost and usage\nwould go to cost Explorer",
    "start": "137790",
    "end": "140700"
  },
  {
    "text": "underneath Amazon Bedrock,",
    "start": "140700",
    "end": "142890"
  },
  {
    "text": "and it would be very\ndifficult to differentiate",
    "start": "142890",
    "end": "145710"
  },
  {
    "text": "exactly where the usage was coming from.",
    "start": "145710",
    "end": "150450"
  },
  {
    "text": "Of course, you could have\nbuilt something custom,",
    "start": "150450",
    "end": "153720"
  },
  {
    "text": "but then you are beholden\nto managing that code",
    "start": "153720",
    "end": "157410"
  },
  {
    "text": "and adding overhead to your workflow.",
    "start": "157410",
    "end": "160530"
  },
  {
    "text": "Now, with the built-in cost\nand tagging management system",
    "start": "160530",
    "end": "163740"
  },
  {
    "text": "of Amazon Bedrock, you're\nable to allocate budgets",
    "start": "163740",
    "end": "167460"
  },
  {
    "text": "and charge back your customers or users",
    "start": "167460",
    "end": "170640"
  },
  {
    "text": "for specific usage that they incur.",
    "start": "170640",
    "end": "173703"
  },
  {
    "text": "Like we mentioned, we use\nApplication Inference Profiles",
    "start": "174810",
    "end": "178140"
  },
  {
    "text": "or IPs, and that tagging\nintegrates seamlessly",
    "start": "178140",
    "end": "182340"
  },
  {
    "text": "with AWS billing capabilities\nlike Cost Explorer.",
    "start": "182340",
    "end": "185553"
  },
  {
    "text": "You can track usage per team, department,",
    "start": "186540",
    "end": "189209"
  },
  {
    "text": "application, tenant,",
    "start": "189210",
    "end": "191100"
  },
  {
    "text": "whatever your workflow\nor application requires.",
    "start": "191100",
    "end": "194673"
  },
  {
    "text": "Finally, you can also set budgets",
    "start": "195660",
    "end": "197700"
  },
  {
    "text": "and define actions to prevent\nusage beyond a certain point.",
    "start": "197700",
    "end": "202653"
  },
  {
    "text": "So we've been talking about\ninference profiles a lot.",
    "start": "207990",
    "end": "210990"
  },
  {
    "text": "Let's break down what an\ninference profile actually is.",
    "start": "210990",
    "end": "215990"
  },
  {
    "text": "An inference profile can\nbe thought of a construct",
    "start": "216000",
    "end": "218880"
  },
  {
    "text": "that can be called via API.",
    "start": "218880",
    "end": "220863"
  },
  {
    "text": "This construct is related\nto a Base model ID,",
    "start": "222120",
    "end": "227103"
  },
  {
    "text": "and you can think of this Base model ID",
    "start": "228150",
    "end": "230430"
  },
  {
    "text": "as the underlying foundation model",
    "start": "230430",
    "end": "232980"
  },
  {
    "text": "that will be called via Amazon Bedrock.",
    "start": "232980",
    "end": "235773"
  },
  {
    "text": "This inference profile and Base model ID",
    "start": "236880",
    "end": "239850"
  },
  {
    "text": "are also related to an AWS region,",
    "start": "239850",
    "end": "243510"
  },
  {
    "text": "which is the region said foundation model",
    "start": "243510",
    "end": "246900"
  },
  {
    "text": "will be called from.",
    "start": "246900",
    "end": "248073"
  },
  {
    "text": "Now, there are two types\nof inference profiles.",
    "start": "249570",
    "end": "254570"
  },
  {
    "text": "There is a system defined\ninference profile,",
    "start": "254790",
    "end": "257970"
  },
  {
    "text": "and these inference profiles as of today",
    "start": "257970",
    "end": "260820"
  },
  {
    "text": "are used for cross region\ninference on Amazon Bedrock.",
    "start": "260820",
    "end": "265820"
  },
  {
    "text": "This is a resilient type of\ninvocation on Amazon Bedrock",
    "start": "265980",
    "end": "270690"
  },
  {
    "text": "that will bounce between two regions",
    "start": "270690",
    "end": "273240"
  },
  {
    "text": "depending on availability.",
    "start": "273240",
    "end": "275880"
  },
  {
    "text": "But for today's video, the\nother type of inference profile",
    "start": "275880",
    "end": "279960"
  },
  {
    "text": "are user created inference profiles,",
    "start": "279960",
    "end": "283199"
  },
  {
    "text": "otherwise known as Application\nInference Profiles.",
    "start": "283200",
    "end": "288030"
  },
  {
    "text": "And this Application Inference\nProfile as a construct,",
    "start": "288030",
    "end": "292620"
  },
  {
    "text": "not only contains base model IDs",
    "start": "292620",
    "end": "296010"
  },
  {
    "text": "and a region, it also has\ntags associated with it",
    "start": "296010",
    "end": "301010"
  },
  {
    "text": "that allows you to track and\nmanage the usage in spending",
    "start": "301200",
    "end": "306200"
  },
  {
    "text": "which system defined inference profiles",
    "start": "306600",
    "end": "310020"
  },
  {
    "text": "do not have the option of\nattaching tags to them.",
    "start": "310020",
    "end": "314193"
  },
  {
    "text": "Since for today's video, you\nare promised practicality.",
    "start": "316710",
    "end": "320340"
  },
  {
    "text": "Let's look at the scenario we will explore",
    "start": "320340",
    "end": "323550"
  },
  {
    "text": "and see how we can flesh this out",
    "start": "323550",
    "end": "326699"
  },
  {
    "text": "into a production\nenvironment where we can view",
    "start": "326700",
    "end": "330030"
  },
  {
    "text": "and track the cost of these applications.",
    "start": "330030",
    "end": "333003"
  },
  {
    "text": "We will pretend to look at any company,",
    "start": "333960",
    "end": "337169"
  },
  {
    "text": "a company that creates\nmany specialized chatbots",
    "start": "337170",
    "end": "340710"
  },
  {
    "text": "for their client base.",
    "start": "340710",
    "end": "342780"
  },
  {
    "text": "Currently, they offer\ntwo flavors of chatbots.",
    "start": "342780",
    "end": "346410"
  },
  {
    "text": "The first one is a WebSearch Bot,",
    "start": "346410",
    "end": "349140"
  },
  {
    "text": "and this can grab real-time data",
    "start": "349140",
    "end": "351240"
  },
  {
    "text": "and give a natural language\nresponse to wake user.",
    "start": "351240",
    "end": "355410"
  },
  {
    "text": "The second one is a Coding\nbot to help developers",
    "start": "355410",
    "end": "359280"
  },
  {
    "text": "write code and ask questions.",
    "start": "359280",
    "end": "362520"
  },
  {
    "text": "We will take a look at how",
    "start": "362520",
    "end": "364410"
  },
  {
    "text": "both of these applications can be managed",
    "start": "364410",
    "end": "367500"
  },
  {
    "text": "via Application Inference.",
    "start": "367500",
    "end": "369780"
  },
  {
    "text": "Now we'll take a look at",
    "start": "369780",
    "end": "371310"
  },
  {
    "text": "how you can actually plan the number",
    "start": "371310",
    "end": "374340"
  },
  {
    "text": "of Application Inference\nprofiles you need to create.",
    "start": "374340",
    "end": "377760"
  },
  {
    "text": "So the general formula\nthat we recommend is,",
    "start": "377760",
    "end": "381990"
  },
  {
    "text": "your Application Inference profiles",
    "start": "381990",
    "end": "384270"
  },
  {
    "text": "equals to the number of\napplications you have",
    "start": "384270",
    "end": "388470"
  },
  {
    "text": "multiplied by the tenants that you have,",
    "start": "388470",
    "end": "391770"
  },
  {
    "text": "multiplied by the environments you have.",
    "start": "391770",
    "end": "396000"
  },
  {
    "text": "Once all three of these\nfactors are taken into account",
    "start": "396000",
    "end": "399270"
  },
  {
    "text": "and multiplied, the number you get",
    "start": "399270",
    "end": "401910"
  },
  {
    "text": "will be the total number of\nApplication Inference profiles",
    "start": "401910",
    "end": "406380"
  },
  {
    "text": "that you need to create.",
    "start": "406380",
    "end": "407733"
  },
  {
    "text": "Now, let's apply that formula\nto any company's situation.",
    "start": "410790",
    "end": "415790"
  },
  {
    "text": "We know any company has two\nchat bots that they offer,",
    "start": "416700",
    "end": "420270"
  },
  {
    "text": "the coding bot and the web search bot,",
    "start": "420270",
    "end": "422699"
  },
  {
    "text": "hence the two applications.",
    "start": "422700",
    "end": "425310"
  },
  {
    "text": "Next, in the scenario, we will explore",
    "start": "425310",
    "end": "428460"
  },
  {
    "text": "for simplicity's sake,",
    "start": "428460",
    "end": "429960"
  },
  {
    "text": "we will say that any\ncompany has two customers,",
    "start": "429960",
    "end": "433560"
  },
  {
    "text": "customer one, and customer two,",
    "start": "433560",
    "end": "435870"
  },
  {
    "text": "that are each using both applications.",
    "start": "435870",
    "end": "439263"
  },
  {
    "text": "Lastly, we will say that\nwe have two environments",
    "start": "440580",
    "end": "443849"
  },
  {
    "text": "for this scenario.",
    "start": "443850",
    "end": "445260"
  },
  {
    "text": "Any company has a production environment",
    "start": "445260",
    "end": "447510"
  },
  {
    "text": "and a development environment,\nwhere everything is insured,",
    "start": "447510",
    "end": "451500"
  },
  {
    "text": "that it works smoothly, before\nmoving on to production.",
    "start": "451500",
    "end": "454593"
  },
  {
    "text": "Now that we establish our variables,",
    "start": "457260",
    "end": "459900"
  },
  {
    "text": "we can see that when we apply the formula,",
    "start": "459900",
    "end": "463500"
  },
  {
    "text": "we will multiply the two chatbots,",
    "start": "463500",
    "end": "466320"
  },
  {
    "text": "multiplied by the two customers",
    "start": "466320",
    "end": "468360"
  },
  {
    "text": "multiplied by the two environments.",
    "start": "468360",
    "end": "470580"
  },
  {
    "text": "Give us eight inference profiles",
    "start": "470580",
    "end": "473520"
  },
  {
    "text": "to create for this scenario.",
    "start": "473520",
    "end": "476163"
  },
  {
    "text": "Now, let's take a look at some of the tags",
    "start": "478110",
    "end": "480719"
  },
  {
    "text": "that will be attached",
    "start": "480720",
    "end": "481740"
  },
  {
    "text": "to each of the inference\nprofiles that we create.",
    "start": "481740",
    "end": "484800"
  },
  {
    "text": "Each tag consists of a key\nvalue pair to identify it.",
    "start": "484800",
    "end": "488552"
  },
  {
    "text": "The tags that will\ninclude in this scenario",
    "start": "489870",
    "end": "492930"
  },
  {
    "text": "are the Created By tag, the\nApplication ID, the Tenant ID,",
    "start": "492930",
    "end": "497930"
  },
  {
    "text": "the Customer Account\nID, the Model Provider,",
    "start": "498810",
    "end": "503250"
  },
  {
    "text": "the Model Name, and the\nenvironment that this IP exists in.",
    "start": "503250",
    "end": "508233"
  },
  {
    "text": "I'll now pass it over to Claudio",
    "start": "510000",
    "end": "512070"
  },
  {
    "text": "to go over our in-depth solution.",
    "start": "512070",
    "end": "515340"
  },
  {
    "text": "- [Claudio] Let us dive\ndeeper into our project.",
    "start": "515340",
    "end": "517860"
  },
  {
    "text": "We've broken down this project\ninto two different stages,",
    "start": "517860",
    "end": "520829"
  },
  {
    "text": "the configuration and setup\nstage and the inference stage.",
    "start": "520830",
    "end": "524880"
  },
  {
    "text": "The configuration stage",
    "start": "524880",
    "end": "526110"
  },
  {
    "text": "is driven by our configuration files.",
    "start": "526110",
    "end": "528573"
  },
  {
    "text": "Models like JSON contains\nthe pricing of the models,",
    "start": "529680",
    "end": "532529"
  },
  {
    "text": "input and output cost.",
    "start": "532530",
    "end": "533943"
  },
  {
    "text": "Config adjacent contains",
    "start": "535320",
    "end": "536580"
  },
  {
    "text": "all the inference profile\ninformation needed for the setup,",
    "start": "536580",
    "end": "539700"
  },
  {
    "text": "as well as the dashboard\nand alerts information.",
    "start": "539700",
    "end": "542433"
  },
  {
    "text": "Our lambda function becomes\nan intermediate step",
    "start": "544440",
    "end": "547050"
  },
  {
    "text": "where we capture all the\nmetrics at inference time",
    "start": "547050",
    "end": "550890"
  },
  {
    "text": "and populate our dashboards.",
    "start": "550890",
    "end": "552513"
  },
  {
    "text": "And finally, we have\nour API gateway set up",
    "start": "554280",
    "end": "559280"
  },
  {
    "text": "that becomes the invocation stage",
    "start": "559290",
    "end": "562110"
  },
  {
    "text": "between the user and the model.",
    "start": "562110",
    "end": "563943"
  },
  {
    "text": "Finally, for demonstration purposes,",
    "start": "568590",
    "end": "572040"
  },
  {
    "text": "we build a stream lead application",
    "start": "572040",
    "end": "574050"
  },
  {
    "text": "where you will see",
    "start": "574050",
    "end": "575790"
  },
  {
    "text": "our inference profile cost\ntracing work in real time.",
    "start": "575790",
    "end": "578522"
  },
  {
    "text": "All this is set up by\nrunning the script setup.py",
    "start": "580800",
    "end": "585450"
  },
  {
    "text": "either on the command line\nor directly onto the script.",
    "start": "585450",
    "end": "588693"
  },
  {
    "text": "Begin with the setup.",
    "start": "592020",
    "end": "593070"
  },
  {
    "text": "Our inference profiles have been created,",
    "start": "608490",
    "end": "610540"
  },
  {
    "text": "as well as our dashboards,\nand our SNN alarms.",
    "start": "613260",
    "end": "618003"
  },
  {
    "text": "Finally, we upload our Lambda function",
    "start": "618900",
    "end": "623220"
  },
  {
    "text": "and lambda layer with the\nrequired dependencies.",
    "start": "623220",
    "end": "626883"
  },
  {
    "text": "This might take a minute.",
    "start": "634860",
    "end": "636110"
  },
  {
    "text": "Finally, we set up our API gateway,",
    "start": "650250",
    "end": "653087"
  },
  {
    "text": "and we're done.",
    "start": "656880",
    "end": "657713"
  },
  {
    "text": "Let's take a look at our setup.",
    "start": "659670",
    "end": "661220"
  },
  {
    "text": "To start, I wanna point out",
    "start": "662490",
    "end": "664140"
  },
  {
    "text": "that our alarms have been created",
    "start": "664140",
    "end": "666400"
  },
  {
    "text": "and in here,",
    "start": "667470",
    "end": "668850"
  },
  {
    "text": "none of them have been triggered.",
    "start": "668850",
    "end": "670500"
  },
  {
    "text": "However, this was very close.",
    "start": "670500",
    "end": "672480"
  },
  {
    "text": "Had this been the case,",
    "start": "672480",
    "end": "674339"
  },
  {
    "text": "the admin will have\nreceived a notification.",
    "start": "674340",
    "end": "676623"
  },
  {
    "text": "We navigate to our\ndashboard that was created.",
    "start": "679050",
    "end": "682260"
  },
  {
    "text": "We can see our inference profiles",
    "start": "682260",
    "end": "685530"
  },
  {
    "text": "and our dashboard as it was created,",
    "start": "685530",
    "end": "688200"
  },
  {
    "text": "populated with some mock\ninferences that we have created.",
    "start": "688200",
    "end": "691503"
  },
  {
    "text": "Finally, we have our aggregated results",
    "start": "694950",
    "end": "699300"
  },
  {
    "text": "all shown at the bottom.",
    "start": "699300",
    "end": "700503"
  },
  {
    "text": "You may toggle the\ndifferent Inference profiles",
    "start": "702930",
    "end": "705279"
  },
  {
    "text": "at the dropdown.",
    "start": "706650",
    "end": "707483"
  },
  {
    "text": "And this how the dashboard looks like.",
    "start": "714120",
    "end": "715673"
  },
  {
    "text": "- [Mohammad] Thanks Claudio\nfor that amazing overview",
    "start": "718170",
    "end": "720510"
  },
  {
    "text": "of our solution.",
    "start": "720510",
    "end": "721980"
  },
  {
    "text": "Now, I'd like to go over some key terms",
    "start": "721980",
    "end": "724230"
  },
  {
    "text": "that we covered in today's video",
    "start": "724230",
    "end": "725880"
  },
  {
    "text": "so we can keep everything in track.",
    "start": "725880",
    "end": "727923"
  },
  {
    "text": "First, we'll review tagging.",
    "start": "728850",
    "end": "731579"
  },
  {
    "text": "Tagging allows you to tag\nAmazon Bedrock resources",
    "start": "731580",
    "end": "735270"
  },
  {
    "text": "for cost tracking and chargeback purposes.",
    "start": "735270",
    "end": "738660"
  },
  {
    "text": "You can tag these by user, department,",
    "start": "738660",
    "end": "742350"
  },
  {
    "text": "or even by customer.",
    "start": "742350",
    "end": "744600"
  },
  {
    "text": "These tags integrate directly\nwith the existing AWS tags",
    "start": "744600",
    "end": "748889"
  },
  {
    "text": "and cost monitoring system,",
    "start": "748890",
    "end": "750690"
  },
  {
    "text": "allowing for seamless integration.",
    "start": "750690",
    "end": "752973"
  },
  {
    "text": "Next, we'll look at\nApplication Inference Profiles.",
    "start": "754710",
    "end": "758100"
  },
  {
    "text": "You can think of these as\nwrappers around a Bedrock model ID",
    "start": "758100",
    "end": "762569"
  },
  {
    "text": "and a region that can be tagged",
    "start": "762570",
    "end": "764940"
  },
  {
    "text": "for granular cost tracking purposes.",
    "start": "764940",
    "end": "768003"
  },
  {
    "text": "Next, we'll review CRIS\nor Cross Region Inference.",
    "start": "769860",
    "end": "774089"
  },
  {
    "text": "These are resilient\nbedrock model endpoints",
    "start": "774090",
    "end": "777120"
  },
  {
    "text": "that can bounce between regions",
    "start": "777120",
    "end": "778950"
  },
  {
    "text": "to complete inference requests\nin a very timely manner",
    "start": "778950",
    "end": "783330"
  },
  {
    "text": "and provide double the account\nquota listed in your console.",
    "start": "783330",
    "end": "787713"
  },
  {
    "text": "Lastly, Cloudwatch.",
    "start": "789240",
    "end": "791700"
  },
  {
    "text": "This is a monitoring and\nobservability service",
    "start": "791700",
    "end": "794490"
  },
  {
    "text": "that provides real-time\nvisibility into AWS resources.",
    "start": "794490",
    "end": "799230"
  },
  {
    "text": "So for this purpose, it\nwill allow you to visualize",
    "start": "799230",
    "end": "802260"
  },
  {
    "text": "and log Amazon Bedrock usage\nand usage of specific IPs.",
    "start": "802260",
    "end": "807260"
  },
  {
    "text": "That brings us to the end of our video.",
    "start": "808140",
    "end": "810210"
  },
  {
    "text": "To reiterate, Application\nInference profiles are perfect",
    "start": "810210",
    "end": "814680"
  },
  {
    "text": "for cost tracking and budgeting",
    "start": "814680",
    "end": "816779"
  },
  {
    "text": "for multi-tenant environments\nusing Amazon Bedrock.",
    "start": "816780",
    "end": "820563"
  },
  {
    "text": "Up here on the screen,\nwe have two QR codes.",
    "start": "821670",
    "end": "824399"
  },
  {
    "text": "The one on the right will take you",
    "start": "824400",
    "end": "825780"
  },
  {
    "text": "to the end-to-end solution\nthat Claudio had demoed,",
    "start": "825780",
    "end": "829140"
  },
  {
    "text": "and the one on the left,",
    "start": "829140",
    "end": "830940"
  },
  {
    "text": "you'll be taken to the\nAmazon Bedrock webpage",
    "start": "830940",
    "end": "833370"
  },
  {
    "text": "to check out all of the\ncool features we offer.",
    "start": "833370",
    "end": "836133"
  },
  {
    "text": "With that, we hope you enjoyed this video",
    "start": "837150",
    "end": "839730"
  },
  {
    "text": "and we hope you build using Amazon Bedrock",
    "start": "839730",
    "end": "842250"
  },
  {
    "text": "to showcase the art of\nthe possible on AWS.",
    "start": "842250",
    "end": "845910"
  },
  {
    "text": "Take care.",
    "start": "845910",
    "end": "846743"
  }
]