[
  {
    "text": "- [Swagat] Hello, and welcome\nback to the second episode",
    "start": "750",
    "end": "2639"
  },
  {
    "text": "of the video series focusing\non Amazon Comprehend,",
    "start": "2640",
    "end": "5580"
  },
  {
    "text": "a fully managed",
    "start": "5580",
    "end": "6480"
  },
  {
    "text": "and continuously trained natural\nlanguage processing service",
    "start": "6480",
    "end": "9510"
  },
  {
    "text": "that uses machine learning\nto uncover valuable insights",
    "start": "9510",
    "end": "12480"
  },
  {
    "text": "and connections in text.",
    "start": "12480",
    "end": "14549"
  },
  {
    "text": "I am Swagat Kulkarni, Senior\nSolutions Architect in AWS,",
    "start": "14550",
    "end": "17640"
  },
  {
    "text": "and today, I'll be talking\nabout Amazon Comprehend",
    "start": "17640",
    "end": "20340"
  },
  {
    "text": "pre-trained models and APIs.",
    "start": "20340",
    "end": "22023"
  },
  {
    "text": "It all starts with your data.",
    "start": "23760",
    "end": "25680"
  },
  {
    "text": "The data can consist of\nvariety of documents, or text,",
    "start": "25680",
    "end": "28560"
  },
  {
    "text": "such as social interactions, logs, emails,",
    "start": "28560",
    "end": "31500"
  },
  {
    "text": "phone conversations, and many more.",
    "start": "31500",
    "end": "34020"
  },
  {
    "text": "Next, you input the data\nto Amazon Comprehend,",
    "start": "34020",
    "end": "36720"
  },
  {
    "text": "and use pre-trained\nmodels to extract insights",
    "start": "36720",
    "end": "39510"
  },
  {
    "text": "from the data.",
    "start": "39510",
    "end": "40829"
  },
  {
    "text": "These models are exposed by\nway of easy to consume APIs.",
    "start": "40830",
    "end": "43983"
  },
  {
    "text": "There are multiple ways of\ninteracting with these APIs",
    "start": "44820",
    "end": "47220"
  },
  {
    "text": "starting with AWS Command\nLine Interface, or CLI,",
    "start": "47220",
    "end": "50580"
  },
  {
    "text": "programmatically by using SDKs",
    "start": "50580",
    "end": "52410"
  },
  {
    "text": "in multiple programming languages,\nsuch as Java and Python,",
    "start": "52410",
    "end": "55710"
  },
  {
    "text": "or AWS Console.",
    "start": "55710",
    "end": "57840"
  },
  {
    "text": "Let's take a look at these APIs in action",
    "start": "57840",
    "end": "60030"
  },
  {
    "text": "from the AWS Console first,",
    "start": "60030",
    "end": "61949"
  },
  {
    "text": "followed by programmatic\naccess using Python.",
    "start": "61950",
    "end": "64503"
  },
  {
    "text": "After you login to AWS Console,",
    "start": "66510",
    "end": "68310"
  },
  {
    "text": "type comprehend in the search bar,",
    "start": "68310",
    "end": "70979"
  },
  {
    "text": "and then click on the result\nthat shows Amazon Comprehend.",
    "start": "70980",
    "end": "74610"
  },
  {
    "text": "Next, click on Launch Amazon Comprehend.",
    "start": "74610",
    "end": "77610"
  },
  {
    "text": "This takes you to a page\nwhere you can perform",
    "start": "77610",
    "end": "79800"
  },
  {
    "text": "real-time analysis on the input text.",
    "start": "79800",
    "end": "82350"
  },
  {
    "text": "As you can see, there\nare two analysis type,",
    "start": "82350",
    "end": "85260"
  },
  {
    "text": "Built-in and Custom,",
    "start": "85260",
    "end": "87120"
  },
  {
    "text": "and today, we'll focus on\nthe Built-in analysis type",
    "start": "87120",
    "end": "89670"
  },
  {
    "text": "which leverages the pre-trained models.",
    "start": "89670",
    "end": "91619"
  },
  {
    "text": "You will notice that a sample text is",
    "start": "92670",
    "end": "94320"
  },
  {
    "text": "already available for analysis.",
    "start": "94320",
    "end": "96030"
  },
  {
    "text": "Let's click the Analyze button now.",
    "start": "96030",
    "end": "97923"
  },
  {
    "text": "Once the analysis is completed,",
    "start": "100290",
    "end": "102000"
  },
  {
    "text": "Amazon Comprehend presents\nthe insights gained",
    "start": "102000",
    "end": "104310"
  },
  {
    "text": "from the input text.",
    "start": "104310",
    "end": "105780"
  },
  {
    "text": "Let's start with the Entities tab first.",
    "start": "105780",
    "end": "108510"
  },
  {
    "text": "An entity is textual\nreference to the unique name",
    "start": "108510",
    "end": "110880"
  },
  {
    "text": "of a real-world object,\nsuch as people, places,",
    "start": "110880",
    "end": "113340"
  },
  {
    "text": "and commercial items.",
    "start": "113340",
    "end": "114960"
  },
  {
    "text": "Comprehend can recognize up\nto nine different entities",
    "start": "114960",
    "end": "117299"
  },
  {
    "text": "in the input documents.",
    "start": "117300",
    "end": "119070"
  },
  {
    "text": "Here, you can see Amazon\nComprehend API call returned",
    "start": "119070",
    "end": "121650"
  },
  {
    "text": "the pre-trained entities\nand its Type from the text",
    "start": "121650",
    "end": "124470"
  },
  {
    "text": "along with the Confidence score.",
    "start": "124470",
    "end": "126870"
  },
  {
    "text": "The Confidence score is a\nnumber between zero and one.",
    "start": "126870",
    "end": "129840"
  },
  {
    "text": "Low Confidence score means\nthat the service's confidence",
    "start": "129840",
    "end": "132450"
  },
  {
    "text": "in its output is low.",
    "start": "132450",
    "end": "134129"
  },
  {
    "text": "Conversely, if the service is\nhighly confident of its output",
    "start": "134130",
    "end": "137520"
  },
  {
    "text": "the score will be closer to one.",
    "start": "137520",
    "end": "139920"
  },
  {
    "text": "Next, we'll look at Key phrases tab.",
    "start": "139920",
    "end": "142050"
  },
  {
    "text": "A key phrase is a string\ncontaining a noun phrase",
    "start": "142050",
    "end": "144570"
  },
  {
    "text": "and the modifier, such as adjectives",
    "start": "144570",
    "end": "146670"
  },
  {
    "text": "that describes a particular thing.",
    "start": "146670",
    "end": "148800"
  },
  {
    "text": "Here, you can see the list of noun phrases",
    "start": "148800",
    "end": "151350"
  },
  {
    "text": "and its modifier that\nAmazon Comprehend detected,",
    "start": "151350",
    "end": "153990"
  },
  {
    "text": "and the associated Confidence level.",
    "start": "153990",
    "end": "156390"
  },
  {
    "text": "The next tab is Language.",
    "start": "156390",
    "end": "158220"
  },
  {
    "text": "This tab shows the\ndominant language of text",
    "start": "158220",
    "end": "160530"
  },
  {
    "text": "and Amazon Comprehend's\nlevel of confidence",
    "start": "160530",
    "end": "162660"
  },
  {
    "text": "that it has detected the\ndominant language correctly.",
    "start": "162660",
    "end": "165600"
  },
  {
    "text": "In this case, it correctly\nidentified English",
    "start": "165600",
    "end": "167760"
  },
  {
    "text": "as the dominant language\nwith a high confidence score",
    "start": "167760",
    "end": "170159"
  },
  {
    "text": "of 0.99.",
    "start": "170160",
    "end": "172050"
  },
  {
    "text": "Amazon Comprehend can now\nrecognize 100 different languages.",
    "start": "172050",
    "end": "176430"
  },
  {
    "text": "The PII tab lists entities\nin your input text",
    "start": "176430",
    "end": "179280"
  },
  {
    "text": "that contain Personally\nIdentifiable Information, or PII.",
    "start": "179280",
    "end": "182850"
  },
  {
    "text": "A PII entity is a textual\nreference to personal data",
    "start": "182850",
    "end": "185760"
  },
  {
    "text": "that could be used to\nidentify an individual.",
    "start": "185760",
    "end": "188250"
  },
  {
    "text": "Examples include an address,\nbank account number,",
    "start": "188250",
    "end": "190710"
  },
  {
    "text": "or phone number.",
    "start": "190710",
    "end": "192270"
  },
  {
    "text": "There are two different modes here.",
    "start": "192270",
    "end": "194430"
  },
  {
    "text": "The Offset analysis mode\nidentifies the location",
    "start": "194430",
    "end": "197040"
  },
  {
    "text": "of PII in your text documents.",
    "start": "197040",
    "end": "199560"
  },
  {
    "text": "The Labels analysis mode\nchecks for the presence of PII",
    "start": "199560",
    "end": "202680"
  },
  {
    "text": "in your text document\nand returns the labels",
    "start": "202680",
    "end": "205049"
  },
  {
    "text": "of identified PII entity types.",
    "start": "205050",
    "end": "207303"
  },
  {
    "text": "As you can see in the Offset mode,",
    "start": "208200",
    "end": "210480"
  },
  {
    "text": "Amazon Comprehend\nreturned the actual values",
    "start": "210480",
    "end": "213000"
  },
  {
    "text": "of the PII entity types, such\nas name, credit card number,",
    "start": "213000",
    "end": "216840"
  },
  {
    "text": "bank account number, et cetera.",
    "start": "216840",
    "end": "218390"
  },
  {
    "text": "When we toggle to the Labels mode,",
    "start": "220200",
    "end": "222540"
  },
  {
    "text": "the API return just the entity Type,",
    "start": "222540",
    "end": "224730"
  },
  {
    "text": "such as name, email, bank account number,",
    "start": "224730",
    "end": "226890"
  },
  {
    "text": "and corresponding Confidence score.",
    "start": "226890",
    "end": "229319"
  },
  {
    "text": "The Sentiment tab shows the\ndominant sentiment of the text.",
    "start": "229320",
    "end": "232440"
  },
  {
    "text": "Sentiment can be rated\nas neutral, positive,",
    "start": "232440",
    "end": "235110"
  },
  {
    "text": "negative, or mixed.",
    "start": "235110",
    "end": "237030"
  },
  {
    "text": "In this scenario, you can see",
    "start": "237030",
    "end": "238620"
  },
  {
    "text": "Amazon Comprehend detected\nthe sentiment as Neutral",
    "start": "238620",
    "end": "241349"
  },
  {
    "text": "with a high confidence score of 0.98.",
    "start": "241350",
    "end": "243993"
  },
  {
    "text": "And finally, the Syntax\ntab shows a breakdown",
    "start": "245640",
    "end": "248100"
  },
  {
    "text": "of each element in the text\nalong with its Part of speech,",
    "start": "248100",
    "end": "250830"
  },
  {
    "text": "such as proper noun,\nverb, pronoun, et cetera,",
    "start": "250830",
    "end": "253800"
  },
  {
    "text": "and the associated Confidence score.",
    "start": "253800",
    "end": "256380"
  },
  {
    "text": "You can use the results of\nthe syntactical analysis",
    "start": "256380",
    "end": "258930"
  },
  {
    "text": "to gain a richer\nunderstanding of the content",
    "start": "258930",
    "end": "260850"
  },
  {
    "text": "of your documents.",
    "start": "260850",
    "end": "262590"
  },
  {
    "text": "Next, let's explore ways\nto programmatically access",
    "start": "262590",
    "end": "265680"
  },
  {
    "text": "the pre-trained APIs using the Python SDK.",
    "start": "265680",
    "end": "268143"
  },
  {
    "text": "Here we are showing a Jupyter Notebook,",
    "start": "269340",
    "end": "271020"
  },
  {
    "text": "which provides step-by-step instructions",
    "start": "271020",
    "end": "272910"
  },
  {
    "text": "to use Amazon Comprehend\nAPIs to uncover information",
    "start": "272910",
    "end": "275850"
  },
  {
    "text": "in unstructured data.",
    "start": "275850",
    "end": "277500"
  },
  {
    "text": "We will explore six pre-trained APIs",
    "start": "277500",
    "end": "280020"
  },
  {
    "text": "identifying named entities,\nextracting key phrases,",
    "start": "280020",
    "end": "283199"
  },
  {
    "text": "identifying the dominant language,",
    "start": "283200",
    "end": "284970"
  },
  {
    "text": "determining emotional\nsentiment, determining syntax,",
    "start": "284970",
    "end": "287970"
  },
  {
    "text": "and detecting Personally\nIdentifiable Information, or PII.",
    "start": "287970",
    "end": "291543"
  },
  {
    "text": "Let's look at the cells in\nthis notebook one by one,",
    "start": "292470",
    "end": "294630"
  },
  {
    "text": "and their outputs.",
    "start": "294630",
    "end": "296310"
  },
  {
    "text": "We start by importing Boto3.",
    "start": "296310",
    "end": "298590"
  },
  {
    "text": "Boto3 is the name of\nthe Python SDK for AWS.",
    "start": "298590",
    "end": "302310"
  },
  {
    "text": "Boto3 makes it easy to integrate\nyour Python applications,",
    "start": "302310",
    "end": "305669"
  },
  {
    "text": "library, or script with AWS services.",
    "start": "305670",
    "end": "308340"
  },
  {
    "text": "We will use this SDK to\nwork with Amazon Comprehend",
    "start": "308340",
    "end": "310830"
  },
  {
    "text": "pre-trained APIs in this notebook.",
    "start": "310830",
    "end": "312573"
  },
  {
    "text": "Next, we specify the region",
    "start": "313830",
    "end": "315330"
  },
  {
    "text": "where this notebook\ninstance is running in,",
    "start": "315330",
    "end": "317759"
  },
  {
    "text": "import other packages, such\nas JSON, Pandas, and NumPy,",
    "start": "317760",
    "end": "321750"
  },
  {
    "text": "and then use Boto3 SDK to create\na Comprehend client object.",
    "start": "321750",
    "end": "326250"
  },
  {
    "text": "Next, we'll look at the input text.",
    "start": "326250",
    "end": "328260"
  },
  {
    "text": "Here, you will see the same sample_text",
    "start": "328260",
    "end": "330210"
  },
  {
    "text": "that was used in the\nAmazon Comprehend console.",
    "start": "330210",
    "end": "333180"
  },
  {
    "text": "First up, we'll start with\nidentifying named entities.",
    "start": "333180",
    "end": "336509"
  },
  {
    "text": "Named entities can be real-world object",
    "start": "336510",
    "end": "338400"
  },
  {
    "text": "denoted with a proper name.",
    "start": "338400",
    "end": "339903"
  },
  {
    "text": "In this cell, we have\ninvoked DetectEntities API",
    "start": "341070",
    "end": "343620"
  },
  {
    "text": "by the sample_text and the\nLanguageCode of the text,",
    "start": "343620",
    "end": "346830"
  },
  {
    "text": "in this case, English.",
    "start": "346830",
    "end": "348392"
  },
  {
    "text": "The response is a JSON output\ncontaining Entities array.",
    "start": "349620",
    "end": "353003"
  },
  {
    "text": "Each object in the array has\nthe location of the entity",
    "start": "353970",
    "end": "356490"
  },
  {
    "text": "in the text identified by the\nBegin and EndOffset value,",
    "start": "356490",
    "end": "360720"
  },
  {
    "text": "the confidence Score of the model,",
    "start": "360720",
    "end": "363360"
  },
  {
    "text": "the actual Text, and the Type of entity,",
    "start": "363360",
    "end": "366330"
  },
  {
    "text": "such as person, organization,\nquantity, et cetera.",
    "start": "366330",
    "end": "369930"
  },
  {
    "text": "The output of the next\ncell shows the same output",
    "start": "369930",
    "end": "372570"
  },
  {
    "text": "in a more human readable\nformat, as shown here.",
    "start": "372570",
    "end": "376470"
  },
  {
    "text": "Next, we use the same text\nto detect key phrases.",
    "start": "376470",
    "end": "379590"
  },
  {
    "text": "Here, we have invoked DetectKeyPhrases API",
    "start": "379590",
    "end": "382350"
  },
  {
    "text": "by passing the sample_text\nand the LanguageCode.",
    "start": "382350",
    "end": "384750"
  },
  {
    "text": "The API response is an\narray of KeyPhrases,",
    "start": "385827",
    "end": "389070"
  },
  {
    "text": "and each object contains\nthe Begin and EndOffsets,",
    "start": "389070",
    "end": "392010"
  },
  {
    "text": "the confidence Scores,\nand the actual key phrase.",
    "start": "392010",
    "end": "395580"
  },
  {
    "text": "Let's keep cruising, and next\nup is language detection.",
    "start": "395580",
    "end": "398639"
  },
  {
    "text": "Here, we have invoked\nDetectDominantLanguage API,",
    "start": "398640",
    "end": "401400"
  },
  {
    "text": "and passed the sample_text.",
    "start": "401400",
    "end": "402750"
  },
  {
    "text": "If more than one language is detected,",
    "start": "403590",
    "end": "405570"
  },
  {
    "text": "the API returns detected language",
    "start": "405570",
    "end": "407550"
  },
  {
    "text": "and its corresponding score.",
    "start": "407550",
    "end": "408992"
  },
  {
    "text": "The response is an array of\nlanguages, as shown here.",
    "start": "410100",
    "end": "413790"
  },
  {
    "text": "The API has correctly identified English",
    "start": "413790",
    "end": "416130"
  },
  {
    "text": "as the dominant language",
    "start": "416130",
    "end": "417480"
  },
  {
    "text": "with a high confidence Score of 99%.",
    "start": "417480",
    "end": "420503"
  },
  {
    "text": "Again, we show the same output\nin a human readable format.",
    "start": "421500",
    "end": "425520"
  },
  {
    "text": "Next is sentiment analysis,",
    "start": "425520",
    "end": "427080"
  },
  {
    "text": "and the API used is\ncalled DetectSentiment.",
    "start": "427080",
    "end": "431129"
  },
  {
    "text": "As you can see by now,\nthe API input follows",
    "start": "431130",
    "end": "433590"
  },
  {
    "text": "the familiar pattern of\npassing the sample_text",
    "start": "433590",
    "end": "436020"
  },
  {
    "text": "along with the LanguageCode.",
    "start": "436020",
    "end": "437827"
  },
  {
    "text": "The response returns the Sentiment value.",
    "start": "439230",
    "end": "442050"
  },
  {
    "text": "In this case, the value is NEUTRAL,",
    "start": "442050",
    "end": "444300"
  },
  {
    "text": "along with the SentimentScore,",
    "start": "444300",
    "end": "446227"
  },
  {
    "text": "which is similar to the confidence score,",
    "start": "446227",
    "end": "447870"
  },
  {
    "text": "and has values ranging\nbetween zero and one",
    "start": "447870",
    "end": "450660"
  },
  {
    "text": "assigned to each sentiment.",
    "start": "450660",
    "end": "452163"
  },
  {
    "text": "You can see the Neutral sentiment\nhas the highest score here",
    "start": "453570",
    "end": "456420"
  },
  {
    "text": "of approximately 0.98.",
    "start": "456420",
    "end": "458253"
  },
  {
    "text": "Here is the reformatted output",
    "start": "460080",
    "end": "462000"
  },
  {
    "text": "showing the Sentiment value",
    "start": "462000",
    "end": "463320"
  },
  {
    "text": "and the corresponding sentiment Score.",
    "start": "463320",
    "end": "466050"
  },
  {
    "text": "Next is syntax detection.",
    "start": "466050",
    "end": "467639"
  },
  {
    "text": "It is used to identify the part of speech",
    "start": "467640",
    "end": "469830"
  },
  {
    "text": "for each word in the text.",
    "start": "469830",
    "end": "472020"
  },
  {
    "text": "Here, we have invoked DetectSyntax API.",
    "start": "472020",
    "end": "475052"
  },
  {
    "text": "The API response returns\nan array of syntax tokens",
    "start": "476010",
    "end": "480030"
  },
  {
    "text": "with each member element\nof the array consisting",
    "start": "480030",
    "end": "482340"
  },
  {
    "text": "of Offsets, PartOfSpeech Score and Tag",
    "start": "482340",
    "end": "486180"
  },
  {
    "text": "to denote the value, such as interjection,",
    "start": "486180",
    "end": "488370"
  },
  {
    "text": "proper noun, verb, et cetera,",
    "start": "488370",
    "end": "491220"
  },
  {
    "text": "along with the Text and the TokenId.",
    "start": "491220",
    "end": "493443"
  },
  {
    "text": "Again, you can see the readable\nversion of the same output",
    "start": "495060",
    "end": "497730"
  },
  {
    "text": "with the Text, Part of Speech,\nand corresponding Score.",
    "start": "497730",
    "end": "500853"
  },
  {
    "text": "Finally, we look",
    "start": "502980",
    "end": "503813"
  },
  {
    "text": "at Personally Identifiable\nInformation detection.",
    "start": "503813",
    "end": "506520"
  },
  {
    "text": "Here, we have invoked\nDetectPiiEntities API",
    "start": "506520",
    "end": "509819"
  },
  {
    "text": "to detect the PII information\nin the input text,",
    "start": "509820",
    "end": "512340"
  },
  {
    "text": "such as name, address,\nbank account number.",
    "start": "512340",
    "end": "514713"
  },
  {
    "text": "Following the familiar pattern,",
    "start": "515790",
    "end": "517259"
  },
  {
    "text": "the API response returns\nthe Offset of the PII value,",
    "start": "517260",
    "end": "520830"
  },
  {
    "text": "the confidence Score, and\nthe corresponding PII Type.",
    "start": "520830",
    "end": "524463"
  },
  {
    "text": "Here is the same output\nin a readable format.",
    "start": "525930",
    "end": "528873"
  },
  {
    "text": "We can also use ContainsPiiEntities API",
    "start": "530790",
    "end": "533699"
  },
  {
    "text": "to label documents that contain PII.",
    "start": "533700",
    "end": "536640"
  },
  {
    "text": "As you can see in the output,",
    "start": "536640",
    "end": "538140"
  },
  {
    "text": "the API response returned\nfive labels identified",
    "start": "538140",
    "end": "540870"
  },
  {
    "text": "from the text and the confidence\nScore for each one of them.",
    "start": "540870",
    "end": "544053"
  },
  {
    "text": "And here is the reformatted\nversion of the same output.",
    "start": "545100",
    "end": "548819"
  },
  {
    "text": "This brings us to the\nend of this notebook.",
    "start": "548820",
    "end": "550890"
  },
  {
    "text": "In this notebook, we learned how to use",
    "start": "550890",
    "end": "552720"
  },
  {
    "text": "Amazon Comprehend pre-trained\nAPIs for various scenarios",
    "start": "552720",
    "end": "556050"
  },
  {
    "text": "and invoke them using AWS Python SDK.",
    "start": "556050",
    "end": "558423"
  },
  {
    "text": "Thank you very much for\nwatching this video.",
    "start": "559590",
    "end": "561240"
  },
  {
    "text": "I hope you enjoyed learning",
    "start": "561240",
    "end": "562500"
  },
  {
    "text": "about Amazon Comprehend\npre-trained models and APIs.",
    "start": "562500",
    "end": "565680"
  },
  {
    "text": "Go ahead and check out\nthe resources shown here",
    "start": "565680",
    "end": "567810"
  },
  {
    "text": "to explore further.",
    "start": "567810",
    "end": "569490"
  },
  {
    "text": "Please keep an eye for upcoming\nvideos on Amazon Comprehend",
    "start": "569490",
    "end": "572550"
  },
  {
    "text": "and how you can use it to\nsolve business problems.",
    "start": "572550",
    "end": "575493"
  }
]