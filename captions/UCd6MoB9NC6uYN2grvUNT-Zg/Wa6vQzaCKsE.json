[
  {
    "start": "0",
    "end": "30000"
  },
  {
    "text": "we good okay cool so thanks for coming uh middle of the",
    "start": "799",
    "end": "6399"
  },
  {
    "text": "second day i know everyone's getting a little tired but uh great to see a nice full room uh my name is grant mccallister",
    "start": "6399",
    "end": "12000"
  },
  {
    "text": "and today i am going to talk to you about best practices with amazon's relational database services are rds and",
    "start": "12000",
    "end": "19039"
  },
  {
    "text": "i'm very happy to have with me eli white who's going to share his experiences with aws and rds after i run through some of",
    "start": "19039",
    "end": "26560"
  },
  {
    "text": "the best practices so let's jump right in why do you want to do best practices",
    "start": "26560",
    "end": "32078"
  },
  {
    "start": "30000",
    "end": "30000"
  },
  {
    "text": "well my dog moose thinks they're really cool so you know that's one reason but i really think you know knowing best",
    "start": "32079",
    "end": "37680"
  },
  {
    "text": "practice is about being efficient with you know your your spend with your time",
    "start": "37680",
    "end": "43040"
  },
  {
    "text": "and really keeping you away from meeting with the angry boss right someone coming into your office whether it's the ceo or",
    "start": "43040",
    "end": "48399"
  },
  {
    "text": "the cto or whatever and saying why did we have this problem and sometimes they're not preventable but",
    "start": "48399",
    "end": "53600"
  },
  {
    "text": "other times they are if you just know you know some more best practices",
    "start": "53600",
    "end": "59199"
  },
  {
    "start": "59000",
    "end": "59000"
  },
  {
    "text": "so a lot of times people say why would i want to manage relational database and i you know i go back to we looked about",
    "start": "59199",
    "end": "65760"
  },
  {
    "text": "five years ago at the what was going on with databases at the time this was really around the time nosql",
    "start": "65760",
    "end": "71280"
  },
  {
    "text": "was starting even though it didn't have that name and we really liked that idea so we invested in and today we have products",
    "start": "71280",
    "end": "77200"
  },
  {
    "text": "like dynamodb but we also found that people still needed relational databases",
    "start": "77200",
    "end": "82400"
  },
  {
    "text": "developers still needed that functionality but when we talked to them they were really not that happy with relational databases",
    "start": "82400",
    "end": "88479"
  },
  {
    "text": "and a lot of it came down to the management of them the time to provision a whole bunch of different problems so that's what we set out to solve and",
    "start": "88479",
    "end": "94880"
  },
  {
    "text": "so i'm just going to run through some of the things that we do with rds to kind of help that along so one of the problems is that when you",
    "start": "94880",
    "end": "101360"
  },
  {
    "text": "used to buy a server you got the cpu memory storage iops it was all bundled together you had to make a commitment",
    "start": "101360",
    "end": "106640"
  },
  {
    "text": "for three years now with the you know with basically the cloud with aws and rds you get to split",
    "start": "106640",
    "end": "112000"
  },
  {
    "text": "those apart and you get to scale them independently so if you want more cpu less iops more",
    "start": "112000",
    "end": "117040"
  },
  {
    "text": "storage whatever you can do that so it's really nice and flexible the other thing of course is backups",
    "start": "117040",
    "end": "122799"
  },
  {
    "text": "everybody needs backups kind of part of running a database and of course they want restores and you know i know everyone says this is pretty",
    "start": "122799",
    "end": "129200"
  },
  {
    "text": "common but you know restores that work and work effectively for those of you that grew up on tape drives and tape libraries",
    "start": "129200",
    "end": "134959"
  },
  {
    "text": "that were always jamming up and didn't work you know doing restores on a regular basis is actually something novel",
    "start": "134959",
    "end": "140319"
  },
  {
    "text": "um you know back then so it's a great feature to be able to to have in rds one of the other big ones",
    "start": "140319",
    "end": "146640"
  },
  {
    "text": "that we really like and that people really said is they wanted high availability and they wanted the ability to have a primary and secondary replicated with",
    "start": "146640",
    "end": "153599"
  },
  {
    "text": "synchronous replication they wanted to be able to fail over between them when problems happened they wanted this to be quick",
    "start": "153599",
    "end": "159920"
  },
  {
    "text": "they wanted especially with mysql to be able to use read replicas to do that kind of replication to increase read",
    "start": "159920",
    "end": "165040"
  },
  {
    "text": "scaling so we did that and of course one of the keys to our services they didn't want this with some new",
    "start": "165040",
    "end": "170959"
  },
  {
    "text": "crazy relational database they wanted the things that they were using today you know the customers said look i use",
    "start": "170959",
    "end": "177280"
  },
  {
    "text": "oracle i use my sql i use sql server that's what i want to use so that's what we provided today with rds",
    "start": "177280",
    "end": "184159"
  },
  {
    "text": "and of course by default we want this secure just because you come to the cloud doesn't mean you you want to give",
    "start": "184159",
    "end": "189680"
  },
  {
    "text": "up security so really we've tried to make a very secure relational database service so that you know which really help you",
    "start": "189680",
    "end": "196560"
  },
  {
    "text": "to secure your data so let's get right into best practices so for those of you that run databases",
    "start": "196560",
    "end": "203040"
  },
  {
    "start": "199000",
    "end": "199000"
  },
  {
    "text": "you know that disk performance can like kill your database or make it great if you've got great disk performance",
    "start": "203040",
    "end": "208640"
  },
  {
    "text": "you might have other problems but if you have bad disk performance you're going to have a lot of problems so we really think that our",
    "start": "208640",
    "end": "214319"
  },
  {
    "text": "newest offering provisioned iops or pi ops where you basically provision the amount of ios per second that you want",
    "start": "214319",
    "end": "220000"
  },
  {
    "text": "is really key to having a good experience with a database it gives you a great level of consistency and it's really when i say",
    "start": "220000",
    "end": "226480"
  },
  {
    "text": "production equals pi unless you're just doing something that's like batch oriented or something where you don't care about latency",
    "start": "226480",
    "end": "232080"
  },
  {
    "text": "you really want to think about using provisioned apps with rds and even if you're not on rds if you're just using ec2 and ebs or on your database i would",
    "start": "232080",
    "end": "238560"
  },
  {
    "text": "really suggest using a pi ops now one of the things that some",
    "start": "238560",
    "end": "243680"
  },
  {
    "text": "folks don't notice about provision to iops is that there's actually a combination between",
    "start": "243680",
    "end": "248720"
  },
  {
    "text": "concurrency and latency and in this example between your application and your database right if you're doing a round trip every one",
    "start": "248720",
    "end": "256239"
  },
  {
    "text": "millisecond it means that that one thread can only do a thousand transactions per second doesn't matter how hard it pushes",
    "start": "256239",
    "end": "262639"
  },
  {
    "text": "because it's just the inherent latency now the only way to get more tps is to have more",
    "start": "262639",
    "end": "268080"
  },
  {
    "text": "threads so even though you know you can buy a very big server and you can put a lot of",
    "start": "268080",
    "end": "273199"
  },
  {
    "text": "pi ops on it but unless you're going to have enough concurrency you actually won't see the results so sometimes people come to us and say",
    "start": "273199",
    "end": "279040"
  },
  {
    "text": "i wasn't able to use everything and it's partially because they were only running like five threads so let's actually look at that in detail",
    "start": "279040",
    "end": "285440"
  },
  {
    "start": "284000",
    "end": "284000"
  },
  {
    "text": "so this is cloudwatch for those of you not familiar with it and that's uh the monitoring system that we use with rds and with ec2 in general",
    "start": "285440",
    "end": "292880"
  },
  {
    "text": "and this is one of the metrics on read iops so in this instance i've created a database instance that has",
    "start": "292880",
    "end": "298880"
  },
  {
    "text": "three thousand provision apps and that's that orange line that you can see on the graph so i started a workload and you can see",
    "start": "298880",
    "end": "305440"
  },
  {
    "text": "in the blue box i had basically one thread running and i'm at about 700 iops",
    "start": "305440",
    "end": "311039"
  },
  {
    "text": "so not bad and because there's a little bit of caching going on so i'm not getting like the full amount that you might expect like a",
    "start": "311039",
    "end": "316479"
  },
  {
    "text": "thousand or so but i increase that to four and i get 2200 so i get a really good",
    "start": "316479",
    "end": "321520"
  },
  {
    "text": "increase so you can see right there that you know you actually have to have quite a bit of concurrency to see the amount of iops you'd expect",
    "start": "321520",
    "end": "328000"
  },
  {
    "text": "now notice when i go to 16 threads i only get 3 000 because that's what i've provisioned i don't get more i don't you",
    "start": "328000",
    "end": "333919"
  },
  {
    "text": "know and you know it's good but of course if you were seeing this in your own application you might want to think well",
    "start": "333919",
    "end": "338960"
  },
  {
    "text": "maybe i need to scale up the amount of iops that i have now let's go look at the latency for",
    "start": "338960",
    "end": "344000"
  },
  {
    "start": "343000",
    "end": "343000"
  },
  {
    "text": "that same workload now you notice with the one and four threads my latency is very good so on the left hand side there sorry about the",
    "start": "344000",
    "end": "349919"
  },
  {
    "text": "way the metric shows up i'm still bugging the guys about making this a little better it's in it's in seconds which is not normally what we",
    "start": "349919",
    "end": "355680"
  },
  {
    "text": "think about for uh for disk latency but you can see the bottom most ones are both point zero one",
    "start": "355680",
    "end": "362000"
  },
  {
    "text": "the top point zero one is actually one millisecond so that's the line you can think of as one millisecond",
    "start": "362000",
    "end": "367039"
  },
  {
    "text": "there so both the one and four threads below one millisecond right that's actually really fantastic read latency",
    "start": "367039",
    "end": "373280"
  },
  {
    "text": "very on par with ssds but you notice as soon as i went to 16 threads",
    "start": "373280",
    "end": "378319"
  },
  {
    "text": "i went up to around four and a half milliseconds and you'll say well wait why why is that such a large degradation",
    "start": "378319",
    "end": "384160"
  },
  {
    "text": "well think about those 16 threads if i was using almost all the i o with four threads probably the fifth thread",
    "start": "384160",
    "end": "390720"
  },
  {
    "text": "i was already at three thousand so those i love other 11 threads are essentially way to have to wait for more i o to come",
    "start": "390720",
    "end": "397039"
  },
  {
    "text": "to happen right so they're going to get delayed and that's where you're going to see the higher latency so if you're seeing this kind of latency",
    "start": "397039",
    "end": "402880"
  },
  {
    "text": "when you're using provision iops it means you're probably your maximum you probably want to think about going to a higher level so you can get back down to",
    "start": "402880",
    "end": "408400"
  },
  {
    "text": "a latency that your application is going to like now you may also see high latency on",
    "start": "408400",
    "end": "413840"
  },
  {
    "text": "provision iops if you're using a smaller instant class some of the instance classes you'll see with rds and ec2 are what we call ebs",
    "start": "413840",
    "end": "421120"
  },
  {
    "text": "optimize and this is where you get a one gig dedicated channel for ebs so it allows you to make",
    "start": "421120",
    "end": "426240"
  },
  {
    "text": "sure you can get all the ios that you want done but if you can also run provisional apps with a micro instance",
    "start": "426240",
    "end": "431840"
  },
  {
    "text": "but of course that instance is not going to have the same amount of network capacity of necessarily to drive three or ten thousand iops so you really",
    "start": "431840",
    "end": "437919"
  },
  {
    "text": "want to choose your you know your size of your instance based on you know how much iops you want to do",
    "start": "437919",
    "end": "445360"
  },
  {
    "start": "445000",
    "end": "445000"
  },
  {
    "text": "so one of the other best practices is really about designing for availability and for us rds multi-easy is the product",
    "start": "446960",
    "end": "454560"
  },
  {
    "text": "that we we think is really best practice so we have regions all over the world and in each one of them we have at least",
    "start": "454560",
    "end": "460639"
  },
  {
    "text": "two availability zones or azs as we call them and they're kind of like data centers but they're more of a logical construct",
    "start": "460639",
    "end": "466319"
  },
  {
    "text": "from a they don't exactly fit necessarily in one building but they are separated and they are independent so in this",
    "start": "466319",
    "end": "472160"
  },
  {
    "text": "example we have az1 and az2 which aren't real names for ones but i just thought i'd keep it simple and a lot of folks when they start off",
    "start": "472160",
    "end": "478720"
  },
  {
    "text": "we'll start with their application in green there and the database in orange in one availability zone because that's an inexpensive low latency way to build",
    "start": "478720",
    "end": "485520"
  },
  {
    "text": "it but the problem is that it leads you open to if there's a service disruption and availability zone one or one of those",
    "start": "485520",
    "end": "491039"
  },
  {
    "text": "machines fails you're gonna have downtime so we really recommend that you have a secondary in a",
    "start": "491039",
    "end": "496560"
  },
  {
    "text": "in an alternate location in a second a z here and sometimes people only do the",
    "start": "496560",
    "end": "501840"
  },
  {
    "text": "database but we also recommend that you do the application as well in that second availability zone to get you higher availability now the",
    "start": "501840",
    "end": "508479"
  },
  {
    "text": "thing that we kind of do different than some other folks that do sort of this kind of replication is ours is physical synchronous replication",
    "start": "508479",
    "end": "514399"
  },
  {
    "text": "between the primary and the secondary and why is this important well physical is much more efficient",
    "start": "514399",
    "end": "520719"
  },
  {
    "text": "than logical because when you think about logical replication you actually have to replace statements so if you're used to my sql replication",
    "start": "520719",
    "end": "527600"
  },
  {
    "text": "you're actually like parsing it you're re putting it through the buffer cache you're doing a lot of work",
    "start": "527600",
    "end": "532640"
  },
  {
    "text": "just to basically do the same thing on the secondary again with physical all you're doing is applying the delta changes in a physical manner it's very",
    "start": "532640",
    "end": "538800"
  },
  {
    "text": "efficient it also can happen in parallel which is not the case with logical replication logical replication it has to happen in",
    "start": "538800",
    "end": "546240"
  },
  {
    "text": "a single thread so you can imagine if on your primary you're doing 100 threads at once and",
    "start": "546240",
    "end": "551360"
  },
  {
    "text": "your replica is only doing one thread sooner or later you're going to have a problem so physical gets around that and of",
    "start": "551360",
    "end": "558399"
  },
  {
    "text": "course synchronous is the real key here synchronous means when you get a commit",
    "start": "558399",
    "end": "563839"
  },
  {
    "text": "acknowledgement back to your application you know you're durable in two places you've got a good level of durability and consistency there and that's really",
    "start": "563839",
    "end": "570560"
  },
  {
    "text": "important for the next step which is to allow you to fail over when there's a problem because if you're using a synchronous replication",
    "start": "570560",
    "end": "576720"
  },
  {
    "text": "you don't know if all the data is over on the secondary so if you fail over you've got to be able to tolerate data loss",
    "start": "576720",
    "end": "581920"
  },
  {
    "text": "and we think yes there are some applications where that's true but there's a lot where you don't if you were taking orders from customers",
    "start": "581920",
    "end": "587600"
  },
  {
    "text": "you don't want to lose the last 10 orders you got i mean that's not good for your customer experience so this this allows you to protect",
    "start": "587600",
    "end": "593760"
  },
  {
    "text": "against data loss when you do a failover and it can be fast because you don't have to make any decisions about whether or not you're going to lose data",
    "start": "593760",
    "end": "600480"
  },
  {
    "text": "and this in this case i showed just basically a secondary failing just the database server or the",
    "start": "600480",
    "end": "606800"
  },
  {
    "text": "original primary failing but if the whole availability zone is disrupted this still allows you to go",
    "start": "606800",
    "end": "612079"
  },
  {
    "text": "ahead and run so this is kind of the best practice from a basic setup for availability and durability and of",
    "start": "612079",
    "end": "619360"
  },
  {
    "text": "course what we do is sort of the managed service we also maintain all this so you know once that uh we'll repair that box we'll repair",
    "start": "619360",
    "end": "625760"
  },
  {
    "text": "those az's we'll put it all back into a setup that again is highly available and highly durable",
    "start": "625760",
    "end": "632320"
  },
  {
    "text": "now the other means that you can get that sort of an add-on to multi-ac is you can really think about using read replicas to increase your read",
    "start": "632320",
    "end": "638480"
  },
  {
    "start": "634000",
    "end": "634000"
  },
  {
    "text": "availability and your scalability so we have the same sort of setup the database there and multi-az and the",
    "start": "638480",
    "end": "644079"
  },
  {
    "text": "application in green and we add a read replica but notice that's asynchronous replication so this",
    "start": "644079",
    "end": "650240"
  },
  {
    "text": "is using mysql replication technology so what that means though is since it's asynchronous that data may be a little",
    "start": "650240",
    "end": "656560"
  },
  {
    "text": "bit behind could be a second behind could be a minute behind all depends on your transaction sizes so how's your application going to",
    "start": "656560",
    "end": "662880"
  },
  {
    "text": "understand what to do with that data if it's behind well really you want to logically think about breaking your",
    "start": "662880",
    "end": "668880"
  },
  {
    "text": "application into different chunks that have different requirements so the section that needs to write",
    "start": "668880",
    "end": "674720"
  },
  {
    "text": "it's going to need to go to the master if you want to reread those writes you just saw you want to go to the master but if",
    "start": "674720",
    "end": "680240"
  },
  {
    "text": "you're fine with seeing a slightly delayed version you can have that in the blue area and my example of this is if you had a",
    "start": "680240",
    "end": "686959"
  },
  {
    "text": "an application where you were writing blogs and delivering those to customers in that case the writing of the blog and",
    "start": "686959",
    "end": "693120"
  },
  {
    "text": "you know and the modifications would all happen in that nice green section so that it's all consistent you can see your changes",
    "start": "693120",
    "end": "698480"
  },
  {
    "text": "but for the people coming in viewing the blogs there's no real reason to you know have it happen in the green",
    "start": "698480",
    "end": "704160"
  },
  {
    "text": "section you can have it over in the blue section and then when that when you have a big growth in the number of people coming to see your blog because maybe you're",
    "start": "704160",
    "end": "710079"
  },
  {
    "text": "commenting on the election and you know that's the big hot thing today or maybe it's on redshift you know then you just add",
    "start": "710079",
    "end": "716240"
  },
  {
    "text": "another read replica and you've got scaling right there so you know this is pretty common a lot of people do this but",
    "start": "716240",
    "end": "722240"
  },
  {
    "text": "the thing that they don't think about is sort of read availability so let's say you have your primary and",
    "start": "722240",
    "end": "727839"
  },
  {
    "text": "your second your primary fails and we're going to fail you over to the the secondary well there's a brief period where we have to switch the",
    "start": "727839",
    "end": "733360"
  },
  {
    "text": "cname and notify you to go point to the other uh machine during that time you're going to be unavailable now this is a very",
    "start": "733360",
    "end": "739600"
  },
  {
    "text": "short time usually a couple minutes but during that time if you have read replicas all your read traffic all that",
    "start": "739600",
    "end": "745440"
  },
  {
    "text": "blog reading will can still happen so you're still 100 read available even though you can't take rights",
    "start": "745440",
    "end": "751680"
  },
  {
    "text": "and then of course you know once that fails over in a couple minutes now you can take rights again so you know you can really architect your",
    "start": "751680",
    "end": "757120"
  },
  {
    "text": "application have sort of different availability between reads and writes one of the other things you can use it",
    "start": "757120",
    "end": "762240"
  },
  {
    "text": "for is upgrades so when you think about upgrading a database that happens you know probably on a yearly basis where you need to go to a new version",
    "start": "762240",
    "end": "768639"
  },
  {
    "text": "for security or features and that typically takes a number of minutes to upgrade your database again you can use the",
    "start": "768639",
    "end": "774399"
  },
  {
    "text": "read slaves to be available for read traffic and because you can have multiples of them you can upgrade one of those at a time",
    "start": "774399",
    "end": "780560"
  },
  {
    "text": "and you never have to be without any read replicas so both of those techniques are kind of",
    "start": "780560",
    "end": "786720"
  },
  {
    "start": "785000",
    "end": "785000"
  },
  {
    "text": "the best practices on general setup and i really like them and they cover a ton of availability and durability",
    "start": "786720",
    "end": "791839"
  },
  {
    "text": "but there are cases they don't cover for example if one of your users drops a table or",
    "start": "791839",
    "end": "797600"
  },
  {
    "text": "deletes a billion rows from you right uh all those replication techniques are just going to replicate the data between",
    "start": "797600",
    "end": "804000"
  },
  {
    "text": "the primary and the secondary or your read slave so all you got is a lot of copies of missing data instead of the data",
    "start": "804000",
    "end": "809680"
  },
  {
    "text": "and that's where backups really come in so you know folks tell me oh i don't need backups i can recreate the data and",
    "start": "809680",
    "end": "814720"
  },
  {
    "text": "what i tell them is when was the last time you tried that because what i found was that it's usually a lot tougher than",
    "start": "814720",
    "end": "820480"
  },
  {
    "text": "folks remember because they did it two years ago when they're you know when their setup was kind of easy and now it's more complex and they",
    "start": "820480",
    "end": "826639"
  },
  {
    "text": "haven't tried it so really we like backups for protecting against a lot of different failure scenarios",
    "start": "826639",
    "end": "831760"
  },
  {
    "text": "we have two methods we have an automated nightly backup with rds that picks up your backup every night and then does your logs every five",
    "start": "831760",
    "end": "838160"
  },
  {
    "text": "minutes so the maximum data loss would be those last couple minutes that you might miss the last log",
    "start": "838160",
    "end": "843680"
  },
  {
    "text": "and you can set the retention of this for up to 35 days and then if you set it to 35 days you can restore any time in that 35 days",
    "start": "843680",
    "end": "851199"
  },
  {
    "text": "any minute you can say well the user dropped it on tuesday at 1 pm i'm gonna go back to tuesday at",
    "start": "851199",
    "end": "856560"
  },
  {
    "text": "you know 12 59 and have all my data so that's you know it's a great thing to be able to do",
    "start": "856560",
    "end": "862959"
  },
  {
    "text": "we also allow you to set your backup window and you want to you know from best practice we find a lot of people just sort of",
    "start": "862959",
    "end": "868000"
  },
  {
    "text": "take the default we give them but i mean we just give you one in sort of the nighttime hours of the region you're in but i don't know your application you",
    "start": "868000",
    "end": "874560"
  },
  {
    "text": "could be doing stuff that peaks in the middle of the night so you really want to go and look at the periods that are lower for your",
    "start": "874560",
    "end": "880560"
  },
  {
    "text": "utilization and move your backup window to that period and i know that sounds really obvious but we still you know see a lot of it",
    "start": "880560",
    "end": "886880"
  },
  {
    "text": "so i thought i'd add it now turning backups off can be done by setting the backup retention to zero",
    "start": "886880",
    "end": "892240"
  },
  {
    "text": "and i really don't recommend this because again as i said i think people think oh yes i can you know recreate the",
    "start": "892240",
    "end": "897279"
  },
  {
    "text": "data it's just test or whatever but it doesn't really cost much to have backups on unless you're doing a whole lot of data loading",
    "start": "897279",
    "end": "903040"
  },
  {
    "text": "and i'm actually going to talk a little bit about that in my next talk at like three but uh you know normally keep this",
    "start": "903040",
    "end": "908800"
  },
  {
    "text": "turned on it really is important and we actually give you with rds the uh the equivalent in backup size as your",
    "start": "908800",
    "end": "915760"
  },
  {
    "text": "storage size is free so really if you have the retention set to one or two days you don't actually",
    "start": "915760",
    "end": "920800"
  },
  {
    "text": "end up paying anything for it on your bill in typical uh fashion the other method",
    "start": "920800",
    "end": "926560"
  },
  {
    "text": "that we do is called database snapshots and this is taking your database at a point in time and taking a backup of it",
    "start": "926560",
    "end": "932959"
  },
  {
    "text": "and where this is really useful is you can retain this for a very long period of time so if you have retention requirements that go back",
    "start": "932959",
    "end": "938480"
  },
  {
    "text": "three years if you need a backup once a month every three years you can do that with this feature",
    "start": "938480",
    "end": "944000"
  },
  {
    "text": "the thing i want to highlight is you now can convert your nightly backup into a snapshot so instead of taking an extra",
    "start": "944000",
    "end": "949759"
  },
  {
    "text": "backup if you need one of these you can just say logically make my automated backup into a snapshot",
    "start": "949759",
    "end": "955920"
  },
  {
    "text": "and the other one is that is really good is that a lot of times people make copies for tests and they use the point in time recovery",
    "start": "955920",
    "end": "961839"
  },
  {
    "text": "from the automated nightly backup but they usually don't care about getting to a specific point in time",
    "start": "961839",
    "end": "966880"
  },
  {
    "text": "so if you're going to do that just use a snapshot because it's going to be much faster there's no logs to replay",
    "start": "966880",
    "end": "972399"
  },
  {
    "text": "and even if in some cases an emergency you know if you don't care about the last bits of data you're better off",
    "start": "972399",
    "end": "977759"
  },
  {
    "text": "using a snapshot because it's going to come back in a few minutes and versus point in time recovery through logs could take a number of",
    "start": "977759",
    "end": "983519"
  },
  {
    "text": "hours if it's you know if you have a very uh heavy log stream so those are good things to think about",
    "start": "983519",
    "end": "990399"
  },
  {
    "start": "990000",
    "end": "990000"
  },
  {
    "text": "so once you have your nice production set up using the best practices you can see here we have the synchronous multi-az we have read replicas",
    "start": "990399",
    "end": "997040"
  },
  {
    "text": "you really want to set up a test environment and you can see here that i've made a qa",
    "start": "997040",
    "end": "1003600"
  },
  {
    "text": "environment that looks exactly like prod and what i've done with rds is the great thing is you have the flexibility to do",
    "start": "1003600",
    "end": "1009360"
  },
  {
    "text": "this in miniature so you can have all the same functionality you can have multi-az you",
    "start": "1009360",
    "end": "1014560"
  },
  {
    "text": "can have read replicas so your application can be tested in all the same ways as",
    "start": "1014560",
    "end": "1020320"
  },
  {
    "text": "production in qa but you can keep your costs low by running smaller instances so like let's say on the the production",
    "start": "1020320",
    "end": "1026640"
  },
  {
    "text": "side you have extra larges well you could go with smalls in qa you know which are a quarter of the price so",
    "start": "1026640",
    "end": "1032720"
  },
  {
    "text": "you can really make a very cost effective you know you can even go to micros if you need so that really allows you to do",
    "start": "1032720",
    "end": "1038240"
  },
  {
    "text": "things like testing failover testing reboots and really make sure everything works in your application",
    "start": "1038240",
    "end": "1044558"
  },
  {
    "text": "now the other best practice that we've seen real recently and that actually you know came about from working with my development team was",
    "start": "1044559",
    "end": "1050480"
  },
  {
    "text": "that you know how many people have a single development environment for all their developers",
    "start": "1050480",
    "end": "1056000"
  },
  {
    "text": "you know for one application i mean that's how i used to that's how a lot of us used to do it and you know it's great except for when",
    "start": "1056000",
    "end": "1062400"
  },
  {
    "text": "you need to do schema changes you know someone wants to propose a different schema or add something or change something or they want a specific",
    "start": "1062400",
    "end": "1068400"
  },
  {
    "text": "data set in devo to do some testing causes all kinds of conflicts so what we really recommend is instead",
    "start": "1068400",
    "end": "1074640"
  },
  {
    "text": "of doing that give each of your developers a micro sized copy of your database right now this can be just the using a db",
    "start": "1074640",
    "end": "1082799"
  },
  {
    "text": "t1 micro with the full size of storage from production or a cut down version",
    "start": "1082799",
    "end": "1088320"
  },
  {
    "text": "if you do a full one you can just take a snapshot you can put it on a smaller instance it's no problem and as you get more developers you can",
    "start": "1088320",
    "end": "1093840"
  },
  {
    "text": "just create more copies and this allows a really rapid method of development even using a relational",
    "start": "1093840",
    "end": "1099520"
  },
  {
    "text": "database and boy i can tell you my developers are a lot happier with this kind of environment than just having a couple",
    "start": "1099520",
    "end": "1104960"
  },
  {
    "text": "of you know devo intake stacks so we really think that's like an up and coming sort of best practice on relational database development",
    "start": "1104960",
    "end": "1113039"
  },
  {
    "start": "1113000",
    "end": "1113000"
  },
  {
    "text": "the other thing i really like about rds is you can really test the features that you use so restores for example so if you were",
    "start": "1113039",
    "end": "1119440"
  },
  {
    "text": "creating that qa environment in those devo environments you're using the restore technology that you're going to use in case of something going wrong",
    "start": "1119440",
    "end": "1125840"
  },
  {
    "text": "so it's not something that gets tested once a year or once every three years it's stuff that you can test every day i mean we have stuff where we spin up",
    "start": "1125840",
    "end": "1131919"
  },
  {
    "text": "development instances every day so we know that our backups work right there's no question",
    "start": "1131919",
    "end": "1137280"
  },
  {
    "text": "the other thing that we like is we added so you can reboot your instance you can fail over your instance and you can make sure that your application can respond",
    "start": "1137280",
    "end": "1143360"
  },
  {
    "text": "to those events ahead of time and you can do this in your qa environment continuously so that everything you know is going to work",
    "start": "1143360",
    "end": "1149600"
  },
  {
    "text": "and the other one that's really important is the ability to test minor version upgrades so you know if you look at something",
    "start": "1149600",
    "end": "1155840"
  },
  {
    "text": "like mysql about once every month or two you get a new minor release some of it's security related some of its features",
    "start": "1155840",
    "end": "1161440"
  },
  {
    "text": "some of its bug fixes and it's really important to keep sort of moving along with those but it's kind of painful to do a lot of testing",
    "start": "1161440",
    "end": "1167360"
  },
  {
    "text": "with rds essentially what you want to do is you want to create a copy of your database from a snapshot you want to upgrade it to the version that you want",
    "start": "1167360",
    "end": "1173919"
  },
  {
    "text": "which is under your control but we do it for you and then once you've satisfied your testing you can go back and do that to",
    "start": "1173919",
    "end": "1180160"
  },
  {
    "text": "your your production environment and this really leads to a nice practice of you know you can do that on a regular",
    "start": "1180160",
    "end": "1185200"
  },
  {
    "text": "basis you can set this up and really keep up with the current updates",
    "start": "1185200",
    "end": "1190400"
  },
  {
    "start": "1190000",
    "end": "1190000"
  },
  {
    "text": "and as i said security is really important to us so i wanted to cover a few little highlights on sort of best practices",
    "start": "1190400",
    "end": "1196320"
  },
  {
    "text": "one of the new areas that i mean depending on how long you've been using aws for when i started you got one account and",
    "start": "1196320",
    "end": "1201919"
  },
  {
    "text": "if you had 30 people using it you all used the same keys it was kind of really bad you couldn't tell what was going on now",
    "start": "1201919",
    "end": "1208960"
  },
  {
    "text": "what you get is you get identity and access management so you can create accounts or you can create users under your main",
    "start": "1208960",
    "end": "1214880"
  },
  {
    "text": "account for every one of your users and this really gives you a level of control so you can say hey you know",
    "start": "1214880",
    "end": "1220240"
  },
  {
    "text": "grant can create databases but he can't change security groups because i don't want our databases being pointed to by the",
    "start": "1220240",
    "end": "1225520"
  },
  {
    "text": "internet right so it really allows you to lock down a lot of stuff so i'd say if you haven't looked at identity and access management",
    "start": "1225520",
    "end": "1231200"
  },
  {
    "text": "go take a look it really is good the other one we see a bunch is that we see",
    "start": "1231200",
    "end": "1236240"
  },
  {
    "text": "database security groups which is basically how you control ingress into your network to your database a lot of times",
    "start": "1236240",
    "end": "1243200"
  },
  {
    "text": "those aren't locked down as much as i would you know i would like to see uh you know even when like our own guys",
    "start": "1243200",
    "end": "1248720"
  },
  {
    "text": "do them so we always tell people really review these one of the keys is that if you're using ec2 as your application development",
    "start": "1248720",
    "end": "1255120"
  },
  {
    "text": "environment or your application environment you don't need to authorize through ips or cider ranges",
    "start": "1255120",
    "end": "1260240"
  },
  {
    "text": "what you want to do is authorize through security groups because that's it's it it keeps up to date when you launch new",
    "start": "1260240",
    "end": "1265919"
  },
  {
    "text": "uh ec2 instances and you don't have to do anything extra and it's much more secure the other one",
    "start": "1265919",
    "end": "1271039"
  },
  {
    "text": "we see a lot of is people authorizing on a cider ranger an ip range zero zero zero",
    "start": "1271039",
    "end": "1276640"
  },
  {
    "text": "zero does everyone know what that does that lets the internet look at your database right now",
    "start": "1276640",
    "end": "1282559"
  },
  {
    "text": "obviously you still have to get through you know the normal access controls of a database but you know i i don't really wanna have",
    "start": "1282559",
    "end": "1288960"
  },
  {
    "text": "the whole world you know poking at my database and you'll see a lot of this in demos or other scripts where people just say oh",
    "start": "1288960",
    "end": "1294480"
  },
  {
    "text": "do this because it's a quick way to figure out how to get from whatever ip you're at in but it's not a good practice right so",
    "start": "1294480",
    "end": "1300960"
  },
  {
    "text": "it's like having the widest funnel possible on your database so you really want to go through figure out what ips you're coming from if you need to use",
    "start": "1300960",
    "end": "1306559"
  },
  {
    "text": "siders lock it down make those changes so i think we actually are now starting to",
    "start": "1306559",
    "end": "1311919"
  },
  {
    "text": "review these and we send out notes to customers if they have these these authorizations but it's just you know it's a really good practice and as i",
    "start": "1311919",
    "end": "1319200"
  },
  {
    "text": "said before really upgrading to the latest minor release is really important when you run databases because there really are",
    "start": "1319200",
    "end": "1325440"
  },
  {
    "text": "security fixes um you know in a lot of the a lot of the releases now some of them are you know minor some of",
    "start": "1325440",
    "end": "1332320"
  },
  {
    "text": "them are medium and then sometimes there's very large ones we've lucky that there's been too many large ones lately but",
    "start": "1332320",
    "end": "1337360"
  },
  {
    "text": "it is definitely something that you want to keep up with you want to do that testing and you want to upgrade so that's it for me on best practices",
    "start": "1337360",
    "end": "1345679"
  },
  {
    "text": "and i'm going to turn it over to eli here he's going to talk about his experiences and",
    "start": "1345679",
    "end": "1351600"
  },
  {
    "text": "then we'll we'll take some questions at the end",
    "start": "1351600",
    "end": "1361840"
  },
  {
    "text": "oh thank you grant um so i i thought i should figure out by saying hi i'm eli i'm an aws user um",
    "start": "1362080",
    "end": "1370159"
  },
  {
    "text": "i've actually worked for a number of different companies in in all different sectors over uh the",
    "start": "1370159",
    "end": "1376480"
  },
  {
    "text": "last period of my career i've worked for the government and for non-profits i worked for the hubble",
    "start": "1376480",
    "end": "1382960"
  },
  {
    "text": "space telescope program for seven years i've worked in uh",
    "start": "1382960",
    "end": "1388240"
  },
  {
    "text": "large corporations i worked for a subprime mortgage company for a year um got out at the right time though um i",
    "start": "1388240",
    "end": "1396559"
  },
  {
    "text": "also have done some work for a trip advisor in the past i've worked for zen technologies um i've",
    "start": "1396559",
    "end": "1402880"
  },
  {
    "text": "also worked in a number of startups and i've been in a lot of those lately um i was actually programmer number two at",
    "start": "1402880",
    "end": "1408320"
  },
  {
    "text": "digg.com uh where i saw it from when i joined there being 30 000 users to",
    "start": "1408320",
    "end": "1414640"
  },
  {
    "text": "by the time we parted ways there were over 30 million users and let's just say there were some scalability issues there",
    "start": "1414640",
    "end": "1422000"
  },
  {
    "text": "and i've worked for a number of other startups goodzie.com that's an online storefront mojo live which i was just most recently",
    "start": "1422000",
    "end": "1429679"
  },
  {
    "text": "at as well as i've currently co-founded a consulting company uh where we're doing a lot of cloud",
    "start": "1429679",
    "end": "1435440"
  },
  {
    "text": "consulting uh musketeers me and so i'd like to take you through some of my experiences from",
    "start": "1435440",
    "end": "1441360"
  },
  {
    "text": "before i had aws and rds to be able to do things and to where",
    "start": "1441360",
    "end": "1446799"
  },
  {
    "text": "i am now so back when i started at dig",
    "start": "1446799",
    "end": "1453200"
  },
  {
    "text": "you would hear rumblings of this word cloud but it wasn't really something that anyone was using amazon web services was not up and there",
    "start": "1453200",
    "end": "1459919"
  },
  {
    "text": "to use it and so we were doing everything on bear steel and trying to scale not only databases",
    "start": "1459919",
    "end": "1468080"
  },
  {
    "text": "but just the entire application had a lot of issues that we were having to deal with",
    "start": "1468080",
    "end": "1473840"
  },
  {
    "text": "first of all if you wanted to have geographic redundancy if you wanted to have the equivalent of multiple availability zones",
    "start": "1473840",
    "end": "1480159"
  },
  {
    "text": "that meant getting on an airplane digg had two data centers one in san francisco",
    "start": "1480159",
    "end": "1486480"
  },
  {
    "text": "and another one out in virginia and the bulk of the team",
    "start": "1486480",
    "end": "1491520"
  },
  {
    "text": "95 of digg was in san francisco so any time that something needed to",
    "start": "1491520",
    "end": "1498320"
  },
  {
    "start": "1492000",
    "end": "1492000"
  },
  {
    "text": "happen to the virginia data center that meant a bunch of operations guys had to hop on",
    "start": "1498320",
    "end": "1503440"
  },
  {
    "text": "an airplane fly out there that meant they were gone for days you know anyone who's done that flight knows that's an entire day-long",
    "start": "1503440",
    "end": "1510080"
  },
  {
    "text": "flight out there then they'd spend a day or two in the data center and then fly back and then they find out they forgot to",
    "start": "1510080",
    "end": "1516400"
  },
  {
    "text": "plug in that one cable um luckily in some cases we did have a",
    "start": "1516400",
    "end": "1523039"
  },
  {
    "text": "few other people around i actually um i live in maryland and i lived in maryland while i worked for dig as well",
    "start": "1523039",
    "end": "1529440"
  },
  {
    "text": "so even though i was primarily a developer i got to go to the data center and have my had my hand scanned and i",
    "start": "1529440",
    "end": "1534880"
  },
  {
    "text": "had all the access codes so that if they forgot to plug in a single cable eli could actually drive down there",
    "start": "1534880",
    "end": "1540799"
  },
  {
    "text": "and put my hand in and plug into one cable for them but overall it's a pain the other was",
    "start": "1540799",
    "end": "1547679"
  },
  {
    "text": "the problem of when horizontal scaling fails grant was talking about the idea of",
    "start": "1547679",
    "end": "1553039"
  },
  {
    "text": "creating read replicas of your databases and that's a very common thing is you're needing to start scale website when you",
    "start": "1553039",
    "end": "1558400"
  },
  {
    "text": "go from 30 000 users to a million users you go from having to read slaves to maybe 50",
    "start": "1558400",
    "end": "1564320"
  },
  {
    "text": "read slaves and for a long time upgrading that way is is very efficient it's very easy to",
    "start": "1564320",
    "end": "1570720"
  },
  {
    "text": "just add in a couple more slaves add in a couple more slaves the problem is you do start to hit spots",
    "start": "1570720",
    "end": "1577760"
  },
  {
    "text": "where the horizontal scaling fails first of all you will hit problems where",
    "start": "1577760",
    "end": "1583600"
  },
  {
    "text": "if you only have one master going trying to write to say 300 database slaves",
    "start": "1583600",
    "end": "1588640"
  },
  {
    "text": "the master can't keep up it has to talk to 300 different slaves and send all of",
    "start": "1588640",
    "end": "1593919"
  },
  {
    "text": "those updates through there and suddenly your the the slave lag and all the slaves starts going through the",
    "start": "1593919",
    "end": "1599440"
  },
  {
    "text": "roof the other problem with horizontal scaling is that at some point if you realize that all of",
    "start": "1599440",
    "end": "1606559"
  },
  {
    "text": "your database machines you've been buying for the last couple years are underpowered by modern standards",
    "start": "1606559",
    "end": "1612559"
  },
  {
    "text": "you have to throw away hundreds of machines and put in whole new uh more expensive machines um and so",
    "start": "1612559",
    "end": "1619360"
  },
  {
    "text": "that's really en ends up being really hard to do vertically scaling it putting in bigger machines is difficult",
    "start": "1619360",
    "end": "1626080"
  },
  {
    "text": "one of the great things now with amazon is that vertical scaling of a database is essentially one click i'd like a",
    "start": "1626080",
    "end": "1632240"
  },
  {
    "text": "bigger database and magically your database gets bigger it's two clicks if you want to make it happen immediately instead of waiting a",
    "start": "1632240",
    "end": "1637520"
  },
  {
    "text": "few hours um the other problem was when you went to add a new server it wasn't just one",
    "start": "1637520",
    "end": "1644399"
  },
  {
    "text": "click and it's there um literally at digg we had a special account set up with",
    "start": "1644399",
    "end": "1650080"
  },
  {
    "text": "um penguin computing i believe was where we bought all of our servers from and if we suddenly started taking a lot",
    "start": "1650080",
    "end": "1656399"
  },
  {
    "text": "of extra traffic if we needed to build in more capacity it meant a phone call to penguin",
    "start": "1656399",
    "end": "1662480"
  },
  {
    "text": "ordering new servers on overnight shipping they'd arrive the next day then someone would have to drive down to",
    "start": "1662480",
    "end": "1668399"
  },
  {
    "text": "the data center or again get on an airplane if it needs to go to the other data center and it was just a really long painful",
    "start": "1668399",
    "end": "1674640"
  },
  {
    "text": "process so by the time you had a traffic spike that you were dealing with by the time you could get computers the",
    "start": "1674640",
    "end": "1680320"
  },
  {
    "text": "traffic was probably gone it you couldn't react quick enough and part of that came down to really",
    "start": "1680320",
    "end": "1687279"
  },
  {
    "text": "planning for these traffic spikes digg had extremely spiky traffic",
    "start": "1687279",
    "end": "1693200"
  },
  {
    "text": "there were two events a year that would send our traffic through the roof that would grow by more than order of magnitude during",
    "start": "1693200",
    "end": "1700080"
  },
  {
    "text": "these days and that was uh macworld and the mac developers conference",
    "start": "1700080",
    "end": "1705200"
  },
  {
    "text": "when those two events happened every single person was posting every single thing being said especially during the keynotes to dig",
    "start": "1705200",
    "end": "1711760"
  },
  {
    "text": "and wanting to read everything on there and traffic just go crazy those two",
    "start": "1711760",
    "end": "1716960"
  },
  {
    "text": "times a year is when we would find what part of our architecture wasn't going to scale that day",
    "start": "1716960",
    "end": "1723760"
  },
  {
    "text": "we would scramble to fix it six months later that part would not fail",
    "start": "1723760",
    "end": "1728880"
  },
  {
    "text": "and something else would um so we had this rolling process and we got to the point where everyone stocked up on lots",
    "start": "1728880",
    "end": "1734799"
  },
  {
    "text": "of espresso on those days because they knew it'd be a long day but more importantly for us to even consider to be prepared",
    "start": "1734799",
    "end": "1741520"
  },
  {
    "text": "for that we had to have the amount of capacity the number of servers sitting in those racks in these",
    "start": "1741520",
    "end": "1746640"
  },
  {
    "text": "two data centers to handle as best we could those traffic spikes which means during normal operations all",
    "start": "1746640",
    "end": "1754480"
  },
  {
    "text": "the servers were sitting 10 used um in in many cases an entire data center would sit unused",
    "start": "1754480",
    "end": "1761440"
  },
  {
    "text": "because it would end up the operations team would actually just cut off that data center and have it all served out of one data",
    "start": "1761440",
    "end": "1767840"
  },
  {
    "text": "center at that point in time so the next phase is when i was able to",
    "start": "1767840",
    "end": "1775360"
  },
  {
    "start": "1771000",
    "end": "1771000"
  },
  {
    "text": "start taking this onto the cloud and this really started for me when i was at goodzie.com and i've continued it",
    "start": "1775360",
    "end": "1782240"
  },
  {
    "text": "um when i was a cto of mojo live and cloud does wonderful things and i i",
    "start": "1782240",
    "end": "1789120"
  },
  {
    "text": "fell in love with amazon and with rds around that time and i have never looked",
    "start": "1789120",
    "end": "1794159"
  },
  {
    "text": "back because i don't want to ever do it the old way again one of the most important parts of this",
    "start": "1794159",
    "end": "1800000"
  },
  {
    "text": "was at least it's important to me a lot of operations guys and dbas may not like this",
    "start": "1800000",
    "end": "1805919"
  },
  {
    "text": "but there's a greatly reduced need for needing a dedicated operations team this is extremely important when you're",
    "start": "1805919",
    "end": "1812159"
  },
  {
    "text": "looking at uh small startups when you've got maybe two people or three people or even seven",
    "start": "1812159",
    "end": "1818240"
  },
  {
    "text": "people on staff having to have a dedicated one of those be an operations guy",
    "start": "1818240",
    "end": "1824159"
  },
  {
    "text": "takes a lot of out of your resources at goodzi we had one devops who spent",
    "start": "1824159",
    "end": "1831039"
  },
  {
    "text": "about fifty percent of his time doing uh the amazon operations work and 50 writing code",
    "start": "1831039",
    "end": "1836880"
  },
  {
    "text": "and that was it at the time at mojo live uh we had none i myself at that point",
    "start": "1836880",
    "end": "1843520"
  },
  {
    "text": "just took on taking care of any of the amazon maintenance that needed because i even as a developer who knows enough",
    "start": "1843520",
    "end": "1850159"
  },
  {
    "text": "ops to be dangerous could click the right buttons to create new servers to set up everything that i",
    "start": "1850159",
    "end": "1855520"
  },
  {
    "text": "needed um and so it made for much lower costs for getting a startup off the ground",
    "start": "1855520",
    "end": "1862000"
  },
  {
    "text": "the other thing is i talked before about how amazon makes vertical scaling easier",
    "start": "1862000",
    "end": "1867519"
  },
  {
    "text": "and that can actually be a great boon for startups as well when you're doing work if anyone's done",
    "start": "1867519",
    "end": "1874000"
  },
  {
    "text": "work writing writing code that works with talking to a master and then talking to various read slaves",
    "start": "1874000",
    "end": "1880080"
  },
  {
    "text": "it's more complicated work the code actually has to understand that your code has to understand the idea of there",
    "start": "1880080",
    "end": "1886159"
  },
  {
    "text": "being slave lag you might write something to master and two lines of code later try to read that back",
    "start": "1886159",
    "end": "1891519"
  },
  {
    "text": "from the slave that data may not be there or it might you don't know necessarily",
    "start": "1891519",
    "end": "1897440"
  },
  {
    "text": "and so you actually have to start changing a bit how you write your code you have to think about that it gets even more complicated farther",
    "start": "1897440",
    "end": "1904080"
  },
  {
    "text": "down the line if you start having to talk about sharding and breaking everything up because now one master is not enough",
    "start": "1904080",
    "end": "1909919"
  },
  {
    "text": "it gets very complicated it adds a lot of extra effort and thought process on the programmers",
    "start": "1909919",
    "end": "1915279"
  },
  {
    "text": "writing this code and it's something that eventually you're going to need to do anyway but when we're talking about the very early",
    "start": "1915279",
    "end": "1921760"
  },
  {
    "text": "stages of a startup it's this amazing empowering ability to know that you can just start up",
    "start": "1921760",
    "end": "1928080"
  },
  {
    "text": "a server it can start off as a micro and as for a while as you need to scale you can",
    "start": "1928080",
    "end": "1933840"
  },
  {
    "text": "just make a bigger instance and you can just make a bigger instance and that can keep you going for a long",
    "start": "1933840",
    "end": "1939120"
  },
  {
    "text": "period of time longer probably than most startups end up lasting",
    "start": "1939120",
    "end": "1944880"
  },
  {
    "text": "and the other part that plays into all of this is that um there are so many of the features",
    "start": "1946480",
    "end": "1952320"
  },
  {
    "text": "that previously absolutely required a dba to take care of maintaining setting up",
    "start": "1952320",
    "end": "1958240"
  },
  {
    "text": "fixing when it breaks because it always breaks um like replication would always break at dig there was always like a machine",
    "start": "1958240",
    "end": "1964799"
  },
  {
    "text": "of any given week that wasn't replicating for some reason and we had no idea why um so replications failovers",
    "start": "1964799",
    "end": "1972480"
  },
  {
    "text": "backups doing restores all of that is easily handled for a few clicks from",
    "start": "1972480",
    "end": "1978880"
  },
  {
    "text": "the web gui and again it empowers someone like myself to pretend he's a dba",
    "start": "1978880",
    "end": "1985200"
  },
  {
    "text": "and get a server up and running know that i have replication know that i have automatic failover know that i have backups running all",
    "start": "1985200",
    "end": "1992159"
  },
  {
    "text": "these things that otherwise i would be fretting about",
    "start": "1992159",
    "end": "1996320"
  },
  {
    "text": "and then where i am now in doing cloud consulting services with musketeers me",
    "start": "1997760",
    "end": "2003360"
  },
  {
    "start": "2000000",
    "end": "2000000"
  },
  {
    "text": "there's a lot of other benefits that we're finding here with the cloud when i've when having transitioned from",
    "start": "2003360",
    "end": "2009039"
  },
  {
    "text": "building web applications for startups to working with any clients needing any",
    "start": "2009039",
    "end": "2014080"
  },
  {
    "text": "type of website or web app built one of the most important parts is actually the ability to scale smaller",
    "start": "2014080",
    "end": "2021840"
  },
  {
    "text": "there are so many people out there so many small shops small websites that do not need",
    "start": "2021840",
    "end": "2029679"
  },
  {
    "text": "a super powerful machine but normally they're going to be go out and buying a super powerful machine to try to do",
    "start": "2029679",
    "end": "2035039"
  },
  {
    "text": "things the fact that especially now with micro instances you can go into a client and get them up",
    "start": "2035039",
    "end": "2042159"
  },
  {
    "text": "and running on very inexpensive yet very performant hardware in fact with the amazon free tier if",
    "start": "2042159",
    "end": "2048800"
  },
  {
    "text": "this client signs up for an account they're going to get a lot of stuff for a year at essentially zero cost",
    "start": "2048800",
    "end": "2055040"
  },
  {
    "text": "and one of the best examples is i was just recently helping a client",
    "start": "2055040",
    "end": "2060320"
  },
  {
    "text": "who had a magento install that was running 10 20 different web stores on it was paying",
    "start": "2060320",
    "end": "2066638"
  },
  {
    "text": "two thousand dollars a month for a co-located server i was able to move them onto a micro ec2",
    "start": "2066639",
    "end": "2073679"
  },
  {
    "text": "instance running micro rds and they're better performance than that 2 000 bear steel server that they had paid",
    "start": "2073679",
    "end": "2081280"
  },
  {
    "text": "for 10 years ago or whatever and had never been upgraded yet they were still paying 2 000 a month on it and so we're able to give",
    "start": "2081280",
    "end": "2089118"
  },
  {
    "text": "that to them for cheaper and in turn there's it's actually still more performant at",
    "start": "2089119",
    "end": "2094878"
  },
  {
    "text": "the same time and a big part of that is really reducing the cost if you're going out",
    "start": "2094879",
    "end": "2100240"
  },
  {
    "text": "and bidding contracts um it's amazing how many contracts you go and look at and if they have in the",
    "start": "2100240",
    "end": "2106000"
  },
  {
    "text": "if they're wanting web hosting included as part of uh this contract of you know you're maybe making a government bid or",
    "start": "2106000",
    "end": "2112800"
  },
  {
    "text": "something like that and part of this is they want to know that if you're bidding on this project",
    "start": "2112800",
    "end": "2118160"
  },
  {
    "text": "they want three years worth of hosting built into the bid and then they'll give as their example for example make a lion",
    "start": "2118160",
    "end": "2123440"
  },
  {
    "text": "item ten dollars a month go daddy and it's really hard but it was really",
    "start": "2123440",
    "end": "2130560"
  },
  {
    "text": "hard i should say before all the micro instances to make a competitive bid to someone in that case that didn't necessarily",
    "start": "2130560",
    "end": "2136400"
  },
  {
    "text": "understand the difference between doing shared hosting on a server such as godaddy versus having dedicated hardware and so",
    "start": "2136400",
    "end": "2145040"
  },
  {
    "text": "even if we were able to come in and say oh actually we're going to set you up on this it's going to cost you know 300 a month",
    "start": "2145040",
    "end": "2151599"
  },
  {
    "text": "for the setup we're going to give you but here's why it's going to be so much better than a shared hosting environment",
    "start": "2151599",
    "end": "2157280"
  },
  {
    "text": "it didn't matter they looked at 300 and they looked at 10 and they went towards the 10. so now we're able to go in and to be",
    "start": "2157280",
    "end": "2164400"
  },
  {
    "text": "able to bid and to say we're going to put you on a cloud hosting environment that's scalable that you can do whatever you need to the",
    "start": "2164400",
    "end": "2170720"
  },
  {
    "text": "initial cost will be and it's a very low number at paying for micro sized instances",
    "start": "2170720",
    "end": "2176800"
  },
  {
    "text": "but then we're able to make the statement to them of having that ability to scale up that",
    "start": "2176800",
    "end": "2183040"
  },
  {
    "text": "we are starting you small and we're coming in price competitive with shared hosting",
    "start": "2183040",
    "end": "2188480"
  },
  {
    "text": "but we are then able to as no matter how much traffic you get in the future we're going to be able to scale that",
    "start": "2188480",
    "end": "2194240"
  },
  {
    "text": "higher for you unlike if you take one of these bids for a shared hosting environment where if you start going higher and the shared",
    "start": "2194240",
    "end": "2201040"
  },
  {
    "text": "hosting provider is just not going to help you anymore and at the same time while we are making",
    "start": "2201040",
    "end": "2208160"
  },
  {
    "text": "these smaller bids with micro sized instances we are still able to have a",
    "start": "2208160",
    "end": "2213359"
  },
  {
    "text": "full-featured service we're able to have that replication the failover and all those things that not only make us happy because we",
    "start": "2213359",
    "end": "2219440"
  },
  {
    "text": "don't have the clients calling us but it makes the clients happy because they know that's going to be taken care of and that's not necessarily something",
    "start": "2219440",
    "end": "2225920"
  },
  {
    "text": "that they can get a commitment to otherwise so the one thing i really want to give",
    "start": "2225920",
    "end": "2232720"
  },
  {
    "start": "2229000",
    "end": "2229000"
  },
  {
    "text": "you as far as a best practice for scala for scalability of databases",
    "start": "2232720",
    "end": "2238320"
  },
  {
    "text": "is you need to use a caching layer all right it it's just i don't want to say no brainer but it's",
    "start": "2238320",
    "end": "2244160"
  },
  {
    "text": "almost a no-brainer at this point um i forget it who it was who said it at one point",
    "start": "2244160",
    "end": "2249520"
  },
  {
    "text": "but i love the quote in general which is that the fastest database query you will ever make",
    "start": "2249520",
    "end": "2254800"
  },
  {
    "text": "is the one you never make at all with an effective caching layer it doesn't matter how fast your database is how",
    "start": "2254800",
    "end": "2260880"
  },
  {
    "text": "well you've optimized it if you don't have to make that query it it's it's a win no matter what",
    "start": "2260880",
    "end": "2267040"
  },
  {
    "text": "and a caching layer makes this possible okay sticking up caching services storing all",
    "start": "2267040",
    "end": "2272480"
  },
  {
    "text": "of your information that you can in there treating them appropriately as volatile memory",
    "start": "2272480",
    "end": "2277760"
  },
  {
    "text": "while keeping your real uh storage in the database so you know you have that data whenever you need it",
    "start": "2277760",
    "end": "2284720"
  },
  {
    "start": "2284000",
    "end": "2284000"
  },
  {
    "text": "so to talk about how to do this best with caching there's a few things that i want to",
    "start": "2284720",
    "end": "2290480"
  },
  {
    "text": "leave you with on this one is you need to make really smart caching decisions",
    "start": "2290480",
    "end": "2297280"
  },
  {
    "text": "and the the best practice for this is the idea of finding the biggest smallest reusable element now",
    "start": "2297280",
    "end": "2305280"
  },
  {
    "text": "it's an art form and it's a trick what it comes down to is the most common thing people think about",
    "start": "2305280",
    "end": "2310720"
  },
  {
    "text": "when you think about adding caching over top of your database layer is the simplest thing everyone goes to is i'm just going to cache the results",
    "start": "2310720",
    "end": "2317280"
  },
  {
    "text": "of any database query i do and that's good that does help you out now you will not make that same database",
    "start": "2317280",
    "end": "2322960"
  },
  {
    "text": "query again the problem is that usually when you go to when you do it that way that one",
    "start": "2322960",
    "end": "2330320"
  },
  {
    "text": "database query that's run for this one page that may only be run on that one page",
    "start": "2330320",
    "end": "2336400"
  },
  {
    "text": "caching it makes that page better but then they click next go to another page a slightly different query is run and",
    "start": "2336400",
    "end": "2342720"
  },
  {
    "text": "that one takes forever now until it's cached and so you have this stagger step problem of you're caching",
    "start": "2342720",
    "end": "2348560"
  },
  {
    "text": "the exact queries so the idea is you want to look for taking all of your information think of",
    "start": "2348560",
    "end": "2356480"
  },
  {
    "text": "them as objects take all of your database things and break them down into the smallest",
    "start": "2356480",
    "end": "2361599"
  },
  {
    "text": "pieces that you can that are reusable but hearing comes the catches you can go too far right",
    "start": "2361599",
    "end": "2367520"
  },
  {
    "text": "you could take every single attribute basically every single column row combinations cache that off as a",
    "start": "2367520",
    "end": "2373040"
  },
  {
    "text": "completely separate object and now to build a web page you need to issue 5 million cash requests and that's",
    "start": "2373040",
    "end": "2378400"
  },
  {
    "text": "obviously not efficient either so that's where this biggest smallest concept comes in you need to come down with you need to",
    "start": "2378400",
    "end": "2385599"
  },
  {
    "text": "come up with the biggest element possible that is the most reusable",
    "start": "2385599",
    "end": "2391520"
  },
  {
    "text": "in which case it's also the smallest it's this perfect line you have to follow a quick example i'll give of that is and",
    "start": "2391520",
    "end": "2398960"
  },
  {
    "text": "this was one that happened to dig but it would come up with any kind of like blog situation or news",
    "start": "2398960",
    "end": "2404240"
  },
  {
    "text": "posting thing any social network really even so it did we had the idea of",
    "start": "2404240",
    "end": "2409440"
  },
  {
    "text": "when someone logged in we wanted to know every single story that any of their",
    "start": "2409440",
    "end": "2414800"
  },
  {
    "text": "friends had dug or posted so that we would be able to show them that fact if we showed",
    "start": "2414800",
    "end": "2421359"
  },
  {
    "text": "here's 20 stories on a page you could see oh and three of my friends you know dug",
    "start": "2421359",
    "end": "2427359"
  },
  {
    "text": "this and five of my friends dug that and to be able to know that so originally",
    "start": "2427359",
    "end": "2433599"
  },
  {
    "text": "that was one big query that the results of which were cash so when you logged in it did a query for",
    "start": "2433599",
    "end": "2439119"
  },
  {
    "text": "it joined tables and it looked for all of your friends and then every story any of your friends have ever dug and it",
    "start": "2439119",
    "end": "2445680"
  },
  {
    "text": "built that together into a gigantic array and it stored that in memcache",
    "start": "2445680",
    "end": "2450960"
  },
  {
    "text": "and that worked okay for a while at some point that array for some users got so big that it wouldn't fit in memcached",
    "start": "2450960",
    "end": "2457440"
  },
  {
    "text": "anymore because there's a limit on how big of an object you can actually cache um that wasn't well documented until we",
    "start": "2457440",
    "end": "2463680"
  },
  {
    "text": "ran into it but the other problem was as soon as any",
    "start": "2463680",
    "end": "2468880"
  },
  {
    "text": "one user of that list dug another story ah that whole cache was useless now",
    "start": "2468880",
    "end": "2475040"
  },
  {
    "text": "and as soon as the next user logged in you had to generate the same thing for that user as well it was a very painful",
    "start": "2475040",
    "end": "2480480"
  },
  {
    "text": "process so the solution that came out of that was to separately cache all the stories that",
    "start": "2480480",
    "end": "2488640"
  },
  {
    "text": "one user had posted or one user had dug and then separately cache all of",
    "start": "2488640",
    "end": "2495599"
  },
  {
    "text": "all of any user when they logged in the list of all of their friends okay so on the surface you end up",
    "start": "2495599",
    "end": "2502960"
  },
  {
    "text": "thinking this is going to be worse and if you were writing a website for one user at a time",
    "start": "2502960",
    "end": "2508160"
  },
  {
    "text": "it would be worse because now instead of logging in and issuing one query and getting all the data back you needed",
    "start": "2508160",
    "end": "2514000"
  },
  {
    "text": "right away now when you log in if someone has 500 friends you're issuing 501 queries because",
    "start": "2514000",
    "end": "2521119"
  },
  {
    "text": "you're issuing one query to say hey give me back all of this user's",
    "start": "2521119",
    "end": "2526160"
  },
  {
    "text": "friends and you get back a list of 500. and then you're going to issue 500 separate queries to say for this user",
    "start": "2526160",
    "end": "2532079"
  },
  {
    "text": "what have they done for this user what have they done and then you're going to stitch all that back together in memory and it sounds",
    "start": "2532079",
    "end": "2538720"
  },
  {
    "text": "horrible until you start looking at this at scale",
    "start": "2538720",
    "end": "2543760"
  },
  {
    "text": "because what happens is when i log in and i have 500 friends 501 queries happen and 501 cash objects",
    "start": "2543760",
    "end": "2552880"
  },
  {
    "text": "get created but when the next person logs in he might share 200 friends with me",
    "start": "2552880",
    "end": "2558079"
  },
  {
    "text": "now only 301 queries have to happen when the next person logs in the next and you eventually get a point where every",
    "start": "2558079",
    "end": "2564800"
  },
  {
    "text": "single user is individually cached to where when someone logs in your on",
    "start": "2564800",
    "end": "2570319"
  },
  {
    "text": "average at dig we found at the end when someone logged in to generate this data we had to make two",
    "start": "2570319",
    "end": "2575920"
  },
  {
    "text": "database queries and they were very small very efficient queries because they were simple id lookups",
    "start": "2575920",
    "end": "2581599"
  },
  {
    "text": "everything else came out of cache and it was very inexpensive to stitch that back together in the code",
    "start": "2581599",
    "end": "2588240"
  },
  {
    "text": "and not only now was that able to be reused as people logged in but those pieces of data were reusable in other",
    "start": "2588480",
    "end": "2594640"
  },
  {
    "text": "ways if you looked at a specific user's friends list oh we already had that",
    "start": "2594640",
    "end": "2599920"
  },
  {
    "text": "information cached as an object that was reusable if you looked at a specific user what stories they've posted oh we already",
    "start": "2599920",
    "end": "2605839"
  },
  {
    "text": "have that cache as a separate object since we had cached all those things independently we were able to reuse any one of those",
    "start": "2605839",
    "end": "2612720"
  },
  {
    "text": "in multiple places and it gave this great benefit the other part here is you really need",
    "start": "2612720",
    "end": "2619599"
  },
  {
    "text": "to weigh the cost of doing immediate updates and versus doing cash invalidation basically",
    "start": "2619599",
    "end": "2626640"
  },
  {
    "text": "this gets down to how quickly do your users really need to see that that data updated and part of this gets to what",
    "start": "2626640",
    "end": "2632640"
  },
  {
    "text": "grant was talking about with read slaves where you've got a couple second lag but i'm talking about taking that farther",
    "start": "2632640",
    "end": "2638800"
  },
  {
    "text": "if if for example a user doesn't really need to see that the latest blog entry was posted",
    "start": "2638800",
    "end": "2645280"
  },
  {
    "text": "for say five minutes because does it really matter well if you've cached a list of all the",
    "start": "2645280",
    "end": "2651920"
  },
  {
    "text": "blog posts it's okay if a new blog post gets added if it has to wait around for that five",
    "start": "2651920",
    "end": "2658160"
  },
  {
    "text": "minute point to roll around that cache to expire and a new query to be issued to say show me the latest blog posts okay",
    "start": "2658160",
    "end": "2666640"
  },
  {
    "text": "most often a five minute wait is not something your users will ever notice",
    "start": "2666640",
    "end": "2671680"
  },
  {
    "text": "there are cases where they will notice it if they click to add a new friend and then they click to view their",
    "start": "2671680",
    "end": "2677520"
  },
  {
    "text": "friends list they kind of expect to see that person shown there immediately there are actually some",
    "start": "2677520",
    "end": "2683359"
  },
  {
    "text": "tricks you can even do to get around that where i've seen done where you don't",
    "start": "2683359",
    "end": "2688960"
  },
  {
    "text": "expire the cash the second that they click that link it's still like a five minute or a 15 minute cash",
    "start": "2688960",
    "end": "2695040"
  },
  {
    "text": "but inside of their logged in session you separately store oh by the way they just added these new users",
    "start": "2695040",
    "end": "2700400"
  },
  {
    "text": "and so when you read in the cached version of their the users that the friends that they had you then combine that quickly with is",
    "start": "2700400",
    "end": "2706880"
  },
  {
    "text": "there anything saved in the session that they've done and yes if the user added the friends then immediately logged out then logged",
    "start": "2706880",
    "end": "2713040"
  },
  {
    "text": "back in and then went and tried to view the page okay it's not going to be there for a few minutes but no one's going to do",
    "start": "2713040",
    "end": "2718160"
  },
  {
    "text": "that and even if they do and they email you a bug report you respond back going can you check again now oh look they're there",
    "start": "2718160",
    "end": "2725838"
  },
  {
    "text": "and the one other thing that i want to leave you with is the idea of creating a right through cache a right through",
    "start": "2726480",
    "end": "2732560"
  },
  {
    "text": "cache is simply the idea that whenever you have a cached object so you've issued a",
    "start": "2732560",
    "end": "2738240"
  },
  {
    "text": "database query you pulled in a user's profile information and you've stored that as a cached object at that point in time anytime",
    "start": "2738240",
    "end": "2745920"
  },
  {
    "text": "that user's profile information gets updated if they go and change where they live or they change",
    "start": "2745920",
    "end": "2751040"
  },
  {
    "text": "their email address instead of invalidating the cache object",
    "start": "2751040",
    "end": "2756160"
  },
  {
    "text": "as you write it to the database or instead of writing it to the database and just waiting for the cache to",
    "start": "2756160",
    "end": "2761520"
  },
  {
    "text": "invalidate itself naturally based upon timeouts that you gave it it's the idea that you write in two",
    "start": "2761520",
    "end": "2767920"
  },
  {
    "text": "places at once you write that data to the database which is your permanent store but you also directly go and update the",
    "start": "2767920",
    "end": "2774240"
  },
  {
    "text": "cached object by doing that you never read from the database again essentially",
    "start": "2774240",
    "end": "2780319"
  },
  {
    "text": "once you've read something into memory and you cache it for a because now you can cache something for indefinitely you can cache it for 24",
    "start": "2780319",
    "end": "2787760"
  },
  {
    "text": "hours is often a good number just in case it's nice to have things expired every now and then but you could literally cache stuff",
    "start": "2787760",
    "end": "2793839"
  },
  {
    "text": "indefinitely or for weeks knowing that every single time that data is going to be updated not only you're",
    "start": "2793839",
    "end": "2799520"
  },
  {
    "text": "going to update in the database but you're going to update the the cache object as well so any the next",
    "start": "2799520",
    "end": "2805200"
  },
  {
    "text": "request for that cached object gets the newest version um and the the big thing is that now",
    "start": "2805200",
    "end": "2812160"
  },
  {
    "text": "that amazon has elasticache uh which is a memcache compliant or",
    "start": "2812160",
    "end": "2817920"
  },
  {
    "text": "memcached depending like to pronounce it compatible software it makes it so much",
    "start": "2817920",
    "end": "2823839"
  },
  {
    "text": "easier to run a cache and keep it up and going especially when you're talking about memcached",
    "start": "2823839",
    "end": "2829359"
  },
  {
    "text": "which is renowned for just deciding to stop responding every now and then or crashing for some reason when you",
    "start": "2829359",
    "end": "2835280"
  },
  {
    "text": "actually try to use it heavily and one of the great things about elasticash is not only does it make it easy to launch a memcache instance it",
    "start": "2835280",
    "end": "2841839"
  },
  {
    "text": "makes it very easy to say i would like a cluster of 10 of these and it will make sure that you",
    "start": "2841839",
    "end": "2847119"
  },
  {
    "text": "always have 10. if a couple of them go down they're taken out of the pool they're instantly replaced or not",
    "start": "2847119",
    "end": "2852559"
  },
  {
    "text": "instantly but as close to instantly as they can be replaced with a new instance and so if you said you wanted 10 and at this",
    "start": "2852559",
    "end": "2858800"
  },
  {
    "text": "amount capacity that you will have 10 with that amount of capacity at any point so it takes",
    "start": "2858800",
    "end": "2864480"
  },
  {
    "text": "away the operations overhead of running it as well so at that point let me give you back to",
    "start": "2864480",
    "end": "2870839"
  },
  {
    "text": "grant no more real slides i just wanted to thank eli great",
    "start": "2870839",
    "end": "2878078"
  }
]