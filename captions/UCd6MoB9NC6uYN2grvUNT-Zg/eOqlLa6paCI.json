[
  {
    "start": "0",
    "end": "30000"
  },
  {
    "text": "hi everyone i'm jerry hargrove the",
    "start": "1439",
    "end": "3360"
  },
  {
    "text": "developer advocate for amazon lightsail",
    "start": "3360",
    "end": "5680"
  },
  {
    "text": "in this video i'm going to show you how",
    "start": "5680",
    "end": "7200"
  },
  {
    "text": "easy it is to deploy a containerized",
    "start": "7200",
    "end": "9200"
  },
  {
    "text": "python flask application with amazon",
    "start": "9200",
    "end": "11440"
  },
  {
    "text": "lights up containers",
    "start": "11440",
    "end": "13280"
  },
  {
    "text": "in this video i'll show you how to",
    "start": "13280",
    "end": "15360"
  },
  {
    "text": "create a container service in amazon",
    "start": "15360",
    "end": "17199"
  },
  {
    "text": "live sale",
    "start": "17199",
    "end": "18160"
  },
  {
    "text": "how to build a container for a flask",
    "start": "18160",
    "end": "20240"
  },
  {
    "text": "application",
    "start": "20240",
    "end": "21600"
  },
  {
    "text": "and how to deploy that container to the",
    "start": "21600",
    "end": "23680"
  },
  {
    "text": "container service",
    "start": "23680",
    "end": "25119"
  },
  {
    "text": "more information about tutorials to",
    "start": "25119",
    "end": "26800"
  },
  {
    "text": "accompany this video is included in the",
    "start": "26800",
    "end": "28560"
  },
  {
    "text": "description below let's get started",
    "start": "28560",
    "end": "32078"
  },
  {
    "start": "30000",
    "end": "137000"
  },
  {
    "text": "first log into your aws account and",
    "start": "32079",
    "end": "34559"
  },
  {
    "text": "navigate to the light cell web console",
    "start": "34559",
    "end": "36800"
  },
  {
    "text": "and then open the containers tab",
    "start": "36800",
    "end": "40079"
  },
  {
    "text": "here you'll see any existing container",
    "start": "40079",
    "end": "42000"
  },
  {
    "text": "services if you've already created some",
    "start": "42000",
    "end": "44239"
  },
  {
    "text": "otherwise your containers tab will look",
    "start": "44239",
    "end": "46000"
  },
  {
    "text": "like this empty",
    "start": "46000",
    "end": "48640"
  },
  {
    "text": "next create a container service and",
    "start": "48640",
    "end": "50480"
  },
  {
    "text": "provide the necessary details for the",
    "start": "50480",
    "end": "52320"
  },
  {
    "text": "service",
    "start": "52320",
    "end": "52960"
  },
  {
    "text": "including the service's location its",
    "start": "52960",
    "end": "55199"
  },
  {
    "text": "capacity",
    "start": "55199",
    "end": "56160"
  },
  {
    "text": "and its name the location of your",
    "start": "56160",
    "end": "58879"
  },
  {
    "text": "container service indicates which aws",
    "start": "58879",
    "end": "61280"
  },
  {
    "text": "region the service will be in",
    "start": "61280",
    "end": "63520"
  },
  {
    "text": "you should choose a location for your",
    "start": "63520",
    "end": "64960"
  },
  {
    "text": "container service just like you would if",
    "start": "64960",
    "end": "67119"
  },
  {
    "text": "you were launching a light sale",
    "start": "67119",
    "end": "69520"
  },
  {
    "text": "select a region that's close to where",
    "start": "69520",
    "end": "71200"
  },
  {
    "text": "the users of the service will be",
    "start": "71200",
    "end": "73119"
  },
  {
    "text": "or you might have other data sovereignty",
    "start": "73119",
    "end": "75280"
  },
  {
    "text": "or regional requirements that will help",
    "start": "75280",
    "end": "76960"
  },
  {
    "text": "you make your choice",
    "start": "76960",
    "end": "79920"
  },
  {
    "text": "the capacity of your container service",
    "start": "80159",
    "end": "82000"
  },
  {
    "text": "determines how much power and scale it",
    "start": "82000",
    "end": "83920"
  },
  {
    "text": "has",
    "start": "83920",
    "end": "84799"
  },
  {
    "text": "for a minimal flask app like you're",
    "start": "84799",
    "end": "86400"
  },
  {
    "text": "building today a single micro node will",
    "start": "86400",
    "end": "88640"
  },
  {
    "text": "be okay",
    "start": "88640",
    "end": "89920"
  },
  {
    "text": "if your capacity requirements change",
    "start": "89920",
    "end": "91840"
  },
  {
    "text": "later on you can easily return and",
    "start": "91840",
    "end": "94079"
  },
  {
    "text": "update both the power and",
    "start": "94079",
    "end": "95600"
  },
  {
    "text": "scale of your container service the name",
    "start": "95600",
    "end": "98960"
  },
  {
    "text": "of your service should follow the naming",
    "start": "98960",
    "end": "100640"
  },
  {
    "text": "guidelines and uniqueness constraints",
    "start": "100640",
    "end": "102399"
  },
  {
    "text": "provided",
    "start": "102399",
    "end": "103600"
  },
  {
    "text": "this name will become part of the",
    "start": "103600",
    "end": "105119"
  },
  {
    "text": "default domain name for your container",
    "start": "105119",
    "end": "106960"
  },
  {
    "text": "service so it needs to be dns compliant",
    "start": "106960",
    "end": "110560"
  },
  {
    "text": "finally review your container service",
    "start": "110560",
    "end": "112840"
  },
  {
    "text": "configuration make any changes if needed",
    "start": "112840",
    "end": "115759"
  },
  {
    "text": "and then create the container service",
    "start": "115759",
    "end": "118880"
  },
  {
    "text": "after a few minutes your container",
    "start": "118880",
    "end": "120479"
  },
  {
    "text": "service will be provisioned and ready",
    "start": "120479",
    "end": "122000"
  },
  {
    "text": "for use",
    "start": "122000",
    "end": "124560"
  },
  {
    "text": "from the container service page you can",
    "start": "124719",
    "end": "126799"
  },
  {
    "text": "create and review deployments",
    "start": "126799",
    "end": "128959"
  },
  {
    "text": "change the services capacity administer",
    "start": "128959",
    "end": "131760"
  },
  {
    "text": "custom domains",
    "start": "131760",
    "end": "133120"
  },
  {
    "text": "and view metrics for your service",
    "start": "133120",
    "end": "136959"
  },
  {
    "start": "137000",
    "end": "284000"
  },
  {
    "text": "now that you've created your container",
    "start": "138640",
    "end": "140239"
  },
  {
    "text": "service i'll show you how to create and",
    "start": "140239",
    "end": "141920"
  },
  {
    "text": "push a docker container to your light",
    "start": "141920",
    "end": "143599"
  },
  {
    "text": "cell service from the command line",
    "start": "143599",
    "end": "146640"
  },
  {
    "text": "before you get started you'll need to",
    "start": "146640",
    "end": "148400"
  },
  {
    "text": "install docker the aws command line",
    "start": "148400",
    "end": "151040"
  },
  {
    "text": "interface or cli",
    "start": "151040",
    "end": "152879"
  },
  {
    "text": "and the light cell control plugin on",
    "start": "152879",
    "end": "154800"
  },
  {
    "text": "your system",
    "start": "154800",
    "end": "156560"
  },
  {
    "text": "also i'm using visual studio code and",
    "start": "156560",
    "end": "158959"
  },
  {
    "text": "the linux instance to create and push",
    "start": "158959",
    "end": "160959"
  },
  {
    "text": "my container image to light sale",
    "start": "160959",
    "end": "162959"
  },
  {
    "text": "depending on your system and tools",
    "start": "162959",
    "end": "164959"
  },
  {
    "text": "the ui and commands you use might differ",
    "start": "164959",
    "end": "168800"
  },
  {
    "text": "to build the container you'll need three",
    "start": "168800",
    "end": "170879"
  },
  {
    "text": "files the application code",
    "start": "170879",
    "end": "173120"
  },
  {
    "text": "a python requirements file and a docker",
    "start": "173120",
    "end": "175519"
  },
  {
    "text": "file",
    "start": "175519",
    "end": "176160"
  },
  {
    "text": "let's look at each one briefly and then",
    "start": "176160",
    "end": "178159"
  },
  {
    "text": "build the container",
    "start": "178159",
    "end": "179760"
  },
  {
    "text": "the application code defines a minimal",
    "start": "179760",
    "end": "182000"
  },
  {
    "text": "flask application",
    "start": "182000",
    "end": "183599"
  },
  {
    "text": "it first imports the flask class and",
    "start": "183599",
    "end": "186080"
  },
  {
    "text": "creates an",
    "start": "186080",
    "end": "186640"
  },
  {
    "text": "instance of that class next the route",
    "start": "186640",
    "end": "189519"
  },
  {
    "text": "decorator tells flask what url should",
    "start": "189519",
    "end": "191840"
  },
  {
    "text": "trigger our function",
    "start": "191840",
    "end": "193120"
  },
  {
    "text": "in this case the root directory that's",
    "start": "193120",
    "end": "195519"
  },
  {
    "text": "really it",
    "start": "195519",
    "end": "197599"
  },
  {
    "text": "the requirements text file specifies",
    "start": "197599",
    "end": "199680"
  },
  {
    "text": "what python packages are required by the",
    "start": "199680",
    "end": "201840"
  },
  {
    "text": "application",
    "start": "201840",
    "end": "202959"
  },
  {
    "text": "for this flask application there's",
    "start": "202959",
    "end": "204879"
  },
  {
    "text": "really only one package required and",
    "start": "204879",
    "end": "206799"
  },
  {
    "text": "that's flask itself",
    "start": "206799",
    "end": "208720"
  },
  {
    "text": "the docker file specifies how the",
    "start": "208720",
    "end": "210480"
  },
  {
    "text": "container image should be built",
    "start": "210480",
    "end": "213200"
  },
  {
    "text": "the from instruction initializes a new",
    "start": "213200",
    "end": "215280"
  },
  {
    "text": "build stage and sets the base image",
    "start": "215280",
    "end": "217920"
  },
  {
    "text": "we're using an alpine variant to keep",
    "start": "217920",
    "end": "220239"
  },
  {
    "text": "image sizes small",
    "start": "220239",
    "end": "222799"
  },
  {
    "text": "the exposed instruction lets users of",
    "start": "222799",
    "end": "225120"
  },
  {
    "text": "this image know that the container will",
    "start": "225120",
    "end": "226799"
  },
  {
    "text": "be listening on port 5000",
    "start": "226799",
    "end": "228959"
  },
  {
    "text": "the default class port the remainder of",
    "start": "228959",
    "end": "232239"
  },
  {
    "text": "the instructions set the working",
    "start": "232239",
    "end": "233760"
  },
  {
    "text": "directory",
    "start": "233760",
    "end": "234799"
  },
  {
    "text": "install dependencies and copy the main",
    "start": "234799",
    "end": "237360"
  },
  {
    "text": "application code",
    "start": "237360",
    "end": "239840"
  },
  {
    "text": "building the container is as simple as",
    "start": "239840",
    "end": "241599"
  },
  {
    "text": "running docker build",
    "start": "241599",
    "end": "242959"
  },
  {
    "text": "in the same directory as the docker file",
    "start": "242959",
    "end": "245200"
  },
  {
    "text": "and providing a tag so we can reference",
    "start": "245200",
    "end": "247360"
  },
  {
    "text": "the container later",
    "start": "247360",
    "end": "250000"
  },
  {
    "text": "you can test your container image",
    "start": "250000",
    "end": "251519"
  },
  {
    "text": "locally using the docker run command",
    "start": "251519",
    "end": "253680"
  },
  {
    "text": "and then use curl or your browser to",
    "start": "253680",
    "end": "255599"
  },
  {
    "text": "verify that it's working properly",
    "start": "255599",
    "end": "258720"
  },
  {
    "text": "after the container is built push it to",
    "start": "258720",
    "end": "261199"
  },
  {
    "text": "the light cell service you created",
    "start": "261199",
    "end": "263040"
  },
  {
    "text": "with the push container image command",
    "start": "263040",
    "end": "265120"
  },
  {
    "text": "provided by the light cell cli plugin",
    "start": "265120",
    "end": "267919"
  },
  {
    "text": "this command includes the name of the",
    "start": "267919",
    "end": "269440"
  },
  {
    "text": "container services you created in the",
    "start": "269440",
    "end": "271120"
  },
  {
    "text": "previous section",
    "start": "271120",
    "end": "272240"
  },
  {
    "text": "as well as the tag for the container",
    "start": "272240",
    "end": "274080"
  },
  {
    "text": "image you just built",
    "start": "274080",
    "end": "275440"
  },
  {
    "text": "this command stores the container image",
    "start": "275440",
    "end": "277600"
  },
  {
    "text": "with your container service",
    "start": "277600",
    "end": "279360"
  },
  {
    "text": "now you can reference it by its unique",
    "start": "279360",
    "end": "281199"
  },
  {
    "text": "id when you create a deployment",
    "start": "281199",
    "end": "285040"
  },
  {
    "text": "now that the service has been created",
    "start": "285280",
    "end": "286800"
  },
  {
    "text": "and the container image built",
    "start": "286800",
    "end": "288400"
  },
  {
    "text": "will return to the light cell console to",
    "start": "288400",
    "end": "290240"
  },
  {
    "text": "deploy your container service",
    "start": "290240",
    "end": "292960"
  },
  {
    "text": "back on the container service page",
    "start": "292960",
    "end": "294800"
  },
  {
    "text": "you'll see a new tab",
    "start": "294800",
    "end": "296160"
  },
  {
    "text": "has appeared called images this is where",
    "start": "296160",
    "end": "298800"
  },
  {
    "text": "you can view and administer the images",
    "start": "298800",
    "end": "300639"
  },
  {
    "text": "stored with your lifestyle container",
    "start": "300639",
    "end": "302240"
  },
  {
    "text": "service",
    "start": "302240",
    "end": "303840"
  },
  {
    "text": "on the deployments tab create a new",
    "start": "303840",
    "end": "305919"
  },
  {
    "text": "service and provide the necessary",
    "start": "305919",
    "end": "308840"
  },
  {
    "text": "parameters",
    "start": "308840",
    "end": "310639"
  },
  {
    "text": "provide a unique name for this container",
    "start": "310639",
    "end": "312560"
  },
  {
    "text": "and specify the image the container",
    "start": "312560",
    "end": "314400"
  },
  {
    "text": "should use",
    "start": "314400",
    "end": "315440"
  },
  {
    "text": "in this case the image you created in",
    "start": "315440",
    "end": "317280"
  },
  {
    "text": "the previous section but you could also",
    "start": "317280",
    "end": "319199"
  },
  {
    "text": "provide the name of a container and",
    "start": "319199",
    "end": "320800"
  },
  {
    "text": "public repository next",
    "start": "320800",
    "end": "324479"
  },
  {
    "text": "specify the configuration for the",
    "start": "324479",
    "end": "326080"
  },
  {
    "text": "container including the run command",
    "start": "326080",
    "end": "328080"
  },
  {
    "text": "in any environmental variables or open",
    "start": "328080",
    "end": "330400"
  },
  {
    "text": "ports",
    "start": "330400",
    "end": "331520"
  },
  {
    "text": "our flask application uses the flask run",
    "start": "331520",
    "end": "334160"
  },
  {
    "text": "command",
    "start": "334160",
    "end": "336560"
  },
  {
    "text": "and also needs to know where the flask",
    "start": "336639",
    "end": "338560"
  },
  {
    "text": "app is located",
    "start": "338560",
    "end": "341440"
  },
  {
    "text": "in addition we'll specify which port the",
    "start": "342320",
    "end": "344720"
  },
  {
    "text": "flask app is listening on",
    "start": "344720",
    "end": "346400"
  },
  {
    "text": "for 5000 finally",
    "start": "346400",
    "end": "350000"
  },
  {
    "text": "create a public endpoint a public",
    "start": "350000",
    "end": "352400"
  },
  {
    "text": "endpoint allows",
    "start": "352400",
    "end": "353360"
  },
  {
    "text": "end users or consumers of your service",
    "start": "353360",
    "end": "355360"
  },
  {
    "text": "to reach it from the internet",
    "start": "355360",
    "end": "357280"
  },
  {
    "text": "litecelle will create a secure public",
    "start": "357280",
    "end": "359319"
  },
  {
    "text": "https endpoint for your service",
    "start": "359319",
    "end": "362000"
  },
  {
    "text": "that is accessible through the default",
    "start": "362000",
    "end": "363840"
  },
  {
    "text": "domain name",
    "start": "363840",
    "end": "367120"
  },
  {
    "text": "once your service has been deployed you",
    "start": "367120",
    "end": "369280"
  },
  {
    "text": "can visit the public endpoint with your",
    "start": "369280",
    "end": "371039"
  },
  {
    "text": "browser by clicking on the link on the",
    "start": "371039",
    "end": "372880"
  },
  {
    "text": "service page",
    "start": "372880",
    "end": "374080"
  },
  {
    "text": "here you can verify that your flask",
    "start": "374080",
    "end": "375919"
  },
  {
    "text": "application has been deployed correctly",
    "start": "375919",
    "end": "378160"
  },
  {
    "text": "and is accepting traffic from the",
    "start": "378160",
    "end": "380000"
  },
  {
    "text": "internet",
    "start": "380000",
    "end": "382240"
  },
  {
    "text": "once you've verified that your container",
    "start": "382240",
    "end": "383919"
  },
  {
    "text": "service is operating correctly",
    "start": "383919",
    "end": "385680"
  },
  {
    "text": "and you're finished with it you can",
    "start": "385680",
    "end": "387520"
  },
  {
    "text": "easily delete your light cell container",
    "start": "387520",
    "end": "389520"
  },
  {
    "text": "service",
    "start": "389520",
    "end": "390080"
  },
  {
    "text": "and all resources associated with it",
    "start": "390080",
    "end": "392240"
  },
  {
    "text": "including deployments",
    "start": "392240",
    "end": "393520"
  },
  {
    "text": "and saved container images",
    "start": "393520",
    "end": "397120"
  },
  {
    "text": "in this video i've shown you how easy it",
    "start": "401280",
    "end": "403280"
  },
  {
    "text": "is to deploy a flask application in the",
    "start": "403280",
    "end": "405360"
  },
  {
    "text": "cloud using light cell containers",
    "start": "405360",
    "end": "407360"
  },
  {
    "text": "i demonstrated how to create a container",
    "start": "407360",
    "end": "409360"
  },
  {
    "text": "service using the light cell web console",
    "start": "409360",
    "end": "411919"
  },
  {
    "text": "how to create and push a docker",
    "start": "411919",
    "end": "413440"
  },
  {
    "text": "container to your light cell service",
    "start": "413440",
    "end": "415120"
  },
  {
    "text": "from the command line",
    "start": "415120",
    "end": "416400"
  },
  {
    "text": "and then how to deploy your container",
    "start": "416400",
    "end": "418240"
  },
  {
    "text": "from the console",
    "start": "418240",
    "end": "421199"
  },
  {
    "text": "amazon light cell containers is an easy",
    "start": "421280",
    "end": "423280"
  },
  {
    "text": "way to get started with containers in",
    "start": "423280",
    "end": "424880"
  },
  {
    "text": "the cloud",
    "start": "424880",
    "end": "425520"
  },
  {
    "text": "particularly for startups developers and",
    "start": "425520",
    "end": "427840"
  },
  {
    "text": "hobbyists taking their first steps into",
    "start": "427840",
    "end": "429680"
  },
  {
    "text": "containerization",
    "start": "429680",
    "end": "431840"
  },
  {
    "text": "you can use amazon light cell containers",
    "start": "431840",
    "end": "433840"
  },
  {
    "text": "to learn more about containers in the",
    "start": "433840",
    "end": "435520"
  },
  {
    "text": "cloud",
    "start": "435520",
    "end": "436160"
  },
  {
    "text": "to gain experience running containers in",
    "start": "436160",
    "end": "438240"
  },
  {
    "text": "the cloud and along the way",
    "start": "438240",
    "end": "439919"
  },
  {
    "text": "benefit from a simple container",
    "start": "439919",
    "end": "441680"
  },
  {
    "text": "orchestration",
    "start": "441680",
    "end": "443919"
  },
  {
    "text": "for more information about amazon light",
    "start": "443919",
    "end": "445840"
  },
  {
    "text": "cell containers please visit the light",
    "start": "445840",
    "end": "447680"
  },
  {
    "text": "cell product page",
    "start": "447680",
    "end": "448960"
  },
  {
    "text": "thank you",
    "start": "448960",
    "end": "451840"
  }
]