[
  {
    "text": "welcome everyone uh the room's full the doors are closed uh I before uh we got",
    "start": "880",
    "end": "6520"
  },
  {
    "text": "going I just wanted to remind uh to let folks know now you all in here but you might know people outside who weren't",
    "start": "6520",
    "end": "12360"
  },
  {
    "text": "able to get in we're doing a repeat session tomorrow morning at 10:00 so in case uh you meet folks who wanted to get",
    "start": "12360",
    "end": "18439"
  },
  {
    "text": "in here and then they couldn't that would be awesome uh so welcome uh thank you for staying till late in the",
    "start": "18439",
    "end": "24519"
  },
  {
    "text": "afternoon we stand and after last night I can only imagine you know right now is",
    "start": "24519",
    "end": "30840"
  },
  {
    "text": "about when people are starting to fade and there's another party right after this so that should be fun uh so 10:00",
    "start": "30840",
    "end": "37760"
  },
  {
    "text": "nobody shows up I would I won't take it personally uh so this is the talk for the Amazon ec2 container service my name",
    "start": "37760",
    "end": "44480"
  },
  {
    "text": "is Deepak Singh I own the container service team uh with me I have Dan GIS meire who's an engineer on the team uh",
    "start": "44480",
    "end": "51039"
  },
  {
    "text": "I'll do the fluffy pretty pictures Dan we'll do the real talk uh we'll see how that goes starting with uh pretty fluffy",
    "start": "51039",
    "end": "58160"
  },
  {
    "text": "pictures uh this is actually a out of our team's uh little pit uh we have a great View and it was not taken before",
    "start": "58160",
    "end": "64720"
  },
  {
    "text": "we walked into this conference it's from a few months ago when you can actually see the mountains and enjoy the sunshine",
    "start": "64720",
    "end": "69920"
  },
  {
    "text": "in Seattle it's quite pretty actually um but we are here to talk about containers",
    "start": "69920",
    "end": "75000"
  },
  {
    "text": "uh as I can imagine from the line outside this talk the Applause this morning and some of the lines I've seen",
    "start": "75000",
    "end": "81079"
  },
  {
    "text": "for the docker talks in this conference people are super interested in containers and how they can be used in",
    "start": "81079",
    "end": "87560"
  },
  {
    "text": "their applications and every everyone seems to be trying the them out in one way or the other and when we say",
    "start": "87560",
    "end": "93040"
  },
  {
    "text": "containers for all practical purposes we're talking Docker and after this slide containers and Docker are pretty",
    "start": "93040",
    "end": "100079"
  },
  {
    "text": "much synonymous with each other I won't try and disambiguate them at",
    "start": "100079",
    "end": "105200"
  },
  {
    "text": "all so the goal of this talk and as we started talking to customers who've been running containers in various forms and",
    "start": "105200",
    "end": "111399"
  },
  {
    "text": "Docker on ec2 for quite a bit of time it became pretty evident to us that for the kinds of workloads that customers ran uh",
    "start": "111399",
    "end": "118640"
  },
  {
    "text": "Docker and the cloud in general ec2 in particular made a ton of sense but uh",
    "start": "118640",
    "end": "124920"
  },
  {
    "text": "our goal and what we wanted to do was as we realize that all of this you know cloud and uh ec2 is like peanut butter",
    "start": "124920",
    "end": "131560"
  },
  {
    "text": "and jelly could be really really really make it a delicious meal and that's what we started off doing so why are",
    "start": "131560",
    "end": "137599"
  },
  {
    "text": "customers running Docker in the cloud uh these are not necessarily just AWS related features it could relate to",
    "start": "137599",
    "end": "143760"
  },
  {
    "text": "running Docker anywhere but uh I think they get even better when you run in a dynamic",
    "start": "143760",
    "end": "148840"
  },
  {
    "text": "environment one was EnV environmental Fidelity people have different kinds of environments they're running Docker on",
    "start": "148840",
    "end": "154560"
  },
  {
    "text": "their laptops they're running them in test servers they're running them in multiple ec2 regions for example AWS",
    "start": "154560",
    "end": "159599"
  },
  {
    "text": "regions and they want to maintain a consistent environment across all of them uh doc makes that pretty",
    "start": "159599",
    "end": "166159"
  },
  {
    "text": "easy people want to do deployments uh especially the kind of immutable deployments people have started doing",
    "start": "166159",
    "end": "171879"
  },
  {
    "text": "again the number of folks who have pipelines that use Docker underneath to do deployments was is just mushrooming",
    "start": "171879",
    "end": "177920"
  },
  {
    "text": "it's obviously works really well for that and I think it gets really really interesting in a very dynamic in a world",
    "start": "177920",
    "end": "184319"
  },
  {
    "text": "where you have Dynamic fleets uh if you want to do Dynamic Fleet Management and utilize their fleets even better uh the",
    "start": "184319",
    "end": "189840"
  },
  {
    "text": "way like thinking about it is people went from servers to Virtual machines to get better utilization they went from",
    "start": "189840",
    "end": "195400"
  },
  {
    "text": "virtual machines running in the cloud where you have Dynamic fleets to get even better more Dynamic utilization and",
    "start": "195400",
    "end": "201120"
  },
  {
    "text": "when you apply resource level management to it it gets even more you can be even more efficient with how you're using your",
    "start": "201120",
    "end": "206720"
  },
  {
    "text": "resources and finally I think this is where things got really inter in and what interested our team was people were starting to build some really",
    "start": "206720",
    "end": "212760"
  },
  {
    "text": "interesting applications uh using Docker which was it's a natural evolution of",
    "start": "212760",
    "end": "217799"
  },
  {
    "text": "things have gone where you start decomposing applications and you start writing them up as Services uh if",
    "start": "217799",
    "end": "224040"
  },
  {
    "text": "anybody's been to any of the uh talks that some of the senior Amazon people have given you've probably seen the",
    "start": "224040",
    "end": "230239"
  },
  {
    "text": "pictures of the service map of the amazon.com homepage which is's like hundreds of services that come together",
    "start": "230239",
    "end": "236640"
  },
  {
    "text": "and you know we've been doing that for years but I think as more and more people start adopting that kind of service based model uh things like",
    "start": "236640",
    "end": "243360"
  },
  {
    "text": "Docker came along and I think they just reduced the barrier to making it easy to develop like that so we wanted to make",
    "start": "243360",
    "end": "250159"
  },
  {
    "text": "that running applications that use dock underneath the hood whether you're using it for deployment especially if you're using it for distributed applications we",
    "start": "250159",
    "end": "257040"
  },
  {
    "text": "wanted to make that experience really really good so we did what we do well we",
    "start": "257040",
    "end": "262199"
  },
  {
    "text": "took a step back and started talking to a bunch of folks to understand what they wanted to do what they were running how",
    "start": "262199",
    "end": "267759"
  },
  {
    "text": "they were doing it and we learned a few things along on the way we learned that there were some barriers as they started",
    "start": "267759",
    "end": "273680"
  },
  {
    "text": "expanding the usage of docka and Docker enabled applications on the cloud as they were running applications that had",
    "start": "273680",
    "end": "279680"
  },
  {
    "text": "tens of containers hundreds of containers and in some cases thousands and hundreds of thousands of them uh",
    "start": "279680",
    "end": "285080"
  },
  {
    "text": "which were running on many many instances they run into certain challenges these included things like U cluster management which is okay I'm now",
    "start": "285080",
    "end": "292039"
  },
  {
    "text": "maintaining a cluster of machines I have to keep tabs of it I have to maintain the health of that cluster I have to get",
    "start": "292039",
    "end": "297960"
  },
  {
    "text": "cluster metadata uh I have to monitor that cluster how do I do that um perhaps",
    "start": "297960",
    "end": "303520"
  },
  {
    "text": "the one that gave people the most angst was how do you maintain cluster State how do you make decisions when machines",
    "start": "303520",
    "end": "308560"
  },
  {
    "text": "go away or in an extreme case where it could happen is an entire availability zone for example has some issues how do",
    "start": "308560",
    "end": "315039"
  },
  {
    "text": "you respond to that how do you get cluster State how do you respond to that and people had built pretty elaborate architectures to make sure that they",
    "start": "315039",
    "end": "321360"
  },
  {
    "text": "were being able to do this but it was an operational nightmare uh as their fleets were getting bigger uh they had to start",
    "start": "321360",
    "end": "328520"
  },
  {
    "text": "figuring out where all the ERS were what they were doing uh people had implemented interesting monitoring",
    "start": "328520",
    "end": "333680"
  },
  {
    "text": "pipelines ways of tracking resource utilization um there was another thing that was keeping people awake at night",
    "start": "333680",
    "end": "340560"
  },
  {
    "text": "and then you have the standard problems that you get when you're getting really big availability and scaling uh and all",
    "start": "340560",
    "end": "345919"
  },
  {
    "text": "of these things are tightly intertwined the one that we started seeing more of especially as we ran into customers from",
    "start": "345919",
    "end": "352639"
  },
  {
    "text": "um you know who were starting to deploy in production and most of the folks we were talking to were running were",
    "start": "352639",
    "end": "358280"
  },
  {
    "text": "starting to explore starting to rewrite their applications but there's a certain class of people who running a production",
    "start": "358280",
    "end": "363360"
  },
  {
    "text": "or customers who live in a world where they want to be careful from day one and that was our security and they wanted to",
    "start": "363360",
    "end": "370639"
  },
  {
    "text": "figure out they want they had questions they weren't sure what the right security models and constructs were which were uh keeping them from actually",
    "start": "370639",
    "end": "377840"
  },
  {
    "text": "going full bore and doing interesting things with docka the second side of the feedback we",
    "start": "377840",
    "end": "383199"
  },
  {
    "text": "got was around features features that our customers have gotten have learned to love uh they use extensively and help",
    "start": "383199",
    "end": "389560"
  },
  {
    "text": "and write really good applications and these are features that we keep developing and adding uh good examples of that would be things like elastic",
    "start": "389560",
    "end": "395720"
  },
  {
    "text": "load balancing uh one of the most common feature requests uh we got as we started talking to customers was hey I'd love to",
    "start": "395720",
    "end": "402240"
  },
  {
    "text": "put containers behind an elb I'd love to have each container get its own elastic",
    "start": "402240",
    "end": "407319"
  },
  {
    "text": "network interface and IP uh could I start using containers with EBS I'd like to be able to do that um tagging was",
    "start": "407319",
    "end": "414560"
  },
  {
    "text": "another common one um perhaps the most not surprisingly a scaling came up again",
    "start": "414560",
    "end": "420360"
  },
  {
    "text": "and again hey I want to use autoscaling for various activities Fleet Management uh reacting to load Etc and then you",
    "start": "420360",
    "end": "429280"
  },
  {
    "text": "wanted came in the availability and security aspects of it which were hey I want to run across multiple availability zones and how do I manage that uh I want",
    "start": "429280",
    "end": "436479"
  },
  {
    "text": "to be able to use I identity and access management apply roles and security groups to my containers run uh you know",
    "start": "436479",
    "end": "443000"
  },
  {
    "text": "make sure that people in this business unit and people in another business unit can run in comfortably without",
    "start": "443000",
    "end": "448520"
  },
  {
    "text": "interfering with each other so these started coming up again and again and again",
    "start": "448520",
    "end": "454879"
  },
  {
    "text": "so when you think about it what people really asking us for is can you make docka enabled applications first class",
    "start": "454879",
    "end": "461039"
  },
  {
    "text": "apis in the AWS ecosystem can you give us an E2 like experience with containers and that's what we built so",
    "start": "461039",
    "end": "467360"
  },
  {
    "text": "the Amazon ec2 container service is a is a service that's designed to be a a set",
    "start": "467360",
    "end": "472520"
  },
  {
    "text": "of Primitives that allow you to build applications they allow you to build services on top of it uh much the way",
    "start": "472520",
    "end": "477639"
  },
  {
    "text": "ec2 does and give you the kind of experience that people have become used to at the ac2 level but now doing it",
    "start": "477639",
    "end": "483720"
  },
  {
    "text": "with docka so what what is it it's a building block Service as I",
    "start": "483720",
    "end": "489960"
  },
  {
    "text": "just said or we think about it in those terms as we think of the feature sets we try very hard to imagine what it would",
    "start": "489960",
    "end": "496159"
  },
  {
    "text": "be like for folks who want to build on top of us not just on applications but actually build Services uh of all kinds",
    "start": "496159",
    "end": "502440"
  },
  {
    "text": "and platforms using us as a core building block uh we had to get the",
    "start": "502440",
    "end": "507800"
  },
  {
    "text": "cluster management side right that seemed to be the challenge everybody was running into so we did it there's two",
    "start": "507800",
    "end": "513080"
  },
  {
    "text": "things that it does we manage our containers so every container that you launch we track it we keep its metadata",
    "start": "513080",
    "end": "518959"
  },
  {
    "text": "you know what instance it's running on you know what instance type it's running on uh you and you get a lot of other",
    "start": "518959",
    "end": "524800"
  },
  {
    "text": "information along with it and it manages cluster State uh for those of you who have run large do doab based cluster",
    "start": "524800",
    "end": "531519"
  },
  {
    "text": "installations you probably run some kind of state management system uh with with the ec2 container service you don't have",
    "start": "531519",
    "end": "537760"
  },
  {
    "text": "to everything is in in one API call uh we have an API call called described cluster that you can whether you're",
    "start": "537760",
    "end": "545040"
  },
  {
    "text": "running one container two containers a thousand containers 10,000 containers doesn't matter it's one API call that gives you your cluster State I don't",
    "start": "545040",
    "end": "551640"
  },
  {
    "text": "have to run any state management system or any cluster management software um we also decided to build aul",
    "start": "551640",
    "end": "558640"
  },
  {
    "text": "uh this is the first schul we've built uh the goal of the schul is to give us a",
    "start": "558640",
    "end": "563680"
  },
  {
    "text": "set of containers and we try and find a place for you to run them efficiently but because we also give you full",
    "start": "563680",
    "end": "569760"
  },
  {
    "text": "cluster State you can build your own you can write any Schuler talk to our state man uh to talk to a describe cluster API",
    "start": "569760",
    "end": "576640"
  },
  {
    "text": "and then try and write the business logic uh that helps you place them uh if you're using a scheduler today uh it",
    "start": "576640",
    "end": "583279"
  },
  {
    "text": "doesn't take that long to convert our response to what that schedule is",
    "start": "583279",
    "end": "589160"
  },
  {
    "text": "expecting uh I've already talked about scale quite a bit but in general we wanted the effort required to run a few",
    "start": "589160",
    "end": "595040"
  },
  {
    "text": "containers and the effort required to run 100,000 containers to be our problem not yours",
    "start": "595040",
    "end": "601320"
  },
  {
    "text": "and we wanted this to be really fast we don't want to be in a place where you launch thousand containers and it's taking you minutes you know tens of",
    "start": "601440",
    "end": "607200"
  },
  {
    "text": "minutes you wanted that to also be in the seconds uh there are another another",
    "start": "607200",
    "end": "612240"
  },
  {
    "text": "aspect that we wanted to achieve and that's what uh ECS gives you and we want it to be secure and the way we do this",
    "start": "612240",
    "end": "618959"
  },
  {
    "text": "is these are your containers and your instances you launch the in the instances running under your account",
    "start": "618959",
    "end": "624279"
  },
  {
    "text": "with the containers running under your account you can uh you get all the benefits that you get along Ong with",
    "start": "624279",
    "end": "630240"
  },
  {
    "text": "that and they run inside VPC so your clusters always run inside a VPC uh",
    "start": "630240",
    "end": "636320"
  },
  {
    "text": "which gives you you can take advantage of the features that VPC has and in the longer term we'll be able to do more interesting things uh for networking in",
    "start": "636320",
    "end": "642880"
  },
  {
    "text": "general apparently uh people no I spelled security right unlike uh the",
    "start": "642880",
    "end": "648320"
  },
  {
    "text": "keynote uh I was worried that I also spelled it wrong uh so you can use security groups you can use Network",
    "start": "648320",
    "end": "654880"
  },
  {
    "text": "accles you can you know is isolate you get levels of isolation uh because you're using your instances and and",
    "start": "654880",
    "end": "661320"
  },
  {
    "text": "running in a VPC and to talk about sort of the components and how our servic is",
    "start": "661320",
    "end": "666920"
  },
  {
    "text": "constructed I'd like to hand this over to Dan thank you",
    "start": "666920",
    "end": "672200"
  },
  {
    "text": "deac you know it's a it's amazing to see how many people are in this room and they share the same excitement and",
    "start": "676880",
    "end": "682120"
  },
  {
    "text": "passion I do for this space um and so uh I want to walk you through like debx said some of the components um uh in our",
    "start": "682120",
    "end": "689320"
  },
  {
    "text": "service and then kind of after that go into a demo and hopefully the demo Gods will be nice today and uh it'll all work",
    "start": "689320",
    "end": "695800"
  },
  {
    "text": "um so uh talking about the components of the ec2 container service uh we have",
    "start": "695800",
    "end": "701600"
  },
  {
    "text": "four sort of runtime components we have tasks we have containers we have clusters and we have container instances",
    "start": "701600",
    "end": "709360"
  },
  {
    "text": "as task is sort of the unit that we use for uh scheduling your work scheduling your containers I'm going to start with",
    "start": "709360",
    "end": "715399"
  },
  {
    "text": "that one and so what is a task uh what we think of as a task is a a grouping of",
    "start": "715399",
    "end": "720839"
  },
  {
    "text": "related containers uh these this could be one container this could be many containers uh they could be linked they",
    "start": "720839",
    "end": "726639"
  },
  {
    "text": "could have shared volumes they could be not linked and so what does this mean uh and so that I'd like to go through an",
    "start": "726639",
    "end": "731839"
  },
  {
    "text": "example uh on the screen on the left you see uh I have a box it's that's actually a container um and it's running an",
    "start": "731839",
    "end": "738760"
  },
  {
    "text": "engine X web server uh this is linked to a rails application and so this is a",
    "start": "738760",
    "end": "744000"
  },
  {
    "text": "pretty common architecture where you might have engine next put in front to do a lot of the heavy lifting uh",
    "start": "744000",
    "end": "749160"
  },
  {
    "text": "authentication htps uh and then putting your business logic inside your rails application um this rails application is",
    "start": "749160",
    "end": "756160"
  },
  {
    "text": "linked to a mySQL database for uh storage and then it's also linked for a log collector that collects the uh logs",
    "start": "756160",
    "end": "763360"
  },
  {
    "text": "from the rails application and uh rotates them and uh uploads them so you can see them so uh in this sample",
    "start": "763360",
    "end": "770680"
  },
  {
    "text": "application you have a couple links between your containers you have a volume mounted in uh into your rails",
    "start": "770680",
    "end": "776199"
  },
  {
    "text": "application and the benefit of this architecture is that it's very easy to develop on a single place and a piece",
    "start": "776199",
    "end": "783399"
  },
  {
    "text": "and to swap out a single piece at any part of the uh place of the application but then we can sort of Define this",
    "start": "783399",
    "end": "790040"
  },
  {
    "text": "metadata around it to keep everything grouped together and so uh how do we Define a task uh on the next slide we",
    "start": "790040",
    "end": "797600"
  },
  {
    "text": "have uh a task definition uh and it's just three simple components uh we have a family we have a version and we have a",
    "start": "797600",
    "end": "805000"
  },
  {
    "text": "list of container definitions uh and So a family is just a name that uh keeps your task together uh",
    "start": "805000",
    "end": "811959"
  },
  {
    "text": "so in the first example we had uh engine X rails uh you know some storage and a",
    "start": "811959",
    "end": "817160"
  },
  {
    "text": "log collector you know ultimately what this comes down to is this is my website and so I'm going to call it my website",
    "start": "817160",
    "end": "823040"
  },
  {
    "text": "if I want to change out uh engine X for something else if I want to change out rails if I want to uh insert more uh",
    "start": "823040",
    "end": "830160"
  },
  {
    "text": "containers into this uh I can while keeping uh this logical construct group",
    "start": "830160",
    "end": "835279"
  },
  {
    "text": "together uh version is 1.0 um and this is because it's the first version uh you",
    "start": "835279",
    "end": "841079"
  },
  {
    "text": "can uh interesting thing here though is you know sequential versioning is often times uh difficult uh we understand a",
    "start": "841079",
    "end": "846920"
  },
  {
    "text": "lot of you have automated build systems uh that you know build a lot of things all the time and it's hard to to go 1.1",
    "start": "846920",
    "end": "854040"
  },
  {
    "text": "1.2 1.3 and so version here you know it could take your get hash commit it could take a uuid or you can do sequential",
    "start": "854040",
    "end": "860199"
  },
  {
    "text": "versioning yourself um so and the last thing here is these container definitions and so I wanted to spend a",
    "start": "860199",
    "end": "867720"
  },
  {
    "text": "little more time on what these are because this is really the meat of uh of the specification and so what a",
    "start": "867720",
    "end": "873920"
  },
  {
    "text": "container definition is is it's a name for your container uh and it also is uh",
    "start": "873920",
    "end": "879759"
  },
  {
    "text": "the image that you'll be running uh the image is going to be given in a standard sort of Docker format where you have",
    "start": "879759",
    "end": "884920"
  },
  {
    "text": "your repository slame colon and then your tag uh so then you'll be able to uh",
    "start": "884920",
    "end": "890880"
  },
  {
    "text": "pull images from dockerhub you'll be able to pull it from private repositories or anywhere where you want to get your image from uh the container",
    "start": "890880",
    "end": "897880"
  },
  {
    "text": "definition also includes default runtime attributes for your container and these would be things that you would see if you were to do a Docker run command like",
    "start": "897880",
    "end": "904199"
  },
  {
    "text": "your environment variables your Port mappings your container entry poting commands and resource constraints and",
    "start": "904199",
    "end": "910480"
  },
  {
    "text": "sort of why we do this is because uh often times these are are very static and they're really a key part of your",
    "start": "910480",
    "end": "916440"
  },
  {
    "text": "application uh like these environment variables have to be there and so by forgetting them at runtime you're you're",
    "start": "916440",
    "end": "921600"
  },
  {
    "text": "you're kind of putting yourself more prone to uh uh runtime errors and so by checking this in and versioning it uh",
    "start": "921600",
    "end": "927240"
  },
  {
    "text": "you can keep it all the same uh at the same time you know the you know doctor sort of made these runtime commands for",
    "start": "927240",
    "end": "933319"
  },
  {
    "text": "a reason and uh a lot of them will change uh depending on uh your",
    "start": "933319",
    "end": "938360"
  },
  {
    "text": "environment an example of that is you might pass in a command of a file that you're getting out of sqsq uh and you",
    "start": "938360",
    "end": "945079"
  },
  {
    "text": "want to modify that at runtime and so we allow the ability to sort of override your container definition uh when you",
    "start": "945079",
    "end": "950639"
  },
  {
    "text": "are actually starting to run your task and so an example of that uh again going",
    "start": "950639",
    "end": "955959"
  },
  {
    "text": "back to the original example of the uh engine X and the rails application is we have uh a name",
    "start": "955959",
    "end": "962399"
  },
  {
    "text": "and this name is just a web server uh and this is will be the name that's referred to uh if you uh create any",
    "start": "962399",
    "end": "967920"
  },
  {
    "text": "links uh in later tasks uh we have an image and like I said the image is just a standard Docker format like you'd see",
    "start": "967920",
    "end": "974199"
  },
  {
    "text": "on a Docker run command uh we have engine X latest uh CPU here is 512 and",
    "start": "974199",
    "end": "980079"
  },
  {
    "text": "that meas unit of measure might be interesting for uh some of you out there and that's actually in CPU shares uh and",
    "start": "980079",
    "end": "985920"
  },
  {
    "text": "I'll talk about that a little bit more in a minute uh after I kind of go down through the rest of this uh memory is in",
    "start": "985920",
    "end": "991360"
  },
  {
    "text": "megabytes so we have 128 megabytes of memory uh in our container for engine X",
    "start": "991360",
    "end": "996639"
  },
  {
    "text": "we're actually running it on Port 9443 uh when that gets ran on our instance it's going to get mapped",
    "start": "996639",
    "end": "1002560"
  },
  {
    "text": "through to our host Port of 443 which is the default https Port uh we're linking",
    "start": "1002560",
    "end": "1008160"
  },
  {
    "text": "it to the rails application and like I said this is just the name of the next container definition uh that would be",
    "start": "1008160",
    "end": "1013680"
  },
  {
    "text": "called rails and the last thing is a a flag uh essential and what this does is",
    "start": "1013680",
    "end": "1020199"
  },
  {
    "text": "it's uh letting us know that if this or if this container were to die we would",
    "start": "1020199",
    "end": "1025400"
  },
  {
    "text": "want to bring down your entire task because there's no meaning of of the task without this container being part",
    "start": "1025400",
    "end": "1030678"
  },
  {
    "text": "of it um there are sometimes where you might have a container where you know if it if it uh finishes early or finishes a",
    "start": "1030679",
    "end": "1036720"
  },
  {
    "text": "batch job you might still want to leave up the other ones and let them finish but they're still part of a task uh but",
    "start": "1036720",
    "end": "1042319"
  },
  {
    "text": "however in this case because interex is really fronting our web traffic it is essential to uh our task and if that",
    "start": "1042319",
    "end": "1048240"
  },
  {
    "text": "were to fail we would fail all the rest of the containers so they wouldn't be wasting your resources in your",
    "start": "1048240",
    "end": "1053679"
  },
  {
    "text": "cluster uh so I mentioned I came back to CPU shares um and this is a a relative unit of measure uh and so what this is",
    "start": "1053679",
    "end": "1060799"
  },
  {
    "text": "saying is uh we will get we uh engine NEX is guaranteed at least 50% of a",
    "start": "1060799",
    "end": "1067400"
  },
  {
    "text": "single core in time for the uh for the container and that's because when we",
    "start": "1067400",
    "end": "1073320"
  },
  {
    "text": "when we register your instances with us uh we check in with a 1,24 resources",
    "start": "1073320",
    "end": "1079400"
  },
  {
    "text": "or CPU shares per uh core and so by saying 512 we're saying half a core and",
    "start": "1079400",
    "end": "1086039"
  },
  {
    "text": "now if you're your instance wasn't loaded with anything your engine X would get to burst up and and be able to use",
    "start": "1086039",
    "end": "1092000"
  },
  {
    "text": "all of the available resources but as you started to stack uh more and more tasks you're still guaranteed at least",
    "start": "1092000",
    "end": "1098240"
  },
  {
    "text": "that amount of time so uh we talked now about tasks we",
    "start": "1098240",
    "end": "1104080"
  },
  {
    "text": "talked about containers and I I I want to move now into uh the other two",
    "start": "1104080",
    "end": "1109240"
  },
  {
    "text": "components uh of clusters and container instances and so a cluster kind of bridges this world it really has two",
    "start": "1109240",
    "end": "1116720"
  },
  {
    "text": "definitions uh it's provides a pool of resources for your tasks so as you register these instances in all the",
    "start": "1116720",
    "end": "1122960"
  },
  {
    "text": "precious resources that you have of your CPU of your memory of your ports because those are truly limited on a on a per",
    "start": "1122960",
    "end": "1129240"
  },
  {
    "text": "server basis uh uh get get added uh but it's also a a grouping of all your",
    "start": "1129240",
    "end": "1136480"
  },
  {
    "text": "container instances so this is uh as you can check more container instances in your cluster this available pool",
    "start": "1136480",
    "end": "1142760"
  },
  {
    "text": "resources grows um many people like to call these container instances ships because uh that they're you know kind of",
    "start": "1142760",
    "end": "1149080"
  },
  {
    "text": "analogous as you're stacking containers onto a single ship um for the ec2",
    "start": "1149080",
    "end": "1154200"
  },
  {
    "text": "container service uh this starts empty uh and dynamically scalable so if you",
    "start": "1154200",
    "end": "1159919"
  },
  {
    "text": "want to start off with a cluster of one instance uh you can do that and as you need more you can add instances into",
    "start": "1159919",
    "end": "1165480"
  },
  {
    "text": "your cluster and as you decide you don't need them anymore because you have have less tasks running you can scale them",
    "start": "1165480",
    "end": "1170679"
  },
  {
    "text": "down uh there's no need to recreate the cluster there's no need to uh to do anything like that um so what is a",
    "start": "1170679",
    "end": "1178280"
  },
  {
    "text": "container instance uh you know I'm sure you guys are probably thinking that right now um and",
    "start": "1178280",
    "end": "1184600"
  },
  {
    "text": "how is it relate to a normal instance how do I use this and and when I talk about a container instance it's really",
    "start": "1184600",
    "end": "1190480"
  },
  {
    "text": "an instance that has our ECS or ec2 container service agent installed um and our ec2 container",
    "start": "1190480",
    "end": "1198159"
  },
  {
    "text": "service agent agent is a agent written in go that actually runs inside the container itself uh it's responsible for",
    "start": "1198159",
    "end": "1205799"
  },
  {
    "text": "checking the instance into your cluster it performs uh all the heavy lifting of making sure that the containers on your",
    "start": "1205799",
    "end": "1213520"
  },
  {
    "text": "uh your individual instance stay up uh and it reports all the information back",
    "start": "1213520",
    "end": "1218880"
  },
  {
    "text": "to the service um we will ship a a a Amazon Linux version uh with our",
    "start": "1218880",
    "end": "1225120"
  },
  {
    "text": "container agent already installed uh with all the extra packages stripped out and all ready for Docker with the",
    "start": "1225120",
    "end": "1231400"
  },
  {
    "text": "correct tail specified the correct kernel uh uh config and uh really",
    "start": "1231400",
    "end": "1236840"
  },
  {
    "text": "optimized for uh running Docker containers so uh with that I would like",
    "start": "1236840",
    "end": "1244200"
  },
  {
    "text": "to uh jump into a quick demo to give you an ideas of what this kind of looks like when it comes",
    "start": "1244200",
    "end": "1250440"
  },
  {
    "text": "together so uh first of all like I said we need a we need a cluster and so I'm",
    "start": "1250440",
    "end": "1255480"
  },
  {
    "text": "going to start off by creating a cluster so it WS ECS create cluster and I'm",
    "start": "1255480",
    "end": "1262120"
  },
  {
    "text": "going to name it default and we get back uh a Json blob",
    "start": "1262120",
    "end": "1268240"
  },
  {
    "text": "and I hope this font's big enough for those in the back I didn't really want to make it uh much bigger uh otherwise",
    "start": "1268240",
    "end": "1274120"
  },
  {
    "text": "we might lose some space on the screen uh we have a a a cluster AR that we get",
    "start": "1274120",
    "end": "1279200"
  },
  {
    "text": "back and this is an Amazon resource name uh this for those of you who have used uh security policies uh or I'm sorry uh",
    "start": "1279200",
    "end": "1287640"
  },
  {
    "text": "IM am policies uh or if you have used sqs or SNS this sort of uh syntax is probably very",
    "start": "1287640",
    "end": "1293320"
  },
  {
    "text": "familiar to you uh we have that cluster name that we registered with then our our our cluster is now active um and so",
    "start": "1293320",
    "end": "1300159"
  },
  {
    "text": "now we need to launch some instances into it and so I'm going to go to the uh ec2 uh console and I'm going to launch",
    "start": "1300159",
    "end": "1307640"
  },
  {
    "text": "some instances I have my Omi here created it's the ECS version enabled",
    "start": "1307640",
    "end": "1313159"
  },
  {
    "text": "version of Amazon Linux I'm going to choose some instance types to launch into it and I'll just pick some uh M3",
    "start": "1313159",
    "end": "1320000"
  },
  {
    "text": "extra larges they provide a decent number of CPU a decent amount of memory and a pretty good",
    "start": "1320000",
    "end": "1325400"
  },
  {
    "text": "mix uh so as far as number of instances uh let's choose a number that will kind",
    "start": "1325400",
    "end": "1330600"
  },
  {
    "text": "of display well on a screen uh so we can visualize this but then also is is you know less more than one so I'm going to",
    "start": "1330600",
    "end": "1336720"
  },
  {
    "text": "pick 12 uh we're going to attach an IM roll to the box for uh it's the ECS uh",
    "start": "1336720",
    "end": "1342919"
  },
  {
    "text": "container instance Ro and what this uh Ro has in it is it has a i policy allow",
    "start": "1342919",
    "end": "1348520"
  },
  {
    "text": "owing my agent to check this instance into this cluster uh so it provides all",
    "start": "1348520",
    "end": "1354039"
  },
  {
    "text": "the credentials necessary to perform that uh we're operating this in a VPC",
    "start": "1354039",
    "end": "1359400"
  },
  {
    "text": "everything else looks good so let's add some storage uh I just chose 30 gigaby",
    "start": "1359400",
    "end": "1364919"
  },
  {
    "text": "uh because that seems like a reasonable amount of space to make sure that my container images will download and save",
    "start": "1364919",
    "end": "1370600"
  },
  {
    "text": "I'm just going to use the general purpose SSD storage uh we don't need any tags I have a security group here and",
    "start": "1370600",
    "end": "1377080"
  },
  {
    "text": "hopefully it will work that will allow me to uh both SSH into my instance and also uh access",
    "start": "1377080",
    "end": "1384080"
  },
  {
    "text": "HTTP and so now let's go ahead and launch these 12",
    "start": "1384080",
    "end": "1389200"
  },
  {
    "text": "instances and we'll go back to the homepage and so uh while those go ahead",
    "start": "1390159",
    "end": "1397600"
  },
  {
    "text": "and launch let's go ahead and prepare our task definition and get that ready to launch on this cluster and so uh here",
    "start": "1397600",
    "end": "1405799"
  },
  {
    "text": "I'll open up I have one uh already and I have a WordPress and this is kind",
    "start": "1405799",
    "end": "1412240"
  },
  {
    "text": "of an interesting example uh because it's an application that many people are very familiar with um it also spans",
    "start": "1412240",
    "end": "1418559"
  },
  {
    "text": "multiple containers and so you'll see sort of the link functionality in there we have a uh WordPress stackable",
    "start": "1418559",
    "end": "1424080"
  },
  {
    "text": "container uh that's just being pulled straight from Docker hub from a a a third party developer who's who's",
    "start": "1424080",
    "end": "1429679"
  },
  {
    "text": "gracious enough to to to build this for the community um and we also have a MySQL uh image as well from from Docker",
    "start": "1429679",
    "end": "1436520"
  },
  {
    "text": "Hub uh here you'll see kind of what we talked about before we don't really give much CPU to these resources uh we give a",
    "start": "1436520",
    "end": "1442960"
  },
  {
    "text": "decent amount of memory to both uh they're both marked as essential because if our database is down the mysql's",
    "start": "1442960",
    "end": "1448760"
  },
  {
    "text": "pretty worthless if the or the databas down our WordPress is pretty worthless and vice versa um uh we're passing in",
    "start": "1448760",
    "end": "1456200"
  },
  {
    "text": "environment variables back and forth between the uh environments uh just to set up our database uh and we have a",
    "start": "1456200",
    "end": "1462760"
  },
  {
    "text": "port mapping from our WordPress to the instance and so when this container launches it's going to bind itself to",
    "start": "1462760",
    "end": "1468520"
  },
  {
    "text": "Port 80 on the host uh we're going to have a a Q&A at",
    "start": "1468520",
    "end": "1474360"
  },
  {
    "text": "the end and I'll I'll take questions then thanks",
    "start": "1474360",
    "end": "1478799"
  },
  {
    "text": "so so uh here we have our instances running uh and I go to this uh cluster",
    "start": "1480919",
    "end": "1488799"
  },
  {
    "text": "view here uh this is just something that we uh we built as a team one of the developers uh threw it together in a",
    "start": "1488799",
    "end": "1494840"
  },
  {
    "text": "night it runs uh on my Local Host right here in a Docker container actually um",
    "start": "1494840",
    "end": "1500919"
  },
  {
    "text": "and what this is doing is it's calling our apis and it's loading all of the information about our uh cluster and our",
    "start": "1500919",
    "end": "1507200"
  },
  {
    "text": "instances so we can see right now 11 of our 12 instances have started up and have been checked in uh they're all",
    "start": "1507200",
    "end": "1513720"
  },
  {
    "text": "running M3 extra larges we can see the IP addresses the ec2 IDS as well uh and then we're actually running zero tasks",
    "start": "1513720",
    "end": "1520240"
  },
  {
    "text": "and zero containers um so I don't know what happened to that last one hopefully it will pop in soon um uh in the meantime",
    "start": "1520240",
    "end": "1528360"
  },
  {
    "text": "time let's go ahead and take that WordPress and let's register it with the service uh so AWS ECS uh and we're going",
    "start": "1528360",
    "end": "1535000"
  },
  {
    "text": "to do uh register task definition make sure I spelled this",
    "start": "1535000",
    "end": "1540399"
  },
  {
    "text": "right uh and we're going to give it a family of Wordpress and a version uh",
    "start": "1540399",
    "end": "1545880"
  },
  {
    "text": "we'll just pick 1.0 we'll pass in that Json and we get back our response here",
    "start": "1545880",
    "end": "1552840"
  },
  {
    "text": "uh and so this response is very similar to what we put in it tells us exactly uh that same container definition list that",
    "start": "1552840",
    "end": "1558520"
  },
  {
    "text": "we did we we had in that Json blob uh and then we also get a Amazon resource",
    "start": "1558520",
    "end": "1563840"
  },
  {
    "text": "name uh assigned to it which is the added line uh now that we've registered it was that easy we're ready to run it",
    "start": "1563840",
    "end": "1570520"
  },
  {
    "text": "uh so we can just do AWS uh ECS run task WordPress",
    "start": "1570520",
    "end": "1578200"
  },
  {
    "text": "1.0 and so it says uh it it starts running uh let's flip to the UI really",
    "start": "1578200",
    "end": "1584080"
  },
  {
    "text": "quick to see where uh it gets placed",
    "start": "1584080",
    "end": "1590240"
  },
  {
    "text": "and uh you can see now the uh the container was placed on on the first host right here uh yellow means that",
    "start": "1591960",
    "end": "1597720"
  },
  {
    "text": "it's pinning so it's uh the containers are still being started up so sometimes",
    "start": "1597720",
    "end": "1602919"
  },
  {
    "text": "there's a time to pull the image or or prepare things uh and so now it turned",
    "start": "1602919",
    "end": "1608039"
  },
  {
    "text": "to green and so our images are ready and so now if everything uh works as into plan we can open up this link in a new",
    "start": "1608039",
    "end": "1614200"
  },
  {
    "text": "tab and we can see that we actually have a WordPress uh installation p page",
    "start": "1614200",
    "end": "1619550"
  },
  {
    "text": "[Applause]",
    "start": "1619550",
    "end": "1624569"
  },
  {
    "text": "already so uh kind of going back to uh that data we got back from that run task",
    "start": "1627120",
    "end": "1632960"
  },
  {
    "text": "uh we we get all this metadata Associated uh of of what is our task uh ID what is our task definition ID that",
    "start": "1632960",
    "end": "1639840"
  },
  {
    "text": "we launched it with where was this launched uh were there any overrides supplied and what are they uh and then",
    "start": "1639840",
    "end": "1646080"
  },
  {
    "text": "we also get to know about what is our last stus our desired status uh of both the at the task level and the container",
    "start": "1646080",
    "end": "1652360"
  },
  {
    "text": "level and so if I were to go and grab this task ID and I were to do a uh",
    "start": "1652360",
    "end": "1657559"
  },
  {
    "text": "describe call on it you would see now that our last",
    "start": "1657559",
    "end": "1663399"
  },
  {
    "text": "status is running our desired status is running and both of our containers are running so uh WordPress is a pretty cool",
    "start": "1663399",
    "end": "1672039"
  },
  {
    "text": "example of a service that you know comes up it stays up for a while you might make some development changes and and",
    "start": "1672039",
    "end": "1677679"
  },
  {
    "text": "change it now and again uh but we also uh when we were designing and building the ec2 container service we also wanted",
    "start": "1677679",
    "end": "1683600"
  },
  {
    "text": "to think a lot about uh batch tasks and what does it mean to have you know something that's truly this fast and how",
    "start": "1683600",
    "end": "1690600"
  },
  {
    "text": "can I take advantage of something that's so short running that I can just spawn it up it can run for 10 15 20 seconds",
    "start": "1690600",
    "end": "1696720"
  },
  {
    "text": "and come down and and get out of my way and so um I have uh an example of that",
    "start": "1696720",
    "end": "1702840"
  },
  {
    "text": "it's not the most interesting example in the world all it does is sleep but it kind of gives you it kind of shows you",
    "start": "1702840",
    "end": "1708600"
  },
  {
    "text": "uh how you can start up these uh tasks that will only run for 30 seconds and",
    "start": "1708600",
    "end": "1714240"
  },
  {
    "text": "they start up so fast they come out of your cluster so fast you have the resources available for anything else uh",
    "start": "1714240",
    "end": "1719679"
  },
  {
    "text": "and you don't have to worry about where you're placing them or anything and so uh I actually have these already",
    "start": "1719679",
    "end": "1724840"
  },
  {
    "text": "registered so I can uh here do a uh describe Tas definition on",
    "start": "1724840",
    "end": "1736080"
  },
  {
    "text": "sleep I'm sorry",
    "start": "1737039",
    "end": "1740600"
  },
  {
    "text": "list and you see we have uh three sleep tasks we have one that lasts 15 seconds",
    "start": "1744320",
    "end": "1749880"
  },
  {
    "text": "one that lasts 30 seconds and one that lasts 5 minutes and here again this is an example of how we take arbitrary",
    "start": "1749880",
    "end": "1754960"
  },
  {
    "text": "strings as versioning and whatever really works for you for versioning uh works for us and so uh we can go ahead",
    "start": "1754960",
    "end": "1761919"
  },
  {
    "text": "and we can uh repeat that previous command and we can just feed this all into our run tasks and we'll can launch",
    "start": "1761919",
    "end": "1771039"
  },
  {
    "text": "10 of each of these uh and so for those of you who are familiar with uh xargs is",
    "start": "1771039",
    "end": "1777600"
  },
  {
    "text": "just going to pass the uh the output of the previous command that came out of standard out as arguments to the to the",
    "start": "1777600",
    "end": "1784640"
  },
  {
    "text": "next um so now uh it's going to start uh 30",
    "start": "1784640",
    "end": "1791360"
  },
  {
    "text": "different tasks uh across all my instances some of these are going to run for 15 seconds some are going to run for",
    "start": "1791360",
    "end": "1797720"
  },
  {
    "text": "30 seconds some we're going to run for 5 minutes and so uh you see they all start popping up across my cluster uh they all",
    "start": "1797720",
    "end": "1805000"
  },
  {
    "text": "get placed uh sort of spread out evenly uh for the most part uh some things end",
    "start": "1805000",
    "end": "1810120"
  },
  {
    "text": "up get placed a little bit uh closer than others um and some of these are going to start up you're going to turn green some of them are going to turn red",
    "start": "1810120",
    "end": "1816159"
  },
  {
    "text": "you're going to find them falling out of the cluster uh for the ones that lasted 15 seconds uh the ones that lasted 30",
    "start": "1816159",
    "end": "1821799"
  },
  {
    "text": "seconds are going to stay a bit longer and the ones that going to have 5 minutes they're going to stay the longest and and all the while my word",
    "start": "1821799",
    "end": "1828000"
  },
  {
    "text": "press is still up and running so I can share these host for both these long running uh workloads such as Services as",
    "start": "1828000",
    "end": "1834399"
  },
  {
    "text": "well as uh do batch processing to uh absorb some of that extra uh space and",
    "start": "1834399",
    "end": "1840399"
  },
  {
    "text": "increase our utilization and so here we see some of",
    "start": "1840399",
    "end": "1846039"
  },
  {
    "text": "our busy boxes stopping and the remaining are",
    "start": "1846039",
    "end": "1851080"
  },
  {
    "text": "left uh and so with that I'm going to end this demo uh very similar to the one that we did on stage uh during the key",
    "start": "1851080",
    "end": "1858120"
  },
  {
    "text": "for those of you who saw it I'm just going to list all our tasks and I'm going to pipe that into stop task and",
    "start": "1858120",
    "end": "1866039"
  },
  {
    "text": "kill",
    "start": "1866039",
    "end": "1868320"
  },
  {
    "text": "everything and as those processed now uh we flip back to our UI and we're going",
    "start": "1877320",
    "end": "1882799"
  },
  {
    "text": "to find ourselves as this refreshes uh with an empty cluster",
    "start": "1882799",
    "end": "1889919"
  },
  {
    "text": "and so uh now everything is empty uh and we can tear down our cluster uh and with",
    "start": "1892159",
    "end": "1897200"
  },
  {
    "text": "that I would like to hand it back to to [Applause]",
    "start": "1897200",
    "end": "1904700"
  },
  {
    "text": "deepok all right uh I hope you like that I mean it was a very uh simple uh",
    "start": "1906559",
    "end": "1912840"
  },
  {
    "text": "example of the kinds of things that you can do with uh ec2 container service uh",
    "start": "1912840",
    "end": "1918120"
  },
  {
    "text": "with a nicely hacked up UI that we put together very quickly um so what's coming so we are working on a number of",
    "start": "1918120",
    "end": "1926279"
  },
  {
    "text": "things which we hope to uh add you know sort of in the time that we in the preview before we go out uh as a public",
    "start": "1926279",
    "end": "1932480"
  },
  {
    "text": "launch things that the team is working on is actually some of the features that I talked about earlier that our customers want from us which is uh",
    "start": "1932480",
    "end": "1939360"
  },
  {
    "text": "elastic load Bal balancing integration where you'll be actually able to put individual containers behind an elb and",
    "start": "1939360",
    "end": "1944799"
  },
  {
    "text": "load balance across containers uh you'll be able to take look at all your uh you'll be able to look at plus",
    "start": "1944799",
    "end": "1950679"
  },
  {
    "text": "utilization and similar metrics in cloudwatch once you have those you can do interesting actions like trigger and",
    "start": "1950679",
    "end": "1956039"
  },
  {
    "text": "auto scaling group for example uh we'll be able to stream logs into cloudwatch logs we'll be uh adding a support for",
    "start": "1956039",
    "end": "1963559"
  },
  {
    "text": "cloud formation where you can describe your entire stack in a single cloud formation template your ec2 your networking your containers uh or tasks",
    "start": "1963559",
    "end": "1970760"
  },
  {
    "text": "in our world we want to add support for tagging where you'll actually be able to tag individual containers which is uh",
    "start": "1970760",
    "end": "1977240"
  },
  {
    "text": "which will allow for some interesting architectures as well as you can tell we need a UI so we'll have one uh and we're",
    "start": "1977240",
    "end": "1984200"
  },
  {
    "text": "also working with our partners on adding uh our agent into their on on their army so when you you don't you just have to",
    "start": "1984200",
    "end": "1990720"
  },
  {
    "text": "use ours you can write your own once our agents available but you can also start with an army from our partners example",
    "start": "1990720",
    "end": "1997080"
  },
  {
    "text": "uh we working with the folks at coros that you can take the coros army with our agent installed and launch a cluster using that um pricing uh most of you are",
    "start": "1997080",
    "end": "2006399"
  },
  {
    "text": "there at the keynote so this is for probably not a surprise but there's no additional charge you pay for the ec2",
    "start": "2006399",
    "end": "2011720"
  },
  {
    "text": "resources and any other AWS resources that you use with the service but the Amazon E2 container service itself",
    "start": "2011720",
    "end": "2017639"
  },
  {
    "text": "doesn't have any cost associated with it and you can sign up for the preview at that",
    "start": "2017639",
    "end": "2023240"
  },
  {
    "text": "URL um thank you very much and we'll be around for",
    "start": "2023240",
    "end": "2028320"
  },
  {
    "text": "[Applause]",
    "start": "2028320",
    "end": "2033659"
  },
  {
    "text": "questions a",
    "start": "2034080",
    "end": "2038398"
  }
]