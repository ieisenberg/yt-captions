[
  {
    "start": "0",
    "end": "102000"
  },
  {
    "text": "all right good morning everybody welcome to reinvent glad you guys could come out this morning and join us this is going",
    "start": "0",
    "end": "7020"
  },
  {
    "text": "to be soup to nuts identity Federation for AWS my name is Quintin Van Diemen I'm the business development manager for",
    "start": "7020",
    "end": "13740"
  },
  {
    "text": "identity and directory services here at AWS and you're kind of unofficial tour guide for the day so what to expect",
    "start": "13740",
    "end": "21600"
  },
  {
    "text": "right so identity Federation means a lot of things to a lot of different people so we're going to first before we dive",
    "start": "21600",
    "end": "28109"
  },
  {
    "text": "it deep into the details of what it means at AWS we're going to just make sure we level set across the room make",
    "start": "28109",
    "end": "33239"
  },
  {
    "text": "sure we have a consistent vernacular and kind of what we like to call it Amazon a mental model around how we think about",
    "start": "33239",
    "end": "38790"
  },
  {
    "text": "identity Federation that I'm going to take you across what I call a tour of",
    "start": "38790",
    "end": "43980"
  },
  {
    "text": "the major Federation bridges around AWS we'll get into why and as we go through",
    "start": "43980",
    "end": "49079"
  },
  {
    "text": "the talk today but there are a number of different mechanisms for federating identities into AWS and we're going to",
    "start": "49079",
    "end": "55079"
  },
  {
    "text": "go through kind of a whirlwind tour of all of them along the way I'm going to give you a hopefully a fun and lively",
    "start": "55079",
    "end": "60780"
  },
  {
    "text": "session with lots of good demos and and links to to go away from at some point",
    "start": "60780",
    "end": "66119"
  },
  {
    "text": "it is a challenging session to try to make identity Federation demos compelling and interesting but we're",
    "start": "66119",
    "end": "72090"
  },
  {
    "text": "going to do our best and it gives me a little bit of a you know expect or you know risk of failure up here just to",
    "start": "72090",
    "end": "78090"
  },
  {
    "text": "make it a little bit more exciting for me but that won't happen not going to with somebody and lastly I'm going to",
    "start": "78090",
    "end": "84150"
  },
  {
    "text": "give you a lot of links to contents and patterns to take away from here I've tried to even go one level beyond the",
    "start": "84150",
    "end": "90509"
  },
  {
    "text": "token embedding the links got a lot QR codes and other things if you're fans of staff and pictures of slides hopefully",
    "start": "90509",
    "end": "96840"
  },
  {
    "text": "we can get your gaggle of deep links right to the information you'll need so",
    "start": "96840",
    "end": "101939"
  },
  {
    "text": "let's jump in so first what do we mean when we say Federation and now I'm not going to get",
    "start": "101939",
    "end": "107729"
  },
  {
    "start": "102000",
    "end": "224000"
  },
  {
    "text": "overly hung up on a textbook definition of what it might mean or what it might mean in some of the circles within the",
    "start": "107729",
    "end": "115590"
  },
  {
    "text": "kind of the Federation a spectrum of the world we're going to define our own definition for today on one hand the",
    "start": "115590",
    "end": "123149"
  },
  {
    "text": "equation we're gonna we're gonna have our identity providers right and these are the systems and it's normally",
    "start": "123149",
    "end": "129420"
  },
  {
    "text": "comprised of both a directory and a piece of software that's going to speak Federation protocol and that's where",
    "start": "129420",
    "end": "135330"
  },
  {
    "text": "we're gonna store our identities this side of the equation is fully responsible for authenticating our users",
    "start": "135330",
    "end": "142290"
  },
  {
    "text": "through whatever factors they might use and providing generally a coarse grain level of authorization or entitlement",
    "start": "142290",
    "end": "147870"
  },
  {
    "text": "into what that user is authorized for on the other hand of the equation we've got",
    "start": "147870",
    "end": "153090"
  },
  {
    "text": "we'll just call generically an identity consumer on this side of the fence we're not going to actually store the",
    "start": "153090",
    "end": "158880"
  },
  {
    "text": "credential we're not going to store the identity but we're likely going to store a reference to that yes we still have to have a notion of who that user is but",
    "start": "158880",
    "end": "166530"
  },
  {
    "text": "we're just going to do it in a level it's one removed or once removed from that actual super sensitive credential",
    "start": "166530",
    "end": "172320"
  },
  {
    "text": "through a non sensitive link this side of the equation is where we're generally",
    "start": "172320",
    "end": "177810"
  },
  {
    "text": "going to do fine-grain authorization so authorizations that are a level deeper than the identity provider really would",
    "start": "177810",
    "end": "183570"
  },
  {
    "text": "have reason or ability to impart think of these as is in application type of",
    "start": "183570",
    "end": "188880"
  },
  {
    "text": "authorizations these two are going to get together and they're going to establish a trust ahead of time and this",
    "start": "188880",
    "end": "195270"
  },
  {
    "text": "trust is going to come in and a couple of different forms depending on the type of Federation we're talking about and",
    "start": "195270",
    "end": "200459"
  },
  {
    "text": "we'll go into that in a bit they're gonna rely on standard based protocols",
    "start": "200459",
    "end": "205860"
  },
  {
    "text": "to interoperate right this world of identity Federation wouldn't work if we didn't have standards out there and",
    "start": "205860",
    "end": "211350"
  },
  {
    "text": "lastly at least in our definition for today we're going to look at Federation as being involving a situation where",
    "start": "211350",
    "end": "218130"
  },
  {
    "text": "those two parties do not need to sync or replicate any data between them okay so",
    "start": "218130",
    "end": "225540"
  },
  {
    "start": "224000",
    "end": "298000"
  },
  {
    "text": "now let's go through if that's a reasonable definition for Federation let's go walk through why we might go",
    "start": "225540",
    "end": "230940"
  },
  {
    "text": "about this the sefar and i like to usually talk about this in terms of three basic consistent constituencies",
    "start": "230940",
    "end": "236640"
  },
  {
    "text": "within your organization the first are your users right and I think that the moral of story is pretty obvious here in",
    "start": "236640",
    "end": "242820"
  },
  {
    "text": "a world without Federation they've got unique credentials everywhere we all know that pain its 2017 we don't need to berate it anymore",
    "start": "242820",
    "end": "249989"
  },
  {
    "text": "with Federation they get one-to-many reuse and then X is a security department right especially in this day",
    "start": "249989",
    "end": "255390"
  },
  {
    "text": "and age without Federation we've got kind of credential Sproul we've got multiple castles to protect and with",
    "start": "255390",
    "end": "262710"
  },
  {
    "text": "Federation we get those credentials centrally managed kind of kind of one place to defend",
    "start": "262710",
    "end": "267780"
  },
  {
    "text": "and lastly isn't it a compliance Department right and I figure at this day and age most of you in your",
    "start": "267780",
    "end": "273060"
  },
  {
    "text": "organization's have figured out identity management you're in your own organizations but if we don't kind of",
    "start": "273060",
    "end": "279270"
  },
  {
    "text": "bridge in that mechanism into the into the Federated world we get these bespoke",
    "start": "279270",
    "end": "284490"
  },
  {
    "text": "pockets of identity management where you've got to do that on-boarding and off-boarding kind of pain all over the",
    "start": "284490",
    "end": "289830"
  },
  {
    "text": "place but if we bring identity Federation to bear we get unification of that way and we can just leverage the",
    "start": "289830",
    "end": "296520"
  },
  {
    "text": "investments you've already made so our last point of introduction maybe",
    "start": "296520",
    "end": "301710"
  },
  {
    "start": "298000",
    "end": "390000"
  },
  {
    "text": "switching gears a little bit I want to talk about what I call planes of access right and this will this will become the",
    "start": "301710",
    "end": "307350"
  },
  {
    "text": "reason why we're going to go through this will become evident as we go through it so let's take a service like",
    "start": "307350",
    "end": "313200"
  },
  {
    "text": "Amazon ec2 we've got one a plane of access that most people would call the",
    "start": "313200",
    "end": "318419"
  },
  {
    "text": "control plane right this is an AWS API where you're going to do things like start/stop run reboot you're going to do",
    "start": "318419",
    "end": "325440"
  },
  {
    "text": "kind of the control operations around that service that is wholly different from the data plane a connection that's",
    "start": "325440",
    "end": "333270"
  },
  {
    "text": "going to come in through the V PC layer of of your environment where you might",
    "start": "333270",
    "end": "338340"
  },
  {
    "text": "make an actual connection to that running operating system using SSH or RDP depending on the OS and that's",
    "start": "338340",
    "end": "345090"
  },
  {
    "text": "important because those two different planes of access have different paths they have different credentials and they",
    "start": "345090",
    "end": "350460"
  },
  {
    "text": "have different protocols all right so keep that in your mind as we go through the talk today now we compare that to a",
    "start": "350460",
    "end": "356490"
  },
  {
    "text": "different AWS service like dynamodb here we've got that same control plane that's",
    "start": "356490",
    "end": "361979"
  },
  {
    "text": "also an AWS api dynamodb create destroy table for example but that is unified in",
    "start": "361979",
    "end": "368640"
  },
  {
    "text": "this case with the data plane api the way you put or get items out of dynamodb",
    "start": "368640",
    "end": "373890"
  },
  {
    "text": "is also an AWS api right so here we've got I'm sorry we've got the same path",
    "start": "373890",
    "end": "380130"
  },
  {
    "text": "credential and protocol for the service in both the control plane and the data point so just keep those planes of",
    "start": "380130",
    "end": "386729"
  },
  {
    "text": "access in mind as we go through this all right so now let's talk about this",
    "start": "386729",
    "end": "392520"
  },
  {
    "start": "390000",
    "end": "457000"
  },
  {
    "text": "mental model right and the mental model is again kind of an amazonian thing that we like to do just to kind of visually",
    "start": "392520",
    "end": "398909"
  },
  {
    "text": "orient our thoughts around particular topic and I'm gonna give you this one and we'll circle back to it and then but it's just again kind of a",
    "start": "398909",
    "end": "405580"
  },
  {
    "text": "reference to try to orient your thoughts around the topic of identity Federation so in this mental model we're going to",
    "start": "405580",
    "end": "411010"
  },
  {
    "text": "first start with our use cases we're gonna start with what are we trying to solve identity Federation for is that it",
    "start": "411010",
    "end": "416800"
  },
  {
    "text": "is a AWS itself is it a b2c app is it you know a consumer service so let's",
    "start": "416800",
    "end": "423910"
  },
  {
    "text": "start with the use case first let's go through our evaluation that's going to include the three items we just talked",
    "start": "423910",
    "end": "430060"
  },
  {
    "text": "about so path protocol source credential those planes of access make sure we've got that straight that's generally going",
    "start": "430060",
    "end": "436480"
  },
  {
    "text": "to lead us to one of the established Federation bridges with in AWS that we'll go through here today and",
    "start": "436480",
    "end": "441520"
  },
  {
    "text": "ultimately that will should lead you to a set of established blueprints any of these things that I'm going to show you",
    "start": "441520",
    "end": "447280"
  },
  {
    "text": "today have been well-trodden paths that you can rely upon and hopefully draw",
    "start": "447280",
    "end": "452590"
  },
  {
    "text": "upon these patterns that we're going to show you no need to reinvent the wheel all right so let's dive in the first",
    "start": "452590",
    "end": "460990"
  },
  {
    "start": "457000",
    "end": "536000"
  },
  {
    "text": "bridge we're going to look at today is sam'l security assertion markup language right this was probably the they're the",
    "start": "460990",
    "end": "467470"
  },
  {
    "text": "most people would consider the origin of this delegate or excuse me this federated identity world and as a quick",
    "start": "467470",
    "end": "475060"
  },
  {
    "text": "sam'l primer weave in sam'l parlance the part on the left is called the identity",
    "start": "475060",
    "end": "480760"
  },
  {
    "text": "provider or most people were just called the IDP we've got them the service provider on the right that's our",
    "start": "480760",
    "end": "486400"
  },
  {
    "text": "identity consumer in this case those two are going to get it together and in advance they're going to exchange some",
    "start": "486400",
    "end": "491980"
  },
  {
    "text": "metadata this is an XML document that defines all sorts of certificates and",
    "start": "491980",
    "end": "497830"
  },
  {
    "text": "attributes and things that form the cryptographic basis for that trust that we talked about earlier in the sam'l",
    "start": "497830",
    "end": "504160"
  },
  {
    "text": "world after that Trust is established at runtime all the authentication and the",
    "start": "504160",
    "end": "509650"
  },
  {
    "text": "coarse-grain authorization for the user goes against that identity provider and",
    "start": "509650",
    "end": "514659"
  },
  {
    "text": "it when satisfied the identity provider is going to send what's known as a sam'l assertion at runtime back to the service",
    "start": "514660",
    "end": "521770"
  },
  {
    "text": "provider and again this is a coming together ahead of time forming a cryptographic trust so that the the",
    "start": "521770",
    "end": "528940"
  },
  {
    "text": "identity or the shoes means to the service provider on the right knows that it can trust the identities come",
    "start": "528940",
    "end": "534040"
  },
  {
    "text": "from the provider on the left so now where do we use Samuel Federation within",
    "start": "534040",
    "end": "539110"
  },
  {
    "start": "536000",
    "end": "631000"
  },
  {
    "text": "AWS and so mostly we're here we're going to be talking about our internal users",
    "start": "539110",
    "end": "544329"
  },
  {
    "text": "the users inside your own organization they are going to already have likely",
    "start": "544329",
    "end": "550149"
  },
  {
    "text": "credentials in a back-end directory Active Directory open LDAP whatever your particular persuasion is that is going",
    "start": "550149",
    "end": "558069"
  },
  {
    "text": "to be joined up with a sam'l IDP this is the component again that's speaking that",
    "start": "558069",
    "end": "563319"
  },
  {
    "text": "protocol layer and we're going to build that sam'l bridge into your Awl swirl the first and most notable use case for",
    "start": "563319",
    "end": "570459"
  },
  {
    "text": "sam'l is Federation into AWS itself that control plane or whether that's the console",
    "start": "570459",
    "end": "575829"
  },
  {
    "text": "whether it's API access whether it's CLI access etc it's kind of a natural",
    "start": "575829",
    "end": "581889"
  },
  {
    "text": "extension of that we also get through that same bridge federated access into those data playing API is Right DynamoDB",
    "start": "581889",
    "end": "589899"
  },
  {
    "text": "s3 SNS anything that speaks its data playing over an AWS api we're gonna add",
    "start": "589899",
    "end": "596589"
  },
  {
    "text": "on to that and we're actually going to go all the way up to the other end of the stack and we're going to look at how",
    "start": "596589",
    "end": "602230"
  },
  {
    "text": "sam'l is a great tool to bridge your federated identities into for end-user",
    "start": "602230",
    "end": "607839"
  },
  {
    "text": "facing applications and in this case because we're talking about sam'l we're probably talking more about again",
    "start": "607839",
    "end": "614260"
  },
  {
    "text": "there's internal users but we'll see how Cognito can bring in and can join those",
    "start": "614260",
    "end": "619600"
  },
  {
    "text": "federated identities in to Cognito enabled applications and then has some really neat tools for being able to",
    "start": "619600",
    "end": "625420"
  },
  {
    "text": "extend those identities all the way through API layers that you might build in something like API gateway but let's",
    "start": "625420",
    "end": "633069"
  },
  {
    "start": "631000",
    "end": "832000"
  },
  {
    "text": "let's look at some of that might look in actual demo form it's been all that time",
    "start": "633069",
    "end": "644350"
  },
  {
    "text": "making sure my stuff was ready to go and it timed out at the last minute alright so here we go we're in the AWS console",
    "start": "644350",
    "end": "652000"
  },
  {
    "text": "and the first thing we're going to walk through today is federated an inbound to AWS again management console CLI API",
    "start": "652000",
    "end": "659110"
  },
  {
    "text": "type usage so to do that I'm here in the iam console I need to do two distinct",
    "start": "659110",
    "end": "664660"
  },
  {
    "text": "things first is I need to create an ident provider I'm going to go ahead and",
    "start": "664660",
    "end": "669850"
  },
  {
    "text": "choose Sam oh I'm going to give it a reasonably descriptive name I like to use Shibboleth because I'm an open",
    "start": "669850",
    "end": "676119"
  },
  {
    "text": "source fan at heart and I'm going to choose a metadata document that that I",
    "start": "676119",
    "end": "681489"
  },
  {
    "text": "pulled down for my IDP and again this is that document ahead of time that's going to convey information about certificates",
    "start": "681489",
    "end": "688149"
  },
  {
    "text": "and attributes etc I go ahead and create that and now I've now have essentially given",
    "start": "688149",
    "end": "694839"
  },
  {
    "text": "AWS a method to say I trust identities that come through this identity provider",
    "start": "694839",
    "end": "700619"
  },
  {
    "text": "the second thing we're going to go ahead and create are a number of I am roles right now I am row if you're not",
    "start": "700619",
    "end": "707199"
  },
  {
    "text": "familiar with it is an AWS identity primitive it's kind of a jack-of-all-trades or a Swiss Army knife",
    "start": "707199",
    "end": "712299"
  },
  {
    "text": "right there's a lot of things and you see there's lots of different ways that we can establish trust with a role I'm",
    "start": "712299",
    "end": "718059"
  },
  {
    "text": "going to choose Samwell Federation I'm gonna select the provider I just chose",
    "start": "718059",
    "end": "724480"
  },
  {
    "text": "or just created I'm going to designate that I want this to be both for",
    "start": "724480",
    "end": "730149"
  },
  {
    "text": "programmatic and console access and I'm going to move on to permissions so I'm",
    "start": "730149",
    "end": "737439"
  },
  {
    "text": "gonna get I'm going to use one of these manage policies see if we can select one",
    "start": "737439",
    "end": "745119"
  },
  {
    "text": "for a read-only read-only access review",
    "start": "745119",
    "end": "751809"
  },
  {
    "text": "give it a reasonable name three read-only all right and create and just",
    "start": "751809",
    "end": "761980"
  },
  {
    "text": "to make things a little bit more interesting when we get into the user side of things let's go ahead and we're going to create a second one got a",
    "start": "761980",
    "end": "768009"
  },
  {
    "text": "little bit faster this time same identity provider access permissions",
    "start": "768009",
    "end": "779730"
  },
  {
    "text": "power user",
    "start": "781559",
    "end": "785100"
  },
  {
    "text": "view left three power-user so",
    "start": "790680",
    "end": "797160"
  },
  {
    "text": "essentially what I've done here is I've created two different roles with if it wasn't obvious different sets of",
    "start": "797160",
    "end": "802440"
  },
  {
    "text": "permissions right and so those permissions I attached where there's fine-grain authorizations in this case",
    "start": "802440",
    "end": "807959"
  },
  {
    "text": "the identity provider is going to be responsible for what roles i can assume but the roles themselves are going to",
    "start": "807959",
    "end": "813630"
  },
  {
    "text": "define what AWS actions and resources i can access once I come across the Federation Bridge so at this point my",
    "start": "813630",
    "end": "820410"
  },
  {
    "text": "job within the AWS world is done I've got my roles I've got my identity provider configuration so now I'm going",
    "start": "820410",
    "end": "827370"
  },
  {
    "text": "to switch over and I'm going to do the kind of the backend of things I'm going to do the the identity provider side so",
    "start": "827370",
    "end": "833850"
  },
  {
    "start": "832000",
    "end": "1018000"
  },
  {
    "text": "the first thing we need to do is populate a number of what you know we'd have to create our user and group",
    "start": "833850",
    "end": "840180"
  },
  {
    "text": "accounts in our back-end directory a trust that you all probably wouldn't be super enamored with a demo of creating",
    "start": "840180",
    "end": "846600"
  },
  {
    "text": "users in groups so I've done that kind of already here for the sake of time what I draw your attention to and this",
    "start": "846600",
    "end": "852420"
  },
  {
    "text": "is the user I'm going to be using is that I've placed that user into two groups that have a fairly specific",
    "start": "852420",
    "end": "857760"
  },
  {
    "text": "naming convention right and this is something we've pattern eyes Dover time but that's going to we're going to use",
    "start": "857760",
    "end": "862890"
  },
  {
    "text": "the convention AWS - account number - role name right and so that's going to",
    "start": "862890",
    "end": "868500"
  },
  {
    "text": "make it so that these groups become the system of record for what this user which accounts which roles this user is",
    "start": "868500",
    "end": "875190"
  },
  {
    "text": "able to federate into with that with the directory site at hand the next thing I",
    "start": "875190",
    "end": "880620"
  },
  {
    "text": "need to flip over and look at is the identity provider side right now so I'm going to use Shibboleth here but this",
    "start": "880620",
    "end": "886950"
  },
  {
    "text": "pattern or these configurations are generic whether you were talking about octo one login ping a DFS any identity",
    "start": "886950",
    "end": "893850"
  },
  {
    "text": "provider applies so the first thing I need to do is pull down to the",
    "start": "893850",
    "end": "899459"
  },
  {
    "text": "corresponding metadata document just like I did in Reverse but we're going to kind of flash-forward over that and",
    "start": "899459",
    "end": "905790"
  },
  {
    "text": "we're going to look at what's more arguably more interesting the attribute definitions that we need to use within",
    "start": "905790",
    "end": "912209"
  },
  {
    "text": "the identity provider so there's three specific attributes you need to configure in this case one is just name",
    "start": "912209",
    "end": "918690"
  },
  {
    "text": "ID whether it's persistent or transient that's fairly standard Federation mechanism",
    "start": "918690",
    "end": "924290"
  },
  {
    "text": "the first real AWS specific attribute and I made this probably as readable as",
    "start": "924290",
    "end": "929390"
  },
  {
    "text": "XML could get on a big screen so I apologize if it's not awesome but is the AWS roll session name right and here",
    "start": "929390",
    "end": "936650"
  },
  {
    "text": "this is the this is really important because this is going to be your traceability for your users through cloud trail for all their actions when",
    "start": "936650",
    "end": "943430"
  },
  {
    "text": "coming in as a federated user you want to set this to something like UID email something that's highly traceable back",
    "start": "943430",
    "end": "949400"
  },
  {
    "text": "to the user but the more interesting one of the two is the AWS roles attribute",
    "start": "949400",
    "end": "955610"
  },
  {
    "text": "and again this is going to be what AWS is going to use as the assertion coming from your identity provider about what",
    "start": "955610",
    "end": "962150"
  },
  {
    "text": "accounts and what roles attested to by what identity providers AWS will allow",
    "start": "962150",
    "end": "968240"
  },
  {
    "text": "the user to go into and what we've again kind of developed over time is you",
    "start": "968240",
    "end": "973280"
  },
  {
    "text": "certainly could set that attribute on a per user basis or there any different",
    "start": "973280",
    "end": "978350"
  },
  {
    "text": "number of different other mechanisms but we've generally advocated that you go with a regular expression based right so",
    "start": "978350",
    "end": "984860"
  },
  {
    "text": "we can we can take that regular expression which is AWS - 12 digit account number - word for roll name and",
    "start": "984860",
    "end": "991880"
  },
  {
    "text": "using something like this I have essentially with those two pieces of information got everything I need to do",
    "start": "991880",
    "end": "997310"
  },
  {
    "text": "or need to create both the Arn of the role and the Arn of the identity provider and what's really powerful",
    "start": "997310",
    "end": "1002920"
  },
  {
    "text": "about this is if you can implement a pattern like this essentially it's a set at once and forget it type of approach",
    "start": "1002920",
    "end": "1008590"
  },
  {
    "text": "for your IDP you can add any number of accounts any number of roles and you'll still have to create the corresponding",
    "start": "1008590",
    "end": "1014860"
  },
  {
    "text": "groups in the directory but you'll never have to touch the IDP again so let's look at how this might actually look",
    "start": "1014860",
    "end": "1021550"
  },
  {
    "start": "1018000",
    "end": "1386000"
  },
  {
    "text": "from the end users perspective so start from a new incognito window we're gonna",
    "start": "1021550",
    "end": "1028030"
  },
  {
    "text": "hit my identity provider login using the initiated login URL",
    "start": "1028030",
    "end": "1034230"
  },
  {
    "text": "logo aside this is not - AWS this is Shibboleth running in an ec2 and I'm",
    "start": "1034230",
    "end": "1040329"
  },
  {
    "text": "going to log in with my corporate credentials now what goes on in the",
    "start": "1040329",
    "end": "1046569"
  },
  {
    "text": "background here is that identity provider is going to inspect those group memberships I'm going to funnel them",
    "start": "1046570",
    "end": "1051610"
  },
  {
    "text": "through that regular expression I just showed you and this is going to here is my entry point into a yes this is what's known as the role",
    "start": "1051610",
    "end": "1058210"
  },
  {
    "text": "chooser page and here the user is going to designate the account and the role they're interested in operating in and",
    "start": "1058210",
    "end": "1063910"
  },
  {
    "text": "they make that selection and they drop in to the console as you normally expect they then go about their business",
    "start": "1063910",
    "end": "1070090"
  },
  {
    "text": "they're bound here by the popular by the permissions that were associated with that role and if they want to switch",
    "start": "1070090",
    "end": "1076390"
  },
  {
    "text": "context whether that's going to a different account a different role they hit that IDP initiated logging URL again",
    "start": "1076390",
    "end": "1082750"
  },
  {
    "text": "the magic of single sign-on works and I simply just select the other role that I want to go into and that would work",
    "start": "1082750",
    "end": "1088720"
  },
  {
    "text": "across accounts across roles etc so that's a that's kind of how the management console works the story",
    "start": "1088720",
    "end": "1096010"
  },
  {
    "text": "within on the command line side is basically the same it does these days or",
    "start": "1096010",
    "end": "1102790"
  },
  {
    "text": "it does still require kind of a helper script if you will that runs client-side but those have been out there in some",
    "start": "1102790",
    "end": "1108340"
  },
  {
    "text": "blog posts for a while so I'm going to run one and it's gonna just prompt me for my same Enterprise credentials again",
    "start": "1108340",
    "end": "1116500"
  },
  {
    "text": "and probably going to spit out spit out a little bit in oculus error but essentially beyond that it gives me a",
    "start": "1116500",
    "end": "1123070"
  },
  {
    "text": "choice to choose one of those same two roles that I was entitled for before I'm gonna go ahead and make my selection and",
    "start": "1123070",
    "end": "1130570"
  },
  {
    "text": "what it's gonna do in the background is fetch an STS token stash that in my credentials file and now with the simple",
    "start": "1130570",
    "end": "1137740"
  },
  {
    "text": "addition of this - - profile sam'l that I'll show you here now if I just with",
    "start": "1137740",
    "end": "1145540"
  },
  {
    "text": "this - - profile sam'l I'm able to execute any command without ever having a source credential or without a",
    "start": "1145540",
    "end": "1152050"
  },
  {
    "text": "long-term access key secret key pair if you're familiar with those and axe execute any CLI or API code that I might",
    "start": "1152050",
    "end": "1158260"
  },
  {
    "text": "have so that's kind of a identity Federation inbound AWS at that control",
    "start": "1158260",
    "end": "1163750"
  },
  {
    "text": "plane layout layup layer so now let's quickly flip over and again kind of switch context to the top of the stack",
    "start": "1163750",
    "end": "1170080"
  },
  {
    "text": "now let's let's say we've got an end-user application and I'm going to",
    "start": "1170080",
    "end": "1175450"
  },
  {
    "text": "get a clean browser just to make sure we get a clean session and now so this is a",
    "start": "1175450",
    "end": "1182830"
  },
  {
    "text": "this is we're going to now look at how we bring federated identities into an end user facing app right in this case",
    "start": "1182830",
    "end": "1189340"
  },
  {
    "text": "one that's that's servicing our internal users this is a Cognito sample that's a single page",
    "start": "1189340",
    "end": "1195039"
  },
  {
    "text": "application running out of s3 with cloud front in front of it for TLS purposes",
    "start": "1195039",
    "end": "1200140"
  },
  {
    "text": "and right now I just got basically the stock application just like you'd find in the Cognito documentation and it's",
    "start": "1200140",
    "end": "1206350"
  },
  {
    "text": "essentially configured for Cognito user pool authentication so I could log in",
    "start": "1206350",
    "end": "1211809"
  },
  {
    "text": "there with a username and password out of my user pool and totally not federated identity so let's add the",
    "start": "1211809",
    "end": "1218380"
  },
  {
    "text": "notion of federated identity to this out so I'm going to go and I go over now to",
    "start": "1218380",
    "end": "1224799"
  },
  {
    "text": "the Cognito service I'm going to manage",
    "start": "1224799",
    "end": "1230140"
  },
  {
    "text": "my user pools I will point out that it is a bit confusing that the older mechanism for federating and identities",
    "start": "1230140",
    "end": "1236669"
  },
  {
    "text": "incognito was distinct in these days it is actually within the user pool itself",
    "start": "1236669",
    "end": "1242049"
  },
  {
    "text": "so we're going to flip over there I'm gonna go into this user pool that I've already configured and the first thing",
    "start": "1242049",
    "end": "1248980"
  },
  {
    "text": "we need to do is admittedly a bit duplicative but we actually got to go in",
    "start": "1248980",
    "end": "1253990"
  },
  {
    "text": "and we got to establish that same sam'l identity provider right so I'm going to browse that same file give it a create",
    "start": "1253990",
    "end": "1264940"
  },
  {
    "text": "the provider ok so now with now I've kind of done the same basic step of making sure kognito knows that it can",
    "start": "1264940",
    "end": "1271750"
  },
  {
    "text": "trust my identity writer what I needed the last thing I need to do kind of on",
    "start": "1271750",
    "end": "1277270"
  },
  {
    "text": "the identity provider configuration side so I want to map some interesting sam'l attributes I can use them in my kognito",
    "start": "1277270",
    "end": "1283299"
  },
  {
    "text": "app so I'm going to create myself a little cheat sheet here so I'm going to",
    "start": "1283299",
    "end": "1288370"
  },
  {
    "text": "take this roll session name that we talked about before and I'm going to map",
    "start": "1288370",
    "end": "1294370"
  },
  {
    "text": "that to preferred username there it is and then I'm going to take the second",
    "start": "1294370",
    "end": "1300460"
  },
  {
    "text": "Samuel attribute for this cryptic Oh ID notation for email and drop that into",
    "start": "1300460",
    "end": "1309580"
  },
  {
    "text": "email so that what that's allowing me to do is essentially take attributes that my identity provider asserts about my",
    "start": "1309580",
    "end": "1316299"
  },
  {
    "text": "user and use them within my application so now that I've got that in place I'm",
    "start": "1316299",
    "end": "1321700"
  },
  {
    "text": "going to go to the application that I've already configured that single page app and I'm",
    "start": "1321700",
    "end": "1328560"
  },
  {
    "text": "simply just going to select that I want to enable my identity for Reiner I'm",
    "start": "1328560",
    "end": "1334710"
  },
  {
    "text": "going to save those changes so if we come back to our single page application",
    "start": "1334710",
    "end": "1341750"
  },
  {
    "text": "let's get okay I got to fancy with the clean browser there and close them off",
    "start": "1341750",
    "end": "1348090"
  },
  {
    "text": "all right so we're going to come back",
    "start": "1348090",
    "end": "1359330"
  },
  {
    "text": "same single page application now when we sign in now if the demo gods are with me",
    "start": "1359330",
    "end": "1365070"
  },
  {
    "text": "we do not need that sorry we've got now got two different sign-in options",
    "start": "1365070",
    "end": "1370500"
  },
  {
    "text": "available to us we could sign in with the user pool that we had before or we've got also the Shibboleth three if I",
    "start": "1370500",
    "end": "1377310"
  },
  {
    "text": "go ahead and sign in there again sign in demos are always super exciting but",
    "start": "1377310",
    "end": "1383400"
  },
  {
    "text": "we'll do it anyways and we've now got we've now managed to bring our federated",
    "start": "1383400",
    "end": "1389970"
  },
  {
    "start": "1386000",
    "end": "1479000"
  },
  {
    "text": "identity into this application now that's interesting but I think and so",
    "start": "1389970",
    "end": "1395190"
  },
  {
    "text": "what what kognito does in the background there is after that sam'l identity comes in it normalizes it into a user pool",
    "start": "1395190",
    "end": "1402120"
  },
  {
    "text": "identity which means in the background is essentially issued a set of Cognito tokens that are their standard oh I D C",
    "start": "1402120",
    "end": "1409170"
  },
  {
    "text": "axis or identity access tokens right and and what makes or what that enables us",
    "start": "1409170",
    "end": "1415620"
  },
  {
    "text": "to do is I've wired together an API that I built with a Python service framework",
    "start": "1415620",
    "end": "1421350"
  },
  {
    "text": "called chalice if anybody out there is interested in getting into the API gateway world but but hasn't had a",
    "start": "1421350",
    "end": "1427860"
  },
  {
    "text": "chance to really dive deep into it I'd highly recommend it but what I can do is I can use the the tokens from Cognito",
    "start": "1427860",
    "end": "1436680"
  },
  {
    "text": "that it gave me back after my user federated and I can use those to actually invoke an API that's protected",
    "start": "1436680",
    "end": "1442410"
  },
  {
    "text": "with that cognitive user pool and this this API that I wrote was simply a Who",
    "start": "1442410",
    "end": "1447900"
  },
  {
    "text": "am I type function it just parroted back the user's identity and what you can see here is I've been able to actually draw",
    "start": "1447900",
    "end": "1455790"
  },
  {
    "text": "in that used the preferred username out of the sam'l assertion drive it through",
    "start": "1455790",
    "end": "1461480"
  },
  {
    "text": "Cognito drive it down all the way and have the a notion of the user's identity all the way down in the API executing in",
    "start": "1461480",
    "end": "1468710"
  },
  {
    "text": "the backend and so I've been able to carry the users identity all the way through that the most the farthest",
    "start": "1468710",
    "end": "1475250"
  },
  {
    "text": "reaches of my application you know and I think that's a really powerful concept we're now going to dive super deep into",
    "start": "1475250",
    "end": "1482420"
  },
  {
    "start": "1479000",
    "end": "1547000"
  },
  {
    "text": "it but just so you can get kind of a sense of what chalice is all about is",
    "start": "1482420",
    "end": "1487850"
  },
  {
    "text": "this is this is essentially the extent of that API that I just showed you executing in the background all I really",
    "start": "1487850",
    "end": "1495050"
  },
  {
    "text": "needed to do was define one function that is ultimately going to be compiled and uploaded into lambda and in this",
    "start": "1495050",
    "end": "1502160"
  },
  {
    "text": "case I just returned again the contents of the authorizer right so what what what kognito handed",
    "start": "1502160",
    "end": "1510140"
  },
  {
    "text": "down to api gateway and that gets matched mashed-up with a user pool",
    "start": "1510140",
    "end": "1515240"
  },
  {
    "text": "authorizer in a kind of a one-line configuration and that's about it and so",
    "start": "1515240",
    "end": "1520580"
  },
  {
    "text": "I can I can just configure a simple Python file like that to find the functions to find how I want those API",
    "start": "1520580",
    "end": "1525980"
  },
  {
    "text": "is authorized in this case through the Cognito user pool upload it through chalice and it'll do all the hard work",
    "start": "1525980",
    "end": "1531890"
  },
  {
    "text": "of building the lambda functions building API gateway definitions all that sort of things so if you haven't",
    "start": "1531890",
    "end": "1538010"
  },
  {
    "text": "had a chance to check it out by all means a lookup chalice super super powerful framework okay so let's switch",
    "start": "1538010",
    "end": "1546260"
  },
  {
    "text": "back here okay quick recap and I know that was fast right I am gonna hang out",
    "start": "1546260",
    "end": "1552530"
  },
  {
    "start": "1547000",
    "end": "1678000"
  },
  {
    "text": "here afterwards as long as anybody wants if you want to go deeper you still have questions so in the first demo we kind",
    "start": "1552530",
    "end": "1560240"
  },
  {
    "text": "of saw all about how to do sam'l Federation for AWS itself last year here",
    "start": "1560240",
    "end": "1565790"
  },
  {
    "text": "at reinvent we did a self-paced workshop that's that's still out there on the wide world the internet that's got",
    "start": "1565790",
    "end": "1571490"
  },
  {
    "text": "everything you saw and much much more a much greater depth and then secondly we",
    "start": "1571490",
    "end": "1577040"
  },
  {
    "text": "looked at how we brought the the same sam'l federated identities up to the front door of our of our environment and",
    "start": "1577040",
    "end": "1583760"
  },
  {
    "text": "used a single page application through Cognito use Cognito as kind of a normalizing layer that",
    "start": "1583760",
    "end": "1589670"
  },
  {
    "text": "translated the sam'l federated identity into a Cognito set of tokens and then",
    "start": "1589670",
    "end": "1595550"
  },
  {
    "text": "used those tokens to call an API in the backend that was",
    "start": "1595550",
    "end": "1600650"
  },
  {
    "text": "implemented using chalice and through API gateway okay so now that's not",
    "start": "1600650",
    "end": "1607610"
  },
  {
    "text": "necessarily the entire game or the entire story with sam'l Federation we can do some other neat tricks as well",
    "start": "1607610",
    "end": "1613270"
  },
  {
    "text": "probably the first one that I'd bring to your attention is these days a number of the relational database services within",
    "start": "1613270",
    "end": "1620060"
  },
  {
    "text": "AWS notably redshift Aurora and RDS my sequel can actually do I am based",
    "start": "1620060",
    "end": "1626150"
  },
  {
    "text": "authorization as a distinct method other than kind of the user and name and",
    "start": "1626150",
    "end": "1631640"
  },
  {
    "text": "password database engine types of authentication that they originally had and you can use these same federated",
    "start": "1631640",
    "end": "1639140"
  },
  {
    "text": "identities over that bridge into the role to establish connectivity into",
    "start": "1639140",
    "end": "1644420"
  },
  {
    "text": "those databases you've also got kind of end user facing type applications you",
    "start": "1644420",
    "end": "1650630"
  },
  {
    "text": "know the first two that have come out through three AWS are quick site and app stream but you're able to bridge in",
    "start": "1650630",
    "end": "1657140"
  },
  {
    "text": "federated identities into those platforms as well and then the last but not least you know certainly you know",
    "start": "1657140",
    "end": "1663290"
  },
  {
    "text": "the benefit of staining something like this up in your environment if you don't have it already is a lot of the world of",
    "start": "1663290",
    "end": "1668750"
  },
  {
    "text": "sass and just internet software in general has really used sam'l as kind of a standard for federating all sorts of",
    "start": "1668750",
    "end": "1675410"
  },
  {
    "text": "of sass apps okay so now let's quickly move on and our next bridge that we're",
    "start": "1675410",
    "end": "1682640"
  },
  {
    "start": "1678000",
    "end": "1931000"
  },
  {
    "text": "going to talk about is open ID Connect open ID connect something of a successor to sam'l tried to make some of the",
    "start": "1682640",
    "end": "1689270"
  },
  {
    "text": "things that were painful as sam'l a little bit more standardized a little bit more straightforward but in open ID",
    "start": "1689270",
    "end": "1694730"
  },
  {
    "text": "Connect parlance we've got the open ID provider on the left-hand side serves the same role as before on the right",
    "start": "1694730",
    "end": "1702080"
  },
  {
    "text": "hand side we've got what's known as the relying party in oh I DC speak same as",
    "start": "1702080",
    "end": "1707210"
  },
  {
    "text": "before these two get together ahead of time there is a metadata document here as well but it doesn't serve the same",
    "start": "1707210",
    "end": "1712610"
  },
  {
    "text": "purpose this is where we actually the the opie is providing description about",
    "start": "1712610",
    "end": "1718760"
  },
  {
    "text": "where its endpoints are and things of that nature there is a registration",
    "start": "1718760",
    "end": "1723830"
  },
  {
    "text": "that's where you'll go and you'll register your app with the open ID Connect provider and get back a client",
    "start": "1723830",
    "end": "1730610"
  },
  {
    "text": "ID client ID and client secret and we'll see that in a bit so that's kind of establishing the trust for our open ID",
    "start": "1730610",
    "end": "1736730"
  },
  {
    "text": "Connect same as before all the authentication and authorization is going to happen by way of the opie and",
    "start": "1736730",
    "end": "1744409"
  },
  {
    "text": "then in this case instead of an assertion we're going to hand back a set of tokens an open ID Connect there are",
    "start": "1744409",
    "end": "1750019"
  },
  {
    "text": "three distinct tokens there's an ID token as the name implies this is the user's identity there's an access token",
    "start": "1750019",
    "end": "1756590"
  },
  {
    "text": "which the the user can use from within their environment to call out to api's",
    "start": "1756590",
    "end": "1762289"
  },
  {
    "text": "and there's a refresh token that just allows them to acquire acquiring a new",
    "start": "1762289",
    "end": "1767720"
  },
  {
    "text": "access token when one expires so where does an open ID connect fit within a",
    "start": "1767720",
    "end": "1775279"
  },
  {
    "text": "double us today for the the main use case that you're going to see here is about bringing in external users right",
    "start": "1775279",
    "end": "1782059"
  },
  {
    "text": "and by external I just mean you know anyone that's not necessarily strictly an employee of your organization they",
    "start": "1782059",
    "end": "1789230"
  },
  {
    "text": "are most often going to come through one of the established open ID Connect providers out there on the internet",
    "start": "1789230",
    "end": "1795529"
  },
  {
    "text": "Google Facebook Twitter log on with Amazon as the one I'm going to use today for demonstration purposes but we're",
    "start": "1795529",
    "end": "1802220"
  },
  {
    "text": "going to create that trust as we did before this time in the form of those those clients ID and secret",
    "start": "1802220",
    "end": "1808909"
  },
  {
    "text": "registrations and we're going to establish trust using Open ID Connect and the first thing we're going to",
    "start": "1808909",
    "end": "1814190"
  },
  {
    "text": "enable is we're going to bring those types of social identities into that same Cognito layers we saw before and",
    "start": "1814190",
    "end": "1820820"
  },
  {
    "text": "we'll see the same kind of normalizing function that kognito serves in that capacity Cognito has some really neat",
    "start": "1820820",
    "end": "1828710"
  },
  {
    "text": "tricks that aren't you can actually do without Cognito as well but kognito makes it really easy essentially once",
    "start": "1828710",
    "end": "1835220"
  },
  {
    "text": "we've got the user authenticated and authorized through our identity",
    "start": "1835220",
    "end": "1840769"
  },
  {
    "text": "Federation we can translate those open ID credentials into AWS type credentials",
    "start": "1840769",
    "end": "1846710"
  },
  {
    "text": "that could be used within a client app or a server-side app to actually do other AWS API calls most notably into",
    "start": "1846710",
    "end": "1854149"
  },
  {
    "text": "the data plane right and so this is where we federated the user but then carry the notion of the users identity to see what files they might be",
    "start": "1854149",
    "end": "1861580"
  },
  {
    "text": "able to pull from s3 for example it's perhaps not as prevalent today but",
    "start": "1861580",
    "end": "1867760"
  },
  {
    "text": "growing in in commonality we where we might have an open ID provider in the",
    "start": "1867760",
    "end": "1873400"
  },
  {
    "text": "corporate world as well and in this case we established the exact same Federation bridge we're able to draw those internal",
    "start": "1873400",
    "end": "1881500"
  },
  {
    "text": "users into the same mechanism certainly possible today it's going to most",
    "start": "1881500",
    "end": "1886539"
  },
  {
    "text": "notably enable that Cognito and the data plane use case but it's certainly",
    "start": "1886539",
    "end": "1892360"
  },
  {
    "text": "possible and then the last one that I think is really interesting to consider for open ID Connect is the notion of how",
    "start": "1892360",
    "end": "1899590"
  },
  {
    "text": "we might use or how we might find a common language that an application on",
    "start": "1899590",
    "end": "1905470"
  },
  {
    "text": "Prem can talk to an API within AWS or vice versa right so if you were in AWS wholly you",
    "start": "1905470",
    "end": "1912280"
  },
  {
    "text": "would probably use I am roles for ec2 or lambda to just have it be a purely AWS",
    "start": "1912280",
    "end": "1917440"
  },
  {
    "text": "credential type of equation but when you've got one side of the of the",
    "start": "1917440",
    "end": "1923230"
  },
  {
    "text": "mechanism on you know inside versus outside Open ID Connect is a great bridge to allow you to do that and we'll",
    "start": "1923230",
    "end": "1929590"
  },
  {
    "text": "see that in a second okay so let's again go into some demonstrations here okay so",
    "start": "1929590",
    "end": "1937360"
  },
  {
    "start": "1931000",
    "end": "2359000"
  },
  {
    "text": "the first thing I want to do is I want to go back to that same Cognito single page application and I'm going to enable",
    "start": "1937360",
    "end": "1944820"
  },
  {
    "text": "logon with Amazon so aw or Amazon's a social identity provider to bring in",
    "start": "1944820",
    "end": "1951700"
  },
  {
    "text": "social identities so I've again I've kind of already taken care of a little bit of this in advance but I've got here",
    "start": "1951700",
    "end": "1958600"
  },
  {
    "text": "is the logon with Amazon console and you can see what I've essentially established is I've got a my sample",
    "start": "1958600",
    "end": "1964659"
  },
  {
    "text": "application I gave it a little bit of metadata around name and description and privacy notice and then what log on with",
    "start": "1964659",
    "end": "1972520"
  },
  {
    "text": "Amazon gives me back are these client ID and client secret right and that's what I've got to go and configure on the",
    "start": "1972520",
    "end": "1979000"
  },
  {
    "text": "other side so if I flip back into Cognito and I go back up to my user pool",
    "start": "1979000",
    "end": "1986549"
  },
  {
    "text": "to essentially enable this social identity provider I need to back in here I did already configure it",
    "start": "1986549",
    "end": "1994470"
  },
  {
    "text": "but just to give you a sense of what it looks like right if I'd popped open that what I really need to do is layer in",
    "start": "1994470",
    "end": "2001170"
  },
  {
    "text": "that client ID and client secret that come from the login with Amazon page so",
    "start": "2001170",
    "end": "2007350"
  },
  {
    "text": "we're gonna let if we look at how the attribute mapping works the nice thing about using these pre-configured social",
    "start": "2007350",
    "end": "2014160"
  },
  {
    "text": "identity providers you can see here the Cognito today supports Facebook Google and Amazon is that all that attribute",
    "start": "2014160",
    "end": "2020040"
  },
  {
    "text": "mapping that I did before kind of manually with the sam'l a side of things is already taken care of for me here so",
    "start": "2020040",
    "end": "2027150"
  },
  {
    "text": "with that in place really all I need to do is come back I need to go to that same client application I had before I",
    "start": "2027150",
    "end": "2036140"
  },
  {
    "text": "can't find it properly unable log on with Amazon I save my changes come back",
    "start": "2036140",
    "end": "2047430"
  },
  {
    "text": "here get a new browser window go to my test if I sign in now I should have a",
    "start": "2047430",
    "end": "2055139"
  },
  {
    "text": "third option that's essentially now so I've now got all three options available to me it's obviously a little bit fictitious for",
    "start": "2055140",
    "end": "2061470"
  },
  {
    "text": "demonstration purposes but here I'll log on with Amazon Play I get the password",
    "start": "2061470",
    "end": "2069060"
  },
  {
    "text": "right and now I've essentially",
    "start": "2069060",
    "end": "2075840"
  },
  {
    "text": "authenticated to the same single page application this time using a social identity Cognito did the same thing as",
    "start": "2075840",
    "end": "2082169"
  },
  {
    "text": "it did it did before it took that social identity in this case and converted it into a user pool set of Cognito tokens",
    "start": "2082169",
    "end": "2089250"
  },
  {
    "text": "you can see the trace back to the original identity is still certainly there but these tokens that I'm kind of",
    "start": "2089250",
    "end": "2096240"
  },
  {
    "text": "displaying here on the page that are just part of the sample app are actually the kognito tokens that we're cognitive",
    "start": "2096240",
    "end": "2102060"
  },
  {
    "text": "normalized that and again same same ritual as before I used that Cognito",
    "start": "2102060",
    "end": "2107610"
  },
  {
    "text": "token to essentially invoke that chalice or created API that I had from before",
    "start": "2107610",
    "end": "2113160"
  },
  {
    "text": "and here again you can see that I've carried essentially the notion of the",
    "start": "2113160",
    "end": "2119520"
  },
  {
    "text": "user's identity their email etc all the way back into my API and you know I hope that it's",
    "start": "2119520",
    "end": "2126310"
  },
  {
    "text": "apparent but really what the the power that Cognito is bringing here is whether I logged in with a user pool username",
    "start": "2126310",
    "end": "2132940"
  },
  {
    "text": "and password where they are using logged in with a sam'l federated identity or an open ID Connect federated identity but",
    "start": "2132940",
    "end": "2139360"
  },
  {
    "text": "the time it got into Cognito and by the time I got back to the backend API it had all been normalized to a Cognito",
    "start": "2139360",
    "end": "2145600"
  },
  {
    "text": "user pool set of tokens in a consistent way that I was able to call to execute",
    "start": "2145600",
    "end": "2150910"
  },
  {
    "text": "and authorize the backend API super-powerful pattern okay now switching gears if I want to",
    "start": "2150910",
    "end": "2157630"
  },
  {
    "text": "look at the other use case that I talked about where we might have a where we",
    "start": "2157630",
    "end": "2162730"
  },
  {
    "text": "might have a piece of automation that's you know half in let's see if I can find",
    "start": "2162730",
    "end": "2168100"
  },
  {
    "text": "it so half in AWS and half perhaps just on Prem in in this case we can use",
    "start": "2168100",
    "end": "2174730"
  },
  {
    "text": "what's known as the client credentials flow out of technically that would",
    "start": "2174730",
    "end": "2180340"
  },
  {
    "text": "probably be a auth rather than open ID Connect but that different rather different in different but essentially",
    "start": "2180340",
    "end": "2186550"
  },
  {
    "text": "what I'm going to do here and I'll show you how this executors execute in a second but I'm going to I put that set",
    "start": "2186550",
    "end": "2193060"
  },
  {
    "text": "of client ID and client credentials up into up into systems manager within",
    "start": "2193060",
    "end": "2199980"
  },
  {
    "text": "parameters store which is a super powerful if you haven't used it before it's a great place to store secrets in a",
    "start": "2199980",
    "end": "2206560"
  },
  {
    "text": "way that gets them out of your code but I'm going to go ahead and fetch those secrets and then essentially use that",
    "start": "2206560",
    "end": "2212320"
  },
  {
    "text": "that as my authentication mechanism to with Cognito generate an access token",
    "start": "2212320",
    "end": "2218050"
  },
  {
    "text": "that I could use to execute a custom ami I got myself a little bit out of order before I go and start executing those",
    "start": "2218050",
    "end": "2225610"
  },
  {
    "text": "things let's go back first and I need to in this sort of case I need to tell Cognito what the resource server that",
    "start": "2225610",
    "end": "2233200"
  },
  {
    "text": "I'm that I'm going to want to generate tokens for right now I don't have any so let's add a new one and go to my cut and",
    "start": "2233200",
    "end": "2240490"
  },
  {
    "text": "paste help here again take a simple name",
    "start": "2240490",
    "end": "2246810"
  },
  {
    "text": "totally fake identifier and this is essentially where you'd put in the description of the remote API that you",
    "start": "2248190",
    "end": "2254980"
  },
  {
    "text": "wanted cognitive ouch for you for and we're gonna put in the notion of a custom scope a scope is",
    "start": "2254980",
    "end": "2264820"
  },
  {
    "text": "essentially a packaging of attributes and open ID Connect parlance so essentially what I've done there is that",
    "start": "2264820",
    "end": "2270099"
  },
  {
    "text": "told kognito you are allowed to issue access tokens for this remote resource",
    "start": "2270099",
    "end": "2275440"
  },
  {
    "text": "server that I've just told you about okay so with that in hand so again I'm",
    "start": "2275440",
    "end": "2280810"
  },
  {
    "text": "going to use Systems Manager to fetch the client ID and client secret from you",
    "start": "2280810",
    "end": "2287650"
  },
  {
    "text": "know from within SSM and then I'm essentially going to just generate a here I'm using the Python requests to",
    "start": "2287650",
    "end": "2295390"
  },
  {
    "text": "essentially use that client ID and client secret against the token endpoint",
    "start": "2295390",
    "end": "2300520"
  },
  {
    "text": "of kognito to hopefully generate an access token that it's going to spit out for me so it's not a terribly",
    "start": "2300520",
    "end": "2307780"
  },
  {
    "text": "interesting demo okay there we go we got in our first failure of the day perhaps",
    "start": "2307780",
    "end": "2315220"
  },
  {
    "text": "that was a little too fast perhaps I didn't hit go let's give it a second can",
    "start": "2315220",
    "end": "2320770"
  },
  {
    "text": "you I had to summon some nobody knocked on wood that was my problem when I okay",
    "start": "2320770",
    "end": "2328170"
  },
  {
    "text": "okay I'm a failure of the day so unfortunately we're going to but it had",
    "start": "2328440",
    "end": "2333580"
  },
  {
    "text": "my you know the demo guys been with me and I don't know what I would I kind of",
    "start": "2333580",
    "end": "2338619"
  },
  {
    "text": "miss there but we'll move on in the interest of time about you would have certainly seen a Cognito access to and",
    "start": "2338619",
    "end": "2344140"
  },
  {
    "text": "come back and again what you'd be able to do there is present that access token back up to your remote API in a way that",
    "start": "2344140",
    "end": "2351040"
  },
  {
    "text": "you IDC becomes your kind of common language that those two that those two",
    "start": "2351040",
    "end": "2356260"
  },
  {
    "text": "could talk",
    "start": "2356260",
    "end": "2358650"
  },
  {
    "start": "2359000",
    "end": "2439000"
  },
  {
    "text": "all right so that so the first review that we kind of saw here right is just it looks much like it for the main",
    "start": "2363040",
    "end": "2370510"
  },
  {
    "text": "difference here is that in the middle line we've swapped out instead of our sam'l provider we've got Open ID Connect",
    "start": "2370510",
    "end": "2378270"
  },
  {
    "text": "same thing uses that to authenticate and authorize through that opie get a set of",
    "start": "2378270",
    "end": "2384580"
  },
  {
    "text": "tokens use Cognito is that normalizing layer to get a set of user pool tokens",
    "start": "2384580",
    "end": "2390160"
  },
  {
    "text": "and then ultimately pass this through the chalice and then in my demo that I'm still you know probably going to hurt",
    "start": "2390160",
    "end": "2397030"
  },
  {
    "text": "you know hate myself for the simple thing that I forgot later on today but it's just the life of the demo I suppose",
    "start": "2397030",
    "end": "2403240"
  },
  {
    "text": "we used kognito in conjunction with Systems Manager parameter store to fetch",
    "start": "2403240",
    "end": "2409420"
  },
  {
    "text": "the client ID and secret that were related to that application from SSM so",
    "start": "2409420",
    "end": "2415930"
  },
  {
    "text": "they weren't embedded in our code and then we use kognito to generate an access token that we could then present to an external API okay now if you want",
    "start": "2415930",
    "end": "2425680"
  },
  {
    "text": "to go see details and demonstrations perhaps some that will actually work reliably for Cognito this Thursday and",
    "start": "2425680",
    "end": "2432880"
  },
  {
    "text": "you you've got a deep dive here in MGM level-3 okay so let's move on to our",
    "start": "2432880",
    "end": "2442210"
  },
  {
    "start": "2439000",
    "end": "2716000"
  },
  {
    "text": "next bridge and this is admittedly stretching probably the traditional definition of Federation here but we're",
    "start": "2442210",
    "end": "2449290"
  },
  {
    "text": "going to consider ad trust with Kerberos to be our next bridge and day into AWS",
    "start": "2449290",
    "end": "2455340"
  },
  {
    "text": "in this world that we've got our on Prem domain controller most folks are going",
    "start": "2455340",
    "end": "2461470"
  },
  {
    "text": "to be using Active Directory and we're going to use AWS directory service for",
    "start": "2461470",
    "end": "2466780"
  },
  {
    "text": "Microsoft ad as a bridge we're gonna step pre establish in that mechanism of",
    "start": "2466780",
    "end": "2472660"
  },
  {
    "text": "trust in this case our trust is going to come in the form of an ad Forest trust as a standard Microsoft technology it's",
    "start": "2472660",
    "end": "2479710"
  },
  {
    "text": "been in play for years and we're going to use that trust to essentially take Kerberos enabled resources and domain",
    "start": "2479710",
    "end": "2485800"
  },
  {
    "text": "join them through AWS to manage Microsoft ad back through to your",
    "start": "2485800",
    "end": "2491920"
  },
  {
    "text": "back-end or your on-prem domain controller now the reason I would say this fits within my definition of Federation is the user",
    "start": "2491920",
    "end": "2499269"
  },
  {
    "text": "credentials are still strictly only in the on-premise active directory we create some authorization based groups",
    "start": "2499269",
    "end": "2506140"
  },
  {
    "text": "in managed ad in AWS we join those on",
    "start": "2506140",
    "end": "2511809"
  },
  {
    "text": "Prem users into those groups and if when we do so we're able to do os-level",
    "start": "2511809",
    "end": "2516839"
  },
  {
    "text": "authentication authorization for other forms of access depending on the use case into AWS right and super so in this",
    "start": "2516839",
    "end": "2524799"
  },
  {
    "text": "sense we've we've pre-established trust we've not synchronized any identities and we're able to use the on-prem",
    "start": "2524799",
    "end": "2531160"
  },
  {
    "text": "identities up in the AWS world so where does this fit in all right so we're",
    "start": "2531160",
    "end": "2537490"
  },
  {
    "text": "gonna again here that eighty trust we need to pre establish it and in the form of that forest trust once we do the",
    "start": "2537490",
    "end": "2544150"
  },
  {
    "text": "first use case that's that's going to unlock for us is gonna be about windows authentication authorization within ec2",
    "start": "2544150",
    "end": "2551529"
  },
  {
    "text": "and then RDS flavors of excuse me sequel server flavors of RDS right so",
    "start": "2551529",
    "end": "2558069"
  },
  {
    "text": "again using those on-prem identities into those AWS services for",
    "start": "2558069",
    "end": "2563230"
  },
  {
    "text": "authentication and authorization beyond that you've also got the work star",
    "start": "2563230",
    "end": "2568450"
  },
  {
    "text": "family of AWS applications the flow is going to be perhaps a little bit different but it uses that same you",
    "start": "2568450",
    "end": "2575140"
  },
  {
    "text": "configure that bridge once and you're able to use those identities funneling through that plane of access for those",
    "start": "2575140",
    "end": "2581410"
  },
  {
    "text": "other use cases as well it's worth noting that you can actually establish",
    "start": "2581410",
    "end": "2586950"
  },
  {
    "text": "federated access into the management console through this ad trust bridge as well in today's world it has a few",
    "start": "2586950",
    "end": "2595119"
  },
  {
    "text": "limitations and normally went in in a scenario like this if you've got sam'l as a mechanism to do that it's it's",
    "start": "2595119",
    "end": "2602559"
  },
  {
    "text": "probably more mature and more scalable in terms of the implementation you get",
    "start": "2602559",
    "end": "2607630"
  },
  {
    "text": "out of it but certainly manage certainly the ad trust bridge would be able to provide that as well okay so in the",
    "start": "2607630",
    "end": "2616029"
  },
  {
    "text": "spirit of time if you want to look at you know if you want to dive deep into that particular use case there's an",
    "start": "2616029",
    "end": "2622390"
  },
  {
    "text": "entire Windows track and I would think you'd probably do better off getting some of those sessions instead and",
    "start": "2622390",
    "end": "2628569"
  },
  {
    "text": "there's a couple that I think it particularly relevant to you but sillies covered at a high level right so how",
    "start": "2628569",
    "end": "2635359"
  },
  {
    "text": "does this look for Windows on ec2 right so we've got much of the same drawing as",
    "start": "2635359",
    "end": "2640910"
  },
  {
    "text": "we saw before we're going to pre establish our ad for s trust between the",
    "start": "2640910",
    "end": "2646160"
  },
  {
    "text": "managed ad and the on-prem domain controller we're going to domain join through bootstrapping or other",
    "start": "2646160",
    "end": "2651680"
  },
  {
    "text": "mechanisms those Windows ec2 instances to it and then after that's established",
    "start": "2651680",
    "end": "2657170"
  },
  {
    "text": "you're able to just simply at create groups within managed ad and AWS add your on-prem users to that group and",
    "start": "2657170",
    "end": "2664760"
  },
  {
    "text": "then do a then' ocation and authors group based authorization into those instances this gets you out of the world",
    "start": "2664760",
    "end": "2670910"
  },
  {
    "text": "of EC to EC to key pairs and other types of things and just lets you authenticate",
    "start": "2670910",
    "end": "2675980"
  },
  {
    "text": "to your Windows instances in AWS just as you would Windows instances anywhere else the other use case that you need to",
    "start": "2675980",
    "end": "2684230"
  },
  {
    "text": "kind of quickly cover it yeah you know one that I've highlighted here is around workspaces here the flow is a little bit",
    "start": "2684230",
    "end": "2690800"
  },
  {
    "text": "different you're gonna it's using the same basic trust mechanism but here the administrator is going to use that trust",
    "start": "2690800",
    "end": "2697280"
  },
  {
    "text": "mechanism to search and provision the back-end directory for the users that he",
    "start": "2697280",
    "end": "2703250"
  },
  {
    "text": "or she wants to provision workspaces for and then at runtime the the user will",
    "start": "2703250",
    "end": "2708589"
  },
  {
    "text": "authenticate with their corporate credentials up into workspaces directly using that same Federation Bridge okay",
    "start": "2708589",
    "end": "2718369"
  },
  {
    "start": "2716000",
    "end": "2997000"
  },
  {
    "text": "so let's let's move on and the next bridge we're going to talk about is cross account trust alright and again",
    "start": "2718369",
    "end": "2725150"
  },
  {
    "text": "out here I'm being liberal with my definition of Federation but stick with me and I think it'll make sense so cross",
    "start": "2725150",
    "end": "2732619"
  },
  {
    "text": "can't trust primer right so here we've we've got two different AWS accounts one",
    "start": "2732619",
    "end": "2738619"
  },
  {
    "text": "is a source one is the target in the target we're going to establish again another one of those I am roles that you",
    "start": "2738619",
    "end": "2745250"
  },
  {
    "text": "saw me configure before this is going to have two components to it though the",
    "start": "2745250",
    "end": "2750760"
  },
  {
    "text": "kind of role creation wizard takes care of a lot of this for you but the first policy that that's get attached to it is",
    "start": "2750760",
    "end": "2756830"
  },
  {
    "text": "the permissions policy right and this is again where I'm going to establish this fine-grained permissions for what the",
    "start": "2756830",
    "end": "2762170"
  },
  {
    "text": "Federated user is able to do within AWS and in this case I'm gonna or in all cases I should say we're gonna",
    "start": "2762170",
    "end": "2768299"
  },
  {
    "text": "also specify a trust policy right and the trust policy force animal or open ID connects said you should trust these",
    "start": "2768299",
    "end": "2775049"
  },
  {
    "text": "identity providers here the trust policy is going to specify the principles in the remote role that are that this that",
    "start": "2775049",
    "end": "2783690"
  },
  {
    "text": "are able to assume this particular excuse me that's going to define the roles or the",
    "start": "2783690",
    "end": "2789089"
  },
  {
    "text": "source credentials in the source AWS account that are able to assume into this role and in cases where we're",
    "start": "2789089",
    "end": "2795509"
  },
  {
    "text": "talking about Federation we always want to use an external ID and I'll talk about that more in a second in the",
    "start": "2795509",
    "end": "2801960"
  },
  {
    "text": "source account we've got either a long-lived or a short-lived AWS source",
    "start": "2801960",
    "end": "2807509"
  },
  {
    "text": "credential and here the permission policy is essentially going to say that this this you this AWS principle is able",
    "start": "2807509",
    "end": "2814829"
  },
  {
    "text": "to assume the role in that remote account so that's kind of the trust right the the trust policy on one side",
    "start": "2814829",
    "end": "2821940"
  },
  {
    "text": "the permission policy on the other so with that all in place the actual protocol is going to be an STS assume",
    "start": "2821940",
    "end": "2828539"
  },
  {
    "text": "roll call and the target account is going to issue the source account back a",
    "start": "2828539",
    "end": "2833819"
  },
  {
    "text": "set of short term credentials so these credentials are bound to that I am role in the target account and are going to",
    "start": "2833819",
    "end": "2841380"
  },
  {
    "text": "be presented back to the API or CLI caller on the on the right once that",
    "start": "2841380",
    "end": "2848190"
  },
  {
    "text": "that principal on the in the source account has those credentials it can",
    "start": "2848190",
    "end": "2853410"
  },
  {
    "text": "then use that set of short-term credentials to call any AWS api's whether that be you know control plane",
    "start": "2853410",
    "end": "2860430"
  },
  {
    "text": "or a data plane all right now the cross count trust access is used for a lot of",
    "start": "2860430",
    "end": "2866489"
  },
  {
    "text": "different scenarios the way it fits kind of into the topic of Federation is when you you're looking at those two sides of",
    "start": "2866489",
    "end": "2873089"
  },
  {
    "text": "the equation being owned or at least operated or managed by different entities perhaps you or somebody",
    "start": "2873089",
    "end": "2879119"
  },
  {
    "text": "external or vice versa right and whether that's an ISV a managed service provider it really just",
    "start": "2879119",
    "end": "2885089"
  },
  {
    "text": "trying to call out that that is is where the two halves of the equation would be owned by different parties certainly",
    "start": "2885089",
    "end": "2892769"
  },
  {
    "text": "cross can't trust support lots of other use cases as well so don't think this is this is it right but okay so with that",
    "start": "2892769",
    "end": "2899710"
  },
  {
    "text": "in hand where does this fit into our picture that we've been building up here right so we've got again here we're",
    "start": "2899710",
    "end": "2906160"
  },
  {
    "text": "talking mainly about external in the World Federation external users be they users applications automation etc we're",
    "start": "2906160",
    "end": "2914950"
  },
  {
    "text": "going to use their own source credentials we're going to use the trust and permission policies as our trust",
    "start": "2914950",
    "end": "2920829"
  },
  {
    "text": "bridge into AWS and then once we've established that the most notable use",
    "start": "2920829",
    "end": "2925839"
  },
  {
    "text": "cases are down into the control plane and the data plane api's of AWS itself",
    "start": "2925839",
    "end": "2933180"
  },
  {
    "text": "okay if in terms of how this looks in practice right here this is a command",
    "start": "2933180",
    "end": "2939339"
  },
  {
    "text": "line version of an assumed roll call that's going between different accounts",
    "start": "2939339",
    "end": "2944589"
  },
  {
    "text": "you can see that I've centrally specified the roll Arn of the roll I want to assume I've used a rural session",
    "start": "2944589",
    "end": "2952539"
  },
  {
    "text": "name just like we saw in Samwell and then here I've added an additional parameter called external ID right and",
    "start": "2952539",
    "end": "2958839"
  },
  {
    "text": "in federated cases where you've got you know different parties on either side of the equation you want to make sure you",
    "start": "2958839",
    "end": "2964269"
  },
  {
    "text": "use an external ID as kind of as a shared secret to make sure you avoid any",
    "start": "2964269",
    "end": "2969549"
  },
  {
    "text": "sort of confused deputy type scenarios or anything of that nature once that's",
    "start": "2969549",
    "end": "2975160"
  },
  {
    "text": "all been done and all the trust policy checks out the result of the call is again you get back that set of",
    "start": "2975160",
    "end": "2981640"
  },
  {
    "text": "credentials in the form of a secret key excuse me an access key a secret key and",
    "start": "2981640",
    "end": "2987549"
  },
  {
    "text": "the two additional parts of the of the short-term credential which are the session token and the expiration okay",
    "start": "2987549",
    "end": "2998430"
  },
  {
    "start": "2997000",
    "end": "3166000"
  },
  {
    "text": "last case or last bridge that we want to walk through is a custom federation",
    "start": "2998430",
    "end": "3003839"
  },
  {
    "text": "broker so in a custom federation broker",
    "start": "3003839",
    "end": "3009170"
  },
  {
    "text": "probably the biggest hamstring of the approaches you have to build the broker right so this is a piece of software",
    "start": "3009170",
    "end": "3015089"
  },
  {
    "text": "that you're going to build and maintain in your own environment the great that well that's a drawback in some ways what",
    "start": "3015089",
    "end": "3022859"
  },
  {
    "text": "that allows you to do is the world is your oyster I had any sort of entitlements or policies or anything",
    "start": "3022859",
    "end": "3028200"
  },
  {
    "text": "that you want to create around sophisticated authentication authorization schemes you can define any sort of credentials that",
    "start": "3028200",
    "end": "3035130"
  },
  {
    "text": "you want that you want to require and you can really implement some really complex patterns here so the the user or",
    "start": "3035130",
    "end": "3043230"
  },
  {
    "text": "the the machine is going to present the credentials that you've required the",
    "start": "3043230",
    "end": "3048480"
  },
  {
    "text": "broker is going to use its own internal logic to diff'ent and figure out what sort of an authorizations that",
    "start": "3048480",
    "end": "3054960"
  },
  {
    "text": "credentials entitle for and then it's going to use either STS assume role or get federated token using its own AWS",
    "start": "3054960",
    "end": "3063030"
  },
  {
    "text": "long-term credentials as the trust as the proof of identity and then it's going to issue you know in in",
    "start": "3063030",
    "end": "3070320"
  },
  {
    "text": "conjunction with what's known as a scoping policy right and that scoping policy is going to say that you don't",
    "start": "3070320",
    "end": "3076080"
  },
  {
    "text": "want STS to return a set of short-term credentials that are reflective of the",
    "start": "3076080",
    "end": "3081330"
  },
  {
    "text": "brokers permissions you want to have the have the have STS return essentially the",
    "start": "3081330",
    "end": "3087600"
  },
  {
    "text": "intersection between the brokers credentials and that scoping policy once",
    "start": "3087600",
    "end": "3093840"
  },
  {
    "text": "that's done STS is going to essentially return that short-term credential back through the bokor back through the user",
    "start": "3093840",
    "end": "3099840"
  },
  {
    "text": "and then they've got the same sort of short-term credential that they can use for any sort of AWS api's I will note",
    "start": "3099840",
    "end": "3106950"
  },
  {
    "text": "that this is mostly a legacy mechanism at this case this was essentially the original form of identity Federation",
    "start": "3106950",
    "end": "3113160"
  },
  {
    "text": "into AWS but these days were sam'l with Open ID Connect and others unless you're",
    "start": "3113160",
    "end": "3118710"
  },
  {
    "text": "doing something really sophisticated around authentication authorization this is probably probably not for you so it",
    "start": "3118710",
    "end": "3128370"
  },
  {
    "text": "fits in much the way the cross account trust would right so here we've got our",
    "start": "3128370",
    "end": "3133500"
  },
  {
    "text": "on-prem identities we've built our custom broker we've mandated that they use whatever sort of source credential",
    "start": "3133500",
    "end": "3139350"
  },
  {
    "text": "we we've deemed appropriate we're gonna build that trust again comes from the combination of we've issued the broker",
    "start": "3139350",
    "end": "3146640"
  },
  {
    "text": "itself a set of long-term AWS credentials that it's going to use as the trust mechanism and then once we've",
    "start": "3146640",
    "end": "3153570"
  },
  {
    "text": "got that trust in place we mow up most often see this custom Federation broker paradigm being used for either the same",
    "start": "3153570",
    "end": "3161220"
  },
  {
    "text": "sort of console access or Federation into the data playing ap is okay so let's let's wrap it up so in",
    "start": "3161220",
    "end": "3172320"
  },
  {
    "start": "3166000",
    "end": "3305000"
  },
  {
    "text": "summary we've got five different bridges of federated identities into AWS sam'l",
    "start": "3172320",
    "end": "3179250"
  },
  {
    "text": "Open ID Connect 80 trusts cross account trust and custom Federation of brokers",
    "start": "3179250",
    "end": "3184620"
  },
  {
    "text": "and we use those many different bridges for different planes of access again",
    "start": "3184620",
    "end": "3190110"
  },
  {
    "text": "keeping in mind whether we're talking about something that's using a VP sea level connection an AWS API we've got",
    "start": "3190110",
    "end": "3197400"
  },
  {
    "text": "things that talk different protocols right so benign eConnect sam'l Kerberos etc and we've got different types of",
    "start": "3197400",
    "end": "3204210"
  },
  {
    "text": "source credentials sometimes they're social identities sometimes they're corporate credentials we and we have",
    "start": "3204210",
    "end": "3210660"
  },
  {
    "text": "these different bridges to account for those different cases we use that to essentially put together that mental",
    "start": "3210660",
    "end": "3217170"
  },
  {
    "text": "model right so start with the use cases what do you use trying to solve identity Federation for flow that through our the",
    "start": "3217170",
    "end": "3223980"
  },
  {
    "text": "evaluation stage where we're looking at those three principal dimensions above that's going to naturally lead you to",
    "start": "3223980",
    "end": "3230460"
  },
  {
    "text": "one of the Federation bridges that we've talked about here today and hopefully through the embedded links and some of",
    "start": "3230460",
    "end": "3235860"
  },
  {
    "text": "the things we've showed you you you've got some good blueprints for how to wire in those identities so now there",
    "start": "3235860",
    "end": "3244350"
  },
  {
    "text": "certainly is some remaining whitespace you've you know you've seen AWS come out with more and more federated identity",
    "start": "3244350",
    "end": "3251070"
  },
  {
    "text": "capabilities over time as certainly is not holistic or complete so if you've got an interesting federated identity",
    "start": "3251070",
    "end": "3258090"
  },
  {
    "text": "use case that's not covered in kind of what we've showed you here today I'd love to get your thoughts after the session and talk about where you'd like",
    "start": "3258090",
    "end": "3264840"
  },
  {
    "text": "to see us focus next in kind of the last kind of you know another slide of some",
    "start": "3264840",
    "end": "3271800"
  },
  {
    "text": "good helpful links right so beyond the QR codes that I'm embedded through throughout these are some of the other",
    "start": "3271800",
    "end": "3278580"
  },
  {
    "text": "helpful links for things that I didn't quite fit into the slides that show hopefully should give you recipes and",
    "start": "3278580",
    "end": "3284910"
  },
  {
    "text": "patterns for all the sorts of different federated topics that we we talked about",
    "start": "3284910",
    "end": "3290570"
  },
  {
    "text": "wait for the pictures there okay and with that thank you I really",
    "start": "3290570",
    "end": "3295730"
  },
  {
    "text": "appreciate time really appreciate the attention if anybody's got any questions I'll hang out here as long as I can and I hope you all enjoy reinventing Vegas",
    "start": "3295730",
    "end": "3302780"
  },
  {
    "text": "thank you Cheers [Applause]",
    "start": "3302780",
    "end": "3307260"
  }
]