[
  {
    "start": "0",
    "end": "44000"
  },
  {
    "text": "good afternoon thank you for joining us today my name is Ed Lima and I am a Solutions",
    "start": "3120",
    "end": "8280"
  },
  {
    "text": "architect with AWS and I'm here at bu beautiful New Zealand with a very special guest Vanessa toron a senior",
    "start": "8280",
    "end": "15599"
  },
  {
    "text": "developer at zero zero is one of the fastest growing SS companies globally and I got to say I",
    "start": "15599",
    "end": "21720"
  },
  {
    "text": "love how zero defines itself as a company that builds beautiful software as they indeed do we'll be talking about",
    "start": "21720",
    "end": "28320"
  },
  {
    "text": "developing and implementing apis at scale using Serv Technologies at AWS and Vanessa we walk us through a real world",
    "start": "28320",
    "end": "35480"
  },
  {
    "text": "use case on implementing not only beautiful software but also beautiful scalable apis at",
    "start": "35480",
    "end": "43480"
  },
  {
    "text": "zero we'll talk about some specific areas when it comes to build your API different Technologies you can use such",
    "start": "43719",
    "end": "50239"
  },
  {
    "start": "44000",
    "end": "81000"
  },
  {
    "text": "as rest or graphql different options on how to secure API then D dive a bit",
    "start": "50239",
    "end": "55800"
  },
  {
    "text": "deeper on sil's backhand with AWS Lambda and support the event sources after that we'll show you how to create a global",
    "start": "55800",
    "end": "62559"
  },
  {
    "text": "active active serverless API then how to develop API in minutes with some great",
    "start": "62559",
    "end": "67720"
  },
  {
    "text": "new CLI tools finally Vanessa will tell us how service Technologies help zero",
    "start": "67720",
    "end": "73200"
  },
  {
    "text": "scale and provide a great experience to the developer community and ecosystem as",
    "start": "73200",
    "end": "78600"
  },
  {
    "text": "well as their customers but what is an API application",
    "start": "78600",
    "end": "84479"
  },
  {
    "start": "81000",
    "end": "294000"
  },
  {
    "text": "programming interfaces allow applications to interconnect interact and integrate of internal or external",
    "start": "84479",
    "end": "89640"
  },
  {
    "text": "Serv services from All Sorts from payment networks to mapping services to machine learning engines weather",
    "start": "89640",
    "end": "96320"
  },
  {
    "text": "forecasting social media transportation and many others all of this is made possible by apis that with a few lines",
    "start": "96320",
    "end": "103360"
  },
  {
    "text": "of code enable programmers to tap into a world of services to succeed in the digital age",
    "start": "103360",
    "end": "110119"
  },
  {
    "text": "Enterprise need to address customer demands coming from channels that are not necessarily owned and managed by",
    "start": "110119",
    "end": "115960"
  },
  {
    "text": "them some banks now Expose and monetize account customer and payment API through startups where the primary customer",
    "start": "115960",
    "end": "122240"
  },
  {
    "text": "interace and relationship is not owned by the bank Airlines provide reference data and fight information to gain",
    "start": "122240",
    "end": "128560"
  },
  {
    "text": "customer mind share logistic companies expose apis for initiating package collection and for tracking",
    "start": "128560",
    "end": "135480"
  },
  {
    "text": "shipments I was part of a discussion a couple of months ago about apis and I really like the comparison and metaphor",
    "start": "135480",
    "end": "141519"
  },
  {
    "text": "someone mentioned involving a restaurant I'm sure the person won't mind me sharing here a few folks so when you go",
    "start": "141519",
    "end": "148519"
  },
  {
    "text": "to a restaurant there's a contract in the form of a menu you can't go to a Japanese restaurant and Order Greek food",
    "start": "148519",
    "end": "155319"
  },
  {
    "text": "you call a waiter or a waitress to order something from the menu and he or she would be the interface between the",
    "start": "155319",
    "end": "161480"
  },
  {
    "text": "customer you and the kitchen that in turn will prepare the food you order from the menu according to the way you",
    "start": "161480",
    "end": "168440"
  },
  {
    "text": "requested or specified with your contract maybe a medium well stake with",
    "start": "168440",
    "end": "174000"
  },
  {
    "text": "mushroom sauce on the side some restaurants will only serve you if you book a table and provide some sort of",
    "start": "174000",
    "end": "179519"
  },
  {
    "text": "ident ification such as such as your name and your phone number in that sense you can think of",
    "start": "179519",
    "end": "185319"
  },
  {
    "text": "the kitchen as a back end that you prepare a request the waiter or waitress as your API that translated the initial",
    "start": "185319",
    "end": "192000"
  },
  {
    "text": "request your format the kitchen would recognize based on the menu you need to request your request to comply with and",
    "start": "192000",
    "end": "199000"
  },
  {
    "text": "the booking as some form of authorization to make sure you are entitled to get a table and make that",
    "start": "199000",
    "end": "204599"
  },
  {
    "text": "request at that specific time in other words apis are helping to prepare cook",
    "start": "204599",
    "end": "210480"
  },
  {
    "text": "and serve the food that fits applications with the best dish to keep them growing nice and",
    "start": "210480",
    "end": "216760"
  },
  {
    "text": "healthy the analogy also works well with a quote from Mark Anderson who is an",
    "start": "216760",
    "end": "222519"
  },
  {
    "text": "entrepreneur and venture capitalist who wrote a great article publ published some years ago entitled why software is",
    "start": "222519",
    "end": "229400"
  },
  {
    "text": "it in the world where he mentioned companies in every industry need to assume that the software Revolution is",
    "start": "229400",
    "end": "235120"
  },
  {
    "text": "coming this includes even industries that are software based today we've been experiencing ing this revolution for a",
    "start": "235120",
    "end": "241040"
  },
  {
    "text": "while it's not slowing down anytime soon sophisticated apis are driving the rapid",
    "start": "241040",
    "end": "246640"
  },
  {
    "text": "creation of software if software is itting the world as Dr St Steve Wilmot",
    "start": "246640",
    "end": "251720"
  },
  {
    "text": "from Red Hat mentioned in one of his talks apis are eating software to the point that almost everything is just an",
    "start": "251720",
    "end": "258919"
  },
  {
    "text": "API callway apis are enabling Loosely coupled distributed applications to take",
    "start": "258919",
    "end": "264560"
  },
  {
    "text": "the place of monolitic code bases that include anything and everything as software Engineers are are increasingly",
    "start": "264560",
    "end": "270440"
  },
  {
    "text": "Building Systems that are highly distributed if you're looking into monetizing your data and services as an",
    "start": "270440",
    "end": "276120"
  },
  {
    "text": "API provider AWS offers a number of tools that can help not just in creating and operating the apis but also building",
    "start": "276120",
    "end": "283479"
  },
  {
    "text": "a community around them we take a look at some of these handy tools how can you build our apis in a",
    "start": "283479",
    "end": "290440"
  },
  {
    "text": "secure trusted scalable and reliable way before we start I need to understand",
    "start": "290440",
    "end": "296320"
  },
  {
    "start": "294000",
    "end": "424000"
  },
  {
    "text": "the building blocks of an API it's a very basic API that could also fit perfectly as a microservice in a",
    "start": "296320",
    "end": "302680"
  },
  {
    "text": "distributed system one of my colleagues here at AWS like to put it as a new three- tier architecture of modern days",
    "start": "302680",
    "end": "310520"
  },
  {
    "text": "back to our previous analy here we have the waiter as the API the backand as the cook in the kitchen and the data stores",
    "start": "310520",
    "end": "317880"
  },
  {
    "text": "as ingredients to prepare the meal of course we can evolve and enhance",
    "start": "317880",
    "end": "323479"
  },
  {
    "text": "the API with fail over capability load balancers for resiliency uh message buses and other type of work",
    "start": "323479",
    "end": "331639"
  },
  {
    "text": "now bringing this stack to the cloud would have the exact same constructs you could basically lift and shift your API",
    "start": "333800",
    "end": "339240"
  },
  {
    "text": "from your data center with ler effort on AWS you can adapt and enhance the API",
    "start": "339240",
    "end": "344360"
  },
  {
    "text": "chose Cloud native features and bring important capabilities such as autoscaling and multi availability Zone",
    "start": "344360",
    "end": "350080"
  },
  {
    "text": "to the mix thus improving elasticity and scalability as we start work with more",
    "start": "350080",
    "end": "356800"
  },
  {
    "text": "and more API there are some challenges it's ult to manage multiple versions and stages that fit into development process",
    "start": "356800",
    "end": "363960"
  },
  {
    "text": "if you're an API provider you need to monitor how third party developers access your API talking about access",
    "start": "363960",
    "end": "370400"
  },
  {
    "text": "securing and authorizing apis is not a trivial matter what if your API is meshed with a high number of request by",
    "start": "370400",
    "end": "375919"
  },
  {
    "text": "a bad config configuration from a client or malicious third party you should be able to identify and trle it accordingly",
    "start": "375919",
    "end": "382919"
  },
  {
    "text": "all of that increases the API management overhead so Amazon API Gateway addresses",
    "start": "382919",
    "end": "390039"
  },
  {
    "text": "all of those challenges and more you can easily create a unified API front end with the Dos protection and throttling",
    "start": "390039",
    "end": "396240"
  },
  {
    "text": "available out of the box and different options to authenticate and authorize API calls with usage plans you can",
    "start": "396240",
    "end": "402599"
  },
  {
    "text": "throttle meter and monetize API usage by third party",
    "start": "402599",
    "end": "407560"
  },
  {
    "text": "developers so back to our API technology stack you don't need an API server anymore servers are sold 2014 anyway",
    "start": "408160",
    "end": "416160"
  },
  {
    "text": "aren't they you can use API Gateway to easily create create and manage your API on",
    "start": "416160",
    "end": "423000"
  },
  {
    "text": "AWS so let's take a closer look on how you can Implement your API using API Gateway what are the options and",
    "start": "423000",
    "end": "429240"
  },
  {
    "start": "424000",
    "end": "598000"
  },
  {
    "text": "features and how we can use API Gator to fit a particular application requirement or use case there are different types of",
    "start": "429240",
    "end": "435319"
  },
  {
    "text": "API end points you can create with API Gator to serve your API clients the first type is The Edge",
    "start": "435319",
    "end": "442520"
  },
  {
    "text": "optimized endpoints and the only available option when API gate was created years ago this endpoint is",
    "start": "442520",
    "end": "448759"
  },
  {
    "text": "deployed with internal quent delivery Network powered by cloudfront providing D dos protection out of the box your API",
    "start": "448759",
    "end": "455840"
  },
  {
    "text": "calls but some apis don't need Global connectivity for those use cases where",
    "start": "455840",
    "end": "461680"
  },
  {
    "text": "the API traffic is contained in the same region you can use Regional endpoints another valid use case for original",
    "start": "461680",
    "end": "467759"
  },
  {
    "text": "endpoints is having your own manage Cloud front distribution to customize CDN traffic and",
    "start": "467759",
    "end": "474319"
  },
  {
    "text": "settings this year in my opinion one of the biggest newly released features for API Gateway is a new typ type of API",
    "start": "474319",
    "end": "480919"
  },
  {
    "text": "endpoints private endpoints you can have now completely private API running",
    "start": "480919",
    "end": "486080"
  },
  {
    "text": "inside your VPC blocking all sorts of external access this is very handy for use cases where you need to keep your",
    "start": "486080",
    "end": "492360"
  },
  {
    "text": "API traffic completely private as well as connect to systems and backhands from your your own premises data centers",
    "start": "492360",
    "end": "499400"
  },
  {
    "text": "using AWS Direct Connect for instance API Gateway also provide cing",
    "start": "499400",
    "end": "505759"
  },
  {
    "text": "capability so if cing can reduce the number of calls made to in point and also improve the latency of request your",
    "start": "505759",
    "end": "512839"
  },
  {
    "text": "API to help the bug issues related to request execution or client access your API you can enable Cloud watch logs to",
    "start": "512839",
    "end": "520479"
  },
  {
    "text": "log API calls and as far a backhand goes uh API Gator can connect to",
    "start": "520479",
    "end": "527480"
  },
  {
    "text": "different AWS resources or external public endpoints as well as internal VPC and on",
    "start": "527480",
    "end": "534959"
  },
  {
    "text": "premises resources",
    "start": "534959",
    "end": "538440"
  },
  {
    "text": "so mixing and matching different types of API end points you can make API calls to cus backends servers or containers in",
    "start": "541440",
    "end": "547600"
  },
  {
    "text": "the cloud running on ec2 or ECS or eks or container",
    "start": "547600",
    "end": "553279"
  },
  {
    "text": "services other AWS Services have their own rest API end points that usually",
    "start": "553279",
    "end": "558680"
  },
  {
    "text": "connect to using our sdks or the AWS CLI",
    "start": "558680",
    "end": "564079"
  },
  {
    "text": "with AWS proxy feature you can have your own API gate to endpoint intercepting customized and redirecting API calls",
    "start": "564079",
    "end": "571399"
  },
  {
    "text": "directly to services such as Amazon Dynamo DB Kinesis atina step functions sqs recognition poly and many others you",
    "start": "571399",
    "end": "580399"
  },
  {
    "text": "can also either have a public API connecting to private and secure internal VPC resources or on Prem system",
    "start": "580399",
    "end": "587959"
  },
  {
    "text": "through Direct Connect or VPN gateways or as mentioned before a complete endtoend private API for internal secure",
    "start": "587959",
    "end": "594880"
  },
  {
    "text": "resources on your VPC before I continue it's important to",
    "start": "594880",
    "end": "600320"
  },
  {
    "start": "598000",
    "end": "682000"
  },
  {
    "text": "understand that rest is not the only technology option available to build and develop apis I am a firm believer on",
    "start": "600320",
    "end": "607399"
  },
  {
    "text": "using the best tool for the job you don't build a house using just a hammer",
    "start": "607399",
    "end": "612800"
  },
  {
    "text": "and it's the same with distributed systems and applications let's take databases for instance for decades",
    "start": "612800",
    "end": "618320"
  },
  {
    "text": "because the only database Choice was a relational database no matter the shape or function of the data in the",
    "start": "618320",
    "end": "623839"
  },
  {
    "text": "application the data was model as relational as our Amazon CTO verer vogos",
    "start": "623839",
    "end": "632160"
  },
  {
    "text": "wrote in a great article earlier on this year uh one size fits all database doesn't fit anyone just as they are no",
    "start": "632160",
    "end": "639600"
  },
  {
    "text": "longer writing monolitic applications and are embracing apis and microservices developers are no long using a single",
    "start": "639600",
    "end": "646240"
  },
  {
    "text": "database for all use cases in an application they're using many databases why should you have to write endless",
    "start": "646240",
    "end": "651920"
  },
  {
    "text": "joins and expensive queries to access data that could be accessed more effectively and faster using a graph",
    "start": "651920",
    "end": "658040"
  },
  {
    "text": "database for instance we should embrace and be open to different technologies that allow to developer develop better applications",
    "start": "658040",
    "end": "665160"
  },
  {
    "text": "depending on the use case is the same all across a stack even with apis so let's talk about an alternative API",
    "start": "665160",
    "end": "671680"
  },
  {
    "text": "technology optimized for performance and flexibility that is agnostic of underlying data sources and also allows",
    "start": "671680",
    "end": "678440"
  },
  {
    "text": "for rapid prototyping and iteration graphql as a name describes is",
    "start": "678440",
    "end": "685399"
  },
  {
    "start": "682000",
    "end": "733000"
  },
  {
    "text": "a data query language for API it's also a runtime to f F those queries however",
    "start": "685399",
    "end": "691120"
  },
  {
    "text": "it's very important to notice graphql is not a graph database graphql is expressed as a",
    "start": "691120",
    "end": "696880"
  },
  {
    "text": "declarative language for requesting data from your application backhands it use a type system that allows to understand",
    "start": "696880",
    "end": "703040"
  },
  {
    "text": "data requirements and get min for eror messages making it easier to use in",
    "start": "703040",
    "end": "708760"
  },
  {
    "text": "Prototype graph is able to get data from many resources in a single request allowing clients to receive the data",
    "start": "708760",
    "end": "714880"
  },
  {
    "text": "they ask for nothing more nothing less it also has an interesting feature called introspection that allows to",
    "start": "714880",
    "end": "721600"
  },
  {
    "text": "query the graph schema to understand the data format and also helps document your API basically it makes it easy to get",
    "start": "721600",
    "end": "728079"
  },
  {
    "text": "the menu with the food options in our restaurant analogy appsync is our managed",
    "start": "728079",
    "end": "735959"
  },
  {
    "start": "733000",
    "end": "861000"
  },
  {
    "text": "serverless graphql service release last R event perfect for interacting with application data it connects resources",
    "start": "735959",
    "end": "743560"
  },
  {
    "text": "in yours account allowing you to make that available in real time or offline it also also perform conflict",
    "start": "743560",
    "end": "750360"
  },
  {
    "text": "detection resolution in the cloud instead of doing it in the client EP sync integrates with AWS identity access",
    "start": "750360",
    "end": "756839"
  },
  {
    "text": "and management Cognito user pools or you can use API Keys providing real powerful options to secure access to your API",
    "start": "756839",
    "end": "764480"
  },
  {
    "text": "there's also a new feature recently released you can use open connect providers to authenticate and authorize graphql",
    "start": "764480",
    "end": "770079"
  },
  {
    "text": "calls so in our basic API technology stack EP sync is a great alternative for",
    "start": "770079",
    "end": "775360"
  },
  {
    "text": "use cases where graphql is the preferred or optimal choice",
    "start": "775360",
    "end": "780720"
  },
  {
    "text": "in a good usual AWS serverless service fashion just like API Gateway AWS app",
    "start": "780720",
    "end": "786079"
  },
  {
    "text": "sync is inherently highly available in Scales automatically according to",
    "start": "786079",
    "end": "791320"
  },
  {
    "text": "demands appsync provides real-time communication to multiple clients using graph subscriptions taking advantage of",
    "start": "791320",
    "end": "797519"
  },
  {
    "text": "native web socket support it also provides building offline support conflict resolution and synchronization",
    "start": "797519",
    "end": "804000"
  },
  {
    "text": "when the client reconnects and gets back online you can debug in monitor API calls using cloud watch logs and connect",
    "start": "804000",
    "end": "810000"
  },
  {
    "text": "to different backends app sync apis are public only",
    "start": "810000",
    "end": "815839"
  },
  {
    "text": "and they support four types of backends Lambda functions for serverless logic Dynamo databases for highly scalable and",
    "start": "815839",
    "end": "821920"
  },
  {
    "text": "fast no SQL data requirements Amazon lastic search for full tax search",
    "start": "821920",
    "end": "827120"
  },
  {
    "text": "indexing or geospatial use cages use cases and more recently we release support for public HTTP end",
    "start": "827120",
    "end": "834199"
  },
  {
    "text": "points so that means you can connect appy sync to a public rest API including",
    "start": "834199",
    "end": "839720"
  },
  {
    "text": "API gor apis other than that using Lambda as a bridge you can connect app sync to other",
    "start": "839720",
    "end": "845279"
  },
  {
    "text": "AWS services or to resources in your VPC including ec2 servers ECS or eks",
    "start": "845279",
    "end": "852199"
  },
  {
    "text": "containers as well as SQL databases such as Aurora allowing your applications to",
    "start": "852199",
    "end": "857399"
  },
  {
    "text": "access all those different backends with graph calls enhancing your graph API stack",
    "start": "857399",
    "end": "863920"
  },
  {
    "start": "861000",
    "end": "891000"
  },
  {
    "text": "with several capabilities we can connect Lambda or use appsync internal resolvers to provide a direct access logic layer",
    "start": "863920",
    "end": "870279"
  },
  {
    "text": "to Dynamo DB our Ser as database of choice using request and response",
    "start": "870279",
    "end": "875480"
  },
  {
    "text": "mapping templates AP gor also support mapping templates Integrations and Transformations however EP sync and",
    "start": "875480",
    "end": "882000"
  },
  {
    "text": "graph K allow for very interesting capabilities such as for instance create relations between multiple nosql tables",
    "start": "882000",
    "end": "888519"
  },
  {
    "text": "in Dynamo DB there are specific use cases for each technology when to use one or the other",
    "start": "888519",
    "end": "896120"
  },
  {
    "start": "891000",
    "end": "948000"
  },
  {
    "text": "graph is well suited for client driven development as well as when you need to access complex or structure data or",
    "start": "896120",
    "end": "902800"
  },
  {
    "text": "provide real time and offline capabilities to your application it also allows for optimize Network usage as you",
    "start": "902800",
    "end": "908160"
  },
  {
    "text": "can make one API call to get data from multiple resources there's no over fetching and no under fetching of data",
    "start": "908160",
    "end": "915240"
  },
  {
    "text": "rest on the other hand is the golden standard for backhand apis is ubiquitous and widely adopted with established and",
    "start": "915240",
    "end": "922600"
  },
  {
    "text": "proven design and Architectural patterns it was created on 2000 when compared to graph which is pretty young as it was",
    "start": "922600",
    "end": "929240"
  },
  {
    "text": "created back in 2012 whereas is perfect when your application need to take advantage of",
    "start": "929240",
    "end": "934600"
  },
  {
    "text": "server side cing content types or hyper media as the engine of application State",
    "start": "934600",
    "end": "939759"
  },
  {
    "text": "use cases you just need to use a simple HTTP client to connect to rest end points with graph need the specific",
    "start": "939759",
    "end": "945440"
  },
  {
    "text": "graph C clients bottom line use the best tool for the job the best API technology for",
    "start": "945440",
    "end": "952720"
  },
  {
    "start": "948000",
    "end": "977000"
  },
  {
    "text": "application will depend on the use case and most importantly good API design",
    "start": "952720",
    "end": "959560"
  },
  {
    "text": "there's a great article about this topic and I do like the points made by the author rest and graphql are different",
    "start": "959560",
    "end": "965560"
  },
  {
    "text": "Technologies one is not better than the other you can definitely use them together in different parts of your",
    "start": "965560",
    "end": "970839"
  },
  {
    "text": "application and they're both excellent when used with for the right thing keep that in",
    "start": "970839",
    "end": "976839"
  },
  {
    "text": "mind so moving on we talked about apis building blocks technology options and",
    "start": "976839",
    "end": "983199"
  },
  {
    "start": "977000",
    "end": "1042000"
  },
  {
    "text": "design Alternatives now let's move on to a very important topic how to secure API we take security very seriously at AWS",
    "start": "983199",
    "end": "990600"
  },
  {
    "text": "and it is the highest priority for us if you go if you go back to our API",
    "start": "990600",
    "end": "996560"
  },
  {
    "text": "TX stack there are different places where we can secure application we need secure it at the edge as well as secure",
    "start": "996560",
    "end": "1002560"
  },
  {
    "text": "internally between your API and your data source can take advantage of our AWS identity and access management roles",
    "start": "1002560",
    "end": "1009480"
  },
  {
    "text": "to limit secure authorize and authenticate access to",
    "start": "1009480",
    "end": "1014160"
  },
  {
    "text": "resources when it comes to external or Edge security you can take advantage of our web application firal or awsw and",
    "start": "1014560",
    "end": "1021680"
  },
  {
    "text": "building the do protection provided by cloudfront if you're using an API gate original endpoint you can customize and",
    "start": "1021680",
    "end": "1028199"
  },
  {
    "text": "configure both the AWS WF and Cloud front for the level of security that you need we have a great two-part blog post",
    "start": "1028199",
    "end": "1035600"
  },
  {
    "text": "that walks through the setup of this architecture to provide to protect your public apis on",
    "start": "1035600",
    "end": "1041839"
  },
  {
    "start": "1042000",
    "end": "1118000"
  },
  {
    "text": "AWS we talk about how to secure API backend resources internally with a am and externally using capabilities like w",
    "start": "1042439",
    "end": "1049320"
  },
  {
    "text": "what about security of your API itself how can you authenticate and authorize calls at the API layer API Gateway",
    "start": "1049320",
    "end": "1056880"
  },
  {
    "text": "provides several options you can use IM IM to secure access to your API providing fine grain access control and",
    "start": "1056880",
    "end": "1062919"
  },
  {
    "text": "you can allow access to only specific methods on your API such as a get or a",
    "start": "1062919",
    "end": "1068240"
  },
  {
    "text": "post you can also use the most versatile and custom way with a Lambda authorizer",
    "start": "1068240",
    "end": "1073400"
  },
  {
    "text": "basically you can create your own authorization authentication logic using Lambda in any way you can you see fit",
    "start": "1073400",
    "end": "1080240"
  },
  {
    "text": "finally you can use Cognito user pools Cognito user pools is a full-fledged serverless identity provider and us a",
    "start": "1080240",
    "end": "1085840"
  },
  {
    "text": "directory that generates open ID connect in all of to tokens to validate users your application just need to send a",
    "start": "1085840",
    "end": "1091960"
  },
  {
    "text": "valid token for an authenticated user to API Gateway and authorize the access to your API or parts of your",
    "start": "1091960",
    "end": "1099240"
  },
  {
    "text": "API EP sync provides very similar security resources and controls for your graphical API you can also use I am or",
    "start": "1099240",
    "end": "1106480"
  },
  {
    "text": "Cognito user push to secure API calls in addition to that appsync also support uh supports access from external open ID",
    "start": "1106480",
    "end": "1113159"
  },
  {
    "text": "connect providers such as off zero for instance so by now you have noticed the",
    "start": "1113159",
    "end": "1120440"
  },
  {
    "start": "1118000",
    "end": "1180000"
  },
  {
    "text": "theme of this session you have lots of Technologies and lots of options to run your application workloads services and",
    "start": "1120440",
    "end": "1126520"
  },
  {
    "text": "apis in the cloud it's not any different with our API backhand compute and logical layer we provide E True",
    "start": "1126520",
    "end": "1132880"
  },
  {
    "text": "instances to deployer service in the cloud containers with ECS eks and far Gates they all great options for",
    "start": "1132880",
    "end": "1139360"
  },
  {
    "text": "specific use cases if you're using them it's recommended to add load balancers with either Al nlbs or EBS and Autos",
    "start": "1139360",
    "end": "1147480"
  },
  {
    "text": "scaling to the mix to provide high high availability and scalability to your API compute",
    "start": "1147480",
    "end": "1153000"
  },
  {
    "text": "layer however our Focus here is on surus where autoscaling High availability is",
    "start": "1153000",
    "end": "1158919"
  },
  {
    "text": "builtin and you don't have to manage or worry about configuring that part of your infrastructure the serus",
    "start": "1158919",
    "end": "1164400"
  },
  {
    "text": "centerpiece is AWS Lambda where it all started",
    "start": "1164400",
    "end": "1169799"
  },
  {
    "text": "so back to our API technology stack we don't need a backhand server anymore we focus on AWS Lambda for the logic and",
    "start": "1170200",
    "end": "1176679"
  },
  {
    "text": "compute layer of your API from now on so if serverless you don't need to",
    "start": "1176679",
    "end": "1182120"
  },
  {
    "start": "1180000",
    "end": "1240000"
  },
  {
    "text": "worry about service provision or man manage AWS is that for you you also never pay for Idol you only pay when",
    "start": "1182120",
    "end": "1188799"
  },
  {
    "text": "your function is running scalability High availability and fault tolerance is buil",
    "start": "1188799",
    "end": "1194000"
  },
  {
    "text": "thing before servus you had to worry about managing different layers to get your application up and running from the",
    "start": "1194000",
    "end": "1200039"
  },
  {
    "text": "from the infrastructure to the network to the operating system all of that needed to be prop properly configured",
    "start": "1200039",
    "end": "1206159"
  },
  {
    "text": "patch patched maintained and secured before you could start developing your application lots of undifferentiated",
    "start": "1206159",
    "end": "1213280"
  },
  {
    "text": "heavy lifting with servus all those layers are",
    "start": "1213280",
    "end": "1218440"
  },
  {
    "text": "taken care of and developers can start working on their applications straight away you should be focusing on your",
    "start": "1218440",
    "end": "1224159"
  },
  {
    "text": "application and your business differentiators and not infrastructure to run your application",
    "start": "1224159",
    "end": "1229480"
  },
  {
    "text": "the less time we spend on infrastructure maintenance and operations the more time you can focus on new features and",
    "start": "1229480",
    "end": "1235320"
  },
  {
    "text": "improving your application to speed up business outcomes so those applications are based",
    "start": "1235320",
    "end": "1241679"
  },
  {
    "start": "1240000",
    "end": "1267000"
  },
  {
    "text": "on events you have an event source that send events to Lambda function that can be developed in different Brun times such as nodejs Java go.net and more",
    "start": "1241679",
    "end": "1249640"
  },
  {
    "text": "recently great news for the enthusiasts we release support for Powershell the code is executed in",
    "start": "1249640",
    "end": "1255640"
  },
  {
    "text": "response to an event and can execute any sort of business Logic for instance connect another service in AWS or an API",
    "start": "1255640",
    "end": "1262720"
  },
  {
    "text": "public available on the internet Lambda has a couple of",
    "start": "1262720",
    "end": "1268960"
  },
  {
    "start": "1267000",
    "end": "1322000"
  },
  {
    "text": "different invocation types synchronous invocations wait for the function to generate a response whereas a",
    "start": "1268960",
    "end": "1274320"
  },
  {
    "text": "synchronous invocations are nonblocking Lambda will scale regardless of the number of calls when the Lambda function",
    "start": "1274320",
    "end": "1280799"
  },
  {
    "text": "is invoked and you can specify the invocation type as synchronous or an synchronous API Gateway invokes Lambda",
    "start": "1280799",
    "end": "1287000"
  },
  {
    "text": "function synchronous synchronously by default however you can configure it to invoke it asynchronously if you choose",
    "start": "1287000",
    "end": "1293720"
  },
  {
    "text": "to do so when you are using AWS Services as as event sources the invocation type is predetermined by each service for",
    "start": "1293720",
    "end": "1300960"
  },
  {
    "text": "example Amazon S3 always always invokes a Lambda function as synchronously and",
    "start": "1300960",
    "end": "1306080"
  },
  {
    "text": "Amazon Cognito always involes Lambda function synchronously for pole based AWS Services KES is Dynamo DB and sqs",
    "start": "1306080",
    "end": "1315320"
  },
  {
    "text": "Lambda POS the stream or message queue and invoke to Lambda function",
    "start": "1315320",
    "end": "1321279"
  },
  {
    "text": "synchronously there are different types of event sources that can trigger a Lambda function a push notification",
    "start": "1321279",
    "end": "1326960"
  },
  {
    "start": "1322000",
    "end": "1352000"
  },
  {
    "text": "generated from the service like SNS or a database record Edition on a dynb table",
    "start": "1326960",
    "end": "1332520"
  },
  {
    "text": "an authentication request in cognito a cure Lex chatbot chatbot or an echo",
    "start": "1332520",
    "end": "1338240"
  },
  {
    "text": "device at home the Press of a button or turning on a lamp as an iot device a file Creation in S3 bucket there are",
    "start": "1338240",
    "end": "1345120"
  },
  {
    "text": "lots of use cases and event sources we'll focus on three of",
    "start": "1345120",
    "end": "1350919"
  },
  {
    "text": "them so if private API was one of the most important features released for API Gator this year in my opinion this one",
    "start": "1351159",
    "end": "1357520"
  },
  {
    "start": "1352000",
    "end": "1390000"
  },
  {
    "text": "fits a B for Lambda it's a great new feature before the release you had to create a cloudwatch event to trigger",
    "start": "1357520",
    "end": "1363559"
  },
  {
    "text": "Lambda every uh X minutes to pull an sqsq and check for messages now there's",
    "start": "1363559",
    "end": "1369279"
  },
  {
    "text": "no need for that with the new integration Lambda takes care of automatically retrieving messages",
    "start": "1369279",
    "end": "1374600"
  },
  {
    "text": "processing them in batches according to your code then deleting them once L the function successfully completes if the",
    "start": "1374600",
    "end": "1381600"
  },
  {
    "text": "function errors out or times out then the messages will return to the queue after the visibility time outset in",
    "start": "1381600",
    "end": "1389480"
  },
  {
    "text": "sqs SNS is our simple notification service is a fully managed Pub sub",
    "start": "1389880",
    "end": "1395600"
  },
  {
    "text": "notification service that lets you fund out messages to a l large number of recipients you can also fund out to",
    "start": "1395600",
    "end": "1401200"
  },
  {
    "text": "multiple Lambda functions with SNS notifications messages are published to",
    "start": "1401200",
    "end": "1406320"
  },
  {
    "text": "a topic and Lambda or Lambda subscribed to the topic to execute some specific logic based on the on the notification",
    "start": "1406320",
    "end": "1414159"
  },
  {
    "text": "you can also create filters on SNS so messages are only sent to specific",
    "start": "1414159",
    "end": "1420120"
  },
  {
    "text": "subscribers Kinesis is a highly scalable data streaming service used for collecting and processing real-time data",
    "start": "1421240",
    "end": "1427440"
  },
  {
    "text": "for analytics and machine learning you can subscribe LDA functions automatically read batches of records",
    "start": "1427440",
    "end": "1433679"
  },
  {
    "text": "off your kesa stream and process them if records are detected on the stream Lambda then then post the stream",
    "start": "1433679",
    "end": "1439520"
  },
  {
    "text": "periodically for new records and receive batches or even batches of batches of data similar to SNS it's possible to",
    "start": "1439520",
    "end": "1446640"
  },
  {
    "text": "have multiple applications consuming from the same strain so I talk about some patterns",
    "start": "1446640",
    "end": "1453240"
  },
  {
    "text": "options services and Technologies use in your API what about global scale how can",
    "start": "1453240",
    "end": "1458360"
  },
  {
    "text": "I have a global active active seress API with data synchronized in different regions or countries across the glob the",
    "start": "1458360",
    "end": "1466799"
  },
  {
    "text": "globe it's actually very simple and you still don't have to manage any service to do so you just need to add two access",
    "start": "1466799",
    "end": "1474120"
  },
  {
    "start": "1467000",
    "end": "1536000"
  },
  {
    "text": "services to make it happen and you can have your Global API up and running in minutes Route 53 provides highly",
    "start": "1474120",
    "end": "1480279"
  },
  {
    "text": "available and scalable DNS and you can configure configure latency based routing where traffic is routed to the",
    "start": "1480279",
    "end": "1486799"
  },
  {
    "text": "region that provides better latency Dynamo DB Global tables was released last year allowing for multim master",
    "start": "1486799",
    "end": "1493200"
  },
  {
    "text": "database across regions that provide fast local readand write performance for massively scaled Global",
    "start": "1493200",
    "end": "1500240"
  },
  {
    "text": "applications this example you can have replicated API instances with synchronized data stores in the US and",
    "start": "1500240",
    "end": "1506399"
  },
  {
    "text": "Europe Route 53 will direct my users in Europe to the local API instance if data",
    "start": "1506399",
    "end": "1512120"
  },
  {
    "text": "is updated in the European table it will be synchronized automatically to the American counterpart if an user in the",
    "start": "1512120",
    "end": "1518679"
  },
  {
    "text": "US access my API he or she will be able to get the upto-date",
    "start": "1518679",
    "end": "1523880"
  },
  {
    "text": "data if you want to try refer to the link on the slide it's a blog post from from our of our developer Advocates that",
    "start": "1523880",
    "end": "1530360"
  },
  {
    "text": "walks you through simple steps to build your own Global Ser as",
    "start": "1530360",
    "end": "1535399"
  },
  {
    "text": "API adding a little more complexity here we have a global graph API providing",
    "start": "1535399",
    "end": "1540760"
  },
  {
    "start": "1536000",
    "end": "1600000"
  },
  {
    "text": "crud create read update delete access to data in Dynamo DB we fum the function",
    "start": "1540760",
    "end": "1545840"
  },
  {
    "text": "synchronizing changes through Amazon elastic search cluster to Dynamo DB streams we also have file storage like",
    "start": "1545840",
    "end": "1553039"
  },
  {
    "text": "images of videos in S3 dat on Dynamo to be synchronized to another region with global tables and Fon S3 are replicated",
    "start": "1553039",
    "end": "1559840"
  },
  {
    "text": "using cross region replication since D modb is a source of Truth elastic search",
    "start": "1559840",
    "end": "1565080"
  },
  {
    "text": "clusters are in the dependent and indexed data from the local synchronized dat mod replica so in this scenario I",
    "start": "1565080",
    "end": "1571240"
  },
  {
    "text": "have a very powerful flexible resilient and scalable Global active active backand where my client can read write",
    "start": "1571240",
    "end": "1577720"
  },
  {
    "text": "and also perform full text search on data very easily and very fast as a",
    "start": "1577720",
    "end": "1582760"
  },
  {
    "text": "previous example we using Route 53 latency based routing to Route the closest rate available",
    "start": "1582760",
    "end": "1589159"
  },
  {
    "text": "service best of all the whole back end is managed by AWS and you don't have to worry about any maintenance",
    "start": "1589159",
    "end": "1596600"
  },
  {
    "text": "tasks but as a developer how do you get started and what tools you can use to automate the process and integrate the",
    "start": "1597080",
    "end": "1603480"
  },
  {
    "start": "1600000",
    "end": "1655000"
  },
  {
    "text": "API development into your cicd pipeline cloud formation provides a",
    "start": "1603480",
    "end": "1609840"
  },
  {
    "text": "common language for you to describe and provision all infrastructure resources in your Cloud environment is our service",
    "start": "1609840",
    "end": "1615679"
  },
  {
    "text": "of choice to develop maintain create and describe instance infrastructure as code and uses templates on Json or yo to do",
    "start": "1615679",
    "end": "1623880"
  },
  {
    "text": "so these templates can be easily integrated into your cicd pipeline to duplicate deploy or update environments",
    "start": "1623880",
    "end": "1630279"
  },
  {
    "text": "for test QA or production however if you're not familiar with cloud formation there there is a learning curve other",
    "start": "1630279",
    "end": "1637320"
  },
  {
    "text": "than that cloud formation templates can get really complex and very long very easy keeping that in mind we created a",
    "start": "1637320",
    "end": "1643600"
  },
  {
    "text": "couple of tools that could abstract vanilla cloud formation to make it easier and simpler to deploy WS",
    "start": "1643600",
    "end": "1649240"
  },
  {
    "text": "resources for the average developers who are not completely familiar with cloud",
    "start": "1649240",
    "end": "1654720"
  },
  {
    "text": "formation one of them is our serous application model meet",
    "start": "1654720",
    "end": "1660320"
  },
  {
    "start": "1655000",
    "end": "1718000"
  },
  {
    "text": "Sam so here's a Sam template that b basically has a very simle syntax to regular cloud formation Theo template",
    "start": "1660320",
    "end": "1667799"
  },
  {
    "text": "some temp templates are defined by this line as it basically uses the AWS serverless transform to transform a",
    "start": "1667799",
    "end": "1674600"
  },
  {
    "text": "smaller and simpler template with few lines of code to cloud formation once it's patched and deployed so you can",
    "start": "1674600",
    "end": "1682360"
  },
  {
    "text": "define a Lambda function API gate to API and a Dynamo DB",
    "start": "1682360",
    "end": "1689760"
  },
  {
    "text": "table with less than 20 lines of code when read you just need to execute",
    "start": "1689760",
    "end": "1695679"
  },
  {
    "text": "two samite commments to package a c as API backend definition then deploy the resources using cloud",
    "start": "1695679",
    "end": "1702760"
  },
  {
    "text": "formation and this is what actually cloud formation deploys a transform template you can basically Define a 20",
    "start": "1702760",
    "end": "1710000"
  },
  {
    "text": "line long s template that you transform to a 200 line standard transformation template in",
    "start": "1710000",
    "end": "1717278"
  },
  {
    "start": "1718000",
    "end": "1756000"
  },
  {
    "text": "seconds a second tool that was just released few weeks ago is the AWS amplify",
    "start": "1718039",
    "end": "1723760"
  },
  {
    "text": "CLI the amplify CLI takes a different approach it configures your backhand based on a couple of questions as during",
    "start": "1723760",
    "end": "1730440"
  },
  {
    "text": "the setup with the amplify add API API commands you define an API with a couple",
    "start": "1730440",
    "end": "1737679"
  },
  {
    "text": "of an then configure a Lambda back end with some extra",
    "start": "1737679",
    "end": "1743279"
  },
  {
    "text": "settings and finally you configure your database with some more details so in a couple of seconds you",
    "start": "1743279",
    "end": "1750320"
  },
  {
    "text": "have your API backhand defined just by answering a few",
    "start": "1750320",
    "end": "1755960"
  },
  {
    "text": "questions so basically if a single comma you can Define and configure your graphql or rest API a standard Cloud",
    "start": "1755960",
    "end": "1762919"
  },
  {
    "start": "1756000",
    "end": "1778000"
  },
  {
    "text": "information template is created based on your answers and is available in your project folder to use as fits with",
    "start": "1762919",
    "end": "1769320"
  },
  {
    "text": "another comment you can trigger the cloud information stack creation for all the resources and you don't have to write a single line of emo or Json cloud",
    "start": "1769320",
    "end": "1777240"
  },
  {
    "text": "formation we also release a very powerful feature called graph curl Transformer in the new amplify CLI as a",
    "start": "1777240",
    "end": "1784440"
  },
  {
    "start": "1778000",
    "end": "1945000"
  },
  {
    "text": "type system you need to Define types for the data in your graph C schema let's imagine I have a specific graph C type",
    "start": "1784440",
    "end": "1790760"
  },
  {
    "text": "for my data for a block post application for example I create an API using the",
    "start": "1790760",
    "end": "1796440"
  },
  {
    "text": "the amplify CLI and add the type definition I need for my app so the graph Cal Transformer allows",
    "start": "1796440",
    "end": "1803440"
  },
  {
    "text": "me to use the spe the specific schema directives in my new data type just by",
    "start": "1803440",
    "end": "1808519"
  },
  {
    "text": "including the add model directive then running the the command amplify push a",
    "start": "1808519",
    "end": "1814080"
  },
  {
    "text": "cloud formation stack creation is started and a graphical API preconfigured with crud logic and a link",
    "start": "1814080",
    "end": "1821679"
  },
  {
    "text": "dynb table is automatically created in minutes",
    "start": "1821679",
    "end": "1828120"
  },
  {
    "text": "however this might not be enough as API calls are authorized only with API Keys how can I improve my security posture",
    "start": "1828120",
    "end": "1834240"
  },
  {
    "text": "and have a proper identity provider authenticating and not authorizing my API",
    "start": "1834240",
    "end": "1839600"
  },
  {
    "text": "calls it's as easy as adding another directive at off specific rules in this",
    "start": "1839600",
    "end": "1845000"
  },
  {
    "text": "case I just want the user that created data to be able to access and modify it I can also specify groups such as admin",
    "start": "1845000",
    "end": "1851039"
  },
  {
    "text": "group for instance you have extra access after that I execute amplify push again to commit the changes and update my API",
    "start": "1851039",
    "end": "1858639"
  },
  {
    "text": "a Cognito user pool is created and automatically configured to authenticate and authorize culture my",
    "start": "1858639",
    "end": "1863799"
  },
  {
    "text": "API so now going one step further I have a serus scalable API powered by serus",
    "start": "1863799",
    "end": "1870399"
  },
  {
    "text": "that provides me with authenticated crud access to my data what if if I need to add search",
    "start": "1870399",
    "end": "1876799"
  },
  {
    "text": "capability to my back end for those not familiar with elastic search configuring and installing a cluster can be",
    "start": "1876799",
    "end": "1883360"
  },
  {
    "text": "challenging what if we could do it just by adding one extra line to my API type definition",
    "start": "1883360",
    "end": "1889440"
  },
  {
    "text": "so that's exactly what's possible with a graph Transformer directive at",
    "start": "1889440",
    "end": "1895080"
  },
  {
    "text": "searchable I just need to push my API changes once more and an elastic search",
    "start": "1895080",
    "end": "1900799"
  },
  {
    "text": "cluster as well as Dynamo streams and a Lambda function are all deployed and configur automatically handling the data",
    "start": "1900799",
    "end": "1906919"
  },
  {
    "text": "synchronization between Dynamo and elastic search so with a SE with a few CLI",
    "start": "1906919",
    "end": "1912480"
  },
  {
    "text": "comments and a couple of schema directives based on graphical Transformers the amplifi CLI created a",
    "start": "1912480",
    "end": "1917559"
  },
  {
    "text": "very powerful secure highly available flexible resilient and scalable backend",
    "start": "1917559",
    "end": "1922720"
  },
  {
    "text": "in minutes where users can be authenticated and authorized create read update delete and list data as well as",
    "start": "1922720",
    "end": "1929279"
  },
  {
    "text": "perform full Tex search on the same data very easily and very",
    "start": "1929279",
    "end": "1934559"
  },
  {
    "text": "fast you can find an endtoend example with a serverless single page application front end as well as a",
    "start": "1934559",
    "end": "1940120"
  },
  {
    "text": "backend API in one of my articles just follow the link now let's talk about local",
    "start": "1940120",
    "end": "1946960"
  },
  {
    "start": "1945000",
    "end": "1970000"
  },
  {
    "text": "development it's very important for developers to test experiment and de debug code locally in their own laptops",
    "start": "1946960",
    "end": "1953600"
  },
  {
    "text": "before actually deploying resources both tools Sam CLI and upli CLI have features that allow for local",
    "start": "1953600",
    "end": "1960080"
  },
  {
    "text": "development and de bugging of rest apis Sam CLI supports more languages and run times while amplify CLI only supports no",
    "start": "1960080",
    "end": "1967159"
  },
  {
    "text": "GS for now so we talked about Technologies",
    "start": "1967159",
    "end": "1972799"
  },
  {
    "start": "1970000",
    "end": "2017000"
  },
  {
    "text": "patterns options and tools that allow you to implement scalable serverless apis I also mentioned AWS offers a",
    "start": "1972799",
    "end": "1979679"
  },
  {
    "text": "number of tools that can help not not just in creating and operating apis but also in building a developer Community",
    "start": "1979679",
    "end": "1986120"
  },
  {
    "text": "around them let's talk now about the real world use case close to home here at a andz where S as apis are scaling to",
    "start": "1986120",
    "end": "1993960"
  },
  {
    "text": "provide amazing services and experiences to customers and developers it's my",
    "start": "1993960",
    "end": "1999000"
  },
  {
    "text": "absolute pleasure to introduce Vanessa toron she's a senior developer at zero one of the fastest growing SAS companies",
    "start": "1999000",
    "end": "2006399"
  },
  {
    "text": "globally and she share with how they build butiful aport the beautiful software supporting a thriving ecosystem",
    "start": "2006399",
    "end": "2013360"
  },
  {
    "text": "with over 700 partners and 40,000",
    "start": "2013360",
    "end": "2017919"
  },
  {
    "text": "developers thank you very much Ed it's my absolute pleasure to be uh sharing Zero's use case today on this webinar",
    "start": "2024000",
    "end": "2030679"
  },
  {
    "text": "with you I'm here today to talk about building civilist applications at",
    "start": "2030679",
    "end": "2035960"
  },
  {
    "text": "scale so the all build a solution that handles large amounts of data scales at",
    "start": "2035960",
    "end": "2042360"
  },
  {
    "start": "2036000",
    "end": "2046000"
  },
  {
    "text": "the drop of a hat and also reduces the load on our public API so what was the problem that led to",
    "start": "2042360",
    "end": "2048839"
  },
  {
    "start": "2046000",
    "end": "2111000"
  },
  {
    "text": "this challenge well the zero API serves 115 million calls per week there",
    "start": "2048839",
    "end": "2054480"
  },
  {
    "text": "averages out to be 16 million calls a day a large number of those calls going",
    "start": "2054480",
    "end": "2059878"
  },
  {
    "text": "into the API are HTTP requests creating a polling effect this cause unnecessary",
    "start": "2059879",
    "end": "2065720"
  },
  {
    "text": "load on our Gateway and Upstream a this pattern is not sustainable nor",
    "start": "2065720",
    "end": "2071440"
  },
  {
    "text": "scalable and as you can see this picture here on your right shows a typical client server architecture over time and",
    "start": "2071440",
    "end": "2078800"
  },
  {
    "text": "you can see here that the client is issuing get requests to the API in this",
    "start": "2078800",
    "end": "2084520"
  },
  {
    "text": "case it would be the zero API and you can see that they are asking for data um",
    "start": "2084520",
    "end": "2090040"
  },
  {
    "text": "over an X number of time so it might be 5 10 minutes and they're asking for data",
    "start": "2090040",
    "end": "2096240"
  },
  {
    "text": "and every time the server would say no do you have data no do you have data no",
    "start": "2096240",
    "end": "2101720"
  },
  {
    "text": "and this may continue on for five or 10 times before finally some data has changed and therefore the server will",
    "start": "2101720",
    "end": "2108040"
  },
  {
    "text": "reply with a payload of data so we had some architectual",
    "start": "2108040",
    "end": "2113880"
  },
  {
    "text": "challenges to be able to reduce the polling um and from there we needed a",
    "start": "2113880",
    "end": "2119599"
  },
  {
    "text": "way to effortly effortlessly scale and respond to Peaks and troughs of data flow provide our apps with a",
    "start": "2119599",
    "end": "2125800"
  },
  {
    "text": "notification when an end user makes change in near real time and follow industry standards not",
    "start": "2125800",
    "end": "2132240"
  },
  {
    "text": "reinvent the wheel the solution implement we hooks on Zero's public",
    "start": "2132240",
    "end": "2138200"
  },
  {
    "start": "2138000",
    "end": "2148000"
  },
  {
    "text": "API don't call us we'll call you I decided to put this in here because it's one of my favorite sayings and it's",
    "start": "2138200",
    "end": "2143880"
  },
  {
    "text": "literally true we will call you instead of you calling us we hooks what is a",
    "start": "2143880",
    "end": "2150440"
  },
  {
    "start": "2148000",
    "end": "2195000"
  },
  {
    "text": "webook exactly a webook is a way to provide applications data in near real time via HTTP post data immediately",
    "start": "2150440",
    "end": "2158520"
  },
  {
    "text": "arrives after a change has occurred in the originating system in this case this would be zero wooks are more efficient",
    "start": "2158520",
    "end": "2164760"
  },
  {
    "text": "for both the consumer and the provider and it has a it reduces polling now we",
    "start": "2164760",
    "end": "2170520"
  },
  {
    "text": "can see here that this picture on the right is very uh similar to the one before except you notice that it's less",
    "start": "2170520",
    "end": "2175720"
  },
  {
    "text": "chatty you can see here typical client server architecture over time but this",
    "start": "2175720",
    "end": "2180760"
  },
  {
    "text": "is using web hooks instead uh we can see here that we publish new data and the",
    "start": "2180760",
    "end": "2185800"
  },
  {
    "text": "client responds thanks well actually it's a 200 okay but wouldn't it be cool if there was an hdb status where thanks",
    "start": "2185800",
    "end": "2192319"
  },
  {
    "text": "with a smiley face oton I think so so back to our architecture challenges here",
    "start": "2192319",
    "end": "2198119"
  },
  {
    "start": "2195000",
    "end": "2278000"
  },
  {
    "text": "so we've ticked off two of the three so we've provided our apps with a notification when an end user makes a",
    "start": "2198119",
    "end": "2203720"
  },
  {
    "text": "change in near real time and we're following industry standards and not in Reinventing the wheel uh we box is",
    "start": "2203720",
    "end": "2210280"
  },
  {
    "text": "something that has been around for a while and most great apis will have them",
    "start": "2210280",
    "end": "2215440"
  },
  {
    "text": "so the likes of uh Team City Select and GitHub all feature we hooks including",
    "start": "2215440",
    "end": "2222240"
  },
  {
    "text": "obviously the zero public API but we still got one architecture challenge left we need a way to",
    "start": "2222240",
    "end": "2228680"
  },
  {
    "text": "effortlessly scale and respond to the Peaks and troughs of data flow now it's true you can Implement web hooks using",
    "start": "2228680",
    "end": "2236160"
  },
  {
    "text": "typical uh ec2 instances and that's absolutely fine however from our",
    "start": "2236160",
    "end": "2241720"
  },
  {
    "text": "experience we've seen that when data comes along and you've got uh application low balances or or elbs and",
    "start": "2241720",
    "end": "2248880"
  },
  {
    "text": "a scaling uh aut scaling group in place you might see that when the data arrives",
    "start": "2248880",
    "end": "2254520"
  },
  {
    "text": "it might be utilizing say 80% of your CPU might be the the trigger to spin up a new ac2 instance however what we've",
    "start": "2254520",
    "end": "2261640"
  },
  {
    "text": "seen is that it does take some time to spin up new instances and from experience is about 20 minutes and when",
    "start": "2261640",
    "end": "2268480"
  },
  {
    "text": "that takes 20 minutes that Peak that has come through um is then uh gone by the",
    "start": "2268480",
    "end": "2274760"
  },
  {
    "text": "time that that server is now available to serve our request so in comes the serverless architecture",
    "start": "2274760",
    "end": "2282280"
  },
  {
    "start": "2278000",
    "end": "2459000"
  },
  {
    "text": "so web hooks is implemented uh using four main services and I'm going to walk",
    "start": "2282280",
    "end": "2287680"
  },
  {
    "text": "through with you the high level of what each of these services do so first thing",
    "start": "2287680",
    "end": "2292880"
  },
  {
    "text": "is to register for events we have an external app developer who wants to subscribe to receive notifications they",
    "start": "2292880",
    "end": "2299680"
  },
  {
    "text": "do so by visiting our developer portable and entering in their https endpoint",
    "start": "2299680",
    "end": "2304960"
  },
  {
    "text": "which will post web hooks too and what this does in the back end is it sends off an a an HTTP post to AWS API Gateway",
    "start": "2304960",
    "end": "2314359"
  },
  {
    "text": "which is then backed by a Lambda and this Lambda uh writes and stores information to a RDS instance of",
    "start": "2314359",
    "end": "2321040"
  },
  {
    "text": "postgress and publishes notification to a um",
    "start": "2321040",
    "end": "2326200"
  },
  {
    "text": "sqsq and there's also a second Lambda which then also uh writes to that",
    "start": "2326200",
    "end": "2333280"
  },
  {
    "text": "database and publishes more information to that queue upon validation and and checking things for that sub",
    "start": "2333280",
    "end": "2340480"
  },
  {
    "text": "subscription now you may be wondering why we chose to use a uh relational database which strictly isn't serverless",
    "start": "2340480",
    "end": "2348040"
  },
  {
    "text": "um and that was just because we needed a relational way to do some mapping and storing of information so moving on to the",
    "start": "2348040",
    "end": "2354440"
  },
  {
    "text": "dispatching of events so an end user who is using zero will go into our system",
    "start": "2354440",
    "end": "2360400"
  },
  {
    "text": "and maybe make a change to a contact this could be changing a name uh changing an address phone number email",
    "start": "2360400",
    "end": "2367560"
  },
  {
    "text": "or even adding a new contact or raising a new invoice for a bill that they need",
    "start": "2367560",
    "end": "2372920"
  },
  {
    "text": "to pay or they may have received funds in for an invoice that they dispatch to one of their customers and what this",
    "start": "2372920",
    "end": "2378440"
  },
  {
    "text": "does is that the events then come into another AWS API Gateway which is backed",
    "start": "2378440",
    "end": "2384319"
  },
  {
    "text": "by a Lambda and we do some validation on those events and we write to a kesa",
    "start": "2384319",
    "end": "2389920"
  },
  {
    "text": "stream we also um write TOS we also write to the",
    "start": "2389920",
    "end": "2399599"
  },
  {
    "text": "um dead letter Q if there's any validation failures that go there and we decided to do this because we didn't",
    "start": "2399599",
    "end": "2406680"
  },
  {
    "text": "want to stop processing the data inside our lambdas and then from there the next stage is the storage of these events so",
    "start": "2406680",
    "end": "2413960"
  },
  {
    "text": "the events come through again through another API Gateway backed by Lambda you can see this is a pretty typical uh",
    "start": "2413960",
    "end": "2420560"
  },
  {
    "text": "serverless uh archit pattern for having an API gway backed by Lambda to process",
    "start": "2420560",
    "end": "2425760"
  },
  {
    "text": "the data coming in with then write the events to another kesa stream and",
    "start": "2425760",
    "end": "2430920"
  },
  {
    "text": "publish notifications to an SNS topic uh from there we have a Lambda triggered",
    "start": "2430920",
    "end": "2436800"
  },
  {
    "text": "off the back of a Kessa stream which will then store information into an S3 bucket and update some metadata in a",
    "start": "2436800",
    "end": "2443440"
  },
  {
    "text": "postgress database and then continue on publishing notifications to a second SNS",
    "start": "2443440",
    "end": "2448480"
  },
  {
    "text": "topic and that's just so that any of our other services who are interested in those topics can then subscribe to those",
    "start": "2448480",
    "end": "2454680"
  },
  {
    "text": "notifications it's really uh typical sub architecture and last but not least the",
    "start": "2454680",
    "end": "2460920"
  },
  {
    "start": "2459000",
    "end": "2481000"
  },
  {
    "text": "delivery of events we can see this is our most simpl service and it is a running off a cloudwatch event timer",
    "start": "2460920",
    "end": "2468520"
  },
  {
    "text": "which is triggered every five minutes to uh start a Lambda and therefore that will go and collect the necessary data",
    "start": "2468520",
    "end": "2475480"
  },
  {
    "text": "that it needs to be able to send the web hook to the third party",
    "start": "2475480",
    "end": "2480760"
  },
  {
    "text": "application so back to our architectural challenges again we've now checked off our final one we have a way to",
    "start": "2480760",
    "end": "2486359"
  },
  {
    "start": "2481000",
    "end": "2513000"
  },
  {
    "text": "effortlessly scale and responds to the peak and troughs of data flow and that's simply because uh API gateways backed by",
    "start": "2486359",
    "end": "2494240"
  },
  {
    "text": "lambas mean that when every request comes through you can have multiple lambdas spin up and process that data",
    "start": "2494240",
    "end": "2500480"
  },
  {
    "text": "and the same thing happens with Kinesis streams as well you pull batches off and",
    "start": "2500480",
    "end": "2505760"
  },
  {
    "text": "therefore you can have infinite scaling of those lambdas and processing data um in now and pretty much real",
    "start": "2505760",
    "end": "2512480"
  },
  {
    "text": "time so we move on to some development challenges and we had a lot of development challenges when building out",
    "start": "2512480",
    "end": "2518520"
  },
  {
    "start": "2513000",
    "end": "2722000"
  },
  {
    "text": "a web hook solution uh first of all how to secure our payloads how do we handle",
    "start": "2518520",
    "end": "2523760"
  },
  {
    "text": "misbehaving apps so that they don't affect delivery and cause bottlenecks how do we handle R tries for",
    "start": "2523760",
    "end": "2529599"
  },
  {
    "text": "unsuccessful deliveries and of course performance testing security G payloads is very important to us because we also",
    "start": "2529599",
    "end": "2535400"
  },
  {
    "text": "believe in security at zero and we wanted to provide our app developers a way to know that the data they're",
    "start": "2535400",
    "end": "2541359"
  },
  {
    "text": "receiving on that endpoint they've registered is definitely from us so what we decide to do is that when upon",
    "start": "2541359",
    "end": "2547280"
  },
  {
    "text": "registering you get a key and what this key does is that we sign your payload and that will generate a signature we",
    "start": "2547280",
    "end": "2553800"
  },
  {
    "text": "place a signature in a header you take that signature and you sign the payload",
    "start": "2553800",
    "end": "2559400"
  },
  {
    "text": "with the key and the signatures have to match and that's the way that you check the payload is definitely from zero now",
    "start": "2559400",
    "end": "2566359"
  },
  {
    "text": "we all know that sometimes developers are a little bit lazy and we didn't actually know whether our developers",
    "start": "2566359",
    "end": "2572280"
  },
  {
    "text": "were going to be checking this as per our recommendation so we decided upon",
    "start": "2572280",
    "end": "2577400"
  },
  {
    "text": "registering for web hooks that we would invent something called the intent to receive and what this does is that when",
    "start": "2577400",
    "end": "2583200"
  },
  {
    "text": "you sign up you'll go through this process where we will randomly send a random number of requests to your",
    "start": "2583200",
    "end": "2588280"
  },
  {
    "text": "endpoint and there'll be a mixture of uh good and bad requests and you must sign",
    "start": "2588280",
    "end": "2593520"
  },
  {
    "text": "and match the signatures and respond accordingly so that we know that your application's ready to receive secure",
    "start": "2593520",
    "end": "2601079"
  },
  {
    "text": "payloads moving on to how we handle misbehaving apps so that they don't affect delivery and cause bottlenecks",
    "start": "2601079",
    "end": "2607280"
  },
  {
    "text": "say for example we have one subscription that their endpoint has gone offline and",
    "start": "2607280",
    "end": "2612359"
  },
  {
    "text": "we are no longer able to send uh data to them we didn't want to affect every other subscription on on the platform",
    "start": "2612359",
    "end": "2619920"
  },
  {
    "text": "therefore with the use of serverless architecture and exponential um back",
    "start": "2619920",
    "end": "2625040"
  },
  {
    "text": "offs and the fixture of invisibility on an sqs uh Q we're able to uh then back",
    "start": "2625040",
    "end": "2632359"
  },
  {
    "text": "off and say okay well 5 minutes will try again half an hour will try again an",
    "start": "2632359",
    "end": "2637640"
  },
  {
    "text": "hour and therefore 24 hours we'll try again and if you're unsuccessful at responding to us we'll then disable uh",
    "start": "2637640",
    "end": "2644000"
  },
  {
    "text": "your webook until you can get in contact with us and we can then start sending",
    "start": "2644000",
    "end": "2649079"
  },
  {
    "text": "data to you and that's also covering how we handle retries for unsuccess with and",
    "start": "2649079",
    "end": "2654920"
  },
  {
    "text": "lastly but not least and most important performance testing performance testing really gave us the ability to see what",
    "start": "2654920",
    "end": "2662520"
  },
  {
    "text": "our system will do under load and really push uh the components the servus",
    "start": "2662520",
    "end": "2667720"
  },
  {
    "text": "components along the way uh so when we started out implementing invoices as our",
    "start": "2667720",
    "end": "2673079"
  },
  {
    "text": "next event type in web hooks zero processes uh over 1 million web hooks",
    "start": "2673079",
    "end": "2678280"
  },
  {
    "text": "every hour uh not web hooks one million invoices every hour and therefore we had to send that amount of data into our web",
    "start": "2678280",
    "end": "2685520"
  },
  {
    "text": "hook system and what this enabled us to see was where the bottlenecks were in our architecture and it came through",
    "start": "2685520",
    "end": "2692640"
  },
  {
    "text": "that we needed to implement bigger batching sizes of Kinesis and Implement sharding for um more scalable",
    "start": "2692640",
    "end": "2700359"
  },
  {
    "text": "performance and we also realized that we needed to uh batch our events we were",
    "start": "2700359",
    "end": "2706000"
  },
  {
    "text": "sending them one by one initially and therefore when we started increasing the amount of data coming through we",
    "start": "2706000",
    "end": "2712280"
  },
  {
    "text": "realized that we needed to batch them to make it more performant and we do so by um sending up to 20 events inside a",
    "start": "2712280",
    "end": "2720960"
  },
  {
    "text": "payload so how's it performing in production today wepox has been available uh under G a for about a year",
    "start": "2720960",
    "end": "2727960"
  },
  {
    "start": "2722000",
    "end": "2801000"
  },
  {
    "text": "and a half now we deliver events to Applications within 10 seconds of a change occurring in zero itself and",
    "start": "2727960",
    "end": "2735119"
  },
  {
    "text": "that's incredible considering we make an agreement to our end app developers that we'll get changes out within 60 seconds",
    "start": "2735119",
    "end": "2742119"
  },
  {
    "text": "we have over 470 active subscriptions and delivering on average 30 million",
    "start": "2742119",
    "end": "2747400"
  },
  {
    "text": "events a month which is 1.5 million web hook batches just as I said that a WEP put batch can contain up to 20 events",
    "start": "2747400",
    "end": "2755280"
  },
  {
    "text": "the specture on the left here is one of our um App Partners who have who run ec2",
    "start": "2755280",
    "end": "2762160"
  },
  {
    "text": "instances so they have five ec2 instances serving their application their um customers and their traffic and",
    "start": "2762160",
    "end": "2768559"
  },
  {
    "text": "we can see here that this is one of the five and prior to this red line here",
    "start": "2768559",
    "end": "2774359"
  },
  {
    "text": "this is their CPU utilization on their ec2 instance when they were polling the zero API when they implemented whb hooks",
    "start": "2774359",
    "end": "2781319"
  },
  {
    "text": "on the right you can see the reduction in CPU utilization so it's really a win-win for not only zero because it",
    "start": "2781319",
    "end": "2787200"
  },
  {
    "text": "reduces the load on our public API it's a win for our customers as well because they're saving on their bills and and",
    "start": "2787200",
    "end": "2793839"
  },
  {
    "text": "they're implementing best practices and we can deliver them a really good developer",
    "start": "2793839",
    "end": "2799559"
  },
  {
    "text": "experience so what is next for us uh we're going to update our system our WEP",
    "start": "2799559",
    "end": "2804960"
  },
  {
    "start": "2801000",
    "end": "2827000"
  },
  {
    "text": "delivery system to be triggered off sqs instead of a cloudwatch event timer uh when we built wooks initially uh the sqs",
    "start": "2804960",
    "end": "2812480"
  },
  {
    "text": "trigger wasn't available so it's super exciting to see that there's now available for Lambda will be definitely",
    "start": "2812480",
    "end": "2817720"
  },
  {
    "text": "taking that opportunity to upgrade uh we're going to be issuing more event types and we're going to have support",
    "start": "2817720",
    "end": "2824119"
  },
  {
    "text": "for multiple URLs and that's the",
    "start": "2824119",
    "end": "2829920"
  },
  {
    "start": "2827000",
    "end": "2858000"
  },
  {
    "text": "end thank you very much Vanessa this is a awesome use case large numbers there",
    "start": "2833880",
    "end": "2840760"
  },
  {
    "text": "from 150 million calls a week uh lot of",
    "start": "2840760",
    "end": "2846440"
  },
  {
    "text": "inv an hour the millions as well it's just uh it's an amazing use case thank",
    "start": "2846440",
    "end": "2851559"
  },
  {
    "text": "you so much for sharing with us uh so before we move on I just wanted",
    "start": "2851559",
    "end": "2858079"
  },
  {
    "start": "2858000",
    "end": "2890000"
  },
  {
    "text": "to share with you we're going to have uh uh our servus Workshop Road show coming",
    "start": "2858079",
    "end": "2864960"
  },
  {
    "text": "up uh the end of this month so please feel free to register uh you can use a",
    "start": "2864960",
    "end": "2870880"
  },
  {
    "text": "QR code to get access to the registration uh link as well uh it'll be",
    "start": "2870880",
    "end": "2875920"
  },
  {
    "text": "delivering it in lot in uh in multiple cities in Australia and New",
    "start": "2875920",
    "end": "2883200"
  },
  {
    "text": "Zealand and uh now I'm going to open up for questions but before I do uh I",
    "start": "2888599",
    "end": "2896520"
  },
  {
    "start": "2890000",
    "end": "3298000"
  },
  {
    "text": "wanted to ask some questions to uh to Vanessa myself so Vanessa uh it's great",
    "start": "2896520",
    "end": "2903160"
  },
  {
    "text": "new case what advice you to give to a developer who is building the first servess API today well that's a really",
    "start": "2903160",
    "end": "2910880"
  },
  {
    "text": "good question I think because um all of the infrastructure is taking care of by Amazon I think it's really important",
    "start": "2910880",
    "end": "2917800"
  },
  {
    "text": "that you uh really know a good API design if you design your contracts",
    "start": "2917800",
    "end": "2923119"
  },
  {
    "text": "right up front first then the rest of it will really take care of itself and I think that's the most important thing um",
    "start": "2923119",
    "end": "2929440"
  },
  {
    "text": "when looking at building a serverless API I think that's that goes without saying whether it's serverless or not",
    "start": "2929440",
    "end": "2935040"
  },
  {
    "text": "that you should definitely have good API design but once you get that then the seress architecture will just take care of",
    "start": "2935040",
    "end": "2940960"
  },
  {
    "text": "itself it's great yeah I totally agree I think uh API design is very",
    "start": "2940960",
    "end": "2947040"
  },
  {
    "text": "important uh so uh it's it's after you move through the web hooks implementation so is servess allowing un",
    "start": "2947040",
    "end": "2953640"
  },
  {
    "text": "zero to release and deploy code changes faster and more often than before so how",
    "start": "2953640",
    "end": "2959680"
  },
  {
    "text": "is it increasing development agility and speed I think it definitely does uh speed up deployment for us um we",
    "start": "2959680",
    "end": "2967240"
  },
  {
    "text": "we do use team City to help us deploy um we do use terraform in order to script",
    "start": "2967240",
    "end": "2972920"
  },
  {
    "text": "out our infrastructure changes um but once that's done it takes me seconds to release uh Lambda up into our um",
    "start": "2972920",
    "end": "2981000"
  },
  {
    "text": "accounts and blowback processes if we even need to do that are really easy to do too as compared to uh traditional uh",
    "start": "2981000",
    "end": "2989000"
  },
  {
    "text": "options when you're using servers it does take a long time especially if you need to do a roll back for any reason so",
    "start": "2989000",
    "end": "2995440"
  },
  {
    "text": "definitely is speeding us up and our development is yeah productivity is through the roof it's really good that's",
    "start": "2995440",
    "end": "3001319"
  },
  {
    "text": "great that's great to hear so one final question um so if you",
    "start": "3001319",
    "end": "3008000"
  },
  {
    "text": "could go back in time when you were at the start of the web hook implementation",
    "start": "3008000",
    "end": "3013440"
  },
  {
    "text": "so was there any specific area that you got stuck with so what what advice would you give to your old",
    "start": "3013440",
    "end": "3019960"
  },
  {
    "text": "self uh to probably look at um performance testing and maybe the non-f",
    "start": "3019960",
    "end": "3025839"
  },
  {
    "text": "functionals I think very important I think as developers we get excited by new technology and and that's wonderful",
    "start": "3025839",
    "end": "3032160"
  },
  {
    "text": "but we also need to really focus on nonfunction such as um application like",
    "start": "3032160",
    "end": "3037240"
  },
  {
    "text": "your health your monitoring your logging and things like that because it's great you have this wonderful technology",
    "start": "3037240",
    "end": "3042520"
  },
  {
    "text": "available to you to use but if something does happen to go down I mean Amazon you",
    "start": "3042520",
    "end": "3048160"
  },
  {
    "text": "know isn't going to you know take care of that for you you need to know what's going on with your systems every step of",
    "start": "3048160",
    "end": "3053520"
  },
  {
    "text": "the way so that was something that we learned the hard way as as we do so I",
    "start": "3053520",
    "end": "3058839"
  },
  {
    "text": "guess focusing on that as well as the new technology at the same time would be my advice to make old self going back a",
    "start": "3058839",
    "end": "3064839"
  },
  {
    "text": "year and a half ago well that's uh that's a great advice that's for",
    "start": "3064839",
    "end": "3070440"
  },
  {
    "text": "sure uh so I'm GNA pass on to some questions from uh from the viewers as",
    "start": "3070440",
    "end": "3077040"
  },
  {
    "text": "well uh so people are asking if we're going to uh make the slides available we",
    "start": "3077040",
    "end": "3082680"
  },
  {
    "text": "definitely are going to make the slides available uh so you'll be able to get all the links",
    "start": "3082680",
    "end": "3089160"
  },
  {
    "text": "that we have here and and access all those um those uh uh uh tutorials and",
    "start": "3089160",
    "end": "3097280"
  },
  {
    "text": "articles as well as the link to register to the event",
    "start": "3097280",
    "end": "3103480"
  },
  {
    "text": "um so we have a question here about Sam does Sun have building support for ECS end points or only",
    "start": "3103960",
    "end": "3110960"
  },
  {
    "text": "Lambda uh so you can mix and match Sam and C formation so you can definitely have a Sam temp PL deploying those uh",
    "start": "3110960",
    "end": "3118760"
  },
  {
    "text": "serverless uh resources and you can basically in the same template add Cloud information to deploy Cs and and Link",
    "start": "3118760",
    "end": "3127960"
  },
  {
    "text": "API uh another good question how would you implement authorization uh with",
    "start": "3132960",
    "end": "3139839"
  },
  {
    "text": "Lambda authorization with road base access controls uh so uh uh there are different",
    "start": "3139839",
    "end": "3146720"
  },
  {
    "text": "ways uh so you could definitely use uh",
    "start": "3146720",
    "end": "3152559"
  },
  {
    "text": "Cognito user pools Cognito user pools with identity pools uh allow you to",
    "start": "3152559",
    "end": "3158920"
  },
  {
    "text": "create Ro based access control so basically give uh rooll access to different groups and you can create",
    "start": "3158920",
    "end": "3164839"
  },
  {
    "text": "groups of users and then use that to access your API and get access to",
    "start": "3164839",
    "end": "3170559"
  },
  {
    "text": "specific areas that you define on the RO on the IM r",
    "start": "3170559",
    "end": "3176760"
  },
  {
    "text": "with large surance applications how do you avoid complexity in managing the infrastructure with so many individual moveing",
    "start": "3181400",
    "end": "3187880"
  },
  {
    "text": "Parts uh this is a um this is a uh a good question very good question so when",
    "start": "3187880",
    "end": "3194760"
  },
  {
    "text": "you you're developing a monolith for instance all the complexity is inside that monolith so if Lambda and",
    "start": "3194760",
    "end": "3201640"
  },
  {
    "text": "microservices basically uh that complexity is uh is spread out with uh",
    "start": "3201640",
    "end": "3208400"
  },
  {
    "text": "with uh smaller pieces right uh it doesn't mean that the complex is gone",
    "start": "3208400",
    "end": "3214880"
  },
  {
    "text": "it's just uh uh it's more uh stateless and you can uh you can have uh specific",
    "start": "3214880",
    "end": "3223440"
  },
  {
    "text": "areas of your apepi not uh not impacting other areas uh however yeah of course as",
    "start": "3223440",
    "end": "3229280"
  },
  {
    "text": "with any other system we have to document everything and have everything in Source control so uh there are lots",
    "start": "3229280",
    "end": "3236040"
  },
  {
    "text": "of of different areas that we have to",
    "start": "3236040",
    "end": "3239799"
  },
  {
    "text": "focus so one question here for Vanessa just to clarify about the zero architecture which component actually",
    "start": "3248319",
    "end": "3255119"
  },
  {
    "text": "called the web hooks SNS or the event event R trigger by Lambda in",
    "start": "3255119",
    "end": "3261680"
  },
  {
    "text": "terms in terms of the um architecture so the way that the web hook get delivered",
    "start": "3261680",
    "end": "3268200"
  },
  {
    "text": "is via um calling sqs so that is on a cloudwatch event timer which with then",
    "start": "3268200",
    "end": "3273960"
  },
  {
    "text": "po sqs which then says that there's something there are events available for uh active subscriptions and then we",
    "start": "3273960",
    "end": "3280079"
  },
  {
    "text": "query via API to get the events and then send them out okay",
    "start": "3280079",
    "end": "3286680"
  },
  {
    "text": "great uh okay I believe now we are out of time folks there's",
    "start": "3292559",
    "end": "3300359"
  },
  {
    "start": "3298000",
    "end": "3329000"
  },
  {
    "text": "just a couple of quick bll questions that would be great for you to answer that your feedback is very important to",
    "start": "3300359",
    "end": "3306599"
  },
  {
    "text": "us and that allow us to improve those uh those webinars and those events in the",
    "start": "3306599",
    "end": "3313160"
  },
  {
    "text": "future basically uh listening to your feedback and uh and uh and improving",
    "start": "3313160",
    "end": "3320680"
  },
  {
    "text": "those those uh presentations and sessions in the future",
    "start": "3320680",
    "end": "3325960"
  },
  {
    "start": "3329000",
    "end": "3517000"
  },
  {
    "text": "I think I still have time for a couple of more questions while the PO are",
    "start": "3331440",
    "end": "3337039"
  },
  {
    "text": "going uh with the template style deployment is appsync the only service that supports the C deployment uh no",
    "start": "3337039",
    "end": "3344200"
  },
  {
    "text": "definitely not you can deploy uh rest API with API gate Lambda using the amplify",
    "start": "3344200",
    "end": "3349920"
  },
  {
    "text": "CLI uh and and it's basically uses different uh uh basically the plus",
    "start": "3349920",
    "end": "3357119"
  },
  {
    "text": "information but use it different approaches with the graph qu Transformer so that's basically yeah that's specific",
    "start": "3357119",
    "end": "3362359"
  },
  {
    "text": "to appsync but you can definitely deploy rest API if API gor using the amplify CLI as",
    "start": "3362359",
    "end": "3369760"
  },
  {
    "text": "well they recommend the use of the seress framework CLI definitely the seress framework is great so basically",
    "start": "3373720",
    "end": "3381880"
  },
  {
    "text": "again as I said there are lots of options for you just choose the best to for the job if you",
    "start": "3381880",
    "end": "3387000"
  },
  {
    "text": "if you're familiar with servus if you prefer servus sure servus it's a great framework they're amazing I love servus",
    "start": "3387000",
    "end": "3394160"
  },
  {
    "text": "framework uh or else we now have more options and I think more options for the developers the",
    "start": "3394160",
    "end": "3401078"
  },
  {
    "text": "better let's see if we have time for one more [Music]",
    "start": "3404559",
    "end": "3411880"
  },
  {
    "text": "question uh one more for for Vanessa uh uh so thanks for sharing the zero use",
    "start": "3413240",
    "end": "3418680"
  },
  {
    "text": "case I'd like to ask what what is what do you mean by multiple URL URLs in the",
    "start": "3418680",
    "end": "3423799"
  },
  {
    "text": "next steps oh that's a very good question uh so when you register for wh hooks in our developer portal uh you",
    "start": "3423799",
    "end": "3431200"
  },
  {
    "text": "provide uh URL that you'd like your events to be posted to at the moment we only send to one URL um in the future",
    "start": "3431200",
    "end": "3438599"
  },
  {
    "text": "we'd like to open up that to be multiple URLs for the use cases of different",
    "start": "3438599",
    "end": "3443720"
  },
  {
    "text": "development environments so you could have one for test one for uat and one for prod so that you don't have to have",
    "start": "3443720",
    "end": "3450039"
  },
  {
    "text": "those events going to your production um endpoint URL and also if you wanted to",
    "start": "3450039",
    "end": "3455280"
  },
  {
    "text": "split off the event types as we start adding more and more events as we go along um but that so that's what I by",
    "start": "3455280",
    "end": "3462799"
  },
  {
    "text": "multiple URLs which hopefully will be coming soon for",
    "start": "3462799",
    "end": "3468039"
  },
  {
    "text": "you okay uh okay so I think uh that's it for",
    "start": "3468039",
    "end": "3477359"
  },
  {
    "text": "for us folks thank you very much for uh for staying over this long I hope it was",
    "start": "3477359",
    "end": "3484720"
  },
  {
    "text": "uh useful I hope to take advantage of the content it was a absolute pleasure",
    "start": "3484720",
    "end": "3490079"
  },
  {
    "text": "to have Vanessa here sharing the the Fantastic zero use case uh and again I'm",
    "start": "3490079",
    "end": "3495960"
  },
  {
    "text": "going to make those lights available for you and there there's going to be a recording of This webinar as well",
    "start": "3495960",
    "end": "3501359"
  },
  {
    "text": "they'll be able to to watch later or or even refer to your colleagues so they",
    "start": "3501359",
    "end": "3507400"
  },
  {
    "text": "can watch later thank you very much and I hope you have a great day",
    "start": "3507400",
    "end": "3513599"
  }
]