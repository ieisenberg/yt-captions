[
  {
    "start": "0",
    "end": "109000"
  },
  {
    "text": "welcome everybody in today's session I'd like to",
    "start": "2200",
    "end": "7799"
  },
  {
    "text": "introduce to you one of our Amazon Dynamo DB customers data Zoo data zoo is",
    "start": "7799",
    "end": "14120"
  },
  {
    "text": "based out of Boston they develop and run the Next Generation marketing and",
    "start": "14120",
    "end": "19680"
  },
  {
    "text": "analytics platform joining us today we have yaka kosuru and Rohit Delani from",
    "start": "19680",
    "end": "26320"
  },
  {
    "text": "data Zoo to talk about how they scaled their attribution system to handle",
    "start": "26320",
    "end": "32119"
  },
  {
    "text": "billions of events per day and my name is Padma malig arjunan I",
    "start": "32119",
    "end": "38079"
  },
  {
    "text": "am a technical account manager here at",
    "start": "38079",
    "end": "42320"
  },
  {
    "text": "AWS what to expect from today's session I'll start with a 15 minutes uh to lay",
    "start": "44399",
    "end": "50399"
  },
  {
    "text": "out the overview of the benefits of no SQL and Dynamo DB and then a high level",
    "start": "50399",
    "end": "56239"
  },
  {
    "text": "of how Dynamo DB integrates with other AWS services uh that will help you start thinking",
    "start": "56239",
    "end": "62399"
  },
  {
    "text": "about how you can apply this powerful service in your use case and then I'll",
    "start": "62399",
    "end": "67600"
  },
  {
    "text": "turn it over to our customer data Zoo who is of course the main presenter",
    "start": "67600",
    "end": "73320"
  },
  {
    "text": "today to understand the benefits of no SQL let's start by looking at the",
    "start": "73400",
    "end": "78520"
  },
  {
    "text": "differences between SQL and no SQL and why because your choice of database technology will determine of your",
    "start": "78520",
    "end": "85680"
  },
  {
    "text": "application skilles in a relational database system the performance is generally tied to the",
    "start": "85680",
    "end": "92799"
  },
  {
    "text": "hardware specifications of the primary server and this is a technology that came 40 years ago so to improve",
    "start": "92799",
    "end": "99840"
  },
  {
    "text": "performance you will optimize indexes and tables but it is generally easiest",
    "start": "99840",
    "end": "105119"
  },
  {
    "text": "to just move to a bigger box you may create R",
    "start": "105119",
    "end": "111119"
  },
  {
    "start": "109000",
    "end": "151000"
  },
  {
    "text": "replicas uh but no matter the biggest and the fastest box you find out there you will more or less run out of",
    "start": "111119",
    "end": "118039"
  },
  {
    "text": "Headroom and you have to scale up or scale vertically using a relational",
    "start": "118039",
    "end": "124079"
  },
  {
    "text": "database no SQL is different no SQL databases were designed to specifically",
    "start": "124079",
    "end": "130160"
  },
  {
    "text": "overcome the scalability issues so they scale out data to distributed clusters",
    "start": "130160",
    "end": "136080"
  },
  {
    "text": "of lowcost Hardware uh thereby you get increased throughput while maintaining the low latency therefore using no SQL",
    "start": "136080",
    "end": "143640"
  },
  {
    "text": "businesses can scale virtually without any limit",
    "start": "143640",
    "end": "149319"
  },
  {
    "start": "151000",
    "end": "268000"
  },
  {
    "text": "so let's look at the differences from a schema design perspective what you're looking at here is a generic product",
    "start": "152160",
    "end": "158360"
  },
  {
    "text": "catalog where the table relationships are normalized so a product can be a book so",
    "start": "158360",
    "end": "164879"
  },
  {
    "text": "there is a onetoone relationship between a product table and the books table um so a book could be like the Harry Potter",
    "start": "164879",
    "end": "170959"
  },
  {
    "text": "series Chamber of Secrets right or a product could be an album or it can be a movie uh say the",
    "start": "170959",
    "end": "179280"
  },
  {
    "text": "Batman was a Superman movie um which has multiple actors so you have Henry cavl",
    "start": "179280",
    "end": "184480"
  },
  {
    "text": "you have Ben Affleck not shown here but you need a separate table to store the actor's data and uh these actors can be",
    "start": "184480",
    "end": "191599"
  },
  {
    "text": "in many many movies so there is a many to many relationship between the movies on the actor's table now imagine the",
    "start": "191599",
    "end": "199200"
  },
  {
    "text": "type of queries that you'll need to execute to say show me all the movies starring an actor or show me the entire",
    "start": "199200",
    "end": "206760"
  },
  {
    "text": "product catalog now that sequel is resour s intensive notice also how uh you can run",
    "start": "206760",
    "end": "214720"
  },
  {
    "text": "an adhoc query uh to get data so what it means is that relational databases are",
    "start": "214720",
    "end": "220319"
  },
  {
    "text": "agnostic to access parents meaning they were not designed to be uh optimized for",
    "start": "220319",
    "end": "225760"
  },
  {
    "text": "a specific access pattern and businesses are starting to see these limitations with relational databases and switching",
    "start": "225760",
    "end": "232720"
  },
  {
    "text": "to no SQL so how will you do this in no SQL let's look at that example you start",
    "start": "232720",
    "end": "238680"
  },
  {
    "text": "by asking the question how will my application access the data so fast forward to today compute is the costlier",
    "start": "238680",
    "end": "245599"
  },
  {
    "text": "asset so you need to optimize for that so you will store the data in such a way",
    "start": "245599",
    "end": "251360"
  },
  {
    "text": "that you can retrieve all of the information using just a select and not using any joints so it will allow for",
    "start": "251360",
    "end": "258560"
  },
  {
    "text": "duplication of data storage use hierarchical structures and you're optimized for compute and therefore it",
    "start": "258560",
    "end": "264919"
  },
  {
    "text": "is very very fast so to put it all together together",
    "start": "264919",
    "end": "270479"
  },
  {
    "start": "268000",
    "end": "300000"
  },
  {
    "text": "businesses are starting to see scalability uh problems with relational databases I once had a customer who said",
    "start": "270479",
    "end": "277320"
  },
  {
    "text": "that after they reached 3,000 requests per second they had to move to a bigger box but with no SQL you have a",
    "start": "277320",
    "end": "284360"
  },
  {
    "text": "technology where you can scale to hundreds or even thousands of notes and the scalability bottleneck goes away and",
    "start": "284360",
    "end": "291440"
  },
  {
    "text": "they're great for oltp applications at scale where you need that real time data access and you want that fast",
    "start": "291440",
    "end": "297759"
  },
  {
    "text": "performance so that brings us to Amazon Dynamo DB",
    "start": "297759",
    "end": "304360"
  },
  {
    "start": "300000",
    "end": "364000"
  },
  {
    "text": "the fully managed nosql offering from AWS fully managed with just a few clicks",
    "start": "304360",
    "end": "311400"
  },
  {
    "text": "you will be able to create a table specify any amounts of reads and writes and Dynamo DB will handle it for you you",
    "start": "311400",
    "end": "318520"
  },
  {
    "text": "don't have to launch or maintain any servers you will get the fast consistent",
    "start": "318520",
    "end": "324319"
  },
  {
    "text": "singled digigit millisecond latency at any scale it's highly scalable so you",
    "start": "324319",
    "end": "329479"
  },
  {
    "text": "can easily increase and decrease the throughput and you only pay for what you use and you have the flexibility to",
    "start": "329479",
    "end": "335360"
  },
  {
    "text": "store document or key value data and it integrates with Lambda so you can",
    "start": "335360",
    "end": "340720"
  },
  {
    "text": "trigger Lambda functions to execute based on events or changes in data in your Dynamo DB",
    "start": "340720",
    "end": "346720"
  },
  {
    "text": "table and then as in any business you want to be able to specify the fine grained access controls that specify who",
    "start": "346720",
    "end": "353880"
  },
  {
    "text": "has access to what data Dynamo DB integrates with AWS identity and access",
    "start": "353880",
    "end": "358919"
  },
  {
    "text": "management uh and I am to specify the user",
    "start": "358919",
    "end": "364039"
  },
  {
    "start": "364000",
    "end": "442000"
  },
  {
    "text": "access and here are just a few examples of customers who are using Dynamo DB at",
    "start": "364520",
    "end": "369960"
  },
  {
    "text": "a tremendous scale uh Nixon supercell uh powering their games using Dynamo DB to",
    "start": "369960",
    "end": "376680"
  },
  {
    "text": "provide a reliable low latency experience for millions of",
    "start": "376680",
    "end": "381840"
  },
  {
    "text": "users MLB powering their iot applications using Dynamo DB they can",
    "start": "381840",
    "end": "387680"
  },
  {
    "text": "easily scale to support multiple games in a day or dial down to support just one or two games and MLB only pays for",
    "start": "387680",
    "end": "394880"
  },
  {
    "text": "what they use redin when you use their uh fully",
    "start": "394880",
    "end": "400560"
  },
  {
    "text": "managed um real estate app uh and you browse through properties it will show you the walk scores the agent scores all",
    "start": "400560",
    "end": "406759"
  },
  {
    "text": "of the data is stored in Dynamo DB for fast access as a firsttime home buyer",
    "start": "406759",
    "end": "411960"
  },
  {
    "text": "myself um I found using redin made my home buying process really really",
    "start": "411960",
    "end": "417360"
  },
  {
    "text": "easy Expedia says that using Dynamo DB they were up and running in less than a day and there is no need for a team to",
    "start": "417360",
    "end": "424080"
  },
  {
    "text": "maintain so what do these customers want they want to see fast consistent",
    "start": "424080",
    "end": "430520"
  },
  {
    "text": "predictable low latency at any scale and Dynamo DB was designed to deliver on",
    "start": "430520",
    "end": "435800"
  },
  {
    "text": "that so you can just focus on your application and not worry about the",
    "start": "435800",
    "end": "441680"
  },
  {
    "text": "database and this is the look at the console uh you start using Dynamo DB by",
    "start": "441680",
    "end": "446720"
  },
  {
    "text": "creating a table you specify a table name you specify a partition key and an",
    "start": "446720",
    "end": "451960"
  },
  {
    "text": "optional sort key uh which will uniquely uh identify the items within the table",
    "start": "451960",
    "end": "457400"
  },
  {
    "text": "and then you can optionally specify the reads or rights or you can accept the defaults and then click create uh this",
    "start": "457400",
    "end": "464000"
  },
  {
    "text": "table which you just created with a few clicks was highly scalable highly durable and it'll provide you that",
    "start": "464000",
    "end": "469960"
  },
  {
    "text": "consistent fast performance at any",
    "start": "469960",
    "end": "474240"
  },
  {
    "start": "477000",
    "end": "510000"
  },
  {
    "text": "scale so if you look at the uh apis available in Dynamo DB the admin",
    "start": "477479",
    "end": "483120"
  },
  {
    "text": "functions allow you to create manage and maintain a table so you don't have to worry about creating read replicas or",
    "start": "483120",
    "end": "488960"
  },
  {
    "text": "data partitions because it's a fully managed service and all of that is taken care of for you and of course you have",
    "start": "488960",
    "end": "495159"
  },
  {
    "text": "the crud operations to work with the items within a table and you have the apis for Dynamo DB streams uh and what",
    "start": "495159",
    "end": "502599"
  },
  {
    "text": "are streams uh you can think of them as a change log to capture the changes on your Dynamo DB table",
    "start": "502599",
    "end": "510720"
  },
  {
    "start": "510000",
    "end": "548000"
  },
  {
    "text": "so every time uh a CH an update comes into the table they will start to appear on the streams uh in a Time ordered",
    "start": "510720",
    "end": "517200"
  },
  {
    "text": "fashion streams have been around uh since 2014 it's widely used by our customers and you can easily enable",
    "start": "517200",
    "end": "524159"
  },
  {
    "text": "streams they are highly durable and the data in the streams is available for 24 hours so what does that give you uh you",
    "start": "524160",
    "end": "531560"
  },
  {
    "text": "will be able to perform in memory aggregations let's say for a voting application that receives real-time",
    "start": "531560",
    "end": "537760"
  },
  {
    "text": "votes um and you want to perform aggregations on that um and you can also use streams to easily integrate with",
    "start": "537760",
    "end": "544160"
  },
  {
    "text": "other aw services and we will look at some of that so as table updates start to come",
    "start": "544160",
    "end": "551120"
  },
  {
    "text": "in uh they will start to appear in the streams and you can easily use an application that uses uh Amazon Kinesis",
    "start": "551120",
    "end": "557560"
  },
  {
    "text": "client Library KCl enabled application to read from the streams and you can leverage uh the design patterns and KCl",
    "start": "557560",
    "end": "564760"
  },
  {
    "text": "that simplifies stream processing so um so what is a good use",
    "start": "564760",
    "end": "569920"
  },
  {
    "text": "case for this you have an application that's making data modifications to a Dynamo DB table and you can have a KCl",
    "start": "569920",
    "end": "576560"
  },
  {
    "text": "application that reads this data and writes to a table in a different region",
    "start": "576560",
    "end": "581600"
  },
  {
    "text": "so now you have a replica that is in sync with the original and just like that you have enabled cross region",
    "start": "581600",
    "end": "589079"
  },
  {
    "start": "589000",
    "end": "625000"
  },
  {
    "text": "replication Dynamo DB streams integrates with the Lambda so you can fire um you",
    "start": "589079",
    "end": "594640"
  },
  {
    "text": "know a Lambda function based on changes that appear on the streams so so what",
    "start": "594640",
    "end": "600240"
  },
  {
    "text": "this function here is doing is Lambda uh is reading uh from the stream a data",
    "start": "600240",
    "end": "605399"
  },
  {
    "text": "modification that tells us that a sinestra who was a Green Lantern just",
    "start": "605399",
    "end": "610440"
  },
  {
    "text": "changed to a Yellow Lantern and all this function does here is it prints the data out to the console but you can take a",
    "start": "610440",
    "end": "617720"
  },
  {
    "text": "lot of powerful actions based on using Lambda for",
    "start": "617720",
    "end": "623200"
  },
  {
    "text": "example now you can use Lambda to read data from the streams let's say an",
    "start": "624600",
    "end": "629640"
  },
  {
    "text": "interesting Json uh properties and you can update a derivative table um of",
    "start": "629640",
    "end": "634760"
  },
  {
    "text": "Dynamo DB and store that or you can update elastic search Cloud search or",
    "start": "634760",
    "end": "639800"
  },
  {
    "text": "elastic Ash so you don't need to have a separate application that looks for data changes and you can leverage Lambda to",
    "start": "639800",
    "end": "647120"
  },
  {
    "text": "take care of that easily for you or you can use Lambda to send SNS notifications and you can perform a variety of",
    "start": "647120",
    "end": "652959"
  },
  {
    "text": "different functions now uh Lambda you can just upload code and you will execute the code on your behalf and it",
    "start": "652959",
    "end": "660079"
  },
  {
    "text": "supports a variety of different languages so if you like to write code there are Endless Options what you can",
    "start": "660079",
    "end": "666399"
  },
  {
    "text": "do with Lambda and Dynamo DB streams Dynamo DB streams are great for",
    "start": "666399",
    "end": "673760"
  },
  {
    "start": "671000",
    "end": "703000"
  },
  {
    "text": "real time aggregations and analytics now you can store any amount of data in a Dynamo DB table it can scale to paryt",
    "start": "673760",
    "end": "681160"
  },
  {
    "text": "you can specify any amount of reads and any amount of Rights uh and you can use a KCl enabled application to read from",
    "start": "681160",
    "end": "687480"
  },
  {
    "text": "the streams um and send it to to various targets say for example you have a",
    "start": "687480",
    "end": "692639"
  },
  {
    "text": "you're you're looking at compliance verification data changes and you can post those data to Red shift which is",
    "start": "692639",
    "end": "697760"
  },
  {
    "text": "our fedy scale data",
    "start": "697760",
    "end": "701399"
  },
  {
    "start": "703000",
    "end": "827000"
  },
  {
    "text": "warehouse I want to leave you with this reference architecture this slide will",
    "start": "703200",
    "end": "708240"
  },
  {
    "text": "be available to you to download after this session so there are a variety of use cases uh that are enabled by Dynamo",
    "start": "708240",
    "end": "715519"
  },
  {
    "text": "DB streams so you can use the read the streams data and and keep your Amazon",
    "start": "715519",
    "end": "720800"
  },
  {
    "text": "elastic cache updated for your caching application or post update to Cloud search or elastic search so you keep",
    "start": "720800",
    "end": "727560"
  },
  {
    "text": "your search cap capabilities up to date or you can uh use EMR for further analytics and processing or copy data to",
    "start": "727560",
    "end": "734639"
  },
  {
    "text": "S3 and Amazon red shift so put together think of these as different tools and",
    "start": "734639",
    "end": "740320"
  },
  {
    "text": "building blocks that you can use to build your application um and I hope you can take away ideas to fit this into",
    "start": "740320",
    "end": "747120"
  },
  {
    "text": "your use case so with that I will turn this over to",
    "start": "747120",
    "end": "752440"
  },
  {
    "text": "yaka from datoo to talk to us about their Dynamo DB journey and share with",
    "start": "752440",
    "end": "758079"
  },
  {
    "text": "us some of the best practices that they learned along the way thank you Padma um good morning",
    "start": "758079",
    "end": "765519"
  },
  {
    "text": "everyone uh thanks for being here did you guys attend the uh keynote this",
    "start": "765519",
    "end": "770720"
  },
  {
    "text": "morning the snowb was awesome so I I loved it um so",
    "start": "770720",
    "end": "779680"
  },
  {
    "text": "I'm here to talk about the uh Dynamo DB use case at datoo um and U so here is",
    "start": "779680",
    "end": "786040"
  },
  {
    "text": "what to expect from this session a quick spill on datu we'll keep it short and uh the use case in which we use Dynamo DB",
    "start": "786040",
    "end": "793360"
  },
  {
    "text": "which is attribution I'm going to touch on that one and then why Dynamo DB right what what makes it uh U you know what",
    "start": "793360",
    "end": "801040"
  },
  {
    "text": "makes it align with our use case and why did we go about you know how did we go about choosing Dynamo and what kind of a",
    "start": "801040",
    "end": "807240"
  },
  {
    "text": "uh what did we have prior to Dynamo d so that's an important context to have and then we'll look into uh the deployment",
    "start": "807240",
    "end": "814199"
  },
  {
    "text": "architecture at a high level then uh my colleague Rohit diani is going to touch",
    "start": "814199",
    "end": "820360"
  },
  {
    "text": "touch on the capacity performance and some lessons learned along the way good deal awesome let's go all right so who",
    "start": "820360",
    "end": "828639"
  },
  {
    "start": "827000",
    "end": "925000"
  },
  {
    "text": "is datoo um datoo um is a parab skill marketing",
    "start": "828639",
    "end": "834040"
  },
  {
    "text": "platform um we have a spun out of MIT labs and um here are the quick numbers",
    "start": "834040",
    "end": "839160"
  },
  {
    "text": "we operate at internet scale and the numbers speak for themselves um so what",
    "start": "839160",
    "end": "846000"
  },
  {
    "text": "we do is we help the brands engage with the consumer along their",
    "start": "846000",
    "end": "851600"
  },
  {
    "text": "Journey uh I'm going to talk about that how exactly we do that in the upcoming slides um and our customer is an",
    "start": "851600",
    "end": "860440"
  },
  {
    "text": "Advertiser So tactically speaking we try to maximize the return on investment for",
    "start": "860440",
    "end": "866040"
  },
  {
    "text": "our our customers simply that so our mission at data zoo is to apply data",
    "start": "866040",
    "end": "872240"
  },
  {
    "text": "science to marketing problems um quick run through the numbers uh our real time engine which",
    "start": "872240",
    "end": "879959"
  },
  {
    "text": "I'm going to talk about is uh processes about 2 million transactions a second",
    "start": "879959",
    "end": "885639"
  },
  {
    "text": "this talk is about an hour in length so during this time our system would process about 7.2 billion transactions",
    "start": "885639",
    "end": "893920"
  },
  {
    "text": "while I'm up here on the stage um so billions of Impressions clearly",
    "start": "893920",
    "end": "899600"
  },
  {
    "text": "petabytes of data uh 180 terabytes collected on every single day about two",
    "start": "899600",
    "end": "906279"
  },
  {
    "text": "petabytes analyed on a daily basis for our data science use cases um and then",
    "start": "906279",
    "end": "912519"
  },
  {
    "text": "we of course the operations is we operate out of 13 different data centers and regions we a hybrid model for now uh",
    "start": "912519",
    "end": "920040"
  },
  {
    "text": "but you know it's a 24x7",
    "start": "920040",
    "end": "924079"
  },
  {
    "start": "925000",
    "end": "1046000"
  },
  {
    "text": "operations all right so real time bidding um very quick control I'm not going to go through the the actual block",
    "start": "925519",
    "end": "932040"
  },
  {
    "text": "diagram on the on the slide but at a high level what realtime bidding is is",
    "start": "932040",
    "end": "937279"
  },
  {
    "text": "um let's say you are in the market to buy a car you go to the internet you go on the websites you put in some",
    "start": "937279",
    "end": "943519"
  },
  {
    "text": "parameters you pull up some car you do some side by-side comparison of the cars",
    "start": "943519",
    "end": "949040"
  },
  {
    "text": "and then you might look for deals in your neighborhood so as you're doing this you",
    "start": "949040",
    "end": "955360"
  },
  {
    "text": "are dropping hints and clues but how does advertisers know how to connect",
    "start": "955360",
    "end": "960600"
  },
  {
    "text": "with you because they might have deals in in in in store that's where we come in with our real-time capabilities so",
    "start": "960600",
    "end": "967240"
  },
  {
    "text": "real-time bidding is basically ads are auctioned off in real time using",
    "start": "967240",
    "end": "972360"
  },
  {
    "text": "programmatic apis so we have we plug into that",
    "start": "972360",
    "end": "977519"
  },
  {
    "text": "real-time auction platform the realtime auctions are conducted through an ad",
    "start": "977519",
    "end": "982639"
  },
  {
    "text": "exchange and we participate in this on behalf of our advertisers and um the when we bid on an",
    "start": "982639",
    "end": "990680"
  },
  {
    "text": "on an ad slot for example so the ad slots are the ads that you see on the side of the page and the bottom of the",
    "start": "990680",
    "end": "996759"
  },
  {
    "text": "page we bid with a price and the highest bidder wins it's a second price option",
    "start": "996759",
    "end": "1002800"
  },
  {
    "text": "uh and um and and the winner gets to serve the ad so that's really real time so one meta point that I want you to",
    "start": "1002800",
    "end": "1008880"
  },
  {
    "text": "note from here is as realtime engine is serving these ads to the internet it is",
    "start": "1008880",
    "end": "1014480"
  },
  {
    "text": "generating lots of events let's just say billions of events",
    "start": "1014480",
    "end": "1019839"
  },
  {
    "text": "right it says hey I served an ad or I bided on an ad I didn't win I bided on",
    "start": "1019839",
    "end": "1026760"
  },
  {
    "text": "an ad at this price and I won so it's collecting all these signals because it",
    "start": "1026760",
    "end": "1032558"
  },
  {
    "text": "wants to learn from its behavior and we the system adjusts its",
    "start": "1032559",
    "end": "1038438"
  },
  {
    "text": "realtime bidding strategies continuously so so that's the real",
    "start": "1038439",
    "end": "1043720"
  },
  {
    "text": "matter point from this slide uh so let's see how much we actually use data Dynamo DB just to",
    "start": "1043720",
    "end": "1052000"
  },
  {
    "start": "1046000",
    "end": "1103000"
  },
  {
    "text": "provide some context and some perspective these are the production",
    "start": "1052000",
    "end": "1058000"
  },
  {
    "text": "charts uh both representing one table the on the left hand side Shows Daily",
    "start": "1058000",
    "end": "1063880"
  },
  {
    "text": "access pattern on the right hand side chart shows the hourly axis pattern we do have a little bit of a cyclical as",
    "start": "1063880",
    "end": "1070480"
  },
  {
    "text": "you can see in the hourly pattern on the left hand side chart um the y- axis I",
    "start": "1070480",
    "end": "1076080"
  },
  {
    "text": "mean I don't know if you guys in the back can see it even I can't see see it but it's really the billions of",
    "start": "1076080",
    "end": "1081400"
  },
  {
    "text": "keys so that's the that's how much we access on a daily basis and on the",
    "start": "1081400",
    "end": "1087600"
  },
  {
    "text": "hourly chart what you see is a little bit of a cyclical pattern like I",
    "start": "1087600",
    "end": "1092640"
  },
  {
    "text": "said again just to give you some perspective of how much we use Dynamo",
    "start": "1092640",
    "end": "1099200"
  },
  {
    "text": "DB so let's get into the use case in which we use this okay so what's attribution well",
    "start": "1099200",
    "end": "1106240"
  },
  {
    "start": "1103000",
    "end": "1200000"
  },
  {
    "text": "attribution is basically um some of you might already know this in the world of marketing attribution basically means",
    "start": "1106240",
    "end": "1112960"
  },
  {
    "text": "allocating credits to The Touch point that generated the desired outcome the",
    "start": "1112960",
    "end": "1119039"
  },
  {
    "text": "desired outcome might be in this case is an online purchase right when the ads",
    "start": "1119039",
    "end": "1124320"
  },
  {
    "text": "are shown let's say in this particular case two ads were shown user clicked after the second ad and then they went",
    "start": "1124320",
    "end": "1131120"
  },
  {
    "text": "to a website and made a purchase right so that's the sequence of events these are four events right it's just a you",
    "start": "1131120",
    "end": "1138520"
  },
  {
    "text": "know just to keep things simple sometimes it's it's not four it's it could be 40 sometimes it could be two",
    "start": "1138520",
    "end": "1144360"
  },
  {
    "text": "but the point of this this pictorial is to give you a feel for what a customer",
    "start": "1144360",
    "end": "1149799"
  },
  {
    "text": "Journey or a consumer Journey might look like so there's two Impressions one click and uh and and an online",
    "start": "1149799",
    "end": "1157200"
  },
  {
    "text": "purchase so why is attribution useful well the marketers the brands they want",
    "start": "1157200",
    "end": "1163720"
  },
  {
    "text": "to know insights to why which marketing touch points are more profitable so they",
    "start": "1163720",
    "end": "1171200"
  },
  {
    "text": "can adjust their campaign spend accordingly to to achieve best results",
    "start": "1171200",
    "end": "1176799"
  },
  {
    "text": "for their business and from our side we also look at the same information",
    "start": "1176799",
    "end": "1182120"
  },
  {
    "text": "because we know which impressions are generating positive signals because we",
    "start": "1182120",
    "end": "1187720"
  },
  {
    "text": "want to generate more conversions right that's how we get paid so we are we also look at it we also look at the same data",
    "start": "1187720",
    "end": "1195440"
  },
  {
    "text": "to learn from it all right",
    "start": "1195440",
    "end": "1202760"
  },
  {
    "start": "1200000",
    "end": "1334000"
  },
  {
    "text": "so the day in and day out the system is collecting lots and lots of users or",
    "start": "1202760",
    "end": "1208280"
  },
  {
    "text": "lots and lots of events I'm going to group them into two here the each box",
    "start": "1208280",
    "end": "1214280"
  },
  {
    "text": "represents One customer uh event chain right two",
    "start": "1214280",
    "end": "1220039"
  },
  {
    "text": "Impressions this is a general schematic two Impressions one event and an activity in the first box and one event",
    "start": "1220039",
    "end": "1228159"
  },
  {
    "text": "or one expression two events and and followed by an activity in the second",
    "start": "1228159",
    "end": "1234080"
  },
  {
    "text": "box so attribution basically means in that user chain of events or sequence of",
    "start": "1234080",
    "end": "1241200"
  },
  {
    "text": "events you find the activity or the conversion and then you attribute to the",
    "start": "1241200",
    "end": "1246919"
  },
  {
    "text": "impression that caused the conversion in this case it's called a",
    "start": "1246919",
    "end": "1252640"
  },
  {
    "text": "linear attribution where you take the value from that attribution and assign",
    "start": "1252640",
    "end": "1258120"
  },
  {
    "text": "it equally to The Impressions preceding it this is called linear attribution",
    "start": "1258120",
    "end": "1264280"
  },
  {
    "text": "there are many other algorithms I'm not going to bore you with the details here but just to give you a feel so the attribution engine's main",
    "start": "1264280",
    "end": "1273039"
  },
  {
    "text": "purpose is to take all this data sorted as the",
    "start": "1273039",
    "end": "1279480"
  },
  {
    "text": "user time series data find the activity and then walk",
    "start": "1279480",
    "end": "1285679"
  },
  {
    "text": "backwards make sense there are two ways to do this right again I'm going to keep it grossly",
    "start": "1285679",
    "end": "1292360"
  },
  {
    "text": "simple there's you know we can argue there's thousand ways to do this but the two ways are one you take all the data",
    "start": "1292360",
    "end": "1299640"
  },
  {
    "text": "every single time and do a massive sort of the data because we need the we need",
    "start": "1299640",
    "end": "1305919"
  },
  {
    "text": "the data to be sorted As Time series by user by time series so we can do a massive sort every single time we run",
    "start": "1305919",
    "end": "1312039"
  },
  {
    "text": "the engine or we can sort it and insert",
    "start": "1312039",
    "end": "1317120"
  },
  {
    "text": "the insert the as the new events come in we can insert them in the right place so the then it becomes a simpler",
    "start": "1317120",
    "end": "1325039"
  },
  {
    "text": "compute problem we opted the second the latter that's why we use Dynamo",
    "start": "1325039",
    "end": "1331760"
  },
  {
    "text": "DB so why Dynamo DB well Dynamo DB matches our use case really really well",
    "start": "1331760",
    "end": "1337600"
  },
  {
    "start": "1334000",
    "end": "1574000"
  },
  {
    "text": "that's number one and I'll show you a live an example and then it's a manage",
    "start": "1337600",
    "end": "1343320"
  },
  {
    "text": "service right Padma talked about this in her slides it's a fully manage service",
    "start": "1343320",
    "end": "1349919"
  },
  {
    "text": "and that's what we love about it so prior to Dynamo DB we had a a very",
    "start": "1349919",
    "end": "1356799"
  },
  {
    "text": "popular key Value Store uh deployed in our in our in a",
    "start": "1356799",
    "end": "1362039"
  },
  {
    "text": "colum lots of time was spent in maintaining that whether it's the operating system upgrades or the uh the",
    "start": "1362039",
    "end": "1369760"
  },
  {
    "text": "software upgrades or rebalancing the data whatever it is you spend a lot of",
    "start": "1369760",
    "end": "1375679"
  },
  {
    "text": "time dealing with the maintenance issues that was one and and also to Rack it and",
    "start": "1375679",
    "end": "1383760"
  },
  {
    "text": "you know if you want to expand the capacity you got to go through the normal process of ordering the machines",
    "start": "1383760",
    "end": "1389320"
  },
  {
    "text": "racking them stacking them it all takes time then you go to this funny rebalancing which can take a long time and impacts your um throughput and",
    "start": "1389320",
    "end": "1397760"
  },
  {
    "text": "performance in real time so we wanted to do away with all of those things so we",
    "start": "1397760",
    "end": "1403799"
  },
  {
    "text": "were looking for a manage service and Dynamo DB fits the bill that's number one and uh there is never a need to over",
    "start": "1403799",
    "end": "1411240"
  },
  {
    "text": "provision especially for attech which is cyclical business the November December",
    "start": "1411240",
    "end": "1416360"
  },
  {
    "text": "months are crazy right and then it goes up and down right it's cyclical so we",
    "start": "1416360",
    "end": "1422760"
  },
  {
    "text": "there is no need to Pro over provision or provision ahead of time and there's",
    "start": "1422760",
    "end": "1428159"
  },
  {
    "text": "APS for for doing everything whether it is creating the tables or expanding the",
    "start": "1428159",
    "end": "1433679"
  },
  {
    "text": "tables or expanding the capacity or the throughput of the tables or or ingesting",
    "start": "1433679",
    "end": "1439720"
  },
  {
    "text": "the data into the tables is API for it fast and predictable performance is",
    "start": "1439720",
    "end": "1446799"
  },
  {
    "text": "key because the reason why you use a key value store is because of its performance if it doesn't deliver",
    "start": "1446799",
    "end": "1453320"
  },
  {
    "text": "consistent performance is no good so this was one of our evaluation criteria",
    "start": "1453320",
    "end": "1459360"
  },
  {
    "text": "when we made that switch and we ran this at a scale of you know five requests per",
    "start": "1459360",
    "end": "1466880"
  },
  {
    "text": "second we ran this all the way up to 1 million requests per second the",
    "start": "1466880",
    "end": "1472399"
  },
  {
    "text": "performance was consistent right I'm going to pause there for a second because when we were",
    "start": "1472399",
    "end": "1480000"
  },
  {
    "text": "migrating our data we we accumulated this data for years and we wanted to",
    "start": "1480000",
    "end": "1485240"
  },
  {
    "text": "move all that data to to Dynamo and we were on a very strict uh timeline as we",
    "start": "1485240",
    "end": "1490880"
  },
  {
    "text": "moving this data and then we called up Dynamo in the morning and I said we said hey you know we are we need to bump up",
    "start": "1490880",
    "end": "1497679"
  },
  {
    "text": "our capacity how fast can we go they said how about a million requests per second said are you kidding no they said",
    "start": "1497679",
    "end": "1505279"
  },
  {
    "text": "we can provision that for you an hour later we got the email saying go for it",
    "start": "1505279",
    "end": "1510559"
  },
  {
    "text": "system is provisioned now this is like out of bounds right I mean 1 million is not something we were even expecting and",
    "start": "1510559",
    "end": "1517200"
  },
  {
    "text": "dyn said why don't you try it now so we did it and then it went 1 million and",
    "start": "1517200",
    "end": "1523960"
  },
  {
    "text": "plus super fast we ingested the entire data in less than a day day the data",
    "start": "1523960",
    "end": "1530039"
  },
  {
    "text": "that we've been collecting for over years has been ingested at this",
    "start": "1530039",
    "end": "1536159"
  },
  {
    "text": "throughput in less than a day so fast and consistent we've tested",
    "start": "1536159",
    "end": "1541320"
  },
  {
    "text": "this thoroughly right so it's fast and consistent performance and the TCO so TCO the total cost of ownership",
    "start": "1541320",
    "end": "1549159"
  },
  {
    "text": "dropped down to the Opex part dropped down to zero we have no longer have anyone on our staff to manage this",
    "start": "1549159",
    "end": "1555559"
  },
  {
    "text": "system it's a manage service why should we but previously with our previous key",
    "start": "1555559",
    "end": "1560679"
  },
  {
    "text": "value store we always had someone on the staff on Call duties and and and all the",
    "start": "1560679",
    "end": "1566559"
  },
  {
    "text": "other good good stuff that we have to deal with in running the system so we no longer have this",
    "start": "1566559",
    "end": "1574278"
  },
  {
    "start": "1574000",
    "end": "1579000"
  },
  {
    "text": "anymore all right let's look at the deployment very quickly so this architecture is being",
    "start": "1574399",
    "end": "1581399"
  },
  {
    "text": "transitioned out some of these map reduce jobs are being replaced by spark if you guys want to understand why we",
    "start": "1581399",
    "end": "1588320"
  },
  {
    "text": "doing that you know we are doing another talk on spark um it's actually tomorrow",
    "start": "1588320",
    "end": "1593760"
  },
  {
    "text": "at 4:00 if you guys want to come by and um here is the on the left hand side you have realtime bidding engine I talked",
    "start": "1593760",
    "end": "1599840"
  },
  {
    "text": "about it's generating lots of events our all the daa ingestion happens through",
    "start": "1599840",
    "end": "1604880"
  },
  {
    "text": "Kinesis for us and then we have big three map reduce jobs the middle one is the attribution use case which reads and",
    "start": "1604880",
    "end": "1611520"
  },
  {
    "text": "writes out of S3 and um it that's the one that uses the um uh Dynamo DB and",
    "start": "1611520",
    "end": "1619720"
  },
  {
    "text": "I'm that's where I'm going to focus for now oh one thing I wanted to say um all",
    "start": "1619720",
    "end": "1626080"
  },
  {
    "start": "1622000",
    "end": "1710000"
  },
  {
    "text": "these services are are great but you know the ecosystem of other services such as Cloud watch and SNS and Imam and",
    "start": "1626080",
    "end": "1634200"
  },
  {
    "text": "VPC security groups they're an important part of the fabric to deploy production",
    "start": "1634200",
    "end": "1639760"
  },
  {
    "text": "use cases so um I just wanted to call that out and you can see it clearly here",
    "start": "1639760",
    "end": "1645159"
  },
  {
    "text": "even though the the Dynamo in Dynamo DB is the key Cornerstone for our",
    "start": "1645159",
    "end": "1651919"
  },
  {
    "text": "attribution use case there's bunch of other services that we use all around it",
    "start": "1651919",
    "end": "1657120"
  },
  {
    "text": "so let's start let's see how the the actual engine runs first we create an S3",
    "start": "1657120",
    "end": "1662600"
  },
  {
    "text": "bucket we have data flowing from third parties and first parties then we have a",
    "start": "1662600",
    "end": "1668880"
  },
  {
    "text": "data pipeline that runs easy to uh machines which then spins up EMR which",
    "start": "1668880",
    "end": "1677320"
  },
  {
    "text": "installs the application as part of the bootstrap action it does its checkpointing from RDS instance as the",
    "start": "1677320",
    "end": "1684279"
  },
  {
    "text": "application begins to run it it talks to Dynamo DB and then all the important events the",
    "start": "1684279",
    "end": "1690919"
  },
  {
    "text": "application metrics are recorded in Cloud watch when thresholds are breached",
    "start": "1690919",
    "end": "1696760"
  },
  {
    "text": "SNS gets sent out to the to alert the engineers and of course we have a direct",
    "start": "1696760",
    "end": "1701799"
  },
  {
    "text": "connect so the system can reach back into the Colo and the developers can log back log into the system make",
    "start": "1701799",
    "end": "1709679"
  },
  {
    "text": "sense all right so PE peeling the onion one more layer here is what we have the",
    "start": "1709679",
    "end": "1716399"
  },
  {
    "start": "1710000",
    "end": "1824000"
  },
  {
    "text": "attribution engine is inserting these events again the the events in the order of billions using",
    "start": "1716399",
    "end": "1723720"
  },
  {
    "text": "apis and the event they all flow into this table called user",
    "start": "1723720",
    "end": "1730440"
  },
  {
    "text": "events we have hash as the user ID which is basically the partition key and then",
    "start": "1730440",
    "end": "1736039"
  },
  {
    "text": "we have range which is the time stamp and the payload is a binary compressed",
    "start": "1736039",
    "end": "1742000"
  },
  {
    "text": "payload I let Rohit talk about some of the details about how we structured this",
    "start": "1742000",
    "end": "1747200"
  },
  {
    "text": "and and uh um in little bit more DET detail we have this table as a rolling",
    "start": "1747200",
    "end": "1756720"
  },
  {
    "text": "monthly table the reason for that is um we wanted to avoid delete operations",
    "start": "1756720",
    "end": "1762919"
  },
  {
    "text": "from this table delete operation counts as a right operation and the right operation is obviously the most",
    "start": "1762919",
    "end": "1769120"
  },
  {
    "text": "expensive operation so what we do and storage is cheap in in Dynamo it's not",
    "start": "1769120",
    "end": "1774919"
  },
  {
    "text": "that is is it's not that much money so we let the data accumulate our attribution look back window is 30 days",
    "start": "1774919",
    "end": "1782320"
  },
  {
    "text": "so what we do is we accumulate the data for two months two calendar months and when we roll into the third month we",
    "start": "1782320",
    "end": "1788640"
  },
  {
    "text": "drop the oldest partition that's how it works so we save on the delete operation",
    "start": "1788640",
    "end": "1793840"
  },
  {
    "text": "one of the comments that I get um when I talk about Dynam DB oh Dynamo DB is",
    "start": "1793840",
    "end": "1799279"
  },
  {
    "text": "expensive well it's not you have to think about how the rights and the reads",
    "start": "1799279",
    "end": "1804440"
  },
  {
    "text": "are counted once you know the math we're going to explain to you the math in a little bit more detail but once you know",
    "start": "1804440",
    "end": "1810919"
  },
  {
    "text": "the math you can manage your cost so that's how we do it we don't do the",
    "start": "1810919",
    "end": "1816720"
  },
  {
    "text": "delete operations we just let the table drop and it's uh it's there's no Fe for",
    "start": "1816720",
    "end": "1822279"
  },
  {
    "text": "that I mean you can just simply drop it all right so um we use there's in the um",
    "start": "1822279",
    "end": "1830240"
  },
  {
    "start": "1824000",
    "end": "1931000"
  },
  {
    "text": "within the table we maintain one to n relationship right the four events that",
    "start": "1830240",
    "end": "1835880"
  },
  {
    "text": "I talked about in the attribution this two Impressions and followed by a click followed by an activity that's how it",
    "start": "1835880",
    "end": "1842320"
  },
  {
    "text": "appears in the Dynamo DB so it's very easy to tell now if you if we get the",
    "start": "1842320",
    "end": "1847960"
  },
  {
    "text": "last event which is an activity we know where to insert we know the user we have the time stamp we go go in this table",
    "start": "1847960",
    "end": "1855639"
  },
  {
    "text": "and insert it exactly where it belongs and now the attribution is basically we walk backwards from that we pull all the",
    "start": "1855639",
    "end": "1863440"
  },
  {
    "text": "four events for this user and we do the attribution it's a super lightweight compute because we've structured the",
    "start": "1863440",
    "end": "1870480"
  },
  {
    "text": "data in the way it is to make it easy for us and Dynamo DB helps us structure",
    "start": "1870480",
    "end": "1876919"
  },
  {
    "text": "the data the time series data to make it very easy for our use case with that",
    "start": "1876919",
    "end": "1882320"
  },
  {
    "text": "said let me invite up my colleague Rohit diani he's going to talk us through uh",
    "start": "1882320",
    "end": "1888120"
  },
  {
    "text": "the the capacity performance and all the other Integrity details thank",
    "start": "1888120",
    "end": "1894039"
  },
  {
    "text": "you thank you AA good morning everybody I'm Rohit I work in the team which is",
    "start": "1897600",
    "end": "1903919"
  },
  {
    "text": "build the attribution engine for dato which uses Dynam DB at the center",
    "start": "1903919",
    "end": "1909399"
  },
  {
    "text": "of it so just a little show of fans how many people are already working with Dynamo DB in their",
    "start": "1909399",
    "end": "1915679"
  },
  {
    "text": "systems good close to 40 50% % um so I'll start with little Basics so that",
    "start": "1915679",
    "end": "1921399"
  },
  {
    "text": "everybody gets on the same page and then we go deeper to understand things behind the scene and you'll be able to",
    "start": "1921399",
    "end": "1927919"
  },
  {
    "text": "appreciate U some of these things here so Dynamo DB comes with a concept",
    "start": "1927919",
    "end": "1934559"
  },
  {
    "start": "1931000",
    "end": "2113000"
  },
  {
    "text": "of a capacity unit uh which is the measurement of throughput in Dynamo DB it's a little different from the other",
    "start": "1934559",
    "end": "1940960"
  },
  {
    "text": "traditional systems which measure throughput only in terms of read and write operations in Dynamo DB one read",
    "start": "1940960",
    "end": "1947600"
  },
  {
    "text": "cap capacity unit is sufficient for doing one strongly consistent read per second for an item up to 4 KB in size",
    "start": "1947600",
    "end": "1954639"
  },
  {
    "text": "now if your item which is the record also uh is greater than 4 KB and dyn DB",
    "start": "1954639",
    "end": "1959720"
  },
  {
    "text": "reads that it's going to consume additional capacity units similarly one right capacity unit is good for doing 1",
    "start": "1959720",
    "end": "1966639"
  },
  {
    "text": "KB item read per second you also have to estimate the actual number of read and write",
    "start": "1966639",
    "end": "1972639"
  },
  {
    "text": "operations which your application will perform on the table this along with the estim at item size will help you",
    "start": "1972639",
    "end": "1979519"
  },
  {
    "text": "determine the capacity units you would need to create or provision on your",
    "start": "1979519",
    "end": "1985000"
  },
  {
    "text": "table when a data is written to Dynamo DB it gets replicated into different",
    "start": "1985000",
    "end": "1990799"
  },
  {
    "text": "availability zones within the region and that's going to take time but data will be eventually consistent so",
    "start": "1990799",
    "end": "1998039"
  },
  {
    "text": "Dynamo DB supports different application read patterns which are strongly consistent or eventually consistent you",
    "start": "1998039",
    "end": "2004320"
  },
  {
    "text": "of course have to pay double for strongly consistent read also if you have local secondary indexes",
    "start": "2004320",
    "end": "2010480"
  },
  {
    "text": "along with your table and you write it's going to consume additional right capacity units to take a simple example",
    "start": "2010480",
    "end": "2017600"
  },
  {
    "text": "if you have a item which is 1 KB in size and you write that and that contains a index attribute dynamodb will consume",
    "start": "2017600",
    "end": "2024679"
  },
  {
    "text": "two capacity units one for writing to the table other one for writing to the",
    "start": "2024679",
    "end": "2030240"
  },
  {
    "text": "index below a Dynamo DB table are partitions what is a partition a",
    "start": "2030919",
    "end": "2036440"
  },
  {
    "text": "partition is a allocation of storage typically backed by the ssts and also replicated into different availability",
    "start": "2036440",
    "end": "2042679"
  },
  {
    "text": "zones a partition is sufficient for storing 10gb of data and also supports",
    "start": "2042679",
    "end": "2048520"
  },
  {
    "text": "throughput requirements of 3,000 rcus or 1,000 wco the number of partitions in a table",
    "start": "2048520",
    "end": "2056560"
  },
  {
    "text": "would be determined based on the throughput requirement or the size requirement um there's a formula out",
    "start": "2056560",
    "end": "2062200"
  },
  {
    "text": "there so when you create the table there is no storage there is no data stored in",
    "start": "2062200",
    "end": "2067240"
  },
  {
    "text": "that and the number of partitions which Dynamo DB will create for your table is based on the throughput requirements",
    "start": "2067240",
    "end": "2073240"
  },
  {
    "text": "which you'll set Dynam DV will create additional partitions in two two reasons um if you",
    "start": "2073240",
    "end": "2082079"
  },
  {
    "text": "store more data and the existing partition capacity is full it will create more partitions behind the scene",
    "start": "2082079",
    "end": "2089118"
  },
  {
    "text": "also in case you provision your table with higher capacity settings which is beyond what is the",
    "start": "2089119",
    "end": "2094679"
  },
  {
    "text": "current provision capacity settings dyb will create more partition now partition management is completely",
    "start": "2094679",
    "end": "2099960"
  },
  {
    "text": "done by Dynamo DB the application doesn't need to bother about it and while the additional partition creation",
    "start": "2099960",
    "end": "2106200"
  },
  {
    "text": "maybe happening in the background the table is available for",
    "start": "2106200",
    "end": "2111838"
  },
  {
    "start": "2113000",
    "end": "2266000"
  },
  {
    "text": "throughout okay so here are some examples to look at what we just discussed in the formula let's say we",
    "start": "2113240",
    "end": "2119280"
  },
  {
    "text": "have a table which is 35gb of storage and also provision with th000 rcus and",
    "start": "2119280",
    "end": "2125280"
  },
  {
    "text": "500 wcu in this case the formula gives us the number of partitions which is coming",
    "start": "2125280",
    "end": "2130440"
  },
  {
    "text": "Max from the size as four with this the provision RCU which is th000 is distributed equally into",
    "start": "2130440",
    "end": "2137200"
  },
  {
    "text": "four partitions and then each partition will support 250 reads per second and",
    "start": "2137200",
    "end": "2142880"
  },
  {
    "text": "125 rights per second imagine the same table grows up and then we now have one TV of data in",
    "start": "2142880",
    "end": "2150079"
  },
  {
    "text": "the same table and you maintain the same provision capacities but behind the scenes the number of partitions have",
    "start": "2150079",
    "end": "2155920"
  },
  {
    "text": "gone up which is 100 so reads and writes per second will proportionally go down what you see as a",
    "start": "2155920",
    "end": "2163119"
  },
  {
    "text": "five and a 10 number is not really a low number just to put some things in",
    "start": "2163119",
    "end": "2168640"
  },
  {
    "text": "perspective um VK has showed the events table which we have which is 25 TV in",
    "start": "2168640",
    "end": "2173720"
  },
  {
    "text": "size that has 2500 partitions for us and we provision the table with tens of",
    "start": "2173720",
    "end": "2180119"
  },
  {
    "text": "thousands of capacity units so so it'll be roughly around 20 read capacity unit",
    "start": "2180119",
    "end": "2185400"
  },
  {
    "text": "so so this number is no low um third and fourth example actually compare and contrast U so the table have",
    "start": "2185400",
    "end": "2192839"
  },
  {
    "text": "the same storage which is 100 GB but they are different provision capacities and you see the number of partitions",
    "start": "2192839",
    "end": "2198720"
  },
  {
    "text": "between both of them are different and so is the read and write capacity per partition The Meta point over here is U",
    "start": "2198720",
    "end": "2205800"
  },
  {
    "text": "sometimes Your Capacity requirements will dictate the number of partitions sometimes the",
    "start": "2205800",
    "end": "2211560"
  },
  {
    "text": "storage requirements will dictate the number of partitions just to conclude we have one",
    "start": "2211560",
    "end": "2216760"
  },
  {
    "text": "more example um which is the table Remains the Same 100 GB the provision",
    "start": "2216760",
    "end": "2222000"
  },
  {
    "text": "capacities are 9,000 and 3,000 but let's say our data size is bigger than the",
    "start": "2222000",
    "end": "2227160"
  },
  {
    "text": "average what we spoke about as a 4 KB limit for a read capacity unit and 1 KB",
    "start": "2227160",
    "end": "2232520"
  },
  {
    "text": "for a right capacity unit so if we start storing data which is 5 KB the item size",
    "start": "2232520",
    "end": "2237960"
  },
  {
    "text": "is 5 KB in this case Dynamo DB will consume two read capacity units for reading this item and five right",
    "start": "2237960",
    "end": "2244960"
  },
  {
    "text": "capacities for writing this item and you would see the number of reads and wres per partition would be supported to a",
    "start": "2244960",
    "end": "2252200"
  },
  {
    "text": "lower number just a small tip over here the item size in Dynamo DB is a sum of the",
    "start": "2252200",
    "end": "2259280"
  },
  {
    "text": "attribute name as well as the value so it will help if you have your attribute names are",
    "start": "2259280",
    "end": "2265799"
  },
  {
    "text": "smaller okay so um when the data is written to the",
    "start": "2267000",
    "end": "2272400"
  },
  {
    "text": "Dynamo DB um the hash key of the item is fig is used to figure out about which",
    "start": "2272400",
    "end": "2277920"
  },
  {
    "text": "partition the data will go into now um in this example we have a table with 10 partitions um what you see as like the",
    "start": "2277920",
    "end": "2285480"
  },
  {
    "text": "beehives over there um and one of the partitions will be figured out based on the hash key where the data will go and",
    "start": "2285480",
    "end": "2291760"
  },
  {
    "text": "write itself we have the provision capacities of 9,000 3,000 on this table",
    "start": "2291760",
    "end": "2296960"
  },
  {
    "text": "which gives 900 reads per second per partition and 300 rights per second per",
    "start": "2296960",
    "end": "2302160"
  },
  {
    "text": "partition so this is all the capacity is distributed equally amongst all the partitions",
    "start": "2302160",
    "end": "2308280"
  },
  {
    "text": "each partition will work within its quota there's no sharing between the partitions for the",
    "start": "2308280",
    "end": "2314040"
  },
  {
    "text": "capacities you can hit each of these partitions with up to 900 reads and 300",
    "start": "2314040",
    "end": "2320079"
  },
  {
    "text": "rights per partition before you start hitting the limit of the partition after which all the requests within the time",
    "start": "2320079",
    "end": "2326599"
  },
  {
    "text": "period will start throttling so this is a very common",
    "start": "2326599",
    "end": "2333160"
  },
  {
    "text": "question in forums um my partitions I don't know my provision capacity I",
    "start": "2333160",
    "end": "2340680"
  },
  {
    "text": "know and my consume capacity I know which is all Apparent from the Dynamo charts and my provision capacity is",
    "start": "2340680",
    "end": "2346599"
  },
  {
    "text": "somewhere here my consume capacity is here so I'm throttling still why does",
    "start": "2346599",
    "end": "2352400"
  },
  {
    "text": "that happen you go to stack Overflow Amazon 4 and Kora very common question",
    "start": "2352400",
    "end": "2357560"
  },
  {
    "text": "I'm sure everybody in the room will now be able to answer that so the point over here is you may be still well within the",
    "start": "2357560",
    "end": "2364119"
  },
  {
    "text": "provision capacity at the global level on the table but individual partitions may start throttling you we'll talk",
    "start": "2364119",
    "end": "2370880"
  },
  {
    "text": "about some of those things in detail the hot keys for example okay so let's say you have",
    "start": "2370880",
    "end": "2377720"
  },
  {
    "start": "2375000",
    "end": "2441000"
  },
  {
    "text": "created a table provision capacity start writing to it um and you may hit throttling or you may not hit throttling",
    "start": "2377720",
    "end": "2384079"
  },
  {
    "text": "how do you know these are Cloud watch charts from Dynamo DB um which measure the",
    "start": "2384079",
    "end": "2389880"
  },
  {
    "text": "throttling um in this case you can see both of our read and write requests are getting",
    "start": "2389880",
    "end": "2395680"
  },
  {
    "text": "throttled you may be able to tie these to the cloudwatch alarms and get alerted and take",
    "start": "2395680",
    "end": "2401079"
  },
  {
    "text": "action additionally all your requests from the application will also start getting the provision throughput",
    "start": "2401079",
    "end": "2406440"
  },
  {
    "text": "exceeded exceptions at this point so one of the challenges with DMO",
    "start": "2406440",
    "end": "2412520"
  },
  {
    "text": "DV is to get the right skill uh by that I mean the throughput capacity settings",
    "start": "2412520",
    "end": "2418800"
  },
  {
    "text": "which suit your pocket as well as your users need and we all have been spoiled",
    "start": "2418800",
    "end": "2424440"
  },
  {
    "text": "by ease of removing the costly resources um like the asgs with the ec2s the EMR",
    "start": "2424440",
    "end": "2431160"
  },
  {
    "text": "with the auto scale it would be great if Dynamo DB had something like this out of the box it doesn't sorry but it's not",
    "start": "2431160",
    "end": "2440240"
  },
  {
    "text": "very difficult to build one uh we did something in our system um the principle is very simple",
    "start": "2440240",
    "end": "2448040"
  },
  {
    "text": "uh J has said everything is possible through the API in Dynamo TB so you can adjust the provision capacity settings",
    "start": "2448040",
    "end": "2454480"
  },
  {
    "text": "using the API with a little bit of code which can respond to the consume capacities we built our Auto predictive",
    "start": "2454480",
    "end": "2461480"
  },
  {
    "text": "scaling which looks at the past usage data in the table and we also anticipate how much of data is coming and we scale",
    "start": "2461480",
    "end": "2468400"
  },
  {
    "text": "up and down the table to the expected throughput which we would need from the table in the coming cycle um what you",
    "start": "2468400",
    "end": "2475079"
  },
  {
    "text": "can see over here is this provision capacity in the red bars and the consume capacity in the blue bars so so we scale",
    "start": "2475079",
    "end": "2481560"
  },
  {
    "text": "up and down and we pay only for what we use couple of things to watch out if you",
    "start": "2481560",
    "end": "2488560"
  },
  {
    "text": "are doing something like this U you would pay for the provision capacity even if you're not consuming it so you",
    "start": "2488560",
    "end": "2495480"
  },
  {
    "text": "may want to look at the reserved capacities uh which is cheaper than the provision on demand",
    "start": "2495480",
    "end": "2501440"
  },
  {
    "text": "capacities also when you increase the capacity to a higher level Dynamo DV May create additional partitions but when",
    "start": "2501440",
    "end": "2507680"
  },
  {
    "text": "you bring it down it doesn't remove the partitions so your throughput per partition maybe going to be on a",
    "start": "2507680",
    "end": "2513839"
  },
  {
    "text": "different scale there are couple of comp companies out there which are working on Solutions",
    "start": "2513839",
    "end": "2520000"
  },
  {
    "text": "like what we are showing up here um and I I believe they also have some machine learning models to learn about um what",
    "start": "2520000",
    "end": "2527599"
  },
  {
    "text": "is been used in the past and adjust accordingly U Dynamo scale fitted cloud and there is a dynamic Dynamo DB",
    "start": "2527599",
    "end": "2534160"
  },
  {
    "text": "solution also out there um as a cloud formation template which can automate all this for",
    "start": "2534160",
    "end": "2540240"
  },
  {
    "text": "you so coming to some tips and Lessons Learned um while working with Dynamo DV",
    "start": "2540760",
    "end": "2546319"
  },
  {
    "text": "for the last one year and so understand the scaling so when you create the table the",
    "start": "2546319",
    "end": "2552960"
  },
  {
    "text": "first time uh you should provision the capacities to your 12 Monon Peak this",
    "start": "2552960",
    "end": "2558800"
  },
  {
    "text": "way the Dynamo DB will ensure you have created enough partitions so that you are kind of supported for your Peak",
    "start": "2558800",
    "end": "2565680"
  },
  {
    "text": "period understand the hot keys and throttling Um this can happen if you have a pattern wherein a popular item is",
    "start": "2565680",
    "end": "2573200"
  },
  {
    "text": "getting read read and such a case can be solved by putting a caching there in",
    "start": "2573200",
    "end": "2579079"
  },
  {
    "text": "front of it um Padma touch upon how you can use the Dynamo DV streams and you",
    "start": "2579079",
    "end": "2584240"
  },
  {
    "text": "can invalidate the caches from there dynamodb also has lot of",
    "start": "2584240",
    "end": "2589599"
  },
  {
    "text": "application matrics uh they're all in the cloud watch but we also did couple",
    "start": "2589599",
    "end": "2594720"
  },
  {
    "text": "of our own stuff um things like empty reads um in dynb if you do a read which",
    "start": "2594720",
    "end": "2600720"
  },
  {
    "text": "comes back with no data that's empty read that still costs you capacity so we start counting them we also started",
    "start": "2600720",
    "end": "2607240"
  },
  {
    "text": "putting some application Matrix around the data sizes and that's going to help and we put them back into the cloud watch so we can compare and contrast",
    "start": "2607240",
    "end": "2613520"
  },
  {
    "text": "along with the Dynamo DV Matrix and you can probably understand your applications usage patterns from there",
    "start": "2613520",
    "end": "2620920"
  },
  {
    "text": "configure the table alarms on capacities um if you're hitting throttling it it's no use so you need to",
    "start": "2620920",
    "end": "2627040"
  },
  {
    "text": "know if you are going to hit throttling so capacities uh allow you to basically put alarm on percentage um and then you",
    "start": "2627040",
    "end": "2634599"
  },
  {
    "text": "can notify yourself and take action build your application with tolerance",
    "start": "2634599",
    "end": "2640720"
  },
  {
    "text": "for outliers so uh outliers are rare in a well-designed system we have been",
    "start": "2640720",
    "end": "2645920"
  },
  {
    "text": "running with Dynamo DB for over a year now we've seen very few outliers but um",
    "start": "2645920",
    "end": "2651640"
  },
  {
    "text": "be aware of them their application patterns to solve that um cut off the request if it's going Beyond a threshold",
    "start": "2651640",
    "end": "2657760"
  },
  {
    "text": "something of that order AWS SDK already provides the",
    "start": "2657760",
    "end": "2663200"
  },
  {
    "text": "retrive with back off um when the throttling is happening this can be retried and then let's say the",
    "start": "2663200",
    "end": "2670640"
  },
  {
    "text": "subsequent second the throttling doesn't come in so so you can you can still go ahead and perform the request again",
    "start": "2670640",
    "end": "2677040"
  },
  {
    "text": "because it's a retrival request so Dynamo DB awss already does that if you're using the low low level API you",
    "start": "2677040",
    "end": "2683720"
  },
  {
    "text": "should build something yourself on this there's a lot of best best practices you should go look at uh which are",
    "start": "2683720",
    "end": "2689480"
  },
  {
    "text": "documented by Amazon before you're designing your tables um they are super helpful AWS was also documented their",
    "start": "2689480",
    "end": "2697200"
  },
  {
    "text": "service limits you should look at your application requirements and try to look against",
    "start": "2697200",
    "end": "2703559"
  },
  {
    "start": "2703000",
    "end": "2828000"
  },
  {
    "text": "that so how do you reduce the read and write capacity units the first one is",
    "start": "2703559",
    "end": "2708800"
  },
  {
    "text": "not kind of related but um the batch API in Dynam DV is super um and it helps you",
    "start": "2708800",
    "end": "2715520"
  },
  {
    "text": "do the operations in parallel it kind of gives you the flexibility of a thread pool without",
    "start": "2715520",
    "end": "2721040"
  },
  {
    "text": "putting the complexity in the code you can use the batch get a API to",
    "start": "2721040",
    "end": "2727640"
  },
  {
    "text": "read up to 100 items in a single request you can also use the badge right API to",
    "start": "2727640",
    "end": "2732680"
  },
  {
    "text": "put or delete 25 items in a single request thing to watch out over here would be uh the request in parallel or",
    "start": "2732680",
    "end": "2740960"
  },
  {
    "text": "request in a single would still consume the same capacity so don't get fooled by",
    "start": "2740960",
    "end": "2747119"
  },
  {
    "text": "that we saw our user the events table in which we store the data against the user",
    "start": "2747119",
    "end": "2752599"
  },
  {
    "text": "so there's a primary key which is the user ID the hash key and there's a range key which is the the Tim stamp and then",
    "start": "2752599",
    "end": "2758720"
  },
  {
    "text": "we store the event data so we optimize a bit more from there um we started",
    "start": "2758720",
    "end": "2764839"
  },
  {
    "text": "packaging all of our events were like smaller than 1 KB so we grouped multiple events for a user within a time frame",
    "start": "2764839",
    "end": "2772520"
  },
  {
    "text": "and put it into a single record this helped us reduce the number of rides and reads which we had to do we also",
    "start": "2772520",
    "end": "2779240"
  },
  {
    "text": "compress the data of course um use lz4 compression which is very similar to LZ but has a very fast decompression speed",
    "start": "2779240",
    "end": "2786920"
  },
  {
    "text": "and this is all simple to do because the object mapper in the Java SDK was super",
    "start": "2786920",
    "end": "2792960"
  },
  {
    "text": "efficient you could override that and the application doesn't need to do anything so we kind of built a small SDK",
    "start": "2792960",
    "end": "2798119"
  },
  {
    "text": "over the AWS SDK and the application is it works with a similar way how do we",
    "start": "2798119",
    "end": "2804359"
  },
  {
    "text": "handle the deletes we don't do deletes uh we talked about the rotation table earlier we build the tables on a monthly",
    "start": "2804359",
    "end": "2811440"
  },
  {
    "text": "basis always write to the current month table and when we read we go back to the previous table and at the end of the",
    "start": "2811440",
    "end": "2818359"
  },
  {
    "text": "attribution retention window uh which is like 30 days the look back we go and drop the table no code for delete no",
    "start": "2818359",
    "end": "2825880"
  },
  {
    "text": "cost for delete understand scaling um scaling",
    "start": "2825880",
    "end": "2832920"
  },
  {
    "start": "2828000",
    "end": "3011000"
  },
  {
    "text": "takes a lot of time especially when you are scaling to a large number of a big number of capacity and a large number of",
    "start": "2832920",
    "end": "2840200"
  },
  {
    "text": "partitions we saw that when we building our predictive scaling um so we do it",
    "start": "2840200",
    "end": "2845640"
  },
  {
    "text": "well in advance so that the table is pred up uh it's going to take couple of seconds to couple of minutes some",
    "start": "2845640",
    "end": "2851720"
  },
  {
    "text": "debugging tips from our lessons and learnings while operating the system in the production",
    "start": "2851720",
    "end": "2858680"
  },
  {
    "text": "log to the application logging that's your only place wherein you'll go",
    "start": "2858680",
    "end": "2864040"
  },
  {
    "text": "understand what's happening in the production log application Matrix I told",
    "start": "2864040",
    "end": "2869599"
  },
  {
    "text": "you about couple of application Matrix which we log along with the Dynamo DB Matrix TCP Dums I don't think you need",
    "start": "2869599",
    "end": "2877079"
  },
  {
    "text": "to go over there but let's say if there are Network glitches you can take TCB dumps uh analyze them using the wire",
    "start": "2877079",
    "end": "2883680"
  },
  {
    "text": "shock one of the key findings we found over there is um we use Dynamo DB from",
    "start": "2883680",
    "end": "2889280"
  },
  {
    "text": "within EMR so we are never out of the AWS Data Center and we figured out it's faster to",
    "start": "2889280",
    "end": "2896280"
  },
  {
    "text": "use HTTP instead of https without any reason so we switch that and that's very easy to switch off using the client",
    "start": "2896280",
    "end": "2901800"
  },
  {
    "text": "configuration utilities and it's just a flag change ews SDK also logs a request ID it",
    "start": "2901800",
    "end": "2909520"
  },
  {
    "text": "doesn't log it provides a request ID which you can log into your system in",
    "start": "2909520",
    "end": "2914680"
  },
  {
    "text": "your application but it also comes with a verbose logging this is helpful if you",
    "start": "2914680",
    "end": "2920240"
  },
  {
    "text": "are trying to debug your issue with AWS support um so request ID is a thread which binds your application to the back",
    "start": "2920240",
    "end": "2926720"
  },
  {
    "text": "end of Dynamo DB so you can track in the flow of the request using the request ID we we dynamically enable the request ID",
    "start": "2926720",
    "end": "2933280"
  },
  {
    "text": "logging when we hit some thresholds Cloud watch super useful um",
    "start": "2933280",
    "end": "2939040"
  },
  {
    "text": "use it for everything and then we also have alarms on that one of the less publicize feature",
    "start": "2939040",
    "end": "2945319"
  },
  {
    "text": "of Dynamo DB is that local Dynamo DB um we have used it for all our unit testing",
    "start": "2945319",
    "end": "2950559"
  },
  {
    "text": "and integration testing it also comes with a interactive webshell which you can use to play with a Dynamo API within",
    "start": "2950559",
    "end": "2957960"
  },
  {
    "text": "your local environment you don't have to even go out of your box with that I'm going to leave you",
    "start": "2957960",
    "end": "2963720"
  },
  {
    "text": "with one last thought U is Dynamo DB good only for high scale applications I",
    "start": "2963720",
    "end": "2968839"
  },
  {
    "text": "would say no you can start small and dynb offers",
    "start": "2968839",
    "end": "2974280"
  },
  {
    "text": "seamless scaling and then you can upsize downsize your capacities",
    "start": "2974280",
    "end": "2979319"
  },
  {
    "text": "based on your need if you need a fast predictable performance at any scale Dynamo DB may be a good choice for you",
    "start": "2979319",
    "end": "2986200"
  },
  {
    "text": "in fact in our attribution system we have migrated all our tables into Dynamo DB irrespective of the scale they",
    "start": "2986200",
    "end": "2992480"
  },
  {
    "text": "operate at with this I'm done uh these are our email IDs uh you can reach us on and",
    "start": "2992480",
    "end": "2999720"
  },
  {
    "text": "we'll be taking questions now don't forget to complete your evaluations",
    "start": "2999720",
    "end": "3005760"
  }
]