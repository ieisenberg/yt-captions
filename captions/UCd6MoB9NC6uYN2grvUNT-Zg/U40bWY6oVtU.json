[
  {
    "text": "okay let's get started on this nerdy session about logic mathematics systems",
    "start": "840",
    "end": "8480"
  },
  {
    "text": "my name is Byron cook I'm going to going to tell you about some work that uh myself and folks in my my group and some",
    "start": "8480",
    "end": "16039"
  },
  {
    "text": "partners that we're working with are working on um let's start with the idea of the",
    "start": "16039",
    "end": "21560"
  },
  {
    "text": "shared security model maybe you've uh heard of this as a common refrain from",
    "start": "21560",
    "end": "28840"
  },
  {
    "text": "uh customers and folks in AWS so the idea of the shared security model is that together we're trying to create a",
    "start": "28840",
    "end": "34840"
  },
  {
    "text": "secure environment that we're running in AWS is is uh working to create a",
    "start": "34840",
    "end": "43399"
  },
  {
    "text": "secure uh infrastructure that customers can can can build upon so we have",
    "start": "43399",
    "end": "49440"
  },
  {
    "text": "compute and storage and database networking we're trying working to make",
    "start": "49440",
    "end": "55039"
  },
  {
    "text": "those uh pieces of infrastructure secure and then customers are responsible for",
    "start": "55039",
    "end": "60800"
  },
  {
    "text": "their data for the configuration of their networks configuration for their of their IM am policies uh operating",
    "start": "60800",
    "end": "67560"
  },
  {
    "text": "systems these kinds of things so when we talk",
    "start": "67560",
    "end": "72920"
  },
  {
    "text": "about uh security and when we're asking questions about Security in the cloud",
    "start": "72920",
    "end": "79040"
  },
  {
    "text": "there are two in some sense two classes of questions that come up so the first class is um in regards",
    "start": "79040",
    "end": "88920"
  },
  {
    "text": "to customers being secure in the cloud so so questions that that might arise in",
    "start": "88920",
    "end": "94640"
  },
  {
    "text": "this context are things like could my I am policy allow unintended uh users access to my S3 bucket another question",
    "start": "94640",
    "end": "101560"
  },
  {
    "text": "you you know we might ask am I allowing for example only one instance in my VPC",
    "start": "101560",
    "end": "107119"
  },
  {
    "text": "to send outgoing Network packets is the kind of kinds of questions that the customers are often asking and that's",
    "start": "107119",
    "end": "113320"
  },
  {
    "text": "these kinds of questions are when when when you're thinking about them they're really talking about the customer side",
    "start": "113320",
    "end": "119000"
  },
  {
    "text": "of this of the sh security model the other class of questions are are more about securing the cloud",
    "start": "119000",
    "end": "125479"
  },
  {
    "text": "infrastructure itself so how do we know that the AWS crypto Primitives are correctly implemented how do we know",
    "start": "125479",
    "end": "132040"
  },
  {
    "text": "that the virtualization layer doesn't suffer from memory cor corruption bugs that would that would that would result",
    "start": "132040",
    "end": "137760"
  },
  {
    "text": "in memory corruption based attacks these These are the sorts of questions that customers are asking AWS and these are",
    "start": "137760",
    "end": "143400"
  },
  {
    "text": "obviously the sorts of questions that that folks within AWS are are are um are",
    "start": "143400",
    "end": "148440"
  },
  {
    "text": "are wanting to make sure don't arise and so these these types of questions are uh",
    "start": "148440",
    "end": "154519"
  },
  {
    "text": "more about the infrastructure inside the AWS um",
    "start": "154519",
    "end": "159840"
  },
  {
    "text": "apis so when we're [Music] um in in the the group that I work in",
    "start": "159840",
    "end": "167640"
  },
  {
    "text": "and folks in my team where we're applying mathematics logic constraint solving these kinds of techniques to",
    "start": "167640",
    "end": "173280"
  },
  {
    "text": "security there's really two areas that we're working on right both the customer facing side and the and the internal",
    "start": "173280",
    "end": "179080"
  },
  {
    "text": "side so what is what what is AWS doing uh outside of the area of logic",
    "start": "179080",
    "end": "186920"
  },
  {
    "text": "and Mathematics for customers so for example we have a Amazon inspector we have config rules cloud trail we have a",
    "start": "186920",
    "end": "192879"
  },
  {
    "text": "number of apis and customers can use these apis and services um to help",
    "start": "192879",
    "end": "200360"
  },
  {
    "text": "understand the security of their networks of their instances of their",
    "start": "200360",
    "end": "206560"
  },
  {
    "text": "policies in the cloud another thing is so we're involved in mechanized",
    "start": "206560",
    "end": "211799"
  },
  {
    "text": "reasoning and mathematical logic to provide additional insurance and this is really the subject of this talk so I'm going to I'm going to talk a lot more",
    "start": "211799",
    "end": "218120"
  },
  {
    "text": "about this in a few moments on the securing the cloud side",
    "start": "218120",
    "end": "223360"
  },
  {
    "text": "so in within AWS we do extensive penetration testing continuous monitoring uh uh extensive compliance",
    "start": "223360",
    "end": "230280"
  },
  {
    "text": "certification programs Etc and then we're also involved in mechanized reasoning and mathematical logic uh to",
    "start": "230280",
    "end": "236480"
  },
  {
    "text": "provide additional Assurance so in this talk the two",
    "start": "236480",
    "end": "241640"
  },
  {
    "text": "questions I'm I'm aiming to answer is what is mechanized reasoning and",
    "start": "241640",
    "end": "246840"
  },
  {
    "text": "mathematical logic and what are some examples of what AWS are doing in the",
    "start": "246840",
    "end": "251879"
  },
  {
    "text": "space so let's start at the beginning uh to to to to describe what math",
    "start": "251879",
    "end": "258639"
  },
  {
    "text": "mechanized reasoning and mathematical logic is so from the beginning essentially recorded history we see",
    "start": "258639",
    "end": "266040"
  },
  {
    "text": "people trying to to reason about the infinite using finite reasoning right so there",
    "start": "266040",
    "end": "273320"
  },
  {
    "text": "are an infinite number of prime numbers uid Pro proved that there are an infinite number of prime numbers he",
    "start": "273320",
    "end": "278840"
  },
  {
    "text": "didn't count them all right so he used an argument based on this concept of",
    "start": "278840",
    "end": "284800"
  },
  {
    "text": "axioms and and and a an argument in logic to convince himself and his",
    "start": "284800",
    "end": "290960"
  },
  {
    "text": "contemporaries and then folks in the future that there are an infinite number of primes and no one has ever counted",
    "start": "290960",
    "end": "296560"
  },
  {
    "text": "them all right and so that this is a uh a common game so girdles Inc",
    "start": "296560",
    "end": "301600"
  },
  {
    "text": "completeness theorem turs halting problem undecidability proof Etc um and there's there's actually two",
    "start": "301600",
    "end": "308880"
  },
  {
    "text": "activities and they're quite distinct in the area of mathematical Logic the first",
    "start": "308880",
    "end": "314080"
  },
  {
    "text": "is actually quite in a creative Endeavor right it's the search for a proof there",
    "start": "314080",
    "end": "320520"
  },
  {
    "text": "are many possible proofs and creative individuals think",
    "start": "320520",
    "end": "326120"
  },
  {
    "text": "really hard about the problem and will find a proof expressable in a particular uh logic so so a particular",
    "start": "326120",
    "end": "334240"
  },
  {
    "text": "set of axioms and they will construct an argument in that in that set in that in",
    "start": "334240",
    "end": "339319"
  },
  {
    "text": "that logic to try and convince their their colleagues that that something",
    "start": "339319",
    "end": "344400"
  },
  {
    "text": "holds the second activity is in a is by design should be really boring it's the",
    "start": "344400",
    "end": "350800"
  },
  {
    "text": "process of checking all of the steps right so I've I've found a creative argument I've expressed it in logic and",
    "start": "350800",
    "end": "356960"
  },
  {
    "text": "I want that replay of the argument to be something anyone can do forever so me so",
    "start": "356960",
    "end": "363840"
  },
  {
    "text": "you know I for example turing's halting problem undecidability I didn't find that proof of undecidability but I've",
    "start": "363840",
    "end": "370240"
  },
  {
    "text": "explained it a thousand times to people right and it's each step is super simple you explain well we know this and by",
    "start": "370240",
    "end": "376720"
  },
  {
    "text": "because of that we know this and each step people are like okay I get it I get it I get it and then you get to the",
    "start": "376720",
    "end": "382039"
  },
  {
    "text": "proof the proof is done and then often people don't understand the proof in its entirety but the whole point of proof",
    "start": "382039",
    "end": "387599"
  },
  {
    "text": "and logic is that you only need to understand each of the steps and and in their in in their totality you now have",
    "start": "387599",
    "end": "394599"
  },
  {
    "text": "a proof of the thing you're about to out to prove so in some sense finding the argument is harder checking the argument",
    "start": "394599",
    "end": "401560"
  },
  {
    "text": "should by definition be easier checking is often quite boring",
    "start": "401560",
    "end": "406639"
  },
  {
    "text": "and so what what tends to happen is that the the the proofs historically the",
    "start": "406639",
    "end": "412039"
  },
  {
    "text": "proofs have hadit have been a little bit wrong because no one has the attention to detail to go through all the tiny",
    "start": "412039",
    "end": "417560"
  },
  {
    "text": "little minute steps and and make sure that they that they all hold and that's that's an area in mathematics that that crops up again and again so what so",
    "start": "417560",
    "end": "424479"
  },
  {
    "text": "what's and I'm I'm writing down 1970s 80 there's been there was work",
    "start": "424479",
    "end": "429639"
  },
  {
    "text": "before and there's work after but the 1970s is really where where you begin to see this nassen area rise so the from",
    "start": "429639",
    "end": "438039"
  },
  {
    "text": "the 1970s on what we begin to see is humans finding the proof and logic but",
    "start": "438039",
    "end": "444000"
  },
  {
    "text": "then software mechanically checking the proof so so some creative individual or",
    "start": "444000",
    "end": "449160"
  },
  {
    "text": "group of creative individuals uh find a proof they express the proof in a",
    "start": "449160",
    "end": "454560"
  },
  {
    "text": "machine readable and checkable format and then typically a s very simple theorem prover mechanical theorem prover",
    "start": "454560",
    "end": "461400"
  },
  {
    "text": "goes off and checks each of the steps and makes sure that all the eyes are dotted in the teaser cross Etc and again",
    "start": "461400",
    "end": "468680"
  },
  {
    "text": "many of these these historical theorems have been Pro have been proved mechanically and and they've convinced a mechanical theorem that the that the",
    "start": "468680",
    "end": "475319"
  },
  {
    "text": "that the proves here I put down here the four-color theorem which is probably one of the most famous um theorems uh that were that were that",
    "start": "475319",
    "end": "482599"
  },
  {
    "text": "were mechanically checked oh but then another interesting uh side effect is",
    "start": "482599",
    "end": "488639"
  },
  {
    "text": "that the folk same folks doing proofs about mathematical artifacts uh became interested in",
    "start": "488639",
    "end": "496240"
  },
  {
    "text": "improving things about industrial artifacts right so it turns out that",
    "start": "496240",
    "end": "501560"
  },
  {
    "text": "industrial artifacts and mathematical artifacts are in some sense the same they're typically an infinite graph",
    "start": "501560",
    "end": "507360"
  },
  {
    "text": "edges between maybe a state system representing uh possible transitions between states and the um you know the",
    "start": "507360",
    "end": "515440"
  },
  {
    "text": "uh helicopter control software Mars rovera Mars Rover Control software Intel",
    "start": "515440",
    "end": "521560"
  },
  {
    "text": "CPU super scaler out of order uh pipeline all of these devices are in",
    "start": "521560",
    "end": "527640"
  },
  {
    "text": "some sense very similar to mathematical uh artifacts and the same techniques that one uses to prove the correctness",
    "start": "527640",
    "end": "534560"
  },
  {
    "text": "of uh of uh things that have been asserted in mathematics can can also",
    "start": "534560",
    "end": "540720"
  },
  {
    "text": "those same techniques can be used to to prove things about uh artifacts in in in",
    "start": "540720",
    "end": "546160"
  },
  {
    "text": "Industry where uh security safety these kinds of things are super important so",
    "start": "546160",
    "end": "551480"
  },
  {
    "text": "that's that's been an interesting area and then starting around 2000 there have been there were some algorithmic",
    "start": "551480",
    "end": "557560"
  },
  {
    "text": "breakthroughs I'm going to touch on them briefly that allowed us now to both mechanically find and mechanically check",
    "start": "557560",
    "end": "565519"
  },
  {
    "text": "um proofs of both mathematical theorems and and of industrial artifacts so I",
    "start": "565519",
    "end": "573399"
  },
  {
    "text": "could lecture for two years on this topic uh but I've been informed that I",
    "start": "573399",
    "end": "579079"
  },
  {
    "text": "only have an hour so I'm GNA um instead I just want to leave you there's going",
    "start": "579079",
    "end": "585920"
  },
  {
    "text": "to be a mixture there's going to be some folks in the crowd who have studied logic and Mathematics and proof from that and you're like I'm at reinvent",
    "start": "585920",
    "end": "592079"
  },
  {
    "text": "I'll go to this this talk and and some folks this this might be new to you what I'm going to try and do is convey a",
    "start": "592079",
    "end": "597519"
  },
  {
    "text": "couple of high level ideas and also throw out some buzzwords so if you're interested in knowing more you can look",
    "start": "597519",
    "end": "603959"
  },
  {
    "text": "them up with your you know on the internet and the buzzwords will get to where you need to be right so you can",
    "start": "603959",
    "end": "609440"
  },
  {
    "text": "you can read the the papers that introduce the concepts um but but I hope that you walk away from this piece of",
    "start": "609440",
    "end": "615720"
  },
  {
    "text": "the talk knowing sort of two insights that that that that show you how it is",
    "start": "615720",
    "end": "622279"
  },
  {
    "text": "we can do what we can do okay so the first core idea is there's this there's this idea of making",
    "start": "622279",
    "end": "629720"
  },
  {
    "text": "what are M complete problems feel like P time problems so I've little decoder ring uh",
    "start": "629720",
    "end": "637920"
  },
  {
    "text": "P time stands for polinomial time and in practice it just means tractable it's the it's the problems for which we can",
    "start": "637920",
    "end": "644560"
  },
  {
    "text": "pretty easily build algorithms for and solve and they scale well right like you",
    "start": "644560",
    "end": "650800"
  },
  {
    "text": "you you give it 100 inputs you give it a thousand inputs you give it a million inputs you get a uh a growth in the the",
    "start": "650800",
    "end": "658440"
  },
  {
    "text": "the performance that scales well with the size of the input M complete are the short for non",
    "start": "658440",
    "end": "665600"
  },
  {
    "text": "non-deterministic polinomial time these are the intractable problems the ones that works great when you have five",
    "start": "665600",
    "end": "670920"
  },
  {
    "text": "inputs but then when you have 10 inputs suddenly it it takes three lifetimes right and an encryption is really based",
    "start": "670920",
    "end": "676000"
  },
  {
    "text": "on on on on on this concept if if you're if you're familiar with how how encryption typically Works um",
    "start": "676000",
    "end": "683639"
  },
  {
    "text": "so although I'm not claiming that MP equals p what I'm saying is that there are some",
    "start": "683639",
    "end": "691440"
  },
  {
    "text": "algorithmic advances that in many common industrial applications can make inp",
    "start": "691440",
    "end": "697600"
  },
  {
    "text": "feel like P often and so we can take advantage of that so here here are the buzzwords so there's this idea of",
    "start": "697600",
    "end": "704120"
  },
  {
    "text": "conflict Clause driven learning back Jumping random restarts sat and and what we call smt sat modulo theories I'm not",
    "start": "704120",
    "end": "712079"
  },
  {
    "text": "going to tell you what these are I'm just throwing these out there so if you if you want to you know look for uh",
    "start": "712079",
    "end": "717839"
  },
  {
    "text": "conflict clause driven learning you'll find some research papers which which talk about this",
    "start": "717839",
    "end": "722880"
  },
  {
    "text": "area and by the way I'm going to go through a couple of examples in a moment so the other key idea that I wanted to",
    "start": "722880",
    "end": "729120"
  },
  {
    "text": "convey to you was this idea that there there are undecidable problems so there are problems for which there cannot",
    "start": "729120",
    "end": "735360"
  },
  {
    "text": "exist an algorithm that solves it right so the halting problem was one of the first",
    "start": "735360",
    "end": "742240"
  },
  {
    "text": "uh one of the one of the first proofs of the existence of a problem that was was undecidable and yes there undecidable",
    "start": "742240",
    "end": "750120"
  },
  {
    "text": "but in practice we can make undecidable problems feel decidable with a little bit of trickery",
    "start": "750120",
    "end": "757399"
  },
  {
    "text": "and so again here are the buzzwords uh there's this idea of counter example guided abstraction refinement which is",
    "start": "757399",
    "end": "763160"
  },
  {
    "text": "very popular in the in the research literature on the topic there's this idea of interpolation that people are using quite a bit um and again buzzword",
    "start": "763160",
    "end": "770880"
  },
  {
    "text": "and I'm not going to describe them so here are a couple of names of tools so yikes and minisat are some really nice",
    "start": "770880",
    "end": "776160"
  },
  {
    "text": "open source tools that that solve for example the uh smt the set modular",
    "start": "776160",
    "end": "782760"
  },
  {
    "text": "Theory problem or the propositional Set uh problem they do it very efficiently and and and you can use them and a lot",
    "start": "782760",
    "end": "788680"
  },
  {
    "text": "of folks do and uh in the uh area of making undecidable problems feel decidable there are some open source",
    "start": "788680",
    "end": "795199"
  },
  {
    "text": "tools for example th priver and jhorn there there there are a number I've just thrown out a couple but if you",
    "start": "795199",
    "end": "801079"
  },
  {
    "text": "look into these and you'll there there'll be more there so I wanted to to give you a little bit of intuition as to",
    "start": "801079",
    "end": "808279"
  },
  {
    "text": "as to how these techniques work so I'm going to give you a puzzle and I'm going",
    "start": "808279",
    "end": "813480"
  },
  {
    "text": "to give you a second or two to think about it so what we're in search for we're",
    "start": "813480",
    "end": "819399"
  },
  {
    "text": "wanting to know is this call to the command error reachable can we hit",
    "start": "819399",
    "end": "825279"
  },
  {
    "text": "error yeah and so the question is can you in your mind think of values for you",
    "start": "825279",
    "end": "831959"
  },
  {
    "text": "and uh W and x and y and Zed such that we go into the conditional and we hit",
    "start": "831959",
    "end": "838320"
  },
  {
    "text": "the command error so I'm going to I'm be quiet for a moment let you think about",
    "start": "838320",
    "end": "844399"
  },
  {
    "text": "it if by the way if there are questions I'm going to hang out after the end of the talk so I can take questions",
    "start": "846639",
    "end": "853279"
  },
  {
    "text": "then okay so maybe you've found a way to get into error or maybe",
    "start": "853279",
    "end": "859399"
  },
  {
    "text": "not let's explore right so here's a what we call Poss here here's an assignment",
    "start": "859399",
    "end": "866360"
  },
  {
    "text": "to the variables and the question is this is this a set satisfying assignment could is the valuation of this formula",
    "start": "866360",
    "end": "873880"
  },
  {
    "text": "true thus allowing us to hit error so let's see no it's not so with",
    "start": "873880",
    "end": "883240"
  },
  {
    "text": "these values of the variables we would not hear error because W is less W needs",
    "start": "883240",
    "end": "888360"
  },
  {
    "text": "to be less than x but actually W in this case is three and X is one thus the first conjunct would fail and we would",
    "start": "888360",
    "end": "894040"
  },
  {
    "text": "not hit the error so let's try and fix that by making X larger so what about now",
    "start": "894040",
    "end": "901040"
  },
  {
    "text": "no because X is not less than y x is actually greater than or equal to Y",
    "start": "903199",
    "end": "908399"
  },
  {
    "text": "right X is 18 Y is is 10 so thus the second conract fails so",
    "start": "908399",
    "end": "914199"
  },
  {
    "text": "this search that we're doing uh could go on for a very long",
    "start": "914199",
    "end": "919959"
  },
  {
    "text": "time right uh uh if so this is this is this is the propositional Lo logic",
    "start": "919959",
    "end": "928279"
  },
  {
    "text": "satisfiability problem if we limit the range of the variables to to finite bit",
    "start": "928279",
    "end": "934440"
  },
  {
    "text": "vectors right so if we assume that U and W and X Etc are 32bit integers then we",
    "start": "934440",
    "end": "942000"
  },
  {
    "text": "would need to explore two to the 35 time five possible combinations to convince",
    "start": "942000",
    "end": "949279"
  },
  {
    "text": "ourselves that there are no satisfying assignments or to find one in the worst",
    "start": "949279",
    "end": "954959"
  },
  {
    "text": "case and so this is traveling salesman this is MP this is the MP complete this",
    "start": "954959",
    "end": "960199"
  },
  {
    "text": "is this is the that that's That's a classic example of an intractable",
    "start": "960199",
    "end": "965720"
  },
  {
    "text": "problem right and if we add five more variables now we're really in trouble right if we allow U and W and X to range",
    "start": "965720",
    "end": "974040"
  },
  {
    "text": "over mathematical integers or the reals or the rationals uh then this is no longer a finite problem though it",
    "start": "974040",
    "end": "980560"
  },
  {
    "text": "actually turns out to be decidable um but I I can't tell you how many possible combin there's an infinite number of",
    "start": "980560",
    "end": "986880"
  },
  {
    "text": "combinations right so so you have to do something even more creative right so this is and this is",
    "start": "986880",
    "end": "993240"
  },
  {
    "text": "called the satisfiability modulo theories problem right if we we if we assume that X and Y for example range",
    "start": "993240",
    "end": "999199"
  },
  {
    "text": "over the over the reals then we're no longer talking about bit vectors we no longer expressible in prepositional",
    "start": "999199",
    "end": "1004279"
  },
  {
    "text": "logic and so we're we're talking about sa what we call in the in the literature satisfiability modular theories",
    "start": "1004279",
    "end": "1011279"
  },
  {
    "text": "so now what I want to do is to just show you in a couple of pictures how the the",
    "start": "1011279",
    "end": "1016680"
  },
  {
    "text": "tools that actually really do so there tools that take millions of variables and very complicated formula and solve",
    "start": "1016680",
    "end": "1022920"
  },
  {
    "text": "them very fast so how is it that these tools work I'm going I'm going to give you just a small example and a little",
    "start": "1022920",
    "end": "1028678"
  },
  {
    "text": "bit of intuition there so so here's our formula and we're trying to ask is there",
    "start": "1028679",
    "end": "1033880"
  },
  {
    "text": "a satisfying assignment to this formula and if not please build a proof that there isn't one and what the tools are",
    "start": "1033880",
    "end": "1039240"
  },
  {
    "text": "going to do is they're going to zero in on this disjunction right so we know that for this formula to be true that W",
    "start": "1039240",
    "end": "1045720"
  },
  {
    "text": "does have to be less than Zed and X has to be less than y Etc but this disjunction is a slightly more",
    "start": "1045720",
    "end": "1051080"
  },
  {
    "text": "interesting case where only one of them really has to be true and what these tools do is they",
    "start": "1051080",
    "end": "1056520"
  },
  {
    "text": "case split so they say let's assume that X is greater than or equal to zed or let's assume that U is less than three",
    "start": "1056520",
    "end": "1064240"
  },
  {
    "text": "and go through those cases when X is greater than or equal to",
    "start": "1064240",
    "end": "1071760"
  },
  {
    "text": "zed you'll notice it's not it's never possible because of how of quality work",
    "start": "1071760",
    "end": "1077640"
  },
  {
    "text": "the qual the transitivity of equal of of less than sorry by the transitivity of less than it's never possible for X to",
    "start": "1077640",
    "end": "1084600"
  },
  {
    "text": "be less than y y to be less than Zed but for X to be greater than or equal to zed right we we know from X less than Y and",
    "start": "1084600",
    "end": "1092120"
  },
  {
    "text": "Y less than Zed that X is less than Zed and thus it can't be that X is greater than equal to zed so thus no matter",
    "start": "1092120",
    "end": "1098400"
  },
  {
    "text": "what's going on with the w less than Zed or the U greater than 10 or anything else we add there uh this will never",
    "start": "1098400",
    "end": "1105039"
  },
  {
    "text": "become true so thus the red is a dead end and over on the right hand side it's",
    "start": "1105039",
    "end": "1110799"
  },
  {
    "text": "never possible for you to be less than three but simultaneously greater than 10",
    "start": "1110799",
    "end": "1116280"
  },
  {
    "text": "right so actually neither of them neither branch is possible and thus this",
    "start": "1116280",
    "end": "1122000"
  },
  {
    "text": "is what we say is an unsatisfiable formula so it's never possible to hit error and the Really clever trick that",
    "start": "1122000",
    "end": "1129000"
  },
  {
    "text": "these tools play is the following we took this left brand I mean",
    "start": "1129000",
    "end": "1134159"
  },
  {
    "text": "this this is a very small example so it's not going to it's not going to illustrate it with lots of pain right",
    "start": "1134159",
    "end": "1139360"
  },
  {
    "text": "it's going to I'm going I'm often the larger the examples get the bit clearer the the advantage of",
    "start": "1139360",
    "end": "1145200"
  },
  {
    "text": "this optimization becomes but this this is a very small case but the idea is is when you take the left Branch what we do",
    "start": "1145200",
    "end": "1151799"
  },
  {
    "text": "is we learn the root cause as to why the left Branch was unsatisfiable and we",
    "start": "1151799",
    "end": "1156880"
  },
  {
    "text": "actually add that so notice at the bottom now I've added that fact to the set of known",
    "start": "1156880",
    "end": "1163520"
  },
  {
    "text": "facts right so it's not changing the satisfiability of that formula to to add",
    "start": "1163520",
    "end": "1169120"
  },
  {
    "text": "a bit of extra information I've conjoined on an extra fact and that extra fact can now be used to prune the",
    "start": "1169120",
    "end": "1175480"
  },
  {
    "text": "search space in the future so we go to the left we try out some stuff we learn the root cause as to why that was",
    "start": "1175480",
    "end": "1180880"
  },
  {
    "text": "unsatisfiable we add that into the set of facts that we're tracking and then when we go to the right Branch we can",
    "start": "1180880",
    "end": "1186039"
  },
  {
    "text": "use that to prune the search space and that radically reduces the amount of",
    "start": "1186039",
    "end": "1191240"
  },
  {
    "text": "search space that we actually have to explore and that really is the sort of that and two or three other techniques",
    "start": "1191240",
    "end": "1196280"
  },
  {
    "text": "are how these are how these tools really work under in the guts so so that's that",
    "start": "1196280",
    "end": "1201559"
  },
  {
    "text": "concludes this idea of how to make MP complete problems feel P time often in",
    "start": "1201559",
    "end": "1206840"
  },
  {
    "text": "for industrial not random instances but for from applications that come from",
    "start": "1206840",
    "end": "1211919"
  },
  {
    "text": "aircraft software from from microprocessors from uh Railway",
    "start": "1211919",
    "end": "1217039"
  },
  {
    "text": "switching you know from from industrial applications often the problems although",
    "start": "1217039",
    "end": "1222760"
  },
  {
    "text": "they in theory are inp complete problems often there's a p time uh optimiz",
    "start": "1222760",
    "end": "1229480"
  },
  {
    "text": "that that will that will work for them and in practice that we've been seeing that and also at AWS and I'll speak",
    "start": "1229480",
    "end": "1234720"
  },
  {
    "text": "about that so then the other thing I wanted to talk about was this idea of making undecidable problems feel decidable in",
    "start": "1234720",
    "end": "1242039"
  },
  {
    "text": "practice so the question here is and I'll give you a moment to think about it could this assert ever fail",
    "start": "1243000",
    "end": "1251480"
  },
  {
    "text": "and here we're going to assume that the values range over mathematical objects not bit vectors",
    "start": "1262120",
    "end": "1268559"
  },
  {
    "text": "there's some opportunity for some over overflow to cause this H to",
    "start": "1268559",
    "end": "1274440"
  },
  {
    "text": "fail so this question of can I so here's an undecidable problem the problem is",
    "start": "1274440",
    "end": "1281720"
  },
  {
    "text": "can I take any computer program in and with 100% accuracy in a finite amount of",
    "start": "1281720",
    "end": "1288960"
  },
  {
    "text": "time answer the question can any of the asserts in the program fail that's an undecidable problem there cannot be an",
    "start": "1288960",
    "end": "1296279"
  },
  {
    "text": "algorithm that solves that problem but we can fake it right so in practice we can fake it so the idea and",
    "start": "1296279",
    "end": "1303880"
  },
  {
    "text": "how to fake it is you require just a bit of attention from a really smart person",
    "start": "1303880",
    "end": "1309600"
  },
  {
    "text": "or uh an algorithm tuned to pretend they're a smart person and what the",
    "start": "1309600",
    "end": "1315360"
  },
  {
    "text": "smart thing is in this so what the smart person does or the algorithm does is they find what we call an inductive",
    "start": "1315360",
    "end": "1320960"
  },
  {
    "text": "invariant an inductive invariant is the is the thing that is",
    "start": "1320960",
    "end": "1326640"
  },
  {
    "text": "maintained via all of the commands of the program that that that that mean the",
    "start": "1326640",
    "end": "1332799"
  },
  {
    "text": "assert can't fail and we can typically just think about it at the beginning of loops and at the end of Loops or the",
    "start": "1332799",
    "end": "1338559"
  },
  {
    "text": "beginning of procedure calls the end of procedure calls Etc any place where there's a repeated computation we need",
    "start": "1338559",
    "end": "1344400"
  },
  {
    "text": "to write down why what is being tracked or what is is known about the program",
    "start": "1344400",
    "end": "1351600"
  },
  {
    "text": "such that we know the that the assert can't fail and then there's a whole bunch of book work book book um work",
    "start": "1351600",
    "end": "1357520"
  },
  {
    "text": "that needs to be done so the this the inductive invariant in this case is so",
    "start": "1357520",
    "end": "1363679"
  },
  {
    "text": "so at the end of the execution we're saying hey the result should equal x x y so really this Loop is implementing",
    "start": "1363679",
    "end": "1368960"
  },
  {
    "text": "multiplication but only with plus but during the middle of the",
    "start": "1368960",
    "end": "1374080"
  },
  {
    "text": "execution of the program there's a slightly stronger inductive invariant right so the inductive invariant is that R is equal to y - I * X and and I is",
    "start": "1374080",
    "end": "1383200"
  },
  {
    "text": "positive and the program establishes that at the beginning of the execution of the loop it maintains that fact",
    "start": "1383200",
    "end": "1390080"
  },
  {
    "text": "through every iteration of the loop and when it exits the loop then we know that the assert can't fail because of that so there's just a bit of bookkeeping to do",
    "start": "1390080",
    "end": "1396960"
  },
  {
    "text": "so in logic and actually using the techniques from the that I was talking about before this is actually an M inp",
    "start": "1396960",
    "end": "1403000"
  },
  {
    "text": "complete problem to check this for all possible values and that's the upside down a for all possible values of x y r",
    "start": "1403000",
    "end": "1410279"
  },
  {
    "text": "and i does the conditions that hold when we enter into the loop do they imply",
    "start": "1410279",
    "end": "1417240"
  },
  {
    "text": "this condition that's in yellow and it turns out it will be",
    "start": "1417240",
    "end": "1422720"
  },
  {
    "text": "true the next step is the inductive invariant so for all possible values of",
    "start": "1422720",
    "end": "1429000"
  },
  {
    "text": "X and Y and R and I when we're staying in the loop so we know the I is strictly greater than zero and we decrement I and",
    "start": "1429000",
    "end": "1437000"
  },
  {
    "text": "we increment R by X and the pre and the and the inductive invariant holds before",
    "start": "1437000",
    "end": "1443000"
  },
  {
    "text": "the execution of that of those commands does the condition hold after the execution of those commands and to put",
    "start": "1443000",
    "end": "1448720"
  },
  {
    "text": "that into pure logic I can introduce some new variables which represent the new values of i and r so R Prime is the",
    "start": "1448720",
    "end": "1455640"
  },
  {
    "text": "new value of R after it's incremented by X and I prime is is the new value of I",
    "start": "1455640",
    "end": "1461080"
  },
  {
    "text": "after it's been decremented and so this is now a question just in uh first Ral",
    "start": "1461080",
    "end": "1466399"
  },
  {
    "text": "logic which we can again answer with tools that that I talked about before and then there's this final step",
    "start": "1466399",
    "end": "1473520"
  },
  {
    "text": "that when we're leaving the loop so we know that I is not positive but the invariant says that I",
    "start": "1473520",
    "end": "1480760"
  },
  {
    "text": "is positive or equal to zero thus we know that I is equal to zero so",
    "start": "1480760",
    "end": "1486200"
  },
  {
    "text": "therefore because r equal y - I * X but I is zero so that means Ral y * X and",
    "start": "1486200",
    "end": "1493200"
  },
  {
    "text": "that's how we know that the assert can't fail and so what we've done is we've just done a proof by induction",
    "start": "1493200",
    "end": "1499279"
  },
  {
    "text": "about the correct of the program and all we needed was a bit of clever about finding this inductive invariant and we",
    "start": "1499279",
    "end": "1504640"
  },
  {
    "text": "proved the correct of this program and note that this program is is an infinite",
    "start": "1504640",
    "end": "1511200"
  },
  {
    "text": "State program right so we it's not possible to explore all the possible all the possible States the only way to",
    "start": "1511200",
    "end": "1517399"
  },
  {
    "text": "reason about this program is is uh in a finite amount of time and a finite amount of space is using techniques from",
    "start": "1517399",
    "end": "1524799"
  },
  {
    "text": "logic um yeah I've already said that basically okay so that that concludes the part of the talk",
    "start": "1524799",
    "end": "1532279"
  },
  {
    "text": "where I uh tell you what Ma mechanized reasoning and mathematical logic is I",
    "start": "1532279",
    "end": "1537480"
  },
  {
    "text": "hope that was helpful so the The Next Step here is to now talk about what's going on uh in AWS in the space so I'll",
    "start": "1537480",
    "end": "1544679"
  },
  {
    "text": "remind you of the shared security model uh we're really looking at two kinds of",
    "start": "1544679",
    "end": "1550120"
  },
  {
    "text": "questions the one is how to help customers be secur in the cloud the other kind of questions is securing the",
    "start": "1550120",
    "end": "1555600"
  },
  {
    "text": "cloud um what I'm going to do is I'm going to describe so for all of these",
    "start": "1555600",
    "end": "1560880"
  },
  {
    "text": "questions we have projects going on uh inside of AWS uh to answer these questions I'm",
    "start": "1560880",
    "end": "1567279"
  },
  {
    "text": "going to go through a couple of them so the first is a uh a tool that's in development that reasons about uh",
    "start": "1567279",
    "end": "1575000"
  },
  {
    "text": "customer ec2 networking configurations right this is really an M",
    "start": "1575000",
    "end": "1580039"
  },
  {
    "text": "complete problem we use some techniques from from that I that I described before to solve them um the next I mean also",
    "start": "1580039",
    "end": "1587799"
  },
  {
    "text": "describe some detail uh a a project to prove the correctness of s2n which is a",
    "start": "1587799",
    "end": "1594760"
  },
  {
    "text": "TLS Library uh using induction and some techniques again as",
    "start": "1594760",
    "end": "1600760"
  },
  {
    "text": "described so let's discuss this uh this first thing about reasoning about networks so this is a I uh a project",
    "start": "1600760",
    "end": "1608960"
  },
  {
    "text": "that folks in my group are are involved in it's a service has a CLI uh where uh",
    "start": "1608960",
    "end": "1615919"
  },
  {
    "text": "number of groups inside of AWS are using it there are some uh customers that are",
    "start": "1615919",
    "end": "1621279"
  },
  {
    "text": "that are involved in a private beta with it please contact me if you you'd like to know more about that program um it",
    "start": "1621279",
    "end": "1627760"
  },
  {
    "text": "what it does is it automatically answers queries about ec2 networking configurations the queries are",
    "start": "1627760",
    "end": "1633679"
  },
  {
    "text": "expressable in a simple query language and the really important point is that",
    "start": "1633679",
    "end": "1638840"
  },
  {
    "text": "we're not sending packets we're not using the network we're analyzing your",
    "start": "1638840",
    "end": "1643919"
  },
  {
    "text": "network in logic and in fact often we analyze networks that have never even been deployed or never been built right",
    "start": "1643919",
    "end": "1649720"
  },
  {
    "text": "so if we we can take your existing ec2 networking configuration using some",
    "start": "1649720",
    "end": "1655240"
  },
  {
    "text": "describe calls and grab the representation that we use or or we can build mythical ones that have never even",
    "start": "1655240",
    "end": "1661159"
  },
  {
    "text": "been been been deployed what we've done is",
    "start": "1661159",
    "end": "1667039"
  },
  {
    "text": "we've encoded the Logics the logic of ec2 networking in logic right so all",
    "start": "1667039",
    "end": "1673480"
  },
  {
    "text": "possible subtle interactions between knat gateways and availability zones and AAL and VPC pairing endpoints and load",
    "start": "1673480",
    "end": "1680559"
  },
  {
    "text": "balancers etc etc etc all the different ways that that these pieces can interact",
    "start": "1680559",
    "end": "1686919"
  },
  {
    "text": "and interact with your network are considered during the",
    "start": "1686919",
    "end": "1692960"
  },
  {
    "text": "proof again it's an MP complete question we can usually answer it in P time using",
    "start": "1694640",
    "end": "1701200"
  },
  {
    "text": "the approaches that's seen before so what kinds of questions can we ask so",
    "start": "1701200",
    "end": "1706760"
  },
  {
    "text": "for example we can ask and answer which ec2 instances are accessible from the",
    "start": "1706760",
    "end": "1714840"
  },
  {
    "text": "internet this is how you would describe it actually in the in the query language for the tool",
    "start": "1714840",
    "end": "1722559"
  },
  {
    "text": "so in this case there's there's there's two modes of use one is to to ask the tool to list things and the other is to",
    "start": "1722559",
    "end": "1730360"
  },
  {
    "text": "answer questions that ultimately have an answer yes or no so here we're saying so",
    "start": "1730360",
    "end": "1736120"
  },
  {
    "text": "inst is a variable and we're saying please list all of the instances inst uh such that the internet can SSH",
    "start": "1736120",
    "end": "1744840"
  },
  {
    "text": "uh to the instance and I have a demo a video demo of of um a case similar to",
    "start": "1744840",
    "end": "1751480"
  },
  {
    "text": "this so this will be discussed in a little bit more detail another question we might ask is from my VPC can non",
    "start": "1751480",
    "end": "1757360"
  },
  {
    "text": "Bastion instances only SSH to the Bastion so here's how we would Express",
    "start": "1757360",
    "end": "1764080"
  },
  {
    "text": "that in the in the query language so this is saying so here where using this is a question that the the answer is yes",
    "start": "1764080",
    "end": "1770559"
  },
  {
    "text": "or no and we're using all as a key word in the quer language so we're saying for",
    "start": "1770559",
    "end": "1775840"
  },
  {
    "text": "all possible instances source and D if Source has instance type uh so has V has",
    "start": "1775840",
    "end": "1784200"
  },
  {
    "text": "VPC Byron VPC so that's made up and the D is not a Bastion so it's it's its tag",
    "start": "1784200",
    "end": "1792159"
  },
  {
    "text": "name is value is not Bastian and the instance Source can SSH to D then and",
    "start": "1792159",
    "end": "1802600"
  },
  {
    "text": "that's the arrow so it's saying then uh D needs to be a",
    "start": "1802600",
    "end": "1809440"
  },
  {
    "text": "Bastion I'm going to skip over the other two cases currently in the tool we support",
    "start": "1809760",
    "end": "1816919"
  },
  {
    "text": "the following ec2 networking Concepts sometimes uh folks who have",
    "start": "1816919",
    "end": "1823360"
  },
  {
    "text": "used the tool leave the set and so we're working to to figure out what what what",
    "start": "1823360",
    "end": "1830159"
  },
  {
    "text": "what other uh features of EC ec2 networking we should support this is currently what we support and and now",
    "start": "1830159",
    "end": "1836919"
  },
  {
    "text": "I'm gonna uh uh play a short demo",
    "start": "1836919",
    "end": "1842919"
  },
  {
    "text": "video hi I'm Katherine Dodge from ads security and I'm here to walk you through our policy checking",
    "start": "1846039",
    "end": "1852440"
  },
  {
    "text": "tool imagine we Define the following policy for our Network any post that is",
    "start": "1852440",
    "end": "1858880"
  },
  {
    "text": "externally accessible via SSH needs to be tagged with the label Bastion and",
    "start": "1858880",
    "end": "1864840"
  },
  {
    "text": "vice versa to express this policy we write for all instances if an instance",
    "start": "1864840",
    "end": "1872080"
  },
  {
    "text": "has a tag has a tag name and the value is set to Bastion make sure SSH is",
    "start": "1872080",
    "end": "1880200"
  },
  {
    "text": "globally open on that instance the double arrow notation checks that the",
    "start": "1880200",
    "end": "1886039"
  },
  {
    "text": "relationship is true in both both directions with our current network configuration when we run the query it",
    "start": "1886039",
    "end": "1893279"
  },
  {
    "text": "returns false alerting us to a policy violation let's find and fix the",
    "start": "1893279",
    "end": "1899279"
  },
  {
    "text": "misconfiguration then rerun our policy track to dig into the error we could run",
    "start": "1899279",
    "end": "1905519"
  },
  {
    "text": "each half of the query separately listing the instances tagged as Bastion a list of one and then",
    "start": "1905519",
    "end": "1913960"
  },
  {
    "text": "listing the instances externally accessible via SS which turns out to be a list of",
    "start": "1913960",
    "end": "1921000"
  },
  {
    "text": "two the underlying definition of the function Internet connect stage to",
    "start": "1921000",
    "end": "1926120"
  },
  {
    "text": "instance can be seen here or instead we could leverage the support provided in the query language",
    "start": "1926120",
    "end": "1933440"
  },
  {
    "text": "and directly ask whether there exists an instance such that the statement is not",
    "start": "1933440",
    "end": "1939200"
  },
  {
    "text": "true the query returns true indicating such an instance does exist to view the",
    "start": "1939200",
    "end": "1946360"
  },
  {
    "text": "instance ID change the exists Clause to a list",
    "start": "1946360",
    "end": "1952440"
  },
  {
    "text": "Clause now we know which instance is violating our policy which security",
    "start": "1952440",
    "end": "1958080"
  },
  {
    "text": "groups are attached to this instance to find out we run this quering we can then use the AWS CLI to",
    "start": "1958080",
    "end": "1966559"
  },
  {
    "text": "get the list of rules associated with that Security Group here we can see that this Security",
    "start": "1966559",
    "end": "1972760"
  },
  {
    "text": "Group indeed allows Port 22 traffic in globally let let's delete that Ingress",
    "start": "1972760",
    "end": "1980639"
  },
  {
    "text": "Rule and now rerun our original policy invariant and see that it now holds",
    "start": "1980639",
    "end": "1989080"
  },
  {
    "text": "true thanks for walking through this with me enjoy reading [Music]",
    "start": "1989080",
    "end": "1995739"
  },
  {
    "text": "that great so that's what one of the tools that that we're working on so now I'm going to I'm",
    "start": "1997519",
    "end": "2003399"
  },
  {
    "text": "going to switch gears and we're going to talk about um proving correctness of some",
    "start": "2003399",
    "end": "2008799"
  },
  {
    "text": "internal AWS",
    "start": "2008799",
    "end": "2012480"
  },
  {
    "text": "components so here we're discussing uh something called s2n so s2n is a small",
    "start": "2013880",
    "end": "2021080"
  },
  {
    "text": "fast TLS Library it's been rigorously engineered for security it's open",
    "start": "2021080",
    "end": "2026240"
  },
  {
    "text": "source uh you can contribute to it you can use it we contribute to it we use it",
    "start": "2026240",
    "end": "2032279"
  },
  {
    "text": "internally within AWS um we're involved in an effort to",
    "start": "2032279",
    "end": "2038000"
  },
  {
    "text": "prove the correctness of various aspects of S2 in um I'm going to be describing",
    "start": "2038000",
    "end": "2045279"
  },
  {
    "text": "our proof of its implementation of hmac we've uh been proving a number of other",
    "start": "2045279",
    "end": "2050960"
  },
  {
    "text": "things about it also this is uh performed with a tool called saw which",
    "start": "2050960",
    "end": "2057480"
  },
  {
    "text": "is um provided to us by a company called gwa there I think there are some you",
    "start": "2057480",
    "end": "2062839"
  },
  {
    "text": "might hold up your hand there some folks from galwa here so if you'd like to talk to about talk to them about saw you can do",
    "start": "2062839",
    "end": "2068358"
  },
  {
    "text": "um and I'm going to be hanging out by the way at the end of the talk and I would imagine they will too so you'd like to ask them questions um and saw",
    "start": "2068359",
    "end": "2076800"
  },
  {
    "text": "implements uh some techniques based again on these MP complete approximation techniques together with some smart",
    "start": "2076800",
    "end": "2083760"
  },
  {
    "text": "reasoning that we've done uh via induction an interesting aspect of this work is that we are uh involved in",
    "start": "2083760",
    "end": "2092280"
  },
  {
    "text": "continuous integration right so so there was a bit of work to get the proof",
    "start": "2092280",
    "end": "2097800"
  },
  {
    "text": "expressed and the tool but but now the cost of doing that work is amzed over the lifetime of the software so for",
    "start": "2097800",
    "end": "2104359"
  },
  {
    "text": "every check-in to S2 in the proof is Rerun reestablished and failed proof attempts",
    "start": "2104359",
    "end": "2112200"
  },
  {
    "text": "usually uh result in in uh the introduction of of bugs to s2n so",
    "start": "2112200",
    "end": "2118160"
  },
  {
    "text": "they're flagged flagged earlier VI via integration with Travis C that there's",
    "start": "2118160",
    "end": "2123520"
  },
  {
    "text": "going to be a video demo and that that'll go be discussed in that demo so hmac is it's this keyed hash message",
    "start": "2123520",
    "end": "2131560"
  },
  {
    "text": "authentication code it provides authenticity and integrity here I've",
    "start": "2131560",
    "end": "2136599"
  },
  {
    "text": "given the definition for you know the formal definition of what ASAC is this",
    "start": "2136599",
    "end": "2142440"
  },
  {
    "text": "comes from the from the um specification hmac takes two things it",
    "start": "2142440",
    "end": "2149560"
  },
  {
    "text": "takes a a key in a message um it it does some stuff with",
    "start": "2149560",
    "end": "2155359"
  },
  {
    "text": "the key to compute these things called KZ the the details are in the hmx specification and then it uses some uh",
    "start": "2155359",
    "end": "2162359"
  },
  {
    "text": "an arbitrary hash function and it uses some constants from",
    "start": "2162359",
    "end": "2168240"
  },
  {
    "text": "nist so the tool sadw provides a formal",
    "start": "2169040",
    "end": "2174280"
  },
  {
    "text": "specification language and so we've translated the hmx specification",
    "start": "2174280",
    "end": "2179720"
  },
  {
    "text": "into the formal specification the machine readable formal specification language for the tool essay for saw um",
    "start": "2179720",
    "end": "2186680"
  },
  {
    "text": "I've I've written at here it's essentially the same it actually goes into it actually makes the the details a",
    "start": "2186680",
    "end": "2193560"
  },
  {
    "text": "little bit clearer so it's in some sense much much better specification and I think you will agree not much more",
    "start": "2193560",
    "end": "2200079"
  },
  {
    "text": "complicated specification the tricky bit now",
    "start": "2200079",
    "end": "2207560"
  },
  {
    "text": "oh I'm having some technical",
    "start": "2207560",
    "end": "2212720"
  },
  {
    "text": "problems oh there goes",
    "start": "2212720",
    "end": "2217160"
  },
  {
    "text": "so maybe AV support maybe maybe that'll go away now so I'm getting spinning uh",
    "start": "2224560",
    "end": "2230119"
  },
  {
    "text": "symbol so the the tricky pit of this work is to to bridge the gap between the C code that implements the hmac and s2n",
    "start": "2230119",
    "end": "2238680"
  },
  {
    "text": "and the cryptol specification so the cryptol specification is is clear easy to understand easy to audit the C",
    "start": "2238680",
    "end": "2246079"
  },
  {
    "text": "implementation uh is built buil for performance right built for small memory size fast performance Etc and so we're",
    "start": "2246079",
    "end": "2252720"
  },
  {
    "text": "using proof to to bridge that Gap the remember from the part of my talk",
    "start": "2252720",
    "end": "2259640"
  },
  {
    "text": "where I was talking about making the undecidable feel decidable I said there's in some sense an ahost step",
    "start": "2259640",
    "end": "2265839"
  },
  {
    "text": "there's a either a smart tool or a smart person looks at the problem writes down",
    "start": "2265839",
    "end": "2272119"
  },
  {
    "text": "the reason in some sense the reason that the program is correct and then we check all",
    "start": "2272119",
    "end": "2277200"
  },
  {
    "text": "the details right as as uid did for the proof of the infin infinite number of",
    "start": "2277200",
    "end": "2284000"
  },
  {
    "text": "primes and that resides in this lower level cryptool code so what we're really",
    "start": "2284000",
    "end": "2289079"
  },
  {
    "text": "doing is we're proving that the higher level cryptool code which I which I've shown you is correct with respect to the",
    "start": "2289079",
    "end": "2295000"
  },
  {
    "text": "lower level cryptool code and then we do a fairly easy proof that the production s2n code uh uh is is equivalent to the",
    "start": "2295000",
    "end": "2303040"
  },
  {
    "text": "to the lower level uh crypto code so the the S2 in data structure and apis are",
    "start": "2303040",
    "end": "2308400"
  },
  {
    "text": "accounted for in the cryptool code uh the the details of pointer arithmetic and lower level performance",
    "start": "2308400",
    "end": "2314240"
  },
  {
    "text": "optimizations are ignored so that's handled by the proof on the right hand side so there's a bit of manual work but for the most part it's automatic and",
    "start": "2314240",
    "end": "2320520"
  },
  {
    "text": "definitely the all of the bookkeeping of the the detailed Parts about does this assertion hold at this line all that",
    "start": "2320520",
    "end": "2326760"
  },
  {
    "text": "kind of stuff that's all hel dealt with automatically by the tool um there's also a bit of reasoning",
    "start": "2326760",
    "end": "2333800"
  },
  {
    "text": "to do about update so the hmac so so the s2n uh update function can be called",
    "start": "2333800",
    "end": "2342040"
  },
  {
    "text": "many times and there's a question of if I call update twice is that really the same as calling it once but on a larger",
    "start": "2342040",
    "end": "2347480"
  },
  {
    "text": "message and so that that reasoning has been done uh via induction and the tool",
    "start": "2347480",
    "end": "2353680"
  },
  {
    "text": "um and the the really exciting thing about this work is that the proofs are replayed automatically in in travisci so",
    "start": "2353680",
    "end": "2360040"
  },
  {
    "text": "a proof failure results in a in a build failure and on average currently the run",
    "start": "2360040",
    "end": "2365480"
  },
  {
    "text": "time for those proofs is 15 minutes the proof is relatively agnostic to the code so you can add a loop here change",
    "start": "2365480",
    "end": "2373240"
  },
  {
    "text": "the loop for the most part the proof will replay with no problem um the the",
    "start": "2373240",
    "end": "2381000"
  },
  {
    "text": "difficulty is when you modify the data structures that s2n is using or you",
    "start": "2381000",
    "end": "2386040"
  },
  {
    "text": "modify the function call structure uh in that case the the proof structure has to",
    "start": "2386040",
    "end": "2391520"
  },
  {
    "text": "be updated currently by a human so again I'm going to show you a a",
    "start": "2391520",
    "end": "2396680"
  },
  {
    "text": "a video demo of this in [Music]",
    "start": "2396680",
    "end": "2404760"
  },
  {
    "text": "action now we're going to show how the verification done by saw is integrated into the s2n development process when a",
    "start": "2404760",
    "end": "2411680"
  },
  {
    "text": "user goes to S2 n's GitHub page they are presented with a build passing badge this indicates that the code builds the",
    "start": "2411680",
    "end": "2418359"
  },
  {
    "text": "regression tests passed and also that all of the saw hm proofs succeed against the current version of the code clicking",
    "start": "2418359",
    "end": "2425200"
  },
  {
    "text": "on this badge takes us to the Travis C page for s2n where we can see the results of these checks which occur",
    "start": "2425200",
    "end": "2431079"
  },
  {
    "text": "every time there's a push to the s2n G repo this is the log from the Travis checks and shows the result of a saw run",
    "start": "2431079",
    "end": "2438680"
  },
  {
    "text": "we can see that we're verifying the hmac algorithm with Shaw 256 a key size of 64",
    "start": "2438680",
    "end": "2444760"
  },
  {
    "text": "and message size of one each individual verification checks that the code Returns the correct result for any",
    "start": "2444760",
    "end": "2451040"
  },
  {
    "text": "possible message and key of the given sizes it then returns a Json output that contains statistics such as the proof",
    "start": "2451040",
    "end": "2457760"
  },
  {
    "text": "time and complexity we then scrape these automatically and generate graphs summarizing the checks that were run as",
    "start": "2457760",
    "end": "2463760"
  },
  {
    "text": "well as information about each function that was analyzed for demo purposes we've created our own Travis instance",
    "start": "2463760",
    "end": "2469560"
  },
  {
    "text": "that does a single run of the saw hmac checks so that we can quickly see the change and output as we make changes to",
    "start": "2469560",
    "end": "2475119"
  },
  {
    "text": "the code we're going to show how saw integrates into the development workflow accepting correct changes and flagging",
    "start": "2475119",
    "end": "2481560"
  },
  {
    "text": "any errors that are introduced we'll focus on the S2 and hmac update function which you can see here",
    "start": "2481560",
    "end": "2487920"
  },
  {
    "text": "one interesting thing about this function is that it involves a rather strange constant the comment above explains that this constant was",
    "start": "2487920",
    "end": "2494160"
  },
  {
    "text": "introduced to protect against a timing attack and should have no effect on the mathematical result if that's true we",
    "start": "2494160",
    "end": "2499960"
  },
  {
    "text": "should be able to remove this constant completely we'll do that save the file and push the update to get as soon as we",
    "start": "2499960",
    "end": "2506359"
  },
  {
    "text": "do the push Travis will run all the saw proofs again and because of the proof automation incorporated into saw the new",
    "start": "2506359",
    "end": "2512839"
  },
  {
    "text": "code will pass without the programmer explicitly updating the proof itself this is important important as it lets the proof checking operate in a very",
    "start": "2512839",
    "end": "2519359"
  },
  {
    "text": "similar manner to compilation and testing from a workflow perspective so Travis has already started the new build",
    "start": "2519359",
    "end": "2525359"
  },
  {
    "text": "it compiles the code executes saw and produces this green text which indicates that saw has succeeded in showing that",
    "start": "2525359",
    "end": "2531560"
  },
  {
    "text": "the code is a correct implementation of hmac for the given message and key sizes so now we'll look at what happens",
    "start": "2531560",
    "end": "2537960"
  },
  {
    "text": "if we make a mistake what we'll do is increase this constant by one this breaks the correctness condition that",
    "start": "2537960",
    "end": "2543319"
  },
  {
    "text": "the constant should be zero mod all the hmac block sizes so so we've just pushed that change and now we'll go back to",
    "start": "2543319",
    "end": "2549359"
  },
  {
    "text": "Travis to see what happens in this case when sof finishes it generates some red text indicating",
    "start": "2549359",
    "end": "2555880"
  },
  {
    "text": "the proof failed and saw has also generated a counter example which is a set of inputs that show a case where the",
    "start": "2555880",
    "end": "2561280"
  },
  {
    "text": "code fails to give the correct result this can be turned into a test case that can be passed to the developers to help",
    "start": "2561280",
    "end": "2566680"
  },
  {
    "text": "them debug the code here we're looking at the details of the saw output but on the GitHub page this would be summarized",
    "start": "2566680",
    "end": "2572319"
  },
  {
    "text": "as a red badge indicating that one of the code checks has failed for the given commit now in this demo Travis was",
    "start": "2572319",
    "end": "2578440"
  },
  {
    "text": "triggered by the codee pushes we did but it also runs on every pull request so developers can see feedback from the saw",
    "start": "2578440",
    "end": "2584359"
  },
  {
    "text": "tool as they deciding whether to merge contributed changes this acts as a very strong check on the quality of submitted",
    "start": "2584359",
    "end": "2590160"
  },
  {
    "text": "code augmenting manual code review and providing developers with a high degree of assurance about the correctness of",
    "start": "2590160",
    "end": "2595559"
  },
  {
    "text": "code changes without requiring any extra effort on their",
    "start": "2595559",
    "end": "2600680"
  },
  {
    "text": "[Music] part great so I'm gonna",
    "start": "2601280",
    "end": "2607839"
  },
  {
    "text": "say that that concludes my uh effort to describe in some detail uh examples of",
    "start": "2607839",
    "end": "2614440"
  },
  {
    "text": "what we're doing in this space um",
    "start": "2614440",
    "end": "2619599"
  },
  {
    "text": "I began the talk with this U idea of the shared security model that questions",
    "start": "2619599",
    "end": "2625160"
  },
  {
    "text": "about security fall into two camps questions about the customers",
    "start": "2625160",
    "end": "2631480"
  },
  {
    "text": "exposure to security problems uh via misconfigured vpcs miscon configured",
    "start": "2631480",
    "end": "2637760"
  },
  {
    "text": "policies and also questions that come up about the security of the underlying",
    "start": "2637760",
    "end": "2643559"
  },
  {
    "text": "components that form AWS I've given you examples of uh uh two projects one to",
    "start": "2643559",
    "end": "2651559"
  },
  {
    "text": "reason about customer uh ec2 networking uh the other to prove the correctness of",
    "start": "2651559",
    "end": "2657240"
  },
  {
    "text": "the crypto Primitives we actually have projects going on in the uh relevant to the other question so about policies and",
    "start": "2657240",
    "end": "2662760"
  },
  {
    "text": "about um the virtualization layer um that conclud includes uh my talk I did",
    "start": "2662760",
    "end": "2669800"
  },
  {
    "text": "have a couple of reminders in order of of of business",
    "start": "2669800",
    "end": "2675640"
  },
  {
    "text": "so my name is Byron my email address is Byron amazon.com so you you could",
    "start": "2675640",
    "end": "2681520"
  },
  {
    "text": "contact me with questions I'm going to be hanging out uh now now for a while",
    "start": "2681520",
    "end": "2687440"
  },
  {
    "text": "and I'm also going to be at the security booth tomorrow at 3 p.m. um I wanted to",
    "start": "2687440",
    "end": "2694040"
  },
  {
    "text": "to give a pointer to another talk that's uh it's by Cole McCarthy it's um net 405",
    "start": "2694040",
    "end": "2702599"
  },
  {
    "text": "is the name of the talk it's it's about S2 in um the the TLs library that we're",
    "start": "2702599",
    "end": "2709240"
  },
  {
    "text": "doing proofs of correctness on That's Thursday December 1st at 12:30 in one of",
    "start": "2709240",
    "end": "2715200"
  },
  {
    "text": "the rooms in the Venetian so if you're interested in uh s2n",
    "start": "2715200",
    "end": "2720359"
  },
  {
    "text": "TLS uh or the proof stuff so col's been involved in that in that in that work too and then and I wanted to also",
    "start": "2720359",
    "end": "2727800"
  },
  {
    "text": "uh point out that the the collaborators that we have in in gwa uh in particular",
    "start": "2727800",
    "end": "2734800"
  },
  {
    "text": "one of the uh people who's been who we've been working very closely with on the saw tool is is here now and I and I",
    "start": "2734800",
    "end": "2741960"
  },
  {
    "text": "think we'll be staying here after the end of my lecture so if you'd like to ask questions of us uh please feel free",
    "start": "2741960",
    "end": "2747559"
  },
  {
    "text": "to do so so thank you very much",
    "start": "2747559",
    "end": "2752040"
  }
]