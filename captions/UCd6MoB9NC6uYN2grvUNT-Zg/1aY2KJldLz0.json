[
  {
    "text": "[Music]",
    "start": "500",
    "end": "5520"
  },
  {
    "text": "picking a database is a relatively long",
    "start": "5520",
    "end": "7600"
  },
  {
    "text": "term commitment",
    "start": "7600",
    "end": "8639"
  },
  {
    "text": "for a startup's technical decision maker",
    "start": "8639",
    "end": "11599"
  },
  {
    "text": "when writing an application within a",
    "start": "11599",
    "end": "13360"
  },
  {
    "text": "distributed system",
    "start": "13360",
    "end": "14719"
  },
  {
    "text": "all changes are captured in some sort of",
    "start": "14719",
    "end": "16960"
  },
  {
    "text": "database",
    "start": "16960",
    "end": "18400"
  },
  {
    "text": "this makes migration of a database the",
    "start": "18400",
    "end": "20400"
  },
  {
    "text": "most complex part of workload migration",
    "start": "20400",
    "end": "23840"
  },
  {
    "text": "it's even more complex to do with zero",
    "start": "23840",
    "end": "26080"
  },
  {
    "text": "downtime",
    "start": "26080",
    "end": "27199"
  },
  {
    "text": "taking time to make an informed choice",
    "start": "27199",
    "end": "29519"
  },
  {
    "text": "of the database technology upfront",
    "start": "29519",
    "end": "31679"
  },
  {
    "text": "can be a valuable early decision for",
    "start": "31679",
    "end": "33520"
  },
  {
    "text": "your startup my name is rob defeo",
    "start": "33520",
    "end": "35920"
  },
  {
    "text": "and i'm a startup advocate at aws host",
    "start": "35920",
    "end": "38800"
  },
  {
    "text": "of the startup engineering podcast",
    "start": "38800",
    "end": "40640"
  },
  {
    "text": "and i work with startups to assist them",
    "start": "40640",
    "end": "42800"
  },
  {
    "text": "in making the right technology decisions",
    "start": "42800",
    "end": "45840"
  },
  {
    "text": "in order to make an informed decision",
    "start": "45840",
    "end": "48000"
  },
  {
    "text": "let us start by understanding the",
    "start": "48000",
    "end": "49680"
  },
  {
    "text": "various database types",
    "start": "49680",
    "end": "51760"
  },
  {
    "text": "we will look at databases through two",
    "start": "51760",
    "end": "54160"
  },
  {
    "text": "specific lenses",
    "start": "54160",
    "end": "55920"
  },
  {
    "text": "access characteristics and the pattern",
    "start": "55920",
    "end": "58160"
  },
  {
    "text": "of data being stored",
    "start": "58160",
    "end": "60559"
  },
  {
    "text": "data can be structured like a sql schema",
    "start": "60559",
    "end": "63680"
  },
  {
    "text": "or semi-structured like a json object",
    "start": "63680",
    "end": "66400"
  },
  {
    "text": "where each",
    "start": "66400",
    "end": "66960"
  },
  {
    "text": "object can have a different shape it",
    "start": "66960",
    "end": "69280"
  },
  {
    "text": "could also have no defined structure",
    "start": "69280",
    "end": "71200"
  },
  {
    "text": "like a textual data for a full text",
    "start": "71200",
    "end": "73439"
  },
  {
    "text": "search or just a key value pair",
    "start": "73439",
    "end": "75840"
  },
  {
    "text": "which is not very different from file",
    "start": "75840",
    "end": "77600"
  },
  {
    "text": "name and file content relationship",
    "start": "77600",
    "end": "81040"
  },
  {
    "text": "data could also be segregated by size",
    "start": "81040",
    "end": "84320"
  },
  {
    "text": "the quantum of data produced reads or",
    "start": "84320",
    "end": "87520"
  },
  {
    "text": "ingested",
    "start": "87520",
    "end": "88400"
  },
  {
    "text": "rights payment gateways are a specific",
    "start": "88400",
    "end": "92000"
  },
  {
    "text": "use case",
    "start": "92000",
    "end": "92960"
  },
  {
    "text": "by which speed of reads and writes is",
    "start": "92960",
    "end": "95840"
  },
  {
    "text": "the important focal point",
    "start": "95840",
    "end": "98640"
  },
  {
    "text": "speed at which data is produced or",
    "start": "98640",
    "end": "100479"
  },
  {
    "text": "consumed may also be considered when",
    "start": "100479",
    "end": "102960"
  },
  {
    "text": "selecting a database",
    "start": "102960",
    "end": "105119"
  },
  {
    "text": "for example stock market data may be",
    "start": "105119",
    "end": "107840"
  },
  {
    "text": "small",
    "start": "107840",
    "end": "108720"
  },
  {
    "text": "but the speed at which derived values",
    "start": "108720",
    "end": "110799"
  },
  {
    "text": "need to be calculated",
    "start": "110799",
    "end": "112159"
  },
  {
    "text": "may be less than 10 milliseconds for a",
    "start": "112159",
    "end": "114720"
  },
  {
    "text": "stock back testing application",
    "start": "114720",
    "end": "117439"
  },
  {
    "text": "and finally data is also segregated by",
    "start": "117439",
    "end": "120479"
  },
  {
    "text": "scale",
    "start": "120479",
    "end": "121520"
  },
  {
    "text": "or the throughput or simultaneous rate",
    "start": "121520",
    "end": "124079"
  },
  {
    "text": "data is created or ingested",
    "start": "124079",
    "end": "127040"
  },
  {
    "text": "we distinguish between transactional or",
    "start": "127040",
    "end": "129599"
  },
  {
    "text": "oltp",
    "start": "129599",
    "end": "131039"
  },
  {
    "text": "and analytical or olap databases",
    "start": "131039",
    "end": "135040"
  },
  {
    "text": "olap databases are larger databases for",
    "start": "135040",
    "end": "138720"
  },
  {
    "text": "warehousing",
    "start": "138720",
    "end": "139520"
  },
  {
    "text": "and data archiving they generally have",
    "start": "139520",
    "end": "142480"
  },
  {
    "text": "lower constraints and speed requirements",
    "start": "142480",
    "end": "144879"
  },
  {
    "text": "but high expectation on volume of data",
    "start": "144879",
    "end": "147120"
  },
  {
    "text": "they can process",
    "start": "147120",
    "end": "149920"
  },
  {
    "text": "typically startups don't have an",
    "start": "150160",
    "end": "152400"
  },
  {
    "text": "immediate requirement for",
    "start": "152400",
    "end": "154000"
  },
  {
    "text": "olap systems so today we'll focus on",
    "start": "154000",
    "end": "157519"
  },
  {
    "text": "oltp",
    "start": "157519",
    "end": "158720"
  },
  {
    "text": "or transactional systems only",
    "start": "158720",
    "end": "162160"
  },
  {
    "text": "for a long time relational databases",
    "start": "162160",
    "end": "164720"
  },
  {
    "text": "dominated the database landscape",
    "start": "164720",
    "end": "167200"
  },
  {
    "text": "but it's clear that the days of single",
    "start": "167200",
    "end": "169440"
  },
  {
    "text": "database type",
    "start": "169440",
    "end": "170560"
  },
  {
    "text": "are now in the past with large spans of",
    "start": "170560",
    "end": "172959"
  },
  {
    "text": "usage",
    "start": "172959",
    "end": "173920"
  },
  {
    "text": "relational databases are still the",
    "start": "173920",
    "end": "176160"
  },
  {
    "text": "dominant database type today",
    "start": "176160",
    "end": "178640"
  },
  {
    "text": "a relational database is self-describing",
    "start": "178640",
    "end": "181440"
  },
  {
    "text": "because it enables developers",
    "start": "181440",
    "end": "183200"
  },
  {
    "text": "to define the database schema as well as",
    "start": "183200",
    "end": "185840"
  },
  {
    "text": "the relations",
    "start": "185840",
    "end": "186720"
  },
  {
    "text": "and constraints between rows and tables",
    "start": "186720",
    "end": "189280"
  },
  {
    "text": "inside the database",
    "start": "189280",
    "end": "191760"
  },
  {
    "text": "developers rely on the functionality of",
    "start": "191760",
    "end": "193920"
  },
  {
    "text": "the relational database",
    "start": "193920",
    "end": "195440"
  },
  {
    "text": "and not the application code to enforce",
    "start": "195440",
    "end": "197920"
  },
  {
    "text": "the schema and preserve the referential",
    "start": "197920",
    "end": "200080"
  },
  {
    "text": "integrity",
    "start": "200080",
    "end": "200959"
  },
  {
    "text": "of the data within the database",
    "start": "200959",
    "end": "204239"
  },
  {
    "text": "typical use cases for a relational",
    "start": "204239",
    "end": "206319"
  },
  {
    "text": "database include",
    "start": "206319",
    "end": "207519"
  },
  {
    "text": "web and mobile applications enterprise",
    "start": "207519",
    "end": "210480"
  },
  {
    "text": "applications",
    "start": "210480",
    "end": "211360"
  },
  {
    "text": "and online gaming various flavors or",
    "start": "211360",
    "end": "214959"
  },
  {
    "text": "versions of",
    "start": "214959",
    "end": "215920"
  },
  {
    "text": "rds and aurora are used by customers for",
    "start": "215920",
    "end": "219120"
  },
  {
    "text": "high performance",
    "start": "219120",
    "end": "220080"
  },
  {
    "text": "and scalable applications running on",
    "start": "220080",
    "end": "222159"
  },
  {
    "text": "amazon",
    "start": "222159",
    "end": "223680"
  },
  {
    "text": "both rds and aurora are fully managed",
    "start": "223680",
    "end": "226319"
  },
  {
    "text": "scalable systems",
    "start": "226319",
    "end": "227920"
  },
  {
    "text": "as your system grows large amounts of",
    "start": "227920",
    "end": "230560"
  },
  {
    "text": "data are often in the form of key value",
    "start": "230560",
    "end": "233120"
  },
  {
    "text": "data",
    "start": "233120",
    "end": "234080"
  },
  {
    "text": "where a single row maps to a primary key",
    "start": "234080",
    "end": "237519"
  },
  {
    "text": "key value databases are highly",
    "start": "237519",
    "end": "239599"
  },
  {
    "text": "partitionable",
    "start": "239599",
    "end": "240720"
  },
  {
    "text": "and allow horizontal scaling at levels",
    "start": "240720",
    "end": "242879"
  },
  {
    "text": "that other types of database",
    "start": "242879",
    "end": "244640"
  },
  {
    "text": "cannot achieve use cases such as gaming",
    "start": "244640",
    "end": "248080"
  },
  {
    "text": "ad tech and iot lend themselves",
    "start": "248080",
    "end": "250959"
  },
  {
    "text": "particularly well to the key value data",
    "start": "250959",
    "end": "252959"
  },
  {
    "text": "model",
    "start": "252959",
    "end": "253599"
  },
  {
    "text": "where the access patterns require low",
    "start": "253599",
    "end": "255680"
  },
  {
    "text": "latency",
    "start": "255680",
    "end": "256639"
  },
  {
    "text": "gets or puts for the known key values",
    "start": "256639",
    "end": "261120"
  },
  {
    "text": "amazon dynamodb is a managed key value",
    "start": "261120",
    "end": "264160"
  },
  {
    "text": "and document database that delivers",
    "start": "264160",
    "end": "266400"
  },
  {
    "text": "single",
    "start": "266400",
    "end": "267280"
  },
  {
    "text": "millisecond performance at any scale",
    "start": "267280",
    "end": "270479"
  },
  {
    "text": "another relevant database type is",
    "start": "270479",
    "end": "272560"
  },
  {
    "text": "document databases",
    "start": "272560",
    "end": "274400"
  },
  {
    "text": "document databases are intuitive for",
    "start": "274400",
    "end": "276560"
  },
  {
    "text": "developers to use",
    "start": "276560",
    "end": "277919"
  },
  {
    "text": "because the data in the application tier",
    "start": "277919",
    "end": "280240"
  },
  {
    "text": "is typically represented as a json",
    "start": "280240",
    "end": "282240"
  },
  {
    "text": "document",
    "start": "282240",
    "end": "283280"
  },
  {
    "text": "developers can persist data using the",
    "start": "283280",
    "end": "285199"
  },
  {
    "text": "same document model format",
    "start": "285199",
    "end": "286880"
  },
  {
    "text": "that they use in the application code",
    "start": "286880",
    "end": "289600"
  },
  {
    "text": "customers use the flexible schema model",
    "start": "289600",
    "end": "291919"
  },
  {
    "text": "of documentdb",
    "start": "291919",
    "end": "293199"
  },
  {
    "text": "to achieve developer efficiency",
    "start": "293199",
    "end": "296400"
  },
  {
    "text": "next we have graph databases a graph",
    "start": "296400",
    "end": "299120"
  },
  {
    "text": "database's purpose",
    "start": "299120",
    "end": "300720"
  },
  {
    "text": "is to make it easy to build and run",
    "start": "300720",
    "end": "303120"
  },
  {
    "text": "applications",
    "start": "303120",
    "end": "304240"
  },
  {
    "text": "that work with highly connected data",
    "start": "304240",
    "end": "306240"
  },
  {
    "text": "sets",
    "start": "306240",
    "end": "307759"
  },
  {
    "text": "typical use cases for graph databases",
    "start": "307759",
    "end": "310560"
  },
  {
    "text": "include",
    "start": "310560",
    "end": "311199"
  },
  {
    "text": "social networking recommendation engines",
    "start": "311199",
    "end": "314160"
  },
  {
    "text": "fraud detection",
    "start": "314160",
    "end": "315440"
  },
  {
    "text": "and knowledge graphs amazon neptune",
    "start": "315440",
    "end": "318960"
  },
  {
    "text": "is a fully managed graph database",
    "start": "318960",
    "end": "320720"
  },
  {
    "text": "service",
    "start": "320720",
    "end": "322000"
  },
  {
    "text": "neptune supports both the property graph",
    "start": "322000",
    "end": "324240"
  },
  {
    "text": "model and the resource description",
    "start": "324240",
    "end": "326400"
  },
  {
    "text": "framework",
    "start": "326400",
    "end": "327199"
  },
  {
    "text": "rdf giving you the choice between two",
    "start": "327199",
    "end": "330479"
  },
  {
    "text": "graph apis",
    "start": "330479",
    "end": "332400"
  },
  {
    "text": "tinker pop and rdf or sparkle",
    "start": "332400",
    "end": "336160"
  },
  {
    "text": "startups use amazon neptune to build",
    "start": "336160",
    "end": "338639"
  },
  {
    "text": "knowledge graphs",
    "start": "338639",
    "end": "340000"
  },
  {
    "text": "make in-game offer recommendations and",
    "start": "340000",
    "end": "342400"
  },
  {
    "text": "for fraud detection",
    "start": "342400",
    "end": "344080"
  },
  {
    "text": "then there are in-memory databases",
    "start": "344080",
    "end": "346639"
  },
  {
    "text": "financial services",
    "start": "346639",
    "end": "348000"
  },
  {
    "text": "e-commerce web and mobile applications",
    "start": "348000",
    "end": "351199"
  },
  {
    "text": "have use cases such as leaderboards",
    "start": "351199",
    "end": "353840"
  },
  {
    "text": "session stores",
    "start": "353840",
    "end": "354960"
  },
  {
    "text": "and real-time analytics that require",
    "start": "354960",
    "end": "357440"
  },
  {
    "text": "microsecond response times",
    "start": "357440",
    "end": "359199"
  },
  {
    "text": "and can have large spikes in traffic",
    "start": "359199",
    "end": "361199"
  },
  {
    "text": "coming at any time",
    "start": "361199",
    "end": "363680"
  },
  {
    "text": "we built amazon elastic cache offering",
    "start": "363680",
    "end": "366160"
  },
  {
    "text": "memcached",
    "start": "366160",
    "end": "366960"
  },
  {
    "text": "and redis to serve low latency high",
    "start": "366960",
    "end": "369759"
  },
  {
    "text": "throughput workloads",
    "start": "369759",
    "end": "371199"
  },
  {
    "text": "that cannot be served with disk based",
    "start": "371199",
    "end": "373120"
  },
  {
    "text": "data stores",
    "start": "373120",
    "end": "375280"
  },
  {
    "text": "amazon dynamo b db accelerator or dax",
    "start": "375280",
    "end": "379280"
  },
  {
    "text": "is another example of a purpose-built",
    "start": "379280",
    "end": "381600"
  },
  {
    "text": "data store",
    "start": "381600",
    "end": "383199"
  },
  {
    "text": "dax was built to make dynamodb reads an",
    "start": "383199",
    "end": "386080"
  },
  {
    "text": "order of magnitude faster",
    "start": "386080",
    "end": "388880"
  },
  {
    "text": "and of course there are search databases",
    "start": "388880",
    "end": "392000"
  },
  {
    "text": "many applications output logs to help",
    "start": "392000",
    "end": "394400"
  },
  {
    "text": "developers troubleshoot issues",
    "start": "394400",
    "end": "396960"
  },
  {
    "text": "amazon elastic search service or amazon",
    "start": "396960",
    "end": "399759"
  },
  {
    "text": "es",
    "start": "399759",
    "end": "400880"
  },
  {
    "text": "is a purpose built for providing near",
    "start": "400880",
    "end": "403520"
  },
  {
    "text": "real-time visualizations",
    "start": "403520",
    "end": "405280"
  },
  {
    "text": "and analytics of generated data",
    "start": "405280",
    "end": "408720"
  },
  {
    "text": "by indexing aggregating and searching",
    "start": "408720",
    "end": "412240"
  },
  {
    "text": "semi-structured logs and metrics",
    "start": "412240",
    "end": "415360"
  },
  {
    "text": "amazon es is also a powerful",
    "start": "415360",
    "end": "417919"
  },
  {
    "text": "high-performance search engine",
    "start": "417919",
    "end": "419759"
  },
  {
    "text": "for full-text search use cases",
    "start": "419759",
    "end": "423120"
  },
  {
    "text": "startups store billions of documents for",
    "start": "423120",
    "end": "425120"
  },
  {
    "text": "a variety of mission critical use cases",
    "start": "425120",
    "end": "428080"
  },
  {
    "text": "ranging from operational monitoring and",
    "start": "428080",
    "end": "430160"
  },
  {
    "text": "troubleshooting",
    "start": "430160",
    "end": "431440"
  },
  {
    "text": "to distributed application stack tracing",
    "start": "431440",
    "end": "433840"
  },
  {
    "text": "and pricing optimization",
    "start": "433840",
    "end": "436639"
  },
  {
    "text": "having gone through the landscape of",
    "start": "436639",
    "end": "438240"
  },
  {
    "text": "database choices",
    "start": "438240",
    "end": "439919"
  },
  {
    "text": "let's now discuss how we minimize the",
    "start": "439919",
    "end": "442080"
  },
  {
    "text": "risk associated with choosing a database",
    "start": "442080",
    "end": "444639"
  },
  {
    "text": "for your startup availability of mature",
    "start": "444639",
    "end": "448160"
  },
  {
    "text": "tooling",
    "start": "448160",
    "end": "448960"
  },
  {
    "text": "is the single biggest factor for",
    "start": "448960",
    "end": "450960"
  },
  {
    "text": "developers",
    "start": "450960",
    "end": "452479"
  },
  {
    "text": "the php mysql or lamp stack as it's",
    "start": "452479",
    "end": "455759"
  },
  {
    "text": "known",
    "start": "455759",
    "end": "456400"
  },
  {
    "text": "is a good example where uniform and deep",
    "start": "456400",
    "end": "459199"
  },
  {
    "text": "support of my sequel",
    "start": "459199",
    "end": "460960"
  },
  {
    "text": "led to success of php and vice versa",
    "start": "460960",
    "end": "464960"
  },
  {
    "text": "in general you will find that amazon rds",
    "start": "464960",
    "end": "468000"
  },
  {
    "text": "dynamodb and documentdb to be good",
    "start": "468000",
    "end": "471120"
  },
  {
    "text": "initial choices",
    "start": "471120",
    "end": "472160"
  },
  {
    "text": "which are wide support for tooling and",
    "start": "472160",
    "end": "474319"
  },
  {
    "text": "languages",
    "start": "474319",
    "end": "475520"
  },
  {
    "text": "and support for flexible data usage",
    "start": "475520",
    "end": "477599"
  },
  {
    "text": "patterns",
    "start": "477599",
    "end": "479199"
  },
  {
    "text": "in this video we discussed a variety of",
    "start": "479199",
    "end": "481520"
  },
  {
    "text": "databases",
    "start": "481520",
    "end": "482560"
  },
  {
    "text": "eventually focusing on three relational",
    "start": "482560",
    "end": "485520"
  },
  {
    "text": "document",
    "start": "485520",
    "end": "486240"
  },
  {
    "text": "and key value it's always important to",
    "start": "486240",
    "end": "488960"
  },
  {
    "text": "capture diverse opinions",
    "start": "488960",
    "end": "490639"
  },
  {
    "text": "when making a database decision inside",
    "start": "490639",
    "end": "492800"
  },
  {
    "text": "your startup",
    "start": "492800",
    "end": "494479"
  },
  {
    "text": "by providing ownership in this important",
    "start": "494479",
    "end": "496720"
  },
  {
    "text": "decision",
    "start": "496720",
    "end": "497520"
  },
  {
    "text": "you may find that the right choice is",
    "start": "497520",
    "end": "499280"
  },
  {
    "text": "not just one database",
    "start": "499280",
    "end": "500960"
  },
  {
    "text": "but maybe two or three pick the best",
    "start": "500960",
    "end": "504080"
  },
  {
    "text": "database to solve a specific problem",
    "start": "504080",
    "end": "506800"
  },
  {
    "text": "or a group of problems i'm happy to",
    "start": "506800",
    "end": "509520"
  },
  {
    "text": "share a few popular architectures",
    "start": "509520",
    "end": "511520"
  },
  {
    "text": "and attach database choices as a",
    "start": "511520",
    "end": "513440"
  },
  {
    "text": "reference",
    "start": "513440",
    "end": "514880"
  },
  {
    "text": "have fun and build on",
    "start": "514880",
    "end": "521599"
  },
  {
    "text": "you",
    "start": "521599",
    "end": "523680"
  }
]