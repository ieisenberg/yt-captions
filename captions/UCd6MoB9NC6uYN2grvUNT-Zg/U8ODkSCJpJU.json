[
  {
    "start": "0",
    "end": "274000"
  },
  {
    "text": "welcome to Arc 308 the seress company using AWS Lambda my name is viom nagrani",
    "start": "280",
    "end": "7000"
  },
  {
    "text": "I am a senior product manager with the AWS Lambda team I'm joined here today by Jay who",
    "start": "7000",
    "end": "12440"
  },
  {
    "text": "will be also co-presenting with me and we'll be talking about streamlining architectures with",
    "start": "12440",
    "end": "19560"
  },
  {
    "text": "AWS so what to expect this from this session I'll do a quick overview of the",
    "start": "20640",
    "end": "26279"
  },
  {
    "text": "evolution of cloud compute towards serverless in explain what serverless is and how that",
    "start": "26279",
    "end": "32759"
  },
  {
    "text": "works I'll do a quick walk through into what AWS Lambda is and some of the features and functionalities of the",
    "start": "32760",
    "end": "40280"
  },
  {
    "text": "product from there we'll go into uh how to build a serverless data processing",
    "start": "40280",
    "end": "46079"
  },
  {
    "text": "architecture in a uh using AWS Lambda and we'll have an example of a",
    "start": "46079",
    "end": "52079"
  },
  {
    "text": "live video processing architecture as a as a special case of this which J Will",
    "start": "52079",
    "end": "58000"
  },
  {
    "text": "present after that given this is a architecture talk I want to go deep into real-time data processing architecture",
    "start": "58000",
    "end": "64799"
  },
  {
    "text": "patterns and talk about what different architectures you could build using AWS",
    "start": "64799",
    "end": "70920"
  },
  {
    "text": "Lambda I want to leave you all with a few tips and tricks of how you could use",
    "start": "70920",
    "end": "76240"
  },
  {
    "text": "AWS Lambda to build small applications or large applications depending on what your use",
    "start": "76240",
    "end": "81799"
  },
  {
    "text": "cases are so let's talk about the evolution of cloud",
    "start": "81799",
    "end": "87360"
  },
  {
    "text": "compute so everybody knows the benefits of of the public Cloud the way it works is that there is this",
    "start": "87560",
    "end": "94280"
  },
  {
    "text": "infrastructure on which you have your instances running these instances maybe ec2",
    "start": "94280",
    "end": "100360"
  },
  {
    "text": "instances or any virtual machines and what you are running on top",
    "start": "100360",
    "end": "105439"
  },
  {
    "text": "of these instances is your application code so what's happening here is that",
    "start": "105439",
    "end": "111159"
  },
  {
    "text": "there's a lot of overhead which you have to manage for running the application code if what you worry about running is",
    "start": "111159",
    "end": "117880"
  },
  {
    "text": "the application you still have to ma also worry about managing the underlying instances the",
    "start": "117880",
    "end": "123920"
  },
  {
    "text": "configuration the setup the scalability the deployment and we heard from customers",
    "start": "123920",
    "end": "129720"
  },
  {
    "text": "that this is something that developers don't really want to focus on they want to focus their efforts on the application",
    "start": "129720",
    "end": "136080"
  },
  {
    "text": "development so in this data came the whole the whole concept of containers containers actually made life",
    "start": "136080",
    "end": "143040"
  },
  {
    "text": "a lot easier so what containers did is on these instances you first deploy the",
    "start": "143040",
    "end": "148400"
  },
  {
    "text": "containers and because the containers are very lightweight it's very easy to deploy",
    "start": "148400",
    "end": "154239"
  },
  {
    "text": "these things it's very easy to manage the functionality of these containers and then on these containers",
    "start": "154239",
    "end": "160280"
  },
  {
    "text": "is where you run your actual application code and you can decide what you really want to do here whether you want to use",
    "start": "160280",
    "end": "166080"
  },
  {
    "text": "containers for deploy uh for individual functions or individual applications or",
    "start": "166080",
    "end": "171800"
  },
  {
    "text": "you want to use containers for segregating your applications where one application should talk to another one",
    "start": "171800",
    "end": "178680"
  },
  {
    "text": "but the third one should be an independ dependent F or you're using containers only for deployment where the whole",
    "start": "178680",
    "end": "184959"
  },
  {
    "text": "application still works the exact way it used to before but because the containers are much easier to deploy you",
    "start": "184959",
    "end": "190400"
  },
  {
    "text": "package everything into a container and then use the tools available for container deployment and",
    "start": "190400",
    "end": "196000"
  },
  {
    "text": "management but if you really think of it while this makes life a lot easier as",
    "start": "196000",
    "end": "201799"
  },
  {
    "text": "our CTO mentioned no servers is easier to manage than no servers all of this is still as an",
    "start": "201799",
    "end": "207640"
  },
  {
    "text": "overhead for application developers it's easier but what you really care about here is",
    "start": "207640",
    "end": "212879"
  },
  {
    "text": "the application code so imagine an environment where you have the infrastructure and the application code",
    "start": "212879",
    "end": "219720"
  },
  {
    "text": "is just running there and you don't have to worry about what's underne what's below there you don't care about what else is running on that on the same",
    "start": "219720",
    "end": "225879"
  },
  {
    "text": "infrastructure the way you don't care about what else is on Amazon S3 buckets all you care about is that when",
    "start": "225879",
    "end": "233000"
  },
  {
    "text": "your application needs to scale there should be room for your application and then the things like Security",
    "start": "233000",
    "end": "238120"
  },
  {
    "text": "scalability Management deployment all of these are taken care of by the service that's effectively what AWS",
    "start": "238120",
    "end": "244599"
  },
  {
    "text": "Lambda is AWS Lambda was built on these principles so the AWS Lambda is a",
    "start": "244599",
    "end": "251040"
  },
  {
    "text": "serverless event driven service what event driven means here is that the",
    "start": "251040",
    "end": "256120"
  },
  {
    "text": "infrastructure beneath the containers is automatically scaled up and down on your behalf by the system whenever there's an",
    "start": "256120",
    "end": "263400"
  },
  {
    "text": "event that needs to be processed this this is makes Lambda very useful to build microservices without",
    "start": "263400",
    "end": "269800"
  },
  {
    "text": "the servers to talk about few benefits of AWS",
    "start": "269800",
    "end": "275039"
  },
  {
    "start": "274000",
    "end": "274000"
  },
  {
    "text": "Lambda one as we mentioned it's serverless which means all of the infrastructure management all of the",
    "start": "275039",
    "end": "281919"
  },
  {
    "text": "deployment to pain all of the work that you need to do to make sure your application works in a scalable reliable",
    "start": "281919",
    "end": "288919"
  },
  {
    "text": "durable manner is taken care of by the system second is event driven scale the",
    "start": "288919",
    "end": "296240"
  },
  {
    "text": "benefit of Lambda is that if it's going to if there's going to be an infrastructure Management in the in the behind the",
    "start": "296240",
    "end": "302120"
  },
  {
    "text": "scenes for each event this means that Lambda will automatically match the",
    "start": "302120",
    "end": "307280"
  },
  {
    "text": "incoming rate of events for you and no matter what that scale of events is there'll always be just the right amount",
    "start": "307280",
    "end": "314199"
  },
  {
    "text": "of capacity just the right amount of number of functions to to execute those",
    "start": "314199",
    "end": "319319"
  },
  {
    "text": "events this takes away all the pain of ever being underprovision or over provisioned because there is no",
    "start": "319319",
    "end": "324919"
  },
  {
    "text": "provisioning your event is what triggers the system to provision the capacity just to Pro that",
    "start": "324919",
    "end": "331000"
  },
  {
    "text": "event the third is that Lambda offers subsec billing which means that you don't have",
    "start": "331000",
    "end": "336319"
  },
  {
    "text": "to worry about how long your application runs you or what you're going to do when the application is not running because",
    "start": "336319",
    "end": "343039"
  },
  {
    "text": "you don't have to pay for it when it's not running if an individual event takes 16.7 seconds to process you just pay for",
    "start": "343039",
    "end": "350360"
  },
  {
    "text": "16.7 seconds you don't have to worry about the idle time where you are waiting for some something to happen so",
    "start": "350360",
    "end": "356840"
  },
  {
    "text": "effectively now with these two things you are getting 100% utilization and your application is tracking exactly",
    "start": "356840",
    "end": "362680"
  },
  {
    "text": "only the amount of time that you're it's actually",
    "start": "362680",
    "end": "367120"
  },
  {
    "text": "running talk of a few capabilities about Lambda the way Lambda works is you just",
    "start": "367919",
    "end": "373360"
  },
  {
    "start": "369000",
    "end": "369000"
  },
  {
    "text": "bring your own code we support nodejs and Java and as",
    "start": "373360",
    "end": "378400"
  },
  {
    "text": "of today morning for those of you who heard the announcements we also support Python 2.7 the goal of Lambda here is to make",
    "start": "378400",
    "end": "385280"
  },
  {
    "text": "it a completely polyot service which means we want it to have be a system which supports multiple languages so for",
    "start": "385280",
    "end": "391919"
  },
  {
    "text": "users you don't really have to learn a new new language you'll be the language which you already are comfortable in",
    "start": "391919",
    "end": "397400"
  },
  {
    "text": "just bring that code it's stock stock node it's stock uh python the code which",
    "start": "397400",
    "end": "403240"
  },
  {
    "text": "you already have running just Port that over to a Lambda function and you're good to go we have a very simple resource model",
    "start": "403240",
    "end": "411319"
  },
  {
    "text": "so unlike a lot of infrastructure provisioning where you have to think of what memory and what CPUs and what exact",
    "start": "411319",
    "end": "417879"
  },
  {
    "text": "instance type or what uh what configuration you want but there's only one thing which you need to configure",
    "start": "417879",
    "end": "423960"
  },
  {
    "text": "for a Lambda function and that's the amount of memory and think of that as a power level for the Lambda function we",
    "start": "423960",
    "end": "430000"
  },
  {
    "text": "allocate CPU and IO proportional to the memory that you that you allocate which means a 256 MB function will have twice",
    "start": "430000",
    "end": "437840"
  },
  {
    "text": "the CPU as much as as a 128 MB function so it makes it very easy for",
    "start": "437840",
    "end": "443879"
  },
  {
    "text": "developers to decide how much power power levels do they want and in most cases because the pricing is in gbcs",
    "start": "443879",
    "end": "451160"
  },
  {
    "text": "it's a multiplier of how much you how much power you provision times how long it ran for all CPU and memory bound",
    "start": "451160",
    "end": "458759"
  },
  {
    "text": "applications provisioning more is going to make your system run faster so it's going to take fewer seconds so it",
    "start": "458759",
    "end": "464240"
  },
  {
    "text": "doesn't really matter in terms of your economics and might as well just set the highest memory that you want so that you",
    "start": "464240",
    "end": "470800"
  },
  {
    "text": "finish processing your events faster we have flexible invocation parts for Lambda which means that you can",
    "start": "470800",
    "end": "477159"
  },
  {
    "text": "trigger Lambda functions or invoke Lambda function functions either synchronously or",
    "start": "477159",
    "end": "483000"
  },
  {
    "text": "asynchronously you can invoke them either directly from the CLI or an A through an API or you can hook up Lambda",
    "start": "483000",
    "end": "489479"
  },
  {
    "text": "functions to process existing AWS Service events and what this helps with is that",
    "start": "489479",
    "end": "496680"
  },
  {
    "text": "you no longer have to build a lot of those connections and pipelines to uh transfer the data from one service to",
    "start": "496680",
    "end": "503159"
  },
  {
    "text": "another Lambda will automatically invoke whenever there's some some new data to compute Lambda uses IM am roles or",
    "start": "503159",
    "end": "510919"
  },
  {
    "text": "identity access management roles under the hoods so you can have very fine grained gr and granular permissions that",
    "start": "510919",
    "end": "517599"
  },
  {
    "text": "you can grant to your Lambda function you can say that my function should only be able to talk to this S3 bucket in",
    "start": "517599",
    "end": "523959"
  },
  {
    "text": "this region and it can make it very effective to uh control what your Lambda",
    "start": "523959",
    "end": "529360"
  },
  {
    "text": "function can do and also we heard in the in today's announcements that Lambda functions can now also be talk to",
    "start": "529360",
    "end": "537040"
  },
  {
    "text": "resources behind your vpcs that featur is coming so which will give it give you even more control over what your Lambda",
    "start": "537040",
    "end": "543560"
  },
  {
    "text": "function can and cannot do for authoring of Lambda functions you",
    "start": "543560",
    "end": "551600"
  },
  {
    "text": "can author functions the same way you would author them in your own environment you can make use of threads and processes and forks and you can",
    "start": "551600",
    "end": "558839"
  },
  {
    "text": "bring in all of your package libraries and binaries you can uh you can even uh",
    "start": "558839",
    "end": "565040"
  },
  {
    "text": "make use of all of the programming constructs which you are very used to in your standard environments",
    "start": "565040",
    "end": "571079"
  },
  {
    "text": "for deployment we have different deployment options you can either uh edit directly inside the AWS console or",
    "start": "571079",
    "end": "578519"
  },
  {
    "text": "you can upload a zip file and which has all of the package dependencies which you which you need plus we are trying to",
    "start": "578519",
    "end": "584399"
  },
  {
    "text": "expand our partner ecosystem in this space to get in more plugins and more controls so that the existing tools",
    "start": "584399",
    "end": "590839"
  },
  {
    "text": "which you have can easily be plug plugged in for deployment we use Amazon Cloud watch for",
    "start": "590839",
    "end": "597160"
  },
  {
    "text": "for monitoring and logging so we have lots of metrics which we publish to Amazon cloudwatch as well as all of the",
    "start": "597160",
    "end": "602800"
  },
  {
    "text": "Lambda system and user logs go to cloudwatch logs but even in this space we are",
    "start": "602800",
    "end": "607920"
  },
  {
    "text": "trying to be more open and we have different partners in which you can who you can use for logging of Lambda",
    "start": "607920",
    "end": "613600"
  },
  {
    "text": "functions the thing here to note is that Lambda functions are stateless and this allows us to",
    "start": "613600",
    "end": "619200"
  },
  {
    "text": "horizontally scale out very quickly to match the rate of incoming",
    "start": "619200",
    "end": "624600"
  },
  {
    "text": "requests but this also means that you can't really log into the box and try to SSH into what's going on because it's a",
    "start": "624920",
    "end": "631720"
  },
  {
    "text": "stateless function we're building out the partner ecosystem as we said we have lots of we",
    "start": "631720",
    "end": "637720"
  },
  {
    "start": "635000",
    "end": "635000"
  },
  {
    "text": "have lots of partners for deployment for extension of what Lambda can do and for logging and this list we are planning to",
    "start": "637720",
    "end": "643800"
  },
  {
    "text": "grow over time if you go to the AWS Lambda console we have a concept called blueprints which is basically a sample",
    "start": "643800",
    "end": "650200"
  },
  {
    "text": "template which you can quickly get started with as of today we now have three partner blueprints so you can also",
    "start": "650200",
    "end": "656480"
  },
  {
    "text": "quickly get hooked up into what Partners what the partner ecosystem benefits can bring",
    "start": "656480",
    "end": "662040"
  },
  {
    "text": "you so that's about Lambda but let's talk about what architecture patterns",
    "start": "662040",
    "end": "667399"
  },
  {
    "text": "how architecture patterns will be different because of AWS Lambda so let's take this old world the",
    "start": "667399",
    "end": "673000"
  },
  {
    "start": "672000",
    "end": "672000"
  },
  {
    "text": "scenario where you you trying to process some data data with servers and that source of data could be",
    "start": "673000",
    "end": "679760"
  },
  {
    "text": "anything it could be an S3 objects it could be Kinesis records it could be Dy dyb tables think of anything where you",
    "start": "679760",
    "end": "686360"
  },
  {
    "text": "are bringing data to the cloud and you want to process that data so you have this one server right but",
    "start": "686360",
    "end": "694000"
  },
  {
    "text": "then one is not enough so you're going to have multiple servers to process your load and you're going to have things across",
    "start": "694000",
    "end": "700200"
  },
  {
    "text": "A's now that you have multiple servers it can't directly talk to the source so you're going to have to have a queue in",
    "start": "700200",
    "end": "705920"
  },
  {
    "text": "between the Lambda and then the uh servers will actually pull the data off the queue if you have cues then you then",
    "start": "705920",
    "end": "713880"
  },
  {
    "text": "you need to have something which actually listens to the event source and publishes to the queue",
    "start": "713880",
    "end": "719880"
  },
  {
    "text": "and that listeners and pollers also need to be a separate Fleet because you don't want that to be in a single a you want",
    "start": "719880",
    "end": "725560"
  },
  {
    "text": "that to be autoscaled and the fleet of workers that you have also need to go through a whole",
    "start": "725560",
    "end": "732320"
  },
  {
    "text": "range of Auto scaling depending on how much load your load you have on the system you're going to have things like",
    "start": "732320",
    "end": "738120"
  },
  {
    "text": "cross a replication so that if one a goes down if in in in the worst case scenario you you want your application",
    "start": "738120",
    "end": "744240"
  },
  {
    "text": "to still persist you're going to have to think of load balancing to distribute the traffic across of these",
    "start": "744240",
    "end": "750399"
  },
  {
    "text": "workers so what started off is a very simple application I want to process data is now this whole complicated setup",
    "start": "750399",
    "end": "757600"
  },
  {
    "text": "which you now need to manage and remember as a developer what you really care about is the application",
    "start": "757600",
    "end": "763600"
  },
  {
    "text": "code that's running on these servers everything else on this screen is an overhead for",
    "start": "763600",
    "end": "769240"
  },
  {
    "text": "you so let's see let's look at how that architecture would be different in a serverless environment you have the same source of",
    "start": "769240",
    "end": "776279"
  },
  {
    "text": "data you attach that to a Lambda function and that's it Lambda does the listening the polling",
    "start": "776279",
    "end": "784000"
  },
  {
    "text": "the queuing the auto scaling the load balancing and all of that is done by the system all you have to do is bring that",
    "start": "784000",
    "end": "790720"
  },
  {
    "text": "application code to the to to L to Lambda and let Lambda handle the rest of it to give an example of what I just",
    "start": "790720",
    "end": "797680"
  },
  {
    "text": "talked about I'd like to invite J on stage to give us a quick intro",
    "start": "797680",
    "end": "804120"
  },
  {
    "text": "here okay uhom it just switched to the other",
    "start": "809240",
    "end": "819720"
  },
  {
    "text": "laptop while while we're pulling those slides back up my name is Jay sandhouse I'm the CTO of play on Sports play on",
    "start": "819720",
    "end": "826760"
  },
  {
    "text": "Sports is a high school sports Media company we stream live video of high",
    "start": "826760",
    "end": "832880"
  },
  {
    "text": "school sports a lot of it about 50,000 events a year uh we stream that video",
    "start": "832880",
    "end": "837959"
  },
  {
    "start": "836000",
    "end": "836000"
  },
  {
    "text": "whenever high school student students are playing sports or doing other events",
    "start": "837959",
    "end": "843079"
  },
  {
    "text": "everything from morning announcements to football games on a Friday night when football's played in America um one of",
    "start": "843079",
    "end": "850120"
  },
  {
    "text": "the things we offer to schools are tools to produce a professional streaming broadcast with no real expertise or",
    "start": "850120",
    "end": "857440"
  },
  {
    "text": "experience in streaming or broadcast production so students can learn about that in school it's really a broadcast",
    "start": "857440",
    "end": "864320"
  },
  {
    "text": "Production Studio shrunk down to a box we have a slightly different use case",
    "start": "864320",
    "end": "869920"
  },
  {
    "text": "than a typical Media Company typically a media company would have a small number of live streams or Live Events and a",
    "start": "869920",
    "end": "876839"
  },
  {
    "text": "very large audience for each one of those events because we are giving these",
    "start": "876839",
    "end": "882199"
  },
  {
    "text": "tools to uh schools all over the country we have a different use case we will",
    "start": "882199",
    "end": "887519"
  },
  {
    "text": "have a lot of live events going on at the same time so a high number of streams coming in and a uh slightly",
    "start": "887519",
    "end": "894240"
  },
  {
    "text": "smaller audience for each one of those in aggregate our peak hours maybe would look like like about 300 Live Events all",
    "start": "894240",
    "end": "901680"
  },
  {
    "text": "going on at the same time with perhaps 20,000 people at any given minute watching those events so we have a",
    "start": "901680",
    "end": "907800"
  },
  {
    "text": "particular challenge we need to transcode and work with a lot of live",
    "start": "907800",
    "end": "912839"
  },
  {
    "text": "video all at once uh so we need to be able to take all of those 300 streams",
    "start": "912839",
    "end": "919759"
  },
  {
    "text": "qual perform quality service and really get those out to a lot of people all at the same time things is still going the",
    "start": "919759",
    "end": "926600"
  },
  {
    "text": "wrong way all right so our architecture uh uh historically for doing this has",
    "start": "926600",
    "end": "933920"
  },
  {
    "text": "been uh looks probably like what you would expect a video processing architecture to look like we take rtmp",
    "start": "933920",
    "end": "940680"
  },
  {
    "text": "video that's Flash video encoded in the field we bring that back uh through our",
    "start": "940680",
    "end": "946040"
  },
  {
    "text": "CDN and then we have various pools of servers performing work on that video",
    "start": "946040",
    "end": "951519"
  },
  {
    "text": "there's a pool of servers that's taking that video and changing it from rtmp to",
    "start": "951519",
    "end": "957040"
  },
  {
    "text": "something called hls that stands for HTTP live streaming it's what video uh",
    "start": "957040",
    "end": "962880"
  },
  {
    "text": "has to look like to work on your iPhone and some other mobile devices uh that's very uh Network intensive but not very",
    "start": "962880",
    "end": "969839"
  },
  {
    "text": "CPU intensive we have a whole other pool of servers that's taking that video and",
    "start": "969839",
    "end": "975800"
  },
  {
    "text": "transcoding it transcoding it means taking a high bit rate stream and turning that into lower bit rate streams",
    "start": "975800",
    "end": "982160"
  },
  {
    "text": "so people who are uh bandwidth constrained for whatever reason are able to watch that video that's very CPU",
    "start": "982160",
    "end": "988560"
  },
  {
    "text": "intense iive as well as Network intensive we have a whole other set of servers that are recording that video",
    "start": "988560",
    "end": "994519"
  },
  {
    "text": "writing it to disk and making it available for a OnDemand workflow that takes over when the live streaming video",
    "start": "994519",
    "end": "1001560"
  },
  {
    "text": "event is done and uh each one of those pools of servers uh has to be managed",
    "start": "1001560",
    "end": "1007040"
  },
  {
    "text": "and scaled and as all the uh traditional challenges you'd have with managing something like that there are a handful",
    "start": "1007040",
    "end": "1012880"
  },
  {
    "text": "of other services around this to actually manage that video so in total there are probably five different uh",
    "start": "1012880",
    "end": "1019920"
  },
  {
    "text": "pools of servers that are running at any given time so one of the um one of the things",
    "start": "1019920",
    "end": "1027438"
  },
  {
    "start": "1023000",
    "end": "1023000"
  },
  {
    "text": "that we really want to do is move away from rtmp or Flash video to hls video",
    "start": "1027439",
    "end": "1033000"
  },
  {
    "text": "from the source and hls video is very HTTP friendly and if we can move to a",
    "start": "1033000",
    "end": "1038760"
  },
  {
    "text": "model where we're just streaming uh hls segments instead of rtmp segments it'll still be live it'll still look like live",
    "start": "1038760",
    "end": "1045520"
  },
  {
    "text": "video to the end user but we will get a lot of benefit from doing that uh the first is we can",
    "start": "1045520",
    "end": "1052640"
  },
  {
    "text": "ideally minimize our operational overhead we're a startup small company we have a very small Ops Team most of",
    "start": "1052640",
    "end": "1059559"
  },
  {
    "text": "that work Falls onto our development team we don't want to spend a lot of time on operations we also want to add",
    "start": "1059559",
    "end": "1066080"
  },
  {
    "text": "features that are hard for us to add right now so it's uh very expensive to",
    "start": "1066080",
    "end": "1072240"
  },
  {
    "text": "do adapted bit rate streaming because it's CPU intensive and that really adds up when you're doing 300 events at the",
    "start": "1072240",
    "end": "1079159"
  },
  {
    "text": "same time so w with hls there may be a way that we can do that less expensively",
    "start": "1079159",
    "end": "1085280"
  },
  {
    "text": "it's also really important for us to add features like mid roll advertising because our audience is watching our",
    "start": "1085280",
    "end": "1090880"
  },
  {
    "text": "content for hours and right now we can only run ads the beginning of that experience when it starts uh we",
    "start": "1090880",
    "end": "1097520"
  },
  {
    "text": "obviously want to minimize expense we want a cleaner workflow if we can have it getting back to Ops and uh possibly",
    "start": "1097520",
    "end": "1105360"
  },
  {
    "text": "most importantly we really want to keep our precious development resour sources focused on video quality and the",
    "start": "1105360",
    "end": "1112159"
  },
  {
    "text": "consumer experience we don't want to be spending a lot of time massaging uh the",
    "start": "1112159",
    "end": "1117960"
  },
  {
    "text": "process we really want to focus on the domain specific issue so we're moving",
    "start": "1117960",
    "end": "1123600"
  },
  {
    "text": "from uh the server based architecture I showed you a minute ago to a new architecture based on Lambda and this is",
    "start": "1123600",
    "end": "1131000"
  },
  {
    "start": "1128000",
    "end": "1128000"
  },
  {
    "text": "something that we are testing and using today this isn't something that we're planning to go to in the future this is",
    "start": "1131000",
    "end": "1137000"
  },
  {
    "text": "something that we've actually built out and we're trying now and so in this new architecture what happens is uh out in",
    "start": "1137000",
    "end": "1144559"
  },
  {
    "text": "the field where the video is being encoded live it's just written to disk uh in 10c chunks about 10c chunks and",
    "start": "1144559",
    "end": "1153120"
  },
  {
    "text": "those pieces are then pushed up through cloudfront to S3 and when they arrive in",
    "start": "1153120",
    "end": "1158640"
  },
  {
    "text": "S3 in a bucket that causes a trigger uh to be fired that notifies Lambda that",
    "start": "1158640",
    "end": "1165280"
  },
  {
    "text": "there's now a new piece of video to process uh from that point we then uh have a",
    "start": "1165280",
    "end": "1172679"
  },
  {
    "text": "single Lambda function that listens for that notification and then fans out to what are right now six additional Lambda",
    "start": "1172679",
    "end": "1180400"
  },
  {
    "text": "functions that pick up that video and perform different tasks transcode it to",
    "start": "1180400",
    "end": "1185640"
  },
  {
    "text": "a different bit rate perform Quality Service analysis on it make a thumbnail",
    "start": "1185640",
    "end": "1190840"
  },
  {
    "text": "from that video and ultimately move it to an external bucket where it can be served to Consumers to view in a in a",
    "start": "1190840",
    "end": "1197600"
  },
  {
    "text": "live experience um those Lambda functions we have six of",
    "start": "1197600",
    "end": "1205600"
  },
  {
    "text": "them here uh right now one of the great things about this architecture is as we decide we want to process the video in a",
    "start": "1205600",
    "end": "1213640"
  },
  {
    "text": "new way we can just add an additional Lambda function there's no need to stand up a whole new pool of servers which is",
    "start": "1213640",
    "end": "1219919"
  },
  {
    "text": "what we did in the past when we had a new function or wanted a different capability and didn't want to impact our",
    "start": "1219919",
    "end": "1225039"
  },
  {
    "text": "production environment we can just add another function so if for example we",
    "start": "1225039",
    "end": "1230360"
  },
  {
    "text": "right now it's challenging for us to support some Android devices where there may not be a lot of those devices out",
    "start": "1230360",
    "end": "1236320"
  },
  {
    "text": "there and it's not really cost effective for us to to have a whole new Trans code",
    "start": "1236320",
    "end": "1241400"
  },
  {
    "text": "which might be very CPU and cost intensive just to handle those devices with Lambda what I hope we can do is is",
    "start": "1241400",
    "end": "1247400"
  },
  {
    "text": "we grow this architecture in this environment we can identify those things create targeted jobs for them at a much",
    "start": "1247400",
    "end": "1253720"
  },
  {
    "text": "lower cost uh create a better consumer experience for a larger number of",
    "start": "1253720",
    "end": "1259640"
  },
  {
    "text": "people so what what have we learned so far as we're doing this so the uh",
    "start": "1259640",
    "end": "1264880"
  },
  {
    "start": "1260000",
    "end": "1260000"
  },
  {
    "text": "probably the single greatest takeaway is that Lambda was very easy to use and really worked as expected it was uh we",
    "start": "1264880",
    "end": "1272919"
  },
  {
    "text": "spent almost no time working on the Lambda part of this new architecture uh everything was written in JavaScript uh",
    "start": "1272919",
    "end": "1280640"
  },
  {
    "text": "it looks just like you're writing a small node application we have a compiled binary an application called",
    "start": "1280640",
    "end": "1286960"
  },
  {
    "text": "FFM Peg that's compiled in a separate build path but it's just included in the",
    "start": "1286960",
    "end": "1292159"
  },
  {
    "text": "zip file that Vim mentioned when we upload our actual Lambda job this very straightforward to create this and so",
    "start": "1292159",
    "end": "1299559"
  },
  {
    "text": "instead of spending a lot of time working on uh figuring out the mechanics of this and putting this together we",
    "start": "1299559",
    "end": "1305400"
  },
  {
    "text": "were able to put our energy into the domain specific part of this problem and really focus on video and it's allowed",
    "start": "1305400",
    "end": "1312679"
  },
  {
    "text": "us not only to start building the features that I talked about a little earlier adaptive bit rate streaming midr",
    "start": "1312679",
    "end": "1319000"
  },
  {
    "text": "advertising it's also allowed us to think about video in different ways and start think about new features we might",
    "start": "1319000",
    "end": "1324640"
  },
  {
    "text": "want to add that we weren we didn't really have necessarily the time to think about before we started this conversion process there are still a few",
    "start": "1324640",
    "end": "1332120"
  },
  {
    "text": "open questions for us um right now our experience has been as every Lambda job",
    "start": "1332120",
    "end": "1337919"
  },
  {
    "text": "completes in about the time we would expect it to complete uh as we start to run hundreds of videos through at the",
    "start": "1337919",
    "end": "1345400"
  },
  {
    "text": "same time I expect there are going to be situations where there are failures and I don't think we've completely uh",
    "start": "1345400",
    "end": "1350679"
  },
  {
    "text": "identified how we're going to handle those when that happens so there's an open question about what we do when a Lambda job doesn't complete the way we",
    "start": "1350679",
    "end": "1357919"
  },
  {
    "text": "expected to and we've also learned that a method we use to Fan out the Lambda",
    "start": "1357919",
    "end": "1363000"
  },
  {
    "text": "jobs is probably not the best way to work right now you can only have a single event notification on an S3",
    "start": "1363000",
    "end": "1369400"
  },
  {
    "text": "bucket for uh to fire a Lambda job a single job when uh when any file is",
    "start": "1369400",
    "end": "1376480"
  },
  {
    "text": "written to S3 uh so instead of Fanning out calling one Lambda job and having",
    "start": "1376480",
    "end": "1382120"
  },
  {
    "text": "that call six other Lambda jobs I think we would be better off calling SNS and then we could just subscribe to an snsq",
    "start": "1382120",
    "end": "1389120"
  },
  {
    "text": "so that's another approach that we want to evaluate but uh the the big headline",
    "start": "1389120",
    "end": "1395480"
  },
  {
    "text": "is the cost savings are at least initially appear to be what we thought which is about an order of magnitude",
    "start": "1395480",
    "end": "1400760"
  },
  {
    "text": "over what we were doing previously so this has really uh helped us accomplish",
    "start": "1400760",
    "end": "1405919"
  },
  {
    "text": "our goals of getting developers focused on the domain of saving money of adding new features and minimizing the",
    "start": "1405919",
    "end": "1412960"
  },
  {
    "text": "operations burden so I'll turn it back over to VM for more information about",
    "start": "1412960",
    "end": "1420360"
  },
  {
    "text": "Lambda thank you Jay so from here let's look at some of",
    "start": "1424000",
    "end": "1429640"
  },
  {
    "text": "the real-time data processing architecture patterns and let go deep into what an architecture would look",
    "start": "1429640",
    "end": "1434720"
  },
  {
    "text": "like and what different architectures you could build using AWS Lambda",
    "start": "1434720",
    "end": "1439760"
  },
  {
    "text": "so for the first one let's let's pick the one that J just talked about is how you could do realtime file processing",
    "start": "1439760",
    "end": "1446679"
  },
  {
    "start": "1442000",
    "end": "1442000"
  },
  {
    "text": "workflows with Amazon S3 and AWS Lambda the way this would work is that",
    "start": "1446679",
    "end": "1452799"
  },
  {
    "text": "whenever a new whenever and any S3 uh S3 bucket has a new file uploaded to that",
    "start": "1452799",
    "end": "1460279"
  },
  {
    "text": "S3 recently announced something called S3 event notifications and you can hook up a Lambda function to that S3 object",
    "start": "1460279",
    "end": "1466960"
  },
  {
    "text": "notification and then once you once you get that notification inside of Lambda you kind",
    "start": "1466960",
    "end": "1473480"
  },
  {
    "text": "of it's it's an event that is generated by S3 and that event object is received inside the Lambda function which will",
    "start": "1473480",
    "end": "1479840"
  },
  {
    "text": "automatically invoke the Lambda function there's nothing you need to do especially once you upload the S3 bucket",
    "start": "1479840",
    "end": "1486919"
  },
  {
    "text": "object and because it's a it's your own code you're bringing your own code inside the Lambda function you can",
    "start": "1486919",
    "end": "1493080"
  },
  {
    "text": "choose what you want to do with that code with that F3 object there are lots of applications",
    "start": "1493080",
    "end": "1498720"
  },
  {
    "text": "which are unlocked because of this architecture the one that J mentioned is that you are transcoding the file which",
    "start": "1498720",
    "end": "1505159"
  },
  {
    "text": "you have got into an S3 S3 as an event and then putting it back to another S3",
    "start": "1505159",
    "end": "1510399"
  },
  {
    "text": "bucket but at the same time the same architecture will can be used to create a file index on top of S3 objects as as",
    "start": "1510399",
    "end": "1519240"
  },
  {
    "text": "more files are uploaded you want to create a whole index of which files exist where and just store the URL of",
    "start": "1519240",
    "end": "1524880"
  },
  {
    "text": "that file so that when you want to do a lookup of of all the files in your S3 you don't have to do a list bucket you",
    "start": "1524880",
    "end": "1530880"
  },
  {
    "text": "can just look at this index and see which file is where so that you know exactly which file you're looking for and these are just two examples but",
    "start": "1530880",
    "end": "1538799"
  },
  {
    "text": "think of the different use cases you can unlock with this if you have images which you are uploading to Amazon",
    "start": "1538799",
    "end": "1544679"
  },
  {
    "text": "S3 all of those images can be uh thumbnailed watermarked processed",
    "start": "1544679",
    "end": "1550360"
  },
  {
    "text": "resized and then stored to the other S3 buckets or serve to serve to any other endpoint if you have video files they",
    "start": "1550360",
    "end": "1556520"
  },
  {
    "text": "could be transcoded or cut or or join join with some other file or inter leave",
    "start": "1556520",
    "end": "1562000"
  },
  {
    "text": "an audio to the same video file and do such other use cases if it's just raw data that's coming in if you have like",
    "start": "1562000",
    "end": "1568360"
  },
  {
    "text": "CSV files and you want format conversion you can convert from CSV to Json or any other payloads or for or you might even",
    "start": "1568360",
    "end": "1575240"
  },
  {
    "text": "want to do something like an HTML to a PDF file using some of the open PDF",
    "start": "1575240",
    "end": "1580480"
  },
  {
    "text": "libraries so this is the whole architecture pattern that you're looking at where the S3 event is triggering a",
    "start": "1580480",
    "end": "1585919"
  },
  {
    "text": "Lambda function and that Lambda function go and do some ACT do the processing",
    "start": "1585919",
    "end": "1591440"
  },
  {
    "text": "that you wanted to do on your object so J mentioned that he uses FFM peg in in in uh transcoding his video",
    "start": "1591440",
    "end": "1599480"
  },
  {
    "text": "applications so let's see what that code would look like I don't want to do a full walk through of the code but let me",
    "start": "1599480",
    "end": "1605880"
  },
  {
    "text": "just give you the few a few highlights so I just include a few binaries or a few packages npm modules",
    "start": "1605880",
    "end": "1613159"
  },
  {
    "text": "inside the Lambda function and I set up some variables and all of these are VAR lables are just to",
    "start": "1613159",
    "end": "1618960"
  },
  {
    "text": "say what the input file should be and what the output file should be I also changed the name of the input",
    "start": "1618960",
    "end": "1624919"
  },
  {
    "text": "and output buckets to make sure that I'm not putting the files back to the same bucket then I serialize the steps",
    "start": "1624919",
    "end": "1631360"
  },
  {
    "text": "because node is an asynchronous language I want to have a Serial executional steps so I use uh asyn waterfall if",
    "start": "1631360",
    "end": "1637679"
  },
  {
    "text": "you're writing something in Java or in Python you probably don't even need to do this so from there I do a small series",
    "start": "1637679",
    "end": "1645480"
  },
  {
    "text": "of steps because the event object that I get is going to have the metadata of the file I'm going to use the metadata from",
    "start": "1645480",
    "end": "1652360"
  },
  {
    "text": "that file to actually download the full object I I I get that file from S3 I",
    "start": "1652360",
    "end": "1658840"
  },
  {
    "text": "write that file to the local disk the FFM library that I'm I have",
    "start": "1658840",
    "end": "1664679"
  },
  {
    "text": "which isn't I also include in the same zip file that has the the the Lambda function and now I can execute that FFM",
    "start": "1664679",
    "end": "1672159"
  },
  {
    "text": "Peg as an exact option therefore forking off a process that goes and do does this",
    "start": "1672159",
    "end": "1677600"
  },
  {
    "text": "actual trans coding that FFM Peg will create the output file what I do next is I read",
    "start": "1677600",
    "end": "1683640"
  },
  {
    "text": "from that output file and upload that object to to the output S3 bucket so let's see what that would look",
    "start": "1683640",
    "end": "1690519"
  },
  {
    "text": "like on the",
    "start": "1690519",
    "end": "1693159"
  },
  {
    "text": "console so this is the Lambda function which I have created here uh I'm calling it demo S3 S3 video",
    "start": "1695880",
    "end": "1703960"
  },
  {
    "text": "transcode uh and then what will happen is that know if I look at the event sources of this I have the S S3 bucket I",
    "start": "1705399",
    "end": "1712840"
  },
  {
    "text": "had named as the event source of",
    "start": "1712840",
    "end": "1717120"
  },
  {
    "text": "that sorry",
    "start": "1722279",
    "end": "1726279"
  },
  {
    "text": "sorry let me start over this is the video file that I uh this is the uh Lambda function that I have",
    "start": "1755480",
    "end": "1763120"
  },
  {
    "text": "created and uh so in this Lambda function if you see the event sources I",
    "start": "1763120",
    "end": "1768240"
  },
  {
    "text": "have included the S3 bucket name my original bucket as an event source so",
    "start": "1768240",
    "end": "1773760"
  },
  {
    "text": "what's going to happen is that whenever a file is uploaded to this bucket as you can see that bucket is empty right now",
    "start": "1773760",
    "end": "1779240"
  },
  {
    "text": "that it's going to automatically triggers the Lambda function Lambda function will go and copy that image",
    "start": "1779240",
    "end": "1785320"
  },
  {
    "text": "after transcoding it to a different bucket and if you saw the code I I was transcoding from AVI files to MP4 files",
    "start": "1785320",
    "end": "1793120"
  },
  {
    "text": "so in this I upload an avi file in the back end whenever that file upload",
    "start": "1793120",
    "end": "1798240"
  },
  {
    "text": "process is completed I also had specified through the Event Source mapping that uh it should trigger the",
    "start": "1798240",
    "end": "1804360"
  },
  {
    "text": "Lambda function as you can see as this file gets uploaded what will happen is that that Lambda function will be invoked and",
    "start": "1804360",
    "end": "1811640"
  },
  {
    "text": "the metadata of the object is going to get passed through the Lambda function Lambda function will transcod it and",
    "start": "1811640",
    "end": "1817919"
  },
  {
    "text": "output to the S3 bucket to the uh output S3 bucket as you can see that file is",
    "start": "1817919",
    "end": "1823600"
  },
  {
    "text": "showed up there when when you refresh the page and the benefit of this application",
    "start": "1823600",
    "end": "1829159"
  },
  {
    "text": "is that while they showed how you could transcod one file the benefit that Lambda brings to the picture is that",
    "start": "1829159",
    "end": "1835679"
  },
  {
    "text": "there is no difference between",
    "start": "1835679",
    "end": "1839158"
  },
  {
    "text": "a there's no difference between having your",
    "start": "1841679",
    "end": "1846880"
  },
  {
    "text": "uh between having the one function running the exact same source code with",
    "start": "1849279",
    "end": "1854679"
  },
  {
    "text": "absolute no changes to the system anywhere would also work if instead of one file I I had uploaded 10,000 files",
    "start": "1854679",
    "end": "1862000"
  },
  {
    "text": "what would have happened is that would have gone and invoked 10,000 Lambda functions and all of those output",
    "start": "1862000",
    "end": "1867200"
  },
  {
    "text": "functions would have been put to the output bucket so you don't have to worry about scalability here and just with these 50",
    "start": "1867200",
    "end": "1873760"
  },
  {
    "text": "60 odd lines of code you built a whole transcoding application which will now process all of your life of your s files",
    "start": "1873760",
    "end": "1881159"
  },
  {
    "text": "uh in a real-time scenario and output them to another",
    "start": "1881159",
    "end": "1886240"
  },
  {
    "text": "bucket so let's look at some other types of work uh architecture patterns so we talked about how you",
    "start": "1886519",
    "end": "1893279"
  },
  {
    "text": "could process files but Lambda you can also process streams of data Amazon Kinesis is a is a",
    "start": "1893279",
    "end": "1900000"
  },
  {
    "text": "service which allows you to man bu uh manage and manage streamings data into the into the cloud so if you have an",
    "start": "1900000",
    "end": "1907320"
  },
  {
    "text": "Amazon Kinesis stream the architecture would look something very similar is",
    "start": "1907320",
    "end": "1913240"
  },
  {
    "text": "that whenever new records are available on the stream Lambda is going to automatic Al go and pick up those",
    "start": "1913240",
    "end": "1918919"
  },
  {
    "start": "1914000",
    "end": "1914000"
  },
  {
    "text": "records for you if you set up that Event Source mapping and then again once you have that event event data instead of Lambda",
    "start": "1918919",
    "end": "1925399"
  },
  {
    "text": "function you could run different types of applications on that stream of data",
    "start": "1925399",
    "end": "1930600"
  },
  {
    "text": "you could either compress that stream and push it to Amazon uh Amazon red shift we have a new service which we ANC",
    "start": "1930600",
    "end": "1936919"
  },
  {
    "text": "today called fire hose which does a lot of these things for you but if you want to have any sort of custom processing",
    "start": "1936919",
    "end": "1942159"
  },
  {
    "text": "which is not supported by uh the standard set of libraries available you want to process only specific",
    "start": "1942159",
    "end": "1949120"
  },
  {
    "text": "information and upload that to Red shift that those are types of things which you could which you can run with this",
    "start": "1949120",
    "end": "1955120"
  },
  {
    "text": "application for example you want to say I have my stream of data coming in which is my metering records for my service or",
    "start": "1955120",
    "end": "1961760"
  },
  {
    "text": "it's a clickstream data or it's a social media feed and you don't want to upload everything you want to upload only an",
    "start": "1961760",
    "end": "1967799"
  },
  {
    "text": "aggregate of some of the information available the information coming in is literally every record and what you want",
    "start": "1967799",
    "end": "1974480"
  },
  {
    "text": "is only every 5 minute granularity of of data compressed together when you push it to Red shift for long-term archival",
    "start": "1974480",
    "end": "1981000"
  },
  {
    "text": "and storage so those that application can be built very quickly using this uh this",
    "start": "1981000",
    "end": "1987120"
  },
  {
    "text": "architecture similarly if you want to run some some sort of uh auditing on your uh incoming stream of data where",
    "start": "1987120",
    "end": "1994000"
  },
  {
    "text": "you have all of the social media activity which you are ingesting into red shift but you only want to filter some specific patterns and then get",
    "start": "1994000",
    "end": "2001159"
  },
  {
    "text": "notified whenever that pattern is found in in in the Kinesis stream you could have that pattern match algorithm run",
    "start": "2001159",
    "end": "2007480"
  },
  {
    "text": "inside the Lambda function and whenever the the match is found it will push the uh notification",
    "start": "2007480",
    "end": "2013440"
  },
  {
    "text": "to S3 uh Amazon s s topic a third and similar architecture",
    "start": "2013440",
    "end": "2019320"
  },
  {
    "start": "2019000",
    "end": "2019000"
  },
  {
    "text": "in this space is how you could build no SQL triggers so everybody is used to the",
    "start": "2019320",
    "end": "2024760"
  },
  {
    "text": "MySQL triggers which are available in a relational database and that is processed on the",
    "start": "2024760",
    "end": "2030279"
  },
  {
    "text": "same same machine as the MySQL server but with Amazon Dynamo DB which is a no",
    "start": "2030279",
    "end": "2036120"
  },
  {
    "text": "SQL offering you get similar trigger functionality in the no SQL environment",
    "start": "2036120",
    "end": "2042000"
  },
  {
    "text": "and the benefit here is that whenever new data is available the trigger doesn't execute on",
    "start": "2042000",
    "end": "2047159"
  },
  {
    "text": "the same box the trigger executes as a Lambda function and therefore you get the",
    "start": "2047159",
    "end": "2052878"
  },
  {
    "text": "change record of each updated object as a lamb on the stream which will which Lambda function can",
    "start": "2052879",
    "end": "2058960"
  },
  {
    "text": "read and now you can process a lot more inside the Lambda function because it's",
    "start": "2058960",
    "end": "2064638"
  },
  {
    "text": "a very asynchronous way of doing it your your table updates and your input and output is not going to slow down just",
    "start": "2064639",
    "end": "2070960"
  },
  {
    "text": "because you have some processing going on in the background Lambda functions can run for all the way up to 5 minutes as of today",
    "start": "2070960",
    "end": "2078118"
  },
  {
    "text": "plus you can have 1.5 GB of uh RAM and the equivalent CPU available for",
    "start": "2078119",
    "end": "2083240"
  },
  {
    "text": "available to you to process a lot of this information so types of things you could",
    "start": "2083240",
    "end": "2088480"
  },
  {
    "text": "do with this you could uh either go and optimize the data and compress it and",
    "start": "2088480",
    "end": "2093599"
  },
  {
    "text": "push it to another Dynamo DB table or you could just replicate the whole table without having any servers to manage",
    "start": "2093599",
    "end": "2099839"
  },
  {
    "text": "therefore giving you a multimaster or at least a master Slayer functionality or again you could",
    "start": "2099839",
    "end": "2106040"
  },
  {
    "text": "aggregate a lot of these records and push it for archival to to Amazon rad shift let's take two examples of these",
    "start": "2106040",
    "end": "2113520"
  },
  {
    "text": "one in in which you have a game score as your first Dynamo DB table and you're",
    "start": "2113520",
    "end": "2119520"
  },
  {
    "text": "attaching a Lambda function to it and you want a separate table which has the top score of the day so what you do is",
    "start": "2119520",
    "end": "2126640"
  },
  {
    "text": "that inside the Dynamo records you just look at is the current record larger than the top the top score if it is then",
    "start": "2126640",
    "end": "2134160"
  },
  {
    "text": "update the top score table if not just ignore that piece of data and let the Dynamo DB table have it second example",
    "start": "2134160",
    "end": "2141200"
  },
  {
    "text": "architecture could be you are trying to build a uh dashboard of the metering",
    "start": "2141200",
    "end": "2146520"
  },
  {
    "text": "activity which you are seeing you could have all the live data feeding into a Dynamo DB",
    "start": "2146520",
    "end": "2152440"
  },
  {
    "text": "table that will show the live view of what's going on",
    "start": "2152440",
    "end": "2158200"
  },
  {
    "text": "and the Lambda function can go and compress that data and store it to an Amazon red shift table so that now red",
    "start": "2158200",
    "end": "2164000"
  },
  {
    "text": "shift has the historical view or a Time series view of all of that all of the information that's occurred but it still",
    "start": "2164000",
    "end": "2169920"
  },
  {
    "text": "is not as large because the data has now been compressed one more architecture I'll",
    "start": "2169920",
    "end": "2176640"
  },
  {
    "text": "show over here is how you could use uh Lambda as a message",
    "start": "2176640",
    "end": "2183280"
  },
  {
    "text": "Handler as with the other three architectures whenever a new uh message is published to an SNS topic by now",
    "start": "2183280",
    "end": "2190560"
  },
  {
    "text": "you'll be familiar with this architecture is that that will trigger the Lambda function and then depending on what that message is you could do",
    "start": "2190560",
    "end": "2197560"
  },
  {
    "text": "different things inside the Lambda function if that message is a true Outreach or a mobile push notification",
    "start": "2197560",
    "end": "2204319"
  },
  {
    "text": "that you are doing you could actually customize that notification and then",
    "start": "2204319",
    "end": "2209920"
  },
  {
    "text": "push it back to another SNS topic so instead of sending the exact same message to 5,000 users you could",
    "start": "2209920",
    "end": "2216760"
  },
  {
    "text": "subscribe 10 15 Lambda functions to that topic each of those Lambda functions will send that message out only to 700",
    "start": "2216760",
    "end": "2223440"
  },
  {
    "text": "to a th000 users but it will be a very customized message because now Lambda can intercept that message customize it",
    "start": "2223440",
    "end": "2229839"
  },
  {
    "text": "and then push it back similarly if you are using SNS as a",
    "start": "2229839",
    "end": "2235240"
  },
  {
    "text": "bus to push data inside of the cloud which lots of customers we have seen",
    "start": "2235240",
    "end": "2240599"
  },
  {
    "text": "often do is have external Services pushed to Amazon SNS then what you could",
    "start": "2240599",
    "end": "2246480"
  },
  {
    "text": "do is use AWS Lambda as a way of pushing all of those records into a Kinesis stream so",
    "start": "2246480",
    "end": "2252960"
  },
  {
    "text": "that you can process that further so you saw the architecture",
    "start": "2252960",
    "end": "2258319"
  },
  {
    "text": "patterns are pretty much similar is that there are different Services which can invoke a Lambda function and then that",
    "start": "2258319",
    "end": "2263480"
  },
  {
    "text": "Lambda function can go and run some processes in the background to execute those events or to process the data that",
    "start": "2263480",
    "end": "2270280"
  },
  {
    "text": "was just flowing in all of these are data processing architectures the one slightly different architecture I'd like",
    "start": "2270280",
    "end": "2276079"
  },
  {
    "text": "to highlight is how you could use Amazon API Gateway to process requests or API",
    "start": "2276079",
    "end": "2282720"
  },
  {
    "start": "2278000",
    "end": "2278000"
  },
  {
    "text": "calls the same way you would process data the difference here is that whenever Amazon API Gateway apis are",
    "start": "2282720",
    "end": "2288640"
  },
  {
    "text": "called instead of an asynchronous push it'll be a synchronous call to the Lambda function and what you could do is you",
    "start": "2288640",
    "end": "2295520"
  },
  {
    "text": "could build a whole crud crud application a complete stateful application to respond to these API",
    "start": "2295520",
    "end": "2303040"
  },
  {
    "text": "calls whether you was Amazon S3 for file type of uh response or you're using a",
    "start": "2303040",
    "end": "2308280"
  },
  {
    "text": "Dynamo DB table for uh Dynamic data responses so with just these three",
    "start": "2308280",
    "end": "2314880"
  },
  {
    "text": "services you can build a complete API on top of uh AWS without having to ever",
    "start": "2314880",
    "end": "2321359"
  },
  {
    "text": "worry about capacity or uh provisioning or infrastructure underneath because all",
    "start": "2321359",
    "end": "2326599"
  },
  {
    "text": "of these are managed Services API Gateway will become the front end of your application it'll do",
    "start": "2326599",
    "end": "2332760"
  },
  {
    "text": "things like throttling and caching and authentication Lambda becomes the",
    "start": "2332760",
    "end": "2337800"
  },
  {
    "text": "compute engine which does the actual processing and is the intelligent part of your application or your",
    "start": "2337800",
    "end": "2343079"
  },
  {
    "text": "API and S3 or Dynamo DB are the stateful data stores because Lambda functions are",
    "start": "2343079",
    "end": "2348359"
  },
  {
    "text": "stateless so with just three applications now you have something which is very easily scalable you never",
    "start": "2348359",
    "end": "2354000"
  },
  {
    "text": "have to worry about uh is this going to match to my incoming rate of requests or not you can only you have to focus only",
    "start": "2354000",
    "end": "2360880"
  },
  {
    "text": "on what the code of the Lambda function is because that's the intelligence that your API brings in",
    "start": "2360880",
    "end": "2368520"
  },
  {
    "text": "and these were just five examples but Lambda is designed to hook up with lots of other AWS",
    "start": "2368520",
    "end": "2374359"
  },
  {
    "start": "2373000",
    "end": "2373000"
  },
  {
    "text": "Services Amazon Echo skills kit uh or the Alexa skills kit is the intelligence",
    "start": "2374359",
    "end": "2380680"
  },
  {
    "text": "behind the echo device so you could trigger a Lambda function using that uh Echo skills kit and therefore have",
    "start": "2380680",
    "end": "2388440"
  },
  {
    "text": "interactive voice recognition applications which you can build on top of the Amazon Echo so instead of the echo having a",
    "start": "2388440",
    "end": "2395319"
  },
  {
    "text": "standard response you can say whenever you speak to an echo device or you say Alexa what's the time right now instead",
    "start": "2395319",
    "end": "2402280"
  },
  {
    "text": "of giving you the standard answer you can have it customized to give you time in a different time zone or it could",
    "start": "2402280",
    "end": "2407880"
  },
  {
    "text": "actually respond to your questions in a different way today morning we announced the",
    "start": "2407880",
    "end": "2413359"
  },
  {
    "text": "availability of Lambda scheduled events so instead of invoking Lambda functions on the occurrence of an event or some",
    "start": "2413359",
    "end": "2420000"
  },
  {
    "text": "presence of some data you can you can invoke the Lambda function on a regular schedule and therefore you can run all a",
    "start": "2420000",
    "end": "2426160"
  },
  {
    "text": "lot of cleanup or batch jobs on top of AWS Lambda especially now that the time",
    "start": "2426160",
    "end": "2431800"
  },
  {
    "text": "duration of a Lambda function is 5 minutes you can actually run ETL applications or your daily uh query",
    "start": "2431800",
    "end": "2438240"
  },
  {
    "text": "metrics on top of AWS Lambda because it can run for 5 minutes and run your query for",
    "start": "2438240",
    "end": "2443480"
  },
  {
    "text": "you iot actions is another one we announced that today morning of the whole AWS iot uh",
    "start": "2443480",
    "end": "2450160"
  },
  {
    "text": "environment so every time there is a new data available in the iot space you can create an action to trigger the Lambda",
    "start": "2450160",
    "end": "2456319"
  },
  {
    "text": "function or many other of these Services SCS is",
    "start": "2456319",
    "end": "2461480"
  },
  {
    "text": "another one which we recently announced where every inbound email can also trigger a Lambda function as an action",
    "start": "2461480",
    "end": "2467400"
  },
  {
    "text": "that you want to do to process that in incoming email so AWS overall is starting to have",
    "start": "2467400",
    "end": "2474520"
  },
  {
    "text": "a lot of these Services built in Lambda hooks to allow you to customize the behavior of those services and to run",
    "start": "2474520",
    "end": "2481119"
  },
  {
    "text": "these specific uh small tasks or even large functions if you may of what you",
    "start": "2481119",
    "end": "2486880"
  },
  {
    "text": "want to do to customize the way the service behaves and that that makes it",
    "start": "2486880",
    "end": "2493119"
  },
  {
    "text": "very powerful to getting get started writing these applications because as we saw with just 60 lines of code if you",
    "start": "2493119",
    "end": "2499359"
  },
  {
    "text": "can write a whole transcoding application think of how how much it how much work it would be just to say for",
    "start": "2499359",
    "end": "2504839"
  },
  {
    "text": "example in a cloud formation resource I want to attach a second dni to an instance that's just going to be three",
    "start": "2504839",
    "end": "2511480"
  },
  {
    "text": "lines of code and all of a sudden you have extended the functionality that cloud formation offers",
    "start": "2511480",
    "end": "2517960"
  },
  {
    "text": "so those are the architecture patterns but let's talk talk about a few tips and tricks of what different things you could do other than the very standard",
    "start": "2518119",
    "end": "2525640"
  },
  {
    "text": "data processing architecture flows so let's think of the first one is auditing cloud trail activity cloud",
    "start": "2525640",
    "end": "2532480"
  },
  {
    "start": "2530000",
    "end": "2530000"
  },
  {
    "text": "trail provides a log of all of the apis that have been called in your account now while Cloud tril doesn't",
    "start": "2532480",
    "end": "2538599"
  },
  {
    "text": "directly feed into a Lambda function cloud trail does output the data to an S3 bucket and you know that once you",
    "start": "2538599",
    "end": "2545240"
  },
  {
    "text": "have the data in S3 bucket you can invoke a Lambda fun function and then you could audit that activity for",
    "start": "2545240",
    "end": "2551040"
  },
  {
    "text": "example you can run these auditing mechanisms and say I want to check if each of the uh apis actually had an user",
    "start": "2551040",
    "end": "2558720"
  },
  {
    "text": "which had permissions the right permissions to have those API calls and if you find some somebody who didn't",
    "start": "2558720",
    "end": "2564040"
  },
  {
    "text": "really have the permissions but still managed to do an API call you want an SNS topic notification to say you want",
    "start": "2564040",
    "end": "2569839"
  },
  {
    "text": "to inform that user to stop calling that API or instead of just a notification",
    "start": "2569839",
    "end": "2575240"
  },
  {
    "text": "you can actually take the whole action right there you can go and change the configuration policies on AWS am and",
    "start": "2575240",
    "end": "2582440"
  },
  {
    "text": "stop that user from ever ever calling that API again similarly how you could use Lambda",
    "start": "2582440",
    "end": "2589760"
  },
  {
    "start": "2588000",
    "end": "2588000"
  },
  {
    "text": "for automated infrastructure management Amazon cloudwatch also has",
    "start": "2589760",
    "end": "2595319"
  },
  {
    "text": "lots of these alarms that you can set up in all of the individual instances and all of the infrastructure on on on",
    "start": "2595319",
    "end": "2602480"
  },
  {
    "text": "Amazon can push and push to cloudwatch their metrics and you can set an alarm on those",
    "start": "2602480",
    "end": "2608400"
  },
  {
    "text": "metrics Now cloudwatch alarms can go and Trigger can can can post to an SNS topic",
    "start": "2608400",
    "end": "2614240"
  },
  {
    "text": "and as you remember once you have the once you have an it in an SNS topic you can invoke a Lambda function and then",
    "start": "2614240",
    "end": "2620640"
  },
  {
    "text": "you can take some action based on that so what you can do is you can call the",
    "start": "2620640",
    "end": "2626160"
  },
  {
    "text": "API based on what alarm you saw so a lot of the alarms what you often get are",
    "start": "2626160",
    "end": "2631440"
  },
  {
    "text": "just notifications and most customers have a standard run book which you execute when you find that alarm that's",
    "start": "2631440",
    "end": "2638160"
  },
  {
    "text": "popping up in your inbox so instead of having that runbook a manual process you could quickly automate it using a Lambda",
    "start": "2638160",
    "end": "2644599"
  },
  {
    "text": "function and it might just be something as simple as spin up a new ec2 instance with some special configuration which an",
    "start": "2644599",
    "end": "2651200"
  },
  {
    "text": "Autos Skilling group wouldn't support or you could extend the functionality for example an Amazon ECS the ec2 container",
    "start": "2651200",
    "end": "2658359"
  },
  {
    "text": "service doesn't have notos Skilling equivalent functionality yet but if you want to do something similar you can go",
    "start": "2658359",
    "end": "2664480"
  },
  {
    "text": "and say ECS start task to spin up a new container inside of your cluster or any of the other infrastructure management",
    "start": "2664480",
    "end": "2670480"
  },
  {
    "text": "apis and we have a we have a blog post I'm not sure if you could see the link but we have a Blog out there on how how",
    "start": "2670480",
    "end": "2677000"
  },
  {
    "text": "you could make this work for you but then note that this is any API",
    "start": "2677000",
    "end": "2682079"
  },
  {
    "text": "call it doesn't have to be limited to AWS apis so let's talk about a way in which",
    "start": "2682079",
    "end": "2689000"
  },
  {
    "start": "2689000",
    "end": "2689000"
  },
  {
    "text": "you can use Lambda to forward data to external endpoints by calling out external",
    "start": "2689000",
    "end": "2694119"
  },
  {
    "text": "apis so whether you are calling in cloudwatch events or you have Autos scaling group rules which are getting",
    "start": "2694119",
    "end": "2700760"
  },
  {
    "text": "triggered as those feed into SNS you could have that push to a Lambda function and then Lambda can go and",
    "start": "2700760",
    "end": "2707720"
  },
  {
    "text": "publish that outside of AWS for example to an if uh VI the maker Channel and",
    "start": "2707720",
    "end": "2713800"
  },
  {
    "text": "again we have a blog post in a GitHub repo of how you could uh how you could make this work for you and this doesn't",
    "start": "2713800",
    "end": "2719640"
  },
  {
    "text": "necessarily have to be ifed this could be any sort of external endpoint you could publish it to a slack channel so",
    "start": "2719640",
    "end": "2725319"
  },
  {
    "text": "that everybody in the team knows what's going on or you can even publish it you can push those events to an private",
    "start": "2725319",
    "end": "2731040"
  },
  {
    "text": "endpoint in your own data center if you want to take some actions in your in your on Prem",
    "start": "2731040",
    "end": "2737920"
  },
  {
    "text": "environment the last Quick hack I'd like to show is how you could use Lambda functions to deploy Lambda",
    "start": "2738680",
    "end": "2746160"
  },
  {
    "start": "2741000",
    "end": "2741000"
  },
  {
    "text": "functions it's Lambda everywhere all the way down so GitHub repo has something called",
    "start": "2746160",
    "end": "2752920"
  },
  {
    "text": "Hooks and you can have an SNS topic which responds to those hooks and as",
    "start": "2752920",
    "end": "2758599"
  },
  {
    "text": "usual once it's an SNS it's in Lambda you do what you want to do with it and that what you want to do can always be",
    "start": "2758599",
    "end": "2764440"
  },
  {
    "text": "lambda. create function so you can have one master function which you can use to",
    "start": "2764440",
    "end": "2769520"
  },
  {
    "text": "synchronize your GitHub with the AWS Lambda and now that we have versioning support in AWS Lambda as of today you",
    "start": "2769520",
    "end": "2775760"
  },
  {
    "text": "can actually synchronize version by version of what's going on so that every time there's a new some new uh repo push",
    "start": "2775760",
    "end": "2781800"
  },
  {
    "text": "push to GitHub you can create a new version of your Lambda function and keep that in sync with your GitHub repo",
    "start": "2781800",
    "end": "2788160"
  },
  {
    "text": "these are just small tips and tricks but I'd like to call out a few others uh Lambda often reuses the containers that",
    "start": "2788160",
    "end": "2795280"
  },
  {
    "start": "2790000",
    "end": "2790000"
  },
  {
    "text": "it uses behind the scenes to execute your code and because the containers are reused anything that you write to Temp",
    "start": "2795280",
    "end": "2802559"
  },
  {
    "text": "can be used as a cache it it won't be a very reliable cache because it it's not necessarily",
    "start": "2802559",
    "end": "2808280"
  },
  {
    "text": "you'll always land on the same container but some of this information you can very quickly cache on the temp space we",
    "start": "2808280",
    "end": "2814119"
  },
  {
    "text": "have a blog post of how you could use that we could run arbitrary binaries the way you saw in my function I had FFM Peg",
    "start": "2814119",
    "end": "2820800"
  },
  {
    "text": "embedded into my system that has nothing to do with Lambda I just embedded into the same same zip file similarly you can",
    "start": "2820800",
    "end": "2826800"
  },
  {
    "text": "embed any other binaries including things which you have compiled in other languages not supported today so if you",
    "start": "2826800",
    "end": "2833640"
  },
  {
    "text": "have a go or a python 3.5 Library which you wouldd like to run in here you can simply embed the whole binary in here",
    "start": "2833640",
    "end": "2839880"
  },
  {
    "text": "and run it as the way I showed in my Lambda function we have Grunt and Jenkins",
    "start": "2839880",
    "end": "2845480"
  },
  {
    "text": "plugins and again those you and look up of how you could use them uh I talked of slack we have another blog post of how",
    "start": "2845480",
    "end": "2852119"
  },
  {
    "text": "you could hook up to slack you can use the you can pass along",
    "start": "2852119",
    "end": "2858359"
  },
  {
    "text": "the event driven benefits of AWS Lambda to an ECS container let's say you have",
    "start": "2858359",
    "end": "2864599"
  },
  {
    "text": "to use Docker in your environment because that's what you're using for your on on premise and you want your AWS",
    "start": "2864599",
    "end": "2870119"
  },
  {
    "text": "to look exact same in terms of deployment as as your on premise environment and use Docker for those for",
    "start": "2870119",
    "end": "2876000"
  },
  {
    "text": "that so while you are letting go of the serverless part of it you can still make",
    "start": "2876000",
    "end": "2881079"
  },
  {
    "text": "use of the event driven part of Lambda where any of the event sources triggering a Lambda function all the",
    "start": "2881079",
    "end": "2886960"
  },
  {
    "text": "Lambda function does is goes and does start Task in ECS therefore giving you a very event",
    "start": "2886960",
    "end": "2893000"
  },
  {
    "text": "driven architecture built right on top of ec2 container service and we have a blog post of how you could do that and",
    "start": "2893000",
    "end": "2899520"
  },
  {
    "text": "finally like the we have a Jaws framework uh we had a talk about talk by them today here not sure if you had an",
    "start": "2899520",
    "end": "2905640"
  },
  {
    "text": "opportunity to look at it but I hope you catch the YouTube video after that but here's a link out to what that uh what",
    "start": "2905640",
    "end": "2911520"
  },
  {
    "text": "their framework looks like and makes it very easy to deploy and manage uh API Gateway and Lambda",
    "start": "2911520",
    "end": "2918200"
  },
  {
    "text": "functions so thank you so much for listening in I hope it was it was some of value to you",
    "start": "2918200",
    "end": "2926520"
  }
]