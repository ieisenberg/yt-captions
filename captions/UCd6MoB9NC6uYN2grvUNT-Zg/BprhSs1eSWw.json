[
  {
    "start": "0",
    "end": "70000"
  },
  {
    "text": "thank you for coming my name is Leo Jadhav ski I'm a principal Solutions Architect here at Amazon Web Services",
    "start": "149",
    "end": "7950"
  },
  {
    "text": "and so for the next hour so we're gonna be talking about advance continues delivery best practices and so basically",
    "start": "7950",
    "end": "15780"
  },
  {
    "text": "if you've ever worried about your continuous delivery pipeline so your pipeline takes your code from being code",
    "start": "15780",
    "end": "22320"
  },
  {
    "text": "to being built tested ultimately all the way to production if you live in fear of it breaking you're definitely not alone",
    "start": "22320",
    "end": "28939"
  },
  {
    "text": "luckily so amazon has over 20 years of experience running mission critical",
    "start": "28939",
    "end": "36090"
  },
  {
    "text": "systems securely at scale and with high availability and over these more than",
    "start": "36090",
    "end": "42750"
  },
  {
    "text": "two decades of experience we've developed a series of best practices and that's what I'm going to be sharing with you today and we'll also focus",
    "start": "42750",
    "end": "49320"
  },
  {
    "text": "specifically on security as well so how to add automated security testing into",
    "start": "49320",
    "end": "56300"
  },
  {
    "text": "your pipelines and so I'm Leo Jadhav ski I'm a Solutions Architect at AWS and I",
    "start": "56300",
    "end": "63300"
  },
  {
    "text": "focus in modern application development and security as well so let's talk about",
    "start": "63300",
    "end": "68670"
  },
  {
    "text": "what you learn in this session so first",
    "start": "68670",
    "end": "74430"
  },
  {
    "start": "70000",
    "end": "70000"
  },
  {
    "text": "we're going to talk about again some of these continuous deployment best practices that we've developed over the",
    "start": "74430",
    "end": "81090"
  },
  {
    "text": "years we're gonna show you how to how and why you should employ these best",
    "start": "81090",
    "end": "87180"
  },
  {
    "text": "practices yourself we're gonna talk about how to make our production",
    "start": "87180",
    "end": "92790"
  },
  {
    "text": "pipelines safer by improving monitoring of production so you can identify issues quickly we're gonna talk about how to",
    "start": "92790",
    "end": "101250"
  },
  {
    "text": "actually do your deploy safely so if you have a failed deploy you can quickly",
    "start": "101250",
    "end": "106470"
  },
  {
    "text": "detect it and stop it before it gets to most of your production fleet and we're",
    "start": "106470",
    "end": "111479"
  },
  {
    "text": "gonna also talk about modifying the behavior of pipeline so that we only differently production when it's safe",
    "start": "111479",
    "end": "117290"
  },
  {
    "text": "and that safety it could be from like is my app up perspective or from a security",
    "start": "117290",
    "end": "122759"
  },
  {
    "text": "perspective as well and so we'll also talk about where and how you can",
    "start": "122759",
    "end": "127950"
  },
  {
    "text": "integrate security testing and your CI CD pipelines so instead of just testing for security",
    "start": "127950",
    "end": "133800"
  },
  {
    "text": "or the fact like doing vulnerability scanning how do you how do you scan for vulnerabilities how do you do static",
    "start": "133800",
    "end": "139800"
  },
  {
    "text": "code analysis how to do other kinds of security safety checks in the process during your deployment pipeline and",
    "start": "139800",
    "end": "147180"
  },
  {
    "text": "lastly I highly encourage you to leave feedback after the post session survey",
    "start": "147180",
    "end": "155070"
  },
  {
    "text": "so if you're wondering these slides will be sent to you at the end of the week I",
    "start": "155070",
    "end": "160440"
  },
  {
    "text": "think either today or at the end of the week and they'll be posted on SlideShare so to get that link you just have to",
    "start": "160440",
    "end": "165630"
  },
  {
    "text": "fill out the survey at the end so before we begin let's just talk about how",
    "start": "165630",
    "end": "170670"
  },
  {
    "text": "continuous delivery works at either base so first of all what does continuous",
    "start": "170670",
    "end": "177360"
  },
  {
    "start": "175000",
    "end": "175000"
  },
  {
    "text": "build ring so if using delivery let's first talk about continuous integration before we",
    "start": "177360",
    "end": "182490"
  },
  {
    "text": "get to canoes over so we've got different phases of your software development process right you've got the",
    "start": "182490",
    "end": "187590"
  },
  {
    "text": "source where where you store your source code you manage it and you write your actual code you then build that source",
    "start": "187590",
    "end": "193920"
  },
  {
    "text": "code so if it's a language that needs to be compiled we're going to run some tests against it you you you do that",
    "start": "193920",
    "end": "199290"
  },
  {
    "text": "build you do a bunch of pre tests so you can pre test meaning like unit tests",
    "start": "199290",
    "end": "205380"
  },
  {
    "text": "this is where you can put some of your security testing in place as well then you do a deploy and so your deployment",
    "start": "205380",
    "end": "212370"
  },
  {
    "text": "you have different stages of deployment you could have a staging environment you could have a production environment you",
    "start": "212370",
    "end": "217980"
  },
  {
    "text": "can have integration testing environment so you deploy to the various stages and you got tests in there as well and then",
    "start": "217980",
    "end": "224160"
  },
  {
    "text": "you do like a post-test of the deal ultimately when you've deployed it everywhere is everything up and running",
    "start": "224160",
    "end": "229200"
  },
  {
    "text": "or do we need to rollback so continuous integration that's when you just have a process that when",
    "start": "229200",
    "end": "236520"
  },
  {
    "text": "there's a commit to the mainline branch of your source code that automatically triggers a build and some basic testings",
    "start": "236520",
    "end": "242520"
  },
  {
    "text": "and unit testing let's say and you're not actually deploying anywhere in continuous integration right you're just building your code and testing your code",
    "start": "242520",
    "end": "249410"
  },
  {
    "text": "then you've got continues delivery so continuous delivery is when you have an automated process that not only builds",
    "start": "249410",
    "end": "256859"
  },
  {
    "text": "and test your code but deploys it ultimately all the way to production now with continuous over you have a",
    "start": "256859",
    "end": "262590"
  },
  {
    "text": "manual gate so you have enough somebody has to hit approve right and what you know so you go and deploy",
    "start": "262590",
    "end": "270010"
  },
  {
    "text": "to everything up to production usually and then somebody goes and make sure that it's a same deploy and and and",
    "start": "270010",
    "end": "275680"
  },
  {
    "text": "check some stuff and then they had approve and then it gets the points production and so this is what most of",
    "start": "275680",
    "end": "281230"
  },
  {
    "text": "our customers are going toward when they want to implement DevOps and you know automate their deployment process and",
    "start": "281230",
    "end": "288669"
  },
  {
    "text": "all that stuff however there's also continuous deployment so continuous deployment is when you go from source to",
    "start": "288669",
    "end": "295030"
  },
  {
    "text": "build to pretest to deploy to post-test ultimately it's production without any kind of manual processes so everything's",
    "start": "295030",
    "end": "301960"
  },
  {
    "text": "automated and so basically as our customers as they tend to work toward continuous delivery they get better at",
    "start": "301960",
    "end": "309010"
  },
  {
    "text": "automating things they get better at their deployment process and so then they achieve operational excellence and",
    "start": "309010",
    "end": "314560"
  },
  {
    "text": "they some of them feel like oh well you know this micro service we feel pretty safe with just going full continuous",
    "start": "314560",
    "end": "320410"
  },
  {
    "text": "deployment here and so so that's typically how it goes and then some our",
    "start": "320410",
    "end": "326380"
  },
  {
    "text": "customers you know continuously deploy everything but whether you do that or not there's no right or wrong answer it just depends on your appetite for risk",
    "start": "326380",
    "end": "333370"
  },
  {
    "text": "and how you feel your automation is and also what industry you're in you know like some industries have compliance",
    "start": "333370",
    "end": "338620"
  },
  {
    "text": "requirements that where you can't do that see we have a question I'm going to actually just just take questions at the",
    "start": "338620",
    "end": "343840"
  },
  {
    "text": "end but we'll have time for questions for sure so let's talk about just some",
    "start": "343840",
    "end": "350080"
  },
  {
    "text": "basic best practices so I'm not going to talk about these too much I'm just we're assuming that you have these practices",
    "start": "350080",
    "end": "356500"
  },
  {
    "text": "in place today if you don't I can point you to some reinvent talk so you can watch as to how to implement them but",
    "start": "356500",
    "end": "364440"
  },
  {
    "text": "we're assuming that you know you should have your source code should be in some kind of version control system for the",
    "start": "364440",
    "end": "370630"
  },
  {
    "start": "366000",
    "end": "366000"
  },
  {
    "text": "purpose of this talk let's assume git but it doesn't have to be good it could be TFS or really anything else we assume",
    "start": "370630",
    "end": "377200"
  },
  {
    "text": "that you've automated your build so you don't have a process where somebody",
    "start": "377200",
    "end": "382630"
  },
  {
    "text": "that's like manually SFTP a zip file them so server right like it's you're using some kind of automated tool you've",
    "start": "382630",
    "end": "389680"
  },
  {
    "text": "automated again your build your voice oh oh demanded your deployment because when",
    "start": "389680",
    "end": "396669"
  },
  {
    "text": "you're deploying to more than one instance at a time or more than one container or more one service function right if you",
    "start": "396669",
    "end": "403110"
  },
  {
    "text": "haven't automated that that's a lot of undifferentiated heavy lifting you have unit tests in place you have some",
    "start": "403110",
    "end": "411810"
  },
  {
    "text": "integration testing in place and you're employing for the purpose of this talk",
    "start": "411810",
    "end": "416970"
  },
  {
    "text": "you're employing continuous delivery so you already have this pipeline in in process and lastly you have an",
    "start": "416970",
    "end": "422460"
  },
  {
    "text": "Operations dashboard so you can see like what's going on what the status of your",
    "start": "422460",
    "end": "427770"
  },
  {
    "text": "deployments are and so for the purpose of this talk we're gonna be talking",
    "start": "427770",
    "end": "434010"
  },
  {
    "text": "about how to do this with a taboos developer tools so but you can implement these principles with Jenkins with open",
    "start": "434010",
    "end": "441300"
  },
  {
    "text": "source tools with partner tools so it's not specific to that just for the purpose of this talk we're gonna use AWS",
    "start": "441300",
    "end": "447240"
  },
  {
    "text": "tools so let's talk about what tools we're gonna be talking about in this talk so for monitoring we're gonna be",
    "start": "447240",
    "end": "454560"
  },
  {
    "start": "449000",
    "end": "449000"
  },
  {
    "text": "using caught Amazon Cloud watch and also called watch has different parts of it right so there's cloud watch which you",
    "start": "454560",
    "end": "460860"
  },
  {
    "text": "used to get metrics so you can set alarms on those metrics to trigger actions so for example we can see if a",
    "start": "460860",
    "end": "468419"
  },
  {
    "text": "deployment pastor failed based off of a cloud watch metric then there's cloud watch events so cloud watch events is",
    "start": "468419",
    "end": "474780"
  },
  {
    "text": "when you get automatically notified when things happen in your AWS account and then you can you can trigger say a",
    "start": "474780",
    "end": "480180"
  },
  {
    "text": "lambda function off a cloud watch them and so we'll talk about that and we're not gonna talk about this too much but you can do cloud much logs as well so",
    "start": "480180",
    "end": "486510"
  },
  {
    "text": "cloud watch logs is centralized logging so you can install an agent on your instances for example and it'll send",
    "start": "486510",
    "end": "492120"
  },
  {
    "text": "your logs whatever logs you tell it to to cloud watch logs there's also cloud wash logs integration with things like",
    "start": "492120",
    "end": "497340"
  },
  {
    "text": "RDS and lambda then for software development where",
    "start": "497340",
    "end": "502620"
  },
  {
    "text": "we're gonna be talking about lambda so we'll have lambda functions that do",
    "start": "502620",
    "end": "508440"
  },
  {
    "text": "tests that do various things and we're gonna use SNS SNS is the simple notification service so that'll the SNS",
    "start": "508440",
    "end": "516150"
  },
  {
    "text": "can be used to trigger an email or an action like an approval step in your code pipeline and then for continuous",
    "start": "516150",
    "end": "523140"
  },
  {
    "text": "delivery we're going to be using code deploy so code deploy as of reinvent can",
    "start": "523140",
    "end": "528420"
  },
  {
    "text": "now deploy to ec2 to on premise to ECS and to lambda functions as well",
    "start": "528420",
    "end": "534090"
  },
  {
    "text": "and we're gonna be using continues for skin to use the point we're gonna be using code pipeline so code pipe in is",
    "start": "534090",
    "end": "539730"
  },
  {
    "text": "gonna Shepherd our whole deployment process and move things from one stage to another and for security we're gonna",
    "start": "539730",
    "end": "546180"
  },
  {
    "text": "be I'll be talking about a bunch of tools but in the pipeline now describe we're gonna be using Amazon inspector so",
    "start": "546180",
    "end": "553050"
  },
  {
    "text": "inspector is a tool that we have where you can run basically different kinds of packages of assessments against your",
    "start": "553050",
    "end": "561140"
  },
  {
    "text": "instances so for example I can see are there any CVEs that are active in my",
    "start": "561140",
    "end": "566700"
  },
  {
    "text": "instance so do I need to update my like OpenSSL package or something right so we're gonna automate a run of that in",
    "start": "566700",
    "end": "572040"
  },
  {
    "text": "our pipeline and then for testing we're gonna be using actually both lambda and",
    "start": "572040",
    "end": "578010"
  },
  {
    "text": "code build so could build allows us to build our code oh this allows us to do things like unit testing or security",
    "start": "578010",
    "end": "584280"
  },
  {
    "text": "testing and I'll talk about that so let's talk about the different software",
    "start": "584280",
    "end": "590040"
  },
  {
    "start": "587000",
    "end": "587000"
  },
  {
    "text": "release steps and that's like there's a bit of an error there that's fine it's a",
    "start": "590040",
    "end": "596340"
  },
  {
    "text": "source there right so let's talk about our software release steps and how they",
    "start": "596340",
    "end": "602190"
  },
  {
    "text": "map to a Tobias services so for the purpose of this talk for storing your",
    "start": "602190",
    "end": "607290"
  },
  {
    "text": "code for version control we're gonna be using code commit for building your code",
    "start": "607290",
    "end": "613950"
  },
  {
    "text": "we're gonna be using could build or also doing unit tests for testing again you",
    "start": "613950",
    "end": "619950"
  },
  {
    "text": "can use code build most of our customers also use some kind of third-party tooling for that as well so if you're",
    "start": "619950",
    "end": "625110"
  },
  {
    "text": "doing UI testing integration testing you probably using a third-party tool",
    "start": "625110",
    "end": "631470"
  },
  {
    "text": "for that and for deployments we're gonna be using code deploy and again the code",
    "start": "631470",
    "end": "638640"
  },
  {
    "text": "pipeline is going to be shepherding all these things across so one thing we're not gonna be really talking about and",
    "start": "638640",
    "end": "644130"
  },
  {
    "text": "talk to you should be aware of is we have a service called code star so cut star is basically a unified UI and you",
    "start": "644130",
    "end": "652380"
  },
  {
    "text": "can go into and you can say I would like to start a nodejs project that uses",
    "start": "652380",
    "end": "657870"
  },
  {
    "text": "elastic beanstalk and code commit and it'll provision instances of all those",
    "start": "657870",
    "end": "663270"
  },
  {
    "text": "services for you and it'll get you an environment that we're that uses cook pipeline could come in the last thing beanstalk whatever the",
    "start": "663270",
    "end": "669680"
  },
  {
    "text": "template that you click on has and it'll get you up and running in a few minutes so if you want to try to you know use",
    "start": "669680",
    "end": "675470"
  },
  {
    "text": "all these services without having to manually set them up code stars a really good way to go it also has like a wiki tab but it can integrate with JIRA and",
    "start": "675470",
    "end": "682760"
  },
  {
    "text": "it'll show you in one UI where everything is so it's a good place for some testing and so for monitoring we're",
    "start": "682760",
    "end": "691220"
  },
  {
    "text": "gonna be well you could use it again club watch will have a service called x-ray so x-ray basically allows you to",
    "start": "691220",
    "end": "699380"
  },
  {
    "text": "do traces on your code so you can see oh well this database call was taking awhile or I should probably optimize",
    "start": "699380",
    "end": "705500"
  },
  {
    "text": "that now in terms of our DevOps portfolio all the stuff on the left side",
    "start": "705500",
    "end": "713120"
  },
  {
    "start": "707000",
    "end": "707000"
  },
  {
    "text": "of the screen that's all of our developer tools which I already talked about and then we also have some",
    "start": "713120",
    "end": "718400"
  },
  {
    "text": "infrastructure as code tools so there's eight of us cloud confirmation so",
    "start": "718400",
    "end": "723620"
  },
  {
    "text": "confirmation is really important and a lot of our customers use it to do their automation so if you're not familiar",
    "start": "723620",
    "end": "730160"
  },
  {
    "text": "with cloud formation confirmation basically allows you to write a yeah mol",
    "start": "730160",
    "end": "737150"
  },
  {
    "text": "or JSON template that template defines your infrastructure so your yield B's",
    "start": "737150",
    "end": "742970"
  },
  {
    "text": "your VP sees your instances your ECS clusters whatever it is that you're building in AWS you write it a template",
    "start": "742970",
    "end": "749210"
  },
  {
    "text": "out for it and you can deploy it off that template and so that's the that's describing your infrastructure is code",
    "start": "749210",
    "end": "754940"
  },
  {
    "text": "so then if you want to set up a you know dev environment you just send somebody the confirmation template and then they",
    "start": "754940",
    "end": "760430"
  },
  {
    "text": "can spin it up you can do nested templates you can do cross template references with outputs and inputs and",
    "start": "760430",
    "end": "767870"
  },
  {
    "text": "stuff there's parameters so it's a really powerful service and a lot of our",
    "start": "767870",
    "end": "773390"
  },
  {
    "text": "customers use it to achieve automation and so it's super useful we also have ops works so opsworks is a service that",
    "start": "773390",
    "end": "780410"
  },
  {
    "text": "allows you it's basically managed chef or puppet so if you're using chef or",
    "start": "780410",
    "end": "785600"
  },
  {
    "text": "puppet - you know configure your instances and you don't want to have to manage those you'd use opsworks for that",
    "start": "785600",
    "end": "792200"
  },
  {
    "text": "and in terms of monitoring and logging so we talked about cloud watch an x-ray we also have a device cloud trail so",
    "start": "792200",
    "end": "798620"
  },
  {
    "text": "cloud trail especially for security it's super important so collateral is an auditing tool so anytime that you do",
    "start": "798620",
    "end": "804830"
  },
  {
    "text": "something in AWS whether it's through SDKs or api's or CLI or you know the the",
    "start": "804830",
    "end": "814010"
  },
  {
    "text": "web console that result that's an API action of some kind or multiple API actions so those get logged in clout",
    "start": "814010",
    "end": "820640"
  },
  {
    "text": "trail and so then if you want to see oh well who changed the security group or who launched this instance you can go",
    "start": "820640",
    "end": "826820"
  },
  {
    "text": "back and look at your cloud trail logs and see who did it and so you know so alarm off of your",
    "start": "826820",
    "end": "831860"
  },
  {
    "text": "cloud trail logs so you can be notified of certain high-risk actions happen like somebody logged in as their you know",
    "start": "831860",
    "end": "838220"
  },
  {
    "text": "root user without an MFA or something like that right but you can you can alarm on that so that's a really",
    "start": "838220",
    "end": "843230"
  },
  {
    "text": "important service and then we have a Tobias config and so config basically",
    "start": "843230",
    "end": "849740"
  },
  {
    "text": "allows you to record your account and it'll record certain resources in your account and a history of like what's",
    "start": "849740",
    "end": "855890"
  },
  {
    "text": "going on with them so for example it will record all the ec2 instances that you have running the instance ID is the",
    "start": "855890",
    "end": "862910"
  },
  {
    "text": "security groups associated with them what load balancers they're attached to so you could once you hit record you can go back at any point in time and",
    "start": "862910",
    "end": "869900"
  },
  {
    "text": "see what was my account doing at this point in time and also config has something called config rules so you can",
    "start": "869900",
    "end": "877070"
  },
  {
    "text": "see you can create rules and then it's your compliance against those rules so for example you can create a rule saying I would like all my instances to have",
    "start": "877070",
    "end": "884839"
  },
  {
    "text": "the following tag so they have to have a name tag they have to have a cost center tag they have to have a environment tag and then you can see which instances are",
    "start": "884839",
    "end": "892130"
  },
  {
    "text": "not compliant with that rule and so you can raid those rules with lambda functions so you can get pretty flexible and we'll have an example of a",
    "start": "892130",
    "end": "898490"
  },
  {
    "text": "configurable in this talk as well so lastly before we get down to specific use practices let's just talk really",
    "start": "898490",
    "end": "904610"
  },
  {
    "start": "901000",
    "end": "901000"
  },
  {
    "text": "quickly about our security portfolio so this was actually all of our security services just some of them but we've got",
    "start": "904610",
    "end": "910700"
  },
  {
    "text": "I am so I am allows you to control what parts of your AWS account your users and",
    "start": "910700",
    "end": "917690"
  },
  {
    "text": "our apps have access to so you can say okay this I am user can upload to this s3 bucket but not use ec2 or this",
    "start": "917690",
    "end": "925520"
  },
  {
    "text": "application it can you know trigger this athina query but not you know do",
    "start": "925520",
    "end": "931339"
  },
  {
    "text": "anything else and then there's kognito so kognito is like a basically a system",
    "start": "931339",
    "end": "936690"
  },
  {
    "text": "allows you to manage credentials and logins guard duty so guard duty allows you to it alerts on",
    "start": "936690",
    "end": "944100"
  },
  {
    "text": "things that happen in your account for example your instance is talking to a known botnet",
    "start": "944100",
    "end": "949500"
  },
  {
    "text": "it will alert on that so you can do that there's inspector which I talked about",
    "start": "949500",
    "end": "954750"
  },
  {
    "text": "there's certificate managers so certificate manager allows you to create SSL certs they're free you can create",
    "start": "954750",
    "end": "961199"
  },
  {
    "text": "wild card search you can attach them to your for example il bees or Al bees and",
    "start": "961199",
    "end": "967699"
  },
  {
    "text": "after you do that it'll handle the renewals for you you know to do a private certificate authority with ACM",
    "start": "967699",
    "end": "973350"
  },
  {
    "text": "there's cloudy HSM which allows you it's basically it's an HSM that's managed so",
    "start": "973350",
    "end": "979050"
  },
  {
    "text": "if you're doing things like credit card transactions you can use that there's the directory service so the directory service is a managed directory for",
    "start": "979050",
    "end": "984959"
  },
  {
    "text": "example you could have manage the active directory in there and lastly there's a firewall manager so that allows you to handle your wife rules across accounts",
    "start": "984959",
    "end": "991699"
  },
  {
    "text": "so just two more things that we announced that reinvent that are new so",
    "start": "991699",
    "end": "996899"
  },
  {
    "text": "there's control tower which is really important so control tower once that's going to be out that will allow you to",
    "start": "996899",
    "end": "1002810"
  },
  {
    "text": "basically set up a baseline for your accounts so it'll create for example a",
    "start": "1002810",
    "end": "1008889"
  },
  {
    "text": "logging account for you and an auditing account and then all your logs gets into",
    "start": "1008889",
    "end": "1015470"
  },
  {
    "text": "the logging account all the well then you can have a your auditors can log",
    "start": "1015470",
    "end": "1020540"
  },
  {
    "text": "into the auditing account and you can set up guardrails for your account so as you grow in a multi count strategy you",
    "start": "1020540",
    "end": "1026418"
  },
  {
    "text": "can have a security baseline that you enforce across your AWS accounts which is a really good idea and then we have",
    "start": "1026419",
    "end": "1031548"
  },
  {
    "text": "security hubs so security hub is just a UI that centralizes a bunch of sources of security alerts for you so you can",
    "start": "1031549",
    "end": "1037760"
  },
  {
    "text": "get your guard duty alerts on there it integrates with partner you know",
    "start": "1037760",
    "end": "1043100"
  },
  {
    "text": "notifications as well so if you're doing your scanning your containers with a partner like twist lock that can get",
    "start": "1043100",
    "end": "1048890"
  },
  {
    "text": "integrated security hub as well so just one place for you to view your security events from various sources and so going",
    "start": "1048890",
    "end": "1058700"
  },
  {
    "start": "1057000",
    "end": "1057000"
  },
  {
    "text": "back to our release process we're just going to model this process in code",
    "start": "1058700",
    "end": "1065150"
  },
  {
    "text": "pipeline just to show you so this whole thing is",
    "start": "1065150",
    "end": "1071620"
  },
  {
    "text": "the pipeline and then we have different stages in here so there's a source stage",
    "start": "1071620",
    "end": "1078010"
  },
  {
    "text": "a build stage integration stage in a production stage and then there's the",
    "start": "1078010",
    "end": "1083320"
  },
  {
    "text": "action right so each stage can have one or more actions and those actions can be",
    "start": "1083320",
    "end": "1089970"
  },
  {
    "text": "they can be sequential like the two actions of my integration here or they can be parallel so they can happen at",
    "start": "1089970",
    "end": "1096669"
  },
  {
    "text": "the same time and these actions can be a combination of triggering AWS services",
    "start": "1096669",
    "end": "1102419"
  },
  {
    "text": "we also support partner services as well so for example if you've got Jenkins you",
    "start": "1102419",
    "end": "1109960"
  },
  {
    "text": "can trigger an action and Jenkins from your code pipeline and then there's",
    "start": "1109960",
    "end": "1115870"
  },
  {
    "text": "transitions so when one stage finishes all the actions and it's successfully complete you transition into your other",
    "start": "1115870",
    "end": "1122740"
  },
  {
    "text": "stage and you can disable these transitions for gramatically so for example if a test fails you can you're",
    "start": "1122740",
    "end": "1129820"
  },
  {
    "text": "gonna you can have a script that just disables your transition so the way that",
    "start": "1129820",
    "end": "1137950"
  },
  {
    "text": "a pipeline works is this - for it to get triggered the source has to change so",
    "start": "1137950",
    "end": "1144760"
  },
  {
    "text": "you've changed your source code and commit and that triggers this whole pipeline and then it goes from stage to",
    "start": "1144760",
    "end": "1151030"
  },
  {
    "text": "stage to stage and if everything succeeds its successful in your code goes to production if that's what your",
    "start": "1151030",
    "end": "1156429"
  },
  {
    "text": "mind is doing if it doesn't succeed it just stops until the next source change",
    "start": "1156429",
    "end": "1162150"
  },
  {
    "text": "so ultimately you get to production and",
    "start": "1162150",
    "end": "1167770"
  },
  {
    "start": "1163000",
    "end": "1163000"
  },
  {
    "text": "for most of the examples in this talk we're going to be using code deploy and we're gonna be assuming that you're",
    "start": "1167770",
    "end": "1173679"
  },
  {
    "text": "deploying to ec2 instances however if you want to learn how to do this for",
    "start": "1173679",
    "end": "1179409"
  },
  {
    "text": "containers or for server lists you can do that with code pipeline as well and",
    "start": "1179409",
    "end": "1185200"
  },
  {
    "text": "there's a talk at reinvent that covered that specific use case so it's up on",
    "start": "1185200",
    "end": "1192669"
  },
  {
    "text": "YouTube now so if you look for that talk on YouTube you should be able to find it there so",
    "start": "1192669",
    "end": "1200259"
  },
  {
    "text": "step1 right in doing this is just automation so everything should be",
    "start": "1200259",
    "end": "1205399"
  },
  {
    "start": "1205000",
    "end": "1205000"
  },
  {
    "text": "automated so with that what does that actually mean so that means that your pipeline should",
    "start": "1205399",
    "end": "1210799"
  },
  {
    "text": "be defined as code you shouldn't have somebody like you know going okay I see a check-in in the code now I'm going to",
    "start": "1210799",
    "end": "1216409"
  },
  {
    "text": "trigger a build that should all be automated your code should be checked into a version control system field",
    "start": "1216409",
    "end": "1223309"
  },
  {
    "text": "commit github TFS doesn't really matter which one a a some kind of version",
    "start": "1223309",
    "end": "1229730"
  },
  {
    "text": "control system you should be able to easily use a combination of AWS and",
    "start": "1229730",
    "end": "1237769"
  },
  {
    "text": "third-party services to do things like deploy as tests so and so forth and it should be able to provide really",
    "start": "1237769",
    "end": "1244820"
  },
  {
    "text": "quick feedback on the success or failure of the pipeline so if something fails the developer who's writing the code",
    "start": "1244820",
    "end": "1251600"
  },
  {
    "text": "should know really quickly so they can go in and fix their code and do another pipeline run and it should remove the",
    "start": "1251600",
    "end": "1258289"
  },
  {
    "text": "undifferentiated heavy lifting with the releasing code to production but also basically should make developers lives",
    "start": "1258289",
    "end": "1263330"
  },
  {
    "text": "easier so they can just focus on writing code and committing it and then after they do that this whole process kicks",
    "start": "1263330",
    "end": "1269029"
  },
  {
    "text": "off but also it should add guardrails for developers so for example if I'm a",
    "start": "1269029",
    "end": "1274070"
  },
  {
    "text": "developer and I create a pipeline that just go straight to production from my source code without in testing I shadow",
    "start": "1274070",
    "end": "1280100"
  },
  {
    "text": "a process that picks that up and disables it and doesn't let you actually deploy to production so whatever",
    "start": "1280100",
    "end": "1285440"
  },
  {
    "text": "standards you have for security standards for example for your pipelines you should be able to enforce them right",
    "start": "1285440",
    "end": "1291860"
  },
  {
    "text": "to make sure that everything that goes to production complies to your standards",
    "start": "1291860",
    "end": "1297610"
  },
  {
    "text": "so let's talk about opportunities for automation so first of all continuous",
    "start": "1297610",
    "end": "1303710"
  },
  {
    "start": "1298000",
    "end": "1298000"
  },
  {
    "text": "integration process of builds integration tests UI testing that should",
    "start": "1303710",
    "end": "1308840"
  },
  {
    "text": "all be automated so for builds you can do again could build for integration UI",
    "start": "1308840",
    "end": "1316460"
  },
  {
    "text": "testing usually it's third-party tooling for your testing like I've seen for example there's a talk of years ago a",
    "start": "1316460",
    "end": "1322039"
  },
  {
    "text": "Trina vent on doing selenium so there's different different things you can do there your health check should be",
    "start": "1322039",
    "end": "1328909"
  },
  {
    "text": "automated so you should be able to see is what I just deployed up and running security tests so static",
    "start": "1328909",
    "end": "1335570"
  },
  {
    "text": "analysis of your code vulnerabilities scanning and again scanning your actual",
    "start": "1335570",
    "end": "1341269"
  },
  {
    "text": "pipeline for compliance to whatever your standards are such as don't appreciate its production that should all be",
    "start": "1341269",
    "end": "1347090"
  },
  {
    "text": "automated application tests so synthetic user tests a p.m. there's a Tobias tools",
    "start": "1347090",
    "end": "1353749"
  },
  {
    "text": "like x-ray there's third-party tools and data dog and New Relic and others that you can use for that to automate that",
    "start": "1353749",
    "end": "1359570"
  },
  {
    "text": "and for notifications and alerts so cloud watch alarms is the ADA based service but there's all kinds of",
    "start": "1359570",
    "end": "1365600"
  },
  {
    "text": "third-party tools so I can Splunk data dog you can use SNS which is an ADA",
    "start": "1365600",
    "end": "1371149"
  },
  {
    "text": "based service and we have a lot of our customers who get alerts on their slack channels right who have paid your duties",
    "start": "1371149",
    "end": "1377840"
  },
  {
    "text": "so you have a call tree of okay you know this this alarm is firing so now it's going to text this ops person",
    "start": "1377840",
    "end": "1385879"
  },
  {
    "text": "and they don't reply it's going to call this other person so you can do that that kind of thing with pager duty so",
    "start": "1385879",
    "end": "1391190"
  },
  {
    "text": "let's talk about how do you do this with build and unit tests so we've got our",
    "start": "1391190",
    "end": "1398029"
  },
  {
    "text": "pipeline here so first thing we do is we're gonna trigger the pipeline because the source code has changed and then so",
    "start": "1398029",
    "end": "1405049"
  },
  {
    "text": "basically what happens in the source stage is Courte pipeline takes your code out of code commit or out of your source",
    "start": "1405049",
    "end": "1411409"
  },
  {
    "text": "code repository it zips it up and puts it in an s3 file or a file in s3 and then it sends it off to the next stage",
    "start": "1411409",
    "end": "1418730"
  },
  {
    "text": "in this case the next stage is gonna be code build and the way code build works is could build spins up a docker",
    "start": "1418730",
    "end": "1424309"
  },
  {
    "text": "container that's temporary the docker container could be one of our preset containers or if you have a custom build",
    "start": "1424309",
    "end": "1431659"
  },
  {
    "text": "environment with some tools that you want for could build you can provide your own docker container image so it's gonna spin up a docker container with",
    "start": "1431659",
    "end": "1438080"
  },
  {
    "text": "that image in it and it's gonna run whatever commands II tell to us in this case it's it's running the build and",
    "start": "1438080",
    "end": "1443629"
  },
  {
    "text": "unit tests and assuming that succeeds then it goes into your integration",
    "start": "1443629",
    "end": "1448850"
  },
  {
    "text": "environment so you've got presumably an auto scaling group with instances that's an that is part of your integration",
    "start": "1448850",
    "end": "1456080"
  },
  {
    "text": "environment so it's gonna use code deploy to go there and then it's going to kick off your UI tests and",
    "start": "1456080",
    "end": "1461179"
  },
  {
    "text": "integration tests so let's say you're doing selenium and you could build and it's testing how your",
    "start": "1461179",
    "end": "1467740"
  },
  {
    "text": "app looks or works on the firefox in chrome and then you have an integration test that's using some kind of",
    "start": "1467740",
    "end": "1474370"
  },
  {
    "text": "third-party tool to see how your app interacts with the rest of your environment and so that's typically how",
    "start": "1474370",
    "end": "1482320"
  },
  {
    "text": "that works and so basically the other thing that's really important here is if any of this",
    "start": "1482320",
    "end": "1487720"
  },
  {
    "start": "1484000",
    "end": "1484000"
  },
  {
    "text": "fails you should be notified of it so for example here we've got to change it went through all the building incest",
    "start": "1487720",
    "end": "1493060"
  },
  {
    "text": "successfully but it failed on the Firefox test so what should happen then is you can configure cloud watch events",
    "start": "1493060",
    "end": "1500740"
  },
  {
    "text": "to look for failed actions so you can say oh if something in my hood pipeline",
    "start": "1500740",
    "end": "1506380"
  },
  {
    "text": "fails if an action fails I'm gonna trigger this lambda function the lambda function all its gonna do is notify my",
    "start": "1506380",
    "end": "1514060"
  },
  {
    "text": "slack channel that my build is failed so now as soon as it fails within seconds my slack channel I have a notification I",
    "start": "1514060",
    "end": "1519940"
  },
  {
    "text": "know this has failed and I know to go in and fix it as developer then we have",
    "start": "1519940",
    "end": "1525340"
  },
  {
    "text": "another change that goes through and it fails on could build this time so",
    "start": "1525340",
    "end": "1530830"
  },
  {
    "text": "doesn't even get to the UI testing and so again it's gonna trigger the same",
    "start": "1530830",
    "end": "1536170"
  },
  {
    "text": "exact lambda function and now in slack I know that this is failed so let's talk",
    "start": "1536170",
    "end": "1543280"
  },
  {
    "text": "specifically about how to integrate security testing into your pipelines so",
    "start": "1543280",
    "end": "1549450"
  },
  {
    "start": "1547000",
    "end": "1547000"
  },
  {
    "text": "first is where possible you want to integrate the testing directly into the pipeline's you'd want to have it like",
    "start": "1549450",
    "end": "1555220"
  },
  {
    "text": "outside your pipeline or do after the fact you want to catch security issues before you get to production right so if",
    "start": "1555220",
    "end": "1562510"
  },
  {
    "text": "your pipeline produces Amazon machine images or docker containers you can scan",
    "start": "1562510",
    "end": "1568780"
  },
  {
    "text": "them during your pipeline so you can use something like inspector to scan in an",
    "start": "1568780",
    "end": "1574210"
  },
  {
    "text": "instance based off of an ami that you built in your pipeline you can use open source and commercial tools like clear",
    "start": "1574210",
    "end": "1580000"
  },
  {
    "text": "and twistlock to scan your container images for security issues if the tool",
    "start": "1580000",
    "end": "1587560"
  },
  {
    "text": "you're using that you need to trigger the security tool you need to trigger has an API you can use a custom lambda",
    "start": "1587560",
    "end": "1594130"
  },
  {
    "text": "action could pipeline to trigger it so you can insert an action in code pipeline the triggers any lane to function so let's say you're using",
    "start": "1594130",
    "end": "1600470"
  },
  {
    "text": "some third-party tool you're just gonna have a lambda function that calls the API for that tool them tells it to start",
    "start": "1600470",
    "end": "1606860"
  },
  {
    "text": "a security test for example and if a security test fails the pipeline stops",
    "start": "1606860",
    "end": "1612710"
  },
  {
    "text": "the code doesn't make it to production you've averted a security incident right so that's all good good stuff so let's",
    "start": "1612710",
    "end": "1619940"
  },
  {
    "text": "let's look at what a pipeline would look like for example for scanning your docker containers so in this case this",
    "start": "1619940",
    "end": "1628280"
  },
  {
    "start": "1621000",
    "end": "1621000"
  },
  {
    "text": "is actually new feature that was announced at read amend my source stage is actually not could commit or github",
    "start": "1628280",
    "end": "1635480"
  },
  {
    "text": "in its ECR so I have an ECR is our container registry service so I have a",
    "start": "1635480",
    "end": "1641780"
  },
  {
    "text": "container registry and so presumably I have either another pipeline or earlier stages in this pipeline that build my",
    "start": "1641780",
    "end": "1648320"
  },
  {
    "text": "docker container and put it into this ECR repository and so this specific",
    "start": "1648320",
    "end": "1654410"
  },
  {
    "text": "pipeline gets triggered off of changes in this ECR repository so there's a new container that gets placed in my CI repo",
    "start": "1654410",
    "end": "1661160"
  },
  {
    "text": "that then triggers at the pipeline then",
    "start": "1661160",
    "end": "1666290"
  },
  {
    "text": "we trigger we have a lambda function that triggers Claire so clears this open",
    "start": "1666290",
    "end": "1671900"
  },
  {
    "text": "source container static analysis tool again you can use twist lock code",
    "start": "1671900",
    "end": "1679310"
  },
  {
    "text": "pipeline isn't opinionated on what tools you use there are some native like integrations with some third-party tools",
    "start": "1679310",
    "end": "1684980"
  },
  {
    "text": "but if those integrations don't exist you can just use the lambda function so in this case I'm using Claire so that",
    "start": "1684980",
    "end": "1691970"
  },
  {
    "text": "gets triggered it gets passed it succeeds and then again we just go on to",
    "start": "1691970",
    "end": "1697970"
  },
  {
    "text": "our integration environment just in like in the last example and we trigger a UI and integration tests and so again if",
    "start": "1697970",
    "end": "1706070"
  },
  {
    "start": "1704000",
    "end": "1704000"
  },
  {
    "text": "same thing as last time if it fails we get into the facial slack we know to fix something so what about ami is what if",
    "start": "1706070",
    "end": "1714470"
  },
  {
    "start": "1713000",
    "end": "1713000"
  },
  {
    "text": "I'm building ami is during my pipeline so in this case I have a code commit repository and I'm building my ami with",
    "start": "1714470",
    "end": "1722770"
  },
  {
    "text": "code build and Packer which is an open source tool so my pipeline is triggered",
    "start": "1722770",
    "end": "1729290"
  },
  {
    "text": "with a source change and could commit I then build the ami so great I have a",
    "start": "1729290",
    "end": "1735770"
  },
  {
    "text": "name I but how do I test that am i right so you have to launch an instance although that ami so have a lambda",
    "start": "1735770",
    "end": "1741260"
  },
  {
    "text": "function that launches that instance I then have a lambda function that",
    "start": "1741260",
    "end": "1746750"
  },
  {
    "text": "triggers inspector it's gonna do a the inspector does an assessment against this instance based office and I just",
    "start": "1746750",
    "end": "1753200"
  },
  {
    "text": "built and it's gonna check for things like do I need to update open SSL or",
    "start": "1753200",
    "end": "1760840"
  },
  {
    "text": "kernel or other security requirements there's different packages in it in",
    "start": "1760840",
    "end": "1766039"
  },
  {
    "text": "inspector you can run so for example C is benchmarks C v's PCI compliance so",
    "start": "1766039",
    "end": "1772789"
  },
  {
    "text": "and so forth and assuming that all succeeds I didn't have another lambda function that kills my test instance",
    "start": "1772789",
    "end": "1779419"
  },
  {
    "text": "because I don't need it anymore and that would be a sample pipeline for a.m. eyes and if you and I shouldn't learn how to",
    "start": "1779419",
    "end": "1786049"
  },
  {
    "text": "build a mais with could build and Packer we have a blog post on that again we're gonna share all these slides with you so",
    "start": "1786049",
    "end": "1791809"
  },
  {
    "text": "you'd have to write down the URL but check out this blog post and so lastly what if we just want to do a security",
    "start": "1791809",
    "end": "1798080"
  },
  {
    "start": "1796000",
    "end": "1796000"
  },
  {
    "text": "like a custom security test so I have a script for example that it tests it will",
    "start": "1798080",
    "end": "1804559"
  },
  {
    "text": "say we're building a Python package and it's gonna test the requirements txt file just to make sure that it's only",
    "start": "1804559",
    "end": "1811610"
  },
  {
    "text": "putting in whitelisted Python eggs in there right and so in this example again",
    "start": "1811610",
    "end": "1816919"
  },
  {
    "text": "I'm triggering off of source code change I run my tests in could build and then",
    "start": "1816919",
    "end": "1824029"
  },
  {
    "text": "if that succeeds I deploy and in this actual case I give you could build or I could do lambda as well so for here's",
    "start": "1824029",
    "end": "1833659"
  },
  {
    "text": "like a really simple security test again I just have a whitelist exe that lists all the whitelist that Python packages",
    "start": "1833659",
    "end": "1840080"
  },
  {
    "text": "that I approve of and if something that's in my requirements that txt is not in this white list that txt it fails",
    "start": "1840080",
    "end": "1847940"
  },
  {
    "text": "the security test so another cool thing is I could do this through code build and a tree minute we actually launched",
    "start": "1847940",
    "end": "1853970"
  },
  {
    "text": "lambda both custom environments and layers so you can hook up lambda for",
    "start": "1853970",
    "end": "1860690"
  },
  {
    "text": "example to just run a bash script really easily now you can do before you can do it more easily now and",
    "start": "1860690",
    "end": "1865820"
  },
  {
    "text": "so instead of having to you know pop up code build which is still pretty lightweight service I just have a lambda",
    "start": "1865820",
    "end": "1871640"
  },
  {
    "text": "function that just runs this bash script right and it's gonna be really lightweight so that's another option",
    "start": "1871640",
    "end": "1877070"
  },
  {
    "text": "there and another example of a test I could do here is let's say I want to scan for a Tobias credentials so I do",
    "start": "1877070",
    "end": "1884030"
  },
  {
    "text": "not want I am credentials in my code right that's bad if that is my source code repository",
    "start": "1884030",
    "end": "1889550"
  },
  {
    "text": "that means it could be public it could leak we don't want any of that to happen you should be using I am rolled right so",
    "start": "1889550",
    "end": "1894980"
  },
  {
    "text": "I could have a script that just scans for I am credentials in my code and that's a really easy batch script in",
    "start": "1894980",
    "end": "1901280"
  },
  {
    "text": "fact I think we we have a script for git golf get my secrets that you can",
    "start": "1901280",
    "end": "1906380"
  },
  {
    "text": "implement on get check-in for that but that's another example of something that you could do here and so just some",
    "start": "1906380",
    "end": "1914270"
  },
  {
    "start": "1913000",
    "end": "1913000"
  },
  {
    "text": "security two options again for containers there's clear and twist lock I'm sure there's others these are the",
    "start": "1914270",
    "end": "1919430"
  },
  {
    "text": "ones that I've seen for instances scanning instances inspector is really great and for custom testing could build",
    "start": "1919430",
    "end": "1927830"
  },
  {
    "text": "is grade so you can put in any commands you want and could build and lambda now that especially you can do custom",
    "start": "1927830",
    "end": "1933860"
  },
  {
    "text": "environments it's it's really easy to do a test in lambda in whatever language you want so what about the actual",
    "start": "1933860",
    "end": "1942620"
  },
  {
    "text": "governance of our pipeline itself so that's great that we have all this testing built in but again we want to",
    "start": "1942620",
    "end": "1948410"
  },
  {
    "start": "1945000",
    "end": "1945000"
  },
  {
    "text": "block badly develop pipelines so again",
    "start": "1948410",
    "end": "1953480"
  },
  {
    "text": "going straight to production not having a testing stage what things like that so",
    "start": "1953480",
    "end": "1961420"
  },
  {
    "text": "the you know an insecure pipeline could introduce risk and then if you have a security issue you raid that could mean",
    "start": "1961420",
    "end": "1968150"
  },
  {
    "text": "reputation loss financial issues right you want to avoid all that and so we're",
    "start": "1968150",
    "end": "1973760"
  },
  {
    "text": "gonna learn about how to leverage a two-base config to ensure that our pipelines are configured to whatever our",
    "start": "1973760",
    "end": "1980600"
  },
  {
    "text": "standards are and so the first thing that you want to do is build configural",
    "start": "1980600",
    "end": "1988130"
  },
  {
    "start": "1982000",
    "end": "1982000"
  },
  {
    "text": "so again a configurable alerts when the pipeline is not configured up to your",
    "start": "1988130",
    "end": "1993770"
  },
  {
    "text": "best practices you can configure rule that says every pipeline must have a source",
    "start": "1993770",
    "end": "1999320"
  },
  {
    "text": "a build a test and then a staging deploy",
    "start": "1999320",
    "end": "2004780"
  },
  {
    "text": "in a production deploy and so it'll scan basically all your pipelines and if any",
    "start": "2004780",
    "end": "2010390"
  },
  {
    "text": "pipeline is created that's non-compliant you can trigger a lambda function that disables the transition to production in",
    "start": "2010390",
    "end": "2015700"
  },
  {
    "text": "your pipeline so it your code won't get to production so we're gonna talk about",
    "start": "2015700",
    "end": "2023050"
  },
  {
    "text": "how to do that here so one way to do it is again cook",
    "start": "2023050",
    "end": "2029020"
  },
  {
    "start": "2027000",
    "end": "2027000"
  },
  {
    "text": "pipeline it has this thing called approvals right and so in this example our codes going from could commit into",
    "start": "2029020",
    "end": "2037540"
  },
  {
    "text": "build stage and then there's an approval so usually this manual approval is manual so somebody has to go in and head",
    "start": "2037540",
    "end": "2043720"
  },
  {
    "text": "approve but because code pipeline is API driven you can actually automate that so",
    "start": "2043720",
    "end": "2050139"
  },
  {
    "text": "what happens is when there's when this approval stage gets hit you can configure it to trigger an SNS topic so",
    "start": "2050140",
    "end": "2057179"
  },
  {
    "text": "again SNS is our simple notification service and when you have an SNS topic you can have different subscribers to it",
    "start": "2057180",
    "end": "2062830"
  },
  {
    "text": "so you can have that subscriber be an email address or an HTTP endpoint or in",
    "start": "2062830",
    "end": "2068020"
  },
  {
    "text": "this case we're going to trigger a lambda function so the lambda function is going to basically talk to a Debates",
    "start": "2068020",
    "end": "2075370"
  },
  {
    "text": "config and check that rule that we've configured and says okay is this pipeline compliant with this",
    "start": "2075370",
    "end": "2081250"
  },
  {
    "text": "configurable about pipeline safety and it'll return that result of lambda",
    "start": "2081250",
    "end": "2087520"
  },
  {
    "text": "function and the lambda function can go in and trigger the approval and says",
    "start": "2087520",
    "end": "2092740"
  },
  {
    "text": "okay this is approved this is good or it's not good and that'll determine on whether your code gets into production",
    "start": "2092740",
    "end": "2098410"
  },
  {
    "text": "or not so then we also can have a config",
    "start": "2098410",
    "end": "2106630"
  },
  {
    "text": "rules based safety check so with that what this means is instead of having the",
    "start": "2106630",
    "end": "2112030"
  },
  {
    "text": "last thing we just did it's great but it depends on you know your developers putting that approval stage into their",
    "start": "2112030",
    "end": "2117490"
  },
  {
    "text": "pipelines right so if they don't put that in their code can still go straight to production so you can configure rules",
    "start": "2117490",
    "end": "2124270"
  },
  {
    "text": "based pipeline safety check that actually acts outside of the pipeline so it doesn't matter if they put it in or",
    "start": "2124270",
    "end": "2129490"
  },
  {
    "text": "not it's going to it's going to enforce the pipeline safety so basically what we",
    "start": "2129490",
    "end": "2134570"
  },
  {
    "start": "2134000",
    "end": "2134000"
  },
  {
    "text": "do here is we would add a rule to config rules and so configure rules has pre-built rules and also it has you can",
    "start": "2134570",
    "end": "2142070"
  },
  {
    "text": "do custom rule so in this case we just added a pre-built rule for pipeline and so this just checks whether the first",
    "start": "2142070",
    "end": "2149810"
  },
  {
    "text": "stage of the pipeline performs more than widen deployment so we want the first",
    "start": "2149810",
    "end": "2155090"
  },
  {
    "text": "stage of the pipeline to if its deploying to just deploy to like say",
    "start": "2155090",
    "end": "2160250"
  },
  {
    "text": "staging not staging and production so we're gonna use that rule instead of building a custom rule for this case and",
    "start": "2160250",
    "end": "2166930"
  },
  {
    "text": "we're gonna so when you create the rule you basically it's a you this is in",
    "start": "2166930",
    "end": "2172869"
  },
  {
    "text": "configurable right so you picked an event pattern so you pick ok config config rules compliance change so and",
    "start": "2172869",
    "end": "2180320"
  },
  {
    "text": "then you pick that specific that specific rule that you just created and",
    "start": "2180320",
    "end": "2185410"
  },
  {
    "text": "then you have a trigger a lambda function right so basically what ends up",
    "start": "2185410",
    "end": "2190490"
  },
  {
    "text": "happening is your pipelines have going on in the background like it's triggering right there's no approval",
    "start": "2190490",
    "end": "2196730"
  },
  {
    "text": "stage in the pipeline specific for this but config rules is continuously monitoring this and basically it",
    "start": "2196730",
    "end": "2204109"
  },
  {
    "text": "triggers a cloud watch event so anytime there's a change in your pipeline that triggers a cloud watch event and the",
    "start": "2204109",
    "end": "2209780"
  },
  {
    "text": "cloud watch event so when when your configurable is non-compliant that triggers a lambda function that disables",
    "start": "2209780",
    "end": "2217250"
  },
  {
    "text": "production so basically what it's going to do is it's going to disable that last transition to production and so if your",
    "start": "2217250",
    "end": "2222890"
  },
  {
    "text": "pipeline becomes non-compliant your code stops making its production and developer if you configured your I am",
    "start": "2222890",
    "end": "2230570"
  },
  {
    "text": "right doesn't have access to renewable that transition what they have to do is fix their pipeline and once they fix it",
    "start": "2230570",
    "end": "2236780"
  },
  {
    "text": "it'll see that it's compliant and it'll the lambda function will automatically re-enable it so that's one way to do",
    "start": "2236780",
    "end": "2242030"
  },
  {
    "text": "that so just a summary on this again you want to use configurable and cloud watch",
    "start": "2242030",
    "end": "2247430"
  },
  {
    "start": "2243000",
    "end": "2243000"
  },
  {
    "text": "events to automatically remediate your non-compliant pipelines you can also add",
    "start": "2247430",
    "end": "2253220"
  },
  {
    "text": "a common action across all your pipelines that triggers this approval",
    "start": "2253220",
    "end": "2258770"
  },
  {
    "text": "but again that depends on that means you have to manage and make sure that that is in fact the case across all your",
    "start": "2258770",
    "end": "2264290"
  },
  {
    "text": "pipelines and you probably also want to just provide your developers a best practices",
    "start": "2264290",
    "end": "2269430"
  },
  {
    "text": "pipeline to start with so instead of having them just do a new pipeline from scratch every time what you probably",
    "start": "2269430",
    "end": "2275550"
  },
  {
    "text": "wanted to do is have a CloudFormation template that says okay when you're getting started use this CloudFormation template and",
    "start": "2275550",
    "end": "2281400"
  },
  {
    "text": "it'll set you up a baseline pipeline that conforms to all of our standards and you can customize it from there so",
    "start": "2281400",
    "end": "2286500"
  },
  {
    "text": "you can do that through CloudFormation unisza do it through service catalog which also works with confirmation so if",
    "start": "2286500",
    "end": "2291750"
  },
  {
    "text": "you have a service catalog which is one of our services the the developer would go to the Service Catalog console and there be a product they're called",
    "start": "2291750",
    "end": "2298349"
  },
  {
    "text": "pipeline they'll click on it and it would deploy the pipeline for them so that's a really easy way to make your",
    "start": "2298349",
    "end": "2304619"
  },
  {
    "text": "developers lives easier and again you can implement approval actions and",
    "start": "2304619",
    "end": "2310410"
  },
  {
    "text": "pipeline and they don't have to be manual approvals you can automate those as well so let's talk about deployment",
    "start": "2310410",
    "end": "2319829"
  },
  {
    "text": "health so you want to verify that when",
    "start": "2319829",
    "end": "2329550"
  },
  {
    "start": "2324000",
    "end": "2324000"
  },
  {
    "text": "you deploy code that it's actually your deployment is succeeded and your service",
    "start": "2329550",
    "end": "2335609"
  },
  {
    "text": "that you're deploying to is actually healthy after the deploy you don't want",
    "start": "2335609",
    "end": "2341339"
  },
  {
    "text": "to have to do this manually because if you do manually that's more time for your servers to go down for your customers to be unhappy it it's all bad",
    "start": "2341339",
    "end": "2347970"
  },
  {
    "text": "news right so let's take a look here for example there's two types of deployments",
    "start": "2347970",
    "end": "2353160"
  },
  {
    "start": "2348000",
    "end": "2348000"
  },
  {
    "text": "right and code deployed there's rolling deployments in blue green so the rolling this is what a successful deployment looks like we've got version",
    "start": "2353160",
    "end": "2359849"
  },
  {
    "text": "one of our code and it's going through all the instances in my auto scaling group for my app and it's going through",
    "start": "2359849",
    "end": "2365640"
  },
  {
    "text": "them one at a time and moving upgrading version one of my code to version two and so this was all succeeded this is",
    "start": "2365640",
    "end": "2373109"
  },
  {
    "text": "great it also wilds doing this code deploy takes those instances out of the load balancer so they're not serving",
    "start": "2373109",
    "end": "2378240"
  },
  {
    "text": "traffic well while the updates going on so you're you have a zero downtime deployed right in case of a failure what",
    "start": "2378240",
    "end": "2386460"
  },
  {
    "text": "happens is if you don't configure anything edge is going to go through and fail and then your services down right",
    "start": "2386460",
    "end": "2392910"
  },
  {
    "text": "so you don't want that so you want to have safety to your rolling deployments so what you want to do is validate each",
    "start": "2392910",
    "end": "2398190"
  },
  {
    "start": "2395000",
    "end": "2395000"
  },
  {
    "text": "host health after you deploy it ensure that a minimum percentage of your fleet is healthy so basically say okay if more",
    "start": "2398190",
    "end": "2407460"
  },
  {
    "text": "than 25% of mine deploys fail stop the deploy so at least then I have 75% my fleet that's still healthy will the old",
    "start": "2407460",
    "end": "2413790"
  },
  {
    "text": "version of my code and code deploy also supports rollback so you can roll back",
    "start": "2413790",
    "end": "2418950"
  },
  {
    "text": "to your those remaining 25% that have the new birkin code in them back to the",
    "start": "2418950",
    "end": "2424440"
  },
  {
    "text": "old code if you need to so let's take a look at how that works so first of all",
    "start": "2424440",
    "end": "2429720"
  },
  {
    "start": "2426000",
    "end": "2426000"
  },
  {
    "text": "you want to have in code deploy there's a different life cycle stages right so",
    "start": "2429720",
    "end": "2434760"
  },
  {
    "text": "there's a validation stage so in this example you write a script that validates your service so it could be",
    "start": "2434760",
    "end": "2439950"
  },
  {
    "text": "something as simple as on the instance I'm gonna run curl against localhost and the endpoint of my service and make sure",
    "start": "2439950",
    "end": "2446520"
  },
  {
    "text": "I get a 200 back if I don't get it on your back it's failed or you can make your validate step more complicated if",
    "start": "2446520",
    "end": "2453690"
  },
  {
    "text": "you need to but again you're just running a script so that could be anything so let's take a look here so",
    "start": "2453690",
    "end": "2462780"
  },
  {
    "start": "2459000",
    "end": "2459000"
  },
  {
    "text": "now we've added validation so we've succeeded and then one of our instances",
    "start": "2462780",
    "end": "2470400"
  },
  {
    "text": "fails whatever we want everything else succeeded so in this case like maybe the instance failed because the underlying",
    "start": "2470400",
    "end": "2477180"
  },
  {
    "text": "hardware on that instance has gone bad so just that instance it's not a systemic issue so in this case it's okay",
    "start": "2477180",
    "end": "2483180"
  },
  {
    "text": "we're we're just gonna take that instance out of the load balancer and we're it's still a successful deploy it",
    "start": "2483180",
    "end": "2488579"
  },
  {
    "text": "didn't hit her threshold of to fail the whole deploy so you don't want that to",
    "start": "2488579",
    "end": "2495240"
  },
  {
    "start": "2494000",
    "end": "2494000"
  },
  {
    "text": "be a failed deployment right but Vault it would be you want that to be a successful deployment so you can use something called minimum healthy host so",
    "start": "2495240",
    "end": "2502319"
  },
  {
    "text": "you can say okay if 70% of my hosts are healthy that's a successful deploy so in",
    "start": "2502319",
    "end": "2507750"
  },
  {
    "text": "this case we had one failure ninety percent are healthy and that's fine so you can configure that all in code",
    "start": "2507750",
    "end": "2513180"
  },
  {
    "text": "deploy so now we have another deploy and now we've got four instances failing so",
    "start": "2513180",
    "end": "2518880"
  },
  {
    "text": "now you know that's a much more significant issue and so then it's gonna cause that whole deploy to fail and",
    "start": "2518880",
    "end": "2524910"
  },
  {
    "text": "potentially roll back if you configure it as well so the way to do that is when",
    "start": "2524910",
    "end": "2530640"
  },
  {
    "start": "2528000",
    "end": "2528000"
  },
  {
    "text": "you configure your deployments in code deploy there's deployment configuration stage and you",
    "start": "2530640",
    "end": "2537880"
  },
  {
    "text": "can either there's a bunch of built in configurations like one at a time all at once half at once you can also do custom",
    "start": "2537880",
    "end": "2545170"
  },
  {
    "text": "ones so you can create a deployment config that says for example 2/3 of my instances have to be healthy so 66% say",
    "start": "2545170",
    "end": "2553660"
  },
  {
    "text": "you can you can do custom deployment configurations as well and also you want",
    "start": "2553660",
    "end": "2559239"
  },
  {
    "start": "2557000",
    "end": "2557000"
  },
  {
    "text": "to configure roll backs so this is a built in feature of code deploy so when the deployment fails it roll back when",
    "start": "2559239",
    "end": "2566199"
  },
  {
    "text": "alarm threshold or hit rollback so in",
    "start": "2566199",
    "end": "2577299"
  },
  {
    "text": "this case also one of the thing is that you also want to send synthetic traffic to your deployments",
    "start": "2577299",
    "end": "2583269"
  },
  {
    "text": "so one thing you possibly do is integrate load testing into your code pipeline so we've deployed to your",
    "start": "2583269",
    "end": "2589209"
  },
  {
    "text": "staging environment your inner trigger or load test and then if that doesn't",
    "start": "2589209",
    "end": "2594249"
  },
  {
    "text": "cause your application to crash then you can move forward with that so you can do that for example you can there's a",
    "start": "2594249",
    "end": "2599619"
  },
  {
    "text": "third-party testing service called blaze meter and you can trigger that from code pipeline so now let's talk about blue",
    "start": "2599619",
    "end": "2605589"
  },
  {
    "start": "2605000",
    "end": "2605000"
  },
  {
    "text": "green deploys so blue green deploys the way they work is you've got two groups",
    "start": "2605589",
    "end": "2613959"
  },
  {
    "text": "of instances you've got your blue group and your green group so if you've got to",
    "start": "2613959",
    "end": "2619779"
  },
  {
    "text": "fail to play one of those what happens is your group of existing instances in this case the blue group doesn't get",
    "start": "2619779",
    "end": "2625150"
  },
  {
    "text": "touched right they're still there they're serving traffic and so when you doing you deploy you spin up a new group of instances and you start deploying to",
    "start": "2625150",
    "end": "2633609"
  },
  {
    "text": "them and let's say they fail then it doesn't matter like you haven't shifted",
    "start": "2633609",
    "end": "2639609"
  },
  {
    "text": "traffic over to them right so it fails you terminated those instances but your",
    "start": "2639609",
    "end": "2644949"
  },
  {
    "text": "traffic still being served to your orginal group of instances so not only have you not had downtime you also have",
    "start": "2644949",
    "end": "2650229"
  },
  {
    "text": "them decreased capacity on your service right because it hasn't shifted so a",
    "start": "2650229",
    "end": "2656309"
  },
  {
    "text": "successful deployment would look like this you deploy to the green group and",
    "start": "2656759",
    "end": "2662819"
  },
  {
    "text": "it deploys successfully and you validated that the app works afterwards and that's when you shift",
    "start": "2662819",
    "end": "2670240"
  },
  {
    "text": "over traffic and then you also can choose to keep your old instances around",
    "start": "2670240",
    "end": "2675310"
  },
  {
    "text": "for a while so let's say we're going to keep them around for a few hours so if you discover a problem later then you",
    "start": "2675310",
    "end": "2681970"
  },
  {
    "text": "can just shift traffic back to the old instances also this encourages the immutable infrastructure right so what",
    "start": "2681970",
    "end": "2688960"
  },
  {
    "text": "you can do is you're creating new sets of instances every time you do a deployment so from a security",
    "start": "2688960",
    "end": "2695080"
  },
  {
    "text": "perspective that's really nice because a your instances don't last for a long time so if somebody's broken into them",
    "start": "2695080",
    "end": "2700600"
  },
  {
    "text": "or something right like they're gonna be around for an hour great and then the other thing that it's",
    "start": "2700600",
    "end": "2705640"
  },
  {
    "text": "really nice about is you can disable SSH you can just say what a desktop because those instances are constant getting replaced unless you're gonna have a",
    "start": "2705640",
    "end": "2712000"
  },
  {
    "text": "brick glass feature too you know if you didn't log in but you typically don't to",
    "start": "2712000",
    "end": "2717280"
  },
  {
    "text": "log into these instances so that mitigates a lot of security risk and then we also just announced recently a",
    "start": "2717280",
    "end": "2723340"
  },
  {
    "text": "service called session manager it's part of a base SSM and so a session manager",
    "start": "2723340",
    "end": "2729970"
  },
  {
    "text": "it basically lets you SSH or get a shell into your instances without having SSH",
    "start": "2729970",
    "end": "2735790"
  },
  {
    "text": "on it open on it at all so you go to the web UI or Theroux CLI and you can open up a session in any instance if you have",
    "start": "2735790",
    "end": "2742600"
  },
  {
    "text": "the right IM permissions without having a port open which is super nice so take a look at that and you don't even have",
    "start": "2742600",
    "end": "2748600"
  },
  {
    "text": "too many agent installed in these instances they just have to be running a newish kernel on them",
    "start": "2748600",
    "end": "2753870"
  },
  {
    "text": "so now let's talk about lowering",
    "start": "2753870",
    "end": "2758980"
  },
  {
    "start": "2758000",
    "end": "2758000"
  },
  {
    "text": "deployment risk by segmenting your deploys so deployment failures happen",
    "start": "2758980",
    "end": "2764770"
  },
  {
    "text": "and you want to be prepared for that you want to minimize the impact of a",
    "start": "2764770",
    "end": "2770200"
  },
  {
    "text": "deployment failure and you want to catch these issues before actual users do also",
    "start": "2770200",
    "end": "2775420"
  },
  {
    "text": "if you catch these failures it's easier to rollback on a small segment of your map than everywhere so as a best",
    "start": "2775420",
    "end": "2783010"
  },
  {
    "start": "2781000",
    "end": "2781000"
  },
  {
    "text": "practice you should break down your production deployment into multiple segments so you deployed segments and",
    "start": "2783010",
    "end": "2789900"
  },
  {
    "text": "you test that segment to make sure your app is healthy in that segment and then you keep repeating those until you've",
    "start": "2789900",
    "end": "2796030"
  },
  {
    "text": "deployed everywhere so for example for was on the typical deployment types our",
    "start": "2796030",
    "end": "2801039"
  },
  {
    "start": "2798000",
    "end": "2798000"
  },
  {
    "text": "region so we've got regions around the world so when we deploy new features the",
    "start": "2801039",
    "end": "2807700"
  },
  {
    "text": "highest level of segmentation is the region so you can deploy it's a you know US East one in Virginia and you can deploy to Oregon u.s. West to Iran and",
    "start": "2807700",
    "end": "2814960"
  },
  {
    "text": "so forth then within each region you've got availability zones so you've got at least two availability zones in",
    "start": "2814960",
    "end": "2821349"
  },
  {
    "text": "each region so you can deploy them one AZ at a time then within that easy you've got sub zonal segmentation so you",
    "start": "2821349",
    "end": "2831130"
  },
  {
    "text": "can break that down so you can deploy it only a part of an easy and then lastly you've got Canary host so you can deploy to a single host and",
    "start": "2831130",
    "end": "2837369"
  },
  {
    "text": "that's the smallest level make sure that and you still throw a production traffic at it so you make sure that it's healthy",
    "start": "2837369",
    "end": "2842680"
  },
  {
    "text": "and then if that canary host fails you've had a bad - put to a host not to",
    "start": "2842680",
    "end": "2849279"
  },
  {
    "text": "your whole service so a typical deployment scenario is",
    "start": "2849279",
    "end": "2854759"
  },
  {
    "start": "2851000",
    "end": "2851000"
  },
  {
    "text": "first he deployed to your canary deployment and then you can deploy it",
    "start": "2854759",
    "end": "2861640"
  },
  {
    "text": "you also so that succeeds you've got your region based deployment however the more common one at Amazon is",
    "start": "2861640",
    "end": "2869769"
  },
  {
    "text": "you do a canary deploy they need an availability zone based deploy so you go availability zones availability zone -",
    "start": "2869769",
    "end": "2876339"
  },
  {
    "text": "availability zone and then after that you go to the next region so at any of those points you can stop and you can",
    "start": "2876339",
    "end": "2884470"
  },
  {
    "text": "roll back if you need to and so you",
    "start": "2884470",
    "end": "2889749"
  },
  {
    "text": "basically go through each stage and then after all of these you do a automated",
    "start": "2889749",
    "end": "2895180"
  },
  {
    "text": "test to make sure everything works and then you go ahead if it works so one",
    "start": "2895180",
    "end": "2904480"
  },
  {
    "start": "2899000",
    "end": "2899000"
  },
  {
    "text": "thing you can do with could deploy is you can segment your deploys by auto-scaling groups and my tags so you",
    "start": "2904480",
    "end": "2911410"
  },
  {
    "text": "can a model auto scaling group that is just one AZ and you have let's say you have three is you have three auto",
    "start": "2911410",
    "end": "2916509"
  },
  {
    "text": "scaling groups one crazy and you can trigger a separate deploy to those one at a time or you can tag your instances",
    "start": "2916509",
    "end": "2922569"
  },
  {
    "text": "in any way looking and say okay I only want to deploy to this specific tag so the way you configure that is when you",
    "start": "2922569",
    "end": "2928239"
  },
  {
    "text": "edit your deployment group in code deploy you can basically choose which auto-scaling groups that i want to",
    "start": "2928239",
    "end": "2934060"
  },
  {
    "text": "target which tags that i want to target so the way that that works is you first deploy to the smallest segments so you",
    "start": "2934060",
    "end": "2940540"
  },
  {
    "start": "2937000",
    "end": "2937000"
  },
  {
    "text": "do a canary deployment that's just a one instance then you do your tests okay so",
    "start": "2940540",
    "end": "2946300"
  },
  {
    "text": "that's exceeded then you deploy to AZ number one that succeeded then you go to",
    "start": "2946300",
    "end": "2953740"
  },
  {
    "text": "AZ 2 and AZ 3 and if you noticed for the AZ ones we only do like I just I don't",
    "start": "2953740",
    "end": "2960490"
  },
  {
    "text": "have opposed deployment tests in there but that just I only had so much room on the slide so you can do opposed of lemon",
    "start": "2960490",
    "end": "2965770"
  },
  {
    "text": "zest after each of these and then this is new you can also do this for regions",
    "start": "2965770",
    "end": "2972700"
  },
  {
    "text": "so used to be in could pipeline there wasn't a support of like if I with my pipelines in Virginia and I'm trying to",
    "start": "2972700",
    "end": "2979660"
  },
  {
    "text": "deploy to code deploy application that's in Frankfort you couldn't do that",
    "start": "2979660",
    "end": "2985450"
  },
  {
    "text": "natively in code pipeline now you can't so you can do you can trigger cross region actions in code pipelines you can",
    "start": "2985450",
    "end": "2991840"
  },
  {
    "text": "now trigger this for other regions as well and so again you want to test each",
    "start": "2991840",
    "end": "2997480"
  },
  {
    "text": "segment so you want to look at your cloud watch metrics Club watch alarms and if you were doing any kind of",
    "start": "2997480",
    "end": "3005070"
  },
  {
    "text": "synthetic traffic test or anything you want to make sure that you know your tests have them timed out that your",
    "start": "3005070",
    "end": "3010170"
  },
  {
    "text": "application is responding in their reasonable amount of time so you can",
    "start": "3010170",
    "end": "3016349"
  },
  {
    "start": "3014000",
    "end": "3014000"
  },
  {
    "text": "adjust that you can for custom tests like this you can extend code pipeline with test actions lambda invoke actions",
    "start": "3016349",
    "end": "3022710"
  },
  {
    "text": "and custom actions and so these all have a one hour timeout just FYI",
    "start": "3022710",
    "end": "3028640"
  },
  {
    "text": "then for approvals you've got a seven-day timeout so if you've got a",
    "start": "3028640",
    "end": "3034170"
  },
  {
    "text": "manual approval or if you automated the manual approval it'll automatically time out and fail your pipeline run within",
    "start": "3034170",
    "end": "3039960"
  },
  {
    "text": "seven days so here's an example of using code pipeline to trigger approvals to",
    "start": "3039960",
    "end": "3046859"
  },
  {
    "start": "3042000",
    "end": "3042000"
  },
  {
    "text": "trigger tests so again you've got an approval stage here and that triggers an SMS topic the SNS topic",
    "start": "3046859",
    "end": "3054570"
  },
  {
    "text": "triggers a lambda function the lambda function then goes out and what it does",
    "start": "3054570",
    "end": "3062310"
  },
  {
    "text": "is it's going to you can check Claude watch much for example and say okay I've done this",
    "start": "3062310",
    "end": "3069680"
  },
  {
    "text": "deployment is CPU usage healthy is my response time healthy like whatever it is that you're keeping track of in club",
    "start": "3069680",
    "end": "3075740"
  },
  {
    "text": "watch and if it is then hit approve automatically so the way you would do that is when you configure the manual",
    "start": "3075740",
    "end": "3081470"
  },
  {
    "text": "approval there's a field for SNS topic so you put in your s and that's topic in there and then you add in the URL for",
    "start": "3081470",
    "end": "3088310"
  },
  {
    "text": "review and the comments in the comments we've actually put in the approval data",
    "start": "3088310",
    "end": "3093470"
  },
  {
    "text": "that we are lambda functions going to need in JSON format and so the lambda",
    "start": "3093470",
    "end": "3098540"
  },
  {
    "text": "function it's going to take a look at the these metrics and it's going to test",
    "start": "3098540",
    "end": "3103850"
  },
  {
    "text": "against them and so the way it's gonna work is we've triggered a change that",
    "start": "3103850",
    "end": "3109510"
  },
  {
    "start": "3104000",
    "end": "3104000"
  },
  {
    "text": "change triggers my SNS topic which goes to my lambda function and it can store",
    "start": "3109510",
    "end": "3115850"
  },
  {
    "text": "this data in DynamoDB which is a nice equal data store and we've got a different lambda function that triggers",
    "start": "3115850",
    "end": "3122540"
  },
  {
    "text": "off of new data being put in this DynamoDB table and so it's going to evaluate the deploy against the metrics",
    "start": "3122540",
    "end": "3127580"
  },
  {
    "text": "that we have and so basically they can actually get triggered off of cloud",
    "start": "3127580",
    "end": "3132830"
  },
  {
    "text": "watch events so clever watch events you can trigger in a schedule so every one minute it's going to evaluate that",
    "start": "3132830",
    "end": "3137900"
  },
  {
    "text": "deploy and it's going to look at cloud watch it's going to look at alarms if",
    "start": "3137900",
    "end": "3143570"
  },
  {
    "text": "any alarms are triggering and basically if it succeeds it is going to go back and improve that change and then you go",
    "start": "3143570",
    "end": "3148910"
  },
  {
    "text": "to production so here's what that",
    "start": "3148910",
    "end": "3156590"
  },
  {
    "text": "function would look like and it's putting the approval data into dynamo DB",
    "start": "3156590",
    "end": "3164510"
  },
  {
    "text": "here and parsing the JSON that we sent to it and so that is that and the",
    "start": "3164510",
    "end": "3173600"
  },
  {
    "text": "evaluate function and they're just looking at this data that's now in",
    "start": "3173600",
    "end": "3179450"
  },
  {
    "text": "dynamo DB and is it going to see if it's approved or not so one final thing here",
    "start": "3179450",
    "end": "3186820"
  },
  {
    "start": "3184000",
    "end": "3184000"
  },
  {
    "text": "so canary deployments so canary deployments they need to have their own",
    "start": "3186820",
    "end": "3193010"
  },
  {
    "text": "metrics stream because if you look at the metrics for like all of your production hosts one host is going to",
    "start": "3193010",
    "end": "3199340"
  },
  {
    "text": "get drowned out right so it's not going to know if that host is unhealthy or not because of its gonna get averaged out so",
    "start": "3199340",
    "end": "3205400"
  },
  {
    "text": "you need to make sure your canary deployments has its own metrics that you're judging it by and it doesn't just",
    "start": "3205400",
    "end": "3211010"
  },
  {
    "text": "go into like the whole Auto scale group or whatever else you've got there so just a summary here again you want to",
    "start": "3211010",
    "end": "3217370"
  },
  {
    "start": "3215000",
    "end": "3215000"
  },
  {
    "text": "segment your production to reduce the impact of a bad change you want to minimize your segmentation at the very",
    "start": "3217370",
    "end": "3223190"
  },
  {
    "text": "least by region but probably more likely you want into a canary deployment per region and you probably want to also",
    "start": "3223190",
    "end": "3230480"
  },
  {
    "text": "segment by availability zones maybe even sub zonal and you want to make sure that",
    "start": "3230480",
    "end": "3237230"
  },
  {
    "text": "each segment is successful before moving on so just one last thing here this really quick as of 2018 November of 2018",
    "start": "3237230",
    "end": "3246250"
  },
  {
    "text": "you can now use one code pipeline to trigger it to employ to multiple regions",
    "start": "3246250",
    "end": "3251330"
  },
  {
    "text": "and you can do this for both greater availability so if you have a global",
    "start": "3251330",
    "end": "3256730"
  },
  {
    "text": "application you've got users around the world now they don't have to go to your one region that you're in so you can have your application multiple regions",
    "start": "3256730",
    "end": "3262850"
  },
  {
    "text": "and lower latency so again if I'm in Japan and my I'm trying to get ten app in Virginia that's gonna take a while",
    "start": "3262850",
    "end": "3269030"
  },
  {
    "text": "right because of latency so now if I'm easily deploying to multiple regions it makes more sense so the way this would",
    "start": "3269030",
    "end": "3274460"
  },
  {
    "start": "3273000",
    "end": "3273000"
  },
  {
    "text": "look like in a pipeline is the same process we've used here but basically at",
    "start": "3274460",
    "end": "3280130"
  },
  {
    "text": "the end of deploying to region 1 we just trigger the same kind of segmentation and the production deploy in region 2",
    "start": "3280130",
    "end": "3286820"
  },
  {
    "text": "and then region three and so on and so forth so let's just summarize what we've learned today",
    "start": "3286820",
    "end": "3292700"
  },
  {
    "text": "and then I'll take some questions so you want to make your pipeline safer so you",
    "start": "3292700",
    "end": "3298040"
  },
  {
    "text": "want to identify your production issues quickly and you can do that with automated notifications and continuous",
    "start": "3298040",
    "end": "3304340"
  },
  {
    "text": "testing you want to add security testing to your pipelines so that comprises of static analysis vulnerability scanning",
    "start": "3304340",
    "end": "3311119"
  },
  {
    "text": "and also the compliance of the pipeline itself and then you want to deploy changes safely so you want to segment",
    "start": "3311119",
    "end": "3316880"
  },
  {
    "text": "your production deployments and also manage your deployment health so make sure that you know whether your",
    "start": "3316880",
    "end": "3322130"
  },
  {
    "text": "deployments are healthy or not and you want to improve your latency and availability of your app by deploying",
    "start": "3322130",
    "end": "3328040"
  },
  {
    "text": "across regions and lastly you want to automatically decide whether you actually want to deploy to production or",
    "start": "3328040",
    "end": "3333680"
  },
  {
    "text": "not so if you have a non-compliant pipeline block it so if you want to",
    "start": "3333680",
    "end": "3339890"
  },
  {
    "start": "3339000",
    "end": "3339000"
  },
  {
    "text": "actually learn how to do some of this stuff specifically the security testing that I talked about today stick around",
    "start": "3339890",
    "end": "3345350"
  },
  {
    "text": "at 1:00 to 4:00 p.m. today there's gonna be a lab that basically allows you to implement automated inspector scans and",
    "start": "3345350",
    "end": "3353390"
  },
  {
    "text": "automated security testing in your code pipeline also just some reinvent sessions that you can watch on YouTube",
    "start": "3353390",
    "end": "3359450"
  },
  {
    "text": "so these are all kind of related to DevOps and see ICD so you probably want",
    "start": "3359450",
    "end": "3364790"
  },
  {
    "text": "to take a look at those and I'll take some questions now but just make sure",
    "start": "3364790",
    "end": "3370730"
  },
  {
    "text": "again you fill out the evaluation survey that's how we know this is actually the first time I've done this talk so that's",
    "start": "3370730",
    "end": "3376369"
  },
  {
    "text": "how we know what we would need to improve and how we can do better so yeah thank you and any any questions yes over",
    "start": "3376369",
    "end": "3383840"
  },
  {
    "text": "there here yeah",
    "start": "3383840",
    "end": "3389410"
  },
  {
    "text": "mm-hmm",
    "start": "3391400",
    "end": "3394328"
  },
  {
    "text": "yes",
    "start": "3396720",
    "end": "3399720"
  },
  {
    "text": "yeah so the question is could commit does not have pre receive hooks so what",
    "start": "3407560",
    "end": "3414560"
  },
  {
    "text": "are some examples that where you would do that on your laptop instead if they're a pretty safe oh yeah so yeah",
    "start": "3414560",
    "end": "3420260"
  },
  {
    "text": "get Siva and get secrets as the plug-in that we have that basically when you do a commit it'll automatically scan for each of us credentials see I don't know",
    "start": "3420260",
    "end": "3427070"
  },
  {
    "text": "any specific examples but oh so we have customers who like for code pipeline it's not you don't have to use code",
    "start": "3427070",
    "end": "3432350"
  },
  {
    "text": "commit you use github you can also trigger off of ECR and s3 repository so",
    "start": "3432350",
    "end": "3437570"
  },
  {
    "text": "if you're using just like get lab or some you know get thing that's not github or a code commit you can just",
    "start": "3437570",
    "end": "3443869"
  },
  {
    "text": "have it do a post receive hook that puts it the commit into s3 and that's what triggers your pipeline so you're not",
    "start": "3443869",
    "end": "3450619"
  },
  {
    "text": "locked into using could yeah and what",
    "start": "3450619",
    "end": "3457070"
  },
  {
    "text": "anything you can fare anything can send that is three so yeah that's what I yeah any other questions so from the twitch",
    "start": "3457070",
    "end": "3464810"
  },
  {
    "text": "stream they want to know do you offer consumer Cloud Storage do we offer consumer cloud storage so yet we have",
    "start": "3464810",
    "end": "3473750"
  },
  {
    "text": "several storage services so probably the most applicable would be we have s3 so if you have an s3 bucket you can you",
    "start": "3473750",
    "end": "3482030"
  },
  {
    "text": "know upload whatever you want it's an object store into that bucket and you can configure that object to be public",
    "start": "3482030",
    "end": "3487550"
  },
  {
    "text": "or private also we have a service called work Docs so work Docs is basically it's tied to",
    "start": "3487550",
    "end": "3495980"
  },
  {
    "text": "an active directory instance and so that that provides your authentication and",
    "start": "3495980",
    "end": "3501020"
  },
  {
    "text": "you it's a you know once you get in there's a sink agent so you can install on your laptop you can upload it",
    "start": "3501020",
    "end": "3507500"
  },
  {
    "text": "automatically syncs the files in the work Doc's folder up there and then you can share it with other people or in",
    "start": "3507500",
    "end": "3512900"
  },
  {
    "text": "your organization or create a shareable link to it so those are probably the two services that are most applicable to",
    "start": "3512900",
    "end": "3518960"
  },
  {
    "text": "consumer cloud storage we have yes",
    "start": "3518960",
    "end": "3525310"
  },
  {
    "text": "sorry boys last due to the deployment to the what do we do deployments to",
    "start": "3527719",
    "end": "3532890"
  },
  {
    "text": "kubernetes yes so for code deploy it supports basically ECS for deployments",
    "start": "3532890",
    "end": "3542670"
  },
  {
    "text": "for the containers also easy to on-premise and service if you want to deploy to kubernetes what I would",
    "start": "3542670",
    "end": "3548789"
  },
  {
    "text": "recommend is use code build for that so in code build you can run any kinds of commands so you kind of a code build",
    "start": "3548789",
    "end": "3554190"
  },
  {
    "text": "project that just you know uses the kubernetes CLI to trigger deployment that's what I would do right now yes",
    "start": "3554190",
    "end": "3562579"
  },
  {
    "text": "yeah okay so the question is for control",
    "start": "3568039",
    "end": "3574960"
  },
  {
    "text": "tower if you want to do something like restrict this SM access is that something you can do as a guardrail and control tower so control tower is not",
    "start": "3574960",
    "end": "3580570"
  },
  {
    "text": "out yet it's in preview something 100% sure but you can definitely have an IM",
    "start": "3580570",
    "end": "3586720"
  },
  {
    "text": "policy that you and for you know that gives you or doesn't give you access to",
    "start": "3586720",
    "end": "3591760"
  },
  {
    "text": "SSM and i would imagine you can have a confirmation template that you know enforces that that in",
    "start": "3591760",
    "end": "3598840"
  },
  {
    "text": "every account you have creates a user with us time access in creates other users without it so it seems like",
    "start": "3598840",
    "end": "3604150"
  },
  {
    "text": "something you should be able to do control tower what once that's out yes",
    "start": "3604150",
    "end": "3609150"
  },
  {
    "text": "any other questions yes yeah you so the",
    "start": "3610230",
    "end": "3617530"
  },
  {
    "text": "question is do you ever configure any kind of stress tests on the canary yeah you can so one thing I've done is we",
    "start": "3617530",
    "end": "3624190"
  },
  {
    "text": "have a partner called blaze meter so it's a third-party testing tool and you can load the J meter or other types of",
    "start": "3624190",
    "end": "3630720"
  },
  {
    "text": "common load testing tools or load testing scripts into it and so and you",
    "start": "3630720",
    "end": "3636670"
  },
  {
    "text": "can trigger that load test through an API so after your canary deploy you can have another action that triggers blaze",
    "start": "3636670",
    "end": "3643630"
  },
  {
    "text": "meter against that canary instance and if it gets marked as and you can define",
    "start": "3643630",
    "end": "3648640"
  },
  {
    "text": "in the low test what's considered failure so if the response time gets over a certain amount of time or if it",
    "start": "3648640",
    "end": "3654490"
  },
  {
    "text": "just stops responding over this level of concurrent users it gets marked as a",
    "start": "3654490",
    "end": "3659500"
  },
  {
    "text": "failure and your deploy stops you can also just do that natively like you could have a you know like a lambda",
    "start": "3659500",
    "end": "3664870"
  },
  {
    "text": "function that generates synthetic traffic or you can have a lambda function that spins up an ec2 instance",
    "start": "3664870",
    "end": "3670390"
  },
  {
    "text": "with J meter on it and triggers a load test yet so yes there are a bunch of ways to trigger stress tests yes over",
    "start": "3670390",
    "end": "3675400"
  },
  {
    "text": "here yes sir",
    "start": "3675400",
    "end": "3682180"
  },
  {
    "text": "what about integration of other testing tools so there's a set of test tools that are integrated with code pipeline",
    "start": "3682180",
    "end": "3688510"
  },
  {
    "text": "if it's not natively integrated you can do either a custom action or a lambda",
    "start": "3688510",
    "end": "3694570"
  },
  {
    "text": "function so lambda function you just trigger lambda function that triggers you know whatever third-party tool",
    "start": "3694570",
    "end": "3699790"
  },
  {
    "text": "you're using or if you have the third-party tool is running on an ec2 instance you can have it basically you you write",
    "start": "3699790",
    "end": "3707130"
  },
  {
    "text": "a plugin that runs on your ec2 instance and talks to code pipeline so when that",
    "start": "3707130",
    "end": "3712799"
  },
  {
    "text": "stage happens it triggers the custom action that then talks to your ec2 instance that they shoot instance",
    "start": "3712799",
    "end": "3718799"
  },
  {
    "text": "basically just checking in with a pipeline do I need to run my custom action or not and when it when the",
    "start": "3718799",
    "end": "3723900"
  },
  {
    "text": "pipeline tells it yes you do it'll trigger that testing tool on their instance so yeah there are ways to integrate any kind of testing tool with",
    "start": "3723900",
    "end": "3730440"
  },
  {
    "text": "code pipeline yes yep",
    "start": "3730440",
    "end": "3745009"
  },
  {
    "text": "yes",
    "start": "3750989",
    "end": "3753989"
  },
  {
    "text": "right so the question is do we plan on",
    "start": "3757680",
    "end": "3762839"
  },
  {
    "text": "extending inspector to be able to do things with containers instead of using a third party tool so we like we",
    "start": "3762839",
    "end": "3770490"
  },
  {
    "text": "typically don't talk about like you know future roadmaps and stuff for that but I've heard that requests a lot so the",
    "start": "3770490",
    "end": "3776039"
  },
  {
    "text": "way we decide whether we're gonna add a new feature or not is just based on how many people ask and customer feedback so",
    "start": "3776039",
    "end": "3781799"
  },
  {
    "text": "that's something I can certainly I'll I'll add in I'll +1 that request which I've seen before to the inspector team",
    "start": "3781799",
    "end": "3786809"
  },
  {
    "text": "and you know that's that's basically they'll prioritize accordingly okay I",
    "start": "3786809",
    "end": "3795329"
  },
  {
    "text": "think we're out of time but I am gonna stick around so if you have any questions I'll be out there to answer",
    "start": "3795329",
    "end": "3801690"
  },
  {
    "text": "them thank you everyone [Applause]",
    "start": "3801690",
    "end": "3806059"
  }
]