[
  {
    "text": "Hello everyone",
    "start": "6766",
    "end": "9033"
  },
  {
    "text": "I'm Shimada, a Solutions Architect at AWS",
    "start": "9033",
    "end": "12166"
  },
  {
    "text": "In this session, I'll introduce Amazon DynamoDB's change",
    "start": "13533",
    "end": "16533"
  },
  {
    "text": "data capture. DynamoDB",
    "start": "16533",
    "end": "22100"
  },
  {
    "text": "supports item-level change data capture, allowing changes to be",
    "start": "22766",
    "end": "27400"
  },
  {
    "text": "streamed to applications in near real-time,",
    "start": "28000",
    "end": "31200"
  },
  {
    "text": "enabling processing based on that content. By creating change",
    "start": "32166",
    "end": "38266"
  },
  {
    "text": "data capture, for example,",
    "start": "38300",
    "end": "41466"
  },
  {
    "text": "every time new user information is inserted as a record in the user table,",
    "start": "42033",
    "end": "47333"
  },
  {
    "text": "you can create an application that sends",
    "start": "48766",
    "end": "52133"
  },
  {
    "text": "a welcome message to that user",
    "start": "52133",
    "end": "55133"
  },
  {
    "text": "First, let's look at what kind of information",
    "start": "57666",
    "end": "60733"
  },
  {
    "text": "is included in DynamoDB streams",
    "start": "61000",
    "end": "64000"
  },
  {
    "text": "DynamoDB",
    "start": "67366",
    "end": "68266"
  },
  {
    "text": "streams contain JSON objects with various attributes",
    "start": "68266",
    "end": "73533"
  },
  {
    "text": "These JSON object attributes allow you to",
    "start": "76000",
    "end": "79000"
  },
  {
    "text": "check which parts of the data were changed",
    "start": "79666",
    "end": "84000"
  },
  {
    "text": "The main attributes include EventName, which indicates the type of data change performed,",
    "start": "84000",
    "end": "93166"
  },
  {
    "text": "EventName",
    "start": "93966",
    "end": "96966"
  },
  {
    "text": "EventSource, which indicates",
    "start": "97166",
    "end": "99600"
  },
  {
    "text": "the source service,",
    "start": "99600",
    "end": "102600"
  },
  {
    "text": "awsRegion, which indicates the region,",
    "start": "103066",
    "end": "106066"
  },
  {
    "text": "EventSourceArn, which indicates",
    "start": "107900",
    "end": "110700"
  },
  {
    "text": "the source ARN,",
    "start": "110700",
    "end": "113700"
  },
  {
    "text": "and most importantly, an attribute called DynamoDB. Within the DynamoDB",
    "start": "114600",
    "end": "125000"
  },
  {
    "text": "attribute, there is information",
    "start": "125000",
    "end": "128000"
  },
  {
    "text": "about the changed DynamoDB record",
    "start": "128066",
    "end": "130799"
  },
  {
    "text": "Specifically, it includes",
    "start": "130800",
    "end": "135700"
  },
  {
    "text": "ApproximateCreationDateTime, which is the approximate creation time in milliseconds,",
    "start": "136366",
    "end": "139366"
  },
  {
    "text": "ApproximateCreationDateTime,",
    "start": "139900",
    "end": "142900"
  },
  {
    "text": "NewImage, which shows the entire item after the change,",
    "start": "145333",
    "end": "148333"
  },
  {
    "text": "NewImage,",
    "start": "148500",
    "end": "151500"
  },
  {
    "text": "sequence number,",
    "start": "151600",
    "end": "153766"
  },
  {
    "text": "size in bytes,",
    "start": "153766",
    "end": "155766"
  },
  {
    "text": "and stream view type",
    "start": "155766",
    "end": "158766"
  },
  {
    "text": "The stream view type allows you to specify the type of information",
    "start": "161933",
    "end": "165333"
  },
  {
    "text": "to be retrieved in the stream when data changes",
    "start": "166133",
    "end": "170066"
  },
  {
    "text": "There are four options: OLD_IMAGE, which retrieves",
    "start": "173000",
    "end": "178200"
  },
  {
    "text": "the entire item before the change,",
    "start": "178200",
    "end": "181200"
  },
  {
    "text": "NEW_IMAGE, which retrieves",
    "start": "183033",
    "end": "185933"
  },
  {
    "text": "the entire item after the change,",
    "start": "185933",
    "end": "188933"
  },
  {
    "text": "NEW_AND_OLD_IMAGE, which retrieves both the old and new versions of the entire item,",
    "start": "189566",
    "end": "192500"
  },
  {
    "text": "NEW_AND_OLD_IMAGE,",
    "start": "192500",
    "end": "195500"
  },
  {
    "text": "and KEY_ONLY, which retrieves only",
    "start": "196600",
    "end": "199200"
  },
  {
    "text": "the changed keys",
    "start": "199200",
    "end": "202200"
  },
  {
    "text": "Next, I'll introduce two options",
    "start": "206266",
    "end": "209566"
  },
  {
    "text": "for handling streams in DynamoDB",
    "start": "209866",
    "end": "212866"
  },
  {
    "text": "The first is DynamoDB",
    "start": "216533",
    "end": "218200"
  },
  {
    "text": "Streams. With DynamoDB Streams,",
    "start": "218200",
    "end": "225966"
  },
  {
    "text": "when changes are recorded in DynamoDB from the application,",
    "start": "226066",
    "end": "230700"
  },
  {
    "text": "that change information is sent to DynamoDB Streams. When using AWS Lambda,",
    "start": "231833",
    "end": "240633"
  },
  {
    "text": "Lambda polls the stream four times per second",
    "start": "240666",
    "end": "245733"
  },
  {
    "text": "If the record matches the conditions",
    "start": "250266",
    "end": "252633"
  },
  {
    "text": "set in Lambda's event filter, the Lambda function",
    "start": "252633",
    "end": "256299"
  },
  {
    "text": "is executed. You can configure up to two Lambda",
    "start": "256300",
    "end": "263599"
  },
  {
    "text": "functions for a single stream. The second option is",
    "start": "263600",
    "end": "271966"
  },
  {
    "text": "Kinesis Data Streams. With Kinesis Data Streams,",
    "start": "271966",
    "end": "279033"
  },
  {
    "text": "an external service called a data replicator",
    "start": "279600",
    "end": "283100"
  },
  {
    "text": "continuously retrieves information from DynamoDB tables and",
    "start": "283733",
    "end": "287800"
  },
  {
    "text": "adds new records to the stream. In the case of Kinesis",
    "start": "288900",
    "end": "295533"
  },
  {
    "text": "Data Streams, Lambda polls once per second and",
    "start": "295533",
    "end": "300400"
  },
  {
    "text": "retrieves records from the stream. If it matches the conditions\nset in Lambda's event filter,",
    "start": "300766",
    "end": "311666"
  },
  {
    "text": "the Lambda function is executed. For a single stream,",
    "start": "311666",
    "end": "320065"
  },
  {
    "text": "you can configure up to five Lambda functions",
    "start": "320066",
    "end": "323533"
  },
  {
    "text": "Compared to DynamoDB Streams,",
    "start": "328833",
    "end": "331000"
  },
  {
    "text": "Kinesis Data Streams has the characteristic that records",
    "start": "331000",
    "end": "335033"
  },
  {
    "text": "put into the stream may be out of order",
    "start": "335033",
    "end": "339033"
  },
  {
    "text": "This means that if you want to maintain the order of records,",
    "start": "341233",
    "end": "344333"
  },
  {
    "text": "you need to update the order of records on the application side",
    "start": "344900",
    "end": "349500"
  },
  {
    "text": "This can be achieved by using",
    "start": "352466",
    "end": "355133"
  },
  {
    "text": "one of the attributes included in DynamoDB streams that I mentioned earlier,",
    "start": "355133",
    "end": "359000"
  },
  {
    "text": "ApproximateCreationDateTime",
    "start": "359900",
    "end": "364333"
  },
  {
    "text": "Also, with Kinesis Data Streams,",
    "start": "367100",
    "end": "370100"
  },
  {
    "text": "there's a possibility of duplicate records, and if necessary, you need to",
    "start": "370233",
    "end": "375833"
  },
  {
    "text": "implement deduplication processing on the application side. With DynamoDB",
    "start": "376200",
    "end": "384400"
  },
  {
    "text": "Streams, you don't need to implement record order control or",
    "start": "384400",
    "end": "387800"
  },
  {
    "text": "deduplication processing on the application side",
    "start": "388166",
    "end": "392300"
  },
  {
    "text": "As shown on the left side of the screen,",
    "start": "393733",
    "end": "394733"
  },
  {
    "text": "with DynamoDB Streams,",
    "start": "394733",
    "end": "397833"
  },
  {
    "text": "the record for changes made at time t0,",
    "start": "397966",
    "end": "402733"
  },
  {
    "text": "the blue-framed record, is processed first, and then",
    "start": "403733",
    "end": "407033"
  },
  {
    "text": "the record for changes made at t1, after key 0,",
    "start": "409333",
    "end": "413766"
  },
  {
    "text": "the red-framed record, is processed",
    "start": "414866",
    "end": "417866"
  },
  {
    "text": "On the other hand, with Kinesis",
    "start": "420000",
    "end": "421233"
  },
  {
    "text": "Data Streams, the record for changes made at time t1",
    "start": "421233",
    "end": "427166"
  },
  {
    "text": "may come before the record for changes made at t0",
    "start": "428400",
    "end": "431400"
  },
  {
    "text": "This is the comparison table between DynamoDB Streams and",
    "start": "431700",
    "end": "440400"
  },
  {
    "text": "Kinesis Data Streams. There are many points to consider, but",
    "start": "440666",
    "end": "447599"
  },
  {
    "text": "for applications where the order of records is important,",
    "start": "447600",
    "end": "452900"
  },
  {
    "text": "DynamoDB Streams, which maintains records",
    "start": "453600",
    "end": "456033"
  },
  {
    "text": "in the same order as the actual changes, might be better",
    "start": "456033",
    "end": "459932"
  },
  {
    "text": "However, in cases where you accumulate data for a certain period",
    "start": "462766",
    "end": "465800"
  },
  {
    "text": "and retrieve statistical information, for example, where the order of records",
    "start": "466400",
    "end": "470932"
  },
  {
    "text": "doesn't affect the result, it may not matter",
    "start": "471200",
    "end": "474200"
  },
  {
    "text": "Furthermore, for instance,",
    "start": "476333",
    "end": "478566"
  },
  {
    "text": "if you already have a third-party tool",
    "start": "478566",
    "end": "481133"
  },
  {
    "text": "for gathering that statistical information that integrates with Kinesis Data Streams,",
    "start": "481133",
    "end": "484800"
  },
  {
    "text": "there might be advantages to using Kinesis Data Streams",
    "start": "484800",
    "end": "488199"
  },
  {
    "text": "in such cases",
    "start": "488200",
    "end": "491200"
  },
  {
    "text": "From the perspective of data retention period, for example,",
    "start": "494833",
    "end": "497833"
  },
  {
    "text": "if you need to retain data for a long period like several months, using Kinesis",
    "start": "498333",
    "end": "503866"
  },
  {
    "text": "Data Streams might be better. Kinesis Data Streams can",
    "start": "503866",
    "end": "510733"
  },
  {
    "text": "retain data for up to one year,",
    "start": "510966",
    "end": "513966"
  },
  {
    "text": "while DynamoDB Streams has a maximum of 24 hours",
    "start": "514766",
    "end": "519166"
  },
  {
    "text": "If for some reason, the processing of stream data",
    "start": "522466",
    "end": "525466"
  },
  {
    "text": "cannot be done within 24 hours of the data change,",
    "start": "526033",
    "end": "530333"
  },
  {
    "text": "that data will be lost. Regarding the number of consumers,",
    "start": "530833",
    "end": "539966"
  },
  {
    "text": "Kinesis Data Streams can have 5,",
    "start": "540400",
    "end": "543400"
  },
  {
    "text": "while DynamoDB Streams can have 2 consumers",
    "start": "543833",
    "end": "548100"
  },
  {
    "text": "However, with Kinesis Data Streams,",
    "start": "550933",
    "end": "553933"
  },
  {
    "text": "if you're using the Kinesis Client Library",
    "start": "554200",
    "end": "557200"
  },
  {
    "text": "version and",
    "start": "557233",
    "end": "559699"
  },
  {
    "text": "enhanced fan-out feature,",
    "start": "559700",
    "end": "562700"
  },
  {
    "text": "you can configure up to",
    "start": "563333",
    "end": "566166"
  },
  {
    "text": "20 consumers for a single data stream. Regarding throughput limits, Kinesis Data Streams has",
    "start": "566166",
    "end": "578200"
  },
  {
    "text": "virtually no limit. For DynamoDB Streams,",
    "start": "578766",
    "end": "586333"
  },
  {
    "text": "there are some service quota settings. In terms of durability, both services",
    "start": "586600",
    "end": "596066"
  },
  {
    "text": "use multiple availability zones to",
    "start": "596666",
    "end": "599666"
  },
  {
    "text": "handle all types of failures and",
    "start": "599933",
    "end": "602466"
  },
  {
    "text": "ensure that the service continues to operate without interruption",
    "start": "602466",
    "end": "605900"
  },
  {
    "text": "The delivery model",
    "start": "609400",
    "end": "610133"
  },
  {
    "text": "for both is pull-based. Kinesis",
    "start": "610133",
    "end": "615066"
  },
  {
    "text": "Data Streams uses HTTPS or HTTP",
    "start": "615066",
    "end": "620032"
  },
  {
    "text": "version 2",
    "start": "620033",
    "end": "623033"
  },
  {
    "text": "However, when using enhanced fan-out,",
    "start": "625266",
    "end": "628266"
  },
  {
    "text": "it uses the SubscribeToShardAPI",
    "start": "629066",
    "end": "632066"
  },
  {
    "text": "to push records using HTTP version 2",
    "start": "632600",
    "end": "635865"
  },
  {
    "text": "On the other hand, DynamoDB Streams",
    "start": "640433",
    "end": "643100"
  },
  {
    "text": "uses the GetRecordsAPI. For Kinesis",
    "start": "643100",
    "end": "652500"
  },
  {
    "text": "Client Library support versions, Kinesis Data Streams",
    "start": "652500",
    "end": "657033"
  },
  {
    "text": "supports Kinesis Client Library versions 1 and 2,",
    "start": "658100",
    "end": "660332"
  },
  {
    "text": "while DynamoDB Streams,",
    "start": "660333",
    "end": "665233"
  },
  {
    "text": "as of December 2024, only supports Kinesis",
    "start": "665600",
    "end": "669133"
  },
  {
    "text": "Client Library version 1. Regarding duplicate records and",
    "start": "669133",
    "end": "677566"
  },
  {
    "text": "record order, there are differences",
    "start": "678033",
    "end": "681333"
  },
  {
    "text": "as mentioned in the previous pages",
    "start": "681333",
    "end": "684333"
  },
  {
    "text": "Up to this point,",
    "start": "689466",
    "end": "690466"
  },
  {
    "text": "we've discussed the use of DynamoDB's change data capture",
    "start": "690466",
    "end": "693700"
  },
  {
    "text": "Next, we'll introduce",
    "start": "693700",
    "end": "697800"
  },
  {
    "text": "event-driven architectures that utilize change data capture,",
    "start": "697800",
    "end": "701933"
  },
  {
    "text": "focusing on how to use this",
    "start": "702366",
    "end": "705066"
  },
  {
    "text": "One of DynamoDB's features is",
    "start": "711266",
    "end": "713800"
  },
  {
    "text": "Time to Live. This automatically",
    "start": "713800",
    "end": "720166"
  },
  {
    "text": "deletes specified data. By setting a numeric value",
    "start": "720200",
    "end": "727300"
  },
  {
    "text": "in epoch timestamp format to the TTL attribute,",
    "start": "727733",
    "end": "730532"
  },
  {
    "text": "you can set the time to delete",
    "start": "730533",
    "end": "733666"
  },
  {
    "text": "that record. DynamoDB",
    "start": "733666",
    "end": "739666"
  },
  {
    "text": "scans all tables on a best-effort basis and",
    "start": "739900",
    "end": "742900"
  },
  {
    "text": "determines whether the TTL of those records has expired",
    "start": "743866",
    "end": "748200"
  },
  {
    "text": "If it has expired,",
    "start": "750866",
    "end": "753166"
  },
  {
    "text": "that data is automatically deleted",
    "start": "753166",
    "end": "756166"
  },
  {
    "text": "Typically, expired",
    "start": "758700",
    "end": "760366"
  },
  {
    "text": "items are deleted within a few days",
    "start": "760366",
    "end": "763766"
  },
  {
    "text": "Importantly, if DynamoDB Streams is enabled,",
    "start": "767100",
    "end": "771733"
  },
  {
    "text": "when a deletion occurs due to TTL,",
    "start": "773366",
    "end": "775933"
  },
  {
    "text": "an event is generated",
    "start": "775933",
    "end": "778700"
  },
  {
    "text": "By capturing this event, for example,",
    "start": "781100",
    "end": "784466"
  },
  {
    "text": "you can save data that's being deleted from DynamoDB",
    "start": "784833",
    "end": "788666"
  },
  {
    "text": "to S3 for long-term archiving. With DynamoDB Streams and",
    "start": "788666",
    "end": "803466"
  },
  {
    "text": "Kinesis Data Streams, you can trigger Lambda functions",
    "start": "803466",
    "end": "808100"
  },
  {
    "text": "every time data changes",
    "start": "808800",
    "end": "811800"
  },
  {
    "text": "Using this, when an item in a DynamoDB table",
    "start": "815066",
    "end": "819000"
  },
  {
    "text": "changes, you can trigger a Lambda function to",
    "start": "819000",
    "end": "822566"
  },
  {
    "text": "generate simple real-time aggregations",
    "start": "823200",
    "end": "827566"
  },
  {
    "text": "of the data in the table",
    "start": "827566",
    "end": "830566"
  },
  {
    "text": "Also, change data capture records can be",
    "start": "834500",
    "end": "837433"
  },
  {
    "text": "sent from Lambda to Kinesis Data Firehose, and",
    "start": "837433",
    "end": "840665"
  },
  {
    "text": "that information can be",
    "start": "841800",
    "end": "843865"
  },
  {
    "text": "stored in Amazon Simple Storage Service, S3",
    "start": "843866",
    "end": "848266"
  },
  {
    "text": "By querying the data in S3",
    "start": "850700",
    "end": "853666"
  },
  {
    "text": "using Amazon Athena, you can perform ad-hoc queries",
    "start": "853666",
    "end": "858366"
  },
  {
    "text": "and aggregation-type queries on the dataset",
    "start": "858866",
    "end": "863133"
  },
  {
    "text": "Additionally, which service to send data to",
    "start": "868900",
    "end": "871566"
  },
  {
    "text": "from the Lambda function",
    "start": "871566",
    "end": "874300"
  },
  {
    "text": "can be chosen based on the use case",
    "start": "874300",
    "end": "877300"
  },
  {
    "text": "Earlier we stored data in S3, but for example,",
    "start": "879100",
    "end": "883699"
  },
  {
    "text": "you can also store data in Amazon Aurora or ElastiCache",
    "start": "884600",
    "end": "887433"
  },
  {
    "text": "among others",
    "start": "887433",
    "end": "890433"
  },
  {
    "text": "Also, if you need to notify",
    "start": "895333",
    "end": "897700"
  },
  {
    "text": "downstream applications of changes,",
    "start": "897700",
    "end": "900700"
  },
  {
    "text": "you can call other applications from Lambda to",
    "start": "901000",
    "end": "904000"
  },
  {
    "text": "notify them of changes. DynamoDB Streams can not only be directly\nconnected to Lambda",
    "start": "904133",
    "end": "916200"
  },
  {
    "text": "for data processing, but can also",
    "start": "916500",
    "end": "919266"
  },
  {
    "text": "use EventBridge Pipes",
    "start": "919266",
    "end": "922266"
  },
  {
    "text": "By doing this, when there are changes in Lambda,",
    "start": "925933",
    "end": "928933"
  },
  {
    "text": "you can invoke data supported by EventBridge Pipes",
    "start": "929633",
    "end": "931933"
  },
  {
    "text": "or use EventBridge Pipes as shown in the diagram to",
    "start": "931933",
    "end": "937600"
  },
  {
    "text": "publish changes to multiple services",
    "start": "938100",
    "end": "942532"
  },
  {
    "text": "Details about EventBridge Pipes are provided here",
    "start": "948066",
    "end": "951899"
  },
  {
    "text": "Please refer to the user guide and re:Invent session videos",
    "start": "952366",
    "end": "955833"
  },
  {
    "text": "In this video, we've looked at the differences between Amazon DynamoDB",
    "start": "960933",
    "end": "963500"
  },
  {
    "text": "Streams and Kinesis Data Streams",
    "start": "963500",
    "end": "966666"
  },
  {
    "text": "I hope this serves as a reference when considering",
    "start": "966666",
    "end": "971366"
  },
  {
    "text": "change data capture, to help you choose",
    "start": "971366",
    "end": "974500"
  },
  {
    "text": "the option that best fits your requirements",
    "start": "974500",
    "end": "977500"
  },
  {
    "text": "Thank you for watching",
    "start": "977900",
    "end": "979900"
  }
]