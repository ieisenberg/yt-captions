[
  {
    "start": "0",
    "end": "125000"
  },
  {
    "text": "hey good morning everybody we're gonna get started here so folks come in try to grab a seat plenty open thank you for",
    "start": "30",
    "end": "6839"
  },
  {
    "text": "all coming out to this session this is SRV 302 building CIC deep I pipelines for service applications congratulations",
    "start": "6839",
    "end": "13860"
  },
  {
    "text": "you're the the few the proud that have survived a week here out in Vegas for reinvent survived last night's replay",
    "start": "13860",
    "end": "20460"
  },
  {
    "text": "out here for an early session agreed agreed the good thing is that Ben and I we've",
    "start": "20460",
    "end": "27269"
  },
  {
    "text": "extended this talk a little bit we should have you out by I think around 3:30 this afternoon so no problems there",
    "start": "27269",
    "end": "33090"
  },
  {
    "text": "no this again my name is Chris mines a little bit here at Ben Keough from our robots gonna come up and talk about some",
    "start": "33090",
    "end": "38670"
  },
  {
    "text": "awesome stuff that our robot does in the service space but that let's get started Bob so again Chris bones was senior",
    "start": "38670",
    "end": "45809"
  },
  {
    "text": "developer advocate for server lists for AWS part of the lamda API gateway product team been in AWS for a little",
    "start": "45809",
    "end": "52020"
  },
  {
    "text": "over five years across a couple different roles but a previous element time and AWS I came from a much more kind of standard traditional IT system",
    "start": "52020",
    "end": "60359"
  },
  {
    "text": "in operations nowadays we call it DevOps background spend a lot of time in data centers spend a lot of time managing you",
    "start": "60359",
    "end": "67290"
  },
  {
    "text": "know large fleets of Linux hosts and maybe about a year and a half ago little bit longer I came to realize that",
    "start": "67290",
    "end": "72840"
  },
  {
    "text": "all the things I had done then more or less the entire beginning of my career were largely made irrelevant by this",
    "start": "72840",
    "end": "79619"
  },
  {
    "text": "thing called service and so for the last just about 10 months or so I've had the",
    "start": "79619",
    "end": "84950"
  },
  {
    "text": "ability various the locker the pleasure to be able to represent the service space for AWS so you know I put this",
    "start": "84950",
    "end": "92549"
  },
  {
    "text": "slide in here because sometimes originally this talk was planned to be on Monday and on Monday to talk about service for many of you would have been",
    "start": "92549",
    "end": "98790"
  },
  {
    "text": "a new concept you would have been hearing about it you know for the first couple times that beginning of the week but here we are in day 5 of reinvent and",
    "start": "98790",
    "end": "105720"
  },
  {
    "text": "we've been talking about server lists in every keynote in many of our sessions and so many of you probably have a good",
    "start": "105720",
    "end": "110729"
  },
  {
    "text": "strong idea of what service is and what it means and so we see this this concept",
    "start": "110729",
    "end": "116009"
  },
  {
    "text": "and this paradigm around service applications becoming one of the quickest and hottest growing trends at",
    "start": "116009",
    "end": "121590"
  },
  {
    "text": "least here for us at AWS but up pretty much across the industry and when we talk about service applications there's",
    "start": "121590",
    "end": "127680"
  },
  {
    "start": "125000",
    "end": "125000"
  },
  {
    "text": "kind of a very basic kind of three column model for general architectural patterns that we see",
    "start": "127680",
    "end": "133710"
  },
  {
    "text": "a service application is effectively made up of an event source that is then going to invoke a lambda function and",
    "start": "133710",
    "end": "139320"
  },
  {
    "text": "then that lambda function is going to do something maybe it's talking to a database or datastore or Q or maybe just",
    "start": "139320",
    "end": "145830"
  },
  {
    "text": "its business logic lives entirely inside of lambda itself yesterday invertors keynote he announced",
    "start": "145830",
    "end": "152430"
  },
  {
    "text": "how we're going to have go coming pretty soon but as of right now today you can use node.js Python Java and c-sharp",
    "start": "152430",
    "end": "159360"
  },
  {
    "text": "inside of lambda now we're also be launching a dotnet core version to write",
    "start": "159360",
    "end": "164820"
  },
  {
    "text": "on the same time that go comes out just after the start of the new year and so these event sources that we have could",
    "start": "164820",
    "end": "170040"
  },
  {
    "text": "be things such as changes in data state requests in endpoints or changes in resource state so there's a lot of",
    "start": "170040",
    "end": "175710"
  },
  {
    "text": "different ways that you could glue together serverless applications and so this week you've heard about everything from how you can build service web",
    "start": "175710",
    "end": "181980"
  },
  {
    "text": "applications to IOT workloads to streaming data and analytics to operational development tooling all of",
    "start": "181980",
    "end": "188250"
  },
  {
    "text": "these things that can plug together and invoke lambda functions helping you build these service applications now the",
    "start": "188250",
    "end": "196080"
  },
  {
    "text": "other part to this talk is about CI and CD and so from the AWS perspective when",
    "start": "196080",
    "end": "201150"
  },
  {
    "text": "we talk about CIN CD it's kind of a couple of core concepts that I want to set kind of our definition for how we",
    "start": "201150",
    "end": "206430"
  },
  {
    "text": "think of them so the first is that the release process has what we consider four major phases so we have a source",
    "start": "206430",
    "end": "212160"
  },
  {
    "text": "phase which is where you're gonna check in your code such as your Java files or node you ask your Python whatever it is",
    "start": "212160",
    "end": "217380"
  },
  {
    "text": "you might also do something like peer review and actually at AWS and Amazon we lean very heavily on peer review as a",
    "start": "217380",
    "end": "223110"
  },
  {
    "text": "requirement of our development pipelines and then gonna have some sort of it build and I use build here you know in a",
    "start": "223110",
    "end": "228360"
  },
  {
    "text": "very loose sense obviously things like nodejs and python don't need to be compiled like Java or C sharp or other",
    "start": "228360",
    "end": "234000"
  },
  {
    "text": "languages do but in this case we're talking about a phase where your code is going to be looked at in kind of the raw",
    "start": "234000",
    "end": "239460"
  },
  {
    "text": "sense things like unit tests syntax checking minting potentially compilation",
    "start": "239460",
    "end": "244800"
  },
  {
    "text": "and then building of a deployable asset in the case of lambda this is typically packaging things up into a zip file then",
    "start": "244800",
    "end": "252660"
  },
  {
    "text": "we have a test phase now in our test phase we're going to take this build will this build a deployable asset throw",
    "start": "252660",
    "end": "258209"
  },
  {
    "text": "it into some sort of an environment where we can do further integration testing whether that be upstream or downstream things like load testing",
    "start": "258210",
    "end": "265140"
  },
  {
    "text": "security testing and so forth and then lastly production this should be pretty straightforward toss that",
    "start": "265140",
    "end": "270650"
  },
  {
    "text": "thing out into the real world in front of your customers or other services or other things that would interface with",
    "start": "270650",
    "end": "275750"
  },
  {
    "text": "it so four major phases today we're gonna be focusing primarily on the last",
    "start": "275750",
    "end": "280850"
  },
  {
    "text": "three unfortunately due to somewhat the less than ideal scheduling there's",
    "start": "280850",
    "end": "287720"
  },
  {
    "text": "another talk going on almost right now that covers a little bit more of the first talking about salmon more depth of service application models but I'm going",
    "start": "287720",
    "end": "294320"
  },
  {
    "text": "to cover that a little bit here today as well so four phases then we also have",
    "start": "294320",
    "end": "299570"
  },
  {
    "start": "297000",
    "end": "297000"
  },
  {
    "text": "three different types of what we call process levels so the first is continuous integration the idea that as",
    "start": "299570",
    "end": "305180"
  },
  {
    "text": "code is committed into some sort of code repository it is automatically going to go through some you know basic tests in",
    "start": "305180",
    "end": "311900"
  },
  {
    "text": "build phase so again unit tests linting syntax checking building on top of this",
    "start": "311900",
    "end": "317240"
  },
  {
    "text": "is continuous delivery this is where that then built artifact has pushed through into some number of environments",
    "start": "317240",
    "end": "322640"
  },
  {
    "text": "and then potentially has some sort of a gating aspect that keeps it from going all the way out to production whether",
    "start": "322640",
    "end": "328610"
  },
  {
    "text": "this be a manual gate whether this be more of a process driven gate whatever",
    "start": "328610",
    "end": "333710"
  },
  {
    "text": "it might be given your need and lastly there's continuous deployment and this is kind of the holy grail of complete automation",
    "start": "333710",
    "end": "340400"
  },
  {
    "text": "from check-in all the way to production now here at AWS or actually it's a kind",
    "start": "340400",
    "end": "346100"
  },
  {
    "text": "of across the amazon cin CD when we talk about it we mean primarily the first two and now many of our teams strive to get",
    "start": "346100",
    "end": "352730"
  },
  {
    "text": "to continuous deployment but it's really really hard to do especially at scale especially really well because what",
    "start": "352730",
    "end": "358970"
  },
  {
    "text": "you're saying is that you have such high assurance that all of your testing and that all of the assurance that you've",
    "start": "358970",
    "end": "365180"
  },
  {
    "text": "built your application well and what negatively impact your customers has been completely automated and that is itself also really really hard so we're",
    "start": "365180",
    "end": "372590"
  },
  {
    "text": "talking primarily kind of about the first two today again kind of in the latter part of this phase so this talk",
    "start": "372590",
    "end": "381440"
  },
  {
    "start": "380000",
    "end": "380000"
  },
  {
    "text": "is about building pipelines the top are kind of some goals for a continuous delivery and integration pipeline the",
    "start": "381440",
    "end": "387170"
  },
  {
    "text": "first pretty straightforward want to be able to deploy safely without impacting your customers so we talked about companies that are moving very very fast",
    "start": "387170",
    "end": "393320"
  },
  {
    "text": "and in deploying at a very high velocity the thing that we obviously don't want to do is make things worse for our",
    "start": "393320",
    "end": "398479"
  },
  {
    "text": "business as we're doing that today across Amazon we're actually deploying at more than once per second",
    "start": "398479",
    "end": "404979"
  },
  {
    "text": "the number from 2016 is that we did over 50 million deploys last year and now",
    "start": "404979",
    "end": "410259"
  },
  {
    "text": "we're actually a full calendar year past that so over 50 million employees again it means a little bit more than one",
    "start": "410259",
    "end": "415479"
  },
  {
    "text": "deploy a second across various different environments from all the different teams that we have that's a lot of",
    "start": "415479",
    "end": "420849"
  },
  {
    "text": "moving fast but again we want to make sure that we are deploying safely so there's a lot of mechanisms and a lot of things that we put in place we'll talk",
    "start": "420849",
    "end": "426669"
  },
  {
    "text": "about some of those today we want to validate and test our code and a number of ways across this pipeline so you want",
    "start": "426669",
    "end": "432939"
  },
  {
    "text": "to make sure the code itself is free sort of you know syntax issues basic coding mistakes ideally your peer review",
    "start": "432939",
    "end": "438969"
  },
  {
    "text": "helps catch that but it's also good to have automation in place to help with that we want to make sure that integration with direct dependencies is",
    "start": "438969",
    "end": "445119"
  },
  {
    "text": "working right so in this new world of micro services you have a lot more communication coming in from you know",
    "start": "445119",
    "end": "450839"
  },
  {
    "text": "independent services that might exist how do we make sure that we're not going to go out and break in other teams you",
    "start": "450839",
    "end": "457479"
  },
  {
    "text": "know part of the infrastructure and then we want to make sure that the entire stack is operating properly so how are",
    "start": "457479",
    "end": "463389"
  },
  {
    "text": "we making sure from kind of the front to the back of what it is that we're doing is going to work as again we're rapidly iterating and deploying our application",
    "start": "463389",
    "end": "470519"
  },
  {
    "text": "lastly we want be able to support multiple environments so if there's a tweet that's out there that I can often",
    "start": "470519",
    "end": "475899"
  },
  {
    "text": "struggle to find the true origin of it it says many people have a testing environment if you were lucky to have",
    "start": "475899",
    "end": "480999"
  },
  {
    "text": "one that's not production and so this is something that I see very often and that people don't think enough about having",
    "start": "480999",
    "end": "486219"
  },
  {
    "text": "proper separate environments for how they think about development testing and production or whatever it is that you",
    "start": "486219",
    "end": "491979"
  },
  {
    "text": "might want to label them I used to work for Etsy comm which is an e-commerce marketplace based out in New York City",
    "start": "491979",
    "end": "498189"
  },
  {
    "text": "and we had a environment before production that we called princess and the reason that we call the princess is",
    "start": "498189",
    "end": "504309"
  },
  {
    "text": "because no one liked the name staging no one liked the name testing no one wanted to call it pre prod and so one day Sohn",
    "start": "504309",
    "end": "510219"
  },
  {
    "text": "said we're just gonna give it a random name and it doesn't matter we just know that it comes before production and it's where we validate things so whatever you",
    "start": "510219",
    "end": "516370"
  },
  {
    "text": "want to call your environments feel free to put the idea that you have multiple environments where you're performing these different phases is really key now",
    "start": "516370",
    "end": "524018"
  },
  {
    "text": "one of the great aspects about server lists is that having multiple environments shouldn't cost you more because you're not paying for things",
    "start": "524019",
    "end": "530589"
  },
  {
    "text": "like idle usage of your resources you can have lambda and var functions across all sorts of",
    "start": "530589",
    "end": "535720"
  },
  {
    "text": "environments without paying for them unless you're actually using them it's very different from a traditional compute model where you actually have to",
    "start": "535720",
    "end": "541810"
  },
  {
    "text": "have running resources in you know dev staging and prod at all times so across",
    "start": "541810",
    "end": "547300"
  },
  {
    "text": "these three goals we're going to kind of be talking about three different then tools that align on top of that so deployment tools testing tools and",
    "start": "547300",
    "end": "553510"
  },
  {
    "text": "pipelining tools so first let's talk a little bit about what it takes to deploy",
    "start": "553510",
    "end": "558790"
  },
  {
    "text": "a server this application and I do not recommend an old medieval catapult but they're just for symbolism so here at",
    "start": "558790",
    "end": "566350"
  },
  {
    "start": "566000",
    "end": "566000"
  },
  {
    "text": "AWS we have a tool called service application models or Sam we also have our wonderful mascot of the same name so",
    "start": "566350",
    "end": "572050"
  },
  {
    "text": "you've probably seen things this week from some of my peers and other people talking about server lists with Sam and",
    "start": "572050",
    "end": "577870"
  },
  {
    "text": "all sorts of different designs that we have so Sam is a template driven model",
    "start": "577870",
    "end": "583090"
  },
  {
    "text": "for deploying applications you model out what your application looks like and then today you pass it back through",
    "start": "583090",
    "end": "588640"
  },
  {
    "text": "cloud formation or this week we announced some support inside of code deploy to be able to deploy your service",
    "start": "588640",
    "end": "594100"
  },
  {
    "text": "applications and what it does is have a couple of special resources that simplify what would happen what you",
    "start": "594100",
    "end": "599590"
  },
  {
    "text": "would need to do inside of a cloud formation template to deploy those services and because today they are just",
    "start": "599590",
    "end": "605260"
  },
  {
    "text": "built on top of cloud formation you can actually put anything that CloudFormation supports inside of a Sam template so you can model out things",
    "start": "605260",
    "end": "611110"
  },
  {
    "text": "like Kinesis streams even things like V pcs and any other service that you might need to talk to so this is an example of",
    "start": "611110",
    "end": "618580"
  },
  {
    "text": "a Sam template and we won't go this through this line by line but what I want people to get from this slide is",
    "start": "618580",
    "end": "623890"
  },
  {
    "text": "that there's technically three things that are going on inside of this template the first are headers so the",
    "start": "623890",
    "end": "629860"
  },
  {
    "text": "second line up there is called the transform and what this does is it tells CloudFormation that this is a special kind of template and we need to do some",
    "start": "629860",
    "end": "636250"
  },
  {
    "text": "pre-processing on it then what we have here in the rest of the template are two different resources one is a service",
    "start": "636250",
    "end": "642760"
  },
  {
    "text": "function and the other is a simple table I'll start with the simple table because there's less going on here towards the",
    "start": "642760",
    "end": "648250"
  },
  {
    "text": "bottom what that is is going it's going to provision for us a dynamodb table with a basic number of read and write",
    "start": "648250",
    "end": "653470"
  },
  {
    "text": "units now since today DynamoDB has the capabilities for auto scaling we actually don't need to think too much",
    "start": "653470",
    "end": "658780"
  },
  {
    "text": "about specifying what the read and write units are going to be unless we know that we want a pre provision a certain amount of capacity now what's going on",
    "start": "658780",
    "end": "665470"
  },
  {
    "text": "here more kind of in the middle of this template is our service function and what we see here are a couple lines that are",
    "start": "665470",
    "end": "671139"
  },
  {
    "text": "specific to lambda such as where the code is going to live the handler for my function the runtime for this function",
    "start": "671139",
    "end": "677199"
  },
  {
    "text": "and the policy that exists and then right below that we have an event section and the event in this cases of",
    "start": "677199",
    "end": "682959"
  },
  {
    "text": "type API so what this tells CloudFormation is that needs to provision a lambda function an API",
    "start": "682959",
    "end": "689139"
  },
  {
    "text": "gateway it's going to integrate them with I am such that the API gateway can invoke the lambda function the lambda",
    "start": "689139",
    "end": "695769"
  },
  {
    "text": "function is going to get a policy that allows it to read from DynamoDB it's going to provision dynamodb and so what",
    "start": "695769",
    "end": "701079"
  },
  {
    "text": "I get is basically in this 20 or so lines of code is a complete stack of an application simplified and easy to",
    "start": "701079",
    "end": "707500"
  },
  {
    "text": "package up so again Sam templates have a number of capabilities about them so I",
    "start": "707500",
    "end": "713589"
  },
  {
    "start": "710000",
    "end": "710000"
  },
  {
    "text": "had mentioned you could also mix in basically any other sort of CloudFormation resource that you want so",
    "start": "713589",
    "end": "718600"
  },
  {
    "text": "the three types that we have that are special in Sam our function API and simple table or DynamoDB tables but",
    "start": "718600",
    "end": "725170"
  },
  {
    "text": "again pretty much anything else that you might want to have as part of a service application can be modeled inside of Sam templates you can also use things like",
    "start": "725170",
    "end": "731620"
  },
  {
    "text": "parameters and mappings outputs the intrinsic functions basically kind of",
    "start": "731620",
    "end": "737050"
  },
  {
    "text": "all the core concepts that you need as part of a CloudFormation template and then as part of this when it comes to",
    "start": "737050",
    "end": "743889"
  },
  {
    "start": "742000",
    "end": "742000"
  },
  {
    "text": "actually deploying your application there's two commands that you need to use if you were to run this from the CLI the first is package and this is",
    "start": "743889",
    "end": "750910"
  },
  {
    "text": "actually going to basically take your code bundle it up into a zip file and take that zip file then and put it up",
    "start": "750910",
    "end": "756310"
  },
  {
    "text": "into s3 and return back to the location of where that code is the second then is",
    "start": "756310",
    "end": "761470"
  },
  {
    "text": "deploy and this actually behind the scenes calls to different CloudFormation commands as part of what it does the",
    "start": "761470",
    "end": "766959"
  },
  {
    "text": "first is it calls what's called a create change set and then the second is to actually execute that change set so two",
    "start": "766959",
    "end": "773380"
  },
  {
    "text": "commands for deploying Sam and again you could do this directly from your your workstation or from the api's or from",
    "start": "773380",
    "end": "780339"
  },
  {
    "text": "lots of different places now just this week we announced that AWS code deploy",
    "start": "780339",
    "end": "785500"
  },
  {
    "start": "783000",
    "end": "783000"
  },
  {
    "text": "is getting support for service applications and it actually does this via Sam so we've extended Sam I'll talk",
    "start": "785500",
    "end": "791800"
  },
  {
    "text": "about some of the new things in Sam here such that code deploy has the ability to support another thing that we announced this week which was alias traffic",
    "start": "791800",
    "end": "798760"
  },
  {
    "text": "shifting so what lambda alias traffic shifting allows you to do is do things such as canary deployments or Bluegreen",
    "start": "798760",
    "end": "805600"
  },
  {
    "text": "deployments with your lambda function so that's kind of a new core component inside of lambda canary is something",
    "start": "805600",
    "end": "812619"
  },
  {
    "text": "that we practice really really heavily inside of Amazon in fact every deploy that we do will go out to a canary for",
    "start": "812619",
    "end": "818559"
  },
  {
    "text": "some period of time it will bake for a while and then we will go ahead and incrementally roll out across the rest",
    "start": "818559",
    "end": "824019"
  },
  {
    "text": "of a fleet or a rest of the traffic from an application source in the case of how this works of lambda what you do is",
    "start": "824019",
    "end": "830199"
  },
  {
    "text": "between two different versions of your application you specify a weight on a lambda function alias and then behind",
    "start": "830199",
    "end": "836259"
  },
  {
    "text": "the scenes we direct the traffic to that alias equal to the percentage that you've set so let's say that we have 100",
    "start": "836259",
    "end": "843069"
  },
  {
    "text": "requests coming in via an API gateway 2 or lambda function we take we're using weighted aliases in lambda we set that",
    "start": "843069",
    "end": "850149"
  },
  {
    "text": "to 10% it means that 10 of those 100 requests should go to the new version of my lambda function and I'm going to see",
    "start": "850149",
    "end": "855610"
  },
  {
    "text": "behind the scenes independent logs and independent metrics for that new version of my lambda function now what's cool",
    "start": "855610",
    "end": "862449"
  },
  {
    "text": "about the added code deploy support here is that code deploy comes with its own capabilities a lot of cool things such",
    "start": "862449",
    "end": "868329"
  },
  {
    "text": "as automated rollbacks based on alarms the ability to have triggering points for calling out to hooks during a",
    "start": "868329",
    "end": "873939"
  },
  {
    "text": "deployment and so code deploys capabilities that were announced this week basically are one step above what",
    "start": "873939",
    "end": "880209"
  },
  {
    "text": "you can do in the base lambda features and so we definitely encourage you to take a look at this so this is a little",
    "start": "880209",
    "end": "886809"
  },
  {
    "text": "bit here of what we've done this week to extend Sam so the first is that we've added a concept of a Global's section",
    "start": "886809",
    "end": "892689"
  },
  {
    "text": "inside of your Sam templates so today if I had a Sam template and I had say 20 different lambda simple function or",
    "start": "892689",
    "end": "899860"
  },
  {
    "text": "lambda functions defined inside of it I might have to specify things like my runtime in every single one of those in",
    "start": "899860",
    "end": "905920"
  },
  {
    "text": "this case now I can consistently put that up in Global's and it will apply to all of the functions that are inside of",
    "start": "905920",
    "end": "912220"
  },
  {
    "text": "that template and actually any single property or attribute of the special",
    "start": "912220",
    "end": "918699"
  },
  {
    "text": "functions that are inside of Sam can we point to Global's so I could do things such as specify tagging I could specify",
    "start": "918699",
    "end": "925480"
  },
  {
    "text": "that X ray should be enabled on all my functions I can also specify the deployments properties as part of that",
    "start": "925480",
    "end": "932110"
  },
  {
    "text": "being standard now the section second thing that we've added here this week that's new is down below here in my",
    "start": "932110",
    "end": "938310"
  },
  {
    "text": "lambda function under what's called deployment preference and here we see a type and this type is linear 10% every",
    "start": "938310",
    "end": "944790"
  },
  {
    "text": "10 minutes what this means is that every 10 minutes we're going to shift 10% of",
    "start": "944790",
    "end": "949920"
  },
  {
    "text": "the traffic over to the new version of our deployed code and in this case it's going to do this automatically for you",
    "start": "949920",
    "end": "955130"
  },
  {
    "text": "right below there we see alarms two different cloud watch alarms that are being mentioned and what this tells the",
    "start": "955130",
    "end": "961170"
  },
  {
    "text": "service is let's watch for these cloud watch alarms and if something trips them we're gonna automatically roll back this",
    "start": "961170",
    "end": "966510"
  },
  {
    "text": "deployment and then down at the bottom here we have two different hooks that are specified pre traffic and post",
    "start": "966510",
    "end": "972360"
  },
  {
    "text": "traffic this could be used for all sorts of different things maybe you want to kick off a message to slack to tell the",
    "start": "972360",
    "end": "979320"
  },
  {
    "text": "team hey deployments happening maybe you want to update a tracking system update",
    "start": "979320",
    "end": "985079"
  },
  {
    "text": "a ticketing system make a call to make a change in database make a call to change something in another application and so",
    "start": "985079",
    "end": "991860"
  },
  {
    "text": "you can use these hooks to actually invoke other lambda functions to do whatever it is that you might want to do so again to kind of nuki core components",
    "start": "991860",
    "end": "1000020"
  },
  {
    "text": "inside of Sam that I think add quite a lot of capability to what you can do with it another thing that we announced",
    "start": "1000020",
    "end": "1008300"
  },
  {
    "start": "1006000",
    "end": "1006000"
  },
  {
    "text": "this week that was also maybe not as widely talked about is canary support inside of API gateway so now inside of",
    "start": "1008300",
    "end": "1014510"
  },
  {
    "text": "API gateway when you do a new deployment you can have a stage that gets a certain percentage of traffic sent to it and so",
    "start": "1014510",
    "end": "1020740"
  },
  {
    "text": "there's kind of different reasons why you'd want to do this between using lambda weighted aliases and the API",
    "start": "1020740",
    "end": "1027770"
  },
  {
    "text": "canary support we'll talk about that here in a bit but again this moreless gives you the same capability ability to",
    "start": "1027770",
    "end": "1033140"
  },
  {
    "text": "shift certain traffic to the entirety of an API and if things go good you can increase that percentage or roll it out",
    "start": "1033140",
    "end": "1039438"
  },
  {
    "text": "all the way if things go bad you can unwind it and go back to where you were previously and so this ability to shift",
    "start": "1039439",
    "end": "1045500"
  },
  {
    "text": "out traffic or put out traffic to Canaries and test your new application without impacting the wider you know",
    "start": "1045500",
    "end": "1052130"
  },
  {
    "text": "population of your customer base is a really really strong strategy and best practice that again we here at Amazon",
    "start": "1052130",
    "end": "1057980"
  },
  {
    "text": "champion every single day let's get on to the build part of this of what we",
    "start": "1057980",
    "end": "1063650"
  },
  {
    "text": "need to talk about here so in building and testing our application there's a couple things that we want to think of",
    "start": "1063650",
    "end": "1068690"
  },
  {
    "text": "and I like to say that testing is a bit more of an art than a science because I think across the industry there's a lot",
    "start": "1068690",
    "end": "1073790"
  },
  {
    "text": "of back and forth about what we test how we test and where but so there's a couple things I think we want to do we",
    "start": "1073790",
    "end": "1079340"
  },
  {
    "text": "want to make sure that our code is without sin tax issues applies maybe to some sort of standards that our",
    "start": "1079340",
    "end": "1084500"
  },
  {
    "text": "organization has that it does compile if we're compiling code and that it's been tested at the code level with things",
    "start": "1084500",
    "end": "1090320"
  },
  {
    "text": "like unit tests after we've had that code tested to that level we're gonna then create our artifact again set it up",
    "start": "1090320",
    "end": "1096560"
  },
  {
    "text": "to some sort of a running environment we're gonna want to make sure that it functions as it's supposed to in relation to other components so things",
    "start": "1096560",
    "end": "1102470"
  },
  {
    "text": "that call it the things that it calls and you also want to make sure that as part of doing that it has proper",
    "start": "1102470",
    "end": "1108500"
  },
  {
    "text": "controls in place to handle any failures upstream or downstream and a very heavy the micro-services based environment",
    "start": "1108500",
    "end": "1114680"
  },
  {
    "text": "you're responsible not just for making sure that the your customer of your",
    "start": "1114680",
    "end": "1120020"
  },
  {
    "text": "micro service is ok but that you're being a good citizen of anything that's downstream for you and so we always try to make sure that we're not doing",
    "start": "1120020",
    "end": "1126110"
  },
  {
    "text": "anything that might be impactful for the services that we're calling below us and the last we want to make sure that our",
    "start": "1126110",
    "end": "1131330"
  },
  {
    "text": "entire stack our entire application functions on the end follows security best practices and handle scaling demand",
    "start": "1131330",
    "end": "1137360"
  },
  {
    "text": "now the case of lambda and API gateway many of our service services you don't necessarily have to think about that too",
    "start": "1137360",
    "end": "1143480"
  },
  {
    "text": "much but depending on what you might be calling what might be downstream from you this could be a concern so lambda",
    "start": "1143480",
    "end": "1150620"
  },
  {
    "start": "1149000",
    "end": "1149000"
  },
  {
    "text": "when you have a lambda function one of the things that you have to define is your application deployment package today this is primarily a zip file that",
    "start": "1150620",
    "end": "1158150"
  },
  {
    "text": "you send up to lambda and that it uses to pull down into the compute infrastructure unzips it and then makes",
    "start": "1158150",
    "end": "1165140"
  },
  {
    "text": "it available now we just actually in to magner who's the general manager of service his talk yesterday talked about",
    "start": "1165140",
    "end": "1171830"
  },
  {
    "text": "how we recently rolled out some pretty interesting improvements to how we handle zip files on lambda itself and so",
    "start": "1171830",
    "end": "1178580"
  },
  {
    "text": "we actually are doing some pretty cool things with not having to unzip zip files all the time we need to access",
    "start": "1178580",
    "end": "1184070"
  },
  {
    "text": "them via something called squash FX and so it's actually a swash squash FS sorry",
    "start": "1184070",
    "end": "1189760"
  },
  {
    "text": "so we do some pretty cool things behind the scenes but you still have to strip us a zip file but across the various",
    "start": "1189760",
    "end": "1195830"
  },
  {
    "text": "languages that we support today there's a number of things that you can do inside of this so for nodejs and python you can include",
    "start": "1195830",
    "end": "1201600"
  },
  {
    "text": "third party modules and packages directly in the route or in the you know appropriate kind of vendored folder",
    "start": "1201600",
    "end": "1207750"
  },
  {
    "text": "structure inside of your zip file for Java you have the ability to include things such as maven packages other jars",
    "start": "1207750",
    "end": "1214350"
  },
  {
    "text": "that might need to run as part of your codebase and similarly with dotnet core one today you have the ability to",
    "start": "1214350",
    "end": "1220470"
  },
  {
    "text": "include things like nougat packages into your zip file as well but primarily you're at some point creating a zip file",
    "start": "1220470",
    "end": "1225870"
  },
  {
    "text": "and sending it up to lambda when it comes to testing tools there's a whole",
    "start": "1225870",
    "end": "1231870"
  },
  {
    "start": "1229000",
    "end": "1229000"
  },
  {
    "text": "lot of these out there as well I'm a really big fan of encouraging people to look at some of these code inspection",
    "start": "1231870",
    "end": "1237720"
  },
  {
    "text": "and testing tools that can quantify the testing that you have and make sure that you actually have an appropriate level of code coverage a code coverage is",
    "start": "1237720",
    "end": "1244919"
  },
  {
    "text": "another one of those topics that people can go back and forth and argue on and actually inside of Amazon we do not have",
    "start": "1244919",
    "end": "1249960"
  },
  {
    "text": "a really hard set target for the percentage of code coverage that might exist what you find is if you have an",
    "start": "1249960",
    "end": "1255750"
  },
  {
    "text": "organization that says things like Oh code coverage must be 100 percent it leads to a lot of gamification of the",
    "start": "1255750",
    "end": "1261750"
  },
  {
    "text": "tests that are being written and a lot of poor tests can be written instead what we care really about is tests that",
    "start": "1261750",
    "end": "1266850"
  },
  {
    "text": "are around the you know paths of information paths of customer interfacing and then as we continue to",
    "start": "1266850",
    "end": "1274289"
  },
  {
    "text": "build the application we'll continue to add more and more testing as we see failures or performance issues to make",
    "start": "1274289",
    "end": "1280470"
  },
  {
    "text": "sure again that we're not allowing regression to happen so a couple of different tools that are up there and there's a number of them that exist but",
    "start": "1280470",
    "end": "1286890"
  },
  {
    "text": "these three tools are primarily can cover all the languages that lambda supports today then as part of your",
    "start": "1286890",
    "end": "1294299"
  },
  {
    "text": "pipeline you're always going to want to have against ability to test for integration above or below where your function exists and so one way to do",
    "start": "1294299",
    "end": "1300780"
  },
  {
    "text": "this is via stubbing or mocking an interface and so today there's a number of tools that allow you to do this but",
    "start": "1300780",
    "end": "1306750"
  },
  {
    "text": "I'd encourage you actually take a look at a tool that at last seen released called local stack local stack is",
    "start": "1306750",
    "end": "1311909"
  },
  {
    "text": "actually a bundle of about 20 or 30 other tools and includes some of the most popular ones from mocking common",
    "start": "1311909",
    "end": "1317700"
  },
  {
    "text": "AWS services such as moto Dynalite konista lite and so this could be really useful in",
    "start": "1317700",
    "end": "1323700"
  },
  {
    "text": "helping you build a service application again and being able to mock those interfaces and lastly for full stack",
    "start": "1323700",
    "end": "1330270"
  },
  {
    "text": "kind of testing their products such as Rowen scope ghost inspector kind of a whole suite of what the ones",
    "start": "1330270",
    "end": "1336210"
  },
  {
    "text": "out there that allow you to do things such as API testing UI testing for your servers web applications among other",
    "start": "1336210",
    "end": "1342150"
  },
  {
    "text": "things so encourage you to take a look at these tools so when it comes to",
    "start": "1342150",
    "end": "1347730"
  },
  {
    "text": "taking actually doing your build one option that you have here from us at AWS is using AWS code build so code build is",
    "start": "1347730",
    "end": "1354360"
  },
  {
    "text": "a managed build service kind of the CI part of CI NCD it runs in a completely",
    "start": "1354360",
    "end": "1361140"
  },
  {
    "text": "managed environment using docker underneath behind the scenes or it's going to pull in your code and it's going to follow an instruction set for",
    "start": "1361140",
    "end": "1368100"
  },
  {
    "text": "what it's supposed to do and we'll talk about that here in a moment now just a week or two ago code build actually finally announced the ability for you to",
    "start": "1368100",
    "end": "1374310"
  },
  {
    "text": "access resources inside of your V PC so whether you are testing resources inside of your V PC pulling in dependency",
    "start": "1374310",
    "end": "1380610"
  },
  {
    "text": "packages from say a private artifactory or Nexus server or what have you now you",
    "start": "1380610",
    "end": "1387000"
  },
  {
    "text": "can do that inside of code build the other things they now support dependency caching so this is the ability for inside a code build it to cache the",
    "start": "1387000",
    "end": "1394110"
  },
  {
    "text": "dependencies that your application needs and so this can happen to you really speed up the build process as part of",
    "start": "1394110",
    "end": "1399630"
  },
  {
    "text": "using code build now so that's pretty key so I mentioned that code build uses an instruction file and instruction file",
    "start": "1399630",
    "end": "1405930"
  },
  {
    "text": "is called a build spec that yml file - yamo file and we see here kind of a very basic example of one now what this file",
    "start": "1405930",
    "end": "1413370"
  },
  {
    "text": "does for us is a couple things it has some environment variables that we're going to consume as part of our execution here it then has what are four",
    "start": "1413370",
    "end": "1420660"
  },
  {
    "text": "phases has an install phase pre build build and post build and they actually execute in that order",
    "start": "1420660",
    "end": "1426150"
  },
  {
    "text": "and then what we see inside of these are commands and these commands actually look just like shell commands because that's what they are and to a certain",
    "start": "1426150",
    "end": "1433170"
  },
  {
    "text": "extent you can think of code build as a fairly sophisticated shell script or command line and execution tool maybe",
    "start": "1433170",
    "end": "1439080"
  },
  {
    "text": "doesn't do all of justice that it needs but basically anything that you could execute on a command line inside of a",
    "start": "1439080",
    "end": "1444750"
  },
  {
    "text": "Linux environment you could execute inside a code build so the options are pretty open there so we see that I'm",
    "start": "1444750",
    "end": "1450090"
  },
  {
    "text": "doing an NPM install I'm running eslint I'm then doing an NPM test and then",
    "start": "1450090",
    "end": "1455220"
  },
  {
    "text": "finally I'm calling the cloud formation package command to package up this application and put it into s3 and so as",
    "start": "1455220",
    "end": "1461130"
  },
  {
    "text": "part of a larger pipeline again this is that build phase that's going to do the core of what I needed to do now the NPM",
    "start": "1461130",
    "end": "1467610"
  },
  {
    "text": "installing and that's going to solve my dependencies the eslint is going to lint my actual nodejs files and then npm",
    "start": "1467610",
    "end": "1473760"
  },
  {
    "text": "test is going to run any sort of unit tests that I want so again going back to the model of what I'm looking for for code assurance this is kind of the core",
    "start": "1473760",
    "end": "1480240"
  },
  {
    "text": "a couple things that I care about awesome so we've talked about how we're gonna deploy our code we've talked about",
    "start": "1480240",
    "end": "1486330"
  },
  {
    "text": "how we're going to build our code let's actually talk about the pipeline itself so for pipelining here at AWS we have a",
    "start": "1486330",
    "end": "1492690"
  },
  {
    "text": "service called code pipeline this is our continuous delivery service it's actually modeled after a tool that we've",
    "start": "1492690",
    "end": "1498030"
  },
  {
    "text": "had inside of Amazon now for just about eight or nine years I guess it is it's used by almost every single team inside",
    "start": "1498030",
    "end": "1503400"
  },
  {
    "text": "of Amazon which is called pipelines and so what allows you to do is model and visualize your software release process",
    "start": "1503400",
    "end": "1509300"
  },
  {
    "text": "allows you to automate everything from builds and tests to deploys and then it has kind of a very open integration",
    "start": "1509300",
    "end": "1515310"
  },
  {
    "text": "model that allows you to plug into all sorts of different things so let's kind of look at what a code",
    "start": "1515310",
    "end": "1520860"
  },
  {
    "text": "pipeline looks like so this is an entire pipeline this pipeline is then made up of three stages those stages are then",
    "start": "1520860",
    "end": "1528780"
  },
  {
    "text": "made up of what are called actions and those actions are those stages are",
    "start": "1528780",
    "end": "1534030"
  },
  {
    "text": "connected via a transition and transitions can be either enabled or disabled one thing that's pretty cool about this is you could set up something",
    "start": "1534030",
    "end": "1540330"
  },
  {
    "text": "like a cloud watch scheduled event to call a lambda function to disable transitions inside of your pipelines",
    "start": "1540330",
    "end": "1547140"
  },
  {
    "text": "between certain hours such that you can keep people from deploying say on weekends and keep maybe a more sane",
    "start": "1547140",
    "end": "1553500"
  },
  {
    "text": "deployment strategy inside of your business now some other cool things you can do with code pipeline so you can",
    "start": "1553500",
    "end": "1559380"
  },
  {
    "text": "have parallel actions so we can do multiple types of testing or again all sorts of different actions in parallel",
    "start": "1559380",
    "end": "1565020"
  },
  {
    "text": "and we can also do sequential actions inside of a stage so basically what you can do with code pipeline is model your",
    "start": "1565020",
    "end": "1571560"
  },
  {
    "text": "deployment pipeline it kind of almost any way that you could think of we could have many different parallel actions we",
    "start": "1571560",
    "end": "1576750"
  },
  {
    "text": "could have many different sequential actions we can have many different stages and so I've seen customers with some pretty wildly complex deployment",
    "start": "1576750",
    "end": "1584310"
  },
  {
    "text": "pipelines as part of this and then lastly you have the ability to do manual",
    "start": "1584310",
    "end": "1590310"
  },
  {
    "text": "actions so this would be something where your pipeline is going to send out a message via SNS could be to tell the QA",
    "start": "1590310",
    "end": "1596550"
  },
  {
    "text": "team they need to check something it could be so that you wait until maybe some sort of other release management team",
    "start": "1596550",
    "end": "1601850"
  },
  {
    "text": "has given the thumbs-up or you could actually do an automation step as part of this as well so if you think of a",
    "start": "1601850",
    "end": "1610070"
  },
  {
    "text": "really basic server list pipeline from a developer experience what we could have is this right here we have code q8 ABS s",
    "start": "1610070",
    "end": "1616280"
  },
  {
    "text": "code storage service we then have code build which is going to build our code and then we're calling CloudFormation to",
    "start": "1616280",
    "end": "1621740"
  },
  {
    "text": "actually deploy our Sam templates and then lastly we can run stubbing tests",
    "start": "1621740",
    "end": "1626929"
  },
  {
    "text": "with something like lambda and so for an individual developer this could be their workflow editor as they're writing their",
    "start": "1626929",
    "end": "1632270"
  },
  {
    "text": "code they commit it it goes into code pipeline executes in this path and you",
    "start": "1632270",
    "end": "1637280"
  },
  {
    "text": "know again it's part of just their little view into what it is that they're building we could then extend this for",
    "start": "1637280",
    "end": "1644150"
  },
  {
    "text": "more of a production pipeline if you will and again this is a fairly simplistic view of it what we've done is taken that developers pipeline and added",
    "start": "1644150",
    "end": "1651320"
  },
  {
    "text": "two other stages to it in this case we have a staging stage in a production stage and what we've done is add in the",
    "start": "1651320",
    "end": "1658220"
  },
  {
    "text": "staging stage another batch of testing we've also added a manual approval and then in production environment what",
    "start": "1658220",
    "end": "1664700"
  },
  {
    "text": "we've done is just do a deploy and then basically have a lambda function that can go and say update slack to say that",
    "start": "1664700",
    "end": "1671960"
  },
  {
    "text": "the deploy has been completed so lots of different inside of this code pipeline is really a simplistic service for",
    "start": "1671960",
    "end": "1678860"
  },
  {
    "text": "structuring this but it gives you a lot of capabilities as part of it so where",
    "start": "1678860",
    "end": "1684260"
  },
  {
    "text": "and what do you want to test inside of a pipeline and it purposely took the same pipeline that I had it stripped out what",
    "start": "1684260",
    "end": "1689330"
  },
  {
    "text": "was inside of it so that we're not thinking about the individual actions so much in relation to AWS services or any",
    "start": "1689330",
    "end": "1695210"
  },
  {
    "text": "of the tools that I've shown here so inside of your source stage this is typically again we are going to want to",
    "start": "1695210",
    "end": "1701270"
  },
  {
    "text": "do things such as code reviews now inside of code commit we have pull requests as of about a week or so ago so",
    "start": "1701270",
    "end": "1707690"
  },
  {
    "text": "you could actually enforce a code review process as part of a pull request workflow inside your organization to",
    "start": "1707690",
    "end": "1713480"
  },
  {
    "text": "make sure that someone else has reviewed code inside of Amazon this is one of the things that we almost entirely enforced",
    "start": "1713480",
    "end": "1719179"
  },
  {
    "text": "across teams there needs to be a code review before it code goes forward and we find that that catches a large",
    "start": "1719179",
    "end": "1724309"
  },
  {
    "text": "majority of the issues that might exist inside of our code from here then our build phase again is going to do some",
    "start": "1724309",
    "end": "1729679"
  },
  {
    "text": "sort of unit testing linting syntax checking actually compile our code if it needs to and at the kind of the raw",
    "start": "1729679",
    "end": "1735500"
  },
  {
    "text": "code level make sure that things are good inside of some sort of testing stage we're going to make sure that our",
    "start": "1735500",
    "end": "1741050"
  },
  {
    "text": "application actually deploys successfully believe it or not the fact that an application deploys is one thing",
    "start": "1741050",
    "end": "1746210"
  },
  {
    "text": "that you can do to test it and then this is where we want to think about mocking or stubbing interfaces so not yet",
    "start": "1746210",
    "end": "1751220"
  },
  {
    "text": "putting this in path of other things then we can have a staging or a pre prod environment or something similar like",
    "start": "1751220",
    "end": "1756440"
  },
  {
    "text": "that where we would deploy again make sure that it's successful and then test us against real services now in a micro",
    "start": "1756440",
    "end": "1762920"
  },
  {
    "text": "services environment one thing that I hear from people is do we have to duplicate all of the micro services inside of our organization and every",
    "start": "1762920",
    "end": "1769340"
  },
  {
    "text": "team have to have its own complete stack to represent that absolutely not one of the things that we'll do inside of",
    "start": "1769340",
    "end": "1774980"
  },
  {
    "text": "Amazon is my pre prod stage will actually have my service running against",
    "start": "1774980",
    "end": "1781310"
  },
  {
    "text": "the production versions of the dependencies that I have so that as I'm testing I'm testing downstream against",
    "start": "1781310",
    "end": "1787910"
  },
  {
    "text": "the consistent environment that I know my production environment is also running against and what we'll do is make sure that we're adding data if we",
    "start": "1787910",
    "end": "1794510"
  },
  {
    "text": "have to add data that is only focused on being developer data we won't do anything to modify actual true production data but the working path",
    "start": "1794510",
    "end": "1801080"
  },
  {
    "text": "below my service goes through other production dependencies and then lastly",
    "start": "1801080",
    "end": "1806480"
  },
  {
    "text": "out to production and this is where you want to think about first deploying Canaries making sure that those Canaries have been running successfully for",
    "start": "1806480",
    "end": "1812840"
  },
  {
    "text": "whatever period of time you need to have the assurance that things are good and then deploy all the way out to",
    "start": "1812840",
    "end": "1818210"
  },
  {
    "text": "production and so this is kind of the flow that I think is a pretty good standard one to follow so a couple of",
    "start": "1818210",
    "end": "1826040"
  },
  {
    "text": "best practices here one you want to use things like Canaries and automated rollbacks in your production stage as",
    "start": "1826040",
    "end": "1831800"
  },
  {
    "text": "much as possible this is one of the key things that we do inside of Amazon is pretty much always have rollbacks",
    "start": "1831800",
    "end": "1837230"
  },
  {
    "text": "automated such that that is the first action that we take as part of a failure inside of a production deployment and",
    "start": "1837230",
    "end": "1844040"
  },
  {
    "text": "again even for Canaries in lambda versioning is something we've had since very early on but this is useful for you",
    "start": "1844040",
    "end": "1850040"
  },
  {
    "text": "need to support multiple versions of a lambda function not four as part of a deployment process where you're going to",
    "start": "1850040",
    "end": "1855860"
  },
  {
    "text": "promote inside of it and this is something that I see people get kind of stuck on and you want to think of versioning as I have customers that need",
    "start": "1855860",
    "end": "1862100"
  },
  {
    "text": "to set that need version 1 and I'm now deploying version 2 and I can't get rid of version 1 yet not this is my staging",
    "start": "1862100",
    "end": "1868760"
  },
  {
    "text": "this is my production and I'm gonna shove them up in that direction a PA gateway has stages let's work similarly so you have",
    "start": "1868760",
    "end": "1875300"
  },
  {
    "text": "stages inside of API gateway we often will see people also use those for things like dev staging and prod but",
    "start": "1875300",
    "end": "1881030"
  },
  {
    "text": "instead you want to think about them for versioning purposes the last thing you always want to try to have stacks or",
    "start": "1881030",
    "end": "1886580"
  },
  {
    "text": "development testing staging whatever you want to call it independently and again with server lists you don't have to think about that necessarily the impact",
    "start": "1886580",
    "end": "1893930"
  },
  {
    "text": "of cost because again if you're not using it you're not paying for it and you really don't want to use staging or versioning for separate environments and",
    "start": "1893930",
    "end": "1901310"
  },
  {
    "text": "another thing you might want to think about is separate accounts all together and so we see some of our more large enterprise customers doing this pretty",
    "start": "1901310",
    "end": "1906920"
  },
  {
    "text": "regularly in terms of Sam couple best practices here look at using things such",
    "start": "1906920",
    "end": "1912620"
  },
  {
    "start": "1909000",
    "end": "1909000"
  },
  {
    "text": "as parameters and mappings as much as possible to build as much dynamic 'no sin side of your templates and the new",
    "start": "1912620",
    "end": "1918140"
  },
  {
    "text": "global section helps with this as well you also want to think about how you can use the capabilities of cloud formations",
    "start": "1918140",
    "end": "1924080"
  },
  {
    "text": "such as export value and import value to help kind of glue together things inside of your stacks instead of relying on",
    "start": "1924080",
    "end": "1929900"
  },
  {
    "text": "people to say take components of your infrastructure and pass the information of them from parameters you can actually",
    "start": "1929900",
    "end": "1936140"
  },
  {
    "text": "expose out inside of a region resources via and outputs export and then consume",
    "start": "1936140",
    "end": "1942500"
  },
  {
    "text": "that via an import statement so that way all that you're doing is looking for the identifier of a resource you're not",
    "start": "1942500",
    "end": "1947750"
  },
  {
    "text": "making someone say post in an AR n of a resource that you might have then you",
    "start": "1947750",
    "end": "1953540"
  },
  {
    "text": "want to use basically this a single template for building out all of your environments if you're finding that you need to create a different template per",
    "start": "1953540",
    "end": "1959480"
  },
  {
    "text": "environment and you're doing something wrong with how you're building those templates again mappings parameters and all these other capabilities so to give",
    "start": "1959480",
    "end": "1965660"
  },
  {
    "text": "you that dynamic nosov that single template we talked a little bit here",
    "start": "1965660",
    "end": "1972140"
  },
  {
    "start": "1970000",
    "end": "1970000"
  },
  {
    "text": "about should haven't talked about lament environment variables yet so lambda environment valuables are key value pairs you could pass into your lambda",
    "start": "1972140",
    "end": "1978740"
  },
  {
    "text": "functions and you can use these for all sorts of different things such as passing in identifiers for databases",
    "start": "1978740",
    "end": "1985030"
  },
  {
    "text": "passing you and say keys for api's or even passing in configuration information such as feature flags and",
    "start": "1985030",
    "end": "1991520"
  },
  {
    "text": "these can be encrypted via kms and they become available to your lambda function via kind of standard operating system",
    "start": "1991520",
    "end": "1998690"
  },
  {
    "text": "environment variable constructs so depending on the language that you're doing you're just looking for an environment variable and it can be",
    "start": "1998690",
    "end": "2004809"
  },
  {
    "text": "made available inside of your lambda function now API gateway supports something very similar called stage",
    "start": "2004809",
    "end": "2010570"
  },
  {
    "start": "2008000",
    "end": "2008000"
  },
  {
    "text": "variables again key value pairs that are available inside of your stage can be passed down into say a lambda function",
    "start": "2010570",
    "end": "2016419"
  },
  {
    "text": "and they also give you this dynamic miss that you can think about so inside of Sam when you want to use these what it",
    "start": "2016419",
    "end": "2022690"
  },
  {
    "text": "looks like because we have here an example of I've got two parameters that I want to pass in one is called my",
    "start": "2022690",
    "end": "2027789"
  },
  {
    "text": "environment the other is called special feature one so you can think of it as a feature flag and so I am what I have",
    "start": "2027789",
    "end": "2034299"
  },
  {
    "text": "here are certain allowed values these can be passed it again at runtime and then passed all the way through my API",
    "start": "2034299",
    "end": "2040090"
  },
  {
    "text": "gateway and in my lambda function which we see on the other side of the slide here where I'm referencing them that's the exclamation point reference",
    "start": "2040090",
    "end": "2046600"
  },
  {
    "text": "that's going to pull those parameters in then lastly one other option that you",
    "start": "2046600",
    "end": "2052600"
  },
  {
    "text": "have here is to use Systems Manager so Systems Manager parameter store is a managed key value store service that we",
    "start": "2052600",
    "end": "2059108"
  },
  {
    "text": "have here people often don't think about this being something that can be consumed inside of lambda because we say",
    "start": "2059109",
    "end": "2064658"
  },
  {
    "text": "the Systems Manager is related to ec2 but actually you can use Systems Manager a parameter store in basically any AWS",
    "start": "2064659",
    "end": "2071710"
  },
  {
    "text": "service that you want on or off it and so this allows you to do is actually have a hierarchical key value store such",
    "start": "2071710",
    "end": "2077560"
  },
  {
    "text": "that you could have keys that are for the same types of resources that can be",
    "start": "2077560",
    "end": "2082570"
  },
  {
    "text": "basically selected depending on certain criteria so I could have a hierarchy that says dev staging prod and then",
    "start": "2082570",
    "end": "2088690"
  },
  {
    "text": "inside of that have the keys that I need and then what I need to go and request them inside of my code I could use",
    "start": "2088690",
    "end": "2094419"
  },
  {
    "text": "something like a lambda environment variable to say give me the key for the dev part of the hierarchy related to my",
    "start": "2094419",
    "end": "2100510"
  },
  {
    "text": "database and this saves me from having to pass those directly into my lambda",
    "start": "2100510",
    "end": "2105850"
  },
  {
    "text": "functions now with code pipeline and CloudFormation you have the ability to",
    "start": "2105850",
    "end": "2111160"
  },
  {
    "text": "inside of your pipeline pass in these parameters via two different models one",
    "start": "2111160",
    "end": "2116380"
  },
  {
    "text": "is via a reference parameter file so this is a text file that you would put inside of your actual code or you can",
    "start": "2116380",
    "end": "2122800"
  },
  {
    "text": "hard code these into the pipeline kind of two different reasons why you'd want to do this one allows flexibility for",
    "start": "2122800",
    "end": "2128109"
  },
  {
    "text": "your developers to do kind of whatever it is that they want to pass in via the parameter file the other is if you have",
    "start": "2128109",
    "end": "2133930"
  },
  {
    "text": "certain secrets that you don't want them to have access to modify or sort trolls that you want to put in place hard-coding them into the pipeline makes",
    "start": "2133930",
    "end": "2140770"
  },
  {
    "text": "it a little bit more difficult for that to potentially be changed so two different ways to pass in this information to the underlying services",
    "start": "2140770",
    "end": "2147940"
  },
  {
    "text": "to allow for dynamic nough so that again you can have kind of a single template file that you're using for deploying out to the various environments that you",
    "start": "2147940",
    "end": "2153880"
  },
  {
    "text": "have so lastly here one last kind of bit about this so I talked about code build",
    "start": "2153880",
    "end": "2159040"
  },
  {
    "text": "talked about code deploy talked about code pipeline there's a lot of things to potentially have to glue together and so",
    "start": "2159040",
    "end": "2164740"
  },
  {
    "text": "earlier this year we announced a service called AWS code star which actually allows you to go and create or launch",
    "start": "2164740",
    "end": "2170920"
  },
  {
    "text": "pre created templates of CI NCD pipelines for all sorts of different use cases and we've got about I think a",
    "start": "2170920",
    "end": "2177099"
  },
  {
    "text": "dozen or so of these specific to service applications and so if you're completely new to this space you've never touched",
    "start": "2177099",
    "end": "2182470"
  },
  {
    "text": "this before I really encourage you to take a look at code star so with this I'm going to hand it over to Ben to talk",
    "start": "2182470",
    "end": "2188500"
  },
  {
    "text": "a little bit more about what iRobot does in their CIN CD pipelines",
    "start": "2188500",
    "end": "2194190"
  },
  {
    "text": "hi so I'm been Kehoe I'm a cloud robotics research scientist at iRobot a",
    "start": "2199890",
    "end": "2206160"
  },
  {
    "text": "service evangelist so we are all serve realists I'll talk a little bit about that and I'm an AWS community hero so we",
    "start": "2206160",
    "end": "2215320"
  },
  {
    "text": "chose serverless at iRobot because our historical experience has been building devices and not cloud applications now",
    "start": "2215320",
    "end": "2222850"
  },
  {
    "text": "we had experience with networked robotics and things but not with scalable elastic cloud infrastructure",
    "start": "2222850",
    "end": "2228400"
  },
  {
    "text": "and that's not our core business our fleet was already at scale we sell millions of Roombas a year and",
    "start": "2228400",
    "end": "2234270"
  },
  {
    "text": "serverless enabled us to skip the undifferentiated heavy lifting step and go straight to go straight to delivering",
    "start": "2234270",
    "end": "2243370"
  },
  {
    "text": "that value to our customers and connect our entire line of Roombas and not have",
    "start": "2243370",
    "end": "2248410"
  },
  {
    "text": "to worry about the you know massive influx of connected robots that we have to deal with so we do deployment a lot",
    "start": "2248410",
    "end": "2257350"
  },
  {
    "text": "like Sam because we started going serverless in 2015 and that the",
    "start": "2257350",
    "end": "2264240"
  },
  {
    "text": "ecosystem of deployment tools at that time was you know in very early stages we decided to roll our own tool that's",
    "start": "2264240",
    "end": "2271570"
  },
  {
    "text": "been worthwhile for us but we're looking in the you know medium term for those",
    "start": "2271570",
    "end": "2276790"
  },
  {
    "text": "tools which are now starting to mature to become something that we could move away from but we start with us a source",
    "start": "2276790",
    "end": "2285180"
  },
  {
    "text": "and we deploy that right we package up all of our lambdas put them in s3 and",
    "start": "2285180",
    "end": "2291220"
  },
  {
    "text": "that's sort of that first step and then that source has a CloudFormation template and as Sam does you want to",
    "start": "2291220",
    "end": "2299590"
  },
  {
    "text": "stitch your deployed lambda packages into your cloud formation templates so",
    "start": "2299590",
    "end": "2306010"
  },
  {
    "text": "that you don't have to explicitly say this is where this is where an s3 I put this right the tool should be handling",
    "start": "2306010",
    "end": "2311290"
  },
  {
    "text": "all of that Sam does that our tool does that and then you want that template then to go and test three and then in to",
    "start": "2311290",
    "end": "2319720"
  },
  {
    "text": "2b deploys it as a stack so that's our you know fundamental process it looks a",
    "start": "2319720",
    "end": "2324880"
  },
  {
    "text": "lot like Sam it involves a lot of just cloud formation transformations but instead of being done sort of automatically within cloud formation",
    "start": "2324880",
    "end": "2331780"
  },
  {
    "text": "like Sam does it we do it within the tool locally on the developers machine so we're just using vanilla CloudFormation so we're very",
    "start": "2331780",
    "end": "2339549"
  },
  {
    "text": "hopeful that Sam's functionality is going to match up with what we have and we'll be able to transition later one of",
    "start": "2339549",
    "end": "2345940"
  },
  {
    "text": "the key things that we do as a as a part of our systems is use CloudFormation",
    "start": "2345940",
    "end": "2352000"
  },
  {
    "text": "custom resources and so this is a thing that you can use with regular CloudFormation you use it with Sam what",
    "start": "2352000",
    "end": "2358329"
  },
  {
    "text": "involves is specifying a lambda function in a CloudFormation resource to say take",
    "start": "2358329",
    "end": "2366069"
  },
  {
    "text": "the stuff that I've defined here send it out to the lambda the lambda will do something to create update or delete and",
    "start": "2366069",
    "end": "2372299"
  },
  {
    "text": "and then CloudFormation doesn't you can extend the functionality of",
    "start": "2372299",
    "end": "2378099"
  },
  {
    "text": "CloudFormation to do that so we also deploy those to our tool so you define",
    "start": "2378099",
    "end": "2383520"
  },
  {
    "text": "the lambdas for your CloudFormation customer resource and those are deployed along into your account and then used by",
    "start": "2383520",
    "end": "2390359"
  },
  {
    "text": "the code that you're deploying so we use that as sort of the base functionality for how do we get stuff from code into",
    "start": "2390359",
    "end": "2397089"
  },
  {
    "text": "the cloud and for deployment we use what",
    "start": "2397089",
    "end": "2403539"
  },
  {
    "start": "2400000",
    "end": "2400000"
  },
  {
    "text": "I'll call red black you know people talk about blue green red black and they're used to mean a lot of different things and there's sort of two possible tactics",
    "start": "2403539",
    "end": "2410740"
  },
  {
    "text": "one is you sort of have you know a system where you have a load balancer and workers behind it and if you call",
    "start": "2410740",
    "end": "2418359"
  },
  {
    "text": "blue green the thing where you leave the load balancer in place and you update the workers behind it and red black the thing where you stand up an entire",
    "start": "2418359",
    "end": "2424390"
  },
  {
    "text": "separate copy of everything and switch clients from one endpoint to another we follow on the red black system and that",
    "start": "2424390",
    "end": "2432869"
  },
  {
    "text": "you know again we started this very early and there were no Canaries there",
    "start": "2432869",
    "end": "2438250"
  },
  {
    "text": "were no weighted aliases in lambda and so we took a look at this and said well if we stand up an entirely new copy",
    "start": "2438250",
    "end": "2445170"
  },
  {
    "text": "that's okay it's server list we don't pay for idle so we don't have we're not paying",
    "start": "2445170",
    "end": "2450760"
  },
  {
    "text": "anything to stand up that new copy we can keep extra copies around it's not a problem if we're starting today we'd",
    "start": "2450760",
    "end": "2457089"
  },
  {
    "text": "probably be taking a very close look at API gateway Canaries if you look at the",
    "start": "2457089",
    "end": "2462760"
  },
  {
    "text": "way that way today Oasis and carries are set up if you have an API gateway in front of a lambda",
    "start": "2462760",
    "end": "2468000"
  },
  {
    "text": "you probably want to use API gateway Canaries rather than weighted aliases",
    "start": "2468000",
    "end": "2473790"
  },
  {
    "text": "because if you need a combination of lambda change an API change you can only make that work with API gateway Canaries",
    "start": "2473790",
    "end": "2480829"
  },
  {
    "text": "but if you have a lambda that's invoked by some other event source you're going to want to use weighted aliases so the",
    "start": "2480829",
    "end": "2489750"
  },
  {
    "start": "2489000",
    "end": "2489000"
  },
  {
    "text": "darkest secret of irobot is that we deploy our bleeding-edge serverless",
    "start": "2489750",
    "end": "2496349"
  },
  {
    "text": "applications that use no ec2 and no docker with on-prem jenkins servers and",
    "start": "2496349",
    "end": "2503060"
  },
  {
    "text": "the reason that we do this is that we have a mature internal processor own",
    "start": "2503060",
    "end": "2508950"
  },
  {
    "text": "jenkins and it works for everybody who's not on the cloud team which is most of",
    "start": "2508950",
    "end": "2514880"
  },
  {
    "text": "the company right our cloud team can stay very small because being fully serviced and using all these managed",
    "start": "2514880",
    "end": "2521280"
  },
  {
    "text": "services we don't need that many people to deliver the cloud functionality that",
    "start": "2521280",
    "end": "2526410"
  },
  {
    "text": "we're doing or to operate it any of those things so we can sort of just piggyback on what everyone else is doing",
    "start": "2526410",
    "end": "2532640"
  },
  {
    "text": "we're migrating that to ec2 in the fullness of time but because it's",
    "start": "2532640",
    "end": "2538079"
  },
  {
    "text": "working for us we don't really have any pressing needs there and because most of the other people who are using these",
    "start": "2538079",
    "end": "2544950"
  },
  {
    "text": "Jenkins servers aren't running you know their destination is not the cloud we're experimenting with code pipeline is very",
    "start": "2544950",
    "end": "2550440"
  },
  {
    "text": "interesting it again is more server lists there's less overhead to doing it",
    "start": "2550440",
    "end": "2555599"
  },
  {
    "text": "it can be in everybody's account you don't need to go to some central place to to get permission to use something we",
    "start": "2555599",
    "end": "2564150"
  },
  {
    "text": "use a separate AWS account per developer well we use a separate AWS account per environment that prod that's staging",
    "start": "2564150",
    "end": "2570390"
  },
  {
    "text": "that there's not own there's not one dev there's 50 60 70 dev accounts of varying",
    "start": "2570390",
    "end": "2578300"
  },
  {
    "text": "purposes and that's really useful because you get everybody to have their",
    "start": "2578300",
    "end": "2583589"
  },
  {
    "text": "own environment that they can live in and at the same time with AWS",
    "start": "2583589",
    "end": "2589319"
  },
  {
    "text": "organizations and automation you can push the same infrastructure the same code pipeline whatever into each account",
    "start": "2589319",
    "end": "2596130"
  },
  {
    "text": "to set up that pipeline the same way for everybody we do CI we don't do really continuous",
    "start": "2596130",
    "end": "2603880"
  },
  {
    "text": "deployment and definitely not continuous delivery one of the reasons for that is you know were an IOT company we have to",
    "start": "2603880",
    "end": "2610810"
  },
  {
    "text": "coordinate with robot firmware releases we got to make sure that you know imagine if you had a web app and you had",
    "start": "2610810",
    "end": "2620350"
  },
  {
    "text": "browsers that just would never refresh their cache its ads in a lot of problems",
    "start": "2620350",
    "end": "2625870"
  },
  {
    "text": "when you have you know devices with their own with their own minds hat you know on the other end and so a lot of",
    "start": "2625870",
    "end": "2632290"
  },
  {
    "text": "the times when we're rolling out new versions of our cloud applications we want to be watching very closely we're",
    "start": "2632290",
    "end": "2640810"
  },
  {
    "text": "doing a oh da at the same time it's you know sort of something that we need to have a human in the loop there oh that",
    "start": "2640810",
    "end": "2649600"
  },
  {
    "text": "was for the on Prem sort deployment",
    "start": "2649600",
    "end": "2654970"
  },
  {
    "start": "2653000",
    "end": "2653000"
  },
  {
    "text": "process well it's again human in the loop it's still single button so it's it's gated but it's still a little more",
    "start": "2654970",
    "end": "2661150"
  },
  {
    "text": "watched I wouldn't necessarily call it full continuous delivery one nice thing",
    "start": "2661150",
    "end": "2667180"
  },
  {
    "text": "that's useful from from several process stand points is having one artifact in",
    "start": "2667180",
    "end": "2673150"
  },
  {
    "text": "your pipeline right that you're putting it in s3 somewhere and you're referring to that everywhere along in the step of",
    "start": "2673150",
    "end": "2678520"
  },
  {
    "text": "the process that helps with both your operations people being able to see that and your security people they know that",
    "start": "2678520",
    "end": "2684430"
  },
  {
    "text": "there's one place that they have to track that information we do partial testing after every commit so we don't",
    "start": "2684430",
    "end": "2692080"
  },
  {
    "text": "run our full suite of tests because that's you know sort of an hours-long process we do that full test nightly and",
    "start": "2692080",
    "end": "2698800"
  },
  {
    "text": "then that delivers an integration testing maybe weekly as again you",
    "start": "2698800",
    "end": "2705130"
  },
  {
    "text": "deliver a new version into the integration testing environment people have to update their robots to the right firmware and they may not need that new",
    "start": "2705130",
    "end": "2713260"
  },
  {
    "text": "firmware so it ends up being a lot of sort of coordination between teams using different different devices and then",
    "start": "2713260",
    "end": "2723430"
  },
  {
    "text": "maybe monthly the production along with our app that's rough along the same cadence OTA firmware updates are a",
    "start": "2723430",
    "end": "2729760"
  },
  {
    "text": "little slower than that we talked a little bit about integration testing earlier I that's absolutely",
    "start": "2729760",
    "end": "2736960"
  },
  {
    "start": "2733000",
    "end": "2733000"
  },
  {
    "text": "critical my belief is that you shouldn't go to that Kinesis light and the the",
    "start": "2736960",
    "end": "2742810"
  },
  {
    "text": "dyno lights and all those things it's just not worth it so for us we can't do it we use we're",
    "start": "2742810",
    "end": "2748210"
  },
  {
    "text": "verging on 30 AWS services that we use and there's never gonna be all of a",
    "start": "2748210",
    "end": "2754480"
  },
  {
    "text": "mocked and they're never going to be up to date so what we've found is you",
    "start": "2754480",
    "end": "2759880"
  },
  {
    "text": "should do extensive unit testing for local validation using a mocking library",
    "start": "2759880",
    "end": "2765340"
  },
  {
    "text": "we're all in Python we use placebo there's JavaScript ones and probably",
    "start": "2765340",
    "end": "2770560"
  },
  {
    "text": "Java ones but I'm less familiar with that and then once you've done that unit testing on each one then you deploy it",
    "start": "2770560",
    "end": "2776170"
  },
  {
    "text": "and do your integration tests on the on the deployed system something like Sam local may help you test locally a little",
    "start": "2776170",
    "end": "2783310"
  },
  {
    "text": "more but definitely when you're looking at where your CI should take place just",
    "start": "2783310",
    "end": "2789790"
  },
  {
    "text": "do that on the deployed system now one thing that that we really had to think",
    "start": "2789790",
    "end": "2796600"
  },
  {
    "start": "2793000",
    "end": "2793000"
  },
  {
    "text": "hard about when we were setting the system up and how to do these deployments was we talked a lot about",
    "start": "2796600",
    "end": "2803980"
  },
  {
    "text": "okay infrastructure should be immutable we can stand up these red-black copies but if you think about it if you have a",
    "start": "2803980",
    "end": "2809560"
  },
  {
    "text": "database in your system and you're doing that full red-black if you send up a new copy of your database you have to make a",
    "start": "2809560",
    "end": "2815560"
  },
  {
    "text": "database copy or you have to do a database migration and you don't want to do that every time so ideally you're",
    "start": "2815560",
    "end": "2821080"
  },
  {
    "text": "reusing those data sources and other long-lived resources you know we have I",
    "start": "2821080",
    "end": "2827500"
  },
  {
    "text": "am roles that are managed by different parts of the organization than the",
    "start": "2827500",
    "end": "2832600"
  },
  {
    "text": "production cloud application and so the way that we handle this is by deploying",
    "start": "2832600",
    "end": "2837640"
  },
  {
    "text": "them separately and then linking them through what we call proxies and so we have an application say in version 1 we",
    "start": "2837640",
    "end": "2845380"
  },
  {
    "text": "have it's using you know a B and C resources and so what we say is we",
    "start": "2845380",
    "end": "2850720"
  },
  {
    "text": "create an actual cloud formation stack that exists solely of custom resources and what these custom resources do is",
    "start": "2850720",
    "end": "2856600"
  },
  {
    "text": "you put in the yarn of a and it goes and looks at it and says oh that's a DynamoDB table and it tells",
    "start": "2856600",
    "end": "2862930"
  },
  {
    "text": "CloudFormation hey here's all the things that I know a DB table would tell you so it can pretend",
    "start": "2862930",
    "end": "2868100"
  },
  {
    "text": "to be a DynamoDB table and we do that for all the resources that that the",
    "start": "2868100",
    "end": "2874280"
  },
  {
    "text": "application uses and then we point the application at that proxy stack so it looks in there and it says here's add a",
    "start": "2874280",
    "end": "2879830"
  },
  {
    "text": "couple DynamoDB tables here's an IM role here's a Kinesis stream that flows out to a different part of the organization",
    "start": "2879830",
    "end": "2885620"
  },
  {
    "text": "and it reads all that in and connects it and what that forms is so it's a you",
    "start": "2885620",
    "end": "2891140"
  },
  {
    "text": "know this proxy thing but it forms a manifest of all the long-lived resources that we use and so when we deploy a new",
    "start": "2891140",
    "end": "2896990"
  },
  {
    "text": "version of the application we can just point it at that same proxy stack to",
    "start": "2896990",
    "end": "2904120"
  },
  {
    "text": "reuse those resources and so it acts as a persistent inspectable observable",
    "start": "2904120",
    "end": "2911200"
  },
  {
    "text": "manifest of these connections but then if we're creating you know a new",
    "start": "2911200",
    "end": "2919670"
  },
  {
    "text": "migration you know if we're changing B from version one to version two of this database maybe there's a schema update",
    "start": "2919670",
    "end": "2925090"
  },
  {
    "text": "now that there's serverless arora with an HTTP interface that makes it much more feasible to use from lamda and so",
    "start": "2925090",
    "end": "2932270"
  },
  {
    "text": "then you can actually have schema updates if you have dynamo DB you don't have to worry about that as much but you",
    "start": "2932270",
    "end": "2937940"
  },
  {
    "text": "just then point these proxy resources in that proxy stack to the resources that",
    "start": "2937940",
    "end": "2943910"
  },
  {
    "text": "are being used a and C are still on version one B is on version two and so",
    "start": "2943910",
    "end": "2949610"
  },
  {
    "text": "we don't have to recreate all those resources but to the application it just looks like one proxy stack and it",
    "start": "2949610",
    "end": "2956420"
  },
  {
    "text": "doesn't have to know all the complexities that go on the other side similarly if we're creating new",
    "start": "2956420",
    "end": "2962180"
  },
  {
    "text": "resources again our proxy stack combined you know reduces that complexity for our",
    "start": "2962180",
    "end": "2968960"
  },
  {
    "text": "application and moves it more into sort of the management admin control plane",
    "start": "2968960",
    "end": "2974510"
  },
  {
    "text": "side of it so the final thing that I want to talk about is what I've started",
    "start": "2974510",
    "end": "2982430"
  },
  {
    "text": "to call diff ops so early in the service",
    "start": "2982430",
    "end": "2987790"
  },
  {
    "text": "space people there were you know a number of voices that talked sort of about it as no ops it's like oh you go",
    "start": "2987790",
    "end": "2994520"
  },
  {
    "text": "server lists you don't have to do operations anymore it's fully managed and it's not true and you noticed there was",
    "start": "2994520",
    "end": "3001619"
  },
  {
    "text": "a you know about a year where all the presentations started out with a slide that said serverless is not no ops",
    "start": "3001619",
    "end": "3008130"
  },
  {
    "text": "because those people are wrong now we don't need those slides and I can just",
    "start": "3008130",
    "end": "3013170"
  },
  {
    "text": "say it quickly but the the important thing to understand is that there are new and different things that you have",
    "start": "3013170",
    "end": "3019589"
  },
  {
    "text": "to do because you know if you've done actual you know outsourcing of work",
    "start": "3019589",
    "end": "3025170"
  },
  {
    "text": "before you know that it doesn't mean you do zero work it means that the work that you're doing changes and the same is",
    "start": "3025170",
    "end": "3031079"
  },
  {
    "text": "true of going serverless that you're handing off a lot of the software work that you would be doing in-house to a",
    "start": "3031079",
    "end": "3037829"
  },
  {
    "text": "provider like AWS and one of the aspects relevant to see ICD is that while you",
    "start": "3037829",
    "end": "3045720"
  },
  {
    "text": "have your own dev test and prod environments AWS you're only getting there Pradhan vibrant they don't care",
    "start": "3045720",
    "end": "3052440"
  },
  {
    "text": "what you know which accounts you're using for dev or prod for the most part you know those asterisks on that but so",
    "start": "3052440",
    "end": "3061400"
  },
  {
    "text": "you get the same infrastructure from them in all these accounts but you have orders of magnitude more churn in your",
    "start": "3061400",
    "end": "3067559"
  },
  {
    "text": "dev accounts we do on the order of a thousand lambda deploys per day and so that exercises the control plane the",
    "start": "3067559",
    "end": "3073619"
  },
  {
    "text": "bulk of those deploys are being done in development environments and so our",
    "start": "3073619",
    "end": "3079319"
  },
  {
    "text": "account limits that we hit are mostly in our to vet development environments not in our product environment and so see I",
    "start": "3079319",
    "end": "3086069"
  },
  {
    "text": "can give you a warning of this and it can also tell you sort of you know if",
    "start": "3086069",
    "end": "3091589"
  },
  {
    "text": "there's something happening with the platform you can often see that it often",
    "start": "3091589",
    "end": "3097109"
  },
  {
    "text": "affects you more when things are changing like when you're trying to deploy something new then for the things",
    "start": "3097109",
    "end": "3102779"
  },
  {
    "text": "that are just running and so the closer you watch and the more that your CI processes involve metrics from the",
    "start": "3102779",
    "end": "3109920"
  },
  {
    "text": "platform so bringing in not just is my functionality happening correctly but",
    "start": "3109920",
    "end": "3115380"
  },
  {
    "text": "other cloud watch metrics what I expect them to be that can inform you more of",
    "start": "3115380",
    "end": "3120569"
  },
  {
    "text": "if your application is going to be running the way you expected and with",
    "start": "3120569",
    "end": "3125670"
  },
  {
    "text": "that I'll bring Chris back up [Applause]",
    "start": "3125670",
    "end": "3134250"
  },
  {
    "text": "thanks Ben so just in closing here we've covered kind of a whole lot of content",
    "start": "3134250",
    "end": "3139900"
  },
  {
    "text": "in a short period of time I actually think it's really great that we have customers like iRobot and folks like Ben",
    "start": "3139900",
    "end": "3145930"
  },
  {
    "text": "come up and talk about their experience is unique to ours and even some counterparts on things like mocking and",
    "start": "3145930",
    "end": "3151839"
  },
  {
    "text": "stubbing and their experience with that and it's totally cool and that's like totally good to hear both of those angles so again kind of here at closing",
    "start": "3151839",
    "end": "3158920"
  },
  {
    "text": "right peer-review step one for CIN CD I've been really trying to encourage this and drive this home with folks it",
    "start": "3158920",
    "end": "3165069"
  },
  {
    "text": "may seem like it's some extra effort you might think it's gonna slow down the process but it's going to spend time",
    "start": "3165069",
    "end": "3170770"
  },
  {
    "text": "upfront that you know that will hopefully not have to spend later on debugging a broken application to",
    "start": "3170770",
    "end": "3176980"
  },
  {
    "text": "continuous integration is a must getting code committed and then putting it through batteries of testing sooner",
    "start": "3176980",
    "end": "3182800"
  },
  {
    "text": "rather than later is really really important there are studies out there that show that the longer that you wait",
    "start": "3182800",
    "end": "3188079"
  },
  {
    "text": "between one code is committed and code is tested it removes a developer's mindset from when they wrote that code",
    "start": "3188079",
    "end": "3194170"
  },
  {
    "text": "and makes it harder for them to go and fix it later on so thinking about getting that build process much tighter",
    "start": "3194170",
    "end": "3200230"
  },
  {
    "text": "tied to when the code is committed third continues delivery here right you figure it up through pre-production",
    "start": "3200230",
    "end": "3206500"
  },
  {
    "text": "environments at a minimum even if you don't want to have automatically going to prod deployments essentially",
    "start": "3206500",
    "end": "3211960"
  },
  {
    "text": "continuous deployment that's okay but get the code going through the motion before that such that you're kind of",
    "start": "3211960",
    "end": "3217359"
  },
  {
    "text": "constantly using those muscles as much as you can multiple environments a lot easier and with an incredibly low cost",
    "start": "3217359",
    "end": "3224109"
  },
  {
    "text": "hopefully as cost as close to zero cost for you as possible with server lists one of the key aspects of service is the",
    "start": "3224109",
    "end": "3229839"
  },
  {
    "text": "pricing models that come along with these products and so leverage that to make sure that you're following those kind of best practices kind of five",
    "start": "3229839",
    "end": "3237700"
  },
  {
    "text": "basic stages to the most basic pipeline out there I feel this is kind of like the standard that I see you've got your",
    "start": "3237700",
    "end": "3243220"
  },
  {
    "text": "source build test pre prod and then production and so thinking about what",
    "start": "3243220",
    "end": "3249220"
  },
  {
    "text": "you do in those steps is going to be unique to your application giving your use case given you know what it is that",
    "start": "3249220",
    "end": "3254260"
  },
  {
    "text": "your business is doing but thinking about those five phases or stages I should say and what you're doing inside",
    "start": "3254260",
    "end": "3259960"
  },
  {
    "text": "them is pretty core then again this week we've obviously announced a whole lot of stuff you know",
    "start": "3259960",
    "end": "3265299"
  },
  {
    "text": "this was a year that we had to do live twitch live-streaming throughout the week of launching products because there",
    "start": "3265299",
    "end": "3271180"
  },
  {
    "text": "was just so much going on so there's new features of capabilities again in AWS lambda an API gateway and Sam and code",
    "start": "3271180",
    "end": "3278380"
  },
  {
    "text": "build code deploy and code commit we didn't even get a chance to talk about cloud 9 which has all these awesome",
    "start": "3278380",
    "end": "3283750"
  },
  {
    "text": "development capabilities inside of it from building service applications things like Aurora server lists just so",
    "start": "3283750",
    "end": "3290770"
  },
  {
    "text": "much going on in the server list space so Polly you can spend the next week catching up on all the things you couldn't see firsthand this week you can",
    "start": "3290770",
    "end": "3297640"
  },
  {
    "text": "read about almost all of this stuff on our service landing page was just recently got refreshed also would",
    "start": "3297640",
    "end": "3302680"
  },
  {
    "text": "encourage you to go and sign up for the preview for the service app repo I'd any chance to talk about that in this talk",
    "start": "3302680",
    "end": "3308799"
  },
  {
    "text": "but it's going to be a great place for you to learn discover and test service applications with that my name is Chris",
    "start": "3308799",
    "end": "3315250"
  },
  {
    "text": "Muntz I'm a senior developer advocate for service AWS you could find me at Mons at amazon.com or you could come and shout",
    "start": "3315250",
    "end": "3321849"
  },
  {
    "text": "at me at twitter at Chrisman's happy to help folks out with whatever they need help with that's kind of what my job is",
    "start": "3321849",
    "end": "3328329"
  },
  {
    "text": "thanks again for coming out here to reinvent this week thanks for surviving one week here and getting up early to come out for this talk and see you here",
    "start": "3328329",
    "end": "3336190"
  },
  {
    "text": "next year thank you [Applause]",
    "start": "3336190",
    "end": "3343760"
  }
]