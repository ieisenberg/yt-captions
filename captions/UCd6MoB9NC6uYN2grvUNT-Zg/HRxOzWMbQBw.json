[
  {
    "start": "0",
    "end": "47000"
  },
  {
    "text": "hello everyone my name is Donny",
    "start": "4819",
    "end": "7589"
  },
  {
    "text": "professor I'm a Technical Evangelist",
    "start": "7589",
    "end": "10050"
  },
  {
    "text": "working with Amazon Web Services based",
    "start": "10050",
    "end": "12269"
  },
  {
    "text": "in Singapore and we are so glad to have",
    "start": "12269",
    "end": "15389"
  },
  {
    "text": "you joining us today for a blessed",
    "start": "15389",
    "end": "18180"
  },
  {
    "text": "innovate online conference machine",
    "start": "18180",
    "end": "20430"
  },
  {
    "text": "learning and AI Edition this session is",
    "start": "20430",
    "end": "24029"
  },
  {
    "text": "intended for you developers and to help",
    "start": "24029",
    "end": "27570"
  },
  {
    "text": "you understand how to orchestrate",
    "start": "27570",
    "end": "29330"
  },
  {
    "text": "operational workflows using AWS step",
    "start": "29330",
    "end": "32730"
  },
  {
    "text": "functions identify a few common workflow",
    "start": "32730",
    "end": "36000"
  },
  {
    "text": "patterns and also integration with",
    "start": "36000",
    "end": "38489"
  },
  {
    "text": "various a SS machine learning services",
    "start": "38489",
    "end": "40590"
  },
  {
    "text": "including Amazon six maker I also have",
    "start": "40590",
    "end": "44250"
  },
  {
    "text": "free comprehensive demos so stay tuned",
    "start": "44250",
    "end": "47180"
  },
  {
    "start": "47000",
    "end": "101000"
  },
  {
    "text": "before we start let's discuss the agenda",
    "start": "47180",
    "end": "50309"
  },
  {
    "text": "we'll cover for today to give you a big",
    "start": "50309",
    "end": "52890"
  },
  {
    "text": "picture in understanding T session first",
    "start": "52890",
    "end": "56460"
  },
  {
    "text": "we're going to discuss operation",
    "start": "56460",
    "end": "58710"
  },
  {
    "text": "workflow and its place in our system",
    "start": "58710",
    "end": "61670"
  },
  {
    "text": "moving on to the next agenda is",
    "start": "61670",
    "end": "63930"
  },
  {
    "text": "exploring a few workflow patterns taken",
    "start": "63930",
    "end": "67140"
  },
  {
    "text": "from various cases of our customers",
    "start": "67140",
    "end": "69689"
  },
  {
    "text": "applying a double edged surfaces as a",
    "start": "69689",
    "end": "71880"
  },
  {
    "text": "central integration of their workflows",
    "start": "71880",
    "end": "75080"
  },
  {
    "text": "now after having a good understanding of",
    "start": "75080",
    "end": "78450"
  },
  {
    "text": "on workflow and its patterns we are",
    "start": "78450",
    "end": "81509"
  },
  {
    "text": "moving into the main part of the session",
    "start": "81509",
    "end": "83490"
  },
  {
    "text": "in this section we will learn together",
    "start": "83490",
    "end": "87210"
  },
  {
    "text": "how to utilize a double step functions",
    "start": "87210",
    "end": "90240"
  },
  {
    "text": "and few patterns that we have learned",
    "start": "90240",
    "end": "92640"
  },
  {
    "text": "before to build a really resilient and",
    "start": "92640",
    "end": "95579"
  },
  {
    "text": "to end machine learning populace with",
    "start": "95579",
    "end": "97680"
  },
  {
    "text": "services approach so let's get started",
    "start": "97680",
    "end": "100590"
  },
  {
    "text": "let's talk about workflow every company",
    "start": "100590",
    "end": "104700"
  },
  {
    "start": "101000",
    "end": "124000"
  },
  {
    "text": "and developer have a need to automate",
    "start": "104700",
    "end": "107549"
  },
  {
    "text": "the process to achieve a specific",
    "start": "107549",
    "end": "109439"
  },
  {
    "text": "objective our workflow consists of a",
    "start": "109439",
    "end": "113040"
  },
  {
    "text": "repeatable and reusable independent",
    "start": "113040",
    "end": "115710"
  },
  {
    "text": "microservices that's sort of business",
    "start": "115710",
    "end": "117930"
  },
  {
    "text": "activities that require integration of",
    "start": "117930",
    "end": "120780"
  },
  {
    "text": "various surfaces and done systematically",
    "start": "120780",
    "end": "124670"
  },
  {
    "start": "124000",
    "end": "196000"
  },
  {
    "text": "there are many use cases involving",
    "start": "124670",
    "end": "127439"
  },
  {
    "text": "workflow to name a few which we are",
    "start": "127439",
    "end": "130649"
  },
  {
    "text": "going to use as the base of our demo is",
    "start": "130649",
    "end": "133790"
  },
  {
    "text": "podcast transcription or flow first we",
    "start": "133790",
    "end": "137510"
  },
  {
    "text": "need to fetch the audio and then add",
    "start": "137510",
    "end": "139819"
  },
  {
    "text": "custom vocabulary and finally do the",
    "start": "139819",
    "end": "142819"
  },
  {
    "text": "transcribing process",
    "start": "142819",
    "end": "144760"
  },
  {
    "text": "another example is coming from a media",
    "start": "144760",
    "end": "147500"
  },
  {
    "text": "and entertainment company they need a",
    "start": "147500",
    "end": "149870"
  },
  {
    "text": "workflow to automatically tag any media",
    "start": "149870",
    "end": "152450"
  },
  {
    "text": "uploaded this media content can be",
    "start": "152450",
    "end": "155750"
  },
  {
    "text": "uploaded by them internally or if it's",
    "start": "155750",
    "end": "158629"
  },
  {
    "text": "UGC based platform it shall take any",
    "start": "158629",
    "end": "161239"
  },
  {
    "text": "media uploaded by their users from there",
    "start": "161239",
    "end": "164810"
  },
  {
    "text": "it needs to build an index in order to",
    "start": "164810",
    "end": "167930"
  },
  {
    "text": "query based on specific keyword we often",
    "start": "167930",
    "end": "172400"
  },
  {
    "text": "rely on these workflows in order to make",
    "start": "172400",
    "end": "174859"
  },
  {
    "text": "our system work properly but the biggest",
    "start": "174859",
    "end": "177889"
  },
  {
    "text": "challenge is on the orchestration of the",
    "start": "177889",
    "end": "180799"
  },
  {
    "text": "workflow itself it needs to run properly",
    "start": "180799",
    "end": "184159"
  },
  {
    "text": "over time all of those operational",
    "start": "184159",
    "end": "188299"
  },
  {
    "text": "workflows will be challenging if we",
    "start": "188299",
    "end": "190220"
  },
  {
    "text": "start manually so we need to have a",
    "start": "190220",
    "end": "192799"
  },
  {
    "text": "better approach to orchestrate this",
    "start": "192799",
    "end": "194840"
  },
  {
    "text": "workflow process if you are in this",
    "start": "194840",
    "end": "197389"
  },
  {
    "start": "196000",
    "end": "245000"
  },
  {
    "text": "situation who need a reliable and",
    "start": "197389",
    "end": "200000"
  },
  {
    "text": "powerful orchestration surface for your",
    "start": "200000",
    "end": "201979"
  },
  {
    "text": "workflow I'm delighted to introduce you",
    "start": "201979",
    "end": "204470"
  },
  {
    "text": "to address step function with a direct",
    "start": "204470",
    "end": "208609"
  },
  {
    "text": "step functions you can design to",
    "start": "208609",
    "end": "211129"
  },
  {
    "text": "visualize and run workflows that",
    "start": "211129",
    "end": "213319"
  },
  {
    "text": "integrate various surfaces with higher",
    "start": "213319",
    "end": "216260"
  },
  {
    "text": "resilience because it's nature that can",
    "start": "216260",
    "end": "219859"
  },
  {
    "text": "combine one surface to another it makes",
    "start": "219859",
    "end": "222709"
  },
  {
    "text": "you more productive as you can spend",
    "start": "222709",
    "end": "224810"
  },
  {
    "text": "more time thinking about innovating the",
    "start": "224810",
    "end": "226819"
  },
  {
    "text": "business logic and your application are",
    "start": "226819",
    "end": "229220"
  },
  {
    "text": "easier to operate and maintain a double",
    "start": "229220",
    "end": "233599"
  },
  {
    "text": "stop functions records a history of its",
    "start": "233599",
    "end": "236329"
  },
  {
    "text": "execution making it easier for you to",
    "start": "236329",
    "end": "239569"
  },
  {
    "text": "review in one place all the events in",
    "start": "239569",
    "end": "242449"
  },
  {
    "text": "the sequence in one location a double",
    "start": "242449",
    "end": "246019"
  },
  {
    "start": "245000",
    "end": "297000"
  },
  {
    "text": "step functions make it easy for us to",
    "start": "246019",
    "end": "248000"
  },
  {
    "text": "build wall flow and integrate micro",
    "start": "248000",
    "end": "250099"
  },
  {
    "text": "services into feature-rich system and",
    "start": "250099",
    "end": "252489"
  },
  {
    "text": "there are a few patterns in implementing",
    "start": "252489",
    "end": "255409"
  },
  {
    "text": "workflow that I love to share with all",
    "start": "255409",
    "end": "257239"
  },
  {
    "text": "of you first as workflow involves many",
    "start": "257239",
    "end": "261259"
  },
  {
    "text": "parts it can be built using the micro",
    "start": "261259",
    "end": "263330"
  },
  {
    "text": "surfaces approach it can be polygons",
    "start": "263330",
    "end": "266600"
  },
  {
    "text": "in terms of component or even its",
    "start": "266600",
    "end": "268510"
  },
  {
    "text": "functionalities then we need to monitor",
    "start": "268510",
    "end": "272270"
  },
  {
    "text": "a synchronous processing because not",
    "start": "272270",
    "end": "274550"
  },
  {
    "text": "everything can be done in synchronous",
    "start": "274550",
    "end": "276530"
  },
  {
    "text": "way looking at few stages that we might",
    "start": "276530",
    "end": "280190"
  },
  {
    "text": "have we also need to have availabilities",
    "start": "280190",
    "end": "282770"
  },
  {
    "text": "of all data at each stage and lastly we",
    "start": "282770",
    "end": "287270"
  },
  {
    "text": "can also abstract a chart workflow and",
    "start": "287270",
    "end": "289310"
  },
  {
    "text": "be as part of logical flow so let's",
    "start": "289310",
    "end": "293000"
  },
  {
    "text": "start with the first pattern polyglot",
    "start": "293000",
    "end": "295100"
  },
  {
    "text": "operational workflows for both analytics",
    "start": "295100",
    "end": "299600"
  },
  {
    "start": "297000",
    "end": "340000"
  },
  {
    "text": "and machine learning or flow you might",
    "start": "299600",
    "end": "301880"
  },
  {
    "text": "encounter something similar like these",
    "start": "301880",
    "end": "303710"
  },
  {
    "text": "to office in machine learning workflow",
    "start": "303710",
    "end": "306680"
  },
  {
    "text": "we need to first ingest the data first",
    "start": "306680",
    "end": "309700"
  },
  {
    "text": "then prepare the data to be processed",
    "start": "309700",
    "end": "313420"
  },
  {
    "text": "continued by training the model and the",
    "start": "313420",
    "end": "316340"
  },
  {
    "text": "last part is doing inference through an",
    "start": "316340",
    "end": "318440"
  },
  {
    "text": "endpoint and also tuning in analytics",
    "start": "318440",
    "end": "322700"
  },
  {
    "text": "workflow we need to extract the data",
    "start": "322700",
    "end": "325330"
  },
  {
    "text": "transform it to suit our needs then load",
    "start": "325330",
    "end": "328310"
  },
  {
    "text": "and do the query",
    "start": "328310",
    "end": "329420"
  },
  {
    "text": "as you can see workflow consists of few",
    "start": "329420",
    "end": "332690"
  },
  {
    "text": "parts and it is highly encouraged to",
    "start": "332690",
    "end": "335090"
  },
  {
    "text": "decouple these components in order to",
    "start": "335090",
    "end": "337460"
  },
  {
    "text": "make it easier to scale and manage",
    "start": "337460",
    "end": "340150"
  },
  {
    "start": "340000",
    "end": "379000"
  },
  {
    "text": "let's stop deeper and see how we can",
    "start": "340150",
    "end": "342680"
  },
  {
    "text": "actually test from our code to workflows",
    "start": "342680",
    "end": "345730"
  },
  {
    "text": "here is a simplified code that we can",
    "start": "345730",
    "end": "348260"
  },
  {
    "text": "use to transcribe podcast RSS first we",
    "start": "348260",
    "end": "352220"
  },
  {
    "text": "need to ingest the data by getting the",
    "start": "352220",
    "end": "354260"
  },
  {
    "text": "feed from specific URL then you need to",
    "start": "354260",
    "end": "357470"
  },
  {
    "text": "tune it a little bit by creating a",
    "start": "357470",
    "end": "359570"
  },
  {
    "text": "custom vocabulary to have a smooth",
    "start": "359570",
    "end": "361760"
  },
  {
    "text": "transcription the last step in this code",
    "start": "361760",
    "end": "365270"
  },
  {
    "text": "is to infer by calling transcript",
    "start": "365270",
    "end": "367040"
  },
  {
    "text": "function for specific episodes with",
    "start": "367040",
    "end": "369560"
  },
  {
    "text": "given vocabulary as you can see it looks",
    "start": "369560",
    "end": "373520"
  },
  {
    "text": "pretty similar with machine learning",
    "start": "373520",
    "end": "375260"
  },
  {
    "text": "workflow that we've seen in the previous",
    "start": "375260",
    "end": "377480"
  },
  {
    "text": "slide on the right side you can see few",
    "start": "377480",
    "end": "382550"
  },
  {
    "text": "factors that we need to implement so we",
    "start": "382550",
    "end": "384890"
  },
  {
    "text": "can have a resilient system to happen",
    "start": "384890",
    "end": "388580"
  },
  {
    "text": "concurrency control I've added a",
    "start": "388580",
    "end": "390470"
  },
  {
    "text": "function away so you won't block the",
    "start": "390470",
    "end": "392990"
  },
  {
    "text": "entire flow also we need to have an",
    "start": "392990",
    "end": "396080"
  },
  {
    "start": "394000",
    "end": "411000"
  },
  {
    "text": "error handling this is to catch if",
    "start": "396080",
    "end": "398510"
  },
  {
    "text": "anything fails we",
    "start": "398510",
    "end": "399980"
  },
  {
    "text": "anticipated it but unlike traditional",
    "start": "399980",
    "end": "402920"
  },
  {
    "text": "try-catch we need to have retry function",
    "start": "402920",
    "end": "406190"
  },
  {
    "text": "to reprocess those functions that fail",
    "start": "406190",
    "end": "409640"
  },
  {
    "text": "previously its podcast consists of",
    "start": "409640",
    "end": "414170"
  },
  {
    "text": "multiple episodes now at this stage its",
    "start": "414170",
    "end": "418000"
  },
  {
    "text": "episode needs to be processed however",
    "start": "418000",
    "end": "421850"
  },
  {
    "text": "its episode needs to have its own state",
    "start": "421850",
    "end": "425620"
  },
  {
    "text": "our workflow needs to have good state",
    "start": "425620",
    "end": "428570"
  },
  {
    "text": "management so the operation at the",
    "start": "428570",
    "end": "430970"
  },
  {
    "text": "specific stage can run properly so let's",
    "start": "430970",
    "end": "434480"
  },
  {
    "text": "see how can orchestrate the specific",
    "start": "434480",
    "end": "436430"
  },
  {
    "text": "workflow with a SS step functions this",
    "start": "436430",
    "end": "441170"
  },
  {
    "text": "is a high-level architecture for the",
    "start": "441170",
    "end": "443150"
  },
  {
    "text": "demo we've prepared next demo is for",
    "start": "443150",
    "end": "447110"
  },
  {
    "text": "transcribing podcasts using micro",
    "start": "447110",
    "end": "449150"
  },
  {
    "text": "services approach and integration with a",
    "start": "449150",
    "end": "451640"
  },
  {
    "text": "dabbler step functions we're going to",
    "start": "451640",
    "end": "455060"
  },
  {
    "text": "use a SS step functions to coordinate or",
    "start": "455060",
    "end": "457970"
  },
  {
    "text": "flow to get podcasts do the",
    "start": "457970",
    "end": "460250"
  },
  {
    "text": "transcription and feeding it into",
    "start": "460250",
    "end": "462080"
  },
  {
    "text": "elasticsearch in this demo we will show",
    "start": "462080",
    "end": "465050"
  },
  {
    "start": "463000",
    "end": "502000"
  },
  {
    "text": "you how to use aerialist step functions",
    "start": "465050",
    "end": "467180"
  },
  {
    "text": "by combining several micro services to",
    "start": "467180",
    "end": "469880"
  },
  {
    "text": "transcribe a podcast from an RSS URL",
    "start": "469880",
    "end": "472330"
  },
  {
    "text": "this is my eatable step function test",
    "start": "472330",
    "end": "474830"
  },
  {
    "text": "board as you can see I already have a",
    "start": "474830",
    "end": "477860"
  },
  {
    "text": "few state machines built for this demo",
    "start": "477860",
    "end": "479830"
  },
  {
    "text": "RSS step machine is the main state",
    "start": "479830",
    "end": "482060"
  },
  {
    "text": "machine to fetch and also create custom",
    "start": "482060",
    "end": "484160"
  },
  {
    "text": "vocabulary using Amazon transcribe",
    "start": "484160",
    "end": "486740"
  },
  {
    "text": "inside podcast RSS URL we have multiple",
    "start": "486740",
    "end": "489830"
  },
  {
    "text": "episodes and the other state machine",
    "start": "489830",
    "end": "491870"
  },
  {
    "text": "called episode state machine is a state",
    "start": "491870",
    "end": "494330"
  },
  {
    "text": "machine that process these episodes and",
    "start": "494330",
    "end": "496250"
  },
  {
    "text": "ingest the data into an elastic shift so",
    "start": "496250",
    "end": "498560"
  },
  {
    "text": "we can perform a curry let's start with",
    "start": "498560",
    "end": "500810"
  },
  {
    "text": "RSS state machine this is the detail",
    "start": "500810",
    "end": "503660"
  },
  {
    "start": "502000",
    "end": "565000"
  },
  {
    "text": "page for each state machines in a SS",
    "start": "503660",
    "end": "505580"
  },
  {
    "text": "step functions on the boss below you",
    "start": "505580",
    "end": "507740"
  },
  {
    "text": "will see that we have three tabs",
    "start": "507740",
    "end": "509860"
  },
  {
    "text": "execution tab shows us a list of history",
    "start": "509860",
    "end": "512719"
  },
  {
    "text": "of running and previously executed state",
    "start": "512720",
    "end": "515060"
  },
  {
    "text": "machines in this tab you can see that I",
    "start": "515060",
    "end": "517760"
  },
  {
    "text": "run a few executions along with details",
    "start": "517760",
    "end": "520340"
  },
  {
    "text": "on stairs time started and where it was",
    "start": "520340",
    "end": "522530"
  },
  {
    "text": "ended if you're looking for a history of",
    "start": "522530",
    "end": "525140"
  },
  {
    "text": "your executions you can go to the step",
    "start": "525140",
    "end": "527270"
  },
  {
    "text": "and repeat those executions",
    "start": "527270",
    "end": "528770"
  },
  {
    "text": "a finishing tab has the language",
    "start": "528770",
    "end": "531830"
  },
  {
    "text": "definition using Amazon state line",
    "start": "531830",
    "end": "533700"
  },
  {
    "text": "which to describe state machines",
    "start": "533700",
    "end": "535260"
  },
  {
    "text": "declaratively insightly step it also has",
    "start": "535260",
    "end": "538590"
  },
  {
    "text": "a nice visual representation of your",
    "start": "538590",
    "end": "540360"
  },
  {
    "text": "state machine definition it gives us",
    "start": "540360",
    "end": "543210"
  },
  {
    "text": "clarity of our workflow and if you want",
    "start": "543210",
    "end": "546090"
  },
  {
    "text": "to make changes simply click on the edit",
    "start": "546090",
    "end": "548460"
  },
  {
    "text": "button and save it afterward let's go",
    "start": "548460",
    "end": "551550"
  },
  {
    "text": "back to the execution tab let us review",
    "start": "551550",
    "end": "554850"
  },
  {
    "text": "together one execution that has",
    "start": "554850",
    "end": "556740"
  },
  {
    "text": "completed so it will give us a big",
    "start": "556740",
    "end": "558840"
  },
  {
    "text": "picture on how everything goes this is",
    "start": "558840",
    "end": "562740"
  },
  {
    "text": "the execution details page you can see",
    "start": "562740",
    "end": "565320"
  },
  {
    "text": "every event that has been triggered and",
    "start": "565320",
    "end": "567540"
  },
  {
    "text": "executed both fulfill and succeeded in",
    "start": "567540",
    "end": "570900"
  },
  {
    "text": "this step we also have details for each",
    "start": "570900",
    "end": "574140"
  },
  {
    "text": "step to give you a granular level for",
    "start": "574140",
    "end": "576450"
  },
  {
    "text": "reviewing your state machines here you",
    "start": "576450",
    "end": "580080"
  },
  {
    "text": "can see that we have details on process",
    "start": "580080",
    "end": "581970"
  },
  {
    "text": "podcast RSS function as you might",
    "start": "581970",
    "end": "585150"
  },
  {
    "text": "already have noticed all of this",
    "start": "585150",
    "end": "586860"
  },
  {
    "text": "function besides elasticsearch in the",
    "start": "586860",
    "end": "588990"
  },
  {
    "text": "state machine are being executed by a SS",
    "start": "588990",
    "end": "591630"
  },
  {
    "text": "lambda this lambda function is written",
    "start": "591630",
    "end": "595860"
  },
  {
    "text": "in Python 2.7 it's normal Python code so",
    "start": "595860",
    "end": "600510"
  },
  {
    "text": "let's go back to step function page I am",
    "start": "600510",
    "end": "603630"
  },
  {
    "text": "interested in what kind of input we",
    "start": "603630",
    "end": "605580"
  },
  {
    "text": "supply in order for this tech machine to",
    "start": "605580",
    "end": "607590"
  },
  {
    "text": "run this is the input that we supply to",
    "start": "607590",
    "end": "610620"
  },
  {
    "text": "the state machine we have RSS URL which",
    "start": "610620",
    "end": "614130"
  },
  {
    "text": "is hosted by CloudFront in reality this",
    "start": "614130",
    "end": "616350"
  },
  {
    "text": "URL can be anywhere as long as it",
    "start": "616350",
    "end": "618210"
  },
  {
    "text": "publicly accessible then we define how",
    "start": "618210",
    "end": "620910"
  },
  {
    "text": "many episodes we want to process we also",
    "start": "620910",
    "end": "624600"
  },
  {
    "text": "have optional configuration try one for",
    "start": "624600",
    "end": "626940"
  },
  {
    "text": "debugging purposes moving on to the",
    "start": "626940",
    "end": "630060"
  },
  {
    "text": "output inside the key value variable of",
    "start": "630060",
    "end": "632910"
  },
  {
    "start": "631000",
    "end": "661000"
  },
  {
    "text": "episodes we have information regarding",
    "start": "632910",
    "end": "634800"
  },
  {
    "text": "the location of s3 storage which we used",
    "start": "634800",
    "end": "637860"
  },
  {
    "text": "to hold the data we have pocket key and",
    "start": "637860",
    "end": "640770"
  },
  {
    "text": "also the path location at this stage we",
    "start": "640770",
    "end": "644220"
  },
  {
    "text": "already have our first data which is the",
    "start": "644220",
    "end": "646560"
  },
  {
    "text": "episode list of the podcasts itself on",
    "start": "646560",
    "end": "649340"
  },
  {
    "text": "the visual workflow diagram we can see",
    "start": "649340",
    "end": "652380"
  },
  {
    "text": "the work fluid this tape machine",
    "start": "652380",
    "end": "653880"
  },
  {
    "text": "performs now let me cry queue for each",
    "start": "653880",
    "end": "657030"
  },
  {
    "text": "state in this workflow one by one the",
    "start": "657030",
    "end": "661650"
  },
  {
    "text": "initial step is processing podcast RSS",
    "start": "661650",
    "end": "664140"
  },
  {
    "text": "in this step we will fetch",
    "start": "664140",
    "end": "667250"
  },
  {
    "text": "our SS from given URL and store the",
    "start": "667250",
    "end": "669980"
  },
  {
    "text": "episode list in Amazon s3 bucket then we",
    "start": "669980",
    "end": "673819"
  },
  {
    "text": "create a custom vocabulary for Amazon",
    "start": "673819",
    "end": "676009"
  },
  {
    "text": "transcribe while still passing down the",
    "start": "676009",
    "end": "678050"
  },
  {
    "text": "output from the previous function now",
    "start": "678050",
    "end": "681199"
  },
  {
    "text": "this is where everything gets",
    "start": "681199",
    "end": "682699"
  },
  {
    "text": "interesting with a SS step functions you",
    "start": "682699",
    "end": "686300"
  },
  {
    "text": "can use choice to control the flow of",
    "start": "686300",
    "end": "688730"
  },
  {
    "text": "your state machines this particle step",
    "start": "688730",
    "end": "691730"
  },
  {
    "text": "is folk ability completed accepts input",
    "start": "691730",
    "end": "694790"
  },
  {
    "text": "from the previous function and will",
    "start": "694790",
    "end": "697189"
  },
  {
    "text": "decide the next step if folk ability for",
    "start": "697189",
    "end": "700970"
  },
  {
    "text": "Amazon transcript is not completed yet",
    "start": "700970",
    "end": "702769"
  },
  {
    "text": "it will go to the left another",
    "start": "702769",
    "end": "706009"
  },
  {
    "text": "interesting state in a data step",
    "start": "706009",
    "end": "707959"
  },
  {
    "text": "function is that you have the ability to",
    "start": "707959",
    "end": "710480"
  },
  {
    "text": "give a waiting time in this case this",
    "start": "710480",
    "end": "713870"
  },
  {
    "text": "function will wait for five seconds",
    "start": "713870",
    "end": "715699"
  },
  {
    "text": "while still passing the output to the",
    "start": "715699",
    "end": "717769"
  },
  {
    "text": "next function then after you wait for",
    "start": "717769",
    "end": "720829"
  },
  {
    "text": "five seconds it will check again to",
    "start": "720829",
    "end": "722540"
  },
  {
    "text": "fuckability status and pass the result",
    "start": "722540",
    "end": "724699"
  },
  {
    "text": "of the status back to is folk ability",
    "start": "724699",
    "end": "726980"
  },
  {
    "text": "completed step once fork ability",
    "start": "726980",
    "end": "730189"
  },
  {
    "text": "creation is completed the next step is",
    "start": "730189",
    "end": "732439"
  },
  {
    "text": "to create index mapping on elasticsearch",
    "start": "732439",
    "end": "735009"
  },
  {
    "text": "next step is for the state machine to",
    "start": "735009",
    "end": "737540"
  },
  {
    "text": "process each podcast episode if you can",
    "start": "737540",
    "end": "740839"
  },
  {
    "text": "recall at the beginning we have two",
    "start": "740839",
    "end": "742550"
  },
  {
    "text": "state machine the other state machine is",
    "start": "742550",
    "end": "745160"
  },
  {
    "text": "to process episode this step process",
    "start": "745160",
    "end": "748699"
  },
  {
    "text": "podcast episodes is actually a lambda",
    "start": "748699",
    "end": "750889"
  },
  {
    "text": "task which will call another area step",
    "start": "750889",
    "end": "753980"
  },
  {
    "text": "functions state machine called episode",
    "start": "753980",
    "end": "756170"
  },
  {
    "text": "state machine so this is another pattern",
    "start": "756170",
    "end": "759350"
  },
  {
    "text": "that you can use a child workflow it",
    "start": "759350",
    "end": "762639"
  },
  {
    "text": "actually extracts another workflow by",
    "start": "762639",
    "end": "765829"
  },
  {
    "text": "calling another state machine through",
    "start": "765829",
    "end": "767750"
  },
  {
    "text": "areas lambda function another pattern is",
    "start": "767750",
    "end": "771589"
  },
  {
    "text": "similar to previous vocabulary checking",
    "start": "771589",
    "end": "773569"
  },
  {
    "text": "after we process an episode it will",
    "start": "773569",
    "end": "777379"
  },
  {
    "text": "check whether all episodes have already",
    "start": "777379",
    "end": "779240"
  },
  {
    "text": "been process or not if there are still a",
    "start": "779240",
    "end": "782509"
  },
  {
    "text": "few episodes they need to be processed",
    "start": "782509",
    "end": "784160"
  },
  {
    "text": "it will wait 30 seconds and return to",
    "start": "784160",
    "end": "788029"
  },
  {
    "text": "plot process podcast episodes the last",
    "start": "788029",
    "end": "791899"
  },
  {
    "text": "step is to perform simple housekeeping",
    "start": "791899",
    "end": "793899"
  },
  {
    "text": "deleting custom vocabulary on Amazon",
    "start": "793899",
    "end": "796550"
  },
  {
    "text": "transcribe before it reached terminals",
    "start": "796550",
    "end": "799100"
  },
  {
    "text": "and in the workflow now we understand",
    "start": "799100",
    "end": "801590"
  },
  {
    "start": "801000",
    "end": "830000"
  },
  {
    "text": "how this workflow works along with a few",
    "start": "801590",
    "end": "803750"
  },
  {
    "text": "patterns that we use in this specific",
    "start": "803750",
    "end": "805460"
  },
  {
    "text": "state machine let's go back and perform",
    "start": "805460",
    "end": "807440"
  },
  {
    "text": "the demo we can also manually start the",
    "start": "807440",
    "end": "811190"
  },
  {
    "text": "execution by clicking this button let's",
    "start": "811190",
    "end": "814160"
  },
  {
    "text": "put something here as the execution name",
    "start": "814160",
    "end": "816160"
  },
  {
    "text": "I'm going to pass the input here so our",
    "start": "816160",
    "end": "820280"
  },
  {
    "text": "state machine understands the",
    "start": "820280",
    "end": "821870"
  },
  {
    "text": "instruction after that we click start",
    "start": "821870",
    "end": "827180"
  },
  {
    "text": "execution now it's being started as it",
    "start": "827180",
    "end": "834320"
  },
  {
    "start": "830000",
    "end": "856000"
  },
  {
    "text": "progresses you can see that on the fuel",
    "start": "834320",
    "end": "836990"
  },
  {
    "text": "flow the box colors will change based on",
    "start": "836990",
    "end": "839780"
  },
  {
    "text": "the legends shown it's currently",
    "start": "839780",
    "end": "842090"
  },
  {
    "text": "processing for custom vocabulary",
    "start": "842090",
    "end": "843770"
  },
  {
    "text": "creation therefore you see that that the",
    "start": "843770",
    "end": "846050"
  },
  {
    "text": "wait state is showing blue color as it's",
    "start": "846050",
    "end": "848150"
  },
  {
    "text": "still in progress another feature in a",
    "start": "848150",
    "end": "851450"
  },
  {
    "text": "double stop functions if you can run",
    "start": "851450",
    "end": "853310"
  },
  {
    "text": "your workflow in any skill we currently",
    "start": "853310",
    "end": "856100"
  },
  {
    "start": "856000",
    "end": "890000"
  },
  {
    "text": "have one running here so let's try to",
    "start": "856100",
    "end": "858950"
  },
  {
    "text": "run another workflow okay so we click on",
    "start": "858950",
    "end": "865700"
  },
  {
    "text": "start execution we give a name for this",
    "start": "865700",
    "end": "868370"
  },
  {
    "text": "execution and then we pass the variable",
    "start": "868370",
    "end": "871040"
  },
  {
    "text": "again now we click on start execution",
    "start": "871040",
    "end": "877570"
  },
  {
    "text": "now we have another boxer running this",
    "start": "877570",
    "end": "881120"
  },
  {
    "text": "rock flow ingest the data into",
    "start": "881120",
    "end": "882680"
  },
  {
    "text": "elasticsearch so the user can perform a",
    "start": "882680",
    "end": "885710"
  },
  {
    "text": "curry against the output from Amazon",
    "start": "885710",
    "end": "887780"
  },
  {
    "text": "transcribe this is my cabana dashboard",
    "start": "887780",
    "end": "892910"
  },
  {
    "start": "890000",
    "end": "950000"
  },
  {
    "text": "that I've prepared for this demo let's",
    "start": "892910",
    "end": "895060"
  },
  {
    "text": "do a curry previously I perform step",
    "start": "895060",
    "end": "900590"
  },
  {
    "text": "functions that only need to process 10",
    "start": "900590",
    "end": "902600"
  },
  {
    "text": "episodes here you can see that we have",
    "start": "902600",
    "end": "905450"
  },
  {
    "text": "10 hits in our Cabana so let's try to",
    "start": "905450",
    "end": "908900"
  },
  {
    "text": "search something in podcast title I'm",
    "start": "908900",
    "end": "913580"
  },
  {
    "text": "going to search for infant updates we",
    "start": "913580",
    "end": "918980"
  },
  {
    "text": "can also look into the details for each",
    "start": "918980",
    "end": "920930"
  },
  {
    "text": "result our rock flow with a dia blaster",
    "start": "920930",
    "end": "925220"
  },
  {
    "text": "functions transcribe the podcast feed",
    "start": "925220",
    "end": "926990"
  },
  {
    "text": "and it will also store the results here",
    "start": "926990",
    "end": "929320"
  },
  {
    "text": "we have various data points that we can",
    "start": "929320",
    "end": "931880"
  },
  {
    "text": "use for food",
    "start": "931880",
    "end": "932960"
  },
  {
    "text": "assessing for an example we have",
    "start": "932960",
    "end": "935420"
  },
  {
    "text": "transcribe field along with data",
    "start": "935420",
    "end": "937130"
  },
  {
    "text": "allocation in our s3 and that's the end",
    "start": "937130",
    "end": "940490"
  },
  {
    "text": "of this demo I hope it helps you to",
    "start": "940490",
    "end": "943190"
  },
  {
    "text": "understand how you can build your",
    "start": "943190",
    "end": "944600"
  },
  {
    "text": "workflow using a double step functions",
    "start": "944600",
    "end": "946730"
  },
  {
    "text": "along with a few implementation patterns",
    "start": "946730",
    "end": "949450"
  },
  {
    "text": "the second pattern is monitoring",
    "start": "949450",
    "end": "952010"
  },
  {
    "start": "950000",
    "end": "999000"
  },
  {
    "text": "asynchronous processing there are cases",
    "start": "952010",
    "end": "956210"
  },
  {
    "text": "when we need to wait for a job running",
    "start": "956210",
    "end": "959330"
  },
  {
    "text": "as synchronously and we need to wait and",
    "start": "959330",
    "end": "963490"
  },
  {
    "text": "periodically check the status of a job",
    "start": "963490",
    "end": "966200"
  },
  {
    "text": "to see if it's already completed or not",
    "start": "966200",
    "end": "970150"
  },
  {
    "text": "with a double step functions you can",
    "start": "970150",
    "end": "973010"
  },
  {
    "text": "easily do this by combining these states",
    "start": "973010",
    "end": "976210"
  },
  {
    "text": "there is various type of state in area",
    "start": "976210",
    "end": "978800"
  },
  {
    "text": "rested functions and two particle types",
    "start": "978800",
    "end": "980990"
  },
  {
    "text": "for this situation is choice state and",
    "start": "980990",
    "end": "983750"
  },
  {
    "text": "wait for state by combining these two",
    "start": "983750",
    "end": "987710"
  },
  {
    "text": "types you can monitor asynchronous",
    "start": "987710",
    "end": "989690"
  },
  {
    "text": "processing by making the workflow",
    "start": "989690",
    "end": "992090"
  },
  {
    "text": "waiting for a specific time and then",
    "start": "992090",
    "end": "994670"
  },
  {
    "text": "checking the status and finally make the",
    "start": "994670",
    "end": "996950"
  },
  {
    "text": "decision the third pattern is data",
    "start": "996950",
    "end": "1001450"
  },
  {
    "start": "999000",
    "end": "1033000"
  },
  {
    "text": "availability at all stages as you can",
    "start": "1001450",
    "end": "1006250"
  },
  {
    "text": "see in the previous demo there are cases",
    "start": "1006250",
    "end": "1008770"
  },
  {
    "text": "which each stitch needs to store its",
    "start": "1008770",
    "end": "1011140"
  },
  {
    "text": "data from raw data to process data it is",
    "start": "1011140",
    "end": "1015790"
  },
  {
    "text": "a good practice to store the data in",
    "start": "1015790",
    "end": "1018340"
  },
  {
    "text": "each location for an example the raw",
    "start": "1018340",
    "end": "1021820"
  },
  {
    "text": "audio data of the podcast is being",
    "start": "1021820",
    "end": "1024010"
  },
  {
    "text": "stored under the audio folder then the",
    "start": "1024010",
    "end": "1027250"
  },
  {
    "text": "vocabulary mapping for Amazon transcribe",
    "start": "1027250",
    "end": "1029230"
  },
  {
    "text": "is being stored under a specific folder",
    "start": "1029230",
    "end": "1032790"
  },
  {
    "text": "the last pattern is workflow",
    "start": "1032790",
    "end": "1035140"
  },
  {
    "start": "1033000",
    "end": "1069000"
  },
  {
    "text": "abstractions in the previous demo we've",
    "start": "1035140",
    "end": "1039490"
  },
  {
    "text": "mentioned about having two state",
    "start": "1039490",
    "end": "1040959"
  },
  {
    "text": "machines first is to process the podcast",
    "start": "1040959",
    "end": "1044410"
  },
  {
    "text": "the main state machine the other is to",
    "start": "1044410",
    "end": "1047650"
  },
  {
    "text": "process those episodes called episode",
    "start": "1047650",
    "end": "1049960"
  },
  {
    "text": "state machine now this state machine is",
    "start": "1049960",
    "end": "1053290"
  },
  {
    "text": "actually a child workflow abstracting",
    "start": "1053290",
    "end": "1055930"
  },
  {
    "text": "all the operation from the parent",
    "start": "1055930",
    "end": "1057640"
  },
  {
    "text": "workflow to reduce the complexity of",
    "start": "1057640",
    "end": "1061390"
  },
  {
    "text": "your workflow abstract the complexity by",
    "start": "1061390",
    "end": "1064150"
  },
  {
    "text": "using child workflow and include their",
    "start": "1064150",
    "end": "1066220"
  },
  {
    "text": "workflow",
    "start": "1066220",
    "end": "1067010"
  },
  {
    "text": "- the bigger one flow alright we've",
    "start": "1067010",
    "end": "1071600"
  },
  {
    "start": "1069000",
    "end": "1116000"
  },
  {
    "text": "covered workflow patterns using edible",
    "start": "1071600",
    "end": "1073760"
  },
  {
    "text": "ester functions and Amazon transcribe",
    "start": "1073760",
    "end": "1076040"
  },
  {
    "text": "now let's move on on how integrate all",
    "start": "1076040",
    "end": "1078590"
  },
  {
    "text": "flow with Amazon States maker there are",
    "start": "1078590",
    "end": "1082610"
  },
  {
    "text": "some cases which we need to retrain our",
    "start": "1082610",
    "end": "1085040"
  },
  {
    "text": "machine learning model as the data",
    "start": "1085040",
    "end": "1087260"
  },
  {
    "text": "significantly changing over time say it",
    "start": "1087260",
    "end": "1090740"
  },
  {
    "text": "for a week or so in this case it may be",
    "start": "1090740",
    "end": "1094250"
  },
  {
    "text": "beneficial to frequently retrain and",
    "start": "1094250",
    "end": "1096770"
  },
  {
    "text": "redeploy the model by using the most",
    "start": "1096770",
    "end": "1099530"
  },
  {
    "text": "recent data so the model is not biased",
    "start": "1099530",
    "end": "1102049"
  },
  {
    "text": "by using all the data in the next demo",
    "start": "1102049",
    "end": "1106190"
  },
  {
    "text": "we'll try to answer this challenge by",
    "start": "1106190",
    "end": "1109010"
  },
  {
    "text": "building a server less pipeline to",
    "start": "1109010",
    "end": "1111169"
  },
  {
    "text": "orchestrate continuous training and",
    "start": "1111169",
    "end": "1112940"
  },
  {
    "text": "deployment for machine learning model",
    "start": "1112940",
    "end": "1114740"
  },
  {
    "text": "with Amazon 6 maker for this demo the",
    "start": "1114740",
    "end": "1118370"
  },
  {
    "start": "1116000",
    "end": "1194000"
  },
  {
    "text": "scenario is we are going to take housing",
    "start": "1118370",
    "end": "1120320"
  },
  {
    "text": "prices housing prices in many areas are",
    "start": "1120320",
    "end": "1123470"
  },
  {
    "text": "extremely volatile so the distribution",
    "start": "1123470",
    "end": "1125630"
  },
  {
    "text": "of housing price data for a day may be",
    "start": "1125630",
    "end": "1128480"
  },
  {
    "text": "extremely different than a day before or",
    "start": "1128480",
    "end": "1130970"
  },
  {
    "text": "even a week later so the idea here is to",
    "start": "1130970",
    "end": "1134299"
  },
  {
    "text": "periodically check our data stored in",
    "start": "1134299",
    "end": "1136850"
  },
  {
    "text": "Amazon s3 using hot watch events to",
    "start": "1136850",
    "end": "1140360"
  },
  {
    "text": "trigger the model training with Amazon",
    "start": "1140360",
    "end": "1142549"
  },
  {
    "text": "size maker based on specific workflow",
    "start": "1142549",
    "end": "1145160"
  },
  {
    "text": "using a SS step functions simply put if",
    "start": "1145160",
    "end": "1149120"
  },
  {
    "text": "there's new data then retrain the model",
    "start": "1149120",
    "end": "1152710"
  },
  {
    "text": "you might think this as CI CD for",
    "start": "1152710",
    "end": "1156020"
  },
  {
    "text": "machine learning models as CI CD is to",
    "start": "1156020",
    "end": "1159410"
  },
  {
    "text": "software this can be continuous training",
    "start": "1159410",
    "end": "1161750"
  },
  {
    "text": "and deployment for machine learning with",
    "start": "1161750",
    "end": "1165049"
  },
  {
    "text": "that being said let's start this demo",
    "start": "1165049",
    "end": "1167890"
  },
  {
    "text": "now we are in a double step function",
    "start": "1167890",
    "end": "1170510"
  },
  {
    "text": "test board i've prepared one state",
    "start": "1170510",
    "end": "1172970"
  },
  {
    "text": "machine for this workflow call sis",
    "start": "1172970",
    "end": "1175400"
  },
  {
    "text": "michael state machine so let's click on",
    "start": "1175400",
    "end": "1179000"
  },
  {
    "text": "this state machine to see the details we",
    "start": "1179000",
    "end": "1183830"
  },
  {
    "text": "are going to walk through the workflow",
    "start": "1183830",
    "end": "1185720"
  },
  {
    "text": "one by one so let's see successful",
    "start": "1185720",
    "end": "1188929"
  },
  {
    "text": "execution so we understand the entire",
    "start": "1188929",
    "end": "1191900"
  },
  {
    "text": "workflow",
    "start": "1191900",
    "end": "1194290"
  },
  {
    "start": "1194000",
    "end": "1627000"
  },
  {
    "text": "this orchestration pipeline has a number",
    "start": "1194290",
    "end": "1197510"
  },
  {
    "text": "of state machine steps",
    "start": "1197510",
    "end": "1199520"
  },
  {
    "text": "let's review it all the way through to",
    "start": "1199520",
    "end": "1201890"
  },
  {
    "text": "the end this tech machine is triggered",
    "start": "1201890",
    "end": "1205700"
  },
  {
    "text": "by clot watch event if the event meets",
    "start": "1205700",
    "end": "1210260"
  },
  {
    "text": "the rule we have defined it will trigger",
    "start": "1210260",
    "end": "1212929"
  },
  {
    "text": "this state machine and called stop check",
    "start": "1212929",
    "end": "1216140"
  },
  {
    "text": "data function now check data function",
    "start": "1216140",
    "end": "1221240"
  },
  {
    "text": "checks the s3 bucket for new training",
    "start": "1221240",
    "end": "1223970"
  },
  {
    "text": "data it was by comparing the date of the",
    "start": "1223970",
    "end": "1227660"
  },
  {
    "text": "last uploaded data file to the date of",
    "start": "1227660",
    "end": "1230270"
  },
  {
    "text": "the most recent date the file of a model",
    "start": "1230270",
    "end": "1232700"
  },
  {
    "text": "that has been trained and deployed",
    "start": "1232700",
    "end": "1235780"
  },
  {
    "text": "comparing the date is pulled from a",
    "start": "1235780",
    "end": "1237950"
  },
  {
    "text": "system managers parameter store if",
    "start": "1237950",
    "end": "1240429"
  },
  {
    "text": "there's no new data is found and the",
    "start": "1240429",
    "end": "1244040"
  },
  {
    "text": "state machine moves into no new data and",
    "start": "1244040",
    "end": "1246500"
  },
  {
    "text": "reach terminal state which is an if new",
    "start": "1246500",
    "end": "1252530"
  },
  {
    "text": "training data is found then the data",
    "start": "1252530",
    "end": "1255620"
  },
  {
    "text": "falls in the training interval are added",
    "start": "1255620",
    "end": "1258590"
  },
  {
    "text": "to a training manifest that is uploaded",
    "start": "1258590",
    "end": "1261410"
  },
  {
    "text": "to s3 and the state machine move into",
    "start": "1261410",
    "end": "1263929"
  },
  {
    "text": "stop training job step now let me show",
    "start": "1263929",
    "end": "1268850"
  },
  {
    "text": "you how training manifests looks like so",
    "start": "1268850",
    "end": "1273770"
  },
  {
    "text": "this is a simple manifest as you can see",
    "start": "1273770",
    "end": "1276200"
  },
  {
    "text": "that we have the prefix along with those",
    "start": "1276200",
    "end": "1278420"
  },
  {
    "text": "new data files moving on to the next",
    "start": "1278420",
    "end": "1283429"
  },
  {
    "text": "function start training job start",
    "start": "1283429",
    "end": "1288350"
  },
  {
    "text": "training job function creates a training",
    "start": "1288350",
    "end": "1290300"
  },
  {
    "text": "job in sis maker for linear learner",
    "start": "1290300",
    "end": "1292940"
  },
  {
    "text": "algorithm using training data specified",
    "start": "1292940",
    "end": "1296300"
  },
  {
    "text": "in training manifest uploaded previously",
    "start": "1296300",
    "end": "1298820"
  },
  {
    "text": "in check data step if everything is OK",
    "start": "1298820",
    "end": "1303710"
  },
  {
    "text": "then the step machine will move into",
    "start": "1303710",
    "end": "1307030"
  },
  {
    "text": "notify slack to post a notification if",
    "start": "1307030",
    "end": "1312440"
  },
  {
    "text": "we set the notification it will turn",
    "start": "1312440",
    "end": "1315800"
  },
  {
    "text": "post to slack but it can be anything",
    "start": "1315800",
    "end": "1318370"
  },
  {
    "text": "including sending an email or even other",
    "start": "1318370",
    "end": "1321500"
  },
  {
    "text": "apps the point here is we need to be",
    "start": "1321500",
    "end": "1324860"
  },
  {
    "text": "notified once it's maker starts a new",
    "start": "1324860",
    "end": "1327800"
  },
  {
    "text": "training job after posting notification",
    "start": "1327800",
    "end": "1331850"
  },
  {
    "text": "the state machine moves",
    "start": "1331850",
    "end": "1333670"
  },
  {
    "text": "into notified slack branch step notify",
    "start": "1333670",
    "end": "1337930"
  },
  {
    "text": "slack French is a choice tip it looks at",
    "start": "1337930",
    "end": "1341320"
  },
  {
    "text": "the stage of the pipeline and status of",
    "start": "1341320",
    "end": "1344230"
  },
  {
    "text": "the training or deployment job fire the",
    "start": "1344230",
    "end": "1347170"
  },
  {
    "text": "imp adjacent to decide which step to",
    "start": "1347170",
    "end": "1350440"
  },
  {
    "text": "move the state machine into if it",
    "start": "1350440",
    "end": "1354160"
  },
  {
    "text": "identifies from the model training or",
    "start": "1354160",
    "end": "1356920"
  },
  {
    "text": "deployment is in progress then it moved",
    "start": "1356920",
    "end": "1360130"
  },
  {
    "text": "to step nation into the check status",
    "start": "1360130",
    "end": "1361990"
  },
  {
    "text": "wait step if it identifies that model",
    "start": "1361990",
    "end": "1366160"
  },
  {
    "text": "training or deployment has failed then",
    "start": "1366160",
    "end": "1368500"
  },
  {
    "text": "it moved to state machine into the job",
    "start": "1368500",
    "end": "1370480"
  },
  {
    "text": "field or deployment",
    "start": "1370480",
    "end": "1372340"
  },
  {
    "text": "failed step respectively finally if it",
    "start": "1372340",
    "end": "1376870"
  },
  {
    "text": "identifies that the model training job",
    "start": "1376870",
    "end": "1378880"
  },
  {
    "text": "or model deployment has completed",
    "start": "1378880",
    "end": "1381190"
  },
  {
    "text": "successfully then it moves the state",
    "start": "1381190",
    "end": "1384340"
  },
  {
    "text": "machine into job completed or deployment",
    "start": "1384340",
    "end": "1387520"
  },
  {
    "text": "completed step as mentioned from notify",
    "start": "1387520",
    "end": "1392380"
  },
  {
    "text": "slack branch if it identifies that model",
    "start": "1392380",
    "end": "1394990"
  },
  {
    "text": "training or deployment is in progress",
    "start": "1394990",
    "end": "1397000"
  },
  {
    "text": "then it will move to check status wait",
    "start": "1397000",
    "end": "1400000"
  },
  {
    "text": "at check status with is function wait",
    "start": "1400000",
    "end": "1403630"
  },
  {
    "text": "for 60 seconds before moving the state",
    "start": "1403630",
    "end": "1406420"
  },
  {
    "text": "machine into gate status step model",
    "start": "1406420",
    "end": "1410800"
  },
  {
    "text": "training and deployment jobs can take",
    "start": "1410800",
    "end": "1412750"
  },
  {
    "text": "some time to run and this wait throttles",
    "start": "1412750",
    "end": "1416500"
  },
  {
    "text": "the executions of the lambda function in",
    "start": "1416500",
    "end": "1418960"
  },
  {
    "text": "the gate status task step two one per",
    "start": "1418960",
    "end": "1421660"
  },
  {
    "text": "minute after get status pass is",
    "start": "1421660",
    "end": "1425020"
  },
  {
    "text": "completed state machines to move into",
    "start": "1425020",
    "end": "1427330"
  },
  {
    "text": "check status branch which is a choice T",
    "start": "1427330",
    "end": "1430200"
  },
  {
    "text": "this function looks at the status of the",
    "start": "1430200",
    "end": "1432970"
  },
  {
    "text": "training or deployment job via the input",
    "start": "1432970",
    "end": "1435700"
  },
  {
    "text": "Jason to decide which step to move to",
    "start": "1435700",
    "end": "1438970"
  },
  {
    "text": "step machine into if it identifies that",
    "start": "1438970",
    "end": "1442510"
  },
  {
    "text": "the training or deployment job is",
    "start": "1442510",
    "end": "1444190"
  },
  {
    "text": "complete or has weld it moved the step",
    "start": "1444190",
    "end": "1446290"
  },
  {
    "text": "machine into the notify select step if",
    "start": "1446290",
    "end": "1449980"
  },
  {
    "text": "it identifies it's still in progress it",
    "start": "1449980",
    "end": "1453570"
  },
  {
    "text": "moved to state machine into the check",
    "start": "1453570",
    "end": "1456130"
  },
  {
    "text": "status wait step to continue the loop",
    "start": "1456130",
    "end": "1460020"
  },
  {
    "text": "now we are back in two states after",
    "start": "1460020",
    "end": "1462400"
  },
  {
    "text": "notify slight branch you can see that",
    "start": "1462400",
    "end": "1466150"
  },
  {
    "text": "there's job",
    "start": "1466150",
    "end": "1466960"
  },
  {
    "text": "completed function which is a passive",
    "start": "1466960",
    "end": "1469390"
  },
  {
    "text": "state it doesn't do much and why we need",
    "start": "1469390",
    "end": "1473409"
  },
  {
    "text": "here because it is relatively easy to",
    "start": "1473409",
    "end": "1476500"
  },
  {
    "text": "find that the training job has completed",
    "start": "1476500",
    "end": "1479710"
  },
  {
    "text": "rather than digging into the input and",
    "start": "1479710",
    "end": "1482110"
  },
  {
    "text": "output details it will move into deploy",
    "start": "1482110",
    "end": "1485649"
  },
  {
    "text": "model which creates endpoint resources",
    "start": "1485649",
    "end": "1487990"
  },
  {
    "text": "for the model and deploys thread model",
    "start": "1487990",
    "end": "1490419"
  },
  {
    "text": "to an end point if the end point already",
    "start": "1490419",
    "end": "1493720"
  },
  {
    "text": "exists it is updated to use the newly",
    "start": "1493720",
    "end": "1496330"
  },
  {
    "text": "trained model in a zero downtime of",
    "start": "1496330",
    "end": "1498520"
  },
  {
    "text": "fashion if the end point doesn't already",
    "start": "1498520",
    "end": "1501700"
  },
  {
    "text": "exist a new one is create avoid it then",
    "start": "1501700",
    "end": "1504970"
  },
  {
    "text": "move state machine in to notify slack",
    "start": "1504970",
    "end": "1506770"
  },
  {
    "text": "step and repeats back to the loop once",
    "start": "1506770",
    "end": "1509620"
  },
  {
    "text": "the deployment is completed the state",
    "start": "1509620",
    "end": "1512080"
  },
  {
    "text": "deployment completed will turn into",
    "start": "1512080",
    "end": "1514000"
  },
  {
    "text": "green after deployment is completed then",
    "start": "1514000",
    "end": "1517480"
  },
  {
    "text": "it will update the parameters on",
    "start": "1517480",
    "end": "1519250"
  },
  {
    "text": "parameter store to the date of latest",
    "start": "1519250",
    "end": "1521679"
  },
  {
    "text": "training file that training job",
    "start": "1521679",
    "end": "1523270"
  },
  {
    "text": "completed this is to help check data",
    "start": "1523270",
    "end": "1526779"
  },
  {
    "text": "step to challenge against this variable",
    "start": "1526779",
    "end": "1528909"
  },
  {
    "text": "whether there is new data or not and",
    "start": "1528909",
    "end": "1531059"
  },
  {
    "text": "after it completes updating the",
    "start": "1531059",
    "end": "1533289"
  },
  {
    "text": "parameter it now reaches into an state",
    "start": "1533289",
    "end": "1535980"
  },
  {
    "text": "now we understand the whole flow let's",
    "start": "1535980",
    "end": "1538870"
  },
  {
    "text": "head to the demo what we are going to do",
    "start": "1538870",
    "end": "1541600"
  },
  {
    "text": "now is to try to simulate the situation",
    "start": "1541600",
    "end": "1543750"
  },
  {
    "text": "when we receive new training data this",
    "start": "1543750",
    "end": "1547809"
  },
  {
    "text": "notebook is prepared to generate an",
    "start": "1547809",
    "end": "1550000"
  },
  {
    "text": "upload housing price data let's start",
    "start": "1550000",
    "end": "1553779"
  },
  {
    "text": "with running the first cells in the",
    "start": "1553779",
    "end": "1557830"
  },
  {
    "text": "second cell it will write CSV files and",
    "start": "1557830",
    "end": "1560140"
  },
  {
    "text": "store them in this network here you can",
    "start": "1560140",
    "end": "1565750"
  },
  {
    "text": "see that we've just generated a few CSV",
    "start": "1565750",
    "end": "1568659"
  },
  {
    "text": "files stored in this notebook now we are",
    "start": "1568659",
    "end": "1574240"
  },
  {
    "text": "going to generate JSON payload to",
    "start": "1574240",
    "end": "1576279"
  },
  {
    "text": "simulate clot watch events after that we",
    "start": "1576279",
    "end": "1580570"
  },
  {
    "text": "are going to put this JSON payload to",
    "start": "1580570",
    "end": "1582700"
  },
  {
    "text": "stop execution in step functions now we",
    "start": "1582700",
    "end": "1587980"
  },
  {
    "text": "had two step functions and manually",
    "start": "1587980",
    "end": "1590649"
  },
  {
    "text": "start the execution so I'm going to",
    "start": "1590649",
    "end": "1595539"
  },
  {
    "text": "click on this start execution button and",
    "start": "1595539",
    "end": "1597580"
  },
  {
    "text": "pass in the JSON variable that I",
    "start": "1597580",
    "end": "1600740"
  },
  {
    "text": "generated from the previous Jupiter",
    "start": "1600740",
    "end": "1603050"
  },
  {
    "text": "notebook I'm going to put an execution",
    "start": "1603050",
    "end": "1606860"
  },
  {
    "text": "name here and then I'm going to start",
    "start": "1606860",
    "end": "1610460"
  },
  {
    "text": "the execution and let's see what we have",
    "start": "1610460",
    "end": "1615110"
  },
  {
    "text": "now yep it's running now and that's how",
    "start": "1615110",
    "end": "1619700"
  },
  {
    "text": "you orchestrate machine learning",
    "start": "1619700",
    "end": "1621050"
  },
  {
    "text": "pipelines using a table step functions",
    "start": "1621050",
    "end": "1623420"
  },
  {
    "text": "and Amazon seeds maker so after we",
    "start": "1623420",
    "end": "1628520"
  },
  {
    "start": "1627000",
    "end": "1707000"
  },
  {
    "text": "deploy in an endpoint where do we go",
    "start": "1628520",
    "end": "1630980"
  },
  {
    "text": "from there",
    "start": "1630980",
    "end": "1631520"
  },
  {
    "text": "and that is a perfect question after we",
    "start": "1631520",
    "end": "1635210"
  },
  {
    "text": "successfully perform continuous training",
    "start": "1635210",
    "end": "1637309"
  },
  {
    "text": "and deployment model with a double step",
    "start": "1637309",
    "end": "1639530"
  },
  {
    "text": "function in Amazon sis maker we can",
    "start": "1639530",
    "end": "1642170"
  },
  {
    "text": "actually use it in our a de brest lambda",
    "start": "1642170",
    "end": "1644870"
  },
  {
    "text": "function and here is my a SS lambda",
    "start": "1644870",
    "end": "1648440"
  },
  {
    "text": "function this a SS lambda function will",
    "start": "1648440",
    "end": "1651650"
  },
  {
    "text": "infer from our Amazon sets maker model",
    "start": "1651650",
    "end": "1653900"
  },
  {
    "text": "by invoking the endpoint as you can see",
    "start": "1653900",
    "end": "1657170"
  },
  {
    "text": "here this code will infer from endpoint",
    "start": "1657170",
    "end": "1659690"
  },
  {
    "text": "name that I've been fine in environment",
    "start": "1659690",
    "end": "1662210"
  },
  {
    "text": "variable if everything works okay it",
    "start": "1662210",
    "end": "1665840"
  },
  {
    "text": "will return asked the house price given",
    "start": "1665840",
    "end": "1668540"
  },
  {
    "text": "the input that we will provide so let's",
    "start": "1668540",
    "end": "1672050"
  },
  {
    "text": "test this lambda function here I already",
    "start": "1672050",
    "end": "1676040"
  },
  {
    "text": "configured a task event and this task",
    "start": "1676040",
    "end": "1678950"
  },
  {
    "text": "event based on a set of attributes of",
    "start": "1678950",
    "end": "1681170"
  },
  {
    "text": "home data so let's help to the test",
    "start": "1681170",
    "end": "1686090"
  },
  {
    "text": "button and let's click the test button",
    "start": "1686090",
    "end": "1688820"
  },
  {
    "text": "and there you go the model predict the",
    "start": "1688820",
    "end": "1692510"
  },
  {
    "text": "price is 22 okay so what did you from",
    "start": "1692510",
    "end": "1696559"
  },
  {
    "text": "here you can extend this a SS lambda",
    "start": "1696559",
    "end": "1699380"
  },
  {
    "text": "function to become API with Amazon API",
    "start": "1699380",
    "end": "1701929"
  },
  {
    "text": "gateway or you can use it along with",
    "start": "1701929",
    "end": "1704480"
  },
  {
    "text": "your other macro services and that's all",
    "start": "1704480",
    "end": "1708140"
  },
  {
    "start": "1707000",
    "end": "1769000"
  },
  {
    "text": "everyone we've covered orchestrating",
    "start": "1708140",
    "end": "1710960"
  },
  {
    "text": "operational workflow identifying few",
    "start": "1710960",
    "end": "1714080"
  },
  {
    "text": "patterns integrating the workflow with",
    "start": "1714080",
    "end": "1717050"
  },
  {
    "text": "various a SS machine learning surfaces",
    "start": "1717050",
    "end": "1719330"
  },
  {
    "text": "and also applying continuous machine",
    "start": "1719330",
    "end": "1722150"
  },
  {
    "text": "learning training and deployment now be",
    "start": "1722150",
    "end": "1725480"
  },
  {
    "text": "awesome and build something by the way",
    "start": "1725480",
    "end": "1729080"
  },
  {
    "text": "you can also visit the demo arena and",
    "start": "1729080",
    "end": "1731419"
  },
  {
    "text": "watch how machine learning is used in",
    "start": "1731419",
    "end": "1733760"
  },
  {
    "text": "real-life application",
    "start": "1733760",
    "end": "1734960"
  },
  {
    "text": "and get your questions answered by a SS",
    "start": "1734960",
    "end": "1737809"
  },
  {
    "text": "experts also this visit is linked to",
    "start": "1737809",
    "end": "1741260"
  },
  {
    "text": "learn more about machine learning on a",
    "start": "1741260",
    "end": "1743029"
  },
  {
    "text": "SS we also have training and",
    "start": "1743029",
    "end": "1745880"
  },
  {
    "text": "certification available by a SS simplify",
    "start": "1745880",
    "end": "1748820"
  },
  {
    "text": "set idea bless dot training",
    "start": "1748820",
    "end": "1751250"
  },
  {
    "text": "thank you again for attending and really",
    "start": "1751250",
    "end": "1754309"
  },
  {
    "text": "appreciate your feedback so that we can",
    "start": "1754309",
    "end": "1756679"
  },
  {
    "text": "better understand the topics and",
    "start": "1756679",
    "end": "1758779"
  },
  {
    "text": "surfaces you would like to know more",
    "start": "1758779",
    "end": "1760520"
  },
  {
    "text": "about so please do take the time to fill",
    "start": "1760520",
    "end": "1763789"
  },
  {
    "text": "out our survey and let us know what you",
    "start": "1763789",
    "end": "1766190"
  },
  {
    "text": "think go bill",
    "start": "1766190",
    "end": "1769629"
  }
]