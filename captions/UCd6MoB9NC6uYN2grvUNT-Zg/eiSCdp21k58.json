[
  {
    "text": "- Welcome to 'Back to Basics'.",
    "start": "6630",
    "end": "8100"
  },
  {
    "text": "Today we will talk about unifying data",
    "start": "8100",
    "end": "10140"
  },
  {
    "text": "across your existing microservices",
    "start": "10140",
    "end": "12480"
  },
  {
    "text": "using serverless GraphQL\npatterns with AWS AppSync.",
    "start": "12480",
    "end": "16470"
  },
  {
    "text": "Using data to create\ndelightful user experiences",
    "start": "16470",
    "end": "19560"
  },
  {
    "text": "is at the heart of many company strategies",
    "start": "19560",
    "end": "22080"
  },
  {
    "text": "but these projects become very challenging",
    "start": "22080",
    "end": "24090"
  },
  {
    "text": "as they try to gather data",
    "start": "24090",
    "end": "25410"
  },
  {
    "text": "from existing data sources\nand downstream APIs at scale.",
    "start": "25410",
    "end": "29190"
  },
  {
    "text": "Now, serverless GraphQL APIs\nare helping front-end teams",
    "start": "29190",
    "end": "32310"
  },
  {
    "text": "connect apps to multiple\npolyglot data sources",
    "start": "32310",
    "end": "35340"
  },
  {
    "text": "such as SQL and NoSQL databases\non different microservices",
    "start": "35340",
    "end": "39180"
  },
  {
    "text": "with a single request.",
    "start": "39180",
    "end": "40920"
  },
  {
    "text": "Some time ago I was\nworking on architecting",
    "start": "40920",
    "end": "43559"
  },
  {
    "text": "and designing a modern web application",
    "start": "43560",
    "end": "45510"
  },
  {
    "text": "for a e-commerce startup",
    "start": "45510",
    "end": "46949"
  },
  {
    "text": "with number of existing\nmicroservice backends.",
    "start": "46950",
    "end": "50040"
  },
  {
    "text": "The web application has to interface",
    "start": "50040",
    "end": "51660"
  },
  {
    "text": "and combine data across\nmicroservices running",
    "start": "51660",
    "end": "54060"
  },
  {
    "text": "in different anywhere elements\nsuch as containers in a VPC",
    "start": "54060",
    "end": "57120"
  },
  {
    "text": "and also behind a REST API\nhosted on Amazon API Gateway.",
    "start": "57120",
    "end": "61530"
  },
  {
    "text": "Let me show you how I used AWS AppSync",
    "start": "61530",
    "end": "64470"
  },
  {
    "text": "in this architecture as a\nGraphQL data layer to connect",
    "start": "64470",
    "end": "67770"
  },
  {
    "text": "to existing microservices\nand downstream APIs",
    "start": "67770",
    "end": "70590"
  },
  {
    "text": "and retrieve data and provide data",
    "start": "70590",
    "end": "72840"
  },
  {
    "text": "to my web application in a single call.",
    "start": "72840",
    "end": "75539"
  },
  {
    "text": "First, let me explain what is AWS AppSync",
    "start": "75540",
    "end": "78480"
  },
  {
    "text": "and how it uses GraphQL\ntechnology to fetch data",
    "start": "78480",
    "end": "81420"
  },
  {
    "text": "from various backends.",
    "start": "81420",
    "end": "83153"
  },
  {
    "text": "GraphQL is a query language for APIs",
    "start": "83153",
    "end": "85590"
  },
  {
    "text": "and a runtime to fulfill those queries.",
    "start": "85590",
    "end": "87539"
  },
  {
    "text": "AWS AppSync is a\nserverless managed service",
    "start": "87540",
    "end": "90870"
  },
  {
    "text": "to run GraphQL-based workloads at scale.",
    "start": "90870",
    "end": "94407"
  },
  {
    "text": "AWS AppSync APIs can directly access data",
    "start": "94407",
    "end": "97200"
  },
  {
    "text": "from DynamoDB NoSQL tables,\nAurora serverless databases",
    "start": "97200",
    "end": "101490"
  },
  {
    "text": "or Amazon OpenSearch clusters.",
    "start": "101490",
    "end": "103770"
  },
  {
    "text": "You can use AWS Lambda\nfunctions to connect",
    "start": "103770",
    "end": "106289"
  },
  {
    "text": "to your existing microservices",
    "start": "106290",
    "end": "108090"
  },
  {
    "text": "and downstream APIs hosted\ninside VPCs and containers",
    "start": "108090",
    "end": "112049"
  },
  {
    "text": "to retrieve data.",
    "start": "112050",
    "end": "113790"
  },
  {
    "text": "You can easily have both\nREST and GraphQL APIs",
    "start": "113790",
    "end": "116790"
  },
  {
    "text": "in your backend behind AWS AppSync.",
    "start": "116790",
    "end": "119760"
  },
  {
    "text": "You can also connect directly\nto other AWS services,",
    "start": "119760",
    "end": "122820"
  },
  {
    "text": "such as AWS Step Functions\nusing HTTP resolvers,",
    "start": "122820",
    "end": "126480"
  },
  {
    "text": "which means it can be used",
    "start": "126480",
    "end": "127800"
  },
  {
    "text": "as a GraphQL facade to any AWS service.",
    "start": "127800",
    "end": "131250"
  },
  {
    "text": "To get started, you need to model",
    "start": "131250",
    "end": "133200"
  },
  {
    "text": "and define your data in\na type GraphQL schema.",
    "start": "133200",
    "end": "136680"
  },
  {
    "text": "The data modeled in the\nschema tells API consumers",
    "start": "136680",
    "end": "139859"
  },
  {
    "text": "what data can be exposed",
    "start": "139860",
    "end": "141390"
  },
  {
    "text": "to authorized clients and the data flow",
    "start": "141390",
    "end": "143580"
  },
  {
    "text": "between different downstream\ncomponents of your API.",
    "start": "143580",
    "end": "146940"
  },
  {
    "text": "AppSync has a built-in compute component",
    "start": "146940",
    "end": "149190"
  },
  {
    "text": "where users can customize\nthe business logic directly",
    "start": "149190",
    "end": "152430"
  },
  {
    "text": "at the API layer.",
    "start": "152430",
    "end": "154469"
  },
  {
    "text": "These components are called resolvers.",
    "start": "154470",
    "end": "157650"
  },
  {
    "text": "Using resolvers, you can map an operation",
    "start": "157650",
    "end": "160230"
  },
  {
    "text": "or even a single field of a type defined",
    "start": "160230",
    "end": "162690"
  },
  {
    "text": "in the schema with specific\ndata source or microservice,",
    "start": "162690",
    "end": "166320"
  },
  {
    "text": "which allows you to retrieve\ndata for different fields",
    "start": "166320",
    "end": "169020"
  },
  {
    "text": "in different data sources\nwith a single API call.",
    "start": "169020",
    "end": "172530"
  },
  {
    "text": "Here is the architecture of\nthe e-commerce application",
    "start": "172530",
    "end": "175110"
  },
  {
    "text": "that I designed using\nserverless GraphQL pattern",
    "start": "175110",
    "end": "177720"
  },
  {
    "text": "with AWS AppSync.",
    "start": "177720",
    "end": "178983"
  },
  {
    "text": "The solution is powered",
    "start": "179820",
    "end": "180990"
  },
  {
    "text": "by two different backend\nmicroservices based",
    "start": "180990",
    "end": "183540"
  },
  {
    "text": "on different technologies:",
    "start": "183540",
    "end": "185489"
  },
  {
    "text": "a user service, which is a\nREST-based microservice hosted",
    "start": "185490",
    "end": "188640"
  },
  {
    "text": "on Amazon API Gateway",
    "start": "188640",
    "end": "190319"
  },
  {
    "text": "and a payment service running\non containers inside a VPC.",
    "start": "190320",
    "end": "193593"
  },
  {
    "text": "All microservices are accessed",
    "start": "194580",
    "end": "196260"
  },
  {
    "text": "through a single GraphQL\nAPI endpoint powered",
    "start": "196260",
    "end": "198720"
  },
  {
    "text": "by AWS AppSync.",
    "start": "198720",
    "end": "200043"
  },
  {
    "text": "The workflow can be better understood",
    "start": "200910",
    "end": "202560"
  },
  {
    "text": "with the following steps.",
    "start": "202560",
    "end": "204180"
  },
  {
    "text": "First, the authenticated clients",
    "start": "204180",
    "end": "206219"
  },
  {
    "text": "make an API call to AppSync.",
    "start": "206220",
    "end": "208380"
  },
  {
    "text": "In this case, my e-commerce\nweb application front end.",
    "start": "208380",
    "end": "211710"
  },
  {
    "text": "AppSync uses the resolvers\nto make direct calls",
    "start": "211710",
    "end": "214530"
  },
  {
    "text": "to different microservices.",
    "start": "214530",
    "end": "215880"
  },
  {
    "text": "The user profile information is fetched",
    "start": "216810",
    "end": "218610"
  },
  {
    "text": "from an existing REST microservice hosted",
    "start": "218610",
    "end": "220950"
  },
  {
    "text": "on Amazon API Gateway\nusing a HTTP resolver.",
    "start": "220950",
    "end": "224730"
  },
  {
    "text": "Then the payment-related\ninformation is fetched",
    "start": "224730",
    "end": "227220"
  },
  {
    "text": "from a payment service hosted",
    "start": "227220",
    "end": "228870"
  },
  {
    "text": "in an AWS Fargate container inside a VPC.",
    "start": "228870",
    "end": "231633"
  },
  {
    "text": "A direct Lambda resolver is used",
    "start": "232740",
    "end": "234780"
  },
  {
    "text": "in this case to establish a\nconnection and retrieve data",
    "start": "234780",
    "end": "237810"
  },
  {
    "text": "from the microservice\nrunning inside the container.",
    "start": "237810",
    "end": "241140"
  },
  {
    "text": "Once the data is fetched from\nthese existing microservices,",
    "start": "241140",
    "end": "244440"
  },
  {
    "text": "the AppSync GraphQL engine\nconsolidates the data based",
    "start": "244440",
    "end": "247800"
  },
  {
    "text": "on the structure relationships\ndefined in the schema",
    "start": "247800",
    "end": "250650"
  },
  {
    "text": "and returns only the data\nrequested by the web application.",
    "start": "250650",
    "end": "254013"
  },
  {
    "text": "In this way, I used AWS AppSync",
    "start": "255120",
    "end": "257301"
  },
  {
    "text": "as a single GraphQL interface to access",
    "start": "257301",
    "end": "259590"
  },
  {
    "text": "and combine data from\nmultiple data sources.",
    "start": "259590",
    "end": "262830"
  },
  {
    "text": "In this episode, we\nwalked through an example",
    "start": "262830",
    "end": "265050"
  },
  {
    "text": "on how you can implement a secure",
    "start": "265050",
    "end": "266970"
  },
  {
    "text": "and scalable API composition\nlayer using AWS AppSync",
    "start": "266970",
    "end": "271020"
  },
  {
    "text": "under the heart of serverless\nGraphQL pattern to connect",
    "start": "271020",
    "end": "273900"
  },
  {
    "text": "to multiple microservices and REST APIs.",
    "start": "273900",
    "end": "277077"
  },
  {
    "text": "AWS AppSync now supports\ncreating private APIs",
    "start": "277077",
    "end": "280650"
  },
  {
    "text": "that can be accessed\nonly from within the VPC",
    "start": "280650",
    "end": "283259"
  },
  {
    "text": "and merged APIs that enables\nenterprise developer teams",
    "start": "283260",
    "end": "286620"
  },
  {
    "text": "to consolidate AppSync GraphQL APIs",
    "start": "286620",
    "end": "289320"
  },
  {
    "text": "owned and managed by different teams",
    "start": "289320",
    "end": "291180"
  },
  {
    "text": "into a single federated\nAPI exposed to clients",
    "start": "291180",
    "end": "294389"
  },
  {
    "text": "to allow independent team operations",
    "start": "294390",
    "end": "296580"
  },
  {
    "text": "while promoting cross-team\ncollaboration at scale.",
    "start": "296580",
    "end": "300150"
  },
  {
    "text": "Check out the links\nbelow for more details.",
    "start": "300150",
    "end": "302370"
  },
  {
    "text": "Thank you for watching 'Back to Basics'.",
    "start": "302370",
    "end": "304020"
  },
  {
    "text": "See you next time.",
    "start": "304020",
    "end": "305520"
  }
]