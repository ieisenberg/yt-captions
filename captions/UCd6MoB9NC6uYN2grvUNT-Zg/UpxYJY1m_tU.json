[
  {
    "start": "0",
    "end": "296000"
  },
  {
    "text": "hello and welcome to awl invent and to this session which is building BMW",
    "start": "30",
    "end": "6690"
  },
  {
    "text": "group's customer engagement platform on AWS so who likes cars here yeah we all",
    "start": "6690",
    "end": "12240"
  },
  {
    "text": "have loved cars right so we're going to learn about how to configure cars and how to do so using micro-services so",
    "start": "12240",
    "end": "18750"
  },
  {
    "text": "great mixture of topics so what are you going to get out of these sessions we will start with any quick introduction",
    "start": "18750",
    "end": "24750"
  },
  {
    "text": "into micro-services then we'll dive deep into a real-world customer experience from my customer BMW and we'll close",
    "start": "24750",
    "end": "32758"
  },
  {
    "text": "this off with some guidelines and resources for your own micro services projects my name is Colleen Gonzalez I'm",
    "start": "32759",
    "end": "38370"
  },
  {
    "text": "a principal Solutions Architect with Amazon in Germany and this is Patrick Lana's and Gian verdict from BMW and I'm",
    "start": "38370",
    "end": "46170"
  },
  {
    "text": "very happy to have my own customer here on stage sharing their experience here so let's start with monoliths which are",
    "start": "46170",
    "end": "53100"
  },
  {
    "text": "the opposite of micro services if you will and this is how applications have",
    "start": "53100",
    "end": "59309"
  },
  {
    "text": "been developed for decades right big large application one of these tend to be rigid how to change they tend to be",
    "start": "59309",
    "end": "66689"
  },
  {
    "text": "hard to scale as a result of rigidness they're also pretty hard to deploy and",
    "start": "66689",
    "end": "72530"
  },
  {
    "text": "people tend to feel locked in once they reach a technical decision for the",
    "start": "72530",
    "end": "78330"
  },
  {
    "text": "monolithic application it's hard to change it and so they feel locked into this individual choices and they are",
    "start": "78330",
    "end": "84210"
  },
  {
    "text": "hard to reuse because it's every model this is like a big wonderful snowflake but really hard to tear apart and and",
    "start": "84210",
    "end": "91650"
  },
  {
    "text": "repurpose elsewhere and they are also easy to break because if one piece and",
    "start": "91650",
    "end": "97590"
  },
  {
    "text": "the monolith doesn't really work or if it breaks it takes the rest of the monolith with it and that's really hard",
    "start": "97590",
    "end": "102990"
  },
  {
    "text": "to fix so the key thing here is to understand the monolithic development",
    "start": "102990",
    "end": "108630"
  },
  {
    "text": "lifecycle you start with a lot of developers contributing code to the code",
    "start": "108630",
    "end": "113700"
  },
  {
    "text": "base building a single app and then you have like this single wonderful but big",
    "start": "113700",
    "end": "119460"
  },
  {
    "text": "and complex built test release cycle which is really hard to do and it typically involves things like working",
    "start": "119460",
    "end": "126210"
  },
  {
    "text": "over weekends or late nights a lot of head-scratching and hoping and at the end of the day you",
    "start": "126210",
    "end": "134109"
  },
  {
    "text": "don't do that very often so customers I talked to they tend to deploy more or less a couple times a year and after",
    "start": "134109",
    "end": "140500"
  },
  {
    "text": "that it becomes stressful by contrast micro services so micro",
    "start": "140500",
    "end": "145629"
  },
  {
    "text": "services are composed out of many many small and autonomous services so the key",
    "start": "145629",
    "end": "150819"
  },
  {
    "text": "thing here is autonomous and each service is specialized to do one thing and one thing only",
    "start": "150819",
    "end": "156549"
  },
  {
    "text": "and as a result micro services projects tend to be a lot more agile they are",
    "start": "156549",
    "end": "161829"
  },
  {
    "text": "very flexible to scale because now you can scale individual micro services each one on its own they're easy to deploy",
    "start": "161829",
    "end": "168669"
  },
  {
    "text": "because much smaller right and this gives developers a lot more freedom because now you can have like many",
    "start": "168669",
    "end": "175510"
  },
  {
    "text": "different technology decisions one for each micro Service individual stack and if you want to change the technology in",
    "start": "175510",
    "end": "181780"
  },
  {
    "text": "an individual micro service it's easier to do because the scope is much smaller and finally they are very easy to reuse",
    "start": "181780",
    "end": "188079"
  },
  {
    "text": "you can copy/paste a whole micro service and use that as a template for a new micro service and then work from there",
    "start": "188079",
    "end": "193569"
  },
  {
    "text": "and finally a micro services based architecture if done right can be very",
    "start": "193569",
    "end": "199239"
  },
  {
    "text": "resilient because whenever one piece fails in this whole picture doesn't necessarily have to take away the whole",
    "start": "199239",
    "end": "205419"
  },
  {
    "text": "system down every failure is confined to individual micro services and if you",
    "start": "205419",
    "end": "212799"
  },
  {
    "text": "look at the development lifecycle micro services are developed individually and they are deployed individually so you",
    "start": "212799",
    "end": "219040"
  },
  {
    "text": "have individual micro services each with their own developers their own deliverable their own build tests and",
    "start": "219040",
    "end": "225099"
  },
  {
    "text": "release life cycle and this makes deployment a lot easier for teams because everybody can deploy their own",
    "start": "225099",
    "end": "231430"
  },
  {
    "text": "micro service without asking anybody else so there's a lot more decoupling going on a lot more independence going",
    "start": "231430",
    "end": "237549"
  },
  {
    "text": "on and that makes it easier to deploy many many times even many times per day",
    "start": "237549",
    "end": "243659"
  },
  {
    "text": "so my customers when they learn about micro services they tend to ask questions like how do I migrate my",
    "start": "243659",
    "end": "250840"
  },
  {
    "text": "existing application which is monolithic into a set of micro services how does networking work what does it",
    "start": "250840",
    "end": "257229"
  },
  {
    "text": "mean for my network if I now have lots of services talking to each other how should I go about implementing service",
    "start": "257229",
    "end": "263529"
  },
  {
    "text": "discovery how do these micro-services talk to each other how do they know who to talk to each other and what about deployment how can I manage",
    "start": "263529",
    "end": "270440"
  },
  {
    "text": "many many many individual deployment pipelines and what services should I",
    "start": "270440",
    "end": "276169"
  },
  {
    "text": "choose from all of the areas portfolio to implement my micro services and how so this is where Patrick and Julian are",
    "start": "276169",
    "end": "283430"
  },
  {
    "text": "coming in and I'm very happy to introduce you to Patrick and Julian here they're gonna share some of the lessons",
    "start": "283430",
    "end": "289280"
  },
  {
    "text": "they learned as they did exactly that kind of migration so Patrick I'm glad to",
    "start": "289280",
    "end": "297889"
  },
  {
    "start": "296000",
    "end": "465000"
  },
  {
    "text": "hear today and I would like to take you onto our journey from migrating our",
    "start": "297889",
    "end": "303259"
  },
  {
    "text": "monolithic backgrounds to micro services and subsequently leveraging a couple of",
    "start": "303259",
    "end": "309139"
  },
  {
    "text": "AWS services I would like to start with",
    "start": "309139",
    "end": "314479"
  },
  {
    "text": "the common use case that that we have can you imagine how many possibilities",
    "start": "314479",
    "end": "319969"
  },
  {
    "text": "you have to configure you dream car for example here for the new BMW 3-series",
    "start": "319969",
    "end": "326000"
  },
  {
    "text": "that has been launched a couple of weeks ago you have the possibilities to choose",
    "start": "326000",
    "end": "331909"
  },
  {
    "text": "from seven engines twelve colors foreign wields eleven upholsteries seven trims",
    "start": "331909",
    "end": "338389"
  },
  {
    "text": "an additional 90 optional equipment there's a lot to choose from and from",
    "start": "338389",
    "end": "346659"
  },
  {
    "text": "from a front and perspective you need only one hand all the vehicle data to",
    "start": "346659",
    "end": "352159"
  },
  {
    "text": "show it to your customers and the on the other hand you need also functionalities to check if your dream configuration is",
    "start": "352159",
    "end": "358639"
  },
  {
    "text": "really constructible within the BMW group that existed the huge demand on",
    "start": "358639",
    "end": "365000"
  },
  {
    "text": "getting these data vehicle data and also functionalities like a SATA",
    "start": "365000",
    "end": "370159"
  },
  {
    "text": "constructability check from a central platform so that not everyone need to take care about where to get the data",
    "start": "370159",
    "end": "376819"
  },
  {
    "text": "and to rebuild commonly used functionalities therefore we created a",
    "start": "376819",
    "end": "383569"
  },
  {
    "text": "unified configurator platform and the Equator platform is currently used by about certain application and web",
    "start": "383569",
    "end": "389960"
  },
  {
    "text": "front-ends for example as you can see from various car configuration",
    "start": "389960",
    "end": "395899"
  },
  {
    "text": "configurators like I native iOS applications or from front",
    "start": "395899",
    "end": "401440"
  },
  {
    "text": "ends but the platform is also used for application that have an AI purpose or",
    "start": "401440",
    "end": "406870"
  },
  {
    "text": "for creating an offer for our customers so let us now have a look at our",
    "start": "406870",
    "end": "414070"
  },
  {
    "text": "platform for a more or less high-level perspective our platform exposes a",
    "start": "414070",
    "end": "419730"
  },
  {
    "text": "restful api x' and expose all the the necessary product data and",
    "start": "419730",
    "end": "425610"
  },
  {
    "text": "functionalities like the configuration constructability track or price",
    "start": "425610",
    "end": "431200"
  },
  {
    "text": "calculation services or a virtual garage to store the configuration that you have",
    "start": "431200",
    "end": "438280"
  },
  {
    "text": "configured to expose all the data it is",
    "start": "438280",
    "end": "443530"
  },
  {
    "text": "necessary for us to import these data on a frequent basis from the BMW landscape",
    "start": "443530",
    "end": "451140"
  },
  {
    "text": "yeah and our platform is currently actually serving about 100 million of",
    "start": "451140",
    "end": "456400"
  },
  {
    "text": "API calls per month and we are supporting all BMW groups and markets",
    "start": "456400",
    "end": "462220"
  },
  {
    "text": "and brands so afternoon you have now",
    "start": "462220",
    "end": "467890"
  },
  {
    "text": "heard about what our platform is doing I would like to take you on to the journey on how we came with monolith monoliths",
    "start": "467890",
    "end": "474940"
  },
  {
    "text": "to micro services and subsequently to AWS everyone is talking today about",
    "start": "474940",
    "end": "482260"
  },
  {
    "text": "micro services but from our perspective it is worthwhile also to take to think",
    "start": "482260",
    "end": "487600"
  },
  {
    "text": "about monolithic systems because for us the monolithic system provided the fast",
    "start": "487600",
    "end": "492790"
  },
  {
    "text": "development at an early stage and to have an production very production-ready",
    "start": "492790",
    "end": "499210"
  },
  {
    "text": "MVP and we do not have do not have DD",
    "start": "499210",
    "end": "506080"
  },
  {
    "text": "and to handle all the all the IDI challenges that come along with micro service like data synchronization or how",
    "start": "506080",
    "end": "513099"
  },
  {
    "text": "you're doing logging and how you are doing debugging with micro services and",
    "start": "513099",
    "end": "518530"
  },
  {
    "text": "so on nevertheless as we as as our monolith growth we we had some challenges that we",
    "start": "518530",
    "end": "527470"
  },
  {
    "text": "were faced to us small changes led to a rebuild of the complete education and implementing new",
    "start": "527470",
    "end": "534329"
  },
  {
    "text": "requirements led to a lot of refactoring so in a nutshell we we do have to we",
    "start": "534329",
    "end": "543759"
  },
  {
    "text": "have a lot of complex ability to handle ways and the moralism became too complex so and DVD development became slow so",
    "start": "543759",
    "end": "552819"
  },
  {
    "text": "therefore we had to to rethink about it and go into next step to micro services",
    "start": "552819",
    "end": "559199"
  },
  {
    "text": "so at the same time as we broke up on our monolithic system into Microsoft's",
    "start": "559290",
    "end": "565660"
  },
  {
    "text": "we also introduces the concept of the first of the API first approach the API",
    "start": "565660",
    "end": "571810"
  },
  {
    "text": "first approach lets us letter gives us the opportunity to specify the API upfront and and to have a chance to see",
    "start": "571810",
    "end": "581579"
  },
  {
    "text": "the actual implementation before they start the also have any micro services",
    "start": "581579",
    "end": "591310"
  },
  {
    "text": "now and the platform became more and more complex we had to think about a guarantee next step so in a nutshell the",
    "start": "591310",
    "end": "599920"
  },
  {
    "text": "micro services helped us but we had to see to get the next step for example we",
    "start": "599920",
    "end": "605740"
  },
  {
    "text": "have we had questions like yeah how can we how can we provide our platform on a",
    "start": "605740",
    "end": "611170"
  },
  {
    "text": "global basis with low latencies or how can we get a broader solution scope to",
    "start": "611170",
    "end": "617199"
  },
  {
    "text": "satisfy a new business requirements let",
    "start": "617199",
    "end": "622360"
  },
  {
    "text": "us now see how we did the transition we followed an approach like lifting and",
    "start": "622360",
    "end": "628089"
  },
  {
    "text": "shift and on on premise we had different artifacts we had the API specification",
    "start": "628089",
    "end": "633399"
  },
  {
    "text": "and the authentication informations from the API this one we had to transfer into",
    "start": "633399",
    "end": "641079"
  },
  {
    "text": "the API gateway next our micro services are all based on java application so we",
    "start": "641079",
    "end": "648730"
  },
  {
    "text": "have a glassfish for application server this one we have doctor eyes and deploy",
    "start": "648730",
    "end": "654339"
  },
  {
    "text": "to elastic beanstalk on premise we had a couple of oracle databases for cost",
    "start": "654339",
    "end": "662500"
  },
  {
    "text": "efficiency purposes we changed here from our to Postgres and are using the re s",
    "start": "662500",
    "end": "669050"
  },
  {
    "text": "Amazon RDS services as I taught before we we need to to import a lot of data",
    "start": "669050",
    "end": "678740"
  },
  {
    "text": "into our platform to expose these data to our customers therefore we have import ops the import jobs were written",
    "start": "678740",
    "end": "685100"
  },
  {
    "text": "as pl/sql statements on premise and these we have rewritten as java code and",
    "start": "685100",
    "end": "691550"
  },
  {
    "text": "deploy to e CS and AWS batch as a human system so let us now move on to have",
    "start": "691550",
    "end": "702200"
  },
  {
    "text": "more precise look at our architecture so whenever a customer is calling our api's",
    "start": "702200",
    "end": "709070"
  },
  {
    "text": "he is using a public domain these public domain is registered registered was in the AWS route 53 and in front of the api",
    "start": "709070",
    "end": "718880"
  },
  {
    "text": "gateway we are using AWS cloud formed it areas cloud phone is for us an important element in our global distribution",
    "start": "718880",
    "end": "725930"
  },
  {
    "text": "strategy as it provides us on the one hand the cache in public purposes form",
    "start": "725930",
    "end": "732350"
  },
  {
    "text": "for caching frequent requests and on the other hand we we do have fast entry",
    "start": "732350",
    "end": "738020"
  },
  {
    "text": "portal Aniak an entry point into our customers into the AWS backbone as an",
    "start": "738020",
    "end": "744620"
  },
  {
    "text": "the api gateway is generated out of swagger and form for all requested us",
    "start": "744620",
    "end": "751310"
  },
  {
    "text": "that is entering in through our solution we do use in combination of AWS DynamoDB",
    "start": "751310",
    "end": "757940"
  },
  {
    "text": "and AWS lambda within the AWS dynamodb we are storing api keys and together",
    "start": "757940",
    "end": "766700"
  },
  {
    "text": "with the yeah divide which which api key can retrieve which api that we have",
    "start": "766700",
    "end": "775690"
  },
  {
    "text": "lambda in this context is doing the complete eradication purposes for us as",
    "start": "775690",
    "end": "783200"
  },
  {
    "text": "soon as a request got authenticated we are using vb sealing to",
    "start": "783200",
    "end": "791180"
  },
  {
    "text": "have an entry point into our vp c o d vp seam consists of three different subnets",
    "start": "791180",
    "end": "797910"
  },
  {
    "text": "in one subnets we are have all our load balancers in another subnets we have our",
    "start": "797910",
    "end": "803970"
  },
  {
    "text": "applications and a third one the databases as DV PC link currently only",
    "start": "803970",
    "end": "812970"
  },
  {
    "text": "works with Network load balancers we had to to find a solution on how we can",
    "start": "812970",
    "end": "819000"
  },
  {
    "text": "address our different microservice on a pulse base way here we came up that we",
    "start": "819000",
    "end": "824070"
  },
  {
    "text": "can reuse the engine eeks that comes along with elastic beanstalk and nginx has the job here to forward the request",
    "start": "824070",
    "end": "831510"
  },
  {
    "text": "student to the subsequently micro-services to identify our micro",
    "start": "831510",
    "end": "838020"
  },
  {
    "text": "services we are used in route 53 gun where the private houses loan was in",
    "start": "838020",
    "end": "843570"
  },
  {
    "text": "these private houses owned each micro service as soon as the environment of the micro services is created or set up",
    "start": "843570",
    "end": "851750"
  },
  {
    "text": "registers an entry within these private houses owned and so we have the",
    "start": "851750",
    "end": "859080"
  },
  {
    "text": "possibility to address the endpoints of our micro services so let us now move on",
    "start": "859080",
    "end": "865680"
  },
  {
    "text": "to the environment of an all of micro service how the text deck looks like we",
    "start": "865680",
    "end": "871080"
  },
  {
    "text": "are using elastic beanstalk as it provides for us to write abstraction on",
    "start": "871080",
    "end": "876470"
  },
  {
    "text": "focusing on our core mission to provide new services to the platform and and",
    "start": "876470",
    "end": "885950"
  },
  {
    "text": "yeah on elastic Beanstalk we are deploying docker containers with our java application and we are using sub",
    "start": "885950",
    "end": "893030"
  },
  {
    "text": "security groups and Knuckles to restricted traffic to our application",
    "start": "893030",
    "end": "898880"
  },
  {
    "text": "each micro service of us has an own persistence layer the persistence layer",
    "start": "898880",
    "end": "904140"
  },
  {
    "text": "is in in this context a database was in the re as Amazon RDS services where we",
    "start": "904140",
    "end": "910170"
  },
  {
    "text": "get a prosperous instance on a multi a-z setting now I would like to hand over to",
    "start": "910170",
    "end": "917130"
  },
  {
    "text": "Julian who will give you more deep dive onto our architecture",
    "start": "917130",
    "end": "923660"
  },
  {
    "text": "of you about our architecture I want to go into five different fields of our solution to show you some details as",
    "start": "927450",
    "end": "936310"
  },
  {
    "text": "first I want to show you how we do service discovery and continuously technical decisions you already know",
    "start": "936310",
    "end": "945700"
  },
  {
    "text": "this big picture from Patrick within our we perceive we ever private hosted zone each micro service should be accessible",
    "start": "945700",
    "end": "953710"
  },
  {
    "text": "by an internal domain name for example micro service aid of BMW micro service",
    "start": "953710",
    "end": "959200"
  },
  {
    "text": "BMW and so on the micro service itself were just as his application load Penza",
    "start": "959200",
    "end": "965410"
  },
  {
    "text": "within a route 53 record and if the micro service later changes the micro",
    "start": "965410",
    "end": "971590"
  },
  {
    "text": "service takes care about his own reference within route 53 we use this as",
    "start": "971590",
    "end": "980230"
  },
  {
    "text": "an internal service discovery and now each micro service can talk to each other and also the proxy which Patrick",
    "start": "980230",
    "end": "987460"
  },
  {
    "text": "introduced earlier Reuters that routes the traffic through the internal domain name to the corresponding micro service",
    "start": "987460",
    "end": "996060"
  },
  {
    "text": "if we release new software we use mostly the deployment strategies with an AWS",
    "start": "996060",
    "end": "1002310"
  },
  {
    "text": "Beanstalk for example you can use their rolling updates or mutable updates pin",
    "start": "1002310",
    "end": "1007500"
  },
  {
    "text": "stop takes care about the whole deployment cycle for example checks the availability of new containers or",
    "start": "1007500",
    "end": "1013920"
  },
  {
    "text": "instances and cuts over the traffic of the health check path if we change more",
    "start": "1013920",
    "end": "1020280"
  },
  {
    "text": "for example the heap size configuration or pool size configuration in combination with a different ec2 type we",
    "start": "1020280",
    "end": "1027900"
  },
  {
    "text": "have a more risky change even after a photo regression test and a load test something can go wrong on production",
    "start": "1027900",
    "end": "1034860"
  },
  {
    "text": "workload even after yes we can use of",
    "start": "1034860",
    "end": "1040260"
  },
  {
    "text": "route 53 rated routing to handle this risk we deploy the same micro service a",
    "start": "1040260",
    "end": "1048390"
  },
  {
    "text": "second time for example with a different configuration different ec2 types",
    "start": "1048390",
    "end": "1054060"
  },
  {
    "text": "in route 53 it's possible to create multiple records for the same domain name and route the traffic to multiple",
    "start": "1054060",
    "end": "1061350"
  },
  {
    "text": "targets here in this example of 99 to one percent this enables us to reify our",
    "start": "1061350",
    "end": "1069180"
  },
  {
    "text": "new text set up with a predefined amount of traffic if everything goes well we",
    "start": "1069180",
    "end": "1078780"
  },
  {
    "text": "cut over to the new micro service and delete the old stack all this can be",
    "start": "1078780",
    "end": "1084450"
  },
  {
    "text": "used to change whole text decks not only to check some minor configuration",
    "start": "1084450",
    "end": "1090870"
  },
  {
    "text": "changes for example here we deploy the same macro service a a second time and",
    "start": "1090870",
    "end": "1096630"
  },
  {
    "text": "you use the writer routing as before the second micro service can run for example",
    "start": "1096630",
    "end": "1102780"
  },
  {
    "text": "in a Debus lambda with a private API gateway and store the data and DynamoDB",
    "start": "1102780",
    "end": "1108440"
  },
  {
    "text": "at the end we provide the same REST API for our client systems just with another",
    "start": "1108440",
    "end": "1115230"
  },
  {
    "text": "text stick if everything goes well we cut over to the new macro service and",
    "start": "1115230",
    "end": "1121860"
  },
  {
    "text": "delete the old stick in the fast-moving tech world for us it's important to",
    "start": "1121860",
    "end": "1128040"
  },
  {
    "text": "build architectures which are easy to change and route 53 gives us see a lot of flexibility the second tip type topic",
    "start": "1128040",
    "end": "1138900"
  },
  {
    "start": "1135000",
    "end": "1213000"
  },
  {
    "text": "has a similar intent how do we deploy lambda functions we use lambda functions",
    "start": "1138900",
    "end": "1144300"
  },
  {
    "text": "in different places of our architecture for example to verify the API keys or to stream data out of cloud watch in some",
    "start": "1144300",
    "end": "1152100"
  },
  {
    "text": "cases the functions are crucial for our overall availability we store all",
    "start": "1152100",
    "end": "1157710"
  },
  {
    "text": "relevant artifacts for our lambda function within our own permit repository the Jenkins takes the",
    "start": "1157710",
    "end": "1165270"
  },
  {
    "text": "artifacts and uploads them the code goes to s3 and the cloud formation stack is",
    "start": "1165270",
    "end": "1171060"
  },
  {
    "text": "initially credit or later updated code deploy deploys the code from s3 to the",
    "start": "1171060",
    "end": "1178410"
  },
  {
    "text": "new credit lambda function but how do we deploy now a new version of our lambda",
    "start": "1178410",
    "end": "1184710"
  },
  {
    "text": "code of course we create a new version and an alias an alias is like a pointer",
    "start": "1184710",
    "end": "1190440"
  },
  {
    "text": "to reversion then we can set a deployment preference within Cote Blois",
    "start": "1190440",
    "end": "1196110"
  },
  {
    "text": "for example shift the traffic linear within ten minutes to the new alias if",
    "start": "1196110",
    "end": "1202910"
  },
  {
    "text": "cloud watch detects errors code deploy a rock roll back to the ultra version if",
    "start": "1202910",
    "end": "1208260"
  },
  {
    "text": "not the new lambda code is running the",
    "start": "1208260",
    "end": "1215070"
  },
  {
    "text": "third tip dev topic is important for our micro service architecture we try to make every micro service independent as",
    "start": "1215070",
    "end": "1221790"
  },
  {
    "text": "possible our platform supports around 140 countries worldwide for our BMW crew",
    "start": "1221790",
    "end": "1227880"
  },
  {
    "text": "prints and this requires an adequate data management as Patrick mentioned",
    "start": "1227880",
    "end": "1233070"
  },
  {
    "text": "before we get the raw data from the BMW landscape we have different micro",
    "start": "1233070",
    "end": "1239820"
  },
  {
    "text": "services which need the data from the on Bream data sources for example here",
    "start": "1239820",
    "end": "1245160"
  },
  {
    "text": "micro service a B and D we also have micro services which aggregate the",
    "start": "1245160",
    "end": "1251160"
  },
  {
    "text": "results of other micro services here micro service C a B and D can import the",
    "start": "1251160",
    "end": "1256860"
  },
  {
    "text": "data almost independent but micro service C has to write for a and B in a",
    "start": "1256860",
    "end": "1263190"
  },
  {
    "text": "perfect world each micro service is independent but in reality even if you",
    "start": "1263190",
    "end": "1268470"
  },
  {
    "text": "are on a green field it's not always feasible for us it was important that we",
    "start": "1268470",
    "end": "1274890"
  },
  {
    "text": "cut our micro service in the way that we can accept eventual consistency also we",
    "start": "1274890",
    "end": "1281100"
  },
  {
    "text": "don't want distributed transactions the",
    "start": "1281100",
    "end": "1286530"
  },
  {
    "text": "data processing has to be done on different time zones like you see in the upper right corner",
    "start": "1286530",
    "end": "1292260"
  },
  {
    "text": "for example the Central Europe and orange or North America and blue in the",
    "start": "1292260",
    "end": "1299970"
  },
  {
    "text": "lower right side you see the batch jobs from the micro service a B C and D within a day time line we need the right",
    "start": "1299970",
    "end": "1308100"
  },
  {
    "text": "job executed for the right market at the right time or that has to be optimized",
    "start": "1308100",
    "end": "1313500"
  },
  {
    "text": "as possible to reduce the time for a rental consistency also that has to be",
    "start": "1313500",
    "end": "1319080"
  },
  {
    "text": "resilient and of course cost-efficient for us ECS and AWS patch was the right",
    "start": "1319080",
    "end": "1326029"
  },
  {
    "text": "solution here we want to bring the data from the on-prem data sources via ECS to",
    "start": "1326029",
    "end": "1335539"
  },
  {
    "text": "our micro service to execute the right job at the right time we use AWS cloud",
    "start": "1335539",
    "end": "1343639"
  },
  {
    "text": "watch events and ADA of lambda as a scheduler lambda creates up to hundreds",
    "start": "1343639",
    "end": "1351830"
  },
  {
    "text": "of jobs in AWS batch AWS patch works as secure for the ECS tasks we have also",
    "start": "1351830",
    "end": "1360230"
  },
  {
    "text": "different hue priorities based on the business criticality of the data",
    "start": "1360230",
    "end": "1365859"
  },
  {
    "text": "dependencies you have the dependent since you have seen before a handle through the depends on property with an",
    "start": "1367059",
    "end": "1374059"
  },
  {
    "text": "$1.00 per page our SES clusters use spot instances to reduce the costs in",
    "start": "1374059",
    "end": "1385159"
  },
  {
    "text": "addition we use this setup not only for the data imports we also use for some",
    "start": "1385159",
    "end": "1391190"
  },
  {
    "text": "offline data processing which runs in the dock enna the next deep dive topic",
    "start": "1391190",
    "end": "1401899"
  },
  {
    "start": "1398000",
    "end": "1509000"
  },
  {
    "text": "shows a similar intent so how do we leverage lambda for a special use case we have to check at hoc hundreds of",
    "start": "1401899",
    "end": "1409279"
  },
  {
    "text": "vehicles against their constructability routes due to the product data updates",
    "start": "1409279",
    "end": "1415909"
  },
  {
    "text": "it's not possible to pre calculate the records also the time when we have to",
    "start": "1415909",
    "end": "1423259"
  },
  {
    "text": "provide this calculation or the constructability check is not known so this use case is really hard to master",
    "start": "1423259",
    "end": "1430249"
  },
  {
    "text": "on Prem or without serverless technologies we found a good solution",
    "start": "1430249",
    "end": "1435379"
  },
  {
    "text": "with a Douglas lambda we spread the vehicle data including the",
    "start": "1435379",
    "end": "1441700"
  },
  {
    "text": "constructibility routes why an orchestration factor to a bunch of lambda functions",
    "start": "1441700",
    "end": "1448720"
  },
  {
    "text": "each function checks in the constructability of one vehicle at the same time and the orchestration lambda",
    "start": "1452310",
    "end": "1458860"
  },
  {
    "text": "consolidates or results if all checks are done the overall result is returned",
    "start": "1458860",
    "end": "1466710"
  },
  {
    "text": "some hundred of constructibility checks takes overall just one or two seconds",
    "start": "1466710",
    "end": "1474630"
  },
  {
    "text": "this solution is good for our special use case but you have still considered",
    "start": "1475170",
    "end": "1482260"
  },
  {
    "text": "to consider some constraints for example we restricted the parallel execution to",
    "start": "1482260",
    "end": "1488230"
  },
  {
    "text": "a maximum of 50 lambda functions also we know that this service is not called",
    "start": "1488230",
    "end": "1494350"
  },
  {
    "text": "more than several times a day if you rerun more and continuously workload on",
    "start": "1494350",
    "end": "1500560"
  },
  {
    "text": "that architecture you should consider more or less predefined for work compute cluster the last clip dev topic is about",
    "start": "1500560",
    "end": "1513070"
  },
  {
    "start": "1509000",
    "end": "1608000"
  },
  {
    "text": "our environment staging our dev teams deploy every year hundreds of feature",
    "start": "1513070",
    "end": "1518760"
  },
  {
    "text": "and the features need to be tested and integrated you already know that our",
    "start": "1518760",
    "end": "1525700"
  },
  {
    "text": "infrastructure is defined in cloud formation as infrastructure as code and our dev teams follow the gate flow",
    "start": "1525700",
    "end": "1532390"
  },
  {
    "text": "workflow so why don't create for every feature branch and distinct and isolated",
    "start": "1532390",
    "end": "1538900"
  },
  {
    "text": "txtag we have done it and the dev teams can start a full demand environment",
    "start": "1538900",
    "end": "1545050"
  },
  {
    "text": "within minutes Jenkins pulls or cloud formation templates out of the git repository and",
    "start": "1545050",
    "end": "1551920"
  },
  {
    "text": "creates the micro service take the micro service deck contains everything you",
    "start": "1551920",
    "end": "1558730"
  },
  {
    "text": "have seen before on this presentation and if the stack is up the Jenkins",
    "start": "1558730",
    "end": "1564790"
  },
  {
    "text": "deploys the feature branch to the micro service then the team can run the CI",
    "start": "1564790",
    "end": "1570520"
  },
  {
    "text": "pipeline do manual testing or do whatever they need in general we use the",
    "start": "1570520",
    "end": "1578980"
  },
  {
    "text": "most cost efficient easy to types for this and also we take care that the dev teams don't",
    "start": "1578980",
    "end": "1585070"
  },
  {
    "text": "let run this on-demand environment longer than necessary after a certain",
    "start": "1585070",
    "end": "1590980"
  },
  {
    "text": "time or master merge the on-demand environment should be terminated overall",
    "start": "1590980",
    "end": "1598840"
  },
  {
    "text": "our high infrastructure automation enables us to provide our dev teams this",
    "start": "1598840",
    "end": "1605080"
  },
  {
    "text": "environment on demands now we talked a",
    "start": "1605080",
    "end": "1611560"
  },
  {
    "start": "1608000",
    "end": "1835000"
  },
  {
    "text": "lot about our architecture but before I come to a conclusion I want to talk",
    "start": "1611560",
    "end": "1616930"
  },
  {
    "text": "about a nice event our first own game day the goal of the",
    "start": "1616930",
    "end": "1623710"
  },
  {
    "text": "game day was to train our operation team they should be well prepared for the",
    "start": "1623710",
    "end": "1629530"
  },
  {
    "text": "potential production problems during the game day the teams has have to solve",
    "start": "1629530",
    "end": "1636330"
  },
  {
    "text": "production problems on the real architecture for this we installed for",
    "start": "1636330",
    "end": "1642130"
  },
  {
    "text": "every dev team and our AWS account with all stakes you have seen before and of",
    "start": "1642130",
    "end": "1649600"
  },
  {
    "text": "course it's a game they use gamification as an incentive each team gets points",
    "start": "1649600",
    "end": "1655690"
  },
  {
    "text": "for the overall availability of their system the points were able on global",
    "start": "1655690",
    "end": "1662800"
  },
  {
    "text": "leaderboards and this really sparked the competition then a cows monkey team",
    "start": "1662800",
    "end": "1668950"
  },
  {
    "text": "brought fun into the situation and the dev teams had to clean up or the cows of",
    "start": "1668950",
    "end": "1674140"
  },
  {
    "text": "the monkeys as fast as possible for sustainable improvements each team could",
    "start": "1674140",
    "end": "1681610"
  },
  {
    "text": "earn additional points the additional points rare to improve the DevOps cycle",
    "start": "1681610",
    "end": "1686760"
  },
  {
    "text": "to support the develop cycle the piece",
    "start": "1686760",
    "end": "1691780"
  },
  {
    "text": "feedback was really great the game they showed that it's a great opportunity to",
    "start": "1691780",
    "end": "1697450"
  },
  {
    "text": "deepen the control transfer at knowledge in a front way and to gain hands-on experience through simulated incidents",
    "start": "1697450",
    "end": "1703840"
  },
  {
    "text": "and other operation work we decided to do such a game they more often and by",
    "start": "1703840",
    "end": "1710050"
  },
  {
    "text": "the way it's really a lot of fun for everyone let's talk about what we have",
    "start": "1710050",
    "end": "1715270"
  },
  {
    "text": "learned during the transition to yes we made our micro-service cloud",
    "start": "1715270",
    "end": "1722380"
  },
  {
    "text": "ready with the refactoring to a microservice architecture here's really important to make the micro service",
    "start": "1722380",
    "end": "1728890"
  },
  {
    "text": "independent as possible on runtime and on development level don't try to make",
    "start": "1728890",
    "end": "1737860"
  },
  {
    "text": "it too perfect it's good if you have a initial solution and optimize it later",
    "start": "1737860",
    "end": "1743590"
  },
  {
    "text": "on if it's necessary stop talking start building all laughs to discuss technical",
    "start": "1743590",
    "end": "1750790"
  },
  {
    "text": "solutions but sometimes it's better to try out a solution with a short feedback loop the speed that ADA Ria's provides",
    "start": "1750790",
    "end": "1760990"
  },
  {
    "text": "is really fast and you have to keep up here for us it was good to have initial",
    "start": "1760990",
    "end": "1766150"
  },
  {
    "text": "trainings and also certifications a good start is also to subscribe to newsletters or reach interesting blog",
    "start": "1766150",
    "end": "1773170"
  },
  {
    "text": "posts everyone in the team could should gain regulary hands-on experience or new",
    "start": "1773170",
    "end": "1779710"
  },
  {
    "text": "or unknown services the common understanding is that the cloud is",
    "start": "1779710",
    "end": "1786190"
  },
  {
    "text": "almost infinitely scalable but be aware of eight areas soft and hard limits",
    "start": "1786190",
    "end": "1793289"
  },
  {
    "text": "during the transition 100% in-house was for as a game changer but a",
    "start": "1795059",
    "end": "1801820"
  },
  {
    "text": "self-organized BMW team we could focus on the lift thing and shift to AWS",
    "start": "1801820",
    "end": "1807720"
  },
  {
    "text": "instead of managing the overhead which external service providers have last but",
    "start": "1807720",
    "end": "1816790"
  },
  {
    "text": "not least for us it was perfect to have someone on our side to discuss initial",
    "start": "1816790",
    "end": "1822250"
  },
  {
    "text": "technical solutions AWS professional services what was good for us to accelerate at the beginning instead of",
    "start": "1822250",
    "end": "1829690"
  },
  {
    "text": "starting at point zero and thank you and now it's your turn Thank You Julian and",
    "start": "1829690",
    "end": "1838570"
  },
  {
    "start": "1835000",
    "end": "1946000"
  },
  {
    "text": "now it's your turn actually hopefully you now are motivated to build your own micro services or even to split up your",
    "start": "1838570",
    "end": "1845650"
  },
  {
    "text": "existing monolithic applications and create a set of microservices so to that end it's useful to check out some best",
    "start": "1845650",
    "end": "1852600"
  },
  {
    "text": "practices that we learned from Patrick and Julian and that also are established",
    "start": "1852600",
    "end": "1858330"
  },
  {
    "text": "in many other microservices projects now we're all techies right we like to get",
    "start": "1858330",
    "end": "1864000"
  },
  {
    "text": "deep down and start building services but before you start building something it's useful to start with a design phase",
    "start": "1864000",
    "end": "1870539"
  },
  {
    "text": "without the technology part and really think about how do you want to structure those micro-services and there's a lot",
    "start": "1870539",
    "end": "1878100"
  },
  {
    "text": "of customers that ask me okay how should I cut my micro services so check out domain driven design techniques to help",
    "start": "1878100",
    "end": "1885450"
  },
  {
    "text": "you identify the boundaries of each micro service and there's a whole class",
    "start": "1885450",
    "end": "1890640"
  },
  {
    "text": "of literature around domain driven design this is an example book you can use as a starting point if you haven't",
    "start": "1890640",
    "end": "1896100"
  },
  {
    "text": "left deep into domain driven design and it helps you focus on the core domain of each service so what is a domain here if",
    "start": "1896100",
    "end": "1903179"
  },
  {
    "text": "you're looking from a business point of view whenever you change the language of the business side this is a good",
    "start": "1903179",
    "end": "1909630"
  },
  {
    "text": "indicator that you're changing the domain and they're where you want to split up in different service so for",
    "start": "1909630",
    "end": "1914970"
  },
  {
    "text": "instance customers are one team a domain the car configuration properties are a",
    "start": "1914970",
    "end": "1920039"
  },
  {
    "text": "different domain the sales cycle is another domain so you can start from the business side up and cut your services",
    "start": "1920039",
    "end": "1927059"
  },
  {
    "text": "based on business domains here it also it helps you put the domain model at the center which is really the driver for",
    "start": "1927059",
    "end": "1933539"
  },
  {
    "text": "your application not the technology it should be really the business domain here and it also helps you collaborate",
    "start": "1933539",
    "end": "1939840"
  },
  {
    "text": "between your business people and your technology people be developers or operations people here the other thing",
    "start": "1939840",
    "end": "1947669"
  },
  {
    "start": "1946000",
    "end": "2091000"
  },
  {
    "text": "is when you look at micro services there are a couple of principles that have been established over time so micro",
    "start": "1947669",
    "end": "1952890"
  },
  {
    "text": "services are always decentralized which helps with the whole detaching with with",
    "start": "1952890",
    "end": "1958740"
  },
  {
    "text": "the whole independence thing micro services tend to be independently developed which means that you may want",
    "start": "1958740",
    "end": "1965250"
  },
  {
    "text": "to put micro services into the hands of different development teams and each of them owning their micro service as an as",
    "start": "1965250",
    "end": "1971760"
  },
  {
    "text": "their own product if you will micro services should behave like a black box so you shouldn't be able to look inside",
    "start": "1971760",
    "end": "1977610"
  },
  {
    "text": "the micro service and try to in the system or or or try to to use this to to I don't know optimize",
    "start": "1977610",
    "end": "1984850"
  },
  {
    "text": "something every micro service should really be behind its own API so that gives you the freedom to change and",
    "start": "1984850",
    "end": "1991779"
  },
  {
    "text": "optimize the micro service without having to ask anybody else for permission and then micro services can",
    "start": "1991779",
    "end": "1998019"
  },
  {
    "text": "be polyglot so this is a great driver of freedom for developers because each",
    "start": "1998019",
    "end": "2003149"
  },
  {
    "text": "micro service is developed independently you can choose a different technology stick Pro micro service depending on",
    "start": "2003149",
    "end": "2009509"
  },
  {
    "text": "what you want to solve here so it's perfectly okay to have a different type of database for each micro service to",
    "start": "2009509",
    "end": "2015240"
  },
  {
    "text": "have a different language for each micro service and to choose a completely different technology stack per micro",
    "start": "2015240",
    "end": "2020370"
  },
  {
    "text": "service as long as it helps you create better services or simplify things or be",
    "start": "2020370",
    "end": "2025529"
  },
  {
    "text": "more productive and also you should focus on each micro service doing one",
    "start": "2025529",
    "end": "2031200"
  },
  {
    "text": "thing really well and if you catch yourself implementing more and more features into the same service maybe",
    "start": "2031200",
    "end": "2037350"
  },
  {
    "text": "this is an indicator to split up the work into multiple services so that each service can be implemented independently",
    "start": "2037350",
    "end": "2043529"
  },
  {
    "text": "from each other and then you can realize the benefits of having individual micro services and finally when you build your",
    "start": "2043529",
    "end": "2051030"
  },
  {
    "text": "micro service you also gotta run it the you build it you run it culture that",
    "start": "2051030",
    "end": "2056040"
  },
  {
    "text": "comes with DevOps applies really well to the world of micro services so it's worth taking a look into DevOps a lot",
    "start": "2056040",
    "end": "2063929"
  },
  {
    "text": "more so in order to understand this here's the book that helped me a lot learn a lot about micro services this is",
    "start": "2063929",
    "end": "2070500"
  },
  {
    "text": "one of the most important books about building micro services and it covers a",
    "start": "2070500",
    "end": "2075658"
  },
  {
    "text": "lot of the things from a technology point of view but also from a cultural point of view how does the development cycle work how does deployment work what",
    "start": "2075659",
    "end": "2082858"
  },
  {
    "text": "you what should you keep in mind in terms of security so this is a really good start into having a better full",
    "start": "2082859",
    "end": "2088858"
  },
  {
    "text": "picture on how to develop these things and finally we touched upon DevOps I",
    "start": "2088859",
    "end": "2094908"
  },
  {
    "start": "2091000",
    "end": "2225000"
  },
  {
    "text": "have been to so many meetings that had about that had the topic of DevOps and",
    "start": "2094909",
    "end": "2100500"
  },
  {
    "text": "then people started talking about Jenkins and tools and technology and this is not DevOps DevOps is really a",
    "start": "2100500",
    "end": "2106890"
  },
  {
    "text": "methodology for how you want to bring developers and operations now you want to bring those people together to run",
    "start": "2106890",
    "end": "2113099"
  },
  {
    "text": "the you're microservice and together right so when you think about DevOps remind",
    "start": "2113099",
    "end": "2119250"
  },
  {
    "text": "yourself that DevOps is about systems thinking it's about everybody taking a look at the bigger picture and making",
    "start": "2119250",
    "end": "2126180"
  },
  {
    "text": "sure that you're not falling into the trap of silos and instead everybody in the team should look at the whole",
    "start": "2126180",
    "end": "2131880"
  },
  {
    "text": "picture even across different departments of your company so this is about systems thinking it's about",
    "start": "2131880",
    "end": "2137640"
  },
  {
    "text": "understanding the system as a whole DevOps is also about amplifying feedback loops once you connect the developers",
    "start": "2137640",
    "end": "2144480"
  },
  {
    "text": "with the Ops people you can then start monitoring everything and then you can feedback the monitoring data back to the",
    "start": "2144480",
    "end": "2150930"
  },
  {
    "text": "developers so that they know how to fix things directly from what your customers",
    "start": "2150930",
    "end": "2156510"
  },
  {
    "text": "or from what the consumers of your micro service are seeing and finally DevOps is",
    "start": "2156510",
    "end": "2162000"
  },
  {
    "text": "really a way of installing a culture of continual experimentation and continual learning and we've seen a couple of",
    "start": "2162000",
    "end": "2168240"
  },
  {
    "text": "examples here even with a game-day approach that BMW took here so if you",
    "start": "2168240",
    "end": "2173580"
  },
  {
    "text": "want to learn more there's a great blog post by one of the founding figure heads",
    "start": "2173580",
    "end": "2178950"
  },
  {
    "text": "of the DevOps movement if you haven't done before I really recommend reading the Phoenix",
    "start": "2178950",
    "end": "2184140"
  },
  {
    "text": "project this is actually this is not a textbook this is really a novel you can actually read this a back bedtime it's a",
    "start": "2184140",
    "end": "2190590"
  },
  {
    "text": "story about an IT department and its IT manager who suddenly needs to cope with a lot of change with a lot of chaos and",
    "start": "2190590",
    "end": "2197910"
  },
  {
    "text": "starts implementing a lot of the best practices from manufacturing actually in",
    "start": "2197910",
    "end": "2203250"
  },
  {
    "text": "their IT department and I think having a manufacturing company like BMW and then",
    "start": "2203250",
    "end": "2208410"
  },
  {
    "text": "using the manufacturing know-how of lean production and and looking at the bottleneck in your production line and",
    "start": "2208410",
    "end": "2214560"
  },
  {
    "text": "applying those principles to your IT this is a really nice story here and then there is a handbook coming out of",
    "start": "2214560",
    "end": "2221820"
  },
  {
    "text": "that that really puts these lessons into practice for you so let's take a look at",
    "start": "2221820",
    "end": "2226980"
  },
  {
    "start": "2225000",
    "end": "2329000"
  },
  {
    "text": "how to implement micro services on the AWS side and there are a couple of patterns that we saw at BMW that you can",
    "start": "2226980",
    "end": "2233760"
  },
  {
    "text": "reuse for your own micro services and one pattern is how to create a very simple micro service with just AWS",
    "start": "2233760",
    "end": "2240120"
  },
  {
    "text": "lambda so you can use Amazon s3 to host static data like HTML and JavaScript and",
    "start": "2240120",
    "end": "2246720"
  },
  {
    "text": "fonts and use Amazon CloudFront on top of that to create a very simple user interface layer which is basically setting html5",
    "start": "2246720",
    "end": "2253300"
  },
  {
    "text": "that serves as the client in the web browser and then you can create your micro service just with API gateway and",
    "start": "2253300",
    "end": "2259930"
  },
  {
    "text": "AW lambda so API gateway gives you the API layer that helps hide your micro",
    "start": "2259930",
    "end": "2266109"
  },
  {
    "text": "service as a black box and then lambda is where the business code is running and this is a very simple way to deploy",
    "start": "2266109",
    "end": "2271780"
  },
  {
    "text": "your your business logic in a simple lambda function and finally you can use",
    "start": "2271780",
    "end": "2277270"
  },
  {
    "text": "any database in this example we're using Amazon DynamoDB which is a very easy to use database no need to manage anything",
    "start": "2277270",
    "end": "2283450"
  },
  {
    "text": "you simply set up your table and start filling those tables with data and there is your micro services architecture in",
    "start": "2283450",
    "end": "2289480"
  },
  {
    "text": "just three easy steps of course if you like containers you can do the same you can use the same front-end approach with",
    "start": "2289480",
    "end": "2296530"
  },
  {
    "text": "Amazon s3 and CloudFront and then you would need API gateway again but this time you would put your containers",
    "start": "2296530",
    "end": "2303250"
  },
  {
    "text": "inside the container environment such as a database forget in this example or ECS or eks and you could use an application",
    "start": "2303250",
    "end": "2310540"
  },
  {
    "text": "load balancer to manage the load from api gateway and distribute it into your container fleet and again you can use",
    "start": "2310540",
    "end": "2316960"
  },
  {
    "text": "any database you want or maybe you want to use multiple databases depending on the kind of data that you're running",
    "start": "2316960",
    "end": "2322750"
  },
  {
    "text": "could be dynamodb or it could be Amazon RDS or it could be elastic cache for caching so when you have multiple micro",
    "start": "2322750",
    "end": "2332619"
  },
  {
    "start": "2329000",
    "end": "2394000"
  },
  {
    "text": "services they probably want to talk to each other and that introduces us to the wonderful world of messaging and instead",
    "start": "2332619",
    "end": "2338859"
  },
  {
    "text": "of fretting about how to use old-school Enterprise Service bus and other heavy",
    "start": "2338859",
    "end": "2344619"
  },
  {
    "text": "weights messaging technologies you can go really lightweight by using things like Amazon SNS so simple notification",
    "start": "2344619",
    "end": "2352450"
  },
  {
    "text": "service is a really easy to use messaging service on AWS you can publish",
    "start": "2352450",
    "end": "2357819"
  },
  {
    "text": "messages on SNS from a provider micro service and then the message gets written into a an SNS topic and you can",
    "start": "2357819",
    "end": "2365349"
  },
  {
    "text": "structure the message flow using SNS topics and if you want to persist messages for some time until they are",
    "start": "2365349",
    "end": "2371589"
  },
  {
    "text": "processed you can use Amazon sqs which is simple queue service which helps you buffer those messages until they are",
    "start": "2371589",
    "end": "2377589"
  },
  {
    "text": "fully processed and then your consumer micro service can simply pull messages from an sqs queue",
    "start": "2377589",
    "end": "2382640"
  },
  {
    "text": "processes them and there is your new super lightweight Enterprise Service bus",
    "start": "2382640",
    "end": "2388190"
  },
  {
    "text": "which is not which doesn't introduce any administrative overhead and it's very very easy to set up and finally we also",
    "start": "2388190",
    "end": "2396140"
  },
  {
    "start": "2394000",
    "end": "2509000"
  },
  {
    "text": "learned about how to do service discovery using route 53 and this pattern is really worth studying because",
    "start": "2396140",
    "end": "2402980"
  },
  {
    "text": "it makes it really easy to do service discovery without having to run a full service discovery suite of products so",
    "start": "2402980",
    "end": "2410690"
  },
  {
    "text": "in this case we're using Amazon route 53 and you can use route 53 DNS records to",
    "start": "2410690",
    "end": "2416360"
  },
  {
    "text": "do the mapping between your service name and the IP address where that service is available and if you set up your fleet",
    "start": "2416360",
    "end": "2423110"
  },
  {
    "text": "of micro services in this case we're using containers as an example you can set up Amazon CloudWatch to monitor the",
    "start": "2423110",
    "end": "2430250"
  },
  {
    "text": "lifecycle of individual containers running on your container fleet and you can use aw slam de as a dynamic way of",
    "start": "2430250",
    "end": "2436940"
  },
  {
    "text": "updating around 53 records so this is how it works if you start a new micro service in your container fleet Amazon",
    "start": "2436940",
    "end": "2444260"
  },
  {
    "text": "Cloud which will automatically detect the new container running it will notify aw slam de and then you can use a simple",
    "start": "2444260",
    "end": "2450650"
  },
  {
    "text": "piece of code inside lambda to update the record in route 53 so that the new entry shows up in rows 53 and can stand",
    "start": "2450650",
    "end": "2458000"
  },
  {
    "text": "and other applications can start using this new instance that you put into your fleet and similarly if something goes",
    "start": "2458000",
    "end": "2465350"
  },
  {
    "text": "wrong or if you decommission an instance of a micro service then the same",
    "start": "2465350",
    "end": "2471020"
  },
  {
    "text": "mechanism goes into effect so cloud watch will detect that the micro service has been shut down or maybe it has",
    "start": "2471020",
    "end": "2477260"
  },
  {
    "text": "malfunctioned it will call the same lambda function the lambda function will update the record in route 53 and you",
    "start": "2477260",
    "end": "2482990"
  },
  {
    "text": "get a very very near real-time representation of the state of each",
    "start": "2482990",
    "end": "2488360"
  },
  {
    "text": "service in route 53 so that other services can check ok this one is not",
    "start": "2488360",
    "end": "2494480"
  },
  {
    "text": "showing up anymore where's the next node I can talk to to reach this micro service here very easy",
    "start": "2494480",
    "end": "2500510"
  },
  {
    "text": "to use pattern very powerful because it's very resilient and you don't have to administer anything it is completely",
    "start": "2500510",
    "end": "2507260"
  },
  {
    "text": "self administering so let's summarize what we covered today",
    "start": "2507260",
    "end": "2512820"
  },
  {
    "start": "2509000",
    "end": "2639000"
  },
  {
    "text": "first everybody talks about microservices and yes they are cool but monoliths aren't really bad in the",
    "start": "2512820",
    "end": "2519510"
  },
  {
    "text": "beginning it's okay to write a monolith so that you get the first Minimum Viable Product up and running and you start",
    "start": "2519510",
    "end": "2524940"
  },
  {
    "text": "validating your approach and start getting your project running after that",
    "start": "2524940",
    "end": "2530880"
  },
  {
    "text": "moving to micro services can have a lot of advantages it can introduce a lot more agility as the service becomes more",
    "start": "2530880",
    "end": "2537630"
  },
  {
    "text": "and more complex and grows and this means that you should become a builder and many of my customers from the",
    "start": "2537630",
    "end": "2545040"
  },
  {
    "text": "manufacturing and automotive space they are used to decades of outsourcing everything to vendors and this is a very",
    "start": "2545040",
    "end": "2551310"
  },
  {
    "text": "slow way of developing stuff and it also doesn't give you a lot of control because you need to do is will go",
    "start": "2551310",
    "end": "2557760"
  },
  {
    "text": "through a lot of conference meetings until you get anything done instead become a builder yourself it has never",
    "start": "2557760",
    "end": "2564090"
  },
  {
    "text": "been easier to build something as today in the cloud because you can do everything with API calls so learn how",
    "start": "2564090",
    "end": "2570510"
  },
  {
    "text": "to build learn how to experiment don't fret over be creating the perfect solution from the beginning start with",
    "start": "2570510",
    "end": "2577500"
  },
  {
    "text": "something that works and work from there there's lots of best practices available don't forget about domain driven design",
    "start": "2577500",
    "end": "2584040"
  },
  {
    "text": "before you start writing code try to learn some microservices patterns and",
    "start": "2584040",
    "end": "2589080"
  },
  {
    "text": "think about DevOps as a way of life instead of just a set of tools there's a",
    "start": "2589080",
    "end": "2595110"
  },
  {
    "text": "lot of services on AWS that can help you build micro services without helping without having to to think about",
    "start": "2595110",
    "end": "2601770"
  },
  {
    "text": "administration and setup which keeps your head free for really innovating on top of your use case and leading all of",
    "start": "2601770",
    "end": "2609720"
  },
  {
    "text": "the hard work to those services so check out things like lambda route 53 API gateway easiest and all these other",
    "start": "2609720",
    "end": "2616260"
  },
  {
    "text": "services and if you don't need some help feel free to work with AWS professional",
    "start": "2616260",
    "end": "2621660"
  },
  {
    "text": "services or partners or AWS support and they will help you set up everything and",
    "start": "2621660",
    "end": "2627570"
  },
  {
    "text": "and help you transition into this new mode of operation so with that thank you",
    "start": "2627570",
    "end": "2633540"
  },
  {
    "text": "very much for coming and enjoy the rest of reinvent thank you [Applause]",
    "start": "2633540",
    "end": "2641420"
  }
]