[
  {
    "text": "[Music]",
    "start": "380",
    "end": "12719"
  },
  {
    "text": "hello",
    "start": "12719",
    "end": "13200"
  },
  {
    "text": "i'm partosh a cloud support engineer",
    "start": "13200",
    "end": "15360"
  },
  {
    "text": "here at the aws office in bangalore",
    "start": "15360",
    "end": "17840"
  },
  {
    "text": "today i'll show you how to set up a jitp",
    "start": "17840",
    "end": "20080"
  },
  {
    "text": "environment with a custom root",
    "start": "20080",
    "end": "21520"
  },
  {
    "text": "certificate authority",
    "start": "21520",
    "end": "22960"
  },
  {
    "text": "registered with aws iot and a jitb",
    "start": "22960",
    "end": "25760"
  },
  {
    "text": "template that helps them onboard custom",
    "start": "25760",
    "end": "27599"
  },
  {
    "text": "certificates and private keys",
    "start": "27599",
    "end": "29279"
  },
  {
    "text": "for their iot devices let's get started",
    "start": "29279",
    "end": "32320"
  },
  {
    "text": "just-in-time provisioning is a feature",
    "start": "32320",
    "end": "34000"
  },
  {
    "text": "in aws iot used for provisioning and",
    "start": "34000",
    "end": "36239"
  },
  {
    "text": "onboarding a new device",
    "start": "36239",
    "end": "37680"
  },
  {
    "text": "without writing much code it's mainly",
    "start": "37680",
    "end": "40160"
  },
  {
    "text": "used when customers plan to use their",
    "start": "40160",
    "end": "42000"
  },
  {
    "text": "own root ca",
    "start": "42000",
    "end": "43040"
  },
  {
    "text": "instead of amazon provided root ca and",
    "start": "43040",
    "end": "45600"
  },
  {
    "text": "need an easy way to provision and",
    "start": "45600",
    "end": "47280"
  },
  {
    "text": "onboard multiple devices",
    "start": "47280",
    "end": "48800"
  },
  {
    "text": "onto aws iot the set of tasks for",
    "start": "48800",
    "end": "51760"
  },
  {
    "text": "just-in-time provisioning includes",
    "start": "51760",
    "end": "53280"
  },
  {
    "text": "registering your roots here with aws iit",
    "start": "53280",
    "end": "55680"
  },
  {
    "text": "and then attaching a provisioning",
    "start": "55680",
    "end": "57039"
  },
  {
    "text": "template to it",
    "start": "57039",
    "end": "58879"
  },
  {
    "text": "now when a new device connects to aws",
    "start": "58879",
    "end": "61120"
  },
  {
    "text": "irt the following provisioning steps are",
    "start": "61120",
    "end": "63359"
  },
  {
    "text": "done",
    "start": "63359",
    "end": "63760"
  },
  {
    "text": "for the device register the device",
    "start": "63760",
    "end": "65920"
  },
  {
    "text": "certificate to aws irt",
    "start": "65920",
    "end": "67920"
  },
  {
    "text": "and set its status to pending activation",
    "start": "67920",
    "end": "70880"
  },
  {
    "text": "create a thing",
    "start": "70880",
    "end": "72320"
  },
  {
    "text": "create a policy attach policy to",
    "start": "72320",
    "end": "74720"
  },
  {
    "text": "certificate",
    "start": "74720",
    "end": "75840"
  },
  {
    "text": "certificate to thing update the",
    "start": "75840",
    "end": "78000"
  },
  {
    "text": "certificate status to active",
    "start": "78000",
    "end": "80320"
  },
  {
    "text": "let's go ahead and create our own",
    "start": "80320",
    "end": "82240"
  },
  {
    "text": "just-in-time provisioning workflow",
    "start": "82240",
    "end": "85360"
  },
  {
    "text": "because we need openssl to generate the",
    "start": "85360",
    "end": "87920"
  },
  {
    "text": "ca certificate",
    "start": "87920",
    "end": "88960"
  },
  {
    "text": "we'll first verify if it's installed by",
    "start": "88960",
    "end": "91439"
  },
  {
    "text": "running this command on the command",
    "start": "91439",
    "end": "92960"
  },
  {
    "text": "prompt",
    "start": "92960",
    "end": "94960"
  },
  {
    "text": "as you can observe i have open ssl",
    "start": "94960",
    "end": "96960"
  },
  {
    "text": "installed if you don't have openssl",
    "start": "96960",
    "end": "99280"
  },
  {
    "text": "installed you can run the following",
    "start": "99280",
    "end": "100960"
  },
  {
    "text": "commands on either",
    "start": "100960",
    "end": "101920"
  },
  {
    "text": "linux or mac os to install the same",
    "start": "101920",
    "end": "106479"
  },
  {
    "text": "certificates signed by or ca are",
    "start": "108320",
    "end": "110000"
  },
  {
    "text": "required to have a specific setting for",
    "start": "110000",
    "end": "111840"
  },
  {
    "text": "signing certificates called basic",
    "start": "111840",
    "end": "113600"
  },
  {
    "text": "constraint",
    "start": "113600",
    "end": "114720"
  },
  {
    "text": "the default value in the system's",
    "start": "114720",
    "end": "116320"
  },
  {
    "text": "default configuration file",
    "start": "116320",
    "end": "117840"
  },
  {
    "text": "is set to false however for our use case",
    "start": "117840",
    "end": "120880"
  },
  {
    "text": "we need to set it to true",
    "start": "120880",
    "end": "122560"
  },
  {
    "text": "to get around that limitation we'll",
    "start": "122560",
    "end": "124640"
  },
  {
    "text": "create a new file called root ca",
    "start": "124640",
    "end": "126640"
  },
  {
    "text": "underscore",
    "start": "126640",
    "end": "127959"
  },
  {
    "text": "openssl.conf in our working directory",
    "start": "127959",
    "end": "130879"
  },
  {
    "text": "copy the following contents into the",
    "start": "130879",
    "end": "132800"
  },
  {
    "text": "file and save it",
    "start": "132800",
    "end": "135760"
  },
  {
    "text": "now we'll create the custom root ca by",
    "start": "140640",
    "end": "142640"
  },
  {
    "text": "first creating the private key",
    "start": "142640",
    "end": "144239"
  },
  {
    "text": "then creating the certificate signing",
    "start": "144239",
    "end": "145920"
  },
  {
    "text": "request and finally creating the",
    "start": "145920",
    "end": "147760"
  },
  {
    "text": "certificate itself",
    "start": "147760",
    "end": "157840"
  },
  {
    "text": "having done that fetch the registration",
    "start": "165360",
    "end": "167680"
  },
  {
    "text": "code for the region you will be using",
    "start": "167680",
    "end": "169440"
  },
  {
    "text": "aws",
    "start": "169440",
    "end": "170000"
  },
  {
    "text": "iit in the code will be used as the",
    "start": "170000",
    "end": "172560"
  },
  {
    "text": "common name for the verification",
    "start": "172560",
    "end": "174160"
  },
  {
    "text": "certificate private key",
    "start": "174160",
    "end": "177120"
  },
  {
    "text": "then generate a key pair for the private",
    "start": "177120",
    "end": "179280"
  },
  {
    "text": "key verification certificate",
    "start": "179280",
    "end": "181120"
  },
  {
    "text": "we'll get a file called verification",
    "start": "181120",
    "end": "183040"
  },
  {
    "text": "search dot key",
    "start": "183040",
    "end": "185840"
  },
  {
    "text": "now we execute the following command to",
    "start": "186080",
    "end": "188319"
  },
  {
    "text": "create a certificate signing request",
    "start": "188319",
    "end": "190080"
  },
  {
    "text": "for the private key verification",
    "start": "190080",
    "end": "191519"
  },
  {
    "text": "certificate we'll get a file called",
    "start": "191519",
    "end": "193680"
  },
  {
    "text": "verification sort dot csr",
    "start": "193680",
    "end": "196239"
  },
  {
    "text": "make sure that when you're entering the",
    "start": "196239",
    "end": "197920"
  },
  {
    "text": "values that you enter the common name",
    "start": "197920",
    "end": "200159"
  },
  {
    "text": "equal to the registration code that we",
    "start": "200159",
    "end": "202159"
  },
  {
    "text": "received in the previous step",
    "start": "202159",
    "end": "213120"
  },
  {
    "text": "we use the csr to create a verification",
    "start": "213120",
    "end": "215440"
  },
  {
    "text": "certificate",
    "start": "215440",
    "end": "216319"
  },
  {
    "text": "the verification server.pem file we get",
    "start": "216319",
    "end": "218879"
  },
  {
    "text": "from this step",
    "start": "218879",
    "end": "219680"
  },
  {
    "text": "is used when we register the ca",
    "start": "219680",
    "end": "221280"
  },
  {
    "text": "certificate to aws iot",
    "start": "221280",
    "end": "227840"
  },
  {
    "text": "next step is to create a just-in-time",
    "start": "230080",
    "end": "231920"
  },
  {
    "text": "provisioning template",
    "start": "231920",
    "end": "233280"
  },
  {
    "text": "first we need an aws im role",
    "start": "233280",
    "end": "236319"
  },
  {
    "text": "that the jit template can assume to",
    "start": "236319",
    "end": "239200"
  },
  {
    "text": "create the same",
    "start": "239200",
    "end": "240080"
  },
  {
    "text": "we'll navigate to the iim console and",
    "start": "240080",
    "end": "242239"
  },
  {
    "text": "then create a role for the iot service",
    "start": "242239",
    "end": "246000"
  },
  {
    "text": "to do this simply log into the aws",
    "start": "246000",
    "end": "248239"
  },
  {
    "text": "management console",
    "start": "248239",
    "end": "249599"
  },
  {
    "text": "and navigate to the im console",
    "start": "249599",
    "end": "255840"
  },
  {
    "text": "select roles on the left navigation pane",
    "start": "257519",
    "end": "261680"
  },
  {
    "text": "here choose create a role",
    "start": "263520",
    "end": "267039"
  },
  {
    "text": "choose iot and again iot choose next to",
    "start": "267600",
    "end": "271199"
  },
  {
    "text": "proceed",
    "start": "271199",
    "end": "273600"
  },
  {
    "text": "give this role the name jitp role as you",
    "start": "275520",
    "end": "278639"
  },
  {
    "text": "can see",
    "start": "278639",
    "end": "279199"
  },
  {
    "text": "all the necessary policies required are",
    "start": "279199",
    "end": "281840"
  },
  {
    "text": "already provided by default",
    "start": "281840",
    "end": "285360"
  },
  {
    "text": "choose create role to save these",
    "start": "286479",
    "end": "288320"
  },
  {
    "text": "settings and then copy the role layer in",
    "start": "288320",
    "end": "292479"
  },
  {
    "text": "now that we have our role arn we'll add",
    "start": "294639",
    "end": "297040"
  },
  {
    "text": "this to our jitp template",
    "start": "297040",
    "end": "299479"
  },
  {
    "text": "jitptemplate.json we'll also replace the",
    "start": "299479",
    "end": "302080"
  },
  {
    "text": "account id placeholder with our account",
    "start": "302080",
    "end": "306080"
  },
  {
    "text": "id",
    "start": "308840",
    "end": "311840"
  },
  {
    "text": "now that we have our jit template root",
    "start": "314880",
    "end": "317440"
  },
  {
    "text": "ca and verification certificate",
    "start": "317440",
    "end": "319440"
  },
  {
    "text": "we are ready to register our ca",
    "start": "319440",
    "end": "321360"
  },
  {
    "text": "certificate with aws iot",
    "start": "321360",
    "end": "323840"
  },
  {
    "text": "run the register ca certificate cli",
    "start": "323840",
    "end": "325840"
  },
  {
    "text": "command to register the root ca as a ca",
    "start": "325840",
    "end": "328560"
  },
  {
    "text": "certificate in aws iot",
    "start": "328560",
    "end": "331039"
  },
  {
    "text": "we are adding the parameter registration",
    "start": "331039",
    "end": "333039"
  },
  {
    "text": "config to attach the jit template to the",
    "start": "333039",
    "end": "335680"
  },
  {
    "text": "ca certificate",
    "start": "335680",
    "end": "339840"
  },
  {
    "text": "now that we registered a sample ca",
    "start": "342639",
    "end": "344560"
  },
  {
    "text": "certificate with auto registration",
    "start": "344560",
    "end": "346560"
  },
  {
    "text": "status enabled",
    "start": "346560",
    "end": "348000"
  },
  {
    "text": "and associated it with a provisioning",
    "start": "348000",
    "end": "350639"
  },
  {
    "text": "template",
    "start": "350639",
    "end": "351280"
  },
  {
    "text": "we can try using the ca certificate to",
    "start": "351280",
    "end": "353840"
  },
  {
    "text": "sign",
    "start": "353840",
    "end": "354400"
  },
  {
    "text": "a device certificate the device",
    "start": "354400",
    "end": "356160"
  },
  {
    "text": "certificate will be provisioned in aws",
    "start": "356160",
    "end": "358400"
  },
  {
    "text": "iot",
    "start": "358400",
    "end": "358960"
  },
  {
    "text": "automatically when it first connects to",
    "start": "358960",
    "end": "361280"
  },
  {
    "text": "aws id core",
    "start": "361280",
    "end": "364319"
  },
  {
    "text": "make sure that you are in the same",
    "start": "364720",
    "end": "366240"
  },
  {
    "text": "directory as a root ca",
    "start": "366240",
    "end": "368400"
  },
  {
    "text": "that is the files rootca.pem and",
    "start": "368400",
    "end": "371160"
  },
  {
    "text": "rootca.key",
    "start": "371160",
    "end": "372400"
  },
  {
    "text": "that we created earlier as these are",
    "start": "372400",
    "end": "374960"
  },
  {
    "text": "used to sign a device certificate",
    "start": "374960",
    "end": "380960"
  },
  {
    "text": "also download the rootca1 as rootca1.pem",
    "start": "380960",
    "end": "385199"
  },
  {
    "text": "which is used for server-side",
    "start": "385199",
    "end": "386720"
  },
  {
    "text": "authentication when we publish requests",
    "start": "386720",
    "end": "389199"
  },
  {
    "text": "to aws iot",
    "start": "389199",
    "end": "395840"
  },
  {
    "text": "to create a device private key and csr",
    "start": "402639",
    "end": "405280"
  },
  {
    "text": "run the following commands in the",
    "start": "405280",
    "end": "406840"
  },
  {
    "text": "terminal",
    "start": "406840",
    "end": "409840"
  },
  {
    "text": "according to our template that we have",
    "start": "411759",
    "end": "413280"
  },
  {
    "text": "used the thing name",
    "start": "413280",
    "end": "414880"
  },
  {
    "text": "must be equal to the certificate's",
    "start": "414880",
    "end": "416560"
  },
  {
    "text": "common name and the attribute",
    "start": "416560",
    "end": "418960"
  },
  {
    "text": "country must be equal to the value of",
    "start": "418960",
    "end": "421280"
  },
  {
    "text": "the country present",
    "start": "421280",
    "end": "422319"
  },
  {
    "text": "in the certificate therefore be sure to",
    "start": "422319",
    "end": "425199"
  },
  {
    "text": "add the value of the thing name",
    "start": "425199",
    "end": "427120"
  },
  {
    "text": "in the common name property as well as",
    "start": "427120",
    "end": "429199"
  },
  {
    "text": "populate the country name parameter",
    "start": "429199",
    "end": "431840"
  },
  {
    "text": "i'll set the common name as demo thing",
    "start": "431840",
    "end": "434240"
  },
  {
    "text": "and country as i n",
    "start": "434240",
    "end": "437840"
  },
  {
    "text": "now generate the device certificate note",
    "start": "440880",
    "end": "443440"
  },
  {
    "text": "that this certificate is valid for 365",
    "start": "443440",
    "end": "446160"
  },
  {
    "text": "days",
    "start": "446160",
    "end": "446720"
  },
  {
    "text": "as specified in the command",
    "start": "446720",
    "end": "451840"
  },
  {
    "text": "then we create a file that contains the",
    "start": "455759",
    "end": "457919"
  },
  {
    "text": "combination of device certificate",
    "start": "457919",
    "end": "459919"
  },
  {
    "text": "and its corresponding ca certificate",
    "start": "459919",
    "end": "464000"
  },
  {
    "text": "to find the iot endpoint for your region",
    "start": "464000",
    "end": "466560"
  },
  {
    "text": "run the described endpoint",
    "start": "466560",
    "end": "468000"
  },
  {
    "text": "aws cli command",
    "start": "468000",
    "end": "471280"
  },
  {
    "text": "finally we'll make a dummy published",
    "start": "472960",
    "end": "474960"
  },
  {
    "text": "call to aws iit",
    "start": "474960",
    "end": "476400"
  },
  {
    "text": "using mosquito mqtt client with a dummy",
    "start": "476400",
    "end": "479360"
  },
  {
    "text": "client id",
    "start": "479360",
    "end": "480240"
  },
  {
    "text": "a dummy topic name aws root ca1",
    "start": "480240",
    "end": "482879"
  },
  {
    "text": "certificate",
    "start": "482879",
    "end": "484080"
  },
  {
    "text": "device private key and the combination",
    "start": "484080",
    "end": "486319"
  },
  {
    "text": "of root ca",
    "start": "486319",
    "end": "487280"
  },
  {
    "text": "plus device cert the call fails",
    "start": "487280",
    "end": "490319"
  },
  {
    "text": "the first time however when aws iit",
    "start": "490319",
    "end": "493840"
  },
  {
    "text": "receives this published call",
    "start": "493840",
    "end": "495599"
  },
  {
    "text": "it creates a certificate policy and",
    "start": "495599",
    "end": "498080"
  },
  {
    "text": "thing",
    "start": "498080",
    "end": "498879"
  },
  {
    "text": "it attaches policy to certificate and",
    "start": "498879",
    "end": "501280"
  },
  {
    "text": "then attaches certificate to thing",
    "start": "501280",
    "end": "504319"
  },
  {
    "text": "if you don't have mosquito you can use",
    "start": "504319",
    "end": "506400"
  },
  {
    "text": "any other method such as aws device sdk",
    "start": "506400",
    "end": "509280"
  },
  {
    "text": "to make this published call to aws iot",
    "start": "509280",
    "end": "513599"
  },
  {
    "text": "now that we made our first dummy",
    "start": "516479",
    "end": "517839"
  },
  {
    "text": "published call we'll navigate to the iot",
    "start": "517839",
    "end": "520080"
  },
  {
    "text": "core console",
    "start": "520080",
    "end": "521120"
  },
  {
    "text": "and make sure that the jit template",
    "start": "521120",
    "end": "523120"
  },
  {
    "text": "executed successfully",
    "start": "523120",
    "end": "525279"
  },
  {
    "text": "here we'll first check the thing that",
    "start": "525279",
    "end": "527040"
  },
  {
    "text": "was created by choosing things",
    "start": "527040",
    "end": "529680"
  },
  {
    "text": "as we can see a thing called demo thing",
    "start": "529680",
    "end": "531839"
  },
  {
    "text": "was created",
    "start": "531839",
    "end": "532800"
  },
  {
    "text": "and can verify the attributes that were",
    "start": "532800",
    "end": "534720"
  },
  {
    "text": "added to it",
    "start": "534720",
    "end": "536000"
  },
  {
    "text": "we will click on certificates and verify",
    "start": "536000",
    "end": "538160"
  },
  {
    "text": "that a certificate was attached",
    "start": "538160",
    "end": "539680"
  },
  {
    "text": "to the thing",
    "start": "539680",
    "end": "542240"
  },
  {
    "text": "here we can verify that the certificate",
    "start": "545440",
    "end": "547279"
  },
  {
    "text": "was created and it's an",
    "start": "547279",
    "end": "549120"
  },
  {
    "text": "active state",
    "start": "549120",
    "end": "551839"
  },
  {
    "text": "choose policies to make sure that the",
    "start": "552880",
    "end": "554560"
  },
  {
    "text": "policy was attached",
    "start": "554560",
    "end": "556160"
  },
  {
    "text": "click on the policy to view the policy",
    "start": "556160",
    "end": "560160"
  },
  {
    "text": "document",
    "start": "560839",
    "end": "562880"
  },
  {
    "text": "now that we've verified that the",
    "start": "562880",
    "end": "564240"
  },
  {
    "text": "resources were created by the gitp",
    "start": "564240",
    "end": "566560"
  },
  {
    "text": "template",
    "start": "566560",
    "end": "567279"
  },
  {
    "text": "will use the device certificate to make",
    "start": "567279",
    "end": "569279"
  },
  {
    "text": "a publish call to aws iot",
    "start": "569279",
    "end": "571760"
  },
  {
    "text": "navigate to the iit core console and",
    "start": "571760",
    "end": "573760"
  },
  {
    "text": "choose test",
    "start": "573760",
    "end": "577839"
  },
  {
    "text": "set subscription topic as demo thing",
    "start": "578800",
    "end": "581120"
  },
  {
    "text": "slash test",
    "start": "581120",
    "end": "583440"
  },
  {
    "text": "according to the policy that we added in",
    "start": "583440",
    "end": "585200"
  },
  {
    "text": "the jit template",
    "start": "585200",
    "end": "586640"
  },
  {
    "text": "we can connect only when client id is",
    "start": "586640",
    "end": "589040"
  },
  {
    "text": "equal to thing name",
    "start": "589040",
    "end": "590240"
  },
  {
    "text": "and only publish subscribe receive from",
    "start": "590240",
    "end": "593200"
  },
  {
    "text": "or to the topic",
    "start": "593200",
    "end": "594399"
  },
  {
    "text": "thing name slash star also in the next",
    "start": "594399",
    "end": "597920"
  },
  {
    "text": "publish call we can use the independent",
    "start": "597920",
    "end": "599920"
  },
  {
    "text": "certificate",
    "start": "599920",
    "end": "600720"
  },
  {
    "text": "instead of the combined certificate run",
    "start": "600720",
    "end": "602880"
  },
  {
    "text": "the publish command and then publish a",
    "start": "602880",
    "end": "604640"
  },
  {
    "text": "message from mosquitto",
    "start": "604640",
    "end": "606079"
  },
  {
    "text": "to aidan society using our custom device",
    "start": "606079",
    "end": "608079"
  },
  {
    "text": "certificate generated using our custom",
    "start": "608079",
    "end": "610720"
  },
  {
    "text": "root ca",
    "start": "610720",
    "end": "612240"
  },
  {
    "text": "a message was published to aws iit core",
    "start": "612240",
    "end": "614880"
  },
  {
    "text": "and as we can see",
    "start": "614880",
    "end": "616240"
  },
  {
    "text": "in the test console the message has",
    "start": "616240",
    "end": "618079"
  },
  {
    "text": "arrived",
    "start": "618079",
    "end": "619279"
  },
  {
    "text": "going forward you can simply follow",
    "start": "619279",
    "end": "621040"
  },
  {
    "text": "steps for performing",
    "start": "621040",
    "end": "622720"
  },
  {
    "text": "jitp to create new device certificates",
    "start": "622720",
    "end": "625839"
  },
  {
    "text": "and then get them registered to aws iit",
    "start": "625839",
    "end": "628640"
  },
  {
    "text": "via the dummy publish call",
    "start": "628640",
    "end": "630399"
  },
  {
    "text": "that executes the jitp template attached",
    "start": "630399",
    "end": "633360"
  },
  {
    "text": "with the registered ca certificate",
    "start": "633360",
    "end": "636160"
  },
  {
    "text": "note that the next time you perform jitp",
    "start": "636160",
    "end": "638320"
  },
  {
    "text": "with a new device sort",
    "start": "638320",
    "end": "639680"
  },
  {
    "text": "for example one called device or two dot",
    "start": "639680",
    "end": "642079"
  },
  {
    "text": "crt",
    "start": "642079",
    "end": "643040"
  },
  {
    "text": "the policy that was created the first",
    "start": "643040",
    "end": "644959"
  },
  {
    "text": "time is the one that will be used",
    "start": "644959",
    "end": "647120"
  },
  {
    "text": "a new policy will not be created",
    "start": "647120",
    "end": "650640"
  },
  {
    "text": "thanks for watching and happy cloud",
    "start": "650640",
    "end": "652160"
  },
  {
    "text": "computing from all of us here at aws",
    "start": "652160",
    "end": "661839"
  }
]