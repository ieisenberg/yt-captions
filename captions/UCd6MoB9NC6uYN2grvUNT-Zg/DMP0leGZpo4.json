[
  {
    "start": "0",
    "end": "126000"
  },
  {
    "text": "welcome um thank you for for coming to the session U everyone enjoy the keynote",
    "start": "1040",
    "end": "6160"
  },
  {
    "text": "yeah you all got a sense to see it yeah good don't you're capping for that not for me it's for them um I'm not I'm not",
    "start": "6160",
    "end": "12280"
  },
  {
    "text": "going for fake Applause it's cool um uh yeah a lot of exciting stuff obviously that was just day one more to come",
    "start": "12280",
    "end": "17359"
  },
  {
    "text": "tomorrow obviously um so it's going be a big week for us uh thanks again for making the trip uh it's obviously a huge",
    "start": "17359",
    "end": "23039"
  },
  {
    "text": "huge week of the year for us and I know it's a big effort to come out here so thank you um my name is Matt Tavis um",
    "start": "23039",
    "end": "28760"
  },
  {
    "text": "I'm a Solutions architect at ads I was uh lucky enough to join Amazon um 10",
    "start": "28760",
    "end": "34040"
  },
  {
    "text": "years ago next month um so came in uh early days and got to see the whole",
    "start": "34040",
    "end": "39200"
  },
  {
    "text": "platform uh evolve and it's been a great journey for me um and most of my time the last five six years has really been",
    "start": "39200",
    "end": "45280"
  },
  {
    "text": "working out in the field with partners and customers um providing architectural and Technical advice about how to get",
    "start": "45280",
    "end": "50600"
  },
  {
    "text": "the best out of the platform how to do things um the ABS way or the cloud way",
    "start": "50600",
    "end": "55719"
  },
  {
    "text": "or the most efficient way based on what your business is um lately I've been Focus a lot on software of service I",
    "start": "55719",
    "end": "62039"
  },
  {
    "text": "actually work on our partner Solutions architecture team um focused on isvs and helping them understand how to bring",
    "start": "62039",
    "end": "68280"
  },
  {
    "text": "their uh existing um products and new products um to the platform uh and so a",
    "start": "68280",
    "end": "73439"
  },
  {
    "text": "popular Topic in that space and a popular top topic for many of our customers is really this idea of multi-tenancy how do I how do I build an",
    "start": "73439",
    "end": "80720"
  },
  {
    "text": "architecture on top of AWS that isn't about a single install you know per tenant um and a whole bunch of these",
    "start": "80720",
    "end": "86600"
  },
  {
    "text": "lessons um and examples that I'm going to talk about today are really from those conversations what we're hearing",
    "start": "86600",
    "end": "92320"
  },
  {
    "text": "out in the field what we're seeing people do um you know day-to-day uh and kind of the current state of play if you",
    "start": "92320",
    "end": "98079"
  },
  {
    "text": "will on top of a um as anyone here who's followed AWS will know um these things",
    "start": "98079",
    "end": "104079"
  },
  {
    "text": "change rapidly they change all the time so uh so this is you know uh this architecture deck may change entirely by",
    "start": "104079",
    "end": "109920"
  },
  {
    "text": "next reinvent um but you know what this is I'll give you a sort of a sense of what we're seeing out there um right now",
    "start": "109920",
    "end": "114960"
  },
  {
    "text": "and some examples of of customers that are taking those paths uh and then we'll uh hopefully get some some tidbits for",
    "start": "114960",
    "end": "121360"
  },
  {
    "text": "you to take home and apply to your own architecture um so with that being said I'm just going to Dive Right In um so",
    "start": "121360",
    "end": "127240"
  },
  {
    "start": "126000",
    "end": "126000"
  },
  {
    "text": "what to expect uh the focus here is really some of the key challenges of multi-tenant architectures um what we're",
    "start": "127240",
    "end": "133160"
  },
  {
    "text": "seeing is things to really think about when you design for um a sort of a shared um platform or shared",
    "start": "133160",
    "end": "138480"
  },
  {
    "text": "architecture um some common deployment models um what customers are actually doing um",
    "start": "138480",
    "end": "145080"
  },
  {
    "text": "today and then of course some strategies for how to address some of those challenges um that were're we're seeing",
    "start": "145080",
    "end": "150160"
  },
  {
    "text": "out in the field what we're hearing from our customers um this isn't going to be a deep dive on you know VPC design uh",
    "start": "150160",
    "end": "156440"
  },
  {
    "text": "it's not going to be a deep dive on IM you know security strategies and how to lock down the infrastructure um it's",
    "start": "156440",
    "end": "162360"
  },
  {
    "text": "definitely more of a architectural view um top down around how the services work together and approaches you might take",
    "start": "162360",
    "end": "168400"
  },
  {
    "text": "um to multi-tenancy um so let's start with the the challenges you I'm not going to dive",
    "start": "168400",
    "end": "174000"
  },
  {
    "start": "170000",
    "end": "170000"
  },
  {
    "text": "into each one we're going to spend more time on each a little bit further on but really the ones we're hearing about most commonly are first first and foremost",
    "start": "174000",
    "end": "180319"
  },
  {
    "text": "how do I if you have a multi-tenant environment how do I route requests how do I route a a request coming into the",
    "start": "180319",
    "end": "185760"
  },
  {
    "text": "platform to the right set of code or infrastructure or the right component and in some cases you know that's uh can",
    "start": "185760",
    "end": "191519"
  },
  {
    "text": "be quite challenging can be quite a change architecturally how do I think about change management when I have a shared pool of resources how do I swap",
    "start": "191519",
    "end": "198200"
  },
  {
    "text": "out you know versions of code or instances um how do I think about data security and isolation a common topic",
    "start": "198200",
    "end": "204319"
  },
  {
    "text": "across the board and multi-tenancy adds another Factor on top how do I think about data security and isolation across",
    "start": "204319",
    "end": "209480"
  },
  {
    "text": "my tenants um and then of course uh what are the patterns um that might be uh applicable to building a multi-tenant",
    "start": "209480",
    "end": "216599"
  },
  {
    "text": "architecture so we'll start with the patterns because I think the patterns sort of lay a foundation of what we're",
    "start": "216599",
    "end": "221959"
  },
  {
    "text": "seeing out there today um and they talk a lot about uh really you know what options exist and what we're seeing and",
    "start": "221959",
    "end": "228159"
  },
  {
    "text": "then we'll dive into sort of some of the other challenges we go on the first pattern I like to call the Retro um you",
    "start": "228159",
    "end": "234319"
  },
  {
    "text": "know it's uh it's still alive and well um multi- tendency as sort of basically a whole bunch of individual tenant uh",
    "start": "234319",
    "end": "240879"
  },
  {
    "text": "approaches and really this pattern is effectively not doing multi-tenancy in",
    "start": "240879",
    "end": "246000"
  },
  {
    "text": "in a true sense but rather replicating in a way um by actually having unique stacks for each individual tenant right",
    "start": "246000",
    "end": "253640"
  },
  {
    "text": "um isolation for all of your infrastructure isolation for Access um for your customers for their tenants",
    "start": "253640",
    "end": "259919"
  },
  {
    "text": "themselves uh is then at the ABS resource level so dedicated load balancers dedicated ec2 instances",
    "start": "259919",
    "end": "267080"
  },
  {
    "text": "dedicated uh data sources um uh this is uh often something you have to consider",
    "start": "267080",
    "end": "273600"
  },
  {
    "text": "right um it's not the most exciting multi-tenant architecture because it really doesn't feel super multi-tenant",
    "start": "273600",
    "end": "279479"
  },
  {
    "text": "um but fundamentally it is something that customers today still have to consider as a multi-tenant approach um",
    "start": "279479",
    "end": "284919"
  },
  {
    "text": "for various reasons one blackbox applications you know uh I I've worked with many um Enterprise organizations",
    "start": "284919",
    "end": "292199"
  },
  {
    "text": "that are are uh it's it's not possible to crack open that code the people that wrote it maybe aren't even there uh",
    "start": "292199",
    "end": "298520"
  },
  {
    "text": "anymore maybe they the document a is no longer available so it's like we have to run it like we run it today that's how it works don't touch it um and that is",
    "start": "298520",
    "end": "305600"
  },
  {
    "text": "uh that's one common model you see appliances where somebody has a product off the shelf they're integrating into an architecture they don't have the",
    "start": "305600",
    "end": "311560"
  },
  {
    "text": "opportunity to change that code and so that's going to be something that is fundamentally going to exist um until a",
    "start": "311560",
    "end": "317800"
  },
  {
    "text": "new version of that uh application is built or a new product that comes out which really um has a different approach",
    "start": "317800",
    "end": "323400"
  },
  {
    "text": "to that um the other example is snowflake configurations you probably heard this uh every every approach every",
    "start": "323400",
    "end": "329360"
  },
  {
    "text": "custom cust installation is a unique configuration therefore it's like a snowflake they're all unique and special",
    "start": "329360",
    "end": "335280"
  },
  {
    "text": "um which is which is actually quite common with a lot of enterprise software and so uh in order to support that it is",
    "start": "335280",
    "end": "341520"
  },
  {
    "text": "often the choice uh to say well I'm going to give each you know configuration for each customer its own",
    "start": "341520",
    "end": "346600"
  },
  {
    "text": "stack right um and that's uh almost a requirement baked in because the lack of",
    "start": "346600",
    "end": "351639"
  },
  {
    "text": "of dynamic configurability of the product and each installation's uh different um and then of course if",
    "start": "351639",
    "end": "357560"
  },
  {
    "text": "you're looking to get into a cloud scale infrastructure now but don't really have the time or development resources to",
    "start": "357560",
    "end": "364800"
  },
  {
    "text": "make a change so it's a low effort approach to quickly move uh that platform as it stands onto uh the ABS",
    "start": "364800",
    "end": "371880"
  },
  {
    "text": "infrastructure and get uh if if you will kind of a replication of the environment",
    "start": "371880",
    "end": "376960"
  },
  {
    "text": "into a much more scalable much more Dynamic uh infrastructure with AWS um",
    "start": "376960",
    "end": "382319"
  },
  {
    "text": "the challenges here and the reasons why this isn't necessarily the the easiest approach or the best approach come down",
    "start": "382319",
    "end": "388680"
  },
  {
    "text": "to a couple one is is really uh cost efficiency sort of resource management um what we see kind of as urban sprawl",
    "start": "388680",
    "end": "395479"
  },
  {
    "text": "you know uh everyone gets their own set of resources everyone gets their own uh unique uh ads instances and RDS",
    "start": "395479",
    "end": "402240"
  },
  {
    "text": "instances and you get this um both a complication from a number of components",
    "start": "402240",
    "end": "407479"
  },
  {
    "text": "you have to manage that are all unique so in addition to obviously labeling things with tagging you then have to",
    "start": "407479",
    "end": "412639"
  },
  {
    "text": "keep track of which ones go to which customers which configs they apply to which code maybe is on each instance set",
    "start": "412639",
    "end": "418919"
  },
  {
    "text": "so it does ask a lot of layers of complexity if you will in terms of configuration management across those",
    "start": "418919",
    "end": "424199"
  },
  {
    "text": "unique um Stacks um it also ends up uh not being necessarily the most cost-efficient approach right if",
    "start": "424199",
    "end": "430400"
  },
  {
    "text": "everyone gets their own database and the database isn't being heavily utilized you have a whole bunch of of of wasted",
    "start": "430400",
    "end": "436319"
  },
  {
    "text": "um if you will CPU time compute time um now normally and when people",
    "start": "436319",
    "end": "441400"
  },
  {
    "text": "traditionally built software in the past you know that wasn't necessarily a huge concern because each customer was hosting it themselves and they had to",
    "start": "441400",
    "end": "447520"
  },
  {
    "text": "worry about you know operational efficiency in there data center um when you're running it for everyone so you",
    "start": "447520",
    "end": "452720"
  },
  {
    "text": "have now a th000 customers with a th users you have a million users efficiencies small gains and efficiency",
    "start": "452720",
    "end": "459240"
  },
  {
    "text": "have a huge impact in terms of the overall um uh cost of the platform and running it so really thinking about how",
    "start": "459240",
    "end": "464840"
  },
  {
    "text": "to optimize for that so that's a challenge with the isolated stack approach um and of course it really",
    "start": "464840",
    "end": "469879"
  },
  {
    "text": "doesn't feel like a modern Cloud architecture to take this approach but it's obviously you know uh something",
    "start": "469879",
    "end": "475080"
  },
  {
    "text": "that's valid um now the one thing I'll say I put the big X over it I'm not a huge fan of this one but it is there are",
    "start": "475080",
    "end": "480960"
  },
  {
    "text": "reasons why you need to do it um I would argue it's sometimes worth it to fight the inertia and say I would like to skip",
    "start": "480960",
    "end": "487919"
  },
  {
    "text": "over the isolated Stacks model and start thinking about breaking that architecture um into maybe a more of a",
    "start": "487919",
    "end": "493039"
  },
  {
    "text": "hybrid approach or or a uh sort of a a slowly maturing or evolving architecture I'll talk about",
    "start": "493039",
    "end": "499879"
  },
  {
    "text": "next um straight up example this is probably the simplest architecture diagram I could possibly put on the",
    "start": "499879",
    "end": "505039"
  },
  {
    "text": "slide um you can see each tenant whether they be green white or blue uh will get their own stack their own load balancer",
    "start": "505039",
    "end": "511599"
  },
  {
    "text": "their own ec2 instances their own autoscaling groups um their own data stores right um fairly straightforward",
    "start": "511599",
    "end": "518560"
  },
  {
    "text": "um makes a lot of sense um to get there quickly but again not necessarily the the uh the best approach for efficiency",
    "start": "518560",
    "end": "525760"
  },
  {
    "text": "um and of course when you think about tracking cost or uh cost management around this obviously definitely spend",
    "start": "525760",
    "end": "532600"
  },
  {
    "text": "time looking at tagging and if you had if you don't use tagging today use it it's not it's not a it's not a",
    "start": "532600",
    "end": "538120"
  },
  {
    "text": "recommendation it's a requirement please um it helps everyone trust me uh and",
    "start": "538120",
    "end": "543360"
  },
  {
    "text": "then on top of that letting those tags flow through to your detailed billing report so actually cost allocation reporting is is possible through tagging",
    "start": "543360",
    "end": "550200"
  },
  {
    "text": "so now you can see in a multi-tenant approach with individual Stacks the actual infrastructure cost per tenant by",
    "start": "550200",
    "end": "556920"
  },
  {
    "text": "flowing it all the way through to your bill um so definitely a sort of a pro tip there make sure to tag in this kind",
    "start": "556920",
    "end": "562959"
  },
  {
    "text": "of an approach um it's definitely going to be an important way to track cost and understand efficiency um the next one is what we're",
    "start": "562959",
    "end": "570040"
  },
  {
    "text": "calling I call the bridge right uh so as you can imagine if you have software today um you're going to have to have a",
    "start": "570040",
    "end": "576640"
  },
  {
    "text": "mechanism to get from how it's written now and maybe it sort of fits into that retro model so something that might be a",
    "start": "576640",
    "end": "582079"
  },
  {
    "text": "little more of a modern Cloud architecture right um the bridge is",
    "start": "582079",
    "end": "587200"
  },
  {
    "text": "really a hybrid model uh to sort of get from this retro monolithic you know",
    "start": "587200",
    "end": "592519"
  },
  {
    "text": "maybe three tier um sort of snowflake configuration architecture to much more of a a modern approach um the the trick",
    "start": "592519",
    "end": "600760"
  },
  {
    "text": "here is to think about how you can leverage um uh things like containerization with uh the ec2 container service as a way to um maybe",
    "start": "600760",
    "end": "608800"
  },
  {
    "text": "uh deploy lots of microservices or micro components or even slice up the infrastructure to be more cost-efficient",
    "start": "608800",
    "end": "615079"
  },
  {
    "text": "um the other trick is to think about now that you're moving to this model how do I pull things out like request context",
    "start": "615079",
    "end": "620560"
  },
  {
    "text": "and I'll talk about that when we look at the diagram a bit but now that you're moving to more shared services how do",
    "start": "620560",
    "end": "625920"
  },
  {
    "text": "you think about identifying the requests that are coming through to to be associated with unique tenants so it's a",
    "start": "625920",
    "end": "631680"
  },
  {
    "text": "it's a change in the software design and the application design I'll touch on that in a minute um the reason why you",
    "start": "631680",
    "end": "637320"
  },
  {
    "text": "might consider this um well you know if you have the Retro um you know if you're on if you're on the Retro track but",
    "start": "637320",
    "end": "642639"
  },
  {
    "text": "you're looking to modernize the this hybrid or Bridge model is definitely a great place to start um amazon.com for",
    "start": "642639",
    "end": "649839"
  },
  {
    "text": "example was once a monolithic application um I was uh not I was lucky enough that I I came in after that was",
    "start": "649839",
    "end": "656399"
  },
  {
    "text": "not true uh but uh you know we made that trans ition years ago starting in 1999",
    "start": "656399",
    "end": "661480"
  },
  {
    "text": "to a service oriented architecture it didn't happen overnight you know you had to spend time breaking out that",
    "start": "661480",
    "end": "666800"
  },
  {
    "text": "architecture into components those components became Services those Services then you know stood by",
    "start": "666800",
    "end": "672680"
  },
  {
    "text": "themselves so this is really a transitional model um from um you know a monolithic architecture to a service",
    "start": "672680",
    "end": "680480"
  },
  {
    "text": "oriented architecture or microservices approach um the goal here is to really start enabling refactoring and then",
    "start": "680480",
    "end": "686240"
  },
  {
    "text": "getting some of those shared services as a platform which can then grow to a more pure shared approach over time and it's",
    "start": "686240",
    "end": "694000"
  },
  {
    "text": "really an opportunity to blend monolithic components so where you have pieces that you can't refactor or can't",
    "start": "694000",
    "end": "699279"
  },
  {
    "text": "change they could remain in a um in in more of the Retro architecture unique uh",
    "start": "699279",
    "end": "705240"
  },
  {
    "text": "uh instances per tenant whereas you might have shared services for the things you are",
    "start": "705240",
    "end": "710440"
  },
  {
    "text": "refactoring um some of the challenges um well you know when you're mixing these approaches you have to think about what",
    "start": "710440",
    "end": "716079"
  },
  {
    "text": "is my what's my change management model right I have unique instances or unique components that are per tenant related",
    "start": "716079",
    "end": "723480"
  },
  {
    "text": "um and for those um I'm going to have to um think about uh how do I you know rotate that instance or upgrade that",
    "start": "723480",
    "end": "730560"
  },
  {
    "text": "configuration at a per tenant level whereas others are really more in a pool model so any change I make could affect everyone so you might have different",
    "start": "730560",
    "end": "737040"
  },
  {
    "text": "operational models in parallel at the same time so think about how to split those out how to define redefine your",
    "start": "737040",
    "end": "743040"
  },
  {
    "text": "operational approach um is going to be a key factor in that and then living with sort of this split brain approach of",
    "start": "743040",
    "end": "749199"
  },
  {
    "text": "partially old school partially new school and then how do you marry those two approaches across the organization",
    "start": "749199",
    "end": "754880"
  },
  {
    "text": "um driving this direction uh you're going to um obviously start thinking about much more automation approaches",
    "start": "754880",
    "end": "760680"
  },
  {
    "text": "when you have a shared service pool um so whereas in your maybe retro or",
    "start": "760680",
    "end": "765880"
  },
  {
    "text": "monolithic approach you could think about individual um stack management um",
    "start": "765880",
    "end": "771040"
  },
  {
    "text": "in this case you want to think about more automation you know how are you how are you deploying the code dynamically how are you then automating the",
    "start": "771040",
    "end": "776480"
  },
  {
    "text": "infrastructure to um grow and scale um appropriately for the for the customers",
    "start": "776480",
    "end": "781600"
  },
  {
    "text": "um the other thing is how to think about refactoring uh so when you're changing this architecture from a single tenant",
    "start": "781600",
    "end": "788000"
  },
  {
    "text": "approach you have to think how do I refactor the code to understand uh the distinction between requests coming in",
    "start": "788000",
    "end": "794600"
  },
  {
    "text": "at a per tenant level so historically in an application you may say I go in through the front door um I have a load",
    "start": "794600",
    "end": "801040"
  },
  {
    "text": "balancer the requests coming in are dedicated to that customer that configuration front to back so in the",
    "start": "801040",
    "end": "806760"
  },
  {
    "text": "front I might authenticate and then everything behind it I don't have to worry as much about authentication because I know they've been",
    "start": "806760",
    "end": "812000"
  },
  {
    "text": "authenticated up front I've just passed the request layer upon layer in this particular model now that you have some",
    "start": "812000",
    "end": "817760"
  },
  {
    "text": "shared services you have to pass that identity construct you have to pass the um the actual uh authorization",
    "start": "817760",
    "end": "824800"
  },
  {
    "text": "information um you know tokens you have to then enable Access Control layer by layer so each of the shared services",
    "start": "824800",
    "end": "831199"
  },
  {
    "text": "that sit behind will have the ability to identify authenticate and decide how to",
    "start": "831199",
    "end": "836480"
  },
  {
    "text": "handle those requests so it's starting to change that architect Ure um from a request context",
    "start": "836480",
    "end": "842920"
  },
  {
    "text": "perspective um an example would be more like this green and white and blue can maybe share some components you know the",
    "start": "842920",
    "end": "849000"
  },
  {
    "start": "844000",
    "end": "844000"
  },
  {
    "text": "green customer they have dedicated Legacy components maybe sitting out front",
    "start": "849000",
    "end": "854480"
  },
  {
    "text": "right as you refactor uh you move into more now a pool of",
    "start": "855440",
    "end": "861399"
  },
  {
    "text": "microservices um or multiple Services sitting behind so now uh that customer",
    "start": "861399",
    "end": "866720"
  },
  {
    "text": "coming in might go into the the front end where they have a dedicated set of infrastructure but then move into a",
    "start": "866720",
    "end": "872560"
  },
  {
    "text": "shared service where service one could serve requests from you know any of those particular customer types so it is",
    "start": "872560",
    "end": "878920"
  },
  {
    "text": "a change you can tell where architecturally how you recognize requests how you handle those requests",
    "start": "878920",
    "end": "884360"
  },
  {
    "text": "how you secure data um will have to evolve um from that that more that",
    "start": "884360",
    "end": "889800"
  },
  {
    "text": "dedicated infrastructure to now more of a shared services model um the other thing that's quite common when you start",
    "start": "889800",
    "end": "895440"
  },
  {
    "text": "heading down this path uh is really thinking about how you're going to migrate your data data stores as well um",
    "start": "895440",
    "end": "901199"
  },
  {
    "text": "so as you're moving forward into a shared services model um you're also going to have to think about how do I",
    "start": "901199",
    "end": "906720"
  },
  {
    "text": "access the uh customer information and so you might start with historically a you know monolithic approach of a single",
    "start": "906720",
    "end": "914040"
  },
  {
    "text": "database uh instance per customer but as you evolve you might say well I'm going to move to a shared data store data",
    "start": "914040",
    "end": "919920"
  },
  {
    "text": "model in which case you might have to put a data services layer over the front of that right that recognizes where that",
    "start": "919920",
    "end": "925759"
  },
  {
    "text": "data lives and how to access it in a secure and unique way at a per tenant level um so that is a modification",
    "start": "925759",
    "end": "932160"
  },
  {
    "text": "that's going to start to occur and this data services layer comes in quite often um with much many of our customers",
    "start": "932160",
    "end": "938319"
  },
  {
    "text": "because it gives them the opportunity not only to make those changes at a shared services level but also to",
    "start": "938319",
    "end": "944319"
  },
  {
    "text": "migrate the data between data stores over time right as you're modifying this and moving forward you might move away",
    "start": "944319",
    "end": "949519"
  },
  {
    "text": "from a traditional relational database well uh you're not going to necessarily do that all at once you might uh move",
    "start": "949519",
    "end": "955440"
  },
  {
    "text": "some customers to different databases you might move certain portions of the architecture to say Dynamo DB and no SQL",
    "start": "955440",
    "end": "961519"
  },
  {
    "text": "having a layer of indirection that data services layer gives you the ability to make those changes transparently to the",
    "start": "961519",
    "end": "967240"
  },
  {
    "text": "rest of the application and then move that data over time um so it gives you that layer of indirection and",
    "start": "967240",
    "end": "972639"
  },
  {
    "text": "flexibility um and that migration can take you know it's depending on the size of your architecture and application can",
    "start": "972639",
    "end": "978399"
  },
  {
    "text": "take a while before you're ready to to Really refactor it um but it's not just that first time as you're running",
    "start": "978399",
    "end": "984319"
  },
  {
    "text": "Services uh you then are going to continue to refactor that over time so having that layer of of indirection data",
    "start": "984319",
    "end": "989880"
  },
  {
    "text": "location services will give you that flexibility uh over time to move that data between stores to Archive it",
    "start": "989880",
    "end": "996600"
  },
  {
    "text": "perhaps as it becomes older um and to really manage that data sort of transparently according uh related to",
    "start": "996600",
    "end": "1002440"
  },
  {
    "text": "the application itself now another thing that's uh",
    "start": "1002440",
    "end": "1008319"
  },
  {
    "text": "important to note is as you're getting into this kind of an architecture you're managing multiple layers in the app you're managing multiple Parts um",
    "start": "1008319",
    "end": "1014839"
  },
  {
    "text": "definitely a something to consider here is a more of a management um service over the top so something like opsworks",
    "start": "1014839",
    "end": "1021079"
  },
  {
    "text": "for example which can manage both ECS clusters and also IND individual layers",
    "start": "1021079",
    "end": "1026120"
  },
  {
    "text": "for the architecture itself so you have uh really management framework over the top and whether it's Ops works or or",
    "start": "1026120",
    "end": "1032079"
  },
  {
    "text": "something custom you build thinking about how you're going to build a a management over the top for the multiple service layers um uh to the architecture",
    "start": "1032079",
    "end": "1040480"
  },
  {
    "text": "itself all right the third is the pool so now we're",
    "start": "1040480",
    "end": "1046678"
  },
  {
    "text": "moving uh from a multi-tenant perspec back of removing from a a shared services model or from a from a a",
    "start": "1046679",
    "end": "1052360"
  },
  {
    "text": "dedicated um infrastructure model to a pure shared services model in this case you know all resources can handle all",
    "start": "1052360",
    "end": "1059200"
  },
  {
    "text": "requests from any tenant right so now this is obviously can be a fundamental change in terms of how you design your",
    "start": "1059200",
    "end": "1065160"
  },
  {
    "text": "software um because now the concept is um customer a can send in their requests",
    "start": "1065160",
    "end": "1070360"
  },
  {
    "text": "and it can land on instance two and customer B can send in a request it can also land on instance to and so that",
    "start": "1070360",
    "end": "1076080"
  },
  {
    "text": "code sitting there has to understand the concepts of you know which customer it's coming from what the configuration is",
    "start": "1076080",
    "end": "1082320"
  },
  {
    "text": "for that specific customer if they're distinct um how to handle that request how to find the data for that customer",
    "start": "1082320",
    "end": "1088360"
  },
  {
    "text": "how to then make sure it does access that data securely so you're really elevating this concept of identity um",
    "start": "1088360",
    "end": "1094320"
  },
  {
    "text": "security uh and request context to a first class citizen across the architecture um so it really is a change",
    "start": "1094320",
    "end": "1101360"
  },
  {
    "text": "from how you write the software um and that gives you that flexibility gives you really much more of a uh uh pure",
    "start": "1101360",
    "end": "1108840"
  },
  {
    "text": "sort of cloud first architecture where each component in the infrastructure is effectively replaceable it is more of a",
    "start": "1108840",
    "end": "1114520"
  },
  {
    "text": "share nothing approach um each component can be added or removed as needed based",
    "start": "1114520",
    "end": "1120200"
  },
  {
    "text": "on traffic based on load because each component can handle for its specific service area all of the requests and all",
    "start": "1120200",
    "end": "1126520"
  },
  {
    "text": "of the needs um for that part of the architecture um and so that that really",
    "start": "1126520",
    "end": "1131600"
  },
  {
    "text": "is a big a shift from software design but it gives you that maximum flexibility and efficiency um from a um",
    "start": "1131600",
    "end": "1138120"
  },
  {
    "text": "ads uh use case perspective um now when do any any Greenfield app should really",
    "start": "1138120",
    "end": "1143720"
  },
  {
    "text": "sort of think about this as a start point right as a as a design perspective especially when you think about that app",
    "start": "1143720",
    "end": "1149280"
  },
  {
    "text": "even if it's not necessarily designed to be multi-tenant um initially and you're thinking about it's a per tenant design",
    "start": "1149280",
    "end": "1154960"
  },
  {
    "text": "designing with multi- tendency in mind will give you the opportunity to move forward um uh and do a movia software as",
    "start": "1154960",
    "end": "1161159"
  },
  {
    "text": "a service offering on top of that right so um definitely thinking about that um just like you know when you approach AWS",
    "start": "1161159",
    "end": "1167280"
  },
  {
    "text": "thinking about you know scale is always important thinking about how you're going to handle uh multiple versions of your app multiple customer types over",
    "start": "1167280",
    "end": "1174080"
  },
  {
    "text": "time and thinking about designing around a multi-tenant architecture uh day one is going to going to actually give you",
    "start": "1174080",
    "end": "1179280"
  },
  {
    "text": "that flexibility you might need down the road um when you have to then uh grow that platform um across a broader",
    "start": "1179280",
    "end": "1186320"
  },
  {
    "text": "customer base um it's definitely uh this is definitely embracing all the concepts",
    "start": "1186320",
    "end": "1191520"
  },
  {
    "text": "of microservices service oriented architecture that you've probably followed and read about um and it really",
    "start": "1191520",
    "end": "1197440"
  },
  {
    "text": "it Embraces a strong concept of service ownership um so when you think about this approach as a pool what you're",
    "start": "1197440",
    "end": "1204960"
  },
  {
    "text": "looking at is an architecture that is comprised of multiple Individual Services Each of which has to be",
    "start": "1204960",
    "end": "1210400"
  },
  {
    "text": "entirely Standalone and independent and operate on its own um it may not be anything by itself it may have to work",
    "start": "1210400",
    "end": "1216919"
  },
  {
    "text": "in conjunction with other services to have a real end result for the customer but the service teams that sit behind",
    "start": "1216919",
    "end": "1223120"
  },
  {
    "text": "them have to think about um how am I going to scale that service independent of other services in the architecture",
    "start": "1223120",
    "end": "1228360"
  },
  {
    "text": "how going to secure that service independent of other services in the architecture how am I going to protect my data sources independent of other you",
    "start": "1228360",
    "end": "1235360"
  },
  {
    "text": "know services in the architecture so it really it breaks the software down into a uh individual service um model which",
    "start": "1235360",
    "end": "1242400"
  },
  {
    "text": "allows you to compose those Services into what you eventually deliver um to your customers um so that's really a",
    "start": "1242400",
    "end": "1249360"
  },
  {
    "text": "sort of a change from a not just a software design perspective but also a team ownership perspective um this is",
    "start": "1249360",
    "end": "1256159"
  },
  {
    "text": "actually something we do quite often inside of Amazon there's a term floats around occasionally a two Pizza team um",
    "start": "1256159",
    "end": "1263000"
  },
  {
    "text": "you know if it's too big if your team's too big if you can't feed it with two pizzas at lunch yeah um it's not exactly",
    "start": "1263000",
    "end": "1269320"
  },
  {
    "text": "a rule anymore unless we have really big pizzas um but uh but uh fundamentally the idea is you entirely own that",
    "start": "1269320",
    "end": "1276799"
  },
  {
    "text": "service as a service team you own um Operational Support you own you know on call rotations you own making sure it's",
    "start": "1276799",
    "end": "1283159"
  },
  {
    "text": "available at all times you own making sure it's secured and protected from uh attack whether even is your own internal",
    "start": "1283159",
    "end": "1289799"
  },
  {
    "text": "Downstream customers we making accidental calls um to to too high volume so really protecting it and",
    "start": "1289799",
    "end": "1295520"
  },
  {
    "text": "having that service boundary being very explicit um so big shift there design-wise um some of the challenges",
    "start": "1295520",
    "end": "1301000"
  },
  {
    "text": "here that we see uh folks go through are uh number one is factoring out all of",
    "start": "1301000",
    "end": "1306120"
  },
  {
    "text": "these concepts of um request context State you know data locality um all of",
    "start": "1306120",
    "end": "1312400"
  },
  {
    "text": "these things become uh either uh store uh sort of accessed metadata stores uh",
    "start": "1312400",
    "end": "1318200"
  },
  {
    "text": "service or they end up um being wrapped by service layers entirely so uh request",
    "start": "1318200",
    "end": "1323279"
  },
  {
    "text": "context is something that then flows layer to layer so if you have state you know the second request in a in a session could go to a completely",
    "start": "1323279",
    "end": "1329760"
  },
  {
    "text": "different set of infrastructure a completely different uh server or an instance so it has to have a mechanism",
    "start": "1329760",
    "end": "1334799"
  },
  {
    "text": "either to flow that context back and forth or look it up um through a state Management Service like an elastic cach",
    "start": "1334799",
    "end": "1341159"
  },
  {
    "text": "or or even a Dynamo DB for example um the other thing is uh and that's just about the request also the identity so",
    "start": "1341159",
    "end": "1348600"
  },
  {
    "text": "the identity of the the requester um needs to be flowed through each layer so you can ensure that it's secured",
    "start": "1348600",
    "end": "1354840"
  },
  {
    "text": "properly so when that uh data request comes into service three or service four",
    "start": "1354840",
    "end": "1360000"
  },
  {
    "text": "behind the scenes um it can also check to ensure that not only is the token valid that the user really is registered",
    "start": "1360000",
    "end": "1366120"
  },
  {
    "text": "but also they have access to perform that function or access that data so that concept of identity flows all the",
    "start": "1366120",
    "end": "1372080"
  },
  {
    "text": "way through the architecture um and then of course the the other challenge with this is because it's a true pool um as",
    "start": "1372080",
    "end": "1378840"
  },
  {
    "text": "you're deploying changes as you're updating it it's not you don't have the ability to isolate the impact right it's",
    "start": "1378840",
    "end": "1385159"
  },
  {
    "text": "any resource can handle any requests therefore any change to any resource could impact any requests so you do have",
    "start": "1385159",
    "end": "1391200"
  },
  {
    "text": "to think about um how you're going to roll that code out in a way that allows it to either be backwards compatible um",
    "start": "1391200",
    "end": "1397760"
  },
  {
    "text": "or or entirely um uh uh you know done in a way that does not impact the user experience because those deployments in",
    "start": "1397760",
    "end": "1404279"
  },
  {
    "text": "the pool model will take a little more time as your resource pool grows you can't just deploy them all at once and",
    "start": "1404279",
    "end": "1409880"
  },
  {
    "text": "you wouldn't want to right so you're going to have to think about having running side by side what people call say blue green deployments um or even",
    "start": "1409880",
    "end": "1416760"
  },
  {
    "text": "just rolling out changes um with things like code deployment so taking a look at that you",
    "start": "1416760",
    "end": "1422480"
  },
  {
    "text": "see now it's you know an entry point that's common across the board um you know perhaps an entry layer uh for the",
    "start": "1422480",
    "end": "1428480"
  },
  {
    "text": "web tier that's handling those requests passing it to each individual service so any request for data that might reside",
    "start": "1428480",
    "end": "1435360"
  },
  {
    "text": "in service one you know for any of those individual custom customers will uh you know always go to that service endpoint",
    "start": "1435360",
    "end": "1441919"
  },
  {
    "text": "um and the service itself will understand how to handle looking up data for um you know Green customers blue",
    "start": "1441919",
    "end": "1448120"
  },
  {
    "text": "customers or or the white customers right um the other thing you'll note architecturally is that the the access",
    "start": "1448120",
    "end": "1454600"
  },
  {
    "text": "tier is then entirely wrapped by a service front end so the the data sources themselves are not direct",
    "start": "1454600",
    "end": "1460480"
  },
  {
    "text": "accessible um they're actually only accessible through the service layer so as you make changes to your your uh",
    "start": "1460480",
    "end": "1466039"
  },
  {
    "text": "design and your data schema perhaps as you add or remove components you have the ability to isolate that impact um by",
    "start": "1466039",
    "end": "1472360"
  },
  {
    "text": "wrapping it around a service layer that's really requesting that data so adding new components can be done or adding new data can be done in a way",
    "start": "1472360",
    "end": "1479120"
  },
  {
    "text": "that won't necessarily be backwards compatible or break Downstream clients because you have the an actual layer",
    "start": "1479120",
    "end": "1484679"
  },
  {
    "text": "over the top that's protecting um the downstream components that's an important uh uh component for the for",
    "start": "1484679",
    "end": "1491000"
  },
  {
    "text": "the pool model the other one that we're seeing more often it's actually a little bit",
    "start": "1491000",
    "end": "1496039"
  },
  {
    "text": "newer is the serverless um which is pretty exciting the idea of not having to manage servers anymore I know I was",
    "start": "1496039",
    "end": "1502080"
  },
  {
    "text": "super excited when I found out that you know uh ec2 came out in 2006 um but I still had to then log into the box and",
    "start": "1502080",
    "end": "1508120"
  },
  {
    "text": "do Administration and you know change configurations and I was like ah you know I wasn't too excited about doing that um I moved that job it made it",
    "start": "1508120",
    "end": "1515159"
  },
  {
    "text": "easier to do that job but I still had to administer each of those servers the server list is saying let's get out of",
    "start": "1515159",
    "end": "1520880"
  },
  {
    "text": "the business of managing servers at all let moved to an entirely event-driven um asynchronous message processing type",
    "start": "1520880",
    "end": "1527240"
  },
  {
    "text": "model um now now the it's obviously going to depend on the customer experience you're going for and the user",
    "start": "1527240",
    "end": "1532600"
  },
  {
    "text": "experience that you need um but ultimately this is becoming much more prevalent even in what some might",
    "start": "1532600",
    "end": "1537919"
  },
  {
    "text": "consider to be synchronous interactions um to leverage a a completely serverless approach where you're all you're doing",
    "start": "1537919",
    "end": "1544520"
  },
  {
    "text": "is instead of running a fleet is invoking um you know bits of code through something like Lambda right um",
    "start": "1544520",
    "end": "1551600"
  },
  {
    "text": "now the the goal here is then to leverage obviously all the scalable ads managed Services as opposed to manage",
    "start": "1551600",
    "end": "1557480"
  },
  {
    "text": "servers yourself so leveraging things like Dynamo or even RDS S3 um as your",
    "start": "1557480",
    "end": "1563440"
  },
  {
    "text": "data stores but then having a invocation layer like Lambda where you're not necessarily doing the the management of",
    "start": "1563440",
    "end": "1569520"
  },
  {
    "text": "the processing and and making sure it's scaled properly for you that's taken care of",
    "start": "1569520",
    "end": "1575240"
  },
  {
    "text": "dynamically now this is obviously great for a lot of different scenarios um and uh iot is an example Internet of Things",
    "start": "1575240",
    "end": "1583120"
  },
  {
    "text": "batch or event processing um mobile apps we see this quite often even in web apps where they have more of an async",
    "start": "1583120",
    "end": "1589440"
  },
  {
    "text": "processing model where you can make a request um through the the interface and then simply go back on a polling",
    "start": "1589440",
    "end": "1596080"
  },
  {
    "text": "mechanism to check for updates um so it has very much a synchronous interaction kind of a feel I made a change I",
    "start": "1596080",
    "end": "1602039"
  },
  {
    "text": "uploaded something and then I just my app goes back and checks for updates on it um so it really is much more of a uh",
    "start": "1602039",
    "end": "1609039"
  },
  {
    "text": "message-based or asynchronous model but does uh give you that interaction that feels more synchronous to the customer",
    "start": "1609039",
    "end": "1615559"
  },
  {
    "text": "right um so it fits very well with as synchronous oriented um interaction models but could also be adopted using",
    "start": "1615559",
    "end": "1622440"
  },
  {
    "text": "um you know uh uh uh Ajax jQuery components in a web interface or in a",
    "start": "1622440",
    "end": "1627520"
  },
  {
    "text": "mobile app pulling back and and requesting updates um from the the servers um now the challenge here is",
    "start": "1627520",
    "end": "1634320"
  },
  {
    "text": "actually you're moving to a completely transient state right now you don't have a server to log into and check what",
    "start": "1634320",
    "end": "1639640"
  },
  {
    "text": "happened right so you have to spend a lot more time thinking about how do I um log activity in the code itself how do I",
    "start": "1639640",
    "end": "1646000"
  },
  {
    "text": "then make sure that um all the actions that are taken by my uh bits of code that are being run for you know only",
    "start": "1646000",
    "end": "1652440"
  },
  {
    "text": "microseconds are tracked in a way that allows me to see the state of the system and understand what's occurring so now",
    "start": "1652440",
    "end": "1658559"
  },
  {
    "text": "if I wanted a a dashboard over the top of this saying my current state of play I'd be able to look and see whether my",
    "start": "1658559",
    "end": "1664440"
  },
  {
    "text": "you know Lambda functions were registered and available um but if none of them are running I'm not going to get you know a green you know button that",
    "start": "1664440",
    "end": "1670880"
  },
  {
    "text": "says it's you know up and available it's going to have to get invoked and see that happen so you're going to then think about more about um processing the",
    "start": "1670880",
    "end": "1676840"
  },
  {
    "text": "outputs of the console um from Lambda or outputs of logs um that you then write to say S3 other locations so it does",
    "start": "1676840",
    "end": "1683640"
  },
  {
    "text": "change the nature of analyzing the current state um because the transient nature of the architecture um and also",
    "start": "1683640",
    "end": "1691000"
  },
  {
    "text": "uh it it changes the nature of a sort of U you know request processing itself right um historically like you look at",
    "start": "1691000",
    "end": "1698120"
  },
  {
    "text": "the pool model you're passing in a request context there parameters being passed in that are being held in memory",
    "start": "1698120",
    "end": "1703360"
  },
  {
    "text": "as as a request is occurring in this you then are now embedding that identity that request cont context um into the",
    "start": "1703360",
    "end": "1709640"
  },
  {
    "text": "message itself um so that the next component the next Lambda function being invoked will know how to process that",
    "start": "1709640",
    "end": "1715760"
  },
  {
    "text": "request at a per tenant um and a secure way um so the server server list could look",
    "start": "1715760",
    "end": "1723080"
  },
  {
    "start": "1721000",
    "end": "1721000"
  },
  {
    "text": "more like this where now you have a variety of different types of interactions whether it be mobile devices you know uh um printers as the",
    "start": "1723080",
    "end": "1730159"
  },
  {
    "text": "example there um you know it could be uh uh could be you know arduinos um floating around um and the ultimately",
    "start": "1730159",
    "end": "1737320"
  },
  {
    "text": "the the the goal here is you have multiple ways to feed that in whether it be through the API Gateway which gives you a um an actual hosted endpoint you",
    "start": "1737320",
    "end": "1745120"
  },
  {
    "text": "can make a request to um but then would invoke a Lambda function behind the scenes or something like uh you know",
    "start": "1745120",
    "end": "1750960"
  },
  {
    "text": "Kinesis um or Kinesis streams um as it's now called um which is uh would invoke",
    "start": "1750960",
    "end": "1757360"
  },
  {
    "text": "Lambda through a hook um ultimately you could also that could also be S3 that's being invoking a Lambda function upon",
    "start": "1757360",
    "end": "1763399"
  },
  {
    "text": "upload of an object right so in this scenario you're really uh delegating a lot of that work to it invocation engine",
    "start": "1763399",
    "end": "1769399"
  },
  {
    "text": "um that takes care of it and getting out of managing the the server entirely um the the the thing is it's often the case",
    "start": "1769399",
    "end": "1776480"
  },
  {
    "text": "that you can't really get rid of everything that way so I do have the little elastic uh beant stock up there for small pieces so again you're",
    "start": "1776480",
    "end": "1782399"
  },
  {
    "text": "decoupling you may not be able to do everything in this particular model so but it certainly is an interesting approach um the data stores themselves",
    "start": "1782399",
    "end": "1789360"
  },
  {
    "text": "um so something like State Management with some workflow or Dynamo DB could sit behind Lambda can obviously interact",
    "start": "1789360",
    "end": "1795440"
  },
  {
    "text": "with those um leveraging IM am for access control and things like",
    "start": "1795440",
    "end": "1800760"
  },
  {
    "text": "that all right so now we've talked about the patterns let's talk about some of the challenges and how you address",
    "start": "1800760",
    "end": "1806960"
  },
  {
    "text": "them the first is really about request routing and processing how do I think about routing requests in this kind of",
    "start": "1807039",
    "end": "1812559"
  },
  {
    "start": "1808000",
    "end": "1808000"
  },
  {
    "text": "an architecture when it's truly multitenant um how do I make sure there sufficient information in that request to process uh that request in a um a",
    "start": "1812559",
    "end": "1820559"
  },
  {
    "text": "reliable way it's also secure and is is applicable to the specific tenant who's made it um and then of course how do I",
    "start": "1820559",
    "end": "1827960"
  },
  {
    "text": "you know uh scale that environment consistent with volume how do I think about you know um growing out that footprint relative to the the various",
    "start": "1827960",
    "end": "1834519"
  },
  {
    "text": "pieces um so we take the Retro example um this is fairly straightforward and",
    "start": "1834519",
    "end": "1839799"
  },
  {
    "text": "this is what you know I think anyone using adbs today would would recognize as a pretty straightforward approach right the green uh customer sends in a",
    "start": "1839799",
    "end": "1846480"
  },
  {
    "text": "message um and of course he's using Postal Service to send it in so it's a little envelope um so uh and that",
    "start": "1846480",
    "end": "1853480"
  },
  {
    "text": "message just flows straight through the stack into RDS and then is consumed right so the route routing there is",
    "start": "1853480",
    "end": "1859039"
  },
  {
    "text": "fairly straightforward it's it's endpoint based you're saying I'm going to hand that request to the next layer in my architecture and then because it's",
    "start": "1859039",
    "end": "1865840"
  },
  {
    "text": "distinct you know a blue customer comes in they go down a completely distinct path um for their particular messaging",
    "start": "1865840",
    "end": "1871760"
  },
  {
    "text": "now let's compare that with say something like um you know the bridge uh in the Bridge Approach again you have a",
    "start": "1871760",
    "end": "1878440"
  },
  {
    "text": "legacy layer where a customer might log in for authentication to start a request that's you know fits in with their their",
    "start": "1878440",
    "end": "1884679"
  },
  {
    "text": "old um architectural approach to monolithic app but there's going to have to be a change in order to process that",
    "start": "1884679",
    "end": "1889960"
  },
  {
    "text": "request properly all the way through to the data store so as the request comes into the Legacy tier um it's then",
    "start": "1889960",
    "end": "1896720"
  },
  {
    "text": "handled as any request has been historically but now you have to add to that it actually has to add the identity",
    "start": "1896720",
    "end": "1902919"
  },
  {
    "text": "um of the actual customer the tenant coming in so that at the service tier service one that's now been refactored",
    "start": "1902919",
    "end": "1908600"
  },
  {
    "text": "to be a shared infrastructure service one can make the choice of saying oh this is you know my green customers",
    "start": "1908600",
    "end": "1914639"
  },
  {
    "text": "here's here's how I handle that type of request which might be entirely consistent with every other customer but",
    "start": "1914639",
    "end": "1920919"
  },
  {
    "text": "it also might be slightly different for them so you have that option architecturally to make that change or make that choice um in your shared",
    "start": "1920919",
    "end": "1927679"
  },
  {
    "text": "service tier now that service one can then of course write that data down to the data services layer again as I",
    "start": "1927679",
    "end": "1934720"
  },
  {
    "text": "mentioned before that data services layer has the option of um migrating over time and making changes so it would",
    "start": "1934720",
    "end": "1940559"
  },
  {
    "text": "also need that identity to know where um to put that content where to store it from an architectural perspective which",
    "start": "1940559",
    "end": "1946960"
  },
  {
    "text": "database for example which table in a shared schema um maybe some customers uh you know might go to",
    "start": "1946960",
    "end": "1952760"
  },
  {
    "text": "different data stores for red shift or S3 right in this case it turns out that",
    "start": "1952760",
    "end": "1958200"
  },
  {
    "text": "that one's going to go to S3 and the messages dropped off over there so that idea of identity and context starts to",
    "start": "1958200",
    "end": "1965200"
  },
  {
    "text": "become a first class Citizen architecturally and that's how the software changes to support this",
    "start": "1965200",
    "end": "1970279"
  },
  {
    "text": "multi-tenant architectural approach um so I'll just zip this up",
    "start": "1970279",
    "end": "1975880"
  },
  {
    "start": "1974000",
    "end": "1974000"
  },
  {
    "text": "here this is the ey chart um very important for people that are going to watch this again offline later I'm not going to read every bullet um because",
    "start": "1975880",
    "end": "1982200"
  },
  {
    "text": "then we'd have to extend the session by another hour and the next speaker is going to get mad can't do it um so uh",
    "start": "1982200",
    "end": "1987559"
  },
  {
    "text": "but I think that the fundamental things to look at when you're comparing these various architectures is you know in the",
    "start": "1987559",
    "end": "1992720"
  },
  {
    "text": "Retro because it's isolated um Stacks it's a straightforward process to sort of handle those um through the layers",
    "start": "1992720",
    "end": "1998639"
  },
  {
    "text": "that are dedicated or the resources that are dedicated to that tenant whereas if you get to once you start getting to",
    "start": "1998639",
    "end": "2004159"
  },
  {
    "text": "Bridge and pool and serverless what's happening is that request context is",
    "start": "2004159",
    "end": "2009240"
  },
  {
    "text": "then being elevated um and it flows through the entire architecture layer upon layer um shared resources you know",
    "start": "2009240",
    "end": "2015679"
  },
  {
    "text": "uh can be used in the bridge they're going to have to understand request context whereas dedicated in the bridge may not have to know it quite yet so it",
    "start": "2015679",
    "end": "2021880"
  },
  {
    "text": "allows you that opportunity to refactor over time but once you get to pool and serverless uh fundamentally uh the",
    "start": "2021880",
    "end": "2027840"
  },
  {
    "text": "request context is a first class citizen the identity of the user the authentication information um that they",
    "start": "2027840",
    "end": "2033639"
  },
  {
    "text": "have been authenticated and their token for Access is valid needs to flow through layer upon layer um uh you know",
    "start": "2033639",
    "end": "2040440"
  },
  {
    "text": "as you can see uh in terms of the processing that idea of data stores being wrapped that data services layer",
    "start": "2040440",
    "end": "2046760"
  },
  {
    "text": "becomes more important um as you get moved closer and closer to a pool model because now you have to think about how",
    "start": "2046760",
    "end": "2052398"
  },
  {
    "text": "do I route even storage requests um for the for the information um how do I store that information how do I move it",
    "start": "2052399",
    "end": "2058320"
  },
  {
    "text": "between data stores over time now change management is another um",
    "start": "2058320",
    "end": "2064520"
  },
  {
    "text": "big area uh to consider uh from this particular uh from this architectural perspective how do you think about rolling out say new versions of the",
    "start": "2064520",
    "end": "2071079"
  },
  {
    "text": "architecture uh how do you think about um rolling out multiple versions side by side when you have a multi-tenant approach you have to think about do all",
    "start": "2071079",
    "end": "2077800"
  },
  {
    "text": "my tenants move forward from V1 to V2 or do I have this o option of moving some forward um to V2 uh while leaving others",
    "start": "2077800",
    "end": "2086919"
  },
  {
    "text": "back on V1 or V3 um and then of course uh as you get into a multitenant",
    "start": "2086919",
    "end": "2092118"
  },
  {
    "text": "architecture the scale starts to change right now you're hosting thousands of customers with thousands of users users",
    "start": "2092119",
    "end": "2098440"
  },
  {
    "text": "therefore millions of users so you have to think about rolling out into a pool of resources and actually rolling",
    "start": "2098440",
    "end": "2103480"
  },
  {
    "text": "deployments you know rolling deployments are going to be a much more common thing the flipping a switch from A to B is",
    "start": "2103480",
    "end": "2110480"
  },
  {
    "text": "much less common in a in a large multi-tenant platform right so how do I think about rolling that code out in a",
    "start": "2110480",
    "end": "2116000"
  },
  {
    "text": "in a way that allows my um architecture to evolve um without actually impacting",
    "start": "2116000",
    "end": "2121800"
  },
  {
    "text": "um people that are coming in with an expectation of an older service um running so um I mean the Retro is the",
    "start": "2121800",
    "end": "2128680"
  },
  {
    "text": "most straightforward so we'll talk about that specific approach in the Retro it's really a hey let's spin up a new route a",
    "start": "2128680",
    "end": "2135119"
  },
  {
    "text": "new set of services and it set of uh infrastructure uh let's go ahead and spin up new auto scaling groups um and",
    "start": "2135119",
    "end": "2141119"
  },
  {
    "text": "then set those up test them make sure they're ready to go and then when I'm ready I just cut over my load balancing",
    "start": "2141119",
    "end": "2146359"
  },
  {
    "text": "over to that new stack um and I'm ready to go I've completely replaced the infrastructure and because in this",
    "start": "2146359",
    "end": "2152520"
  },
  {
    "text": "approach to multi-tenancy it's a dedicated set of resources per customer you can very tightly control how you",
    "start": "2152520",
    "end": "2158880"
  },
  {
    "text": "roll individual customers forward right so you know you can go customer by customer if you want to you can do a",
    "start": "2158880",
    "end": "2164839"
  },
  {
    "text": "large scale deployment if you want to whatever makes sense but you have a lot of options from a straight cutover perspective um from a change management",
    "start": "2164839",
    "end": "2172040"
  },
  {
    "text": "approach when you're done when it's ready to go you decide it works you can just drop the previous resources and",
    "start": "2172040",
    "end": "2178200"
  },
  {
    "text": "you're you're then you're golden so now you have just new approach with retro now when you think about the pool",
    "start": "2178200",
    "end": "2183800"
  },
  {
    "start": "2182000",
    "end": "2182000"
  },
  {
    "text": "architecture it becomes slightly different right now you have a shared service in infrastructure so you're not going to swap service one V1 with",
    "start": "2183800",
    "end": "2191280"
  },
  {
    "text": "service 1 V2 you know uh uh just willy-nilly because you have a whole",
    "start": "2191280",
    "end": "2196319"
  },
  {
    "text": "bunch of people Downstream that are relying on it you wouldn't want to make that kind of a big architectural change snapping a finger necessarily because",
    "start": "2196319",
    "end": "2202680"
  },
  {
    "text": "you want to have reliability you want to have availability through the entire process right um and because it's not",
    "start": "2202680",
    "end": "2208000"
  },
  {
    "text": "just for one uh particular tenant it's for all of your tenants you have to think about how do I roll this out in a",
    "start": "2208000",
    "end": "2213160"
  },
  {
    "text": "way that is going to not impact my customers so in that case using something like code deploy um as an",
    "start": "2213160",
    "end": "2219880"
  },
  {
    "text": "example um there's lots of other uh application life cycle management uh tools out there um you you see what can",
    "start": "2219880",
    "end": "2226119"
  },
  {
    "text": "happen here is you're going to roll out these changes in a in a rolling update fashion um so now rolling updates uh",
    "start": "2226119",
    "end": "2231560"
  },
  {
    "text": "come with an interesting um architectural Challenge and that now the up upgrade is partially done so now I",
    "start": "2231560",
    "end": "2237839"
  },
  {
    "text": "have some blue containers that are running you know V3 and I've got some green ones that are running V2 so from a",
    "start": "2237839",
    "end": "2243359"
  },
  {
    "text": "software perspective there's a couple approaches to this either you bake version um into the API itself and then upgrade",
    "start": "2243359",
    "end": "2250640"
  },
  {
    "text": "the entire backend and then upgrade the clients of it by changing version information how they call the service um",
    "start": "2250640",
    "end": "2256400"
  },
  {
    "text": "that's fairly uh fairly uh sort of if you will it's not very fine grain it's very much a a big lever you're flipping",
    "start": "2256400",
    "end": "2263119"
  },
  {
    "text": "um from a code perspective um but is certainly a reasonable approach it allows you to sort of have more of that",
    "start": "2263119",
    "end": "2268359"
  },
  {
    "text": "straight cut over model um but it does come with a disadvantage of uh you then",
    "start": "2268359",
    "end": "2273720"
  },
  {
    "text": "rolling back can be challenging if you're swapping completely new version you got to roll back um uh quickly in this case uh I would say that what often",
    "start": "2273720",
    "end": "2281200"
  },
  {
    "text": "we've seen is is actually being able to sit side by side um building code that understands how to handle V2 and V3",
    "start": "2281200",
    "end": "2287240"
  },
  {
    "text": "requests and then essentially uh aging out if you will older versions of that",
    "start": "2287240",
    "end": "2292440"
  },
  {
    "text": "service over time uh as the architecture moves forward now this is a very controlled model where your Downstream",
    "start": "2292440",
    "end": "2298440"
  },
  {
    "text": "consumer is really another component in the architecture so you have the ability to make that switch whenever you feel",
    "start": "2298440",
    "end": "2304359"
  },
  {
    "text": "like it um If This Were the end point that your customers are direct interacting with you may have to then think about a much longer window during",
    "start": "2304359",
    "end": "2311359"
  },
  {
    "text": "which you actually run things side by side in which case versioning might be uh a fundamentally better approach if",
    "start": "2311359",
    "end": "2317240"
  },
  {
    "text": "it's a big enough change um now as this evolves you know the rolling deployment",
    "start": "2317240",
    "end": "2322319"
  },
  {
    "text": "more of the components more of the containers uh get updated you're now you know almost to V3 and then now it's",
    "start": "2322319",
    "end": "2328040"
  },
  {
    "text": "entirely V3 um in service one the other thing to note here is that I've treated",
    "start": "2328040",
    "end": "2334119"
  },
  {
    "text": "service one completely Standalone I might actually have lots of changes in that architecture um that I'm making but",
    "start": "2334119",
    "end": "2340640"
  },
  {
    "text": "I can entirely deploy service one as a distinct component it's treated as its own service and it should always operate",
    "start": "2340640",
    "end": "2345960"
  },
  {
    "text": "that way so that means that I'm not going to assume anything about how service 2 operates and how I change",
    "start": "2345960",
    "end": "2352359"
  },
  {
    "text": "service one they're distinct um components they're distinct services in the architecture so that means that my",
    "start": "2352359",
    "end": "2359200"
  },
  {
    "text": "service one changes are not going to assume anything about service 2 itself which gives me Independence um for how I",
    "start": "2359200",
    "end": "2365720"
  },
  {
    "text": "deploy and roll out those changes I don't have to make those assumptions and should not make assumptions across those",
    "start": "2365720",
    "end": "2372839"
  },
  {
    "text": "boundaries in the change management space um as I mentioned retro um you got",
    "start": "2372839",
    "end": "2377880"
  },
  {
    "start": "2373000",
    "end": "2373000"
  },
  {
    "text": "the each stack stands alone um I put the sad face there um well mainly because",
    "start": "2377880",
    "end": "2383480"
  },
  {
    "text": "that also means each stack stands alone like you're going to have to then manage all of them potentially individually uh",
    "start": "2383480",
    "end": "2389240"
  },
  {
    "text": "but even in in broadscale deployments you're making big changes across a disperate fleet um and possibly having",
    "start": "2389240",
    "end": "2395599"
  },
  {
    "text": "to worry about how config change vary between environments when you're rolling out different versions it's a little",
    "start": "2395599",
    "end": "2400720"
  },
  {
    "text": "more challenging um kind of goes back to that urban sprawl um challenge we saw earlier um now it does give you some",
    "start": "2400720",
    "end": "2406240"
  },
  {
    "text": "benefits of the idea of straight cut over from you know V1 to V next um and",
    "start": "2406240",
    "end": "2411480"
  },
  {
    "text": "of course that's a good opportunity um uh Bridge as you can see it's in pool",
    "start": "2411480",
    "end": "2417079"
  },
  {
    "text": "you start to see where now these are shared services you moving to a rolling update model you're going to start",
    "start": "2417079",
    "end": "2422200"
  },
  {
    "text": "moving to changing components of the architecture independently rolling out code changes um",
    "start": "2422200",
    "end": "2428040"
  },
  {
    "text": "uh uh in small increments and rolling them out over a period of time as opposed to all at once um so there's",
    "start": "2428040",
    "end": "2434079"
  },
  {
    "text": "definitely going to be some different uh approaches to how you write that code and manage that service code so that it",
    "start": "2434079",
    "end": "2439359"
  },
  {
    "text": "actually will live side by side with itself um if you will um in the server this architecture actually interestingly",
    "start": "2439359",
    "end": "2445960"
  },
  {
    "text": "enough you have to think about um this problem as well and so making say an update to a Lambda function um could",
    "start": "2445960",
    "end": "2452640"
  },
  {
    "text": "actually happen immediately it's almost much more like a cut over so you do have to think about that um now there's some caching involved there so how quickly",
    "start": "2452640",
    "end": "2459040"
  },
  {
    "text": "will that um will that uh change occur across the fleet is not necessarily entirely terministic so that means you",
    "start": "2459040",
    "end": "2466200"
  },
  {
    "text": "have to think about how would I let those if version one and version two of a Lambda function could be invoked at",
    "start": "2466200",
    "end": "2471240"
  },
  {
    "text": "the same time What would the impact be architectur you have to think about those being running in parallel but it",
    "start": "2471240",
    "end": "2476560"
  },
  {
    "text": "is fairly much more of a straight cutover model and then API Gateway um is another component that allows you to cut",
    "start": "2476560",
    "end": "2482920"
  },
  {
    "text": "uh uh make that cut over more distinct if you want with API Gateway you can point at Lambda function one and then",
    "start": "2482920",
    "end": "2488560"
  },
  {
    "text": "when you decided to cut over you point the resource of API Gateway to Lambda function two right so you have a much",
    "start": "2488560",
    "end": "2493599"
  },
  {
    "text": "more straightforward cut over model um in the in the serverless approach um but definitely still keeping in mind that",
    "start": "2493599",
    "end": "2500119"
  },
  {
    "text": "the impacts of of how two versions of the app might run in parallel in a in an invocation model is important to think",
    "start": "2500119",
    "end": "2507760"
  },
  {
    "text": "about all right next up data security and isolation uh so data security and",
    "start": "2507760",
    "end": "2513880"
  },
  {
    "text": "isolation is is obviously important um from your perspective you want to protect protect your data um uh appropriately at a perent level but it's",
    "start": "2513880",
    "end": "2520359"
  },
  {
    "text": "also a conversation that many of your customers will want to have with you um this is a common occurrence where we'll",
    "start": "2520359",
    "end": "2526520"
  },
  {
    "text": "I'll be working with a SAS partner and what they'll say is I want to understand how do I present information about how",
    "start": "2526520",
    "end": "2532400"
  },
  {
    "text": "my multi-tenant architecture protects customer data uniquely so there's no cross-contamination information that my",
    "start": "2532400",
    "end": "2539079"
  },
  {
    "text": "customers are confident their data is distinct and managed distinctly um from other um customer or tenant data so",
    "start": "2539079",
    "end": "2545319"
  },
  {
    "text": "that's an important um Factor not just for design-wise but also think about how you're going to present that um to your",
    "start": "2545319",
    "end": "2550520"
  },
  {
    "text": "customers of the platform um and of course you know you want to make sure that data is isolated across the board appropriately but not necessarily in the",
    "start": "2550520",
    "end": "2557480"
  },
  {
    "text": "model of everyone gets their own database but rather how do I use the tools inside of AWS um to secure uh that",
    "start": "2557480",
    "end": "2563720"
  },
  {
    "text": "data in a shared storage platform yet still with uniqueness at a per tenant level so if we look at the Retro um in",
    "start": "2563720",
    "end": "2571760"
  },
  {
    "start": "2570000",
    "end": "2570000"
  },
  {
    "text": "the Retro architecture uh you can see the message is coming in and I'm just going to skip right to the app tier because I feel like it I didn't want to",
    "start": "2571760",
    "end": "2578160"
  },
  {
    "text": "secure every layer and I didn't have enough animation skills to do it all all at the same time so bear with me um",
    "start": "2578160",
    "end": "2583480"
  },
  {
    "text": "PowerPoint 2011 I hear um and what I can do is actually use a key management service and request a customer specific",
    "start": "2583480",
    "end": "2590160"
  },
  {
    "text": "key um for that particular um uh tenant right so each tenant could have their",
    "start": "2590160",
    "end": "2596000"
  },
  {
    "text": "own set of encryption Keys um and then I can actually apply that now that could be an EBS volume that's pre-encrypted um",
    "start": "2596000",
    "end": "2601800"
  },
  {
    "text": "with that customer key or it could be I'm actually encrypting the data on the fly in the application tier um but I can",
    "start": "2601800",
    "end": "2607800"
  },
  {
    "text": "store the the customer or tenant specific cryptography material in KMS that allows me to then lock that data",
    "start": "2607800",
    "end": "2613760"
  },
  {
    "text": "and store it there um on the disc the same thing can be done um with the um",
    "start": "2613760",
    "end": "2619680"
  },
  {
    "text": "RDS layers so KMS is a a generic um uh Key Management infrastructure that supports things like S3 EBS as well as",
    "start": "2619680",
    "end": "2627160"
  },
  {
    "text": "uh RDS so you have the option here of doing that in cryptography at the right layer based on the customer specific",
    "start": "2627160",
    "end": "2633680"
  },
  {
    "text": "Keys now what's interesting about this I've already jumped to mult tenant approach here from a uh encryption",
    "start": "2633680",
    "end": "2640200"
  },
  {
    "text": "perspective um because ultimately as you change this your customers are going to want to know that you have unique",
    "start": "2640200",
    "end": "2646079"
  },
  {
    "text": "encryption keys that you're managing and rotating um for their data distinct from all the other tenants so the beauty here",
    "start": "2646079",
    "end": "2652160"
  },
  {
    "text": "is you know the in order to access that data not only do I have to have access to the infrastructure I also have to",
    "start": "2652160",
    "end": "2657520"
  },
  {
    "text": "have access to the the tenant specific cryptography um and and the keys stored",
    "start": "2657520",
    "end": "2662720"
  },
  {
    "text": "in cams um now this model then evolves um when you move move",
    "start": "2662720",
    "end": "2667839"
  },
  {
    "text": "to uh the bridge um and in the bridge now again you see we have the message",
    "start": "2667839",
    "end": "2674400"
  },
  {
    "text": "coming into a legacy layer it slaps on that identity and then at that identity",
    "start": "2674400",
    "end": "2679839"
  },
  {
    "text": "passes it all the way through the data services layer now you have it at the data services layer where again KMS can",
    "start": "2679839",
    "end": "2685680"
  },
  {
    "text": "be accessed from the data services layer to get the cryptography material appropriate now it could be already assigned to the the data store but often",
    "start": "2685680",
    "end": "2692880"
  },
  {
    "text": "times in this case you're having a shared storage infrastructure so you actually you're not necessarily letting",
    "start": "2692880",
    "end": "2698160"
  },
  {
    "text": "the cryptography occur at the storage service itself but rather at a per tenant level so that means if I'm going",
    "start": "2698160",
    "end": "2703480"
  },
  {
    "text": "to put this object in S3 I'm going to uh encrypt each individual object distinctly for each individual customer",
    "start": "2703480",
    "end": "2709839"
  },
  {
    "text": "even though it's a shared tier so that means I have to request and query um that key material um and then that's",
    "start": "2709839",
    "end": "2716480"
  },
  {
    "text": "going to allow me to store that in this particular case encrypted in Dynamo DB right so as opposed to turning on",
    "start": "2716480",
    "end": "2722720"
  },
  {
    "text": "encryption at a broad level at a volume level or at a a Bucket Level uh I'm actually doing a per tenant level",
    "start": "2722720",
    "end": "2730079"
  },
  {
    "text": "encryption using the KMS Service as a mechanism for storage and retrieval of that key",
    "start": "2730079",
    "end": "2735680"
  },
  {
    "text": "information so for data security and isolation um you know it's obviously",
    "start": "2735680",
    "end": "2741200"
  },
  {
    "start": "2736000",
    "end": "2736000"
  },
  {
    "text": "going to again vary by by service um and so uh you know in the Retro example you",
    "start": "2741200",
    "end": "2746559"
  },
  {
    "text": "saw where it's uh customer specific however we're already moving to a multi-tenant um cryptography model where",
    "start": "2746559",
    "end": "2752000"
  },
  {
    "text": "you have unique Keys per customer um now that's not necessarily required from a retro perspective but definitely something you would start with because",
    "start": "2752000",
    "end": "2758119"
  },
  {
    "text": "it gives you that migration over time um to Bridge Pool and other architectures",
    "start": "2758119",
    "end": "2763920"
  },
  {
    "text": "um in the uh Bridge Approach um you can see now you're embedding data access and authorization in the individual shared",
    "start": "2763920",
    "end": "2770640"
  },
  {
    "text": "layers right so not only is that cryptography material being pulled for encryption and storage with that uh",
    "start": "2770640",
    "end": "2776599"
  },
  {
    "text": "authentication of can't even make that request at the Shared service layer needs to be enacted as well so uh that",
    "start": "2776599",
    "end": "2784200"
  },
  {
    "text": "uh previous example was showing the how we encrypt the data for for storage but in fact there's another check that has to go on to that shared service tier",
    "start": "2784200",
    "end": "2790880"
  },
  {
    "text": "which is does the green customer even have access to this shared service do they have the ability to invoke this",
    "start": "2790880",
    "end": "2796839"
  },
  {
    "text": "particular function on that shared service so you're doing embedding data access but also and encryption but also",
    "start": "2796839",
    "end": "2802520"
  },
  {
    "text": "even authorization and authentication at every tier in the architecture right so that's going to be something that you're",
    "start": "2802520",
    "end": "2808160"
  },
  {
    "text": "going to share uh generally you're going to write a shared layer around um using often either a custom authentication",
    "start": "2808160",
    "end": "2814440"
  },
  {
    "text": "model or actually um lever an ABS partner for something like that to make it out of the gate um IM am can build",
    "start": "2814440",
    "end": "2821559"
  },
  {
    "text": "some of those pieces um but often when you're marrying it with your own uh tenant information in data store um you",
    "start": "2821559",
    "end": "2827760"
  },
  {
    "text": "then are going to uh pull out a completely different set of identities which are not really stored in I am but rather uh in your own architecture in a",
    "start": "2827760",
    "end": "2834440"
  },
  {
    "text": "partner product for that space um and then of course in the serverless approach um now you actually have the",
    "start": "2834440",
    "end": "2840079"
  },
  {
    "text": "ability to leverage um you know IM uh and you know token based authentication with IM by generating a and assuming it",
    "start": "2840079",
    "end": "2848000"
  },
  {
    "text": "for that that particular request and then tying into the IM infrastructure for Access um to that particular layer",
    "start": "2848000",
    "end": "2854200"
  },
  {
    "text": "and then passing the identity through again both for key retrieval but also for authentication in the Lambda",
    "start": "2854200",
    "end": "2860440"
  },
  {
    "text": "functions you're invoking determining whether this function can be invoked by that customer the code path you're going",
    "start": "2860440",
    "end": "2865559"
  },
  {
    "text": "down is appropriate so again embedded into the architecture uh all the way",
    "start": "2865559",
    "end": "2871079"
  },
  {
    "start": "2871000",
    "end": "2871000"
  },
  {
    "text": "through so if this was too long and you didn't listen um uh this is my this is",
    "start": "2871079",
    "end": "2876440"
  },
  {
    "text": "my big summary slide um so you know if you're looking at this and you're saying what you know what approach is great four examples it's awesome um you know I",
    "start": "2876440",
    "end": "2883319"
  },
  {
    "text": "love it now all you've done is given me more choices um which often is a is a question that comes from our our",
    "start": "2883319",
    "end": "2889119"
  },
  {
    "text": "customers hey you know just tell me what to do not you know not don't give me all these options but unfortunately you know I like to make sure people have Choice",
    "start": "2889119",
    "end": "2895040"
  },
  {
    "text": "flexibility um opportunity uh so uh so I think the the way to think about this approach is you know are you working",
    "start": "2895040",
    "end": "2901400"
  },
  {
    "text": "with a legacy architecture is is the component you're working off of or building is it something that is a",
    "start": "2901400",
    "end": "2906920"
  },
  {
    "text": "monolithic app or something you can't crack open um something that's pre-existing if it is you know hey let's",
    "start": "2906920",
    "end": "2913319"
  },
  {
    "text": "talk about leveraging what you have and then you know uh basically getting an opportunity to quickly move to the ads",
    "start": "2913319",
    "end": "2919160"
  },
  {
    "text": "platform and then start a multi-tenant architecture with the Retro you know go retro to start with um the thing that I",
    "start": "2919160",
    "end": "2925960"
  },
  {
    "text": "would uh tell everyone is really start to measure everything right away if you haven't historically done a lot of measurement um or log uh log storage um",
    "start": "2925960",
    "end": "2933799"
  },
  {
    "text": "architecturally that's a sort of a table stakes from multi-tenant approach when you want to analyze what's happened over",
    "start": "2933799",
    "end": "2939200"
  },
  {
    "text": "time having that that um that um measurement built into the architecture is definitely a key change I would make",
    "start": "2939200",
    "end": "2945400"
  },
  {
    "text": "even to a retro architecture approach if you're ready for it you know fight the inertia of the simple install on AWS and",
    "start": "2945400",
    "end": "2952319"
  },
  {
    "text": "go and jump right over retro and think about how you can start refactoring that architecture is there an opportunity",
    "start": "2952319",
    "end": "2957640"
  },
  {
    "text": "there to break out components to to create some shared services um you know if you have a a big platform um it's",
    "start": "2957640",
    "end": "2964640"
  },
  {
    "text": "going to take time you know Amazon didn't Amazon did not change their architecture to uh microservices",
    "start": "2964640",
    "end": "2969839"
  },
  {
    "text": "overnight you know it took years to do that um and so in order to do that we then had to decide the the best path so",
    "start": "2969839",
    "end": "2976040"
  },
  {
    "text": "you that's again you need to figure out what the best path what's the biggest bang for the buck what's the most you know uh uh scale um scale impacted or",
    "start": "2976040",
    "end": "2983640"
  },
  {
    "text": "scale affected um component and then break those out over time and move through that hybrid architecture or",
    "start": "2983640",
    "end": "2989200"
  },
  {
    "text": "Bridge um into ultimately a shared model um now if it's not um a legacy you know",
    "start": "2989200",
    "end": "2995720"
  },
  {
    "text": "start with a pool it's if it's not event based start with a pool as an approach shared services microservices service",
    "start": "2995720",
    "end": "3001160"
  },
  {
    "text": "oriented architecture day one and then really leverage that um shared pool approach than embracing all the",
    "start": "3001160",
    "end": "3006440"
  },
  {
    "text": "opportunity for a share nothing approach um but then thinking about how to embed",
    "start": "3006440",
    "end": "3011640"
  },
  {
    "text": "as we talked about identity request and security context through the architecture uh so that you can truly",
    "start": "3011640",
    "end": "3018119"
  },
  {
    "text": "have a shared pool that can handle any request um from any particular tenant um and that's actually a goal even from the",
    "start": "3018119",
    "end": "3023839"
  },
  {
    "text": "bridge is how do I get down there to that shared you know dive into the pool um and then if you really have that",
    "start": "3023839",
    "end": "3029160"
  },
  {
    "text": "opportunity um to think about an event-based model or or can model um what feels like a synchronous",
    "start": "3029160",
    "end": "3034240"
  },
  {
    "text": "interaction as an event approach um using asynchronous calls or or even",
    "start": "3034240",
    "end": "3039359"
  },
  {
    "text": "mobile pooling um from your app think about starting at the serverless model is that is that an option the beauty",
    "start": "3039359",
    "end": "3044799"
  },
  {
    "text": "here is then all the aspects of scale how to scale that architecture and grow it are taken care of um API Gateway will",
    "start": "3044799",
    "end": "3051040"
  },
  {
    "text": "scale for you Lambda will scale for you um you're going to use shared services that will scale um through Straight Up",
    "start": "3051040",
    "end": "3056640"
  },
  {
    "text": "API calls so it really gives you that flexibility especially in multi- tendency where scale is going to be the",
    "start": "3056640",
    "end": "3062160"
  },
  {
    "text": "thing that you're going to have um it's going to probably go a lot faster than a single tenant architecture right so",
    "start": "3062160",
    "end": "3067720"
  },
  {
    "text": "that's really I think uh if you took anything away this is really the kind of the the process flow of of how we think",
    "start": "3067720",
    "end": "3073000"
  },
  {
    "text": "about multi-tenant approaches um and with that I like to say thank you very very much I appreciate you guys coming",
    "start": "3073000",
    "end": "3080079"
  },
  {
    "text": "um I hope you guys enjoy the rest of the show um please feel free to complete",
    "start": "3080079",
    "end": "3085640"
  },
  {
    "text": "your evaluations uh I I would love it um and if there's anything I can do better next time let me know all right thank",
    "start": "3085640",
    "end": "3090799"
  },
  {
    "text": "you very much",
    "start": "3090799",
    "end": "3093480"
  }
]