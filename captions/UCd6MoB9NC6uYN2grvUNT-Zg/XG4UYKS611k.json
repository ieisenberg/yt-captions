[
  {
    "start": "0",
    "end": "50000"
  },
  {
    "text": "[Music]",
    "start": "120",
    "end": "1120"
  },
  {
    "text": "[Applause]",
    "start": "1120",
    "end": "3060"
  },
  {
    "text": "[Music]",
    "start": "3060",
    "end": "8240"
  },
  {
    "text": "hello I'm Ariel a cloud support engineer",
    "start": "8240",
    "end": "10960"
  },
  {
    "text": "here at AWS office in Oakland New",
    "start": "10960",
    "end": "13920"
  },
  {
    "text": "Zealand today I'm going to show you how",
    "start": "13920",
    "end": "16400"
  },
  {
    "text": "to troubleshoot high replica lag we use",
    "start": "16400",
    "end": "19439"
  },
  {
    "text": "Amazon relational database servers for",
    "start": "19439",
    "end": "22000"
  },
  {
    "text": "my SQL let's get started",
    "start": "22000",
    "end": "25359"
  },
  {
    "text": "amazon RDS for Mexico uses a synchronous",
    "start": "25359",
    "end": "29160"
  },
  {
    "text": "replication so sometimes the replica can",
    "start": "29160",
    "end": "32000"
  },
  {
    "text": "lag behind the primary instance causing",
    "start": "32000",
    "end": "35200"
  },
  {
    "text": "replication lag we can use Amazon",
    "start": "35200",
    "end": "38280"
  },
  {
    "text": "Cloudatch mitrix to monitor the",
    "start": "38280",
    "end": "41040"
  },
  {
    "text": "replication lag first let's log into the",
    "start": "41040",
    "end": "44879"
  },
  {
    "text": "AWS management console and then navigate",
    "start": "44879",
    "end": "48239"
  },
  {
    "text": "to the Amazon RDS console",
    "start": "48239",
    "end": "52680"
  },
  {
    "start": "50000",
    "end": "60000"
  },
  {
    "text": "select your MySQL DB instance and then",
    "start": "53920",
    "end": "56559"
  },
  {
    "text": "choose the monitoring tab under the",
    "start": "56559",
    "end": "59680"
  },
  {
    "text": "cloudatch matrix section you will see",
    "start": "59680",
    "end": "61920"
  },
  {
    "start": "60000",
    "end": "89000"
  },
  {
    "text": "the replica lag metric that shows the",
    "start": "61920",
    "end": "64239"
  },
  {
    "text": "lag in seconds between the primary and",
    "start": "64239",
    "end": "67560"
  },
  {
    "text": "replica when the value is high",
    "start": "67560",
    "end": "70080"
  },
  {
    "text": "replication is lagging to troubleshoot",
    "start": "70080",
    "end": "72640"
  },
  {
    "text": "this issue we need to identify whether",
    "start": "72640",
    "end": "75360"
  },
  {
    "text": "the IO replication thread or the SQL",
    "start": "75360",
    "end": "78240"
  },
  {
    "text": "replication thread is causing the lag",
    "start": "78240",
    "end": "82159"
  },
  {
    "text": "first use your preferred SQL client tool",
    "start": "82159",
    "end": "84880"
  },
  {
    "text": "to connect to the primary DB",
    "start": "84880",
    "end": "88280"
  },
  {
    "text": "instance run the show master status",
    "start": "88280",
    "end": "90880"
  },
  {
    "start": "89000",
    "end": "153000"
  },
  {
    "text": "command to get the current binary log",
    "start": "90880",
    "end": "93200"
  },
  {
    "text": "file that the primer is writing",
    "start": "93200",
    "end": "96119"
  },
  {
    "text": "to note the file binary log value that",
    "start": "96119",
    "end": "99520"
  },
  {
    "text": "we will use to check against replica",
    "start": "99520",
    "end": "101680"
  },
  {
    "text": "file",
    "start": "101680",
    "end": "103799"
  },
  {
    "text": "next connect to the replica instance and",
    "start": "103799",
    "end": "107600"
  },
  {
    "text": "run show replica status to get detailed",
    "start": "107600",
    "end": "111200"
  },
  {
    "text": "replica",
    "start": "111200",
    "end": "113758"
  },
  {
    "text": "status compare the source log file value",
    "start": "114520",
    "end": "117840"
  },
  {
    "text": "to the primary file if they're different",
    "start": "117840",
    "end": "120960"
  },
  {
    "text": "then the IO thread is lagging in reading",
    "start": "120960",
    "end": "123360"
  },
  {
    "text": "binary logs from the primary also check",
    "start": "123360",
    "end": "127280"
  },
  {
    "text": "relay source log file against master log",
    "start": "127280",
    "end": "130160"
  },
  {
    "text": "file if they're different then the SQL",
    "start": "130160",
    "end": "133120"
  },
  {
    "text": "thread is lagging in running updates",
    "start": "133120",
    "end": "135360"
  },
  {
    "text": "from the relay log common causes for the",
    "start": "135360",
    "end": "138239"
  },
  {
    "text": "IO thread lag include network",
    "start": "138239",
    "end": "141040"
  },
  {
    "text": "connectivity issues or high bandwidth",
    "start": "141040",
    "end": "143920"
  },
  {
    "text": "usage that slows down the binary lock",
    "start": "143920",
    "end": "146400"
  },
  {
    "text": "transfer",
    "start": "146400",
    "end": "148560"
  },
  {
    "text": "for a SQL thread lag some potential",
    "start": "148560",
    "end": "151200"
  },
  {
    "text": "causes are long running queries on the",
    "start": "151200",
    "end": "154080"
  },
  {
    "start": "153000",
    "end": "227000"
  },
  {
    "text": "primary can take time to replicate",
    "start": "154080",
    "end": "156480"
  },
  {
    "text": "insufficient resources such as CPU",
    "start": "156480",
    "end": "159760"
  },
  {
    "text": "memory on the replica using row bin lock",
    "start": "159760",
    "end": "162720"
  },
  {
    "text": "format without primary keys that causes",
    "start": "162720",
    "end": "165760"
  },
  {
    "text": "full table scans on the replica parallel",
    "start": "165760",
    "end": "168640"
  },
  {
    "text": "queries on the primary that gets",
    "start": "168640",
    "end": "171200"
  },
  {
    "text": "serialized on the single threaded",
    "start": "171200",
    "end": "173599"
  },
  {
    "text": "replica",
    "start": "173599",
    "end": "175120"
  },
  {
    "text": "banner log sync overhead while you",
    "start": "175120",
    "end": "177680"
  },
  {
    "text": "enabled automated backups on the",
    "start": "177680",
    "end": "181000"
  },
  {
    "text": "replica after you have identified the",
    "start": "181000",
    "end": "183519"
  },
  {
    "text": "lagging thread you can take actions to",
    "start": "183519",
    "end": "186000"
  },
  {
    "text": "resolved issue such as optimizing",
    "start": "186000",
    "end": "189200"
  },
  {
    "text": "queries increasing resources or",
    "start": "189200",
    "end": "192000"
  },
  {
    "text": "adjusting replication settings",
    "start": "192000",
    "end": "194959"
  },
  {
    "text": "also when you create a new rate replica",
    "start": "194959",
    "end": "198400"
  },
  {
    "text": "you might experience an initial spike in",
    "start": "198400",
    "end": "200959"
  },
  {
    "text": "lag because of lazy loading of data from",
    "start": "200959",
    "end": "204319"
  },
  {
    "text": "Amazon simple storage servers Amazon S3",
    "start": "204319",
    "end": "207800"
  },
  {
    "text": "snapshots to reduce the lag you can use",
    "start": "207800",
    "end": "210959"
  },
  {
    "text": "InnoDB buffer pool warm-up or run",
    "start": "210959",
    "end": "213760"
  },
  {
    "text": "queries to load all data into memory so",
    "start": "213760",
    "end": "217440"
  },
  {
    "text": "now you know how to troubleshoot high",
    "start": "217440",
    "end": "219599"
  },
  {
    "text": "replica lag when you use Amazon",
    "start": "219599",
    "end": "221680"
  },
  {
    "text": "relational database servers for MySQL",
    "start": "221680",
    "end": "225680"
  },
  {
    "text": "thanks for watching and happy cloud",
    "start": "225680",
    "end": "227840"
  },
  {
    "start": "227000",
    "end": "241000"
  },
  {
    "text": "computing from all of us here at AWS",
    "start": "227840",
    "end": "231470"
  },
  {
    "text": "[Applause]",
    "start": "231470",
    "end": "233540"
  },
  {
    "text": "[Music]",
    "start": "233540",
    "end": "238909"
  }
]