[
  {
    "text": "all right so so welcome back and it's my pleasure",
    "start": "2200",
    "end": "7240"
  },
  {
    "text": "to be back again this time bringing you a session on building fault allet applications uh for those who is",
    "start": "7240",
    "end": "13679"
  },
  {
    "text": "watching this session on the live streaming over the web uh this is going to be uh a session",
    "start": "13679",
    "end": "20320"
  },
  {
    "text": "focused on the best practices of building fall allent applications you can follow this irrespective of whether",
    "start": "20320",
    "end": "26480"
  },
  {
    "text": "you are in the hall or you're watching it on the live stream",
    "start": "26480",
    "end": "31960"
  },
  {
    "text": "okay so this session is based on a very popular white paper written by my",
    "start": "33879",
    "end": "40719"
  },
  {
    "text": "colleagues it's called building fall tolerant applications on AWS this is accessible at aws.amazon.com white",
    "start": "40719",
    "end": "48440"
  },
  {
    "text": "papers it's a very well received white paper and I'm going to touch upon a subset of the topics that are discussed",
    "start": "48440",
    "end": "55000"
  },
  {
    "text": "in this white paper so let me get started the agenda for this session is to take a a closer look at the AWS",
    "start": "55000",
    "end": "61000"
  },
  {
    "text": "building blocks then take a look at Amazon ec2 architecture with focus on",
    "start": "61000",
    "end": "67159"
  },
  {
    "text": "specific elements like Ami elastic IP elastic Block store and elastic load",
    "start": "67159",
    "end": "72720"
  },
  {
    "text": "balancer then we'll briefly touch upon the high availability features of Amazon RDS uh we'll revisit the concept of",
    "start": "72720",
    "end": "79320"
  },
  {
    "text": "multi-az that we have heard in the morning so let me get started typically irrespective of",
    "start": "79320",
    "end": "84960"
  },
  {
    "text": "whether you are deploying application on one server or uh on on a on a cluster or",
    "start": "84960",
    "end": "90960"
  },
  {
    "text": "even on the cloud you are going to have uh two layers of the stack the topmost",
    "start": "90960",
    "end": "96840"
  },
  {
    "text": "layer is going to be application the bottommost is going to be the physical infrastructure whether it is one server",
    "start": "96840",
    "end": "102240"
  },
  {
    "text": "or a global uh infrastructure like Amazon web services and even on the cloud this will not change much you",
    "start": "102240",
    "end": "108920"
  },
  {
    "text": "still have pretty much the same uh layered architecture of Hosting your application and talking to the",
    "start": "108920",
    "end": "115280"
  },
  {
    "text": "underlying resources but in between your application and the actual physical infrastructure there are many other",
    "start": "115280",
    "end": "120640"
  },
  {
    "text": "layers that offer you various levels of abstractions and also value additions so let's take a closer look at the big",
    "start": "120640",
    "end": "126920"
  },
  {
    "text": "picture of Amazon web services you have seen this before but I want to spend a little bit of time on each of this to",
    "start": "126920",
    "end": "134360"
  },
  {
    "text": "develop any meaningful application you need servers you need storage you need a little bit of security and networking",
    "start": "134360",
    "end": "141000"
  },
  {
    "text": "and then you need databases so they actually form the infrastructure building blocks for Amazon web services",
    "start": "141000",
    "end": "147959"
  },
  {
    "text": "these are the fundamental building blocks uh you can use them independently for example we know customers leveraging",
    "start": "147959",
    "end": "155120"
  },
  {
    "text": "only Amazon S3 for their backup and archival purposes and of course we we see many customers using just Amazon ec2",
    "start": "155120",
    "end": "163319"
  },
  {
    "text": "uh without any other services it's a very classic use case you can also use database alone as a service through",
    "start": "163319",
    "end": "169879"
  },
  {
    "text": "Amazon RDS but the best thing is you can actually consume them uh as one or you",
    "start": "169879",
    "end": "175920"
  },
  {
    "text": "can consume all of them together and come out with very interesting scenarios that's the reason why they can be",
    "start": "175920",
    "end": "181760"
  },
  {
    "text": "compared to Lego blocks they come in different sizes different shapes you you connect them in a way to form a unique",
    "start": "181760",
    "end": "188239"
  },
  {
    "text": "shape that makes sense to you that is your use case so many customers leverage the same building blocks but they derive",
    "start": "188239",
    "end": "196120"
  },
  {
    "text": "a very different architecture from this by connecting them in different ways so",
    "start": "196120",
    "end": "201319"
  },
  {
    "text": "these are the foundational building blocks which form the most important layer in the",
    "start": "201319",
    "end": "206519"
  },
  {
    "text": "architecture then we abstract it a little bit under offer more value added services for example on S3 we actually",
    "start": "206519",
    "end": "215599"
  },
  {
    "text": "offer content delivery in the form of Amazon cloudfront of course you can also have the content coming from Custom",
    "start": "215599",
    "end": "220680"
  },
  {
    "text": "origin but typically S3 and cloudfront work very well in conjunction similarly when we have utility computing it makes",
    "start": "220680",
    "end": "227480"
  },
  {
    "text": "sense to offer parallel processing in the form of hosted maed juice which is called elastic maped juice uh similarly",
    "start": "227480",
    "end": "234200"
  },
  {
    "text": "when we have the underlying Network infrastructure we can give you an asynchronous messaging uh mechanism",
    "start": "234200",
    "end": "239799"
  },
  {
    "text": "through sqs and a notification service called SNS simple notification service",
    "start": "239799",
    "end": "244840"
  },
  {
    "text": "and the recent Edition which is which is Amazon simple email service or SCS so",
    "start": "244840",
    "end": "250319"
  },
  {
    "text": "these are the services that are built on top of for existing building blocks and",
    "start": "250319",
    "end": "255360"
  },
  {
    "text": "then we have further levels of abstraction as we go on the on the",
    "start": "255360",
    "end": "260840"
  },
  {
    "text": "stack you need security security is our number one priority you heard this",
    "start": "260840",
    "end": "266240"
  },
  {
    "text": "multiple times but uh how can you really Leverage security that we have embedded",
    "start": "266240",
    "end": "271360"
  },
  {
    "text": "into AWS you can do that by using multiactor authentication that comes with uh the the AWS Management console",
    "start": "271360",
    "end": "278759"
  },
  {
    "text": "during the signup process you can also make Cloud resources available in a very granular Way by leveraging a security uh",
    "start": "278759",
    "end": "286600"
  },
  {
    "text": "concept called identity and access management on the cloud which is I am and of course we have a Monitoring",
    "start": "286600",
    "end": "292400"
  },
  {
    "text": "Service uh which will work in conjunction with a set of services like sqs SNS ec2 elb autoscale and so on",
    "start": "292400",
    "end": "300240"
  },
  {
    "text": "that's called Cloud watch which is a platform to monitor track and visualize",
    "start": "300240",
    "end": "305360"
  },
  {
    "text": "the performance metrics of your resources and to make it easy for developers and administrators we also",
    "start": "305360",
    "end": "311680"
  },
  {
    "text": "expose a platform layer called Amazon elastic bean stock which will hide away the complexity of dealing with virtual",
    "start": "311680",
    "end": "318759"
  },
  {
    "text": "servers storage databases and so on particularly for the developers where they can deploy their applications with",
    "start": "318759",
    "end": "324400"
  },
  {
    "text": "one click from Eclipse um or even in from from other Ides simil L for it",
    "start": "324400",
    "end": "330759"
  },
  {
    "text": "administrators we offer a layer called cloud formation which will help them uh",
    "start": "330759",
    "end": "337080"
  },
  {
    "text": "describe the layout and topology and the resources in a declarative way so that's",
    "start": "337080",
    "end": "342199"
  },
  {
    "text": "cloud formation again it's not a standalone layer it leverages many of these blocks that you see and of course",
    "start": "342199",
    "end": "348240"
  },
  {
    "text": "finally the way you deal with the entire Cloud infrastructure is from one of these interfaces many developers",
    "start": "348240",
    "end": "354680"
  },
  {
    "text": "actually use the web interface uh actually uh the libraries developers use libraries and many operations",
    "start": "354680",
    "end": "362000"
  },
  {
    "text": "professionals will leverage web interface and of course we have uh various plugins as I mentioned for",
    "start": "362000",
    "end": "367160"
  },
  {
    "text": "visual studio and for eclipse and command line interfaces for it administrators to integrate their",
    "start": "367160",
    "end": "372720"
  },
  {
    "text": "scripts and so on and your application ultimately sits on top of this consuming the services in one of the forms right",
    "start": "372720",
    "end": "379000"
  },
  {
    "text": "so this is a big picture of Amazon web services now with that in place let me",
    "start": "379000",
    "end": "384400"
  },
  {
    "text": "walk you through the the most important service of AWS called ec2 the most",
    "start": "384400",
    "end": "389919"
  },
  {
    "text": "popular most highly consumed service this is a flexible compute capacity on",
    "start": "389919",
    "end": "395039"
  },
  {
    "text": "the cloud it is flexible because you can start very small and you can grow as big",
    "start": "395039",
    "end": "400360"
  },
  {
    "text": "as you want and it is resizable as in you can scale up you can scale out you",
    "start": "400360",
    "end": "406639"
  },
  {
    "text": "can scale down or scale in based on your scenarios very easily and you can automate most of these operations and",
    "start": "406639",
    "end": "414080"
  },
  {
    "text": "like many of the services and the promise of AWS it's inexpensive starts with zero capex",
    "start": "414080",
    "end": "419919"
  },
  {
    "text": "and it offers you pay as youo model extremely secure because we have instance isolation at the bottommost",
    "start": "419919",
    "end": "426400"
  },
  {
    "text": "layer of the of the stack so that's the quick overview of E2 but I want you to",
    "start": "426400",
    "end": "432919"
  },
  {
    "text": "understand this in a little different way so let me walk you through the the typical initialization of an ec2",
    "start": "432919",
    "end": "441960"
  },
  {
    "text": "instance as an architect developer or an IT professional or an operations person",
    "start": "441960",
    "end": "448120"
  },
  {
    "text": "your fundamental interaction with AWS will start in choosing the right region",
    "start": "448120",
    "end": "454240"
  },
  {
    "text": "that's the number one choice that you are going to make it depends on where your customers will ultimately come from",
    "start": "454240",
    "end": "460520"
  },
  {
    "text": "do they come from Americas do they come from Europe or Asia Pacific and based on",
    "start": "460520",
    "end": "466000"
  },
  {
    "text": "that you're going to make a choice of region right in the morning we have discussed this multiple times we have",
    "start": "466000",
    "end": "471599"
  },
  {
    "text": "about uh uh six regions and you can deploy your resources in any of the",
    "start": "471599",
    "end": "476639"
  },
  {
    "text": "regions so it all starts with choosing the right region once you decide on that then choosing the right template in the",
    "start": "476639",
    "end": "484560"
  },
  {
    "text": "form of an Amazon machine image is a next important step think of Ami as uh a",
    "start": "484560",
    "end": "490919"
  },
  {
    "text": "pre-defined and pre-configured server template you want a Linux uh virtual uh",
    "start": "490919",
    "end": "498280"
  },
  {
    "text": "instance you want a Windows based one you want a free BSD you want open Solaris or you want a CTO or a Suzi",
    "start": "498280",
    "end": "504879"
  },
  {
    "text": "Linux you can choose from a variety of operating systems and uh the the processor architecture in terms of 32bit",
    "start": "504879",
    "end": "511280"
  },
  {
    "text": "or 64bit and that decision happens in the in the second phase right so once",
    "start": "511280",
    "end": "516680"
  },
  {
    "text": "you have the Ami chosen then you're going to launch that as an instance in",
    "start": "516680",
    "end": "522080"
  },
  {
    "text": "one of the availability zones so as I mentioned earlier availability zone is a distinct isolated facility within a",
    "start": "522080",
    "end": "528760"
  },
  {
    "text": "region offering you lot of redundancy and high availability you might want to choose a specific availability Zone uh",
    "start": "528760",
    "end": "535200"
  },
  {
    "text": "and ultimately launch your Ami as an ec2 instance in an availability Zone this is",
    "start": "535200",
    "end": "541440"
  },
  {
    "text": "the fundamental interaction that you will ever have with ec2 that's not all",
    "start": "541440",
    "end": "547279"
  },
  {
    "text": "you need to be familiar with couple of more concepts for example every instance comes with a local instance store which",
    "start": "547279",
    "end": "554880"
  },
  {
    "text": "is called ephemeral storage so ephemeral storage is the inbuilt storage that",
    "start": "554880",
    "end": "560279"
  },
  {
    "text": "comes by default with every instance but the life of this ephemeral storage is is directly proportional to the life of the",
    "start": "560279",
    "end": "566760"
  },
  {
    "text": "instance once you terminate the instance FML storage seizes to exist it's a part",
    "start": "566760",
    "end": "571880"
  },
  {
    "text": "of the instance that you're are going to deal with now to take your data beyond the typical life cycle of an E2 instance",
    "start": "571880",
    "end": "579279"
  },
  {
    "text": "you will attach a Cloud Drive U or a dis in the cloud in the form of elastic",
    "start": "579279",
    "end": "584760"
  },
  {
    "text": "Block store this will enable you to go beyond the typical life cycle of uh an",
    "start": "584760",
    "end": "591320"
  },
  {
    "text": "instance and persist your data uh for a longer time and if you want to make it",
    "start": "591320",
    "end": "597279"
  },
  {
    "text": "much more redundant you can take a snapshot and occasionally put that snapshot on uh on S3 so that's that's",
    "start": "597279",
    "end": "603839"
  },
  {
    "text": "going to make it much more uh foolproof because you can have multiple snapshots which are point in time snapshots and",
    "start": "603839",
    "end": "610720"
  },
  {
    "text": "you can store them on um S3 once you have this you'll obviously",
    "start": "610720",
    "end": "615839"
  },
  {
    "text": "want to create a Security Group which is like a firewall and once you have the firewall in place then you will go ahead",
    "start": "615839",
    "end": "621959"
  },
  {
    "text": "and attach an elastic IP which is going to offer you a level of redirection and once you have this you",
    "start": "621959",
    "end": "628720"
  },
  {
    "text": "can automatically enable monitoring we have the default monitoring and a detailed monitoring detailed monitoring",
    "start": "628720",
    "end": "635920"
  },
  {
    "text": "uh is going to offer you performance metrics up to a granularity of 1 minute so you can",
    "start": "635920",
    "end": "642440"
  },
  {
    "text": "actually okay so um you can actually get a granular uh visualization of the",
    "start": "642440",
    "end": "648760"
  },
  {
    "text": "performance metrics through Amazon Cloud watch and then uh you can also launch",
    "start": "648760",
    "end": "653920"
  },
  {
    "text": "multiple instances in the same process and put them behind an elastic load balancer once you you have this you can",
    "start": "653920",
    "end": "660480"
  },
  {
    "text": "connect the cloudwatch performance metrix with the ec2 instance using an autoscale",
    "start": "660480",
    "end": "666399"
  },
  {
    "text": "policy which will Define how often and when the instances should come up and",
    "start": "666399",
    "end": "671920"
  },
  {
    "text": "should be brought down so this is a big picture of ec2 if you're able to follow what I mentioned and if you're able to",
    "start": "671920",
    "end": "678040"
  },
  {
    "text": "identify each of these blocks and and understand how they function you know most of the E2 by now because this is",
    "start": "678040",
    "end": "685440"
  },
  {
    "text": "this is the big picture of Amazon elastic compute Cloud right now it's time for me to take each of these",
    "start": "685440",
    "end": "691079"
  },
  {
    "text": "components and drill down further let me start with an elastic IP as I mentioned",
    "start": "691079",
    "end": "696600"
  },
  {
    "text": "earlier uh every time you launch an instance it comes with a public DNS name which you cannot control which you",
    "start": "696600",
    "end": "703240"
  },
  {
    "text": "cannot uh make it persistent so the the public DNS name of an ec2 instance is",
    "start": "703240",
    "end": "709480"
  },
  {
    "text": "based on the region that you are launching the IP address that is going to be assigned and you have no control",
    "start": "709480",
    "end": "714800"
  },
  {
    "text": "over it so every time you stop and start an instance or every time you relaunch an instance you will you will get a",
    "start": "714800",
    "end": "720279"
  },
  {
    "text": "different end point that's not very easy for you to deal with when you are going live and and in the production",
    "start": "720279",
    "end": "726760"
  },
  {
    "text": "environments so how do you make sure that your domain names which are typically uh let's call a hypothetical",
    "start": "726760",
    "end": "734079"
  },
  {
    "text": "uh portal Gadget shop.in and I want to point that to a specific E2 instance so",
    "start": "734079",
    "end": "739560"
  },
  {
    "text": "I introduced an intermediary which is called elastic IP which is a public static IP address and my domain's uh C",
    "start": "739560",
    "end": "746680"
  },
  {
    "text": "name gets pointed to this elastic IP and this elastic IP points to an ec2 instance and the advantage I have is I",
    "start": "746680",
    "end": "753199"
  },
  {
    "text": "can swap this instance at any point Without Really touching my actual DNS and the public IP address and you can do",
    "start": "753199",
    "end": "760600"
  },
  {
    "text": "it even on the Fly for example if you face issues with a specific instance uh",
    "start": "760600",
    "end": "766680"
  },
  {
    "text": "bring in another healthy instance and quickly wire the elastic IP to talk to the healthy instance and this is going",
    "start": "766680",
    "end": "772680"
  },
  {
    "text": "to be extremely seamless so I want to give you a visualization of how this works and then we go into a live demo",
    "start": "772680",
    "end": "778560"
  },
  {
    "text": "rather a demo not a live demo so this is how you're going to attach an elastic IP",
    "start": "778560",
    "end": "784279"
  },
  {
    "text": "address to an ec2 instance and as you notice the E2 instance is currently running a web server and a database",
    "start": "784279",
    "end": "789920"
  },
  {
    "text": "server in the form of Apache and my SQL after a while for some reason if the",
    "start": "789920",
    "end": "796040"
  },
  {
    "text": "performance of your ec2 instance degrades it can happen for various reasons you you can quickly bring in",
    "start": "796040",
    "end": "803519"
  },
  {
    "text": "another that's it okay so yeah it has become stateless component",
    "start": "803519",
    "end": "809399"
  },
  {
    "text": "so so now you have an elastic IP address that's pointing to a healthier instance",
    "start": "809399",
    "end": "814680"
  },
  {
    "text": "and this is going to be absolutely seamless so let me let me show you a series of steps of achieving this now",
    "start": "814680",
    "end": "822519"
  },
  {
    "text": "this is the ec2 console and as you notice I have a primary server and a secondary server let's call it shop web",
    "start": "822519",
    "end": "828959"
  },
  {
    "text": "server it's it's an e-commerce portal that I have built and when I access the uh public",
    "start": "828959",
    "end": "835040"
  },
  {
    "text": "DNS name it looks something like this you have AP Southeast one followed by or",
    "start": "835040",
    "end": "840079"
  },
  {
    "text": "preceded by an IP address it's very hard to remember but you can copy and paste it in the browser to see your website in",
    "start": "840079",
    "end": "847600"
  },
  {
    "text": "action right now there is nothing great this is how most of the E2 instances are",
    "start": "847600",
    "end": "853320"
  },
  {
    "text": "anyways accessed but now what I'm going to do is to click on the elastic IP Link in the navigation bar and click on",
    "start": "853320",
    "end": "862399"
  },
  {
    "text": "allocate new address grab a public IP address from the pool of allowed IP addresses and",
    "start": "862399",
    "end": "868279"
  },
  {
    "text": "this is called elastic IP it's called elastic because you can keep switching the actual endpoint at runtime so once",
    "start": "868279",
    "end": "876240"
  },
  {
    "text": "you have the elastic IP you can associate that with a primary instance",
    "start": "876240",
    "end": "881720"
  },
  {
    "text": "which we have already identified here and after that the instance ID is",
    "start": "881720",
    "end": "887800"
  },
  {
    "text": "associated and now I can access the same website using the elastic",
    "start": "887800",
    "end": "893519"
  },
  {
    "text": "IP okay now you have another layer that isolates your domain name name and your",
    "start": "893519",
    "end": "899639"
  },
  {
    "text": "actual web server now let's go ahead and actually stop this instance okay this is my way",
    "start": "899639",
    "end": "907160"
  },
  {
    "text": "of emulating a degradation in the in the virtual instance so I'm going to stop",
    "start": "907160",
    "end": "914279"
  },
  {
    "text": "this come back to the browser okay and do a refresh to see a 44 error obvious",
    "start": "914279",
    "end": "920959"
  },
  {
    "text": "because the web server is dead it's not responding anymore now I want to associate this uh degraded primary web",
    "start": "920959",
    "end": "929399"
  },
  {
    "text": "server to a secondary one so now I'm going to uh initiate this process and",
    "start": "929399",
    "end": "935040"
  },
  {
    "text": "wire it up with my secondary server which is more healthy and then just do a",
    "start": "935040",
    "end": "940920"
  },
  {
    "text": "refresh and the website is back in Action okay uh is this the best way",
    "start": "940920",
    "end": "947560"
  },
  {
    "text": "there are many other things that you got to do but this is the first line of defense never ever launch a production",
    "start": "947560",
    "end": "953279"
  },
  {
    "text": "ec2 server without an elastic IP address without at least two instances running",
    "start": "953279",
    "end": "959800"
  },
  {
    "text": "that to preferably in multiple availability zones because if something happens with your primary server you can",
    "start": "959800",
    "end": "966759"
  },
  {
    "text": "always rewire the traffic via the elastic IP to a healthy instance running",
    "start": "966759",
    "end": "972040"
  },
  {
    "text": "in another availability Zone okay it makes sense but that's not all there's a",
    "start": "972040",
    "end": "977720"
  },
  {
    "text": "fundamental issue with this approach uh static websites are great",
    "start": "977720",
    "end": "983759"
  },
  {
    "text": "but an an e-commerce portal has to deal with transactions shopping card um",
    "start": "983759",
    "end": "989759"
  },
  {
    "text": "payments and you cannot afford to lose the data the the fundamental flaw with our",
    "start": "989759",
    "end": "995600"
  },
  {
    "text": "design here is we are running the database and the web server in the same box and if the Box goes down your",
    "start": "995600",
    "end": "1001839"
  },
  {
    "text": "database is inaccessible and you lose all the transactions elastic IP is only meant",
    "start": "1001839",
    "end": "1006920"
  },
  {
    "text": "for redirection so how do I make sure that the database is is available even",
    "start": "1006920",
    "end": "1012319"
  },
  {
    "text": "after the termination of an ec2 instance how do I achieve that well that's where",
    "start": "1012319",
    "end": "1018279"
  },
  {
    "text": "the EBS comes in elastic Block store which can be created anywhere from 1 GB",
    "start": "1018279",
    "end": "1023399"
  },
  {
    "text": "to 1 TB can be formatted with a native file system all the way from NTFS to EXT",
    "start": "1023399",
    "end": "1029199"
  },
  {
    "text": "F3 or any other even encrypted file system of your choice uh and it's automatically replicated within the same",
    "start": "1029199",
    "end": "1036280"
  },
  {
    "text": "availability zone so we offer you redundancy uh and in case of any host failures it automatically gets recovered",
    "start": "1036280",
    "end": "1042760"
  },
  {
    "text": "for you without you even initiating it and you can of course take point in time snapshots keep them on S3 and recreate",
    "start": "1042760",
    "end": "1050480"
  },
  {
    "text": "your entire EBS volume on demand when you want it and you can also monitor certain parameters related to uh EBS",
    "start": "1050480",
    "end": "1058720"
  },
  {
    "text": "within Cloud watch the dis IO related metrics now uh go we go back to the same",
    "start": "1058720",
    "end": "1064960"
  },
  {
    "text": "architecture where we have an elastic IP wire to and ec2 instance and now we attach an elastic Block store and move",
    "start": "1064960",
    "end": "1072039"
  },
  {
    "text": "the web server and the database server to the elastic Block store now this",
    "start": "1072039",
    "end": "1077360"
  },
  {
    "text": "offers us a second layer of protection in this case if our primary server goes",
    "start": "1077360",
    "end": "1083280"
  },
  {
    "text": "down for some reason and becomes inaccessible we bring up another generic",
    "start": "1083280",
    "end": "1088400"
  },
  {
    "text": "web server and a database server instance and we plug in this drive and",
    "start": "1088400",
    "end": "1093559"
  },
  {
    "text": "we make the database and website pointed to the new elastic Block store another",
    "start": "1093559",
    "end": "1098640"
  },
  {
    "text": "refresh you get back to the same state because the EBS has the up to minute uh",
    "start": "1098640",
    "end": "1105280"
  },
  {
    "text": "logs and the data files related to my SQL it also has a latest build of web server website that can be pointed from",
    "start": "1105280",
    "end": "1111720"
  },
  {
    "text": "the web server and database server and it gives you a chance to quickly rewire up to many transactions right so let's",
    "start": "1111720",
    "end": "1119039"
  },
  {
    "text": "go ahead and see a demo again I start off with at least two instances uh preferably deployed in",
    "start": "1119039",
    "end": "1125679"
  },
  {
    "text": "separate availability zones and it's accessible great now what I'm going to",
    "start": "1125679",
    "end": "1131200"
  },
  {
    "text": "do is to go ahead and create a new drive on the cloud a new dis on the cloud so I",
    "start": "1131200",
    "end": "1137240"
  },
  {
    "text": "click on create volume button that brings up a dialogue where you can Define the size and you can choose an",
    "start": "1137240",
    "end": "1143679"
  },
  {
    "text": "availability Zone uh one important aspect is you cannot create an elastic Block store in another availability Zone",
    "start": "1143679",
    "end": "1151080"
  },
  {
    "text": "than your E2 instance because the ior is going to be very expensive very heavy so they got to",
    "start": "1151080",
    "end": "1157640"
  },
  {
    "text": "be in the same availability zone so make sure that the ec2 instance that you're going to attach this two and the uh EBS",
    "start": "1157640",
    "end": "1166400"
  },
  {
    "text": "are in the same availability Zone once I make sure that everything is in place I",
    "start": "1166400",
    "end": "1171679"
  },
  {
    "text": "go ahead and create and you you notice that the 1GB volume is now available in The Next Step I'm going to attach this",
    "start": "1171679",
    "end": "1179039"
  },
  {
    "text": "to the primary server and I'm going to make it available as a device at /d/ FD",
    "start": "1179039",
    "end": "1187280"
  },
  {
    "text": "SDF and now uh we are going to log on to the console so I'm I'm now logging on to",
    "start": "1187280",
    "end": "1193760"
  },
  {
    "text": "the primary web server as root user I become a pseudo root user very quickly",
    "start": "1193760",
    "end": "1200120"
  },
  {
    "text": "then I'm going to do Two Steps step one is to move my website step two is to",
    "start": "1200120",
    "end": "1205600"
  },
  {
    "text": "move my database right so first thing I stop my oh even before that even before",
    "start": "1205600",
    "end": "1211480"
  },
  {
    "text": "we get there we need to make sure that the EBS volume is formatted and mounted",
    "start": "1211480",
    "end": "1216559"
  },
  {
    "text": "right this is Step Zero we cannot afford to miss this so I'm going to create the file system on this device and then uh",
    "start": "1216559",
    "end": "1225240"
  },
  {
    "text": "quickly mount it by running mount command and make sure it is mounted properly so now it's available so this",
    "start": "1225240",
    "end": "1232320"
  },
  {
    "text": "is Step Zero right formatting and mounting the device after that we are",
    "start": "1232320",
    "end": "1237679"
  },
  {
    "text": "going to stop the website the Apache web server and then run bunch of commands",
    "start": "1237679",
    "end": "1243880"
  },
  {
    "text": "don't worry if you're not able to follow this particularly if you come from the windows side of the world and it looks very uh very technical don't bother but",
    "start": "1243880",
    "end": "1251520"
  },
  {
    "text": "this step is essentially about taking your existing website and relocating that to the newly created EBS volume so",
    "start": "1251520",
    "end": "1258559"
  },
  {
    "text": "I do it for httpd um Etc and WW directory then I",
    "start": "1258559",
    "end": "1264880"
  },
  {
    "text": "create links to both these and restart Apache web server so now you have",
    "start": "1264880",
    "end": "1271039"
  },
  {
    "text": "successfully moved the website from local instance store to EBS then we do",
    "start": "1271039",
    "end": "1276960"
  },
  {
    "text": "the same thing with uh MySQL first we stop MySQL then we uh create appropriate",
    "start": "1276960",
    "end": "1284360"
  },
  {
    "text": "directories for data files as well as logs and we relocate the latest up to",
    "start": "1284360",
    "end": "1291159"
  },
  {
    "text": "minute up to Second logs and datab database files to EBS then we run some",
    "start": "1291159",
    "end": "1297120"
  },
  {
    "text": "administrative commands to take ownership and finally edit the my docon file where",
    "start": "1297120",
    "end": "1304120"
  },
  {
    "text": "we uh comment out the original data directory location and point it to the new location which is located on the EBS",
    "start": "1304120",
    "end": "1312120"
  },
  {
    "text": "volume do the same thing for log point it to the EBS directory that's it come",
    "start": "1312120",
    "end": "1317919"
  },
  {
    "text": "back back and start my SQL and now go back to the browser and do a refresh technically it doesn't make any",
    "start": "1317919",
    "end": "1324080"
  },
  {
    "text": "difference it's just that the website is getting served from a different volume the database has been successfully moved",
    "start": "1324080",
    "end": "1330320"
  },
  {
    "text": "to another volume technically we haven't made any changes to the architecture but",
    "start": "1330320",
    "end": "1335360"
  },
  {
    "text": "now comes in the expected thing and an an issue with the instance so I go ahead",
    "start": "1335360",
    "end": "1340840"
  },
  {
    "text": "and force this instance to be stopped and do a Refresh on the browser to see a",
    "start": "1340840",
    "end": "1346960"
  },
  {
    "text": "44 now the challenge is not only getting back the original website which we have seen in the previous step but getting",
    "start": "1346960",
    "end": "1353520"
  },
  {
    "text": "back the original transactions so now I forcefully detach the volume from the",
    "start": "1353520",
    "end": "1359840"
  },
  {
    "text": "degraded instance I detach it and now it becomes available all over again and",
    "start": "1359840",
    "end": "1365640"
  },
  {
    "text": "attach it to the secondary instance which is running and which is",
    "start": "1365640",
    "end": "1370799"
  },
  {
    "text": "healthy and once this is created we go back and just access the secondary",
    "start": "1370799",
    "end": "1376320"
  },
  {
    "text": "instance remember the secondary instance doesn't run the latest website or the latest database it just has Apache",
    "start": "1376320",
    "end": "1382679"
  },
  {
    "text": "running it just has plain vanilla MySQL running doesn't have anything beyond that that's why you will see the default",
    "start": "1382679",
    "end": "1388520"
  },
  {
    "text": "landing page of Apache now we log into the instance quickly become the root",
    "start": "1388520",
    "end": "1394600"
  },
  {
    "text": "user don't format the elastic Block store but quickly mount it using the mkd",
    "start": "1394600",
    "end": "1400200"
  },
  {
    "text": "and mount commands and now if you do an LS you'll notice that it has the website",
    "start": "1400200",
    "end": "1405440"
  },
  {
    "text": "and the database successfully relocated available up to minute information now",
    "start": "1405440",
    "end": "1411360"
  },
  {
    "text": "we do the same thing we first stop Apache and we uh rename the existing",
    "start": "1411360",
    "end": "1418480"
  },
  {
    "text": "directories and point the directories from the elastic Block store to Apache start it again that's it now you have",
    "start": "1418480",
    "end": "1425840"
  },
  {
    "text": "created a link from the local directories to EBS so you have just wired your latest build of website to",
    "start": "1425840",
    "end": "1432080"
  },
  {
    "text": "Apache then we do the same thing with mySQL we stop the service we open uh the",
    "start": "1432080",
    "end": "1437640"
  },
  {
    "text": "cont file do exactly what we have done with the original server point it to the",
    "start": "1437640",
    "end": "1442679"
  },
  {
    "text": "EBS directories save it come back to the command prompt start my SQL again go",
    "start": "1442679",
    "end": "1449679"
  },
  {
    "text": "back to the browser do a refresh and you'll go live right and it gives you up to minute",
    "start": "1449679",
    "end": "1455720"
  },
  {
    "text": "information because the database has been persistent and is available even after the termination or unavailability",
    "start": "1455720",
    "end": "1461919"
  },
  {
    "text": "of an instance this is a second line of defense right uh I hope you're able to",
    "start": "1461919",
    "end": "1467600"
  },
  {
    "text": "follow follow this so first was elastic IP the second is elastic Block store now comes in a very interesting slightly",
    "start": "1467600",
    "end": "1474320"
  },
  {
    "text": "Advanced technique it's called instance metadata before we jump to the demo I",
    "start": "1474320",
    "end": "1479360"
  },
  {
    "text": "want to spend some time uh quickly giving you the context particularly for uh folks who are very new and who are",
    "start": "1479360",
    "end": "1486919"
  },
  {
    "text": "not familiar with ec2 environment let me let me set the context here the cloud works very differently I",
    "start": "1486919",
    "end": "1494200"
  },
  {
    "text": "I touched upon that Concept in the morning on the cloud you you don't have the luxury of hard wirring and",
    "start": "1494200",
    "end": "1501080"
  },
  {
    "text": "hardcoding your connection strings end points database uh uh server names IP",
    "start": "1501080",
    "end": "1507039"
  },
  {
    "text": "addresses everything is dynamic everything is dynamic the analogy that I normally give is you know it's it's",
    "start": "1507039",
    "end": "1514440"
  },
  {
    "text": "driving your own car versus getting a taxi when you actually call up a uh cab",
    "start": "1514440",
    "end": "1519520"
  },
  {
    "text": "company and ask for a car you don't have a choice of the number the the car number that you will get right you",
    "start": "1519520",
    "end": "1526600"
  },
  {
    "text": "cannot control you call meu cabs and you cannot say look I'm very very superstitious I'm going for an interview",
    "start": "1526600",
    "end": "1532399"
  },
  {
    "text": "please send me a cab whose number talles down to four it's my lucky number do you think the cab company will really send",
    "start": "1532399",
    "end": "1539080"
  },
  {
    "text": "you that because you believe in it no you got to compromise and you got to get into any cab with any uh number plate",
    "start": "1539080",
    "end": "1546600"
  },
  {
    "text": "the same thing happens on the cloud you ask for a large instance AWS gives you a large instance but you cannot say give",
    "start": "1546600",
    "end": "1553039"
  },
  {
    "text": "me this instance with know specific IP address and make this permanent unless",
    "start": "1553039",
    "end": "1558320"
  },
  {
    "text": "you attach it to an elastic IP you never get that but elastic IP is public and the private IP address is something that",
    "start": "1558320",
    "end": "1564640"
  },
  {
    "text": "you don't control so every time you reconfigure relaunch reboot you you have to deal with a new set of endpoints new",
    "start": "1564640",
    "end": "1571840"
  },
  {
    "text": "set of configurations and so on it's a very stateless environment so how do you deal with it",
    "start": "1571840",
    "end": "1578840"
  },
  {
    "text": "and and actually speaking this is not specific to Cloud this is how SOA is typically uh leveraged by many",
    "start": "1578840",
    "end": "1585480"
  },
  {
    "text": "Enterprises you never hard wire anything never hard code anything uh typically in",
    "start": "1585480",
    "end": "1591480"
  },
  {
    "text": "the in the architectural World developers are familiar with Concepts like registry right if you're coming",
    "start": "1591480",
    "end": "1597600"
  },
  {
    "text": "from the windows side of the world you know what a registry is then you know what is active directory meant for and",
    "start": "1597600",
    "end": "1603360"
  },
  {
    "text": "for the folks who are coming from java background there's something called jdi and property files where you you isolate",
    "start": "1603360",
    "end": "1610960"
  },
  {
    "text": "and you abstract out the information uh which will be populated at runtime but",
    "start": "1610960",
    "end": "1616240"
  },
  {
    "text": "on the cloud uh uh there is no registry of course you can build one but there is no readymade registry that you can go",
    "start": "1616240",
    "end": "1623000"
  },
  {
    "text": "look up you can emulate it by using a variety of techniques but imagine this",
    "start": "1623000",
    "end": "1628440"
  },
  {
    "text": "entire Dynamic world of instances popping up databases popping up and they got to talk to each other and quickly",
    "start": "1628440",
    "end": "1635240"
  },
  {
    "text": "perform a task in the most cohesive way it's very very difficult so I want to",
    "start": "1635240",
    "end": "1640559"
  },
  {
    "text": "give you an example here uh this is very applicable to a",
    "start": "1640559",
    "end": "1646360"
  },
  {
    "text": "scenario uh where an application is running on spot instances you know how spot instances work right the spot",
    "start": "1646360",
    "end": "1653960"
  },
  {
    "text": "instances are E2 instances where there is no fixed price you bid for the compute power that's available and when",
    "start": "1653960",
    "end": "1661320"
  },
  {
    "text": "the bid is one by you you automatically get to instantiate n number of instances",
    "start": "1661320",
    "end": "1667200"
  },
  {
    "text": "and they keep running as long as your bid is still the winning bid the moment you lose the bid that is someone else",
    "start": "1667200",
    "end": "1673080"
  },
  {
    "text": "has won the bid which is slightly higher than yours the instances automatically",
    "start": "1673080",
    "end": "1678320"
  },
  {
    "text": "get shut down you don't get any any choice of taking a backup or performing",
    "start": "1678320",
    "end": "1683519"
  },
  {
    "text": "a cleanup nothing they just go into a sleep mode they are shut down right so",
    "start": "1683519",
    "end": "1689640"
  },
  {
    "text": "when you're dealing with uh an environment like spot instances you cannot afford to have instances that are",
    "start": "1689640",
    "end": "1696120"
  },
  {
    "text": "pre-bundled and which can come up and figure out everything and and perform a task they should be extremely stateless",
    "start": "1696120",
    "end": "1703320"
  },
  {
    "text": "Dynamic and self-aware for example let's say I'm running a task of",
    "start": "1703320",
    "end": "1709480"
  },
  {
    "text": "running um converting multiple number of text files to PDF right and I don't really bother",
    "start": "1709480",
    "end": "1717440"
  },
  {
    "text": "how often uh this process is going to be initiated and how long it's going to take I have a time limit of let's say",
    "start": "1717440",
    "end": "1724200"
  },
  {
    "text": "one week in one week I want to convert n number of text files to PDFs and I have",
    "start": "1724200",
    "end": "1729519"
  },
  {
    "text": "precisely uh uh written an application environment that actually works in that way an instance comes up and asks who am",
    "start": "1729519",
    "end": "1736720"
  },
  {
    "text": "I today and you will tell the instance that today you are a PDF processor then",
    "start": "1736720",
    "end": "1741799"
  },
  {
    "text": "the instance will say where is the input coming from and you'll point it to an input queue then it says okay I know who",
    "start": "1741799",
    "end": "1748279"
  },
  {
    "text": "I am I know where the input is coming from what is a processing application that I should run then you'll actually",
    "start": "1748279",
    "end": "1753919"
  },
  {
    "text": "populate a script it says great I know where it is coming from I know who am who I am I know what to do but",
    "start": "1753919",
    "end": "1760320"
  },
  {
    "text": "ultimately where do I put the output you will point that to another queue which is going to be the output queue once you",
    "start": "1760320",
    "end": "1766320"
  },
  {
    "text": "have this information uh uh created or or or populated within an Ami you can make Ami extremely",
    "start": "1766320",
    "end": "1773600"
  },
  {
    "text": "Dynamic the way it works is this is the ec2 environment the gray box and ec2 instance comes up and it",
    "start": "1773600",
    "end": "1781600"
  },
  {
    "text": "doesn't have uh any registry here but within the ec2 environment we actually",
    "start": "1781600",
    "end": "1787279"
  },
  {
    "text": "expose an end point called 169.254 169.254 this is like a well-known",
    "start": "1787279",
    "end": "1793559"
  },
  {
    "text": "endpoint this is the location that every E2 instance will have access to now the ec2 instance will send a request to this",
    "start": "1793559",
    "end": "1801559"
  },
  {
    "text": "endpoint saying who am I that comes with a lot of data it might even answer who",
    "start": "1801559",
    "end": "1808679"
  },
  {
    "text": "am I what am I what am I supposed to do and why am I here you can you can actually send answers to all these",
    "start": "1808679",
    "end": "1814760"
  },
  {
    "text": "questions by populating that endpoint with a custom metadata once this",
    "start": "1814760",
    "end": "1820200"
  },
  {
    "text": "metadata comes back to E2 instance you can pass it and for example in our case",
    "start": "1820200",
    "end": "1826279"
  },
  {
    "text": "when this ec2 instance qu is this endpoint we tell that hey E2 instance today you are a web server and the next",
    "start": "1826279",
    "end": "1833399"
  },
  {
    "text": "question is if I am the web server where is the latest web website code where is the build then you say it's available in",
    "start": "1833399",
    "end": "1840720"
  },
  {
    "text": "this S3 bucket now the ac2 instance will make a connection to S3 pulls the latest website code reconfigures itself and",
    "start": "1840720",
    "end": "1848120"
  },
  {
    "text": "goes live attaches itself to an elastic IP and everything is taken care of right",
    "start": "1848120",
    "end": "1853640"
  },
  {
    "text": "again this is exactly how uh you can p I you know that's the reason why I took",
    "start": "1853640",
    "end": "1858720"
  },
  {
    "text": "the example of Mumbai daa walas in the morning where you never know what that",
    "start": "1858720",
    "end": "1863760"
  },
  {
    "text": "instance is going to do when it is just booted when it is just launched after the warm-up period is over you can",
    "start": "1863760",
    "end": "1870440"
  },
  {
    "text": "actually instruct that to do a specific job I want to give you a much more realistic scenario for example in our",
    "start": "1870440",
    "end": "1876399"
  },
  {
    "text": "architecture we have a master database and multiple slaves and I have a reason",
    "start": "1876399",
    "end": "1881880"
  },
  {
    "text": "uh for connecting one web server to a specific database server in a specific pattern now on the cloud you never know",
    "start": "1881880",
    "end": "1889919"
  },
  {
    "text": "where the database server is going to be instantiated of course you have control over region and availability Zone but",
    "start": "1889919",
    "end": "1895639"
  },
  {
    "text": "you never know what is the IP address it's going to get and so on so the database instances come up and publish",
    "start": "1895639",
    "end": "1901840"
  },
  {
    "text": "their information into a well-known location you grab that and you populate",
    "start": "1901840",
    "end": "1906880"
  },
  {
    "text": "your ec2 instances metadata and you wire them up so how do you do that let me give you an",
    "start": "1906880",
    "end": "1912480"
  },
  {
    "text": "example uh so I I first create a very simple text file a comma delimited",
    "start": "1912480",
    "end": "1918039"
  },
  {
    "text": "string comma separated string let's call them hypothetically dbs1 dbs2 and dbs3",
    "start": "1918039",
    "end": "1925279"
  },
  {
    "text": "this will be populated dynamically after the database servers come up so we are just assuming these are the connection",
    "start": "1925279",
    "end": "1931480"
  },
  {
    "text": "strings but they get actually grabbed after the database servers are alive now",
    "start": "1931480",
    "end": "1936880"
  },
  {
    "text": "once that is captured we launch an ec2 instance with the standard easy to run",
    "start": "1936880",
    "end": "1942039"
  },
  {
    "text": "instances command everything else reminds very conventional very standard set of parameters but hyphen f followed",
    "start": "1942039",
    "end": "1948519"
  },
  {
    "text": "by user data is an additional metric that you will use additional parameter that you'll use to send the user",
    "start": "1948519",
    "end": "1955960"
  },
  {
    "text": "metadata user data to the instance and after this the instances come",
    "start": "1955960",
    "end": "1961840"
  },
  {
    "text": "up they each of them quiry this 169.254",
    "start": "1961840",
    "end": "1967080"
  },
  {
    "text": "169.254 figure out uh what is a connection string and once they are",
    "start": "1967080",
    "end": "1973679"
  },
  {
    "text": "available if you access each of these servers you know notice that the instance number is zero and the database",
    "start": "1973679",
    "end": "1979840"
  },
  {
    "text": "server is talking to dbs1 right now you grab the second public DNS name of the",
    "start": "1979840",
    "end": "1985840"
  },
  {
    "text": "server you access it to notice that it is talking to slave 2 the same thing for",
    "start": "1985840",
    "end": "1991159"
  },
  {
    "text": "uh server three it talks to dbs3 right and if you are wondering what is a",
    "start": "1991159",
    "end": "1997360"
  },
  {
    "text": "PHP code it's extremely simple uh there is there is nothing very very complex",
    "start": "1997360",
    "end": "2003200"
  },
  {
    "text": "here I just use file get contents function to quiry this end point which is Ami launch index now this gives me an",
    "start": "2003200",
    "end": "2010960"
  },
  {
    "text": "array U of the number of instances that I have created typically if I have launched four the array array is going",
    "start": "2010960",
    "end": "2018159"
  },
  {
    "text": "to be of four elements starts with zero so it gives me an ability to capture the",
    "start": "2018159",
    "end": "2023279"
  },
  {
    "text": "launch index of the current instance then I pass the user data which is a comma separated value and now based on",
    "start": "2023279",
    "end": "2030360"
  },
  {
    "text": "the index I'm going to access each of the elements what that step really means is server zero will talk to uh database",
    "start": "2030360",
    "end": "2039200"
  },
  {
    "text": "1 server one will talk to database server two and so on so these three lines or four lines of code essentially",
    "start": "2039200",
    "end": "2045919"
  },
  {
    "text": "does that and after that it becomes very Dynamic for me to wire up database",
    "start": "2045919",
    "end": "2051158"
  },
  {
    "text": "servers with the E2 instances uh now if you are not very very clear about it",
    "start": "2051159",
    "end": "2057280"
  },
  {
    "text": "catch me after this session I can walk you through uh many more scenarios where this is used but this is extremely",
    "start": "2057280",
    "end": "2062878"
  },
  {
    "text": "useful in creating a dynamic environment on the cloud okay then comes in elastic load balancer",
    "start": "2062879",
    "end": "2070480"
  },
  {
    "text": "uh another very important aspect of making your applications fall",
    "start": "2070480",
    "end": "2076320"
  },
  {
    "text": "tolerant elb or elastic load balancer does two things really well and that's",
    "start": "2076320",
    "end": "2082280"
  },
  {
    "text": "what it is meant for number one the most obvious routing the traffic across a",
    "start": "2082280",
    "end": "2087638"
  },
  {
    "text": "fleet of E2 instances in a highly optimized fashion number one that's the",
    "start": "2087639",
    "end": "2092919"
  },
  {
    "text": "job of the load balancer but beyond that it also does another thing very very well that is tracking the health of the",
    "start": "2092919",
    "end": "2101680"
  },
  {
    "text": "instances now why is that useful if the elb is not intelligent",
    "start": "2101680",
    "end": "2106920"
  },
  {
    "text": "enough it will keep routing the traffic to a dead instance and occasionally some",
    "start": "2106920",
    "end": "2112160"
  },
  {
    "text": "of your users will see 500 server errors or four 44 errors not a great",
    "start": "2112160",
    "end": "2118520"
  },
  {
    "text": "idea but elb is extremely intelligent it can Route traffic only if the instance",
    "start": "2118520",
    "end": "2124400"
  },
  {
    "text": "is reporting to be healthy right so to summarize it does load balancing of",
    "start": "2124400",
    "end": "2130680"
  },
  {
    "text": "course very well but it also does the monitoring of the health and diverting the traffic to healthy instances so it",
    "start": "2130680",
    "end": "2138000"
  },
  {
    "text": "makes a lot of sense to see the demo based on what we have discussed previously we have the same three web",
    "start": "2138000",
    "end": "2143880"
  },
  {
    "text": "servers running uh let's call them shop web server one shop web server 2 and",
    "start": "2143880",
    "end": "2148920"
  },
  {
    "text": "three and they are launched using the metadata so they are talking to a specific database",
    "start": "2148920",
    "end": "2154319"
  },
  {
    "text": "server and now uh I'm going to create a load balancer right and and we point",
    "start": "2154319",
    "end": "2162040"
  },
  {
    "text": "Port 80 of the elb to Port 80 of the E2 instance and this is a very important",
    "start": "2162040",
    "end": "2167839"
  },
  {
    "text": "step basically the Ping protocol is HTTP and it's going to Ping",
    "start": "2167839",
    "end": "2173359"
  },
  {
    "text": "index.php right that's the parameter that I Define but how long should it do it so it's going to check once in every",
    "start": "2173359",
    "end": "2181400"
  },
  {
    "text": "30 seconds or half a minute and when it is doing it if there is no",
    "start": "2181400",
    "end": "2187440"
  },
  {
    "text": "response for more than 5 Seconds it may call it unhealthy and if",
    "start": "2187440",
    "end": "2193640"
  },
  {
    "text": "if that happens for more than two times it'll really mark it unhealthy and and the traffic will not be diverted right",
    "start": "2193640",
    "end": "2200160"
  },
  {
    "text": "so these are the parameters that will Define how the elb should Define the health of the uh instance right so ping",
    "start": "2200160",
    "end": "2208359"
  },
  {
    "text": "every 30 seconds and wait for 5 seconds if there is no response for at least two",
    "start": "2208359",
    "end": "2214720"
  },
  {
    "text": "times mark it unhealthy and if the last consecutive 10 pings",
    "start": "2214720",
    "end": "2220200"
  },
  {
    "text": "have been successful then bring it back as healthy this is what your defining",
    "start": "2220200",
    "end": "2225280"
  },
  {
    "text": "here so it's a very very simple way but very effective in keeping a tab on the",
    "start": "2225280",
    "end": "2230800"
  },
  {
    "text": "health of your ec2 instance once we uh Define the health parameters we can",
    "start": "2230800",
    "end": "2236400"
  },
  {
    "text": "choose the number of instances here for example all these instances should be added in our case I have launched them",
    "start": "2236400",
    "end": "2242359"
  },
  {
    "text": "in the same availability Zone but ideally you should launch them in multiple availability zones to balance",
    "start": "2242359",
    "end": "2247839"
  },
  {
    "text": "the traffic then we add all of them we review the settings once and go ahead",
    "start": "2247839",
    "end": "2253960"
  },
  {
    "text": "and create the load balancer after which you grab the a record of this wire it up",
    "start": "2253960",
    "end": "2260280"
  },
  {
    "text": "with your domain and go live once you by the way uh it it takes a cool down",
    "start": "2260280",
    "end": "2267000"
  },
  {
    "text": "period few minutes to to Really register all the E2 instances into elb that's why",
    "start": "2267000",
    "end": "2273040"
  },
  {
    "text": "initially it will show the status as out of service but eventually it will be become in service indicating that all",
    "start": "2273040",
    "end": "2278560"
  },
  {
    "text": "the servers are now registered successfully with the elb now you grab this and directly access it in the",
    "start": "2278560",
    "end": "2284960"
  },
  {
    "text": "browser not using a specific E2 instance DNS name but actually using the elb uh",
    "start": "2284960",
    "end": "2291160"
  },
  {
    "text": "name the the DNS name now if I constantly",
    "start": "2291160",
    "end": "2296280"
  },
  {
    "text": "refresh you'll notice that I have deliberately written out the connection string and the instance launch index",
    "start": "2296280",
    "end": "2302560"
  },
  {
    "text": "you'll notice that it it's going to vary between 0 1 and two because these are the number of U servers or instances",
    "start": "2302560",
    "end": "2310520"
  },
  {
    "text": "that we have launched so this is elb in action I wish I could do a live demo but unfortunately the cloud is only as",
    "start": "2310520",
    "end": "2317400"
  },
  {
    "text": "strong as the internet connection we have so uh I made sure that I've captured the screenshots so uh that will",
    "start": "2317400",
    "end": "2323920"
  },
  {
    "text": "give you a quick idea on how to set up an elb and make your application more fall tolerant that brings us towards the last",
    "start": "2323920",
    "end": "2331000"
  },
  {
    "text": "topic of this session which is RDS so as we discussed earlier RDS offers you a",
    "start": "2331000",
    "end": "2337560"
  },
  {
    "text": "database plus uh database operations on AWS so it gives you an opportunity to",
    "start": "2337560",
    "end": "2343880"
  },
  {
    "text": "launch MySQL or Oracle database without going through the hassles of U really",
    "start": "2343880",
    "end": "2349920"
  },
  {
    "text": "setting up and configuring and launching and managing uh you got to be a DBA to deal with databases but in RDS you need",
    "start": "2349920",
    "end": "2358920"
  },
  {
    "text": "not be a DBA you request for an RDS instance you only Define the required parameters and the database gets",
    "start": "2358920",
    "end": "2365319"
  },
  {
    "text": "provision to you and as a developer what do you need from a database an endpoint and uh cred operations on it that's it",
    "start": "2365319",
    "end": "2372720"
  },
  {
    "text": "you can treat that like like a like a blackbox service that's exactly what RDS is so in RDS you can choose to launch",
    "start": "2372720",
    "end": "2381079"
  },
  {
    "text": "your database particularly MySQL uh this is applicable only to mySQL in a multi-",
    "start": "2381079",
    "end": "2386920"
  },
  {
    "text": "AZ mode where RDS will provision a primary server in one AZ and the standby",
    "start": "2386920",
    "end": "2393640"
  },
  {
    "text": "in another a and it enables synchronous replication with minimal lag in case of a failure",
    "start": "2393640",
    "end": "2400680"
  },
  {
    "text": "with your primary the RDS infrastructure will promote the standby to the primary",
    "start": "2400680",
    "end": "2405760"
  },
  {
    "text": "and the end point Still Remains the Same that means the connection string Still Remains the Same you're not going to",
    "start": "2405760",
    "end": "2410920"
  },
  {
    "text": "touch your client application at any point and once this automatic fil over",
    "start": "2410920",
    "end": "2416880"
  },
  {
    "text": "happens the client application will continue to talk to your database like the normal way and after a while the",
    "start": "2416880",
    "end": "2423000"
  },
  {
    "text": "primary gets fixed and it gets uh uh into the standby mode and and the",
    "start": "2423000",
    "end": "2429000"
  },
  {
    "text": "replication will again start till the point that it is up to date and this process will just repeat uh in the",
    "start": "2429000",
    "end": "2434680"
  },
  {
    "text": "future right so this offers you a unique advantage of failover without you really",
    "start": "2434680",
    "end": "2440200"
  },
  {
    "text": "configuring anything it's a checkbox option or rather a drop down option so uh you have seen this earlier",
    "start": "2440200",
    "end": "2447160"
  },
  {
    "text": "now U I have already created a multi- AZ database for our e-commerce portal",
    "start": "2447160",
    "end": "2452480"
  },
  {
    "text": "called gadget shop so you just need to select an existing in database say",
    "start": "2452480",
    "end": "2458400"
  },
  {
    "text": "modify and choose the appropriate multi-az flag just turn it turn it to",
    "start": "2458400",
    "end": "2464960"
  },
  {
    "text": "yes and it now gets deployed into multi-az as s right cool so that brings",
    "start": "2464960",
    "end": "2472599"
  },
  {
    "text": "us uh towards the end of this session it was I know we covered quite a few",
    "start": "2472599",
    "end": "2478040"
  },
  {
    "text": "Concepts in a very short span of time but the idea is to give you various line",
    "start": "2478040",
    "end": "2483359"
  },
  {
    "text": "of uh various mechanisms and line of defense to deal with your fa tolerant",
    "start": "2483359",
    "end": "2488599"
  },
  {
    "text": "applications on the cloud so to summarize start with ec2 I should",
    "start": "2488599",
    "end": "2493839"
  },
  {
    "text": "mention start with at least two ec2 instances minimum two instances deployed",
    "start": "2493839",
    "end": "2499440"
  },
  {
    "text": "in uh multiple availability zones then go for uh an elastic IP don't",
    "start": "2499440",
    "end": "2505880"
  },
  {
    "text": "forget to create and attach an elastic Block store extremely critical then learn how to bundle generic emis and",
    "start": "2505880",
    "end": "2513280"
  },
  {
    "text": "deal with the instance metadata if you are scaling out and and you have uh a lot of traffic coming in",
    "start": "2513280",
    "end": "2520839"
  },
  {
    "text": "you can associate ec2 instances with elb and enable Health uh monitoring not",
    "start": "2520839",
    "end": "2525920"
  },
  {
    "text": "exactly monitoring but tracking for health and routing the traffic appropriately and if you are dealing",
    "start": "2525920",
    "end": "2531079"
  },
  {
    "text": "with RDS don't forget to launch it in a multi- AZ mode right so these are the",
    "start": "2531079",
    "end": "2537480"
  },
  {
    "text": "resources uh obviously you can visit ec2 SL EBS and/ RDS URLs on aws.amazon.com",
    "start": "2537480",
    "end": "2546960"
  },
  {
    "text": "you can learn a lot about these services and also download the getting started guides and various other",
    "start": "2546960",
    "end": "2552880"
  },
  {
    "text": "resources so that brings us uh towards the end of the first session",
    "start": "2552880",
    "end": "2559520"
  }
]