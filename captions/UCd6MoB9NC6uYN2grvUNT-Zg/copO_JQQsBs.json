[
  {
    "start": "0",
    "end": "224000"
  },
  {
    "text": "here fantastic to have a have a large crowd like this to talk about my favorite topic AWS",
    "start": "199",
    "end": "7759"
  },
  {
    "text": "Lambda so before we get into some of the exciting new announcements that you heard about this morning in the keynote",
    "start": "8519",
    "end": "13839"
  },
  {
    "text": "from Andy I want to remind everybody what it is that we launched back in November with",
    "start": "13839",
    "end": "19800"
  },
  {
    "text": "Lambda so if you heard our our reinvent announcements we talked about these things called Lambda functions these",
    "start": "19800",
    "end": "27560"
  },
  {
    "text": "stateless pieces of code that you can execute in the cloud without the need to provision servers or infrastructure to",
    "start": "27560",
    "end": "33640"
  },
  {
    "text": "get them running and while that alone was kind of a an exciting thing to to think about",
    "start": "33640",
    "end": "39480"
  },
  {
    "text": "being able to run that kind of compute so easily and dynamically we also talked about a",
    "start": "39480",
    "end": "45000"
  },
  {
    "text": "specific application back in November what we called event driven compute the combination of using Lambda",
    "start": "45000",
    "end": "52239"
  },
  {
    "text": "functions with other AWS Services things like Amazon",
    "start": "52239",
    "end": "57559"
  },
  {
    "text": "S3 things like Dynamo d B Kinesis streams so that as data enters the cloud",
    "start": "57559",
    "end": "64920"
  },
  {
    "text": "into any of these storage mechanisms or transitions from one to another you can apply Lambda functions to it to do",
    "start": "64920",
    "end": "71840"
  },
  {
    "text": "really fun things transform the data audit the data change and filter and",
    "start": "71840",
    "end": "76880"
  },
  {
    "text": "copy the data making it really easy to operate on that data as it enters the cloud or moves around within the",
    "start": "76880",
    "end": "84640"
  },
  {
    "text": "cloud and we talked about some exciting scenarios for it adding things like data triggers to",
    "start": "85600",
    "end": "91960"
  },
  {
    "text": "S3 so you could do things like upload images from a mobile application or from",
    "start": "91960",
    "end": "98159"
  },
  {
    "text": "a web app and then automatically without having to do any additional deployments",
    "start": "98159",
    "end": "103360"
  },
  {
    "text": "or infrastructure for each one of those files as it lands an S3 apply some compute to it like thumbnailing an image",
    "start": "103360",
    "end": "110159"
  },
  {
    "text": "or compressing the file or kicking off a workflow associated with that",
    "start": "110159",
    "end": "115719"
  },
  {
    "text": "file and similarly with the new Dynamo DB streams preview you can do something",
    "start": "115799",
    "end": "123000"
  },
  {
    "text": "that works just like data Triggers on Dynamo DB so that as you make changes to a table that table can create an update",
    "start": "123000",
    "end": "131599"
  },
  {
    "text": "stream tell Lambda about it and then you can take action on those events so that",
    "start": "131599",
    "end": "138040"
  },
  {
    "text": "as those events hit Lambda you're able to trigger and do things like copy that data to a",
    "start": "138040",
    "end": "144959"
  },
  {
    "text": "different table and not just copy it but apply arbitrary compute to it so you can",
    "start": "144959",
    "end": "150000"
  },
  {
    "text": "filter transform or even look for maybe some something you weren't expecting like a security violation and send",
    "start": "150000",
    "end": "156560"
  },
  {
    "text": "yourself an event notification really exciting ideas and one of the things that's been",
    "start": "156560",
    "end": "162760"
  },
  {
    "text": "really gratifying since then is to see all the different customers that have used Lambda not just for those scenarios",
    "start": "162760",
    "end": "169800"
  },
  {
    "text": "that we imagin and talked about back in November but for a whole bunch of new ones things like real-time log",
    "start": "169800",
    "end": "175280"
  },
  {
    "text": "processing that native X is doing for their prediction analytics large scale distributed search from fire ey across",
    "start": "175280",
    "end": "181840"
  },
  {
    "text": "all of their blog content where they're taking advantage of that ability of Lambda to scale horizontally and very",
    "start": "181840",
    "end": "188760"
  },
  {
    "text": "dynamically to accomplish lots of work even in a short amount of time and then instantly shrink back to nothing when",
    "start": "188760",
    "end": "195280"
  },
  {
    "text": "that work is complete one of the exciting ones that we've seen too is vivant solar where",
    "start": "195280",
    "end": "200560"
  },
  {
    "text": "they've created a mobile application that their installers can use to take pictures of a work site and then",
    "start": "200560",
    "end": "207239"
  },
  {
    "text": "automatically ingest them into the cloud thumbnail them index them do all kinds of transformations to them without",
    "start": "207239",
    "end": "214000"
  },
  {
    "text": "having to stand up servers or create a whole lot of backend infrastructure really exciting ideas and it's been",
    "start": "214000",
    "end": "219760"
  },
  {
    "text": "fantastic seeing all of the things customers have done and today we want to invite even",
    "start": "219760",
    "end": "226480"
  },
  {
    "start": "224000",
    "end": "553000"
  },
  {
    "text": "more people to come and use Lambda for this exciting new capability so we're",
    "start": "226480",
    "end": "232040"
  },
  {
    "text": "announcing the general availability of Lambda and with that",
    "start": "232040",
    "end": "239640"
  },
  {
    "text": "we want to invite production workloads of All Sorts now we've done a couple of",
    "start": "240040",
    "end": "245319"
  },
  {
    "text": "things to make this even easier one of them is if you noticed at preview we launched with support for 25 concurrent",
    "start": "245319",
    "end": "254280"
  },
  {
    "text": "executions we doubled that again in January to 50 and today we're announcing that we're doubling it again to 100 so",
    "start": "254280",
    "end": "260880"
  },
  {
    "text": "even if you're operating in the free tier even if you're not paying us anything we'll let you operate up to 100",
    "start": "260880",
    "end": "266120"
  },
  {
    "text": "concurrent Lambda functions at once and and offer th000 TPS that's to all",
    "start": "266120",
    "end": "272400"
  },
  {
    "text": "accounts regardless of whether or not they're in the free tier now that isn't the limit that",
    "start": "272400",
    "end": "277800"
  },
  {
    "text": "Lambda imposes architecturally that's just what you get by default and so we very much want you to bring your",
    "start": "277800",
    "end": "283680"
  },
  {
    "text": "production workloads to us and by contacting AWS support we'll be happy to",
    "start": "283680",
    "end": "288919"
  },
  {
    "text": "lift that to take on your production workloads to at whatever level you you have to",
    "start": "288919",
    "end": "295240"
  },
  {
    "text": "bring now the other thing that happened during the preview is we got some great feedback from our customers and I want",
    "start": "295240",
    "end": "301840"
  },
  {
    "text": "to say thank you to all the developers who've used Lambda over the last few months and helped us understand what",
    "start": "301840",
    "end": "307280"
  },
  {
    "text": "their needs were and how to make the service even better based on that feedback some of the the things we'll be",
    "start": "307280",
    "end": "314000"
  },
  {
    "text": "talking about here today in terms of new features which is really exciting and a few of them I just want to mention for",
    "start": "314000",
    "end": "319720"
  },
  {
    "text": "example like adding the support for multiple Lambda functions for a single kesis stream which came directly from",
    "start": "319720",
    "end": "325840"
  },
  {
    "text": "customers people who started using this and said hey this would make my job even easier and so we're excited to offer",
    "start": "325840",
    "end": "331759"
  },
  {
    "text": "that as well as simplifying the programming",
    "start": "331759",
    "end": "335759"
  },
  {
    "text": "model now you heard in the key note this morning our other major announcement today which is that we are extending the",
    "start": "336800",
    "end": "343880"
  },
  {
    "text": "capability of Lambda to a new domain probably the single most",
    "start": "343880",
    "end": "349360"
  },
  {
    "text": "requested feature that we had from customers after we launched was support for synchronous realtime style",
    "start": "349360",
    "end": "356560"
  },
  {
    "text": "execution because people started using Lambda in in this event driven way and",
    "start": "356560",
    "end": "361680"
  },
  {
    "text": "said hey you know I love this idea of a scalable easyto usee compute can't you",
    "start": "361680",
    "end": "367400"
  },
  {
    "text": "bring that to me and let me use that for building say a mobile backend because I",
    "start": "367400",
    "end": "372680"
  },
  {
    "text": "love that idea of being able to just deploy some code and then call it from any application I want I can already do",
    "start": "372680",
    "end": "379000"
  },
  {
    "text": "that asynchronously I'd like to also do it synchronously so we've added three things to make this easy a new request",
    "start": "379000",
    "end": "385880"
  },
  {
    "text": "response mode to offer synchronous invocation support for the ad WS mobile SDK and what we call Easy",
    "start": "385880",
    "end": "392280"
  },
  {
    "text": "personalization and I want to talk about each of these in turn so first of all the synchronous",
    "start": "392280",
    "end": "398080"
  },
  {
    "text": "support this works a lot if you've used Lambda this works a lot like async except of course you can now retrieve",
    "start": "398080",
    "end": "404160"
  },
  {
    "text": "values as well so in a very low latency way you can make a call into a Lambda function and get the result of that",
    "start": "404160",
    "end": "410400"
  },
  {
    "text": "function back into your application to take action on it so now you can create these scalable backends for mobile apps",
    "start": "410400",
    "end": "417080"
  },
  {
    "text": "that require you to retrieve data as well as upload data to the cloud you can move those stateless",
    "start": "417080",
    "end": "423400"
  },
  {
    "text": "portions of your web apps onto Lambda where that makes sense to do and some of",
    "start": "423400",
    "end": "428800"
  },
  {
    "text": "these exciting new ideas like iot devices where maybe you want to create a cloud ecosystem or offload computations",
    "start": "428800",
    "end": "436319"
  },
  {
    "text": "that don't make sense to do on a constrained or battery operated device even if they require you to use native",
    "start": "436319",
    "end": "441919"
  },
  {
    "text": "code written in C or C++ all of that can now be written with Lambda transitioned up to the cloud and then operated on",
    "start": "441919",
    "end": "449199"
  },
  {
    "text": "from that device or from that application and all of this complements that existing asynchronous functionality",
    "start": "449199",
    "end": "455080"
  },
  {
    "text": "so it works in that same simple way that Lambda already does integration with the AWS mobile SDK",
    "start": "455080",
    "end": "463080"
  },
  {
    "text": "so whether you prefer Android or iOS we're making that available as of today you can go download those sdks and get",
    "start": "463080",
    "end": "470120"
  },
  {
    "text": "started building applications right away and uh depending on how we're doing here with the with the technology we get in a",
    "start": "470120",
    "end": "477120"
  },
  {
    "text": "thumbs up hopefully we'll get a chance to take a look at that in demo form now the other one I want to talk",
    "start": "477120",
    "end": "482720"
  },
  {
    "text": "about is the personalization aspect if you think thematically about what we did with Lambda it was all about making",
    "start": "482720",
    "end": "489400"
  },
  {
    "text": "things simple and easy to do right being able to build scalable solutions that",
    "start": "489400",
    "end": "494599"
  },
  {
    "text": "compute in the cloud in a way that just requires you to upload your code not to have to think about all of the uh other",
    "start": "494599",
    "end": "501319"
  },
  {
    "text": "kind of more mundane aspects that are required but that's not where the complexity ends and and one of the",
    "start": "501319",
    "end": "507520"
  },
  {
    "text": "things we hear all the time from mobile developers is that they don't like having to do the boring parts and every",
    "start": "507520",
    "end": "515080"
  },
  {
    "text": "mobile app has these two questions it typically needs to answer who is the end user working on that device and what",
    "start": "515080",
    "end": "521560"
  },
  {
    "text": "kind of device do they have because maybe I want to send artifacts that are specific to that form factor you know",
    "start": "521560",
    "end": "527680"
  },
  {
    "text": "could be a Kindle fireal tablet versus a phone or I might need to say build a multi-tenanted database right a customer",
    "start": "527680",
    "end": "534800"
  },
  {
    "text": "database where I need to know who the end user is not just which app is calling me and and so we've provided",
    "start": "534800",
    "end": "540360"
  },
  {
    "text": "both pieces of information to every Lambda call that's made from a mobile device making it really easy for you to",
    "start": "540360",
    "end": "547720"
  },
  {
    "text": "write code that just takes advantage of that information without having to go and scrape it off",
    "start": "547720",
    "end": "554200"
  },
  {
    "start": "553000",
    "end": "1000000"
  },
  {
    "text": "yourself okay can we see if we can cut over to the demo",
    "start": "554800",
    "end": "561200"
  },
  {
    "text": "here all right so I want to show you um what it",
    "start": "561360",
    "end": "568440"
  },
  {
    "text": "looks like to actually build a mobile backend and we're going to start here",
    "start": "568440",
    "end": "573680"
  },
  {
    "text": "first on the cloud side so what you're looking at here is the Lambda",
    "start": "573680",
    "end": "579800"
  },
  {
    "text": "console and we've got the code on the right hand side very simple code this is",
    "start": "579800",
    "end": "584959"
  },
  {
    "text": "basically an echo except I'm making one small modification just to illustrate that we actually are doing a little bit",
    "start": "584959",
    "end": "590360"
  },
  {
    "text": "of computation and on the left you see the sample event that we're going to send to Lambda so I'm using a really simple Json",
    "start": "590360",
    "end": "597560"
  },
  {
    "text": "format where I'm sending it the first first name and a last name and then we're going to go ahead and actually change the first name inside the Lambda",
    "start": "597560",
    "end": "604320"
  },
  {
    "text": "function the only other thing in that code at all you see is a couple of log lines and we'll take a look in a second",
    "start": "604320",
    "end": "609720"
  },
  {
    "text": "at that personalization information that's getting logged through there now if you've used Lambda you know",
    "start": "609720",
    "end": "617920"
  },
  {
    "text": "that one of the things you can do in the console with this interactive editor is not just write the code but also execute",
    "start": "617920",
    "end": "623800"
  },
  {
    "text": "the code so I'm going to go ahead and hop into test mode here",
    "start": "623800",
    "end": "631319"
  },
  {
    "text": "oops pardon me while I get the right",
    "start": "631560",
    "end": "637440"
  },
  {
    "text": "button Okay click",
    "start": "637920",
    "end": "641639"
  },
  {
    "text": "invoke all right so you see the result here where we've made a we changed the first name we've passed the last name",
    "start": "643720",
    "end": "650000"
  },
  {
    "text": "through we've just echoed it back again so now before I even move over to the client I know that I already have a",
    "start": "650000",
    "end": "655920"
  },
  {
    "text": "backend that's working in the cloud not just running but deployed scalable",
    "start": "655920",
    "end": "661800"
  },
  {
    "text": "monitored and maintained by AWS so all of that is ready to",
    "start": "661800",
    "end": "667000"
  },
  {
    "text": "go so let's hop over now and take a look at the client side what I'm going to show you here is",
    "start": "667000",
    "end": "673639"
  },
  {
    "text": "is Android Studio with the getting started app so if you've ever worked through that this will look fairly",
    "start": "673639",
    "end": "679240"
  },
  {
    "text": "familiar and I want to start first by showing you the equivalent over in the Android Java side for that Json format",
    "start": "679240",
    "end": "687160"
  },
  {
    "text": "we just looked at so what you're seeing here is a simple pojo where I'm defining first name and last name what's",
    "start": "687160",
    "end": "693320"
  },
  {
    "text": "interesting in this file isn't my amazing ability to write two strings into a Java class it's what you don't see nothing in there that refers to",
    "start": "693320",
    "end": "700040"
  },
  {
    "text": "Lambda this is just a simple pojo just a simple Java",
    "start": "700040",
    "end": "705439"
  },
  {
    "text": "object here's the definition for the Lambda function we have an interface that",
    "start": "707839",
    "end": "713360"
  },
  {
    "text": "refers to that Echo function right this is the function that's operating in the cloud it's the Lambda function called Echo and it takes in that pojo a name",
    "start": "713360",
    "end": "721279"
  },
  {
    "text": "info and it retrieves a pojo as well so what's going to happen here what we've set up is the ability to easily Marshall",
    "start": "721279",
    "end": "728360"
  },
  {
    "text": "a pojo into ja into Json across the wire and have it pop out on the other side in",
    "start": "728360",
    "end": "734160"
  },
  {
    "text": "no. JS we wanted to make this really easy for Java programmers who find it more idiomatic to work in terms of",
    "start": "734160",
    "end": "739959"
  },
  {
    "text": "objects to send information and retrieve it back from the cloud now you're not required to do this of course if you",
    "start": "739959",
    "end": "745920"
  },
  {
    "text": "prefer to work in a Json document format you can obviously send that to or you can take control and do your own",
    "start": "745920",
    "end": "751560"
  },
  {
    "text": "marshalling so lots of flexibility but we've made this one super simple so that if you just happen to have an object",
    "start": "751560",
    "end": "757519"
  },
  {
    "text": "already without any changes to your class structure without any kind of intrusion you can start using it with",
    "start": "757519",
    "end": "763959"
  },
  {
    "text": "with a Lambda function and we know that there are two things developers hate especially mobile developers this",
    "start": "763959",
    "end": "769560"
  },
  {
    "text": "complexity and lockin we wanted to make sure that you don't have either in this",
    "start": "769560",
    "end": "775160"
  },
  {
    "text": "setup and now finally we'll take a look at the actual activity here again this is the sort of the",
    "start": "776079",
    "end": "782000"
  },
  {
    "text": "default one that um you more or less get out of the box and here's the magic",
    "start": "782000",
    "end": "788360"
  },
  {
    "text": "line right where we actually make that call into the Lambda function from the client so I instantiate that invoker",
    "start": "788360",
    "end": "795959"
  },
  {
    "text": "interface that we just took a look at and this is going to now Marshall that pojo onto the wire and then when I get",
    "start": "795959",
    "end": "802240"
  },
  {
    "text": "that Echo statement it'll retrieve it back again and you can see the uh the setup for that on the last line here",
    "start": "802240",
    "end": "809199"
  },
  {
    "text": "it's very simple I basically instantiate this this Factory for serialization and that's it about four lines in there that",
    "start": "809199",
    "end": "815800"
  },
  {
    "text": "actually refer to something involving Lambda and I'm ready to",
    "start": "815800",
    "end": "820959"
  },
  {
    "text": "go if I take a look here at my uh emulator we'll um assum we can get",
    "start": "821480",
    "end": "830000"
  },
  {
    "text": "this see if my emulator will wake up",
    "start": "833880",
    "end": "839079"
  },
  {
    "text": "all right let's try uh maybe we can deploy this one more",
    "start": "840839",
    "end": "847160"
  },
  {
    "text": "time so if we're able to do this in a in a couple of seconds we'll give it a give it a whirl um what this will do",
    "start": "847160",
    "end": "853759"
  },
  {
    "text": "is take that that J that Java object excuse me convert it into Json send it",
    "start": "853759",
    "end": "860560"
  },
  {
    "text": "across the wire to the cloud function and looks like my emulator is",
    "start": "860560",
    "end": "866120"
  },
  {
    "text": "not going to behave all righty you know you're going to have",
    "start": "866120",
    "end": "872120"
  },
  {
    "text": "to imagine that that part so apologies for the emulator here but we got a chance to to look at the",
    "start": "872120",
    "end": "879920"
  },
  {
    "text": "code one more thing I want to do before we leave this section so back here in",
    "start": "879920",
    "end": "885279"
  },
  {
    "text": "the AWS console I want to take a look at the um",
    "start": "885279",
    "end": "890920"
  },
  {
    "text": "the cloudwatch log so one of the nice things that Lambda does for you is it automatically integrates with Amazon",
    "start": "890920",
    "end": "896600"
  },
  {
    "text": "Cloud watch so you can see metrics and Telemetry for your function including a",
    "start": "896600",
    "end": "901839"
  },
  {
    "text": "new one that we've added to take a look at throttles you can also get logs generated automatically so we'll do some",
    "start": "901839",
    "end": "907440"
  },
  {
    "text": "logging for you by default and you can add some additional logs that we we saw that in the code so here's the output of",
    "start": "907440",
    "end": "913399"
  },
  {
    "text": "those log statements the one in particular I wanted to show you is the personalization aspect and we give you",
    "start": "913399",
    "end": "920800"
  },
  {
    "text": "three sections here in what we call the context object the first one is information about the",
    "start": "920800",
    "end": "926440"
  },
  {
    "text": "app the second one is information about the device and the third one is information",
    "start": "926440",
    "end": "932040"
  },
  {
    "text": "about the end user identity now in the example I just showed you we used Amazon Cognito to",
    "start": "932040",
    "end": "939199"
  },
  {
    "text": "establish the identity of the end user who's running that application Cognito offers both both",
    "start": "939199",
    "end": "946040"
  },
  {
    "text": "authenticated and unauthenticated I did a simple unauthenticated one here in this example had we chosen authenticated",
    "start": "946040",
    "end": "952440"
  },
  {
    "text": "I would have had to log in with some kind of ooth Provider like Facebook in order to get that application ready to",
    "start": "952440",
    "end": "959120"
  },
  {
    "text": "go and had I done that the identity my actual end user identity would be the",
    "start": "959120",
    "end": "965079"
  },
  {
    "text": "one that would be present here now in the log file and this is the same piece of information that from inside your",
    "start": "965079",
    "end": "971399"
  },
  {
    "text": "Lambda function you can use for example as a key in a in a Dynamo DB table to",
    "start": "971399",
    "end": "976639"
  },
  {
    "text": "allow you to establish a multi-tenanted database of customer information or to",
    "start": "976639",
    "end": "981759"
  },
  {
    "text": "just condition your code based on which customer is calling you so very easy way",
    "start": "981759",
    "end": "987759"
  },
  {
    "text": "to take that identity information as well as device and app information and then customize your Cloud backend on",
    "start": "987759",
    "end": "994240"
  },
  {
    "text": "it all righty if we can switch back to the slides",
    "start": "994240",
    "end": "999839"
  },
  {
    "start": "1000000",
    "end": "1048000"
  },
  {
    "text": "now what's fun about that demo is what you don't get in it what we didn't have",
    "start": "1004319",
    "end": "1009480"
  },
  {
    "text": "to do to make any of that work we didn't have to do any capacity planning we didn't have to do any",
    "start": "1009480",
    "end": "1016360"
  },
  {
    "text": "deployment we didn't have to figure out how to write scalable code we didn't have to go build our own monitoring",
    "start": "1016360",
    "end": "1021639"
  },
  {
    "text": "logging Health checking and updating Solutions all of that comes built in",
    "start": "1021639",
    "end": "1026918"
  },
  {
    "text": "just by virtue of using Lambda in the first place and this lack of infrastructure to manage is one of the",
    "start": "1026919",
    "end": "1032918"
  },
  {
    "text": "most powerful characteristics of what Lambda functions offer because you can build a backend",
    "start": "1032919",
    "end": "1039120"
  },
  {
    "text": "like that for your mobile application without having to go become an expert in",
    "start": "1039120",
    "end": "1044160"
  },
  {
    "text": "all the cloud deployment and infrastructure pieces",
    "start": "1044160",
    "end": "1050079"
  },
  {
    "start": "1048000",
    "end": "1142000"
  },
  {
    "text": "the other thing we didn't have to do is think about what it means to scale that code that mobile backend or or any",
    "start": "1052559",
    "end": "1058799"
  },
  {
    "text": "Lambda function for that matter either across the range of devices or up and down as we have different levels of of",
    "start": "1058799",
    "end": "1066799"
  },
  {
    "text": "TPS different levels of usage say throughout the day or throughout the month if there's a secret sauce in",
    "start": "1066799",
    "end": "1073039"
  },
  {
    "text": "Lambda this is it that it automatically scales to match the event rate this is some great characteristics",
    "start": "1073039",
    "end": "1080320"
  },
  {
    "text": "for example you can't over under provision because you don't provision at all it also means that if you're sending",
    "start": "1080320",
    "end": "1087039"
  },
  {
    "text": "events or processing them between two different pieces of AWS infrastructure let's say you're putting items into an",
    "start": "1087039",
    "end": "1093640"
  },
  {
    "text": "S3 bucket and then you're going to transform the items and put them back into another bucket or maybe extract",
    "start": "1093640",
    "end": "1098880"
  },
  {
    "text": "metadata send it onto Dynamo you don't have to get in the way of those two services and figure out how to still be",
    "start": "1098880",
    "end": "1105640"
  },
  {
    "text": "scalable and responsive we'll take care of that for you so the nice thing about it is you can",
    "start": "1105640",
    "end": "1111400"
  },
  {
    "text": "now do the hookup here very easily in many cases just with a few clicks on the console to set up two different an event",
    "start": "1111400",
    "end": "1117360"
  },
  {
    "text": "source to Lambda and then you can let us worry about the problem of how to do that impedance matching for that event flow",
    "start": "1117360",
    "end": "1124960"
  },
  {
    "text": "whether you've got one event a month or 100,000 a second and the same thing applies to a",
    "start": "1124960",
    "end": "1133200"
  },
  {
    "text": "mobile app and a mobile backend whether you're just developing your app or your apps become hugely successful the Lambda",
    "start": "1133200",
    "end": "1139520"
  },
  {
    "text": "function just scales elastically with you now I mentioned this on an earlier",
    "start": "1139520",
    "end": "1146240"
  },
  {
    "start": "1142000",
    "end": "1208000"
  },
  {
    "text": "slide but I wanted to reinforce the point one of the great things about Lambda is that is that we don't attempt",
    "start": "1146240",
    "end": "1153760"
  },
  {
    "text": "to curate the set of libraries for you we knew early on when we started talking about building this service that there",
    "start": "1153760",
    "end": "1160159"
  },
  {
    "text": "was no way that we could anticipate all the possible needs for example we the",
    "start": "1160159",
    "end": "1165400"
  },
  {
    "text": "the rise of some of the interesting iot devices that's occurring now and some of the libraries that they require and if",
    "start": "1165400",
    "end": "1171760"
  },
  {
    "text": "we put ourselves in your way trying to get that done we would forever be slowing you down so instead what we said",
    "start": "1171760",
    "end": "1179159"
  },
  {
    "text": "was you can come to this system and bring the code that you want you can run processes you can create threads you can",
    "start": "1179159",
    "end": "1187120"
  },
  {
    "text": "start executables and background jobs in a variety of languages so Java python",
    "start": "1187120",
    "end": "1192840"
  },
  {
    "text": "Ruby they're all sitting there on the box and you can start processes in any of them from your node code",
    "start": "1192840",
    "end": "1199280"
  },
  {
    "text": "you can bring any library that you want so if we don't have something there that that is already what you need you can",
    "start": "1199280",
    "end": "1205000"
  },
  {
    "text": "upload what you what you want including native libraries and finally the pricing model",
    "start": "1205000",
    "end": "1211799"
  },
  {
    "start": "1208000",
    "end": "1284000"
  },
  {
    "text": "for this you can't have a nano compute system if you have a mega pricing model",
    "start": "1211799",
    "end": "1218720"
  },
  {
    "text": "so to go along with Lambda we have a pricing mechanism that matches that fine level of",
    "start": "1218720",
    "end": "1225760"
  },
  {
    "text": "granularity Lambda with Lambda you buy compute time 100 millisecond increments so even incredibly small amounts of",
    "start": "1225760",
    "end": "1232520"
  },
  {
    "text": "compute are economical and you don't have to worry about trying to pack them in or use them up or buying a monthly",
    "start": "1232520",
    "end": "1239559"
  },
  {
    "text": "allotment and then maybe not using all of it at the end of the month it pays you go on a new incredibly",
    "start": "1239559",
    "end": "1246559"
  },
  {
    "text": "micro level and there are no minimums no hourly daily or monthly minimums ever",
    "start": "1246559",
    "end": "1252640"
  },
  {
    "text": "also no per device fees so doesn't matter how many devices there are you",
    "start": "1252640",
    "end": "1257720"
  },
  {
    "text": "only pay when you're actually doing work on a back end in fact you only pay when you're",
    "start": "1257720",
    "end": "1263559"
  },
  {
    "text": "doing work period this never pay for idle promise is one of the one of the key attributes of the pricing",
    "start": "1263559",
    "end": "1269960"
  },
  {
    "text": "model and in terms of the free tier we give you a million requests every month and 400,000 gigabyte seconds every month",
    "start": "1269960",
    "end": "1277360"
  },
  {
    "text": "of compute for free that's every month every customer no matter how long you've",
    "start": "1277360",
    "end": "1282799"
  },
  {
    "text": "been an AWS customer now I want to take a little bit of time and talk about actually using",
    "start": "1282799",
    "end": "1290080"
  },
  {
    "start": "1284000",
    "end": "1451000"
  },
  {
    "text": "Lambda what does the programming model look like here so there are a few different ways",
    "start": "1290080",
    "end": "1295960"
  },
  {
    "text": "that you can get to a Lambda function probably the most obvious one of course is what we're talking about today with",
    "start": "1295960",
    "end": "1302279"
  },
  {
    "text": "mobile compute mobile backends you can call into it from a mobile web app and you can either choose to wait",
    "start": "1302279",
    "end": "1309200"
  },
  {
    "text": "for a response or you can have it be asynchronous in which case Lambda will just start the computation without you",
    "start": "1309200",
    "end": "1314480"
  },
  {
    "text": "having to wait you can do that from the AWS SDK any of the languages that it supports",
    "start": "1314480",
    "end": "1321000"
  },
  {
    "text": "starting today with the AWS mobile SDK in either Android or iOS and of course",
    "start": "1321000",
    "end": "1326559"
  },
  {
    "text": "from rest apis uh command line interfaces and of course from within Lambda itself and that latter one's",
    "start": "1326559",
    "end": "1333120"
  },
  {
    "text": "really interesting because you can use Lambda to choreograph other Lambda functions you can also send events from",
    "start": "1333120",
    "end": "1340400"
  },
  {
    "text": "Amazon S3 and now SNS as well and in all of those cases that I",
    "start": "1340400",
    "end": "1346880"
  },
  {
    "text": "just mentioned the model model is very simple typically one event corresponds to one invocation of your",
    "start": "1346880",
    "end": "1353559"
  },
  {
    "text": "code if your code has a problem if it fails for any reason or if you indicate an error we'll try two additional times",
    "start": "1353559",
    "end": "1360720"
  },
  {
    "text": "and that's just how we orchestrate the invocations you of course are free to catch errors yourself and you can even",
    "start": "1360720",
    "end": "1365919"
  },
  {
    "text": "start other Lambda functions yourself so there's now a lot of flexibility in how you want to manage manage those",
    "start": "1365919",
    "end": "1371360"
  },
  {
    "text": "invocations especially since you can also call synchronously as of today now the other category of events",
    "start": "1371360",
    "end": "1378640"
  },
  {
    "text": "are events that where Amazon will go out and get them on your behalf and there are two cases of that that we have on",
    "start": "1378640",
    "end": "1383960"
  },
  {
    "text": "offer at the moment Kinesis streams where ler will retrieve records for you and Dynamo DB update streams which is",
    "start": "1383960",
    "end": "1391200"
  },
  {
    "text": "currently in preview where will do the same thing for for Dynamo DB table changes now the model for these is a",
    "start": "1391200",
    "end": "1397799"
  },
  {
    "text": "little bit different in part because these are ordered ordered Shard models",
    "start": "1397799",
    "end": "1402880"
  },
  {
    "text": "so what that what that means in simple terms is they're essentially multiple parallel streams of data",
    "start": "1402880",
    "end": "1409120"
  },
  {
    "text": "and Lambda will naturally provide and extend to the parallelism of those shards for either Kinesis or Dynamo DB",
    "start": "1409120",
    "end": "1416799"
  },
  {
    "text": "inside each Shard however the events that come through it are ordered so if you think about this in Dynamo terms",
    "start": "1416799",
    "end": "1422520"
  },
  {
    "text": "right that ordering is important a delete followed by an insert is very different than an insert followed by a delete so you wouldn't want Lambda",
    "start": "1422520",
    "end": "1428960"
  },
  {
    "text": "screwing up the order for that Lambda will continue trying your",
    "start": "1428960",
    "end": "1434200"
  },
  {
    "text": "code until that data Sunset it right so we won't give we won't give up on your code but your code can decide at any",
    "start": "1434200",
    "end": "1440799"
  },
  {
    "text": "point whether or not it wants to continue trying or discard maybe there's a bad record in there and continue on so",
    "start": "1440799",
    "end": "1447600"
  },
  {
    "text": "you've got complete flexibility in how you want to do that processing so let's talk a little bit",
    "start": "1447600",
    "end": "1454000"
  },
  {
    "text": "about writing Lambda functions first of all the the basics",
    "start": "1454000",
    "end": "1459120"
  },
  {
    "text": "one thing I get asked a lot is like oh how do I know my code will work with your strange version of node well our",
    "start": "1459120",
    "end": "1464880"
  },
  {
    "text": "Strange version of node is just the standard version of node we don't do anything magical to it we don't provide our own just sort of different language",
    "start": "1464880",
    "end": "1471960"
  },
  {
    "text": "runtime and that's because we don't trust the the language as the level for security in the first place we build",
    "start": "1471960",
    "end": "1477480"
  },
  {
    "text": "security and as a fundamental piece of infrastructure so no matter what language you're running no matter which",
    "start": "1477480",
    "end": "1482520"
  },
  {
    "text": "processes you run even if you run native code you still have security and isolation on this",
    "start": "1482520",
    "end": "1488520"
  },
  {
    "text": "platform to make things easy we install the AWS SDK by",
    "start": "1488520",
    "end": "1493640"
  },
  {
    "text": "default and you're not required to use that of course but if you want to use it it makes it really easy to call any",
    "start": "1493640",
    "end": "1498840"
  },
  {
    "text": "other AWS service one of the things lots of our customers do is they use S3 or Dynamo DB",
    "start": "1498840",
    "end": "1506000"
  },
  {
    "text": "as their stateful data storage and that way they get the benefit of the Lambda stateless Paradigm while still being",
    "start": "1506000",
    "end": "1511760"
  },
  {
    "text": "able to have a completely elastic way to store as much data as they need and access it quickly from inside their",
    "start": "1511760",
    "end": "1518880"
  },
  {
    "text": "functions Lambda also handles the inbound traffic so there's no need to deploy or build a web server here in",
    "start": "1518880",
    "end": "1524919"
  },
  {
    "text": "fact we don't let you do that the stateless model as I mentioned is",
    "start": "1524919",
    "end": "1530799"
  },
  {
    "text": "typically coupled with some kind of storage system so you know you're it's easy to use this with S3 Dynamo but you",
    "start": "1530799",
    "end": "1536279"
  },
  {
    "text": "can use it with any internet storage that you like and the way we usually Express the",
    "start": "1536279",
    "end": "1542240"
  },
  {
    "text": "the stateless model is that there's no Affinity that we guarantee between your code and the underlying piece of",
    "start": "1542240",
    "end": "1548799"
  },
  {
    "text": "infrastructure so over time we may run your code on different pieces of infrastructure we'll attempt to reuse",
    "start": "1548799",
    "end": "1555600"
  },
  {
    "text": "your your code your your nodejs process for as long as makes sense and then we",
    "start": "1555600",
    "end": "1561360"
  },
  {
    "text": "will deconstruct it and create new ones but always operating it in isolation and",
    "start": "1561360",
    "end": "1566559"
  },
  {
    "text": "security from all other invocations of your code from other Lambda functions you might own in your account and",
    "start": "1566559",
    "end": "1572120"
  },
  {
    "text": "certainly from other accounts owned by other customers and with the stateless Proviso",
    "start": "1572120",
    "end": "1578399"
  },
  {
    "text": "it's a very familiar model as I mentioned you can create processes and threads there aren't unnatural",
    "start": "1578399",
    "end": "1583720"
  },
  {
    "text": "restrictions around language features like that you can read and write to the file system you can even do things like",
    "start": "1583720",
    "end": "1590279"
  },
  {
    "text": "open sockets directly and code directly against a tcpip socket if you so",
    "start": "1590279",
    "end": "1596559"
  },
  {
    "start": "1596000",
    "end": "1751000"
  },
  {
    "text": "choose now one of the questions we we get asked a lot and certainly sort of people asked a lot during the preview",
    "start": "1598240",
    "end": "1604159"
  },
  {
    "text": "period was hey Amazon now has this range of compute Services how do I know which",
    "start": "1604159",
    "end": "1610279"
  },
  {
    "text": "one is right for me there's ec2 there's the ec2 container service which is now also generally available there's Lambda",
    "start": "1610279",
    "end": "1617640"
  },
  {
    "text": "what's what's the right one for my use case so I want to talk very briefly here about the distinction between the two",
    "start": "1617640",
    "end": "1624039"
  },
  {
    "text": "different families of compute Services as I mentioned before you",
    "start": "1624039",
    "end": "1629200"
  },
  {
    "text": "should think of Lambda as a request driven compute if you're familiar with S3 and how it does object storage this",
    "start": "1629200",
    "end": "1635679"
  },
  {
    "text": "is the same metaphor right so just as you would you would do a put to S3 or a",
    "start": "1635679",
    "end": "1640840"
  },
  {
    "text": "get to retrieve an object in the cloud with Lambda you invoke on a per request basis to get some compute to occur",
    "start": "1640840",
    "end": "1649880"
  },
  {
    "text": "ec2 is designed to let you bring your existing applications to the",
    "start": "1649880",
    "end": "1655159"
  },
  {
    "text": "cloud so it makes it very easy to take code that you've already got running without changes and operate it on top of",
    "start": "1655159",
    "end": "1661760"
  },
  {
    "text": "of AWS infrastructure and if you happen to prefer containers if you want to work at the level of Docker for instance then",
    "start": "1661760",
    "end": "1668480"
  },
  {
    "text": "the easy2 container service makes that really easy to do ec2 and ECS are all about",
    "start": "1668480",
    "end": "1675320"
  },
  {
    "text": "flexibility flexibility of control in terms of how many containers you have and where you put them flexibility about",
    "start": "1675320",
    "end": "1682039"
  },
  {
    "text": "which Hardware platform you choose which types of instances you choose even which kind of of operating system you",
    "start": "1682039",
    "end": "1689159"
  },
  {
    "text": "want Lambda prioritizes ease of use and quick development capability so we have",
    "start": "1689159",
    "end": "1695240"
  },
  {
    "text": "a default hardware and a default operating system Amazon Linux and our goal is to make make it",
    "start": "1695240",
    "end": "1701880"
  },
  {
    "text": "possible for you to deploy and use that platform and get the benefits of cloud compute without some of the challenges",
    "start": "1701880",
    "end": "1708600"
  },
  {
    "text": "of setting up and and choosing the different infrastructure pieces so that means that we own and",
    "start": "1708600",
    "end": "1714559"
  },
  {
    "text": "manage the infrastructure within lambdaa with ec2 and ECS you own it and of course that also means that you can",
    "start": "1714559",
    "end": "1720159"
  },
  {
    "text": "configure it if you need customization capability Lambda also scales implicitly",
    "start": "1720159",
    "end": "1726480"
  },
  {
    "text": "and so as I as I mentioned you don't scale by asking for more Hardware you simply do more work so just as you would",
    "start": "1726480",
    "end": "1733519"
  },
  {
    "text": "save more objects to S3 when you want to create more cloud storage you simply ask",
    "start": "1733519",
    "end": "1738760"
  },
  {
    "text": "Lambda to do more work on your behalf in the case of a mobile backend for example you have another user another device",
    "start": "1738760",
    "end": "1745880"
  },
  {
    "text": "maybe they're making more more requests and Lambda simply scales implicitly to match that",
    "start": "1745880",
    "end": "1752240"
  },
  {
    "start": "1751000",
    "end": "1854000"
  },
  {
    "text": "rate I want to take a a moment here and talk about some of the the other new features that we're launching",
    "start": "1754760",
    "end": "1761519"
  },
  {
    "text": "today one of the most exciting things working on the Lambda team is having the ability to work with so many Partners in",
    "start": "1761519",
    "end": "1769600"
  },
  {
    "text": "AWS to create new and new ways to use our services together to make it even",
    "start": "1769600",
    "end": "1775320"
  },
  {
    "text": "easier for people to combine them so today we're announcing the combination",
    "start": "1775320",
    "end": "1780480"
  },
  {
    "text": "of Amazon simple notification service or SNS with",
    "start": "1780480",
    "end": "1785679"
  },
  {
    "text": "Lambda any service today that's using SNS to send messages now automatically has a",
    "start": "1785919",
    "end": "1792559"
  },
  {
    "text": "mechanism to attach Dynamic computable capability to to",
    "start": "1792559",
    "end": "1798159"
  },
  {
    "text": "those messages so in addition to sending your messages to an HTTP endpoint for",
    "start": "1798159",
    "end": "1803200"
  },
  {
    "text": "example or a mobile device you can now send them to a Lambda function and Trigger code any kind of code that you",
    "start": "1803200",
    "end": "1810240"
  },
  {
    "text": "want this makes it easy to do things like turn Amazon cloudwatch alarms into",
    "start": "1810240",
    "end": "1815360"
  },
  {
    "text": "actionable Data because you can go attach code to them without having to set up any infrastructure or manage it",
    "start": "1815360",
    "end": "1820919"
  },
  {
    "text": "on your own what's really exciting for SNS is that this gives that Serv the",
    "start": "1820919",
    "end": "1828399"
  },
  {
    "text": "ability to do really interesting things with messages maybe you want to templa messages",
    "start": "1828399",
    "end": "1834960"
  },
  {
    "text": "or send one message to multiple customers or run a simple AB test that depends on some content of the message",
    "start": "1834960",
    "end": "1842000"
  },
  {
    "text": "or some external content you have about the customers now with Lambda you can combine SNS and compute and put those",
    "start": "1842000",
    "end": "1849880"
  },
  {
    "text": "two things together again without any of the challenges of setting up and running your own",
    "start": "1849880",
    "end": "1855360"
  },
  {
    "start": "1854000",
    "end": "1942000"
  },
  {
    "text": "infrastructure the other integration we're announcing to today is with the Amazon Cognito service so you already",
    "start": "1855639",
    "end": "1862360"
  },
  {
    "text": "saw me Demo one piece of this which was the use of Cognito identity to send the",
    "start": "1862360",
    "end": "1867760"
  },
  {
    "text": "information about the end user from a mobile app up to the Lambda cloud and",
    "start": "1867760",
    "end": "1874440"
  },
  {
    "text": "use it inside the Lambda function but Cognito has a second capability called Cognito sync and that allows information",
    "start": "1874440",
    "end": "1882000"
  },
  {
    "text": "to be synchronized across different enduser devices so for instance if the",
    "start": "1882000",
    "end": "1887039"
  },
  {
    "text": "user has uh game State play or if they're you have user preference data you can keep that synchronized between a",
    "start": "1887039",
    "end": "1893240"
  },
  {
    "text": "user's phone and a user's tablet so wherever they go that data is",
    "start": "1893240",
    "end": "1899200"
  },
  {
    "text": "current we already had the capability in cognito to synchronize between the devices today we're announcing the",
    "start": "1899320",
    "end": "1905240"
  },
  {
    "text": "ability to also synchronize between devices and Lambda functions so that you can easily add actions that occur",
    "start": "1905240",
    "end": "1912399"
  },
  {
    "text": "anytime that that information changes so for example maybe some game state has changed or one of the devices",
    "start": "1912399",
    "end": "1918720"
  },
  {
    "text": "and now not only do you want to keep it consistent and up to-date everywhere but you want to go trigger something to happen in the cloud maybe you want to go",
    "start": "1918720",
    "end": "1925440"
  },
  {
    "text": "initiate an inapp purchase offer for that user or maybe you want to go audit the data to make sure that it's it's",
    "start": "1925440",
    "end": "1931360"
  },
  {
    "text": "valid and you actually believe the user really is winning really easy now to to hook up Cognito with a few clicks in the",
    "start": "1931360",
    "end": "1938080"
  },
  {
    "text": "console write some code and have that take place anytime that state",
    "start": "1938080",
    "end": "1944039"
  },
  {
    "start": "1942000",
    "end": "1995000"
  },
  {
    "text": "changes and one of the fun things here of course is now you can start to do this mix match as we add more AWS",
    "start": "1944039",
    "end": "1950000"
  },
  {
    "text": "service integration points you can create interesting scenarios that couple them together for example customize",
    "start": "1950000",
    "end": "1956240"
  },
  {
    "text": "messages in SNS we can buy an SNS in Lambda and now we have the ability to do targeted",
    "start": "1956240",
    "end": "1963360"
  },
  {
    "text": "audience delivery of those messages or you want to send an offer when a user runs out of lives in a game",
    "start": "1963360",
    "end": "1969639"
  },
  {
    "text": "well you can now take Cognito sync add Lambda and SNS and you've got a complete solution to do",
    "start": "1969639",
    "end": "1976000"
  },
  {
    "text": "that maybe you you're devising an iot appliance and you need to get data",
    "start": "1976000",
    "end": "1982360"
  },
  {
    "text": "streamed up into the cloud and then filtered and aggregated well the combination of Kinesis and then treating",
    "start": "1982360",
    "end": "1989559"
  },
  {
    "text": "those records as events in Lambda makes it very easy to build that that composite",
    "start": "1989559",
    "end": "1996240"
  },
  {
    "start": "1995000",
    "end": "2094000"
  },
  {
    "text": "outcome now some of the functions that we've been building out come directly from the user",
    "start": "1998519",
    "end": "2004679"
  },
  {
    "text": "requests and one of the pieces of very very just criticism that we got with",
    "start": "2004679",
    "end": "2010480"
  },
  {
    "text": "early Lambda preview users was that it was too hard to set up the role",
    "start": "2010480",
    "end": "2016039"
  },
  {
    "text": "authorization for example authorizing S3 to send events to Lambda required sort",
    "start": "2016039",
    "end": "2021159"
  },
  {
    "text": "of the secondary role and and a set of steps around creating those",
    "start": "2021159",
    "end": "2026559"
  },
  {
    "text": "credentials and so today we are removing that that requirement there's no more need for invocation roles and we're",
    "start": "2026559",
    "end": "2033480"
  },
  {
    "text": "adding to Lambda resource policies that make it very easy for you to say which",
    "start": "2033480",
    "end": "2038519"
  },
  {
    "text": "accounts or which resources such as an S3 bucket or an SNS topic you want to",
    "start": "2038519",
    "end": "2044519"
  },
  {
    "text": "permit to send events to your Lambda",
    "start": "2044519",
    "end": "2048919"
  },
  {
    "text": "function at the same time we're adding cross account capabilities so if those",
    "start": "2049760",
    "end": "2054919"
  },
  {
    "text": "buckets or resources aren't owned by the same account that owns the function you're still able to do that",
    "start": "2054919",
    "end": "2060560"
  },
  {
    "text": "authorization in a completely secure Manner and finally we're also adding",
    "start": "2060560",
    "end": "2066118"
  },
  {
    "text": "cloud trail integration support today so if you use cloud trail to audit your",
    "start": "2066119",
    "end": "2071358"
  },
  {
    "text": "your AWS API usage that's now also supported for Lambda and lambda's also a great way if",
    "start": "2071359",
    "end": "2079000"
  },
  {
    "text": "you are using cloud trail to take those audit logs and then process them inside",
    "start": "2079000",
    "end": "2084599"
  },
  {
    "text": "Lambda either for review of what's going on in there or to find particular",
    "start": "2084599",
    "end": "2090520"
  },
  {
    "text": "particular entries or particular API uses that you want to take action",
    "start": "2090520",
    "end": "2095679"
  },
  {
    "start": "2094000",
    "end": "2177000"
  },
  {
    "text": "on the other piece of feed back that we hear a lot from users is that they want more help doing Diagnostics and",
    "start": "2095879",
    "end": "2102520"
  },
  {
    "text": "debugging with their Lambda functions and so we're adding several things today to make that easier the first one which",
    "start": "2102520",
    "end": "2109000"
  },
  {
    "text": "you saw briefly in the demo is the addition of a fourth customer facing cloudwatch metric that tells you whether or not",
    "start": "2109000",
    "end": "2115880"
  },
  {
    "text": "you're getting throttled on your concurrent request limit that way if you're hitting that",
    "start": "2115880",
    "end": "2121079"
  },
  {
    "text": "limit and you want to be able to go higher you have a large production workload you know that it's time to call",
    "start": "2121079",
    "end": "2127000"
  },
  {
    "text": "the the support team and tell them that you need a higher a higher number on the other hand if you're doing development",
    "start": "2127000",
    "end": "2133119"
  },
  {
    "text": "and you just want transparency because maybe you've got a bug in your code and you're you know calling too many functions now you can see that easily",
    "start": "2133119",
    "end": "2140560"
  },
  {
    "text": "right in the cloudwatch console or in the Lambda console the other thing that people want",
    "start": "2140560",
    "end": "2146400"
  },
  {
    "text": "is the ability to find the relevant logs for Lambda very easily and so we've",
    "start": "2146400",
    "end": "2152839"
  },
  {
    "text": "added to the cloudwatch logs system the ability to sort by time",
    "start": "2152839",
    "end": "2158160"
  },
  {
    "text": "we've also put the creation date for logs into the log stream name itself and",
    "start": "2158160",
    "end": "2163440"
  },
  {
    "text": "we passed that log stream name along to the to the Lambda function making a lot easier to correlate what's happening",
    "start": "2163440",
    "end": "2169280"
  },
  {
    "text": "dynamically especially if you have a whole lot of functions running in parallel with the data that you get post",
    "start": "2169280",
    "end": "2175040"
  },
  {
    "text": "Haw and need to sort through in cloudwatch logs okay and the biggie the one that",
    "start": "2175040",
    "end": "2182560"
  },
  {
    "start": "2177000",
    "end": "2262000"
  },
  {
    "text": "lots of people have been waiting for first I want to say before we talk about the coming Attraction part that",
    "start": "2182560",
    "end": "2190560"
  },
  {
    "text": "Java is already present in the file system of every Lambda function as is Python and Ruby and you are already",
    "start": "2190560",
    "end": "2196960"
  },
  {
    "text": "welcome invited and able in a completely secure way to go run processes in any of",
    "start": "2196960",
    "end": "2202240"
  },
  {
    "text": "these languages and in fact we'll do for those processes what we do for node itself",
    "start": "2202240",
    "end": "2209599"
  },
  {
    "text": "which is to freeze it at the point where your request ends and then rehydrate it the next time we reuse that container so",
    "start": "2209599",
    "end": "2216960"
  },
  {
    "text": "that means that you aren't paying for example in the case of Java for a jvm restart so this is already working and",
    "start": "2216960",
    "end": "2223520"
  },
  {
    "text": "available today in fact that's been there since we launched at reinvent however what we're going to do",
    "start": "2223520",
    "end": "2228680"
  },
  {
    "text": "in the next few weeks is we're going to make this even easier because we totally understand that our Java customers do",
    "start": "2228680",
    "end": "2234800"
  },
  {
    "text": "not necessarily love having even two lines of node.js that they have to go right because maybe they just don't like",
    "start": "2234800",
    "end": "2241800"
  },
  {
    "text": "node and so we will remove that requirement we'll allow you in the console program aut atically and c and",
    "start": "2241800",
    "end": "2248400"
  },
  {
    "text": "through the CLI to upload either in node or in Java specify the language of what",
    "start": "2248400",
    "end": "2253440"
  },
  {
    "text": "it is that you're uploading and then we will start that process natively in the correct language so look for that very",
    "start": "2253440",
    "end": "2259640"
  },
  {
    "text": "soon as a as a Coming Attraction here so to close I want to give you",
    "start": "2259640",
    "end": "2267680"
  },
  {
    "start": "2262000",
    "end": "2381000"
  },
  {
    "text": "three things that you can do to get started with Lambda number one go to the Lambda",
    "start": "2267680",
    "end": "2273040"
  },
  {
    "text": "console and create and test your first Lambda function",
    "start": "2273040",
    "end": "2278920"
  },
  {
    "text": "this is really easy to do you saw me set one up takes just a few extra seconds to actually name and create that",
    "start": "2278920",
    "end": "2285160"
  },
  {
    "text": "function and you could do it up to a million times a month on us so doesn't cost you anything to",
    "start": "2285160",
    "end": "2291079"
  },
  {
    "text": "try the second thing I'd suggest you do is go create a mobile app with the AWS",
    "start": "2291079",
    "end": "2298319"
  },
  {
    "text": "mobile SDK and hook it up to Lambda as a backend you saw in that demo that it",
    "start": "2298319",
    "end": "2304920"
  },
  {
    "text": "only takes a few lines of code to integrate the two pieces and you're not required to change anything deep about your data structures or application",
    "start": "2304920",
    "end": "2311240"
  },
  {
    "text": "structure in order to do that makes it really easy to try this out and see for yourself what you think about the",
    "start": "2311240",
    "end": "2316720"
  },
  {
    "text": "scalability and power of the Lambda back end used for a mobile",
    "start": "2316720",
    "end": "2322000"
  },
  {
    "text": "app third with the number of different AWS services that now support Lambda I'd",
    "start": "2322000",
    "end": "2327839"
  },
  {
    "text": "encourage you to pick one that you're already using if you're an S3 user for example turn on bucket notifications if",
    "start": "2327839",
    "end": "2334560"
  },
  {
    "text": "you're an SNS user try sending messages to to Lambda we support wire up for both",
    "start": "2334560",
    "end": "2340040"
  },
  {
    "text": "those event sources in the Lambda console and from the console of those those other services as well making it",
    "start": "2340040",
    "end": "2346520"
  },
  {
    "text": "really easy to turn it on even if all you do is experiment with sending log statements to the uh to the cloudwatch",
    "start": "2346520",
    "end": "2353599"
  },
  {
    "text": "logs output it'll give you a sense of of what it takes to to wire up events how",
    "start": "2353599",
    "end": "2359000"
  },
  {
    "text": "easy event driven compute is and help you then evaluate for yourself whether this is something that might make sense",
    "start": "2359000",
    "end": "2364200"
  },
  {
    "text": "for the business thanks so much and uh we've got a",
    "start": "2364200",
    "end": "2369599"
  },
  {
    "text": "microphone set up here in the center um got some time left if people have",
    "start": "2369599",
    "end": "2374790"
  },
  {
    "text": "[Applause]",
    "start": "2374790",
    "end": "2383690"
  },
  {
    "text": "questions so uh this business of stateless Computing uh what is the",
    "start": "2384599",
    "end": "2389760"
  },
  {
    "text": "fastest quickest most fine grained way to retrieve your state when you call a Lambda function I",
    "start": "2389760",
    "end": "2398760"
  },
  {
    "text": "mean is it a Dynamo DB query I mean what's suppose you have some function",
    "start": "2398760",
    "end": "2404440"
  },
  {
    "text": "that needs to retrieve some State before it can do anything",
    "start": "2404440",
    "end": "2410160"
  },
  {
    "text": "um what's the finest grain option sure so um uh two answers to that question um",
    "start": "2410160",
    "end": "2417599"
  },
  {
    "text": "and then maybe a forward-looking third uh Dynamo DB is a is a great way to do",
    "start": "2417599",
    "end": "2422640"
  },
  {
    "text": "low latency data retrieval um so if you've got information that you want to",
    "start": "2422640",
    "end": "2427760"
  },
  {
    "text": "access quickly and you want to access it on a per invocation basis that's probably one of your best and easiest",
    "start": "2427760",
    "end": "2433520"
  },
  {
    "text": "options to do the other thing that we do by virtue of reusing that node.js",
    "start": "2433520",
    "end": "2439680"
  },
  {
    "text": "container across multiple calls is we do make it possible for you to Cache information either in memory or on the",
    "start": "2439680",
    "end": "2446440"
  },
  {
    "text": "local disk and so you're welcome to do that as well if you then come back to an instance that has been used in the past",
    "start": "2446440",
    "end": "2453480"
  },
  {
    "text": "you have access to that information now that's obviously not appropriate for all requests on all applications but if",
    "start": "2453480",
    "end": "2460119"
  },
  {
    "text": "you're using it for example as a cache of information or a cach of downloaded data that's really simple very",
    "start": "2460119",
    "end": "2466400"
  },
  {
    "text": "conventional way that you can do that and every time we reuse the container you effectively have the opportunity for",
    "start": "2466400",
    "end": "2472000"
  },
  {
    "text": "a cach hit you're not using sticky lb elb or something like that to get back to the same container no no so there",
    "start": "2472000",
    "end": "2479319"
  },
  {
    "text": "isn't there isn't a uh request to container Affinity there so if you're sharing a whole lot of them then of",
    "start": "2479319",
    "end": "2485160"
  },
  {
    "text": "course um you know the better thing to do is to reach to a service which can have that that um uh decoupled",
    "start": "2485160",
    "end": "2492920"
  },
  {
    "text": "relationship to your containers now there are some interesting things coming down the line if you heard the uh uh",
    "start": "2492920",
    "end": "2500000"
  },
  {
    "text": "about our file system uh product that's being that's being announced today uh we will ultimately be integrating that and",
    "start": "2500000",
    "end": "2507119"
  },
  {
    "text": "other forms of storage within Lambda itself to make it very easy to cach data so that you can actually cross",
    "start": "2507119",
    "end": "2513560"
  },
  {
    "text": "containers with something that's persistent so so as as those things get as those things get lost look for",
    "start": "2513560",
    "end": "2520119"
  },
  {
    "text": "additional production integration between the two services but for session State I've got to use something like Dynamo DB",
    "start": "2520119",
    "end": "2527839"
  },
  {
    "start": "2527000",
    "end": "2671000"
  },
  {
    "text": "correct hi uh my first question is does limda support",
    "start": "2529440",
    "end": "2534599"
  },
  {
    "text": "RDS and this L to support PHP and by the Le can I run command line",
    "start": "2534599",
    "end": "2541280"
  },
  {
    "text": "applications through Lambda like I have some video processing uh demands in my",
    "start": "2541280",
    "end": "2546520"
  },
  {
    "text": "website I had to convert codex and so on so I used the FFM Peg command line program can I run them through Lambda",
    "start": "2546520",
    "end": "2554000"
  },
  {
    "text": "yeah so um uh let's see so uh PHP um I believe is already in the trout jail",
    "start": "2554000",
    "end": "2560680"
  },
  {
    "text": "that we create um and if not you could certainly could upload that yourself um and we've been we've certainly gotten",
    "start": "2560680",
    "end": "2566559"
  },
  {
    "text": "request to consider adding that as another natively supported language as well for direct invocation the same way",
    "start": "2566559",
    "end": "2572400"
  },
  {
    "text": "we're we're planning to do for Java um so I I would say that's that that one on",
    "start": "2572400",
    "end": "2577480"
  },
  {
    "text": "the road map probably a little further down than uh than Java and and python are um what was question number two RDS",
    "start": "2577480",
    "end": "2585480"
  },
  {
    "text": "RDS yeah so today we do not have rdf RDS life cycle integration with Lambda uh if",
    "start": "2585480",
    "end": "2593359"
  },
  {
    "text": "your RDS instance is available from a normal internet call then you know",
    "start": "2593359",
    "end": "2599319"
  },
  {
    "text": "basically accessible then of course you can reach it just as you could any other any other IP address calling out from",
    "start": "2599319",
    "end": "2605119"
  },
  {
    "text": "Lambda but what a lot of L of people mean by that question is you will We Will We ultimately have VPC support and",
    "start": "2605119",
    "end": "2612240"
  },
  {
    "text": "control plane uh life cycle events that are also integrated with Lambda and the answer is yes to both of those both on",
    "start": "2612240",
    "end": "2618000"
  },
  {
    "text": "the road map uh VPC is probably the highest priority there so we'll be working on that one as well and the last",
    "start": "2618000",
    "end": "2623880"
  },
  {
    "text": "one is command line applications yep so the the CLI the AWS CLI already includes",
    "start": "2623880",
    "end": "2630760"
  },
  {
    "text": "Lambda today so if if you're calling in from the outside and want to use Lambda that's already that's already there uh",
    "start": "2630760",
    "end": "2637440"
  },
  {
    "text": "from within Lambda you can fire up shell script so you can run things essentially that look like command line applications",
    "start": "2637440",
    "end": "2643640"
  },
  {
    "text": "with respect to FFM peg in particular uh we do have people who are already doing uh companies who are already doing um",
    "start": "2643640",
    "end": "2651319"
  },
  {
    "text": "basically small video translation or extracting metadata and moving it over to Dynamo DB and those kind of things",
    "start": "2651319",
    "end": "2657359"
  },
  {
    "text": "work really well for um there's essentially that same kind of stateless workload so you may have to upload the",
    "start": "2657359",
    "end": "2663160"
  },
  {
    "text": "the specific libraries that you want with your in your zip but you're you're certainly welcome to do that and we have examples of people doing it already Okay",
    "start": "2663160",
    "end": "2670400"
  },
  {
    "text": "thank you yes um is it possible to to write Lambda functions and make them available",
    "start": "2670400",
    "end": "2678440"
  },
  {
    "start": "2671000",
    "end": "2818000"
  },
  {
    "text": "to developers on the AWS Marketplace",
    "start": "2678440",
    "end": "2684079"
  },
  {
    "text": "so kind of a nuanced answer to that um I don't have deep Marketplace integration",
    "start": "2684079",
    "end": "2689599"
  },
  {
    "text": "today so if you go to Marketplace you won't see any of the support for for Lambda functions in there the same way",
    "start": "2689599",
    "end": "2695359"
  },
  {
    "text": "we have say for AMI today that's something that we're excited to go do and we envision but we don't have that built out yet what you what we do have",
    "start": "2695359",
    "end": "2702520"
  },
  {
    "text": "are some of the building blocks there so today we are announcing and launching support for cross account access which",
    "start": "2702520",
    "end": "2709000"
  },
  {
    "text": "is as you might imagine one of The Primitives you need in order to make that make sense so you can create a",
    "start": "2709000",
    "end": "2714160"
  },
  {
    "text": "Lambda function and then you can authorize different accounts right accounts that aren't the same as yours",
    "start": "2714160",
    "end": "2719280"
  },
  {
    "text": "to go use it so that's our first step down this road and you should expect that we will eventually be doing more to",
    "start": "2719280",
    "end": "2724760"
  },
  {
    "text": "integrate directly with the marketplace okay thank you sure hi I have two questions uh first",
    "start": "2724760",
    "end": "2731200"
  },
  {
    "text": "one is uh is there any chance we can uh trigger uh from uh some sort of",
    "start": "2731200",
    "end": "2737680"
  },
  {
    "text": "stream data events so that it calls the LMA function with any change in the database",
    "start": "2737680",
    "end": "2743680"
  },
  {
    "text": "rather than Dynamo um so was that with sorry I",
    "start": "2743680",
    "end": "2748760"
  },
  {
    "text": "missed the beginning of your question oh whether uh basically the lamba function can be invoked based on a event",
    "start": "2748760",
    "end": "2755319"
  },
  {
    "text": "rather than a Dynamo event ah um so we we don't have a built-in integration for",
    "start": "2755319",
    "end": "2760680"
  },
  {
    "text": "that today but you can pull those Events off and send them you know send them yourself as you like or write our own",
    "start": "2760680",
    "end": "2766559"
  },
  {
    "text": "trigger basically I see exactly okay and and the last one is U uh what kind of uh",
    "start": "2766559",
    "end": "2772119"
  },
  {
    "text": "version management do you have for the functions that you upload ah that is a great",
    "start": "2772119",
    "end": "2777240"
  },
  {
    "text": "question so um so we're planning to do deployment versioning today the answer I",
    "start": "2777240",
    "end": "2783160"
  },
  {
    "text": "have for you is the somewhat uh unsatisfying one of well you can change you know you can mangle the name to",
    "start": "2783160",
    "end": "2788200"
  },
  {
    "text": "include a version number in it and then you can manage it that way which which of course plenty of people are doing and will always work um the the much more",
    "start": "2788200",
    "end": "2795680"
  },
  {
    "text": "interesting answer to it is that we're in the process now of building out some version support so that you'll be able",
    "start": "2795680",
    "end": "2801119"
  },
  {
    "text": "to basically um Mark different functions as being at a particular version and then when you call a function also be",
    "start": "2801119",
    "end": "2807079"
  },
  {
    "text": "able to specify the version that you want to call I see I see so um that one wasn't quite ready for today's",
    "start": "2807079",
    "end": "2812119"
  },
  {
    "text": "announcement but we are hard hard at work on it expect that to be in the 2015 road map okay thank you",
    "start": "2812119",
    "end": "2818760"
  },
  {
    "start": "2818000",
    "end": "2954000"
  },
  {
    "text": "sure hi uh my question is regarding the LDA performance compared to ec2 instance",
    "start": "2818760",
    "end": "2826440"
  },
  {
    "text": "like uh LDA will give me the best performance available or depending on my ec2 instance I can get a better",
    "start": "2826440",
    "end": "2832720"
  },
  {
    "text": "performance and then uh running my code on lamb yeah so that's a that is a a",
    "start": "2832720",
    "end": "2839240"
  },
  {
    "text": "kind of a long topic I mean I'll give you I'll give you some very quick observations there um if uh one of the",
    "start": "2839240",
    "end": "2847040"
  },
  {
    "text": "we sometimes talk about is kind of utilization like you know if you how many Lambda functions or how much work",
    "start": "2847040",
    "end": "2852079"
  },
  {
    "text": "would you have to do to keep something busy right and generally like what I say for that one is if you've got an ec2",
    "start": "2852079",
    "end": "2857680"
  },
  {
    "text": "instance and you can keep it more than 50% occupied you know all the time then",
    "start": "2857680",
    "end": "2863200"
  },
  {
    "text": "you are probably going to be able to achieve a lower sort of uh cost performance ratio with that than you",
    "start": "2863200",
    "end": "2868640"
  },
  {
    "text": "would with Lambda right managing it of course what we see in practice is that those numbers often tend to be much much",
    "start": "2868640",
    "end": "2873960"
  },
  {
    "text": "lower than 50% it's very hard for people to keep a box warm all the time doing useful work so one of the advantages of",
    "start": "2873960",
    "end": "2880720"
  },
  {
    "text": "Lambda is I can pack that workload in and I've got a whole system that is sort of purpose-built and purpose managed to",
    "start": "2880720",
    "end": "2887720"
  },
  {
    "text": "achieve exactly that so as work comes and goes right I can get that work condensed into sort of the the smallest",
    "start": "2887720",
    "end": "2893599"
  },
  {
    "text": "number of instances the other aspect of your question is I guess I would",
    "start": "2893599",
    "end": "2899240"
  },
  {
    "text": "interpret as you know which which type of Hardware do you want to run on so obviously there are there are a whole",
    "start": "2899240",
    "end": "2905440"
  },
  {
    "text": "there's a whole array of Hardware that dc2 makes available and that that list keeps expanding if you've got very",
    "start": "2905440",
    "end": "2910520"
  },
  {
    "text": "specific needs like you know you need compute optimized or memory optimized or discop dis optimized instances then you",
    "start": "2910520",
    "end": "2917839"
  },
  {
    "text": "know you can and should Avail yourself of the fact that we make all of those different Hardware choices available and",
    "start": "2917839",
    "end": "2923079"
  },
  {
    "text": "they will um be better for your particular purpose than the general purpose choices that we make for Lambda",
    "start": "2923079",
    "end": "2928839"
  },
  {
    "text": "right kind of generally true since we're picking one size to to fit everybody in this regard um again however I would say",
    "start": "2928839",
    "end": "2935559"
  },
  {
    "text": "it that depends on your workload what we see is that a lot of people have relatively generic workloads right that",
    "start": "2935559",
    "end": "2942240"
  },
  {
    "text": "don't require very specialized hardware and which which of course is why we have a lot of general purpose instance types",
    "start": "2942240",
    "end": "2948760"
  },
  {
    "text": "um and in that case Lambda will be a great a great way to use that right thank you",
    "start": "2948760",
    "end": "2954200"
  },
  {
    "start": "2954000",
    "end": "3055000"
  },
  {
    "text": "sure yeah in the mobile application example what kind of latency uh would you expect making Lambda calls even very",
    "start": "2954200",
    "end": "2961400"
  },
  {
    "text": "simple function like that one yeah um so what we what we typically measure and",
    "start": "2961400",
    "end": "2966559"
  },
  {
    "text": "and our gunning for here is like in the order of tens of milliseconds of latency right so think like 30 30 40",
    "start": "2966559",
    "end": "2972680"
  },
  {
    "text": "milliseconds um the latency will be higher the first time you upload a uh or",
    "start": "2972680",
    "end": "2978119"
  },
  {
    "text": "start a function right because we have to actually get some code uh down from S3 and kind of ready to go on a box um",
    "start": "2978119",
    "end": "2984559"
  },
  {
    "text": "but once you're operating at scale if you have a relatively steady workload then tens of milliseconds of latency for",
    "start": "2984559",
    "end": "2989920"
  },
  {
    "text": "the request response for asynchronous workloads if you give us work and then you walk away and have us have us do it",
    "start": "2989920",
    "end": "2996240"
  },
  {
    "text": "we need to get that in and out of a durable store so that there's no possibility for getting it that adds",
    "start": "2996240",
    "end": "3001480"
  },
  {
    "text": "maybe another 30 40 millisecs of latency to the job before we can initiate it and my",
    "start": "3001480",
    "end": "3007799"
  },
  {
    "text": "other question is um how welldeveloped are the rest API documentation on the",
    "start": "3007799",
    "end": "3013720"
  },
  {
    "text": "website like are there exam specific examples of how to use it with potentially like Cognito or something like that yep um so the the the rest",
    "start": "3013720",
    "end": "3022079"
  },
  {
    "text": "aprs are are documented we've been um we've been rushing to get them finished",
    "start": "3022079",
    "end": "3027240"
  },
  {
    "text": "in time for today's launch so uh there may be some finishing touches there that are missing but we do have uh getting",
    "start": "3027240",
    "end": "3032880"
  },
  {
    "text": "started documentation and walkthroughs for several different ways of using Lambda the um we spent quite a bit of",
    "start": "3032880",
    "end": "3039200"
  },
  {
    "text": "time trying to get our our new API the 2015 version of the API to also be more rest compliant so that we people who",
    "start": "3039200",
    "end": "3045880"
  },
  {
    "text": "want to approach the system from that perspective are seeing an API that is kind of in line with standard practices",
    "start": "3045880",
    "end": "3052400"
  },
  {
    "text": "thank you sure I was I was a little unclear I'm",
    "start": "3052400",
    "end": "3058160"
  },
  {
    "start": "3055000",
    "end": "3153000"
  },
  {
    "text": "interested in on knowing if you want to trigger a Lambda function based on oh regular old web",
    "start": "3058160",
    "end": "3065640"
  },
  {
    "text": "requests coming in from a a user on the internet like you you hit they hit an address and then they've sent in a bunch",
    "start": "3065640",
    "end": "3072160"
  },
  {
    "text": "of query parameters let's say so there's just like this one stateless kind of thing that just comes in with a bunch of",
    "start": "3072160",
    "end": "3077599"
  },
  {
    "text": "data and then you want to trigger a Lambda function off of that um you said you can't run a web server is there some",
    "start": "3077599",
    "end": "3082960"
  },
  {
    "text": "kind of best practice or some approach or what are the options there um to like you know fire off that nodejs yep so um",
    "start": "3082960",
    "end": "3091200"
  },
  {
    "text": "we will with the with the provisor that we continue to look at ways to make this even easier and more managed to do um",
    "start": "3091200",
    "end": "3098359"
  },
  {
    "text": "you know one of the one of the best ways today would be to to use something like beanock to create a web app and then",
    "start": "3098359",
    "end": "3105040"
  },
  {
    "text": "inside that web app invoke the Lambda function for the portions of your of your workload or your scenario that",
    "start": "3105040",
    "end": "3110640"
  },
  {
    "text": "makes sense to do um and that way you get all the benefits of you know that app Construction the web app deployment",
    "start": "3110640",
    "end": "3117960"
  },
  {
    "text": "and the ability to do all the things you typically need to do there that Lambda won't necessarily give you you know the",
    "start": "3117960",
    "end": "3123160"
  },
  {
    "text": "you vanity Earls andert management and all of those pieces of kind of the web app world um if you're able to obviously",
    "start": "3123160",
    "end": "3130680"
  },
  {
    "text": "um constrain your calls to match lambda's request model then you can skip",
    "start": "3130680",
    "end": "3136920"
  },
  {
    "text": "that and you can simply call us as a you know as if we were a web service you know proxy for you um and I will I will",
    "start": "3136920",
    "end": "3142680"
  },
  {
    "text": "say we again that we are we are certainly aware that people want easy ways to do this and we're actively",
    "start": "3142680",
    "end": "3148319"
  },
  {
    "text": "looking at that cool thanks",
    "start": "3148319",
    "end": "3152359"
  },
  {
    "start": "3153000",
    "end": "3241000"
  },
  {
    "text": "yep how does uh scaling work against Kinesis and Dynamo um since it's a",
    "start": "3154599",
    "end": "3159760"
  },
  {
    "text": "polling function uh is it just one Lambda function polling and it just runs",
    "start": "3159760",
    "end": "3164880"
  },
  {
    "text": "and then has to go and get batches of however many or does it spin off additional for every Shard or how does",
    "start": "3164880",
    "end": "3171480"
  },
  {
    "text": "that work yep yep great great question um so I think you basically hit on it think of it as a Lambda function for",
    "start": "3171480",
    "end": "3177480"
  },
  {
    "text": "shard um and of course the the um uh",
    "start": "3177480",
    "end": "3182599"
  },
  {
    "text": "within each Shard since we have to keep things ordered right we will we will basically serialize those so as that as",
    "start": "3182599",
    "end": "3188559"
  },
  {
    "text": "that Lambda function completes we'll go grab the next batch and then we'll feed it into a into another Lambda function",
    "start": "3188559",
    "end": "3194319"
  },
  {
    "text": "now one of the things that um uh you know that happens with that is that as you increase or decrease the number of",
    "start": "3194319",
    "end": "3199680"
  },
  {
    "text": "shards Lambda naturally sort of keeps track of the parallelism there right so you don't you don't um have extra or too",
    "start": "3199680",
    "end": "3205760"
  },
  {
    "text": "few l functions you can within each Shard control how quickly you work",
    "start": "3205760",
    "end": "3210960"
  },
  {
    "text": "through it by setting the batch size so another thing that we announced um uh today that I didn't include in the talk",
    "start": "3210960",
    "end": "3216839"
  },
  {
    "text": "is we're increasing the request size to 6 megabytes so that Dynamo and Kinesis users can now set much larger batch",
    "start": "3216839",
    "end": "3223000"
  },
  {
    "text": "sizes than they could previously which allows them to keep Pace if they have a very high throughput",
    "start": "3223000",
    "end": "3230000"
  },
  {
    "text": "Shard excuse me ladies and gentlemen I'm sorry we have to wrap up and get ready for the next presentation all righty um",
    "start": "3230160",
    "end": "3236640"
  },
  {
    "text": "I I'll be outside in the hallway if you want to follow up thanks",
    "start": "3236640",
    "end": "3241960"
  }
]