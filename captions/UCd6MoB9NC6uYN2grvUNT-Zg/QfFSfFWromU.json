[
  {
    "start": "0",
    "end": "31000"
  },
  {
    "text": "my name is Nate Slater I'm a senior manager of solution architecture at AWS I lead a team of solution architects out",
    "start": "359",
    "end": "6359"
  },
  {
    "text": "of the San Francisco Bay Area and today we're going to be talking about migrating from relational database",
    "start": "6359",
    "end": "11580"
  },
  {
    "text": "management systems to no sequel and we're going to also have a real-world",
    "start": "11580",
    "end": "16980"
  },
  {
    "text": "customer use case of a migration that Sony performed and we have been nanaki",
    "start": "16980",
    "end": "23970"
  },
  {
    "text": "from Sony who will be describing that process but before we talk about Sony's migration let's jump in and talk a",
    "start": "23970",
    "end": "31980"
  },
  {
    "start": "31000",
    "end": "105000"
  },
  {
    "text": "little bit about what we're gonna learn to the in today's session so first we'll go through some of the key differences",
    "start": "31980",
    "end": "37920"
  },
  {
    "text": "between no sequel database and an our DBMS just a show of hands how many folks",
    "start": "37920",
    "end": "43079"
  },
  {
    "text": "in the room are either familiar with no sequel or are using a no sequel database okay great so we've got most of the room",
    "start": "43079",
    "end": "49829"
  },
  {
    "text": "is familiar with with no sequel we'll learn some of the fundamentals of Amazon DynamoDB so same thing how many how many",
    "start": "49829",
    "end": "56129"
  },
  {
    "text": "folks are actually used Amazon DynamoDB okay probably about a third it looks",
    "start": "56129",
    "end": "62489"
  },
  {
    "text": "like so okay so for the folks that are new to dynamo we'll review some of the key concepts just so you have an idea of",
    "start": "62489",
    "end": "67680"
  },
  {
    "text": "you know what you what you're gonna be faced with if you do a migration from our DBMS to no sequel we'll talk about",
    "start": "67680",
    "end": "74460"
  },
  {
    "text": "use cases right you know you don't want to take a transactional entity based",
    "start": "74460",
    "end": "80340"
  },
  {
    "text": "system and our DBMS and move at wholesale of the Dynamo right the point of this presentation is to talk about the suitable use cases right and there",
    "start": "80340",
    "end": "86460"
  },
  {
    "text": "are definitely some where Dynamo is really going to be a great choice we'll talk a little bit about how you'll plan",
    "start": "86460",
    "end": "92850"
  },
  {
    "text": "and execute a migration right so like anything else you know it's a process there's a number of steps you'll need to",
    "start": "92850",
    "end": "98670"
  },
  {
    "text": "take in order to be successful and then at the end we'll explore the customer use case so year 2016 I don't know if",
    "start": "98670",
    "end": "108570"
  },
  {
    "start": "105000",
    "end": "129000"
  },
  {
    "text": "this folks probably have seen versions of this slide I've seen it going back to probably 2014 it's the big data",
    "start": "108570",
    "end": "115680"
  },
  {
    "text": "landscape slide and and if you look at this it's just unbelievable how many choices there are though it's really",
    "start": "115680",
    "end": "121159"
  },
  {
    "text": "daunting the number of choices that you have today when you talk about data",
    "start": "121159",
    "end": "126810"
  },
  {
    "text": "storage and analytics the good news is though that there",
    "start": "126810",
    "end": "132439"
  },
  {
    "start": "129000",
    "end": "208000"
  },
  {
    "text": "really are many many choices it's great that customers have that many choices in the marketplace but at the end of the",
    "start": "132439",
    "end": "138920"
  },
  {
    "text": "day you don't really ever need to consider even a fraction of those right the our DBMS is the workhorse even",
    "start": "138920",
    "end": "147769"
  },
  {
    "text": "though we have a lot of new different types of databases document databases no sequel databases key value stores in",
    "start": "147769",
    "end": "153769"
  },
  {
    "text": "memory databases it's still the workhorse right you know we see pretty",
    "start": "153769",
    "end": "158780"
  },
  {
    "text": "much most customers even if they are running other types of database systems will have a our DBMS some someplace in",
    "start": "158780",
    "end": "165139"
  },
  {
    "text": "their stack and then we have no sequel right this is the relative newcomer no",
    "start": "165139",
    "end": "170180"
  },
  {
    "text": "sequel really burst onto the scene probably 2007-2008 was when you really",
    "start": "170180",
    "end": "175280"
  },
  {
    "text": "started hearing about a 2007 was when Amazon published the Dynamo paper and then in 2008 you started to see systems",
    "start": "175280",
    "end": "182299"
  },
  {
    "text": "like HBase and some of the other distributed databases that does sit in top of the Hadoop frameworks so been",
    "start": "182299",
    "end": "188870"
  },
  {
    "text": "around for a while and the key with no sequel is that it's really optimized for high volume high velocity data so if",
    "start": "188870",
    "end": "195769"
  },
  {
    "text": "you're dealing with you know thousands and thousands of concurrent transactions and a stream of data that's high",
    "start": "195769",
    "end": "203959"
  },
  {
    "text": "velocity you know continuous no sequel works very well so why does it work well",
    "start": "203959",
    "end": "209689"
  },
  {
    "start": "208000",
    "end": "273000"
  },
  {
    "text": "right what makes no sequel so good for these types of workloads well first it has horizontal scaling so what that",
    "start": "209689",
    "end": "215689"
  },
  {
    "text": "means is that instead of scaling out an individual box or server you actually",
    "start": "215689",
    "end": "220790"
  },
  {
    "text": "add more servers and that allows massive scale at an affordable price it has high",
    "start": "220790",
    "end": "226699"
  },
  {
    "text": "concurrency so one of the things about a no sequel system is that they're not acid compliant so it throws away some of",
    "start": "226699",
    "end": "233359"
  },
  {
    "text": "the consistency and isolation guarantees that you get with a relational database in order to allow you know higher",
    "start": "233359",
    "end": "239719"
  },
  {
    "text": "concurrency because you don't have to lock tables and lock rows in the same way that you do with the relational database and it has a flexible schema so",
    "start": "239719",
    "end": "247370"
  },
  {
    "text": "dynamodb is basically a key value store or you can store documents on documents",
    "start": "247370",
    "end": "253909"
  },
  {
    "text": "and what's interesting is that each item in the table doesn't need to have the same attributes right you can have items",
    "start": "253909",
    "end": "261229"
  },
  {
    "text": "in the same table that are completely differ and the attributes that they have you can do this of course in a relational",
    "start": "261229",
    "end": "266270"
  },
  {
    "text": "database but what that means is you end up with columns with lots of null values in them so a very sparse data which is also not efficient so scale up that's a",
    "start": "266270",
    "end": "274940"
  },
  {
    "start": "273000",
    "end": "368000"
  },
  {
    "text": "term that we'll be using throughout the talk today scale up basically is vertical scaling what that means is that",
    "start": "274940",
    "end": "280640"
  },
  {
    "text": "you're going to replace your existing single server or maybe you know redundant array of servers with bigger",
    "start": "280640",
    "end": "287450"
  },
  {
    "text": "faster more powerful hardware and what this means is that costs go up very very",
    "start": "287450",
    "end": "293030"
  },
  {
    "text": "quickly the trade-off is is that you have lower operational complexity you're simply running the same database that",
    "start": "293030",
    "end": "298490"
  },
  {
    "text": "you were previously running just on a more powerful box but at the high end everything is proprietary down to you",
    "start": "298490",
    "end": "305360"
  },
  {
    "text": "know the types of memory that you're going to run right so it can be very very expensive and you're gonna reach a",
    "start": "305360",
    "end": "310970"
  },
  {
    "text": "point where you're on the biggest fastest box that money can buy and if that's still not enough what do you do",
    "start": "310970",
    "end": "316280"
  },
  {
    "text": "well the solution is you're gonna scale out right you're going to basically use commodity Hardware and you're gonna just",
    "start": "316280",
    "end": "322280"
  },
  {
    "text": "run lots and lots of copies of that bad Hardware but it can be a little bit operationally complex with databases",
    "start": "322280",
    "end": "328880"
  },
  {
    "text": "really that comes down to two things sharding which is essentially partitioning your data by key space and",
    "start": "328880",
    "end": "336500"
  },
  {
    "text": "then replication right when you have your data distributed across different nodes of a cluster you don't want the",
    "start": "336500",
    "end": "343250"
  },
  {
    "text": "failure of any given node to result in a loss of data so what that means is you have to manage copying data across nodes",
    "start": "343250",
    "end": "349669"
  },
  {
    "text": "it seems simple on the surface but it's actually very complex because you know what happens if you make a copy and the",
    "start": "349669",
    "end": "355910"
  },
  {
    "text": "node doesn't acknowledge that the copy was made right you have all of these sort of consistency and and consensus",
    "start": "355910",
    "end": "362630"
  },
  {
    "text": "issues that you need to deal with and in distributed computing those are actually very challenging problems to solve so",
    "start": "362630",
    "end": "368990"
  },
  {
    "start": "368000",
    "end": "417000"
  },
  {
    "text": "Amazon DynamoDB good news is that dynamodb hides all that operational",
    "start": "368990",
    "end": "374330"
  },
  {
    "text": "complexity for you you still get all of the advantages of a fully managed horizontally scaling system but you",
    "start": "374330",
    "end": "380510"
  },
  {
    "text": "don't have to manage any infrastructure the scaling is handled transparently by the service itself so as you need more",
    "start": "380510",
    "end": "387320"
  },
  {
    "text": "i/o you can request it and we scale it out for you and it's ideal for highly",
    "start": "387320",
    "end": "392419"
  },
  {
    "text": "concurrent reads and writes of small items as small as the key word here we do have a limit on item size in",
    "start": "392419",
    "end": "398820"
  },
  {
    "text": "dynamo I believe today it's 400 K you know you'll find that if you do the math you know if you're writing really",
    "start": "398820",
    "end": "404970"
  },
  {
    "text": "reading and writing really large items in dynamo the costs go up pretty significantly simply because you have to",
    "start": "404970",
    "end": "410130"
  },
  {
    "text": "use more I ops per read and write but when you're dealing with small items it's very very efficient so some of the",
    "start": "410130",
    "end": "418350"
  },
  {
    "start": "417000",
    "end": "571000"
  },
  {
    "text": "suitable workloads for dynamo and these are things that we see customers running today ad Tech is a very very common use",
    "start": "418350",
    "end": "424470"
  },
  {
    "text": "case obviously when you know users requests requests comes in from a mobile",
    "start": "424470",
    "end": "429810"
  },
  {
    "text": "app or a browser you know an ad tech company oftentimes needs to take the cookie information and determine you",
    "start": "429810",
    "end": "435240"
  },
  {
    "text": "know what ads they should serve back to the app or to the browser that needs to be a very low latency operation",
    "start": "435240",
    "end": "441060"
  },
  {
    "text": "typically ad tech companies have latency guarantees of maybe 200 milliseconds or less otherwise the the performance of",
    "start": "441060",
    "end": "448200"
  },
  {
    "text": "the app degrades and in the you know web world that can cause a lot of bad things",
    "start": "448200",
    "end": "453480"
  },
  {
    "text": "with search engine optimization other things so ad tech you know very very",
    "start": "453480",
    "end": "459150"
  },
  {
    "text": "common use case for no sequel and for dynamodb mobile applications right mobile application it's really one of",
    "start": "459150",
    "end": "464760"
  },
  {
    "text": "scale you know if you write a mobile application and it takes off you could",
    "start": "464760",
    "end": "469800"
  },
  {
    "text": "go from having a very small number of users to you know a very very large number of users very very quickly right",
    "start": "469800",
    "end": "475169"
  },
  {
    "text": "you know hundreds of thousands of users right you know anybody who has a mobile device could potentially be running your app so you need that high concurrency",
    "start": "475169",
    "end": "481680"
  },
  {
    "text": "there and it's a great place Dynamo is a great place for for session data right so you can store information about the",
    "start": "481680",
    "end": "488010"
  },
  {
    "text": "user's session we see a lot of dynamo usage in gaming and I believe the folks",
    "start": "488010",
    "end": "494640"
  },
  {
    "text": "from Sony are gonna actually be talking about a gaming use case so again games",
    "start": "494640",
    "end": "499650"
  },
  {
    "text": "whether you're on a network of console based games or mobile based games you",
    "start": "499650",
    "end": "504930"
  },
  {
    "text": "need high concurrency you need low latency you're oftentimes dealing with unstructured data and so dynamo is really going to shine their large-scale",
    "start": "504930",
    "end": "511860"
  },
  {
    "text": "websites session state user data for personalization access control what",
    "start": "511860",
    "end": "517050"
  },
  {
    "text": "Amazon wrote the original dynamo paper believe one of the use cases was the shopping cart right they realized that",
    "start": "517050",
    "end": "522090"
  },
  {
    "text": "you know storing the shopping cart and a big relational database is just simply not efficient you don't need full",
    "start": "522090",
    "end": "527820"
  },
  {
    "text": "consistency with a shopping cart it's not the end of the world if someone puts an item in the shopping cart and refreshes the page and the items not",
    "start": "527820",
    "end": "533740"
  },
  {
    "text": "there what are they going to do they just add the item back right but if the database is locked down and you can't",
    "start": "533740",
    "end": "539920"
  },
  {
    "text": "actually put items in the shop mecard to buy something they're gonna leave the site and so that was something that was",
    "start": "539920",
    "end": "547000"
  },
  {
    "text": "one of the motivating factors behind Amazon's original paper about the dynamo",
    "start": "547000",
    "end": "552250"
  },
  {
    "text": "architecture and then nowadays that we see a lot of Internet of Things use cases as well right when you have it's",
    "start": "552250",
    "end": "558100"
  },
  {
    "text": "it's sort of similar to the mobile use case you could have potentially you know thousands tens of thousands of mobile",
    "start": "558100",
    "end": "563170"
  },
  {
    "text": "clients or IOT sensors rather that are sending data into dynamo oftentimes as a",
    "start": "563170",
    "end": "568600"
  },
  {
    "text": "stream okay so let's jump into some of the fundamentals here we'll go pretty",
    "start": "568600",
    "end": "574779"
  },
  {
    "start": "571000",
    "end": "582000"
  },
  {
    "text": "quickly through these I definitely encourage folks who haven't used dynamo to really take a look at it but these",
    "start": "574779",
    "end": "582010"
  },
  {
    "start": "582000",
    "end": "700000"
  },
  {
    "text": "concepts should should become clear once you've had the chance to play with play",
    "start": "582010",
    "end": "587079"
  },
  {
    "text": "with the service so the first thing you need to understand with dynamo is the",
    "start": "587079",
    "end": "592180"
  },
  {
    "text": "key that you're gonna use on your table right the table is the sort of topmost entity in dynamo you don't create a",
    "start": "592180",
    "end": "598870"
  },
  {
    "text": "database and then add tables to a database you basically just create tables and the tables live in the region of the account that you're using with",
    "start": "598870",
    "end": "606430"
  },
  {
    "text": "AWS so when you create a table you have to define a partition key this is mandatory a partition key is ultimately",
    "start": "606430",
    "end": "613630"
  },
  {
    "text": "going to tell dynamo how it's going to distribute your data across the nodes of the dinah the the cluster of compute",
    "start": "613630",
    "end": "620620"
  },
  {
    "text": "that's running the dynamo DB and there's some very important characteristics of a",
    "start": "620620",
    "end": "626019"
  },
  {
    "text": "partition key that you need to be aware of in order to get an efficient use of",
    "start": "626019",
    "end": "631630"
  },
  {
    "text": "dynamo you can optionally add a sort key as well so a sort key is essentially",
    "start": "631630",
    "end": "636940"
  },
  {
    "text": "going to be a set of records within a specific partition key space that are sorted on disk you can think of this",
    "start": "636940",
    "end": "643269"
  },
  {
    "text": "almost like a one-to-many relationship right so you have the prime the the partition key which is the one side and",
    "start": "643269",
    "end": "649269"
  },
  {
    "text": "then the sort key which is the many you can think of may be a device ID and a",
    "start": "649269",
    "end": "654339"
  },
  {
    "text": "timestamp field right that would be a partition key and a sword key combination on the table because the",
    "start": "654339",
    "end": "659829"
  },
  {
    "text": "data is sorted it allows you to do lexicographical operations right so you",
    "start": "659829",
    "end": "665270"
  },
  {
    "text": "can do things like greater than you can do range queries so it's a very powerful way to actually query data out of dynamo",
    "start": "665270",
    "end": "671420"
  },
  {
    "text": "and then we use the term primary key to define just what the unique what",
    "start": "671420",
    "end": "677450"
  },
  {
    "text": "uniquely identifies the item in the table so in the case of the table that just has a partition key the partition key is also the primary key what that",
    "start": "677450",
    "end": "684440"
  },
  {
    "text": "means is that every item in the table is going to be uniquely identified by its primary it's part its partition key if",
    "start": "684440",
    "end": "691100"
  },
  {
    "text": "you have the partition key sort key combination on a table then it's the combination of those two values that uniquely identify the items that would",
    "start": "691100",
    "end": "697790"
  },
  {
    "text": "be the primary key so you have something called a local secondary index so let's",
    "start": "697790",
    "end": "704720"
  },
  {
    "start": "700000",
    "end": "810000"
  },
  {
    "text": "say you had a partition key in a sort key and you defined that on the table when you created it but you also have",
    "start": "704720",
    "end": "710480"
  },
  {
    "text": "another you have another attribute in your in your table that you want to",
    "start": "710480",
    "end": "715960"
  },
  {
    "text": "treat as an alternative sort key what you would do is you since the table can",
    "start": "715960",
    "end": "721040"
  },
  {
    "text": "only have one primary key right what you do is you create a local secondary index which would have the same partition key",
    "start": "721040",
    "end": "727250"
  },
  {
    "text": "as the table but a different sort key you can also create something called a global secondary index a global",
    "start": "727250",
    "end": "733190"
  },
  {
    "text": "secondary index can be a basically a version of the table that has a different partition key and it can be a",
    "start": "733190",
    "end": "739370"
  },
  {
    "text": "version of table that has addition different partition key and sort key so really anything you can do with an LSI",
    "start": "739370",
    "end": "745670"
  },
  {
    "text": "you can also do with the GSI there are some differences the LSI's are stored on",
    "start": "745670",
    "end": "750980"
  },
  {
    "text": "the same partition as the table itself and so we impose a size restriction so",
    "start": "750980",
    "end": "756440"
  },
  {
    "text": "if I think it's 10 gigabytes and so what that means is that if you feel like your index is going to get bigger than 10",
    "start": "756440",
    "end": "762020"
  },
  {
    "text": "gigabytes you need to switch to a global secondary index global secondary indexes",
    "start": "762020",
    "end": "767150"
  },
  {
    "text": "are maintained automatically they're updated asynchronously so when you update an item in dynamo it the dynamo",
    "start": "767150",
    "end": "773600"
  },
  {
    "text": "service will update the index but you don't have to do anything special it happens for you now what that means of",
    "start": "773600",
    "end": "780200"
  },
  {
    "text": "course though is that a global secondary index can only be eventually consistent right because there's going to be a window of time small one but window",
    "start": "780200",
    "end": "787670"
  },
  {
    "text": "nonetheless where a change to the primary table may not yet be seen in the GSI ultimately I tell people you know",
    "start": "787670",
    "end": "795800"
  },
  {
    "text": "unless u-unless you need full consistency use a GSI it's just going to be easier you can",
    "start": "795800",
    "end": "802429"
  },
  {
    "text": "add them after the tables created there's no size restriction and you can ultimately you can do everything with a",
    "start": "802429",
    "end": "807739"
  },
  {
    "text": "GSI that you can do with an LSI the query is basically an expression that",
    "start": "807739",
    "end": "814669"
  },
  {
    "start": "810000",
    "end": "848000"
  },
  {
    "text": "you pass into the dynamo service that will return pages of items from a table or an index so when you run a query in",
    "start": "814669",
    "end": "821869"
  },
  {
    "text": "dynamo you have to tell it which table or index you're going to use and then you have to supply the primary key and",
    "start": "821869",
    "end": "827539"
  },
  {
    "text": "if it's an index or a table that has a sort key as well you provide the sort key and then the operation that you want",
    "start": "827539",
    "end": "833029"
  },
  {
    "text": "to perform and dynamo then will turn will return you know zero or more",
    "start": "833029",
    "end": "838039"
  },
  {
    "text": "records back to you it returns records and pages pages are one megabyte in size so if you get more than one Meg worth of",
    "start": "838039",
    "end": "844939"
  },
  {
    "text": "items you have to page through the results set okay so partition this is",
    "start": "844939",
    "end": "852079"
  },
  {
    "start": "848000",
    "end": "962000"
  },
  {
    "text": "basically a shard of data so your table is actually sharded automatically by the dynamo service and this is where the",
    "start": "852079",
    "end": "858769"
  },
  {
    "text": "partition key becomes of really really important the way the Dynamo is going to",
    "start": "858769",
    "end": "865429"
  },
  {
    "text": "partition your table is based on the taking a hash value of your partition key and so what this means is that if",
    "start": "865429",
    "end": "873409"
  },
  {
    "text": "you want your data you ultimately you want your data to be uniformly distributed across as many partitions as",
    "start": "873409",
    "end": "878509"
  },
  {
    "text": "possible if you pick a a partition key where you have a frequency distribution",
    "start": "878509",
    "end": "883579"
  },
  {
    "text": "of values where certain values are in much higher frequency than others you're",
    "start": "883579",
    "end": "888649"
  },
  {
    "text": "not going to get a uniform distribution of data and this can cause some unpleasantness when you go to read and",
    "start": "888649",
    "end": "894499"
  },
  {
    "text": "write data from the table because what that means is that reads and writes are localized to a partition or set of",
    "start": "894499",
    "end": "900079"
  },
  {
    "text": "partitions rather than across all the partitions of the table the number of partitions that you have in your table",
    "start": "900079",
    "end": "905089"
  },
  {
    "text": "is determined by taking the maximum of the partitions required for storage so",
    "start": "905089",
    "end": "910279"
  },
  {
    "text": "if you think your table is going to be 100 gigabytes in size today of each partitions 10 gigs you would divide 10",
    "start": "910279",
    "end": "916220"
  },
  {
    "text": "into a hundred and you'd get 10 so your your max there would be 10 partitions just for storage then you have to look",
    "start": "916220",
    "end": "922039"
  },
  {
    "text": "at the amount of i/o you need each partition today I think can deliver 1,000 right eye ops and 3,000 Rita hops",
    "start": "922039",
    "end": "928279"
  },
  {
    "text": "so you would have to take the number of read out I office you want to the table divide it by three take the ceiling of that and then add",
    "start": "928279",
    "end": "934639"
  },
  {
    "text": "that to the number of right eye ops divided by 1000 take the ceiling of that add those two numbers together and then",
    "start": "934639",
    "end": "940639"
  },
  {
    "text": "you take the max between the number of partitions for storage and the number of partitions for i/o and that's the number",
    "start": "940639",
    "end": "946399"
  },
  {
    "text": "of partitions you can expect to have with Dynamo so this is this is some of the the type of things you'll need to be",
    "start": "946399",
    "end": "953240"
  },
  {
    "text": "aware of when you're planning your migration from your our DBMS is really what what number of partitions are you looking at and what what is going to be",
    "start": "953240",
    "end": "959720"
  },
  {
    "text": "the best key structure for your tables okay so the migration process the state",
    "start": "959720",
    "end": "966740"
  },
  {
    "start": "962000",
    "end": "965000"
  },
  {
    "text": "diagram shows basically you know you start with the planning state then you go to the data analysis state data",
    "start": "966740",
    "end": "972829"
  },
  {
    "text": "analysis you go to data modeling there's probably some iteration within that state right it's unlikely you're gonna get the data model right the first time",
    "start": "972829",
    "end": "979819"
  },
  {
    "text": "anybody who's ever done entity relationship modeling with the relational database will tell you yeah you go back and forth a little bit",
    "start": "979819",
    "end": "985699"
  },
  {
    "text": "you're probably not going to nail it the first time you'll need to do testing right and testing with a migration you",
    "start": "985699",
    "end": "993319"
  },
  {
    "text": "know oftentimes involves looking at you know the the results of the migration and comparing it to the original making sure that you know you got all the rows",
    "start": "993319",
    "end": "1000069"
  },
  {
    "text": "you expected and that they're in the form that they're supposed to be and then once you're convinced that the process works and you've scripted it out",
    "start": "1000069",
    "end": "1005829"
  },
  {
    "text": "and you can run it in your test environment without errors you'll go ahead and you'll do the migration on the production database so in the planning",
    "start": "1005829",
    "end": "1013600"
  },
  {
    "start": "1012000",
    "end": "1044000"
  },
  {
    "text": "phase you want to define the goals of the migration identify the tables that are going to migrate document any per",
    "start": "1013600",
    "end": "1019209"
  },
  {
    "text": "table challenges write that this is things like do you have encrypted column values that would need to be unencrypted",
    "start": "1019209",
    "end": "1025750"
  },
  {
    "text": "before migrating to dynamo or maybe unencrypted and then re encrypted using a different key in dynamo you know there's the sort of table specific",
    "start": "1025750",
    "end": "1032918"
  },
  {
    "text": "characteristics you'll want to look at and then as always you need to define and document your backup and restore",
    "start": "1032919",
    "end": "1038770"
  },
  {
    "text": "strategies right if you do a migration if something goes south you got to be able to recover so some of the things",
    "start": "1038770",
    "end": "1045520"
  },
  {
    "start": "1044000",
    "end": "1131000"
  },
  {
    "text": "that you would want to look at when you're trying to choose which to which tables to migrate would be entity attribute value tables I think these are",
    "start": "1045520",
    "end": "1051940"
  },
  {
    "text": "also called model to tables maybe is you know it's when you have a key value",
    "start": "1051940",
    "end": "1057010"
  },
  {
    "text": "that's being represented in a in a relational database usually what that means is you have a table that's storing all the possible key values a table",
    "start": "1057010",
    "end": "1063549"
  },
  {
    "text": "that's storing the the values themselves and then an intersection table that map's those keys with the values those are really really",
    "start": "1063549",
    "end": "1070530"
  },
  {
    "text": "ugly queries to write in a relational database because they're basically you",
    "start": "1070530",
    "end": "1076110"
  },
  {
    "text": "know joins into a single Union - or an intersection table and then sometimes it may even be a recursive table join you",
    "start": "1076110",
    "end": "1082260"
  },
  {
    "text": "need to do so not not a not a happy query to write applications session",
    "start": "1082260",
    "end": "1087570"
  },
  {
    "text": "state tables these are you know really easy to move to dynamo in fact there are many web frameworks today that actually",
    "start": "1087570",
    "end": "1094320"
  },
  {
    "text": "allow you to use dynamo is like the backing store for storing a state user",
    "start": "1094320",
    "end": "1099420"
  },
  {
    "text": "preference tables these are good to move because oftentimes user preferences are also schema lists right a user may have",
    "start": "1099420",
    "end": "1105300"
  },
  {
    "text": "some set of preferences but not all users are gonna have the same set of preferences and so relational database",
    "start": "1105300",
    "end": "1110610"
  },
  {
    "text": "is a little bit of an expensive way to store that data logging tables logging tables are great because you know again",
    "start": "1110610",
    "end": "1117720"
  },
  {
    "text": "log data is semi-structured it's not fully structured it's also immutable so",
    "start": "1117720",
    "end": "1122910"
  },
  {
    "text": "essentially what that means is you're gonna write the record once into dynamo and you're never gonna change it so you don't have to worry about you know",
    "start": "1122910",
    "end": "1128160"
  },
  {
    "text": "updates or anything like that okay so backup and migration of the",
    "start": "1128160",
    "end": "1134580"
  },
  {
    "start": "1131000",
    "end": "1157000"
  },
  {
    "text": "migration strategy requires a full cut over then you know make sure you need to you know you document the restore and",
    "start": "1134580",
    "end": "1139650"
  },
  {
    "text": "rollback process no surprise there if you can you know it's it's great to run you know it's basically if you can run",
    "start": "1139650",
    "end": "1146970"
  },
  {
    "text": "both systems in parallel where you're essentially running your old system and your new system that makes the migration",
    "start": "1146970",
    "end": "1152730"
  },
  {
    "text": "a lot less risky and if I recall from Sony's slides that's exactly what what they did so data analysis is where you",
    "start": "1152730",
    "end": "1159270"
  },
  {
    "start": "1157000",
    "end": "1166000"
  },
  {
    "text": "going to look into your source tables and figure out what they need to look at or look like in in dynamo so if your",
    "start": "1159270",
    "end": "1167850"
  },
  {
    "start": "1166000",
    "end": "1189000"
  },
  {
    "text": "access pattern your application is right only or fetches my distinct value or queries across a range of value",
    "start": "1167850",
    "end": "1173400"
  },
  {
    "text": "no surprise there you can use a combination of partition keys and sort keys in your dynamo table and so looking",
    "start": "1173400",
    "end": "1181200"
  },
  {
    "text": "for things like one-to-many relationships that's usually a pretty good indicator that you might have a partition key sort key structure in the",
    "start": "1181200",
    "end": "1187770"
  },
  {
    "text": "in the target table you'll also want to get a sense of what your costs are going to be so we charge by the read capacity",
    "start": "1187770",
    "end": "1195330"
  },
  {
    "start": "1189000",
    "end": "1213000"
  },
  {
    "text": "unit and and right capacity unit in dynamo a right is 1k in size a reed is 4k in size",
    "start": "1195330",
    "end": "1200520"
  },
  {
    "text": "and so you'll need to understand given your access patterns how much right capacity do I need how much read",
    "start": "1200520",
    "end": "1206100"
  },
  {
    "text": "capacity do I need and what is this going to cost me you can run this through the simple monthly calculator and get a number key structure again",
    "start": "1206100",
    "end": "1215750"
  },
  {
    "start": "1213000",
    "end": "1247000"
  },
  {
    "text": "very important you'll want to pick a good key you want a key that gives you uniform distribution of data and you",
    "start": "1215750",
    "end": "1221580"
  },
  {
    "text": "want a key that is something meaningful like a for instance if you have a user table in a relational database and you",
    "start": "1221580",
    "end": "1227400"
  },
  {
    "text": "have some numeric key you could make the numeric key the lookup or the partition key and dinamo they would give you",
    "start": "1227400",
    "end": "1233310"
  },
  {
    "text": "uniform distribution of data but the problem is is that most of the time you might want to look up by the user's",
    "start": "1233310",
    "end": "1238920"
  },
  {
    "text": "email address not the not the numeric key and remember you don't have a query language like sequel of dynamo so you",
    "start": "1238920",
    "end": "1244350"
  },
  {
    "text": "might want to make that email address the D key for write only data then you",
    "start": "1244350",
    "end": "1250530"
  },
  {
    "start": "1247000",
    "end": "1274000"
  },
  {
    "text": "can pick just like a random UUID right if you're never gonna go back and read that row back out or if you do read it",
    "start": "1250530",
    "end": "1256170"
  },
  {
    "text": "out you're reading it out off an index you're never gonna do an atomic update on an interval item use a UUID you know",
    "start": "1256170",
    "end": "1264120"
  },
  {
    "text": "NER DBMS table that has a unique index on two key values that's a good",
    "start": "1264120",
    "end": "1269150"
  },
  {
    "text": "candidate for a partition key plus a sort key okay so here's just a quick",
    "start": "1269150",
    "end": "1276780"
  },
  {
    "start": "1274000",
    "end": "1433000"
  },
  {
    "text": "data analysis and modeling example you know on the left hand side or left hand",
    "start": "1276780",
    "end": "1282210"
  },
  {
    "text": "side you've got the our DBMS this is something where we might have an event we have an order and we have an order",
    "start": "1282210",
    "end": "1287700"
  },
  {
    "text": "processing event so maybe we're building a system that processes orders and during the order processing workflow we",
    "start": "1287700",
    "end": "1292830"
  },
  {
    "text": "have a number of events that are generated and so we have a table that map's orders to events and the time that",
    "start": "1292830",
    "end": "1298260"
  },
  {
    "text": "it occurred and the payload of the event in dynamo we would actually denormalize this we're gonna have a single table",
    "start": "1298260",
    "end": "1304320"
  },
  {
    "text": "where we're gonna have the order number the event date the event type and the data right you can see in the our DBMS",
    "start": "1304320",
    "end": "1310710"
  },
  {
    "text": "we have an event type table that's a normalized lookup into the order processing event you don't want to do",
    "start": "1310710",
    "end": "1316920"
  },
  {
    "text": "joins in dynamo right that's the Dynamo itself does not support joins and you certainly want to avoid joining data",
    "start": "1316920",
    "end": "1323220"
  },
  {
    "text": "sets in your application code if you could avoid it so you know this slide here is really",
    "start": "1323220",
    "end": "1330150"
  },
  {
    "text": "showing you know if you have a really really large table in your relational database and you want to get a sunder",
    "start": "1330150",
    "end": "1336059"
  },
  {
    "text": "standing of how how big your items don't need to be in dynamo you can actually sample from that table you know rather",
    "start": "1336059",
    "end": "1341549"
  },
  {
    "text": "than try and query the entire table and add up and then take an average item size you know I would recommend doing a",
    "start": "1341549",
    "end": "1347460"
  },
  {
    "text": "sampling just so that it's a little bit more efficient you know maybe maybe you know running that query is just",
    "start": "1347460",
    "end": "1353070"
  },
  {
    "text": "impossible because the table is too big if you pick the 90th percentile you're probably pretty good right so if your",
    "start": "1353070",
    "end": "1358770"
  },
  {
    "text": "items are gonna be 6.6 KB and there's only 5% of items that'll be bigger than",
    "start": "1358770",
    "end": "1364380"
  },
  {
    "text": "that you know you can use that and in this case we're just walking through essentially some basic arithmetic",
    "start": "1364380",
    "end": "1370140"
  },
  {
    "text": "showing you know what's the number of write units we need per item the number of read units we know that we're gonna",
    "start": "1370140",
    "end": "1376260"
  },
  {
    "text": "need to do a thousand events per 500 orders per day so that's a total of 500,000 orders per day or events per day",
    "start": "1376260",
    "end": "1383130"
  },
  {
    "text": "rather you know then we're going to divide that by the number of seconds in the day that's the number of events per",
    "start": "1383130",
    "end": "1388770"
  },
  {
    "text": "second and then we're gonna figure out how much write capacity we need to write that now of course this assumes that the",
    "start": "1388770",
    "end": "1394830"
  },
  {
    "text": "activity is uniformly distributed across the entire day it might not be right if you know that you're gonna have most",
    "start": "1394830",
    "end": "1399900"
  },
  {
    "text": "your activity in a 12 hour period then that divisor of 86,400 which is 24 hours",
    "start": "1399900",
    "end": "1405360"
  },
  {
    "text": "where the seconds will be 12 hours instead right you can get the idea of what's going on here so we know we have",
    "start": "1405360",
    "end": "1411990"
  },
  {
    "text": "you know the 5.78 events per seconds and we have 3,600 seconds per hours that",
    "start": "1411990",
    "end": "1417450"
  },
  {
    "text": "means we're getting 20,000 808 events per hour at a size of 6.6 KB in order to",
    "start": "1417450",
    "end": "1424020"
  },
  {
    "text": "read an hour's worth of events which we apparently need to do for an ETL job we would need to be able to read 134",
    "start": "1424020",
    "end": "1429990"
  },
  {
    "text": "megabytes per hour from dynamo and so",
    "start": "1429990",
    "end": "1435000"
  },
  {
    "start": "1433000",
    "end": "1452000"
  },
  {
    "text": "now that we know basically you know our write throughput and our read throughput we can actually compute what we would",
    "start": "1435000",
    "end": "1441150"
  },
  {
    "text": "need here and in this case we need 256 read units for both the table and any GS eyes that we're putting on there and 41",
    "start": "1441150",
    "end": "1448980"
  },
  {
    "text": "write units okay testing phase so just like anything else",
    "start": "1448980",
    "end": "1455610"
  },
  {
    "start": "1452000",
    "end": "1458000"
  },
  {
    "text": "doing a data migration involves testing testing is really not that much",
    "start": "1455610",
    "end": "1461170"
  },
  {
    "text": "different than what you're gonna do you know any application any software application you're gonna have basic",
    "start": "1461170",
    "end": "1466480"
  },
  {
    "text": "acceptance tests right you need to be able to run just a subset of your tests every time you do a phase of a migration",
    "start": "1466480",
    "end": "1472300"
  },
  {
    "text": "to make sure that things things seem like they're working you'll have some functional tests these are tests that",
    "start": "1472300",
    "end": "1477940"
  },
  {
    "text": "are actually going to test the migration code itself you know it's you know making sure you know the tests can can",
    "start": "1477940",
    "end": "1484210"
  },
  {
    "text": "handle air conditions and can basically handle you know a big thing with functional tests is you know do you have",
    "start": "1484210",
    "end": "1489960"
  },
  {
    "text": "you know how fast can you read data from disk right you know can you get the throughput that you need on the source",
    "start": "1489960",
    "end": "1495970"
  },
  {
    "text": "table you know to do to do the migration you'll have some non-functional tests as well you know you know those are those",
    "start": "1495970",
    "end": "1503560"
  },
  {
    "text": "are testing maybe more Error error conditions boundary conditions and then you'll have some user acceptance tests",
    "start": "1503560",
    "end": "1509580"
  },
  {
    "start": "1509000",
    "end": "1571000"
  },
  {
    "text": "so you'll do all your testing you'll probably run through it a number of times I've done some big migrations of",
    "start": "1509580",
    "end": "1515980"
  },
  {
    "text": "database systems in the past and yeah typically I would know it's ready to go if I can run my script basically and and",
    "start": "1515980",
    "end": "1521920"
  },
  {
    "text": "and it sort of gives me reliable results every time and once you're ready to do",
    "start": "1521920",
    "end": "1528220"
  },
  {
    "text": "that you can go ahead and plan the migration again if you can do it in a way where you can migrate data from the",
    "start": "1528220",
    "end": "1534400"
  },
  {
    "text": "source system into dinamo but keep the source system live for some length of time you know some burn in period while",
    "start": "1534400",
    "end": "1540400"
  },
  {
    "text": "you you know you make sure that the the new system is working well it really really limits the risk of the",
    "start": "1540400",
    "end": "1545620"
  },
  {
    "text": "migration so if you can do that I highly recommend it if you've got to do a you know Big Bang cutover you can do that as",
    "start": "1545620",
    "end": "1552670"
  },
  {
    "text": "well just realize you better be darn sure that you know you you know your your migration process is bulletproof",
    "start": "1552670",
    "end": "1558340"
  },
  {
    "text": "because you're gonna have a cut over period even with a rollback things can get very very tricky especially with high velocity data it's amazing just a",
    "start": "1558340",
    "end": "1565930"
  },
  {
    "text": "couple of minutes and things can get out of sync you can have some big problems",
    "start": "1565930",
    "end": "1571260"
  },
  {
    "start": "1571000",
    "end": "1646000"
  },
  {
    "text": "so in conclusion keys to success first and foremost make sure you're doing",
    "start": "1571260",
    "end": "1576570"
  },
  {
    "text": "you're moving the right workloads to dynamo you know again don't don't try and move a you know highly transactional",
    "start": "1576570",
    "end": "1583570"
  },
  {
    "text": "system where you've got lots of relationships between entities into dynamo at least don't try and move it as in that form in",
    "start": "1583570",
    "end": "1590260"
  },
  {
    "text": "dynamo you're not gonna succeed if you do that you got to understand your",
    "start": "1590260",
    "end": "1595450"
  },
  {
    "text": "source data access pattern right that's a that's a key thing here dynamo does not provide a generic query language",
    "start": "1595450",
    "end": "1602860"
  },
  {
    "text": "like SQL right you you if you don't understand how your applications gonna access your data you're gonna quickly",
    "start": "1602860",
    "end": "1609760"
  },
  {
    "text": "run into problems where you realize hey wait a minute I've got to actually get I gotta fetch items by this attribute you",
    "start": "1609760",
    "end": "1616690"
  },
  {
    "text": "can do some things with GSIS and LSI's but you'll find it's very limited compared to what you're used to with an",
    "start": "1616690",
    "end": "1622120"
  },
  {
    "text": "our DBMS test thoroughly and often right as you're doing your migration you should be continually testing steps run",
    "start": "1622120",
    "end": "1629110"
  },
  {
    "text": "the migration lots of times run it on subsets of data run it on large sets of data you really want to make sure you",
    "start": "1629110",
    "end": "1634600"
  },
  {
    "text": "understand you know how the migrations gonna work and then of course like anything else make it an iterative right",
    "start": "1634600",
    "end": "1640120"
  },
  {
    "text": "don't don't just do tons and tons of planning and then you know expect to get it right the first time",
    "start": "1640120",
    "end": "1646350"
  },
  {
    "start": "1646000",
    "end": "1736000"
  },
  {
    "text": "okay and with that I will turn it over to our friends from Sony Thank You Nate",
    "start": "1646350",
    "end": "1659020"
  },
  {
    "text": "my name is Alex moto from Sony Entertainment so today",
    "start": "1659020",
    "end": "1665470"
  },
  {
    "text": "we'd like to take this opportunity to share how we migrated our system from",
    "start": "1665470",
    "end": "1670570"
  },
  {
    "text": "the on-premise to the AWS which is cloud service so we are working on precision",
    "start": "1670570",
    "end": "1676750"
  },
  {
    "text": "network which is a gaming platform to provide a network services to various",
    "start": "1676750",
    "end": "1681880"
  },
  {
    "text": "PlayStation devices such as a ps3 or ps4 on the PSP and other many you know",
    "start": "1681880",
    "end": "1687400"
  },
  {
    "text": "devices so TSM consists of various features were services such as the",
    "start": "1687400",
    "end": "1694600"
  },
  {
    "text": "PlayStation Store or online multi game praying and also social networking",
    "start": "1694600",
    "end": "1700150"
  },
  {
    "text": "features and the community user to use messaging or communication voice chat we",
    "start": "1700150",
    "end": "1706150"
  },
  {
    "text": "have many services then also we are running many many micro services to",
    "start": "1706150",
    "end": "1711820"
  },
  {
    "text": "provider such experiences so we are constantly introducing a new services or",
    "start": "1711820",
    "end": "1718240"
  },
  {
    "text": "new teachers but also we are dealing with some the issues we are having because PSN is",
    "start": "1718240",
    "end": "1725119"
  },
  {
    "text": "now 10 years old so today we will walk through help how we reserve that legacy",
    "start": "1725119",
    "end": "1732799"
  },
  {
    "text": "issue then trying to keep the our platform fresh so before jumping into",
    "start": "1732799",
    "end": "1738950"
  },
  {
    "start": "1736000",
    "end": "1907000"
  },
  {
    "text": "the detail migration or architecture pattern so let me try to share our heap",
    "start": "1738950",
    "end": "1745129"
  },
  {
    "text": "architecture principles first one always alone so which is very obvious but also",
    "start": "1745129",
    "end": "1751369"
  },
  {
    "text": "this is very important principle for us even you know the bank will be talking",
    "start": "1751369",
    "end": "1757399"
  },
  {
    "text": "about how how we migrated you know our Mexico database to the Dynamo but you",
    "start": "1757399",
    "end": "1764029"
  },
  {
    "text": "know this always on which means no downtime migration was one big you know",
    "start": "1764029",
    "end": "1769940"
  },
  {
    "text": "the requirement then the scare ability this is also you know the obvious but",
    "start": "1769940",
    "end": "1775759"
  },
  {
    "text": "also you know this was the biggest reason why we migrated our system could",
    "start": "1775759",
    "end": "1781940"
  },
  {
    "text": "be a de Bresse having a much better stability than on-premise so testability",
    "start": "1781940",
    "end": "1790059"
  },
  {
    "text": "everything should be testable yeah the Packard compatibility this is a unique",
    "start": "1790059",
    "end": "1795710"
  },
  {
    "text": "requirement or unique your Sofia to us because we are running on the more alright gaming business so some you know",
    "start": "1795710",
    "end": "1803659"
  },
  {
    "text": "that not only did the console gaming business then the console gaming is",
    "start": "1803659",
    "end": "1809539"
  },
  {
    "text": "requiring the magistrate memory controller and sometimes you know requiring CPU usage so we very careful",
    "start": "1809539",
    "end": "1819169"
  },
  {
    "text": "about changing our homicide behavioral response so that we don't write you know",
    "start": "1819169",
    "end": "1824360"
  },
  {
    "text": "we cannot break any customer experience or gaming experience so because would be",
    "start": "1824360",
    "end": "1832249"
  },
  {
    "text": "impacting the customer as well this son you know our key partners such as you know the big game publisher with mobile",
    "start": "1832249",
    "end": "1838249"
  },
  {
    "text": "game publishers so the last one is the common pattern so we are trying to keep",
    "start": "1838249",
    "end": "1845929"
  },
  {
    "text": "the variation the architecture pattern or migration patterns more so that we can take advantage where we can be",
    "start": "1845929",
    "end": "1852499"
  },
  {
    "text": "virtually the running from the previous our previous figure were previous",
    "start": "1852499",
    "end": "1858260"
  },
  {
    "text": "project so we used to be you know doing more how can I say taking more brand not",
    "start": "1858260",
    "end": "1867860"
  },
  {
    "text": "random but freedom approach to pick you know a technologies but you know that",
    "start": "1867860",
    "end": "1873530"
  },
  {
    "text": "was making us her to a very such a legacy issue or migrate some you know",
    "start": "1873530",
    "end": "1878810"
  },
  {
    "text": "order system to you know the new infrastructure such as the ADA brace because each system was having a unique",
    "start": "1878810",
    "end": "1885560"
  },
  {
    "text": "issues and you know we we cannot spend our energy to troubleshoot for each",
    "start": "1885560",
    "end": "1890930"
  },
  {
    "text": "services so those are our t principle our strategy we took for the new",
    "start": "1890930",
    "end": "1897580"
  },
  {
    "text": "architecture and the data migrations so let me press about then who is our key",
    "start": "1897580",
    "end": "1903970"
  },
  {
    "text": "system architect in our group thank you okay so I'll be introducing two core",
    "start": "1903970",
    "end": "1910790"
  },
  {
    "text": "peers and systems that we migrated from on-premise to dynamodb so the first one",
    "start": "1910790",
    "end": "1916880"
  },
  {
    "text": "is friends friends so how many people in",
    "start": "1916880",
    "end": "1922610"
  },
  {
    "start": "1917000",
    "end": "1973000"
  },
  {
    "text": "this room own a Playstation device quick show of hands nice so P is friends it's the cool",
    "start": "1922610",
    "end": "1930290"
  },
  {
    "text": "system for social interaction so for those who have been to other PlayStation sessions this week I believe Alex and",
    "start": "1930290",
    "end": "1939260"
  },
  {
    "text": "Dustin introduced the friend finder feature how to locate new friends it drives a lot of interaction on the",
    "start": "1939260",
    "end": "1944900"
  },
  {
    "text": "console it drives also the Activity Feed so with that friends being a so a call",
    "start": "1944900",
    "end": "1951560"
  },
  {
    "text": "system it has a lot of subsystems but it also has a lot of rink access it's a",
    "start": "1951560",
    "end": "1956810"
  },
  {
    "text": "mainly read heavy system and it it needs to support multiple platforms so",
    "start": "1956810",
    "end": "1961970"
  },
  {
    "text": "PlayStation 4 being our latest platform PlayStation 3 beta PSP we on iOS and",
    "start": "1961970",
    "end": "1967970"
  },
  {
    "text": "Android and recently we started on Pierce PC web as well so I'm gonna show",
    "start": "1967970",
    "end": "1974390"
  },
  {
    "start": "1973000",
    "end": "2000000"
  },
  {
    "text": "you the original architecture that we have it's a classical data center application its own premises its MySQL",
    "start": "1974390",
    "end": "1981910"
  },
  {
    "text": "master/slave shard it and the app servers are running behind an elf or load balancer",
    "start": "1981910",
    "end": "1988299"
  },
  {
    "text": "because it's charter it doesn't really scale it's fixed sharding and fixed sharding means that if you need to scale",
    "start": "1988299",
    "end": "1994690"
  },
  {
    "text": "you need to move data and that means downtime so when ps4 came along and we",
    "start": "1994690",
    "end": "2002669"
  },
  {
    "start": "2000000",
    "end": "2008000"
  },
  {
    "text": "saw a huge increase in debt in access what we did is we introduced a hybrid architecture it's a little bit of a",
    "start": "2002669",
    "end": "2009659"
  },
  {
    "start": "2008000",
    "end": "2034000"
  },
  {
    "text": "quick fix to support more access but what we did is we used AWS to front-load",
    "start": "2009659",
    "end": "2015690"
  },
  {
    "text": "our access to the data center to protect our apps in the data center so whenever now users would look at the",
    "start": "2015690",
    "end": "2022229"
  },
  {
    "text": "friends what would actually happen is we would be serving those friends out of a cache in AWS and whenever you add a",
    "start": "2022229",
    "end": "2029429"
  },
  {
    "text": "friend we would clear the cache and on the next axis we would refetch it but as",
    "start": "2029429",
    "end": "2036299"
  },
  {
    "start": "2034000",
    "end": "2045000"
  },
  {
    "text": "you can see in the previous architecture it's quite complicated it has a lot of failure points you need to monitor",
    "start": "2036299",
    "end": "2041940"
  },
  {
    "text": "everything and its overall complex so what we there is we said we don't want",
    "start": "2041940",
    "end": "2048148"
  },
  {
    "start": "2045000",
    "end": "2095000"
  },
  {
    "text": "to we don't want to operate it we're going to move completely to the cloud and you can see compared to the previous",
    "start": "2048149",
    "end": "2056010"
  },
  {
    "text": "slide it's a lot more simple so it's Amazon route 53 with an ELB Amazon ec2",
    "start": "2056010",
    "end": "2063210"
  },
  {
    "text": "instances which run our apps DynamoDB for the storage and then ElastiCache",
    "start": "2063210",
    "end": "2069569"
  },
  {
    "text": "just as previously so the primary key is the user a and the second key is user B",
    "start": "2069569",
    "end": "2078358"
  },
  {
    "text": "or C and the relationship is stored with that so in this case user a and B or friends and user NC are requesting",
    "start": "2078359",
    "end": "2084270"
  },
  {
    "text": "friendship well a is requesting C to become their friend so DynamoDB data",
    "start": "2084270",
    "end": "2090750"
  },
  {
    "text": "model is very sue dat for storing those kind of relationship status so the cool",
    "start": "2090750",
    "end": "2098819"
  },
  {
    "start": "2095000",
    "end": "2187000"
  },
  {
    "text": "part about it was as I mentioned before is always on was one of our core principles we can't go down so what we",
    "start": "2098819",
    "end": "2106500"
  },
  {
    "text": "did is we look at different approaches of how we can avoid downtime during our",
    "start": "2106500",
    "end": "2114539"
  },
  {
    "text": "data migration and roll up and what we did is we already have the SNS in place from our data center so we attached an",
    "start": "2114539",
    "end": "2121920"
  },
  {
    "text": "scuse to it and started buffering all the write to the database in that sqs and then once the rights were being",
    "start": "2121920",
    "end": "2129059"
  },
  {
    "text": "buffered in sqs we took a MySQL dump and exported the data from the database into",
    "start": "2129059",
    "end": "2135299"
  },
  {
    "text": "a flat file so now that we have the flat file what we did is we spun up our data",
    "start": "2135299",
    "end": "2140730"
  },
  {
    "text": "import application and imported that data from the MySQL database them into",
    "start": "2140730",
    "end": "2146130"
  },
  {
    "text": "dynamo dB now remember the packets the writes to the database are still being",
    "start": "2146130",
    "end": "2151680"
  },
  {
    "text": "buffered in sq s currently and now that we have the data imported and have set",
    "start": "2151680",
    "end": "2157559"
  },
  {
    "text": "the base for our new database we start importing from sqs and replay the",
    "start": "2157559",
    "end": "2163020"
  },
  {
    "text": "traffic that came in on the data center onto the new dynamo DB now one really",
    "start": "2163020",
    "end": "2169770"
  },
  {
    "text": "cool thing about this is at this point the dynamic DB is receiving the full production traffic which means we can do",
    "start": "2169770",
    "end": "2175710"
  },
  {
    "text": "our capacity planning without having any consumer impact because if it fails we can just push the packet back into SQL",
    "start": "2175710",
    "end": "2182579"
  },
  {
    "text": "and retry later so for the actual",
    "start": "2182579",
    "end": "2189690"
  },
  {
    "start": "2187000",
    "end": "2242000"
  },
  {
    "text": "rollout we use to bridge and switch pattern where the right traffic you can",
    "start": "2189690",
    "end": "2195420"
  },
  {
    "text": "see the two yellow lines at the bottom it's right traffic and re traffic and the traffic is still routed to the old",
    "start": "2195420",
    "end": "2200730"
  },
  {
    "text": "application while replicating the data that has been written to the new applications so both applications are in",
    "start": "2200730",
    "end": "2206670"
  },
  {
    "text": "sync and then we can because both applications are in sync we can slowly",
    "start": "2206670",
    "end": "2212700"
  },
  {
    "text": "start switching over re traffic from the old application to the new application and we can validate what we built an AWS",
    "start": "2212700",
    "end": "2220500"
  },
  {
    "text": "is exactly the same as we have it on premise and it still works as we expect it to if anything should happen at any",
    "start": "2220500",
    "end": "2227400"
  },
  {
    "text": "time we can switch back the traffic from the new application to the old application and and switch back without",
    "start": "2227400",
    "end": "2235140"
  },
  {
    "text": "incurring any data loss or consumer impact which was very important for us because you don't want to lose your",
    "start": "2235140",
    "end": "2241440"
  },
  {
    "text": "friends obviously so so once we were confident in the application that we",
    "start": "2241440",
    "end": "2247079"
  },
  {
    "start": "2242000",
    "end": "2281000"
  },
  {
    "text": "build on AWS and made sure it didn't have any bugs and stuff like that what",
    "start": "2247079",
    "end": "2252930"
  },
  {
    "text": "we did is we shut down the apps on premise and waited",
    "start": "2252930",
    "end": "2258579"
  },
  {
    "text": "for a few seconds for the Amazon SKS to clear its backlog so to make sure that",
    "start": "2258579",
    "end": "2264640"
  },
  {
    "text": "the on premise the last on-premise data status was replicated to dynamodb and then we flipped the right traffic over",
    "start": "2264640",
    "end": "2271150"
  },
  {
    "text": "to the new app and that's really all there was at this point the new",
    "start": "2271150",
    "end": "2276880"
  },
  {
    "text": "application was running 100% in Amazon dinah a double yes so the next system",
    "start": "2276880",
    "end": "2288400"
  },
  {
    "start": "2281000",
    "end": "2297000"
  },
  {
    "text": "I'll be going over is trophies so since we have a lot of people who own piece",
    "start": "2288400",
    "end": "2293530"
  },
  {
    "text": "Falls or a pierced device I hope you all familiar with trophies it's the",
    "start": "2293530",
    "end": "2298780"
  },
  {
    "start": "2297000",
    "end": "2355000"
  },
  {
    "text": "achievement system PSN so you do something cool in a game you get an achievement you can compare with your",
    "start": "2298780",
    "end": "2304059"
  },
  {
    "text": "friends it's kind of like showing off stuff like that right I don't have many trophies he has like super many trophies",
    "start": "2304059",
    "end": "2310720"
  },
  {
    "text": "so he's a little bit more invested in that but it has a really simple data model because it's you have unlocked a",
    "start": "2310720",
    "end": "2317829"
  },
  {
    "text": "trophy it's a connection between you and two trophy so however what's really special about",
    "start": "2317829",
    "end": "2324430"
  },
  {
    "text": "it has really strict data retention policies because again we don't want to lose your trophies and if you get a",
    "start": "2324430",
    "end": "2330970"
  },
  {
    "text": "trophy that you worked really hard for and you come back the next day and it's gone you don't want this to happen and",
    "start": "2330970",
    "end": "2338079"
  },
  {
    "text": "also we want data aggregation is required so we calculate based on how",
    "start": "2338079",
    "end": "2344619"
  },
  {
    "text": "many people played the game and stuff like that how rare the trophy is so",
    "start": "2344619",
    "end": "2351099"
  },
  {
    "text": "again I'm going to go over the original architecture which again is a",
    "start": "2351099",
    "end": "2357309"
  },
  {
    "start": "2355000",
    "end": "2383000"
  },
  {
    "text": "traditional datas and it looks very similar to friends list if you look at it it has an app server behind healthful",
    "start": "2357309",
    "end": "2364119"
  },
  {
    "text": "load balancer database master-slave replication for trophies and then it has",
    "start": "2364119",
    "end": "2370180"
  },
  {
    "text": "the unlock data and we were running a cron job every so inso minutes to do the",
    "start": "2370180",
    "end": "2377289"
  },
  {
    "text": "calculation in the background and it would actually flip some tables and really fancy stuff like that",
    "start": "2377289",
    "end": "2384000"
  },
  {
    "start": "2383000",
    "end": "2400000"
  },
  {
    "text": "however again with ps4 launch we got a lot more trash and it was reaching the breaking point",
    "start": "2384000",
    "end": "2390640"
  },
  {
    "text": "so what we did again it looks super similar to friend to friends is we used",
    "start": "2390640",
    "end": "2396730"
  },
  {
    "text": "Amazon to front-load our cache in AWS and again it was super complex and it",
    "start": "2396730",
    "end": "2405340"
  },
  {
    "start": "2400000",
    "end": "2470000"
  },
  {
    "text": "had a lot of failure points and the AWS cache can really only cache wreaths it",
    "start": "2405340",
    "end": "2411190"
  },
  {
    "text": "can't catch writes so we decided enough is enough we're gonna put new architecture in place it's gonna be all",
    "start": "2411190",
    "end": "2417160"
  },
  {
    "text": "cloud it's gonna be wonderful we don't have to maintain it that much and again it's Amazon route 53 and ELB",
    "start": "2417160",
    "end": "2424660"
  },
  {
    "text": "easy to running the the app service and writing to dynamodb and ElastiCache now",
    "start": "2424660",
    "end": "2432430"
  },
  {
    "text": "if you remember trophy has a very unique aggregation requirements so what we did",
    "start": "2432430",
    "end": "2439030"
  },
  {
    "text": "is we utilize DynamoDB streams to kick off lambda functions which could then",
    "start": "2439030",
    "end": "2444190"
  },
  {
    "text": "on-the-fly calculate do those calculations and write those values back",
    "start": "2444190",
    "end": "2449650"
  },
  {
    "text": "to DynamoDB and elastic hash while also the AWS lambda functions push the data",
    "start": "2449650",
    "end": "2455170"
  },
  {
    "text": "into amazon kinases firehose which then in turn sources for us on a stop on s3",
    "start": "2455170",
    "end": "2461130"
  },
  {
    "text": "for later usage if we want to add a new calculation method so let me go a little",
    "start": "2461130",
    "end": "2468130"
  },
  {
    "text": "bit more into detail of the data aggregation and it's a very similar",
    "start": "2468130",
    "end": "2475810"
  },
  {
    "start": "2470000",
    "end": "2530000"
  },
  {
    "text": "approach to friends but the aggregation as I already mentioned it's a unique requirement for trophies and we didn't",
    "start": "2475810",
    "end": "2483640"
  },
  {
    "text": "want to use our DB systems due to scalability concerns so we just moved off aadhi aadhi be systems do to come",
    "start": "2483640",
    "end": "2490470"
  },
  {
    "text": "scalability issues so we didn't want to repeat that and using dynamic these UV",
    "start": "2490470",
    "end": "2495910"
  },
  {
    "text": "streams and ews lambda to calculate those data was a really good option for us so even though you see the line from",
    "start": "2495910",
    "end": "2503830"
  },
  {
    "text": "amazon kinases streams to us 3 and then amazon EMR so actually during I think",
    "start": "2503830",
    "end": "2511050"
  },
  {
    "text": "yesterday's keynote they announced Amazon Athena which was super excited",
    "start": "2511050",
    "end": "2517060"
  },
  {
    "text": "about because it might actually mean that we don't have to use Amazon anymore we can just go ahead and query",
    "start": "2517060",
    "end": "2523119"
  },
  {
    "text": "that data that we buffered onto s3 and add new features super quickly so mostly",
    "start": "2523119",
    "end": "2532749"
  },
  {
    "start": "2530000",
    "end": "2609000"
  },
  {
    "text": "a few challenges that we faced is data integrity of course is a requirement so",
    "start": "2532749",
    "end": "2538650"
  },
  {
    "text": "we actually spent multiple days a lot more days than we thought on reading back data from DynamoDB to",
    "start": "2538650",
    "end": "2546339"
  },
  {
    "text": "ensure data integrity so we would have use cases like oh let's let's write to the old up and read from the new app to",
    "start": "2546339",
    "end": "2553119"
  },
  {
    "text": "make sure that it's working in production or read from the old app and read from the new app and compare that",
    "start": "2553119",
    "end": "2559029"
  },
  {
    "text": "to make sure everything is in sync also DynamoDB key names is one of our",
    "start": "2559029",
    "end": "2567849"
  },
  {
    "text": "the core developer for friends found this is I think he's in the room maybe",
    "start": "2567849",
    "end": "2573849"
  },
  {
    "text": "if you're in the room can you raise your hand know a little bit shy but so the",
    "start": "2573849",
    "end": "2582880"
  },
  {
    "text": "key names in DynamoDB we had really nice cleanings like user ID and stuff like",
    "start": "2582880",
    "end": "2588249"
  },
  {
    "text": "that name but actually when once we reduce those key names to a single",
    "start": "2588249",
    "end": "2593619"
  },
  {
    "text": "letter ABCDE we reduce our cost by about three times so you're paying for the key",
    "start": "2593619",
    "end": "2601089"
  },
  {
    "text": "names as well so just make sure that you don't pick super long fancy names because it's gonna cost you and last but",
    "start": "2601089",
    "end": "2610779"
  },
  {
    "start": "2609000",
    "end": "2642000"
  },
  {
    "text": "not least it's so you've seen Alex and Dustin's session hopefully they were",
    "start": "2610779",
    "end": "2617109"
  },
  {
    "text": "talking about active active multi region we have similar requests features that",
    "start": "2617109",
    "end": "2623410"
  },
  {
    "text": "we would like to see it's multi region support for dynamic DB and multi-region support for RDS TTL support for dynamo",
    "start": "2623410",
    "end": "2631479"
  },
  {
    "text": "DB and also Redis cluster it would just make our life so much easier and I think",
    "start": "2631479",
    "end": "2636630"
  },
  {
    "text": "that's about it thank you",
    "start": "2636630",
    "end": "2640828"
  }
]