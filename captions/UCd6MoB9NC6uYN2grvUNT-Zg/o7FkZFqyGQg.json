[
  {
    "start": "0",
    "end": "23000"
  },
  {
    "text": "okay please welcome to the stage from",
    "start": "30",
    "end": "2370"
  },
  {
    "text": "Ingenix this is damien Curry's hey good",
    "start": "2370",
    "end": "5759"
  },
  {
    "text": "afternoon everyone",
    "start": "5759",
    "end": "6740"
  },
  {
    "text": "so I'm with in I'm the technical manager",
    "start": "6740",
    "end": "9510"
  },
  {
    "text": "for business development at nginx and",
    "start": "9510",
    "end": "11490"
  },
  {
    "text": "I'm here to talk about how you can build",
    "start": "11490",
    "end": "13889"
  },
  {
    "text": "some infrastructure leveraging AWS NLB",
    "start": "13889",
    "end": "16800"
  },
  {
    "text": "and nginx to create a elastic ingress",
    "start": "16800",
    "end": "19740"
  },
  {
    "text": "and ingress tear for your applications",
    "start": "19740",
    "end": "21390"
  },
  {
    "text": "so obviously with AWS you have multiple",
    "start": "21390",
    "end": "25949"
  },
  {
    "start": "23000",
    "end": "140000"
  },
  {
    "text": "options for load balancing solutions",
    "start": "25949",
    "end": "27840"
  },
  {
    "text": "where you kind of start at the most",
    "start": "27840",
    "end": "29550"
  },
  {
    "text": "basic solution using the classic load",
    "start": "29550",
    "end": "32398"
  },
  {
    "text": "balancer where you have a single",
    "start": "32399",
    "end": "33809"
  },
  {
    "text": "application and you just want to be able",
    "start": "33809",
    "end": "35940"
  },
  {
    "text": "to have multiple back-end servers making",
    "start": "35940",
    "end": "38370"
  },
  {
    "text": "a more highly available website so",
    "start": "38370",
    "end": "40590"
  },
  {
    "text": "really easy basic set up good way to get",
    "start": "40590",
    "end": "43770"
  },
  {
    "text": "started with an application and you know",
    "start": "43770",
    "end": "46200"
  },
  {
    "text": "have a good easy to manage starting",
    "start": "46200",
    "end": "48059"
  },
  {
    "text": "point as your application grows and kind",
    "start": "48059",
    "end": "51360"
  },
  {
    "text": "of gets adds more complexity you can",
    "start": "51360",
    "end": "53969"
  },
  {
    "text": "move on to something along the lines of",
    "start": "53969",
    "end": "55530"
  },
  {
    "text": "the Amazon application load balancer",
    "start": "55530",
    "end": "57570"
  },
  {
    "text": "which allows you to have multiple",
    "start": "57570",
    "end": "60629"
  },
  {
    "text": "different applications on the back end",
    "start": "60629",
    "end": "62850"
  },
  {
    "text": "with a single ingress point and then use",
    "start": "62850",
    "end": "65549"
  },
  {
    "text": "URI base routing to access those",
    "start": "65549",
    "end": "67950"
  },
  {
    "text": "different applications and again this is",
    "start": "67950",
    "end": "70650"
  },
  {
    "text": "very easy to set up integrates really",
    "start": "70650",
    "end": "72479"
  },
  {
    "text": "closely with all the other Amazon",
    "start": "72479",
    "end": "74310"
  },
  {
    "text": "services very simple to use",
    "start": "74310",
    "end": "77640"
  },
  {
    "text": "handles SSL termination and is fully",
    "start": "77640",
    "end": "80100"
  },
  {
    "text": "managed by AWS but sometimes you get an",
    "start": "80100",
    "end": "83400"
  },
  {
    "text": "application where it gets a little bit",
    "start": "83400",
    "end": "86460"
  },
  {
    "text": "more complicated and this is where nginx",
    "start": "86460",
    "end": "89100"
  },
  {
    "text": "+ really comes in and helps you build",
    "start": "89100",
    "end": "91470"
  },
  {
    "text": "this architecture out so what you end up",
    "start": "91470",
    "end": "94350"
  },
  {
    "text": "having is an architecture along these",
    "start": "94350",
    "end": "96060"
  },
  {
    "text": "lines so you have the classic or network",
    "start": "96060",
    "end": "100170"
  },
  {
    "text": "load balancer usually a network load",
    "start": "100170",
    "end": "101850"
  },
  {
    "text": "balancer that's acting as the edge",
    "start": "101850",
    "end": "104460"
  },
  {
    "text": "ingress point into your infrastructure",
    "start": "104460",
    "end": "106829"
  },
  {
    "text": "and then behind that you're able to run",
    "start": "106829",
    "end": "109530"
  },
  {
    "text": "the nginx plus as a load balancing tier",
    "start": "109530",
    "end": "113130"
  },
  {
    "text": "in an auto scaling group that allows you",
    "start": "113130",
    "end": "115710"
  },
  {
    "text": "to have much more verbose routing",
    "start": "115710",
    "end": "118799"
  },
  {
    "text": "options",
    "start": "118799",
    "end": "119520"
  },
  {
    "text": "so unlike the application load balancer",
    "start": "119520",
    "end": "122430"
  },
  {
    "text": "which is just doing basic URI based",
    "start": "122430",
    "end": "124259"
  },
  {
    "text": "routing you can really make routing",
    "start": "124259",
    "end": "126540"
  },
  {
    "text": "decisions on anything that you have in",
    "start": "126540",
    "end": "129479"
  },
  {
    "text": "your request",
    "start": "129479",
    "end": "130200"
  },
  {
    "text": "whether you want to do a route based on",
    "start": "130200",
    "end": "131700"
  },
  {
    "text": "headers",
    "start": "131700",
    "end": "132550"
  },
  {
    "text": "or you know different information that",
    "start": "132550",
    "end": "134410"
  },
  {
    "text": "comes in that request gives you a lot",
    "start": "134410",
    "end": "136690"
  },
  {
    "text": "more flexibility so and here's kind of",
    "start": "136690",
    "end": "141130"
  },
  {
    "text": "just a breakdown of what everything is",
    "start": "141130",
    "end": "142960"
  },
  {
    "text": "so again you know you start with the",
    "start": "142960",
    "end": "144310"
  },
  {
    "text": "very basic classic load balancer just",
    "start": "144310",
    "end": "146950"
  },
  {
    "text": "doing basic HTTP termination you go to",
    "start": "146950",
    "end": "149740"
  },
  {
    "text": "Amazon's application load balancer to",
    "start": "149740",
    "end": "152410"
  },
  {
    "text": "get that simple layer seven integration",
    "start": "152410",
    "end": "155590"
  },
  {
    "text": "and then you get to nginx plus where we",
    "start": "155590",
    "end": "157810"
  },
  {
    "text": "have features like the advanced layer",
    "start": "157810",
    "end": "159970"
  },
  {
    "text": "seven load balancing content caching to",
    "start": "159970",
    "end": "163030"
  },
  {
    "text": "improve the performance of your back-end",
    "start": "163030",
    "end": "164440"
  },
  {
    "text": "application servers TLS and SSL",
    "start": "164440",
    "end": "168570"
  },
  {
    "text": "encryption using elliptic curve",
    "start": "168570",
    "end": "170860"
  },
  {
    "text": "cryptography cryptography certificates",
    "start": "170860",
    "end": "174100"
  },
  {
    "text": "for higher performance decoding as well",
    "start": "174100",
    "end": "177640"
  },
  {
    "text": "as full WebSocket and a chief key to",
    "start": "177640",
    "end": "179950"
  },
  {
    "text": "support full GRC P support for the",
    "start": "179950",
    "end": "183400"
  },
  {
    "text": "front-end back-end so you can have",
    "start": "183400",
    "end": "184840"
  },
  {
    "text": "end-to-end G RPC communications as well",
    "start": "184840",
    "end": "188050"
  },
  {
    "text": "as advanced HTTP health checks so you",
    "start": "188050",
    "end": "190300"
  },
  {
    "text": "can do very much very specific health",
    "start": "190300",
    "end": "194140"
  },
  {
    "text": "checks to your application so that not",
    "start": "194140",
    "end": "196480"
  },
  {
    "text": "only do you know that that back-end",
    "start": "196480",
    "end": "197920"
  },
  {
    "text": "application is online but that it's also",
    "start": "197920",
    "end": "200709"
  },
  {
    "text": "returning the data you expect it to",
    "start": "200709",
    "end": "202660"
  },
  {
    "text": "return and you know it's actually",
    "start": "202660",
    "end": "203980"
  },
  {
    "text": "behaving properly and then also we have",
    "start": "203980",
    "end": "206500"
  },
  {
    "text": "a lot of different authentication",
    "start": "206500",
    "end": "208200"
  },
  {
    "text": "options including support for JWT so",
    "start": "208200",
    "end": "211840"
  },
  {
    "text": "when you have something like an",
    "start": "211840",
    "end": "212980"
  },
  {
    "text": "application or API gateway you can",
    "start": "212980",
    "end": "215590"
  },
  {
    "text": "really easily implement JWT",
    "start": "215590",
    "end": "218260"
  },
  {
    "text": "authentication for that so the next kind",
    "start": "218260",
    "end": "223330"
  },
  {
    "start": "222000",
    "end": "273000"
  },
  {
    "text": "of step is that that's always good at a",
    "start": "223330",
    "end": "225550"
  },
  {
    "text": "at a per region level but how do you",
    "start": "225550",
    "end": "228130"
  },
  {
    "text": "handle the global load balancing so this",
    "start": "228130",
    "end": "231130"
  },
  {
    "text": "is where Amazon's route 53 global server",
    "start": "231130",
    "end": "234310"
  },
  {
    "text": "load balancing comes into play it's you",
    "start": "234310",
    "end": "237700"
  },
  {
    "text": "can be very very specific with how you",
    "start": "237700",
    "end": "239709"
  },
  {
    "text": "configure it for either active active or",
    "start": "239709",
    "end": "241750"
  },
  {
    "text": "active passive solutions you can it",
    "start": "241750",
    "end": "244420"
  },
  {
    "text": "provides Geographic based load balancing",
    "start": "244420",
    "end": "246640"
  },
  {
    "text": "so that the users will get routed to the",
    "start": "246640",
    "end": "249160"
  },
  {
    "text": "data center that is physically closest",
    "start": "249160",
    "end": "251019"
  },
  {
    "text": "to their location and it can be used",
    "start": "251019",
    "end": "253239"
  },
  {
    "text": "with or without Amazon elastic load",
    "start": "253239",
    "end": "255580"
  },
  {
    "text": "balancers so you can always use the",
    "start": "255580",
    "end": "257859"
  },
  {
    "text": "route 53 to direct traffic directly to",
    "start": "257859",
    "end": "260709"
  },
  {
    "text": "your nginx Plus instances in the case",
    "start": "260710",
    "end": "263200"
  },
  {
    "text": "you're looking to do something like UDP",
    "start": "263200",
    "end": "265570"
  },
  {
    "text": "traffic",
    "start": "265570",
    "end": "266260"
  },
  {
    "text": "load-balancing which is not currently",
    "start": "266260",
    "end": "267790"
  },
  {
    "text": "supported by the ELB load balancers then",
    "start": "267790",
    "end": "273760"
  },
  {
    "start": "273000",
    "end": "448000"
  },
  {
    "text": "the next step is how do you have your",
    "start": "273760",
    "end": "276490"
  },
  {
    "text": "back-end application running and this is",
    "start": "276490",
    "end": "278500"
  },
  {
    "text": "where nginx plus comes in to work with",
    "start": "278500",
    "end": "280690"
  },
  {
    "text": "the Amazon auto scaling groups the",
    "start": "280690",
    "end": "284500"
  },
  {
    "text": "standard auto scaling group architecture",
    "start": "284500",
    "end": "286300"
  },
  {
    "text": "is just usually looks like this you have",
    "start": "286300",
    "end": "289240"
  },
  {
    "text": "nginx plus on the edge and then that is",
    "start": "289240",
    "end": "292000"
  },
  {
    "text": "routing 2lbs",
    "start": "292000",
    "end": "293890"
  },
  {
    "text": "that have the auto scaling groups behind",
    "start": "293890",
    "end": "297700"
  },
  {
    "text": "them so this is all the kind of standard",
    "start": "297700",
    "end": "299950"
  },
  {
    "text": "way that Amazon normally deploys their",
    "start": "299950",
    "end": "302950"
  },
  {
    "text": "auto scaling groups with nginx plus we",
    "start": "302950",
    "end": "307330"
  },
  {
    "text": "have a auto scaling group sync plug-in",
    "start": "307330",
    "end": "309460"
  },
  {
    "text": "so what it does is it it removes that",
    "start": "309460",
    "end": "311860"
  },
  {
    "text": "extra layer of having ELB traffic so",
    "start": "311860",
    "end": "315010"
  },
  {
    "text": "instead of nginx routing to an ELB which",
    "start": "315010",
    "end": "317890"
  },
  {
    "text": "then routes to your application servers",
    "start": "317890",
    "end": "320320"
  },
  {
    "text": "nginx is speaking directly with those",
    "start": "320320",
    "end": "323140"
  },
  {
    "text": "application servers so you're getting",
    "start": "323140",
    "end": "325360"
  },
  {
    "text": "much faster response times as things",
    "start": "325360",
    "end": "327850"
  },
  {
    "text": "comes up and down you can also leverage",
    "start": "327850",
    "end": "330190"
  },
  {
    "text": "those advanced HTTP health checks I was",
    "start": "330190",
    "end": "332290"
  },
  {
    "text": "speaking of earlier to go ahead and make",
    "start": "332290",
    "end": "334780"
  },
  {
    "text": "sure that those back-end application",
    "start": "334780",
    "end": "337090"
  },
  {
    "text": "servers are online and working and this",
    "start": "337090",
    "end": "340620"
  },
  {
    "text": "leverages the dynamic reconfiguration",
    "start": "340620",
    "end": "342820"
  },
  {
    "text": "API that we have with nginx Plus so as",
    "start": "342820",
    "end": "346180"
  },
  {
    "text": "these servers come on inline they will",
    "start": "346180",
    "end": "348190"
  },
  {
    "text": "automatically be added to nginx is",
    "start": "348190",
    "end": "350170"
  },
  {
    "text": "running configuration without having to",
    "start": "350170",
    "end": "352660"
  },
  {
    "text": "do any service reloads no restarts it",
    "start": "352660",
    "end": "355210"
  },
  {
    "text": "all happens 100% on the fly and it has",
    "start": "355210",
    "end": "358090"
  },
  {
    "text": "the ability to integrate with ec2 auto",
    "start": "358090",
    "end": "361990"
  },
  {
    "text": "scaling groups",
    "start": "361990",
    "end": "362980"
  },
  {
    "text": "ECS services as well as just standard",
    "start": "362980",
    "end": "366130"
  },
  {
    "text": "Amazon ec2 instances so if you want to",
    "start": "366130",
    "end": "368770"
  },
  {
    "text": "manage your in situ instances by hand",
    "start": "368770",
    "end": "371020"
  },
  {
    "text": "you can define the different tags and",
    "start": "371020",
    "end": "373500"
  },
  {
    "text": "nginx will check with the with the AWS",
    "start": "373500",
    "end": "377410"
  },
  {
    "text": "endpoint and as new servers come online",
    "start": "377410",
    "end": "380290"
  },
  {
    "text": "that match those requirements they will",
    "start": "380290",
    "end": "382420"
  },
  {
    "text": "automatically be added to your",
    "start": "382420",
    "end": "384610"
  },
  {
    "text": "configuration and start routing traffic",
    "start": "384610",
    "end": "387130"
  },
  {
    "text": "to them as soon as they're online and",
    "start": "387130",
    "end": "388360"
  },
  {
    "text": "available",
    "start": "388360",
    "end": "391080"
  },
  {
    "text": "there's another feature too that comes",
    "start": "392430",
    "end": "395190"
  },
  {
    "text": "with route 53 which is the route 53",
    "start": "395190",
    "end": "397110"
  },
  {
    "text": "service discovery functionality and so",
    "start": "397110",
    "end": "399750"
  },
  {
    "text": "this is a system where as a as an",
    "start": "399750",
    "end": "404070"
  },
  {
    "text": "application springs up new instances it",
    "start": "404070",
    "end": "407100"
  },
  {
    "text": "will add the IP and port information for",
    "start": "407100",
    "end": "409949"
  },
  {
    "text": "that new instance to a DNS SRV record",
    "start": "409949",
    "end": "413120"
  },
  {
    "text": "what nginx then does it nginx will query",
    "start": "413120",
    "end": "416699"
  },
  {
    "text": "that DNS SRV record return the data in",
    "start": "416699",
    "end": "420750"
  },
  {
    "text": "it so it gets a list of IP addresses and",
    "start": "420750",
    "end": "422940"
  },
  {
    "text": "port numbers that then it goes ahead and",
    "start": "422940",
    "end": "426210"
  },
  {
    "text": "adds to its running config so again it's",
    "start": "426210",
    "end": "428970"
  },
  {
    "text": "doing it all on the fly very tunable you",
    "start": "428970",
    "end": "431669"
  },
  {
    "text": "can configure it to check as often as",
    "start": "431669",
    "end": "434070"
  },
  {
    "text": "you would like for the new instances",
    "start": "434070",
    "end": "435930"
  },
  {
    "text": "coming online and allows you to just",
    "start": "435930",
    "end": "438510"
  },
  {
    "text": "have integration with a lot of different",
    "start": "438510",
    "end": "441090"
  },
  {
    "text": "AWS services whether whether they have",
    "start": "441090",
    "end": "444000"
  },
  {
    "text": "any other integration as well the next",
    "start": "444000",
    "end": "449430"
  },
  {
    "start": "448000",
    "end": "567000"
  },
  {
    "text": "thing we want to talk about is this is",
    "start": "449430",
    "end": "450660"
  },
  {
    "text": "something we came up with pretty",
    "start": "450660",
    "end": "451710"
  },
  {
    "text": "recently is integration with AWS private",
    "start": "451710",
    "end": "454590"
  },
  {
    "text": "link so AWS private link provides a",
    "start": "454590",
    "end": "458039"
  },
  {
    "text": "functionality where you can you can",
    "start": "458039",
    "end": "460710"
  },
  {
    "text": "interconnect to V pcs from different",
    "start": "460710",
    "end": "463979"
  },
  {
    "text": "customers and have that traffic stay",
    "start": "463979",
    "end": "466410"
  },
  {
    "text": "entirely on the internal Amazon network",
    "start": "466410",
    "end": "468889"
  },
  {
    "text": "so usually it when you communicate",
    "start": "468889",
    "end": "471659"
  },
  {
    "text": "between the two of them it does a lot of",
    "start": "471659",
    "end": "474659"
  },
  {
    "text": "magic that allows you to not have to",
    "start": "474659",
    "end": "476760"
  },
  {
    "text": "care about overlapping IP space so",
    "start": "476760",
    "end": "479729"
  },
  {
    "text": "because of that there are headers that",
    "start": "479729",
    "end": "481289"
  },
  {
    "text": "are being passed by private link that",
    "start": "481289",
    "end": "483060"
  },
  {
    "text": "are a modified version of proxy protocol",
    "start": "483060",
    "end": "484979"
  },
  {
    "text": "version 2 which we went ahead and",
    "start": "484979",
    "end": "487260"
  },
  {
    "text": "implemented into nginx plus so that it",
    "start": "487260",
    "end": "489990"
  },
  {
    "text": "can go ahead and extract those headers",
    "start": "489990",
    "end": "492000"
  },
  {
    "text": "whether it's the information about the",
    "start": "492000",
    "end": "493919"
  },
  {
    "text": "customer VPC and then you can use that",
    "start": "493919",
    "end": "496740"
  },
  {
    "text": "information to not only make routing",
    "start": "496740",
    "end": "499199"
  },
  {
    "text": "decisions so you can route everybody",
    "start": "499199",
    "end": "500970"
  },
  {
    "text": "from all the requests from customer a to",
    "start": "500970",
    "end": "503490"
  },
  {
    "text": "a specific application server and",
    "start": "503490",
    "end": "505340"
  },
  {
    "text": "customer B to a different application",
    "start": "505340",
    "end": "507360"
  },
  {
    "text": "server or you can also use it to just",
    "start": "507360",
    "end": "510599"
  },
  {
    "text": "decode that information and attach that",
    "start": "510599",
    "end": "513800"
  },
  {
    "text": "proxy protocol v2 data as a header that",
    "start": "513800",
    "end": "517529"
  },
  {
    "text": "your back-end application can understand",
    "start": "517529",
    "end": "519659"
  },
  {
    "text": "so that way you don't have to implement",
    "start": "519659",
    "end": "521640"
  },
  {
    "text": "proxy protocol v2 in your application",
    "start": "521640",
    "end": "524700"
  },
  {
    "text": "you",
    "start": "524700",
    "end": "525329"
  },
  {
    "text": "go ahead and let nginx handle that part",
    "start": "525329",
    "end": "527459"
  },
  {
    "text": "of it and just pass the information to",
    "start": "527459",
    "end": "530040"
  },
  {
    "text": "that application server in whatever way",
    "start": "530040",
    "end": "532529"
  },
  {
    "text": "is bet easiest for your application to",
    "start": "532529",
    "end": "534149"
  },
  {
    "text": "understand so and as this time we",
    "start": "534149",
    "end": "537509"
  },
  {
    "text": "introduced this feature in R 16 which is",
    "start": "537509",
    "end": "539790"
  },
  {
    "text": "the last release of nginx plus and",
    "start": "539790",
    "end": "542329"
  },
  {
    "text": "currently it is really the only solution",
    "start": "542329",
    "end": "544709"
  },
  {
    "text": "that allows you to do layer 7 load",
    "start": "544709",
    "end": "546929"
  },
  {
    "text": "balancing in a private link situation so",
    "start": "546929",
    "end": "550259"
  },
  {
    "text": "it's a it's a really great solution if",
    "start": "550259",
    "end": "552420"
  },
  {
    "text": "you need to do that connect customer v",
    "start": "552420",
    "end": "554369"
  },
  {
    "text": "pcs to your V PC keep things very secure",
    "start": "554369",
    "end": "557279"
  },
  {
    "text": "but also not have to have dedicated V",
    "start": "557279",
    "end": "559949"
  },
  {
    "text": "pcs per customer so you can have",
    "start": "559949",
    "end": "562049"
  },
  {
    "text": "multiple customers sharing",
    "start": "562049",
    "end": "563660"
  },
  {
    "text": "infrastructure on your side that's about",
    "start": "563660",
    "end": "569160"
  },
  {
    "text": "it I just want to say please come join",
    "start": "569160",
    "end": "570989"
  },
  {
    "text": "us over at the Jam lounge it's actually",
    "start": "570989",
    "end": "572970"
  },
  {
    "text": "just right on the other side of this",
    "start": "572970",
    "end": "574230"
  },
  {
    "text": "wall here we have a challenge there's a",
    "start": "574230",
    "end": "576989"
  },
  {
    "text": "lot of cool stuff lot of fun challenges",
    "start": "576989",
    "end": "579209"
  },
  {
    "text": "that you can work with as a team earn",
    "start": "579209",
    "end": "581459"
  },
  {
    "text": "points and I think last time I checked",
    "start": "581459",
    "end": "583679"
  },
  {
    "text": "the winning team gets VIP passes to the",
    "start": "583679",
    "end": "586980"
  },
  {
    "text": "replay event so it's a really neat it's",
    "start": "586980",
    "end": "589259"
  },
  {
    "text": "a really neat event you know we're",
    "start": "589259",
    "end": "591149"
  },
  {
    "text": "trying to allow people to learn more",
    "start": "591149",
    "end": "592919"
  },
  {
    "text": "about nginx how you can implement a lot",
    "start": "592919",
    "end": "595290"
  },
  {
    "text": "of these features I was just talking",
    "start": "595290",
    "end": "596730"
  },
  {
    "text": "about and you know win some cool prizes",
    "start": "596730",
    "end": "598649"
  },
  {
    "text": "and learn about different AWS",
    "start": "598649",
    "end": "600779"
  },
  {
    "text": "architecture all right that's all I got",
    "start": "600779",
    "end": "604559"
  },
  {
    "text": "thank you everybody for coming and have",
    "start": "604559",
    "end": "606809"
  },
  {
    "text": "a good day",
    "start": "606809",
    "end": "609199"
  }
]