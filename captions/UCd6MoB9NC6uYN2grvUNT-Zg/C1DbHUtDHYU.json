[
  {
    "text": "all right hello everyone looks like people are still trickling in we'll go ahead and get started because we're at 11:45 on the dot um I'm curious has",
    "start": "640",
    "end": "8400"
  },
  {
    "text": "anyone found any good Pokemon in this room if you find anything interesting around the stage area let me know so I",
    "start": "8400",
    "end": "15120"
  },
  {
    "text": "can pause and catch it because it's clearly my priority today um but hey guys I'm Brandon Chavis I'm a Solutions",
    "start": "15120",
    "end": "21439"
  },
  {
    "text": "architect on the partner team in AWS uh and I generally focus on the docker ecosystem uh which means working",
    "start": "21439",
    "end": "28240"
  },
  {
    "text": "with partners that build um Sol sols that work with Docker um and they and",
    "start": "28240",
    "end": "33320"
  },
  {
    "text": "making sure they work well on top of the AWS platform um so I think it's kind of good",
    "start": "33320",
    "end": "39480"
  },
  {
    "text": "to level set at the beginning here talk about an agenda um if you parse this this talk title as just getting started",
    "start": "39480",
    "end": "46199"
  },
  {
    "text": "with Docker you might be a little bit disappointed I'm not going to cover too much about the basics of like the docker command line for example or the docker",
    "start": "46199",
    "end": "52719"
  },
  {
    "text": "tool set um and I also think that calling this getting started with Docker on AWS is a little bit broad because",
    "start": "52719",
    "end": "59680"
  },
  {
    "text": "there's many many ways to run Docker on awss and that might be with an AWS produced solution so like elastic beant",
    "start": "59680",
    "end": "65760"
  },
  {
    "text": "stock or Amazon ECS or it might be with one of those partner Solutions like dcos",
    "start": "65760",
    "end": "70799"
  },
  {
    "text": "from mesosphere or Docker data center from Docker themselves uh and we work with these companies to make sure all these things work really well on the",
    "start": "70799",
    "end": "78320"
  },
  {
    "text": "platform um but today we're really going to talk about uh Amazon ECS in detail",
    "start": "78320",
    "end": "84600"
  },
  {
    "text": "which is what we've built for managing containers at scale on AWS um and we'll talk a little bit about how to use",
    "start": "84600",
    "end": "90320"
  },
  {
    "text": "Docker with ECS um and so we'll talk about some of the Core Concepts here and then we'll wrap it all up with a demo at",
    "start": "90320",
    "end": "95880"
  },
  {
    "text": "the very end and kind of show going from just a Docker file and an application um to pushing a container to ECR which is",
    "start": "95880",
    "end": "102280"
  },
  {
    "text": "ec2 container registry um and then we will kind of build a service and then do",
    "start": "102280",
    "end": "107759"
  },
  {
    "text": "some rolling updates of that code while it's running you know in production here so first of all if you're not",
    "start": "107759",
    "end": "115040"
  },
  {
    "text": "familiar with Docker actually can I a little bit of audience involvement here who is uh completely unfamiliar with with Docker at this point who is",
    "start": "115040",
    "end": "121479"
  },
  {
    "text": "completely new so a couple of people that's awesome who's already played with Docker a little",
    "start": "121479",
    "end": "127720"
  },
  {
    "text": "bit probably about half and then who are the unicorns out there running Docker in production so we have a couple of those",
    "start": "127720",
    "end": "134239"
  },
  {
    "text": "too awesome that's a great gradient uh very diverse audience so that's awesome I hope everyone can get a little bit out",
    "start": "134239",
    "end": "139879"
  },
  {
    "text": "of this um but why containers you know some of you don't need to um understand this but I think personally it lets us",
    "start": "139879",
    "end": "146400"
  },
  {
    "text": "care a lot less about things like operating systems or physical machines uh and instead really focus on um kind",
    "start": "146400",
    "end": "152480"
  },
  {
    "text": "of the development workflow which can be really valuable for just focusing on your core competencies so focusing on",
    "start": "152480",
    "end": "157800"
  },
  {
    "text": "your business or your application um so let's talk a little bit about how they enable that so underneath your favorite",
    "start": "157800",
    "end": "164680"
  },
  {
    "text": "container runtime um generally there lies um a set of specifications that have been defined by What's called the",
    "start": "164680",
    "end": "170599"
  },
  {
    "text": "open container initiative uh and those specifications exist in code form uh in a library called runc and so runc more",
    "start": "170599",
    "end": "178519"
  },
  {
    "text": "or less provides an API hooking into um and aggregating all the underlying Linux",
    "start": "178519",
    "end": "183959"
  },
  {
    "text": "kernel features that provide all that process isolation that makes up what we know as a container so some of those",
    "start": "183959",
    "end": "189920"
  },
  {
    "text": "things might be uh c groups control groups which allow you to do uh things like limit resource utilization for a",
    "start": "189920",
    "end": "195720"
  },
  {
    "text": "particular process um or things like name spaces which provide the actual process isolation so preventing one process from",
    "start": "195720",
    "end": "202440"
  },
  {
    "text": "seeing another preventing that process from seeing parts of the file system you don't want it to see um any fans of the",
    "start": "202440",
    "end": "208319"
  },
  {
    "text": "operating system plan n by Bell Labs anyone remember that oh man that's where",
    "start": "208319",
    "end": "213400"
  },
  {
    "text": "that's where the concept of namespaces originally came from so thanks Bell Labs that's it's awesome um but anyway so all",
    "start": "213400",
    "end": "220799"
  },
  {
    "text": "this stuff underneath pretty useful concept it basically lets you use the OS kernel to create multiple isolated user",
    "start": "220799",
    "end": "226760"
  },
  {
    "text": "space processes that can have constraints on them right and so then on top of all these layers of of",
    "start": "226760",
    "end": "231959"
  },
  {
    "text": "abstraction um sits Docker which is a wonderful and userfriendly uh set of",
    "start": "231959",
    "end": "237200"
  },
  {
    "text": "tools and workflows that they allow you to do things like build images interact with containers um uh build and share",
    "start": "237200",
    "end": "244760"
  },
  {
    "text": "and like build deployment workflows on top of those images um and really make all these things useful to the average",
    "start": "244760",
    "end": "250079"
  },
  {
    "text": "developer instead of having to know a bunch of Arcane components in the Linux kernel which is great um so there's a few huge benefits",
    "start": "250079",
    "end": "256919"
  },
  {
    "text": "to containers that we like to talk about mostly here at AWS uh the first is that portability and that is because the",
    "start": "256919",
    "end": "263000"
  },
  {
    "text": "image that you build is uh consistent and immutable and so that means that no matter where I run it or when I start it",
    "start": "263000",
    "end": "269000"
  },
  {
    "text": "I can run it on this laptop here uh or I can run it in AWS in the cloud and ideally the expectation is that the",
    "start": "269000",
    "end": "275080"
  },
  {
    "text": "behavior is the same uh that's great if I want to run one here or if I want to scale it in production tomorrow right so",
    "start": "275080",
    "end": "280360"
  },
  {
    "text": "there's less surprises um containers are also flexible and by that we mean that it",
    "start": "280360",
    "end": "287639"
  },
  {
    "text": "makes it easier to decompose an application into smaller chunks or individual processes all running on the",
    "start": "287639",
    "end": "293199"
  },
  {
    "text": "same host um but you can still do that while preventing like Library conflicts you can isolate those processes so",
    "start": "293199",
    "end": "299199"
  },
  {
    "text": "that's stream code deployment and development um and also infrastructure Management in many",
    "start": "299199",
    "end": "304479"
  },
  {
    "text": "cases and then they're also fast and that they bring speed advantages to your organization in terms of both like",
    "start": "304479",
    "end": "310639"
  },
  {
    "text": "development and deployment workflows um so each container can be a",
    "start": "310639",
    "end": "315840"
  },
  {
    "text": "single-threaded development stream um and your development teams can work on these individual processes and not worry",
    "start": "315840",
    "end": "321960"
  },
  {
    "text": "so much about um what their changes are doing to other code bases and other containers and it can also benefit your",
    "start": "321960",
    "end": "327280"
  },
  {
    "text": "Ops teams because they're free to update base containers um that your development teams can build on top of and not worry about having to",
    "start": "327280",
    "end": "333240"
  },
  {
    "text": "uh to take a machine down for updates or something like that and so finally efficiency you can get a degree of",
    "start": "333240",
    "end": "338759"
  },
  {
    "text": "efficiency from containers by specifically allocating CPU and memory resources to a given container uh and",
    "start": "338759",
    "end": "344479"
  },
  {
    "text": "kind of chopping up your compute resources um in a way that's most appropriate for your application um and",
    "start": "344479",
    "end": "349759"
  },
  {
    "text": "it's a little bit more efficient than virtual machines in the sense that you can kind of cut out some of that OS overhead um and you don't have to run a",
    "start": "349759",
    "end": "355360"
  },
  {
    "text": "single process per virtual machine",
    "start": "355360",
    "end": "359599"
  },
  {
    "text": "so with all these attributes we're kind of watching containerization have pretty significant impacts on the architecture patterns we're using for building web",
    "start": "361440",
    "end": "367880"
  },
  {
    "text": "applications today uh and we see this with things like 12 Factor applications um a real focus on like small easily",
    "start": "367880",
    "end": "375599"
  },
  {
    "text": "decomposable and Deployable Services um instead of large monolithic applications and so this is actually essentially what",
    "start": "375599",
    "end": "382280"
  },
  {
    "text": "amazon.com did many years ago um so they moved from a large monolithic code base",
    "start": "382280",
    "end": "387680"
  },
  {
    "text": "which was like one large application the UI the ordering the recommendation systems all of that was like one code",
    "start": "387680",
    "end": "392800"
  },
  {
    "text": "base and so that became kind of cumbersome uh there was a lot of interdependencies between all the code",
    "start": "392800",
    "end": "398520"
  },
  {
    "text": "here um so uh certain parts of the application maybe required more resources than others uh and that was",
    "start": "398520",
    "end": "405880"
  },
  {
    "text": "difficult to uh scale efficiently and get good resource U utilization across the server Fleet so in order to scale",
    "start": "405880",
    "end": "412000"
  },
  {
    "text": "better Amazon decomposed its architecture and its application um into a bunch of Individual Services that",
    "start": "412000",
    "end": "417919"
  },
  {
    "text": "could be scaled easier um and it also allowed development teams",
    "start": "417919",
    "end": "423160"
  },
  {
    "text": "to move faster because they could work on updates that could be delivered independently of the entire application",
    "start": "423160",
    "end": "428319"
  },
  {
    "text": "being redeployed so um we would call this style probably microservices today uh",
    "start": "428319",
    "end": "434479"
  },
  {
    "text": "and we find that containers kind of really reinforce the patterns um of the microservices",
    "start": "434479",
    "end": "439840"
  },
  {
    "text": "architecture um the reason that they're so natural uh there's a couple of attributes that make them so natural and",
    "start": "439840",
    "end": "445280"
  },
  {
    "text": "and one of it is um the ease of modeling Services right so the application and all of its dependencies uh they're all",
    "start": "445280",
    "end": "451639"
  },
  {
    "text": "packaged together into a single artifact into a single image with a Docker file",
    "start": "451639",
    "end": "456919"
  },
  {
    "text": "um and that Docker image can support any app any language right um and the image",
    "start": "456919",
    "end": "462000"
  },
  {
    "text": "itself is a versioned artifact that can be stored in a repository just like your source code um and I think that makes",
    "start": "462000",
    "end": "467720"
  },
  {
    "text": "applications easier to deploy because that image is your deployment artifact also so it can simplify your deployment",
    "start": "467720",
    "end": "474800"
  },
  {
    "text": "because containers also really encourage stateless uh application design",
    "start": "474800",
    "end": "480080"
  },
  {
    "text": "um and that means that um that kind of decreases the risk of change because",
    "start": "480080",
    "end": "485159"
  },
  {
    "text": "when you're deploying a new version all the containers you're deploying are kind of just a new set of",
    "start": "485159",
    "end": "490479"
  },
  {
    "text": "containers um so kind of all these things together kind of make it easier to decompose applications into",
    "start": "490479",
    "end": "497680"
  },
  {
    "text": "microservices um this is a dumb slide I don't know who has to block out lunch when the most strous thing on their day",
    "start": "498159",
    "end": "504240"
  },
  {
    "text": "is picking up dry cleaning but blocking out lunch is a pro move and I respect that um but let's talk about scheduling",
    "start": "504240",
    "end": "511759"
  },
  {
    "text": "uh in the context of containers so basically scheduling means uh that you need to get your app to the compute resources uh that are available to run",
    "start": "511759",
    "end": "518159"
  },
  {
    "text": "them um very simply right so it's really easy to deploy a single container uh maybe to my laptop right here because I",
    "start": "518159",
    "end": "524240"
  },
  {
    "text": "can just look at the resources I have available I can check and see if that process is running very easily um but",
    "start": "524240",
    "end": "530240"
  },
  {
    "text": "once I get to a situation where I have a lot of machines a lot of containers um that probably means I'm managing a",
    "start": "530240",
    "end": "536000"
  },
  {
    "text": "cluster uh and that's not always a trivial task right we think that can be kind of a hard thing so that's hard",
    "start": "536000",
    "end": "541440"
  },
  {
    "text": "because you need a way of like intelligently placing containers across your whole Fleet um and to do that you",
    "start": "541440",
    "end": "547480"
  },
  {
    "text": "need to know the state of everything that's in that cluster so for example which instances in this Fleet have",
    "start": "547480",
    "end": "552519"
  },
  {
    "text": "available resources for the given workload I want to deploy um so how do I know if it has memory or CPU reports um",
    "start": "552519",
    "end": "559560"
  },
  {
    "text": "how can I keep track of all the containers I've already deployed across this Fleet how do I know if they're running or if they've died or something",
    "start": "559560",
    "end": "565600"
  },
  {
    "text": "like that um and then how do I make modifications across the whole Fleet if want to roll out a new set of containers",
    "start": "565600",
    "end": "570640"
  },
  {
    "text": "across 100 uh new nodes um that can be a little bit difficult to do manually uh to say the least um so these are some",
    "start": "570640",
    "end": "577200"
  },
  {
    "text": "things we hope to address with ec2 container",
    "start": "577200",
    "end": "581440"
  },
  {
    "text": "service so let's talk real quickly about what I think is the core competency of Amazon ECS so it's a managed cluster",
    "start": "582760",
    "end": "590399"
  },
  {
    "text": "manager service um and that's significant because it's actually the way that we",
    "start": "590399",
    "end": "595640"
  },
  {
    "text": "think about cluster management internally at Amazon um and we've kind of exposed some of these Primitives to",
    "start": "595640",
    "end": "601480"
  },
  {
    "text": "you through Amazon ECS and through the apis so let's talk a little bit about how it actually",
    "start": "601480",
    "end": "607519"
  },
  {
    "text": "works so first we have a resource manager on the back end and it's responsible for managing resources so",
    "start": "608440",
    "end": "615360"
  },
  {
    "text": "keeping track of resources across your Fleet uh so those those resources can be Memory CPU ports and basically the",
    "start": "615360",
    "end": "622320"
  },
  {
    "text": "availability of those resources at any given time so is my instance healthy is it available to take new work",
    "start": "622320",
    "end": "630800"
  },
  {
    "text": "and then also there's auler which is responsible for scheduling containers uh for execution so the",
    "start": "630959",
    "end": "636839"
  },
  {
    "text": "Schuler contains some algorithms um to assign tasks uh to the nodes in the cluster based on the attributes of your",
    "start": "636839",
    "end": "643920"
  },
  {
    "text": "workload so can this container or can this instance uh handle an additional container with these requirements uh",
    "start": "643920",
    "end": "650399"
  },
  {
    "text": "that it needs to run so in order to do this to schedule properly you have to know your requirements for a given",
    "start": "650399",
    "end": "656360"
  },
  {
    "text": "workload you have to find um a space some resources on your cluster that meet",
    "start": "656360",
    "end": "661959"
  },
  {
    "text": "those requirements you have to request that resource and then confirm that it's yours so there's no uh um conflict on",
    "start": "661959",
    "end": "669279"
  },
  {
    "text": "the back end for who actually owns those resources at any given time and so uh we also think that a",
    "start": "669279",
    "end": "675519"
  },
  {
    "text": "scheduler should have oversight over your workloads life cycle is it running did it complete did it die should I reschedule it should I make sure it's",
    "start": "675519",
    "end": "681680"
  },
  {
    "text": "running somewhere else um and you put these two things together resource management and",
    "start": "681680",
    "end": "687560"
  },
  {
    "text": "scheduling um and together they kind of provide the core functionality you need for cluster management at scale so the",
    "start": "687560",
    "end": "694320"
  },
  {
    "text": "cluster management engine Aggregates the resources of multiple ec2 instances um and it just represents them all as a",
    "start": "694320",
    "end": "700240"
  },
  {
    "text": "pool of CPU memory and ports basically um the instances that run in",
    "start": "700240",
    "end": "706480"
  },
  {
    "text": "ECS are just ec2 instances with a few little modifications to it they run in your account um and they have an",
    "start": "706480",
    "end": "712839"
  },
  {
    "text": "additional Damon running on them to help them communicate with ECS uh but you own those instances you can SSH into them",
    "start": "712839",
    "end": "718440"
  },
  {
    "text": "you can control the way they're configured in a VPC um you have a lot of control over how they're uh actually configured um you can run whatever OS",
    "start": "718440",
    "end": "725639"
  },
  {
    "text": "you want um although we do pre-build Amazon Linux for running with ECS as do some other OS vendors um but this",
    "start": "725639",
    "end": "733839"
  },
  {
    "text": "cluster also is dynamically scalable so you can have a single instance cluster you can have a thousand instance cluster",
    "start": "733839",
    "end": "739440"
  },
  {
    "text": "um ECS really doesn't care about that too much so on each instance as I mentioned",
    "start": "739440",
    "end": "745000"
  },
  {
    "text": "we have the ECS agent uh so that basically communicates with the um uh Docker Damon locally on the machine",
    "start": "745000",
    "end": "751839"
  },
  {
    "text": "and the State Management engineer on the back end of ECS uh and effectively turns ECS API calls into Docker commands on",
    "start": "751839",
    "end": "758560"
  },
  {
    "text": "all the instances in the cluster so this uh this agent is actually open source on GitHub and you",
    "start": "758560",
    "end": "764680"
  },
  {
    "text": "can kind of track our progress uh submit bugs and issues um and we'll respond",
    "start": "764680",
    "end": "769800"
  },
  {
    "text": "hopefully very quickly uh to those um but it's a open source so that's great so you can take a look at the source",
    "start": "769800",
    "end": "775000"
  },
  {
    "text": "code and kind of see how that's working um on the back end",
    "start": "775000",
    "end": "780600"
  },
  {
    "text": "so to coordinate this cluster um we need a single source of Truth for all the instances in the cluster um so we need",
    "start": "781839",
    "end": "788639"
  },
  {
    "text": "to also know the containers that are running on those instances what resources are still available um and we",
    "start": "788639",
    "end": "793800"
  },
  {
    "text": "need to know about all the state changes about all the uh containers that are running or that have stopped so all this information together",
    "start": "793800",
    "end": "801880"
  },
  {
    "text": "we would like to refer to it as cluster State um and so ECS uses a distributed",
    "start": "801880",
    "end": "806920"
  },
  {
    "text": "key value store that stores all of this cluster State um because it's distributed it",
    "start": "806920",
    "end": "814720"
  },
  {
    "text": "brings some durability um and scalability and high availability also but it also makes",
    "start": "814720",
    "end": "821160"
  },
  {
    "text": "doing things um just because it's a distributed system it makes doing things like ensuring data is consistent um and",
    "start": "821160",
    "end": "826880"
  },
  {
    "text": "it makes it more difficult to handle a lot of concurrent uh State changes um for multiple",
    "start": "826880",
    "end": "832000"
  },
  {
    "text": "clients so we have to have a form of concurrency control in place that basically ensures that uh multiple State",
    "start": "832000",
    "end": "837639"
  },
  {
    "text": "changes don't conflict so for example um if a developer over here requests some resources maybe all",
    "start": "837639",
    "end": "844759"
  },
  {
    "text": "the remaining memory on a given instance in the cluster uh and someone else over here does the same thing um only one of",
    "start": "844759",
    "end": "851320"
  },
  {
    "text": "those requests can actually be fulfilled um and the other person would have to be told the request could not be",
    "start": "851320",
    "end": "857839"
  },
  {
    "text": "fulfilled so we have to do that very atomically very quickly at scale um so we can talk a little bit about how that",
    "start": "857839",
    "end": "864880"
  },
  {
    "text": "is actually done so the form of concurrency control we have um again is one of Amazon's core",
    "start": "864880",
    "end": "871360"
  },
  {
    "text": "distributed systems Primitives um and that's significant I think because that's something we've used at scale in",
    "start": "871360",
    "end": "876519"
  },
  {
    "text": "Amazon and it's been proven to work very well at high scale um for very very large fleets um so we trust in that",
    "start": "876519",
    "end": "883120"
  },
  {
    "text": "technology implicitly and so we really value what ECS brings to customers there um but anyway it's it's a a paxos based",
    "start": "883120",
    "end": "891000"
  },
  {
    "text": "transactional Journal if you're familiar with paxos it's quite difficult to implement um if you take a look at the paper for it my mind usually melts um",
    "start": "891000",
    "end": "898720"
  },
  {
    "text": "but in simple terms it basically is a journal that keeps a record of every change made to a given data entry and so",
    "start": "898720",
    "end": "905839"
  },
  {
    "text": "um a right to this data store uh is committed as a transaction in the journal with a specific order based ID",
    "start": "905839",
    "end": "911759"
  },
  {
    "text": "so it might be a hash that's um given to that particular right so for the right to",
    "start": "911759",
    "end": "918839"
  },
  {
    "text": "succeed the proposed right uh must be the latest transaction since the last read so that means you must have the",
    "start": "918839",
    "end": "925560"
  },
  {
    "text": "latest data to update the journal so if you make a read and then subsequently a few Rights happen before your next right",
    "start": "925560",
    "end": "932759"
  },
  {
    "text": "and you try to make a right based on what is now stale data um the right would fail for you so this is the way",
    "start": "932759",
    "end": "939120"
  },
  {
    "text": "that we can basically store cluster state with what's called optimistic concurrency",
    "start": "939120",
    "end": "944480"
  },
  {
    "text": "control um and that's really ideal in environments where there's constantly changing data um there's a lot of",
    "start": "944480",
    "end": "949839"
  },
  {
    "text": "clients we have to make sure everything is atomically stored so the end result is really high availability low latency",
    "start": "949839",
    "end": "955480"
  },
  {
    "text": "and high throughput uh for this data store that can provide a assistent view for cluster",
    "start": "955480",
    "end": "962360"
  },
  {
    "text": "State and so all this neat stuff um all the ECS cluster management features they're all exposed through a set of",
    "start": "964720",
    "end": "970839"
  },
  {
    "text": "apis here um and these API actions allow you to kind of build the basis for a set",
    "start": "970839",
    "end": "977160"
  },
  {
    "text": "of solutions um on top of Amazon ECS so as an example you might want to tie in",
    "start": "977160",
    "end": "982600"
  },
  {
    "text": "uh Your cicd solution you might want to use shipable or Jenkins um and these tools are able to kind of kind of",
    "start": "982600",
    "end": "989079"
  },
  {
    "text": "interact with ECS on your behalf just by using those apis um another maybe a little bit more",
    "start": "989079",
    "end": "994360"
  },
  {
    "text": "esoteric example is you could totally build a custom people are doing that um and they are doing that by just querying",
    "start": "994360",
    "end": "1000560"
  },
  {
    "text": "the apis understanding the state of the system and making placement decisions based on um what they're observing",
    "start": "1000560",
    "end": "1006319"
  },
  {
    "text": "happening in the cluster so schedulers can make decisions",
    "start": "1006319",
    "end": "1012399"
  },
  {
    "text": "based on the data that we expose by apis um and the way that works is eacher",
    "start": "1012399",
    "end": "1017759"
  },
  {
    "text": "can basically queer the state management system um understand what resources are available",
    "start": "1017759",
    "end": "1023480"
  },
  {
    "text": "and compare it to maybe the workload it needs to deploy right so the scheduler needs to find available resources make a",
    "start": "1023480",
    "end": "1030199"
  },
  {
    "text": "claim for those resources for a given workload um and then the scheduler",
    "start": "1030199",
    "end": "1035280"
  },
  {
    "text": "basically updates the cluster state with those newly claimed resources saying like I own all the CPU on instance n um",
    "start": "1035280",
    "end": "1042360"
  },
  {
    "text": "and the backend State Management responds with an atomic transaction in the journal that says yes you have that that is yours no one else can take it",
    "start": "1042360",
    "end": "1047839"
  },
  {
    "text": "from you so if that resource is already claimed ECS will reject that transaction um because of the key Value Store",
    "start": "1047839",
    "end": "1053720"
  },
  {
    "text": "maintaining that concurrency control um this is what we call you'll",
    "start": "1053720",
    "end": "1060880"
  },
  {
    "text": "hear us refer to it as shared State optimistic scheduling so that means that all schedulers can see the current state",
    "start": "1060880",
    "end": "1066799"
  },
  {
    "text": "of the cluster at all times um and it's the responsibility of that key value store to maintain consistency this so",
    "start": "1066799",
    "end": "1072160"
  },
  {
    "text": "this is different from a pessimistic locking model in which given schedulers can only see a small portion of the",
    "start": "1072160",
    "end": "1078120"
  },
  {
    "text": "resources available able because the state manager in the back end will make offers um based on what it thinks is",
    "start": "1078120",
    "end": "1083760"
  },
  {
    "text": "appropriate for thater to have so here your schedulers can see the whole cluster um all the time and make a",
    "start": "1083760",
    "end": "1089559"
  },
  {
    "text": "resource claim um and most likely get it because ECS should should be maintaining",
    "start": "1089559",
    "end": "1094919"
  },
  {
    "text": "what is available at any given time so that's cool stuff what are the",
    "start": "1094919",
    "end": "1101320"
  },
  {
    "text": "actual benefits to you as a user um let's walk through a few of those real",
    "start": "1101320",
    "end": "1107000"
  },
  {
    "text": "quickly so uh huge benefit I think is that we hear from customers a lot that",
    "start": "1107000",
    "end": "1113320"
  },
  {
    "text": "um the difficulty of running it running containers at scale um generally comes from installing and managing the cluster",
    "start": "1113320",
    "end": "1119720"
  },
  {
    "text": "management software itself that adds an operational burden that not everyone might be good at um and so it's kind of",
    "start": "1119720",
    "end": "1125200"
  },
  {
    "text": "refreshing in some cases to not have to think about you know are the uh management nodes up and running and responding um in this case that",
    "start": "1125200",
    "end": "1132880"
  },
  {
    "text": "component is all managed by ECS so it really eliminates the need for any cluster management software again",
    "start": "1132880",
    "end": "1138799"
  },
  {
    "text": "manages cluster State containers instances um and scaling right so you can start with just a single container",
    "start": "1138799",
    "end": "1144280"
  },
  {
    "text": "or a single instance and scale that same cluster up um to dozens or hundreds of containers and",
    "start": "1144280",
    "end": "1151320"
  },
  {
    "text": "instances um to kind of support that notion that it scales very well this is a demo we ran last year probably should",
    "start": "1151320",
    "end": "1156559"
  },
  {
    "text": "do a new one at some point here this is from mid 2015 but over 72 hours we scaled our",
    "start": "1156559",
    "end": "1163200"
  },
  {
    "text": "cluster um to over a thousand instances um and that is the cluster size is",
    "start": "1163200",
    "end": "1168919"
  },
  {
    "text": "represented by the purple line in this graph and the other two lines are p50 and P99 response times for our apis we",
    "start": "1168919",
    "end": "1175640"
  },
  {
    "text": "ran a bunch of list and describe apis against the cluster um and what you can see here is",
    "start": "1175640",
    "end": "1180799"
  },
  {
    "text": "that they're relatively flat which demonstrates that ECS is very stable no matter the size of the cluster that it's",
    "start": "1180799",
    "end": "1187600"
  },
  {
    "text": "managing so that's really good for building predictable workflows around ECS uh regardless of cluster size",
    "start": "1187600",
    "end": "1196440"
  },
  {
    "text": "um we also built ECS with two built-in schedulers and so we anticipate building more in the future and adding more",
    "start": "1199600",
    "end": "1205400"
  },
  {
    "text": "features to ones that exist right now but right now the two that exist uh is there's auler for long running",
    "start": "1205400",
    "end": "1211720"
  },
  {
    "text": "applications and services okay so one that um is responsible for making sure the workloads you have scheduled stay",
    "start": "1211720",
    "end": "1218159"
  },
  {
    "text": "running and in the desired State you've configured and there's also one that's for running short tasks like batch jobs",
    "start": "1218159",
    "end": "1224080"
  },
  {
    "text": "which is a lot less intelligent it just kind of throws some resources at the cluster waits for that job to complete",
    "start": "1224080",
    "end": "1229360"
  },
  {
    "text": "and then releases them again um so that customer I keep talking",
    "start": "1229360",
    "end": "1235000"
  },
  {
    "text": "about um we'll kind of look at some of the apis near the end but you can see that in the described cluster apis you",
    "start": "1235000",
    "end": "1241679"
  },
  {
    "text": "can get a lot of information from the back end um and these same apis we use the same apis for our built-in",
    "start": "1241679",
    "end": "1247679"
  },
  {
    "text": "schedulers as you could use for a custom one um so that gives you a degree of flexibility when you want to schedule on",
    "start": "1247679",
    "end": "1255559"
  },
  {
    "text": "ECS another benefit is that ECS is is built to work with AWS Services you",
    "start": "1256200",
    "end": "1261280"
  },
  {
    "text": "already probably use um and that will only increase in the future the idea is to treat containers as first class",
    "start": "1261280",
    "end": "1267320"
  },
  {
    "text": "citizens and so the way to do that is to provide additional features and Integrations with other AWS services on",
    "start": "1267320",
    "end": "1272480"
  },
  {
    "text": "the back end so right now um you can use ECS with elastic load balancing you can",
    "start": "1272480",
    "end": "1278360"
  },
  {
    "text": "have it distribute traffic amongst your containers um you can attach uh EBS volumes to the instances in your cluster",
    "start": "1278360",
    "end": "1285120"
  },
  {
    "text": "um you can configure the VPC for the instances in your cluster exact as you would with regular ec2",
    "start": "1285120",
    "end": "1290559"
  },
  {
    "text": "instances um we have native support for cloudwatch logging so you can log from your Docker containers directly into",
    "start": "1290559",
    "end": "1297000"
  },
  {
    "text": "cloudwatch uh we have support for IM roles uh on the instances so the containers can access the ec2 metadata",
    "start": "1297000",
    "end": "1303679"
  },
  {
    "text": "service just like any other application that you're used to on an instance and then of course cloud trail logging if",
    "start": "1303679",
    "end": "1308880"
  },
  {
    "text": "you're not using cloud trail logging shame on you that is the first thing to do when you open up your AWS",
    "start": "1308880",
    "end": "1316279"
  },
  {
    "text": "account um so that extensibility uh is really",
    "start": "1316279",
    "end": "1321679"
  },
  {
    "text": "important because it helps us build a robust partner ecosystem around ECS and so we have a number of logging and",
    "start": "1321679",
    "end": "1326760"
  },
  {
    "text": "monitoring and cicd partners service Discovery partners that are really hooking into some of these apis that",
    "start": "1326760",
    "end": "1332039"
  },
  {
    "text": "that ECS is providing um to to provide really tight integration um so this is one of the",
    "start": "1332039",
    "end": "1339000"
  },
  {
    "text": "strongest things about ECS I think and I wish I could talk more about uh partner Solutions there's another talk uh that's",
    "start": "1339000",
    "end": "1344400"
  },
  {
    "text": "stalker and ECS related that's kind of a microservices deep dive and that talks a little bit about um some CI Solutions",
    "start": "1344400",
    "end": "1351039"
  },
  {
    "text": "like shippable and it talks about weave service Discovery uh and how well all this stuff works with ECS and some cool",
    "start": "1351039",
    "end": "1356679"
  },
  {
    "text": "demos unfortunately not too much time for that in this talk um but also the agent and the CLI",
    "start": "1356679",
    "end": "1363799"
  },
  {
    "text": "are open source uh the CLI that we're talking about here is the ECS CLI which supports Docker compose so if you want",
    "start": "1363799",
    "end": "1370559"
  },
  {
    "text": "to run Docker compose on ECS and not have to write a task definition which we'll look at in a second um you can use",
    "start": "1370559",
    "end": "1376440"
  },
  {
    "text": "that um that particular project is being worked on uh at a higher Pace these days so we",
    "start": "1376440",
    "end": "1383200"
  },
  {
    "text": "expect to see a lot of cool features coming out of that and again the open source agent uh is a nice feature if you",
    "start": "1383200",
    "end": "1388360"
  },
  {
    "text": "find some bugs in that you know you can just report them on GitHub which is which is great so to sum up all of these features",
    "start": "1388360",
    "end": "1396200"
  },
  {
    "text": "um rather than having to manage a set of machines that runs your cluster management uh software much of that",
    "start": "1396200",
    "end": "1402279"
  },
  {
    "text": "heavy lifting and housekeeping is abstracted behind a set of apis right so it gives you the ability to run multiple tasks on a shared pool of",
    "start": "1402279",
    "end": "1409960"
  },
  {
    "text": "resources um looking at this particular graph everything in Orange is basically what runs behind the scenes on ECS",
    "start": "1409960",
    "end": "1416960"
  },
  {
    "text": "itself so that's the managed service component and then the blue uh is what runs in your account except for the",
    "start": "1416960",
    "end": "1422440"
  },
  {
    "text": "internet I guess if you run the internet in your account please use multi-az",
    "start": "1422440",
    "end": "1428200"
  },
  {
    "text": "um awesome so the main components again just to reiterate the key value stores what provides that consistency control",
    "start": "1428200",
    "end": "1434520"
  },
  {
    "text": "the cluster management engine keeps track of all of the state the API allows you to interact with and query um these",
    "start": "1434520",
    "end": "1440480"
  },
  {
    "text": "two resources and the agent Communication Service is what actually um does the communication between all",
    "start": "1440480",
    "end": "1446080"
  },
  {
    "text": "the instances and the backend components uh in",
    "start": "1446080",
    "end": "1450720"
  },
  {
    "text": "ECS so now that we've talked about all the foundations for what allows ECS to",
    "start": "1452320",
    "end": "1457679"
  },
  {
    "text": "run services for you let's actually talk about running services so this will be getting your applications into",
    "start": "1457679",
    "end": "1462799"
  },
  {
    "text": "containers and distributed across the cluster um so the first thing to understand the first PR of an ECS on the",
    "start": "1462799",
    "end": "1470399"
  },
  {
    "text": "customer side I suppose is how you model your application and that's using a file uh called a task definition so the this",
    "start": "1470399",
    "end": "1477240"
  },
  {
    "text": "file basically contains um a list of containers that you want to run in the same context and in this case a context",
    "start": "1477240",
    "end": "1483720"
  },
  {
    "text": "is just a single instance so everything that's deployed via a task definition sits on the same instance um that's",
    "start": "1483720",
    "end": "1490279"
  },
  {
    "text": "useful if you want to deploy a uh like a web application maybe a flask application and you always need a",
    "start": "1490279",
    "end": "1495520"
  },
  {
    "text": "certain engine X reverse proxy in front of it you might Define them in this same task definition um but it's also a very",
    "start": "1495520",
    "end": "1501120"
  },
  {
    "text": "common approach to schedule a single container in a task definition and deploy that on its own to the",
    "start": "1501120",
    "end": "1507039"
  },
  {
    "text": "cluster um a task definition supports a lot of the docker Concepts like links or",
    "start": "1507039",
    "end": "1513080"
  },
  {
    "text": "logging drivers or labels and that stuff is kind of passed through the ECS agent",
    "start": "1513080",
    "end": "1518679"
  },
  {
    "text": "to the docker Damon and that way your containers are spun up with all the configuration you need uh and you've just defined it in the task",
    "start": "1518679",
    "end": "1526320"
  },
  {
    "text": "definition um task definitions also usefully are tracked by name and revision so just like your source code",
    "start": "1526320",
    "end": "1531600"
  },
  {
    "text": "or just like your containers um they are versioned artifacts that you can use to um deploy your application and make",
    "start": "1531600",
    "end": "1538240"
  },
  {
    "text": "changes either rolling back or deploying new containers so to create a task",
    "start": "1538240",
    "end": "1544320"
  },
  {
    "text": "definition you can use the console to specify which Docker image to use um you",
    "start": "1544320",
    "end": "1549480"
  },
  {
    "text": "can also specify some resources like uh im or the uh memory and the ports um",
    "start": "1549480",
    "end": "1554840"
  },
  {
    "text": "what volumes you want to use you can specify environment variables uh you can specify as I mentioned basically um a",
    "start": "1554840",
    "end": "1561399"
  },
  {
    "text": "majority of options for Docker flags and you can pass them all through the task",
    "start": "1561399",
    "end": "1567840"
  },
  {
    "text": "definition and the essential flag here um is interesting because that just",
    "start": "1568039",
    "end": "1574000"
  },
  {
    "text": "specifies if that given container defined in the task should fail then it should um indicate that the whole task",
    "start": "1574000",
    "end": "1580279"
  },
  {
    "text": "is failed so you need at least one essential container uh in a task so that the ECS State engine can track um if",
    "start": "1580279",
    "end": "1586919"
  },
  {
    "text": "that one essential container has failed and if if it should be restarted um underneath task definitions",
    "start": "1586919",
    "end": "1593320"
  },
  {
    "text": "are Json documents which is of course very lovely um we do have a as I mentioned a CLI that supports the docker",
    "start": "1593320",
    "end": "1599279"
  },
  {
    "text": "compos project um and it kind of translates your yaml files into um Json",
    "start": "1599279",
    "end": "1604720"
  },
  {
    "text": "if you would like support for other formats please let us know we are interested in understanding what's best",
    "start": "1604720",
    "end": "1609760"
  },
  {
    "text": "for customers in this case so um once you have a task a task",
    "start": "1609760",
    "end": "1616480"
  },
  {
    "text": "definition rather you can this then schedule it onto a container instance and once your task definition is created",
    "start": "1616480",
    "end": "1622600"
  },
  {
    "text": "um a task is the running instantiation um of a of a task",
    "start": "1622600",
    "end": "1628679"
  },
  {
    "text": "definition now there's a couple ways you can get it onto an instance you can call the Run task API you can call the start",
    "start": "1630200",
    "end": "1635640"
  },
  {
    "text": "Task API those are a little bit different in that one is targeted to a specific resource you can provide an argument for a container you want that",
    "start": "1635640",
    "end": "1641760"
  },
  {
    "text": "task to land on or you can create a service uh which is kind of a higher level construct which we'll talk about",
    "start": "1641760",
    "end": "1647760"
  },
  {
    "text": "in a second um and it kind of handles Distributing it to multiple instances across the cluster for",
    "start": "1647760",
    "end": "1653720"
  },
  {
    "text": "you so um as I mentioned a task is an instantiation of a task definition um",
    "start": "1653720",
    "end": "1659159"
  },
  {
    "text": "it's the core unit of work in ECS um and you really should just think about it as a grouping of related containers it can",
    "start": "1659159",
    "end": "1665200"
  },
  {
    "text": "be one it can be 10 um but they just are what is actually running on the container",
    "start": "1665200",
    "end": "1672000"
  },
  {
    "text": "instances and you can run as many tasks on a given instance as will fit so the schedule were kind of take care of that",
    "start": "1673120",
    "end": "1678760"
  },
  {
    "text": "for you um but you don't have to worry about the actual resource utilization on the instances so much um if the task",
    "start": "1678760",
    "end": "1685080"
  },
  {
    "text": "won't fit um then they'll find it the schedule will find a different place to run it on the",
    "start": "1685080",
    "end": "1690919"
  },
  {
    "text": "cluster so the service Schuler um is what we've built for long running applications and it has a lot of things",
    "start": "1690919",
    "end": "1696919"
  },
  {
    "text": "built in um that make it easier to manage services that should be running um perpetually right and so that helps",
    "start": "1696919",
    "end": "1702880"
  },
  {
    "text": "you maintain that up time that you need to keep your app running and your users happy so you reference a specific task",
    "start": "1702880",
    "end": "1708399"
  },
  {
    "text": "definition the number of those tasks you want to run uh and then you can also configure an elb that it should go",
    "start": "1708399",
    "end": "1713919"
  },
  {
    "text": "behind and the scheduler will launch the amount of tasks that you requested um you can also configure things like",
    "start": "1713919",
    "end": "1719600"
  },
  {
    "text": "autoscaling of these tasks um in the Wizard we'll go through that and we'll look at what that entails um but it's",
    "start": "1719600",
    "end": "1725039"
  },
  {
    "text": "similar to ec2 Auto scaling and that you can pick some um metrics to Monitor and to add more tasks to the service um if",
    "start": "1725039",
    "end": "1732760"
  },
  {
    "text": "those metrics are um if those alarms are are breached",
    "start": "1732760",
    "end": "1738200"
  },
  {
    "text": "and so the scheduler is going to maintain the number of tasks you want to run um and it will also automatically load or load balance those tasks um",
    "start": "1739760",
    "end": "1747159"
  },
  {
    "text": "across availability zone so it is availability Zone aware which is very nice so if I schedule four and my",
    "start": "1747159",
    "end": "1752480"
  },
  {
    "text": "cluster is across two azs I will get two and two which is a a nice balance so um",
    "start": "1752480",
    "end": "1758919"
  },
  {
    "text": "the auto scaling is similar to the way we do auto scaling with ec2 instances in the case that it is also a zware so as",
    "start": "1758919",
    "end": "1764799"
  },
  {
    "text": "long as you have an even number of tasks toin you'll have an even number in each a otherwise it'll do its best to kind of",
    "start": "1764799",
    "end": "1770279"
  },
  {
    "text": "balance things um in as close to equilibrium as it can get across two",
    "start": "1770279",
    "end": "1775760"
  },
  {
    "text": "azs so scaling up is pretty simple you can do it manually you can do it automatically um you can do so in",
    "start": "1776640",
    "end": "1783679"
  },
  {
    "text": "response to a number of different metrics but what also is cool is you can update a service in a number of ways so",
    "start": "1783679",
    "end": "1788880"
  },
  {
    "text": "you can do a blue green deployment or a rolling deployment style so you can uh",
    "start": "1788880",
    "end": "1794399"
  },
  {
    "text": "deploy the new version and the scheduler will launch tasks with the new application version uh depending on your",
    "start": "1794399",
    "end": "1800840"
  },
  {
    "text": "configuration so you can define a maximum amount of containers that should be running at any given time and a",
    "start": "1800840",
    "end": "1806000"
  },
  {
    "text": "minimum amount so you can say that maybe I only want um half of my old tasks to be terminated while I'm launching half",
    "start": "1806000",
    "end": "1812880"
  },
  {
    "text": "of the new tasks at one time and make sure that they uh gracefully roll out so I can maintain service availability for",
    "start": "1812880",
    "end": "1818840"
  },
  {
    "text": "my users another nice featur is that the service scheduler will attempt to drain",
    "start": "1818840",
    "end": "1824640"
  },
  {
    "text": "connections if you're using an elb U it will wait for all active inflight connections to drain before it",
    "start": "1824640",
    "end": "1830080"
  },
  {
    "text": "terminates that container and removes it from an instance and so the end result here is",
    "start": "1830080",
    "end": "1836600"
  },
  {
    "text": "it just should be leaving uh the newest containers running so",
    "start": "1836600",
    "end": "1843080"
  },
  {
    "text": "um have some time for a demo it looks like about actually I got plenty of time for a demo so that's",
    "start": "1843080",
    "end": "1850000"
  },
  {
    "text": "great so let's switch over to my console here let's make sure",
    "start": "1851279",
    "end": "1858080"
  },
  {
    "text": "this is actually still this is",
    "start": "1858080",
    "end": "1863158"
  },
  {
    "text": "readable and still connected great so right now I have a cluster running um",
    "start": "1863440",
    "end": "1869480"
  },
  {
    "text": "excuse the funky name it was spun up with cloud formation um but right now it has one service running which is a",
    "start": "1869480",
    "end": "1875120"
  },
  {
    "text": "reddis container running in a service it's a single reddis container right now um I'm using that as my persistence",
    "start": "1875120",
    "end": "1880799"
  },
  {
    "text": "layer for my development project here um I have three container instances in this",
    "start": "1880799",
    "end": "1885919"
  },
  {
    "text": "cluster and we can see some information here about them in the ECS instances tab",
    "start": "1885919",
    "end": "1891240"
  },
  {
    "text": "so we can see the version of the ECS agent and the docker D that they are running um and we can see how much",
    "start": "1891240",
    "end": "1896440"
  },
  {
    "text": "memory and CPU is available in any given instance um we can also click on it here",
    "start": "1896440",
    "end": "1901600"
  },
  {
    "text": "to be taken to the ec2 console and see more specifics about it and notice that",
    "start": "1901600",
    "end": "1907320"
  },
  {
    "text": "it's a standard ec2 instance running in my account which is",
    "start": "1907320",
    "end": "1912120"
  },
  {
    "text": "great so again the task that is running here is called um this is my redus task",
    "start": "1914320",
    "end": "1920480"
  },
  {
    "text": "it is named redus which is kind of relevant uh which I'll explain in just a little",
    "start": "1920480",
    "end": "1926398"
  },
  {
    "text": "bit um okay so what I want to do is actually I have a front end application that's a little flask application that's going to interface with this red as",
    "start": "1928440",
    "end": "1934519"
  },
  {
    "text": "container and I want to get that from my development machine to my ECS cluster so",
    "start": "1934519",
    "end": "1940639"
  },
  {
    "text": "what do I need to do here um I need [Music] to see if we can get to this",
    "start": "1940639",
    "end": "1949840"
  },
  {
    "text": "can everyone see that okay cool I didn't get any yeses so I'm",
    "start": "1949919",
    "end": "1956039"
  },
  {
    "text": "assuming no all right uh what do I have here so",
    "start": "1956039",
    "end": "1961440"
  },
  {
    "text": "let's get into my hit counter application here and what do I have so let's look at Nano has nice",
    "start": "1961440",
    "end": "1967799"
  },
  {
    "text": "colors this application so an interesting component of this application is on this line I'm saying",
    "start": "1967799",
    "end": "1973360"
  },
  {
    "text": "that my um or on the line below it actually uh that my reddest host is just going to be named redis the reason I can",
    "start": "1973360",
    "end": "1979200"
  },
  {
    "text": "just refer to it by uh service name is that I'm using weave service Discovery in the back end so I don't have to worry",
    "start": "1979200",
    "end": "1984320"
  },
  {
    "text": "about where it's running on my cluster uh it just does unqualified name lookups across the whole cluster so I can",
    "start": "1984320",
    "end": "1989519"
  },
  {
    "text": "reference containers by name like I would locally with links across the whole cluster so I've actually already built a",
    "start": "1989519",
    "end": "1997639"
  },
  {
    "text": "container from this but we can see that I have a Docker file which is really straightforward I",
    "start": "1997639",
    "end": "2003320"
  },
  {
    "text": "start with a base python 35 image from dockerhub um I want to expose port 5000",
    "start": "2003320",
    "end": "2008559"
  },
  {
    "text": "and my command is basically running uh the gunicorn web server in front of my uh little flask application so um I want",
    "start": "2008559",
    "end": "2015559"
  },
  {
    "text": "to use ec2 container registry in this case so let's take a look at the console and look at my",
    "start": "2015559",
    "end": "2021080"
  },
  {
    "text": "repositories and I've actually already built a repository for this one and pushed an image to it but the",
    "start": "2021080",
    "end": "2026240"
  },
  {
    "text": "interesting thing to look at I'm kind of saving us some monotony and watching pushes and builds and stuff that takes a while but the useful thing here is that",
    "start": "2026240",
    "end": "2034279"
  },
  {
    "text": "with ECR uh you can get all of the commands you need to interact with the given repository um from the console",
    "start": "2034279",
    "end": "2041519"
  },
  {
    "text": "here which is great so it's actually nice to kind of demo what this git login command looks like it's a little bit",
    "start": "2041519",
    "end": "2047240"
  },
  {
    "text": "unintuitive um but let's get the login command here and whoa so it spits out a lot of information which is a username",
    "start": "2047240",
    "end": "2053158"
  },
  {
    "text": "and password and this is a temporary token that is valid for only 12 hours and we had to do that right now because",
    "start": "2053159",
    "end": "2058878"
  },
  {
    "text": "we wanted to use I IM to authenticate to ECR but that's not possible to do with Docker directly so this is kind of our",
    "start": "2058879",
    "end": "2064280"
  },
  {
    "text": "workaround for the time being we do have a little go binary you can point your Docker Dam to that will automatically",
    "start": "2064280",
    "end": "2070040"
  },
  {
    "text": "refresh your credentials uh every time you do a Docker command that interacts with ECR so that's a nice way of going",
    "start": "2070040",
    "end": "2075679"
  },
  {
    "text": "about that um and you can find that on GitHub uh it is not configured here because this is kind of the default um",
    "start": "2075679",
    "end": "2080720"
  },
  {
    "text": "way of using it but we can build my demo container so",
    "start": "2080720",
    "end": "2085919"
  },
  {
    "text": "I'm in the I'm in the directory with my Docker file so we can build that we can see it went really quickly because it's",
    "start": "2085919",
    "end": "2091358"
  },
  {
    "text": "already built but we can also say we want to tag this with the repository",
    "start": "2091359",
    "end": "2096919"
  },
  {
    "text": "name and let's call it version one all right so if we do Docker images we can",
    "start": "2096919",
    "end": "2102280"
  },
  {
    "text": "see up here that I have this image tagged with a repository name in tag",
    "start": "2102280",
    "end": "2108079"
  },
  {
    "text": "one and so if I want to push it to my ECR repository can go like",
    "start": "2108079",
    "end": "2115119"
  },
  {
    "text": "this already exists in the repository again much quicker than otherwise pushing a 500 Meg image but anyway I",
    "start": "2115119",
    "end": "2122960"
  },
  {
    "text": "want to go up here and I want to create a task definition so let's look at um",
    "start": "2122960",
    "end": "2128760"
  },
  {
    "text": "my task definition here and a couple of things to point out so we have the command specified we're",
    "start": "2128760",
    "end": "2134400"
  },
  {
    "text": "going to run this is the same thing I specified in my Docker file this is the command I need to run in the container above that is the image that I want to",
    "start": "2134400",
    "end": "2141599"
  },
  {
    "text": "run it's pointing to this demo app in my Docker uh my Docker Hub repository right now but let's edit that and make it",
    "start": "2141599",
    "end": "2147359"
  },
  {
    "text": "point to U my ECR repository image so let me go",
    "start": "2147359",
    "end": "2155720"
  },
  {
    "text": "back let's grab this",
    "start": "2156000",
    "end": "2159640"
  },
  {
    "text": "this n",
    "start": "2161680",
    "end": "2165119"
  },
  {
    "text": "slow so I need [Music]",
    "start": "2172040",
    "end": "2177328"
  },
  {
    "text": "to there we go",
    "start": "2177760",
    "end": "2182160"
  },
  {
    "text": "so my task definition has been reg registered and uh where is the task definition Arn so here's my Arn so let's",
    "start": "2190680",
    "end": "2198359"
  },
  {
    "text": "go back to the console and let's take a look at that particular",
    "start": "2198359",
    "end": "2204319"
  },
  {
    "text": "task so my Santa clar Summit right here this is the one we just pushed so we can",
    "start": "2205920",
    "end": "2211040"
  },
  {
    "text": "go in here and we can see that the image it's pointing to is the one in my ECR repository uh and we can create a",
    "start": "2211040",
    "end": "2217160"
  },
  {
    "text": "service from it so we're going to deploy it on the Santa Clara Summit cluster here we'll",
    "start": "2217160",
    "end": "2223280"
  },
  {
    "text": "just call it demo service say I want three of these and these are some of those deployment roll out options I was",
    "start": "2223280",
    "end": "2229440"
  },
  {
    "text": "talking about so this is how you configure Like a Rolling or a blue green deployment kind of by playing with some of these values uh some of the more",
    "start": "2229440",
    "end": "2236480"
  },
  {
    "text": "important stuff to do here is configure an elb so let's grab the elb that I have",
    "start": "2236480",
    "end": "2241560"
  },
  {
    "text": "built for this it's already configured to point towards Port 5000 on the um on the container",
    "start": "2241560",
    "end": "2248079"
  },
  {
    "text": "we'll go ahead and save that and let's configure Auto scaling as well so we'll configure to adjust the services desired",
    "start": "2248079",
    "end": "2255480"
  },
  {
    "text": "count um in the event of certain alarms being breached so we'll say we want one at the minimum let's say we want six at",
    "start": "2255480",
    "end": "2262200"
  },
  {
    "text": "the maximum um and here's where you can configure the cloudwatch alarms so I've already configured a",
    "start": "2262200",
    "end": "2268560"
  },
  {
    "text": "couple let's say we scale out with high CPU so when I have greater than 50% CPU utilization across the service for a",
    "start": "2268560",
    "end": "2274920"
  },
  {
    "text": "minute or more um let's add one task and then for my scale down policy",
    "start": "2274920",
    "end": "2281200"
  },
  {
    "text": "we'll do something a little bit similar here uh when CPU was below 20% across the whole service for five minutes um",
    "start": "2281200",
    "end": "2287520"
  },
  {
    "text": "we'll remove one task so here we go let's create that",
    "start": "2287520",
    "end": "2294839"
  },
  {
    "text": "service and we will kind of watch this work",
    "start": "2294839",
    "end": "2299319"
  },
  {
    "text": "here so in the meantime what I actually want to do after I make sure this works in my development process I want to move",
    "start": "2301000",
    "end": "2307960"
  },
  {
    "text": "my persistence layer to something not in the container just a personal preference so",
    "start": "2307960",
    "end": "2314280"
  },
  {
    "text": "what I have over here is I have a elasticache Reddit",
    "start": "2314280",
    "end": "2319760"
  },
  {
    "text": "cluster and let's go ahead and build a new container let's modify my app and let's point it to one of these elastic",
    "start": "2319760",
    "end": "2325920"
  },
  {
    "text": "cach nodes so let's look at this node let's copy this node",
    "start": "2325920",
    "end": "2331839"
  },
  {
    "text": "endpoint let's switch back over here and where are we so let's get this",
    "start": "2331839",
    "end": "2337560"
  },
  {
    "text": "hit counter let's edit this host connection",
    "start": "2337560",
    "end": "2343280"
  },
  {
    "text": "string for redus pop in my elasticache oops that did not",
    "start": "2343280",
    "end": "2350119"
  },
  {
    "text": "copy see do I have it now",
    "start": "2354119",
    "end": "2358920"
  },
  {
    "text": "cool so we can see that I have the docker file again we don't have to change anything",
    "start": "2368359",
    "end": "2374680"
  },
  {
    "text": "else uh we'll call it um what was I call",
    "start": "2374680",
    "end": "2380559"
  },
  {
    "text": "before let's rebuild this let's go back to my ECR registry and we can get those commands again in case I forgot",
    "start": "2382839",
    "end": "2390839"
  },
  {
    "text": "them so we can view my push commands so we can tag it again we'll",
    "start": "2395920",
    "end": "2402200"
  },
  {
    "text": "call it version two latest isn't a version and then let's push that",
    "start": "2402200",
    "end": "2410078"
  },
  {
    "text": "up there we go so it's quick because it only has to push a single layer made a small change all the rest of it already",
    "start": "2411920",
    "end": "2417240"
  },
  {
    "text": "exists in my repository um and cool so we're staged there so let's go back and look at our",
    "start": "2417240",
    "end": "2423520"
  },
  {
    "text": "cluster and see if our service is actually running now so we have four tasks running that's great let's look at this front end demo service um let's",
    "start": "2423520",
    "end": "2430720"
  },
  {
    "text": "take a look at the load balancer so let's pop that open in the ec2",
    "start": "2430720",
    "end": "2435800"
  },
  {
    "text": "console grab that DNS name cool so it's our um little hit",
    "start": "2437920",
    "end": "2446319"
  },
  {
    "text": "counter application and it's interacting with redus on the back end so that's great um but what do I want to do now so",
    "start": "2446319",
    "end": "2453800"
  },
  {
    "text": "actually I don't have to go through the whole process of creating a new service in this case I can just update the service so what I want to do is go from",
    "start": "2453800",
    "end": "2461720"
  },
  {
    "text": "this uh where is",
    "start": "2461720",
    "end": "2468119"
  },
  {
    "text": "it oh I didn't create a task definition from it did I that's what I missed so so let's go to here let's look at my that's",
    "start": "2482560",
    "end": "2491000"
  },
  {
    "text": "what it is let's n this task definition let's go over",
    "start": "2491000",
    "end": "2497119"
  },
  {
    "text": "here",
    "start": "2503520",
    "end": "2506520"
  },
  {
    "text": "two great so now we have a second version of demo 2",
    "start": "2509359",
    "end": "2515119"
  },
  {
    "text": "and I'm losing my mind apparently at task",
    "start": "2529599",
    "end": "2537480"
  },
  {
    "text": "definitions oh that's fine no worries just losing my mind so",
    "start": "2541480",
    "end": "2546599"
  },
  {
    "text": "here we go let's go back edit that service this is the one we need so let's",
    "start": "2546599",
    "end": "2553480"
  },
  {
    "text": "go ahead and update let's roll this out and we can watch the deployment",
    "start": "2553480",
    "end": "2559680"
  },
  {
    "text": "happen here so we can see that we have three of the old version running uh we desire three of the new one but nothing",
    "start": "2559680",
    "end": "2565559"
  },
  {
    "text": "has happened yet it is not pending or running yet so we're just going to wait for that deployment to happen here um and in the meantime we can actually go",
    "start": "2565559",
    "end": "2571640"
  },
  {
    "text": "ahead and we can scale down the service that we are running um",
    "start": "2571640",
    "end": "2577800"
  },
  {
    "text": "let's see with the redus container because I no longer need that so let's update this",
    "start": "2577800",
    "end": "2584480"
  },
  {
    "text": "one let's go ahead and scale it down zero and let's update",
    "start": "2584480",
    "end": "2591559"
  },
  {
    "text": "that so looking back at the cluster what do we have running",
    "start": "2591559",
    "end": "2596559"
  },
  {
    "text": "now so I have my new service running um let's take a look at the load",
    "start": "2599440",
    "end": "2605480"
  },
  {
    "text": "balancer and let's see if it is now interacting with my elasticache cluster and we'll know it is because it doesn't",
    "start": "2605480",
    "end": "2610920"
  },
  {
    "text": "have any sort of hit counting um it should be completely fresh and at",
    "start": "2610920",
    "end": "2616359"
  },
  {
    "text": "zero and probably a little bit aggressive with getting that to roll out",
    "start": "2617480",
    "end": "2623480"
  },
  {
    "text": "there we go so the new one is running beautiful so with a little bit of uh problems doing that manually as",
    "start": "2660119",
    "end": "2666839"
  },
  {
    "text": "you can see it's not the smoothest experience uh if you're doing it manually every time it can be a little bit timec consuming but you can do it",
    "start": "2666839",
    "end": "2673240"
  },
  {
    "text": "manually the idea is to kind of illustrate that workflow from container to task definition to service and the",
    "start": "2673240",
    "end": "2678599"
  },
  {
    "text": "way that we generally see customers doing this workflow though is via a CI system so every time what you uh when",
    "start": "2678599",
    "end": "2683880"
  },
  {
    "text": "you want to update your code you'll basically commit code to a GitHub repository you can use a web hook to",
    "start": "2683880",
    "end": "2689040"
  },
  {
    "text": "kick off a Docker build either from one of our CI Partners or or in something like Docker Hub directly build that new",
    "start": "2689040",
    "end": "2694920"
  },
  {
    "text": "container and then have your CI service automatically update your task definition with the new container",
    "start": "2694920",
    "end": "2700280"
  },
  {
    "text": "revision um in in many cases they'll also update your running services with that new task so all you have to do is",
    "start": "2700280",
    "end": "2707280"
  },
  {
    "text": "commit to a GitHub repository if you've configured this correctly um and a CI system can deploy it all the way to ECS",
    "start": "2707280",
    "end": "2713280"
  },
  {
    "text": "either in staging or production for you um and that's a little bit of the demo that's shown in the microservices Deep",
    "start": "2713280",
    "end": "2718319"
  },
  {
    "text": "dive session um so if you're interested in that sort of workflow take a look there so um I have a little bit of time",
    "start": "2718319",
    "end": "2724000"
  },
  {
    "text": "here at the end I'm going to hang out up front for some questions some Q&A so uh come talk to me I'd love to hear your questions thank you very much",
    "start": "2724000",
    "end": "2730960"
  },
  {
    "text": "[Applause]",
    "start": "2730960",
    "end": "2735650"
  }
]