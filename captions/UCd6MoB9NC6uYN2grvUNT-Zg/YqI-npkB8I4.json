[
  {
    "start": "0",
    "end": "42000"
  },
  {
    "text": "Hi, and welcome to another episode \nof 'Back To Basics'.",
    "start": "6341",
    "end": "9407"
  },
  {
    "text": "My name is Derek,",
    "start": "9914",
    "end": "10707"
  },
  {
    "text": "and I'm here today to talk to you about, \ntransaction patterns for distributed applications.",
    "start": "10925",
    "end": "15490"
  },
  {
    "text": "So let's start off \nby understanding what we mean ",
    "start": "16633",
    "end": "18911"
  },
  {
    "text": "when we talk about transactions. ",
    "start": "19075",
    "end": "20659"
  },
  {
    "text": "Well, a transaction \nis simply a group of actions ",
    "start": "21189",
    "end": "24154"
  },
  {
    "text": "that are performed \nas if they were a single bulk action. ",
    "start": "24336",
    "end": "27120"
  },
  {
    "text": "For example, ",
    "start": "27867",
    "end": "28562"
  },
  {
    "text": "if you want to order goods\nin an application shopping cart, ",
    "start": "28945",
    "end": "31644"
  },
  {
    "text": "or you want to place a food order \nin a food delivery application, ",
    "start": "32100",
    "end": "35858"
  },
  {
    "text": "or even book your next flight overseas, ",
    "start": "36297",
    "end": "38472"
  },
  {
    "text": "all of these examples are considered \ntransactions in an application. ",
    "start": "39025",
    "end": "42080"
  },
  {
    "start": "42000",
    "end": "123000"
  },
  {
    "text": "Let's first look \nat how a transaction would look ",
    "start": "42525",
    "end": "44362"
  },
  {
    "text": "inside a traditional \nnon-distributed monolithic application. ",
    "start": "44362",
    "end": "47371"
  },
  {
    "text": "Let's do this \nby taking a food ordering scenario ",
    "start": "48389",
    "end": "51048"
  },
  {
    "text": "inside a food delivery application.",
    "start": "51048",
    "end": "52661"
  },
  {
    "text": "The user would initiate the transaction \nwith a call to order food ",
    "start": "53353",
    "end": "56648"
  },
  {
    "text": "from the application from end.",
    "start": "57341",
    "end": "58769"
  },
  {
    "text": "This call would then be received \nby the application's backend. ",
    "start": "59416",
    "end": "62239"
  },
  {
    "text": "There may be a number of actions",
    "start": "63657",
    "end": "64932"
  },
  {
    "text": "that make up \nthe order food transaction.",
    "start": "64932",
    "end": "66766"
  },
  {
    "text": "Actions like, order.",
    "start": "66997",
    "end": "68457"
  },
  {
    "text": "This action would be where \na record of the order would be created. ",
    "start": "69109",
    "end": "72426"
  },
  {
    "text": "And the details of the order persisted.",
    "start": "72679",
    "end": "74442"
  },
  {
    "text": "Pay.",
    "start": "75262",
    "end": "75782"
  },
  {
    "text": "This action would cover \nthe processing of the payment,",
    "start": "76058",
    "end": "78379"
  },
  {
    "text": "and the updating of the payment status. ",
    "start": "78622",
    "end": "80667"
  },
  {
    "text": "It might also use \na third party payment gateway.",
    "start": "81001",
    "end": "83562"
  },
  {
    "text": "And finally, deliver.",
    "start": "84277",
    "end": "85553"
  },
  {
    "text": "This action would be where \nthe delivery details would be updated, ",
    "start": "85893",
    "end": "89032"
  },
  {
    "text": "and sent to the delivery driver.",
    "start": "89032",
    "end": "90685"
  },
  {
    "text": "As each of these actions completes,",
    "start": "91350",
    "end": "92899"
  },
  {
    "text": "they would in turn update the overall \ntransaction state in the single database ",
    "start": "93162",
    "end": "96931"
  },
  {
    "text": "before calling the mixed action \nin the transaction sequence. ",
    "start": "96931",
    "end": "100031"
  },
  {
    "text": "If however, \none of the actions did not complete, ",
    "start": "101144",
    "end": "103559"
  },
  {
    "text": "then they must also roll back the changes \nthe preceding actions have made ",
    "start": "103926",
    "end": "107683"
  },
  {
    "text": "on the single database.",
    "start": "107979",
    "end": "109233"
  },
  {
    "text": "This type of transaction sequence \nand its flow inside the monolithic application",
    "start": "110410",
    "end": "114616"
  },
  {
    "text": "usually has the undesired effect \nof making each action in the transaction",
    "start": "114944",
    "end": "118874"
  },
  {
    "text": "tightly coupled to each other \nand to the underlying data store.",
    "start": "119196",
    "end": "122849"
  },
  {
    "text": "In modern distributed applications,",
    "start": "124015",
    "end": "125653"
  },
  {
    "text": "it is best practice to have these actions \neach in their own separate service. ",
    "start": "125653",
    "end": "129710"
  },
  {
    "text": "And each of these services \nwould have their own individual data store. ",
    "start": "129896",
    "end": "132997"
  },
  {
    "text": "This best practice approach \nreduces issues around coupling,",
    "start": "133621",
    "end": "136841"
  },
  {
    "text": "while also meaning the services themselves \ncan be built and run ",
    "start": "137073",
    "end": "140319"
  },
  {
    "text": "on different platforms, services, \nand technologies. ",
    "start": "140320",
    "end": "143400"
  },
  {
    "text": "For example, \nhere we have our three services:",
    "start": "144625",
    "end": "147151"
  },
  {
    "text": "order, pay, and deliver,",
    "start": "147351",
    "end": "148867"
  },
  {
    "text": "all running on three different AWS services. ",
    "start": "149304",
    "end": "151884"
  },
  {
    "text": "In this case, we have order and pay ",
    "start": "152768",
    "end": "154452"
  },
  {
    "text": "running inside containers \non Amazon Elastic Container Service or ECS",
    "start": "154708",
    "end": "159299"
  },
  {
    "text": "and then deliver service \nusing AWS Lambda and Amazon DynamoDB. ",
    "start": "160043",
    "end": "163794"
  },
  {
    "text": "So how do we guarantee that transactions \nrunning across these services",
    "start": "164573",
    "end": "167814"
  },
  {
    "text": "behave like a single bulk update,",
    "start": "167814",
    "end": "170097"
  },
  {
    "text": "and that data consistency \nis maintained across these microservices ",
    "start": "170251",
    "end": "173963"
  },
  {
    "text": "and data stores that could be running anywhere \nand on anything. ",
    "start": "174273",
    "end": "178092"
  },
  {
    "start": "179000",
    "end": "266000"
  },
  {
    "text": "Well, an antipattern that we might see \npeople used to solve this problem,",
    "start": "179779",
    "end": "183278"
  },
  {
    "text": "might be to chain \neach microservice update",
    "start": "183729",
    "end": "186008"
  },
  {
    "text": "that is part of the transaction together.",
    "start": "186172",
    "end": "187791"
  },
  {
    "text": "Very much like what we would do \nin a monolithic example.",
    "start": "188402",
    "end": "191290"
  },
  {
    "text": "This would mean our food ordering scenario \nmight look something like this. ",
    "start": "192432",
    "end": "195707"
  },
  {
    "text": "When an order request is made, ",
    "start": "196290",
    "end": "197704"
  },
  {
    "text": "the order service processes the order, ",
    "start": "198101",
    "end": "199868"
  },
  {
    "text": "updates its own database, ",
    "start": "200283",
    "end": "201880"
  },
  {
    "text": "and then makes a call \nto the payment service ",
    "start": "201880",
    "end": "203992"
  },
  {
    "text": "to process the payment.",
    "start": "203992",
    "end": "205079"
  },
  {
    "text": "If the payment succeeds, ",
    "start": "206304",
    "end": "207440"
  },
  {
    "text": "the payment service \ncalls the delivery service ",
    "start": "207611",
    "end": "209885"
  },
  {
    "text": "to try and arrange delivery of the food. ",
    "start": "209886",
    "end": "212132"
  },
  {
    "text": "Once the delivery service \nhas successfully arranged delivery, ",
    "start": "213455",
    "end": "216149"
  },
  {
    "text": "it will then call back \nto the payment service, ",
    "start": "216343",
    "end": "218632"
  },
  {
    "text": "which will then in turn call back \nto the order service to notify the user. ",
    "start": "218827",
    "end": "222308"
  },
  {
    "text": "This pattern may seem fine ",
    "start": "223332",
    "end": "224978"
  },
  {
    "text": "however, there are flaws \nin this approach.",
    "start": "225216",
    "end": "227454"
  },
  {
    "text": "which are generally caused \nby the assumption,",
    "start": "227747",
    "end": "230066"
  },
  {
    "text": "that nothing will ever fail \nwhen each service ",
    "start": "230149",
    "end": "232505"
  },
  {
    "text": "is communicating with its peers.",
    "start": "232505",
    "end": "234145"
  },
  {
    "text": "What we actually see, ",
    "start": "236220",
    "end": "237255"
  },
  {
    "text": "is failures are part \nof distributed computing",
    "start": "237509",
    "end": "240008"
  },
  {
    "text": "and must always be taken into account. ",
    "start": "240942",
    "end": "242906"
  },
  {
    "text": "They may occur \nbecause the underlying network ",
    "start": "243565",
    "end": "246077"
  },
  {
    "text": "is unreliable or the bandwidth ",
    "start": "246264",
    "end": "249246"
  },
  {
    "text": "that is available is being consumed \nby other competing operations",
    "start": "249246",
    "end": "252662"
  },
  {
    "text": "or latency between the services \nslows calls down.",
    "start": "253426",
    "end": "257030"
  },
  {
    "text": "Because with distributed applications\nthere's no guarantee ",
    "start": "258050",
    "end": "260943"
  },
  {
    "text": "that the service involves \nare running in the same room, ",
    "start": "261097",
    "end": "263844"
  },
  {
    "text": "country, or even continent. ",
    "start": "264045",
    "end": "265749"
  },
  {
    "start": "266000",
    "end": "344000"
  },
  {
    "text": "One or more of these \ncould impact our food ordering application ",
    "start": "266927",
    "end": "270254"
  },
  {
    "text": "and make the overall transaction \nstate hard to determine.",
    "start": "270540",
    "end": "273430"
  },
  {
    "text": "So this time the user may call \nthe order service as always, ",
    "start": "274324",
    "end": "277654"
  },
  {
    "text": "which is successful \nand in turn calls the payment service. ",
    "start": "278164",
    "end": "281198"
  },
  {
    "text": "However, due to network latency, ",
    "start": "281778",
    "end": "283844"
  },
  {
    "text": "between the two services ",
    "start": "283929",
    "end": "285261"
  },
  {
    "text": "or a delay inside \nthe payment service itself,",
    "start": "285565",
    "end": "288071"
  },
  {
    "text": "a timeout then occurs \ninside the order service, ",
    "start": "288565",
    "end": "291537"
  },
  {
    "text": "which then rolls back the order ",
    "start": "291766",
    "end": "293262"
  },
  {
    "text": "and lets the user know \nthat no food has been ordered.",
    "start": "293393",
    "end": "296244"
  },
  {
    "text": "However, what actually happens is, ",
    "start": "296587",
    "end": "298481"
  },
  {
    "text": "after a delay, the payment service \neventually processes the payment. ",
    "start": "298577",
    "end": "302230"
  },
  {
    "text": "This delay may occur ",
    "start": "302920",
    "end": "304330"
  },
  {
    "text": "because the third party payment getaway \nis slow.",
    "start": "304330",
    "end": "307289"
  },
  {
    "text": "The payment service \nthen calls the delivery service, ",
    "start": "308368",
    "end": "310825"
  },
  {
    "text": "and the food is set to be delivered. ",
    "start": "311036",
    "end": "312612"
  },
  {
    "text": "But remember, the user thinks \nthe order has failed",
    "start": "313261",
    "end": "315919"
  },
  {
    "text": "and we will get quite a shock \nwhen their food turns up.",
    "start": "316063",
    "end": "318539"
  },
  {
    "text": "Not a good look for this application.",
    "start": "319062",
    "end": "320593"
  },
  {
    "text": "So how can we prevent this \nfrom happening? ",
    "start": "321933",
    "end": "323762"
  },
  {
    "text": "Well, we could put in a retry pattern \nfor all the inter-service calls",
    "start": "324568",
    "end": "327772"
  },
  {
    "text": "but retry calls between services\na certain number of times.",
    "start": "328170",
    "end": "331315"
  },
  {
    "text": "However, putting retries \nwould not fix all the issues ",
    "start": "331877",
    "end": "334853"
  },
  {
    "text": "and could in fact introduce \nsome of its own. ",
    "start": "334853",
    "end": "336800"
  },
  {
    "text": "Putting in indefinite retries \nmay actually mean \n ",
    "start": "337185",
    "end": "339921"
  },
  {
    "text": "the applications users with wait indefinitely, \nfor some orders to be confirmed.",
    "start": "340082",
    "end": "343882"
  },
  {
    "start": "344000",
    "end": "399000"
  },
  {
    "text": "What we need ideally, \nis a service that controls the flow ",
    "start": "345168",
    "end": "348200"
  },
  {
    "text": "and data consistency of each transaction \ninside each service.",
    "start": "348328",
    "end": "351907"
  },
  {
    "text": "Maintaining the current state \nof the transaction, ",
    "start": "352370",
    "end": "354589"
  },
  {
    "text": "and having the ability \nto roll back or compensate ",
    "start": "354728",
    "end": "357561"
  },
  {
    "text": "for a fail transaction in each service.",
    "start": "357733",
    "end": "360090"
  },
  {
    "text": "Luckily, there is a pattern \nthat we can use to do just that",
    "start": "360917",
    "end": "363995"
  },
  {
    "text": "called the Saga pattern with orchestration.",
    "start": "364248",
    "end": "366306"
  },
  {
    "text": "With this pattern, \nyou define an orchestrator ",
    "start": "366936",
    "end": "369366"
  },
  {
    "text": "or transaction manager \n ",
    "start": "369524",
    "end": "370689"
  },
  {
    "text": "as a service that exists \nonly to facilitate ",
    "start": "370833",
    "end": "373310"
  },
  {
    "text": "all the service transactions or Saga.",
    "start": "373310",
    "end": "375422"
  },
  {
    "text": "It is responsible for coordinating \nthe global transaction flow, ",
    "start": "376557",
    "end": "379445"
  },
  {
    "text": "that is communicating \nwith the appropriate services ",
    "start": "379846",
    "end": "382977"
  },
  {
    "text": "that are involved in a transaction",
    "start": "383089",
    "end": "384630"
  },
  {
    "text": "and orchestrating the necessary rollback ",
    "start": "384851",
    "end": "386870"
  },
  {
    "text": "or what can also be referred to \nas a compensating action. ",
    "start": "387489",
    "end": "390597"
  },
  {
    "text": "The Saga pattern therefore \nremoves the need for each service",
    "start": "391792",
    "end": "394702"
  },
  {
    "text": "to have any knowledge of other services ",
    "start": "394702",
    "end": "396615"
  },
  {
    "text": "that are involved in the transaction. ",
    "start": "396711",
    "end": "398432"
  },
  {
    "start": "399000",
    "end": "462000"
  },
  {
    "text": "We can implement \na service orchestrator via Saga,",
    "start": "399815",
    "end": "402552"
  },
  {
    "text": "by using AWS Step Functions \nto control and maintain",
    "start": "402789",
    "end": "405806"
  },
  {
    "text": "state of the global transaction flow.",
    "start": "406155",
    "end": "408083"
  },
  {
    "text": "Step Functions can integrate \nwith a large number of AWS services",
    "start": "408885",
    "end": "412481"
  },
  {
    "text": "that could be running the services ",
    "start": "412687",
    "end": "414220"
  },
  {
    "text": "that the Step Function services \nis orchestrating.",
    "start": "414220",
    "end": "416148"
  },
  {
    "text": "They could be running inside AWS Lambda,",
    "start": "417147",
    "end": "419508"
  },
  {
    "text": "Elastic Container Service, \nas well as Elastic Kubernetes Service,",
    "start": "419864",
    "end": "423430"
  },
  {
    "text": "or even behind an API Gateway \nto name but a few.",
    "start": "423601",
    "end": "426473"
  },
  {
    "text": "So in our case, a Step Functions workflow \nmight look like this.",
    "start": "427606",
    "end": "430585"
  },
  {
    "text": "We would have our place order, \nmake payment, and deliver order",
    "start": "431348",
    "end": "434336"
  },
  {
    "text": "as part of the workflow. ",
    "start": "434502",
    "end": "435626"
  },
  {
    "text": "Each of these steps would call out \nto the underlying service ",
    "start": "436177",
    "end": "439062"
  },
  {
    "text": "and wait for that service \nto respond with a success or failure. ",
    "start": "439234",
    "end": "442333"
  },
  {
    "text": "We can also build in \na suitable retry pattern ",
    "start": "443013",
    "end": "445366"
  },
  {
    "text": "to each of these calls, \nfrom within a Step Functions workflow.",
    "start": "445506",
    "end": "448595"
  },
  {
    "text": "Should the service return a failure,",
    "start": "449342",
    "end": "450797"
  },
  {
    "text": "or all the retry become exhausted?",
    "start": "450986",
    "end": "452903"
  },
  {
    "text": "We can also add the rollback \nor compensating actions into the workflow. ",
    "start": "453167",
    "end": "457147"
  },
  {
    "text": " So it looks a bit more like this, ",
    "start": "457801",
    "end": "459329"
  },
  {
    "text": "as we add in \nthe compensating transaction flow.",
    "start": "459536",
    "end": "462114"
  },
  {
    "start": "462000",
    "end": "498000"
  },
  {
    "text": "The primary advantage \nof the Saga or orchestrator pattern,",
    "start": "462633",
    "end": "464953"
  },
  {
    "text": "is that the complexity \nis somewhat centralized into one component.",
    "start": "465164",
    "end": "468248"
  },
  {
    "text": "So the other microservices in the Saga,",
    "start": "468668",
    "end": "470527"
  },
  {
    "text": "don't need to even be aware of the Saga",
    "start": "470701",
    "end": "472524"
  },
  {
    "text": "or the other microservices \nit interacts with. ",
    "start": "472794",
    "end": "475119"
  },
  {
    "text": "And AWS Step Functions, is a great way \nto visually represent the Saga",
    "start": "475683",
    "end": "479536"
  },
  {
    "text": "so it makes it easy to debug.",
    "start": "479857",
    "end": "481214"
  },
  {
    "text": "If you want to learn more \nabout these topics, ",
    "start": "482071",
    "end": "484024"
  },
  {
    "text": "check out the links below. ",
    "start": "484062",
    "end": "485118"
  },
  {
    "text": "Thanks for watching this episode \nof 'Back to Basis', we'll see you next time.",
    "start": "485774",
    "end": "488753"
  }
]