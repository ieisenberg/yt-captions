[
  {
    "text": "good morning and welcome to today's aws masterclass webinar",
    "start": "2320",
    "end": "7359"
  },
  {
    "text": "my name's ryan and i'm going to be your host today and take you through some content related to application services and dynamic dashboards which is a grand",
    "start": "7359",
    "end": "13840"
  },
  {
    "text": "title and we'll dive into that shortly so today's session is a masterclass and",
    "start": "13840",
    "end": "19439"
  },
  {
    "text": "this is a series designed to do a bit of a deep dive beyond some of the basics that you might come across on",
    "start": "19439",
    "end": "25439"
  },
  {
    "text": "other journey through the cloud webinars that we do help you educate you on some of the ways",
    "start": "25439",
    "end": "31039"
  },
  {
    "text": "to get best from aws technologies and services show you how some of the things work and hopefully in 45 minutes or so broaden",
    "start": "31039",
    "end": "38079"
  },
  {
    "text": "your knowledge and teach you some things you didn't know before",
    "start": "38079",
    "end": "42239"
  },
  {
    "text": "and this webinar is titled application services dynamic dashboard so it's a bit of a",
    "start": "43120",
    "end": "48559"
  },
  {
    "text": "grand title for really what i put together a demonstration system that ties together some of the services",
    "start": "48559",
    "end": "54559"
  },
  {
    "text": "inside aws to demonstrate how they can be used and how they can be used quite effectively",
    "start": "54559",
    "end": "59600"
  },
  {
    "text": "and the core of what we're going to show you today or talk you through today is services sms and sqs to carry some",
    "start": "59600",
    "end": "66000"
  },
  {
    "text": "core aws events and then use those things to drive a web view across those aws events",
    "start": "66000",
    "end": "72880"
  },
  {
    "text": "using s3 at the back end as a web server to host some dynamically generated content",
    "start": "72880",
    "end": "78320"
  },
  {
    "text": "so why are we doing this and why am i putting together this sort of demonstration is to really to show you some tips and tricks about",
    "start": "78320",
    "end": "83840"
  },
  {
    "text": "ways in which you can use some of the services in in differing ways so it's beyond simple compute and storage",
    "start": "83840",
    "end": "91119"
  },
  {
    "text": "so what services am i going to talk you through today and touch upon we're going to talk about ec2 because",
    "start": "91119",
    "end": "96320"
  },
  {
    "text": "we're going to launch some ec2 instances or talk about the events that we can generate out of auto scaling that will",
    "start": "96320",
    "end": "102640"
  },
  {
    "text": "surround some ec2 instances we're going to touch sns the simple notification service and",
    "start": "102640",
    "end": "108240"
  },
  {
    "text": "sqs a simple queue service to publish some events to persist those",
    "start": "108240",
    "end": "113520"
  },
  {
    "text": "events on a queue and then we're going to touch upon dynamodb for storing that data s3 for generating some or hosting some",
    "start": "113520",
    "end": "120719"
  },
  {
    "text": "web content and at the end of this i'll talk for a cloud formation template which you can download yourself and then you can build",
    "start": "120719",
    "end": "126799"
  },
  {
    "text": "this entire application after the event so what's this",
    "start": "126799",
    "end": "131920"
  },
  {
    "text": "application going to do basically we're going to mimic an application an arbitrary application implements auto scaling so we're going",
    "start": "131920",
    "end": "138239"
  },
  {
    "text": "to have an auto scaling group as the basis for what we're going to monitor and then we're going to trap",
    "start": "138239",
    "end": "143680"
  },
  {
    "text": "transport and store the scaling events that are produced when we force an action on that auto scaling group such",
    "start": "143680",
    "end": "149120"
  },
  {
    "text": "as terminate some instances or increase the capacity of that alter scaling pool and i'm going to use a simple technique",
    "start": "149120",
    "end": "155519"
  },
  {
    "text": "to produce some pseudo-dynamic content from s3 some little json files and some",
    "start": "155519",
    "end": "160800"
  },
  {
    "text": "javascript in a web page that ultimately produces a dashboard so as an exercise as i said before",
    "start": "160800",
    "end": "167440"
  },
  {
    "text": "beyond basic compute and storage",
    "start": "167440",
    "end": "171840"
  },
  {
    "text": "now you can view a movie of everything i'm going to talk you through today in these slides and i'll show this link",
    "start": "175200",
    "end": "181840"
  },
  {
    "text": "again at the end but you might want to take note it's a short 10-12 minute movie of me actually building this system live",
    "start": "181840",
    "end": "188879"
  },
  {
    "text": "and showing you in action and all the assets that you're going to see today you can download yourself and you can do this yourself",
    "start": "188879",
    "end": "195200"
  },
  {
    "text": "in your account through a cloud formation template which i'll share with you at the end",
    "start": "195200",
    "end": "201120"
  },
  {
    "text": "and this is a demonstration that's just an illustration of what you can do so by no means am i suggesting this is how you build",
    "start": "203200",
    "end": "209200"
  },
  {
    "text": "dashboards in aws this is just an example of tying together some of the application services to give you some ideas on how you might",
    "start": "209200",
    "end": "215840"
  },
  {
    "text": "use these things as well to glue your systems together so what is it we're going to walk",
    "start": "215840",
    "end": "221360"
  },
  {
    "text": "through i'm going to build something in this way we're going to have an arbitrary application in an autoscaling group",
    "start": "221360",
    "end": "227599"
  },
  {
    "text": "so shown here i've got two instances running some application it could be a web application it could be a",
    "start": "227599",
    "end": "232959"
  },
  {
    "text": "sharepoint site it could be anything really that is running on ec2 as part of a",
    "start": "232959",
    "end": "238000"
  },
  {
    "text": "scaling group to implement elastic capacity and we're going to trap the events that",
    "start": "238000",
    "end": "243439"
  },
  {
    "text": "come out of an auto scaling group via sns to publish those events as a",
    "start": "243439",
    "end": "248560"
  },
  {
    "text": "piece of json and then persist those events in an sqsq so that when an auto scaling action",
    "start": "248560",
    "end": "254480"
  },
  {
    "text": "occurs we'll be publishing some data persisting it so that we can do something with that at another point in",
    "start": "254480",
    "end": "260400"
  },
  {
    "text": "time we're gonna also have a monitoring application a simple script running on a",
    "start": "260400",
    "end": "267040"
  },
  {
    "text": "monitoring server that will take that message from the queue it will write that data",
    "start": "267040",
    "end": "272240"
  },
  {
    "text": "to a dynamodb table and it will also form up into s3 a piece of data text file that",
    "start": "272240",
    "end": "279919"
  },
  {
    "text": "can be read then by a web application served out of s3 so a really simple process and you can",
    "start": "279919",
    "end": "286080"
  },
  {
    "text": "replace if you like anything in that autoscaling group on the left and you could potentially take the simple script",
    "start": "286080",
    "end": "291440"
  },
  {
    "text": "i have here running that you can download and you could implement a monitoring dashboard to look at what's",
    "start": "291440",
    "end": "297520"
  },
  {
    "text": "happening inside your auto scanning groups now the simple script will be a python",
    "start": "297520",
    "end": "302639"
  },
  {
    "text": "script and i'll talk you through some of the basics in there so you can get familiar with some of the apis around sqs",
    "start": "302639",
    "end": "308240"
  },
  {
    "text": "dynamodb and s3 but it's basically going to read the sqsq and generate some data",
    "start": "308240",
    "end": "313759"
  },
  {
    "text": "for s3 and then s3 has some static content html javascript and css",
    "start": "313759",
    "end": "319039"
  },
  {
    "text": "and then it'll read that data file that we're going to pop out into s3 bucket from the client browser",
    "start": "319039",
    "end": "325919"
  },
  {
    "text": "and ultimately forming up our tables of a dashboard that will look something like this",
    "start": "325919",
    "end": "331120"
  },
  {
    "text": "so this is served from s3 with data dynamically grabbed out of that same s3",
    "start": "331120",
    "end": "336400"
  },
  {
    "text": "bucket bucket on a periodic refresh showing the instances i have in service and instances that have terminated in my",
    "start": "336400",
    "end": "344000"
  },
  {
    "text": "auto scanning group as being monitored so we can see instance ids the amis that's come from the availability zone",
    "start": "344000",
    "end": "350080"
  },
  {
    "text": "that's running in the public ip dns and so on and so forth so a very simple view but showing us in",
    "start": "350080",
    "end": "356000"
  },
  {
    "text": "green active instances and red terminated instances",
    "start": "356000",
    "end": "361280"
  },
  {
    "text": "so the glue behind all of this and really the core essence of why i wanted to do this masterclass today",
    "start": "362080",
    "end": "368080"
  },
  {
    "text": "is to really open the lid on sns and sqs as some essential glues",
    "start": "368080",
    "end": "373440"
  },
  {
    "text": "between applications and between the services and components you might build on aws so sms the simple notification",
    "start": "373440",
    "end": "381440"
  },
  {
    "text": "service is simple by nature simple in name really it's really built around three core api",
    "start": "381440",
    "end": "387360"
  },
  {
    "text": "calls at the top there create topic subscribe and publish so it's a pub sub",
    "start": "387360",
    "end": "392479"
  },
  {
    "text": "framework where the messages that you publish are reliably and redundantly stored",
    "start": "392479",
    "end": "398800"
  },
  {
    "text": "across and available in aws region it's scalable it scales an unlimited",
    "start": "398800",
    "end": "404479"
  },
  {
    "text": "number of messages and you can create uh subscriptions against your",
    "start": "404479",
    "end": "409599"
  },
  {
    "text": "topics that you create within sms like on different protocols so it's flexible you can receive these things",
    "start": "409599",
    "end": "416240"
  },
  {
    "text": "over http you can receive data over email you can pop messages in sqs queues and it's integrated into a",
    "start": "416240",
    "end": "423599"
  },
  {
    "text": "whole load of different services so that you can generate sms notifications out of ec2 cloud watch and",
    "start": "423599",
    "end": "429840"
  },
  {
    "text": "auto scaling is what we're going to look at today and then you can put a security model across the top of sns",
    "start": "429840",
    "end": "435120"
  },
  {
    "text": "so that you can ensure that only the authenticated people can read messages on these topics",
    "start": "435120",
    "end": "441680"
  },
  {
    "text": "within the console sns has got a very simple interface so a topic is the core",
    "start": "442720",
    "end": "448479"
  },
  {
    "text": "component here so you're going to generate messages and publish them to a topic and then somebody can subscribe to",
    "start": "448479",
    "end": "454479"
  },
  {
    "text": "that topic so here i'm showing creating an example topic which is my generic topic for",
    "start": "454479",
    "end": "459680"
  },
  {
    "text": "messages and flipping through the console once i've created that topic",
    "start": "459680",
    "end": "465280"
  },
  {
    "text": "i'm then able to create a subscription against it so here my an example topic and i create a new",
    "start": "465280",
    "end": "471599"
  },
  {
    "text": "subscription then i can choose the protocol over which i will receive these messages when messages are",
    "start": "471599",
    "end": "477680"
  },
  {
    "text": "published to this topic so in this case i'm choosing an amazon sqsq but it could just easily be poking",
    "start": "477680",
    "end": "483599"
  },
  {
    "text": "an http or https endpoint something that you have running you could be receiving data formatted in an",
    "start": "483599",
    "end": "489599"
  },
  {
    "text": "email or you could be receiving json in an email that you might want to then pull out of an inbox and process in some way",
    "start": "489599",
    "end": "495120"
  },
  {
    "text": "but amazon sqs is what we're going to use and commonly these are tied together so the events can be persisted",
    "start": "495120",
    "end": "500879"
  },
  {
    "text": "and at some point in the future you can then read those events for processing",
    "start": "500879",
    "end": "507840"
  },
  {
    "text": "now one of the things that you can do and just by illustration is you can tie this stuff together with",
    "start": "508720",
    "end": "514399"
  },
  {
    "text": "cloudwatch so here is a simple cloud watch alarm the create alarm wizard so i'm creating here a cpu",
    "start": "514399",
    "end": "521839"
  },
  {
    "text": "utilization alarm on a particular instance so when the cpu utilization is greater than equal to 65",
    "start": "521839",
    "end": "529360"
  },
  {
    "text": "percent for a period of five minutes then this alarm would trigger and in that create alarm wizard i can",
    "start": "529360",
    "end": "536560"
  },
  {
    "text": "then step through the action that will be taken when the alarm fires so in this case",
    "start": "536560",
    "end": "542560"
  },
  {
    "text": "when this alarm is in state alarm i'm going to take the action sender notification and then i can",
    "start": "542560",
    "end": "548800"
  },
  {
    "text": "choose what that notification will do you could create an email topic in in cloud watch which is a common",
    "start": "548800",
    "end": "554800"
  },
  {
    "text": "thing to do but that an example topic that i created in sns will be available",
    "start": "554800",
    "end": "560080"
  },
  {
    "text": "here as something to publish this event to so that when this cloudwatch alarm fires it will publish",
    "start": "560080",
    "end": "567440"
  },
  {
    "text": "the topic of a high cpu uh it published a message to the topic when the cpu is over 65",
    "start": "567440",
    "end": "575120"
  },
  {
    "text": "so we can see here that i've got a cloudwatch alarm that'll publish an sns message that will be persisted onto sqs",
    "start": "575120",
    "end": "582880"
  },
  {
    "text": "so effectively a few clicks of a mouse i've trapped all my cloud watch events or alarms or and i can publish them and",
    "start": "582880",
    "end": "588720"
  },
  {
    "text": "i can persist them and then i can read them off the queue and do something with them later",
    "start": "588720",
    "end": "594480"
  },
  {
    "text": "so that brings nicely onto the second sort of glue service which is a simple q service again it's very simple in terms",
    "start": "595600",
    "end": "602000"
  },
  {
    "text": "of the apis that you can access it through so pretty much for things to",
    "start": "602000",
    "end": "608320"
  },
  {
    "text": "to note creating a cue to actually create the the logical cue that will persist",
    "start": "608320",
    "end": "613680"
  },
  {
    "text": "messages across an aws region you can send messages to that queue you can receive messages",
    "start": "613680",
    "end": "619519"
  },
  {
    "text": "from a queue and then you can remove messages from a queue it's scalable so sqs is designed for an",
    "start": "619519",
    "end": "625920"
  },
  {
    "text": "unlimited number of processes reading an unlimited number of messages so there isn't any",
    "start": "625920",
    "end": "632079"
  },
  {
    "text": "cap on terms of the queue so very good where you might be struggling to um to persist messages and",
    "start": "632079",
    "end": "640640"
  },
  {
    "text": "understand disk requirements maybe for running your jms persistence behind the jms provider sqs can take away all that capacity",
    "start": "640640",
    "end": "647360"
  },
  {
    "text": "planning it's reliable when you put a message in a queue it's stored across availability zones",
    "start": "647360",
    "end": "653200"
  },
  {
    "text": "in the region within aws where the queue has been set up and it's very cheap it's",
    "start": "653200",
    "end": "659120"
  },
  {
    "text": "secure you've got authentication mechanism across the top and it's very performant as well so some",
    "start": "659120",
    "end": "664720"
  },
  {
    "text": "people even buffer a dynamodb table right via sqs so that when their dynamo capacity isn't great enough for a",
    "start": "664720",
    "end": "672000"
  },
  {
    "text": "provisions perspective sqs can buffer the messages so it's performance enough to work in",
    "start": "672000",
    "end": "677360"
  },
  {
    "text": "that regard and the way that things works and illustrating it via the bottom",
    "start": "677360",
    "end": "682800"
  },
  {
    "text": "python api for aws is you have an application application a and you wish to publish some messages to",
    "start": "682800",
    "end": "689600"
  },
  {
    "text": "a queue so the first thing you can do is you can connect to sqs and then create a queue and this simple call then create",
    "start": "689600",
    "end": "696399"
  },
  {
    "text": "that queue and make it available within aws you can then put a message",
    "start": "696399",
    "end": "702320"
  },
  {
    "text": "on said queue so simply here importing a message class creating the message setting the",
    "start": "702320",
    "end": "708640"
  },
  {
    "text": "body and then writing that message to our queue then a second application can read",
    "start": "708640",
    "end": "716560"
  },
  {
    "text": "messages from a queue and when you read messages from an sqs queue you set the message",
    "start": "716560",
    "end": "722800"
  },
  {
    "text": "visibility time and here i have set a read with a message visibility of 60 seconds",
    "start": "722800",
    "end": "728000"
  },
  {
    "text": "what will happen is that when you read messages from a queue they will be made invisible to all other",
    "start": "728000",
    "end": "733519"
  },
  {
    "text": "people reading that queue until that time out occurs or the application processes them in some way",
    "start": "733519",
    "end": "740320"
  },
  {
    "text": "so typically you're going to set the message visibility timeout you're going to read the message consume",
    "start": "740320",
    "end": "745600"
  },
  {
    "text": "it and then you're going to delete the message and then that message is consumed and gone if i don't delete that message in that",
    "start": "745600",
    "end": "751120"
  },
  {
    "text": "time that message will become available for other readers of that queue and when you dive into the sqs console",
    "start": "751120",
    "end": "757680"
  },
  {
    "text": "and have a look at some of these things and the demonstration video that i showed you or gave you a link for earlier on youtube",
    "start": "757680",
    "end": "764720"
  },
  {
    "text": "shows you doing this you can read sqs cues from within the console and again you would set a message",
    "start": "764720",
    "end": "770160"
  },
  {
    "text": "visibility timeout in the console so that those messages are now available for you in the console and no other",
    "start": "770160",
    "end": "775279"
  },
  {
    "text": "subscribers to the queue can read them so the cool trick then of tying these",
    "start": "775279",
    "end": "781839"
  },
  {
    "text": "things together for the purposes of building a dashboard is to tie auto scaling event notifications",
    "start": "781839",
    "end": "789040"
  },
  {
    "text": "published to sms and then persisting those sms by subscribing to that sms topic",
    "start": "789040",
    "end": "795839"
  },
  {
    "text": "from sqs so we're going to move auto scaling events through sns pub sub backbone and then",
    "start": "795839",
    "end": "801279"
  },
  {
    "text": "persist those events in sqs and you can do this really from anything",
    "start": "801279",
    "end": "806399"
  },
  {
    "text": "to anything and i've just shown here the example or talking through the example of trapping auto scaling events",
    "start": "806399",
    "end": "811760"
  },
  {
    "text": "but these could be any events that you're publishing with one simple publish message call to sms persist",
    "start": "811760",
    "end": "818560"
  },
  {
    "text": "those in an sql sq and then have some other application consuming them for any sort of business process that",
    "start": "818560",
    "end": "823680"
  },
  {
    "text": "you might want to implement in your apps so when we create an auto scaling",
    "start": "823680",
    "end": "831440"
  },
  {
    "text": "uh setup the first thing we need to do is create a launch configuration so a",
    "start": "831440",
    "end": "837440"
  },
  {
    "text": "launch configuration here as a cli tool is basically the ec2 ami",
    "start": "837440",
    "end": "842560"
  },
  {
    "text": "id that you're going to create an instance from the type of instance here a t1 micro could be any of the",
    "start": "842560",
    "end": "848000"
  },
  {
    "text": "families of instances that we have security group to launch this instance into and a name for this config",
    "start": "848000",
    "end": "853680"
  },
  {
    "text": "so this is the template for launching ec2 instances under auto scaling",
    "start": "853680",
    "end": "859440"
  },
  {
    "text": "second part of auto scaling is to create a group so a group which is using that launch",
    "start": "859440",
    "end": "865120"
  },
  {
    "text": "configuration has some size a minimum of one ec2 instance a max of 20",
    "start": "865120",
    "end": "870160"
  },
  {
    "text": "across maybe a list of availability zones now they're the two core essences of creating an auto",
    "start": "870160",
    "end": "875440"
  },
  {
    "text": "scaling group now you can add the policies which can then be driven off cloud watch but for this demonstration and in part",
    "start": "875440",
    "end": "882160"
  },
  {
    "text": "of the the video you'll see the auto scaling group is actually created by a cloud formation template",
    "start": "882160",
    "end": "888320"
  },
  {
    "text": "and it doesn't have any policies on it but what we're going to do is attach an sns notification",
    "start": "888320",
    "end": "896480"
  },
  {
    "text": "now when you create an sns notification in fact when you create anything in aws everything has an amazon resource name",
    "start": "896480",
    "end": "902560"
  },
  {
    "text": "an arn and we can see here my an example topic had a topic arn there highlighted",
    "start": "902560",
    "end": "909040"
  },
  {
    "text": "that's its unique identifier so i can use that ar arn in order to put a notification on",
    "start": "909040",
    "end": "916480"
  },
  {
    "text": "my auto scaling group so the third command of the command line that i could do by hand is the as put",
    "start": "916480",
    "end": "922240"
  },
  {
    "text": "notification configuration against my auto scaling group and then bang in the topic arn",
    "start": "922240",
    "end": "928079"
  },
  {
    "text": "from my sms topic now i can then also generate events of different",
    "start": "928079",
    "end": "933600"
  },
  {
    "text": "notification types and here i've got also scaling instance launch and an auto scaling instance terminate",
    "start": "933600",
    "end": "940160"
  },
  {
    "text": "and you can run a command of the command line that will describe those notification types that are available to you",
    "start": "940160",
    "end": "946160"
  },
  {
    "text": "under auto scaling and there are four that you can choose from instance launch entrance laws error",
    "start": "946160",
    "end": "951839"
  },
  {
    "text": "terminate and terminate area so i could produce those events but this command is just going to look at launch and terminates",
    "start": "951839",
    "end": "959199"
  },
  {
    "text": "and then like i did before i can create a subscription to this sns topic amazon sqs being my end point and i",
    "start": "961279",
    "end": "968560"
  },
  {
    "text": "would then give the endpoint q amazon resource name for that queue in this particular wizard",
    "start": "968560",
    "end": "974079"
  },
  {
    "text": "and then any of those auto scaling events would then get published onto this queue",
    "start": "974079",
    "end": "979920"
  },
  {
    "text": "now the payload that's produced out of these events is json and here i've um sort of truncated some of it but to",
    "start": "980959",
    "end": "987040"
  },
  {
    "text": "give you an idea so we have a message type and messages have ids um it's been published to the topic arn",
    "start": "987040",
    "end": "994000"
  },
  {
    "text": "that we chose before has a subject that's generated in this case this is the subject of auto scaling",
    "start": "994000",
    "end": "999600"
  },
  {
    "text": "termination for a group around my sns dashboard auto scaling group time stamps signatures versions and urls",
    "start": "999600",
    "end": "1007120"
  },
  {
    "text": "and so on for unsubscribing to these because these could be sent via email in which case people can unsubscribe to",
    "start": "1007120",
    "end": "1013360"
  },
  {
    "text": "these notifications too but the core part of it is the message and messages here i've taken a raw dump of",
    "start": "1013360",
    "end": "1020399"
  },
  {
    "text": "the message from sqs being produced but we can see the event is an ec2 instance terminates",
    "start": "1020399",
    "end": "1026000"
  },
  {
    "text": "from my autoscaling group and then we got some pros at the bottom there of why this event was generated",
    "start": "1026000",
    "end": "1031760"
  },
  {
    "text": "and this is all coming out of the box out of the sns notification from the autoscaling group and here it's",
    "start": "1031760",
    "end": "1038319"
  },
  {
    "text": "because i've explicitly set the desired capacity on an autoscaling group from five to one so instance of this",
    "start": "1038319",
    "end": "1044959"
  },
  {
    "text": "instance in this case was taken out of service so were other instances",
    "start": "1044959",
    "end": "1052400"
  },
  {
    "text": "now that template is available to create that entire setup in cloud",
    "start": "1052400",
    "end": "1058320"
  },
  {
    "text": "formation and you can download from bootstrapping assets mys3 bucket again these links will be available at",
    "start": "1058320",
    "end": "1064080"
  },
  {
    "text": "the end of this presentation but you can download this as register instances template",
    "start": "1064080",
    "end": "1069760"
  },
  {
    "text": "and it was a cloud formation template that creates everything i've just described will create the auto scaling",
    "start": "1069760",
    "end": "1075280"
  },
  {
    "text": "group to monitor it will create the cues the topics tie them all together",
    "start": "1075280",
    "end": "1080320"
  },
  {
    "text": "and it will also enable you to create a monitoring application that will come on to you later",
    "start": "1080320",
    "end": "1085520"
  },
  {
    "text": "but if you think about cloudformation all we're doing there is exactly the same we're creating our autoscaling",
    "start": "1085520",
    "end": "1090799"
  },
  {
    "text": "group we're generating notifications to a topic in sns and then we're creating this description to an sqsq",
    "start": "1090799",
    "end": "1097440"
  },
  {
    "text": "and i've shown you the command line examples of tying those together but within cloud formation it looks",
    "start": "1097440",
    "end": "1103200"
  },
  {
    "text": "pretty similar so here i have a notification configuration on my auto scaling group",
    "start": "1103200",
    "end": "1109760"
  },
  {
    "text": "adding those notifications around the events of instance launch and instance terminates just like my as put",
    "start": "1109760",
    "end": "1115520"
  },
  {
    "text": "notification configuration this little block of cloud formation template does the same job",
    "start": "1115520",
    "end": "1122240"
  },
  {
    "text": "likewise a subscription as i've shown you in the console previously can be created against that notification",
    "start": "1122240",
    "end": "1128880"
  },
  {
    "text": "so here i'm creating a a subscription to a topic on the protocol sqs so this is how i can",
    "start": "1128880",
    "end": "1135120"
  },
  {
    "text": "then persist those events down onto my cues so this is part of a larger cloud formation template and you can",
    "start": "1135120",
    "end": "1141280"
  },
  {
    "text": "feel free to pick that apart um but you'll see that these things linked together in a sequence of events",
    "start": "1141280",
    "end": "1146640"
  },
  {
    "text": "to generate this system in a couple of minutes",
    "start": "1146640",
    "end": "1151840"
  },
  {
    "text": "so in principle we've trapped some events we've used sns to publish them to a topic and then we've got a subscriber",
    "start": "1152000",
    "end": "1158400"
  },
  {
    "text": "in this case just one subscriber to persist those in sqs queues so let's do something with",
    "start": "1158400",
    "end": "1164080"
  },
  {
    "text": "those events so the setup we've got so far is sms sns notifications into sqs to",
    "start": "1164080",
    "end": "1171919"
  },
  {
    "text": "persist it and then i want to create an application that's going to read that sqsq",
    "start": "1171919",
    "end": "1177200"
  },
  {
    "text": "and then take the data and pass it into dynamodb so this is my monitoring application and",
    "start": "1177200",
    "end": "1182880"
  },
  {
    "text": "this is a little python application where i'm going to walk through how it works and how you can achieve similar things against the",
    "start": "1182880",
    "end": "1188240"
  },
  {
    "text": "bottom apis that application is also going to take that data and form it up into some",
    "start": "1188240",
    "end": "1194640"
  },
  {
    "text": "file to place into s3 and that application is then going to be",
    "start": "1194640",
    "end": "1199679"
  },
  {
    "text": "able to be read by browser served as static content from s3 and",
    "start": "1199679",
    "end": "1205120"
  },
  {
    "text": "then there'll be a javascript process that pulls the dynamic data in and forms up a dashboard",
    "start": "1205120",
    "end": "1211600"
  },
  {
    "text": "so this application read messages from sqs queues write the data to a dynamodb table so",
    "start": "1212320",
    "end": "1219200"
  },
  {
    "text": "that we can persist it and read it later and query it in different ways we're going to form a json file from",
    "start": "1219200",
    "end": "1224960"
  },
  {
    "text": "updated results and which is pretty simple to do because all the event data is already in a json format",
    "start": "1224960",
    "end": "1231039"
  },
  {
    "text": "dynamodb we can stick data in as a json format and then we can write that file",
    "start": "1231039",
    "end": "1236240"
  },
  {
    "text": "onto s3 which a piece of javascript is going to interpret so this script is also available that",
    "start": "1236240",
    "end": "1242880"
  },
  {
    "text": "same bucket and it's called as node manager.py and this is all downloaded and bootstrapped as part of the",
    "start": "1242880",
    "end": "1248960"
  },
  {
    "text": "cloudformation template if you wish to use that and again i talk you through all of this in the demonstration video that you can",
    "start": "1248960",
    "end": "1255360"
  },
  {
    "text": "google after this webinar so reading an sqsq how do we do that",
    "start": "1255360",
    "end": "1262799"
  },
  {
    "text": "very simple in bottom and the other languages and sdks are just as simple in their constructs",
    "start": "1262799",
    "end": "1268320"
  },
  {
    "text": "first thing you need to do is connect to a queue so here i've got a bolo connect to sqs i'm going to specify the queue name that",
    "start": "1268320",
    "end": "1274880"
  },
  {
    "text": "i'm going to connect to and i'm going to set the message class reading as being a raw message i want to get the raw content",
    "start": "1274880",
    "end": "1281440"
  },
  {
    "text": "out of this sqsq then i'm going to request some messages from the queue here i'm going",
    "start": "1281440",
    "end": "1286559"
  },
  {
    "text": "to try and get batches of 10 messages and then i'm going to loop through these messages and effectively switch",
    "start": "1286559",
    "end": "1292240"
  },
  {
    "text": "on two things the different types of event that's contained within my message so an",
    "start": "1292240",
    "end": "1298000"
  },
  {
    "text": "auto scaling instance launcher and auto scaling terminate and in each case i'm going to do a",
    "start": "1298000",
    "end": "1303039"
  },
  {
    "text": "different method call here to write to dynamodb so i'm either going to create a",
    "start": "1303039",
    "end": "1308080"
  },
  {
    "text": "row in dynamodb or i'm going to update a row to set this instance to be terminated",
    "start": "1308080",
    "end": "1313760"
  },
  {
    "text": "and then once i've read the message i can then delete the message they will remove it from the queue if i",
    "start": "1313760",
    "end": "1319280"
  },
  {
    "text": "didn't do this then the message visibility timeout i mentioned earlier would kick back in and that message",
    "start": "1319280",
    "end": "1324400"
  },
  {
    "text": "could be reread by any other process or next iteration of this get from the",
    "start": "1324400",
    "end": "1330840"
  },
  {
    "text": "queue next thing to do is to write to dynamodb again",
    "start": "1330840",
    "end": "1336320"
  },
  {
    "text": "it's just as simple in bottom to do this so i'm going to get in",
    "start": "1336320",
    "end": "1342320"
  },
  {
    "text": "this case save an instance on a scale up action so i'm going to get an instance id from my message data that i pulled from",
    "start": "1342320",
    "end": "1348960"
  },
  {
    "text": "sqs i'm going to connect to my dynamodb table and then i'm going to insert a new",
    "start": "1348960",
    "end": "1355360"
  },
  {
    "text": "item into dynamodb so dynamodb is schema-less so the only thing i need here is a key",
    "start": "1355360",
    "end": "1361919"
  },
  {
    "text": "and there's only use the instance id is the key and then the data that i put into",
    "start": "1361919",
    "end": "1366960"
  },
  {
    "text": "this item or this row within the dynamodb table is going to be a piece of json",
    "start": "1366960",
    "end": "1372480"
  },
  {
    "text": "that's formed up here so these are my item fields if you like now each row could be completely different in terms",
    "start": "1372480",
    "end": "1378240"
  },
  {
    "text": "of its structure but the console neatly picks these things apart and i'll show you a",
    "start": "1378240",
    "end": "1383520"
  },
  {
    "text": "screenshot in a second so once i've formed up the data to write i then simply put the data to dynamo and",
    "start": "1383520",
    "end": "1390960"
  },
  {
    "text": "i'll get a transactional right to dynamo",
    "start": "1390960",
    "end": "1394960"
  },
  {
    "text": "so we're in the console if you go to the dynamodb table you can browse content and just to show you how this has been",
    "start": "1396240",
    "end": "1402559"
  },
  {
    "text": "picked apart so my instance id there is my hash key and it's my main sort of searchable",
    "start": "1402559",
    "end": "1408320"
  },
  {
    "text": "attribute there the rest of that data is that block of json that's been written in there and it's been pulled apart by the console so",
    "start": "1408320",
    "end": "1414880"
  },
  {
    "text": "we can see these individual fields so the ami id the availability zone and so on which match the fields that we've been",
    "start": "1414880",
    "end": "1421360"
  },
  {
    "text": "displaying on our dashboard a scaled down event done in a similar",
    "start": "1421360",
    "end": "1428400"
  },
  {
    "text": "sort of way and this is really updating a row within a dynamodb table so again i connect to my dynamodb",
    "start": "1428400",
    "end": "1436080"
  },
  {
    "text": "table i then update a particular attribute a flag here to say that this instance was",
    "start": "1436080",
    "end": "1442320"
  },
  {
    "text": "terminated and i update the item and ultimately in the browser then i can see my terminated",
    "start": "1442320",
    "end": "1448640"
  },
  {
    "text": "flag for this particular instance flips to true",
    "start": "1448640",
    "end": "1452960"
  },
  {
    "text": "then i'm going to write to s3 so s3 in our case is going to hold a",
    "start": "1456000",
    "end": "1461600"
  },
  {
    "text": "various different assets and to get my core data asset out there a piece of json a couple",
    "start": "1461600",
    "end": "1469039"
  },
  {
    "text": "of commands is all that's needed so connecting to my s3 bucket that's been created where i'm hosting this stuff",
    "start": "1469039",
    "end": "1475600"
  },
  {
    "text": "and then i'm going to kick out a piece of data text file in json format into that",
    "start": "1475600",
    "end": "1482000"
  },
  {
    "text": "bucket with a known data with a known file type",
    "start": "1482000",
    "end": "1487840"
  },
  {
    "text": "now that data looks like this very similar to the data that's been written to dynamodb and a different just",
    "start": "1487840",
    "end": "1495440"
  },
  {
    "text": "unpacked form really of the original sns message so pulling some stuff around the instance in",
    "start": "1495440",
    "end": "1500799"
  },
  {
    "text": "looking at the terminated flags and so on so there are two instances that are written out into something",
    "start": "1500799",
    "end": "1506159"
  },
  {
    "text": "a text file and the purpose of this demonstration called instances.txt in s3",
    "start": "1506159",
    "end": "1515760"
  },
  {
    "text": "so now we have the data in s3 we can build a web view on it now s3 is a static web server",
    "start": "1515760",
    "end": "1523200"
  },
  {
    "text": "it's not an application server it cannot generate dynamic content or process server side scripts",
    "start": "1523200",
    "end": "1529760"
  },
  {
    "text": "for generating dynamic content but we can use a neat little trick here really and rely upon",
    "start": "1529760",
    "end": "1535039"
  },
  {
    "text": "some client-side processing and some javascript so we can build a web view essentially",
    "start": "1535039",
    "end": "1541360"
  },
  {
    "text": "by having two elements in our s3 bucket so we're depositing from that little monitoring app that i've just walked you",
    "start": "1541360",
    "end": "1547679"
  },
  {
    "text": "through instances.txt so this is a text file with that json with all the different instance events coming and",
    "start": "1547679",
    "end": "1553520"
  },
  {
    "text": "going formed up within then in that same bucket i have some html",
    "start": "1553520",
    "end": "1559200"
  },
  {
    "text": "some style sheets and some javascript and when we browse to that particular web page",
    "start": "1559200",
    "end": "1565200"
  },
  {
    "text": "that's hosted in s3 we'll load it from s3 and we'll have a periodic refresh of that page",
    "start": "1565200",
    "end": "1571360"
  },
  {
    "text": "to constantly go back to s3 to grab my instances.txt",
    "start": "1571360",
    "end": "1578000"
  },
  {
    "text": "and we'll use jquery functions here to grab that data asynchronously and then use jquery",
    "start": "1578000",
    "end": "1584240"
  },
  {
    "text": "selectors to form up some tables in that web cloud web browser to form the dashboard that i showed you earlier",
    "start": "1584240",
    "end": "1592720"
  },
  {
    "text": "so the s3 bucket contains some folders for css image javascript index.html core and",
    "start": "1593600",
    "end": "1600880"
  },
  {
    "text": "our instances.txt instances.texas and json data and then we use jquery.json to go and grab that",
    "start": "1600880",
    "end": "1609440"
  },
  {
    "text": "as an ajax call so the javascript functions an index page hosted in s3 pulled up to your browser executing",
    "start": "1609440",
    "end": "1616159"
  },
  {
    "text": "jquery do an ajax get of the instances json in s3 pull it back and then that data can be picked",
    "start": "1616159",
    "end": "1622640"
  },
  {
    "text": "apart really easily within javascript using some jquery table selectors modifiers etc",
    "start": "1622640",
    "end": "1628799"
  },
  {
    "text": "we can then form up a table view of instances that are terminated instances that are currently running and",
    "start": "1628799",
    "end": "1635360"
  },
  {
    "text": "have that as a innate little dashboard that you've seen earlier so the dashboard view here that's",
    "start": "1635360",
    "end": "1641679"
  },
  {
    "text": "exactly that he was showing one instance running and all my previous terminated",
    "start": "1641679",
    "end": "1646880"
  },
  {
    "text": "and you can build this again by downloading the cloud formation template that i'll show you again a link at the",
    "start": "1646880",
    "end": "1652640"
  },
  {
    "text": "end of this and you can follow through me building this in the video that i've mentioned and you'll see this is on a periodic refresh of 10 seconds or so",
    "start": "1652640",
    "end": "1659360"
  },
  {
    "text": "and it's constantly looking to see if there's any new data being updated in that instances.txt",
    "start": "1659360",
    "end": "1664480"
  },
  {
    "text": "so effectively using s3 to generate some dynamic looking web application so a really",
    "start": "1664480",
    "end": "1670799"
  },
  {
    "text": "simple and quick way of doing some some dynamic stuff on top of s3",
    "start": "1670799",
    "end": "1676720"
  },
  {
    "text": "so as i said you can try this yourself so again this link will be shown at the end but there's a youtube url that has a video",
    "start": "1676720",
    "end": "1683919"
  },
  {
    "text": "it's about 12 minutes long of me using the cloud formation template shown below in my bootstrapping assets",
    "start": "1683919",
    "end": "1692158"
  },
  {
    "text": "s3.amazonaws.com bucket so you can grab that template you can then load it up into",
    "start": "1692200",
    "end": "1698320"
  },
  {
    "text": "cloud formation in the console and you can run that template and it'll create all the resources i",
    "start": "1698320",
    "end": "1703679"
  },
  {
    "text": "talked about here today and the cloud formation template itself runs through",
    "start": "1703679",
    "end": "1709440"
  },
  {
    "text": "a number of actions required to create this demonstration one is it creates the security groups",
    "start": "1709440",
    "end": "1715039"
  },
  {
    "text": "required for different servers so some security groups for my instances in an auto scaling group that",
    "start": "1715039",
    "end": "1721520"
  },
  {
    "text": "i want to monitor security groups for my monitoring application and where it can read and",
    "start": "1721520",
    "end": "1726720"
  },
  {
    "text": "write from and so on creates that notification in sns",
    "start": "1726720",
    "end": "1731919"
  },
  {
    "text": "and creates a subscription for sqs to that notification it creates the sqsq that we're going to",
    "start": "1731919",
    "end": "1738559"
  },
  {
    "text": "subscribe to sns from it's going to create auto scaling groups launch configs",
    "start": "1738559",
    "end": "1744080"
  },
  {
    "text": "so it creates two of these it creates one for the application under monitoring a pseudo it's just an ec2",
    "start": "1744080",
    "end": "1749840"
  },
  {
    "text": "instance that you can initiate terminates against or launches against but it also creates one that bootstraps",
    "start": "1749840",
    "end": "1756720"
  },
  {
    "text": "the monitoring application it creates s3 bucket it creates dynamodb table it",
    "start": "1756720",
    "end": "1763840"
  },
  {
    "text": "starts all these instances up and gets you up and running within about three or four minutes so do",
    "start": "1763840",
    "end": "1769440"
  },
  {
    "text": "encourage you to have a go at that and have a look at that cloud formation template",
    "start": "1769440",
    "end": "1775200"
  },
  {
    "text": "so in summary as a short sort of webinar today this is really just trying to bring up",
    "start": "1775200",
    "end": "1780960"
  },
  {
    "text": "the fact that it's more than compute and storage in aws there are supplementary services that are really",
    "start": "1780960",
    "end": "1787120"
  },
  {
    "text": "core and essential to building modern apps and looked at pub sub models with simple notification service and then the",
    "start": "1787120",
    "end": "1794240"
  },
  {
    "text": "reliable delivery point-to-point model of sqs and how these can be simply tied together so both of those",
    "start": "1794240",
    "end": "1800720"
  },
  {
    "text": "services are really cost effective they're highly scalable they're reliable and you can do simple things just to",
    "start": "1800720",
    "end": "1806159"
  },
  {
    "text": "persist in your cloud watch events to doing inter-application pub sub kind of models with a persistent",
    "start": "1806159",
    "end": "1812480"
  },
  {
    "text": "backbone when you put those things together i've looked at some tips and tricks on how you can use",
    "start": "1812480",
    "end": "1817760"
  },
  {
    "text": "s3 to produce some pseudo dynamic content and i've also touched upon dynamodb as a",
    "start": "1817760",
    "end": "1824399"
  },
  {
    "text": "nosql key value store essentially where the value part of that key is a json",
    "start": "1824399",
    "end": "1830799"
  },
  {
    "text": "block and how you can look at the tables within the dynamodb table explorer within the console",
    "start": "1830799",
    "end": "1838159"
  },
  {
    "text": "so hopefully given you some ideas um introduced you to some handy services sns and sqs",
    "start": "1838159",
    "end": "1844399"
  },
  {
    "text": "and when you go and download that cloud formation template hopefully it'll give you some ideas on how you can use that to produce these",
    "start": "1844399",
    "end": "1850960"
  },
  {
    "text": "dynamic multi-part systems with some quite some elements",
    "start": "1850960",
    "end": "1856080"
  },
  {
    "text": "so once again view the video at the youtube link shown there so what you do after this",
    "start": "1856080",
    "end": "1861919"
  },
  {
    "text": "for the next 10 minutes is have a look at that video see exactly what i've been talking about in action",
    "start": "1861919",
    "end": "1867200"
  },
  {
    "text": "you will then download those cloud formation templates you'll be able to do the system yourself you better pull it apart and hopefully",
    "start": "1867200",
    "end": "1873600"
  },
  {
    "text": "then you're going to take some of those patterns and use them or come across a problem space in the future you'll have a reference point in",
    "start": "1873600",
    "end": "1880240"
  },
  {
    "text": "order to be able to solve it so as ever find out more at aws.amazon.com",
    "start": "1880240",
    "end": "1885679"
  },
  {
    "text": "thanks very much for tuning in to this webinar today and have a good day",
    "start": "1885679",
    "end": "1893840"
  }
]