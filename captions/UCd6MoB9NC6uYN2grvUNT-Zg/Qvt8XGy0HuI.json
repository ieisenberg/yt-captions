[
  {
    "start": "0",
    "end": "110000"
  },
  {
    "text": "good afternoon everyone I hope you're enjoying your time here at the AWS public sectors summit my name is Jorge",
    "start": "199",
    "end": "7410"
  },
  {
    "text": "mal I'm a specialist Solutions Architect at AWS I've been with the company for about three years and it's my job to",
    "start": "7410",
    "end": "14099"
  },
  {
    "text": "help our customers build solutions on the AWS platform all without no servers",
    "start": "14099",
    "end": "19170"
  },
  {
    "text": "so Wayne and I'm Wayne Seager I am currently a solution architect at",
    "start": "19170",
    "end": "25529"
  },
  {
    "text": "dynaTrace been there for a number of years and I'm currently working with our customers basically taking them on the",
    "start": "25529",
    "end": "31500"
  },
  {
    "text": "journey of moving their software from the monolithic type of architectures",
    "start": "31500",
    "end": "36510"
  },
  {
    "text": "that they have and are very prevalent in the enterprise and getting them into a cloud-based and eventually to a you know",
    "start": "36510",
    "end": "42120"
  },
  {
    "text": "a serverless type of architecture cool thanks man so let me get started so what",
    "start": "42120",
    "end": "48960"
  },
  {
    "text": "we're gonna do here today is we're gonna talk about the evolution of service computing and then we're going to talk",
    "start": "48960",
    "end": "54809"
  },
  {
    "text": "about how service computing can help you move from a microbes from a monolith architecture towards a microbe based",
    "start": "54809",
    "end": "61140"
  },
  {
    "text": "micro service based architecture and then Wayne is gonna give you an overview of the dynaTrace platform and show you",
    "start": "61140",
    "end": "67110"
  },
  {
    "text": "how dynaTrace can help you along that path so first question we have the",
    "start": "67110",
    "end": "72240"
  },
  {
    "text": "answer is what is service so over the last decade right computing has been involving into higher and higher levels",
    "start": "72240",
    "end": "79799"
  },
  {
    "text": "of abstraction right we used to have to worry about in our data centers they have to worry about capacity and servers",
    "start": "79799",
    "end": "86280"
  },
  {
    "text": "and infrastructure and as we moved into the cloud we're able to deploy that capacity rapidly and get that capacity",
    "start": "86280",
    "end": "93180"
  },
  {
    "text": "almost instantly now as we move into server list as we evolve into the server this world we're able to run your",
    "start": "93180",
    "end": "99299"
  },
  {
    "text": "applications without ever thinking about servers now you're developers can focus on building that business logic and then",
    "start": "99299",
    "end": "105570"
  },
  {
    "text": "deploying that out to your cloud providers like AWS so raise your hand if",
    "start": "105570",
    "end": "111450"
  },
  {
    "start": "110000",
    "end": "110000"
  },
  {
    "text": "you've ever had to manage a server or fleet of servers before yeah so that's like over half of the room so basically",
    "start": "111450",
    "end": "120119"
  },
  {
    "text": "you know that owning servers means that you own the life cycle of your instances right you own the operating system you",
    "start": "120119",
    "end": "126600"
  },
  {
    "text": "own the patching you own all the network details infrastructure everything behind the scenes to keep your systems",
    "start": "126600",
    "end": "132060"
  },
  {
    "text": "operational so you also own the provisioning and utilization so that means that you have",
    "start": "132060",
    "end": "137520"
  },
  {
    "text": "to understand how many instances you want to run then ever the types of instances you want to run and the end of",
    "start": "137520",
    "end": "143489"
  },
  {
    "text": "the day what they answer the question you're trying to answer is could you have run less to save on cost I sort of",
    "start": "143489",
    "end": "149819"
  },
  {
    "text": "when you're running an AWS we have a service called auto scaling groups that can help you with that and dynamically scale up and down so as",
    "start": "149819",
    "end": "157140"
  },
  {
    "text": "we talk about scaling servers means that you have to understand and put logic in",
    "start": "157140",
    "end": "163110"
  },
  {
    "text": "place that this that helps you decide where to place your your work right how busy it is you want to keep your",
    "start": "163110",
    "end": "169230"
  },
  {
    "text": "instances and how much workload you want to keep running actively across your your server fleet and then as with any",
    "start": "169230",
    "end": "175459"
  },
  {
    "text": "production application you have to build in high availability durability and",
    "start": "175459",
    "end": "180510"
  },
  {
    "text": "fault tolerance from ground up from day one anything goes into production needs to be as highly available as possible",
    "start": "180510",
    "end": "186330"
  },
  {
    "text": "right so if we rewind back to the 1990s right we always had the provision our",
    "start": "186330",
    "end": "193590"
  },
  {
    "start": "189000",
    "end": "189000"
  },
  {
    "text": "data centers all the way to the maximum demand that we think we needed and that's because it took it could take",
    "start": "193590",
    "end": "199530"
  },
  {
    "text": "weeks months maybe even multiple months to get that capacity right now as we",
    "start": "199530",
    "end": "204570"
  },
  {
    "text": "moved into the cloud we got we're able to get that capacity really quickly we",
    "start": "204570",
    "end": "211170"
  },
  {
    "text": "still need to manage that capacity right you don't have to manage a physical infrastructure you have to manage all the things that we spoke about earlier",
    "start": "211170",
    "end": "217280"
  },
  {
    "text": "in the previous slide so now is it moving to serverless your developers can simply focus on your",
    "start": "217280",
    "end": "224940"
  },
  {
    "text": "business logic that matters to your business and what this means is that it's really driving down the time to",
    "start": "224940",
    "end": "230640"
  },
  {
    "text": "market for all of your applications right when I was developing applications employing them to the physical data",
    "start": "230640",
    "end": "236100"
  },
  {
    "text": "centers I was thinking about the point development cycles that lasted you know",
    "start": "236100",
    "end": "241370"
  },
  {
    "text": "months and sometimes years right and now you with serverless you can deploy your applications build",
    "start": "241370",
    "end": "246780"
  },
  {
    "text": "them in weeks and sometimes even just dates so one thing to keep in mind you",
    "start": "246780",
    "end": "253680"
  },
  {
    "text": "know as we're moving into the server this world it's also changing the way we're building our applications right so",
    "start": "253680",
    "end": "260370"
  },
  {
    "text": "we're not under building these huge monolith applications right so we're building smaller applications that are",
    "start": "260370",
    "end": "266280"
  },
  {
    "text": "micros service-based that can be deployed across multiple different instances on the backend right so that's why AWS",
    "start": "266280",
    "end": "274830"
  },
  {
    "start": "273000",
    "end": "273000"
  },
  {
    "text": "launched a service called AWS lambda and lambda is a compute service that helps",
    "start": "274830",
    "end": "280050"
  },
  {
    "text": "you run your code without ever thinking about your servers so what you do is you write your application code provide it",
    "start": "280050",
    "end": "286050"
  },
  {
    "text": "to AWS and we execute it for you in response to events right so what that",
    "start": "286050",
    "end": "292470"
  },
  {
    "text": "means is we move the unit of scale away from a per instance or per host level to",
    "start": "292470",
    "end": "298020"
  },
  {
    "text": "a per request level so what that means is every land of function is acting as a micro service and servicing a specific",
    "start": "298020",
    "end": "305100"
  },
  {
    "text": "business need right you no longer have any idle so with lambda the best thing the best part about lambda is that you",
    "start": "305100",
    "end": "312120"
  },
  {
    "text": "only pay when your land of functions are up and executing now you're not paying for storage you don't pay when your land",
    "start": "312120",
    "end": "317640"
  },
  {
    "text": "of functions aren't doing anything you're paying some specificity specifically to the delivery of business",
    "start": "317640",
    "end": "323160"
  },
  {
    "text": "value right so has anybody written a lambda function before probably 20% of",
    "start": "323160",
    "end": "330330"
  },
  {
    "text": "the room how about who owns an Alexa device or dot echo dot Alexa echo show",
    "start": "330330",
    "end": "337170"
  },
  {
    "text": "so more like 70% of room right so those skills behind the scenes you know when you say Alexa what is the weather today",
    "start": "337170",
    "end": "344820"
  },
  {
    "text": "most of those skills are actually powered by a Tobias lambda functions you can go in there spin up your developer",
    "start": "344820",
    "end": "351270"
  },
  {
    "text": "toolkit and then just create your own skills or you can say Alexa tell me about my Amazon environment you can just",
    "start": "351270",
    "end": "357690"
  },
  {
    "text": "spit out and whatever it is you want it to spit out so let's talk about how",
    "start": "357690",
    "end": "363960"
  },
  {
    "start": "363000",
    "end": "363000"
  },
  {
    "text": "lambda works right it's actually a very simple programming model it's just based off in an idea that you can call a",
    "start": "363960",
    "end": "369720"
  },
  {
    "text": "lambda function or you can have it automatically react to an event right and that event could be a change in data",
    "start": "369720",
    "end": "376500"
  },
  {
    "text": "state so for example you might have a record that gets inserted in the dynamo dB and you want to perform some kind of",
    "start": "376500",
    "end": "382830"
  },
  {
    "text": "action on that right but you don't want to have a huge fleet of ec2 instances that are polling your DynamoDB table for",
    "start": "382830",
    "end": "389640"
  },
  {
    "text": "changes right you can have lambda functions spin up react to that insert and then do something with that data",
    "start": "389640",
    "end": "395030"
  },
  {
    "text": "massage the payload and then put it somewhere else right or it",
    "start": "395030",
    "end": "400200"
  },
  {
    "text": "a request made to an endpoint so you could have an API gateway endpoints stood up when you have a message that",
    "start": "400200",
    "end": "406350"
  },
  {
    "text": "pushes into your API gateway you can have it invoke a lambda function perform some kind of business logic on the API",
    "start": "406350",
    "end": "413040"
  },
  {
    "text": "call that one of your customers or your clients has has made and the last event",
    "start": "413040",
    "end": "418350"
  },
  {
    "text": "source is something called a change in a resource State so a change in a resource State for example is like when a user or",
    "start": "418350",
    "end": "424980"
  },
  {
    "text": "a customer uploads an object into s3 right and you want to do something you want to react to that upload so a",
    "start": "424980",
    "end": "431850"
  },
  {
    "text": "traditional applications like FTP based applications you drop a lot of files on on basically folders and you have these",
    "start": "431850",
    "end": "441150"
  },
  {
    "text": "polling some eken isms that are that detect files and you want to react to that instead of doing that you can have",
    "start": "441150",
    "end": "446790"
  },
  {
    "text": "changes in resource state that invoke lambda functions spin up your micro service perform the necessary actions on",
    "start": "446790",
    "end": "453750"
  },
  {
    "text": "those files and shut down and go away so land of functions can be written in your",
    "start": "453750",
    "end": "459000"
  },
  {
    "text": "favorite programming language any one of these five languages and within atlanta function you can do anything you want",
    "start": "459000",
    "end": "465090"
  },
  {
    "text": "you can invoke an AWS sdk you can invoke a third party API you could talk to",
    "start": "465090",
    "end": "470670"
  },
  {
    "text": "something in your VPS sees you know you can query your RDS databases pretty much anything you can do today with any one",
    "start": "470670",
    "end": "477120"
  },
  {
    "text": "of these programming languages you can do within lambda right so now what's",
    "start": "477120",
    "end": "483960"
  },
  {
    "text": "most important is as you're building a land of functions because they're there they only spin up and execute when when",
    "start": "483960",
    "end": "490230"
  },
  {
    "text": "needed you can build really scalable fault tolerant but also cost-effective applications right so now back to",
    "start": "490230",
    "end": "499950"
  },
  {
    "text": "splitting up your monolith right so the goal in in microservice architecture is",
    "start": "499950",
    "end": "505680"
  },
  {
    "text": "you want to break up your monolith application into micro service based components and each component should",
    "start": "505680",
    "end": "512219"
  },
  {
    "text": "essentially represent some kind of service that you're trying to provide we're trying to sell we trying to host",
    "start": "512220",
    "end": "518700"
  },
  {
    "text": "right and each of these components should have a way of communicating with each other all right so your",
    "start": "518700",
    "end": "524580"
  },
  {
    "text": "micro-services shouldn't be siloed micro services that only perform their own work and have no way of moving towards",
    "start": "524580",
    "end": "530580"
  },
  {
    "text": "an end goal so your micro services typically today communicate with each other through a",
    "start": "530580",
    "end": "535590"
  },
  {
    "text": "lightweight lightweight payload format such as rest JSON sometimes XML we still",
    "start": "535590",
    "end": "541470"
  },
  {
    "text": "have communication formats using XML so communication remember is important",
    "start": "541470",
    "end": "546990"
  },
  {
    "text": "between micro-services don't build them that so that there's silo two away from each other right so AWS has multiple",
    "start": "546990",
    "end": "556950"
  },
  {
    "text": "different services available in the service platform that can help you create your micro service architecture",
    "start": "556950",
    "end": "562740"
  },
  {
    "text": "and your own platform and the lambda lambda service act kind of is the",
    "start": "562740",
    "end": "568020"
  },
  {
    "text": "compute service that acts as the business logic that can connect all of your applications together right it can",
    "start": "568020",
    "end": "574320"
  },
  {
    "text": "it acts as the glue between all of your applications all of your programming languages can be put into lambda",
    "start": "574320",
    "end": "579750"
  },
  {
    "text": "deployed and then executed as needed in response to business business demand and",
    "start": "579750",
    "end": "585180"
  },
  {
    "text": "business needs right so let's take a look at some examples here the first",
    "start": "585180",
    "end": "591000"
  },
  {
    "text": "example is you might be building a you might be using Amazon API gateway to",
    "start": "591000",
    "end": "597690"
  },
  {
    "text": "easily create rest endpoints and ap is that's a very common thing that that software vendors are doing today right",
    "start": "597690",
    "end": "605130"
  },
  {
    "text": "so within these api's as you push messages through your api's you",
    "start": "605130",
    "end": "610830"
  },
  {
    "text": "typically need to perform some business logic on these messages as they come through before you can push these",
    "start": "610830",
    "end": "616320"
  },
  {
    "text": "messages to your downstream service so in this example we have an it message coming in through API gateway it gets",
    "start": "616320",
    "end": "623040"
  },
  {
    "text": "pushed into sqs but what we're gonna do is use lambda functions to react to",
    "start": "623040",
    "end": "628110"
  },
  {
    "text": "those messages verify them maybe remove sensitive information check the validity",
    "start": "628110",
    "end": "634260"
  },
  {
    "text": "of the message and then push it to your downstream service right so let's move",
    "start": "634260",
    "end": "640110"
  },
  {
    "text": "on to another example in the second example is of all about data persistence",
    "start": "640110",
    "end": "645720"
  },
  {
    "text": "right today you typically applications typically need to persist data to one or more data",
    "start": "645720",
    "end": "651780"
  },
  {
    "text": "sources right so as messages flows through the same API you might have a requirement in your applications that",
    "start": "651780",
    "end": "658290"
  },
  {
    "text": "says I want to persist my data to a transactional database like dynamodb at",
    "start": "658290",
    "end": "664080"
  },
  {
    "text": "the same time I want to push it also to a time streaming service like Kinesis but",
    "start": "664080",
    "end": "670610"
  },
  {
    "text": "you also might need to persist data to a analytical database such as Amazon redshift right so with a Monmouth",
    "start": "670610",
    "end": "677450"
  },
  {
    "text": "application is difficult to do that because you have all of these libraries all these requirements all this",
    "start": "677450",
    "end": "683000"
  },
  {
    "text": "application code I need to go into one huge package so instead of doing that you can use lambda functions and micro",
    "start": "683000",
    "end": "689390"
  },
  {
    "text": "service based architecture to each do its own task I each would perform its",
    "start": "689390",
    "end": "694970"
  },
  {
    "text": "individual task execute that task spin up and shutdown and go away and have no cost when there's no no no business work",
    "start": "694970",
    "end": "703100"
  },
  {
    "text": "to be done and so let's take a look at our last example here so in this example",
    "start": "703100",
    "end": "711190"
  },
  {
    "text": "this is about workflow management right so a lot of our applications today allow",
    "start": "711190",
    "end": "716210"
  },
  {
    "text": "users to upload files write objects and for example you may have you may be",
    "start": "716210",
    "end": "721940"
  },
  {
    "text": "building a social media application that allows you just to upload images and photos the first thing you need to do is",
    "start": "721940",
    "end": "729080"
  },
  {
    "text": "be able to store those images and photos and you might be using s3 to do that or some other data store but before you",
    "start": "729080",
    "end": "734630"
  },
  {
    "text": "store those photos you have to create different thumbnails different resolutions that can be deployed to you",
    "start": "734630",
    "end": "741020"
  },
  {
    "text": "know all sorts of different devices or you may be creating 1015 different resolutions of the same image maybe you",
    "start": "741020",
    "end": "746570"
  },
  {
    "text": "have to create snippets and screenshots of all your videos that are coming in right each of these tasks requires",
    "start": "746570",
    "end": "753770"
  },
  {
    "text": "different libraries different dependencies and all of these require different resources and it takes",
    "start": "753770",
    "end": "759820"
  },
  {
    "text": "execution of these tasks for example editing and processing and compressing of video will take much longer than",
    "start": "759820",
    "end": "766190"
  },
  {
    "text": "simply resizing a photo right so if you were to create this huge monolith",
    "start": "766190",
    "end": "772010"
  },
  {
    "text": "application that bundles all of this work loaded and dependencies together number one the application will be",
    "start": "772010",
    "end": "778070"
  },
  {
    "text": "probably a very massive deployment binary right number two as your user",
    "start": "778070",
    "end": "783530"
  },
  {
    "text": "base scales how do you scale that monolith application you create copies of it you deploy it into multiple",
    "start": "783530",
    "end": "789560"
  },
  {
    "text": "servers and then sharted up across a load balancer right so in micro service",
    "start": "789560",
    "end": "794570"
  },
  {
    "text": "based architecture you can have a lambda function that's responsible for each one of these tasks",
    "start": "794570",
    "end": "800030"
  },
  {
    "text": "right and as your user base grows maybe the image upload feature is more popular than the video upload feature and you",
    "start": "800030",
    "end": "806690"
  },
  {
    "text": "can just scale that single service by itself right or you find a bug in your",
    "start": "806690",
    "end": "813110"
  },
  {
    "text": "video processing service and you need to replace the library that's processing your videos right so you can go in there",
    "start": "813110",
    "end": "818690"
  },
  {
    "text": "and easily replace that library without affecting any of your other applications",
    "start": "818690",
    "end": "824180"
  },
  {
    "text": "that are up and running scaling becomes easy it's cost effective and you don't have to worry about you",
    "start": "824180",
    "end": "829670"
  },
  {
    "text": "know where your traffic and your your user base growth is going to be when you're actually building your",
    "start": "829670",
    "end": "835220"
  },
  {
    "text": "applications so one last thing that keep in mind you know when you're building applications micro-services especially",
    "start": "835220",
    "end": "842570"
  },
  {
    "text": "ones that are running on lambda is that these lando functions are basically ephemeral right so what that means is",
    "start": "842570",
    "end": "849440"
  },
  {
    "text": "when you're spinning up your lambda functions when a of us execute the lambda function all the work that's",
    "start": "849440",
    "end": "855380"
  },
  {
    "text": "being done it only lives during the execution of that lambda function right",
    "start": "855380",
    "end": "861050"
  },
  {
    "text": "so if you have any data persistence and needs to live beyond the lambda function you should persist it to a long-term",
    "start": "861050",
    "end": "866060"
  },
  {
    "text": "data store DynamoDB RDS or any data store that you're using but as your land",
    "start": "866060",
    "end": "871250"
  },
  {
    "text": "of functions shut down everything will go away right so one so the major not",
    "start": "871250",
    "end": "876320"
  },
  {
    "text": "paying for idle but you also have to have to take your data and make sure it's persisted to a store that's",
    "start": "876320",
    "end": "883010"
  },
  {
    "text": "external to the lambda service all right so that's a pretty good overview of",
    "start": "883010",
    "end": "889000"
  },
  {
    "text": "microservices with lambda and a wayne is going to give you an overview of the database platform",
    "start": "889000",
    "end": "895870"
  },
  {
    "text": "all right thanks George and thanks again for the great overview on the server",
    "start": "897670",
    "end": "903110"
  },
  {
    "text": "list side so what we're gonna talk about now is how you actually can get there so",
    "start": "903110",
    "end": "909100"
  },
  {
    "text": "as anybody let's do a raise of hands here how many people have actually heard of dynaTrace or maybe of using it okay",
    "start": "909100",
    "end": "916160"
  },
  {
    "text": "so good percentage of the room so there's a couple facts up here and I'm",
    "start": "916160",
    "end": "921320"
  },
  {
    "text": "not going to read through all of them a dynaTrace is a you've been around for a while in the monitoring space focusing",
    "start": "921320",
    "end": "927080"
  },
  {
    "text": "now a lot on the AI based monitoring front and as you can see we've been",
    "start": "927080",
    "end": "932089"
  },
  {
    "text": "doing this a while have a lot of customers in space and we are also a Amazon partner",
    "start": "932089",
    "end": "937370"
  },
  {
    "text": "and we also run our own SAS based workloads on AWS as well so but the very",
    "start": "937370",
    "end": "943639"
  },
  {
    "text": "fact that we've actually been around for a little while we've had a product that was a monolithic type of application and",
    "start": "943639",
    "end": "951019"
  },
  {
    "text": "it worked very well for monitoring monolithic applications but going to the",
    "start": "951019",
    "end": "956750"
  },
  {
    "text": "type of environments with micro services and other things in the cloud was something that it was not you know",
    "start": "956750",
    "end": "962569"
  },
  {
    "text": "optimized for as that's where we actually kind of reinvented ourselves and basically created our own little",
    "start": "962569",
    "end": "968930"
  },
  {
    "text": "digital transformation where we created our you know our own product and broke it apart almost like broke apart our own",
    "start": "968930",
    "end": "974600"
  },
  {
    "text": "monolith and that's a little bit about what we're going to talk about today and how that process that we had to go",
    "start": "974600",
    "end": "980209"
  },
  {
    "text": "through how we actually took a lot of those challenges and built them into features to help customers like",
    "start": "980209",
    "end": "985220"
  },
  {
    "text": "yourselves you know break apart your different application components so as",
    "start": "985220",
    "end": "990740"
  },
  {
    "text": "you can see what this is actually done is allowed us to turn you know turn ourselves into a company that can you",
    "start": "990740",
    "end": "996860"
  },
  {
    "text": "know change and commit code more frequently push out releases more frequently which are things that I think everybody is really trying to achieve",
    "start": "996860",
    "end": "1003220"
  },
  {
    "text": "but ultimately the faster you can write a feature or fix a bug and get it out to a customer that's the more beneficial",
    "start": "1003220",
    "end": "1008589"
  },
  {
    "text": "way to do it so some of the challenges",
    "start": "1008589",
    "end": "1014230"
  },
  {
    "start": "1011000",
    "end": "1011000"
  },
  {
    "text": "will start off with really the three challenges that go along with the kind of the migration path that customers run",
    "start": "1014230",
    "end": "1021279"
  },
  {
    "text": "into when they're trying to go and move into from the monolith and eventually get through micro services and and",
    "start": "1021279",
    "end": "1027788"
  },
  {
    "text": "server and server lists is the first question really is where exactly do you start and it's at that tends to really",
    "start": "1027789",
    "end": "1034270"
  },
  {
    "text": "be the big question is what is the dependencies so if you just want to move one thing you want to pick apart a couple components or move something",
    "start": "1034270",
    "end": "1040538"
  },
  {
    "text": "which area do you start and by doing so what are you going to impact you know what downstream refu impact you're gonna",
    "start": "1040539",
    "end": "1046900"
  },
  {
    "text": "have and that is very challenging at times to understand just in general how things are related in it in a large",
    "start": "1046900",
    "end": "1053110"
  },
  {
    "text": "environment so after you get to that next phase though and maybe you've",
    "start": "1053110",
    "end": "1058150"
  },
  {
    "text": "broken some things apart it comes really validation so now you have to actually validate that the application or the",
    "start": "1058150",
    "end": "1065620"
  },
  {
    "text": "things that you just rebuilt or we architected broken out into the different services are working as you design them to you",
    "start": "1065620",
    "end": "1071769"
  },
  {
    "text": "know is ultimately as the customer experience the same or better than what it was previously and is it scaling the",
    "start": "1071769",
    "end": "1079480"
  },
  {
    "text": "way that you actually anticipated it to and then finally as you get to the next phase on to the journey which is now",
    "start": "1079480",
    "end": "1086019"
  },
  {
    "text": "starting to utilize some of those services that that George was mentioning before you know API gateways dynamodb",
    "start": "1086019",
    "end": "1092110"
  },
  {
    "text": "lamda is you know is that working in in the in the function you you know",
    "start": "1092110",
    "end": "1097330"
  },
  {
    "text": "designed it to and how exactly do you go about automating that and how do you go about visualizing that because now again",
    "start": "1097330",
    "end": "1103750"
  },
  {
    "text": "you're kind of giving away pieces of the architecture that you're used to owning you know like databases and stuff and",
    "start": "1103750",
    "end": "1109059"
  },
  {
    "text": "now you're going to be kind of giving that away so how do you visualize that in your whole topology and how do you continue to monitor that in one dynamic",
    "start": "1109059",
    "end": "1116289"
  },
  {
    "text": "view and so this is actually a view from from dynaTrace that actually breaks down",
    "start": "1116289",
    "end": "1121299"
  },
  {
    "text": "and why we say you know full stack and what our what we call our one agent technology actually does so if you",
    "start": "1121299",
    "end": "1127990"
  },
  {
    "text": "actually take a look and I'll highlight some of this for you is we try to do this at the basically at the full layer",
    "start": "1127990",
    "end": "1134620"
  },
  {
    "text": "all the way starting up at the application going through the different services that the application ultimately",
    "start": "1134620",
    "end": "1139779"
  },
  {
    "text": "talks to and then down into the infrastructure layer of the processes the containers into the actual physical",
    "start": "1139779",
    "end": "1146259"
  },
  {
    "text": "infrastructure for using ec2 or something like that and then finally down into the data center level or in",
    "start": "1146259",
    "end": "1152110"
  },
  {
    "text": "many cases the AWS availability zone and so this is just some snippets here of",
    "start": "1152110",
    "end": "1157240"
  },
  {
    "text": "the data that gets present or what you would expect along the route there which up at the application top is being able",
    "start": "1157240",
    "end": "1163509"
  },
  {
    "text": "to see how well when this when a customer goes to let's say a web application or a mobile application how",
    "start": "1163509",
    "end": "1169149"
  },
  {
    "text": "is that page actually load is it actually performing the way you anticipate and then when it talks to all",
    "start": "1169149",
    "end": "1175120"
  },
  {
    "text": "the back-end services that actually make up that page maybe it's a single page application that just making xhr calls",
    "start": "1175120",
    "end": "1180879"
  },
  {
    "text": "how are those services reacting in the backend and then finally when you get down to the infrastructure level is how",
    "start": "1180879",
    "end": "1188080"
  },
  {
    "text": "is that scaling out you know in this case here you're running multiple processes multiple containers how many",
    "start": "1188080",
    "end": "1193419"
  },
  {
    "text": "do you need to run and so this is just type of view that that that we felt was very important to provide to customers",
    "start": "1193419",
    "end": "1199720"
  },
  {
    "text": "and that we were wired when we were going through our little journey is to have that full view from the actual end user of the",
    "start": "1199720",
    "end": "1206970"
  },
  {
    "text": "application through all the different layers at the transaction that he that he or she will commit goes through and",
    "start": "1206970",
    "end": "1212249"
  },
  {
    "text": "ultimately down into the data center level so how is it that you know we",
    "start": "1212249",
    "end": "1218489"
  },
  {
    "start": "1216000",
    "end": "1216000"
  },
  {
    "text": "applied some of the dynaTrace principles to these different challenges and so the first area when we talk about what it is",
    "start": "1218489",
    "end": "1225659"
  },
  {
    "text": "and getting your dependencies together and I'll see a picture of this in the next slide is our dynaTrace smart scape",
    "start": "1225659",
    "end": "1232200"
  },
  {
    "text": "and our smart scape is actually designed to give you a virtual blueprint at all the different levels the applications",
    "start": "1232200",
    "end": "1238169"
  },
  {
    "text": "the services the the containers and processes and infrastructure all in one view and show you how things are",
    "start": "1238169",
    "end": "1244109"
  },
  {
    "text": "interconnected and make it searchable and filterable so you can actually see when one component there is when you",
    "start": "1244109",
    "end": "1251009"
  },
  {
    "text": "select one component what other things actually touch it now the second piece is weave is the validation point of how",
    "start": "1251009",
    "end": "1257820"
  },
  {
    "text": "do you determine things are working the way you anticipate and one of the things that we focused on was actually building",
    "start": "1257820",
    "end": "1263070"
  },
  {
    "text": "an AI component on to this to actually look for for problems or look for degradation to happen so if you think",
    "start": "1263070",
    "end": "1269009"
  },
  {
    "text": "about when you if your baselining your performance and your your health of a service or of your application stack",
    "start": "1269009",
    "end": "1275340"
  },
  {
    "text": "before you go to deploy or we are connect it what does it look like after and the AI actually can look for",
    "start": "1275340",
    "end": "1280980"
  },
  {
    "text": "differences and finally what we really focused on was now that you're gonna",
    "start": "1280980",
    "end": "1286230"
  },
  {
    "text": "start and you know you may say that you know your Oracle database that you're running on premise maybe you're gonna use RDS in the cloud and how how can you",
    "start": "1286230",
    "end": "1293909"
  },
  {
    "text": "visualize that in the same topology model because now you don't have the infrastructure anymore and that was",
    "start": "1293909",
    "end": "1298980"
  },
  {
    "text": "another focus of ours was to make sure that we're pulling in and actually taking those cloud services and putting them in context with your your",
    "start": "1298980",
    "end": "1305639"
  },
  {
    "text": "on-premise running services so this is a view here of our smart scape kind of a snapshot and what this allows you to do",
    "start": "1305639",
    "end": "1313230"
  },
  {
    "start": "1307000",
    "end": "1307000"
  },
  {
    "text": "is you know quote unquote t-shirt size you know small medium large extra large what your migration plan or what your",
    "start": "1313230",
    "end": "1319559"
  },
  {
    "text": "strategy would be around a single application here so if we look at this",
    "start": "1319559",
    "end": "1324899"
  },
  {
    "text": "example here we just kind of have a tomcat service but you can see that there's actually many different endpoints it's dropping things into",
    "start": "1324899",
    "end": "1331289"
  },
  {
    "text": "queues it's getting requests in webrick wise and it's scaled out across four",
    "start": "1331289",
    "end": "1336590"
  },
  {
    "text": "different instances across a couple hosts and we can actually even look at these different views here and see which machines are you know dependent upon",
    "start": "1336590",
    "end": "1343670"
  },
  {
    "text": "each other so kind of like a two interesting examples real world of where",
    "start": "1343670",
    "end": "1348740"
  },
  {
    "text": "we've run into this becoming in a second you know necessity is we actually had",
    "start": "1348740",
    "end": "1355850"
  },
  {
    "text": "you know an old Atlassian kind of JIRA instance that we had since our company really was founded and so just we've had",
    "start": "1355850",
    "end": "1362360"
  },
  {
    "text": "it there and it's kind of just grown ever since so he wanted to just lift it and shift it and move it into the cloud",
    "start": "1362360",
    "end": "1367429"
  },
  {
    "text": "we didn't have to deal with just running the server hardware anymore and so one",
    "start": "1367429",
    "end": "1373730"
  },
  {
    "text": "of the the back-end databases for it though and it cuz it's a very simple component it kind of just has a front end kind of Java tier and then there's a",
    "start": "1373730",
    "end": "1380510"
  },
  {
    "text": "back-end database to it and so we were just gonna kind of move it out to an RDS",
    "start": "1380510",
    "end": "1385760"
  },
  {
    "text": "instance and make sure that the main application server of JIRA actually could just talk to it that was really gonna be it when we actually put on our",
    "start": "1385760",
    "end": "1393830"
  },
  {
    "text": "one agent onto the machine that was hosting the database and we looked at the database services and a couple other",
    "start": "1393830",
    "end": "1400730"
  },
  {
    "text": "things in the environment what we saw was there was actually a ton of services out there that were connecting directly",
    "start": "1400730",
    "end": "1406490"
  },
  {
    "text": "to our database the basically the JIRA database because that was the source of",
    "start": "1406490",
    "end": "1411650"
  },
  {
    "text": "where you can get information so somebody just decided I needed to get you know information on tickets that maybe the GUI or something wasn't",
    "start": "1411650",
    "end": "1418400"
  },
  {
    "text": "providing me or I needed to get data for some other application and so I I wrote something and I'm talking to that",
    "start": "1418400",
    "end": "1424700"
  },
  {
    "text": "database well now if I go and pick that up that database up move it out to the cloud and I didn't even know to tell the",
    "start": "1424700",
    "end": "1429770"
  },
  {
    "text": "owner of that other application about that well that would not work on Monday morning after the the migration so this",
    "start": "1429770",
    "end": "1435320"
  },
  {
    "text": "was actually something here that it sounded very simple on paper but once we actually got into the details and just",
    "start": "1435320",
    "end": "1440420"
  },
  {
    "text": "started looking at just some of the real-time data that was actually flowing there became a lot more difficult another example was from one of my",
    "start": "1440420",
    "end": "1448280"
  },
  {
    "text": "customers a large bank and all they wanted to do was upgrade a database",
    "start": "1448280",
    "end": "1453679"
  },
  {
    "text": "instance they were running an older version of db2 they just wanted to upgrade it to another version so they weren't even actually going through and",
    "start": "1453679",
    "end": "1459610"
  },
  {
    "text": "migrating anything just as simple as an upgrade but of course with an upgrade you're gonna have downtime and potential",
    "start": "1459610",
    "end": "1465260"
  },
  {
    "text": "data loss if things get trans acted so you want to not allow for transactions so you pick a time that",
    "start": "1465260",
    "end": "1470680"
  },
  {
    "text": "makes sense but the problem was initially without looking at you know this type of data here and seeing the",
    "start": "1470680",
    "end": "1476980"
  },
  {
    "text": "dependencies mapped for them they did not know which applications needed to basically put a black out splash page",
    "start": "1476980",
    "end": "1483250"
  },
  {
    "text": "there so somebody couldn't try to commit like a wire transfer commit a trade or something that would require interaction",
    "start": "1483250",
    "end": "1488410"
  },
  {
    "text": "with that database that ultimately could get lost because it was going through a maintenance in an upgrade so being able",
    "start": "1488410",
    "end": "1494320"
  },
  {
    "text": "to just see how dependencies interact is it pretty important and that's that's where our smart escape comes in so the",
    "start": "1494320",
    "end": "1501790"
  },
  {
    "text": "next phase is now talking to how exactly do you want to break up if you're back to like your monolith how are you gonna",
    "start": "1501790",
    "end": "1507700"
  },
  {
    "text": "break that apart into the varying different components like what where do you start which areas which services",
    "start": "1507700",
    "end": "1514240"
  },
  {
    "text": "inside do you need to look at so if you think about like a simple transaction flow of like you know your typical",
    "start": "1514240",
    "end": "1519850"
  },
  {
    "text": "monolith you'd have a web server in front like we have here and then you would have kind of maybe the the",
    "start": "1519850",
    "end": "1525010"
  },
  {
    "text": "monolith itself so think of it like maybe like WebLogic WebSphere JBoss or some sort of dotnet service and inside",
    "start": "1525010",
    "end": "1533200"
  },
  {
    "text": "of there there's probably many service components in there it might be web there might be hosting different application different war files you know",
    "start": "1533200",
    "end": "1539380"
  },
  {
    "text": "might be a web service might be a web request service running in there and that they and they may all interact with",
    "start": "1539380",
    "end": "1544690"
  },
  {
    "text": "each other but you don't really see that you just see that transactions come out of the web server they go inside of the",
    "start": "1544690",
    "end": "1550750"
  },
  {
    "text": "the JVM that does things they interact with each other and maybe then make external calls out to databases or other",
    "start": "1550750",
    "end": "1555910"
  },
  {
    "text": "services well what we focused on with with dynaTrace was being able to automatically detect those different",
    "start": "1555910",
    "end": "1562990"
  },
  {
    "text": "services so even though it's all running within the same you know the same JVM here but being able to see if you have",
    "start": "1562990",
    "end": "1568930"
  },
  {
    "text": "different web services running there and if they're interacting with each other and that's actually what you're seeing here is we actually in one of our",
    "start": "1568930",
    "end": "1577320"
  },
  {
    "text": "monolithic JVMs here we had you know a booking service a journey service has been a configuration service a whole",
    "start": "1577320",
    "end": "1583540"
  },
  {
    "text": "bunch of other things inside of there they're they're all interacting when somebody actually goes to a web site and",
    "start": "1583540",
    "end": "1589210"
  },
  {
    "text": "I and actually were to interact that you know they're hitting all of these different services and what we also",
    "start": "1589210",
    "end": "1594660"
  },
  {
    "text": "wanted to know was how tightly coupled these different components are because you remember if you're going to decide",
    "start": "1594660",
    "end": "1601210"
  },
  {
    "text": "break them out into different services you need to make sure that how tightly coupled things are because remember",
    "start": "1601210",
    "end": "1607059"
  },
  {
    "text": "these are now in you know basically in memory calls they might be interacting as different service endpoints but",
    "start": "1607059",
    "end": "1613210"
  },
  {
    "text": "they're talking within the same the same machine they're on the same JVM they're essentially making in memory type calls",
    "start": "1613210",
    "end": "1618549"
  },
  {
    "text": "they're very fast but if you break that apart and put them on different machines out in the cloud where you don't even maybe not know where they're running",
    "start": "1618549",
    "end": "1624909"
  },
  {
    "text": "you're gonna have you're gonna be introducing latency so these are things you want to think about and whether you",
    "start": "1624909",
    "end": "1630250"
  },
  {
    "text": "want to actually break things apart in certain ways because if they're tightly coupled like in our example here where",
    "start": "1630250",
    "end": "1635710"
  },
  {
    "text": "almost every time somebody calls our journey service the check destination service will always get called well",
    "start": "1635710",
    "end": "1642190"
  },
  {
    "text": "you're already if you create latency there you're already gonna potentially slow down the transaction so maybe",
    "start": "1642190",
    "end": "1647200"
  },
  {
    "text": "that's something or these two components that you might not want to break up or you want to break it up a little bit differently so kind of just exploring",
    "start": "1647200",
    "end": "1655390"
  },
  {
    "text": "how you can do this is we looked at our service endpoints on our model if",
    "start": "1655390",
    "end": "1660820"
  },
  {
    "text": "they're so basically a model that consists typically of you have service endpoints where data comes in transactions come in then you have in",
    "start": "1660820",
    "end": "1667539"
  },
  {
    "text": "and of itself that's we looked at our service flow and then it makes external calls to databases and queues or other",
    "start": "1667539",
    "end": "1673840"
  },
  {
    "text": "services so that's exactly how we kind of visualized it and built it into into",
    "start": "1673840",
    "end": "1680169"
  },
  {
    "start": "1676000",
    "end": "1676000"
  },
  {
    "text": "dynaTrace here is actually showing you so if we look at our customer front-end the service that we just looked at in",
    "start": "1680169",
    "end": "1686169"
  },
  {
    "text": "the in the D in the basically in the summary view what you can see is we've got our web server that communicates in",
    "start": "1686169",
    "end": "1691960"
  },
  {
    "text": "and then we have how many instances of that we have running at any point in time so it's we know what machines it's",
    "start": "1691960",
    "end": "1698110"
  },
  {
    "text": "running on and we know what processes specifically what JVMs this whole service is dependent upon and",
    "start": "1698110",
    "end": "1703720"
  },
  {
    "text": "finally we know what this thing actually talks to outbound you know we know it's dropping messages on to queues we know",
    "start": "1703720",
    "end": "1709870"
  },
  {
    "text": "what they are we know that it's talking to a couple other services downstream so we have just a dependency information in",
    "start": "1709870",
    "end": "1715360"
  },
  {
    "text": "there now the next thing is you want to determine or we want to determine what exactly are the service endpoints",
    "start": "1715360",
    "end": "1721990"
  },
  {
    "start": "1716000",
    "end": "1716000"
  },
  {
    "text": "meaning what are the actual requests that are coming in to this to this monolith and then what ones are the most",
    "start": "1721990",
    "end": "1729100"
  },
  {
    "text": "expensive and by expensive what we mean are you know it consumed it tends to be the highest",
    "start": "1729100",
    "end": "1734350"
  },
  {
    "text": "low and which ones actually consumed the most CPU cycles so you might have ones",
    "start": "1734350",
    "end": "1740740"
  },
  {
    "text": "that are used very often but don't use a lot of CPU resourcing but then you might have the opposite which is not the ideal",
    "start": "1740740",
    "end": "1746860"
  },
  {
    "text": "effect which are ones that are used very sparingly but actually maybe consume a lot of CPU so those are things you want",
    "start": "1746860",
    "end": "1753490"
  },
  {
    "text": "to think about especially if you start moving into an environment where they're charging for things like that and maybe you want to think about reor",
    "start": "1753490",
    "end": "1759340"
  },
  {
    "text": "connecting or taking a look as to how you know why that consumes the way it does but now you at least have an",
    "start": "1759340",
    "end": "1764830"
  },
  {
    "text": "understanding of what the traffic patterns look like and what the resourcing gets consumed and which ones",
    "start": "1764830",
    "end": "1770530"
  },
  {
    "text": "are the most most what type of requests are the most popular so now what you",
    "start": "1770530",
    "end": "1776800"
  },
  {
    "start": "1775000",
    "end": "1775000"
  },
  {
    "text": "could do is if once you get your endpoints so we have all those drawn out is you can see the full flow of this so",
    "start": "1776800",
    "end": "1784150"
  },
  {
    "text": "you can actually see if we pick our our little filter up top there where we pay our one service endpoint and we say for",
    "start": "1784150",
    "end": "1790630"
  },
  {
    "text": "that service endpoint there when transactions come in where does it go and how often does it make those calls",
    "start": "1790630",
    "end": "1796750"
  },
  {
    "text": "and then give me some details about how what the round-trip time is between all of that so that I can at least validate",
    "start": "1796750",
    "end": "1803320"
  },
  {
    "text": "what it does today and we can go a little bit deeper now into this and we",
    "start": "1803320",
    "end": "1808510"
  },
  {
    "text": "can actually say you know endpoints could have a couple different types of requests maybe maybe if it's an API type request it could be doing gets it could",
    "start": "1808510",
    "end": "1814690"
  },
  {
    "text": "be doing posts I could be doing different things when it does that and the service flow could be different",
    "start": "1814690",
    "end": "1820210"
  },
  {
    "text": "depending on what it's doing so if it's getting data that might be doing one thing versus posting data it might be sending data off to a couple other",
    "start": "1820210",
    "end": "1826600"
  },
  {
    "text": "sources so you want to be able to filter that type of view as well and get the same service flow but then also be able",
    "start": "1826600",
    "end": "1833890"
  },
  {
    "text": "to see what interactions it has so if we kind of take a look back at what we just",
    "start": "1833890",
    "end": "1840130"
  },
  {
    "start": "1837000",
    "end": "1837000"
  },
  {
    "text": "what we just learned there by looking at the one one instance of our monolith is we know what our endpoints are and we",
    "start": "1840130",
    "end": "1846970"
  },
  {
    "text": "know what the throughput is so you now have an idea of what the traffic pattern coming in is you know which requests are",
    "start": "1846970",
    "end": "1852400"
  },
  {
    "text": "the most expensive and then you know how it flows through the different components inside internally inside of",
    "start": "1852400",
    "end": "1859450"
  },
  {
    "text": "your model with the app and then finally what calls it actually makes going outbound what databases it's dependent",
    "start": "1859450",
    "end": "1865450"
  },
  {
    "text": "upon what external services what message queues so you have all of that just by looking at that so kind of filling in the blanks",
    "start": "1865450",
    "end": "1871630"
  },
  {
    "text": "here so now the next question is where where do we want to determine these",
    "start": "1871630",
    "end": "1877300"
  },
  {
    "start": "1873000",
    "end": "1873000"
  },
  {
    "text": "different entry points so we have we know we've got different services in there maybe we want to experiment and",
    "start": "1877300",
    "end": "1884380"
  },
  {
    "text": "think about which you know which component in there could be a good entry point to break apart into its own little",
    "start": "1884380",
    "end": "1890890"
  },
  {
    "text": "service and if we did so how how would that react to certain things and so",
    "start": "1890890",
    "end": "1896470"
  },
  {
    "start": "1896000",
    "end": "1896000"
  },
  {
    "text": "within dynaTrace you can actually do this you can actually take a codes",
    "start": "1896470",
    "end": "1901560"
  },
  {
    "text": "basically a code sample here and actually use like CPU sampling to actually determine what is running live",
    "start": "1901560",
    "end": "1907930"
  },
  {
    "text": "on the CPU what code of yours is running live on the CPU at that time so what we see here is we've got we look we search",
    "start": "1907930",
    "end": "1914410"
  },
  {
    "text": "for you know our own package so our our web app in this case is called eztravel and so we just do a search for the",
    "start": "1914410",
    "end": "1920590"
  },
  {
    "text": "eztravel package and then we can find okay there's a there's an entry point they're called perform a booking so now",
    "start": "1920590",
    "end": "1928240"
  },
  {
    "text": "we can say well alright that's that could be an interesting service of performing a booking and that could be",
    "start": "1928240",
    "end": "1936000"
  },
  {
    "text": "dead lose my audio know them back so that could be something that we want to",
    "start": "1936000",
    "end": "1941200"
  },
  {
    "text": "break apart into its own little micro service and so to do this so maybe you",
    "start": "1941200",
    "end": "1948040"
  },
  {
    "start": "1946000",
    "end": "1946000"
  },
  {
    "text": "want to visualize how it's done you don't want to refactor your code and just determine and approve approve whether that works or not you want to",
    "start": "1948040",
    "end": "1954400"
  },
  {
    "text": "actually be able to see how that would react today and all you need to do in dynaTrace we've built this in to be able",
    "start": "1954400",
    "end": "1961300"
  },
  {
    "text": "to define a custom service or be able to define your own service is quite simply put in the name of the class select the",
    "start": "1961300",
    "end": "1967900"
  },
  {
    "text": "method or even it you can actually do a search and it will pull all that data back and do a live search for you and",
    "start": "1967900",
    "end": "1973150"
  },
  {
    "text": "say give me an entry point start start a service right there and that's an entry",
    "start": "1973150",
    "end": "1978430"
  },
  {
    "text": "point to to my service and once you do that you now can have your kind of full",
    "start": "1978430",
    "end": "1984640"
  },
  {
    "text": "view now where you can see all of these different service components here inside of one one one view and if we take a",
    "start": "1984640",
    "end": "1991240"
  },
  {
    "text": "look at how that looks kind of in dynaTrace now is you basically created an entry point",
    "start": "1991240",
    "end": "1997380"
  },
  {
    "text": "and that's kind of what it looks like live within dynaTrace so basically what you've actually done at that point is",
    "start": "1997750",
    "end": "2003930"
  },
  {
    "text": "you've virtually broken apart the monolith and as I said you know there's some tightly coupled services in there",
    "start": "2003930",
    "end": "2010350"
  },
  {
    "text": "oops I think I skipped a slide there so",
    "start": "2010350",
    "end": "2016410"
  },
  {
    "start": "2013000",
    "end": "2013000"
  },
  {
    "text": "yeah so as you can see wasting what happens is if you virtually break apart the monolith you can without changing",
    "start": "2016410",
    "end": "2024000"
  },
  {
    "text": "code without ever having to redeploy anything without ever having to re architect anything you can actually see",
    "start": "2024000",
    "end": "2029010"
  },
  {
    "text": "if you broke these components apart what would it look like what would your traffic patterns actually look like so",
    "start": "2029010",
    "end": "2038100"
  },
  {
    "start": "2038000",
    "end": "2038000"
  },
  {
    "text": "now going into the next area here is talking about the second piece which is",
    "start": "2038100",
    "end": "2043260"
  },
  {
    "text": "how do you validate different load scenarios so how do you validate that you know your your scalable architecture",
    "start": "2043260",
    "end": "2049050"
  },
  {
    "text": "that you're going to be building is scaling the way you anticipate is it actually running properly at peak load",
    "start": "2049050",
    "end": "2055560"
  },
  {
    "text": "is peak you know do you are you spinning up or scaling too many service instances to actually handle the load so maybe",
    "start": "2055560",
    "end": "2061020"
  },
  {
    "text": "you're paying more than you need to or vice versa is it not failing over properly as you expect it to",
    "start": "2061020",
    "end": "2066510"
  },
  {
    "text": "so using that whole smart scape view we looked at earlier you can look at that same service or any one of those services and see how many instances of",
    "start": "2066510",
    "end": "2073560"
  },
  {
    "text": "it you actually have running at any point in time and if any one is failing any one is can you know having running",
    "start": "2073560",
    "end": "2079620"
  },
  {
    "text": "into resourcing issues you can see that in real time and actually be able to react to it and determine if your",
    "start": "2079620",
    "end": "2084990"
  },
  {
    "text": "service was scaling properly and going into the we talked a little bit about",
    "start": "2084990",
    "end": "2090960"
  },
  {
    "start": "2087000",
    "end": "2087000"
  },
  {
    "text": "the AI and the base lining is you want to make sure that you know beforehand",
    "start": "2090960",
    "end": "2096000"
  },
  {
    "text": "before you make any changes or before you push out a new release that the code",
    "start": "2096000",
    "end": "2101640"
  },
  {
    "text": "is actually performing the same way the services are responding the same way there they're not failing and they're",
    "start": "2101640",
    "end": "2107550"
  },
  {
    "text": "also consuming the same amount of resources so if you look at the bottom box there when we look at basically the CPU that gets consumed on per",
    "start": "2107550",
    "end": "2114420"
  },
  {
    "text": "transaction on that service you want to make sure that you're staying within bounds and not consuming more resources",
    "start": "2114420",
    "end": "2119790"
  },
  {
    "text": "based on a release even though your response time and failure might be fine so this is what we actually like to call like the performance signature of a",
    "start": "2119790",
    "end": "2126240"
  },
  {
    "text": "release is basically looking at a couple different metrics like your response time to load ratios CPU research consultant Lu if a release",
    "start": "2126240",
    "end": "2136109"
  },
  {
    "text": "one if one release to the other actually you know is still performant and what we",
    "start": "2136109",
    "end": "2142410"
  },
  {
    "text": "can actually do with this we could take this even one step further and utilizing even some more of the Amazon services is",
    "start": "2142410",
    "end": "2149599"
  },
  {
    "text": "basically allow you to shift shift left and automating through your pipeline again the whole goal of why we would",
    "start": "2149599",
    "end": "2155250"
  },
  {
    "text": "want to move from the monolithic architecture to eventually getting into micro services and serverless",
    "start": "2155250",
    "end": "2160830"
  },
  {
    "text": "type of architectures is to be able to push out code and release it a lot faster and so with dynaTrace what you",
    "start": "2160830",
    "end": "2168840"
  },
  {
    "text": "can do is using and this is an example that we're gonna walk through here using AWS code deploy an database land and a",
    "start": "2168840",
    "end": "2177150"
  },
  {
    "text": "couple other functions here but let's just say we want to push a new build into staging here so what we'll do is",
    "start": "2177150",
    "end": "2183750"
  },
  {
    "text": "we'll say ok we're gonna push a new build in now what we're also gonna do is we're gonna have a lambda function fire off and tell dynaTrace hey we're just",
    "start": "2183750",
    "end": "2191400"
  },
  {
    "text": "pushing a new build out there here's some metadata about that build here's the build number associated with it",
    "start": "2191400",
    "end": "2196650"
  },
  {
    "text": "so dynaTrace will read that information so we say we're gonna push this new nodejs service out there here's some",
    "start": "2196650",
    "end": "2202140"
  },
  {
    "text": "build information with it and now now you're gonna kick off your tests that you would normally run against the build",
    "start": "2202140",
    "end": "2207710"
  },
  {
    "text": "well what you can do is dynaTrace has that before and after concept built into",
    "start": "2207710",
    "end": "2214170"
  },
  {
    "text": "it so it's gonna look for and detect regressions and it can actually fail",
    "start": "2214170",
    "end": "2219540"
  },
  {
    "text": "your build so now you don't have to sit there being you know it kind of like a manual performance tester and say ok",
    "start": "2219540",
    "end": "2225839"
  },
  {
    "text": "this new build came out let me validate my data after we ran a test you can actually have dynaTrace do that for you",
    "start": "2225839",
    "end": "2231599"
  },
  {
    "text": "and it can actually look at the data and actually determine based on the performance signature is the response",
    "start": "2231599",
    "end": "2237420"
  },
  {
    "text": "time greater under these conditions and you can have that that comparison done compared to you know production data as",
    "start": "2237420",
    "end": "2244109"
  },
  {
    "text": "well so as long as the i/o trace is capturing production data you can say let's compare the two so at that point",
    "start": "2244109",
    "end": "2250560"
  },
  {
    "text": "we'll determine whether that build was valid and so you see between build 6 and build 7 that you know our performance is",
    "start": "2250560",
    "end": "2257190"
  },
  {
    "text": "fine or at least our performance signature approves so now we say ok let's move that to production and by the",
    "start": "2257190",
    "end": "2263670"
  },
  {
    "text": "way we can Adam we trigger off a lambda function and have that auto approved and say let's",
    "start": "2263670",
    "end": "2269670"
  },
  {
    "text": "move on in the next stage of the pipeline which is deploying this service out to production so that's what we're gonna do using code deploy do the same",
    "start": "2269670",
    "end": "2276150"
  },
  {
    "text": "process tell dynaTrace again but the production instance that we're deploying into into production and now we're gonna",
    "start": "2276150",
    "end": "2283860"
  },
  {
    "text": "say okay production looks good based on the data there or it does it now in this case here there was a problem that",
    "start": "2283860",
    "end": "2289800"
  },
  {
    "text": "manifested itself in production that we that for some reason we're not able to detect in a lower environment and those",
    "start": "2289800",
    "end": "2296340"
  },
  {
    "text": "things happen there's environmental differences so with that dynaTrace again can detect a problem and say you this",
    "start": "2296340",
    "end": "2303480"
  },
  {
    "text": "service now to increased in a failure rate it's now failing more than it used to so as soon as that problem exists you",
    "start": "2303480",
    "end": "2311010"
  },
  {
    "text": "can have a lambda function trigger off and have that directly sent to a lambda function to say okay tell code deploy to",
    "start": "2311010",
    "end": "2316350"
  },
  {
    "text": "roll that back for me and it can do that and then basically you've resolved the",
    "start": "2316350",
    "end": "2321420"
  },
  {
    "text": "issue and all of that was done without having really any human intervention which makes it a lot easier to push code",
    "start": "2321420",
    "end": "2326490"
  },
  {
    "text": "through the pipeline process and the other thing you can do now is when you",
    "start": "2326490",
    "end": "2331680"
  },
  {
    "start": "2328000",
    "end": "2328000"
  },
  {
    "text": "make those changes in the lower environment when you go through that process and you're running your load test is validate using the service flow",
    "start": "2331680",
    "end": "2337890"
  },
  {
    "text": "that you didn't make any recursive calls so if this was your planned architecture to have it nice and clean from web",
    "start": "2337890",
    "end": "2343620"
  },
  {
    "text": "server to web tier and then you look at it and it looks like that you might have",
    "start": "2343620",
    "end": "2348960"
  },
  {
    "text": "a problem or you might want to rethink what you did because maybe you in you know added in a lot of n plus-1 type",
    "start": "2348960",
    "end": "2354900"
  },
  {
    "text": "calls or recursive functions in there that maybe you didn't even realize that just for a transaction even though you",
    "start": "2354900",
    "end": "2360000"
  },
  {
    "text": "thought it would go seamlessly through all those different services well it actually calls itself back and then goes",
    "start": "2360000",
    "end": "2365160"
  },
  {
    "text": "back again and these are the type of things that you can see in the service flow so now the final phase that we",
    "start": "2365160",
    "end": "2371550"
  },
  {
    "start": "2368000",
    "end": "2368000"
  },
  {
    "text": "talked through which is being able to integrate with the cloud services so going on to that where you want to",
    "start": "2371550",
    "end": "2378660"
  },
  {
    "text": "actually have your different you're gonna be using different services in this case maybe you're just using ec2",
    "start": "2378660",
    "end": "2383880"
  },
  {
    "text": "but maybe you're using like RDS or things like that is we actually made it in in dynaTrace to be able to pull in a",
    "start": "2383880",
    "end": "2390600"
  },
  {
    "text": "lot of that same metadata that you're using out in an Amazon based environment here so you can see there's different",
    "start": "2390600",
    "end": "2396900"
  },
  {
    "text": "cloud of different tags in off these ec2 instances so the things that you've already tagged and set up and have rules in place for for your",
    "start": "2396900",
    "end": "2404490"
  },
  {
    "text": "Amazon assets we can actually pull in and actually be able to search for and find those those same entities so this",
    "start": "2404490",
    "end": "2410040"
  },
  {
    "text": "is just a simple ec2 instance but you see up top we're automatically pulling in the different tags that are",
    "start": "2410040",
    "end": "2415109"
  },
  {
    "text": "associated with that instance and then you can do the same thing on the the RDS database side so you see on the right is",
    "start": "2415109",
    "end": "2422150"
  },
  {
    "text": "we've got this Oracle database which was moved out and running in RDS and you can",
    "start": "2422150",
    "end": "2427170"
  },
  {
    "text": "see what applications it talks to and you can even see what services call this",
    "start": "2427170",
    "end": "2434580"
  },
  {
    "text": "RDS database and that's actually what you're seeing right here is that there's the RDS instance and right at the lower",
    "start": "2434580",
    "end": "2439800"
  },
  {
    "text": "left-hand corner you can see which services are making calls to this database and it's all in the same",
    "start": "2439800",
    "end": "2445920"
  },
  {
    "text": "topology even though again it's a database as a service model and also",
    "start": "2445920",
    "end": "2452490"
  },
  {
    "text": "with the integration what we've done is built it so that we can pull in a lot of the other cloud resourcing you know",
    "start": "2452490",
    "end": "2459359"
  },
  {
    "text": "especially around AWS and what you see here some being able to see how is your auto scaling if you're using let's say",
    "start": "2459359",
    "end": "2464700"
  },
  {
    "text": "DynamoDB being able to pull in data around and put it tie it together with how well your queries are performing",
    "start": "2464700",
    "end": "2471420"
  },
  {
    "text": "which ones you're actually running and maybe if you're just moving to a containerized type of model so maybe",
    "start": "2471420",
    "end": "2477420"
  },
  {
    "start": "2473000",
    "end": "2473000"
  },
  {
    "text": "you're gonna use ECS or newly-launched eks and be able to actually see what's",
    "start": "2477420",
    "end": "2483300"
  },
  {
    "text": "going on with the different container services we can actually do that as well and actually be able to monitor how well",
    "start": "2483300",
    "end": "2489030"
  },
  {
    "text": "you're scaling out those containers by dayit dynamically discovering when you spin up containers and what services",
    "start": "2489030",
    "end": "2495000"
  },
  {
    "text": "they actually belong to and the one thing so now finally stitching it all",
    "start": "2495000",
    "end": "2500040"
  },
  {
    "start": "2497000",
    "end": "2497000"
  },
  {
    "text": "together back from what George started with with a lot of the lambda functions is when you introduce that into your",
    "start": "2500040",
    "end": "2505200"
  },
  {
    "text": "environment you want to have n2n visibility through the different services that you may add in so that's",
    "start": "2505200",
    "end": "2511830"
  },
  {
    "text": "we actually see right here is a couple things is one you're seeing if an lambda function is invoked and what calls that",
    "start": "2511830",
    "end": "2518849"
  },
  {
    "text": "makes outbound but you can also see how long a secluded that that your lambda function actually",
    "start": "2518849",
    "end": "2526650"
  },
  {
    "text": "runs its kind like a waterfall view of the different service calls and obviously it can help you optimize this because",
    "start": "2526650",
    "end": "2532260"
  },
  {
    "text": "you don't want it's event-based you don't want to be sitting there running or waiting for responses to come back",
    "start": "2532260",
    "end": "2537990"
  },
  {
    "text": "it's an event-based trigger so you you kind of want to make sure that you're optimizing it in a way that makes the",
    "start": "2537990",
    "end": "2543330"
  },
  {
    "text": "most sense for how lammed is actually designed to be used and so if you want to look at a full service flow or an",
    "start": "2543330",
    "end": "2549359"
  },
  {
    "text": "example of what one could look like when you're using a combination of having lambda in there having a monolith in",
    "start": "2549359",
    "end": "2556500"
  },
  {
    "text": "there you can see that transactions may go through a monolith app that still is out there that maybe haven't converted",
    "start": "2556500",
    "end": "2562590"
  },
  {
    "text": "yet serverless pieces you may have it out into a microcircuits here and then of course you're still gonna have legacy",
    "start": "2562590",
    "end": "2568020"
  },
  {
    "text": "and third party may be calls back to the mainframe we still can't you know we're not getting rid of that necessarily in a",
    "start": "2568020",
    "end": "2573300"
  },
  {
    "text": "lot of environments yet so you can see basically the full flow of how that",
    "start": "2573300",
    "end": "2578340"
  },
  {
    "text": "works all the way up to the user which is another thing that you can actually",
    "start": "2578340",
    "end": "2584430"
  },
  {
    "text": "see is being able to validate the user's experience as they go through then the transaction flows through that entire",
    "start": "2584430",
    "end": "2591030"
  },
  {
    "text": "area right there and be able to monitor things like you know conversion rates and things like that and how maybe a may",
    "start": "2591030",
    "end": "2597810"
  },
  {
    "text": "be deploying something that is a suboptimal deployment how that could impact users coming to your site and",
    "start": "2597810",
    "end": "2603540"
  },
  {
    "text": "things like that and so the final thing that will that we'll talk about just for",
    "start": "2603540",
    "end": "2608700"
  },
  {
    "text": "a minute here is all of that all of that data is actually accessible as well via",
    "start": "2608700",
    "end": "2615030"
  },
  {
    "text": "like chat ops or voice ops so we actually have an Alexis skill out there we have a couple chat BOTS out there as",
    "start": "2615030",
    "end": "2621210"
  },
  {
    "text": "well where you can actually ask it questions basically you can say you can ask Alexa",
    "start": "2621210",
    "end": "2626930"
  },
  {
    "text": "was there any problems last night with my application stack and in diamon basically Alexa will respond using the",
    "start": "2626930",
    "end": "2633540"
  },
  {
    "text": "dynaTrace skill to say in reading the data that that it has for your environment if there were any problems",
    "start": "2633540",
    "end": "2638970"
  },
  {
    "text": "and if there were you know how many people did it impact how severe was the issue so it gives you kind of a more",
    "start": "2638970",
    "end": "2644070"
  },
  {
    "text": "flexibility almost like you're you're live querying your data but in a more you know answer type fashion so with",
    "start": "2644070",
    "end": "2653250"
  },
  {
    "text": "that I'll kind of we're gonna stop now for Q&A so if any of this actually",
    "start": "2653250",
    "end": "2658619"
  },
  {
    "text": "interests you if you're actually going on this type of journey and want to learn a little bit more about it you can always stop by our booth we're upstairs",
    "start": "2658619",
    "end": "2664500"
  },
  {
    "text": "right in the expose or you can go to dynaTrace comm and actually get some more information sign",
    "start": "2664500",
    "end": "2669840"
  },
  {
    "text": "up for a trial and so we have about three or four minutes now we're gonna we could actually stop for some questions",
    "start": "2669840",
    "end": "2677510"
  },
  {
    "text": "you see do you need to instrument the core existing one all right they have to",
    "start": "2682280",
    "end": "2690170"
  },
  {
    "text": "apply some reagent to try call yours calls so it is its agent based you don't",
    "start": "2690170",
    "end": "2696330"
  },
  {
    "text": "have to instrument your code it's actually agent based and even with lambda we've actually made it so it's an event wrapper so you don't actually have",
    "start": "2696330",
    "end": "2702150"
  },
  {
    "text": "to instrument your code but for anything else that you have a machine or a pass type of environment it's it's agent",
    "start": "2702150",
    "end": "2708180"
  },
  {
    "text": "based in that sense but no no change is necessarily dope code so you mentioned",
    "start": "2708180",
    "end": "2722220"
  },
  {
    "text": "that you worked with Wes here before yeah what was the journey like transitioning from web serie to",
    "start": "2722220",
    "end": "2728369"
  },
  {
    "text": "something like micro services with Tomcat I'm actually very interested I'm trying to move my project towards it go",
    "start": "2728369",
    "end": "2734820"
  },
  {
    "text": "away yeah yeah so we've done that with a couple of our customers along the way and it's kind of what you would expect",
    "start": "2734820",
    "end": "2740520"
  },
  {
    "text": "it's a lot of looking at the different transactions and the different flows basically as they go through and the",
    "start": "2740520",
    "end": "2745800"
  },
  {
    "text": "different service components and then basically understanding what what the dependencies between them are and then",
    "start": "2745800",
    "end": "2752280"
  },
  {
    "text": "looking at okay we want to move this makes sense to break out into its own little service here doing that and then",
    "start": "2752280",
    "end": "2758790"
  },
  {
    "text": "validating that kind of what you expect the the same dependency flow actually works validating that everything goes",
    "start": "2758790",
    "end": "2764640"
  },
  {
    "text": "through and validating that it's performance so I mean it could talk to you a little bit more about some of it afterwards and some of the challenges",
    "start": "2764640",
    "end": "2769650"
  },
  {
    "text": "you're facing but yeah it's something that a lot of people have gone through good huh sorry um no I was just hanging",
    "start": "2769650",
    "end": "2779190"
  },
  {
    "text": "off that other questions so we have a monolithic you know just web application",
    "start": "2779190",
    "end": "2784290"
  },
  {
    "text": "hmm you know so if it's not instrumenting the code to find all those points I guess I don't know how so that",
    "start": "2784290",
    "end": "2791490"
  },
  {
    "text": "works so it is and it is doing the instrumentation but you don't have to change your in order for it to happen basically",
    "start": "2791490",
    "end": "2797920"
  },
  {
    "text": "right the idea okay yeah because before you said you weren't doing yeah yeah you know you you as a person or me or",
    "start": "2797920",
    "end": "2804760"
  },
  {
    "text": "anybody we don't nobody has to manually make any changes it's just a matter of the agent on the machine will actually",
    "start": "2804760",
    "end": "2810549"
  },
  {
    "text": "instrument the app and when it starts up and then you'll be able to actually trace things yep and when you're",
    "start": "2810549",
    "end": "2816190"
  },
  {
    "text": "building and if you're moving in lambda you can also use a service called x-ray which can help you understand a",
    "start": "2816190",
    "end": "2822609"
  },
  {
    "text": "line-by-line execution of how your land of functions are functioning stuff are",
    "start": "2822609",
    "end": "2832990"
  },
  {
    "text": "we really I mean that there is one thing to be said it's like okay server list as",
    "start": "2832990",
    "end": "2838089"
  },
  {
    "text": "a end user or a user of that function you don't really need to care on how it",
    "start": "2838089",
    "end": "2844180"
  },
  {
    "text": "gets deployed or is it a server there or not or the load it's it needs to take it's taken away from you and Amazon is",
    "start": "2844180",
    "end": "2851799"
  },
  {
    "text": "working a it's getting it done for you so that's one piece of it as opposed to no this is a different kind of",
    "start": "2851799",
    "end": "2857920"
  },
  {
    "text": "architecture and actually behind the scene there is no server yes let's let's",
    "start": "2857920",
    "end": "2864220"
  },
  {
    "text": "be totally clear like behind the scenes there's definitely servers alright so AWS will run the servers and",
    "start": "2864220",
    "end": "2870099"
  },
  {
    "text": "manage the infrastructure for you with lambda you provide your business logic code and then we execute it for you so",
    "start": "2870099",
    "end": "2877660"
  },
  {
    "text": "behind the scenes it's not magic right as always servers that that exists yeah this is that you'd as a customer doesn't",
    "start": "2877660",
    "end": "2883900"
  },
  {
    "text": "you don't have to manage that yep one more question yeah sure I don't know if",
    "start": "2883900",
    "end": "2891940"
  },
  {
    "text": "I heard this right but from what I heard it looks like dynaTrace needs to have",
    "start": "2891940",
    "end": "2899799"
  },
  {
    "text": "access to a database which is already deployed on the cloud but if but what if",
    "start": "2899799",
    "end": "2906009"
  },
  {
    "text": "it comes to us customer case where they do not want to move the database over to",
    "start": "2906009",
    "end": "2912549"
  },
  {
    "text": "the cloud but keep it on prem but connect via direct connect or some other",
    "start": "2912549",
    "end": "2918549"
  },
  {
    "text": "physical you can you can do that either way it doesn't really matter you can we you could basically we can be hosted in",
    "start": "2918549",
    "end": "2925029"
  },
  {
    "text": "the cloud on-premise it doesn't it we're agnostic to that really happening so you can go through the same process wherever your app is",
    "start": "2925029",
    "end": "2931580"
  },
  {
    "text": "deployed okay thank you hmm can you guys",
    "start": "2931580",
    "end": "2936950"
  },
  {
    "text": "do one more yeah no more I'm good yeah is there consideration taken in to is",
    "start": "2936950",
    "end": "2946400"
  },
  {
    "text": "there consideration taken for how these things are generated when it comes to the 30-second timeout for API gateway or the five minute timeout for lambdas is",
    "start": "2946400",
    "end": "2954950"
  },
  {
    "text": "there consideration for changing those numbers yeah well yeah what I'm saying is like this you have a process that might take 15 seconds might take a",
    "start": "2954950",
    "end": "2961550"
  },
  {
    "text": "minute and a half yeah so it's it's able to dynaTrace able to figure out hey probably this probably shouldn't be",
    "start": "2961550",
    "end": "2967760"
  },
  {
    "text": "broken out into a lambda or something that would go through API gateway I mean",
    "start": "2967760",
    "end": "2972980"
  },
  {
    "text": "that's one way you can look at it it's not gonna break it out for you or give you a recommendation itself it's",
    "start": "2972980",
    "end": "2979130"
  },
  {
    "text": "obviously looking at the data or giving you the data to be able to do that and then determine if that would actually make the most sense giving whatever",
    "start": "2979130",
    "end": "2985160"
  },
  {
    "text": "variables you want to use or whatever constraint you have to deal with you know shouldn't go into lambda function maybe maybe not depending on how how it",
    "start": "2985160",
    "end": "2991760"
  },
  {
    "text": "actually works from a business logic spam okay but does it warn you about those does it worry about those limitations when it's doing the",
    "start": "2991760",
    "end": "2997190"
  },
  {
    "text": "benchmarking and the analysis of code like if it's doing sample feel like I'm",
    "start": "2997190",
    "end": "3003730"
  },
  {
    "text": "asking a really dumb question you look really confused I didn't hear a piece what you said",
    "start": "3003730",
    "end": "3011770"
  },
  {
    "text": "there this will probably take a lot longer than yeah that we really have time for self charge track yeah",
    "start": "3011770",
    "end": "3018690"
  },
  {
    "text": "it'll tell you obviously if it started up slowly versus if it if it wasn't",
    "start": "3033290",
    "end": "3038850"
  },
  {
    "text": "you'd be able to compare and determine that if it was a cold or a hot start now with those we with cold starts and warm",
    "start": "3038850",
    "end": "3044640"
  },
  {
    "text": "starts we recommend either instrumenting your code with a third-party tool or",
    "start": "3044640",
    "end": "3050430"
  },
  {
    "text": "deploying x-ray and it's really easy to do you know you enable with single checkbox in your Lando function and",
    "start": "3050430",
    "end": "3056430"
  },
  {
    "text": "actually will give you all of that information anything else",
    "start": "3056430",
    "end": "3066980"
  },
  {
    "text": "where's the mic thank you for coming by",
    "start": "3066980",
    "end": "3073910"
  }
]