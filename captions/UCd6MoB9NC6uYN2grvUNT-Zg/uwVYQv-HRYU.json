[
  {
    "text": "Hi, welcome to 'Back to Basics'. \nMy name is Seb,",
    "start": "5439",
    "end": "8653"
  },
  {
    "text": "and today we will talk about event-driven architectures\n with Amazon Kinesis.",
    "start": "8653",
    "end": "12969"
  },
  {
    "text": "When writing applications, many parts \nof the applications talk to each other,",
    "start": "13918",
    "end": "18542"
  },
  {
    "text": "usually in response to some form\n of a change or an event. ",
    "start": "19146",
    "end": "23346"
  },
  {
    "text": "And I often find that one service \nis waiting for an event ",
    "start": "24174",
    "end": "30067"
  },
  {
    "text": "to occur in another service.",
    "start": "30067",
    "end": "32196"
  },
  {
    "text": "If I have ordered a taxi \nand am waiting for it to arrive,",
    "start": "32196",
    "end": "35599"
  },
  {
    "text": "in a traditional architecture, I will need to query\n my taxi booking microservice",
    "start": "36243",
    "end": "40848"
  },
  {
    "text": "every few seconds to ask, \nhas my taxi arrived yet?",
    "start": "41259",
    "end": "44689"
  },
  {
    "text": "This design pattern is not most suitable \nwhen dealing with events like this.",
    "start": "45201",
    "end": "49921"
  },
  {
    "text": "It generates a significant amount \nof additional requests,",
    "start": "50457",
    "end": "54168"
  },
  {
    "text": "and also means that we will only find out \nthat taxi has arrived",
    "start": "54168",
    "end": "58690"
  },
  {
    "text": "after we ask again, \nnot when it actually arrives.",
    "start": "59147",
    "end": "62479"
  },
  {
    "text": "But what if the taxi could tell you when it has arrived,\n by sending an event.",
    "start": "62726",
    "end": "67247"
  },
  {
    "text": "With invention of the event-driven architectures, \nthere are better ways of handling these scenarios.",
    "start": "67964",
    "end": "73186"
  },
  {
    "text": "So let's explore these scenarios in more detail.",
    "start": "73826",
    "end": "76141"
  },
  {
    "text": "Instead of frequently polling\n to check whether my taxi has arrived,",
    "start": "77095",
    "end": "81117"
  },
  {
    "text": "I'm going to re architect my application\n so that my taxi booking service",
    "start": "81623",
    "end": "86551"
  },
  {
    "text": "sends an event when the taxi arrives.",
    "start": "86551",
    "end": "89098"
  },
  {
    "text": "My consumer service will now listen\n for incoming events.",
    "start": "89798",
    "end": "93993"
  },
  {
    "text": "And my taxi booking service can simply \npush a message to it once my taxi is here.",
    "start": "94242",
    "end": "99673"
  },
  {
    "text": "But what happens if my consumer service\n becomes unavailable?",
    "start": "100555",
    "end": "104032"
  },
  {
    "text": "My taxi booking service will not be able \nto reach it and the message will be lost.",
    "start": "104333",
    "end": "108877"
  },
  {
    "text": "And we could have our taxi booking service\n simply keep retrying delivery of the message. ",
    "start": "110195",
    "end": "115961"
  },
  {
    "text": "However, as our taxi service\n increases in popularity,",
    "start": "116793",
    "end": "120515"
  },
  {
    "text": "the service will get very busy \nsimply trying to deliver all these messages.",
    "start": "121097",
    "end": "125173"
  },
  {
    "text": "This is not a scalable \narchitecture approach to follow.",
    "start": "125173",
    "end": "128446"
  },
  {
    "text": "Instead, what we can do\n is we can add an event-streaming service",
    "start": "128588",
    "end": "132942"
  },
  {
    "text": "such as Amazon Kinesis data streams. ",
    "start": "133346",
    "end": "135971"
  },
  {
    "text": "This service allows the producer of the events\n to write the events to the stream.",
    "start": "136322",
    "end": "141124"
  },
  {
    "text": "These events are then persisted on the stream\n in the order in which they arrived in,",
    "start": "141513",
    "end": "145464"
  },
  {
    "text": "for anyone to take action on them.",
    "start": "145768",
    "end": "148546"
  },
  {
    "text": "So now when the taxi arrives, \nand even it says onto the stream,",
    "start": "148546",
    "end": "152107"
  },
  {
    "text": "and the consumer who is listening to the stream \nwould receive this event in a matter of milliseconds. ",
    "start": "152107",
    "end": "156978"
  },
  {
    "text": "And as we add new features to these applications, ",
    "start": "158072",
    "end": "161006"
  },
  {
    "text": "we realize there may be other services \nthat are interested in those events.",
    "start": "161006",
    "end": "166167"
  },
  {
    "text": "Kinesis is a massively scalable and durable\n real time data streaming service.",
    "start": "167209",
    "end": "172424"
  },
  {
    "text": "So it's actually well suited for this task. ",
    "start": "173068",
    "end": "175569"
  },
  {
    "text": "One of the key advantages\n of using Kinesis in this example,",
    "start": "175917",
    "end": "179788"
  },
  {
    "text": "is that we can have multiple consumers\n reading from the stream.",
    "start": "179788",
    "end": "183722"
  },
  {
    "text": "We simply add another application\n to start reading the events from the stream.",
    "start": "184393",
    "end": "188495"
  },
  {
    "text": "And the application can perform another action, ",
    "start": "188849",
    "end": "191734"
  },
  {
    "text": "such as gathering real time stats about \nhow many taxis are currently booked.",
    "start": "191734",
    "end": "197258"
  },
  {
    "text": "And there are other interesting questions \nwe could try to answer with this data.",
    "start": "198124",
    "end": "202454"
  },
  {
    "text": "What if we want to predict \nfuture demand for our taxis,",
    "start": "203278",
    "end": "207784"
  },
  {
    "text": "based on trends and how our taxis \nhave been used in the past?",
    "start": "208365",
    "end": "212683"
  },
  {
    "text": "Amazon Kinesis only stores\n the events by default for seven days,",
    "start": "213770",
    "end": "218007"
  },
  {
    "text": "and it cannot store it \nfor longer than one year.",
    "start": "218454",
    "end": "221142"
  },
  {
    "text": " So for this example, we need to store \nthese events somewhere else.",
    "start": "221749",
    "end": "225426"
  },
  {
    "text": "We could simply write another consumer\n that reads from the stream",
    "start": "226521",
    "end": "231586"
  },
  {
    "text": "and saves this data to Amazon S3 buckets \nor Amazon EBS volume.",
    "start": "231586",
    "end": "237554"
  },
  {
    "text": "But I recommend that instead \nwe use Kinesis data Firehose,",
    "start": "238396",
    "end": "242539"
  },
  {
    "text": "which will allow us \nto stream events to Amazon S3, ",
    "start": "243089",
    "end": "246968"
  },
  {
    "text": "without having to write \nor manage any code at all.",
    "start": "247301",
    "end": "250707"
  },
  {
    "text": "Kinesis data Firehose natively integrates\n with Kinesis data stream",
    "start": "251480",
    "end": "255887"
  },
  {
    "text": "and Amazon S3 to seamlessly deliver \nthese events to the bucket.",
    "start": "255887",
    "end": "260333"
  },
  {
    "text": "Once those events are in the bucket, they can be sent \nto Amazon Glacier for long term archive. ",
    "start": "260618",
    "end": "266511"
  },
  {
    "text": "Or we can use Amazon Athena\n to query the information in this bucket.",
    "start": "267075",
    "end": "271489"
  },
  {
    "text": "For example, as I already mentioned, \nwe can run a query to get stats",
    "start": "271776",
    "end": "277001"
  },
  {
    "text": "about how many taxis were booked \neach week for the past three years.",
    "start": "277001",
    "end": "281630"
  },
  {
    "text": "And later on, we could look at using \nmachine learning to predict demand ",
    "start": "282222",
    "end": "286284"
  },
  {
    "text": "for our taxis into the future, \nbut that's a topic for another time.",
    "start": "286284",
    "end": "290517"
  },
  {
    "text": "So there you have it. \nToday we have learned how we can use ",
    "start": "291715",
    "end": "294981"
  },
  {
    "text": "event-driven architectures \nwhen building our next applications.",
    "start": "294981",
    "end": "298466"
  },
  {
    "text": "How you can implement them \nin AWS using Amazon Kinesis.",
    "start": "299259",
    "end": "303240"
  },
  {
    "text": "And how Amazon Kinesis allows you \nto expand your use cases ",
    "start": "303700",
    "end": "309008"
  },
  {
    "text": "as your application grows.",
    "start": "309008",
    "end": "310932"
  },
  {
    "text": "Check out the links below for more details. ",
    "start": "311663",
    "end": "314405"
  },
  {
    "text": "Thanks for watching 'Back to Basics' \nand see you next time.",
    "start": "314777",
    "end": "318042"
  }
]