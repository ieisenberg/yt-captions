[
  {
    "start": "0",
    "end": "18000"
  },
  {
    "text": "hello and welcome to the next session of",
    "start": "30",
    "end": "2610"
  },
  {
    "text": "the AWS innovate virtual conference in",
    "start": "2610",
    "end": "6420"
  },
  {
    "text": "this session we are talking about",
    "start": "6420",
    "end": "7859"
  },
  {
    "text": "containers and how you can easily manage",
    "start": "7859",
    "end": "10910"
  },
  {
    "text": "large-scale container deployments using",
    "start": "10910",
    "end": "13950"
  },
  {
    "text": "the Amazon ec2 container service or ECS",
    "start": "13950",
    "end": "17670"
  },
  {
    "text": "for short",
    "start": "17670",
    "end": "18630"
  },
  {
    "start": "18000",
    "end": "37000"
  },
  {
    "text": "my name is Shai leash Albuquerque I'm a",
    "start": "18630",
    "end": "20910"
  },
  {
    "text": "Solutions Architect behzod offer",
    "start": "20910",
    "end": "22619"
  },
  {
    "text": "Bangalow in the office as a Solutions",
    "start": "22619",
    "end": "25800"
  },
  {
    "text": "Architect I work with customers to help",
    "start": "25800",
    "end": "28560"
  },
  {
    "text": "them architect our applications on AWS",
    "start": "28560",
    "end": "31199"
  },
  {
    "text": "and I'm really excited about",
    "start": "31199",
    "end": "32820"
  },
  {
    "text": "architecture patterns such as containers",
    "start": "32820",
    "end": "34829"
  },
  {
    "text": "and micro services here's an overview of",
    "start": "34829",
    "end": "38219"
  },
  {
    "start": "37000",
    "end": "88000"
  },
  {
    "text": "the topics we are going to cover today",
    "start": "38219",
    "end": "40670"
  },
  {
    "text": "we will start with the brief",
    "start": "40670",
    "end": "42780"
  },
  {
    "text": "introduction to containers primarily",
    "start": "42780",
    "end": "45180"
  },
  {
    "text": "docker there is a great amount of",
    "start": "45180",
    "end": "48239"
  },
  {
    "text": "interest in containers we will talk",
    "start": "48239",
    "end": "50250"
  },
  {
    "text": "about some of their benefits and how",
    "start": "50250",
    "end": "52710"
  },
  {
    "text": "they enable micro services architecture",
    "start": "52710",
    "end": "55460"
  },
  {
    "text": "now customers rarely run one or two",
    "start": "55460",
    "end": "58379"
  },
  {
    "text": "containers for production applications",
    "start": "58379",
    "end": "60000"
  },
  {
    "text": "most deployments of containers we see",
    "start": "60000",
    "end": "62460"
  },
  {
    "text": "are being run on a cluster there are",
    "start": "62460",
    "end": "65939"
  },
  {
    "text": "several challenges with managing a",
    "start": "65939",
    "end": "67979"
  },
  {
    "text": "cluster we will talk about ECS which is",
    "start": "67979",
    "end": "71520"
  },
  {
    "text": "our cluster management system for",
    "start": "71520",
    "end": "73680"
  },
  {
    "text": "running containers we'll dive deep into",
    "start": "73680",
    "end": "76680"
  },
  {
    "text": "ecs and how we have built it to manage",
    "start": "76680",
    "end": "79890"
  },
  {
    "text": "scale and performance and we'll also",
    "start": "79890",
    "end": "82530"
  },
  {
    "text": "provide an overview of how you can run",
    "start": "82530",
    "end": "84900"
  },
  {
    "text": "your applications using ECS so let's",
    "start": "84900",
    "end": "88500"
  },
  {
    "text": "start this session with a quick overview",
    "start": "88500",
    "end": "90540"
  },
  {
    "text": "of containers now although there are",
    "start": "90540",
    "end": "93540"
  },
  {
    "text": "many container formats in today's",
    "start": "93540",
    "end": "96090"
  },
  {
    "text": "session we are referring to docker which",
    "start": "96090",
    "end": "98970"
  },
  {
    "text": "has become a popular format for",
    "start": "98970",
    "end": "100680"
  },
  {
    "text": "containers containers allows you to",
    "start": "100680",
    "end": "104430"
  },
  {
    "text": "virtualize an operating system and",
    "start": "104430",
    "end": "106490"
  },
  {
    "text": "abstract the underlying infrastructure",
    "start": "106490",
    "end": "108899"
  },
  {
    "text": "and OS into an image with a small",
    "start": "108899",
    "end": "112470"
  },
  {
    "text": "footprint you may already be familiar",
    "start": "112470",
    "end": "115380"
  },
  {
    "text": "with virtualization at a hardware level",
    "start": "115380",
    "end": "117920"
  },
  {
    "text": "where server hardware such as physical",
    "start": "117920",
    "end": "120600"
  },
  {
    "text": "CPU and memory is virtualized to run",
    "start": "120600",
    "end": "124200"
  },
  {
    "text": "many guest operating systems in an",
    "start": "124200",
    "end": "126719"
  },
  {
    "text": "efficient manner containers are the next",
    "start": "126719",
    "end": "130080"
  },
  {
    "text": "level of abstraction where the OS itself",
    "start": "130080",
    "end": "133340"
  },
  {
    "text": "is virtualized containers used Linux",
    "start": "133340",
    "end": "136640"
  },
  {
    "text": "features such as C groups and namespaces",
    "start": "136640",
    "end": "140300"
  },
  {
    "text": "to isolate processes and file systems",
    "start": "140300",
    "end": "142910"
  },
  {
    "text": "running on a single s this ensures that",
    "start": "142910",
    "end": "146540"
  },
  {
    "text": "there is separation and process",
    "start": "146540",
    "end": "148970"
  },
  {
    "text": "isolation between various containers",
    "start": "148970",
    "end": "150739"
  },
  {
    "text": "running on the same underlying OS docker",
    "start": "150739",
    "end": "154549"
  },
  {
    "text": "provides a robust set of tools to build",
    "start": "154549",
    "end": "157700"
  },
  {
    "text": "and manage images images define what",
    "start": "157700",
    "end": "161810"
  },
  {
    "text": "runs in the container the various layers",
    "start": "161810",
    "end": "164690"
  },
  {
    "text": "of the images and the version of the",
    "start": "164690",
    "end": "167030"
  },
  {
    "text": "application can be defined using a",
    "start": "167030",
    "end": "169790"
  },
  {
    "text": "docker file and this information can be",
    "start": "169790",
    "end": "173030"
  },
  {
    "text": "put into source code repositories you",
    "start": "173030",
    "end": "176150"
  },
  {
    "text": "can use simple commands in the docker",
    "start": "176150",
    "end": "177709"
  },
  {
    "text": "CLI to run these images and you could",
    "start": "177709",
    "end": "180319"
  },
  {
    "text": "also use tools such as continuous",
    "start": "180319",
    "end": "182269"
  },
  {
    "text": "integration and continuous delivery",
    "start": "182269",
    "end": "183769"
  },
  {
    "text": "pipelines to automate the process of",
    "start": "183769",
    "end": "186440"
  },
  {
    "text": "building docker images and running them",
    "start": "186440",
    "end": "189440"
  },
  {
    "text": "in your environment there are several",
    "start": "189440",
    "end": "192049"
  },
  {
    "start": "191000",
    "end": "218000"
  },
  {
    "text": "advantages to containers which have made",
    "start": "192049",
    "end": "194690"
  },
  {
    "text": "them popular today the first advantage",
    "start": "194690",
    "end": "197180"
  },
  {
    "text": "is that containers are portable the",
    "start": "197180",
    "end": "200150"
  },
  {
    "text": "image that you build is consistent and",
    "start": "200150",
    "end": "202579"
  },
  {
    "text": "immutable so wherever you run it be it",
    "start": "202579",
    "end": "206000"
  },
  {
    "text": "on your developer desktop or a test",
    "start": "206000",
    "end": "208519"
  },
  {
    "text": "environment or a production environment",
    "start": "208519",
    "end": "210290"
  },
  {
    "text": "it will run exactly in the same manner",
    "start": "210290",
    "end": "213250"
  },
  {
    "text": "this is probably a primary driver for",
    "start": "213250",
    "end": "216410"
  },
  {
    "text": "developers to choose docker containers",
    "start": "216410",
    "end": "218870"
  },
  {
    "start": "218000",
    "end": "238000"
  },
  {
    "text": "are flexible with containers you can",
    "start": "218870",
    "end": "221389"
  },
  {
    "text": "easily decompose a larger application",
    "start": "221389",
    "end": "223880"
  },
  {
    "text": "into smaller pieces much like what",
    "start": "223880",
    "end": "226940"
  },
  {
    "text": "happens with micro services and you can",
    "start": "226940",
    "end": "229400"
  },
  {
    "text": "run these together on the same host you",
    "start": "229400",
    "end": "232819"
  },
  {
    "text": "can do that while preventing issues of",
    "start": "232819",
    "end": "235220"
  },
  {
    "text": "dependencies and library conflicts",
    "start": "235220",
    "end": "238269"
  },
  {
    "text": "containers are fast and really there are",
    "start": "238269",
    "end": "240980"
  },
  {
    "text": "two aspects to the speed first is that",
    "start": "240980",
    "end": "244489"
  },
  {
    "text": "containers start quickly because the OS",
    "start": "244489",
    "end": "247099"
  },
  {
    "text": "is already provisioned prior to running",
    "start": "247099",
    "end": "249530"
  },
  {
    "text": "a container and it only takes a few",
    "start": "249530",
    "end": "251810"
  },
  {
    "text": "seconds to bootstrap the container and",
    "start": "251810",
    "end": "254750"
  },
  {
    "text": "the Associated applications the other",
    "start": "254750",
    "end": "258139"
  },
  {
    "text": "aspect is that containers improve speed",
    "start": "258139",
    "end": "260599"
  },
  {
    "text": "of releasing and deploying new versions",
    "start": "260599",
    "end": "263210"
  },
  {
    "text": "of applications",
    "start": "263210",
    "end": "264320"
  },
  {
    "text": "a team of developers can choose to",
    "start": "264320",
    "end": "266750"
  },
  {
    "text": "update the our version of the",
    "start": "266750",
    "end": "268220"
  },
  {
    "text": "application our images and only the",
    "start": "268220",
    "end": "270980"
  },
  {
    "text": "Associated containers can be updated",
    "start": "270980",
    "end": "273050"
  },
  {
    "text": "without affecting others so it's faster",
    "start": "273050",
    "end": "276170"
  },
  {
    "text": "to build and release in the development",
    "start": "276170",
    "end": "278960"
  },
  {
    "text": "if the development teams are aligned",
    "start": "278960",
    "end": "280430"
  },
  {
    "text": "accordingly",
    "start": "280430",
    "end": "281950"
  },
  {
    "text": "finally containers are efficient you can",
    "start": "281950",
    "end": "285560"
  },
  {
    "text": "precisely allocate the amount of",
    "start": "285560",
    "end": "287570"
  },
  {
    "text": "resources you want for a particular",
    "start": "287570",
    "end": "289640"
  },
  {
    "text": "container like CPU or memory and this",
    "start": "289640",
    "end": "293570"
  },
  {
    "text": "makes efficient use of the underlying",
    "start": "293570",
    "end": "295910"
  },
  {
    "text": "infrastructure so with these benefits we",
    "start": "295910",
    "end": "299150"
  },
  {
    "start": "297000",
    "end": "304000"
  },
  {
    "text": "see containers playing a significant",
    "start": "299150",
    "end": "301100"
  },
  {
    "text": "role in the way we architect",
    "start": "301100",
    "end": "302930"
  },
  {
    "text": "applications today instead of creating",
    "start": "302930",
    "end": "305420"
  },
  {
    "start": "304000",
    "end": "391000"
  },
  {
    "text": "large monolithic application with the",
    "start": "305420",
    "end": "308120"
  },
  {
    "text": "large code base and large development",
    "start": "308120",
    "end": "310310"
  },
  {
    "text": "teams we see customers choosing to",
    "start": "310310",
    "end": "312980"
  },
  {
    "text": "decompose our applications into micro",
    "start": "312980",
    "end": "315800"
  },
  {
    "text": "services these micro services are",
    "start": "315800",
    "end": "318680"
  },
  {
    "text": "typically developed and managed by",
    "start": "318680",
    "end": "320840"
  },
  {
    "text": "smaller teams with each micro service",
    "start": "320840",
    "end": "323570"
  },
  {
    "text": "running as a single or a small set of",
    "start": "323570",
    "end": "326240"
  },
  {
    "text": "containers to illustrate this point you",
    "start": "326240",
    "end": "330260"
  },
  {
    "text": "can refer to the slide on your screen",
    "start": "330260",
    "end": "332740"
  },
  {
    "text": "consider the retail application on the",
    "start": "332740",
    "end": "335330"
  },
  {
    "text": "left as a monolith this application",
    "start": "335330",
    "end": "339380"
  },
  {
    "text": "could be having several modules such as",
    "start": "339380",
    "end": "341270"
  },
  {
    "text": "an ordering service or a shipping",
    "start": "341270",
    "end": "343250"
  },
  {
    "text": "service within the same monolithic",
    "start": "343250",
    "end": "345650"
  },
  {
    "text": "codebase now these services most likely",
    "start": "345650",
    "end": "348680"
  },
  {
    "text": "have different resource needs and",
    "start": "348680",
    "end": "350480"
  },
  {
    "text": "scaling patterns this retail application",
    "start": "350480",
    "end": "354290"
  },
  {
    "text": "can be effectively decomposed into",
    "start": "354290",
    "end": "356390"
  },
  {
    "text": "smaller micro services as you see in the",
    "start": "356390",
    "end": "359720"
  },
  {
    "text": "image to your right for example we could",
    "start": "359720",
    "end": "362750"
  },
  {
    "text": "tease apart an independent service for",
    "start": "362750",
    "end": "365120"
  },
  {
    "text": "ordering and another independent service",
    "start": "365120",
    "end": "367310"
  },
  {
    "text": "for shipping these micro services could",
    "start": "367310",
    "end": "370190"
  },
  {
    "text": "be encapsulated into their own set of",
    "start": "370190",
    "end": "372650"
  },
  {
    "text": "containers and can be independently",
    "start": "372650",
    "end": "374990"
  },
  {
    "text": "managed and scale also if the",
    "start": "374990",
    "end": "378530"
  },
  {
    "text": "development teams are aligned along",
    "start": "378530",
    "end": "380570"
  },
  {
    "text": "these services they can independently",
    "start": "380570",
    "end": "382910"
  },
  {
    "text": "update the our application and release",
    "start": "382910",
    "end": "385520"
  },
  {
    "text": "new features and deploy them at your own",
    "start": "385520",
    "end": "388130"
  },
  {
    "text": "frequency without affecting other",
    "start": "388130",
    "end": "390020"
  },
  {
    "text": "services as we have seen containers and",
    "start": "390020",
    "end": "392810"
  },
  {
    "start": "391000",
    "end": "440000"
  },
  {
    "text": "docker are a natural fit for this",
    "start": "392810",
    "end": "395630"
  },
  {
    "text": "pattern of Microsoft",
    "start": "395630",
    "end": "397620"
  },
  {
    "text": "containers make services simple to model",
    "start": "397620",
    "end": "400450"
  },
  {
    "text": "the application and all its dependencies",
    "start": "400450",
    "end": "402640"
  },
  {
    "text": "our packets into a single image using a",
    "start": "402640",
    "end": "405100"
  },
  {
    "text": "docker file containers support any",
    "start": "405100",
    "end": "407800"
  },
  {
    "text": "application and any language the image",
    "start": "407800",
    "end": "410680"
  },
  {
    "text": "is version the artifact that can be",
    "start": "410680",
    "end": "413020"
  },
  {
    "text": "stored in a repository just like your",
    "start": "413020",
    "end": "414910"
  },
  {
    "text": "source code",
    "start": "414910",
    "end": "415860"
  },
  {
    "text": "this makes applications easy to test and",
    "start": "415860",
    "end": "419110"
  },
  {
    "text": "deploy because you're building from a",
    "start": "419110",
    "end": "420940"
  },
  {
    "text": "single artifact containers also",
    "start": "420940",
    "end": "424270"
  },
  {
    "text": "simplified deployment it is quite",
    "start": "424270",
    "end": "426820"
  },
  {
    "text": "straightforward",
    "start": "426820",
    "end": "427600"
  },
  {
    "text": "to deploy stateless services where each",
    "start": "427600",
    "end": "430450"
  },
  {
    "text": "new deployment or release is a new set",
    "start": "430450",
    "end": "433450"
  },
  {
    "text": "of containers this reduces any",
    "start": "433450",
    "end": "436150"
  },
  {
    "text": "dependencies or conflicts with other",
    "start": "436150",
    "end": "438850"
  },
  {
    "text": "services before we get to container",
    "start": "438850",
    "end": "441400"
  },
  {
    "start": "440000",
    "end": "474000"
  },
  {
    "text": "management we need to discuss scheduling",
    "start": "441400",
    "end": "443770"
  },
  {
    "text": "in the context of containers scheduling",
    "start": "443770",
    "end": "447490"
  },
  {
    "text": "a container or a group of containers",
    "start": "447490",
    "end": "450010"
  },
  {
    "text": "also referred as tasks means loading or",
    "start": "450010",
    "end": "454660"
  },
  {
    "text": "running a single container or tasks on",
    "start": "454660",
    "end": "457480"
  },
  {
    "text": "your hosts or a cluster by specifying",
    "start": "457480",
    "end": "460900"
  },
  {
    "text": "the required resources like compute",
    "start": "460900",
    "end": "462820"
  },
  {
    "text": "memory and network ports I'll be using",
    "start": "462820",
    "end": "466960"
  },
  {
    "text": "the term hosts interchangeably with",
    "start": "466960",
    "end": "469150"
  },
  {
    "text": "instances here instance refers to an ec2",
    "start": "469150",
    "end": "472810"
  },
  {
    "text": "instance the docker CLI is great if you",
    "start": "472810",
    "end": "477040"
  },
  {
    "start": "474000",
    "end": "483000"
  },
  {
    "text": "want to run a container or a set of",
    "start": "477040",
    "end": "479410"
  },
  {
    "text": "containers on your laptop or on a single",
    "start": "479410",
    "end": "481930"
  },
  {
    "text": "host but it's challenging to scale from",
    "start": "481930",
    "end": "485350"
  },
  {
    "start": "483000",
    "end": "574000"
  },
  {
    "text": "a single container to thousands of",
    "start": "485350",
    "end": "487750"
  },
  {
    "text": "containers now you're suddenly managing",
    "start": "487750",
    "end": "491500"
  },
  {
    "text": "a cluster and managing a cluster is",
    "start": "491500",
    "end": "494110"
  },
  {
    "text": "really hard when you're dealing with a",
    "start": "494110",
    "end": "496390"
  },
  {
    "text": "cluster you need a way to intelligently",
    "start": "496390",
    "end": "499300"
  },
  {
    "text": "place your containers on the instances",
    "start": "499300",
    "end": "502210"
  },
  {
    "text": "that have the resources and that means",
    "start": "502210",
    "end": "504850"
  },
  {
    "text": "you need to know the state of everything",
    "start": "504850",
    "end": "507460"
  },
  {
    "text": "in your cluster for example at any given",
    "start": "507460",
    "end": "511000"
  },
  {
    "text": "point in time you'll need to know what",
    "start": "511000",
    "end": "513250"
  },
  {
    "text": "instances in your cluster have available",
    "start": "513250",
    "end": "515860"
  },
  {
    "text": "resources like memory and network ports",
    "start": "515860",
    "end": "518440"
  },
  {
    "text": "and if you need to add more underlying",
    "start": "518440",
    "end": "520479"
  },
  {
    "text": "instances to increase capacity",
    "start": "520479",
    "end": "522840"
  },
  {
    "text": "you'll also need to handle situations",
    "start": "522840",
    "end": "525010"
  },
  {
    "text": "when a container or an instance that is",
    "start": "525010",
    "end": "527740"
  },
  {
    "text": "running a container dies how",
    "start": "527740",
    "end": "530310"
  },
  {
    "text": "to recover from the failure of a",
    "start": "530310",
    "end": "531779"
  },
  {
    "text": "container how would you ensure that",
    "start": "531779",
    "end": "533730"
  },
  {
    "text": "containers that are scheduled are",
    "start": "533730",
    "end": "535650"
  },
  {
    "text": "registered with load balances how would",
    "start": "535650",
    "end": "538529"
  },
  {
    "text": "you roll out a new version of your",
    "start": "538529",
    "end": "540150"
  },
  {
    "text": "application or update the containers in",
    "start": "540150",
    "end": "542880"
  },
  {
    "text": "a rolling deployment or a Bluegreen type",
    "start": "542880",
    "end": "545340"
  },
  {
    "text": "of deployment also can you extend your",
    "start": "545340",
    "end": "548460"
  },
  {
    "text": "software delivery toolsets",
    "start": "548460",
    "end": "550050"
  },
  {
    "text": "like your existing CIC D pipelines to",
    "start": "550050",
    "end": "553050"
  },
  {
    "text": "integrate with the cluster management",
    "start": "553050",
    "end": "555029"
  },
  {
    "text": "system these are the questions and",
    "start": "555029",
    "end": "558200"
  },
  {
    "text": "challenges that our customers were",
    "start": "558200",
    "end": "560820"
  },
  {
    "text": "facing as they were running docker at",
    "start": "560820",
    "end": "563970"
  },
  {
    "text": "scale on AWS and this led us to build",
    "start": "563970",
    "end": "567029"
  },
  {
    "text": "ACS so let's now look at Amazon ec2",
    "start": "567029",
    "end": "570779"
  },
  {
    "text": "container service or ICS ECS is a highly",
    "start": "570779",
    "end": "576480"
  },
  {
    "text": "scalable high-performance cluster",
    "start": "576480",
    "end": "579390"
  },
  {
    "text": "management service you can use Amazon",
    "start": "579390",
    "end": "582540"
  },
  {
    "text": "easiest to schedule the placement of",
    "start": "582540",
    "end": "584820"
  },
  {
    "text": "containers across your cluster you can",
    "start": "584820",
    "end": "587730"
  },
  {
    "text": "also integrate your own scheduler or",
    "start": "587730",
    "end": "590160"
  },
  {
    "text": "third-party schedulers to meet your",
    "start": "590160",
    "end": "592890"
  },
  {
    "text": "specific requirements to fully",
    "start": "592890",
    "end": "595920"
  },
  {
    "text": "appreciate the value of ECS we need to",
    "start": "595920",
    "end": "598680"
  },
  {
    "start": "597000",
    "end": "612000"
  },
  {
    "text": "look underneath the hood obvious I will",
    "start": "598680",
    "end": "602400"
  },
  {
    "text": "describe the various components of ECS",
    "start": "602400",
    "end": "604620"
  },
  {
    "text": "to show you how we have solved some",
    "start": "604620",
    "end": "607160"
  },
  {
    "text": "complex challenges in managing a",
    "start": "607160",
    "end": "609660"
  },
  {
    "text": "distributed cluster at scale the first",
    "start": "609660",
    "end": "613200"
  },
  {
    "start": "612000",
    "end": "654000"
  },
  {
    "text": "component is a resource manager the",
    "start": "613200",
    "end": "616140"
  },
  {
    "text": "resource manager is responsible for",
    "start": "616140",
    "end": "618120"
  },
  {
    "text": "keeping track of resources like memory",
    "start": "618120",
    "end": "620640"
  },
  {
    "text": "CPU and network ports and the",
    "start": "620640",
    "end": "623820"
  },
  {
    "text": "availability of these resources at any",
    "start": "623820",
    "end": "626400"
  },
  {
    "text": "given time in the cluster on the slide",
    "start": "626400",
    "end": "629970"
  },
  {
    "text": "you will see resources which are really",
    "start": "629970",
    "end": "632070"
  },
  {
    "text": "easy to instances spread across to",
    "start": "632070",
    "end": "635130"
  },
  {
    "text": "availability zones these ec2 instances",
    "start": "635130",
    "end": "638700"
  },
  {
    "text": "are all running the docker daemon ECS",
    "start": "638700",
    "end": "642450"
  },
  {
    "text": "works across multiple availability zones",
    "start": "642450",
    "end": "645000"
  },
  {
    "text": "which means you can span your cluster",
    "start": "645000",
    "end": "648209"
  },
  {
    "text": "across availability zones to improve the",
    "start": "648209",
    "end": "651240"
  },
  {
    "text": "availability of your applications the",
    "start": "651240",
    "end": "653910"
  },
  {
    "text": "next component is the scheduler the",
    "start": "653910",
    "end": "656570"
  },
  {
    "start": "654000",
    "end": "691000"
  },
  {
    "text": "scheduler is responsible for scheduling",
    "start": "656570",
    "end": "659400"
  },
  {
    "text": "containers and tasks for execution on",
    "start": "659400",
    "end": "662790"
  },
  {
    "text": "the ec2 instance",
    "start": "662790",
    "end": "664140"
  },
  {
    "text": "is in the cluster the scheduler contains",
    "start": "664140",
    "end": "667470"
  },
  {
    "text": "the algorithms for assigning tasks to",
    "start": "667470",
    "end": "670110"
  },
  {
    "text": "nodes or instances in the cluster based",
    "start": "670110",
    "end": "673620"
  },
  {
    "text": "on the resources that are available the",
    "start": "673620",
    "end": "676560"
  },
  {
    "text": "scheduler is also responsible for the",
    "start": "676560",
    "end": "678930"
  },
  {
    "text": "task execution lifecycle which means it",
    "start": "678930",
    "end": "682680"
  },
  {
    "text": "keeps a track to see if a given task is",
    "start": "682680",
    "end": "685050"
  },
  {
    "text": "alive or dead and in the case the task",
    "start": "685050",
    "end": "687780"
  },
  {
    "text": "dies it will take actions to reschedule",
    "start": "687780",
    "end": "690570"
  },
  {
    "text": "it if you put these two things together",
    "start": "690570",
    "end": "692880"
  },
  {
    "start": "691000",
    "end": "769000"
  },
  {
    "text": "you get the core cluster management",
    "start": "692880",
    "end": "695790"
  },
  {
    "text": "functionality of ecs ECS has a cluster",
    "start": "695790",
    "end": "700410"
  },
  {
    "text": "management engine that coordinates the",
    "start": "700410",
    "end": "702990"
  },
  {
    "text": "cluster of instances which is just a",
    "start": "702990",
    "end": "705540"
  },
  {
    "text": "pool of CPU memory storage and",
    "start": "705540",
    "end": "708060"
  },
  {
    "text": "networking resources the instances are",
    "start": "708060",
    "end": "711330"
  },
  {
    "text": "nothing but ec2 instances that have been",
    "start": "711330",
    "end": "713940"
  },
  {
    "text": "checked into a cluster these instances",
    "start": "713940",
    "end": "717030"
  },
  {
    "text": "run in your own VPC and you can SSH into",
    "start": "717030",
    "end": "719940"
  },
  {
    "text": "them these instances are dynamically",
    "start": "719940",
    "end": "723120"
  },
  {
    "text": "scalable which means you can add",
    "start": "723120",
    "end": "726240"
  },
  {
    "text": "additional instances in your cluster or",
    "start": "726240",
    "end": "729200"
  },
  {
    "text": "remove them as required by your scaling",
    "start": "729200",
    "end": "732240"
  },
  {
    "text": "demands it is possible to have a single",
    "start": "732240",
    "end": "735210"
  },
  {
    "text": "instance cluster or scale to hundreds or",
    "start": "735210",
    "end": "738030"
  },
  {
    "text": "thousands of instances on each instance",
    "start": "738030",
    "end": "741600"
  },
  {
    "text": "we have the EECS",
    "start": "741600",
    "end": "743160"
  },
  {
    "text": "agent installed which communicates with",
    "start": "743160",
    "end": "745710"
  },
  {
    "text": "the cluster management engine the",
    "start": "745710",
    "end": "749070"
  },
  {
    "text": "easiest agent processes easiest commands",
    "start": "749070",
    "end": "751350"
  },
  {
    "text": "and converts them into docker commands",
    "start": "751350",
    "end": "753410"
  },
  {
    "text": "the agent instructs the ec2 instances to",
    "start": "753410",
    "end": "756900"
  },
  {
    "text": "start and stop the containers and",
    "start": "756900",
    "end": "758790"
  },
  {
    "text": "monitor the resources used and available",
    "start": "758790",
    "end": "761090"
  },
  {
    "text": "across the cluster the easiest agent is",
    "start": "761090",
    "end": "765180"
  },
  {
    "text": "open sourced and published on github so",
    "start": "765180",
    "end": "767280"
  },
  {
    "text": "you can extend and contribute to the",
    "start": "767280",
    "end": "769800"
  },
  {
    "start": "769000",
    "end": "834000"
  },
  {
    "text": "coordinator cluster we need a single",
    "start": "769800",
    "end": "772020"
  },
  {
    "text": "source of truth for all the instances in",
    "start": "772020",
    "end": "774780"
  },
  {
    "text": "the cluster and keep track of things",
    "start": "774780",
    "end": "776970"
  },
  {
    "text": "like tasks that are running on instances",
    "start": "776970",
    "end": "779340"
  },
  {
    "text": "the containers that make up the tasks",
    "start": "779340",
    "end": "781560"
  },
  {
    "text": "and the resources available this is",
    "start": "781560",
    "end": "784410"
  },
  {
    "text": "known as cluster state and at the heart",
    "start": "784410",
    "end": "787710"
  },
  {
    "text": "of easiest is a key value store that",
    "start": "787710",
    "end": "790260"
  },
  {
    "text": "stores all of this cluster State this",
    "start": "790260",
    "end": "793920"
  },
  {
    "text": "key value store needs to be disturbed",
    "start": "793920",
    "end": "796020"
  },
  {
    "text": "for durability and availability but",
    "start": "796020",
    "end": "799110"
  },
  {
    "text": "because the key value store is",
    "start": "799110",
    "end": "800820"
  },
  {
    "text": "distributed making sure data is",
    "start": "800820",
    "end": "803190"
  },
  {
    "text": "consistent and handling concurrent",
    "start": "803190",
    "end": "805740"
  },
  {
    "text": "changes becomes more difficult for",
    "start": "805740",
    "end": "808709"
  },
  {
    "text": "example if two developers request all",
    "start": "808709",
    "end": "811920"
  },
  {
    "text": "the remaining memory resources from a",
    "start": "811920",
    "end": "814230"
  },
  {
    "text": "cluster for their container at the same",
    "start": "814230",
    "end": "816720"
  },
  {
    "text": "time only one container can actually",
    "start": "816720",
    "end": "819300"
  },
  {
    "text": "provision those resources and the other",
    "start": "819300",
    "end": "821610"
  },
  {
    "text": "would have to be told that Gerry Chris",
    "start": "821610",
    "end": "823470"
  },
  {
    "text": "could not be completed within easiest we",
    "start": "823470",
    "end": "827459"
  },
  {
    "text": "have used Amazon's cool distributed",
    "start": "827459",
    "end": "829830"
  },
  {
    "text": "systems to handle such concurrent",
    "start": "829830",
    "end": "831870"
  },
  {
    "text": "requests at scale and another unique",
    "start": "831870",
    "end": "835260"
  },
  {
    "start": "834000",
    "end": "880000"
  },
  {
    "text": "aspect of ECS is the API layer we have",
    "start": "835260",
    "end": "838470"
  },
  {
    "text": "decoupled the container scheduling from",
    "start": "838470",
    "end": "841110"
  },
  {
    "text": "the cluster management we have opened up",
    "start": "841110",
    "end": "843779"
  },
  {
    "text": "the Amazon",
    "start": "843779",
    "end": "844440"
  },
  {
    "text": "ECS cluster manager through a set of",
    "start": "844440",
    "end": "846779"
  },
  {
    "text": "api's that a lot of customers to access",
    "start": "846779",
    "end": "849540"
  },
  {
    "text": "all the cluster state information stored",
    "start": "849540",
    "end": "852390"
  },
  {
    "text": "in the key value store this API allows",
    "start": "852390",
    "end": "855779"
  },
  {
    "text": "you to connect different varieties of",
    "start": "855779",
    "end": "857580"
  },
  {
    "text": "schedulers to ECS this ensures that you",
    "start": "857580",
    "end": "861480"
  },
  {
    "text": "get the benefits of a robust cluster",
    "start": "861480",
    "end": "863850"
  },
  {
    "text": "management engine and a key value store",
    "start": "863850",
    "end": "866430"
  },
  {
    "text": "whereas you can choose our default",
    "start": "866430",
    "end": "869880"
  },
  {
    "text": "schedulers or you can choose other",
    "start": "869880",
    "end": "871529"
  },
  {
    "text": "schedulers with these years you can also",
    "start": "871529",
    "end": "874740"
  },
  {
    "text": "connect TCS with your continuous",
    "start": "874740",
    "end": "876720"
  },
  {
    "text": "integration and continuous delivery",
    "start": "876720",
    "end": "878730"
  },
  {
    "text": "pipelines I hope this gives you a good",
    "start": "878730",
    "end": "881700"
  },
  {
    "start": "880000",
    "end": "929000"
  },
  {
    "text": "background on the challenges of managing",
    "start": "881700",
    "end": "884100"
  },
  {
    "text": "a distributed cluster and how we have",
    "start": "884100",
    "end": "886680"
  },
  {
    "text": "solved these challenges using SES now",
    "start": "886680",
    "end": "890760"
  },
  {
    "text": "let's look at some of the benefits of",
    "start": "890760",
    "end": "892500"
  },
  {
    "text": "using easiest the obvious benefit is",
    "start": "892500",
    "end": "896459"
  },
  {
    "text": "there is nothing to run by using SES you",
    "start": "896459",
    "end": "900240"
  },
  {
    "text": "are automatically getting a robust",
    "start": "900240",
    "end": "902029"
  },
  {
    "text": "distributed cluster management engine a",
    "start": "902029",
    "end": "904850"
  },
  {
    "text": "scheduler and a key value store which",
    "start": "904850",
    "end": "908130"
  },
  {
    "text": "you can leverage straight away without",
    "start": "908130",
    "end": "909870"
  },
  {
    "text": "installing a single piece of software it",
    "start": "909870",
    "end": "912899"
  },
  {
    "text": "manages all of your cluster State and",
    "start": "912899",
    "end": "915600"
  },
  {
    "text": "containers with built-in control and",
    "start": "915600",
    "end": "918300"
  },
  {
    "text": "monitoring you can easily scale from a",
    "start": "918300",
    "end": "921480"
  },
  {
    "text": "few containers to thousands of",
    "start": "921480",
    "end": "923339"
  },
  {
    "text": "containers just by calling an API and",
    "start": "923339",
    "end": "925770"
  },
  {
    "text": "without having to deal with the",
    "start": "925770",
    "end": "927630"
  },
  {
    "text": "underlying complexity",
    "start": "927630",
    "end": "929370"
  },
  {
    "start": "929000",
    "end": "966000"
  },
  {
    "text": "to illustrate the point on scaling the",
    "start": "929370",
    "end": "931620"
  },
  {
    "text": "slide shows the result of a test we're",
    "start": "931620",
    "end": "934350"
  },
  {
    "text": "on using ECS over a three-day period we",
    "start": "934350",
    "end": "938760"
  },
  {
    "text": "scaled a cluster from around 200",
    "start": "938760",
    "end": "940800"
  },
  {
    "text": "instances to over 1,000 instances as",
    "start": "940800",
    "end": "944480"
  },
  {
    "text": "represented by the purple line the green",
    "start": "944480",
    "end": "948089"
  },
  {
    "text": "and the red line show the P 99 and P 50",
    "start": "948089",
    "end": "951690"
  },
  {
    "text": "Layton sees as you can see they are",
    "start": "951690",
    "end": "954390"
  },
  {
    "text": "relatively flat this demonstrates the",
    "start": "954390",
    "end": "957270"
  },
  {
    "text": "performance and stability of Macias",
    "start": "957270",
    "end": "959670"
  },
  {
    "text": "which you can extract even when you",
    "start": "959670",
    "end": "962790"
  },
  {
    "text": "scale or cluster to a very high degree",
    "start": "962790",
    "end": "965540"
  },
  {
    "text": "Amazon ECS has two built-in schedulers",
    "start": "965540",
    "end": "968960"
  },
  {
    "start": "966000",
    "end": "997000"
  },
  {
    "text": "one is a scheduler for long-running",
    "start": "968960",
    "end": "971610"
  },
  {
    "text": "applications and services such as",
    "start": "971610",
    "end": "974130"
  },
  {
    "text": "user-facing web applications another is",
    "start": "974130",
    "end": "977460"
  },
  {
    "text": "a scheduler for short running tasks like",
    "start": "977460",
    "end": "979980"
  },
  {
    "text": "bad jobs and because this just provides",
    "start": "979980",
    "end": "982650"
  },
  {
    "text": "you with a powerful set of api's it",
    "start": "982650",
    "end": "984600"
  },
  {
    "text": "allows you to integrate your own custom",
    "start": "984600",
    "end": "986790"
  },
  {
    "text": "schedulers as well as open source",
    "start": "986790",
    "end": "989010"
  },
  {
    "text": "schedulers this allows you to have very",
    "start": "989010",
    "end": "993029"
  },
  {
    "text": "flexible methods to do scheduling on SES",
    "start": "993029",
    "end": "996380"
  },
  {
    "text": "Amazon SES is built to integrate well",
    "start": "996380",
    "end": "999510"
  },
  {
    "start": "997000",
    "end": "1124000"
  },
  {
    "text": "with other AWS services you can set up",
    "start": "999510",
    "end": "1002990"
  },
  {
    "text": "each cluster in its own virtual private",
    "start": "1002990",
    "end": "1005450"
  },
  {
    "text": "cloud and use security groups to control",
    "start": "1005450",
    "end": "1008600"
  },
  {
    "text": "network access to your ec2 instances you",
    "start": "1008600",
    "end": "1012200"
  },
  {
    "text": "can use elastic block storage for",
    "start": "1012200",
    "end": "1014089"
  },
  {
    "text": "persistent storage you can route traffic",
    "start": "1014089",
    "end": "1016850"
  },
  {
    "text": "to containers using elastic load",
    "start": "1016850",
    "end": "1019160"
  },
  {
    "text": "balances the newer version of load",
    "start": "1019160",
    "end": "1022190"
  },
  {
    "text": "balancers which are called application",
    "start": "1022190",
    "end": "1024170"
  },
  {
    "text": "load balancers can register tasks with",
    "start": "1024170",
    "end": "1027438"
  },
  {
    "text": "dynamically allocated ports assigned by",
    "start": "1027439",
    "end": "1030020"
  },
  {
    "text": "ICS there is native integration with",
    "start": "1030020",
    "end": "1033589"
  },
  {
    "text": "cloud watch from monitoring and alarms",
    "start": "1033589",
    "end": "1035720"
  },
  {
    "text": "and you can use cloud watch to auto",
    "start": "1035720",
    "end": "1038178"
  },
  {
    "text": "scale your containers or underlying ec2",
    "start": "1038179",
    "end": "1041240"
  },
  {
    "text": "instances cloud trail integration",
    "start": "1041240",
    "end": "1044928"
  },
  {
    "text": "captures every API access for security",
    "start": "1044929",
    "end": "1048350"
  },
  {
    "text": "analysis resource tracking and",
    "start": "1048350",
    "end": "1050620"
  },
  {
    "text": "compliance and a powerful security",
    "start": "1050620",
    "end": "1053690"
  },
  {
    "text": "feature is integration with iam which",
    "start": "1053690",
    "end": "1056750"
  },
  {
    "text": "allows you to assign I am roles to tasks",
    "start": "1056750",
    "end": "1059810"
  },
  {
    "text": "and limit the access available on",
    "start": "1059810",
    "end": "1062610"
  },
  {
    "text": "containers to other AWS resources like",
    "start": "1062610",
    "end": "1065820"
  },
  {
    "text": "s3 or DynamoDB this ensures that your",
    "start": "1065820",
    "end": "1069270"
  },
  {
    "text": "containers run with improved security",
    "start": "1069270",
    "end": "1071360"
  },
  {
    "text": "I've discussed before",
    "start": "1071360",
    "end": "1073290"
  },
  {
    "text": "ECS has a simple set of API that allows",
    "start": "1073290",
    "end": "1075660"
  },
  {
    "text": "it to be very easy to integrate and",
    "start": "1075660",
    "end": "1077970"
  },
  {
    "text": "extend the easiest CLI can be used to",
    "start": "1077970",
    "end": "1081540"
  },
  {
    "text": "integrate into your custom scheduler or",
    "start": "1081540",
    "end": "1083700"
  },
  {
    "text": "CI CD pipeline the CLI supports docker",
    "start": "1083700",
    "end": "1087630"
  },
  {
    "text": "compose which means you can use docker",
    "start": "1087630",
    "end": "1090030"
  },
  {
    "text": "compose to define tasks on issues so in",
    "start": "1090030",
    "end": "1094559"
  },
  {
    "text": "a sense you are getting everything that",
    "start": "1094559",
    "end": "1096570"
  },
  {
    "text": "you see in the orange box as an API this",
    "start": "1096570",
    "end": "1100980"
  },
  {
    "text": "lets you focus your time on developing",
    "start": "1100980",
    "end": "1103320"
  },
  {
    "text": "applications and services rather than",
    "start": "1103320",
    "end": "1106290"
  },
  {
    "text": "doing the undifferentiated heavy lifting",
    "start": "1106290",
    "end": "1108330"
  },
  {
    "text": "of operating and maintaining or",
    "start": "1108330",
    "end": "1110340"
  },
  {
    "text": "container management system which ECS",
    "start": "1110340",
    "end": "1112620"
  },
  {
    "text": "does so well since we're talking about",
    "start": "1112620",
    "end": "1115080"
  },
  {
    "text": "running containers on AWS I'd also like",
    "start": "1115080",
    "end": "1118080"
  },
  {
    "text": "to discuss an Associated service called",
    "start": "1118080",
    "end": "1120179"
  },
  {
    "text": "Amazon ec2 container registry or easier",
    "start": "1120179",
    "end": "1124370"
  },
  {
    "text": "Amazon ECR is a fully managed docker",
    "start": "1124370",
    "end": "1128010"
  },
  {
    "text": "container registry that allows you to",
    "start": "1128010",
    "end": "1130230"
  },
  {
    "text": "store and manage and deploy docker",
    "start": "1130230",
    "end": "1133110"
  },
  {
    "text": "container images you don't have to",
    "start": "1133110",
    "end": "1136110"
  },
  {
    "start": "1135000",
    "end": "1146000"
  },
  {
    "text": "install any software to manage your",
    "start": "1136110",
    "end": "1138120"
  },
  {
    "text": "container registry just push or images",
    "start": "1138120",
    "end": "1140970"
  },
  {
    "text": "to Amazon ECR and pull the images when",
    "start": "1140970",
    "end": "1143730"
  },
  {
    "text": "you need to deploy easier is really",
    "start": "1143730",
    "end": "1147210"
  },
  {
    "start": "1146000",
    "end": "1172000"
  },
  {
    "text": "effective when you're Sukhram security",
    "start": "1147210",
    "end": "1149490"
  },
  {
    "text": "requirements are high ECR transfers your",
    "start": "1149490",
    "end": "1153299"
  },
  {
    "text": "container images over HTTPS and",
    "start": "1153299",
    "end": "1155720"
  },
  {
    "text": "automatically encrypts your images at",
    "start": "1155720",
    "end": "1158070"
  },
  {
    "text": "rest you can configure policies to",
    "start": "1158070",
    "end": "1160980"
  },
  {
    "text": "manage permissions and control access to",
    "start": "1160980",
    "end": "1163679"
  },
  {
    "text": "your images using I am users and roles",
    "start": "1163679",
    "end": "1166320"
  },
  {
    "text": "without having to manage credentials",
    "start": "1166320",
    "end": "1168510"
  },
  {
    "text": "directly on your ec2 instances it is",
    "start": "1168510",
    "end": "1171990"
  },
  {
    "text": "backed by Amazon s3 which is highly",
    "start": "1171990",
    "end": "1173970"
  },
  {
    "start": "1172000",
    "end": "1199000"
  },
  {
    "text": "scalable and durable and another",
    "start": "1173970",
    "end": "1176940"
  },
  {
    "text": "important benefit is ECR integrates with",
    "start": "1176940",
    "end": "1179910"
  },
  {
    "text": "ECS and the docker CLI allowing you to",
    "start": "1179910",
    "end": "1183540"
  },
  {
    "text": "simplify your development and production",
    "start": "1183540",
    "end": "1185429"
  },
  {
    "text": "workload workflow sorry you can easily",
    "start": "1185429",
    "end": "1189120"
  },
  {
    "text": "push your container images to ECR using",
    "start": "1189120",
    "end": "1192330"
  },
  {
    "text": "the docker CLI from your development",
    "start": "1192330",
    "end": "1194400"
  },
  {
    "text": "machine and easiest can",
    "start": "1194400",
    "end": "1196500"
  },
  {
    "text": "directly for production deployments all",
    "start": "1196500",
    "end": "1199020"
  },
  {
    "start": "1199000",
    "end": "1216000"
  },
  {
    "text": "right so now we have had a solid",
    "start": "1199020",
    "end": "1202770"
  },
  {
    "text": "understanding of container management",
    "start": "1202770",
    "end": "1204770"
  },
  {
    "text": "ECS and ECR now let's look at how you",
    "start": "1204770",
    "end": "1209100"
  },
  {
    "text": "can run your services how to get your",
    "start": "1209100",
    "end": "1211830"
  },
  {
    "text": "applications into containers distributed",
    "start": "1211830",
    "end": "1214350"
  },
  {
    "text": "across in your cluster so we start by",
    "start": "1214350",
    "end": "1217020"
  },
  {
    "start": "1216000",
    "end": "1296000"
  },
  {
    "text": "modeling your application using a task",
    "start": "1217020",
    "end": "1219720"
  },
  {
    "text": "definition this file defines the",
    "start": "1219720",
    "end": "1223080"
  },
  {
    "text": "containers you want to run together on",
    "start": "1223080",
    "end": "1225060"
  },
  {
    "text": "the same instance as an example a task",
    "start": "1225060",
    "end": "1228960"
  },
  {
    "text": "could be a group of containers one of",
    "start": "1228960",
    "end": "1231780"
  },
  {
    "text": "which could be engineers front ending a",
    "start": "1231780",
    "end": "1233520"
  },
  {
    "text": "rails app and a container for memcache",
    "start": "1233520",
    "end": "1236300"
  },
  {
    "text": "all of which all of its sure you would",
    "start": "1236300",
    "end": "1239010"
  },
  {
    "text": "want to run together on an instance a",
    "start": "1239010",
    "end": "1241010"
  },
  {
    "text": "task definition lets you specify docker",
    "start": "1241010",
    "end": "1243960"
  },
  {
    "text": "concepts like links to establish network",
    "start": "1243960",
    "end": "1246840"
  },
  {
    "text": "channels between the containers and",
    "start": "1246840",
    "end": "1248700"
  },
  {
    "text": "share volumes needed by all the",
    "start": "1248700",
    "end": "1251100"
  },
  {
    "text": "containers tough definitions are tracked",
    "start": "1251100",
    "end": "1254250"
  },
  {
    "text": "by name and revision and can be version",
    "start": "1254250",
    "end": "1256560"
  },
  {
    "text": "control through a source code repository",
    "start": "1256560",
    "end": "1259400"
  },
  {
    "text": "in order to create a task definition you",
    "start": "1259400",
    "end": "1262800"
  },
  {
    "text": "specify the docker image to be used for",
    "start": "1262800",
    "end": "1265590"
  },
  {
    "text": "the container and you can specify",
    "start": "1265590",
    "end": "1267210"
  },
  {
    "text": "resources such as CPU memory network",
    "start": "1267210",
    "end": "1269820"
  },
  {
    "text": "ports and volume for each container you",
    "start": "1269820",
    "end": "1273180"
  },
  {
    "text": "can also specify which containers are",
    "start": "1273180",
    "end": "1275310"
  },
  {
    "text": "essential for the task to run as a whole",
    "start": "1275310",
    "end": "1277700"
  },
  {
    "text": "this means if a particular container",
    "start": "1277700",
    "end": "1280500"
  },
  {
    "text": "dies ECS can decide to reschedule the",
    "start": "1280500",
    "end": "1283800"
  },
  {
    "text": "entire task the task definition is",
    "start": "1283800",
    "end": "1286740"
  },
  {
    "text": "essentially a JSON file or also as",
    "start": "1286740",
    "end": "1289500"
  },
  {
    "text": "discussed before you can use docker",
    "start": "1289500",
    "end": "1291210"
  },
  {
    "text": "compose to create your task definitions",
    "start": "1291210",
    "end": "1294830"
  },
  {
    "text": "once you have to find a task as a task",
    "start": "1294830",
    "end": "1297900"
  },
  {
    "start": "1296000",
    "end": "1325000"
  },
  {
    "text": "definition the next step is to schedule",
    "start": "1297900",
    "end": "1300390"
  },
  {
    "text": "this task to run on a cluster of ec2",
    "start": "1300390",
    "end": "1303240"
  },
  {
    "text": "instances this instantiates the docker",
    "start": "1303240",
    "end": "1307040"
  },
  {
    "text": "images and runs them using the specified",
    "start": "1307040",
    "end": "1310200"
  },
  {
    "text": "resource parameters provided in the task",
    "start": "1310200",
    "end": "1312270"
  },
  {
    "text": "definition this also keeps a track of",
    "start": "1312270",
    "end": "1315900"
  },
  {
    "text": "the state of the cluster and all the",
    "start": "1315900",
    "end": "1318150"
  },
  {
    "text": "tasks it ensures that the desired number",
    "start": "1318150",
    "end": "1320430"
  },
  {
    "text": "of tasks are running and reschedule if",
    "start": "1320430",
    "end": "1322920"
  },
  {
    "text": "tasks failed to run so to recap task is",
    "start": "1322920",
    "end": "1326760"
  },
  {
    "start": "1325000",
    "end": "1340000"
  },
  {
    "text": "a unit of work which is a grouping of",
    "start": "1326760",
    "end": "1329250"
  },
  {
    "text": "related containers",
    "start": "1329250",
    "end": "1330390"
  },
  {
    "text": "need to run on the same instance you",
    "start": "1330390",
    "end": "1333300"
  },
  {
    "text": "could have many tasks running on the",
    "start": "1333300",
    "end": "1334770"
  },
  {
    "text": "same instance and this can be controlled",
    "start": "1334770",
    "end": "1336810"
  },
  {
    "text": "to through the scheduler now you may",
    "start": "1336810",
    "end": "1340470"
  },
  {
    "start": "1340000",
    "end": "1387000"
  },
  {
    "text": "want to run a task as a long-running",
    "start": "1340470",
    "end": "1342480"
  },
  {
    "text": "service for example of web service that",
    "start": "1342480",
    "end": "1345240"
  },
  {
    "text": "needs to be always available to take",
    "start": "1345240",
    "end": "1347040"
  },
  {
    "text": "requests from users ECS has a scheduler",
    "start": "1347040",
    "end": "1350910"
  },
  {
    "text": "that allows you to run long running",
    "start": "1350910",
    "end": "1352950"
  },
  {
    "text": "tasks like web applications this",
    "start": "1352950",
    "end": "1356040"
  },
  {
    "text": "scheduler is called a service scheduler",
    "start": "1356040",
    "end": "1358010"
  },
  {
    "text": "in the case of a service you would",
    "start": "1358010",
    "end": "1360570"
  },
  {
    "text": "reference a task definition specify the",
    "start": "1360570",
    "end": "1363330"
  },
  {
    "text": "number of tasks to run and optionally",
    "start": "1363330",
    "end": "1366060"
  },
  {
    "text": "place the service behind a load balancer",
    "start": "1366060",
    "end": "1368990"
  },
  {
    "text": "the scheduler will launch the required",
    "start": "1368990",
    "end": "1371460"
  },
  {
    "text": "number of tasks and these will be",
    "start": "1371460",
    "end": "1373590"
  },
  {
    "text": "registered with the elastic load",
    "start": "1373590",
    "end": "1375360"
  },
  {
    "text": "balancer the scheduler will maintain the",
    "start": "1375360",
    "end": "1378810"
  },
  {
    "text": "number of tasks that you run across",
    "start": "1378810",
    "end": "1380460"
  },
  {
    "text": "multiple availability zones and",
    "start": "1380460",
    "end": "1383240"
  },
  {
    "text": "automatically load balance across",
    "start": "1383240",
    "end": "1385370"
  },
  {
    "text": "availability zones what would you do if",
    "start": "1385370",
    "end": "1387930"
  },
  {
    "start": "1387000",
    "end": "1409000"
  },
  {
    "text": "you want to scale a service scaling a",
    "start": "1387930",
    "end": "1390660"
  },
  {
    "text": "service is really simple you just",
    "start": "1390660",
    "end": "1392820"
  },
  {
    "text": "specify the number of tasks that you",
    "start": "1392820",
    "end": "1394770"
  },
  {
    "text": "need and the scheduler will find the",
    "start": "1394770",
    "end": "1396810"
  },
  {
    "text": "resources in your cluster and launch",
    "start": "1396810",
    "end": "1398910"
  },
  {
    "text": "additional tasks and similarly if you",
    "start": "1398910",
    "end": "1402090"
  },
  {
    "text": "reduce the number of tasks the scheduler",
    "start": "1402090",
    "end": "1404250"
  },
  {
    "text": "will accordingly terminate tasks and",
    "start": "1404250",
    "end": "1406050"
  },
  {
    "text": "scale it down overall the architecture",
    "start": "1406050",
    "end": "1410520"
  },
  {
    "text": "shown depicts the functioning of your",
    "start": "1410520",
    "end": "1412950"
  },
  {
    "text": "cluster ECS maintains the number of",
    "start": "1412950",
    "end": "1416700"
  },
  {
    "text": "desired tasks within your cluster you",
    "start": "1416700",
    "end": "1419850"
  },
  {
    "text": "can leverage cloud watch to publish",
    "start": "1419850",
    "end": "1421740"
  },
  {
    "text": "metrics to determine the health of your",
    "start": "1421740",
    "end": "1423600"
  },
  {
    "text": "cluster you can also auto scale tasks",
    "start": "1423600",
    "end": "1426660"
  },
  {
    "text": "based on thresholds that you see that",
    "start": "1426660",
    "end": "1429060"
  },
  {
    "text": "you set on cloud watch matrix UCS offers",
    "start": "1429060",
    "end": "1432690"
  },
  {
    "text": "simple mechanisms when you want to",
    "start": "1432690",
    "end": "1434610"
  },
  {
    "text": "deploy a new version of your application",
    "start": "1434610",
    "end": "1436740"
  },
  {
    "text": "you can update the tasks with the new",
    "start": "1436740",
    "end": "1440040"
  },
  {
    "text": "version of the docker images and easiest",
    "start": "1440040",
    "end": "1442890"
  },
  {
    "text": "will start scheduled scheduling these",
    "start": "1442890",
    "end": "1444900"
  },
  {
    "text": "tasks with a new version in the process",
    "start": "1444900",
    "end": "1448710"
  },
  {
    "text": "ECS will automatically drain out the",
    "start": "1448710",
    "end": "1450780"
  },
  {
    "text": "connections from the tasks running the",
    "start": "1450780",
    "end": "1453000"
  },
  {
    "text": "older version gradually the tasks with",
    "start": "1453000",
    "end": "1456000"
  },
  {
    "start": "1454000",
    "end": "1500000"
  },
  {
    "text": "the older version of your applications",
    "start": "1456000",
    "end": "1457770"
  },
  {
    "text": "are drained off and you are left with a",
    "start": "1457770",
    "end": "1460890"
  },
  {
    "text": "cluster which only has",
    "start": "1460890",
    "end": "1463120"
  },
  {
    "text": "newer version of your application now",
    "start": "1463120",
    "end": "1465820"
  },
  {
    "text": "you have additional ways to control the",
    "start": "1465820",
    "end": "1467650"
  },
  {
    "text": "number of tasks that can be running",
    "start": "1467650",
    "end": "1469840"
  },
  {
    "text": "while updating a service two parameters",
    "start": "1469840",
    "end": "1473260"
  },
  {
    "text": "that control the number of tasks running",
    "start": "1473260",
    "end": "1475270"
  },
  {
    "text": "while updating a service are the minimum",
    "start": "1475270",
    "end": "1477940"
  },
  {
    "text": "healthy percent and the maximum healthy",
    "start": "1477940",
    "end": "1479950"
  },
  {
    "text": "percent these specify the lower limit",
    "start": "1479950",
    "end": "1483190"
  },
  {
    "text": "and the upper limit of the number of",
    "start": "1483190",
    "end": "1485620"
  },
  {
    "text": "healthy tasks that can be run by",
    "start": "1485620",
    "end": "1488680"
  },
  {
    "text": "modifying these parameters you can",
    "start": "1488680",
    "end": "1490240"
  },
  {
    "text": "control the type of deployments for",
    "start": "1490240",
    "end": "1492820"
  },
  {
    "text": "example choosing a rolling deployment or",
    "start": "1492820",
    "end": "1494800"
  },
  {
    "text": "a Bluegreen deployment while updating to",
    "start": "1494800",
    "end": "1497260"
  },
  {
    "text": "a newer version of your application for",
    "start": "1497260",
    "end": "1499750"
  },
  {
    "text": "example let's say you have set the",
    "start": "1499750",
    "end": "1502660"
  },
  {
    "start": "1500000",
    "end": "1526000"
  },
  {
    "text": "minimum healthy percent as 50% and the",
    "start": "1502660",
    "end": "1505420"
  },
  {
    "text": "maximum is 100% while updating a service",
    "start": "1505420",
    "end": "1508320"
  },
  {
    "text": "essentially you are instructing ecs that",
    "start": "1508320",
    "end": "1511510"
  },
  {
    "text": "it can drop the number of tasks by half",
    "start": "1511510",
    "end": "1513610"
  },
  {
    "text": "if needed while it works its way",
    "start": "1513610",
    "end": "1516460"
  },
  {
    "text": "launching newer versions of the tasks",
    "start": "1516460",
    "end": "1518910"
  },
  {
    "text": "this is almost like doing a rolling",
    "start": "1518910",
    "end": "1521200"
  },
  {
    "text": "deployment where half the tasks are",
    "start": "1521200",
    "end": "1523420"
  },
  {
    "text": "updated before the other half for us if",
    "start": "1523420",
    "end": "1527740"
  },
  {
    "start": "1526000",
    "end": "1559000"
  },
  {
    "text": "you'd like to maintain full capacity for",
    "start": "1527740",
    "end": "1530170"
  },
  {
    "text": "your older version of tasks",
    "start": "1530170",
    "end": "1531910"
  },
  {
    "text": "choosing a minimum of 100% and a maximum",
    "start": "1531910",
    "end": "1535780"
  },
  {
    "text": "of 200% provides a Bluegreen type of",
    "start": "1535780",
    "end": "1538570"
  },
  {
    "text": "deployment here ECS launches new tasks",
    "start": "1538570",
    "end": "1542590"
  },
  {
    "text": "with the revised version and essentially",
    "start": "1542590",
    "end": "1545170"
  },
  {
    "text": "doubles number of tasks that are in the",
    "start": "1545170",
    "end": "1547059"
  },
  {
    "text": "service before removing the older tasks",
    "start": "1547059",
    "end": "1550110"
  },
  {
    "text": "and you can see how easy s simplifies",
    "start": "1550110",
    "end": "1552820"
  },
  {
    "text": "your deployment processes while",
    "start": "1552820",
    "end": "1554770"
  },
  {
    "text": "maintaining desired level of capacity",
    "start": "1554770",
    "end": "1556410"
  },
  {
    "text": "for serving your users well that",
    "start": "1556410",
    "end": "1560050"
  },
  {
    "start": "1559000",
    "end": "1586000"
  },
  {
    "text": "concludes my topic on how you can use",
    "start": "1560050",
    "end": "1562420"
  },
  {
    "text": "ECS to manage containers at scale the",
    "start": "1562420",
    "end": "1566980"
  },
  {
    "text": "slide shows some of our customers who",
    "start": "1566980",
    "end": "1569230"
  },
  {
    "text": "are already using easiest for their",
    "start": "1569230",
    "end": "1571420"
  },
  {
    "text": "production workloads these customers",
    "start": "1571420",
    "end": "1574240"
  },
  {
    "text": "include financial organizations such as",
    "start": "1574240",
    "end": "1576280"
  },
  {
    "text": "Capital One and large internet",
    "start": "1576280",
    "end": "1578830"
  },
  {
    "text": "businesses such as Expedia you can learn",
    "start": "1578830",
    "end": "1581860"
  },
  {
    "text": "about how they use ECS by going to our",
    "start": "1581860",
    "end": "1584170"
  },
  {
    "text": "website if you'd like to learn more you",
    "start": "1584170",
    "end": "1588220"
  },
  {
    "start": "1586000",
    "end": "1625000"
  },
  {
    "text": "can get more information at",
    "start": "1588220",
    "end": "1589570"
  },
  {
    "text": "aws.amazon.com slash ECS you can also",
    "start": "1589570",
    "end": "1594490"
  },
  {
    "text": "follow our easy as log",
    "start": "1594490",
    "end": "1596679"
  },
  {
    "text": "is given as a link on the slide if you'd",
    "start": "1596679",
    "end": "1599559"
  },
  {
    "text": "like to gain hands-on experience with",
    "start": "1599559",
    "end": "1601240"
  },
  {
    "text": "AWS please watch our instructional",
    "start": "1601240",
    "end": "1603730"
  },
  {
    "text": "videos and explore the self-paced labs",
    "start": "1603730",
    "end": "1606960"
  },
  {
    "text": "you can attend our instructor-led",
    "start": "1606960",
    "end": "1608950"
  },
  {
    "text": "classes and learn how to design deploy",
    "start": "1608950",
    "end": "1611740"
  },
  {
    "text": "and operate highly available",
    "start": "1611740",
    "end": "1613740"
  },
  {
    "text": "cost-effective and secure applications",
    "start": "1613740",
    "end": "1616509"
  },
  {
    "text": "on AWS you can get more info by visiting",
    "start": "1616509",
    "end": "1620619"
  },
  {
    "text": "the URL AWS amazon.com slash training so",
    "start": "1620619",
    "end": "1624820"
  },
  {
    "text": "thank you for attending this session I",
    "start": "1624820",
    "end": "1626350"
  },
  {
    "start": "1625000",
    "end": "1643000"
  },
  {
    "text": "hope you found it interesting do provide",
    "start": "1626350",
    "end": "1629710"
  },
  {
    "text": "us with your feedback and let us know",
    "start": "1629710",
    "end": "1631690"
  },
  {
    "text": "how we can improve the event experience",
    "start": "1631690",
    "end": "1633460"
  },
  {
    "text": "for you in the future good bye",
    "start": "1633460",
    "end": "1637980"
  }
]