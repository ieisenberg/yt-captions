[
  {
    "text": "hi everyone my name is Sashi Varanasi",
    "start": "1199",
    "end": "3520"
  },
  {
    "text": "and I lead the inmemory and blockchain",
    "start": "3520",
    "end": "5520"
  },
  {
    "text": "specialist Solutions Architects at ews",
    "start": "5520",
    "end": "8440"
  },
  {
    "text": "in this next 10 minutes I'll talk about",
    "start": "8440",
    "end": "10360"
  },
  {
    "text": "how you can cost optimize relational",
    "start": "10360",
    "end": "12240"
  },
  {
    "text": "workloads such as Oracle SQL Server RDS",
    "start": "12240",
    "end": "15719"
  },
  {
    "text": "and Aurora workloads with inmemory",
    "start": "15719",
    "end": "18199"
  },
  {
    "text": "caching using Amazon elastic cache so",
    "start": "18199",
    "end": "21519"
  },
  {
    "text": "let's get started",
    "start": "21519",
    "end": "24359"
  },
  {
    "text": "here when you implement elastic cach a",
    "start": "24880",
    "end": "27480"
  },
  {
    "text": "caching solution over relational",
    "start": "27480",
    "end": "29359"
  },
  {
    "text": "databases you can improve performance of",
    "start": "29359",
    "end": "31640"
  },
  {
    "text": "your applications and reduce cost",
    "start": "31640",
    "end": "33960"
  },
  {
    "text": "according to our recent benchmarking",
    "start": "33960",
    "end": "36040"
  },
  {
    "text": "test you can save up to 55% in cost gain",
    "start": "36040",
    "end": "39879"
  },
  {
    "text": "up to 80 times faster read performance",
    "start": "39879",
    "end": "42440"
  },
  {
    "text": "using Amazon elastic cache with RDS for",
    "start": "42440",
    "end": "44960"
  },
  {
    "text": "MySQL versus RDS for MySQL alone I would",
    "start": "44960",
    "end": "49079"
  },
  {
    "text": "like to give you a quick explanation of",
    "start": "49079",
    "end": "51079"
  },
  {
    "text": "financial benefits of caching when you",
    "start": "51079",
    "end": "53440"
  },
  {
    "text": "need to scale relational databases it",
    "start": "53440",
    "end": "55719"
  },
  {
    "text": "gets expensive and hard to do no SQL",
    "start": "55719",
    "end": "58680"
  },
  {
    "text": "databases add Flex exibility and",
    "start": "58680",
    "end": "60640"
  },
  {
    "text": "scalability to your architectures",
    "start": "60640",
    "end": "62920"
  },
  {
    "text": "elastic Ash is a nosql key value data",
    "start": "62920",
    "end": "65799"
  },
  {
    "text": "store it is cost effective and has no",
    "start": "65799",
    "end": "68159"
  },
  {
    "text": "additional fee for Io it can be cheaper",
    "start": "68159",
    "end": "71360"
  },
  {
    "text": "than increasing database size and it can",
    "start": "71360",
    "end": "73799"
  },
  {
    "text": "scale independently of the underlying",
    "start": "73799",
    "end": "75680"
  },
  {
    "text": "database elastic asach also has",
    "start": "75680",
    "end": "78080"
  },
  {
    "text": "performance and cost optimizations",
    "start": "78080",
    "end": "80119"
  },
  {
    "text": "within the service for example with",
    "start": "80119",
    "end": "82439"
  },
  {
    "text": "enhanced IO multiplexing you can achieve",
    "start": "82439",
    "end": "85040"
  },
  {
    "text": "72% Better Price performance and with",
    "start": "85040",
    "end": "87720"
  },
  {
    "text": "data teering you can obtain better 60% %",
    "start": "87720",
    "end": "90320"
  },
  {
    "text": "price capacity with elastic asach you",
    "start": "90320",
    "end": "93040"
  },
  {
    "text": "are adding a layer of high availability",
    "start": "93040",
    "end": "95360"
  },
  {
    "text": "at a low cost to your relational",
    "start": "95360",
    "end": "97119"
  },
  {
    "text": "database architectures we will see the",
    "start": "97119",
    "end": "99560"
  },
  {
    "text": "benchmarking test results and examples",
    "start": "99560",
    "end": "101880"
  },
  {
    "text": "in the slides that",
    "start": "101880",
    "end": "104719"
  },
  {
    "text": "follow when we say Better Price",
    "start": "105000",
    "end": "107200"
  },
  {
    "text": "performance what we mean is that as",
    "start": "107200",
    "end": "109360"
  },
  {
    "text": "shown in this chart RDS cost increases",
    "start": "109360",
    "end": "111920"
  },
  {
    "text": "linearly for nominal throughput increase",
    "start": "111920",
    "end": "114680"
  },
  {
    "text": "whereas for elastic cach the cost",
    "start": "114680",
    "end": "116840"
  },
  {
    "text": "Remains the Same as shown in the center",
    "start": "116840",
    "end": "119200"
  },
  {
    "text": "in this chart",
    "start": "119200",
    "end": "120479"
  },
  {
    "text": "and throughput can increase to much",
    "start": "120479",
    "end": "122119"
  },
  {
    "text": "higher volumes as shown by the green",
    "start": "122119",
    "end": "124240"
  },
  {
    "text": "line that represents elastic Ash",
    "start": "124240",
    "end": "126320"
  },
  {
    "text": "throughput while latency remains very",
    "start": "126320",
    "end": "128879"
  },
  {
    "text": "low giving you Extreme Performance with",
    "start": "128879",
    "end": "131800"
  },
  {
    "text": "one elastic as node According to some of",
    "start": "131800",
    "end": "134200"
  },
  {
    "text": "our test you can process a few hundreds",
    "start": "134200",
    "end": "136640"
  },
  {
    "text": "of thousands of requests per second to",
    "start": "136640",
    "end": "139080"
  },
  {
    "text": "do the same without elastic Ash just",
    "start": "139080",
    "end": "141519"
  },
  {
    "text": "using your primary underlying database",
    "start": "141519",
    "end": "143720"
  },
  {
    "text": "you need a very large form of database",
    "start": "143720",
    "end": "145800"
  },
  {
    "text": "nodes or read",
    "start": "145800",
    "end": "147480"
  },
  {
    "text": "replicas so what workloads are suitable",
    "start": "147480",
    "end": "150120"
  },
  {
    "text": "for",
    "start": "150120",
    "end": "152360"
  },
  {
    "text": "caching applications that are iob bound",
    "start": "153160",
    "end": "156000"
  },
  {
    "text": "and read heavy applications with large",
    "start": "156000",
    "end": "157920"
  },
  {
    "text": "volumes of data processing needs",
    "start": "157920",
    "end": "159640"
  },
  {
    "text": "followed by frequent reads and",
    "start": "159640",
    "end": "161720"
  },
  {
    "text": "applications that need realtime access",
    "start": "161720",
    "end": "163840"
  },
  {
    "text": "to large volumes of data can benefit",
    "start": "163840",
    "end": "166120"
  },
  {
    "text": "from caching and will lower their",
    "start": "166120",
    "end": "168400"
  },
  {
    "text": "application and database cost and",
    "start": "168400",
    "end": "170360"
  },
  {
    "text": "improve performance so how does elastic",
    "start": "170360",
    "end": "173159"
  },
  {
    "text": "cache fit into the AWS purpose-built",
    "start": "173159",
    "end": "176159"
  },
  {
    "text": "database strategy you might ask one very",
    "start": "176159",
    "end": "179319"
  },
  {
    "text": "common name need is to share large",
    "start": "179319",
    "end": "181480"
  },
  {
    "text": "quantities of data at high speeds across",
    "start": "181480",
    "end": "184000"
  },
  {
    "text": "servers our customers are supporting",
    "start": "184000",
    "end": "186799"
  },
  {
    "text": "millions of users across thousands of",
    "start": "186799",
    "end": "188920"
  },
  {
    "text": "servers the purpose built strategy talks",
    "start": "188920",
    "end": "191720"
  },
  {
    "text": "about using the right tool for the right",
    "start": "191720",
    "end": "193720"
  },
  {
    "text": "job in memory databases like elastic",
    "start": "193720",
    "end": "196239"
  },
  {
    "text": "cache and memory DB solve the purpose of",
    "start": "196239",
    "end": "199200"
  },
  {
    "text": "Extreme Performance of high volume",
    "start": "199200",
    "end": "203680"
  },
  {
    "text": "applications let's dive deeper into",
    "start": "204360",
    "end": "206680"
  },
  {
    "text": "performance and cost savings that we can",
    "start": "206680",
    "end": "208799"
  },
  {
    "text": "achieve with elas",
    "start": "208799",
    "end": "211760"
  },
  {
    "text": "cash today every company is digitizing",
    "start": "212200",
    "end": "215400"
  },
  {
    "text": "their business processes and modernizing",
    "start": "215400",
    "end": "217799"
  },
  {
    "text": "their current applications to",
    "start": "217799",
    "end": "219680"
  },
  {
    "text": "accommodate the scale and the size of",
    "start": "219680",
    "end": "221519"
  },
  {
    "text": "these growing businesses applications",
    "start": "221519",
    "end": "223480"
  },
  {
    "text": "and databases need to scale as well to",
    "start": "223480",
    "end": "226120"
  },
  {
    "text": "handle large volumes of data the",
    "start": "226120",
    "end": "228319"
  },
  {
    "text": "requirement is to not only handle High",
    "start": "228319",
    "end": "230400"
  },
  {
    "text": "volumes of data but also support High",
    "start": "230400",
    "end": "232720"
  },
  {
    "text": "application performance needing",
    "start": "232720",
    "end": "234920"
  },
  {
    "text": "increased memory CPU and network",
    "start": "234920",
    "end": "237959"
  },
  {
    "text": "capacity due to the complex lexity of",
    "start": "237959",
    "end": "240400"
  },
  {
    "text": "the underlying architecture of",
    "start": "240400",
    "end": "242200"
  },
  {
    "text": "relational databases it is hard to scale",
    "start": "242200",
    "end": "245000"
  },
  {
    "text": "out and scale back down to meet these",
    "start": "245000",
    "end": "247159"
  },
  {
    "text": "high performance and high volume data",
    "start": "247159",
    "end": "249680"
  },
  {
    "text": "requirements as the data grows the",
    "start": "249680",
    "end": "251959"
  },
  {
    "text": "joints and the self joints make the",
    "start": "251959",
    "end": "254040"
  },
  {
    "text": "queries extremely complex and slow to",
    "start": "254040",
    "end": "256840"
  },
  {
    "text": "perform too one way we can handle the",
    "start": "256840",
    "end": "259639"
  },
  {
    "text": "performance need in relational databases",
    "start": "259639",
    "end": "261840"
  },
  {
    "text": "is by adding more read replicas the",
    "start": "261840",
    "end": "264639"
  },
  {
    "text": "addition of read replicas though adds to",
    "start": "264639",
    "end": "266880"
  },
  {
    "text": "the total cost for your applications so",
    "start": "266880",
    "end": "269759"
  },
  {
    "text": "we need a better solution to solve this",
    "start": "269759",
    "end": "271639"
  },
  {
    "text": "performance and the cost problems of",
    "start": "271639",
    "end": "273759"
  },
  {
    "text": "relational",
    "start": "273759",
    "end": "274960"
  },
  {
    "text": "databases so how does caching",
    "start": "274960",
    "end": "278479"
  },
  {
    "text": "help let me explain using this diagram",
    "start": "278479",
    "end": "281520"
  },
  {
    "text": "so how does caching help when you cache",
    "start": "281520",
    "end": "283960"
  },
  {
    "text": "your data is not on the disk but it is",
    "start": "283960",
    "end": "286199"
  },
  {
    "text": "on the main memory and because the data",
    "start": "286199",
    "end": "288639"
  },
  {
    "text": "is in the main memory you get",
    "start": "288639",
    "end": "290199"
  },
  {
    "text": "predictable performance your performance",
    "start": "290199",
    "end": "292720"
  },
  {
    "text": "for the reads and the rights is now in",
    "start": "292720",
    "end": "294360"
  },
  {
    "text": "micros seconds not in milliseconds in",
    "start": "294360",
    "end": "296960"
  },
  {
    "text": "other words a database cache supplements",
    "start": "296960",
    "end": "299320"
  },
  {
    "text": "your primary database by removing",
    "start": "299320",
    "end": "301759"
  },
  {
    "text": "unnecessary pressure on it typically in",
    "start": "301759",
    "end": "304680"
  },
  {
    "text": "the form of frequently accessed read",
    "start": "304680",
    "end": "307080"
  },
  {
    "text": "data cache data is always stored in",
    "start": "307080",
    "end": "309639"
  },
  {
    "text": "memory providing that predictable low",
    "start": "309639",
    "end": "312120"
  },
  {
    "text": "latency performance that is 80 times",
    "start": "312120",
    "end": "314680"
  },
  {
    "text": "faster than relational databases and you",
    "start": "314680",
    "end": "317400"
  },
  {
    "text": "can get extremely high throughput that",
    "start": "317400",
    "end": "319520"
  },
  {
    "text": "can be four times higher the cache notes",
    "start": "319520",
    "end": "322800"
  },
  {
    "text": "are much cheaper than read replicas for",
    "start": "322800",
    "end": "325600"
  },
  {
    "text": "primary databases we'll share the",
    "start": "325600",
    "end": "327880"
  },
  {
    "text": "benchmarking results and data in the",
    "start": "327880",
    "end": "329800"
  },
  {
    "text": "upcoming",
    "start": "329800",
    "end": "332240"
  },
  {
    "text": "slides so we talked about how we can",
    "start": "332240",
    "end": "334680"
  },
  {
    "text": "handle performance need in relational",
    "start": "334680",
    "end": "336520"
  },
  {
    "text": "databases by adding more read replicas",
    "start": "336520",
    "end": "339440"
  },
  {
    "text": "adding read replicas is expensive what",
    "start": "339440",
    "end": "341680"
  },
  {
    "text": "we have done here is remove RS read",
    "start": "341680",
    "end": "343919"
  },
  {
    "text": "replica and provide the read capacity",
    "start": "343919",
    "end": "346000"
  },
  {
    "text": "from elastic asach cluster adding a",
    "start": "346000",
    "end": "348520"
  },
  {
    "text": "fully distributed elastic asach cluster",
    "start": "348520",
    "end": "350560"
  },
  {
    "text": "with six nodes is less expensive than",
    "start": "350560",
    "end": "352759"
  },
  {
    "text": "adding additional read replicas cach",
    "start": "352759",
    "end": "355199"
  },
  {
    "text": "increases the total amount of memory",
    "start": "355199",
    "end": "356840"
  },
  {
    "text": "available it has dedicated Network and",
    "start": "356840",
    "end": "359319"
  },
  {
    "text": "CP CPU for reads and provide",
    "start": "359319",
    "end": "361120"
  },
  {
    "text": "significantly lower latency and much",
    "start": "361120",
    "end": "363039"
  },
  {
    "text": "higher",
    "start": "363039",
    "end": "364000"
  },
  {
    "text": "throughput so how do you get the",
    "start": "364000",
    "end": "365880"
  },
  {
    "text": "database data into the cache that is a",
    "start": "365880",
    "end": "368880"
  },
  {
    "text": "great question to ask but before we",
    "start": "368880",
    "end": "370759"
  },
  {
    "text": "answer that question what we need to",
    "start": "370759",
    "end": "373120"
  },
  {
    "text": "keep in mind is that we are not",
    "start": "373120",
    "end": "374960"
  },
  {
    "text": "replicating 100% of our database data in",
    "start": "374960",
    "end": "378199"
  },
  {
    "text": "the cache only the results of the",
    "start": "378199",
    "end": "380440"
  },
  {
    "text": "queries need to be cached so there is no",
    "start": "380440",
    "end": "383199"
  },
  {
    "text": "need to fully replicate the database",
    "start": "383199",
    "end": "385840"
  },
  {
    "text": "caching is usually a more efficient",
    "start": "385840",
    "end": "387840"
  },
  {
    "text": "method of replication for your database",
    "start": "387840",
    "end": "389800"
  },
  {
    "text": "reads here are the ways we can cach the",
    "start": "389800",
    "end": "394240"
  },
  {
    "text": "data there are strategies that",
    "start": "394800",
    "end": "396960"
  },
  {
    "text": "applications can Implement in their code",
    "start": "396960",
    "end": "399120"
  },
  {
    "text": "to cach the data let me explain the lazy",
    "start": "399120",
    "end": "402199"
  },
  {
    "text": "loading pattern the steps here are",
    "start": "402199",
    "end": "404759"
  },
  {
    "text": "numbered on the slide when clients",
    "start": "404759",
    "end": "406919"
  },
  {
    "text": "receive a request for a data element the",
    "start": "406919",
    "end": "409199"
  },
  {
    "text": "first step it takes is to read that data",
    "start": "409199",
    "end": "411400"
  },
  {
    "text": "element from the cache if the data",
    "start": "411400",
    "end": "413720"
  },
  {
    "text": "element is not available in cach which",
    "start": "413720",
    "end": "416240"
  },
  {
    "text": "is called a cach m it will then fetch",
    "start": "416240",
    "end": "418840"
  },
  {
    "text": "the data from from the database in this",
    "start": "418840",
    "end": "421000"
  },
  {
    "text": "case RDS as a next step it writes that",
    "start": "421000",
    "end": "424280"
  },
  {
    "text": "response from RDS into the cache so",
    "start": "424280",
    "end": "427360"
  },
  {
    "text": "subsequent read request coming to the",
    "start": "427360",
    "end": "429319"
  },
  {
    "text": "client for that value will be read from",
    "start": "429319",
    "end": "431400"
  },
  {
    "text": "the cach the cach itself is a key value",
    "start": "431400",
    "end": "434360"
  },
  {
    "text": "store so the cash requests are based on",
    "start": "434360",
    "end": "436919"
  },
  {
    "text": "a key you retrieve the value of the",
    "start": "436919",
    "end": "439160"
  },
  {
    "text": "cache object using the",
    "start": "439160",
    "end": "442599"
  },
  {
    "text": "key in write through caching technique",
    "start": "442960",
    "end": "445720"
  },
  {
    "text": "which is another caching strategy that",
    "start": "445720",
    "end": "447919"
  },
  {
    "text": "you can use and that is see seen here on",
    "start": "447919",
    "end": "450599"
  },
  {
    "text": "this Slide the application proactively",
    "start": "450599",
    "end": "453319"
  },
  {
    "text": "writes to the cache while writing to the",
    "start": "453319",
    "end": "455639"
  },
  {
    "text": "database in real time with this",
    "start": "455639",
    "end": "458120"
  },
  {
    "text": "technique the cache data is always in",
    "start": "458120",
    "end": "460120"
  },
  {
    "text": "sync with the database data making the",
    "start": "460120",
    "end": "462639"
  },
  {
    "text": "data consistent with the",
    "start": "462639",
    "end": "466039"
  },
  {
    "text": "database so now that we looked at",
    "start": "467120",
    "end": "469319"
  },
  {
    "text": "performance advantages cost benefits and",
    "start": "469319",
    "end": "471919"
  },
  {
    "text": "application implementation strategies",
    "start": "471919",
    "end": "473759"
  },
  {
    "text": "for caching let's review some of the",
    "start": "473759",
    "end": "476199"
  },
  {
    "text": "benchmarking tests we completed recently",
    "start": "476199",
    "end": "478560"
  },
  {
    "text": "that provide a evidence of the data we",
    "start": "478560",
    "end": "480800"
  },
  {
    "text": "shared so far we did a test with RDS my",
    "start": "480800",
    "end": "484440"
  },
  {
    "text": "SQL with its standby for an application",
    "start": "484440",
    "end": "486759"
  },
  {
    "text": "that needs to handle 30,000 queries per",
    "start": "486759",
    "end": "490000"
  },
  {
    "text": "second according to our test to meet",
    "start": "490000",
    "end": "492639"
  },
  {
    "text": "this throughput we need four RDS read",
    "start": "492639",
    "end": "495479"
  },
  {
    "text": "replicas that costed us",
    "start": "495479",
    "end": "497720"
  },
  {
    "text": "$1,740 per month when we implemented",
    "start": "497720",
    "end": "500599"
  },
  {
    "text": "elastic as we were able to eliminate the",
    "start": "500599",
    "end": "502599"
  },
  {
    "text": "read replicas and instead use one",
    "start": "502599",
    "end": "504879"
  },
  {
    "text": "elastic Ash node and one elastic ad read",
    "start": "504879",
    "end": "507599"
  },
  {
    "text": "replica node to achieve the same same",
    "start": "507599",
    "end": "509759"
  },
  {
    "text": "throughput eliminating RDS read replicas",
    "start": "509759",
    "end": "512599"
  },
  {
    "text": "and implementing elastic cach costed as",
    "start": "512599",
    "end": "515560"
  },
  {
    "text": "$780 per month reducing the cost by",
    "start": "515560",
    "end": "519240"
  },
  {
    "text": "55% when compared to using RDS alone",
    "start": "519240",
    "end": "522800"
  },
  {
    "text": "with its read",
    "start": "522800",
    "end": "525440"
  },
  {
    "text": "replicas with caching the higher the",
    "start": "526800",
    "end": "529480"
  },
  {
    "text": "throughput requirements are for your",
    "start": "529480",
    "end": "530920"
  },
  {
    "text": "application the higher are the cost",
    "start": "530920",
    "end": "532760"
  },
  {
    "text": "Savings in this example when cash is",
    "start": "532760",
    "end": "535680"
  },
  {
    "text": "fully warmed up which means all of your",
    "start": "535680",
    "end": "537640"
  },
  {
    "text": "data that is read is served by elastic",
    "start": "537640",
    "end": "540000"
  },
  {
    "text": "cache the read capacity increased to",
    "start": "540000",
    "end": "543000"
  },
  {
    "text": "250,000 queries per second and with RDS",
    "start": "543000",
    "end": "546680"
  },
  {
    "text": "alone supporting this throughput will",
    "start": "546680",
    "end": "548760"
  },
  {
    "text": "cost you 87% more by implementing",
    "start": "548760",
    "end": "552360"
  },
  {
    "text": "caching for high throughput read heavy",
    "start": "552360",
    "end": "554480"
  },
  {
    "text": "applications you can get significant",
    "start": "554480",
    "end": "556800"
  },
  {
    "text": "cost",
    "start": "556800",
    "end": "559120"
  },
  {
    "text": "savings all right so how can you get",
    "start": "559640",
    "end": "561839"
  },
  {
    "text": "started with elastic cash adding cash is",
    "start": "561839",
    "end": "564959"
  },
  {
    "text": "typically a few lines of code there is",
    "start": "564959",
    "end": "567120"
  },
  {
    "text": "an example here on the screen that shows",
    "start": "567120",
    "end": "569640"
  },
  {
    "text": "lazy loading implementation you would",
    "start": "569640",
    "end": "572120"
  },
  {
    "text": "need to carefully identify where in your",
    "start": "572120",
    "end": "574399"
  },
  {
    "text": "application this logic needs to be added",
    "start": "574399",
    "end": "577720"
  },
  {
    "text": "and design higher level abstractions to",
    "start": "577720",
    "end": "580040"
  },
  {
    "text": "easily add cach into your application we",
    "start": "580040",
    "end": "583120"
  },
  {
    "text": "also have online self-based learning",
    "start": "583120",
    "end": "585519"
  },
  {
    "text": "tutorials recorded webinars and whole",
    "start": "585519",
    "end": "588240"
  },
  {
    "text": "SLE of resources at the links provided",
    "start": "588240",
    "end": "590360"
  },
  {
    "text": "here you can scan the provided QR Co",
    "start": "590360",
    "end": "593360"
  },
  {
    "text": "code as well to get to these",
    "start": "593360",
    "end": "595800"
  },
  {
    "text": "links and we'll share this stack as",
    "start": "595800",
    "end": "598360"
  },
  {
    "text": "needed",
    "start": "598360",
    "end": "600680"
  },
  {
    "text": "thank you for watching",
    "start": "600680",
    "end": "604200"
  }
]