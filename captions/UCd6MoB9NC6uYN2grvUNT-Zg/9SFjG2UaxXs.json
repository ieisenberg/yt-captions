[
  {
    "start": "0",
    "end": "30000"
  },
  {
    "text": "in this video you'll see how to",
    "start": "960",
    "end": "2320"
  },
  {
    "text": "subscribe to and deploy a",
    "start": "2320",
    "end": "3600"
  },
  {
    "text": "container-based product from aws",
    "start": "3600",
    "end": "5359"
  },
  {
    "text": "marketplace using amazon elastic",
    "start": "5359",
    "end": "7200"
  },
  {
    "text": "container service anywhere or amazon ecs",
    "start": "7200",
    "end": "9760"
  },
  {
    "text": "anywhere",
    "start": "9760",
    "end": "10960"
  },
  {
    "text": "with amazon ecs anywhere you can now",
    "start": "10960",
    "end": "13040"
  },
  {
    "text": "deploy container workloads on your",
    "start": "13040",
    "end": "14559"
  },
  {
    "text": "managed infrastructure to leverage",
    "start": "14559",
    "end": "16240"
  },
  {
    "text": "existing infrastructure investments or",
    "start": "16240",
    "end": "18000"
  },
  {
    "text": "to meet regulatory and data residency",
    "start": "18000",
    "end": "19920"
  },
  {
    "text": "requirements",
    "start": "19920",
    "end": "21359"
  },
  {
    "text": "in conjunction with aws marketplace you",
    "start": "21359",
    "end": "23600"
  },
  {
    "text": "can now find subscribe to and deploy",
    "start": "23600",
    "end": "25840"
  },
  {
    "text": "container applications on amazon ecs",
    "start": "25840",
    "end": "28080"
  },
  {
    "text": "anywhere easily amazon ecs anywhere is a",
    "start": "28080",
    "end": "31359"
  },
  {
    "start": "30000",
    "end": "113000"
  },
  {
    "text": "new capability in amazon ecs that",
    "start": "31359",
    "end": "33600"
  },
  {
    "text": "enables customers to easily run and",
    "start": "33600",
    "end": "35360"
  },
  {
    "text": "manage container-based applications on",
    "start": "35360",
    "end": "37280"
  },
  {
    "text": "premises including on virtual machines",
    "start": "37280",
    "end": "39600"
  },
  {
    "text": "bare metal servers and other customer",
    "start": "39600",
    "end": "41440"
  },
  {
    "text": "managed infrastructure",
    "start": "41440",
    "end": "43200"
  },
  {
    "text": "to get started we'll create an amazon",
    "start": "43200",
    "end": "44960"
  },
  {
    "text": "ecs cluster",
    "start": "44960",
    "end": "47920"
  },
  {
    "text": "let's use the networking only template",
    "start": "48399",
    "end": "50480"
  },
  {
    "text": "which supports serverless aws fargate",
    "start": "50480",
    "end": "52800"
  },
  {
    "text": "infrastructure or external instances",
    "start": "52800",
    "end": "54640"
  },
  {
    "text": "like an on-premises server or a virtual",
    "start": "54640",
    "end": "56480"
  },
  {
    "text": "machine",
    "start": "56480",
    "end": "58640"
  },
  {
    "text": "next we'll configure the cluster",
    "start": "58640",
    "end": "62000"
  },
  {
    "text": "the cluster was created successfully now",
    "start": "63840",
    "end": "66000"
  },
  {
    "text": "let's register an external virtual",
    "start": "66000",
    "end": "67680"
  },
  {
    "text": "machine",
    "start": "67680",
    "end": "70000"
  },
  {
    "text": "we'll create a new role for this",
    "start": "70400",
    "end": "71680"
  },
  {
    "text": "instance",
    "start": "71680",
    "end": "73840"
  },
  {
    "text": "let's copy this command for later when",
    "start": "76880",
    "end": "78479"
  },
  {
    "text": "we register the virtual machine in our",
    "start": "78479",
    "end": "80159"
  },
  {
    "text": "amazon ecs cluster",
    "start": "80159",
    "end": "82479"
  },
  {
    "text": "now we'll connect to our virtual machine",
    "start": "82479",
    "end": "84080"
  },
  {
    "text": "using aws cloud shell",
    "start": "84080",
    "end": "87840"
  },
  {
    "text": "let's switch to the root user and paste",
    "start": "91920",
    "end": "93680"
  },
  {
    "text": "in the registration command so we can",
    "start": "93680",
    "end": "95200"
  },
  {
    "text": "begin the installation",
    "start": "95200",
    "end": "98159"
  },
  {
    "text": "the installation process takes about",
    "start": "98880",
    "end": "100479"
  },
  {
    "text": "five minutes",
    "start": "100479",
    "end": "103039"
  },
  {
    "text": "in the amazon ecs console we can refresh",
    "start": "104399",
    "end": "107119"
  },
  {
    "text": "to see that the external virtual machine",
    "start": "107119",
    "end": "108799"
  },
  {
    "text": "has connected to our amazon ecs cluster",
    "start": "108799",
    "end": "112960"
  },
  {
    "start": "113000",
    "end": "145000"
  },
  {
    "text": "now let's subscribe to a container-based",
    "start": "113439",
    "end": "115280"
  },
  {
    "text": "product from aws marketplace",
    "start": "115280",
    "end": "117920"
  },
  {
    "text": "we'll use aws deep learning containers",
    "start": "117920",
    "end": "120079"
  },
  {
    "text": "for pi torch",
    "start": "120079",
    "end": "122880"
  },
  {
    "text": "it takes a few minutes to process the",
    "start": "125040",
    "end": "126640"
  },
  {
    "text": "subscription once we've accepted the",
    "start": "126640",
    "end": "128080"
  },
  {
    "text": "terms",
    "start": "128080",
    "end": "130479"
  },
  {
    "text": "we can now configure and launch the",
    "start": "130959",
    "end": "132480"
  },
  {
    "text": "software",
    "start": "132480",
    "end": "135040"
  },
  {
    "text": "let's view the container image we'll use",
    "start": "135840",
    "end": "137440"
  },
  {
    "text": "to deploy the product",
    "start": "137440",
    "end": "139360"
  },
  {
    "text": "we'll copy the url for the docker images",
    "start": "139360",
    "end": "141440"
  },
  {
    "text": "to use later when we adjust our",
    "start": "141440",
    "end": "142800"
  },
  {
    "text": "container settings",
    "start": "142800",
    "end": "145599"
  },
  {
    "start": "145000",
    "end": "307000"
  },
  {
    "text": "now let's navigate to the aws deep",
    "start": "145599",
    "end": "147599"
  },
  {
    "text": "learning containers page to access",
    "start": "147599",
    "end": "149360"
  },
  {
    "text": "instructions for deploying the container",
    "start": "149360",
    "end": "151040"
  },
  {
    "text": "via our amazon ecs cluster",
    "start": "151040",
    "end": "155319"
  },
  {
    "text": "let's view the training materials for pi",
    "start": "156160",
    "end": "157920"
  },
  {
    "text": "torch",
    "start": "157920",
    "end": "159440"
  },
  {
    "text": "here we can see the task definition we",
    "start": "159440",
    "end": "161200"
  },
  {
    "text": "need to deploy our container using",
    "start": "161200",
    "end": "162800"
  },
  {
    "text": "amazon ecs anywhere",
    "start": "162800",
    "end": "164800"
  },
  {
    "text": "let's save a copy of the task definition",
    "start": "164800",
    "end": "166640"
  },
  {
    "text": "to use later",
    "start": "166640",
    "end": "168319"
  },
  {
    "text": "now let's return to the amazon ecs",
    "start": "168319",
    "end": "170160"
  },
  {
    "text": "console",
    "start": "170160",
    "end": "171519"
  },
  {
    "text": "from the task definitions page we'll",
    "start": "171519",
    "end": "173440"
  },
  {
    "text": "create a new task definition using the",
    "start": "173440",
    "end": "175200"
  },
  {
    "text": "external instance launch type and",
    "start": "175200",
    "end": "176800"
  },
  {
    "text": "configure it with json",
    "start": "176800",
    "end": "180440"
  },
  {
    "text": "let's replace the default content with",
    "start": "186400",
    "end": "188080"
  },
  {
    "text": "the pi torch task definition we copied",
    "start": "188080",
    "end": "190239"
  },
  {
    "text": "which contains example data for demo",
    "start": "190239",
    "end": "191920"
  },
  {
    "text": "purposes",
    "start": "191920",
    "end": "193200"
  },
  {
    "text": "please note you'll need to update the",
    "start": "193200",
    "end": "194720"
  },
  {
    "text": "docker command passed into the container",
    "start": "194720",
    "end": "196480"
  },
  {
    "text": "instance at launch to use your actual",
    "start": "196480",
    "end": "198319"
  },
  {
    "text": "data for training",
    "start": "198319",
    "end": "201120"
  },
  {
    "text": "now let's adjust the task definition",
    "start": "201440",
    "end": "203120"
  },
  {
    "text": "settings",
    "start": "203120",
    "end": "205200"
  },
  {
    "text": "we'll rename the definition to match the",
    "start": "205200",
    "end": "206879"
  },
  {
    "text": "amazon ecs cluster we created and then",
    "start": "206879",
    "end": "209280"
  },
  {
    "text": "define the task role and task execution",
    "start": "209280",
    "end": "211360"
  },
  {
    "text": "role to provide the necessary",
    "start": "211360",
    "end": "212560"
  },
  {
    "text": "permissions for the task to be executed",
    "start": "212560",
    "end": "214400"
  },
  {
    "text": "properly",
    "start": "214400",
    "end": "215599"
  },
  {
    "text": "you can find instructions on how to",
    "start": "215599",
    "end": "216959"
  },
  {
    "text": "create this iam role in the description",
    "start": "216959",
    "end": "218799"
  },
  {
    "text": "and links for this video",
    "start": "218799",
    "end": "221840"
  },
  {
    "text": "now let's adjust the container",
    "start": "222319",
    "end": "223519"
  },
  {
    "text": "definitions",
    "start": "223519",
    "end": "225360"
  },
  {
    "text": "here we'll replace the default image",
    "start": "225360",
    "end": "226799"
  },
  {
    "text": "settings with the docker container image",
    "start": "226799",
    "end": "228480"
  },
  {
    "text": "url we copied earlier",
    "start": "228480",
    "end": "230959"
  },
  {
    "text": "you can also adjust the memory limit",
    "start": "230959",
    "end": "232640"
  },
  {
    "text": "settings let's change the memory limit",
    "start": "232640",
    "end": "234640"
  },
  {
    "text": "to 2000 megabytes which is suitable for",
    "start": "234640",
    "end": "236959"
  },
  {
    "text": "our external virtual machine",
    "start": "236959",
    "end": "240799"
  },
  {
    "text": "let's allow amazon ecs to automatically",
    "start": "240799",
    "end": "242959"
  },
  {
    "text": "configure cloudwatch logs so we can",
    "start": "242959",
    "end": "244799"
  },
  {
    "text": "monitor store and access our log files",
    "start": "244799",
    "end": "246959"
  },
  {
    "text": "using ecs anywhere",
    "start": "246959",
    "end": "250159"
  },
  {
    "text": "now let's create the task definition",
    "start": "250879",
    "end": "253519"
  },
  {
    "text": "finally let's deploy the task definition",
    "start": "253519",
    "end": "255439"
  },
  {
    "text": "to ecs anywhere",
    "start": "255439",
    "end": "258320"
  },
  {
    "text": "we'll select the external launch type",
    "start": "258320",
    "end": "259919"
  },
  {
    "text": "and then run the task",
    "start": "259919",
    "end": "263560"
  },
  {
    "text": "it can take about five minutes from the",
    "start": "268639",
    "end": "270160"
  },
  {
    "text": "time the status changes to running until",
    "start": "270160",
    "end": "272160"
  },
  {
    "text": "the task is actively running",
    "start": "272160",
    "end": "274240"
  },
  {
    "text": "let's visit our cloudwatch console to",
    "start": "274240",
    "end": "276000"
  },
  {
    "text": "confirm the task operations",
    "start": "276000",
    "end": "279720"
  },
  {
    "text": "we can see that the container is",
    "start": "282560",
    "end": "283759"
  },
  {
    "text": "actively logging and data processing is",
    "start": "283759",
    "end": "285759"
  },
  {
    "text": "in progress",
    "start": "285759",
    "end": "287199"
  },
  {
    "text": "we have successfully deployed aws deep",
    "start": "287199",
    "end": "289199"
  },
  {
    "text": "learning containers for pytorch with",
    "start": "289199",
    "end": "290880"
  },
  {
    "text": "amazon ecs anywhere",
    "start": "290880",
    "end": "292960"
  },
  {
    "text": "you've just seen how to subscribe to and",
    "start": "292960",
    "end": "294639"
  },
  {
    "text": "deploy a container-based product from",
    "start": "294639",
    "end": "296320"
  },
  {
    "text": "aws marketplace using amazon ecs",
    "start": "296320",
    "end": "298880"
  },
  {
    "text": "anywhere",
    "start": "298880",
    "end": "300479"
  },
  {
    "text": "you can learn more about this topic in",
    "start": "300479",
    "end": "302000"
  },
  {
    "text": "the description and links for this video",
    "start": "302000",
    "end": "303919"
  },
  {
    "text": "thanks for watching now it's your turn",
    "start": "303919",
    "end": "305440"
  },
  {
    "text": "to try",
    "start": "305440",
    "end": "308520"
  }
]