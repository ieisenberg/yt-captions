[
  {
    "text": "so I think if you're in this session you pretty much know that DynamoDB is a",
    "start": "3360",
    "end": "10769"
  },
  {
    "text": "managing no sequel database it's highly available its replicated on on multiple",
    "start": "10769",
    "end": "15990"
  },
  {
    "text": "availability zones the main reason why a lot of people are using it is because",
    "start": "15990",
    "end": "21780"
  },
  {
    "text": "it's a it's very very simple to set up if you ever created a dynamo DB table",
    "start": "21780",
    "end": "26940"
  },
  {
    "text": "you know what I'm talking about is just a couple of clicks and if not I really encourage you to do it dynamo has a",
    "start": "26940",
    "end": "33239"
  },
  {
    "text": "pretty generous free tier so you can you can test DynamoDB for for almost nothing",
    "start": "33239",
    "end": "39120"
  },
  {
    "text": "but the second reason why people are using dynamo dd's for this if the the",
    "start": "39120",
    "end": "44850"
  },
  {
    "text": "blue line represents the number of requests that you have on your on your table if you do things correctly and",
    "start": "44850",
    "end": "51840"
  },
  {
    "text": "today we're going to be talking about doing the things correctly you're going to see a latency that is always",
    "start": "51840",
    "end": "58230"
  },
  {
    "text": "completely flat like the Great Green Line so in dynamo DB you can have read",
    "start": "58230",
    "end": "63690"
  },
  {
    "text": "under five milliseconds and right under 10 milliseconds regardless the number of",
    "start": "63690",
    "end": "69210"
  },
  {
    "text": "the number of incoming requests you're going to have if you follow the best practices that we're going to talk about",
    "start": "69210",
    "end": "75180"
  },
  {
    "text": "today now everything that I'm going to talk about is in the dynamo DB",
    "start": "75180",
    "end": "81990"
  },
  {
    "text": "documentation so there is no secret everything is online the thing is the dynamo DB documentation is 700 pages so",
    "start": "81990",
    "end": "90420"
  },
  {
    "text": "I don't expect anyone to read the whole thing so I'm going to try to condense this in just 40 or 50 minutes right so",
    "start": "90420",
    "end": "98880"
  },
  {
    "text": "first I start with the definitions the tables the the APR is the data types and so on so this one is a bit miss normal",
    "start": "98880",
    "end": "107400"
  },
  {
    "text": "but DynamoDB as a concept of a table but if you if you know about relational",
    "start": "107400",
    "end": "113070"
  },
  {
    "text": "databases the tables on dynamo are a bit different because inside a table you",
    "start": "113070",
    "end": "118350"
  },
  {
    "text": "have items and items have a flexible",
    "start": "118350",
    "end": "123570"
  },
  {
    "text": "amount of attributes right you don't have to follow like in a in a relational database you don't have to follow a",
    "start": "123570",
    "end": "129450"
  },
  {
    "text": "scheme and everyone should all the items should have the same attributes know you items can have can have different",
    "start": "129450",
    "end": "135819"
  },
  {
    "text": "attributes the only thing that you have to specify when you create a table on dynamo is the hash key so the hash key",
    "start": "135819",
    "end": "143080"
  },
  {
    "text": "as the name implies allows you to find an item and you can you can augment this",
    "start": "143080",
    "end": "148540"
  },
  {
    "text": "hash key with the range key which is optional but we're going to see now what",
    "start": "148540",
    "end": "153819"
  },
  {
    "text": "you can do with it that is going to help you do more refined searchers and more and more complex queries inside your",
    "start": "153819",
    "end": "161290"
  },
  {
    "text": "tables so regarded the datatypes you have fairly classic data types like",
    "start": "161290",
    "end": "166480"
  },
  {
    "text": "strange numbers binaries that you can also augment with sets so sets of",
    "start": "166480",
    "end": "172390"
  },
  {
    "text": "strings of numbers of of binary data and DynamoDB is not only a key value store",
    "start": "172390",
    "end": "179500"
  },
  {
    "text": "it's a it's also a document database so you can store complete GS on structures",
    "start": "179500",
    "end": "184870"
  },
  {
    "text": "inside a dynamo DB table each item in that case would be limited to four hundred kilobytes and you have like",
    "start": "184870",
    "end": "191920"
  },
  {
    "text": "specific specific types on top of it so if you know about JSON you will notice that in fact DynamoDB supports a",
    "start": "191920",
    "end": "199120"
  },
  {
    "text": "superset of Jason because Jason by itself cannot have like binary data but",
    "start": "199120",
    "end": "205329"
  },
  {
    "text": "I showed you here in this previous slide that you can have binary sets and you can even have those binary sets inside",
    "start": "205329",
    "end": "210760"
  },
  {
    "text": "your your JSON document for example you could let's say like put like an image",
    "start": "210760",
    "end": "216760"
  },
  {
    "text": "inside a document I definitely don't recommend you to do this you should use",
    "start": "216760",
    "end": "222940"
  },
  {
    "text": "Amazon s3 for that but perhaps you want to encrypt some some information inside order my DB tables and for that you can",
    "start": "222940",
    "end": "229150"
  },
  {
    "text": "put it you can embed it as a binary data okay so now the dash so it's important",
    "start": "229150",
    "end": "238180"
  },
  {
    "text": "to understand that the hush not only uniquely identifies an item but it can",
    "start": "238180",
    "end": "243489"
  },
  {
    "text": "identify a set of items so you have a harsh so we compute the different hash",
    "start": "243489",
    "end": "249069"
  },
  {
    "text": "space and those different items are going to be distributed in the hash space and then we're going to partition",
    "start": "249069",
    "end": "256810"
  },
  {
    "text": "the the harsh space so this is how we are going to be able to scale to scale",
    "start": "256810",
    "end": "262539"
  },
  {
    "text": "the table with multiple partitions right and each partition is replicated in",
    "start": "262539",
    "end": "267740"
  },
  {
    "text": "three different availability zones okay so even if we lose like a complete available is on you still have access to",
    "start": "267740",
    "end": "274669"
  },
  {
    "text": "your to your tables okay now we're going to add the range so in order to as you",
    "start": "274669",
    "end": "284060"
  },
  {
    "text": "saw the harsh somehow randomized is the distribution of the items now if you if",
    "start": "284060",
    "end": "290509"
  },
  {
    "text": "you want to get an order in the inner query that is retrieving your multiple items you could use for example a range",
    "start": "290509",
    "end": "297110"
  },
  {
    "text": "that is going to be able allow you to sort of the different items on your on your request right so a hash in range",
    "start": "297110",
    "end": "304130"
  },
  {
    "text": "key together they form a way to uniquely identify one item because you can have",
    "start": "304130",
    "end": "310370"
  },
  {
    "text": "for example a hash that has multiple items and then the range will restrict",
    "start": "310370",
    "end": "315949"
  },
  {
    "text": "this we're going to see the examples now okay but you're probably if this is",
    "start": "315949",
    "end": "321440"
  },
  {
    "text": "still a bit blurry in your mind we're going to we're going to see that in more",
    "start": "321440",
    "end": "326870"
  },
  {
    "text": "details just keep in mind that the hashes are distributed across multiple partitions okay now let's add indexes on",
    "start": "326870",
    "end": "335000"
  },
  {
    "text": "top of this so if there's only one thing you have to understand in DynamoDB is what we're going to talk about now",
    "start": "335000",
    "end": "340449"
  },
  {
    "text": "because the the main reason why people are using databases like dynamo DB or",
    "start": "340449",
    "end": "346240"
  },
  {
    "text": "MongoDB or Cassandra or any kind of other no sequel database is because they want to they want to scale they want to",
    "start": "346240",
    "end": "352400"
  },
  {
    "text": "sustain a high number of reads writes that one to be flexible and not have a schema but now when they are putting",
    "start": "352400",
    "end": "357740"
  },
  {
    "text": "applications that have been built for relational database and when they are moving to know secure database like",
    "start": "357740",
    "end": "363830"
  },
  {
    "text": "dynamo often the way you manage the indexes is what's going to make the whole difference in the performance of",
    "start": "363830",
    "end": "370729"
  },
  {
    "text": "your application or this is also what can make or break your your application",
    "start": "370729",
    "end": "375740"
  },
  {
    "text": "case regarding on how you want to use a no sequel database so dynamo has two",
    "start": "375740",
    "end": "381949"
  },
  {
    "text": "types of indexes one is the local secondary indexes so imagine that you",
    "start": "381949",
    "end": "387800"
  },
  {
    "text": "have this table right so with different attributes and one attribute is a harsh",
    "start": "387800",
    "end": "392840"
  },
  {
    "text": "the second one is the range so those two from the key that allows you to uniquely identify an item right now you can",
    "start": "392840",
    "end": "401370"
  },
  {
    "text": "create a local secondary index by keeping the same harsh but choosing",
    "start": "401370",
    "end": "408000"
  },
  {
    "text": "another range so here you see that I'm going to choose the attribute a3 as another range I'm keeping the same hash",
    "start": "408000",
    "end": "415710"
  },
  {
    "text": "that's why also we call it the local secondary index then I can they can project the other attributes so the",
    "start": "415710",
    "end": "423300"
  },
  {
    "text": "local secondary indexes are great in order to create other indexes to give you a richer set of queries but keep in",
    "start": "423300",
    "end": "431100"
  },
  {
    "text": "mind that you are limited to 10 gigabytes per per hash key which in most of the cases is hugely sufficient but in",
    "start": "431100",
    "end": "438479"
  },
  {
    "text": "others might be might be perhaps something something you want to look for then there's the global secondary",
    "start": "438479",
    "end": "445289"
  },
  {
    "text": "indexes so again I'm going to clarify this but the idea here is that when you",
    "start": "445289",
    "end": "450750"
  },
  {
    "text": "create another global secondary index you can specify another hash key that is different than the one from the table so",
    "start": "450750",
    "end": "457500"
  },
  {
    "text": "pretty much a global secondary index is almost exactly as if you have like a copy of the existing table with another",
    "start": "457500",
    "end": "465000"
  },
  {
    "text": "hash attribute now if it's a copy of the other table we have to transfer the data",
    "start": "465000",
    "end": "470610"
  },
  {
    "text": "because we can project the attributes right and the way it works is like this so your client rights to a table and",
    "start": "470610",
    "end": "476810"
  },
  {
    "text": "then you get the response but at the same time behind the scenes are synchronously we're going to project the",
    "start": "476810",
    "end": "483120"
  },
  {
    "text": "attributes and the data that the client changed so now you see that the another",
    "start": "483120",
    "end": "490050"
  },
  {
    "text": "main difference between local secondary indexes and global ones so you by default i recommend you to use the",
    "start": "490050",
    "end": "495960"
  },
  {
    "text": "global secondary indexes because you can create them and at any time there were more flexible they are not limited with",
    "start": "495960",
    "end": "501090"
  },
  {
    "text": "the 10 gigabyte harsh sets harshit key limit but there are going to be",
    "start": "501090",
    "end": "506669"
  },
  {
    "text": "eventually consistent because as you as you saw here we're going to send the response and I synchronously update the",
    "start": "506669",
    "end": "513659"
  },
  {
    "text": "global secondary indexes so if this scenario of eventual consistency in the secondary index is ok for you I will",
    "start": "513659",
    "end": "520709"
  },
  {
    "text": "definitely recommend you by default use the the global secondary indexes instead of the local secondary okay just let's",
    "start": "520709",
    "end": "529920"
  },
  {
    "text": "finish the theory part with the with the scaling because this is also",
    "start": "529920",
    "end": "534930"
  },
  {
    "text": "a source of misunderstandings with a with dynamo DB which is dynamo DB is an",
    "start": "534930",
    "end": "541680"
  },
  {
    "text": "amazing database but like all the tools you can use them effectively and you can",
    "start": "541680",
    "end": "546870"
  },
  {
    "text": "use them in a very inefficient ways so as I explained earlier dynamos scales by",
    "start": "546870",
    "end": "557100"
  },
  {
    "text": "partitioning the tables right so and when you provision a table perhaps you",
    "start": "557100",
    "end": "563339"
  },
  {
    "text": "already saw that basically you have two buttons to adjust the the provisioning",
    "start": "563339",
    "end": "568350"
  },
  {
    "text": "obviously the table you provision how much read capacity you need and how much right capacity you need so you see here",
    "start": "568350",
    "end": "574589"
  },
  {
    "text": "so the read capacity units WC use is they are measured in one Killa B 1",
    "start": "574589",
    "end": "580440"
  },
  {
    "text": "kilobyte reads writes per second and reads is four times the same capacity so",
    "start": "580440",
    "end": "587610"
  },
  {
    "text": "a real capacity unit is how many blocks of four kilobytes you can read per",
    "start": "587610",
    "end": "592830"
  },
  {
    "text": "second ok so our C used by default the red capacity units they are consistent",
    "start": "592830",
    "end": "599459"
  },
  {
    "text": "but if you are ok to do n consistent reads you can have you can have 8",
    "start": "599459",
    "end": "605580"
  },
  {
    "text": "kilobytes capacity / 7 41 41 or c unit now let's do let's do some math and I",
    "start": "605580",
    "end": "613860"
  },
  {
    "text": "promises the the last time that I that I do theory or this kind of stuff in the intercession this is one of the",
    "start": "613860",
    "end": "621720"
  },
  {
    "text": "important things to understand on how dynamodb works internally it's the",
    "start": "621720",
    "end": "628080"
  },
  {
    "text": "number of partitions that DynamoDB is going to create and automatically maintained on your table so we compute",
    "start": "628080",
    "end": "634440"
  },
  {
    "text": "it in in two ways so we're going to keep the number of partitions for throughput so basically we take the amount of read",
    "start": "634440",
    "end": "641700"
  },
  {
    "text": "capacity that you provision for reads / 3000 and the same for the right capacity",
    "start": "641700",
    "end": "649110"
  },
  {
    "text": "/ 1000 everything is in the documentation right I don't remember the page perhaps 320 something that it's in",
    "start": "649110",
    "end": "656190"
  },
  {
    "text": "the documentation the point here is that you see that this equation tells you how much DynamoDB node or DynamoDB shard can",
    "start": "656190",
    "end": "664290"
  },
  {
    "text": "sustain one one shot of DynamoDB can sustain 3000 read capacity you need 1,000 rights",
    "start": "664290",
    "end": "670750"
  },
  {
    "text": "or we limit the size of the of the short to 10 gigabytes as you see either we we",
    "start": "670750",
    "end": "677709"
  },
  {
    "text": "shard in terms of throughput or we shot in terms of size that is the number of",
    "start": "677709",
    "end": "682899"
  },
  {
    "text": "partitions you can have on one table is the total size of the table / 10",
    "start": "682899",
    "end": "688209"
  },
  {
    "text": "gigabytes because we don't want to have more than 10 gigabytes in one dynamodb short right so and then for example a",
    "start": "688209",
    "end": "696370"
  },
  {
    "text": "computation is this you take the maximum of both so let's say that I have a table here you see at the top that has 8",
    "start": "696370",
    "end": "703660"
  },
  {
    "text": "gigabytes of data I'm provisioning 5,000 read capacity units rights only for 500",
    "start": "703660",
    "end": "711670"
  },
  {
    "text": "so the number of partitions for throughput I see it's three the number of partitions for size like eight",
    "start": "711670",
    "end": "717550"
  },
  {
    "text": "gigabytes can fit in one single partition so it's one okay so I take the maximum so this table in this scenario",
    "start": "717550",
    "end": "723940"
  },
  {
    "text": "is going to be shorted in three nodes and then the nodes are going to be also",
    "start": "723940",
    "end": "729040"
  },
  {
    "text": "like replicated on multiple I very reasons but you're going to have three partitions okay now a quote from the",
    "start": "729040",
    "end": "736600"
  },
  {
    "text": "documentation the way we do the way you're going to be able to get all the",
    "start": "736600",
    "end": "742360"
  },
  {
    "text": "through to Dolph DynamoDB is by having uniform workloads so the question is how",
    "start": "742360",
    "end": "748899"
  },
  {
    "text": "uniform is uniform right so there's different ways to mess that up the first way to mess it up is too for example",
    "start": "748899",
    "end": "756399"
  },
  {
    "text": "have all the queries that go in one of the shards not here you see the the the",
    "start": "756399",
    "end": "761440"
  },
  {
    "text": "color egos read the more short is hot and the more requested god so here for example I definitely have a non-uniform",
    "start": "761440",
    "end": "767890"
  },
  {
    "text": "workloads all the queries are going to one short and here i have another way to have a non-uniform workload this one is",
    "start": "767890",
    "end": "774670"
  },
  {
    "text": "on time so during a couple of periods or have some bursts of requests like let's",
    "start": "774670",
    "end": "780910"
  },
  {
    "text": "say roughly every every five hours I have huge bursts of requests that always",
    "start": "780910",
    "end": "787060"
  },
  {
    "text": "going in in different shots now dynamo as a as a built-in burst mechanism that",
    "start": "787060",
    "end": "795459"
  },
  {
    "text": "is you can accumulate burst capacity for something like five minutes of the",
    "start": "795459",
    "end": "801670"
  },
  {
    "text": "amount of capacity units you provision so you see here you always have five",
    "start": "801670",
    "end": "806830"
  },
  {
    "text": "minutes of capacity if I provision 1 1200 reach capacity units I can burst",
    "start": "806830",
    "end": "814110"
  },
  {
    "text": "over my limit so I'm dynamo is not throttling you as soon as you as you go",
    "start": "814110",
    "end": "820480"
  },
  {
    "text": "above art it has some some built-in mechanism now if you consume all the five minutes you're going to be",
    "start": "820480",
    "end": "826120"
  },
  {
    "text": "throttled down to your maximum capacity unit so what happens in your code when you have little requests so for example",
    "start": "826120",
    "end": "833020"
  },
  {
    "text": "if you are using Java or Python and so on you're going to have exceptions so you have in your code you have to be",
    "start": "833020",
    "end": "839230"
  },
  {
    "text": "able to to be resilient and to catch those write or read requests that go above the throttling capacity and now",
    "start": "839230",
    "end": "846580"
  },
  {
    "text": "we're going to we're going to talk about how you are how to avoid this so what causes throttling so throttling is of",
    "start": "846580",
    "end": "853270"
  },
  {
    "text": "course once is what we what we just saw if your provision like let's say 1,000 reads 1000 read capacity units and",
    "start": "853270",
    "end": "861850"
  },
  {
    "text": "you're reading way more than that so you're going to be throttle obviously now the other one is when you have",
    "start": "861850",
    "end": "869050"
  },
  {
    "text": "non-uniform workloads and those are two perhaps a bit trickier to to detect so",
    "start": "869050",
    "end": "875400"
  },
  {
    "text": "so let's see the scenarios and we're going to discuss about everything here now so to make sure that we understand",
    "start": "875400",
    "end": "881410"
  },
  {
    "text": "all that a couple of scenarios so the first one even drugging so we just",
    "start": "881410",
    "end": "886840"
  },
  {
    "text": "talked about kinases it's a very classic use case to take all the data of kinases and to dump it into a dynamo DB table",
    "start": "886840",
    "end": "893620"
  },
  {
    "text": "for time series and you end up with known your firm workloads why because",
    "start": "893620",
    "end": "899140"
  },
  {
    "text": "most of the time the information that you want is the information of the last couple of days or the last couple of",
    "start": "899140",
    "end": "904810"
  },
  {
    "text": "weeks but if you put all the data in the in the same table you're going to have some partitions that are not never going",
    "start": "904810",
    "end": "911260"
  },
  {
    "text": "to be never going to be requested because its data that is from the last month and no one cares about these data",
    "start": "911260",
    "end": "916810"
  },
  {
    "text": "anymore so that's why here the best practice would be to have luck depending on your workload obviously different",
    "start": "916810",
    "end": "923380"
  },
  {
    "text": "tables it's very easy to create tables on DynamoDB are not limited it it can be done with API calls depending on the",
    "start": "923380",
    "end": "929950"
  },
  {
    "text": "proximity of the data in terms so here is for example tables per month and you can see that",
    "start": "929950",
    "end": "936610"
  },
  {
    "text": "the different tables have a different capacity you need provisioned on it so you limit the shorting yourself and you",
    "start": "936610",
    "end": "943630"
  },
  {
    "text": "are kind of creating like at the application level Charlie mechanism",
    "start": "943630",
    "end": "949389"
  },
  {
    "text": "based on the on the tables so you can hear get all the throughput especially for the events that are the closest to",
    "start": "949389",
    "end": "956410"
  },
  {
    "text": "to the event now now another scenario",
    "start": "956410",
    "end": "962050"
  },
  {
    "text": "just to talk about the request let's say that we have like a an image sharing application where people can tag each",
    "start": "962050",
    "end": "969040"
  },
  {
    "text": "other like the way for example you you will do it on Facebook's so you have a couple of queries to do all the images",
    "start": "969040",
    "end": "976209"
  },
  {
    "text": "for the user you can sort those those images by dates the images of whose user",
    "start": "976209",
    "end": "982720"
  },
  {
    "text": "has been in some of the tags and so on so the way we're going to build this is we're going to create one table pretty",
    "start": "982720",
    "end": "988750"
  },
  {
    "text": "simple with the the hash key is going to be the name of the user and then the reg",
    "start": "988750",
    "end": "994660"
  },
  {
    "text": "key is going to be the ID of the image and then we're going to have other attributes like the dates the the link",
    "start": "994660",
    "end": "1001110"
  },
  {
    "text": "into s3 of the of the image and so on so",
    "start": "1001110",
    "end": "1006300"
  },
  {
    "text": "the harsh remember is only equality queries so you can only get like all the",
    "start": "1006300",
    "end": "1011570"
  },
  {
    "text": "items that exactly match this hash and now the range you can do like negation",
    "start": "1011570",
    "end": "1017579"
  },
  {
    "text": "superior inferior and so on so the way I going to get all the images from a specific user it sprays try for it is",
    "start": "1017579",
    "end": "1024418"
  },
  {
    "text": "you do a query only on the hash key give me all the items where the hash is the",
    "start": "1024419",
    "end": "1031110"
  },
  {
    "text": "name of the user and that's it you're going to have them now you want to sort that by date so we have a problem here",
    "start": "1031110",
    "end": "1039209"
  },
  {
    "text": "because those two are the the hash and arrange attributes we don't have any",
    "start": "1039209",
    "end": "1045360"
  },
  {
    "text": "index on the date right so you saw what we what we do we are going to create a",
    "start": "1045360",
    "end": "1051270"
  },
  {
    "text": "local secondary index so the way it's going to be implemented is is like this so this happens behind the scenes",
    "start": "1051270",
    "end": "1056990"
  },
  {
    "text": "basically I keep the same hash which is the user and then I choose another range",
    "start": "1056990",
    "end": "1063659"
  },
  {
    "text": "key which here is going to be the date and then the request is again pretty",
    "start": "1063659",
    "end": "1069090"
  },
  {
    "text": "straightforward get me all the images of this user by decrementing date and I'm",
    "start": "1069090",
    "end": "1075120"
  },
  {
    "text": "still on an index so runs extremely fast now let's see about the tats so I'm",
    "start": "1075120",
    "end": "1082200"
  },
  {
    "text": "going to create another table which is going to be like the relationship table so in a specific image ID what are all",
    "start": "1082200",
    "end": "1090090"
  },
  {
    "text": "the users that are appearing in this image so I'm talking the name of the user so here again it's harsh in range",
    "start": "1090090",
    "end": "1097170"
  },
  {
    "text": "and for example if I want to have the list of all the users that appear in one",
    "start": "1097170",
    "end": "1103110"
  },
  {
    "text": "specific image so i give the the name of the image and i have the list of the",
    "start": "1103110",
    "end": "1109650"
  },
  {
    "text": "users ok so that's that's pretty pretty straightforward and if I want to talk another user I just insert a new line in",
    "start": "1109650",
    "end": "1116190"
  },
  {
    "text": "the in the table now if I want to query all the images where a specific user is",
    "start": "1116190",
    "end": "1122690"
  },
  {
    "text": "again I can't do it with this table because the hash is here this is just",
    "start": "1122690",
    "end": "1129390"
  },
  {
    "text": "the range right so if I want all the images where Alice appears i need basically to to flip that out so here",
    "start": "1129390",
    "end": "1137340"
  },
  {
    "text": "I'm going to use a global secondary index because I need to specify another hash not this this is not a good hash",
    "start": "1137340",
    "end": "1144450"
  },
  {
    "text": "for me but this will be a good hash so this is the difference between the local secondaries and the global secondary so",
    "start": "1144450",
    "end": "1151290"
  },
  {
    "text": "here I'm declaring global secondary index i'll be using this user attributes",
    "start": "1151290",
    "end": "1157140"
  },
  {
    "text": "and dynamo is going to project the rest of the data so i have like an alternate",
    "start": "1157140",
    "end": "1162570"
  },
  {
    "text": "table and then i can do the request of simple aziz so from the from the global",
    "start": "1162570",
    "end": "1168000"
  },
  {
    "text": "secondary index get me all the lines where the user is is Alice and Here I am",
    "start": "1168000",
    "end": "1173400"
  },
  {
    "text": "ok so that was to illustrate the difference between secondary indexes",
    "start": "1173400",
    "end": "1178580"
  },
  {
    "text": "local secondary indexes and global secondary indexes now let's look at the",
    "start": "1178580",
    "end": "1185370"
  },
  {
    "text": "load case for a for a game application so the let's say that we're doing like a",
    "start": "1185370",
    "end": "1192470"
  },
  {
    "text": "mobile application of the tic-tac-toe game and in fact this is an example that has been implemented so you can find it",
    "start": "1192470",
    "end": "1198990"
  },
  {
    "text": "on the document easy to deploy an elastic beanstalk and the the table looks like this so now I",
    "start": "1198990",
    "end": "1205700"
  },
  {
    "text": "represented the table in JSON format something that is also supported by by DynamoDB and well it works like this so",
    "start": "1205700",
    "end": "1214020"
  },
  {
    "text": "Alice starts playing so you have in the table the the position of her move and",
    "start": "1214020",
    "end": "1220100"
  },
  {
    "text": "the the name of the the next user is gonna who's going to play so now it's",
    "start": "1220100",
    "end": "1225870"
  },
  {
    "text": "Bob Stern so he's a he moves like this and at this point he Bobby smart he",
    "start": "1225870",
    "end": "1233670"
  },
  {
    "text": "realizes that by playing there he's going to lose right because I mean no",
    "start": "1233670",
    "end": "1239910"
  },
  {
    "text": "need to be a machine learning experts or like to do a deep recursion tree that is if if Ali's plays well she's gonna she's",
    "start": "1239910",
    "end": "1246960"
  },
  {
    "text": "gonna win in all cases so what do you do in this situation so you cheat right so",
    "start": "1246960",
    "end": "1252930"
  },
  {
    "text": "it's going to cheat and it's going to send multiple queries to the dynamo so all the cords are going to be processed",
    "start": "1252930",
    "end": "1258930"
  },
  {
    "text": "at the same time because dynamo is built for that and the data is going to be inserted directly in parallel and is",
    "start": "1258930",
    "end": "1265920"
  },
  {
    "text": "going to win in this situation so you want to avoid that obviously so we're going to use a feature of a call",
    "start": "1265920",
    "end": "1273690"
  },
  {
    "text": "conditional right so this is not something that is specific to dynamo and the database systems that that are used",
    "start": "1273690",
    "end": "1281250"
  },
  {
    "text": "in most of the banks and in the credit card transaction systems use exactly the same kind of a kind of feature which is",
    "start": "1281250",
    "end": "1288450"
  },
  {
    "text": "based on the on item for healing so the idea is you want to avoid concurrent",
    "start": "1288450",
    "end": "1295050"
  },
  {
    "text": "updates on different data sets right so if two different people at the same time are adding money into my bank account",
    "start": "1295050",
    "end": "1302450"
  },
  {
    "text": "the way it's going to work from a program perspective is first the program is going to read how much I have on my",
    "start": "1302450",
    "end": "1309180"
  },
  {
    "text": "bank account let's say 1,000 shekels and it's going to add 10 but the other one the other program is going to read it at",
    "start": "1309180",
    "end": "1315360"
  },
  {
    "text": "the same time so they are both going to read 1000 AD the amount and then update the database so the database is going to",
    "start": "1315360",
    "end": "1323330"
  },
  {
    "text": "to process the two queries one after the other but they should be sequential like one add and then I get the result in I",
    "start": "1323330",
    "end": "1330510"
  },
  {
    "text": "at the other so here's the same situation so the way is going to work is this so",
    "start": "1330510",
    "end": "1336299"
  },
  {
    "text": "the two requests are going to come concurrently one of them are going to take the version number so version",
    "start": "1336299",
    "end": "1342509"
  },
  {
    "text": "number is Bob so the second one comes like almost the same millisecond so they take exactly the same data but now the",
    "start": "1342509",
    "end": "1349889"
  },
  {
    "text": "difference is in how you're going to update the data itself so on your application you're going to write the",
    "start": "1349889",
    "end": "1357209"
  },
  {
    "text": "move and you're going to update the version counter and now you're going to update the database with the condition",
    "start": "1357209",
    "end": "1363239"
  },
  {
    "text": "so the condition is update the data if currently the data is in version one and",
    "start": "1363239",
    "end": "1368549"
  },
  {
    "text": "the data is at the version one currently because no one changed it but when the",
    "start": "1368549",
    "end": "1373619"
  },
  {
    "text": "second request comes exactly with the same thing puts the item if the version is one so the request is going to fail",
    "start": "1373619",
    "end": "1380369"
  },
  {
    "text": "because now I i moved to version two and even if DynamoDB is a distributed database across multiple availability",
    "start": "1380369",
    "end": "1386579"
  },
  {
    "text": "zones we guarantee this locking mechanism so you can use this in Java",
    "start": "1386579",
    "end": "1392639"
  },
  {
    "text": "there's a library that is supported with the with the Java tag so by assigning",
    "start": "1392639",
    "end": "1397769"
  },
  {
    "text": "the the tag DynamoDB version attribute you can you can have this done behind the scenes without you having to worry",
    "start": "1397769",
    "end": "1404189"
  },
  {
    "text": "about maintaining the numbers and so on it works in a similar way also on Python",
    "start": "1404189",
    "end": "1409349"
  },
  {
    "text": "and Ruby and we're we're putting this feature also to do to the other languages ok so the conditional writes",
    "start": "1409349",
    "end": "1417269"
  },
  {
    "text": "this is important when you have when you want to maintain like some kind of a",
    "start": "1417269",
    "end": "1422719"
  },
  {
    "text": "locking state in a situation where you can have multiple concurrent transactions going into the into the",
    "start": "1422719",
    "end": "1428579"
  },
  {
    "text": "same table now let's look at another scenario just to illustrate the point that I mentioned earlier about the the",
    "start": "1428579",
    "end": "1435869"
  },
  {
    "text": "different shouting and the partitioning system of dynamo so let's say that",
    "start": "1435869",
    "end": "1441149"
  },
  {
    "text": "you're running a black friday and you are doing like a special sales or for example the same situation where you",
    "start": "1441149",
    "end": "1447239"
  },
  {
    "text": "have like the the world cup and you're selling the soccer game tickets only during like a couple of hours so you're",
    "start": "1447239",
    "end": "1454589"
  },
  {
    "text": "going to have a huge amount of traffic into your website in a small amount of time so I so many situations where well",
    "start": "1454589",
    "end": "1461399"
  },
  {
    "text": "the the database administrator is going to connect to the AWS account is going to provision or capacity units because I mean you",
    "start": "1461399",
    "end": "1468510"
  },
  {
    "text": "read the documentation right so you see that if you compute the number of partitions that you're going to have so",
    "start": "1468510",
    "end": "1474270"
  },
  {
    "text": "let's say that here i have to i add more read capacity units and is going to",
    "start": "1474270",
    "end": "1480480"
  },
  {
    "text": "create more partitions now the thing you have to keep in mind is that yes it's going to create more partitions but each",
    "start": "1480480",
    "end": "1487410"
  },
  {
    "text": "partition receives an equal amount of read or write capacity units so if you",
    "start": "1487410",
    "end": "1494070"
  },
  {
    "text": "if you provision one thousand one hundred thousand read capacity units it means that each of your shards are going",
    "start": "1494070",
    "end": "1501240"
  },
  {
    "text": "to have like a specific amount of it right you're not going to be able to do like 100 thousand reads on one short",
    "start": "1501240",
    "end": "1508980"
  },
  {
    "text": "you're going to be able to do only two thousand on one shard and so now you see the problem let's say that you have like",
    "start": "1508980",
    "end": "1515400"
  },
  {
    "text": "two very popular products on your database and they are in the shards so you'd receive a huge amount of requests",
    "start": "1515400",
    "end": "1522090"
  },
  {
    "text": "but some of your very popular items are in a specific shore and this rod gets",
    "start": "1522090",
    "end": "1527430"
  },
  {
    "text": "hot and that's when dynamo is going to start throttling you this is and this is",
    "start": "1527430",
    "end": "1534600"
  },
  {
    "text": "kind of a nasty problem because you can say that well I don't know what's happening right I provision 100,000",
    "start": "1534600",
    "end": "1541760"
  },
  {
    "text": "right capacity units but I don't seem to be able to go above four or 2,000 right",
    "start": "1541760",
    "end": "1549680"
  },
  {
    "text": "because all the requests are going into this one and this one gets burned so obviously your first thing to do is look",
    "start": "1549680",
    "end": "1557190"
  },
  {
    "text": "at the traffic on your on your application see if you have like patterns of keys that are always",
    "start": "1557190",
    "end": "1563010"
  },
  {
    "text": "requested more than the others and in this situation well I mean you use the same recipes that you're using probably",
    "start": "1563010",
    "end": "1569040"
  },
  {
    "text": "already today that is you put a cash inside of DynamoDB it's not because DynamoDB it is a completely SSD backed",
    "start": "1569040",
    "end": "1577520"
  },
  {
    "text": "database that scales you like a huge amount of a size that dynamodb doesn't",
    "start": "1577520",
    "end": "1584400"
  },
  {
    "text": "need a cash in this situation when you can have like hot partitions or items that are going to be read",
    "start": "1584400",
    "end": "1591720"
  },
  {
    "text": "many times because of its popularity a cache is definitely going to help you",
    "start": "1591720",
    "end": "1596860"
  },
  {
    "text": "not only from a cost perspective because at the end you're going to be you're going to be heating the cash more often",
    "start": "1596860",
    "end": "1602380"
  },
  {
    "text": "than you're going to be heating dynamodb but also from a performance perspective you're you're not going to burn all your",
    "start": "1602380",
    "end": "1607750"
  },
  {
    "text": "read capacity units okay so for the cash you can use you can use Reddy's they are",
    "start": "1607750",
    "end": "1614830"
  },
  {
    "text": "here so you can use also elastic as you can use whatever caching mechanism mechanism you need there's multiple",
    "start": "1614830",
    "end": "1620620"
  },
  {
    "text": "libraries regardless the language you're going to be using okay so cash is going",
    "start": "1620620",
    "end": "1625930"
  },
  {
    "text": "to protect you against reads on the on hot partitions but now let's see the",
    "start": "1625930",
    "end": "1631840"
  },
  {
    "text": "reverse situation let's see the situation where you have a voting application and now you need to write",
    "start": "1631840",
    "end": "1638350"
  },
  {
    "text": "data so let's say that you have to you",
    "start": "1638350",
    "end": "1644230"
  },
  {
    "text": "have this very popular TV show where you can vote for singers and it's the final and you have like two candidates right",
    "start": "1644230",
    "end": "1651010"
  },
  {
    "text": "and your mobile application should allow anyone here in Israel to vote for one of the two candidates so again like from a",
    "start": "1651010",
    "end": "1660730"
  },
  {
    "text": "from a developer perspective the the query is pretty straightforward right you updates the vote on the candidate",
    "start": "1660730",
    "end": "1667120"
  },
  {
    "text": "and you do an atomic increment because the way we see previously with the the",
    "start": "1667120",
    "end": "1673660"
  },
  {
    "text": "different versions DynamoDB supports atomic increments even if it's a massively distributed database so again",
    "start": "1673660",
    "end": "1680770"
  },
  {
    "text": "you will you will add one additional vote like this now the problem is when when when the day of the election comes",
    "start": "1680770",
    "end": "1688120"
  },
  {
    "text": "so if you again scale with adding 200,000 right capacity units you're",
    "start": "1688120",
    "end": "1695440"
  },
  {
    "text": "going to have the same problem as before right each partition is going to be able to sustain only a limited amount of",
    "start": "1695440",
    "end": "1701980"
  },
  {
    "text": "rights but the problem is you're creating hot partitions because you have",
    "start": "1701980",
    "end": "1707140"
  },
  {
    "text": "only two candidates so there is only two candidates even if you provision the maximum amount of capacity that you can",
    "start": "1707140",
    "end": "1713740"
  },
  {
    "text": "have on DynamoDB tables one partition is going to have one candidate another one the other all the other partitions are",
    "start": "1713740",
    "end": "1719500"
  },
  {
    "text": "can will be completely useless right and you're not going to be able to sustain the load so how do you do in this situation so",
    "start": "1719500",
    "end": "1728340"
  },
  {
    "text": "for those of you who have been in operating relational databases and I",
    "start": "1728340",
    "end": "1734230"
  },
  {
    "text": "want you to open your mind to other ways to do it or to other ways of thinking",
    "start": "1734230",
    "end": "1742390"
  },
  {
    "text": "because what I'm going to show now a lot of people's like will argue that it's it's extremely dirty but it's extremely",
    "start": "1742390",
    "end": "1750010"
  },
  {
    "text": "efficient and this is how for example amazon scales during black friday this",
    "start": "1750010",
    "end": "1755950"
  },
  {
    "text": "is also how I am scales this is our spotify also sustains the similar",
    "start": "1755950",
    "end": "1761860"
  },
  {
    "text": "specific load so here we go you create multiple fake candidates and you",
    "start": "1761860",
    "end": "1767889"
  },
  {
    "text": "distribute them on on multiple shots and this is extremely effective because I",
    "start": "1767889",
    "end": "1774120"
  },
  {
    "text": "don't know okay if what happened in the UK is you have something like 10 million",
    "start": "1774120",
    "end": "1782320"
  },
  {
    "text": "potential users coming into your application in just 30 minutes you can",
    "start": "1782320",
    "end": "1787539"
  },
  {
    "text": "you can prepare your table for the votes a couple of hours before so you can",
    "start": "1787539",
    "end": "1793570"
  },
  {
    "text": "create a as you see like candidate a or candidate B so you create like I don't",
    "start": "1793570",
    "end": "1798909"
  },
  {
    "text": "know like five hundred thousand of them of them and they are going to be distributed on all the different shots",
    "start": "1798909",
    "end": "1805149"
  },
  {
    "text": "of your database now from an application perspective pretty straightforward you almost don't have to change anything",
    "start": "1805149",
    "end": "1810539"
  },
  {
    "text": "assuming that your randomization function is a can distribute the spread",
    "start": "1810539",
    "end": "1816610"
  },
  {
    "text": "around all the other different shards so you just update randomly one of the candidates and you add 1 volt so your",
    "start": "1816610",
    "end": "1823929"
  },
  {
    "text": "query is going to go to one of the candidates now you're going to have another process that is going to",
    "start": "1823929",
    "end": "1830649"
  },
  {
    "text": "periodically query all the candidates a do the Sun and update the the master",
    "start": "1830649",
    "end": "1836529"
  },
  {
    "text": "candidate here with the total count now the beauty of this mechanism somehow is",
    "start": "1836529",
    "end": "1841630"
  },
  {
    "text": "that in one side here you're writing on multiple different shards so you're",
    "start": "1841630",
    "end": "1847120"
  },
  {
    "text": "consuming right capacity units but it spread in a homogeneous way and in the",
    "start": "1847120",
    "end": "1853120"
  },
  {
    "text": "other hand you are here consuming read capacity units okay so you're",
    "start": "1853120",
    "end": "1859460"
  },
  {
    "text": "reading on the different shots so it doesn't burn your you're right capacity units and you're only updating one of",
    "start": "1859460",
    "end": "1865820"
  },
  {
    "text": "them that is not touched by the other part of the application so this is an",
    "start": "1865820",
    "end": "1871840"
  },
  {
    "text": "extremely effective technique that in some situation is perhaps perceived as",
    "start": "1871840",
    "end": "1878630"
  },
  {
    "text": "not as a not as academic but it can help you to scale like to I mean I've seen",
    "start": "1878630",
    "end": "1886160"
  },
  {
    "text": "the application that ever will be able to sustain like the case of Shazam something like 400,000 writes per second",
    "start": "1886160",
    "end": "1894860"
  },
  {
    "text": "during more than two hours okay let's",
    "start": "1894860",
    "end": "1900140"
  },
  {
    "text": "see another case a multiplayer application so we take again the",
    "start": "1900140",
    "end": "1905540"
  },
  {
    "text": "tic-tac-toe example and let's say that we are in this situation where we have a",
    "start": "1905540",
    "end": "1911270"
  },
  {
    "text": "little bored with multiple players and here you can each player can be invited",
    "start": "1911270",
    "end": "1917330"
  },
  {
    "text": "to different games so you see here depending invitations so I'm invited by one player and I can accept or reject",
    "start": "1917330",
    "end": "1924410"
  },
  {
    "text": "the invitation and I can see the other results right so the table can can look",
    "start": "1924410",
    "end": "1930200"
  },
  {
    "text": "like something like this I have the IDS of the game the diet when the game has been created who is the host with the",
    "start": "1930200",
    "end": "1936260"
  },
  {
    "text": "open end and what's the what's the current status of the game so again my",
    "start": "1936260",
    "end": "1942290"
  },
  {
    "text": "hash key is going to be only on the on the game ID and the way it was going to work from the transition perspective is",
    "start": "1942290",
    "end": "1948320"
  },
  {
    "text": "first the game has been created is pending then the two players start so it goes in progress and one that once the",
    "start": "1948320",
    "end": "1954650"
  },
  {
    "text": "the game is finished it's done so the first query I need to do is what are the pending invitations for this user okay",
    "start": "1954650",
    "end": "1962990"
  },
  {
    "text": "so we already saw the trick we just have to create a secondary index it's pretty",
    "start": "1962990",
    "end": "1968090"
  },
  {
    "text": "straightforward so here I'm going to choose the opponent and for the status",
    "start": "1968090",
    "end": "1973520"
  },
  {
    "text": "i'm going to have the range key and the and the request is going to look like this so from from all I take all the",
    "start": "1973520",
    "end": "1982550"
  },
  {
    "text": "details of the game for one player so I'm the opponent what are the games where I'm",
    "start": "1982550",
    "end": "1988070"
  },
  {
    "text": "been invited I choose the one with a status pending now let's say that I want",
    "start": "1988070",
    "end": "1994010"
  },
  {
    "text": "to order those games by date because perhaps someone invited me on a game like like this like last year and I",
    "start": "1994010",
    "end": "2000100"
  },
  {
    "text": "never answer because I don't like the guy right so I only want to see the most recent recent games so I should do",
    "start": "2000100",
    "end": "2007570"
  },
  {
    "text": "something like ordering by date right now there's a problem because I have a third criterion the first one is going",
    "start": "2007570",
    "end": "2015160"
  },
  {
    "text": "to be the hash the second arranged but the third is what so there's different",
    "start": "2015160",
    "end": "2020680"
  },
  {
    "text": "approaches to this and keep in mind that the way you pay on DynamoDB is by read",
    "start": "2020680",
    "end": "2026830"
  },
  {
    "text": "capacity units and right capacity units so you want to use those the least amount of time so you can you can be",
    "start": "2026830",
    "end": "2035260"
  },
  {
    "text": "more effective from from a cost perspective so the first approach is to use a filter so you're going to do your",
    "start": "2035260",
    "end": "2041740"
  },
  {
    "text": "requests on the opponent and the date and then you use I mean basically the",
    "start": "2041740",
    "end": "2046960"
  },
  {
    "text": "filtering features of the the acquiring language of DynamoDB in order to do in",
    "start": "2046960",
    "end": "2053350"
  },
  {
    "text": "order to do the ordering and then the filtering but it looks like this it looks like let's say that you want to",
    "start": "2053350",
    "end": "2059169"
  },
  {
    "text": "find all those orange dots in the in the bowl so the query is going to take many",
    "start": "2059170",
    "end": "2065080"
  },
  {
    "text": "of the blue ones and the filtering is going to remove them after now from a",
    "start": "2065080",
    "end": "2070720"
  },
  {
    "text": "cost perspective this is not efficient because it means that DynamoDB is going to read many of the items that you don't",
    "start": "2070720",
    "end": "2077320"
  },
  {
    "text": "care about but it needs to read them in order to be able to filter them or not",
    "start": "2077320",
    "end": "2082440"
  },
  {
    "text": "okay because the index is not complete now what I want to do if I ideal if I",
    "start": "2082440",
    "end": "2088690"
  },
  {
    "text": "have an index or if I'm sorted i'm reading the minimum amount of the of",
    "start": "2088690",
    "end": "2095399"
  },
  {
    "text": "information to in order to keep the ones that are interesting for me so the first",
    "start": "2095400",
    "end": "2104020"
  },
  {
    "text": "way to do it is to use a filter in some situations if you don't need like a huge",
    "start": "2104020",
    "end": "2109630"
  },
  {
    "text": "amount of throughput or if it's if you're the way you order your table is quite okay you are not taking a lot of",
    "start": "2109630",
    "end": "2115120"
  },
  {
    "text": "bad results this could work another way is to use a composite key",
    "start": "2115120",
    "end": "2120820"
  },
  {
    "text": "so for the same people as last time open your mind to other approaches you can",
    "start": "2120820",
    "end": "2127660"
  },
  {
    "text": "use a composite key so from a development perspective this is seen as",
    "start": "2127660",
    "end": "2132930"
  },
  {
    "text": "okay let me retake this from a theoretical perspective it's seen as bad",
    "start": "2132930",
    "end": "2138850"
  },
  {
    "text": "as a bad practice and it is somehow because basically what you are doing is you're you're duplicating information in",
    "start": "2138850",
    "end": "2148000"
  },
  {
    "text": "your table right so what you do what I'm doing here from a code perspective is I'm just taking two two attributes I I",
    "start": "2148000",
    "end": "2156280"
  },
  {
    "text": "do the concatenation in my in the code of my application and I create a third attribute and then I use this third",
    "start": "2156280",
    "end": "2163420"
  },
  {
    "text": "attribute in order to to be my wrench King so it's a bit dirty but it's",
    "start": "2163420",
    "end": "2169240"
  },
  {
    "text": "extremely efficient because now I have a query that goes on on a harsh and range",
    "start": "2169240",
    "end": "2175630"
  },
  {
    "text": "I don't even need to filter so the result goes directly to the amount of information that I need but I need to do",
    "start": "2175630",
    "end": "2183460"
  },
  {
    "text": "this kind of dirty concatenation in my code right but extremely effective",
    "start": "2183460",
    "end": "2188860"
  },
  {
    "text": "something that that is using in a in Pinterest and Instagram as well okay",
    "start": "2188860",
    "end": "2195660"
  },
  {
    "text": "let's see another example now I just have a couple left the classic",
    "start": "2195660",
    "end": "2200770"
  },
  {
    "text": "application of a URL shortener let's say that it for whatever reason you want to implement something like a bit ly for",
    "start": "2200770",
    "end": "2206860"
  },
  {
    "text": "your own application right so we all know how it works you have a very long",
    "start": "2206860",
    "end": "2212890"
  },
  {
    "text": "link that you want the same as a as a message so you have a shorter link with",
    "start": "2212890",
    "end": "2218020"
  },
  {
    "text": "an ID and from an architectural perspective when when the client is going to is going to do the query is",
    "start": "2218020",
    "end": "2225340"
  },
  {
    "text": "going to send you an HTTP GET request with the shortened link the application",
    "start": "2225340",
    "end": "2231550"
  },
  {
    "text": "goes to DynamoDB to see what is the version of the what is the complete long link and is going to redirect the plan",
    "start": "2231550",
    "end": "2238990"
  },
  {
    "text": "to this to this value so the table can be very straightforward the hash can be",
    "start": "2238990",
    "end": "2244870"
  },
  {
    "text": "the short URL and another I attribute can be the long URL and then you can",
    "start": "2244870",
    "end": "2249880"
  },
  {
    "text": "have additional information about who created it at that time and so on now let's say that we want to be a bit",
    "start": "2249880",
    "end": "2256210"
  },
  {
    "text": "fancier we want to do statistics we want to see how many times the link has been excessive so we can do that with a let's",
    "start": "2256210",
    "end": "2263800"
  },
  {
    "text": "say for example JSON document so this is the kind of JSON item that you can have",
    "start": "2263800",
    "end": "2270400"
  },
  {
    "text": "inside of inside of DynamoDB so you see that some some attribute some are",
    "start": "2270400",
    "end": "2275530"
  },
  {
    "text": "different directly attributes on the table and here you have like nested nested values and so on so the the",
    "start": "2275530",
    "end": "2282730"
  },
  {
    "text": "different data types that I show at the beginning definitely apply here so you can have not only nested attributes but",
    "start": "2282730",
    "end": "2287980"
  },
  {
    "text": "you can also have nested maps of attribute inside our document and the whole size as I as I mentioned at the",
    "start": "2287980",
    "end": "2295000"
  },
  {
    "text": "beginning is limited to four hundred kilobytes which which should be enough for most of the applications if you need",
    "start": "2295000",
    "end": "2300880"
  },
  {
    "text": "more than four hundred kilobytes you should really consider putting most of",
    "start": "2300880",
    "end": "2306160"
  },
  {
    "text": "the data into s3 and only keeping the relevant information for the queries only into into dynamo okay so let's see",
    "start": "2306160",
    "end": "2315010"
  },
  {
    "text": "let's see how it works so this is JavaScript example code but the",
    "start": "2315010",
    "end": "2320890"
  },
  {
    "text": "structure is exactly the same in in other languages so if I want to if I",
    "start": "2320890",
    "end": "2326200"
  },
  {
    "text": "want to add a new link you see that there's nothing really magic my request just contains the JSON object I based it",
    "start": "2326200",
    "end": "2333940"
  },
  {
    "text": "like this specifying the name of the table and it works right I only have to",
    "start": "2333940",
    "end": "2338980"
  },
  {
    "text": "specify the hash key now I want to do a",
    "start": "2338980",
    "end": "2345070"
  },
  {
    "text": "resolution so again pretty easy I just give the the hash key that I want to",
    "start": "2345070",
    "end": "2350350"
  },
  {
    "text": "extract I can specify if I want to consistent read or not and you see the result so the answer is going to be the",
    "start": "2350350",
    "end": "2357100"
  },
  {
    "text": "complete JSON document again nothing nothing magic here now it can be a bit",
    "start": "2357100",
    "end": "2362950"
  },
  {
    "text": "fancier I can do sequel like expressions and I can I can go into the structure of",
    "start": "2362950",
    "end": "2369940"
  },
  {
    "text": "my tree in order to for example do like this see all the most popular short URLs",
    "start": "2369940",
    "end": "2377380"
  },
  {
    "text": "right so and I can go as you can see here inside the structure of the JSON",
    "start": "2377380",
    "end": "2382660"
  },
  {
    "text": "document to do my query and the the same if I",
    "start": "2382660",
    "end": "2389470"
  },
  {
    "text": "want to get usage statistics so i can i can update when the latest user got the",
    "start": "2389470",
    "end": "2397720"
  },
  {
    "text": "link and the number of users or who got this link so the same things that we saw",
    "start": "2397720",
    "end": "2402880"
  },
  {
    "text": "for the the classic queries with the incremental attributes and so on you can also definitely do it in in JSON",
    "start": "2402880",
    "end": "2408910"
  },
  {
    "text": "documents okay so quick recap on this",
    "start": "2408910",
    "end": "2416100"
  },
  {
    "text": "Amazon DynamoDB is not only a key value store it was it in the something like",
    "start": "2416100",
    "end": "2423070"
  },
  {
    "text": "two years ago but at that time we added the the JSON document functionality so",
    "start": "2423070",
    "end": "2428560"
  },
  {
    "text": "even with everything that i mentioned earlier also applies with the json documents with nested tree structures",
    "start": "2428560",
    "end": "2435180"
  },
  {
    "text": "now let's see another example with this it said that we have a messaging application right and while the message",
    "start": "2435180",
    "end": "2442210"
  },
  {
    "text": "is a complete JSON document with the metadata the sender pretty much like like an email right so a way to",
    "start": "2442210",
    "end": "2450580"
  },
  {
    "text": "implement it could be like this a table where you have the the recipient name the date where the message has been sent",
    "start": "2450580",
    "end": "2457390"
  },
  {
    "text": "so this is the range key and then who's the sender and the body of the message in JSON will be in the message attribute",
    "start": "2457390",
    "end": "2464760"
  },
  {
    "text": "so this is pretty easy to get all the messages from a specific user and even sort them by date because it's just the",
    "start": "2464760",
    "end": "2470920"
  },
  {
    "text": "query on my hash in range key now the problem is that this is very ineffective",
    "start": "2470920",
    "end": "2476070"
  },
  {
    "text": "it's an effective from a cost perspective because again keep in mind",
    "start": "2476070",
    "end": "2481360"
  },
  {
    "text": "that the way we charge you when you use dynamo is how many read capacity units you're consuming and how many right",
    "start": "2481360",
    "end": "2488020"
  },
  {
    "text": "capacity units you're consuming so here let's say that each item has something",
    "start": "2488020",
    "end": "2495160"
  },
  {
    "text": "like 256 kilobytes it's like long text of messages that you sent from from one",
    "start": "2495160",
    "end": "2500380"
  },
  {
    "text": "user to another so basically you have to multiply 256 kilobytes per number of",
    "start": "2500380",
    "end": "2506710"
  },
  {
    "text": "items that you are getting so if you are retrieving 50 of those so it's going to be a 256 kilobytes x 50 items",
    "start": "2506710",
    "end": "2515490"
  },
  {
    "text": "you're going to probably burn all your read capacity you need for that second already so how you do it well pretty",
    "start": "2515490",
    "end": "2522510"
  },
  {
    "text": "abuse at that stage you split it into two tables so one is going to have the",
    "start": "2522510",
    "end": "2528119"
  },
  {
    "text": "metadata another one who's going to have only the the body of the messages and you can split it like this right so one",
    "start": "2528119",
    "end": "2535110"
  },
  {
    "text": "table has only the attributes that you need to do the queries and the other one is going to have like them the message",
    "start": "2535110",
    "end": "2541320"
  },
  {
    "text": "ID and then the complete body of the message into into JSON so from a cost",
    "start": "2541320",
    "end": "2546540"
  },
  {
    "text": "perspective here is definitely way more way more effective you only do a query here and the data that you use here the",
    "start": "2546540",
    "end": "2554790"
  },
  {
    "text": "attributes is something like 128 bytes for this situation so pretty shorter so",
    "start": "2554790",
    "end": "2560430"
  },
  {
    "text": "you can have like a complete list of the 50 items and if you look at it it's it's pretty much at the same way that most of",
    "start": "2560430",
    "end": "2567270"
  },
  {
    "text": "the like for example the email clients work first you see all the list of emails in your inbox and then if you",
    "start": "2567270",
    "end": "2573570"
  },
  {
    "text": "click on an email then you go to the to the message itself and you do the heavy query so it allows you to distribute the",
    "start": "2573570",
    "end": "2582090"
  },
  {
    "text": "load on on on different tables now the",
    "start": "2582090",
    "end": "2587760"
  },
  {
    "text": "problem of this approach is from a developer perspective you're going to have to write twice first you write the",
    "start": "2587760",
    "end": "2596730"
  },
  {
    "text": "meta data of the message in one table and then you're going to have to write the body of the message in one table and",
    "start": "2596730",
    "end": "2602490"
  },
  {
    "text": "this is bad right because we know that well as Ian mentioned just before me",
    "start": "2602490",
    "end": "2608970"
  },
  {
    "text": "things can fail everything fails all the time so well you can have one right",
    "start": "2608970",
    "end": "2614070"
  },
  {
    "text": "that's going to succeed but the other is going to fail for whatever reason right so how do you solve this especially",
    "start": "2614070",
    "end": "2620820"
  },
  {
    "text": "keeping in mind that no sequel databases like dynamo can't support distributed",
    "start": "2620820",
    "end": "2627150"
  },
  {
    "text": "transactions the same way sequel databases will work because of the",
    "start": "2627150",
    "end": "2632420"
  },
  {
    "text": "because of the the way they are distributed on multiple on multiple data",
    "start": "2632420",
    "end": "2638010"
  },
  {
    "text": "centers and because of the cap theorem itself right you your training of consistency or throughput with your",
    "start": "2638010",
    "end": "2646590"
  },
  {
    "text": "training of a distribution with the consistency of your of your data set now well we have a solution on dynamos",
    "start": "2646590",
    "end": "2654510"
  },
  {
    "text": "so it's using the global secondary indexes that we saw at the beginning so",
    "start": "2654510",
    "end": "2659580"
  },
  {
    "text": "i'm going to write only on the messages table right and then i'm going to project the attributes on the on the",
    "start": "2659580",
    "end": "2668130"
  },
  {
    "text": "global secondary inbox table and this way from a code perspective i only need",
    "start": "2668130",
    "end": "2674310"
  },
  {
    "text": "to write once and i'll leave to dynamo the work of distributing the data to two",
    "start": "2674310",
    "end": "2680790"
  },
  {
    "text": "other tables so yes the as i mentioned at the beginning of the rights are going to be eventually consistent so if you",
    "start": "2680790",
    "end": "2687180"
  },
  {
    "text": "know in fam in a situation where i'm going to when i'm doing a lot of read after rights maybe it may be tricky but",
    "start": "2687180",
    "end": "2694020"
  },
  {
    "text": "for this kind of applications where usually the the way the user sees these",
    "start": "2694020",
    "end": "2700740"
  },
  {
    "text": "messages first released and then click to specific items it's going to work definitely and you can project the data",
    "start": "2700740",
    "end": "2706370"
  },
  {
    "text": "for many other for many other tables that for example doing an outbox a table",
    "start": "2706370",
    "end": "2712140"
  },
  {
    "text": "or like even all the folders so just to",
    "start": "2712140",
    "end": "2717270"
  },
  {
    "text": "wrap up on this keep in mind that local secondary indexes and global secondary",
    "start": "2717270",
    "end": "2722850"
  },
  {
    "text": "indexes are not only good in order to to make your queries more efficient but they are also good to to help you",
    "start": "2722850",
    "end": "2729840"
  },
  {
    "text": "minimize the amount of that the amount of times you're going to write into dynamo and to to keep and replicate data",
    "start": "2729840",
    "end": "2736370"
  },
  {
    "text": "for your application okay so those were small situations that came from what",
    "start": "2736370",
    "end": "2745410"
  },
  {
    "text": "what i see what we saw from from different customers the point for me was to illustrate the the boring theoretical",
    "start": "2745410",
    "end": "2752190"
  },
  {
    "text": "stuff that i explained at the beginning i just have three minutes left so i wanted to mention a couple of additional",
    "start": "2752190",
    "end": "2759270"
  },
  {
    "text": "features that we could uncover so obviously DynamoDB streams but also features that are somehow interesting",
    "start": "2759270",
    "end": "2768180"
  },
  {
    "text": "like import/export you can you can dump a complete DynamoDB table into amazon s3 into another region for example or it",
    "start": "2768180",
    "end": "2776520"
  },
  {
    "text": "will allow you for example to to copy your DynamoDB table and to reuse it for analysis all four",
    "start": "2776520",
    "end": "2782289"
  },
  {
    "text": "an environment you can also have like auto scaling for for a dynamo dB there's",
    "start": "2782289",
    "end": "2788739"
  },
  {
    "text": "a couple of interesting projects that allow you to to implement this we are also working on a on a feature that is",
    "start": "2788739",
    "end": "2795999"
  },
  {
    "text": "similar to this so if if this is something that you okay how can I put",
    "start": "2795999",
    "end": "2801279"
  },
  {
    "text": "this if this is something that you will need but you can wait for a couple of weeks this is something that you will",
    "start": "2801279",
    "end": "2806739"
  },
  {
    "text": "have on dynamo out of the box this is if this is something that you absolutely need right now there's a couple of",
    "start": "2806739",
    "end": "2813160"
  },
  {
    "text": "projects that allowed that you can find on github that allow you to automatically adapt the number of read",
    "start": "2813160",
    "end": "2819189"
  },
  {
    "text": "or write capacity units you have on a dynamo DB table by looking at your cloud watch metrics so otherwise you can do it",
    "start": "2819189",
    "end": "2828759"
  },
  {
    "text": "the kind of pager or old school way on the AWS mobile application you can have",
    "start": "2828759",
    "end": "2836319"
  },
  {
    "text": "from your mobile phone access to the capacity units that you have on your DynamoDB tables so if you still have a",
    "start": "2836319",
    "end": "2842739"
  },
  {
    "text": "pager somehow I p to you but you can you can still get your mobile phone and an",
    "start": "2842739",
    "end": "2848109"
  },
  {
    "text": "add capacity units on the on the table regarding capacity units keep in mind that you can also do cost optimization",
    "start": "2848109",
    "end": "2855119"
  },
  {
    "text": "the same way you have like reserved ec2 instances you can have reserve capacity for dynamo DB table when you know that",
    "start": "2855119",
    "end": "2862029"
  },
  {
    "text": "there's a minimum fixed amount of read capacity units or read capacity units that you're going to need and if you",
    "start": "2862029",
    "end": "2868119"
  },
  {
    "text": "never use dynamo or if you're a developer using dynamo this is something that is a bit hidden in the developer",
    "start": "2868119",
    "end": "2874630"
  },
  {
    "text": "documentation there's a version of dynamo DB that run that can run locally on your machine so obviously it's not",
    "start": "2874630",
    "end": "2880779"
  },
  {
    "text": "going to scale at the same same amount that DynamoDB can scale itself but it's",
    "start": "2880779",
    "end": "2886299"
  },
  {
    "text": "exactly the same API so if you are you install it locally it's a it's a java",
    "start": "2886299",
    "end": "2892390"
  },
  {
    "text": "application so it's just a jar to execute the database is implemented with",
    "start": "2892390",
    "end": "2897819"
  },
  {
    "text": "a sequel light but the the front end of these database Aaron mimics the dynamo",
    "start": "2897819",
    "end": "2903909"
  },
  {
    "text": "DB endpoints so you can install this locally develop while you are not connected and then move your code into",
    "start": "2903909",
    "end": "2910809"
  },
  {
    "text": "production in uws and it works exactly the same now if you didn't use dynamo dB before I recommend you also to give it a",
    "start": "2910809",
    "end": "2917980"
  },
  {
    "text": "try because it comes with a web shell in JavaScript that has a nice tutorial that",
    "start": "2917980",
    "end": "2923650"
  },
  {
    "text": "girl does a walkthrough and explains you how to create indexes how to do queries and so on so definitely give it a try",
    "start": "2923650",
    "end": "2930190"
  },
  {
    "text": "and there's also in the dynamo DB page a lot of videos and documentation is that",
    "start": "2930190",
    "end": "2935320"
  },
  {
    "text": "show all the different cases that I explained today perhaps in a in an even",
    "start": "2935320",
    "end": "2940900"
  },
  {
    "text": "more nicer way so with that thank you so much for attention if you have more questions thank you if you have more",
    "start": "2940900",
    "end": "2950050"
  },
  {
    "text": "questions on on dynamo I mean you can come to the to go to the AWS booth and",
    "start": "2950050",
    "end": "2957840"
  },
  {
    "text": "pretty much everyone in the team will be able to help you on this thank you",
    "start": "2957840",
    "end": "2963480"
  }
]