[
  {
    "text": "In this video, you'll get an introduction to",
    "start": "210",
    "end": "1928"
  },
  {
    "text": "Amazon Elastic Kubernetes Service \n(Amazon EKS) Observability Accelerator.",
    "start": "1928",
    "end": "6257"
  },
  {
    "text": "With this solution, you can easily deploy and configure\nan application-specific observability environment,",
    "start": "7026",
    "end": "11895"
  },
  {
    "text": "use Terraform to create Amazon Managed Service for\nPrometheus and Amazon Managed Grafana resources,",
    "start": "11895",
    "end": "17271"
  },
  {
    "text": "and conduct end-to-end monitoring of applications.",
    "start": "17271",
    "end": "19560"
  },
  {
    "text": "We’ll begin by cloning a GitHub repository\ninside our AWS Cloud9 environment.",
    "start": "21824",
    "end": "25952"
  },
  {
    "text": "This repository contains a \ncollection of Terraform modules",
    "start": "26630",
    "end": "29282"
  },
  {
    "text": "that aim to make it easier and \nfaster to adopt Amazon EKS.",
    "start": "29282",
    "end": "32621"
  },
  {
    "text": "The modules can be used to configure and manage\ncomplete EKS clusters that are fully bootstrapped",
    "start": "33331",
    "end": "37576"
  },
  {
    "text": "with the operational software needed\nto deploy and operate workloads.",
    "start": "37576",
    "end": "40758"
  },
  {
    "text": "Next, let’s open the directory we just created ",
    "start": "46706",
    "end": "48898"
  },
  {
    "text": "and navigate to the folder \ncontaining the Terraform modules.",
    "start": "48898",
    "end": "51504"
  },
  {
    "text": "Now let's initialize the directory.",
    "start": "56729",
    "end": "58165"
  },
  {
    "text": "To deploy the Terraform modules,\nwe’ll need a couple of variables.",
    "start": "63000",
    "end": "65751"
  },
  {
    "text": "First, let's navigate to Amazon \nManaged Grafana to create an API key.",
    "start": "66236",
    "end": "69592"
  },
  {
    "text": "We'll select this existing workspace and sign in.",
    "start": "70547",
    "end": "72723"
  },
  {
    "text": "Let's add the API key.",
    "start": "87609",
    "end": "88795"
  },
  {
    "text": "We'll provide a name and assign the Admin role.",
    "start": "89732",
    "end": "91675"
  },
  {
    "text": "Next, we'll make the key valid for one day.",
    "start": "96520",
    "end": "98597"
  },
  {
    "text": "This is the only time that the key will appear \nhere, so let’s copy it for use in our deployment.",
    "start": "101272",
    "end": "105000"
  },
  {
    "text": "Next, let’s return to Amazon Managed Grafana\nto get the Grafana endpoint for our workspace.",
    "start": "107397",
    "end": "111794"
  },
  {
    "text": "Now let’s return to our Cloud9 environment.",
    "start": "113870",
    "end": "115678"
  },
  {
    "text": "For demonstration purposes, \nwe've already updated the API key",
    "start": "117684",
    "end": "120522"
  },
  {
    "text": "and endpoint in the dev.tfvars file, as you can see here.",
    "start": "120523",
    "end": "123769"
  },
  {
    "text": "Alternatively, you can update\nthe variables in a variables.tf file.",
    "start": "124408",
    "end": "127710"
  },
  {
    "text": "Next, let’s run terraform plan to create a preview of",
    "start": "130823",
    "end": "133417"
  },
  {
    "text": "the changes that Terraform \nwill make in our infrastructure.",
    "start": "133417",
    "end": "135823"
  },
  {
    "text": "We can see the different modules that will be created.",
    "start": "137485",
    "end": "139459"
  },
  {
    "text": "The Terraform modules will create a namespace\ncalled opentelemetry-operator-system",
    "start": "140957",
    "end": "145065"
  },
  {
    "text": "and deploy the AWS Distro for\nOpenTelemetry (ADOT) Collector,",
    "start": "145065",
    "end": "149127"
  },
  {
    "text": "which will scrape the Java JMX metrics\nfrom the application running on our EKS cluster",
    "start": "149127",
    "end": "153385"
  },
  {
    "text": "and ingest these metrics into Amazon\nManaged Service for Prometheus.",
    "start": "153385",
    "end": "156527"
  },
  {
    "text": "Now we’ll apply the Terraform modules to deploy an",
    "start": "157953",
    "end": "160194"
  },
  {
    "text": "end-to-end monitoring solution \nfor a sample JMX application.",
    "start": "160194",
    "end": "163212"
  },
  {
    "text": "First, the modules will deploy an EKS cluster.",
    "start": "170325",
    "end": "172735"
  },
  {
    "text": "We can monitor the status of the \ncluster from the Amazon EKS console.",
    "start": "173151",
    "end": "176359"
  },
  {
    "text": "The cluster has a status of “Creating.”",
    "start": "178641",
    "end": "180384"
  },
  {
    "text": "The modules will also deploy an Amazon\nManaged Service for Prometheus workspace.",
    "start": "181126",
    "end": "184781"
  },
  {
    "text": "We can check the status of that workspace in the\nAmazon Managed Service for Prometheus console.",
    "start": "185241",
    "end": "189120"
  },
  {
    "text": "The workspace has not been created yet.",
    "start": "191068",
    "end": "192635"
  },
  {
    "text": "Let’s return to our Cloud9 environment\nto monitor the command execution.",
    "start": "193230",
    "end": "196374"
  },
  {
    "text": "The EKS cluster has been created.",
    "start": "197681",
    "end": "199369"
  },
  {
    "text": "Let’s go to Amazon Elastic Kubernetes\nService to confirm that it’s active.",
    "start": "199968",
    "end": "203010"
  },
  {
    "text": "We can see that the cluster is now active.",
    "start": "204803",
    "end": "206556"
  },
  {
    "text": "Next, let's check the status of the Amazon\nService for Prometheus workspace.",
    "start": "207274",
    "end": "210705"
  },
  {
    "text": "The workspace has been created successfully.",
    "start": "213471",
    "end": "215306"
  },
  {
    "text": "Let’s return to our Cloud9 environment.",
    "start": "215483",
    "end": "217049"
  },
  {
    "text": "The Terraform modules have finished deploying.",
    "start": "219099",
    "end": "221018"
  },
  {
    "text": "Now let’s confirm that a few\nremaining resources were created.",
    "start": "221550",
    "end": "224202"
  },
  {
    "text": "The ADOT Collector has been deployed and is running\nin the opentelemetry-operator-system namespace.",
    "start": "227393",
    "end": "231866"
  },
  {
    "text": "The remote-write endpoint for the\nworkspace has also been created,",
    "start": "239625",
    "end": "242656"
  },
  {
    "text": "enabling the JMX metrics to be automatically ingested",
    "start": "242656",
    "end": "245280"
  },
  {
    "text": "into the workspace in Amazon \nManaged Service for Prometheus.",
    "start": "245280",
    "end": "248299"
  },
  {
    "text": "Let’s go to our Amazon Managed Grafana workspace",
    "start": "248949",
    "end": "251118"
  },
  {
    "text": "to confirm that the data source \nwas created successfully.",
    "start": "251118",
    "end": "253504"
  },
  {
    "text": "As you can see, the remote-write endpoint has been",
    "start": "255654",
    "end": "257579"
  },
  {
    "text": "configured as the data source \nfor the Grafana dashboard.",
    "start": "257579",
    "end": "260076"
  },
  {
    "text": "It may take a few minutes for\nthe dashboard to be generated.",
    "start": "263150",
    "end": "265324"
  },
  {
    "text": "Meanwhile, let's go back to our Cloud9 \nenvironment to deploy a sample JMX application.",
    "start": "265808",
    "end": "270054"
  },
  {
    "text": "In order to do that, we'll first navigate to the \nappropriate directory path and deploy an example ",
    "start": "271270",
    "end": "275352"
  },
  {
    "text": "application from the AWS open telemetry collector \nrepository by running the git clone command.",
    "start": "275352",
    "end": "280300"
  },
  {
    "text": "After this command is executed, you should\nsee the open telemetry test framework directory.",
    "start": "281656",
    "end": "285859"
  },
  {
    "text": "Let's navigate to this directory and find\nthe appropriate location within this directory",
    "start": "286656",
    "end": "290183"
  },
  {
    "text": "to run our authentication against our Amazon\nElastic Container Registry (Amazon ECR) repository.",
    "start": "290183",
    "end": "295269"
  },
  {
    "text": "Next, we’ll authenticate to the Amazon Elastic\nContainer Registry (Amazon ECR) repository.",
    "start": "296509",
    "end": "301321"
  },
  {
    "text": "Let’s create a new repository.",
    "start": "302585",
    "end": "304077"
  },
  {
    "text": "Next, we’ll create a Docker image\nand push it to the Amazon ECR repository.",
    "start": "310137",
    "end": "313850"
  },
  {
    "text": "Now let's deploy the sample application.",
    "start": "320254",
    "end": "322098"
  },
  {
    "text": "First, we'll export a few environment variables.",
    "start": "322434",
    "end": "324650"
  },
  {
    "text": "Next, we’ll download the YAML\nfile with the sample metrics.",
    "start": "325822",
    "end": "328509"
  },
  {
    "text": "This file has a namespace called “javajmx-sample” and\ncontains a deployment file for the sample application.",
    "start": "331161",
    "end": "336651"
  },
  {
    "text": "Load generators will help collect\na diverse set of metric information.",
    "start": "340519",
    "end": "343543"
  },
  {
    "text": "Now let's apply the configuration file.",
    "start": "345989",
    "end": "347731"
  },
  {
    "text": "All of the traffic generator pods are running.",
    "start": "351289",
    "end": "353217"
  },
  {
    "text": "Now let’s return to the Amazon Managed Grafana\nconsole to see if the dashboard has been created.",
    "start": "353728",
    "end": "357827"
  },
  {
    "text": "The dashboard has been created and is collecting information about Java virtual machine (JVM)",
    "start": "363425",
    "end": "367763"
  },
  {
    "text": "CPU usage, JVM memory pool used, JVM \nthreads used, JVM class loading, and more.",
    "start": "367763",
    "end": "373314"
  },
  {
    "text": "By deploying the EKS Observability\nAccelerator using Terraform modules,",
    "start": "374066",
    "end": "377909"
  },
  {
    "text": "we were able to achieve end-to-end observability\nwithout any manual configurations.",
    "start": "377909",
    "end": "381652"
  },
  {
    "text": "You’ve just seen an introduction to\nAmazon EKS Observability Accelerator.",
    "start": "384496",
    "end": "388057"
  },
  {
    "text": "You can learn more about this topic in\nthe description and links for this video.",
    "start": "389162",
    "end": "392047"
  },
  {
    "text": "Thanks for watching. Now it’s your turn to try.",
    "start": "392282",
    "end": "394053"
  }
]