[
  {
    "text": "hello and welcome everyone my name is",
    "start": "1260",
    "end": "3840"
  },
  {
    "text": "piyush and I am a Solutions architect",
    "start": "3840",
    "end": "6180"
  },
  {
    "text": "aligned with the financial services",
    "start": "6180",
    "end": "7859"
  },
  {
    "text": "industry",
    "start": "7859",
    "end": "9480"
  },
  {
    "text": "this is a series of lightning talk on",
    "start": "9480",
    "end": "12179"
  },
  {
    "text": "ECS and fargate with the objective of",
    "start": "12179",
    "end": "15360"
  },
  {
    "text": "making you all familiar with ECS which",
    "start": "15360",
    "end": "18600"
  },
  {
    "text": "is a fully managed container",
    "start": "18600",
    "end": "20580"
  },
  {
    "text": "orchestration service",
    "start": "20580",
    "end": "22619"
  },
  {
    "text": "today we'll talk about ECS integration",
    "start": "22619",
    "end": "25140"
  },
  {
    "text": "with AWS core pipeline",
    "start": "25140",
    "end": "28199"
  },
  {
    "text": "just to level set continuous integration",
    "start": "28199",
    "end": "30960"
  },
  {
    "text": "is a software process in which",
    "start": "30960",
    "end": "33239"
  },
  {
    "text": "developers regularly push their code",
    "start": "33239",
    "end": "35880"
  },
  {
    "text": "into a central repository such as AWS",
    "start": "35880",
    "end": "39180"
  },
  {
    "text": "code commit or GitHub",
    "start": "39180",
    "end": "42000"
  },
  {
    "text": "every core push invokes an automated",
    "start": "42000",
    "end": "44879"
  },
  {
    "text": "build followed by running of tests",
    "start": "44879",
    "end": "48180"
  },
  {
    "text": "continuous delivery on the other hand is",
    "start": "48180",
    "end": "51000"
  },
  {
    "text": "based on the fact that there is always a",
    "start": "51000",
    "end": "54420"
  },
  {
    "text": "stable production Ready Main Line of the",
    "start": "54420",
    "end": "56820"
  },
  {
    "text": "code",
    "start": "56820",
    "end": "57660"
  },
  {
    "text": "and deployment can take place anytime",
    "start": "57660",
    "end": "60480"
  },
  {
    "text": "from that main line",
    "start": "60480",
    "end": "62340"
  },
  {
    "text": "continuous delivery can be fully",
    "start": "62340",
    "end": "64559"
  },
  {
    "text": "automated or have approval stages at",
    "start": "64559",
    "end": "67799"
  },
  {
    "text": "critical points this ensures that all",
    "start": "67799",
    "end": "71159"
  },
  {
    "text": "required approvals prior to the",
    "start": "71159",
    "end": "73140"
  },
  {
    "text": "deployment such as release management",
    "start": "73140",
    "end": "75360"
  },
  {
    "text": "approvals are in place",
    "start": "75360",
    "end": "77700"
  },
  {
    "text": "the benefits of continuous integration",
    "start": "77700",
    "end": "79740"
  },
  {
    "text": "and continuous delivery is that",
    "start": "79740",
    "end": "81659"
  },
  {
    "text": "application code can be delivered faster",
    "start": "81659",
    "end": "84540"
  },
  {
    "text": "to production by automating the software",
    "start": "84540",
    "end": "87360"
  },
  {
    "text": "supply chain",
    "start": "87360",
    "end": "88619"
  },
  {
    "text": "this produces secure code of better",
    "start": "88619",
    "end": "91740"
  },
  {
    "text": "quality provides faster feedback and",
    "start": "91740",
    "end": "95400"
  },
  {
    "text": "results in a faster time to Market of",
    "start": "95400",
    "end": "97799"
  },
  {
    "text": "the product",
    "start": "97799",
    "end": "99180"
  },
  {
    "text": "next I would like to go over core",
    "start": "99180",
    "end": "102299"
  },
  {
    "text": "pipeline in the context of Amazon ECS",
    "start": "102299",
    "end": "105720"
  },
  {
    "text": "AWS code pipeline is a fully managed",
    "start": "105720",
    "end": "108780"
  },
  {
    "text": "continuous delivery service that helps",
    "start": "108780",
    "end": "111780"
  },
  {
    "text": "you automate your release pipeline for",
    "start": "111780",
    "end": "115020"
  },
  {
    "text": "fast and reliable application as well as",
    "start": "115020",
    "end": "118560"
  },
  {
    "text": "infrastructure updates",
    "start": "118560",
    "end": "120600"
  },
  {
    "text": "core pipeline is composed of series of",
    "start": "120600",
    "end": "123540"
  },
  {
    "text": "stages and those stages are composed of",
    "start": "123540",
    "end": "126479"
  },
  {
    "text": "series of actions those actions are",
    "start": "126479",
    "end": "129959"
  },
  {
    "text": "tasks that perform the build that deploy",
    "start": "129959",
    "end": "132959"
  },
  {
    "text": "the test and the release process",
    "start": "132959",
    "end": "136980"
  },
  {
    "text": "starting with the source stage wherein",
    "start": "136980",
    "end": "139319"
  },
  {
    "text": "we can use AWS code commit which is a",
    "start": "139319",
    "end": "143160"
  },
  {
    "text": "fully managed Source control repository",
    "start": "143160",
    "end": "145680"
  },
  {
    "text": "for hosting git repositories",
    "start": "145680",
    "end": "148620"
  },
  {
    "text": "you have the flexibility to use",
    "start": "148620",
    "end": "151020"
  },
  {
    "text": "third-party repositories such as",
    "start": "151020",
    "end": "152879"
  },
  {
    "text": "bitbucket Cloud GitHub or gitlab as the",
    "start": "152879",
    "end": "157020"
  },
  {
    "text": "source for your code",
    "start": "157020",
    "end": "159780"
  },
  {
    "text": "next is the build stage wherein you can",
    "start": "159780",
    "end": "163319"
  },
  {
    "text": "use Amazon native AWS code build to",
    "start": "163319",
    "end": "167340"
  },
  {
    "text": "create a ready to deploy artifacts which",
    "start": "167340",
    "end": "170580"
  },
  {
    "text": "are housed inside Amazon elastic",
    "start": "170580",
    "end": "173160"
  },
  {
    "text": "container registry ECR",
    "start": "173160",
    "end": "176519"
  },
  {
    "text": "and finally in the deploy stage",
    "start": "176519",
    "end": "180239"
  },
  {
    "text": "AWS code deploy would take image",
    "start": "180239",
    "end": "183120"
  },
  {
    "text": "artifact from Amazon ECR which was built",
    "start": "183120",
    "end": "187260"
  },
  {
    "text": "earlier by AWS core build and deploy the",
    "start": "187260",
    "end": "190800"
  },
  {
    "text": "image onto the ECS cluster",
    "start": "190800",
    "end": "194459"
  },
  {
    "text": "let us next take a look at the pipeline",
    "start": "194459",
    "end": "197040"
  },
  {
    "text": "in action I have a web application",
    "start": "197040",
    "end": "200480"
  },
  {
    "text": "deployed on Amazon ECS which randomly",
    "start": "200480",
    "end": "204360"
  },
  {
    "text": "displays a pet picture when clicked upon",
    "start": "204360",
    "end": "207659"
  },
  {
    "text": "let us change the text on the displayed",
    "start": "207659",
    "end": "211019"
  },
  {
    "text": "picture and push that change to the AWS",
    "start": "211019",
    "end": "214200"
  },
  {
    "text": "code commit Repository",
    "start": "214200",
    "end": "217519"
  },
  {
    "text": "the modified source code push would",
    "start": "229560",
    "end": "232379"
  },
  {
    "text": "invoke the code pipeline workflow",
    "start": "232379",
    "end": "234980"
  },
  {
    "text": "wherein AWS code build would build a new",
    "start": "234980",
    "end": "239040"
  },
  {
    "text": "container image and deploy the image",
    "start": "239040",
    "end": "242099"
  },
  {
    "text": "automatically to Amazon ECS",
    "start": "242099",
    "end": "246319"
  },
  {
    "text": "after few minutes the core pipeline",
    "start": "248220",
    "end": "250980"
  },
  {
    "text": "execution status shows succeeded",
    "start": "250980",
    "end": "254640"
  },
  {
    "text": "and you can now see the new version of",
    "start": "254640",
    "end": "257400"
  },
  {
    "text": "the application so if I click on the pet",
    "start": "257400",
    "end": "260280"
  },
  {
    "text": "image",
    "start": "260280",
    "end": "261419"
  },
  {
    "text": "the pad label got updated with the",
    "start": "261419",
    "end": "264479"
  },
  {
    "text": "changes we pushed",
    "start": "264479",
    "end": "266820"
  },
  {
    "text": "next let us see the inner workings of",
    "start": "266820",
    "end": "270540"
  },
  {
    "text": "the pipeline",
    "start": "270540",
    "end": "272460"
  },
  {
    "text": "and double click into the code build",
    "start": "272460",
    "end": "275460"
  },
  {
    "text": "portion and let's review the build",
    "start": "275460",
    "end": "277440"
  },
  {
    "text": "specification file",
    "start": "277440",
    "end": "279960"
  },
  {
    "text": "build specification contains a set of",
    "start": "279960",
    "end": "282960"
  },
  {
    "text": "build instructions that AWS core build",
    "start": "282960",
    "end": "285960"
  },
  {
    "text": "uses to perform your build",
    "start": "285960",
    "end": "288840"
  },
  {
    "text": "build specification has a set of life",
    "start": "288840",
    "end": "291600"
  },
  {
    "text": "cycle phases which executes zero or more",
    "start": "291600",
    "end": "294780"
  },
  {
    "text": "commands",
    "start": "294780",
    "end": "296160"
  },
  {
    "text": "as you can see in the pre-built phase",
    "start": "296160",
    "end": "299340"
  },
  {
    "text": "you authenticate to the Amazon ECR",
    "start": "299340",
    "end": "302520"
  },
  {
    "text": "registry",
    "start": "302520",
    "end": "303900"
  },
  {
    "text": "subsequently in the build stage you",
    "start": "303900",
    "end": "307080"
  },
  {
    "text": "build the docker image from a Docker",
    "start": "307080",
    "end": "309479"
  },
  {
    "text": "file and then tag the image",
    "start": "309479",
    "end": "311940"
  },
  {
    "text": "finally during the post build phase you",
    "start": "311940",
    "end": "315419"
  },
  {
    "text": "would push the tagged Docker image to",
    "start": "315419",
    "end": "317940"
  },
  {
    "text": "the Amazon ECR registry and produce a",
    "start": "317940",
    "end": "321540"
  },
  {
    "text": "build output artifact",
    "start": "321540",
    "end": "324780"
  },
  {
    "text": "that concludes today's talk about Amazon",
    "start": "324780",
    "end": "328080"
  },
  {
    "text": "ECS integration with AWS core pipeline",
    "start": "328080",
    "end": "332100"
  },
  {
    "text": "we'll see you next time",
    "start": "332100",
    "end": "335300"
  }
]