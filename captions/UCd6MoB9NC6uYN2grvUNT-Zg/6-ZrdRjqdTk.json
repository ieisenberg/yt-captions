[
  {
    "text": "hi my name is Ali Ben fatum and I am a",
    "start": "680",
    "end": "3800"
  },
  {
    "text": "specialty solution architect for iot at",
    "start": "3800",
    "end": "6680"
  },
  {
    "text": "Amazon web services in this video I'm",
    "start": "6680",
    "end": "10000"
  },
  {
    "text": "going to take you through how to connect",
    "start": "10000",
    "end": "12280"
  },
  {
    "text": "gateways to AWS iot core for Laura",
    "start": "12280",
    "end": "15960"
  },
  {
    "text": "1 first I'm going to start by quickly",
    "start": "15960",
    "end": "19400"
  },
  {
    "text": "explaining what is Laura 1 and what AWS",
    "start": "19400",
    "end": "22720"
  },
  {
    "text": "iot cor for Laura 1 enables you to do",
    "start": "22720",
    "end": "26080"
  },
  {
    "text": "then I will describe how Laura basic",
    "start": "26080",
    "end": "28480"
  },
  {
    "text": "station Works Laur basic station is a",
    "start": "28480",
    "end": "31199"
  },
  {
    "text": "program running on the host of a Laura",
    "start": "31199",
    "end": "33320"
  },
  {
    "text": "based Gateway once we have a clear",
    "start": "33320",
    "end": "36320"
  },
  {
    "text": "understanding of Laura 1 and Laura based",
    "start": "36320",
    "end": "38320"
  },
  {
    "text": "gateways I'm going to show you how to",
    "start": "38320",
    "end": "40840"
  },
  {
    "text": "easily connect a gateway to AWS iot cor",
    "start": "40840",
    "end": "44079"
  },
  {
    "text": "for Laura one and start ingesting data",
    "start": "44079",
    "end": "48000"
  },
  {
    "text": "and I will end by saying a few words",
    "start": "48000",
    "end": "50199"
  },
  {
    "text": "about the AWS partner device catalog in",
    "start": "50199",
    "end": "53320"
  },
  {
    "text": "which you can find Qualified gateways",
    "start": "53320",
    "end": "56000"
  },
  {
    "text": "that connect to AWS iot cor out of the",
    "start": "56000",
    "end": "58840"
  },
  {
    "text": "box let's get",
    "start": "58840",
    "end": "61079"
  },
  {
    "text": "started lauran is a low power wide area",
    "start": "61079",
    "end": "64838"
  },
  {
    "text": "networking protocol designed to",
    "start": "64839",
    "end": "67159"
  },
  {
    "text": "wirelessly connect battery operated",
    "start": "67159",
    "end": "69360"
  },
  {
    "text": "things to the internet the luran network",
    "start": "69360",
    "end": "72840"
  },
  {
    "text": "architecture is deployed in a star of",
    "start": "72840",
    "end": "75320"
  },
  {
    "text": "stars topology in which gateways relay",
    "start": "75320",
    "end": "78520"
  },
  {
    "text": "messages between end devices and a",
    "start": "78520",
    "end": "80840"
  },
  {
    "text": "central Network server the gateways are",
    "start": "80840",
    "end": "84000"
  },
  {
    "text": "connected to the network server via",
    "start": "84000",
    "end": "86119"
  },
  {
    "text": "standard IP connections and act as a",
    "start": "86119",
    "end": "89119"
  },
  {
    "text": "transparent Bridge simply converting RF",
    "start": "89119",
    "end": "91840"
  },
  {
    "text": "packets to IP packets and vice",
    "start": "91840",
    "end": "95000"
  },
  {
    "text": "versa Laura one functions on top of Laur",
    "start": "95000",
    "end": "98680"
  },
  {
    "text": "which is the wireless radio frequency",
    "start": "98680",
    "end": "100799"
  },
  {
    "text": "technology Laura uses license-free radio",
    "start": "100799",
    "end": "103520"
  },
  {
    "text": "frequency band like 868 mahz in Europe",
    "start": "103520",
    "end": "107719"
  },
  {
    "text": "or 9915 mahz in Australia and North",
    "start": "107719",
    "end": "111719"
  },
  {
    "text": "America designed and maintained by the",
    "start": "111719",
    "end": "114680"
  },
  {
    "text": "Laura Alliance the Laura one",
    "start": "114680",
    "end": "116479"
  },
  {
    "text": "specification is open meaning that",
    "start": "116479",
    "end": "119039"
  },
  {
    "text": "anyone can set up and operate a Laura",
    "start": "119039",
    "end": "121399"
  },
  {
    "text": "one network to set up your private Laura",
    "start": "121399",
    "end": "124200"
  },
  {
    "text": "one network you need to connect your",
    "start": "124200",
    "end": "126119"
  },
  {
    "text": "Laura gateways to a Laura Network",
    "start": "126119",
    "end": "130000"
  },
  {
    "text": "server with AWS cor for Laura one our",
    "start": "130280",
    "end": "134080"
  },
  {
    "text": "customers can now simply and cost",
    "start": "134080",
    "end": "136680"
  },
  {
    "text": "effectively set up a private and",
    "start": "136680",
    "end": "138879"
  },
  {
    "text": "scalable luran network with a few simple",
    "start": "138879",
    "end": "141640"
  },
  {
    "text": "steps eliminating the burden of managing",
    "start": "141640",
    "end": "144760"
  },
  {
    "text": "a Laura Network server and its",
    "start": "144760",
    "end": "146879"
  },
  {
    "text": "Associated",
    "start": "146879",
    "end": "148239"
  },
  {
    "text": "infrastructure customers can now focus",
    "start": "148239",
    "end": "150959"
  },
  {
    "text": "on business logic not on managing",
    "start": "150959",
    "end": "155319"
  },
  {
    "text": "infrastructure AWS iot core for laan",
    "start": "155319",
    "end": "158519"
  },
  {
    "text": "provides a fully managed lauran Network",
    "start": "158519",
    "end": "161000"
  },
  {
    "text": "server in the cloud integrated with",
    "start": "161000",
    "end": "163640"
  },
  {
    "text": "laura1 device provisioning and Gateway",
    "start": "163640",
    "end": "166159"
  },
  {
    "text": "Management Service you just bring your",
    "start": "166159",
    "end": "168599"
  },
  {
    "text": "own devices and gateways and connect",
    "start": "168599",
    "end": "171440"
  },
  {
    "text": "them with AWS iot cor for La",
    "start": "171440",
    "end": "174640"
  },
  {
    "text": "one AWS car foran ensures that device",
    "start": "174640",
    "end": "179080"
  },
  {
    "text": "traffic coming through the gateways",
    "start": "179080",
    "end": "181040"
  },
  {
    "text": "belongs to the same AWS account and the",
    "start": "181040",
    "end": "183879"
  },
  {
    "text": "device traffic is discarded if the",
    "start": "183879",
    "end": "186200"
  },
  {
    "text": "devices and the gateways do not belong",
    "start": "186200",
    "end": "188799"
  },
  {
    "text": "to the same AWS account all data sent to",
    "start": "188799",
    "end": "193080"
  },
  {
    "text": "AWS iot is sent over a TLS connection",
    "start": "193080",
    "end": "197000"
  },
  {
    "text": "established by the Gateway so it is",
    "start": "197000",
    "end": "199720"
  },
  {
    "text": "secure by default AWS iot core for",
    "start": "199720",
    "end": "202879"
  },
  {
    "text": "lauran includes support for open source",
    "start": "202879",
    "end": "205799"
  },
  {
    "text": "Gateway software called Laura basix",
    "start": "205799",
    "end": "208799"
  },
  {
    "text": "Station to enable customers to connect",
    "start": "208799",
    "end": "211400"
  },
  {
    "text": "gateways securely to awsi core and",
    "start": "211400",
    "end": "214480"
  },
  {
    "text": "manage them remotely at scale laurab",
    "start": "214480",
    "end": "218080"
  },
  {
    "text": "basic station provides a variety of",
    "start": "218080",
    "end": "220560"
  },
  {
    "text": "useful features on top of its two",
    "start": "220560",
    "end": "224319"
  },
  {
    "text": "protocols the LNS protocol is the",
    "start": "224319",
    "end": "227159"
  },
  {
    "text": "primary data plan providing a low",
    "start": "227159",
    "end": "229840"
  },
  {
    "text": "latency bidirectional Communication",
    "start": "229840",
    "end": "232120"
  },
  {
    "text": "channel over secure web sockets between",
    "start": "232120",
    "end": "235200"
  },
  {
    "text": "the Gateway and the Laura Network server",
    "start": "235200",
    "end": "237720"
  },
  {
    "text": "also called LNS",
    "start": "237720",
    "end": "240040"
  },
  {
    "text": "in addition Laura basic station provides",
    "start": "240040",
    "end": "242840"
  },
  {
    "text": "credentials management and firmware",
    "start": "242840",
    "end": "244920"
  },
  {
    "text": "update interface via the configuration",
    "start": "244920",
    "end": "248040"
  },
  {
    "text": "and update server protocol called CS",
    "start": "248040",
    "end": "251480"
  },
  {
    "text": "awsi cor for Laura 1 provides a managed",
    "start": "251480",
    "end": "254879"
  },
  {
    "text": "cup server for configuring AWS iot",
    "start": "254879",
    "end": "257280"
  },
  {
    "text": "endpoint on your gateway and for",
    "start": "257280",
    "end": "259639"
  },
  {
    "text": "Distributing the firmware",
    "start": "259639",
    "end": "263040"
  },
  {
    "text": "updates the Lowa basic station source",
    "start": "263040",
    "end": "265800"
  },
  {
    "text": "code is distributed and maintained by S",
    "start": "265800",
    "end": "268680"
  },
  {
    "text": "Tech in this video we are going to build",
    "start": "268680",
    "end": "271600"
  },
  {
    "text": "and run the Laura basic station on the",
    "start": "271600",
    "end": "273759"
  },
  {
    "text": "Laura 1 Gateway and connect it to AWS",
    "start": "273759",
    "end": "276639"
  },
  {
    "text": "iot cor for Laura",
    "start": "276639",
    "end": "278280"
  },
  {
    "text": "one to securely connect a gateway to a",
    "start": "278280",
    "end": "281240"
  },
  {
    "text": "Laura Network server a few configuration",
    "start": "281240",
    "end": "283759"
  },
  {
    "text": "file have to be set up first the",
    "start": "283759",
    "end": "287479"
  },
  {
    "text": "station.com file which contains settings",
    "start": "287479",
    "end": "290800"
  },
  {
    "text": "to configure the gateway then we need to",
    "start": "290800",
    "end": "293960"
  },
  {
    "text": "Define where we need to connect and we",
    "start": "293960",
    "end": "296600"
  },
  {
    "text": "have two options the file TC urri",
    "start": "296600",
    "end": "300880"
  },
  {
    "text": "contains the Full URL to the LNS web",
    "start": "300880",
    "end": "303960"
  },
  {
    "text": "soet endpoint the communication is",
    "start": "303960",
    "end": "306759"
  },
  {
    "text": "secured using the credential sets tc.",
    "start": "306759",
    "end": "310000"
  },
  {
    "text": "trust tc. key and tc.",
    "start": "310000",
    "end": "313320"
  },
  {
    "text": "CRT the file cs. urri contains the URL",
    "start": "313320",
    "end": "318400"
  },
  {
    "text": "to the Cs HTTP endpoint the",
    "start": "318400",
    "end": "321160"
  },
  {
    "text": "communication is secured using the",
    "start": "321160",
    "end": "323520"
  },
  {
    "text": "credential set cs. trust cs. CRT and cs.",
    "start": "323520",
    "end": "328199"
  },
  {
    "text": "key if this file cs. urri is present the",
    "start": "328199",
    "end": "333120"
  },
  {
    "text": "Gateway running laurab basic station",
    "start": "333120",
    "end": "335240"
  },
  {
    "text": "will automatically use the Cs protocol",
    "start": "335240",
    "end": "338080"
  },
  {
    "text": "to retrieve the LNS connection details",
    "start": "338080",
    "end": "341960"
  },
  {
    "text": "now let's configure and connect aaan",
    "start": "341960",
    "end": "344560"
  },
  {
    "text": "gateway to AWS ier for Laura 1 using",
    "start": "344560",
    "end": "347680"
  },
  {
    "text": "basic",
    "start": "347680",
    "end": "349120"
  },
  {
    "text": "station for this video I'm using the",
    "start": "349120",
    "end": "352000"
  },
  {
    "text": "rack 7246 luran Gateway that uses a",
    "start": "352000",
    "end": "355960"
  },
  {
    "text": "Raspberry Pi zero as a host I'm going to",
    "start": "355960",
    "end": "359160"
  },
  {
    "text": "start with a fresh install of Raspberry",
    "start": "359160",
    "end": "361800"
  },
  {
    "text": "Pi",
    "start": "361800",
    "end": "363039"
  },
  {
    "text": "OS going through the installation steps",
    "start": "363039",
    "end": "366720"
  },
  {
    "text": "now I can insert the SD card into the",
    "start": "366720",
    "end": "369880"
  },
  {
    "text": "Raspberry Pi and power it up after a few",
    "start": "369880",
    "end": "373280"
  },
  {
    "text": "minutes I can access the command line of",
    "start": "373280",
    "end": "375680"
  },
  {
    "text": "my gateway remotely using",
    "start": "375680",
    "end": "378400"
  },
  {
    "text": "SSH to start we first need to make sure",
    "start": "378400",
    "end": "381599"
  },
  {
    "text": "that the SPI interface is enabled so",
    "start": "381599",
    "end": "385080"
  },
  {
    "text": "let's enable it next we quickly update",
    "start": "385080",
    "end": "388039"
  },
  {
    "text": "the package list and install git as we",
    "start": "388039",
    "end": "390560"
  },
  {
    "text": "will use git to clone the Lowa basic",
    "start": "390560",
    "end": "392680"
  },
  {
    "text": "station",
    "start": "392680",
    "end": "393880"
  },
  {
    "text": "repository once it is installed we can",
    "start": "393880",
    "end": "396639"
  },
  {
    "text": "clone the Lowa basic station git",
    "start": "396639",
    "end": "398479"
  },
  {
    "text": "repository and compile the",
    "start": "398479",
    "end": "400880"
  },
  {
    "text": "binary you can find all the command I",
    "start": "400880",
    "end": "403440"
  },
  {
    "text": "use to build the binary in the Lowa",
    "start": "403440",
    "end": "405599"
  },
  {
    "text": "basic station GitHub",
    "start": "405599",
    "end": "407360"
  },
  {
    "text": "repository you should see now in the",
    "start": "407360",
    "end": "409319"
  },
  {
    "text": "folder basic station a new folder named",
    "start": "409319",
    "end": "412520"
  },
  {
    "text": "build- erpi - STD in this newly created",
    "start": "412520",
    "end": "416960"
  },
  {
    "text": "folder we will find in the subfolder",
    "start": "416960",
    "end": "419680"
  },
  {
    "text": "been the executable of Flora basic",
    "start": "419680",
    "end": "422280"
  },
  {
    "text": "station that we will",
    "start": "422280",
    "end": "424440"
  },
  {
    "text": "use now we can start the configuration",
    "start": "424440",
    "end": "427120"
  },
  {
    "text": "of the Gateway the first step is to",
    "start": "427120",
    "end": "430080"
  },
  {
    "text": "create a station.com file I simply copy",
    "start": "430080",
    "end": "434319"
  },
  {
    "text": "the example file available in the",
    "start": "434319",
    "end": "436639"
  },
  {
    "text": "example folder next we need to create",
    "start": "436639",
    "end": "440240"
  },
  {
    "text": "the credential set and the URL link for",
    "start": "440240",
    "end": "443199"
  },
  {
    "text": "the Cs server in our example we will use",
    "start": "443199",
    "end": "446479"
  },
  {
    "text": "the manage CB server provided by AWS iot",
    "start": "446479",
    "end": "449639"
  },
  {
    "text": "core for Laura 1 to retrieve the Laura",
    "start": "449639",
    "end": "452280"
  },
  {
    "text": "Network Server Connection",
    "start": "452280",
    "end": "454560"
  },
  {
    "text": "details so at this point we are going to",
    "start": "454560",
    "end": "457360"
  },
  {
    "text": "use the AWS console to get the Cs URL",
    "start": "457360",
    "end": "460879"
  },
  {
    "text": "and the credentials we need to finish",
    "start": "460879",
    "end": "463120"
  },
  {
    "text": "the configuration you can also use the",
    "start": "463120",
    "end": "465720"
  },
  {
    "text": "API to do the exact",
    "start": "465720",
    "end": "468520"
  },
  {
    "text": "same let's open up the AWS Management",
    "start": "468520",
    "end": "472080"
  },
  {
    "text": "console visit the iot cor console in the",
    "start": "472080",
    "end": "475400"
  },
  {
    "text": "navigation pane choose Wireless",
    "start": "475400",
    "end": "477280"
  },
  {
    "text": "connectivity and then gateway to aaan",
    "start": "477280",
    "end": "480199"
  },
  {
    "text": "Gateway but before adding gateways we",
    "start": "480199",
    "end": "482960"
  },
  {
    "text": "need first to add an IM role to allow",
    "start": "482960",
    "end": "485680"
  },
  {
    "text": "the cup server to manage Gateway",
    "start": "485680",
    "end": "488680"
  },
  {
    "text": "credentials this procedure needs to be",
    "start": "488680",
    "end": "491240"
  },
  {
    "text": "done only once but must be performed",
    "start": "491240",
    "end": "494080"
  },
  {
    "text": "before a luran Gateway tries to connect",
    "start": "494080",
    "end": "496599"
  },
  {
    "text": "with AWS ior for Laura one go to the IM",
    "start": "496599",
    "end": "500120"
  },
  {
    "text": "am roles page on the am console choose",
    "start": "500120",
    "end": "503479"
  },
  {
    "text": "create rooll on the create roll page",
    "start": "503479",
    "end": "506599"
  },
  {
    "text": "choose another iws account in account ID",
    "start": "506599",
    "end": "511199"
  },
  {
    "text": "enter your iws account ID and then",
    "start": "511199",
    "end": "514159"
  },
  {
    "text": "choose next",
    "start": "514159",
    "end": "515719"
  },
  {
    "text": "permissions search and select the policy",
    "start": "515719",
    "end": "518919"
  },
  {
    "text": "named AWS iot wireless gateway set",
    "start": "518919",
    "end": "523000"
  },
  {
    "text": "manager choose next tags and then choose",
    "start": "523000",
    "end": "527120"
  },
  {
    "text": "next",
    "start": "527120",
    "end": "528120"
  },
  {
    "text": "review in rle name enter iot wireless",
    "start": "528120",
    "end": "532480"
  },
  {
    "text": "gateway set manager role and then choose",
    "start": "532480",
    "end": "535680"
  },
  {
    "text": "create role to edit the new role in the",
    "start": "535680",
    "end": "538920"
  },
  {
    "text": "confirmation message choose iot wireless",
    "start": "538920",
    "end": "541839"
  },
  {
    "text": "gateway set manager",
    "start": "541839",
    "end": "544120"
  },
  {
    "text": "role in summary choose the trust",
    "start": "544120",
    "end": "546760"
  },
  {
    "text": "relationship Tab and then choose edit",
    "start": "546760",
    "end": "549959"
  },
  {
    "text": "trust",
    "start": "549959",
    "end": "550920"
  },
  {
    "text": "relationship in policy document change",
    "start": "550920",
    "end": "553760"
  },
  {
    "text": "the principal property to be the service",
    "start": "553760",
    "end": "556440"
  },
  {
    "text": "iot wireless. Amazon aws.com and to save",
    "start": "556440",
    "end": "560680"
  },
  {
    "text": "your changes and exit choose update",
    "start": "560680",
    "end": "563680"
  },
  {
    "text": "trust policy you have now created the",
    "start": "563680",
    "end": "566600"
  },
  {
    "text": "iot wireless gateway set manager role",
    "start": "566600",
    "end": "569040"
  },
  {
    "text": "you want need to do this",
    "start": "569040",
    "end": "571600"
  },
  {
    "text": "again we can return now to iot core and",
    "start": "571600",
    "end": "575160"
  },
  {
    "text": "add a Gateway first enter the unique",
    "start": "575160",
    "end": "578240"
  },
  {
    "text": "identifier of your gateway the Gateway",
    "start": "578240",
    "end": "580880"
  },
  {
    "text": "eui is a 8 by globally unique",
    "start": "580880",
    "end": "584360"
  },
  {
    "text": "identifier for our Gateway we use the",
    "start": "584360",
    "end": "586680"
  },
  {
    "text": "MAC address of the Raspberry Pi expanded",
    "start": "586680",
    "end": "589600"
  },
  {
    "text": "with two more byes FF and Fe it is a",
    "start": "589600",
    "end": "593120"
  },
  {
    "text": "common way to increment the MAC address",
    "start": "593120",
    "end": "595440"
  },
  {
    "text": "from six to eight bytes then we choose",
    "start": "595440",
    "end": "598320"
  },
  {
    "text": "the frequency band my Gateway is in",
    "start": "598320",
    "end": "600600"
  },
  {
    "text": "Europe so I choose 868 MHz as an option",
    "start": "600600",
    "end": "606000"
  },
  {
    "text": "we can add a name and a description and",
    "start": "606000",
    "end": "608640"
  },
  {
    "text": "Associated thing in the iot core",
    "start": "608640",
    "end": "611160"
  },
  {
    "text": "registry then click on ADD",
    "start": "611160",
    "end": "614040"
  },
  {
    "text": "Gateway in this step we collect the",
    "start": "614040",
    "end": "616920"
  },
  {
    "text": "security and connection resources we",
    "start": "616920",
    "end": "619079"
  },
  {
    "text": "need to configure laurab basic station",
    "start": "619079",
    "end": "621440"
  },
  {
    "text": "on the Gateway first we create in the",
    "start": "621440",
    "end": "624279"
  },
  {
    "text": "Gateway the cs. file and we enter the Cs",
    "start": "624279",
    "end": "628360"
  },
  {
    "text": "endpoint provided in the console then we",
    "start": "628360",
    "end": "631920"
  },
  {
    "text": "download the server trust certificates",
    "start": "631920",
    "end": "634360"
  },
  {
    "text": "we should get two certificates one for",
    "start": "634360",
    "end": "636959"
  },
  {
    "text": "the LNS server and another one for the",
    "start": "636959",
    "end": "639680"
  },
  {
    "text": "Cs",
    "start": "639680",
    "end": "640959"
  },
  {
    "text": "server copy the caps. trust file on the",
    "start": "640959",
    "end": "644480"
  },
  {
    "text": "Gateway the cs. trust certificate",
    "start": "644480",
    "end": "647360"
  },
  {
    "text": "enables the gateway to establish trust",
    "start": "647360",
    "end": "649920"
  },
  {
    "text": "with the Cs",
    "start": "649920",
    "end": "651519"
  },
  {
    "text": "server finally we can create and",
    "start": "651519",
    "end": "654320"
  },
  {
    "text": "download the certificate and its private",
    "start": "654320",
    "end": "657040"
  },
  {
    "text": "key for the Gateway copies the content",
    "start": "657040",
    "end": "659920"
  },
  {
    "text": "of the private key in a file named cs.",
    "start": "659920",
    "end": "663240"
  },
  {
    "text": "key and the content of the certificate",
    "start": "663240",
    "end": "665600"
  },
  {
    "text": "in a file named cs.",
    "start": "665600",
    "end": "669120"
  },
  {
    "text": "CRT let's check we have all the files we",
    "start": "669120",
    "end": "672320"
  },
  {
    "text": "need to securely connect our Gateway",
    "start": "672320",
    "end": "676240"
  },
  {
    "text": "cs.cr cs. key cs. trust cs. and",
    "start": "676240",
    "end": "681760"
  },
  {
    "text": "station.com all good we can now run",
    "start": "681760",
    "end": "684680"
  },
  {
    "text": "basic station passing the SPI device as",
    "start": "684680",
    "end": "688000"
  },
  {
    "text": "an environment variable",
    "start": "688000",
    "end": "689839"
  },
  {
    "text": "using radio",
    "start": "689839",
    "end": "691399"
  },
  {
    "text": "Dev here our Gateway is securely",
    "start": "691399",
    "end": "693800"
  },
  {
    "text": "connected to AWS for laan and has",
    "start": "693800",
    "end": "696480"
  },
  {
    "text": "successfully retrieved the LNS",
    "start": "696480",
    "end": "699000"
  },
  {
    "text": "connection details if we check again the",
    "start": "699000",
    "end": "701480"
  },
  {
    "text": "list of files in our Gateway we can see",
    "start": "701480",
    "end": "703959"
  },
  {
    "text": "tc. CRT tc. key and tc. trust these are",
    "start": "703959",
    "end": "708279"
  },
  {
    "text": "all the files we need to securely",
    "start": "708279",
    "end": "710519"
  },
  {
    "text": "connect the gateway to the LNS server",
    "start": "710519",
    "end": "713040"
  },
  {
    "text": "and exchanged",
    "start": "713040",
    "end": "715200"
  },
  {
    "text": "data now that we have a Gateway",
    "start": "715200",
    "end": "717560"
  },
  {
    "text": "connected to awsi for Laura one let's",
    "start": "717560",
    "end": "720560"
  },
  {
    "text": "add a Lura one device before we add a",
    "start": "720560",
    "end": "723760"
  },
  {
    "text": "device we need to create a Laura one",
    "start": "723760",
    "end": "726120"
  },
  {
    "text": "destination for this device Lura one",
    "start": "726120",
    "end": "729000"
  },
  {
    "text": "destination describes the AWS iot rule",
    "start": "729000",
    "end": "732440"
  },
  {
    "text": "that processes a device data for use by",
    "start": "732440",
    "end": "734920"
  },
  {
    "text": "AWS Services because most lauran devices",
    "start": "734920",
    "end": "739079"
  },
  {
    "text": "don't send data to AWS for Laura one in",
    "start": "739079",
    "end": "742240"
  },
  {
    "text": "a format that can be used by AWS",
    "start": "742240",
    "end": "745160"
  },
  {
    "text": "Services an AWS iot rule must process it",
    "start": "745160",
    "end": "748800"
  },
  {
    "text": "first",
    "start": "748800",
    "end": "750240"
  },
  {
    "text": "to give the permission to our Laura one",
    "start": "750240",
    "end": "752560"
  },
  {
    "text": "destination to send data to awot rules",
    "start": "752560",
    "end": "755639"
  },
  {
    "text": "we need to create an IM rooll so again",
    "start": "755639",
    "end": "759279"
  },
  {
    "text": "go to the IM am rolles page on the IM am",
    "start": "759279",
    "end": "762079"
  },
  {
    "text": "console choose create role on the create",
    "start": "762079",
    "end": "766120"
  },
  {
    "text": "roll page choose another AWS account in",
    "start": "766120",
    "end": "770199"
  },
  {
    "text": "account ID enter your AWS account ID and",
    "start": "770199",
    "end": "773880"
  },
  {
    "text": "then choose next permissions choose",
    "start": "773880",
    "end": "776800"
  },
  {
    "text": "create policy and choose gon tab in this",
    "start": "776800",
    "end": "780560"
  },
  {
    "text": "policy we allow the iot actions describe",
    "start": "780560",
    "end": "783720"
  },
  {
    "text": "endpoint and publish you can find the",
    "start": "783720",
    "end": "786440"
  },
  {
    "text": "content of the policy in the AWS iot",
    "start": "786440",
    "end": "789279"
  },
  {
    "text": "developer",
    "start": "789279",
    "end": "790440"
  },
  {
    "text": "documentation then choose review policy",
    "start": "790440",
    "end": "793120"
  },
  {
    "text": "choose a name for the policy and choose",
    "start": "793120",
    "end": "795560"
  },
  {
    "text": "create policy now we go back to the IM",
    "start": "795560",
    "end": "798000"
  },
  {
    "text": "am roles page we refresh the list of",
    "start": "798000",
    "end": "800480"
  },
  {
    "text": "policies and in the search box we enter",
    "start": "800480",
    "end": "803560"
  },
  {
    "text": "the name of the IM policy that we just",
    "start": "803560",
    "end": "806360"
  },
  {
    "text": "created we choose next tags and then",
    "start": "806360",
    "end": "810079"
  },
  {
    "text": "next review in rle name we enter a name",
    "start": "810079",
    "end": "813920"
  },
  {
    "text": "and then we choose create role in the",
    "start": "813920",
    "end": "817160"
  },
  {
    "text": "confirmation message we choose the name",
    "start": "817160",
    "end": "819560"
  },
  {
    "text": "of the role we just created in summary",
    "start": "819560",
    "end": "822639"
  },
  {
    "text": "we choose the trust relationships Tab",
    "start": "822639",
    "end": "825360"
  },
  {
    "text": "and then we choose edit trust",
    "start": "825360",
    "end": "827880"
  },
  {
    "text": "relationship like we did previously we",
    "start": "827880",
    "end": "830279"
  },
  {
    "text": "change the principal property to be the",
    "start": "830279",
    "end": "832440"
  },
  {
    "text": "service iot wireless. Amazon aws.com and",
    "start": "832440",
    "end": "836880"
  },
  {
    "text": "we choose update trust policy",
    "start": "836880",
    "end": "840759"
  },
  {
    "text": "we return to the luran destination page",
    "start": "840759",
    "end": "843360"
  },
  {
    "text": "and choose add destination in",
    "start": "843360",
    "end": "845800"
  },
  {
    "text": "permissions we select the IM am Ro we",
    "start": "845800",
    "end": "849079"
  },
  {
    "text": "created which choose a name for the",
    "start": "849079",
    "end": "851720"
  },
  {
    "text": "destination then in rule name we enter",
    "start": "851720",
    "end": "854519"
  },
  {
    "text": "the name of the AWS iot rule that will",
    "start": "854519",
    "end": "857480"
  },
  {
    "text": "process the messages sent to this",
    "start": "857480",
    "end": "860240"
  },
  {
    "text": "destination this rule is not created yet",
    "start": "860240",
    "end": "863120"
  },
  {
    "text": "so let's create it choose create rule in",
    "start": "863120",
    "end": "867199"
  },
  {
    "text": "the name field enter the same name you",
    "start": "867199",
    "end": "869519"
  },
  {
    "text": "entered in the field rule name then",
    "start": "869519",
    "end": "872680"
  },
  {
    "text": "choose add",
    "start": "872680",
    "end": "874360"
  },
  {
    "text": "action select the action republish a",
    "start": "874360",
    "end": "878199"
  },
  {
    "text": "message to an AWS iot topic and then",
    "start": "878199",
    "end": "881320"
  },
  {
    "text": "choose configure action in the topic",
    "start": "881320",
    "end": "884639"
  },
  {
    "text": "field we enter Laura one then we choose",
    "start": "884639",
    "end": "888720"
  },
  {
    "text": "create a role we give to the role a name",
    "start": "888720",
    "end": "892000"
  },
  {
    "text": "and choose create rle then we choose add",
    "start": "892000",
    "end": "895639"
  },
  {
    "text": "action to add this action to the rule",
    "start": "895639",
    "end": "898639"
  },
  {
    "text": "finally we choose create a rule the rule",
    "start": "898639",
    "end": "901920"
  },
  {
    "text": "is created we return to the lauran",
    "start": "901920",
    "end": "904120"
  },
  {
    "text": "destination page and choose add",
    "start": "904120",
    "end": "907880"
  },
  {
    "text": "destination the next step is to create a",
    "start": "907880",
    "end": "910600"
  },
  {
    "text": "profile for our device in the navigation",
    "start": "910600",
    "end": "913320"
  },
  {
    "text": "pen under Wireless connectivity we",
    "start": "913320",
    "end": "915800"
  },
  {
    "text": "choose profiles then add device profile",
    "start": "915800",
    "end": "919680"
  },
  {
    "text": "the name of our profile is otaa for over",
    "start": "919680",
    "end": "923199"
  },
  {
    "text": "the activation we choose the European",
    "start": "923199",
    "end": "925959"
  },
  {
    "text": "frequency band the Mac version for the",
    "start": "925959",
    "end": "928680"
  },
  {
    "text": "device I want to add is",
    "start": "928680",
    "end": "931160"
  },
  {
    "text": "1.0.3 and I choose the corresponding",
    "start": "931160",
    "end": "933319"
  },
  {
    "text": "Regional parameters version then the max",
    "start": "933319",
    "end": "936920"
  },
  {
    "text": "Erp my device only support Class A and",
    "start": "936920",
    "end": "940880"
  },
  {
    "text": "finally we choose add device profile we",
    "start": "940880",
    "end": "943560"
  },
  {
    "text": "will also add a service profile we enter",
    "start": "943560",
    "end": "946720"
  },
  {
    "text": "a name and we choose add service",
    "start": "946720",
    "end": "949720"
  },
  {
    "text": "profile now that we have the luran",
    "start": "949720",
    "end": "952199"
  },
  {
    "text": "destination the profile and service",
    "start": "952199",
    "end": "954560"
  },
  {
    "text": "profile for our lauran device let's add",
    "start": "954560",
    "end": "957519"
  },
  {
    "text": "it",
    "start": "957519",
    "end": "959120"
  },
  {
    "text": "in the navigation pen under Wireless",
    "start": "959120",
    "end": "961680"
  },
  {
    "text": "connectivity we choose devices then add",
    "start": "961680",
    "end": "965279"
  },
  {
    "text": "wireless device we select the device",
    "start": "965279",
    "end": "968319"
  },
  {
    "text": "specification in our case it's otaa 1.x",
    "start": "968319",
    "end": "973360"
  },
  {
    "text": "we enter the dev eui the app key and the",
    "start": "973360",
    "end": "976959"
  },
  {
    "text": "app eui of the",
    "start": "976959",
    "end": "978959"
  },
  {
    "text": "device as an option we can add a name",
    "start": "978959",
    "end": "981639"
  },
  {
    "text": "and a description and Associate thing in",
    "start": "981639",
    "end": "984120"
  },
  {
    "text": "the iot core",
    "start": "984120",
    "end": "986279"
  },
  {
    "text": "registry then we select the wireless",
    "start": "986279",
    "end": "989240"
  },
  {
    "text": "device and service profiles we created",
    "start": "989240",
    "end": "992199"
  },
  {
    "text": "and choose next we select the lowo and",
    "start": "992199",
    "end": "995360"
  },
  {
    "text": "destination we created and choose add",
    "start": "995360",
    "end": "998519"
  },
  {
    "text": "device let's test our device and see if",
    "start": "998519",
    "end": "1001480"
  },
  {
    "text": "we receive data I subscribe to the topic",
    "start": "1001480",
    "end": "1004639"
  },
  {
    "text": "named Laura one in which my AWS iot rule",
    "start": "1004639",
    "end": "1008160"
  },
  {
    "text": "has to republish all the data received",
    "start": "1008160",
    "end": "1010319"
  },
  {
    "text": "from my device you can see the incoming",
    "start": "1010319",
    "end": "1013319"
  },
  {
    "text": "messages with lauran metadata you can",
    "start": "1013319",
    "end": "1016279"
  },
  {
    "text": "also check in the details of your lauran",
    "start": "1016279",
    "end": "1018560"
  },
  {
    "text": "device",
    "start": "1018560",
    "end": "1019399"
  },
  {
    "text": "when the last Uplink message has been",
    "start": "1019399",
    "end": "1022399"
  },
  {
    "text": "received well our partners make it even",
    "start": "1022399",
    "end": "1025600"
  },
  {
    "text": "more easier for you to get started by",
    "start": "1025600",
    "end": "1028120"
  },
  {
    "text": "providing AWS ioer for lauran qualified",
    "start": "1028120",
    "end": "1031360"
  },
  {
    "text": "gateways that connect to AWS ier out of",
    "start": "1031360",
    "end": "1034438"
  },
  {
    "text": "the box without any need to modify idit",
    "start": "1034439",
    "end": "1037360"
  },
  {
    "text": "software you can search in the AWS",
    "start": "1037360",
    "end": "1039918"
  },
  {
    "text": "partner device catalog to find gateways",
    "start": "1039919",
    "end": "1043000"
  },
  {
    "text": "that are qualified for use withs iot cor",
    "start": "1043000",
    "end": "1045918"
  },
  {
    "text": "for Laura",
    "start": "1045919",
    "end": "1047038"
  },
  {
    "text": "1 thank you for your ention and I hope",
    "start": "1047039",
    "end": "1050039"
  },
  {
    "text": "you find this useful",
    "start": "1050039",
    "end": "1053840"
  }
]