[
  {
    "start": "0",
    "end": "9000"
  },
  {
    "text": "hi my name is unog I'll be talking about Aurora today I manage a a handful of our",
    "start": "240",
    "end": "5879"
  },
  {
    "text": "datab processing Services here at Amazon so our basic agenda here is to cover a",
    "start": "5879",
    "end": "14320"
  },
  {
    "start": "9000",
    "end": "35000"
  },
  {
    "text": "the an overview of our performance and availability features and then get into",
    "start": "14320",
    "end": "19400"
  },
  {
    "text": "our new enhancements over November through roughly q1 um that we can look",
    "start": "19400",
    "end": "25480"
  },
  {
    "text": "forward to um I'll warn you guys that this will be a want deep talk and",
    "start": "25480",
    "end": "31000"
  },
  {
    "text": "there's actually a lot of material so I'll be going fast I hope that's okay so",
    "start": "31000",
    "end": "36360"
  },
  {
    "start": "35000",
    "end": "60000"
  },
  {
    "text": "uh let's just start with the basics what's aurora so it's an open source compatible relational database we just announced postgressql uh compatibility",
    "start": "36360",
    "end": "44320"
  },
  {
    "text": "today uh we previously are uh continue to be MySQL compatible and it our goal",
    "start": "44320",
    "end": "51520"
  },
  {
    "text": "is to provide the performance and availability of a commercial database uh you you know combined with the",
    "start": "51520",
    "end": "56960"
  },
  {
    "text": "Simplicity and cost Effectiveness as open of Open Source Let's uh jump to the basics of",
    "start": "56960",
    "end": "63680"
  },
  {
    "text": "performance and so we try really hard to scale with",
    "start": "63680",
    "end": "70880"
  },
  {
    "start": "67000",
    "end": "97000"
  },
  {
    "text": "instance size and so you know you've heard us talk in the past about how we're 5x faster on large instances and",
    "start": "70880",
    "end": "77360"
  },
  {
    "text": "you can compare you know on small instances you know MySQL is a great database and but it doesn't really scale",
    "start": "77360",
    "end": "84880"
  },
  {
    "text": "due to various uh sorts of contention as the on either reads or writes and that's",
    "start": "84880",
    "end": "90400"
  },
  {
    "text": "been true for 56 and for 57 in our experience and you know that's just not me you know benchmarks don't really mean",
    "start": "90400",
    "end": "97360"
  },
  {
    "start": "97000",
    "end": "122000"
  },
  {
    "text": "anything uh here's a real life data workload from a gaming customer who switched over from a from my SQL on RDS",
    "start": "97360",
    "end": "107880"
  },
  {
    "text": "to over to U Aurora and on a 4XL it's about 3x faster in their experience and",
    "start": "107880",
    "end": "114320"
  },
  {
    "text": "you can just see that time frame where that cut over happened from 15 milliseconds on average to about about",
    "start": "114320",
    "end": "121360"
  },
  {
    "text": "five so let's talk about how we achieve this and uh I mean it's really pretty",
    "start": "121360",
    "end": "128080"
  },
  {
    "start": "122000",
    "end": "153000"
  },
  {
    "text": "simple we do less work on a per uh operation basis and our view is is that",
    "start": "128080",
    "end": "134080"
  },
  {
    "text": "databases are primarily about IO uh once you go to network attached storage",
    "start": "134080",
    "end": "139760"
  },
  {
    "text": "that's all about packets per second and if you're doing High throughput processing on the head node uh that's",
    "start": "139760",
    "end": "146160"
  },
  {
    "text": "all about the context witches you do and the accesses you do to uh the Linux",
    "start": "146160",
    "end": "152680"
  },
  {
    "text": "kernel so let's drill in a little bit on iO and this this initial part is a bit",
    "start": "152680",
    "end": "158519"
  },
  {
    "start": "153000",
    "end": "233000"
  },
  {
    "text": "of a repeat of a talk I did last year so if you look at U my SQL with a",
    "start": "158519",
    "end": "163720"
  },
  {
    "text": "replica um you running multi-az in in RDS so you're going to do a write of",
    "start": "163720",
    "end": "170519"
  },
  {
    "text": "logs bin logs uh the data blocks you have a double write buffer to avoid torn rights you have frm files which store",
    "start": "170519",
    "end": "177640"
  },
  {
    "text": "the metadata and those all when they modify go out to a primary copy in EBS",
    "start": "177640",
    "end": "182680"
  },
  {
    "text": "which mirrors and then you go and duplicate that over to across to multi-az write that again to uh EBS",
    "start": "182680",
    "end": "190159"
  },
  {
    "text": "volume which mirrors and come back up so the interesting point here is that steps",
    "start": "190159",
    "end": "196599"
  },
  {
    "text": "1 3 and four are sequential and they're synchronous and that the fact that",
    "start": "196599",
    "end": "202720"
  },
  {
    "text": "they're sequential and synchronous amplifies excuse me amplifies both latency and Jitter and there lots of",
    "start": "202720",
    "end": "210239"
  },
  {
    "text": "different types of Rights for each user operation and looking at a 30 minute",
    "start": "210239",
    "end": "215840"
  },
  {
    "text": "suspens righton workload we are able to see that it's doing about 3/4 of a",
    "start": "215840",
    "end": "223239"
  },
  {
    "text": "million transactions and with an average of 7.4 iOS per",
    "start": "223239",
    "end": "230840"
  },
  {
    "text": "transaction so let's compare that to Aurora so on Aurora we're writing to six",
    "start": "232720",
    "end": "238560"
  },
  {
    "start": "233000",
    "end": "305000"
  },
  {
    "text": "copies of data two in each of Three A's the only thing we write are redo",
    "start": "238560",
    "end": "244480"
  },
  {
    "text": "records and all of the steps in the right are asynchronous so we don't write data blocks we don't write checkpoints",
    "start": "244480",
    "end": "250560"
  },
  {
    "text": "we don't do cache Replacements since we're writing six copies that's six times more log records",
    "start": "250560",
    "end": "257479"
  },
  {
    "text": "right but since it log records are much smaller than data pages and all the rest",
    "start": "257479",
    "end": "262520"
  },
  {
    "text": "of the stuff we talked about it's nine times less Network traffic even after the",
    "start": "262520",
    "end": "267800"
  },
  {
    "text": "amplification and since we're writing asynchronously and in parallel to all of them and we only require a quorum of",
    "start": "267800",
    "end": "274400"
  },
  {
    "text": "four out of six to come back in order to consider something durable we're much more tolerant of network and storage",
    "start": "274400",
    "end": "279960"
  },
  {
    "text": "outlier latency and that's really important when you're running multi-tenant storage and so in this case",
    "start": "279960",
    "end": "285639"
  },
  {
    "text": "you can see that we're on that same workload we're doing 35 times more work",
    "start": "285639",
    "end": "290720"
  },
  {
    "text": "in the same unit time and that's primarily because we're doing 7.7 times",
    "start": "290720",
    "end": "297080"
  },
  {
    "text": "less iOS that's despite the 6X amplification so where did those all all",
    "start": "297080",
    "end": "303880"
  },
  {
    "text": "that work go so into the storage note so here's the a picture of what's happening",
    "start": "303880",
    "end": "310000"
  },
  {
    "text": "at the underneath the covers in the storage node so basically you ship a log record it comes into a queue we write it",
    "start": "310000",
    "end": "316840"
  },
  {
    "text": "we act it back okay so that's the portion of the step that is going to be in the foreground latency path and the",
    "start": "316840",
    "end": "323280"
  },
  {
    "text": "all of these steps are going to be asynchronous so past that we need to go",
    "start": "323280",
    "end": "328400"
  },
  {
    "text": "and sort and group these things because it came in asynchronously over the network then it joins a sort of",
    "start": "328400",
    "end": "334360"
  },
  {
    "text": "synchronous uh clean hot log now we might have gaps in there so we gossip with the other storage nodes and uh do",
    "start": "334360",
    "end": "341840"
  },
  {
    "text": "uh peers to fill in any of the holes that may exist every so often we need to",
    "start": "341840",
    "end": "347280"
  },
  {
    "text": "coales a you know a redo record into a data page we back all of those up into S3",
    "start": "347280",
    "end": "355319"
  },
  {
    "text": "both the redo records as well as the data pages on a continual basis and then you know as since we're writing",
    "start": "355319",
    "end": "361479"
  },
  {
    "text": "out of place we eventually have to garbage collect old versions We eventually have to we also just scrub",
    "start": "361479",
    "end": "368520"
  },
  {
    "text": "the blocks on a continual basis for U cyclic redundancy checks and just to",
    "start": "368520",
    "end": "373560"
  },
  {
    "text": "make sure because you know every disc is going to have a potential of dis rot right um so all the you know the key",
    "start": "373560",
    "end": "379479"
  },
  {
    "text": "points here is the steps are asynchronous and on the input Q basis we're doing 46 times less work than uh",
    "start": "379479",
    "end": "389000"
  },
  {
    "text": "my C in terms of how many rights we're we're seeing here this is unamplified and this is per node so that it is",
    "start": "389000",
    "end": "395800"
  },
  {
    "text": "basically the divisor of the 6X that we had in the prior step and we favor latency sensitive operations so we you",
    "start": "395800",
    "end": "401759"
  },
  {
    "text": "know somebody comes in and they get out and then all the rest of it we're using the dis space that's available to buffer",
    "start": "401759",
    "end": "407880"
  },
  {
    "text": "against spikes so you know if there's a lot of work going on well maybe I'll",
    "start": "407880",
    "end": "413080"
  },
  {
    "text": "take a little bit more time to do scrubbing or coalescing or what have you and just sit with larger amount of usage",
    "start": "413080",
    "end": "418919"
  },
  {
    "text": "in The Intern let's look at how that then expands to",
    "start": "418919",
    "end": "425000"
  },
  {
    "start": "421000",
    "end": "497000"
  },
  {
    "text": "replication so if you're familiar with my SQL bin log replication if you've got uh 70% rights on the master note you've",
    "start": "425000",
    "end": "432440"
  },
  {
    "text": "got 70% rights minimum on your replicates it ends up often being more",
    "start": "432440",
    "end": "437560"
  },
  {
    "text": "than that because it's a single-threaded bin log apply and a bin log is basically pushing logical SQL statements across",
    "start": "437560",
    "end": "444360"
  },
  {
    "text": "the the channel and uh the storage is separated and what that can resolve in",
    "start": "444360",
    "end": "450199"
  },
  {
    "text": "is latency drift right because it's hard for the replica to keep up with the",
    "start": "450199",
    "end": "455599"
  },
  {
    "text": "activity against multi-threaded work going on in the master Noe particularly at scale so what we do is is that the",
    "start": "455599",
    "end": "462879"
  },
  {
    "text": "our rep you know we also support bin log replication of course um but in our case we attach to the same multi-az storage",
    "start": "462879",
    "end": "471080"
  },
  {
    "text": "the six copies across Three A's and all we send over the channel is the same",
    "start": "471080",
    "end": "476919"
  },
  {
    "text": "redo records and so what happens is that if I don't have something in my buffer",
    "start": "476919",
    "end": "482560"
  },
  {
    "text": "cache I can just throw that record away if I do have something in my buffer cach then I update it and then every so often",
    "start": "482560",
    "end": "489199"
  },
  {
    "text": "we advance you know once we've seen all of the redo records we advance you know the point of",
    "start": "489199",
    "end": "495479"
  },
  {
    "text": "consistency why do we care we care because the replica lag gets a lot",
    "start": "495479",
    "end": "500599"
  },
  {
    "start": "497000",
    "end": "529000"
  },
  {
    "text": "shorter so this is go Guardian who said that you know when they were running their systems on my SQL they saw replica",
    "start": "500599",
    "end": "506840"
  },
  {
    "text": "lag go up to 12 minutes no that's 12 minutes is a long time it's hard for an application to deal with something",
    "start": "506840",
    "end": "513120"
  },
  {
    "text": "that's going between milliseconds and 12 minutes right that's multiple orders of magnitude uh the maximum replica lag",
    "start": "513120",
    "end": "519479"
  },
  {
    "text": "that they saw across four replicas never exceeded 20 on on this particular snapshot you can see it averaged about",
    "start": "519479",
    "end": "527560"
  },
  {
    "start": "529000",
    "end": "643000"
  },
  {
    "text": "15 we also uh have a different model around committing data and uh the key",
    "start": "529200",
    "end": "535600"
  },
  {
    "text": "thing here is is that in my SQL it's writing blocks to to disk right it's doing an uh an IO to the um operation",
    "start": "535600",
    "end": "544800"
  },
  {
    "text": "into the Linux kernel and so it's using the traditional way of doing rights because you have to you know commits you",
    "start": "544800",
    "end": "551480"
  },
  {
    "text": "have to support acid you have to make sure no one can see something you have to make sure that by the time you ever",
    "start": "551480",
    "end": "556839"
  },
  {
    "text": "show somebody a data it's made been made durable on disk right and so what you",
    "start": "556839",
    "end": "561959"
  },
  {
    "text": "basically do is is that you buffer something out to disk and then you uh have to wait for it to come back before",
    "start": "561959",
    "end": "568120"
  },
  {
    "text": "you can write and what that means is is that since you have to do that you have to end up group if you're running at uh",
    "start": "568120",
    "end": "575240"
  },
  {
    "text": "High load you have to group these rights together so you do a group commit so to speak and so when things aren't going",
    "start": "575240",
    "end": "582720"
  },
  {
    "text": "going so fast the rights go you end up with a right penalty right because you can't fill the thing and you have to",
    "start": "582720",
    "end": "589279"
  },
  {
    "text": "sort of you're waiting to find out if you can finish that right because you don't know if anybody else is going to",
    "start": "589279",
    "end": "594440"
  },
  {
    "text": "come in or not so that's a basic problem with group commits and really every",
    "start": "594440",
    "end": "599760"
  },
  {
    "text": "database I'm aware of um other than Aurora where we're not doing dis iio",
    "start": "599760",
    "end": "605360"
  },
  {
    "text": "we're doing Network iio and so since we're doing a network operation we request the network operation with the",
    "start": "605360",
    "end": "611320"
  },
  {
    "text": "first right and we keep filling that buffer until it's uh you know ready to",
    "start": "611320",
    "end": "616480"
  },
  {
    "text": "go so whenever the network operation takes off then we basically lock it down and send it so there isn't that latency",
    "start": "616480",
    "end": "622839"
  },
  {
    "text": "penalty to try to fill that buffer and we consider the right durable when four",
    "start": "622839",
    "end": "628000"
  },
  {
    "text": "of the six nodes that wrote to acknowledge it and we consider the database durable to that point in time",
    "start": "628000",
    "end": "634160"
  },
  {
    "text": "where we filled in all of the commits or rights up to a particular uh log sequence number right so it's all",
    "start": "634160",
    "end": "641160"
  },
  {
    "text": "happening asynchronously adaptive thread pooling so if you're familiar with mySQL there's",
    "start": "641160",
    "end": "647000"
  },
  {
    "start": "643000",
    "end": "697000"
  },
  {
    "text": "a thread per Connection in standard MySQL in MySQL e you can Define thread",
    "start": "647000",
    "end": "652279"
  },
  {
    "text": "groups and say like these connections go to this thread group and you if you tune it very carefully you can um figure out",
    "start": "652279",
    "end": "659959"
  },
  {
    "text": "what the stall threshold is before it goes to another thread group it's it's pretty complicated um and in the",
    "start": "659959",
    "end": "667000"
  },
  {
    "text": "standard MySQL you you basically can't run lots of Connections in our case we're running EO we have a task CU",
    "start": "667000",
    "end": "673519"
  },
  {
    "text": "behind the scenes we have a bunch of worker threads behind that and um we can",
    "start": "673519",
    "end": "678760"
  },
  {
    "text": "dynamically size that thread pool and you know we can easily handle 5,000 concurrent client connections on a",
    "start": "678760",
    "end": "684680"
  },
  {
    "text": "single R38 Exel which matters because that reduces your need to do you know",
    "start": "684680",
    "end": "690519"
  },
  {
    "text": "other systems or Shard or have uh mcash sitting in front etc etc etc",
    "start": "690519",
    "end": "696839"
  },
  {
    "text": "right okay so that all I've covered in the past here's a new slide that uh talks about something else that's pretty",
    "start": "696839",
    "end": "703200"
  },
  {
    "start": "697000",
    "end": "744000"
  },
  {
    "text": "important so once I'm pushing 5,000 concurrent connections into the system you're going to create a lot of backlog",
    "start": "703200",
    "end": "709519"
  },
  {
    "text": "in you know into the rest of the system so let's talk about lock management so my SQL has a single lock uh that",
    "start": "709519",
    "end": "716079"
  },
  {
    "text": "protects entry into the lock table and so so one person can come in and go out at a time in our case we allow",
    "start": "716079",
    "end": "724160"
  },
  {
    "text": "concurrent access to any given lockchain and we basically generate a hashmap",
    "start": "724160",
    "end": "729279"
  },
  {
    "text": "across a multitude of hash blockchains so people who are scanning you can support multiple of them somebody who's",
    "start": "729279",
    "end": "735720"
  },
  {
    "text": "updating a particular lockchain you can support one but a lot more progress can happen and then you just basically need",
    "start": "735720",
    "end": "741560"
  },
  {
    "text": "to do that if you want to do high throughput okay so that's all stuff that's been around really since launch",
    "start": "741560",
    "end": "748519"
  },
  {
    "start": "744000",
    "end": "758000"
  },
  {
    "text": "uh so around 18 months let's talk about what's new so this is going to be November December and in I'll tell you",
    "start": "748519",
    "end": "755320"
  },
  {
    "text": "when something is in q1 so we've improved cach read performance so these are other things",
    "start": "755320",
    "end": "762639"
  },
  {
    "start": "758000",
    "end": "946000"
  },
  {
    "text": "where you know locks exist and you know we started to get hotspots of the metadata catalog we've impr produced uh",
    "start": "762639",
    "end": "768880"
  },
  {
    "text": "data D dictionary synchronization and cach eviction um we've added a numa",
    "start": "768880",
    "end": "774160"
  },
  {
    "text": "aware scheduler that really only matters once you're running multiple sockets but it matters a lot once are running",
    "start": "774160",
    "end": "779800"
  },
  {
    "text": "multiple sockets and we now use a read view algorithm that is concurrent and",
    "start": "779800",
    "end": "785240"
  },
  {
    "text": "latch free and what the read view is is it basically determines for a given SQL statement what you're allowed to see um",
    "start": "785240",
    "end": "793079"
  },
  {
    "text": "that was worth about a 25% uh throughput gain on a um again these are our our 38",
    "start": "793079",
    "end": "799839"
  },
  {
    "text": "Excel numbers um but it is cached performance right",
    "start": "799839",
    "end": "805000"
  },
  {
    "text": "let's compare that to uncashed so there once it's cash you're dealing a lot with iOS right and so",
    "start": "805000",
    "end": "811839"
  },
  {
    "text": "we've done added a smart Schuler to basically figure out whether a workload is CPU heavy or IO heavy because we have",
    "start": "811839",
    "end": "819320"
  },
  {
    "text": "a lot of threads that sort of face the front door to deal with requests coming",
    "start": "819320",
    "end": "824360"
  },
  {
    "text": "in and a lot of requests that face the back door to talk with the storage system and so depending on how much",
    "start": "824360",
    "end": "830040"
  },
  {
    "text": "workload is coming in we might want to reallocate threads towards one or the other we've also added uh a selector to",
    "start": "830040",
    "end": "838079"
  },
  {
    "text": "figure out which read node which uh storage node we should go to amongst those six copies um and remember this is",
    "start": "838079",
    "end": "845240"
  },
  {
    "text": "on a 10 gab segment of the your overall database so you know your own your overall database may be spread across",
    "start": "845240",
    "end": "852279"
  },
  {
    "text": "hundreds of uh storage nodes but any given block is going to exist on six and across those you know it's multi-tenant",
    "start": "852279",
    "end": "859920"
  },
  {
    "text": "other people may be active on that you know there obviously some are local inside your current AZ some are remote",
    "start": "859920",
    "end": "866360"
  },
  {
    "text": "and so we're just basically figuring out through sampling which one should I go to to get",
    "start": "866360",
    "end": "872120"
  },
  {
    "text": "get the best performance logical read ahead that's an interesting feature so when you're doing",
    "start": "872120",
    "end": "879519"
  },
  {
    "text": "database when you're doing ios's U my SQL basically takes advantage of the Linux kernel read ahead so if you're",
    "start": "879519",
    "end": "886279"
  },
  {
    "text": "reading in sequence you know block 100 1001 1002 it's going to prefetch 103 104",
    "start": "886279",
    "end": "893120"
  },
  {
    "text": "105 right makes sense um but this is a b tree so there's not very much",
    "start": "893120",
    "end": "899320"
  },
  {
    "text": "there's not reason to believe that uh just because things are sequential in",
    "start": "899320",
    "end": "904519"
  },
  {
    "text": "key order that they're going to be sequential in physical block address order right it'll work great for a",
    "start": "904519",
    "end": "909600"
  },
  {
    "text": "benchmark but over time it'll degrade right because you know you do splits and all the rest of it so logical read ahead",
    "start": "909600",
    "end": "915519"
  },
  {
    "text": "is basically us saying well if we can detect that uh the same operations is",
    "start": "915519",
    "end": "920920"
  },
  {
    "text": "happening just as Linux does we're going to prefetch those blocks in but it doesn't have to be in address you know",
    "start": "920920",
    "end": "927120"
  },
  {
    "text": "block address order it could be arbit right it's going to be in the order that it appears in the B tree and you know",
    "start": "927120",
    "end": "933440"
  },
  {
    "text": "that's worth about been worth about 10% throughput gain for us and um that's a",
    "start": "933440",
    "end": "939680"
  },
  {
    "text": "pretty big deal on the iio Centric uh",
    "start": "939680",
    "end": "944440"
  },
  {
    "text": "environment hotro contention so I talked about how the we've removed the lock on",
    "start": "946120",
    "end": "951800"
  },
  {
    "text": "the lock manager and that works great right up to the point when you have a really contended individual lock or",
    "start": "951800",
    "end": "958839"
  },
  {
    "text": "individual row because what happens there is that you get end up with one super long blockchain right and that",
    "start": "958839",
    "end": "967279"
  },
  {
    "text": "that was actually an area where uh for about a year we were slower than my SQL you know shame on me and so what we've",
    "start": "967279",
    "end": "974160"
  },
  {
    "text": "uh done is that in one n which is November we just released it I think a week or two ago we compressed those",
    "start": "974160",
    "end": "981360"
  },
  {
    "text": "locks so that rather than keeping an entry per uh thread per block we",
    "start": "981360",
    "end": "987240"
  },
  {
    "text": "actually just flip it around and keep a bit map for for the lock and say like of all the threads which ones are waiting",
    "start": "987240",
    "end": "993120"
  },
  {
    "text": "for this okay make sense and then now in 1 nine we're also replacing spin locks",
    "start": "993120",
    "end": "999120"
  },
  {
    "text": "with a blocking futex which for really heavy uh right workload ends up in like",
    "start": "999120",
    "end": "1004639"
  },
  {
    "text": "in a 12x reduction in CPU and a 3X Improvement in throughput in the next",
    "start": "1004639",
    "end": "1011279"
  },
  {
    "text": "release in December we'll be uh using adding a new technique to uh use dynamic",
    "start": "1011279",
    "end": "1016480"
  },
  {
    "text": "programming to release blocks and figure out who to give it to which basically takes it from order n squar to order n",
    "start": "1016480",
    "end": "1023839"
  },
  {
    "text": "and on perona tpcc like Benchmark uh we improved 29",
    "start": "1023839",
    "end": "1030798"
  },
  {
    "text": "times from U one uh 1.4k transactions per minute to",
    "start": "1030799",
    "end": "1037438"
  },
  {
    "text": "42k so are you going to see uh you know 35 time or 29 times Improvement well of",
    "start": "1037439",
    "end": "1042918"
  },
  {
    "text": "course not right uh so here's some things that represent uh the difference across a variety of different",
    "start": "1042919",
    "end": "1049440"
  },
  {
    "start": "1043000",
    "end": "1084000"
  },
  {
    "text": "improvements and now I'm not comparing old Aurora to new Aurora I'm comparing Aurora to my SQL so at 500 connections",
    "start": "1049440",
    "end": "1057960"
  },
  {
    "text": "on a 10 gbyte database you see about a 3X improvement with 5,000 so a lot more",
    "start": "1057960",
    "end": "1063520"
  },
  {
    "text": "contention going on you see a 16x Improvement now if you grow a little bit larger we get uh that's going to",
    "start": "1063520",
    "end": "1070559"
  },
  {
    "text": "intrinsically create less contention and so you know the improvements uh start to change a little bit so it'll be all over",
    "start": "1070559",
    "end": "1076360"
  },
  {
    "text": "the map your workloads will be different but it was an important Improvement for",
    "start": "1076360",
    "end": "1082480"
  },
  {
    "start": "1084000",
    "end": "1124000"
  },
  {
    "text": "us I'm just going to keep throwing stuff at you uh batch insert performance uh so",
    "start": "1084240",
    "end": "1090159"
  },
  {
    "text": "in batch inserts the way my sequel works is that you uh insert through the top of",
    "start": "1090159",
    "end": "1095320"
  },
  {
    "text": "the B tree and you know it walks the cursor position and you end up having to",
    "start": "1095320",
    "end": "1101720"
  },
  {
    "text": "um get latches again and again and again and again and um what we do now is that",
    "start": "1101720",
    "end": "1108960"
  },
  {
    "text": "if we can figure out that you're accessing the same block you did before or the block just to the left of it or",
    "start": "1108960",
    "end": "1114919"
  },
  {
    "text": "just to the right of it we're not going to Traverse the B tree down we're going to remember your prior position and go",
    "start": "1114919",
    "end": "1120039"
  },
  {
    "text": "left or right faster index builds so we talked",
    "start": "1120039",
    "end": "1128000"
  },
  {
    "start": "1124000",
    "end": "1170000"
  },
  {
    "text": "about how uh my SQL leverages Linux read ahead and you know this requires",
    "start": "1128000",
    "end": "1133240"
  },
  {
    "text": "consecutive block addresses and it also inserts the entries top down which creates splits and in my opinion",
    "start": "1133240",
    "end": "1140640"
  },
  {
    "text": "excessive logging uh so we talked about how our scan uh prefetches blocks based",
    "start": "1140640",
    "end": "1146159"
  },
  {
    "text": "on the position in the tree but also we build bottom up we construct all of the",
    "start": "1146159",
    "end": "1151880"
  },
  {
    "text": "leaf blocks and then we build the Black branch blocks and so what that means is there aren't any B Tre splits you touch",
    "start": "1151880",
    "end": "1158200"
  },
  {
    "text": "each page only once and there's only one log record and you can see that that's",
    "start": "1158200",
    "end": "1163880"
  },
  {
    "text": "yielding about a 2 to 4X Improvement for index builds",
    "start": "1163880",
    "end": "1170240"
  },
  {
    "start": "1170000",
    "end": "1204000"
  },
  {
    "text": "so people have been one of the features people have been asking for most out of uh from us Beyond uh you know postresql",
    "start": "1171240",
    "end": "1177880"
  },
  {
    "text": "support which uh is we'll talk about that later is um spatial indexing right",
    "start": "1177880",
    "end": "1184320"
  },
  {
    "text": "so there are a lot of reasons you want spatial indexing you know you want to store and reason about spatial data find all the people who are near hospital um",
    "start": "1184320",
    "end": "1191480"
  },
  {
    "text": "it's multi-dimensional data so it's not as easy to use a b tree uh you want to support both points and polygons and you",
    "start": "1191480",
    "end": "1197880"
  },
  {
    "text": "know there here set of operations there so there really two possible approaches",
    "start": "1197880",
    "end": "1203159"
  },
  {
    "text": "that you can use here uh pretty much everyone in the industry uses",
    "start": "1203159",
    "end": "1209280"
  },
  {
    "start": "1204000",
    "end": "1306000"
  },
  {
    "text": "arteries and which are basically you create a bounding box AC around a set of points and uh you basically have to keep",
    "start": "1209280",
    "end": "1216640"
  },
  {
    "text": "it balanced the problem with arteries is that they're super hard to insert into because you can't really control where",
    "start": "1216640",
    "end": "1223600"
  },
  {
    "text": "the split happens and where you need to do uh changes and it's It generally",
    "start": "1223600",
    "end": "1229120"
  },
  {
    "text": "degenerates over time for that as well um so we use a space filling curve so",
    "start": "1229120",
    "end": "1235280"
  },
  {
    "text": "what a space filling curve is is that you basically Define the mathematical structure that uh guarantees that um",
    "start": "1235280",
    "end": "1242720"
  },
  {
    "text": "formulaically it can Poss it it'll address every possible point in the space and it's dimensionally ordered",
    "start": "1242720",
    "end": "1249240"
  },
  {
    "text": "which means that across your x-axis uh a value to the right is going to be you know a value uh that's larger",
    "start": "1249240",
    "end": "1256840"
  },
  {
    "text": "on X is going to appear later in the B tree than a value uh that's smaller and then similarly on the y- AIS and so a",
    "start": "1256840",
    "end": "1264039"
  },
  {
    "text": "zindex is one form of a space filling curve you know Hilbert curves piano curves there are lots of Curves um the",
    "start": "1264039",
    "end": "1271840"
  },
  {
    "text": "neat thing about using this technique is that you get to use a regular B tree",
    "start": "1271840",
    "end": "1276960"
  },
  {
    "text": "right because you what you've done is you've linearized the space and uh B trees are fast we've been working on",
    "start": "1276960",
    "end": "1283159"
  },
  {
    "text": "them for 40 years uh you know you get to use all of the technology that people already have and uh you know the",
    "start": "1283159",
    "end": "1290600"
  },
  {
    "text": "National geospatial Intelligence Agency which should know something about spatial indexing we released uh geowave",
    "start": "1290600",
    "end": "1296960"
  },
  {
    "text": "a while ago inside apach cumulo and it uses either hbert curves or Z indexing",
    "start": "1296960",
    "end": "1303200"
  },
  {
    "text": "as uh you know its technology so and turns out they know a thing or two about spatial because uh if you look",
    "start": "1303200",
    "end": "1310440"
  },
  {
    "start": "1306000",
    "end": "1326000"
  },
  {
    "text": "at the uh performance difference between my SQL 57 which supports spatial indexing and RZ indexing I mean that's",
    "start": "1310440",
    "end": "1318159"
  },
  {
    "text": "ERT the difference there right it's like two orders of magnitude",
    "start": "1318159",
    "end": "1325600"
  },
  {
    "text": "so skip past that so that's the basic availability things that are happening",
    "start": "1325600",
    "end": "1331640"
  },
  {
    "text": "in through the end of the year give or take um sorry the very performance",
    "start": "1331640",
    "end": "1337960"
  },
  {
    "text": "things availability I mean we can talk a lot about performance it doesn't matter at all if your database isn't",
    "start": "1337960",
    "end": "1344440"
  },
  {
    "start": "1344000",
    "end": "1443000"
  },
  {
    "text": "up so here again uh a little bit R tread over the things that are most important",
    "start": "1344440",
    "end": "1350600"
  },
  {
    "text": "about availability so availability starts with durability right if you aren't you're not durable you're",
    "start": "1350600",
    "end": "1356120"
  },
  {
    "text": "certainly not available and takes a long time to rebuild so here's the basics of",
    "start": "1356120",
    "end": "1361279"
  },
  {
    "text": "the underlying storage system inside Aurora so the storage volume automatically grows you're not going to",
    "start": "1361279",
    "end": "1367400"
  },
  {
    "text": "get an outage because you run out of space on some statically added thing that's good for both cost and for Space",
    "start": "1367400",
    "end": "1373320"
  },
  {
    "text": "Management because um you know you you start small and the system grows up underneath you to the need to this",
    "start": "1373320",
    "end": "1380080"
  },
  {
    "text": "amount you need we talked about how we use quum systems to U read and to write",
    "start": "1380080",
    "end": "1386200"
  },
  {
    "text": "and that uh tolerates latency outliers we talked about how you use a peer-to-peer gossip replication to make",
    "start": "1386200",
    "end": "1392440"
  },
  {
    "text": "sure that you can deal with outliers we continuously back up to S3 which as you know is designed for 11 9 of durability",
    "start": "1392440",
    "end": "1400039"
  },
  {
    "text": "and then we're also always monitoring the nodes and the discs to repair them",
    "start": "1400039",
    "end": "1405640"
  },
  {
    "text": "now repair uh one of the things we do to facilitate repair is that the chunks of",
    "start": "1405640",
    "end": "1413080"
  },
  {
    "text": "your volume are split into 10 GB segments and so you know you can do the math on a 10 gig E network how long it",
    "start": "1413080",
    "end": "1420080"
  },
  {
    "text": "takes to replicate a 10 uh gigabyte segment around and so I basically am",
    "start": "1420080",
    "end": "1425480"
  },
  {
    "text": "durable unless I lose three copies in that amount of time and you know that's a unlikely event right let's put it that",
    "start": "1425480",
    "end": "1431880"
  },
  {
    "text": "way um and then as we change quorums basically to say like I added a new node",
    "start": "1431880",
    "end": "1437520"
  },
  {
    "text": "for this because some other node went bad that doesn't stall rights either",
    "start": "1437520",
    "end": "1443480"
  },
  {
    "start": "1443000",
    "end": "1491000"
  },
  {
    "text": "so so I'll say about that one um we talked a little bit about replicas",
    "start": "1443480",
    "end": "1448559"
  },
  {
    "text": "before but here's the replicas from an availability perspective you can have a primary node in the neur cluster and up",
    "start": "1448559",
    "end": "1454799"
  },
  {
    "text": "to 15 replicas uh we automatically we're always monitoring uh the database nodes",
    "start": "1454799",
    "end": "1460760"
  },
  {
    "text": "will detect and uh replace them we are always monitoring your database processes we will um recycle them and",
    "start": "1460760",
    "end": "1468960"
  },
  {
    "text": "shut them down and re start them you can scale out your read traffic we recently announced a little while ago a reader",
    "start": "1468960",
    "end": "1475919"
  },
  {
    "text": "endpoint so you can go to a single endpoint and it'll load balance across your replicas and if you have replicas will",
    "start": "1475919",
    "end": "1483000"
  },
  {
    "text": "automatically promote them to be a uh right mastering node if uh you know your",
    "start": "1483000",
    "end": "1488159"
  },
  {
    "text": "right Master node goes down continuous backup so each storage",
    "start": "1488159",
    "end": "1494600"
  },
  {
    "start": "1491000",
    "end": "1535000"
  },
  {
    "text": "node is always writing to S3 all the changes it's and then as we get to from U the",
    "start": "1494600",
    "end": "1501440"
  },
  {
    "text": "perspective of saying like Okay everything is caught up we know we're at this point we register that this is the",
    "start": "1501440",
    "end": "1507080"
  },
  {
    "text": "new recovery point and it's consistent across this widely distributed storage system at uh restore time we basically",
    "start": "1507080",
    "end": "1514880"
  },
  {
    "text": "retrieve those things we all of those different segment snapshots and restore them back to our storage nodes and apply",
    "start": "1514880",
    "end": "1520720"
  },
  {
    "text": "the log streams now so that's all you know the main interesting thing here is",
    "start": "1520720",
    "end": "1526399"
  },
  {
    "text": "is that you don't have this like point in the day where things get slower because you're doing a backup backup's",
    "start": "1526399",
    "end": "1532520"
  },
  {
    "text": "always happening this is an interesting point and an important point so in the",
    "start": "1532520",
    "end": "1539000"
  },
  {
    "start": "1535000",
    "end": "1622000"
  },
  {
    "text": "traditional database really since the beginning of time the way um they work",
    "start": "1539000",
    "end": "1544840"
  },
  {
    "text": "is is that um you do these things called checkpoints which basically make sure",
    "start": "1544840",
    "end": "1549960"
  },
  {
    "text": "that all of the data has been flushed every 5 minutes because if you have a hot block you want to ensure that if you",
    "start": "1549960",
    "end": "1556120"
  },
  {
    "text": "come back up that you don't have to to apply a ton of redo log right and in",
    "start": "1556120",
    "end": "1562399"
  },
  {
    "text": "particular that's hard in my SQL cuz it's single-threaded and so that might uh you know if even if you use the five",
    "start": "1562399",
    "end": "1568320"
  },
  {
    "text": "minute rule um where you say like it's typically 5 minutes between checkpoints it might take a lot longer than that to",
    "start": "1568320",
    "end": "1573960"
  },
  {
    "text": "run the replay in my SQL right in our case the underlying storage replays the",
    "start": "1573960",
    "end": "1581159"
  },
  {
    "text": "redo logs on demand as part of a discre and so that means that there's nothing different about running a crash recovery",
    "start": "1581159",
    "end": "1588559"
  },
  {
    "text": "than reading a block and normal processing you know that is highly tested code just through everyday",
    "start": "1588559",
    "end": "1595320"
  },
  {
    "text": "practice so it's parallel right because it's happening across all your storage nodes it's distributed for the same",
    "start": "1595320",
    "end": "1602000"
  },
  {
    "text": "reason it's asynchronous because you don't need the system to be up you don't",
    "start": "1602000",
    "end": "1607440"
  },
  {
    "text": "need the system to do the log replay after a crash you can just start up and",
    "start": "1607440",
    "end": "1613039"
  },
  {
    "text": "then you can you know as you access the blocks they do the same thing that they've always done which is you you know apply the redo they",
    "start": "1613039",
    "end": "1621000"
  },
  {
    "start": "1622000",
    "end": "1656000"
  },
  {
    "text": "need survivable caches so we move the cash out of the database process so you",
    "start": "1622520",
    "end": "1628200"
  },
  {
    "text": "know I mentioned that you know we will shut down and restart uh the process if we think it's bad or maybe your DBA does",
    "start": "1628200",
    "end": "1635039"
  },
  {
    "text": "because he sees a you know a deadlock that can't be handled otherwise and so",
    "start": "1635039",
    "end": "1640640"
  },
  {
    "text": "since the cach is warm when you come back up you can resume fully loaded operations a lot faster and so the",
    "start": "1640640",
    "end": "1647600"
  },
  {
    "text": "combination of instant crash recovery and survivable caches makes uh recovery",
    "start": "1647600",
    "end": "1654080"
  },
  {
    "text": "a lot lot faster uh the other aspect is is that",
    "start": "1654080",
    "end": "1659480"
  },
  {
    "start": "1656000",
    "end": "1685000"
  },
  {
    "text": "what about if I you know the machine's down well we have also improved failover you know both in terms of failure",
    "start": "1659480",
    "end": "1665240"
  },
  {
    "text": "detection time and then the recovery we said was a lot faster and then we've if",
    "start": "1665240",
    "end": "1670799"
  },
  {
    "text": "you're using the Maria DB driver it'll register the IP addresses of the of the",
    "start": "1670799",
    "end": "1676159"
  },
  {
    "text": "various nodes so so you don't have to wait for DNS propagation so on average a um well",
    "start": "1676159",
    "end": "1683519"
  },
  {
    "text": "actually let's just look at the failover times so this is a registry for the last U you know 35 weeks of how long",
    "start": "1683519",
    "end": "1690679"
  },
  {
    "start": "1685000",
    "end": "1748000"
  },
  {
    "text": "failovers take across our fleets of tens of thousands of nodes of you know of in",
    "start": "1690679",
    "end": "1696919"
  },
  {
    "text": "of clusters so in this case um 30% of",
    "start": "1696919",
    "end": "1702039"
  },
  {
    "text": "the failovers happen in under 5 Seconds uh further 40% % so now",
    "start": "1702039",
    "end": "1708240"
  },
  {
    "text": "cumulative 70% are happening under 10 seconds under 20 seconds uh you're",
    "start": "1708240",
    "end": "1715440"
  },
  {
    "text": "getting up to you know all of the 95% so you we added another 25% there and then",
    "start": "1715440",
    "end": "1723000"
  },
  {
    "text": "other than a very very small sliver of cases that we really uh obsess about you",
    "start": "1723000",
    "end": "1728559"
  },
  {
    "text": "know we're basically under 30 so that pretty much covers everything and you can see that you know",
    "start": "1728559",
    "end": "1734720"
  },
  {
    "text": "we've been obsessing about this for a long time because the numbers uh on the uh uh upper ones have been you know they",
    "start": "1734720",
    "end": "1741840"
  },
  {
    "text": "show a curve going upwards right that you know they're higher and then you see a curve going downwards on the",
    "start": "1741840",
    "end": "1748480"
  },
  {
    "text": "others so that's all you know ongoing work that's part of what we have to do focus on for you guys and you know it's",
    "start": "1748480",
    "end": "1755080"
  },
  {
    "text": "not things that are glitzy but you know it's stuff that's super important uh let's look at new availability",
    "start": "1755080",
    "end": "1762200"
  },
  {
    "start": "1762000",
    "end": "1832000"
  },
  {
    "text": "enhancements so the fact of the matter is is that availability is a lot more",
    "start": "1762200",
    "end": "1767960"
  },
  {
    "text": "than Hardware failures right you patch your database that cons you know that",
    "start": "1767960",
    "end": "1773279"
  },
  {
    "text": "creates downtime you modify your schema that uh either creates downtime or it is",
    "start": "1773279",
    "end": "1779480"
  },
  {
    "text": "going to actually in cause a performance impact uh as you running you do large",
    "start": "1779480",
    "end": "1785039"
  },
  {
    "text": "scale database reorganizations right so those you can't necessarily do in online op in an online way you have to actually",
    "start": "1785039",
    "end": "1792080"
  },
  {
    "text": "create a copy of your database do it generate bin logs replicate it over and",
    "start": "1792080",
    "end": "1797279"
  },
  {
    "text": "and then maybe you know you know lose your weekend and then you come back and uh you know you can flip it over and",
    "start": "1797279",
    "end": "1803880"
  },
  {
    "text": "then you know once in the Blue Moon maybe it's happened to you it certainly has happened to me you drop the wrong",
    "start": "1803880",
    "end": "1809399"
  },
  {
    "text": "table or you run a delete statement that's missing the wear clause or messed it up and then you know and then you get",
    "start": "1809399",
    "end": "1815880"
  },
  {
    "text": "to meet your CEO and as he's standing there well you know you wait for the you",
    "start": "1815880",
    "end": "1822480"
  },
  {
    "text": "know point in time restore to come up right so databases have very wide blast",
    "start": "1822480",
    "end": "1828480"
  },
  {
    "text": "radius right so that's all very sad uh so let's",
    "start": "1828480",
    "end": "1834000"
  },
  {
    "start": "1832000",
    "end": "1897000"
  },
  {
    "text": "uh look at some of the things we've been we're introducing zero downtime patching",
    "start": "1834000",
    "end": "1839320"
  },
  {
    "text": "so what we do here is you know the traditional approach the approach we were taking until just recently is that",
    "start": "1839320",
    "end": "1845960"
  },
  {
    "text": "we added the new database engine we cut it over you know yes it's great that the failover is fast or the you know the",
    "start": "1845960",
    "end": "1853120"
  },
  {
    "text": "crash recovery is fast but the user sessions terminate and then you have to come back up right now what we do is",
    "start": "1853120",
    "end": "1860799"
  },
  {
    "text": "that when we're patching we put both pieces of software in place we park the",
    "start": "1860799",
    "end": "1866679"
  },
  {
    "text": "connections and then as they drain out you know all the current activity you",
    "start": "1866679",
    "end": "1872600"
  },
  {
    "text": "know once we get to you know zero on that we flip it over and then we restart the activity so it now feels like a bump",
    "start": "1872600",
    "end": "1880240"
  },
  {
    "text": "in the wire in terms of AA of performance rather than the an outage",
    "start": "1880240",
    "end": "1885799"
  },
  {
    "text": "right so you it just feels like H for it seemed like a you know Glitz in The",
    "start": "1885799",
    "end": "1891080"
  },
  {
    "text": "Matrix you know like it took 3 seconds longer than I expected so that's pretty cool um bunch of constraints right now",
    "start": "1891080",
    "end": "1900399"
  },
  {
    "start": "1897000",
    "end": "1926000"
  },
  {
    "text": "uh so right now we have to go to our current patching model when we can't park connections then here are a bunch",
    "start": "1900399",
    "end": "1906399"
  },
  {
    "text": "of areas where you can't park connections like if I've got a active query running you know I have to wait",
    "start": "1906399",
    "end": "1911600"
  },
  {
    "text": "for it or if it's going to take forever I'm just going to kill it and come back up right open transactions same issue",
    "start": "1911600",
    "end": "1917600"
  },
  {
    "text": "and then you know there's a bunch of things we're this is an area of investment for us you'll see it improve",
    "start": "1917600",
    "end": "1923279"
  },
  {
    "text": "uh in time here's something no one's asked me",
    "start": "1923279",
    "end": "1928720"
  },
  {
    "start": "1926000",
    "end": "1991000"
  },
  {
    "text": "about but super important so you know we talked about database reorganizations and so how do you do",
    "start": "1928720",
    "end": "1935080"
  },
  {
    "text": "that well the neat way to do it would be to just clone your database right and if",
    "start": "1935080",
    "end": "1941399"
  },
  {
    "text": "you if you own your storage system what you can do is do a copy on write volume where you're just adding metadata and",
    "start": "1941399",
    "end": "1947639"
  },
  {
    "text": "you just say hey I'm going to create a copy of my database but I'm not going to do a deep copy of my data and then as",
    "start": "1947639",
    "end": "1954399"
  },
  {
    "text": "the data changes I'm going to move it you know create two copies right just on a block by block basis so that makes um",
    "start": "1954399",
    "end": "1963559"
  },
  {
    "text": "a lot of sense if you want to say here's my production database I've got a new app I want to test it let me just create",
    "start": "1963559",
    "end": "1969120"
  },
  {
    "text": "a copy or maybe I want to do a large scale database reorganization or maybe you know I just",
    "start": "1969120",
    "end": "1975840"
  },
  {
    "text": "want to say like hey I I can't I I need to take a look at the system at a particular point in time and really",
    "start": "1975840",
    "end": "1982240"
  },
  {
    "text": "deeply understand what the heck happened there right but I don't want to affect the that have have that have effect on",
    "start": "1982240",
    "end": "1988679"
  },
  {
    "text": "what's going on in my normal system so let's dig in a little bit on how it works so you do a um database copy a",
    "start": "1988679",
    "end": "1997399"
  },
  {
    "start": "1991000",
    "end": "2029000"
  },
  {
    "text": "database clone and so you know all the pages are the same so I don't need to copy anything I just need to you know",
    "start": "1997399",
    "end": "2002880"
  },
  {
    "text": "point the two systems at the same stuff so that just takes a few seconds from a storage volume perspective unfortunately",
    "start": "2002880",
    "end": "2010360"
  },
  {
    "text": "it's at this point it takes a few minutes just because we have to get ec2 instances to register the database head",
    "start": "2010360",
    "end": "2017120"
  },
  {
    "text": "node um and read replicas but you know that'll come down over time anyway few",
    "start": "2017120",
    "end": "2022519"
  },
  {
    "text": "minutes is sure beats a few hours to restore a large database",
    "start": "2022519",
    "end": "2029120"
  },
  {
    "start": "2029000",
    "end": "2063000"
  },
  {
    "text": "then as the pages change let's say in this case page two and page five changed",
    "start": "2029120",
    "end": "2035240"
  },
  {
    "text": "in the source database you know there exists all over the storage system you'll end up with multiple copies of uh",
    "start": "2035240",
    "end": "2041960"
  },
  {
    "text": "two right and you might have uh a p a new page added and that'll just end up",
    "start": "2041960",
    "end": "2048520"
  },
  {
    "text": "somewhere right and so all of that is it's just straightforward copy on right",
    "start": "2048520",
    "end": "2053839"
  },
  {
    "text": "basically you that you're probably familiar with that you know it'll just create new copies as you go along on a",
    "start": "2053839",
    "end": "2059320"
  },
  {
    "text": "page by Page basis and just",
    "start": "2059320",
    "end": "2064398"
  },
  {
    "start": "2063000",
    "end": "2195000"
  },
  {
    "text": "drift online ddl so as if you're familiar with my SQL if",
    "start": "2064800",
    "end": "2071280"
  },
  {
    "text": "you're doing a ddl operation it does a full table copy and rebuilds all the",
    "start": "2071280",
    "end": "2077000"
  },
  {
    "text": "indexes it takes a long time and um further the DML operations",
    "start": "2077000",
    "end": "2084679"
  },
  {
    "text": "that you're running concurrently because it's great that they've added online ddl you know basically get registered into",
    "start": "2084679",
    "end": "2091079"
  },
  {
    "text": "temp space and you need a lot potentially a lot of temp space as that runs and then then the ddl operation",
    "start": "2091079",
    "end": "2098440"
  },
  {
    "text": "actually impacts DML throughput which is horrible and then uh there's a point at",
    "start": "2098440",
    "end": "2105320"
  },
  {
    "text": "which you take a table lock to apply that log of changes right so you know it's better than where it was but it's",
    "start": "2105320",
    "end": "2112800"
  },
  {
    "text": "uh not great um so what we do now is um",
    "start": "2112800",
    "end": "2118400"
  },
  {
    "text": "we add an entry to the metadata table to indicate this change happened and then",
    "start": "2118400",
    "end": "2124400"
  },
  {
    "text": "each block is versioned to a particular ver version of the schema and then when you do a",
    "start": "2124400",
    "end": "2131119"
  },
  {
    "text": "modification of that block we basically go and update it up convert it to that",
    "start": "2131119",
    "end": "2137640"
  },
  {
    "text": "um new schema the current schema okay makes sense it's basically like redo processing for metadata right",
    "start": "2137640",
    "end": "2146200"
  },
  {
    "text": "just like I was apply generating a new version of the data page before I read it from a redo perspective on the data",
    "start": "2146200",
    "end": "2152720"
  },
  {
    "text": "perspective I'm doing the same thing now on the metadata perspective it's basically that same notion of moving",
    "start": "2152720",
    "end": "2157960"
  },
  {
    "text": "things to be asynchronous out of the latency path Etc and right now we",
    "start": "2157960",
    "end": "2164920"
  },
  {
    "text": "support one extremely important case which is adding a nullable column at the end of the table and again like uh I was",
    "start": "2164920",
    "end": "2172000"
  },
  {
    "text": "saying about zero downtime patching we you know it's a really important priority to us to add other sorts of AD",
    "start": "2172000",
    "end": "2178920"
  },
  {
    "text": "columns to you know be able to drop columns reorder where something appears in uh tree uh modify data type which are",
    "start": "2178920",
    "end": "2187240"
  },
  {
    "text": "compatible like you know int to Big int is a compatible conversion you know string to int not so much",
    "start": "2187240",
    "end": "2194839"
  },
  {
    "start": "2195000",
    "end": "2239000"
  },
  {
    "text": "right so here's some performance again uh you know obviously the mechanism is entirely",
    "start": "2195160",
    "end": "2201960"
  },
  {
    "text": "different so you know we're talking about uh tenths of seconds versus hours",
    "start": "2201960",
    "end": "2208040"
  },
  {
    "text": "right and uh and that's actually a ddl operation",
    "start": "2208040",
    "end": "2213240"
  },
  {
    "text": "happening that um didn't have concurrent DML you have concurrent DML you know you can add a factor of 10 to that on the",
    "start": "2213240",
    "end": "2220359"
  },
  {
    "text": "you know my SQL sides I think and I'm sure you know you've all done many of these D you know ddl operations um and",
    "start": "2220359",
    "end": "2228079"
  },
  {
    "text": "I'm sure you've experienced it for yourself so you don't need any uh proof points on the right hand side of it you",
    "start": "2228079",
    "end": "2233319"
  },
  {
    "text": "know it'll be interesting to see this left hand side come",
    "start": "2233319",
    "end": "2237520"
  },
  {
    "start": "2239000",
    "end": "2329000"
  },
  {
    "text": "out since we are writing data blocks out of place",
    "start": "2241079",
    "end": "2248599"
  },
  {
    "text": "you don't actually have to do a pointand Time restore necessarily right the data",
    "start": "2249079",
    "end": "2255960"
  },
  {
    "text": "exists to go back to a previous point in time as long as we haven't garbage collected right so you can again move",
    "start": "2255960",
    "end": "2263640"
  },
  {
    "text": "from something a point in time restore being a data Centric operation to being",
    "start": "2263640",
    "end": "2269000"
  },
  {
    "text": "a metadata Centric operation around moving pointers around about what is",
    "start": "2269000",
    "end": "2274599"
  },
  {
    "text": "current so this is is an operation where you can say hey I want to keep let's say",
    "start": "2274599",
    "end": "2282400"
  },
  {
    "text": "a day of data not without uh garbage collecting it on my local discs inside",
    "start": "2282400",
    "end": "2289440"
  },
  {
    "text": "my system so don't garbage collect anything unless it's a day old or an",
    "start": "2289440",
    "end": "2294599"
  },
  {
    "text": "hour old or whatever it is and then you can say rather than",
    "start": "2294599",
    "end": "2300000"
  },
  {
    "text": "doing a restore to the current point in time doing you know from a S3 snapshot",
    "start": "2300000",
    "end": "2305599"
  },
  {
    "text": "and into a new volume and just say hey let me just move back to this point and",
    "start": "2305599",
    "end": "2311040"
  },
  {
    "text": "so if you dropped uh the wrong table or if you have uh deleted without a wear clause or you know any of the things",
    "start": "2311040",
    "end": "2318440"
  },
  {
    "text": "that actually end up happening I mean we all have users right um then you can uh",
    "start": "2318440",
    "end": "2323800"
  },
  {
    "text": "get uh you know something back up fast that matters so let's compare the two",
    "start": "2323800",
    "end": "2331800"
  },
  {
    "start": "2329000",
    "end": "2391000"
  },
  {
    "text": "so the online operation changes the state of the current database whereas the offline operation creates a new",
    "start": "2331800",
    "end": "2338160"
  },
  {
    "text": "database um it's available in seconds even for a multi-terabyte",
    "start": "2338160",
    "end": "2345319"
  },
  {
    "text": "database um there's no additional storage cost right because the current databases were stored to the previous",
    "start": "2345400",
    "end": "2351040"
  },
  {
    "text": "point in time storage you know cost is probably not your biggest issue when you're going to this sort of thing but",
    "start": "2351040",
    "end": "2356160"
  },
  {
    "text": "you know it's nice you can do it iteratively so you can go and say like",
    "start": "2356160",
    "end": "2361280"
  },
  {
    "text": "hey let me you know someone said oh my God I need to get back to 1159 you know",
    "start": "2361280",
    "end": "2366640"
  },
  {
    "text": "this table got dropped right then and then turned out it was actually 1157 or",
    "start": "2366640",
    "end": "2372400"
  },
  {
    "text": "it was you know um 12:00 or 12:03 or whatever it is so you can just you know",
    "start": "2372400",
    "end": "2378359"
  },
  {
    "text": "it's almost like a jog dial right you can move it here you can move it there it's since none of these operations are",
    "start": "2378359",
    "end": "2384520"
  },
  {
    "text": "destructive you know you can move it around uh we don't currently support cross",
    "start": "2384520",
    "end": "2391240"
  },
  {
    "text": "region um yeah uh so let's talk a little bit about how it works so we",
    "start": "2391240",
    "end": "2396920"
  },
  {
    "text": "I talked about how we do snapshots and so forth so inside the storage system we generate data blocks right we generate",
    "start": "2396920",
    "end": "2404240"
  },
  {
    "text": "uh redo records as we go along we and then we basically need to figure out what is The",
    "start": "2404240",
    "end": "2409880"
  },
  {
    "text": "Logical um log sequence number right LSN that represents a consistent point in",
    "start": "2409880",
    "end": "2416480"
  },
  {
    "text": "time for the database and what does that reflect for any given segment right",
    "start": "2416480",
    "end": "2421680"
  },
  {
    "text": "because the log sequence number is going to expand is database wide so it's acoss all segments so if I say I want to get",
    "start": "2421680",
    "end": "2428280"
  },
  {
    "text": "back to log sequence number 10 billion then you know in the various systems there's only going to be one page that",
    "start": "2428280",
    "end": "2435560"
  },
  {
    "text": "is at that number and then all the others are going to be at different numbers that are going to be less than that and that's what you want to get",
    "start": "2435560",
    "end": "2440960"
  },
  {
    "text": "back to right so at rewind time what we're basically doing is we're picking",
    "start": "2440960",
    "end": "2447520"
  },
  {
    "text": "hey let me find the previous local snapshot and all of the redo changes since then okay make",
    "start": "2447520",
    "end": "2455319"
  },
  {
    "text": "sense and then what we need to do is figure out that all of the changes past that",
    "start": "2455319",
    "end": "2461640"
  },
  {
    "text": "point need to be made invisible so that as you start doing rights onto that system that you skip",
    "start": "2461640",
    "end": "2468720"
  },
  {
    "text": "over all of the things that happened in the you know the period that you didn't want to see and you sort of jump over",
    "start": "2468720",
    "end": "2474760"
  },
  {
    "text": "jump all of that you know part of the chain to the stuff you do want to see right make sense and but it's all",
    "start": "2474760",
    "end": "2482520"
  },
  {
    "text": "non-destructive so that way if you want to go and re wind back forward or you",
    "start": "2482520",
    "end": "2488079"
  },
  {
    "text": "know fast forward to a prior point in time because oh my gosh that was wrong again uh then you can do that it's just",
    "start": "2488079",
    "end": "2495000"
  },
  {
    "text": "about shifting what's invisible and what's visible so that's one I'm really excited",
    "start": "2495000",
    "end": "2501800"
  },
  {
    "text": "about it's one of the ones that's going to appear in q1 not uh you know imminently now this is the sort of stuff",
    "start": "2501800",
    "end": "2509079"
  },
  {
    "text": "that you just have to be very very sure works right um so just some uh small things",
    "start": "2509079",
    "end": "2517319"
  },
  {
    "start": "2513000",
    "end": "2579000"
  },
  {
    "text": "that in terms of removing blockers so the you know since we started the first the question everyone's asked me is like",
    "start": "2517319",
    "end": "2524720"
  },
  {
    "text": "you know my squel what about postgress and so you know we've um recent we've",
    "start": "2524720",
    "end": "2530200"
  },
  {
    "text": "just announced that there's a session happening concurrently with this one which doesn't really help any of you but",
    "start": "2530200",
    "end": "2537359"
  },
  {
    "text": "there is a repeat of it that's happening at 3:30 to 4:30 and so if you want to go to that uh that will um you know that",
    "start": "2537359",
    "end": "2545160"
  },
  {
    "text": "may be helpful um it shares the same storage system all of the innovations that I talked about",
    "start": "2545160",
    "end": "2551000"
  },
  {
    "text": "that we're adding to you know are primarily storage system Innovations right some of them have been to the MySQL you know those are obviously not",
    "start": "2551000",
    "end": "2558520"
  },
  {
    "text": "applicable to postrest but uh you know all the storage system is because that's shared code and they're doing you know",
    "start": "2558520",
    "end": "2565160"
  },
  {
    "text": "they're following the same uh Playbook of saying okay here are all the changes that you know we need to make to improve",
    "start": "2565160",
    "end": "2571480"
  },
  {
    "text": "throughput to deal with uh you know the various things and you know they're doing those on on the postgis code",
    "start": "2571480",
    "end": "2578480"
  },
  {
    "text": "base another thing that people have talked to me quite a bit about is that",
    "start": "2578480",
    "end": "2584440"
  },
  {
    "start": "2579000",
    "end": "2612000"
  },
  {
    "text": "gosh you know 29 cents of an hour you think I've made of money and so we did",
    "start": "2584440",
    "end": "2590119"
  },
  {
    "text": "uh recently introduce uh T2 medium and which takes it down to 8 cents and uh",
    "start": "2590119",
    "end": "2597119"
  },
  {
    "text": "that helps a lot particularly for Dev test right you can expand that to a lot of users and then the t2 small is coming",
    "start": "2597119",
    "end": "2603520"
  },
  {
    "text": "in q1 mostly we're just waiting for a few Chang changes that because we need more Enis than the t2 small currently",
    "start": "2603520",
    "end": "2612000"
  },
  {
    "start": "2612000",
    "end": "2656000"
  },
  {
    "text": "supports um you a lot of uh you in the audience probably need uh certifications",
    "start": "2612480",
    "end": "2618680"
  },
  {
    "text": "that you know we've had sock and ISO for a while uh we just have added PCI and",
    "start": "2618680",
    "end": "2624359"
  },
  {
    "text": "Hippa so now you can use it for secure cases you know we're working our way through the uh you know the list of",
    "start": "2624359",
    "end": "2632079"
  },
  {
    "text": "certifications that are you know you might expect",
    "start": "2632079",
    "end": "2637400"
  },
  {
    "text": "um an interesting point on the slide is that we are adding integration with im",
    "start": "2637400",
    "end": "2642599"
  },
  {
    "text": "as well so for users for um resource level permissions Etc so you can control",
    "start": "2642599",
    "end": "2649800"
  },
  {
    "text": "access in one place that matters a lot if you're running an Enterprise uh you know type of",
    "start": "2649800",
    "end": "2655680"
  },
  {
    "text": "system auditing so you know I'm sure some of you have used the U server audit",
    "start": "2655680",
    "end": "2661800"
  },
  {
    "start": "2656000",
    "end": "2727000"
  },
  {
    "text": "plug-in from Maria DB and uh you know what basically happens there is is that as you perform operations it creates an",
    "start": "2661800",
    "end": "2669160"
  },
  {
    "text": "event string it writes it to a file and um the problem there I mean which it's",
    "start": "2669160",
    "end": "2675000"
  },
  {
    "text": "great the only problem with it is is that it really does slow down throughput and uh so for example with audit off",
    "start": "2675000",
    "end": "2681760"
  },
  {
    "text": "versus audit on on MySQL 57 on a selecton workload you're going it",
    "start": "2681760",
    "end": "2687480"
  },
  {
    "text": "reduces it roughly by a factor of three on uh so we've added a native",
    "start": "2687480",
    "end": "2694040"
  },
  {
    "text": "audit support where we are you know again youve you can see it's really the",
    "start": "2694040",
    "end": "2699640"
  },
  {
    "text": "same sorts of techniques applied in many different places uh we removed the lock we write these uh event strings in",
    "start": "2699640",
    "end": "2706800"
  },
  {
    "text": "parallel and we write the U files in parallel and on you know it does still",
    "start": "2706800",
    "end": "2712839"
  },
  {
    "text": "have an impact but on a sustained basis we can you know support about",
    "start": "2712839",
    "end": "2719280"
  },
  {
    "text": "500,000 uh events per second which is a fair number right most people aren't",
    "start": "2719280",
    "end": "2724559"
  },
  {
    "text": "running at that level on the per instance number um we had a fair bit of",
    "start": "2724559",
    "end": "2729920"
  },
  {
    "start": "2727000",
    "end": "2794000"
  },
  {
    "text": "excitement about adding Lambda events uh and calling Lambda from uh stored procedures or triggers so that was",
    "start": "2729920",
    "end": "2736640"
  },
  {
    "text": "pretty cool I think that unblocks you a little bit that you don't have to um you",
    "start": "2736640",
    "end": "2742920"
  },
  {
    "text": "know stay inside you know older languages and older systems you can sort of use the Technologies you're used to",
    "start": "2742920",
    "end": "2749839"
  },
  {
    "text": "and this is all part of our moving more towards a service oriented architecture world right it's no longer a world where",
    "start": "2749839",
    "end": "2756079"
  },
  {
    "text": "everything sits in one database right you as you change one database you need to take action in another and so you",
    "start": "2756079",
    "end": "2762800"
  },
  {
    "text": "know this is just sort of addressing that reality inside the applications we build nowadays you know we've added load",
    "start": "2762800",
    "end": "2769760"
  },
  {
    "text": "from S3 the I am thing I just talked about you know use I am roles to manage",
    "start": "2769760",
    "end": "2775040"
  },
  {
    "text": "database access and that'll be important particularly for people who need to meet",
    "start": "2775040",
    "end": "2780359"
  },
  {
    "text": "compliance and audits from you know Regulators um and then in q1 will allow",
    "start": "2780359",
    "end": "2786720"
  },
  {
    "text": "you to upload system metrics and aut logs to cloudwatch which gives you a central console for doing",
    "start": "2786720",
    "end": "2793839"
  },
  {
    "text": "that so uh looking at my SQL 56 we've",
    "start": "2793839",
    "end": "2799559"
  },
  {
    "start": "2794000",
    "end": "2849000"
  },
  {
    "text": "actually not not had any application compatibility issues reported since launch that's been super important to us",
    "start": "2799559",
    "end": "2806160"
  },
  {
    "text": "and the isv applications that run uh that work against um my SQL um we've",
    "start": "2806160",
    "end": "2813839"
  },
  {
    "text": "have found run pretty much as those so you know you don't have to change your application to move over so that's",
    "start": "2813839",
    "end": "2819079"
  },
  {
    "text": "encouraging right it certainly helps you with your custom apps as well um so the",
    "start": "2819079",
    "end": "2826040"
  },
  {
    "text": "negative thing that I'll fess up to here is that we're still working on 57 it's turned out to be harder than we expected",
    "start": "2826040",
    "end": "2833000"
  },
  {
    "text": "we've been changing a lot of code they changed a lot of code in 57 it's really important uh to us to get that done in",
    "start": "2833000",
    "end": "2840079"
  },
  {
    "text": "the interim we've we have been backporting bug fixes just to make sure that the ones that are most important",
    "start": "2840079",
    "end": "2846040"
  },
  {
    "text": "you know get dealt with so just to sort of like put it all",
    "start": "2846040",
    "end": "2852400"
  },
  {
    "start": "2849000",
    "end": "2905000"
  },
  {
    "text": "together what's available now are the things on the left I won't read the slide for you you can I'm sure you can",
    "start": "2852400",
    "end": "2858200"
  },
  {
    "text": "read um the things in December are the things that are locked and ready to go",
    "start": "2858200",
    "end": "2864160"
  },
  {
    "text": "we're in Black Days right now we don't really want to do deployments uh during reinvent or during Thanksgiving and then",
    "start": "2864160",
    "end": "2870680"
  },
  {
    "text": "you know so you know you should see um the uh 1.10 release go out um you know",
    "start": "2870680",
    "end": "2877240"
  },
  {
    "text": "shortly after we get done uh with the conference and then um in Q you know",
    "start": "2877240",
    "end": "2884000"
  },
  {
    "text": "what's in q1 that's listed here I mean there's more in q1 than it's listed here but those are things that we've sort of",
    "start": "2884000",
    "end": "2890280"
  },
  {
    "text": "finished development of and then they're now in test and you'll see the things we're talking about there",
    "start": "2890280",
    "end": "2896440"
  },
  {
    "text": "are the things that really require heavy test right they're things that impact durability and you know there are a",
    "start": "2896440",
    "end": "2902240"
  },
  {
    "text": "couple of items that are just larger um so um we're collecting feedback forms in",
    "start": "2902240",
    "end": "2909000"
  },
  {
    "start": "2905000",
    "end": "2931000"
  },
  {
    "text": "the back I'll take questions I'll also note that um there are pile of temporary",
    "start": "2909000",
    "end": "2914359"
  },
  {
    "text": "tattoos as you exit the building uh the room and you can get those for the replay party later on so you know you",
    "start": "2914359",
    "end": "2921119"
  },
  {
    "text": "may enjoy that and I'll take questions I've got about 10 minutes",
    "start": "2921119",
    "end": "2926640"
  },
  {
    "text": "left",
    "start": "2930920",
    "end": "2933920"
  }
]