[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "and welcome to today's webinar designing fault tolerant applications so today we'd like to talk",
    "start": "1280",
    "end": "6680"
  },
  {
    "text": "to you about building fault tolerant applications using the Amazon web services uh much of the material in",
    "start": "6680",
    "end": "13000"
  },
  {
    "text": "today's presentation is drawn from a white paper of the same name that we published last year this white paper is",
    "start": "13000",
    "end": "20279"
  },
  {
    "text": "available in the new AWS architecture Center and we will uh give you a link to",
    "start": "20279",
    "end": "25439"
  },
  {
    "text": "that at the end of this presentation our goal today is to share our knowledge and our best practices and",
    "start": "25439",
    "end": "32758"
  },
  {
    "text": "we want to make sure that we impart that that uh knowledge over to you and we'd also like to hear back from you so um as",
    "start": "32759",
    "end": "38879"
  },
  {
    "text": "you listen please feel free to contribute uh your observations through the comments and uh at we later in this",
    "start": "38879",
    "end": "45079"
  },
  {
    "text": "week we will be emailing you and uh please feel free to uh reply and let us know your comments and any best",
    "start": "45079",
    "end": "51559"
  },
  {
    "text": "practices that you've discovered that you would like to share with with us and with with your your uh peers as",
    "start": "51559",
    "end": "58920"
  },
  {
    "text": "well So today we're going to start out with an AWS feature review to make sure that",
    "start": "58920",
    "end": "65439"
  },
  {
    "start": "60000",
    "end": "60000"
  },
  {
    "text": "uh that you have a good understanding of of all the different AWS features that you can use to achieve fault tolerance",
    "start": "65439",
    "end": "71759"
  },
  {
    "text": "uh we're doing this primarily because we realize that we have been rolling out new services and new features very very",
    "start": "71759",
    "end": "77680"
  },
  {
    "text": "quickly and sometimes it seems as if you you might uh might blink and and miss something we want to make sure that if",
    "start": "77680",
    "end": "83520"
  },
  {
    "text": "you if you happen to take a day or two off that you didn't miss an important aspect of of a AWS we're going to spend a lot of time",
    "start": "83520",
    "end": "90799"
  },
  {
    "text": "on architectural guidance we're going to tell you uh the the best the things that we have learned over over years of",
    "start": "90799",
    "end": "96479"
  },
  {
    "text": "building highly scalable highly available applications how to engineer fault tolerance into those applications",
    "start": "96479",
    "end": "103439"
  },
  {
    "text": "we're going to talk about some hints and tips and and kind of additional observations we're going to point you to",
    "start": "103439",
    "end": "109320"
  },
  {
    "text": "some additional resources where you can go further than what we've had time for today and then we're going to have time",
    "start": "109320",
    "end": "115759"
  },
  {
    "text": "at the end for your questions and then the three of us will will will jointly answer your",
    "start": "115759",
    "end": "122079"
  },
  {
    "text": "questions so in in addition one of the duties I have as my as the Evangelist is to write the AWS blog that uh perhaps",
    "start": "122079",
    "end": "128599"
  },
  {
    "text": "you read and I I do know that we we do put out a lot of services and a lot of new features very very quickly and it is",
    "start": "128599",
    "end": "135280"
  },
  {
    "text": "possible to if you uh if you turn your head for a bit sometimes you can miss an important feature so let's start out",
    "start": "135280",
    "end": "141400"
  },
  {
    "text": "just by really reviewing the different aspects of AWS and making sure that we're all on the same page for the rest",
    "start": "141400",
    "end": "146640"
  },
  {
    "text": "of the presentation the first thing we should talk about is the fact that some of the",
    "start": "146640",
    "end": "152680"
  },
  {
    "start": "147000",
    "end": "147000"
  },
  {
    "text": "the services in AWS you can think of those as inherently fault tolerant and highly available where fault tolerance",
    "start": "152680",
    "end": "160280"
  },
  {
    "text": "and durability is engineered into the service at the base so when you build",
    "start": "160280",
    "end": "165640"
  },
  {
    "text": "applications using these Services you don't have to think in terms of engineering additional durability or",
    "start": "165640",
    "end": "170760"
  },
  {
    "text": "fault Tolerance on top of these basic services so for example when you create sqs message cues there there are",
    "start": "170760",
    "end": "177400"
  },
  {
    "text": "multiple servers and buil redundancy behind the scenes when you post a",
    "start": "177400",
    "end": "183080"
  },
  {
    "text": "message to a queue that message is is replicated across multiple machines so that the your your messages are are are",
    "start": "183080",
    "end": "190319"
  },
  {
    "text": "always going to be properly uh stored and available for processing from the queue similarly behind the scenes with",
    "start": "190319",
    "end": "197120"
  },
  {
    "text": "Amazon S3 you store your object once that that object is stored and at the point when",
    "start": "197120",
    "end": "203920"
  },
  {
    "text": "that storage request completes and and you receive a success acknowledgement you we've already made multiple copies",
    "start": "203920",
    "end": "209560"
  },
  {
    "text": "of your data and we're storing it with 11 nines of durability Amazon simple DB has has a",
    "start": "209560",
    "end": "216360"
  },
  {
    "text": "similar uh degree of redundancy behind the scenes as as does the relational database service when used in the multi",
    "start": "216360",
    "end": "223519"
  },
  {
    "text": "availability zone or multi-az mode in other situations when you're",
    "start": "223519",
    "end": "229040"
  },
  {
    "text": "using ec2 we're giving you some basic tools and features which you then need to to combine in different ways to build",
    "start": "229040",
    "end": "236280"
  },
  {
    "text": "systems that are both fault tolerant and highly available these are things that we'll discuss over the course of this",
    "start": "236280",
    "end": "241920"
  },
  {
    "text": "webinar including things like availability zones elastic IP addresses elastic block storage and so",
    "start": "241920",
    "end": "249480"
  },
  {
    "text": "forth I think it's really important as you think about and and hear about these different services and think about how",
    "start": "249480",
    "end": "255879"
  },
  {
    "text": "you're going to put them to use in your own architecture there there's definitely some trade-offs that you need to make there there's a Continuum that",
    "start": "255879",
    "end": "262919"
  },
  {
    "text": "goes from a very very simple system with a single server and very very little in the way of fault tolerance to have very",
    "start": "262919",
    "end": "270000"
  },
  {
    "text": "very complex system that has a high degree of redundancy automated failover",
    "start": "270000",
    "end": "275600"
  },
  {
    "text": "and so forth and a very very quick time to recovery you need to trade off things like um your design budget your",
    "start": "275600",
    "end": "282919"
  },
  {
    "text": "implementation budget your operational budget uh versus the complexity that you are able to uh to engineer into the",
    "start": "282919",
    "end": "290800"
  },
  {
    "text": "system and the amount and the time that you desire for recovery so different time different systems will have",
    "start": "290800",
    "end": "296000"
  },
  {
    "text": "different degrees of criticality and you need to take that into account as you designing anding what what is the level of",
    "start": "296000",
    "end": "302720"
  },
  {
    "text": "complexity that that is uh worthwhile for this system let's take a quick re refresh",
    "start": "302720",
    "end": "309080"
  },
  {
    "start": "307000",
    "end": "307000"
  },
  {
    "text": "look at the the various components of the of Amazon ec2 uh at the outermost level um we have",
    "start": "309080",
    "end": "316120"
  },
  {
    "text": "the concept of a region uh we have five different AWS regions in different locations around the",
    "start": "316120",
    "end": "322360"
  },
  {
    "text": "world the regions are subdivided into separate functional uh areas we call",
    "start": "322360",
    "end": "327919"
  },
  {
    "text": "availability zones and we we encourage you to deploy different ec2 instances",
    "start": "327919",
    "end": "333240"
  },
  {
    "text": "across different zones within a region for for um fault",
    "start": "333240",
    "end": "338280"
  },
  {
    "text": "tolerance uh Central to this guy diagram is the concept of the ec2 instance for for doing your",
    "start": "338280",
    "end": "344479"
  },
  {
    "text": "processing when you launch your ec2 instances you have your choice of two different types of storage you have the",
    "start": "344479",
    "end": "350199"
  },
  {
    "text": "ephemeral storage which is storage attached attached to the ec2 instance and with a lifetime that is the same as",
    "start": "350199",
    "end": "356479"
  },
  {
    "text": "the instance when you launch the instance you get the storage when the inst goes away so does the",
    "start": "356479",
    "end": "362720"
  },
  {
    "text": "storage you also have the ability to create what are called elastic block storage or EBS volumes these volumes can",
    "start": "362720",
    "end": "369319"
  },
  {
    "text": "range in size from a gigabyte up to a terabyte they exist within a single availability Zone just like a particular",
    "start": "369319",
    "end": "375880"
  },
  {
    "text": "ec2 instance and they have a lifetime that's that's separate and distinct from that of any particular ec2 instance use",
    "start": "375880",
    "end": "383039"
  },
  {
    "text": "EBS to create snapshots which are point and time backups you create those snapshots they're stored with high",
    "start": "383039",
    "end": "388680"
  },
  {
    "text": "durability in Amazon S3 you can later use those snapshots to recreate the the",
    "start": "388680",
    "end": "395039"
  },
  {
    "text": "volume contents in the same availability zone or in a different availability Zone in the same",
    "start": "395039",
    "end": "401520"
  },
  {
    "text": "region on the network side uh several important Concepts first you have the ability to use security groups to",
    "start": "401520",
    "end": "409240"
  },
  {
    "text": "control access to your ec2 instances you have the ability to create elastic IP",
    "start": "409240",
    "end": "414800"
  },
  {
    "text": "addresses and to map those to any ec2 instance in a particular region and an",
    "start": "414800",
    "end": "420479"
  },
  {
    "text": "elastic IP address is specific to an individual AWS",
    "start": "420479",
    "end": "425680"
  },
  {
    "text": "region you also have the elastic load balancing feature that allows you to spread an incoming traffic load across",
    "start": "425680",
    "end": "431720"
  },
  {
    "text": "any number of ec2 instances within a region um you you are certainly familiar",
    "start": "431720",
    "end": "437879"
  },
  {
    "text": "with the concept of the Ami the Amazon machine image uh basically that is your your boot dis which is preconfigured",
    "start": "437879",
    "end": "443720"
  },
  {
    "text": "with your operating system your applications your development tools and so forth and used to boot up your ec2",
    "start": "443720",
    "end": "449319"
  },
  {
    "text": "inst operationally your ec2 instances report",
    "start": "449319",
    "end": "454960"
  },
  {
    "text": "uh various metrics such as CPU load disc load and network load to Cloud watch",
    "start": "454960",
    "end": "460199"
  },
  {
    "text": "those metrics are stored at either five minute or one minute intervals depending on the degree of uh of monitoring that",
    "start": "460199",
    "end": "466440"
  },
  {
    "text": "you've opted in for you can access those metrics through the AWS Management console and you can also use those to",
    "start": "466440",
    "end": "473159"
  },
  {
    "text": "drive Auto scaling where you will bring in additional ec2 instances as needed to",
    "start": "473159",
    "end": "478199"
  },
  {
    "text": "handle a traffic load um use the autoscaling alarms to to to",
    "start": "478199",
    "end": "483759"
  },
  {
    "text": "raise or lower the number of instances as needed so important things to think",
    "start": "483759",
    "end": "490840"
  },
  {
    "start": "489000",
    "end": "489000"
  },
  {
    "text": "about with ec2 I like to think of the Ami as as really a set of packaged and",
    "start": "490840",
    "end": "496199"
  },
  {
    "text": "reusable functionality and i' like to encourage people to think in terms of putting all the necessary Parts into",
    "start": "496199",
    "end": "502080"
  },
  {
    "text": "that Ami getting it set up getting it fully configured and then as you as we'll talk about later making that Ami",
    "start": "502080",
    "end": "508840"
  },
  {
    "text": "as self contained and as ready to run as possible you have a number of choices of",
    "start": "508840",
    "end": "513919"
  },
  {
    "text": "statically building a Amis uh making them more Dynamic making them more configurable at setup or launch time and",
    "start": "513919",
    "end": "520320"
  },
  {
    "text": "we'll cover some of those options as well when you think of storage we talked about the on instance or ephemeral",
    "start": "520320",
    "end": "526800"
  },
  {
    "text": "storage and with with these discs the lifetime is tied to the instance Lifetime and these have an AFR which is",
    "start": "526800",
    "end": "533279"
  },
  {
    "text": "short for annual failure rate that's similar to a standard hard disk which is generally about 5% of the drives in a",
    "start": "533279",
    "end": "540000"
  },
  {
    "text": "given population will fail per year the EBS volumes have a lifetime independent",
    "start": "540000",
    "end": "545560"
  },
  {
    "text": "of any particular ec2 instance and there is redundancy uh with behind the scenes",
    "start": "545560",
    "end": "551040"
  },
  {
    "text": "of an EBS volume so when you store EBS your data is stored with the degree of redundancy that redundancy is specific",
    "start": "551040",
    "end": "557760"
  },
  {
    "text": "to a particular availability Zone and because of this redundancy a particular EBS volume has an annual failure rate",
    "start": "557760",
    "end": "564120"
  },
  {
    "text": "that is anywhere between about 0.1% and 0.5% you generally want to think of your",
    "start": "564120",
    "end": "570760"
  },
  {
    "text": "architecture in terms of logical volumes and and logical mappings to different ec2 instances and so as you design that",
    "start": "570760",
    "end": "577160"
  },
  {
    "text": "architecture you need to actually think about how am I going to map my my volumes that a particular instance needs",
    "start": "577160",
    "end": "582959"
  },
  {
    "text": "to the particular instance that happens to be running serving a particular role we do of course encourage you to use EBS",
    "start": "582959",
    "end": "589240"
  },
  {
    "text": "snapshot backups and to have a regular backup cycle a labeling methodology and so forth so that you not only do you",
    "start": "589240",
    "end": "596000"
  },
  {
    "text": "back up your data that you have a good way to track the last time your data was backed up and to find the proper data to",
    "start": "596000",
    "end": "602360"
  },
  {
    "text": "use in in any kind of recovery",
    "start": "602360",
    "end": "606560"
  },
  {
    "text": "situation so elastic IP addresses you can map those to any ec2 instance within a given region the the general way that",
    "start": "607600",
    "end": "615040"
  },
  {
    "text": "you will think about these is that you will use an elastic IP address as effectively a a logical endpoint which",
    "start": "615040",
    "end": "621640"
  },
  {
    "text": "you then map to the physical endpoint being a particular ec2 instance um based on the the instance that's serving in in",
    "start": "621640",
    "end": "628000"
  },
  {
    "text": "a particular role at a given time time the IP addresses can be easily detached from a failed instance and then mapped",
    "start": "628000",
    "end": "634040"
  },
  {
    "text": "to a replacement and generally that that switch over takes uh somewhere less than a minute to",
    "start": "634040",
    "end": "639200"
  },
  {
    "text": "accomplish uh very very important is our autoscaling feature and there there's two separate ways to use this one that",
    "start": "639200",
    "end": "644880"
  },
  {
    "text": "that's obvious and a second that might be a little bit less so the first way to use autoscaling is",
    "start": "644880",
    "end": "651079"
  },
  {
    "text": "you use this to actually respond to changing conditions by adding or terminating ec2 instances you do this by",
    "start": "651079",
    "end": "657760"
  },
  {
    "text": "by creating some Cloud watch um alarms using those alarms to actually initiate autoscaling action such as a scale up or",
    "start": "657760",
    "end": "664560"
  },
  {
    "text": "a scale down action that's kind of the the obvious and we might think of as traditional way to use",
    "start": "664560",
    "end": "670440"
  },
  {
    "text": "autoscaling the second way is to use autoscaling to maintain a fixed number of instances so you do this by simply",
    "start": "670440",
    "end": "676600"
  },
  {
    "text": "creating the autoscaling group and you then set the both the minimum and the maximum number of instances you'd like",
    "start": "676600",
    "end": "682360"
  },
  {
    "text": "to run in that group to the same number so if in your architecture you always need to have two instances of a",
    "start": "682360",
    "end": "688680"
  },
  {
    "text": "particular kind of Ami running you'd simply put that configure that constant number into the group what this means is",
    "start": "688680",
    "end": "695320"
  },
  {
    "text": "that once you you've set up this fixed number of instances that autoscaling group will automatically perform health checks on those instances if it finds",
    "start": "695320",
    "end": "702320"
  },
  {
    "text": "them to be unhealthy if they're not responding to pings or returning error conditions as you conf figure the",
    "start": "702320",
    "end": "707639"
  },
  {
    "text": "autoscaling will automatically take care of of taking th those failed instances out of the group and replace them with",
    "start": "707639",
    "end": "713120"
  },
  {
    "text": "with uh with healthy instances when you think about fault tolerance we also encourage you to think",
    "start": "713120",
    "end": "718839"
  },
  {
    "text": "about the the ec2 reserved instances which guarantee capacity for you when when you need it in in a in a um a",
    "start": "718839",
    "end": "726079"
  },
  {
    "text": "failover situation and also give you a a lower price for your hourly consumption",
    "start": "726079",
    "end": "731279"
  },
  {
    "text": "of ec2 Now cloudwatch alarms are a relatively new feature of cloudwatch and",
    "start": "731279",
    "end": "738399"
  },
  {
    "text": "it's something that we do encourage you to to study and incorporate into your your systems the idea is that after we",
    "start": "738399",
    "end": "745360"
  },
  {
    "text": "have your instances your EBS volumes and so forth reporting metrics to cloudwatch those metrics are stored at either five",
    "start": "745360",
    "end": "751839"
  },
  {
    "text": "or one minute intervals you can then use alarms and you can create these alarms either programmatically from the command",
    "start": "751839",
    "end": "758079"
  },
  {
    "text": "line or through the console you can use these alarms to define various conditions you would like to detect and",
    "start": "758079",
    "end": "763760"
  },
  {
    "text": "then be notified of so you can go to the console you can select metrics on either",
    "start": "763760",
    "end": "769000"
  },
  {
    "text": "individual instances or on groups or categories of of instances get assign",
    "start": "769000",
    "end": "774079"
  },
  {
    "text": "names and descriptions and then thresholds to the alarm the threshold can be a comparison",
    "start": "774079",
    "end": "779839"
  },
  {
    "text": "and then a percentage value and then a duration and So based on on on that",
    "start": "779839",
    "end": "786320"
  },
  {
    "text": "those the metrics and your defined alarm if an alarm fires it can then initiate a",
    "start": "786320",
    "end": "792040"
  },
  {
    "text": "notification which you can then use to initiate autoscaling uh fire an alert to",
    "start": "792040",
    "end": "797399"
  },
  {
    "text": "you uh page you and so forth elastic load balancing a critical",
    "start": "797399",
    "end": "804839"
  },
  {
    "text": "feature in in a fault tolerant application think of elastic load balancing as the way to distribute",
    "start": "804839",
    "end": "810040"
  },
  {
    "text": "incoming traffic across multiple ec2 instances and again this is configurable",
    "start": "810040",
    "end": "815199"
  },
  {
    "text": "with the set of health checks and the elastic load balancing that you set up will only Route traffic to your Healthy",
    "start": "815199",
    "end": "821800"
  },
  {
    "text": "instances you generally you can use elastic load balancing in conjunction with autoscaling the autoscaling has the",
    "start": "821800",
    "end": "828760"
  },
  {
    "text": "ability to add additional instances to an elastic load balancer as they're brought online and to remove instances",
    "start": "828760",
    "end": "834839"
  },
  {
    "text": "from the load balancer as they're they're terminated so elastic load balancing scaling work work fine",
    "start": "834839",
    "end": "841320"
  },
  {
    "text": "independently work even better when you put them",
    "start": "841320",
    "end": "845639"
  },
  {
    "start": "846000",
    "end": "846000"
  },
  {
    "text": "together now let's talk about a little bit about both regions and availability",
    "start": "846480",
    "end": "851880"
  },
  {
    "text": "zones regions are a geographic concept and we currently have five separate AWS",
    "start": "851880",
    "end": "857360"
  },
  {
    "text": "regions we have regions on the east and west coast of the us we have a region in",
    "start": "857360",
    "end": "863639"
  },
  {
    "text": "Europe currently in Ireland and we have a pair of regions in Asia Pacific both in Singapore and Tokyo when you choose",
    "start": "863639",
    "end": "871279"
  },
  {
    "text": "to either do some processing or some or some storage you always get to choose",
    "start": "871279",
    "end": "876320"
  },
  {
    "text": "explicitly which of the regions you address your requests to and we never migrate functionality or data between",
    "start": "876320",
    "end": "883480"
  },
  {
    "text": "regions the regions are are are totally totally separate and distinct within the regions we we break",
    "start": "883480",
    "end": "889800"
  },
  {
    "text": "the regions down uh further into what we call azs or availability",
    "start": "889800",
    "end": "894959"
  },
  {
    "text": "zones and a given region will have anywhere between currently currently two and four or five availability",
    "start": "894959",
    "end": "901519"
  },
  {
    "text": "zones so what are the characteristics of availability zones and what advice do we have to",
    "start": "901519",
    "end": "906839"
  },
  {
    "start": "902000",
    "end": "902000"
  },
  {
    "text": "offer so as uh as you might know availability zones are distinct physical",
    "start": "906839",
    "end": "912399"
  },
  {
    "text": "locations you could think of of of each AZ in a region as really a separate building or a separate data center we",
    "start": "912399",
    "end": "919680"
  },
  {
    "text": "have uh low latency network connections between the availability zones in a given region and each of these azs has",
    "start": "919680",
    "end": "926480"
  },
  {
    "text": "independent Power Cooling network connection ity and",
    "start": "926480",
    "end": "931680"
  },
  {
    "text": "security we recommend as as you'll see in my next slide that you always partition complete Al complete",
    "start": "931680",
    "end": "937959"
  },
  {
    "text": "application Stacks across two or more availability zones within a region we also encourage you to use",
    "start": "937959",
    "end": "945000"
  },
  {
    "text": "elastic load balancing across these instances to to spread your traffic across multiple availability zones in",
    "start": "945000",
    "end": "951639"
  },
  {
    "text": "the same region the idea being that uh you want to build your application such",
    "start": "951639",
    "end": "956759"
  },
  {
    "text": "as if there is a problem in one AZ that you have capacity and functionality in another a ready to take over for",
    "start": "956759",
    "end": "964519"
  },
  {
    "text": "you so here's a picture that shows you the proper use of multiple availability zones for your",
    "start": "964519",
    "end": "971399"
  },
  {
    "start": "965000",
    "end": "965000"
  },
  {
    "text": "application we have incoming requests at at the bottom those requests uh hit the",
    "start": "972199",
    "end": "977319"
  },
  {
    "text": "elastic load balancer that elastic load balancer is is aware of um complete application",
    "start": "977319",
    "end": "983880"
  },
  {
    "text": "Stacks so really at aware of the web server because it's going to be sending traffic to the web server it's it's",
    "start": "983880",
    "end": "989040"
  },
  {
    "text": "where of the of the the web servers in multiple availability zones inside of the",
    "start": "989040",
    "end": "994399"
  },
  {
    "text": "region the the load balancers always performing health checks to make sure it's able to reach the the server in the",
    "start": "994399",
    "end": "999920"
  },
  {
    "text": "region so that I should say a word or two about health checks when you set up your load balancer you get to include a",
    "start": "999920",
    "end": "1006560"
  },
  {
    "text": "URL that that load balancer can can effectively Ping On on the um on the",
    "start": "1006560",
    "end": "1012920"
  },
  {
    "text": "instance to and that that URL has the opportunity to return a code that either says I'm I'm healthy or can return a",
    "start": "1012920",
    "end": "1019399"
  },
  {
    "text": "code says I'm not healthy or can simply fail to respond which also would mean that is not healthy the load balancer",
    "start": "1019399",
    "end": "1024678"
  },
  {
    "text": "uses these health checks to make sure that it's only rting traffic to instances that are that are alive and up and running and able to",
    "start": "1024679",
    "end": "1031360"
  },
  {
    "text": "serve so per this diagram we recommend that you you deploy complete application Stacks in two or more availability zones",
    "start": "1031360",
    "end": "1039520"
  },
  {
    "text": "so complete application stack in a traditional multier architecture would be a web server an application server a",
    "start": "1039520",
    "end": "1046038"
  },
  {
    "text": "database server now in this picture sure I do have multiple copies of RDS shown here",
    "start": "1046039",
    "end": "1052320"
  },
  {
    "text": "uh what I'm really trying to convey is the fact that with RDS you would which is the relational database service you",
    "start": "1052320",
    "end": "1058640"
  },
  {
    "text": "you would generally use that in what we call the multi-az model where there is both a primary and a secondary and RDS",
    "start": "1058640",
    "end": "1064679"
  },
  {
    "text": "will automatically take care of uh of keeping the primary and the secondary healthy if the primary fails it will",
    "start": "1064679",
    "end": "1071720"
  },
  {
    "text": "then um make the secondary into the primary launch a new secondary uh make sure that we we re- replicate the data",
    "start": "1071720",
    "end": "1078880"
  },
  {
    "text": "and so forth so that this this this diagram I think is really key and it shows you that this this complete you",
    "start": "1078880",
    "end": "1084720"
  },
  {
    "text": "want each availability Zone to have enough functionality to run the entire",
    "start": "1084720",
    "end": "1090440"
  },
  {
    "text": "application so we've received a number of questions about the proper ways to use regions and how to kind of think",
    "start": "1090440",
    "end": "1096600"
  },
  {
    "start": "1091000",
    "end": "1091000"
  },
  {
    "text": "about uh regions as you architect your application so the regions are functionally separate U they they",
    "start": "1096600",
    "end": "1103960"
  },
  {
    "text": "generally have the um we we are working to make sure that we have the same AWS",
    "start": "1103960",
    "end": "1110320"
  },
  {
    "text": "uh services in every region generally what we'll do when we roll out new AWS Services U they will be in beta testing",
    "start": "1110320",
    "end": "1116360"
  },
  {
    "text": "in a single region and then as that beta test matures and progresses we will then roll out that same functionality to the",
    "start": "1116360",
    "end": "1122400"
  },
  {
    "text": "other regions so they're functionally separate every region is composed of two or more availability",
    "start": "1122400",
    "end": "1128400"
  },
  {
    "text": "zones and the regions are connected to each other via the public internet so you you'll generally use",
    "start": "1128400",
    "end": "1134600"
  },
  {
    "text": "regions for a couple different regions you will use them to have your your fun ality geographically close to your",
    "start": "1134600",
    "end": "1141080"
  },
  {
    "text": "customers so if you have customers mostly located in Asia you could choose to use our Singapore or our Tokyo",
    "start": "1141080",
    "end": "1147320"
  },
  {
    "text": "regions if most of your customers are in the US perhaps use the US East or us West",
    "start": "1147320",
    "end": "1152640"
  },
  {
    "text": "regions and also our customers sometimes make choices of regions based on their their need to comply with national laws",
    "start": "1152640",
    "end": "1159000"
  },
  {
    "text": "and practices uh we we do um generally recommend that when you try to build",
    "start": "1159000",
    "end": "1164720"
  },
  {
    "text": "your application you you you can definitely build a a highly available application within a single region by",
    "start": "1164720",
    "end": "1171080"
  },
  {
    "text": "the use of multiple availability zones okay and with that I'd like to",
    "start": "1171080",
    "end": "1177159"
  },
  {
    "text": "turn things over to my colleague Atilla and Atilla is going to take you through our architectural",
    "start": "1177159",
    "end": "1183679"
  },
  {
    "text": "guidance One One important principle when you kind of uh take a step back and look at your architecture and want to",
    "start": "1183679",
    "end": "1190280"
  },
  {
    "start": "1185000",
    "end": "1185000"
  },
  {
    "text": "ensure that it's designed for failure or for tolerant is to uh really avoid",
    "start": "1190280",
    "end": "1196240"
  },
  {
    "text": "single points of failures so why is this so important well clearly if um any",
    "start": "1196240",
    "end": "1201760"
  },
  {
    "text": "component that is a single point of failure were to fail it brings the entire system with it so that's",
    "start": "1201760",
    "end": "1207640"
  },
  {
    "text": "typically not not acceptable and not what we want so the the guidance is that",
    "start": "1207640",
    "end": "1213760"
  },
  {
    "text": "let's assume that that everything can fail um a a drive a computer you the",
    "start": "1213760",
    "end": "1219840"
  },
  {
    "text": "network you know what you know whatever the component or its function it is",
    "start": "1219840",
    "end": "1224919"
  },
  {
    "text": "let's let's assume it it could fail so and then you know take a step back and",
    "start": "1224919",
    "end": "1230320"
  },
  {
    "text": "design backwards from it so look at your architecture and um you know identify",
    "start": "1230320",
    "end": "1236039"
  },
  {
    "text": "the components there possibly a front end an application layer a database",
    "start": "1236039",
    "end": "1241120"
  },
  {
    "text": "layer and so on and ask yourself well what happens if if this component were",
    "start": "1241120",
    "end": "1246679"
  },
  {
    "text": "to fail and um once you identify a single point of failure basically if",
    "start": "1246679",
    "end": "1252720"
  },
  {
    "text": "your answer to that question is well if that component fails my entire system is down it's time to put some",
    "start": "1252720",
    "end": "1259200"
  },
  {
    "text": "redundancy in place and the idea here is that um with redundancy you're able to",
    "start": "1259200",
    "end": "1265000"
  },
  {
    "text": "uh replace or shift traffic or shift load over to the Redundant Healy system",
    "start": "1265000",
    "end": "1271679"
  },
  {
    "text": "while the failed system is either being fixed or being replac so the the overall",
    "start": "1271679",
    "end": "1276799"
  },
  {
    "text": "goal here is that uh the application of the system should continue to function",
    "start": "1276799",
    "end": "1282039"
  },
  {
    "text": "possibly in some kind of degraded mode where it it's not working at 100% of of",
    "start": "1282039",
    "end": "1287400"
  },
  {
    "text": "the feature set or or uh you know not not not all components are fully working",
    "start": "1287400",
    "end": "1294279"
  },
  {
    "text": "but at least that uh the base functionality is in place so that's that's the idea here so if anything",
    "start": "1294279",
    "end": "1300279"
  },
  {
    "text": "fails really there should be no impact um to your customers as as much as",
    "start": "1300279",
    "end": "1305440"
  },
  {
    "text": "possible at least as far as the core functionality is concerned um with that",
    "start": "1305440",
    "end": "1311279"
  },
  {
    "text": "comes the design of your recovery process so let's say uh we identified",
    "start": "1311279",
    "end": "1318159"
  },
  {
    "text": "these point of failures we have redundancy in place now let's assume uh one of these components actually failed",
    "start": "1318159",
    "end": "1324919"
  },
  {
    "text": "um what what is there in place to recover from that and we'll we we'll talk about a couple of the mechanisms uh",
    "start": "1324919",
    "end": "1331880"
  },
  {
    "text": "in just a moment the point I want to make right here is that it's it's critical to basically practice bringing",
    "start": "1331880",
    "end": "1337880"
  },
  {
    "text": "up Replacements um restoring from backup and being really comfortable with with",
    "start": "1337880",
    "end": "1343440"
  },
  {
    "text": "that procedure like the last thing you won't happen is uh something fails or some disaster struck",
    "start": "1343440",
    "end": "1349080"
  },
  {
    "text": "and you're unsure about the process or don't have Automation in place to get",
    "start": "1349080",
    "end": "1354320"
  },
  {
    "text": "the system back up and uh yeah Jeff talked about this earlier um really",
    "start": "1354320",
    "end": "1361080"
  },
  {
    "text": "Amazon web services gives the tools and building blocks that allow you to trade",
    "start": "1361080",
    "end": "1367039"
  },
  {
    "text": "off uh the business need uh for high availability versus the cost uh in in",
    "start": "1367039",
    "end": "1373760"
  },
  {
    "text": "infrastructure so clearly if you uh as you approach higher availability your",
    "start": "1373760",
    "end": "1378799"
  },
  {
    "text": "cost will will also increase um and for some applications it might be more",
    "start": "1378799",
    "end": "1383880"
  },
  {
    "text": "important to be uh as cost effective or as cheap as possible well in which case",
    "start": "1383880",
    "end": "1389640"
  },
  {
    "text": "um it it could well be a business decision to trade off high availability in other cases uh if you have Mission",
    "start": "1389640",
    "end": "1396200"
  },
  {
    "text": "critical systems that it will probably not be acceptable to trade off high availability and and the cost also will",
    "start": "1396200",
    "end": "1402559"
  },
  {
    "text": "increase again summary is that uh the the tools and the functionality pieces",
    "start": "1402559",
    "end": "1408159"
  },
  {
    "text": "that discussed here um are are there to give you a choice so you can pick the",
    "start": "1408159",
    "end": "1413640"
  },
  {
    "text": "right mixture and uh build the right level of high availability into your",
    "start": "1413640",
    "end": "1418760"
  },
  {
    "text": "application all right so let's let's take a look at uh some of those building blocks I think Jeff did a great job uh",
    "start": "1418760",
    "end": "1425240"
  },
  {
    "start": "1420000",
    "end": "1420000"
  },
  {
    "text": "introducing uh the concepts already um so again what's really important here is",
    "start": "1425240",
    "end": "1431799"
  },
  {
    "text": "um the building block that we call elastic IP address and um why why is",
    "start": "1431799",
    "end": "1437559"
  },
  {
    "text": "that important well well it gives you a a public IP address that you can map to",
    "start": "1437559",
    "end": "1444159"
  },
  {
    "text": "any of your running instances in the region so if there is a failure with any",
    "start": "1444159",
    "end": "1449799"
  },
  {
    "text": "of the of the instances um you can take the elastic IP address that is pointing",
    "start": "1449799",
    "end": "1455600"
  },
  {
    "text": "to that instance and map it to a replacement instance now that that",
    "start": "1455600",
    "end": "1460960"
  },
  {
    "text": "instance can either be running already kind of like a h standby or it could be something that you bring up uh and",
    "start": "1460960",
    "end": "1467120"
  },
  {
    "text": "within just a few minutes the the instance will be up and running and at that point you could um move the elastic",
    "start": "1467120",
    "end": "1473240"
  },
  {
    "text": "IP address to the new instance again this is a great example where you know if you put a hot standby in place the",
    "start": "1473240",
    "end": "1480120"
  },
  {
    "text": "the cost is is higher and if you put uh a uh you logic in place to launch a",
    "start": "1480120",
    "end": "1485440"
  },
  {
    "text": "replacement instance um quickly then um you might have uh you know just a few",
    "start": "1485440",
    "end": "1491120"
  },
  {
    "text": "minutes of of downtime while the replacement instance is coming up but you're saving um saving quite a bit of",
    "start": "1491120",
    "end": "1496600"
  },
  {
    "text": "money by not uh having to run the hot stamp by 247 so this this again is just an example where there are choices that",
    "start": "1496600",
    "end": "1503960"
  },
  {
    "text": "you need to make here um the use of multiple availability",
    "start": "1503960",
    "end": "1509360"
  },
  {
    "text": "zones again that's really critical and I can't emphasize enough um the importance",
    "start": "1509360",
    "end": "1515559"
  },
  {
    "text": "of designing your application such that um it it acts as an isolated stack in",
    "start": "1515559",
    "end": "1521720"
  },
  {
    "text": "each of the availability zones um you know just just just to make the point",
    "start": "1521720",
    "end": "1527000"
  },
  {
    "text": "clear you can also get this really wrong where you have a lot of cross talk between uh different availability zones",
    "start": "1527000",
    "end": "1532960"
  },
  {
    "text": "for example by placing all your front ends into one availability Zone and all your kind of application servers or",
    "start": "1532960",
    "end": "1539799"
  },
  {
    "text": "database systems in the other availability Zone well that's that's the wrong way of doing this right so what you want to do is that basically have",
    "start": "1539799",
    "end": "1547240"
  },
  {
    "text": "independent Stacks in each of the zones meaning uh all critical systems that are required um to make your system work",
    "start": "1547240",
    "end": "1554360"
  },
  {
    "text": "need to be present in the zone so that if any um any part of uh of your system",
    "start": "1554360",
    "end": "1561039"
  },
  {
    "text": "in one zone or if even the the entire Zone become unavailable uh the system continues to",
    "start": "1561039",
    "end": "1566960"
  },
  {
    "text": "run because the isolated stack now is uh able to handle uh all the traffic what's",
    "start": "1566960",
    "end": "1573240"
  },
  {
    "text": "what's also important here is a capacity consideration so um if you if you lay",
    "start": "1573240",
    "end": "1580440"
  },
  {
    "text": "out your system so that uh one or multiple availability zones can take over in case there is a failure in a a",
    "start": "1580440",
    "end": "1588440"
  },
  {
    "text": "one of the availability zones you have to plan Your Capacity accordingly if you for example use three availability zones",
    "start": "1588440",
    "end": "1596279"
  },
  {
    "text": "then um each of the zones cannot run at higher utilization than you know roughly",
    "start": "1596279",
    "end": "1602440"
  },
  {
    "text": "66% because if one of the Zone were to fail then well onethird of the traffic",
    "start": "1602440",
    "end": "1607960"
  },
  {
    "text": "would have to be absorbed by the other two zones so you know there 66% utilization will go up to 99 and this is",
    "start": "1607960",
    "end": "1615480"
  },
  {
    "text": "talking high already you probably don't want to push the system this High um so",
    "start": "1615480",
    "end": "1620799"
  },
  {
    "text": "again use availability zones um set up independent stxs and uh you know make sure you you use them correctly this",
    "start": "1620799",
    "end": "1628279"
  },
  {
    "text": "brings up the point of how to replicate data across multiple AC's and there a couple of ways of of doing it so if you",
    "start": "1628279",
    "end": "1635640"
  },
  {
    "text": "have a database for example you can set up um slaving or replication um into a",
    "start": "1635640",
    "end": "1642480"
  },
  {
    "text": "database installation in the other a um another example is uh the Amazon on",
    "start": "1642480",
    "end": "1648440"
  },
  {
    "text": "relational data services multi-az uh mode which basically as Jeff describes",
    "start": "1648440",
    "end": "1654320"
  },
  {
    "text": "uh puts a master and a replica in different availability zones and you",
    "start": "1654320",
    "end": "1660440"
  },
  {
    "text": "depending on which application or which system you're using there there might be other methods of replicating data across",
    "start": "1660440",
    "end": "1666120"
  },
  {
    "text": "azs the the high level Point here is make sure that your data is uh not only",
    "start": "1666120",
    "end": "1673159"
  },
  {
    "text": "present in a single um kind of you location that is not sufficiently",
    "start": "1673159",
    "end": "1678799"
  },
  {
    "text": "uh redundant so don't ever have your critical data just exist on a single on",
    "start": "1678799",
    "end": "1684039"
  },
  {
    "text": "instant store or uh on on an evbs drive without snapshots for",
    "start": "1684039",
    "end": "1689440"
  },
  {
    "text": "example the next Point here is uh about the use of uh monitoring clearly um you",
    "start": "1689440",
    "end": "1696440"
  },
  {
    "text": "you can't really respond well to failures or to issues if um your system doesn't pick it up so uh what we offer",
    "start": "1696440",
    "end": "1704440"
  },
  {
    "text": "is Amazon cloudwatch our our monitoring system that's not to say that you must use Amazon cloudwatch if you have",
    "start": "1704440",
    "end": "1710679"
  },
  {
    "text": "existing monitoring systems that you're happy with um you can can very well",
    "start": "1710679",
    "end": "1716080"
  },
  {
    "text": "bring these to Amazon web services or or monitor your uh ec2 instances with that",
    "start": "1716080",
    "end": "1721720"
  },
  {
    "text": "what's critical there though is that you're able to respond and IDE in in an automated U manner so that uh you know",
    "start": "1721720",
    "end": "1729440"
  },
  {
    "text": "scripts Fire or the right actions uh take place to put Replacements in place and so on now if you if you use",
    "start": "1729440",
    "end": "1736200"
  },
  {
    "text": "cloudwatch of course you get some nice synergies with some of our other services like Auto scaling um and",
    "start": "1736200",
    "end": "1744159"
  },
  {
    "text": "elastic GL balancing using elastic Block store that's uh that's another good practice",
    "start": "1744159",
    "end": "1751919"
  },
  {
    "text": "so if you uh if you consider the options that you have for an ec2 instance well",
    "start": "1751919",
    "end": "1757720"
  },
  {
    "text": "there is the on instance uh store or spindle which uh has an annual failure",
    "start": "1757720",
    "end": "1763360"
  },
  {
    "text": "rate of uh of about 5% which is that of a standard hard disc",
    "start": "1763360",
    "end": "1768760"
  },
  {
    "text": "or you have elastic box store which is about the order of magnitude more durable so we we would certainly",
    "start": "1768760",
    "end": "1775799"
  },
  {
    "text": "recommend using uh EBS uh for some of your critical data plus um uh taking",
    "start": "1775799",
    "end": "1782519"
  },
  {
    "text": "snapshots uh of uh of your data in in in EVS these snapshots allow you to restore",
    "start": "1782519",
    "end": "1789080"
  },
  {
    "text": "back to uh to the time the snapshot was taken and you create you can create new volumes uh from from the snapshot in any",
    "start": "1789080",
    "end": "1797039"
  },
  {
    "text": "a of of the region so this is also using EBS snapshots is also a viable way to U",
    "start": "1797039",
    "end": "1803240"
  },
  {
    "text": "Move volumes across U availability zones in a region uh if if that were",
    "start": "1803240",
    "end": "1809679"
  },
  {
    "text": "necessary this drawing here is an example of a fault tolerant architecture",
    "start": "1809679",
    "end": "1815240"
  },
  {
    "start": "1810000",
    "end": "1810000"
  },
  {
    "text": "on ec2 what you see here is um there is ec2 instance a which uh is the master",
    "start": "1815240",
    "end": "1822760"
  },
  {
    "text": "instance you know think of this as a database for example or you know some some system where the the Master Slave",
    "start": "1822760",
    "end": "1828919"
  },
  {
    "text": "concept applies you have at the very top a elastic IP that's behind the DNS entry",
    "start": "1828919",
    "end": "1836080"
  },
  {
    "text": "for your website.com pointing to ec2 instance a and um at the bottom left you",
    "start": "1836080",
    "end": "1842440"
  },
  {
    "text": "have basically two uh EBS volumes uh one is the data volume for the database and",
    "start": "1842440",
    "end": "1848960"
  },
  {
    "text": "the other is a a log volume that basically uh keeps track of of what's",
    "start": "1848960",
    "end": "1854640"
  },
  {
    "text": "happening in the system so um instance a is is serving all the",
    "start": "1854640",
    "end": "1859720"
  },
  {
    "text": "traffic and uh is is working with its own EBS volumes now replication is in",
    "start": "1859720",
    "end": "1865799"
  },
  {
    "text": "place to replicate uh data to a second ec2 instance which is called instance B",
    "start": "1865799",
    "end": "1871600"
  },
  {
    "text": "here there is a slave a data base slave running on that instance and that instance has its own EBS data volume",
    "start": "1871600",
    "end": "1879840"
  },
  {
    "text": "that it writes to so now let's take a look at what happens if uh there is a",
    "start": "1879840",
    "end": "1885320"
  },
  {
    "text": "failure well um you see to instance a would uh become unavailable of course as a result uh",
    "start": "1885320",
    "end": "1892760"
  },
  {
    "text": "replication would stop and uh reading and writing from the EBS volumes would",
    "start": "1892760",
    "end": "1899039"
  },
  {
    "text": "stop and um you at this point your your monitoring system uh would detect this",
    "start": "1899039",
    "end": "1904799"
  },
  {
    "text": "and what you can do is basically in an automated scripted way you can remap",
    "start": "1904799",
    "end": "1910559"
  },
  {
    "text": "your elastic IP address that's sitting behind the DNS entry for your website.com make that now point to ec2",
    "start": "1910559",
    "end": "1918480"
  },
  {
    "text": "instance B and ec2 instance B would then assume to be the master um as it's not",
    "start": "1918480",
    "end": "1925720"
  },
  {
    "text": "this that that you know primary master has has gone away and um it will then",
    "start": "1925720",
    "end": "1931399"
  },
  {
    "text": "continue to write to the EBS lock volume which also can be mapped to this new instance now so the point here is um",
    "start": "1931399",
    "end": "1939960"
  },
  {
    "text": "failures to an instance uh can be detected and there can be orchestration",
    "start": "1939960",
    "end": "1945480"
  },
  {
    "text": "Automation in place to basically REM this what's nice about this example here is well your clients will be interacting",
    "start": "1945480",
    "end": "1953519"
  },
  {
    "text": "with the DNS name your website.com and um you know from a from a client",
    "start": "1953519",
    "end": "1960039"
  },
  {
    "text": "perspective there was no change at all in any of your infrastructure so um",
    "start": "1960039",
    "end": "1965799"
  },
  {
    "text": "there there's no change in DNS there's just a basically remapping of the elastic IP which now routes to a a new",
    "start": "1965799",
    "end": "1974159"
  },
  {
    "text": "instance all right so now this was an example of two easy2 instances possibly in the same availability zone now in in",
    "start": "1974159",
    "end": "1981799"
  },
  {
    "start": "1979000",
    "end": "1979000"
  },
  {
    "text": "the next example here um let's look at an architecture of how this could look",
    "start": "1981799",
    "end": "1987519"
  },
  {
    "text": "like the ween availability zone so the setup looks really similar to the slide",
    "start": "1987519",
    "end": "1992639"
  },
  {
    "text": "prior with the exception of the white box uh which denotes the availability zone now also note that logs are now",
    "start": "1992639",
    "end": "2000399"
  },
  {
    "text": "captured in Amazon simple DB uh Amazon simple DB is available to uh to any not",
    "start": "2000399",
    "end": "2008440"
  },
  {
    "text": "just within the availability zone so if we want the ability to uh switch um",
    "start": "2008440",
    "end": "2013799"
  },
  {
    "text": "logging from one availability Zone to the other we want a system that that can",
    "start": "2013799",
    "end": "2018840"
  },
  {
    "text": "accommodate that easily so here again we have instance a which is the master instance B which is the slave and",
    "start": "2018840",
    "end": "2025840"
  },
  {
    "text": "replication between them so let's take a look at what happens when uh there is an",
    "start": "2025840",
    "end": "2030880"
  },
  {
    "text": "issue in the availability Zone well the availability Zone will will disappear",
    "start": "2030880",
    "end": "2037000"
  },
  {
    "text": "replication will stop the function and monitoring would would pick this up",
    "start": "2037000",
    "end": "2043320"
  },
  {
    "text": "basically and you would take the elastic IP remap it to the instance B now and",
    "start": "2043320",
    "end": "2050040"
  },
  {
    "text": "not this this very important Nuance here the elastic IP ERS actually is a regional concept so um if you allocate",
    "start": "2050040",
    "end": "2057679"
  },
  {
    "text": "an an elastic IP you would specify which region you wanted in and uh it is um",
    "start": "2057679",
    "end": "2065000"
  },
  {
    "text": "possible to map that elastic IP address to any of your running instances in that",
    "start": "2065000",
    "end": "2070760"
  },
  {
    "text": "region so that's that's kind of a core concept here and see what happened to",
    "start": "2070760",
    "end": "2076079"
  },
  {
    "text": "Amazon simple DB well um as instance B assumed the master role it um it knew",
    "start": "2076079",
    "end": "2082480"
  },
  {
    "text": "that it needs to lock to simple DB and it will just uh uh do that and once you analyze logs you you may not even notice",
    "start": "2082480",
    "end": "2089720"
  },
  {
    "text": "that there was such a a switch over so uh that's it's a nice uh nice example of",
    "start": "2089720",
    "end": "2095760"
  },
  {
    "text": "how this could be done the offset of a Loosely coupled system",
    "start": "2095760",
    "end": "2101480"
  },
  {
    "start": "2098000",
    "end": "2098000"
  },
  {
    "text": "obviously is a is a tightly coupled system and tightly coupled systems are fairly brittle if any of the pieces or",
    "start": "2101480",
    "end": "2109040"
  },
  {
    "text": "any of the components have failures in a tightly coupled system again the entire system goes down so Lucy couple systems",
    "start": "2109040",
    "end": "2116720"
  },
  {
    "text": "give you higher availability and more stability and you have choices uh around",
    "start": "2116720",
    "end": "2122800"
  },
  {
    "text": "running um your system possibly in degrad mode or um you at least if if",
    "start": "2122800",
    "end": "2129160"
  },
  {
    "text": "there's a failure then the the remaining 90x per of your system can still be",
    "start": "2129160",
    "end": "2134440"
  },
  {
    "text": "doing useful work so you know the the the principle around",
    "start": "2134440",
    "end": "2139880"
  },
  {
    "text": "building Lucy couple systems is to uh design independent component that uh are",
    "start": "2139880",
    "end": "2145119"
  },
  {
    "text": "really exposed like a black box that have interfaces that are well known and uh you know other components talk to",
    "start": "2145119",
    "end": "2152000"
  },
  {
    "text": "that interface so on on the right you see a star looking diagram here and this",
    "start": "2152000",
    "end": "2157119"
  },
  {
    "text": "is a um just just a quick story on this one um this is a Amazon internal tool",
    "start": "2157119",
    "end": "2162839"
  },
  {
    "text": "that shows you um dependent services that are called every time you make a",
    "start": "2162839",
    "end": "2168839"
  },
  {
    "text": "request of the amazon.com website so if you you know Point your browser to the",
    "start": "2168839",
    "end": "2173920"
  },
  {
    "text": "amazon.com website the the the component that's rendering the HTML will actually consult all these different uh Services",
    "start": "2173920",
    "end": "2181240"
  },
  {
    "text": "before the page is is put together or as the page is put together such Services might for example be well",
    "start": "2181240",
    "end": "2188200"
  },
  {
    "text": "who is the customer um what's the price for this item customers who bought this",
    "start": "2188200",
    "end": "2193319"
  },
  {
    "text": "also bought XY and z um these are the five uh objects or five um products that",
    "start": "2193319",
    "end": "2201560"
  },
  {
    "text": "I last looked at uh you know well if you take a take a step back behind the scenes of of the Amazon web page you can",
    "start": "2201560",
    "end": "2207520"
  },
  {
    "text": "very well imagine what these components would would look like and you know clearly there are components that are",
    "start": "2207520",
    "end": "2213000"
  },
  {
    "text": "more critical that we have designed with higher availability and then there are components that are possibly less",
    "start": "2213000",
    "end": "2220040"
  },
  {
    "text": "critical for example you know one one component that that might be less critical in a online retail application",
    "start": "2220040",
    "end": "2227280"
  },
  {
    "text": "is the the widget that's showing uh the last five objects that you looked at you",
    "start": "2227280",
    "end": "2232720"
  },
  {
    "text": "clearly as as the customer navigates the site and uh um you know looks at at at",
    "start": "2232720",
    "end": "2238200"
  },
  {
    "text": "the next couple of uh items anyway that data will quickly be rebuilt however um",
    "start": "2238200",
    "end": "2245079"
  },
  {
    "text": "you know the component that's processing orders or keeping inventory clearly has a much much different bar uh of of high",
    "start": "2245079",
    "end": "2252560"
  },
  {
    "text": "availability in Fall tolerance so uh yeah again and an example where a business need uh can dictate or or would",
    "start": "2252560",
    "end": "2260520"
  },
  {
    "text": "dictate um the the investment that is that is made here what's further interesting uh or a",
    "start": "2260520",
    "end": "2268560"
  },
  {
    "text": "nice property of these Loosely coupled system is that you can uh load balance and scale these clusters independently",
    "start": "2268560",
    "end": "2275079"
  },
  {
    "text": "so uh you you can bring in more machines into clusters that that that needed you",
    "start": "2275079",
    "end": "2280359"
  },
  {
    "text": "can treat each of these uh Services as a subsystem so to speak which is low balanced",
    "start": "2280359",
    "end": "2287680"
  },
  {
    "text": "independently all right um at the very bottom there is also a uh example of of",
    "start": "2287839",
    "end": "2293240"
  },
  {
    "text": "typ coupling um and what I want to introduce here is uh an example where sqs the simple queuing service could be",
    "start": "2293240",
    "end": "2299640"
  },
  {
    "text": "helpful so in the tide coupling example here we have controller a b and c and",
    "start": "2299640",
    "end": "2304800"
  },
  {
    "text": "they all directly speak to each other so if there is a failure with any um of the",
    "start": "2304800",
    "end": "2310359"
  },
  {
    "text": "controllers let's say controller B goes down well controller a can no longer function because it can't reach",
    "start": "2310359",
    "end": "2316160"
  },
  {
    "text": "controller B and controller C also is not working because nothing is talking to it so with sqs you can do this uh",
    "start": "2316160",
    "end": "2324720"
  },
  {
    "text": "slightly differently because sqs will be a great buffer uh between these",
    "start": "2324720",
    "end": "2330400"
  },
  {
    "text": "controllers um and and this is the the drawing at the very bottom that just faded in so loose coupling use using Q's",
    "start": "2330400",
    "end": "2338319"
  },
  {
    "text": "would uh bring in these these these Green Dots or you know the qes that are",
    "start": "2338319",
    "end": "2343560"
  },
  {
    "text": "depicted as green dots with a q in it between each of the controllers so controller a uh will read from a queue",
    "start": "2343560",
    "end": "2349800"
  },
  {
    "text": "and put its output back onto a queue and controller B does the same and so on so",
    "start": "2349800",
    "end": "2355760"
  },
  {
    "text": "in the example where controller B were to go down well controller a and controller C can still continue to do",
    "start": "2355760",
    "end": "2362319"
  },
  {
    "text": "useful work of course uh once once the Q for controller C is uh is empty then you",
    "start": "2362319",
    "end": "2368400"
  },
  {
    "text": "know at that point controller c will also just be sitting around but uh you know hopefully that gives you enough",
    "start": "2368400",
    "end": "2373560"
  },
  {
    "text": "time to bring controller V back up this slide is about implementing",
    "start": "2373560",
    "end": "2379880"
  },
  {
    "start": "2378000",
    "end": "2378000"
  },
  {
    "text": "elasticity and you know you you notice uh that's a key word in many of our uh",
    "start": "2379880",
    "end": "2385160"
  },
  {
    "text": "features and and service names so let's let's talk a little bit about why this is important in the context of high",
    "start": "2385160",
    "end": "2391480"
  },
  {
    "text": "availability well anytime you assume the health or the fixed location of a",
    "start": "2391480",
    "end": "2396920"
  },
  {
    "text": "component it it it makes you a little bit more dependent and and less flexible so the",
    "start": "2396920",
    "end": "2403119"
  },
  {
    "text": "idea here with ec2 um is that you should be able to bring up replacement",
    "start": "2403119",
    "end": "2408440"
  },
  {
    "text": "instances or additional instances that help you shoulder the load so the moment",
    "start": "2408440",
    "end": "2413760"
  },
  {
    "text": "you assume health or a fixed location it will make that a lot more difficult so",
    "start": "2413760",
    "end": "2419480"
  },
  {
    "text": "um you know rather than a hardcoding IP addresses uh you know make make use of",
    "start": "2419480",
    "end": "2425200"
  },
  {
    "text": "uh of elastic IP addresses that you can REM map or if you uh know that you're going to work with more than one",
    "start": "2425200",
    "end": "2431160"
  },
  {
    "text": "instances look at low balancing so you can uh add and remove instances behind the low",
    "start": "2431160",
    "end": "2436720"
  },
  {
    "text": "balancer now also think about that launches and reboots could occur more",
    "start": "2436720",
    "end": "2444200"
  },
  {
    "text": "frequently so if you bring rep replacement instances or additional instances into your application",
    "start": "2444200",
    "end": "2449920"
  },
  {
    "text": "architecture then um dealing with with these relaunches and reboots should be",
    "start": "2449920",
    "end": "2455920"
  },
  {
    "text": "uh something that doesn't break the application and you know typically that's that's not very hard you know think about how the elastic low balancer",
    "start": "2455920",
    "end": "2463480"
  },
  {
    "text": "has a health check uh that's that's basically making sure your instances is",
    "start": "2463480",
    "end": "2468520"
  },
  {
    "text": "in good shape before sending traffic to it well that that concept kind of applies to uh could possibly apply to",
    "start": "2468520",
    "end": "2475760"
  },
  {
    "text": "other areas as well so keep keep that in mind and really a good way to uh bring",
    "start": "2475760",
    "end": "2482720"
  },
  {
    "text": "up these instances in in an elastic way is to",
    "start": "2482720",
    "end": "2487839"
  },
  {
    "text": "uh have the bootstrap logic of your instance ask the question who am I and",
    "start": "2487839",
    "end": "2493359"
  },
  {
    "text": "what do I need to do in this deployment so for example you could uh be launching an additional front end because your",
    "start": "2493359",
    "end": "2499280"
  },
  {
    "text": "your web traffic has increased so what you don't want to do is log into that instance start start installing Apache",
    "start": "2499280",
    "end": "2506920"
  },
  {
    "text": "start configuring it no you want this to be automatic so there's a good way to um we actually have a slide later on that",
    "start": "2506920",
    "end": "2513480"
  },
  {
    "text": "that talks about this in in more detail um what what's a good way is to basically have all this automated tell",
    "start": "2513480",
    "end": "2520480"
  },
  {
    "text": "the instance what is its role in the architecture and then have the instance",
    "start": "2520480",
    "end": "2525680"
  },
  {
    "text": "um automatically configure itself so basically enable Dynamic configuration",
    "start": "2525680",
    "end": "2530800"
  },
  {
    "text": "and boot stepping of that instance one good way to um keep some of",
    "start": "2530800",
    "end": "2536839"
  },
  {
    "text": "the deployment State now you know one one question that will come up here is well okay how do I do this where do I",
    "start": "2536839",
    "end": "2542760"
  },
  {
    "text": "store my state how do I tell um my instance what it should do or you know where where are the elastic IPS which",
    "start": "2542760",
    "end": "2549559"
  },
  {
    "text": "load bouncer should it use and so on well the answer is simple DB is a great",
    "start": "2549559",
    "end": "2554800"
  },
  {
    "text": "uh place to store this kind of deployment metadata and it's it's extremely uh coste effective as well um",
    "start": "2554800",
    "end": "2563040"
  },
  {
    "text": "you you likely will not come out of the out of the free tier um for your for",
    "start": "2563040",
    "end": "2568240"
  },
  {
    "text": "your um deployment metadata plus it's accessible from uh all your instances",
    "start": "2568240",
    "end": "2574280"
  },
  {
    "text": "plus from your home office so you know definitely a a great place toh to put this plus it can be modified by any of",
    "start": "2574280",
    "end": "2580800"
  },
  {
    "text": "the instances or entities uh of your architecture so the way this could look",
    "start": "2580800",
    "end": "2586119"
  },
  {
    "text": "like is well your instance comes up uh it checks what it needs to install it runs the correct script and then uh",
    "start": "2586119",
    "end": "2593400"
  },
  {
    "text": "looks at simple DB for configuration information such as uh which application layer to use which bucket might contain",
    "start": "2593400",
    "end": "2600520"
  },
  {
    "text": "uh you know images and so on now the last points on here is the",
    "start": "2600520",
    "end": "2606119"
  },
  {
    "text": "use of Autos scaling and elastic low balancing um I think Jeff covered this in in quite some detail already",
    "start": "2606119",
    "end": "2612640"
  },
  {
    "text": "basically autoscaling is a great tool that integrates natively with um",
    "start": "2612640",
    "end": "2618040"
  },
  {
    "text": "cloudwatch our our monitoring system to either uh scale up and scale down",
    "start": "2618040",
    "end": "2623599"
  },
  {
    "text": "meaning you start or stop instances if traffic pattern changes or um replace",
    "start": "2623599",
    "end": "2630480"
  },
  {
    "text": "instances that are no longer healthy and L balancing again is a great tool to uh",
    "start": "2630480",
    "end": "2636160"
  },
  {
    "text": "achieve higher a ability because it has health checks built in it will only send traffic to to your Healthy instances all",
    "start": "2636160",
    "end": "2643559"
  },
  {
    "text": "right with that I'd like to uh hand over to Max who uh will speak a little bit more about hints and",
    "start": "2643559",
    "end": "2649720"
  },
  {
    "text": "tips great thanks aella so one of the first things that we're going to talk about here is building on this idea of",
    "start": "2649720",
    "end": "2658400"
  },
  {
    "start": "2657000",
    "end": "2657000"
  },
  {
    "text": "the self-managed ec2 instances that Atilla was talking about",
    "start": "2658400",
    "end": "2663680"
  },
  {
    "text": "and there's a couple different starting points you can go with this you could start off using um fixed or",
    "start": "2663680",
    "end": "2670440"
  },
  {
    "text": "pre-configured Amis and then going on and doing additional configuration on",
    "start": "2670440",
    "end": "2675839"
  },
  {
    "text": "top of that or you could start with fully Dynamic Amis where you're going from a base image and installing all the",
    "start": "2675839",
    "end": "2682800"
  },
  {
    "text": "software you need and all the application you need on top of that so one of the things that you can do when",
    "start": "2682800",
    "end": "2688920"
  },
  {
    "text": "these things start up is take advantage of things like cloud and it and scripting whether you're using python",
    "start": "2688920",
    "end": "2695359"
  },
  {
    "text": "Ruby or shell Scripts and any Amazon Linux and all the newer Ubuntu Amis take",
    "start": "2695359",
    "end": "2702119"
  },
  {
    "text": "advantage of that for Windows you can also take advantage of Powershell and the net SDK to automate a lot of this",
    "start": "2702119",
    "end": "2709319"
  },
  {
    "text": "and of course there are other thirdparty tools such as Botto copano or right scale that also support this idea of a",
    "start": "2709319",
    "end": "2716280"
  },
  {
    "text": "self-managed or self-configured instance you could ask you could have",
    "start": "2716280",
    "end": "2721839"
  },
  {
    "text": "the Ami ask as it boots you know who and what am I and you could ask that in a",
    "start": "2721839",
    "end": "2728359"
  },
  {
    "text": "couple different places you could look in the user data or you could query the",
    "start": "2728359",
    "end": "2734160"
  },
  {
    "text": "the tags themselves for that information other things that you can do",
    "start": "2734160",
    "end": "2739440"
  },
  {
    "text": "here is set the rle so that it can say I'm actually an app server for",
    "start": "2739440",
    "end": "2745720"
  },
  {
    "text": "application X and then go query the information it needs to be able to pull",
    "start": "2745720",
    "end": "2750839"
  },
  {
    "text": "down and install whatever packages it needs to be that app server and then point its configuration to to that",
    "start": "2750839",
    "end": "2758440"
  },
  {
    "text": "appropriate application and database server Etc tools such as puppet and Chef are",
    "start": "2758440",
    "end": "2764839"
  },
  {
    "text": "very handy for being able to dynamically configure and install uh applications on",
    "start": "2764839",
    "end": "2770359"
  },
  {
    "text": "top of instances other things that you can do as you come in here and um install or",
    "start": "2770359",
    "end": "2776440"
  },
  {
    "text": "update application code is look in a code repository such as git or CVS or you could store that code in S3",
    "start": "2776440",
    "end": "2784119"
  },
  {
    "text": "and have the application pull it down either just on on boot or you could even script in the logic for it to check that",
    "start": "2784119",
    "end": "2791280"
  },
  {
    "text": "periodically and do updates as it goes along so maybe you want to have it check for updates every hour or",
    "start": "2791280",
    "end": "2799440"
  },
  {
    "text": "so other things you can do is attach different EBS volumes to the instance",
    "start": "2799440",
    "end": "2805000"
  },
  {
    "text": "and they don't all have to be just boot or data volumes you could also do things like have a snapshot of all the files",
    "start": "2805000",
    "end": "2813559"
  },
  {
    "text": "you need to install the software so you might just have that EBS volume attached",
    "start": "2813559",
    "end": "2820040"
  },
  {
    "text": "during the boot and configuration time and then once you've installed all the software you need you can then detach",
    "start": "2820040",
    "end": "2826319"
  },
  {
    "text": "that EBS volume and that may be a little faster than trying to go and pull the software you need dynamically at at",
    "start": "2826319",
    "end": "2835800"
  },
  {
    "text": "runtime other things you can do is take advantage of elastic IP addresses so an",
    "start": "2835800",
    "end": "2841800"
  },
  {
    "text": "interesting fact about eips is that if you resolve the DNS name of an EIP from",
    "start": "2841800",
    "end": "2848640"
  },
  {
    "text": "within ec2 you'll get the 10 dot address and if you resolve that same same name",
    "start": "2848640",
    "end": "2856079"
  },
  {
    "text": "from off off of ec2 you'll actually get the public IP of it so one thing you can",
    "start": "2856079",
    "end": "2863240"
  },
  {
    "text": "do is use the DNS name of the elastic IP address in connection strings so that",
    "start": "2863240",
    "end": "2870280"
  },
  {
    "text": "you get some uh installation should your instance fail you could then point your EIP to a new instance",
    "start": "2870280",
    "end": "2877880"
  },
  {
    "text": "and your application logic wouldn't have to change too much you could also take advantage of",
    "start": "2877880",
    "end": "2884000"
  },
  {
    "text": "tags to do things like set what state the instance is in or you could take",
    "start": "2884000",
    "end": "2889839"
  },
  {
    "text": "advantage of it to do things like say I'm actually a a Dev instance or a",
    "start": "2889839",
    "end": "2895200"
  },
  {
    "text": "production instance and finally you could do some health",
    "start": "2895200",
    "end": "2900960"
  },
  {
    "text": "checks and one of the part one of the things that you should do as you go online is do things like register this",
    "start": "2900960",
    "end": "2907839"
  },
  {
    "text": "instance into server pool so whether you're taking advantage of things like sdb or active directory you can have the",
    "start": "2907839",
    "end": "2913800"
  },
  {
    "text": "instance tell the rest of the system that is now available to process",
    "start": "2913800",
    "end": "2918880"
  },
  {
    "text": "data other things you should do is add some abstractions so when you're talking about how you think of your system you",
    "start": "2918880",
    "end": "2927240"
  },
  {
    "start": "2920000",
    "end": "2920000"
  },
  {
    "text": "really shouldn't think about it in physical terms you should you should abstracted to the maximum amount",
    "start": "2927240",
    "end": "2932680"
  },
  {
    "text": "possible so one thing that would be very useful is to take advantage of services",
    "start": "2932680",
    "end": "2938200"
  },
  {
    "text": "whenever possible so things like SNS and maybe",
    "start": "2938200",
    "end": "2943839"
  },
  {
    "text": "sqs also things that would be useful are things like um worrying about the",
    "start": "2943839",
    "end": "2950440"
  },
  {
    "text": "machine image in the sense of here's the puppet or Chef configuration file that's going to be applied to it that helps",
    "start": "2950440",
    "end": "2958000"
  },
  {
    "text": "when you're dealing with autoscaling environments the other thing that",
    "start": "2958000",
    "end": "2963280"
  },
  {
    "text": "becomes very useful is if you build the entire system out of a cloud formation",
    "start": "2963280",
    "end": "2968440"
  },
  {
    "text": "template because then if you need to recover or you need to deploy additional",
    "start": "2968440",
    "end": "2973920"
  },
  {
    "text": "instances such as an additional test instance or additional production instance in a new region you can simply",
    "start": "2973920",
    "end": "2980400"
  },
  {
    "text": "adjust the cloud formation template and launch it and not have to worry about",
    "start": "2980400",
    "end": "2985440"
  },
  {
    "text": "all the details so much and finally since we're running out of",
    "start": "2985440",
    "end": "2991200"
  },
  {
    "text": "time one thing that we'll want to do is talk about using a chaos monkey so",
    "start": "2991200",
    "end": "2997280"
  },
  {
    "start": "2993000",
    "end": "2993000"
  },
  {
    "text": "Netflix had a really nice writeup about this concept that they have and it's actually a tool that they use internally",
    "start": "2997280",
    "end": "3003960"
  },
  {
    "text": "but it's something that anyone can do and the idea is",
    "start": "3003960",
    "end": "3009160"
  },
  {
    "text": "really design your systems so that you can randomly kill any aspect of it and",
    "start": "3009160",
    "end": "3015480"
  },
  {
    "text": "it will simply recover and the chaos monkey is a way to automate that so you",
    "start": "3015480",
    "end": "3021960"
  },
  {
    "text": "could go in and decide that you're going to have your system and manly kill off",
    "start": "3021960",
    "end": "3028319"
  },
  {
    "text": "an instance say an app server or a web server or change the security groups and",
    "start": "3028319",
    "end": "3033799"
  },
  {
    "text": "see how your your uh system adapts to that change and it's much better if you",
    "start": "3033799",
    "end": "3040000"
  },
  {
    "text": "can do that in a controlled manner than it is if you just have to learn what your system is going to do during a",
    "start": "3040000",
    "end": "3047040"
  },
  {
    "text": "failure and finally you don't need a tool at all to automate this because you could simply use the AWS Management",
    "start": "3047040",
    "end": "3053359"
  },
  {
    "text": "console to go ahead and make those adjustments",
    "start": "3053359",
    "end": "3058480"
  },
  {
    "text": "so there are additional resources and most of what we talked about is available at the AWS architecture Center",
    "start": "3058480",
    "end": "3066079"
  },
  {
    "start": "3059000",
    "end": "3059000"
  },
  {
    "text": "and here you'll find different white papers uh talking about architecture fault tolerance and different best",
    "start": "3066079",
    "end": "3072720"
  },
  {
    "text": "practices and there's also a link that is aws.amazon.com",
    "start": "3072720",
    "end": "3078000"
  },
  {
    "text": "whac white papers that has a list of all the white papers that are available from",
    "start": "3078000",
    "end": "3084760"
  },
  {
    "text": "AWS and finally there's premium support which is available and I would suggest",
    "start": "3084760",
    "end": "3091000"
  },
  {
    "start": "3086000",
    "end": "3086000"
  },
  {
    "text": "that customers go ahead and get premium support at the bronze level it's only",
    "start": "3091000",
    "end": "3096359"
  },
  {
    "text": "$49 a month and that gives you access to uh actual paid support the ability to",
    "start": "3096359",
    "end": "3103960"
  },
  {
    "text": "open up a a ticket and get help uh whether it's basic advice or it's just",
    "start": "3103960",
    "end": "3110680"
  },
  {
    "text": "troubleshooting um customers should take advantage of Premium support not every everyone's going to",
    "start": "3110680",
    "end": "3117400"
  },
  {
    "text": "need the highest levels but at the Platinum level you do get access to",
    "start": "3117400",
    "end": "3122520"
  },
  {
    "text": "things like a dedicated technical account manager and access to the AWS",
    "start": "3122520",
    "end": "3127599"
  },
  {
    "text": "solution Architects for advice and of course you can always learn more at our premium support",
    "start": "3127599",
    "end": "3134880"
  },
  {
    "text": "site at that then we'll go ahead and open up the presentation for any questions that",
    "start": "3134880",
    "end": "3142920"
  },
  {
    "text": "that might be there at this time um question from Eric he says why",
    "start": "3142920",
    "end": "3148440"
  },
  {
    "text": "why would I point my website.com to an EIP if the elastic IP can only be",
    "start": "3148440",
    "end": "3156280"
  },
  {
    "text": "associated with one instance then I'm lacking load balancing",
    "start": "3156280",
    "end": "3162480"
  },
  {
    "text": "right okay can you take that one yeah absolutely uh great great observation",
    "start": "3162480",
    "end": "3168160"
  },
  {
    "text": "and uh that's actually correct so if you take uh only a single IP address and you",
    "start": "3168160",
    "end": "3173240"
  },
  {
    "text": "point your DNS to that single IP address then indeed you're you're only uh",
    "start": "3173240",
    "end": "3178559"
  },
  {
    "text": "sending traffic to to a single instance the the alternate approach there to uh",
    "start": "3178559",
    "end": "3184160"
  },
  {
    "text": "use note balancing which is definitely recommended is to either use elb",
    "start": "3184160",
    "end": "3189440"
  },
  {
    "text": "directly which is the easiest way to do it in which case elb gives you a um a",
    "start": "3189440",
    "end": "3195839"
  },
  {
    "text": "DNS uh name and you would configure a c name in your DNS and point to the the",
    "start": "3195839",
    "end": "3202240"
  },
  {
    "text": "elb that way and then you get all the low balancing of the elb service alternatively you could continue to uh",
    "start": "3202240",
    "end": "3209319"
  },
  {
    "text": "go with this uh this your single Lo balancer or single IP and point it to a instance that's running a software load",
    "start": "3209319",
    "end": "3216160"
  },
  {
    "text": "balcer that is not quite as highly available but that's that's a choice that you can make if you uh want to uh",
    "start": "3216160",
    "end": "3223880"
  },
  {
    "text": "distribute the traffic amongst multiple instance instances behind the low balancer instance yeah great observation",
    "start": "3223880",
    "end": "3230640"
  },
  {
    "text": "thanks for the question great thanks Pa um next question Max maybe you want to fill this one how would the fault",
    "start": "3230640",
    "end": "3237760"
  },
  {
    "text": "tolerant architecture operate in the case of a network sorry a network partition",
    "start": "3237760",
    "end": "3245760"
  },
  {
    "text": "instead of an instance failure and he's refer basically referring to the slide we're just on in",
    "start": "3245760",
    "end": "3252000"
  },
  {
    "text": "terms of the my website.com um I when he's talking about the full",
    "start": "3252000",
    "end": "3257200"
  },
  {
    "text": "tolerant architecture so if by a network partition we're talking about failure of",
    "start": "3257200",
    "end": "3264200"
  },
  {
    "text": "a a network segment I think I think that's what you're I",
    "start": "3264200",
    "end": "3269680"
  },
  {
    "text": "think that's the right assumption okay so if you're taking advantage of something like elastic load",
    "start": "3269680",
    "end": "3276359"
  },
  {
    "text": "balancing and you've taken advantage of a multi-az deployment where typically",
    "start": "3276359",
    "end": "3282839"
  },
  {
    "text": "you might have say two web servers two app servers two database servers in the multi-az deployment where you've",
    "start": "3282839",
    "end": "3289119"
  },
  {
    "text": "deployed half of that in one a and the other half in another",
    "start": "3289119",
    "end": "3294240"
  },
  {
    "text": "a then should an entire a become unavailable for say some some Network",
    "start": "3294240",
    "end": "3300640"
  },
  {
    "text": "routing issue then the elastic Globe balancer would simply detect that that instance in that a is unavailable and",
    "start": "3300640",
    "end": "3307960"
  },
  {
    "text": "Route all the traffic to the other a and if you've added autoscaling to that for",
    "start": "3307960",
    "end": "3313680"
  },
  {
    "text": "your web and app tier then the environment would add additional servers",
    "start": "3313680",
    "end": "3318760"
  },
  {
    "text": "to meet the demand load that you have running great thanks and um this",
    "start": "3318760",
    "end": "3325880"
  },
  {
    "text": "question till this might be a good one for you says with fault tolerant architecture on",
    "start": "3325880",
    "end": "3331240"
  },
  {
    "text": "ec2 after the first instance fails and you fail to the second",
    "start": "3331240",
    "end": "3337559"
  },
  {
    "text": "instance how do you recommend moving past this point do you bring up a third",
    "start": "3337559",
    "end": "3343640"
  },
  {
    "text": "instance and demote it to the slave so I think I think the I think what he's really getting at here is once you once",
    "start": "3343640",
    "end": "3351039"
  },
  {
    "text": "you fail to your other uh stack and another a uh what do you do to get high",
    "start": "3351039",
    "end": "3358079"
  },
  {
    "text": "availability again yeah great great question uh because the the moment your",
    "start": "3358079",
    "end": "3363559"
  },
  {
    "text": "primary fails and you do this fail over like we talked about you're you're actually for a brief uh amount of time",
    "start": "3363559",
    "end": "3369280"
  },
  {
    "text": "you're running in R non-redundant mode so the goal here would be to as quickly",
    "start": "3369280",
    "end": "3374520"
  },
  {
    "text": "as possible uh bring up a working stack again if if you just had a single",
    "start": "3374520",
    "end": "3380280"
  },
  {
    "text": "instance failure it might be easier to repair the old stack by just bringing up let's say the new front end that that's",
    "start": "3380280",
    "end": "3386720"
  },
  {
    "text": "previously if uh if there is a larger problem then you would have to bootstrap",
    "start": "3386720",
    "end": "3392480"
  },
  {
    "text": "an entirely new stack in a different availability Zone again and this is where some of the best practices we we",
    "start": "3392480",
    "end": "3398960"
  },
  {
    "text": "spoke about about Dynamic configuration uh you know making sure the the instance",
    "start": "3398960",
    "end": "3404039"
  },
  {
    "text": "asked about what role it needs to take and build itself out uh so you know within just a few minutes you should be",
    "start": "3404039",
    "end": "3410359"
  },
  {
    "text": "able to build a entirely new uh applications tag in another availability",
    "start": "3410359",
    "end": "3416760"
  },
  {
    "text": "yeah great great question thank you and on behalf of on Services again",
    "start": "3416760",
    "end": "3422599"
  },
  {
    "text": "just just thank you and we've hope that you found the uh the session today informative",
    "start": "3422599",
    "end": "3429960"
  }
]