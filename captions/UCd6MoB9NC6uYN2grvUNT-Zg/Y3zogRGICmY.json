[
  {
    "text": "hello everyone welcome to today's webinar on running state will contain",
    "start": "4740",
    "end": "10209"
  },
  {
    "text": "ozone and ozone II series today we have a branch of a circle with a severe",
    "start": "10209",
    "end": "15279"
  },
  {
    "text": "Technical Account Manager with AWS and Francis Pereira who's the head of infrastructure with this mode during the",
    "start": "15279",
    "end": "24279"
  },
  {
    "text": "webinar we do have a Q&A available live Q&A available for you so if you have any",
    "start": "24279",
    "end": "30460"
  },
  {
    "text": "questions feel free to pop them up in the Q&A chat thank you / - you should",
    "start": "30460",
    "end": "38280"
  },
  {
    "text": "am i audible okay hello everybody",
    "start": "38650",
    "end": "44640"
  },
  {
    "text": "good afternoon if you're in India and will start so my name is subbu and we've",
    "start": "44640",
    "end": "52960"
  },
  {
    "text": "I will be covering best practices with easiest in the beginning of this presentation I will hand it over to",
    "start": "52960",
    "end": "59500"
  },
  {
    "text": "Francis for covering stateful containers with ECS and then we'll wrap up with",
    "start": "59500",
    "end": "65500"
  },
  {
    "text": "some other best practices from customers and with the Q&A so to start with why",
    "start": "65500",
    "end": "75160"
  },
  {
    "text": "containers now containers typically bring speed to your development because",
    "start": "75160",
    "end": "83830"
  },
  {
    "text": "containers to start with they they can be brought up pretty fast",
    "start": "83830",
    "end": "89140"
  },
  {
    "text": "right because containers are not having a separate kernel from the host",
    "start": "89140",
    "end": "95170"
  },
  {
    "text": "operating system it shares the kernel it can be brought up pretty fast they are very efficient in a sense that",
    "start": "95170",
    "end": "101920"
  },
  {
    "text": "you can actually stack up a lot lot of containers by using something like bin pack on ECS to optimize a lot of ec2",
    "start": "101920",
    "end": "110229"
  },
  {
    "text": "instances you can reduce your number of crazy to instances it's extremely easy to pack your application inside a",
    "start": "110229",
    "end": "117190"
  },
  {
    "text": "Crocker container and it actually gives a very good developer experience because",
    "start": "117190",
    "end": "122530"
  },
  {
    "text": "the same container can actually now travel through your tests and dev",
    "start": "122530",
    "end": "129280"
  },
  {
    "text": "environment till your production without any change and you can be rest assured that if your",
    "start": "129280",
    "end": "137080"
  },
  {
    "text": "container has run on your laptop it will run the same way on the production environment also it is less risky to",
    "start": "137080",
    "end": "146230"
  },
  {
    "text": "deploy containers because in containers we follow the immutability of",
    "start": "146230",
    "end": "151599"
  },
  {
    "text": "infrastructure and the code so you actually don't go inside a container and",
    "start": "151599",
    "end": "157360"
  },
  {
    "text": "change much the container remains as it is throughout its lifecycle but the real",
    "start": "157360",
    "end": "164400"
  },
  {
    "text": "application for containers is mostly in the micro services area because",
    "start": "164400",
    "end": "169409"
  },
  {
    "text": "monoliths are now getting broken down into smaller services and each monolith",
    "start": "169409",
    "end": "175209"
  },
  {
    "text": "for example can be broken down into 20 or 30 micro services and these micro",
    "start": "175209",
    "end": "183549"
  },
  {
    "text": "services will have their independent pipelines for them to be deployed so and",
    "start": "183549",
    "end": "189840"
  },
  {
    "text": "these micro services are interdependent at times and that's why you need a very",
    "start": "189840",
    "end": "195519"
  },
  {
    "text": "efficient networking between them a communication mechanism to reduce the latency as as much as possible moreover",
    "start": "195519",
    "end": "204669"
  },
  {
    "text": "many of these micro services are actually written in modern languages like node.js or Python in which",
    "start": "204669",
    "end": "211569"
  },
  {
    "text": "inherently there is no pack packaging mechanism like you have jar for Java and",
    "start": "211569",
    "end": "217629"
  },
  {
    "text": "that's why container actually helps you in that aspect also to package the micro",
    "start": "217629",
    "end": "224980"
  },
  {
    "text": "services so now as long as your",
    "start": "224980",
    "end": "230799"
  },
  {
    "text": "containers are restricted to a small number it's okay but what happens when",
    "start": "230799",
    "end": "236290"
  },
  {
    "text": "your container you are using containers at scale when you have thousand or two thousand containers representing your",
    "start": "236290",
    "end": "241810"
  },
  {
    "text": "services why it is difficult to manage them first point is they are more",
    "start": "241810",
    "end": "247209"
  },
  {
    "text": "transient containers are typically used for short-lived processes so they appear",
    "start": "247209",
    "end": "254109"
  },
  {
    "text": "they do their job and then they disappear it's extremely difficult to track them if you do not have such if",
    "start": "254109",
    "end": "259419"
  },
  {
    "text": "you do not have a proper mechanism to manage the containers they are more",
    "start": "259419",
    "end": "264940"
  },
  {
    "text": "distributed by nature these things are supposed to be deployed on various nodes",
    "start": "264940",
    "end": "272229"
  },
  {
    "text": "running in various availability zone for example and you need a distributed",
    "start": "272229",
    "end": "277750"
  },
  {
    "text": "networking to let the container talk to each each other right and you also need",
    "start": "277750",
    "end": "282909"
  },
  {
    "text": "a very sophisticated saeschie dueling mechanism to allow your containers to be",
    "start": "282909",
    "end": "288280"
  },
  {
    "text": "launched on ec2 instances where you want them to be very important since the",
    "start": "288280",
    "end": "295930"
  },
  {
    "text": "containers actually use the same kernel four of the hosts on which they are",
    "start": "295930",
    "end": "302020"
  },
  {
    "text": "launched you are actually dependent on security features which are actually",
    "start": "302020",
    "end": "308259"
  },
  {
    "text": "given to you by the Linux kernel to have that isolation needed in between",
    "start": "308259",
    "end": "314650"
  },
  {
    "text": "containers so it is very important for you to make sure that the underlying host is patched and secured and hardened",
    "start": "314650",
    "end": "322509"
  },
  {
    "text": "so that containers cannot affect each other and that is why it's very",
    "start": "322509",
    "end": "328090"
  },
  {
    "text": "important to have a orchestration tool which can manage the hosts as well as the containers this talk is about how",
    "start": "328090",
    "end": "336880"
  },
  {
    "text": "AWS has helped with these challenges I'll go a little bit into the AWS",
    "start": "336880",
    "end": "342610"
  },
  {
    "text": "container strategy right now you have two great orchestration tools from AWS",
    "start": "342610",
    "end": "350440"
  },
  {
    "text": "one is e CS and one is e KS and both of",
    "start": "350440",
    "end": "356349"
  },
  {
    "text": "them comes with two deploying mechanisms you can actually let the let the user",
    "start": "356349",
    "end": "364479"
  },
  {
    "text": "bring their own ec2 instances and you can have them host their containers on",
    "start": "364479",
    "end": "370659"
  },
  {
    "text": "those ec2 instances or you can actually manage the ec2 instances for them so the",
    "start": "370659",
    "end": "377320"
  },
  {
    "text": "first one is called the ec2 mode and the second one launch easy to launching mode and second one is called the Fargate so",
    "start": "377320",
    "end": "384370"
  },
  {
    "text": "forget is the one where you can have you can actually let AWS manage your ec2",
    "start": "384370",
    "end": "391479"
  },
  {
    "text": "instances for you you just to have to bring your containers and run on them",
    "start": "391479",
    "end": "397259"
  },
  {
    "text": "forget with eks is not yet available it will be available soon today we are",
    "start": "397259",
    "end": "404199"
  },
  {
    "text": "going to talk mainly about CCS so here",
    "start": "404199",
    "end": "411520"
  },
  {
    "text": "is the agenda for today we will have a brief introduction to ECS best practices",
    "start": "411520",
    "end": "417520"
  },
  {
    "text": "best practice patterns and strategies for scale we'll hear from a clever tap who is a",
    "start": "417520",
    "end": "423849"
  },
  {
    "text": "local company in Mumbai and if time permits we'll have some other case",
    "start": "423849",
    "end": "429070"
  },
  {
    "text": "studies along with this we'll have a small demo from clever tip as well brief",
    "start": "429070",
    "end": "435070"
  },
  {
    "text": "introduction to ECS so what is easiest ETA ECS is actually a managed service to manage your",
    "start": "435070",
    "end": "441729"
  },
  {
    "text": "containers it is a fully managed service it is scalable and highly available it",
    "start": "441729",
    "end": "449710"
  },
  {
    "text": "actually lets you manage your micro services your batch workloads your",
    "start": "449710",
    "end": "454839"
  },
  {
    "text": "machine learning applications and it has it is very well integrated with rest of",
    "start": "454839",
    "end": "461110"
  },
  {
    "text": "the platform it is integrated with things like Amazon Elastic container registry ECR it is integrated with AWS",
    "start": "461110",
    "end": "468639"
  },
  {
    "text": "networking storage management tools and AWS forget just to mention forget is not a separate",
    "start": "468639",
    "end": "475629"
  },
  {
    "text": "service forget is a way of launching your containers in either",
    "start": "475629",
    "end": "482050"
  },
  {
    "text": "ECS or in future in eks also so here is",
    "start": "482050",
    "end": "487089"
  },
  {
    "text": "how the easiest constructs actually look so in ECS you have the cluster which is",
    "start": "487089",
    "end": "492580"
  },
  {
    "text": "a cluster of ec2 instances ec2 instances when they register into acs cluster they",
    "start": "492580",
    "end": "497949"
  },
  {
    "text": "are called container instances each container instance will have its own ECS",
    "start": "497949",
    "end": "503499"
  },
  {
    "text": "agent which communicates the status of the cluster to the easiest control plane",
    "start": "503499",
    "end": "509620"
  },
  {
    "text": "and you have to bring your docker containers and then these docker",
    "start": "509620",
    "end": "514990"
  },
  {
    "text": "containers actually run as tasks which is the most granular thing you can touch",
    "start": "514990",
    "end": "520180"
  },
  {
    "text": "in ECS a task can have one or more containers running in a sidecar pattern",
    "start": "520180",
    "end": "528029"
  },
  {
    "text": "you also have a very good load balancer integration with easiest you can have",
    "start": "528029",
    "end": "534370"
  },
  {
    "text": "either your classic lbs lbs or NL B's",
    "start": "534370",
    "end": "540220"
  },
  {
    "text": "integrated with easiest and each service typically is represented by a target",
    "start": "540220",
    "end": "546490"
  },
  {
    "text": "group of a lb application load balancer in ECS ye CS because you have got first",
    "start": "546490",
    "end": "556389"
  },
  {
    "text": "of all very good integration with rest of the platform few of the new things with e CS are AWS V PC networking mode",
    "start": "556389",
    "end": "564130"
  },
  {
    "text": "where each task will have an identity in the network each task will be actually",
    "start": "564130",
    "end": "569620"
  },
  {
    "text": "associated it can be associated with the Ani you have service discovery through route",
    "start": "569620",
    "end": "574990"
  },
  {
    "text": "53 right now available on easiest you have got advanced task placement Francis",
    "start": "574990",
    "end": "581470"
  },
  {
    "text": "is going to cover that as part of his demo you have a global footprint for",
    "start": "581470",
    "end": "587140"
  },
  {
    "text": "example ECS is right now available on in Mumbai region and forget with the with",
    "start": "587140",
    "end": "592870"
  },
  {
    "text": "easiest will be available soon here you have deep integration with the AWS platform you have got a very powerful XI",
    "start": "592870",
    "end": "599680"
  },
  {
    "text": "dueling mechanism in fact if you you can write your own schedulers with easiest there is on there is a open source",
    "start": "599680",
    "end": "606040"
  },
  {
    "text": "project called blocks which lets you write your own schedule err you have got an extremely powerful CLI in fact to see",
    "start": "606040",
    "end": "613000"
  },
  {
    "text": "allies one is AWS CLI which has a easiest mode as well as ECS has its own",
    "start": "613000",
    "end": "618880"
  },
  {
    "text": "CLI called the easiest CLI in the shared responsibility model basically in ECS",
    "start": "618880",
    "end": "628840"
  },
  {
    "text": "you let the customer bring their you",
    "start": "628840",
    "end": "634240"
  },
  {
    "text": "have a as a customer you have to bring the easiest you you are in charge of",
    "start": "634240",
    "end": "641260"
  },
  {
    "text": "managing your ec2 instances you are managing your docker images your",
    "start": "641260",
    "end": "646390"
  },
  {
    "text": "instance scaling your operating system within the instance AWS actually manages",
    "start": "646390",
    "end": "652030"
  },
  {
    "text": "whatever is below this horizontal line specifically the ICS control plane is come is the one which AWS is managing in",
    "start": "652030",
    "end": "659980"
  },
  {
    "text": "forget mode the operating system and the instance scaling is also part of AWS as",
    "start": "659980",
    "end": "665770"
  },
  {
    "text": "responsibilities you don't have to bother about that these are some of the",
    "start": "665770",
    "end": "671680"
  },
  {
    "text": "customers who are using ECS this is a little dated slide we do have much more",
    "start": "671680",
    "end": "678820"
  },
  {
    "text": "than this right now for example clever tap is not yet there but ever tap uses easiest this is a",
    "start": "678820",
    "end": "685870"
  },
  {
    "text": "slide from last December now I'll go a",
    "start": "685870",
    "end": "691180"
  },
  {
    "text": "little bit on the best practices on micro services and containers first best",
    "start": "691180",
    "end": "699670"
  },
  {
    "text": "practice is to basically let AWS and your pipeline handle the changes and the",
    "start": "699670",
    "end": "706360"
  },
  {
    "text": "secrets you should use I am role for tasks",
    "start": "706360",
    "end": "711420"
  },
  {
    "text": "because your roles otherwise inherit inherent inherit the roles which was",
    "start": "711420",
    "end": "717369"
  },
  {
    "text": "given to the ec2 instance rather than that you should actually use I am roles for tasks for secret managers management",
    "start": "717369",
    "end": "725199"
  },
  {
    "text": "you should use either you should use either the parameter store or the secret",
    "start": "725199",
    "end": "733689"
  },
  {
    "text": "manager which was which is really recently released for any change you",
    "start": "733689",
    "end": "740379"
  },
  {
    "text": "should actually do it through either cloud formation or if you are doing terraform you should let those changes",
    "start": "740379",
    "end": "746319"
  },
  {
    "text": "be done by that one very important thing is that you should always practice the",
    "start": "746319",
    "end": "753759"
  },
  {
    "text": "list privilege policies so that you one basic rule of thumb would be in in",
    "start": "753759",
    "end": "760499"
  },
  {
    "text": "policies you should minimize the use of stars you should the exact privileges which",
    "start": "760499",
    "end": "769149"
  },
  {
    "text": "are needed by am role should be absolutely given to that user and more",
    "start": "769149",
    "end": "774399"
  },
  {
    "text": "than anything more than that should not be given end-to-end automation this is",
    "start": "774399",
    "end": "780370"
  },
  {
    "text": "very important so as much as automation is there it should be implemented",
    "start": "780370",
    "end": "786790"
  },
  {
    "text": "because the lesser you let users touch the pipeline it's better for you so you",
    "start": "786790",
    "end": "795040"
  },
  {
    "text": "should try to automate the code and container builds your infrastructure as a code part code patterns your",
    "start": "795040",
    "end": "801550"
  },
  {
    "text": "deployments your self-healing and security most of it is you can actually",
    "start": "801550",
    "end": "809980"
  },
  {
    "text": "automate this and you should implement the automation as soon as possible in your environment delegate to AWS with",
    "start": "809980",
    "end": "818949"
  },
  {
    "text": "higher level services because what we have seen is you as customer you don't",
    "start": "818949",
    "end": "825100"
  },
  {
    "text": "have to reinvent the wheel always and building and running fundamental services that are highly available and",
    "start": "825100",
    "end": "831629"
  },
  {
    "text": "scalable is hard unless you are a cloud provider like us so you should let us do",
    "start": "831629",
    "end": "838179"
  },
  {
    "text": "the what we call the undifferentiated I will and you can actually manage your business logic so pcs AWS already",
    "start": "838179",
    "end": "846550"
  },
  {
    "text": "provides this core services and you should you can actually use them to help",
    "start": "846550",
    "end": "852010"
  },
  {
    "text": "your help build your business logic and you can you start using them if you are",
    "start": "852010",
    "end": "858490"
  },
  {
    "text": "not already doing so this is very important from a security perspective",
    "start": "858490",
    "end": "863890"
  },
  {
    "text": "also from a prospect from a performance standpoint build small container images",
    "start": "863890",
    "end": "870690"
  },
  {
    "text": "because the larger your image is you have a large attack surface for",
    "start": "870690",
    "end": "877600"
  },
  {
    "text": "attackers to come in so there are various ways of actually getting your",
    "start": "877600",
    "end": "882630"
  },
  {
    "text": "images small one of them is a multi stage built here you should take your",
    "start": "882630",
    "end": "888340"
  },
  {
    "text": "images from a trusted base image or better is if you can take the dockerfile of a particular image from docker hub",
    "start": "888340",
    "end": "895270"
  },
  {
    "text": "and then you start building it yourself you should go for one service per",
    "start": "895270",
    "end": "901690"
  },
  {
    "text": "container and the rule of thumb should be that there should be one concern",
    "start": "901690",
    "end": "907840"
  },
  {
    "text": "which is addressed in one container and instead of using a latest or numbering",
    "start": "907840",
    "end": "914140"
  },
  {
    "text": "as your image tags you can use something like the check-in checker name or",
    "start": "914140",
    "end": "923320"
  },
  {
    "text": "something informative as the image tag for your chickens right which will give",
    "start": "923320",
    "end": "930100"
  },
  {
    "text": "you some good information decouple your services and teams and the golden rule",
    "start": "930100",
    "end": "937570"
  },
  {
    "text": "is basically you can make a change to a service and deploy it by yourself without changing anything else I think",
    "start": "937570",
    "end": "944230"
  },
  {
    "text": "the better way is to to test this is if you can in your environment make a",
    "start": "944230",
    "end": "949750"
  },
  {
    "text": "change and you need not talk to any other team about it then you have passed",
    "start": "949750",
    "end": "955600"
  },
  {
    "text": "that test so it is best better to basically have everything decoupled and",
    "start": "955600",
    "end": "960870"
  },
  {
    "text": "as independent as possible within your environment this is just a small example",
    "start": "960870",
    "end": "967390"
  },
  {
    "text": "so this is a picture of a ship getting built in one world war two times you",
    "start": "967390",
    "end": "972490"
  },
  {
    "text": "will see watertight compartments separated by separated by walls and they",
    "start": "972490",
    "end": "978820"
  },
  {
    "text": "actually helped to contain and the flood if at all the there is a breach in the",
    "start": "978820",
    "end": "985870"
  },
  {
    "text": "ship right same thing you can actually implement within your design you have",
    "start": "985870",
    "end": "991090"
  },
  {
    "text": "sqs cues between services and you have api's will throttle and retries",
    "start": "991090",
    "end": "999990"
  },
  {
    "text": "exponential retries which actually acts as a buffer between your services so",
    "start": "1000230",
    "end": "1006990"
  },
  {
    "text": "even if there is a flooding in one of in your application your cont your",
    "start": "1006990",
    "end": "1013230"
  },
  {
    "text": "application continues to run in a degraded mode but there will be nothing",
    "start": "1013230",
    "end": "1019530"
  },
  {
    "text": "like a complete failure right there are",
    "start": "1019530",
    "end": "1025020"
  },
  {
    "text": "some simple patterns here so according to the micro services paradigm every",
    "start": "1025020",
    "end": "1030420"
  },
  {
    "text": "service should have its own data store and if it happens that you both - there",
    "start": "1030420",
    "end": "1038670"
  },
  {
    "text": "are two services which needs to be talking to assess they're the same database what you can do is you can",
    "start": "1038670",
    "end": "1044939"
  },
  {
    "text": "actually introduce a service which talks to this database and the other services actually talks to this particular",
    "start": "1044940",
    "end": "1051810"
  },
  {
    "text": "service here you can see that the password service is actually talking to this database and then into the password",
    "start": "1051810",
    "end": "1058080"
  },
  {
    "text": "database and your user service user service and authentication services are both talking to the password service so",
    "start": "1058080",
    "end": "1063720"
  },
  {
    "text": "we are not letting two services actually talk to the same database and last thing",
    "start": "1063720",
    "end": "1071070"
  },
  {
    "text": "here is you can always use something like a message queue to make things as",
    "start": "1071070",
    "end": "1076920"
  },
  {
    "text": "synchronous as much as possible this queue actually acts like a shock absorber and it brings in a song a",
    "start": "1076920",
    "end": "1086100"
  },
  {
    "text": "synchronous design in your overall architecture the here are some resources",
    "start": "1086100",
    "end": "1093150"
  },
  {
    "text": "will anyway share this once the presentation is done now over to Francis",
    "start": "1093150",
    "end": "1100050"
  },
  {
    "text": "for clever tap back",
    "start": "1100050",
    "end": "1103220"
  },
  {
    "text": "Thank You sugar hi everyone this is Francis and I'm from clever tap well we",
    "start": "1116149",
    "end": "1122909"
  },
  {
    "text": "are a mobile marketing platform that helps growth marketers essentially just",
    "start": "1122909",
    "end": "1130289"
  },
  {
    "text": "to give a give you a sense of where we are and the kind of scale that we deal with on every on a daily basis what",
    "start": "1130289",
    "end": "1137070"
  },
  {
    "text": "you're looking at is is the traffic pattern during one of these IPL matches so the times here are in UTC but if you",
    "start": "1137070",
    "end": "1145830"
  },
  {
    "text": "convert that into iced tea it's about 759 and it looks like we're doing about",
    "start": "1145830",
    "end": "1152669"
  },
  {
    "text": "five million HTTP requests per minute as reported by the load balancer a couple",
    "start": "1152669",
    "end": "1159750"
  },
  {
    "text": "of minutes later as soon as the match begins we looks like we've trip almost",
    "start": "1159750",
    "end": "1166919"
  },
  {
    "text": "doubled our traffic right at about 12 million per minute and then from there on it's all just jerky depending on what",
    "start": "1166919",
    "end": "1173909"
  },
  {
    "text": "kind of match it is who is playing and where where it isn't match so that's",
    "start": "1173909",
    "end": "1180289"
  },
  {
    "text": "that's traffic that we can predict on the left side on the right side what you can see is traffic traffic broken down",
    "start": "1180289",
    "end": "1188639"
  },
  {
    "text": "by customers so obviously the one the green is the customer with the IPL match",
    "start": "1188639",
    "end": "1194090"
  },
  {
    "text": "but there's also this red customer who shows up and and just does something out",
    "start": "1194090",
    "end": "1199830"
  },
  {
    "text": "of blue and that causes this traffic which is going down to simply spiked up",
    "start": "1199830",
    "end": "1205139"
  },
  {
    "text": "so all this is hosted on Amazon we don't have to worry about bandwidth and",
    "start": "1205139",
    "end": "1210179"
  },
  {
    "text": "scaling and getting data transfer sorted out what I want to talk to you today",
    "start": "1210179",
    "end": "1217350"
  },
  {
    "text": "about is stateful workloads on ECS so",
    "start": "1217350",
    "end": "1222440"
  },
  {
    "text": "you generally hear about containers in the in the scheme of stateless web",
    "start": "1222440",
    "end": "1230429"
  },
  {
    "text": "servers deployments are places where you get some data in from s3 or a persistent",
    "start": "1230429",
    "end": "1236669"
  },
  {
    "text": "data store you work on it and then you put it back in some persistent state but mostly these containers are stateless we",
    "start": "1236669",
    "end": "1244889"
  },
  {
    "text": "do something very very different we use these containers to to Abell stateful workloads and the",
    "start": "1244889",
    "end": "1251790"
  },
  {
    "text": "motivation behind this for us is because we have this in memory custom written",
    "start": "1251790",
    "end": "1256890"
  },
  {
    "text": "database that powers all of our platform all of the data is in is in memory and",
    "start": "1256890",
    "end": "1264800"
  },
  {
    "text": "what happens is when you run out of ma'am on the machine on an ec2 instance",
    "start": "1264800",
    "end": "1271530"
  },
  {
    "text": "the only option that we had in the past was to double the instant size to let",
    "start": "1271530",
    "end": "1278610"
  },
  {
    "text": "the customer grow and this meant that we just incurred additional costs on behalf of the customer to solve this problem we",
    "start": "1278610",
    "end": "1286410"
  },
  {
    "text": "sort of we sort of bin back and place multiple stateful containers and use ECS",
    "start": "1286410",
    "end": "1294660"
  },
  {
    "text": "to orchestrate this container container run across ec2 node so and I'm gonna go",
    "start": "1294660",
    "end": "1304590"
  },
  {
    "text": "show you a demonstration of how you do this but the basic theory behind having",
    "start": "1304590",
    "end": "1310050"
  },
  {
    "text": "a container run on a specific instance is to put and an instance attribute what",
    "start": "1310050",
    "end": "1316590"
  },
  {
    "text": "you're looking at is a customer defined or a custom instance attribute called",
    "start": "1316590",
    "end": "1323640"
  },
  {
    "text": "cluster instance identifier whose value is the is mashup between the cluster",
    "start": "1323640",
    "end": "1332160"
  },
  {
    "text": "name and the ec2 instance so the stateful customer stateful containers on",
    "start": "1332160",
    "end": "1338850"
  },
  {
    "text": "ECS bitbucket cluster that's the name of the cluster itself and the ec2 instance",
    "start": "1338850",
    "end": "1344940"
  },
  {
    "text": "it's called big bucket ec2 instance so what I told you that we we run a",
    "start": "1344940",
    "end": "1352650"
  },
  {
    "text": "customer in database I'm it's not really fun to see that in a demonstration so",
    "start": "1352650",
    "end": "1357900"
  },
  {
    "text": "what I'm going to show you today is Atlassian spit bucket for those who are not familiar with the pit bucket",
    "start": "1357900",
    "end": "1363660"
  },
  {
    "text": "Atlassian's bit at lesson has a git repository management tool very similar",
    "start": "1363660",
    "end": "1370260"
  },
  {
    "text": "to github which is hosted at on bit bucket or org and there's also the self",
    "start": "1370260",
    "end": "1377700"
  },
  {
    "text": "hosted solution they provide a docket which is hosted on hub dot on docker hub",
    "start": "1377700",
    "end": "1385840"
  },
  {
    "text": "and today we're gonna run that container as a part of the demonstration so back",
    "start": "1385840",
    "end": "1392740"
  },
  {
    "text": "to our strategy of pinning these containers into into a specific ec2 instance where your data is once you",
    "start": "1392740",
    "end": "1399490"
  },
  {
    "text": "have the instance attributes in place on an ec2 instance you set a tasks",
    "start": "1399490",
    "end": "1406210"
  },
  {
    "text": "definition to essentially you can strain it to run only on an instance where the",
    "start": "1406210",
    "end": "1414550"
  },
  {
    "text": "cluster dot instance identifier is equal to the name the the unique name that you",
    "start": "1414550",
    "end": "1420550"
  },
  {
    "text": "gave it by mashing the container at the cluster identifier and ec2 instance so",
    "start": "1420550",
    "end": "1429910"
  },
  {
    "text": "let me show you what this looks like in real life this is the ec2 application",
    "start": "1429910",
    "end": "1441460"
  },
  {
    "text": "that we're trying to sort of run straight fully on ECS it's currently",
    "start": "1441460",
    "end": "1446980"
  },
  {
    "text": "down it's not working and I'm going to show you that we've got these four ec2",
    "start": "1446980",
    "end": "1455110"
  },
  {
    "text": "instances in inside a cluster all of these instances have been added here take a look at it and obviously the the",
    "start": "1455110",
    "end": "1463980"
  },
  {
    "text": "body over here is that when I start up this task or when I start up this",
    "start": "1463980",
    "end": "1469600"
  },
  {
    "text": "container it could go randomly run on any of any one of my instances and those instances may may not have my data might",
    "start": "1469600",
    "end": "1477190"
  },
  {
    "text": "look like fresh installs so let me start it out for you this is my task",
    "start": "1477190",
    "end": "1486460"
  },
  {
    "text": "definition for the big bucket hosted product from Atlassian and there's",
    "start": "1486460",
    "end": "1492400"
  },
  {
    "text": "nothing by special about it it's a simple container that I'm saying from Gawker hub exposes a bunch of boats but",
    "start": "1492400",
    "end": "1500820"
  },
  {
    "text": "what a special about it is the constraint here which says that it must",
    "start": "1500820",
    "end": "1505960"
  },
  {
    "text": "be run where the inst where the instance attribute is cluster grand fire equals",
    "start": "1505960",
    "end": "1514420"
  },
  {
    "text": "to this long string so let me just add this up sorry the strategy in this case when",
    "start": "1514420",
    "end": "1524600"
  },
  {
    "text": "you're trying to pin containers to ec2 instances doesn't really matter because you you're running mostly one container",
    "start": "1524600",
    "end": "1531560"
  },
  {
    "text": "per instance and that you technically aren't have them across two instances but constrain is the very key here so",
    "start": "1531560",
    "end": "1540890"
  },
  {
    "text": "one of what of the starsk it tells me easiest tells me that the task is now running let's go and see what happens to our application come on still pending",
    "start": "1540890",
    "end": "1556120"
  },
  {
    "text": "running now well now there we go for a",
    "start": "1556120",
    "end": "1562190"
  },
  {
    "text": "minute I thought that wasn't going to come up so that's a Tyson spit bucket it's booting up I have created a couple",
    "start": "1562190",
    "end": "1569690"
  },
  {
    "text": "of repos in there so we can make sure that that's that's the exact weave we're on an instance where our data exists and",
    "start": "1569690",
    "end": "1576860"
  },
  {
    "text": "then we can go turn it off do some fun things along with it and see that it data consistency remains even if you try",
    "start": "1576860",
    "end": "1584000"
  },
  {
    "text": "and kill these easy to instance shut it down the task one randomly startup elsewhere so you basically are able to",
    "start": "1584000",
    "end": "1590750"
  },
  {
    "text": "tain team tasks or container to a specific instance first so booting up",
    "start": "1590750",
    "end": "1605950"
  },
  {
    "text": "there we go so I have a project called",
    "start": "1612690",
    "end": "1619320"
  },
  {
    "text": "clock formation and this is a git repository that I'm now hosting on my",
    "start": "1619320",
    "end": "1624690"
  },
  {
    "text": "own ec2 instance it's running from the tasks that we started and just like that",
    "start": "1624690",
    "end": "1632399"
  },
  {
    "text": "you take a container out of token up you can run into ourself on ec2 let's try",
    "start": "1632399",
    "end": "1640889"
  },
  {
    "text": "and play with this a little bit so we stop this container and we shut down the",
    "start": "1640889",
    "end": "1656609"
  },
  {
    "text": "ec2 host that was associated with it so",
    "start": "1656609",
    "end": "1663570"
  },
  {
    "text": "but easy to note holding my stateful data is now going off offline and my",
    "start": "1663570",
    "end": "1669690"
  },
  {
    "text": "containers down my application is bad again yeah doesn't seem to connect",
    "start": "1669690",
    "end": "1679259"
  },
  {
    "text": "anymore let's see what happens when you try and run this container without the ec2 instance that we pinned it on so",
    "start": "1679259",
    "end": "1694379"
  },
  {
    "text": "we're saying the same definition and the same cluster give me one one instance of the task running oh",
    "start": "1694379",
    "end": "1703100"
  },
  {
    "text": "that's the big right so we are feeling constrained which means that the ec2",
    "start": "1704450",
    "end": "1710850"
  },
  {
    "text": "instance that was supposed to be there is no longer available and that task is not randomly starting up on the other of",
    "start": "1710850",
    "end": "1716580"
  },
  {
    "text": "container instances that I have where data isn't present so let's go back and",
    "start": "1716580",
    "end": "1723179"
  },
  {
    "text": "turn this container back on sorry the Easter instance back on still waiting",
    "start": "1723179",
    "end": "1739889"
  },
  {
    "text": "first come up alright is the container",
    "start": "1739889",
    "end": "1747059"
  },
  {
    "text": "running is it a part of cluster already",
    "start": "1747059",
    "end": "1751580"
  },
  {
    "text": "it looks like my instance is in based on this value reported by the agent",
    "start": "1754820",
    "end": "1761759"
  },
  {
    "text": "connected true yes try and run them",
    "start": "1761759",
    "end": "1767820"
  },
  {
    "text": "again voila and now that the ec2",
    "start": "1767820",
    "end": "1777899"
  },
  {
    "text": "instance is back where your data exists the class definition seems to be happy",
    "start": "1777899",
    "end": "1783629"
  },
  {
    "text": "to run it seems to be running let's look",
    "start": "1783629",
    "end": "1788759"
  },
  {
    "text": "at our application again oh there it is back um let's see let's log in and see",
    "start": "1788759",
    "end": "1794730"
  },
  {
    "text": "if you've if you still have a repository that or it's it's gone from a container",
    "start": "1794730",
    "end": "1799860"
  },
  {
    "text": "restart my colleague here say is fingers",
    "start": "1799860",
    "end": "1805320"
  },
  {
    "text": "crossed all right",
    "start": "1805320",
    "end": "1811190"
  },
  {
    "text": "so these stateful applications that you run on ECS and the micro services that",
    "start": "1815009",
    "end": "1822299"
  },
  {
    "text": "subbu was talking about that start up really fast these are databases these",
    "start": "1822299",
    "end": "1827649"
  },
  {
    "text": "are applications that run for longer periods of time so you do genuinely take longer to booth just like as I since",
    "start": "1827649",
    "end": "1834399"
  },
  {
    "text": "bitbucket which is still booting up but we should have it in a minute or so",
    "start": "1834399",
    "end": "1840388"
  },
  {
    "text": "started what we have oh I repository still exists and the",
    "start": "1849659",
    "end": "1856779"
  },
  {
    "text": "CloudFormation thing that we set up the clock permission repository that we created still there all of our settings",
    "start": "1856779",
    "end": "1863350"
  },
  {
    "text": "are there and to log me in to it knows I am Francis so looks like we are our",
    "start": "1863350",
    "end": "1869710"
  },
  {
    "text": "persistent yes so that's it one simple",
    "start": "1869710",
    "end": "1875710"
  },
  {
    "text": "trick to lock your instances down that enables straight for workloads that have",
    "start": "1875710",
    "end": "1881470"
  },
  {
    "text": "persistent data on easy to makes it very very easy to orchestrate the stuff with",
    "start": "1881470",
    "end": "1887289"
  },
  {
    "text": "ECS let's go back so that was our",
    "start": "1887289",
    "end": "1892840"
  },
  {
    "text": "demonstration if you have and if time permits I will take questions if you",
    "start": "1892840",
    "end": "1898419"
  },
  {
    "text": "have so putting this all together how we do this is the what we've learned from",
    "start": "1898419",
    "end": "1904090"
  },
  {
    "text": "our experience is that you run one container for a task that's the standard recommendation in the docker world in",
    "start": "1904090",
    "end": "1911409"
  },
  {
    "text": "the easiest world what you do is use you only tell it to run one task the number",
    "start": "1911409",
    "end": "1917470"
  },
  {
    "text": "of tasks is always set to one because since you're locking it to a specific instance you technically cannot run to",
    "start": "1917470",
    "end": "1924070"
  },
  {
    "text": "it two tasks of the same thing and then you can run you can wrap this task",
    "start": "1924070",
    "end": "1930190"
  },
  {
    "text": "around a service so a source monitors the container health and if the",
    "start": "1930190",
    "end": "1937000"
  },
  {
    "text": "container exists exits or stops responding it can do a restart for you",
    "start": "1937000",
    "end": "1944039"
  },
  {
    "text": "so support any arbitrary configuration that",
    "start": "1944129",
    "end": "1949580"
  },
  {
    "text": "you may have so you can just tell it that I want to go hey ACS go run this command for me inside the container and",
    "start": "1949580",
    "end": "1955970"
  },
  {
    "text": "as long as that exits successfully it's all good so you were you're free to do whatever you want in that command it",
    "start": "1955970",
    "end": "1962240"
  },
  {
    "text": "could be a bash it could be whatever it could do all kinds of funky things it could take stack traces if in case of a",
    "start": "1962240",
    "end": "1970790"
  },
  {
    "text": "failing service stuff like that also",
    "start": "1970790",
    "end": "1976310"
  },
  {
    "text": "what it does is that you no longer have to wake up in the middle of the night to restart a container that just you can",
    "start": "1976310",
    "end": "1982400"
  },
  {
    "text": "hand it off to ECS what we've what we've thought is very very important is that",
    "start": "1982400",
    "end": "1989180"
  },
  {
    "text": "you when you're doing something like this you have to version control and",
    "start": "1989180",
    "end": "1994310"
  },
  {
    "text": "manage all this configuration these tasks and the little properties that go with them and the placement strategies",
    "start": "1994310",
    "end": "2000220"
  },
  {
    "text": "constraints from cloud formation which is version control without that a kind",
    "start": "2000220",
    "end": "2009010"
  },
  {
    "text": "of easy to get lost in the whole thing what changed when what mapping was",
    "start": "2009010",
    "end": "2014380"
  },
  {
    "text": "changed what container was moved from any easy to host to another easy to host all of that can become really daunting",
    "start": "2014380",
    "end": "2020680"
  },
  {
    "text": "if you're not if you're not very careful so our tool for resource provisioning is cloud formation and we recommend that",
    "start": "2020680",
    "end": "2027720"
  },
  {
    "text": "you use either clock formation order form whatever floats your boat to keep track of changes that you make",
    "start": "2027720",
    "end": "2034570"
  },
  {
    "text": "into these containers and easy ECS the other thing that we realized is",
    "start": "2034570",
    "end": "2041260"
  },
  {
    "text": "that you would imagine that you could just shut down a container instance change this instance type and bring it",
    "start": "2041260",
    "end": "2047380"
  },
  {
    "text": "back up but if you do that the easiest agent goes completely nuts and if kind of spinning out in the lock",
    "start": "2047380",
    "end": "2056050"
  },
  {
    "text": "that you gotta go back and register it as the same instance type that you wanted to that you ensure you register",
    "start": "2056050",
    "end": "2061780"
  },
  {
    "text": "it with so if you if you ever want to change your container instance you have to move your data or take that volume",
    "start": "2061780",
    "end": "2068050"
  },
  {
    "text": "attach it to a new ec2 instance and change update your placement constraints to run it on a different box by the way",
    "start": "2068050",
    "end": "2076658"
  },
  {
    "text": "if you're if you're passionate about systems engineering automation and infrastructure as code drop a slide with basic Mumbai and are",
    "start": "2076659",
    "end": "2085149"
  },
  {
    "text": "available at jobs at levitt.com back to",
    "start": "2085150",
    "end": "2094780"
  },
  {
    "text": "you sir go",
    "start": "2094780",
    "end": "2097170"
  },
  {
    "text": "am i order",
    "start": "2113660",
    "end": "2116500"
  },
  {
    "text": "yeah thanks Francis so we will do some other customer case studies so first in",
    "start": "2119360",
    "end": "2129390"
  },
  {
    "text": "that will cover a customer called GoPro so group GoPro makes this amazing",
    "start": "2129390",
    "end": "2137550"
  },
  {
    "text": "cameras and so this is the infrastructure they have on ECS they use",
    "start": "2137550",
    "end": "2145380"
  },
  {
    "text": "s3 SQS ECS and elastic transcoder consists of more than 40 services in",
    "start": "2145380",
    "end": "2152850"
  },
  {
    "text": "production the their ECS infrastructure consists of 40 services in production that processes up to around 500 thousand",
    "start": "2152850",
    "end": "2160100"
  },
  {
    "text": "api requests for a minute and moving",
    "start": "2160100",
    "end": "2165150"
  },
  {
    "text": "batch to easiest took them under a quarter and moving to ECS reduced the",
    "start": "2165150",
    "end": "2173280"
  },
  {
    "text": "ec2 footprint by 70% if you remember my one of my earlier topics I covered if",
    "start": "2173280",
    "end": "2180720"
  },
  {
    "text": "you if you are really interested in actually bringing down your ec2 cost you might actually do bin packing of your",
    "start": "2180720",
    "end": "2187260"
  },
  {
    "text": "containers and that can drastically reduce your number of ec2 instances you use to manage your workloads I will give",
    "start": "2187260",
    "end": "2195720"
  },
  {
    "text": "you links for the talks which GoPro has done in reinvent you can go and actually",
    "start": "2195720",
    "end": "2201960"
  },
  {
    "text": "listen to it and have a look at their architecture we are just going through the architectural advantages they they",
    "start": "2201960",
    "end": "2211140"
  },
  {
    "text": "took when they came to easiest so they didn't need to build or operate a",
    "start": "2211140",
    "end": "2216360"
  },
  {
    "text": "container Orchestrator or queuing service this was already provided in form of sqs and EC EC s and the use of",
    "start": "2216360",
    "end": "2224610"
  },
  {
    "text": "s3 and elastic transcoder for the delegates their scaling and operational challenges to ask AWS so that is the",
    "start": "2224610",
    "end": "2232080"
  },
  {
    "text": "this is the undifferentiated heavy lifting I was talking about if you have",
    "start": "2232080",
    "end": "2238380"
  },
  {
    "text": "things which you can offload to easy AWS you can always do that and you can",
    "start": "2238380",
    "end": "2243420"
  },
  {
    "text": "actually concentrate on your core business and their architecture",
    "start": "2243420",
    "end": "2249039"
  },
  {
    "text": "is built with a synchronous pattern where customer requests and edits are notified when done so so so they did",
    "start": "2249039",
    "end": "2257619"
  },
  {
    "text": "actually decouple the app and API from for the batch processing the",
    "start": "2257619",
    "end": "2264599"
  },
  {
    "text": "architecture is well described in one of the links I will be giving further in",
    "start": "2264599",
    "end": "2269769"
  },
  {
    "text": "this session and as I described earlier also the queue gives them a shock observer and time into scale so in a way",
    "start": "2269769",
    "end": "2278949"
  },
  {
    "text": "they basically made this whole thing a synchronous by using queues between the",
    "start": "2278949",
    "end": "2284559"
  },
  {
    "text": "services some of the lessons gopro learned was basically leave a buffer of",
    "start": "2284559",
    "end": "2292150"
  },
  {
    "text": "around 20 percent capacity when auto scaling up or down based on the cpu reservation this is extremely important",
    "start": "2292150",
    "end": "2298989"
  },
  {
    "text": "because containers can boot can come up pretty fast so you might have a",
    "start": "2298989",
    "end": "2304239"
  },
  {
    "text": "situation where your service is getting auto scale at a rate which is much higher than your container instance that",
    "start": "2304239",
    "end": "2312339"
  },
  {
    "text": "is your ec2 auto scaling rate so you might have to keep it might be a good",
    "start": "2312339",
    "end": "2317499"
  },
  {
    "text": "practice to keep a 20 percent buffer in your ec2 you know is easy to fleet just",
    "start": "2317499",
    "end": "2324489"
  },
  {
    "text": "that if your services auto scale at a higher rate they will have a easy to",
    "start": "2324489",
    "end": "2329979"
  },
  {
    "text": "instance to be hosted on execute the terraform to manage the cluster from a",
    "start": "2329979",
    "end": "2335769"
  },
  {
    "text": "control pipeline rather than from a developer laptop so that is this is also something we covered the the idea here",
    "start": "2335769",
    "end": "2343779"
  },
  {
    "text": "is to manage the cluster through something like they were using terraform",
    "start": "2343779",
    "end": "2349869"
  },
  {
    "text": "you can use CloudFormation template also here so manage it through CloudFormation template other than each individual",
    "start": "2349869",
    "end": "2355929"
  },
  {
    "text": "going and changing a part of the pipeline on their own and because becomes because it becomes extremely",
    "start": "2355929",
    "end": "2361509"
  },
  {
    "text": "difficult to track those changes last thing i think one of the lessons they",
    "start": "2361509",
    "end": "2367449"
  },
  {
    "text": "learned was decoupled the terraform infrastructure as a code sections to",
    "start": "2367449",
    "end": "2372969"
  },
  {
    "text": "limit the blast radius this is extremely important you always should try to isolate failure zones so that if there",
    "start": "2372969",
    "end": "2380859"
  },
  {
    "text": "is one failure should not bring down the whole application even if it might actually",
    "start": "2380859",
    "end": "2388000"
  },
  {
    "text": "lead to your application running in a degraded mode for some time but still",
    "start": "2388000",
    "end": "2394060"
  },
  {
    "text": "there will be no complete failure and you can actually go and repair your failure so restricting the blast radius",
    "start": "2394060",
    "end": "2402340"
  },
  {
    "text": "to a small change is extremely important and these are some of the videos and",
    "start": "2402340",
    "end": "2407650"
  },
  {
    "text": "reference links we'll be sharing as part of this presentation next case study is",
    "start": "2407650",
    "end": "2414250"
  },
  {
    "text": "Expedia Expedia is a well-known company and they're one of our largest",
    "start": "2414250",
    "end": "2421020"
  },
  {
    "text": "referenceable customers who have and this is a little dated figure so they",
    "start": "2421020",
    "end": "2427390"
  },
  {
    "text": "had around 1110 applications across 2600",
    "start": "2427390",
    "end": "2433450"
  },
  {
    "text": "DCs services they had around 13,000 containers across 860 ec2 instances",
    "start": "2433450",
    "end": "2441460"
  },
  {
    "text": "these are the container instances and all total they had around 13 ECS",
    "start": "2441460",
    "end": "2448030"
  },
  {
    "text": "clusters spread across five regions and they had 524 deployers per day to do the",
    "start": "2448030",
    "end": "2457750"
  },
  {
    "text": "testing they have this platform called primer which makes it very easy for the",
    "start": "2457750",
    "end": "2465070"
  },
  {
    "text": "developers to generate micro services and then deploy and it allows you to do",
    "start": "2465070",
    "end": "2472180"
  },
  {
    "text": "control changes and deployments and consistently and it allows you to",
    "start": "2472180",
    "end": "2478660"
  },
  {
    "text": "generate consistently operable services right lessons which AWS and Expedia",
    "start": "2478660",
    "end": "2487180"
  },
  {
    "text": "jointly learned during their operation with ECS was that you should be",
    "start": "2487180",
    "end": "2492910"
  },
  {
    "text": "cognizant of your limits because if you are not you if you do not know that you",
    "start": "2492910",
    "end": "2500650"
  },
  {
    "text": "are about to hit a service limit it can be dangerous because typically service limit increase might take you some time",
    "start": "2500650",
    "end": "2506860"
  },
  {
    "text": "and that might hinder the for example auto scaling of a service so you should",
    "start": "2506860",
    "end": "2512740"
  },
  {
    "text": "be aware of your limits at all time especially the ACS number of services plus our cluster pcs",
    "start": "2512740",
    "end": "2519870"
  },
  {
    "text": "container instance registration rate or your ec2 API throttling be aware of auto",
    "start": "2519870",
    "end": "2527580"
  },
  {
    "text": "scaling thrashing this is also very important so what so so one analogy you",
    "start": "2527580",
    "end": "2534930"
  },
  {
    "text": "can draw here is you want your auto scaling to be like a sprinkler when",
    "start": "2534930",
    "end": "2540600"
  },
  {
    "text": "there is a fire you want your sprinkler to be switched on immediately but when",
    "start": "2540600",
    "end": "2546120"
  },
  {
    "text": "the per fire is gone the sprinkler should immediately switch off to basically avoid a situation of flooding",
    "start": "2546120",
    "end": "2553850"
  },
  {
    "text": "exactly that's what was happening in Expedia for a while they would actually",
    "start": "2553850",
    "end": "2561920"
  },
  {
    "text": "scale up on a certain parameter so how",
    "start": "2561920",
    "end": "2567540"
  },
  {
    "text": "it is described here would see it scale up due to high memory reservation and then immediately they have to scale back",
    "start": "2567540",
    "end": "2574200"
  },
  {
    "text": "down due to low CPU reservation so it took them some trial and error to figure out that sweet spot right so this this",
    "start": "2574200",
    "end": "2584870"
  },
  {
    "text": "better if this stage is attended earlier in the process you figure out a sweet",
    "start": "2584870",
    "end": "2591090"
  },
  {
    "text": "spot for your scale out and scale in thresholds right so it's extremely",
    "start": "2591090",
    "end": "2596790"
  },
  {
    "text": "important to have that ready and and links to the videos which we have with",
    "start": "2596790",
    "end": "2604800"
  },
  {
    "text": "Expedia are here they have spoken in our arraignment and the case study is also",
    "start": "2604800",
    "end": "2611370"
  },
  {
    "text": "there along with the lessons and their architectures so in summary how to",
    "start": "2611370",
    "end": "2618390"
  },
  {
    "text": "operate containerize micro services at scale use I am rolls you can use secret",
    "start": "2618390",
    "end": "2625290"
  },
  {
    "text": "managers like the recently released secret manager or parameters store form",
    "start": "2625290",
    "end": "2632460"
  },
  {
    "text": "a system or you can use a she coughs vault but you must use as a secret",
    "start": "2632460",
    "end": "2638970"
  },
  {
    "text": "manager to manage your secrets delegate to AWS for higher level service you don't have to reinvent the will offload",
    "start": "2638970",
    "end": "2647360"
  },
  {
    "text": "tasks which are not directly related to your core business logic to AWS let AWS handle it build",
    "start": "2647360",
    "end": "2655930"
  },
  {
    "text": "small and secure container images extremely important you should have your images coming from a trusted source",
    "start": "2655930",
    "end": "2662950"
  },
  {
    "text": "you should have container images as small as possible because that affects your cold-start latency if you have a",
    "start": "2662950",
    "end": "2671079"
  },
  {
    "text": "big image it takes more time to pull it from the registry and get started you should have small images not only",
    "start": "2671079",
    "end": "2677470"
  },
  {
    "text": "that your attack surface reduces decouple your services and teams very",
    "start": "2677470",
    "end": "2683230"
  },
  {
    "text": "important the part teams is extremely important so that you don't have to if",
    "start": "2683230",
    "end": "2691809"
  },
  {
    "text": "you want to change a particular service the team related to that service should",
    "start": "2691809",
    "end": "2697779"
  },
  {
    "text": "not have to ask any other team before or after doing that change it should be",
    "start": "2697779",
    "end": "2703599"
  },
  {
    "text": "fairly independent and invest in end-to-end automation this goes a long",
    "start": "2703599",
    "end": "2709180"
  },
  {
    "text": "way as much as automation as you can bring the less human intervention is",
    "start": "2709180",
    "end": "2716049"
  },
  {
    "text": "there in your whole pipeline it is less prone to problems and very important",
    "start": "2716049",
    "end": "2722769"
  },
  {
    "text": "that you should make it easy for your team to do the right thing so as you",
    "start": "2722769",
    "end": "2729880"
  },
  {
    "text": "should make your team aware of the best practices for container deployment and",
    "start": "2729880",
    "end": "2735430"
  },
  {
    "text": "easiest management and it should be quite easy for them they should know what a good thing looks like for example",
    "start": "2735430",
    "end": "2742359"
  },
  {
    "text": "if you had if they are deploying their micro services and they should know how the VPC should look like right and it",
    "start": "2742359",
    "end": "2749980"
  },
  {
    "text": "should be extremely easy to for them to go and find how a good thing looks and",
    "start": "2749980",
    "end": "2755619"
  },
  {
    "text": "it should be easy for them to deploy it deploy and implement as well so get",
    "start": "2755619",
    "end": "2760750"
  },
  {
    "text": "started today it's very easy to get started either on ECAs or on forget we",
    "start": "2760750",
    "end": "2767769"
  },
  {
    "text": "have the tools and resources that can help you out one of our colleagues Nathan Nathan Peck",
    "start": "2767769",
    "end": "2777819"
  },
  {
    "text": "has a site called awesome ICS which is which has a lot of",
    "start": "2777819",
    "end": "2784150"
  },
  {
    "text": "links and videos and tutorials for you to get started you don't have to do it",
    "start": "2784150",
    "end": "2791260"
  },
  {
    "text": "all at once so pick up one area or set of teams to decouple and containerize",
    "start": "2791260",
    "end": "2797140"
  },
  {
    "text": "and get started today so that's it from my end",
    "start": "2797140",
    "end": "2802720"
  },
  {
    "text": "any questions yeah so rouhani I'll ask her to read out questions and we cannot",
    "start": "2802720",
    "end": "2808600"
  },
  {
    "text": "answer all of them but some of them we can definitely try to answer yes so we",
    "start": "2808600",
    "end": "2815020"
  },
  {
    "text": "have a lot of questions on the side so we will try and pick and choose some of them with the time remaining the first",
    "start": "2815020",
    "end": "2822220"
  },
  {
    "text": "question would be I think someone missed out the start so we can answer this quickly do you recommend to move EC is",
    "start": "2822220",
    "end": "2829570"
  },
  {
    "text": "only for you know large applications based on microcircuit lecture or even",
    "start": "2829570",
    "end": "2835510"
  },
  {
    "text": "for small web applications can move releases and APs and what's the advantages",
    "start": "2835510",
    "end": "2841830"
  },
  {
    "text": "okay so we have customers who are running huge applications on ECS as well",
    "start": "2841830",
    "end": "2847900"
  },
  {
    "text": "as small applications on e CS as well but by huge applications I don't mean a",
    "start": "2847900",
    "end": "2854530"
  },
  {
    "text": "container with image of 1 1 or 2 GB you",
    "start": "2854530",
    "end": "2859660"
  },
  {
    "text": "should ideally you should always break down containers in applications into",
    "start": "2859660",
    "end": "2865180"
  },
  {
    "text": "smaller containers or services and then deploy it and try to make it try to",
    "start": "2865180",
    "end": "2873330"
  },
  {
    "text": "accommodate only one a concern or one functionality within a container so ECS",
    "start": "2873330",
    "end": "2881530"
  },
  {
    "text": "is a means of running your containers your docker containers efficiently as",
    "start": "2881530",
    "end": "2887350"
  },
  {
    "text": "long as you have a docker container we can run it as far as best practices go",
    "start": "2887350",
    "end": "2893230"
  },
  {
    "text": "you should restrict the amount of functionality you put in a container all also remember that the container",
    "start": "2893230",
    "end": "2900130"
  },
  {
    "text": "lifecycle should be tied tightly to the application lifecycle that means when",
    "start": "2900130",
    "end": "2907450"
  },
  {
    "text": "the application has to stop the container cannot also stop if you put more than one application in a container",
    "start": "2907450",
    "end": "2913450"
  },
  {
    "text": "it might happen that one of them has stopped but the container cannot stop because there are others which are still",
    "start": "2913450",
    "end": "2919420"
  },
  {
    "text": "running thanks for the answer ok so how do you",
    "start": "2919420",
    "end": "2928030"
  },
  {
    "text": "make sure that when you are scaling down a service task that it doesn't get any",
    "start": "2928030",
    "end": "2933850"
  },
  {
    "text": "requests to process just before ski termination so how do you ensure the draining of that task",
    "start": "2933850",
    "end": "2939940"
  },
  {
    "text": "itself so in ECS when you actually mark a container instance for draining",
    "start": "2939940",
    "end": "2947250"
  },
  {
    "text": "automatically no new tasks will be actually she dueled on that a container instance ECS control plane makes sure",
    "start": "2947250",
    "end": "2956320"
  },
  {
    "text": "that all tasks are going to the instances which are in the known non",
    "start": "2956320",
    "end": "2963010"
  },
  {
    "text": "draining status and there is a very nice blog on automating your draining",
    "start": "2963010",
    "end": "2968530"
  },
  {
    "text": "container instances where you can use a lambda to make sure that a container",
    "start": "2968530",
    "end": "2974440"
  },
  {
    "text": "instance has completely drained and this can be this lambda can be tied to a lifecycle hook",
    "start": "2974440",
    "end": "2980740"
  },
  {
    "text": "of the auto scaling group and once it is completely drained it can actually tell",
    "start": "2980740",
    "end": "2986410"
  },
  {
    "text": "the auto scaling group to terminate the instance completely great I think this",
    "start": "2986410",
    "end": "2994480"
  },
  {
    "text": "question would be for Francis is that a good idea to run a database inside according patina we have massive massive",
    "start": "2994480",
    "end": "3004200"
  },
  {
    "text": "amounts of data that we sort of put inside a container but ours is a",
    "start": "3004200",
    "end": "3011340"
  },
  {
    "text": "customer in database or a data store and I think there's a shift with what's",
    "start": "3011340",
    "end": "3017190"
  },
  {
    "text": "happening you see a databases is a something that you would deploy once and",
    "start": "3017190",
    "end": "3022200"
  },
  {
    "text": "then forget about it for years but in our case this is the core of our business so we have incremental updates",
    "start": "3022200",
    "end": "3028650"
  },
  {
    "text": "to the database going quite often which is why it makes sense for us to deploy",
    "start": "3028650",
    "end": "3034260"
  },
  {
    "text": "this as easy as on as containers in easiest okay thanks Francis I think",
    "start": "3034260",
    "end": "3046290"
  },
  {
    "text": "there's one question which may not be in the context but it's a question is that I've been seeing can you explain one difference between",
    "start": "3046290",
    "end": "3052740"
  },
  {
    "text": "ECS in ETS and why would we choose one or the other",
    "start": "3052740",
    "end": "3058369"
  },
  {
    "text": "both are great container orchestration systems both can help you running your",
    "start": "3058369",
    "end": "3068040"
  },
  {
    "text": "container docker containers eks is a managed kubernetes service eks lets you",
    "start": "3068040",
    "end": "3077070"
  },
  {
    "text": "run your containers on a kubernetes cluster we manage the control plane as",
    "start": "3077070",
    "end": "3084450"
  },
  {
    "text": "we are doing for ECS ECS is something",
    "start": "3084450",
    "end": "3090000"
  },
  {
    "text": "which came out from AWS in the year 2004 15 and we have actually brought in a lot",
    "start": "3090000",
    "end": "3095820"
  },
  {
    "text": "of resources a lot of you know innovation to the platform case is half",
    "start": "3095820",
    "end": "3103080"
  },
  {
    "text": "of the trunk pure kubernetes experience just that we are managing the control",
    "start": "3103080",
    "end": "3108270"
  },
  {
    "text": "plane for you as far as running your workloads there is not much difference both can run your",
    "start": "3108270",
    "end": "3115590"
  },
  {
    "text": "workloads quite efficiently and as a user should not be much of a difference",
    "start": "3115590",
    "end": "3122400"
  },
  {
    "text": "to you in fact eks is also quite soon in to be integrated with forget which would",
    "start": "3122400",
    "end": "3128970"
  },
  {
    "text": "let you run eks in forget mode also so from a user point of view not much of a",
    "start": "3128970",
    "end": "3137220"
  },
  {
    "text": "difference but yes there are some use cases where you might have to use a case for example if you have an on-prem",
    "start": "3137220",
    "end": "3144770"
  },
  {
    "text": "workload since kubernetes can be running on your on-prem infrastructure also it",
    "start": "3144770",
    "end": "3152820"
  },
  {
    "text": "might be easier for you to move to eks rather than easiest if you already have",
    "start": "3152820",
    "end": "3158040"
  },
  {
    "text": "a workload running on a kubernetes running on on-premise thanks so I think",
    "start": "3158040",
    "end": "3167160"
  },
  {
    "text": "that also answers the question about fog it but if you have anything to add about fog Utley a lot of people asking about",
    "start": "3167160",
    "end": "3174660"
  },
  {
    "text": "how does fog it fit into the ACS in the case would your forget is a pretty",
    "start": "3174660",
    "end": "3181080"
  },
  {
    "text": "interesting addition to our container services forget is somewhere in between",
    "start": "3181080",
    "end": "3186839"
  },
  {
    "text": "your completely server less implementation of micro services versus your containerized implementation of",
    "start": "3186839",
    "end": "3193800"
  },
  {
    "text": "micro services lets you let's you not worry about your container instances",
    "start": "3193800",
    "end": "3201930"
  },
  {
    "text": "or the ec2 instances at all because you as a user are only responsible for your",
    "start": "3201930",
    "end": "3209730"
  },
  {
    "text": "docker images which you bring to our platform and it first of all gives you",
    "start": "3209730",
    "end": "3214920"
  },
  {
    "text": "the one less thing to worry about second it second is you don't have to",
    "start": "3214920",
    "end": "3220500"
  },
  {
    "text": "worry about auto scaling your underlying ec2 instances at all it almost gives you an unlimited playing field for your",
    "start": "3220500",
    "end": "3227820"
  },
  {
    "text": "service to be auto scaled so just to elaborate a little bit on that you have",
    "start": "3227820",
    "end": "3234570"
  },
  {
    "text": "two types of auto scaling in a CX cluster you have your auto scaling for your ec2 instances as well as you have",
    "start": "3234570",
    "end": "3242250"
  },
  {
    "text": "auto scale for your services in faregates case we don't we don't you don't have to manage",
    "start": "3242250",
    "end": "3250680"
  },
  {
    "text": "the auto-scaling of the easy two instances at all you have to just manage the auto scaling of the auto scaling of",
    "start": "3250680",
    "end": "3259830"
  },
  {
    "text": "the service who which constitutes of your daughter images not only that you",
    "start": "3259830",
    "end": "3265350"
  },
  {
    "text": "can be rest assured that your services are always running on the latest ECS",
    "start": "3265350",
    "end": "3274080"
  },
  {
    "text": "optimized AMI and that way they are secured there will be no backdoor entry to those",
    "start": "3274080",
    "end": "3280250"
  },
  {
    "text": "instances which you might have missed when you are managing your own cluster and so these are the basic things which",
    "start": "3280250",
    "end": "3290550"
  },
  {
    "text": "forget brings not only that there is a difference in the pricing model also in forget which argue for the the compute",
    "start": "3290550",
    "end": "3299880"
  },
  {
    "text": "resources your container users rather than letting you pay for the complete",
    "start": "3299880",
    "end": "3306300"
  },
  {
    "text": "cluster in ECS also we don't charge you for the control plane at all but you have to pay for your ec2 instances even",
    "start": "3306300",
    "end": "3312990"
  },
  {
    "text": "if your ec2 instances are not optimally utilized but in forget you have the",
    "start": "3312990",
    "end": "3319770"
  },
  {
    "text": "option of paying just for the CPU cycles and the memory you use for your contents",
    "start": "3319770",
    "end": "3327320"
  },
  {
    "text": "Wow subbu you're actually anticipating the questions here so that's nice you",
    "start": "3327320",
    "end": "3332850"
  },
  {
    "text": "also answered the price perspective over here I think the next question last",
    "start": "3332850",
    "end": "3340020"
  },
  {
    "text": "question yes yeah so that would be for maybe Frances can you help us few use",
    "start": "3340020",
    "end": "3347520"
  },
  {
    "text": "cases maybe a couple of use cases related to automation on this topic and how it has helped you so our primary",
    "start": "3347520",
    "end": "3356100"
  },
  {
    "text": "tool for automating all of this is cloud formation so it's all immutable there is",
    "start": "3356100",
    "end": "3363480"
  },
  {
    "text": "no configuration management if there's anything we want to do inside the ME we choose to use curl formation in it which",
    "start": "3363480",
    "end": "3371280"
  },
  {
    "text": "does a basic set up if there's anything that's required but mostly this is all",
    "start": "3371280",
    "end": "3376890"
  },
  {
    "text": "doc rised the applications environment is inside the container and the ec2 instance just becomes a unit of compute",
    "start": "3376890",
    "end": "3384510"
  },
  {
    "text": "we truly don't care about it so much so whatever there is to configure in",
    "start": "3384510",
    "end": "3391050"
  },
  {
    "text": "there we would bake it into the AME and then just have the ME run from cloud by",
    "start": "3391050",
    "end": "3397170"
  },
  {
    "text": "ECS and and all of this configuration again is put together with cloud formation this is how we track changes",
    "start": "3397170",
    "end": "3403620"
  },
  {
    "text": "this is how we make any change within our platform nothing we never go into the console in",
    "start": "3403620",
    "end": "3409080"
  },
  {
    "text": "fact for us at clever tap we don't even have the right access into the console all we can do is certain start/stop",
    "start": "3409080",
    "end": "3416490"
  },
  {
    "text": "tasks kind of things but we can't change anything fundamental air within the aw",
    "start": "3416490",
    "end": "3422400"
  },
  {
    "text": "structure without having to go through cloud formation get it reviewed and then deploy to our coal pipeline thanks for",
    "start": "3422400",
    "end": "3433500"
  },
  {
    "text": "that Francis and Shamu and thank you everyone for attending this webinar we",
    "start": "3433500",
    "end": "3438750"
  },
  {
    "text": "definitely have a recording available on our website and we'll have a follow-up on that",
    "start": "3438750",
    "end": "3443940"
  },
  {
    "text": "theta so thank you guys have a good day",
    "start": "3443940",
    "end": "3448940"
  }
]