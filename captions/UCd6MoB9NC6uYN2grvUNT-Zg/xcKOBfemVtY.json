[
  {
    "start": "0",
    "end": "180000"
  },
  {
    "text": "hi good evening I'm uh I'm mark broker from the from amazon web services I'm a",
    "start": "0",
    "end": "7379"
  },
  {
    "text": "principal engineer with the IOT and answer verlis organizations and today's",
    "start": "7379",
    "end": "13170"
  },
  {
    "text": "talk is a bit of a crossover of those two are of service which is you know in",
    "start": "13170",
    "end": "18330"
  },
  {
    "text": "pendle or lambda which is is a key part of our our service product and IOT with",
    "start": "18330",
    "end": "24210"
  },
  {
    "text": "with green grass thank you for joining me instead of going to the pub crawl I'm",
    "start": "24210",
    "end": "30750"
  },
  {
    "text": "going to try and keep this keep this light and interesting and entertaining for for all of you although we will be",
    "start": "30750",
    "end": "36450"
  },
  {
    "text": "diving deep into some code in some of the technology behind green grass over the course of the next hour um what I'm",
    "start": "36450",
    "end": "44160"
  },
  {
    "text": "trying to convey over the course of this talk is I that with green grass we've",
    "start": "44160",
    "end": "50520"
  },
  {
    "text": "introduced an exciting new thing which is extending the lambda programming",
    "start": "50520",
    "end": "55710"
  },
  {
    "text": "model outside the data center into essentially everywhere by putting green",
    "start": "55710",
    "end": "63570"
  },
  {
    "text": "grass on to IOT devices we can take lambda into your home into factories in",
    "start": "63570",
    "end": "71010"
  },
  {
    "text": "two minds into I you know warehouses and",
    "start": "71010",
    "end": "76229"
  },
  {
    "text": "fulfillment centers and onto farms and into all of these places that it just wasn't possible before and for those of",
    "start": "76229",
    "end": "83460"
  },
  {
    "text": "you who heard John two rows talk today would have heard about the three laws of green grass that made us think about",
    "start": "83460",
    "end": "89610"
  },
  {
    "text": "this this talk is a very different look at that this talk is a deep dive into some of the code and some of the",
    "start": "89610",
    "end": "97170"
  },
  {
    "text": "architecture that you can build with green grass and build most importantly to me across both green grass and the",
    "start": "97170",
    "end": "104790"
  },
  {
    "text": "cloud so it's not just about programming on devices it's not just about programming in the cloud it's about",
    "start": "104790",
    "end": "111479"
  },
  {
    "text": "having a single model that allows you to program both devices and the cloud and",
    "start": "111479",
    "end": "117329"
  },
  {
    "text": "once you've learned one you can apply that in both places and I think it's extremely powerful so the next however",
    "start": "117329",
    "end": "125369"
  },
  {
    "text": "long this takes probably 40 minutes or so we're going to design a single architecture spanning devices in the",
    "start": "125369",
    "end": "131190"
  },
  {
    "text": "cloud I'm gonna work through a fairly artificial example but a fairly real-world example and and show how you",
    "start": "131190",
    "end": "139910"
  },
  {
    "text": "would build a real system out of green grass we're going to look at some of the code for lambda functions both in the",
    "start": "139910",
    "end": "146870"
  },
  {
    "text": "cloud and on AWS green grass and I'm going to try and highlight some of some",
    "start": "146870",
    "end": "152150"
  },
  {
    "text": "of the important bits of the API and important bits of the capability that we've built into green grass we're going",
    "start": "152150",
    "end": "160100"
  },
  {
    "text": "to we're going to work through the example architecture and why we made these architectural decisions and I'm",
    "start": "160100",
    "end": "166010"
  },
  {
    "text": "going to show a lot of Python code and I've chosen Python on both sides for for",
    "start": "166010",
    "end": "172310"
  },
  {
    "text": "this example although the cloud parts are you can definitely build equivalently in a node or in Java",
    "start": "172310",
    "end": "180820"
  },
  {
    "start": "180000",
    "end": "345000"
  },
  {
    "text": "support one let's let's take a look at what we're building so my world has has",
    "start": "180820",
    "end": "187670"
  },
  {
    "text": "two places it has a has a building on the left hand side and this building in",
    "start": "187670",
    "end": "194810"
  },
  {
    "text": "this this example is probably a factory or a warehouse and inside this factory",
    "start": "194810",
    "end": "200120"
  },
  {
    "text": "or warehouse there's a fleet of sensors and and here I've you know here I've got 12 sensors but it could be you know",
    "start": "200120",
    "end": "206510"
  },
  {
    "text": "hundreds or even thousands of senses and these sensors are the green grass devices these are small low powered",
    "start": "206510",
    "end": "213620"
  },
  {
    "text": "classical IOT devices they're going to run the AWS sdk and an interface with",
    "start": "213620",
    "end": "219440"
  },
  {
    "text": "green grass and also in the same location is a green grass call and and",
    "start": "219440",
    "end": "226250"
  },
  {
    "text": "this is slightly more capable piece of hardware you know something of the of the Raspberry Pi size or or potentially",
    "start": "226250",
    "end": "234320"
  },
  {
    "text": "bigger and and again as you know is John highlighted in his talk we've set a minimum size for green grasses green",
    "start": "234320",
    "end": "241340"
  },
  {
    "text": "grass core but we don't believe there's a maximum size we think that can scale up to where you know any piece of",
    "start": "241340",
    "end": "246620"
  },
  {
    "text": "hardware you want to run it on and then on the other side of the architecture we have the have the AWS cloud and here I'm",
    "start": "246620",
    "end": "254510"
  },
  {
    "text": "going to combine for different AWS products and I'll add a few more as we go along i'm going to use AWS IOT as a",
    "start": "254510",
    "end": "262460"
  },
  {
    "text": "way of getting the messages from my green grass or into into the cloud then when those",
    "start": "262460",
    "end": "269759"
  },
  {
    "text": "messages arrive I'm going to trigger a AWS lambda function so this is the this is the cloud side lambda I talked about",
    "start": "269759",
    "end": "276479"
  },
  {
    "text": "the introduction of the talk and then i'm going to use SNS so let me talk a little bit about about what this example",
    "start": "276479",
    "end": "283620"
  },
  {
    "text": "is the example i want to build here is a notification for a human when something",
    "start": "283620",
    "end": "290849"
  },
  {
    "text": "interesting happens with this fleet of sensors and in this case i'm going to",
    "start": "290849",
    "end": "297960"
  },
  {
    "text": "i'm gonna highlight what green grass can do by saying that some of these sensors or temperature sensors they're there",
    "start": "297960",
    "end": "303599"
  },
  {
    "text": "they're smart thermometers and some of these temperatures are humidity sensors and what i want to alarm on and what I",
    "start": "303599",
    "end": "310379"
  },
  {
    "text": "want to tell a human about is when the combination of temperature and humidity",
    "start": "310379",
    "end": "315870"
  },
  {
    "text": "crossed certain thresholds at the same time and those of you who ran big facilities will know that sometimes when",
    "start": "315870",
    "end": "322259"
  },
  {
    "text": "temperature drops and humidity Rises condensation can form and that can be bad for product could be bad for",
    "start": "322259",
    "end": "328289"
  },
  {
    "text": "electronics can be bad for all sorts of reasons so in this example I'm going to grow through building something will",
    "start": "328289",
    "end": "334169"
  },
  {
    "text": "tell the human via SNS so that could go to mobile push I could go to SMS it",
    "start": "334169",
    "end": "339870"
  },
  {
    "text": "could go to email tell a human when these thresholds are crossed so we're",
    "start": "339870",
    "end": "346319"
  },
  {
    "start": "345000",
    "end": "827000"
  },
  {
    "text": "going to build the first part of this on the cloud side and this is this is in in",
    "start": "346319",
    "end": "351779"
  },
  {
    "text": "lambda so first what is AWS lambda and",
    "start": "351779",
    "end": "358500"
  },
  {
    "text": "this is a this was straight off the detail page at at AWS or amazon.com AWS",
    "start": "358500",
    "end": "365310"
  },
  {
    "text": "lambda allows you to run code without provisioning or managing servers you just upload your codes you just write",
    "start": "365310",
    "end": "371729"
  },
  {
    "text": "your code either in the console in your favorite editor I and lambda takes care",
    "start": "371729",
    "end": "376949"
  },
  {
    "text": "of everything required to run and scale your code and and run it with high availability so you don't have to worry",
    "start": "376949",
    "end": "383129"
  },
  {
    "text": "about you don't have to worry about handling failures you don't have to worry about a che and so on and for",
    "start": "383129",
    "end": "388770"
  },
  {
    "text": "those who are interested in lambda there's a full full day of service focused talks tomorrow you can set up",
    "start": "388770",
    "end": "396539"
  },
  {
    "text": "your code automatically to trigger from other AWS services or you can call it directly from a web or",
    "start": "396539",
    "end": "402669"
  },
  {
    "text": "mobile app and in this case in this example I'm triggering from another AWS service and in particular I'm triggering",
    "start": "402669",
    "end": "408490"
  },
  {
    "text": "from AWS IOT so i'm going to get my green grass call and i'll show you how to do this later in the talk get my",
    "start": "408490",
    "end": "415150"
  },
  {
    "text": "green grass courts in an MQTT message to AWS IOT and AWS IOT is going to trigger",
    "start": "415150",
    "end": "421120"
  },
  {
    "text": "the lambda function i'm about to write I and it's going to implement this business logic about you know should I",
    "start": "421120",
    "end": "428139"
  },
  {
    "text": "tell a human and so let's let's dive in and look at this dive in and look at the",
    "start": "428139",
    "end": "434440"
  },
  {
    "text": "code so specifically we're looking at the at the cloud side code and this is this is a bit of the architecture in the",
    "start": "434440",
    "end": "441010"
  },
  {
    "text": "in the orange box so the first thing that we're going to do in this code is unpack that in qtt message you know and",
    "start": "441010",
    "end": "448720"
  },
  {
    "text": "and here I've just chosen Jason but this is really an arbitrary choice and you can use whatever wire format you want",
    "start": "448720",
    "end": "454560"
  },
  {
    "text": "and pack those up into pack that up into this message um so nothing yet you know",
    "start": "454560",
    "end": "462310"
  },
  {
    "text": "nothing particularly interesting here just showing that what the green grass call is posting up into this cloud is a",
    "start": "462310",
    "end": "468250"
  },
  {
    "text": "message with with the building ID obviously because I want to support multiple buildings in my architecture an",
    "start": "468250",
    "end": "475030"
  },
  {
    "text": "event which is or the maximum temperature and and this is an",
    "start": "475030",
    "end": "480099"
  },
  {
    "text": "aggregation this will be an aggregation of the maximum temperature across the whole my whole fleet of of temperature",
    "start": "480099",
    "end": "486910"
  },
  {
    "text": "sensors and the maximum humidity which is also an aggregation across this whole fleet of temperature sensors but more on",
    "start": "486910",
    "end": "492820"
  },
  {
    "text": "that later before I go on I was reminded",
    "start": "492820",
    "end": "499000"
  },
  {
    "text": "by a conversation with a customer just yesterday about a lambda performance tip that I wanted to make sure I shared with",
    "start": "499000",
    "end": "505300"
  },
  {
    "text": "everybody and one of the cool things about improving lambda performance is that when you improve your lambda",
    "start": "505300",
    "end": "510880"
  },
  {
    "text": "performance your functions run faster and because you're paying at a super fine grain you're paying for 100",
    "start": "510880",
    "end": "517120"
  },
  {
    "text": "milliseconds you pay less and that's that's great so you know improving your performance also reduces your bill which",
    "start": "517120",
    "end": "523209"
  },
  {
    "text": "is very exciting so lambda one of the",
    "start": "523209",
    "end": "528670"
  },
  {
    "text": "one of the things that people people probably don't know about lambda or or or don't notice about",
    "start": "528670",
    "end": "533850"
  },
  {
    "text": "lammle immediately is there is an aspect of container lifecycle and and what that",
    "start": "533850",
    "end": "539880"
  },
  {
    "text": "means is the first time you invoke a lambda function it's going to work it's going to start up a container it's going",
    "start": "539880",
    "end": "546150"
  },
  {
    "text": "to work or we're going to start up a container in the background it's going to load your code and it's going to",
    "start": "546150",
    "end": "552660"
  },
  {
    "text": "execute the the sort of static portion of your of your code and then every time",
    "start": "552660",
    "end": "557839"
  },
  {
    "text": "that event that that function gets triggered I the handler function inside",
    "start": "557839",
    "end": "564360"
  },
  {
    "text": "your code will be called so you can break your code down in a lambda function into two parts there is the",
    "start": "564360",
    "end": "570930"
  },
  {
    "text": "static portion which runs once per container start so they'll be once the first time you call it or as we scale",
    "start": "570930",
    "end": "577410"
  },
  {
    "text": "your fleet up and then the code that runs on every invoke and when you know",
    "start": "577410",
    "end": "583440"
  },
  {
    "text": "this is some very interesting optimizations you can do and the most obvious optimization and often one of",
    "start": "583440",
    "end": "590070"
  },
  {
    "text": "the most powerful is to create things like your AWS clients up there in that static portion and that allows them to",
    "start": "590070",
    "end": "597480"
  },
  {
    "text": "reuse connections and reuse the SSL handshake they've done and so on across",
    "start": "597480",
    "end": "603029"
  },
  {
    "text": "multiple invocations of your lambda function it also reduces the amount of garbage it reduces the amount of time",
    "start": "603029",
    "end": "608850"
  },
  {
    "text": "required to start up those those SDKs and so on so if you're doing any kind of",
    "start": "608850",
    "end": "615420"
  },
  {
    "text": "initialization you'll want to do that once up in this kind of top section of your code you do want to be careful",
    "start": "615420",
    "end": "622920"
  },
  {
    "text": "though because you know lambda can contact can can terminate that container at any time and obviously when you're",
    "start": "622920",
    "end": "628830"
  },
  {
    "text": "scaling down you're going to stop seeing some containers so you don't want to put code that needs to be durable there or",
    "start": "628830",
    "end": "634500"
  },
  {
    "text": "data that needs to be durable there you want to put in clients you want to put in soft state you want to put in",
    "start": "634500",
    "end": "639510"
  },
  {
    "text": "pre-calculated things that they can reduce the rent I'm of each invocation",
    "start": "639510",
    "end": "645029"
  },
  {
    "text": "of your function so now we've now we've talked about that it's move on to what I",
    "start": "645029",
    "end": "653089"
  },
  {
    "text": "loading configuration in history from from dynamodb and here i'm using",
    "start": "653089",
    "end": "658160"
  },
  {
    "text": "DynamoDB to store the history of these messages of I'm getting so when I get",
    "start": "658160",
    "end": "665130"
  },
  {
    "text": "every every message I'm going to I'm going to load the previous value of the message",
    "start": "665130",
    "end": "670649"
  },
  {
    "text": "and you'll see why in a second from DynamoDB and then I'm going to save the new values into dynamodb I've also got",
    "start": "670649",
    "end": "678209"
  },
  {
    "text": "some some logic here to handle the case that there are there are no existing",
    "start": "678209",
    "end": "683790"
  },
  {
    "text": "values in dynamodb so the first time that's the system starts up and here I'm",
    "start": "683790",
    "end": "689699"
  },
  {
    "text": "just using the very standard AWS sdk I'm calling my putting the dynamo DB get",
    "start": "689699",
    "end": "695670"
  },
  {
    "text": "item API to load the to load the data",
    "start": "695670",
    "end": "701880"
  },
  {
    "text": "for this building ID so this is the building ID that was passed in and that their debut TT message and if the items",
    "start": "701880",
    "end": "707699"
  },
  {
    "text": "there i'm going to use the the values from it and if it's not i'm going to use the default values and loading from",
    "start": "707699",
    "end": "715589"
  },
  {
    "text": "DynamoDB let's as apply some latching logic and and this latching logic is",
    "start": "715589",
    "end": "723089"
  },
  {
    "text": "going to make sure that when we tell a human hey you're you know you're building has crossed this threshold um",
    "start": "723089",
    "end": "728870"
  },
  {
    "text": "we're only going to do that once we're not going to do that again when the next message comes in and again when the next",
    "start": "728870",
    "end": "734130"
  },
  {
    "text": "message comes in you know we want to do that once and in a real world example you would probably implement something something fancier than this probably",
    "start": "734130",
    "end": "741000"
  },
  {
    "text": "some some hysteresis so if it's sir you know wobbling around that deadline you don't get multiple messages but this is",
    "start": "741000",
    "end": "747329"
  },
  {
    "text": "the simplest form of D duplicating based on based on dynamodb and the other thing",
    "start": "747329",
    "end": "755819"
  },
  {
    "text": "here in the first function you can see that we we use some configuration and that configuration is is a little map",
    "start": "755819",
    "end": "762810"
  },
  {
    "text": "that you could put into your into a lambda code or you could put it in dynamo dB or you could put it in another",
    "start": "762810",
    "end": "769050"
  },
  {
    "text": "database and use that as a configuration store and a little bit more I'll talk a little bit more on why that's so",
    "start": "769050",
    "end": "774389"
  },
  {
    "text": "powerful in IOT space I later so here we call their function to load the previous",
    "start": "774389",
    "end": "780660"
  },
  {
    "text": "values from DynamoDB we load the configuration from DynamoDB so there's kind of per building configurations",
    "start": "780660",
    "end": "786990"
  },
  {
    "text": "allow human to set those knobs and then we say well if we should alarm on these values and we didn't choose to alarm in",
    "start": "786990",
    "end": "793800"
  },
  {
    "text": "the previous values then we're going to send the SMS notification so this is there's the logic that's going to stand",
    "start": "793800",
    "end": "799139"
  },
  {
    "text": "just once and and then we send the send the notification with SNS and again just",
    "start": "799139",
    "end": "806910"
  },
  {
    "text": "make a you know make a nice I Jason blob and and pass this into SNS and on the",
    "start": "806910",
    "end": "815339"
  },
  {
    "text": "SNS side we've configured what's going to happen two things publish to this topic and that could be you know sin to",
    "start": "815339",
    "end": "821220"
  },
  {
    "text": "any of the any or all of the things that isn't as support so one of the things",
    "start": "821220",
    "end": "828779"
  },
  {
    "start": "827000",
    "end": "921000"
  },
  {
    "text": "that's really really powerful about building these kinds of architectures in the cloud is its extensibility once",
    "start": "828779",
    "end": "835319"
  },
  {
    "text": "we've got this the stream of messages coming in from the IOT devices we can very easily do multiple things from them",
    "start": "835319",
    "end": "842430"
  },
  {
    "text": "for example this we're already writing updating each message in China in or",
    "start": "842430",
    "end": "848910"
  },
  {
    "text": "updating DynamoDB as each message comes in we could enable an update stream on",
    "start": "848910",
    "end": "854940"
  },
  {
    "text": "that DynamoDB table hook a lambda onto that update stream and do further",
    "start": "854940",
    "end": "860850"
  },
  {
    "text": "aggregation or load the data into into something like Amazon redshift fora for future analysis so this is showing I",
    "start": "860850",
    "end": "870439"
  },
  {
    "text": "know just how powerful it is when you start getting this data flowing up into the cloud you can very easily configure",
    "start": "870439",
    "end": "877589"
  },
  {
    "text": "things to send that data to multiple place and get value out of it in multiple ways and that's why you know we",
    "start": "877589",
    "end": "883980"
  },
  {
    "text": "would choose to architect something with some of it local and some of it in the cloud we would choose some of it local",
    "start": "883980",
    "end": "890870"
  },
  {
    "text": "for for some reasons i'll talk about as i as i get into the the the the local",
    "start": "890870",
    "end": "896189"
  },
  {
    "text": "side of this but we'll put some of it in the cloud because it gives us a lot more options of looking over a broader view",
    "start": "896189",
    "end": "902639"
  },
  {
    "text": "looking over multiple buildings or multiple systems it gives us the option of keeping a lot of history it gives us",
    "start": "902639",
    "end": "908610"
  },
  {
    "text": "a lot option of using the powerful analytics capabilities and database and",
    "start": "908610",
    "end": "913860"
  },
  {
    "text": "storage capabilities in the cloud to deal with that history so let's talk",
    "start": "913860",
    "end": "919319"
  },
  {
    "text": "about the local side of this and here i'm going to call this local filtering",
    "start": "919319",
    "end": "924569"
  },
  {
    "start": "921000",
    "end": "1060000"
  },
  {
    "text": "but really this is a this is a few things what we're going to build on the",
    "start": "924569",
    "end": "929880"
  },
  {
    "text": "green grass side is we're going to build a a rate reducer and we're going to build that rate reducer because",
    "start": "929880",
    "end": "936209"
  },
  {
    "text": "in this example and that came out of my head each of these senses since its its data every second right and if I have a",
    "start": "936209",
    "end": "943740"
  },
  {
    "text": "thousand senses in the building as a thousand message as a second of you know hey it's 30 degrees hey it's 30 degrees",
    "start": "943740",
    "end": "949589"
  },
  {
    "text": "hey it's 30 degrees and each of those messages has fairly low value so if this",
    "start": "949589",
    "end": "955319"
  },
  {
    "text": "building has has unreliable connectivity or expensive connectivity you don't want to be sending that thousand TPS of of",
    "start": "955319",
    "end": "962189"
  },
  {
    "text": "particularly and interesting messages up into the cloud you also want to perform",
    "start": "962189",
    "end": "968670"
  },
  {
    "text": "you know local so what you want to do in green grass is to get those messages and",
    "start": "968670",
    "end": "974160"
  },
  {
    "text": "filter those messages down and in this case what we're going to do is we're going to get the maximum temperature",
    "start": "974160",
    "end": "979740"
  },
  {
    "text": "seen across the whole building and we're going to get the maximum humidity seen across the whole building and we're",
    "start": "979740",
    "end": "986639"
  },
  {
    "text": "going to we're going to post that up into the cloud once a minute so you've",
    "start": "986639",
    "end": "991709"
  },
  {
    "text": "got this thousand TPS so sixty thousand messages a minute coming in from this",
    "start": "991709",
    "end": "998880"
  },
  {
    "text": "fleet of sensors to the green grass core and the software the lambda function we're about to write for the green grass",
    "start": "998880",
    "end": "1004189"
  },
  {
    "text": "core is going to take that and it's going to cut it all the way down it's going to aggregate it all the way down",
    "start": "1004189",
    "end": "1009920"
  },
  {
    "text": "it's going to filter it to get just one message a minute up into the cloud so you can just imagine over a you know",
    "start": "1009920",
    "end": "1016220"
  },
  {
    "text": "something an expensive radio link for example this could be a you know huge cost improvement it's also an",
    "start": "1016220",
    "end": "1023300"
  },
  {
    "text": "availability thing you know if the service facility drops off the internet you want the aggregation and filtering",
    "start": "1023300",
    "end": "1029329"
  },
  {
    "text": "to continue yet so we have these messages coming into the core and where we're about to build a lambda function",
    "start": "1029329",
    "end": "1035360"
  },
  {
    "text": "to were to filter these and this is the lamb to anywhere magic the function we're about to write it's just going to",
    "start": "1035360",
    "end": "1042110"
  },
  {
    "text": "be normal Python code it's just going to be the same kind of normal Python code that you would build for lambda in the",
    "start": "1042110",
    "end": "1047209"
  },
  {
    "text": "cloud but you're going to run this on a device and green grass is going to allow you to build and manage and deploy that",
    "start": "1047209",
    "end": "1053600"
  },
  {
    "text": "on to a device onto onto the device running this green grass core software",
    "start": "1053600",
    "end": "1060309"
  },
  {
    "start": "1060000",
    "end": "1273000"
  },
  {
    "text": "so I'm going to make heavy use of shadows in this example and and talk a",
    "start": "1061650",
    "end": "1066880"
  },
  {
    "text": "little bit about the three different roles that device shadows play if you",
    "start": "1066880",
    "end": "1072190"
  },
  {
    "text": "look at I OT device shadows in AWS IOT they are play the role of being a copy",
    "start": "1072190",
    "end": "1080680"
  },
  {
    "text": "of the state of a device they allow a device to to synchronize it sir its",
    "start": "1080680",
    "end": "1086260"
  },
  {
    "text": "current state to the state in the cloud to handle these cases of intermittent connectivity and so on with green grass",
    "start": "1086260",
    "end": "1093310"
  },
  {
    "text": "we've kept the one shadow mechanism but we've added two new ways to use shadows",
    "start": "1093310",
    "end": "1098350"
  },
  {
    "text": "or two new powerful things to do with shadows one of those powerful things to do with shadows is to have local only",
    "start": "1098350",
    "end": "1104230"
  },
  {
    "text": "shadows that you can use as a local state stash on that green grass core it's like a like a tiny mini local",
    "start": "1104230",
    "end": "1111460"
  },
  {
    "text": "database in this document to keep local state and that's what we're going to use to keep the local status we do this",
    "start": "1111460",
    "end": "1117280"
  },
  {
    "text": "aggregation and filtering locally and then I'm going to talk about another role of shadows a little bit later which",
    "start": "1117280",
    "end": "1123640"
  },
  {
    "text": "is synchronizing shadows between the cloud and the core and there's some super powerful things you can do with",
    "start": "1123640",
    "end": "1130000"
  },
  {
    "text": "synchronized shadows you know obviously data transfer is one of them but they're also things like pushing down",
    "start": "1130000",
    "end": "1135670"
  },
  {
    "text": "configuration and you know pushing down changes and values to these devices",
    "start": "1135670",
    "end": "1141540"
  },
  {
    "text": "which can give you a huge amount of control and in a lot of IOT cases you're",
    "start": "1141540",
    "end": "1146680"
  },
  {
    "text": "going to be doing a long testing cycle for a piece of software a long qualification cycle and you know while",
    "start": "1146680",
    "end": "1153670"
  },
  {
    "text": "while green grass aims to make it as easy as possible and as fast as possible to deploy you know often there are",
    "start": "1153670",
    "end": "1159970"
  },
  {
    "text": "constraints that make it difficult to make code changes so having the ability to do dynamic configuration using sync",
    "start": "1159970",
    "end": "1167410"
  },
  {
    "text": "shadows it's an extremely powerful thing so let's let's look at this sort of",
    "start": "1167410",
    "end": "1172750"
  },
  {
    "text": "loading and pausing a shadow what I want to highlight here is green grass comes with a built-in client for these local",
    "start": "1172750",
    "end": "1179500"
  },
  {
    "text": "shadow and messaging capabilities so you're just going to write this code that says you know I OT client get",
    "start": "1179500",
    "end": "1185920"
  },
  {
    "text": "things shadow and and it's going to load the the shadow for the thing and in this",
    "start": "1185920",
    "end": "1192280"
  },
  {
    "text": "case the thing that the shadow corresponds to is the green grass core itself so we're",
    "start": "1192280",
    "end": "1198850"
  },
  {
    "text": "going to load this shadow and then we're going to parse the JSON and then we're going to I you know we're going to to to",
    "start": "1198850",
    "end": "1204940"
  },
  {
    "text": "get a version out of that shadow because this is good it's good practice when you write some rights and state down you",
    "start": "1204940",
    "end": "1210309"
  },
  {
    "text": "want a version that that state to allow you to to do optimistic concurrency",
    "start": "1210309",
    "end": "1215740"
  },
  {
    "text": "control and there's another role of Shadows is a fourth role of Shadows is it allows you to do occ type pattern so",
    "start": "1215740",
    "end": "1223149"
  },
  {
    "text": "optimistic locking patterns with lambdas on the on the device so when multiple",
    "start": "1223149",
    "end": "1228940"
  },
  {
    "text": "concurrent lambdas are running you know you can just imagine that you know two messages of these coming from from these",
    "start": "1228940",
    "end": "1234789"
  },
  {
    "text": "these senses at the same moment multiple concurrent lambdas are going to start app and you don't want them to trade",
    "start": "1234789",
    "end": "1241210"
  },
  {
    "text": "over each other and do something illegal so we're going to use the version in the shadow to make sure that we're doing the",
    "start": "1241210",
    "end": "1247179"
  },
  {
    "text": "right thing in that concurrent case and then again we are going to handle the",
    "start": "1247179",
    "end": "1254710"
  },
  {
    "text": "case where there is no shadow so this is the bootstrapping case just like we saw with local this is the bootstrapping case that says well there is no shadow",
    "start": "1254710",
    "end": "1260860"
  },
  {
    "text": "so I'm just going to start off with some are you know some default state and in",
    "start": "1260860",
    "end": "1267759"
  },
  {
    "text": "this default state is well you know we haven't written down any we haven't written down in any aggregation state so",
    "start": "1267759",
    "end": "1274330"
  },
  {
    "start": "1273000",
    "end": "1355000"
  },
  {
    "text": "the architecture I'm building here sort of little mini in this function architecture is I have the IMP utt topic",
    "start": "1274330",
    "end": "1280419"
  },
  {
    "text": "which all the senses are talking to I have my lambda function and then I'm going to use a shadow to record the",
    "start": "1280419",
    "end": "1286750"
  },
  {
    "text": "high-water mark so that's these maximums that I'm aggregating you know aggregating the maximum temperature and",
    "start": "1286750",
    "end": "1292389"
  },
  {
    "text": "the maximum humidity that I've seen from that whole fleet of sensors i'm going to use another shadow two were to record",
    "start": "1292389",
    "end": "1300399"
  },
  {
    "text": "the last time i posted to the cloud and this allows me to do this kind of once a minute thing with messages coming in",
    "start": "1300399",
    "end": "1306340"
  },
  {
    "text": "every second i want to say you know I'm getting I'm getting a thousand message as a second oh I haven't posted in a",
    "start": "1306340",
    "end": "1312700"
  },
  {
    "text": "minute I'm going to post that data now and green grass will provide you with two ways to do this when is the pattern",
    "start": "1312700",
    "end": "1319330"
  },
  {
    "text": "that i'm using here where I'm using the shadow to say how long ago has it been since I lost posted this this message up",
    "start": "1319330",
    "end": "1325539"
  },
  {
    "text": "to the cloud oh it's been a minute I must understood now it's also going to provide a haven",
    "start": "1325539",
    "end": "1330559"
  },
  {
    "text": "or Cronkite functionality where you can say run this land or once a minute so",
    "start": "1330559",
    "end": "1336020"
  },
  {
    "text": "that's an alternative architecture which I haven't chosen here because I like to keep this to one you know one function",
    "start": "1336020",
    "end": "1341450"
  },
  {
    "text": "and then I'm going to use it MQTT topic in the cloud to send the message from my",
    "start": "1341450",
    "end": "1347360"
  },
  {
    "text": "green grass go to the cloud which is then going to go to their lambda function that we saw earlier so the next",
    "start": "1347360",
    "end": "1356570"
  },
  {
    "start": "1355000",
    "end": "1500000"
  },
  {
    "text": "thing i want to show you is updating a shadow and here's where i'm going to implement this this optimistic concurrency control pattern arm so I'm",
    "start": "1356570",
    "end": "1363980"
  },
  {
    "text": "going to I'm going to get the current data from the shadow I'm going to load the shadow um then I'm going to say well",
    "start": "1363980",
    "end": "1369559"
  },
  {
    "text": "if I if I should update the shadow which which means that you know I'm getting these messages in the right order and I",
    "start": "1369559",
    "end": "1375260"
  },
  {
    "text": "don't want to I don't want to clobber things i'm not going to go into the logic there i'm going to create a new shadow and then i'm going to try and",
    "start": "1375260",
    "end": "1381740"
  },
  {
    "text": "update the shadow and this is a conditional update where I'm going to say update the shadow only if the new",
    "start": "1381740",
    "end": "1390080"
  },
  {
    "text": "version is one more than the old version so only if I'm moving the version just one forward at a time and you can see",
    "start": "1390080",
    "end": "1397970"
  },
  {
    "text": "that if to lambda functions are concurrently running trying to implement this logic they're both going to load",
    "start": "1397970",
    "end": "1404870"
  },
  {
    "text": "their shadows they're both going to decide oh yeah you know I need to update one of them is going to win the race and",
    "start": "1404870",
    "end": "1410720"
  },
  {
    "text": "update in place the next one is going to lose that race and at the moment it loses that race updates shadow is going",
    "start": "1410720",
    "end": "1417140"
  },
  {
    "text": "to fail so instead of a covering they did the update of the first lambda it's",
    "start": "1417140",
    "end": "1422270"
  },
  {
    "text": "going to it's it's going to notice that it's about to do the wrong thing and it's going to start this loop again and",
    "start": "1422270",
    "end": "1428600"
  },
  {
    "text": "it's going to get the current record data and it's going to apply the business logic again and so on so in",
    "start": "1428600",
    "end": "1434090"
  },
  {
    "text": "this way we deal with all of these concurrency situations and it's a very simple powerful pattern for dealing with",
    "start": "1434090",
    "end": "1439820"
  },
  {
    "text": "those issues and we can do that because the local shadows on the green grass I",
    "start": "1439820",
    "end": "1444830"
  },
  {
    "text": "have these strong semantics around Iran update and then as another best practice",
    "start": "1444830",
    "end": "1452419"
  },
  {
    "text": "here in this loop i'm going to sleep with Jetta so I'm going to go sleep for",
    "start": "1452419",
    "end": "1457970"
  },
  {
    "text": "a random amount and and the reason I'm going to do that is if I sit for a a fixed amount and I",
    "start": "1457970",
    "end": "1465389"
  },
  {
    "text": "gots a you know 10 messages at the same time I would get you know one of them win the race and nine lose the race and",
    "start": "1465389",
    "end": "1471989"
  },
  {
    "text": "then all those nine would start again at the next moment and one of them when the race and eight would lose the race so",
    "start": "1471989",
    "end": "1478229"
  },
  {
    "text": "we'd have this really kind of long linear thing where I'm kind of doing you know way way way way too many tries so",
    "start": "1478229",
    "end": "1484469"
  },
  {
    "text": "then I think about doing a little bit of jitter here is on the second round these things are going to be spread out in time and be much less likely to clash so",
    "start": "1484469",
    "end": "1492359"
  },
  {
    "text": "this is ad correlation in time and it's another good best practice when you know when retrying things in the face of",
    "start": "1492359",
    "end": "1499019"
  },
  {
    "text": "concurrency and then I'm going to use the other the other capability of green",
    "start": "1499019",
    "end": "1504959"
  },
  {
    "start": "1500000",
    "end": "1620000"
  },
  {
    "text": "grass which is messaging to publish an MQTT message to the cloud and here again",
    "start": "1504959",
    "end": "1510359"
  },
  {
    "text": "I'm going to use that shadow to to say okay well win win loss did I publish to",
    "start": "1510359",
    "end": "1516359"
  },
  {
    "text": "the cloud and and here again I need to handle I need to handle the concurrency",
    "start": "1516359",
    "end": "1522299"
  },
  {
    "text": "case where you know there are multiple lambdas trying to do this so I'm going to say I'm going to try and update a",
    "start": "1522299",
    "end": "1528929"
  },
  {
    "text": "shadow to say you know i'm going to post now and and i'm going to do that again",
    "start": "1528929",
    "end": "1538320"
  },
  {
    "text": "with this version check and again i'm going to go back to the beginning of the loop if my version check fails so i",
    "start": "1538320",
    "end": "1545039"
  },
  {
    "text": "could handle the case where there are are concurrently executing functions um",
    "start": "1545039",
    "end": "1551450"
  },
  {
    "text": "so what does code does is it loads that it loads that data from that shadowed it",
    "start": "1551450",
    "end": "1558149"
  },
  {
    "text": "it says should I publish this which is the application of business logic saying well you know hasn't been a minute since",
    "start": "1558149",
    "end": "1563639"
  },
  {
    "text": "I lost published us this piece of data um if it has been then I'm going to try",
    "start": "1563639",
    "end": "1569159"
  },
  {
    "text": "and update the shadow with with the with the version check and if that works then",
    "start": "1569159",
    "end": "1574169"
  },
  {
    "text": "I'm going to use the built-in SDK to do an MQTT publish and that MQTT publish is",
    "start": "1574169",
    "end": "1580229"
  },
  {
    "text": "going to happen locally I'm going to publish that message to work to the green grass the green raw score software",
    "start": "1580229",
    "end": "1587070"
  },
  {
    "text": "and the green grass core software is going to forward it up to the cloud for me and the nice thing about that is i",
    "start": "1587070",
    "end": "1593190"
  },
  {
    "text": "don't have to deal with the failures of talking to cloud here in my code green grass coy is",
    "start": "1593190",
    "end": "1598530"
  },
  {
    "text": "going to deal with the cases of intermittent connectivity for me it's going to deal with retries it's going to",
    "start": "1598530",
    "end": "1604470"
  },
  {
    "text": "deal with all of the realities all of the ad realities of the real world for me and I don't have to worry about that",
    "start": "1604470",
    "end": "1610169"
  },
  {
    "text": "in my code here and once again I'm going to do this kind of geek correlated sleep to spread my functions out in time and",
    "start": "1610169",
    "end": "1621840"
  },
  {
    "start": "1620000",
    "end": "1676000"
  },
  {
    "text": "then I don't have code for this but I also want to say that for all of these pieces of business logic you can",
    "start": "1621840",
    "end": "1627630"
  },
  {
    "text": "configure them using a a shadow sync to the cloud and that's cool because it lets you use the synchronized shadows",
    "start": "1627630",
    "end": "1634650"
  },
  {
    "text": "where you can you know change the values on the cloud side and green grass coal will synchronize that shadow down to the",
    "start": "1634650",
    "end": "1640289"
  },
  {
    "text": "cloud for you down to the device for you in the background and again dealing with all of these messy realities of the real",
    "start": "1640289",
    "end": "1646080"
  },
  {
    "text": "world which can allow you to say kawal you know it's winter so I'm going to set",
    "start": "1646080",
    "end": "1651090"
  },
  {
    "text": "my thresholds at a different place or this alarms being super noisy and I don't think it's a real problem so I'm",
    "start": "1651090",
    "end": "1656549"
  },
  {
    "text": "going to increase my you know increase my thresholds and what a lot of customers are very excited about here is",
    "start": "1656549",
    "end": "1661830"
  },
  {
    "text": "using this this mechanism to pass down things like you know machine learning models ah you know we're going to do the",
    "start": "1661830",
    "end": "1668730"
  },
  {
    "text": "training up in the cloud and then inference locally and passing down the model parameters in an inner shadow so",
    "start": "1668730",
    "end": "1677130"
  },
  {
    "start": "1676000",
    "end": "1759000"
  },
  {
    "text": "let's talk about some some highlights of the green grass API um so there's the",
    "start": "1677130",
    "end": "1682500"
  },
  {
    "text": "shadow API which allows communications with devices so this is this kind of traditional IOT or AWS IOT use of device",
    "start": "1682500",
    "end": "1689340"
  },
  {
    "text": "shadows communication with AWS IOT and this is the sink to cloud shadows that's this configuration pattern or the other",
    "start": "1689340",
    "end": "1696090"
  },
  {
    "text": "patterns that you can use for synchronizing to the cloud or you can use it as a small local kind of quote-unquote database this little",
    "start": "1696090",
    "end": "1702570"
  },
  {
    "text": "document that is is always there for you and has these strong semantics it has",
    "start": "1702570",
    "end": "1708390"
  },
  {
    "text": "these these these conditional rights and these other things that allow you to to to rely on that to implement things that",
    "start": "1708390",
    "end": "1715470"
  },
  {
    "text": "deal with concurrency or just just you know even in a simpler way just just stash some state there's also got this",
    "start": "1715470",
    "end": "1722309"
  },
  {
    "text": "messaging API which allows communication with devices you know seeing that device",
    "start": "1722309",
    "end": "1727409"
  },
  {
    "text": "a message and today that's that utt and then communication with AWS IOT",
    "start": "1727409",
    "end": "1733350"
  },
  {
    "text": "you know send a message up to the cloud you know or as as bread showed in his",
    "start": "1733350",
    "end": "1740160"
  },
  {
    "text": "talk part of party on two rows talk today send a message to another green grass call either directly or via the",
    "start": "1740160",
    "end": "1747840"
  },
  {
    "text": "cloud and that lets you build up architectures across multiple green grass cause and and that can be",
    "start": "1747840",
    "end": "1754740"
  },
  {
    "text": "extremely powerful so what's the same between between green grass in the cloud",
    "start": "1754740",
    "end": "1760730"
  },
  {
    "start": "1759000",
    "end": "1791000"
  },
  {
    "text": "the same Python 27 support the same event based programming model so all of",
    "start": "1760730",
    "end": "1767820"
  },
  {
    "text": "those things like that performance tip I shared earlier it's going to work the same on green grass as it does in the cloud so you can reason about things in",
    "start": "1767820",
    "end": "1774510"
  },
  {
    "text": "a single way and that was one of our goals as we design green grass to make sure that you know things worked as similarly as possible and the container",
    "start": "1774510",
    "end": "1782310"
  },
  {
    "text": "life cycle and and the programming model in general is a single you know a single",
    "start": "1782310",
    "end": "1788010"
  },
  {
    "text": "programming model and then what's different um and it's worth talking",
    "start": "1788010",
    "end": "1795060"
  },
  {
    "start": "1791000",
    "end": "1904000"
  },
  {
    "text": "about you know why some things are different and part of the reason that",
    "start": "1795060",
    "end": "1800160"
  },
  {
    "text": "why some things are different is that the physics are different these are smaller devices the protocols they",
    "start": "1800160",
    "end": "1805470"
  },
  {
    "text": "support or are you know the protocols are interesting in IOT and the protocols that are interesting in the cloud might",
    "start": "1805470",
    "end": "1811440"
  },
  {
    "text": "not be the same managing a deployment of a lambda function in the cloud and",
    "start": "1811440",
    "end": "1817110"
  },
  {
    "text": "managing a deployment across thousands hundreds of thousands or millions of IOT devices have very different realities I",
    "start": "1817110",
    "end": "1824870"
  },
  {
    "text": "so green grass is a very different IOT centric or device centric deployment and",
    "start": "1824870",
    "end": "1830430"
  },
  {
    "text": "operational tooling system and monitoring and so on so those are different because the realities are",
    "start": "1830430",
    "end": "1836190"
  },
  {
    "text": "different you know instead of having you know a lambda installation in one place in the cloud in one AWS region you know",
    "start": "1836190",
    "end": "1843210"
  },
  {
    "text": "you could be running green grass on millions of devices the authentication",
    "start": "1843210",
    "end": "1848460"
  },
  {
    "text": "and authorization mechanisms are designed for devices so they designed to be lightweight you know we think that",
    "start": "1848460",
    "end": "1855510"
  },
  {
    "text": "security is extremely important so we use strong authentication and authorization confidentiality everywhere",
    "start": "1855510",
    "end": "1862350"
  },
  {
    "text": "in this architecture that's entirely handled for you by green grass but the details of the way those",
    "start": "1862350",
    "end": "1867779"
  },
  {
    "text": "work are going to be different locally than then up in the cloud and here we're using a lot of you know we're using a",
    "start": "1867779",
    "end": "1874559"
  },
  {
    "text": "lot of certificate based in CA based security and that will have documentation that goes into great",
    "start": "1874559",
    "end": "1880409"
  },
  {
    "text": "detail on that and then on devices again because devices are different we're",
    "start": "1880409",
    "end": "1885839"
  },
  {
    "text": "going to support both arm and x86 with with green grass so you know arm",
    "start": "1885839",
    "end": "1892289"
  },
  {
    "text": "typically a device like like a raspberry pi and an x86 there could be no intel",
    "start": "1892289",
    "end": "1898829"
  },
  {
    "text": "atom or a server or or or whatever else so yeah thank you very much I hope that",
    "start": "1898829",
    "end": "1907619"
  },
  {
    "start": "1904000",
    "end": "1922000"
  },
  {
    "text": "was some useful information and a useful deep dive into into the internals of green grass if you have any questions",
    "start": "1907619",
    "end": "1915059"
  },
  {
    "text": "please please go ahead and and step up to the mic",
    "start": "1915059",
    "end": "1920509"
  }
]