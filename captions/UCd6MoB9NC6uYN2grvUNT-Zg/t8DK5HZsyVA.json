[
  {
    "text": "so thank you very much everyone for being here today and coming to this",
    "start": "30",
    "end": "5520"
  },
  {
    "text": "container state container session I'm a little emotional because I'm we will and",
    "start": "5520",
    "end": "13139"
  },
  {
    "text": "I are very honored for you to skip on other activities such as drinks and",
    "start": "13139",
    "end": "18420"
  },
  {
    "text": "other forms of entertainment just just stay with us tonight okay so this is",
    "start": "18420",
    "end": "24180"
  },
  {
    "text": "we're going to try to make it up to you with a little bit of something that is worth it so so this is a 400 level",
    "start": "24180",
    "end": "31160"
  },
  {
    "text": "session we're gonna try to get as advanced as possible and and give you a good idea of how to how to use basically",
    "start": "31160",
    "end": "41250"
  },
  {
    "text": "ecs elastic container service in in",
    "start": "41250",
    "end": "47070"
  },
  {
    "text": "production there's gonna be some theory and there's gonna be some real-life experience we're going to go briefly",
    "start": "47070",
    "end": "54300"
  },
  {
    "text": "about the micro services architecture we're gonna talk about Amazonas yes why",
    "start": "54300",
    "end": "60539"
  },
  {
    "text": "it fits in the picture we're gonna mention the 12 factor app and then we're",
    "start": "60539",
    "end": "65640"
  },
  {
    "text": "going to go through a bunch of reference architectures pieces of technology that",
    "start": "65640",
    "end": "72299"
  },
  {
    "text": "can help you solve problems that you might be facing or you might have faced",
    "start": "72299",
    "end": "77820"
  },
  {
    "text": "already then we're gonna talk about task placement as well because it's a it's an",
    "start": "77820",
    "end": "83100"
  },
  {
    "text": "important part of elastic container service and and then I'll leave the stage to will is going to talk about how",
    "start": "83100",
    "end": "89970"
  },
  {
    "text": "bus we did it my name is Pierce tech Myer I'm a Solutions Architect for Amazon Web Services have been doing this",
    "start": "89970",
    "end": "96450"
  },
  {
    "text": "for three years and a half my subject matter expertise is in containers surprising me and I I let's go into it",
    "start": "96450",
    "end": "106110"
  },
  {
    "text": "right now so micro services have been",
    "start": "106110",
    "end": "112009"
  },
  {
    "text": "the talk of the town for a long time now you can find a definition for micro",
    "start": "112009",
    "end": "117780"
  },
  {
    "text": "services on many sites including the Wikipedia this definition here is the",
    "start": "117780",
    "end": "123270"
  },
  {
    "text": "one that we wrote in a white paper it mentions the fact that it is both",
    "start": "123270",
    "end": "129599"
  },
  {
    "text": "architectural and organizational as an approach that it is it it emphasizes on being",
    "start": "129599",
    "end": "138780"
  },
  {
    "text": "small and independent service and we will dig a little bit into this as well",
    "start": "138780",
    "end": "143880"
  },
  {
    "text": "and all of these services are going to talk to each other the well defined application program interfaces and then",
    "start": "143880",
    "end": "152690"
  },
  {
    "text": "small and self-contained teams right both organizational and architectural so",
    "start": "152690",
    "end": "158160"
  },
  {
    "text": "there was a talk by Sam Newman Co n 208",
    "start": "158160",
    "end": "163500"
  },
  {
    "text": "how many of you attended this talk wonderful so I hope that you enjoyed it",
    "start": "163500",
    "end": "169800"
  },
  {
    "text": "and for the ones that didn't get a chance to attend it it's going to be available via video very soon so I would",
    "start": "169800",
    "end": "176280"
  },
  {
    "text": "recommend you watch it and please download the whitepaper also there might be a little bit to learn in there so",
    "start": "176280",
    "end": "181680"
  },
  {
    "text": "what we're doing is we're trying to assemble some of the best practices both",
    "start": "181680",
    "end": "186720"
  },
  {
    "text": "from the some of the the principles that were established around micro-services",
    "start": "186720",
    "end": "193230"
  },
  {
    "text": "as well as the 12 factor app so we used",
    "start": "193230",
    "end": "201150"
  },
  {
    "text": "to build monolithic applications what monolith stands for in terms of actual actual terminology is a single",
    "start": "201150",
    "end": "208140"
  },
  {
    "text": "large unit right so in a monolithic application all the components are",
    "start": "208140",
    "end": "213510"
  },
  {
    "text": "tightly coupled and they're usually hard to change it made sense at the time to build these monoliths and try to pack",
    "start": "213510",
    "end": "220260"
  },
  {
    "text": "all the functionality within one binary or one big application but it's I think",
    "start": "220260",
    "end": "227550"
  },
  {
    "text": "a lot of organizations that are outgrown this this method the micro services in",
    "start": "227550",
    "end": "232769"
  },
  {
    "text": "comparison are a very small atomic unit where and they do one thing to do it",
    "start": "232769",
    "end": "238739"
  },
  {
    "text": "well and as I said they have a clear interfaces they have a contract with the world and this is the only way that you",
    "start": "238739",
    "end": "244200"
  },
  {
    "text": "should be interfacing with these services so why are we seeing companies",
    "start": "244200",
    "end": "249239"
  },
  {
    "text": "and organizations move away from the monolith and into micro services I that there are many reasons I will highlight",
    "start": "249239",
    "end": "256500"
  },
  {
    "text": "two mostly so the first one is scaling",
    "start": "256500",
    "end": "261530"
  },
  {
    "text": "because when you have to make your applications more",
    "start": "261530",
    "end": "266540"
  },
  {
    "text": "more performant and to be able to serve a larger load or bigger traffic when it",
    "start": "266540",
    "end": "272660"
  },
  {
    "text": "comes to a monolith you'll have to just replicate it and and and this is an easy solution but it's not the most",
    "start": "272660",
    "end": "280090"
  },
  {
    "text": "appropriate when it comes to resource utilization because parts of the monolith might be",
    "start": "280090",
    "end": "286700"
  },
  {
    "text": "the ones that actually need more performance or more scale but other parts might not need it and so you're",
    "start": "286700",
    "end": "293780"
  },
  {
    "text": "basically using a bigger box for something to contain there's not as not",
    "start": "293780",
    "end": "299720"
  },
  {
    "text": "as needed not as big so scaling is not as efficient now change is another",
    "start": "299720",
    "end": "306200"
  },
  {
    "text": "reason right when you want to iterate on a monolith there's a certain amount of",
    "start": "306200",
    "end": "311540"
  },
  {
    "text": "friction that happens so large application is usually maintained by teams of developers one one point of",
    "start": "311540",
    "end": "320810"
  },
  {
    "text": "friction is that when you want to use a shared library or a certain library you know the developer might have to put",
    "start": "320810",
    "end": "327620"
  },
  {
    "text": "on a salesperson hat and go around the teams and say hey I want I really want",
    "start": "327620",
    "end": "332870"
  },
  {
    "text": "to use this library and this new version of this library and it would make sense to all of us like will you adopt it",
    "start": "332870",
    "end": "338870"
  },
  {
    "text": "would you start using it as well and then there's also the concept of merging so merging all the code that all the",
    "start": "338870",
    "end": "345620"
  },
  {
    "text": "teams have written during a certain list of length of time it could be a merged",
    "start": "345620",
    "end": "350870"
  },
  {
    "text": "day or emerge a week I've been in an organization that had merged week all the engineers come together and try to",
    "start": "350870",
    "end": "358000"
  },
  {
    "text": "have all this code be compatible with each other and and remove any conflicts",
    "start": "358000",
    "end": "364450"
  },
  {
    "text": "and then once you've merged you need to build the application and then deploy it",
    "start": "364450",
    "end": "371000"
  },
  {
    "text": "into a test environment and then run some regressions testing about on it right anything that fails comes back to the to",
    "start": "371000",
    "end": "379040"
  },
  {
    "text": "the to the model it you have to write your code again you have to fix what was missing and then he goes back all the way to all the testing and it redeploys",
    "start": "379040",
    "end": "385910"
  },
  {
    "text": "again and that's for the whole application and so micro services offer",
    "start": "385910",
    "end": "392660"
  },
  {
    "text": "a solution to this amazon.com went through this journey we had",
    "start": "392660",
    "end": "398950"
  },
  {
    "text": "gigabyte size Webster web service which was Amazon which was serving amazon.com",
    "start": "398950",
    "end": "404320"
  },
  {
    "text": "and we had a full team that was entirely dedicated to deploying this this binary",
    "start": "404320",
    "end": "411790"
  },
  {
    "text": "so we we embraced the model of micro services it was actually it was not",
    "start": "411790",
    "end": "417670"
  },
  {
    "text": "called micro services back then and we identified a few characteristics that make for a successful journey and here",
    "start": "417670",
    "end": "423700"
  },
  {
    "text": "they are in front of you I'm gonna try to quickly identify them or explain some",
    "start": "423700",
    "end": "429880"
  },
  {
    "text": "of them so let's start we do one thing well you want your application you want",
    "start": "429880",
    "end": "435850"
  },
  {
    "text": "a macro service to embed some of the func the business functions mirror the",
    "start": "435850",
    "end": "441280"
  },
  {
    "text": "the business functions but but only the",
    "start": "441280",
    "end": "446560"
  },
  {
    "text": "ones that make sense to the function and not more so it's it's a it's a tricky",
    "start": "446560",
    "end": "452230"
  },
  {
    "text": "challenge to do there's a whole book that's a good inspiration on the subject",
    "start": "452230",
    "end": "457480"
  },
  {
    "text": "which is a domain driven design it's going to be very helpful identifying where the boundary is between what you",
    "start": "457480",
    "end": "463990"
  },
  {
    "text": "should embed as a functionality within the micro service and what you shouldn't but most of the time your micro service",
    "start": "463990",
    "end": "469900"
  },
  {
    "text": "is going to be a replica of a real life function I'm gonna go clockwise so you build it",
    "start": "469900",
    "end": "477280"
  },
  {
    "text": "you run it there's this concept of a whole team owning the service kind of",
    "start": "477280",
    "end": "482650"
  },
  {
    "text": "soup to nuts from the from the development all the way to production so",
    "start": "482650",
    "end": "487690"
  },
  {
    "text": "you have developers carrying a pager and potentially being paying that 3m because",
    "start": "487690",
    "end": "493090"
  },
  {
    "text": "the software is not running in production so we're seeing two benefits come out of this the first one is the",
    "start": "493090",
    "end": "500350"
  },
  {
    "text": "developers are usually more they have more ownership and they also have more satisfaction in their job because they",
    "start": "500350",
    "end": "507700"
  },
  {
    "text": "are able to actually interact directly with the customers and and see their their baby operate in production and the second",
    "start": "507700",
    "end": "514870"
  },
  {
    "text": "benefit is code quality increases and then the next next next one is black box",
    "start": "514870",
    "end": "521919"
  },
  {
    "text": "so kind of a an ominous title here but the real idea behind the black box is",
    "start": "521920",
    "end": "526960"
  },
  {
    "text": "each micro service is a black box to the others and so there's a real benefit to this which is",
    "start": "526960",
    "end": "534080"
  },
  {
    "text": "removing coupling because if you're too open if you let other services interact",
    "start": "534080",
    "end": "540050"
  },
  {
    "text": "with components of your micro service you're going to increase coupling so you you might be tempted to open your data",
    "start": "540050",
    "end": "546020"
  },
  {
    "text": "layer as micro-service open your data layer to other services but when you do this you are now slowed down when you",
    "start": "546020",
    "end": "553400"
  },
  {
    "text": "want to update your data layer or your schema you're gonna have to agree with all the teams that you're servicing that",
    "start": "553400",
    "end": "559520"
  },
  {
    "text": "you're doing this whereas if you instead offer a one one-stop-shop API point with",
    "start": "559520",
    "end": "567140"
  },
  {
    "text": "which to interact you can do whatever you want behind this you own a black box and other services are a black box okay",
    "start": "567140",
    "end": "575270"
  },
  {
    "text": "then so services are also independent decentralized the independence goes the",
    "start": "575270",
    "end": "583910"
  },
  {
    "text": "independence and the decentralization comes to the decision making and the the",
    "start": "583910",
    "end": "589280"
  },
  {
    "text": "idea that all these teams are empowered to make the choices that they want and",
    "start": "589280",
    "end": "594790"
  },
  {
    "text": "I'll skip on them for now because I'm also mindful of time and I want to make",
    "start": "594790",
    "end": "601220"
  },
  {
    "text": "sure we'll as well as time and we want to try to take some time for questions",
    "start": "601220",
    "end": "607390"
  },
  {
    "text": "now the deport the part about polyglot is being able to speak any technology so as a micro service you own the",
    "start": "607390",
    "end": "614600"
  },
  {
    "text": "technology and the technology choices so if you want to use if you want to change",
    "start": "614600",
    "end": "620450"
  },
  {
    "text": "from a relational database into and instead you bet you'd better use a key",
    "start": "620450",
    "end": "625760"
  },
  {
    "text": "value store then you know it's your choice and you you're free to do them so",
    "start": "625760",
    "end": "633530"
  },
  {
    "text": "we're seeing a lot of actually cool things come out of this model if you're",
    "start": "633530",
    "end": "640160"
  },
  {
    "text": "familiar with Netflix's open source tools such as the simian army or or the",
    "start": "640160",
    "end": "646550"
  },
  {
    "text": "kiya chaos monkey so these tools come out of teams that are empowered to do whether what they want what what they",
    "start": "646550",
    "end": "653180"
  },
  {
    "text": "need for their business and then not all the teams have to reinvent the wheel right so one team will potentially come",
    "start": "653180",
    "end": "660320"
  },
  {
    "text": "up with a tool that actually has two that they need for their own service and",
    "start": "660320",
    "end": "667210"
  },
  {
    "text": "and by liberating it and and giving it to other teams within the company or even open sourcing it they get a lot of",
    "start": "667210",
    "end": "674650"
  },
  {
    "text": "traction how do this okay so this was this was some of the key components for",
    "start": "674650",
    "end": "681730"
  },
  {
    "text": "micro for successful micro services Amazon UCS fits into the picture because",
    "start": "681730",
    "end": "689170"
  },
  {
    "text": "it is high performance platform for running docker containers on on a fleet",
    "start": "689170",
    "end": "694480"
  },
  {
    "text": "of ec2 instances and it is fully managed and you don't have to you don't have to",
    "start": "694480",
    "end": "701710"
  },
  {
    "text": "stand up a whole new container management system you don't have to scale it make sure that it is secure etc",
    "start": "701710",
    "end": "709300"
  },
  {
    "text": "all of this is done for you it also features shared state optimistic scheduling and this is this sounds",
    "start": "709300",
    "end": "715570"
  },
  {
    "text": "really good and all it means is that you can run many schedulers on the cluster at the same time and this offers a lot",
    "start": "715570",
    "end": "722080"
  },
  {
    "text": "of freedom and ECS integrates with a lot",
    "start": "722080",
    "end": "727120"
  },
  {
    "text": "of other AWS services such as Amazon Cloud Watch for monitoring and logging",
    "start": "727120",
    "end": "732210"
  },
  {
    "text": "for example your containers can be given a darker log a darker log driver which",
    "start": "732210",
    "end": "739930"
  },
  {
    "text": "is AWS logs and so your your standard output is going to go straight into",
    "start": "739930",
    "end": "745360"
  },
  {
    "text": "cloud wash logs you can then search on it you can you can put a lock alerts on it it's very handful and then helpful sorry",
    "start": "745360",
    "end": "753370"
  },
  {
    "text": "and then it also integrates with code star all right I gotta pick up the pace a little bit so we are seeing a bunch of",
    "start": "753370",
    "end": "759910"
  },
  {
    "text": "use cases on ECS will is going to talk about a third one you can see two on the",
    "start": "759910",
    "end": "766840"
  },
  {
    "text": "screen right here so the first one is batch jobs because you have this large surface of compute that is ready for for",
    "start": "766840",
    "end": "776410"
  },
  {
    "text": "sending jobs to it and each task can run as a container or a set of containers and then when it's done it disappears",
    "start": "776410",
    "end": "783100"
  },
  {
    "text": "leave the resources for another job and you can easily scale your cluster to mix",
    "start": "783100",
    "end": "788350"
  },
  {
    "text": "to make room for a bigger bigger batch or size it down and of course long",
    "start": "788350",
    "end": "793660"
  },
  {
    "text": "running apps right like long running micro services for example you have the benefit of health",
    "start": "793660",
    "end": "799570"
  },
  {
    "text": "management if a task was to fail then another one is going to be started for",
    "start": "799570",
    "end": "804850"
  },
  {
    "text": "you you can easily scale out and scale in according to according to two",
    "start": "804850",
    "end": "809920"
  },
  {
    "text": "dimensions which I'll explain and the service is easier where so you win to have out-of-the-box high availability",
    "start": "809920",
    "end": "816399"
  },
  {
    "text": "for your service availability zones ok",
    "start": "816399",
    "end": "822699"
  },
  {
    "text": "so who in this room is familiar with the 12 factor out ok this is really good and",
    "start": "822699",
    "end": "831899"
  },
  {
    "text": "it's not half of the room though I would really recommend that you you go to 12",
    "start": "831899",
    "end": "837550"
  },
  {
    "text": "factor net yes and and and read on these they're very easy to read each principle",
    "start": "837550",
    "end": "845019"
  },
  {
    "text": "is less than a page long and they make a lot of sense some some of these like",
    "start": "845019",
    "end": "850569"
  },
  {
    "text": "I'll give some of examples like for example of processes is one of them and it stipulates execute the app as one or",
    "start": "850569",
    "end": "857350"
  },
  {
    "text": "more stateless processes so stateless kind of makes sense for containers right",
    "start": "857350",
    "end": "862769"
  },
  {
    "text": "another one is dependencies explicitly declare and isolate dependencies so",
    "start": "862769",
    "end": "867839"
  },
  {
    "text": "throughout the test the the reference architectures that are I'm going to show",
    "start": "867839",
    "end": "874000"
  },
  {
    "text": "to you today there's going to be icons and these icons will reference the 12 factor app so let's go with the first",
    "start": "874000",
    "end": "881410"
  },
  {
    "text": "one and the first one is automatic scaling because in the cloud you really",
    "start": "881410",
    "end": "886690"
  },
  {
    "text": "don't want to have to worry about whether you're servicing 10 users or 10,000 or 10 million and so you want to",
    "start": "886690",
    "end": "892630"
  },
  {
    "text": "be able to scale and and when you're done using the resources you just scale back so we at ECS we like to recommend",
    "start": "892630",
    "end": "902230"
  },
  {
    "text": "that you scale across two dimensions the first dimension is that the app level your service how many tasks are in a",
    "start": "902230",
    "end": "909279"
  },
  {
    "text": "service and and this you can easily peg against a metric like latency or queue",
    "start": "909279",
    "end": "917350"
  },
  {
    "text": "depth and then the other dimension for scaling will be the cluster itself how",
    "start": "917350",
    "end": "923139"
  },
  {
    "text": "many instances are the hosts of these containers and and this you can peg",
    "start": "923139",
    "end": "929560"
  },
  {
    "text": "against the metric is more cluster related such as memory reservation or CPU reservation so in AWS",
    "start": "929560",
    "end": "942979"
  },
  {
    "text": "you're probably familiar with something called ec2 rolls or I am rolls it is a",
    "start": "942979",
    "end": "950829"
  },
  {
    "text": "an easy way to delegate permissions to a computer source without having to pass",
    "start": "950829",
    "end": "956709"
  },
  {
    "text": "API keys or sorry access keys or or username and passwords and because we",
    "start": "956709",
    "end": "966319"
  },
  {
    "text": "consider containers to be just another compute primitive within the WS equal on",
    "start": "966319",
    "end": "972739"
  },
  {
    "text": "the same level as ec2 or lambda functions you can now give I am roles to",
    "start": "972739",
    "end": "980419"
  },
  {
    "text": "your tasks and what this means is that on the same ec2 instance you can have a task that is allowed to read from s3 and",
    "start": "980419",
    "end": "990279"
  },
  {
    "text": "not do anything else and on and you could also have a test that is able to write to dynamodb but not be allowed to",
    "start": "990279",
    "end": "997609"
  },
  {
    "text": "do anything else so it's very powerful and it enables a lot of security right away speaking about sharing passwords it",
    "start": "997609",
    "end": "1008429"
  },
  {
    "text": "it could be that at some point you will want to delegate credentials to log in",
    "start": "1008429",
    "end": "1014799"
  },
  {
    "text": "to a database to some of your applications and the way to do this it's",
    "start": "1014799",
    "end": "1020769"
  },
  {
    "text": "been a problem that people and embracing services and micro services have had for",
    "start": "1020769",
    "end": "1026350"
  },
  {
    "text": "a while and so there are solutions out there but here's a solution that uses nothing but Amazon primitives and the",
    "start": "1026350",
    "end": "1033699"
  },
  {
    "text": "way that it works is that the password that you're going to pass to your service is going to be encrypted with an",
    "start": "1033699",
    "end": "1040058"
  },
  {
    "text": "KMS key and you give the task an IM role",
    "start": "1040059",
    "end": "1047619"
  },
  {
    "text": "and the role says you can use this key to decrypt and that's it so basically as",
    "start": "1047619",
    "end": "1052720"
  },
  {
    "text": "the test comes up and it needs to access the database password is going to make a",
    "start": "1052720",
    "end": "1058210"
  },
  {
    "text": "request for this variable and is going to be decrypted because you get access you have access to the key and sorry and this uses ec2",
    "start": "1058210",
    "end": "1067280"
  },
  {
    "text": "Systems Manager continuous deployment is obviously top of mind for a lot of",
    "start": "1067280",
    "end": "1074600"
  },
  {
    "text": "developers the ability to go from committing code and pushing it all the way to having your code running in",
    "start": "1074600",
    "end": "1081020"
  },
  {
    "text": "production why not or in another environment without touching anything so you can do this with you can do this all",
    "start": "1081020",
    "end": "1087799"
  },
  {
    "text": "in on AWS you don't have to you could you could send your code to code commit or even another code repository and then",
    "start": "1087799",
    "end": "1096049"
  },
  {
    "text": "through either a web hook or a notification you would have coold",
    "start": "1096049",
    "end": "1101270"
  },
  {
    "text": "pipeline trigger a deployment and so code pipeline is going to start by sending a message to code build so that",
    "start": "1101270",
    "end": "1109280"
  },
  {
    "text": "code bill can start compiling right and putting it together your application",
    "start": "1109280",
    "end": "1114520"
  },
  {
    "text": "inside a container image and push this docker image to Amazon ec2 to Amazon",
    "start": "1114520",
    "end": "1122080"
  },
  {
    "text": "Elastic container registry and then once this is done you will have code pipeline",
    "start": "1122080",
    "end": "1129140"
  },
  {
    "text": "trigger a CloudFormation template a stack update which is going to update",
    "start": "1129140",
    "end": "1134570"
  },
  {
    "text": "the service to ECS and and your service can run on spot instances with like a",
    "start": "1134570",
    "end": "1142250"
  },
  {
    "text": "spot fleet for example which behave exactly like an auto scaling group but you can pay for it at fifty to ninety",
    "start": "1142250",
    "end": "1148730"
  },
  {
    "text": "percent discount and the reason why we're using cloud formation here is because it as an embedded it has a",
    "start": "1148730",
    "end": "1155330"
  },
  {
    "text": "rollback function which can be very useful all right let's do blue green deployment",
    "start": "1155330",
    "end": "1161360"
  },
  {
    "text": "so blue green deployment is also a very popular way of upgrading assist service",
    "start": "1161360",
    "end": "1169820"
  },
  {
    "text": "and and the reason is because you just stand up a very like a mirror of the the",
    "start": "1169820",
    "end": "1174919"
  },
  {
    "text": "application along with the infrastructure and then you just redirect traffic it's just running a",
    "start": "1174919",
    "end": "1180200"
  },
  {
    "text": "different version of the code so in this case what we're doing here is we're",
    "start": "1180200",
    "end": "1187850"
  },
  {
    "text": "doing the switch at the DNS level we're using weighted round robin in route 53 to send some of the traffic",
    "start": "1187850",
    "end": "1194450"
  },
  {
    "text": "at first to the first load bouncer and then we switch it to another load balancer but you could also do this with",
    "start": "1194450",
    "end": "1201440"
  },
  {
    "text": "so the previous solution applies very well to classic load balancer but with",
    "start": "1201440",
    "end": "1207490"
  },
  {
    "text": "application load bouncer and network load balancer you can actually do the switch at the target group level so you",
    "start": "1207490",
    "end": "1216470"
  },
  {
    "text": "gotta be very careful we gotta pay attention these two groups are going to switch there you go and all",
    "start": "1216470",
    "end": "1222470"
  },
  {
    "text": "you do the way you do to do this is just an API call so that was a way to do a",
    "start": "1222470",
    "end": "1228070"
  },
  {
    "text": "Bluegreen service discovery what is the problem the problem is that micro",
    "start": "1228070",
    "end": "1235399"
  },
  {
    "text": "services have an average life expectancy that is very restricted so we used to",
    "start": "1235399",
    "end": "1241520"
  },
  {
    "text": "have bare metal machines but with probably life expectancy of months or",
    "start": "1241520",
    "end": "1249020"
  },
  {
    "text": "even years and then virtual machines life expectancy of weeks two months",
    "start": "1249020",
    "end": "1254390"
  },
  {
    "text": "maybe weeks and an average life expectancy for containers is actually days and so how do they find each other",
    "start": "1254390",
    "end": "1262669"
  },
  {
    "text": "if they're changing all the time knowing knowing each other's IP is is critical or at least a name and so here's a DIY",
    "start": "1262669",
    "end": "1271760"
  },
  {
    "text": "way of doing service discovery using again Amazon primitives so you'll have",
    "start": "1271760",
    "end": "1278470"
  },
  {
    "text": "we're using cloud watch we're using the the event stream that comes out of ECS",
    "start": "1278470",
    "end": "1286309"
  },
  {
    "text": "there's no no pooling required instead you just subscribe and as events are",
    "start": "1286309",
    "end": "1291649"
  },
  {
    "text": "trickling down you can pipe them into cloud watch events and take action on it and so one action could be oh here's a",
    "start": "1291649",
    "end": "1298549"
  },
  {
    "text": "new service that just got started get the point of entry for these services",
    "start": "1298549",
    "end": "1305539"
  },
  {
    "text": "and then and add them to route 53 internally hosted zone as a DNS record",
    "start": "1305539",
    "end": "1313659"
  },
  {
    "text": "but this works both ways right if a service gets deleted you can also remove",
    "start": "1313659",
    "end": "1319059"
  },
  {
    "text": "remove the rows remove the records but",
    "start": "1319059",
    "end": "1324080"
  },
  {
    "text": "you don't have to do this anymore because very soon and",
    "start": "1324080",
    "end": "1329400"
  },
  {
    "text": "announced I think it's been announced I hope it's been announced because otherwise you're getting a little bit so",
    "start": "1329400",
    "end": "1336010"
  },
  {
    "text": "don't tell me more details on this at Cohn Co n 403 on Friday at 10:00 a.m.",
    "start": "1336010",
    "end": "1343360"
  },
  {
    "text": "where Shuba is going to go into details as to how this applies to containers but basically route 53 is going to support",
    "start": "1343360",
    "end": "1350920"
  },
  {
    "text": "service discovery it's going to be it's going to be available later maybe maybe",
    "start": "1350920",
    "end": "1356680"
  },
  {
    "text": "in maybe in q1 I believe and so basically you'll just have to tick a box",
    "start": "1356680",
    "end": "1363310"
  },
  {
    "text": "in ECS when you create a service and the record is going to be maintained by",
    "start": "1363310",
    "end": "1368650"
  },
  {
    "text": "route 53 so you won't you won't have to do anything I won't talk to more about",
    "start": "1368650",
    "end": "1373690"
  },
  {
    "text": "this I'll leave the interested parties to go to the session okay how is nginx",
    "start": "1373690",
    "end": "1380530"
  },
  {
    "text": "an advanced concept well you know I think it deserves to be mentioned because it is extremely powerful this is",
    "start": "1380530",
    "end": "1387730"
  },
  {
    "text": "you know kind of the Swiss Army knife in in the whole micro-services world I put a little URL there to point you to",
    "start": "1387730",
    "end": "1395050"
  },
  {
    "text": "the blog post about it all of these reference architectures are available either as a blog post or a github repo",
    "start": "1395050",
    "end": "1401010"
  },
  {
    "text": "so feel free to go and google google them the idea here to use nginx is",
    "start": "1401010",
    "end": "1406330"
  },
  {
    "text": "because you'll get both performance and security out of it I've just right out",
    "start": "1406330",
    "end": "1412120"
  },
  {
    "text": "of the box so you could have an application server that is barely web friendly and turn it into an API an API",
    "start": "1412120",
    "end": "1418480"
  },
  {
    "text": "server and so nginx offers security because if you open this to the world if",
    "start": "1418480",
    "end": "1425380"
  },
  {
    "text": "you open your servers to the world you're going to see all kinds of requests coming your way tools like zmu that allow that allowed",
    "start": "1425380",
    "end": "1434560"
  },
  {
    "text": "to scan for vulnerabilities you know there's no reason why this should go all the way to your application server you can very much filter it right in front",
    "start": "1434560",
    "end": "1441640"
  },
  {
    "text": "of it with an engine X and then nginx are some really cool features like gzip you know you can you can save a lot of",
    "start": "1441640",
    "end": "1448240"
  },
  {
    "text": "time by by compressing the size of the package that you send back and forth and",
    "start": "1448240",
    "end": "1454450"
  },
  {
    "text": "you can also do custom high resolution metrics so this is a blog poll that appeared recently you you get about",
    "start": "1454450",
    "end": "1461570"
  },
  {
    "text": "one minute resolution out-of-the-box with a lot of our services and with this",
    "start": "1461570",
    "end": "1467450"
  },
  {
    "text": "one you can get up to the second granularity on your metrics and the way",
    "start": "1467450",
    "end": "1473539"
  },
  {
    "text": "this works is you have a cloud watch events clock that triggers step",
    "start": "1473539",
    "end": "1479179"
  },
  {
    "text": "functions and the step functions are going to query ECS state and insert into cloud watch",
    "start": "1479179",
    "end": "1485710"
  },
  {
    "text": "all right these were the reference architectures now we're going to go into test placement examples and I'm going to",
    "start": "1485710",
    "end": "1492109"
  },
  {
    "text": "go rather quickly into it but I just want you to get the point of what you can do with task placement it is is",
    "start": "1492109",
    "end": "1498859"
  },
  {
    "text": "quite powerful so the most basic example is that you can indicate that you want",
    "start": "1498859",
    "end": "1505519"
  },
  {
    "text": "your tasks to lend on a certain type of instance right so let's say you have a",
    "start": "1505519",
    "end": "1511580"
  },
  {
    "text": "workload that needs to be on GPU but you have a tera genius cluster you just",
    "start": "1511580",
    "end": "1517399"
  },
  {
    "text": "indicate that you want them to lend on g2 but you could also say that you want your containers or your tasks to go into",
    "start": "1517399",
    "end": "1526129"
  },
  {
    "text": "a certain into a certain type but not a",
    "start": "1526129",
    "end": "1531289"
  },
  {
    "text": "certain availability zone or end a certain ability zone right so you can target this way slightly more advanced",
    "start": "1531289",
    "end": "1540379"
  },
  {
    "text": "is you can spread across zone and then bin pack so this is best of both worlds",
    "start": "1540379",
    "end": "1545539"
  },
  {
    "text": "because you get the high availability of having your workload straddle of a zones but neighbor as much as possible on the",
    "start": "1545539",
    "end": "1553759"
  },
  {
    "text": "same instance so that you use as few instances as possible then you've got",
    "start": "1553759",
    "end": "1559249"
  },
  {
    "text": "affinity and entire Finity so you can indicate that all my web servers should be neighbors of each other but or you",
    "start": "1559249",
    "end": "1566809"
  },
  {
    "text": "could say something like there should be no task that is a neighbor of my",
    "start": "1566809",
    "end": "1572599"
  },
  {
    "text": "database for example so you can do this",
    "start": "1572599",
    "end": "1578389"
  },
  {
    "text": "at runtime when you start a task or you can just embed it within your service definition so that it always applies and",
    "start": "1578389",
    "end": "1587649"
  },
  {
    "text": "that's all for me I'm going to leave you we'll and I might come back on stage for",
    "start": "1587649",
    "end": "1594820"
  },
  {
    "text": "a few questions if we have time Thank You Pierre hi I'm will McCutchen I'm on",
    "start": "1594820",
    "end": "1601570"
  },
  {
    "text": "the platform infrastructure team at BuzzFeed so what I want to talk about is our experience taking a lot of the best",
    "start": "1601570",
    "end": "1608770"
  },
  {
    "text": "practices techniques technologies that Pierre just described and and building our own platform on top of ECS our",
    "start": "1608770",
    "end": "1617410"
  },
  {
    "text": "platform is called rig that's a complete platform for containerized services but sort of more than that it's it's it's an",
    "start": "1617410",
    "end": "1624070"
  },
  {
    "text": "opinionated indian workflow from development all the way through production comes with a handful of core",
    "start": "1624070",
    "end": "1631120"
  },
  {
    "text": "services bundled with it they do you know automated monitoring of every deployed service in its dependencies a",
    "start": "1631120",
    "end": "1637170"
  },
  {
    "text": "continuous integration server and a and an easy-to-use deploy user interface",
    "start": "1637170",
    "end": "1643960"
  },
  {
    "text": "that makes it really easy for anybody to safely deploy their services so just a",
    "start": "1643960",
    "end": "1649240"
  },
  {
    "text": "quick update rig we've built rig it's been in production about 20 months we have 200 or more users those users are",
    "start": "1649240",
    "end": "1656710"
  },
  {
    "text": "mostly engineers but we also have designers product folks using rig to deploy services you know in the time",
    "start": "1656710",
    "end": "1664420"
  },
  {
    "text": "it's been in production we're well over 50,000 deploys as you can see on the graph the you know the the rate of",
    "start": "1664420",
    "end": "1670450"
  },
  {
    "text": "deploys is increasing for the last month or so were averaging about 180 deploys a day two to four hundred different",
    "start": "1670450",
    "end": "1677770"
  },
  {
    "text": "services running production six ECS clusters across to aid abuse regions as",
    "start": "1677770",
    "end": "1683080"
  },
  {
    "text": "powered by you know 80 to 100 ec2 instances depending on the state of our auto scaling groups and demand and and",
    "start": "1683080",
    "end": "1692080"
  },
  {
    "text": "so I'll talk a little about how we got to the point where we wanted to build rig we started like like many people",
    "start": "1692080",
    "end": "1700300"
  },
  {
    "text": "start with a monolith you know back in 2006 BuzzFeed was founded there was a small engineering team that built a web",
    "start": "1700300",
    "end": "1706510"
  },
  {
    "text": "application that powered buzzfeed.com you know as Pierre mentioned like that's that's the right way to start you know",
    "start": "1706510",
    "end": "1712690"
  },
  {
    "text": "you have a small team working on a small small project a monolith or a single application is certainly the quickest",
    "start": "1712690",
    "end": "1718480"
  },
  {
    "text": "way to get to get to in front of users but you know over the next ten years the monolith doesn't",
    "start": "1718480",
    "end": "1724409"
  },
  {
    "text": "scale very well in terms of in terms of you know it grows and come in in functionality and complication you also",
    "start": "1724409",
    "end": "1731129"
  },
  {
    "text": "your engineering team grows so suddenly have a whole lot of people trying to contribute code to the sprawling",
    "start": "1731129",
    "end": "1736259"
  },
  {
    "text": "codebase and you get to the point where as Pierre mentioned you have you know merge days for us it was you know the",
    "start": "1736259",
    "end": "1743580"
  },
  {
    "text": "the size and scope of releases of this monolithic application grew to the point",
    "start": "1743580",
    "end": "1748679"
  },
  {
    "text": "where you know we we we had dedicated release managers whose job was to spend",
    "start": "1748679",
    "end": "1755249"
  },
  {
    "text": "an entire day in some cases in the best case an entire day getting a deploy out of production in the worst cases a",
    "start": "1755249",
    "end": "1760830"
  },
  {
    "text": "deploy you know would take upwards of a week to get all the way out to production fully validated tested and working correctly so so you know this",
    "start": "1760830",
    "end": "1768629"
  },
  {
    "text": "obviously slowed down the rate at which we could actually work on our projects and at the same time BuzzFeed you know",
    "start": "1768629",
    "end": "1774570"
  },
  {
    "text": "sort of its scope expanded beyond BuzzFeed calm and and the organizational structure we adopted also changed and",
    "start": "1774570",
    "end": "1781919"
  },
  {
    "text": "and so again like like many of y'all are probably doing we we decided the answer",
    "start": "1781919",
    "end": "1786960"
  },
  {
    "text": "to these problems is we'll adopt a service-oriented architecture so we reorganized around small self-sufficient",
    "start": "1786960",
    "end": "1795179"
  },
  {
    "text": "product engineering teams each working on independent services sort of breaking things out from the monolith new",
    "start": "1795179",
    "end": "1801419"
  },
  {
    "text": "services were being written and and sort of the initial results you can you can see here we we sort of got ahead of",
    "start": "1801419",
    "end": "1807839"
  },
  {
    "text": "ourselves and and a reorganization in terms of people vastly outpaced",
    "start": "1807839",
    "end": "1813330"
  },
  {
    "text": "our technological sophistication and operational processes for actually managing some of this complication and",
    "start": "1813330",
    "end": "1820739"
  },
  {
    "text": "we were at the point where we had you know many teams building many different services but the road to production was",
    "start": "1820739",
    "end": "1826429"
  },
  {
    "text": "arduous you know you had to navigate a variety of JIRA tickets you had to have our overworked ops team manually",
    "start": "1826429",
    "end": "1833249"
  },
  {
    "text": "provisioning ec2 instances and and databases and you know s3 buckets",
    "start": "1833249",
    "end": "1839290"
  },
  {
    "text": "and security groups and stuff the ops team and the and the product engineering teams both had to wrestle with not one",
    "start": "1839290",
    "end": "1846040"
  },
  {
    "text": "but two heavyweight config management systems in chef and ansible and as you can imagine that's a lot of fun and and",
    "start": "1846040",
    "end": "1853810"
  },
  {
    "text": "really what you know ultimately it took weeks for any new project to get from you know from from development out into",
    "start": "1853810",
    "end": "1860110"
  },
  {
    "text": "production and and that you know that they're obviously slowed us down a lot and and even worse than the lack of like",
    "start": "1860110",
    "end": "1867370"
  },
  {
    "text": "the the pain of provisioning new services probably was black of consistency they grew out of this we had many different independent teams working",
    "start": "1867370",
    "end": "1874390"
  },
  {
    "text": "sort of again independently which is great but we had you know each team picked their own development environment",
    "start": "1874390",
    "end": "1880750"
  },
  {
    "text": "each team would have a slightly different way to deploy their services each team had a slightly different way to have access to like their logs and",
    "start": "1880750",
    "end": "1888100"
  },
  {
    "text": "instrumentation and production and help debug production issues and it meant that the operations team sort of had to",
    "start": "1888100",
    "end": "1894760"
  },
  {
    "text": "relearn each new service every time something went wrong so a few of us in",
    "start": "1894760",
    "end": "1900100"
  },
  {
    "text": "infrastructure sat down during a hack week and built rig as a proof-of-concept our attempt to sort of solve some of",
    "start": "1900100",
    "end": "1906220"
  },
  {
    "text": "these problems and and I'll talk through some of the things we learned in the process of building and I think this",
    "start": "1906220",
    "end": "1911710"
  },
  {
    "text": "applies sort of to anybody who's considering going down this road with with Enys you know any any sizable",
    "start": "1911710",
    "end": "1917920"
  },
  {
    "text": "engineering team but but you know our first guiding principle was really a focus on the engineering experience we",
    "start": "1917920",
    "end": "1924910"
  },
  {
    "text": "wanted to make it you know minimize the number of times in the course of working on a service you want to throw your",
    "start": "1924910",
    "end": "1930040"
  },
  {
    "text": "laptop out the window and so that was a real focus we want to make our development deployment workflow as",
    "start": "1930040",
    "end": "1936370"
  },
  {
    "text": "frictionless as possible there's nothing too shocking about this this is sort of",
    "start": "1936370",
    "end": "1941950"
  },
  {
    "text": "the rigged workflow but but I'll sort of talk through some of the some of the slightly interesting parts of it you",
    "start": "1941950",
    "end": "1948670"
  },
  {
    "text": "know first of all all rig services are in a single monolithic git repo which is",
    "start": "1948670",
    "end": "1954520"
  },
  {
    "text": "maybe a controversial decision but especially you know when you when you're talking about it you know I showed you",
    "start": "1954520",
    "end": "1959650"
  },
  {
    "text": "have we have four hundred services in production 200 developers working on that's that's a lot of people in one a",
    "start": "1959650",
    "end": "1964900"
  },
  {
    "text": "lot of people in one code in one repo but we think that the benefits in terms of consistency and and",
    "start": "1964900",
    "end": "1972160"
  },
  {
    "text": "discoverability and invisibility really really outweigh the downsides in demography both so you know we have our",
    "start": "1972160",
    "end": "1979120"
  },
  {
    "text": "developers she's gonna work on a on a new feature in for a service so she's down a rigged egg debian which is just a",
    "start": "1979120",
    "end": "1985570"
  },
  {
    "text": "vagrant box everybody's using the exact same debian across the company you know she so she cuts a branch she",
    "start": "1985570",
    "end": "1991960"
  },
  {
    "text": "starts hacking at nvm she runs the the rig command-line tooling that we provide run to run her service locally interact",
    "start": "1991960",
    "end": "1999430"
  },
  {
    "text": "with it rig tests to run her unit tests integration tests whatever test she has when she's satisfied with it she pushes",
    "start": "1999430",
    "end": "2005850"
  },
  {
    "text": "it up to github opens a pull request github sends a web hook to builder which is rigs built in continuous integration",
    "start": "2005850",
    "end": "2011850"
  },
  {
    "text": "service it's also running on rig builder receives the commits looks at what's",
    "start": "2011850",
    "end": "2017340"
  },
  {
    "text": "changed you know does its job builds containers test them pushes them up to",
    "start": "2017340",
    "end": "2022620"
  },
  {
    "text": "our ECR registries at that point our developer can deploy her service so she",
    "start": "2022620",
    "end": "2027630"
  },
  {
    "text": "goes to our deploy user interface and you know she only has to make three simple choices service version and",
    "start": "2027630",
    "end": "2034110"
  },
  {
    "text": "target cluster and and and this sort of consistency you know everybody the",
    "start": "2034110",
    "end": "2039510"
  },
  {
    "text": "company is going through the same process even those of us on the infrastructure team and and it's",
    "start": "2039510",
    "end": "2044730"
  },
  {
    "text": "important that the same process applies whether you're talking about a change for an existing service or a brand new",
    "start": "2044730",
    "end": "2050669"
  },
  {
    "text": "service that doesn't exist yet which which means we can reduce that time down from weeks to get a new service out to",
    "start": "2050669",
    "end": "2056550"
  },
  {
    "text": "production literally two minutes from from pushing your code to github to having it available to deploy to rig",
    "start": "2056550",
    "end": "2062490"
  },
  {
    "text": "actually setting it up and running in production and and that you know that makes a big deal in terms of how fast",
    "start": "2062490",
    "end": "2068100"
  },
  {
    "text": "our teams can move and iterate on the projects the next big thing we learned we decided you know our next big focus",
    "start": "2068100",
    "end": "2077070"
  },
  {
    "text": "was on sort of operational simplicity and consistency and to that end we sort",
    "start": "2077070",
    "end": "2082740"
  },
  {
    "text": "of developed these sort of abstractions a rig service is is made of a collection of things the first thing is this",
    "start": "2082740",
    "end": "2089370"
  },
  {
    "text": "service definition that defines sort of a you know the structure like the the ad",
    "start": "2089370",
    "end": "2095409"
  },
  {
    "text": "to the service in terms of how many instances were running whether it's exposing a network interface its",
    "start": "2095410",
    "end": "2101980"
  },
  {
    "text": "resource requirements and importantly who's responsible for the service which which gets back to you know you build it",
    "start": "2101980",
    "end": "2108070"
  },
  {
    "text": "you run it like Pierre was talking about and and you know we picked this and this",
    "start": "2108070",
    "end": "2115360"
  },
  {
    "text": "in this way this sort of runtime agnostic way to configure a service and this config the configuration file again",
    "start": "2115360",
    "end": "2122920"
  },
  {
    "text": "as a way instead of asking people to write individual you know ECS task definitions or docker compose files this",
    "start": "2122920",
    "end": "2129760"
  },
  {
    "text": "sort of higher level abstraction gives us a lot of leverages operators of this of this platform to both constrain the",
    "start": "2129760",
    "end": "2137170"
  },
  {
    "text": "features we support and and really like dial in on what we know we need to support and make make services more",
    "start": "2137170",
    "end": "2142540"
  },
  {
    "text": "consistent across the board and also gives us leverage to to sort of sub out implementation details as necessary so",
    "start": "2142540",
    "end": "2149410"
  },
  {
    "text": "you know for instance with the announced of eks we could we could potentially about eks for ECS is our scheduling back",
    "start": "2149410",
    "end": "2155950"
  },
  {
    "text": "in and and and the consistency here also you know benefits our developers the",
    "start": "2155950",
    "end": "2162550"
  },
  {
    "text": "developer can move from one service to another to another and and every service is going to have the same basic",
    "start": "2162550",
    "end": "2167650"
  },
  {
    "text": "structure you know if you worked on a rig service and you jump into another one exactly where everything is you know how to see if it's how its configured",
    "start": "2167650",
    "end": "2174070"
  },
  {
    "text": "and it allows us this is what allows us to automatically generate solid monitoring configuration for every",
    "start": "2174070",
    "end": "2180490"
  },
  {
    "text": "deployed service you know we ship every service is logs directly a paper trail",
    "start": "2180490",
    "end": "2186010"
  },
  {
    "text": "that's that's logging provider we use so if you know the name of a service you can easily construct a query that allows",
    "start": "2186010",
    "end": "2192640"
  },
  {
    "text": "you to see that services logs all of this is really handy when especially when things go wrong and you need to",
    "start": "2192640",
    "end": "2198580"
  },
  {
    "text": "jump in and potentially debug an unfamiliar service and and a really",
    "start": "2198580",
    "end": "2205270"
  },
  {
    "text": "important thing this is this is a lesson that we learned it's probably very obvious to everybody in this room but what let us go from a week long",
    "start": "2205270",
    "end": "2212320"
  },
  {
    "text": "prototype to to a viable platform running production workloads in a matter",
    "start": "2212320",
    "end": "2217990"
  },
  {
    "text": "of just a couple of months was it you know to take advantage of all of the good stuff you get from the AWS platform",
    "start": "2217990",
    "end": "2224470"
  },
  {
    "text": "this is what a rig cluster looks like there's nothing special or magical here it's what you",
    "start": "2224470",
    "end": "2229620"
  },
  {
    "text": "would expect everything's in a VP see we have an auto scaling group you know filled with ec2 instances we use we",
    "start": "2229620",
    "end": "2237150"
  },
  {
    "text": "build immutable a.m. eyes to roll those out to the auto scaling group and and so",
    "start": "2237150",
    "end": "2243330"
  },
  {
    "text": "you know the auto scaling group provides reliability if a host fails it'll make sure that we'll bring another one up but",
    "start": "2243330",
    "end": "2248550"
  },
  {
    "text": "also it provides capacity we scale based on reservation CPU memory reservation",
    "start": "2248550",
    "end": "2255840"
  },
  {
    "text": "like you've mentioned so the the clusters themselves will expand and contract in terms it on in terms of",
    "start": "2255840",
    "end": "2260880"
  },
  {
    "text": "demand the east the ECS services themselves also can scale based on cloud",
    "start": "2260880",
    "end": "2267090"
  },
  {
    "text": "watch metrics so like P I mentioned the number of tasks an individual service can run will expand and contract sort of",
    "start": "2267090",
    "end": "2273450"
  },
  {
    "text": "automatically we get all of that from from from AWS and maybe the most",
    "start": "2273450",
    "end": "2279150"
  },
  {
    "text": "important thing is we kind of punted on service discovery we took the the",
    "start": "2279150",
    "end": "2284190"
  },
  {
    "text": "dumbest possible approach which is every service it exposes a network interface",
    "start": "2284190",
    "end": "2290100"
  },
  {
    "text": "gets a load balancer and a route 53 DNS entry that's a deterministic which which",
    "start": "2290100",
    "end": "2297120"
  },
  {
    "text": "is not as sophisticated as some of the techniques pierre was describing but but is really effective and simple and and",
    "start": "2297120",
    "end": "2302700"
  },
  {
    "text": "you get really a lot out of out of the the deep integration that ECS has with load balancers where we're out of the",
    "start": "2302700",
    "end": "2309870"
  },
  {
    "text": "box you automatically get service level health checks the little tie into the ecs scheduler where it'll reschedule",
    "start": "2309870",
    "end": "2316290"
  },
  {
    "text": "services starts failing as health checks and importantly you get safe rolling",
    "start": "2316290",
    "end": "2321480"
  },
  {
    "text": "deploys without doing any additional work on your own so so you know this is",
    "start": "2321480",
    "end": "2326730"
  },
  {
    "text": "maybe an obvious lesson but this is you know a big deal and the last the last",
    "start": "2326730",
    "end": "2332160"
  },
  {
    "text": "big lesson we learned is to make everything as self-service as possible you know we were excited to get this out",
    "start": "2332160",
    "end": "2338370"
  },
  {
    "text": "get this in the hands of our users all the other engineers at BuzzFeed they loved it so they started building a lot of services and and you know the first",
    "start": "2338370",
    "end": "2345450"
  },
  {
    "text": "thing we built was obviously a deploy you ID to make it easy for everybody to deploy their services safely what you realized that is is as you as your user",
    "start": "2345450",
    "end": "2352500"
  },
  {
    "text": "started pulling a lot of services suddenly your operations team is going to spend a lot of its time the data stores that are backing those",
    "start": "2352500",
    "end": "2358760"
  },
  {
    "text": "services so the next thing we built was a self-service way for our engineers to deploy data stores RDS instances",
    "start": "2358760",
    "end": "2364700"
  },
  {
    "text": "ElastiCache clusters so so the users are able to keep moving fast but we as",
    "start": "2364700",
    "end": "2370400"
  },
  {
    "text": "operators of the cluster maintain a level of control and consistency that we need and the last thing we built is sort",
    "start": "2370400",
    "end": "2377720"
  },
  {
    "text": "of self-service user onboarding there's to start using rig you need a set of kms AWS credentials a grant access to kms",
    "start": "2377720",
    "end": "2384950"
  },
  {
    "text": "keys and so we've built a self-service way for people any anybody developer to",
    "start": "2384950",
    "end": "2390410"
  },
  {
    "text": "log in and their own anyways credentials and so I'll talk through some of the",
    "start": "2390410",
    "end": "2396230"
  },
  {
    "text": "some of the challenges we faced while while building rig so the first one is",
    "start": "2396230",
    "end": "2402440"
  },
  {
    "text": "network level access control and isolation in the good old days when",
    "start": "2402440",
    "end": "2407720"
  },
  {
    "text": "you're just pulling services on ec2 instances you you can take advantage of",
    "start": "2407720",
    "end": "2413390"
  },
  {
    "text": "you know isolate your your applications in two separate V pcs or if not separate V pcs at least into isolated security",
    "start": "2413390",
    "end": "2419810"
  },
  {
    "text": "groups so you know only you know one application can access the database for that application there's no chance of",
    "start": "2419810",
    "end": "2426250"
  },
  {
    "text": "you know some rogue application by passing an API and talking directly to its database you can't really count on",
    "start": "2426250",
    "end": "2433340"
  },
  {
    "text": "that when you sort of naively jump ahead you know headfirst into ECS where everything's running on a homogenous set",
    "start": "2433340",
    "end": "2439790"
  },
  {
    "text": "of ec2 instances it's a flat network namespace you have you know a variety of workloads and and on a network level",
    "start": "2439790",
    "end": "2446570"
  },
  {
    "text": "each each service can essentially access every other services data stores which",
    "start": "2446570",
    "end": "2453020"
  },
  {
    "text": "is you know less than ideal you're sort of counting on a goodwill of your users to not to not have everything catch on fire our first solution that was was",
    "start": "2453020",
    "end": "2461270"
  },
  {
    "text": "pretty naive it was just to just to for specialized workloads we would just",
    "start": "2461270",
    "end": "2467270"
  },
  {
    "text": "provision whole entire separate ec e CS clusters in separate V pcs so you know",
    "start": "2467270",
    "end": "2472880"
  },
  {
    "text": "here we have most applications still running in a in a generic prod but but",
    "start": "2472880",
    "end": "2478040"
  },
  {
    "text": "we have some specialized application with a critical database isolated into a separate ECS cluster a separate V PC",
    "start": "2478040",
    "end": "2485830"
  },
  {
    "text": "this works but there's some downsides there's you moreover had four operators we have to",
    "start": "2485830",
    "end": "2490960"
  },
  {
    "text": "manage whole other clusters and the infrastructure that power them but but importantly it's more of our end users",
    "start": "2490960",
    "end": "2496390"
  },
  {
    "text": "we don't want necessarily our users to have to care about the like network level details like this we want them to",
    "start": "2496390",
    "end": "2503440"
  },
  {
    "text": "know that I'm deploying to production not I'm deploying to this special off privilege production cluster so with the",
    "start": "2503440",
    "end": "2511330"
  },
  {
    "text": "advent of the task placement strategies that allowed us to build in a slightly better approach which is we call it",
    "start": "2511330",
    "end": "2517150"
  },
  {
    "text": "class host group so within a single ECS cluster the prod cluster here you can",
    "start": "2517150",
    "end": "2522250"
  },
  {
    "text": "subdivide the actual ec2 instances into different classes so we have the default",
    "start": "2522250",
    "end": "2527260"
  },
  {
    "text": "class where most things are going to be running we have a a workload based class here in this worker class where we can",
    "start": "2527260",
    "end": "2534850"
  },
  {
    "text": "put you know acing like offline or batch applications that can fight amongst themselves for resource usage and we",
    "start": "2534850",
    "end": "2539950"
  },
  {
    "text": "don't we don't worry about them too much and then we can still have sort of our auth privileged set of classes isolated",
    "start": "2539950",
    "end": "2546520"
  },
  {
    "text": "with it with isolated access to them to their data store where we're tor users",
    "start": "2546520",
    "end": "2552310"
  },
  {
    "text": "were still exposing they're just deploying to production and and under the hood rig and the ETS scheduler take",
    "start": "2552310",
    "end": "2557920"
  },
  {
    "text": "care of take care of making sure that services deploy to the right place and",
    "start": "2557920",
    "end": "2564000"
  },
  {
    "text": "the next the next big challenge we faced was sort of quickly and safely rolling",
    "start": "2564000",
    "end": "2570100"
  },
  {
    "text": "our clusters and I showed the diagram earlier where we have you know a nice es",
    "start": "2570100",
    "end": "2575650"
  },
  {
    "text": "cluster is an auto scaling group with ec2 instances in it",
    "start": "2575650",
    "end": "2581020"
  },
  {
    "text": "our very first approach to to rolling out ami is if we would never change a host in place we never go on to host and",
    "start": "2581020",
    "end": "2588160"
  },
  {
    "text": "changing it anyplace or deploy to the host itself if we have to change something about the host we build a new",
    "start": "2588160",
    "end": "2593440"
  },
  {
    "text": "ami enroll it out and our first approach that was was again pretty naive and",
    "start": "2593440",
    "end": "2598870"
  },
  {
    "text": "simplistic which was just to tell the auto scaling group to spin up one new",
    "start": "2598870",
    "end": "2604090"
  },
  {
    "text": "host didn't tear down an existing host and wait a fixed amount of time five minutes or something like that just to",
    "start": "2604090",
    "end": "2610750"
  },
  {
    "text": "give the ECS scheduler time to recognize the host was go on reschedule any task that was running",
    "start": "2610750",
    "end": "2615900"
  },
  {
    "text": "to another host that works but you know as the size of your VCS clusters grows",
    "start": "2615900",
    "end": "2621390"
  },
  {
    "text": "it becomes extremely painful you know it'll start to take hours to actually roll a change out to your clusters a better approach here is we",
    "start": "2621390",
    "end": "2629970"
  },
  {
    "text": "build a lambda function that watches the ec2 event stream so when we trigger a like when a new ami is getting rolled",
    "start": "2629970",
    "end": "2636420"
  },
  {
    "text": "out these two event stream will fill up with shutdown events for the ec2 instances as they're scheduled to shut",
    "start": "2636420",
    "end": "2642450"
  },
  {
    "text": "down and our lambda function will actually tell the EECS scheduler to proactively reschedule all the tasks",
    "start": "2642450",
    "end": "2649380"
  },
  {
    "text": "running on it onto another healthy host and what that lets us do is is roll our clusters in large batches while still",
    "start": "2649380",
    "end": "2656609"
  },
  {
    "text": "maintaining a level of safety I guarantee that we're not going to tear down all of the hosts that are running some particular service and cause some",
    "start": "2656609",
    "end": "2663119"
  },
  {
    "text": "downtime another challenge we faced was sharing ECR registries you know the the",
    "start": "2663119",
    "end": "2671130"
  },
  {
    "text": "first challenge was we wanted to make sure we had easy our registry is running in multiple regions for resiliency fix",
    "start": "2671130",
    "end": "2678480"
  },
  {
    "text": "for that is actually really simple you just when you when you docker push you just docker pushed every registry you",
    "start": "2678480",
    "end": "2684690"
  },
  {
    "text": "want you know in every reason you want to have your containers in that you know this allows you to weather a storm if",
    "start": "2684690",
    "end": "2690180"
  },
  {
    "text": "there's a problem in one region you can fail all of your services over you can fail your deploy your deploy you ID over",
    "start": "2690180",
    "end": "2695839"
  },
  {
    "text": "to two registry in another region a bigger challenges one one of the other things we're doing is we're moving we're",
    "start": "2695839",
    "end": "2702240"
  },
  {
    "text": "separating and starting to separate our ECS clusters into different interviews accounts and it's a bit trickier to",
    "start": "2702240",
    "end": "2707520"
  },
  {
    "text": "share registries across AWS accounts you have to manage iam permissions on a",
    "start": "2707520",
    "end": "2712710"
  },
  {
    "text": "unlike a per se our repository level are fixed to that again is a really simple",
    "start": "2712710",
    "end": "2718799"
  },
  {
    "text": "one which is every time we push we simply check permissions and update them as necessary a more sophisticated",
    "start": "2718799",
    "end": "2725160"
  },
  {
    "text": "solution here would be use a lambda function watch for new repositories to",
    "start": "2725160",
    "end": "2730260"
  },
  {
    "text": "be created instead of set permissions dynamically and and sort of the last big",
    "start": "2730260",
    "end": "2736500"
  },
  {
    "text": "challenge we faced is one of efficiency moving or moving away from sort of managing individual ec2 instances for",
    "start": "2736500",
    "end": "2742950"
  },
  {
    "text": "individual applications onto a onto a sort of cloud of compute resources many applications side by side is",
    "start": "2742950",
    "end": "2749750"
  },
  {
    "text": "obviously a big win and efficiency but there are still improvements we can make and the real challenge here is is",
    "start": "2749750",
    "end": "2755930"
  },
  {
    "text": "reservation versus utilization you can see here the the orange line is the top",
    "start": "2755930",
    "end": "2761120"
  },
  {
    "text": "line is reservation the the bottom line is utilization you can see there's a big",
    "start": "2761120",
    "end": "2766700"
  },
  {
    "text": "gap here and that's and that's that's money we're kind of wasting but it also affects the sort of our ability to",
    "start": "2766700",
    "end": "2773330"
  },
  {
    "text": "accurately scale the cluster up and down for demand and sort of one of the",
    "start": "2773330",
    "end": "2779120"
  },
  {
    "text": "challenges was our first approach that auto scaling this was based on either the memory or CPU reservation cloud",
    "start": "2779120",
    "end": "2786680"
  },
  {
    "text": "watch metric and you know the problem with that was scaling on either one of them independently is you run into dead",
    "start": "2786680",
    "end": "2793280"
  },
  {
    "text": "bands where you know the CPU metric is telling you scale up the memory metric is telling you to stay put so you don't",
    "start": "2793280",
    "end": "2798590"
  },
  {
    "text": "scale it all our solution that is was to create a custom combined cloud much",
    "start": "2798590",
    "end": "2804230"
  },
  {
    "text": "metric that would you know and we scale based on that and we're still tuning the the mass on how we combine those metrics",
    "start": "2804230",
    "end": "2811460"
  },
  {
    "text": "but we've gotten much more accurate in terms of how we scale our clusters up and down the other big benefit that",
    "start": "2811460",
    "end": "2816710"
  },
  {
    "text": "we've gotten is moving from elastic load balancers to application load balancers which actually allow you to co-locate",
    "start": "2816710",
    "end": "2822320"
  },
  {
    "text": "your services even more on on hosts along with task placement bin packing",
    "start": "2822320",
    "end": "2827510"
  },
  {
    "text": "and spreading across regions allow us to get much better utilization and and then",
    "start": "2827510",
    "end": "2834740"
  },
  {
    "text": "you know they'll talk sort of very briefly about the things that were excited about coming up next",
    "start": "2834740",
    "end": "2840800"
  },
  {
    "text": "elastic network interfaces have has landed and they're available and what",
    "start": "2840800",
    "end": "2845930"
  },
  {
    "text": "that enables is it enables you to apply sort of network level access control on a on a per ECS task basis so what that",
    "start": "2845930",
    "end": "2854030"
  },
  {
    "text": "allowed us to is do away with most of our class host groups and instead focus and you know just on individual services",
    "start": "2854030",
    "end": "2861170"
  },
  {
    "text": "will be able to have a security group attached and that only allowed that service access to a particular data store or s3",
    "start": "2861170",
    "end": "2867370"
  },
  {
    "text": "get or anything like that and and this is this is available now and it's so it's very exciting for us the next big",
    "start": "2867370",
    "end": "2874450"
  },
  {
    "text": "thing is we need to embrace I am roles for tasks this has been away available for a little while where where an",
    "start": "2874450",
    "end": "2881140"
  },
  {
    "text": "individual ECF tasks can just use the I am infrastructure to automatically assume a role and get credentials and",
    "start": "2881140",
    "end": "2888520"
  },
  {
    "text": "that will allow us to eliminate a whole class of secret stores that we currently have to deal with and and really reduce",
    "start": "2888520",
    "end": "2895540"
  },
  {
    "text": "or sort of security surface area and so that's that's that's sort of how where",
    "start": "2895540",
    "end": "2901390"
  },
  {
    "text": "we got with with with with ECS building a platform on top of VCS again I'm will",
    "start": "2901390",
    "end": "2907870"
  },
  {
    "text": "McCutchen from from BuzzFeed and I think we have you know about ten minutes left",
    "start": "2907870",
    "end": "2913920"
  },
  {
    "text": "more like one minute left okay well if you know gear and I will stick around if",
    "start": "2913920",
    "end": "2920590"
  },
  {
    "text": "anybody has any questions or wants to tell us what we did wrong you know what we'll hang out up front",
    "start": "2920590",
    "end": "2925750"
  },
  {
    "text": "come come talk to us please [Music]",
    "start": "2925750",
    "end": "2933058"
  }
]