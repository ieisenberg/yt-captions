[
  {
    "start": "0",
    "end": "15000"
  },
  {
    "text": "in this video you'll see how to automate",
    "start": "880",
    "end": "2560"
  },
  {
    "text": "prometheus installation and",
    "start": "2560",
    "end": "3919"
  },
  {
    "text": "configuration using aws systems manager",
    "start": "3919",
    "end": "6399"
  },
  {
    "text": "documents",
    "start": "6399",
    "end": "7680"
  },
  {
    "text": "with this capability you can set up",
    "start": "7680",
    "end": "9280"
  },
  {
    "text": "prometheus consistently manage fleets of",
    "start": "9280",
    "end": "11440"
  },
  {
    "text": "servers at scale and spend less time",
    "start": "11440",
    "end": "13440"
  },
  {
    "text": "managing infrastructure",
    "start": "13440",
    "end": "15679"
  },
  {
    "start": "15000",
    "end": "63000"
  },
  {
    "text": "to get started let's navigate to amazon",
    "start": "15679",
    "end": "17680"
  },
  {
    "text": "managed service for prometheus or amp",
    "start": "17680",
    "end": "20000"
  },
  {
    "text": "and create a workspace",
    "start": "20000",
    "end": "23039"
  },
  {
    "text": "now let's go to amazon alas to compute",
    "start": "26720",
    "end": "28560"
  },
  {
    "text": "cloud or amazon ec2",
    "start": "28560",
    "end": "31840"
  },
  {
    "text": "for the purposes of this example we have",
    "start": "33920",
    "end": "35840"
  },
  {
    "text": "a running instance that will install",
    "start": "35840",
    "end": "37280"
  },
  {
    "text": "prometheus on",
    "start": "37280",
    "end": "40160"
  },
  {
    "text": "this instance has an identity and access",
    "start": "40719",
    "end": "42559"
  },
  {
    "text": "management or iam role attached to it",
    "start": "42559",
    "end": "45120"
  },
  {
    "text": "which allows aws systems manager to",
    "start": "45120",
    "end": "47120"
  },
  {
    "text": "access it",
    "start": "47120",
    "end": "48480"
  },
  {
    "text": "additionally a security group has been",
    "start": "48480",
    "end": "50160"
  },
  {
    "text": "set up so we can browse to the port the",
    "start": "50160",
    "end": "51760"
  },
  {
    "text": "prometheus is running on for this",
    "start": "51760",
    "end": "53199"
  },
  {
    "text": "instance",
    "start": "53199",
    "end": "54640"
  },
  {
    "text": "now let's go to systems manager to see",
    "start": "54640",
    "end": "56320"
  },
  {
    "text": "how we can install prometheus on the",
    "start": "56320",
    "end": "57920"
  },
  {
    "text": "instance using documents",
    "start": "57920",
    "end": "61120"
  },
  {
    "start": "63000",
    "end": "128000"
  },
  {
    "text": "with systems manager documents you can",
    "start": "63680",
    "end": "65680"
  },
  {
    "text": "define the actions that system manager",
    "start": "65680",
    "end": "67360"
  },
  {
    "text": "performs on your managed instances",
    "start": "67360",
    "end": "71119"
  },
  {
    "text": "for our purposes a command document has",
    "start": "71119",
    "end": "73040"
  },
  {
    "text": "already been created which installs and",
    "start": "73040",
    "end": "74799"
  },
  {
    "text": "configures prometheus on linux instances",
    "start": "74799",
    "end": "78080"
  },
  {
    "text": "let's view the contents of this document",
    "start": "78080",
    "end": "81680"
  },
  {
    "text": "several parameters are defined including",
    "start": "83119",
    "end": "85040"
  },
  {
    "text": "three pulled from the parameter store",
    "start": "85040",
    "end": "86880"
  },
  {
    "text": "we'll look at those in a moment",
    "start": "86880",
    "end": "90000"
  },
  {
    "text": "after receiving the parameters the",
    "start": "90400",
    "end": "92000"
  },
  {
    "text": "document downloads and configures",
    "start": "92000",
    "end": "93439"
  },
  {
    "text": "prometheus and the node exporter service",
    "start": "93439",
    "end": "96400"
  },
  {
    "text": "let's take a closer look at the",
    "start": "96400",
    "end": "97600"
  },
  {
    "text": "parameter store values",
    "start": "97600",
    "end": "101400"
  },
  {
    "text": "this parameter value stores the",
    "start": "101439",
    "end": "102880"
  },
  {
    "text": "configuration for the prometheus service",
    "start": "102880",
    "end": "104640"
  },
  {
    "text": "we want to run on our ec2 instance",
    "start": "104640",
    "end": "108560"
  },
  {
    "text": "this parameter stores the configuration",
    "start": "110560",
    "end": "112240"
  },
  {
    "text": "for the node exporter service",
    "start": "112240",
    "end": "115840"
  },
  {
    "text": "this is the prometheus scrape",
    "start": "117119",
    "end": "118399"
  },
  {
    "text": "configuration which defines the targets",
    "start": "118399",
    "end": "120560"
  },
  {
    "text": "to scrape metrics from and where to",
    "start": "120560",
    "end": "122240"
  },
  {
    "text": "remote write them to",
    "start": "122240",
    "end": "124079"
  },
  {
    "text": "in this example the metrics are sent to",
    "start": "124079",
    "end": "125680"
  },
  {
    "text": "the amp workspace we created earlier",
    "start": "125680",
    "end": "128720"
  },
  {
    "text": "now let's execute the command document",
    "start": "128720",
    "end": "130479"
  },
  {
    "text": "against our ec2 instance manually",
    "start": "130479",
    "end": "134400"
  },
  {
    "text": "let's review the command parameters",
    "start": "137599",
    "end": "141120"
  },
  {
    "text": "we'll leave the parameters as is",
    "start": "141280",
    "end": "144720"
  },
  {
    "text": "under targets we can choose a method for",
    "start": "144959",
    "end": "146800"
  },
  {
    "text": "selecting ec2 instances",
    "start": "146800",
    "end": "149040"
  },
  {
    "text": "we'll choose the instance manually",
    "start": "149040",
    "end": "152560"
  },
  {
    "text": "let's disable the option to write",
    "start": "154160",
    "end": "155599"
  },
  {
    "text": "command output to an amazon s3 bucket",
    "start": "155599",
    "end": "158080"
  },
  {
    "text": "and then run the command",
    "start": "158080",
    "end": "161040"
  },
  {
    "text": "after a few moments the command executes",
    "start": "163360",
    "end": "165200"
  },
  {
    "text": "successfully",
    "start": "165200",
    "end": "166560"
  },
  {
    "text": "let's quickly look at the command output",
    "start": "166560",
    "end": "170640"
  },
  {
    "start": "170000",
    "end": "198000"
  },
  {
    "text": "now let's navigate to the ec2 instance",
    "start": "170640",
    "end": "172640"
  },
  {
    "text": "and open the port that prometheus is",
    "start": "172640",
    "end": "174080"
  },
  {
    "text": "running on",
    "start": "174080",
    "end": "177400"
  },
  {
    "text": "here we can see the data is being",
    "start": "187120",
    "end": "188640"
  },
  {
    "text": "collected",
    "start": "188640",
    "end": "191120"
  },
  {
    "text": "we can also see the scrape configuration",
    "start": "193280",
    "end": "197480"
  },
  {
    "start": "198000",
    "end": "243000"
  },
  {
    "text": "now let's see how to execute the command",
    "start": "199200",
    "end": "200800"
  },
  {
    "text": "document against our ec2 instances",
    "start": "200800",
    "end": "202800"
  },
  {
    "text": "automatically",
    "start": "202800",
    "end": "204080"
  },
  {
    "text": "to do this we'll use an auto scaling",
    "start": "204080",
    "end": "205760"
  },
  {
    "text": "group",
    "start": "205760",
    "end": "207599"
  },
  {
    "text": "we already have an auto scaling group",
    "start": "207599",
    "end": "209200"
  },
  {
    "text": "created for our purposes",
    "start": "209200",
    "end": "212319"
  },
  {
    "text": "this auto scaling group won't launch any",
    "start": "212319",
    "end": "214159"
  },
  {
    "text": "instances until the capacity is greater",
    "start": "214159",
    "end": "215920"
  },
  {
    "text": "than zero",
    "start": "215920",
    "end": "218560"
  },
  {
    "text": "the launch template specifies the ami",
    "start": "218560",
    "end": "220720"
  },
  {
    "text": "instance type security group and iam",
    "start": "220720",
    "end": "223040"
  },
  {
    "text": "instance profile to use when launching a",
    "start": "223040",
    "end": "224879"
  },
  {
    "text": "new ec2 instance",
    "start": "224879",
    "end": "227040"
  },
  {
    "text": "now let's create a lifecycle hook to",
    "start": "227040",
    "end": "228640"
  },
  {
    "text": "perform the configuration on newly",
    "start": "228640",
    "end": "230319"
  },
  {
    "text": "launched instances",
    "start": "230319",
    "end": "233200"
  },
  {
    "text": "the lifecycle hook will generate",
    "start": "236400",
    "end": "237840"
  },
  {
    "text": "instance launch notifications and send",
    "start": "237840",
    "end": "239680"
  },
  {
    "text": "them to amazon eventbridge",
    "start": "239680",
    "end": "243040"
  },
  {
    "start": "243000",
    "end": "346000"
  },
  {
    "text": "an amazon eventbridge rule has been",
    "start": "244000",
    "end": "245599"
  },
  {
    "text": "configured to send the notifications to",
    "start": "245599",
    "end": "247360"
  },
  {
    "text": "an aws lambda function",
    "start": "247360",
    "end": "250879"
  },
  {
    "text": "this lambda function automates the same",
    "start": "252319",
    "end": "254080"
  },
  {
    "text": "calls that we used to run the prometheus",
    "start": "254080",
    "end": "256000"
  },
  {
    "text": "installation manually",
    "start": "256000",
    "end": "258880"
  },
  {
    "text": "the function receives the auto scaling",
    "start": "258880",
    "end": "260639"
  },
  {
    "text": "group lifecycle event finds the name of",
    "start": "260639",
    "end": "262560"
  },
  {
    "text": "the aws systems manager command document",
    "start": "262560",
    "end": "265040"
  },
  {
    "text": "and identifies the ec2 instance to run",
    "start": "265040",
    "end": "267120"
  },
  {
    "text": "against",
    "start": "267120",
    "end": "268880"
  },
  {
    "text": "it then sends the document to the ec2",
    "start": "268880",
    "end": "270880"
  },
  {
    "text": "instance",
    "start": "270880",
    "end": "273280"
  },
  {
    "text": "once the run command finishes executing",
    "start": "273440",
    "end": "275600"
  },
  {
    "text": "the send lifecycle action command is",
    "start": "275600",
    "end": "277440"
  },
  {
    "text": "called",
    "start": "277440",
    "end": "279759"
  },
  {
    "text": "this command tells the auto scaling",
    "start": "279919",
    "end": "281520"
  },
  {
    "text": "group that the life cycle action has",
    "start": "281520",
    "end": "282880"
  },
  {
    "text": "been completed and the instance is ready",
    "start": "282880",
    "end": "284639"
  },
  {
    "text": "to go into service",
    "start": "284639",
    "end": "287120"
  },
  {
    "text": "now let's see this lambda function in",
    "start": "287120",
    "end": "288720"
  },
  {
    "text": "action",
    "start": "288720",
    "end": "291720"
  },
  {
    "text": "we'll update the desired capacity of the",
    "start": "299199",
    "end": "300960"
  },
  {
    "text": "auto scaling group to 1.",
    "start": "300960",
    "end": "304319"
  },
  {
    "text": "the auto scaling group is now updating",
    "start": "306000",
    "end": "307600"
  },
  {
    "text": "the capacity let's view our ec2",
    "start": "307600",
    "end": "309520"
  },
  {
    "text": "instances",
    "start": "309520",
    "end": "311840"
  },
  {
    "text": "we can now see the new instance let's",
    "start": "312560",
    "end": "314560"
  },
  {
    "text": "navigate to the port address of the",
    "start": "314560",
    "end": "315840"
  },
  {
    "text": "prometheus server",
    "start": "315840",
    "end": "318720"
  },
  {
    "text": "as expected prometheus was automatically",
    "start": "319360",
    "end": "321440"
  },
  {
    "text": "installed through the lifecycle hook we",
    "start": "321440",
    "end": "323039"
  },
  {
    "text": "set up",
    "start": "323039",
    "end": "325840"
  },
  {
    "text": "this instance has the same scrape",
    "start": "326080",
    "end": "327440"
  },
  {
    "text": "configuration we saw earlier and is",
    "start": "327440",
    "end": "329120"
  },
  {
    "text": "remote writing to the amp workspace",
    "start": "329120",
    "end": "333039"
  },
  {
    "text": "you've just seen how to automatically",
    "start": "333039",
    "end": "334479"
  },
  {
    "text": "install prometheus using aws systems",
    "start": "334479",
    "end": "336720"
  },
  {
    "text": "manager documents",
    "start": "336720",
    "end": "338800"
  },
  {
    "text": "you can learn more about this topic in",
    "start": "338800",
    "end": "340240"
  },
  {
    "text": "the description and links for this video",
    "start": "340240",
    "end": "342160"
  },
  {
    "text": "thanks for watching now it's your turn",
    "start": "342160",
    "end": "343680"
  },
  {
    "text": "to try",
    "start": "343680",
    "end": "346840"
  }
]