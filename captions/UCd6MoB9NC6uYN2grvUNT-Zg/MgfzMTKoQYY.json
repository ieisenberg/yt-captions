[
  {
    "text": "In this video, you’ll see how to define cloud infrastructure in code with the AWS Cloud Development Kit",
    "start": "400",
    "end": "5820"
  },
  {
    "text": "(AWS CDK).",
    "start": "5820",
    "end": "7440"
  },
  {
    "text": "With this software development framework,\nyou can model cloud applications using familiar",
    "start": "8140",
    "end": "12220"
  },
  {
    "text": "programming languages, provision applications\nwith customized CloudFormation templates,",
    "start": "12220",
    "end": "16460"
  },
  {
    "text": "and accelerate application deployments on AWS.",
    "start": "16460",
    "end": "19519"
  },
  {
    "text": "The AWS CDK is a software development framework\nthat allows you to build highly reliable,",
    "start": "20320",
    "end": "25460"
  },
  {
    "text": "highly scalable, cost-effective applications in the cloud",
    "start": "25460",
    "end": "28779"
  },
  {
    "text": "without worrying about creating and configuring the underlying AWS infrastructure.",
    "start": "28780",
    "end": "32980"
  },
  {
    "text": "The AWS CDK enables you to build your cloud application",
    "start": "34100",
    "end": "37300"
  },
  {
    "text": "without leaving your integrated development environment (IDE).",
    "start": "37300",
    "end": "40559"
  },
  {
    "text": "For the purposes of this example, we’ll\nbe coding in the AWS Cloud9 IDE.",
    "start": "40960",
    "end": "45379"
  },
  {
    "text": "Let’s go there now to get started.",
    "start": "45680",
    "end": "47220"
  },
  {
    "text": "First, let’s ensure we have the AWS command-line\ninterface (CLI) and CDK CLI",
    "start": "50200",
    "end": "56080"
  },
  {
    "text": "installed on this Cloud9 instance.",
    "start": "56080",
    "end": "57900"
  },
  {
    "text": "As you can see, the AWS CDK is not currently\ninstalled.",
    "start": "58860",
    "end": "62040"
  },
  {
    "text": "Let’s install the AWS CDK using the Node\nPackage Manager (NPM).",
    "start": "62980",
    "end": "67320"
  },
  {
    "text": "Next, let’s use the “cdk doctor” command to examine the environment to ensure it is ready for deployment.",
    "start": "68280",
    "end": "74260"
  },
  {
    "text": "Notice that the command displays the current\nCDK version, as well as the environment variables.",
    "start": "75140",
    "end": "80300"
  },
  {
    "text": "For the purposes of this example, we’ll also create and deploy a load balanced web application",
    "start": "81120",
    "end": "85860"
  },
  {
    "text": "as a fully managed Fargate service within the Amazon Elastic Container Service (or Amazon ECS).",
    "start": "85860",
    "end": "91300"
  },
  {
    "text": "Create a folder for the application and navigate into it.",
    "start": "91840",
    "end": "94560"
  },
  {
    "text": "The AWS CDK lets you define your AWS cloud infrastructure in a variety of general-purpose",
    "start": "96780",
    "end": "102380"
  },
  {
    "text": "programming languages, including TypeScript,\nJavaScript, Python, Java, and C#.",
    "start": "102380",
    "end": "107619"
  },
  {
    "text": "For our purposes, we’ll use TypeScript.",
    "start": "108140",
    "end": "110020"
  },
  {
    "text": "Initialize the application using the “cdk init” command.",
    "start": "110620",
    "end": "113820"
  },
  {
    "text": "As you can see, the command bootstrapped the cloud infrastructure service with several folders and files.",
    "start": "117600",
    "end": "122259"
  },
  {
    "text": "It created a bin folder, a lib folder, and\nseveral other folders and files necessary",
    "start": "125160",
    "end": "129840"
  },
  {
    "text": "for a TypeScript project with node.js.",
    "start": "129840",
    "end": "132420"
  },
  {
    "text": "Let’s look at the project configuration\nin the package.json file.",
    "start": "133020",
    "end": "136520"
  },
  {
    "text": "This file was created with a starting default project name, version, script definitions, and dependencies.",
    "start": "139460",
    "end": "144800"
  },
  {
    "text": "Next, let’s look in the automatically generated\nbin folder to see the starting code.",
    "start": "145560",
    "end": "149580"
  },
  {
    "text": "This code is the entry point into the application.",
    "start": "150680",
    "end": "153019"
  },
  {
    "text": "Next, let’s take a look in the lib folder, which contains the Typescript code for the application’s infrastructure.",
    "start": "153740",
    "end": "158940"
  },
  {
    "text": "This is the file we can edit to change the\ninfrastructure of the application.",
    "start": "160260",
    "end": "163599"
  },
  {
    "text": "Next, let’s return to the command prompt\nand try building this bootstrapped project.",
    "start": "164420",
    "end": "168260"
  },
  {
    "text": "Running the build script generates further project files, which readies the service for deployment.",
    "start": "171940",
    "end": "176320"
  },
  {
    "text": "Next, let’s run the “cdk synth” command,",
    "start": "177060",
    "end": "179860"
  },
  {
    "text": "which generates the CloudFormation template that would be deployed from the starter project.",
    "start": "179860",
    "end": "183580"
  },
  {
    "text": "This is the starter CloudFormation template.",
    "start": "184660",
    "end": "186660"
  },
  {
    "text": "Note that it does not contain any cloud resources.",
    "start": "187140",
    "end": "189660"
  },
  {
    "text": "Now, let’s begin editing the code and installing\nfurther AWS CDK dependencies",
    "start": "190320",
    "end": "195080"
  },
  {
    "text": "to add functionality to our application.",
    "start": "195080",
    "end": "197000"
  },
  {
    "text": "Now that we’ve installed some dependencies,\nlet’s look at the package.json file.",
    "start": "198360",
    "end": "202440"
  },
  {
    "text": "As you can see, the newly installed CDK dependencies are listed here.",
    "start": "205500",
    "end": "208960"
  },
  {
    "text": "Let’s add them to the TypeScript library code.",
    "start": "209320",
    "end": "211380"
  },
  {
    "text": "Now we can use AWS CDK constructs to begin\ndefining our stack, starting with the VPC.",
    "start": "220940",
    "end": "226320"
  },
  {
    "text": "A construct represents a \"cloud component\"\nand encapsulates everything AWS CloudFormation",
    "start": "227120",
    "end": "232159"
  },
  {
    "text": "needs to create the component.",
    "start": "232160",
    "end": "233640"
  },
  {
    "text": "Just like that, we created a new Amazon Elastic Compute Cloud (or Amazon EC2) Virtual Private",
    "start": "236720",
    "end": "242160"
  },
  {
    "text": "Cloud (or VPC) with three Maximum Availability\nZones that uses public and private subnets,",
    "start": "242160",
    "end": "247760"
  },
  {
    "text": "according to best practices.",
    "start": "247760",
    "end": "249200"
  },
  {
    "text": "AWS CDK constructs are designed to follow best practices, but you can override the default parameters.",
    "start": "249720",
    "end": "255740"
  },
  {
    "text": "Next, we’ll create an ECS cluster inside the VPC.",
    "start": "256740",
    "end": "259840"
  },
  {
    "text": "Notice that this construct has only one required parameter, which is to point it to the VPC we created.",
    "start": "261480",
    "end": "266340"
  },
  {
    "text": "Now let’s add the Fargate service.",
    "start": "267420",
    "end": "269200"
  },
  {
    "text": "Finally, this code used a higher-level construct\nknown as a “pattern”",
    "start": "275020",
    "end": "278520"
  },
  {
    "text": "to include an AWS Fargate container service employing an Application Load Balancer.",
    "start": "278520",
    "end": "283139"
  },
  {
    "text": "We don’t have to worry about the underlying instances,",
    "start": "284200",
    "end": "286540"
  },
  {
    "text": "and we’ll be able to scale the service up and down\nbased on demand.",
    "start": "286540",
    "end": "289720"
  },
  {
    "text": "Next, let’s pass the cluster with the VPC to the created service, along with a set of other parameters.",
    "start": "290420",
    "end": "295700"
  },
  {
    "text": "Save the file and return to the command prompt.",
    "start": "298540",
    "end": "300980"
  },
  {
    "text": "Now that we’ve defined the application in\ncode, let’s run the build script.",
    "start": "303480",
    "end": "306840"
  },
  {
    "text": "Now let’s look at the generated CloudFormation\ntemplate to see all the resources",
    "start": "309440",
    "end": "313040"
  },
  {
    "text": "that have been created by the AWS CDK.",
    "start": "313040",
    "end": "315420"
  },
  {
    "text": "Now, let’s deploy the CloudFormation template\nusing the AWS CDK “deploy” command.",
    "start": "322860",
    "end": "327780"
  },
  {
    "text": "Note that CDK surfaces all security-related\nchanges for review.",
    "start": "328440",
    "end": "332000"
  },
  {
    "text": "While the AWS CDK deploys the template,",
    "start": "334580",
    "end": "337259"
  },
  {
    "text": "let’s quickly switch to CloudFormation to ensure that\nthe stack is being created.",
    "start": "337260",
    "end": "341280"
  },
  {
    "text": "Select the stack.",
    "start": "344240",
    "end": "345280"
  },
  {
    "text": "Navigate to the Events tab and refresh the view.",
    "start": "348220",
    "end": "350880"
  },
  {
    "text": "As you can see, the Fargate stack is being created.",
    "start": "353880",
    "end": "356400"
  },
  {
    "text": "Now let’s skip forward a few minutes to\nwhen the deployment has completed.",
    "start": "359520",
    "end": "362440"
  },
  {
    "text": "As you can see, the CloudFormation template\nthat we modified using only a few lines of",
    "start": "366380",
    "end": "370360"
  },
  {
    "text": "simple TypeScript code created 38 resources\nacross numerous AWS services.",
    "start": "370360",
    "end": "375240"
  },
  {
    "text": "Let’s look at the application it deployed.",
    "start": "375540",
    "end": "377340"
  },
  {
    "text": "As you can see, the application is now running\non a container in Amazon ECS.",
    "start": "380040",
    "end": "384220"
  },
  {
    "text": "Next, let’s switch to ECS to look at the\ncontainer tasks and service that were created",
    "start": "387120",
    "end": "391520"
  },
  {
    "text": "for the Application Load Balancer Fargate service.",
    "start": "391520",
    "end": "394020"
  },
  {
    "text": "Refresh the page.",
    "start": "396920",
    "end": "398040"
  },
  {
    "text": "Here you can see the cluster we defined in\nthe code earlier.",
    "start": "400540",
    "end": "403100"
  },
  {
    "text": "We can drill into the cluster to get a closer\nlook at its resources.",
    "start": "403580",
    "end": "406979"
  },
  {
    "text": "We can see the active service.",
    "start": "409740",
    "end": "411300"
  },
  {
    "text": "We can see the tasks that are running.",
    "start": "411300",
    "end": "412860"
  },
  {
    "text": "Here, we can see two tasks running\nour sample container.",
    "start": "414600",
    "end": "417200"
  },
  {
    "text": "Now, let’s go to the Amazon EC2 console\nto see the generated load balancer.",
    "start": "417960",
    "end": "421940"
  },
  {
    "text": "Here you can see the load balancer that was\ngenerated by the code.",
    "start": "425520",
    "end": "428259"
  },
  {
    "text": "Next, let’s look at the target group that is registered to the load balancer and receiving traffic.",
    "start": "428920",
    "end": "433300"
  },
  {
    "text": "Here we can see that two registered targets\nare receiving traffic.",
    "start": "440860",
    "end": "443860"
  },
  {
    "text": "Now let’s return to Cloud9 to make a simple\nchange to the application.",
    "start": "444380",
    "end": "447960"
  },
  {
    "text": "We’ll change the desiredCount parameter to 4.",
    "start": "449060",
    "end": "451520"
  },
  {
    "text": "This updates the tasks and targets in the\nECS container from 2 to 4.",
    "start": "452600",
    "end": "456720"
  },
  {
    "text": "Save the changes.",
    "start": "459500",
    "end": "460620"
  },
  {
    "text": "Let’s return to the command prompt to rebuild\nthe application.",
    "start": "462800",
    "end": "465440"
  },
  {
    "text": "To rebuild the application, simply run the\nbuild script again.",
    "start": "468480",
    "end": "471560"
  },
  {
    "text": "The \"cdk diff\" command shows the parameters of the project code that will be changed",
    "start": "473840",
    "end": "477960"
  },
  {
    "text": "upon another deployment.",
    "start": "477960",
    "end": "479060"
  },
  {
    "text": "Let’s run the AWS CDK “deploy” command\nto update the affected resources.",
    "start": "480280",
    "end": "484760"
  },
  {
    "text": "Return to the ECS console and refresh the view.",
    "start": "485980",
    "end": "488740"
  },
  {
    "text": "As you can see, the service now has four running tasks.",
    "start": "493160",
    "end": "495940"
  },
  {
    "text": "Let’s check the EC2 Target Groups page.",
    "start": "496160",
    "end": "498380"
  },
  {
    "text": "As expected, four containers are now registered\nto the load balancer and receiving traffic.",
    "start": "501820",
    "end": "506260"
  },
  {
    "text": "The infrastructure has been fully updated.",
    "start": "506440",
    "end": "508300"
  },
  {
    "text": "To bring the infrastructure down, you can\nsimply run the command “cdk destroy,”",
    "start": "513480",
    "end": "517740"
  },
  {
    "text": "which will also deprovision all resources\nassociated with the application.",
    "start": "517740",
    "end": "521320"
  },
  {
    "text": "You’ve just seen how to create and provision AWS infrastructure deployments using the AWS CDK.",
    "start": "523300",
    "end": "528940"
  },
  {
    "text": "Thanks for watching.",
    "start": "529760",
    "end": "530640"
  },
  {
    "text": "Now it’s your turn to try.",
    "start": "530640",
    "end": "531640"
  }
]