[
  {
    "text": "good afternoon my name is Mike Broadway and I'm here to talk about this mouthful",
    "start": "30",
    "end": "5670"
  },
  {
    "text": "of a title which is not my title it was something that an Amazon person put there to get as many buzz words into as",
    "start": "5670",
    "end": "11730"
  },
  {
    "text": "possible basically it's it's how does HomeAway manage all of the images that are appear",
    "start": "11730",
    "end": "19289"
  },
  {
    "text": "on our public web sites so I'm a principal architect at home way which is",
    "start": "19289",
    "end": "25500"
  },
  {
    "text": "now part of Expedia my main focus is on things like content media obviously",
    "start": "25500",
    "end": "31019"
  },
  {
    "text": "which is what I'm talking about today identity authentication and pretty much anything that's not either user",
    "start": "31019",
    "end": "37469"
  },
  {
    "text": "interface facing or payment related so I worry about the rest of it I'm a",
    "start": "37469",
    "end": "43140"
  },
  {
    "text": "recovering startup junkie HomeAway was my seventh pre-ipo company the fact that",
    "start": "43140",
    "end": "49860"
  },
  {
    "text": "I'm still working means that I didn't ever get into a pre IPO company that was successful at the right time now home",
    "start": "49860",
    "end": "58230"
  },
  {
    "text": "way has put my kids through college but it hasn't allowed me to retire I've been",
    "start": "58230",
    "end": "64170"
  },
  {
    "text": "designing a writing software for about 40 years if you count the Fortran class",
    "start": "64170",
    "end": "69210"
  },
  {
    "text": "I took in my first year of college it's over 40 years but it doesn't really count so what I'm going to talk about",
    "start": "69210",
    "end": "76350"
  },
  {
    "text": "today is why home way needed a photo storage system a new photo storage system how we met that need using Amazon",
    "start": "76350",
    "end": "85250"
  },
  {
    "text": "service and the best practices that we learnt along the way I have to say that",
    "start": "85250",
    "end": "94340"
  },
  {
    "text": "in my internal talk I could use a photograph of moldy cheese I can't use",
    "start": "94340",
    "end": "100049"
  },
  {
    "text": "that here because I don't own the rights to use the image but the shelf-life of a talk like this is pretty short I almost",
    "start": "100049",
    "end": "106290"
  },
  {
    "text": "guarantee that tomorrow or the day after somebody is going to say something during the keynote that supersedes what",
    "start": "106290",
    "end": "113189"
  },
  {
    "text": "I say today or invalidates it so just when you look at these slides in a month's time take them with a pinch of",
    "start": "113189",
    "end": "119219"
  },
  {
    "text": "salt and check that the ground hasn't changed under you since then talking",
    "start": "119219",
    "end": "124770"
  },
  {
    "text": "about home boy home way is a vacation rental market place it's a place where",
    "start": "124770",
    "end": "130110"
  },
  {
    "text": "travelers can go find somewhere to stay and where owners and property managers can advertise their properties we have two million",
    "start": "130110",
    "end": "137740"
  },
  {
    "text": "different unique places that you can stay at all around the world in the",
    "start": "137740",
    "end": "143110"
  },
  {
    "text": "United States I was in one in Barcelona about a month ago you name it we've got",
    "start": "143110",
    "end": "149590"
  },
  {
    "text": "plenty of them we have a lot of photos we've got like this main central image",
    "start": "149590",
    "end": "156760"
  },
  {
    "text": "here we've got what we call hero images the big splashy images about a destination and then we have property",
    "start": "156760",
    "end": "163000"
  },
  {
    "text": "images and each property can now have up until about a month or two ago it was 25",
    "start": "163000",
    "end": "168370"
  },
  {
    "text": "images each now we're saying 50 images each so the math is a lot of photos how",
    "start": "168370",
    "end": "175210"
  },
  {
    "text": "many we get six million images uploaded every month we have to process that into",
    "start": "175210",
    "end": "182200"
  },
  {
    "text": "all sorts of different sizes that's five terabytes a month eighty million unique",
    "start": "182200",
    "end": "189040"
  },
  {
    "text": "originals today but obviously we're growing rapidly of those original images",
    "start": "189040",
    "end": "194350"
  },
  {
    "text": "we end up producing everything from thumbnails to 1920 wide landscape images",
    "start": "194350",
    "end": "200230"
  },
  {
    "text": "we end up with treatments or derivatives of about 1.5 billion images that we",
    "start": "200230",
    "end": "205810"
  },
  {
    "text": "serve up to the Internet in the past and",
    "start": "205810",
    "end": "211090"
  },
  {
    "text": "actually still operating today in parallel in our Austin data center we have a farm of java application service",
    "start": "211090",
    "end": "218170"
  },
  {
    "text": "that are doing this image processing they were implemented nine years ago the",
    "start": "218170",
    "end": "223870"
  },
  {
    "text": "design goals that they had were very different our design goals nine years ago were we had bought ten or fifteen",
    "start": "223870",
    "end": "230800"
  },
  {
    "text": "companies that were in this space we had to make sure that we could support all the image sizes that those 10 or 15",
    "start": "230800",
    "end": "236500"
  },
  {
    "text": "companies had produced those companies have been in business since the late 90s so they considered a 1024 wide image to",
    "start": "236500",
    "end": "245200"
  },
  {
    "text": "be high resolution and that's not the case today in our Austin data center all",
    "start": "245200",
    "end": "250810"
  },
  {
    "text": "of these images are stored on a nas and network attached storage it's expensive",
    "start": "250810",
    "end": "255910"
  },
  {
    "text": "storage runs about five grand a terabyte fully loaded cost so went through that",
    "start": "255910",
    "end": "263080"
  },
  {
    "text": "bit fast yes so $5,000 a terabyte is our cost in the Austin data center which just on",
    "start": "263080",
    "end": "271550"
  },
  {
    "text": "this space alone is running us $25,000 a month and as I mentioned ten years ago",
    "start": "271550",
    "end": "279190"
  },
  {
    "text": "1024 is certainly 15 years ago 1024 was high-resolution it's sad but most of the",
    "start": "279190",
    "end": "286280"
  },
  {
    "text": "images on our website are four by three aspect ratio because 10 years ago we all had CRT monitors on our desks not 1920",
    "start": "286280",
    "end": "294500"
  },
  {
    "text": "LCD panels another issue that we would",
    "start": "294500",
    "end": "302270"
  },
  {
    "text": "face is that the upload rate varies enormously for some reason Saturday",
    "start": "302270",
    "end": "310550"
  },
  {
    "text": "morning is a popular time to do image uploads I think that we have some property managers who manage large number of properties that refresh their",
    "start": "310550",
    "end": "317840"
  },
  {
    "text": "content every Saturday morning it's also when a lot of our individual property owners will go this takes some time they",
    "start": "317840",
    "end": "325010"
  },
  {
    "text": "don't want to do it on Monday evening or Thursday evening they want to do it on Saturday morning it's one of their weekend chores so 12 o'clock",
    "start": "325010",
    "end": "333170"
  },
  {
    "text": "Austin time Central time is our peak traffic in the week and with this was a",
    "start": "333170",
    "end": "339800"
  },
  {
    "text": "week in March of 2016 early in the development of the system that I'm going",
    "start": "339800",
    "end": "345200"
  },
  {
    "text": "to describe to you and this was the traffic we were seeing then 36 hours later at one o'clock in the morning it's",
    "start": "345200",
    "end": "351740"
  },
  {
    "text": "not 25 nine images a second it's one image every 25 seconds now we have to",
    "start": "351740",
    "end": "357890"
  },
  {
    "text": "have enough hardware to allow for unusual peaks so we had hardware to handle 20 images per second but most of",
    "start": "357890",
    "end": "365870"
  },
  {
    "text": "the time that hardware is doing nothing yeah 225 to one load ratio and then if",
    "start": "365870",
    "end": "373160"
  },
  {
    "text": "you look at all of these individual spikes these are doubling and tripling of load over the space of 20 or 30",
    "start": "373160",
    "end": "378290"
  },
  {
    "text": "minutes it this is exact this is one of the best use cases for Landers where you",
    "start": "378290",
    "end": "385190"
  },
  {
    "text": "have a very highly elastic load and you don't want to be having idle hardware",
    "start": "385190",
    "end": "390200"
  },
  {
    "text": "sitting around doing nothing most of the time so",
    "start": "390200",
    "end": "395490"
  },
  {
    "text": "why did we switch to two AWS service AWS",
    "start": "395490",
    "end": "400710"
  },
  {
    "text": "lambdas give us the extremes scalability that we need s3 storage gives us cheap",
    "start": "400710",
    "end": "407400"
  },
  {
    "text": "storage a terabyte of s3 storage we can have that for 14 years for the price of",
    "start": "407400",
    "end": "413970"
  },
  {
    "text": "one terabyte that we're paying for today so it's much cheaper for us to store in s3 we're using DynamoDB for storing our",
    "start": "413970",
    "end": "421860"
  },
  {
    "text": "metadata about descriptions of the images and we get the benefit of Amazon",
    "start": "421860",
    "end": "427770"
  },
  {
    "text": "being in multiple regions for us we're fronted by a CDN so it's not about how",
    "start": "427770",
    "end": "432930"
  },
  {
    "text": "do we distribute our images around the world the CDN takes care of that but it's about how we can be highly",
    "start": "432930",
    "end": "438900"
  },
  {
    "text": "available what happens if our Austin servers go if our Austin data link goes",
    "start": "438900",
    "end": "444599"
  },
  {
    "text": "down what do we do we can't serve any new images so with a multi region",
    "start": "444599",
    "end": "450620"
  },
  {
    "text": "architecture we can handle that with AWS lambdas I'm going to do a very very",
    "start": "450620",
    "end": "457020"
  },
  {
    "text": "quick introduction to two lambdas this is a 300 level talks so most of you probably know what they are already as",
    "start": "457020",
    "end": "469070"
  },
  {
    "text": "you know they're a single piece of function code no threads to manage the",
    "start": "469070",
    "end": "475889"
  },
  {
    "text": "really nice thing is there's no server patching to do fine-grained scaling you",
    "start": "475889",
    "end": "481409"
  },
  {
    "text": "only pay for what you use this this pretty much comes off the Amazon website so you don't need to worry about",
    "start": "481409",
    "end": "487590"
  },
  {
    "text": "capturing this slide a point that I missed off here is resilience with a",
    "start": "487590",
    "end": "493620"
  },
  {
    "text": "classic web server serving up images if you have a bug that means every 10,000",
    "start": "493620",
    "end": "498840"
  },
  {
    "text": "images or 100,000 images you lose a thread a request thread gets stuck or you've got a memory leak over time that",
    "start": "498840",
    "end": "506699"
  },
  {
    "text": "server degrades and eventually fails you with lambdas if that happens inside a",
    "start": "506699",
    "end": "511830"
  },
  {
    "text": "lambda it's not your problem that lambda is going to fail eventually perhaps but",
    "start": "511830",
    "end": "517409"
  },
  {
    "text": "Amazon will take care of taking that one out of the loop and you don't have to do anything to recover from server failures",
    "start": "517409",
    "end": "526190"
  },
  {
    "text": "this is a trivial javascript example of a laugh a lambda",
    "start": "526190",
    "end": "531450"
  },
  {
    "text": "this one takes receives an SMS message a simple notification service message and",
    "start": "531450",
    "end": "537120"
  },
  {
    "text": "logs the content of that message to cloud watch this is a terrible use of",
    "start": "537120",
    "end": "542220"
  },
  {
    "text": "lambdas it just illustrates how simple it is to write them you don't have to",
    "start": "542220",
    "end": "548459"
  },
  {
    "text": "know anything about SNS you just write this function tell Amazon hey this function exists and tell it what topic",
    "start": "548459",
    "end": "555750"
  },
  {
    "text": "it's going to be listening to and the SNS mentions messages will get processed this is an example of something that",
    "start": "555750",
    "end": "563190"
  },
  {
    "text": "could be very expensive to do with lambdas you pay only for what you use",
    "start": "563190",
    "end": "568649"
  },
  {
    "text": "but you pay in increments of 100 milliseconds this lambda will execute in about 2 milliseconds so if you were",
    "start": "568649",
    "end": "575430"
  },
  {
    "text": "executing a hundred of these a second you're going to be paying for an awful",
    "start": "575430",
    "end": "581130"
  },
  {
    "text": "lot of CPU time you're paying for a hundred milliseconds for each one times one hundred you're paying for what 100",
    "start": "581130",
    "end": "588029"
  },
  {
    "text": "seconds 10 seconds you're paying for a lot of CPU time that you don't need to so think about what your use case is if",
    "start": "588029",
    "end": "595320"
  },
  {
    "text": "you're going to run one of these once an hour then this is a great use of lambda if you're running one that these are",
    "start": "595320",
    "end": "600480"
  },
  {
    "text": "hundred times a second this is a very bad use of a lambda because it's it's going to cost you so much at that it",
    "start": "600480",
    "end": "607440"
  },
  {
    "text": "runs in two milliseconds but you get you get charged for 100 milliseconds this",
    "start": "607440",
    "end": "615089"
  },
  {
    "text": "lambda which you won't be able to read from the back of the room which is a good thing because it's one of our oldest lambdas I've taken out all the",
    "start": "615089",
    "end": "622079"
  },
  {
    "text": "comments I've taken out the logging so that it will fit on one page this lambda takes about two and a half to three",
    "start": "622079",
    "end": "627329"
  },
  {
    "text": "seconds to run so the hundred millisecond round is just a rounding error we don't we're not worried about",
    "start": "627329",
    "end": "633000"
  },
  {
    "text": "that it's a slight cheat on this lap this one is responding to again which",
    "start": "633000",
    "end": "639990"
  },
  {
    "text": "one is this yes this one is again responding to an SMS message it's a bit",
    "start": "639990",
    "end": "646829"
  },
  {
    "text": "of an iceberg it looks like it's only ten lines long that last line get treatment processor rendered treatment",
    "start": "646829",
    "end": "653370"
  },
  {
    "text": "sets that's where the bulk of the code is there's a whole bunch of code behind there that gets shared but what this",
    "start": "653370",
    "end": "659699"
  },
  {
    "text": "demonstrates is this is a Java lambda that's using a library there are",
    "start": "659699",
    "end": "665610"
  },
  {
    "text": "three lambdas in our system that are about this size that use the same library it's easy to have an engineer go",
    "start": "665610",
    "end": "672270"
  },
  {
    "text": "off and write a fourth lambda that uses the same library in a slightly different way and there's like you can write them",
    "start": "672270",
    "end": "677910"
  },
  {
    "text": "like Lego bricks that you can then plug in so the service that we wrote we",
    "start": "677910",
    "end": "683910"
  },
  {
    "text": "called the on-demand image service or oldest I'm going to go through basic",
    "start": "683910",
    "end": "690420"
  },
  {
    "text": "principles how it works then I'm going through in detail that each of the lambdas and what they do basic",
    "start": "690420",
    "end": "695730"
  },
  {
    "text": "principles owners will upload an image that came off their SLR it might be six",
    "start": "695730",
    "end": "700980"
  },
  {
    "text": "thousand by four thousand pixels it could be twelve megabytes these days it could be ten thousand pixels wide that's",
    "start": "700980",
    "end": "707790"
  },
  {
    "text": "a huge image to be manipulating if you're going to be going back and using that image over and over again and",
    "start": "707790",
    "end": "714029"
  },
  {
    "text": "producing different sizes of images that's a large image so we want to keep that one for the long term but we're not",
    "start": "714029",
    "end": "720779"
  },
  {
    "text": "going to use that as our primary image for each of the manipulations we do what we do instead that image gets put in an",
    "start": "720779",
    "end": "728279"
  },
  {
    "text": "s3 bucket we run a lambda on that which creates a master image and the master",
    "start": "728279",
    "end": "733440"
  },
  {
    "text": "image is about a quarter of the size of that original image it's much smaller to",
    "start": "733440",
    "end": "738990"
  },
  {
    "text": "load into memory it's much smaller to manipulate so faster that master image",
    "start": "738990",
    "end": "744510"
  },
  {
    "text": "is stored in s3 bucket and from that we use another lambda to derive all of the",
    "start": "744510",
    "end": "749670"
  },
  {
    "text": "different treatments that we serve up to the public so now I'm going to go",
    "start": "749670",
    "end": "755430"
  },
  {
    "text": "through step by step and build up to the architecture of ODIs at its core there are three s3 buckets one on the far left",
    "start": "755430",
    "end": "764160"
  },
  {
    "text": "is for the original images one in the middle for the master images and the one on the right is for the treatments that",
    "start": "764160",
    "end": "770190"
  },
  {
    "text": "we serve up to the public initially we were going to write a service a web",
    "start": "770190",
    "end": "776370"
  },
  {
    "text": "service that people could upload images to this is not the public uploading to it this is our business platforms",
    "start": "776370",
    "end": "782700"
  },
  {
    "text": "whether it's home Wacom or bed-and-breakfast comm they would be uploading images to a service that put",
    "start": "782700",
    "end": "788730"
  },
  {
    "text": "them into s3 and then we realized that was really a waste of time why don't we have our business platform just upload",
    "start": "788730",
    "end": "795300"
  },
  {
    "text": "to to s3 so that's what we've done we've cut out the middleman there and we've saved some latency in that process so it",
    "start": "795300",
    "end": "802910"
  },
  {
    "text": "uses the s3 api's to put the image into the original bucket and along with the image attach some metadata which is a",
    "start": "802910",
    "end": "809900"
  },
  {
    "text": "feature that s3 supports you put the binary file in as an object into s3 and attach some named values as as metadata",
    "start": "809900",
    "end": "818300"
  },
  {
    "text": "and that metadata helps to influence how ODIs will treat that image the creation",
    "start": "818300",
    "end": "826610"
  },
  {
    "text": "of that s3 object triggers a lambda and the lambda is given the the key for that",
    "start": "826610",
    "end": "833390"
  },
  {
    "text": "that image file the we call this lambda the induction lambda because it's",
    "start": "833390",
    "end": "838550"
  },
  {
    "text": "inducting the image into our ODIs system it reads the file out of s3 processes it",
    "start": "838550",
    "end": "845900"
  },
  {
    "text": "into the smaller master file and writes it into the master s3 bucket then it",
    "start": "845900",
    "end": "854210"
  },
  {
    "text": "writes the metadata that it received from the client gets written into a",
    "start": "854210",
    "end": "859250"
  },
  {
    "text": "DynamoDB database along with a signature for the image and so there's a key for",
    "start": "859250",
    "end": "864740"
  },
  {
    "text": "the image and there's a signature the signature is the md5 hash that s3",
    "start": "864740",
    "end": "870520"
  },
  {
    "text": "happens to give us which is nice that saves us the time of doing it the length of the file and the type of the file so",
    "start": "870520",
    "end": "877400"
  },
  {
    "text": "the md5 hash plus the length of the file plus the type of the file that's that's pretty much guaranteed to be unique and",
    "start": "877400",
    "end": "884360"
  },
  {
    "text": "that gives us a unique signature for that file which gets written as a DynamoDB a secondary function of the",
    "start": "884360",
    "end": "891290"
  },
  {
    "text": "induction lambda is to watch out for duplicate images we have some property managers who have thousands of",
    "start": "891290",
    "end": "897200"
  },
  {
    "text": "properties that they advertise on our site and they upload the image they refresh their images three times a week",
    "start": "897200",
    "end": "903650"
  },
  {
    "text": "and they upload the same images three times a week and they are supposed to",
    "start": "903650",
    "end": "909020"
  },
  {
    "text": "give us a unique ID that is the same each time but they don't they give us a different ID each time so they're",
    "start": "909020",
    "end": "914959"
  },
  {
    "text": "uploading the duplicate image over and over again that signature that I talked",
    "start": "914959",
    "end": "920209"
  },
  {
    "text": "about allows the induction lambda to detect oh I've already seen that one it's already listed in the dynamo DD DB",
    "start": "920209",
    "end": "926839"
  },
  {
    "text": "database I don't need to processor one again in fact I'll delete it from the original bucket I'll",
    "start": "926839",
    "end": "933560"
  },
  {
    "text": "change the record in dynamodb to point to the other copy of this image that we've already got so we'll still process",
    "start": "933560",
    "end": "940459"
  },
  {
    "text": "it as if it was a new image but we haven't kept it a duplicate copy of a 10 megabyte image lying around there's a",
    "start": "940459",
    "end": "949850"
  },
  {
    "text": "stream coming out of DynamoDB so DynamoDB supports streaming every update",
    "start": "949850",
    "end": "955639"
  },
  {
    "text": "every record written to DynamoDB can be written into a stream and you can have a",
    "start": "955639",
    "end": "962180"
  },
  {
    "text": "lambda invoked in response to that stream so we have what we call the",
    "start": "962180",
    "end": "968509"
  },
  {
    "text": "disposition stream lambda is listening to that stream it could do some",
    "start": "968509",
    "end": "973550"
  },
  {
    "text": "processing on the image but it's not a good place to do that processing the streams there are only going to be a",
    "start": "973550",
    "end": "980029"
  },
  {
    "text": "limited number of streams coming out of DynamoDB it will shard the streams according to how many partitions you",
    "start": "980029",
    "end": "986000"
  },
  {
    "text": "have in your dynamo database so when you start out and your dynamo database is",
    "start": "986000",
    "end": "991639"
  },
  {
    "text": "small you might only have a single shard to that stream so they'll only ever be a single one of the dispositions stream",
    "start": "991639",
    "end": "998029"
  },
  {
    "text": "lambdas running today we've got much larger database and we've got several of them running but they'll only ever be",
    "start": "998029",
    "end": "1004480"
  },
  {
    "text": "one two three four of these running at a time and they'll be given ten records 20",
    "start": "1004480",
    "end": "1010269"
  },
  {
    "text": "records a hundred records in a batch now if you spend three seconds processing",
    "start": "1010269",
    "end": "1015939"
  },
  {
    "text": "each one of those records then that lambda becomes a bottleneck so you don't want to do any heavy processing on your",
    "start": "1015939",
    "end": "1023470"
  },
  {
    "text": "dynamodb stream you need to do a fan-out from that and the way we do the fan-out is using SNS so the disposition stream",
    "start": "1023470",
    "end": "1032709"
  },
  {
    "text": "lambda for every record it gets out of the DynamoDB stream writes an SNS",
    "start": "1032709",
    "end": "1038260"
  },
  {
    "text": "message with the content of that record that describes the image then we have a",
    "start": "1038260",
    "end": "1043630"
  },
  {
    "text": "third lambda the treatment caching lambda that is invoked by those SNS messages and goes oh there's a new file",
    "start": "1043630",
    "end": "1051340"
  },
  {
    "text": "for a new master file for me to process it's now my job to take that master file and produce all of the smaller images",
    "start": "1051340",
    "end": "1059530"
  },
  {
    "text": "that are derived from it the thumbnails the the medium-sized images the large full-bleed images which images we we",
    "start": "1059530",
    "end": "1068350"
  },
  {
    "text": "cache depends on that metadata that we were given so the the client writes",
    "start": "1068350",
    "end": "1074409"
  },
  {
    "text": "metadata that says this is a name set of treatments that I want you to cache that",
    "start": "1074409",
    "end": "1080019"
  },
  {
    "text": "metadata runs through the pipeline arrives at the treatment cache with the SNS mate message and the treatment",
    "start": "1080019",
    "end": "1086409"
  },
  {
    "text": "caching lambda then goes oh I know that I have got to produce these six seven eight nine ten different treatments in",
    "start": "1086409",
    "end": "1093460"
  },
  {
    "text": "the final s3 bucket I haven't shown here but there is a second DynamoDB database",
    "start": "1093460",
    "end": "1099399"
  },
  {
    "text": "that contains the treatment definitions those get loaded the first time a lambda is the treatment cache lounder is",
    "start": "1099399",
    "end": "1105490"
  },
  {
    "text": "invoked it loads those from the Dino mode second table and caches those so that subsequent invocations of that",
    "start": "1105490",
    "end": "1112149"
  },
  {
    "text": "instance of the lambda it's already got the definitions of the treatments to write out last step in in the basic",
    "start": "1112149",
    "end": "1121659"
  },
  {
    "text": "process is how do you serve the images up to the CDN and for that we've got a regular web service it's actually hosted",
    "start": "1121659",
    "end": "1129100"
  },
  {
    "text": "in docker running in our Mei sauce marathon cluster you could serve images",
    "start": "1129100",
    "end": "1135639"
  },
  {
    "text": "straight out of s3 but then you have no flexibility about how the image is named",
    "start": "1135639",
    "end": "1140850"
  },
  {
    "text": "by having an origination service there that web service is able to read the",
    "start": "1140850",
    "end": "1146799"
  },
  {
    "text": "request URL and interpret it so we're able to support our legacy URLs that we",
    "start": "1146799",
    "end": "1152830"
  },
  {
    "text": "have used for 10 or 15 years and we're able to support new URLs which are much",
    "start": "1152830",
    "end": "1157840"
  },
  {
    "text": "more flexible and allow our user interface designers to say I want it",
    "start": "1157840",
    "end": "1162879"
  },
  {
    "text": "this size I want it this size I want it rotated on its side that can all be",
    "start": "1162879",
    "end": "1167889"
  },
  {
    "text": "defined inside the URL itself sometimes",
    "start": "1167889",
    "end": "1173309"
  },
  {
    "text": "the origination service will get a request for an image that it doesn't have that size already so it can",
    "start": "1173309",
    "end": "1181929"
  },
  {
    "text": "on-the-fly invoke in a synchronous call a third Lander a single treatment lambda",
    "start": "1181929",
    "end": "1190029"
  },
  {
    "text": "this one just builds the one image size that you need so if you know the image",
    "start": "1190029",
    "end": "1196360"
  },
  {
    "text": "but the size that you want isn't already cashed the origination service is able",
    "start": "1196360",
    "end": "1201730"
  },
  {
    "text": "to invoke the single treatment lambda to cash that that was the basic ODIs system",
    "start": "1201730",
    "end": "1208120"
  },
  {
    "text": "that we had running just over a year ago one of the great things about lambdas",
    "start": "1208120",
    "end": "1213700"
  },
  {
    "text": "and this whole service architecture is the way that it's like putting Lego bricks together and that when your",
    "start": "1213700",
    "end": "1219490"
  },
  {
    "text": "product people come along or your customers come along and say hey we need a new feature it's it's pretty easy to",
    "start": "1219490",
    "end": "1225220"
  },
  {
    "text": "add them something that we needed to do pretty much straightaway was you upload",
    "start": "1225220",
    "end": "1230650"
  },
  {
    "text": "an image you've all done this I'm sure you upload an image from your iPhone to some website or you sent we want to send",
    "start": "1230650",
    "end": "1236559"
  },
  {
    "text": "it as an email and you look at the image on the website and it's on its side the",
    "start": "1236559",
    "end": "1241929"
  },
  {
    "text": "phone knew which way up it was or you knew which way up it was but the website doesn't seem to know so you need to tell the website to turn it around so we need",
    "start": "1241929",
    "end": "1249340"
  },
  {
    "text": "a mechanism to be able to say that image needs to be changed and to do that we have a set of single synchronous call",
    "start": "1249340",
    "end": "1258510"
  },
  {
    "text": "lambdas that can modify the disposition of an image they can update the DynamoDB",
    "start": "1258510",
    "end": "1266799"
  },
  {
    "text": "record that describes the image and cause it to change the raw orientation",
    "start": "1266799",
    "end": "1271990"
  },
  {
    "text": "change the crop it's not quite true to say we update the DynamoDB record we",
    "start": "1271990",
    "end": "1277030"
  },
  {
    "text": "don't update it we need the image to have a new ID so that any CDN caching",
    "start": "1277030",
    "end": "1283210"
  },
  {
    "text": "that has happened for that image already will be forgotten so we write a new record for that image with a new",
    "start": "1283210",
    "end": "1289450"
  },
  {
    "text": "disposition the new rotation the new crop which causes a new set of images to",
    "start": "1289450",
    "end": "1295600"
  },
  {
    "text": "be cached in the treatment cache bucket and with a different ID to the previous one so now the UI can ask for the image",
    "start": "1295600",
    "end": "1303700"
  },
  {
    "text": "with a different ID and get it with the correct rotation the business platform",
    "start": "1303700",
    "end": "1310390"
  },
  {
    "text": "people were this is all greats working fine except we don't know when you're ready we've uploaded an image to you how",
    "start": "1310390",
    "end": "1317679"
  },
  {
    "text": "can can you tell us when the image is ready for us to ask for we achieved that",
    "start": "1317679",
    "end": "1323260"
  },
  {
    "text": "by just adding the induction Lander as soon as the rock master image is written to the s3 bucket as soon as the wreck",
    "start": "1323260",
    "end": "1330220"
  },
  {
    "text": "is written into the dynamodb database the image could be requested from the front-end so the induction lambda can",
    "start": "1330220",
    "end": "1338230"
  },
  {
    "text": "write the message into a Kinesis queue which triggers another lambda a callback",
    "start": "1338230",
    "end": "1343389"
  },
  {
    "text": "lambda with information on a web hook to callback on the business platform to say",
    "start": "1343389",
    "end": "1348759"
  },
  {
    "text": "the image is now ready you can you can tell the owner his images up uploaded and he can now display it so we've got",
    "start": "1348759",
    "end": "1358690"
  },
  {
    "text": "millions of images we want to know things about those images so we want to plug in another system that's going to",
    "start": "1358690",
    "end": "1365200"
  },
  {
    "text": "do image recognition we have this service called iris image recognition and inference service I'll talk a little",
    "start": "1365200",
    "end": "1371830"
  },
  {
    "text": "bit more about that later but it doesn't use lambdas so it's not part of this this topic but it needs to know about",
    "start": "1371830",
    "end": "1379600"
  },
  {
    "text": "every image that's on our system we already have a lambda that knows about Emmy every image that's passing through",
    "start": "1379600",
    "end": "1385779"
  },
  {
    "text": "our system so we'll just have that lambda right to a Kinesis topic and then that Kinesis topic is what drives the",
    "start": "1385779",
    "end": "1392860"
  },
  {
    "text": "image recognition system and what iris does for us is things like it looks for",
    "start": "1392860",
    "end": "1398500"
  },
  {
    "text": "out-of-focus images it looks for inappropriate images it looks for what",
    "start": "1398500",
    "end": "1405129"
  },
  {
    "text": "is this image oh it's it's a bathroom it's a car it's a swing pool stuff like",
    "start": "1405129",
    "end": "1412029"
  },
  {
    "text": "that that information is very useful to us we can't use lambdas for that yet it",
    "start": "1412029",
    "end": "1417669"
  },
  {
    "text": "uses GPUs and you don't get lambdas are not yet available for GPUs we've said to",
    "start": "1417669",
    "end": "1423879"
  },
  {
    "text": "to Amazon hey maybe you would like to provide GPU lambdas and they've gone that's that's a strange idea why would",
    "start": "1423879",
    "end": "1430750"
  },
  {
    "text": "you do that well the GPUs take about a hundredth of the time that a regular CPU",
    "start": "1430750",
    "end": "1437950"
  },
  {
    "text": "server does to do the kind of image processing the iris does iris would",
    "start": "1437950",
    "end": "1443139"
  },
  {
    "text": "really benefit from the same scalability flexibility that we have with ODIs but",
    "start": "1443139",
    "end": "1449559"
  },
  {
    "text": "at a hundred times the processing time no it's not cost-effective if there were",
    "start": "1449559",
    "end": "1455440"
  },
  {
    "text": "GPU lambdas we'd probably buy them straight away so just summing up they're",
    "start": "1455440",
    "end": "1461619"
  },
  {
    "text": "there the benefits that we got out of ws serverless were ultra fine-grained",
    "start": "1461619",
    "end": "1467110"
  },
  {
    "text": "scalability its event-driven very rapid development I would guess that it I",
    "start": "1467110",
    "end": "1472570"
  },
  {
    "text": "don't know whether it took us half as long or took half as many people but it's something like half and you can",
    "start": "1472570",
    "end": "1479650"
  },
  {
    "text": "vary that equation in which way you want you can add twice as many people or half",
    "start": "1479650",
    "end": "1485110"
  },
  {
    "text": "the time whichever the flexibility being able to plug more LEGO bricks on the",
    "start": "1485110",
    "end": "1491230"
  },
  {
    "text": "sides or rearrange those Lego bricks that that's great we didn't have the",
    "start": "1491230",
    "end": "1496600"
  },
  {
    "text": "option of step functions when we designed this I'm not sure that we would change our design right now but step",
    "start": "1496600",
    "end": "1503200"
  },
  {
    "text": "functions are something else to look at I don't talk about it here but they're interesting as a way of orchestrating",
    "start": "1503200",
    "end": "1509530"
  },
  {
    "text": "lambdas looking at the response of one lambda and choosing to invoke a different range of options after that",
    "start": "1509530",
    "end": "1517320"
  },
  {
    "text": "just on s3 space this just using s3 instead of our expensive NFS storage is",
    "start": "1517320",
    "end": "1525010"
  },
  {
    "text": "going to be saving us in the order of $20,000 a month not having redundant",
    "start": "1525010",
    "end": "1531310"
  },
  {
    "text": "servers lying around for those once a week Peaks is going to save us money and",
    "start": "1531310",
    "end": "1537960"
  },
  {
    "text": "it's hard to measure what the benefit is here but not having to worry about",
    "start": "1537960",
    "end": "1544390"
  },
  {
    "text": "server patches not having to worry about server maintenance do we need to upgrade",
    "start": "1544390",
    "end": "1550240"
  },
  {
    "text": "the server to some newer hardware it's just not our problem if we if we need more memory we just",
    "start": "1550240",
    "end": "1556630"
  },
  {
    "text": "changed the configuration of our AWS lambdas so operationally it's a lot easier for us to run what are some of",
    "start": "1556630",
    "end": "1565270"
  },
  {
    "text": "the things that we learn one thing that ODIs doesn't do but a lot of people are",
    "start": "1565270",
    "end": "1572380"
  },
  {
    "text": "beginning to do within HomeAway and an expedia lambdas are very good at if you",
    "start": "1572380",
    "end": "1579130"
  },
  {
    "text": "put something that needs to run once an hour or at 3:00 p.m. on Tuesday afternoon you can write a cron script a",
    "start": "1579130",
    "end": "1585640"
  },
  {
    "text": "cron configuration and run a lambda to match that cron timer so it's very easy",
    "start": "1585640",
    "end": "1592180"
  },
  {
    "text": "to have something that runs once an hour and then you really don't care whether it's a",
    "start": "1592180",
    "end": "1597570"
  },
  {
    "text": "it's done in five milliseconds or two minutes it's only running once an hour or once a day it's a very good thing to",
    "start": "1597570",
    "end": "1604920"
  },
  {
    "text": "do it saves you having a dedicated server just for something that needs to be scheduled why didn't we use API",
    "start": "1604920",
    "end": "1613260"
  },
  {
    "text": "gateway Amazon's API gateway we definitely looked at that for about 48",
    "start": "1613260",
    "end": "1618330"
  },
  {
    "text": "hours and then realized older every Amazon API gateway function is public so",
    "start": "1618330",
    "end": "1625410"
  },
  {
    "text": "yes it's a great way of invoking lambdas if you want all of your lambdas to be public we didn't want them to be public",
    "start": "1625410",
    "end": "1632490"
  },
  {
    "text": "so we couldn't use it that way",
    "start": "1632490",
    "end": "1637010"
  },
  {
    "text": "this is counterintuitive initially we went hey to to manipulate",
    "start": "1638060",
    "end": "1645030"
  },
  {
    "text": "an image that's 6,000 by 4,000 pixels that that's easy to do in a 500 megabyte",
    "start": "1645030",
    "end": "1651420"
  },
  {
    "text": "lambda and that's cheaper except that",
    "start": "1651420",
    "end": "1656840"
  },
  {
    "text": "the only parameter you control when you configure a lambda is how much memory it gets but CPU is allocated proportionally",
    "start": "1656840",
    "end": "1664290"
  },
  {
    "text": "if you double the amount of memory allocated to the lambda you double the amount of CPU it gets so it actually",
    "start": "1664290",
    "end": "1671160"
  },
  {
    "text": "turned out that we saved money by increasing the amount of memory we",
    "start": "1671160",
    "end": "1676290"
  },
  {
    "text": "configured for our lambdas we didn't need that much memory but the fact that it got more CPU power meant that the job",
    "start": "1676290",
    "end": "1682860"
  },
  {
    "text": "ran in less time and so we paid less money this isn't a problem through this",
    "start": "1682860",
    "end": "1691980"
  },
  {
    "text": "it's just something to be aware of ODIs lambdas are pretty big",
    "start": "1691980",
    "end": "1697320"
  },
  {
    "text": "we've got graphics magic in as a binary is wrapped up inside the jar file that we deploy when it first gets",
    "start": "1697320",
    "end": "1704340"
  },
  {
    "text": "instantiated that lambda has to be unpacked and move the graphics magic file into the right place on the file",
    "start": "1704340",
    "end": "1710100"
  },
  {
    "text": "system so the graphics magic doesn't get confused all that takes about 10 or 12 seconds the first time a lambda is",
    "start": "1710100",
    "end": "1716490"
  },
  {
    "text": "invoked that's not a problem because lambdas stick around for they get",
    "start": "1716490",
    "end": "1723150"
  },
  {
    "text": "invoked once they get in but they'll get invoked again and again and again even if they're idle they'll stick around for",
    "start": "1723150",
    "end": "1729480"
  },
  {
    "text": "anywhere five to 20 minutes as long as something comes along that needs it in that time they'll get reused",
    "start": "1729480",
    "end": "1735450"
  },
  {
    "text": "if you have really really spiky loads like in the middle there where you go",
    "start": "1735450",
    "end": "1740730"
  },
  {
    "text": "from 62 mm and then straight back down",
    "start": "1740730",
    "end": "1746280"
  },
  {
    "text": "to 60 again then you're going to instantiate a whole bunch of lambdas one",
    "start": "1746280",
    "end": "1751710"
  },
  {
    "text": "time only and you're going to pay that instantiation cost and it's not going to get amortized over subsequent calls so",
    "start": "1751710",
    "end": "1759720"
  },
  {
    "text": "you're going to pay for that instantiation time that 12 seconds you pay for that 12 seconds at the 12 times",
    "start": "1759720",
    "end": "1766860"
  },
  {
    "text": "12 times 10 hundred milliseconds yeah you pay that much for it but that",
    "start": "1766860",
    "end": "1772980"
  },
  {
    "text": "doesn't matter if it gets reused 50 times or a hundred times or a thousand times if you only get used once you're",
    "start": "1772980",
    "end": "1779550"
  },
  {
    "text": "paying that instantiation cost and not recouping it in subsequent calls so it's",
    "start": "1779550",
    "end": "1785400"
  },
  {
    "text": "just something to be aware about when you're looking at traffic patterns and trying to assess where the lambdas are going to be a good fit I'm going to",
    "start": "1785400",
    "end": "1795030"
  },
  {
    "text": "contradict something on the Amazon FAQ for lambdas they actually say the",
    "start": "1795030",
    "end": "1801870"
  },
  {
    "text": "opposite of this so I'm going to contradict that and then I'll explain there right and so are we",
    "start": "1801870",
    "end": "1808080"
  },
  {
    "text": "there's a limit on the size of a lambda package it can't be more than 50 megabytes this was never a problem for",
    "start": "1808080",
    "end": "1815610"
  },
  {
    "text": "oh this because from the beginning we we use something called shading other teams",
    "start": "1815610",
    "end": "1823320"
  },
  {
    "text": "that I've come across recently inside Expedia were hitting this 50 megabyte limit and weren't sure what to do they",
    "start": "1823320",
    "end": "1830100"
  },
  {
    "text": "were packing all of their dependencies into one big zip file and then trying to deploy that and they were pulling in a",
    "start": "1830100",
    "end": "1836490"
  },
  {
    "text": "lot of dependencies and that was adding up to more than 50 megabytes both maven",
    "start": "1836490",
    "end": "1843450"
  },
  {
    "text": "and Gradle have something called shade or shadow that will build a fat jar",
    "start": "1843450",
    "end": "1849500"
  },
  {
    "text": "that's got your code in it and all of the functions that you call all of the",
    "start": "1849500",
    "end": "1855570"
  },
  {
    "text": "objects that you that you're using from other libraries in that one fat jar but only the classes that you're using so if",
    "start": "1855570",
    "end": "1863550"
  },
  {
    "text": "if your pendant on the Amazon s3 library but you're only using one class or one",
    "start": "1863550",
    "end": "1869740"
  },
  {
    "text": "function in that library then shading will pull just that piece of code out of the Amazon library and put it into the",
    "start": "1869740",
    "end": "1876460"
  },
  {
    "text": "fat jar it builds for you and leave the rest behind so if you're butting up",
    "start": "1876460",
    "end": "1881919"
  },
  {
    "text": "against the 50 megabyte limit you should be using shading now the the Amazon",
    "start": "1881919",
    "end": "1887470"
  },
  {
    "text": "facts says the reverse it says it's faster to unpack if you zip the jar file",
    "start": "1887470",
    "end": "1893860"
  },
  {
    "text": "your dependencies up in a Lib directory that will be faster than building one",
    "start": "1893860",
    "end": "1899980"
  },
  {
    "text": "big jar file and both is correct they're",
    "start": "1899980",
    "end": "1906190"
  },
  {
    "text": "correct that unpacking that zip file and leaving the jars as they are rather than",
    "start": "1906190",
    "end": "1911619"
  },
  {
    "text": "unpacking hundreds of individual class files can be faster but that's no good",
    "start": "1911619",
    "end": "1918009"
  },
  {
    "text": "if if your package ends up being over 50 megabytes you're screwed so you're going",
    "start": "1918009",
    "end": "1923740"
  },
  {
    "text": "to have to do shading ODIs uses shading we end up with a about a 10 megabyte 12 megabyte jar file which includes",
    "start": "1923740",
    "end": "1930580"
  },
  {
    "text": "graphics magic one project to rule them",
    "start": "1930580",
    "end": "1937749"
  },
  {
    "text": "all this this is definitely something we've seen with other expedia teams not doing and wishing they had all of our",
    "start": "1937749",
    "end": "1944379"
  },
  {
    "text": "lambdas are in one github project one",
    "start": "1944379",
    "end": "1950350"
  },
  {
    "text": "set of libraries building one jar file you can deploy that jar file multiple",
    "start": "1950350",
    "end": "1957100"
  },
  {
    "text": "times specifying different classes within that jar file as the target for",
    "start": "1957100",
    "end": "1962799"
  },
  {
    "text": "the lambda it makes it much easier to have a single jar file that's deployed five times for five different lambdas",
    "start": "1962799",
    "end": "1969730"
  },
  {
    "text": "than five separate projects that need to be coordinated and version controlled across them one of the expedia teams I",
    "start": "1969730",
    "end": "1979539"
  },
  {
    "text": "was talking to had something like 20 different JavaScript functions in 20",
    "start": "1979539",
    "end": "1986470"
  },
  {
    "text": "different projects and they were getting confused about which whether they had",
    "start": "1986470",
    "end": "1991480"
  },
  {
    "text": "the right set of functions deployed that were compatible with each other so keeping them all together in one project",
    "start": "1991480",
    "end": "1996850"
  },
  {
    "text": "is a good idea this is this is a personal stupidity I",
    "start": "1996850",
    "end": "2004190"
  },
  {
    "text": "talked about our duplicate image detection this is me getting that wrong",
    "start": "2004190",
    "end": "2010830"
  },
  {
    "text": "so our duplicate image detection finds oh look and a property manager has uploaded the same image for the fifth",
    "start": "2010830",
    "end": "2017219"
  },
  {
    "text": "time this week let's not keep a copy of that we'll delete that original image this is a chart an s3 object count chart",
    "start": "2017219",
    "end": "2025950"
  },
  {
    "text": "for the last year for the master bucket that was the the ramp up during migration from our Austin data center",
    "start": "2025950",
    "end": "2033629"
  },
  {
    "text": "into ODIs in October of last year leading to currently actually as about a",
    "start": "2033629",
    "end": "2039659"
  },
  {
    "text": "month ago 82 million master images but if you look at the object count in our original bucket it's a hundred and",
    "start": "2039659",
    "end": "2045960"
  },
  {
    "text": "ninety-three million images and what's up with that because we're supposed to be deleting originals well about a month",
    "start": "2045960",
    "end": "2053940"
  },
  {
    "text": "after we wrote the code that deleted the duplicate images somebody had the bright idea which was a good idea that said our",
    "start": "2053940",
    "end": "2060510"
  },
  {
    "text": "original images are really precious we need to make sure that we don't screw up let's turn on s3 versioning so we did",
    "start": "2060510",
    "end": "2067500"
  },
  {
    "text": "turn on s3 versioning and we didn't notice this until I did a first set of",
    "start": "2067500",
    "end": "2072990"
  },
  {
    "text": "these slides for internal use back in March and I look at this chart and go that's not right so for for a year we",
    "start": "2072990",
    "end": "2081240"
  },
  {
    "text": "were thinking we were deleting the duplicates but actually we were just soft deleting them and they're still",
    "start": "2081240",
    "end": "2086549"
  },
  {
    "text": "there we have now turned that off and we're now it well we haven't turned off",
    "start": "2086549",
    "end": "2091559"
  },
  {
    "text": "versioning but we're now explicitly deleting the version and so we're",
    "start": "2091559",
    "end": "2096929"
  },
  {
    "text": "getting rid of the file we haven't had the courage to go back and write code that will delete all of the duplicates",
    "start": "2096929",
    "end": "2102619"
  },
  {
    "text": "because if we get that code wrong so we're just going to leave them there",
    "start": "2102619",
    "end": "2109789"
  },
  {
    "text": "there's an account wide limit on the number of lambdas that you can run concurrently the limit is per region it",
    "start": "2113000",
    "end": "2123059"
  },
  {
    "text": "defaults to a thousand when we started two years ago the default was a hundred which which is not enough to sneeze at",
    "start": "2123059",
    "end": "2129560"
  },
  {
    "text": "howay is currently running at 1500 I believe the the person that was speaking earlier was talking about having 2000",
    "start": "2129560",
    "end": "2135260"
  },
  {
    "text": "you can go to Amazon and say hey we need more and they'll increase it they just need to have a ballpark number of how",
    "start": "2135260",
    "end": "2141890"
  },
  {
    "text": "many you're going to use so we're at 1500 but that's across the whole of the account what that can mean is in a",
    "start": "2141890",
    "end": "2151609"
  },
  {
    "text": "design like this if you have a spike on one end of your system we've got a",
    "start": "2151609",
    "end": "2156740"
  },
  {
    "text": "sudden surge of activity on the induction lambda we can starve our single image lambda now that's that's",
    "start": "2156740",
    "end": "2166099"
  },
  {
    "text": "not actually likely to happen much more likely is that you didn't realize it but another team has realized that lambdas",
    "start": "2166099",
    "end": "2172970"
  },
  {
    "text": "are really great so they another team is now using lambdas in the same account you didn't know they didn't tell you and",
    "start": "2172970",
    "end": "2180010"
  },
  {
    "text": "they're not very disciplined in the way they've done it so they're spiking their lambda count all over the place and",
    "start": "2180010",
    "end": "2186080"
  },
  {
    "text": "you're looking at your system going why is my performance bad why am I not spawning new lambdas well it's because",
    "start": "2186080",
    "end": "2192200"
  },
  {
    "text": "somebody else is taking them all fingers crossed this will change I'll say no",
    "start": "2192200",
    "end": "2200960"
  },
  {
    "text": "more I mentioned earlier that stream processing is a bottleneck if you do any",
    "start": "2200960",
    "end": "2208520"
  },
  {
    "text": "real processing in the stream handling lambdas you are going to have a backlog",
    "start": "2208520",
    "end": "2214820"
  },
  {
    "text": "building up behind you so you want to get a record and do something with it",
    "start": "2214820",
    "end": "2220250"
  },
  {
    "text": "really quickly like spin it off into Kinesis or fire it off into SNS as we're",
    "start": "2220250",
    "end": "2225890"
  },
  {
    "text": "doing Kinesis has the advantage that it you can control how its sharded you have",
    "start": "2225890",
    "end": "2232550"
  },
  {
    "text": "no control how many shards there are in dynamodb streaming you can control with",
    "start": "2232550",
    "end": "2238400"
  },
  {
    "text": "Kinesis how many shards so you can say I want 50 shards on my Kinesis there and so you know that you can scale it up 50",
    "start": "2238400",
    "end": "2245450"
  },
  {
    "text": "times SNS has the advantage that there's no limit you you can fire off the",
    "start": "2245450",
    "end": "2252109"
  },
  {
    "text": "hundred 200 at the time the disadvantage of air stenosis is not the guarantee of",
    "start": "2252109",
    "end": "2257540"
  },
  {
    "text": "delivery that Kinesis gives you we didn't mind SNS because if we failed",
    "start": "2257540",
    "end": "2263369"
  },
  {
    "text": "deliver a message if a message didn't get processed that's okay the single treatment lambda will handle",
    "start": "2263369",
    "end": "2269339"
  },
  {
    "text": "it when somebody asks for their image so you'd need to look at your use case but",
    "start": "2269339",
    "end": "2274730"
  },
  {
    "text": "try and do some kind of fan out from your stream processing processing lambdas testing and diagnostics printf",
    "start": "2274730",
    "end": "2285990"
  },
  {
    "text": "is back in a big way for Diagnostics it seems to come back every five years unit",
    "start": "2285990",
    "end": "2294180"
  },
  {
    "text": "tests and functional tests thoroughly I like to get to 95% line coverage with",
    "start": "2294180",
    "end": "2299970"
  },
  {
    "text": "unit tests and I don't feel comfortable until I'm there but it's really hard to",
    "start": "2299970",
    "end": "2305220"
  },
  {
    "text": "figure out what's going wrong when it's in production when it's a lambda you can't hook a debugger up to it so try",
    "start": "2305220",
    "end": "2311640"
  },
  {
    "text": "and find the bugs before it gets to production there's a product full",
    "start": "2311640",
    "end": "2318720"
  },
  {
    "text": "service that's that's worth playing with that will let you run your code locally Amazon has Sam local which lets you run",
    "start": "2318720",
    "end": "2327059"
  },
  {
    "text": "lambdas locally on your laptop and connects your s3 resources connector",
    "start": "2327059",
    "end": "2332549"
  },
  {
    "text": "Kinesis or whatever so you can there connect a debugger to it and see what's going on log generously it's a little",
    "start": "2332549",
    "end": "2344849"
  },
  {
    "text": "unfortunate but every lambda ends up with its own file in cloud watch so if",
    "start": "2344849",
    "end": "2350670"
  },
  {
    "text": "you've got hundreds of lambdas being spun up and run concurrently you will have hundreds of cloud watch streams to",
    "start": "2350670",
    "end": "2356640"
  },
  {
    "text": "aggregate home way uses Splunk so we aggregate all of that down into one one",
    "start": "2356640",
    "end": "2361739"
  },
  {
    "text": "stream that we can look at but the more logging you have then the more chance you have of finding out what's going",
    "start": "2361739",
    "end": "2367440"
  },
  {
    "text": "wrong there are newer products that we haven't really tried yet but but you",
    "start": "2367440",
    "end": "2374009"
  },
  {
    "text": "should consider Amazon x-ray AWS x-ray is a way of instrumenting amazon's",
    "start": "2374009",
    "end": "2381450"
  },
  {
    "text": "infrastructure as well as your own code to tell you what's going on so that will give you information about this s3",
    "start": "2381450",
    "end": "2389579"
  },
  {
    "text": "object was created a lambda was invoked the lambda succeeded all of that data gets captured by x-ray and that may give",
    "start": "2389579",
    "end": "2397049"
  },
  {
    "text": "you a more information than just your logging along alone IO pipe is a third party",
    "start": "2397049",
    "end": "2403330"
  },
  {
    "text": "product I think it integrates with x-ray I also think it's only for JavaScript but but those are worth looking at as",
    "start": "2403330",
    "end": "2409750"
  },
  {
    "text": "ways of getting more information about what's happening inside your Landers when you've got 500 Landers running",
    "start": "2409750",
    "end": "2416320"
  },
  {
    "text": "concurrently and they're processing lots of files it's if something is going",
    "start": "2416320",
    "end": "2421360"
  },
  {
    "text": "wrong in a tiny fraction of 1% of those it's pretty hard to figure out what's",
    "start": "2421360",
    "end": "2426520"
  },
  {
    "text": "going wrong without having as many of these diagnostic tools as possible this",
    "start": "2426520",
    "end": "2434860"
  },
  {
    "text": "is from a week these are timeout counts Landers that timed out this was in a week during our",
    "start": "2434860",
    "end": "2441430"
  },
  {
    "text": "early migration within the week we processed millions of files and we had",
    "start": "2441430",
    "end": "2447280"
  },
  {
    "text": "290 timeouts we have no idea why they happened",
    "start": "2447280",
    "end": "2452320"
  },
  {
    "text": "I've got theories about why they happened it could have been that the sharding of our DynamoDB database the",
    "start": "2452320",
    "end": "2460840"
  },
  {
    "text": "partitioning the DynamoDB database was changing as we were growing from a million records to 10 million to 20",
    "start": "2460840",
    "end": "2467350"
  },
  {
    "text": "million I I don't know what the problem was just expect that things will go",
    "start": "2467350",
    "end": "2472480"
  },
  {
    "text": "wrong that you didn't plan for something that was been introduced in the last",
    "start": "2472480",
    "end": "2478120"
  },
  {
    "text": "year or so is dead letter queues we didn't have this when Otis first went out but there are they exist now and you",
    "start": "2478120",
    "end": "2485800"
  },
  {
    "text": "should use them dead letter Q if if you send if a lander gets invoked and fails",
    "start": "2485800",
    "end": "2493920"
  },
  {
    "text": "Amazon will try it again twice so you'll get three three attempts if it fails the",
    "start": "2493920",
    "end": "2499060"
  },
  {
    "text": "third attempt and you've configured a dead letter Q then a message it will get written to the dead letter Q and you can",
    "start": "2499060",
    "end": "2505300"
  },
  {
    "text": "come and process that later you can have a lambda that's listening to that you could have a lambda post a message to",
    "start": "2505300",
    "end": "2511660"
  },
  {
    "text": "pager duty or whatever but if you don't have the Delta Q set up then without",
    "start": "2511660",
    "end": "2518140"
  },
  {
    "text": "crawling through your logs you won't even know that something went wrong so the dead letter queues are the way to",
    "start": "2518140",
    "end": "2523900"
  },
  {
    "text": "find out something went wrong and potentially give you the chance to automatically remediate it",
    "start": "2523900",
    "end": "2530760"
  },
  {
    "text": "we had some stuttering performance with dynamodb streams early on I'm pretty",
    "start": "2531970",
    "end": "2537160"
  },
  {
    "text": "sure that was to do with the fact that we hadn't configured our capacity correctly the unit capacity that's",
    "start": "2537160",
    "end": "2544900"
  },
  {
    "text": "easier to do today with auto scaling auto scaling didn't exist at the early on we worked around it by having the",
    "start": "2544900",
    "end": "2552549"
  },
  {
    "text": "induction lamda right the SMS notifications itself instead of depending on the dynamo DB stream that",
    "start": "2552549",
    "end": "2560799"
  },
  {
    "text": "didn't feel very nice but we did it today we're going back to using the dynamo DB stream lamda we're now happy",
    "start": "2560799",
    "end": "2568539"
  },
  {
    "text": "things have calmed down and we understand what's going on better and our our partitions are not changing",
    "start": "2568539",
    "end": "2576609"
  },
  {
    "text": "anymore so to finish up with the",
    "start": "2576609",
    "end": "2582970"
  },
  {
    "text": "technical is over this is more about humans Jeff Goldblum's character in",
    "start": "2582970",
    "end": "2590980"
  },
  {
    "text": "Jurassic Park when he's told there's no problem with the dinosaurs breeding because they're all female and he says",
    "start": "2590980",
    "end": "2596079"
  },
  {
    "text": "something to the effect of nature will find a way well customers will always find a way to surprise you if your user",
    "start": "2596079",
    "end": "2603249"
  },
  {
    "text": "experience design isn't great then customers are going to trip you up four years ago before Otis was written",
    "start": "2603249",
    "end": "2609940"
  },
  {
    "text": "we went to our customer base and said from now on you've got to upload 19 by",
    "start": "2609940",
    "end": "2615160"
  },
  {
    "text": "20 1920 pixel wide images many of our customers are in their 50s like me",
    "start": "2615160",
    "end": "2622319"
  },
  {
    "text": "unlike me they're not very comfortable with computers so how do they how do",
    "start": "2622319",
    "end": "2627849"
  },
  {
    "text": "they get a 1920 wide image ignore the white block I'll explain the white block",
    "start": "2627849",
    "end": "2632920"
  },
  {
    "text": "in a moment you might not be able to see from the back but you can perhaps see",
    "start": "2632920",
    "end": "2638349"
  },
  {
    "text": "the X in the top right hand corner there this is where somebody didn't know how to take an image and enlarge it so they",
    "start": "2638349",
    "end": "2645099"
  },
  {
    "text": "put the photograph they already had up on their screen and photographed their screen now the white block is a",
    "start": "2645099",
    "end": "2653499"
  },
  {
    "text": "different kind of problem that I hadn't even noticed myself but the Amazon",
    "start": "2653499",
    "end": "2659079"
  },
  {
    "text": "vetting process for the slides when you can't show that that's a new",
    "start": "2659079",
    "end": "2664769"
  },
  {
    "text": "so there was actually a painting of a new a pregnant nude woman there its semi-abstract so yeah but yeah we have",
    "start": "2667420",
    "end": "2680870"
  },
  {
    "text": "had people uploading photographs of hot tubs with new people in them and that doesn't that contravenes our policies to",
    "start": "2680870",
    "end": "2689770"
  },
  {
    "text": "another thing that we did was when you're onboarding a brand new listing we",
    "start": "2689920",
    "end": "2696590"
  },
  {
    "text": "have this wizard that makes it easy for you we fixed this now but a couple years ago we had this wizard that made it easy",
    "start": "2696590",
    "end": "2702260"
  },
  {
    "text": "for you but you couldn't get past step three step three was upload your photos you couldn't get to step four until you",
    "start": "2702260",
    "end": "2708920"
  },
  {
    "text": "to upload it at least six 19 by 20 19 20 white pixel images well you've got",
    "start": "2708920",
    "end": "2714950"
  },
  {
    "text": "people that I just want to find out how this works I need to get past this so I'll upload the first six images I",
    "start": "2714950",
    "end": "2721490"
  },
  {
    "text": "have available on my phone like the fender bender I had this morning the",
    "start": "2721490",
    "end": "2727130"
  },
  {
    "text": "insurance photograph I took so yeah humans will always find a way even if your software is perfect if your user",
    "start": "2727130",
    "end": "2733790"
  },
  {
    "text": "experience is less than perfect which it always is then humans will surprise you",
    "start": "2733790",
    "end": "2740530"
  },
  {
    "text": "so to sum up lambdas are really great for event-driven systems for highly",
    "start": "2740530",
    "end": "2745580"
  },
  {
    "text": "elastic highly scalable loads and for scheduled activities I really do think",
    "start": "2745580",
    "end": "2752390"
  },
  {
    "text": "that development of ODIs took about half the time it would have done if we had written a traditional collection of",
    "start": "2752390",
    "end": "2759770"
  },
  {
    "text": "large java application servers and it's highly extensible it doesn't fit every",
    "start": "2759770",
    "end": "2766940"
  },
  {
    "text": "need so you want to think about what the costs are going to be you want to try and do some modeling and figure out is",
    "start": "2766940",
    "end": "2772820"
  },
  {
    "text": "it really going to be cost-effective for us to use Landers it's hard to assess because it's hard there are some",
    "start": "2772820",
    "end": "2779060"
  },
  {
    "text": "intangibles around operational costs but lambdas are not right for every purpose",
    "start": "2779060",
    "end": "2785890"
  },
  {
    "text": "always look at DynamoDB auto-scaling that would have saved us a lot of pain",
    "start": "2785890",
    "end": "2791450"
  },
  {
    "text": "earlier on if it had been available at the time unit tests thoroughly",
    "start": "2791450",
    "end": "2797270"
  },
  {
    "text": "consider using x-ray and always use the dead-letter cues that is everything that",
    "start": "2797270",
    "end": "2804920"
  },
  {
    "text": "I have to say I can take questions if there are any",
    "start": "2804920",
    "end": "2810040"
  },
  {
    "text": "[Applause]",
    "start": "2810040",
    "end": "2813869"
  },
  {
    "text": "[Applause]",
    "start": "2816350",
    "end": "2820130"
  }
]