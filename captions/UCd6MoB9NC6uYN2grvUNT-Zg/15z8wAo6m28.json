[
  {
    "start": "0",
    "end": "48000"
  },
  {
    "text": "good afternoon everyone thank you for joining us here in DC I hope you all",
    "start": "140",
    "end": "5700"
  },
  {
    "text": "having an awesome time learning about AWS so in this session we're gonna talk about some of the newest innovations and",
    "start": "5700",
    "end": "13019"
  },
  {
    "text": "serverless and how you can use these innovations that help you build some of your next generation applications so my",
    "start": "13019",
    "end": "20580"
  },
  {
    "text": "name is George mal and I'm a specialist Solutions Architect at AWS my past life",
    "start": "20580",
    "end": "25619"
  },
  {
    "text": "I was a software developer building all sorts of web applications I'm",
    "start": "25619",
    "end": "31199"
  },
  {
    "text": "responsible for helping our customers build solutions using lambda API gateway",
    "start": "31199",
    "end": "36450"
  },
  {
    "text": "and the other services in the server list platform so all my contact information is down below so I'm happy",
    "start": "36450",
    "end": "42899"
  },
  {
    "text": "to answer any questions so please feel free to ping me after this session is done so in the last many years over the",
    "start": "42899",
    "end": "52199"
  },
  {
    "text": "course of the early 2000s our industry kind of went through this transformation and we started building these these",
    "start": "52199",
    "end": "58920"
  },
  {
    "text": "really large monolith applications and as a Java developer I used to build these applications and I'd build these",
    "start": "58920",
    "end": "65850"
  },
  {
    "text": "really large ear files and war files right does anybody ever built these before yeah these were these are like 50",
    "start": "65850",
    "end": "72060"
  },
  {
    "text": "60 100 megabytes in size and you would deploy them to some really heavy weight",
    "start": "72060",
    "end": "77189"
  },
  {
    "text": "application servers you know IBM WebSphere BAA WebLogic Tomcat JBoss all",
    "start": "77189",
    "end": "83759"
  },
  {
    "text": "of those right so now how do we scale those there's really only one way to scale those you",
    "start": "83759",
    "end": "89490"
  },
  {
    "text": "just deployed more clustered more add more power and and that's how you scale so developers didn't like that because",
    "start": "89490",
    "end": "96869"
  },
  {
    "text": "it was hard to scale hard to manage and everything was super tough to to make simpler right now over the over the last",
    "start": "96869",
    "end": "104490"
  },
  {
    "text": "20 years we've started breaking apart the monolith and started moving towards a micro service architecture so at AWS",
    "start": "104490",
    "end": "112799"
  },
  {
    "text": "we all do micro services this wasn't something that AWS invented the industry as a whole has been building in this",
    "start": "112799",
    "end": "119040"
  },
  {
    "text": "kind of architecture so now the reason we do this is because of agility right all of our businesses want to move",
    "start": "119040",
    "end": "125130"
  },
  {
    "text": "faster we don't wanna get stuck on deploying you know 100 megabyte war files that take five minutes of upload",
    "start": "125130",
    "end": "131640"
  },
  {
    "text": "right so now a monolith as you know is typically",
    "start": "131640",
    "end": "138220"
  },
  {
    "start": "135000",
    "end": "213000"
  },
  {
    "text": "built in a single technology stack so if we take the example of a Java j2ee application right early 2000s these",
    "start": "138220",
    "end": "145690"
  },
  {
    "text": "applications are typically built in layers and every single layer is built with the same technology all Java right",
    "start": "145690",
    "end": "152680"
  },
  {
    "text": "whether or not Java met the use case well that's that's what you had to do so does anybody remember a design pattern",
    "start": "152680",
    "end": "159220"
  },
  {
    "text": "called MVC so model-view-controller right so this is where you would you",
    "start": "159220",
    "end": "164680"
  },
  {
    "text": "would deploy your front-end using JSP s you would maybe use a controller like spring or or struts to create your your",
    "start": "164680",
    "end": "171790"
  },
  {
    "text": "kind of controller layer then on the back end you'd have some kind of or unframed work hibernate JPA whatever it",
    "start": "171790",
    "end": "178330"
  },
  {
    "text": "is to persist data all of this builds with the same technology all of the talks probably to one database so now",
    "start": "178330",
    "end": "186400"
  },
  {
    "text": "the opposite is true for a microt service based architecture you're building really small applications these",
    "start": "186400",
    "end": "192400"
  },
  {
    "text": "applications can probably are probably built in different languages you're choosing the right language that meets",
    "start": "192400",
    "end": "198730"
  },
  {
    "text": "the specific use case of each micro service now the only difference is that your micro services need to talk to each",
    "start": "198730",
    "end": "205420"
  },
  {
    "text": "other they need to be able to communicate and they need a specific communication platform so the real",
    "start": "205420",
    "end": "213700"
  },
  {
    "start": "213000",
    "end": "257000"
  },
  {
    "text": "question that we were trying to answer as developers and engineers is is as a",
    "start": "213700",
    "end": "219010"
  },
  {
    "text": "business businesses will just want to move faster they don't care how you do it right developers want to focus on innovation",
    "start": "219010",
    "end": "225430"
  },
  {
    "text": "we don't want to worry about managing servers dealing with network cards CPU",
    "start": "225430",
    "end": "232360"
  },
  {
    "text": "power you know whatever it is that that that you don't need to manage in the cloud right so developers want to focus",
    "start": "232360",
    "end": "240730"
  },
  {
    "text": "on writing application code that makes your business faster better and more more innovative so AWS has been building",
    "start": "240730",
    "end": "249549"
  },
  {
    "text": "this server list platform over the last few years to kind of help address these goals so now we built these plug this",
    "start": "249549",
    "end": "256959"
  },
  {
    "text": "platform and we believe that server list has four primary tenants so number one",
    "start": "256959",
    "end": "263110"
  },
  {
    "start": "257000",
    "end": "354000"
  },
  {
    "text": "is you never should never have to manage any infrastructure developers",
    "start": "263110",
    "end": "269050"
  },
  {
    "text": "should never have to worry about provisioning hardware patching operating",
    "start": "269050",
    "end": "274510"
  },
  {
    "text": "systems connecting network interfaces setting IP addresses you know dealing",
    "start": "274510",
    "end": "280210"
  },
  {
    "text": "with the vulnerabilities all of this stuff should be handled by AWS number two",
    "start": "280210",
    "end": "285460"
  },
  {
    "text": "scaling becomes out of the box and we mean that because when you were back in the server world you would scale your",
    "start": "285460",
    "end": "292000"
  },
  {
    "text": "unit of scale which was a server you would add more servers make it bigger and then and then keep going so now in",
    "start": "292000",
    "end": "299110"
  },
  {
    "text": "the server of this world your unit of scale is by per request so every request that we receive in your service",
    "start": "299110",
    "end": "305460"
  },
  {
    "text": "application is delivering specific business value and that's super important because now your building",
    "start": "305460",
    "end": "311650"
  },
  {
    "text": "model changes so number three you're gonna pay and you're gonna be billed by delivering value every request that you",
    "start": "311650",
    "end": "318370"
  },
  {
    "text": "serve is gonna be delivering some sort of specific business value and this is really cool because you're no longer",
    "start": "318370",
    "end": "324400"
  },
  {
    "text": "bound to paying for idle instances and businesses really love that because it",
    "start": "324400",
    "end": "330970"
  },
  {
    "text": "can easily correlate your your own cost to what you're delivering to your",
    "start": "330970",
    "end": "336070"
  },
  {
    "text": "customers right and finally the fourth the fourth point is that by using the AWS server list platform you",
    "start": "336070",
    "end": "342400"
  },
  {
    "text": "automatically inherit all of the best practices all the security features and all of the high availability that AWS",
    "start": "342400",
    "end": "349120"
  },
  {
    "text": "has built into our own platform so essentially service is an evolution",
    "start": "349120",
    "end": "356410"
  },
  {
    "start": "354000",
    "end": "413000"
  },
  {
    "text": "of the operational model that you're already using in the cloud today so if",
    "start": "356410",
    "end": "362050"
  },
  {
    "text": "we look at this here this diagram the compute the compute layer is generally",
    "start": "362050",
    "end": "368080"
  },
  {
    "text": "built using AWS lambda or AWS Fargate and if when you need to store data you",
    "start": "368080",
    "end": "374710"
  },
  {
    "text": "can use Amazon s3 to store binary files or you can use Amazon server this Aurora",
    "start": "374710",
    "end": "380919"
  },
  {
    "text": "to stores relational database type needs or if you if you're building no sequel",
    "start": "380919",
    "end": "386140"
  },
  {
    "text": "applications you can use Amazon DynamoDB and then on the bottom row when you need to integrate your applications and",
    "start": "386140",
    "end": "392140"
  },
  {
    "text": "message between all of them we have lots of different services available to help you with that everything from building",
    "start": "392140",
    "end": "397510"
  },
  {
    "text": "rest services with API gateway to sqs SNS and then and then step",
    "start": "397510",
    "end": "403180"
  },
  {
    "text": "functions to help you correlate build really powerful workflows and the Kinesis to deliver real-time streaming",
    "start": "403180",
    "end": "410470"
  },
  {
    "text": "applications so today our applications",
    "start": "410470",
    "end": "416440"
  },
  {
    "text": "look a lot like this right we have a lot of different micro services potentially built with different technologies Java",
    "start": "416440",
    "end": "422830"
  },
  {
    "text": "Python nodejs so some of the most popular ones but they all need to communicate with each other at the end",
    "start": "422830",
    "end": "428560"
  },
  {
    "text": "of the day and micro services do this through what we call an API so a common",
    "start": "428560",
    "end": "434890"
  },
  {
    "text": "programming communication interface right and an API it needs to be common",
    "start": "434890",
    "end": "440260"
  },
  {
    "text": "so that all of these services can talk to each other and at the end of the day your services probably persist information to some kind of persistent",
    "start": "440260",
    "end": "447130"
  },
  {
    "text": "durable datastore so the question that",
    "start": "447130",
    "end": "452980"
  },
  {
    "start": "450000",
    "end": "495000"
  },
  {
    "text": "that gets asked a lot lately is we have all of these pieces and we used to have",
    "start": "452980",
    "end": "458140"
  },
  {
    "text": "a single monolith isn't it now a lot harder to manage all these pieces as a developer and as an engineer so AWS has",
    "start": "458140",
    "end": "468400"
  },
  {
    "text": "a concept of the shared responsibility model anybody ever heard of this model cool so about half of you so the shared",
    "start": "468400",
    "end": "475630"
  },
  {
    "text": "responsibility model simply stated is just an idea that AWS will handle some",
    "start": "475630",
    "end": "481960"
  },
  {
    "text": "of the operational needs and then you as a customer will handle the other parts",
    "start": "481960",
    "end": "488320"
  },
  {
    "text": "and that line can actually shift depending on the services you choose right so let's take a look at the first",
    "start": "488320",
    "end": "494650"
  },
  {
    "text": "row here just the compute layer so when you're deploying applications back on Prem you had to handle everything from",
    "start": "494650",
    "end": "502240"
  },
  {
    "start": "495000",
    "end": "550000"
  },
  {
    "text": "hardware to OS to patching all the way up the software stack to your application so you're managing",
    "start": "502240",
    "end": "508090"
  },
  {
    "text": "everything now as we moved into ec2 to the right a little bit you let AWS handle the hardware and you",
    "start": "508090",
    "end": "514870"
  },
  {
    "text": "just handle the software and the OS up to the to the top of your application stack right now if you keep moving over",
    "start": "514870",
    "end": "520900"
  },
  {
    "text": "to the right if you decide to use AWS Fargate as a container service you let AWS handle all of the heavy details and",
    "start": "520900",
    "end": "528070"
  },
  {
    "text": "all the lifting and you simply give Fargate a doctor container and we scale",
    "start": "528070",
    "end": "533260"
  },
  {
    "text": "it we deploy we manage it on your behalf all the way to the right now if you just want to work on application code and focus on",
    "start": "533260",
    "end": "541089"
  },
  {
    "text": "the things that are that make your company innovative then you can write your application code in AWS lambda so",
    "start": "541089",
    "end": "547269"
  },
  {
    "text": "we'll take a look at that so database lambda is a compute service that allows",
    "start": "547269",
    "end": "554620"
  },
  {
    "start": "550000",
    "end": "622000"
  },
  {
    "text": "developers to focus on writing application code and typically your land of functions are short-lived and they're",
    "start": "554620",
    "end": "561250"
  },
  {
    "text": "meant to be event-driven so app app developers can use pretty much any one of your favorite programming languages",
    "start": "561250",
    "end": "567670"
  },
  {
    "text": "to write within lambda right so we support seven different programming programming languages today we also",
    "start": "567670",
    "end": "573819"
  },
  {
    "text": "support custom runtimes which allows you as a developer to customize your own runtime put it on lambda and run it as",
    "start": "573819",
    "end": "580509"
  },
  {
    "text": "you would natively so how many of you have written the lambda function before",
    "start": "580509",
    "end": "586860"
  },
  {
    "text": "wow that's a lot that's awesome so now lambda functions as you know don't have",
    "start": "586860",
    "end": "593589"
  },
  {
    "text": "any tight coupling with AWS you have to fit it with a little bit of programming",
    "start": "593589",
    "end": "598839"
  },
  {
    "text": "model and a little bit of best practice design but there's nothing there's no specific library that you have to use to",
    "start": "598839",
    "end": "605260"
  },
  {
    "text": "make it tightly coupled to AWS so what that means is as an app developer you can easily port code into lambda and",
    "start": "605260",
    "end": "612550"
  },
  {
    "text": "then also port code out if you decide that lambda is no longer the best place",
    "start": "612550",
    "end": "618100"
  },
  {
    "text": "for your compute okay so has anybody",
    "start": "618100",
    "end": "624040"
  },
  {
    "start": "622000",
    "end": "675000"
  },
  {
    "text": "used Alexa before who owns an Alexa device like everyone right so you may",
    "start": "624040",
    "end": "630100"
  },
  {
    "text": "not know but when you asked you woke up in the morning and you asked it Alexa you know what what is the weather",
    "start": "630100",
    "end": "635290"
  },
  {
    "text": "forecast this morning or what is my commute look like behind the scenes we",
    "start": "635290",
    "end": "640389"
  },
  {
    "text": "had this concept of skills that are responding to your request and these skills are mostly implemented in lambda",
    "start": "640389",
    "end": "646149"
  },
  {
    "text": "there's a lot of different ways you can implement the skills but lambda is the native way out-of-the-box way to",
    "start": "646149",
    "end": "651250"
  },
  {
    "text": "implement Alexa skills so we asked your Alexa device all these questions we're",
    "start": "651250",
    "end": "656680"
  },
  {
    "text": "running lambda functions and if you want to see how this works you can easily go on to the Alexa developer portal and",
    "start": "656680",
    "end": "662829"
  },
  {
    "text": "just write your own land with function and then talk to it at home so it's a really poor easy process",
    "start": "662829",
    "end": "667900"
  },
  {
    "text": "to do definitely recommend everybody get out there and try to try it so so the",
    "start": "667900",
    "end": "676360"
  },
  {
    "text": "land of programming model is super simple it's based off of the idea that",
    "start": "676360",
    "end": "681960"
  },
  {
    "text": "Lamba is triggered off of events and these events can be triggered programmatically using the SDK and any",
    "start": "681960",
    "end": "688990"
  },
  {
    "text": "one of the languages that we support or it can be triggered using a CLI so you can see how I command you can invoke a",
    "start": "688990",
    "end": "694780"
  },
  {
    "text": "lambda function if you want to do that you can have a WS lambda automatically",
    "start": "694780",
    "end": "700000"
  },
  {
    "text": "trigger a Lando function based off of events that are emitted from your your ecosystem so functions can basically be",
    "start": "700000",
    "end": "708280"
  },
  {
    "text": "be written in any one of your favorite programming languages so we support nodejs Python Java c-sharp go and Ruby",
    "start": "708280",
    "end": "716080"
  },
  {
    "text": "and also many different flavors of each language in different versions of each language right so some examples of a",
    "start": "716080",
    "end": "722340"
  },
  {
    "text": "out-of-the-box event that would trigger a lambda function will be like a change in a data state so this is when you have",
    "start": "722340",
    "end": "730140"
  },
  {
    "text": "like when you have a DynamoDB table that you're writing records to and and you",
    "start": "730140",
    "end": "737470"
  },
  {
    "text": "want to respond to records that are incoming so if you're familiar with sequel triggers this is kind of the same",
    "start": "737470",
    "end": "744430"
  },
  {
    "text": "concept in DynamoDB you can you can activate a stream which will capture a time order sequence of things that are",
    "start": "744430",
    "end": "751180"
  },
  {
    "text": "happening in your table and then trigger lambda functions according to the so your changes in your table and",
    "start": "751180",
    "end": "756880"
  },
  {
    "text": "automatically react and perform whatever manipulation you need on that another",
    "start": "756880",
    "end": "762340"
  },
  {
    "text": "example is request is a request made to an endpoint so for example if you're building a micro service a REST API and",
    "start": "762340",
    "end": "769540"
  },
  {
    "text": "somebody has invoked your REST API and you want to perform some kind of compute on that so you can have a lambda",
    "start": "769540",
    "end": "775600"
  },
  {
    "text": "function respond to the HTTP request perform the compute and then return that response back out to your client and",
    "start": "775600",
    "end": "781750"
  },
  {
    "text": "never have any idle instances waiting for that work to be done another another example is a change in a resource state",
    "start": "781750",
    "end": "788380"
  },
  {
    "text": "so for those of you who are uploading lots of files to s3 anybody using s3 to",
    "start": "788380",
    "end": "793810"
  },
  {
    "text": "store millions of objects yeah so instead of having application servers",
    "start": "793810",
    "end": "800230"
  },
  {
    "text": "that are constantly polling four new files you can have s3 automatically emit an event and then",
    "start": "800230",
    "end": "807339"
  },
  {
    "text": "invoke a lambda function so a really good example is for those who are dealing with image manipulation and",
    "start": "807339",
    "end": "812879"
  },
  {
    "text": "typically when you upload images the first order for your first task is to grab that image and then create",
    "start": "812879",
    "end": "819579"
  },
  {
    "text": "different thumbnails different sizes and resolutions for all of our mobile devices and laptops and computer screens",
    "start": "819579",
    "end": "825600"
  },
  {
    "text": "instead of having a bunch of instances that are polling for this work just have land of functions execute do the resize",
    "start": "825600",
    "end": "833499"
  },
  {
    "text": "shutdown and then go away so developers really love this experience because your",
    "start": "833499",
    "end": "840429"
  },
  {
    "text": "first task is simply to write application code right there's none of this OS stuff you have to deal with you",
    "start": "840429",
    "end": "846609"
  },
  {
    "text": "don't have to choose application servers you don't have to worry about you know bugs that get released by certain",
    "start": "846609",
    "end": "853059"
  },
  {
    "text": "manufacturers so developers really like to be able to get into at lambda write",
    "start": "853059",
    "end": "859299"
  },
  {
    "text": "your application code and then immediately see it work so let's take a",
    "start": "859299",
    "end": "865029"
  },
  {
    "start": "863000",
    "end": "1018000"
  },
  {
    "text": "look a little bit deeper into how lambda works so you can bring your own code right and number two all you have to do",
    "start": "865029",
    "end": "872619"
  },
  {
    "text": "is select your resource model and there's really no configuration on lambda other than choosing how much",
    "start": "872619",
    "end": "880419"
  },
  {
    "text": "memory a lambda function can use and that can range anywhere from 128 megabytes all the way up to 3 gigabytes",
    "start": "880419",
    "end": "887019"
  },
  {
    "text": "and you would choose this memory allocation based on your compute needs right and based on your your memory",
    "start": "887019",
    "end": "894129"
  },
  {
    "text": "allocation we automatically allocate both CPU and network throughput proportional to your memory allocation",
    "start": "894129",
    "end": "901600"
  },
  {
    "text": "so if you were to choose 100 128 Meg's of memory and you boost that up to 256",
    "start": "901600",
    "end": "906819"
  },
  {
    "text": "Meg's of memory you would automatically get double this the CPU and network",
    "start": "906819",
    "end": "912039"
  },
  {
    "text": "throughput so when you're building your lambda functions definitely try to understand what your",
    "start": "912039",
    "end": "917529"
  },
  {
    "text": "compute needs are and then tune your land of function functions to match those needs because you can actually make sure functions run faster and use",
    "start": "917529",
    "end": "925239"
  },
  {
    "text": "more and use more of these resources behind the scenes instead of running slower and using less resources right so",
    "start": "925239",
    "end": "933689"
  },
  {
    "text": "let the function of super flexible we support both synchronous and asynchronous invocations so when you're",
    "start": "933689",
    "end": "940400"
  },
  {
    "text": "building your applications think of your use case and decide which invocation model works best",
    "start": "940400",
    "end": "945860"
  },
  {
    "text": "typically asynchronous and both will allow you to scale much much bigger and faster it's fully integrated with nearly",
    "start": "945860",
    "end": "952610"
  },
  {
    "text": "every AWS service so many services the emit events the lambda and then they're using the AWS SDK can can communicate",
    "start": "952610",
    "end": "960230"
  },
  {
    "text": "with every single AWS service out there the land of security model is based off",
    "start": "960230",
    "end": "967550"
  },
  {
    "text": "of I am so if you're already familiar with I am there's nothing new to learn you simply write I am policies attached",
    "start": "967550",
    "end": "974840"
  },
  {
    "text": "and I on execution roll to your lambda function and that lambda function is guaranteed to only have permissions to",
    "start": "974840",
    "end": "981920"
  },
  {
    "text": "do whatever it is your role is specifying so best practice in there is never include wildcards in those roles I",
    "start": "981920",
    "end": "989420"
  },
  {
    "text": "know it's very tempting to do that in development because it's easy a lot of us do that but try to avoid wildcards in",
    "start": "989420",
    "end": "997070"
  },
  {
    "text": "any of your iam policies as you know as a best practice so lambda functions can",
    "start": "997070",
    "end": "1003130"
  },
  {
    "text": "access any public resource by default you can also optionally allow lambda",
    "start": "1003130",
    "end": "1009070"
  },
  {
    "text": "functions to talk to resources in your V PC and that's called a that's a process called vbc enabling your function we'll",
    "start": "1009070",
    "end": "1016060"
  },
  {
    "text": "talk about that in a little bit so here is the anatomy of a lambda function so",
    "start": "1016060",
    "end": "1022990"
  },
  {
    "start": "1018000",
    "end": "1131000"
  },
  {
    "text": "all lambda functions need to have an entry point and this is an example written in Java Java 8 specifically so a",
    "start": "1022990",
    "end": "1032550"
  },
  {
    "text": "handler method is essentially equivalent to a Java main function right for those",
    "start": "1032550",
    "end": "1038380"
  },
  {
    "text": "who are written Java it's where your execution will begin and you can name this method anything I've named it",
    "start": "1038380",
    "end": "1043660"
  },
  {
    "text": "handle requests but you could name it whatever it is you want you just have to tell AWS what your method name is so in",
    "start": "1043660",
    "end": "1050200"
  },
  {
    "text": "this case every handler method will take two parameters the first parameter is is",
    "start": "1050200",
    "end": "1055720"
  },
  {
    "text": "the information or the object about what and why your function is being invoked",
    "start": "1055720",
    "end": "1061300"
  },
  {
    "text": "and the second parameter is a context object which is metadata that AWS will",
    "start": "1061300",
    "end": "1066430"
  },
  {
    "text": "generate that will prove all the details about about this invocation so in in this example I've",
    "start": "1066430",
    "end": "1073600"
  },
  {
    "text": "written a lambda function that's going to process somebody checking out of a hotel right when you check out of a",
    "start": "1073600",
    "end": "1079900"
  },
  {
    "text": "hotel it's a very discrete event that you'll have right so that event object",
    "start": "1079900",
    "end": "1085810"
  },
  {
    "text": "the first parameter will include everything about the checkout the person the name the credit card all of that",
    "start": "1085810",
    "end": "1091030"
  },
  {
    "text": "stuff the second parameter the context object will give you all of the information about who called it all the",
    "start": "1091030",
    "end": "1097450"
  },
  {
    "text": "information about how long your function can run for and all the security details around that so you can use these two",
    "start": "1097450",
    "end": "1103060"
  },
  {
    "text": "objects in conjunction to basically perform all of your application logic down below you'll and the functions have",
    "start": "1103060",
    "end": "1110800"
  },
  {
    "text": "to return some kind of value so in this case I'm returning a string but you could return a different kind of object",
    "start": "1110800",
    "end": "1117580"
  },
  {
    "text": "I'm in Java you would return a POJO or plain old Java object and nodejs pretty",
    "start": "1117580",
    "end": "1123370"
  },
  {
    "text": "much the same thing and then in pythons and it would be return as well so now",
    "start": "1123370",
    "end": "1132070"
  },
  {
    "start": "1131000",
    "end": "1196000"
  },
  {
    "text": "after you built your lambda function and you're ready to expose it as a service Amazon API gateway is a managed service",
    "start": "1132070",
    "end": "1139810"
  },
  {
    "text": "that allows you to easily create REST API and AWS will manage all of the REST",
    "start": "1139810",
    "end": "1145990"
  },
  {
    "text": "API is for you after you've configured it and deployed it into what we call",
    "start": "1145990",
    "end": "1151480"
  },
  {
    "text": "stage so API gateway allows you to create create really seamless",
    "start": "1151480",
    "end": "1156670"
  },
  {
    "text": "integration between your client that's calling your API all the way to the",
    "start": "1156670",
    "end": "1161770"
  },
  {
    "text": "backend that you need to invoke alright so we support clients that that are on the Internet or clients that are in your",
    "start": "1161770",
    "end": "1168670"
  },
  {
    "text": "V PC as well and that's called a private endpoint right out of the box it API",
    "start": "1168670",
    "end": "1174550"
  },
  {
    "text": "gateway will give you caching and authorization authentication throttling all of you all you have to do is",
    "start": "1174550",
    "end": "1181120"
  },
  {
    "text": "basically set that configuration up behind the scenes you can invoke almost anything HTTP land of functions you can",
    "start": "1181120",
    "end": "1188410"
  },
  {
    "text": "proxy to any AWS service and you can even talk to services within your V PC",
    "start": "1188410",
    "end": "1193560"
  },
  {
    "text": "so now these are rest-based API s and rest is really good for most app",
    "start": "1193560",
    "end": "1201670"
  },
  {
    "text": "ocation services and needs however for those of you who are building real-time applications and you might a building",
    "start": "1201670",
    "end": "1208120"
  },
  {
    "text": "like dashboards and chat applications or things I need to refresh on a really",
    "start": "1208120",
    "end": "1213460"
  },
  {
    "text": "quick basis so rest isn't really great for that because you would have to make a rest call every single time you need",
    "start": "1213460",
    "end": "1219610"
  },
  {
    "text": "to have new data now with WebSockets you can with web socket API is running on",
    "start": "1219610",
    "end": "1225490"
  },
  {
    "text": "API gateway you can easily create these really rich real-time applications so in",
    "start": "1225490",
    "end": "1230950"
  },
  {
    "text": "this case when you deploy a web socket API API gateway will manage that persistent connection from your",
    "start": "1230950",
    "end": "1237190"
  },
  {
    "text": "appliance to API gateway and then you'll be able to invoke any one of your backends just like you did with your",
    "start": "1237190",
    "end": "1243730"
  },
  {
    "text": "rest service so instead of having a fleet of containers or fleet of ec2 instances holding those website",
    "start": "1243730",
    "end": "1250030"
  },
  {
    "text": "connections open API gateway can do that for you and you can still apply all of your authentication needs on top of that",
    "start": "1250030",
    "end": "1256720"
  },
  {
    "text": "as well so I'll definitely encourage you to look at the second type of API that",
    "start": "1256720",
    "end": "1261880"
  },
  {
    "text": "API gateways supports so one of the",
    "start": "1261880",
    "end": "1267580"
  },
  {
    "start": "1265000",
    "end": "1286000"
  },
  {
    "text": "primary drivers in our serve of this world is to help our customers and help",
    "start": "1267580",
    "end": "1273670"
  },
  {
    "text": "developers reduce all of that undifferentiated code that you have to write and that makes developers a lot",
    "start": "1273670",
    "end": "1281320"
  },
  {
    "text": "more efficient and definitely more innovative right so starting with cloud",
    "start": "1281320",
    "end": "1286780"
  },
  {
    "start": "1286000",
    "end": "1364000"
  },
  {
    "text": "native load balancing and application load balancers today had the ability to",
    "start": "1286780",
    "end": "1293710"
  },
  {
    "text": "invoke and balance traffic across the fleet of our gate containers as well as ec2 containers and recently we've added",
    "start": "1293710",
    "end": "1301420"
  },
  {
    "text": "the ability for you to balance across a lambda function as well so this is very simple to do you can basically create",
    "start": "1301420",
    "end": "1309270"
  },
  {
    "text": "application rules routing rules programmatically that define how a",
    "start": "1309270",
    "end": "1314530"
  },
  {
    "text": "request should be routed and you can use anything in the request to do that and that's called advanced request routing",
    "start": "1314530",
    "end": "1319780"
  },
  {
    "text": "so you can use you can capture anything in the request such as the payload the IP address the query string the path",
    "start": "1319780",
    "end": "1326140"
  },
  {
    "text": "parameter and then create really complex and rich rules and decide which compute engine on the backend should serve that",
    "start": "1326140",
    "end": "1333190"
  },
  {
    "text": "request because one day you may translate and move across different compute compute",
    "start": "1333190",
    "end": "1339099"
  },
  {
    "text": "services depending on depending on how your business has changed and you want to make that transparent to your customers who are calling your",
    "start": "1339099",
    "end": "1345639"
  },
  {
    "text": "application load balancers so the key idea here is that you can mix and match",
    "start": "1345639",
    "end": "1351609"
  },
  {
    "text": "these services that make your use case the most valuable and make the most sense I'd this creates a lot of",
    "start": "1351609",
    "end": "1358059"
  },
  {
    "text": "flexibility for you as an application developer and also to serve your customers better so the next thing that",
    "start": "1358059",
    "end": "1366369"
  },
  {
    "start": "1364000",
    "end": "1394000"
  },
  {
    "text": "we were looking at doing was simplifying the amount of code and configuration",
    "start": "1366369",
    "end": "1373029"
  },
  {
    "text": "that developers have to do so those of you who have written spring applications",
    "start": "1373029",
    "end": "1378159"
  },
  {
    "text": "right how many XML files do you have to configure like so many that you can't",
    "start": "1378159",
    "end": "1383559"
  },
  {
    "text": "even keep track of them right so we wanted to avoid that so one of our our goals here was was to simplify it make",
    "start": "1383559",
    "end": "1389589"
  },
  {
    "text": "everything super easy so well and I first launched you basically have to",
    "start": "1389589",
    "end": "1398019"
  },
  {
    "start": "1394000",
    "end": "1508000"
  },
  {
    "text": "package all of your dependencies with a lambda function so if you're writing an ojs line of function and you need to use",
    "start": "1398019",
    "end": "1404200"
  },
  {
    "text": "an image of manipulation library or if you need to use a WebSocket library that's not built into the node platform",
    "start": "1404200",
    "end": "1410529"
  },
  {
    "text": "you have to download that package NPM install that locally and bundle that up with your deployment package and upload",
    "start": "1410529",
    "end": "1417219"
  },
  {
    "text": "it so think of a scenario when you have a large company and you have multiple different lambda functions all of them",
    "start": "1417219",
    "end": "1424119"
  },
  {
    "text": "have to do that right you have to bundle the same application code put it up with Atlanta function and then upload it to",
    "start": "1424119",
    "end": "1429729"
  },
  {
    "text": "the AWS service so we've launched the service or feature called lambda layers to help address that problem so lambda",
    "start": "1429729",
    "end": "1437079"
  },
  {
    "text": "layers allows you to upload all of your common code to a layer and common code",
    "start": "1437079",
    "end": "1442599"
  },
  {
    "text": "is typically stuff like you may have a team working on logging a standardizing security they're standardizing all sorts",
    "start": "1442599",
    "end": "1449320"
  },
  {
    "text": "of stuff and the providing that simp that that common code to all of you or other developers right so you can upload",
    "start": "1449320",
    "end": "1456940"
  },
  {
    "text": "this these dependencies in a layer and then add configuration time configure a",
    "start": "1456940",
    "end": "1462789"
  },
  {
    "text": "layer to work with a lambda function right now the key important piece of this is that a",
    "start": "1462789",
    "end": "1467890"
  },
  {
    "text": "there is simply configuration configuration details so there's no application code that you have to change",
    "start": "1467890",
    "end": "1474130"
  },
  {
    "text": "you can have up to five layers pearl and a function and once you have a layer",
    "start": "1474130",
    "end": "1479320"
  },
  {
    "text": "attached to a lambda function at runtime AWS will automatically grab that layer",
    "start": "1479320",
    "end": "1484480"
  },
  {
    "text": "and then and then add it to your lambda execution environment so your application code just assumes that that",
    "start": "1484480",
    "end": "1490600"
  },
  {
    "text": "layer and all the dependencies in it already are in there you don't have to make any code changes so it helps you",
    "start": "1490600",
    "end": "1497290"
  },
  {
    "text": "scale as your teams grow and makes it a lot better to manage common code across",
    "start": "1497290",
    "end": "1502840"
  },
  {
    "text": "multiple teams right so how many of you",
    "start": "1502840",
    "end": "1509380"
  },
  {
    "start": "1508000",
    "end": "1626000"
  },
  {
    "text": "are using land of functions to talk to V PC resources probably about 20% of you",
    "start": "1509380",
    "end": "1515650"
  },
  {
    "text": "okay so lambda functions by default operate and live in an AWS",
    "start": "1515650",
    "end": "1522310"
  },
  {
    "text": "owned V PC so that's an important concept to understand by default land of functions all have",
    "start": "1522310",
    "end": "1527680"
  },
  {
    "text": "the ability to talk to any public resource so this includes anything on the internet any of the public AWS API",
    "start": "1527680",
    "end": "1534430"
  },
  {
    "text": "is in SDKs anything in your own V pcs that are public so if you need to talk to you a",
    "start": "1534430",
    "end": "1541360"
  },
  {
    "text": "private resource like an RDS instance right you wouldn't put an RDS instance in a public subnet it would be in a",
    "start": "1541360",
    "end": "1547420"
  },
  {
    "text": "private subnet so in order to talk to and a private resource what you have to",
    "start": "1547420",
    "end": "1553030"
  },
  {
    "text": "do is go through a process called an EPC enabling your function when you do that AWS will drop an E and I so in an",
    "start": "1553030",
    "end": "1561010"
  },
  {
    "text": "elastic network interface into the subnet that you're trying to communicate with and then all traffic will be routed",
    "start": "1561010",
    "end": "1567160"
  },
  {
    "text": "across that elastic network interface into your private subnet so when that",
    "start": "1567160",
    "end": "1572650"
  },
  {
    "text": "happens all of your traffic routes through your private subnet and then if you need to talk to any public resource",
    "start": "1572650",
    "end": "1578230"
  },
  {
    "text": "you have to go through an at Gateway right out of your public public subnet so this process generally in some cases",
    "start": "1578230",
    "end": "1586900"
  },
  {
    "text": "can take a few seconds to to happen when you have a cold start so in the next few",
    "start": "1586900",
    "end": "1592810"
  },
  {
    "text": "months you're gonna see some really drastic improvements to how this process is handled right now",
    "start": "1592810",
    "end": "1598480"
  },
  {
    "text": "these are elastic network interfaces are deploy at runtime in the next few months you'll see this happen at configuration time",
    "start": "1598480",
    "end": "1605159"
  },
  {
    "text": "which means you'll no longer see the few second penalty that you saw that you're seeing currently this will enable you as",
    "start": "1605159",
    "end": "1611700"
  },
  {
    "text": "an app developer to create really stable response times for those API calls for",
    "start": "1611700",
    "end": "1617279"
  },
  {
    "text": "those services that have minimal that is small and minimal latency SLA s right so",
    "start": "1617279",
    "end": "1625039"
  },
  {
    "text": "now we've been talking about rest a lot so rest is is a very common design and",
    "start": "1625669",
    "end": "1632549"
  },
  {
    "start": "1626000",
    "end": "1741000"
  },
  {
    "text": "communication platform but there's actually another one that you should be aware of AWS app sync is a managed",
    "start": "1632549",
    "end": "1639000"
  },
  {
    "text": "service that can help you create graph QL api's and graph QL api's are an",
    "start": "1639000",
    "end": "1644460"
  },
  {
    "text": "alternative way to help help you build really rich real-time applications that",
    "start": "1644460",
    "end": "1650519"
  },
  {
    "text": "are pulling data from multiple data sources so behind the scenes app Singh can talk to all of these different data",
    "start": "1650519",
    "end": "1657240"
  },
  {
    "text": "sources Amazon Elastic search dynamo DB any HTTP data source AWS lambda and even",
    "start": "1657240",
    "end": "1663990"
  },
  {
    "text": "RDS it's RDS so when you make a graph curl query app sync will automatically",
    "start": "1663990",
    "end": "1671720"
  },
  {
    "text": "invoke these back-end resources consolidate the results for you and then return one single response and the power",
    "start": "1671720",
    "end": "1679139"
  },
  {
    "text": "of this is if you have a really chatty a network application that's really chatty when it makes a lot of rest calls and",
    "start": "1679139",
    "end": "1685590"
  },
  {
    "text": "that's a proof that help that that hurts your performance right so if you were to implement this using app sync you could",
    "start": "1685590",
    "end": "1691440"
  },
  {
    "text": "potentially reduce the amount or amount of network calls being made and then speed up your applications appsync also",
    "start": "1691440",
    "end": "1698220"
  },
  {
    "text": "supports an offline programming model so if you're building applications and need to work offline so if you have these",
    "start": "1698220",
    "end": "1703919"
  },
  {
    "text": "laptops you have phones and all these devices and need to operate offline and you need to be able to accept updates",
    "start": "1703919",
    "end": "1709470"
  },
  {
    "text": "and look at information and then and then when you do go online and you want to be able to sync all of that data app",
    "start": "1709470",
    "end": "1716639"
  },
  {
    "text": "sync has that built in right out of the box and probably the most powerful part",
    "start": "1716639",
    "end": "1721710"
  },
  {
    "text": "of app sync or feature is it has WebSocket real time subscriptions built",
    "start": "1721710",
    "end": "1726929"
  },
  {
    "text": "right in so if you're building these applications and you respond to updates and look at information without you ever",
    "start": "1726929",
    "end": "1733139"
  },
  {
    "text": "doing another query you can use app sync to do that so let's dive into this a little bit and see how this",
    "start": "1733139",
    "end": "1738840"
  },
  {
    "text": "works so graph QL is essentially a declarative data fetching syntax right",
    "start": "1738840",
    "end": "1746640"
  },
  {
    "start": "1741000",
    "end": "1819000"
  },
  {
    "text": "so at stick of comparison at how you would build to application ap is using",
    "start": "1746640",
    "end": "1751650"
  },
  {
    "text": "rest and using graph QL so on the left here if we were to build a application",
    "start": "1751650",
    "end": "1757590"
  },
  {
    "text": "that's pretty basic it's going to manage a list of contacts like a phone book",
    "start": "1757590",
    "end": "1762690"
  },
  {
    "text": "write in rest in order to get to answer all of these questions about what you",
    "start": "1762690",
    "end": "1767970"
  },
  {
    "text": "would do with a phone book you need to create a lot of different rest endpoints right so that's that's because rest is",
    "start": "1767970",
    "end": "1774030"
  },
  {
    "text": "essentially static and the type of data you're asking for and what it returns so in a phone book application you're",
    "start": "1774030",
    "end": "1780660"
  },
  {
    "text": "probably going to need to be able to get all contacts maybe search by state search contacts by",
    "start": "1780660",
    "end": "1786030"
  },
  {
    "text": "country or a company or some kind of search parameter right so all of these different slash contacts slash contact",
    "start": "1786030",
    "end": "1793200"
  },
  {
    "text": "information slash get contacts by state are all possible rest endpoints that you",
    "start": "1793200",
    "end": "1798750"
  },
  {
    "text": "could create now instead of creating rest endpoints you could also create instead of creating all these resources",
    "start": "1798750",
    "end": "1804330"
  },
  {
    "text": "you could also use you know query parameters and path parameters to do the same thing but the point is that you",
    "start": "1804330",
    "end": "1810780"
  },
  {
    "text": "have to create these things and rest in order to be able to implement them and respond to the customers that are",
    "start": "1810780",
    "end": "1817500"
  },
  {
    "text": "calling your API so when you're building a dashboard that's going to be",
    "start": "1817500",
    "end": "1823010"
  },
  {
    "start": "1819000",
    "end": "1876000"
  },
  {
    "text": "implementing your phonebook you may have to you may have to make all of these Network calls to build a dashboard so in",
    "start": "1823010",
    "end": "1829800"
  },
  {
    "text": "graph QL you can do this making one call to one endpoint so what's really powerful about this is that the client",
    "start": "1829800",
    "end": "1836760"
  },
  {
    "text": "that's calling your graph QL endpoint simply needs to change the request the data in the in the request to ask for",
    "start": "1836760",
    "end": "1844320"
  },
  {
    "text": "the data that they want back so let's take a look at how this works this is a",
    "start": "1844320",
    "end": "1849930"
  },
  {
    "text": "sample of a graph QL query so this graph QL query is get contact and I want to",
    "start": "1849930",
    "end": "1857970"
  },
  {
    "text": "get the contact with a contact ID of 1 1 1 however inside my query I'm specifying",
    "start": "1857970",
    "end": "1864120"
  },
  {
    "text": "exactly what I want so I want the contact ID I want I want all of the information",
    "start": "1864120",
    "end": "1869760"
  },
  {
    "text": "about my contact including the name email and location so in this case the",
    "start": "1869760",
    "end": "1877110"
  },
  {
    "start": "1876000",
    "end": "2046000"
  },
  {
    "text": "name and email are actually stored in a dynamo DB table and typically names and",
    "start": "1877110",
    "end": "1882419"
  },
  {
    "text": "emails don't change that often so so we want to store this kind of static data in a persistent data store we also might",
    "start": "1882419",
    "end": "1888480"
  },
  {
    "text": "want to encrypt it and do all kinds of other data backup on it location of my",
    "start": "1888480",
    "end": "1893970"
  },
  {
    "text": "contact potentially could change all the time so I want to be able to invoke a dynamic resource to pull the location",
    "start": "1893970",
    "end": "1901080"
  },
  {
    "text": "for this contact so in this case we're actually executing to resolvers so when",
    "start": "1901080",
    "end": "1906659"
  },
  {
    "text": "graph QR receives this query it's going to execute a dynamodb resolver and it's also going to execute a lambda resolver",
    "start": "1906659",
    "end": "1913860"
  },
  {
    "text": "after it's completed both resolver executions it'll return the response back out to the to the client invoking",
    "start": "1913860",
    "end": "1920789"
  },
  {
    "text": "this API so now instead of doing multiple rest calls in a graph QL call",
    "start": "1920789",
    "end": "1926399"
  },
  {
    "text": "call I can make one call and all of my data will come from multiple data sources so it's okay take a look at one",
    "start": "1926399",
    "end": "1934500"
  },
  {
    "text": "more example so in this example it's",
    "start": "1934500",
    "end": "1940740"
  },
  {
    "text": "it's still I'm still doing a get contact call and the get contact calls still",
    "start": "1940740",
    "end": "1945929"
  },
  {
    "text": "asking for the same contact one one one however this time I only care about the",
    "start": "1945929",
    "end": "1951330"
  },
  {
    "text": "contacts name right I might be building a dashboard or a smaller piece of my application that just has a list of",
    "start": "1951330",
    "end": "1956940"
  },
  {
    "text": "names right so as a client I'm still gonna hit the same API same",
    "start": "1956940",
    "end": "1962809"
  },
  {
    "text": "authentication mode I simply just want to change the data I want back so when I send this query in the single resolver",
    "start": "1962809",
    "end": "1969929"
  },
  {
    "text": "for executing data from from dynamodb will be called right so AB sync is is",
    "start": "1969929",
    "end": "1976320"
  },
  {
    "text": "smart enough to not invoke my second resolver my lambda resolver so in this case we speed up execution we would",
    "start": "1976320",
    "end": "1983909"
  },
  {
    "text": "reduce the amount of data being returned on the network and then app sync will handle all of that behind the scenes so",
    "start": "1983909",
    "end": "1990510"
  },
  {
    "text": "as an application developer you have to build your resolvers behind the scenes but once your once you're up and running",
    "start": "1990510",
    "end": "1995880"
  },
  {
    "text": "your application your your clients calling your graph QL API is can",
    "start": "1995880",
    "end": "2001440"
  },
  {
    "text": "very smoothly so here's a resolver",
    "start": "2001440",
    "end": "2007530"
  },
  {
    "text": "that's going to execute and pull in dynamodb resource not very recently we've added the ability to do multi",
    "start": "2007530",
    "end": "2013890"
  },
  {
    "text": "authentication on your your graph QL api's as well so that means you can add different types of authentication across",
    "start": "2013890",
    "end": "2020730"
  },
  {
    "text": "different fields or different objects in your API so if you have a user who is connecting and they can only see the",
    "start": "2020730",
    "end": "2027180"
  },
  {
    "text": "name and email but they're not supposed to see the location you can add directives inside this inside your app",
    "start": "2027180",
    "end": "2032820"
  },
  {
    "text": "your graph QL schema and then automatically respond and only return the the types of data that your",
    "start": "2032820",
    "end": "2038790"
  },
  {
    "text": "applications that your users should have access to so let's take a look at a",
    "start": "2038790",
    "end": "2047120"
  },
  {
    "text": "server full comparison versus the server's so if you're building your applications in a server full world you",
    "start": "2047120",
    "end": "2055500"
  },
  {
    "text": "typically have to start by setting up your network you know setting up your your your network infrastructure all the",
    "start": "2055500",
    "end": "2061290"
  },
  {
    "text": "hardware behind the scenes configuring your V pcs potentially right your next step is configuring your host alright",
    "start": "2061290",
    "end": "2068820"
  },
  {
    "text": "this host configuration as we know is is is virtualized today but you still have",
    "start": "2068820",
    "end": "2074850"
  },
  {
    "text": "to configure all the details about how to how to backup your host how to launch how to scale how to do all of these",
    "start": "2074850",
    "end": "2080580"
  },
  {
    "text": "things after you've made the host decision you have to make another decision how do we load balanced your",
    "start": "2080580",
    "end": "2086550"
  },
  {
    "text": "hosts right we have an operating system in your host but how do we load balanced all of these things now are we gonna use",
    "start": "2086550",
    "end": "2091830"
  },
  {
    "text": "a software we load balanced right we use a hardware load balancer what kind of security of firewalls to put around",
    "start": "2091830",
    "end": "2097050"
  },
  {
    "text": "these load balancers actually that's done we need a policy in place and",
    "start": "2097050",
    "end": "2102150"
  },
  {
    "text": "probably system admins to figure out how to patch and keep our operating systems",
    "start": "2102150",
    "end": "2107190"
  },
  {
    "text": "up-to-date you know Linux Windows whatever your",
    "start": "2107190",
    "end": "2112650"
  },
  {
    "text": "favorite operating system choice is all of these these athletes these OSS need to have regular updates so after you've",
    "start": "2112650",
    "end": "2123060"
  },
  {
    "text": "done your operating system configuration you're finally at the layer where you can do and choose your application",
    "start": "2123060",
    "end": "2128460"
  },
  {
    "text": "server web server and finally decide on what programming",
    "start": "2128460",
    "end": "2134640"
  },
  {
    "text": "language to build your application in right and this process takes a lot of",
    "start": "2134640",
    "end": "2139770"
  },
  {
    "text": "time and if you have to change any with anything in this stack you basically have to restart right",
    "start": "2139770",
    "end": "2146130"
  },
  {
    "text": "depending on how far down you want to go in this stack so if we're building applications in lambda all you have to",
    "start": "2146130",
    "end": "2154830"
  },
  {
    "text": "do is start with code so the first thing you do is open up that console start writing application code if you're using",
    "start": "2154830",
    "end": "2161480"
  },
  {
    "text": "non compiled languages you can go right into the console Python and node you can",
    "start": "2161480",
    "end": "2167580"
  },
  {
    "text": "you can start building really simple land of functions right in the console for those who are building compiled languages you do have to go through a",
    "start": "2167580",
    "end": "2174180"
  },
  {
    "text": "compilation process lambda will not compile for you so for example if you're building in Java you want to build your",
    "start": "2174180",
    "end": "2180300"
  },
  {
    "text": "java packages just as you do today and then use maven to package zip and then",
    "start": "2180300",
    "end": "2185850"
  },
  {
    "text": "upload your lambda functions to AWS so I encourage you to use a newer service",
    "start": "2185850",
    "end": "2191400"
  },
  {
    "text": "called AWS cloud 9 so cloud 9 is essentially an IDE that's operating on",
    "start": "2191400",
    "end": "2197190"
  },
  {
    "text": "an ec2 instance that you own that sits in Ruby PCs and it exposes a",
    "start": "2197190",
    "end": "2202610"
  },
  {
    "text": "browser-based IDE to to developer so all you have to do is use a browser to",
    "start": "2202610",
    "end": "2208380"
  },
  {
    "text": "interact with this IDE which means that you can eat you can actually program and write your applications on an iPad right",
    "start": "2208380",
    "end": "2214080"
  },
  {
    "text": "because it's gonna use all the power of the ec2 instance that you chose behind the scenes so the great thing about that",
    "start": "2214080",
    "end": "2221400"
  },
  {
    "text": "is is I its security is using I am so you could have multiple item accounts on roles and teams accessing the same cloud",
    "start": "2221400",
    "end": "2229110"
  },
  {
    "text": "9 interface and you have direct access into resources in Ruby PC so other than",
    "start": "2229110",
    "end": "2236340"
  },
  {
    "text": "that this pretty much wraps up our server lists update for today and",
    "start": "2236340",
    "end": "2241490"
  },
  {
    "text": "definitely thank you for your time all of my contact information is down here",
    "start": "2241490",
    "end": "2247680"
  },
  {
    "start": "2242000",
    "end": "2263000"
  },
  {
    "text": "and we'd love to hear about what you're doing with server lists at the end of the day please complete the session",
    "start": "2247680",
    "end": "2254070"
  },
  {
    "text": "survey on your applications we definitely will need your feedback and help improve our future deliverables",
    "start": "2254070",
    "end": "2261570"
  },
  {
    "text": "here thank you [Applause]",
    "start": "2261570",
    "end": "2265819"
  }
]