[
  {
    "start": "0",
    "end": "218000"
  },
  {
    "text": "hello everyone and welcome to reinvent my name is Matt crocus senior director",
    "start": "1340",
    "end": "7740"
  },
  {
    "text": "of software engineering at Vantage in this session we're going to share two separate journeys of two different organizations",
    "start": "7740",
    "end": "13460"
  },
  {
    "text": "vonage and aspect software as we each transformed our own real-time communication platforms to the cloud by",
    "start": "13460",
    "end": "19500"
  },
  {
    "text": "leveraging AWS we will share with you not only the paths we each took to AWS but also how and why we transformed our",
    "start": "19500",
    "end": "25949"
  },
  {
    "text": "platforms to the cloud along with tips and we hope will benefit you on your own journey in the first half of the session",
    "start": "25949",
    "end": "33000"
  },
  {
    "text": "myself in the hora war who is a staff engineer on my team will share the journey of Vonage as we transform a",
    "start": "33000",
    "end": "38190"
  },
  {
    "text": "real-time communication platform from what was previously a very enterprise telco like architecture to one which is",
    "start": "38190",
    "end": "44160"
  },
  {
    "text": "now a cloud native architecture built with many AWS services and more suitable for Vonage as a software driven",
    "start": "44160",
    "end": "49649"
  },
  {
    "text": "organization today for the second half of the session I'll turn the mic over to our friends from aspect software Rachel",
    "start": "49649",
    "end": "55500"
  },
  {
    "text": "Muller and Tom tainer both solution architects who will share a similar journey of their own organization so let's get started with",
    "start": "55500",
    "end": "62910"
  },
  {
    "text": "the journey vonage went through two AWS with our managed business cloud platform but before we start that journey let's",
    "start": "62910",
    "end": "69689"
  },
  {
    "text": "just quickly set some context around the specifics of the workload in AWS we will be discussing in this session similar",
    "start": "69689",
    "end": "75750"
  },
  {
    "text": "only in complexity to the talk to the telephony infrastructure we see here the workload of our bonds business cloud provides a unified communication service",
    "start": "75750",
    "end": "82320"
  },
  {
    "text": "for customers at its core this means providing real-time voice video and messaging services across many different",
    "start": "82320",
    "end": "88560"
  },
  {
    "text": "networks as well as endpoints at the same time our platform must support very compute intensive operations such as",
    "start": "88560",
    "end": "94619"
  },
  {
    "text": "real-time media transcoding as well as speech to text and text-to-speech conversions our platform must also",
    "start": "94619",
    "end": "100710"
  },
  {
    "text": "support a very network intensive application specifically involving high levels of packets per second as necessary for any real-time audio and",
    "start": "100710",
    "end": "107579"
  },
  {
    "text": "video processing and if that wasn't enough our platform must it's also very",
    "start": "107579",
    "end": "112920"
  },
  {
    "text": "disk intensive where real-time call recordings must be performed at the very same time and all these capabilities",
    "start": "112920",
    "end": "118680"
  },
  {
    "text": "must work together with low latency as needed for any real-time voice and video processing these services must also be",
    "start": "118680",
    "end": "126060"
  },
  {
    "text": "highly available as necessary to achieve five nines or more of uptime as required in our industry",
    "start": "126060",
    "end": "132319"
  },
  {
    "text": "and of course these services must be highly secure to protect our customers as well as our organization and of",
    "start": "132319",
    "end": "139819"
  },
  {
    "text": "course these services must provide a global service to support an international business like many of you",
    "start": "139819",
    "end": "147980"
  },
  {
    "text": "in the audience today I'm sure our journey to aw I started out a platform but mostly on top of on-premise",
    "start": "147980",
    "end": "153109"
  },
  {
    "text": "infrastructure as we grew we started to leverage AWA we started to leverage AWS mostly for compute and object storage",
    "start": "153109",
    "end": "159709"
  },
  {
    "text": "resources in a hybrid cloud model after many years of experience in AWS we",
    "start": "159709",
    "end": "164870"
  },
  {
    "text": "eventually made that lift and shift decision to take all of our infrastructure and move it to AWS so",
    "start": "164870",
    "end": "170299"
  },
  {
    "text": "great we're done right not even close although those steps were an important part of our journey where it became real",
    "start": "170299",
    "end": "176840"
  },
  {
    "text": "interesting is around what we discovered and what we did related to a redesign once we had moved all of our infrastructure to the cloud and what we",
    "start": "176840",
    "end": "183530"
  },
  {
    "text": "found was that we were in AWS we were not designed for AWS this is a very",
    "start": "183530",
    "end": "190489"
  },
  {
    "text": "important distinction it's something that can be very difficult for many companies not only to realize but also to address properly from a long-term",
    "start": "190489",
    "end": "196430"
  },
  {
    "text": "strategic technical direction advantage not only do we recognize that our platform which had served us so well for",
    "start": "196430",
    "end": "203209"
  },
  {
    "text": "so many years was no longer the best suited platform for our future ambitions we also decided to do something about it",
    "start": "203209",
    "end": "208629"
  },
  {
    "text": "we invested a large amount of time and effort to transform our platform based on technology decisions of today not",
    "start": "208629",
    "end": "214879"
  },
  {
    "text": "those of a prior decade once we had lifted and shifted our platform as a",
    "start": "214879",
    "end": "220819"
  },
  {
    "start": "218000",
    "end": "218000"
  },
  {
    "text": "whole to AWS we were still left with the same monolithic application that had prevented us from taking advantage of",
    "start": "220819",
    "end": "226099"
  },
  {
    "text": "many of the rich services in AWS this monolithic application was still running",
    "start": "226099",
    "end": "231409"
  },
  {
    "text": "on a very very rigid infrastructure on AWS as odd as that might sound where we had thousands of instances running 24/7",
    "start": "231409",
    "end": "238099"
  },
  {
    "text": "365 days of the year with very low overall resource usage we were also",
    "start": "238099",
    "end": "243620"
  },
  {
    "text": "still managing application and services and relearning the operational expertise to maintain those systems in a cloud",
    "start": "243620",
    "end": "250129"
  },
  {
    "text": "environment none of which helped to differentiate our service to our customers and of",
    "start": "250129",
    "end": "255650"
  },
  {
    "text": "course with a large monolithic application you can imagine the typical long release cycles that came with it where software release is often involved",
    "start": "255650",
    "end": "262490"
  },
  {
    "text": "time frames on the order of months often with that unpleasant Oshie ated rollback scenario from",
    "start": "262490",
    "end": "268460"
  },
  {
    "text": "appalled processing perspective or applications and call flows are mostly designed around an active standby model which simply translated too much waste",
    "start": "268460",
    "end": "274610"
  },
  {
    "text": "in AWS we would often look at the look at the charts and make the obvious conclusion that we should really follow",
    "start": "274610",
    "end": "280340"
  },
  {
    "text": "our load curve with auto scaling especially on our call processing infrastructure you know what getting",
    "start": "280340",
    "end": "285620"
  },
  {
    "text": "there was always more than an arm's reach away for us our platform also had several dependencies on a primary region",
    "start": "285620",
    "end": "291890"
  },
  {
    "text": "which although it was highly available it left us without the ability to exit a region quickly and easily in case of a",
    "start": "291890",
    "end": "297740"
  },
  {
    "text": "service disruption of any kind in our primary region all of this meant that we were focusing more on engineering and",
    "start": "297740",
    "end": "304190"
  },
  {
    "text": "less on innovating for many of these",
    "start": "304190",
    "end": "309440"
  },
  {
    "text": "reasons we asked ourselves should we redesign specifically redesign our platform for cloud environment some",
    "start": "309440",
    "end": "316880"
  },
  {
    "start": "311000",
    "end": "311000"
  },
  {
    "text": "would argue this was just too big others would argue this was a unique opportunity an important point to",
    "start": "316880",
    "end": "322910"
  },
  {
    "text": "remember in your journey is that redesigning your platform natively from the cloud does not necessarily mean rebuilding your your platform as a whole",
    "start": "322910",
    "end": "329380"
  },
  {
    "text": "of course you can and will rewrite some components from scratch redesigning your platform does not should not necessarily",
    "start": "329380",
    "end": "335420"
  },
  {
    "text": "mean starting over advantage we took this opportunity to leverage open source technologies there were more mature",
    "start": "335420",
    "end": "341540"
  },
  {
    "text": "today than they were when our platform was initially built we also took the opportunity to natively leverage of many",
    "start": "341540",
    "end": "348980"
  },
  {
    "text": "AWS services such as AWS such as or RDS ElastiCache laminate step functions and",
    "start": "348980",
    "end": "355790"
  },
  {
    "text": "more we leverage them natively within our platform and we'll talk more about these in more detail we also decided to",
    "start": "355790",
    "end": "362120"
  },
  {
    "text": "make infrastructure automation an integral part of our platform something that our DevOps teams would would build",
    "start": "362120",
    "end": "367760"
  },
  {
    "text": "deploy and maintain in the same way they do their application code so yes we",
    "start": "367760",
    "end": "374150"
  },
  {
    "text": "decided it was time to upgrade just upgrade an application or a tool but to upgrade the platform as a whole and",
    "start": "374150",
    "end": "380030"
  },
  {
    "text": "bring it to the cloud this is where our journey also became a cultural shift for Vonage not only would we be upgrading",
    "start": "380030",
    "end": "386390"
  },
  {
    "text": "our platform will be up skilling our teams enhancing our processes and most importantly creating better business",
    "start": "386390",
    "end": "391880"
  },
  {
    "text": "outcomes for our customers taking the leap on this journey first involves",
    "start": "391880",
    "end": "397700"
  },
  {
    "start": "394000",
    "end": "394000"
  },
  {
    "text": "seeing the big picture of where we wanted to be not just a few weeks or a few months into the future but where we wanted to",
    "start": "397700",
    "end": "403400"
  },
  {
    "text": "be one to two years ahead and then starting the small team with a mandate to execute on this big picture for this",
    "start": "403400",
    "end": "409640"
  },
  {
    "text": "phase of the journey we started small with a team of just a few and we grew that team over the course of a year",
    "start": "409640",
    "end": "414790"
  },
  {
    "text": "within two years we had we sink we had redesigned our platform and successfully migrated our customer base to this new",
    "start": "414790",
    "end": "420680"
  },
  {
    "text": "platform we had made a heavy investment in automation and we chose to fail fast",
    "start": "420680",
    "end": "425750"
  },
  {
    "text": "so that we can make pivots early which we did many times you know prior to working at Vantage I myself had been",
    "start": "425750",
    "end": "431870"
  },
  {
    "text": "involved in many startups some going back to the dot-com boom of the 90s this effort within Vantage had all the",
    "start": "431870",
    "end": "437420"
  },
  {
    "text": "excitement energy and technical innovation that goes into a start-up this is in fact the culture that managed",
    "start": "437420",
    "end": "442970"
  },
  {
    "text": "itself was founded upon and we were essentially going back to our roots to transform ourselves and once again be a technology disruptor in our efforts so",
    "start": "442970",
    "end": "451389"
  },
  {
    "text": "today our vaana's business cloud platform has had a heavy investment in automation we mostly use ansible where",
    "start": "451420",
    "end": "458390"
  },
  {
    "text": "we leverage integration with AWS sdk very heavily to make our automation do things that we simply could never do",
    "start": "458390",
    "end": "463970"
  },
  {
    "text": "before within our own data centers we treat our infrastructure like code because it is written and it is",
    "start": "463970",
    "end": "470150"
  },
  {
    "text": "maintained by our developers the same ones which write the applications which leverage the infrastructure we now have",
    "start": "470150",
    "end": "476690"
  },
  {
    "text": "automation in place we're rebuilding all environments from scratch Chris frequently Daley and death and weekly",
    "start": "476690",
    "end": "482990"
  },
  {
    "text": "and QA and production we leverage Bluegreen deployments which allow us to",
    "start": "482990",
    "end": "488000"
  },
  {
    "text": "rebuild even or production environment while we have live calls on it without having to perform failover manoeuvres we",
    "start": "488000",
    "end": "494330"
  },
  {
    "text": "can do this because our automation and our applications work together to provide a platform which is now cloud native we also now have CI and CDI using",
    "start": "494330",
    "end": "503270"
  },
  {
    "text": "code pipeline and code deploy where we can able to apply multiple changes a day and move those changes to our",
    "start": "503270",
    "end": "508340"
  },
  {
    "text": "environments with a simple click of a button we now push out changes to some of the most critical components of our",
    "start": "508340",
    "end": "513830"
  },
  {
    "text": "real-time communication platform through a code pipeline and code deploy which include routing logic to our sip",
    "start": "513830",
    "end": "519080"
  },
  {
    "text": "registrar's and sip and sip proxies as well as dial pin and logic for real-time communication application servers as",
    "start": "519080",
    "end": "525500"
  },
  {
    "text": "well as software for many of our micro services all of this automation allows us to now innovate at a very rapid pace",
    "start": "525500",
    "end": "534010"
  },
  {
    "text": "today or wadis business cloud platform has a very dynamic and elastic infrastructure we use auto scaling",
    "start": "535149",
    "end": "541310"
  },
  {
    "text": "groups with ec2 and cloud watch so it's at our infrastructure scales out horizontally to match demand and scales",
    "start": "541310",
    "end": "546380"
  },
  {
    "text": "in when demand decreases to support auto scaling on components of our infrastructure which process voice and",
    "start": "546380",
    "end": "552740"
  },
  {
    "text": "video calls this means we had to treat our infrastructure as disposable from day one this means any file written to",
    "start": "552740",
    "end": "559459"
  },
  {
    "text": "disk whether was a call recording or call detailed record needed to be uploaded to s3 since that instance could",
    "start": "559459",
    "end": "565100"
  },
  {
    "text": "scale away we also now use serverless labna functions for processing every",
    "start": "565100",
    "end": "570440"
  },
  {
    "text": "call event on our platform this means every telephony event such as a calls ringing a call as alerting the calls",
    "start": "570440",
    "end": "576019"
  },
  {
    "text": "answered or calls terminated each and every one of these events needs to be processed and consumed by other parts of",
    "start": "576019",
    "end": "581690"
  },
  {
    "text": "our platform to maintain dashboards and features which rely on these events on our real-time call processing",
    "start": "581690",
    "end": "587690"
  },
  {
    "text": "infrastructure whenever one of these events occur we simply invoke a short-lived lambda function and process",
    "start": "587690",
    "end": "592760"
  },
  {
    "text": "these events in a server list piece of code which is highly elastic with zero maintenance you can imagine the timing",
    "start": "592760",
    "end": "598370"
  },
  {
    "text": "of these events are very critical and with lambda we have been able to easily scale a well over 6,000 lambdas a second",
    "start": "598370",
    "end": "603860"
  },
  {
    "text": "during peak periods a more traffic for some existing applications where maybe an object store such as s3 is not",
    "start": "603860",
    "end": "610130"
  },
  {
    "text": "feasible we have been able to leverage EFS and have a highly elastic file system which simply grows as our demand",
    "start": "610130",
    "end": "615440"
  },
  {
    "text": "increases there's no more managing NFS infrastructure ourselves today or vonage",
    "start": "615440",
    "end": "623899"
  },
  {
    "text": "business cloud platform is designed such that even our call flows take advantage of not only a multi AZ architecture",
    "start": "623899",
    "end": "628940"
  },
  {
    "text": "where calls our processing clusters which are active active across multiple AZ's within a region but these call",
    "start": "628940",
    "end": "634610"
  },
  {
    "text": "flows also know how to failover automatically to another region which is active active as well from summers with",
    "start": "634610",
    "end": "640910"
  },
  {
    "text": "auto scaling if and when a cross region event or need occurs increase the capital scaling up the capacity one",
    "start": "640910",
    "end": "647660"
  },
  {
    "text": "region will simply scale up to meet the increased demand from the other of course we also leverage many AWS managed",
    "start": "647660",
    "end": "653899"
  },
  {
    "text": "services such as RDS elastic test lambda and others which are also highly available within a region themselves",
    "start": "653899",
    "end": "659380"
  },
  {
    "text": "when building an H a platform which leverages services such as these you want to make sure you have a rational",
    "start": "659380",
    "end": "665209"
  },
  {
    "text": "button to quickly an exit a region literally with a simple yet secure button failures won't always",
    "start": "665209",
    "end": "671730"
  },
  {
    "text": "be black-and-white there can be great types of failures and for these reasons you want to make sure you have that",
    "start": "671730",
    "end": "677310"
  },
  {
    "text": "operational button to exit a region for any of those great failures in addition to having automatic failover of course",
    "start": "677310",
    "end": "684590"
  },
  {
    "start": "686000",
    "end": "686000"
  },
  {
    "text": "today or vaana's business cloud platform leverages many managed services in AWS by redesigning our platform for AWS we",
    "start": "687380",
    "end": "695160"
  },
  {
    "text": "were able to leverage natively leverage many services that previously required much time and effort to manage ourselves as an example we now use RDS for all of",
    "start": "695160",
    "end": "703380"
  },
  {
    "text": "our relational database needs such as account data and usage data we also",
    "start": "703380",
    "end": "709410"
  },
  {
    "text": "leverage dynamo DB for micro services what you need to manage global state such as the state of an agent in a call",
    "start": "709410",
    "end": "714540"
  },
  {
    "text": "queue for a distributed real-time caching such as that needed to manage",
    "start": "714540",
    "end": "719790"
  },
  {
    "text": "the state of a call we rely on ElastiCache Stratus we also rely on a less cache memcache for managing real",
    "start": "719790",
    "end": "725880"
  },
  {
    "text": "time transient registration events we pump all of our call detail records into",
    "start": "725880",
    "end": "731670"
  },
  {
    "text": "a Kinesis stream which our mediation system uses to process those records and perform mediation prior to raiding as",
    "start": "731670",
    "end": "737450"
  },
  {
    "text": "the usage on our platform grows we simply add more shards through automation to our Kinesis streams to get",
    "start": "737450",
    "end": "743280"
  },
  {
    "text": "more throughput it's that simple since our infrastructure is very less it",
    "start": "743280",
    "end": "748530"
  },
  {
    "text": "can we try to optimize keeping as much data as close to our call processing components as possible we leverage we",
    "start": "748530",
    "end": "753990"
  },
  {
    "text": "leverage SNS to decouple the job of publishing account changes out to our infrastructure we also use sqs to",
    "start": "753990",
    "end": "760110"
  },
  {
    "text": "distribute our micro services across our elastic infrastructure for jobs such as transcoding call recordings converting",
    "start": "760110",
    "end": "765990"
  },
  {
    "text": "documents or fax transmissions and de storing voicemail recordings into long-term storage as well as many other",
    "start": "765990",
    "end": "771720"
  },
  {
    "text": "use cases and of course all of these services including the creation and",
    "start": "771720",
    "end": "777330"
  },
  {
    "text": "discovery of these services are baked into our automation so that a single button can be used to provision everything needed for an environment",
    "start": "777330",
    "end": "783830"
  },
  {
    "text": "invests in automating everything the return on investment here is a game changer and the programmability of AWS",
    "start": "783830",
    "end": "789870"
  },
  {
    "text": "has is a key differentiator as compared to legacy practices still used by many others",
    "start": "789870",
    "end": "796070"
  },
  {
    "text": "today our Vonage business cloud platform is running its workload in AWS and providing a high quality low latency",
    "start": "797550",
    "end": "804160"
  },
  {
    "text": "service in order to which we use ec2 instances with EBS volumes for all of",
    "start": "804160",
    "end": "809890"
  },
  {
    "text": "our signalling and media processing opponents we have found that the c-5 instance type with the enhanced networking adapter provide the best",
    "start": "809890",
    "end": "816250"
  },
  {
    "text": "throughput specifically in terms of packets per second which with extremely low latency which is critical for any",
    "start": "816250",
    "end": "821290"
  },
  {
    "text": "real-time communication platform in order to ensure a high quality of",
    "start": "821290",
    "end": "826360"
  },
  {
    "text": "service we invested efforts in fast auto scaling techniques to make sure that our call processing infrastructure instances",
    "start": "826360",
    "end": "832660"
  },
  {
    "text": "can be launched and brought into service within minutes this is necessary to ensure that our platform could take any",
    "start": "832660",
    "end": "838030"
  },
  {
    "text": "punch it's come which comes its way and still maintain high levels of quality",
    "start": "838030",
    "end": "843210"
  },
  {
    "text": "Colonel tuning this is something that just goes with the territory with any real-time communication platform we have",
    "start": "843210",
    "end": "849520"
  },
  {
    "text": "found that tuning the clock source and a scheduler of the kernel are important factors towards maintaining high quality and low latency you want to make sure",
    "start": "849520",
    "end": "856780"
  },
  {
    "text": "that you profile your kernel not just under low test environments but also under production workloads where",
    "start": "856780",
    "end": "861820"
  },
  {
    "text": "possible I'm now gonna let in harsh share some tips and tricks we learned on",
    "start": "861820",
    "end": "867670"
  },
  {
    "text": "our journey all right thanks Matt hello",
    "start": "867670",
    "end": "877930"
  },
  {
    "text": "everyone super excited to be here and to be able to share some of our learnings with you all we hope that some of what",
    "start": "877930",
    "end": "883180"
  },
  {
    "text": "we've gone through and learned is useful for you as well now one of the very first things that we need to be",
    "start": "883180",
    "end": "889210"
  },
  {
    "text": "concerned about is the speed with which our aSG's can keep up the traffic patterns as Matt mentioned we use aSG's",
    "start": "889210",
    "end": "896440"
  },
  {
    "text": "extensively to scale our infrastructure excuse me horizontally and to keep up with demand in order to do that",
    "start": "896440",
    "end": "902620"
  },
  {
    "text": "instances need to come up quick and put themselves in the service fairly quick to avoid potential scaling issues",
    "start": "902620",
    "end": "909240"
  },
  {
    "text": "incoming call and media processors for example must be ready and willing to take on traffic to avoid call quality",
    "start": "909240",
    "end": "916360"
  },
  {
    "text": "issues caused by existing instances going to dense to achieve this one of",
    "start": "916360",
    "end": "921490"
  },
  {
    "text": "the things that we do during cluster deployments is to package up and put into s3 the right version of our",
    "start": "921490",
    "end": "927880"
  },
  {
    "text": "automation code and then at launch new instances pulldown this automation and do a partial local run to configure",
    "start": "927880",
    "end": "935379"
  },
  {
    "text": "themselves as fast as they can this avoids remote execution overhead and also keeps things local this also leads",
    "start": "935379",
    "end": "942549"
  },
  {
    "text": "into our next point which is to as much as possible only have configuration on",
    "start": "942549",
    "end": "948009"
  },
  {
    "text": "instance launched this way we can respond within minutes to spikes in traffic we pre build REM eyes with",
    "start": "948009",
    "end": "954720"
  },
  {
    "text": "packages installed bill steps already performed and so on this front loading",
    "start": "954720",
    "end": "960009"
  },
  {
    "text": "ensures that the call processing system is resilient to outages such as repositories being down or packages",
    "start": "960009",
    "end": "966249"
  },
  {
    "text": "getting removed we basically want to get as close to zero external dependencies at launch as possible",
    "start": "966249",
    "end": "972119"
  },
  {
    "text": "this avoids instances coming into service but not being in the state to service requests we also specifically",
    "start": "972119",
    "end": "980319"
  },
  {
    "start": "978000",
    "end": "978000"
  },
  {
    "text": "designed to handle failures address breaking points within the system and to avoid service disruptions a big part of",
    "start": "980319",
    "end": "987279"
  },
  {
    "text": "being in the cloud is to anticipate and address failures during normal operations this may not happen a lot but",
    "start": "987279",
    "end": "993220"
  },
  {
    "text": "when they happen they should not cause outages for example it's an underlying disk fails and the volume goes into",
    "start": "993220",
    "end": "999459"
  },
  {
    "text": "read-only mode part of our automation is to detect such routine failures before",
    "start": "999459",
    "end": "1004559"
  },
  {
    "text": "they happen and then remove the need for manual intervention all the AG instances",
    "start": "1004559",
    "end": "1009899"
  },
  {
    "text": "have an application and instant specific health check running which looks for things like services being up interfaces",
    "start": "1009899",
    "end": "1015839"
  },
  {
    "text": "being healthy disks being healthy and so on and these checks happen once every minute and if an instance is deemed",
    "start": "1015839",
    "end": "1023339"
  },
  {
    "text": "unhealthy its marked as unhealthy in the ASG now this does not mean we can terminate instances at Ville instance life cycles",
    "start": "1023339",
    "end": "1030839"
  },
  {
    "text": "still needs to be managed we also have fail safes in our logic to not scale away all instances in the SG due to",
    "start": "1030839",
    "end": "1037168"
  },
  {
    "text": "systemic issues we must handle terminations gracefully when an instance",
    "start": "1037169",
    "end": "1043350"
  },
  {
    "start": "1039000",
    "end": "1039000"
  },
  {
    "text": "moves in to terminating wait state for any reason could be unhealthy part of normal scale and at night we make sure",
    "start": "1043350",
    "end": "1049830"
  },
  {
    "text": "that we don't scale away suddenly the checks specific to the application rule we allow instances to drain traffic",
    "start": "1049830",
    "end": "1057120"
  },
  {
    "text": "gracefully if you've got any calls up we wait for the sessions to end for example",
    "start": "1057120",
    "end": "1062490"
  },
  {
    "text": "in the picture there on our media processors if we have a local data that's still being uploaded for example call",
    "start": "1062490",
    "end": "1068820"
  },
  {
    "text": "recordings voicemails CDRs we wait for those to finish processing as well once",
    "start": "1068820",
    "end": "1073980"
  },
  {
    "text": "all the data and sessions are cleanly drained off then we let the termination proceed performance Ovilus obviously is",
    "start": "1073980",
    "end": "1081360"
  },
  {
    "text": "not for free just because we are in the cloud you still need to do all your homework for performance tuning go",
    "start": "1081360",
    "end": "1086580"
  },
  {
    "text": "through that cycle of tuning testing applying what you learn multiple times tuning is application specific for",
    "start": "1086580",
    "end": "1093630"
  },
  {
    "text": "example instance Isis very instance types very system optimizations very all based on application and workload type I",
    "start": "1093630",
    "end": "1100670"
  },
  {
    "text": "won't dig in too much here but there's a great deep dive on performance tuning ec2 instances that you should totally",
    "start": "1100670",
    "end": "1105990"
  },
  {
    "text": "check out whether it's live on the web from a kernel tuning perspective we went",
    "start": "1105990",
    "end": "1111840"
  },
  {
    "text": "with the TSE clock source which is an optimization specific to applications that invoke get time of the system calls",
    "start": "1111840",
    "end": "1118679"
  },
  {
    "text": "a lot and one that AWS recommends you apply as well this had a big impact on",
    "start": "1118679",
    "end": "1124020"
  },
  {
    "text": "our get time of day performance which impacted latency on call flows for us positively and internal analysis saw a",
    "start": "1124020",
    "end": "1130710"
  },
  {
    "text": "difference of two hundred and seventy seconds versus twenty one seconds for a",
    "start": "1130710",
    "end": "1136020"
  },
  {
    "text": "million calls to get time of day between the Zen clock source was the TSE clock source we also went from a 250 Hertz",
    "start": "1136020",
    "end": "1142950"
  },
  {
    "text": "timer on a stock Debian ami kernel to a thousand Hertz timer to get better resolution and improve latency on the",
    "start": "1142950",
    "end": "1150150"
  },
  {
    "text": "scheduler this is a recommended mitigation to avoid choppy audio issues on slower clocks for paul and media",
    "start": "1150150",
    "end": "1156270"
  },
  {
    "text": "processors for network tuning we went with c 5 instant sizes for media and",
    "start": "1156270",
    "end": "1162720"
  },
  {
    "text": "signal processing instances to improve packets per second using the right instant sighs now instant selection is",
    "start": "1162720",
    "end": "1169800"
  },
  {
    "text": "obviously very important not all application should be on the same instant sizes call in media processors",
    "start": "1169800",
    "end": "1175500"
  },
  {
    "text": "like I said are on C 5 2 X largest 4 PPS but our provisioning applications which don't need to push as much in terms of",
    "start": "1175500",
    "end": "1182160"
  },
  {
    "text": "networking are on C 4 2 X larges we leverage lambdas and step functions",
    "start": "1182160",
    "end": "1188400"
  },
  {
    "text": "extensively here I'll just touch on a couple of optimizations we've made for a lambda usage by the Amazon is a great",
    "start": "1188400",
    "end": "1194880"
  },
  {
    "text": "resource for digging in the best practices on lambdas listed at the bottom of the slide there",
    "start": "1194880",
    "end": "1200340"
  },
  {
    "text": "you should check that out be mindful of overhead invocation can",
    "start": "1200340",
    "end": "1205530"
  },
  {
    "text": "overshadow execution times especially for smaller lambdas so avoid the temptation of making your lambdas too",
    "start": "1205530",
    "end": "1211230"
  },
  {
    "text": "tiny and fragmented the right granularity has a big impact especially for low latency fire-and-forget events",
    "start": "1211230",
    "end": "1218120"
  },
  {
    "text": "for three chained lambdas in our call state application for example simply merging them into one lambda invocation",
    "start": "1218120",
    "end": "1224430"
  },
  {
    "text": "dropped our total execution time from 70 milliseconds to 20 milliseconds another",
    "start": "1224430",
    "end": "1230760"
  },
  {
    "text": "thing to keep in mind again very important for low latency lambdas is reuse reusing resources such as database",
    "start": "1230760",
    "end": "1238080"
  },
  {
    "text": "and cache connections across lambda invocations by making them global in the execution context had a big performance",
    "start": "1238080",
    "end": "1244920"
  },
  {
    "text": "impact and something Amazon recommends you do as well for a performance boost it was specially relevant for lambdas",
    "start": "1244920",
    "end": "1252030"
  },
  {
    "text": "that have a large number of invocations",
    "start": "1252030",
    "end": "1255620"
  },
  {
    "text": "the last thing that I want to touch on with respect to lambda is the isolation",
    "start": "1257780",
    "end": "1263360"
  },
  {
    "text": "for call state events we have about half a billion invocations on weekdays this is roughly like 6000 per second at peak",
    "start": "1263360",
    "end": "1270179"
  },
  {
    "text": "we move these lambdas into their own subnets for network segmentation this",
    "start": "1270179",
    "end": "1275670"
  },
  {
    "text": "avoids impacting other services for example then we have spikes in call volume the call state application could",
    "start": "1275670",
    "end": "1281670"
  },
  {
    "text": "take up all the IPS in that subnet and cause other applications to fail this also avoids impact from other services",
    "start": "1281670",
    "end": "1288330"
  },
  {
    "text": "like a rogue lambda could you through all your IPS in that subnet and cause call sale applications to fail Amazon",
    "start": "1288330",
    "end": "1294660"
  },
  {
    "text": "recommends going with dedicated lambda subnets which is what we did if that's",
    "start": "1294660",
    "end": "1299910"
  },
  {
    "text": "not possible in your setup you can do V pcs as well but do something using reserved concurrency helps but without",
    "start": "1299910",
    "end": "1307410"
  },
  {
    "text": "network level isolation is just an outage waiting to happen another",
    "start": "1307410",
    "end": "1313350"
  },
  {
    "text": "important principle for us is localization of call flows this helps us",
    "start": "1313350",
    "end": "1318929"
  },
  {
    "text": "with both reducing latencies and avoiding failures during calls we try to stay within region as much as possible",
    "start": "1318929",
    "end": "1324809"
  },
  {
    "text": "in the picture there you see Virginia on top oregon on the bottom and the same application stack and call flow",
    "start": "1324809",
    "end": "1332460"
  },
  {
    "text": "we also optimized to stay within a ZZZ for media and signal processing to avoid in today's networking issues all data",
    "start": "1332460",
    "end": "1339090"
  },
  {
    "text": "needed by pod processing is provisioned to caches locally when possible for",
    "start": "1339090",
    "end": "1345480"
  },
  {
    "text": "example local instance memcache or Redis or to a within region elastic cache cluster which acts as a global cache in",
    "start": "1345480",
    "end": "1352080"
  },
  {
    "text": "that region there is also a in region RDS cluster for persistent data as well",
    "start": "1352080",
    "end": "1359220"
  },
  {
    "text": "as an s3 layer for provisioning objects such as recordings voicemails user profiles and so on and the provisioning",
    "start": "1359220",
    "end": "1366060"
  },
  {
    "text": "system ensures that all this data needed in that region by the core processing system is available in that region at",
    "start": "1366060",
    "end": "1374700"
  },
  {
    "text": "times your applications will need region of NS some applications need a global view for example you've got a call state",
    "start": "1374700",
    "end": "1380070"
  },
  {
    "text": "dashboard that needs to know the state of calls across all regions others need region awareness for the data that needs",
    "start": "1380070",
    "end": "1386250"
  },
  {
    "text": "to be written to or read from multiple or specific regions the mediation system which is shown here is an example of",
    "start": "1386250",
    "end": "1392400"
  },
  {
    "text": "that core processes as they're writing records they push them up to an s3 bucket within that region which triggers",
    "start": "1392400",
    "end": "1399240"
  },
  {
    "text": "a lambda that then pushes these to a Kinesis stream off of which the mediation applications picking up",
    "start": "1399240",
    "end": "1405270"
  },
  {
    "text": "records and then pushing those mediated records to a specific database primary",
    "start": "1405270",
    "end": "1411510"
  },
  {
    "text": "in a specific region this follows a pattern of staying within region as much",
    "start": "1411510",
    "end": "1417180"
  },
  {
    "text": "as possible and going across region only when needed this is a key principle for",
    "start": "1417180",
    "end": "1422310"
  },
  {
    "text": "us for applications that need region of NS or that need to access global data or go across regions if we delay region of",
    "start": "1422310",
    "end": "1429240"
  },
  {
    "text": "NS to be as late in our processing chain as possible this way avoiding cross region dependencies the final trick that",
    "start": "1429240",
    "end": "1437130"
  },
  {
    "start": "1435000",
    "end": "1435000"
  },
  {
    "text": "I want to touch on is a pattern that we've seen occur repeatedly in the evolution of a system and which has worked out very well for us it's a",
    "start": "1437130",
    "end": "1443340"
  },
  {
    "text": "standard pattern we use for performance decoupling resilience and to distribute work across services we use a",
    "start": "1443340",
    "end": "1450360"
  },
  {
    "text": "combination of s3 SNS and SQS to avoid processing tasks during call flows see",
    "start": "1450360",
    "end": "1457620"
  },
  {
    "text": "the RS voicemails call recordings transcription flows these are all examples of paths that they use this",
    "start": "1457620",
    "end": "1463260"
  },
  {
    "text": "pattern in the picture there you're seeing the voicemail floo here there as messages are being",
    "start": "1463260",
    "end": "1468480"
  },
  {
    "text": "recorded they're left locally on the core processors on EBS volumes these files are then pushed up to s3 via micro",
    "start": "1468480",
    "end": "1476400"
  },
  {
    "text": "services outside of the call flow which then triggers consumers of SNS and SQS",
    "start": "1476400",
    "end": "1481590"
  },
  {
    "text": "to pick up these files apply processing on them transcription transcoding and so on and then push them towards the",
    "start": "1481590",
    "end": "1488370"
  },
  {
    "text": "voicemail cluster at the end I hope you guys found this helpful and now I'm gonna hand back over to Matt",
    "start": "1488370",
    "end": "1495530"
  },
  {
    "text": "thanks NAR and thank you everyone for letting vana chair our journey to AWS I'm now gonna hand the mic back over to",
    "start": "1499100",
    "end": "1505770"
  },
  {
    "text": "Rachel and Tom from aspect software so they can share their journey to AWS",
    "start": "1505770",
    "end": "1511170"
  },
  {
    "text": "[Applause]",
    "start": "1511170",
    "end": "1516320"
  },
  {
    "text": "thanks Matt my colleague Tom Penner and I are going to spend the rest of this session talking about how we transformed",
    "start": "1516320",
    "end": "1524700"
  },
  {
    "text": "a single tenant low latency chat service into a software as a service component",
    "start": "1524700",
    "end": "1530870"
  },
  {
    "text": "but first I'm going to go into a little background about what we do it's a spec software and a brief history of our",
    "start": "1530870",
    "end": "1537660"
  },
  {
    "text": "moving our components to the cloud and then Tom's gonna come over and talk",
    "start": "1537660",
    "end": "1542670"
  },
  {
    "text": "about that chat service and the software is a service component that replaced it and then I'll return to go over some",
    "start": "1542670",
    "end": "1549810"
  },
  {
    "text": "lessons learned during the transformation process and then Tom will finish up with some final takeaways and",
    "start": "1549810",
    "end": "1557100"
  },
  {
    "text": "aspects software we build what's called customer engagement services so what",
    "start": "1557100",
    "end": "1562170"
  },
  {
    "text": "does that mean well if you use your landline or your mobile phone to talk to a live person about your bank account or",
    "start": "1562170",
    "end": "1569700"
  },
  {
    "text": "support issue or you've interacted with a chatbot that helped to find the",
    "start": "1569700",
    "end": "1575400"
  },
  {
    "text": "perfect wine for your next dinner party or you've gotten a notification on your",
    "start": "1575400",
    "end": "1581670"
  },
  {
    "text": "mobile device about an upcoming doctor dentist or haircut appointment then chances are you've interacted with",
    "start": "1581670",
    "end": "1587880"
  },
  {
    "text": "customer engagement services from a spec software we've spent the last almost",
    "start": "1587880",
    "end": "1594720"
  },
  {
    "text": "three years now taking a product suite that used to work primarily in our customers dissenters and we are protecting it as a",
    "start": "1594720",
    "end": "1601860"
  },
  {
    "text": "software as a service offering in the cloud and we call that software as a service offering s by BIA this slide",
    "start": "1601860",
    "end": "1609330"
  },
  {
    "text": "illustrates the V architecture effort as of last year when Tom and I presented it reinvent at this time you can see we had",
    "start": "1609330",
    "end": "1617850"
  },
  {
    "text": "a number of services running in the cloud we were just starting to take advantage of server list lambda",
    "start": "1617850",
    "end": "1623190"
  },
  {
    "text": "functions we're already well on our way to using managed services such as Redis and s3 and there was still one part of",
    "start": "1623190",
    "end": "1632550"
  },
  {
    "text": "our product that wasn't running in the cloud specifically our media servers which bring audio into and out of a spec",
    "start": "1632550",
    "end": "1638670"
  },
  {
    "text": "via those were running in aspect hosted data centers fast forward a year and the",
    "start": "1638670",
    "end": "1645870"
  },
  {
    "text": "major enhancement now is that those media servers are in the cloud as well with everything else we're also taking",
    "start": "1645870",
    "end": "1652050"
  },
  {
    "text": "advantage of more manage services such as Kinesis we're also leveraging",
    "start": "1652050",
    "end": "1657720"
  },
  {
    "text": "containers and this allows us to skip the install process during the",
    "start": "1657720",
    "end": "1663180"
  },
  {
    "text": "deployments thus reducing delivery times",
    "start": "1663180",
    "end": "1667730"
  },
  {
    "text": "but the we architecture effort wasn't just focused on reducing delivery times we really wanted to take any single",
    "start": "1668600",
    "end": "1675330"
  },
  {
    "text": "tenant low scale services we had and we architect them as software-as-a-service but we had users on our platform so we",
    "start": "1675330",
    "end": "1684570"
  },
  {
    "text": "needed some guiding principles to make sure that our users had a smooth transition during this time so the",
    "start": "1684570",
    "end": "1690510"
  },
  {
    "text": "number one priority was that our customers and our customers customers continued to have consistent behavior",
    "start": "1690510",
    "end": "1696450"
  },
  {
    "text": "from a spec via as we refactor it in the cloud secondly we wanted to make sure we",
    "start": "1696450",
    "end": "1703440"
  },
  {
    "text": "were continuing to use managed services and serverless technologies where it made sense so that we weren't bogged",
    "start": "1703440",
    "end": "1709650"
  },
  {
    "text": "down with deployment tasks and we could focus on accelerating our transformation",
    "start": "1709650",
    "end": "1715050"
  },
  {
    "text": "and innovating as well and lastly we wanted to build an API for two reasons",
    "start": "1715050",
    "end": "1720420"
  },
  {
    "text": "one was so that our customers could control and program a spec via to better",
    "start": "1720420",
    "end": "1725700"
  },
  {
    "text": "integrate with their business processes but also to provide an abstraction layer during this transformation process",
    "start": "1725700",
    "end": "1732210"
  },
  {
    "text": "to protect the clients against any refactoring that was going on as we",
    "start": "1732210",
    "end": "1740370"
  },
  {
    "start": "1739000",
    "end": "1739000"
  },
  {
    "text": "transform the first set of components we realized there was a pattern emerging and we call that the migration pattern",
    "start": "1740370",
    "end": "1745850"
  },
  {
    "text": "this slide illustrates the phases of the migration pattern because typically our transformations were taking multiple",
    "start": "1745850",
    "end": "1752340"
  },
  {
    "text": "development cycles here we have it the example is a voicemail service that we completed our architecture effort on",
    "start": "1752340",
    "end": "1759150"
  },
  {
    "text": "earlier this year it's a very basic service it does what you think you can retrieve your voicemails you can play",
    "start": "1759150",
    "end": "1765420"
  },
  {
    "text": "back your voicemails you can delete them you can forward them etc and in the beginning it only communicated with",
    "start": "1765420",
    "end": "1771090"
  },
  {
    "text": "internal clients and it then communicated with an RDS instance the",
    "start": "1771090",
    "end": "1776670"
  },
  {
    "text": "first phase of the migration pattern was to build a new API and again this allowed external clients to now",
    "start": "1776670",
    "end": "1782730"
  },
  {
    "text": "communicate with that original voicemail web service it also allowed us to introduce the API gateway and the lambda",
    "start": "1782730",
    "end": "1789450"
  },
  {
    "text": "function in front of that web service the lambdas function here called the redirect lambda was basically to",
    "start": "1789450",
    "end": "1795750"
  },
  {
    "text": "translate from the new API to the old API and at this time the internal clients were still communicating with",
    "start": "1795750",
    "end": "1801960"
  },
  {
    "text": "that original web service next we introduced a micro service which does",
    "start": "1801960",
    "end": "1807540"
  },
  {
    "text": "everything that the original voicemail service did except for that it can scale and is multi-tenant and also",
    "start": "1807540",
    "end": "1814050"
  },
  {
    "text": "communicates on the new API at this time we could remove that redirect lambda",
    "start": "1814050",
    "end": "1820020"
  },
  {
    "text": "from the architecture but the internal clients are still communicating with the voicemail the original voicemail web",
    "start": "1820020",
    "end": "1826170"
  },
  {
    "text": "service at this time and so we have the old component and the new component both running in the architecture and we call this the side",
    "start": "1826170",
    "end": "1832830"
  },
  {
    "text": "by side stage of the migration the last phase was to take the internal clients",
    "start": "1832830",
    "end": "1839190"
  },
  {
    "text": "and have them communicate on the new API this allowed us to remove the voicemail",
    "start": "1839190",
    "end": "1844470"
  },
  {
    "text": "web service and complete the migration now Tom's going to come in and talk",
    "start": "1844470",
    "end": "1850560"
  },
  {
    "text": "about how we did the track the chat SMS service transformation using these concepts Thank You Rachel",
    "start": "1850560",
    "end": "1860220"
  },
  {
    "text": "this is the latest migration process that we did have and we'll look at this legacy service",
    "start": "1860220",
    "end": "1866100"
  },
  {
    "start": "1866000",
    "end": "1866000"
  },
  {
    "text": "that we had this diagram shows the chat and SMS legacy service that gives",
    "start": "1866100",
    "end": "1873809"
  },
  {
    "text": "customers non-voice media channels like chat and SMS that they can provide to",
    "start": "1873809",
    "end": "1879120"
  },
  {
    "text": "their customers and this is a single tenant on-premise solution that supports",
    "start": "1879120",
    "end": "1884280"
  },
  {
    "text": "the click to chat buttons that you'd find on many customer websites when a chat or SMS message arrives a session is",
    "start": "1884280",
    "end": "1890910"
  },
  {
    "text": "created stored in memory and the message is forwarded on to the self-service",
    "start": "1890910",
    "end": "1897780"
  },
  {
    "text": "component or to an agent in the contact center we also support a che for this",
    "start": "1897780",
    "end": "1904169"
  },
  {
    "text": "solution and we do that with active active and active stand by models and we",
    "start": "1904169",
    "end": "1909990"
  },
  {
    "text": "have a number of strategies to deal with failures to make sure that those chat messages get through when they need to",
    "start": "1909990",
    "end": "1915830"
  },
  {
    "text": "but what this architecture is it's not scalable it's a it's a single tenant",
    "start": "1915830",
    "end": "1921110"
  },
  {
    "text": "solution there's a fixed hardware profile that supports a maximum number of chat and SMS sessions the resources",
    "start": "1921110",
    "end": "1930870"
  },
  {
    "text": "for this solution sit in a data center 24/7 365 waiting to service the maximum",
    "start": "1930870",
    "end": "1937169"
  },
  {
    "text": "number of simultaneous sessions much of the time those resources sit idle or",
    "start": "1937169",
    "end": "1944210"
  },
  {
    "text": "lightly used really costing more money than they're making this legacy",
    "start": "1944210",
    "end": "1951809"
  },
  {
    "text": "architecture also requires a number of people in order to manage the hardware the software and the related updates",
    "start": "1951809",
    "end": "1961070"
  },
  {
    "text": "enter our new SAS architecture our omni-channel messaging service this is",
    "start": "1961250",
    "end": "1967080"
  },
  {
    "text": "the new messaging architecture that we deploy in AWS that leverages serverless",
    "start": "1967080",
    "end": "1972780"
  },
  {
    "text": "and managed services we call it the omni-channel messaging service because",
    "start": "1972780",
    "end": "1978030"
  },
  {
    "text": "it delivers the same legacy web chat and SMS messaging framework of messaging but",
    "start": "1978030",
    "end": "1985140"
  },
  {
    "text": "it also introduces new messaging frameworks like facebook chat slack and",
    "start": "1985140",
    "end": "1990150"
  },
  {
    "text": "and many others all external communication for this system takes",
    "start": "1990150",
    "end": "1995850"
  },
  {
    "text": "place through API gateway including the omni channel messaging it allows aspect",
    "start": "1995850",
    "end": "2002149"
  },
  {
    "text": "to scale throttle secured and monitor",
    "start": "2002149",
    "end": "2007549"
  },
  {
    "text": "our api's and one we need when we need",
    "start": "2007549",
    "end": "2016519"
  },
  {
    "text": "to deliver the unsolicited messages if we go back up into the upper left",
    "start": "2016519",
    "end": "2022969"
  },
  {
    "text": "quadrant there we have the web chat implementation and that is a little",
    "start": "2022969",
    "end": "2029239"
  },
  {
    "text": "different than the other messaging frameworks because we have to deliver unsolicited messages to the",
    "start": "2029239",
    "end": "2035499"
  },
  {
    "text": "browser-based web clients and in the legacy system we used to use WebSockets to deliver those messages but WebSockets",
    "start": "2035499",
    "end": "2043849"
  },
  {
    "text": "are not available in API gateway so we had to develop our own long polling",
    "start": "2043849",
    "end": "2049309"
  },
  {
    "text": "solution similar to what's available in Amazon's sqs and this is something rachel's going to talk about in more",
    "start": "2049309",
    "end": "2055460"
  },
  {
    "text": "detail so here's an example of an SMS message flowing in through the system",
    "start": "2055460",
    "end": "2062419"
  },
  {
    "text": "and being delivered to self-service on the other end the first thing that it",
    "start": "2062419",
    "end": "2069138"
  },
  {
    "text": "reaches is Amazon's API gateway which invokes our first lambda that validates",
    "start": "2069139",
    "end": "2075289"
  },
  {
    "text": "and transforms the SMS message and places it on a Kinesis data stream the",
    "start": "2075289",
    "end": "2081919"
  },
  {
    "text": "second lambda is the heart of our messaging system it's the messaging manager and it consumes the Kinesis",
    "start": "2081919",
    "end": "2088520"
  },
  {
    "text": "events it will create and manage a session for that customer interaction it",
    "start": "2088520",
    "end": "2094158"
  },
  {
    "text": "will record and maintain a transact a transcript of all the messages sent back",
    "start": "2094159",
    "end": "2100579"
  },
  {
    "text": "and forth and then it'll route events and in this case it routes the events to self-service",
    "start": "2100579",
    "end": "2107980"
  },
  {
    "start": "2109000",
    "end": "2109000"
  },
  {
    "text": "self-service receives the message and determines how to handle the customer",
    "start": "2110710",
    "end": "2116330"
  },
  {
    "text": "interaction an example is the Weinbach that rachel talked about before that makes beverage suggestions based on the",
    "start": "2116330",
    "end": "2123800"
  },
  {
    "text": "meal that was described in previous messages and sometimes the right",
    "start": "2123800",
    "end": "2128990"
  },
  {
    "text": "response for the customer is to offer to transfer them to an agent in the contact center which it can do so once it finds",
    "start": "2128990",
    "end": "2135980"
  },
  {
    "text": "the response that it wants to send back the message takes a similar path back to",
    "start": "2135980",
    "end": "2141530"
  },
  {
    "text": "the mobile device now we've looked at a",
    "start": "2141530",
    "end": "2147860"
  },
  {
    "text": "two different lambda functions and we they transform and route events we just",
    "start": "2147860",
    "end": "2155510"
  },
  {
    "text": "as Nahar said we use the Amazon lambda best practices in their documentation is",
    "start": "2155510",
    "end": "2161330"
  },
  {
    "text": "kind of a checklist to make sure that we're writing lambda functions that there are the most efficient that have",
    "start": "2161330",
    "end": "2167330"
  },
  {
    "text": "the shortest startup time and and don't have any delays so we can get the",
    "start": "2167330",
    "end": "2172610"
  },
  {
    "text": "fastest fastest performance out of these our third lambda function the last one",
    "start": "2172610",
    "end": "2180440"
  },
  {
    "text": "that we're going to look at is the transcript lambda and that's responsible for wrapping up a customer interaction",
    "start": "2180440",
    "end": "2188030"
  },
  {
    "text": "and saving the transcript and other information to s3 and then it sends a message to our quality management",
    "start": "2188030",
    "end": "2194200"
  },
  {
    "text": "component which then where the interaction can be evaluated and scored",
    "start": "2194200",
    "end": "2201670"
  },
  {
    "text": "now we heavily use ElastiCache Redis for storing sessions for storing other",
    "start": "2201670",
    "end": "2209780"
  },
  {
    "text": "information and our web chat clients also get the our web chat clients also",
    "start": "2209780",
    "end": "2216500"
  },
  {
    "text": "get Redis queues that are used for long polling we deploy a ElastiCache Redis",
    "start": "2216500",
    "end": "2226010"
  },
  {
    "text": "cluster with cluster mode enabled we have at least three shards in the",
    "start": "2226010",
    "end": "2231950"
  },
  {
    "text": "cluster and each shard has three replicas that are distributed across availability zones and we turn on",
    "start": "2231950",
    "end": "2238580"
  },
  {
    "text": "automatic failover as well Kinesis data streams another manager",
    "start": "2238580",
    "end": "2244520"
  },
  {
    "text": "that we use heavily we like that for it's guaranteed message ordering for its durability and scalability we also use",
    "start": "2244520",
    "end": "2251870"
  },
  {
    "text": "fire hose so we can persist events to s3 for auditing and for playback in some",
    "start": "2251870",
    "end": "2257900"
  },
  {
    "text": "cases and for web chat clients that are",
    "start": "2257900",
    "end": "2264470"
  },
  {
    "text": "for the web chat clients that are supporting long polling we tried using",
    "start": "2264470",
    "end": "2270080"
  },
  {
    "text": "lambdas at one point and found that wasn't the most efficient so we we",
    "start": "2270080",
    "end": "2275930"
  },
  {
    "text": "pivoted on that and developed a new service that's a Java based service",
    "start": "2275930",
    "end": "2281150"
  },
  {
    "text": "that's hosted in kubernetes that's able to scale up and meet the long polling",
    "start": "2281150",
    "end": "2286310"
  },
  {
    "text": "needs much better so some of the key",
    "start": "2286310",
    "end": "2291770"
  },
  {
    "text": "wins that we've had with the scalable cloud architecture these are some of",
    "start": "2291770",
    "end": "2297230"
  },
  {
    "text": "them and we've been able to support a lot more customers for a lower cost and",
    "start": "2297230",
    "end": "2302510"
  },
  {
    "text": "with a reduced operations responsibility this is due to embracing the the",
    "start": "2302510",
    "end": "2309680"
  },
  {
    "text": "different managed services such as API gateway lambdas Kinesis data streams and",
    "start": "2309680",
    "end": "2317950"
  },
  {
    "text": "ElastiCache Redis now I'll turn it over to Rachel and she'll talk about lessons",
    "start": "2317950",
    "end": "2323720"
  },
  {
    "text": "learned with lambda and long polling",
    "start": "2323720",
    "end": "2327280"
  },
  {
    "text": "[Applause] thanks Tom that's a lot of ELLs so I am going to",
    "start": "2329640",
    "end": "2338140"
  },
  {
    "text": "talk about some things we learned during the transformation process but only focusing on a small part of the",
    "start": "2338140",
    "end": "2343880"
  },
  {
    "text": "architecture because it's quite large as you saw specifically I'm going to talk about the part of the architecture where",
    "start": "2343880",
    "end": "2350030"
  },
  {
    "text": "the web chat clients retrieve messages from the message queue and this is an interesting part of the architecture",
    "start": "2350030",
    "end": "2356060"
  },
  {
    "text": "because we iterated through a number of designs over a number of development cycles now the first design we",
    "start": "2356060",
    "end": "2364970"
  },
  {
    "text": "considered was to use sqs FIFO to hold the messages for those that are familiar",
    "start": "2364970",
    "end": "2370120"
  },
  {
    "text": "sqs is a messaging service but the FIFO part guaranteed message order and this",
    "start": "2370120",
    "end": "2376430"
  },
  {
    "text": "is something we required for the design now sqs also supports long polling",
    "start": "2376430",
    "end": "2383060"
  },
  {
    "text": "natively so we thought well be simplest to have the web chat clients communicate directly with SQS we soon found out",
    "start": "2383060",
    "end": "2391099"
  },
  {
    "text": "though that it was really hard to figure out how to authorize the request from the web chat clients in a consistent",
    "start": "2391099",
    "end": "2398150"
  },
  {
    "text": "manner with the way we authorize requests and the rest of the system also we didn't have a lot of control over the",
    "start": "2398150",
    "end": "2405170"
  },
  {
    "text": "rate of requests to the web chat client so we quickly moved on from this design",
    "start": "2405170",
    "end": "2411349"
  },
  {
    "text": "and actually didn't take it into production the next design involved",
    "start": "2411349",
    "end": "2417410"
  },
  {
    "text": "adding an API endpoint you can see it here slash streaming slash events for the web chat client to use and now we",
    "start": "2417410",
    "end": "2424609"
  },
  {
    "text": "have the API gateway and a lambda function in front of the sqs service and the lambda is there because you can't",
    "start": "2424609",
    "end": "2431720"
  },
  {
    "text": "send requests for long polling directly from API gateway to sqs and now we had",
    "start": "2431720",
    "end": "2439280"
  },
  {
    "text": "authorization and a throttling mechanism because those are native features of the API gateway and we really like this",
    "start": "2439280",
    "end": "2446930"
  },
  {
    "text": "design however we went into a region where we",
    "start": "2446930",
    "end": "2452420"
  },
  {
    "text": "found out that sqs FIFO was not available so we had to move on from this design the next design involved",
    "start": "2452420",
    "end": "2460880"
  },
  {
    "start": "2459000",
    "end": "2459000"
  },
  {
    "text": "replacing sqs FIFO with Redis queues and for those that are familiar Redis is not",
    "start": "2460880",
    "end": "2467839"
  },
  {
    "text": "just about caching you can also build message queues and those messages have",
    "start": "2467839",
    "end": "2473119"
  },
  {
    "text": "guaranteed message order so again a good fit for this design the thing about",
    "start": "2473119",
    "end": "2478640"
  },
  {
    "text": "Redis though is that it has to be deployed in a V PC and this added a new dynamic to our design specifically it",
    "start": "2478640",
    "end": "2486680"
  },
  {
    "text": "meant that the lambda now had to interact with the V PC and therefore we needed to have subnets and IP ranges for",
    "start": "2486680",
    "end": "2493640"
  },
  {
    "text": "the lambda invocations to use now the nature of long polling is such that the",
    "start": "2493640",
    "end": "2500060"
  },
  {
    "text": "lambda and individual invocation it could take many seconds to come back especially if there were no messages in",
    "start": "2500060",
    "end": "2506119"
  },
  {
    "text": "the queue and the long polling times out and in the worst case",
    "start": "2506119",
    "end": "2511500"
  },
  {
    "text": "you have hundreds if not thousands of web chat clients long polling you may",
    "start": "2511500",
    "end": "2517590"
  },
  {
    "text": "have hundreds if not thousands of lambda invocations all waiting for messages and",
    "start": "2517590",
    "end": "2523590"
  },
  {
    "text": "running many seconds and so you need lots of IP addresses to support that at",
    "start": "2523590",
    "end": "2528900"
  },
  {
    "text": "the time we didn't have the ability to dynamically scale our subnets up and down so we're really forced to deploy",
    "start": "2528900",
    "end": "2536580"
  },
  {
    "text": "for the worst case that we could think of compounding matters was that in the",
    "start": "2536580",
    "end": "2542610"
  },
  {
    "text": "early load testing of this design we ran up against the AWS account limits for",
    "start": "2542610",
    "end": "2548340"
  },
  {
    "text": "the maximum number of simultaneously running lambda invocations and while it",
    "start": "2548340",
    "end": "2555780"
  },
  {
    "text": "was easy to ask Amazon to raise those limits we realized that this design had a number of weaknesses and that really",
    "start": "2555780",
    "end": "2562350"
  },
  {
    "text": "long polling is not a good use case for lambdas lambdas should run very short",
    "start": "2562350",
    "end": "2568860"
  },
  {
    "text": "periods of time respond in sub-second timeframes to really be most effective",
    "start": "2568860",
    "end": "2574190"
  },
  {
    "text": "so we moved on from this design we were",
    "start": "2574190",
    "end": "2579720"
  },
  {
    "start": "2578000",
    "end": "2578000"
  },
  {
    "text": "at right now is that we replaced those lambda functions with long-running web services and those web services run in",
    "start": "2579720",
    "end": "2586800"
  },
  {
    "text": "containers and the containers are scaled up and down dynamically using an orchestration service specifically",
    "start": "2586800",
    "end": "2592800"
  },
  {
    "text": "kubernetes now we've freed ourselves from worrying about the IP addresses",
    "start": "2592800",
    "end": "2598800"
  },
  {
    "text": "being available and we also don't have the account limits for the lambda invocations to worry about and even",
    "start": "2598800",
    "end": "2607680"
  },
  {
    "text": "though we did iterate through a number of designs before we settled on the",
    "start": "2607680",
    "end": "2612750"
  },
  {
    "text": "technologies that best suited our needs we had the API the streaming events API",
    "start": "2612750",
    "end": "2621630"
  },
  {
    "text": "endpoint to help us to protect our clients during this time so the system",
    "start": "2621630",
    "end": "2627030"
  },
  {
    "text": "behaved just as it always did even though we were refactoring the design and it was actually pretty easy to move",
    "start": "2627030",
    "end": "2634080"
  },
  {
    "text": "from one design to the other because it mostly involved replacing one managed service for another now I'm going to",
    "start": "2634080",
    "end": "2642420"
  },
  {
    "text": "hand it back over to Tom and he's going to give you some final takeaways so we've",
    "start": "2642420",
    "end": "2653010"
  },
  {
    "text": "worked hard with our designs in our development processes to to transform",
    "start": "2653010",
    "end": "2658619"
  },
  {
    "text": "the product incrementally without any abrupt monumental changes api's shield",
    "start": "2658619",
    "end": "2666299"
  },
  {
    "text": "our customers from the internal transformations in anything going on",
    "start": "2666299",
    "end": "2671700"
  },
  {
    "text": "with our products and we try to embrace agility when something doesn't work how",
    "start": "2671700",
    "end": "2677369"
  },
  {
    "text": "can we change it if new services are introduced by Amazon or the industry or",
    "start": "2677369",
    "end": "2683220"
  },
  {
    "text": "the open source community how can we take advantage of those just last week",
    "start": "2683220",
    "end": "2689299"
  },
  {
    "text": "AWS Lambda announced that they support the new enhanced fan-out with HTTP 2 for",
    "start": "2689299",
    "end": "2696180"
  },
  {
    "text": "Kinesis data streams that's something that we're going to look at carefully and see how we can include into our",
    "start": "2696180",
    "end": "2701970"
  },
  {
    "text": "product and who knows what other features and services Amazon may announced this week that will benefit us",
    "start": "2701970",
    "end": "2708690"
  },
  {
    "text": "and lastly we're fortunate to have Enterprise Support and the experts that",
    "start": "2708690",
    "end": "2714630"
  },
  {
    "text": "that comes with and we thank the team for helping us they helped us with a number of different things but the big",
    "start": "2714630",
    "end": "2721200"
  },
  {
    "text": "thing is the expertise when they can't answer the questions they're quick to set us up with subject matter experts",
    "start": "2721200",
    "end": "2728940"
  },
  {
    "text": "throughout AWS they can help us with our direction thank you very much I think I",
    "start": "2728940",
    "end": "2736680"
  },
  {
    "text": "have to tell you contractually that I can't entice you with anything but that",
    "start": "2736680",
    "end": "2742049"
  },
  {
    "text": "please fill out your surveys and last year I think you if you filled out",
    "start": "2742049",
    "end": "2747240"
  },
  {
    "text": "enough of them you were able to pick up more swag so maybe that's the reason to do that so thank you from aspect and",
    "start": "2747240",
    "end": "2753240"
  },
  {
    "text": "vomit [Applause]",
    "start": "2753240",
    "end": "2758619"
  }
]