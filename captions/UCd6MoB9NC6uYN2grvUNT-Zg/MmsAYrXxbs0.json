[
  {
    "start": "0",
    "end": "117000"
  },
  {
    "text": "and again welcome to today's webcast best practices in architecting for the cloud",
    "start": "480",
    "end": "6080"
  },
  {
    "text": "our presenter today is jeff barr senior evangelist at amazon web services",
    "start": "6080",
    "end": "11120"
  },
  {
    "text": "jeff has been with amazon for 11 years so jeff you have the floor",
    "start": "11120",
    "end": "16960"
  },
  {
    "text": "all right well thank you all for coming good morning good afternoon or good evening wherever you happen to be",
    "start": "16960",
    "end": "23279"
  },
  {
    "text": "and welcome to the webinar uh in the time we got together today i'd like to give you some guidance and some advice",
    "start": "23279",
    "end": "28800"
  },
  {
    "text": "that will help you to build some powerful scalable and highly resilient cloud applications",
    "start": "28800",
    "end": "34559"
  },
  {
    "text": "i would like to let you know i really appreciate the time you've set aside for your day in order to attend i really hope you'll find this webinar",
    "start": "34559",
    "end": "40239"
  },
  {
    "text": "to be of value to you as you heard in the introduction please enter your questions and your comments",
    "start": "40239",
    "end": "46160"
  },
  {
    "text": "as we go i'm going to be monitoring those on my screen as i present and then i'll do my best to",
    "start": "46160",
    "end": "51600"
  },
  {
    "text": "address some of them as i go and the rest i'll take care of at the end as time permits",
    "start": "51600",
    "end": "58079"
  },
  {
    "text": "i'm going to assume that you have some basic knowledge of aws but i will provide some brief intro to",
    "start": "58079",
    "end": "63359"
  },
  {
    "text": "some of the services as i go if there are some things that i mentioned that you don't recognize",
    "start": "63359",
    "end": "69600"
  },
  {
    "text": "please do feel free to visit aws",
    "start": "69600",
    "end": "73840"
  },
  {
    "text": "best.amazon.com for more information",
    "start": "79880",
    "end": "87840"
  },
  {
    "text": "so we're going to talk today about a number of different cloud best practices and a lot of the",
    "start": "90720",
    "end": "96079"
  },
  {
    "text": "information here comes from a white paper that was originally written by one of my colleagues by the name of janesvaria",
    "start": "96079",
    "end": "101840"
  },
  {
    "text": "this white paper is available on our website you can go to bit.ly aws dash",
    "start": "101840",
    "end": "108880"
  },
  {
    "text": "best dash practices to download the latest version of this white paper",
    "start": "108880",
    "end": "114000"
  },
  {
    "text": "this is extremely detailed white paper it's about 23 pages long there's quite a bit more information on",
    "start": "114000",
    "end": "119600"
  },
  {
    "start": "117025",
    "end": "117025"
  },
  {
    "text": "there that i can cover in the space of an hour so i definitely would",
    "start": "119600",
    "end": "124640"
  },
  {
    "text": "advise you to take a look at that after the webinar in order to go in even more depth into the things that",
    "start": "124640",
    "end": "130239"
  },
  {
    "text": "i've talked about today",
    "start": "130239",
    "end": "133280"
  },
  {
    "text": "so let's talk about to get started why do cloud architects actually love the cloud what are the interesting",
    "start": "136400",
    "end": "142160"
  },
  {
    "text": "attributes and what are the reasons that architects have been flocking to the cloud and looking at and say this is this is interesting this is cool this",
    "start": "142160",
    "end": "148640"
  },
  {
    "text": "can help me to do my job better faster and less expensively",
    "start": "148640",
    "end": "154480"
  },
  {
    "text": "the first concept that comes up is the idea of abstract resources so with abstract resources you think",
    "start": "154480",
    "end": "160879"
  },
  {
    "text": "more in terms of virtualized entities such as instances instead of servers and volumes instead of hard drives",
    "start": "160879",
    "end": "168400"
  },
  {
    "text": "unlike the typical it environment of the past where you you pretty much had a fairly small",
    "start": "168400",
    "end": "173760"
  },
  {
    "start": "170025",
    "end": "170025"
  },
  {
    "text": "selection of different sizes and shapes and performance points and storage levels",
    "start": "173760",
    "end": "178879"
  },
  {
    "text": "of the different components you have a wide variety of different instance types and performance levels",
    "start": "178879",
    "end": "184319"
  },
  {
    "text": "available to you in the cloud so one one really interesting principle to think in mind is that you can actually shape your",
    "start": "184319",
    "end": "191120"
  },
  {
    "text": "hardware to fit your application having to force fit your application to fit the hardware you can pick and choose exactly what you",
    "start": "191120",
    "end": "197840"
  },
  {
    "text": "need and when you need it so you can effectively late bind your hardware to your application",
    "start": "197840",
    "end": "204319"
  },
  {
    "text": "choosing the most effective hardware for any particular release of your application",
    "start": "204319",
    "end": "209920"
  },
  {
    "text": "ombre demand provisioning this means you're going to be able to ask for exactly the resources that you need",
    "start": "210799",
    "end": "216159"
  },
  {
    "text": "exactly when you need them you'll use them for as long as short of a time as you need them whether that's",
    "start": "216159",
    "end": "221920"
  },
  {
    "text": "effectively in perpetuity you allocate them and use them for the entire lifetime of your application or maybe it's in",
    "start": "221920",
    "end": "228080"
  },
  {
    "text": "terms of minutes or hours you need transient resources maybe you need some extra disk volumes to do some kind of data processing or a big",
    "start": "228080",
    "end": "234879"
  },
  {
    "text": "sorting job you can actually allocate those volumes on as needed basis attach them to your instance do that",
    "start": "234879",
    "end": "241280"
  },
  {
    "text": "that sorting when you're finished copy off the data release the volumes so this this idea of actually thinking",
    "start": "241280",
    "end": "248159"
  },
  {
    "text": "dynamically and thinking not in terms of let me get all the resources once and and hoard them for the lifetime of my of",
    "start": "248159",
    "end": "255360"
  },
  {
    "text": "my project you want to get yourself to a more flexible mindset and think in terms of",
    "start": "255360",
    "end": "260560"
  },
  {
    "text": "how dynamic can make my app can i simply allocate the resources use them when i need them release them",
    "start": "260560",
    "end": "266240"
  },
  {
    "text": "back when i'm finished",
    "start": "266240",
    "end": "269840"
  },
  {
    "text": "so a really good uh basically the consequence of both the abstract resources and the on-demand provisioning",
    "start": "271520",
    "end": "278240"
  },
  {
    "text": "is you put those two together you get this ability to scale and minutes so you can think about scaling your",
    "start": "278240",
    "end": "284400"
  },
  {
    "text": "application out to to add more resources or scale in to take those resources away",
    "start": "284400",
    "end": "290479"
  },
  {
    "text": "as your needs change you might be doing this in change in response to some changes",
    "start": "290479",
    "end": "296560"
  },
  {
    "text": "into load or to traffic or maybe you do different types and amounts of processing at different times",
    "start": "296560",
    "end": "302639"
  },
  {
    "text": "maybe you have end-of-day processing end-of-week processing end-of-month maybe you have situations",
    "start": "302639",
    "end": "308880"
  },
  {
    "text": "where your traffic grows dramatically in response to some external event that's either a scheduled",
    "start": "308880",
    "end": "314560"
  },
  {
    "text": "event you know that it happens or it might be just some kind of um interesting event happening somewhere around the world and suddenly a lot of",
    "start": "314560",
    "end": "320800"
  },
  {
    "text": "traffic is driven to your your system or to your website either way the cloud gives you this ability to",
    "start": "320800",
    "end": "327520"
  },
  {
    "text": "scale in minutes and this is really an important thing you need to think about as you're building your application",
    "start": "327520",
    "end": "335520"
  },
  {
    "text": "so with this ability to scale you're certainly not going to pay for an infinite amount of resources when you're only using some finite amount",
    "start": "336560",
    "end": "342960"
  },
  {
    "text": "so you have a pay on consumption based model you start paying for resources at the point where you start allocating and",
    "start": "342960",
    "end": "349360"
  },
  {
    "text": "consuming them and then at the point when you shut them down you are no longer billed for them",
    "start": "349360",
    "end": "354800"
  },
  {
    "text": "so one one thing that comes up when i talk to a lot of uh folks about this and one one neat",
    "start": "354800",
    "end": "360960"
  },
  {
    "text": "consequence of this for you as an architect you now have the ability to control the overall cost effectiveness",
    "start": "360960",
    "end": "366400"
  },
  {
    "text": "of your applications and this turns out to often be a good career and growth opportunity so instead",
    "start": "366400",
    "end": "372000"
  },
  {
    "text": "of simply being the technical master and being able to design awesome systems which is",
    "start": "372000",
    "end": "377120"
  },
  {
    "text": "a great skill to have you can also start thinking about business value and efficiency and you",
    "start": "377120",
    "end": "382400"
  },
  {
    "text": "can start saying the designs i have are actually x percent more efficient than the naive",
    "start": "382400",
    "end": "387440"
  },
  {
    "text": "design and you can actually iterate and improve those designs over time so often as you continue to scale up you",
    "start": "387440",
    "end": "393759"
  },
  {
    "text": "might find that you're actually adding adding economy adding efficiencies maybe you can actually scale up while actually not increasing the the",
    "start": "393759",
    "end": "400960"
  },
  {
    "text": "bottom line cost of the resources that you consume so as an architect think a lot about the the not just the",
    "start": "400960",
    "end": "407600"
  },
  {
    "text": "economic value that you bring to the to your business but think about ways you can actually use the cloud in really interesting and creative ways",
    "start": "407600",
    "end": "414240"
  },
  {
    "text": "to actually optimize your consumption of those resources",
    "start": "414240",
    "end": "419360"
  },
  {
    "text": "now the last attribute and i have to admit this one is really my favorite feature and i i to me this actually defines the",
    "start": "420319",
    "end": "426639"
  },
  {
    "text": "cloud the cloud has been very heavily on access to script infrastructure you can fully automate it",
    "start": "426639",
    "end": "433440"
  },
  {
    "text": "using apis so at the very fundamental level when you approach the cloud at the",
    "start": "433440",
    "end": "439520"
  },
  {
    "text": "effectively at the bottom operations like setting up networks setting up routers allocating ip",
    "start": "439520",
    "end": "446639"
  },
  {
    "text": "addresses launching servers creating disk volumes attaching those volumes to servers and",
    "start": "446639",
    "end": "453919"
  },
  {
    "text": "then at the at the end of your their useful life when you no longer need them detaching them you allocate them",
    "start": "453919",
    "end": "461039"
  },
  {
    "text": "at the basic level of the cloud you can write code to to manage all those things",
    "start": "461039",
    "end": "466400"
  },
  {
    "text": "now you quite often you're going to be using command line tools or visual tools or some sort of automation some sort of",
    "start": "466400",
    "end": "472800"
  },
  {
    "text": "management consoles that are going to build on top of those apis to actually to simplify it",
    "start": "472800",
    "end": "478960"
  },
  {
    "text": "and to further automate it but the things i would like you to take away from this is that at that most fundamental level",
    "start": "478960",
    "end": "484800"
  },
  {
    "text": "you do have the the power to to automate and to script all the different resources i show you",
    "start": "484800",
    "end": "491440"
  },
  {
    "text": "would you actually have a number of different sdks software development kits if you actually do want to tap into the cloud apis",
    "start": "491440",
    "end": "496960"
  },
  {
    "text": "and make direct calls yourself and those are all available to you on our website",
    "start": "496960",
    "end": "502879"
  },
  {
    "text": "let's take a quick look at the various components of the amazon web services now this talk is",
    "start": "505199",
    "end": "510800"
  },
  {
    "text": "not intended to be a detailed introduction to all the different parts of aws so i'm not going to spend",
    "start": "510800",
    "end": "515839"
  },
  {
    "text": "a lot of time here i would refer you to our website if there are specific things that you need to know specific types and kinds of",
    "start": "515839",
    "end": "522399"
  },
  {
    "text": "services at the top level we're going to find your application that you're going to build",
    "start": "522399",
    "end": "527920"
  },
  {
    "text": "using various services pulled from aws",
    "start": "527920",
    "end": "533200"
  },
  {
    "text": "at the base level you're going to rely on our physical infrastructure so the physical infrastructure is spread",
    "start": "533200",
    "end": "539600"
  },
  {
    "text": "out around the world we currently have nine separate locations that we call regions located in",
    "start": "539600",
    "end": "545040"
  },
  {
    "text": "in north america south america europe and three areas around asia pacific",
    "start": "545040",
    "end": "552320"
  },
  {
    "text": "you always choose a particular region to operate in so that means you're going to choose some geographic place around the world you're",
    "start": "552320",
    "end": "558240"
  },
  {
    "text": "going to store your data there you're going to process your data there as well a defining feature and",
    "start": "558240",
    "end": "564000"
  },
  {
    "start": "562025",
    "end": "562025"
  },
  {
    "text": "something really important to keep in mind especially as your security folks start to get into your conversations regarding your use of the cloud",
    "start": "564000",
    "end": "570399"
  },
  {
    "text": "once you choose to process or store in a particular region we're never going to move or copy your",
    "start": "570399",
    "end": "575519"
  },
  {
    "text": "data from region to region you pick a location your information stays there and it's up to you to",
    "start": "575519",
    "end": "582000"
  },
  {
    "text": "to move it from point to point now we do give you tools and apis to do to make that that migration really",
    "start": "582000",
    "end": "588399"
  },
  {
    "text": "really simple but you you need to really be very confident in your understanding of the fact that",
    "start": "588399",
    "end": "593760"
  },
  {
    "text": "that motion of data from location to location that's always something you you have full control and full visibility",
    "start": "593760",
    "end": "600480"
  },
  {
    "text": "into so within the regions we we have a number of physical facilities per",
    "start": "600480",
    "end": "606800"
  },
  {
    "text": "region we call these availability zones each availability zone in a region is",
    "start": "606800",
    "end": "612560"
  },
  {
    "text": "comprised of multiple data centers so in a particular region you might find",
    "start": "612560",
    "end": "618320"
  },
  {
    "text": "anywhere between two and five separate availability zones we sometimes call these azs",
    "start": "618320",
    "end": "623519"
  },
  {
    "text": "for short so each az is and let's let's let's try and take the simplest case",
    "start": "623519",
    "end": "628560"
  },
  {
    "text": "where n a z would be an individual data center each az in a region is going to be",
    "start": "628560",
    "end": "634800"
  },
  {
    "text": "situated such that it has independence from floods and from earthquakes that might",
    "start": "634800",
    "end": "640800"
  },
  {
    "text": "affect other azs in the same region it's going to have power cooling network connectivity",
    "start": "640800",
    "end": "647839"
  },
  {
    "text": "that are going to be independent from a z to a z and the important thing about all this",
    "start": "647839",
    "end": "653279"
  },
  {
    "text": "all this redundancy is that when you start to think about designing an application",
    "start": "653279",
    "end": "658399"
  },
  {
    "text": "you're going to start by saying let me pick a region that's most appropriate for the based on the",
    "start": "658399",
    "end": "663519"
  },
  {
    "text": "locations of my users based on any particular needs i have to be situated in a particular location",
    "start": "663519",
    "end": "668720"
  },
  {
    "text": "around the world and then you're going to start thinking about reliability and fault tolerance so what you're",
    "start": "668720",
    "end": "674480"
  },
  {
    "text": "always going to want to do is you're always going to want to have some processing resources in at least two separate availability",
    "start": "674480",
    "end": "680560"
  },
  {
    "text": "zones in a particular region you do this because we we've designed independence and azs to make sure that",
    "start": "680560",
    "end": "687760"
  },
  {
    "text": "any kind of a of a physical event or a connectivity event that might affect one",
    "start": "687760",
    "end": "693040"
  },
  {
    "text": "a z in a region the odds are it's not going to affect the other azs in the same region so by situating your",
    "start": "693040",
    "end": "699600"
  },
  {
    "text": "processing across multiple azs in the region you add a much height you make an application that's far more fault",
    "start": "699600",
    "end": "705839"
  },
  {
    "start": "701025",
    "end": "701025"
  },
  {
    "text": "tolerant against any az level of failure we also have another kind of",
    "start": "705839",
    "end": "713360"
  },
  {
    "text": "physical infrastructure called an edge location and we currently have 42 of these separate edge locations",
    "start": "713360",
    "end": "720160"
  },
  {
    "text": "the edge locations are used for our edge services and our current edge services are cloud front for content",
    "start": "720639",
    "end": "726240"
  },
  {
    "text": "distribution and route 53 for domain name services",
    "start": "726240",
    "end": "731839"
  },
  {
    "text": "building up from there we have services for compute for storage for networking and for database as i build up this",
    "start": "732560",
    "end": "739360"
  },
  {
    "text": "diagram as you see this ever growing list of services rest assured that no particular",
    "start": "739360",
    "end": "745600"
  },
  {
    "start": "743025",
    "end": "743025"
  },
  {
    "text": "application you build is going to use all these services your job as an architect is to have some",
    "start": "745600",
    "end": "750880"
  },
  {
    "text": "level of understanding of each of the different services and then have a great understanding of",
    "start": "750880",
    "end": "756480"
  },
  {
    "text": "when would you actually choose to use for example ec2 when you need some processing or elastic cache when you need some",
    "start": "756480",
    "end": "762320"
  },
  {
    "text": "caching between your application and your database and so forth it's the very very rare",
    "start": "762320",
    "end": "768160"
  },
  {
    "text": "application that's going to use the majority of these services think of this more as a as a menu where",
    "start": "768160",
    "end": "773360"
  },
  {
    "text": "you're going to pick and choose the the different services that make sense for each of your applications",
    "start": "773360",
    "end": "778880"
  },
  {
    "text": "i always advise new architects and folks that are new to aws don't even try to master the entire set",
    "start": "778880",
    "end": "784639"
  },
  {
    "text": "of services with your first application pick one pick two get that first application up and",
    "start": "784639",
    "end": "790720"
  },
  {
    "text": "running and then as you start to either build your second application or you iterate on the first application",
    "start": "790720",
    "end": "797040"
  },
  {
    "text": "think in terms of of slowly scaling up the the number of services that you use",
    "start": "797040",
    "end": "802079"
  },
  {
    "text": "there's a wide variety of services we add additional ones on a fairly consistent basis",
    "start": "802079",
    "end": "808399"
  },
  {
    "text": "and so that as an architect again have some familiarity understand what they are think about",
    "start": "808399",
    "end": "814320"
  },
  {
    "text": "ways that you would actually put them to use and then dive deep on individual services as your needs",
    "start": "814320",
    "end": "819920"
  },
  {
    "text": "needs needs expand so the first level was the",
    "start": "819920",
    "end": "824959"
  },
  {
    "text": "infrastructure building blocks the second level are a bit higher these are platform level building blocks for",
    "start": "824959",
    "end": "830240"
  },
  {
    "text": "doing things like parallel processing content delivery media processing messaging",
    "start": "830240",
    "end": "835920"
  },
  {
    "text": "and email building from there we have a number of",
    "start": "835920",
    "end": "841760"
  },
  {
    "text": "cross-service features things that are not particular to an individual platform or infrastructure",
    "start": "841760",
    "end": "847360"
  },
  {
    "text": "service but instead these things run across all different services things like the the identity identification and access",
    "start": "847360",
    "end": "855279"
  },
  {
    "text": "management iam where you are able to con construct accounts and set detailed levels of permission",
    "start": "855279",
    "end": "862000"
  },
  {
    "text": "for those uh for those accounts or amazon cloud watch for monitoring where a number of the services report",
    "start": "862000",
    "end": "869199"
  },
  {
    "text": "either either statistics either every minute or every five minutes to cloudwatch you can monitor the health of the",
    "start": "869199",
    "end": "875519"
  },
  {
    "text": "services you can set alarms you can set alerts you can use these to drive auto scaling up or down based on the performance the",
    "start": "875519",
    "end": "883600"
  },
  {
    "text": "health the overall throughput of your service and your system and then a number of different",
    "start": "883600",
    "end": "889199"
  },
  {
    "text": "deployment and automation services the elastic beanstalk opsworks confirmation and simple",
    "start": "889199",
    "end": "896480"
  },
  {
    "text": "workflow at the at the uproars level we have a number of different tools to",
    "start": "896839",
    "end": "902320"
  },
  {
    "text": "let you access your services and to to to build libraries for a number of different",
    "start": "902320",
    "end": "907519"
  },
  {
    "text": "languages the aws management console is your web interface",
    "start": "907519",
    "end": "912639"
  },
  {
    "text": "tools and toolkits for both eclipse and visual studio and then command line interfaces that run both on windows and on linux based",
    "start": "912639",
    "end": "919440"
  },
  {
    "text": "systems",
    "start": "919440",
    "end": "921839"
  },
  {
    "text": "okay now one thing that's really important",
    "start": "925440",
    "end": "931600"
  },
  {
    "text": "when you start thinking about architecture and fault tolerance is to have a bit more understanding of",
    "start": "931600",
    "end": "936720"
  },
  {
    "text": "the the fault tolerance level of the the various building block services some of the services are what",
    "start": "936720",
    "end": "944399"
  },
  {
    "text": "we call men's services so within the the implementation these services",
    "start": "944399",
    "end": "949680"
  },
  {
    "text": "beyond the scenes we have built-in redundancy built-in fault tolerance the services are actively monitoring",
    "start": "949680",
    "end": "956320"
  },
  {
    "text": "themselves detecting faults and fully failing over without you having any real awareness of that happening on",
    "start": "956320",
    "end": "962079"
  },
  {
    "text": "your part so these these tend to be the kind of the mid-level to higher level kinds of services",
    "start": "962079",
    "end": "968880"
  },
  {
    "text": "so the other services the ones on the right these are a little bit closer to the metal",
    "start": "968880",
    "end": "974320"
  },
  {
    "text": "you can absolutely use these to build fully fault tolerant systems but by the nature of these services",
    "start": "974320",
    "end": "979360"
  },
  {
    "start": "978025",
    "end": "978025"
  },
  {
    "text": "there's going to be a little visibility into your application for example when if you're using an ec2 instance you",
    "start": "979360",
    "end": "985040"
  },
  {
    "text": "think of it as a as a virtual server using one of those virtual servers hardware can actually fail if hardware",
    "start": "985040",
    "end": "991040"
  },
  {
    "text": "fails your application has to be able to detect recover and continue",
    "start": "991040",
    "end": "996480"
  },
  {
    "text": "from from those kinds of failures so some services are are inherently fault",
    "start": "996480",
    "end": "1001920"
  },
  {
    "text": "tolerant others are going to take a little bit of work on your part to uh to to be fully fault tolerant so a",
    "start": "1001920",
    "end": "1007279"
  },
  {
    "text": "little bit of architectural work and we'll talk about some of that today",
    "start": "1007279",
    "end": "1012480"
  },
  {
    "start": "1012025",
    "end": "1012025"
  },
  {
    "text": "so let's let's talk about scalability and and what scalability means in practice so",
    "start": "1015040",
    "end": "1021680"
  },
  {
    "text": "so you're gonna if you are going to actually have an application where the amount of resources deployed is going to",
    "start": "1021680",
    "end": "1027199"
  },
  {
    "text": "change you're going to need a scalable architecture to take advantage of the scalable infrastructure that you have",
    "start": "1027199",
    "end": "1032400"
  },
  {
    "text": "available to you so so what do we mean when we talk about a scalable service in",
    "start": "1032400",
    "end": "1037520"
  },
  {
    "text": "a scalable architecture so first we're going to think about what happens when we add resources",
    "start": "1037520",
    "end": "1044720"
  },
  {
    "text": "if a system is truly scalable we're going to add additional resources we're going to get a proportional increase in",
    "start": "1044720",
    "end": "1049919"
  },
  {
    "text": "performance if we're running with one server and we add a second server we would hope under the best case that",
    "start": "1049919",
    "end": "1055919"
  },
  {
    "text": "we're going to actually double our performance we're going to find that a scalable service is operationally efficient but",
    "start": "1055919",
    "end": "1062480"
  },
  {
    "text": "it doesn't have an over overwhelming amount of actual individual personal manual",
    "start": "1062480",
    "end": "1068480"
  },
  {
    "text": "attention needed to keep that that service up and running as it scales we're going to find that",
    "start": "1068480",
    "end": "1074720"
  },
  {
    "text": "scalable services are resilient and we're going to find that actually the ability to horizontally scale meaning that in turn instead of adding",
    "start": "1074720",
    "end": "1081760"
  },
  {
    "text": "using bigger and bigger and bigger machines this ability to to use more and more of them effectively in",
    "start": "1081760",
    "end": "1087840"
  },
  {
    "text": "in parallel you know often in a load balance fashion is going to make us able to be very very",
    "start": "1087840",
    "end": "1093200"
  },
  {
    "text": "resilient because if we have 10 or 50 or 100 servers running if we have a system architected in such",
    "start": "1093200",
    "end": "1099760"
  },
  {
    "text": "a way that if one of those were to fail the other ones can keep on going the the automation that we'll put into place",
    "start": "1099760",
    "end": "1105760"
  },
  {
    "text": "we'll simply detect that take the the failed server out of service and put a replacement",
    "start": "1105760",
    "end": "1111200"
  },
  {
    "text": "in in into operation quite often without you even knowing about it well one of the things you learn as you start to get",
    "start": "1111200",
    "end": "1117280"
  },
  {
    "text": "experience with the cloud and with aws you actually gain a lot of confidence in",
    "start": "1117280",
    "end": "1122400"
  },
  {
    "text": "your service and it's in its resiliency you'll find that you can you can actually instead of",
    "start": "1122400",
    "end": "1128480"
  },
  {
    "text": "kind of being a bit nervous a bit concerned about potential failures you you design the system for failure",
    "start": "1128480",
    "end": "1134160"
  },
  {
    "start": "1129025",
    "end": "1129025"
  },
  {
    "text": "and you actually go in and you you explicitly and purposefully introduce failures into the system to actually",
    "start": "1134160",
    "end": "1140000"
  },
  {
    "text": "measure and to observe its response to different failures we'll also find that there's a there's a",
    "start": "1140000",
    "end": "1146160"
  },
  {
    "text": "measure of of cost effect in this that you'll find that scalable services become more and more cost effective as",
    "start": "1146160",
    "end": "1151919"
  },
  {
    "text": "they grow one interesting factor of this is that because you don't treat your servers on an individual basis you treat them just as",
    "start": "1151919",
    "end": "1158720"
  },
  {
    "text": "basically this undifferentiated array of processing resources we generally find that our most",
    "start": "1158720",
    "end": "1164000"
  },
  {
    "text": "successful customers do not really kind of hand touch and hand tune and hand",
    "start": "1164000",
    "end": "1170080"
  },
  {
    "text": "and log in to each individual server they treat these servers as replaceable",
    "start": "1170080",
    "end": "1175120"
  },
  {
    "text": "resources they don't give them individual attention if a server starts to malfunction",
    "start": "1175120",
    "end": "1180799"
  },
  {
    "text": "they will generally take it offline put in a replacement and and then diagnose at leisure rather than trying to fix",
    "start": "1180799",
    "end": "1186400"
  },
  {
    "text": "running resources so that that'll in in terms of both operational efficiency",
    "start": "1186400",
    "end": "1192799"
  },
  {
    "text": "and the the amount of manpower you need to invest you're going to find that both of these are going to lead to a more cost effective",
    "start": "1192799",
    "end": "1198559"
  },
  {
    "text": "model for you to run",
    "start": "1198559",
    "end": "1201520"
  },
  {
    "text": "let's talk about an important uh these are the the main set of lessons we're going to talk about today the the six",
    "start": "1204960",
    "end": "1210640"
  },
  {
    "text": "principle lessons of cloud architecture designing for failure loose coupling",
    "start": "1210640",
    "end": "1216640"
  },
  {
    "text": "implementation of elasticity use of security use of parallelism and the ability for",
    "start": "1216640",
    "end": "1223200"
  },
  {
    "text": "you to leverage different storage options",
    "start": "1223200",
    "end": "1226880"
  },
  {
    "text": "let's talk about what design for failure means so uh werner vogels the the cto of amazon.com",
    "start": "1228960",
    "end": "1234480"
  },
  {
    "text": "he very famously said a couple years ago he said everything fails all the time so this is not meant to",
    "start": "1234480",
    "end": "1240960"
  },
  {
    "text": "cast aspersions on the on the quality of any particular piece of hardware or software but if you do a time",
    "start": "1240960",
    "end": "1249840"
  },
  {
    "text": "at some point fail if we if we take this as a basic design",
    "start": "1251200",
    "end": "1257039"
  },
  {
    "text": "consideration if we assume that everything is going to fail sooner or later we want to actually think about that as",
    "start": "1257039",
    "end": "1263280"
  },
  {
    "text": "design time and if we design for failure if we say well failure is just simply a part of the normal operation",
    "start": "1263280",
    "end": "1270159"
  },
  {
    "text": "of our system we know that sometimes things are going to break and if we simply say let's let's plan for that from the",
    "start": "1270159",
    "end": "1275600"
  },
  {
    "text": "beginning let's think about it let's make sure that we have no single points of failure in our system",
    "start": "1275600",
    "end": "1281520"
  },
  {
    "text": "and and from there let's do that what we call designing backward from the fact that we want to provide something very",
    "start": "1281520",
    "end": "1287280"
  },
  {
    "text": "robust very highly available to our ultimate user let's work backward from there to the actual underlying physical",
    "start": "1287280",
    "end": "1294000"
  },
  {
    "text": "architecture and implementation what does it actually take to make sure that if a piece of hardware fails",
    "start": "1294000",
    "end": "1300080"
  },
  {
    "text": "if something is removed from operation or if it's replaced if we can actually say let's let's just",
    "start": "1300080",
    "end": "1306159"
  },
  {
    "text": "make sure that we have upper level systems and architectures that paper over any of those those momentary",
    "start": "1306159",
    "end": "1311440"
  },
  {
    "text": "losses detect recover isolate and simply keep on going",
    "start": "1311440",
    "end": "1319840"
  },
  {
    "text": "so let's take a look and see what aws provides to make that easier for you",
    "start": "1320559",
    "end": "1325760"
  },
  {
    "text": "we give you a number of services that are themselves fault tolerant as as we talked about so there's just",
    "start": "1325840",
    "end": "1331360"
  },
  {
    "text": "simply a lot less things you have to worry about when you have things like elastic block",
    "start": "1331360",
    "end": "1336640"
  },
  {
    "text": "storage snapshots so when when you create virtual disk volumes with the ebs service",
    "start": "1336640",
    "end": "1341760"
  },
  {
    "text": "you can in addition to the built-in raid level redundancy of each ebs volume you can very very easily take",
    "start": "1341760",
    "end": "1349360"
  },
  {
    "start": "1342025",
    "end": "1342025"
  },
  {
    "text": "snapshots you can either you can script that and automate it to take regular snapshots on a time basis or you can simply use the",
    "start": "1349360",
    "end": "1355679"
  },
  {
    "text": "apis or the the console and take snapshots at any point that you like so",
    "start": "1355679",
    "end": "1361600"
  },
  {
    "text": "if you have some long-running processing you might choose to take snapshots before and after to capture the state of",
    "start": "1361600",
    "end": "1367200"
  },
  {
    "text": "your application around that the aws auto scaling service",
    "start": "1367200",
    "end": "1372960"
  },
  {
    "text": "the interesting thing about auto scaling is that the the first thing people look at auto scaling for they say well this",
    "start": "1372960",
    "end": "1378400"
  },
  {
    "text": "is this is a great way for me to respond to a changing load and indeed it is the auto scaling is perfect to",
    "start": "1378400",
    "end": "1384559"
  },
  {
    "text": "let you scale up and scale down you can look at any of the different metrics on your system",
    "start": "1384559",
    "end": "1389679"
  },
  {
    "text": "and use that to drive decisions to add processing resources or to take them away that's great but",
    "start": "1389679",
    "end": "1395360"
  },
  {
    "text": "you can also use auto scaling with just a slightly different configuration you can say",
    "start": "1395360",
    "end": "1400640"
  },
  {
    "text": "please make sure that i have at least this number of servers running that are actually working on a",
    "start": "1400640",
    "end": "1406159"
  },
  {
    "text": "particular part of my business so when you create an auto scaling group you can figure in",
    "start": "1406159",
    "end": "1411919"
  },
  {
    "text": "both the minimum and maximum number of servers you'd always like to have running in that group the auto scaling service will take care",
    "start": "1411919",
    "end": "1417919"
  },
  {
    "text": "if you have a group and maybe you configure the group to be 10 servers if a server were to fail",
    "start": "1417919",
    "end": "1424080"
  },
  {
    "text": "the auto scaling will say oh a server's failed i'll launch a new one with the specified configuration and setup",
    "start": "1424080",
    "end": "1429440"
  },
  {
    "text": "information to keep that group at the desired level",
    "start": "1429440",
    "end": "1434559"
  },
  {
    "text": "our database services the relational database service has an option that we strongly recommend",
    "start": "1435760",
    "end": "1441600"
  },
  {
    "text": "you can run the database in two availability zones simultaneously if you select the multi-az option we",
    "start": "1441600",
    "end": "1448960"
  },
  {
    "text": "will launch both a primary and a secondary database for you we'll automatically synchronously copy data from the primary",
    "start": "1448960",
    "end": "1456000"
  },
  {
    "text": "to the secondary will monitor will institute automatic recovery if something happens to the",
    "start": "1456000",
    "end": "1461200"
  },
  {
    "text": "primary or to the secondary we've talked a bit about the fact that you always want to provision your",
    "start": "1461200",
    "end": "1466480"
  },
  {
    "text": "application across multiple availability zones and we give you a number of different tools to actually make it easier and",
    "start": "1466480",
    "end": "1472159"
  },
  {
    "text": "easier to to run across multi-agencies things like the both the auto scaling and the elastic",
    "start": "1472159",
    "end": "1477360"
  },
  {
    "text": "load balancing make it very straightforward for you to have functionality across different azs in the region",
    "start": "1477360",
    "end": "1483039"
  },
  {
    "text": "and to apportion traffic accordingly so design for failure important data",
    "start": "1483039",
    "end": "1488960"
  },
  {
    "text": "point there another really important point and this gets as you as you start to be",
    "start": "1488960",
    "end": "1495440"
  },
  {
    "start": "1493025",
    "end": "1493025"
  },
  {
    "text": "more and more complex in your in your aspirations and your system building you want to make sure that the different",
    "start": "1495440",
    "end": "1500640"
  },
  {
    "text": "parts of your system are connected together as loosely as possible so and generally this means that you're",
    "start": "1500640",
    "end": "1506799"
  },
  {
    "text": "going to have a number of independent components you're going to define those components",
    "start": "1506799",
    "end": "1511840"
  },
  {
    "text": "as as individual black boxes that talk to each other through message queues or through asynchronous defined interfaces of some",
    "start": "1511840",
    "end": "1518159"
  },
  {
    "text": "sort you're going to try to decouple these black boxes from each other as much as possible and you're going to",
    "start": "1518159",
    "end": "1525120"
  },
  {
    "text": "think in terms of the ability to scale individual phases of processing pipelines using clusters of machines",
    "start": "1525120",
    "end": "1534000"
  },
  {
    "text": "one of the the primary architectural models we see we see these multi-phase pipelines",
    "start": "1534000",
    "end": "1540880"
  },
  {
    "text": "now in the the the tightly coupled model you'll have a number of processing stages which we here have labeled as",
    "start": "1540880",
    "end": "1547520"
  },
  {
    "text": "controllers the tightly coupled model means that controller a is going to pass data on to controller b onto",
    "start": "1547520",
    "end": "1553679"
  },
  {
    "text": "controller c in some kind of a synchronous fashion probably by making some some function calls and and the the",
    "start": "1553679",
    "end": "1560320"
  },
  {
    "text": "problem with this model as you get more and more moving parts as you have more stages you have more opportunities for things to go",
    "start": "1560320",
    "end": "1566400"
  },
  {
    "text": "wrong and you'll find that this this system is going to actually run at the speed of the slowest component if",
    "start": "1566400",
    "end": "1572960"
  },
  {
    "text": "one of the controllers gets momentarily behind if it gets stuck for some reason that backlog is going to quickly",
    "start": "1572960",
    "end": "1579360"
  },
  {
    "text": "propagate itself through the entire system so in this in this tightly coupled model a single",
    "start": "1579360",
    "end": "1584960"
  },
  {
    "text": "a single issue a single slowdown is going to result in the entire system",
    "start": "1584960",
    "end": "1590240"
  },
  {
    "text": "getting stuck what we recommend instead is we is to use a cubase model and to",
    "start": "1590240",
    "end": "1595919"
  },
  {
    "text": "implement loose coupling simple q service makes it very very easy",
    "start": "1595919",
    "end": "1603520"
  },
  {
    "text": "for you to actually separate each of the different control steps of your your system with a message",
    "start": "1603520",
    "end": "1610240"
  },
  {
    "text": "queue the message queue means that each of the controllers is instead of having api powered access and",
    "start": "1610240",
    "end": "1618159"
  },
  {
    "text": "having it in turn call apis to the other stages it's going to be a simple stateless process inside the",
    "start": "1618159",
    "end": "1624880"
  },
  {
    "text": "controller that process is going to read a request from a message queue it's going to do whatever that is",
    "start": "1624880",
    "end": "1630960"
  },
  {
    "text": "whether that is to process an account or a transaction transform an image",
    "start": "1630960",
    "end": "1636080"
  },
  {
    "text": "do some kind of whatever is the work unit it's going to do that work once it's",
    "start": "1636080",
    "end": "1641360"
  },
  {
    "text": "done it's it's it's duty it's going to then write the next piece of work to be done to another",
    "start": "1641360",
    "end": "1646880"
  },
  {
    "text": "message queue to be picked up by the next controller in the pipeline this architecture has a",
    "start": "1646880",
    "end": "1652080"
  },
  {
    "text": "number of important benefits and implications one if some of the controllers are are",
    "start": "1652080",
    "end": "1657600"
  },
  {
    "text": "slow or stopped entirely not a big deal at all the the messages will simply accumulate",
    "start": "1657600",
    "end": "1663039"
  },
  {
    "text": "in the message queue at the point when the controller is ready ready and back online",
    "start": "1663039",
    "end": "1668559"
  },
  {
    "text": "it can then start processing the backlog through the message queues in most cases you have the ability to",
    "start": "1668559",
    "end": "1674720"
  },
  {
    "text": "have multiple controllers processing a single message queue so if you find",
    "start": "1674720",
    "end": "1679840"
  },
  {
    "text": "that the controller b for example is a little bit too slow because there's a lot of work to do and it's kind of getting behind you",
    "start": "1679840",
    "end": "1686240"
  },
  {
    "text": "might be able to think about launching multiple copies of controller b each pulling from the same input queue and each writing to",
    "start": "1686240",
    "end": "1693039"
  },
  {
    "text": "the the same output queue in order to work through the backlog so you can even think in terms of auto scaling",
    "start": "1693039",
    "end": "1698480"
  },
  {
    "text": "and thinking each of these controllers a b and c is actually an auto scaled array of controllers that's going to scale",
    "start": "1698480",
    "end": "1704720"
  },
  {
    "text": "up and scale down in response to the backlog or to the queue size",
    "start": "1704720",
    "end": "1711840"
  },
  {
    "text": "all right now elasticity is a fundamental property of the cloud so a couple of things you think about",
    "start": "1715600",
    "end": "1720799"
  },
  {
    "text": "when you think about elasticity don't assume that all of your components are healthy don't assume that they're",
    "start": "1720799",
    "end": "1726399"
  },
  {
    "text": "running it at fixed addresses or locations think about designs that you",
    "start": "1726399",
    "end": "1731440"
  },
  {
    "text": "can build that are resilient to rebooting and relaunching so so for example you want to think about when your instances",
    "start": "1731440",
    "end": "1738080"
  },
  {
    "text": "start up you want to think about that instance starting up having the environment supply it with some configuration",
    "start": "1738080",
    "end": "1744000"
  },
  {
    "text": "and some identity information so when that that instance launches it can consult the",
    "start": "1744000",
    "end": "1749120"
  },
  {
    "text": "environment and it can say what kind of server am i am i a web server am i a app server am i a database",
    "start": "1749120",
    "end": "1755200"
  },
  {
    "text": "server what is my role what is my identity and then can have it configure itself based",
    "start": "1755200",
    "end": "1760799"
  },
  {
    "text": "on that information with aws with it with our ec2",
    "start": "1760799",
    "end": "1766480"
  },
  {
    "text": "service you have the ability to actually do configuration at a number of different times in in the",
    "start": "1766480",
    "end": "1772240"
  },
  {
    "text": "in the lifetime of that instance you can make a fully static configuration where you you pre-bake all of your",
    "start": "1772240",
    "end": "1778080"
  },
  {
    "text": "configuration into a machine image or at the other end of the extrin you can make a fully dynamic configuration",
    "start": "1778080",
    "end": "1784159"
  },
  {
    "text": "where you launch generic images and then configure those totally at at launch time",
    "start": "1784159",
    "end": "1790080"
  },
  {
    "text": "there are some trade-offs in either one as far as what is the level of flexibility i have what is the amount of time from",
    "start": "1790080",
    "end": "1797200"
  },
  {
    "text": "when i say launch to when it's fully installed and fully running but this idea of dynamic configuration",
    "start": "1797200",
    "end": "1802720"
  },
  {
    "text": "is something you want to think about when you are thinking about the right way to architect your application",
    "start": "1802720",
    "end": "1809679"
  },
  {
    "text": "some aws services are going to help you here",
    "start": "1809679",
    "end": "1814158"
  },
  {
    "text": "you're running to use auto scaling and you're going to use auto scaling driven on on metrics so let me talk just for a",
    "start": "1815039",
    "end": "1822559"
  },
  {
    "text": "second about what i mean to use auto scaling on on metrics as i talked about before each different",
    "start": "1822559",
    "end": "1829440"
  },
  {
    "text": "aws service exports various system metrics to our cloud watch monitoring service",
    "start": "1829440",
    "end": "1834799"
  },
  {
    "text": "so for an ec2 instance this is going to be things like the network traffic in network traffic",
    "start": "1834799",
    "end": "1841039"
  },
  {
    "text": "out number of disk reads number of disk rights and cpu load average you can then take those",
    "start": "1841039",
    "end": "1848640"
  },
  {
    "text": "metrics you can set set some rules for the auto scaling and you can create rules that for",
    "start": "1848640",
    "end": "1853840"
  },
  {
    "text": "example might say looking out across all the cpus running in my auto scaling group i'd like to make that group bigger",
    "start": "1853840",
    "end": "1860159"
  },
  {
    "text": "if my load average is 80 or more for five consecutive minutes that would be a",
    "start": "1860159",
    "end": "1865600"
  },
  {
    "text": "scale-up rule so you can say add another server every time my servers are 80 or more busy for a five-minute period",
    "start": "1865600",
    "end": "1873120"
  },
  {
    "text": "you then have a corresponding scale down rule that says if all those servers in the group are 20 or less busy for that same",
    "start": "1873120",
    "end": "1879600"
  },
  {
    "text": "five minute period i'd like to actually remove one of those instances from the autoscaling group and terminate it",
    "start": "1879600",
    "end": "1885679"
  },
  {
    "text": "so that auto scale is going to give you give you that elasticity we have another service called elastic",
    "start": "1885679",
    "end": "1891440"
  },
  {
    "text": "load balancing that works",
    "start": "1891440",
    "end": "1894720"
  },
  {
    "text": "into auto scaling so every time auto scaling adds a new instance to the group it informs a load balancer and it says",
    "start": "1897840",
    "end": "1903840"
  },
  {
    "start": "1903025",
    "end": "1903025"
  },
  {
    "text": "please please start routing traffic to this instance as long as it's healthy",
    "start": "1903840",
    "end": "1909600"
  },
  {
    "text": "you might think in terms of an architecture we actually have multiple load balancers a primary load balancer at the web level",
    "start": "1909600",
    "end": "1914640"
  },
  {
    "text": "and then secondary load balancers in front of of applications and application services to load",
    "start": "1914640",
    "end": "1920559"
  },
  {
    "text": "balance across multiple instance types think about store configuration information in our simple db service or",
    "start": "1920559",
    "end": "1927279"
  },
  {
    "text": "our dynamodb service to bootstrap instance and you also want to think about using configuration management",
    "start": "1927279",
    "end": "1933760"
  },
  {
    "text": "tools there's various open source tools like chef and puppet and ansible are all great tools you can",
    "start": "1933760",
    "end": "1939919"
  },
  {
    "text": "use for configuration management that will help you to launch from generic instances install",
    "start": "1939919",
    "end": "1945519"
  },
  {
    "text": "packages configure set everything up at at launch time if you'd like",
    "start": "1945519",
    "end": "1952159"
  },
  {
    "text": "some other elasticity concerns and issues think about building systems that are resilient to rebooting and relaunching",
    "start": "1955120",
    "end": "1963360"
  },
  {
    "start": "1963025",
    "end": "1963025"
  },
  {
    "text": "you want to think about that it should not be a big deal in your mind it should not really be a big deal in",
    "start": "1963360",
    "end": "1969279"
  },
  {
    "text": "terms of your system architecture if some particular server happens to relaunch and restart",
    "start": "1969279",
    "end": "1974320"
  },
  {
    "text": "that shouldn't be a cause for any kind of concern it shouldn't give you uh a heartache you shouldn't think oh my",
    "start": "1974320",
    "end": "1979760"
  },
  {
    "text": "the server might reboot how horrible you should think at a certain point after you've successfully built a",
    "start": "1979760",
    "end": "1985840"
  },
  {
    "text": "a fault tolerant resilient architecture you should have some level of confidence that says okay if something fails if",
    "start": "1985840",
    "end": "1992000"
  },
  {
    "text": "something breaks no big deal i've been through this test i've tested this i've rebooted it a number of times",
    "start": "1992000",
    "end": "1997600"
  },
  {
    "text": "i know that all the pieces are going to come together very very nicely and it's going to to put itself back together",
    "start": "1997600",
    "end": "2003279"
  },
  {
    "text": "automatically there's actually a service called the chaos monkey i'll talk about in in just a bit that can help you to to add and test for",
    "start": "2003279",
    "end": "2010480"
  },
  {
    "text": "this resilience think about making stateless components which you can put in in the message",
    "start": "2010480",
    "end": "2016240"
  },
  {
    "text": "queues we talked about earlier makes it very easy to run multiple copies in parallel",
    "start": "2016240",
    "end": "2021679"
  },
  {
    "text": "we talked about this idea of taking your application functionality packaging it into a machine image",
    "start": "2021679",
    "end": "2028399"
  },
  {
    "text": "so that you can launch multiple copies as needed and then again decoupling isolating components",
    "start": "2028399",
    "end": "2034080"
  },
  {
    "text": "using the the simple comp q service",
    "start": "2034080",
    "end": "2038080"
  },
  {
    "text": "moving right along so our friends at netflix built this really interesting application called the chaos",
    "start": "2039840",
    "end": "2045120"
  },
  {
    "text": "monkey so the cast monkey and you could use this either in your development stack or your production",
    "start": "2045120",
    "end": "2052560"
  },
  {
    "text": "stack the idea of the ks monkey is that it's going to simulate a fairly high degree",
    "start": "2052560",
    "end": "2057760"
  },
  {
    "text": "of chaos and failures within your running application it's going to shut down instances it's",
    "start": "2057760",
    "end": "2063599"
  },
  {
    "text": "going to perturb network settings it's going to effectively go in and at a configurable rate and with a",
    "start": "2063599",
    "end": "2069118"
  },
  {
    "text": "configurable level of seriousness it's going to actually go ahead and basically break your environment in different ways so this is a way to actively",
    "start": "2069119",
    "end": "2076480"
  },
  {
    "text": "introduce faults and failures into your environment and to to do those at a level that you",
    "start": "2076480",
    "end": "2081679"
  },
  {
    "text": "can see them happening and you can go and run run a chaos monkey",
    "start": "2081679",
    "end": "2087200"
  },
  {
    "text": "see things break make sure that you actually are in a good position to to fix them",
    "start": "2087200",
    "end": "2093118"
  },
  {
    "text": "at first you'll want to run this on your your development your test environments as you gain confidence and i've actually",
    "start": "2093119",
    "end": "2099200"
  },
  {
    "text": "seen people do this they they run it at a at a low kind of a background hum level on their production",
    "start": "2099200",
    "end": "2104720"
  },
  {
    "text": "environments make sure that the production environments are are fully fault tolerant fully resilient as well",
    "start": "2104720",
    "end": "2110480"
  },
  {
    "text": "this is one of those things that gives kind of the traditional it system architect and and administrators they hear about",
    "start": "2110480",
    "end": "2117200"
  },
  {
    "text": "that and say wait i'm breaking my system on purpose that's that's really really scary",
    "start": "2117200",
    "end": "2122720"
  },
  {
    "text": "as we talked about earlier though about the design for failure model this actually turns out to be a great way to build very very resilient",
    "start": "2122720",
    "end": "2129200"
  },
  {
    "text": "applications security is a question that comes up all",
    "start": "2129200",
    "end": "2134800"
  },
  {
    "text": "the time our advice here you don't want to have to add security after the fact",
    "start": "2134800",
    "end": "2140720"
  },
  {
    "text": "if your company is new to the cloud you're going to face a lot of different questions from your peers about hey is the cloud secure",
    "start": "2140720",
    "end": "2148720"
  },
  {
    "text": "how do i how do i actually make it secure you want to think about the security as something you're going to build in at every layer something you",
    "start": "2148720",
    "end": "2155760"
  },
  {
    "text": "build in from the ground up we see the security model as a shared responsibility we're going to do a",
    "start": "2155760",
    "end": "2161920"
  },
  {
    "text": "number of different things for you we're going to see we have a number of different certifications and accreditations for",
    "start": "2161920",
    "end": "2167200"
  },
  {
    "start": "2164025",
    "end": "2164025"
  },
  {
    "text": "aws we have a number of security features in aws we have recommendations we have best practices we're going to",
    "start": "2167200",
    "end": "2174160"
  },
  {
    "text": "that's only that's going to get to a fairly high level but at a certain point we're going to be launching an os you've configured that",
    "start": "2174160",
    "end": "2180720"
  },
  {
    "text": "os is going to be running applications that you've configured so we're going to give you a great secure environment to start with",
    "start": "2180720",
    "end": "2186720"
  },
  {
    "text": "and then the responsibility passes to you as you get to the higher levels of your application",
    "start": "2186720",
    "end": "2192880"
  },
  {
    "text": "as you can see in the left we have we have worked really hard to get a number of different season a's as a security folks",
    "start": "2194880",
    "end": "2202000"
  },
  {
    "text": "call them the certifications and accreditations there that's a subset of the full set that we have available",
    "start": "2202000",
    "end": "2207599"
  },
  {
    "text": "to you on the left if you go to the aws security website which is",
    "start": "2207599",
    "end": "2212839"
  },
  {
    "text": "aws.net security you'll find a lot more detail about the various season a's that we have",
    "start": "2212839",
    "end": "2219280"
  },
  {
    "text": "you'll also find a number of white papers recommendations that'll that will help you to walk through the",
    "start": "2219280",
    "end": "2224320"
  },
  {
    "text": "various security challenges and options you have available to you in aws",
    "start": "2224320",
    "end": "2230640"
  },
  {
    "text": "recommendations that we have we recommend encrypting data both in transit and at rest recommend you be very very",
    "start": "2230640",
    "end": "2237920"
  },
  {
    "text": "careful with aw your aws credentials rotate your keys on a regular basis and",
    "start": "2237920",
    "end": "2244079"
  },
  {
    "text": "make sure that you're that you've actually done a good investigation you have a good understanding of the various security",
    "start": "2244079",
    "end": "2249760"
  },
  {
    "text": "options available to you at the application the os the stack and the image level",
    "start": "2249760",
    "end": "2257838"
  },
  {
    "text": "we give you services like iam the identity and access management that lets you have create individual user accounts",
    "start": "2258880",
    "end": "2265119"
  },
  {
    "text": "which you could use for either logged in users of your aws console or for the applications",
    "start": "2265119",
    "end": "2270880"
  },
  {
    "text": "or you can create im accounts and use those to actually represent individual applications with these accounts you have very very",
    "start": "2270880",
    "end": "2277119"
  },
  {
    "text": "fine-grained control of the exact set of both service apis and service resources that are accessible to",
    "start": "2277119",
    "end": "2283440"
  },
  {
    "text": "a particular account multi-factor authentication the virtual",
    "start": "2283440",
    "end": "2290160"
  },
  {
    "text": "private cloud policies for your storage security groups encrypting file systems",
    "start": "2290160",
    "end": "2295760"
  },
  {
    "text": "are all additional security options that you have",
    "start": "2295760",
    "end": "2300640"
  },
  {
    "start": "2296025",
    "end": "2296025"
  },
  {
    "text": "this diagram just shows you some some of the different points where you might actually choose to exercise security",
    "start": "2303920",
    "end": "2309440"
  },
  {
    "text": "you have you have the concept of security groups and you can control with a security group you have the",
    "start": "2309440",
    "end": "2314720"
  },
  {
    "text": "ability to control both inbound and outbound traffic you can restrict to particular ports",
    "start": "2314720",
    "end": "2320240"
  },
  {
    "text": "protocols ip addresses and even ip address ranges as well using the various security groups and",
    "start": "2320240",
    "end": "2326480"
  },
  {
    "text": "security group features that are available to you for example you might choose to make your web server open",
    "start": "2326480",
    "end": "2332720"
  },
  {
    "text": "to access from anywhere in the world you would then at the interior levels your your caches",
    "start": "2332720",
    "end": "2337920"
  },
  {
    "text": "your databases your application servers you would allow access to those only from within the cloud",
    "start": "2337920",
    "end": "2343119"
  },
  {
    "text": "and only from specific instances that you own and you run and operate from within the cloud",
    "start": "2343119",
    "end": "2348880"
  },
  {
    "text": "so we give you a lot of control a lot of flexibility with the security groups it's then up to you to take those and",
    "start": "2348880",
    "end": "2354160"
  },
  {
    "text": "apply those in a very stringent tightly controlled manner to actually implement your security",
    "start": "2354160",
    "end": "2359280"
  },
  {
    "text": "policies thinking in parallel so we talked a lot",
    "start": "2359280",
    "end": "2365520"
  },
  {
    "text": "about elasticity and scalability so doing things serially and sequentially that's the old way",
    "start": "2365520",
    "end": "2372000"
  },
  {
    "text": "the the parallel model says you're going to use various combinations of multiple processing resources side by side",
    "start": "2372000",
    "end": "2378000"
  },
  {
    "text": "to get the degree of throughput that you need you're going to think about multi-threading you're going to think",
    "start": "2378000",
    "end": "2383680"
  },
  {
    "text": "about concurrency you might think about doing mapreduce jobs using our elastic mapreduce service",
    "start": "2383680",
    "end": "2389839"
  },
  {
    "text": "we talked already about elastic load balancing to scatter load across multiple services and you",
    "start": "2389839",
    "end": "2395599"
  },
  {
    "text": "also want to think in terms of to get parallelism and to also the factors into scalability",
    "start": "2395599",
    "end": "2401200"
  },
  {
    "text": "think about taking a job decomposing it into its simplest form and using those those",
    "start": "2401200",
    "end": "2407680"
  },
  {
    "text": "kind of simple components as the units of scalability and of parallelism",
    "start": "2407680",
    "end": "2413920"
  },
  {
    "text": "a couple different aws features that will help you to get parallel we have the elastic mapreduce which uses",
    "start": "2416319",
    "end": "2423200"
  },
  {
    "start": "2419025",
    "end": "2419025"
  },
  {
    "text": "hadoop a popular open source framework to let you do large scale distributive processing",
    "start": "2423200",
    "end": "2428640"
  },
  {
    "text": "where you might want to use tens hundreds even thousands of systems in parallel",
    "start": "2428640",
    "end": "2434960"
  },
  {
    "text": "we have at the high end of the different ec2 instance types available to you we have a number of different cluster",
    "start": "2434960",
    "end": "2441119"
  },
  {
    "text": "compute machines with high-end intel processors many cores large amounts of network",
    "start": "2441119",
    "end": "2447119"
  },
  {
    "text": "connectivity we have something called the spot market where you can place bids for compute",
    "start": "2447119",
    "end": "2452880"
  },
  {
    "text": "power you have the ability to expand or shrink your your parallel clusters and you put this all together you can",
    "start": "2452880",
    "end": "2459599"
  },
  {
    "text": "create an elastic supercomputer where you can scale up scale down process any amount of data",
    "start": "2459599",
    "end": "2465119"
  },
  {
    "text": "very efficiently and very very cost effectively",
    "start": "2465119",
    "end": "2470720"
  },
  {
    "text": "with aws you get a huge number of different storage options",
    "start": "2477040",
    "end": "2481838"
  },
  {
    "text": "we have amazon s3 for static objects cloudfront for content distribution both simpledb and dynamodb for for nosql",
    "start": "2483040",
    "end": "2491520"
  },
  {
    "text": "style data indexing and query on each ec2 instance you have local",
    "start": "2491520",
    "end": "2497200"
  },
  {
    "text": "local storage you have elastic block storage which is persistent storage virtual disk volumes",
    "start": "2497200",
    "end": "2502720"
  },
  {
    "text": "that you can create and easily snapshot and then we have the relational database service which is an",
    "start": "2502720",
    "end": "2508800"
  },
  {
    "text": "automated managed service that actually lets you makes it very easy to launch",
    "start": "2508800",
    "end": "2514800"
  },
  {
    "text": "both mysql oracle and microsoft windows sql server databases",
    "start": "2514800",
    "end": "2520160"
  },
  {
    "text": "it's a managed service so it's going to give you fault tolerance it's going to be very easy scalability",
    "start": "2520160",
    "end": "2525599"
  },
  {
    "text": "automated updates of the os and the database easy snapshot backups easy recoveries as",
    "start": "2525599",
    "end": "2531440"
  },
  {
    "text": "well and then we have amazon redshift a data warehouse service that lets you create",
    "start": "2531440",
    "end": "2536640"
  },
  {
    "text": "very very large scale data warehouse data warehouses",
    "start": "2536640",
    "end": "2541920"
  },
  {
    "text": "there's a huge number of different options that you have for for storage this this table um i put together gives",
    "start": "2545520",
    "end": "2552240"
  },
  {
    "text": "you a little bit of the set of choices that you have um there's different processing options as",
    "start": "2552240",
    "end": "2558560"
  },
  {
    "text": "far as what store",
    "start": "2558560",
    "end": "2562400"
  },
  {
    "text": "um relational non-relational many many different choices you have available to you here",
    "start": "2563599",
    "end": "2570960"
  },
  {
    "text": "so we talked about designing for failure we talked about loose coupling we talked about elasticity we talked",
    "start": "2574800",
    "end": "2580400"
  },
  {
    "text": "about security we talked about thinking in parallel and we talked in terms of storage options",
    "start": "2580400",
    "end": "2588160"
  },
  {
    "text": "let's go through a couple questions as time permits",
    "start": "2591359",
    "end": "2595680"
  },
  {
    "text": "and let's see what we've got here in terms of questions all right oh my we got a lot of questions i'm not going to be able to get through all these",
    "start": "2596480",
    "end": "2603760"
  },
  {
    "text": "questions let me pick i'm going to pick and choose the the best",
    "start": "2604839",
    "end": "2610000"
  },
  {
    "text": "give me just a second here get my screen adjusted okay so um so let's see there's a question it",
    "start": "2610000",
    "end": "2617040"
  },
  {
    "text": "says must be used amazon cdn or can we use an existing contract with another provider",
    "start": "2617040",
    "end": "2622720"
  },
  {
    "text": "so there is no requirement that you use our cdn aws is a set of different building block",
    "start": "2622720",
    "end": "2628880"
  },
  {
    "text": "services so you can pick and choose the ones that you'd like if you have an existing cdn provider you",
    "start": "2628880",
    "end": "2635359"
  },
  {
    "text": "can certainly use use aws as the origin server behind that cdn i'm sure a number of our",
    "start": "2635359",
    "end": "2642160"
  },
  {
    "text": "customers are doing that as well there's a question about",
    "start": "2642160",
    "end": "2648240"
  },
  {
    "text": "let's see if the requirement is to build a dr environment disaster recovery can you",
    "start": "2648240",
    "end": "2653359"
  },
  {
    "text": "explain the apis to architecture redundancy across multiple regions sure okay so great",
    "start": "2653359",
    "end": "2658640"
  },
  {
    "text": "question so a couple different things come to mind here we have a service called cloud",
    "start": "2658640",
    "end": "2664240"
  },
  {
    "text": "formation cloud formation lets you actually encapsulate your entire application stack",
    "start": "2664240",
    "end": "2669599"
  },
  {
    "text": "all the different aws resources your your servers your databases your message queues your ip addresses and essentially",
    "start": "2669599",
    "end": "2677920"
  },
  {
    "text": "describe that entire application stack in a single text file template once you have",
    "start": "2677920",
    "end": "2683760"
  },
  {
    "text": "that cloud formation template built you can you can instantiate multiple copies of it within a single",
    "start": "2683760",
    "end": "2689520"
  },
  {
    "text": "region or you can move that template from region to region and so let's say you have a system architecture",
    "start": "2689520",
    "end": "2695839"
  },
  {
    "text": "designed and you've actually encapsulated it as a cloud formation template you take",
    "start": "2695839",
    "end": "2701040"
  },
  {
    "text": "that template and for disaster recovery you can simply launch additional copies of that entire",
    "start": "2701040",
    "end": "2707440"
  },
  {
    "text": "stack across different regions you might build the stack in such a way that it's parameterized you might have let's say",
    "start": "2707440",
    "end": "2714480"
  },
  {
    "text": "a small versions for development or test and then a full-scale version for",
    "start": "2714480",
    "end": "2719760"
  },
  {
    "text": "production okay so that's a very easy way for you to get your",
    "start": "2719760",
    "end": "2724800"
  },
  {
    "text": "your architecture moved from region to region you can also think in terms of moving",
    "start": "2724800",
    "end": "2731280"
  },
  {
    "text": "data from region to region we give you commands and apis to let you move things",
    "start": "2731280",
    "end": "2736480"
  },
  {
    "text": "like ebs volume snapshots and machine images from region to region",
    "start": "2736480",
    "end": "2743680"
  },
  {
    "text": "so when you start to think about dr you're going to think about how how quickly how much downtime can i",
    "start": "2745119",
    "end": "2751599"
  },
  {
    "text": "can i tolerate what is my recovery point how how how far back in time do i need to go to",
    "start": "2751599",
    "end": "2757200"
  },
  {
    "text": "recover my data so you have a number of different choices with your database snapshots you can take",
    "start": "2757200",
    "end": "2762400"
  },
  {
    "text": "snapshots of both your redshift snapshots from region to region use",
    "start": "2762400",
    "end": "2769520"
  },
  {
    "text": "those to recover as well",
    "start": "2769520",
    "end": "2775280"
  },
  {
    "text": "all right so there's a question about multi-availability zone configurations so the question is",
    "start": "2775280",
    "end": "2780800"
  },
  {
    "text": "is the best practice to add one server per zone when scaling up and subtract one server per zone when scaling down",
    "start": "2780800",
    "end": "2789280"
  },
  {
    "text": "in general what you want to do is you want to maintain a reasonable balance across the different zones as you scale",
    "start": "2789280",
    "end": "2795440"
  },
  {
    "text": "up and down you you never want to have all your eggs in one basket you don't want to have all the servers in in the same az i believe our auto",
    "start": "2795440",
    "end": "2802880"
  },
  {
    "text": "scaler actually has a built-in policy mechanism where it's going to make sure that it",
    "start": "2802880",
    "end": "2808000"
  },
  {
    "text": "it's going to do its best to keep your your servers balanced across the different zones and let's see",
    "start": "2808000",
    "end": "2818560"
  },
  {
    "text": "let's see there was a question about will the recording be available i do believe the recording will be available and we'll send out an email",
    "start": "2818560",
    "end": "2825440"
  },
  {
    "text": "afterward and let's see question is there a way to do auto scaling based on the number of",
    "start": "2825440",
    "end": "2830960"
  },
  {
    "text": "items in an sqsq yes there is so with sqs it actually",
    "start": "2830960",
    "end": "2836880"
  },
  {
    "text": "does report a metric to cloud launch and so what you would do is you would watch that metric",
    "start": "2836880",
    "end": "2842079"
  },
  {
    "text": "and you'd use that metric to basically say scale up or scale down based on the number of items in the queue so",
    "start": "2842079",
    "end": "2847599"
  },
  {
    "text": "you what you'd have to have a good sense of is the the queue size under normal operational behavior kind of a sense of",
    "start": "2847599",
    "end": "2853440"
  },
  {
    "text": "what is my arrival rate what is my processing rate what is my desired transit time of a message from",
    "start": "2853440",
    "end": "2859200"
  },
  {
    "text": "what a message arrive message is processed to when the results are available",
    "start": "2859200",
    "end": "2864240"
  },
  {
    "text": "and then you want to use that that those factors as basically a guideline to what you where you would set your your q service",
    "start": "2864240",
    "end": "2872079"
  },
  {
    "text": "to your scaling let's see number question here what is a good technique for rotating",
    "start": "2872079",
    "end": "2878960"
  },
  {
    "text": "keys so the the first thing you want to worry about is you want to have your keys in",
    "start": "2878960",
    "end": "2884559"
  },
  {
    "text": "as few different places as possible i see that the the thing to avoid",
    "start": "2884559",
    "end": "2891200"
  },
  {
    "text": "is to actually embed keys in source code and to check in keys into source code control it makes them too difficult to",
    "start": "2891200",
    "end": "2897359"
  },
  {
    "text": "find it also gives you makes you a bit more vulnerable because you're you don't know exactly all the different places where your keys are stored",
    "start": "2897359",
    "end": "2903839"
  },
  {
    "text": "we give you services with the identity and access management we have something called roles which you can often use as",
    "start": "2903839",
    "end": "2909119"
  },
  {
    "text": "basically an indirect way to to access your keys i'd also recommend using things like the",
    "start": "2909119",
    "end": "2914880"
  },
  {
    "text": "security token service as another way to have keys stored as many locations or as",
    "start": "2914880",
    "end": "2920000"
  },
  {
    "text": "possible keep that to a minimum and then if you go into",
    "start": "2920000",
    "end": "2925119"
  },
  {
    "text": "the the your aws account you'll see that you're actually allowed to have two sets of keys active at any",
    "start": "2925119",
    "end": "2931280"
  },
  {
    "text": "given time so the idea here is that you in in practice you can't always you can't",
    "start": "2931280",
    "end": "2938160"
  },
  {
    "text": "make an instantaneous switch over from old keys to new keys so you can always have a current set of keys and then you can go",
    "start": "2938160",
    "end": "2944240"
  },
  {
    "text": "and create a second set of keys take that second set of keys embed those you know put those in all",
    "start": "2944240",
    "end": "2949839"
  },
  {
    "text": "the locations they need to be re restart the the affected services so they can authenticate themselves",
    "start": "2949839",
    "end": "2955280"
  },
  {
    "text": "with the new keys and then you can disable the old set of keys",
    "start": "2955280",
    "end": "2960960"
  },
  {
    "text": "uh let's see one embarrassing question here why didn't you mention dynamodb on leveraging storage options um purely",
    "start": "2960960",
    "end": "2967119"
  },
  {
    "text": "an admission an omission on my part for i actually didn't didn't didn't update the slide properly i will",
    "start": "2967119",
    "end": "2973839"
  },
  {
    "text": "do that after the fact question about where can we find more",
    "start": "2973839",
    "end": "2979599"
  },
  {
    "text": "about aws security architecture if you go to our security center which is aws.amazon.com",
    "start": "2979599",
    "end": "2986559"
  },
  {
    "text": "security you'll find a number of best practices white papers recommendations",
    "start": "2986559",
    "end": "2992640"
  },
  {
    "text": "a lot of details on on what we recommend for security architecture",
    "start": "2992640",
    "end": "2999838"
  },
  {
    "text": "and it looks like that is just about everything let me do one more refresh here",
    "start": "3000079",
    "end": "3005119"
  },
  {
    "text": "looks like that that is all the questions if that's if there are no more questions i would like to thank you for",
    "start": "3005119",
    "end": "3010319"
  },
  {
    "text": "attending i hope this has proven to be a great use of your time and so thank you very much let me just",
    "start": "3010319",
    "end": "3015839"
  },
  {
    "text": "pass you one along to the the contact information here hang in just one",
    "start": "3015839",
    "end": "3020960"
  },
  {
    "text": "sec okay we've got a slide here for additional info",
    "start": "3020960",
    "end": "3027119"
  },
  {
    "text": "yeah there we go so there's our architecture center my aws blog is linked there for you",
    "start": "3027119",
    "end": "3032480"
  },
  {
    "text": "and then aws premium support is available to you for architectural consultations as well",
    "start": "3032480",
    "end": "3041599"
  },
  {
    "text": "and with that i'd like to thank you for coming my email address is there as much as my twitter handle",
    "start": "3041599",
    "end": "3047040"
  },
  {
    "text": "and with that i will wrap up our webinar great thank you jeff i'd like to extend",
    "start": "3047040",
    "end": "3053280"
  },
  {
    "text": "special thank you for all the people who attend webcast today and then please take a moment to fill",
    "start": "3053280",
    "end": "3058720"
  },
  {
    "text": "out our survey we really appreciate your feedback so thank everyone for joining have a great rest of your day",
    "start": "3058720",
    "end": "3066720"
  }
]