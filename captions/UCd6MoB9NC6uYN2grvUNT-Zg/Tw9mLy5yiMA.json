[
  {
    "text": "hey everyone can you hear me at the back brilliant okay my name is Forex I work in developer",
    "start": "0",
    "end": "8040"
  },
  {
    "text": "technologies at AWS and this is the easiest deep dive session so we're gonna",
    "start": "8040",
    "end": "14490"
  },
  {
    "text": "dive deep into ECS we're gonna get building things we're gonna you know write some code excetra dive deep on how",
    "start": "14490",
    "end": "21210"
  },
  {
    "text": "ECS works some of the internals etc in this session so this may not be the best",
    "start": "21210",
    "end": "26699"
  },
  {
    "text": "session for you if you've never ever seen ECS before or use TCS but if that's",
    "start": "26699",
    "end": "31859"
  },
  {
    "text": "the case for you I'll try and explain things a bit as we go through but this is a deep dive session so but about me",
    "start": "31859",
    "end": "39239"
  },
  {
    "text": "I joined AWS around three and a half years ago now I have roughly 16 years",
    "start": "39239",
    "end": "45390"
  },
  {
    "text": "experience in the industry I started off as a software developer many years ago I've run ops teams and moved into",
    "start": "45390",
    "end": "52110"
  },
  {
    "text": "systems architecture working with distributed systems and stuff I until very recently as I was able to say I",
    "start": "52110",
    "end": "58500"
  },
  {
    "text": "hold all of the AWS certifications annoyingly we've added another one now",
    "start": "58500",
    "end": "63510"
  },
  {
    "text": "the security advanced ones back out so it's back to the drawing board for me there and I've got to decide do I want to do it just so I can say I've got all",
    "start": "63510",
    "end": "69840"
  },
  {
    "text": "of them again I'm a developer at heart I do a lot of development in Go Java some",
    "start": "69840",
    "end": "76710"
  },
  {
    "text": "C and some node when I can't use the other ones my contact details are here",
    "start": "76710",
    "end": "82140"
  },
  {
    "text": "there's my work email address and my Twitter feel free to contact me if you've got any questions I I cover",
    "start": "82140",
    "end": "87210"
  },
  {
    "text": "everything from servers to containers to C ICD and DevOps excetra so feel free to contact me if you need",
    "start": "87210",
    "end": "93960"
  },
  {
    "text": "to so what are we going to talk about today I'm so rather than just dive into",
    "start": "93960",
    "end": "101220"
  },
  {
    "text": "the individual features and functions of ECS I'm going to try and drag it back a bit and talk about a real-world use case",
    "start": "101220",
    "end": "107130"
  },
  {
    "text": "we're gonna build an application it's going to be made up of a couple of micro services and we're gonna analyze a",
    "start": "107130",
    "end": "114869"
  },
  {
    "text": "Twitter stream this is the use case for our application we're going to write some micro services and go using RPC for",
    "start": "114869",
    "end": "121409"
  },
  {
    "text": "in-service communication we're going to throw in some other services like Canisius fire hose and parameter store",
    "start": "121409",
    "end": "127049"
  },
  {
    "text": "etc as we go through so this whole talk is going to be focused around creating this application",
    "start": "127049",
    "end": "133260"
  },
  {
    "text": "creating this architecture and deploying it onto AWS in the best possible way during this we're going to talk about",
    "start": "133260",
    "end": "139620"
  },
  {
    "text": "you know what are the best practices for deploying Amazon ECS we're going to talk about how to engineer for the highest",
    "start": "139620",
    "end": "145500"
  },
  {
    "text": "possible availability and for other optimizations if actually you want to focus on cost rather than availability",
    "start": "145500",
    "end": "151950"
  },
  {
    "text": "for example and what some of the trade-offs you can make there are we're going to talk about scaling properties",
    "start": "151950",
    "end": "157409"
  },
  {
    "text": "of containers on AWS and security and also some more operational side things like monitoring and logging so I promise",
    "start": "157409",
    "end": "166200"
  },
  {
    "text": "this is a deep I've talked but I need to just baseline on some terminology before we really dig in so let's take a look at",
    "start": "166200",
    "end": "172590"
  },
  {
    "text": "EC s EC s is a container orchestration service and container management service",
    "start": "172590",
    "end": "178200"
  },
  {
    "text": "it it's a it's an orchestration backplane that sits in AWS that looks a",
    "start": "178200",
    "end": "183599"
  },
  {
    "text": "pool of compute takes a container and says where can I run this container how",
    "start": "183599",
    "end": "189180"
  },
  {
    "text": "can I keep this container running how do i how do I restart it if it dies etc so",
    "start": "189180",
    "end": "195419"
  },
  {
    "text": "there's a couple of key parts here first of all in the middle this kind of spaceship in the middle you've got the elastic container service here ECS",
    "start": "195419",
    "end": "202199"
  },
  {
    "text": "itself this is a managed service in AWS it's not something you have to carry the pager for and it's completely free as",
    "start": "202199",
    "end": "208590"
  },
  {
    "text": "well so with ECS the only thing you pay for are the actual container instances down the bottom here that run your",
    "start": "208590",
    "end": "214109"
  },
  {
    "text": "containers and these are just ec2 instances running Windows running Linux",
    "start": "214109",
    "end": "219180"
  },
  {
    "text": "maybe GPU enabled maybe not you have an extreme amount of flexibility here because they're just you see two images",
    "start": "219180",
    "end": "225930"
  },
  {
    "text": "running our open source ECS agent connecting them into the cluster a couple of ancillary things",
    "start": "225930",
    "end": "232290"
  },
  {
    "text": "here at top right so we have a container registry this is a really nice option for building your docker containers and",
    "start": "232290",
    "end": "238769"
  },
  {
    "text": "pushing them somewhere and storing those artifacts so that they can be deployed you can deploy a container registry with",
    "start": "238769",
    "end": "244440"
  },
  {
    "text": "a couple of clicks you can integrate it with iam permission it has encryption at rest etc really nice secure way of",
    "start": "244440",
    "end": "250409"
  },
  {
    "text": "storing your containers the key unit of deployment with ECS is a task definition",
    "start": "250409",
    "end": "255629"
  },
  {
    "text": "if you've used kubernetes before this is similar to the concept of a pod it's it's a JSON based document that can",
    "start": "255629",
    "end": "262720"
  },
  {
    "text": "change your containers for your deployment so and volumes as well so maybe the I have a small application",
    "start": "262720",
    "end": "269260"
  },
  {
    "text": "that needs two containers it's got like a back-end logic container and then",
    "start": "269260",
    "end": "274840"
  },
  {
    "text": "maybe a caching container and I always want to deploy them at the same time together so I wrapped them up in a task",
    "start": "274840",
    "end": "280210"
  },
  {
    "text": "definition give the task definition to ECS and ECS is going to work out where in my cluster that can be scheduled and",
    "start": "280210",
    "end": "286870"
  },
  {
    "text": "it's going to maintain and monitor it and keep it running and do things like load balancing or service recovery and we're going to cover a lot of that as we",
    "start": "286870",
    "end": "293170"
  },
  {
    "text": "go through so one thing that was announced are a tree inventor that kind",
    "start": "293170",
    "end": "298180"
  },
  {
    "text": "of changes this a bit is Fargate so a lot of people ask me how does far gate fit into this sort of diagram that you",
    "start": "298180",
    "end": "304750"
  },
  {
    "text": "have so far gate is a deployment option in an ACS cluster when you create an ACS",
    "start": "304750",
    "end": "310120"
  },
  {
    "text": "cluster when you deploy a task definition to it you can just choose deploy this task to ec2 or deploy it to",
    "start": "310120",
    "end": "316390"
  },
  {
    "text": "far gate or within the same cluster and that you with Fargate the cluster is your logical boundary for isolation so",
    "start": "316390",
    "end": "322750"
  },
  {
    "text": "behind the scenes if you deploy a container either on foggy or on ec2 and",
    "start": "322750",
    "end": "328570"
  },
  {
    "text": "you deploy it to an ECS cluster we're not going to run it on the same infrastructure behind the scenes as other other clusters containers so it's",
    "start": "328570",
    "end": "335500"
  },
  {
    "text": "an isolation boundary so I'll walk you through each of these areas and just",
    "start": "335500",
    "end": "341110"
  },
  {
    "text": "talk about the the division of responsibilities at AWS we talked a lot about the the model of shared",
    "start": "341110",
    "end": "346690"
  },
  {
    "text": "responsibility and typically an AWS if you look at a situ running VMs on ec2 for example we talked about AWS being",
    "start": "346690",
    "end": "354910"
  },
  {
    "text": "responsible for the cloud right there's secured to the operations etc of the back-end services like ec2 so we're",
    "start": "354910",
    "end": "362020"
  },
  {
    "text": "going to carry the pager for that we're going to worry about the availability of ec2 whereas the applications that you",
    "start": "362020",
    "end": "367270"
  },
  {
    "text": "might be running inside your VMs and your own architectures within AWS is your responsibility so you're",
    "start": "367270",
    "end": "372880"
  },
  {
    "text": "responsible for security operations etc in the cloud using the building blocks that we provide so I have run through",
    "start": "372880",
    "end": "380380"
  },
  {
    "text": "the different components of ECS and just sort of clarify where that divisional division of operation sits so with ECS",
    "start": "380380",
    "end": "389290"
  },
  {
    "text": "itself the backplane service that's actually scheduling all of the containers on to your clusters",
    "start": "389290",
    "end": "394729"
  },
  {
    "text": "we're going to be looking after the security of it so AWS is responsible for the security the compliance story like",
    "start": "394729",
    "end": "400759"
  },
  {
    "text": "PCI SOT one two and three ISO 27001 compliance etc that's our responsibility",
    "start": "400759",
    "end": "406699"
  },
  {
    "text": "to get all that certified you just reap the benefits of that we're going to be monitoring it and you know paging people",
    "start": "406699",
    "end": "412400"
  },
  {
    "text": "if something goes wrong and our engineers are going to be looking after that patching it availability scaling cost control these are all concerns that",
    "start": "412400",
    "end": "419569"
  },
  {
    "text": "AWS is responsible for as it's a managed service you just need to deploy an ACS",
    "start": "419569",
    "end": "425060"
  },
  {
    "text": "cluster so with ecs you can do this with just one command my cloud formation API",
    "start": "425060",
    "end": "430159"
  },
  {
    "text": "is CLI etc and you can deploy your first cluster with just one command it's not",
    "start": "430159",
    "end": "435379"
  },
  {
    "text": "going to have any hosts in it but you can still actually deploy a container with Fargate but typically with ACS if",
    "start": "435379",
    "end": "440840"
  },
  {
    "text": "you're running on ec2 you'd want to deploy some instances at this point so",
    "start": "440840",
    "end": "446569"
  },
  {
    "text": "with our container registry similar story we're gonna be looking after the monitoring and availability of the",
    "start": "446569",
    "end": "452180"
  },
  {
    "text": "container registry we're going to be dealing with scaling out you know storage except you're not gonna have to",
    "start": "452180",
    "end": "457279"
  },
  {
    "text": "worry about that you should just push your container images and we'll store them for you but you're gonna have to",
    "start": "457279",
    "end": "462710"
  },
  {
    "text": "orchestrate pushing those container images right we're not gonna do that for you things like cost control so if",
    "start": "462710",
    "end": "469400"
  },
  {
    "text": "you're pushing a lot of containers as part of an automated CICE job for example you may end up with a lot of",
    "start": "469400",
    "end": "474830"
  },
  {
    "text": "containers within the registry luckily the registry has some some nice options for you you can set up lifecycle",
    "start": "474830",
    "end": "480529"
  },
  {
    "text": "policies and say hey if an image is untagged for example delete it after 30 days and you know there's building",
    "start": "480529",
    "end": "487159"
  },
  {
    "text": "blocks there but it's up to you to configure that then we get to the actual container instances these are the ec2",
    "start": "487159",
    "end": "494870"
  },
  {
    "text": "instances that actually run your containers and that the container engine is scheduling the containers onto and in",
    "start": "494870",
    "end": "500810"
  },
  {
    "text": "this case these are these are your responsibility 52 instances you're",
    "start": "500810",
    "end": "506539"
  },
  {
    "text": "thinking about cost control and running on spot and reserved instances and stuff and thinking about the security like the",
    "start": "506539",
    "end": "512240"
  },
  {
    "text": "security groups and stuff that may wrap those instances this is a bit more on the responsibility side for you so a lot",
    "start": "512240",
    "end": "518570"
  },
  {
    "text": "of this talk today we're going to be talking through what's the best practice here how to deploy them what does it look like what does good look like",
    "start": "518570",
    "end": "524780"
  },
  {
    "text": "luckily there's a whole load of span of building blocks to help you with this right and I don't want this to be a",
    "start": "524780",
    "end": "530510"
  },
  {
    "text": "slide there's just mentioned tons and tons of services you don't have to worry too much about these as we go through this can be a nice reference slide you",
    "start": "530510",
    "end": "536630"
  },
  {
    "text": "can go back to afterwards but there's a whole load of building blocks to help you here so when you're deploying ec2",
    "start": "536630",
    "end": "542180"
  },
  {
    "text": "instances in AWS you can use something like Amazon inspector and run automated vulnerability tests to check for CV",
    "start": "542180",
    "end": "548720"
  },
  {
    "text": "vulnerabilities and packages and stuff with ec2 you get auto scaling to scale in and out your pool of compute you get",
    "start": "548720",
    "end": "555350"
  },
  {
    "text": "CloudWatch metrics built in so while these things on the left are your responsibility there's a whole load of",
    "start": "555350",
    "end": "561140"
  },
  {
    "text": "tooling to help you here the other thing is tasks in containers themselves when",
    "start": "561140",
    "end": "569030"
  },
  {
    "text": "it comes to the actual task definitions yeah you we're gonna be actually working out where on your cluster that task",
    "start": "569030",
    "end": "574820"
  },
  {
    "text": "definition can run and deploying it etc but you are gonna have to put some thought into how you want your tasks and",
    "start": "574820",
    "end": "580700"
  },
  {
    "text": "your containers to scale in and out do you want them to auto scale and we're gonna cover all this in more more detail",
    "start": "580700",
    "end": "586730"
  },
  {
    "text": "as we go through so how do I deploy this right this ACS cluster all my container",
    "start": "586730",
    "end": "592850"
  },
  {
    "text": "instances etc what's the best practices who he's using easiest today okay how do",
    "start": "592850",
    "end": "599450"
  },
  {
    "text": "you deploy this today someone else does it it's the ops team they do it okay I",
    "start": "599450",
    "end": "608180"
  },
  {
    "text": "only told through some of the options the first one depending on where you are with your journey with ECS maybe the AWS",
    "start": "608180",
    "end": "614839"
  },
  {
    "text": "management console right the web interface has a wizard that's going to help you spin up a cluster in no time at",
    "start": "614839",
    "end": "620720"
  },
  {
    "text": "all this is a good option to learn about the service if you're an organization that's a bit more advanced in your AWS",
    "start": "620720",
    "end": "627980"
  },
  {
    "text": "CCS journey you may want more flexibility more control right you may want something more repeatable so if I",
    "start": "627980",
    "end": "634130"
  },
  {
    "text": "need to create like 10 different testing environments the last thing I want to do is create them all manually with the",
    "start": "634130",
    "end": "639230"
  },
  {
    "text": "console right there's loads of opportunity for human error there there's no repeatability it's hard to test etc so the next natural thought for",
    "start": "639230",
    "end": "647420"
  },
  {
    "text": "a lot of people is hey I'm going to flex my scripting skills I'm the king of the bash one-liners I'm gonna write a bash",
    "start": "647420",
    "end": "653720"
  },
  {
    "text": "one-liner that deploys everything and it's gonna be amazing except it's probably not going to be animate because this is quite hard prospect I",
    "start": "653720",
    "end": "660420"
  },
  {
    "text": "don't know if you can read that there is quite bright in here but I put together a tiny little script and already like",
    "start": "660420",
    "end": "666810"
  },
  {
    "text": "deploying a cluster I've got things I need to think about so what happens if halfway through my script fails am I",
    "start": "666810",
    "end": "673560"
  },
  {
    "text": "gonna have to write error checking all the way through my deployment script some actions in AWS are asynchronous so",
    "start": "673560",
    "end": "680520"
  },
  {
    "text": "creating an ec2 instance for example with the run instances command is asynchronous when I run the command on",
    "start": "680520",
    "end": "685830"
  },
  {
    "text": "the command line it's gonna return straight away that doesn't mean my instances there yet it's still provisioning in the background so what",
    "start": "685830",
    "end": "691890"
  },
  {
    "text": "do I do in my script I pause do I do like sleep 500 seconds how long should I sleep for it gets a bit confusing and",
    "start": "691890",
    "end": "700560"
  },
  {
    "text": "then how do I roll yeah it's gonna be quite tight for time this talk I think",
    "start": "700560",
    "end": "705960"
  },
  {
    "text": "so I'm going to do questions at the end for this one if that's ok the next one",
    "start": "705960",
    "end": "711510"
  },
  {
    "text": "is how do I upgrade how do I rollback you know there's this this approach while it seems simple at first generally",
    "start": "711510",
    "end": "717300"
  },
  {
    "text": "leads to you know a lot of technical debt to maintain when you think about what deployment should actually look",
    "start": "717300",
    "end": "723450"
  },
  {
    "text": "like generally you want something self-contained deployable unit that's repeatable so I mean that you can",
    "start": "723450",
    "end": "728490"
  },
  {
    "text": "cookie-cutter over and over again something that's auditable ideally something that self documenting so if",
    "start": "728490",
    "end": "734670"
  },
  {
    "text": "you're the type of organization that's got a wiki page somewhere that lists you know subnets and IP ranges and stuff you",
    "start": "734670",
    "end": "740700"
  },
  {
    "text": "typically probably realize that that gets out-of-date very very quickly really you want to be deploying your",
    "start": "740700",
    "end": "746160"
  },
  {
    "text": "infrastructure in a way where you've got infrastructure as code and that definition of your infrastructure is always up to date",
    "start": "746160",
    "end": "751710"
  },
  {
    "text": "and contains a self documenting version of your architecture and this is where cloud formation comes in so cloud",
    "start": "751710",
    "end": "758670"
  },
  {
    "text": "formation allows you to describe any AWS resource via a template JSON or yam or",
    "start": "758670",
    "end": "764490"
  },
  {
    "text": "template and you can actually commit this into version control with your application so any point in time I can",
    "start": "764490",
    "end": "770190"
  },
  {
    "text": "look at my application and github and wherever you store it and say ok this version of my application had this",
    "start": "770190",
    "end": "775860"
  },
  {
    "text": "architecture and on this day Steve introduced a firewall rule and the next day everything broke so I knew to go and",
    "start": "775860",
    "end": "782580"
  },
  {
    "text": "speak to Steve but not hit him because we're a blameless culture etc etc so time to deploy if we got our cloud",
    "start": "782580",
    "end": "789120"
  },
  {
    "text": "formation template you can to create stack command or the web interface or integration we'd like",
    "start": "789120",
    "end": "795120"
  },
  {
    "text": "Jenkins or Co pipeline excetra to deploy and you can create two stack and just give it this template name and it's",
    "start": "795120",
    "end": "801000"
  },
  {
    "text": "going to go away and deploy it when it comes to updating your stake you have a similar updates that command you can update all of your resources when a new",
    "start": "801000",
    "end": "809190"
  },
  {
    "text": "environment is required you can just give it a different name cloud formation is going to bring out another copy of your infrastructure it's a really really",
    "start": "809190",
    "end": "815850"
  },
  {
    "text": "nice way to just cookie-cutter your infrastructure when it comes to some of the ECS resources I'll give a few",
    "start": "815850",
    "end": "822900"
  },
  {
    "text": "examples here we've got an ECR repository so somewhere to put your container images this is really easy to",
    "start": "822900",
    "end": "829350"
  },
  {
    "text": "deploy with cloud formation just an example there top tip if you're using ECR today ECR is integrated with i am so",
    "start": "829350",
    "end": "837420"
  },
  {
    "text": "you can use AWS i am to protect your registries and say okay you know this person can upload a container to this",
    "start": "837420",
    "end": "843480"
  },
  {
    "text": "repo but not to that one or this this application can pull a container from this repo but not from that one so",
    "start": "843480",
    "end": "849450"
  },
  {
    "text": "typically there's a command you run AWS ECR get log in there's going to do the docker login for you there's an open",
    "start": "849450",
    "end": "856260"
  },
  {
    "text": "source plug-in on our AWS labs repo for docker that just automates that process",
    "start": "856260",
    "end": "862110"
  },
  {
    "text": "so you never have to login to ECR so really really an easy option there just a little tip as we go through it see as",
    "start": "862110",
    "end": "869490"
  },
  {
    "text": "clusters again very similar very very easy to deploy with cloud formation",
    "start": "869490",
    "end": "874520"
  },
  {
    "text": "container instances and this is where it gets a little bit more interesting complex depending on how you want to",
    "start": "874520",
    "end": "880950"
  },
  {
    "text": "look at it on the left here is an architecture for a very typical ECS",
    "start": "880950",
    "end": "886380"
  },
  {
    "text": "deployment ok for the container instances that live in your AWS camera and don't worry if you can't read this",
    "start": "886380",
    "end": "892200"
  },
  {
    "text": "at the back on your wall and explain it as we're going through",
    "start": "892200",
    "end": "897590"
  },
  {
    "text": "ultimately we've got to availability zones here so you may have to you may have three etc but multiple availability",
    "start": "897590",
    "end": "904590"
  },
  {
    "text": "zones each availability zone is one or more data center separated by low",
    "start": "904590",
    "end": "909810"
  },
  {
    "text": "latency normally under two milliseconds so what this means is our architecture if it spans multiple availability zones",
    "start": "909810",
    "end": "915360"
  },
  {
    "text": "is going to be highly available if we have some container instances Dyanne one they're going to be brought back up automatically in another one so in this",
    "start": "915360",
    "end": "923700"
  },
  {
    "text": "case let's look at the route for inbound traffic to our containers so we've got our V PC that spans the region's we've",
    "start": "923700",
    "end": "930660"
  },
  {
    "text": "got an Internet gateway at the top and then we've got an application load balancer so the alb or application load",
    "start": "930660",
    "end": "937140"
  },
  {
    "text": "balancer is a really really nice way of routing traffic into your containers so you probably don't want your container",
    "start": "937140",
    "end": "943410"
  },
  {
    "text": "instances in a public subnet with public ip's and all your containers getting public IPs etc you probably want a sort",
    "start": "943410",
    "end": "949650"
  },
  {
    "text": "of tiered architecture whereby you have a load balancer in the public subnets and then your container instances in the",
    "start": "949650",
    "end": "955380"
  },
  {
    "text": "private ones the application load balancer allows you to do path based routing or host base routing so I could",
    "start": "955380",
    "end": "962160"
  },
  {
    "text": "take for example slash products on my API restful ura API URL and send",
    "start": "962160",
    "end": "968670"
  },
  {
    "text": "everything that goes to slash products to all of my product micro service containers and it can do that routing",
    "start": "968670",
    "end": "974040"
  },
  {
    "text": "for you with a single application load balancer okay",
    "start": "974040",
    "end": "981720"
  },
  {
    "text": "outbound traffic at some point your container instances or your containers may want to may want to access the",
    "start": "981720",
    "end": "991350"
  },
  {
    "text": "outside world and this could be that because your containers need to talk to a third party API for example maybe like",
    "start": "991350",
    "end": "998160"
  },
  {
    "text": "a payments API or something or maybe some sort of monitoring system etc so the usual way to do this in a V PC that",
    "start": "998160",
    "end": "1005240"
  },
  {
    "text": "has public and private subnets is to use in that gateways so in this case we've got some that gateways that are taking",
    "start": "1005240",
    "end": "1010700"
  },
  {
    "text": "the traffic and sending it out to the internet logging ECS has really tight integrations with",
    "start": "1010700",
    "end": "1018410"
  },
  {
    "text": "cloud watch logs so you can actually set up centralized logging for all of your containers and all of your container",
    "start": "1018410",
    "end": "1024199"
  },
  {
    "text": "instances really really easily it's going to collect orders standard out and from all of your containers it's going",
    "start": "1024199",
    "end": "1030038"
  },
  {
    "text": "to centralize it in cloud water logs and there's a lot of fun stuff you can do with it there that we're going to cover as we go on here and the too long can be",
    "start": "1030039",
    "end": "1038678"
  },
  {
    "text": "bothered to listen to you didn't read your slides version of this is that everything I've just shown you can be automatically deployed to your AWS",
    "start": "1038679",
    "end": "1045100"
  },
  {
    "text": "account with a click of a button so we have a reference architecture published on github and it's basically that whole",
    "start": "1045100",
    "end": "1052390"
  },
  {
    "text": "architecture I just showed you so I'm gonna just skip out here and jump",
    "start": "1052390",
    "end": "1060450"
  },
  {
    "text": "here we go okay so this is the reference",
    "start": "1065370",
    "end": "1071290"
  },
  {
    "text": "architectures just in the AWS labs github if we look down we can see",
    "start": "1071290",
    "end": "1076420"
  },
  {
    "text": "there's a launch stack button for all of our regions it just describes what it's going to deploy etc etc and some common",
    "start": "1076420",
    "end": "1082990"
  },
  {
    "text": "frequently asked questions so if we look in the cloud formation templates here we've got infrastructures as templates",
    "start": "1082990",
    "end": "1090880"
  },
  {
    "text": "like setting up the cluster there's templates for setting up a VP see you can focus and go and tweak it and you",
    "start": "1090880",
    "end": "1096280"
  },
  {
    "text": "know tune into your own BPC definitions etc IP ranges I'm just going to deploy",
    "start": "1096280",
    "end": "1102280"
  },
  {
    "text": "the default one and I'm gonna deploy it into the no London region okay so this",
    "start": "1102280",
    "end": "1110380"
  },
  {
    "text": "takes us to the cloud formation console is pre-populated the template location for us I can go through give it a name",
    "start": "1110380",
    "end": "1118480"
  },
  {
    "text": "I'm going to call this cluster pre-production and just skip through it",
    "start": "1118480",
    "end": "1126280"
  },
  {
    "text": "some of these options okay so what's",
    "start": "1126280",
    "end": "1132130"
  },
  {
    "text": "gonna happen now is over the course of the next six to eight minutes that whole architecture I showed you in that",
    "start": "1132130",
    "end": "1137200"
  },
  {
    "text": "diagram is going to be board up okay so we're gonna have a cluster up and running with container instances than",
    "start": "1137200",
    "end": "1142780"
  },
  {
    "text": "that gateways all set up following best practices so I'm not going to sit here and wait for that for ten minutes I'm",
    "start": "1142780",
    "end": "1149260"
  },
  {
    "text": "actually gonna go back but I'll be deploying in the background we'll look at back at that later",
    "start": "1149260",
    "end": "1155820"
  },
  {
    "text": "any did you want to do your question quickly it's kind of a good segue point",
    "start": "1155820",
    "end": "1164250"
  },
  {
    "text": "yes good question so yeah so the",
    "start": "1164430",
    "end": "1174940"
  },
  {
    "text": "question was even if I'm using cloud formation do I still need to use bash etcetera what if I'm using Jenkins or",
    "start": "1174940",
    "end": "1180010"
  },
  {
    "text": "some other CI CD like type orchestration system yeah there's plugins for Jenkins for",
    "start": "1180010",
    "end": "1185470"
  },
  {
    "text": "cloud formation so you can just deploy a cloud formation template straight from Jenkins things like code pipeline have",
    "start": "1185470",
    "end": "1190600"
  },
  {
    "text": "native support built in so you shouldn't need to but if you want the power you can break out and use that but you",
    "start": "1190600",
    "end": "1196780"
  },
  {
    "text": "should creating resources manually with the command line was kind of the point there you use the command line to deploy the",
    "start": "1196780",
    "end": "1201990"
  },
  {
    "text": "cloud formation template okay okay okay",
    "start": "1201990",
    "end": "1210600"
  },
  {
    "text": "come find me over lunch and we can talk that through and see if we can optimize that okay so we got a cluster deploying",
    "start": "1210600",
    "end": "1219299"
  },
  {
    "text": "my in few minutes time is going to be ready for us to start using let's actually get to the more interesting bit",
    "start": "1219299",
    "end": "1225539"
  },
  {
    "text": "and start talking about building applications so we're gonna build an application that looks something like",
    "start": "1225539",
    "end": "1231570"
  },
  {
    "text": "this and caveat I built this over the weekend it may not be the most polished",
    "start": "1231570",
    "end": "1237149"
  },
  {
    "text": "thing ever so this is gonna be a little too micro service architecture is going",
    "start": "1237149",
    "end": "1243870"
  },
  {
    "text": "to pull tweets into a service I've created called the tweet collector so this is going to interface with the",
    "start": "1243870",
    "end": "1248940"
  },
  {
    "text": "Twitter API is going to subscribe to a Twitter search I'm pulling all the tweets that match that Twitter search",
    "start": "1248940",
    "end": "1256129"
  },
  {
    "text": "now the tweet collector needs API credentials to talk to Twitter's API",
    "start": "1256129",
    "end": "1261210"
  },
  {
    "text": "either my Twitter token etc I didn't want them to be shown on stage to you I",
    "start": "1261210",
    "end": "1267149"
  },
  {
    "text": "didn't want them to be recorded and I won't know to be kept securely so a nice option here is the AWS parameter store",
    "start": "1267149",
    "end": "1275039"
  },
  {
    "text": "if you haven't seen this this is a pretty hidden away service in the ec2 console and it's basically a per object",
    "start": "1275039",
    "end": "1283110"
  },
  {
    "text": "or it's a key value store with put item and get item type API but it has",
    "start": "1283110",
    "end": "1288269"
  },
  {
    "text": "encryption built in so it can encrypt your parameters automatically with our key management service so you get a",
    "start": "1288269",
    "end": "1294990"
  },
  {
    "text": "really nice secure I am controlled way of storing configuration and secrets",
    "start": "1294990",
    "end": "1300269"
  },
  {
    "text": "so really powerful here I'm just going to use it to store my Twitter credentials and the Micra so it's going",
    "start": "1300269",
    "end": "1305730"
  },
  {
    "text": "to pull that and then it's going to send on the any tweets it finds into this next Micra service called the archiver",
    "start": "1305730",
    "end": "1312179"
  },
  {
    "text": "and this is going to do a few things it's going to send the tweets onto Kinesis firehose Kinesis firehose allows",
    "start": "1312179",
    "end": "1318960"
  },
  {
    "text": "me to archive things into s3 so Kinesis fire hose is going to batch up all those",
    "start": "1318960",
    "end": "1324149"
  },
  {
    "text": "tweets into you know five or ten Meg blocks whatever I decide it's going to do things like gzip them etc",
    "start": "1324149",
    "end": "1330630"
  },
  {
    "text": "so I've got a nice archive sitting in s3 of all the tweets over time it's also",
    "start": "1330630",
    "end": "1335850"
  },
  {
    "text": "going to allow me to send on those tweets to something like elasticsearch so I can do an analysis and graphs etc",
    "start": "1335850",
    "end": "1341700"
  },
  {
    "text": "of the tweets and it also gives me the option to send it on to lambda if I want so I can do like real-time notifications",
    "start": "1341700",
    "end": "1348390"
  },
  {
    "text": "and stuff so it's not general architecture here to anyone see this",
    "start": "1348390",
    "end": "1354000"
  },
  {
    "text": "announced about a week ago No cool this is really interesting so I'd originally",
    "start": "1354000",
    "end": "1360210"
  },
  {
    "text": "built a load of this already and ended up rewriting it at the weekend because I found this new library that twitch have",
    "start": "1360210",
    "end": "1366179"
  },
  {
    "text": "released and it's a really interesting library for micro service communication so typically when you're building and",
    "start": "1366179",
    "end": "1373169"
  },
  {
    "text": "publishing Micra services a very common option is to write restful api for them use something like swagger maybe to",
    "start": "1373169",
    "end": "1379740"
  },
  {
    "text": "define your recipes and build clients etc you can get into the scenario where",
    "start": "1379740",
    "end": "1384809"
  },
  {
    "text": "all of your micro services within your organization have a different way of using rest like rest isn't specific",
    "start": "1384809",
    "end": "1390630"
  },
  {
    "text": "enough at times so you end up with like different restful endpoint names like maybe create your you know etc there can",
    "start": "1390630",
    "end": "1396179"
  },
  {
    "text": "be key differences there and for me writing swagger definitions always felt",
    "start": "1396179",
    "end": "1402000"
  },
  {
    "text": "quite painful it's quite verbose etc personal preference there but I I found",
    "start": "1402000",
    "end": "1408900"
  },
  {
    "text": "that quite painful this is actually something that twitch use heavily internally for their Microsoft's",
    "start": "1408900",
    "end": "1414750"
  },
  {
    "text": "communication it works with protobufs definition so I define my models for my API with a protobuf definition and then",
    "start": "1414750",
    "end": "1422789"
  },
  {
    "text": "this is going to generate me a server this is going to generate me a client it's gonna deal with the underlying RPC",
    "start": "1422789",
    "end": "1429330"
  },
  {
    "text": "communication for me interestingly so one of the other ways of doing this would be with G RPC so GRP C is another",
    "start": "1429330",
    "end": "1437159"
  },
  {
    "text": "library very similar to this but it has some limitations number one G RPC only works with",
    "start": "1437159",
    "end": "1443370"
  },
  {
    "text": "protobufs to my knowledge anyway so that makes it hard if you want to diagnose a service with curl or something from the",
    "start": "1443370",
    "end": "1449520"
  },
  {
    "text": "command line because if protobufs is a binary protocol it can be quite hard to",
    "start": "1449520",
    "end": "1455039"
  },
  {
    "text": "work that way so this allows you to use JSON as well it's also HTTP 1 compatible",
    "start": "1455039",
    "end": "1460110"
  },
  {
    "text": "word whereas G RPC is tied to HTTP so it means you can't use it with any of",
    "start": "1460110",
    "end": "1465250"
  },
  {
    "text": "the AWS load balancers for example so this is a really nice option for AWS Micra services communicating together so",
    "start": "1465250",
    "end": "1473350"
  },
  {
    "text": "we're gonna use this in our application on the left here can you see that at the back it's really bright in here that's",
    "start": "1473350",
    "end": "1479890"
  },
  {
    "text": "not okay so on the left here I've got a protobuf definition that basically says okay I'm creating a new service called",
    "start": "1479890",
    "end": "1485620"
  },
  {
    "text": "Twitter archive I want a method called create it's going to take a create request and respond with a create",
    "start": "1485620",
    "end": "1491260"
  },
  {
    "text": "response and then I define what my models look like so create request to the Twitter archive it's got a name and",
    "start": "1491260",
    "end": "1497679"
  },
  {
    "text": "a message so the person tweeting and the actual tweet and then the response is going to return with the Kinesis",
    "start": "1497679",
    "end": "1503919"
  },
  {
    "text": "sequence and shard number so let's look a tiny bit deeper at the two services",
    "start": "1503919",
    "end": "1510490"
  },
  {
    "text": "here we've got a Twitter collector micro service that I've already written because I want to containerize this",
    "start": "1510490",
    "end": "1516880"
  },
  {
    "text": "micro service I need to be able to provide a way to configure it at run time this is fairly key with containers",
    "start": "1516880",
    "end": "1522399"
  },
  {
    "text": "ideally I want to build my container once at the beginning of my CI CD pipeline and use that same container in",
    "start": "1522399",
    "end": "1528700"
  },
  {
    "text": "any different environment dev staging products cetera I don't want to have to rebuild my container for each different",
    "start": "1528700",
    "end": "1534039"
  },
  {
    "text": "environment because the configuration data is different so the common 12 factor app way of doing this would be to",
    "start": "1534039",
    "end": "1540250"
  },
  {
    "text": "use environment variables and pass in environment variables to configure the service at runtime so here this service",
    "start": "1540250",
    "end": "1546399"
  },
  {
    "text": "takes two environment variables one that specifies the search terms to subscribe to in the Twitter API the other one is",
    "start": "1546399",
    "end": "1553270"
  },
  {
    "text": "the URL of the archived service that's running it's going to need an iam role",
    "start": "1553270",
    "end": "1558970"
  },
  {
    "text": "so can fetch my Twitter credentials from the parameter store and then it's going to use a client sdk generated by that",
    "start": "1558970",
    "end": "1565690"
  },
  {
    "text": "twitch library that to allow it to communicate with my other service on the",
    "start": "1565690",
    "end": "1572500"
  },
  {
    "text": "other end the archiver again written in go this actually hosts the auto-generated RPC server by the twitch",
    "start": "1572500",
    "end": "1578200"
  },
  {
    "text": "library and it's going to receive tweets validate them and then send them on to a Kinesis stream so I've got an",
    "start": "1578200",
    "end": "1584470"
  },
  {
    "text": "environment variable to configure it at runtime so I can specify which Kinesis stream it should send to it's going to",
    "start": "1584470",
    "end": "1591010"
  },
  {
    "text": "need an IM role to write to the Kinesis stream and it's going to respond with a response",
    "start": "1591010",
    "end": "1596610"
  },
  {
    "text": "so what does my development workflow looks like for this this is the way I typically develop with ECS so I normally",
    "start": "1596610",
    "end": "1604419"
  },
  {
    "text": "use docker compose locally docker compose is you know relate release by",
    "start": "1604419",
    "end": "1609880"
  },
  {
    "text": "docker but it allows you to specify loaded containers and bring them all up locally and play and build and test and",
    "start": "1609880",
    "end": "1616450"
  },
  {
    "text": "push your containers it's a really convenient way of running containers locally all the logs are just thrown to",
    "start": "1616450",
    "end": "1622000"
  },
  {
    "text": "standard out standard error in my terminal it's going to use my local AWS credentials and I'm going to use this to",
    "start": "1622000",
    "end": "1627639"
  },
  {
    "text": "build and push containers and then when it comes to deploying into a AWS I'm",
    "start": "1627639",
    "end": "1632919"
  },
  {
    "text": "gonna use cloud formation I'm already using cloud formation to deploy my cluster you can just specify your task",
    "start": "1632919",
    "end": "1638409"
  },
  {
    "text": "definitions in cloud formation as well I want my logs centralized in cloud trail I want to use task rolls and we're",
    "start": "1638409",
    "end": "1645700"
  },
  {
    "text": "gonna cover those in a bit more detail as we go through to assign permissions directly to the container and then I",
    "start": "1645700",
    "end": "1651820"
  },
  {
    "text": "want centralized logging and metrics in cloud watch so this whole project is",
    "start": "1651820",
    "end": "1657580"
  },
  {
    "text": "open source on github you can actually go to my github and look for a project called RPC demo and all the sources is",
    "start": "1657580",
    "end": "1665139"
  },
  {
    "text": "on there so again we're gonna share the slides at the end you can get them there",
    "start": "1665139",
    "end": "1670860"
  },
  {
    "text": "we're gonna talk through running it locally and we're gonna deploy it into AWS okay",
    "start": "1672100",
    "end": "1679900"
  },
  {
    "text": "so we've got our two services here I'm going to show you the archiver service",
    "start": "1679900",
    "end": "1685840"
  },
  {
    "text": "first so this is the service the host the server and receives tweets from the",
    "start": "1685840",
    "end": "1692350"
  },
  {
    "text": "tweet collector so in this case I've got my protobufs definition and then using",
    "start": "1692350",
    "end": "1698560"
  },
  {
    "text": "the twitch library I can just run Sicilia archive go generate it's going",
    "start": "1698560",
    "end": "1704140"
  },
  {
    "text": "to generate me my server and client for me automatically so really quick way of doing the decoding there and then here",
    "start": "1704140",
    "end": "1712630"
  },
  {
    "text": "I've got my actual main application where I'm just instantiated can we shut the blinds anymore the",
    "start": "1712630",
    "end": "1718660"
  },
  {
    "text": "battens anyone know it's very bright in here that is a good idea yeah I don't",
    "start": "1718660",
    "end": "1730870"
  },
  {
    "text": "think that's such a good idea after all [Laughter] okay so I've got my tweet collector",
    "start": "1730870",
    "end": "1738460"
  },
  {
    "text": "service the archivist service this is just going to send stuff on and then",
    "start": "1738460",
    "end": "1743890"
  },
  {
    "text": "I've got here my collector service and this service just subscribes to a",
    "start": "1743890",
    "end": "1749580"
  },
  {
    "text": "Twitter API and subscribes to a search stream so here I'm basically fetching my",
    "start": "1749580",
    "end": "1756730"
  },
  {
    "text": "authentication tokens from SSM and then I'm setting up my search terms based on",
    "start": "1756730",
    "end": "1762460"
  },
  {
    "text": "the environment variable set subscribing to the Twitter stream and then",
    "start": "1762460",
    "end": "1768400"
  },
  {
    "text": "instantiating a new client from my other micro service and this is going to automate all the RPC communication it",
    "start": "1768400",
    "end": "1775360"
  },
  {
    "text": "means I don't have to deal with HTTP or rest or worry about transport mechanisms at all this does it for me okay so to",
    "start": "1775360",
    "end": "1783250"
  },
  {
    "text": "run this locally if I just open up a terminal I've got a docker compose file",
    "start": "1783250",
    "end": "1793020"
  },
  {
    "text": "so this docker compose file has a couple of things it's got both of my containers here defined so the top one I've got my",
    "start": "1793020",
    "end": "1800160"
  },
  {
    "text": "collector and I'm saying okay the build when I run a docker compose built look",
    "start": "1800160",
    "end": "1805230"
  },
  {
    "text": "inside the collector directory and run the docker file that's in there to build my container and then when I run push",
    "start": "1805230",
    "end": "1810570"
  },
  {
    "text": "push it to this image and there's an ECR registry repo I've already created that this service depends on the archiver",
    "start": "1810570",
    "end": "1816990"
  },
  {
    "text": "and pass in some environment variables so in this case I'm searching on Twitter for anything mentioning Amazon because",
    "start": "1816990",
    "end": "1824280"
  },
  {
    "text": "shows on screen there's such really hard to find a Twitter term that was work safe to show on screen really hard",
    "start": "1824280",
    "end": "1831240"
  },
  {
    "text": "you've got a trade-off between you want one that's popular and it's gonna have loads a tweet streaming by there's something that's fairly safe as well so",
    "start": "1831240",
    "end": "1837150"
  },
  {
    "text": "this this could be a risk that sees me not having a job at the end of this demo so we've got our search week our",
    "start": "1837150",
    "end": "1844140"
  },
  {
    "text": "collectors going to be collecting tweets and then we got the archive a service and this one we're exposing on some",
    "start": "1844140",
    "end": "1849540"
  },
  {
    "text": "ports and just the this one connects to the other one just using the name of its container right so I can run docker",
    "start": "1849540",
    "end": "1856290"
  },
  {
    "text": "compose up come up so it's just going to",
    "start": "1856290",
    "end": "1866160"
  },
  {
    "text": "bring up my two containers it's going to subscribe to the tweet stream for Amazon and the messages you are seeing they're",
    "start": "1866160",
    "end": "1872100"
  },
  {
    "text": "actually from the archive a service that's received them and successfully sent them on to Kinesis firehose and i'm",
    "start": "1872100",
    "end": "1878370"
  },
  {
    "text": "gonna close that before it says something horrific okay so we got our",
    "start": "1878370",
    "end": "1884460"
  },
  {
    "text": "two micro versus we're developing them we're building them we're running them locally at some point I'm gonna want to send these into AWS and run these",
    "start": "1884460",
    "end": "1891690"
  },
  {
    "text": "containers in a more durable available way so to do this I've got a cloud formation template within my repo and",
    "start": "1891690",
    "end": "1899690"
  },
  {
    "text": "this cloud formation template I just copied from that reference architecture by the way the ECS reference",
    "start": "1899690",
    "end": "1905580"
  },
  {
    "text": "architecture I showed you comes with the load of example micro services built in so I just copied the cloud formation",
    "start": "1905580",
    "end": "1911970"
  },
  {
    "text": "template and replace the details with some of mine so here I've got for example the search terms and a couple of",
    "start": "1911970",
    "end": "1917880"
  },
  {
    "text": "parameters at the top and then very similar to the docker compose definition I've got my two containers specified",
    "start": "1917880",
    "end": "1924480"
  },
  {
    "text": "here so here we're just telling ECS you know pull this container image limit it to this much memory use environment",
    "start": "1924480",
    "end": "1931130"
  },
  {
    "text": "variables to set all of the different parameters for like where to access the other service and what search them to",
    "start": "1931130",
    "end": "1936770"
  },
  {
    "text": "search for so now I can take this cloud formation template and do AWS",
    "start": "1936770",
    "end": "1944990"
  },
  {
    "text": "CloudFormation create stack give it a stack name so in this case I'm calling",
    "start": "1944990",
    "end": "1951140"
  },
  {
    "text": "it production tweets and then the template body file so the actual cloud formation template that I've got on my",
    "start": "1951140",
    "end": "1957290"
  },
  {
    "text": "filesystem so this is now going to go away it's gonna send that template into cloud formation if I go into my AWS",
    "start": "1957290",
    "end": "1964340"
  },
  {
    "text": "console now and look in the right region",
    "start": "1964340",
    "end": "1969159"
  },
  {
    "text": "okay I can see my cloud formation stacks been created I've already got a cluster I created there earlier the production",
    "start": "1971050",
    "end": "1977750"
  },
  {
    "text": "cluster and then I've got my production tweet micro services that are being deployed now so I can actually go into",
    "start": "1977750",
    "end": "1984530"
  },
  {
    "text": "cloud formation I can say okay there's a whole load of resources that it's going to create for me so like a log group for",
    "start": "1984530",
    "end": "1991250"
  },
  {
    "text": "centralized logging my Kinesis stream that all my tweets are going to end up in it's going to start deploying the ECS",
    "start": "1991250",
    "end": "1998270"
  },
  {
    "text": "services etc in a minute and this typically takes about a minute or so to deploy you can see it's already started",
    "start": "1998270",
    "end": "2003820"
  },
  {
    "text": "2.0 CS service there and if I go into the UCS console",
    "start": "2003820",
    "end": "2009990"
  },
  {
    "text": "okay so I got my cluster here and I can go and I can say I've got a load of",
    "start": "2018480",
    "end": "2024070"
  },
  {
    "text": "services running so the top two there are the example ones that come with a reference architecture and then I've got",
    "start": "2024070",
    "end": "2030190"
  },
  {
    "text": "my service at the bottom and you can see at the moment is currently deploying the container so I can see here I've got one",
    "start": "2030190",
    "end": "2038620"
  },
  {
    "text": "task pending so right now it's pulling the container image from my registry in my case the container is is about 500",
    "start": "2038620",
    "end": "2045970"
  },
  {
    "text": "Meg because I haven't optimized it at all I'm just using the default go container and says about 500 Meg for its",
    "start": "2045970",
    "end": "2052240"
  },
  {
    "text": "pull it should take a minute or so there we go and it's running now so now my service is up and running I can go in I",
    "start": "2052240",
    "end": "2058120"
  },
  {
    "text": "can look at that task that's running I can see I've got my my two containers they're up and running successfully and",
    "start": "2058120",
    "end": "2066700"
  },
  {
    "text": "I can actually start going and looking at the logs now so part of that task definition if I look back at the cloud",
    "start": "2066700",
    "end": "2072460"
  },
  {
    "text": "formation template here I've got my archive a service here to add centralized logging in here was a couple",
    "start": "2072460",
    "end": "2078700"
  },
  {
    "text": "of lines I just specify a log driver for this container there's a load out there so you can use things like spun called",
    "start": "2078700",
    "end": "2085090"
  },
  {
    "text": "fluent D etc there's one within the docker github repo called AWS logs and",
    "start": "2085090",
    "end": "2091120"
  },
  {
    "text": "this is just going to take all the logs and send them into cloud watch logs automatically and I just give it a prefix of you know where I want it to",
    "start": "2091120",
    "end": "2097420"
  },
  {
    "text": "store so I can organize and sort them properly so now if I go and look in cloud watch and look logs okay so I've",
    "start": "2097420",
    "end": "2116530"
  },
  {
    "text": "got a log group that's been created for my service logs and I can see here okay",
    "start": "2116530",
    "end": "2122710"
  },
  {
    "text": "I've got some containers running I can go and look at the archiver for example and say okay there's a whole lot of",
    "start": "2122710",
    "end": "2128950"
  },
  {
    "text": "tweets being archived just like I showed you on my local laptop so my service is up and running I can go back into ECS I",
    "start": "2128950",
    "end": "2135730"
  },
  {
    "text": "can look at metrics and CPU and memory and latency etc for it all of that is graph for you out of the box I'm going",
    "start": "2135730",
    "end": "2143770"
  },
  {
    "text": "to show you one other cool thing you can do here as well if I go back to my log groups",
    "start": "2143770",
    "end": "2149020"
  },
  {
    "text": "production tweets this there's some functionality within cloud watch logs",
    "start": "2149020",
    "end": "2154610"
  },
  {
    "text": "called metric filters has anyone seen all use metric filters before yeah not",
    "start": "2154610",
    "end": "2160160"
  },
  {
    "text": "many people have seen this this is this is a really cool feature I can click on a log group in cloud rocks logs and",
    "start": "2160160",
    "end": "2166010"
  },
  {
    "text": "create a metric filter this allows me to specify a search pattern so I may want",
    "start": "2166010",
    "end": "2171260"
  },
  {
    "text": "to search and look for anything in my logs that contains the word warning I",
    "start": "2171260",
    "end": "2177130"
  },
  {
    "text": "can test it now there's no matches at the moment but if any of my containers did output a message in the logs that",
    "start": "2177130",
    "end": "2183650"
  },
  {
    "text": "said warning this creates a cloud watch metric out of it so I can say warnings I",
    "start": "2183650",
    "end": "2189310"
  },
  {
    "text": "can then do things like set alarms on that so straight away I've got alerts and alarms that can trigger lambda",
    "start": "2189310",
    "end": "2195410"
  },
  {
    "text": "functions or integrate with existing monitoring systems for any search time in my container locks really really",
    "start": "2195410",
    "end": "2201740"
  },
  {
    "text": "quick really really powerful these these automatically get graphed as well so any metric filter I create I can just go",
    "start": "2201740",
    "end": "2207650"
  },
  {
    "text": "into cloud watch and I can see a graph of all my warnings and see when they happened and I can actually right click",
    "start": "2207650",
    "end": "2212690"
  },
  {
    "text": "on the graph and the point in the graph and show show me the log entries for this particular point in the graph and",
    "start": "2212690",
    "end": "2218360"
  },
  {
    "text": "it's going to show you a cut-down version of the log entries so you don't need to go trawling through log entries when everything goes wrong and you try",
    "start": "2218360",
    "end": "2224690"
  },
  {
    "text": "and diagnose stuff very quick way to get to container logs so this allows me to",
    "start": "2224690",
    "end": "2231650"
  },
  {
    "text": "do things like set up graphs very easily I've got here for my service you can see",
    "start": "2231650",
    "end": "2236930"
  },
  {
    "text": "I was testing it yesterday in the hotel room and then deleted it recreated it",
    "start": "2236930",
    "end": "2242180"
  },
  {
    "text": "just now so we can see we've got a whole load of tweets being archived we can see",
    "start": "2242180",
    "end": "2247400"
  },
  {
    "text": "processing errors etc that's one of the metric filters there so really really easy with the integration with cloud",
    "start": "2247400",
    "end": "2254240"
  },
  {
    "text": "watch metrics okay okay so at the moment",
    "start": "2254240",
    "end": "2264920"
  },
  {
    "text": "our micro service the archiver is sending all of the tweets just into",
    "start": "2264920",
    "end": "2270470"
  },
  {
    "text": "Kinesis at the moment there's no s3 archiving going on so I'm just going to show you how you'd implement that with",
    "start": "2270470",
    "end": "2276050"
  },
  {
    "text": "Kinesis",
    "start": "2276050",
    "end": "2278590"
  },
  {
    "text": "okay so within Kinesis Kinesis has the concept of a data stream this is the",
    "start": "2282890",
    "end": "2289500"
  },
  {
    "text": "collector that collects all the messages sent into it and then you need to choose what you want to do with that data",
    "start": "2289500",
    "end": "2294570"
  },
  {
    "text": "stream so the archiving 2s3 for example or run SQL queries across it I'm gonna",
    "start": "2294570",
    "end": "2300060"
  },
  {
    "text": "create a new delivery stream here in Kinesis and I say it tweets to s3 I'm",
    "start": "2300060",
    "end": "2307950"
  },
  {
    "text": "going to connect this delivery stream up to my production tweet Canisius stream",
    "start": "2307950",
    "end": "2313070"
  },
  {
    "text": "it gives me a chance to transform records so for each individual record that goes through this delivery stream I",
    "start": "2313070",
    "end": "2318900"
  },
  {
    "text": "can use a lambda function to actually modify the record as it goes through and",
    "start": "2318900",
    "end": "2323970"
  },
  {
    "text": "do transformations in this case I'm not going to I'm going to choose my destination so s3 in this case but I",
    "start": "2323970",
    "end": "2331080"
  },
  {
    "text": "could just easily send these search results into Splunk or into elasticsearch and I'm going to choose a",
    "start": "2331080",
    "end": "2337470"
  },
  {
    "text": "bucket here P medics tweets I get to",
    "start": "2337470",
    "end": "2343020"
  },
  {
    "text": "choose how much I want to buffer these tweets that I want archived so I can split them up into five Meg increments",
    "start": "2343020",
    "end": "2349380"
  },
  {
    "text": "so Kinesis is going to take those tweets it's going to zip them up into five Meg bundles I can do things like enable gzip",
    "start": "2349380",
    "end": "2356340"
  },
  {
    "text": "compression on-the-fly to save me some money and s3 it's create an IM role that",
    "start": "2356340",
    "end": "2365700"
  },
  {
    "text": "allows that",
    "start": "2365700",
    "end": "2368180"
  },
  {
    "text": "okay okay I'm with a couple of clicks",
    "start": "2372010",
    "end": "2378970"
  },
  {
    "text": "I've taken those tweets coming into Kinesis and I'm now gonna automatically get an archive in s3 so if later on it",
    "start": "2378970",
    "end": "2386530"
  },
  {
    "text": "decide I want to you know create a machine learning model or something and use this data to train it I've got an archive of all that data so I can now go",
    "start": "2386530",
    "end": "2396250"
  },
  {
    "text": "into s3 and look at my tweets bucket and",
    "start": "2396250",
    "end": "2404560"
  },
  {
    "text": "I see a whole load of stuff in there um so here we go for example this and",
    "start": "2404560",
    "end": "2410470"
  },
  {
    "text": "tweets that have been gzip top so in this case I've got my tweet collector collecting the tweets I've got my",
    "start": "2410470",
    "end": "2415630"
  },
  {
    "text": "archivist send them onto Kinesis and Kinesis archiving off to s3 and optionally allowing me to send them",
    "start": "2415630",
    "end": "2421240"
  },
  {
    "text": "other places too let's go in any questions so far no yes",
    "start": "2421240",
    "end": "2432030"
  },
  {
    "text": "yes that's a really good question so the question was hey Paul you just showed me a load of manual stuff after telling me",
    "start": "2434540",
    "end": "2440510"
  },
  {
    "text": "not to do manual stuff basically to paraphrase everything I showed you there manually was just kind of visually to",
    "start": "2440510",
    "end": "2446270"
  },
  {
    "text": "get the point across everything I showed you can and in reality in a production environment probably should be done with",
    "start": "2446270",
    "end": "2451310"
  },
  {
    "text": "cloud formation so yeah that would be the preferred way I just wanted to highlight some of those features as we went through I think it's also important",
    "start": "2451310",
    "end": "2458900"
  },
  {
    "text": "to say as well I've I've gone with the more advanced method of using cloud formation to deploy all of this if you",
    "start": "2458900",
    "end": "2464870"
  },
  {
    "text": "wanted to just get started with ecs and deploy your first containers you can use the management console as well there's a wizard that will guide you through that",
    "start": "2464870",
    "end": "2471050"
  },
  {
    "text": "process okay so next steps here if I",
    "start": "2471050",
    "end": "2478970"
  },
  {
    "text": "wanted to take this further we recently released a blog post reference architecture that basically takes this",
    "start": "2478970",
    "end": "2485090"
  },
  {
    "text": "Twitter analysis concept a bit further using machine learning using things like quick site for graphing you can actually",
    "start": "2485090",
    "end": "2491420"
  },
  {
    "text": "deploy this this whole architecture would it click from this blog post and this blog post it's quite interesting",
    "start": "2491420",
    "end": "2497540"
  },
  {
    "text": "read using machine learning against tweets to try and predict certain environments and conditions okay so",
    "start": "2497540",
    "end": "2504350"
  },
  {
    "text": "we've got an application a really quick basic rudimentary application what else do we need for production with ECS cost",
    "start": "2504350",
    "end": "2513140"
  },
  {
    "text": "optimization at some point when you first move to containers if you're an organization that uses ec2 today for",
    "start": "2513140",
    "end": "2519950"
  },
  {
    "text": "example and deploys your applications you know one or two or three ec2 instances per application containers are",
    "start": "2519950",
    "end": "2527660"
  },
  {
    "text": "probably a really attractive proposition they allow you to BIM pack down better get better usage of your containers your",
    "start": "2527660",
    "end": "2533840"
  },
  {
    "text": "instances so you'll probably save some money by moving to containers in terms of R or ec2 costs and you'll run like",
    "start": "2533840",
    "end": "2540800"
  },
  {
    "text": "that and you'll run like that but at some point you may want to save more money so with ECS you're free to use the",
    "start": "2540800",
    "end": "2547520"
  },
  {
    "text": "normal ec2 pricing models so reserved instances this is a really common one you can reserve an instance if you know",
    "start": "2547520",
    "end": "2554480"
  },
  {
    "text": "for example I've got a baseline capacity requirement requirement in my cluster of like ten instances",
    "start": "2554480",
    "end": "2560840"
  },
  {
    "text": "sometimes I pick above that sometimes not but generally I have about ten instances worth of workload you can",
    "start": "2560840",
    "end": "2567180"
  },
  {
    "text": "she reserved those instances and commit to like a one or three-year commit and in return AWS is going to give you a",
    "start": "2567180",
    "end": "2573240"
  },
  {
    "text": "price reduction on those instances so it's a really common option use reserved",
    "start": "2573240",
    "end": "2578339"
  },
  {
    "text": "instances to reserve your baseline capacity requirements and just burst into on-demand pricing as you need to",
    "start": "2578339",
    "end": "2586280"
  },
  {
    "text": "the next one is spot instances so ECS fully supports spot instances if you",
    "start": "2586280",
    "end": "2592530"
  },
  {
    "text": "haven't seen spot before it's a really really good way of saving money on AWS so it allows you to bid for unused",
    "start": "2592530",
    "end": "2598859"
  },
  {
    "text": "capacity in our date centers and you get a really really good cost saving on doing this so up to ninety percent on on",
    "start": "2598859",
    "end": "2605130"
  },
  {
    "text": "some instances so really good cost saving the caveat is at any point we could take those instances away from you",
    "start": "2605130",
    "end": "2611640"
  },
  {
    "text": "with two minutes warning okay so typically when you use spot",
    "start": "2611640",
    "end": "2617670"
  },
  {
    "text": "traditionally you always bid it on a cow on an m4 large and I want it in this particular availability zone and if we",
    "start": "2617670",
    "end": "2623730"
  },
  {
    "text": "suddenly had a run on m4 lodges in that availability zone and the price went up above what you bid it you'd lose our",
    "start": "2623730",
    "end": "2630089"
  },
  {
    "text": "instance and it's not great for production when that happens obviously so you can actually use spot fleet",
    "start": "2630089",
    "end": "2636960"
  },
  {
    "text": "within ECS really easily and it allows you to say you know what I don't really care what instance type I use doesn't",
    "start": "2636960",
    "end": "2643680"
  },
  {
    "text": "really matter to me I've got this big pool of compute what I really care about is I want this much CPU or this much",
    "start": "2643680",
    "end": "2648869"
  },
  {
    "text": "memory across these AZ's my spot go away work it out and by using spot FLE you're",
    "start": "2648869",
    "end": "2654900"
  },
  {
    "text": "actually diversifying your bidding strategy with spot there so you're much much less likely to get those instances",
    "start": "2654900",
    "end": "2661049"
  },
  {
    "text": "taken away from you that said it's a risk cost-saving conversation for every company I know financial institutions that run",
    "start": "2661049",
    "end": "2668700"
  },
  {
    "text": "spot for production workloads and they feel confident with it I know some companies that just want to run dev tests on spot",
    "start": "2668700",
    "end": "2674520"
  },
  {
    "text": "even if you're just running dev test on spot you can probably save a lot of money so encourage looking into that",
    "start": "2674520",
    "end": "2680900"
  },
  {
    "text": "nothing with ECS is to make use of multiple ICS clusters to deploy an HTS",
    "start": "2680900",
    "end": "2686220"
  },
  {
    "text": "cluster is easy its quick so actually having multiple ICS clusters is pretty normal they make a really good boundary",
    "start": "2686220",
    "end": "2693210"
  },
  {
    "text": "for isolation for dev versus prod for example so that your dev and prop containers are running on different",
    "start": "2693210",
    "end": "2699059"
  },
  {
    "text": "infrastructure behind the scene and like a kernel exploit for example isn't going to allow a dev container to",
    "start": "2699059",
    "end": "2705170"
  },
  {
    "text": "break out into a production container so using separate ec2 instances under the",
    "start": "2705170",
    "end": "2711680"
  },
  {
    "text": "hood for that isolation by using separate clusters is really powerful it also means you can use different pricing",
    "start": "2711680",
    "end": "2717200"
  },
  {
    "text": "strategies for different containers so you may say dev spots fine in production we want to use that auto scaling group",
    "start": "2717200",
    "end": "2723530"
  },
  {
    "text": "strategy we've reserved instance as I mentioned or maybe you want to have a cluster for all of your PCI certified",
    "start": "2723530",
    "end": "2729830"
  },
  {
    "text": "work clothes so that when you go through a PCI audit the scope of the PCI order is just the stuff running in that",
    "start": "2729830",
    "end": "2735560"
  },
  {
    "text": "cluster like these are all common use cases for creating separate clusters",
    "start": "2735560",
    "end": "2741010"
  },
  {
    "text": "scaling had a scaling work with ECS so there's two dimensions to scaling on ECS",
    "start": "2741010",
    "end": "2747470"
  },
  {
    "text": "the first one is your container instances the ec2 instances that actually run your containers because",
    "start": "2747470",
    "end": "2753170"
  },
  {
    "text": "they're just ec2 instances you can use normally situ primitives like auto scaling so you can sell one an auto",
    "start": "2753170",
    "end": "2758930"
  },
  {
    "text": "scaling group that spans all the availability zones and I want it to scale up and down automatically as",
    "start": "2758930",
    "end": "2764720"
  },
  {
    "text": "needed so I have this nice fluid pool of compute a good recommendation for what",
    "start": "2764720",
    "end": "2771800"
  },
  {
    "text": "to use as that scaling metric is the memory reservation metric in cloud watch so when you deploy a container typically",
    "start": "2771800",
    "end": "2779210"
  },
  {
    "text": "you'd reserve amount of memory for that container so you know as you deploy more and more containers you need to scale up",
    "start": "2779210",
    "end": "2784790"
  },
  {
    "text": "based on that so that's a good one I'm going to show you some more resources for some more advanced strategies here",
    "start": "2784790",
    "end": "2790580"
  },
  {
    "text": "right at the end of the presentation so I can scale up and down my pool of compute automatically I could do that by",
    "start": "2790580",
    "end": "2797750"
  },
  {
    "text": "this I could even do a very custom metric if I wanted like some field in a database or something and then there's",
    "start": "2797750",
    "end": "2804170"
  },
  {
    "text": "actually scaling of your containers so you scale in and out your pool of compute but then maybe I'm running an",
    "start": "2804170",
    "end": "2810320"
  },
  {
    "text": "engine X container and I know each nginx container can handle 30,000 transactions a second for example so I want to scale",
    "start": "2810320",
    "end": "2817040"
  },
  {
    "text": "in and out the number of containers I'm running so you can do any very very similar thing but with your actual",
    "start": "2817040",
    "end": "2822620"
  },
  {
    "text": "containers and tasks and scale out how many of your tasks and contains is running at any point in time scale them",
    "start": "2822620",
    "end": "2828500"
  },
  {
    "text": "out and scale them back in automatically and in terms of the metric to use for these it",
    "start": "2828500",
    "end": "2834319"
  },
  {
    "text": "really depends on each application there's no hard and fast rule for what's the best practice here but you can",
    "start": "2834319",
    "end": "2839630"
  },
  {
    "text": "choose metrics such as CPU or memory or custom metrics like number of transactions a second okay security what",
    "start": "2839630",
    "end": "2850309"
  },
  {
    "text": "should I do about security with ECS what do I need to think about here one of the questions that comes up quite often is",
    "start": "2850309",
    "end": "2856219"
  },
  {
    "text": "okay I've got my pool of computer up and running my ec2 instances how do I update them and how do i patch them and this is",
    "start": "2856219",
    "end": "2863059"
  },
  {
    "text": "actually pretty easy if you're using cloud formation so AWS publish an optimized am I the the operating system",
    "start": "2863059",
    "end": "2870199"
  },
  {
    "text": "base image specifically for ecs it comes with the ECS Asian and docker all pre",
    "start": "2870199",
    "end": "2875269"
  },
  {
    "text": "installed and configured with some optimizations and we publish an SNS topic every time we make a change or an",
    "start": "2875269",
    "end": "2881630"
  },
  {
    "text": "update to that ami so you can hook into that automated feed and always know which is the latest ami then in your",
    "start": "2881630",
    "end": "2888319"
  },
  {
    "text": "cloud formation template in that reference architecture I showed you or your cloud formation templates you can",
    "start": "2888319",
    "end": "2893539"
  },
  {
    "text": "just replace the ami ID with a new one cloud formation behind the scenes is going to use something called an auto",
    "start": "2893539",
    "end": "2899929"
  },
  {
    "text": "scaling rolling update policy yeah so within that reference architecture I",
    "start": "2899929",
    "end": "2905479"
  },
  {
    "text": "showed you there's already one defined and it basically says do a staged rollout of this change that's just been",
    "start": "2905479",
    "end": "2911150"
  },
  {
    "text": "made don't go and take down all my container instances all at once do one at a time or two at a time or whatever",
    "start": "2911150",
    "end": "2917209"
  },
  {
    "text": "that batch size that you choose should be and it gives you flexibility and an automated way of doing these zero",
    "start": "2917209",
    "end": "2923119"
  },
  {
    "text": "downtime deployments just by changing that ami ID the other side of patching",
    "start": "2923119",
    "end": "2929479"
  },
  {
    "text": "is containers so actually patching what's inside your containers and this is something I don't hear customers",
    "start": "2929479",
    "end": "2935630"
  },
  {
    "text": "talking about enough or asking about is actually the security of what goes on inside your containers there's a couple",
    "start": "2935630",
    "end": "2942019"
  },
  {
    "text": "of nice solutions in the market like aqua security have one twist lock is another one I'm showing here and this",
    "start": "2942019",
    "end": "2948439"
  },
  {
    "text": "basically slots into your CI CD pipeline and whenever a docker file is committed into version control this is going to go",
    "start": "2948439",
    "end": "2954829"
  },
  {
    "text": "away and build it and it's going to make sure that none of the packages or dependencies and within that container have any vulnerabilities or CVS etc it's",
    "start": "2954829",
    "end": "2963229"
  },
  {
    "text": "then able just to reject it straight away and never put that container into production it doesn't pass your security",
    "start": "2963229",
    "end": "2968670"
  },
  {
    "text": "requirements so really easy way to drop container scanning into your CI CD pipeline so twistlock",
    "start": "2968670",
    "end": "2975480"
  },
  {
    "text": "these guys aqua is the other main one I hear about here another top tip is to",
    "start": "2975480",
    "end": "2983099"
  },
  {
    "text": "try and keep your containers as small as possible so in my example my containers for those",
    "start": "2983099",
    "end": "2988170"
  },
  {
    "text": "go Micra services I wrote were like 600 Meg because I just used the default go base container which compiles it and has",
    "start": "2988170",
    "end": "2995520"
  },
  {
    "text": "the whole runtime and basically half of Linux built into that container so actually what I should have done and",
    "start": "2995520",
    "end": "3001160"
  },
  {
    "text": "could have done is to start from a small base for my container so within docker you have the scratch image which is basically an empty image",
    "start": "3001160",
    "end": "3008240"
  },
  {
    "text": "nothing inside it at all and because go compiles static binaries I can just add",
    "start": "3008240",
    "end": "3013250"
  },
  {
    "text": "in my binary and that's enough it doesn't need a full operating system and all the security risk and patching",
    "start": "3013250",
    "end": "3018680"
  },
  {
    "text": "requirements that come with that so wherever possible keep your containers as small as possible and keep",
    "start": "3018680",
    "end": "3024079"
  },
  {
    "text": "that surface area down to minimize your risk another security front here is I am",
    "start": "3024079",
    "end": "3032480"
  },
  {
    "text": "roles so ec2 has had the concept of iam roles for a long time they allow you to",
    "start": "3032480",
    "end": "3039380"
  },
  {
    "text": "assign to your ec2 instances permissions in AWS so I can have an ec2 instance",
    "start": "3039380",
    "end": "3044869"
  },
  {
    "text": "that is allowed to access s3 for example and you can do that at the host level with ECS that just means every container",
    "start": "3044869",
    "end": "3052550"
  },
  {
    "text": "on that host is going to get those same permissions it's not very granular you may want to do that at times because",
    "start": "3052550",
    "end": "3057560"
  },
  {
    "text": "every container talks to a specific monitoring system or something but it's pretty rare generally what people want",
    "start": "3057560",
    "end": "3063770"
  },
  {
    "text": "to use most of the time is I am roles scope down to an individual container or task so ECS allows you to do that when",
    "start": "3063770",
    "end": "3070880"
  },
  {
    "text": "you launch a task you can just say hey give it this AWS I am role and it's gonna get all those permissions and it's",
    "start": "3070880",
    "end": "3076910"
  },
  {
    "text": "gonna be very granular in scope down here monitoring and logging I showed you",
    "start": "3076910",
    "end": "3083780"
  },
  {
    "text": "the monitoring and logging quickly that was included out of the box with ECS you get monitoring the cloud watch so I can",
    "start": "3083780",
    "end": "3089630"
  },
  {
    "text": "go and see a cluster level or an individual service level my CPU my memory metrics and",
    "start": "3089630",
    "end": "3094940"
  },
  {
    "text": "reservations etc I can actually go a bit deeper and look at things like Layton sees on my load balancers and",
    "start": "3094940",
    "end": "3101270"
  },
  {
    "text": "how many 500 errors I'm getting and all this is there out of the box for you if you don't want to use cloud watch",
    "start": "3101270",
    "end": "3106940"
  },
  {
    "text": "there's an open-source Prometheus exporter for ECS so if you're running Prometheus internally today as an",
    "start": "3106940",
    "end": "3113660"
  },
  {
    "text": "alternative solution for monitoring you can just have ecs report all of its metrics directly into Prometheus",
    "start": "3113660",
    "end": "3121329"
  },
  {
    "text": "centralized logging I showed you is a couple of other options there for the different plugins so if you're running Splunk and don't want to use cloud watch",
    "start": "3122290",
    "end": "3128330"
  },
  {
    "text": "logs for example you don't have to so loads of different options for centralized logging we saw those",
    "start": "3128330",
    "end": "3134600"
  },
  {
    "text": "centralized logging console earlier metric filters really cool feature if",
    "start": "3134600",
    "end": "3140480"
  },
  {
    "text": "you're using cloud water logs I recommend looking into metric filters on",
    "start": "3140480",
    "end": "3146060"
  },
  {
    "text": "a wrap-up with a slide if you take one thing away from this whole talk take this away this is a repository on github",
    "start": "3146060",
    "end": "3153620"
  },
  {
    "text": "published by one of our developer advocates Nathan Peck say he's a nice es developer advocate and he's basically",
    "start": "3153620",
    "end": "3159890"
  },
  {
    "text": "spent the last year or two collecting aggregating every bit of call information every call open-source",
    "start": "3159890",
    "end": "3165770"
  },
  {
    "text": "project etc related to containers are related to ECS so if I just open this up",
    "start": "3165770",
    "end": "3171740"
  },
  {
    "text": "here [Applause]",
    "start": "3171740",
    "end": "3181780"
  },
  {
    "text": "awesome ECS okay so this github repository it's got a whole lotta",
    "start": "3181780",
    "end": "3187430"
  },
  {
    "text": "sections right from things like okay I want to do self hosting in ec2 or want to use Fargate if I want to use",
    "start": "3187430",
    "end": "3193820"
  },
  {
    "text": "infrastructure as code we spoke today about cloud formation but hey what if we're a terraform shop there's links to",
    "start": "3193820",
    "end": "3199670"
  },
  {
    "text": "the equivalent in terraform pointment tools that people have created",
    "start": "3199670",
    "end": "3205730"
  },
  {
    "text": "things like empire or cold Brews so these offer like a higher level",
    "start": "3205730",
    "end": "3211650"
  },
  {
    "text": "abstraction on top of ECS so nice easy command-line tooling to use load of",
    "start": "3211650",
    "end": "3217619"
  },
  {
    "text": "implementation guides on like what's the best practices for scaling etc how to use things like link addy and weave",
    "start": "3217619",
    "end": "3224010"
  },
  {
    "text": "works and how to do data persistence says a whole load of resources here and",
    "start": "3224010",
    "end": "3229099"
  },
  {
    "text": "recommend going and checking this out I'll leave that github repo at the top there and that's it from me I think",
    "start": "3229099",
    "end": "3237540"
  },
  {
    "text": "we've got 10 minutes or so for questions if people want yes sir",
    "start": "3237540",
    "end": "3244640"
  },
  {
    "text": "it goes well so round reinvent time so November time we launched Windows",
    "start": "3248540",
    "end": "3255290"
  },
  {
    "text": "there's been in preview for a while windows containers with ECS is now generally available and ready for",
    "start": "3255290",
    "end": "3260490"
  },
  {
    "text": "production use so you can spin up clusters that have Windows hosts in them and you can deploy your windows",
    "start": "3260490",
    "end": "3265920"
  },
  {
    "text": "containers to Windows hosts if you're using that core you could just deploy them as normal on linux anyway but you",
    "start": "3265920",
    "end": "3271410"
  },
  {
    "text": "have the option now to run Windows containers there's a really good talk on YouTube done by one of the engineers on",
    "start": "3271410",
    "end": "3278069"
  },
  {
    "text": "the UCS team at reinvent on Windows containers etc there's got a load more",
    "start": "3278069",
    "end": "3283170"
  },
  {
    "text": "detail there so I recommend that yes sir",
    "start": "3283170",
    "end": "3288588"
  },
  {
    "text": "I'm so ser the container registry the question was when are we gonna start to version it and ship compiled binaries",
    "start": "3295760",
    "end": "3303110"
  },
  {
    "text": "I'm not sure I understand what you mean about um versioning that like when you push a container image so ECR the",
    "start": "3303110",
    "end": "3315480"
  },
  {
    "text": "container registry that you push see I built a dock sorry the credential helper",
    "start": "3315480",
    "end": "3322500"
  },
  {
    "text": "isn't versioned okay that's really good feedback um let me go back and take that back to the team because yeah that",
    "start": "3322500",
    "end": "3329070"
  },
  {
    "text": "should have a deployment and update and release strategy if there isn't one today thank you yep okay okay so the",
    "start": "3329070",
    "end": "3362010"
  },
  {
    "text": "question was around security between containers so container to contain a security and and load balancing etc so",
    "start": "3362010",
    "end": "3371010"
  },
  {
    "text": "let me talk through the two options so that you have the first option you have is the V PC constructs itself our PCI",
    "start": "3371010",
    "end": "3378870"
  },
  {
    "text": "certified right you can take PCI workloads you can run them in B PC and we certify the security of V pcs to that",
    "start": "3378870",
    "end": "3386010"
  },
  {
    "text": "level you know a load of other different security compliance credentials as well so you can be safe that when you're",
    "start": "3386010",
    "end": "3391980"
  },
  {
    "text": "deploying into V PC the communication within a V PC is secure and is safe now",
    "start": "3391980",
    "end": "3397290"
  },
  {
    "text": "may be that you want to go one step further and you want to have okay within my V PC how do I stop a bad actor you",
    "start": "3397290",
    "end": "3404610"
  },
  {
    "text": "know listen if they get onto a host etc how do I stop that maybe I have a corporate requirement for encrypted",
    "start": "3404610",
    "end": "3410070"
  },
  {
    "text": "traffic even within the V PC you can totally do that I worked with a financial organization",
    "start": "3410070",
    "end": "3415500"
  },
  {
    "text": "in the UK to help them implement that they basically use hash occult vault as a PKI",
    "start": "3415500",
    "end": "3421470"
  },
  {
    "text": "and their issues certificates on container launch time so container the every container has a",
    "start": "3421470",
    "end": "3428070"
  },
  {
    "text": "sidecar container with nginx in front that basically verifies a mutual TLS",
    "start": "3428070",
    "end": "3433320"
  },
  {
    "text": "authentication and the containers get given their certificates when they come up by a higher court vault it's quite a",
    "start": "3433320",
    "end": "3440070"
  },
  {
    "text": "nice solution in actually their certificates they only sign them for three days so after three days a",
    "start": "3440070",
    "end": "3445740"
  },
  {
    "text": "certificate is useless and each of the containers roll every 24 hours or so so",
    "start": "3445740",
    "end": "3451020"
  },
  {
    "text": "they they have this constantly moving fleet which is a nice security product to that the downside to this approach",
    "start": "3451020",
    "end": "3457260"
  },
  {
    "text": "and this is really why it's always a trade-off between convenience and security is because of all of the",
    "start": "3457260",
    "end": "3462960"
  },
  {
    "text": "communication is now TLS within your V PC you can't use HTTP load balancers",
    "start": "3462960",
    "end": "3468120"
  },
  {
    "text": "anymore you can't use layer seven load balancers you can't have HTTP based checks on your load balancers so all of",
    "start": "3468120",
    "end": "3474600"
  },
  {
    "text": "a sudden all of your low bounces are going to be TCP only load balancers and the only thing they're going to be able to do to healthcheck a service is just",
    "start": "3474600",
    "end": "3481800"
  },
  {
    "text": "look at the tcp port and say is it open is it not open so you kind of dumb down the health checking capabilities so",
    "start": "3481800",
    "end": "3488430"
  },
  {
    "text": "that's something to be very aware of it is very much a trade-off from convenience security there so taken I",
    "start": "3488430",
    "end": "3494610"
  },
  {
    "text": "wouldn't take that decision too lightly but ultimately the way you choose to go both are supported it will depend on",
    "start": "3494610",
    "end": "3500340"
  },
  {
    "text": "your risk and security requirements yeah",
    "start": "3500340",
    "end": "3513860"
  },
  {
    "text": "yeah and that's that's that's what this financial log we're doing it just means that all of a sudden you can't use HTTP",
    "start": "3517490",
    "end": "3525450"
  },
  {
    "text": "load balancers and health checks between Samuel aside yeah yeah so this is a",
    "start": "3525450",
    "end": "3540270"
  },
  {
    "text": "feature request I've had a number of times I don't have an amazing arms if you I can't say yeah we work and it's",
    "start": "3540270",
    "end": "3545280"
  },
  {
    "text": "gonna be there tomorrow we've heard that feature request loud and clear we have a lot of customers",
    "start": "3545280",
    "end": "3551220"
  },
  {
    "text": "that want to do mutual TLS and their architectures generally when we see people doing the same thing over and over and struggling",
    "start": "3551220",
    "end": "3557119"
  },
  {
    "text": "with it that's exactly the sort of time that AWS comes in and productionize is that so I can't say any more here but",
    "start": "3557119",
    "end": "3563630"
  },
  {
    "text": "we've definitely heard that requirement loud and clear yes the header",
    "start": "3563630",
    "end": "3577550"
  },
  {
    "text": "information possibly but then you're going to be doing that encryption",
    "start": "3577550",
    "end": "3582650"
  },
  {
    "text": "decryption within your application at the application layer yeah possibly um",
    "start": "3582650",
    "end": "3588940"
  },
  {
    "text": "be interesting like if you play around that and get that working let me know and we can we can work on a blog post",
    "start": "3588940",
    "end": "3594980"
  },
  {
    "text": "together or something yes yes yeah yeah",
    "start": "3594980",
    "end": "3651400"
  },
  {
    "text": "not today that I've seen but I think that's a really good feedback to be honest I'm at the moment yes with lambda",
    "start": "3653509",
    "end": "3664410"
  },
  {
    "text": "you have environment variables and you can choose to encrypt them with kms and I yeah it would be great to have some",
    "start": "3664410",
    "end": "3670289"
  },
  {
    "text": "tighter integration here again happy to take that feedback back to the team if you can find me afterwards and we can",
    "start": "3670289",
    "end": "3677400"
  },
  {
    "text": "write like a couple of sentences about your use case there I'm sure it's pretty generic for everyone's but we can take",
    "start": "3677400",
    "end": "3682829"
  },
  {
    "text": "that back yes parameter store isn't",
    "start": "3682829",
    "end": "3708079"
  },
  {
    "text": "limited to ECS at all it's it's a separate service you just got a simple put and get API and that you can",
    "start": "3708079",
    "end": "3715769"
  },
  {
    "text": "integrate with lambda you can integrate it with e CS etc and there's a lot of",
    "start": "3715769",
    "end": "3721079"
  },
  {
    "text": "flexibility there it's not tied to one particular methodology at the moment but to that point it would be nicer to have",
    "start": "3721079",
    "end": "3726299"
  },
  {
    "text": "some better integration there I understand that completely ok let's wrap",
    "start": "3726299",
    "end": "3732720"
  },
  {
    "text": "it up if anyone has any other questions for me feel free to come for me I'm doing another talk in two minutes time",
    "start": "3732720",
    "end": "3737999"
  },
  {
    "text": "on kubernetes in here but come find me over lunch and I'm happy to dive into this stuff thank you",
    "start": "3737999",
    "end": "3745090"
  },
  {
    "text": "[Applause]",
    "start": "3745090",
    "end": "3748309"
  }
]