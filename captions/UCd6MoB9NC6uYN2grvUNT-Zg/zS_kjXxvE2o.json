[
  {
    "start": "0",
    "end": "65000"
  },
  {
    "text": "- Welcome to today's\nvideo on Better Together.",
    "start": "0",
    "end": "3090"
  },
  {
    "text": "In this video, I'm going to talk about how",
    "start": "3090",
    "end": "5520"
  },
  {
    "text": "to identify relational database workloads",
    "start": "5520",
    "end": "8730"
  },
  {
    "text": "that benefit from being\npaired with AWS ElastiCache.",
    "start": "8730",
    "end": "13260"
  },
  {
    "text": "Meaning that when you pair\nyour existing RDBMS workload",
    "start": "13260",
    "end": "17370"
  },
  {
    "text": "with AWS ElastiCache,",
    "start": "17370",
    "end": "19410"
  },
  {
    "text": "your workload will have\na boost in performance",
    "start": "19410",
    "end": "21900"
  },
  {
    "text": "and a reduction in total cost.",
    "start": "21900",
    "end": "24180"
  },
  {
    "text": "In other words, the two services together",
    "start": "24180",
    "end": "26490"
  },
  {
    "text": "are better for your workload.",
    "start": "26490",
    "end": "28200"
  },
  {
    "text": "However, not all workloads\nare good candidates.",
    "start": "28200",
    "end": "31902"
  },
  {
    "text": "In today's video, I will\nshare information about tools",
    "start": "31902",
    "end": "35850"
  },
  {
    "text": "and techniques that will help you",
    "start": "35850",
    "end": "37850"
  },
  {
    "text": "to identify specific RDBMS workloads",
    "start": "37850",
    "end": "41160"
  },
  {
    "text": "that are good candidates to\nbe paired with ElastiCache.",
    "start": "41160",
    "end": "44233"
  },
  {
    "text": "Subsequent videos will\nfocus on other aspects",
    "start": "46440",
    "end": "48989"
  },
  {
    "text": "of Better Together, such as\ncaching techniques, modeling,",
    "start": "48990",
    "end": "52860"
  },
  {
    "text": "and comparing architectures\nthat will result",
    "start": "52860",
    "end": "55410"
  },
  {
    "text": "in cost savings, and a\nboost in performance.",
    "start": "55410",
    "end": "58560"
  },
  {
    "text": "Hello, my name is Steven Hancz.",
    "start": "58560",
    "end": "60660"
  },
  {
    "text": "I'm a senior solutions\narchitect with Amazon AWS.",
    "start": "60660",
    "end": "64413"
  },
  {
    "start": "65000",
    "end": "148000"
  },
  {
    "text": "Before we get into the\ndetails and the tools",
    "start": "66090",
    "end": "68250"
  },
  {
    "text": "and the techniques, first we\nhave to understand the economy",
    "start": "68250",
    "end": "71640"
  },
  {
    "text": "of scale, scaling your\ncurrent relation of database.",
    "start": "71640",
    "end": "75690"
  },
  {
    "text": "If you look at this graph, on the X axis,",
    "start": "75690",
    "end": "79140"
  },
  {
    "text": "we represent the request per second,",
    "start": "79140",
    "end": "81570"
  },
  {
    "text": "and on the Y axis is the cost of debt.",
    "start": "81570",
    "end": "83850"
  },
  {
    "text": "As you can see, early on,\nthe curve is fairly flat",
    "start": "83850",
    "end": "86760"
  },
  {
    "text": "and shallow, but as the\nnumber of requests increases,",
    "start": "86760",
    "end": "90240"
  },
  {
    "text": "so will the cost for\nyour relational database.",
    "start": "90240",
    "end": "94320"
  },
  {
    "text": "This has to do inherently",
    "start": "94320",
    "end": "95700"
  },
  {
    "text": "with the scaling techniques\navailable to your database,",
    "start": "95700",
    "end": "99360"
  },
  {
    "text": "which I will get into\nmore detail later on.",
    "start": "99360",
    "end": "101340"
  },
  {
    "text": "So you'll see why this curve\nhas the current appearance.",
    "start": "101340",
    "end": "106340"
  },
  {
    "text": "Now, what if I were to tell you",
    "start": "106350",
    "end": "107939"
  },
  {
    "text": "that we can flatten this curve?",
    "start": "107940",
    "end": "109350"
  },
  {
    "text": "It can make it significantly\nflatter if you were",
    "start": "109350",
    "end": "111930"
  },
  {
    "text": "to add a caching service\nto your existing workload.",
    "start": "111930",
    "end": "115890"
  },
  {
    "text": "So this next line represents\nthe cost of request per second",
    "start": "115890",
    "end": "119640"
  },
  {
    "text": "when you pair your workload\nwith AWS ElastiCache.",
    "start": "119640",
    "end": "123347"
  },
  {
    "text": "You can see that it becomes much flatter",
    "start": "124269",
    "end": "126299"
  },
  {
    "text": "at the way higher rate\nof requests per second.",
    "start": "126300",
    "end": "129539"
  },
  {
    "text": "In today's video, I will show you tools",
    "start": "129540",
    "end": "131969"
  },
  {
    "text": "and techniques that will\nhelp you identify workloads",
    "start": "131970",
    "end": "133923"
  },
  {
    "text": "that are good candidates to\nflatten the curve, even find",
    "start": "133923",
    "end": "137820"
  },
  {
    "text": "that intersection from\nwhich point on to the left",
    "start": "137820",
    "end": "140070"
  },
  {
    "text": "or right, is your workload located so",
    "start": "140070",
    "end": "142890"
  },
  {
    "text": "that you could have the best advantage",
    "start": "142890",
    "end": "144496"
  },
  {
    "text": "by using the two services together.",
    "start": "144496",
    "end": "147093"
  },
  {
    "start": "148000",
    "end": "302000"
  },
  {
    "text": "So let's just look at\nexisting scaling techniques",
    "start": "149070",
    "end": "152280"
  },
  {
    "text": "of relational databases.",
    "start": "152280",
    "end": "154440"
  },
  {
    "text": "But practically all architectures\nlook something like this",
    "start": "154440",
    "end": "157980"
  },
  {
    "text": "where you have clients either you know,",
    "start": "157980",
    "end": "160290"
  },
  {
    "text": "straight applications or\nserverless, depending on",
    "start": "160290",
    "end": "162840"
  },
  {
    "text": "what your architecture is\nthat connect to a database",
    "start": "162840",
    "end": "166019"
  },
  {
    "text": "that executes read and write commands,",
    "start": "166020",
    "end": "168300"
  },
  {
    "text": "and it's nothing new there.",
    "start": "168300",
    "end": "170220"
  },
  {
    "text": "However, in the past few years,",
    "start": "170220",
    "end": "171810"
  },
  {
    "text": "we have gotten very good\nat scaling applications.",
    "start": "171810",
    "end": "175080"
  },
  {
    "text": "This is due to microservices",
    "start": "175080",
    "end": "176160"
  },
  {
    "text": "and containerized solutions.",
    "start": "176160",
    "end": "178230"
  },
  {
    "text": "So applications can scale\nvery easily and dynamically.",
    "start": "178230",
    "end": "182760"
  },
  {
    "text": "But when it comes to databases,",
    "start": "182760",
    "end": "184349"
  },
  {
    "text": "we only have a couple of options.",
    "start": "184350",
    "end": "185550"
  },
  {
    "text": "The first one is scaling vertically.",
    "start": "185550",
    "end": "188250"
  },
  {
    "text": "This is when we add a bigger",
    "start": "188250",
    "end": "189870"
  },
  {
    "text": "and bigger instance to satisfy\nthe application demands.",
    "start": "189870",
    "end": "194640"
  },
  {
    "text": "Now, however, we can\nonly scale up to so far",
    "start": "194640",
    "end": "196890"
  },
  {
    "text": "because there's only so much",
    "start": "196890",
    "end": "198000"
  },
  {
    "text": "of a bigger instance\nthat we could provide.",
    "start": "198000",
    "end": "200700"
  },
  {
    "text": "When we exhaust that or\nbecause of other limitations,",
    "start": "200700",
    "end": "204270"
  },
  {
    "text": "we add something called read replicas.",
    "start": "204270",
    "end": "207120"
  },
  {
    "text": "Read replicas help you\noffload read requests",
    "start": "207120",
    "end": "209819"
  },
  {
    "text": "from the primary database\nto multiple read replicas.",
    "start": "209820",
    "end": "212790"
  },
  {
    "text": "So the reads are gonna happen\nout of this read replicas,",
    "start": "212790",
    "end": "215819"
  },
  {
    "text": "that's what they're, called read replicas",
    "start": "215820",
    "end": "217200"
  },
  {
    "text": "often this is called\nscaling out technique.",
    "start": "217200",
    "end": "220620"
  },
  {
    "text": "Both of these have been around\nfor some time well known",
    "start": "220620",
    "end": "224549"
  },
  {
    "text": "and used by developers and architects.",
    "start": "224550",
    "end": "226830"
  },
  {
    "text": "However, they both have limitations.",
    "start": "226830",
    "end": "228510"
  },
  {
    "text": "First of all, as I\nmentioned the first one,",
    "start": "228510",
    "end": "230730"
  },
  {
    "text": "you can only scale up up to so much,",
    "start": "230730",
    "end": "232862"
  },
  {
    "text": "and the cost is going",
    "start": "232862",
    "end": "234300"
  },
  {
    "text": "to increase double at\npretty much every step",
    "start": "234300",
    "end": "236400"
  },
  {
    "text": "as you scale up.",
    "start": "236400",
    "end": "237362"
  },
  {
    "text": "And the same thing applies\nat scaling out even more so",
    "start": "238200",
    "end": "241020"
  },
  {
    "text": "because each scaling out\ndatabase adds a full set",
    "start": "241020",
    "end": "243720"
  },
  {
    "text": "of license cost to it\nand replication overhead,",
    "start": "243720",
    "end": "247680"
  },
  {
    "text": "maybe replicating the entire database.",
    "start": "247680",
    "end": "250290"
  },
  {
    "text": "Storage cost, networking cost, management",
    "start": "250290",
    "end": "252665"
  },
  {
    "text": "and maintenance cost.",
    "start": "252665",
    "end": "254222"
  },
  {
    "text": "An alternate architecture to this is",
    "start": "255330",
    "end": "258329"
  },
  {
    "text": "to introduce a caching service.",
    "start": "258330",
    "end": "260459"
  },
  {
    "text": "So the clients still connect\nto your primary database.",
    "start": "260460",
    "end": "262860"
  },
  {
    "text": "They do execute the reads and\nwrites as they did before.",
    "start": "262860",
    "end": "265860"
  },
  {
    "text": "However, the reads update the\ncache so that what happens,",
    "start": "265860",
    "end": "269639"
  },
  {
    "text": "that subsequent reads\nare going to be run out",
    "start": "269640",
    "end": "271890"
  },
  {
    "text": "of the cache instead of the database.",
    "start": "271890",
    "end": "274046"
  },
  {
    "text": "So you upload the read\nrequest to this way faster",
    "start": "274046",
    "end": "278038"
  },
  {
    "text": "and cheaper caching service.",
    "start": "278038",
    "end": "280680"
  },
  {
    "text": "So what are the advantages of this?",
    "start": "280680",
    "end": "282630"
  },
  {
    "text": "Your database remains the same,\neven if your workload were",
    "start": "282630",
    "end": "285540"
  },
  {
    "text": "to change, the database remains the same.",
    "start": "285540",
    "end": "288043"
  },
  {
    "text": "So if you need to scale,",
    "start": "288043",
    "end": "290010"
  },
  {
    "text": "you could just scale the caching service.",
    "start": "290010",
    "end": "291810"
  },
  {
    "text": "You could scale it up",
    "start": "291810",
    "end": "292889"
  },
  {
    "text": "and down dynamically as\nneeded at the much lower cost,",
    "start": "292890",
    "end": "297180"
  },
  {
    "text": "much faster rate, and\noverall better performance.",
    "start": "297180",
    "end": "301353"
  },
  {
    "start": "302000",
    "end": "501000"
  },
  {
    "text": "So let's just talk about ElastiCache.",
    "start": "303030",
    "end": "305220"
  },
  {
    "text": "What is ElastiCache, what it offers?",
    "start": "305220",
    "end": "307200"
  },
  {
    "text": "Let's have a quick introduction\nabout Amazon ElastiCache.",
    "start": "307200",
    "end": "310407"
  },
  {
    "text": "Amazon ElastiCache actually is made up",
    "start": "311616",
    "end": "313290"
  },
  {
    "text": "of two separate services.",
    "start": "313290",
    "end": "315600"
  },
  {
    "text": "The same service supports two engines.",
    "start": "315600",
    "end": "317610"
  },
  {
    "text": "It supports a Redis and Memcached.",
    "start": "317610",
    "end": "320460"
  },
  {
    "text": "They have different advantages",
    "start": "320460",
    "end": "322259"
  },
  {
    "text": "and they're used for different purposes.",
    "start": "322260",
    "end": "324450"
  },
  {
    "text": "For example, the Memcached",
    "start": "324450",
    "end": "325920"
  },
  {
    "text": "is a strictly based caching service",
    "start": "325920",
    "end": "328140"
  },
  {
    "text": "that doesn't offer high availability,",
    "start": "328140",
    "end": "330323"
  },
  {
    "text": "but supports a single data\ntype or string data type,",
    "start": "330323",
    "end": "333382"
  },
  {
    "text": "and it's very good for that.",
    "start": "333382",
    "end": "335280"
  },
  {
    "text": "On the other hand, the Redis based engine",
    "start": "335280",
    "end": "338650"
  },
  {
    "text": "supports 11 data types in addition",
    "start": "338650",
    "end": "342240"
  },
  {
    "text": "to the string caching\nservice it's often used",
    "start": "342240",
    "end": "344490"
  },
  {
    "text": "for other purpose built solutions, such",
    "start": "345906",
    "end": "346920"
  },
  {
    "text": "as leaderboards or session stores.",
    "start": "346920",
    "end": "350640"
  },
  {
    "text": "So they're different and they\nhave different advantages.",
    "start": "350640",
    "end": "354300"
  },
  {
    "text": "The Redis based engine is\nway more highly available.",
    "start": "354300",
    "end": "358169"
  },
  {
    "text": "It supports Multi A-Z and even\nmulti-region applications.",
    "start": "358170",
    "end": "362880"
  },
  {
    "text": "Both of these are fully managed\nservices that are available",
    "start": "362880",
    "end": "366900"
  },
  {
    "text": "to you, and in fact, as\nof late last year, 2023,",
    "start": "366900",
    "end": "370949"
  },
  {
    "text": "it's also offered in a completely\nserverless architecture.",
    "start": "370950",
    "end": "374700"
  },
  {
    "text": "So in the past you had to\nprovision hardware for it,",
    "start": "374700",
    "end": "377670"
  },
  {
    "text": "a one-time hardware provisioning,",
    "start": "377670",
    "end": "379844"
  },
  {
    "text": "and you paid for that\nhardware whether you used it",
    "start": "379844",
    "end": "382199"
  },
  {
    "text": "or not, based on a flat fee.",
    "start": "382200",
    "end": "384144"
  },
  {
    "text": "But last year we introduced\nand we listened to our clients.",
    "start": "384144",
    "end": "387120"
  },
  {
    "text": "We introduced a serverless solution.",
    "start": "387120",
    "end": "389280"
  },
  {
    "text": "The serverless solution\nis very well suited",
    "start": "389280",
    "end": "391770"
  },
  {
    "text": "for variable workloads.",
    "start": "391770",
    "end": "393360"
  },
  {
    "text": "So if you workload changes\nin scale, you don't have",
    "start": "393360",
    "end": "396479"
  },
  {
    "text": "to scale your caching to it.",
    "start": "396480",
    "end": "398640"
  },
  {
    "text": "I.e. acquiring more hardware",
    "start": "398640",
    "end": "400750"
  },
  {
    "text": "because the serverless approach",
    "start": "401640",
    "end": "403440"
  },
  {
    "text": "will scale as needed for you.",
    "start": "403440",
    "end": "406260"
  },
  {
    "text": "So you just pay for consumption.",
    "start": "406260",
    "end": "408033"
  },
  {
    "text": "Both of these are highly\navailable and secure",
    "start": "409380",
    "end": "412050"
  },
  {
    "text": "and extremely fast.",
    "start": "412050",
    "end": "413129"
  },
  {
    "text": "Whether the serverless\nor the instance based.",
    "start": "413130",
    "end": "416403"
  },
  {
    "text": "They support a number of compliances",
    "start": "418080",
    "end": "420569"
  },
  {
    "text": "and they can both scale.",
    "start": "420570",
    "end": "421680"
  },
  {
    "text": "So you could scale the\ninstance based as well,",
    "start": "421680",
    "end": "424289"
  },
  {
    "text": "but you would have to manage it yourself.",
    "start": "424290",
    "end": "426750"
  },
  {
    "text": "So you have to set up your own threshold",
    "start": "426750",
    "end": "428340"
  },
  {
    "text": "and manage it yourself.",
    "start": "428340",
    "end": "429900"
  },
  {
    "text": "So this could end up in over\nunder provisioning depending",
    "start": "429900",
    "end": "432750"
  },
  {
    "text": "on how you monitor it",
    "start": "432750",
    "end": "433583"
  },
  {
    "text": "and how you set up your own auto scaling.",
    "start": "433583",
    "end": "436080"
  },
  {
    "text": "On the other hand, the serverless",
    "start": "436080",
    "end": "438539"
  },
  {
    "text": "will scale instantaneously for you",
    "start": "438540",
    "end": "440760"
  },
  {
    "text": "as it's needed based on the demand.",
    "start": "440760",
    "end": "443013"
  },
  {
    "text": "Let's look at some numbers.",
    "start": "444180",
    "end": "445919"
  },
  {
    "text": "What makes up ElastiCache, why we like it.",
    "start": "445920",
    "end": "448620"
  },
  {
    "text": "But first of all, it's very fast.",
    "start": "448620",
    "end": "449880"
  },
  {
    "text": "You're talking about\nmillisecond response time,",
    "start": "449880",
    "end": "453454"
  },
  {
    "text": "and it's not just the open\nsource version of the software.",
    "start": "453454",
    "end": "457680"
  },
  {
    "text": "As I mentioned, this has been highly tuned",
    "start": "457680",
    "end": "459750"
  },
  {
    "text": "to make it extremely fast\nand effective on our networks",
    "start": "459750",
    "end": "462720"
  },
  {
    "text": "and our hardware offering.",
    "start": "462720",
    "end": "465060"
  },
  {
    "text": "They can scale to very large sizes.",
    "start": "465060",
    "end": "467130"
  },
  {
    "text": "For example, the instance base,",
    "start": "467130",
    "end": "469230"
  },
  {
    "text": "but provision approach can scale up",
    "start": "469230",
    "end": "470690"
  },
  {
    "text": "to 340 terabytes in memory.",
    "start": "470690",
    "end": "474075"
  },
  {
    "text": "And the serverless at\nthis point, it scales up",
    "start": "474075",
    "end": "476520"
  },
  {
    "text": "to 5 terabytes with more in the future.",
    "start": "476520",
    "end": "478923"
  },
  {
    "text": "As I mentioned, they\nboth have been hardened",
    "start": "479850",
    "end": "482280"
  },
  {
    "text": "and they support encryption addressed",
    "start": "482280",
    "end": "484200"
  },
  {
    "text": "and encryption in transit,\nand they're very affordable.",
    "start": "484200",
    "end": "488190"
  },
  {
    "text": "The instance provisioned\none, it's a flat fee you pay",
    "start": "488190",
    "end": "490770"
  },
  {
    "text": "for the instant size that you fill.",
    "start": "490770",
    "end": "492509"
  },
  {
    "text": "Fill is your best need\nwith no additional fees.",
    "start": "492510",
    "end": "495420"
  },
  {
    "text": "The server offering is\nbasically pay per consumption.",
    "start": "495420",
    "end": "498810"
  },
  {
    "text": "You pay for as much as you use only.",
    "start": "498810",
    "end": "500639"
  },
  {
    "start": "501000",
    "end": "996000"
  },
  {
    "text": "So now that we have some background there,",
    "start": "502320",
    "end": "504180"
  },
  {
    "text": "we know about the database scaling",
    "start": "504180",
    "end": "505889"
  },
  {
    "text": "and what are its its limitations and cost",
    "start": "505890",
    "end": "508437"
  },
  {
    "text": "and the advantages that\nElastiCache has to offer.",
    "start": "508437",
    "end": "511593"
  },
  {
    "text": "Now let's just see how we can identify",
    "start": "512580",
    "end": "514740"
  },
  {
    "text": "what are the workloads\nthat are good candidates",
    "start": "514740",
    "end": "516950"
  },
  {
    "text": "for this being paired up.",
    "start": "516950",
    "end": "518823"
  },
  {
    "text": "So one of the first approach\nis to find databases",
    "start": "520094",
    "end": "523320"
  },
  {
    "text": "that have high read-to-write\nratios, meaning",
    "start": "523320",
    "end": "526440"
  },
  {
    "text": "that the higher percentage",
    "start": "526440",
    "end": "527610"
  },
  {
    "text": "of the workloads are reads than writes, 73",
    "start": "527610",
    "end": "530940"
  },
  {
    "text": "or higher would be ideal.",
    "start": "530940",
    "end": "532440"
  },
  {
    "text": "The higher the read ratio,",
    "start": "532440",
    "end": "533640"
  },
  {
    "text": "the better candidate the workload\nis for a caching service.",
    "start": "533640",
    "end": "537123"
  },
  {
    "text": "Next is databases with\nmultiple read replicas.",
    "start": "538110",
    "end": "541410"
  },
  {
    "text": "It almost explains itself if\nyou had to add read replicas",
    "start": "541410",
    "end": "544889"
  },
  {
    "text": "to your database, your\ndatabase is doing lots of read",
    "start": "544890",
    "end": "548070"
  },
  {
    "text": "and you are looking for\nmore read throughput,",
    "start": "548070",
    "end": "549930"
  },
  {
    "text": "that's another good candidate\nfor a caching service.",
    "start": "549930",
    "end": "553260"
  },
  {
    "text": "Now, not just any\nworkload has to be there,",
    "start": "553260",
    "end": "555600"
  },
  {
    "text": "these workload have to be\nrepetitive workloads, meaning",
    "start": "555600",
    "end": "558235"
  },
  {
    "text": "that the same SQL is\nexecuted multiple times.",
    "start": "558235",
    "end": "562316"
  },
  {
    "text": "Why?",
    "start": "562316",
    "end": "563279"
  },
  {
    "text": "Well, if every SQL that\nyou execute to read one,",
    "start": "563280",
    "end": "566370"
  },
  {
    "text": "but they're all different,\nthat means that every one",
    "start": "566370",
    "end": "568860"
  },
  {
    "text": "of them has to go to the storage",
    "start": "568860",
    "end": "570269"
  },
  {
    "text": "because there's no repetition of it.",
    "start": "570270",
    "end": "571710"
  },
  {
    "text": "There's no way to cache that.",
    "start": "571710",
    "end": "573270"
  },
  {
    "text": "So we have to be repetitive SQL commands.",
    "start": "573270",
    "end": "575820"
  },
  {
    "text": "I will show you how to identify\nrepetitive SQL commands.",
    "start": "575820",
    "end": "579063"
  },
  {
    "text": "And finally, maybe you're at the stage",
    "start": "580260",
    "end": "582330"
  },
  {
    "text": "where your workload is\njust costing too much.",
    "start": "582330",
    "end": "584520"
  },
  {
    "text": "Your database charges are just too high,",
    "start": "584520",
    "end": "586950"
  },
  {
    "text": "and you look at how to\nadjust that, that curve",
    "start": "586950",
    "end": "589800"
  },
  {
    "text": "that I mentioned earlier,\nperhaps you're way too far",
    "start": "589800",
    "end": "592050"
  },
  {
    "text": "to the right hand and the cost\nhas just started to creep up.",
    "start": "592050",
    "end": "595740"
  },
  {
    "text": "So one of the alternative would be",
    "start": "595740",
    "end": "597540"
  },
  {
    "text": "to completely rewrite\nthe entire application",
    "start": "597540",
    "end": "599850"
  },
  {
    "text": "and migrate it to maybe a no SQL approach.",
    "start": "599850",
    "end": "602730"
  },
  {
    "text": "But that would be costly, very complex.",
    "start": "602730",
    "end": "605220"
  },
  {
    "text": "A much simpler approach would be just",
    "start": "605220",
    "end": "607050"
  },
  {
    "text": "to add a caching service to it.",
    "start": "607050",
    "end": "608580"
  },
  {
    "text": "Your database could still remain as is.",
    "start": "608580",
    "end": "610953"
  },
  {
    "text": "You may find the changes\nto your application",
    "start": "610953",
    "end": "613590"
  },
  {
    "text": "to use a caching service.",
    "start": "613590",
    "end": "615120"
  },
  {
    "text": "If you're already using read replicas,",
    "start": "615120",
    "end": "616830"
  },
  {
    "text": "then your changes are even less",
    "start": "616830",
    "end": "619200"
  },
  {
    "text": "because you have already separated reads",
    "start": "619200",
    "end": "620940"
  },
  {
    "text": "and the writes from the database.",
    "start": "620940",
    "end": "622713"
  },
  {
    "text": "So now that we understand\nthat, let's just look",
    "start": "624570",
    "end": "626910"
  },
  {
    "text": "at some specific methods to\nidentify exact workloads.",
    "start": "626910",
    "end": "631110"
  },
  {
    "text": "There are a couple of ways to do that.",
    "start": "631110",
    "end": "632459"
  },
  {
    "text": "We could use CloudWatch metrics, we can",
    "start": "632460",
    "end": "635220"
  },
  {
    "text": "use database engine specific metrics",
    "start": "635220",
    "end": "638250"
  },
  {
    "text": "that we can look at\nspecific databases, how",
    "start": "638250",
    "end": "640200"
  },
  {
    "text": "to identify workloads being executed in",
    "start": "640200",
    "end": "643050"
  },
  {
    "text": "that specific database kind.",
    "start": "643050",
    "end": "644673"
  },
  {
    "text": "If we are on a specific\nserver such as Oracle",
    "start": "646002",
    "end": "651002"
  },
  {
    "text": "or SQL Server, we have\nsome custom solutions",
    "start": "651930",
    "end": "654510"
  },
  {
    "text": "that will solve all this for you.",
    "start": "654510",
    "end": "656250"
  },
  {
    "text": "You don't have to write any code.",
    "start": "656250",
    "end": "658190"
  },
  {
    "text": "And finally, there are\nsome third party products",
    "start": "658190",
    "end": "660810"
  },
  {
    "text": "out there that you can use.",
    "start": "660810",
    "end": "662700"
  },
  {
    "text": "So let's just look first\nat CloudWatch metrics.",
    "start": "662700",
    "end": "666420"
  },
  {
    "text": "CloudWatch metrics, if\nyou're already in AWS cloud,",
    "start": "666420",
    "end": "668700"
  },
  {
    "text": "are available to you and\nyou can use those metrics",
    "start": "668700",
    "end": "671730"
  },
  {
    "text": "to find out what's the read to\nwrite ratio on your database.",
    "start": "671730",
    "end": "675003"
  },
  {
    "text": "Easy way to find out",
    "start": "676290",
    "end": "677399"
  },
  {
    "text": "because you can see how\nmuch data goes in and out.",
    "start": "677400",
    "end": "679900"
  },
  {
    "text": "That may not be sufficient\njust to find out",
    "start": "680970",
    "end": "682889"
  },
  {
    "text": "how much data goes in and out",
    "start": "682890",
    "end": "684960"
  },
  {
    "text": "and may not be something that\nyou like to do to CloudWatch",
    "start": "684960",
    "end": "687685"
  },
  {
    "text": "or you have multiple kinds of databases.",
    "start": "687685",
    "end": "690720"
  },
  {
    "text": "So for that, we have\ndeveloped a new product",
    "start": "690720",
    "end": "692939"
  },
  {
    "text": "called DBTop Monitoring Solution.",
    "start": "692940",
    "end": "695163"
  },
  {
    "text": "DBTop, it's a multi-platform\nmonitoring tool",
    "start": "696540",
    "end": "698880"
  },
  {
    "text": "that can help you monitor\nvarious database aspects,",
    "start": "698880",
    "end": "702180"
  },
  {
    "text": "such as number of transactions per second,",
    "start": "702180",
    "end": "704310"
  },
  {
    "text": "read to write ratio.",
    "start": "704310",
    "end": "706050"
  },
  {
    "text": "Number of megabytes going\nin and out of your database.",
    "start": "706050",
    "end": "708839"
  },
  {
    "text": "In this case is actually a screenshot",
    "start": "708840",
    "end": "710550"
  },
  {
    "text": "of monitoring ElastiCache, but it",
    "start": "710550",
    "end": "714180"
  },
  {
    "text": "can monitor MySQL, SQL server\ndatabases, RDS as well.",
    "start": "714180",
    "end": "718923"
  },
  {
    "text": "So now that we have some high\nlevel understanding, you want",
    "start": "720900",
    "end": "723750"
  },
  {
    "text": "to go into the more details to find out",
    "start": "723750",
    "end": "725700"
  },
  {
    "text": "what exactly is happening\nin your database,",
    "start": "725700",
    "end": "727680"
  },
  {
    "text": "what kind of SQL commands.",
    "start": "727680",
    "end": "729360"
  },
  {
    "text": "For this, you'll have",
    "start": "729360",
    "end": "730260"
  },
  {
    "text": "to look at various specific SQL engines.",
    "start": "730260",
    "end": "733140"
  },
  {
    "text": "So for example, if you're using\na SQL server, then you have",
    "start": "733140",
    "end": "737040"
  },
  {
    "text": "to look at the exact query stats table.",
    "start": "737040",
    "end": "739500"
  },
  {
    "text": "You would have to select from that table",
    "start": "739500",
    "end": "741201"
  },
  {
    "text": "to see the exact kind",
    "start": "741201",
    "end": "742897"
  },
  {
    "text": "and the number of times\nthe SQL is being executed.",
    "start": "742897",
    "end": "746459"
  },
  {
    "text": "And I will give you a\nvery detailed example",
    "start": "746460",
    "end": "749070"
  },
  {
    "text": "for this platform.",
    "start": "749070",
    "end": "750330"
  },
  {
    "text": "For other platforms, you'll have",
    "start": "750330",
    "end": "751590"
  },
  {
    "text": "to probably do something similar\nlittle research yourself.",
    "start": "751590",
    "end": "754800"
  },
  {
    "text": "For Oracle, you would have\nto look at v$sql Table.",
    "start": "754800",
    "end": "758580"
  },
  {
    "text": "If you're already in Amazon RDS,",
    "start": "758580",
    "end": "761340"
  },
  {
    "text": "then you can use Performance\nInsights to find out",
    "start": "761340",
    "end": "764040"
  },
  {
    "text": "how many times the same\nquery had been executed.",
    "start": "764040",
    "end": "767220"
  },
  {
    "text": "Basically calls request per second.",
    "start": "767220",
    "end": "769233"
  },
  {
    "text": "If you're on MySQL, you\nhave to enable general log",
    "start": "770700",
    "end": "773430"
  },
  {
    "text": "to a table and query from there.",
    "start": "773430",
    "end": "775649"
  },
  {
    "text": "And if we're on Postgres,\nthen you just have",
    "start": "775650",
    "end": "777870"
  },
  {
    "text": "to select from pg_stat_statements table.",
    "start": "777870",
    "end": "781080"
  },
  {
    "text": "You will find the information\nin there about the number",
    "start": "781080",
    "end": "783270"
  },
  {
    "text": "of times the SQL has been executed",
    "start": "783270",
    "end": "785340"
  },
  {
    "text": "and the nature of the\nwork that it has done.",
    "start": "785340",
    "end": "787290"
  },
  {
    "text": "As in ratio of read to write.",
    "start": "787290",
    "end": "788793"
  },
  {
    "text": "So as I mentioned earlier,\nhere is an example",
    "start": "789840",
    "end": "791904"
  },
  {
    "text": "from a SQL server.",
    "start": "791904",
    "end": "794425"
  },
  {
    "text": "In this case, the SQL\nServer is being created.",
    "start": "794426",
    "end": "797970"
  },
  {
    "text": "And this query is again,",
    "start": "797970",
    "end": "799350"
  },
  {
    "text": "is easily readily available\non many websites to find out",
    "start": "799350",
    "end": "802319"
  },
  {
    "text": "what SQL is being executed.",
    "start": "802320",
    "end": "804240"
  },
  {
    "text": "But the output is more\nimportant that the columns",
    "start": "804240",
    "end": "806550"
  },
  {
    "text": "that we are looking at is more important.",
    "start": "806550",
    "end": "808410"
  },
  {
    "text": "You have to select the\nexecution count to find out",
    "start": "808410",
    "end": "811500"
  },
  {
    "text": "how many times the same\nSQL is being executed",
    "start": "811500",
    "end": "814230"
  },
  {
    "text": "or re executed, and the\ntotal and the average reads.",
    "start": "814230",
    "end": "818610"
  },
  {
    "text": "This is going to tell you",
    "start": "818610",
    "end": "820140"
  },
  {
    "text": "how much the SQL is reading\non average and in total",
    "start": "820140",
    "end": "823770"
  },
  {
    "text": "or in writing if it does not writing.",
    "start": "823770",
    "end": "825510"
  },
  {
    "text": "So in this case, the top\nSQLs had been executed more",
    "start": "825510",
    "end": "828780"
  },
  {
    "text": "than 100,000 times and is\ndoing a lot of reading.",
    "start": "828780",
    "end": "831960"
  },
  {
    "text": "So definitely way more reading to writing.",
    "start": "831960",
    "end": "834840"
  },
  {
    "text": "So this is a good example.",
    "start": "834840",
    "end": "837240"
  },
  {
    "text": "You would have to write the\nquery something similar to this",
    "start": "837240",
    "end": "839820"
  },
  {
    "text": "for the other RDBMS engines.",
    "start": "839820",
    "end": "842460"
  },
  {
    "text": "However, if you're on Oracle,\nwe have a specialized tool",
    "start": "842460",
    "end": "846570"
  },
  {
    "text": "that was developed just for Oracle.",
    "start": "846570",
    "end": "848940"
  },
  {
    "text": "This tool had been around for some time.",
    "start": "848940",
    "end": "851013"
  },
  {
    "text": "It's called DB Current State\nInvestigation, or DBCSI.",
    "start": "852480",
    "end": "856350"
  },
  {
    "text": "This tool had been around\nthat you could download",
    "start": "856350",
    "end": "858240"
  },
  {
    "text": "and run it on your existing workload,",
    "start": "858240",
    "end": "860040"
  },
  {
    "text": "and it helped you with migration\nfrom on-prem to the cloud",
    "start": "860040",
    "end": "863790"
  },
  {
    "text": "of your Oracle database.",
    "start": "863790",
    "end": "865410"
  },
  {
    "text": "The product had been upgraded so",
    "start": "865410",
    "end": "867240"
  },
  {
    "text": "that now it looks at the past\nworkload, the kind of work",
    "start": "867240",
    "end": "871196"
  },
  {
    "text": "that it has done, and\nis going to recommend",
    "start": "871196",
    "end": "874170"
  },
  {
    "text": "that if the workload is such\nthat it's a good candidate",
    "start": "874170",
    "end": "876839"
  },
  {
    "text": "to be used with the caching\nservice, it is going",
    "start": "876840",
    "end": "879150"
  },
  {
    "text": "to make two recommendation, one without,",
    "start": "879150",
    "end": "881310"
  },
  {
    "text": "and one with the caching service.",
    "start": "881310",
    "end": "883380"
  },
  {
    "text": "It'll calculate the\ndifferent instance types",
    "start": "883380",
    "end": "885720"
  },
  {
    "text": "that you would need without,",
    "start": "885720",
    "end": "887279"
  },
  {
    "text": "and with the cache even, it will try to",
    "start": "887280",
    "end": "889830"
  },
  {
    "text": "recommend the cache size",
    "start": "889830",
    "end": "891450"
  },
  {
    "text": "and calculate potential\nmonthly savings for you",
    "start": "891450",
    "end": "894039"
  },
  {
    "text": "so you don't have to write\nany code if you're on Oracle.",
    "start": "894039",
    "end": "897063"
  },
  {
    "text": "The safety could apply to SQL Server.",
    "start": "897990",
    "end": "900630"
  },
  {
    "text": "The the tool, RDSTools have\nbeen around for some time,",
    "start": "900630",
    "end": "904410"
  },
  {
    "text": "and it always help you to\nright size your database",
    "start": "904410",
    "end": "906779"
  },
  {
    "text": "to find the right size instance\nif you are underutilized,",
    "start": "906780",
    "end": "910410"
  },
  {
    "text": "if you're over basically a capacity,",
    "start": "910410",
    "end": "914402"
  },
  {
    "text": "then RDSTools help you with that.",
    "start": "914402",
    "end": "916980"
  },
  {
    "text": "Now, RDSTools have been upgraded\nfor Microsoft SQL Server",
    "start": "916980",
    "end": "921980"
  },
  {
    "text": "and now it's going to help\nto look at the workload",
    "start": "921990",
    "end": "923839"
  },
  {
    "text": "and look at the read-write\nratios and the queries",
    "start": "923840",
    "end": "926449"
  },
  {
    "text": "and will try to recommend",
    "start": "926449",
    "end": "928201"
  },
  {
    "text": "that if the workload is\nsubject would recommend",
    "start": "928201",
    "end": "931080"
  },
  {
    "text": "that you should use a caching\nservice for your workload.",
    "start": "931080",
    "end": "934203"
  },
  {
    "text": "So in a recap, just to\nunderstand it better,",
    "start": "935670",
    "end": "938550"
  },
  {
    "text": "adding a caching service to\nyour database will help you",
    "start": "938550",
    "end": "940800"
  },
  {
    "text": "with your throughput 'cause AWS\nElastiCache, it's very fast.",
    "start": "940800",
    "end": "944790"
  },
  {
    "text": "It'll reduce your application\noverall response time.",
    "start": "944790",
    "end": "948089"
  },
  {
    "text": "All the data is going to be\ncached in memory at all times,",
    "start": "948090",
    "end": "951113"
  },
  {
    "text": "and you could offload\nall those repetitive I/O",
    "start": "951113",
    "end": "953519"
  },
  {
    "text": "from the database at the way lower cost",
    "start": "953520",
    "end": "956250"
  },
  {
    "text": "than scaling your database.",
    "start": "956250",
    "end": "957600"
  },
  {
    "text": "Here are some QR codes to\nfollow up on the products",
    "start": "958860",
    "end": "962610"
  },
  {
    "text": "that we talked about, the blog",
    "start": "962610",
    "end": "963870"
  },
  {
    "text": "that goes into lot more\ndetails and cost calculation",
    "start": "963870",
    "end": "966390"
  },
  {
    "text": "and performance comparison.",
    "start": "966390",
    "end": "967860"
  },
  {
    "text": "Learn more about the ElastiCache.",
    "start": "967860",
    "end": "969933"
  },
  {
    "text": "And finally, here are QR\ncodes about the various tools",
    "start": "970890",
    "end": "973980"
  },
  {
    "text": "that I mentioned, DBTop Monitoring, DBCSI",
    "start": "973980",
    "end": "978160"
  },
  {
    "text": "and product for Microsoft\nSQL Server, RDSTools.",
    "start": "979170",
    "end": "982503"
  },
  {
    "text": "If you'd like to learn more,\nhere's some contact information",
    "start": "984750",
    "end": "987911"
  },
  {
    "text": "or to reach out to me or to our team.",
    "start": "987911",
    "end": "990270"
  },
  {
    "text": "Thank you.",
    "start": "990270",
    "end": "991103"
  }
]