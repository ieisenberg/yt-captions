[
  {
    "text": "[Music]",
    "start": "0",
    "end": "2960"
  },
  {
    "text": "hello",
    "start": "2960",
    "end": "3520"
  },
  {
    "text": "and thank you for watching this video on",
    "start": "3520",
    "end": "5040"
  },
  {
    "text": "using aws elementalmediaconvert and.net",
    "start": "5040",
    "end": "8720"
  },
  {
    "text": "my name is jeff weinhold and i'm an",
    "start": "8720",
    "end": "10639"
  },
  {
    "text": "enterprise solutions architect with",
    "start": "10639",
    "end": "12240"
  },
  {
    "text": "amazon web services",
    "start": "12240",
    "end": "14639"
  },
  {
    "text": "aws elemental media convert is part of",
    "start": "14639",
    "end": "16960"
  },
  {
    "text": "the aws media services family of fully",
    "start": "16960",
    "end": "19199"
  },
  {
    "text": "managed services",
    "start": "19199",
    "end": "20160"
  },
  {
    "text": "make it easy to build reliable broadcast",
    "start": "20160",
    "end": "22480"
  },
  {
    "text": "quality video workflows in the cloud",
    "start": "22480",
    "end": "25039"
  },
  {
    "text": "media convert is a file based video",
    "start": "25039",
    "end": "27039"
  },
  {
    "text": "transcoding service",
    "start": "27039",
    "end": "28400"
  },
  {
    "text": "with broadcast great features allows you",
    "start": "28400",
    "end": "31199"
  },
  {
    "text": "to easily create video on-demand content",
    "start": "31199",
    "end": "33440"
  },
  {
    "text": "for broadcast and multi-screen delivery",
    "start": "33440",
    "end": "35440"
  },
  {
    "text": "at scale",
    "start": "35440",
    "end": "36719"
  },
  {
    "text": "the service combines advanced video and",
    "start": "36719",
    "end": "38800"
  },
  {
    "text": "the audio capabilities",
    "start": "38800",
    "end": "40239"
  },
  {
    "text": "with a simple web services interface and",
    "start": "40239",
    "end": "42399"
  },
  {
    "text": "pay-as-you-go pricing",
    "start": "42399",
    "end": "44160"
  },
  {
    "text": "with aws elemental media convert you can",
    "start": "44160",
    "end": "47039"
  },
  {
    "text": "focus on delivering compelling media",
    "start": "47039",
    "end": "48879"
  },
  {
    "text": "experiences",
    "start": "48879",
    "end": "49840"
  },
  {
    "text": "without having to worry about the",
    "start": "49840",
    "end": "51120"
  },
  {
    "text": "complexity of building and operating",
    "start": "51120",
    "end": "52879"
  },
  {
    "text": "your own video processing",
    "start": "52879",
    "end": "54320"
  },
  {
    "text": "infrastructure one of the three most",
    "start": "54320",
    "end": "56480"
  },
  {
    "text": "common use cases for media convert",
    "start": "56480",
    "end": "58480"
  },
  {
    "text": "is transcoding of user generated content",
    "start": "58480",
    "end": "60640"
  },
  {
    "text": "that is uploaded by your end users",
    "start": "60640",
    "end": "63120"
  },
  {
    "text": "another use case is the transition of",
    "start": "63120",
    "end": "65040"
  },
  {
    "text": "broadcast playout and video on demand",
    "start": "65040",
    "end": "67040"
  },
  {
    "text": "workflows into the cloud",
    "start": "67040",
    "end": "68479"
  },
  {
    "text": "to leverage the scalability and",
    "start": "68479",
    "end": "70080"
  },
  {
    "text": "reliability of cloud infrastructure",
    "start": "70080",
    "end": "72720"
  },
  {
    "text": "in addition media convert can be used by",
    "start": "72720",
    "end": "75280"
  },
  {
    "text": "over-the-top or ott services",
    "start": "75280",
    "end": "77680"
  },
  {
    "text": "that stream multi-screen content over",
    "start": "77680",
    "end": "80000"
  },
  {
    "text": "the internet",
    "start": "80000",
    "end": "81439"
  },
  {
    "text": "media convert allows you to create",
    "start": "81439",
    "end": "82960"
  },
  {
    "text": "engaging viewing experiences",
    "start": "82960",
    "end": "84799"
  },
  {
    "text": "including graphic overlays content",
    "start": "84799",
    "end": "86880"
  },
  {
    "text": "protection",
    "start": "86880",
    "end": "88000"
  },
  {
    "text": "closed captioning support and",
    "start": "88000",
    "end": "89600"
  },
  {
    "text": "professional broadcast formats",
    "start": "89600",
    "end": "92159"
  },
  {
    "text": "media convert supports a broad range of",
    "start": "92159",
    "end": "94079"
  },
  {
    "text": "video input and output formats",
    "start": "94079",
    "end": "96000"
  },
  {
    "text": "including those for broadcast as well as",
    "start": "96000",
    "end": "97840"
  },
  {
    "text": "formats for delivery over the internet",
    "start": "97840",
    "end": "100560"
  },
  {
    "text": "media convert eliminates the burden of",
    "start": "100560",
    "end": "102479"
  },
  {
    "text": "managing video processing infrastructure",
    "start": "102479",
    "end": "105040"
  },
  {
    "text": "by automating the key aspects of",
    "start": "105040",
    "end": "106799"
  },
  {
    "text": "workload provisioning and management",
    "start": "106799",
    "end": "109600"
  },
  {
    "text": "each job you create with media convert",
    "start": "109600",
    "end": "111600"
  },
  {
    "text": "runs on redundant infrastructure",
    "start": "111600",
    "end": "113439"
  },
  {
    "text": "distributed across physically separated",
    "start": "113439",
    "end": "115600"
  },
  {
    "text": "availability zones",
    "start": "115600",
    "end": "118079"
  },
  {
    "text": "let's jump right into a demo",
    "start": "118079",
    "end": "121280"
  },
  {
    "text": "we'll start with a simple razer pages",
    "start": "121280",
    "end": "123119"
  },
  {
    "text": "web app in asp.net core to upload a",
    "start": "123119",
    "end": "125439"
  },
  {
    "text": "sample video to aws for transcoding",
    "start": "125439",
    "end": "129840"
  },
  {
    "text": "we have a sample video file vanlife.mp4",
    "start": "132160",
    "end": "135440"
  },
  {
    "text": "that you can see here",
    "start": "135440",
    "end": "137200"
  },
  {
    "text": "let's select the video and upload that",
    "start": "137200",
    "end": "139040"
  },
  {
    "text": "to our application",
    "start": "139040",
    "end": "143840"
  },
  {
    "text": "we've uploaded our video file to",
    "start": "147680",
    "end": "149280"
  },
  {
    "text": "amazon's simple storage service or",
    "start": "149280",
    "end": "151200"
  },
  {
    "text": "s3 with notifications enabled on upload",
    "start": "151200",
    "end": "154160"
  },
  {
    "text": "this notification event will allow us to",
    "start": "154160",
    "end": "156080"
  },
  {
    "text": "start an aws elemental media convert job",
    "start": "156080",
    "end": "159040"
  },
  {
    "text": "to transcode our video into 720p and",
    "start": "159040",
    "end": "161840"
  },
  {
    "text": "1080p",
    "start": "161840",
    "end": "162720"
  },
  {
    "text": "video formats",
    "start": "162720",
    "end": "165680"
  },
  {
    "text": "let's go ahead and check on our job it's",
    "start": "166000",
    "end": "169120"
  },
  {
    "text": "currently progressing",
    "start": "169120",
    "end": "170879"
  },
  {
    "text": "now you can see that the job is complete",
    "start": "170879",
    "end": "173280"
  },
  {
    "text": "let's go ahead and view our two videos",
    "start": "173280",
    "end": "176239"
  },
  {
    "text": "first 720",
    "start": "176239",
    "end": "179200"
  },
  {
    "text": "great we can see that that one worked",
    "start": "179760",
    "end": "181280"
  },
  {
    "text": "let's go ahead and download that video",
    "start": "181280",
    "end": "185840"
  },
  {
    "text": "okay let's go ahead and go back to the",
    "start": "186159",
    "end": "188000"
  },
  {
    "text": "1080p video",
    "start": "188000",
    "end": "190959"
  },
  {
    "text": "okay great let's download that",
    "start": "192480",
    "end": "198879"
  },
  {
    "text": "all right let's go take a look at the",
    "start": "198879",
    "end": "200640"
  },
  {
    "text": "properties of those files",
    "start": "200640",
    "end": "203120"
  },
  {
    "text": "you can see we now have two more video",
    "start": "203120",
    "end": "204879"
  },
  {
    "text": "files one with the 720 and the other",
    "start": "204879",
    "end": "206879"
  },
  {
    "text": "with the 1080 suffix",
    "start": "206879",
    "end": "208640"
  },
  {
    "text": "let's check the properties of the files",
    "start": "208640",
    "end": "210640"
  },
  {
    "text": "checking the details we can see the",
    "start": "210640",
    "end": "212159"
  },
  {
    "text": "video is 1280x720",
    "start": "212159",
    "end": "214319"
  },
  {
    "text": "the 1080 file detail tab is 1920 by",
    "start": "214319",
    "end": "218480"
  },
  {
    "text": "1080.",
    "start": "218480",
    "end": "221120"
  },
  {
    "text": "let's talk about how this solution",
    "start": "221760",
    "end": "223280"
  },
  {
    "text": "integrates the aws elemental media",
    "start": "223280",
    "end": "225200"
  },
  {
    "text": "convert service",
    "start": "225200",
    "end": "226640"
  },
  {
    "text": "our razer pages application uploads to",
    "start": "226640",
    "end": "228799"
  },
  {
    "text": "an amazon s3 bucket",
    "start": "228799",
    "end": "230319"
  },
  {
    "text": "which triggers an event notification to",
    "start": "230319",
    "end": "232080"
  },
  {
    "text": "our lambda function",
    "start": "232080",
    "end": "233680"
  },
  {
    "text": "this function reads the event data and",
    "start": "233680",
    "end": "235599"
  },
  {
    "text": "builds the necessary settings to launch",
    "start": "235599",
    "end": "237360"
  },
  {
    "text": "a media convert job",
    "start": "237360",
    "end": "239439"
  },
  {
    "text": "once the job is completed media convert",
    "start": "239439",
    "end": "241760"
  },
  {
    "text": "will write the output files to our",
    "start": "241760",
    "end": "243280"
  },
  {
    "text": "specific location in amazon s3",
    "start": "243280",
    "end": "247519"
  },
  {
    "text": "let's take a closer look at how this is",
    "start": "247680",
    "end": "249360"
  },
  {
    "text": "put together in.net",
    "start": "249360",
    "end": "251200"
  },
  {
    "text": "we have two projects the ui layer and",
    "start": "251200",
    "end": "253280"
  },
  {
    "text": "razor pages and then a lambda function",
    "start": "253280",
    "end": "255280"
  },
  {
    "text": "that launches a media convert job",
    "start": "255280",
    "end": "258239"
  },
  {
    "text": "when the file is uploaded via the ui our",
    "start": "258239",
    "end": "261280"
  },
  {
    "text": "onpost async method",
    "start": "261280",
    "end": "263120"
  },
  {
    "text": "is being executed in our index page",
    "start": "263120",
    "end": "265199"
  },
  {
    "text": "model class",
    "start": "265199",
    "end": "267120"
  },
  {
    "text": "using the aws sdk s3 nuget package",
    "start": "267120",
    "end": "270639"
  },
  {
    "text": "or instantiating the amazon s3 client",
    "start": "270639",
    "end": "273600"
  },
  {
    "text": "with the aws",
    "start": "273600",
    "end": "274639"
  },
  {
    "text": "region pulled from the app settings.json",
    "start": "274639",
    "end": "277199"
  },
  {
    "text": "file",
    "start": "277199",
    "end": "278080"
  },
  {
    "text": "from there we'll use the transfer",
    "start": "278080",
    "end": "279759"
  },
  {
    "text": "utility helper class",
    "start": "279759",
    "end": "281199"
  },
  {
    "text": "to help upload to our s3 bucket",
    "start": "281199",
    "end": "285120"
  },
  {
    "text": "finally we'll redirect to the uploads",
    "start": "285120",
    "end": "287440"
  },
  {
    "text": "page while we wait for the media convert",
    "start": "287440",
    "end": "289440"
  },
  {
    "text": "job to finish",
    "start": "289440",
    "end": "292080"
  },
  {
    "text": "we'll build out the lambda function step",
    "start": "292080",
    "end": "293680"
  },
  {
    "text": "by step once you have the",
    "start": "293680",
    "end": "295440"
  },
  {
    "text": "media convert nuget package installed",
    "start": "295440",
    "end": "297360"
  },
  {
    "text": "you can start to use the client to",
    "start": "297360",
    "end": "298800"
  },
  {
    "text": "access media convert",
    "start": "298800",
    "end": "300639"
  },
  {
    "text": "you'll need to know the service url",
    "start": "300639",
    "end": "302800"
  },
  {
    "text": "which will build in the constructor of",
    "start": "302800",
    "end": "304400"
  },
  {
    "text": "the function",
    "start": "304400",
    "end": "305680"
  },
  {
    "text": "we'll also stub out the list endpoint",
    "start": "305680",
    "end": "307759"
  },
  {
    "text": "method we know ahead of time that we're",
    "start": "307759",
    "end": "309759"
  },
  {
    "text": "going to need the region",
    "start": "309759",
    "end": "311280"
  },
  {
    "text": "so we'll parse that from the environment",
    "start": "311280",
    "end": "313360"
  },
  {
    "text": "variable that advs sets for you called",
    "start": "313360",
    "end": "315440"
  },
  {
    "text": "aws",
    "start": "315440",
    "end": "316160"
  },
  {
    "text": "underscore region now we'll implement",
    "start": "316160",
    "end": "319600"
  },
  {
    "text": "the list endpoint method by calling the",
    "start": "319600",
    "end": "321680"
  },
  {
    "text": "describe endpoints async method",
    "start": "321680",
    "end": "324240"
  },
  {
    "text": "on the media convert client we'll take",
    "start": "324240",
    "end": "326320"
  },
  {
    "text": "the first endpoint back",
    "start": "326320",
    "end": "327919"
  },
  {
    "text": "from the collection and return the url",
    "start": "327919",
    "end": "331600"
  },
  {
    "text": "we'll then add the method called",
    "start": "331680",
    "end": "333120"
  },
  {
    "text": "function handler that will register with",
    "start": "333120",
    "end": "335039"
  },
  {
    "text": "the laminar service",
    "start": "335039",
    "end": "336080"
  },
  {
    "text": "as an entry point for our application",
    "start": "336080",
    "end": "338720"
  },
  {
    "text": "this relies",
    "start": "338720",
    "end": "339520"
  },
  {
    "text": "on the amazon.lambda.s3 events package",
    "start": "339520",
    "end": "343120"
  },
  {
    "text": "to get a nice",
    "start": "343120",
    "end": "343919"
  },
  {
    "text": "c-sharp object to work with we'll loop",
    "start": "343919",
    "end": "346479"
  },
  {
    "text": "through the collection of records",
    "start": "346479",
    "end": "348400"
  },
  {
    "text": "and call our stub dot method create job",
    "start": "348400",
    "end": "353360"
  },
  {
    "text": "the input class contains the path to the",
    "start": "353360",
    "end": "355199"
  },
  {
    "text": "source file decryption settings if",
    "start": "355199",
    "end": "357280"
  },
  {
    "text": "necessary",
    "start": "357280",
    "end": "358080"
  },
  {
    "text": "or settings like which audio tracks you",
    "start": "358080",
    "end": "359919"
  },
  {
    "text": "want to use in your outputs",
    "start": "359919",
    "end": "361440"
  },
  {
    "text": "we've preset a few basic settings in",
    "start": "361440",
    "end": "363440"
  },
  {
    "text": "this example",
    "start": "363440",
    "end": "366720"
  },
  {
    "text": "finally we've implemented the output",
    "start": "366720",
    "end": "368479"
  },
  {
    "text": "group class setting the s3 bucket",
    "start": "368479",
    "end": "371120"
  },
  {
    "text": "and the prefix of where we'd like to",
    "start": "371120",
    "end": "372560"
  },
  {
    "text": "store the output videos",
    "start": "372560",
    "end": "374400"
  },
  {
    "text": "we're also defining here the collection",
    "start": "374400",
    "end": "376160"
  },
  {
    "text": "of output videos that we'd like media",
    "start": "376160",
    "end": "377840"
  },
  {
    "text": "convert to generate",
    "start": "377840",
    "end": "379199"
  },
  {
    "text": "in this case we specified a 720p",
    "start": "379199",
    "end": "383360"
  },
  {
    "text": "and a 1080p video using the preset",
    "start": "383360",
    "end": "385919"
  },
  {
    "text": "profiles",
    "start": "385919",
    "end": "387039"
  },
  {
    "text": "now the job is ready to be sent to the",
    "start": "387039",
    "end": "388800"
  },
  {
    "text": "media convert service",
    "start": "388800",
    "end": "391918"
  },
  {
    "text": "now that the media convert job has been",
    "start": "393120",
    "end": "394800"
  },
  {
    "text": "submitted here's how the ui",
    "start": "394800",
    "end": "396560"
  },
  {
    "text": "is pulling the media convert service",
    "start": "396560",
    "end": "398560"
  },
  {
    "text": "using the list jobs",
    "start": "398560",
    "end": "400000"
  },
  {
    "text": "api using the paginator features",
    "start": "400000",
    "end": "404560"
  },
  {
    "text": "we'll loop through the results and build",
    "start": "404560",
    "end": "406000"
  },
  {
    "text": "a collection of jobs to present to the",
    "start": "406000",
    "end": "407840"
  },
  {
    "text": "ui",
    "start": "407840",
    "end": "410240"
  },
  {
    "text": "in the uploads razor page then takes the",
    "start": "411360",
    "end": "414160"
  },
  {
    "text": "collection of jobs",
    "start": "414160",
    "end": "415280"
  },
  {
    "text": "from the model and builds an html table",
    "start": "415280",
    "end": "417599"
  },
  {
    "text": "with the results",
    "start": "417599",
    "end": "418560"
  },
  {
    "text": "the download links are built if the job",
    "start": "418560",
    "end": "420880"
  },
  {
    "text": "status is complete",
    "start": "420880",
    "end": "423919"
  },
  {
    "text": "finally once the download link is",
    "start": "423919",
    "end": "425759"
  },
  {
    "text": "clicked we'll take the job id from the",
    "start": "425759",
    "end": "427759"
  },
  {
    "text": "query string",
    "start": "427759",
    "end": "428880"
  },
  {
    "text": "call media converts get job api",
    "start": "428880",
    "end": "433280"
  },
  {
    "text": "parse those results to build a",
    "start": "433280",
    "end": "434800"
  },
  {
    "text": "pre-signed url from amazon s3",
    "start": "434800",
    "end": "437759"
  },
  {
    "text": "and then redirect the user to that url",
    "start": "437759",
    "end": "441759"
  },
  {
    "text": "more about the aws elemental media",
    "start": "441759",
    "end": "443919"
  },
  {
    "text": "convert service",
    "start": "443919",
    "end": "444960"
  },
  {
    "text": "you can go to aws.amazon.com",
    "start": "444960",
    "end": "448000"
  },
  {
    "text": "forward slash media convert in your",
    "start": "448000",
    "end": "449599"
  },
  {
    "text": "browser from there",
    "start": "449599",
    "end": "451440"
  },
  {
    "text": "you can click the resources item along",
    "start": "451440",
    "end": "453199"
  },
  {
    "text": "the top and then api reference",
    "start": "453199",
    "end": "456639"
  },
  {
    "text": "on the getting started page we also have",
    "start": "456639",
    "end": "458960"
  },
  {
    "text": "another create job example",
    "start": "458960",
    "end": "460560"
  },
  {
    "text": "using the aws sdkfor.net",
    "start": "460560",
    "end": "463680"
  },
  {
    "text": "in addition from our aws sdkfor.net page",
    "start": "463680",
    "end": "467599"
  },
  {
    "text": "on github",
    "start": "467599",
    "end": "469039"
  },
  {
    "text": "you can browse the api documentation for",
    "start": "469039",
    "end": "471280"
  },
  {
    "text": "the media convert service",
    "start": "471280",
    "end": "474479"
  },
  {
    "text": "from here you can see all of the classes",
    "start": "477199",
    "end": "480000"
  },
  {
    "text": "available to you",
    "start": "480000",
    "end": "481360"
  },
  {
    "text": "including the amazon media convert",
    "start": "481360",
    "end": "483039"
  },
  {
    "text": "client",
    "start": "483039",
    "end": "485280"
  },
  {
    "text": "in this video we saw how we can use the",
    "start": "486639",
    "end": "488560"
  },
  {
    "text": "aws sdkfor.net",
    "start": "488560",
    "end": "490639"
  },
  {
    "text": "to convert video digital media with aws",
    "start": "490639",
    "end": "493280"
  },
  {
    "text": "elemental media convert",
    "start": "493280",
    "end": "495120"
  },
  {
    "text": "hope you found this video informative",
    "start": "495120",
    "end": "497280"
  },
  {
    "text": "thank you for watching",
    "start": "497280",
    "end": "505360"
  }
]