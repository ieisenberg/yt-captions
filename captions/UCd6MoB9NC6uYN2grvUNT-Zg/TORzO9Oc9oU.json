[
  {
    "start": "0",
    "end": "10000"
  },
  {
    "text": "today's webinar is a master class on ec2 the elastic compute cloud and the",
    "start": "40",
    "end": "5080"
  },
  {
    "text": "purpose behind these masterclass webinars is it's a technical Deep dive beyond the basics so in 45 minutes the",
    "start": "5080",
    "end": "12480"
  },
  {
    "text": "aim here is to expand your knowledge uh educate you on some of the deeper",
    "start": "12480",
    "end": "17720"
  },
  {
    "text": "features in the technical service of ec2 and how you can get the best from AWS",
    "start": "17720",
    "end": "22760"
  },
  {
    "text": "Technologies and show you how things work and get things going so 45 minutes isn't a great deal of time for this",
    "start": "22760",
    "end": "28439"
  },
  {
    "text": "topic cuz ec2 is huge expansive and it's the core of every compute application",
    "start": "28439",
    "end": "33680"
  },
  {
    "text": "that we put into AWS but we'll try and get you as deep as possible as quickly as possible so Amazon ec2 what is it all",
    "start": "33680",
    "end": "40920"
  },
  {
    "start": "39000",
    "end": "95000"
  },
  {
    "text": "about I mean it's obviously an on demand compute to run application workloads anything from web applications to back",
    "start": "40920",
    "end": "47399"
  },
  {
    "text": "office applications data processing analytics and so on and the core of it is that it's a disposable resource and",
    "start": "47399",
    "end": "54840"
  },
  {
    "text": "we'll talk about how you architect around ec2 to take account for that",
    "start": "54840",
    "end": "60000"
  },
  {
    "text": "Expos ability cuz it's an easy come easygo kind of platform you can spin up compute and you can drop it and stop",
    "start": "60000",
    "end": "65880"
  },
  {
    "text": "paying for it as easily as you acquire it and fundamentally it's about us providing the infrastructure to you and",
    "start": "65880",
    "end": "73080"
  },
  {
    "text": "then you deciding what you run upon it so this masterclass webinar is going to give you some tips and tricks on how you",
    "start": "73080",
    "end": "79439"
  },
  {
    "text": "can wield ec2 and how you can use it in conjunction with some of the other services like elastic load balancing and",
    "start": "79439",
    "end": "85360"
  },
  {
    "text": "auto scaling so that ultimately your workload you can decide what you run and how to perform your application",
    "start": "85360",
    "end": "91680"
  },
  {
    "text": "workloads on ec2 so what is it at the top level well",
    "start": "91680",
    "end": "97560"
  },
  {
    "start": "95000",
    "end": "168000"
  },
  {
    "text": "fundamentally about complete control as I've just said you get to choose what you run on your Compu you acquire",
    "start": "97560",
    "end": "103960"
  },
  {
    "text": "instances virtual machines from which you can choose the OS that's running there and then you have complete root or",
    "start": "103960",
    "end": "110479"
  },
  {
    "text": "administrator control about what stack you install on top of that instance it's flexible in the terms that you can",
    "start": "110479",
    "end": "116680"
  },
  {
    "text": "choose the instance sizes you wish to run you can start at small instances and you can go to very large instances you",
    "start": "116680",
    "end": "123320"
  },
  {
    "text": "can change those instance types as you go through and you can choose the OS builds that run on top of them and",
    "start": "123320",
    "end": "128840"
  },
  {
    "text": "ultimately it's this elastic capacity you can have as much of this or as practically as much of this stuff as you",
    "start": "128840",
    "end": "134519"
  },
  {
    "text": "like so if you need to grow from one server to many thousands of servers you can because we have the resources",
    "start": "134519",
    "end": "141280"
  },
  {
    "text": "available to you on demand so things at the bottom then is that we got some built-in security features that we'll",
    "start": "141280",
    "end": "147120"
  },
  {
    "text": "talk about throughout this webinar in terms of the integ Ates with our security groups which are part of the",
    "start": "147120",
    "end": "153120"
  },
  {
    "text": "host firewalls on our hypervisors it's inexpensive it starts at a very cheap price point for small instances and it's",
    "start": "153120",
    "end": "160000"
  },
  {
    "text": "reliable okay and it's built around technologies that enable disk volumes to be reliable the ec2 instances to be",
    "start": "160000",
    "end": "166319"
  },
  {
    "text": "reliable and so on so drilling down into elastic capacity and then getting into",
    "start": "166319",
    "end": "171599"
  },
  {
    "start": "168000",
    "end": "280000"
  },
  {
    "text": "the technical nitty-gritty of how this thing hangs together so it's a shared environment so everything that's run in",
    "start": "171599",
    "end": "177239"
  },
  {
    "text": "ec2 you could be on a physical host with other customers and it's securely",
    "start": "177239",
    "end": "182480"
  },
  {
    "text": "segregated and it's worth stepping through how that works and the infrastructure that we use so shown on the right is a logical diagram of a",
    "start": "182480",
    "end": "190200"
  },
  {
    "text": "physical host within ec2 where many customers can reside they're shown as customer one 2 to n now we base our",
    "start": "190200",
    "end": "198360"
  },
  {
    "text": "platform upon the Zen hypervisor and we are active in the Zen community and we take the Zen hypervisor and build our",
    "start": "198360",
    "end": "204959"
  },
  {
    "text": "hosts upon it and that ultimately gives you the workspace in which your virtual machine Mach run so under that",
    "start": "204959",
    "end": "211680"
  },
  {
    "text": "hypervisor we then present virtual interfaces that enable the networking to and from those virtual machines and then",
    "start": "211680",
    "end": "218760"
  },
  {
    "text": "at a host level we have a firewall within which customer security groups or your own firewalls virtual firewalls run",
    "start": "218760",
    "end": "226720"
  },
  {
    "text": "and then ultimately we have a physical interface um to the outside world and of course there are many many of these hosts across our facilities across the",
    "start": "226720",
    "end": "233720"
  },
  {
    "text": "world so if you think about traffic and traffic is securely segregated via that",
    "start": "233720",
    "end": "239079"
  },
  {
    "text": "firewall into your security groups through the virtual interfaces controlled by the hypervisor into the",
    "start": "239079",
    "end": "244360"
  },
  {
    "text": "workspace so every customer is securely segregated and we take Great Lengths to",
    "start": "244360",
    "end": "249519"
  },
  {
    "text": "ensure that this is this is technically audited it's it's badged against a number of security standards and so on",
    "start": "249519",
    "end": "255519"
  },
  {
    "text": "but fundamentally it's a shared environment where you are segregated from other customers now there are other",
    "start": "255519",
    "end": "261160"
  },
  {
    "text": "constructs within ec2 such as virtual private Cloud which give you control over fundamental networking in this",
    "start": "261160",
    "end": "267360"
  },
  {
    "text": "environment but we're not going to focus on V VPC today we're going to look purely at ec2 and then you can build",
    "start": "267360",
    "end": "274039"
  },
  {
    "text": "upon that knowledge and go look at VPC later or come and see one of our master classes at another",
    "start": "274039",
    "end": "279759"
  },
  {
    "text": "time so let's introduce some terminology then so that we're all talking off the same um book the first thing that we'll",
    "start": "279759",
    "end": "286639"
  },
  {
    "start": "280000",
    "end": "480000"
  },
  {
    "text": "introduce and we'll come back to a number of times is something called an Amazon machine image so an Amazon machine image is a Golden Master a",
    "start": "286639",
    "end": "294160"
  },
  {
    "text": "freeze dried copy if you like of a instance a virtual machine in a running",
    "start": "294160",
    "end": "299960"
  },
  {
    "text": "or stop State you will create an instance from an Ami and there are various different flavors of Ami um such",
    "start": "299960",
    "end": "306639"
  },
  {
    "text": "as Community Based Amis Amazon based Amis and I'll touch on those in a moment but you create an instance so this is",
    "start": "306639",
    "end": "313280"
  },
  {
    "text": "our term for a virtual machine an ec2 instance is Created from an Ami and then",
    "start": "313280",
    "end": "319080"
  },
  {
    "text": "it's that instance that you're choosing to launch in one of two ways currently one is ec2 which is what we'll focus on",
    "start": "319080",
    "end": "326000"
  },
  {
    "text": "today and the second is in a virtual private Cloud which gives you more control over networking constructs and",
    "start": "326000",
    "end": "331520"
  },
  {
    "text": "has some slight differences in terms of instance addressing um and uh we'll",
    "start": "331520",
    "end": "336720"
  },
  {
    "text": "ignore VPC today but be aware of it it gives you an extra layer of control at the networking layer",
    "start": "336720",
    "end": "342199"
  },
  {
    "text": "fundamentally you launch an instance into an availability Zone in a region so",
    "start": "342199",
    "end": "347319"
  },
  {
    "text": "a region is a an isolated set of AWS data centers um such as EU West or we",
    "start": "347319",
    "end": "354039"
  },
  {
    "text": "have us East there's a number of them there's nine of those regions around the world and within a region we have two or",
    "start": "354039",
    "end": "360240"
  },
  {
    "text": "more availability zones which are collections of those data centers that make up a region that are physically",
    "start": "360240",
    "end": "365639"
  },
  {
    "text": "distinct from a power from a flood plane perspective and a networking perspective so you can launch ec2 instances across",
    "start": "365639",
    "end": "373120"
  },
  {
    "text": "multiple availability zones in a region within an availability Zone we",
    "start": "373120",
    "end": "379639"
  },
  {
    "text": "then have something called elastic Block store and this is a dis drive that underlies your ec2 instances and we'll",
    "start": "379639",
    "end": "385919"
  },
  {
    "text": "drill down into storage and block storage throughout this webinar but those EBS volumes your C drive for",
    "start": "385919",
    "end": "393000"
  },
  {
    "text": "Windows instance for example are stored within an availability Zone and they are redundant within that availability zone",
    "start": "393000",
    "end": "399639"
  },
  {
    "text": "so your data is copied twice at least within that availability Zone to ensure you got reliability of those volumes but",
    "start": "399639",
    "end": "406120"
  },
  {
    "text": "it's not a cross availability zone so if you think about launching an ec2 instance you're choosing if you like the",
    "start": "406120",
    "end": "412599"
  },
  {
    "text": "virtual data center that runs in the availability Zone and you can be sure that the disk volumes attached to that",
    "start": "412599",
    "end": "417840"
  },
  {
    "text": "instance in that availability Zone zone are reliable and then you can spread resources across multiple availability",
    "start": "417840",
    "end": "423720"
  },
  {
    "text": "zones multiple virtual data centers and build up within a region a high availability",
    "start": "423720",
    "end": "430039"
  },
  {
    "text": "architecture some of the things that uh integrate then with regional services so",
    "start": "430039",
    "end": "435639"
  },
  {
    "text": "we have S3 a simple storage service that enables you to store objects from 1 byte",
    "start": "435639",
    "end": "440680"
  },
  {
    "text": "to 5 terabytes with 1190 durability there's an S3 masterclass YouTube video",
    "start": "440680",
    "end": "445759"
  },
  {
    "text": "that you can look at if you're interested in that snapshots backup cups of volumes for example are then stored",
    "start": "445759",
    "end": "452120"
  },
  {
    "text": "within S3 so we have EBS snapshots in S3 so they're stored reliably within the",
    "start": "452120",
    "end": "457599"
  },
  {
    "text": "region and then you can recreate volumes you can create backups so you can restore from those backups into the EBS",
    "start": "457599",
    "end": "464080"
  },
  {
    "text": "and therefore you got a management platform for your dis drives underlying ec2 instances so that's the basic",
    "start": "464080",
    "end": "470960"
  },
  {
    "text": "terminology that we'll come back to a few times throughout this presentation Amis instances EBS volumes uh and ec2",
    "start": "470960",
    "end": "480879"
  },
  {
    "text": "so let's look at the instance itself and understand some of the the properties of it and I like to think of these as as",
    "start": "481800",
    "end": "488599"
  },
  {
    "text": "three things your instance in AWS is a unit of control a unit of scale and a",
    "start": "488599",
    "end": "494639"
  },
  {
    "text": "unit of resilience and it's useful to think throughout this webinar of of of",
    "start": "494639",
    "end": "499680"
  },
  {
    "text": "like divorcing yourself from the physical nature of traditional servers because ec2 is a a resource that you can",
    "start": "499680",
    "end": "506159"
  },
  {
    "text": "acquire very easily and you can dispose of very EAS easily and as such it",
    "start": "506159",
    "end": "511639"
  },
  {
    "text": "genders a different thinking about how you architect or how you treat computes CU treat it as just as you would",
    "start": "511639",
    "end": "518000"
  },
  {
    "text": "instantiate an object from a class in a piece of code and then destroy that class when you're done with it you can",
    "start": "518000",
    "end": "523320"
  },
  {
    "text": "treat compute in the same way so unit of control I think of this as embodying",
    "start": "523320",
    "end": "529120"
  },
  {
    "text": "your stack of software the components that you need to run your application whatever that workload is and the OS and",
    "start": "529120",
    "end": "536320"
  },
  {
    "text": "the Machine specification that you might need to run you can bundle that thing as a unit and it could be as simple as a",
    "start": "536320",
    "end": "542600"
  },
  {
    "text": "nodejs server it could be as complex as a a SharePoint um application and you",
    "start": "542600",
    "end": "548839"
  },
  {
    "text": "can bundle those things and your stack then becomes a unit of control where you want to deploy it when you want to",
    "start": "548839",
    "end": "554200"
  },
  {
    "text": "deploy it how many you want to deploy of them and ultimately how you spread those around the world for availability and",
    "start": "554200",
    "end": "560680"
  },
  {
    "text": "architecture and so on so your stack your control and you can choose for example the instance size that you run",
    "start": "560680",
    "end": "566720"
  },
  {
    "text": "on it you're controlling the cost of your applic ation by taking an instance as part and parcel of your application",
    "start": "566720",
    "end": "575040"
  },
  {
    "text": "stack it's a unit of scale because you can spread these things out thinly you can have many of these resources whereas",
    "start": "575040",
    "end": "581600"
  },
  {
    "text": "in a physical world you might be constrained about the number of machines you actually have to do a job you can scale out very easily in ec2 and you can",
    "start": "581600",
    "end": "589959"
  },
  {
    "text": "even play with a cost Dynamics because you can spread out on smaller instances wider get haa High availability as a",
    "start": "589959",
    "end": "597920"
  },
  {
    "text": "result but also save yourself of money in the bargain so a unit of scale is ec2",
    "start": "597920",
    "end": "603560"
  },
  {
    "text": "and a unit of resilience because as you spread things out you can obviously then become fault tolerant you can handle",
    "start": "603560",
    "end": "608800"
  },
  {
    "text": "instance failures and using some of the automation features that I'll talk about in this webinar you can then replace",
    "start": "608800",
    "end": "615000"
  },
  {
    "text": "that instance and it becomes a unit of resilience or",
    "start": "615000",
    "end": "620160"
  },
  {
    "start": "620000",
    "end": "699000"
  },
  {
    "text": "self-healing that brings me into instance types okay so one of the F fundamental things to understand is the",
    "start": "620200",
    "end": "625640"
  },
  {
    "text": "family of instances you can choose from because okay you understand what it is you might might want to go and launch a Windows instance or a Linux instance",
    "start": "625640",
    "end": "632560"
  },
  {
    "text": "what size instance should you choose and now here's a a rather um eye watering diagram and of the number of instances",
    "start": "632560",
    "end": "639040"
  },
  {
    "text": "that AWS currently has we're constantly adding to this family we're adding",
    "start": "639040",
    "end": "644720"
  },
  {
    "text": "everything from high memory right up there at the top right in white and red where we have 244 GB of RAM on an",
    "start": "644720",
    "end": "652160"
  },
  {
    "text": "instance with 16 virtual cores and 240 gig of SSD or right the way down at the",
    "start": "652160",
    "end": "658120"
  },
  {
    "text": "bottom left we have the small red one which is a micro which is two elastic computer units 613 megabyte of Ram or",
    "start": "658120",
    "end": "665480"
  },
  {
    "text": "kind of like the equivalent of an iPhone 5 I would guess so there's a range of families of instances in between that do",
    "start": "665480",
    "end": "672320"
  },
  {
    "text": "different types of jobs from those at the top right that are in high performing um 10 gig fully bisected",
    "start": "672320",
    "end": "679320"
  },
  {
    "text": "networks for doing cluster compute and shipping locks of data efficiently between large instance types to ones",
    "start": "679320",
    "end": "685360"
  },
  {
    "text": "that have proportionately higher memory to CPU versus those have higher CPU to",
    "start": "685360",
    "end": "690480"
  },
  {
    "text": "memory and there's all sorts of different flavors here so you can choose an instance that matches your workload",
    "start": "690480",
    "end": "696200"
  },
  {
    "text": "but one of the things that I would always say is that start small because within ec2 it's easy to scale up your",
    "start": "696200",
    "end": "702639"
  },
  {
    "start": "699000",
    "end": "752000"
  },
  {
    "text": "instance type it's a simple right click resize instance in the console and psychologically I've come across this a",
    "start": "702639",
    "end": "708760"
  },
  {
    "text": "number of times of engineering teams is that what will happen is if you start large there's a reticence to then",
    "start": "708760",
    "end": "714399"
  },
  {
    "text": "downsize for cost efficiency reasons or to check that you're being you know using the best use of resources whereas",
    "start": "714399",
    "end": "720480"
  },
  {
    "text": "if you start small and things don't perform very well it's very easy to go up and you'll sort of find a better balance in that way also engenders this",
    "start": "720480",
    "end": "728200"
  },
  {
    "text": "idea of sort of late binding because what you really want to be doing is taking your application stack and",
    "start": "728200",
    "end": "733959"
  },
  {
    "text": "everything that runs on the OS and then choosing at the last minute what sort of instance it runs on because if you're",
    "start": "733959",
    "end": "739279"
  },
  {
    "text": "divorcing yourself from that sort of decision sort of last minute you can always take advantage of the latest instant type um and get them biggest",
    "start": "739279",
    "end": "746399"
  },
  {
    "text": "bang for buck out of your workloads on an instance it's easy to size up so start",
    "start": "746399",
    "end": "751560"
  },
  {
    "text": "small now earlier I mentioned Amis so there are three broad categories of Amis",
    "start": "751560",
    "end": "756920"
  },
  {
    "start": "752000",
    "end": "842000"
  },
  {
    "text": "so when you launch an instance you'll get to choose one of these sort of categories the first is Amazon",
    "start": "756920",
    "end": "762040"
  },
  {
    "text": "maintained images so we have a set of Linux and windows images we keep them up to date and there are Amis in each",
    "start": "762040",
    "end": "768800"
  },
  {
    "text": "region that you would choose to run from so for example in the EU and you choose to run a Windows Server it will be a",
    "start": "768800",
    "end": "775560"
  },
  {
    "text": "slightly different Ami from the one in us because it's a European distribution of Windows there are Community",
    "start": "775560",
    "end": "782199"
  },
  {
    "text": "maintained Amis and these are published by other users um they're manag and maintained potentially by Marketplace",
    "start": "782199",
    "end": "788839"
  },
  {
    "text": "Partners too so we have a marketplace where vendors can publish Amis and then everyone has the ability to share Amis",
    "start": "788839",
    "end": "795440"
  },
  {
    "text": "with everyone else so Marketplace are kind of a trusted place to get community assets from um whereas in the user",
    "start": "795440",
    "end": "802880"
  },
  {
    "text": "shared environment you might want to take care and attention about what's there they may be really handy for getting you going but you may want to",
    "start": "802880",
    "end": "808560"
  },
  {
    "text": "consider what was on that Ami and what was built into it in the first place and whether it really meets your needs then",
    "start": "808560",
    "end": "813920"
  },
  {
    "text": "of course there are your machine images so you can create Amis from ec2 instances that youve built and",
    "start": "813920",
    "end": "819959"
  },
  {
    "text": "configured and you can keep these private to yourselves or share them with other users or other accounts you might have other people in your team might",
    "start": "819959",
    "end": "826440"
  },
  {
    "text": "have other accounts within your company and you can share that and build golden Masters now the use of Amis in your",
    "start": "826440",
    "end": "832959"
  },
  {
    "text": "context is something I'm going to come back to as a key part of understanding at a deeper level how to really wield",
    "start": "832959",
    "end": "838839"
  },
  {
    "text": "these C2 in a dynamic environment so I mentioned that Amis are",
    "start": "838839",
    "end": "845240"
  },
  {
    "start": "842000",
    "end": "883000"
  },
  {
    "text": "um have defined uh published ones by Amazon and here is a list and you give",
    "start": "845240",
    "end": "850560"
  },
  {
    "text": "for example for Amazon Linux Amis um you can go to that URL at the top and here's a list of the Ami IDs in different",
    "start": "850560",
    "end": "857720"
  },
  {
    "text": "regions for different types of instances running Amazon Linux whether it being an",
    "start": "857720",
    "end": "863079"
  },
  {
    "text": "elastic Block store backed 32bit instance or far right whether it being",
    "start": "863079",
    "end": "868759"
  },
  {
    "text": "in a a couple of regions where you can run cluster gpus with Nvidia cards in them a 64-bit backed machine so",
    "start": "868759",
    "end": "874880"
  },
  {
    "text": "configured os's to handle the different types of Hardware that is running under",
    "start": "874880",
    "end": "880320"
  },
  {
    "text": "underneath these different instance types so if you look at the Amis",
    "start": "880320",
    "end": "886560"
  },
  {
    "start": "883000",
    "end": "947000"
  },
  {
    "text": "themselves that we maintain and I've chosen to ignore the micro here and go for a price point on a small instance so",
    "start": "886560",
    "end": "893560"
  },
  {
    "text": "just looking at the left we have sort of our Linux and auntu so a small instance from 6 cents per hour this is an a ond",
    "start": "893560",
    "end": "902040"
  },
  {
    "text": "demand Pay you go price for running that sort of distribution whereas in the middle we have Enterprise Linux variants",
    "start": "902040",
    "end": "908480"
  },
  {
    "text": "and you can see the prices are are different from say Amazon web services Linux and this is because the hourly",
    "start": "908480",
    "end": "915040"
  },
  {
    "text": "price includes the license for running that particular OS distribution so whether you're after suie Enterprise or",
    "start": "915040",
    "end": "921040"
  },
  {
    "text": "red hat Enterprise you can choose to launch those from a maintained set of Amis and know that the license is",
    "start": "921040",
    "end": "926639"
  },
  {
    "text": "included for those distributions like Rees with Windows Server so Windows",
    "start": "926639",
    "end": "931720"
  },
  {
    "text": "server from 112 cents per hour license include you don't have to worry about the license of the windows software but",
    "start": "931720",
    "end": "937839"
  },
  {
    "text": "you of course then the applications that live on any of these distributions if they come with some sort of Licensing constraint that's your",
    "start": "937839",
    "end": "945759"
  },
  {
    "text": "responsibility just another point on sort of Economics just so you understand instance types I've just mentioned on",
    "start": "946639",
    "end": "952279"
  },
  {
    "start": "947000",
    "end": "1131000"
  },
  {
    "text": "demand instance types and here we s a micro starting at 2 cents per hour this is a price that you pay when you acquire",
    "start": "952279",
    "end": "958560"
  },
  {
    "text": "an you choose your instance type you choose where you want to run it and you'll pay a price per hour for that instance so the classic way of dealing",
    "start": "958560",
    "end": "966360"
  },
  {
    "text": "or interacting on getting an on demand ec2 instance you can also Reserve",
    "start": "966360",
    "end": "971519"
  },
  {
    "text": "instances and this is a really important step because it's a great first step in cost optimization because let's say",
    "start": "971519",
    "end": "977440"
  },
  {
    "text": "you're running a server that is always on it's 24 by7 and you're paying the on demand price you can actually reduce",
    "start": "977440",
    "end": "984279"
  },
  {
    "text": "your overall cost for running that instance by paying an upfront fee and that up front fee will depend upon",
    "start": "984279",
    "end": "991040"
  },
  {
    "text": "whether you take a one or threeyear term what you're buying is a billing construct you're choosing the instance",
    "start": "991040",
    "end": "997440"
  },
  {
    "text": "type that you're running the availability Zone and the region and the distribution of of that you're running",
    "start": "997440",
    "end": "1002759"
  },
  {
    "text": "of the OS on top of it and if you're running any of those instances at that point in time you will then get a",
    "start": "1002759",
    "end": "1008319"
  },
  {
    "text": "discount on the hourly rate okay so you can save yourself and it pays back really quickly actually 6 or nine months",
    "start": "1008319",
    "end": "1014240"
  },
  {
    "text": "depending upon a one or threeyear term and there are different types of these because depending upon how often that",
    "start": "1014240",
    "end": "1020279"
  },
  {
    "text": "machine is running you can buy different types of RIS so if it's running all the time there's a heavy utilization Ri so",
    "start": "1020279",
    "end": "1026798"
  },
  {
    "text": "you get the maximum saving but we're assuming you will always be running one of those instance types so you'll always",
    "start": "1026799",
    "end": "1032038"
  },
  {
    "text": "pay for the ri whether you're running an instance or not versus medium and light utilization so if the things are turning",
    "start": "1032039",
    "end": "1038199"
  },
  {
    "text": "on and off overnight maybe you might consider a medium utiliz utilization RI and the price points and so on and the",
    "start": "1038199",
    "end": "1044959"
  },
  {
    "text": "the cost the savings come into play there so if you're interested in those things reach out on the contact us form",
    "start": "1044959",
    "end": "1050720"
  },
  {
    "text": "and we can get in touch with you lastly the spot instances so this really",
    "start": "1050720",
    "end": "1056320"
  },
  {
    "text": "epitomizes um disposable compute really because this is about getting access to",
    "start": "1056320",
    "end": "1061720"
  },
  {
    "text": "ec2 resources the excess capacity of you like in the cloud for a particular insance type at a far reduced price so",
    "start": "1061720",
    "end": "1069360"
  },
  {
    "text": "where it's underutilized the price you'll pay will be far less than the on demand price there a supply and demand",
    "start": "1069360",
    "end": "1075600"
  },
  {
    "text": "thing going on and you bid a price you're willing to pay to acquire the that particular resource now if you",
    "start": "1075600",
    "end": "1080880"
  },
  {
    "text": "think about your workloads some workloads are perfect for this so there might be batch processing workloads that",
    "start": "1080880",
    "end": "1088200"
  },
  {
    "text": "are feeding off a queue where you need instances to spawn up you need them to consume some day to do a job and then",
    "start": "1088200",
    "end": "1094240"
  },
  {
    "text": "you can happy for them to go away media transcoding for example is a great example you could be doing Hadoop Big",
    "start": "1094240",
    "end": "1100559"
  },
  {
    "text": "Data analysis where you're parallelizing very large data sets and actually very fault tolerant as a nature that sort of",
    "start": "1100559",
    "end": "1106960"
  },
  {
    "text": "framework where instances can come and go you got that sort of workload where it's not needing to be run 24 by7 spot",
    "start": "1106960",
    "end": "1113480"
  },
  {
    "text": "instances are a great way of saving a whole bunch of cash but be aware that if your bid goes below uh the market price",
    "start": "1113480",
    "end": "1121440"
  },
  {
    "text": "your instances will be terminated so starts making you think about architecting for disposable comput and",
    "start": "1121440",
    "end": "1127880"
  },
  {
    "text": "compute that can come and go all right so that's kind of the background on instance tipes and a bit",
    "start": "1127880",
    "end": "1133760"
  },
  {
    "text": "of flavor about the pricing models you can put around it let's go then one step deeper and talk about how we launch an",
    "start": "1133760",
    "end": "1139240"
  },
  {
    "text": "instance look at some of the commands that we can use Concepts such as key Pairs and security groups so you're",
    "start": "1139240",
    "end": "1144320"
  },
  {
    "text": "completely familiar so you can go into the console and you can launch using one of three",
    "start": "1144320",
    "end": "1151360"
  },
  {
    "text": "different Wizards and instance you can choose to use a classic wizard a quick launch wizard that fills a lot of stuff out for you or you can launch using the",
    "start": "1151360",
    "end": "1158760"
  },
  {
    "text": "marketplace wizard where you can select some stuff from the outside world and it will preconfig things like security",
    "start": "1158760",
    "end": "1163919"
  },
  {
    "text": "groups and assets on time those instances as it launches and you can easily go through that and the core",
    "start": "1163919",
    "end": "1170600"
  },
  {
    "text": "things that you need to know when you're launching an instance are here so one is where you want to launch it the region",
    "start": "1170600",
    "end": "1177240"
  },
  {
    "start": "1174000",
    "end": "1224000"
  },
  {
    "text": "within the AWS Network that you're launching into such as EU such as us East and so on the instance size that",
    "start": "1177240",
    "end": "1184360"
  },
  {
    "text": "you wish to launch so this could be an M1 small it could be a cluster compute and all our instances have a particular",
    "start": "1184360",
    "end": "1191080"
  },
  {
    "text": "API name that are listed on our documentation site the Amazon machine image you're going to launch from so",
    "start": "1191080",
    "end": "1197440"
  },
  {
    "text": "whether that be one of ours that we maintain or indeed one of yours and then two things at the bottom here key pair",
    "start": "1197440",
    "end": "1203520"
  },
  {
    "text": "and Security Group so key Pairs and security groups are controls in which you can imply to how you access your",
    "start": "1203520",
    "end": "1210960"
  },
  {
    "text": "machine and and how that software running on that machine is accessed over a network so authentication for a human",
    "start": "1210960",
    "end": "1217159"
  },
  {
    "text": "to log on and then firewalling security grouping around the instance to control",
    "start": "1217159",
    "end": "1222559"
  },
  {
    "text": "the traffic so key pairs are something let's just talk about key Pairs and",
    "start": "1222559",
    "end": "1227919"
  },
  {
    "start": "1224000",
    "end": "1383000"
  },
  {
    "text": "distinguish them from some of the other things that we have in AWS that sound a bit similar so when we launch an",
    "start": "1227919",
    "end": "1234120"
  },
  {
    "text": "instance um a couple of things happen the primary thing around key pairs is that a public key portion of a key pair",
    "start": "1234120",
    "end": "1242919"
  },
  {
    "text": "that you generate within the console or via the apis is inserted into your running instance at launch time so the",
    "start": "1242919",
    "end": "1250760"
  },
  {
    "text": "ec2 instance receives your public key as it's launched and thereafter if you wish",
    "start": "1250760",
    "end": "1256480"
  },
  {
    "text": "to access that instance so you need to use the private key that you received",
    "start": "1256480",
    "end": "1261960"
  },
  {
    "text": "when you uh generated your key pair in order for you to be able to access that instance so you can't for example a",
    "start": "1261960",
    "end": "1268559"
  },
  {
    "text": "Linux SSH onto an Amazon Linux instance without your private key when you're doing Windows the process is similar in",
    "start": "1268559",
    "end": "1276039"
  },
  {
    "text": "that the public key is inserted into the ec2 instance running Windows but then that public key is used to encrypt a",
    "start": "1276039",
    "end": "1282799"
  },
  {
    "text": "firsttime random Windows administrator password that's then passed out via CIS",
    "start": "1282799",
    "end": "1287960"
  },
  {
    "text": "log and then you use that private key to unencrypt that password so you can RDP onto that instance and then you can",
    "start": "1287960",
    "end": "1294600"
  },
  {
    "text": "configure that box so a similar thing about securing first access onto the",
    "start": "1294600",
    "end": "1300400"
  },
  {
    "text": "instance so key pairs on the Left End are used to authenticate when accessing an instance versus some other things",
    "start": "1300400",
    "end": "1307400"
  },
  {
    "text": "you'll come across within ec2 particularly when you're using uh apis or commandline tools and so on versus",
    "start": "1307400",
    "end": "1314520"
  },
  {
    "text": "something called credentials so credentials is an access key and a secret key used to",
    "start": "1314520",
    "end": "1320039"
  },
  {
    "text": "authenticate against apis so this is if you're using uh command line tools to",
    "start": "1320039",
    "end": "1325600"
  },
  {
    "text": "launch an instance for example or using our autoscaling tools to manage Auto scaling you'll have these two things",
    "start": "1325600",
    "end": "1332360"
  },
  {
    "text": "that you can download from your account a shorter and a longer string that will then be having to pass in to all of our",
    "start": "1332360",
    "end": "1339159"
  },
  {
    "text": "API calls so we know who you are and we can check that your account is is good and valid you'll also find some of the",
    "start": "1339159",
    "end": "1346559"
  },
  {
    "text": "tools um use X5 509 certificate and this is a bit of a Heritage so a similar sort",
    "start": "1346559",
    "end": "1352240"
  },
  {
    "text": "of construct a key pair using to authenticate against some of the apis but you'll find that most of them now standardizing with the use of access key",
    "start": "1352240",
    "end": "1359320"
  },
  {
    "text": "and secret key for the credentials to access apis and this is very distinct",
    "start": "1359320",
    "end": "1365080"
  },
  {
    "text": "from Key pairs which are used to actually enable administrator access to an instance so think of credentials",
    "start": "1365080",
    "end": "1372080"
  },
  {
    "text": "being used by code deployed on ec2 instance to access API such as S3 and",
    "start": "1372080",
    "end": "1377760"
  },
  {
    "text": "the keypads Sal being used by admins to access the boxes to do some sort of administration",
    "start": "1377760",
    "end": "1383679"
  },
  {
    "start": "1383000",
    "end": "1570000"
  },
  {
    "text": "task next up then is security groups so security groups are instance firewalling",
    "start": "1383679",
    "end": "1388799"
  },
  {
    "text": "so as you launch an instance you'll be CH asked to choose a security group to apply to so by default ec2 instances",
    "start": "1388799",
    "end": "1394880"
  },
  {
    "text": "come up as as Lockdown so no access you need to open up something and typically let's say you're launching a web server",
    "start": "1394880",
    "end": "1402360"
  },
  {
    "text": "um and you're going to open up Port 80 it's an inbound firewall rule essentially in a security group and Port",
    "start": "1402360",
    "end": "1407880"
  },
  {
    "text": "22 to allow SSH so that I can log onto this box I can configure this instance and Paul T is going to allow web",
    "start": "1407880",
    "end": "1414279"
  },
  {
    "text": "traffick in to be served by a web server running on that instance now you can um",
    "start": "1414279",
    "end": "1420080"
  },
  {
    "text": "add many instances to a security group you can modify security groups you can authenticate One Security Group to talk",
    "start": "1420080",
    "end": "1426559"
  },
  {
    "text": "to another as well as adding IP address ranges and Port ranges so an inbound firewall is what that is a security",
    "start": "1426559",
    "end": "1433760"
  },
  {
    "text": "group VPC slightly differs it adds more features to security groups um and if",
    "start": "1433760",
    "end": "1439240"
  },
  {
    "text": "you want to learn about that I'd suggest to have a look at the documentation or come and visit our VPC webinar that",
    "start": "1439240",
    "end": "1444919"
  },
  {
    "text": "we'll holding in the future so take a look at this then so this is Powershell we've got some",
    "start": "1444919",
    "end": "1451799"
  },
  {
    "text": "Powershell tools for launching an instance and if you ignoring the console this is using Powershell to launch some",
    "start": "1451799",
    "end": "1458600"
  },
  {
    "text": "instances and you can see some of the key terms or the key parameters that I",
    "start": "1458600",
    "end": "1463760"
  },
  {
    "text": "passed into this command so new ec2 instances I'm firing an image so it's a certain Ami I'm launching from I'm",
    "start": "1463760",
    "end": "1470679"
  },
  {
    "text": "asking this instance to be started with my key and that's my key pair name that I've got and I've downloaded the private",
    "start": "1470679",
    "end": "1476159"
  },
  {
    "text": "key portion of that it's going to go into a security group and this time referenced by ID so the idea of the",
    "start": "1476159",
    "end": "1482240"
  },
  {
    "text": "security group that for example enables Port 80 to be accessed on this box and then instance type I'm going to launch a",
    "start": "1482240",
    "end": "1488440"
  },
  {
    "text": "T1 micro and this is a API name for a micro size instance say Powershell there",
    "start": "1488440",
    "end": "1494760"
  },
  {
    "text": "is an example of launching an instance just as easily on Linux I could",
    "start": "1494760",
    "end": "1500240"
  },
  {
    "text": "be using our CLI tools and I would be using E2 run instances from the shell",
    "start": "1500240",
    "end": "1506640"
  },
  {
    "text": "again the Ami that I'm launching from in this case I've added an instance count or something slightly different the",
    "start": "1506640",
    "end": "1512720"
  },
  {
    "text": "group The Security Group This Time by logical name web servers the key pair",
    "start": "1512720",
    "end": "1517760"
  },
  {
    "text": "I'm going to use and the instance type I want to launch so I can launch instances",
    "start": "1517760",
    "end": "1523000"
  },
  {
    "text": "from a scripting language on Windows and Linux with with ease and it's very powerful there's a number of options and",
    "start": "1523000",
    "end": "1528440"
  },
  {
    "text": "if you download and install the tools you'll see how that works with a help command you can also do this wrapped",
    "start": "1528440",
    "end": "1536120"
  },
  {
    "text": "from sdks so here I've got python Botto which is an Amazon maintained python",
    "start": "1536120",
    "end": "1541320"
  },
  {
    "text": "Library so I'm importing boto ec2 Library I'm connecting to a region in",
    "start": "1541320",
    "end": "1547240"
  },
  {
    "text": "this case Us East then I'm using that connection object to run instances and the the same way I'm launching from an",
    "start": "1547240",
    "end": "1552640"
  },
  {
    "text": "Ami from a passing in my key pair that I want to insert into the running instance and using an M1 small and I'm assigning",
    "start": "1552640",
    "end": "1559480"
  },
  {
    "text": "the Security Group web servers to this running instance now we'll go off and launch an instance and all three of those examples that all pop up in the",
    "start": "1559480",
    "end": "1565559"
  },
  {
    "text": "console as as regular instances and I can get on and use them but what if you want to use those",
    "start": "1565559",
    "end": "1571799"
  },
  {
    "start": "1570000",
    "end": "1721000"
  },
  {
    "text": "tools okay so I mentioned that there are CLI tools and know there's python Botto there's po shell well here's a really",
    "start": "1571799",
    "end": "1578120"
  },
  {
    "text": "good tip that brings together some of the things I've mentioned and it's called IM roles and the ec2 tools so",
    "start": "1578120",
    "end": "1584600"
  },
  {
    "text": "when you uh create something called an identity and access management rooll when you launch an ec2 instance in the",
    "start": "1584600",
    "end": "1591840"
  },
  {
    "text": "Wizards you can select that role so here I'm showing sort of a an IM roll that",
    "start": "1591840",
    "end": "1597640"
  },
  {
    "text": "I've called AWS tools and it's a little drop down that you'll find in the Wizard for launching an ec2 instance on the",
    "start": "1597640",
    "end": "1604200"
  },
  {
    "text": "right I'm showing a couple of screens from the create roll wizard within the IM tab of the console and I'm creating",
    "start": "1604200",
    "end": "1611720"
  },
  {
    "text": "I'm chosing actually the top one which is an Amazon ec2 service role which allows ec2 instances to call a AWS",
    "start": "1611720",
    "end": "1618760"
  },
  {
    "text": "services on your behalf and it effectively puts a policy shown below",
    "start": "1618760",
    "end": "1623960"
  },
  {
    "text": "against this instance which allows it to not do any resource allocation Im so not",
    "start": "1623960",
    "end": "1630000"
  },
  {
    "text": "change any roles but this instance is actually allowed to access anything within AWS okay any of the apis so it's",
    "start": "1630000",
    "end": "1637559"
  },
  {
    "text": "a very open Rule now you can obviously lock that down the point is that when I launch that instance and I'm launching",
    "start": "1637559",
    "end": "1644159"
  },
  {
    "text": "it from an Amazon maintained Linux instance or an Amazon windows instance Ami all the tools will be installed and",
    "start": "1644159",
    "end": "1651880"
  },
  {
    "text": "configured on that instance already and then what will happen is that that policy will then ensure that your secret",
    "start": "1651880",
    "end": "1658120"
  },
  {
    "text": "access keys and uh uh access key and secret key are maintained dynamically",
    "start": "1658120",
    "end": "1664159"
  },
  {
    "text": "and rotated on that box because when you set up your tools on your own machine for example and you download them you",
    "start": "1664159",
    "end": "1670919"
  },
  {
    "text": "need to configure things like your secret key so that we can authenticate against the API whereas if you launch an",
    "start": "1670919",
    "end": "1676720"
  },
  {
    "text": "ec2 instance under an en roll all of that is taken care for you if you need",
    "start": "1676720",
    "end": "1682399"
  },
  {
    "text": "to revoke access to that you can simply change the policy and say disallow every resource and will automatically stop",
    "start": "1682399",
    "end": "1688640"
  },
  {
    "text": "that instance being able to use any of the tools so this means you can get up and running in a minute or two and then",
    "start": "1688640",
    "end": "1694360"
  },
  {
    "text": "you can just SSH on or RDP on and you can be diving into the power shell tools you can be using S3 apis ec2 launch",
    "start": "1694360",
    "end": "1701760"
  },
  {
    "text": "instances and so on and when you're done with that environment just stop it or terminate it cuz it's very easy to",
    "start": "1701760",
    "end": "1706840"
  },
  {
    "text": "create a new one but stopping it means you've always got a little launch pad that's secure um for you to use the",
    "start": "1706840",
    "end": "1712640"
  },
  {
    "text": "tools and that's loads easier than maintaining tools on your own machines and it's a great way of getting started",
    "start": "1712640",
    "end": "1718279"
  },
  {
    "text": "with these tools so great tip so now you have the tools once you've done that and you can do that in",
    "start": "1718279",
    "end": "1723679"
  },
  {
    "start": "1721000",
    "end": "1766000"
  },
  {
    "text": "a couple of minutes try this so here I'm running an instance just based upon the Ami and I'm saying launch one of them",
    "start": "1723679",
    "end": "1731120"
  },
  {
    "text": "okay so there's a few things missing there where it looks like there is so what about all this so the group of web",
    "start": "1731120",
    "end": "1736720"
  },
  {
    "text": "servers for security the key pair I'm going to use and the instance type that I want to launch well there's a few",
    "start": "1736720",
    "end": "1742720"
  },
  {
    "text": "things that are defaulted when you do a launch instance okay so for example the security group will go to the default",
    "start": "1742720",
    "end": "1749720"
  },
  {
    "text": "Security Group and there's always a default Security Group in a region the instance type will default to an M1",
    "start": "1749720",
    "end": "1755679"
  },
  {
    "text": "small instance type but the key will default to none so what about the",
    "start": "1755679",
    "end": "1763440"
  },
  {
    "text": "key well instances don't actually need key pairs okay so actually in a highly",
    "start": "1763440",
    "end": "1769039"
  },
  {
    "text": "secure environment if you're thinking about ec2 up front and how you deploy this stuff you don't actually want",
    "start": "1769039",
    "end": "1774240"
  },
  {
    "text": "people logging on to your production instances or any instance in the cloud ideally you want it to be completely",
    "start": "1774240",
    "end": "1780039"
  },
  {
    "text": "locked down but that begs the question and how do you configure that instance if you can't log onto it how do you",
    "start": "1780039",
    "end": "1785840"
  },
  {
    "text": "bootstrap it how do you get it to install software there's a number of tools that we got in the tool box that",
    "start": "1785840",
    "end": "1791000"
  },
  {
    "text": "enable you to do that and again this is feeding into the idea that your computer resource can come and go and if you",
    "start": "1791000",
    "end": "1796720"
  },
  {
    "text": "embody some of these principles and you get this right you'll have a an automated architecture in how you deploy",
    "start": "1796720",
    "end": "1803480"
  },
  {
    "text": "stuff and get things without any fingers touching so",
    "start": "1803480",
    "end": "1810440"
  },
  {
    "text": "bootstrapping uh baking an Ami so there's two ways you can do",
    "start": "1810440",
    "end": "1815480"
  },
  {
    "text": "bootstrapping uh first off is that you can bake software into the Amazon machine image so you would start an",
    "start": "1815480",
    "end": "1821640"
  },
  {
    "text": "instance you would configure that instance by logging onto it you would install some software you would then and",
    "start": "1821640",
    "end": "1828240"
  },
  {
    "text": "configure that software and then you would create an Ami from your instance so you would then come up with an Ami in",
    "start": "1828240",
    "end": "1835279"
  },
  {
    "text": "your account that's configured the way you want it and then you can just simply pass that Ami ID into starting new",
    "start": "1835279",
    "end": "1843039"
  },
  {
    "text": "instances versus configuring instance",
    "start": "1843039",
    "end": "1848320"
  },
  {
    "text": "dynamically so this is where we could launch an instance and we' use something called the metadata service and some",
    "start": "1848480",
    "end": "1854919"
  },
  {
    "text": "Associated technologies that are embedded in EC instances like Amazon Linux has cloud in it and there's ec2",
    "start": "1854919",
    "end": "1861480"
  },
  {
    "text": "config on Windows and we'll talk about how those work in a moment to perform actions on those",
    "start": "1861480",
    "end": "1868398"
  },
  {
    "text": "instances when it launches so you might choose to install a web server configure",
    "start": "1868639",
    "end": "1874120"
  },
  {
    "text": "I install or download some software code to run a website for example I'm a",
    "start": "1874120",
    "end": "1879399"
  },
  {
    "text": "simple example so there's two kind of approaches there how much you bake into an Ami versus how much you configure",
    "start": "1879399",
    "end": "1885639"
  },
  {
    "text": "dynamically and actually the the real way of thinking about this is a combination of the two and a balance",
    "start": "1885639",
    "end": "1891320"
  },
  {
    "text": "between the two so the first is to bake your Ami and build your base image um",
    "start": "1891320",
    "end": "1896919"
  },
  {
    "text": "and set up some maybe custom initialization scripts that you need to run uh on your server so these might be",
    "start": "1896919",
    "end": "1903240"
  },
  {
    "text": "things that react to data you pass into it dynamically at launch time you might set up different types of security setup",
    "start": "1903240",
    "end": "1910159"
  },
  {
    "text": "on that machine certain patch levels that you're comfortable with running at an OS level within your environment and",
    "start": "1910159",
    "end": "1916399"
  },
  {
    "text": "ultimately maintain your gold base so this becomes your base for running different things then",
    "start": "1916399",
    "end": "1923399"
  },
  {
    "text": "configuring that instance type dynamically when you launch from the Ami you'd use bootstrapping to pass custom",
    "start": "1923399",
    "end": "1928880"
  },
  {
    "text": "information in perform some sort of post launch task like pulling code from SVN",
    "start": "1928880",
    "end": "1934159"
  },
  {
    "text": "installing different types of software packages maybe configuring environment variables so that this server behaves as",
    "start": "1934159",
    "end": "1941039"
  },
  {
    "text": "a production server versus a Dev test server for example and it' be the",
    "start": "1941039",
    "end": "1946159"
  },
  {
    "text": "balance between the two that you need to get right so if you think about baking an Ami think about the constraints you have",
    "start": "1946159",
    "end": "1953279"
  },
  {
    "text": "and how fast you want to start an instance up so the sorts of things you would bake would be maybe something that's",
    "start": "1953279",
    "end": "1960360"
  },
  {
    "text": "time consuming so something you don't want to take up too much time when the instance starts bake it into the Ami cuz",
    "start": "1960360",
    "end": "1966440"
  },
  {
    "text": "it's already done so think startup time things that are going to take a long time maybe doing yum update on a wind on",
    "start": "1966440",
    "end": "1972519"
  },
  {
    "text": "a Linux instance to update all your packages is probably not the thing to do every time when you launch an instance",
    "start": "1972519",
    "end": "1979399"
  },
  {
    "text": "dynamically do it once and maintain your golden base also things that are more static so that take uh mean that you",
    "start": "1979399",
    "end": "1986720"
  },
  {
    "text": "don't have to change manage your Amis all the time so things that are going to change less often bake into an Ami",
    "start": "1986720",
    "end": "1993399"
  },
  {
    "text": "versus moving towards the right on this sort of balance is that you know things like your latest code if you're doing",
    "start": "1993399",
    "end": "1999840"
  },
  {
    "text": "continuous deployment or environment specific properties that need to be configured as an instance comes up these",
    "start": "1999840",
    "end": "2005480"
  },
  {
    "text": "should be done dynamically via bootstrapping so you're talking about finding the right balance between baking",
    "start": "2005480",
    "end": "2011279"
  },
  {
    "text": "an Ami and minimizing your management overhead versus configuring something",
    "start": "2011279",
    "end": "2017360"
  },
  {
    "text": "dynamically so the goal is ultimately to bring up an instance in a use Source State and that balance will vary",
    "start": "2017360",
    "end": "2023200"
  },
  {
    "text": "depending upon your application but you want to think about instances coming up being asking where they are what they",
    "start": "2023200",
    "end": "2030039"
  },
  {
    "text": "should be configured to do configuring themselves and then getting on with the job and that you shouldn't need to",
    "start": "2030039",
    "end": "2035519"
  },
  {
    "text": "access that machine or SSH onto that machine machine ever and hence doing it without a key pair is a great way of",
    "start": "2035519",
    "end": "2041159"
  },
  {
    "text": "ensuring that you're coming from a highly secure standpoint and you're already in gendering the philosophy of",
    "start": "2041159",
    "end": "2048118"
  },
  {
    "text": "disposable compute because if that machine goes wrong the right thing to do is to destroy it and then recreate it",
    "start": "2048119",
    "end": "2055560"
  },
  {
    "text": "via command to come from fresh once again so the services that enable you to",
    "start": "2055560",
    "end": "2062398"
  },
  {
    "text": "do that is that when you pass in something called user data it can be a file it can be a reference to file it",
    "start": "2062399",
    "end": "2068000"
  },
  {
    "text": "can be a piece of text you could in your request as a as a property whether it be in the console or whether it be by a",
    "start": "2068000",
    "end": "2075200"
  },
  {
    "text": "command or an API that user data is passed to a known endpoint in a region and it's called the metadata service and",
    "start": "2075200",
    "end": "2081440"
  },
  {
    "text": "every region the same address IP address within that region has the metadata service and an instance that's launching",
    "start": "2081440",
    "end": "2088800"
  },
  {
    "text": "can get a whole bunch of information about itself uh from the metadata service and some of those things",
    "start": "2088800",
    "end": "2094960"
  },
  {
    "text": "obviously are the user data you passed in so the custom data dat that we've passed in at launch time so when an",
    "start": "2094960",
    "end": "2100119"
  },
  {
    "text": "instance comes up that user data is then passed to the instance and depending upon a Windows or Linux uh instance",
    "start": "2100119",
    "end": "2106480"
  },
  {
    "text": "there's a different type of setup on that instance that will receive that data and do something with it and now",
    "start": "2106480",
    "end": "2111640"
  },
  {
    "text": "you can of course add your own custom ways of managing this and you can there's great examples on our website",
    "start": "2111640",
    "end": "2118119"
  },
  {
    "text": "about passing in different types of CSV or fix length file format type data into",
    "start": "2118119",
    "end": "2123400"
  },
  {
    "text": "user data and having custom scripts interpret it but there's a great property of the standard setup that enables you",
    "start": "2123400",
    "end": "2130599"
  },
  {
    "text": "to execute A bash script um on launch so if you were to pass this in simply this",
    "start": "2130599",
    "end": "2136640"
  },
  {
    "text": "chunk of text as part of user data to a launch request in the console to an Amazon Linux instance this would install",
    "start": "2136640",
    "end": "2144320"
  },
  {
    "text": "Apache mysl tools and PHP so it enable this as a a web server that could run",
    "start": "2144320",
    "end": "2151280"
  },
  {
    "text": "PHP and that could talk to a mySQL database it would turn Apache on and it",
    "start": "2151280",
    "end": "2156440"
  },
  {
    "text": "would ensure that it was set as a service so it was always running at launch so as this instance comes up it",
    "start": "2156440",
    "end": "2162839"
  },
  {
    "text": "will install this software and be running a web server automatically on Windows it's something",
    "start": "2162839",
    "end": "2169319"
  },
  {
    "text": "called ec2 config service that's running on our distributions that does a similar job for user data so you could pass",
    "start": "2169319",
    "end": "2175599"
  },
  {
    "text": "anything that you could do as a um a command prompt there in the script tags",
    "start": "2175599",
    "end": "2180800"
  },
  {
    "text": "if you passed in Powershell you can do anything um that can run within a",
    "start": "2180800",
    "end": "2186079"
  },
  {
    "text": "Powershell tag so this is a similar task of doing a Bas script on Linux now if you've used IM rols to launch this",
    "start": "2186079",
    "end": "2193560"
  },
  {
    "text": "instance and this instance is therefore authorized to use services such as S3 as",
    "start": "2193560",
    "end": "2199720"
  },
  {
    "text": "part of its launch then you can do anything that you can do in the Powershell tools so there I'm passing in",
    "start": "2199720",
    "end": "2204960"
  },
  {
    "text": "to a Windows instance reading from S3 a bucket from S3 downloading a zip file",
    "start": "2204960",
    "end": "2210920"
  },
  {
    "text": "and sticking into a local file on the C drive of this instance as it comes up so",
    "start": "2210920",
    "end": "2216359"
  },
  {
    "text": "you can bootstrap window and Linux instances and if you combine that with I roles you've got a really powerful tool",
    "start": "2216359",
    "end": "2222200"
  },
  {
    "text": "for doing all sorts of Uh custom actions as an instance comes up so ion rules and",
    "start": "2222200",
    "end": "2228359"
  },
  {
    "text": "rolls and bootstrapping are your friends so why do all of this really and",
    "start": "2228359",
    "end": "2233920"
  },
  {
    "text": "just trying to sort of bring your head above water really and sort of understand the reasons behind this is that automation less fingers involved",
    "start": "2233920",
    "end": "2241560"
  },
  {
    "text": "means less mistakes means you can take out a lot of the guest work in how you got to a configuration or environment so",
    "start": "2241560",
    "end": "2247599"
  },
  {
    "text": "always a good thing to do security your instances will be locked down by default if you don't have keys on them and you",
    "start": "2247599",
    "end": "2253680"
  },
  {
    "text": "don't need people to access them to configure them then you're going to be in a better position you're going to have a better security stance by default",
    "start": "2253680",
    "end": "2260760"
  },
  {
    "text": "um higher availability because you can spin up multiple identical copies you can spread across multiple availability",
    "start": "2260760",
    "end": "2266359"
  },
  {
    "text": "zones you can use these constructs to drive Auto healing because if an instance fails you just simply blow it",
    "start": "2266359",
    "end": "2271560"
  },
  {
    "text": "away and you recreate it and you can drive that in a number of ways within AWS it's flexible you can New Shell",
    "start": "2271560",
    "end": "2278240"
  },
  {
    "text": "power shell cloud formation Chef puppet opsw work a new framework um so you can",
    "start": "2278240",
    "end": "2283760"
  },
  {
    "text": "really do anything you like in terms of the bootstrapping and bring these instances up to be very useful from the",
    "start": "2283760",
    "end": "2289760"
  },
  {
    "text": "off without any sort of complex configuration by hand it's efficient because you can manage your state with",
    "start": "2289760",
    "end": "2294960"
  },
  {
    "text": "less time and effort and this is a way that you can scale because without using this sort of philosophy behind managing",
    "start": "2294960",
    "end": "2300640"
  },
  {
    "text": "a large scale ec2 Fleet it becomes a very very hard task to manage an auto scaling or a very large scale",
    "start": "2300640",
    "end": "2307560"
  },
  {
    "text": "application workload so some dos and does though so do use IM roles go keyless if you can",
    "start": "2307560",
    "end": "2316240"
  },
  {
    "text": "because that engenders a better security stance and then strike a balance between the Ami and dynamic bootstrapping how",
    "start": "2316240",
    "end": "2321839"
  },
  {
    "text": "much you bake in the Ami and how much you do dynamically but the don't is don't put those API access Keys into",
    "start": "2321839",
    "end": "2328720"
  },
  {
    "text": "your code uh or bake them into Amis and then share them so don't publish code to",
    "start": "2328720",
    "end": "2334800"
  },
  {
    "text": "git that's got your secret key and your access key so you know think about the",
    "start": "2334800",
    "end": "2340920"
  },
  {
    "text": "IM way of doing things is that your code doesn't need to have embedded keys to",
    "start": "2340920",
    "end": "2345960"
  },
  {
    "text": "use things like S3 apis it can receive those because the instance will launch with an IM rooll and they'll all be",
    "start": "2345960",
    "end": "2352640"
  },
  {
    "text": "properties within the environment that you're running in you just read them in and you'll code dynamically so don't",
    "start": "2352640",
    "end": "2358359"
  },
  {
    "text": "publish those keys because they are keys to your front door and your",
    "start": "2358359",
    "end": "2363079"
  },
  {
    "text": "account so below ec2 then so that's ec2 and that's a really core part of what we do in terms of bootstrapping and Amis",
    "start": "2364119",
    "end": "2370599"
  },
  {
    "text": "and it's a hopefully i' I've draw into that enough to get you thinking about how you do that the next thing to",
    "start": "2370599",
    "end": "2375760"
  },
  {
    "text": "understand in ec2 is the different types of block storage that we have we have instance storage and we have elastic Block store so instance storage is",
    "start": "2375760",
    "end": "2382680"
  },
  {
    "text": "essentially local on host within our physical host within AWS environment dis volumes and the data on those discs is",
    "start": "2382680",
    "end": "2390000"
  },
  {
    "text": "dependent upon the instance life cycle versus elastic Block store which are network attached volumes and the data is",
    "start": "2390000",
    "end": "2396960"
  },
  {
    "text": "IND dependent of the instance life cycle so let's drill into those two things so you got an absolute Clarity on the",
    "start": "2396960",
    "end": "2402119"
  },
  {
    "text": "difference and how you might use them so if you look at instance storage here is two physical hosts within our data",
    "start": "2402119",
    "end": "2407680"
  },
  {
    "text": "centers so host one and host two and on those hosts are a number of instances AB",
    "start": "2407680",
    "end": "2413160"
  },
  {
    "text": "C D E and F and that on those hosts there was some physical storage so",
    "start": "2413160",
    "end": "2419119"
  },
  {
    "text": "directly within that host and there I'm shown the instance stores aerial 0",
    "start": "2419119",
    "end": "2424240"
  },
  {
    "text": "through to three on each of those now each of those instances when they start can have a portion of that Local Host uh",
    "start": "2424240",
    "end": "2432119"
  },
  {
    "text": "storage which is opposed to uh EBS storage which would be attached across a network somewhere else so that instance",
    "start": "2432119",
    "end": "2440200"
  },
  {
    "text": "store has a certain life cycle associated with it that you need to be aware of if you use it so if an instance",
    "start": "2440200",
    "end": "2446839"
  },
  {
    "text": "reboots whether you choose to reboot it or it reboots unintentionally then the instant store is preserved it persists",
    "start": "2446839",
    "end": "2453440"
  },
  {
    "text": "so it's okay however if anything fails on that physical layer you'll lose the",
    "start": "2453440",
    "end": "2458560"
  },
  {
    "text": "data if you stop an instance of instance storage it will go and if you terminate",
    "start": "2458560",
    "end": "2465520"
  },
  {
    "text": "the instance that data will be lost so survives a reboot but pretty much all other conditions that data is volatile",
    "start": "2465520",
    "end": "2472079"
  },
  {
    "text": "okay you need to think about different ways of dealing that data so different instance storage on different instance",
    "start": "2472079",
    "end": "2478119"
  },
  {
    "text": "types has different flavors so these are all the types of instances uh there API",
    "start": "2478119",
    "end": "2483440"
  },
  {
    "text": "names and then the storage volumes that you can get for instance storage now draw your attention to one just to highlight as an example so here a high",
    "start": "2483440",
    "end": "2490200"
  },
  {
    "text": "IO an h a high one for extra large has two 1 tbte SSD drives on that local",
    "start": "2490200",
    "end": "2497000"
  },
  {
    "text": "instance storage so on physical host so when you start that instance you'll get two of those SSD very high performance",
    "start": "2497000",
    "end": "2503560"
  },
  {
    "text": "local drives to use now if you think about the sorts of storage you can get in this way certain workloads might lead",
    "start": "2503560",
    "end": "2510640"
  },
  {
    "text": "you to use this stuff so you might be running distributed nosql data stores",
    "start": "2510640",
    "end": "2515720"
  },
  {
    "text": "where actually you what you want to do is to have lots of local caches on local disc very high performance disc because",
    "start": "2515720",
    "end": "2521920"
  },
  {
    "text": "you can reconstitute those slices or shards of data in that cluster um if it's ever lost but if you were running a",
    "start": "2521920",
    "end": "2529160"
  },
  {
    "text": "database you wouldn't necessarily want to um um run on a local disc because if it",
    "start": "2529160",
    "end": "2537839"
  },
  {
    "text": "uh stops for whatever reason or the drive fails then you will have lost the data so that's where you start thinking about um elastic Block store",
    "start": "2537839",
    "end": "2547119"
  },
  {
    "text": "so elastic Block store um is network attached and it's optimized network attached storage so high performance",
    "start": "2548680",
    "end": "2554440"
  },
  {
    "text": "storage and you can have very high iio rates because we've got dedicated types of different types of network access to",
    "start": "2554440",
    "end": "2560280"
  },
  {
    "text": "these Drive uh volumes but if you look at the diagram on the left here there's sort of major components of what's going",
    "start": "2560280",
    "end": "2566319"
  },
  {
    "text": "on so in the VM workspace under the hypervisor I'm showing those temporary",
    "start": "2566319",
    "end": "2571520"
  },
  {
    "text": "instant storage discs um inside the VM workspace and then we have EBS to the",
    "start": "2571520",
    "end": "2577680"
  },
  {
    "text": "right which is um network attached and then on the far right we have S3 holding",
    "start": "2577680",
    "end": "2584079"
  },
  {
    "text": "EBS snapshots so the backup images so have a look at a a life cycle around",
    "start": "2584079",
    "end": "2589720"
  },
  {
    "text": "this we have when you launch an instance what we're going to do is we're going to create the VM workspace so this creates",
    "start": "2589720",
    "end": "2596359"
  },
  {
    "text": "all that Epal ephemeral instance storage depending upon the instance types and you get the workspace available then for",
    "start": "2596359",
    "end": "2603520"
  },
  {
    "text": "an OS to be launched into we take an EBS snapshot shot from S3 for the given um",
    "start": "2603520",
    "end": "2609880"
  },
  {
    "text": "back Amis that you're going to launch we'll create an EBS volume and then we'll boot the workspace instance from",
    "start": "2609880",
    "end": "2616720"
  },
  {
    "text": "it so we'll attach it to the hypervisor attach across the network and then launch your ec2 instance and EBS is",
    "start": "2616720",
    "end": "2623680"
  },
  {
    "text": "optimized for very fast start at time very high bursts of IO in order to ensure that instances come up really",
    "start": "2623680",
    "end": "2629920"
  },
  {
    "text": "fast so EBS volumes will always be quicker to boot from than anything else so that's kind of the life cycle around",
    "start": "2629920",
    "end": "2635559"
  },
  {
    "text": "a boot cycle um and if you think about the EBS persistance cycle you only pay",
    "start": "2635559",
    "end": "2641559"
  },
  {
    "text": "for a volume as long as the data persists so if you got a volume of 10 gig you'll pay for 10 gig for as long as",
    "start": "2641559",
    "end": "2647960"
  },
  {
    "text": "that volume exists in your account and there are two different life cycles that you should be aware of so if you attach",
    "start": "2647960",
    "end": "2655119"
  },
  {
    "text": "an EBS volume that you create to an already running instance um it will",
    "start": "2655119",
    "end": "2660800"
  },
  {
    "text": "automatically detach from that instance with the data intact if you terminate your instance so start an instance take",
    "start": "2660800",
    "end": "2667680"
  },
  {
    "text": "an EBS volume with some data on it attach it to that instance and then you blow the instance away that volume will",
    "start": "2667680",
    "end": "2673319"
  },
  {
    "text": "persist but by default just be aware of this is that if you the instance volumes",
    "start": "2673319",
    "end": "2678520"
  },
  {
    "text": "of the creator that launch time are deleted if you terminate it so there's original instances but you can change",
    "start": "2678520",
    "end": "2684480"
  },
  {
    "text": "that behavior by changing a delete on termination flag or termination protection as it's shown in the console",
    "start": "2684480",
    "end": "2690119"
  },
  {
    "text": "so you flick that and you terminate your instance your volumes will persist and then you can use those volumes to launch",
    "start": "2690119",
    "end": "2695440"
  },
  {
    "text": "a new instance in the fence of a prop problem so persistent life cycle that's independent of the the the instance life",
    "start": "2695440",
    "end": "2702480"
  },
  {
    "text": "cycle if you so choose to uh leverage it so that's this drives and then next",
    "start": "2702480",
    "end": "2709119"
  },
  {
    "start": "2707000",
    "end": "2981000"
  },
  {
    "text": "up then we talk about low balancing and these are the there low balancing and Autos scaling will be the last two",
    "start": "2709119",
    "end": "2714480"
  },
  {
    "text": "elements of this webinar because now you've got an instance running you've understood how to bootstrap it you're essentially spreading ec2 instances thin",
    "start": "2714480",
    "end": "2722440"
  },
  {
    "text": "now so you got multiple instances you got a distributed architecture load balancing becomes the next thing you're going to need to implement so it's a",
    "start": "2722440",
    "end": "2729359"
  },
  {
    "text": "regional service it load balances across availability zones so what will happen is that when you launch and an elastic",
    "start": "2729359",
    "end": "2736319"
  },
  {
    "text": "load balance so you'll effectively get an end point at the region and then within each availability Zone where",
    "start": "2736319",
    "end": "2741800"
  },
  {
    "text": "you're running instances you'll actually get a footprint of the load balancer a piece of software will go into that that",
    "start": "2741800",
    "end": "2747520"
  },
  {
    "text": "availability Zone and it will front the instances in that availability zone so it's a distributed software framework",
    "start": "2747520",
    "end": "2754000"
  },
  {
    "text": "that is high availability and is elastic by Nature so you can spread instances across azs availability zones and front",
    "start": "2754000",
    "end": "2760119"
  },
  {
    "text": "them with an elb you can do the spreading that I talked about so you can balance your resources across azed so we",
    "start": "2760119",
    "end": "2766440"
  },
  {
    "text": "would say go small with your instance types and go wide that gives you high availability and it gives you more granular control over scale and cost",
    "start": "2766440",
    "end": "2774680"
  },
  {
    "text": "offload so elb does SSL processing so remove SSL do https in and get at0",
    "start": "2774680",
    "end": "2780880"
  },
  {
    "text": "coming out the back of the lb upload your CS um great way of offloading and then reducing the load on back and",
    "start": "2780880",
    "end": "2787319"
  },
  {
    "text": "resources and then Health checking is something to think about here because you can choose where the elb is going to",
    "start": "2787319",
    "end": "2793960"
  },
  {
    "text": "Ping to get response so Response Code back about the health of some underlying resources so it could be the front um",
    "start": "2793960",
    "end": "2801640"
  },
  {
    "text": "page on your your website that you're running but it could be some other page that you're generating at some back end",
    "start": "2801640",
    "end": "2807599"
  },
  {
    "text": "which is coalescing the state of various tiers down below then you can choose to take out an entire section of your",
    "start": "2807599",
    "end": "2814119"
  },
  {
    "text": "architecture by Health checking the right point because what we'll do as an elb lever is that the health check fails",
    "start": "2814119",
    "end": "2820200"
  },
  {
    "text": "and the rules you define will take out that initial egress point for that that",
    "start": "2820200",
    "end": "2825359"
  },
  {
    "text": "particular section of your architecture so check a whole layer is a good idea with health",
    "start": "2825359",
    "end": "2830880"
  },
  {
    "text": "checking some tips on using elb so if you enable persistent HTTP connections",
    "start": "2830880",
    "end": "2836880"
  },
  {
    "text": "on your backend server then the connection between your elb and the server will be optimized you get a performance gain out of that um you get",
    "start": "2836880",
    "end": "2844480"
  },
  {
    "text": "given a DNS name for an EB never go and look for the underlying IP address",
    "start": "2844480",
    "end": "2850240"
  },
  {
    "text": "because actually there's a set of those behind the NB and real clients spread across all parts of the globe that might",
    "start": "2850240",
    "end": "2856480"
  },
  {
    "text": "be accessing your service will returning different DNS sets to get out that elb",
    "start": "2856480",
    "end": "2861800"
  },
  {
    "text": "and they'll also change over time because as the elb scales or um scales out and scales behind or scales down",
    "start": "2861800",
    "end": "2868760"
  },
  {
    "text": "then you'll get different sets of Ip so they will change other common mistake is that um if you span an elb across all a",
    "start": "2868760",
    "end": "2876839"
  },
  {
    "text": "avability zones you get to choose whether it spans or not then make sure you have an instance in all availability",
    "start": "2876839",
    "end": "2882119"
  },
  {
    "text": "zones because otherwise you might end up dropped connections or you have increased latency as connections are rooted from an elbm point in an",
    "start": "2882119",
    "end": "2889400"
  },
  {
    "text": "availability Zone where there are no instances available to take the request and a way of um common thing also is",
    "start": "2889400",
    "end": "2895920"
  },
  {
    "text": "that people tend to terminate instances before before they deregister from the elb if you deregister the instance from",
    "start": "2895920",
    "end": "2902119"
  },
  {
    "text": "the elb first and then terminate you'll find that the traffic is rooted to the existing health instances much quicker",
    "start": "2902119",
    "end": "2908079"
  },
  {
    "text": "and we won't have to do any the health checking processes um another thing I'm just",
    "start": "2908079",
    "end": "2913920"
  },
  {
    "text": "showing here is that I've got trusted advisor and everybody on this webinar for the month of March can access",
    "start": "2913920",
    "end": "2919520"
  },
  {
    "text": "trusted advisor which is our support tool so if you go to the support tab in the console if you got to help and",
    "start": "2919520",
    "end": "2925000"
  },
  {
    "text": "support you'll be taken to a dashboard view like this and I'm showing here that",
    "start": "2925000",
    "end": "2930599"
  },
  {
    "text": "I have my elbs um unbalanced so I have ec2 availability Zone balance warning",
    "start": "2930599",
    "end": "2936359"
  },
  {
    "text": "here so saying that I don't have instances in all the availability zones that I'm running an elb across the top",
    "start": "2936359",
    "end": "2942520"
  },
  {
    "text": "of and that's a bad idea so typically it's best to have an instance in all three availability zones in EU for",
    "start": "2942520",
    "end": "2948559"
  },
  {
    "text": "example if I'm running a low balance across the top maximize my availability there's a whole bunch of other checks in",
    "start": "2948559",
    "end": "2954480"
  },
  {
    "text": "here that will automatically look at security groups that we looked at uh cost optimizing in terms of instance",
    "start": "2954480",
    "end": "2960040"
  },
  {
    "text": "utilization performance a whole range of things and you can go and check that now",
    "start": "2960040",
    "end": "2965200"
  },
  {
    "text": "so for the whole month of March typically you'd have to be on a business or an Enterprise support package to get this um but we're offering it open to",
    "start": "2965200",
    "end": "2971319"
  },
  {
    "text": "everyone so they can take heed of the actions that is suggesting lows and lows of checks a great place to have a look",
    "start": "2971319",
    "end": "2977079"
  },
  {
    "text": "around and find out what's going on inside your AWS account um aut scaling then so the last",
    "start": "2977079",
    "end": "2983480"
  },
  {
    "start": "2981000",
    "end": "3134000"
  },
  {
    "text": "piece then so I'm just in the last five minutes here so automate the ec2 commissioning and decommissioning cycle",
    "start": "2983480",
    "end": "2990280"
  },
  {
    "text": "really so when we talk about um uh Autos scaling there are three main things to",
    "start": "2990280",
    "end": "2995839"
  },
  {
    "text": "be aware of the first is on the left here is a launch config so recalling back those API examples recalling back",
    "start": "2995839",
    "end": "3002400"
  },
  {
    "text": "what we did in the console we are choosing an Ami an instance type A Security Group an instance key pair",
    "start": "3002400",
    "end": "3008680"
  },
  {
    "text": "which will just be launched when autoscaling needs to do something when it needs to launch an instance and that",
    "start": "3008680",
    "end": "3014040"
  },
  {
    "text": "config is something you can modify and change so that's the base information required by autoscaling to operate then",
    "start": "3014040",
    "end": "3020040"
  },
  {
    "text": "you create a group which is basically The Logical construct of the manag resources it can automatically integrate",
    "start": "3020040",
    "end": "3026839"
  },
  {
    "text": "with an elb and you're effectively setting a policy of like minimum or maximum desired number of instances so",
    "start": "3026839",
    "end": "3033799"
  },
  {
    "text": "you could have min3 Max 9 and you'll be running in E for example and you could",
    "start": "3033799",
    "end": "3039280"
  },
  {
    "text": "go between one and three instances in each of the availability zones for example behind an EB and then you set",
    "start": "3039280",
    "end": "3045960"
  },
  {
    "text": "policies so this is what drives the action so this will drive Dynamic changes in a number of ec2 resources and",
    "start": "3045960",
    "end": "3052559"
  },
  {
    "text": "if you've got your Ami baked and if you've got your bootstrapping right then instant es can come and go and they'll",
    "start": "3052559",
    "end": "3058079"
  },
  {
    "text": "be useful immediately as as they come into service when autoscaling takes effect so creating a launch config at",
    "start": "3058079",
    "end": "3065480"
  },
  {
    "text": "the CLI tools as create launch config you can see there's The Usual Suspects there that I need to Define what's going",
    "start": "3065480",
    "end": "3072319"
  },
  {
    "text": "on the addition of a launch config name so this is my my definition of the instance I want to launch you then",
    "start": "3072319",
    "end": "3078040"
  },
  {
    "text": "create an autoscaling group and in this case I'm actually configuring it to uh talk what's going to launch my launch",
    "start": "3078040",
    "end": "3084880"
  },
  {
    "text": "config but also to inte with an lb now Autos scaling doesn't have to be integrated with an elb it could just be",
    "start": "3084880",
    "end": "3090920"
  },
  {
    "text": "a group of resources that's driven off QEP for example the number of messages in a que if it gets deeper add more",
    "start": "3090920",
    "end": "3096240"
  },
  {
    "text": "resources but I'm integrating it with my elastic load balancer and I'm setting a Min One Max five pool of resources and",
    "start": "3096240",
    "end": "3104880"
  },
  {
    "text": "then I create two things a policy to scale up which is an adjustment of one here and a cool down of 300 so nothing",
    "start": "3104880",
    "end": "3112160"
  },
  {
    "text": "else will happen for 300 seconds because what we don't want to do is to scale up and scale down scale up scale down",
    "start": "3112160",
    "end": "3117400"
  },
  {
    "text": "repeatedly what we want to do is dampen the process so this is acting as a damper of 300 seconds before some other",
    "start": "3117400",
    "end": "3123160"
  },
  {
    "text": "event can kick in and then likewise a scale down here I've got adjustment of minus one if I apply all of those with",
    "start": "3123160",
    "end": "3130119"
  },
  {
    "text": "our Auto scaling tools I can then tie it all together with something called",
    "start": "3130119",
    "end": "3135280"
  },
  {
    "start": "3134000",
    "end": "3302000"
  },
  {
    "text": "cloudwatch so cloudwatch is a monitoring framework that you can get a whole bunch of stats from so you can go into your",
    "start": "3135280",
    "end": "3141920"
  },
  {
    "text": "ec2 your elb your rds's whatever it happens to be hundreds of different met metrics that you can collect and you can",
    "start": "3141920",
    "end": "3148559"
  },
  {
    "text": "configure alarms against those and it's alarms that will drive proactive action in this case will drive things like Auto",
    "start": "3148559",
    "end": "3154960"
  },
  {
    "text": "scaling so if you look at for example aggregated across instances here CPU utilization I can drill into charts and",
    "start": "3154960",
    "end": "3161640"
  },
  {
    "text": "graphs and if I set thresholds on this and that will trigger my alarm I can",
    "start": "3161640",
    "end": "3166760"
  },
  {
    "text": "have thresholds that are going above a particular Point triggering alarm and then triggering out of alarm State when",
    "start": "3166760",
    "end": "3172720"
  },
  {
    "text": "I go below and that's what would trigger a scale up or scale down activ ity so if you think about that a cloudwatch alarm",
    "start": "3172720",
    "end": "3179400"
  },
  {
    "text": "CPU greater than 50% for 5 minutes then scale up CPU less than 30% for 10",
    "start": "3179400",
    "end": "3185000"
  },
  {
    "text": "minutes then scal down and you can do that in the console for example when you set an alarm if you defined those",
    "start": "3185000",
    "end": "3190720"
  },
  {
    "text": "autoscaling policies that I showed you before an alarm state is alarm take action autoscaling policy on an",
    "start": "3190720",
    "end": "3197920"
  },
  {
    "text": "autoscaling group and enact which policy which is the scaleup policy and those",
    "start": "3197920",
    "end": "3203319"
  },
  {
    "text": "are are things that were created VI those command line tools that I showed you before and you can do that yourself",
    "start": "3203319",
    "end": "3209160"
  },
  {
    "text": "and then you'll be able to go into the console and knit together a scaling action likewise you might take some",
    "start": "3209160",
    "end": "3216680"
  },
  {
    "text": "other actions you don't have to trigger autoscaling you could do uh additional actions via simple notification service",
    "start": "3216680",
    "end": "3223720"
  },
  {
    "text": "so you might deliver a message to an sqsq post to an HTTP endpoint or send an email and just to show you how that sort",
    "start": "3223720",
    "end": "3230160"
  },
  {
    "text": "of snacks up you would create a subscription in SNS and there I can show",
    "start": "3230160",
    "end": "3235240"
  },
  {
    "text": "my drop down of the different types of things I can send to so this is a description to a topic and then when the",
    "start": "3235240",
    "end": "3241079"
  },
  {
    "text": "alarm state is in alarm you can see my cloudwatch actions to send a notification to my test topic and that",
    "start": "3241079",
    "end": "3247839"
  },
  {
    "text": "could be to send an email to me or as I said it could be to drop some Json in an email or Json on sqsq which describes",
    "start": "3247839",
    "end": "3254839"
  },
  {
    "text": "the event and I can then programmatically take effect on that or I can simply have the notification at an",
    "start": "3254839",
    "end": "3260160"
  },
  {
    "text": "autoscaling action has happened in addition to actually autoscaling taking place so cloudwatch is a way of knitting",
    "start": "3260160",
    "end": "3266720"
  },
  {
    "text": "all that together so it's comprehensive in terms of the billing alerts you can get from it the technical alerts you can",
    "start": "3266720",
    "end": "3273480"
  },
  {
    "text": "aggregate stats you can fire in custom metrics as well so you could write your own metrics in the sdks push them into",
    "start": "3273480",
    "end": "3280040"
  },
  {
    "text": "cloudwatch and use that to drive SNS or drive Autos scaling as I said it integrates with SNS HTTP you can poke",
    "start": "3280040",
    "end": "3286839"
  },
  {
    "text": "htpn points custom points in your application send emails or just generally sell a whole bunch of alarms",
    "start": "3286839",
    "end": "3292720"
  },
  {
    "text": "whether it be that you spent $10 on your account or whether it be your ec2 instances of have got to a certain level",
    "start": "3292720",
    "end": "3298760"
  },
  {
    "text": "of CPU utilization or what have you okay so closing off I'm slightly",
    "start": "3298760",
    "end": "3305240"
  },
  {
    "start": "3302000",
    "end": "3392000"
  },
  {
    "text": "over my 45 minutes but other topics to look at so ec2 Bridges you out into a",
    "start": "3305240",
    "end": "3310680"
  },
  {
    "text": "whole bunch of different areas and some of the things that you should take a look at outside of this webinar is",
    "start": "3310680",
    "end": "3316079"
  },
  {
    "text": "resource tagging because you can set key value pairs on your resources like ec2 instances when you launch them and then",
    "start": "3316079",
    "end": "3321640"
  },
  {
    "text": "they'll flow through onto billing reports so you know what part of your bill is coming from what resources have a look at Route 53 so fronting ec2 and",
    "start": "3321640",
    "end": "3329480"
  },
  {
    "text": "elbs with Route 53 DNS provider gives you some extended different types of record sets which give you great control",
    "start": "3329480",
    "end": "3336520"
  },
  {
    "text": "over DNS uh and allows you to do things like rolling deployments as well so you can use Route 53 in elbs to do ab",
    "start": "3336520",
    "end": "3343319"
  },
  {
    "text": "testing or spin up whole replica environments and just swing load slowly across onto your new applications in ec2",
    "start": "3343319",
    "end": "3349280"
  },
  {
    "text": "and back again if they don't work so rolling deployments is a great way of of using those things in combination of ec2",
    "start": "3349280",
    "end": "3356680"
  },
  {
    "text": "and then there are management Frameworks as well so there are beant stalk for managing the entire stack such as Ruby or Pyon so a popular container that will",
    "start": "3356680",
    "end": "3363920"
  },
  {
    "text": "do an autoscaling app there's opsworks which is a really new uh tool set which",
    "start": "3363920",
    "end": "3369119"
  },
  {
    "text": "relies on Chef recipes to automate all that configuration of ec2 and Autos scaling that I've talked about and then",
    "start": "3369119",
    "end": "3375480"
  },
  {
    "text": "there's cloud formation that goes to the MTH level of degree of detail on configuring everything from a cloudwatch",
    "start": "3375480",
    "end": "3380680"
  },
  {
    "text": "metric an SMS top topic what's yum installed on an E2 instance EBS volumes",
    "start": "3380680",
    "end": "3386760"
  },
  {
    "text": "at launch time and so on and so forth so really granular stuff on cloud formation so in summary stop doing these",
    "start": "3386760",
    "end": "3394760"
  },
  {
    "start": "3392000",
    "end": "3473000"
  },
  {
    "text": "things really stop hugging the server as veraval will say but stop provisioning and fixing servers treating computers",
    "start": "3394760",
    "end": "3401400"
  },
  {
    "text": "physical things or thinking of computer as this finite commitment you committed to this instance type or this Compu and",
    "start": "3401400",
    "end": "3407079"
  },
  {
    "text": "I must use it think about something you can flip and change and it can come and go because you'll start doing elastic",
    "start": "3407079",
    "end": "3413680"
  },
  {
    "text": "applications you'll start thinking about automation you'll have more secure systems by default because of that",
    "start": "3413680",
    "end": "3420200"
  },
  {
    "text": "approach you'll be replacing things not fixing them so you can Alo haal things at 3:00 a.m. in the morning and then at",
    "start": "3420200",
    "end": "3426599"
  },
  {
    "text": "9:00 a.m. when you're in the office you can work out what went wrong you can be unconstrained so you won't have to do",
    "start": "3426599",
    "end": "3432319"
  },
  {
    "text": "traditional capacity planning anymore and you can be cost aware too so you can know exactly what resources are costing",
    "start": "3432319",
    "end": "3438319"
  },
  {
    "text": "what in your environment and you can play with the instance times so start doing those things and if you want to",
    "start": "3438319",
    "end": "3443359"
  },
  {
    "text": "see a video I've put a video up on YouTube of going from an empty account all the way through to an an autoscaling",
    "start": "3443359",
    "end": "3450599"
  },
  {
    "text": "application so taking into account all that bootstrapping type aspects I've talked about baking Amis elbs",
    "start": "3450599",
    "end": "3457640"
  },
  {
    "text": "autoscaling and I introduce things like rds2 so you can go to that URL and as always you can find out more",
    "start": "3457640",
    "end": "3464839"
  },
  {
    "text": "at aws.amazon.com so thank you very much for listening",
    "start": "3464839",
    "end": "3470599"
  }
]