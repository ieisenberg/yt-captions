[
  {
    "start": "0",
    "end": "191000"
  },
  {
    "text": "okay hey everybody welcome to our presentation today glad that you're all",
    "start": "3230",
    "end": "8400"
  },
  {
    "text": "here and glad that we can talk about our PHP SDK and also amazon DynamoDB and how",
    "start": "8400",
    "end": "14820"
  },
  {
    "text": "you can use them together effectively and also take advantage of some of the built-in features of the sdk my name is",
    "start": "14820",
    "end": "21420"
  },
  {
    "text": "Jeremy Lin blom I and I'm Michael Dowling Jeremy and I are software engineers on the AWS developer resources",
    "start": "21420",
    "end": "27510"
  },
  {
    "text": "team and we work on the software that helps PHP developers connect with AWS so",
    "start": "27510",
    "end": "32940"
  },
  {
    "text": "I'm curious how many of you here actually PHP developers me see a show of hands that looks like a good number of",
    "start": "32940",
    "end": "41129"
  },
  {
    "text": "you that's awesome I'm glad that you were here and that the rest of you who aren't PHP developers I'm glad you here too so don't feel left out we're going",
    "start": "41129",
    "end": "49260"
  },
  {
    "text": "to take a look at some PHP code examples today so you're not a PHP developer you can ask someone who next you who raised",
    "start": "49260",
    "end": "55559"
  },
  {
    "text": "their hand ask them questions afterwards as you may have seen earlier this year",
    "start": "55559",
    "end": "62609"
  },
  {
    "text": "we released a new service amazon DynamoDB how many of you have had a chance to play around with that or use",
    "start": "62609",
    "end": "68939"
  },
  {
    "text": "it in your application cool so that's a few of you and hopefully after today",
    "start": "68939",
    "end": "74130"
  },
  {
    "text": "maybe some more of you will give it a shot also at the beginning of this month",
    "start": "74130",
    "end": "79650"
  },
  {
    "text": "we released a brand new version 2 of the AWS sdk for PHP and so today as we go",
    "start": "79650",
    "end": "88290"
  },
  {
    "text": "through our code examples we using code examples from that version just out of curiosity has anyone here taking a look",
    "start": "88290",
    "end": "95460"
  },
  {
    "text": "at that yet cool if you want to come talk to us afterwards that would be great because we would love to get some",
    "start": "95460",
    "end": "101369"
  },
  {
    "text": "feedback so if you want just meet in the hall some time that we get it was there anyone over there that razor I do cool",
    "start": "101369",
    "end": "107520"
  },
  {
    "text": "all right you too and what about SDK the version one of our SDK who's been able",
    "start": "107520",
    "end": "114720"
  },
  {
    "text": "to use that so more of you so what you're going to see is you can see some things that are similar and a lot of",
    "start": "114720",
    "end": "120600"
  },
  {
    "text": "things that are different and hopefully you'll be able to see some of those differences and get an idea for what the",
    "start": "120600",
    "end": "126090"
  },
  {
    "text": "changes are so before we get too deep into our presentation we're going to talk about some of the basics of our new SDK and",
    "start": "126090",
    "end": "132100"
  },
  {
    "text": "of the Amazon dynamodb service I'm going to go ahead let Michael talk to you about the SDK not only see one of the",
    "start": "132100",
    "end": "138040"
  },
  {
    "text": "main developers of the new SDK but he's also the author of the guzzle HTTP library which is used as the foundation",
    "start": "138040",
    "end": "144670"
  },
  {
    "text": "for the new SDK thanks Jeremy so eight",
    "start": "144670",
    "end": "156520"
  },
  {
    "text": "of us has offered an open-source PHP SDK for a few years now and since the",
    "start": "156520",
    "end": "161920"
  },
  {
    "text": "creation the SDK it we've seen AWS a service offering grow significantly and",
    "start": "161920",
    "end": "167290"
  },
  {
    "text": "we've also seen a shift in PHP and PHP community itself and so with that we've",
    "start": "167290",
    "end": "175780"
  },
  {
    "text": "decided that we would rewrite the SDK from the ground up thank you all right",
    "start": "175780",
    "end": "181930"
  },
  {
    "text": "let's try that so you may have seen something interesting recently that's that the the SDK was rewritten and",
    "start": "181930",
    "end": "187410"
  },
  {
    "text": "here's a picture of the github page and we rewrote the SDK in response to",
    "start": "187410",
    "end": "193090"
  },
  {
    "start": "191000",
    "end": "191000"
  },
  {
    "text": "customer feedback and that feedback was that performance is becoming more more critical for applications so as people",
    "start": "193090",
    "end": "199030"
  },
  {
    "text": "are using our SDKs in front end systems so like to power your sessions with the DynamoDB session handler you need that",
    "start": "199030",
    "end": "205720"
  },
  {
    "text": "to be as fast as possible and we also got a lot of feedback that people need flexibility so we know that every use",
    "start": "205720",
    "end": "211090"
  },
  {
    "text": "cases is is unique so what we've done is based on the guzzle framework it's",
    "start": "211090",
    "end": "216490"
  },
  {
    "text": "completely event-driven so you can add and remove behavior as needed so for performance needs you might want to",
    "start": "216490",
    "end": "222760"
  },
  {
    "text": "remove some sort of helper and then you can also add functionality that might be specific to your use cases there's also",
    "start": "222760",
    "end": "229060"
  },
  {
    "text": "more high-level abstractions so you may have needed to iterate over a paginator resource and doing that you needed to",
    "start": "229060",
    "end": "235750"
  },
  {
    "text": "know what the next token was and how to send a subsequent request and so finally you exhausted that that list of paginate",
    "start": "235750",
    "end": "241270"
  },
  {
    "text": "a-- data so we've we've added iterators and also we've added batching functionality so now you can send items",
    "start": "241270",
    "end": "248380"
  },
  {
    "text": "to a batch object and that will in the most efficient way possible send up bulk operations for you in parallel to do a",
    "start": "248380",
    "end": "254410"
  },
  {
    "text": "very efficient processing our SDK is also a more open source so we're using",
    "start": "254410",
    "end": "260049"
  },
  {
    "text": "and contributing back to open source libraries instead of reinventing the wheel where where it",
    "start": "260049",
    "end": "265460"
  },
  {
    "text": "needed we're benefiting from existing work and focusing on the things that are more important and that's providing a",
    "start": "265460",
    "end": "270889"
  },
  {
    "text": "good customer experience for our sdk and finally one of the things that's very important is that we're publicly",
    "start": "270889",
    "end": "277099"
  },
  {
    "text": "shipping our unit tests so this helps to take a lot of the guesswork out of pull requests and additions to the sdk so you",
    "start": "277099",
    "end": "283460"
  },
  {
    "text": "can know you can have confidence in your submissions and also that's going to help drive quality up over time because",
    "start": "283460",
    "end": "288830"
  },
  {
    "text": "it's going to help prevent regressions so anytime a bug is reported will create a unit tests and then that will ensure",
    "start": "288830",
    "end": "294050"
  },
  {
    "text": "that that never happens again so with all that feedback we decided rewrite our SDK on top of guzzle as Jeremy mentioned",
    "start": "294050",
    "end": "301370"
  },
  {
    "start": "297000",
    "end": "297000"
  },
  {
    "text": "guzzle is a PHP HTTP client and web service framework that I started a few years ago and this is it provides the",
    "start": "301370",
    "end": "309560"
  },
  {
    "text": "foundation of the SDK so it provides the iterator abstractions batching it provides a service locator and then",
    "start": "309560",
    "end": "316940"
  },
  {
    "text": "there's also various plugins that you can use with guzzle clients and in turn our SDK plugins like caching so say you",
    "start": "316940",
    "end": "323449"
  },
  {
    "text": "need you get your application can serve stale content so you could catch that using hdv plugin there's over the wire",
    "start": "323449",
    "end": "330949"
  },
  {
    "text": "logging plugin so that's helpful for debugging to see exactly what bits are sent over the wire and so the glue of",
    "start": "330949",
    "end": "338150"
  },
  {
    "text": "guzzle and the glue of our SDK is actually the symphony to event dispatcher and that is a component from",
    "start": "338150",
    "end": "344090"
  },
  {
    "text": "the symphony to framework and it allows you to build applications that are decoupled without having to subclass so",
    "start": "344090",
    "end": "350539"
  },
  {
    "text": "you can attach observers that listen to specific events that are emitted from a dispatcher and then that observer can do",
    "start": "350539",
    "end": "357009"
  },
  {
    "text": "behavioral modifications to the context pass to it so this is prevalent throughout our SDK from the ground up",
    "start": "357009",
    "end": "363830"
  },
  {
    "text": "from client objects HTTP requests to iterators so now that we've covered a",
    "start": "363830",
    "end": "370759"
  },
  {
    "text": "little bit about the SDK let's dive into a code example to show you kind of how to get started and if you look at the",
    "start": "370759",
    "end": "377930"
  },
  {
    "start": "374000",
    "end": "374000"
  },
  {
    "text": "top line you might notice that the new SDK you have to require an autoloader and we're using a PSR 0 compliant",
    "start": "377930",
    "end": "385070"
  },
  {
    "text": "autoloader powered by composer and if either of those terms are new to you don't worry we'll cover both those in",
    "start": "385070",
    "end": "390380"
  },
  {
    "text": "just a second so composer provides this vendor autoload of class and will",
    "start": "390380",
    "end": "395479"
  },
  {
    "text": "require that and then in the next line you see that we're creating a service locator AWS common AWS we're using the",
    "start": "395479",
    "end": "401930"
  },
  {
    "text": "factory method we're passing in an array of configuration objects options so these options are going to be shared by",
    "start": "401930",
    "end": "408920"
  },
  {
    "text": "the service locator to every client created from it so we're passing in our keys secret and a default region that",
    "start": "408920",
    "end": "414830"
  },
  {
    "text": "we're going to use now you only have to find this once and this is going to be shared throughout and alternatively",
    "start": "414830",
    "end": "420260"
  },
  {
    "text": "rather than passing in an associative array you could pass in a file the path to a file a JSON file that basically is",
    "start": "420260",
    "end": "427520"
  },
  {
    "text": "the same keys and it's just in a JSON format if you want to load from desk so here we are creating a dynamo DB client",
    "start": "427520",
    "end": "434720"
  },
  {
    "text": "by calling the get method on the service locator and passing in the name of the client and then we're calling s3 we're",
    "start": "434720",
    "end": "441380"
  },
  {
    "text": "getting an s3 client and both of these are going to use the same credentials in region and the thing to keep in mind",
    "start": "441380",
    "end": "446570"
  },
  {
    "text": "with the service locator is that each subsequent call to retrieve the same client will return the same instance of",
    "start": "446570",
    "end": "452570"
  },
  {
    "text": "that client so it kind of shares that so you want to recreate it over and over but if for example let's say you wanted",
    "start": "452570",
    "end": "457730"
  },
  {
    "text": "to create a one-off client that didn't need to be persisted globally in the service locator you could pass an optional argument of true to the service",
    "start": "457730",
    "end": "464570"
  },
  {
    "text": "look at or to kind of create a throwaway so I mentioned PSR 0 and that's actually",
    "start": "464570",
    "end": "472100"
  },
  {
    "start": "469000",
    "end": "469000"
  },
  {
    "text": "a coding standard recommendation from the PHP framework interop group or PHP",
    "start": "472100",
    "end": "477380"
  },
  {
    "text": "fig and fig is a group that is trying to make sharing code between projects this",
    "start": "477380",
    "end": "483590"
  },
  {
    "text": "friction free as possible and in doing so they want to remove some of the minor differences like coding standards and",
    "start": "483590",
    "end": "490220"
  },
  {
    "text": "autoloading and some of their overarching goals are things like defining common name it interfaces for",
    "start": "490220",
    "end": "495710"
  },
  {
    "text": "things like logging and caching so the new SDK is actually implementing PSR 0 1",
    "start": "495710",
    "end": "501470"
  },
  {
    "text": "and 2 p.s r0 is an auto loading coding standard that defines how the path of a",
    "start": "501470",
    "end": "507290"
  },
  {
    "text": "file is mapped to the namespace and we're on the file system that class lives so by adhering to that we can use",
    "start": "507290",
    "end": "513320"
  },
  {
    "text": "a standard all or like the one provided by composer and PSR one it's a pretty",
    "start": "513320",
    "end": "518330"
  },
  {
    "text": "basic coding standard and PS r2 is a more in depth coding standard that defines just about everything about the",
    "start": "518330",
    "end": "524720"
  },
  {
    "text": "style of your code and this this as well as unit test is going to help take guesswork out of submission so there",
    "start": "524720",
    "end": "531290"
  },
  {
    "text": "won't be back and forth on like see fixes and and we think this is going to",
    "start": "531290",
    "end": "536520"
  },
  {
    "text": "help to make a more consistent code base because you know you adhere to this pretty generalized standard and it's",
    "start": "536520",
    "end": "542940"
  },
  {
    "text": "going to help also with the quality over time as well so I mentioned composer and",
    "start": "542940",
    "end": "549120"
  },
  {
    "start": "548000",
    "end": "548000"
  },
  {
    "text": "that might also be new to some of you composer is a fairly new dependency management system for PHP and it's for",
    "start": "549120",
    "end": "556200"
  },
  {
    "text": "application-specific dependencies so like whereas you probably use pair before pair is like a global dependency",
    "start": "556200",
    "end": "562740"
  },
  {
    "text": "installer whereas composers per application and it's not really global in that entire system so all you do is",
    "start": "562740",
    "end": "569790"
  },
  {
    "text": "you call composer it up far install and that's going to go out and grab all the dependencies of our new SDK pull them",
    "start": "569790",
    "end": "575520"
  },
  {
    "text": "all into the vendor directory and create an autoloader for you and that's what I showed earlier we just include vendor",
    "start": "575520",
    "end": "580589"
  },
  {
    "text": "auto load up PHP and another cool thing about composer is if you want to squeeze even more performance out of your",
    "start": "580589",
    "end": "586770"
  },
  {
    "text": "application you can create a class map autoloader and this is basically a hash of a class name to wear on disk that",
    "start": "586770",
    "end": "593850"
  },
  {
    "text": "class lives so that that's great for production environments so check that out and you can learn more about",
    "start": "593850",
    "end": "600029"
  },
  {
    "text": "composer at get composure org so with all this that we're using some great new",
    "start": "600029",
    "end": "606329"
  },
  {
    "text": "open source projects and it's helping to power our SDK and we think it's going to make you more productive when when",
    "start": "606329",
    "end": "611520"
  },
  {
    "text": "you're utilizing our web services so now we've told you a little about the new SDK and some of our motivations for",
    "start": "611520",
    "end": "616800"
  },
  {
    "text": "rewriting it I'm gonna let Jeremy tell you about animals on DynamoDB thank you",
    "start": "616800",
    "end": "621950"
  },
  {
    "text": "so like I said earlier amazon DynamoDB is a new service as of this year and",
    "start": "621950",
    "end": "627270"
  },
  {
    "text": "it's actually the fastest growing service was up we've ever had at AWS Amazon DynamoDB is a fully managed no",
    "start": "627270",
    "end": "635370"
  },
  {
    "text": "sequel database solution so I'm expecting probably quite a few hands here but whose has experience with",
    "start": "635370",
    "end": "642180"
  },
  {
    "text": "working with no sequel databases okay that's what I expect except they've been",
    "start": "642180",
    "end": "647370"
  },
  {
    "text": "gaining popularity over the last few years and for a lot of for a lot of good reasons one of one of the reasons I",
    "start": "647370",
    "end": "653490"
  },
  {
    "text": "think that they are particularly important is that they're a lot easier to scale then I think traditional relational databases you'll find that's",
    "start": "653490",
    "end": "659760"
  },
  {
    "text": "true with Amazon DynamoDB as well and even more so download DB is a full",
    "start": "659760",
    "end": "666170"
  },
  {
    "text": "managed that database solution and it has unique concept of provision",
    "start": "666170",
    "end": "672560"
  },
  {
    "text": "throughput provision throughput is essentially the number of read and write",
    "start": "672560",
    "end": "677750"
  },
  {
    "text": "operations you can do per second per table per kilobyte of data so that was a",
    "start": "677750",
    "end": "683600"
  },
  {
    "text": "lot of pers so I'm going to go back and say that one more time just so you catch them all it's the number of read and",
    "start": "683600",
    "end": "688880"
  },
  {
    "text": "write operations per second per table per kilobyte of data so for example if",
    "start": "688880",
    "end": "694399"
  },
  {
    "text": "you are writing a database item to dynamodb that's about two and a half",
    "start": "694399",
    "end": "700519"
  },
  {
    "text": "kilo bytes in size that's going to be rounded up and it's going to use three units of your provision throughput so in",
    "start": "700519",
    "end": "706519"
  },
  {
    "text": "the DynamoDB documentation you'll see references to write capacity units and read capacity units or WC use and RC use",
    "start": "706519",
    "end": "714139"
  },
  {
    "text": "those are the units of your provision throughput and you can adjust those independently on your table for either",
    "start": "714139",
    "end": "722630"
  },
  {
    "text": "read or write heavy tables you can you can adjust both of them independently I have a picture of a dial on the screens",
    "start": "722630",
    "end": "729079"
  },
  {
    "text": "because to me that represents how easy it is to change your provision throughput on a table it's just like",
    "start": "729079",
    "end": "734300"
  },
  {
    "text": "turning up or turning down a dial you can scale up or scale down very easily and the best part about it is that it's",
    "start": "734300",
    "end": "741440"
  },
  {
    "text": "completely seamless your database has no downtime when you are adjusting either up and down so like I said DynamoDB is",
    "start": "741440",
    "end": "752720"
  },
  {
    "start": "749000",
    "end": "749000"
  },
  {
    "text": "as a fully managed service on AWS so ed lee s handles all the hardware software",
    "start": "752720",
    "end": "757790"
  },
  {
    "text": "maintenance and all that so you don't have to worry about that like you do when you're trying to host your own",
    "start": "757790",
    "end": "763910"
  },
  {
    "text": "database so one of the other cool things",
    "start": "763910",
    "end": "769220"
  },
  {
    "text": "is that your data is automatically replicated for you so when you call when you write an item to DynamoDB you don't",
    "start": "769220",
    "end": "776569"
  },
  {
    "text": "even get a response back until your data has been replicated into at least two",
    "start": "776569",
    "end": "781810"
  },
  {
    "text": "availability zones so you can ensure that you have more reliable data",
    "start": "781810",
    "end": "786970"
  },
  {
    "text": "DynamoDB is also designed to be fast the data that you write to DynamoDB is stored on solid state drives to reduce",
    "start": "786970",
    "end": "794180"
  },
  {
    "text": "the i/o latency and that can speed up the performance of your application and also with the",
    "start": "794180",
    "end": "800089"
  },
  {
    "text": "concept of provision throughput you have a very predictable performance as you are controlling basically how fast you",
    "start": "800089",
    "end": "806120"
  },
  {
    "text": "can write to your database so we've talked about the SDK we've talked about",
    "start": "806120",
    "end": "812389"
  },
  {
    "start": "810000",
    "end": "810000"
  },
  {
    "text": "dynamo dB let's talk about how we can use them together so do that we're going to look at a fictional use case about",
    "start": "812389",
    "end": "819829"
  },
  {
    "text": "building a web application for Animal Clinic so we're all going to work",
    "start": "819829",
    "end": "825050"
  },
  {
    "text": "together to build this application so the website that we're going to make we",
    "start": "825050",
    "end": "830600"
  },
  {
    "text": "can have pet owners log on register on the website create an update pet",
    "start": "830600",
    "end": "835970"
  },
  {
    "text": "profiles and also schedule appointments to see the veterinarian and also get notifications back to solve some of our",
    "start": "835970",
    "end": "843019"
  },
  {
    "text": "immediately immediate scalability concerns we can host our application on AWS elastic Beanstalk elastic Beanstalk",
    "start": "843019",
    "end": "850579"
  },
  {
    "text": "is one of our high-level services that encapsulate some of our other services",
    "start": "850579",
    "end": "856459"
  },
  {
    "text": "like Amazon ec2 elastic load balancer and auto scaling so that makes it easy",
    "start": "856459",
    "end": "863300"
  },
  {
    "text": "for PHP developers to deploy their application on a tubeless architecture",
    "start": "863300",
    "end": "868339"
  },
  {
    "text": "and have it be immediately scalable with very little configuration so using elastic Beanstalk we can set up our",
    "start": "868339",
    "end": "874879"
  },
  {
    "text": "application in elastic Beanstalk and when it went as our animal clinic grows and we get more traffic that scaling is",
    "start": "874879",
    "end": "881209"
  },
  {
    "text": "going to happen automatically with little or no effort on our part we'll also use Amazon DynamoDB to store our",
    "start": "881209",
    "end": "888429"
  },
  {
    "text": "pet profiles and appointments so one of",
    "start": "888429",
    "end": "894769"
  },
  {
    "text": "the challenges that we face as developers is when we go from a single server application to scaling out to",
    "start": "894769",
    "end": "903050"
  },
  {
    "text": "multiple servers there's always some rough edges there and so with elastic Beanstalk we avoid some of those rough",
    "start": "903050",
    "end": "909170"
  },
  {
    "text": "edges by hooking into AWS architecture but one thing that you might not",
    "start": "909170",
    "end": "916339"
  },
  {
    "text": "remember to do or worry about is how you're scaling your session storage so",
    "start": "916339",
    "end": "921559"
  },
  {
    "text": "if you don't implement that correctly you're going to have visitors come to your website login maybe make it to",
    "start": "921559",
    "end": "927199"
  },
  {
    "text": "another page and then get redirected back to the login screen over and over again and that's not we want to have happen",
    "start": "927199",
    "end": "932850"
  },
  {
    "text": "and that happens because the native PHP session handler stores it sessions on the file system of the server so as soon",
    "start": "932850",
    "end": "940649"
  },
  {
    "start": "933000",
    "end": "933000"
  },
  {
    "text": "as we scale up to multiple application servers we have our session storage fragmented across different servers it's",
    "start": "940649",
    "end": "947370"
  },
  {
    "text": "not accessible to the other servers in the cluster so you have a lot of people that are going to start calling you and",
    "start": "947370",
    "end": "952709"
  },
  {
    "text": "saying hey I can't use the website at all that's bad so in the SDK we provide",
    "start": "952709",
    "end": "957870"
  },
  {
    "start": "957000",
    "end": "957000"
  },
  {
    "text": "a feature called the DynamoDB session hammer which allows you to use DynamoDB",
    "start": "957870",
    "end": "963449"
  },
  {
    "text": "as your session storage this provides a global area to store your sessions accessible to all the servers in your",
    "start": "963449",
    "end": "969899"
  },
  {
    "text": "cluster and also you gain all the benefits of being hosted on DynamoDB which we just talked about the DynamoDB",
    "start": "969899",
    "end": "978540"
  },
  {
    "text": "session handler is meant to be a drop-in replacement for PHP native session",
    "start": "978540",
    "end": "983550"
  },
  {
    "text": "Handler and that's because it's implemented using PHP's session set save handler function which you can use to",
    "start": "983550",
    "end": "989610"
  },
  {
    "text": "register callbacks to handle the session functionality that hooks right into",
    "start": "989610",
    "end": "994769"
  },
  {
    "text": "PHP's native session functions it's very easy to set up using the service locator",
    "start": "994769",
    "end": "1000560"
  },
  {
    "text": "that Michael showed you a hint in his code example we're going to get a copy of the DynamoDB client and call the",
    "start": "1000560",
    "end": "1008509"
  },
  {
    "text": "register session handler method on that and that we there's a lot of options you can pass in to configure it but here",
    "start": "1008509",
    "end": "1014689"
  },
  {
    "text": "we're just going to to shoot i'm just showing that you pass in the table name of that i'm with DB so you can either",
    "start": "1014689",
    "end": "1020209"
  },
  {
    "text": "create that table through the SDK or through the AWS console and just pass in",
    "start": "1020209",
    "end": "1025579"
  },
  {
    "text": "the table name and your session handler is all hooked up after that you can use",
    "start": "1025579",
    "end": "1031400"
  },
  {
    "text": "PHP sessions just like normal you can all the native petrie functions like",
    "start": "1031400",
    "end": "1036678"
  },
  {
    "text": "session start session destroy session right clothes you can work right with the session superglobal and it will all",
    "start": "1036679",
    "end": "1042640"
  },
  {
    "text": "read and write to DynamoDB for you behind the scenes so something that easy",
    "start": "1042640",
    "end": "1047808"
  },
  {
    "text": "it's kind of hard not to smile about it right so I want to also cover a few of",
    "start": "1047809",
    "end": "1054169"
  },
  {
    "text": "the best practices with the session handler one you should set an appropriate region for your DynamoDB",
    "start": "1054169",
    "end": "1060470"
  },
  {
    "text": "table and by appropriate I mean should be as geographically close as possible to where you're hosting your application",
    "start": "1060470",
    "end": "1066559"
  },
  {
    "text": "to reduce latency so in our example where we're using AWS elastic beanstalk",
    "start": "1066559",
    "end": "1072559"
  },
  {
    "text": "let's say we created our application in the u.s. west to or Oregon region we",
    "start": "1072559",
    "end": "1077840"
  },
  {
    "text": "want to create our DynamoDB table for our sessions in that same region second",
    "start": "1077840",
    "end": "1083600"
  },
  {
    "text": "you should set and monitor your provision throughput carefully and I have that picture of the dial again show",
    "start": "1083600",
    "end": "1089539"
  },
  {
    "text": "you how easy that is and basically you just need that value is going to be completely application specific and also",
    "start": "1089539",
    "end": "1095269"
  },
  {
    "text": "dependent on the amount of traffic you have but you can change it at any time and you can create your dining with t DB",
    "start": "1095269",
    "end": "1101720"
  },
  {
    "text": "table and hook it up with Claude watch if you do if you use the AWS console to",
    "start": "1101720",
    "end": "1107299"
  },
  {
    "text": "create your table do you have an option right there to hook it up to Claude watch that you can monitor the usage of",
    "start": "1107299",
    "end": "1112519"
  },
  {
    "text": "your provision throughput and set alarms or even programmatically react to that so if you're using ninety percent of",
    "start": "1112519",
    "end": "1120019"
  },
  {
    "text": "your provision throughput you can change your table configuration to increase that or if you're not using very much",
    "start": "1120019",
    "end": "1125539"
  },
  {
    "text": "you can change it to adjust that back down so you you only have to pay for",
    "start": "1125539",
    "end": "1131659"
  },
  {
    "text": "what you're going to use and you can use that monitoring to help you with that",
    "start": "1131659",
    "end": "1137289"
  },
  {
    "text": "third you should try and keep your session small and this is a good practice no matter what kind of session",
    "start": "1137289",
    "end": "1143210"
  },
  {
    "start": "1141000",
    "end": "1141000"
  },
  {
    "text": "hands are using because that's going to keep your application running fast but as I told you with the provision",
    "start": "1143210",
    "end": "1149179"
  },
  {
    "text": "throughput its read and write operations per second per table per kilobyte of",
    "start": "1149179",
    "end": "1154700"
  },
  {
    "text": "data so that if your sessions are larger than a kilobyte that actually uses more provision throughput so under a kilobyte",
    "start": "1154700",
    "end": "1161299"
  },
  {
    "text": "is better both for managing your provision throughput and also for speed I fourth you should you should schedule",
    "start": "1161299",
    "end": "1170119"
  },
  {
    "text": "your session garbage collection as a separate process the does anyone have an",
    "start": "1170119",
    "end": "1176869"
  },
  {
    "text": "idea of how the normal session handler or the normal session garbage collection",
    "start": "1176869",
    "end": "1181940"
  },
  {
    "text": "works then you're never looked into that it's pretty okay it's pretty interesting isn't it there's there's two ini",
    "start": "1181940",
    "end": "1187549"
  },
  {
    "text": "settings that basically make a probability of the session handler or",
    "start": "1187549",
    "end": "1193970"
  },
  {
    "text": "the session garbage collection being being triggered and so a random visitor",
    "start": "1193970",
    "end": "1199639"
  },
  {
    "text": "to your website might just get hit with the cost of doing your session garbage collection and you don't want to have to happen",
    "start": "1199639",
    "end": "1205430"
  },
  {
    "text": "especially if you're making web service requests to clear out your your tables",
    "start": "1205430",
    "end": "1210650"
  },
  {
    "text": "so it's better to schedule that on an off-peak time for your application using",
    "start": "1210650",
    "end": "1217670"
  },
  {
    "text": "a cron job or some other scheduling mechanism and trigger the garbage collection that way so that's a the",
    "start": "1217670",
    "end": "1224120"
  },
  {
    "text": "session handler and using that we we keep our visitors to our website logged in and Michael's going to talk about how",
    "start": "1224120",
    "end": "1230480"
  },
  {
    "text": "we can use the SDK and DynamoDB to solve some of the other challenges we might have thanks so in our use case that with",
    "start": "1230480",
    "end": "1238550"
  },
  {
    "text": "this animal clinic if there were something like a pet virus outbreak or something then the site would scale up a",
    "start": "1238550",
    "end": "1244340"
  },
  {
    "text": "lot because everyone would be just trying to sign inregister their pet scheduled appointment so now that we're",
    "start": "1244340",
    "end": "1250400"
  },
  {
    "text": "using the DynamoDB session handler and people can stay logged in there's no issues we've got a ton of data in our",
    "start": "1250400",
    "end": "1255470"
  },
  {
    "text": "tables and so this this animal clinic might try to vaccinate the most at-risk",
    "start": "1255470",
    "end": "1260750"
  },
  {
    "text": "animals first so we got all this data but we need to pull out only a subset of the animals so here's some of our",
    "start": "1260750",
    "end": "1268310"
  },
  {
    "text": "criteria we got puppies kittens old dogs old cats and hefty cats and so before we",
    "start": "1268310",
    "end": "1274430"
  },
  {
    "text": "dive into our actual scan filters and criteria that we'll use let's take a look at our schema that we're going to",
    "start": "1274430",
    "end": "1280130"
  },
  {
    "text": "work with and some example data and as Jeremy mentioned this is a no sequel",
    "start": "1280130",
    "end": "1286420"
  },
  {
    "text": "database so there's not actually a skimmer other than the primary key and here the primary key is a string of ID",
    "start": "1286420",
    "end": "1293510"
  },
  {
    "text": "and then some of the other fields were using our species which is a string name",
    "start": "1293510",
    "end": "1298670"
  },
  {
    "text": "owner age and weight on the right you'll see a example of if you were to call get item on one of these pets in the",
    "start": "1298670",
    "end": "1305240"
  },
  {
    "text": "database this is the the way that the data might look it's basically an associative array mapping the attribute",
    "start": "1305240",
    "end": "1311030"
  },
  {
    "text": "name to the value and the value also contains what type of data structure it is so strings or numbers so we know our",
    "start": "1311030",
    "end": "1320150"
  },
  {
    "start": "1318000",
    "end": "1318000"
  },
  {
    "text": "criteria and we have all this data and we know that we do pull out only a subset but what option should we use so",
    "start": "1320150",
    "end": "1326480"
  },
  {
    "text": "dynamodb actually provides two operations that allow you to pull out a subset of data and these two operations",
    "start": "1326480",
    "end": "1332240"
  },
  {
    "text": "are query scan and a query operation is generally faster than a scan and that it scans on",
    "start": "1332240",
    "end": "1338920"
  },
  {
    "text": "the primary key which is indexed whereas a scan operation can scan on any attribute of a table but it has an extra",
    "start": "1338920",
    "end": "1346120"
  },
  {
    "text": "step in that it needs to filter out results at the end of its scan so while while query can only work on a primary",
    "start": "1346120",
    "end": "1353170"
  },
  {
    "text": "key scan can work on any key and it's a little bit more flexible usually um but when you're designing your applications",
    "start": "1353170",
    "end": "1358420"
  },
  {
    "text": "definitely keep that in mind and try to you need to figure out you know your your use case how you'll store the data",
    "start": "1358420",
    "end": "1365320"
  },
  {
    "text": "how you'll retrieve the data and the different things you'll need to do whenever do setting that up so let's",
    "start": "1365320",
    "end": "1372370"
  },
  {
    "text": "take a look at our scan filter criteria to try to determine which operation we should use and as you can see we're",
    "start": "1372370",
    "end": "1379270"
  },
  {
    "start": "1377000",
    "end": "1377000"
  },
  {
    "text": "actually querying for three different attributes requiring for age species and wait so in and all these example it",
    "start": "1379270",
    "end": "1387850"
  },
  {
    "text": "looks like we would initially use five scan operations but actually we can combine two of these together because of",
    "start": "1387850",
    "end": "1393130"
  },
  {
    "text": "some of the commonalities between them and some of the comparison operators that DynamoDB allows so we can combine",
    "start": "1393130",
    "end": "1398800"
  },
  {
    "text": "the puppies and kittens into a single scan operation by using the in comparison operator so age is less than",
    "start": "1398800",
    "end": "1405010"
  },
  {
    "text": "one in species it's in cat or dog and we can do the same thing with the older animals and then do a separate operation",
    "start": "1405010",
    "end": "1412180"
  },
  {
    "text": "for the cats so for each of these groupings will create a scan iterator",
    "start": "1412180",
    "end": "1417190"
  },
  {
    "text": "because we can't use query because we're doing stuff other than the primary key so we'll create ask an iterator and then",
    "start": "1417190",
    "end": "1422920"
  },
  {
    "text": "iterate over each result and then add a record to the pet appointments table so",
    "start": "1422920",
    "end": "1428770"
  },
  {
    "text": "I've mentioned iterators a couple times now but I think it's important to cover what what that means iterators iterator",
    "start": "1428770",
    "end": "1435280"
  },
  {
    "text": "is a design pattern that encapsulates the logic needed to continue seeking forward in a containers elements and so",
    "start": "1435280",
    "end": "1443080"
  },
  {
    "text": "this allows you to to not need to care about the way that that a resource is paginate 'add it handles markers next",
    "start": "1443080",
    "end": "1450070"
  },
  {
    "text": "tokens for services like s3 list objects you don't need to know what a marker is and for dynamo DB query or scan you",
    "start": "1450070",
    "end": "1457300"
  },
  {
    "text": "wouldn't need to know if the result set is truncated it just yields that back to your for each and all these iterators",
    "start": "1457300",
    "end": "1463720"
  },
  {
    "text": "are built on top of guzzle iterators which are turn built on top of SPL iterators and SPL stands for the standard PHP library",
    "start": "1463720",
    "end": "1470669"
  },
  {
    "text": "and among other classes and interfaces it provides a set of interfaces for",
    "start": "1470669",
    "end": "1476210"
  },
  {
    "text": "iterators so when you actually implement this an SPL iterator you can full reach",
    "start": "1476210",
    "end": "1482250"
  },
  {
    "text": "over one of these objects almost like it was an array so here's actually how",
    "start": "1482250",
    "end": "1490410"
  },
  {
    "text": "iterators work in the new SDK all iterators are seated by a command object",
    "start": "1490410",
    "end": "1495450"
  },
  {
    "start": "1491000",
    "end": "1491000"
  },
  {
    "text": "so ask an iterator would be seated by a scan command and then you begin to well",
    "start": "1495450",
    "end": "1501299"
  },
  {
    "text": "a command is basically an encapsulation of the parameters that are sent to an operation so then that then that command",
    "start": "1501299",
    "end": "1508080"
  },
  {
    "text": "knows how to serialize an HTTP request and then how to deserialize the response and give you some useful data so all you",
    "start": "1508080",
    "end": "1515130"
  },
  {
    "text": "do is you for each over your scan iterator that's going to send the initial request and for each item in",
    "start": "1515130",
    "end": "1520710"
  },
  {
    "text": "that list of results so for a scan it's going to have multiple items in the",
    "start": "1520710",
    "end": "1525780"
  },
  {
    "text": "result set for each individual item it'll be yielded back to your for each and then we'll check is the result set",
    "start": "1525780",
    "end": "1532080"
  },
  {
    "text": "truncated if it is and you're sending subsequent requests and then yield goes back to your for each until finally it's",
    "start": "1532080",
    "end": "1538290"
  },
  {
    "text": "not truncated anymore on you in your loop so here's a pretty simple example of sending a issuing a list tables",
    "start": "1538290",
    "end": "1546270"
  },
  {
    "text": "operation and iterating all of the paginator responses so here you can see",
    "start": "1546270",
    "end": "1551280"
  },
  {
    "text": "that we're calling the get iterator method on the DynamoDB client object and this this method get iterator is",
    "start": "1551280",
    "end": "1557850"
  },
  {
    "text": "something provided to us by a guzzle service client class because SDK extends",
    "start": "1557850",
    "end": "1563460"
  },
  {
    "text": "from the guzzle service client we get access to this helper method and some other helper methods but what this is",
    "start": "1563460",
    "end": "1569340"
  },
  {
    "text": "doing is actually creating an iterator object for us based on the commands name and returning that so you can pass in",
    "start": "1569340",
    "end": "1576900"
  },
  {
    "text": "the name of the operation you'd like to execute here we're passing enlist tables or you can pass in an actual",
    "start": "1576900",
    "end": "1582419"
  },
  {
    "text": "instantiated command object and the get a traitor method will know what to do based on that and then the second",
    "start": "1582419",
    "end": "1587580"
  },
  {
    "text": "argument we're passing in parameters to that operation so we're allowing the get iterator to actually do factory type",
    "start": "1587580",
    "end": "1593850"
  },
  {
    "text": "implementation to create the iterator and the operation and this is passing in the amateurs and then once you have this",
    "start": "1593850",
    "end": "1599859"
  },
  {
    "text": "object all you do is for each over it and you don't care if it sends one or a hundred requests but you just know that",
    "start": "1599859",
    "end": "1605169"
  },
  {
    "text": "it's going to give you every single table on the results that here's a little bit more of an in-depth example that shows one of the scan iterators we",
    "start": "1605169",
    "end": "1611889"
  },
  {
    "start": "1608000",
    "end": "1608000"
  },
  {
    "text": "just talked about and this is showing the the younger pets and again we're doing we're passing in the name scan and",
    "start": "1611889",
    "end": "1617829"
  },
  {
    "text": "then we're passing our parameters to the operation we're interacting with the pets table and this is the cats and dogs",
    "start": "1617829",
    "end": "1625329"
  },
  {
    "text": "with the comparison operator of n because we're using scan we have a little bit more flexible operators and the age is less than 1 so because it's",
    "start": "1625329",
    "end": "1635439"
  },
  {
    "text": "built on top of SPL we can use some some pretty cool SPL implementations like the appended rater so I mentioned that we",
    "start": "1635439",
    "end": "1641799"
  },
  {
    "text": "needed to use 3 iterators to get our entire result set of at-risk animals well if we we can encapsulate the logic",
    "start": "1641799",
    "end": "1648399"
  },
  {
    "text": "of having to iterate over 3 iterators by using an app in iterator well this basically does is it will exhaust the",
    "start": "1648399",
    "end": "1654789"
  },
  {
    "text": "first iterator in the hitter in the appended rater then continue to the next than the third until it's exhausted",
    "start": "1654789",
    "end": "1660129"
  },
  {
    "text": "every iterator in the collection so all you do is a pin them to the appended Raider and then call for each over it as",
    "start": "1660129",
    "end": "1666909"
  },
  {
    "text": "if it were almost like an array and you might notice that we're just echoing out the pet's name and this is a little bit",
    "start": "1666909",
    "end": "1674499"
  },
  {
    "text": "different from SDK one and that sdk one would return stuff like a simple XML element whereas an SDK too we are",
    "start": "1674499",
    "end": "1681729"
  },
  {
    "text": "returning a model object which is its acts sort of like an array except that when you call keys that are missing it's",
    "start": "1681729",
    "end": "1687789"
  },
  {
    "text": "not going to give you a warning so it's a little bit more helpful and here we're just at going out the pet name so we're",
    "start": "1687789",
    "end": "1694329"
  },
  {
    "text": "going to show you a quick demo of what it would look so we're going to iterate",
    "start": "1694329",
    "end": "1699639"
  },
  {
    "text": "over our at-risk pets and just show you data on each one and you might see some",
    "start": "1699639",
    "end": "1705309"
  },
  {
    "text": "so you'll notice some pausing here as it iterates over each result set that",
    "start": "1705309",
    "end": "1710379"
  },
  {
    "text": "pausing is actually sending a subsequent request for you on your behalf so that just iterated over all of the animals in",
    "start": "1710379",
    "end": "1716349"
  },
  {
    "text": "a result set and showed their attributes so you can take this even a step further",
    "start": "1716349",
    "end": "1722559"
  },
  {
    "text": "oh one sick yeah so you can take this a",
    "start": "1722559",
    "end": "1728199"
  },
  {
    "text": "step further and use the event system so because the SDK is built on the symphony to event",
    "start": "1728199",
    "end": "1734120"
  },
  {
    "start": "1730000",
    "end": "1730000"
  },
  {
    "text": "dispatcher from almost every object so the clients commands requests you can",
    "start": "1734120",
    "end": "1740780"
  },
  {
    "text": "attach a an event listener to almost any object that owns an event dispatcher and modify behavior of these objects so here",
    "start": "1740780",
    "end": "1750049"
  },
  {
    "text": "we're showing how you can add a subscriber to a client object called the command announcer listener and you can",
    "start": "1750049",
    "end": "1756970"
  },
  {
    "text": "implement an event subscriber it's pretty simple it's a pretty simple interface from the symphony to event",
    "start": "1756970",
    "end": "1763160"
  },
  {
    "start": "1758000",
    "end": "1758000"
  },
  {
    "text": "dispatcher the only real method you need to implement is the get subscribed events public static method and what",
    "start": "1763160",
    "end": "1769730"
  },
  {
    "text": "this does is going to return an associative array mapping the event that's emitted to the method on the",
    "start": "1769730",
    "end": "1776900"
  },
  {
    "text": "object that you want to invoke when that event is encountered so here we're saying when command out before sin is",
    "start": "1776900",
    "end": "1782870"
  },
  {
    "text": "emitted from whatever this is attached to to call the on command before send method of this object so and then the",
    "start": "1782870",
    "end": "1790220"
  },
  {
    "text": "ankh is on command before sin method receives an event object which can contain event name and contextual",
    "start": "1790220",
    "end": "1797270"
  },
  {
    "text": "information about the event so like this is going to contain a command object and you can just call event command get name",
    "start": "1797270",
    "end": "1803270"
  },
  {
    "text": "and we're going to show that same example but we're going to actually echo out the name of each operation being",
    "start": "1803270",
    "end": "1809030"
  },
  {
    "text": "executed before we do it and we'll do a little sleep to a better show that",
    "start": "1809030",
    "end": "1814870"
  },
  {
    "text": "so here you can see it's saying executing the scan operation and it's",
    "start": "1818830",
    "end": "1824179"
  },
  {
    "text": "pausing a little bit and it's executing a follow-up scan operation and this is that's actually being triggered by the",
    "start": "1824179",
    "end": "1829519"
  },
  {
    "text": "command on before sin so this received that event before it actually executed",
    "start": "1829519",
    "end": "1834710"
  },
  {
    "text": "did something with the event object and return back to the to the dispatcher so",
    "start": "1834710",
    "end": "1840229"
  },
  {
    "text": "you can implement your own custom business logic with event systems",
    "start": "1840229",
    "end": "1845869"
  },
  {
    "text": "without having to subclass or do any additional work alright so now that we",
    "start": "1845869",
    "end": "1855379"
  },
  {
    "text": "know are at risk animals and we know how to iterate over and return that subset of data and how to you know get",
    "start": "1855379",
    "end": "1862279"
  },
  {
    "text": "everything and add events to clients let's talk about how you can efficiently push up these appointment records that",
    "start": "1862279",
    "end": "1868249"
  },
  {
    "text": "we'll need to make to let owners know to bring their animals in so we're going to go ahead and build off of the example",
    "start": "1868249",
    "end": "1874789"
  },
  {
    "text": "that Michael showed you too like you said put those items into downtown with",
    "start": "1874789",
    "end": "1880580"
  },
  {
    "text": "DB instead of just displaying them so dynamo DB has the put item operation so we could in theory as we for reach",
    "start": "1880580",
    "end": "1887239"
  },
  {
    "text": "through the results of that scan iterator issue a put item command for all those things but we can also do it",
    "start": "1887239",
    "end": "1894679"
  },
  {
    "text": "the more efficient way the dynamo DB API has method called batch right item which",
    "start": "1894679",
    "end": "1899839"
  },
  {
    "text": "allows you to combine up to 25 put or delete item requests into one request so",
    "start": "1899839",
    "end": "1906049"
  },
  {
    "text": "that'll be a little bit more efficient we can do even better than that there is a feature in the new SDK called the",
    "start": "1906049",
    "end": "1913399"
  },
  {
    "text": "dynamo dB write request batch which encapsulate the dynamo DB batch right",
    "start": "1913399",
    "end": "1920029"
  },
  {
    "text": "item operation I'm going to talk to you about the specifics of that in a second but as Michael talked about earlier a",
    "start": "1920029",
    "end": "1927019"
  },
  {
    "text": "little bit as I just mentioned now there is a batch system built into the SDK and",
    "start": "1927019",
    "end": "1933349"
  },
  {
    "text": "the underlying guzzle library the batch system allows you to batch well pretty much whatever you want you can let's see",
    "start": "1933349",
    "end": "1942739"
  },
  {
    "text": "you can use it to create custom batch workflows you can use it to create custom bulk item operations the system",
    "start": "1942739",
    "end": "1949820"
  },
  {
    "text": "is designed with a very loose coupled architecture there's design patterns you can inject",
    "start": "1949820",
    "end": "1955190"
  },
  {
    "text": "custom logic so I want to show you a couple of simplified uml diagrams to help you see kind of how it works so at",
    "start": "1955190",
    "end": "1962300"
  },
  {
    "start": "1961000",
    "end": "1961000"
  },
  {
    "text": "the core of the bachelor system is the batch object go figure right and the batch object has basically two important",
    "start": "1962300",
    "end": "1970070"
  },
  {
    "text": "methods the add method where you add the items you are batching and the flush method which is responsible for doing",
    "start": "1970070",
    "end": "1976790"
  },
  {
    "text": "something with those items now the behavior of the flush method is determined by using the strategy pattern",
    "start": "1976790",
    "end": "1983750"
  },
  {
    "text": "you can inject two different strategies into your batch object one is a batch",
    "start": "1983750",
    "end": "1989210"
  },
  {
    "text": "divisor one is a batch transfer we have default implementations of those in the",
    "start": "1989210",
    "end": "1994640"
  },
  {
    "text": "SDK and guzzle but you can also create your own to do your own custom logic the",
    "start": "1994640",
    "end": "2000190"
  },
  {
    "text": "batch divisor the job of the batch advisor is to just take the items in your batch and group them into chunks",
    "start": "2000190",
    "end": "2007120"
  },
  {
    "text": "that you're going to do something with then the trip the batch transfer object is actually what defines the logic of",
    "start": "2007120",
    "end": "2013900"
  },
  {
    "text": "what you're going to do and that can be like I said anything you want you could call web services you could write to",
    "start": "2013900",
    "end": "2019630"
  },
  {
    "text": "database tables you could write the files you could echo something you could sleep four thousand seconds it doesn't",
    "start": "2019630",
    "end": "2025840"
  },
  {
    "text": "really matter what you're doing you can do whatever you want for in the case of the dynamo DB write request batch object",
    "start": "2025840",
    "end": "2033810"
  },
  {
    "text": "we're going to that's where the logic happens we're going to take those into individual put item requests we're going",
    "start": "2033810",
    "end": "2040720"
  },
  {
    "text": "to turn them into a single batch right item request and send that along the",
    "start": "2040720",
    "end": "2047560"
  },
  {
    "start": "2047000",
    "end": "2047000"
  },
  {
    "text": "batch system also has a series of decorators following the decorator pattern again you can implement your own",
    "start": "2047560",
    "end": "2052780"
  },
  {
    "text": "but we have some provided in the SDK one of those is the exception buffering",
    "start": "2052780",
    "end": "2057908"
  },
  {
    "text": "decorator which basically catches all exceptions that might be thrown during when you're running the flush method and",
    "start": "2057909",
    "end": "2064600"
  },
  {
    "text": "gives them back to you as a collection of exceptions at the end so you can handle everything after all of your items have been processed another one is",
    "start": "2064600",
    "end": "2071679"
  },
  {
    "text": "a notifying decorator which simply allows you to register a call back to be executed every time the flush method is",
    "start": "2071679",
    "end": "2078580"
  },
  {
    "text": "called and another one is the flushing decorator which allows you to set a",
    "start": "2078580",
    "end": "2083679"
  },
  {
    "text": "threshold a number of items such that when you add that many to your batch it starts to do",
    "start": "2083679",
    "end": "2089230"
  },
  {
    "text": "flushing for you so you don't have to call it explicitly we're going to use that with the DynamoDB write request",
    "start": "2089230",
    "end": "2095830"
  },
  {
    "text": "batch as well to tie all these things together there is a batch builder class which simply makes it easier to use",
    "start": "2095830",
    "end": "2103150"
  },
  {
    "start": "2098000",
    "end": "2098000"
  },
  {
    "text": "because it encapsulates the logic for instantiating all these objects so that if your if you looked at this diagram",
    "start": "2103150",
    "end": "2109810"
  },
  {
    "text": "and you're like well that's too many things well you really just need the batch builder so like I said the",
    "start": "2109810",
    "end": "2117760"
  },
  {
    "text": "DynamoDB write request batch is an abstraction over the batch right item operation and is a special case of this",
    "start": "2117760",
    "end": "2123910"
  },
  {
    "text": "batch system that I just showed you during our testing we found out that this is actually the fastest way you can",
    "start": "2123910",
    "end": "2129970"
  },
  {
    "text": "send bulk put and delete request to DynamoDB uses that flushing decorator so",
    "start": "2129970",
    "end": "2137590"
  },
  {
    "text": "that every time you add 25 items to this batch it'll start issuing those batch",
    "start": "2137590",
    "end": "2143619"
  },
  {
    "text": "right item operations and so it's very easy to use and an interesting thing",
    "start": "2143619",
    "end": "2149980"
  },
  {
    "text": "about the batch right item operation and DynamoDB is that it's a best-effort operation it's not atomic at all so you",
    "start": "2149980",
    "end": "2156700"
  },
  {
    "text": "can put up to 25 put requests in there but it might not execute all of them one of the main reasons that might happen is",
    "start": "2156700",
    "end": "2163060"
  },
  {
    "text": "because you have exceeded your provision throughput capacity so if you had maybe",
    "start": "2163060",
    "end": "2168190"
  },
  {
    "text": "15 right capacity units remaining for that period of time that second and you",
    "start": "2168190",
    "end": "2174430"
  },
  {
    "text": "sent 25 items you might get 10 back it returns those items back to you in the",
    "start": "2174430",
    "end": "2179890"
  },
  {
    "text": "response of the request in a key called unprocessed items normally when you're just using that command straight up you",
    "start": "2179890",
    "end": "2186490"
  },
  {
    "text": "have to then manage getting those items putting them back into another request and sending it again but the DynamoDB",
    "start": "2186490",
    "end": "2193420"
  },
  {
    "text": "batch write request batch class that we include in the sdk handles that all that for you so you'd only have to worry",
    "start": "2193420",
    "end": "2199570"
  },
  {
    "text": "about it so this is going to build off the example with the scan iterators that",
    "start": "2199570",
    "end": "2205690"
  },
  {
    "text": "Michael showed you that variable on the second line the at-risk bets that's that",
    "start": "2205690",
    "end": "2211240"
  },
  {
    "text": "resulting single iterator that Michael constructed with the append iterator and",
    "start": "2211240",
    "end": "2216849"
  },
  {
    "text": "the three scan iterator so keep that in mind so the top of the of the coat we're",
    "start": "2216849",
    "end": "2222339"
  },
  {
    "text": "going to instantiate the right request batch using the factory method then we",
    "start": "2222339",
    "end": "2228009"
  },
  {
    "text": "can use that scan iterator and for each over those results and will create a put",
    "start": "2228009",
    "end": "2233559"
  },
  {
    "text": "item command with our with that pet data plus we'll add in we could add in more",
    "start": "2233559",
    "end": "2238779"
  },
  {
    "text": "data like in this case I'm putting a date to kind of represent being an appointment and we just instead of",
    "start": "2238779",
    "end": "2244839"
  },
  {
    "text": "executing that command we just add it to the batch and as we because of that",
    "start": "2244839",
    "end": "2250150"
  },
  {
    "text": "flushing decorator as you add items to the batch as it reaches 25 it's going to flush those automatically for you and",
    "start": "2250150",
    "end": "2256229"
  },
  {
    "text": "then at the end we'll do one last flush because if there's any leftover items like if you didn't quite make it to 25",
    "start": "2256229",
    "end": "2262329"
  },
  {
    "text": "with that last batch it'll clean up the rest and send everything out and it's really that easy and something that's",
    "start": "2262329",
    "end": "2268089"
  },
  {
    "text": "that's that easy it kind of makes you smile right there's the monkey again you know you like the monkey so we're going",
    "start": "2268089",
    "end": "2276190"
  },
  {
    "text": "to go ahead and show you oh sure head that that's part of the Dynamo API yeah",
    "start": "2276190",
    "end": "2282339"
  },
  {
    "text": "he's asking if the the limit of 25 put items is a limitation of the SDK or",
    "start": "2282339",
    "end": "2288309"
  },
  {
    "text": "DynamoDB as part of the dynamo DB API so the the class that we wrote enables you",
    "start": "2288309",
    "end": "2294369"
  },
  {
    "text": "to kind of not worry about that because you can just as many as you want so we're going to head and take a look at a",
    "start": "2294369",
    "end": "2300880"
  },
  {
    "text": "demo for that code that I just showed you built upon the example that Michael",
    "start": "2300880",
    "end": "2306489"
  },
  {
    "text": "showed you so in here we're going to see the same thing where is going to print",
    "start": "2306489",
    "end": "2311529"
  },
  {
    "text": "out the operations that it's doing but instead of just saying scan operations it's going to be intermingled with the batch right item operations and we are",
    "start": "2311529",
    "end": "2322599"
  },
  {
    "text": "almost done right there we go so what that code did in conjunction with the",
    "start": "2322599",
    "end": "2328960"
  },
  {
    "text": "code that Michael showed you is I basically scanned through over 15,000",
    "start": "2328960",
    "end": "2334869"
  },
  {
    "text": "items in our table that's what I seeded our test table with it pulled out the ones that we needed using the three scan",
    "start": "2334869",
    "end": "2341650"
  },
  {
    "text": "iterators combine those together we iterated over those and created batches",
    "start": "2341650",
    "end": "2346960"
  },
  {
    "text": "of these put put items to send those and put them into our appointment",
    "start": "2346960",
    "end": "2352120"
  },
  {
    "text": "and it really only took a few seconds and it's even it even took less time",
    "start": "2352120",
    "end": "2357460"
  },
  {
    "text": "than what you saw here because we injected sleep operations into the first ten operations so you could actually see",
    "start": "2357460",
    "end": "2364450"
  },
  {
    "text": "the name of it before disappear so with",
    "start": "2364450",
    "end": "2379030"
  },
  {
    "text": "the with the class that we that we make you can create a single put item command",
    "start": "2379030",
    "end": "2385120"
  },
  {
    "text": "but it actually extracts the information and turns it into the batch command for you so it's it's doing that under the",
    "start": "2385120",
    "end": "2392320"
  },
  {
    "text": "hood where you don't you don't see it actually creating the batches is that that makes sense is that end your",
    "start": "2392320",
    "end": "2397360"
  },
  {
    "text": "question right",
    "start": "2397360",
    "end": "2400020"
  },
  {
    "text": "with when using the scan operation you should try to do it in as few operations as possible because when you do a scan",
    "start": "2414470",
    "end": "2422250"
  },
  {
    "text": "it actually looks at every single item in your table so we use three operations because that's the minimum amount we",
    "start": "2422250",
    "end": "2428220"
  },
  {
    "text": "could figure out to with the conditions to get all the information we need it",
    "start": "2428220",
    "end": "2433910"
  },
  {
    "text": "good okay cool thanks here we go alright",
    "start": "2433910",
    "end": "2444090"
  },
  {
    "start": "2442000",
    "end": "2442000"
  },
  {
    "text": "so we've shown some of the new features of the new SDK we showed the DynamoDB",
    "start": "2444090",
    "end": "2450210"
  },
  {
    "text": "session handler the how when you scale up this session handler is a centralized",
    "start": "2450210",
    "end": "2456120"
  },
  {
    "text": "database that's not on the file system so users won't be logged out we showed",
    "start": "2456120",
    "end": "2461760"
  },
  {
    "text": "how you can use scan iterators to grab a subset of data and to return these paginator results without you having to",
    "start": "2461760",
    "end": "2468210"
  },
  {
    "start": "2465000",
    "end": "2465000"
  },
  {
    "text": "do them yourself and we should batching on how you can really efficiently send up thousands of requests as quickly as",
    "start": "2468210",
    "end": "2474510"
  },
  {
    "text": "possible so we've rewritten a lot of things on the SDK and we think it's a",
    "start": "2474510",
    "end": "2480000"
  },
  {
    "text": "much more powerful SDK and it's gonna help you to be a more productive developer and we really appreciate you",
    "start": "2480000",
    "end": "2486090"
  },
  {
    "text": "coming today and we're eager to hear your feedback there's a custom there's a feedback form evaluation form so we'd",
    "start": "2486090",
    "end": "2492780"
  },
  {
    "text": "really like it if you could fill that out but now I'd like to open up for questions if anybody has any",
    "start": "2492780",
    "end": "2499490"
  }
]