[
  {
    "start": "0",
    "end": "56000"
  },
  {
    "text": "good afternoon my name is asif I'm a technical business development manager",
    "start": "120",
    "end": "5250"
  },
  {
    "text": "for containers at Amazon Web Services so in the next 45 50 minutes we're gonna",
    "start": "5250",
    "end": "13559"
  },
  {
    "text": "talk about why would you use containers and how containers enable you to drive",
    "start": "13559",
    "end": "19619"
  },
  {
    "text": "innovation faster through through your development pipelines how many of us are",
    "start": "19619",
    "end": "26130"
  },
  {
    "text": "using containers in production today oh that's nice I better be careful okay",
    "start": "26130",
    "end": "32960"
  },
  {
    "text": "cool so and I've got with me Chris from rework and Josh from rework and Radek",
    "start": "32960",
    "end": "41160"
  },
  {
    "text": "from ops line we're going to talk about how we work which is one of the premier startups in in the co-working space area",
    "start": "41160",
    "end": "50280"
  },
  {
    "text": "of how they use containers to drive agility and innovation through their stop development lifecycle so let's get",
    "start": "50280",
    "end": "56280"
  },
  {
    "text": "started this is how we used to build software I'm a Java developer by by boat or by",
    "start": "56280",
    "end": "64070"
  },
  {
    "text": "myself a boat but the idea was I've coded through different different parts",
    "start": "64070",
    "end": "70680"
  },
  {
    "text": "of java application and we used to build these monolithic apps where apps were all intertwine and if you wanted to",
    "start": "70680",
    "end": "78210"
  },
  {
    "text": "change a UI let's say I'm testing a new feature which I want to be geo-located",
    "start": "78210",
    "end": "84450"
  },
  {
    "text": "for this audience here it was really hard I remember a time in my life where",
    "start": "84450",
    "end": "90329"
  },
  {
    "text": "a UI change caused so much ripple down there down the path on the tool chain or that down the development workflow that we",
    "start": "90329",
    "end": "97530"
  },
  {
    "text": "had to spend two full weeks just unraveling that and that was not agility",
    "start": "97530",
    "end": "102689"
  },
  {
    "text": "that was the opposite of agility so we used to build test release delivery pipelines and get there a lot of",
    "start": "102689",
    "end": "110759"
  },
  {
    "start": "109000",
    "end": "180000"
  },
  {
    "text": "challenges in that space and none of this is new to all of us I all of us have coded these so it's it's that it's",
    "start": "110759",
    "end": "118469"
  },
  {
    "text": "very difficult to scale those applications you have to go vertically scaling and vertically scaling yes it",
    "start": "118469",
    "end": "124560"
  },
  {
    "text": "works but only works to a certain degree then I talked about long build test release cycles where every change every",
    "start": "124560",
    "end": "132020"
  },
  {
    "text": "my new chain has to go through that regression and and things like that and the whole",
    "start": "132020",
    "end": "137100"
  },
  {
    "text": "intertwine thing I used to like colloquially call this the spaghetti",
    "start": "137100",
    "end": "142680"
  },
  {
    "text": "architecture because if you've looked at a monolithic code down there and how this is calling different functions and",
    "start": "142680",
    "end": "149700"
  },
  {
    "text": "if you really want to draw it out I'm hoping you could draw something more cleaner but I always ended up drawing a",
    "start": "149700",
    "end": "157020"
  },
  {
    "text": "spaghetti where lines are going from here to there and you're like okay I don't understand this but these are the",
    "start": "157020",
    "end": "162750"
  },
  {
    "text": "challenges and at the end of the day what happened was customers would come back and say hey Asif why does it take",
    "start": "162750",
    "end": "169560"
  },
  {
    "text": "me six months or 12 months to see a feature from you this is not acceptable",
    "start": "169560",
    "end": "174870"
  },
  {
    "text": "I need those features are we earlier now you rewind that back",
    "start": "174870",
    "end": "182120"
  },
  {
    "text": "2005/6 and I'll talk about that later is when monolithic started up started getting broken down into micro services",
    "start": "182990",
    "end": "190230"
  },
  {
    "text": "and micro services at the core of it and micro services is a more fancy term for",
    "start": "190230",
    "end": "196340"
  },
  {
    "text": "service-oriented architecture with easier protocols and we've all done service-oriented architecture for for a",
    "start": "196340",
    "end": "202650"
  },
  {
    "text": "long time so micro services enabled us to do this isolation and do one thing",
    "start": "202650",
    "end": "209490"
  },
  {
    "text": "and one thing really well I have lived a life where people used to tell me you",
    "start": "209490",
    "end": "215550"
  },
  {
    "text": "can only do a Java stack app the whole stack has to be Java so we wrote a UI",
    "start": "215550",
    "end": "222150"
  },
  {
    "text": "which was starts back-end which was pujols and yes those frameworks are great but I as a developer I did not",
    "start": "222150",
    "end": "229230"
  },
  {
    "text": "have freedom I want I crave freedom I just should be able to choose the tools I need the language I need with micro",
    "start": "229230",
    "end": "236670"
  },
  {
    "text": "services you can go plop polyglot your UI can be running JavaScript your",
    "start": "236670",
    "end": "242490"
  },
  {
    "text": "back-end could be running Python or Java or something else and so on and so forth so let's dive a little deeper and talk",
    "start": "242490",
    "end": "250830"
  },
  {
    "start": "247000",
    "end": "384000"
  },
  {
    "text": "about what really is micro services I'll quote Adrian here Adrian Cockroft at the time he was with",
    "start": "250830",
    "end": "256709"
  },
  {
    "text": "Netflix when he said this I believe but at micro services is a service-oriented",
    "start": "256709",
    "end": "262800"
  },
  {
    "text": "architecture what it means is services talk to each other over the network and they are",
    "start": "262800",
    "end": "269040"
  },
  {
    "text": "fault-tolerant and highly available and disposable and resilient so I have the same code base deployed in u.s. East one",
    "start": "269040",
    "end": "276480"
  },
  {
    "text": "and I have the same code base deployed in AP East one and it exactly works the",
    "start": "276480",
    "end": "281610"
  },
  {
    "text": "same and all the dependencies are taken out and I make it disposable the second",
    "start": "281610",
    "end": "288510"
  },
  {
    "text": "big feature of micro Services is the service-oriented architecture is composed of loosely coupled elements and",
    "start": "288510",
    "end": "295200"
  },
  {
    "text": "I cannot stress more about this one of the biggest software pain points or",
    "start": "295200",
    "end": "301440"
  },
  {
    "text": "psychologists that happens is when we get into tight coupling how many of us has seen dot properties file with",
    "start": "301440",
    "end": "308220"
  },
  {
    "text": "hard-coded variables okay you guys are amazing programmers this side is amazing",
    "start": "308220",
    "end": "314280"
  },
  {
    "text": "this side is like me so but the deal is this so when when you tie your software",
    "start": "314280",
    "end": "320640"
  },
  {
    "text": "or your API together through very opinionated constructs you will every time you want",
    "start": "320640",
    "end": "328980"
  },
  {
    "text": "to change it you'll have to go through and a bunch of things to make this work and that causes a lack of agility and",
    "start": "328980",
    "end": "337430"
  },
  {
    "text": "finally you have to live in bounded context in a micro service and what does",
    "start": "337430",
    "end": "343590"
  },
  {
    "text": "this mean a bounded context means in very simple way of thinking is it does",
    "start": "343590",
    "end": "350220"
  },
  {
    "text": "one thing and one thing really well so take a step back if I'm writing a UI an",
    "start": "350220",
    "end": "356640"
  },
  {
    "text": "order management UI I should not be worried about how a payments UI looks",
    "start": "356640",
    "end": "362040"
  },
  {
    "text": "like or how a social feed UI looks like those are different visualizations and",
    "start": "362040",
    "end": "367770"
  },
  {
    "text": "those are different ways to interpret the same function if you focus on giving",
    "start": "367770",
    "end": "373410"
  },
  {
    "text": "the best order management experience to your customer and you have decoupled it",
    "start": "373410",
    "end": "379230"
  },
  {
    "text": "you have created our micro services architecture that can go faster and who",
    "start": "379230",
    "end": "385530"
  },
  {
    "start": "384000",
    "end": "424000"
  },
  {
    "text": "did this we at Amazon did this way back I believe in 2005 so when you look at",
    "start": "385530",
    "end": "392010"
  },
  {
    "text": "amazon.com today when you go to the web service some website it's comprised of a bunch of Webster micro services each of",
    "start": "392010",
    "end": "400290"
  },
  {
    "text": "those box that you see is a micro service or is a group of my a set of micro services that",
    "start": "400290",
    "end": "406190"
  },
  {
    "text": "is powering it so the customer feedback that you say their customer reviews they",
    "start": "406190",
    "end": "411350"
  },
  {
    "text": "add to card and each of these has been built to do one thing and one thing",
    "start": "411350",
    "end": "416630"
  },
  {
    "text": "really well in a very loosely coupled way and it's powered by the service-oriented architecture that we",
    "start": "416630",
    "end": "422570"
  },
  {
    "text": "are used to so if I have done all of this what does this get me to it gets me",
    "start": "422570",
    "end": "429680"
  },
  {
    "start": "424000",
    "end": "491000"
  },
  {
    "text": "to write getting my code more agile more flexibility I can move code from between regions I",
    "start": "429680",
    "end": "436370"
  },
  {
    "text": "can upgrade faster I can I can my developers can write code at their own",
    "start": "436370",
    "end": "442940"
  },
  {
    "text": "velocity so your UI can run at their speed your back-end can run at their speed and your data access layer can run",
    "start": "442940",
    "end": "449360"
  },
  {
    "text": "at that speed for a three-tier architecture and each of these layers have API based contracts it's like",
    "start": "449360",
    "end": "457820"
  },
  {
    "text": "there's a in English language we have a contract of communication so when I say things like hello how are you",
    "start": "457820",
    "end": "464570"
  },
  {
    "text": "the contract is that API is understood and the answer comes back say hey I'm fine how are you",
    "start": "464570",
    "end": "470240"
  },
  {
    "text": "so those are API contracts that need to be defined and if you have defined those the agility comes faster imagine having",
    "start": "470240",
    "end": "477980"
  },
  {
    "text": "the same conversation if we didn't have syntactical contracts in English language where if I say hello how are",
    "start": "477980",
    "end": "484490"
  },
  {
    "text": "you what comes back is a random text string or something which is different there are really much harder to",
    "start": "484490",
    "end": "489620"
  },
  {
    "text": "communicate with each other at the end of the day when Amazon did this this is",
    "start": "489620",
    "end": "495470"
  },
  {
    "start": "491000",
    "end": "549000"
  },
  {
    "text": "what it meant for Amazon thousands of teams building micro services through continuous delivery and it ended up as",
    "start": "495470",
    "end": "502160"
  },
  {
    "text": "50 million deployments a year this is a little dated metric but anybody wants to",
    "start": "502160",
    "end": "507890"
  },
  {
    "text": "take a guess how many deployments are happening a day or a second if somebody's really wants to go for it no",
    "start": "507890",
    "end": "515050"
  },
  {
    "text": "ok a lot that's correct that's one deployment every half a second like it's",
    "start": "515050",
    "end": "522830"
  },
  {
    "text": "1/6 of a second that's the speed micro services and containers provide you 5700",
    "start": "522830",
    "end": "530570"
  },
  {
    "text": "deployments this is unimaginable in my life I'm pretty sure you guys have better",
    "start": "530570",
    "end": "536699"
  },
  {
    "text": "better engineering workflows but where I come from in 2008 this was unimaginable",
    "start": "536699",
    "end": "543449"
  },
  {
    "text": "because a set of 50 deployments used to take us weeks not even days but when",
    "start": "543449",
    "end": "550290"
  },
  {
    "text": "docker came in and this is like we used to package using maven and maven had its",
    "start": "550290",
    "end": "555540"
  },
  {
    "text": "own good and bad but docker came in and docker gave us that CLI that easy way to",
    "start": "555540",
    "end": "560939"
  },
  {
    "text": "package the application hrunta the application the OS the dependencies of the applications I can even put in",
    "start": "560939",
    "end": "567629"
  },
  {
    "text": "environment variables now I can do port binding all of that has become super simple to build ship and package it and",
    "start": "567629",
    "end": "574679"
  },
  {
    "text": "run it doing one docker container is super easy",
    "start": "574679",
    "end": "580499"
  },
  {
    "text": "I can go to my laptop and fire up a CLI and boom it works but doing this is",
    "start": "580499",
    "end": "587749"
  },
  {
    "text": "super super hard this is think of n nodes with M containers each and you've",
    "start": "587749",
    "end": "595799"
  },
  {
    "text": "got an O of M n square problem o of n square problem which is a hard cluster",
    "start": "595799",
    "end": "601319"
  },
  {
    "text": "management problem and that's where you need a container management solution",
    "start": "601319",
    "end": "606449"
  },
  {
    "text": "that does this for you like kind of dust undifferentiated heavy lifting so",
    "start": "606449",
    "end": "611939"
  },
  {
    "start": "610000",
    "end": "694000"
  },
  {
    "text": "container management platforms a bunch of them came through approximately the same time docker came out with their own",
    "start": "611939",
    "end": "617790"
  },
  {
    "text": "one there's kubernetes out there Amazon we looked at our primitives and we",
    "start": "617790",
    "end": "622980"
  },
  {
    "text": "launched Amazon ECS in 2014 and there are others also that are pretty popular but at the core of this whole container",
    "start": "622980",
    "end": "630899"
  },
  {
    "text": "management story is making running these containers super super easy so that you",
    "start": "630899",
    "end": "636989"
  },
  {
    "text": "or we as developers can focus on writing the code once I have packaged my binary",
    "start": "636989",
    "end": "643459"
  },
  {
    "text": "everything should happen like there's a saying that I use is developers don't",
    "start": "643459",
    "end": "649499"
  },
  {
    "text": "care only when the platform is stable",
    "start": "649499",
    "end": "654689"
  },
  {
    "text": "and does not break and that I truly believe this as a developer imagine",
    "start": "654689",
    "end": "660029"
  },
  {
    "text": "going to a platform a container management platform or any platform which breaks in production",
    "start": "660029",
    "end": "666779"
  },
  {
    "text": "the common example is unloading - Jenkins is Jenkins plugins used to fail",
    "start": "666779",
    "end": "672089"
  },
  {
    "text": "in production and then the whole engineering team goes back and starts",
    "start": "672089",
    "end": "677699"
  },
  {
    "text": "troubleshooting that plugin that was wasted cycles bad customer experience so",
    "start": "677699",
    "end": "683339"
  },
  {
    "text": "going back to developers don't really care about the infrastructure or the container management platform when",
    "start": "683339",
    "end": "690060"
  },
  {
    "text": "things work and that's where what we focused on ECS and we built a platform that many customers are building",
    "start": "690060",
    "end": "697339"
  },
  {
    "start": "694000",
    "end": "879000"
  },
  {
    "text": "scalable and production of workloads on so at the core of ECS is a cluster",
    "start": "697339",
    "end": "703769"
  },
  {
    "text": "management service so there's a key value store which is a PAC source base database journal it's basically a",
    "start": "703769",
    "end": "709170"
  },
  {
    "text": "state-transition machine that we we keep once you have a cluster management",
    "start": "709170",
    "end": "716519"
  },
  {
    "text": "service you can store the state of your nodes and the state of your containers in that Journal all this is powered by",
    "start": "716519",
    "end": "724139"
  },
  {
    "text": "API and it we have an agent Communication Service naturally if via I'm I'm a container and I'm sitting on",
    "start": "724139",
    "end": "731670"
  },
  {
    "text": "an instance I need to talk to somebody a cluster service to do it that is ECS ECS",
    "start": "731670",
    "end": "738029"
  },
  {
    "text": "is that orchestration and the management engine that does all of this for you on",
    "start": "738029",
    "end": "745110"
  },
  {
    "text": "each instance containers runs on ec2 instances on each instance we have an EC",
    "start": "745110",
    "end": "751470"
  },
  {
    "text": "s agent and that agent communicates back to the agent Communication Service and",
    "start": "751470",
    "end": "756779"
  },
  {
    "text": "keeps track of the whole cluster that you launch imagine launching a cluster",
    "start": "756779",
    "end": "761910"
  },
  {
    "text": "and trying to keep this in balance today you can go on the ECS console or the api",
    "start": "761910",
    "end": "767970"
  },
  {
    "text": "and say click cluster and it works you can have a 500 node cluster in no time",
    "start": "767970",
    "end": "774569"
  },
  {
    "text": "and that's what ECS provides apart from the deep security integration AWS or the",
    "start": "774569",
    "end": "782579"
  },
  {
    "text": "services integration that we'll talk about on each instance when the containers are sitting they are grouped",
    "start": "782579",
    "end": "789059"
  },
  {
    "text": "together into a logical unit called tasks you might hear pod also in the kubernetes world but we call it a task",
    "start": "789059",
    "end": "796439"
  },
  {
    "text": "from a Norman closure and you can have up to 10 containers in a task but think of it as kind of a business",
    "start": "796439",
    "end": "803100"
  },
  {
    "text": "function that you can wrap together I have customers who have ripped out the",
    "start": "803100",
    "end": "808470"
  },
  {
    "text": "UI and called it a task all the UI components are running in one task I",
    "start": "808470",
    "end": "814319"
  },
  {
    "text": "have also customers who have best basically done a vertical slice and says my UI my back-end a logic and my data",
    "start": "814319",
    "end": "822420"
  },
  {
    "text": "access layer sit in a task and you can scale these tasks horizontally you say I want to run 10 tasks it does it with",
    "start": "822420",
    "end": "829949"
  },
  {
    "text": "auto scaling without you going back to see if it works or if the lights are on it just does it so scaling comes",
    "start": "829949",
    "end": "836970"
  },
  {
    "text": "naturally off the bat you confront it with a load balancer or what we call",
    "start": "836970",
    "end": "842399"
  },
  {
    "text": "also a logical construct called service then your internet traffic",
    "start": "842399",
    "end": "848160"
  },
  {
    "text": "spikes from 10 requests a minute to a million requests a minute you need a shock absorber and that shock absorber",
    "start": "848160",
    "end": "854309"
  },
  {
    "text": "is the load balancer there are two load balancers on AWS today the application load balancer which is a layer seven",
    "start": "854309",
    "end": "860459"
  },
  {
    "text": "load balancer and a lay a full load balancer which is the network load balancer and it does different things",
    "start": "860459",
    "end": "866850"
  },
  {
    "text": "but both of them integrate deeply with ECS so if you have a TCP based workload",
    "start": "866850",
    "end": "872639"
  },
  {
    "text": "that you want to run on containers you can go with NLB if you have an HTTP based workload you can go with alb so at",
    "start": "872639",
    "end": "879870"
  },
  {
    "start": "879000",
    "end": "941000"
  },
  {
    "text": "the very high level that's what it ETS is about but it's not just about a",
    "start": "879870",
    "end": "885059"
  },
  {
    "text": "container orchestration platform and I want to take a poll and say this again for myself",
    "start": "885059",
    "end": "890160"
  },
  {
    "text": "it's about the whole platform what BuzzFeed told us and when you look at",
    "start": "890160",
    "end": "896819"
  },
  {
    "text": "developing a micro service on a container deployment on a container management platform is one piece of it",
    "start": "896819",
    "end": "903480"
  },
  {
    "text": "but then you have secrets management service discovery load balancer tasks",
    "start": "903480",
    "end": "909839"
  },
  {
    "text": "networking auto scaling all of these are super important when you are running",
    "start": "909839",
    "end": "914910"
  },
  {
    "text": "micro services at scale in production so that you can go sleep well at night and into in the morning when a pager buzzes",
    "start": "914910",
    "end": "921959"
  },
  {
    "text": "it buzzes on Amazon and that's where when we are developing micro services",
    "start": "921959",
    "end": "927899"
  },
  {
    "text": "look at the platform how the AWS platform is innovating in the cloud native way",
    "start": "927899",
    "end": "933360"
  },
  {
    "text": "and use that cloud native constructs that AWS is providing you to power these",
    "start": "933360",
    "end": "938370"
  },
  {
    "text": "things and of course you can use open source on top of AWS so with that I'd",
    "start": "938370",
    "end": "943380"
  },
  {
    "start": "941000",
    "end": "1057000"
  },
  {
    "text": "like to take a pause and invite Chris to talk about what we work did with this",
    "start": "943380",
    "end": "949910"
  },
  {
    "text": "innovative with containers on AWS CCS so I'm from we work my name is Chris I'm a",
    "start": "951470",
    "end": "958140"
  },
  {
    "text": "VP of software engineering and I don't think it's always so straightforward in order to just be innovative and make",
    "start": "958140",
    "end": "964890"
  },
  {
    "text": "things happen in production a lot of people are risk averse and they should be because there's time and money on the",
    "start": "964890",
    "end": "970260"
  },
  {
    "text": "line so a lot of startups are very chaotic and our startup hers was pretty",
    "start": "970260",
    "end": "975899"
  },
  {
    "text": "chaotic we had three different ways employee elastic beanstalk chef custom",
    "start": "975899",
    "end": "981450"
  },
  {
    "text": "shell scripts we had security that was basically done by people a super fast",
    "start": "981450",
    "end": "987180"
  },
  {
    "text": "super light way to open and we had a lot of variation in our infrastructure so",
    "start": "987180",
    "end": "993959"
  },
  {
    "text": "after 810 days of uptime on this ec2 instance it started to fail the",
    "start": "993959",
    "end": "999930"
  },
  {
    "text": "networked heart just stopped working it was made me pretty sad pretty much dodged a bullet on this one",
    "start": "999930",
    "end": "1006829"
  },
  {
    "text": "because I had basically nothing to do just sat there and said okay we'll stop working and now it's started working is",
    "start": "1006829",
    "end": "1013640"
  },
  {
    "text": "it gonna happen again we really weren't prepared to set up for our stack on a",
    "start": "1013640",
    "end": "1020060"
  },
  {
    "text": "new new set of hosts so I knew it was time for a big change we needed to quickly be able to recreate our",
    "start": "1020060",
    "end": "1025880"
  },
  {
    "text": "environments get it ready for much more scale as we work had acquired my small",
    "start": "1025880",
    "end": "1030918"
  },
  {
    "text": "startup our small startup I needed to secure the platform as well as begin to adopt the DevOps culture and keep things",
    "start": "1030919",
    "end": "1038298"
  },
  {
    "text": "simple which I later learned to be using a cloud native approach let me turn this",
    "start": "1038299",
    "end": "1043938"
  },
  {
    "text": "over to Josh he's going to get into more details and introduce you to field lens",
    "start": "1043939",
    "end": "1049120"
  },
  {
    "text": "thanks Chris I'm Josh Davis principal engineer at we",
    "start": "1049210",
    "end": "1054440"
  },
  {
    "text": "work and see yeah before before I go",
    "start": "1054440",
    "end": "1059450"
  },
  {
    "start": "1057000",
    "end": "1192000"
  },
  {
    "text": "into the details of how we're using ECS and all that talk a little bit about the",
    "start": "1059450",
    "end": "1065330"
  },
  {
    "text": "application field lens so field lens is a construction communication app it's designed to help",
    "start": "1065330",
    "end": "1073570"
  },
  {
    "text": "construction teams communicate about the status of the project and to track their",
    "start": "1073570",
    "end": "1078800"
  },
  {
    "text": "progress and generate reports for stakeholders like owners and architects",
    "start": "1078800",
    "end": "1084050"
  },
  {
    "text": "and engineers how many of you use JIRA or Trello or yeah pretty much everybody",
    "start": "1084050",
    "end": "1092590"
  },
  {
    "text": "so for you guys field lens is JIRA for construction",
    "start": "1092590",
    "end": "1098200"
  },
  {
    "text": "that's it so while we don't have the scale of some large social networks like",
    "start": "1098200",
    "end": "1105230"
  },
  {
    "text": "Facebook or whatever you can see from these numbers here we have millions of pieces of content you know about 80k",
    "start": "1105230",
    "end": "1112190"
  },
  {
    "text": "users 110,000 projects that's that's a",
    "start": "1112190",
    "end": "1118460"
  },
  {
    "text": "good amount of stuff and we need to think about scalability especially since we are required by we work and we work",
    "start": "1118460",
    "end": "1124160"
  },
  {
    "text": "does a lot of construction and we have",
    "start": "1124160",
    "end": "1129380"
  },
  {
    "text": "different clients we have the the app is very mobile centric so we have",
    "start": "1129380",
    "end": "1135400"
  },
  {
    "text": "construction workers on job sites walking around with their iPhones and Android devices taking pictures of stuff",
    "start": "1135400",
    "end": "1142070"
  },
  {
    "text": "you know oh this this toilet was installed in the wrong place you know that kind of thing and those mobile",
    "start": "1142070",
    "end": "1149870"
  },
  {
    "text": "clients have a different workload than the web clients we also have background",
    "start": "1149870",
    "end": "1157370"
  },
  {
    "text": "jobs we have to generate reports we have to process blueprints which come as PDFs",
    "start": "1157370",
    "end": "1165140"
  },
  {
    "text": "and so we have these sort of long-running compute-intensive things and that that is really difficult",
    "start": "1165140",
    "end": "1174050"
  },
  {
    "text": "to do if you have a monolith and you're running on manually created",
    "start": "1174050",
    "end": "1180550"
  },
  {
    "text": "infrastructure it's really not the way you want to go and enterprise users",
    "start": "1180550",
    "end": "1187640"
  },
  {
    "text": "expect reliability and our users have hammers",
    "start": "1187640",
    "end": "1194590"
  },
  {
    "start": "1192000",
    "end": "1297000"
  },
  {
    "text": "so so what we how we started we didn't",
    "start": "1195120",
    "end": "1202510"
  },
  {
    "text": "start from nothing we had already had before we decided to go to ECS we were already using docker compose to set up",
    "start": "1202510",
    "end": "1210010"
  },
  {
    "text": "developer workstations to set up things like database servers elastic search",
    "start": "1210010",
    "end": "1215770"
  },
  {
    "text": "elastic mq things like that so we could develop and we didn't have to deal with",
    "start": "1215770",
    "end": "1221230"
  },
  {
    "text": "people setting up their database incorrectly things like that we also had",
    "start": "1221230",
    "end": "1226899"
  },
  {
    "text": "split up some of the mana lists we had some micro services usually based on the",
    "start": "1226899",
    "end": "1232179"
  },
  {
    "text": "workload that they were placing you know though that those particular activities",
    "start": "1232179",
    "end": "1237340"
  },
  {
    "text": "were not really compatible with an API server which needs to serve lots of",
    "start": "1237340",
    "end": "1243010"
  },
  {
    "text": "little quick requests you know you have a report running for half an hour and that's no good so we'd split some stuff out already and",
    "start": "1243010",
    "end": "1251789"
  },
  {
    "text": "we already had a full jenkins build test CI CD pipeline and we have a bunch of",
    "start": "1251789",
    "end": "1262450"
  },
  {
    "text": "environments now here's where here's where the consistent deployment comes",
    "start": "1262450",
    "end": "1267520"
  },
  {
    "text": "into play are our environments some of them were one of them was using chef to",
    "start": "1267520",
    "end": "1272590"
  },
  {
    "text": "deploy things another one was using the custom shell scripts and Tarble halls",
    "start": "1272590",
    "end": "1277720"
  },
  {
    "text": "and stuff like that it really got to be a pain when you know you're working on",
    "start": "1277720",
    "end": "1285220"
  },
  {
    "text": "something and you've got the development pipeline working fine and then oh you go to QA and oh yeah right the deployment",
    "start": "1285220",
    "end": "1292029"
  },
  {
    "text": "script doesn't do that really we need to step it up so where do we want to be we",
    "start": "1292029",
    "end": "1301360"
  },
  {
    "start": "1297000",
    "end": "1372000"
  },
  {
    "text": "agree on docker images for everything so every service every micro service every",
    "start": "1301360",
    "end": "1307570"
  },
  {
    "text": "monolith every everything is deployed as a docker image that's our deployment",
    "start": "1307570",
    "end": "1312940"
  },
  {
    "text": "unit of choice everything is contained in the docker image also uniform",
    "start": "1312940",
    "end": "1318549"
  },
  {
    "text": "deployment and management right so if an engineer or an ops person wants to take",
    "start": "1318549",
    "end": "1326350"
  },
  {
    "text": "care of the web app versus or this part of you know some blueprint handling service",
    "start": "1326350",
    "end": "1334110"
  },
  {
    "text": "everything's deployed the same way everything's managed the same way and it just makes life a lot easier also since",
    "start": "1334110",
    "end": "1341080"
  },
  {
    "text": "we have monoliths I'm sure some of you probably have monoliths you want to make",
    "start": "1341080",
    "end": "1347470"
  },
  {
    "text": "new micro-services easy to create for the developers right you want to give them as much control as possible and you",
    "start": "1347470",
    "end": "1355330"
  },
  {
    "text": "want to encourage micro-services right and it and last but certainly not least we want enhanced security scalability",
    "start": "1355330",
    "end": "1362590"
  },
  {
    "text": "reliability you know the ECS pretty much does all",
    "start": "1362590",
    "end": "1369730"
  },
  {
    "text": "those things right out of the box so this is our desired typology we have a",
    "start": "1369730",
    "end": "1376180"
  },
  {
    "start": "1372000",
    "end": "1429000"
  },
  {
    "text": "secure network v pcs for every environment all the all the stuff is all",
    "start": "1376180",
    "end": "1382480"
  },
  {
    "text": "the resources are deployed in that in that V PC we have front-end api router",
    "start": "1382480",
    "end": "1388680"
  },
  {
    "text": "for cross-cutting concerns like metrics logging and security monitoring and we",
    "start": "1388680",
    "end": "1396460"
  },
  {
    "text": "have the e CS scheduler deploying all the services into the e CS cluster",
    "start": "1396460",
    "end": "1402000"
  },
  {
    "text": "another thing to note is it really helps especially we had some some services",
    "start": "1402000",
    "end": "1408790"
  },
  {
    "text": "deployed elastic Beanstalk really helps us to use our ec2 resources more",
    "start": "1408790",
    "end": "1414490"
  },
  {
    "text": "efficiently because we can we can employ a lot of small resources on maybe larger",
    "start": "1414490",
    "end": "1419710"
  },
  {
    "text": "servers again it's just freedom we can we can tune everything and come up with",
    "start": "1419710",
    "end": "1426190"
  },
  {
    "text": "the best best solution so here is here",
    "start": "1426190",
    "end": "1431950"
  },
  {
    "start": "1429000",
    "end": "1455000"
  },
  {
    "text": "are our services running in our different environments so this is sort",
    "start": "1431950",
    "end": "1438130"
  },
  {
    "text": "of the end state everything's managed from this is a snapshot of the EECS console and it took us about eight weeks",
    "start": "1438130",
    "end": "1447130"
  },
  {
    "text": "to get this done that's not a lot of time is it but as I mentioned we didn't",
    "start": "1447130",
    "end": "1454720"
  },
  {
    "text": "start from nothing so how do we get there how do we get how do we get to start using docker",
    "start": "1454720",
    "end": "1460580"
  },
  {
    "start": "1455000",
    "end": "1535000"
  },
  {
    "text": "production and stop just using it as a sort of developer work station play play",
    "start": "1460580",
    "end": "1466970"
  },
  {
    "text": "play area first step is to start building and publishing docker images",
    "start": "1466970",
    "end": "1471980"
  },
  {
    "text": "right because we we agreed that we were gonna that's going to be our deployment unit and we're gonna build Jenkins",
    "start": "1471980",
    "end": "1479149"
  },
  {
    "text": "pipelines we're gonna learn how to publish images to a an image repository",
    "start": "1479149",
    "end": "1486230"
  },
  {
    "text": "we selected J frog artifactory because",
    "start": "1486230",
    "end": "1491360"
  },
  {
    "text": "our Java applications we were already using it to publish our own libraries to artifactory and various pieces of",
    "start": "1491360",
    "end": "1498860"
  },
  {
    "text": "commercial commercial libraries that we were using so that was sort of a no-brainer for us and the the main goal",
    "start": "1498860",
    "end": "1507320"
  },
  {
    "text": "here is to get to a point where we have a docker compose based infrastructure",
    "start": "1507320",
    "end": "1514990"
  },
  {
    "text": "running on the developer workstations that will deploy all the services on the work stage on developers workstation and",
    "start": "1514990",
    "end": "1521630"
  },
  {
    "text": "then they can kind of just not start the one that they're going to be developing on today right and then start the",
    "start": "1521630",
    "end": "1530389"
  },
  {
    "text": "development environment for that sort of specific service that they're going to do work on so here's what that looks",
    "start": "1530389",
    "end": "1537470"
  },
  {
    "start": "1535000",
    "end": "1574000"
  },
  {
    "text": "like we created a local infrastructure git repo which basically just has a",
    "start": "1537470",
    "end": "1544789"
  },
  {
    "text": "docker compose file in it which pulls down all of the all of the dependent",
    "start": "1544789",
    "end": "1552500"
  },
  {
    "text": "services that we need on the workstation so here's and it also would have some we",
    "start": "1552500",
    "end": "1558169"
  },
  {
    "text": "also have some shell scripts there to help developers start up the things that they need all you all your dependencies and that includes the latest versions of",
    "start": "1558169",
    "end": "1566980"
  },
  {
    "text": "other services that are written by other teams or or what happened then when the",
    "start": "1566980",
    "end": "1576500"
  },
  {
    "start": "1574000",
    "end": "1624000"
  },
  {
    "text": "developer is working on a specific service inside that service git repo",
    "start": "1576500",
    "end": "1582340"
  },
  {
    "text": "there's another docker compose file which connects up with the docker",
    "start": "1582340",
    "end": "1588409"
  },
  {
    "text": "network created by the infrastructure one and so the",
    "start": "1588409",
    "end": "1594680"
  },
  {
    "text": "the service under development can connect up to all the other depend all the other dependencies and then we",
    "start": "1594680",
    "end": "1600890"
  },
  {
    "text": "volume in all the build output on that developers workstation so they can do a",
    "start": "1600890",
    "end": "1607430"
  },
  {
    "text": "build like they normally do right on the host and then map all the files in and",
    "start": "1607430",
    "end": "1612850"
  },
  {
    "text": "restart the application and open up debug ports and attach profly from the",
    "start": "1612850",
    "end": "1620870"
  },
  {
    "text": "profilers and all that stuff okay so",
    "start": "1620870",
    "end": "1626440"
  },
  {
    "start": "1624000",
    "end": "1675000"
  },
  {
    "text": "that gets us to our first milestone we have all our services working inside the",
    "start": "1626440",
    "end": "1631460"
  },
  {
    "text": "container right so during this process all the developers are trying to get each of the services to be containerized",
    "start": "1631460",
    "end": "1639770"
  },
  {
    "text": "self-contained and yeah so we have the whole thing running there we've",
    "start": "1639770",
    "end": "1645620"
  },
  {
    "text": "established a basic configuration for every every service and we have docker",
    "start": "1645620",
    "end": "1652250"
  },
  {
    "text": "file and Jenkins Jenkins files for all all repositories and we're all pretty",
    "start": "1652250",
    "end": "1658850"
  },
  {
    "text": "familiar with how they work and all that and yeah so the dependencies as I said",
    "start": "1658850",
    "end": "1666260"
  },
  {
    "text": "are connected via the docker network so you can work on a service you can have all the other services there so we're",
    "start": "1666260",
    "end": "1672770"
  },
  {
    "text": "ready to go to the cloud and I was thinking I should call this slide",
    "start": "1672770",
    "end": "1678440"
  },
  {
    "start": "1675000",
    "end": "1764000"
  },
  {
    "text": "meanwhile in in DevOps land while we",
    "start": "1678440",
    "end": "1685490"
  },
  {
    "text": "were doing all that and on the development team the Ops guys were busy",
    "start": "1685490",
    "end": "1691550"
  },
  {
    "text": "making cloud formation templates so we decided to use cloud formation as our",
    "start": "1691550",
    "end": "1696740"
  },
  {
    "text": "infrastructure as code weapon of choice and we had two sets of templates one is",
    "start": "1696740",
    "end": "1706059"
  },
  {
    "text": "the environment templates those set up all the basic features and it's a little",
    "start": "1706059",
    "end": "1712040"
  },
  {
    "text": "bit like that docker compose infra repo I talked about sets up all the basic",
    "start": "1712040",
    "end": "1717320"
  },
  {
    "text": "resources ECS clusters RDS databases v pcs all",
    "start": "1717320",
    "end": "1724970"
  },
  {
    "text": "kinds of things like that and then you have service-specific",
    "start": "1724970",
    "end": "1730010"
  },
  {
    "text": "templates which we put in each repo so again that gives the developer access",
    "start": "1730010",
    "end": "1736970"
  },
  {
    "text": "when you when you checkout service XYZ you have everything you have your local",
    "start": "1736970",
    "end": "1743320"
  },
  {
    "text": "docker compose file and you also have your ECS confirmation templates in there",
    "start": "1743320",
    "end": "1750290"
  },
  {
    "text": "and all the parameters files for each environment now to go into that in a second and we have another repo",
    "start": "1750290",
    "end": "1756740"
  },
  {
    "text": "containing common shell scripts to make it so we don't repeat ourselves so much",
    "start": "1756740",
    "end": "1763600"
  },
  {
    "text": "so environment templates this is pretty easy to understand sort of high-level",
    "start": "1763600",
    "end": "1769400"
  },
  {
    "start": "1764000",
    "end": "1799000"
  },
  {
    "text": "view so it's just a repo with a bunch of CloudFormation templates for each",
    "start": "1769400",
    "end": "1775370"
  },
  {
    "text": "environment also this makes it really easy to make new environments you just",
    "start": "1775370",
    "end": "1780910"
  },
  {
    "text": "copy the template make some changes boom you got a new environment run it in case",
    "start": "1780910",
    "end": "1787160"
  },
  {
    "text": "one of the environments needs to be recreated for any reason this is one of the goals we had there it is",
    "start": "1787160",
    "end": "1793190"
  },
  {
    "text": "confirmation just run it boom you got your environment back so service",
    "start": "1793190",
    "end": "1800870"
  },
  {
    "start": "1799000",
    "end": "1849000"
  },
  {
    "text": "templates this means we go into each service and add CloudFormation template",
    "start": "1800870",
    "end": "1808760"
  },
  {
    "text": "there for that service may be more than one template and for each environment we",
    "start": "1808760",
    "end": "1816170"
  },
  {
    "text": "have a set of environment parameters that we use with cloud formation to",
    "start": "1816170",
    "end": "1821890"
  },
  {
    "text": "parameter to fill in the parameters specific to that environment like where's the database and things like",
    "start": "1821890",
    "end": "1828170"
  },
  {
    "text": "that and so this this is where the developers and this is where DevOps",
    "start": "1828170",
    "end": "1834080"
  },
  {
    "text": "happens developers and ops team get together ops team creates the general service template based on what the",
    "start": "1834080",
    "end": "1841190"
  },
  {
    "text": "developer was talking about we try it out we iterate to play it over and over",
    "start": "1841190",
    "end": "1847160"
  },
  {
    "text": "again and get it to work so one thing that was a common theme among some of",
    "start": "1847160",
    "end": "1856100"
  },
  {
    "start": "1849000",
    "end": "1954000"
  },
  {
    "text": "the micro services is many of them use databases relational databases I like relational databases sorry uh",
    "start": "1856100",
    "end": "1865410"
  },
  {
    "text": "yeah so we had to figure out a way to",
    "start": "1865410",
    "end": "1870580"
  },
  {
    "text": "update the database schema but we didn't have the sort of synchronous sequential",
    "start": "1870580",
    "end": "1880060"
  },
  {
    "text": "sail script deployer that we used to have right this is cloud formation",
    "start": "1880060",
    "end": "1885220"
  },
  {
    "text": "you're telling it okay there's a new version of the code over here you know go do stuff and we'll wait until you're",
    "start": "1885220",
    "end": "1893320"
  },
  {
    "text": "done and it does you know it does everything eventually and you really",
    "start": "1893320",
    "end": "1899680"
  },
  {
    "text": "don't have a point where you can kind of get in there and know like the system is",
    "start": "1899680",
    "end": "1905920"
  },
  {
    "text": "in flux until it's done so we we decided",
    "start": "1905920",
    "end": "1912400"
  },
  {
    "text": "we would try this out and it worked great we would make a task just for",
    "start": "1912400",
    "end": "1917860"
  },
  {
    "text": "doing the schema update and we would create a new version of the task",
    "start": "1917860",
    "end": "1923290"
  },
  {
    "text": "definition and run the task like a single run ephemeral task on the cluster",
    "start": "1923290",
    "end": "1931080"
  },
  {
    "text": "update the database schema while the old version of the app was running and then",
    "start": "1931080",
    "end": "1936370"
  },
  {
    "text": "do the deploy this actually worked really well the the main caveat here is",
    "start": "1936370",
    "end": "1944140"
  },
  {
    "text": "that your schema changes have to be backward compatible with the previous version of the app or you'll break",
    "start": "1944140",
    "end": "1949960"
  },
  {
    "text": "things and then you know remember guys with hammers you know so the other thing",
    "start": "1949960",
    "end": "1956530"
  },
  {
    "start": "1954000",
    "end": "2046000"
  },
  {
    "text": "is secrets so you know like many of you",
    "start": "1956530",
    "end": "1962980"
  },
  {
    "text": "probably do these services we have they",
    "start": "1962980",
    "end": "1968890"
  },
  {
    "text": "have API keys to various other things you know we don't want to we want we",
    "start": "1968890",
    "end": "1975910"
  },
  {
    "text": "want all the configuration in version control but we don't want that you clear-text definitely and we don't want everybody",
    "start": "1975910",
    "end": "1981610"
  },
  {
    "text": "to know we aren't we don't want all the developers to know all of our API keys for everything right so we came upon the",
    "start": "1981610",
    "end": "1991030"
  },
  {
    "text": "solution of using Amazon kms so what we do is we encrypt the sensitive configuration",
    "start": "1991030",
    "end": "1997350"
  },
  {
    "text": "components with kms and we store the concret 'add files and get and so the",
    "start": "1997350",
    "end": "2006750"
  },
  {
    "text": "developers are able to decrypt make changes and check and commit it and push",
    "start": "2006750",
    "end": "2012450"
  },
  {
    "text": "it and the privileges are controlled by I am privileges which is great so you",
    "start": "2012450",
    "end": "2020070"
  },
  {
    "text": "can for example restrict certain developers cannot access the production secrets and the furthermore the docker",
    "start": "2020070",
    "end": "2030390"
  },
  {
    "text": "images contain the encrypted configs so it's fully self-contained our docker images have everything they need and",
    "start": "2030390",
    "end": "2038450"
  },
  {
    "text": "they last little bit is while the while the tasks while the containers are",
    "start": "2038450",
    "end": "2043650"
  },
  {
    "text": "starting up everything gets decrypted another challenge we had is we use a",
    "start": "2043650",
    "end": "2049230"
  },
  {
    "start": "2046000",
    "end": "2111000"
  },
  {
    "text": "technology called hazel caste which clusters the instances of this",
    "start": "2049230",
    "end": "2056520"
  },
  {
    "text": "application together it does things like caching and you know distributed queues distributed locks it's actually really",
    "start": "2056520",
    "end": "2063389"
  },
  {
    "text": "cool unfortunately we don't have multicast IP or any other way of really",
    "start": "2063390",
    "end": "2068909"
  },
  {
    "text": "just for the nose to discover each other and and federated to a cluster so we",
    "start": "2068910",
    "end": "2074610"
  },
  {
    "text": "came upon the solution of using console to register all the nodes of the cluster",
    "start": "2074610",
    "end": "2081620"
  },
  {
    "text": "there and we use something called container pilot and so that again it's",
    "start": "2081620",
    "end": "2089070"
  },
  {
    "text": "part of the startup of the container the container starts up registers itself registers it's outside address at the",
    "start": "2089070",
    "end": "2095790"
  },
  {
    "text": "ECS instance with console and then as it continues it does a query and says ok",
    "start": "2095790",
    "end": "2102480"
  },
  {
    "text": "what other nodes of of my type are out there ok I'll start fettering with them",
    "start": "2102480",
    "end": "2108590"
  },
  {
    "text": "so here it is in action this is sort of",
    "start": "2108590",
    "end": "2115050"
  },
  {
    "text": "our our developed branch we happen to use the git flow way of doing things I",
    "start": "2115050",
    "end": "2121050"
  },
  {
    "text": "don't know if you're familiar with that but our develop branch is a full CIA CD pipeline",
    "start": "2121050",
    "end": "2127160"
  },
  {
    "text": "and so the Jenkins pipeline bill does",
    "start": "2127160",
    "end": "2134450"
  },
  {
    "text": "the build deploys the new version 2j frog then invokes the deployment script",
    "start": "2134450",
    "end": "2142010"
  },
  {
    "text": "that goes through CloudFormation the environment parameters and the confirmation template then deploy the",
    "start": "2142010",
    "end": "2150020"
  },
  {
    "text": "containers to ECS and that pulls down the newly built image from artifactory",
    "start": "2150020",
    "end": "2158020"
  },
  {
    "text": "good stuff so some other details that we discovered along the way which might be",
    "start": "2158020",
    "end": "2163910"
  },
  {
    "start": "2159000",
    "end": "2324000"
  },
  {
    "text": "kind of interesting I mentioned this thing container pilot that's a sort of a generic entry point",
    "start": "2163910",
    "end": "2172130"
  },
  {
    "text": "tool I don't know if anyone's looked at that but that really helps quite a bit",
    "start": "2172130",
    "end": "2177860"
  },
  {
    "text": "in terms of managing the process or maybe she'll run more than one process in in inside your container I can really",
    "start": "2177860",
    "end": "2186320"
  },
  {
    "text": "help simplify that and it tremendously simplifies working with console the",
    "start": "2186320",
    "end": "2193370"
  },
  {
    "text": "other thing is logging start up and while the container is starting up your",
    "start": "2193370",
    "end": "2200230"
  },
  {
    "text": "entry point code basically you need to log that you need to know where those",
    "start": "2200230",
    "end": "2205250"
  },
  {
    "text": "logs are because when it you know when you make mistakes and you mess it up you need to go you need to be able to go",
    "start": "2205250",
    "end": "2212390"
  },
  {
    "text": "find out where that is and also application logging we happen to use log",
    "start": "2212390",
    "end": "2218990"
  },
  {
    "text": "entries so that that was a thing we had",
    "start": "2218990",
    "end": "2224870"
  },
  {
    "text": "to deal with there additionally we had some services that are Singleton's where",
    "start": "2224870",
    "end": "2230840"
  },
  {
    "text": "you can't have we couldn't have more than one of them running at a time for example we had a service that receives",
    "start": "2230840",
    "end": "2235880"
  },
  {
    "text": "incoming emails sort of you guys use JIRA so you can get a notification from",
    "start": "2235880",
    "end": "2241190"
  },
  {
    "text": "Jiri and you can say okay you know I got it and you know it ingests the email and",
    "start": "2241190",
    "end": "2247400"
  },
  {
    "text": "makes it a comment so we have a similar feature that thing you can't have more",
    "start": "2247400",
    "end": "2253340"
  },
  {
    "text": "than one of them so figuring out how to do single to services actually it's quite easy you just setup the number of",
    "start": "2253340",
    "end": "2259430"
  },
  {
    "text": "instances that you want of the task and then this idea of",
    "start": "2259430",
    "end": "2265490"
  },
  {
    "text": "promoting builds to environments so one of the one of the big things that I",
    "start": "2265490",
    "end": "2272150"
  },
  {
    "text": "always strive for is to the thing that the artifact that you run your",
    "start": "2272150",
    "end": "2279089"
  },
  {
    "text": "integration tests on all your unit tests all your integration tests and all your manual QA whatever you have that's the",
    "start": "2279089",
    "end": "2286049"
  },
  {
    "text": "thing you want to go to production with you want to put that in QA QA s-- gives you the green light you want to take",
    "start": "2286049",
    "end": "2291450"
  },
  {
    "text": "that binary thing and then put it in production because you know nobody ever has merged conflicts when merging to",
    "start": "2291450",
    "end": "2298049"
  },
  {
    "text": "master right yeah so anyway so we ended",
    "start": "2298049",
    "end": "2304650"
  },
  {
    "text": "up building a second set of Jenkins jobs for each service that where you could",
    "start": "2304650",
    "end": "2310109"
  },
  {
    "text": "select a select an image and then go to QA or go to production so we could do",
    "start": "2310109",
    "end": "2317190"
  },
  {
    "text": "our master build deploy it to QA first get the green light and then go to production so obviously uh yeah it's not",
    "start": "2317190",
    "end": "2327269"
  },
  {
    "text": "all you know there there are things that we had deal with along the way mainly in",
    "start": "2327269",
    "end": "2333599"
  },
  {
    "text": "in making our our services self-contained we ended up discovering a",
    "start": "2333599",
    "end": "2339150"
  },
  {
    "text": "lot of configuration that we didn't know we had so that's a good thing though it's a good result",
    "start": "2339150",
    "end": "2345619"
  },
  {
    "text": "like I said log entries getting the container start up in the container like",
    "start": "2345619",
    "end": "2351690"
  },
  {
    "text": "standard out in standard error to go to log entries we ended up doing a sidecar",
    "start": "2351690",
    "end": "2356849"
  },
  {
    "text": "said yeah sidecar for that as well as data dog we we we make good use of data",
    "start": "2356849",
    "end": "2364650"
  },
  {
    "text": "dog had to make more sidecars for that had to figure that out in addition to",
    "start": "2364650",
    "end": "2370940"
  },
  {
    "text": "application performance monitoring we use traceview that needed an agent as",
    "start": "2370940",
    "end": "2375960"
  },
  {
    "text": "well so a bunch of agents we needed to start also while when it was in",
    "start": "2375960",
    "end": "2384329"
  },
  {
    "text": "production we discovered that our one of our monoliths likes to open a lot of files like likes to use a lot of file",
    "start": "2384329",
    "end": "2391170"
  },
  {
    "text": "handles so we had to raise the you limits kept falling over but again really",
    "start": "2391170",
    "end": "2396380"
  },
  {
    "text": "simple with ECS it's right there in the service cloud formation template in in",
    "start": "2396380",
    "end": "2403220"
  },
  {
    "text": "that in the git repo for that service it's great so that was quite an easy fix",
    "start": "2403220",
    "end": "2409850"
  },
  {
    "text": "and so the main thing though is that deployment is really different you're no",
    "start": "2409850",
    "end": "2415460"
  },
  {
    "text": "longer running a shell script that's going over and copying things around and starting rivers and showing things down",
    "start": "2415460",
    "end": "2420800"
  },
  {
    "text": "and all that you're you're setting some stuff up in cloud formation increasing",
    "start": "2420800",
    "end": "2427280"
  },
  {
    "text": "you know bumping the rev count and then saying okay go and then it kind of",
    "start": "2427280",
    "end": "2434320"
  },
  {
    "text": "figures it out by itself so it might take a little longer you don't know where it's gonna deploy to first so kind",
    "start": "2434320",
    "end": "2441110"
  },
  {
    "text": "of going over and SS aging over to a server and like looking at the logs on that server as it's coming up forget",
    "start": "2441110",
    "end": "2448550"
  },
  {
    "text": "that it's not happening you got to set up your logs correctly and you got to",
    "start": "2448550",
    "end": "2453980"
  },
  {
    "text": "make sure everybody knows where they are so you can see if there's any kind of problems the other thing is if you have",
    "start": "2453980",
    "end": "2463460"
  },
  {
    "text": "some miss configurations you are you're",
    "start": "2463460",
    "end": "2469010"
  },
  {
    "text": "the ECS scheduler may shut down something that it thinks is unhealthy and then bring it up somewhere else and",
    "start": "2469010",
    "end": "2475400"
  },
  {
    "text": "then shut it down again and bring it up somewhere else and it will start to cycle and flap you got to have the",
    "start": "2475400",
    "end": "2481400"
  },
  {
    "text": "troubleshooting tools there so that's that's it in a nutshell",
    "start": "2481400",
    "end": "2487270"
  },
  {
    "text": "with even more detail I'll hand it over to Braddock from ops life Thank You Josh",
    "start": "2487270",
    "end": "2494480"
  },
  {
    "text": "yep",
    "start": "2494480",
    "end": "2497320"
  },
  {
    "text": "all right cool my name is static vis Witzke and i'm a solution architect on",
    "start": "2502810",
    "end": "2509690"
  },
  {
    "start": "2505000",
    "end": "2532000"
  },
  {
    "text": "ops line we provide DevOps building blocks for agile engineering teams including infrastructure management and",
    "start": "2509690",
    "end": "2518380"
  },
  {
    "text": "DevOps Culture enablement which is I think more important we have helped to",
    "start": "2518380",
    "end": "2524480"
  },
  {
    "text": "implement develop strategies for many products and services that you are using every day including we work we have been",
    "start": "2524480",
    "end": "2533780"
  },
  {
    "start": "2532000",
    "end": "2569000"
  },
  {
    "text": "working with we work on Finland's project providing configuration management and automation for several of",
    "start": "2533780",
    "end": "2541190"
  },
  {
    "text": "their applications when we started working with we work on ECS there were",
    "start": "2541190",
    "end": "2547970"
  },
  {
    "text": "three approaches to application of a deployment they were all created by",
    "start": "2547970",
    "end": "2553400"
  },
  {
    "text": "different teams each used different techniques for local development infrastructure management and pushing",
    "start": "2553400",
    "end": "2560270"
  },
  {
    "text": "releases to production although a lot of automation was in place there was a lack of unified approach a table slang we",
    "start": "2560270",
    "end": "2570710"
  },
  {
    "start": "2569000",
    "end": "2618000"
  },
  {
    "text": "believe in cloud native approach we are using cloud formation to automate almost every aspect of deployment into AWS we",
    "start": "2570710",
    "end": "2579079"
  },
  {
    "text": "have built a set of reusable cloud formation templates to help us provision infrastructure environments very quickly",
    "start": "2579079",
    "end": "2585470"
  },
  {
    "text": "in multiple accounts and regions we have automated provisioning of virtual",
    "start": "2585470",
    "end": "2591440"
  },
  {
    "text": "networking network security access control and all the services such as EC",
    "start": "2591440",
    "end": "2598250"
  },
  {
    "text": "to EC s ODS and lambda we also version",
    "start": "2598250",
    "end": "2604640"
  },
  {
    "text": "control not only clot formation code but the stack information changes are",
    "start": "2604640",
    "end": "2610609"
  },
  {
    "text": "deployed using a simple script and continuous integration tasks since we",
    "start": "2610609",
    "end": "2619640"
  },
  {
    "start": "2618000",
    "end": "2688000"
  },
  {
    "text": "are talking about containers let's talk about the reasons we picked ec s to be our container runtime",
    "start": "2619640",
    "end": "2626930"
  },
  {
    "text": "ECS solves one problem that we are always dealing with it's scalable and",
    "start": "2626930",
    "end": "2632279"
  },
  {
    "text": "quick application deployment a task of taking the code from hands of developers",
    "start": "2632279",
    "end": "2637980"
  },
  {
    "text": "and deploying it in a highly available and scalable manner in the past we had",
    "start": "2637980",
    "end": "2645480"
  },
  {
    "text": "to use configuration management tools like chef as well as orchestration frameworks like Capistrano Gradle or",
    "start": "2645480",
    "end": "2652220"
  },
  {
    "text": "some custom scripts an ECR simplifies all that just like Audia simplifies",
    "start": "2652220",
    "end": "2658829"
  },
  {
    "text": "database provisioning and management ECS clusters are easy to provision and",
    "start": "2658829",
    "end": "2664849"
  },
  {
    "text": "easier services nicely encapsulate and managed authorized applications Amazon",
    "start": "2664849",
    "end": "2673170"
  },
  {
    "text": "ec2 container service makes the most sense to use AWS because a cloud native solution is easier to manage without",
    "start": "2673170",
    "end": "2680910"
  },
  {
    "text": "acquiring all the underlying knowledge of other orchestration frameworks with",
    "start": "2680910",
    "end": "2690089"
  },
  {
    "start": "2688000",
    "end": "2698000"
  },
  {
    "text": "our in-house expertise and experience we have provided what we think is a practical approach to deploying",
    "start": "2690089",
    "end": "2695880"
  },
  {
    "text": "applications in easiest so let's talk about underlying ec2 cluster management",
    "start": "2695880",
    "end": "2703230"
  },
  {
    "start": "2698000",
    "end": "2783000"
  },
  {
    "text": "that supports easy does we have created a CloudFormation template that can",
    "start": "2703230",
    "end": "2709500"
  },
  {
    "text": "launch a fleet of servers we are using auto scaling groups to provision",
    "start": "2709500",
    "end": "2714720"
  },
  {
    "text": "clusters of AWS Linux instances running ECS agents we are able to create",
    "start": "2714720",
    "end": "2721529"
  },
  {
    "text": "clusters with different types of instances that accept different types of different profiles of applications we",
    "start": "2721529",
    "end": "2728819"
  },
  {
    "text": "can provision a memory optimized fleet to run memory heavy applications and a compute",
    "start": "2728819",
    "end": "2733920"
  },
  {
    "text": "demise fleet to run applications that can crunch numbers all the time for",
    "start": "2733920",
    "end": "2741809"
  },
  {
    "text": "configuration management we're using we also using native AWS tools cloud",
    "start": "2741809",
    "end": "2746970"
  },
  {
    "text": "formation and net framework nicely fits in our use case providing a way to",
    "start": "2746970",
    "end": "2753539"
  },
  {
    "text": "configure ECS agents as well as download and execute custom scripts all that with",
    "start": "2753539",
    "end": "2759960"
  },
  {
    "text": "a nice single CloudFormation template monitoring is also an important part of",
    "start": "2759960",
    "end": "2765319"
  },
  {
    "text": "maintaining a cluster we are deploying data log agent to every AC to instance",
    "start": "2765319",
    "end": "2770809"
  },
  {
    "text": "using cloud formation in it we have designed the solution to launch and manage an EC s task on every instance of",
    "start": "2770809",
    "end": "2779869"
  },
  {
    "text": "an entire fleet now I'd like to spend a",
    "start": "2779869",
    "end": "2785359"
  },
  {
    "start": "2783000",
    "end": "2925000"
  },
  {
    "text": "few moments on auto-scaling auto-scaling enables us to react to changes in demand",
    "start": "2785359",
    "end": "2791329"
  },
  {
    "text": "for cluster resources we scale the ec2 instances out when we notice that",
    "start": "2791329",
    "end": "2797660"
  },
  {
    "text": "resources are getting thin let's look at an example here let's start with a ecp s",
    "start": "2797660",
    "end": "2804680"
  },
  {
    "text": "cluster with just one server it has 4 CPUs and 4 gigabytes of memory we are",
    "start": "2804680",
    "end": "2811940"
  },
  {
    "text": "running 3 tasks on it each taking different amount of resources the server",
    "start": "2811940",
    "end": "2817640"
  },
  {
    "text": "is reserved in 100% at the moment because all 4 CPUs are reserved adding",
    "start": "2817640",
    "end": "2826910"
  },
  {
    "text": "more tasks to this configuration we'll leave them in a pending state until we add more resources and once we do that",
    "start": "2826910",
    "end": "2834619"
  },
  {
    "text": "they will take space on the second server at this point our CPU to the",
    "start": "2834619",
    "end": "2841460"
  },
  {
    "text": "reservation is 88% and we could start maybe one more task but not not many",
    "start": "2841460",
    "end": "2848479"
  },
  {
    "text": "more ECS provides resource utilization metric that will let us drive ec2",
    "start": "2848479",
    "end": "2855170"
  },
  {
    "text": "auto-scaling in our example we can configure it to scale out when the CPU utilization is",
    "start": "2855170",
    "end": "2862369"
  },
  {
    "text": "greater than 80% and scale in when it's less than 45% one important thing to",
    "start": "2862369",
    "end": "2870229"
  },
  {
    "text": "note is that resource utilization metric only counts running tasks while all the",
    "start": "2870229",
    "end": "2875660"
  },
  {
    "text": "pending tasks will be will not be included so now let's add a few more",
    "start": "2875660",
    "end": "2880729"
  },
  {
    "text": "tasks to the cluster at the auto-scaling configuration I just mentioned it should",
    "start": "2880729",
    "end": "2885829"
  },
  {
    "text": "have already provided an additional server for us another important fact to remember about",
    "start": "2885829",
    "end": "2892789"
  },
  {
    "text": "resource utilization trick is that it's relative and it's expressed in percentages the value of",
    "start": "2892789",
    "end": "2899390"
  },
  {
    "text": "the metric changes depending on a number of service in the cluster even when the",
    "start": "2899390",
    "end": "2904550"
  },
  {
    "text": "amount of free resources remains the same the CPU utilization with two",
    "start": "2904550",
    "end": "2910010"
  },
  {
    "text": "servers was 88% and it's 92 percent with three servers so what I'm trying to show",
    "start": "2910010",
    "end": "2917420"
  },
  {
    "text": "you is that it can be tricky to get all the values correctly now that I have",
    "start": "2917420",
    "end": "2926780"
  },
  {
    "start": "2925000",
    "end": "3007000"
  },
  {
    "text": "shown how we provide resources to run applications let's look at how we prepare our applications to run on the",
    "start": "2926780",
    "end": "2932329"
  },
  {
    "text": "ECS cluster again we're staying cloud native and using cloud formation to",
    "start": "2932329",
    "end": "2937970"
  },
  {
    "text": "manage the entire application lifecycle each application has a template included",
    "start": "2937970",
    "end": "2943550"
  },
  {
    "text": "in the source code it's parametrized so that we can deploy an application to different environments the template",
    "start": "2943550",
    "end": "2950839"
  },
  {
    "text": "creates EC to EC a service resource the easiest task definition one or more",
    "start": "2950839",
    "end": "2957500"
  },
  {
    "text": "container definitions and I am task role and if required an application elastic",
    "start": "2957500",
    "end": "2964010"
  },
  {
    "text": "or load our network load balancer the I",
    "start": "2964010",
    "end": "2969650"
  },
  {
    "text": "am task role provides access control to AWS resources for 40 applications",
    "start": "2969650",
    "end": "2976420"
  },
  {
    "text": "running containers have access to limited set of resources such as s3 buckets sqs qs + KMS keys we restrict",
    "start": "2976420",
    "end": "2985460"
  },
  {
    "text": "that access per environment so that for example containers running in a development environment can only access",
    "start": "2985460",
    "end": "2991490"
  },
  {
    "text": "development has three buckets and at the same time are forbidden from my accessing the production buckets and in",
    "start": "2991490",
    "end": "2999890"
  },
  {
    "text": "most cases this is achieved by naming conventions over configurations",
    "start": "2999890",
    "end": "3006690"
  },
  {
    "text": "we are utilizing different techniques to monitor the health of our containers for",
    "start": "3008700",
    "end": "3013890"
  },
  {
    "text": "web applications we are using a coupling between the ECS service and a load",
    "start": "3013890",
    "end": "3018930"
  },
  {
    "text": "balancer additionally for the applications that take very long time to bootstrap we have developed a simple",
    "start": "3018930",
    "end": "3026760"
  },
  {
    "text": "container the rerunning alongside an application it covers an edge case where",
    "start": "3026760",
    "end": "3033210"
  },
  {
    "text": "the load balancers health check is set to a very long time out and will not",
    "start": "3033210",
    "end": "3038520"
  },
  {
    "text": "trigger fast enough when the application is already up and running in addition to",
    "start": "3038520",
    "end": "3044579"
  },
  {
    "text": "health checks we deploy data log agents to every ec2 host and all running",
    "start": "3044579",
    "end": "3049589"
  },
  {
    "text": "applications can then submit metrics to a local stat the process we also enable",
    "start": "3049589",
    "end": "3054809"
  },
  {
    "text": "data dogs dhaka integration that provides a multitude of system level metrics for us as we have seen before we",
    "start": "3054809",
    "end": "3065040"
  },
  {
    "start": "3062000",
    "end": "3153000"
  },
  {
    "text": "are using cloud formation to manage an entire lifecycle of an application including the deployment to deploying",
    "start": "3065040",
    "end": "3072150"
  },
  {
    "text": "your release we have to update the cloud formation stack with a new parameter value that signifies the docker image",
    "start": "3072150",
    "end": "3078809"
  },
  {
    "text": "version this action requires a replacement of ECS tasks and the easiest",
    "start": "3078809",
    "end": "3085260"
  },
  {
    "text": "service performs a deployment based on the parameters that we specify for each application so let's look at another",
    "start": "3085260",
    "end": "3093270"
  },
  {
    "text": "example here here's a three node cluster with two running tasks once the",
    "start": "3093270",
    "end": "3101520"
  },
  {
    "text": "deployment is triggered the EECS service starts a rolling task replacement it",
    "start": "3101520",
    "end": "3106799"
  },
  {
    "text": "will want it will add one or more of new tasks new versions and the number of",
    "start": "3106799",
    "end": "3113309"
  },
  {
    "text": "tasks to add depends on the batch size once the new tasks become becomes that",
    "start": "3113309",
    "end": "3119880"
  },
  {
    "text": "healthy the old one will be removed and at the end we are left with the same",
    "start": "3119880",
    "end": "3126630"
  },
  {
    "text": "number of tasks all running the newest version our production deployments",
    "start": "3126630",
    "end": "3132030"
  },
  {
    "text": "ensure 100% capacity to be available and additionally we can update any stack",
    "start": "3132030",
    "end": "3138780"
  },
  {
    "text": "parameters on any deployment as they are with the application code we are able to",
    "start": "3138780",
    "end": "3144880"
  },
  {
    "text": "change the capacity update the load balancer settings or CPU and memory",
    "start": "3144880",
    "end": "3150760"
  },
  {
    "text": "requirements the ec2 container service",
    "start": "3150760",
    "end": "3156700"
  },
  {
    "start": "3153000",
    "end": "3196000"
  },
  {
    "text": "achieves what every system administrator always wanted the ability to run applications on a ephemeral cluster of",
    "start": "3156700",
    "end": "3163930"
  },
  {
    "text": "resources but try explaining this to developers and tell them they can't log",
    "start": "3163930",
    "end": "3169150"
  },
  {
    "text": "on to servers anymore everyone needs to understand that container instances are",
    "start": "3169150",
    "end": "3175060"
  },
  {
    "text": "ephemeral it's not important where they run but it's crucial that every engineer's has access to log files and",
    "start": "3175060",
    "end": "3181960"
  },
  {
    "text": "performance metrics we need to have proper monitoring in place that notifies",
    "start": "3181960",
    "end": "3187360"
  },
  {
    "text": "when issues occur and when errors do happen bat containers should be removed and then replaced with the new ones",
    "start": "3187360",
    "end": "3195990"
  },
  {
    "start": "3196000",
    "end": "3243000"
  },
  {
    "text": "another important thing is to empower developers to easily integrate their applications with ECS we need to provide",
    "start": "3196470",
    "end": "3204400"
  },
  {
    "text": "them with guidelines on creating efficient and secure docker images we",
    "start": "3204400",
    "end": "3210250"
  },
  {
    "text": "also provide them a code repository with a generic confirmation template",
    "start": "3210250",
    "end": "3215310"
  },
  {
    "text": "deployment scripts and CI CD integration examples to sum it up I hope we were all",
    "start": "3215310",
    "end": "3224080"
  },
  {
    "text": "able to show you that using cloud native tooling can deliver a consistent and",
    "start": "3224080",
    "end": "3229450"
  },
  {
    "text": "efficient application deployment in ECS with that I'd like to turn it over back",
    "start": "3229450",
    "end": "3235240"
  },
  {
    "text": "to Chris thanks Radek thanks Jeff",
    "start": "3235240",
    "end": "3245230"
  },
  {
    "start": "3243000",
    "end": "3287000"
  },
  {
    "text": "as you can see it took a partnership between engineering management platform engineering and DevOps to put our minds",
    "start": "3245230",
    "end": "3251500"
  },
  {
    "text": "together to think about a DevOps process and culture that works for everybody so",
    "start": "3251500",
    "end": "3258220"
  },
  {
    "text": "we work with successful because we brought all these people together I firmly believe that managing technology change means seeing the bigger picture",
    "start": "3258220",
    "end": "3265120"
  },
  {
    "text": "but taking small incremental steps to solve problems that are clearly defined",
    "start": "3265120",
    "end": "3270610"
  },
  {
    "text": "that have problem statement and a solution statement this actually turned out to be a cloud",
    "start": "3270610",
    "end": "3275770"
  },
  {
    "text": "native approach and super proud of the work that the team did we're hiring at",
    "start": "3275770",
    "end": "3280870"
  },
  {
    "text": "we were if anybody's interested please send me an email see it's how that we were and with that let's open it up for some questions",
    "start": "3280870",
    "end": "3288930"
  }
]