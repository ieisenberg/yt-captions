[
  {
    "start": "0",
    "end": "26000"
  },
  {
    "text": "[Music]",
    "start": "0",
    "end": "3679"
  },
  {
    "text": "hello",
    "start": "3679",
    "end": "5200"
  },
  {
    "text": "and thanks for watching how to support",
    "start": "5200",
    "end": "7839"
  },
  {
    "text": "streaming data",
    "start": "7839",
    "end": "9120"
  },
  {
    "text": "in your.net application with amazon",
    "start": "9120",
    "end": "11920"
  },
  {
    "text": "kinesis",
    "start": "11920",
    "end": "13200"
  },
  {
    "text": "i am nitind here solutions architect",
    "start": "13200",
    "end": "15360"
  },
  {
    "text": "with aws",
    "start": "15360",
    "end": "16640"
  },
  {
    "text": "and today we will be understanding how",
    "start": "16640",
    "end": "19439"
  },
  {
    "text": "kcl",
    "start": "19439",
    "end": "20480"
  },
  {
    "text": "kinesis consumer library can be",
    "start": "20480",
    "end": "23119"
  },
  {
    "text": "implemented",
    "start": "23119",
    "end": "24000"
  },
  {
    "text": "in your.net application amazon kinesis",
    "start": "24000",
    "end": "28000"
  },
  {
    "start": "26000",
    "end": "183000"
  },
  {
    "text": "data stream",
    "start": "28000",
    "end": "29039"
  },
  {
    "text": "kds is a massively scalable and durable",
    "start": "29039",
    "end": "32719"
  },
  {
    "text": "real-time data streaming service",
    "start": "32719",
    "end": "35200"
  },
  {
    "text": "kds can continuously capture gigabytes",
    "start": "35200",
    "end": "38160"
  },
  {
    "text": "of data",
    "start": "38160",
    "end": "38800"
  },
  {
    "text": "per second from hundreds of thousands of",
    "start": "38800",
    "end": "41520"
  },
  {
    "text": "sources",
    "start": "41520",
    "end": "42239"
  },
  {
    "text": "such as website click streams financial",
    "start": "42239",
    "end": "45280"
  },
  {
    "text": "transactions",
    "start": "45280",
    "end": "46480"
  },
  {
    "text": "social media feeds it logs and location",
    "start": "46480",
    "end": "50079"
  },
  {
    "text": "tracking events",
    "start": "50079",
    "end": "51920"
  },
  {
    "text": "the data collected is available in",
    "start": "51920",
    "end": "54000"
  },
  {
    "text": "milliseconds",
    "start": "54000",
    "end": "55039"
  },
  {
    "text": "to enable real-time analytics use cases",
    "start": "55039",
    "end": "58320"
  },
  {
    "text": "such as real-time dashboards real-time",
    "start": "58320",
    "end": "61359"
  },
  {
    "text": "animal detection",
    "start": "61359",
    "end": "62879"
  },
  {
    "text": "dynamic pricing and more kds",
    "start": "62879",
    "end": "66880"
  },
  {
    "text": "is an easy to administer low-cost",
    "start": "66880",
    "end": "70400"
  },
  {
    "text": "secure and durable service it supports",
    "start": "70400",
    "end": "74400"
  },
  {
    "text": "elastic scaling to match throughput rate",
    "start": "74400",
    "end": "77360"
  },
  {
    "text": "and volume",
    "start": "77360",
    "end": "78960"
  },
  {
    "text": "we can use the kinesis client library",
    "start": "78960",
    "end": "82320"
  },
  {
    "text": "kcl to build applications",
    "start": "82320",
    "end": "85520"
  },
  {
    "text": "that process data from your kinesis data",
    "start": "85520",
    "end": "88240"
  },
  {
    "text": "stream",
    "start": "88240",
    "end": "89600"
  },
  {
    "text": "kcl helps you consume and process data",
    "start": "89600",
    "end": "93600"
  },
  {
    "text": "from a kinesis data stream by taking",
    "start": "93600",
    "end": "96720"
  },
  {
    "text": "care of",
    "start": "96720",
    "end": "97600"
  },
  {
    "text": "many of the complex tasks associated",
    "start": "97600",
    "end": "100400"
  },
  {
    "text": "with",
    "start": "100400",
    "end": "100799"
  },
  {
    "text": "distributed computing these include",
    "start": "100799",
    "end": "104240"
  },
  {
    "text": "load balancing across multiple consumer",
    "start": "104240",
    "end": "106880"
  },
  {
    "text": "application instances",
    "start": "106880",
    "end": "108640"
  },
  {
    "text": "responding to consumer application",
    "start": "108640",
    "end": "110799"
  },
  {
    "text": "instance failures",
    "start": "110799",
    "end": "112479"
  },
  {
    "text": "check process records and reacting to",
    "start": "112479",
    "end": "115439"
  },
  {
    "text": "resharding",
    "start": "115439",
    "end": "116960"
  },
  {
    "text": "the kcl takes care of all of these sub",
    "start": "116960",
    "end": "120079"
  },
  {
    "text": "tasks so that you can focus your efforts",
    "start": "120079",
    "end": "123200"
  },
  {
    "text": "on",
    "start": "123200",
    "end": "123920"
  },
  {
    "text": "writing your custom processing logic",
    "start": "123920",
    "end": "127520"
  },
  {
    "text": "the kcl is a java library",
    "start": "127520",
    "end": "130640"
  },
  {
    "text": "it supports for languages other than",
    "start": "130640",
    "end": "133680"
  },
  {
    "text": "java",
    "start": "133680",
    "end": "134400"
  },
  {
    "text": "is provided using a multi-lang",
    "start": "134400",
    "end": "137520"
  },
  {
    "text": "interface called the multiland daemon",
    "start": "137520",
    "end": "141120"
  },
  {
    "text": "this daemon is a java based and",
    "start": "141120",
    "end": "144480"
  },
  {
    "text": "runs in the background when you are",
    "start": "144480",
    "end": "146480"
  },
  {
    "text": "using a kcl language",
    "start": "146480",
    "end": "148560"
  },
  {
    "text": "other than java therefore if you install",
    "start": "148560",
    "end": "152000"
  },
  {
    "text": "the kclf.net",
    "start": "152000",
    "end": "153680"
  },
  {
    "text": "and write your consumer app entirely",
    "start": "153680",
    "end": "155760"
  },
  {
    "text": "in.net",
    "start": "155760",
    "end": "156879"
  },
  {
    "text": "you still need java installed on your",
    "start": "156879",
    "end": "159200"
  },
  {
    "text": "system",
    "start": "159200",
    "end": "159920"
  },
  {
    "text": "because of the multi-lang daemon",
    "start": "159920",
    "end": "163840"
  },
  {
    "text": "before running a kcl application make",
    "start": "165120",
    "end": "167840"
  },
  {
    "text": "sure",
    "start": "167840",
    "end": "168480"
  },
  {
    "text": "that your environment is configured to",
    "start": "168480",
    "end": "170640"
  },
  {
    "text": "allow the multi-land daemon",
    "start": "170640",
    "end": "172640"
  },
  {
    "text": "to access your aws security credentials",
    "start": "172640",
    "end": "175840"
  },
  {
    "text": "i'll show you how you can configure and",
    "start": "175840",
    "end": "178480"
  },
  {
    "text": "run kcl",
    "start": "178480",
    "end": "179519"
  },
  {
    "text": "to process circuits from kds we are",
    "start": "179519",
    "end": "182480"
  },
  {
    "text": "using",
    "start": "182480",
    "end": "183200"
  },
  {
    "start": "183000",
    "end": "436000"
  },
  {
    "text": "a sample application to demonstrate this",
    "start": "183200",
    "end": "185599"
  },
  {
    "text": "feature",
    "start": "185599",
    "end": "186480"
  },
  {
    "text": "the sample application consists of two",
    "start": "186480",
    "end": "189680"
  },
  {
    "text": "projects",
    "start": "189680",
    "end": "190560"
  },
  {
    "text": "a data producer sample producer this",
    "start": "190560",
    "end": "193440"
  },
  {
    "text": "program",
    "start": "193440",
    "end": "194239"
  },
  {
    "text": "creates an amazon kinesis stream and",
    "start": "194239",
    "end": "197040"
  },
  {
    "text": "continuously",
    "start": "197040",
    "end": "198000"
  },
  {
    "text": "puts random records into it a data",
    "start": "198000",
    "end": "200800"
  },
  {
    "text": "processor",
    "start": "200800",
    "end": "201840"
  },
  {
    "text": "sample consumer a new instance of this",
    "start": "201840",
    "end": "204879"
  },
  {
    "text": "program",
    "start": "204879",
    "end": "205760"
  },
  {
    "text": "is invoked by the multi-land daemon for",
    "start": "205760",
    "end": "208879"
  },
  {
    "text": "each shard in the stream it consumes the",
    "start": "208879",
    "end": "211519"
  },
  {
    "text": "data from the share",
    "start": "211519",
    "end": "213040"
  },
  {
    "text": "if you no longer need to work with the",
    "start": "213040",
    "end": "215360"
  },
  {
    "text": "stream after running sample consumer",
    "start": "215360",
    "end": "217840"
  },
  {
    "text": "remember to delete both the amazon",
    "start": "217840",
    "end": "220879"
  },
  {
    "text": "dynamodb checkpoint table",
    "start": "220879",
    "end": "223120"
  },
  {
    "text": "and the kinesis stream in your aws",
    "start": "223120",
    "end": "225120"
  },
  {
    "text": "account",
    "start": "225120",
    "end": "226799"
  },
  {
    "text": "as mentioned earlier each kcl process",
    "start": "226799",
    "end": "230239"
  },
  {
    "text": "will receive input records from single",
    "start": "230239",
    "end": "232799"
  },
  {
    "text": "shard",
    "start": "232799",
    "end": "233680"
  },
  {
    "text": "as you can see we are here processing",
    "start": "233680",
    "end": "237360"
  },
  {
    "text": "all the records over a loop for ease of",
    "start": "237360",
    "end": "240159"
  },
  {
    "text": "use",
    "start": "240159",
    "end": "240799"
  },
  {
    "text": "i am printing the record details like",
    "start": "240799",
    "end": "243920"
  },
  {
    "text": "partition key sequence number and data",
    "start": "243920",
    "end": "246720"
  },
  {
    "text": "associated with it",
    "start": "246720",
    "end": "248480"
  },
  {
    "text": "and passing this to the main process in",
    "start": "248480",
    "end": "251519"
  },
  {
    "text": "this",
    "start": "251519",
    "end": "252000"
  },
  {
    "text": "approach the daemon spawns the",
    "start": "252000",
    "end": "254560"
  },
  {
    "text": "user-defined record processor",
    "start": "254560",
    "end": "256639"
  },
  {
    "text": "as a sub-process the multilag daemon",
    "start": "256639",
    "end": "260079"
  },
  {
    "text": "communicates with the sub-process over",
    "start": "260079",
    "end": "262160"
  },
  {
    "text": "standard input output",
    "start": "262160",
    "end": "263919"
  },
  {
    "text": "using a simple protocol and therefore",
    "start": "263919",
    "end": "267040"
  },
  {
    "text": "the record processor program can be",
    "start": "267040",
    "end": "269199"
  },
  {
    "text": "written in any language",
    "start": "269199",
    "end": "271440"
  },
  {
    "text": "at runtime there will be a one-to-one",
    "start": "271440",
    "end": "274560"
  },
  {
    "text": "correspondence between",
    "start": "274560",
    "end": "276080"
  },
  {
    "text": "a record processor a child process and",
    "start": "276080",
    "end": "279440"
  },
  {
    "text": "an amazon kinesis shard the multi-length",
    "start": "279440",
    "end": "282479"
  },
  {
    "text": "daemon",
    "start": "282479",
    "end": "283120"
  },
  {
    "text": "ensures that without any developer",
    "start": "283120",
    "end": "285840"
  },
  {
    "text": "intervention",
    "start": "285840",
    "end": "288479"
  },
  {
    "text": "now let's run this program first we'll",
    "start": "289040",
    "end": "292080"
  },
  {
    "text": "run",
    "start": "292080",
    "end": "292560"
  },
  {
    "text": "the sample producer to create a stream",
    "start": "292560",
    "end": "295120"
  },
  {
    "text": "and put records in the stream",
    "start": "295120",
    "end": "297280"
  },
  {
    "text": "as you can see my test stream is being",
    "start": "297280",
    "end": "300639"
  },
  {
    "text": "created",
    "start": "300639",
    "end": "301840"
  },
  {
    "text": "now let's go to the console and see",
    "start": "301840",
    "end": "305600"
  },
  {
    "text": "if my test stream is created we can see",
    "start": "305600",
    "end": "308320"
  },
  {
    "text": "here",
    "start": "308320",
    "end": "308960"
  },
  {
    "text": "that my stream with one open chart",
    "start": "308960",
    "end": "312320"
  },
  {
    "text": "is created",
    "start": "312320",
    "end": "315280"
  },
  {
    "text": "now we can also see that there are 10",
    "start": "316000",
    "end": "319280"
  },
  {
    "text": "records which got",
    "start": "319280",
    "end": "320560"
  },
  {
    "text": "inserted with the same shard id",
    "start": "320560",
    "end": "325840"
  },
  {
    "text": "now we'll run the bootstrap process",
    "start": "327120",
    "end": "331360"
  },
  {
    "text": "bootstrap process will run with detailed",
    "start": "332320",
    "end": "335840"
  },
  {
    "text": "mention in kcl properties file",
    "start": "335840",
    "end": "340160"
  },
  {
    "text": "so as you",
    "start": "344639",
    "end": "347840"
  },
  {
    "text": "at the same time there will be a",
    "start": "349039",
    "end": "352080"
  },
  {
    "text": "dynamodb",
    "start": "352080",
    "end": "353199"
  },
  {
    "text": "table created with read and write",
    "start": "353199",
    "end": "355759"
  },
  {
    "text": "capacity",
    "start": "355759",
    "end": "356720"
  },
  {
    "text": "of 10 which will act as",
    "start": "356720",
    "end": "360560"
  },
  {
    "text": "a checkpoint table also",
    "start": "360560",
    "end": "364240"
  },
  {
    "text": "as you can see that as and when",
    "start": "364240",
    "end": "367840"
  },
  {
    "text": "the records are being picked it would be",
    "start": "367840",
    "end": "370880"
  },
  {
    "text": "printed out in the console",
    "start": "370880",
    "end": "375600"
  },
  {
    "text": "an example would be that",
    "start": "377120",
    "end": "380160"
  },
  {
    "text": "the processor",
    "start": "380160",
    "end": "384000"
  },
  {
    "text": "data is test data iphone 9 and",
    "start": "384000",
    "end": "387680"
  },
  {
    "text": "you can see the sequence number is also",
    "start": "387680",
    "end": "389440"
  },
  {
    "text": "printed and",
    "start": "389440",
    "end": "390960"
  },
  {
    "text": "the shard id is also printed",
    "start": "390960",
    "end": "395840"
  },
  {
    "text": "as you can see that kcl is still running",
    "start": "397759",
    "end": "401600"
  },
  {
    "text": "but in sleeping state as current stream",
    "start": "401600",
    "end": "404960"
  },
  {
    "text": "shard",
    "start": "404960",
    "end": "405440"
  },
  {
    "text": "has no record to process",
    "start": "405440",
    "end": "409039"
  },
  {
    "text": "i showed you how kcl can be used",
    "start": "409039",
    "end": "412080"
  },
  {
    "text": "to retrieve records from amazon kinesis",
    "start": "412080",
    "end": "415440"
  },
  {
    "text": "data stream you can now use kcl",
    "start": "415440",
    "end": "418560"
  },
  {
    "text": "to create your own application that",
    "start": "418560",
    "end": "420880"
  },
  {
    "text": "process data",
    "start": "420880",
    "end": "422080"
  },
  {
    "text": "from kin amazon kinesis data streams",
    "start": "422080",
    "end": "425520"
  },
  {
    "text": "i hope you enjoyed this video and found",
    "start": "425520",
    "end": "428400"
  },
  {
    "text": "this video",
    "start": "428400",
    "end": "429120"
  },
  {
    "text": "informative thanks for watching",
    "start": "429120",
    "end": "436400"
  },
  {
    "text": "you",
    "start": "436400",
    "end": "438479"
  }
]