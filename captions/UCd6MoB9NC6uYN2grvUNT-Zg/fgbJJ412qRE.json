[
  {
    "start": "0",
    "end": "32000"
  },
  {
    "text": "good morning everybody I'm very impressed with the turnout given the given the festivities last night so",
    "start": "79",
    "end": "6779"
  },
  {
    "text": "thank you very much for we couldn't let the feedback thank you okay",
    "start": "6779",
    "end": "12420"
  },
  {
    "text": "thanks everybody for coming and we're going to talk to you today about some best practices for configuring security",
    "start": "12420",
    "end": "19560"
  },
  {
    "text": "and monitoring your Amazon CloudFront distributions very privileged to be joined by a cherie wong anton Ragland",
    "start": "19560",
    "end": "27000"
  },
  {
    "text": "and Efrain foreign tips who will be giving you some of those details i'm going to start by giving you a little",
    "start": "27000",
    "end": "33660"
  },
  {
    "start": "32000",
    "end": "32000"
  },
  {
    "text": "bit of context regarding how content how cloud front delivers content and some of",
    "start": "33660",
    "end": "38940"
  },
  {
    "text": "the terminology that we'll use throughout the throughout the presentation and give you a little bit of explanation about just have some of",
    "start": "38940",
    "end": "45210"
  },
  {
    "text": "the some of our routing works sure we will talk to you about configuring your cache on cloud front Anton's going to",
    "start": "45210",
    "end": "52230"
  },
  {
    "text": "discuss measuring your performance with with real user monitoring and maybe you shouldn't be talking about rum this",
    "start": "52230",
    "end": "57300"
  },
  {
    "text": "early in the morning but we're going to go for that anyway and finally Efrain will be talking about",
    "start": "57300",
    "end": "62579"
  },
  {
    "text": "stopping malicious viewers with cloud front and the AWS laughs so before we",
    "start": "62579",
    "end": "70979"
  },
  {
    "start": "69000",
    "end": "69000"
  },
  {
    "text": "get too far into it I want to tell you a couple of terms that we use within within cloud front and just what they",
    "start": "70979",
    "end": "76830"
  },
  {
    "text": "mean so we're talking about a viewer from the cloud front perspective it's it's basically a it's we like to think",
    "start": "76830",
    "end": "84060"
  },
  {
    "text": "of it as a present person but ultimately it's a device generally on a on on a",
    "start": "84060",
    "end": "91470"
  },
  {
    "text": "consumer viewer network of some sort such as in the US Comcast or ATT mobile",
    "start": "91470",
    "end": "96590"
  },
  {
    "text": "so it could be a mobile device or a desktop some sort of Internet connected",
    "start": "96590",
    "end": "101820"
  },
  {
    "text": "device like a smart TV or an increasing number of IOT devices so that that",
    "start": "101820",
    "end": "106890"
  },
  {
    "text": "viewer is kind of the consumer and the end consumer of the content the idea is that is not content then going to some",
    "start": "106890",
    "end": "112530"
  },
  {
    "text": "other thing and when the contact is to that device it's being rendered processed downloaded process you don't",
    "start": "112530",
    "end": "117869"
  },
  {
    "text": "used what have you our cloud front pops is our network of 68 edge locations",
    "start": "117869",
    "end": "123270"
  },
  {
    "text": "spread throughout the world located in data centers in major metropolitan areas",
    "start": "123270",
    "end": "128910"
  },
  {
    "text": "these differ from the AWS regions in that the whole point of a of a cd8 of",
    "start": "128910",
    "end": "137610"
  },
  {
    "text": "a cloud front pop is to be close to other networks and other viewers so by definition those pops need to be in",
    "start": "137610",
    "end": "144180"
  },
  {
    "text": "cities and in generally in high-rise buildings right next to where all sorts of other carriers have their equipments",
    "start": "144180",
    "end": "150420"
  },
  {
    "text": "we can connect to them and deliver content to your viewers as quickly as possible in physical terms they tend to",
    "start": "150420",
    "end": "156870"
  },
  {
    "text": "be several racks of servers and network equipment and they are the they are the",
    "start": "156870",
    "end": "162120"
  },
  {
    "text": "actual endpoint that terminates that viewer connection so when your viewers are connecting to cloud front they are actually having that connection",
    "start": "162120",
    "end": "168060"
  },
  {
    "text": "terminated in one of those locations in the metropolitan area such as in Atlanta or San Francisco or Chicago so each of",
    "start": "168060",
    "end": "178680"
  },
  {
    "start": "177000",
    "end": "177000"
  },
  {
    "text": "these locations is is more or less identical and the idea behind the CDN is",
    "start": "178680",
    "end": "183930"
  },
  {
    "text": "that is that the location that you pick is is it's relevant from a performance",
    "start": "183930",
    "end": "189630"
  },
  {
    "text": "standpoint but it's not relevant from a Content standpoint so whichever location you pick you want to pick the one that",
    "start": "189630",
    "end": "195360"
  },
  {
    "text": "provides you with the best performance but they all look the same in terms of the services and the content",
    "start": "195360",
    "end": "201329"
  },
  {
    "text": "that they provide but that location selection is critical because from the",
    "start": "201329",
    "end": "206430"
  },
  {
    "text": "viewer perspective as I said minimizing the latency and maximizing the throughput is is imperative and that's a",
    "start": "206430",
    "end": "213000"
  },
  {
    "text": "lot of the work that we do at cloud front and we have multiple teams dedicated just figuring out how to consistently get that get that content",
    "start": "213000",
    "end": "220170"
  },
  {
    "text": "delivered by the best pop for each individual viewer and we'll talk a bit about how we make those decisions and",
    "start": "220170",
    "end": "225450"
  },
  {
    "text": "why sometimes it seems like we make and the decision you wouldn't think would be",
    "start": "225450",
    "end": "230489"
  },
  {
    "text": "intuitively obvious from the classroom perspective obviously the customer experience is of paramount importance to",
    "start": "230489",
    "end": "237269"
  },
  {
    "text": "us but in addition to that availability is our is our is our second priority",
    "start": "237269",
    "end": "243120"
  },
  {
    "text": "only to security which is for all of AWS always our top priority but in the event that a location is is unavailable we",
    "start": "243120",
    "end": "250470"
  },
  {
    "text": "want to be able want to you know quick as quickly make sure that viewers are not routed away from that location to",
    "start": "250470",
    "end": "255989"
  },
  {
    "text": "another location in addition we're able to manage capacity so you know in in",
    "start": "255989",
    "end": "261299"
  },
  {
    "text": "certain metropolitan areas such as New York I believe we have a or for edge locations so being able to",
    "start": "261299",
    "end": "267460"
  },
  {
    "text": "detect saying well this this this but this particular location in New York might be might be busier so being able",
    "start": "267460",
    "end": "272469"
  },
  {
    "text": "to move traffic between locations is critical in terms of managing our capacity and maximizing that and that",
    "start": "272469",
    "end": "277870"
  },
  {
    "text": "customer experience and finally location we'll talk a bit more about how location",
    "start": "277870",
    "end": "283780"
  },
  {
    "text": "factors in but the location is is is clearly important so we talked about",
    "start": "283780",
    "end": "289479"
  },
  {
    "start": "288000",
    "end": "288000"
  },
  {
    "text": "routing and there's routing can mean multiple things depending on your context if you're a network engineer",
    "start": "289479",
    "end": "295020"
  },
  {
    "text": "routing generally means packet routing packet routing I don't like to call it dumb but it's very simple it's designed",
    "start": "295020",
    "end": "302139"
  },
  {
    "text": "to move huge volumes of traffic very quickly and be able to make decisions at terabit speeds in very in a very small",
    "start": "302139",
    "end": "309909"
  },
  {
    "text": "physical footprint so basically the only thing it takes into account is the destination address so if this is our",
    "start": "309909",
    "end": "317219"
  },
  {
    "text": "our viewer and this is cloud front and this is the cloud front address that you",
    "start": "317219",
    "end": "322930"
  },
  {
    "text": "were given and this is the blob known as the Internet the client is basically saying I want to connect to to this address and the",
    "start": "322930",
    "end": "330520"
  },
  {
    "text": "internet takes care of just routing routing it there there's no notion of capacity management there's certainly manual actions that network engineers",
    "start": "330520",
    "end": "337539"
  },
  {
    "text": "can take in some course capacity management but generally speaking a link could be entirely congested and the",
    "start": "337539",
    "end": "343779"
  },
  {
    "text": "network will just keep on trying to cram packets down it because it doesn't have the context of the full path to be able",
    "start": "343779",
    "end": "349270"
  },
  {
    "text": "to to intelligently manage that capacity that's just not the way the global routing algorithms work so but how do",
    "start": "349270",
    "end": "357069"
  },
  {
    "text": "you actually get this this address because these IP addresses they that you you know we see them as software",
    "start": "357069",
    "end": "364509"
  },
  {
    "text": "developers and engineers but we never want to expose that to our viewers directly this is where we request",
    "start": "364509",
    "end": "370389"
  },
  {
    "text": "routing comes into place and this is again when you know when we're talking amongst the cloud front team because in",
    "start": "370389",
    "end": "375550"
  },
  {
    "text": "within Amazon the the actual network engineering team is separate from the from the service team which has cloud",
    "start": "375550",
    "end": "380740"
  },
  {
    "text": "front that manages the application on top of the network the vast majority of the time we're talking about routing its",
    "start": "380740",
    "end": "385960"
  },
  {
    "text": "request routing and in those cases we are able to do because of the fact that that happens at a higher layer we're",
    "start": "385960",
    "end": "391930"
  },
  {
    "text": "able to take into account the latency of the end-to-end path the throughput that's available the capacity of our of",
    "start": "391930",
    "end": "397599"
  },
  {
    "text": "our locations in those regions as well as the geography in the event that we don't have some of",
    "start": "397599",
    "end": "403069"
  },
  {
    "text": "those other metrics available it's generally done at the DNS layer or potentially higher depending on",
    "start": "403069",
    "end": "408919"
  },
  {
    "text": "depending on the application so in practice what this looks like excuse me",
    "start": "408919",
    "end": "414469"
  },
  {
    "start": "412000",
    "end": "412000"
  },
  {
    "text": "is you have a viewer and they will do a DNS request now I've simplified the DNS lookup here but what happens is that the",
    "start": "414469",
    "end": "421639"
  },
  {
    "text": "customer will ask for or the viewer will ask for customer comm which will then go",
    "start": "421639",
    "end": "427069"
  },
  {
    "text": "to their ISPs recursive name server that will then eventually contact the cloud",
    "start": "427069",
    "end": "432739"
  },
  {
    "text": "front fleet of DNS servers that actually is part of our part of our route 53 service we make heavy use of route 53 as",
    "start": "432739",
    "end": "439459"
  },
  {
    "text": "part of cloud front this server will decide based on some information we'll talk about in a minute which address",
    "start": "439459",
    "end": "445489"
  },
  {
    "text": "we're using that notional address of one dot one dot one dot one which think it's passed back cached for a certain period",
    "start": "445489",
    "end": "451039"
  },
  {
    "text": "of time in this server give it to the viewer which then goes uses that same",
    "start": "451039",
    "end": "456110"
  },
  {
    "text": "path that same well that work that packet routing logic we talked about to actually get the content so first of all",
    "start": "456110",
    "end": "461779"
  },
  {
    "text": "it figures out which address to contact and then it uses the Internet packet routing to actually get the content but",
    "start": "461779",
    "end": "469099"
  },
  {
    "text": "here's where things can get can go a little bit sideways sometimes so if we have our user in we have a user an",
    "start": "469099",
    "end": "474800"
  },
  {
    "text": "example user in Chicago now both from a geography perspective as well as a speed of light perspective and assuming that",
    "start": "474800",
    "end": "480949"
  },
  {
    "text": "that there's a that in the normal case what we would want a user in Chicago to",
    "start": "480949",
    "end": "487459"
  },
  {
    "text": "be directed to one of our our Chicago edge locations makes perfect sense but",
    "start": "487459",
    "end": "493069"
  },
  {
    "text": "in this case the user the viewer sorry I should have made that viewer that's my mistake so we're talking about a viewer",
    "start": "493069",
    "end": "499279"
  },
  {
    "text": "here the viewer is there is P's DNS server is actually in San Francisco",
    "start": "499279",
    "end": "504369"
  },
  {
    "text": "right so what happens is the viewer asks the the ISPs DNS server for customer",
    "start": "504369",
    "end": "510709"
  },
  {
    "text": "comm that requests then goes to the route 53 infrastructure but the route 53 infrastructure doesn't see the customers",
    "start": "510709",
    "end": "518089"
  },
  {
    "text": "IP address we can't identify what that customer is what we see is the ISPs DNS server so we say hey great we've got",
    "start": "518089",
    "end": "524779"
  },
  {
    "text": "locations in the San Francisco area we send the app we send the address of one of our Palo Alto locations so that goes",
    "start": "524779",
    "end": "531829"
  },
  {
    "text": "back the IP address goes back to the viewer of the Palo Alto location and now this viewer in Chicago is getting a higher",
    "start": "531829",
    "end": "537570"
  },
  {
    "text": "latency experience than they would otherwise because they're talking to that edge location in Palo Alto instead",
    "start": "537570",
    "end": "542910"
  },
  {
    "text": "of the one in Chicago so what happened this is what we refer to within",
    "start": "542910",
    "end": "548850"
  },
  {
    "start": "546000",
    "end": "546000"
  },
  {
    "text": "CloudFront as a divergent resolver so ideally and many ISPs do this but there",
    "start": "548850",
    "end": "554700"
  },
  {
    "text": "are there are situations where in certain in certain networks and certain types of footprints you have a wide",
    "start": "554700",
    "end": "560340"
  },
  {
    "text": "distribution of viewers using a DNS server might be across multiple networks",
    "start": "560340",
    "end": "566460"
  },
  {
    "text": "it might be across multiple geographies but it results in this kind of this kind",
    "start": "566460",
    "end": "571740"
  },
  {
    "text": "of sub optimal routing a common example of the of this is the is the distributed",
    "start": "571740",
    "end": "577410"
  },
  {
    "text": "corporate network that might for example have a lot of their infrastructure in oh I don't know Seattle which might result",
    "start": "577410",
    "end": "583260"
  },
  {
    "text": "in all of their requests when they're in Vegas being served out of Seattle I don't know just random example anyway",
    "start": "583260",
    "end": "588350"
  },
  {
    "text": "what can be done so the obvious answer is to use a local resolver but given",
    "start": "588350",
    "end": "594450"
  },
  {
    "text": "that many of you like we have you know you know hundreds of thousands and millions of users getting each of them",
    "start": "594450",
    "end": "599730"
  },
  {
    "text": "to change each of their connections may not be practical it could be depends on your application that could be a practical application but another option",
    "start": "599730",
    "end": "607350"
  },
  {
    "text": "is to use a resolver in the supports the e DNS zero clients subnet extension area",
    "start": "607350",
    "end": "615650"
  },
  {
    "start": "615000",
    "end": "615000"
  },
  {
    "text": "so this is an extension that was developed Oh several years several years",
    "start": "615650",
    "end": "620940"
  },
  {
    "text": "ago and the idea is that that it uses the e DNS extension protocol as part of DNS to provide a portion of the actual",
    "start": "620940",
    "end": "629900"
  },
  {
    "text": "client client IP request the the IP address or the subnet so the flash 24",
    "start": "629900",
    "end": "636360"
  },
  {
    "text": "subnet of the viewer requesting the address no client-side resolver and",
    "start": "636360",
    "end": "642570"
  },
  {
    "text": "modifications are necessary this is purely an extension that exists between the ISPs recursive resolver and the",
    "start": "642570",
    "end": "651750"
  },
  {
    "text": "cloud front are at fifty-three authoritative servers some common open resolvers such as the google 8.8.8.8 any",
    "start": "651750",
    "end": "659580"
  },
  {
    "text": "cast resolver support it and so in those cases if you do have",
    "start": "659580",
    "end": "664860"
  },
  {
    "text": "customers who who have that problem you can transfer them from that previous state of affairs to this one area so",
    "start": "664860",
    "end": "672800"
  },
  {
    "text": "again you have to use the viewer in Chicago who's in the Chicago edge location and they hit the Google Public",
    "start": "672800",
    "end": "678510"
  },
  {
    "text": "DNS now again that that that server may not be in Mountain View because it's any casted with not really talking about any",
    "start": "678510",
    "end": "684960"
  },
  {
    "text": "cast here but but the point is that it's a it's a DNS server that supports ECS so",
    "start": "684960",
    "end": "692070"
  },
  {
    "text": "now that DNS query may come from Mountain View California but it includes",
    "start": "692070",
    "end": "698280"
  },
  {
    "text": "the subnet of the IP address of this user now we make a large number of",
    "start": "698280",
    "end": "704370"
  },
  {
    "text": "latency measurements on a very regular basis from a lot of properties including the Amazon retail properties where we",
    "start": "704370",
    "end": "710010"
  },
  {
    "text": "constantly measure measure of performance based on these the the traffic from from customer from viewer",
    "start": "710010",
    "end": "719130"
  },
  {
    "text": "networks so we have a huge corpus of data in terms of which pops perform which of our locations will perform best",
    "start": "719130",
    "end": "724410"
  },
  {
    "text": "for for which viewers so based on that we are able to look look up that that",
    "start": "724410",
    "end": "730020"
  },
  {
    "text": "subnet and say okay well this came from Mountain View but actually we know this",
    "start": "730020",
    "end": "735330"
  },
  {
    "text": "user is in Chicago due to the duty ECS so then that bubbles all the way back it sends back the",
    "start": "735330",
    "end": "740850"
  },
  {
    "text": "address of the Chicago pop and now the user is having this nice low latency",
    "start": "740850",
    "end": "746250"
  },
  {
    "text": "high throughput connection to the local network to the local pop as opposed to",
    "start": "746250",
    "end": "751380"
  },
  {
    "text": "going globally go glowy going to California so fundamentally the key",
    "start": "751380",
    "end": "759210"
  },
  {
    "text": "takeaway here I'd like to leave you with as we get to Cherie talking about configuring your distribution is where",
    "start": "759210",
    "end": "765180"
  },
  {
    "text": "your router depends on a number of factors your network your geographic location as well as the the status of",
    "start": "765180",
    "end": "771570"
  },
  {
    "text": "our individual locations DNS is an imperfect mechanism for this you know",
    "start": "771570",
    "end": "777120"
  },
  {
    "text": "these kinds of problems you would say why would you use DNS the ubiquity of DNS is being used being in literally",
    "start": "777120",
    "end": "783540"
  },
  {
    "text": "every device out there is really challenging you know",
    "start": "783540",
    "end": "788850"
  },
  {
    "text": "a benefit to overcome so we put up with a lot of a lot of challenges because of it but if you do have customers who are",
    "start": "788850",
    "end": "795899"
  },
  {
    "text": "having who are having routing problems getting them to use ECS labelled resolvers excuse me will significantly",
    "start": "795899",
    "end": "802949"
  },
  {
    "text": "improve their experience with that it's head off to cherie wrong the senior",
    "start": "802949",
    "end": "808019"
  },
  {
    "text": "engineering manager i'm claude from thanks ray good morning guys the first",
    "start": "808019",
    "end": "818399"
  },
  {
    "text": "question i have for you guys is why would we cash our whole raison d'être for this is what i call or what i'm",
    "start": "818399",
    "end": "825089"
  },
  {
    "text": "gonna give you as to laws and the two themes that will resonate throughout my presentation the first one is we want",
    "start": "825089",
    "end": "830819"
  },
  {
    "text": "better performance for your viewers by serving it from our edge locations and number two we want less load on your",
    "start": "830819",
    "end": "836130"
  },
  {
    "text": "origin what should you expect most of you have probably used cloud front or",
    "start": "836130",
    "end": "842040"
  },
  {
    "text": "CDN I wanted to show you how we cache what we do with your request and how you can dictate what we cache and for how",
    "start": "842040",
    "end": "849120"
  },
  {
    "text": "long then we'll talk about a couple of best practices first of all alex was",
    "start": "849120",
    "end": "855839"
  },
  {
    "start": "853000",
    "end": "853000"
  },
  {
    "text": "mentioning we have 68 edge locations which I've kind of put only a couple of them on the bottom of the screen in",
    "start": "855839",
    "end": "862560"
  },
  {
    "text": "green all of these edge locations or points of presence or what we call pops have to reach your origin for content",
    "start": "862560",
    "end": "868759"
  },
  {
    "text": "the blue layer here is something that is new and that we just announced this week we've created regional edge caches part",
    "start": "868759",
    "end": "876420"
  },
  {
    "text": "of the reason we did this is we are getting a lot of customer feedback around as your network is growing in terms of the number of pops you have I'm",
    "start": "876420",
    "end": "882720"
  },
  {
    "text": "getting more and more hits to my origin and that violates our law number two that we just mentioned and so we created",
    "start": "882720",
    "end": "888569"
  },
  {
    "text": "these regional edge caches where multiple edge locations will now go into one of nine different regions which will",
    "start": "888569",
    "end": "895350"
  },
  {
    "text": "then make requests to your origin so this means we're a request that are coming in if it's the first time we've",
    "start": "895350",
    "end": "902160"
  },
  {
    "text": "seen those requests and the object is not in cache they will then ask our regional edge caches for your content",
    "start": "902160",
    "end": "907889"
  },
  {
    "text": "which will then send one request to your origin her regional edge cache so in",
    "start": "907889",
    "end": "914370"
  },
  {
    "text": "this case instead of having eight different requests to your origin you now just get those two",
    "start": "914370",
    "end": "920480"
  },
  {
    "start": "920000",
    "end": "920000"
  },
  {
    "text": "so what happens within each edge location well first of all whenever your request comes in we asked a simple",
    "start": "920480",
    "end": "925910"
  },
  {
    "text": "question is it in our cache if not we have to go and fetch it from your Regional Education and your origin if it",
    "start": "925910",
    "end": "931220"
  },
  {
    "text": "is in cash is it expired if not fantastic but if it is now we have to go",
    "start": "931220",
    "end": "936859"
  },
  {
    "text": "and revalidate with your origin so we're gonna send a conditional get to your origin and if modified since or if none",
    "start": "936859",
    "end": "942679"
  },
  {
    "text": "match depending on if you're using less modified or an e-tag your origin will respond with a 304 it hasn't been",
    "start": "942679",
    "end": "948589"
  },
  {
    "text": "modified go ahead and serve it out of cash or a 200 and here's the new object we'll cash it and then we'll respond to",
    "start": "948589",
    "end": "955220"
  },
  {
    "text": "the viewer so let's talk about this green box a little bit how do we actually cash or rather how do we",
    "start": "955220",
    "end": "961399"
  },
  {
    "start": "960000",
    "end": "960000"
  },
  {
    "text": "generate a cash game we used your host header your d 1 2 3 cloud front net or",
    "start": "961399",
    "end": "966919"
  },
  {
    "text": "your cname example.com to create a canonical URL you remove all the query strings our protocol and add the",
    "start": "966919",
    "end": "973220"
  },
  {
    "text": "accept-encoding header which effectively filters down to gzip and identity for every single object we create an",
    "start": "973220",
    "end": "979850"
  },
  {
    "text": "individual cache identity key which is your canonical URL and all the very parameters that you specified in your",
    "start": "979850",
    "end": "986119"
  },
  {
    "text": "cache behavior we'll talk about that in a second every object we have hierarchical cache keys so we also have",
    "start": "986119",
    "end": "992449"
  },
  {
    "text": "a base cache identity key which is a hash of your D 1-2-3 clarinet concatenated with the accept-encoding",
    "start": "992449",
    "end": "998569"
  },
  {
    "text": "header we do that so that when you ask us to invalidate objects we can easily go in and invalidate all the variants of",
    "start": "998569",
    "end": "1005679"
  },
  {
    "text": "that object as well so how would you",
    "start": "1005679",
    "end": "1011379"
  },
  {
    "text": "tell us what to cache and for how long you can use the expires headers this is",
    "start": "1011379",
    "end": "1017470"
  },
  {
    "start": "1015000",
    "end": "1015000"
  },
  {
    "text": "part of HTTP 1.0 this does we do honor the expires header but it does come with a couple of different gotchas it's a",
    "start": "1017470",
    "end": "1024699"
  },
  {
    "text": "fixed point in time the accuracy relies on clock synchronization and if you're using an s3 origin it's typically a",
    "start": "1024699",
    "end": "1031089"
  },
  {
    "text": "value that was set by somebody when you updated the oyster when you first uploaded the object to s3 so you can",
    "start": "1031089",
    "end": "1037720"
  },
  {
    "text": "actually have a last modified date that is after an expires date and so those",
    "start": "1037720",
    "end": "1043298"
  },
  {
    "text": "are a couple of different things that we warned about and so it may not be something that you necessarily want to use more importantly most of the time",
    "start": "1043299",
    "end": "1050860"
  },
  {
    "text": "you want invalidate or you have an object expire in a relative point of time from when the viewer",
    "start": "1050860",
    "end": "1056070"
  },
  {
    "text": "actually asked for it so that brings us to cache control you can set cache",
    "start": "1056070",
    "end": "1062070"
  },
  {
    "start": "1058000",
    "end": "1058000"
  },
  {
    "text": "control directives that give you much more fine-grained much more fine-grained control over exactly what is cached and",
    "start": "1062070",
    "end": "1068399"
  },
  {
    "text": "for how long and in which location so if you were to set max-age which is in",
    "start": "1068399",
    "end": "1073409"
  },
  {
    "text": "seconds so in this case 300 or 5 minutes we would cache that object for five minutes and also the browser can cache",
    "start": "1073409",
    "end": "1079649"
  },
  {
    "text": "that object for five minutes but if you think about Mac's age and s max age the",
    "start": "1079649",
    "end": "1085169"
  },
  {
    "text": "s max change will apply to the shared edge cache or essentially cloud front and max age will apply to your browser",
    "start": "1085169",
    "end": "1090240"
  },
  {
    "text": "so you can actually have a browser cache for a different period of time than CloudFront this is specifically useful",
    "start": "1090240",
    "end": "1096720"
  },
  {
    "text": "for customers like display ad for display ad use cases so you may not want",
    "start": "1096720",
    "end": "1103110"
  },
  {
    "text": "the browser to actually cache your ad and because you want to actually serve from an education to be able to get a",
    "start": "1103110",
    "end": "1108690"
  },
  {
    "text": "count of exactly how many times it's been rendered so in this case you can set max H to 0 and set the s max H to a",
    "start": "1108690",
    "end": "1115080"
  },
  {
    "text": "large period of time or in this case one day you can go to your clapeyron access logs to know how many times that object is served but you don't have to hit your",
    "start": "1115080",
    "end": "1121230"
  },
  {
    "text": "origin and so here a couple of examples",
    "start": "1121230",
    "end": "1126600"
  },
  {
    "start": "1124000",
    "end": "1124000"
  },
  {
    "text": "of what you could set cache control headers to if you have static assets or media fragments that don't change very",
    "start": "1126600",
    "end": "1132240"
  },
  {
    "text": "often you can set it to a very long period of time or in this case one year you have live streaming manifests we're",
    "start": "1132240",
    "end": "1138870"
  },
  {
    "text": "going to talk about dynamic content in just a second but you can cache it and you can set that cache period to be",
    "start": "1138870",
    "end": "1143909"
  },
  {
    "text": "something that's very low from zero two seconds etc and lastly when you're thinking about login landing pages you",
    "start": "1143909",
    "end": "1150470"
  },
  {
    "text": "can still cache those assets and in this case what we've done is we said if you",
    "start": "1150470",
    "end": "1156330"
  },
  {
    "text": "have a cookie set such that you have some user information or a session ID don't cache it but otherwise catch it",
    "start": "1156330",
    "end": "1161549"
  },
  {
    "text": "for 30 seconds the set cookie is also important because it tells cloud front",
    "start": "1161549",
    "end": "1166860"
  },
  {
    "text": "to strip the cookie header so that you don't run the risk of leaking session IDs across users dynamic content most of",
    "start": "1166860",
    "end": "1174539"
  },
  {
    "start": "1172000",
    "end": "1172000"
  },
  {
    "text": "you will think dynamic content is really not catchable but it it is and we want to reduce the load to your origin law number two in this case what you can do",
    "start": "1174539",
    "end": "1182279"
  },
  {
    "text": "is you can set no cache or a max age of zero which essentially means we'll cache but every single time we get a request",
    "start": "1182279",
    "end": "1187909"
  },
  {
    "text": "for it we will send that conditional get to the origin is this the latest object if not please send us the latest one this will reduce the load to your origin",
    "start": "1187909",
    "end": "1194989"
  },
  {
    "text": "or the amount of times you have to transfer that data from your origin and if you do have content that you don't",
    "start": "1194989",
    "end": "1201169"
  },
  {
    "text": "want stored at all at a cloud for an edge location you can use no store or private the difference is private does",
    "start": "1201169",
    "end": "1206659"
  },
  {
    "text": "allow your browser to cache that so now",
    "start": "1206659",
    "end": "1212359"
  },
  {
    "text": "that you've seen how we cache how you can control it how do you manage it in cloud front you can create cache",
    "start": "1212359",
    "end": "1218600"
  },
  {
    "text": "behaviors cache behaviors are different cache configurations that are based off of the URL file path or in this case I",
    "start": "1218600",
    "end": "1224749"
  },
  {
    "text": "have a screenshot of those going through your requests coming through your images file path and so you'll see at the",
    "start": "1224749",
    "end": "1232340"
  },
  {
    "text": "bottom hey we have some minimum TTL maximum details how does that work with Max age and s max age if you set max age",
    "start": "1232340",
    "end": "1241580"
  },
  {
    "start": "1238000",
    "end": "1238000"
  },
  {
    "text": "and X max age or expires in between our min and Max will use it if it goes outside of the range your cache behavior",
    "start": "1241580",
    "end": "1246980"
  },
  {
    "text": "takes over and if you don't specify message at all we'll use the default TTL that you specified in your cache",
    "start": "1246980",
    "end": "1252169"
  },
  {
    "text": "behavior so a couple of different tips",
    "start": "1252169",
    "end": "1258080"
  },
  {
    "text": "that we wanted to share with you the first one is we do cache errors that are coming from your origin we we get",
    "start": "1258080",
    "end": "1265879"
  },
  {
    "start": "1260000",
    "end": "1260000"
  },
  {
    "text": "overworked and sometimes your origin will get overworked as well it needs a break so what you can do is for any",
    "start": "1265879",
    "end": "1272239"
  },
  {
    "text": "error that RNA HTTP error that is coming back from an origin you can set a custom error page you can change the response code and we can cache that for a certain",
    "start": "1272239",
    "end": "1279200"
  },
  {
    "text": "period of time so in this case if you're getting a 404 error page or a 404 error from your HTTP from your origin it may",
    "start": "1279200",
    "end": "1287389"
  },
  {
    "text": "mean that there's a bad link up there and you don't necessarily want your origin to take that load so you can set",
    "start": "1287389",
    "end": "1292970"
  },
  {
    "text": "you can have a custom error page and you can set this we can cache that response for a longer period of time or in this",
    "start": "1292970",
    "end": "1299419"
  },
  {
    "text": "case an hour but if you're getting a 504 or gateway timeout from your origin you",
    "start": "1299419",
    "end": "1304850"
  },
  {
    "text": "can set that caching time period to be much lower or as much time as you need your origin to recover for example one",
    "start": "1304850",
    "end": "1312019"
  },
  {
    "text": "second or 10 seconds the default is 5 minutes and what we've noticed is that for customers that have very real time",
    "start": "1312019",
    "end": "1318800"
  },
  {
    "text": "data like media streaming they want to set that TTL to be very low like one second next version your assets while",
    "start": "1318800",
    "end": "1328880"
  },
  {
    "start": "1326000",
    "end": "1326000"
  },
  {
    "text": "CloudFront supports invalidating objects it's much easier to roll forward and roll back any Content that you have that",
    "start": "1328880",
    "end": "1335300"
  },
  {
    "text": "you're getting errors with by just versioning the URLs that you have so in",
    "start": "1335300",
    "end": "1340490"
  },
  {
    "text": "this case you can add a version ID or if you want to obfuscate it a little bit more you can add a file size or an md5",
    "start": "1340490",
    "end": "1346010"
  },
  {
    "text": "sum if you are using md5 sum you will want to enable query string forwarding",
    "start": "1346010",
    "end": "1351020"
  },
  {
    "text": "to your origin reminder when you're using your cache behaviors to minimize",
    "start": "1351020",
    "end": "1357320"
  },
  {
    "start": "1353000",
    "end": "1353000"
  },
  {
    "text": "the forwarded values as much as possible as you saw with how we created our cache keys any additional headers will",
    "start": "1357320",
    "end": "1365540"
  },
  {
    "text": "actually get added to your cache gains so they will dramatically reduce your cache ability and if you forward all header to your origin we effectively",
    "start": "1365540",
    "end": "1372350"
  },
  {
    "text": "cache nothing it's a full proxy mode to your origin when in doubt check the logs enable",
    "start": "1372350",
    "end": "1380240"
  },
  {
    "text": "cloud front access logs and here at kind of the standard nginx and Apache logs with our request IDs in there you can",
    "start": "1380240",
    "end": "1386570"
  },
  {
    "start": "1382000",
    "end": "1382000"
  },
  {
    "text": "even come up with your own request IDs but for anything that you're doing with troubleshooting is always helpful to have the request ID and if you do have",
    "start": "1386570",
    "end": "1392420"
  },
  {
    "text": "to open a support case with us we'll usually try to know what your request IDs are just so that we can help dive",
    "start": "1392420",
    "end": "1398750"
  },
  {
    "text": "into exactly what your users are having problems with as well key takeaways",
    "start": "1398750",
    "end": "1405790"
  },
  {
    "text": "remember just at your cache control headers that does give you a lot more control over what we cache and for how long",
    "start": "1405790",
    "end": "1411500"
  },
  {
    "text": "you should also could be creating cache behaviors you can cache dynamic content with a TTL of zero and so that you can",
    "start": "1411500",
    "end": "1418880"
  },
  {
    "text": "reduce the load to your origin by having us just send conditional gets down forward only what you need version your",
    "start": "1418880",
    "end": "1426440"
  },
  {
    "text": "assets and please log your request IDs and now I'll give the port Anton",
    "start": "1426440",
    "end": "1432760"
  },
  {
    "text": "my name is Anton Raglan I'm an engineering manager with Claude front and I'm gonna talk to you about",
    "start": "1435910",
    "end": "1441410"
  },
  {
    "text": "measuring application performance with rum could you guys hear that first pair all right so before we get into that",
    "start": "1441410",
    "end": "1449390"
  },
  {
    "start": "1448000",
    "end": "1448000"
  },
  {
    "text": "let's just break down a few of the things that we're going to discuss here so we're going to talk about synthetic monitoring as opposed to rum which is",
    "start": "1449390",
    "end": "1457429"
  },
  {
    "text": "real user monitoring and we're also going to talk about what that means in terms of baseline of your performance and gaining situational insight so what",
    "start": "1457429",
    "end": "1466880"
  },
  {
    "start": "1465000",
    "end": "1465000"
  },
  {
    "text": "is synthetic monitoring to start with I like to think of that as you artificially generating traffic to",
    "start": "1466880",
    "end": "1472880"
  },
  {
    "text": "either your origin or your CDN to determine what is the performance and",
    "start": "1472880",
    "end": "1478309"
  },
  {
    "text": "availability of your application so this is outside of the regular processes that your application that your users are",
    "start": "1478309",
    "end": "1484700"
  },
  {
    "text": "going through so what are some of the pros of this you can get consistent signal as to the health of your service",
    "start": "1484700",
    "end": "1491299"
  },
  {
    "text": "it's easy to set up generally this can be as simple as you know spinning up an ec2 instance in every region setting up",
    "start": "1491299",
    "end": "1498620"
  },
  {
    "text": "a curl on a cron job every five minutes that's detecting what the status code is of your application another application",
    "start": "1498620",
    "end": "1505280"
  },
  {
    "text": "of this can be baselining your performance so what you can do is use this information to say you know I'll",
    "start": "1505280",
    "end": "1511580"
  },
  {
    "text": "deploy to nine different regions and determine from Germany Japan from us east here is the baseline our TTS and",
    "start": "1511580",
    "end": "1518000"
  },
  {
    "text": "throughput that I named that I'm able to get from my application one thing to note here is that I'm going to be",
    "start": "1518000",
    "end": "1523460"
  },
  {
    "text": "talking about how you do this from a browser perspective generally but you",
    "start": "1523460",
    "end": "1528710"
  },
  {
    "text": "can get this kind of information for synthetic monitoring from something say an SDK or there are many other",
    "start": "1528710",
    "end": "1534710"
  },
  {
    "text": "applications like that and I'm actually pretty passionate about this and I'm happy to discuss more ways that you can use this after so that's the pros but",
    "start": "1534710",
    "end": "1543289"
  },
  {
    "text": "let's talk about the happy case and then the sad case when you're using synthetic monitoring so in this case that I'm",
    "start": "1543289",
    "end": "1549679"
  },
  {
    "text": "actually describing here we have you know we've set up nine different end",
    "start": "1549679",
    "end": "1555020"
  },
  {
    "text": "points where we're doing the synthetic monitoring from we're collating all of that data we're aggregating the availability of our service now the",
    "start": "1555020",
    "end": "1562909"
  },
  {
    "text": "problem with this is that you're only testing what you know about your application so you're going to go",
    "start": "1562909",
    "end": "1570580"
  },
  {
    "text": "you there's no way for you to possibly enumerate every single way that a user is going to use your application so when",
    "start": "1570580",
    "end": "1576100"
  },
  {
    "text": "you're using synthetic monitoring you're really just getting a baseline for how your application is performing how is",
    "start": "1576100",
    "end": "1581230"
  },
  {
    "text": "generally available but in terms of network connectivity if you look at this user here he's connecting to your",
    "start": "1581230",
    "end": "1587789"
  },
  {
    "text": "application from say you know South America all of your endpoints around the",
    "start": "1587789",
    "end": "1594010"
  },
  {
    "text": "world are saying hey we're green or 100 percent available great performance but in actuality he has no network",
    "start": "1594010",
    "end": "1601240"
  },
  {
    "text": "connectivity to actually reach your endpoint now you're not going to detect this because you don't have anything",
    "start": "1601240",
    "end": "1606340"
  },
  {
    "text": "running from where your end user is actually reaching your application from so some of the cons that you can see",
    "start": "1606340",
    "end": "1612850"
  },
  {
    "text": "there are that the network path is going to be completely different from your synthetic monitors than it is from your",
    "start": "1612850",
    "end": "1619139"
  },
  {
    "text": "monitors that you might get from real user measurement not to mention that the special cases and snowflakes that you",
    "start": "1619139",
    "end": "1625809"
  },
  {
    "text": "might have in these scenarios are also going to be very different for every end user that's using your application so",
    "start": "1625809",
    "end": "1633090"
  },
  {
    "start": "1632000",
    "end": "1632000"
  },
  {
    "text": "how do you feel about rum I love it I love it in both many ways we use it at",
    "start": "1633090",
    "end": "1638409"
  },
  {
    "text": "cloud front in fact we use synthetic monitoring a cloud friend as well but we really rely on real user measurements",
    "start": "1638409",
    "end": "1644019"
  },
  {
    "text": "because to us that's a real indication of how our customers are using and using",
    "start": "1644019",
    "end": "1649809"
  },
  {
    "text": "cloud front and what the performance and availability is that they're getting so how is this applied in this scenario I'm",
    "start": "1649809",
    "end": "1655990"
  },
  {
    "text": "going to talk to an eric lee about browser performance and availability but there's many other applications so",
    "start": "1655990",
    "end": "1662080"
  },
  {
    "text": "generally these are injected scripts into web pages which are actually timing",
    "start": "1662080",
    "end": "1668019"
  },
  {
    "text": "the resources that are being loaded for your application these are then sent back to some collation service or some",
    "start": "1668019",
    "end": "1676120"
  },
  {
    "text": "aggregation layer that's actually going to generate some stats for you to be able to look at those many run providers out there that can do this but there's",
    "start": "1676120",
    "end": "1682870"
  },
  {
    "text": "also many ways that you can actually do this yourself so what I'm going to do next is just talk a little bit about if",
    "start": "1682870",
    "end": "1688330"
  },
  {
    "text": "you wanted to implement it yourself what are some of the things that you could actually look at or find or resources",
    "start": "1688330",
    "end": "1693789"
  },
  {
    "text": "you could look at to actually be able to do this yourself so what can REM tell",
    "start": "1693789",
    "end": "1698889"
  },
  {
    "start": "1696000",
    "end": "1696000"
  },
  {
    "text": "you what I have up here on the board actually something that you can find in many different places it's just the resource timing API these are some of",
    "start": "1698889",
    "end": "1706279"
  },
  {
    "text": "the different events that you can trigger your your your monitoring based off of so I'm not going to go through",
    "start": "1706279",
    "end": "1711919"
  },
  {
    "text": "all of these but let's just cover a few important ones what you see there around app cache you see the the action fetch",
    "start": "1711919",
    "end": "1720919"
  },
  {
    "text": "start so that's an event that actually is generated when it's looking in your application or your browser just",
    "start": "1720919",
    "end": "1726649"
  },
  {
    "text": "determine if it's actually in your cache and what's important about that is that this will not necessarily result in a",
    "start": "1726649",
    "end": "1733999"
  },
  {
    "text": "request to your origin as Sheree was saying earlier you can actually set s max age and max age to determine what's",
    "start": "1733999",
    "end": "1740720"
  },
  {
    "text": "actually cast at the browser and what's cached at your CDN or in your origin so",
    "start": "1740720",
    "end": "1745789"
  },
  {
    "text": "if it doesn't get past the fetch start you you may see that reflected in the",
    "start": "1745789",
    "end": "1751100"
  },
  {
    "text": "metrics that you're gathered another important one here is response start and",
    "start": "1751100",
    "end": "1756490"
  },
  {
    "text": "response end so responsible art is what people typically think of as time to",
    "start": "1756490",
    "end": "1761869"
  },
  {
    "text": "first byte or first byte latency which is something that people index on to determine what the app's actual",
    "start": "1761869",
    "end": "1767419"
  },
  {
    "text": "performance is of your application it's an important one but it's not the only one what we like to look at as well when",
    "start": "1767419",
    "end": "1773149"
  },
  {
    "text": "we're looking at our own metrics is response to end because throughput ultimately is one of the biggest",
    "start": "1773149",
    "end": "1778309"
  },
  {
    "text": "performance boosts that you're going to get from a CDN and you dependent on your use case are going to find that",
    "start": "1778309",
    "end": "1783379"
  },
  {
    "text": "important so let's actually dive into an example I actually just pulled out some",
    "start": "1783379",
    "end": "1789230"
  },
  {
    "text": "trivial examples of looking at websites and going into the network tab and let's talk a little bit about what we're",
    "start": "1789230",
    "end": "1794629"
  },
  {
    "text": "seeing here and what some of those optimizations can be so if you look at",
    "start": "1794629",
    "end": "1800029"
  },
  {
    "start": "1798000",
    "end": "1798000"
  },
  {
    "text": "the example that I have here this is just the connection portion of a request made from the browser this is for an",
    "start": "1800029",
    "end": "1805730"
  },
  {
    "text": "object on a random website so you'll see the queuing stalled in blocking time are",
    "start": "1805730",
    "end": "1810860"
  },
  {
    "text": "generally the track time around proxying requests or if you have head-of-line",
    "start": "1810860",
    "end": "1816889"
  },
  {
    "text": "problems with HTTP 1.1 you may see that reflected here in this request that you see here that's a really low time so you",
    "start": "1816889",
    "end": "1823309"
  },
  {
    "text": "know not much to say here about optimizations there next we look at DNS lookup once again really low one",
    "start": "1823309",
    "end": "1829909"
  },
  {
    "text": "millisecond super super low that probably means that the user already had that in there local resolver cache then we have the",
    "start": "1829909",
    "end": "1836570"
  },
  {
    "text": "initial connection time and what's interesting about this is that it actually makes up more than 90% of the entire connection of this request and",
    "start": "1836570",
    "end": "1843490"
  },
  {
    "text": "that includes SSL negotiation and the TCP connect time so that's really",
    "start": "1843490",
    "end": "1849470"
  },
  {
    "text": "interesting because that's a total of 74 milliseconds if you saw that in your stats as you're collecting your own",
    "start": "1849470",
    "end": "1854990"
  },
  {
    "text": "measurements you have to look at that and say okay this seems like an interesting place that we can actually optimize for which we'll talk about in a",
    "start": "1854990",
    "end": "1861110"
  },
  {
    "text": "minute so let's look at the whole request now what we have here is both",
    "start": "1861110",
    "end": "1867710"
  },
  {
    "start": "1863000",
    "end": "1863000"
  },
  {
    "text": "the connection time and the request time when you look at the request time below you'll see things like request sent",
    "start": "1867710",
    "end": "1873740"
  },
  {
    "text": "which is the actual time it takes for your browser to send that request to your origin then you have time to first",
    "start": "1873740",
    "end": "1880639"
  },
  {
    "text": "byte time to first byte here is 41 milliseconds which makes sense because our connection time was you know it",
    "start": "1880639",
    "end": "1888320"
  },
  {
    "text": "looks like the TCP connection time here was around the same amount of time which means the first byte was actually served very quickly from the origin but most of",
    "start": "1888320",
    "end": "1895039"
  },
  {
    "text": "the time was spent in negotiating and RT TS and lastly there you have content",
    "start": "1895039",
    "end": "1900379"
  },
  {
    "text": "download which you can translate into throughput but is essentially the time to last byte so we'll talk about some",
    "start": "1900379",
    "end": "1907850"
  },
  {
    "text": "specific things that you might want to change when you see things like this in a moment one other thing I wanted to",
    "start": "1907850",
    "end": "1913009"
  },
  {
    "start": "1912000",
    "end": "1912000"
  },
  {
    "text": "talk about here just as an example this is not necessarily an example of head of line blocking but this is the impact to",
    "start": "1913009",
    "end": "1919100"
  },
  {
    "text": "your latency that you could see if you had it so if your time to first byte for each one of the objects on your page for",
    "start": "1919100",
    "end": "1925700"
  },
  {
    "text": "instance was 100 milliseconds like this one was in HTTP 1.1 there's pipelining but it's not fully it's not fully",
    "start": "1925700",
    "end": "1932960"
  },
  {
    "text": "multiplex so you're actually going to end up potentially sequentially requesting objects and if each object is",
    "start": "1932960",
    "end": "1939350"
  },
  {
    "text": "100 milliseconds of latency and across a hundred objects on the page that adds up",
    "start": "1939350",
    "end": "1945350"
  },
  {
    "text": "very very quickly so what can we do about things like this",
    "start": "1945350",
    "end": "1951700"
  },
  {
    "text": "some of the key takeaways that you can actually look at this is evaluate your user base in the first example we talked",
    "start": "1951700",
    "end": "1959210"
  },
  {
    "start": "1952000",
    "end": "1952000"
  },
  {
    "text": "about how the round-trip time and TCP negotiation time was actually 70 milliseconds so you need to understand",
    "start": "1959210",
    "end": "1966379"
  },
  {
    "text": "where are you users do you need an origin and us lease one do you need an origin in Sydney do",
    "start": "1966379",
    "end": "1973430"
  },
  {
    "text": "you need an origin in South America these are all going to make a big difference when you're actually establishing connections and serving",
    "start": "1973430",
    "end": "1979970"
  },
  {
    "text": "content to users so that globally so it's really key that you understand where are your users the second thing is",
    "start": "1979970",
    "end": "1986840"
  },
  {
    "text": "know your data this is super important in the example that I showed it had a",
    "start": "1986840",
    "end": "1992150"
  },
  {
    "text": "really really low content download time which means it was a small object in this case given the are two T's that",
    "start": "1992150",
    "end": "1997550"
  },
  {
    "text": "were probably there so in another case you could be looking at video downloads",
    "start": "1997550",
    "end": "2002680"
  },
  {
    "text": "in which case your total TCP connection time is not going to impact the overall video stream that much because",
    "start": "2002680",
    "end": "2009580"
  },
  {
    "text": "ultimately you're going to be impacted by things like your congestion window and the available throughput from the machines that they're connecting to so",
    "start": "2009580",
    "end": "2016300"
  },
  {
    "text": "all of these things are going to show up when you're looking at real user measurements and it's really important that you understand what that data is",
    "start": "2016300",
    "end": "2023110"
  },
  {
    "text": "where are they and how you use it so what how can you optimize some of this stuff use CloudFront that's a starter",
    "start": "2023110",
    "end": "2031090"
  },
  {
    "text": "we're globally you can use us to actually optimize all of these things I I'm pretty sure I looked at all of the",
    "start": "2031090",
    "end": "2037000"
  },
  {
    "text": "requests that I looked at and they weren't using a CDM so that's super important that you look at that if connection time and is really important",
    "start": "2037000",
    "end": "2044530"
  },
  {
    "text": "to you as well as throughput bring your origin as close to your end users as possible it's super important that when",
    "start": "2044530",
    "end": "2052419"
  },
  {
    "text": "they're connecting that you have something close to your users I can't say it enough that's why we have CDNs in",
    "start": "2052419",
    "end": "2057700"
  },
  {
    "text": "lieu of using a CDN make sure that you have your origin as close to where your",
    "start": "2057700",
    "end": "2062830"
  },
  {
    "text": "target demographic is actually going to be the third thing is HTTP to which",
    "start": "2062830",
    "end": "2068350"
  },
  {
    "text": "Cloud Print supports now and that will actually help you tackle that head-of-line blocking problem that I",
    "start": "2068350",
    "end": "2073720"
  },
  {
    "text": "described earlier as you'll be able to actually parallelize all of the requests you're actually serving from your origin",
    "start": "2073720",
    "end": "2080550"
  },
  {
    "text": "so lastly here's a few best practices as you're configuring rum I've encountered",
    "start": "2080550",
    "end": "2085870"
  },
  {
    "start": "2081000",
    "end": "2081000"
  },
  {
    "text": "some of these mistakes as I've talked to customers over the years make sure that if you are implementing rum that you are",
    "start": "2085870",
    "end": "2092290"
  },
  {
    "text": "monitoring the things that are actually critical for your application so in the",
    "start": "2092290",
    "end": "2097450"
  },
  {
    "text": "case of a website don't just monitor a sink JPG at the bottom of the page monitor your index page monitor your CSS if",
    "start": "2097450",
    "end": "2105079"
  },
  {
    "text": "that's important to be able to actually structure the page in the case of video make sure you're actually monitoring the",
    "start": "2105079",
    "end": "2112400"
  },
  {
    "text": "video manifest is your video are you able to even find the fragments that are necessary to serve your video just add",
    "start": "2112400",
    "end": "2120140"
  },
  {
    "text": "in critical page loads you can actually monitor the entire page load time and determine is it taking longer for some",
    "start": "2120140",
    "end": "2126950"
  },
  {
    "text": "users is it actually available are there some assets meaning missing these are all possible to get from rum and lastly",
    "start": "2126950",
    "end": "2134239"
  },
  {
    "text": "which I'm open to talk about afterwards as well first byte latency is not always the most important thing I know that",
    "start": "2134239",
    "end": "2141049"
  },
  {
    "text": "some people over index on that and I just wanted to say it's know your data because it's going to be different for",
    "start": "2141049",
    "end": "2147109"
  },
  {
    "text": "every different user so next we have a friend coming up hello my name is Ethan",
    "start": "2147109",
    "end": "2161180"
  },
  {
    "text": "Fuentes and I am an enterprise Solutions Architect with AWS so today I'm going to",
    "start": "2161180",
    "end": "2166579"
  },
  {
    "text": "talk about how you can stop malicious viewers using Amazon CloudFront & AWS",
    "start": "2166579",
    "end": "2172219"
  },
  {
    "text": "Web Application Firewall or what and so specifically I'm going to cover four",
    "start": "2172219",
    "end": "2178729"
  },
  {
    "start": "2175000",
    "end": "2175000"
  },
  {
    "text": "best practices on securing your CloudFront distribution that you can implement in your own AWS environment",
    "start": "2178729",
    "end": "2185690"
  },
  {
    "text": "and the for best practices I'm going to be talking about is one leveraging AWS",
    "start": "2185690",
    "end": "2190700"
  },
  {
    "text": "laughs with pre-configured protections so pre-configured protections is a solution that we developed to help you",
    "start": "2190700",
    "end": "2196640"
  },
  {
    "text": "kind of get started with laughs and we'll talk about the architecture of the solution and dive a little bit deeper",
    "start": "2196640",
    "end": "2201739"
  },
  {
    "text": "into some of the rules that are part of it next we'll talk about configuring",
    "start": "2201739",
    "end": "2207229"
  },
  {
    "text": "cloud front to serve private content so serving private content within cloud",
    "start": "2207229",
    "end": "2212630"
  },
  {
    "text": "front is actually a two-step process will walk through both of those steps next we'll talk about automating",
    "start": "2212630",
    "end": "2218210"
  },
  {
    "text": "security response by using services like AWS lambda SNS we'll walk through a",
    "start": "2218210",
    "end": "2223940"
  },
  {
    "text": "couple of examples just to give you an idea of you know how that would look and then lastly we'll talk about leveraging",
    "start": "2223940",
    "end": "2229640"
  },
  {
    "text": "a DBA certificate manager for SSL TLS wickets both for your cloud front",
    "start": "2229640",
    "end": "2235700"
  },
  {
    "text": "distribution and for your ELB origin so",
    "start": "2235700",
    "end": "2240860"
  },
  {
    "text": "AWS wife gives you control over which traffic to allow or block to your web",
    "start": "2240860",
    "end": "2246560"
  },
  {
    "text": "applications by defining customizable web security rules so the service was",
    "start": "2246560",
    "end": "2252290"
  },
  {
    "text": "released about a year ago and since then we've added important capabilities like cloud trail integration new match",
    "start": "2252290",
    "end": "2259610"
  },
  {
    "text": "conditions and then ipv6 support more recently we've also added AWS laughs to",
    "start": "2259610",
    "end": "2266420"
  },
  {
    "text": "the lists of PCI DSS 3.2 level 1 compliant AWS services this year as well",
    "start": "2266420",
    "end": "2273050"
  },
  {
    "text": "so AWS graph includes some native rules for things like cross-site scripting and",
    "start": "2273050",
    "end": "2279680"
  },
  {
    "text": "sequel injection however one of the most powerful features of AWS laugh is the",
    "start": "2279680",
    "end": "2285380"
  },
  {
    "text": "capability to allow you to create your own custom rules based on the traffic that you're seeing",
    "start": "2285380",
    "end": "2290780"
  },
  {
    "text": "and it's a great capability customers use it all the time however sometimes it's difficult to come up with a Web",
    "start": "2290780",
    "end": "2297740"
  },
  {
    "text": "Application Firewall strategy and create these custom rules especially if you",
    "start": "2297740",
    "end": "2302810"
  },
  {
    "text": "know you don't have dedicated security teams that you're working with and so what we did is we developed a solution",
    "start": "2302810",
    "end": "2310400"
  },
  {
    "start": "2309000",
    "end": "2309000"
  },
  {
    "text": "to simplify this process that uses a cloud formation template and automatically deploys a set of AWS web",
    "start": "2310400",
    "end": "2318950"
  },
  {
    "text": "rules that are designed to filter common web-based attacks and so when you deploy",
    "start": "2318950",
    "end": "2325460"
  },
  {
    "text": "this CloudFormation template you can select which of the rules you want to",
    "start": "2325460",
    "end": "2330500"
  },
  {
    "text": "enable and then you also set some parameters for some of those rules that",
    "start": "2330500",
    "end": "2335600"
  },
  {
    "text": "are specific to each of those so I'm going to walk through this architecture at a high level and then we'll dive into",
    "start": "2335600",
    "end": "2342320"
  },
  {
    "text": "the three customized components of the solution that are implemented through lambda functions so the solution",
    "start": "2342320",
    "end": "2350240"
  },
  {
    "text": "includes six different components the first one is a bad bot and scraper",
    "start": "2350240",
    "end": "2356480"
  },
  {
    "text": "protection component and so the way that that is implemented is through an AP Amazon API gateway endpoint",
    "start": "2356480",
    "end": "2364370"
  },
  {
    "text": "it's essentially a that you embed into your web application the next group the next two components",
    "start": "2364370",
    "end": "2371930"
  },
  {
    "text": "the sequel server injection protection and the cross site scripting protection",
    "start": "2371930",
    "end": "2377060"
  },
  {
    "text": "are two native rules with AWS laughs then we have the HT flood scanner and",
    "start": "2377060",
    "end": "2382700"
  },
  {
    "text": "probe protection and so that's also implemented through a lambda function that parses the cloud front access logs",
    "start": "2382700",
    "end": "2390410"
  },
  {
    "text": "as they're delivered into s3 and then the last component of the solution here is the known attacker protection so",
    "start": "2390410",
    "end": "2397040"
  },
  {
    "text": "again this is a lambda function that is triggered by a cloud watch event on an",
    "start": "2397040",
    "end": "2402260"
  },
  {
    "text": "hourly schedule schedule that goes out and obtains IP lists a queries",
    "start": "2402260",
    "end": "2408560"
  },
  {
    "text": "third-party IP reputation listen and take the takes those in and updates a",
    "start": "2408560",
    "end": "2413630"
  },
  {
    "text": "wsof based on that so let's go into each of these custom components so the first",
    "start": "2413630",
    "end": "2421370"
  },
  {
    "text": "one is the access Handler and so the access handler is what protects you",
    "start": "2421370",
    "end": "2426950"
  },
  {
    "text": "against the bad BOTS and scrapers and the way that this is implemented is through an API a gateway endpoint that",
    "start": "2426950",
    "end": "2433520"
  },
  {
    "text": "you essentially embed within your web application and then once you embedded",
    "start": "2433520",
    "end": "2438710"
  },
  {
    "text": "it within your web application you update your robot dot text file to explicitly disallow that particular",
    "start": "2438710",
    "end": "2445850"
  },
  {
    "text": "endpoint when when a scraper or a bot accesses that page on your site and it",
    "start": "2445850",
    "end": "2453080"
  },
  {
    "text": "tries to hit that API gateway a honeypot endpoint it triggers an AW the AWS",
    "start": "2453080",
    "end": "2459950"
  },
  {
    "text": "lambda access handler function and that access handler function that updates the IP block list based on that activity so",
    "start": "2459950",
    "end": "2470390"
  },
  {
    "text": "the next component I'll talk about is the law of partial component so the law of pressure component again is",
    "start": "2470390",
    "end": "2476240"
  },
  {
    "text": "implemented through lambda function and the way that this works is as the Amazon CloudFront access logs are delivered within the",
    "start": "2476240",
    "end": "2483890"
  },
  {
    "text": "Amazon s3 bucket it triggers that AWS land a log parser function that examines",
    "start": "2483890",
    "end": "2490130"
  },
  {
    "text": "logs and determines based on that examination whether the IP list should",
    "start": "2490130",
    "end": "2496340"
  },
  {
    "text": "be updated to block against those and again this is all extensible right",
    "start": "2496340",
    "end": "2501410"
  },
  {
    "text": "so we have this configured and ready to go for you but you can extend these lambda functions as you need to and",
    "start": "2501410",
    "end": "2508520"
  },
  {
    "text": "customize them further the last component I'll talk about is the IP list",
    "start": "2508520",
    "end": "2515330"
  },
  {
    "text": "parser so this this component here it uses a Amazon Cloud watch of that that's",
    "start": "2515330",
    "end": "2521510"
  },
  {
    "text": "scheduled to kick off on an hourly basis and that triggers the lambda function",
    "start": "2521510",
    "end": "2527300"
  },
  {
    "text": "that goes out and fetches IP lists from three different sources so it currently",
    "start": "2527300",
    "end": "2533869"
  },
  {
    "text": "accesses the Spamhaus do not router pierless and then the extent that do not",
    "start": "2533869",
    "end": "2539660"
  },
  {
    "text": "router peer list we also pull IPS from the Tor exit nodes list and then the",
    "start": "2539660",
    "end": "2545540"
  },
  {
    "text": "proof point emerging threats IP list so those are the three that are part of the solution but again if you have other",
    "start": "2545540",
    "end": "2552080"
  },
  {
    "text": "requirements if you have other providers of these types of reputation lists you could certainly implement that or extend",
    "start": "2552080",
    "end": "2558589"
  },
  {
    "text": "this to accommodate that and so the solution is available you know dot you",
    "start": "2558589",
    "end": "2564619"
  },
  {
    "text": "can download it off our site I have the URL here and you know will provide the presentation so you can get to it again",
    "start": "2564619",
    "end": "2571160"
  },
  {
    "text": "it's a cloud formation template so there's a lot of points of customization before you deploy it but it's a very quick and easy way to get up and running",
    "start": "2571160",
    "end": "2578810"
  },
  {
    "text": "with some of these customized rules to protect your cloud front distributions okay so the next best practice I'll talk",
    "start": "2578810",
    "end": "2586970"
  },
  {
    "start": "2585000",
    "end": "2585000"
  },
  {
    "text": "about is preserving private content or configuring cloud front to serve private",
    "start": "2586970",
    "end": "2592730"
  },
  {
    "text": "contact and again it's a two-step process right so the first part of this process is to restrict the origin access",
    "start": "2592730",
    "end": "2598970"
  },
  {
    "text": "the second part of the process is to use sign URLs or signed cookies to protect",
    "start": "2598970",
    "end": "2604849"
  },
  {
    "text": "your content now you may not have a need to do the second part of it but restricting origin access is the best",
    "start": "2604849",
    "end": "2611869"
  },
  {
    "text": "practice regardless of if you have content that you want to explicitly protect so this so there's two ways that",
    "start": "2611869",
    "end": "2618470"
  },
  {
    "text": "you could do this depending on you know whether you're using s3 as your origin or whether you have a custom origin",
    "start": "2618470",
    "end": "2625040"
  },
  {
    "text": "whether it be on ec2 or even in your own data center so the first way if you're",
    "start": "2625040",
    "end": "2630170"
  },
  {
    "text": "using three for static content in your distribution then you can go ahead and",
    "start": "2630170",
    "end": "2635260"
  },
  {
    "text": "use origin access identity to prevent direct access to that s3 bucket so that",
    "start": "2635260",
    "end": "2641530"
  },
  {
    "text": "in that that prevents viewers from circumventing the rules that you've",
    "start": "2641530",
    "end": "2647079"
  },
  {
    "text": "built within what happened within cloud front and going directly to s3 likewise if you have a custom origin if you have",
    "start": "2647079",
    "end": "2654069"
  },
  {
    "text": "you know you're using an EOB on Amazon or you're using something at your in",
    "start": "2654069",
    "end": "2659319"
  },
  {
    "text": "your own data center you could use the list of cloud front IPA at the IP range",
    "start": "2659319",
    "end": "2664930"
  },
  {
    "text": "of the cloud front edge locations to whitelist those at those origins and only allow access from that list of IP",
    "start": "2664930",
    "end": "2671710"
  },
  {
    "text": "addresses and again that prevents users from directly going to your origin and",
    "start": "2671710",
    "end": "2677069"
  },
  {
    "text": "circumventing the whack protections that you've implemented within your distribution the second part of private",
    "start": "2677069",
    "end": "2685270"
  },
  {
    "start": "2683000",
    "end": "2683000"
  },
  {
    "text": "content is using signed URLs and cookies and again you know you may not have a need for this but if you do there's you",
    "start": "2685270",
    "end": "2691059"
  },
  {
    "text": "know different things you could do with each of these so with signed URLs you add the signature in the query string",
    "start": "2691059",
    "end": "2697180"
  },
  {
    "text": "and essentially some both some signed URLs and cookies are used to protect either a specific piece of content or",
    "start": "2697180",
    "end": "2704980"
  },
  {
    "text": "group of content items within your distribution so with signed URLs you had the signature in the query string so the",
    "start": "2704980",
    "end": "2711400"
  },
  {
    "text": "URL is going to change sign URLs are used mostly for restricting access to",
    "start": "2711400",
    "end": "2717670"
  },
  {
    "text": "individual files not you know large amounts of contact sign cookies again",
    "start": "2717670",
    "end": "2724180"
  },
  {
    "text": "the URL doesn't change with signed cookies so but you you typically use",
    "start": "2724180",
    "end": "2729730"
  },
  {
    "text": "signed cookies to restrict access to multiple files or an area of your application so the next best practice",
    "start": "2729730",
    "end": "2740170"
  },
  {
    "text": "here I'll talk about is automated automating Security Response so we talked a little bit about this in",
    "start": "2740170",
    "end": "2746109"
  },
  {
    "text": "efforts example right so that's an example of how you can automate the updates of your raft rules this is",
    "start": "2746109",
    "end": "2752319"
  },
  {
    "text": "another example here and this covers the the case where you have where you have a",
    "start": "2752319",
    "end": "2757660"
  },
  {
    "text": "an Origin that you are only whitelisting the cloud front edge look a shinai ps2 and so this gives you some",
    "start": "2757660",
    "end": "2765340"
  },
  {
    "text": "automation around that and again this is another solution that's on our github site so you guys can definitely access",
    "start": "2765340",
    "end": "2771040"
  },
  {
    "text": "it and download it the URL is down here and so what what this solution does is",
    "start": "2771040",
    "end": "2776440"
  },
  {
    "text": "essentially it updates books or it updates the security groups based on the",
    "start": "2776440",
    "end": "2783580"
  },
  {
    "start": "2780000",
    "end": "2780000"
  },
  {
    "text": "changes in the IP list of the cloud front servers right so whenever that changes there's a lambda function that",
    "start": "2783580",
    "end": "2790540"
  },
  {
    "text": "subscribe to this SNS topic the SNS topic that triggers that lambda function lambda updates your security groups with",
    "start": "2790540",
    "end": "2797830"
  },
  {
    "text": "the latest whitelist so you don't have to manually keep track of when those IP address changes change and you know have",
    "start": "2797830",
    "end": "2805030"
  },
  {
    "text": "to manually do this in the last best",
    "start": "2805030",
    "end": "2810520"
  },
  {
    "start": "2808000",
    "end": "2808000"
  },
  {
    "text": "practice I leave you with here is a leveraged AWS certificate manager for",
    "start": "2810520",
    "end": "2815740"
  },
  {
    "text": "SSL and TLS certificates so ECM allows you to provision and deploy TLS and SSL",
    "start": "2815740",
    "end": "2821830"
  },
  {
    "text": "certificates at no additional cost and then you can associate those",
    "start": "2821830",
    "end": "2826930"
  },
  {
    "text": "certificates with your CloudFront distribution or your ill be aware engine and together to get up and running with",
    "start": "2826930",
    "end": "2833650"
  },
  {
    "text": "a Amazon AWS certificate manager it's pretty straightforward",
    "start": "2833650",
    "end": "2838840"
  },
  {
    "text": "if you're already using cloud front most of this is already done you have a cloud front distribution right but if you",
    "start": "2838840",
    "end": "2844480"
  },
  {
    "text": "don't then you know you would set up your origin whether it be an ec2 origin or an s3 bucket next you know you set up",
    "start": "2844480",
    "end": "2852820"
  },
  {
    "text": "your CloudFront distribution setup your caching rules set up your origins within",
    "start": "2852820",
    "end": "2857859"
  },
  {
    "text": "your cloud front distribution once you're done with that then you can request the certificate through either",
    "start": "2857859",
    "end": "2863980"
  },
  {
    "text": "the console or through the API or our CLI and so once you have that",
    "start": "2863980",
    "end": "2870400"
  },
  {
    "text": "certificate that the last step is religious associating that certificate with your cloud front distribution once",
    "start": "2870400",
    "end": "2876100"
  },
  {
    "text": "that certificate is associated with your clock front distribution it gets pushed out to all the edge locations and then",
    "start": "2876100",
    "end": "2883330"
  },
  {
    "text": "we use that to terminate SSL at the edge all right so the key takeaways here",
    "start": "2883330",
    "end": "2890470"
  },
  {
    "text": "leverage AWS black more specifically leverage AWS lapwood",
    "start": "2890470",
    "end": "2895780"
  },
  {
    "text": "protections to give you a good starting point secure your origin and content",
    "start": "2895780",
    "end": "2901680"
  },
  {
    "text": "preventing direct access to your origin is always a best practice whether you use signed URLs or signed cookies or not",
    "start": "2901680",
    "end": "2908980"
  },
  {
    "text": "and then the last piece is automate security response by using some of our other complimentary services like great",
    "start": "2908980",
    "end": "2930480"
  },
  {
    "text": "thank you very much to a Sheree Anton and Afrin for taking the time to share",
    "start": "2930480",
    "end": "2936430"
  },
  {
    "text": "some thoughts on best practices with cloud front and really thank you all for coming to to reinvent and please do",
    "start": "2936430",
    "end": "2942490"
  },
  {
    "text": "complete your evaluation so we can learn how to make this better conference have a good day",
    "start": "2942490",
    "end": "2948930"
  }
]