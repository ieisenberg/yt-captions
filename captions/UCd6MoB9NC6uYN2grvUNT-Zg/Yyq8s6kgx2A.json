[
  {
    "text": "everyone welcome to our session monitoring lambda and serverless applications my name is Andrew",
    "start": "1790",
    "end": "10019"
  },
  {
    "text": "I'm from New Relic this is Alberto Roberto the relic Shawn from Capital One",
    "start": "10019",
    "end": "16880"
  },
  {
    "text": "so before we get started a little bit about New Relic",
    "start": "16880",
    "end": "21740"
  },
  {
    "text": "[Music]",
    "start": "27370",
    "end": "30530"
  },
  {
    "text": "[Music]",
    "start": "35060",
    "end": "38319"
  },
  {
    "text": "[Music]",
    "start": "47640",
    "end": "50689"
  },
  {
    "text": "[Music]",
    "start": "66110",
    "end": "74040"
  },
  {
    "text": "[Music]",
    "start": "78650",
    "end": "81739"
  },
  {
    "text": "[Music]",
    "start": "90800",
    "end": "94470"
  },
  {
    "text": "it's a very nice TV commercial all right so with that let's get started and to go",
    "start": "99260",
    "end": "106140"
  },
  {
    "text": "through a quick agenda about what we're gonna talk about we're gonna talk about basically the new challenge that's",
    "start": "106140",
    "end": "111960"
  },
  {
    "text": "introduced by serverless specifically lamda and managed services finding",
    "start": "111960",
    "end": "119000"
  },
  {
    "text": "monitoring blind spots like how does the evolution of workloads in the cloud",
    "start": "119000",
    "end": "124770"
  },
  {
    "text": "using serverless lead to blind spots that traditional monitoring tools might not solve for the type of data that",
    "start": "124770",
    "end": "132210"
  },
  {
    "text": "we're gonna gather and that we think is really important for you to gather and synthesize a good session on capital 1",
    "start": "132210",
    "end": "139050"
  },
  {
    "text": "lessons learned as they adopted lamda specifically and then a really quick what's next so with that I'll hand it",
    "start": "139050",
    "end": "145860"
  },
  {
    "text": "over to Albert I was going to talk about serverless workloads thank you so yeah",
    "start": "145860",
    "end": "152340"
  },
  {
    "text": "we live in the world today that has gotten in the little lead in a little bit more than they can from stamping CDs",
    "start": "152340",
    "end": "160050"
  },
  {
    "text": "and delivering updates to our customers basically the Liebherr code in production multiple times day so what we",
    "start": "160050",
    "end": "168480"
  },
  {
    "text": "are seeing across the board is that today our stakeholders are basically demanding has to move at an incredible",
    "start": "168480",
    "end": "174270"
  },
  {
    "text": "speed and the industry has evolved a lot and we have a lot to thank to a told us",
    "start": "174270",
    "end": "180570"
  },
  {
    "text": "to remove the friction but many orders of magnitude from like getting us away",
    "start": "180570",
    "end": "188209"
  },
  {
    "text": "from the physical layer and getting us on top of instruction layers and to civilize that and help us develop code",
    "start": "188209",
    "end": "194790"
  },
  {
    "text": "much much much faster but even though these technologies are awesome and I",
    "start": "194790",
    "end": "200730"
  },
  {
    "text": "think it's never been a better time to be a software developer I think there's",
    "start": "200730",
    "end": "205830"
  },
  {
    "text": "a flip side like this so it's crazy it's awesome it's never been a better time",
    "start": "205830",
    "end": "212120"
  },
  {
    "text": "but there's a lot of hassle and there's a lot of problems on monitoring",
    "start": "212120",
    "end": "219950"
  },
  {
    "text": "those dynamic highly scalable distributed systems that we build so",
    "start": "219950",
    "end": "225440"
  },
  {
    "text": "today we're going to talk a little bit about how does that play in the civilized world so while this room but",
    "start": "225440",
    "end": "233180"
  },
  {
    "text": "we pull today there was not so several that wasn't perceived as the next new",
    "start": "233180",
    "end": "238250"
  },
  {
    "text": "evolution that the cloud has to offer and the next new structural layer that the cloud has to offer",
    "start": "238250",
    "end": "243709"
  },
  {
    "text": "it's been amazing what you can do like with the little collection of functions and some ways of their services you can",
    "start": "243709",
    "end": "249890"
  },
  {
    "text": "put value really really fast intensive the customer and I guess that continuously sarcastic right so why do",
    "start": "249890",
    "end": "257329"
  },
  {
    "text": "you use reference why you guys are in a strategy to move to server license and maybe get a lot of answers likely",
    "start": "257329",
    "end": "263960"
  },
  {
    "text": "because it's cool because it's a good challenge it's a nice challenge but",
    "start": "263960",
    "end": "269150"
  },
  {
    "text": "there's some like consistent answers that I get so I get because I don't want",
    "start": "269150",
    "end": "276050"
  },
  {
    "text": "a nine eight server I don't want to do that anymore because I didn't expect my",
    "start": "276050",
    "end": "282290"
  },
  {
    "text": "team's to be operations experts that can scale an infrastructure because I want",
    "start": "282290",
    "end": "290780"
  },
  {
    "text": "my teams to be focused on delivering value and focus on code instead of",
    "start": "290780",
    "end": "296150"
  },
  {
    "text": "having to worry about versioning and stuff like that imagine PMS and right",
    "start": "296150",
    "end": "302750"
  },
  {
    "text": "scaling them and I also start getting an answer which is really interesting to me",
    "start": "302750",
    "end": "308750"
  },
  {
    "text": "and it's because I can track how much every single interaction with my",
    "start": "308750",
    "end": "314630"
  },
  {
    "text": "software cost and that's it just surplus",
    "start": "314630",
    "end": "320300"
  },
  {
    "text": "just words it just works I capture these sentence this code you",
    "start": "320300",
    "end": "325520"
  },
  {
    "text": "are they're gonna read it people still haven't figured out the great use case for solace beyond bad jobs and cron jobs",
    "start": "325520",
    "end": "332479"
  },
  {
    "text": "it says it's a sense from analysts the code for anomalies so I'll say that",
    "start": "332479",
    "end": "340250"
  },
  {
    "text": "night that might have been true when lambda was released in 14 but I think we",
    "start": "340250",
    "end": "346850"
  },
  {
    "text": "have figured out a lot of useless for civilizer I mean much more than that",
    "start": "346850",
    "end": "353380"
  },
  {
    "text": "on this thing I guess but I think that's not the childhood so the sir the the I",
    "start": "353380",
    "end": "360430"
  },
  {
    "text": "mean the number of use cases that we can be logged on several eyes it's not the challenge I think the challenge is how",
    "start": "360430",
    "end": "366820"
  },
  {
    "text": "to monitor that stuff that we can build on top of server list we'll see later in",
    "start": "366820",
    "end": "373180"
  },
  {
    "text": "some examples what are the challenges but I think the challenge is not getting the use cases the challenge is actually",
    "start": "373180",
    "end": "381240"
  },
  {
    "text": "like monitoring those whose faces I would have just show some data to",
    "start": "381240",
    "end": "386650"
  },
  {
    "text": "exemplify the level of adoption we're seeing from serverless lately this is",
    "start": "386650",
    "end": "393010"
  },
  {
    "text": "data that I've been collecting for the last year but it is capture with",
    "start": "393010",
    "end": "398290"
  },
  {
    "text": "Padanaram the relic so we are we've just captured the ones that I think are more interesting to share with the audience",
    "start": "398290",
    "end": "404410"
  },
  {
    "text": "today and the first one I want to talk about is the growth the staggering",
    "start": "404410",
    "end": "409930"
  },
  {
    "text": "growth that we see in terms of invocations to lambdas so in the last",
    "start": "409930",
    "end": "415270"
  },
  {
    "text": "six months we've seen a growth of almost 400% in implications for lung disease",
    "start": "415270",
    "end": "422070"
  },
  {
    "text": "just in number of functions we're seeing that the number of functions more than doubled every quarter and in terms of",
    "start": "422070",
    "end": "431170"
  },
  {
    "text": "execution time we are now at 88% of",
    "start": "431170",
    "end": "436290"
  },
  {
    "text": "London's running below five cycles just for your information like these same",
    "start": "436290",
    "end": "444570"
  },
  {
    "text": "value six months back was 79% so what we",
    "start": "444570",
    "end": "449830"
  },
  {
    "text": "get with that basically what we get is that people are using more land and",
    "start": "449830",
    "end": "455170"
  },
  {
    "text": "booking more Alumnus people are generating more landless so we are generating more long lists or in booking",
    "start": "455170",
    "end": "461890"
  },
  {
    "text": "them more and they're running faster so that looks to me I don't know to that animal is but that looks to me like",
    "start": "461890",
    "end": "468040"
  },
  {
    "text": "people have figured out how to build microservices return on assets and how to get them together to produce",
    "start": "468040",
    "end": "473410"
  },
  {
    "text": "applications but there's another kind of",
    "start": "473410",
    "end": "479860"
  },
  {
    "text": "data point that I want to share it's basically the scripting languages to runtimes rule the civilized",
    "start": "479860",
    "end": "486149"
  },
  {
    "text": "environment so node makes like 44 percent and Python makes a 37 percent by",
    "start": "486149",
    "end": "492179"
  },
  {
    "text": "the way that's data collected from the New Relic platform stated we see across whole entire 17th + thousand customers",
    "start": "492179",
    "end": "500809"
  },
  {
    "text": "there's another piece of data that I want to share with you today and that",
    "start": "500809",
    "end": "507899"
  },
  {
    "text": "one's means particularly moving as 89%",
    "start": "507899",
    "end": "514888"
  },
  {
    "text": "of our customers in an internal survey that we sent the best ways that we saw",
    "start": "514889",
    "end": "520349"
  },
  {
    "text": "that were using land intensively we said that survey asking what was the level of",
    "start": "520349",
    "end": "527160"
  },
  {
    "text": "frustration they were getting 89% of",
    "start": "527160",
    "end": "534779"
  },
  {
    "text": "them responded they were either frustrated very frustrated or extremely frustrated so that's a lot of",
    "start": "534779",
    "end": "543029"
  },
  {
    "text": "frustration to deal with right so I thought that comes from September last year so it's there's been a lot of",
    "start": "543029",
    "end": "550439"
  },
  {
    "text": "people frustrated for a long time so why so frustrating well I'm just gonna",
    "start": "550439",
    "end": "556379"
  },
  {
    "text": "exemplify how frustrating can get at",
    "start": "556379",
    "end": "561569"
  },
  {
    "text": "several application so in servers less you know you can build an API literally",
    "start": "561569",
    "end": "568050"
  },
  {
    "text": "minutes so what I try to do here to play a little bit is I'm just gonna get a",
    "start": "568050",
    "end": "574079"
  },
  {
    "text": "post request I'm gonna process these requests I'm gonna store the result of",
    "start": "574079",
    "end": "579660"
  },
  {
    "text": "these of these requests right so in this example I'm gonna do that with APL",
    "start": "579660",
    "end": "585000"
  },
  {
    "text": "gateway lambda to process the request and dynamo to store it and how will I",
    "start": "585000",
    "end": "590699"
  },
  {
    "text": "monitor that well in this environment everything looks like pretty synchronous",
    "start": "590699",
    "end": "595819"
  },
  {
    "text": "so by just monitoring the lambda and dynamo Pavich matrix and a few treats to",
    "start": "595819",
    "end": "602160"
  },
  {
    "text": "logs should be fine to me to be able to mitre at that application pretty well but we all know that this thing can get",
    "start": "602160",
    "end": "609300"
  },
  {
    "text": "complicated pretty quickly so why do we add I can easy stream there",
    "start": "609300",
    "end": "614920"
  },
  {
    "text": "and how the monitor will be then well with Tennessee's we're introducing in a",
    "start": "614920",
    "end": "620500"
  },
  {
    "text": "synchronous piece to that that environment so that means I need to",
    "start": "620500",
    "end": "625839"
  },
  {
    "text": "publish and then someone will consume that record right so what we need to",
    "start": "625839",
    "end": "631690"
  },
  {
    "text": "consume that record we need to break it down into another lambda that will",
    "start": "631690",
    "end": "638019"
  },
  {
    "text": "consume from that will be subscribed to this stream and then it will process the",
    "start": "638019",
    "end": "643180"
  },
  {
    "text": "stream aggregate data and store into s3 so we're basically doing the same thing",
    "start": "643180",
    "end": "649440"
  },
  {
    "text": "but the monitoring challenges that we are adding at this point in time are",
    "start": "649440",
    "end": "655540"
  },
  {
    "text": "pretty weak so and while the visibility into every single invocation is crucial",
    "start": "655540",
    "end": "664180"
  },
  {
    "text": "to understand here what really matters is how the conjunction of the services",
    "start": "664180",
    "end": "669639"
  },
  {
    "text": "of working anchors in orchestration so it's no longer the first lambda",
    "start": "669639",
    "end": "676899"
  },
  {
    "text": "execution no longer defines success what define success is how everything works",
    "start": "676899",
    "end": "683110"
  },
  {
    "text": "in combination so we think that this",
    "start": "683110",
    "end": "690190"
  },
  {
    "text": "thing can get more and more and more complicated from here so in order to",
    "start": "690190",
    "end": "695320"
  },
  {
    "text": "understand what data we should gather as our applications grow in the sterilized",
    "start": "695320",
    "end": "701350"
  },
  {
    "text": "environment I'm gonna hand over to Andrew thanks Alberto so obviously as we",
    "start": "701350",
    "end": "711279"
  },
  {
    "text": "you know evolve our systems there's a lot of data being produced so you know I",
    "start": "711279",
    "end": "716709"
  },
  {
    "text": "was having a conversation today with somebody and you know as we think about serverless applications it's really moving from this construct of an app",
    "start": "716709",
    "end": "723790"
  },
  {
    "text": "that you install on a box somewhere to this composite application that uses lots and lots of micro components almost",
    "start": "723790",
    "end": "730449"
  },
  {
    "text": "nano services themselves so that could be a lambda function it could be an application based on kubernetes it could",
    "start": "730449",
    "end": "736269"
  },
  {
    "text": "be a bunch of managed services that exist at AWS I mean they're they're managed services at AWS I do entire",
    "start": "736269",
    "end": "741790"
  },
  {
    "text": "groups of work for you transcoding a video that you don't have to maintain any infrastructure to do",
    "start": "741790",
    "end": "747410"
  },
  {
    "text": "anymore and they're all part of this larger workload and they're all generating data so you know as you think",
    "start": "747410",
    "end": "753050"
  },
  {
    "text": "about monitoring your servers server less applications New Relic has always been kind of thinking about this this",
    "start": "753050",
    "end": "758960"
  },
  {
    "text": "breadth and depth approach New Relic was founded on this this application performance monitoring foundation that",
    "start": "758960",
    "end": "767300"
  },
  {
    "text": "really was about introducing depth into understanding the performance of an application and and we think that the",
    "start": "767300",
    "end": "772670"
  },
  {
    "text": "same paradigm of depth where you're doing computational activities and breadth so that you can understand the",
    "start": "772670",
    "end": "779330"
  },
  {
    "text": "scope across your entire workload is is equally important so I mean what data should we collect hey we think metrics",
    "start": "779330",
    "end": "786680"
  },
  {
    "text": "are pretty important so aggregates provide a signal right they tell you",
    "start": "786680",
    "end": "792200"
  },
  {
    "text": "when you look at a dashboard or when you get paged that hey there's something going on and it is anomalous or it is",
    "start": "792200",
    "end": "799100"
  },
  {
    "text": "something I don't expect the dashboard can provide a visual indicator the number itself can provide an alert you",
    "start": "799100",
    "end": "806900"
  },
  {
    "text": "know if you look at a sudden spike in indications that was unexpected and you just deployed a function did you accidentally create a recursive loop",
    "start": "806900",
    "end": "813680"
  },
  {
    "text": "where you are actually calling the same lambda over and over it's been done",
    "start": "813680",
    "end": "819740"
  },
  {
    "text": "before by lots of people I'm sure some in this room or you know all of a sudden",
    "start": "819740",
    "end": "825590"
  },
  {
    "text": "you know is your is your API just suddenly popular or did you make a change somewhere in your system that's",
    "start": "825590",
    "end": "831290"
  },
  {
    "text": "actually creating a lot more traffic than you anticipated error spikes are",
    "start": "831290",
    "end": "837050"
  },
  {
    "text": "much the same right what sort of errors am i saying are the expected errors are how are they classified and you know and",
    "start": "837050",
    "end": "845690"
  },
  {
    "text": "duration is obviously critically important too I'm stacking the components of your functions even with",
    "start": "845690",
    "end": "851330"
  },
  {
    "text": "inside the executions themselves to understand if there's a component that is actually potentially leading to",
    "start": "851330",
    "end": "857600"
  },
  {
    "text": "downstream effects you're calling s3 and it's taking longer than you expect and",
    "start": "857600",
    "end": "862910"
  },
  {
    "text": "that's leading to processing delays in your data stream processor but you know",
    "start": "862910",
    "end": "868130"
  },
  {
    "text": "not all metrics are like super created equal if you look at you know even some of the standard metrics that come out of",
    "start": "868130",
    "end": "875330"
  },
  {
    "text": "the lambda platform is an example you see stuff like memory usage and that one's a bit of a head-scratcher because",
    "start": "875330",
    "end": "881870"
  },
  {
    "text": "memory isn't really like memory in the lambda world isn't the same as memory in",
    "start": "881870",
    "end": "887900"
  },
  {
    "text": "the physical server world right you don't have stuff perpetually running there so even if you have like a",
    "start": "887900",
    "end": "894350"
  },
  {
    "text": "short-term memory leak the past is sort of erased for you and you get a try again there are exceptions right there",
    "start": "894350",
    "end": "901520"
  },
  {
    "text": "are instances where you could stack up a bunch of a bunch of properties that essentially exist in the container",
    "start": "901520",
    "end": "907670"
  },
  {
    "text": "forever and you could just get it out of memory exceptions but then you would get a cold start in a new container and try",
    "start": "907670",
    "end": "912920"
  },
  {
    "text": "again masae is there certain metrics that can lie to you you can say something like oh",
    "start": "912920",
    "end": "919220"
  },
  {
    "text": "I'm using a ton of memory but I never get an out of memory exception and the processing time for my function is",
    "start": "919220",
    "end": "924410"
  },
  {
    "text": "totally within the bounds of what I care about and so like that in itself isn't terribly alarming there's also a bunch",
    "start": "924410",
    "end": "932210"
  },
  {
    "text": "of talk about like concurrent execution so concurrent executions on a particular lambda also aren't terribly helpful so",
    "start": "932210",
    "end": "938930"
  },
  {
    "text": "lambda manages your throttle limits at the account level if all of a sudden alberto decides that he's gonna spin up",
    "start": "938930",
    "end": "944839"
  },
  {
    "text": "Alberto's lambda load test and use all concurrent executions of lambdas and my",
    "start": "944839",
    "end": "950750"
  },
  {
    "text": "little API that gets called once every couple seconds suddenly gets throttled",
    "start": "950750",
    "end": "956630"
  },
  {
    "text": "I'm gonna be pretty unhappy because my SLA is shot after a few seconds the Alberta might not even notice so so you",
    "start": "956630",
    "end": "965900"
  },
  {
    "text": "know we get we get metric data and we say hey something's going on or I I noticed that something is amiss I want",
    "start": "965900",
    "end": "972230"
  },
  {
    "text": "to dive deeper so we dive deeper in a couple of ways and one of the first ways that we do it is",
    "start": "972230",
    "end": "978620"
  },
  {
    "text": "through tracing so New Relic has a feature called distributed tracing is pretty similar to AWS x-ray but this",
    "start": "978620",
    "end": "985940"
  },
  {
    "text": "provides basically context to crawl across a change set of requests so we're really big believers in distributed",
    "start": "985940",
    "end": "992390"
  },
  {
    "text": "tracing and we we at New Relic we do everything from instrument stuff at the browser the mobile level all the way",
    "start": "992390",
    "end": "1000130"
  },
  {
    "text": "through databases so if you can imagine a customer who you know how",
    "start": "1000130",
    "end": "1005870"
  },
  {
    "text": "a web application that's making a request to an API you want to see the",
    "start": "1005870",
    "end": "1011330"
  },
  {
    "text": "entire chain of events happen so that you can tell where the the offending component is within the chain of events",
    "start": "1011330",
    "end": "1018830"
  },
  {
    "text": "likewise if something errors out here you want to know that it's the thing that caused it it's about like getting",
    "start": "1018830",
    "end": "1024558"
  },
  {
    "text": "the right level of granularity so that you can continue drilling down into the particular thing you care about in other words connecting the component",
    "start": "1024559",
    "end": "1031760"
  },
  {
    "text": "to the detail and that detail comes in the form of a couple mechanisms so",
    "start": "1031760",
    "end": "1038319"
  },
  {
    "text": "specifically with like the lambda execution environment we think that the invocation source is a pretty important",
    "start": "1038319",
    "end": "1045410"
  },
  {
    "text": "thing this is the thing that triggers why the lambda even exists in the first place so when we're instrumenting we've",
    "start": "1045410",
    "end": "1052910"
  },
  {
    "text": "not only pulled the service that's driving the lambda Orange so that we can connect it back to the actual entity",
    "start": "1052910",
    "end": "1059780"
  },
  {
    "text": "that you're that you're is calling the lambda but we also pull the actual body",
    "start": "1059780",
    "end": "1065270"
  },
  {
    "text": "of the request so if you can imagine a situation where you have a stream processor and you have corrupted data",
    "start": "1065270",
    "end": "1071300"
  },
  {
    "text": "because the publisher is no longer you know publishing perform like compliant JSON and that's gonna be a problem that",
    "start": "1071300",
    "end": "1078080"
  },
  {
    "text": "you need to go tell the publishing team to go address it's not something you can fix with your lambda itself",
    "start": "1078080",
    "end": "1083929"
  },
  {
    "text": "likewise right you know understanding that the entire workload for a stream process or really anything is pretty",
    "start": "1083929",
    "end": "1090740"
  },
  {
    "text": "critical for you to be able to actually troubleshoot the consequences that other",
    "start": "1090740",
    "end": "1098630"
  },
  {
    "text": "other data we think is pretty important capturing trace backs is proven to be pretty important here and this one's a",
    "start": "1098630",
    "end": "1105230"
  },
  {
    "text": "little funny because if you look at like our instrumented trace back you actually see a bunch of offending lines of Python",
    "start": "1105230",
    "end": "1110660"
  },
  {
    "text": "that are from the lambda libraries themselves not even your code but this like any trace back is gonna tell you",
    "start": "1110660",
    "end": "1117679"
  },
  {
    "text": "when you have undergone handled exceptions or things you're not expecting SDK operations so this is",
    "start": "1117679",
    "end": "1125360"
  },
  {
    "text": "potentially one of the most critical areas so you know there are exceptions",
    "start": "1125360",
    "end": "1130880"
  },
  {
    "text": "but in serverless environments it's it's pretty reliable that you'll have a few of your own custom components but you'll",
    "start": "1130880",
    "end": "1137360"
  },
  {
    "text": "use a lot of aid us managed components so if you're using DynamoDB you know an s3",
    "start": "1137360",
    "end": "1143660"
  },
  {
    "text": "in the context of a lambda it's pretty important that we instrument the level of detail that's required to get you to",
    "start": "1143660",
    "end": "1150800"
  },
  {
    "text": "an answer quickly when something is going wrong there so if you're dynamo",
    "start": "1150800",
    "end": "1155990"
  },
  {
    "text": "request is getting throttled your lambda is probably not going to succeed it's going to make the API request fail the",
    "start": "1155990",
    "end": "1162830"
  },
  {
    "text": "answer is not my lambda is broken the answer is my dynamo request is getting throttled is it a provision capacity",
    "start": "1162830",
    "end": "1169880"
  },
  {
    "text": "challenge is it a shared tenancy challenge right that that level of",
    "start": "1169880",
    "end": "1177830"
  },
  {
    "text": "detail and basically let's the us then connect them for context so if you think",
    "start": "1177830",
    "end": "1183620"
  },
  {
    "text": "about how the these entities represent",
    "start": "1183620",
    "end": "1188810"
  },
  {
    "text": "themselves we know what's going on we know where the problems at we need to now connect it so that we see the total",
    "start": "1188810",
    "end": "1194300"
  },
  {
    "text": "effect on a workload we know that a function is calling dynamo and everything's behaving just fine but it's",
    "start": "1194300",
    "end": "1200420"
  },
  {
    "text": "publishing to a Kinesis stream that has capacity issues due to a load test and",
    "start": "1200420",
    "end": "1205670"
  },
  {
    "text": "we do this at New Relic because we instrument over 30 AWS services we pull",
    "start": "1205670",
    "end": "1210710"
  },
  {
    "text": "that data into the platform so that we can connect it with your APM instrumented applications or or lambda",
    "start": "1210710",
    "end": "1217250"
  },
  {
    "text": "functions that are instrumented with New Relic and that lets you do fun stuff like see the aggregate stuff that's",
    "start": "1217250",
    "end": "1224900"
  },
  {
    "text": "happening across your AWS services and build custom dashboards that are pretty unique to that so with that I'm gonna",
    "start": "1224900",
    "end": "1233420"
  },
  {
    "text": "hand it over to Shawn he's gonna go through some capital 1 use cases talk",
    "start": "1233420",
    "end": "1238670"
  },
  {
    "text": "about their experience using in lambda hey guys quick intro myself I'm a software",
    "start": "1238670",
    "end": "1244760"
  },
  {
    "text": "engineer for Capital One been there for about two years this is my first",
    "start": "1244760",
    "end": "1249770"
  },
  {
    "text": "reinvent so it's been a really cool experience since one day I'm going to",
    "start": "1249770",
    "end": "1256460"
  },
  {
    "text": "talk to you guys about our development experience around building a server list",
    "start": "1256460",
    "end": "1261500"
  },
  {
    "text": "application kind of like the struggles we ran into excuse me and kind of the",
    "start": "1261500",
    "end": "1268100"
  },
  {
    "text": "tools we use to alleviate those struggles so I work on a team with about three",
    "start": "1268100",
    "end": "1275210"
  },
  {
    "text": "full-time developers and we're building a service application the stack is an",
    "start": "1275210",
    "end": "1282580"
  },
  {
    "text": "active/passive stack east and west route 53 CloudFront s3 and we have our own",
    "start": "1282580",
    "end": "1291590"
  },
  {
    "text": "internal API gateway that manages request to five lambdas in each region",
    "start": "1291590",
    "end": "1299030"
  },
  {
    "text": "but we actually have six totals so there's another lambda and they're doing some background tasks that we need for",
    "start": "1299030",
    "end": "1305900"
  },
  {
    "text": "that post grass snowflake react nodejs",
    "start": "1305900",
    "end": "1311680"
  },
  {
    "text": "and for a large part of our development over the past few years we were relying",
    "start": "1311680",
    "end": "1317210"
  },
  {
    "text": "on cloud watch for monitoring debugging stuff like that and we eventually",
    "start": "1317210",
    "end": "1323990"
  },
  {
    "text": "integrated this new relic tool that we're talking about today database setup",
    "start": "1323990",
    "end": "1331850"
  },
  {
    "text": "is and a read replica east west and to handle deployments we have a custom CI",
    "start": "1331850",
    "end": "1339620"
  },
  {
    "text": "CD platform that was built in-house to kind of handle those compliance needs within a bank so I'm sure we all can",
    "start": "1339620",
    "end": "1349010"
  },
  {
    "text": "relate to this photo as developers but quick question here who is actively",
    "start": "1349010",
    "end": "1355220"
  },
  {
    "text": "developing on a service application right now okay so a good good amount of",
    "start": "1355220",
    "end": "1361550"
  },
  {
    "text": "you guys so I'm sure you you all will relate to everything I'm talking about",
    "start": "1361550",
    "end": "1366650"
  },
  {
    "text": "today so it introduces some new",
    "start": "1366650",
    "end": "1372710"
  },
  {
    "text": "struggles and some familiar ones mainly around debugging reserved concurrency",
    "start": "1372710",
    "end": "1379360"
  },
  {
    "text": "working with timeouts and how much memory do we really need versioning and",
    "start": "1379360",
    "end": "1385510"
  },
  {
    "text": "handling deployments and the local development was a big issue for us like",
    "start": "1385510",
    "end": "1391400"
  },
  {
    "text": "how do we coordinate with devs developing on their machine and",
    "start": "1391400",
    "end": "1396580"
  },
  {
    "text": "simulating like a local lambda environment so we have some good stories",
    "start": "1396580",
    "end": "1401690"
  },
  {
    "text": "about that we may not have enough time for them now so I'd love to talk to you guys afterwards to fill you in there",
    "start": "1401690",
    "end": "1409700"
  },
  {
    "text": "okay so first debugging most of you guys have looked through cloud watch logs",
    "start": "1409700",
    "end": "1416190"
  },
  {
    "text": "they can become a bit cumbersome a cloud",
    "start": "1416190",
    "end": "1421200"
  },
  {
    "text": "watch does provide the right metrics but in the beginning and even now we wanted",
    "start": "1421200",
    "end": "1427980"
  },
  {
    "text": "to see logs specific to application code at a very granular granular level so",
    "start": "1427980",
    "end": "1436860"
  },
  {
    "text": "like in our function code there was a lot of standard out statements we're",
    "start": "1436860",
    "end": "1443040"
  },
  {
    "text": "using Winston to print out some logs to maybe look make them look better but",
    "start": "1443040",
    "end": "1449580"
  },
  {
    "text": "again you're still scrolling through cloud watch to kind of look through and see what the error was so that was a",
    "start": "1449580",
    "end": "1455190"
  },
  {
    "text": "little bit of a shuttle pain point for us so you can only develop in the actual",
    "start": "1455190",
    "end": "1463410"
  },
  {
    "text": "AWS console until you can't in the beginning that was nice",
    "start": "1463410",
    "end": "1470090"
  },
  {
    "text": "easier to debug right but once your deployment package is too big you're",
    "start": "1470090",
    "end": "1475560"
  },
  {
    "text": "developing locally so again we we had a",
    "start": "1475560",
    "end": "1482370"
  },
  {
    "text": "need there for better trace backs and cleaner logs it's kind of the takeaway from that so time out versus memory and",
    "start": "1482370",
    "end": "1491430"
  },
  {
    "text": "the trade-offs when we first started the timeouts were limited to five minutes or",
    "start": "1491430",
    "end": "1497130"
  },
  {
    "text": "300 seconds they've sense increased up to fifteen minutes so if your code is taking too",
    "start": "1497130",
    "end": "1505680"
  },
  {
    "text": "long to execute it could be that it doesn't have enough compute resources to execute the logic so you can increase",
    "start": "1505680",
    "end": "1512610"
  },
  {
    "text": "the memory and do some performance testing there or it could be other",
    "start": "1512610",
    "end": "1517770"
  },
  {
    "text": "services that your lambdas depend on",
    "start": "1517770",
    "end": "1522410"
  },
  {
    "text": "let's see so we quickly just discovered",
    "start": "1522890",
    "end": "1528540"
  },
  {
    "text": "like the trade-off around timeouts and memories and the costs were operating each lambda so kind of the question",
    "start": "1528540",
    "end": "1534690"
  },
  {
    "text": "there is how can we experiment with this trade-off what tools can we use to get you know",
    "start": "1534690",
    "end": "1540380"
  },
  {
    "text": "the right answer to these questions some other issues throttling and reserve",
    "start": "1540380",
    "end": "1547100"
  },
  {
    "text": "concurrency at some point in your development I'm sure everyone here started seeing 429 errors even with a",
    "start": "1547100",
    "end": "1555440"
  },
  {
    "text": "small user base the application that we're working on started to see those early on so if the function is invoked",
    "start": "1555440",
    "end": "1562220"
  },
  {
    "text": "synchronously and it's throttled lambda will return a 429 error and then then",
    "start": "1562220",
    "end": "1568070"
  },
  {
    "text": "voguing service is responsible for the retry so this is a new you know way that",
    "start": "1568070",
    "end": "1574399"
  },
  {
    "text": "we have to handle this on the UI and the other services to account for that retry",
    "start": "1574399",
    "end": "1580399"
  },
  {
    "text": "something that we really didn't like run into before on the UI side so on",
    "start": "1580399",
    "end": "1589700"
  },
  {
    "text": "reaching the concurrency limit associated with the function any further invocation requests to the function are",
    "start": "1589700",
    "end": "1596510"
  },
  {
    "text": "throttled and the invocation doesn't execute your function also if you're not",
    "start": "1596510",
    "end": "1603830"
  },
  {
    "text": "keeping your lambdas warm it will take there will be Layton sees in your requests so one thing we did you'll see",
    "start": "1603830",
    "end": "1611240"
  },
  {
    "text": "this later on to levy eight that was create a cloud watch rule that created a",
    "start": "1611240",
    "end": "1616639"
  },
  {
    "text": "lambda warming event and it runs like every 10 minutes to keep the land up going up from there also at the",
    "start": "1616639",
    "end": "1624919"
  },
  {
    "text": "beginning API gateway had a hard limit of 500 requests per second per account",
    "start": "1624919",
    "end": "1631840"
  },
  {
    "text": "so going over that limit will also produce a 429 throttling response",
    "start": "1631840",
    "end": "1639130"
  },
  {
    "text": "and I don't think the buns not working there we go okay so versioning this was",
    "start": "1645650",
    "end": "1651350"
  },
  {
    "text": "another interesting kind of pain point in setting environment variables if you",
    "start": "1651350",
    "end": "1658309"
  },
  {
    "text": "version of lambda those variables as you know are logged into place and if you",
    "start": "1658309",
    "end": "1663590"
  },
  {
    "text": "want to add if you want to change something like a security group if it's in a V PC you'll have to promote that",
    "start": "1663590",
    "end": "1668630"
  },
  {
    "text": "lambda again so what so our strategy was",
    "start": "1668630",
    "end": "1674240"
  },
  {
    "text": "creating an alias and incrementing the alias each deployment and allowed the",
    "start": "1674240",
    "end": "1680330"
  },
  {
    "text": "pipeline to handle that so if we needed to change the security group we'd run",
    "start": "1680330",
    "end": "1685580"
  },
  {
    "text": "through the whole pipeline through each environment then that land that would get promoted or that alias would get",
    "start": "1685580",
    "end": "1691520"
  },
  {
    "text": "promoted so local development this was",
    "start": "1691520",
    "end": "1698780"
  },
  {
    "text": "one of my favorite parts as a developer you know obviously you don't want to",
    "start": "1698780",
    "end": "1705320"
  },
  {
    "text": "wait for a pipeline to run to see if your lambda function is being properly or the way you intended to do so we were",
    "start": "1705320",
    "end": "1714620"
  },
  {
    "text": "kind of searching for best ways to develop locally we discover a number of",
    "start": "1714620",
    "end": "1721010"
  },
  {
    "text": "different options mainly around the nodejs runtime some people are actually",
    "start": "1721010",
    "end": "1728179"
  },
  {
    "text": "implementing express routes that are map to your event so you can actually have",
    "start": "1728179",
    "end": "1733880"
  },
  {
    "text": "an express server running locally and then see your events go to each route",
    "start": "1733880",
    "end": "1739100"
  },
  {
    "text": "that way but it may be too much you know for what you're doing so I don't think",
    "start": "1739100",
    "end": "1745580"
  },
  {
    "text": "you would need to deploy Express code just to do like a batch job or something",
    "start": "1745580",
    "end": "1750980"
  },
  {
    "text": "similar so there were some trade-offs there and it left us wondering like how",
    "start": "1750980",
    "end": "1756920"
  },
  {
    "text": "do we proceed all right so there's a whole discovery process around",
    "start": "1756920",
    "end": "1762170"
  },
  {
    "text": "serverless development the ecosystem is continuing to grow more more tools are",
    "start": "1762170",
    "end": "1770240"
  },
  {
    "text": "coming out everyday tools around CI CDE local development performance testing",
    "start": "1770240",
    "end": "1776290"
  },
  {
    "text": "and now new relic monitoring bilenda's so next we'll go through some",
    "start": "1776290",
    "end": "1787100"
  },
  {
    "text": "of the tools that we actually use them and set up to kind of help with our development so again see ICD as I",
    "start": "1787100",
    "end": "1794809"
  },
  {
    "text": "mentioned we have a custom pipeline that runs off of a collection of Jenkins and",
    "start": "1794809",
    "end": "1800360"
  },
  {
    "text": "CloudFormation scripts and we'll handle the versioning any updates you need to",
    "start": "1800360",
    "end": "1806330"
  },
  {
    "text": "configuration items like memory timeout reserve concurrency handle all that",
    "start": "1806330",
    "end": "1812330"
  },
  {
    "text": "through the pipeline this was a nice",
    "start": "1812330",
    "end": "1818989"
  },
  {
    "text": "feature to have so we were using docker images locally to send an event to our",
    "start": "1818989",
    "end": "1827690"
  },
  {
    "text": "handler so what it would do is run our code in a docker container that Linux",
    "start": "1827690",
    "end": "1834409"
  },
  {
    "text": "kind of the runtime environment inside of AWS and you pass it events kind of a",
    "start": "1834409",
    "end": "1842090"
  },
  {
    "text": "drawback there is you still have to pass like environment variables through the",
    "start": "1842090",
    "end": "1847100"
  },
  {
    "text": "docker command so you may have a long string of password database password",
    "start": "1847100",
    "end": "1852259"
  },
  {
    "text": "username stuff like that but it really helped kind of alleviate waiting for a pipeline to go and local development in",
    "start": "1852259",
    "end": "1859429"
  },
  {
    "text": "general performance testing with jmeter",
    "start": "1859429",
    "end": "1866320"
  },
  {
    "text": "it's kind of self-explanatory we have our own internal gateway so we would",
    "start": "1867489",
    "end": "1872659"
  },
  {
    "text": "have to route requests through that from jmeter to performance tests or lambdas",
    "start": "1872659",
    "end": "1880149"
  },
  {
    "text": "cloud watch as we discuss dating through the logs was kind of a drawback but we",
    "start": "1880149",
    "end": "1886279"
  },
  {
    "text": "still utilize it and then New Relic had",
    "start": "1886279",
    "end": "1892580"
  },
  {
    "text": "some really good benefits with this new monitoring tool the - obviously the",
    "start": "1892580",
    "end": "1898489"
  },
  {
    "text": "dashboard is a huge plus [Music] creating custom events was a big help as",
    "start": "1898489",
    "end": "1904549"
  },
  {
    "text": "a developer so in your your error handling logic you can add New Relic",
    "start": "1904549",
    "end": "1910549"
  },
  {
    "text": "custom events and there and from the dashboard you can start to get really good trace backs to where",
    "start": "1910549",
    "end": "1916980"
  },
  {
    "text": "problems are happening so just a couple",
    "start": "1916980",
    "end": "1922590"
  },
  {
    "text": "of follow-ups findings keep your Lando's warm with a cloud watch rule use docker",
    "start": "1922590",
    "end": "1930330"
  },
  {
    "text": "images for local development and the new relic monitoring tool gave us better",
    "start": "1930330",
    "end": "1936210"
  },
  {
    "text": "visibility into our logs and where errors were actually occurring and with",
    "start": "1936210",
    "end": "1941370"
  },
  {
    "text": "that I'm gonna pass it back to Andrew cool thanks Sean sure so just to you",
    "start": "1941370",
    "end": "1948750"
  },
  {
    "text": "know kind of wrap things up what's next right so we kind of know what what data",
    "start": "1948750",
    "end": "1954180"
  },
  {
    "text": "we think is important what's the answer Sean explained that you know he clearly had some challenges using cloud watch as",
    "start": "1954180",
    "end": "1961110"
  },
  {
    "text": "a a scalable solution in large getting",
    "start": "1961110",
    "end": "1967200"
  },
  {
    "text": "more complex architectures so New Relic announced a private beta for a lambda",
    "start": "1967200",
    "end": "1974910"
  },
  {
    "text": "monitoring solution last week we'll have more details on our blog on",
    "start": "1974910",
    "end": "1980370"
  },
  {
    "text": "New Relic comm but you can stop by our booth as well we have booth here in the Aria quad as well as the Venetian but",
    "start": "1980370",
    "end": "1987810"
  },
  {
    "text": "you know generally speaking I would say find your tools gather the data figure",
    "start": "1987810",
    "end": "1993750"
  },
  {
    "text": "out how to synthesize it understand what's meaningful to you not every piece",
    "start": "1993750",
    "end": "1999180"
  },
  {
    "text": "of data is necessarily signal so figure out what is to your business in your",
    "start": "1999180",
    "end": "2004370"
  },
  {
    "text": "application and then that'll make you more comfortable developing on server",
    "start": "2004370",
    "end": "2009500"
  },
  {
    "text": "list with that we'll take a bunch of questions thanks guys",
    "start": "2009500",
    "end": "2014799"
  },
  {
    "text": "[Applause]",
    "start": "2019010",
    "end": "2028049"
  },
  {
    "text": "yeah yeah yeah so the we basically we've",
    "start": "2030520",
    "end": "2038440"
  },
  {
    "text": "built instrumentation based on our traditional APM based instrumentation",
    "start": "2038440",
    "end": "2044020"
  },
  {
    "text": "that New Relic offers so it kind of some of the magic of New Relic right is that you can install our agent and you get",
    "start": "2044020",
    "end": "2051070"
  },
  {
    "text": "data out of the box so we we've basically created us I'll call it like",
    "start": "2051070",
    "end": "2057610"
  },
  {
    "text": "lambda mode for our agents it uses a mechanism to essentially log data which",
    "start": "2057610",
    "end": "2063100"
  },
  {
    "text": "we then backhaul into the New Relic platform you get a lot of the same depth that our traditional APM agents do but a",
    "start": "2063100",
    "end": "2069370"
  },
  {
    "text": "lot of more relevant data to lambda executions specifically so that you can actually find specific invitations or",
    "start": "2069370",
    "end": "2075820"
  },
  {
    "text": "understand what the specific issue is that's causing a long-running lambda or a failed implication",
    "start": "2075820",
    "end": "2082120"
  },
  {
    "text": "so you basically there's a the blog entry has kind of all the details but you say hey I'm interested and then",
    "start": "2082120",
    "end": "2087908"
  },
  {
    "text": "we'll send you an email saying here's you know how you'll you'll get involved",
    "start": "2087909",
    "end": "2095250"
  },
  {
    "text": "yep yeah so that's that's a great question so there are a couple",
    "start": "2096120",
    "end": "2101560"
  },
  {
    "text": "approaches to backhauling data right so traditionally a lot of monitoring",
    "start": "2101560",
    "end": "2107560"
  },
  {
    "text": "approaches to basically synchronously done it with a persistent application just you're sacrificing some of your",
    "start": "2107560",
    "end": "2112690"
  },
  {
    "text": "network bandwidth for backhauling data to a third party for obvious reasons that's not a great model with lambda",
    "start": "2112690",
    "end": "2119620"
  },
  {
    "text": "right you don't want to today there's no mechanism to after a successful",
    "start": "2119620",
    "end": "2126520"
  },
  {
    "text": "invocation like do some on shutdown activity that sweeps the data out the",
    "start": "2126520",
    "end": "2132460"
  },
  {
    "text": "one caveat to that is that cloud watch does it for free underneath the hood so",
    "start": "2132460",
    "end": "2137950"
  },
  {
    "text": "our instrumentation adds really minimal overhead and we've been I mean new relics been around for quite some time",
    "start": "2137950",
    "end": "2143230"
  },
  {
    "text": "and our agent teams have a lot of experience building instrumentation without adding a ton of overhead it's",
    "start": "2143230",
    "end": "2149380"
  },
  {
    "text": "the the marshalling and the gathering and marshalling of data that takes real-time so by decoupling that and",
    "start": "2149380",
    "end": "2157840"
  },
  {
    "text": "using cloud watches at home for basically instrumented log data and then",
    "start": "2157840",
    "end": "2162910"
  },
  {
    "text": "asynchronously sweeping that back to New Relic platform we had almost no overhead to the function itself yep",
    "start": "2162910",
    "end": "2172760"
  },
  {
    "text": "yeah uses cloud watch log streams it's",
    "start": "2175849",
    "end": "2183540"
  },
  {
    "text": "the log yes the log stream from from cloud watch logs to a lambda function basically that gets deployed in your",
    "start": "2183540",
    "end": "2189599"
  },
  {
    "text": "account yeah we basically provide the lambda function which can be you can find it today into several application",
    "start": "2189599",
    "end": "2195930"
  },
  {
    "text": "repository from AWS it includes a Sam template and everything so you basically deploy this lambda in every region and",
    "start": "2195930",
    "end": "2205020"
  },
  {
    "text": "you can subscribe this lambda to the lock groups that you have so this what",
    "start": "2205020",
    "end": "2210930"
  },
  {
    "text": "they told us will do for you is basically collect the batches of implications that the instrumentation is",
    "start": "2210930",
    "end": "2217859"
  },
  {
    "text": "writing in forward slugs and send all those batches into this lambda that will collect the logs and send it back to New",
    "start": "2217859",
    "end": "2224369"
  },
  {
    "text": "Relic yes",
    "start": "2224369",
    "end": "2229970"
  },
  {
    "text": "yeah so a lot of the same features that you're used to using on the New Relic platform are completely available in in",
    "start": "2234450",
    "end": "2240940"
  },
  {
    "text": "the lambda context as well so I've alerted on data points like events or",
    "start": "2240940",
    "end": "2247750"
  },
  {
    "text": "totally there because we're generating events for each of the invitations in fact we're generating a lot of events",
    "start": "2247750",
    "end": "2252910"
  },
  {
    "text": "you know if your invitation goes talks to dynamo and then does something else",
    "start": "2252910",
    "end": "2258970"
  },
  {
    "text": "you'll see multiple events represented each of those segments of the invocation",
    "start": "2258970",
    "end": "2265230"
  },
  {
    "text": "specifically alerts so every capability from the relic on alerting like baseline",
    "start": "2267030",
    "end": "2273400"
  },
  {
    "text": "alert query based alerting all that and then he was asking where you are in your head where you can where you would",
    "start": "2273400",
    "end": "2280299"
  },
  {
    "text": "configure it it's in the other sections yeah the same right so alert is a",
    "start": "2280299",
    "end": "2285339"
  },
  {
    "text": "platform capability at their relic so regardless the product you're using you will use the same alert system so we",
    "start": "2285339",
    "end": "2292930"
  },
  {
    "text": "have like six products in the relic and the single alerting product across the six of them so you can basically write",
    "start": "2292930",
    "end": "2301150"
  },
  {
    "text": "the same alert for browser performance mobile performance like back and",
    "start": "2301150",
    "end": "2306940"
  },
  {
    "text": "services performance application service applications and infrastructure yep",
    "start": "2306940",
    "end": "2318960"
  },
  {
    "text": "yeah",
    "start": "2322180",
    "end": "2325180"
  },
  {
    "text": "yeah so so our lambda monitoring solutions very focused on your",
    "start": "2334150",
    "end": "2339650"
  },
  {
    "text": "application code less focused on network level stuff so New Relic infrastructure",
    "start": "2339650",
    "end": "2345529"
  },
  {
    "text": "historically has has monitored a lot of the kind of like underlying components of the infrastructure that does that and",
    "start": "2345529",
    "end": "2350719"
  },
  {
    "text": "it's the thing is a lot less applicable in the lambda context but I think it's I",
    "start": "2350719",
    "end": "2356209"
  },
  {
    "text": "mean it's worth looking at it what one of the interesting things is that the the lambda execution environment is",
    "start": "2356209",
    "end": "2363049"
  },
  {
    "text": "probably one of the first places it's like a true hybridized environment between like carrying a lot of the core",
    "start": "2363049",
    "end": "2369140"
  },
  {
    "text": "infrastructure data into the context of the actual application like execution",
    "start": "2369140",
    "end": "2374299"
  },
  {
    "text": "itself so I think we're still learning a lot of things about you know what the right payload of data is and what we",
    "start": "2374299",
    "end": "2381259"
  },
  {
    "text": "have access to to understand what's happening any more questions yep",
    "start": "2381259",
    "end": "2391209"
  },
  {
    "text": "yeah the the biggest benefit that I had was with the trace backs and getting",
    "start": "2400559",
    "end": "2406900"
  },
  {
    "text": "like custom events sent to a dashboard does that answer your question",
    "start": "2406900",
    "end": "2413099"
  },
  {
    "text": "sure so say you're querying Postgres and",
    "start": "2413099",
    "end": "2419890"
  },
  {
    "text": "there's an error and inside of that if block where you're with if there is an error you can put a New Relic custom",
    "start": "2419890",
    "end": "2427450"
  },
  {
    "text": "event with a key by your own name whatever you want to say so say it's",
    "start": "2427450",
    "end": "2432609"
  },
  {
    "text": "like a lambda that updates a car database right you could say car update",
    "start": "2432609",
    "end": "2441099"
  },
  {
    "text": "and then send in that error object and then you can see it in in the console",
    "start": "2441099",
    "end": "2448259"
  },
  {
    "text": "and get trace backs to on other services so if it was like Postgres within AWS",
    "start": "2448259",
    "end": "2455999"
  },
  {
    "text": "you would you could see that there was a Postgres error or if you're using some sdk write like KMS encryption or any",
    "start": "2455999",
    "end": "2464289"
  },
  {
    "text": "other it of any other resource available from that ck you can see that as well",
    "start": "2464289",
    "end": "2470700"
  },
  {
    "text": "for the standard throughput yeah",
    "start": "2477570",
    "end": "2485820"
  },
  {
    "text": "yeah so I'll talk specifically about William to use case and then Alberto kind of talk about the the larger APM",
    "start": "2520550",
    "end": "2526520"
  },
  {
    "text": "context so in the lamda use case today we actually are backhauling all of the",
    "start": "2526520",
    "end": "2531710"
  },
  {
    "text": "data to the New Relic platform and that's probably not super sustainable long term you know sampling was created",
    "start": "2531710",
    "end": "2538520"
  },
  {
    "text": "so that it gave you kind of a a good indicator a good representative set of",
    "start": "2538520",
    "end": "2545120"
  },
  {
    "text": "data that told you what was generally going on and then you could dive deeper I think what we want to avoid is",
    "start": "2545120",
    "end": "2550910"
  },
  {
    "text": "customers then having to use another tool or another data source to then to figure out what's actually going on the",
    "start": "2550910",
    "end": "2558560"
  },
  {
    "text": "the approach that we've taken actually has a ton of power where where we've kind of durably stored like the actual",
    "start": "2558560",
    "end": "2565190"
  },
  {
    "text": "every actual invocation so we know for a particular request ID what services got",
    "start": "2565190",
    "end": "2572480"
  },
  {
    "text": "talked to what code got executed if we grabbed a stack trace its there and if we didn't sample it because of some",
    "start": "2572480",
    "end": "2578000"
  },
  {
    "text": "criteria there's a potential but down the road we could then pull it back into the platform so that you have the ability to visualize it and I think that",
    "start": "2578000",
    "end": "2584510"
  },
  {
    "text": "that's kind of how we're thinking about it right which is that we want to give you as much data as we think is relevant",
    "start": "2584510",
    "end": "2590030"
  },
  {
    "text": "in real time well remaining economical and realistic so that you're not paying massive data",
    "start": "2590030",
    "end": "2595190"
  },
  {
    "text": "transfer bills or seeing lots of extraneous data but at the same time if you want to find that particular request",
    "start": "2595190",
    "end": "2600830"
  },
  {
    "text": "ID that is important to you to understand what actually happened in this one instance that you have a",
    "start": "2600830",
    "end": "2605960"
  },
  {
    "text": "mechanism to do so I think more broadly around APM there's there's a lot of",
    "start": "2605960",
    "end": "2612350"
  },
  {
    "text": "evolution happening around harvest cycles and we're happy to chat with you about that offline at the at the booth",
    "start": "2612350",
    "end": "2619130"
  },
  {
    "text": "if you have additional questions there anything else dad no I think so yeah we contribute offline if you want",
    "start": "2619130",
    "end": "2626829"
  },
  {
    "text": "anymore not everyone enjoy the pub crawl yeah thank you thank you guys thank you",
    "start": "2629660",
    "end": "2637990"
  }
]