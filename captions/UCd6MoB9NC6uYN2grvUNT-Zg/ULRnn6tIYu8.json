[
  {
    "start": "0",
    "end": "16000"
  },
  {
    "text": "Hello, and welcome to an introduction\n  and a demo of Amazon RDS Proxy.",
    "start": "566",
    "end": "4833"
  },
  {
    "text": "In this video, we'll introduce Amazon RDS Proxy",
    "start": "5033",
    "end": "7733"
  },
  {
    "text": "we'll talk about some of its benefits",
    "start": "7733",
    "end": "9333"
  },
  {
    "text": "we'll show the architecture of our demo application",
    "start": "9333",
    "end": "11833"
  },
  {
    "text": "and then we'll spend most of the time demoing setup\n     of a proxy and using it from a Lambda function.",
    "start": "11833",
    "end": "16266"
  },
  {
    "start": "16000",
    "end": "55000"
  },
  {
    "text": "Amazon RDS Proxy is a fully-managed,\n      highly-available database proxy",
    "start": "16700",
    "end": "20600"
  },
  {
    "text": "   for Amazon Relational\nDatabase Service, or RDS",
    "start": "20600",
    "end": "23200"
  },
  {
    "text": " that makes applications more scalable, more\nresilient to database failures, and more secure.",
    "start": "23200",
    "end": "28600"
  },
  {
    "text": "      Amazon RDS Proxy can be used for\nserverless applications built in AWS Lambda",
    "start": "28600",
    "end": "33200"
  },
  {
    "text": "but is also a great feature for applications\nrunning in containers on ECS or on EC2.",
    "start": "33200",
    "end": "37800"
  },
  {
    "text": "     The same advantages are\nrealized for all application types",
    "start": "37800",
    "end": "40600"
  },
  {
    "text": "without having to standup, run, and\n maintain your own database proxy.",
    "start": "40600",
    "end": "44800"
  },
  {
    "text": "   Amazon RDS Proxy sits between your\napplication code and your relational database",
    "start": "45800",
    "end": "49500"
  },
  {
    "text": "and managed the database connections created by your application\n       to make more efficient use of the database's resources.",
    "start": "49500",
    "end": "55100"
  },
  {
    "text": "Three of the main benefits of using Amazon RDS\n     Proxy are scaling, resilience, and security.",
    "start": "55100",
    "end": "60266"
  },
  {
    "text": "Let's talk a bit more about each one.",
    "start": "60266",
    "end": "62232"
  },
  {
    "start": "62000",
    "end": "89000"
  },
  {
    "text": "       An Amazon RDS Proxy maintains a pool of\nestablished connections to RDS database instances,",
    "start": "63266",
    "end": "67965"
  },
  {
    "text": "reducing the stress on database resources that typically\n     occurs when new connections are established.",
    "start": "67966",
    "end": "72566"
  },
  {
    "text": "RDS Proxy also shares database connections,",
    "start": "72566",
    "end": "75566"
  },
  {
    "text": "      so that there are fewer total\nconnections accessing the database.",
    "start": "75566",
    "end": "78866"
  },
  {
    "text": "This connection pooling enables your database to efficiently\n     support a large number of application connections",
    "start": "78866",
    "end": "83866"
  },
  {
    "text": "and frequency of connection establishment,",
    "start": "83866",
    "end": "85766"
  },
  {
    "text": "so your application can scale without\n       comprimising performance.",
    "start": "85766",
    "end": "89066"
  },
  {
    "text": "Amazon RDS Proxy minimizes application disruption from\n     outages affecting the availability of your database,",
    "start": "89833",
    "end": "95300"
  },
  {
    "text": "  by automatically connecting to a new database\ninstance while preserving application connections.",
    "start": "95300",
    "end": "100200"
  },
  {
    "text": "When failovers occur, rather than rely\non DNS changes to reroute requests",
    "start": "100200",
    "end": "104700"
  },
  {
    "text": "RDS Proxy is able to route requests\ndirectly to the new database instance.",
    "start": "104700",
    "end": "109000"
  },
  {
    "text": "This can reduce failover times for\nAurora and RDS by up to 66%.",
    "start": "109000",
    "end": "113200"
  },
  {
    "text": "Amazon RDS Proxy is highly-available itself and\n       deployed over multiple availability zones.",
    "start": "114400",
    "end": "119700"
  },
  {
    "text": "    Amazon RDS Proxy gives you\nadditional control over data security",
    "start": "121000",
    "end": "124300"
  },
  {
    "text": "by giving you the choice to enforce IAM\n  authentication for database access",
    "start": "124300",
    "end": "128000"
  },
  {
    "text": "to avoid the risky practice of hard coding\ndatabase credentials into application code.",
    "start": "128000",
    "end": "132000"
  },
  {
    "text": "RDS Proxy also enables you to centrally manage\ndatabase credentials using AWS Secrets Manager.",
    "start": "132800",
    "end": "138166"
  },
  {
    "start": "138000",
    "end": "152000"
  },
  {
    "text": "Here is the architecture of our demo.",
    "start": "138500",
    "end": "140300"
  },
  {
    "text": "    This architecture shows a simple\nserverless API fronted by API Gateway.",
    "start": "140300",
    "end": "144400"
  },
  {
    "text": "  Lambda hosts the application logic of the API\nwhich includes running queries against a database,",
    "start": "144400",
    "end": "149000"
  },
  {
    "text": "in this case an Amazon Aurora MySQL database.",
    "start": "149000",
    "end": "152500"
  },
  {
    "start": "152000",
    "end": "169000"
  },
  {
    "text": "Now we'll change the architecture\nto include Amazon RDS Proxy.",
    "start": "152500",
    "end": "156200"
  },
  {
    "text": "As you can see, the proxy sits between our\napplication code and our Aurora database.",
    "start": "156200",
    "end": "160099"
  },
  {
    "text": "Our application connects to RDS Proxy in the\n  same way it connects to Amazon Aurora",
    "start": "160100",
    "end": "164700"
  },
  {
    "text": "so minimal code changes would be needed\n to make this update in most applications.",
    "start": "164700",
    "end": "169166"
  },
  {
    "start": "169000",
    "end": "178000"
  },
  {
    "text": "And now, time for the demo.",
    "start": "169166",
    "end": "171300"
  },
  {
    "text": "In this demo we will walk through some\nexisting resources that are setup already",
    "start": "171300",
    "end": "175000"
  },
  {
    "text": "such as the Aurora database, the\n  API, and the Lambda function.",
    "start": "175000",
    "end": "178500"
  },
  {
    "start": "178000",
    "end": "188000"
  },
  {
    "text": "    We will then walk through the steps of creating an\nAmazon RDS Proxy and using it in our Lambda function.",
    "start": "178500",
    "end": "183800"
  },
  {
    "text": "  We'll close by showing some test results\nthat illustrate the benefits of using a proxy.",
    "start": "183800",
    "end": "187700"
  },
  {
    "start": "188000",
    "end": "641000"
  },
  {
    "text": "Now we'll head over to the AWS console.",
    "start": "189500",
    "end": "192000"
  },
  {
    "text": "First, let's take a look at the\nAPI defined in API Gateway.",
    "start": "193200",
    "end": "196599"
  },
  {
    "text": "It's defined as a simple API with one route",
    "start": "196600",
    "end": "199100"
  },
  {
    "text": "which allows us to pull a list of contact information\n  such as name and email from the database.",
    "start": "199100",
    "end": "203666"
  },
  {
    "text": "Now, we'll look at the database.",
    "start": "204733",
    "end": "206533"
  },
  {
    "text": "  It is an Aurora MySQL\ndatabase with 2 instances",
    "start": "206533",
    "end": "209433"
  },
  {
    "text": "which are deployed across two availability zones.",
    "start": "209433",
    "end": "212433"
  },
  {
    "text": "Here is a quick look at the Lambda function.",
    "start": "214333",
    "end": "216532"
  },
  {
    "text": "The Lambda function is attached to a VPC and\nimplements the application logic behind the API.",
    "start": "216533",
    "end": "221533"
  },
  {
    "text": "This includes querying for a list\nof contacts from the database",
    "start": "221533",
    "end": "224533"
  },
  {
    "text": "and building the response\nto return to API Gateway.",
    "start": "224533",
    "end": "227466"
  },
  {
    "text": "We'll dive deeper into the\ncode later in this demo.",
    "start": "227900",
    "end": "230666"
  },
  {
    "text": "Now, let's create a database proxy.",
    "start": "231400",
    "end": "233400"
  },
  {
    "text": "The first step is to create a new database\n   secret in AWS Secrets Manager.",
    "start": "233400",
    "end": "237166"
  },
  {
    "text": "This secret will be used by RDS Proxy\n     to connect to the database",
    "start": "237166",
    "end": "240733"
  },
  {
    "text": "   without having to pass\ncredentials in from the code.",
    "start": "240733",
    "end": "243300"
  },
  {
    "text": "First, click on Store a new secret.",
    "start": "244033",
    "end": "246400"
  },
  {
    "text": "This secret is credentials for an RDS Database.",
    "start": "246400",
    "end": "249532"
  },
  {
    "text": "Specify the database username\n  and that user's password.",
    "start": "250133",
    "end": "253633"
  },
  {
    "text": "Leave the default encryption key and\nthen specify the Aurora MySQL database.",
    "start": "254133",
    "end": "258566"
  },
  {
    "text": "Choose the name for the secret.",
    "start": "260500",
    "end": "262466"
  },
  {
    "text": "Click on next.",
    "start": "262966",
    "end": "264833"
  },
  {
    "text": "I am leaving rotation\ndisabled for this demo. ",
    "start": "265733",
    "end": "268366"
  },
  {
    "text": "Click on next again.",
    "start": "268366",
    "end": "269766"
  },
  {
    "text": "And finally, click on Store\nto store the secret.",
    "start": "270800",
    "end": "273800"
  },
  {
    "text": "Now it's time to create the proxy.",
    "start": "274600",
    "end": "276633"
  },
  {
    "text": "To create a proxy we'll go to the RDS console",
    "start": "276633",
    "end": "279633"
  },
  {
    "text": "and click on proxies in the\nleft-hand navigation pane.",
    "start": "279633",
    "end": "282133"
  },
  {
    "text": "You can see there is an\nexisting proxy already.",
    "start": "282733",
    "end": "284933"
  },
  {
    "text": "Let's go through the steps\n  of creating a new one.",
    "start": "284933",
    "end": "287333"
  },
  {
    "text": "Start by clicking on Create Proxy.",
    "start": "287633",
    "end": "289833"
  },
  {
    "text": "Specify a unique ID for the proxy.",
    "start": "291733",
    "end": "294533"
  },
  {
    "text": "I'm selecting Require TLS.",
    "start": "295300",
    "end": "298300"
  },
  {
    "text": "This requires connections to the proxy\nfrom the app to be TLS connections.",
    "start": "298300",
    "end": "302932"
  },
  {
    "text": "I'll leave the idle connection\ntimeout at its default value.",
    "start": "303533",
    "end": "306533"
  },
  {
    "text": "This is the time the proxy will allow\nconnections to be idle before closing them.",
    "start": "306533",
    "end": "310633"
  },
  {
    "text": "Choose the Aurora database.",
    "start": "311566",
    "end": "314100"
  },
  {
    "text": "I am leaving the connection pool maximum\nconnections value at the default of 100.",
    "start": "314700",
    "end": "318900"
  },
  {
    "text": "Note that this value is a percentage of the number of\nmaximum connections that the database allows",
    "start": "319666",
    "end": "323866"
  },
  {
    "text": "and not an absolute number of connections.",
    "start": "323866",
    "end": "326366"
  },
  {
    "text": "This value should be set lower if there are other\napplications or proxies using this database.",
    "start": "326366",
    "end": "331266"
  },
  {
    "text": "Next choose the database\nsecret created earlier.",
    "start": "331533",
    "end": "334233"
  },
  {
    "text": "Leave the role selection as create IAM role.",
    "start": "334233",
    "end": "337233"
  },
  {
    "text": "This will create an IAM role which allows\nRDS to access the database secret.",
    "start": "337233",
    "end": "340233"
  },
  {
    "text": "In this demo I am selecting\nrequire IAM Authentication.",
    "start": "341866",
    "end": "345366"
  },
  {
    "text": "This requires the application to use\nIAM auth when connecting to the proxy.",
    "start": "345366",
    "end": "349666"
  },
  {
    "text": "This is a nice feature as it means our\napplication will connect using a role",
    "start": "349666",
    "end": "353565"
  },
  {
    "text": "rather than have to manage\ndatabase credentials in the code.",
    "start": "353566",
    "end": "357066"
  },
  {
    "text": "The list of subnets is populated based on\nthe VPC where the database is deployed.",
    "start": "357500",
    "end": "362200"
  },
  {
    "text": "Here, I'm unchecking the public subnets,",
    "start": "362200",
    "end": "365000"
  },
  {
    "text": "leaving only the private ones.",
    "start": "365000",
    "end": "366500"
  },
  {
    "text": "Under additional configuration we can choose\nwhich security group to associate with the proxy.",
    "start": "367500",
    "end": "371900"
  },
  {
    "text": "In this example I am choosing\nthe RDS security group",
    "start": "371900",
    "end": "374900"
  },
  {
    "text": "which happens to be the same security\ngroup associated with the database.",
    "start": "374900",
    "end": "377900"
  },
  {
    "text": "Then click Create proxy.",
    "start": "379100",
    "end": "381200"
  },
  {
    "text": "While the proxy is being created, let's\ntalk a bit more about security groups",
    "start": "383366",
    "end": "386900"
  },
  {
    "text": "and how they work with RDS Proxy.",
    "start": "386900",
    "end": "388866"
  },
  {
    "text": "Security Groups are found\nin the VPC console.",
    "start": "388866",
    "end": "391633"
  },
  {
    "text": "In my case, filtering by RDS\nshows two security groups.",
    "start": "391633",
    "end": "395033"
  },
  {
    "text": "One is the application security group\nassociated with the Lambda function.",
    "start": "395033",
    "end": "399233"
  },
  {
    "text": "The second is the database security group\nassociated with both the database and the proxy.",
    "start": "399233",
    "end": "403800"
  },
  {
    "text": "Looking at the inbound rules for\nthe database group shows two rules,",
    "start": "404266",
    "end": "407565"
  },
  {
    "text": "both allowing inbound connections\non the MySQL port.",
    "start": "407566",
    "end": "410866"
  },
  {
    "text": "One is inbound to the database\ngroup from the application group.",
    "start": "410866",
    "end": "414566"
  },
  {
    "text": "The second is inbound to the database group\nfrom that same database security group.",
    "start": "414566",
    "end": "418666"
  },
  {
    "text": "To connect to the database through RDS\nproxy two inbound rules are needed.",
    "start": "419233",
    "end": "422933"
  },
  {
    "text": "First, connections need to be allowed\nto the proxy from the application.",
    "start": "422933",
    "end": "427033"
  },
  {
    "text": "Second, connections need to be allowed\nto the database from the proxy.",
    "start": "427033",
    "end": "430533"
  },
  {
    "text": "Both of these are port 3306.",
    "start": "430533",
    "end": "432633"
  },
  {
    "text": "In my case the proxy is in the same\nsecurity group as the database",
    "start": "433633",
    "end": "436333"
  },
  {
    "text": "so I needed to allow inbound connections to the\ndatabase group from the same database group.",
    "start": "436333",
    "end": "440433"
  },
  {
    "text": "Just remember you need to allow\nconnections to the proxy from the app",
    "start": "441433",
    "end": "444433"
  },
  {
    "text": "and to the database from the proxy.",
    "start": "444433",
    "end": "447133"
  },
  {
    "text": "Now let's check to see if the proxy is created.",
    "start": "447133",
    "end": "449566"
  },
  {
    "text": "Yes, it is ready.",
    "start": "450566",
    "end": "451566"
  },
  {
    "text": "I'm going to go in and copy the proxy\nendpoint to use in the lambda function.",
    "start": "451566",
    "end": "456366"
  },
  {
    "text": "Here is the Lambda function.",
    "start": "456900",
    "end": "459199"
  },
  {
    "text": "First, I'll scroll down to the\nenvironment variables.",
    "start": "459200",
    "end": "461700"
  },
  {
    "text": "I created these environment variables when\nI created the Lambda function.",
    "start": "461700",
    "end": "464700"
  },
  {
    "text": "This is things such as database name,\nusername and endpoint are configured.",
    "start": "465266",
    "end": "468766"
  },
  {
    "text": "In this way I can access them in the Lambda\nwithout having them directly in the code.",
    "start": "468766",
    "end": "473065"
  },
  {
    "text": "I'll paste in the proxy endpoint.",
    "start": "473066",
    "end": "475333"
  },
  {
    "text": "And click on save to save the variables.",
    "start": "475866",
    "end": "478866"
  },
  {
    "text": "Now I'll configure the execution\nrole for the lambda function.",
    "start": "478966",
    "end": "479733"
  },
  {
    "text": "Now I'll configure the execution\nrole for the lambda function.",
    "start": "479733",
    "end": "482466"
  },
  {
    "text": "This is what controls what the Lambda\nfunction is allowed to do in AWS.",
    "start": "482466",
    "end": "485866"
  },
  {
    "text": "I'll click on the role and it\nis opened in the IAM console.",
    "start": "486733",
    "end": "489566"
  },
  {
    "text": "As of now there are\ntwo polices attached.",
    "start": "490866",
    "end": "493466"
  },
  {
    "text": "These policies were attached when\nI created the Lambda function",
    "start": "493466",
    "end": "496166"
  },
  {
    "text": "and they allow the Lambda\nto do basic things",
    "start": "496166",
    "end": "497965"
  },
  {
    "text": "like log to CloudWatch Logs\nand attach to the VPC.",
    "start": "497966",
    "end": "501233"
  },
  {
    "text": "What is missing is the ability for the Lambda\nto connect to the database proxy.",
    "start": "501233",
    "end": "505400"
  },
  {
    "text": "I could add the policy here\nbut there is an easier way.",
    "start": "505400",
    "end": "508400"
  },
  {
    "text": "If I go back to the Lambda function I\ncan attach a proxy to the function.",
    "start": "508400",
    "end": "512700"
  },
  {
    "text": "To do so, click on Add database proxy and\nchoose the proxy that was just created.",
    "start": "512700",
    "end": "517900"
  },
  {
    "text": "By doing this the Lambda console takes\ncare of adding the necessary policy to the role.",
    "start": "517900",
    "end": "522900"
  },
  {
    "text": "I'll go back to the IAM\nconsole to verify this.",
    "start": "525300",
    "end": "528200"
  },
  {
    "text": "I can see that there is\na new policy attached.",
    "start": "529200",
    "end": "531800"
  },
  {
    "text": "If I open up the policy,",
    "start": "531800",
    "end": "534433"
  },
  {
    "text": "I can see it allows\nconnections to the proxy.",
    "start": "534433",
    "end": "536300"
  },
  {
    "text": "Now I'll walk thorough the Lambda code.",
    "start": "538233",
    "end": "540699"
  },
  {
    "text": "At a high-level, whenever an API request is\nmade the Lambda function is invoked.",
    "start": "540700",
    "end": "544900"
  },
  {
    "text": "In this simple app the Lambda\nconnects to the database,",
    "start": "544900",
    "end": "547500"
  },
  {
    "text": "runs a query, and uses the\nresults to build the API response.",
    "start": "547500",
    "end": "551700"
  },
  {
    "text": "Let's take a look.",
    "start": "551700",
    "end": "552700"
  },
  {
    "text": "First I'm pulling in the AWS SDK\nas well as a javascript MySQL client.",
    "start": "553700",
    "end": "558200"
  },
  {
    "text": "Since the proxy requires IAM auth, I\nneed to get an authentication token.",
    "start": "559900",
    "end": "564400"
  },
  {
    "text": "This is done by first creating\nan RDS signer object.",
    "start": "564400",
    "end": "568800"
  },
  {
    "text": "The object is created using parameters\nfrom the environment variables",
    "start": "568800",
    "end": "572200"
  },
  {
    "text": "such as region, endpoint, port and user.",
    "start": "572200",
    "end": "575500"
  },
  {
    "text": "The signer is then used to get an auth token.",
    "start": "575500",
    "end": "578500"
  },
  {
    "text": "The database connection object\nis created using environment variables,",
    "start": "579866",
    "end": "583466"
  },
  {
    "text": "and the password is set\nto be the auth token.",
    "start": "583466",
    "end": "586366"
  },
  {
    "text": "Now the call is made to\nconnect to the proxy.",
    "start": "587866",
    "end": "590466"
  },
  {
    "text": "This code is the same code as if\nconnecting directly to the database.",
    "start": "590466",
    "end": "594366"
  },
  {
    "text": "After the connection succeeds\nthe query is executed.",
    "start": "594366",
    "end": "597666"
  },
  {
    "text": "In this simple example the query is just a\nselect all rows from our contacts table.",
    "start": "597666",
    "end": "602466"
  },
  {
    "text": "When the query returns the results are used to\nbuild an API response to return to API Gateway.",
    "start": "602466",
    "end": "606766"
  },
  {
    "text": "Now I'll test out the Lambda function.",
    "start": "608966",
    "end": "611066"
  },
  {
    "text": "For a quick test I'll click the Test\nbutton in the Lambda console.",
    "start": "611066",
    "end": "614333"
  },
  {
    "text": "This is successful and the list of\ncontacts from the database is shown.",
    "start": "615333",
    "end": "619233"
  },
  {
    "text": "Now I'll hit the API from a Postman client.",
    "start": "620100",
    "end": "622699"
  },
  {
    "text": "This request is a simple GET\nrequest to the / contacts path.",
    "start": "622700",
    "end": "626300"
  },
  {
    "text": "And we see this works as well.",
    "start": "627600",
    "end": "630000"
  },
  {
    "text": "And there it is.",
    "start": "631600",
    "end": "632699"
  },
  {
    "text": "I created an Amazon RDS Proxy and configured\nthe Lambda function to use the proxy.",
    "start": "632700",
    "end": "637000"
  },
  {
    "text": "Not to worry if you didn't catch it all a code\nrepo for the lambda will be linked from the video.",
    "start": "637800",
    "end": "642100"
  },
  {
    "start": "641000",
    "end": "705000"
  },
  {
    "text": "Now let's take a look at\nsome test results comparing",
    "start": "643333",
    "end": "645433"
  },
  {
    "text": "using Amazon RDS Proxy and\nconnecting directly to the database.",
    "start": "645433",
    "end": "649133"
  },
  {
    "text": "These results were captured when creating\nthe RDS Blog article linked in the video description.",
    "start": "649133",
    "end": "653433"
  },
  {
    "text": "The following graphs show the difference in\nclient recovery times during a database failover.",
    "start": "654633",
    "end": "659333"
  },
  {
    "text": "These results are from an\nAmazon Aurora MySQL database.",
    "start": "659333",
    "end": "663233"
  },
  {
    "text": "The orange line shows recovery\ntimes for connecting directly",
    "start": "663233",
    "end": "665933"
  },
  {
    "text": "while the blue is using\nAmazon RDS Proxy.",
    "start": "665933",
    "end": "669233"
  },
  {
    "text": "Client recovery times in the test workloads were\n51 to 79 percent quicker for Amazon Aurora MySQL.",
    "start": "669233",
    "end": "674933"
  },
  {
    "text": "This graph shows results from a test with\na multi-AZ RDS MySQL database.",
    "start": "676933",
    "end": "681633"
  },
  {
    "text": "The yellow and grey lines are results from connecting\ndirectly to the database with two different drivers.",
    "start": "681633",
    "end": "686633"
  },
  {
    "text": "The orange and blue lines are the recovery times using\nthe same drivers and connecting through RDS Proxy.",
    "start": "686633",
    "end": "692033"
  },
  {
    "text": "Recoveries were 32 to 38 percent\nquicker for RDS Multi-AZ.",
    "start": "692033",
    "end": "697033"
  },
  {
    "text": "Be sure to check out the blog post\nfor more details on these results",
    "start": "697033",
    "end": "699833"
  },
  {
    "text": "as well as best practices\nfor client configurations",
    "start": "699833",
    "end": "702833"
  },
  {
    "text": "to reduce recovery\ntimes during a failover.",
    "start": "702833",
    "end": "704833"
  },
  {
    "start": "705000",
    "end": "733000"
  },
  {
    "text": "And now we are at the close.",
    "start": "705833",
    "end": "707033"
  },
  {
    "text": "In summary, I gave an\nintro to Amazon RDS Proxy",
    "start": "707033",
    "end": "709533"
  },
  {
    "text": "and talked about the scaling,\nresilience, and security benefits.",
    "start": "709533",
    "end": "712700"
  },
  {
    "text": "I created a proxy and showed configuring the\nLambda function to use the proxy.",
    "start": "713066",
    "end": "717665"
  },
  {
    "text": "And I showed test results which highlighted potential\nresilience benefits during database failovers.",
    "start": "717666",
    "end": "722166"
  },
  {
    "text": "For more information, you can go to the\nlanding page shown at the end of the video.",
    "start": "723166",
    "end": "726466"
  },
  {
    "text": "Thanks for your time,\nI hope you learned more about Amazon RDS Proxy.",
    "start": "727466",
    "end": "730466"
  }
]