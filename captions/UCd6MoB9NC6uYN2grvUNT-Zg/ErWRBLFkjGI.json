[
  {
    "start": "0",
    "end": "30000"
  },
  {
    "text": "in this video you'll see how to use",
    "start": "480",
    "end": "2080"
  },
  {
    "text": "cloudwatch contributor insights to",
    "start": "2080",
    "end": "3679"
  },
  {
    "text": "analyze high cardinality data",
    "start": "3679",
    "end": "6319"
  },
  {
    "text": "with this feature you can analyze top",
    "start": "6319",
    "end": "8160"
  },
  {
    "text": "contributors to time series data",
    "start": "8160",
    "end": "9920"
  },
  {
    "text": "quickly isolate diagnose and remediate",
    "start": "9920",
    "end": "12000"
  },
  {
    "text": "issues during operational events",
    "start": "12000",
    "end": "13840"
  },
  {
    "text": "and perform ongoing analysis for system",
    "start": "13840",
    "end": "15920"
  },
  {
    "text": "and business optimization",
    "start": "15920",
    "end": "18000"
  },
  {
    "text": "to get started let's go to cloudwatch",
    "start": "18000",
    "end": "19840"
  },
  {
    "text": "contributor insights",
    "start": "19840",
    "end": "21840"
  },
  {
    "text": "contributor insights allows you to set",
    "start": "21840",
    "end": "23600"
  },
  {
    "text": "up real-time analysis of time series",
    "start": "23600",
    "end": "25359"
  },
  {
    "text": "data to understand who or what is",
    "start": "25359",
    "end": "27279"
  },
  {
    "text": "impacting system and application",
    "start": "27279",
    "end": "28800"
  },
  {
    "text": "performance the most",
    "start": "28800",
    "end": "30720"
  },
  {
    "start": "30000",
    "end": "63000"
  },
  {
    "text": "for this demonstration we are going to",
    "start": "30720",
    "end": "32558"
  },
  {
    "text": "use contributor insights to analyze log",
    "start": "32559",
    "end": "34559"
  },
  {
    "text": "data from a pet adoption application",
    "start": "34559",
    "end": "37360"
  },
  {
    "text": "let's switch to api gateway to take a",
    "start": "37360",
    "end": "39280"
  },
  {
    "text": "quick look at our web api",
    "start": "39280",
    "end": "41760"
  },
  {
    "text": "this is the rest api that talks to our",
    "start": "41760",
    "end": "43760"
  },
  {
    "text": "dynamodb table",
    "start": "43760",
    "end": "46878"
  },
  {
    "text": "we also have set up a load simulator to",
    "start": "47200",
    "end": "49039"
  },
  {
    "text": "simulate traffic flow",
    "start": "49039",
    "end": "51039"
  },
  {
    "text": "let's take a quick look at the dynamodb",
    "start": "51039",
    "end": "52879"
  },
  {
    "text": "table",
    "start": "52879",
    "end": "54160"
  },
  {
    "text": "this table stores data indexed on two",
    "start": "54160",
    "end": "56160"
  },
  {
    "text": "keys pet type and pet",
    "start": "56160",
    "end": "58000"
  },
  {
    "text": "id we have already enabled contributor",
    "start": "58000",
    "end": "60480"
  },
  {
    "text": "insights on this table",
    "start": "60480",
    "end": "63440"
  },
  {
    "start": "63000",
    "end": "138000"
  },
  {
    "text": "as you can see the top four rules were",
    "start": "64080",
    "end": "66000"
  },
  {
    "text": "all automatically generated by dynamodb",
    "start": "66000",
    "end": "68880"
  },
  {
    "text": "before we take a look at these let's",
    "start": "68880",
    "end": "70560"
  },
  {
    "text": "create a new rule so we can see",
    "start": "70560",
    "end": "72000"
  },
  {
    "text": "the parameters that define a rule and",
    "start": "72000",
    "end": "73600"
  },
  {
    "text": "contributor insights",
    "start": "73600",
    "end": "75600"
  },
  {
    "text": "you can create custom rules from scratch",
    "start": "75600",
    "end": "77520"
  },
  {
    "text": "or select and modify sample rules from a",
    "start": "77520",
    "end": "79680"
  },
  {
    "text": "number of categories sorted options",
    "start": "79680",
    "end": "82799"
  },
  {
    "text": "you can then build upon these sample",
    "start": "82799",
    "end": "84240"
  },
  {
    "text": "rules for structured logging of",
    "start": "84240",
    "end": "85680"
  },
  {
    "text": "different",
    "start": "85680",
    "end": "86000"
  },
  {
    "text": "aws service log sources any logs in json",
    "start": "86000",
    "end": "89439"
  },
  {
    "text": "or common log format can be evaluated",
    "start": "89439",
    "end": "93600"
  },
  {
    "text": "let's select vpc flow logs and create a",
    "start": "94400",
    "end": "96880"
  },
  {
    "text": "rule that provides structured logging",
    "start": "96880",
    "end": "98479"
  },
  {
    "text": "for byte transfers by source and",
    "start": "98479",
    "end": "100079"
  },
  {
    "text": "destination ip address",
    "start": "100079",
    "end": "103040"
  },
  {
    "text": "the log group we select defines the",
    "start": "103040",
    "end": "104640"
  },
  {
    "text": "source of our logs to be analyzed",
    "start": "104640",
    "end": "108240"
  },
  {
    "text": "we'll choose vpc flow logs so we can",
    "start": "108799",
    "end": "111040"
  },
  {
    "text": "track all requests and responses",
    "start": "111040",
    "end": "112880"
  },
  {
    "text": "to or from our api we can also set the",
    "start": "112880",
    "end": "116079"
  },
  {
    "text": "log format and modify or add the fields",
    "start": "116079",
    "end": "118159"
  },
  {
    "text": "to be logged",
    "start": "118159",
    "end": "120718"
  },
  {
    "text": "we can also set the contribution fields",
    "start": "122320",
    "end": "124479"
  },
  {
    "text": "which are the primary indices of the",
    "start": "124479",
    "end": "126079"
  },
  {
    "text": "logs data defined in the fields above",
    "start": "126079",
    "end": "128720"
  },
  {
    "text": "in addition we have options for how logs",
    "start": "128720",
    "end": "130560"
  },
  {
    "text": "are aggregated",
    "start": "130560",
    "end": "131760"
  },
  {
    "text": "in this case we'll retain the default",
    "start": "131760",
    "end": "133440"
  },
  {
    "text": "settings and create the rule",
    "start": "133440",
    "end": "136640"
  },
  {
    "text": "as traffic flows in our graph is",
    "start": "139200",
    "end": "140959"
  },
  {
    "text": "populated with the information we",
    "start": "140959",
    "end": "142400"
  },
  {
    "text": "requested",
    "start": "142400",
    "end": "143760"
  },
  {
    "text": "using contributor insights rules like",
    "start": "143760",
    "end": "145440"
  },
  {
    "text": "this we can easily analyze important",
    "start": "145440",
    "end": "147520"
  },
  {
    "text": "metrics regarding real-time performance",
    "start": "147520",
    "end": "149280"
  },
  {
    "text": "of our application",
    "start": "149280",
    "end": "150239"
  },
  {
    "text": "without requiring manual data processing",
    "start": "150239",
    "end": "152319"
  },
  {
    "text": "of high dimensionality data",
    "start": "152319",
    "end": "153760"
  },
  {
    "text": "or expensive storage and computation",
    "start": "153760",
    "end": "155440"
  },
  {
    "text": "power",
    "start": "155440",
    "end": "156800"
  },
  {
    "text": "we also have two previously defined",
    "start": "156800",
    "end": "158560"
  },
  {
    "text": "contributor insights rules",
    "start": "158560",
    "end": "161920"
  },
  {
    "text": "this rule shows the unique visitor",
    "start": "162239",
    "end": "163840"
  },
  {
    "text": "requests rejected by our api",
    "start": "163840",
    "end": "170640"
  },
  {
    "text": "this rule shows requests that have been",
    "start": "170640",
    "end": "172239"
  },
  {
    "text": "accepted",
    "start": "172239",
    "end": "174640"
  },
  {
    "text": "we can select both rules and view them",
    "start": "175599",
    "end": "177200"
  },
  {
    "text": "in a single graph in cloudwatch metrics",
    "start": "177200",
    "end": "181120"
  },
  {
    "text": "when selecting multiple rules we must",
    "start": "181840",
    "end": "183680"
  },
  {
    "text": "select an aggregation operation to apply",
    "start": "183680",
    "end": "185760"
  },
  {
    "text": "to the display",
    "start": "185760",
    "end": "186879"
  },
  {
    "text": "let's select sum",
    "start": "186879",
    "end": "189920"
  },
  {
    "text": "we can also select or enter a math",
    "start": "190560",
    "end": "192400"
  },
  {
    "text": "expression to create a composite graph",
    "start": "192400",
    "end": "194000"
  },
  {
    "text": "of the two rules",
    "start": "194000",
    "end": "199840"
  },
  {
    "text": "we can even create a cloudwatch alarm",
    "start": "201200",
    "end": "202959"
  },
  {
    "text": "based on the composite graph metrics",
    "start": "202959",
    "end": "206640"
  },
  {
    "text": "in this case let's cancel out without",
    "start": "207840",
    "end": "209599"
  },
  {
    "text": "creating the alarm",
    "start": "209599",
    "end": "212879"
  },
  {
    "text": "let's return to contributor insights",
    "start": "212879",
    "end": "216640"
  },
  {
    "start": "220000",
    "end": "263000"
  },
  {
    "text": "next let's create a custom rule to gain",
    "start": "221040",
    "end": "222959"
  },
  {
    "text": "insights into traffic patterns on our",
    "start": "222959",
    "end": "224480"
  },
  {
    "text": "web api",
    "start": "224480",
    "end": "226319"
  },
  {
    "text": "this rule will extract the top pet types",
    "start": "226319",
    "end": "228239"
  },
  {
    "text": "requested by our application's users",
    "start": "228239",
    "end": "231599"
  },
  {
    "text": "for log groups let's specify our api",
    "start": "231599",
    "end": "234080"
  },
  {
    "text": "gateway execution logs",
    "start": "234080",
    "end": "240560"
  },
  {
    "text": "for contributions we'll specify the pet",
    "start": "240560",
    "end": "242799"
  },
  {
    "text": "type field of our dynamodb table",
    "start": "242799",
    "end": "246319"
  },
  {
    "text": "since we want to find the most popular",
    "start": "246319",
    "end": "247840"
  },
  {
    "text": "pet types by traffic let's aggregate on",
    "start": "247840",
    "end": "250159"
  },
  {
    "text": "count to get the total number of",
    "start": "250159",
    "end": "251519"
  },
  {
    "text": "occurrences of each pet type create the",
    "start": "251519",
    "end": "254319"
  },
  {
    "text": "rule",
    "start": "254319",
    "end": "255599"
  },
  {
    "text": "let's wait a few moments for the rule",
    "start": "255599",
    "end": "256959"
  },
  {
    "text": "graphs to fully populate and then select",
    "start": "256959",
    "end": "259280"
  },
  {
    "text": "the rule",
    "start": "259280",
    "end": "261680"
  },
  {
    "start": "263000",
    "end": "322000"
  },
  {
    "text": "the three lines in the graph represent",
    "start": "263759",
    "end": "265440"
  },
  {
    "text": "the number of requests for each pet type",
    "start": "265440",
    "end": "267360"
  },
  {
    "text": "over time",
    "start": "267360",
    "end": "268240"
  },
  {
    "text": "as you can see puppy was the most",
    "start": "268240",
    "end": "269840"
  },
  {
    "text": "commonly requested pet type",
    "start": "269840",
    "end": "272160"
  },
  {
    "text": "we can hover over a legend entry or line",
    "start": "272160",
    "end": "274160"
  },
  {
    "text": "on the graph to view the line in",
    "start": "274160",
    "end": "275440"
  },
  {
    "text": "isolation",
    "start": "275440",
    "end": "278080"
  },
  {
    "text": "let's take a look at how the graph can",
    "start": "279360",
    "end": "280720"
  },
  {
    "text": "be customized",
    "start": "280720",
    "end": "282639"
  },
  {
    "text": "we can modify the number of contributors",
    "start": "282639",
    "end": "284479"
  },
  {
    "text": "shown",
    "start": "284479",
    "end": "286720"
  },
  {
    "text": "we can show data over a longer or",
    "start": "287040",
    "end": "288639"
  },
  {
    "text": "shorter period of time",
    "start": "288639",
    "end": "291680"
  },
  {
    "text": "we can order the chart by different",
    "start": "292240",
    "end": "293680"
  },
  {
    "text": "aggregate metrics we're currently",
    "start": "293680",
    "end": "295440"
  },
  {
    "text": "showing a some ordered representation of",
    "start": "295440",
    "end": "297120"
  },
  {
    "text": "our data but we can also order by",
    "start": "297120",
    "end": "298960"
  },
  {
    "text": "maximum value",
    "start": "298960",
    "end": "301840"
  },
  {
    "text": "next let's return to the dynamodb table",
    "start": "301840",
    "end": "304080"
  },
  {
    "text": "that holds the pet data requested from",
    "start": "304080",
    "end": "305840"
  },
  {
    "text": "our web api",
    "start": "305840",
    "end": "308639"
  },
  {
    "text": "contributor insights can be enabled for",
    "start": "308800",
    "end": "310479"
  },
  {
    "text": "a dynamodb table in the more tab",
    "start": "310479",
    "end": "314560"
  },
  {
    "text": "since contributor insights is already",
    "start": "315919",
    "end": "317440"
  },
  {
    "text": "enabled let's continue",
    "start": "317440",
    "end": "320560"
  },
  {
    "text": "when contributor insights is enabled for",
    "start": "322800",
    "end": "324639"
  },
  {
    "text": "a dynamodb table",
    "start": "324639",
    "end": "326160"
  },
  {
    "text": "four contributor insights rules are",
    "start": "326160",
    "end": "327759"
  },
  {
    "text": "automatically generated by aggregating",
    "start": "327759",
    "end": "329520"
  },
  {
    "text": "the table data according to the keys the",
    "start": "329520",
    "end": "331360"
  },
  {
    "text": "user is specified",
    "start": "331360",
    "end": "333039"
  },
  {
    "text": "in our case we specified pet type as the",
    "start": "333039",
    "end": "335199"
  },
  {
    "text": "partition key",
    "start": "335199",
    "end": "336160"
  },
  {
    "text": "and pet id as the sort key let's inspect",
    "start": "336160",
    "end": "339280"
  },
  {
    "text": "each line in the most accessed items",
    "start": "339280",
    "end": "340960"
  },
  {
    "text": "partition key rule",
    "start": "340960",
    "end": "343840"
  },
  {
    "text": "now let's return to cloudwatch",
    "start": "345520",
    "end": "348879"
  },
  {
    "text": "the first four contributor insights",
    "start": "349520",
    "end": "351039"
  },
  {
    "text": "rules correspond to the four charts we",
    "start": "351039",
    "end": "352880"
  },
  {
    "text": "just saw in dynamodb",
    "start": "352880",
    "end": "355440"
  },
  {
    "text": "here are the most accessed items",
    "start": "355440",
    "end": "357280"
  },
  {
    "text": "aggregated on the partition key over a",
    "start": "357280",
    "end": "359039"
  },
  {
    "text": "one minute period",
    "start": "359039",
    "end": "360720"
  },
  {
    "text": "by enabling contributor insights on our",
    "start": "360720",
    "end": "362479"
  },
  {
    "text": "dynamodb table",
    "start": "362479",
    "end": "363759"
  },
  {
    "text": "we have produced the very same pet types",
    "start": "363759",
    "end": "365600"
  },
  {
    "text": "rule we created earlier",
    "start": "365600",
    "end": "367840"
  },
  {
    "text": "additionally as we saw in dynamodb a",
    "start": "367840",
    "end": "370479"
  },
  {
    "text": "rule is created for aggregates on the",
    "start": "370479",
    "end": "372080"
  },
  {
    "text": "partition key",
    "start": "372080",
    "end": "372960"
  },
  {
    "text": "plus the sort key allowing us to view",
    "start": "372960",
    "end": "374880"
  },
  {
    "text": "the most requested pets in general along",
    "start": "374880",
    "end": "376639"
  },
  {
    "text": "with their pet type",
    "start": "376639",
    "end": "378720"
  },
  {
    "text": "you've just seen how to use contributor",
    "start": "378720",
    "end": "380400"
  },
  {
    "text": "insights to analyze high cardinality",
    "start": "380400",
    "end": "382240"
  },
  {
    "text": "data",
    "start": "382240",
    "end": "383440"
  },
  {
    "text": "you can learn more about this topic in",
    "start": "383440",
    "end": "385039"
  },
  {
    "text": "the description and links for this video",
    "start": "385039",
    "end": "387440"
  },
  {
    "text": "thanks for watching now it's your turn",
    "start": "387440",
    "end": "388960"
  },
  {
    "text": "to try",
    "start": "388960",
    "end": "393360"
  }
]