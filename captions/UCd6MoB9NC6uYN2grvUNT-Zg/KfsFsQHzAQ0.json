[
  {
    "start": "0",
    "end": "41000"
  },
  {
    "text": "[Music]",
    "start": "0",
    "end": "2080"
  },
  {
    "text": "hello everyone",
    "start": "2080",
    "end": "3600"
  },
  {
    "text": "in this session we are going to learn",
    "start": "3600",
    "end": "5440"
  },
  {
    "text": "how to add a caching layer for",
    "start": "5440",
    "end": "7839"
  },
  {
    "text": "net applications using amazon elastic",
    "start": "7839",
    "end": "10719"
  },
  {
    "text": "cache for memcached",
    "start": "10719",
    "end": "12960"
  },
  {
    "text": "my name is srivan tattanaikar and i'm a",
    "start": "12960",
    "end": "15120"
  },
  {
    "text": "senior partner solution",
    "start": "15120",
    "end": "16400"
  },
  {
    "text": "architect at amazon web services",
    "start": "16400",
    "end": "18400"
  },
  {
    "text": "focusing around microsoft technologies",
    "start": "18400",
    "end": "21199"
  },
  {
    "text": "we will first learn why we need caching",
    "start": "21199",
    "end": "23600"
  },
  {
    "text": "by going through some use cases",
    "start": "23600",
    "end": "26080"
  },
  {
    "text": "and then learn about amazon elastic ash",
    "start": "26080",
    "end": "29359"
  },
  {
    "text": "we will then focus on how to create an",
    "start": "29359",
    "end": "31679"
  },
  {
    "text": "amazon elastic cache cluster",
    "start": "31679",
    "end": "33760"
  },
  {
    "text": "for memcached and then learn how to use",
    "start": "33760",
    "end": "36559"
  },
  {
    "text": "it in our.net applications",
    "start": "36559",
    "end": "40160"
  },
  {
    "start": "41000",
    "end": "173000"
  },
  {
    "text": "let's now try to learn why we need",
    "start": "41440",
    "end": "43600"
  },
  {
    "text": "caching using an",
    "start": "43600",
    "end": "44719"
  },
  {
    "text": "example imagine you are doing an",
    "start": "44719",
    "end": "48000"
  },
  {
    "text": "expensive read operation from a data",
    "start": "48000",
    "end": "50800"
  },
  {
    "text": "store",
    "start": "50800",
    "end": "51520"
  },
  {
    "text": "that takes a lot of time if you can",
    "start": "51520",
    "end": "54640"
  },
  {
    "text": "store the result in a cache",
    "start": "54640",
    "end": "57120"
  },
  {
    "text": "when you query for the same data set",
    "start": "57120",
    "end": "59359"
  },
  {
    "text": "later",
    "start": "59359",
    "end": "60320"
  },
  {
    "text": "you can access it quickly reducing the",
    "start": "60320",
    "end": "62960"
  },
  {
    "text": "latency",
    "start": "62960",
    "end": "63920"
  },
  {
    "text": "increasing the speed and more",
    "start": "63920",
    "end": "66000"
  },
  {
    "text": "importantly",
    "start": "66000",
    "end": "67200"
  },
  {
    "text": "reducing the load in the data store",
    "start": "67200",
    "end": "70400"
  },
  {
    "text": "in this example when the application",
    "start": "70400",
    "end": "73200"
  },
  {
    "text": "sees a cache miss",
    "start": "73200",
    "end": "75040"
  },
  {
    "text": "it reads from the data store store the",
    "start": "75040",
    "end": "77840"
  },
  {
    "text": "result in a cache",
    "start": "77840",
    "end": "79840"
  },
  {
    "text": "and when you access the data next time",
    "start": "79840",
    "end": "82560"
  },
  {
    "text": "you can",
    "start": "82560",
    "end": "83040"
  },
  {
    "text": "access the data directly from the cache",
    "start": "83040",
    "end": "87840"
  },
  {
    "text": "what i discussed before is only one such",
    "start": "88479",
    "end": "91280"
  },
  {
    "text": "use case",
    "start": "91280",
    "end": "92640"
  },
  {
    "text": "there are many such use cases for",
    "start": "92640",
    "end": "95119"
  },
  {
    "text": "example",
    "start": "95119",
    "end": "96000"
  },
  {
    "text": "in gaming industry we use caching for",
    "start": "96000",
    "end": "98880"
  },
  {
    "text": "player leaderboards",
    "start": "98880",
    "end": "100320"
  },
  {
    "text": "and in machine learning we use caching",
    "start": "100320",
    "end": "102799"
  },
  {
    "text": "to store",
    "start": "102799",
    "end": "103399"
  },
  {
    "text": "pre-calculated models",
    "start": "103399",
    "end": "106399"
  },
  {
    "text": "at amazon we don't believe in one size",
    "start": "106399",
    "end": "109439"
  },
  {
    "text": "fits all databases developers are",
    "start": "109439",
    "end": "112320"
  },
  {
    "text": "building",
    "start": "112320",
    "end": "112880"
  },
  {
    "text": "highly distributed applications using a",
    "start": "112880",
    "end": "116159"
  },
  {
    "text": "multitude of purposely built databases",
    "start": "116159",
    "end": "119280"
  },
  {
    "text": "developers are doing what they do best",
    "start": "119280",
    "end": "122000"
  },
  {
    "text": "breaking",
    "start": "122000",
    "end": "122640"
  },
  {
    "text": "complex applications into small pieces",
    "start": "122640",
    "end": "125759"
  },
  {
    "text": "and then picking the best tool to solve",
    "start": "125759",
    "end": "128160"
  },
  {
    "text": "each problem",
    "start": "128160",
    "end": "129840"
  },
  {
    "text": "if you are looking for a fast low",
    "start": "129840",
    "end": "132160"
  },
  {
    "text": "latency",
    "start": "132160",
    "end": "133040"
  },
  {
    "text": "in memory cache solution for your dotnet",
    "start": "133040",
    "end": "135440"
  },
  {
    "text": "application",
    "start": "135440",
    "end": "136800"
  },
  {
    "text": "amazon elastic cache is a great place to",
    "start": "136800",
    "end": "139120"
  },
  {
    "text": "start with",
    "start": "139120",
    "end": "140000"
  },
  {
    "text": "amazon elastic cache is a fully managed",
    "start": "140000",
    "end": "143280"
  },
  {
    "text": "highly available secure and reliable",
    "start": "143280",
    "end": "146400"
  },
  {
    "text": "lower latency",
    "start": "146400",
    "end": "147360"
  },
  {
    "text": "in-memory cache solution based out of",
    "start": "147360",
    "end": "150319"
  },
  {
    "text": "time-proven open-source technologies",
    "start": "150319",
    "end": "153360"
  },
  {
    "text": "it comes in two flavors memcached and",
    "start": "153360",
    "end": "156480"
  },
  {
    "text": "radish",
    "start": "156480",
    "end": "157760"
  },
  {
    "text": "and in this session we will focus on",
    "start": "157760",
    "end": "160000"
  },
  {
    "text": "amazon elastic cache from memcached",
    "start": "160000",
    "end": "163440"
  },
  {
    "text": "let's now go for a demo and then try to",
    "start": "163440",
    "end": "166080"
  },
  {
    "text": "learn",
    "start": "166080",
    "end": "166640"
  },
  {
    "text": "how to use amazon elastic cache for",
    "start": "166640",
    "end": "169120"
  },
  {
    "text": "memcached",
    "start": "169120",
    "end": "170400"
  },
  {
    "text": "in our.net applications",
    "start": "170400",
    "end": "173840"
  },
  {
    "start": "173000",
    "end": "231000"
  },
  {
    "text": "let's go to elastic cluster section of",
    "start": "173920",
    "end": "176560"
  },
  {
    "text": "aws console",
    "start": "176560",
    "end": "178159"
  },
  {
    "text": "and then create a subnet group we will",
    "start": "178159",
    "end": "181120"
  },
  {
    "text": "deploy our elastic cache cluster to the",
    "start": "181120",
    "end": "183440"
  },
  {
    "text": "subnets",
    "start": "183440",
    "end": "184000"
  },
  {
    "text": "we are going to select in the subnet",
    "start": "184000",
    "end": "186080"
  },
  {
    "text": "groups",
    "start": "186080",
    "end": "187040"
  },
  {
    "text": "so select the availability zones and the",
    "start": "187040",
    "end": "188959"
  },
  {
    "text": "corresponding subnet groups",
    "start": "188959",
    "end": "191200"
  },
  {
    "text": "we go to memcached and then select the",
    "start": "191200",
    "end": "194080"
  },
  {
    "text": "type of the cluster you want to create",
    "start": "194080",
    "end": "195760"
  },
  {
    "text": "in this case we are going to create a",
    "start": "195760",
    "end": "197040"
  },
  {
    "text": "memcached cluster give it a name",
    "start": "197040",
    "end": "200239"
  },
  {
    "text": "select the engine version that you want",
    "start": "200239",
    "end": "202480"
  },
  {
    "text": "to deploy so this is the memcached",
    "start": "202480",
    "end": "204400"
  },
  {
    "text": "engine version port numbers for the",
    "start": "204400",
    "end": "206959"
  },
  {
    "text": "instance type i'm going to select",
    "start": "206959",
    "end": "208640"
  },
  {
    "text": "t3 medium because i don't have a lot of",
    "start": "208640",
    "end": "210799"
  },
  {
    "text": "data",
    "start": "210799",
    "end": "211760"
  },
  {
    "text": "and for the number of nodes i select two",
    "start": "211760",
    "end": "215440"
  },
  {
    "text": "for the subnet groups select the subnet",
    "start": "215440",
    "end": "217280"
  },
  {
    "text": "group you just created",
    "start": "217280",
    "end": "219280"
  },
  {
    "text": "and then leave all the other entries the",
    "start": "219280",
    "end": "221519"
  },
  {
    "text": "default values",
    "start": "221519",
    "end": "222720"
  },
  {
    "text": "including the node 1 and node 2",
    "start": "222720",
    "end": "225280"
  },
  {
    "text": "availability zones",
    "start": "225280",
    "end": "227120"
  },
  {
    "text": "so let's go there and then create the",
    "start": "227120",
    "end": "230080"
  },
  {
    "text": "elastic",
    "start": "230080",
    "end": "230799"
  },
  {
    "text": "cluster it will take some time for this",
    "start": "230799",
    "end": "233599"
  },
  {
    "text": "to come alive",
    "start": "233599",
    "end": "235040"
  },
  {
    "text": "but before that let's go to our.net",
    "start": "235040",
    "end": "237920"
  },
  {
    "text": "application and then try to",
    "start": "237920",
    "end": "240239"
  },
  {
    "text": "program for our elastic cache cluster",
    "start": "240239",
    "end": "243920"
  },
  {
    "text": "i have added a few nougat packages one",
    "start": "243920",
    "end": "247200"
  },
  {
    "text": "is",
    "start": "247200",
    "end": "247439"
  },
  {
    "text": "amazon elastic cache cluster the other",
    "start": "247439",
    "end": "249760"
  },
  {
    "text": "one is",
    "start": "249760",
    "end": "250640"
  },
  {
    "text": "a nem memcached there are a lot of",
    "start": "250640",
    "end": "254720"
  },
  {
    "text": "nougat packages that you can use to",
    "start": "254720",
    "end": "256799"
  },
  {
    "text": "connect into",
    "start": "256799",
    "end": "257919"
  },
  {
    "text": "any memcached cluster since amazon",
    "start": "257919",
    "end": "261040"
  },
  {
    "text": "elastic cache",
    "start": "261040",
    "end": "262000"
  },
  {
    "text": "is always compatible with open source",
    "start": "262000",
    "end": "264639"
  },
  {
    "text": "memcached version",
    "start": "264639",
    "end": "266240"
  },
  {
    "text": "you can use any of these libraries",
    "start": "266240",
    "end": "268160"
  },
  {
    "text": "available to access it",
    "start": "268160",
    "end": "270080"
  },
  {
    "text": "anym cash d is a very famous library",
    "start": "270080",
    "end": "272720"
  },
  {
    "text": "therefore i have",
    "start": "272720",
    "end": "273600"
  },
  {
    "text": "used it in my sample demo application",
    "start": "273600",
    "end": "276960"
  },
  {
    "text": "in my program i have a very simple class",
    "start": "276960",
    "end": "279520"
  },
  {
    "text": "called memcached sample",
    "start": "279520",
    "end": "282160"
  },
  {
    "text": "and here i have a few configuration",
    "start": "282160",
    "end": "284320"
  },
  {
    "text": "first one is to get this elastic",
    "start": "284320",
    "end": "286400"
  },
  {
    "text": "cluster config you can get it from your",
    "start": "286400",
    "end": "289360"
  },
  {
    "text": "app config or web config",
    "start": "289360",
    "end": "291759"
  },
  {
    "text": "if you don't specify any parameters when",
    "start": "291759",
    "end": "293759"
  },
  {
    "text": "you construct it it will read the",
    "start": "293759",
    "end": "295840"
  },
  {
    "text": "configurations",
    "start": "295840",
    "end": "296800"
  },
  {
    "text": "from the app config go web config here",
    "start": "296800",
    "end": "299520"
  },
  {
    "text": "you can see i have a section called",
    "start": "299520",
    "end": "301199"
  },
  {
    "text": "cluster client",
    "start": "301199",
    "end": "302560"
  },
  {
    "text": "and in the cluster client i have given",
    "start": "302560",
    "end": "304400"
  },
  {
    "text": "the host name",
    "start": "304400",
    "end": "305600"
  },
  {
    "text": "to point into my elastic cluster config",
    "start": "305600",
    "end": "309120"
  },
  {
    "text": "endpoint this config endpoint",
    "start": "309120",
    "end": "312320"
  },
  {
    "text": "you can find it in your amazon aws",
    "start": "312320",
    "end": "314720"
  },
  {
    "text": "console",
    "start": "314720",
    "end": "315520"
  },
  {
    "text": "so if you go into memcached cache you",
    "start": "315520",
    "end": "318240"
  },
  {
    "text": "can find under description",
    "start": "318240",
    "end": "320160"
  },
  {
    "text": "the configuration endpoints",
    "start": "320160",
    "end": "323280"
  },
  {
    "text": "you should never use the nod endpoints",
    "start": "323280",
    "end": "325840"
  },
  {
    "text": "directly",
    "start": "325840",
    "end": "326880"
  },
  {
    "text": "because this config endpoint is smart",
    "start": "326880",
    "end": "329360"
  },
  {
    "text": "enough to",
    "start": "329360",
    "end": "330240"
  },
  {
    "text": "figure it out if a node goes down that",
    "start": "330240",
    "end": "332720"
  },
  {
    "text": "it can automatically add it",
    "start": "332720",
    "end": "334160"
  },
  {
    "text": "so never use the node endpoints directly",
    "start": "334160",
    "end": "337840"
  },
  {
    "text": "always use the configuration endpoint",
    "start": "337840",
    "end": "340720"
  },
  {
    "text": "when you",
    "start": "340720",
    "end": "341600"
  },
  {
    "text": "access this cluster alternatively",
    "start": "341600",
    "end": "344400"
  },
  {
    "text": "instead of reading from the web",
    "start": "344400",
    "end": "345680"
  },
  {
    "text": "configurable config",
    "start": "345680",
    "end": "346880"
  },
  {
    "text": "you can directly pass the url of your",
    "start": "346880",
    "end": "350479"
  },
  {
    "text": "cluster",
    "start": "350479",
    "end": "351120"
  },
  {
    "text": "and also the port that you want to",
    "start": "351120",
    "end": "352800"
  },
  {
    "text": "connect",
    "start": "352800",
    "end": "354240"
  },
  {
    "text": "for the moment i'm going to use the app",
    "start": "354240",
    "end": "356479"
  },
  {
    "text": "config data",
    "start": "356479",
    "end": "359039"
  },
  {
    "text": "let's create some simple data set in sit",
    "start": "359039",
    "end": "361520"
  },
  {
    "text": "inside this memcached",
    "start": "361520",
    "end": "364479"
  },
  {
    "text": "so let's put a breakpoint and then run",
    "start": "364479",
    "end": "366639"
  },
  {
    "text": "this application",
    "start": "366639",
    "end": "368160"
  },
  {
    "text": "so i'm creating the memcached client and",
    "start": "368160",
    "end": "371120"
  },
  {
    "text": "then i'm going to store some value",
    "start": "371120",
    "end": "373840"
  },
  {
    "text": "i'm going to set the value so that will",
    "start": "373840",
    "end": "376880"
  },
  {
    "text": "if you have a value it will set it if",
    "start": "376880",
    "end": "379520"
  },
  {
    "text": "you don't have one it will add that",
    "start": "379520",
    "end": "381039"
  },
  {
    "text": "value",
    "start": "381039",
    "end": "382000"
  },
  {
    "text": "key is my key 1 and the value is my key",
    "start": "382000",
    "end": "384400"
  },
  {
    "text": "value 1",
    "start": "384400",
    "end": "386560"
  },
  {
    "text": "so i save it let's now read the value",
    "start": "386560",
    "end": "389600"
  },
  {
    "text": "you can see that i'm reading my key 1",
    "start": "389600",
    "end": "391759"
  },
  {
    "text": "and the value i got",
    "start": "391759",
    "end": "392960"
  },
  {
    "text": "as expected let's now remove the data",
    "start": "392960",
    "end": "396880"
  },
  {
    "text": "i initiate the client remove the key",
    "start": "396880",
    "end": "399919"
  },
  {
    "text": "and i then check whether the result is",
    "start": "399919",
    "end": "401759"
  },
  {
    "text": "there as you can see the result is null",
    "start": "401759",
    "end": "404880"
  },
  {
    "text": "instead of setting the value i can add",
    "start": "404880",
    "end": "407520"
  },
  {
    "text": "the value",
    "start": "407520",
    "end": "408720"
  },
  {
    "text": "when you add the value what will happen",
    "start": "408720",
    "end": "410560"
  },
  {
    "text": "is if you don't have a value it will add",
    "start": "410560",
    "end": "412319"
  },
  {
    "text": "it",
    "start": "412319",
    "end": "412639"
  },
  {
    "text": "if you already have one it will throw an",
    "start": "412639",
    "end": "414400"
  },
  {
    "text": "exception",
    "start": "414400",
    "end": "415680"
  },
  {
    "text": "you can also replace a value replacing",
    "start": "415680",
    "end": "418479"
  },
  {
    "text": "will throw an exception if you don't",
    "start": "418479",
    "end": "420160"
  },
  {
    "text": "already have a value for the given key",
    "start": "420160",
    "end": "423199"
  },
  {
    "text": "for the moment i will use the value set",
    "start": "423199",
    "end": "426880"
  },
  {
    "text": "you provide the timestamp so that it",
    "start": "426880",
    "end": "429280"
  },
  {
    "text": "will automatically get evicted from the",
    "start": "429280",
    "end": "430960"
  },
  {
    "text": "cache",
    "start": "430960",
    "end": "432560"
  },
  {
    "text": "you can also save complex data type like",
    "start": "432560",
    "end": "434960"
  },
  {
    "text": "this employee with a list of departments",
    "start": "434960",
    "end": "438400"
  },
  {
    "text": "the important thing here is that that",
    "start": "438400",
    "end": "440160"
  },
  {
    "text": "all these classes has to be binary",
    "start": "440160",
    "end": "442240"
  },
  {
    "text": "theorizable so i have given",
    "start": "442240",
    "end": "444240"
  },
  {
    "text": "an attribute called serializable so that",
    "start": "444240",
    "end": "447840"
  },
  {
    "text": "these are all binary serializable",
    "start": "447840",
    "end": "449840"
  },
  {
    "text": "classes",
    "start": "449840",
    "end": "452400"
  },
  {
    "text": "behind the scene the library that i'm",
    "start": "452400",
    "end": "454880"
  },
  {
    "text": "using",
    "start": "454880",
    "end": "455440"
  },
  {
    "text": "is smart enough to serialize these",
    "start": "455440",
    "end": "457440"
  },
  {
    "text": "objects into strings",
    "start": "457440",
    "end": "460000"
  },
  {
    "text": "so let's now create a complex data type",
    "start": "460000",
    "end": "462880"
  },
  {
    "text": "i'm going to",
    "start": "462880",
    "end": "463599"
  },
  {
    "text": "get a sample employee and then i'm going",
    "start": "463599",
    "end": "466879"
  },
  {
    "text": "to set",
    "start": "466879",
    "end": "467840"
  },
  {
    "text": "the sample employee with the key",
    "start": "467840",
    "end": "469520"
  },
  {
    "text": "employee id",
    "start": "469520",
    "end": "470960"
  },
  {
    "text": "you have age 24 and a bunch of",
    "start": "470960",
    "end": "473360"
  },
  {
    "text": "departments",
    "start": "473360",
    "end": "476000"
  },
  {
    "text": "so let's uh now save this",
    "start": "476800",
    "end": "480479"
  },
  {
    "text": "and after that let's try to read this",
    "start": "480479",
    "end": "482160"
  },
  {
    "text": "value",
    "start": "482160",
    "end": "483520"
  },
  {
    "text": "reading complex data is also very simple",
    "start": "483520",
    "end": "485919"
  },
  {
    "text": "the only difference here is that you",
    "start": "485919",
    "end": "487599"
  },
  {
    "text": "need to",
    "start": "487599",
    "end": "488080"
  },
  {
    "text": "cast the value that you get from the",
    "start": "488080",
    "end": "490840"
  },
  {
    "text": "client",
    "start": "490840",
    "end": "492160"
  },
  {
    "text": "and once you cast it you will have the",
    "start": "492160",
    "end": "495280"
  },
  {
    "text": "previous value that you stored in this",
    "start": "495280",
    "end": "496960"
  },
  {
    "text": "case",
    "start": "496960",
    "end": "497440"
  },
  {
    "text": "age 24 two departments",
    "start": "497440",
    "end": "501599"
  },
  {
    "text": "i can also do some atomic inquiry months",
    "start": "502879",
    "end": "505759"
  },
  {
    "text": "so here i",
    "start": "505759",
    "end": "506479"
  },
  {
    "text": "have a method called increment that will",
    "start": "506479",
    "end": "509759"
  },
  {
    "text": "increment a value that i keep in my data",
    "start": "509759",
    "end": "512719"
  },
  {
    "text": "store",
    "start": "512719",
    "end": "514159"
  },
  {
    "text": "important thing to remember is that this",
    "start": "514159",
    "end": "516560"
  },
  {
    "text": "value has to be a string",
    "start": "516560",
    "end": "518640"
  },
  {
    "text": "although it's a number you cannot store",
    "start": "518640",
    "end": "521680"
  },
  {
    "text": "a integer number here and then increment",
    "start": "521680",
    "end": "524640"
  },
  {
    "text": "it",
    "start": "524640",
    "end": "526320"
  },
  {
    "text": "so i store this number called hundred",
    "start": "526320",
    "end": "529920"
  },
  {
    "text": "and then what i'm going to do is to",
    "start": "529920",
    "end": "532450"
  },
  {
    "text": "[Music]",
    "start": "532450",
    "end": "533600"
  },
  {
    "text": "increase this number by number 12.",
    "start": "533600",
    "end": "537360"
  },
  {
    "text": "so i create a client again here i have a",
    "start": "537360",
    "end": "540880"
  },
  {
    "text": "method called increment",
    "start": "540880",
    "end": "542240"
  },
  {
    "text": "and it's going to increase my number if",
    "start": "542240",
    "end": "545360"
  },
  {
    "text": "there's no number called my number it",
    "start": "545360",
    "end": "547120"
  },
  {
    "text": "will to take number 200",
    "start": "547120",
    "end": "549120"
  },
  {
    "text": "but in my case i have 100 as my number",
    "start": "549120",
    "end": "552560"
  },
  {
    "text": "what will happen is uh it will add this",
    "start": "552560",
    "end": "554800"
  },
  {
    "text": "number to l",
    "start": "554800",
    "end": "556320"
  },
  {
    "text": "into a number 100 and it's going to be a",
    "start": "556320",
    "end": "559200"
  },
  {
    "text": "atomic increment",
    "start": "559200",
    "end": "560959"
  },
  {
    "text": "so if you read this value again you will",
    "start": "560959",
    "end": "562640"
  },
  {
    "text": "have 112",
    "start": "562640",
    "end": "565040"
  },
  {
    "text": "you now know how to use memcached in",
    "start": "565040",
    "end": "567760"
  },
  {
    "text": "your.net applications",
    "start": "567760",
    "end": "576160"
  }
]