[
  {
    "start": "0",
    "end": "14000"
  },
  {
    "text": "all right cool hello everyone um i'm here to talk about this",
    "start": "1439",
    "end": "6640"
  },
  {
    "text": "uh sort of obscure technology called docker that nobody's interested in",
    "start": "6640",
    "end": "11840"
  },
  {
    "text": "um so without further ado so my name is uh my name is alexi le quark uh i checked",
    "start": "11840",
    "end": "18640"
  },
  {
    "start": "14000",
    "end": "41000"
  },
  {
    "text": "actually in the app um there was some weird accent on my name but i'm the cto of datadog",
    "start": "18640",
    "end": "24000"
  },
  {
    "text": "and um what we do what datadog does is monitoring monitoring our cloud infrastructures so",
    "start": "24000",
    "end": "29840"
  },
  {
    "text": "we've been monitoring containers since before docker was docker",
    "start": "29840",
    "end": "35280"
  },
  {
    "text": "and i just you know throughout the presentation i'll explain kind of what we've learned you know what interesting things about",
    "start": "35280",
    "end": "43200"
  },
  {
    "start": "41000",
    "end": "95000"
  },
  {
    "text": "docker in terms of monitoring so um data is a monitoring service um it is made",
    "start": "43200",
    "end": "48480"
  },
  {
    "text": "for the cloud um just like you know for it's basically made for you and by",
    "start": "48480",
    "end": "54320"
  },
  {
    "text": "made for the cloud i mean something that really reacts naturally to having instances come and go elastic workloads",
    "start": "54320",
    "end": "61760"
  },
  {
    "text": "so you know something that that's modern and with modern applications when you want",
    "start": "61760",
    "end": "67680"
  },
  {
    "text": "to monitor them effectively you have to essentially aggregate a lot of data so what what data does on top of that it",
    "start": "67680",
    "end": "74240"
  },
  {
    "text": "aggregates cloudwatch metrics and metrics from a lot of different applications like databases app servers",
    "start": "74240",
    "end": "80159"
  },
  {
    "text": "and so on and docker among one of them and we've been supporting docker since 1-0 so so since docker is 1-0 we've had sort",
    "start": "80159",
    "end": "87680"
  },
  {
    "text": "of a native integration and native support before that we'd support lxc but",
    "start": "87680",
    "end": "93920"
  },
  {
    "text": "that's somewhat of a different story so what are my goals for this presentation mainly i wanted",
    "start": "93920",
    "end": "102000"
  },
  {
    "start": "95000",
    "end": "133000"
  },
  {
    "text": "i want to convey three things i want to present key docker metrics and i'm sure you guys are interested in you know out",
    "start": "102000",
    "end": "107439"
  },
  {
    "text": "of all the metrics that are out there which which are the ones that are interesting i want to explain also or present or",
    "start": "107439",
    "end": "113200"
  },
  {
    "text": "introduce the impact that introducing docker in your production environment will have",
    "start": "113200",
    "end": "118240"
  },
  {
    "text": "on your operations um it's non-trivial and you know that's what i'm here to talk about and ultimately i want you to",
    "start": "118240",
    "end": "124880"
  },
  {
    "text": "rethink monitoring of containers we'll see that it changes the game a little bit and i want to explain why and of course",
    "start": "124880",
    "end": "131920"
  },
  {
    "text": "um how am i going to do that i'll start with a very short introduction to containers because it's you know darker",
    "start": "131920",
    "end": "139120"
  },
  {
    "start": "133000",
    "end": "187000"
  },
  {
    "text": "it's very popular so i'm not here to do a 101 on docker but i want to sort of briefly introduce them",
    "start": "139120",
    "end": "146000"
  },
  {
    "text": "um and then sort of share with you some of the some of the patterns of some of the numbers some of the things we've seen",
    "start": "146000",
    "end": "152959"
  },
  {
    "text": "um from our customers running docker on aws then from there we'll proceed to go into",
    "start": "152959",
    "end": "159519"
  },
  {
    "text": "key docker metrics you know some things that you'll be able to get out of your docker deployment",
    "start": "159519",
    "end": "165840"
  },
  {
    "text": "and we will then dive into the operational complexity that docker is going to add to your",
    "start": "165840",
    "end": "172000"
  },
  {
    "text": "to your environment and finally i'll basically give you the the secret sauce",
    "start": "172000",
    "end": "177599"
  },
  {
    "text": "on on how to do it effectively so please stay until the end if you want to know",
    "start": "177599",
    "end": "182959"
  },
  {
    "text": "the ending i'll give you a brief demo in the end as well so brief history of docker and",
    "start": "182959",
    "end": "190640"
  },
  {
    "start": "187000",
    "end": "236000"
  },
  {
    "text": "containers so containers in a nutshell water containers they've been around for a while but they're essentially",
    "start": "190640",
    "end": "196400"
  },
  {
    "text": "sort of lightweight virtual machines so they go by names of jails zones c groups depending on the os",
    "start": "196400",
    "end": "203120"
  },
  {
    "text": "they're nice because they obviously have some of the attributes of fully",
    "start": "203120",
    "end": "208959"
  },
  {
    "text": "virtualized machines without the overhead initially it was mostly used for isolation like security like jails",
    "start": "208959",
    "end": "215440"
  },
  {
    "text": "but docker more recently and i think this is the um this is the at least for for me the key point is is it's",
    "start": "215440",
    "end": "222959"
  },
  {
    "text": "emerged because it solves a very specific problem which is dependency hell",
    "start": "222959",
    "end": "229360"
  },
  {
    "text": "and i think you'll recognize what it is i've lived in hell for independency health for a long time and i think a lot",
    "start": "229360",
    "end": "234720"
  },
  {
    "text": "of people do and that's why you guys are looking to docker so back in the day um when computing was",
    "start": "234720",
    "end": "243280"
  },
  {
    "start": "236000",
    "end": "268000"
  },
  {
    "text": "um kind of not getting started but you know maybe 20 years ago roughly uh we had eight or doubt so it",
    "start": "243280",
    "end": "249519"
  },
  {
    "text": "out really what it symbolizes is it's a it's a single binary so you write your code you compile it you have one",
    "start": "249519",
    "end": "255280"
  },
  {
    "text": "binary you run it you you can run it from any machine and it works",
    "start": "255280",
    "end": "260400"
  },
  {
    "text": "the problem there is that memory was not very optimized so you'd have a lot of binaries that would gobble up memory and back the memory",
    "start": "260400",
    "end": "266960"
  },
  {
    "text": "was very expensive so people thought hey let's um let's introduce share libraries so now",
    "start": "266960",
    "end": "272160"
  },
  {
    "start": "268000",
    "end": "415000"
  },
  {
    "text": "we have one binary that has just it's what makes it specific and it",
    "start": "272160",
    "end": "277759"
  },
  {
    "text": "relies on external libraries to do sort of the rest of its work and so the game there is you have a",
    "start": "277759",
    "end": "284160"
  },
  {
    "text": "bunch of binaries that share common libraries and that reduces um basically memory",
    "start": "284160",
    "end": "289680"
  },
  {
    "text": "footprint um so that made a lot of sense when computers had you know a meg of ram or a couple of",
    "start": "289680",
    "end": "295520"
  },
  {
    "text": "megs now it's obviously a lot less relevant but still that's how we've built software for the",
    "start": "295520",
    "end": "301199"
  },
  {
    "text": "past 20 25 years roughly so once you start having a lot of share libraries the next",
    "start": "301199",
    "end": "306560"
  },
  {
    "text": "thing you do is i go canal how do i manage all this stuff and so you do what um distributions did which is you",
    "start": "306560",
    "end": "313680"
  },
  {
    "text": "you invent a package format and then you have like complex rules that say if i have this package in that package",
    "start": "313680",
    "end": "319840"
  },
  {
    "text": "then i can install the third package so all these dependency rules which",
    "start": "319840",
    "end": "325759"
  },
  {
    "text": "presented a couple of problems the first problem is that if you're doing sort of modern development you often",
    "start": "325759",
    "end": "332240"
  },
  {
    "text": "find yourselves in the situation where the distribution that you're running has really an antiquated um package you know",
    "start": "332240",
    "end": "339759"
  },
  {
    "text": "save your python ruby and so on and so forth and you're like oh my god i can't run on this two year",
    "start": "339759",
    "end": "345280"
  },
  {
    "text": "old thing i need the latest greatest so that's the first problem and the second problem is",
    "start": "345280",
    "end": "351120"
  },
  {
    "text": "um so to solve this problem what you do is you end up like carving out you're reinstalling",
    "start": "351120",
    "end": "356560"
  },
  {
    "text": "your your interpreter your python you sort of work around the whole package and so",
    "start": "356560",
    "end": "362400"
  },
  {
    "text": "at that point you start to have a lot of mess so what um then what people figured out is like",
    "start": "362400",
    "end": "367600"
  },
  {
    "text": "well let's let's make this easier let's package all the dependencies together into one nice directory and something",
    "start": "367600",
    "end": "374400"
  },
  {
    "text": "called omnibus for instance lets you do that and it's it's good it's better it's",
    "start": "374400",
    "end": "380240"
  },
  {
    "text": "working around packages but it's it's still uh still work um it's still non from if you want to",
    "start": "380240",
    "end": "387520"
  },
  {
    "text": "put an omnibus sort of package together you have to do some work so kind of docker arrived",
    "start": "387520",
    "end": "393600"
  },
  {
    "text": "there as in hey let's forget about dependency hell i'm going to give you one thing that you can install whatever",
    "start": "393600",
    "end": "399360"
  },
  {
    "text": "you want in it and then it has no dependency whatsoever on the underlying system so",
    "start": "399360",
    "end": "405199"
  },
  {
    "text": "that's how we got out of dependency hell now the funny thing is that looks a lot like a single binary um that",
    "start": "405199",
    "end": "411280"
  },
  {
    "text": "we had 25 years ago",
    "start": "411280",
    "end": "415199"
  },
  {
    "start": "415000",
    "end": "539000"
  },
  {
    "text": "now you know i'll push this a little bit further so if you think about a container you can you can look at different",
    "start": "416479",
    "end": "423599"
  },
  {
    "text": "dimensions so and and how how does a container compare to a process or to a machine",
    "start": "423599",
    "end": "429440"
  },
  {
    "text": "and so what i'm the point i'm trying to make is a container is kind of a hybrid between a process and a machine",
    "start": "429440",
    "end": "435919"
  },
  {
    "text": "so it's a hybrid on a couple of points the one if you look at a process so it has a few things it has a source code",
    "start": "435919",
    "end": "442240"
  },
  {
    "text": "um that's defines how it's built it has the actual binary",
    "start": "442240",
    "end": "448319"
  },
  {
    "text": "code the dot text here and it has a when you run it it has a pid when you have a host it usually has some",
    "start": "448319",
    "end": "455039"
  },
  {
    "text": "kind of recipe shaft or puppet module or a kickstart file that tells it how the host is built",
    "start": "455039",
    "end": "461360"
  },
  {
    "text": "it has kind of the full distribution on files that explain that basically is the host materialize on disk",
    "start": "461360",
    "end": "467599"
  },
  {
    "text": "and then when it runs the host has a hostname and so the container is kind of in between because um it has a docker file that",
    "start": "467599",
    "end": "474639"
  },
  {
    "text": "explains how to how to build a um how to build the container it has a materialization on disk this is",
    "start": "474639",
    "end": "481360"
  },
  {
    "text": "the viral docker thing and it has a name or an id now the interesting thing about this is that um this hybrid thing",
    "start": "481360",
    "end": "487840"
  },
  {
    "text": "is you can depending on what you do or you know day to day you can look at it",
    "start": "487840",
    "end": "493520"
  },
  {
    "text": "at as a container as either more like a process or like a host case in point if your",
    "start": "493520",
    "end": "499919"
  },
  {
    "text": "day to day job is writing software um to your software engineer more likely than not you'll consider",
    "start": "499919",
    "end": "505520"
  },
  {
    "text": "container as more like a process so it has something that yeah i build it you know",
    "start": "505520",
    "end": "511520"
  },
  {
    "text": "or like a binary i build my binary and i ship it and it runs if you're in operations conversely",
    "start": "511520",
    "end": "516719"
  },
  {
    "text": "you'll tend to more consider docker container as a host it's like it",
    "start": "516719",
    "end": "521760"
  },
  {
    "text": "has a host some kind of a host name and it has an id you can address it it runs you know fairly autonomously and",
    "start": "521760",
    "end": "527440"
  },
  {
    "text": "so on so what we'll see is that that the different perspective that containers present has a tremendous",
    "start": "527440",
    "end": "535600"
  },
  {
    "text": "impact on on on operations so um now that i've kind of you know",
    "start": "535600",
    "end": "542080"
  },
  {
    "text": "gone through a little history and and how containers can be perceived i wanted to share with you some of the things we've seen so practical things",
    "start": "542080",
    "end": "548560"
  },
  {
    "text": "we've seen running docker and aws so very quickly a number of the use cases",
    "start": "548560",
    "end": "555680"
  },
  {
    "start": "552000",
    "end": "637000"
  },
  {
    "text": "we've seen are anything around continuous integration and the reason why you want to use docker for continuous",
    "start": "555680",
    "end": "561360"
  },
  {
    "text": "integration is very obvious is because you get out of dependency help because you have dependencies are nicely managed you",
    "start": "561360",
    "end": "568480"
  },
  {
    "text": "don't you don't go crazy with packaging compatibilities the supremely good thing about it is",
    "start": "568480",
    "end": "574640"
  },
  {
    "text": "that you com you put your docker file you build your um your container and you take it from dev from your laptop",
    "start": "574640",
    "end": "580959"
  },
  {
    "text": "all the way to production it basically runs um which is something that's been the holy grail of computing since",
    "start": "580959",
    "end": "587839"
  },
  {
    "text": "you know since before java i guess um and that's so that's that's what makes it super interesting",
    "start": "587839",
    "end": "592959"
  },
  {
    "text": "um also it has a very git like workflow so it feels very natural um to use so that's one use case",
    "start": "592959",
    "end": "599200"
  },
  {
    "text": "continuous integration second use case that we see a lot is continuous delivery so that's slightly different it's like",
    "start": "599200",
    "end": "604399"
  },
  {
    "text": "now i have a fleet of containers i have a bunch of sales components for instance web workers video encoders and so on and",
    "start": "604399",
    "end": "611200"
  },
  {
    "text": "these stateless components made excellent cases to run docker because you build them you ship them and they",
    "start": "611200",
    "end": "617839"
  },
  {
    "text": "run on their own um not so good docker not so good for for data stores um because it's just not the right fit",
    "start": "617839",
    "end": "625839"
  },
  {
    "text": "in this case if you want something that that's um sort of nicely managed rds i think",
    "start": "625839",
    "end": "631120"
  },
  {
    "text": "as one example is a better fit so that's kind of the use case we've seen from our customers using docker",
    "start": "631120",
    "end": "638320"
  },
  {
    "start": "637000",
    "end": "741000"
  },
  {
    "text": "so a couple of questions that i asked myself when i was putting together this presentation is well you know out of there what's what kind",
    "start": "638320",
    "end": "644800"
  },
  {
    "text": "of instance types do people use um so this is from october from from",
    "start": "644800",
    "end": "650079"
  },
  {
    "text": "sometime last month um this is a this is on a reasonably small sample of our total",
    "start": "650079",
    "end": "657760"
  },
  {
    "text": "sort of population of customers and probably because my interpretation is that docker is",
    "start": "657760",
    "end": "664240"
  },
  {
    "text": "still fairly new and people are sort of getting their toes dipping their toes and you know getting their feet wet and",
    "start": "664240",
    "end": "670959"
  },
  {
    "text": "pushing a little bit maybe in ci maybe a little bit in production but not full-blown production there are exceptions of course but",
    "start": "670959",
    "end": "676640"
  },
  {
    "text": "that that's how how i see it so the numbers that we can see here is that 60",
    "start": "676640",
    "end": "681920"
  },
  {
    "text": "of um all docker containers run on one of these three instance types c3 to",
    "start": "681920",
    "end": "687360"
  },
  {
    "text": "xl and three medium and three large um and then the rest is so m3 x large",
    "start": "687360",
    "end": "692880"
  },
  {
    "text": "and then m1 large and the rest is 20 so i think it makes sense because",
    "start": "692880",
    "end": "698160"
  },
  {
    "text": "um kind of m3 c3 is obviously more modern um and it's kind of a good deal for in terms of compute per per dollar",
    "start": "698160",
    "end": "705120"
  },
  {
    "text": "and a lot of the if you a lot of the use cases you know around if you're doing video encoding if you're doing web",
    "start": "705120",
    "end": "711600"
  },
  {
    "text": "serving web and or you need cpu and so i was a little bit surprised",
    "start": "711600",
    "end": "718240"
  },
  {
    "text": "initially to not see like these gigantic machines with like r3s with a lot of memory and so my interpretation",
    "start": "718240",
    "end": "724000"
  },
  {
    "text": "there is that i think containers right now we're still trying",
    "start": "724000",
    "end": "729200"
  },
  {
    "text": "to figure out and it makes sense more on the compute perspective and less so on sort of the ram perspective",
    "start": "729200",
    "end": "734320"
  },
  {
    "text": "so they're more cpu bound than right now so that's the first observation that i um that i was able to extract from",
    "start": "734320",
    "end": "740240"
  },
  {
    "text": "from seeing what what our customers use second thing is a number of containers per instance um",
    "start": "740240",
    "end": "746320"
  },
  {
    "start": "741000",
    "end": "806000"
  },
  {
    "text": "so this is excluding um sort of content not content",
    "start": "746320",
    "end": "751519"
  },
  {
    "text": "continuous integration farms because they kind of skewed the numbers but on the population we have we have about",
    "start": "751519",
    "end": "757279"
  },
  {
    "text": "five containers on average for instance which of course is a highly dependent on",
    "start": "757279",
    "end": "762480"
  },
  {
    "text": "workload but come to think of it's not that many but again i think it's really",
    "start": "762480",
    "end": "767760"
  },
  {
    "text": "just the beginning so i expect to see a lot more density a lot higher density even on average",
    "start": "767760",
    "end": "773760"
  },
  {
    "text": "on containers out there on instances you know per instance so much more many more than five containers for instance",
    "start": "773760",
    "end": "781040"
  },
  {
    "text": "now the one thing i didn't mention the data is that we see the maximum we've seen um at a",
    "start": "781040",
    "end": "786800"
  },
  {
    "text": "reasonable level is about 12. so it's you know five to 12. so roughly 10 um you know between five and",
    "start": "786800",
    "end": "792560"
  },
  {
    "text": "ten containers for instance so that we have people running 100 containers for instance but that's not",
    "start": "792560",
    "end": "797600"
  },
  {
    "text": "the majority and that's uh that's an interesting so keep that number five in uh in mind because uh it'll come back um",
    "start": "797600",
    "end": "804639"
  },
  {
    "text": "it'll be useful so with that let's dive into key docker metrics um so docker being",
    "start": "804639",
    "end": "813040"
  },
  {
    "start": "806000",
    "end": "845000"
  },
  {
    "text": "something like a virtual machine consumes one of these four things usually all four consumes memory",
    "start": "813040",
    "end": "819440"
  },
  {
    "text": "consumes cpu consumes i o and consumes network so it's only natural that kind of",
    "start": "819440",
    "end": "824560"
  },
  {
    "text": "metrics will docker metrics will typically uh you know cover all four things",
    "start": "824560",
    "end": "830079"
  },
  {
    "text": "now there are i want to say there are maybe 50 or 100 different docker metrics",
    "start": "830079",
    "end": "835360"
  },
  {
    "text": "i think i narrow it down to less than 10 um that matter",
    "start": "835360",
    "end": "840399"
  },
  {
    "text": "that doesn't mean that they're all they're not the rest is not useful but that these are the ones i think about so in terms of memory for instance",
    "start": "840399",
    "end": "846399"
  },
  {
    "start": "845000",
    "end": "907000"
  },
  {
    "text": "um the ones that we think are i think personally are useful and that we see our customers use",
    "start": "846399",
    "end": "851839"
  },
  {
    "text": "um it's anything around uh sort of the page faults uh mainly because it",
    "start": "851839",
    "end": "858000"
  },
  {
    "text": "indicates you know some kind of disk activity and disk is slow so you want to avoid that",
    "start": "858000",
    "end": "863040"
  },
  {
    "text": "something around resident set size which is how much ram does your container actually use this is mostly um",
    "start": "863040",
    "end": "871360"
  },
  {
    "text": "this is important because if you have obviously too much if you have containers that take too much ram um then you'll you'll end up swapping",
    "start": "871360",
    "end": "878079"
  },
  {
    "text": "and that's bad just because even on it sd swapping is suboptimal and then swap obviously is",
    "start": "878079",
    "end": "885440"
  },
  {
    "text": "swap is swap so you want to avoid uh swapping at all um a lot of instances have swap disabled so that",
    "start": "885440",
    "end": "892000"
  },
  {
    "text": "sort of makes the last the last match maybe less interesting but so in terms of memory i think you keep",
    "start": "892000",
    "end": "897920"
  },
  {
    "text": "these four in mind um that's kind of you're you're pretty much covered the rest is a lot more a lot more sort of detailed and and um",
    "start": "897920",
    "end": "905360"
  },
  {
    "text": "not so actionable in my mind cpu is very simple it's like so darker",
    "start": "905360",
    "end": "910480"
  },
  {
    "start": "907000",
    "end": "987000"
  },
  {
    "text": "it has it measures amount of amount of cpu that it uses to run whatever you",
    "start": "910480",
    "end": "915760"
  },
  {
    "text": "want your container to run and then you know you can also measure how much time is spent in system calls so that's pretty similar to",
    "start": "915760",
    "end": "924160"
  },
  {
    "text": "what you do when you if you run laptop or something it's it's very similar",
    "start": "924160",
    "end": "929680"
  },
  {
    "text": "io important though you know again i think we've seen less uh not a ton of i o intensive containers",
    "start": "929920",
    "end": "937120"
  },
  {
    "text": "um you know out there mostly seen compute intensive so computed memory intensive really two",
    "start": "937120",
    "end": "944160"
  },
  {
    "text": "metrics that i think makes sense so the amount of io that you're actually doing because io",
    "start": "944160",
    "end": "951040"
  },
  {
    "text": "is usually is often or usually bottleneck and then a measure of saturation of io so the",
    "start": "951040",
    "end": "957519"
  },
  {
    "text": "the second one ioq'd which is how many io operations essentially are waiting to be processed",
    "start": "957519",
    "end": "962880"
  },
  {
    "text": "um so surv the first one service bytes um it doesn't it you know it's just a",
    "start": "962880",
    "end": "969759"
  },
  {
    "text": "representation i read the mega second for five minutes all right you know it's neither good nor bad it really depends on your",
    "start": "969759",
    "end": "975680"
  },
  {
    "text": "workload the second one though is much more important if you have a lot of q it's like ebs if you have a lot of",
    "start": "975680",
    "end": "981839"
  },
  {
    "text": "queued operations it means you're basically stalling processing because i o is dragging you",
    "start": "981839",
    "end": "987040"
  },
  {
    "start": "987000",
    "end": "1017000"
  },
  {
    "text": "down network is very in a sense very similar to um to i o",
    "start": "987040",
    "end": "992639"
  },
  {
    "text": "except you have slightly different measure of so you measure more errors than saturation but you know you can",
    "start": "992639",
    "end": "997920"
  },
  {
    "text": "measure um you know how many errors you get and how many packets you drop and then how many network uh transactions network",
    "start": "997920",
    "end": "1005920"
  },
  {
    "text": "traffic you have so these are kind of in three two so you know about ten",
    "start": "1005920",
    "end": "1011920"
  },
  {
    "text": "metrics for docker that um that makes sense that are i think the critical ones to watch",
    "start": "1011920",
    "end": "1017680"
  },
  {
    "start": "1017000",
    "end": "1041000"
  },
  {
    "text": "now how do you collect them uh you can use uh so datadog provides an agent for that",
    "start": "1017680",
    "end": "1024720"
  },
  {
    "text": "um but also you can use something that in the open source world called c advisor that'll collect automatically metrics",
    "start": "1024720",
    "end": "1030640"
  },
  {
    "text": "for docker so um that kind of gives uh this quick quick walk through um",
    "start": "1030640",
    "end": "1038880"
  },
  {
    "text": "of all the metrics now let's look at the impact on which is i think also",
    "start": "1038880",
    "end": "1045280"
  },
  {
    "start": "1041000",
    "end": "1060000"
  },
  {
    "text": "what you hear is is you have these questions all right you know we're going to roll out docker it's great um it has a lot of",
    "start": "1045280",
    "end": "1051200"
  },
  {
    "text": "benefits for for developers it makes our workflow a lot simpler what's ahead of us when we do that so",
    "start": "1051200",
    "end": "1060080"
  },
  {
    "start": "1060000",
    "end": "1137000"
  },
  {
    "text": "it's going to get complicated so the reason for that is it's going to get",
    "start": "1060320",
    "end": "1066240"
  },
  {
    "text": "a lot you know many more many more moving parts the reason for that is 15 years ago on the left side this was",
    "start": "1066240",
    "end": "1073039"
  },
  {
    "text": "your typical stack hardware os some off-the-shelf thing g2e container",
    "start": "1073039",
    "end": "1079039"
  },
  {
    "text": "you know database whatever and then your app that sits on top of it and that's pretty much it and you have a bunch of those in the",
    "start": "1079039",
    "end": "1084400"
  },
  {
    "text": "data center and that's it comes virtualization in ec2 you start adding a little bit more complexity because now",
    "start": "1084400",
    "end": "1090960"
  },
  {
    "text": "per piece of hardware you have more vms so you sort of slice in the uh you slide in",
    "start": "1090960",
    "end": "1097520"
  },
  {
    "text": "sorry the hypervisor and then that becomes a little bit more complex you know i think um the i would",
    "start": "1097520",
    "end": "1106000"
  },
  {
    "text": "wager that your operations have changed since you've moved to ec2 if somebody",
    "start": "1106000",
    "end": "1112400"
  },
  {
    "text": "disagrees please let me know but so what i'm essentially saying is that it's going to be",
    "start": "1112400",
    "end": "1118080"
  },
  {
    "text": "it's going to change again when you introduce containers so when you introduce containers you're basically slicing further so you're per nap per vm",
    "start": "1118080",
    "end": "1125520"
  },
  {
    "text": "per ec2 instance you add containers so now you have a container that contains itself and on the shelf application",
    "start": "1125520",
    "end": "1130640"
  },
  {
    "text": "that's the o and that contains that it's self-serving application that's that's the so you have a lot more of those",
    "start": "1130640",
    "end": "1137840"
  },
  {
    "start": "1137000",
    "end": "1186000"
  },
  {
    "text": "so now if you uh if you remember that you know you have on average five containers per instance um that's based",
    "start": "1137919",
    "end": "1144799"
  },
  {
    "text": "on data from october on data set that i looked at sort of at",
    "start": "1144799",
    "end": "1149840"
  },
  {
    "text": "first blush it looks like you're gonna have end times so five times many more hosts to manage um and that's gonna have a",
    "start": "1149840",
    "end": "1156720"
  },
  {
    "text": "direct effect on uh provisioning uh which is you know how do you build containers",
    "start": "1156720",
    "end": "1163520"
  },
  {
    "text": "and configuration how do you pass configuration to containers orchestration how do you decide where containers get",
    "start": "1163520",
    "end": "1169440"
  },
  {
    "text": "run when they get run and finally monitoring which is really you know how to make sure the containers run properly",
    "start": "1169440",
    "end": "1175039"
  },
  {
    "text": "and that's the last part while all all four aspects are very interesting in",
    "start": "1175039",
    "end": "1180240"
  },
  {
    "text": "themselves it's really the last one i want to talk about monitoring so",
    "start": "1180240",
    "end": "1185279"
  },
  {
    "start": "1186000",
    "end": "1221000"
  },
  {
    "text": "let's look at um sort of monitoring currently as it stands so you have one",
    "start": "1186640",
    "end": "1193360"
  },
  {
    "text": "instance on ec2 that generates about 10 cloud watch metrics you have one os running it on",
    "start": "1193360",
    "end": "1198559"
  },
  {
    "text": "that inside that instance that generates about 100 metrics you have one container that you know that's between 10",
    "start": "1198559",
    "end": "1204960"
  },
  {
    "text": "important metrics but really total it generates about 50 metrics and then you have one off the shelf applications running inside the container",
    "start": "1204960",
    "end": "1211120"
  },
  {
    "text": "that's another 50 metrics so you have right there about 160 metrics that just per container if you want to",
    "start": "1211120",
    "end": "1217520"
  },
  {
    "text": "look at everything from the top to the bottom you have 160 metrics let's say you have 100 instances so now",
    "start": "1217520",
    "end": "1224400"
  },
  {
    "text": "you have 500 containers that's only assuming five containers for instance so you can do the math",
    "start": "1224400",
    "end": "1230240"
  },
  {
    "text": "um which i'll actually i'll let you do in your head but if you're 160 metrics for instance you",
    "start": "1230240",
    "end": "1235679"
  },
  {
    "text": "add five containers for instance you have 400 um not everything it's not directly near but you're about",
    "start": "1235679",
    "end": "1242720"
  },
  {
    "text": "you have about 410 metrics for instance so if you had 100 instance you're now at 41 000 metrics um so",
    "start": "1242720",
    "end": "1250080"
  },
  {
    "text": "that's that's an order of magnitude more than before and that's so just get prepared for that",
    "start": "1250080",
    "end": "1256960"
  },
  {
    "text": "but that's the easy part the hard part is this if you look at your half-life",
    "start": "1256960",
    "end": "1262000"
  },
  {
    "start": "1258000",
    "end": "1317000"
  },
  {
    "text": "of your fleets your ec2 fleet so by a half-life i mean the median time the median up time",
    "start": "1262000",
    "end": "1267039"
  },
  {
    "text": "um of your ec2 fleet i don't have numbers for this but i can this is what we've observed and i think",
    "start": "1267039",
    "end": "1272960"
  },
  {
    "text": "this is what people how people use ec2 the median up time which means really",
    "start": "1272960",
    "end": "1279600"
  },
  {
    "text": "roughly half of the machines die before that time an ec2 is you know sometimes hours days a month",
    "start": "1279600",
    "end": "1285280"
  },
  {
    "text": "by that i mean you're going to have instances that you run for a couple of hours you're going to have instances you run for a couple of days you gotta",
    "start": "1285280",
    "end": "1290720"
  },
  {
    "text": "have instances that you run forever um you know for at least months if not yours um for containers it's it's",
    "start": "1290720",
    "end": "1297840"
  },
  {
    "text": "drastically faster containers typically you know you'll kick one for a minute and then it'll do",
    "start": "1297840",
    "end": "1304240"
  },
  {
    "text": "its thing and just go away maybe an hour and maybe days but it's very unlikely that",
    "start": "1304240",
    "end": "1309919"
  },
  {
    "text": "it's going to hang you'll have containers the same containers like lying around and doing its thing for for",
    "start": "1309919",
    "end": "1315919"
  },
  {
    "text": "months and months and months and there's a couple of reasons for that is one is with sort of",
    "start": "1315919",
    "end": "1321919"
  },
  {
    "text": "you know hub-based provisioning where you can like docker file build your docker build docker build the car build",
    "start": "1321919",
    "end": "1327760"
  },
  {
    "text": "you can start generating images every day and so these images have to be deployed and so what that means is you have a really high churn",
    "start": "1327760",
    "end": "1334559"
  },
  {
    "text": "of your container and the second thing that's going to make things hard is orchestration because",
    "start": "1334559",
    "end": "1342480"
  },
  {
    "text": "now as you deploy containers in production the next questions you're going to have is like all right well why how do i assign when where do i",
    "start": "1342480",
    "end": "1349039"
  },
  {
    "text": "decide um where do i put my containers you know how who decides where they're running and so you have these cool tools like mesos",
    "start": "1349039",
    "end": "1355360"
  },
  {
    "text": "kubernetes fleet that kind of automate that and take a very different approach that say",
    "start": "1355360",
    "end": "1361280"
  },
  {
    "text": "don't worry about that just tell me what where what conditions what constraints you want",
    "start": "1361280",
    "end": "1366559"
  },
  {
    "text": "to run the containers and i'll take care of it and so that's great because you can say well you know i want five containers per instance",
    "start": "1366559",
    "end": "1374080"
  },
  {
    "text": "per zone at any given time of this particular type and if they are if one of them crashes",
    "start": "1374080",
    "end": "1379440"
  },
  {
    "text": "you know start a new one it's very much like the auto scaling group you know idea the bad thing is that",
    "start": "1379440",
    "end": "1386000"
  },
  {
    "text": "this is completely omitted so like you you know things will just come and go come and go come and go all",
    "start": "1386000",
    "end": "1391840"
  },
  {
    "text": "the time and so from a from an operations perspective it becomes really non-uh really non-trivial so it's gonna be a",
    "start": "1391840",
    "end": "1399520"
  },
  {
    "start": "1398000",
    "end": "1406000"
  },
  {
    "text": "lot a lot more a lot faster that's that's essentially what um you know what i'm what i'm conveying",
    "start": "1399520",
    "end": "1405679"
  },
  {
    "text": "here not everything uh so it's not necessary picture but",
    "start": "1405679",
    "end": "1411039"
  },
  {
    "start": "1406000",
    "end": "1454000"
  },
  {
    "text": "what i want to say and what i want to stress is if you're thinking about containers if you're thinking about monitoring your containers like you're",
    "start": "1411039",
    "end": "1417200"
  },
  {
    "text": "monitoring more hosts it's going to be it's going to be hard this is",
    "start": "1417200",
    "end": "1423120"
  },
  {
    "text": "the the picture in case you're curious you could maybe read this as the earth at the center so back in the ancient times they",
    "start": "1423120",
    "end": "1430880"
  },
  {
    "text": "you know people thought well the earth is the center of the universe and let's they were trying to do astronomy",
    "start": "1430880",
    "end": "1436240"
  },
  {
    "text": "um with the earth at the center of universe so you have this complex gyration and",
    "start": "1436240",
    "end": "1441919"
  },
  {
    "text": "cycles and it's it got out of hand really quickly um and so that's kind of if you if you",
    "start": "1441919",
    "end": "1447760"
  },
  {
    "text": "think about monitoring docker containers like you're monitoring new instances that's kind of what you're getting yourself into",
    "start": "1447760",
    "end": "1454960"
  },
  {
    "start": "1454000",
    "end": "1473000"
  },
  {
    "text": "um or you could say you know what um you know i can monitor os and hypervisor",
    "start": "1454960",
    "end": "1460480"
  },
  {
    "text": "i can monitor the app i'll just let the containers be that's not great because right you're going to",
    "start": "1460480",
    "end": "1466000"
  },
  {
    "text": "have a huge gap in your in your monitoring so you're like oh well i don't i can't see anything so",
    "start": "1466000",
    "end": "1471760"
  },
  {
    "text": "that's obviously not where you want to be um but if you want to you know if just if you if you still think of",
    "start": "1471760",
    "end": "1479200"
  },
  {
    "start": "1473000",
    "end": "1502000"
  },
  {
    "text": "monitoring docker containers like their new machine they're like single machines it's gonna be it's gonna be a lot of",
    "start": "1479200",
    "end": "1485039"
  },
  {
    "text": "pain it's going to be super fast i mean things will come and go your monitoring system will go crazy alert hey this container died hey this",
    "start": "1485039",
    "end": "1490960"
  },
  {
    "text": "container died hey this container died just because the scheduler the the uh or the",
    "start": "1490960",
    "end": "1496559"
  },
  {
    "text": "orchestrators is just moving stuff around and just it's normal it's you know you don't need to be alerted",
    "start": "1496559",
    "end": "1503200"
  },
  {
    "start": "1502000",
    "end": "1521000"
  },
  {
    "text": "now with all that said um does you know is this the end of the world so",
    "start": "1503200",
    "end": "1509520"
  },
  {
    "text": "obviously no i i wanted to share a few ideas that um that we've had and and i think",
    "start": "1509520",
    "end": "1517760"
  },
  {
    "text": "you can you can get you can get the problem under control um it does though require a new approach",
    "start": "1517760",
    "end": "1523440"
  },
  {
    "start": "1521000",
    "end": "1554000"
  },
  {
    "text": "to container monitoring this picture as a contrast to the previous one i was like all these",
    "start": "1523440",
    "end": "1528880"
  },
  {
    "text": "complex cycles this is what happens when copernicus put the sun at the center of the universe",
    "start": "1528880",
    "end": "1535760"
  },
  {
    "text": "everything became a lot more very clear very simple and that's kind of i don't have the",
    "start": "1535760",
    "end": "1542159"
  },
  {
    "text": "pretension to do what copernicus did but you know i think that's that's kind of the the metal shift that that um that i'm",
    "start": "1542159",
    "end": "1549440"
  },
  {
    "text": "i'm proposing as a um to you in the audience so um",
    "start": "1549440",
    "end": "1557840"
  },
  {
    "start": "1554000",
    "end": "1564000"
  },
  {
    "text": "the secret sauce is these two words layers and tags um so it's very simple really",
    "start": "1557919",
    "end": "1564799"
  },
  {
    "start": "1564000",
    "end": "1684000"
  },
  {
    "text": "layers means um this layers means that um you want to monitor",
    "start": "1564799",
    "end": "1571279"
  },
  {
    "text": "everything so you want me to you don't want a gap just because it's not acceptable to run stuff in production and there's",
    "start": "1571279",
    "end": "1578159"
  },
  {
    "text": "half of this stuff you can't see it's just not acceptable so you want to monitor everything and when you when you think about the tools",
    "start": "1578159",
    "end": "1583440"
  },
  {
    "text": "you have um you know at your disposal so you can do it so what i'm what i'm saying is you can",
    "start": "1583440",
    "end": "1589600"
  },
  {
    "text": "do it you have to make sure that so cloudwatch will cover the hypervisor your apm or application performance",
    "start": "1589600",
    "end": "1594880"
  },
  {
    "text": "manager monitor uh will cover the top uh but your infrastructure monitor has to cover",
    "start": "1594880",
    "end": "1600159"
  },
  {
    "text": "you know the middle it has to to understand containers so if you care about the app throughput",
    "start": "1600159",
    "end": "1605919"
  },
  {
    "text": "the apm will probably tell you about oh this is how many successful web queries i'm able to",
    "start": "1605919",
    "end": "1611120"
  },
  {
    "text": "process if you care about uh sort of raw meth raw resources from cloudwatch uh from",
    "start": "1611120",
    "end": "1618000"
  },
  {
    "text": "sorry from the hypervisor cloudwatch will provide if you care about you know file system docker metrics uh",
    "start": "1618000",
    "end": "1623360"
  },
  {
    "text": "database queries web requests and so on your monitoring should be able to provide that so you really want to have",
    "start": "1623360",
    "end": "1630080"
  },
  {
    "text": "a very layered approach to monitoring so you want to have you want to be able to access all the metrics so metrics from",
    "start": "1630080",
    "end": "1635360"
  },
  {
    "text": "all the layers like easily you want to because you want to be able to compare them",
    "start": "1635360",
    "end": "1640720"
  },
  {
    "text": "so that means you want to be able to have like clown watch metrics os metrics docker metrics everything in one place",
    "start": "1640720",
    "end": "1645760"
  },
  {
    "text": "all in one shared timeline so that you can you know put the picture together",
    "start": "1645760",
    "end": "1651679"
  },
  {
    "text": "if your monitoring does not cover all the layers it's going to be painful and you know very obviously just because",
    "start": "1651679",
    "end": "1658240"
  },
  {
    "text": "you'll have you'll just see either the top level stuff say oh the app is not performing well and be like okay",
    "start": "1658240",
    "end": "1664159"
  },
  {
    "text": "well i don't know it's i can't see what's beneath or if you look just at the bottom say",
    "start": "1664159",
    "end": "1669200"
  },
  {
    "text": "this machine is performing it's 100 cpu utilization it's bad good i don't know it depends whether",
    "start": "1669200",
    "end": "1675760"
  },
  {
    "text": "it's expected or not so layers is really you want to be able to look at everything you know",
    "start": "1675760",
    "end": "1682159"
  },
  {
    "text": "in in one shot and that's really important the second thing is this is really um i should say the the",
    "start": "1682159",
    "end": "1690000"
  },
  {
    "start": "1684000",
    "end": "1728000"
  },
  {
    "text": "you know the key thing uh is tags um and the good news and that's kind of the for me it was",
    "start": "1690000",
    "end": "1695600"
  },
  {
    "text": "kind of the um the the leap or not the leap but you",
    "start": "1695600",
    "end": "1700799"
  },
  {
    "text": "know the the aha moment was like oh yeah that's we can use this this is going to be super useful",
    "start": "1700799",
    "end": "1706880"
  },
  {
    "text": "so tags the good news you maybe who who doesn't know what so tags are in amazon parlance",
    "start": "1706880",
    "end": "1714159"
  },
  {
    "text": "okay everybody that's cool so you use them already of course your machines are tagged by az they have",
    "start": "1714159",
    "end": "1720480"
  },
  {
    "text": "a security group that you can add your own there's an instant type so there's a lot of properties that you can have",
    "start": "1720480",
    "end": "1726480"
  },
  {
    "text": "and so when you think about that it lets you think about monitoring just like you",
    "start": "1726480",
    "end": "1731840"
  },
  {
    "start": "1728000",
    "end": "1758000"
  },
  {
    "text": "think about auto scaling groups so monitoring is is not monitoring is not saying i need to monitor this machine that",
    "start": "1731840",
    "end": "1738559"
  },
  {
    "text": "machine that machine that machine and that machine monitoring is really saying i want to",
    "start": "1738559",
    "end": "1743919"
  },
  {
    "text": "monitor all the machines that have a given property or all the processes that are given properly all the services that are that have a",
    "start": "1743919",
    "end": "1750159"
  },
  {
    "text": "given property and that property is based on tags so i'm going to give",
    "start": "1750159",
    "end": "1755919"
  },
  {
    "text": "you a few examples one of them is for instance",
    "start": "1755919",
    "end": "1763279"
  },
  {
    "text": "let's say you you deploy docker it runs your web tier",
    "start": "1763279",
    "end": "1768399"
  },
  {
    "text": "so effective monitoring if you want to if you don't want to go crazy you won't be able to monitor like like",
    "start": "1768399",
    "end": "1774399"
  },
  {
    "text": "so you want to express your monitoring and saying i want to monitor all the docker containers running a given image",
    "start": "1774399",
    "end": "1781600"
  },
  {
    "text": "image web in region us quest to across all ac's and make sure that resident set size is less than one gig",
    "start": "1781600",
    "end": "1787919"
  },
  {
    "text": "on a c3 xl i've highlighted the tags here it's pretty clear right um you know one",
    "start": "1787919",
    "end": "1795120"
  },
  {
    "text": "tag is it's a docker the image is web another tag is region of the ec2 instance is",
    "start": "1795120",
    "end": "1800640"
  },
  {
    "text": "uswest2 um another tag is lgbt zone can be us west 2 abcd",
    "start": "1800640",
    "end": "1808720"
  },
  {
    "text": "last tag is instance type has to be c3.xl",
    "start": "1808720",
    "end": "1814320"
  },
  {
    "text": "so um just do you see how how powerful this can be because that means that look you can",
    "start": "1814559",
    "end": "1820480"
  },
  {
    "text": "cloud formation 100 new instances um you know it's this doesn't change the query is",
    "start": "1820480",
    "end": "1826559"
  },
  {
    "text": "still valid it's just it means that it adapts to um to your infrastructure",
    "start": "1826559",
    "end": "1832880"
  },
  {
    "text": "you can spin up uh smooth from five instances per containers running web to",
    "start": "1832880",
    "end": "1838080"
  },
  {
    "text": "a hundred instances um or running containers sorry for instance running web it doesn't change your this remains true",
    "start": "1838080",
    "end": "1845679"
  },
  {
    "text": "and this is how you express your monitoring and this is this is how you can effectively monitor docker containers and i'll give",
    "start": "1845679",
    "end": "1851440"
  },
  {
    "text": "you an example so it's just not it doesn't just remain you know in abstract but the cool thing",
    "start": "1851440",
    "end": "1858960"
  },
  {
    "text": "is then you can get more sophisticated because then you can say well i want to monitor all docker instances",
    "start": "1858960",
    "end": "1864799"
  },
  {
    "text": "that use more than one point times um you know one and a half times the average rss i",
    "start": "1864799",
    "end": "1871279"
  },
  {
    "text": "missed a word here on uh on all the machines that are c3 excels so this then lets you become a lot more",
    "start": "1871279",
    "end": "1879039"
  },
  {
    "text": "sophisticated in how you monitor and i posit and i submit to you that the",
    "start": "1879039",
    "end": "1884799"
  },
  {
    "text": "only way you can monitor docker effectively is to be able to do this because otherwise it's you're going to go crazy real fast",
    "start": "1884799",
    "end": "1894559"
  },
  {
    "start": "1893000",
    "end": "1963000"
  },
  {
    "text": "okay so um now the good news is you've been through that already um in a way you've",
    "start": "1895600",
    "end": "1902640"
  },
  {
    "text": "been through that transformation already when ec2 was introduced the",
    "start": "1902640",
    "end": "1909840"
  },
  {
    "text": "basic assumption or the basic premise was like we give you a server you don't know where it is you don't know what cert you know what",
    "start": "1909840",
    "end": "1916480"
  },
  {
    "text": "rack it is like things that we thought were very important to us um",
    "start": "1916480",
    "end": "1921519"
  },
  {
    "text": "that completely uh went away so yeah dude where's my server it's like i don't know and frankly i don't care",
    "start": "1921519",
    "end": "1927440"
  },
  {
    "text": "where which server is running you know where the instance where the physical server where my instance is",
    "start": "1927440",
    "end": "1933039"
  },
  {
    "text": "running i don't care so it's exactly the same thing for the container it's like",
    "start": "1933039",
    "end": "1938720"
  },
  {
    "text": "it doesn't matter where you know which machine which host your container is running because it's",
    "start": "1938720",
    "end": "1944080"
  },
  {
    "text": "it's here one day or one minute it's somewhere else another minute what you care about is really you want",
    "start": "1944080",
    "end": "1949840"
  },
  {
    "text": "to be able your money to express your monitoring as i want to monitor all the containers that have a given property and that's",
    "start": "1949840",
    "end": "1955760"
  },
  {
    "text": "or you know a set of properties and that's that's really key to not going crazy with docker in",
    "start": "1955760",
    "end": "1962720"
  },
  {
    "text": "production so if it's if your monitoring is not tag based it's going to be painful",
    "start": "1962720",
    "end": "1969200"
  },
  {
    "start": "1963000",
    "end": "2007000"
  },
  {
    "text": "and i want to show you a little bit of of a demo so uh how do we do that",
    "start": "1969200",
    "end": "1978080"
  },
  {
    "text": "it works yes no",
    "start": "1978080",
    "end": "1983278"
  },
  {
    "text": "uh sorry uh how do we get the",
    "start": "1988840",
    "end": "1995519"
  },
  {
    "text": "browser projected here",
    "start": "1995519",
    "end": "2005840"
  },
  {
    "start": "2007000",
    "end": "2347000"
  },
  {
    "text": "yes i found it okay",
    "start": "2007279",
    "end": "2014080"
  },
  {
    "text": "so this is what i did um i wanted to have a an actual real life example",
    "start": "2014960",
    "end": "2022159"
  },
  {
    "text": "an example um so these are uh real containers they're not our these are containers that's spun up so",
    "start": "2022159",
    "end": "2028240"
  },
  {
    "text": "what i did is i i cloth formation a bunch of uh",
    "start": "2028240",
    "end": "2033600"
  },
  {
    "text": "a bunch of core os instances um and whereby i decided to roll out a bunch of",
    "start": "2033600",
    "end": "2040880"
  },
  {
    "text": "uh containers so um i use as an example i use our stuff because i",
    "start": "2040880",
    "end": "2046000"
  },
  {
    "text": "you know i know it well but um the idea remains the same um you know if you use something else so",
    "start": "2046000",
    "end": "2051358"
  },
  {
    "text": "uh we have like an agent that you run as a container and then you can see it gave me so i have 66 running containers i have",
    "start": "2051359",
    "end": "2057760"
  },
  {
    "text": "running on 23 instances and you can see throughout the day what i did i started a bunch that's the",
    "start": "2057760",
    "end": "2063520"
  },
  {
    "text": "containers it's kind of remained flat uh overnight and then this morning i started a bunch of uh a",
    "start": "2063520",
    "end": "2068878"
  },
  {
    "text": "bunch of new containers so that's kind of the the setup of the of",
    "start": "2068879",
    "end": "2074320"
  },
  {
    "text": "of this example the bottom half is kind of trying to show you",
    "start": "2074320",
    "end": "2079599"
  },
  {
    "text": "using different layers so i looked at cpu consumed by machine by containers ultimately",
    "start": "2079599",
    "end": "2087118"
  },
  {
    "text": "consumed by containers but i wanted to see what they look like at different layers so you can use as i",
    "start": "2087119",
    "end": "2092960"
  },
  {
    "text": "mentioned that the lowest layer you can use cloud watch to get um ec2 cpu utilization so you can see",
    "start": "2092960",
    "end": "2099359"
  },
  {
    "text": "that i have a bunch of machines that are either maxed out or kind of idle and they you know they go up or down",
    "start": "2099359",
    "end": "2105440"
  },
  {
    "text": "i did the same by getting the same metrics so this little agent container thing",
    "start": "2105440",
    "end": "2111359"
  },
  {
    "text": "collects everything mostly from the host so the host that runs all the containers",
    "start": "2111359",
    "end": "2118079"
  },
  {
    "text": "so that gave me i don't know you can see there's a bunch of machines that are maxed out 100 there's a bunch that are kind of in the",
    "start": "2118079",
    "end": "2124079"
  },
  {
    "text": "middle there's a bunch that are completely idle and i also looked at the same same metric same idea",
    "start": "2124079",
    "end": "2130160"
  },
  {
    "text": "from inside the container so in this case i looked at so the user technically is the user",
    "start": "2130160",
    "end": "2139040"
  },
  {
    "text": "g fees consumed by the container which means which is why you can go over 100 but um you know that's the idea so that",
    "start": "2139040",
    "end": "2145599"
  },
  {
    "text": "starts to give me at least i have a good good sense of uh or at least have a sense of well what does it look like at",
    "start": "2145599",
    "end": "2151359"
  },
  {
    "text": "the lowest level what does it look like at the you know slightly higher higher layer and and so on",
    "start": "2151359",
    "end": "2156880"
  },
  {
    "text": "um so that's how i can i layer monitoring to have access to everything then i wanted to look at so",
    "start": "2156880",
    "end": "2165119"
  },
  {
    "text": "start using tags within the layers so again i look at metrics coming from cloudwatch split by",
    "start": "2165119",
    "end": "2171920"
  },
  {
    "text": "so one type of instance versus another type of instance so you could see that initially when i had",
    "start": "2171920",
    "end": "2178079"
  },
  {
    "text": "cloudwatch ec2 utilization across everything i had a bunch of maxed out a bunch at the bottom turns",
    "start": "2178079",
    "end": "2184000"
  },
  {
    "text": "out it's not completely arbitrary it's very clearly split by type so",
    "start": "2184000",
    "end": "2189680"
  },
  {
    "text": "you see to instance c3 x large complete idle my m3 mediums have a bunch of instances",
    "start": "2189680",
    "end": "2194880"
  },
  {
    "text": "maxed out and a few that are almost idle then i kind of did the the same thing",
    "start": "2194880",
    "end": "2200160"
  },
  {
    "text": "now the interesting thing is um for oh and before i do that the the query that was talking about",
    "start": "2200160",
    "end": "2205920"
  },
  {
    "text": "is so if i wanted to get the subtraction of all ec2 instances of zone 2a",
    "start": "2205920",
    "end": "2211760"
  },
  {
    "text": "this is the kind of query that expresses that it's something that basically says",
    "start": "2211760",
    "end": "2216880"
  },
  {
    "text": "this is um i care about specialization in zone 2 for m3 mediums that gives me the graph on",
    "start": "2216880",
    "end": "2223119"
  },
  {
    "text": "the left and the same thing for docker metrics we have utilization of",
    "start": "2223119",
    "end": "2229280"
  },
  {
    "text": "containers so i care about the metric docker cpu user west zone us",
    "start": "2229280",
    "end": "2236160"
  },
  {
    "text": "west 2 type c3 x large i think in this case so you can see an example of of the queries",
    "start": "2236160",
    "end": "2242960"
  },
  {
    "text": "because nowhere here do i talk about machine or instance id or anything i only care",
    "start": "2242960",
    "end": "2249920"
  },
  {
    "text": "about where um you know a set of set of tags instead of properties and then",
    "start": "2249920",
    "end": "2256079"
  },
  {
    "text": "kind of magic happens and it doesn't rest so another way to look at it i kind of",
    "start": "2256079",
    "end": "2263280"
  },
  {
    "text": "dove a little bit deeper is now you know you can focus on a given",
    "start": "2263280",
    "end": "2268480"
  },
  {
    "text": "image so again i care only about the containers that run an image of a particular type and um and i want to you know how do i",
    "start": "2268480",
    "end": "2275520"
  },
  {
    "text": "query how do i monitor it so i can use the foreign queries i say i care about docker cpu user it runs this image and i",
    "start": "2275520",
    "end": "2283040"
  },
  {
    "text": "wanted to break it by zone so again something that was not at all visible initially is that",
    "start": "2283040",
    "end": "2288079"
  },
  {
    "text": "by zone there's one zone that's super busy in a zone that's kind of medium busy and that's the zone that completely idle",
    "start": "2288079",
    "end": "2293680"
  },
  {
    "text": "and that stuff is not visible if you're looking just at the at the host of the instance",
    "start": "2293680",
    "end": "2300160"
  },
  {
    "text": "same thing for um for the if i wanted to get a different uh view",
    "start": "2300160",
    "end": "2308160"
  },
  {
    "text": "so even in a given zone us west 2b that's the query the three queries at the bottom",
    "start": "2308160",
    "end": "2313200"
  },
  {
    "text": "i want to minimum the maximum the average so i want to see the distribution of how much cpu containers are consuming",
    "start": "2313200",
    "end": "2319839"
  },
  {
    "text": "in a given zone running a given image so that's",
    "start": "2319839",
    "end": "2324880"
  },
  {
    "text": "that's the power of queries and what i submit to you is that you know you basically however you do it",
    "start": "2324960",
    "end": "2331760"
  },
  {
    "text": "um you have to be able to express monitoring like that so it won't work to monitor things host by",
    "start": "2331760",
    "end": "2338839"
  },
  {
    "text": "host all right so let me move that out of the",
    "start": "2338839",
    "end": "2344320"
  },
  {
    "text": "way okay so so we're basically getting to uh",
    "start": "2344320",
    "end": "2350400"
  },
  {
    "start": "2347000",
    "end": "2402000"
  },
  {
    "text": "you know to the end of the the presentation so i have you know the takeaways i think which i hope i've been able to convey um",
    "start": "2350400",
    "end": "2356800"
  },
  {
    "text": "is that um docker will increase your your operational complexity by um by an order of magnitude and that's",
    "start": "2356800",
    "end": "2363920"
  },
  {
    "text": "you know alum five containers for instance that's going to be and then the containers move",
    "start": "2363920",
    "end": "2369280"
  },
  {
    "text": "you know move around fast and then they come and go super fast that'll drive you crazy from a from an",
    "start": "2369280",
    "end": "2376000"
  },
  {
    "text": "operational standpoint unless you can have monitoring that kind of looks at all layers at once and",
    "start": "2376000",
    "end": "2382240"
  },
  {
    "text": "something where in monitoring where you can express your um what you want to what you care about",
    "start": "2382240",
    "end": "2388560"
  },
  {
    "text": "what you want to monitor with queries and tags not by just pointing at individual hosts",
    "start": "2388560",
    "end": "2397200"
  },
  {
    "text": "thank you very much",
    "start": "2397200",
    "end": "2404480"
  }
]