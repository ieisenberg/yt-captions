[
  {
    "start": "0",
    "end": "110000"
  },
  {
    "text": "so welcome to Wednesday which is Aurora day today is going to be structured",
    "start": "740",
    "end": "5779"
  },
  {
    "text": "again I'm each day has been a little bit different and today again it'll be structured a little bit differently from",
    "start": "5779",
    "end": "10820"
  },
  {
    "text": "the previous two days I kind of mentioned this earlier you heard me but not everybody did that as I was",
    "start": "10820",
    "end": "17360"
  },
  {
    "text": "preparing last night and running through the content that I I was hoping to present today I have realized that I was",
    "start": "17360",
    "end": "27800"
  },
  {
    "text": "running through the what a large part of the content is I want to go through we have a whole bunch of content which is",
    "start": "27800",
    "end": "33800"
  },
  {
    "text": "just sort of that we've already put together that's a deep dive into a world Postgres it's really good content and it's been a",
    "start": "33800",
    "end": "40790"
  },
  {
    "text": "while since I've looked closely at it and when I was looking last night I was kind of thinking this is a lot for me to",
    "start": "40790",
    "end": "45800"
  },
  {
    "text": "catch up on and so what I decide is that is that when I get to that part rather than me running through the",
    "start": "45800",
    "end": "51980"
  },
  {
    "text": "slides and trying to sort of remember exactly what each slide was about what I'm what I'm going to do is as I'm going",
    "start": "51980",
    "end": "58550"
  },
  {
    "text": "to play the video of Grant McCallister presenting that from reinvent last summer because basically there's only",
    "start": "58550",
    "end": "65119"
  },
  {
    "text": "about two slides that have content that's changed so I'm gonna run through his presentation take down any questions",
    "start": "65119",
    "end": "72799"
  },
  {
    "text": "just like you've been doing all week you can put them in the chat room and then we'll circle back to them at the end and",
    "start": "72799",
    "end": "78729"
  },
  {
    "text": "after the presentation finishes I'll come back and just sort of add on mention the one thing that's different",
    "start": "78729",
    "end": "85400"
  },
  {
    "text": "and then after that so I'll do I'm gonna talk quick a little bit at the beginning",
    "start": "85400",
    "end": "91040"
  },
  {
    "text": "we'll do the video and then I'm going to actually get on the whiteboard for a little while and explain a couple of I",
    "start": "91040",
    "end": "96530"
  },
  {
    "text": "think really important concepts in Aurora that I haven't had time to get onto slides yet but there are things",
    "start": "96530",
    "end": "102350"
  },
  {
    "text": "that a lot of people were asking about and asking for me to cover and they're just questions that we get a lot of it",
    "start": "102350",
    "end": "107420"
  },
  {
    "text": "okay so diving into Aurora Postgres in",
    "start": "107420",
    "end": "113689"
  },
  {
    "start": "110000",
    "end": "310000"
  },
  {
    "text": "order to set the stage for first let's take sort of step back and take a look",
    "start": "113689",
    "end": "120079"
  },
  {
    "text": "at at sort of the the bigger picture here and thinking about sort of RDS an",
    "start": "120079",
    "end": "125689"
  },
  {
    "text": "RDS first of all you have RDS Postgres which has right is basically a database",
    "start": "125689",
    "end": "130998"
  },
  {
    "text": "running with EBS storage underneath it then you've got Aurora Postgres which has the Aurora",
    "start": "130999",
    "end": "136400"
  },
  {
    "text": "storage underneath it and these are very different things right EBS is very different from Aurora storage but one",
    "start": "136400",
    "end": "142510"
  },
  {
    "text": "one really important kind of point is that from your clients perspective they",
    "start": "142510",
    "end": "148910"
  },
  {
    "text": "look very similar and actually grants gonna touch on this and his talk to write there are a lot of shared there",
    "start": "148910",
    "end": "159050"
  },
  {
    "text": "are a lot of shared components too so in addition to the fact that so to your",
    "start": "159050",
    "end": "165980"
  },
  {
    "text": "clients like if you design an application to work on Postgres whether it's open source Postgres was already as",
    "start": "165980",
    "end": "172070"
  },
  {
    "text": "Postgres that application will continue to work the same on Aurora Postgres that's part of the way that we've built it in addition to that client level",
    "start": "172070",
    "end": "181220"
  },
  {
    "text": "compatibility there's another thing which that there actually are a lot of shared components in the orchestration",
    "start": "181220",
    "end": "186620"
  },
  {
    "text": "part as well so like the infrastructure that automates and manages a lot of these things and that's also part of the",
    "start": "186620",
    "end": "192920"
  },
  {
    "text": "reason that it's that it's that we're able to do this so easily like for example things like I am authentication",
    "start": "192920",
    "end": "199990"
  },
  {
    "text": "things like s3 integration which isn't on the list here because there's a lot",
    "start": "199990",
    "end": "205459"
  },
  {
    "text": "of similar there's a lot of this really the same moving parts behind the scenes that are involved in managing both of",
    "start": "205459",
    "end": "210920"
  },
  {
    "text": "these so because of that I'm actually going to just before we dive into the",
    "start": "210920",
    "end": "217880"
  },
  {
    "text": "aurora stuff i just want to mention two or three things on the RDS Postgres side",
    "start": "217880",
    "end": "223630"
  },
  {
    "text": "because you'll see that they kind of relate to each other so first just talking about backups and this is also",
    "start": "223630",
    "end": "229940"
  },
  {
    "text": "important because on the happiness sense slide that I have every day I have two I have a couple points about backups one",
    "start": "229940",
    "end": "234950"
  },
  {
    "text": "of the things that we're always telling people is like we're please if this is a production system just says do the",
    "start": "234950",
    "end": "240470"
  },
  {
    "text": "maximum backup window which is 35 days in RDS that's the same window whether",
    "start": "240470",
    "end": "245750"
  },
  {
    "text": "you're on Aurora or an RDS backups work differently between the two on RDS it's",
    "start": "245750",
    "end": "252050"
  },
  {
    "text": "basically using EBS snapshots right and then you see you're sitting on top of he",
    "start": "252050",
    "end": "258890"
  },
  {
    "text": "BS volumes and then the wall logs themselves are being archived off separately and they're being there",
    "start": "258890",
    "end": "264040"
  },
  {
    "text": "copied off on a continual basis and then recovery involves taking that snapshot",
    "start": "264040",
    "end": "269290"
  },
  {
    "text": "image and replaying the logs back on top of it yeah and and the reason well",
    "start": "269290",
    "end": "275410"
  },
  {
    "text": "tomorrow we'll talk a little bit more about some of the different ways that things can break or things can go wrong",
    "start": "275410",
    "end": "281170"
  },
  {
    "text": "and then what you do about that but it's it's really it's turns out to be really",
    "start": "281170",
    "end": "286750"
  },
  {
    "text": "useful just to have 30 a whole 35 days worth of backups I mean not the least of",
    "start": "286750",
    "end": "292810"
  },
  {
    "text": "which is that sometimes you don't even discover that things have gone wrong until a little while later right I mean",
    "start": "292810",
    "end": "298330"
  },
  {
    "text": "if somebody had gone in and like changed some data and one of your tables for example you might not catch it you might",
    "start": "298330",
    "end": "303700"
  },
  {
    "text": "not realize it until like a week or so afterwards there's a lot of different reasons that that's important from an",
    "start": "303700",
    "end": "310420"
  },
  {
    "start": "310000",
    "end": "500000"
  },
  {
    "text": "availability perspective we haven't talked about this a ton yet but on on",
    "start": "310420",
    "end": "316270"
  },
  {
    "text": "the happiness hints slide two like you'll see on there to use multi a-z this is going to be especially relevant",
    "start": "316270",
    "end": "322480"
  },
  {
    "text": "tomorrow I I do need to just quickly introduce multi AZ and RDS for people that aren't familiar with it I mean you",
    "start": "322480",
    "end": "329080"
  },
  {
    "text": "guys already are but there's there's gonna be a very broad audience for the",
    "start": "329080",
    "end": "334090"
  },
  {
    "text": "class and I kind of want to make sure that everybody gets introduced to it so in RDS Postgres actually in in RDS with",
    "start": "334090",
    "end": "342160"
  },
  {
    "text": "all of the the non aurora engines it's except for sequel server that one",
    "start": "342160",
    "end": "348970"
  },
  {
    "text": "uses always a different technology but all the rest of the engines right we're talking storage level replication so",
    "start": "348970",
    "end": "355780"
  },
  {
    "text": "it's it's it's underneath the date it's underneath the way that Maas works specifically is that the database talks",
    "start": "355780",
    "end": "362170"
  },
  {
    "text": "to the storage and then at the storage tier the storage manages rep maintaining",
    "start": "362170",
    "end": "367450"
  },
  {
    "text": "a second copy in a different easy and then what happens is your application is pointed at the primary application and",
    "start": "367450",
    "end": "374080"
  },
  {
    "text": "both of your availability zones are pointed at the primary database and your database is physically maintaining a",
    "start": "374080",
    "end": "382450"
  },
  {
    "text": "copy of that and then if something goes wrong and your primary database has a problem then what happens is we stop",
    "start": "382450",
    "end": "388180"
  },
  {
    "text": "that replication we switch the primary over to the second availability zone that's managed by the control plan",
    "start": "388180",
    "end": "394570"
  },
  {
    "text": "software there's DNS server and then what happens is the the database signals the DNS to switch",
    "start": "394570",
    "end": "402569"
  },
  {
    "text": "what it's pointing to once the DNS has changed and your clients pickup that the",
    "start": "402569",
    "end": "408249"
  },
  {
    "text": "clients reconnect to a different IP address and they're able to reconnect to the parameter and this all works this",
    "start": "408249",
    "end": "414369"
  },
  {
    "text": "all works we've been doing this for a long time it works well this is this is",
    "start": "414369",
    "end": "419739"
  },
  {
    "text": "multi AZ on RDS now or worse of course going to work different but it's important to know what you're comparing",
    "start": "419739",
    "end": "425379"
  },
  {
    "text": "against I think just to sort of set the stage for at that point in time were of",
    "start": "425379",
    "end": "432999"
  },
  {
    "text": "course free to replace the secondary as well so we can this the secondary",
    "start": "432999",
    "end": "438279"
  },
  {
    "text": "database can be replaced and then synchronization is this is all done automatically under the covers right by",
    "start": "438279",
    "end": "443860"
  },
  {
    "text": "RDS so that's that's mass Aurora's gonna be different there are some things",
    "start": "443860",
    "end": "450339"
  },
  {
    "text": "though again they're going to be common it is a a well established best practice",
    "start": "450339",
    "end": "457179"
  },
  {
    "text": "well architected principle in AWS to be multi a-z right when you architect applications",
    "start": "457179",
    "end": "464409"
  },
  {
    "text": "this is just something that you'll hear us saying all the time when you architect applications to always architect over AZ's and you want to",
    "start": "464409",
    "end": "473439"
  },
  {
    "text": "architects so that for your production systems if there if there were some sort of an issue that one AZ was unavailable",
    "start": "473439",
    "end": "480159"
  },
  {
    "text": "your application would continue to operate with the other AZ's that's that's a just an important principle in",
    "start": "480159",
    "end": "485619"
  },
  {
    "text": "general right one more thing to talk about is the idea of rear up because this is especially important and the",
    "start": "485619",
    "end": "494019"
  },
  {
    "text": "reason this is important well I'll come",
    "start": "494019",
    "end": "499269"
  },
  {
    "text": "around to that starting with RDS so they read replicas so this is showing a mass cluster down",
    "start": "499269",
    "end": "507189"
  },
  {
    "start": "500000",
    "end": "673000"
  },
  {
    "text": "here in the bottom right we've got our primary or secondary these are across",
    "start": "507189",
    "end": "512409"
  },
  {
    "text": "two different a Z's and what a read replica is is that we then maintain another copy that is somewhere else",
    "start": "512409",
    "end": "519490"
  },
  {
    "text": "a synchronously whereas so what synchronously means I'm you guys know",
    "start": "519490",
    "end": "525189"
  },
  {
    "text": "terminology right synchronously means that like when I have a transaction when I say commit that commit operation is not",
    "start": "525189",
    "end": "532779"
  },
  {
    "text": "acknowledged back to your application until it has been committed in both AZ's like the data is on the disk in both a",
    "start": "532779",
    "end": "539890"
  },
  {
    "text": "ZZZ and then you and then your application receives an acknowledgement that your data is durable that it's safe",
    "start": "539890",
    "end": "545640"
  },
  {
    "text": "that's that's what synchronous means asynchronous means that the that your",
    "start": "545640",
    "end": "551920"
  },
  {
    "text": "your message will go back to your application right away and then in the background it'll continue to be",
    "start": "551920",
    "end": "557890"
  },
  {
    "text": "synchronized across but it's you're not going to be blocked waiting for it that's asynchronous there's a couple",
    "start": "557890",
    "end": "567490"
  },
  {
    "text": "different use ko and the one other thing that I think is important to point out about this that people miss a lot of times is that in the Postgres I'll just",
    "start": "567490",
    "end": "577149"
  },
  {
    "text": "start with Postgres is that's what we're here to talk about an RDS Postgres these read are these are physical replicas",
    "start": "577149",
    "end": "583510"
  },
  {
    "text": "meaning that if you were to open up the data files on a read replicas and Postgres the data file bit 4-bit would",
    "start": "583510",
    "end": "591100"
  },
  {
    "text": "look pretty much the same as your primary database that is not true of my",
    "start": "591100",
    "end": "596440"
  },
  {
    "text": "of RDS my sequel right so it depends so that differs from one engine to another",
    "start": "596440",
    "end": "602110"
  },
  {
    "text": "inside of RDS RDS my sequel their logical meaning that like if you open the file the bits would not be the same",
    "start": "602110",
    "end": "608770"
  },
  {
    "text": "now if you select from the table you'll see the same data but if you open the file it's not the same bits that said",
    "start": "608770",
    "end": "616260"
  },
  {
    "text": "both in the case of maths and in the case of replicas it's also the other kind of architectural thing that's",
    "start": "616260",
    "end": "622570"
  },
  {
    "text": "important to understand is that it's it each of these has their own copy of the data so we're maintaining a full copy of",
    "start": "622570",
    "end": "631149"
  },
  {
    "text": "the data we have to the primary has to send messages to the replicas that can tell you then the replica has to do I",
    "start": "631149",
    "end": "636730"
  },
  {
    "text": "owe after receiving those messages you're going to see that that's a really key difference for Aurora the there's kind",
    "start": "636730",
    "end": "644380"
  },
  {
    "text": "of like two or three use cases I always kind of skip over these because I pulled these slides from somewhere else and",
    "start": "644380",
    "end": "650640"
  },
  {
    "text": "this was kind of talking more about why you would use read replicas the availability case where you can maintain",
    "start": "650640",
    "end": "658000"
  },
  {
    "text": "it like that upgrades are another reason I'm your read replicas stay up all the upgrades",
    "start": "658000",
    "end": "663170"
  },
  {
    "text": "opening modifications on replicas so you see that like one of the use cases that people have for replicas is just",
    "start": "663170",
    "end": "670760"
  },
  {
    "text": "increased availability the second one is latency you can do replicas across regions with Postgres as well it's still",
    "start": "670760",
    "end": "677990"
  },
  {
    "start": "673000",
    "end": "790000"
  },
  {
    "text": "one click there is a one more thing I want to mention real quickly about this",
    "start": "677990",
    "end": "684579"
  },
  {
    "text": "do you remember on the very first day we talked about like hot updates we talked",
    "start": "684579",
    "end": "690860"
  },
  {
    "text": "about kind of the overview on architecture and one of the really important things that we talked about was like how you have those old ro",
    "start": "690860",
    "end": "697070"
  },
  {
    "text": "versions that have to get cleaned up right and that this is what vacuum does that vacuum is going to come in but",
    "start": "697070",
    "end": "703639"
  },
  {
    "text": "remember one of the other things we talked about was your longest-running transaction and how that you know Postgres is always keeping track of",
    "start": "703639",
    "end": "710389"
  },
  {
    "text": "what's just the oldest connection was the oldest transaction in the system because anything that's outside of that",
    "start": "710389",
    "end": "717740"
  },
  {
    "text": "range that's older than that is it's it's eligible to be cleaned up it's safe so if I have a version of the row from",
    "start": "717740",
    "end": "724940"
  },
  {
    "text": "yesterday but the oldest transaction started an hour ago well that data from yesterday that was",
    "start": "724940",
    "end": "731449"
  },
  {
    "text": "deleted yesterday I don't need at this point it's safe to or truly delete it but if a date if there's some data that",
    "start": "731449",
    "end": "739100"
  },
  {
    "text": "was deleted 15 minutes ago and there's a report that started running an hour ago and it hasn't finished yet I need to",
    "start": "739100",
    "end": "745430"
  },
  {
    "text": "keep that even though that data's been deleted I have to keep it around until the reports done right because the",
    "start": "745430",
    "end": "750680"
  },
  {
    "text": "report needs to see a consistent picture of the database so that's really",
    "start": "750680",
    "end": "755839"
  },
  {
    "text": "important and what happens if that",
    "start": "755839",
    "end": "760850"
  },
  {
    "text": "report that I'm talking about that I kicked off an hour ago what if it's running on a read replica",
    "start": "760850",
    "end": "767290"
  },
  {
    "text": "this is actually a really important question because if it's running on a read replica then how is vacuum supposed",
    "start": "767290",
    "end": "775220"
  },
  {
    "text": "to know that it can't delete that record well the answer to that question actually is completely different between",
    "start": "775220",
    "end": "783800"
  },
  {
    "text": "cross region and non cross region did you know that let me just back a slide",
    "start": "783800",
    "end": "790010"
  },
  {
    "text": "and this is it's kind of it actually may not always be this way I'm pretty sure",
    "start": "790010",
    "end": "796160"
  },
  {
    "text": "it I have to I should probably double-check the defaults is this does this sounding right to you yeah okay yep",
    "start": "796160",
    "end": "802330"
  },
  {
    "text": "it is different physical logical that was what I was thinking because we built physical first no no it's not physical",
    "start": "802330",
    "end": "808600"
  },
  {
    "text": "logical cross region is so physical the slots yes yes that's exactly what it is",
    "start": "808600",
    "end": "814300"
  },
  {
    "text": "yep the reason was that we built the it was actually as literally the order that would build things when we built the",
    "start": "814300",
    "end": "821140"
  },
  {
    "text": "cross region stuff later and when we built the cross region stuff at by that point in time Postgres had a really",
    "start": "821140",
    "end": "827560"
  },
  {
    "text": "fantastic new capability that put the post crest community actually enhanced the database so that a master database",
    "start": "827560",
    "end": "835360"
  },
  {
    "text": "could actually keep track of the oldest transaction on a replica and that way vacuum could actually know that didn't",
    "start": "835360",
    "end": "842290"
  },
  {
    "text": "used to exist back when we when we've built the in region replication feature",
    "start": "842290",
    "end": "847650"
  },
  {
    "text": "it was before they had done that and we haven't we still support those old",
    "start": "847650",
    "end": "853360"
  },
  {
    "text": "versions of Postgres for in region replication and at the end so the way",
    "start": "853360",
    "end": "859390"
  },
  {
    "text": "that it works is within now this is configurable you can you can configure all of this so you could configure it",
    "start": "859390",
    "end": "866050"
  },
  {
    "text": "yourself in region and a parameter group but the default settings are that if you're in region you could have a report",
    "start": "866050",
    "end": "872200"
  },
  {
    "text": "running and what will happen is your reports running and vacuum will clean it",
    "start": "872200",
    "end": "878290"
  },
  {
    "text": "up and then what's going to happen is the vacuum will send those messages to the read replicas saying okay now you",
    "start": "878290",
    "end": "883390"
  },
  {
    "text": "clean up your records the read replicas at least it is smart enough to know when it tries to clean it it's like oh wait a",
    "start": "883390",
    "end": "889840"
  },
  {
    "text": "minute I've got an open transaction so what will actually happen in that case is that your read replicas will just",
    "start": "889840",
    "end": "896680"
  },
  {
    "text": "pause it'll stop and it's just going to wait for the report to finish but what",
    "start": "896680",
    "end": "901750"
  },
  {
    "text": "that means is that it can't do anything it can't replay anymore data from the",
    "start": "901750",
    "end": "907150"
  },
  {
    "text": "master so your replica is slowly going to fall behind until the report finishes",
    "start": "907150",
    "end": "913510"
  },
  {
    "text": "when therefore finishes then it'll catch up and this is something we see all the time in the Postgres fleet by the way we",
    "start": "913510",
    "end": "921090"
  },
  {
    "text": "have alarming because we want to watch",
    "start": "921090",
    "end": "926500"
  },
  {
    "text": "for replication getting broken and we need to know if something wrong with our our control planner",
    "start": "926500",
    "end": "931690"
  },
  {
    "text": "orchestration software and then also there are cloud watch metrics on this so it's fairly easy to observe and yeah we",
    "start": "931690",
    "end": "939760"
  },
  {
    "text": "see we see replicas that lag because of that so when we built cross region on the other hand see this is in US East",
    "start": "939760",
    "end": "948790"
  },
  {
    "start": "945000",
    "end": "1199000"
  },
  {
    "text": "one and then here in this picture there's one and in West one cross region was able to use replication slots",
    "start": "948790",
    "end": "954480"
  },
  {
    "text": "exactly what you mentioned a moment ago there and what replication slots or",
    "start": "954480",
    "end": "959740"
  },
  {
    "text": "another another thing another name for the the key feature is called hot standby feedback cost and by feedback is",
    "start": "959740",
    "end": "966400"
  },
  {
    "text": "the name of the parameter that you need to change in order for Postgres to use something called replication slots and",
    "start": "966400",
    "end": "972540"
  },
  {
    "text": "hast and my feedback me is that this is called a hot standby database it's a it's hot because it's open for queries",
    "start": "972540",
    "end": "980200"
  },
  {
    "text": "that's what makes it a hot standby and then it it will send feedback to the",
    "start": "980200",
    "end": "985630"
  },
  {
    "text": "master which tells vacuum oh hey there's a transaction running so vacuum then is smart enough to like just keep going and",
    "start": "985630",
    "end": "992830"
  },
  {
    "text": "you but just leave those rows out there and then the replicas will never fall behind this will also become important",
    "start": "992830",
    "end": "1000300"
  },
  {
    "text": "as we start talking about our worth so cross region they're talking about",
    "start": "1000300",
    "end": "1006060"
  },
  {
    "text": "reasons you would do that latency going down doing dr's and dr moves things like",
    "start": "1006060",
    "end": "1012810"
  },
  {
    "text": "that so kind of illustrating somebody moving across you can promote replicas",
    "start": "1012810",
    "end": "1018690"
  },
  {
    "text": "to become new primaries which is kind of cool one last thing that I'm going to take",
    "start": "1018690",
    "end": "1025410"
  },
  {
    "text": "from the RTOS Postgres deck before we dive into or because this works the same on Aurora but it's not in the Aurora",
    "start": "1025410",
    "end": "1031860"
  },
  {
    "text": "deck and it's not talked about there and it's really important is upgrades so",
    "start": "1031860",
    "end": "1037490"
  },
  {
    "text": "I'll talk a little bit more about this at the toward the end of this particular",
    "start": "1037490",
    "end": "1043949"
  },
  {
    "text": "session but so Postgres today I might",
    "start": "1043949",
    "end": "1049500"
  },
  {
    "text": "have mentioned this yesterday or the day before too but Postgres has the post the",
    "start": "1049500",
    "end": "1054750"
  },
  {
    "text": "way the community organizes their releases is that they have with what they call major versions and then when",
    "start": "1054750",
    "end": "1060270"
  },
  {
    "text": "they call minor versions the minor I actually prefer to call them quarterly",
    "start": "1060270",
    "end": "1065610"
  },
  {
    "text": "updates because that's what they are so they don't put new features they're not",
    "start": "1065610",
    "end": "1071160"
  },
  {
    "text": "going in building that what they're doing is just they have a schedule and four times a year on a certain date they",
    "start": "1071160",
    "end": "1078600"
  },
  {
    "text": "just take the critical bug fixes like stuff that had to be backported and then the security vulnerabilities so any any",
    "start": "1078600",
    "end": "1085590"
  },
  {
    "text": "security issues that happened are bundled together and then those are they ship basically an update to the old",
    "start": "1085590",
    "end": "1092220"
  },
  {
    "text": "major and if you read the language they're very clear that like they are only putting the stuff that they're",
    "start": "1092220",
    "end": "1098160"
  },
  {
    "text": "putting in those those maintenance updates are things where they believe it would be more risky for you to not",
    "start": "1098160",
    "end": "1104160"
  },
  {
    "text": "upgrade and that it's less risky for you to just get that patched code into your system so the the consistent",
    "start": "1104160",
    "end": "1111150"
  },
  {
    "text": "recommendation with Postgres is to is to say very much on top of installing those",
    "start": "1111150",
    "end": "1117090"
  },
  {
    "text": "quarterly updates it's very similar like in the Oracle world to SPU's or PS use that kind of it that that's how I",
    "start": "1117090",
    "end": "1123770"
  },
  {
    "text": "immensely think of it the other important thing to understand about majors and minors in Postgres lingo is",
    "start": "1123770",
    "end": "1131190"
  },
  {
    "text": "that so a minor version upgrade never there's no upgrade script there's",
    "start": "1131190",
    "end": "1138810"
  },
  {
    "text": "an you never run a script so it never involves changes to the data it's it is",
    "start": "1138810",
    "end": "1145260"
  },
  {
    "text": "purely a binary swap out and that's it so what that means first of all is that",
    "start": "1145260",
    "end": "1151200"
  },
  {
    "text": "minor versions are are not going to take a long time right a minor upgrade is always going to it's just the time to",
    "start": "1151200",
    "end": "1157170"
  },
  {
    "text": "restart the database that's basically it this slide isn't even quite right",
    "start": "1157170",
    "end": "1165720"
  },
  {
    "text": "because we don't shut down the instance and start the instance when we do a minor upgrade I mean I have to tell them",
    "start": "1165720",
    "end": "1174660"
  },
  {
    "text": "about that in RDS it's I'm ándale with Aurora both a minor upgrade is is",
    "start": "1174660",
    "end": "1181080"
  },
  {
    "text": "literally will provision the software out ahead of time and then it's just like shut down the old start up the new",
    "start": "1181080",
    "end": "1187680"
  },
  {
    "text": "and that's all the time that's the only actual outage that you have to deal with and then once it's back up we can clean",
    "start": "1187680",
    "end": "1193920"
  },
  {
    "text": "out the old software and free that space backup on the binary volume major",
    "start": "1193920",
    "end": "1199560"
  },
  {
    "start": "1199000",
    "end": "1343000"
  },
  {
    "text": "version upgrades are very different a major version upgrade always involves",
    "start": "1199560",
    "end": "1204570"
  },
  {
    "text": "running at utilit well and RDS we run a utility called PG upgrade the other way you could do a major upgrade is with",
    "start": "1204570",
    "end": "1210390"
  },
  {
    "text": "like a dump and load or something like that which you could also do an RDS you could provision a new instance and replicate it or dump and load when you",
    "start": "1210390",
    "end": "1218640"
  },
  {
    "text": "click the button that says upgrade or actually what you're doing is you're going to a drop-down and choosing a",
    "start": "1218640",
    "end": "1223740"
  },
  {
    "text": "version and saying save you do a modify what RDS Postgres is doing under the",
    "start": "1223740",
    "end": "1228900"
  },
  {
    "text": "covers is using a utility called PG upgrade PG upgrade does not have to scan",
    "start": "1228900",
    "end": "1235890"
  },
  {
    "text": "your data files and to date so far there has never been a version of Postgres",
    "start": "1235890",
    "end": "1242970"
  },
  {
    "text": "that we've shipped on RDS where upgrade had to let go in and change the block format of the data that would be very",
    "start": "1242970",
    "end": "1249360"
  },
  {
    "text": "very expensive however what it does do the way that PG upgrade works is that",
    "start": "1249360",
    "end": "1255450"
  },
  {
    "text": "the data stays in place the data doesn't he abused using actually hard links to to just create new file entries that",
    "start": "1255450",
    "end": "1262620"
  },
  {
    "text": "point to the same files but the metadata there's all the data dictionary stuff so",
    "start": "1262620",
    "end": "1268860"
  },
  {
    "text": "that all those catalog stuff like the PG class view we looked at in the hands-on lab yesterday what Postgres what PG",
    "start": "1268860",
    "end": "1275760"
  },
  {
    "text": "upgrade actually does is it basically does a dump and load of the metadata",
    "start": "1275760",
    "end": "1281070"
  },
  {
    "text": "it's similar to like what transportable tablespaces would do in Oracle what that",
    "start": "1281070",
    "end": "1287040"
  },
  {
    "text": "means and why that's important is that the time to run a PG upgrade is very",
    "start": "1287040",
    "end": "1292260"
  },
  {
    "text": "much impacted by the number of objects in your schema in your database so the",
    "start": "1292260",
    "end": "1298620"
  },
  {
    "text": "place where we have seen customers run into issues is like customers that have hundreds of thousands or even like",
    "start": "1298620",
    "end": "1304980"
  },
  {
    "text": "millions of objects in their database that can start to take a while so a major version upgrade I mean you should",
    "start": "1304980",
    "end": "1313680"
  },
  {
    "text": "test your miners too but you need to probably have a greater level of rigor",
    "start": "1313680",
    "end": "1319170"
  },
  {
    "text": "in the way that you test a major version upgrade and you're not just touching testing new functionality and features",
    "start": "1319170",
    "end": "1325040"
  },
  {
    "text": "you're also testing just like the timing of it right so you want to you know make a",
    "start": "1325040",
    "end": "1331060"
  },
  {
    "text": "copy of your database make sure that copy is completely initialized or hydrated and then you want to run the",
    "start": "1331060",
    "end": "1339220"
  },
  {
    "text": "upgrade on that copy and see how long it takes it's an important thing to do I mentioned also that you can use",
    "start": "1339220",
    "end": "1345340"
  },
  {
    "start": "1343000",
    "end": "1361000"
  },
  {
    "text": "replication as well which is another strategy for a way to do upgrades this",
    "start": "1345340",
    "end": "1354430"
  },
  {
    "text": "is a using DMS and that's it all right",
    "start": "1354430",
    "end": "1362940"
  },
  {
    "start": "1361000",
    "end": "1372000"
  },
  {
    "text": "so at this point I'm gonna sort of pause and this is where I'm gonna sort of stop",
    "start": "1362940",
    "end": "1368350"
  },
  {
    "text": "and I'm gonna put the video up of grant now while the video is playing are you",
    "start": "1368350",
    "end": "1373360"
  },
  {
    "start": "1372000",
    "end": "1411000"
  },
  {
    "text": "in the chime room by the way okay good I was going to say we're you we've been I want to use that chime room as the great",
    "start": "1373360",
    "end": "1381190"
  },
  {
    "text": "thing about putting questions in there is that other people see it as well and I mean there's been there's been there",
    "start": "1381190",
    "end": "1387670"
  },
  {
    "text": "has been like sometimes other people just been able to answer the question but the the bigger thing that I'm hoping for is it just sort of stimulates",
    "start": "1387670",
    "end": "1393460"
  },
  {
    "text": "thinking in that you know like you might ask a question that makes somebody else like oh you know I saw something similar",
    "start": "1393460",
    "end": "1399190"
  },
  {
    "text": "to that just last week on my database and I have a question about this so that I see a lot of value to getting the",
    "start": "1399190",
    "end": "1405310"
  },
  {
    "text": "questions punched out if you're able to it's about a 50 minute video good",
    "start": "1405310",
    "end": "1410680"
  },
  {
    "text": "evening everyone I think it's evening it's always hard to tell in Vegas put in a nice dark room no",
    "start": "1410680",
    "end": "1416740"
  },
  {
    "start": "1411000",
    "end": "1592000"
  },
  {
    "text": "windows my name is Graham McAllister I'm a senior principal engineer work for AWS as you might have guessed from the logo",
    "start": "1416740",
    "end": "1422980"
  },
  {
    "text": "I work on RDS and most of the time I spend with the Postgres engines today",
    "start": "1422980",
    "end": "1428050"
  },
  {
    "text": "what we're going to do is we're going to dive into aurora Postgres we're gonna look at the changes we've made why we",
    "start": "1428050",
    "end": "1434200"
  },
  {
    "text": "made them and why you might care about those we'll also talk about the things we've delivered in the last year four or",
    "start": "1434200",
    "end": "1440800"
  },
  {
    "text": "Postgres and how you migrate to it so one of the first things I want to talk about was RDS in general there's a lot",
    "start": "1440800",
    "end": "1448120"
  },
  {
    "text": "of confusion that Aurora is not part of RDS and it actually is it just has separate branding marketing folks wanted",
    "start": "1448120",
    "end": "1454240"
  },
  {
    "text": "to brand it separately but it's run under the same management platform that all seven of our engines are - Aurora",
    "start": "1454240",
    "end": "1460330"
  },
  {
    "text": "engines are to commercial engines and are three other open-source engines so all these capabilities that you get from",
    "start": "1460330",
    "end": "1466179"
  },
  {
    "text": "a managed RDS system are true with Aurora as well but because it's our engine we've made some other changes",
    "start": "1466179",
    "end": "1471549"
  },
  {
    "text": "right so from an RDS perspective we actually have two flavors of Postgres we have RDS",
    "start": "1471549",
    "end": "1478690"
  },
  {
    "text": "Postgres which is community Postgres with just a few small changes for security and it runs on ec2 runs on an",
    "start": "1478690",
    "end": "1485470"
  },
  {
    "text": "EBS volume right so this is pretty much standard the same way you would do it if you were just running an ec2 on the",
    "start": "1485470",
    "end": "1491049"
  },
  {
    "text": "other side what we have is Aurora Postgres and this is quite a bit different because of the storage so we've Aurora storage and so this is",
    "start": "1491049",
    "end": "1497139"
  },
  {
    "text": "database aware storage so that's fundamentally different than a block store and I'll get into what those",
    "start": "1497139",
    "end": "1503950"
  },
  {
    "text": "changes mean for you running your application but the cool thing from your perspective if you have a client you",
    "start": "1503950",
    "end": "1509200"
  },
  {
    "text": "want to connect to either one of these it's gonna work exactly the same they talk the same protocol you've whether",
    "start": "1509200",
    "end": "1514269"
  },
  {
    "text": "you're connecting with P sequel ODBC JDBC whatever it's gonna look exactly the same same objects same commands and",
    "start": "1514269",
    "end": "1520590"
  },
  {
    "text": "just to run through like in more detail you can see that we support Postgres 9 6 and 10 for both of these engines we have",
    "start": "1520590",
    "end": "1528789"
  },
  {
    "text": "the same extensions on both of them we have the same backup recovery and P ITR capabilities we have a high availability",
    "start": "1528789",
    "end": "1535269"
  },
  {
    "text": "and durability story for both these engines we they're both secure by default and actually this is one of the",
    "start": "1535269",
    "end": "1540820"
  },
  {
    "text": "cool new features that we've just released which is our I am or Identity and Access Management ability to use",
    "start": "1540820",
    "end": "1546250"
  },
  {
    "text": "those credentials to log into your database so you don't have to have passwords anymore so that's a really nice feature on both of these engines",
    "start": "1546250",
    "end": "1551980"
  },
  {
    "text": "they both support read replicas they both support cross reads and snapshots and scale compute and online scale",
    "start": "1551980",
    "end": "1558429"
  },
  {
    "text": "storage now the storage on the RDS one is up to 32 terabytes 64 terabytes on",
    "start": "1558429",
    "end": "1564279"
  },
  {
    "text": "Aurora there's two features that we're still working on to get to parity one of them is cross region replication and the",
    "start": "1564279",
    "end": "1570130"
  },
  {
    "text": "other is outbound logical and I'll talk more about those in presentation I want to highlight that right now the max",
    "start": "1570130",
    "end": "1576250"
  },
  {
    "text": "version that we support is version 10 for both these engines but for RDS Postgres we have a preview region where",
    "start": "1576250",
    "end": "1582340"
  },
  {
    "text": "we have version 11 and 11 0 in it and we're rapidly working on getting 11 for",
    "start": "1582340",
    "end": "1588130"
  },
  {
    "text": "Aurora as well so that's coming so let's start with one of the",
    "start": "1588130",
    "end": "1593779"
  },
  {
    "start": "1592000",
    "end": "1697000"
  },
  {
    "text": "fundamental differences this is log based storage and so because of that there's a lot of fundamentals that",
    "start": "1593779",
    "end": "1599840"
  },
  {
    "text": "change with how it all works so the first one is that we have no log buffer and to explain that I'm going to walk",
    "start": "1599840",
    "end": "1605719"
  },
  {
    "text": "through what happens on Postgres and or or Postgres so the queued work there in the read those eight blocks you can",
    "start": "1605719",
    "end": "1612049"
  },
  {
    "text": "think of them as eight commits for example that have happened on different sessions so they're already everybody hits commit at once modern databases",
    "start": "1612049",
    "end": "1618320"
  },
  {
    "text": "have this really nice feature group commit so they can all go into the log buffer at the same time but one of the",
    "start": "1618320",
    "end": "1624109"
  },
  {
    "text": "problems with the log buffer is once it's getting ready to flush nothing else can go into it right so if more acute",
    "start": "1624109",
    "end": "1630469"
  },
  {
    "text": "work comes in it's got to wait until that log buffer gets flushed down to storage and acknowledged right and then",
    "start": "1630469",
    "end": "1636379"
  },
  {
    "text": "the queued work can go so you can see how this is a single point of bottlenecking right now on Aurora it's quite different",
    "start": "1636379",
    "end": "1642979"
  },
  {
    "text": "when the transactions come in they just flow down to the storage as they're happening right and so it's an ordered",
    "start": "1642979",
    "end": "1649879"
  },
  {
    "text": "system and you want it to be durable so we actually have to keep track of these things so we have what I like to call",
    "start": "1649879",
    "end": "1655940"
  },
  {
    "text": "durability tracking so we use a 406 quorum in Aurora so means we need four acknowledgments from our storage system",
    "start": "1655940",
    "end": "1662359"
  },
  {
    "text": "to say we're good right so we keep track of these and I'm illustrating that we're you know after a tiny little bit of time",
    "start": "1662359",
    "end": "1669529"
  },
  {
    "text": "we've got a couple of them in two places some of them in zero some of them one and then finally we get a two four right",
    "start": "1669529",
    "end": "1675559"
  },
  {
    "text": "so then you would acknowledge the commit back to the client but you'll notice that C is also at four well we're good",
    "start": "1675559",
    "end": "1681259"
  },
  {
    "text": "right we should be able to mark that one durable but this is an ordered database right and because B happened before C we",
    "start": "1681259",
    "end": "1687139"
  },
  {
    "text": "need it to get to for durability as well before we can actually mark C as durable so you know and you can see the same",
    "start": "1687139",
    "end": "1693379"
  },
  {
    "text": "thing is happening with either where we have to wait for D to get committed so the other thing with aurora is we write",
    "start": "1693379",
    "end": "1700129"
  },
  {
    "start": "1697000",
    "end": "1829000"
  },
  {
    "text": "a lot less let's walk through the differences so on Postgres if you have a tuple you know just a row in your heat",
    "start": "1700129",
    "end": "1707779"
  },
  {
    "text": "block that's what I'm showing that block in memory and you go do an update well an update in Postgres is essentially a",
    "start": "1707779",
    "end": "1713899"
  },
  {
    "text": "delete and insert right so you end up touching both of those tuples and those are gonna get logged to the wall right",
    "start": "1713899",
    "end": "1719869"
  },
  {
    "text": "so this is for crash durability but you'll notice something else showed up there right a full block why did I get a",
    "start": "1719869",
    "end": "1725779"
  },
  {
    "text": "full copy of the block in log well this is for another form of crash recovery and I'll talk about why",
    "start": "1725779",
    "end": "1732950"
  },
  {
    "text": "we do that now we only do that the first time you touch the block after a checkpoint so if I go do another thing",
    "start": "1732950",
    "end": "1739220"
  },
  {
    "text": "like update the tuple again or insert a new row that's just gonna get just the",
    "start": "1739220",
    "end": "1744739"
  },
  {
    "text": "log vector is gonna go into the storage right so this is all normal Postgres at",
    "start": "1744739",
    "end": "1750110"
  },
  {
    "text": "some point you want a checkpoint right you want to make that block durable on disk right so you don't need the recovery log anymore",
    "start": "1750110",
    "end": "1756169"
  },
  {
    "text": "and the wall has to be archived and that archive has to be copied s3 so it's backed up and then we take snapshots of",
    "start": "1756169",
    "end": "1762109"
  },
  {
    "text": "the data file right but when you do a checkpoint it's actually not just a single write write in Postgres the",
    "start": "1762109",
    "end": "1768019"
  },
  {
    "text": "default block size is a K but for example Linux which is what we run on is 4k iOS so if you're in the middle of",
    "start": "1768019",
    "end": "1774169"
  },
  {
    "text": "doing that checkpoint and guess what the system crashes you might have only got half of that right to disk guess what",
    "start": "1774169",
    "end": "1779989"
  },
  {
    "text": "would happen some point later you'd find out you have a crop block right so Postgres handles this by taking that",
    "start": "1779989",
    "end": "1785029"
  },
  {
    "text": "full block and during crash recovery using it to repair this split block right this works great it's been used",
    "start": "1785029",
    "end": "1791960"
  },
  {
    "text": "for a long time but it involves a lot of writing on the Aurora side it's quite different we have no checkpointing no",
    "start": "1791960",
    "end": "1798590"
  },
  {
    "text": "full-page writes so when we do the update we get the same thing happening the two tuples changed we eject those",
    "start": "1798590",
    "end": "1805909"
  },
  {
    "text": "log vectors to storage and that's it right if we do another one same thing so",
    "start": "1805909",
    "end": "1810950"
  },
  {
    "text": "there's no full blocks there's no check pointing there's no writing of data blocks right we only write log vectors so we back this up continuously from",
    "start": "1810950",
    "end": "1819230"
  },
  {
    "text": "Aurora storage to s3 so that's how we get you point in time durability for",
    "start": "1819230",
    "end": "1824330"
  },
  {
    "text": "recovery and again no checkpoints no full page rights so you're saying well",
    "start": "1824330",
    "end": "1830840"
  },
  {
    "start": "1829000",
    "end": "1920000"
  },
  {
    "text": "how does this all magically happen well we have this really intelligent storage layer right and this is comprised of a",
    "start": "1830840",
    "end": "1835999"
  },
  {
    "text": "lot of different storage servers in the backend and I'm just illustrating one of them here so if you have a read/write",
    "start": "1835999",
    "end": "1841190"
  },
  {
    "text": "node and it doesn't update that log vector is gonna flow into the incoming queue and this is an in-memory queue",
    "start": "1841190",
    "end": "1846710"
  },
  {
    "text": "once it's there and then gets processed into the update queue which is basically the durable form on disk once that's",
    "start": "1846710",
    "end": "1853669"
  },
  {
    "text": "done we can actually acknowledge back to the client you know one of the one of the nodes is acknowledged right so the",
    "start": "1853669",
    "end": "1860539"
  },
  {
    "text": "interesting thing here this is the only synchronous thing that happens all the other things I'm going to show you our background pieces right",
    "start": "1860539",
    "end": "1866010"
  },
  {
    "text": "so at this point that vector will go into the hot log which can be used for a",
    "start": "1866010",
    "end": "1872010"
  },
  {
    "text": "peer-to-peer gossips and we also do coalescing of the block right so we read",
    "start": "1872010",
    "end": "1877290"
  },
  {
    "text": "blocks so we actually have to apply the log vectors so you can think of this happening on a block by block basis that",
    "start": "1877290",
    "end": "1882630"
  },
  {
    "text": "we're essentially doing recovery continuously right so as I said the",
    "start": "1882630",
    "end": "1887820"
  },
  {
    "text": "peer-to-peer storage we do repair via these logs and then we also push both the log vectors and the blocks out to s3",
    "start": "1887820",
    "end": "1894330"
  },
  {
    "text": "so that you can have a point in time to any point you want within 35 days so again when you read you don't read log",
    "start": "1894330",
    "end": "1901590"
  },
  {
    "text": "vectors you got to read a block right that's how post rest works so if the block has been coalesced then that's",
    "start": "1901590",
    "end": "1907380"
  },
  {
    "text": "what you read if it hasn't then we do an on-the-fly coalesce and coalesce whatever log changes we need to make a",
    "start": "1907380",
    "end": "1913890"
  },
  {
    "text": "block right so you never have a long crash recovery with Aurora because we're doing this continuously to kind of show",
    "start": "1913890",
    "end": "1921179"
  },
  {
    "start": "1920000",
    "end": "2016000"
  },
  {
    "text": "what this looks like in practice I created a little test I do an insert test I built a table with nine columns",
    "start": "1921179",
    "end": "1927000"
  },
  {
    "text": "they're all different kinds some are random some are right-leaning different object types and then I indexed every",
    "start": "1927000",
    "end": "1932490"
  },
  {
    "text": "column now that's not normal right but it is normal to have a lot of indexes on a big table I mean I've had tables I've",
    "start": "1932490",
    "end": "1939390"
  },
  {
    "text": "seen tables that have 75 indexes on two or three hundred columns right so this isn't really unusual so when we go run",
    "start": "1939390",
    "end": "1947040"
  },
  {
    "text": "that insert workload vertical axis is inserts per second and so you know bigger is better right the blue line is",
    "start": "1947040",
    "end": "1954030"
  },
  {
    "text": "sort of regular Postgres right and we see that we get like 25,000 writes per",
    "start": "1954030",
    "end": "1959190"
  },
  {
    "text": "store inserts per second right off the bat it's pretty good right but it drops really quickly and the reason for that",
    "start": "1959190",
    "end": "1964710"
  },
  {
    "text": "is as the database gets larger as you've inserted more data you have more blocks",
    "start": "1964710",
    "end": "1969780"
  },
  {
    "text": "right and your indexes get larger so the chance that you're touching a block between checkpoints gets higher and so",
    "start": "1969780",
    "end": "1976440"
  },
  {
    "text": "that full page rights increase increase increase as your database gets larger so your performance basically slowly goes",
    "start": "1976440",
    "end": "1982410"
  },
  {
    "text": "down so if your DBA you say well I can fix that I can make my checkpoints",
    "start": "1982410",
    "end": "1987600"
  },
  {
    "text": "longer right I'll just increase the max wall segments and so that's what I did in the purple line right and you can see",
    "start": "1987600",
    "end": "1993000"
  },
  {
    "text": "that help for about 20 minutes but then the database got large enough that again we started getting full page rights and we see this degradation of",
    "start": "1993000",
    "end": "1999750"
  },
  {
    "text": "performance right will notice on the yellow line there is that this is Aurora",
    "start": "1999750",
    "end": "2005210"
  },
  {
    "text": "we don't have checkpoints we don't have full page rights so we have very stable performance even as the database grows and grows right so not only do we have",
    "start": "2005210",
    "end": "2012590"
  },
  {
    "text": "stable performance but we have better performance right and this is the same if we do updates I did the same test",
    "start": "2012590",
    "end": "2018380"
  },
  {
    "start": "2016000",
    "end": "2032000"
  },
  {
    "text": "same tables updated to columns and you can see we're getting about three times the performance with Aurora that we were",
    "start": "2018380",
    "end": "2024500"
  },
  {
    "text": "with even tuned Postgres and again this is because we don't have a log buffer we don't that single point of contention we",
    "start": "2024500",
    "end": "2030500"
  },
  {
    "text": "don't full-page writes so the other critical thing about writing more is",
    "start": "2030500",
    "end": "2035539"
  },
  {
    "start": "2032000",
    "end": "2123000"
  },
  {
    "text": "that you don't necessarily want to take a long time to crash recover which is very typical for most databases to",
    "start": "2035539",
    "end": "2041600"
  },
  {
    "text": "illustrate this I have a chart where the vertical axis is recovery time you'd like that to be low and then the horizontal axis is writes per second you",
    "start": "2041600",
    "end": "2048108"
  },
  {
    "text": "want that to be high so you want that to be far down the range so when we start pushing post grass what we see is that",
    "start": "2048109",
    "end": "2055340"
  },
  {
    "text": "as we start we got like three gig of redo generated on the first arrow right we're doing about 18,000 TPS it's not",
    "start": "2055340",
    "end": "2063378"
  },
  {
    "text": "bad but as I add more clients to push the database harder guess what my recovery time goes up by quite a bit to",
    "start": "2063379",
    "end": "2070820"
  },
  {
    "text": "50 seconds and I've only doubled my throughput so if I keep pushing the database what you see up here we're",
    "start": "2070820",
    "end": "2076878"
  },
  {
    "text": "generating 30 gig of redo between checkpoints and my recovery time is taking over two minutes right this is a",
    "start": "2076879",
    "end": "2082850"
  },
  {
    "text": "dramatic increase and so this has always been one of the trade-offs with most relational databases is you had to make you had to say what I like to be able to",
    "start": "2082850",
    "end": "2088850"
  },
  {
    "text": "write really fast or what I like to have low crash recovery so can you guys see that little dot out to the far right",
    "start": "2088850",
    "end": "2095830"
  },
  {
    "text": "it's really hard to see so I circled it for you that's Aurora so reward it does",
    "start": "2095830",
    "end": "2102680"
  },
  {
    "text": "continuous recovery right so we don't actually have to do crash recovery so it takes three seconds for a roar to come back up in this case but you'll also see",
    "start": "2102680",
    "end": "2109700"
  },
  {
    "text": "we're doing dramatically more writes like 3x right compared to a Postgres",
    "start": "2109700",
    "end": "2115250"
  },
  {
    "text": "even at the largest scale so this is one of the nice things with Aurora you don't actually have to make this trade-off of these two different capabilities so",
    "start": "2115250",
    "end": "2123530"
  },
  {
    "start": "2123000",
    "end": "2301000"
  },
  {
    "text": "let's talk more about the base architecture of Aurora Postgres so I'm demonstrating or showing here",
    "start": "2123530",
    "end": "2128990"
  },
  {
    "text": "three availability zones that's very typical for our regions and the blue block is essentially Aurora storage you",
    "start": "2128990",
    "end": "2135080"
  },
  {
    "text": "want to think of it sort of virtually right it's across all the availability zones the little blue ones inside of",
    "start": "2135080",
    "end": "2140660"
  },
  {
    "text": "those are individual storage servers now I'm just showing six in each one but usually there's hundreds or thousands right when you go and provision an",
    "start": "2140660",
    "end": "2147470"
  },
  {
    "text": "application and you say I want a database Aurora Postgres what's gonna happen is we're gonna go take ten gig",
    "start": "2147470",
    "end": "2153140"
  },
  {
    "text": "chunk segments and put them on these storage servers right and that's what I'm illustrating with the six different",
    "start": "2153140",
    "end": "2158540"
  },
  {
    "text": "colors because we get six copies right so you can have you can connect",
    "start": "2158540",
    "end": "2163670"
  },
  {
    "text": "applications from multiple AZ's that's always a good idea for availability when we do writes again we write log records",
    "start": "2163670",
    "end": "2169700"
  },
  {
    "text": "right so they're gonna get written to all six places we only need four of them to get a commit done but you'll see that",
    "start": "2169700",
    "end": "2176000"
  },
  {
    "text": "though all the different colors are involved right when we read we read blocks back and typically we're gonna",
    "start": "2176000",
    "end": "2181369"
  },
  {
    "text": "read from the local AZ because it's gonna be fastest but we actually do that on a periodic basis to see which one's",
    "start": "2181369",
    "end": "2186860"
  },
  {
    "text": "going to be faster so we don't have to do a quorum read or anything you know crazy like that that's gonna take a long time so sometimes you actually have",
    "start": "2186860",
    "end": "2195800"
  },
  {
    "text": "problems with getting quorum right sometimes two of those rights may not",
    "start": "2195800",
    "end": "2200900"
  },
  {
    "text": "show up so what do we do then well we can actually do repair as I said peer-to-peer gossip between the",
    "start": "2200900",
    "end": "2207020"
  },
  {
    "text": "different nodes and they'll actually send the missing log records to the other node right in the case of a",
    "start": "2207020",
    "end": "2212180"
  },
  {
    "text": "failure of a whole node will actually make a copy of that segment onto a",
    "start": "2212180",
    "end": "2217430"
  },
  {
    "text": "different node right we'll also do this for hotspot management so if you're pushing hard will actually move things",
    "start": "2217430",
    "end": "2223160"
  },
  {
    "text": "around so there's enough resources on that node stuff you don't actually have to worry about so the other thing that's",
    "start": "2223160",
    "end": "2229040"
  },
  {
    "text": "really cool about Aurora is that there's read-only nodes and the difference between sort of regular Postgres is when",
    "start": "2229040",
    "end": "2235010"
  },
  {
    "text": "you make a read-only node you have to copy the data but here you don't because the storage is shared right and so what",
    "start": "2235010",
    "end": "2240109"
  },
  {
    "text": "I call clustered storage right so as soon as you fire it up you can read the data out of that storage you don't have",
    "start": "2240109",
    "end": "2246320"
  },
  {
    "text": "to make a copy now you'll notice that little sort of purple line going between the readwrite node and the read-only node we do communicate we do send",
    "start": "2246320",
    "end": "2253609"
  },
  {
    "text": "information from the readwrite node to the read-only node but we only do to invalidate things in cache we don't",
    "start": "2253609",
    "end": "2259280"
  },
  {
    "text": "actually have to send it over so it can be written and you can have more than one read only note in fact you can have up to fifty",
    "start": "2259280",
    "end": "2265430"
  },
  {
    "text": "you can have a lot right and so you can have different applications using different read only notes for different purposes now the big thing about having",
    "start": "2265430",
    "end": "2274609"
  },
  {
    "text": "multiple nodes is that in the case of a failure what's really nice is the good thing is your data is durable no matter what right so you don't actually have to",
    "start": "2274609",
    "end": "2281119"
  },
  {
    "text": "worry about data durability for having extra nodes but if you want a fast failover you want to have a note so what",
    "start": "2281119",
    "end": "2286130"
  },
  {
    "text": "we're gonna do is we're gonna promote one of your read-only nodes to a readwrite node and it's gonna start being able to write so this this happens",
    "start": "2286130",
    "end": "2292099"
  },
  {
    "text": "in typically about 3035 seconds with including the DNS propagation and you can actually connect to all the nodes so",
    "start": "2292099",
    "end": "2298309"
  },
  {
    "text": "you don't actually have to wait for DNS propagation so let's talk a little bit about why we picked 406 quorum so when",
    "start": "2298309",
    "end": "2306530"
  },
  {
    "start": "2301000",
    "end": "2431000"
  },
  {
    "text": "we started RDS backed like almost 10 years ago we we knew that we probably want to do some form of durability but",
    "start": "2306530",
    "end": "2312500"
  },
  {
    "text": "when you first released it it was basically just a single AZ product right so when you would do a commit you're",
    "start": "2312500",
    "end": "2318500"
  },
  {
    "text": "basically gonna write to EBS and get a response back but it's actually a little more complicated than that because EBS",
    "start": "2318500",
    "end": "2323750"
  },
  {
    "text": "behind the scenes actually has two machines right it's mirroring your data so when you're writing you're actually writing to the first machine then you're",
    "start": "2323750",
    "end": "2330680"
  },
  {
    "text": "writing to the saut writing to the second machine getting acknowledgment back and all the way back to your server right and at that point you're good",
    "start": "2330680",
    "end": "2336440"
  },
  {
    "text": "you're committed but guess what this only works if you don't have a problem",
    "start": "2336440",
    "end": "2342140"
  },
  {
    "text": "in that AZ right so this is where you want to have a multi easy solution that actually replicates the data",
    "start": "2342140",
    "end": "2347299"
  },
  {
    "text": "synchronously so we actually looked at having one or two different you know two or three copies so first we said well",
    "start": "2347299",
    "end": "2355010"
  },
  {
    "text": "okay let's look at just having a secondary or maybe having a tertiary so we actually played with having you know",
    "start": "2355010",
    "end": "2360170"
  },
  {
    "text": "multiple copies so just illustrate what happens when you have three locations you basically do that commit and you",
    "start": "2360170",
    "end": "2366200"
  },
  {
    "text": "send out rights and the read rights are the remote ones so the black ones are local so the red ones are going to be",
    "start": "2366200",
    "end": "2372230"
  },
  {
    "text": "slower and in some cases you're AZ's are farther apart right so the rights take longer to happen so as we're progressing",
    "start": "2372230",
    "end": "2378890"
  },
  {
    "text": "you'll see that the local copy is actually moving along quite well and the remote ones are just getting started",
    "start": "2378890",
    "end": "2384079"
  },
  {
    "text": "right so at this point you've got basically two of them done right but you",
    "start": "2384079",
    "end": "2389569"
  },
  {
    "text": "have to wait for the third one if it's synchronous replication so we got to wait for a couple more you know maybe milliseconds for this to finally finish",
    "start": "2389569",
    "end": "2396180"
  },
  {
    "text": "now the other thing with this kind of replication is the more copies you have the more chance you can have for one of",
    "start": "2396180",
    "end": "2402180"
  },
  {
    "text": "them not to respond right so if this last right doesn't actually come back you never get that acknowledgement at",
    "start": "2402180",
    "end": "2407369"
  },
  {
    "text": "some point you time it outright and at that point you actually have to fence the system to figure out who's the live",
    "start": "2407369",
    "end": "2412680"
  },
  {
    "text": "nodes and so you'd be like oh well the primary secondary are still alive we'll leave them in the you know sort of group",
    "start": "2412680",
    "end": "2417809"
  },
  {
    "text": "and we'll kick out the tertiary when the tertiary er comes back it actually has to catch up all the stuff that was",
    "start": "2417809",
    "end": "2424770"
  },
  {
    "text": "missing right it's not just one right that you skip it's all of them right and",
    "start": "2424770",
    "end": "2429839"
  },
  {
    "text": "this is quite different on our world so we did a bunch of testing and these are numbers from quite a while ago",
    "start": "2429839",
    "end": "2435150"
  },
  {
    "start": "2431000",
    "end": "2480000"
  },
  {
    "text": "EBS has gotten quite a bit faster and network latency has gotten better but this is just to illustrate sort of the",
    "start": "2435150",
    "end": "2440309"
  },
  {
    "text": "difference when you have two nodes and four copies or three nodes and six copies so the blue is the two nodes the",
    "start": "2440309",
    "end": "2446339"
  },
  {
    "text": "green is the three so latency on the vertical axis you'd like it to be lower so the 50th percentile writes you can",
    "start": "2446339",
    "end": "2451829"
  },
  {
    "text": "see that really there's not a lot of difference it's six to seven milliseconds right you're like hey that doesn't seem expensive I love this give",
    "start": "2451829",
    "end": "2457349"
  },
  {
    "text": "me three copies right but the problem occurs when you start looking at like the four nines percentile like this is",
    "start": "2457349",
    "end": "2463200"
  },
  {
    "text": "only one in 10,000 iOS but the difference is basically four acts on",
    "start": "2463200",
    "end": "2468799"
  },
  {
    "text": "going to the third copy and that's because you have more jitter in a system when you have more copies right so we've",
    "start": "2468799",
    "end": "2474630"
  },
  {
    "text": "looked at this and in the end we said now we're just going to do two-way multi Z for standard RDS but when it came to",
    "start": "2474630",
    "end": "2480539"
  },
  {
    "start": "2480000",
    "end": "2538000"
  },
  {
    "text": "Aurora we thought we can do better because we have a different storage system so what you'll notice here is I",
    "start": "2480539",
    "end": "2485970"
  },
  {
    "text": "have only three availability zones again and I have my primary but you'll notice I don't have a tertiary or you know",
    "start": "2485970",
    "end": "2491250"
  },
  {
    "text": "secondary node because I don't need those right my my storage is my durability so when I do a commit on",
    "start": "2491250",
    "end": "2498150"
  },
  {
    "text": "Aurora essentially we're gonna send out six simultaneous write requests and they're gonna go out to all the storage",
    "start": "2498150",
    "end": "2504720"
  },
  {
    "text": "nodes and then they're gonna start getting responses back and as soon as we get the first four back you'll notice we're able to commit so if these other",
    "start": "2504720",
    "end": "2512670"
  },
  {
    "text": "two never show up that's okay because we'll do peer-to-peer replication to catch up but if they just miss one right",
    "start": "2512670",
    "end": "2519990"
  },
  {
    "text": "we don't stop writing to that node right we'll just be behind that one little transaction and it'll get fixed by one",
    "start": "2519990",
    "end": "2526980"
  },
  {
    "text": "of the other replicas right or storage nodes to be clear so this is quite good that we don't actually have this really coarse model",
    "start": "2526980",
    "end": "2535079"
  },
  {
    "text": "right it's a very granular system of repair so what does this result in this",
    "start": "2535079",
    "end": "2540240"
  },
  {
    "start": "2538000",
    "end": "2602000"
  },
  {
    "text": "results in much better latency so this is suspend the p95 response time right",
    "start": "2540240",
    "end": "2546480"
  },
  {
    "text": "this is a thousand clients so this is a high skill workload and we got a thirty gig working set so the blue line is RTS",
    "start": "2546480",
    "end": "2554849"
  },
  {
    "text": "Postgres single AZ no backups the yellow line is Aurora and what you can see is",
    "start": "2554849",
    "end": "2559890"
  },
  {
    "text": "that Aurora is very consistent right over time it's very good it doesn't have a lot of variability now the blue is all",
    "start": "2559890",
    "end": "2566790"
  },
  {
    "text": "over the place can anyone guess what that these blue kind of sections are where it goes up and down like that",
    "start": "2566790",
    "end": "2572780"
  },
  {
    "text": "that's checkpoints exactly correct right so what's happening here on regular Postgres is the checkpoints are",
    "start": "2572780",
    "end": "2579240"
  },
  {
    "text": "basically fighting for the iOS with that log buffer being flushed right so at the",
    "start": "2579240",
    "end": "2584520"
  },
  {
    "text": "bottom of the graph it's pretty good that's when it's not check pointing and the you know it's pretty good but you'll",
    "start": "2584520",
    "end": "2589680"
  },
  {
    "text": "also notice this is single a Z we're not actually durable here across multiple a Z's this is actually not even a really a",
    "start": "2589680",
    "end": "2595799"
  },
  {
    "text": "good fair comparison because if you made this multi Z the blue line would be even higher right so let's talk a little bit",
    "start": "2595799",
    "end": "2603839"
  },
  {
    "start": "2602000",
    "end": "2652000"
  },
  {
    "text": "more about what we do for a replication and a cool feature called clones so in",
    "start": "2603839",
    "end": "2612660"
  },
  {
    "text": "Postgres RDS Postgres if you ask for a replica we're gonna basically take a",
    "start": "2612660",
    "end": "2617819"
  },
  {
    "text": "snapshot of the EBS volume we're gonna restore that EBS volume then we're gonna fire up a read-only ec2 instance on it",
    "start": "2617819",
    "end": "2625079"
  },
  {
    "text": "and great but you still have to catch up from that all happening right and that takes a bit of time on a really high",
    "start": "2625079",
    "end": "2630660"
  },
  {
    "text": "right workload this could take an hour or two for it to catch up once it's all caught up if you do an update",
    "start": "2630660",
    "end": "2636380"
  },
  {
    "text": "essentially what you're gonna do is you're gonna write to EBS you're gonna get that response back so that's all",
    "start": "2636380",
    "end": "2642359"
  },
  {
    "text": "good and at the same time you're sending an asynchronous request across to the read-only node now it might actually have to read that block into memory",
    "start": "2642359",
    "end": "2648720"
  },
  {
    "text": "before it can write it out again so that's a lot of work that has to happen on Aurora this is quite different we",
    "start": "2648720",
    "end": "2655230"
  },
  {
    "start": "2652000",
    "end": "2730000"
  },
  {
    "text": "have just a row of storage so when you want to read only node BAM we just pop one up it takes a couple minutes right",
    "start": "2655230",
    "end": "2660900"
  },
  {
    "text": "because it's just firing up an ec2 instance and attaching to the storage when you do an update on",
    "start": "2660900",
    "end": "2666000"
  },
  {
    "text": "Aurora that same thing has to happen we write to storage right and we have the asynchronous replication going across",
    "start": "2666000",
    "end": "2671910"
  },
  {
    "text": "but it's just doing it for anything in memory so it's only updating the blocks in memory and it doesn't have to write",
    "start": "2671910",
    "end": "2678420"
  },
  {
    "text": "on the other side because the data is in the storage right it's shared so I",
    "start": "2678420",
    "end": "2683730"
  },
  {
    "text": "wanted to show this and I thought well I'll use PG bench and it has a read write mode in a read-only mode so I was",
    "start": "2683730",
    "end": "2689700"
  },
  {
    "text": "gonna run the readwrite node with the read or the write workload and on the read-only node already read from it so",
    "start": "2689700",
    "end": "2696350"
  },
  {
    "text": "there's four tables they all get modified on the readwrite workload on the select only workload it's only the",
    "start": "2696350",
    "end": "2702780"
  },
  {
    "text": "accounts table it gets read so you start off post trace it looks like this but then as soon as you start doing",
    "start": "2702780",
    "end": "2708210"
  },
  {
    "text": "asynchronous requests guess what that note actually has to load those other tables into memory because it's got to",
    "start": "2708210",
    "end": "2714030"
  },
  {
    "text": "be able to apply the changes to those tables as they happen in Aurora this is quite different in that we're only doing",
    "start": "2714030",
    "end": "2719580"
  },
  {
    "text": "this stuff in memory so the accounts table is the only one that ever gets touched because it's being read by the",
    "start": "2719580",
    "end": "2724680"
  },
  {
    "text": "the select only benchmark so this is actually really important for what happens about replication lag to",
    "start": "2724680",
    "end": "2730950"
  },
  {
    "start": "2730000",
    "end": "2842000"
  },
  {
    "text": "illustrate that I took a replica I'm running 8000 TPS writes on the primary",
    "start": "2730950",
    "end": "2736530"
  },
  {
    "text": "and on the read-only note I'm doing 200,000 read-only requests right so that's pretty impressive and this is",
    "start": "2736530",
    "end": "2743310"
  },
  {
    "text": "stock Postgres right RDS Postgres this is the cloud watch metrics from the replicas and you'll notice the sort of",
    "start": "2743310",
    "end": "2749460"
  },
  {
    "text": "the thin orange line is the rights that are happening so it's going along quite well and then where the big arrow is I",
    "start": "2749460",
    "end": "2756210"
  },
  {
    "text": "did a really not nice thing to my database i back filled the whole PG bench history table I've dated every row",
    "start": "2756210",
    "end": "2762510"
  },
  {
    "text": "right in one transaction so that's not something you'd like to see but guess what it happens in production where",
    "start": "2762510",
    "end": "2767670"
  },
  {
    "text": "people need to do backfill right what you'll notice is the green line so the Green Line is the replication delay in",
    "start": "2767670",
    "end": "2773580"
  },
  {
    "text": "seconds and so the reason people ask me why is it in seconds well when we first started RDS it was my sequel my sequel",
    "start": "2773580",
    "end": "2780270"
  },
  {
    "text": "had kind of poor replication and we you know the lag was always in many seconds and so we said seconds is a fine number",
    "start": "2780270",
    "end": "2787830"
  },
  {
    "text": "to use as granularity nowadays for Postgres is not really applicable but we haven't gone back to fix this yet so as",
    "start": "2787830",
    "end": "2794220"
  },
  {
    "text": "soon as I do this backfill what happens is that is essentially like a snake trying to eat a watermelon right it's got to go",
    "start": "2794220",
    "end": "2800850"
  },
  {
    "text": "through the whole system and it clogs it up and what you start to see at that red arrow is that we're losing 30 seconds",
    "start": "2800850",
    "end": "2807000"
  },
  {
    "text": "for every wall clock minute of replication delay and after 19 minutes were 10 minutes behind on this replica",
    "start": "2807000",
    "end": "2813570"
  },
  {
    "text": "but you'll also notice another thing that blue line starts to pick up about halfway through and it's doing a lot of",
    "start": "2813570",
    "end": "2819450"
  },
  {
    "text": "reads on the replica why is it doing that well because it didn't have all the PG bench history in RAM so it actually",
    "start": "2819450",
    "end": "2826860"
  },
  {
    "text": "had to start loading it off disk which slows the replication down even more and now we're losing almost 40 seconds for",
    "start": "2826860",
    "end": "2832680"
  },
  {
    "text": "every wall clock minute right so this is how on a regular RTS Postgres instance you can actually have a lot of",
    "start": "2832680",
    "end": "2838260"
  },
  {
    "text": "replication problems if you do things like backfills or have any other issues this is the same benchmark running on",
    "start": "2838260",
    "end": "2844470"
  },
  {
    "start": "2842000",
    "end": "2869000"
  },
  {
    "text": "auroral so the big difference is we use milliseconds for our latency for a",
    "start": "2844470",
    "end": "2850050"
  },
  {
    "text": "replication lag and if I didn't have the red arrow there would you be able to tell where I did the backfill you",
    "start": "2850050",
    "end": "2856410"
  },
  {
    "text": "wouldn't right because the replication lag basically didn't change because I'm back filling a table that it's gonna",
    "start": "2856410",
    "end": "2861900"
  },
  {
    "text": "send those rights over and then it's gonna find that they're not in memory and not do anything with them so there's no update that happens the other really",
    "start": "2861900",
    "end": "2870450"
  },
  {
    "start": "2869000",
    "end": "2986000"
  },
  {
    "text": "cool feature that we launched in the last year is called fast clones so I'm illustrating sort of the same setup",
    "start": "2870450",
    "end": "2876210"
  },
  {
    "text": "we've had before I've just kind of changed the storage to look a little different where I have blocks instead of the storage nodes just illustrate some",
    "start": "2876210",
    "end": "2881820"
  },
  {
    "text": "of the concepts here so let's say your business wants to do a lot of reporting but they want the data frozen at",
    "start": "2881820",
    "end": "2888060"
  },
  {
    "text": "midnight well you could do a point-in-time recovery fire that up that'd be great but you have to you know",
    "start": "2888060",
    "end": "2893340"
  },
  {
    "text": "allocate all that storage let's say it's 20 terabytes instead what you can do you can have your reporting application",
    "start": "2893340",
    "end": "2899310"
  },
  {
    "text": "create a clone and so this is a really cool thing in that you get clone storage",
    "start": "2899310",
    "end": "2905220"
  },
  {
    "text": "what do I mean by clone storage well clone storage doesn't actually exist all it is is pointers to the primary storage",
    "start": "2905220",
    "end": "2910860"
  },
  {
    "text": "to start with so if you clone a 20 terabyte database you're not paying for 20 terabytes of storage you're paying for nothing until you modify so in",
    "start": "2910860",
    "end": "2918960"
  },
  {
    "text": "actuality what happens with when you start actually running your application here is when you do a read it's gonna go",
    "start": "2918960",
    "end": "2926130"
  },
  {
    "text": "find the address in the clone storage but it's actually gonna go read from the primary storage right so you don't actually have to duplicate",
    "start": "2926130",
    "end": "2932190"
  },
  {
    "text": "it so that works but what happens when I try to do a write I don't want to modify the primary storage so we do",
    "start": "2932190",
    "end": "2938100"
  },
  {
    "text": "copy-on-write at that point so before the block is modified it gets copied down to the clone storage right and we",
    "start": "2938100",
    "end": "2943140"
  },
  {
    "text": "basically unlink the relationship between those two blocks you can create new blocks they're just going to go in",
    "start": "2943140",
    "end": "2948720"
  },
  {
    "text": "your clone stories and there's no relationship to the primary storage there when the original rewrite master",
    "start": "2948720",
    "end": "2954330"
  },
  {
    "text": "basically writes a log record you'll see that it only updates the primary storage it doesn't actually make changes to the",
    "start": "2954330",
    "end": "2960990"
  },
  {
    "text": "clone storage because they're separated at the time you clone right it's not any kind of lagging updates or anything and",
    "start": "2960990",
    "end": "2967650"
  },
  {
    "text": "when the read write node modifies the current block that's shared by both of them basically we do that same",
    "start": "2967650",
    "end": "2973320"
  },
  {
    "text": "copy-on-write in Reverse and you know give the new block two or new block for the primer the old block goes to the",
    "start": "2973320",
    "end": "2979050"
  },
  {
    "text": "clone storage right so this is a fantastic tool for using for reporting for testing for benchmarking to",
    "start": "2979050",
    "end": "2986220"
  },
  {
    "start": "2986000",
    "end": "3045000"
  },
  {
    "text": "illustrate this I ran a PG bench readwrite benchmark and I set a target",
    "start": "2986220",
    "end": "2991560"
  },
  {
    "text": "rate of 10 or 20,000 TPS and it's a 10,000 row or 10 scale 10k sorry which",
    "start": "2991560",
    "end": "2999660"
  },
  {
    "text": "results in about 150 gig so one of the things that people ask me is well this clone stuff sounds great but does it",
    "start": "2999660",
    "end": "3005150"
  },
  {
    "text": "impact my performance so I'm running along on purple right that's my primary that I started and I requested a clone",
    "start": "3005150",
    "end": "3010970"
  },
  {
    "text": "at about I think 20 minutes in right you'll notice there's no degradation in",
    "start": "3010970",
    "end": "3015980"
  },
  {
    "text": "performance when I did that and about 15 minutes later my clone was finished being created I wasn't actually keeping",
    "start": "3015980",
    "end": "3022610"
  },
  {
    "text": "absolute track of it so about 18 minutes or 20 minutes later I fired up the same sorry I fired up the same benchmark on",
    "start": "3022610",
    "end": "3029180"
  },
  {
    "text": "the blue and you can see that we actually get the exact same performance on the clone right and we see no",
    "start": "3029180",
    "end": "3035840"
  },
  {
    "text": "degradation in the performance of either of them so this is a way where you can go get a copy of your production system and then go run tests on it for example",
    "start": "3035840",
    "end": "3042170"
  },
  {
    "text": "and it's quite inexpensive so as I mentioned earlier to the features that",
    "start": "3042170",
    "end": "3049490"
  },
  {
    "start": "3045000",
    "end": "3148000"
  },
  {
    "text": "we're still working on for parody our replication related ones that I'm going to talk about them now so the first one",
    "start": "3049490",
    "end": "3054590"
  },
  {
    "text": "is logical replication support so this how many people are familiar with logical replication and Postgres some",
    "start": "3054590",
    "end": "3060830"
  },
  {
    "text": "not too many so this is the ability for Postgres to take the physical that go into the wall stream the right",
    "start": "3060830",
    "end": "3065960"
  },
  {
    "text": "ahead log and convert them back to sequel so that you can take them from your instance and use them to you know a",
    "start": "3065960",
    "end": "3072290"
  },
  {
    "text": "data warehouse or a lot of different things so we support this in RDS Postgres today and we're working on it",
    "start": "3072290",
    "end": "3077540"
  },
  {
    "text": "for a while so if you have an Aurora instance what you're gonna be able to do in the future is you're gonna necessarily you could fire up an ec2",
    "start": "3077540",
    "end": "3082730"
  },
  {
    "text": "instance and you can enable logical decoding plug-in and we support three of them today you can choose which one you",
    "start": "3082730",
    "end": "3088220"
  },
  {
    "text": "want to use and the ec2 instance basically going to talk to the Aurora instance and get those logical changes and then it could ship it to something",
    "start": "3088220",
    "end": "3094190"
  },
  {
    "text": "like Kinesis for example right the other thing you can do with this is you can fire up our DMS service our data",
    "start": "3094190",
    "end": "3100280"
  },
  {
    "text": "migration service which is really a replication service at heart and you can have it talk to your instance and pull",
    "start": "3100280",
    "end": "3105349"
  },
  {
    "text": "changes off and you can send those two already asks you can send them to s3 you can send them to dynamo you can send",
    "start": "3105349",
    "end": "3111500"
  },
  {
    "text": "them to redshift there's all kinds of places that you can move your data to right now this is really nice",
    "start": "3111500",
    "end": "3116839"
  },
  {
    "text": "but as you can see it involves having another box and some stuff happening right if you just want to replicate",
    "start": "3116839",
    "end": "3122240"
  },
  {
    "text": "between Postgres instances in v10 we're gonna be able to support publish and subscribe so this is if you have an ec2",
    "start": "3122240",
    "end": "3129589"
  },
  {
    "text": "instance running Postgres and RDS instance you can actually set up publish on one side and subscribe on the other",
    "start": "3129589",
    "end": "3135619"
  },
  {
    "text": "you don't have to have any secondary boxes and you can move logical data between the two of them again this is for you can use an RDS instance for",
    "start": "3135619",
    "end": "3142550"
  },
  {
    "text": "Postgres or another Aurora instance will be able to work like this so this is really handy if you want to move data",
    "start": "3142550",
    "end": "3147740"
  },
  {
    "text": "around so the other thing customers really talk to us a lot about is being able to have dr and so the feature that",
    "start": "3147740",
    "end": "3154300"
  },
  {
    "start": "3148000",
    "end": "3274000"
  },
  {
    "text": "is going to support that is our cross region replication so here I'm showing region a with an Aurora cluster what you",
    "start": "3154300",
    "end": "3162200"
  },
  {
    "text": "want is region B to have a copy right so we're introducing some new new features",
    "start": "3162200",
    "end": "3167690"
  },
  {
    "text": "the first is that we're having a replication server in a replication replication agent that's the little",
    "start": "3167690",
    "end": "3173210"
  },
  {
    "text": "boxes in purple and the goal of those is to support this cross region replication",
    "start": "3173210",
    "end": "3179470"
  },
  {
    "text": "when you do a log write which is all we do right on the primary it's gonna flow",
    "start": "3179470",
    "end": "3185810"
  },
  {
    "text": "to a bunch of different places so goes to the read-only notes do that invalidation as I talked about it flows down to the storage level for the",
    "start": "3185810",
    "end": "3191720"
  },
  {
    "text": "durability and it goes to the replication server the replication server is going to forward that on to the replicate replication agent on the",
    "start": "3191720",
    "end": "3198350"
  },
  {
    "text": "their side and then it's going to apply it to the read-only node for again cash and validation purposes or updates and",
    "start": "3198350",
    "end": "3205430"
  },
  {
    "text": "it's gonna flow to Aurora storage right so this way you can actually physically",
    "start": "3205430",
    "end": "3211040"
  },
  {
    "text": "get all the physical changes on both sides it's gonna be very low latency and very efficient now one of the things",
    "start": "3211040",
    "end": "3217700"
  },
  {
    "text": "that can happen is you can sometimes lose log vectors and the nice thing is that we actually can handle that we can",
    "start": "3217700",
    "end": "3224180"
  },
  {
    "text": "also handle having multiple really nodes in the future we're going to support multiple regions as well at the same",
    "start": "3224180",
    "end": "3229820"
  },
  {
    "text": "time so the replication server and agent talked to the storage servers as well and they can actually pick log vectors",
    "start": "3229820",
    "end": "3237320"
  },
  {
    "text": "or blocks from the one side and move them to the other right so we can actually do catch-up in multiple ways for repair purposes so you can use this",
    "start": "3237320",
    "end": "3246140"
  },
  {
    "text": "in a dr scenario where you know something's happen to a region or you could move use it to move one region to",
    "start": "3246140",
    "end": "3252470"
  },
  {
    "text": "another we had a lot of customers when new regions pop up sometimes they're closer to their customers than our current regions and this is a really",
    "start": "3252470",
    "end": "3258650"
  },
  {
    "text": "nice way where you can just basically go and promote the new one to be the new writer and at that point you know you",
    "start": "3258650",
    "end": "3265010"
  },
  {
    "text": "have your same cluster you can have all the same read-only nodes and everything else so this can also be used for you",
    "start": "3265010",
    "end": "3270890"
  },
  {
    "text": "know remote reads in other regions as well so caching we made a bunch of",
    "start": "3270890",
    "end": "3276050"
  },
  {
    "start": "3274000",
    "end": "3417000"
  },
  {
    "text": "changes in Aurora for caching we'll walk through that so on on our 416 Excel very",
    "start": "3276050",
    "end": "3282470"
  },
  {
    "text": "large box 180 gig of ram right so when we set up RDS Postgres we basically",
    "start": "3282470",
    "end": "3288590"
  },
  {
    "text": "allow about 25% of that ram for post rest processes in the OS about another 25 percent goes to the shared buffers",
    "start": "3288590",
    "end": "3294980"
  },
  {
    "text": "for inside the database and the rest goes to the Linux page cache so this is actually where Postgres is different",
    "start": "3294980",
    "end": "3300140"
  },
  {
    "text": "than most databases in that it uses two caches right most just have something like shared buffers now there are",
    "start": "3300140",
    "end": "3307220"
  },
  {
    "text": "advantages and disadvantages to that so the first is when you're selecting data the Postgres process is going to go look",
    "start": "3307220",
    "end": "3313220"
  },
  {
    "text": "for and shared buffers and if it doesn't find it there it's gonna ask for storage it might find it in the page cache if it doesn't it's gonna go to EBS and pick it",
    "start": "3313220",
    "end": "3319310"
  },
  {
    "text": "up and then it has to return all the way back up the stack so this works well but there's a little overhead the other",
    "start": "3319310",
    "end": "3325310"
  },
  {
    "text": "thing is because you have two caches you get duplicate buffers so even though we have 75% of the space for caching",
    "start": "3325310",
    "end": "3331580"
  },
  {
    "text": "in actuality we only end up cashing about 50% of the blocks right so only about 240 gig of cash space is used",
    "start": "3331580",
    "end": "3338330"
  },
  {
    "text": "there on Aurora it's quite different because we still need the space for Postgres in the OS but we don't have a",
    "start": "3338330",
    "end": "3345440"
  },
  {
    "text": "page cache because we don't have a Opera era filesystem we'd write directly to our storage so we're going to use all of",
    "start": "3345440",
    "end": "3351620"
  },
  {
    "text": "that remaining RAM for shared buffers so 75% when we do a read from Postgres",
    "start": "3351620",
    "end": "3357830"
  },
  {
    "text": "again the same thing we're gonna look at shared buffers but if it's not there we're gonna directly get it from Aurora storage and return it so Postgres can",
    "start": "3357830",
    "end": "3366560"
  },
  {
    "text": "die right as a process and that's fine because you know it's durable but you",
    "start": "3366560",
    "end": "3372920"
  },
  {
    "text": "want it to come back up and be fast right so you want to have your buffers but your buffers also go away when post",
    "start": "3372920",
    "end": "3378830"
  },
  {
    "text": "rest eyes but the Linux page cache doesn't so guess what you're happy because your blocks are in cache and",
    "start": "3378830",
    "end": "3385520"
  },
  {
    "text": "your databases backup and it's all working fine right so we had the difficult decision of being like well we",
    "start": "3385520",
    "end": "3392150"
  },
  {
    "text": "don't have a file system cache so we're not going to get that benefit so we actually had to go build a feature called survivable cache so this is where",
    "start": "3392150",
    "end": "3399170"
  },
  {
    "text": "we go and do invalidation on the cache when the Postgres process dies we actually have the shared buffer",
    "start": "3399170",
    "end": "3404330"
  },
  {
    "text": "separated from the Postgres process and therefore they can survive we just need to invalidate a little bit",
    "start": "3404330",
    "end": "3409700"
  },
  {
    "text": "of metadata and then bam it's all good right so this gives us the exact same sort of story around caching but there",
    "start": "3409700",
    "end": "3417980"
  },
  {
    "start": "3417000",
    "end": "3533000"
  },
  {
    "text": "are some advantages so to show that I ran a read-only benchmark right so this is just reads scale 22,000 so that's 350",
    "start": "3417980",
    "end": "3425630"
  },
  {
    "text": "gig working set right but it should fit in Ram because we have 488 gig right so in our 460 to excel and the blue I'm",
    "start": "3425630",
    "end": "3432680"
  },
  {
    "text": "showing Aurora with a 75% cache we're getting 600 almost six hundred and ninety thousand TPS so this is really",
    "start": "3432680",
    "end": "3439850"
  },
  {
    "text": "cool when you just think about as a raw number I mean that's like a very fast system right so I went around that on",
    "start": "3439850",
    "end": "3445070"
  },
  {
    "text": "RDS Postgres with it's 25% shared buffers and I got 1.6 times slower and I",
    "start": "3445070",
    "end": "3452270"
  },
  {
    "text": "was like what's going on here I didn't expect that well it turned out I was doing 18,000 read items and the reason",
    "start": "3452270",
    "end": "3458810"
  },
  {
    "text": "was because this size of working set didn't fit because of the double counting of buffers right that we had",
    "start": "3458810",
    "end": "3464510"
  },
  {
    "text": "the overhead of that so to fix that what a lot of people recommend in the Postgres universe is to",
    "start": "3464510",
    "end": "3469609"
  },
  {
    "text": "make the cache smaller right make the shared buffer smaller give it all to Linux page cache and so that's what I",
    "start": "3469609",
    "end": "3475970"
  },
  {
    "text": "did I went down to a 10% cash so it would all fit in cache and I got a lower number and I was like my hand I'm doing",
    "start": "3475970",
    "end": "3483530"
  },
  {
    "text": "something wrong so I went and said what's going on here why am I being slower well as it turns out because the",
    "start": "3483530",
    "end": "3490040"
  },
  {
    "text": "overhead of Haffner Reede both the shared buffers and check for it there and then go to the file system cache and then go back up through those layers",
    "start": "3490040",
    "end": "3495680"
  },
  {
    "text": "burn CPU this is a heavy CPU benchmark right and so I'm stealing CPU cycles to",
    "start": "3495680",
    "end": "3502490"
  },
  {
    "text": "do that which means I can't do more transactions and so this is why I'm actually slower and to demonstrate",
    "start": "3502490",
    "end": "3507590"
  },
  {
    "text": "there's no goofy business with Postgres if I make the cache 75% the shared buffers we get the basically the exact",
    "start": "3507590",
    "end": "3513830"
  },
  {
    "text": "same number as Aurora because reading blocks from memory is essentially the same on both of them but guess what if",
    "start": "3513830",
    "end": "3518869"
  },
  {
    "text": "you configure RDS Postgres like this and the Postgres process dies no survivable cache right so this is one of the again",
    "start": "3518869",
    "end": "3525890"
  },
  {
    "text": "the cool differences that we've improved on with Aurora so this is all great when",
    "start": "3525890",
    "end": "3531320"
  },
  {
    "text": "you know just the Postgres process dies but what happens when I have to do a failover right what about my cache then",
    "start": "3531320",
    "end": "3537650"
  },
  {
    "start": "3533000",
    "end": "3599000"
  },
  {
    "text": "so to illustrate that I'm running PG bench with a 20x read-only to a 1x",
    "start": "3537650",
    "end": "3542690"
  },
  {
    "text": "readwrite benchmark on a node right it's 160 gig in cache and vertical accesses",
    "start": "3542690",
    "end": "3549680"
  },
  {
    "text": "transactions per second and I'm doing about I think what was it like 350,000 total transactions between the reads and",
    "start": "3549680",
    "end": "3555770"
  },
  {
    "text": "writes and at 10 minutes in I basically do a failover right and it takes 32",
    "start": "3555770",
    "end": "3561410"
  },
  {
    "text": "seconds to come back up and that's including DNS and I just had PG bench and a little loop just trying to connect right so as soon as DNS propagated it",
    "start": "3561410",
    "end": "3568160"
  },
  {
    "text": "connected and it was all good right but if you look at the 90th percentile of my performance right I should be much",
    "start": "3568160",
    "end": "3574400"
  },
  {
    "text": "closer to about 320,000 if that's what my application needs right so it",
    "start": "3574400",
    "end": "3579650"
  },
  {
    "text": "actually took three hundred and forty seconds to get back to having the cache all warmed up and to get back to that",
    "start": "3579650",
    "end": "3585800"
  },
  {
    "text": "baseline performance right so when we talk about failover we're actually not being very good when we say oh yeah it's",
    "start": "3585800",
    "end": "3591109"
  },
  {
    "text": "failover in 32 seconds but you know from an application users perspective it really didn't write it took a lot longer",
    "start": "3591109",
    "end": "3597190"
  },
  {
    "text": "so to get around this we built a new feature called cluster cache management or CCM",
    "start": "3597190",
    "end": "3602270"
  },
  {
    "text": "as I like to call it so again we got the same standard setup and I'm we introduced a new term which is failover",
    "start": "3602270",
    "end": "3608720"
  },
  {
    "text": "priority so this is a feature that we've had in Aurora and you can actually designate your nodes for which failover",
    "start": "3608720",
    "end": "3614210"
  },
  {
    "text": "priority with zero being the highest priority I know that sounds kind of backwards but it's easier to figure out",
    "start": "3614210",
    "end": "3620000"
  },
  {
    "text": "you know which one to go to so you notice that the readwrite one and the one read-only no turn our failover",
    "start": "3620000",
    "end": "3625160"
  },
  {
    "text": "priority 0 so this is gonna be where we go first all these other read-only nodes I mean I've labeled failover priority 1",
    "start": "3625160",
    "end": "3630530"
  },
  {
    "text": "now that doesn't mean we won't failover to them it just means that we'll consider them less likely to happen because we're gonna try the other nodes",
    "start": "3630530",
    "end": "3637010"
  },
  {
    "text": "first right so once you've done this and if you turn on a PG CCM enabled in your",
    "start": "3637010",
    "end": "3644450"
  },
  {
    "text": "parameter group at the cluster level essentially we're gonna start doing extra stuff and the first thing is the",
    "start": "3644450",
    "end": "3650720"
  },
  {
    "text": "read-only node is gonna send a bloom filter of what the replicas cache looks like back to the readwrite node the",
    "start": "3650720",
    "end": "3656780"
  },
  {
    "text": "readwrite node is gonna compare that with what it's got in cache and then it's gonna send the addresses of the blocks that it wants to load on the",
    "start": "3656780",
    "end": "3663320"
  },
  {
    "text": "read-only node and then the read-only node in the background is basically going to slowly read those blocks in I",
    "start": "3663320",
    "end": "3668450"
  },
  {
    "text": "shouldn't say slowly over a little bit of time read them in and you'll now notice the color on the read-only node",
    "start": "3668450",
    "end": "3673820"
  },
  {
    "text": "is the same as the readwrite node because the caches are basically very similar now now we don't do this for every block every change because you",
    "start": "3673820",
    "end": "3681200"
  },
  {
    "text": "know if you had a lot of cache churn you only really want the stuff that's hot in the cache to be coming across right because it is extra read workload on",
    "start": "3681200",
    "end": "3688490"
  },
  {
    "text": "your read-only node but there's a reason why you want to do this so I ran the exact same benchmark same failover at",
    "start": "3688490",
    "end": "3695150"
  },
  {
    "text": "600 seconds and the blue is with CCM enabled and the red is the original right so we have the 340 seconds so now",
    "start": "3695150",
    "end": "3702590"
  },
  {
    "text": "we're back to 32 seconds for failover but we're 32 seconds for failover and back to our 90th percentile performance",
    "start": "3702590",
    "end": "3709280"
  },
  {
    "text": "right so now we truly have failover at 32 seconds not 340 right so this is a",
    "start": "3709280",
    "end": "3715190"
  },
  {
    "text": "very important feature it's also going to allow us over time to try to get that 32 seconds down further because there's",
    "start": "3715190",
    "end": "3721490"
  },
  {
    "text": "less disruption to the customer when you do these fail overs so one of the other things that we've worked on is",
    "start": "3721490",
    "end": "3728270"
  },
  {
    "text": "performance to illustrate performance one of the other tools we built performance insights this is available",
    "start": "3728270",
    "end": "3734600"
  },
  {
    "text": "across a lot of our engines but our posters was the first one we had and this is a really nice tool for being",
    "start": "3734600",
    "end": "3740150"
  },
  {
    "text": "able to see what's going on with performance in your database right so what I'm illustrating here is that my application was running along fine and",
    "start": "3740150",
    "end": "3746360"
  },
  {
    "text": "then at some point it kind of went off the rails right so the green is CPU usage and that little black line across",
    "start": "3746360",
    "end": "3752660"
  },
  {
    "text": "the top is my actual number of CPUs so it basically means I have the box pinned to the wall right it's just flat out",
    "start": "3752660",
    "end": "3758540"
  },
  {
    "text": "running but I'm like well it wasn't doing that before what's what's changed so I drill in and I look at the current",
    "start": "3758540",
    "end": "3764660"
  },
  {
    "text": "run what's going on right now all the CPU usage and I can see it's this query and it's hopefully you can see that it's",
    "start": "3764660",
    "end": "3771260"
  },
  {
    "text": "it's basically a an analytics query right that I'm running in SPG bench history and you know that seems kind of",
    "start": "3771260",
    "end": "3777470"
  },
  {
    "text": "horrible but wait let's go look at it before well it was running before and it was running fine so what happened right",
    "start": "3777470",
    "end": "3783590"
  },
  {
    "text": "so as it turns out the plans have changed so before what I was doing was I was getting a nested loop bitmap heat",
    "start": "3783590",
    "end": "3790369"
  },
  {
    "text": "scan a bitmap index scan right afterwards I'm now getting a hash join and I'm getting sequential scans right",
    "start": "3790369",
    "end": "3797420"
  },
  {
    "text": "so this is a dramatically worse plan well why did that happen well it could",
    "start": "3797420",
    "end": "3802970"
  },
  {
    "text": "be a stats change could be analyzed it could be a config change it could be an index I mean it's obably not an index change in this case right but all these things",
    "start": "3802970",
    "end": "3810230"
  },
  {
    "text": "can cause plans to change on you and dramatic fashions right as it turns out the reason why this happened was me I",
    "start": "3810230",
    "end": "3816380"
  },
  {
    "text": "changed a couple parameters right not that anyone's ever inadvertently set the wrong parameter in their database right",
    "start": "3816380",
    "end": "3824320"
  },
  {
    "text": "so I did this deliberately just to show that you know the plans can dramatically",
    "start": "3824980",
    "end": "3830390"
  },
  {
    "text": "change and you know that's a bad thing right so if you come from enterprise",
    "start": "3830390",
    "end": "3836660"
  },
  {
    "text": "databases you know running fast is great but running consistently is actually",
    "start": "3836660",
    "end": "3841910"
  },
  {
    "text": "probably more important right your manager if your if your your database running 2% faster it's gonna be happy if",
    "start": "3841910",
    "end": "3847130"
  },
  {
    "text": "on the other hand your database blows up because it goes 500 percent slower right your manager is gonna be in your office",
    "start": "3847130",
    "end": "3853160"
  },
  {
    "text": "yelling at you right so to get around this we've got a new feature out in our new latest release of 10 10 5 it's also",
    "start": "3853160",
    "end": "3861440"
  },
  {
    "text": "going to come on our 9 version in our next release called query plan management or qpm",
    "start": "3861440",
    "end": "3866540"
  },
  {
    "text": "so what this allows you to do is capture statements right so as the statements are running in the database you can",
    "start": "3866540",
    "end": "3871880"
  },
  {
    "text": "actually capture them so in this case I'm showing query a plan version one query B in the sort of pink plan v1",
    "start": "3871880",
    "end": "3878960"
  },
  {
    "text": "right so you can then approve these plans you can do this automatically or manually and once you say they're good",
    "start": "3878960",
    "end": "3885050"
  },
  {
    "text": "they're marked as approved then you can institute a baseline by instituting a",
    "start": "3885050",
    "end": "3890360"
  },
  {
    "text": "baseline you're telling the optimizer to basically use these plans right and to not deviate from that so this allows for",
    "start": "3890360",
    "end": "3896720"
  },
  {
    "text": "planned stability right so you're not going to get weird plants so when a new version of this plan shows up it's not",
    "start": "3896720",
    "end": "3903170"
  },
  {
    "text": "going to automatically be used by the optimizer right it's it's gonna be discarded because it's not the approved",
    "start": "3903170",
    "end": "3908750"
  },
  {
    "text": "plan it's not in the baseline right but the challenge with this if you do this right now someone comes along and it",
    "start": "3908750",
    "end": "3915530"
  },
  {
    "text": "says I'm gonna build an index now to make that query better right and this plan v3 might actually be better but it",
    "start": "3915530",
    "end": "3922970"
  },
  {
    "text": "won't use it right because I've got the baseline well we allow you to evolve to better plans and we do this by having a",
    "start": "3922970",
    "end": "3928580"
  },
  {
    "text": "comparison utility that allows you to compare plans and figure out based on elapsed time and cost whether it's",
    "start": "3928580",
    "end": "3935180"
  },
  {
    "text": "better and if it is then you can just approve that plan and it's going to be used in place of the original plan right",
    "start": "3935180",
    "end": "3940760"
  },
  {
    "text": "to illustrate like what happens when you use baselines let's go back to my PI screen and you'll see that this is what",
    "start": "3940760",
    "end": "3948710"
  },
  {
    "text": "I instituted the baselines back on right my plans go back to exactly how they were before and my performance gets very",
    "start": "3948710",
    "end": "3955430"
  },
  {
    "text": "predictable right so this this shows you that you can actually have you know control of your plans and a much more",
    "start": "3955430",
    "end": "3962090"
  },
  {
    "text": "predictable database performance than you had before one of the other things around predictable performance you need",
    "start": "3962090",
    "end": "3968630"
  },
  {
    "text": "vacuuming if you're running Postgres right so this is just a benchmark I ran a long time ago that shows what happens",
    "start": "3968630",
    "end": "3974960"
  },
  {
    "text": "if you turn off vacuuming right the red line is where you'd like to be at and the black line is sort of what happens",
    "start": "3974960",
    "end": "3980570"
  },
  {
    "text": "over time it just drifts down because you have more bloat in your system right so you need to vacuum to maintain",
    "start": "3980570",
    "end": "3986870"
  },
  {
    "text": "performance the other thing is you need to maintain the cleanup of transaction IDs Postgres has a limit and if you run",
    "start": "3986870",
    "end": "3993890"
  },
  {
    "text": "out of them you basically are going to be down and tell you vacuum so this is a very important thing so as part of",
    "start": "3993890",
    "end": "4000110"
  },
  {
    "text": "the building of Aurora Postgres it was great you know we got the benchmarks we're writing three times faster this is all great and then we sat there and said",
    "start": "4000110",
    "end": "4006980"
  },
  {
    "text": "we'll wait a minute if we're writing three times faster and vacuums running at the same speed that's just gonna be a recipe for disaster",
    "start": "4006980",
    "end": "4012770"
  },
  {
    "text": "right so we went and did vacuum improvements so the one that we've done so far is called intelligent vacuum",
    "start": "4012770",
    "end": "4018920"
  },
  {
    "text": "prefetch so in Postgres when it's vacuuming it has two things a visibility",
    "start": "4018920",
    "end": "4023990"
  },
  {
    "text": "in a frozen map and these are great improvements that we're done in a while back in Postgres that allows Postgres to",
    "start": "4023990",
    "end": "4029090"
  },
  {
    "text": "not to have to scan the entire table to figure out what to vacuum and in this case I'm showing basically an illustration of the frozen map where the",
    "start": "4029090",
    "end": "4035210"
  },
  {
    "text": "blue are things blocks that are frozen or and the red ones are not that names",
    "start": "4035210",
    "end": "4040340"
  },
  {
    "text": "still need to be vacuumed okay so Postgres is going to go and read the ones that it needs and it's gonna go",
    "start": "4040340",
    "end": "4045560"
  },
  {
    "text": "vacuum them right so you'd expect it to do basically what I've Illustrated for the red arrows right but because Postgres uses a file system",
    "start": "4045560",
    "end": "4053240"
  },
  {
    "text": "cache it's trying to get read ahead so it actually has an instruction that says if those red blocks are within thirty",
    "start": "4053240",
    "end": "4058520"
  },
  {
    "text": "two of each other then just read them all right so this actually causes a lot",
    "start": "4058520",
    "end": "4065330"
  },
  {
    "text": "more effort to have to happen right and so I'm not actually sure it on modern",
    "start": "4065330",
    "end": "4071000"
  },
  {
    "text": "SSDs if this still makes sense but it's what Postgres does today I think it's you know we may want to look at that in",
    "start": "4071000",
    "end": "4076340"
  },
  {
    "text": "the future but for us we don't have a file system cache we don't do read ahead in the sort of normal way it's quite",
    "start": "4076340",
    "end": "4082790"
  },
  {
    "text": "different so on Postgres that took 402 seconds when I did this vacuum on Aurora",
    "start": "4082790",
    "end": "4087800"
  },
  {
    "text": "what we do is we collect the block addresses of the things that need to be vacuumed we gather those all together and then we submit one i/o right and",
    "start": "4087800",
    "end": "4096319"
  },
  {
    "text": "it's got one up to 256 blocks can't return from this one il right and so",
    "start": "4096320",
    "end": "4102080"
  },
  {
    "text": "this is much more efficient the other thing with Aurora Postgres is because we're not doing checkpoints or full-page",
    "start": "4102080",
    "end": "4107540"
  },
  {
    "text": "writes vacuuming costs less to actually do so the combination of those two things means that Aurora Postgres did",
    "start": "4107540",
    "end": "4113930"
  },
  {
    "text": "the same vacuuming in 163 seconds so more than twice as fast as regular Postgres so this was a nice improvement",
    "start": "4113930",
    "end": "4120470"
  },
  {
    "text": "that really changed for a lot of our customers they used to have problems with vacuums on Postgres and they're not",
    "start": "4120470",
    "end": "4126380"
  },
  {
    "text": "having any on reward now so how many people are aware of rora serverless",
    "start": "4126380",
    "end": "4134179"
  },
  {
    "text": "cool well I'm very happy to announce that we now have Aurora Postgres as",
    "start": "4134179",
    "end": "4139859"
  },
  {
    "text": "serverless in preview yeah it's very exciting very exciting yeah this is a",
    "start": "4139859",
    "end": "4147120"
  },
  {
    "text": "really cool feature I think is gonna you know dramatically change for a lot of people how they run their databases so",
    "start": "4147120",
    "end": "4153238"
  },
  {
    "text": "what this is is a little different model though you have a database endpoint just like you always have an RDS we have this",
    "start": "4153239",
    "end": "4159390"
  },
  {
    "text": "new thing called a request router in that sort of light purple box and you'll notice that I have Aurora there but",
    "start": "4159390",
    "end": "4165088"
  },
  {
    "text": "there's no server right now and there's just the storage so when you provision something that's all you start with",
    "start": "4165089",
    "end": "4170460"
  },
  {
    "text": "right you don't actually have a server running it's not until your application goes to do work that you actually fire",
    "start": "4170460",
    "end": "4176400"
  },
  {
    "text": "up a server right I mean you can configure it to always be there but you don't have to so at that time we're gonna pull an instance out of our warm",
    "start": "4176400",
    "end": "4183028"
  },
  {
    "text": "pool and we're gonna attach it to your storage and then it's gonna start executing queries for you right and as",
    "start": "4183029",
    "end": "4189778"
  },
  {
    "text": "you push harder essentially we'll go through and we'll actually scale this up or scale it down so you know if you just",
    "start": "4189779",
    "end": "4195750"
  },
  {
    "text": "keep pushing harder you're gonna get a bigger bigger instance right and this happens quite quickly right so I'll show",
    "start": "4195750",
    "end": "4202860"
  },
  {
    "text": "in a second the it takes about five minutes of you know increased CPU to cause that to trigger but the cool thing",
    "start": "4202860",
    "end": "4208560"
  },
  {
    "text": "is because you have this request router in the middle you don't actually draw up sessions right you don't lose",
    "start": "4208560",
    "end": "4213929"
  },
  {
    "text": "connections when we do this so this is all seamless from an application perspective it just goes up and down right the other cool thing is you pay",
    "start": "4213929",
    "end": "4220890"
  },
  {
    "text": "per second in one minute minimums when you spin up right so if you have a application that only runs for four",
    "start": "4220890",
    "end": "4227550"
  },
  {
    "text": "hours a day it'll just basically go to sleep and then the next time somebody connects to it will fire back up so from a economics",
    "start": "4227550",
    "end": "4234030"
  },
  {
    "text": "perspective this is very helpful for those kind of applications and the other cool thing of course is Aurora Storage",
    "start": "4234030",
    "end": "4240239"
  },
  {
    "text": "can grow on its own so you don't have to worry about that and as I said as soon as your application goes away guess what",
    "start": "4240239",
    "end": "4246000"
  },
  {
    "text": "so can your box right to illustrate this we ran a benchmark where we just sort of we're pushing harder so the the blue",
    "start": "4246000",
    "end": "4254370"
  },
  {
    "text": "line is the number of service compared units that have capacity and the orange",
    "start": "4254370",
    "end": "4260310"
  },
  {
    "text": "line was CPU so I started the benchmark I'm basically at zero right so I'm not doing anything as soon as I connect and",
    "start": "4260310",
    "end": "4266610"
  },
  {
    "text": "start pushing we see right and then I continued to increase the benchmark so it continued to ask for",
    "start": "4266610",
    "end": "4272370"
  },
  {
    "text": "more and more CPU and we just kept scaling up right till we got to the largest size that I capped it at 64",
    "start": "4272370",
    "end": "4278520"
  },
  {
    "text": "units and you can go all the way up to 256 units ie the largest blocks we have like an hour for 16 Excel and then",
    "start": "4278520",
    "end": "4285090"
  },
  {
    "text": "basically I ramped the same benchmark down and it scaled back down and then I stopped it and guess what my instance",
    "start": "4285090",
    "end": "4291750"
  },
  {
    "text": "went away right so this is really useful as a tool for lots of different ones especially for a lot of people who do",
    "start": "4291750",
    "end": "4298530"
  },
  {
    "text": "IOT based stuff where it's completely in predictable demand this is a great great solution so this is all great people say",
    "start": "4298530",
    "end": "4306030"
  },
  {
    "text": "or I like it how do I get to it well so that's migration right so there's four",
    "start": "4306030",
    "end": "4311580"
  },
  {
    "text": "primary methods to come in if you're on Postgres one of the things you can do is pg dump restore I'm not going to talk",
    "start": "4311580",
    "end": "4316680"
  },
  {
    "text": "about that in great detail because most people are pretty familiar with those data migration service I'll cover",
    "start": "4316680",
    "end": "4321690"
  },
  {
    "text": "snapshot import was our initial implementation for moving from RDS Postgres but I'm gonna really talk about",
    "start": "4321690",
    "end": "4327540"
  },
  {
    "text": "the read replica model because I think it's a superior method for moving in so DMS is a really cool tool I was so",
    "start": "4327540",
    "end": "4334500"
  },
  {
    "text": "excited when we built this we had a lot of customers talk to us about moving from either one database the same you",
    "start": "4334500",
    "end": "4340530"
  },
  {
    "text": "know moving from Postgres to Postgres but in a lot of cases customers wanted to move from oracle or sequel server to Postgres right so any of these engines",
    "start": "4340530",
    "end": "4348060"
  },
  {
    "text": "are supported on the left there and all you do is you fire up a Postgres instance and or or Postgres instance and",
    "start": "4348060",
    "end": "4353880"
  },
  {
    "text": "then you fire up a DMS instance and you configure DMS and you tell it go connect",
    "start": "4353880",
    "end": "4359070"
  },
  {
    "text": "to this database figure out what things to you know pull from it and once you do that it will basically do a consistent",
    "start": "4359070",
    "end": "4366000"
  },
  {
    "text": "select where it does a full load right now this is fine but that takes quite a while to run right and so in the",
    "start": "4366000",
    "end": "4371760"
  },
  {
    "text": "meantime your application is still doing stuff that's the magic of logical replication and DMS is it uses the",
    "start": "4371760",
    "end": "4378210"
  },
  {
    "text": "change data capture and all these engines to basically allow you to catch back up from when you started that copy",
    "start": "4378210",
    "end": "4383580"
  },
  {
    "text": "right so then your database gets to the same state as on both sides so once it's",
    "start": "4383580",
    "end": "4388860"
  },
  {
    "text": "essentially caught up you stop the application and you started on the other",
    "start": "4388860",
    "end": "4393930"
  },
  {
    "text": "side right and this is a great way to migrate in especially if you're coming from a different engine on the other",
    "start": "4393930",
    "end": "4399540"
  },
  {
    "text": "hand if you're in RDS there's a easier way if you're an RTS Postgres you have your application you already has",
    "start": "4399540",
    "end": "4404929"
  },
  {
    "text": "Postgres instance you basically asked us to do a migration or be in a reed",
    "start": "4404929",
    "end": "4410300"
  },
  {
    "text": "replica in aurora we take a snapshot then we have to do some conversion to",
    "start": "4410300",
    "end": "4415460"
  },
  {
    "text": "make it into aurora so that's what happens there and once that's done you know that takes a tiny bit of time tiny",
    "start": "4415460",
    "end": "4421340"
  },
  {
    "text": "bit of time a little bit of time but you again have done more transactions right so we actually make it a reed replica so",
    "start": "4421340",
    "end": "4427610"
  },
  {
    "text": "it catches up via a synchronous wall replication just like a normal Postgres instance so at this point it's just like",
    "start": "4427610",
    "end": "4433969"
  },
  {
    "text": "you have a normal reed replica just happens to be Aurora right so you can keep running it for a while you can choose when to migrate but once it's all",
    "start": "4433969",
    "end": "4441020"
  },
  {
    "text": "caught up you essentially need to just stop your application let the last bit of wall flow through the system right and then you can stop the replication",
    "start": "4441020",
    "end": "4448760"
  },
  {
    "text": "and promote the aurora Postgres instance right so we've had people do this migration in a couple minutes from RDS",
    "start": "4448760",
    "end": "4455300"
  },
  {
    "text": "Postgres so this is really nice if you want to move from RDS Postgres to aurora Postgres yeah and so that's how you can",
    "start": "4455300",
    "end": "4462949"
  },
  {
    "text": "get into Aurora as a note we have some more breakouts on these subjects the",
    "start": "4462949",
    "end": "4469460"
  },
  {
    "text": "first one obviously Tuesday that one's already gone by tomorrow we have a talk by some of my colleagues on RDS Postgres",
    "start": "4469460",
    "end": "4477409"
  },
  {
    "text": "and sort of Postgres in the AWS universe it's gonna talk more about Identity and Access Management and some of the other",
    "start": "4477409",
    "end": "4482960"
  },
  {
    "text": "features we've done across both engines and then my colleague David who's",
    "start": "4482960",
    "end": "4488210"
  },
  {
    "text": "sitting here in the front he's going to be with another one of my colleagues Jim doing a deep dive on performance on",
    "start": "4488210",
    "end": "4493869"
  },
  {
    "text": "Thursday in Oriya so with that thank you very much",
    "start": "4493869",
    "end": "4499210"
  },
  {
    "text": "[Applause]",
    "start": "4499210",
    "end": "4502539"
  },
  {
    "text": "I'll happy to take some questions off to the side now and the other thing is if",
    "start": "4507809",
    "end": "4514000"
  },
  {
    "text": "you have any other general RTS questions we have people down at the booth all all-conference long so we have lots of",
    "start": "4514000",
    "end": "4520270"
  },
  {
    "text": "engineers there so if you have other questions you can come down there and talk to us there",
    "start": "4520270",
    "end": "4525300"
  }
]