[
  {
    "start": "0",
    "end": "23000"
  },
  {
    "text": "in this video you'll see how to query",
    "start": "80",
    "end": "2120"
  },
  {
    "text": "Amazon cloudwatch logs and metrics using",
    "start": "2120",
    "end": "4520"
  },
  {
    "text": "natural",
    "start": "4520",
    "end": "5480"
  },
  {
    "text": "language with the query generator",
    "start": "5480",
    "end": "7640"
  },
  {
    "text": "feature powered by Amazon Bedrock",
    "start": "7640",
    "end": "9719"
  },
  {
    "text": "generative AI you can compose queries",
    "start": "9719",
    "end": "12519"
  },
  {
    "text": "with natural language making data",
    "start": "12519",
    "end": "14599"
  },
  {
    "text": "analysis accessible to more users and",
    "start": "14599",
    "end": "17160"
  },
  {
    "text": "allowing expert users to write and",
    "start": "17160",
    "end": "19160"
  },
  {
    "text": "refine more advanced queries with less",
    "start": "19160",
    "end": "23279"
  },
  {
    "start": "23000",
    "end": "59000"
  },
  {
    "text": "effort this is the Amazon cloudwatch",
    "start": "23279",
    "end": "25720"
  },
  {
    "text": "console we'll begin in logs",
    "start": "25720",
    "end": "28320"
  },
  {
    "text": "insights from here we can create a new",
    "start": "28320",
    "end": "31199"
  },
  {
    "text": "query to search and analyze our log data",
    "start": "31199",
    "end": "35000"
  },
  {
    "text": "first we'll select the time range for",
    "start": "35000",
    "end": "37360"
  },
  {
    "text": "the query and the log groups we'd like",
    "start": "37360",
    "end": "39239"
  },
  {
    "text": "to query",
    "start": "39239",
    "end": "40360"
  },
  {
    "text": "from next we'll open the query",
    "start": "40360",
    "end": "43480"
  },
  {
    "text": "generator we can adjust our query",
    "start": "43480",
    "end": "45640"
  },
  {
    "text": "preferences by selecting the gear",
    "start": "45640",
    "end": "48199"
  },
  {
    "text": "icon here we can choose to include our",
    "start": "48199",
    "end": "50640"
  },
  {
    "text": "original prompt as a comment in the",
    "start": "50640",
    "end": "52440"
  },
  {
    "text": "generated query as well as a line by",
    "start": "52440",
    "end": "54840"
  },
  {
    "text": "line explanation of what the query is",
    "start": "54840",
    "end": "58600"
  },
  {
    "text": "doing now we can use natural language to",
    "start": "58600",
    "end": "61440"
  },
  {
    "start": "59000",
    "end": "85000"
  },
  {
    "text": "type a description of the insights we're",
    "start": "61440",
    "end": "63079"
  },
  {
    "text": "looking for or simply ask a question and",
    "start": "63079",
    "end": "65760"
  },
  {
    "text": "then generate a new",
    "start": "65760",
    "end": "67439"
  },
  {
    "text": "query let's generate the",
    "start": "67439",
    "end": "70720"
  },
  {
    "text": "query next let's run the",
    "start": "70720",
    "end": "74479"
  },
  {
    "text": "query we can just as easily update a",
    "start": "75880",
    "end": "78240"
  },
  {
    "text": "query let's modify this query to show",
    "start": "78240",
    "end": "80720"
  },
  {
    "text": "the average memory",
    "start": "80720",
    "end": "83560"
  },
  {
    "start": "85000",
    "end": "112000"
  },
  {
    "text": "usage the query is now updated to",
    "start": "85000",
    "end": "87320"
  },
  {
    "text": "include the additional request to leave",
    "start": "87320",
    "end": "89920"
  },
  {
    "text": "feedback click the thumbs up or thumbs",
    "start": "89920",
    "end": "92000"
  },
  {
    "text": "down",
    "start": "92000",
    "end": "93000"
  },
  {
    "text": "buttons next let's look at metrics",
    "start": "93000",
    "end": "95960"
  },
  {
    "text": "insights with metrics insights we can",
    "start": "95960",
    "end": "98399"
  },
  {
    "text": "query Cloud watch metrics at scale from",
    "start": "98399",
    "end": "101320"
  },
  {
    "text": "the query tab switch to editor",
    "start": "101320",
    "end": "103759"
  },
  {
    "text": "mode like logs insights metrics insights",
    "start": "103759",
    "end": "106759"
  },
  {
    "text": "includes a query",
    "start": "106759",
    "end": "109600"
  },
  {
    "text": "generator let's generate a query that",
    "start": "111799",
    "end": "114040"
  },
  {
    "start": "112000",
    "end": "145000"
  },
  {
    "text": "shows which of our Dynamo DB tables have",
    "start": "114040",
    "end": "116320"
  },
  {
    "text": "consumed the highest read capacity",
    "start": "116320",
    "end": "118840"
  },
  {
    "text": "units a query is generated with the",
    "start": "118840",
    "end": "121240"
  },
  {
    "text": "correct metric name space and dimension",
    "start": "121240",
    "end": "123840"
  },
  {
    "text": "as with logs insights we can easily",
    "start": "123840",
    "end": "125759"
  },
  {
    "text": "update the query using natural language",
    "start": "125759",
    "end": "127799"
  },
  {
    "text": "if",
    "start": "127799",
    "end": "130000"
  },
  {
    "text": "needed you've just seen how to query",
    "start": "130239",
    "end": "132599"
  },
  {
    "text": "Amazon cloudwatch logs and metrics using",
    "start": "132599",
    "end": "135000"
  },
  {
    "text": "natural",
    "start": "135000",
    "end": "136239"
  },
  {
    "text": "language you can learn more about this",
    "start": "136239",
    "end": "138519"
  },
  {
    "text": "topic in the description and links for",
    "start": "138519",
    "end": "140160"
  },
  {
    "text": "this",
    "start": "140160",
    "end": "140879"
  },
  {
    "text": "video thanks for watching now it's your",
    "start": "140879",
    "end": "143599"
  },
  {
    "text": "turn to",
    "start": "143599",
    "end": "144959"
  },
  {
    "text": "try",
    "start": "144959",
    "end": "147959"
  }
]