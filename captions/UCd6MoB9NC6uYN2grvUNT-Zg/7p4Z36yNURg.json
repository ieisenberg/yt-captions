[
  {
    "start": "0",
    "end": "178000"
  },
  {
    "text": "Thank you everyone thank you for coming\nthis morning so my name is Leo Jadhavski",
    "start": "650",
    "end": "7859"
  },
  {
    "text": "I'm a principal Solutions Architect\nat AWS and my day job is to help our",
    "start": "7859",
    "end": "14759"
  },
  {
    "text": "customers implement whatever it is they\nwant to involve into the cloud sometimes it's moving new apps to the cloud\nsometimes it's moving existing apps",
    "start": "14759",
    "end": "23849"
  },
  {
    "text": "sometimes it's optimizing what they\nalready have in the cloud. Anyway what I'm going to talk to you about today is\nbest practices for continuous",
    "start": "23850",
    "end": "33390"
  },
  {
    "text": "integration and continuous deployment and\ndelivery for building modern",
    "start": "33390",
    "end": "39870"
  },
  {
    "text": "applications we'll talk about what we\ndefine as modern applications here and so the agenda for today's talk is we are\ngoing to cover and a foundational",
    "start": "39870",
    "end": "51030"
  },
  {
    "text": "knowledge about CI/CD like how do we\ndefine CI how do we define C D and then",
    "start": "51030",
    "end": "56579"
  },
  {
    "text": "also again how do we define modern\napplications it looks like the slides aren't one on\none second this looks like what's on",
    "start": "56579",
    "end": "65580"
  },
  {
    "text": "there isn't what's on my screen. let's\njust fix the technical difficulty here",
    "start": "65580",
    "end": "74330"
  },
  {
    "text": "one second.",
    "start": "79619",
    "end": "83030"
  },
  {
    "text": "Yep that's my laptop well so it's\nnow be a good time so I'm also going to",
    "start": "88200",
    "end": "94590"
  },
  {
    "text": "be showing you a demo today so I will\nshow you two different pipelines so I'll",
    "start": "94590",
    "end": "101159"
  },
  {
    "text": "show you how to deploy code from \ngit going into a lambda function that's",
    "start": "101159",
    "end": "109740"
  },
  {
    "text": "behind an API gateway and then I'll show\nyou how to deploy code using KS alright.",
    "start": "109740",
    "end": "123479"
  },
  {
    "text": "I think we're still on the wrong slide\nhere so it's all wait a minute so we get",
    "start": "123479",
    "end": "129298"
  },
  {
    "text": "that sorted out.",
    "start": "129299",
    "end": "131899"
  },
  {
    "text": "Let's just there we go okay now it's\nworking all right here we go so anyway so we're gonna cover CI CD\nfoundations and CI CD for modern",
    "start": "145440",
    "end": "157050"
  },
  {
    "text": "applications and then we're gonna cover\nwe're in topic continuous integration continuous deployment and\ninfrastructures code and what that means",
    "start": "157050",
    "end": "166079"
  },
  {
    "text": "in terms of best practices and which HBO\nservices you'd use to do any of those things so let's talk about foundations\nfirst. So we've got our release stage",
    "start": "166080",
    "end": "182580"
  },
  {
    "start": "178000",
    "end": "178000"
  },
  {
    "text": "processes right so these are the\ndifferent processes toward getting our code from source code to production so\nfor the source stage you've got your",
    "start": "182580",
    "end": "191850"
  },
  {
    "text": "actual code that you're working on\nyou're building your code and hopefully",
    "start": "191850",
    "end": "197040"
  },
  {
    "text": "this last time that your developers see\nthe code until it's in production so",
    "start": "197040",
    "end": "202079"
  },
  {
    "text": "developer is writing the code they're\ndoing their peer review then you've got",
    "start": "202080",
    "end": "207330"
  },
  {
    "text": "the build stage. So in the build stage\nyou're compiling the code or ideally there's an automated process that's\ncompiling the code you're doing your",
    "start": "207330",
    "end": "215819"
  },
  {
    "text": "unit tests your style tests and you're\ncreating your artifacts now so those artifacts could be container images they\ncould be lambda function deployment",
    "start": "215820",
    "end": "226830"
  },
  {
    "text": "packages they could be Amazon machine\nimages they could be our PM's Debian",
    "start": "226830",
    "end": "232650"
  },
  {
    "text": "packages a zip files whatever it is that\nyou're actually deploying in your app you're doing that in the build stage. And\nyou've got the test stage so you do some",
    "start": "232650",
    "end": "242150"
  },
  {
    "text": "simple tests like style tests and units\nhas some a built stage but in the test stage you do integration tests with\nother systems that your apps interact",
    "start": "242150",
    "end": "250590"
  },
  {
    "text": "with you're doing load testing you're\ndoing UI testing you're doing security testing and traditionally some of those\ntestings then after you've already",
    "start": "250590",
    "end": "259019"
  },
  {
    "text": "deployed the app, but if you've got an\nautomated CICD process you can actually do all this testing before your app ever\ngets deployed to production so you can",
    "start": "259020",
    "end": "268590"
  },
  {
    "text": "catch any security errors and the UI\nbugs any issues with your app being slow",
    "start": "268590",
    "end": "273870"
  },
  {
    "text": "under load before your app gets to\nproduction. And ultimately giving up production so\nthis is where you deploy to production",
    "start": "273870",
    "end": "280948"
  },
  {
    "text": "environments. Ideally you know before you\nget to the production environments you're deploying to a staging\nenvironment a testing environment and if",
    "start": "280949",
    "end": "288599"
  },
  {
    "text": "any issues are spotted you stop the\ndeployment before it gets to production and so after your code is deployed to\nproduction you also then monitor the",
    "start": "288599",
    "end": "300630"
  },
  {
    "text": "code to quickly detect the errors so\nthere's some regression that's introduced you stop it there so how does\nhow does CI and CD come to this so",
    "start": "300630",
    "end": "315150"
  },
  {
    "text": "you've got continuous integration and\nthat covers the source and the bill stages so with continuous integration\nyou've got your source code and git or",
    "start": "315150",
    "end": "325050"
  },
  {
    "text": "in some kind of a you know version\ncontrol system and then anytime there's",
    "start": "325050",
    "end": "331379"
  },
  {
    "text": "a change to branch like the mainline\nbranch and your get Reaper let's say you",
    "start": "331380",
    "end": "336900"
  },
  {
    "text": "automatically start a build and you see\nif that code is actually buildable. You see if it there's any errors during the\nbuild and if everything goes well you",
    "start": "336900",
    "end": "345449"
  },
  {
    "text": "now have an artifact that's ready for\ndeployment. With continuous delivery that",
    "start": "345449",
    "end": "350669"
  },
  {
    "text": "means that you've got an automated\nprocess that takes you all the way through all these stages so your source\ncode is automatically built then you've",
    "start": "350669",
    "end": "357750"
  },
  {
    "text": "got automated tests that are run and\nthen it goes to production. Now with automated delivery or\ncontinuous delivery you still have a",
    "start": "357750",
    "end": "364860"
  },
  {
    "text": "manual step typically before you get to\nproduction so everything is automated but there's a manual approval step so\nsomebody has to come in and do a review",
    "start": "364860",
    "end": "373080"
  },
  {
    "text": "and make sure okay this deployment makes\nsense I'm okay with these changes going to production and then if you've got\ncontinuous deployment that's when you",
    "start": "373080",
    "end": "381300"
  },
  {
    "text": "don't have a manual approval step that's\nwhen everything just goes to production automatically, but most of the customers\nI talk to when they want to implement",
    "start": "381300",
    "end": "388490"
  },
  {
    "text": "automation or CI/CD or you know DevOps\nwhat they really are going for is",
    "start": "388490",
    "end": "394638"
  },
  {
    "text": "continuous delivery. And then again\ncontinues deployment is full automation.",
    "start": "394639",
    "end": "399659"
  },
  {
    "text": "So you've got these three different\nprocesses and let's see how AWS",
    "start": "399659",
    "end": "407099"
  },
  {
    "text": "services map to those\nso for managing your source code or",
    "start": "407099",
    "end": "413050"
  },
  {
    "text": "version control system we've got AWS code commit and so code commit is",
    "start": "413050",
    "end": "418120"
  },
  {
    "text": "a managed git service and by the way all\nthese services I'm mentioning here they",
    "start": "418120",
    "end": "423699"
  },
  {
    "text": "all exist in the Montreal region so you\ncan use them you know locally you don't",
    "start": "423700",
    "end": "429160"
  },
  {
    "text": "have to put your data anywhere else\noutside of Canada and code for build",
    "start": "429160",
    "end": "434380"
  },
  {
    "text": "we've got a service called code build\nwhich allows you to build and test your code and for doing integration tests and\nUI tests and some security tests you can",
    "start": "434380",
    "end": "446110"
  },
  {
    "text": "use code build for some that stuff and\nfor other things I just recommend using open source third-party tools for that\nand for deployment we've got AWS code",
    "start": "446110",
    "end": "457419"
  },
  {
    "text": "deploy so could deploy allows you to\ndeploy your code and we'll cover these services and in greater detail in a\nsecond here we also got a bunch of other",
    "start": "457420",
    "end": "464680"
  },
  {
    "text": "deployment services so elastic Beanstalk\nand opsworks but the ones we're really",
    "start": "464680",
    "end": "469840"
  },
  {
    "text": "going to cover today are these services.\nSo then we've got a code pipeline and what coupe pipeline does is it\norchestrates your code moving between",
    "start": "469840",
    "end": "479080"
  },
  {
    "text": "all these different steps some stages\nright so it'll pick up when your code changes and then it'll trigger a build\nand little trigger test and then it'll",
    "start": "479080",
    "end": "487539"
  },
  {
    "text": "trigger deploys until your codes in\nproduction and how it does that and what tools it uses and what the order is\nthat's all configurable by you. And then",
    "start": "487540",
    "end": "497349"
  },
  {
    "text": "if you you know want to just get started\nand try these services and you don't",
    "start": "497350",
    "end": "502930"
  },
  {
    "text": "want to you know have to manually\nconfigure all them you can use AWS code star so the way that code star\nworks is it has a bunch of pre-built",
    "start": "502930",
    "end": "511510"
  },
  {
    "text": "templates so let's say you want to build\na Python based application and you want to deploy it as like a service function\nin code star you can click on the",
    "start": "511510",
    "end": "520690"
  },
  {
    "text": "template for that and it spins up some\ncombination of the services on this slide and within five minutes you have a\nfully baked see ACD pipeline and you can",
    "start": "520690",
    "end": "531040"
  },
  {
    "text": "modify the code and it gives you a wiki\ntile and a JIRA integration and it",
    "start": "531040",
    "end": "536709"
  },
  {
    "text": "visualizes all your what's going on with\nyour code",
    "start": "536710",
    "end": "541810"
  },
  {
    "text": "so it's a really great service for\ngetting started. So now that we've defined the basics here let's talk about\nwhat a modern application is so the",
    "start": "541810",
    "end": "554740"
  },
  {
    "start": "553000",
    "end": "553000"
  },
  {
    "text": "goals of a modern application is you\nwant to accelerate the delivery of new",
    "start": "554740",
    "end": "559930"
  },
  {
    "text": "high-quality services so you want\naccelerating delivery meaning reduce the",
    "start": "559930",
    "end": "565180"
  },
  {
    "text": "time it takes for code from being\nwritten by developers to going to",
    "start": "565180",
    "end": "570220"
  },
  {
    "text": "production and doing all kinds of\nautomated testing and validation in between you want to simplify your\nenvironment management so you want to",
    "start": "570220",
    "end": "581220"
  },
  {
    "text": "have a repeatable environment well no\nmatter whether they're in dev or staging",
    "start": "581220",
    "end": "587019"
  },
  {
    "text": "or production and you want to reduce the\nimpact of code changes so you change some code there's a bunch of tests that\nare run that you know minimize risk and",
    "start": "587019",
    "end": "596740"
  },
  {
    "text": "pick up errors before they get to\nproduction and so you want to be able to have an environment where doing a\ndeployment changing code adding a",
    "start": "596740",
    "end": "605649"
  },
  {
    "text": "feature isn't something that's scary\nright so you can if there's a failure you can fail fast you can roll back and\nit increases innovation in general",
    "start": "605649",
    "end": "616389"
  },
  {
    "text": "because once you're not afraid of change\nonce you're not afraid of you know introducing a failure you can deploy\nreally quickly you can deliver new",
    "start": "616389",
    "end": "623740"
  },
  {
    "text": "features to your customers very quickly.\nAnd automating operations so by reducing",
    "start": "623740",
    "end": "630160"
  },
  {
    "text": "the amount of manual operations in the\ndeployment of an application you're reducing risk so whenever humans have to\ndo something like to play some code or",
    "start": "630160",
    "end": "639490"
  },
  {
    "text": "trigger a test there's always a room for\nerror someone's gonna make a typo or you",
    "start": "639490",
    "end": "644800"
  },
  {
    "text": "know people are tired they're gonna run\na command on the wrong environment so so",
    "start": "644800",
    "end": "649920"
  },
  {
    "text": "CI CDs really in DevOps and generals are\ngood forcing functions for automation so",
    "start": "649920",
    "end": "655389"
  },
  {
    "text": "nothing should really be manual in what\nI described here except you know big if you have main approvals somebody has to\ngo in and ahead approve and even that's",
    "start": "655389",
    "end": "662769"
  },
  {
    "text": "just hitting a big button after you\nreview the code that's it and you want to be able to gain insight from your\nresources and applications you want to",
    "start": "662769",
    "end": "670120"
  },
  {
    "text": "have really good monitoring and excuse me you you want to be able to see\nafter your codes running you want to be",
    "start": "670120",
    "end": "680120"
  },
  {
    "text": "able to see is this application\nperforming to what it needs to do are my",
    "start": "680120",
    "end": "685400"
  },
  {
    "text": "customers satisfied with it and so\nlastly you want to protect your business and and your customers from outages from\nbad performance from security issues so",
    "start": "685400",
    "end": "697130"
  },
  {
    "text": "how do you do all this stuff well to\naccelerate delivery of your application",
    "start": "697130",
    "end": "704530"
  },
  {
    "text": "that's what I use CI CD for you can\nsimplify your environment management",
    "start": "704530",
    "end": "710450"
  },
  {
    "text": "with serverless technologies so that\nallows you to not have to manage instances clusters all these kind of\nlow-level details that you probably",
    "start": "710450",
    "end": "720740"
  },
  {
    "text": "don't want to be in the business of\nmanaging and you also want to reduce the",
    "start": "720740",
    "end": "726200"
  },
  {
    "text": "impact of your code changes with micro\nservice architectures so when you break your big monolithic applications down to\nmicro services that means that each time",
    "start": "726200",
    "end": "734870"
  },
  {
    "text": "you make a change you're making change\nto a very small piece of the whole application so if that breaks you're\nbreaking a small piece of your",
    "start": "734870",
    "end": "742010"
  },
  {
    "text": "application you can roll back really\nquickly because your changes are a lot less complicated then if you have a big\nmonolithic application that you're",
    "start": "742010",
    "end": "748760"
  },
  {
    "text": "updating like you know four times a year.\nYou can automate your operations by",
    "start": "748760",
    "end": "754300"
  },
  {
    "text": "modeling applications and infrastructure\ncode so infrastructures code will talk",
    "start": "754300",
    "end": "759890"
  },
  {
    "text": "about that as confirmation can help you\nthere and you can gain insights across",
    "start": "759890",
    "end": "765020"
  },
  {
    "text": "your applications by nailing\nobservability you can do things like cloud watch club watch vlogs and lastly\nyou can protect your customers in your",
    "start": "765020",
    "end": "773420"
  },
  {
    "text": "business with end-to-end security so you\ncan introduce security into your CI CD pipelines and you can those ensures\ncompliance there so if you have to meet",
    "start": "773420",
    "end": "780680"
  },
  {
    "text": "some compliance standard like PCI or in\nthe US Fed Rams pretty common you can",
    "start": "780680",
    "end": "788390"
  },
  {
    "text": "you know kind of make sure you're\nhitting all the check marks there as part of your CI CD process so let's talk\nabout CIC so why do we care about CCD",
    "start": "788390",
    "end": "800720"
  },
  {
    "text": "why is it important well according to\nthe 2018 stead state of the DevOps report\nsee ICD allows you to increase your",
    "start": "800720",
    "end": "809879"
  },
  {
    "text": "deployment frequency from weekly or\nmonthly to hourly or daily so you can be",
    "start": "809879",
    "end": "815970"
  },
  {
    "text": "doing new deploys earlier daily you can\nchange your lead time so the time that it takes from the code to get from being\ncooked to being in production from one",
    "start": "815970",
    "end": "825389"
  },
  {
    "text": "to six months to one to seven days and\nyou can change your failure rate so the",
    "start": "825389",
    "end": "832769"
  },
  {
    "text": "rate of failures of deployments it can\ngo from forty six to sixty percent to zero to fifteen percent and this is\nsomething that's not like this pipe",
    "start": "832769",
    "end": "840420"
  },
  {
    "text": "dream right like according to a survey\n48% of teams that implement that see ICD",
    "start": "840420",
    "end": "845878"
  },
  {
    "text": "were able to see these results in terms\nof the failure rate so there's actually",
    "start": "845879",
    "end": "851519"
  },
  {
    "text": "a really good story about how Amazon\ninternally did this over the years so if you want to go that just Google Amazon\nto pizza teams there's a bunch of",
    "start": "851519",
    "end": "859740"
  },
  {
    "text": "presentations on YouTube on Amazon's\nstory with implementing CI CD so let's",
    "start": "859740",
    "end": "865589"
  },
  {
    "text": "talk about the three pillars of modern\napplications we've got continuous integration and change deployment and\ninfrastructure as code so let's talk",
    "start": "865589",
    "end": "876269"
  },
  {
    "text": "about continuous integration first so\ncontinuous integration again is the",
    "start": "876269",
    "end": "882180"
  },
  {
    "start": "879000",
    "end": "879000"
  },
  {
    "text": "source and build phases of your software\nlifecycle and so the way the continuous",
    "start": "882180",
    "end": "889980"
  },
  {
    "text": "irrigation works is you automatically\nkick off on your release when new code is checked in ideally like this is\nkicked off on some kind of mainline",
    "start": "889980",
    "end": "898769"
  },
  {
    "text": "branch you've got so you know basically\nwhat happens typically is the developers",
    "start": "898769",
    "end": "904438"
  },
  {
    "text": "working on git they have their own\nfeature branch that they check out when they're ready they do a pull request\nback into the mainline branch that pull",
    "start": "904439",
    "end": "912808"
  },
  {
    "text": "request has merged that trigger is your\npipeline and you'll see if that code can then be built. So the code is built in a\nconsistent repeatable environment. So the",
    "start": "912809",
    "end": "922949"
  },
  {
    "text": "build should be automated it should\nhappen the same exact way each time to reduce risk for air and at the end of\nthis process you either have an artifact",
    "start": "922949",
    "end": "931470"
  },
  {
    "text": "that's been built that's ready to be\ndeployed or you have a failure so some test failed some you know the syntax is\nwrong like something something caused",
    "start": "931470",
    "end": "939570"
  },
  {
    "text": "is built a fail and the developer\nimmediately knows that it failed and why it failed so they can go fix their code\nand try again",
    "start": "939570",
    "end": "946140"
  },
  {
    "text": "until everything passes so a service\nthat we have that can enable you to do",
    "start": "946140",
    "end": "954000"
  },
  {
    "text": "that is called a Tobias code pipeline so\ncode pipeline is a continuous delivery service it allows you to have fast and\nreliable application updates",
    "start": "954000",
    "end": "964110"
  },
  {
    "text": "it allows you to model and visualize\nyour software release process so you can see without lis what stage your code is\nin and I'll be demoing this at the end",
    "start": "964110",
    "end": "973800"
  },
  {
    "text": "of this talk but basically anytime\nthere's a code change it'll trigger builds tests deploys and it'll do it in\na consistent manner in the same exact",
    "start": "973800",
    "end": "983820"
  },
  {
    "text": "way every time there's a code change and\nthe dohsa integrates with both third-party tools and AWS so you can\ntrigger like a third-party lue test for",
    "start": "983820",
    "end": "992430"
  },
  {
    "text": "example you can integrate it with\nJenkins either one that you manage or that's managed by one of our partners\nlike cloudBees so it's a really flexible",
    "start": "992430",
    "end": "1001370"
  },
  {
    "text": "tool it doesn't tell you like how you\nknow you need to do stuff or what tools",
    "start": "1001370",
    "end": "1006529"
  },
  {
    "text": "you need to do it just enables you to do\nthem so in terms of supportive sources so for code pipeline\nit supports code commit as the source so",
    "start": "1006530",
    "end": "1016970"
  },
  {
    "start": "1010000",
    "end": "1010000"
  },
  {
    "text": "that triggers the pipeline to be run and\nit supports github it also supports objects in S3 so if\nyou've got something you're keeping your",
    "start": "1016970",
    "end": "1025640"
  },
  {
    "text": "code and something that's not get a hub\nor it could commit like let's say get lab what you can do is you can set up a\nweb hook that with hook triggers a",
    "start": "1025640",
    "end": "1035030"
  },
  {
    "text": "lambda function that lambda function\npulls out your latest commit puts it in an S3 bucket and that'll trigger your\npipeline so you can really integrate any",
    "start": "1035030",
    "end": "1042050"
  },
  {
    "text": "tool to trigger your pipelines and code\npipeline and something that's relatively",
    "start": "1042050",
    "end": "1048199"
  },
  {
    "text": "new we announced that reinvent back in\nNovember is Code pipeline now also can use our elastic container registry as a\npipeline source so if you've got a",
    "start": "1048199",
    "end": "1056809"
  },
  {
    "text": "pipeline that builds your docker\ncontainers and puts them in ECR that can then trigger another pipeline that now\nthen deploys that container from ECR as",
    "start": "1056810",
    "end": "1066080"
  },
  {
    "text": "soon as it gets dropped in there so you\ncan monitor a certain container tag and as soon as there's a new container in\nthe repo with that tag",
    "start": "1066080",
    "end": "1073010"
  },
  {
    "text": "that'll trigger a deploy so now you can\nhave various git repositories and",
    "start": "1073010",
    "end": "1079940"
  },
  {
    "text": "branches of them as a source you're\ngoing to have objects in S3 and you can have a show container images as a source\nthat kicks off your pipeline so in terms",
    "start": "1079940",
    "end": "1091669"
  },
  {
    "start": "1090000",
    "end": "1090000"
  },
  {
    "text": "of deployment targets all kinds of\ntargets are supported here in terms of ec2 you can use code deploy to deploy\nthat you see two instances you can use",
    "start": "1091670",
    "end": "1101030"
  },
  {
    "text": "elastic Beanstalk you can use opsworks\ntax in terms of containers you can again",
    "start": "1101030",
    "end": "1107180"
  },
  {
    "text": "use code deploy to deploy to an ECS\ncluster you can deploy to ECS clusters directly and you're gonna have to do\nBluegreen deploys with ECS as well as",
    "start": "1107180",
    "end": "1118280"
  },
  {
    "text": "Fargate so if you've got an ECA it's\nforget cluster you can use cope pipeline to deploy to that and if you are\ndeploying serverless functions so lambda",
    "start": "1118280",
    "end": "1126890"
  },
  {
    "text": "you can use code deploy you can use\ncloud formation using the service application model and you can just go to\nthe lambda directly and i'll give you a",
    "start": "1126890",
    "end": "1136850"
  },
  {
    "text": "demo of some of these later on so the\nway that the ECR source action works is",
    "start": "1136850",
    "end": "1142660"
  },
  {
    "start": "1140000",
    "end": "1140000"
  },
  {
    "text": "you've either got your source code in a\ngit repo and that triggers a build",
    "start": "1142660",
    "end": "1148760"
  },
  {
    "text": "branch with code build and code pipeline\nand then the bill branch is then going to build that docker container and put\nit in ECR or if you're handling you have",
    "start": "1148760",
    "end": "1158330"
  },
  {
    "text": "a separate pipeline for your EC r4 for\nyour docker container images once the",
    "start": "1158330",
    "end": "1164600"
  },
  {
    "text": "docker container image is in the ECR\nrepo vacuum then trigger a build stage the build stage can either you know run\nsome tests with the container or deploy",
    "start": "1164600",
    "end": "1175400"
  },
  {
    "text": "straight to something like you know uks\nor some kind of service or you can go",
    "start": "1175400",
    "end": "1180680"
  },
  {
    "text": "straight from ECR into deployment stages\nso it's pretty flexible so sometimes you",
    "start": "1180680",
    "end": "1188510"
  },
  {
    "text": "also want to trigger your deployments or\nyour pipelines not just based off of code being committed but off of you know\nwe want to do a nightly build so you can",
    "start": "1188510",
    "end": "1197780"
  },
  {
    "text": "do a scheduled\ncould pipeline build using cloud watch",
    "start": "1197780",
    "end": "1203440"
  },
  {
    "text": "events you can also do it based off of\nhealth events so if you're using far gate and you're far gate platform is\nbeing retired and being updated it'll it",
    "start": "1203440",
    "end": "1215559"
  },
  {
    "text": "can automatically redeploy your\ncontainers onto the new Fargate platform where that happens and you can also do\nweb hooks so if you've got docker hub or",
    "start": "1215559",
    "end": "1223600"
  },
  {
    "text": "clay or artifactory you can use a web\nhook in those to trigger your code pipeline to trigger or lease so now\nlet's talk about serverless technologies",
    "start": "1223600",
    "end": "1235330"
  },
  {
    "text": "and micro-service architectures so if\nyou don't want to manage you know you",
    "start": "1235330",
    "end": "1240518"
  },
  {
    "text": "see two instances or even you know\ntraditionally the way you're running CSS you have a bunch of ec2 instances you're\nin English's agent on them so you kind",
    "start": "1240519",
    "end": "1248679"
  },
  {
    "text": "of had to manage of the cluster there so\nif you don't want to do that you can use for gate so far gate is serverless\ncontainers so you define how you want",
    "start": "1248679",
    "end": "1257980"
  },
  {
    "text": "your tasks to look like what container\nimages they should have how many of them this should be and we run them for you\nin a cluster that we manage so you don't",
    "start": "1257980",
    "end": "1267730"
  },
  {
    "text": "have to manage the actual cluster that\nyour containers are running on so with Fargate it's tracks away the OS\nfor you I fully manages both at",
    "start": "1267730",
    "end": "1277179"
  },
  {
    "text": "orchestration and the cluster scaling so\nif you need to run a large amount of containers you don't have to worry about\nscaling up the under lying",
    "start": "1277179",
    "end": "1286450"
  },
  {
    "text": "ECS cluster and then for service\nfunctions we've got lambda so lambda is",
    "start": "1286450",
    "end": "1292539"
  },
  {
    "text": "event-driven so you can trigger your\nlambda functions to execute based off of API gateways or\nKinesis stream or objects being dropped",
    "start": "1292539",
    "end": "1303190"
  },
  {
    "text": "in tennis three bucket or a bunch of\nother event sources so basically with lambda you're you get charged only for\nexecution time right and that execution",
    "start": "1303190",
    "end": "1312700"
  },
  {
    "text": "time only happens when a certain event\nthat you define occurs and with lambda",
    "start": "1312700",
    "end": "1318429"
  },
  {
    "text": "you can also have many language runtimes\nso when lambda first came out it only",
    "start": "1318429",
    "end": "1324070"
  },
  {
    "text": "supported a few languages like nodejs\nand Java and Python and now you can actually bring\nyour own runtimes if you want to do a",
    "start": "1324070",
    "end": "1333630"
  },
  {
    "text": "lambda function and Erlang or Fortran or\nsome other language that it's not as",
    "start": "1333630",
    "end": "1340500"
  },
  {
    "text": "common for lambda you can actually do\nthat and also has shared layers so if",
    "start": "1340500",
    "end": "1345809"
  },
  {
    "text": "you want to have a layer with all your\npre-built libraries in it so you don't have to build them into your lambda\nfunction you can do that as well and so",
    "start": "1345809",
    "end": "1351900"
  },
  {
    "text": "with lambda you also don't have any\nservers to manage you just upload your code into lambda into the lambda\nfunction and it executed when it's",
    "start": "1351900",
    "end": "1360090"
  },
  {
    "text": "needed so you know a lot of\nundifferentiated heavy lifting there and so could build as a service that can\nhelp you build your both your lambda",
    "start": "1360090",
    "end": "1371159"
  },
  {
    "text": "functions and your containers so the way\nthe code build works is it's a fully",
    "start": "1371160",
    "end": "1376590"
  },
  {
    "text": "managed service it compiles source code\nit can run tests it can produce software packages and there's no build service to\nmanage so you trigger a code build job",
    "start": "1376590",
    "end": "1387690"
  },
  {
    "text": "it spins up a temporary docker container\nand that container then executes",
    "start": "1387690",
    "end": "1393809"
  },
  {
    "text": "whatever commands you tell it to execute\nand you get charged only for runtime and",
    "start": "1393809",
    "end": "1399210"
  },
  {
    "text": "so you pay by the minute only for what\nuse and you can monitor these bills through cloud watch events so you can\ntale the log and you can see hey is my",
    "start": "1399210",
    "end": "1407250"
  },
  {
    "text": "build working if it failed here's why it\nfailed and so again each build runs in a",
    "start": "1407250",
    "end": "1413669"
  },
  {
    "text": "new docker container so you get a\nconsistent environment that's the same for every build in terms of which\ncontainers are used for the actual build",
    "start": "1413669",
    "end": "1421080"
  },
  {
    "text": "you can use our containers that are\nthere by default and so you know if you",
    "start": "1421080",
    "end": "1426269"
  },
  {
    "text": "want kind of a clean environment you can\ndo that or you can bring your own docker containers so if you've got a build\nenvironment that's got a bunch of a",
    "start": "1426270",
    "end": "1431880"
  },
  {
    "text": "custom libraries you need to have just\nyou know tell it to spin up the hood",
    "start": "1431880",
    "end": "1437640"
  },
  {
    "text": "build project with your docker container\nand so this is what it actually looks",
    "start": "1437640",
    "end": "1443940"
  },
  {
    "text": "like when you configure code build so\nthis is a build spec file and so in this",
    "start": "1443940",
    "end": "1450149"
  },
  {
    "text": "case we're building a lambda function so\nwe're basically I tell it you get to run NPM CI and NPM tests and then we're\nusing a confirmation service application",
    "start": "1450150",
    "end": "1459570"
  },
  {
    "text": "model to package up\na CloudFormation template which will we",
    "start": "1459570",
    "end": "1466259"
  },
  {
    "text": "can then the next stage to deploy on\nwith CloudFormation and then we've got",
    "start": "1466260",
    "end": "1472409"
  },
  {
    "text": "if we're building a docker container\nthis is what could build a build spec file looks like so here we are logging\ninto our elastic container registry repo",
    "start": "1472409",
    "end": "1482460"
  },
  {
    "text": "we are building the docker container\nwe're tagging it and we're pushing it up to the repo and so just to summarize\nhere again with continuous integration",
    "start": "1482460",
    "end": "1493320"
  },
  {
    "text": "our goals are to automatically kick off\nfor at least whenever there's a new code that's checked in to make sure that that\ncode is built and tested in a consistent",
    "start": "1493320",
    "end": "1502679"
  },
  {
    "text": "repeatable way and to continually have\nan artifact either ready for deployment or to have a feedback loop when there\nare errors so now let's move on to",
    "start": "1502679",
    "end": "1512760"
  },
  {
    "text": "continuous deployment\nso again continuous deployment is the",
    "start": "1512760",
    "end": "1519179"
  },
  {
    "text": "process of going through all these\nphases with with automation so you want",
    "start": "1519179",
    "end": "1527370"
  },
  {
    "text": "to automatically deploy new changes to\nstaging environments for testing you want to then deploy to production\nwithout impacted customers and you want",
    "start": "1527370",
    "end": "1535049"
  },
  {
    "text": "to deliver your code to customers faster\nso you want to increase deployment frequency and reduce the change lead\ntime and the change failure rate from",
    "start": "1535049",
    "end": "1544830"
  },
  {
    "text": "new deployments so a service that can\nhelp you do this is a base code deployed",
    "start": "1544830",
    "end": "1550590"
  },
  {
    "text": "so could deploy can automate two\ndeployments to both any instance and",
    "start": "1550590",
    "end": "1556110"
  },
  {
    "text": "lambda functions as well as as well as\nECS clusters you can also actually use",
    "start": "1556110",
    "end": "1563158"
  },
  {
    "text": "code deploy to deploy to on-premise\ninstances or servers so if you've got an",
    "start": "1563159",
    "end": "1568799"
  },
  {
    "text": "on-premise server you can use code\ndeploy to deploy those as well it handles the complexity of updating your\napplication so for example if you're",
    "start": "1568799",
    "end": "1576778"
  },
  {
    "text": "deploying to an application that has an\ne lb or lb in front of it it can handle",
    "start": "1576779",
    "end": "1583950"
  },
  {
    "text": "like taking instances or tasks out of\nthe load balancer while those boys going",
    "start": "1583950",
    "end": "1589470"
  },
  {
    "text": "on double checking that they're healthy\nand then bringing them back in bouncer when there's a new version of\nthe code that's deployed so this allows",
    "start": "1589470",
    "end": "1596899"
  },
  {
    "text": "you to avoid downtime and have zero\ndowntime deploys and it also supports roll backs so if there's a failure it\ncan say oh I'm gonna roll back I'm gonna",
    "start": "1596899",
    "end": "1606049"
  },
  {
    "text": "go back to the code that I know works\nand read repoint the application to that code so again you're gonna have a zero\ndowntime deployment and you can deploy",
    "start": "1606049",
    "end": "1614090"
  },
  {
    "text": "to ec2 instances the lambda functions\non-premise servers to ECS as well so for",
    "start": "1614090",
    "end": "1621859"
  },
  {
    "start": "1620000",
    "end": "1620000"
  },
  {
    "text": "ec2 deployments this is how they're\nconfigured so this is a app spec file it",
    "start": "1621859",
    "end": "1628609"
  },
  {
    "text": "is a gamma file the first part of the\nfile just shows you what OS it's",
    "start": "1628609",
    "end": "1633950"
  },
  {
    "text": "deploying on so if you're doing ec2 it\nsupports Linux or Windows where to put the files how to change permissions on\nthe files in this case I'm changing all",
    "start": "1633950",
    "end": "1643729"
  },
  {
    "text": "my HTML files to be owned by root and to\nhave a siege mode of seven five five and",
    "start": "1643729",
    "end": "1649460"
  },
  {
    "text": "then there's the lifecycle hooks so life\nso Google hooks that's where you customize your deployment so there's\ndifferent life cycle stages like stop",
    "start": "1649460",
    "end": "1657138"
  },
  {
    "text": "the application before they install\nafter the install start the application validate the service and what happens\nduring those lifecycle hooks is",
    "start": "1657139",
    "end": "1665299"
  },
  {
    "text": "completely customizable by you so you\ncan you know for example you can write a",
    "start": "1665299",
    "end": "1672138"
  },
  {
    "text": "shell script that starts or stops your\napplication you can trigger your instable playbook any executable work so\nit's really it's it's really up to you",
    "start": "1672139",
    "end": "1681559"
  },
  {
    "text": "how how you can figure that and you can\nalso customize your deployment speed in",
    "start": "1681559",
    "end": "1687648"
  },
  {
    "text": "your deployment group so the if you're\ndeploying to you know a testing",
    "start": "1687649",
    "end": "1694399"
  },
  {
    "start": "1690000",
    "end": "1690000"
  },
  {
    "text": "environment you can just deploy to all\nyour instances at the same time it's not a big deal of that fails if you're\ndeploying to a production environment",
    "start": "1694399",
    "end": "1701749"
  },
  {
    "text": "you can do one instance at a time for\nexample so it'll stop and check between",
    "start": "1701749",
    "end": "1707210"
  },
  {
    "text": "every instance to make sure the\ndeployments successful and if it doesn't it'll roll back so you can kind of\ncustomize this depending on you know",
    "start": "1707210",
    "end": "1714049"
  },
  {
    "text": "your your appetite for risk in any given\ndeployment and you can also pick your",
    "start": "1714049",
    "end": "1719929"
  },
  {
    "text": "deployment groups so you can target\ndeployments either based on tags on your instances or\nbased on auto scaling group so if you've",
    "start": "1719929",
    "end": "1727940"
  },
  {
    "text": "got an auto scaling group you could have\nyou know a variable number of instances you could have two you could have 100\nyou can 1,000 all depends on how you've",
    "start": "1727940",
    "end": "1735440"
  },
  {
    "text": "configured your auto scaling group and\nso then I say about this is you don't have to figure out like what is in my\nauto scaling group right now you just",
    "start": "1735440",
    "end": "1742549"
  },
  {
    "text": "tell it I wanted to pull it to the\nspecific auto scaling group and who to play will figure out what that actually\nmeans so in terms of lambda deployments",
    "start": "1742549",
    "end": "1751309"
  },
  {
    "text": "the way that it works is it shifts\ntraffic to lambda functions using",
    "start": "1751309",
    "end": "1756620"
  },
  {
    "text": "weighted aliases so you've got a lambda\nfunction you put an alias in front of it so you\ncan call the alias like production for",
    "start": "1756620",
    "end": "1764360"
  },
  {
    "text": "example or live and when you do a\ndeployment with code deploy you can",
    "start": "1764360",
    "end": "1769759"
  },
  {
    "text": "either do a linear deployment or a\ncanary deployment so if you do a canary deployment it'll shift 10% of your\ntraffic to the new function that is",
    "start": "1769759",
    "end": "1778128"
  },
  {
    "text": "deploying for ten minutes and then it'll\nkeep validating that that 10% of traffic",
    "start": "1778129",
    "end": "1783320"
  },
  {
    "text": "is working and B lambda function is\nresponding as it should and then it",
    "start": "1783320",
    "end": "1789258"
  },
  {
    "text": "shifts the rest or if you choose linear\nthen it does 10% every ten minutes and",
    "start": "1789259",
    "end": "1796100"
  },
  {
    "text": "so it stops instead of 10% waiting and\nthen the rest of the 90% you rate validation hooks in lambda functions to\nenable testing during each stage of the",
    "start": "1796100",
    "end": "1804860"
  },
  {
    "text": "deployment so the validation hook you\ncan write it so for example like curl the lambda function and you check for\nthe expected results whether that's like",
    "start": "1804860",
    "end": "1814610"
  },
  {
    "text": "it 200 or some kind of text that it's\nexpecting it's up to you and if there's",
    "start": "1814610",
    "end": "1819648"
  },
  {
    "text": "a failure the rollback only takes\nseconds and you can monitor the deployment status and the history\nthrough the console through the api's",
    "start": "1819649",
    "end": "1827419"
  },
  {
    "text": "through SNS notifications and cloud\nwatch events so this is what a built",
    "start": "1827419",
    "end": "1836628"
  },
  {
    "text": "spec file looks like for a lambda\nfunction in this case we're saying we have a service function so this is\nactually in your sorry and not in your",
    "start": "1836629",
    "end": "1846830"
  },
  {
    "text": "bill spec but in your Sam template so\nyou're saying I want a canary deployment",
    "start": "1846830",
    "end": "1854450"
  },
  {
    "text": "for ten percent over ten minutes and if\nthere's an alarm",
    "start": "1854450",
    "end": "1859880"
  },
  {
    "text": "you reference your alarm and then you\ndefine what your actual hooks are here so the way this works is you've got a\nlambda function that lambda function is",
    "start": "1859880",
    "end": "1869330"
  },
  {
    "text": "behind an API gateway so the API\ngateways pointing traffic to that lambda function based on this live alias so\nbefore the deployment you've got a",
    "start": "1869330",
    "end": "1877970"
  },
  {
    "text": "hundred percent of the traffic going to\nthe lambda function your existing version of the lambda function code\nyou've triggered a deployment and so you",
    "start": "1877970",
    "end": "1887900"
  },
  {
    "text": "run a hook against a new code before it\nreceives traffic so that hook is successful so now you've shifted 10% of\nthe traffic to that new lambda function",
    "start": "1887900",
    "end": "1897110"
  },
  {
    "text": "and again this is all handled for you so\nyou just have to read the hooks and",
    "start": "1897110",
    "end": "1903130"
  },
  {
    "text": "assuming that works it will switch all\n100% of the traffic after 10 minutes to",
    "start": "1903130",
    "end": "1909590"
  },
  {
    "text": "this new version of your lambda function\nso code deploy also supports Bluegreen",
    "start": "1909590",
    "end": "1916179"
  },
  {
    "text": "deployments to both for gate and ECS so\nthe way that that works is you've got",
    "start": "1916180",
    "end": "1924290"
  },
  {
    "text": "your existing ECS tasks they're writing\nthey're running your code we can",
    "start": "1924290",
    "end": "1930080"
  },
  {
    "text": "consider the blue group right so they're\nrunning right now it's successful 100% of traffic is going into that those\ntasks when you do deployment it",
    "start": "1930080",
    "end": "1938809"
  },
  {
    "text": "provisions a new set of green tasks and\nthen it flips traffic of the load balancer again you've got validation\nhooks that check each stage of",
    "start": "1938810",
    "end": "1947270"
  },
  {
    "text": "deployment and if there's any kind of\nfailure you just roll back to your blue tasks so it doesn't terminate your blue\ntasks they're still there and so if",
    "start": "1947270",
    "end": "1955669"
  },
  {
    "text": "anything goes wrong it just switches\nback over to them so you've got you're minimizing your failure rate for your\ncustomers again you can monitor the",
    "start": "1955670",
    "end": "1963350"
  },
  {
    "text": "deployment through the console API SNS\nor cloud watch events and you can do this both in could pipeline or directly\nin Jenkins so that's where you're using",
    "start": "1963350",
    "end": "1971779"
  },
  {
    "text": "for your for your pipelines and so the\nway that the app spec file looks for",
    "start": "1971780",
    "end": "1977120"
  },
  {
    "text": "that is here we're defining the task\ndefinition we're defining how theis the",
    "start": "1977120",
    "end": "1984680"
  },
  {
    "text": "little balancer and then we're defining\nthese hooks so the hooks in this case our names of lambda functions that are\nexecuted to make sure everything's",
    "start": "1984680",
    "end": "1992159"
  },
  {
    "text": "has a chip so the way that that works is\nyou've got an ale be your ale be is",
    "start": "1992160",
    "end": "1997680"
  },
  {
    "text": "listening on port 80 in this case for\ntraffic that listener is tied to a",
    "start": "1997680",
    "end": "2004370"
  },
  {
    "text": "target group with your blue tasks in it\nso the blue tests are running the known working version of your code and that's\nthose are all running in Fargate and so",
    "start": "2004370",
    "end": "2013399"
  },
  {
    "text": "when would you do a deployment it\ncreates a new listener on another report it creates a new target group and it\nstarts provisioning a set of new tasks",
    "start": "2013400",
    "end": "2024230"
  },
  {
    "text": "we'll call them the green tasks with\nyour new code so right now it's provisioning these tasks but there's no\ntraffic being sent to them and it runs a",
    "start": "2024230",
    "end": "2032179"
  },
  {
    "text": "hook against this test endpoint and make\nsure that the tasks are performing as",
    "start": "2032180",
    "end": "2038300"
  },
  {
    "text": "they should and then it sends so it\nsends test traffic not production traffic to that code assuming that works\nit flips to the green tasks so your port",
    "start": "2038300",
    "end": "2051530"
  },
  {
    "text": "80 listener is now switching to the new\ntarget group and it runs another hook",
    "start": "2051530",
    "end": "2057889"
  },
  {
    "text": "and if that test passes it starts\ndraining the blue tasks so it starts",
    "start": "2057890",
    "end": "2063909"
  },
  {
    "text": "taking traffic that's being sent to the\nold tasks and moving them to the new tasks and everything works you've got a\ncompleted deployment and then when you",
    "start": "2063910",
    "end": "2073580"
  },
  {
    "start": "2071000",
    "end": "2071000"
  },
  {
    "text": "do another deployment it'll do the same\nthing it will create a new group of tasks another thing that's kind of an\nimportant best practice here for",
    "start": "2073580",
    "end": "2082480"
  },
  {
    "text": "deploying containers is image tagging so\ndocker tag is they're resolved when the",
    "start": "2082480",
    "end": "2089240"
  },
  {
    "text": "container starts not just during the\ndeployment so if you're deploying based",
    "start": "2089240",
    "end": "2094909"
  },
  {
    "text": "on the latest or prod tag that can\nactually result in untested code being",
    "start": "2094910",
    "end": "2100039"
  },
  {
    "text": "put into production so if you've got an\nauto scale group you can have new tasks",
    "start": "2100040",
    "end": "2105350"
  },
  {
    "text": "or new containers that launch as a\nresult of unexpected traffic or some kind of auto scaling event that triggers\nnew deployments so you don't want to use",
    "start": "2105350",
    "end": "2113990"
  },
  {
    "text": "the latest or prod you want to use an\nimmutable tag for deployment so what",
    "start": "2113990",
    "end": "2119300"
  },
  {
    "text": "that means is what can happen is you've\ngot your latest tag when you do a new",
    "start": "2119300",
    "end": "2124610"
  },
  {
    "text": "build that pushes a new\nTagg right every time you do and you build but just cuz you've done a new\nbuild doesn't mean you've gone through",
    "start": "2124610",
    "end": "2130820"
  },
  {
    "text": "all your processes to test that\ncontainer of the latest tag is actually functional so if you've got an event\nthat causes a scale up it'll",
    "start": "2130820",
    "end": "2138799"
  },
  {
    "text": "automatically start launching those\ncontainers that have the latest tag without actually testing them so you\nwant to avoid that so what you want to",
    "start": "2138800",
    "end": "2146330"
  },
  {
    "text": "do is use an immutable tag so with your\nwhen you're using ICS you've got two",
    "start": "2146330",
    "end": "2152060"
  },
  {
    "text": "things that you can go off of so first\nof all each build is going going to have",
    "start": "2152060",
    "end": "2157790"
  },
  {
    "text": "a shot 5256 digest that's immutable and\nit's also kind of a build ID so you can",
    "start": "2157790",
    "end": "2163910"
  },
  {
    "text": "use either of those so basically to get\nthose you can either give the sha-256",
    "start": "2163910",
    "end": "2169789"
  },
  {
    "text": "digest you can use this docker inspect\ncommand and to give the build ID you",
    "start": "2169790",
    "end": "2175250"
  },
  {
    "text": "basically it's an environment variable\nin code build that you can extract and so if you're tagging if you're tagging\noff of that then you can say okay my",
    "start": "2175250",
    "end": "2185030"
  },
  {
    "text": "what I'm actually deploying in my\ncontainer task definition and ECS is one",
    "start": "2185030",
    "end": "2190670"
  },
  {
    "text": "of these tags so now you've got a new\nbuild that new build is pushed with a new build ID and the service scales up\nbut it's still gonna launch off of the",
    "start": "2190670",
    "end": "2201140"
  },
  {
    "text": "build ID not off of latest so only when\nyou're doing a deployment and the double",
    "start": "2201140",
    "end": "2206539"
  },
  {
    "text": "your whole CI CD process is running all\nyour tests have run then you can update the server tasks definition to use the\nnew build ID so you'll only be deploying",
    "start": "2206540",
    "end": "2216049"
  },
  {
    "text": "that and you build ideal or the\ncontainer with a new ability when you actually intend to so just to summarize\nagain for continuous deployment we want",
    "start": "2216050",
    "end": "2225650"
  },
  {
    "start": "2221000",
    "end": "2221000"
  },
  {
    "text": "to automatically deploy new changes for\ntesting we want to deploy them to production without emetic customers and\nwe want to do that fast and also with",
    "start": "2225650",
    "end": "2234470"
  },
  {
    "text": "decreasing sets failure rates and lead\ntime so let's move on to infrastructures",
    "start": "2234470",
    "end": "2241580"
  },
  {
    "text": "code so infrastructures code write it\nthe goal of it is to treat your",
    "start": "2241580",
    "end": "2250550"
  },
  {
    "text": "infrastructure the same way that you\ntreat your code so instead of your infrastructure being this like manually\nbuilt and tailored thing it's a piece of",
    "start": "2250550",
    "end": "2258770"
  },
  {
    "text": "code\nupdates to it can be done like a piece of code changes are repeatable\nunpredictable and so you can use the",
    "start": "2258770",
    "end": "2264900"
  },
  {
    "text": "same tools to really structure changes\nthat you used to release your regular",
    "start": "2264900",
    "end": "2271500"
  },
  {
    "text": "code and you can also easily replicate\nyour environments when you do this so if",
    "start": "2271500",
    "end": "2278340"
  },
  {
    "text": "you need to create a new testing\nenvironment you can quickly do that so",
    "start": "2278340",
    "end": "2283910"
  },
  {
    "text": "there's two different things here if\nthere's validating an artifact so during the build stage you can do unit tests\nstatic analysis smog dependencies",
    "start": "2283910",
    "end": "2292950"
  },
  {
    "text": "environments and vulnerability scans so\nyou can do this to your infrastructure when you have it automated and you treat\nas code and then to validate the actual",
    "start": "2292950",
    "end": "2303240"
  },
  {
    "text": "environment you can do things like\nintegration test load tests penetration testing and monitoring to test impact of\nyour deployments on the actual",
    "start": "2303240",
    "end": "2311190"
  },
  {
    "text": "environment and so as an example here if\nyour code is CloudFormation so cloud",
    "start": "2311190",
    "end": "2319410"
  },
  {
    "start": "2313000",
    "end": "2313000"
  },
  {
    "text": "formation is our service that allows you\nto treat infrastructures code it's basically you create a template that's\nyeah mol or JSON that defines your",
    "start": "2319410",
    "end": "2326640"
  },
  {
    "text": "environment so you're storing your\ntemplate in a git repo you have a pipeline in a code pipeline for\ndeploying that CloudFormation template",
    "start": "2326640",
    "end": "2334500"
  },
  {
    "text": "so you've got a built stage in that bill\nstage you can run some kind of winter on your CloudFormation template to make\nsure it's actually valid you don't have",
    "start": "2334500",
    "end": "2342360"
  },
  {
    "text": "any syntax errors and then you have a\ntest stage so you do you basically do it",
    "start": "2342360",
    "end": "2347400"
  },
  {
    "text": "a you create the CloudFormation\nstack off that template if it doesn't already exist and you execute a change\nset and then so you do that in the",
    "start": "2347400",
    "end": "2356460"
  },
  {
    "text": "testing environment and then in your\nproduction environment you do the same thing so if that's some plate already\nexists it's gonna do the change set it's",
    "start": "2356460",
    "end": "2363600"
  },
  {
    "text": "gonna see what changes and if that will\nactually work and an update and then it executes that change set and if your\nenvironment is a service environment you",
    "start": "2363600",
    "end": "2375960"
  },
  {
    "start": "2370000",
    "end": "2370000"
  },
  {
    "text": "can do service application model so Sam\nis an open source framework for building",
    "start": "2375960",
    "end": "2382730"
  },
  {
    "text": "service applications on AWS it basically\nallows you to use a shorthand syntax to",
    "start": "2382730",
    "end": "2390390"
  },
  {
    "text": "write things like lambda functions\nsee I gateway mappings event source",
    "start": "2390390",
    "end": "2395470"
  },
  {
    "text": "mappings DynamoDB tables and so what it\ndoes is you can write all the stuff in",
    "start": "2395470",
    "end": "2402790"
  },
  {
    "text": "raw CloudFormation but you can you can\ndo it much quicker without less lines of code in Sam and so Sam allows you to mix\nin non Sam CloudFormation resources and",
    "start": "2402790",
    "end": "2413650"
  },
  {
    "start": "2410000",
    "end": "2410000"
  },
  {
    "text": "the same template so if you've got S3\nbuckets step functions things like that",
    "start": "2413650",
    "end": "2419170"
  },
  {
    "text": "you can just include them in your Sam\ntemplate it supports use of parameters and\nmappings outfits like regular",
    "start": "2419170",
    "end": "2424510"
  },
  {
    "text": "CloudFormation\nyou can use import value in its yeah Mille or JSON so the way the same\ntemplate works is again here I'm using",
    "start": "2424510",
    "end": "2434650"
  },
  {
    "text": "shorthand syntax to define a lambda\nfunction to do an API gateway mapping",
    "start": "2434650",
    "end": "2441150"
  },
  {
    "text": "and to define a little language my\nlambda functions and I can do this all",
    "start": "2441150",
    "end": "2447849"
  },
  {
    "text": "in regular CloudFormation it would just\ntake a lot more lines of code to do that and so here in 18 lines I'm defining a\nlambda function API gateway a dynamodb",
    "start": "2447849",
    "end": "2457960"
  },
  {
    "text": "table and I am rolls all of that pretty\nsmall amount of space and so to actually",
    "start": "2457960",
    "end": "2464910"
  },
  {
    "text": "execute Sam there's a Sam CLI and so you\ncan do that right and could pipeline",
    "start": "2464910",
    "end": "2470950"
  },
  {
    "text": "using confirmation deployment actions or\nyou can injections there's a Sam CLI",
    "start": "2470950",
    "end": "2476920"
  },
  {
    "text": "plug-in as well one other thing that you\nshould know but that's fairly new is the",
    "start": "2476920",
    "end": "2483490"
  },
  {
    "start": "2479000",
    "end": "2479000"
  },
  {
    "text": "ADA BSC DK or the cloud development\nenvironment kit and so this is an open",
    "start": "2483490",
    "end": "2489609"
  },
  {
    "text": "source framework that allows you to find\na cloud infrastructure in typescript and it works it provisions resources in\ncloud formation and it supports aural",
    "start": "2489609",
    "end": "2498910"
  },
  {
    "text": "all CloudFormation resource types so the\nway that it works is in here's an example CD k template and so here I have\na few lines of code and in these lines",
    "start": "2498910",
    "end": "2508299"
  },
  {
    "text": "of like in that specific line that's\nhighlighted I'm creating a V PC and that",
    "start": "2508300",
    "end": "2513700"
  },
  {
    "text": "V PC for me it already provisions\nsubnets security groups the igw the nat",
    "start": "2513700",
    "end": "2520300"
  },
  {
    "text": "gateway the route tables all according\nto either as best practices with one line of code\nand Here I am creating a service that",
    "start": "2520300",
    "end": "2531579"
  },
  {
    "text": "includes inicio service that's using a\nFargate cluster and I'm defining the ECS task definition I'll be listener rule\ntarget group and also a rad 53 alias",
    "start": "2531580",
    "end": "2541840"
  },
  {
    "text": "record an all in one line of code this\nwould take me a lot of CloudFormation to just do this natively and so 22 lines of\ntypescript code here are generating over",
    "start": "2541840",
    "end": "2551289"
  },
  {
    "text": "400 lines of CloudFormation syntax and\nyou can also use applets so an applet",
    "start": "2551290",
    "end": "2557290"
  },
  {
    "text": "lets you use gamal syntax to provide\ninputs to your cdk abstractions in this case i'm using the app i defined before\nwith specific docker image and so you",
    "start": "2557290",
    "end": "2572589"
  },
  {
    "start": "2571000",
    "end": "2571000"
  },
  {
    "text": "can model your code pipelines with CDK\nand this allows you to minimize copy and pasting you can also define what your\npipeline looks like in one class and",
    "start": "2572590",
    "end": "2581410"
  },
  {
    "text": "then keep reusing it across many\npipelines and cdk includes a lot of high-level constructs for modeling a\npipeline so like for example",
    "start": "2581410",
    "end": "2590130"
  },
  {
    "text": "automatically configuring the IM roles\nyou need for a pipeline so for example here I'm defining my pipeline and so in\nthis pipeline I am providing a github to",
    "start": "2590130",
    "end": "2600210"
  },
  {
    "text": "my pipelines based off github so I'm\ngiving it the API token and then I can",
    "start": "2600210",
    "end": "2607838"
  },
  {
    "text": "do five or four instances of that\npipeline really quickly with just four lines of codes I can reuse that I can\ncreate stacks of that pipeline and",
    "start": "2607839",
    "end": "2618540"
  },
  {
    "text": "there's a CLI for the cdk as well so\nagain you can use code pipeline",
    "start": "2618540",
    "end": "2623609"
  },
  {
    "text": "deployment actions or you can use the CD\ncase Eli and Jenkins as well so that's",
    "start": "2623609",
    "end": "2631950"
  },
  {
    "text": "infrastructure as code so again the\ngoals of this are making researcher changes repeatable and predictable and\nto release the infrastructure changes",
    "start": "2631950",
    "end": "2640570"
  },
  {
    "text": "using the same tools that you use for\ncode changes and to replicate your production environments really quickly\ninto staging environments so now let's",
    "start": "2640570",
    "end": "2649180"
  },
  {
    "text": "quickly do a demo here so let me just\nwake up my laptop alright",
    "start": "2649180",
    "end": "2655940"
  },
  {
    "text": "and we let's switch the input to my\nlaptop as well okay so this is I'm using",
    "start": "2655940",
    "end": "2663470"
  },
  {
    "text": "cloud 9 which is our cloud-based ID and\nI'm going to show you two different",
    "start": "2663470",
    "end": "2668630"
  },
  {
    "text": "pipelines here so I've got my first\npipeline is one where I have an app",
    "start": "2668630",
    "end": "2675950"
  },
  {
    "text": "that's deployed it's a go app into\ndeployed into eks or elastic kubernetes service and then I've got a second\npipeline that is a laminar pipeline so",
    "start": "2675950",
    "end": "2686960"
  },
  {
    "text": "it's a lambda function and it has an API\ngateway in front of it so let's take a look at this is my KS app so it's gotten\na load balancer in front of it basically",
    "start": "2686960",
    "end": "2696260"
  },
  {
    "text": "the important part here is it says hello\nworld I'm going to change that message",
    "start": "2696260",
    "end": "2701270"
  },
  {
    "text": "and then we've got my lambda function\nand it says the time currently the time in Los Angeles so I'm\ngonna change the code for both of these",
    "start": "2701270",
    "end": "2712369"
  },
  {
    "text": "so for the e KS function I'm just gonna\nadd a few exclamation marks for the",
    "start": "2712369",
    "end": "2717588"
  },
  {
    "text": "hello world message so I'm gonna and\nthis is all in I could commit repo so I'm going to do a git commit here\nhopefully when you do commits you do",
    "start": "2717589",
    "end": "2729950"
  },
  {
    "text": "more descriptive messages all right so\nI've pushed that and then I've got my",
    "start": "2729950",
    "end": "2737779"
  },
  {
    "text": "lambda function I'm just gonna change\nthe time from Los Angeles to New York so",
    "start": "2737779",
    "end": "2743450"
  },
  {
    "text": "it shows the time in New York okay and\nI'm going to commit that as well",
    "start": "2743450",
    "end": "2753970"
  },
  {
    "text": "all right so these commits have\ntriggered my actual pipeline so let's",
    "start": "2757789",
    "end": "2764639"
  },
  {
    "text": "take a look here so let's go to the EES\nservice first so the UK service this is",
    "start": "2764639",
    "end": "2769679"
  },
  {
    "text": "the new hash of my commit and so I'm\ngonna go back to that pipeline free kiss",
    "start": "2769679",
    "end": "2775308"
  },
  {
    "text": "and we can see here this is it's five 0e\n9 8 5 0 e 9 since the same commit so",
    "start": "2775309",
    "end": "2783509"
  },
  {
    "text": "it's picked it up really quickly and you\ncan click here and if you click on this it'll take you to my actual code commit\nrepo and show the actual change that",
    "start": "2783509",
    "end": "2792659"
  },
  {
    "text": "I've made here and so now it's doing so\nthe way that this works is and I wanted",
    "start": "2792659",
    "end": "2798449"
  },
  {
    "text": "to show you eks because it's it's\nactually not one of the natively supported things in code pipeline so\nwhat I'm actually doing is in my code",
    "start": "2798449",
    "end": "2806249"
  },
  {
    "text": "build project I'm I'm doing the\ndeployment there just to show you that",
    "start": "2806249",
    "end": "2811799"
  },
  {
    "text": "you can extend it to things that it\naren't natively is supported so tale my logs here so this is the\ncould build project this is my container",
    "start": "2811799",
    "end": "2819749"
  },
  {
    "text": "and it's basically it's in the process\nof building the container and while it's",
    "start": "2819749",
    "end": "2825209"
  },
  {
    "text": "doing that let's take a look at the\nactual what it's actually doing so this is my build spec file this is what\nactually controls the bill does it going",
    "start": "2825209",
    "end": "2833399"
  },
  {
    "text": "on right now so it is downloading a\nbunch of eks utilities into the",
    "start": "2833399",
    "end": "2838679"
  },
  {
    "text": "container so cube CTL + RI m\nAuthenticator it's making sure i have",
    "start": "2838679",
    "end": "2844409"
  },
  {
    "text": "the latest version of the ets CLI and\nsome Python packages and then it logs in",
    "start": "2844409",
    "end": "2850109"
  },
  {
    "text": "to ECR here and then it builds my\ncontainer which is what I was doing when",
    "start": "2850109",
    "end": "2856919"
  },
  {
    "text": "we last checked it and then after that's\ndone it pushes the container and exports a bunch of environment variables into\nthe environment so and then last thing",
    "start": "2856919",
    "end": "2868409"
  },
  {
    "text": "does is it updates my service running\nkubernetes with the updated app here so",
    "start": "2868409",
    "end": "2876088"
  },
  {
    "text": "if we go back here and it looks like\nlet's see here logs it's still going so",
    "start": "2876089",
    "end": "2882539"
  },
  {
    "text": "the deployment still going takes a few\nminutes so well yeah it's actually building the\ndocker container now so those little",
    "start": "2882539",
    "end": "2889850"
  },
  {
    "text": "take a few minutes we'll check back on\nit while that's going on let's take a look at the other pipeline here so for\nlambda here I've got my I've got my my",
    "start": "2889850",
    "end": "2903829"
  },
  {
    "text": "actual lambda function which is very\nsimple and I've got the built spec file for that and it's just using Sam so it's\na its packaging up my lambda function",
    "start": "2903830",
    "end": "2915050"
  },
  {
    "text": "and I've got my actual template here\nthis is my Sam template and it's very",
    "start": "2915050",
    "end": "2920870"
  },
  {
    "text": "simples defining the API gateway mapping\nand the lambda function and the way that",
    "start": "2920870",
    "end": "2927950"
  },
  {
    "text": "this works is it has a code build job\nthey could build job it just packages up",
    "start": "2927950",
    "end": "2936410"
  },
  {
    "text": "the same template and then it creates\nand executes a change set and again this",
    "start": "2936410",
    "end": "2941630"
  },
  {
    "text": "is picked up when you code this one is\nactually completed so let's take a look at here I'm gonna hit refresh and this\nshould say New York now yep there we go",
    "start": "2941630",
    "end": "2949310"
  },
  {
    "text": "so it's been updated to the new code\nwith the time in New York so now let's",
    "start": "2949310",
    "end": "2954620"
  },
  {
    "text": "go back to my EKS pipeline and this is\nstill building C. Here let me tail the",
    "start": "2954620",
    "end": "2964940"
  },
  {
    "text": "logs again oh it's completed okay so\nhere we go this is where it's actually",
    "start": "2964940",
    "end": "2972980"
  },
  {
    "text": "changed my service so let's refresh that\nall right so we can see it's updated a",
    "start": "2972980",
    "end": "2980780"
  },
  {
    "text": "new message so the deployment has\nsucceeded in both cases here. So let's",
    "start": "2980780",
    "end": "2986450"
  },
  {
    "text": "switch back to the PowerPoint that is\nwhat I had for you today so thank you",
    "start": "2986450",
    "end": "2999349"
  },
  {
    "text": "for your time and please remember to\ncomplete this session survey at the end and if you have any questions I will be\nright outside the room as soon as I pack",
    "start": "2999350",
    "end": "3009490"
  },
  {
    "text": "up my laptop to answer them so things.\neveryone enjoy the rest of your summit.",
    "start": "3009490",
    "end": "3020030"
  }
]