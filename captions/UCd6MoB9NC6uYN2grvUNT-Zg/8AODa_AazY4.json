[
  {
    "start": "0",
    "end": "45000"
  },
  {
    "text": "um so my name is Colin mccarth I'm an engineer with Amazon web services I work on elastic low balancing for the most",
    "start": "2000",
    "end": "9480"
  },
  {
    "text": "part but I used to work with cloudfront and um those are both two services that use SSL which is uh what I'm going to",
    "start": "9480",
    "end": "16560"
  },
  {
    "text": "talk about today and uh what we're going to try and cover is how SSL and TLS um",
    "start": "16560",
    "end": "23560"
  },
  {
    "text": "work you know how they actually function what's going on when a an SSL connection is being used and how that relates to",
    "start": "23560",
    "end": "30320"
  },
  {
    "text": "some of the Amazon web services and hopefully by understanding it a bit more we can demystify some of the more",
    "start": "30320",
    "end": "36719"
  },
  {
    "text": "confusing parts of SSL but also be better prepared for any future changes or anything else we might have to do",
    "start": "36719",
    "end": "42800"
  },
  {
    "text": "with SSL protocols okay so with that assume everyone here is familiar with",
    "start": "42800",
    "end": "49239"
  },
  {
    "start": "45000",
    "end": "112000"
  },
  {
    "text": "SSL at a high level that it's the the protocol that's used um to encrypt and",
    "start": "49239",
    "end": "54600"
  },
  {
    "text": "secure traffic uh on the internet so when you connect to a htps URL like dd.",
    "start": "54600",
    "end": "61600"
  },
  {
    "text": "amazon.com uh SSL is doing that and it's really performing three important functions when that's happening um the",
    "start": "61600",
    "end": "68640"
  },
  {
    "text": "first is authentication so when I go to HPS amazon.com in my browser I know I'm",
    "start": "68640",
    "end": "74720"
  },
  {
    "text": "getting the real Amazon and not some other forgery uh the second function",
    "start": "74720",
    "end": "80439"
  },
  {
    "text": "that SSL provides the one um we're probably most familiar with is secrecy so no intermediary between my browser",
    "start": "80439",
    "end": "87759"
  },
  {
    "text": "and that web server can figure out what the traffic is being sent and received and the third often overlooked um is",
    "start": "87759",
    "end": "95280"
  },
  {
    "text": "that the SSL protocol also makes that traffic temper proof so somebody tries to modify the traffic in Flight that",
    "start": "95280",
    "end": "101479"
  },
  {
    "text": "won't result in just corrupt data at the other end and um and the wrong information flying around but the SSL",
    "start": "101479",
    "end": "108119"
  },
  {
    "text": "protocol will detect that and uh and shut it down okay",
    "start": "108119",
    "end": "113320"
  },
  {
    "start": "112000",
    "end": "430000"
  },
  {
    "text": "so uh the SSL protocol is uh is 20 years old pretty much uh at this point",
    "start": "113320",
    "end": "120840"
  },
  {
    "text": "um so the hdp the protocol that underlies the web what your browsers and and web servers are using was first",
    "start": "120840",
    "end": "127360"
  },
  {
    "text": "standardized in the early 90s and it wasn't too long after that that the uh first version of SSL came along was",
    "start": "127360",
    "end": "134080"
  },
  {
    "text": "developed um at Netscape uh the first version never seemed to see the light light of day that's why there's no SSL",
    "start": "134080",
    "end": "140000"
  },
  {
    "text": "V1 on these uh on this timeline but sslv2 came out in 994 unfortunately uh",
    "start": "140000",
    "end": "147239"
  },
  {
    "text": "some design flaws were found in in sslv2 it's not the most secure design don't",
    "start": "147239",
    "end": "152920"
  },
  {
    "text": "use sslv2 um you should you should never use sslv2",
    "start": "152920",
    "end": "159400"
  },
  {
    "text": "um so sslv3 came out not too long after that and then things got a bit bigger",
    "start": "159400",
    "end": "164599"
  },
  {
    "text": "some more parties and organizations started to get involved and stewardship of the protocol transitioned to the",
    "start": "164599",
    "end": "170959"
  },
  {
    "text": "internet engineering task force the ITF um when that happened the name changed",
    "start": "170959",
    "end": "176599"
  },
  {
    "text": "from SSL which stands for secure sockets layer um none of the s's stand for",
    "start": "176599",
    "end": "182400"
  },
  {
    "text": "simple uh and and TLS uh sorry the name change from SSL to TLS the the transport",
    "start": "182400",
    "end": "190560"
  },
  {
    "text": "layer security but it's the same protocol TLS is just a continuation of the SSL protocols they're very very",
    "start": "190560",
    "end": "197080"
  },
  {
    "text": "similar and those design design changes are incremental uh there have been three versions of TLS released uh and the",
    "start": "197080",
    "end": "204680"
  },
  {
    "text": "fourth TLS 1.3 is due out next year hopefully um over time those revisions",
    "start": "204680",
    "end": "211640"
  },
  {
    "text": "are getting simple simpler um the the main reason why there have been so many",
    "start": "211640",
    "end": "218799"
  },
  {
    "text": "uh versions of SSL and TLS isn't that the core features or those three functions that I mentioned um have",
    "start": "218799",
    "end": "225040"
  },
  {
    "text": "changed over the years there there have been a few features added to SL but really not too many the main reason why",
    "start": "225040",
    "end": "230959"
  },
  {
    "text": "there are revisions is that the protocol design has to keep up with all of the um",
    "start": "230959",
    "end": "238040"
  },
  {
    "text": "research on vulnerability and design flaws that occurs over the years so just is just a select few of the",
    "start": "238040",
    "end": "246280"
  },
  {
    "text": "various design issues that have been found either in the SSL or TLS protocol designs themselves or in encryption",
    "start": "246280",
    "end": "253920"
  },
  {
    "text": "algorithms closely associated with those protocols and you can see it's happening at an accelerating rate there's more and",
    "start": "253920",
    "end": "260359"
  },
  {
    "text": "more research going into def finding these things which is really good news right it's great that we're finding all",
    "start": "260359",
    "end": "266000"
  },
  {
    "text": "of these we're refining the protocols um and making things ever simpler and more",
    "start": "266000",
    "end": "271199"
  },
  {
    "text": "secure there's some good there's some good design properties of the SSL and TLS protocols that help us out here um",
    "start": "271199",
    "end": "279160"
  },
  {
    "text": "one is that it allows for a lot of interchangeability fundamentally at its core as we'll see the protocol is about",
    "start": "279160",
    "end": "285280"
  },
  {
    "text": "negotiating algorithms and so if a flaw or problem is found in one algorithm you know others can be swapped in it's great",
    "start": "285280",
    "end": "291880"
  },
  {
    "text": "to have that versatility another nice property is that it offers defense in depth it combines algorithms in in ways",
    "start": "291880",
    "end": "299000"
  },
  {
    "text": "that hope tries to cover up the weaknesses of anyone but still it's important to keep up it's important to",
    "start": "299000",
    "end": "305520"
  },
  {
    "text": "be on the latest version um the acceler rate of these things um in particular uh",
    "start": "305520",
    "end": "312080"
  },
  {
    "text": "vulnerabilities like Beast or um have meant the browsers are doing uh a better",
    "start": "312080",
    "end": "317479"
  },
  {
    "text": "job of keeping up to date so as of about February of this year all the",
    "start": "317479",
    "end": "322680"
  },
  {
    "text": "modern browsers are now speaking TLS 1.2 the latest version of the protocol which is why you want to be on um that's very",
    "start": "322680",
    "end": "330080"
  },
  {
    "text": "good we see uh well over 98% of traffic coming in over TLS 1.2 which is good but",
    "start": "330080",
    "end": "336759"
  },
  {
    "text": "unfortunately there are still some Legacy clients out there still stuck on even sslv3 a protocol in which some more",
    "start": "336759",
    "end": "343360"
  },
  {
    "text": "vulnerabilities were found just a few weeks ago with poodle and we're actually going to cover poodle a little later how",
    "start": "343360",
    "end": "348440"
  },
  {
    "text": "that works um and so there's this core problem in in how do we maintain",
    "start": "348440",
    "end": "357880"
  },
  {
    "text": "um a secure SS SL stack or how do we maintain Services securely that speak SSL when we may need to you know",
    "start": "357880",
    "end": "365560"
  },
  {
    "text": "deprecate functionality When U design flaws are found but maintain backwards",
    "start": "365560",
    "end": "371319"
  },
  {
    "text": "compatibility um and the uh the real fix for this is that you need to be able to",
    "start": "371319",
    "end": "378240"
  },
  {
    "text": "keep keep uh both servers and clients up to date um so for example when the sslv3",
    "start": "378240",
    "end": "385199"
  },
  {
    "text": "uh vulnerability came out last month uh on the same day we had a security policy available for elb that disabled sslv3",
    "start": "385199",
    "end": "392960"
  },
  {
    "text": "and we saw a lot of customers adopt that and we've also adopted it for all new elbs and that's been great but we also",
    "start": "392960",
    "end": "399800"
  },
  {
    "text": "are trying very hard to help um customers who have Legacy clients out there in the world and they're still",
    "start": "399800",
    "end": "405160"
  },
  {
    "text": "speaking sslv3 and it's very hard to get them up to date they're maybe embedded systems or or systems that are um in",
    "start": "405160",
    "end": "413120"
  },
  {
    "text": "standby mode for long periods of times and not not taking updates so one thing you can do to kind of pro actively",
    "start": "413120",
    "end": "420080"
  },
  {
    "text": "improve your security stance for these Services is if possible split those clients out and put them on talking to",
    "start": "420080",
    "end": "427240"
  },
  {
    "text": "different names right so we we see kind of three main classes of clients with",
    "start": "427240",
    "end": "433879"
  },
  {
    "start": "430000",
    "end": "478000"
  },
  {
    "text": "different update Cycles we see mobile devices phones and tablets and e-readers and so on those seem to be pretty good",
    "start": "433879",
    "end": "440560"
  },
  {
    "text": "at accepting security updates and pretty rapidly get up to date within a few days",
    "start": "440560",
    "end": "445840"
  },
  {
    "text": "um and then we see browsers uh where security updates get to you know the high 90s of of uh of acceptance rates",
    "start": "445840",
    "end": "453479"
  },
  {
    "text": "for security updates within within weeks and then there's those Legacy clients uh so one one thing we've been doing and",
    "start": "453479",
    "end": "460560"
  },
  {
    "text": "one thing we've we've seen other people doing is just trying to split out what names things talk to so that you can",
    "start": "460560",
    "end": "465840"
  },
  {
    "text": "disable features on on the names that the uh browsers speak to for example",
    "start": "465840",
    "end": "471680"
  },
  {
    "text": "more quickly than uh the things that Legacy clients do so that's one thing we can do let's get into how TLS actually",
    "start": "471680",
    "end": "478440"
  },
  {
    "start": "478000",
    "end": "497000"
  },
  {
    "text": "works um so I'm not going to go into much detail about cryptography itself",
    "start": "478440",
    "end": "483520"
  },
  {
    "text": "because it's way too big a topic to try and cover um in a breakout session but there are three cryptographic operations",
    "start": "483520",
    "end": "491400"
  },
  {
    "text": "which it's important to understand just to make sense of TLS and those are um the ones that you see here the first is",
    "start": "491400",
    "end": "499680"
  },
  {
    "start": "497000",
    "end": "545000"
  },
  {
    "text": "hashes or choms Integrity algorithms and all those are are algorithms that let us",
    "start": "499680",
    "end": "506039"
  },
  {
    "text": "take an arbitrary amount of data as input and produce a small fix size uh fingerprint essentially of that data so",
    "start": "506039",
    "end": "513320"
  },
  {
    "text": "here I'm running a sha 256 check some on the GCC binary on my laptop and it gives",
    "start": "513320",
    "end": "518839"
  },
  {
    "text": "me a check sum of a certain size and even though the binary is 14K in size I get a small fixed size fingerprint",
    "start": "518839",
    "end": "525240"
  },
  {
    "text": "there's two properties that we care about first is that if I um do this operation on the same document or binary",
    "start": "525240",
    "end": "532519"
  },
  {
    "text": "over and over again I'll always get the same result and the second property is that um no other document or binary will",
    "start": "532519",
    "end": "540079"
  },
  {
    "text": "produce the same result that it's Collision free and can't be spoed uh the",
    "start": "540079",
    "end": "545800"
  },
  {
    "start": "545000",
    "end": "618000"
  },
  {
    "text": "second cryptographic operation which is important is encryption so encryption algorithms there uh two highle types of",
    "start": "545800",
    "end": "554040"
  },
  {
    "text": "encryption algorithms used in SSL and TLS the first is asymmetric or public",
    "start": "554040",
    "end": "559200"
  },
  {
    "text": "private key cryptography so the first two algorithms here RSA and ecdsa are",
    "start": "559200",
    "end": "564760"
  },
  {
    "text": "both examples of that um and that's where we create a key pair uh you keep",
    "start": "564760",
    "end": "570120"
  },
  {
    "text": "one one half of that to yourself that's your private key and you give the other away it's public key that goes in your",
    "start": "570120",
    "end": "575839"
  },
  {
    "text": "SSL certificate it will as we'll see shortly and some somebody can encrypt data with your public key and only you",
    "start": "575839",
    "end": "581440"
  },
  {
    "text": "can read it with your private key and conversely you can encrypt data with your private key and somebody can",
    "start": "581440",
    "end": "586959"
  },
  {
    "text": "decrypt it with your public key and therefore verify that uh you encrypted it and those in a scheme of things are",
    "start": "586959",
    "end": "593760"
  },
  {
    "text": "quite slow uh ecdsa is an elliptic curve variant of a of a signature algorithm that's faster than RSA RSA is kind of",
    "start": "593760",
    "end": "601560"
  },
  {
    "text": "the the more traditional mode of asymmetric encryption but those are quite slow and then the other mode of",
    "start": "601560",
    "end": "606920"
  },
  {
    "text": "encryption is symmetric encryption or shared secret encryption where uh the two ends have the same key and they can",
    "start": "606920",
    "end": "613760"
  },
  {
    "text": "encrypt and decrypt data quite quickly and so we'll see what role those play and then the other part is signatures",
    "start": "613760",
    "end": "621440"
  },
  {
    "start": "618000",
    "end": "657000"
  },
  {
    "text": "and um in this context all signatures really are is a combination of hashes or",
    "start": "621440",
    "end": "626640"
  },
  {
    "text": "checksums and public private key encryption so the way signatures work is I check",
    "start": "626640",
    "end": "632480"
  },
  {
    "text": "some a document I produce that little fingerprint then I encrypt that fingerprint with my private key and now",
    "start": "632480",
    "end": "639000"
  },
  {
    "text": "anybody who has my public key can do the same they can check on the document themselves then they can um then they",
    "start": "639000",
    "end": "646399"
  },
  {
    "text": "can decrypt my uh signature because I have encrypted it with my private key",
    "start": "646399",
    "end": "652000"
  },
  {
    "text": "and they can verify that they match that's all a signature is it's a combination of those two things the other thing",
    "start": "652000",
    "end": "660160"
  },
  {
    "text": "we need just some basic context to under to understand TLS it's just the layer with it which it sits in the",
    "start": "660160",
    "end": "667519"
  },
  {
    "text": "network and the key thing to understand is that TLS tries to sit transparently",
    "start": "667519",
    "end": "674040"
  },
  {
    "text": "between a traditional application protocol like HTTP um for web or SMTP for email and so",
    "start": "674040",
    "end": "681120"
  },
  {
    "text": "on and TCP IP but when your web browser is talking to a web server and making a request it looks the same over HTTP and",
    "start": "681120",
    "end": "687800"
  },
  {
    "text": "htps it's just that SSL or TLS um is between the two in the encrypted case",
    "start": "687800",
    "end": "694040"
  },
  {
    "text": "Okay so those are all the prerequisites um so we'll get into how",
    "start": "694040",
    "end": "699079"
  },
  {
    "text": "TLS actually functions so there's three phases to a TLS connection when it's uh securing all",
    "start": "699079",
    "end": "707000"
  },
  {
    "text": "this information the first uh is a very simple phase a hello phase where your",
    "start": "707000",
    "end": "712040"
  },
  {
    "text": "client says hello to the server um just to negotiate some stuff the second uh",
    "start": "712040",
    "end": "717959"
  },
  {
    "text": "and I find the most interesting is where we use public private key cryptography to both authenticate the",
    "start": "717959",
    "end": "724000"
  },
  {
    "text": "server right validate that we got to the right place and also to bootstrap our",
    "start": "724000",
    "end": "729040"
  },
  {
    "text": "way to a shared secret so that we can do the third phase which is actually using that shared secret to encrypt and",
    "start": "729040",
    "end": "735320"
  },
  {
    "text": "decrypt data and do the bulk so the first phase is very very shli literally",
    "start": "735320",
    "end": "740800"
  },
  {
    "text": "a pocket or two the second is um a few more pockets and we bootstrap our away",
    "start": "740800",
    "end": "745880"
  },
  {
    "text": "to a shared key and then the third is the longest phase of a TS connection where we actually encrypt and decrypt",
    "start": "745880",
    "end": "751920"
  },
  {
    "text": "data we'll see we'll see how all those work in a bit um on The Wire what's happening is",
    "start": "751920",
    "end": "759040"
  },
  {
    "start": "755000",
    "end": "894000"
  },
  {
    "text": "that the protocol breaks all of this down into messages uh and they look like this um",
    "start": "759040",
    "end": "767399"
  },
  {
    "text": "those correspond to the phases I just mentioned like this so the hello phase",
    "start": "767399",
    "end": "772839"
  },
  {
    "text": "is those first two messages then the second is that bootstrapping phase where",
    "start": "772839",
    "end": "778199"
  },
  {
    "text": "we try to use public private key cryptography to get to a shared secret and the third is when we're actually",
    "start": "778199",
    "end": "783800"
  },
  {
    "text": "encrypting and decrypting raw data that the user wants to exchange uh so a protocol exchange looks",
    "start": "783800",
    "end": "790199"
  },
  {
    "text": "like this when a client first connects to a server for the first time and doesn't know anything else about it has",
    "start": "790199",
    "end": "795279"
  },
  {
    "text": "to go through all of these message types and and phases but if a client has",
    "start": "795279",
    "end": "800560"
  },
  {
    "text": "previously bootstrapped its way to a shared secret or negotiated a session um",
    "start": "800560",
    "end": "805600"
  },
  {
    "text": "to use TLS terminology it's allowed cach that information the server can say at",
    "start": "805600",
    "end": "810680"
  },
  {
    "text": "the end yep you you've negotiated a session with me here's a session ID for that or a session ticket for it and so",
    "start": "810680",
    "end": "816399"
  },
  {
    "text": "the next time it connects uh it can skip that second phase and save some time and and uh some",
    "start": "816399",
    "end": "822959"
  },
  {
    "text": "computation and go straight to the third part um but either way as you'll notice",
    "start": "822959",
    "end": "828399"
  },
  {
    "text": "so the way these messages are lined up the ones at the top are ones the client descending the ones at the bottom and",
    "start": "828399",
    "end": "833639"
  },
  {
    "text": "the ones that the server sending and if you take the first phase the client sends Hello message then the server",
    "start": "833639",
    "end": "839639"
  },
  {
    "text": "replies with a Hello Message of its own we go to next there's a lot of back and forth um to the protocol and so in a",
    "start": "839639",
    "end": "848120"
  },
  {
    "text": "traditional TCP protocol like HTTP a client sends a sin a server sends sin",
    "start": "848120",
    "end": "854920"
  },
  {
    "text": "act client sends an act and then we can send some data so it takes one round trip before you can establish two-way",
    "start": "854920",
    "end": "861399"
  },
  {
    "text": "Communications uh with SSL it can take up to four round trips uh or two two in",
    "start": "861399",
    "end": "866880"
  },
  {
    "text": "the best case which is uh which means things can uh go more slowly so CDN like",
    "start": "866880",
    "end": "875040"
  },
  {
    "text": "clam front tend to be pretty popular for a lot of htps static content in",
    "start": "875040",
    "end": "880079"
  },
  {
    "text": "particular just to speed up all of that loading um because a CDN will usually be able to have a much lower roundtrip time",
    "start": "880079",
    "end": "886519"
  },
  {
    "text": "to those end clients um than you traditionally get from having you know all your servers in one place and so",
    "start": "886519",
    "end": "892120"
  },
  {
    "text": "speeds things up the uh so we're going to dive into",
    "start": "892120",
    "end": "897880"
  },
  {
    "start": "894000",
    "end": "1076000"
  },
  {
    "text": "what the messages actually do at least in some detail um so when the client",
    "start": "897880",
    "end": "903839"
  },
  {
    "text": "first connects the first message it sends is a client Hello message and that",
    "start": "903839",
    "end": "909399"
  },
  {
    "text": "just includes some some details like the client protocol version um some stuff like that a list of Cipher Suites we're",
    "start": "909399",
    "end": "916519"
  },
  {
    "text": "about to go into those in a bit more detail um a session ID or a session",
    "start": "916519",
    "end": "922000"
  },
  {
    "text": "ticket if it's previously cash to session that's how that session caching Works um and a a server name identifier",
    "start": "922000",
    "end": "930079"
  },
  {
    "text": "field or Sni uh we see about 98.5% of clients I think these days uh",
    "start": "930079",
    "end": "936720"
  },
  {
    "text": "send an Sni U header and those are sent by all the modern browsers uh all the",
    "start": "936720",
    "end": "942759"
  },
  {
    "text": "phones and so on and what that is is a hint to the server about the name it's trying to connect to so it used to be in",
    "start": "942759",
    "end": "950839"
  },
  {
    "text": "traditional SSL when uh and a server got a connection from a client it really had",
    "start": "950839",
    "end": "956199"
  },
  {
    "text": "no idea other than the IP address the client was connecting to what that connection might be for and so if you",
    "start": "956199",
    "end": "961839"
  },
  {
    "text": "wanted to serve multiple sites with different certificates on the same uh server it was it was effectively",
    "start": "961839",
    "end": "968319"
  },
  {
    "text": "impossible Sni is a technology that enables that and all that's happening is the client puts the host name there so",
    "start": "968319",
    "end": "975160"
  },
  {
    "text": "that the server can uh see what what CT it needs to respond with we'll see how CTS are handled shortly um you got to",
    "start": "975160",
    "end": "983800"
  },
  {
    "text": "keep in mind that all this negotiation happens before a hddp exchange so we we don't have access to something like a",
    "start": "983800",
    "end": "989399"
  },
  {
    "text": "host header that's in a in a in a HTV request at that point so that's Sni um",
    "start": "989399",
    "end": "994880"
  },
  {
    "text": "we'll see how how that comes into play later okay so I promise to explain Cipher Suites so Cipher Suites are",
    "start": "994880",
    "end": "1001079"
  },
  {
    "text": "probably the most um intimidating and confusing uh thing in in SSL and TLS",
    "start": "1001079",
    "end": "1007040"
  },
  {
    "text": "they are not uh the most friendly looking things you you've probably seen strings like this there's nearly a",
    "start": "1007040",
    "end": "1014680"
  },
  {
    "text": "hundred of them in total in in configurations for web servers or or online and blog posts and",
    "start": "1014680",
    "end": "1021120"
  },
  {
    "text": "documentation um it's possible to break them down try to make some sense of all these arbitrary letters and numbers um",
    "start": "1021120",
    "end": "1028959"
  },
  {
    "text": "if we line Cipher Suites up like this well the first thing we can notice is that they're they're um mostly all in",
    "start": "1028959",
    "end": "1035880"
  },
  {
    "text": "either three parts or four parts and if it's in three parts like this one at the top that just means the first part's",
    "start": "1035880",
    "end": "1041400"
  },
  {
    "text": "missing so you slide a a little over and then they all line up like this and um the first two parts of this correspond",
    "start": "1041400",
    "end": "1049039"
  },
  {
    "text": "to the algorithms that are used in the bootstrapping phase of SSL so they're around how we agree on a key or a shared",
    "start": "1049039",
    "end": "1057039"
  },
  {
    "text": "secret between the the client and the server or how the client authenticates the server and the the last two around",
    "start": "1057039",
    "end": "1065679"
  },
  {
    "text": "how the data is actually encrypted and authenticated that just means that it it hasn't been meddled with um on The Wire",
    "start": "1065679",
    "end": "1073720"
  },
  {
    "text": "right and we can subdivide those even further so the first part",
    "start": "1073720",
    "end": "1079520"
  },
  {
    "text": "is around the kind of perfect forward secrecy to use or none at all if it's",
    "start": "1079520",
    "end": "1084919"
  },
  {
    "text": "absent um so the DH in there stands for Diffy Helman which is the algorithm that",
    "start": "1084919",
    "end": "1090400"
  },
  {
    "text": "underlies uh perfect forward secrecy the second part is about the public private",
    "start": "1090400",
    "end": "1096559"
  },
  {
    "text": "encryption algorithm to use or asymmetric cryptography algorithm to use or also called Signature algorithm to",
    "start": "1096559",
    "end": "1102120"
  },
  {
    "text": "use just three different terms for the same thing um there's really two uh",
    "start": "1102120",
    "end": "1107440"
  },
  {
    "text": "there's two main kinds we see used in SSL there are two more kinds that are supported but no one uses them but the",
    "start": "1107440",
    "end": "1114240"
  },
  {
    "text": "two kinds that we see people use are RSA and ecdsa and then uh the third part is the",
    "start": "1114240",
    "end": "1121039"
  },
  {
    "text": "actual shared secret algorithm that will encrypt and decrypt the data so that does the bulk of the work so it's",
    "start": "1121039",
    "end": "1126960"
  },
  {
    "text": "actually protecting things and the fourth is the algorithm that will protect and validate that the data we're",
    "start": "1126960",
    "end": "1133960"
  },
  {
    "text": "transmitting on The Wire hasn't been changed by any kind of person between the client in the server um this md5 sha",
    "start": "1133960",
    "end": "1142840"
  },
  {
    "text": "algorithm that you see here has nothing to do with the U algorithm that is used to validate certificates as we'll see so",
    "start": "1142840",
    "end": "1149760"
  },
  {
    "text": "there one thing very confusing about cyppher suedes that this md5 and sha that you see",
    "start": "1149760",
    "end": "1155720"
  },
  {
    "text": "here uh doesn't play a role in certificate authentication and also in the algorithm itself isn't actually used",
    "start": "1155720",
    "end": "1162799"
  },
  {
    "text": "directly as a check sum it's combined with another algorithm to help protect things so the client takes a list of",
    "start": "1162799",
    "end": "1169200"
  },
  {
    "text": "these Cipher Suites which just dictate which four algorithms it would like to use in in its own order of preference",
    "start": "1169200",
    "end": "1176280"
  },
  {
    "text": "and sends them to the server and the server picks one and that's what that's what we'll that's what the session will",
    "start": "1176280",
    "end": "1181919"
  },
  {
    "start": "1178000",
    "end": "1205000"
  },
  {
    "text": "use so the server gets to dictate it and the server can choose to honor the client's preferences and go with the",
    "start": "1181919",
    "end": "1187679"
  },
  {
    "text": "first one it supports that the client does or enforce its own preference and pick the first one its supports that the",
    "start": "1187679",
    "end": "1193159"
  },
  {
    "text": "client also supports um and that's really all that's happening in the server hello phase unless there's a session cach in which case you can say",
    "start": "1193159",
    "end": "1200280"
  },
  {
    "text": "okay let's skip the the next section um let's say it's not doing that it'll then",
    "start": "1200280",
    "end": "1207400"
  },
  {
    "start": "1205000",
    "end": "1221000"
  },
  {
    "text": "vend a server certificate and at this point in the protocol that's really just",
    "start": "1207400",
    "end": "1212559"
  },
  {
    "text": "a blob just data just the server is just sending um sending this blob of data to",
    "start": "1212559",
    "end": "1219440"
  },
  {
    "text": "the client and the blob of data is a combination of a few things right",
    "start": "1219440",
    "end": "1226240"
  },
  {
    "start": "1221000",
    "end": "1283000"
  },
  {
    "text": "so if you want to generate a certificate the way you do it is you generate a public private key pair here I'm generating a 2048 bit that's just the",
    "start": "1226240",
    "end": "1234360"
  },
  {
    "text": "size of the key um ORS key most common most common and most supported type um",
    "start": "1234360",
    "end": "1241440"
  },
  {
    "text": "and then generating a certificate signing request with open SSL so you're that command It'll ask you a bunch of",
    "start": "1241440",
    "end": "1246480"
  },
  {
    "text": "questions like what's your website name what's your country all that stuff and you take that certificate uh signing",
    "start": "1246480",
    "end": "1252320"
  },
  {
    "text": "request which actually has your public key embedded in it and you send it to a certificate Authority and they you know",
    "start": "1252320",
    "end": "1259000"
  },
  {
    "text": "validate that you are who you say you are and they give you back a certificate uh and that's that's what's",
    "start": "1259000",
    "end": "1266200"
  },
  {
    "text": "being vended out that's where the certificate comes from and and has your public key if you want to use",
    "start": "1266200",
    "end": "1271360"
  },
  {
    "text": "ecdsa um you can generate a public private key for ecdsa using this command",
    "start": "1271360",
    "end": "1276960"
  },
  {
    "text": "um there are some constraints placed on the algorithms we should use uh for",
    "start": "1276960",
    "end": "1282279"
  },
  {
    "text": "certificates so uh in 2004 it was demonstrated that md5 is not a uh",
    "start": "1282279",
    "end": "1291200"
  },
  {
    "text": "Collision resistant signature algorithm or sorry hash algorithm and in 2011 it",
    "start": "1291200",
    "end": "1296840"
  },
  {
    "text": "was it's it's been shown that uh Shia one is not Collision resistant although no one has has produced a collision and",
    "start": "1296840",
    "end": "1304559"
  },
  {
    "text": "RSA 1024 the smaller key size um in 2012",
    "start": "1304559",
    "end": "1310240"
  },
  {
    "text": "people uh started being able to demonstrate that that was crackable that they could figure out your private key based on the public key um all that's",
    "start": "1310240",
    "end": "1317000"
  },
  {
    "text": "really important about those for now is that it um they should be avoided when when",
    "start": "1317000",
    "end": "1322360"
  },
  {
    "text": "generating your C your certificates so we control the key size right as you saw I I just create the key and I made a",
    "start": "1322360",
    "end": "1328640"
  },
  {
    "text": "2048 bits we don't control the signature algorithms um those are uh dictated by",
    "start": "1328640",
    "end": "1335240"
  },
  {
    "text": "the certificate Authority um and browsers browsers have already retired support for md5 that's",
    "start": "1335240",
    "end": "1341799"
  },
  {
    "text": "long gone um and they're currently in the process of retiring support for sha one so starting this month um so the",
    "start": "1341799",
    "end": "1348240"
  },
  {
    "start": "1343000",
    "end": "1399000"
  },
  {
    "text": "next version of Chrome will actually issue an alarm or not an alarm but it it won't give you the nice URL bar if you",
    "start": "1348240",
    "end": "1355320"
  },
  {
    "text": "use a SSL certificate that's been signed by shawun that expires later than",
    "start": "1355320",
    "end": "1360640"
  },
  {
    "text": "December 31st 2016 right it's a quite far away and most people only have one year SS so",
    "start": "1360640",
    "end": "1366240"
  },
  {
    "text": "it's not a not a big problem at this point early next year starting in the first quarter of next year all of these",
    "start": "1366240",
    "end": "1371919"
  },
  {
    "text": "browsers are going to start doing the same for certificates that us sha one that are expire later than December 31st",
    "start": "1371919",
    "end": "1378640"
  },
  {
    "text": "December 2015 um so that's when that will start being being a real problem so if you're",
    "start": "1378640",
    "end": "1384320"
  },
  {
    "text": "getting certificates or renewing certificates from a certificate Authority um you want to get uh one that",
    "start": "1384320",
    "end": "1390880"
  },
  {
    "text": "sign with a more modern signing algorithm like um sha 256 or sha 2 any",
    "start": "1390880",
    "end": "1397200"
  },
  {
    "text": "of the Sha 2 family and so uh the role that these signatures",
    "start": "1397200",
    "end": "1403000"
  },
  {
    "text": "play has to do with how certificate certificates are authenticated",
    "start": "1403000",
    "end": "1409000"
  },
  {
    "text": "okay so we saw that the server just vended the certificate which contains the public key and at the the end of",
    "start": "1409000",
    "end": "1415559"
  },
  {
    "text": "that blob of data is a signature and that that signature is an encrypted hash",
    "start": "1415559",
    "end": "1420960"
  },
  {
    "text": "of that document that's been encrypted using the private key of the certificate",
    "start": "1420960",
    "end": "1426320"
  },
  {
    "text": "Authority right so the certificate Authority is validating that you are who you say you are and uh choosing to sign",
    "start": "1426320",
    "end": "1433080"
  },
  {
    "text": "that document um it's common to see intermediates like this where we",
    "start": "1433080",
    "end": "1439320"
  },
  {
    "text": "actually have our certificate was signed by an intermediate certificate Vera sign in this case which in turn was signed by",
    "start": "1439320",
    "end": "1446440"
  },
  {
    "text": "a root certificate and the reason for that is that the root certificates are",
    "start": "1446440",
    "end": "1452039"
  },
  {
    "text": "literally compiled into your browser so when you download a browser or or client",
    "start": "1452039",
    "end": "1458600"
  },
  {
    "text": "those essentially contain a pre-baked list of what the root certificates are and they're very hard to change um and",
    "start": "1458600",
    "end": "1465919"
  },
  {
    "text": "so if one of those root certificates was ever compromised to would be a major nuisance to be everybody in the world",
    "start": "1465919",
    "end": "1471360"
  },
  {
    "text": "having to update their browsers so to mitigate that risk uh CA use these intermediates on a day-to-day basis um",
    "start": "1471360",
    "end": "1478240"
  },
  {
    "text": "and so if the intermediate certificate is um compromised in some way there is a",
    "start": "1478240",
    "end": "1484440"
  },
  {
    "text": "revocation scheme which applies to certificates in general it also applies to uh intermediate certificates the way",
    "start": "1484440",
    "end": "1490760"
  },
  {
    "text": "that revocation scheme works is if a certificate is compromised you call up the certificate Authority and they add",
    "start": "1490760",
    "end": "1497679"
  },
  {
    "text": "the fingerprint of that compromise certificate to what are called crl certificate revocation lists which they",
    "start": "1497679",
    "end": "1503600"
  },
  {
    "text": "update at least once a day it's just a long long list of certificates that have been revoked unfortunately clients are",
    "start": "1503600",
    "end": "1509559"
  },
  {
    "text": "near universally terrible at checking crls and uh don't don't do a great job",
    "start": "1509559",
    "end": "1515120"
  },
  {
    "text": "of of validating that it's actually been revoked um browsers are getting much much better at this chrome will uh check",
    "start": "1515120",
    "end": "1521880"
  },
  {
    "text": "things but it's still it's not not a super reliable process so something else that um has been getting more more",
    "start": "1521880",
    "end": "1528480"
  },
  {
    "start": "1526000",
    "end": "1579000"
  },
  {
    "text": "popular lately is the online certificate status protocol and the way that this",
    "start": "1528480",
    "end": "1535000"
  },
  {
    "text": "works is uh your server your web server which has um has your private key what",
    "start": "1535000",
    "end": "1541159"
  },
  {
    "text": "it does is it dials into your ca your certificate Authority few times a day and asks it to sign a token and that",
    "start": "1541159",
    "end": "1548200"
  },
  {
    "text": "token has a lifetime measured in hours and for every SSL request you send out that token and your browser can validate",
    "start": "1548200",
    "end": "1554840"
  },
  {
    "text": "that token and since it has a much shorter lifetime may it it uh it mitigates the risk there's no",
    "start": "1554840",
    "end": "1560880"
  },
  {
    "text": "certificate that valid for for years at a time um so Amazon cloudfront supports ocsp today if you have a um certificate",
    "start": "1560880",
    "end": "1570120"
  },
  {
    "text": "Authority that supports ocsp you can upload your certificate with cloudfront and it'll it'll do",
    "start": "1570120",
    "end": "1575960"
  },
  {
    "text": "this okay so the next phase is optional um although we try really hard to use it",
    "start": "1575960",
    "end": "1583600"
  },
  {
    "start": "1579000",
    "end": "1733000"
  },
  {
    "text": "all the time and that's where per perfect forward secrecy kicks it and so what happens at this",
    "start": "1583600",
    "end": "1590200"
  },
  {
    "text": "phase is that the server uh makes up a random value and then it does some",
    "start": "1590200",
    "end": "1596919"
  },
  {
    "text": "exponentiation and modular arithmetic with this value per the Diffy Helman algorithm and sends the result of that",
    "start": "1596919",
    "end": "1604120"
  },
  {
    "text": "equ of that computation uh to the client doesn't send the secret value itself just sends the result of that",
    "start": "1604120",
    "end": "1611080"
  },
  {
    "text": "computation um the client then essentially does the same client makes up its own random value and uh does its",
    "start": "1611080",
    "end": "1617720"
  },
  {
    "text": "own expon entiation and modular arithmetic can sends that to the server and the magic of the Diffy hman",
    "start": "1617720",
    "end": "1623159"
  },
  {
    "text": "algorithm is that despite not exchanging um either of these secret values the way the arithmetic works out they can both",
    "start": "1623159",
    "end": "1629559"
  },
  {
    "text": "agree on a key um that is the same they'll both end up with the the same uh",
    "start": "1629559",
    "end": "1635120"
  },
  {
    "text": "shared secret though that shared secret hasn't gone across the wire in any way and even if somebody observed both",
    "start": "1635120",
    "end": "1641720"
  },
  {
    "text": "messages saw what the client was sending and saw what the server is sending they still wouldn't be able to figure out that key which sounds impossible but",
    "start": "1641720",
    "end": "1648320"
  },
  {
    "text": "it's it's not and if you're curious for more detail uh the Wikipedia article is pretty good um on Diffy Helman some good",
    "start": "1648320",
    "end": "1655919"
  },
  {
    "text": "visualizations and details on how that all works and the great benefit of this",
    "start": "1655919",
    "end": "1661399"
  },
  {
    "text": "is that um it transforms the security of your your private key so the alternative",
    "start": "1661399",
    "end": "1668440"
  },
  {
    "text": "the Legacy version is that at this point the client essentially just makes up a shared secret encrypts it using your",
    "start": "1668440",
    "end": "1675320"
  },
  {
    "text": "your uh your public private key pair and sends it to the server right and that's how a key is exchanged and the weakness",
    "start": "1675320",
    "end": "1682840"
  },
  {
    "text": "in that is that well if you ever lost um your your key it's not just that",
    "start": "1682840",
    "end": "1688679"
  },
  {
    "text": "somebody would be able to impersonate your server it's also that they would be able to decrypt traffic that they had",
    "start": "1688679",
    "end": "1694399"
  },
  {
    "text": "recorded because they would be able to go back and see these key exchanges they would be able to decrypt them because",
    "start": "1694399",
    "end": "1700039"
  },
  {
    "text": "they now have the private key and they would be able to figure out what the shared secret was and then using that to",
    "start": "1700039",
    "end": "1705159"
  },
  {
    "text": "cryp the rest of the traffic with perfect forward Secret Y and the the Diffy Helman key agreement algorithm",
    "start": "1705159",
    "end": "1712120"
  },
  {
    "text": "that's no longer possible so if a key is is lost somebody may still be able to impersonate that server but they can't",
    "start": "1712120",
    "end": "1718919"
  },
  {
    "text": "decrypt the traffic um which is pretty amazing so that's why it's called perfect forward secrecy your your",
    "start": "1718919",
    "end": "1725519"
  },
  {
    "text": "Communications are secure for the future even if the uh even if the key is",
    "start": "1725519",
    "end": "1730919"
  },
  {
    "text": "somehow compromised so next phase the server's finished it's got everything it needs um",
    "start": "1730919",
    "end": "1738720"
  },
  {
    "start": "1733000",
    "end": "1752000"
  },
  {
    "text": "client's finished it's got everything it needs um there's a change Cipher Suite message in there that I've hidden and we",
    "start": "1738720",
    "end": "1745039"
  },
  {
    "text": "get onto the business of actually sending uh the data everything we've",
    "start": "1745039",
    "end": "1750080"
  },
  {
    "text": "seen here is a negotiation uh SSL and TLS also supports",
    "start": "1750080",
    "end": "1755279"
  },
  {
    "start": "1752000",
    "end": "1786000"
  },
  {
    "text": "renegotiations so you can go through this whole operation again um if you want to get a different shared secret",
    "start": "1755279",
    "end": "1761240"
  },
  {
    "text": "you really know need to do that if you're transmitting very very large amounts of data like pedabytes or if",
    "start": "1761240",
    "end": "1766360"
  },
  {
    "text": "you've got connections lasting very very long periods of time months years um",
    "start": "1766360",
    "end": "1771799"
  },
  {
    "text": "renegotiations have been associated with three of these um vulnerabilities over",
    "start": "1771799",
    "end": "1776880"
  },
  {
    "text": "the years so we disable them where they can where we can so renegotiations are disabled on every AWS API uh Cloud",
    "start": "1776880",
    "end": "1783200"
  },
  {
    "text": "forestry don't accept renegotiations um so so far we've dealt with the first half of what's going in",
    "start": "1783200",
    "end": "1790399"
  },
  {
    "start": "1786000",
    "end": "1801000"
  },
  {
    "text": "going on in the cyppher suite we've seen perfect forward secrecy we've seen RSA and ecdsa at work um the rest of the",
    "start": "1790399",
    "end": "1798279"
  },
  {
    "text": "communication concerns the second part so the way um SSL encrypts data on The Wire",
    "start": "1798279",
    "end": "1805360"
  },
  {
    "start": "1801000",
    "end": "1837000"
  },
  {
    "text": "it's got a very simple record format so the data that's being sent is just encapsulated this very simple header and",
    "start": "1805360",
    "end": "1812399"
  },
  {
    "text": "encrypted there's two main types of Cipher that we see encryption just encryption algorithm types uh streaming",
    "start": "1812399",
    "end": "1820480"
  },
  {
    "text": "just means that it can encrypt an arbitrarily sized amount of data and block ciphers uh which just means they",
    "start": "1820480",
    "end": "1826600"
  },
  {
    "text": "can block they can encrypt fixed size blocks at a time typically 16",
    "start": "1826600",
    "end": "1831880"
  },
  {
    "text": "bytes uh when those are decrypted they have an internal format",
    "start": "1831880",
    "end": "1837000"
  },
  {
    "start": "1837000",
    "end": "1863000"
  },
  {
    "text": "um and internally you know you decrypt it you get data and you get a hmac so",
    "start": "1837000",
    "end": "1842720"
  },
  {
    "text": "hmac is just hash based message authentication code and that's just how algorithms like md5 and Shia one are",
    "start": "1842720",
    "end": "1849399"
  },
  {
    "text": "used to authenticate um and verify that this data hasn't been changed in the block case there's also a pad because",
    "start": "1849399",
    "end": "1856159"
  },
  {
    "text": "the amount of data you're sending might not C respond exactly to the block size so you got to Pat it out a",
    "start": "1856159",
    "end": "1861600"
  },
  {
    "text": "little uh unfortunately um the nature of this padding has been its own uh source of of",
    "start": "1861600",
    "end": "1869960"
  },
  {
    "text": "U many of the problems found in um in TLS and SSL over the years so refinements have been made uh in TLS 1.1",
    "start": "1869960",
    "end": "1878360"
  },
  {
    "start": "1876000",
    "end": "1893000"
  },
  {
    "text": "and 1.2 they changed it a little as you can see there at the top format and in TLS 1.2 uh We've abandoned padding all",
    "start": "1878360",
    "end": "1885919"
  },
  {
    "text": "together and we've actually and we've also moved got rid of those H Max and moved those to the top those are just",
    "start": "1885919",
    "end": "1891039"
  },
  {
    "text": "some of the internal differences um but I wanted to go through one just one of the of the recent vulnerabilities poodle",
    "start": "1891039",
    "end": "1897559"
  },
  {
    "text": "just to give kind of Representative example of of how these things work so an sslv3 the oldest production version",
    "start": "1897559",
    "end": "1905360"
  },
  {
    "text": "of uh the SSL protocol um it uses a traditional block encryption mode at least uh anything",
    "start": "1905360",
    "end": "1912679"
  },
  {
    "text": "that is vulnerable to poodle does uh and so that looks like that and poodle kicks",
    "start": "1912679",
    "end": "1918559"
  },
  {
    "text": "in when the amount of padding that you have happens to be the same as the block size and what happens in that case is if",
    "start": "1918559",
    "end": "1926240"
  },
  {
    "text": "I copy an early block to to where the padding is it'll actually accept it in",
    "start": "1926240",
    "end": "1931720"
  },
  {
    "text": "some cases um because sslv3 didn't put constraints on what the padding can look",
    "start": "1931720",
    "end": "1936760"
  },
  {
    "text": "like so when that gets decrypted apart from one bite at the end it actually doesn't care what the padding looks like so it'll accept any arbitrary values so",
    "start": "1936760",
    "end": "1944720"
  },
  {
    "text": "if you do this uh about one in2 56 times",
    "start": "1944720",
    "end": "1950080"
  },
  {
    "text": "it'll decrypt to a value that has the right value in that final bite needs to be 15 um and that allows us to figure",
    "start": "1950080",
    "end": "1958519"
  },
  {
    "text": "out what that what the bite was in the block that we copied so this orange bite",
    "start": "1958519",
    "end": "1963559"
  },
  {
    "text": "that I have here right so if we're repeating the same message like making the same request hundreds and hundreds",
    "start": "1963559",
    "end": "1969559"
  },
  {
    "text": "of times and we have an SSL record somewhere in that stream and an attacker",
    "start": "1969559",
    "end": "1975159"
  },
  {
    "text": "you know takes the connection copies a block puts it over a later block they can over hundreds and hundreds of um",
    "start": "1975159",
    "end": "1982320"
  },
  {
    "text": "requests figure out what one bite is okay so that might not seem too",
    "start": "1982320",
    "end": "1987480"
  },
  {
    "text": "concerning but the uh another interesting thing about PO is a good",
    "start": "1987480",
    "end": "1993200"
  },
  {
    "start": "1988000",
    "end": "2008000"
  },
  {
    "text": "representative of how tax have been improving to use properties of the",
    "start": "1993200",
    "end": "1998240"
  },
  {
    "text": "application protocol that were running on top of SSL um to get even more data",
    "start": "1998240",
    "end": "2003360"
  },
  {
    "text": "out so these used similar techniques and so what we're doing is we're",
    "start": "2003360",
    "end": "2008880"
  },
  {
    "start": "2008000",
    "end": "2042000"
  },
  {
    "text": "um so if we start off and we have a request right uh and we're able to line things up so that we can decrypt one",
    "start": "2008880",
    "end": "2015159"
  },
  {
    "text": "bite of the cookie right that just happens to be where that record is we can use JavaScript or other browser",
    "start": "2015159",
    "end": "2021000"
  },
  {
    "text": "exploitation um techniques to do very simple things like just add one bite to",
    "start": "2021000",
    "end": "2026600"
  },
  {
    "text": "the request and now you've moved the cookie over right and so by working backwards like that you can eventually",
    "start": "2026600",
    "end": "2032559"
  },
  {
    "text": "discover what the entire cookie is it's kind of cool um so this is why sslv3",
    "start": "2032559",
    "end": "2039399"
  },
  {
    "text": "should definitely be turned off where possible so how we protect against all these well we use the latest most modern",
    "start": "2039399",
    "end": "2047240"
  },
  {
    "text": "versions of the TLs protocol where possible we always prefer to use TLS 1.2 and we try to um use the correct",
    "start": "2047240",
    "end": "2055200"
  },
  {
    "text": "combination of cyber Suites this is my cheat sheet I'm going to try and explain",
    "start": "2055200",
    "end": "2060398"
  },
  {
    "text": "how we order them um and the way we ordered them is uh so as as we work down",
    "start": "2060399",
    "end": "2066358"
  },
  {
    "text": "so with the the better the better algorithms are at the top and we go left to right so we always try to use an",
    "start": "2066359",
    "end": "2073839"
  },
  {
    "text": "algorithm that supports ecdhe that's perfect forward secrecy and it's the fastest kind we really really like that",
    "start": "2073839",
    "end": "2080599"
  },
  {
    "text": "so in an ideal case we try to negotiate using you know ecdhe for perfect forward",
    "start": "2080599",
    "end": "2085720"
  },
  {
    "text": "secrecy ecdsa for doing that fast uh public private encryption aes128 because",
    "start": "2085720",
    "end": "2091878"
  },
  {
    "text": "it's got a good balance of performance and security for actually encrypting and decrypting data and GSM for validating",
    "start": "2091879",
    "end": "2097880"
  },
  {
    "text": "records but if GSM weren't available we'd move down to sha 128 and so on we'd",
    "start": "2097880",
    "end": "2103599"
  },
  {
    "text": "work our way through it and then if we go through all of those we'll move one over to the to the",
    "start": "2103599",
    "end": "2109760"
  },
  {
    "text": "left and we'll go down to the um to the next available encryption algorithm just work our way through and in very worst",
    "start": "2109760",
    "end": "2116000"
  },
  {
    "text": "case we'll end up using no perfect forward sequency or SA or C4 and Shia",
    "start": "2116000",
    "end": "2122040"
  },
  {
    "text": "one we don't go all the way to md5 we we've disabled that we don't need it with clients um and that's how we order",
    "start": "2122040",
    "end": "2127240"
  },
  {
    "text": "things to just take that list and uh iterate through it like that uh the way we determine whether that's safe to do",
    "start": "2127240",
    "end": "2134560"
  },
  {
    "text": "is something that's uh pretty easy and you can um uh do for yourself as well if You' ever making changes to Cipher Suite",
    "start": "2134560",
    "end": "2141119"
  },
  {
    "text": "preferences and you're worried about breaking certain clients uh we just do day overday analysis so we take two days",
    "start": "2141119",
    "end": "2149400"
  },
  {
    "start": "2145000",
    "end": "2207000"
  },
  {
    "text": "and we do nothing that's important and we just compare uh the uh compare our",
    "start": "2149400",
    "end": "2155119"
  },
  {
    "text": "request patterns day over day order or indexed by user agent um and we do nothing because",
    "start": "2155119",
    "end": "2161960"
  },
  {
    "text": "that's our control right that's our control experiment we just want to see what the base rate of change is between 92 days and then another two days uh we",
    "start": "2161960",
    "end": "2170000"
  },
  {
    "text": "do the same thing but we change it we change those Cipher site preferences dealing on a test endpoint or something",
    "start": "2170000",
    "end": "2176200"
  },
  {
    "text": "that isn't critical to business right maybe just a a small transparent image that's buried in a background of your",
    "start": "2176200",
    "end": "2182319"
  },
  {
    "text": "website and uh you know maybe remove or add some some Cipher Suites and then just see what changed and if you saw any",
    "start": "2182319",
    "end": "2188240"
  },
  {
    "text": "user agents disappear that's a really strong hint that uh those um those depend on some algorithm which you've",
    "start": "2188240",
    "end": "2194560"
  },
  {
    "text": "just tried to remove and you might have to add it back again or decide you're okay losing those clients um and that's how we arrive at",
    "start": "2194560",
    "end": "2201800"
  },
  {
    "text": "things like the the cipher suet lists that you see used across our",
    "start": "2201800",
    "end": "2206880"
  },
  {
    "text": "services um so all of the AWS apis use htps every single one um that you can",
    "start": "2206880",
    "end": "2214319"
  },
  {
    "text": "connect to we've actually layered on top of that some additional cryptographic protections uh with things like our",
    "start": "2214319",
    "end": "2220839"
  },
  {
    "text": "sigv4 authentication algorithm for actually authenticating the RIS the requests uh where we do more on top we",
    "start": "2220839",
    "end": "2226880"
  },
  {
    "text": "we uh we now have TLS 1.2 deployed uh pretty much universally across all of",
    "start": "2226880",
    "end": "2232359"
  },
  {
    "text": "our services uh we have perfect forward sequency enabled everywhere and always preferred uh we use GCM just the",
    "start": "2232359",
    "end": "2241000"
  },
  {
    "text": "algorithm uh the TLs 1.2 prefers for doing a record authentication wherever",
    "start": "2241000",
    "end": "2246160"
  },
  {
    "text": "possible uh and we we prefer uh the encryption algorithms in those that order we do keep rc4 around as a last",
    "start": "2246160",
    "end": "2252599"
  },
  {
    "text": "resort because we do see about half a percent of clients that only support rc4 which is uh very",
    "start": "2252599",
    "end": "2258880"
  },
  {
    "text": "unfortunate but tends to be embedded devices that have very low um CPU power",
    "start": "2258880",
    "end": "2264640"
  },
  {
    "text": "and rc4 is a very CPU efficient algorithm so uh we see them we see them keep on that but at the other end of the",
    "start": "2264640",
    "end": "2271480"
  },
  {
    "text": "scale where we've got very performant CPUs is ec2 um so on ec2 our our modern instance",
    "start": "2271480",
    "end": "2279720"
  },
  {
    "start": "2274000",
    "end": "2308000"
  },
  {
    "text": "types uh all support the as Andi instruction set so that's just native instructions for doing as encryption uh",
    "start": "2279720",
    "end": "2286839"
  },
  {
    "text": "they can also um do parts of the Sha one uh or sorry sha family um in Hardware 2",
    "start": "2286839",
    "end": "2294800"
  },
  {
    "text": "um and so if you're running SSL services on ec2 try maybe try to use one of these",
    "start": "2294800",
    "end": "2300319"
  },
  {
    "text": "platforms where you can gain Hardware acceleration um if you're Building open",
    "start": "2300319",
    "end": "2305640"
  },
  {
    "text": "SSL for yourself on E um I have a script here for reference and these slides will be online later so",
    "start": "2305640",
    "end": "2312040"
  },
  {
    "text": "you'll be able to grab that but that will build an optimized version of uh of open SSL on ec2 it also disables a bunch",
    "start": "2312040",
    "end": "2319480"
  },
  {
    "text": "of things that no one uses um the other thing you can do uh and",
    "start": "2319480",
    "end": "2325680"
  },
  {
    "start": "2322000",
    "end": "2352000"
  },
  {
    "text": "this works across uh all of our services too is to use hsts which is just strict",
    "start": "2325680",
    "end": "2331480"
  },
  {
    "text": "Transport Security and all that is is a header in your HTTP responses that",
    "start": "2331480",
    "end": "2336599"
  },
  {
    "text": "essentially tell the browser I'm accessible over htps and you should use https uh so even if the URLs don't have",
    "start": "2336599",
    "end": "2343599"
  },
  {
    "text": "https and them come back over htps um is a great pattern if you're uh",
    "start": "2343599",
    "end": "2350520"
  },
  {
    "text": "configuring engine X or Apache or light HPD on on ec2 uh Mozilla have a great",
    "start": "2350520",
    "end": "2355720"
  },
  {
    "start": "2352000",
    "end": "2371000"
  },
  {
    "text": "website they put online last week uh which you can plug plug in what you want if you use the modern or intermediate",
    "start": "2355720",
    "end": "2361480"
  },
  {
    "text": "settings here it'll generate a config for you and their their order preferences pretty much match exactly",
    "start": "2361480",
    "end": "2367160"
  },
  {
    "text": "that sheat sheet I just went through um elastic low bouncing is product I",
    "start": "2367160",
    "end": "2374160"
  },
  {
    "start": "2371000",
    "end": "2416000"
  },
  {
    "text": "work on uh so the same day as the pool of vulnerability came out we launched the the 2014",
    "start": "2374160",
    "end": "2380560"
  },
  {
    "text": "-10 um security policy which again uses the preferences from that cheat sheet",
    "start": "2380560",
    "end": "2386720"
  },
  {
    "text": "but um also turns off sslv3 definitely recommend using it if at all possible",
    "start": "2386720",
    "end": "2392280"
  },
  {
    "text": "unless you've got uh Legacy clients out there that are business critical and insist on using SSL V3 um this is",
    "start": "2392280",
    "end": "2399000"
  },
  {
    "text": "definitely the policy uh you want to be using and uh we've seen a high rate of",
    "start": "2399000",
    "end": "2404160"
  },
  {
    "text": "adoption for this it's been it's been good elb supports session IDs for caching so you can do that quick session",
    "start": "2404160",
    "end": "2410960"
  },
  {
    "text": "resumption and hsts uh works pretty transparently with it as well uh",
    "start": "2410960",
    "end": "2416480"
  },
  {
    "text": "cloudfront um cloudfront has two kinds of SSL certificate support um the first",
    "start": "2416480",
    "end": "2422240"
  },
  {
    "text": "is custom SSL certificates which launched first that's where you upload a certificate and it'll serve SSL and it",
    "start": "2422240",
    "end": "2428520"
  },
  {
    "text": "works with all clients including Legacy clients um and then it has an Sni",
    "start": "2428520",
    "end": "2434040"
  },
  {
    "text": "variant of SSL certificates which is free but only works with Sni clients which uh is all modern browsers and and",
    "start": "2434040",
    "end": "2441240"
  },
  {
    "text": "phones and so on um but is and is I think above 98% of the traffic but um",
    "start": "2441240",
    "end": "2448319"
  },
  {
    "text": "but not suitable if you've got Legacy clients that don't send the Sni header uh sslv3 uh can be enabled or disabled",
    "start": "2448319",
    "end": "2455400"
  },
  {
    "text": "it's it's off by default um if you really really need to use sslv3 there is a way to opt into using it with Cloud",
    "start": "2455400",
    "end": "2461640"
  },
  {
    "text": "font um it also supports hsts and uh ocsp as I mentioned earlier",
    "start": "2461640",
    "end": "2468359"
  },
  {
    "text": "it uses session tickets for caching which is a slightly different um revision on session IDs so session IDs",
    "start": "2468359",
    "end": "2476800"
  },
  {
    "text": "the way they work is every session is given an identifier and then on the server side you've got a cache like um",
    "start": "2476800",
    "end": "2484160"
  },
  {
    "text": "elastic cache that's caching all those sessions for you and when the reconnect come back comes back identifies with",
    "start": "2484160",
    "end": "2490040"
  },
  {
    "text": "that ID and you have to find the session from your cach and then reuse it session tickets are different they're just bigger and they're big enough that you",
    "start": "2490040",
    "end": "2496000"
  },
  {
    "text": "can actually just encrypt the entire session using a different key and send it back to the client to keep just the",
    "start": "2496000",
    "end": "2501800"
  },
  {
    "text": "way it would keep a cookie um and so when it reconnects it gives you that session ticket you decrypt it and you're good to go um so they tend to be more",
    "start": "2501800",
    "end": "2509880"
  },
  {
    "text": "scalable and so cloudfront with a global Forint um prefers to use those which",
    "start": "2509880",
    "end": "2515000"
  },
  {
    "text": "makes sense um the key things to take away from all",
    "start": "2515000",
    "end": "2520319"
  },
  {
    "start": "2518000",
    "end": "2623000"
  },
  {
    "text": "that um are it's it's it's increasingly",
    "start": "2520319",
    "end": "2525560"
  },
  {
    "text": "critical to to use the latest versions of the protocol um TLS 1.2 is definitely",
    "start": "2525560",
    "end": "2532000"
  },
  {
    "text": "in a much much better position a lot was simplified between uh TLS 1.1 and 1.2 um uh so it's if if you're using",
    "start": "2532000",
    "end": "2540559"
  },
  {
    "text": "that probably in in a much better position than the other versions of TLS um it's key to have tested upgrade paths",
    "start": "2540559",
    "end": "2546960"
  },
  {
    "text": "it's it's not fun dealing with Legacy clients that aren't updating regularly um and if you're left having to decide",
    "start": "2546960",
    "end": "2555280"
  },
  {
    "text": "between turning something off and uh losing clients that can be not not a fun thing to deal with um",
    "start": "2555280",
    "end": "2563720"
  },
  {
    "text": "hsts is great on on the other side um so the algorithm is worth avoiding so RSA",
    "start": "2563720",
    "end": "2569720"
  },
  {
    "text": "1024 as we mentioned orc4 is the the least preferred encryption algorithm the reason for that is because there are",
    "start": "2569720",
    "end": "2576280"
  },
  {
    "text": "biases in that algorithm where over hundreds of thousands of connections if the same data is being sent it's",
    "start": "2576280",
    "end": "2582079"
  },
  {
    "text": "possible to to guess at what the first 256 bytes might be um which is not great",
    "start": "2582079",
    "end": "2588520"
  },
  {
    "text": "uh sslv2 and V3 should be disabled as we've covered um and the final thing",
    "start": "2588520",
    "end": "2593680"
  },
  {
    "text": "which I mention earlier is uh something we've maybe all seen um is if you've got",
    "start": "2593680",
    "end": "2599079"
  },
  {
    "text": "scripts or uh other utilities lying around that completely disable SSL",
    "start": "2599079",
    "end": "2604440"
  },
  {
    "text": "authentication like curl dka or D s insecure uh a lot of the benefits of SSL",
    "start": "2604440",
    "end": "2610000"
  },
  {
    "text": "go away because nothing's authenticating that endpoint and anything can come in and um pretend or spoof itself uh",
    "start": "2610000",
    "end": "2618400"
  },
  {
    "text": "claiming to be any service which is uh which is not great um there's some more",
    "start": "2618400",
    "end": "2623480"
  },
  {
    "start": "2623000",
    "end": "2669000"
  },
  {
    "text": "talks at reinvent they'll cover SSL um in more product specific ways uh so I to",
    "start": "2623480",
    "end": "2631880"
  },
  {
    "text": "tomorrow's talk on elastic low balancing uh it's a 400 level talk and that's that's going to cover some of the SSL",
    "start": "2631880",
    "end": "2638599"
  },
  {
    "text": "configurations that are possible there and this the milliseconds matter talk is about um using cdns and cloudfront to",
    "start": "2638599",
    "end": "2647440"
  },
  {
    "text": "accelerate things at the edge and goes into a little more uh depth on the product side about how the particulars",
    "start": "2647440",
    "end": "2652520"
  },
  {
    "text": "of uh cloudfronts ocsp support works and how all that can can speed things",
    "start": "2652520",
    "end": "2658079"
  },
  {
    "text": "up um thank you very much for coming that's everything I had on the",
    "start": "2658079",
    "end": "2665640"
  },
  {
    "text": "sone",
    "start": "2666040",
    "end": "2669040"
  }
]