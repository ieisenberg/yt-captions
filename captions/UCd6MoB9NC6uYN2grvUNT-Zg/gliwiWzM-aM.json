[
  {
    "text": "good afternoon I'm Kyle stringer I am co-founder",
    "start": "9500",
    "end": "14620"
  },
  {
    "text": "company called Mary web and we are a social media and website archiving",
    "start": "14620",
    "end": "19630"
  },
  {
    "text": "company our primary line of business is to provide social media and website archiving for compliance purposes in the",
    "start": "19630",
    "end": "26560"
  },
  {
    "text": "financial sector we've recently taken over a contract with the National",
    "start": "26560",
    "end": "31930"
  },
  {
    "text": "Archives migrate to provide all website archiving for central government website",
    "start": "31930",
    "end": "38320"
  },
  {
    "text": "content and all the content that's pushed out by the government accounts on Twitter and YouTube possibly other",
    "start": "38320",
    "end": "45010"
  },
  {
    "text": "social media platforms in the future but for now we focus on Twitter and YouTube",
    "start": "45010",
    "end": "50800"
  },
  {
    "text": "for the National Archives or the platforms for the financial services sector as I said we've recently acquired",
    "start": "50800",
    "end": "62199"
  },
  {
    "text": "the contract for the National Archives which it's going to involve an initial",
    "start": "62199",
    "end": "68950"
  },
  {
    "text": "ingest of over a hundred terabytes of existing data that the National Archives hold from their existing supplier we",
    "start": "68950",
    "end": "78660"
  },
  {
    "text": "need to make sure that we can solve the challenge of serving a front-end that's",
    "start": "78660",
    "end": "83800"
  },
  {
    "text": "going to be capable of serving 100 million requests per month so if that",
    "start": "83800",
    "end": "90820"
  },
  {
    "text": "was something that we were going to be deploying on traditional hardware with our own load balancers and suchlike it",
    "start": "90820",
    "end": "96280"
  },
  {
    "text": "would be a bit of a challenge we'd have all the issues of having to mitigate",
    "start": "96280",
    "end": "102820"
  },
  {
    "text": "against unexpected load so as we'd expect when the service goes out there's",
    "start": "102820",
    "end": "108250"
  },
  {
    "text": "probably gonna be quite a strong media focus on it and when that happens we",
    "start": "108250",
    "end": "113680"
  },
  {
    "text": "need to be confident that we can take on that peak load it may end up being way more than that expected load but as",
    "start": "113680",
    "end": "121270"
  },
  {
    "text": "you'll understand this service doesn't really matter that's the service and the technology can scale automatically from",
    "start": "121270",
    "end": "128259"
  },
  {
    "text": "AWS to deal with that for us this service is due to launch in summer",
    "start": "128259",
    "end": "133870"
  },
  {
    "text": "2017 so by that point we've got to get everything set up we've got to get",
    "start": "133870",
    "end": "139420"
  },
  {
    "text": "everything provisioned we've got to deal with the ingest we've got to deal with all our testing and get everything integrated and ready to go live",
    "start": "139420",
    "end": "146290"
  },
  {
    "text": "and as the government has got a fantastic cloud-first strategy that",
    "start": "146290",
    "end": "153519"
  },
  {
    "text": "enables us to really embrace cloud solutions like AWS whereas previously",
    "start": "153519",
    "end": "160209"
  },
  {
    "text": "the issue around data sovereignty and suchlike might have been a concern we've now got the London data center so that",
    "start": "160209",
    "end": "166720"
  },
  {
    "text": "opens up a whole new array of options for us now so originally when we built",
    "start": "166720",
    "end": "174189"
  },
  {
    "text": "the mirror web service we built it as a monolith which was it served our purposes at the time we put all of our",
    "start": "174189",
    "end": "182439"
  },
  {
    "text": "website archiving technology and our social media archiving technology within the same system that also included",
    "start": "182439",
    "end": "189189"
  },
  {
    "text": "things like our reporting engine and use and management it seemed logical at the",
    "start": "189189",
    "end": "194290"
  },
  {
    "text": "time because there was a lot of code that was kind of shared functionality between business logic but as we",
    "start": "194290",
    "end": "201280"
  },
  {
    "text": "continued to develop the product and we threw more development resources at it it became a bit of a nightmare to",
    "start": "201280",
    "end": "206379"
  },
  {
    "text": "maintain so we'd end up in the position where if we wanted to roll out a quick patch or a small fix to let's say that",
    "start": "206379",
    "end": "214000"
  },
  {
    "text": "Twitter changed our API and we need to implement a change that would mean in",
    "start": "214000",
    "end": "219099"
  },
  {
    "text": "the monolithic structure we'd need to deploy everything again we need to update all of our servers so so just",
    "start": "219099",
    "end": "227109"
  },
  {
    "text": "change one simple thing in a Twitter API we'd have to roll out all our web archiving service again and everything",
    "start": "227109",
    "end": "232900"
  },
  {
    "text": "just just became a bit bit of a nightmare to maintain really so at that",
    "start": "232900",
    "end": "238569"
  },
  {
    "text": "point we looked to start moving things out into micro services so all of our",
    "start": "238569",
    "end": "244419"
  },
  {
    "text": "website archiving technology became one micro service we'd move our social media archiving technology into another so",
    "start": "244419",
    "end": "251109"
  },
  {
    "text": "they were all self-contained chunks of code rather than being in this one big monolith and initially it was okay",
    "start": "251109",
    "end": "258940"
  },
  {
    "text": "because we'd have a developer working on web archiving and other on the social archiving and other doing the reporting",
    "start": "258940",
    "end": "264280"
  },
  {
    "text": "stuff but then as we started to focus more of our attention since into",
    "start": "264280",
    "end": "269979"
  },
  {
    "text": "developing the social media products we'd kind of just be encountering the same problems that we have to be the",
    "start": "269979",
    "end": "275650"
  },
  {
    "text": "monolith so trying to track changes and make sure that other people's changes didn't can flick with each other and then again",
    "start": "275650",
    "end": "281920"
  },
  {
    "text": "if we're in the middle of a big Cody ploy and something's holding that up what do we do that and do we have to",
    "start": "281920",
    "end": "287890"
  },
  {
    "text": "wait for that whole development cycle and extend the sprint in order to be able to service it so really all we",
    "start": "287890",
    "end": "294760"
  },
  {
    "text": "found it's by splitting our monolith into four sections we just basically created the same problem for time to all",
    "start": "294760",
    "end": "301120"
  },
  {
    "text": "be on a slightly smaller scale so it was at that point it was actually July of",
    "start": "301120",
    "end": "307960"
  },
  {
    "text": "last year when we were at the AWS summit in London we made a conscious decision",
    "start": "307960",
    "end": "313450"
  },
  {
    "text": "to soak up as much information as we could about service because we wanted to be able to rapidly deploy and to just",
    "start": "313450",
    "end": "320050"
  },
  {
    "text": "change with our change in business so we gots a few great talks at the summit and",
    "start": "320050",
    "end": "325410"
  },
  {
    "text": "we got some time with Matt Johnson solutions architects who's here today",
    "start": "325410",
    "end": "330520"
  },
  {
    "text": "and we really helped us to formulate an idea of how we could use this technology",
    "start": "330520",
    "end": "335740"
  },
  {
    "text": "to completely change the paradigm from having this kind of boxes of code in so",
    "start": "335740",
    "end": "341920"
  },
  {
    "text": "completely separating it out into reusable pieces so it was at that point",
    "start": "341920",
    "end": "347830"
  },
  {
    "text": "that we decided to experiment experiment by breaking our social archive in micro",
    "start": "347830",
    "end": "353020"
  },
  {
    "text": "service into a series of individual under functions so rather than having",
    "start": "353020",
    "end": "361090"
  },
  {
    "text": "one collection of code that would deal with all of the requests coming in we'd have one lambda function that would its",
    "start": "361090",
    "end": "367840"
  },
  {
    "text": "sole purpose would be to connect to the Twitter API and download a list of new tweets from Twitter for a particular",
    "start": "367840",
    "end": "373240"
  },
  {
    "text": "account we'd have a separate lambda function solely responsible for downloading images and that could be",
    "start": "373240",
    "end": "380620"
  },
  {
    "text": "made in a generic enough way but as long as you know the input parameters and the",
    "start": "380620",
    "end": "386260"
  },
  {
    "text": "expected output parameters you could make that completely reusable so anything that needs to download an image",
    "start": "386260",
    "end": "392380"
  },
  {
    "text": "could use that same block of code we'd have a separate lambda function to",
    "start": "392380",
    "end": "398770"
  },
  {
    "text": "return content from our database so the user and another one for all sorts of",
    "start": "398770",
    "end": "403900"
  },
  {
    "text": "data aggregation only listed for there but we're probably in the hundreds at the moment with all of our lambda",
    "start": "403900",
    "end": "410169"
  },
  {
    "text": "functions and the beauty of that is each one can be managed independently if we needed to roll out a",
    "start": "410169",
    "end": "415840"
  },
  {
    "text": "change to the Twitter API at this point actually Twitter change the rapey eye in September believe it was the 19th of",
    "start": "415840",
    "end": "423039"
  },
  {
    "text": "September last year they changed the way that the Twitter API worked so we needed to roll out a quick fix and all we had",
    "start": "423039",
    "end": "428830"
  },
  {
    "text": "to do was update that one lambda function we didn't have to worry about all of the issues regards integration",
    "start": "428830",
    "end": "435460"
  },
  {
    "text": "because we knew that the same input and output parameters were going to be there it's just that we've restructured the",
    "start": "435460",
    "end": "440919"
  },
  {
    "text": "Twitter requests within that function so that maintains the interoperability the",
    "start": "440919",
    "end": "447910"
  },
  {
    "text": "problem that you've got when you break things down is this kind of structure as other people mentioned is how you go about unit testing and full flow testing",
    "start": "447910",
    "end": "455050"
  },
  {
    "text": "to make sure that your application works there's a number of ways you can go about it you can write a completely",
    "start": "455050",
    "end": "460810"
  },
  {
    "text": "separate test layer that runs on your application or it's a bit more of a",
    "start": "460810",
    "end": "466330"
  },
  {
    "text": "challenge to actually test on a per function basis because you'd be building this code into lambda into the cloud but",
    "start": "466330",
    "end": "472500"
  },
  {
    "text": "there are ways you can go about it for instance when you build your lambda function you can also build a",
    "start": "472500",
    "end": "478479"
  },
  {
    "text": "command-line variant of it and you can run your tests directly against that then but that code wouldn't get",
    "start": "478479",
    "end": "483520"
  },
  {
    "text": "triggered if it was running within the lander environment the beauty of this as",
    "start": "483520",
    "end": "490960"
  },
  {
    "text": "well using lambda is as everybody else that spoken has said you only pay for it",
    "start": "490960",
    "end": "497590"
  },
  {
    "text": "when it's running so there's an example here we have a single Twitter account",
    "start": "497590",
    "end": "502990"
  },
  {
    "text": "that we were archived in and through the nighttime hours there was no activity so",
    "start": "502990",
    "end": "508539"
  },
  {
    "text": "we set up a chain of lambda functions to only trigger in the instance that we've got stuff to work on so if there's",
    "start": "508539",
    "end": "515260"
  },
  {
    "text": "nothing to work on you're not paying for that and then when the surge comes during the day when all the Twitter activity is going on we can just pay for",
    "start": "515260",
    "end": "522669"
  },
  {
    "text": "those units that we use in and on that basis you pay for the 100 millisecond",
    "start": "522669",
    "end": "527890"
  },
  {
    "text": "increment and a combination of the increments in there in 100 milliseconds",
    "start": "527890",
    "end": "533589"
  },
  {
    "text": "and also a resource allocation in 128 megabytes for your simple level and you",
    "start": "533589",
    "end": "541029"
  },
  {
    "text": "can increase that I think is 64 Meg chunks that it goes up and as you increase your memory allocation they",
    "start": "541029",
    "end": "546850"
  },
  {
    "text": "also creases the CPU allocation as well not something that I've not seen documented",
    "start": "546850",
    "end": "551980"
  },
  {
    "text": "but it's something that we've heard and also on the right there we can see at",
    "start": "551980",
    "end": "557320"
  },
  {
    "text": "execution to raishin and all this information is available within cloud watch and also within the lambda",
    "start": "557320",
    "end": "563950"
  },
  {
    "text": "interface itself so with this you can get really detailed metrics you can",
    "start": "563950",
    "end": "569649"
  },
  {
    "text": "drill down how much it costs to download a single tweet and all of the media that's associated with that you can work",
    "start": "569649",
    "end": "576310"
  },
  {
    "text": "out how much your image download is costing you as a component of that system so in the ability to drive down",
    "start": "576310",
    "end": "584020"
  },
  {
    "text": "costs and improve your efficiencies that is absolutely incredible it's now",
    "start": "584020",
    "end": "589870"
  },
  {
    "text": "becoming the most used component of the idea we are seeing for structure for us and we're doing as much as we can to",
    "start": "589870",
    "end": "595779"
  },
  {
    "text": "move completely service just that ability to work out you and it costs is fantastic and if we can compare that",
    "start": "595779",
    "end": "603160"
  },
  {
    "text": "against maybe running an ec2 for a month that may be doing all of the Twitter",
    "start": "603160",
    "end": "608560"
  },
  {
    "text": "activity for us that's not going to be utilized at all the time so we can't",
    "start": "608560",
    "end": "614290"
  },
  {
    "text": "accurately derive a unit cost on that basis but by using the service technology by using lambda and you get",
    "start": "614290",
    "end": "619690"
  },
  {
    "text": "those detailed metrics it's fantastic for us so lambdas only one of many",
    "start": "619690",
    "end": "627459"
  },
  {
    "text": "components that were using on the service model there are more than we've got listed here for instance you've got",
    "start": "627459",
    "end": "632500"
  },
  {
    "text": "kognito ela with your authentication iCloud front and suchlike but there are five",
    "start": "632500",
    "end": "638770"
  },
  {
    "text": "core ones that are ones focus on are these as I've discussed London off",
    "start": "638770",
    "end": "643930"
  },
  {
    "text": "already we've got dynamo DB which is Amazon's mill sequel database system that's a",
    "start": "643930",
    "end": "650770"
  },
  {
    "text": "very highly scalable and highly available system which rather than you",
    "start": "650770",
    "end": "656230"
  },
  {
    "text": "having to provision a cluster of service of a particular size as you would on a normal relational database system you",
    "start": "656230",
    "end": "663310"
  },
  {
    "text": "just provision read and write capacity on that so if you know that you've got",
    "start": "663310",
    "end": "669100"
  },
  {
    "text": "to need a particular throughput of read and write units you provision that on the database and then you pay for your",
    "start": "669100",
    "end": "674140"
  },
  {
    "text": "access and your use of that and the storage of your data the objects are",
    "start": "674140",
    "end": "679510"
  },
  {
    "text": "stored effectively like JSON files so you don't have to worry about schema changes or",
    "start": "679510",
    "end": "684670"
  },
  {
    "text": "anything like that and Amazon will deal automatically with all of the shard in and such like so it is massively",
    "start": "684670",
    "end": "691120"
  },
  {
    "text": "scalable and you can also attach events to it as well so you can attach let's",
    "start": "691120",
    "end": "698170"
  },
  {
    "text": "say a when a new record is added into a dynamo DB table that can trigger a lambda function that can set off a whole",
    "start": "698170",
    "end": "704440"
  },
  {
    "text": "chain of events brilliant I've got API gateway which acts as the API layer that it sits in between let's",
    "start": "704440",
    "end": "712600"
  },
  {
    "text": "say a front-end website and your lambda functions running in the background so you can build your own api's with that",
    "start": "712600",
    "end": "718600"
  },
  {
    "text": "again scalable highly available we've got Amazon s3 which we use as both",
    "start": "718600",
    "end": "725410"
  },
  {
    "text": "an object storage system and as a static content delivery system absolutely brilliant",
    "start": "725410",
    "end": "730810"
  },
  {
    "text": "again scalable and highly available you don't have to worry about provisioning a storage server above a particular size",
    "start": "730810",
    "end": "736300"
  },
  {
    "text": "because AWS deal with it all for us and finally here we've got step functions",
    "start": "736300",
    "end": "742270"
  },
  {
    "text": "which is something that was released on the 1st of December we were anticipating",
    "start": "742270",
    "end": "748630"
  },
  {
    "text": "it and we picked it up as soon as it came out it's already becoming quite a",
    "start": "748630",
    "end": "754750"
  },
  {
    "text": "core part of our service now I'll explain a bit more later but step functions basically let you chain",
    "start": "754750",
    "end": "761560"
  },
  {
    "text": "together certain functions of activity - phonological flows so you can build mini",
    "start": "761560",
    "end": "767380"
  },
  {
    "text": "applications out of step functions and it and a handful of lambda functions it enables you to do parallel steps",
    "start": "767380",
    "end": "774100"
  },
  {
    "text": "decision steps so if a particular lambda function fails you can handle how that",
    "start": "774100",
    "end": "779770"
  },
  {
    "text": "very failure logic works does it retry does it move on to a failure step and suchlike incredible now all of these",
    "start": "779770",
    "end": "788860"
  },
  {
    "text": "because there's no infrastructure that we have to worry about means that our",
    "start": "788860",
    "end": "795510"
  },
  {
    "text": "requirement on our DevOps and infrastructure management team is is",
    "start": "795510",
    "end": "800770"
  },
  {
    "text": "kind of shifted they're no longer now responsible for provisioning servers and making sure that instances are patched",
    "start": "800770",
    "end": "807970"
  },
  {
    "text": "and such like our infrastructure guys to now focus on writing infrastructure as",
    "start": "807970",
    "end": "813430"
  },
  {
    "text": "code so all of our cloud formation and automatic deployment systems can be",
    "start": "813430",
    "end": "819429"
  },
  {
    "text": "managed by the same guys that would usually have been sat there provisioning systems and because it's all automated",
    "start": "819429",
    "end": "826419"
  },
  {
    "text": "that can respond rapidly so any changes that we make as well now there's a very",
    "start": "826419",
    "end": "833619"
  },
  {
    "text": "basic example here of stripped out some of the functionality such as caching",
    "start": "833619",
    "end": "840009"
  },
  {
    "text": "layers and authentication layers I just want to focus purely on these aspects",
    "start": "840009",
    "end": "845399"
  },
  {
    "text": "but the service model means that we can deploy a whole management interface",
    "start": "845399",
    "end": "851769"
  },
  {
    "text": "without having to worry about a server if you've got an interface that's only being used within office hours then",
    "start": "851769",
    "end": "860679"
  },
  {
    "text": "you've probably got 1215 hours a day when those servers are not being used but you so if you're on a traditional",
    "start": "860679",
    "end": "867069"
  },
  {
    "text": "model he's still playing for that service whether it be provisioned syn or physical service that you've got or",
    "start": "867069",
    "end": "872439"
  },
  {
    "text": "maybe auto-scale groups within Amazon he's still going to be paying for those resources whereas with this model you're",
    "start": "872439",
    "end": "881199"
  },
  {
    "text": "only paying for the requests so for instance Amazon s3 I said we use as both an object storage and as a means of",
    "start": "881199",
    "end": "889569"
  },
  {
    "text": "serving static website concerns so that means it can't actually do any processing of server-side code such as",
    "start": "889569",
    "end": "895689"
  },
  {
    "text": "Python and suchlike however because it can deliver client-side code such as",
    "start": "895689",
    "end": "901569"
  },
  {
    "text": "JavaScript we're able to serve a let's say reacts or an angular Driven site",
    "start": "901569",
    "end": "907569"
  },
  {
    "text": "through the end user which in turn can connect into an API gateway to respond",
    "start": "907569",
    "end": "913480"
  },
  {
    "text": "to any interaction with the users browser so let's say there's you need to complete a form on the website and you",
    "start": "913480",
    "end": "919720"
  },
  {
    "text": "click Submit that can post straight to API gateway then API gateway intern attaches particular endpoints or lambda",
    "start": "919720",
    "end": "926230"
  },
  {
    "text": "functions which then can commit to dynamodb it could upload into s3 and",
    "start": "926230",
    "end": "931779"
  },
  {
    "text": "suchlike and then return the response back up to the browser so whilst s3 is advertisers",
    "start": "931779",
    "end": "939879"
  },
  {
    "text": "not being able to support dynamic content you can build it a completely service model with it and",
    "start": "939879",
    "end": "946690"
  },
  {
    "text": "the ability therefore as not to have to worry about scaling is fantastic",
    "start": "946690",
    "end": "951920"
  },
  {
    "text": "we could deploy this and we could know that it would serve our clients needs absolutely perfectly and similarly you",
    "start": "951920",
    "end": "962090"
  },
  {
    "text": "can apply the same logic to processes that do not involve any human interaction for instance we could sell a",
    "start": "962090",
    "end": "967760"
  },
  {
    "text": "cloud watch event which could ask like a scheduled task to execute a lambda",
    "start": "967760",
    "end": "973910"
  },
  {
    "text": "function with particular parameters that we supply to it this actually is a",
    "start": "973910",
    "end": "980410"
  },
  {
    "text": "simplified means of how we do our Twitter archiving so for each account we",
    "start": "980410",
    "end": "986330"
  },
  {
    "text": "would set schedules the Amazon Cloud watch event could actually then there",
    "start": "986330",
    "end": "991340"
  },
  {
    "text": "are limitations on how many actions you can actually set up within it so the lambda function there could connect into",
    "start": "991340",
    "end": "997670"
  },
  {
    "text": "a dynamo DB or a shadow a list within s3 to know what in these to max upon at",
    "start": "997670",
    "end": "1003220"
  },
  {
    "text": "certain certain time and then let's say in that first lambda function we find",
    "start": "1003220",
    "end": "1008980"
  },
  {
    "text": "100 new tweets that we need to archive so the lambda function would format that",
    "start": "1008980",
    "end": "1014920"
  },
  {
    "text": "into the particular JSON style format that Amazon DynamoDB wants pushes those",
    "start": "1014920",
    "end": "1021400"
  },
  {
    "text": "records into dynamodb as a batch we've then got a hundred new items so in dynamodb ready to be processed we have",
    "start": "1021400",
    "end": "1029438"
  },
  {
    "text": "another lambda function attached to inserts on that table so a hundred lambda functions are then",
    "start": "1029439",
    "end": "1036069"
  },
  {
    "text": "executed at the same time in parallel and they can be doing all sorts of processing on that data",
    "start": "1036069",
    "end": "1042310"
  },
  {
    "text": "aggregating the results or working out deriving if there's any media files within those within those tweets that",
    "start": "1042310",
    "end": "1049240"
  },
  {
    "text": "need to be downloaded and from that lambda function then we can make a decision whether a step function needs",
    "start": "1049240",
    "end": "1054730"
  },
  {
    "text": "to roll now as I said the step function is a kind of a collection of activity",
    "start": "1054730",
    "end": "1063790"
  },
  {
    "text": "that needs to be executed within within a certain logic flow and we've got an",
    "start": "1063790",
    "end": "1069040"
  },
  {
    "text": "example here so once we've dropped into the step function you supply JSON input",
    "start": "1069040",
    "end": "1075550"
  },
  {
    "text": "to it and that will trigger off a series of lambda functions or decision steps so at the",
    "start": "1075550",
    "end": "1081610"
  },
  {
    "text": "top there we check to see if there's any media files associated with the tweet so that will then produce let's say an",
    "start": "1081610",
    "end": "1088210"
  },
  {
    "text": "aggregation of number of videos and there a list of videos same with images and suchlike and that passes it down",
    "start": "1088210",
    "end": "1095410"
  },
  {
    "text": "into the ringed area there which is a parallel step now before the process",
    "start": "1095410",
    "end": "1101950"
  },
  {
    "text": "moves on to the next step that's to the end but there could be another sequence of events after it all of those steps",
    "start": "1101950",
    "end": "1108580"
  },
  {
    "text": "needs a complete for it to move on so we go into a parallel step straightaway",
    "start": "1108580",
    "end": "1113650"
  },
  {
    "text": "there that downloads images gives in a reusable piece of code that just accepts",
    "start": "1113650",
    "end": "1120160"
  },
  {
    "text": "an expected input and then gives an expected output you don't have to do anything with the output actually you",
    "start": "1120160",
    "end": "1126040"
  },
  {
    "text": "can just end the process at that point because we're doing that and it also drops into a second stage there which",
    "start": "1126040",
    "end": "1132610"
  },
  {
    "text": "checks to see if there are any video supplied now rather than that being a",
    "start": "1132610",
    "end": "1138880"
  },
  {
    "text": "lambda function that's actually a step function choice so that will check the",
    "start": "1138880",
    "end": "1144760"
  },
  {
    "text": "data to make sure if it needs to do anything with the actual supplied JSON",
    "start": "1144760",
    "end": "1150220"
  },
  {
    "text": "from the previous function and then if there's no video it exits if there is a",
    "start": "1150220",
    "end": "1155860"
  },
  {
    "text": "video it will take the right-hand side branch and download the video and save the information to s3 now in this case",
    "start": "1155860",
    "end": "1162280"
  },
  {
    "text": "the tweet that we ingested didn't have any video so we went to the no video section and the reason that we've done",
    "start": "1162280",
    "end": "1169330"
  },
  {
    "text": "this is because lambda isn't suitable",
    "start": "1169330",
    "end": "1176320"
  },
  {
    "text": "for everything if we need to download a video so it could be a gigabyte video",
    "start": "1176320",
    "end": "1182230"
  },
  {
    "text": "from YouTube the time in the cost that that would take to run it as a lambda function with the resources that we need",
    "start": "1182230",
    "end": "1188799"
  },
  {
    "text": "to provision for it isn't a best fit so that actually goes out to well it could",
    "start": "1188799",
    "end": "1193990"
  },
  {
    "text": "in this instance be an ec2 instance or it could be a docker instance that connects as an activity task into the",
    "start": "1193990",
    "end": "1201100"
  },
  {
    "text": "step function so you can actually run permanent servers that connect its it",
    "start": "1201100",
    "end": "1207330"
  },
  {
    "text": "in simple terms it works a bit like a rabbit and queue queuing system type thing you just it has a queue ID that",
    "start": "1207330",
    "end": "1214889"
  },
  {
    "text": "it's polling against and it goes and checks periodically to see if there's anything it needs to do and the step function if it was in that step would",
    "start": "1214889",
    "end": "1221369"
  },
  {
    "text": "just sit there and wait for one of those servers in the activity queue to pick a drop up so you're not just limited to",
    "start": "1221369",
    "end": "1228269"
  },
  {
    "text": "using stuff functions with lambda you can actually use it to execute real-time processing on separate servers on",
    "start": "1228269",
    "end": "1236009"
  },
  {
    "text": "physical servers or ec2 now the word the",
    "start": "1236009",
    "end": "1245820"
  },
  {
    "text": "thing that makes the step functions fantastic is that you're not actually paying for the time that these are running you're actually paying for the",
    "start": "1245820",
    "end": "1251759"
  },
  {
    "text": "transitions between steps so it does drive up the costs a bit because you",
    "start": "1251759",
    "end": "1257730"
  },
  {
    "text": "then paying for state change transitions and you're also paying for the lambda function code that's running but the",
    "start": "1257730",
    "end": "1263789"
  },
  {
    "text": "ability for you to chain actions together and build build for many applications with it is it's brilliant",
    "start": "1263789",
    "end": "1271429"
  },
  {
    "text": "and it also means that our non tech staff our non developers can start",
    "start": "1271429",
    "end": "1277139"
  },
  {
    "text": "building workflows so if we were to extend this to do let's say LinkedIn all",
    "start": "1277139",
    "end": "1282809"
  },
  {
    "text": "we'd need to do is write another piece of code that ingests a LinkedIn account and passes what this flow expects or we",
    "start": "1282809",
    "end": "1290220"
  },
  {
    "text": "create another flow that has different chains of events",
    "start": "1290220",
    "end": "1294499"
  },
  {
    "text": "so we've got the original step function there on the left hand side and on the",
    "start": "1297260",
    "end": "1302450"
  },
  {
    "text": "right and just showing a really basic example of a stripped down version at",
    "start": "1302450",
    "end": "1307610"
  },
  {
    "text": "the beginning so again on the right hand side there where check in see if there's",
    "start": "1307610",
    "end": "1313490"
  },
  {
    "text": "any media associated with it with an item in this case that was a very rudimentary example of a youtube",
    "start": "1313490",
    "end": "1320450"
  },
  {
    "text": "archiver now we know if we're archived in a YouTube channel there's always going to be a video and there's always",
    "start": "1320450",
    "end": "1326120"
  },
  {
    "text": "going to be an image associated with it as a snapshot image so we've got no need",
    "start": "1326120",
    "end": "1334160"
  },
  {
    "text": "to go through this complex choice step we always know there's going to be a video so we drop straight into the",
    "start": "1334160",
    "end": "1339470"
  },
  {
    "text": "download video and download image system there so as you can see we're recycling",
    "start": "1339470",
    "end": "1345080"
  },
  {
    "text": "the same download images function we've made it dynamic enough that it can",
    "start": "1345080",
    "end": "1353419"
  },
  {
    "text": "interpret any input we can supply a specific s3 bucket that data needs to go into so the previous step there tweet",
    "start": "1353419",
    "end": "1360830"
  },
  {
    "text": "has media and get media list will supply parameters to the image downloader that",
    "start": "1360830",
    "end": "1368360"
  },
  {
    "text": "tells it where it needs to store it so we'll particular for specific clients and specific social media channels will",
    "start": "1368360",
    "end": "1375950"
  },
  {
    "text": "be storing them into a specific book is and you that's completely customizable you write you coats handle that and you",
    "start": "1375950",
    "end": "1383809"
  },
  {
    "text": "can also set environment variables above that level so you can have default",
    "start": "1383809",
    "end": "1389600"
  },
  {
    "text": "parameters that will be taken if you don't actually supply it specifics and same there we've got the download video",
    "start": "1389600",
    "end": "1396049"
  },
  {
    "text": "code which again both of those are the same piece of code that runs it running",
    "start": "1396049",
    "end": "1402110"
  },
  {
    "text": "as an except as an activity step but they're implemented in different ways again because we know the expected input",
    "start": "1402110",
    "end": "1409220"
  },
  {
    "text": "and output as long as the previous steps catering for that we can train them all together",
    "start": "1409220",
    "end": "1414790"
  },
  {
    "text": "so as I mentioned earlier we've got the",
    "start": "1416820",
    "end": "1422980"
  },
  {
    "text": "challenge where we're going to be ingesting over a hundred terabytes of",
    "start": "1422980",
    "end": "1428230"
  },
  {
    "text": "data for the National Archives now we've",
    "start": "1428230",
    "end": "1435639"
  },
  {
    "text": "got visibility the data we know that it's going to be 1 million files each of one hundred megabytes in size so we're",
    "start": "1435639",
    "end": "1445720"
  },
  {
    "text": "thinking can we do this service it's kind of like traditionally we would have",
    "start": "1445720",
    "end": "1451570"
  },
  {
    "text": "to spin up a Hadoop cluster and deal with a whole nightmare surrounding the way that that data be put together and",
    "start": "1451570",
    "end": "1456820"
  },
  {
    "text": "the way that we'd be able to process that and it's a lot of it's a lot of infrastructure to start managing so",
    "start": "1456820",
    "end": "1463179"
  },
  {
    "text": "because we know that these files are hundred megabytes each and we can get lambda instances that can run at 128 Meg",
    "start": "1463179",
    "end": "1470460"
  },
  {
    "text": "we could theoretically load that into a lambda function run a million lambda",
    "start": "1470460",
    "end": "1476289"
  },
  {
    "text": "instances million Lander executions to produce a million index files now if I",
    "start": "1476289",
    "end": "1484480"
  },
  {
    "text": "doing that we can massively increase the ability for us to do parallel activity",
    "start": "1484480",
    "end": "1490659"
  },
  {
    "text": "on that data without having to worry about a Hadoop cluster or any other kind of infrastructure behind that because of",
    "start": "1490659",
    "end": "1501309"
  },
  {
    "text": "the way that lambda functions work and we can get our logs within cloud watch we can know if there's any data",
    "start": "1501309",
    "end": "1507159"
  },
  {
    "text": "processing errors with each of those records we can go back and revisit each of those manually and just rectify the",
    "start": "1507159",
    "end": "1512440"
  },
  {
    "text": "problems that we've got rather than have to go and revisit a whole batch of data to work back through that so it's",
    "start": "1512440",
    "end": "1520899"
  },
  {
    "text": "something that that's something that we're experimenting with at the moment with the technology we love the idea of",
    "start": "1520899",
    "end": "1527740"
  },
  {
    "text": "training your service in in new ways and try and apply it to instances that we wouldn't have normally been able to",
    "start": "1527740",
    "end": "1534730"
  },
  {
    "text": "survive we deal with large amounts of data in a simple manner",
    "start": "1534730",
    "end": "1539850"
  },
  {
    "text": "and if we go down the service model it",
    "start": "1542059",
    "end": "1547460"
  },
  {
    "text": "then enables us to rapidly expand it enables us to release quick patches to our code it enables us as I mentioned",
    "start": "1547460",
    "end": "1554179"
  },
  {
    "text": "with the Twitter issue if we had to ingest a vast amount of data in one in",
    "start": "1554179",
    "end": "1560960"
  },
  {
    "text": "one go we'd be able to do that with this and we wouldn't have to worry about the infrastructure we wouldn't have to worry",
    "start": "1560960",
    "end": "1566599"
  },
  {
    "text": "about how much it was going to cost because we're only charged per unit of of compute and as I said that's broken",
    "start": "1566599",
    "end": "1574729"
  },
  {
    "text": "down to hundred millisecond increments so he costs can be really driven low in",
    "start": "1574729",
    "end": "1579830"
  },
  {
    "text": "fact some calculations that we made if you were able to do a lot of processing on the lowest level of lambda function",
    "start": "1579830",
    "end": "1588139"
  },
  {
    "text": "so running for only 100 milliseconds and using the 128 Meg of resources on that",
    "start": "1588139",
    "end": "1595820"
  },
  {
    "text": "basis we would be able to run 95 million lambda functions for the same cost as",
    "start": "1595820",
    "end": "1601279"
  },
  {
    "text": "we'd be paying for one T 2 medium instance for the month and that is a vast amount of processing that means",
    "start": "1601279",
    "end": "1609019"
  },
  {
    "text": "breaking it down it's 36 and a half lambda executions per second if you were",
    "start": "1609019",
    "end": "1614960"
  },
  {
    "text": "to use it 24/7 so if you think if you're then only needing to do that during peak hours let's say only 12 hours of the day",
    "start": "1614960",
    "end": "1621859"
  },
  {
    "text": "that's that's double the capacity if you run at 70 executions per second there for the same price as 1 C 2 medium so",
    "start": "1621859",
    "end": "1630739"
  },
  {
    "text": "there's massive cost savings to be made absolutely massive as I said there are instances where it isn't viable for",
    "start": "1630739",
    "end": "1638330"
  },
  {
    "text": "instance the video downloading if you download in several gigabytes of video",
    "start": "1638330",
    "end": "1643580"
  },
  {
    "text": "it might not be viable to run it in lambda we are actually experimenting with ways we can do that within lambda",
    "start": "1643580",
    "end": "1650779"
  },
  {
    "text": "but as I said there's always other opportunity there are other options you can run the activity steps with ec2",
    "start": "1650779",
    "end": "1656659"
  },
  {
    "text": "instances or in other ways that we can actually go about working with that",
    "start": "1656659",
    "end": "1664629"
  },
  {
    "text": "we're also in cases where we can't",
    "start": "1664830",
    "end": "1670050"
  },
  {
    "text": "actually use the service technology for instance with with our web archiving",
    "start": "1670050",
    "end": "1675600"
  },
  {
    "text": "suite we've got to run some software that might need some some quite beefy",
    "start": "1675600",
    "end": "1680940"
  },
  {
    "text": "servers at times so there might be times where we are all archived in a very small website and we can dedicate maybe",
    "start": "1680940",
    "end": "1688080"
  },
  {
    "text": "a micro or a small t2 instance to that and there might be other instances where",
    "start": "1688080",
    "end": "1693960"
  },
  {
    "text": "we've got a massive website that needs a lot of network throughput and we need to archive that in a rapid amount of time",
    "start": "1693960",
    "end": "1699030"
  },
  {
    "text": "so we need to provision a quite hefty server though it could be a natural our",
    "start": "1699030",
    "end": "1704280"
  },
  {
    "text": "server that we need for that so we can't do that within lambda but the way that",
    "start": "1704280",
    "end": "1712470"
  },
  {
    "text": "we like to use the technology we want to make things like ec2 instances as service as possible kind of forced them",
    "start": "1712470",
    "end": "1718980"
  },
  {
    "text": "to be a bit service so we can actually run the steps I was talking earlier with setting up a scheduled tasks to launch",
    "start": "1718980",
    "end": "1728610"
  },
  {
    "text": "an ec2 instance of a given size so we could we could work out what size we",
    "start": "1728610",
    "end": "1734430"
  },
  {
    "text": "need provision that server launch it from lambda that would run for the",
    "start": "1734430",
    "end": "1741420"
  },
  {
    "text": "length it needs to run through all the archive in Ystad to do upload all the data to s3 and then the ec2 instance can",
    "start": "1741420",
    "end": "1747150"
  },
  {
    "text": "just kill itself so do you see two instance there only runs for the time it needs to wrong and then we just get rid",
    "start": "1747150",
    "end": "1753540"
  },
  {
    "text": "of it as you pay by the hour then we just make sure that that's we can still",
    "start": "1753540",
    "end": "1758970"
  },
  {
    "text": "derive a cost from that as well and we're always looking like so we're",
    "start": "1758970",
    "end": "1765720"
  },
  {
    "text": "looking at other ways using the technology any ways that we can go to service that is now becoming the first",
    "start": "1765720",
    "end": "1772320"
  },
  {
    "text": "question that we ask can we make it service if we can't make it service the next question we ask is can we make it",
    "start": "1772320",
    "end": "1777660"
  },
  {
    "text": "that's close to service as possible and it means that our core infrastructure is",
    "start": "1777660",
    "end": "1784200"
  },
  {
    "text": "now becoming about 80% service and we'll",
    "start": "1784200",
    "end": "1789600"
  },
  {
    "text": "look into driver even even further to old service as much as possible",
    "start": "1789600",
    "end": "1794750"
  },
  {
    "text": "the idea is that the cony stateless runs when it needs to run within lambda so",
    "start": "1813860",
    "end": "1819730"
  },
  {
    "text": "you would focus our weave the way that we do it we focus on creating a function that does one thing and does it well so",
    "start": "1819730",
    "end": "1827259"
  },
  {
    "text": "let's say we hooked up the an image processor to uploading image files into",
    "start": "1827259",
    "end": "1834440"
  },
  {
    "text": "a sorry so for instance if we if we downloaded the images from a tweet and",
    "start": "1834440",
    "end": "1840320"
  },
  {
    "text": "then we wanted those images formatting in different ways so creating a thumbnail version a large version and",
    "start": "1840320",
    "end": "1846200"
  },
  {
    "text": "such like we would then pass the event from s3 straight into the lambda",
    "start": "1846200",
    "end": "1853879"
  },
  {
    "text": "function and Amazon deal with that automatically so all your code needs to",
    "start": "1853879",
    "end": "1859279"
  },
  {
    "text": "do is work on how to deal with that one image that it's supplied so the",
    "start": "1859279",
    "end": "1866029"
  },
  {
    "text": "scalability that it shouldn't it shouldn't have any bearing because each image that you output or told this",
    "start": "1866029",
    "end": "1872690"
  },
  {
    "text": "process will have its own separate output it's just responsible for doing one specific task does that answer the",
    "start": "1872690",
    "end": "1879740"
  },
  {
    "text": "question",
    "start": "1879740",
    "end": "1881830"
  },
  {
    "text": "whether they are there so one never lets one change the one would never mean to",
    "start": "1888740",
    "end": "1895110"
  },
  {
    "text": "deploy we would we'd connect to the",
    "start": "1895110",
    "end": "1900360"
  },
  {
    "text": "Twitter API inin just whatever's new and available at that time so let's say there were 50 tweets since I asked sweet",
    "start": "1900360",
    "end": "1906630"
  },
  {
    "text": "that we were that we retrieved we'd take all of those and dump them in so dynamodb in one go and then each of those 50 will be",
    "start": "1906630",
    "end": "1913890"
  },
  {
    "text": "assigned automatically so it's on lambda function so there's different",
    "start": "1913890",
    "end": "1919980"
  },
  {
    "text": "application some things you are gonna be inserting data into tables in bulk but",
    "start": "1919980",
    "end": "1926220"
  },
  {
    "text": "then Amazon will kind of just deal with all that for it you can specify what goes to the function when it in just so",
    "start": "1926220",
    "end": "1933030"
  },
  {
    "text": "you can actually say that it can deal with let's say 10 records but we just narrow it down stage or send it 1 so the",
    "start": "1933030",
    "end": "1939120"
  },
  {
    "text": "Wonder function is that is that were asked if it kind of yeah I think I think",
    "start": "1939120",
    "end": "1946020"
  },
  {
    "text": "basically yeah the answer for me is you don't ever have lambda functions that",
    "start": "1946020",
    "end": "1952230"
  },
  {
    "text": "have any kind of reliance or anything else no it should have a an expected",
    "start": "1952230",
    "end": "1959850"
  },
  {
    "text": "input and output and as long as that's supplied you'd usually you could do that by chaining it in step functions if",
    "start": "1959850",
    "end": "1964980"
  },
  {
    "text": "things have a logical flow but generally speaking the way that we use lambda functions we connect it into the API",
    "start": "1964980",
    "end": "1971960"
  },
  {
    "text": "gateway so that it handles particular endpoints and it's just responsible for that one task so I suppose what I'm",
    "start": "1971960",
    "end": "1979230"
  },
  {
    "text": "thinking of in that particular example is you take an input you change what the output looks like but another lambda function is expecting",
    "start": "1979230",
    "end": "1985650"
  },
  {
    "text": "the old output and then might need to go out together you can tell under",
    "start": "1985650",
    "end": "1991770"
  },
  {
    "text": "functions to just return the same output as it received as input so if if things are reliant on the same data you can",
    "start": "1991770",
    "end": "1999060"
  },
  {
    "text": "just pass that through anyway so generally with them with them being",
    "start": "1999060",
    "end": "2004790"
  },
  {
    "text": "stateless and with them being decoupled the the idea is to try and make them as",
    "start": "2004790",
    "end": "2010000"
  },
  {
    "text": "kind of separate in their own right as possible if you've got some code that needs to be doing separate steps then",
    "start": "2010000",
    "end": "2016730"
  },
  {
    "text": "you probably look should it be one lambda function that combines different bits of logic or",
    "start": "2016730",
    "end": "2022409"
  },
  {
    "text": "should it be should it be several under functions or should you chain it into a",
    "start": "2022409",
    "end": "2027929"
  },
  {
    "text": "step function bill like a mini app for that then it's",
    "start": "2027929",
    "end": "2033330"
  },
  {
    "text": "a question I asked downstairs just now sorry apologies for coming in late clearly serverless is an emerging space",
    "start": "2033330",
    "end": "2041639"
  },
  {
    "text": "and sort of good practice around architectural principles how to design services how to code well how to chain",
    "start": "2041639",
    "end": "2050128"
  },
  {
    "text": "things together these are kind of all emerging and just out of interest I mean",
    "start": "2050129",
    "end": "2056608"
  },
  {
    "text": "how would you recommend for someone new to service how would you best recommend",
    "start": "2056609",
    "end": "2062760"
  },
  {
    "text": "getting up to speed with what is good practice for us it's been a bit trial by",
    "start": "2062760",
    "end": "2069898"
  },
  {
    "text": "fire we've been lucky we've had a lot of interaction with Amazon especially with",
    "start": "2069899",
    "end": "2077819"
  },
  {
    "text": "solutions architects specially Matt Johnson it's a complete paradigm shift",
    "start": "2077819",
    "end": "2083550"
  },
  {
    "text": "so whoever you speak to they've all got different ideas on how you should do this there's a lot of people that stick",
    "start": "2083550",
    "end": "2090300"
  },
  {
    "text": "to the service framework site things you've got serverless",
    "start": "2090300",
    "end": "2095339"
  },
  {
    "text": "you've got chalice which is AWS is implementation the zapper where you can",
    "start": "2095339",
    "end": "2101310"
  },
  {
    "text": "wrap let's say a whole jungle app into a service process you could run you can run django service basically but those",
    "start": "2101310",
    "end": "2111089"
  },
  {
    "text": "frameworks essentially you write your code as a micro service or a monolith and then the technology behind it is",
    "start": "2111089",
    "end": "2118950"
  },
  {
    "text": "just responsible for creating that service so if you there's issues there",
    "start": "2118950",
    "end": "2124500"
  },
  {
    "text": "that we found in the your code is still getting kind of limited by this this",
    "start": "2124500",
    "end": "2131670"
  },
  {
    "text": "structure in a way so to get started",
    "start": "2131670",
    "end": "2137790"
  },
  {
    "text": "with it the fate what I would probably recommend is knock up an API using API",
    "start": "2137790",
    "end": "2143640"
  },
  {
    "text": "gateway attach some lambda functions to it separately and just really get a feel for how it all fits together and how it",
    "start": "2143640",
    "end": "2149630"
  },
  {
    "text": "interacts and you kind of we found we organically grew into this practice best practice that",
    "start": "2149630",
    "end": "2155789"
  },
  {
    "text": "really worked well for us I don't I honestly don't think there's one kind of straight answer of how you should do it",
    "start": "2155789",
    "end": "2161670"
  },
  {
    "text": "with with servers it's it's so new and there's so many so many kind of polar directions that people take it but all",
    "start": "2161670",
    "end": "2170279"
  },
  {
    "text": "of them seem to work and hi um just the practical side of things are getting",
    "start": "2170279",
    "end": "2176009"
  },
  {
    "text": "started I've never written a lambda but if you can write web service can you",
    "start": "2176009",
    "end": "2182640"
  },
  {
    "text": "write a lambda definitely yeah",
    "start": "2182640",
    "end": "2188849"
  },
  {
    "text": "it's you could you could write an API",
    "start": "2188849",
    "end": "2194039"
  },
  {
    "text": "layer and a lambda function you could write a hello world example using API",
    "start": "2194039",
    "end": "2199529"
  },
  {
    "text": "gateway in London in probably three minutes yeah it's it's fantastic it's",
    "start": "2199529",
    "end": "2205739"
  },
  {
    "text": "you could do it all through the Amazon interface so you just set up your",
    "start": "2205739",
    "end": "2210900"
  },
  {
    "text": "endpoints and suchlike and just plug it into a function and the lambda function if it's currently supports Python nodejs",
    "start": "2210900",
    "end": "2219209"
  },
  {
    "text": "and c-sharp so you've got different options that's another thing I didn't actually mention earlier it means that",
    "start": "2219209",
    "end": "2226259"
  },
  {
    "text": "we can take on developers that we're predominately Python but we can take on",
    "start": "2226259",
    "end": "2231449"
  },
  {
    "text": "developers that aren't you can have lambda functions each in different programming languages we could have",
    "start": "2231449",
    "end": "2237509"
  },
  {
    "text": "someone developing in nodejs someone in c-sharp and they'll say in",
    "start": "2237509",
    "end": "2242819"
  },
  {
    "text": "Python and as long as the input and output parameters are right then the code will be interoperable it's",
    "start": "2242819",
    "end": "2249869"
  },
  {
    "text": "fantastic I wouldn't recommend just letting people go loose over it certainly well and it's just theoretical",
    "start": "2249869",
    "end": "2257239"
  }
]