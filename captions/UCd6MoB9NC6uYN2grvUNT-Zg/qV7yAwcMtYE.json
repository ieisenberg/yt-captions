[
  {
    "text": "good morning and uh welcome uh my name is siva raghupathi i'm a principal solutions architect at amazon web",
    "start": "320",
    "end": "6240"
  },
  {
    "text": "services uh today morning i have the pressure of introducing uh valentino olongi",
    "start": "6240",
    "end": "12160"
  },
  {
    "text": "valentino is a cto at adroll uh an ad tech company which is doing ad",
    "start": "12160",
    "end": "17680"
  },
  {
    "text": "retargeting um and he will talk about that in more detail i want to tell you a little story before we get started",
    "start": "17680",
    "end": "22960"
  },
  {
    "text": "i had the pleasure of meeting valentino uh about two and a half or three years ago",
    "start": "22960",
    "end": "28000"
  },
  {
    "text": "and at that point uh we recently launched amazon dynamodb which is our nosql store",
    "start": "28000",
    "end": "33440"
  },
  {
    "text": "and uh i was a member of the team as well as i was uh you know consulting with customers and",
    "start": "33440",
    "end": "39120"
  },
  {
    "text": "architecting their systems uh he says he wanted to use dynamodb so we got off in this discussion i was in",
    "start": "39120",
    "end": "45120"
  },
  {
    "text": "san francisco then he says by the way do you have a airline driver uh for dynamodb um you know",
    "start": "45120",
    "end": "52879"
  },
  {
    "text": "erlang for those of you don't know what airline is it's a concurrent programming language and for real-time systems and",
    "start": "52879",
    "end": "60800"
  },
  {
    "text": "you know i was scratching my head and seeing well yeah we really don't have an airline driver you know we only have a",
    "start": "60800",
    "end": "66080"
  },
  {
    "text": "java driver at this point then he said that's okay you know can you point me to the you know source in about a few days he",
    "start": "66080",
    "end": "73040"
  },
  {
    "text": "he he whips up uh an airline driver for dynamodb and has his stuff going and he's one of those rare luminaries uh",
    "start": "73040",
    "end": "80000"
  },
  {
    "text": "that every time i hang out with him i learn one or two things uh so without much i do",
    "start": "80000",
    "end": "85200"
  },
  {
    "text": "um i want to introduce i want to have valentino run with the presentation i'll be coming towards the end",
    "start": "85200",
    "end": "91040"
  },
  {
    "text": "wrapping up the presentation we're delighted to be here at 9am um on on friday after an awesome party",
    "start": "91040",
    "end": "98479"
  },
  {
    "text": "so let's get started so thank you hey everyone thanks for being",
    "start": "98479",
    "end": "104720"
  },
  {
    "text": "here at first day of the conference fresh um and i'm gonna do my best to try to live",
    "start": "104720",
    "end": "110640"
  },
  {
    "text": "up to all the kind words that siva uh just said i think i'm going to stay over on this side",
    "start": "110640",
    "end": "118240"
  },
  {
    "text": "so yes i'm valentino city of adroll and what we do as a siva said is that retargeting",
    "start": "118240",
    "end": "124159"
  },
  {
    "text": "that's a very complex term to say that basically whenever somebody",
    "start": "124159",
    "end": "129360"
  },
  {
    "text": "uh on the web browses your site and this site is one of our customers we drop a little cookie we do one thing",
    "start": "129360",
    "end": "136800"
  },
  {
    "text": "called syncing our cookies with all of the big traffic exchanges on the web and then whenever you browse the sites",
    "start": "136800",
    "end": "143040"
  },
  {
    "text": "like the new york times or your favorite blog or uh your favorite sports site we can then",
    "start": "143040",
    "end": "148959"
  },
  {
    "text": "using machine learning determine how much uh what try to figure out what what interests",
    "start": "148959",
    "end": "154480"
  },
  {
    "text": "were linked to your uh to your browser and then at that point we can determine how much to pay",
    "start": "154480",
    "end": "160800"
  },
  {
    "text": "and return a request how often do we do this in a day we do this 60 billion times",
    "start": "160800",
    "end": "167360"
  },
  {
    "text": "so that's about the traffic that happens on the web uh more or less on the publishing side",
    "start": "167360",
    "end": "172720"
  },
  {
    "text": "of the web and uh this doesn't include the data collection which is another billion requests per day at",
    "start": "172720",
    "end": "178400"
  },
  {
    "text": "least and effectively this per se is",
    "start": "178400",
    "end": "184159"
  },
  {
    "text": "already very complicated task i'm going to say somewhat often during the talk but",
    "start": "184159",
    "end": "189360"
  },
  {
    "text": "60 billion requests per day one percent of that is 600 million so if your infrastructure has a problem",
    "start": "189360",
    "end": "195599"
  },
  {
    "text": "one percent of the time you're going to generate 600 million errors and",
    "start": "195599",
    "end": "200640"
  },
  {
    "text": "you better not want to log all of those things and be trying to figure out how to avoid even",
    "start": "200640",
    "end": "206080"
  },
  {
    "text": "the other entirely but if this wasn't in itself just a big accomplishment for comparison i think",
    "start": "206080",
    "end": "211760"
  },
  {
    "text": "what's up was talking about something between 20 and 30 billion messages per day so uh in the same",
    "start": "211760",
    "end": "219599"
  },
  {
    "text": "with the same language and similar infrastructure as whatsapp but you can get up to even 16 plus billion requests",
    "start": "219599",
    "end": "226560"
  },
  {
    "text": "per day but of course as i said one percent is 600 million impressions",
    "start": "226560",
    "end": "232640"
  },
  {
    "text": "and uh one percent downtime is gonna cost us a lot more than a million dollars so on",
    "start": "232640",
    "end": "239439"
  },
  {
    "text": "top of this if if our data if we're not collecting data or we're not properly buying advertising for our customers it's our",
    "start": "239439",
    "end": "245599"
  },
  {
    "text": "customers that are paying without by by not being able to uh leverage uh all of our advertising and",
    "start": "245599",
    "end": "251840"
  },
  {
    "text": "our products and the positive return that we have on the investment that they do with us so on all of this we need to",
    "start": "251840",
    "end": "257680"
  },
  {
    "text": "stay up and again if this uh if this was it you can try to figure out",
    "start": "257680",
    "end": "263120"
  },
  {
    "text": "a way and you somehow try to figure out a solution but you need to do it cheaply advertising is one of the most",
    "start": "263120",
    "end": "270560"
  },
  {
    "text": "competitive areas in software a lot of people might be",
    "start": "270560",
    "end": "276800"
  },
  {
    "text": "scared away by the jargon or or by the fact that advertising is annoying",
    "start": "276800",
    "end": "282320"
  },
  {
    "text": "and whatnot but as a matter of fact there's a lot of competition and we need to run we need to have positive margins like",
    "start": "282320",
    "end": "288880"
  },
  {
    "text": "everybody so it's very important for us that the infrastructure on which we run scales non-linearly with the revenue",
    "start": "288880",
    "end": "294960"
  },
  {
    "text": "that the company is generating we need to be able to onboard customers really really quickly without needing to spend all of the",
    "start": "294960",
    "end": "300479"
  },
  {
    "text": "money that we make every single day and yeah all of these are great requirements and everything is stopped",
    "start": "300479",
    "end": "306160"
  },
  {
    "text": "up by a really really simple 100 millisecond max latency that we need to respect",
    "start": "306160",
    "end": "311280"
  },
  {
    "text": "there's a lot of uh a lot of talk about real-time systems and so on this is an actual real-time system one",
    "start": "311280",
    "end": "318160"
  },
  {
    "text": "of the those in in the traditional sense there are three in literature there are really",
    "start": "318160",
    "end": "323280"
  },
  {
    "text": "three types of real-time systems that are soft real-time systems are typically identified by the fact",
    "start": "323280",
    "end": "330720"
  },
  {
    "text": "that the results might not land in the deadline time and they're still going to be useful and",
    "start": "330720",
    "end": "336240"
  },
  {
    "text": "the system is not going to fail but the effectively the performance or the quality of the service is going to",
    "start": "336240",
    "end": "341440"
  },
  {
    "text": "degrade over time there are harder real-time systems things like the braking system on your cars and",
    "start": "341440",
    "end": "349199"
  },
  {
    "text": "these systems are a little bit different they're a bit more complex you cannot violate the deadline if you",
    "start": "349199",
    "end": "354240"
  },
  {
    "text": "violate the deadline even once the entire system falls apart and it needs to shut down because it means that",
    "start": "354240",
    "end": "359680"
  },
  {
    "text": "it's not going to be able to make decisions properly and then there are there are firm real-time systems which",
    "start": "359680",
    "end": "365039"
  },
  {
    "text": "is what address is in firm real-time systems the deadline after the deadline the result is absolutely useless",
    "start": "365039",
    "end": "371520"
  },
  {
    "text": "a big big secret for how our machines are capable of handling that amount of impressions every day is that they are",
    "start": "371520",
    "end": "377759"
  },
  {
    "text": "capable of understanding how often a request is going to take inside inside the system and as soon as it",
    "start": "377759",
    "end": "383280"
  },
  {
    "text": "reaches the threshold the request is completely removed it's much better for us to not serve an impression or to lose",
    "start": "383280",
    "end": "390479"
  },
  {
    "text": "one impression rather than running into a timeout and afterwards crushing the entire systems",
    "start": "390479",
    "end": "395759"
  },
  {
    "text": "if if we don't meet this latency often enough what is going to happen is that all of",
    "start": "395759",
    "end": "400800"
  },
  {
    "text": "the exchanges that we work with are going to start to reduce the traffic that they send to us because they think that we are in",
    "start": "400800",
    "end": "405840"
  },
  {
    "text": "trouble again one percent of error over 60 billion is a lot of errors and it's a lot of errors for everyone involved",
    "start": "405840",
    "end": "412319"
  },
  {
    "text": "whether they are google or facebook or yahoo or any other huge exchange on the web so",
    "start": "412319",
    "end": "418400"
  },
  {
    "text": "it's really really important that the systems remain at that latency constantly over through",
    "start": "418400",
    "end": "424160"
  },
  {
    "text": "throughout the entire day even one percent timeout throughout the day is unacceptable",
    "start": "424160",
    "end": "430080"
  },
  {
    "text": "and so there is a big problem with 100 millisecond latency very big one the the world is a fairly",
    "start": "430080",
    "end": "437440"
  },
  {
    "text": "big place and the speed of light in uh in vacuum is about three hundred thousand kilometers per second",
    "start": "437440",
    "end": "443680"
  },
  {
    "text": "in fiber it's about two hundred thousand kilometers per second and the the web the internet is just not",
    "start": "443680",
    "end": "450560"
  },
  {
    "text": "only fiber there's a lot of hops there's a lot of copper and and the distance if you were to take",
    "start": "450560",
    "end": "455759"
  },
  {
    "text": "two random cities like paris and new york which everybody should know i think um the the distance between them is",
    "start": "455759",
    "end": "461759"
  },
  {
    "text": "about 6 000 kilometers and the round trip time of light is about 60 milliseconds so",
    "start": "461759",
    "end": "467759"
  },
  {
    "text": "basically if we were to do all of our building for europe inside inside the us 60 percent of the time",
    "start": "467759",
    "end": "474080"
  },
  {
    "text": "that we have available to return the result will be completely gone just by the just by the connection and",
    "start": "474080",
    "end": "480960"
  },
  {
    "text": "shake so because of this exchanges do a couple of things number one they only work with persistent",
    "start": "480960",
    "end": "487520"
  },
  {
    "text": "keep alive connections that use pipelining so a connection once it's opened by an exchange is gonna stay open",
    "start": "487520",
    "end": "493120"
  },
  {
    "text": "for a day and usually typically in exchange opens up a few thousand connections and it's gonna send",
    "start": "493120",
    "end": "498400"
  },
  {
    "text": "many thousands of requests in every one of these connections so your machines and your load balancer and your infrastructure need to be ready to keep",
    "start": "498400",
    "end": "505120"
  },
  {
    "text": "a lot of connections alive constantly and the other thing that you have to do in order to work around the",
    "start": "505120",
    "end": "511120"
  },
  {
    "text": "problem of speed of light besides of course designing an infrastructure that is going to reply within",
    "start": "511120",
    "end": "516159"
  },
  {
    "text": "a few hundred milliseconds is to be able to have a global presence it's",
    "start": "516159",
    "end": "521279"
  },
  {
    "text": "using it using aws we're capable of reaching all of the places where there are big traffic exchanges",
    "start": "521279",
    "end": "526640"
  },
  {
    "text": "in the world and we're close to the sources of traffic for all of the for all of them basically with with the",
    "start": "526640",
    "end": "532720"
  },
  {
    "text": "system as we have set it up right now it takes us about a week to open up one of these regions",
    "start": "532720",
    "end": "538800"
  },
  {
    "text": "and fill them up with data it's about we're talking about uh 30 terabytes of data compressed per",
    "start": "538800",
    "end": "544240"
  },
  {
    "text": "day that we need to ship across all of these regions as a as a comparison",
    "start": "544240",
    "end": "550160"
  },
  {
    "text": "uh of what 30 terabytes of data means it's about a petabyte per month and it's the equi in three days",
    "start": "550160",
    "end": "556160"
  },
  {
    "text": "basically the uncompressed version of this is uh equivalent to how much data the entire us stock exchange",
    "start": "556160",
    "end": "562720"
  },
  {
    "text": "market is going to generate in a year just in three days so the amount of data that is flowing through the system is pretty ridiculous",
    "start": "562720",
    "end": "569279"
  },
  {
    "text": "and it's a very big requirement that we have in terms of what we're capable to ship around the world the bandwidth that we",
    "start": "569279",
    "end": "575440"
  },
  {
    "text": "need just the ability to create a bandwidth from your own data center in singapore to your own data center in",
    "start": "575440",
    "end": "582320"
  },
  {
    "text": "west coast us or east coast us it is a daunting task we are moving several hundreds of terabytes every week",
    "start": "582320",
    "end": "590240"
  },
  {
    "text": "from from singapore to uh to the us and the bandwidth required with the throughput that we need is going to be",
    "start": "590240",
    "end": "596080"
  },
  {
    "text": "extremely expensive for us at the same time we need extremely low response time for every one of the",
    "start": "596080",
    "end": "602320"
  },
  {
    "text": "databases that we use on the real-time request pipe as a matter of fact we need less than five milliseconds which gives us a space",
    "start": "602320",
    "end": "609519"
  },
  {
    "text": "of about being able to do two and in some cases three requests for every one request that we receive",
    "start": "609519",
    "end": "616640"
  },
  {
    "text": "and and the volume of requests that we receive is fairly huge as 60 billion requests per day on peak",
    "start": "616640",
    "end": "622640"
  },
  {
    "text": "time we receive about 60 million requests per minute that's about 1 million requests per second and they",
    "start": "622640",
    "end": "627920"
  },
  {
    "text": "are going to query data from 100 billion items that we store that we need to be able to store",
    "start": "627920",
    "end": "633440"
  },
  {
    "text": "in a in our key value store and so starting with the database and then we're going to go up throughout the",
    "start": "633440",
    "end": "639680"
  },
  {
    "text": "chain of the of our infrastructure we're going to attach the different decisions that we made",
    "start": "639680",
    "end": "645440"
  },
  {
    "text": "and the lessons that we learned throughout throughout our last seven years so the first thing we",
    "start": "645440",
    "end": "651360"
  },
  {
    "text": "needed to choose a database and we'd ended up choosing dynamodb i've done multiple talks about dynamodb over over the years and",
    "start": "651360",
    "end": "659279"
  },
  {
    "text": "and it really is a fascinating and incredible database we really don't have to worry much about",
    "start": "659279",
    "end": "665440"
  },
  {
    "text": "it but before we got to choosing dynamodb we tried many other solutions",
    "start": "665440",
    "end": "670560"
  },
  {
    "text": "we went with the first the first solutions where things like memcache we really hoped to",
    "start": "670560",
    "end": "675760"
  },
  {
    "text": "get memcache to work it was very very simple the only problem is that memcache tends to die",
    "start": "675760",
    "end": "681279"
  },
  {
    "text": "and lose everything that was stored inside memcache when when the instance runs out of memory",
    "start": "681279",
    "end": "686800"
  },
  {
    "text": "memcache removes files removes the keys from from its memory store and so that's unfortunately",
    "start": "686800",
    "end": "693279"
  },
  {
    "text": "not something that we can do that's data that we use for bidding it's directly correlated with dollars our machine learning improves its",
    "start": "693279",
    "end": "699200"
  },
  {
    "text": "performance the more the more data we can keep close to the machines and that's a that's a that's",
    "start": "699200",
    "end": "704480"
  },
  {
    "text": "really a big big requirement and it's going to lose many percentage points of revenue if you don't if you don't do that we try that we try",
    "start": "704480",
    "end": "711920"
  },
  {
    "text": "then redis it's going to back everything up on disk and it doesn't expire keys and so on it's great it's open source",
    "start": "711920",
    "end": "717519"
  },
  {
    "text": "unfortunately if you start to use redis for volumes that i was just talking about",
    "start": "717519",
    "end": "722880"
  },
  {
    "text": "what you're going to learn is that the way that you scale redis storage is by adding more machines when you need memory",
    "start": "722880",
    "end": "728959"
  },
  {
    "text": "and the machines that have a high memory are way more expensive than the machines that have a normal amount of memory 7 15 and 30",
    "start": "728959",
    "end": "736000"
  },
  {
    "text": "gigabytes and when you start to add machines 32 64 machines",
    "start": "736000",
    "end": "741200"
  },
  {
    "text": "to your infrastructure just to manage this type of workload it starts to become expensive really really quickly",
    "start": "741200",
    "end": "746639"
  },
  {
    "text": "you're not adding 64 machines in one location you're adding 64 machines in four regions",
    "start": "746639",
    "end": "752399"
  },
  {
    "text": "and these four regions that you're adding machines on need to have constant app time and so you need people",
    "start": "752399",
    "end": "758160"
  },
  {
    "text": "that are going to be your processes that are going to keep you ready sub and it's a bit tough",
    "start": "758160",
    "end": "763200"
  },
  {
    "text": "i can guarantee you it's great and of course sometimes the the backup of redis is going to add some",
    "start": "763200",
    "end": "770160"
  },
  {
    "text": "extra latency every so often if you want to take proper backups so it's a little bit a little bit heavy",
    "start": "770160",
    "end": "775600"
  },
  {
    "text": "we use uh internally we also use hbase we still use hbase it's a great great technology but the",
    "start": "775600",
    "end": "781839"
  },
  {
    "text": "problem is that hbase made the decision to be consistent rather than available and so it's very",
    "start": "781839",
    "end": "787040"
  },
  {
    "text": "possible that if you're running a big hbase cluster every once in a while one of your regional servers goes down",
    "start": "787040",
    "end": "792240"
  },
  {
    "text": "for whoever knows what reason and and that entire region is going to that entire",
    "start": "792240",
    "end": "798480"
  },
  {
    "text": "interval of keys is going to stop accepting rights or going to stop accepting reads and it actually happens fairly often if you",
    "start": "798480",
    "end": "804959"
  },
  {
    "text": "haven't tuned your hbase cluster really really well and it took us since when we started to use hbase",
    "start": "804959",
    "end": "810079"
  },
  {
    "text": "before we started to get a stable hbase platform it took us about two years two years of work and refinement on the",
    "start": "810079",
    "end": "816240"
  },
  {
    "text": "backup process and and on on the speed and the performance and fine-tuning all of these",
    "start": "816240",
    "end": "821279"
  },
  {
    "text": "instances and it's it actually works great but it's extremely extremely expensive and",
    "start": "821279",
    "end": "826959"
  },
  {
    "text": "down times do happen and down times are really really expensive and we can't afford them so of course we tried cassandra",
    "start": "826959",
    "end": "832880"
  },
  {
    "text": "everybody does netflix uses cassandra so it must be great and and you know two years ago when we",
    "start": "832880",
    "end": "839279"
  },
  {
    "text": "made this decision cassandra was at version 0.6.1 i think or 0.6.0",
    "start": "839279",
    "end": "844959"
  },
  {
    "text": "it was a big difference between these two even it wasn't yet mature back then but we constantly revisit all of our",
    "start": "844959",
    "end": "850880"
  },
  {
    "text": "decisions and and the problem with cassandra was really that it was very very expensive to run",
    "start": "850880",
    "end": "856720"
  },
  {
    "text": "both operationally and in terms of arduino and in order to show this netflix really is the last july",
    "start": "856720",
    "end": "864560"
  },
  {
    "text": "revisiting one million writes per second uh of an article that they wrote a few",
    "start": "864560",
    "end": "869600"
  },
  {
    "text": "years ago in 2012 i think and in this article they talk about building a cassandra cluster",
    "start": "869600",
    "end": "874720"
  },
  {
    "text": "in an automated way so that it's capable of handling about a million requests per second which is about",
    "start": "874720",
    "end": "880560"
  },
  {
    "text": "what otherwise infrastructure is needed is in need to handle in the article of course they test the",
    "start": "880560",
    "end": "885920"
  },
  {
    "text": "one million rights per second and they also talk about how the proper the mix that they see inside netflix is",
    "start": "885920",
    "end": "891839"
  },
  {
    "text": "they write about 10 percent of the time and read 90 percent of the time well at other all the mix is about uh",
    "start": "891839",
    "end": "898240"
  },
  {
    "text": "about the same about 10 to 90 or 30 to 70 depending on the time and if",
    "start": "898240",
    "end": "903600"
  },
  {
    "text": "you if you run the cost that netflix comes up with during in in and is explained in the article",
    "start": "903600",
    "end": "910000"
  },
  {
    "text": "you're going to see that effectively the solution that we're using in dynamodb is about half the cost",
    "start": "910000",
    "end": "915120"
  },
  {
    "text": "and all of this with zero people involved in this so half the cost no people involved and the system is the same type of",
    "start": "915120",
    "end": "922160"
  },
  {
    "text": "requirement that we need in both cases and we get it for really really cheap and very very few very",
    "start": "922160",
    "end": "928480"
  },
  {
    "text": "little upfront cost compared to compared to what cassandra does in this particular case",
    "start": "928480",
    "end": "934399"
  },
  {
    "text": "i would always recommend to use the three years reserved capacity inside dynamodb it's a bit cumbersome because you're",
    "start": "934399",
    "end": "940320"
  },
  {
    "text": "buying 5 000 reserved units per increment which gets",
    "start": "940320",
    "end": "946000"
  },
  {
    "text": "a little complicated as you grow the database up over time your capacity is going to expire it's going to expire",
    "start": "946000",
    "end": "953680"
  },
  {
    "text": "over time scattered and so you need to kind of keep track of all of these things but um but the the the",
    "start": "953680",
    "end": "960880"
  },
  {
    "text": "um the reality is that operational wise and and in terms of uh cost three years",
    "start": "960880",
    "end": "967440"
  },
  {
    "text": "reserved are going to pay off after five months there's about i think it's an 85 plus percent",
    "start": "967440",
    "end": "972959"
  },
  {
    "text": "discount on the price of dynamodb to go in reserve capacity in an hourly way you can see it goes from",
    "start": "972959",
    "end": "978639"
  },
  {
    "text": "280 000 130 thousand dollars to 15 000 yeah there's the upfront cost and",
    "start": "978639",
    "end": "984720"
  },
  {
    "text": "that adds another 15 000 on top basically over the three years so",
    "start": "984720",
    "end": "990639"
  },
  {
    "text": "all of this is uh is is uh really really great and of course like everybody this is not an open source technology",
    "start": "990639",
    "end": "997040"
  },
  {
    "text": "and so what is going to happen when maybe this is not adequate anymore or",
    "start": "997040",
    "end": "1002399"
  },
  {
    "text": "or are we going to get logged in is this going to be a complicated deal to go through how do we back up or we take out our",
    "start": "1002399",
    "end": "1009199"
  },
  {
    "text": "data or what if they stopped developing dynamodb like everybody forgot about simple db um so",
    "start": "1009199",
    "end": "1016959"
  },
  {
    "text": "it's an interesting it's an interesting problem it's of course every whatever everybody asks about there is a the best",
    "start": "1016959",
    "end": "1022880"
  },
  {
    "text": "way that i think um you can you can look at this problem and the way that we approached it is by",
    "start": "1022880",
    "end": "1029678"
  },
  {
    "text": "uh looking at speed there's been a lot of talk in the reinvent about increasing speed of execution from andy",
    "start": "1029679",
    "end": "1035520"
  },
  {
    "text": "jassy's first keynote and and werner vogel's second keynote and multiple other talks from amazon and",
    "start": "1035520",
    "end": "1040880"
  },
  {
    "text": "non-amazon people really really highlighted the importance of speed in in today's market",
    "start": "1040880",
    "end": "1046240"
  },
  {
    "text": "if you are not uber you are the you are the taxi companies if you're not if you're not the hotel sorry if you're",
    "start": "1046240",
    "end": "1053440"
  },
  {
    "text": "not airbnb or the hotels you're going to get disrupted if you're not going to move fast enough and it's going to be a problem so speed",
    "start": "1053440",
    "end": "1060720"
  },
  {
    "text": "is a really really important thing to in today's world and what what does this",
    "start": "1060720",
    "end": "1065919"
  },
  {
    "text": "all matter well it matters if my team is not capable of executing of",
    "start": "1065919",
    "end": "1070960"
  },
  {
    "text": "running uh in a completely global environment and i need to scale my database up to a",
    "start": "1070960",
    "end": "1077679"
  },
  {
    "text": "million requests per second and my team is not capable of doing this not because they're not smart or because they wouldn't be able to it's because",
    "start": "1077679",
    "end": "1083520"
  },
  {
    "text": "they are too few as a startup you need to scale fast and what you need what we are focusing on is",
    "start": "1083520",
    "end": "1088960"
  },
  {
    "text": "trying to operate on our product and it's a bit complicated to focus on the product when you are spending all of",
    "start": "1088960",
    "end": "1094240"
  },
  {
    "text": "this time in in operating a database that needs to run at a scale that nobody has seen",
    "start": "1094240",
    "end": "1100080"
  },
  {
    "text": "before basically or few companies have seen before and there is another another concept",
    "start": "1100080",
    "end": "1107840"
  },
  {
    "text": "related to this about moving fast that comes from martin fuller the the sacrificial architecture",
    "start": "1107840",
    "end": "1113679"
  },
  {
    "text": "so what this means is that effectively we need to stop loving the software that we write so much that we",
    "start": "1113679",
    "end": "1119360"
  },
  {
    "text": "get so much weight in our head about retiring our software it's really it's really an impediment to moving fast",
    "start": "1119360",
    "end": "1126080"
  },
  {
    "text": "if we get attached to the to it and effectively the same similar under along the similar lines",
    "start": "1126080",
    "end": "1132240"
  },
  {
    "text": "jeff dean at google said that what they do at google is they design a system to scale 10 to 20 times what is the current",
    "start": "1132240",
    "end": "1138559"
  },
  {
    "text": "load and if it goes above that they just re throw away the system and start from scratch this is a way to",
    "start": "1138559",
    "end": "1144480"
  },
  {
    "text": "avoid making a decision so that play well when you are a smaller company and when you grow up",
    "start": "1144480",
    "end": "1150799"
  },
  {
    "text": "the solutions that you chose is inadequate so going down to a little bit more",
    "start": "1150799",
    "end": "1156559"
  },
  {
    "text": "uh i think i think overall this is this for us being able to go fast and be able to",
    "start": "1156559",
    "end": "1164480"
  },
  {
    "text": "get to a final product faster than the competition is far more important than than being locked in but on top of that",
    "start": "1164480",
    "end": "1171360"
  },
  {
    "text": "dynamodb is not a special api that doesn't have things that cannot be implemented by another database and the",
    "start": "1171360",
    "end": "1176480"
  },
  {
    "text": "only thing that we would be doing is operating a database so rather than getting on us immediately",
    "start": "1176480",
    "end": "1181840"
  },
  {
    "text": "the cost of operating a database like that we'd rather move fast and then afterwards we can think about when we need it",
    "start": "1181840",
    "end": "1187360"
  },
  {
    "text": "if we need it move move a database like dynamodb the moment that it breaks on our own ends and run maybe a",
    "start": "1187360",
    "end": "1192640"
  },
  {
    "text": "cassandra cluster or something so all of this is uh is a is fun and",
    "start": "1192640",
    "end": "1198960"
  },
  {
    "text": "games but it's more about business so this is a 400 session so i'm gonna talk more about the",
    "start": "1198960",
    "end": "1205360"
  },
  {
    "text": "technology so if you talk about talk about cassandra and dynamodb to the to the very",
    "start": "1205360",
    "end": "1212000"
  },
  {
    "text": "kind and nice people at netflix um among the many things that they will mention is that the main reason why they're not",
    "start": "1212000",
    "end": "1217679"
  },
  {
    "text": "using the database like dynamodb is that they still needed replication of course uh monday i think dynamodb",
    "start": "1217679",
    "end": "1224799"
  },
  {
    "text": "released the streams feature and they also have an open source package to do cross-region replication now that it's",
    "start": "1224799",
    "end": "1231440"
  },
  {
    "text": "all very handy we did all of this stuff two years ago when none of these things were available so it's complicated uh",
    "start": "1231440",
    "end": "1238080"
  },
  {
    "text": "uh enough because of the scale that it actually is an interesting problem to tackle so",
    "start": "1238080",
    "end": "1244320"
  },
  {
    "text": "i'm going to talk about the way that the request handling architecture's work for address a little",
    "start": "1244320",
    "end": "1249360"
  },
  {
    "text": "bit more in detail so first of all we use elastic load balancing um",
    "start": "1249360",
    "end": "1254640"
  },
  {
    "text": "there's a there's a effectively two sides to other there is a data collection site as i said",
    "start": "1254640",
    "end": "1260640"
  },
  {
    "text": "and there is a bidder's side where we run all of our real-time building",
    "start": "1260640",
    "end": "1266240"
  },
  {
    "text": "this in particular is gonna is a is the uh is the bidder's side the um ad service side so the data",
    "start": "1266240",
    "end": "1273280"
  },
  {
    "text": "collection side is pretty much the same so the elastic load balancing in front there is assigned to",
    "start": "1273280",
    "end": "1278880"
  },
  {
    "text": "different exchanges so that if any one of the exchanges had a spiking load or some kind of trouble that caused",
    "start": "1278880",
    "end": "1284320"
  },
  {
    "text": "our capacity to be over allocated to this exchange because the elastic load balancing and",
    "start": "1284320",
    "end": "1289840"
  },
  {
    "text": "the auto scaling group are both too dedicated to a specific exchange and we can contain the",
    "start": "1289840",
    "end": "1295039"
  },
  {
    "text": "failure to a single area and we don't get we don't get to have latencies increases in different",
    "start": "1295039",
    "end": "1300080"
  },
  {
    "text": "networks because i don't know facebook or google had a big spike in traffic",
    "start": "1300080",
    "end": "1305360"
  },
  {
    "text": "due to specific some events that we cannot probably know then all of these data flows inside the",
    "start": "1305360",
    "end": "1310880"
  },
  {
    "text": "instance the instances here inside all of them are inside of the scaling groups and inside the auto scaling group we're on a supervisor that",
    "start": "1310880",
    "end": "1317840"
  },
  {
    "text": "makes sure that all of these uh that all of the processes that are important to the machine are properly",
    "start": "1317840",
    "end": "1323280"
  },
  {
    "text": "alive as i'm going to talk later about another demon that runs on the machine that is not depicted here that allows us to do uh to",
    "start": "1323280",
    "end": "1331200"
  },
  {
    "text": "improve our availability profile these instances are almost completely",
    "start": "1331200",
    "end": "1336720"
  },
  {
    "text": "stateless the black box and the black box which is our machine learning",
    "start": "1336720",
    "end": "1342960"
  },
  {
    "text": "program and and the erlang bidder are living in the same instance they are communicating with each other but they",
    "start": "1342960",
    "end": "1348960"
  },
  {
    "text": "don't really modify the state of the machine and they don't really have anything that they store in memory that is really",
    "start": "1348960",
    "end": "1354080"
  },
  {
    "text": "really important to be kept alive so it's really easy for us to kill any one of these guys and the way that we do",
    "start": "1354080",
    "end": "1360000"
  },
  {
    "text": "the dynamodb application all of these instances read from dynamodb is that we make we leverage amazon kinesis and amazon s3",
    "start": "1360000",
    "end": "1366880"
  },
  {
    "text": "we're starting to play with kinesis right now amazon s3 has been our rock-solid data transport platform",
    "start": "1366880",
    "end": "1374159"
  },
  {
    "text": "effectively for the last two or three years the advantage that we get and also this helps with the lockheed problem",
    "start": "1374159",
    "end": "1381039"
  },
  {
    "text": "very very easily really is that when data flows inside amazon kinesis or s3",
    "start": "1381039",
    "end": "1386720"
  },
  {
    "text": "it flows through a very super secret replication magic box um that i cannot reveal to you under",
    "start": "1386720",
    "end": "1393760"
  },
  {
    "text": "under even the rest and uh what this this helps a lot because",
    "start": "1393760",
    "end": "1398799"
  },
  {
    "text": "this replication magicbox is the only thing that writes to dynamodb everything is piped through logs",
    "start": "1398799",
    "end": "1404400"
  },
  {
    "text": "and a very fine gentleman the author of kafka wrote an incredibly nice article to read",
    "start": "1404400",
    "end": "1410480"
  },
  {
    "text": "not too long ago about how the log is the best database it's the best database because it has very nice",
    "start": "1410480",
    "end": "1415600"
  },
  {
    "text": "properties is ordered it's a you can replay a log and you can store it in long-term storage",
    "start": "1415600",
    "end": "1422000"
  },
  {
    "text": "effectively for a relatively cheap and you don't really need to access it in different way then sequentially",
    "start": "1422000",
    "end": "1427600"
  },
  {
    "text": "and so by having all of our data stored sequentially inside kinesis or amazon s3 at any point in time if we decide to we",
    "start": "1427600",
    "end": "1434000"
  },
  {
    "text": "can go back 30 days and replace the last 30 day of data and store that in dynamodb as we're doing today or",
    "start": "1434000",
    "end": "1441039"
  },
  {
    "text": "maybe we can switch to cassandra or maybe we can switch to hbase",
    "start": "1441039",
    "end": "1446799"
  },
  {
    "text": "or god forbids mongodb and and so all of these",
    "start": "1446799",
    "end": "1454080"
  },
  {
    "text": "all of these different pieces have a very interesting inner working so here's the",
    "start": "1454080",
    "end": "1460640"
  },
  {
    "text": "basic logic of the replication magic box which is you can't talk about if you exit this room uh",
    "start": "1460640",
    "end": "1467279"
  },
  {
    "text": "so it really is very very stupid i mean we we went to this and we thought there's there's a lot of",
    "start": "1467279",
    "end": "1473279"
  },
  {
    "text": "different uh problems but we took advantage because of this uh by of the fact that we have a single sorted",
    "start": "1473279",
    "end": "1479440"
  },
  {
    "text": "log storage basically and we can replay this log everything is sorted and no matter no matter what it is it's",
    "start": "1479440",
    "end": "1485760"
  },
  {
    "text": "the impotent we can basically run through this again and replay it and we put it inside dynamodb at any point in time and the",
    "start": "1485760",
    "end": "1492320"
  },
  {
    "text": "same data will be available in dynamodb and it's great so we decided to go with the simplest property",
    "start": "1492320",
    "end": "1497679"
  },
  {
    "text": "uh and and we just went we just did the simplest thing we have a queue we fetched the first item from the queue",
    "start": "1497679",
    "end": "1503760"
  },
  {
    "text": "and we write we go from endpoint of endpoint in in dynamodb and we update item now this",
    "start": "1503760",
    "end": "1509440"
  },
  {
    "text": "is great it works it's simple there's a couple of issues yeah the it's not multi-threaded or it",
    "start": "1509440",
    "end": "1516640"
  },
  {
    "text": "doesn't write in parallel to all the dynamodb clients which is a tool the dynamodb servers but",
    "start": "1516640",
    "end": "1522480"
  },
  {
    "text": "the real the real big problem and even if you use multi-threading you're not going to solve this issue or not solve it enough is",
    "start": "1522480",
    "end": "1529919"
  },
  {
    "text": "that this approach has a fairly low throughput for every one of the boxes because you just do one operation per",
    "start": "1529919",
    "end": "1536080"
  },
  {
    "text": "item and you're receiving billions of items in your in your right stream of dynamodb",
    "start": "1536080",
    "end": "1542240"
  },
  {
    "text": "so this though unfortunately at quite a little bit of a",
    "start": "1542240",
    "end": "1547440"
  },
  {
    "text": "of a pickle for us we were using update item and uh the thing that you think the most the",
    "start": "1547440",
    "end": "1552960"
  },
  {
    "text": "first thing that you might think about is trying to update multiple items at once there is no batch update and our key",
    "start": "1552960",
    "end": "1558799"
  },
  {
    "text": "storage our key structure was designed so that um it was working fine for updating one",
    "start": "1558799",
    "end": "1564240"
  },
  {
    "text": "item at a time and so we needed to do a big switch so this was this",
    "start": "1564240",
    "end": "1569279"
  },
  {
    "text": "basically required us to redo the entire database this was one of the cases where we had the data from the last 30 days or",
    "start": "1569279",
    "end": "1576000"
  },
  {
    "text": "so in the logs and we just went back the last 30 days and replayed the last 30 days and re-uploaded all of this stuff inside",
    "start": "1576000",
    "end": "1582960"
  },
  {
    "text": "inside dynamodb we changed the key from the format that we have at the top where basically we have a list of segments",
    "start": "1582960",
    "end": "1588480"
  },
  {
    "text": "inside dynamodb segment supports advanced types so naturally we want to use we want to",
    "start": "1588480",
    "end": "1593679"
  },
  {
    "text": "use uh sets and it's a very nice property similar to what redis does and and unfortunately what we discovered",
    "start": "1593679",
    "end": "1600240"
  },
  {
    "text": "is that not only it's really hard to batch update that system it's also harder to have multiple",
    "start": "1600240",
    "end": "1606080"
  },
  {
    "text": "different storm clients that are updating the same the same key from multiple tables",
    "start": "1606080",
    "end": "1611440"
  },
  {
    "text": "and so we decided to make a move to the new to a new key format a much more a much simpler one and take advantage of",
    "start": "1611440",
    "end": "1618240"
  },
  {
    "text": "the fact that you can query using the query operation inside the dynamodb you can query using the",
    "start": "1618240",
    "end": "1623760"
  },
  {
    "text": "hash key and the wheel will return all of the segments that are attached to the that are attached to this key uh you pay",
    "start": "1623760",
    "end": "1631120"
  },
  {
    "text": "in a very efficient way also because dynamodb is going to pack all of the space used by these uh",
    "start": "1631120",
    "end": "1637360"
  },
  {
    "text": "small key value pairs and it's going to compress them in in the smallest format possible and",
    "start": "1637360",
    "end": "1642480"
  },
  {
    "text": "you pay as uh as if this was a single get operation effectively for the size of the compounded payload",
    "start": "1642480",
    "end": "1649200"
  },
  {
    "text": "effectively so we played around with a few of these uh with a few of these schemas before and",
    "start": "1649200",
    "end": "1654640"
  },
  {
    "text": "and this ended up being the most efficient version because now dynamodb does have a batch put item and",
    "start": "1654640",
    "end": "1660880"
  },
  {
    "text": "we were able to change our our magicbox replication to be effectively something like this so we",
    "start": "1660880",
    "end": "1666480"
  },
  {
    "text": "were going through a cue fetch instead of one item a batch size for the item and in dynamodb the batch size is 25 and",
    "start": "1666480",
    "end": "1673840"
  },
  {
    "text": "basically with just this simple change just changing the key structure and couple of lines in our code",
    "start": "1673840",
    "end": "1680000"
  },
  {
    "text": "we were able to go from one operation per item to uh be able to uh in one operation upload 25",
    "start": "1680000",
    "end": "1686720"
  },
  {
    "text": "items to dynamodb that's without multi-threading that's 25 times higher throughput instead of having i don't know 50",
    "start": "1686720",
    "end": "1694240"
  },
  {
    "text": "machines to run the replication we have what is it two should be simple but",
    "start": "1694240",
    "end": "1700080"
  },
  {
    "text": "it's nine a.m so um so yeah that this",
    "start": "1700080",
    "end": "1706399"
  },
  {
    "text": "that code is all is all really simple and we don't really use python for this site this is practically the code",
    "start": "1706399",
    "end": "1712720"
  },
  {
    "text": "as we run it in production there's very little things that change here there's a at the top of this code",
    "start": "1712720",
    "end": "1717840"
  },
  {
    "text": "where we build where we fetch things from a queue and then we build all of the operations inside dynamodb and then we",
    "start": "1717840",
    "end": "1724559"
  },
  {
    "text": "uh we prepare to write to the different endpoints and then we write all of these uh batch packages in every",
    "start": "1724559",
    "end": "1731919"
  },
  {
    "text": "one of the endpoints and then i conveniently left out 200 200 plus",
    "start": "1731919",
    "end": "1737039"
  },
  {
    "text": "lines of of error code and retries and exponential back off all things that honestly dynamic amazon",
    "start": "1737039",
    "end": "1743840"
  },
  {
    "text": "should solve the the sdk the sdk client has much better knowledge of how to use dynamodb",
    "start": "1743840",
    "end": "1749919"
  },
  {
    "text": "i don't feel like we should be wasting our time but yeah whatever other topic",
    "start": "1749919",
    "end": "1755679"
  },
  {
    "text": "so uh yeah how do we do deployment so we moved all of our state inside inside dynamodb",
    "start": "1755679",
    "end": "1761840"
  },
  {
    "text": "the machines don't really have any any state and they all write into this common log and this common log",
    "start": "1761840",
    "end": "1767440"
  },
  {
    "text": "is now capable of being replayed and we can run all the types of operations we want we can store",
    "start": "1767440",
    "end": "1773039"
  },
  {
    "text": "one of the most amazing things that that happens in advertising actually really really hard problem to solve is",
    "start": "1773039",
    "end": "1778399"
  },
  {
    "text": "that when i want to cast a customer comes to us they give us uh it's a bit of a digression but they come to us and they",
    "start": "1778399",
    "end": "1784559"
  },
  {
    "text": "ask us to spend fifty dollars throughout the world and we need to be capable of moving these fifty dollars",
    "start": "1784559",
    "end": "1790320"
  },
  {
    "text": "from the west coast to singapore as the sun is moving and it's really hard to do with with a forecasting tool",
    "start": "1790320",
    "end": "1796640"
  },
  {
    "text": "and we're using a combination of kinesis and dynamodb to move all of these budget operations around",
    "start": "1796640",
    "end": "1802640"
  },
  {
    "text": "and so the state of the machines instead of changing directly we change it by having messages sent through dynamodb",
    "start": "1802640",
    "end": "1808320"
  },
  {
    "text": "then are replicated worldwide inside dyna inside the dynamodb and the machines read back the",
    "start": "1808320",
    "end": "1814799"
  },
  {
    "text": "state and complete their own their own operation even on bootstrap so this allows us effectively to move",
    "start": "1814799",
    "end": "1820159"
  },
  {
    "text": "around something like six hundred thousand objects throughout the world and have less than one percent a",
    "start": "1820159",
    "end": "1825600"
  },
  {
    "text": "discrepancy from what we could be able to do from reading logs directly so it's a really really powerful system",
    "start": "1825600",
    "end": "1831600"
  },
  {
    "text": "and i uh i know it might seem like inefficient to use logs but it's really really cool i'm gonna need to move really quick",
    "start": "1831600",
    "end": "1839200"
  },
  {
    "text": "because they see the time so we deploy typically using blue green deployments we use packer io to build",
    "start": "1839200",
    "end": "1845120"
  },
  {
    "text": "the amis there's very few scripts and and they they run flawlessly in 10 minutes we use tags version exchange",
    "start": "1845120",
    "end": "1852480"
  },
  {
    "text": "and application to manage costs and to be able to identify clusters and we use a small python script",
    "start": "1852480",
    "end": "1859279"
  },
  {
    "text": "to automate our release process we do everything from here and actually depending on the team the team can actually decide to even automate the",
    "start": "1859279",
    "end": "1865760"
  },
  {
    "text": "entire thing and no human needs to needs to operate the deployment with this is what we used to do phase deployment and rollout now",
    "start": "1865760",
    "end": "1872320"
  },
  {
    "text": "amazon released code deploy so this was also wasted effort",
    "start": "1872320",
    "end": "1878159"
  },
  {
    "text": "and uh and uh but it's cool it's it's nice to write this these these lines of code so running through",
    "start": "1878159",
    "end": "1884080"
  },
  {
    "text": "running through the running through the lesson also there's nothing special about it we just use the amazon tools uh and the amazon apis to release",
    "start": "1884080",
    "end": "1890799"
  },
  {
    "text": "different pieces as i said it's mostly about building an ami that is self-contained and no",
    "start": "1890799",
    "end": "1896159"
  },
  {
    "text": "no state on the machine and you just are capable of running up and down your instances and then you need to",
    "start": "1896159",
    "end": "1901440"
  },
  {
    "text": "figure out how the deployment works which is which is in itself a complicated task so",
    "start": "1901440",
    "end": "1906720"
  },
  {
    "text": "dynamodb we run a million operations a second it's really tough if your keys is not unifor key space is",
    "start": "1906720",
    "end": "1912240"
  },
  {
    "text": "not uniform and uniformly accessed you're going to get throttling how did we solve this problem it's complicated uh we added the tiny",
    "start": "1912240",
    "end": "1919600"
  },
  {
    "text": "read cache uh it's about uh a cache that lasts about 10 seconds in front of the bidders",
    "start": "1919600",
    "end": "1924880"
  },
  {
    "text": "in front sorry behind the bidders in front of dynamodb and this cache has been able to reduce our throttling significantly",
    "start": "1924880",
    "end": "1931120"
  },
  {
    "text": "so this is on the on the right side our right throttling on the left side our read throttling this is uh that 3000",
    "start": "1931120",
    "end": "1938159"
  },
  {
    "text": "at peak is on a hundred plus thousand so it's at most of three percent and for most of the time it's",
    "start": "1938159",
    "end": "1943919"
  },
  {
    "text": "around zero on the read side that's the part that it's really really complicated on the right side we can always rethrive",
    "start": "1943919",
    "end": "1949600"
  },
  {
    "text": "retry things that's a bit offline so but we still have a really really low row low throttling it's very important",
    "start": "1949600",
    "end": "1957440"
  },
  {
    "text": "even a very very simple cache the last 10 seconds because of the locality of the requests that we see on",
    "start": "1957440",
    "end": "1962559"
  },
  {
    "text": "the web leads to really extremely good results and there's not a lot of usage of memory on the machines because of this",
    "start": "1962559",
    "end": "1969279"
  },
  {
    "text": "do not hug machines they're not our friends it's a do not machine any machine that",
    "start": "1969279",
    "end": "1976159"
  },
  {
    "text": "is special is going to be a single point of failure they should not have names they should have tags if a machine is about to fail every machine is running a",
    "start": "1976159",
    "end": "1982159"
  },
  {
    "text": "demon i said earlier this demon checks all the different places where the machine could go wrong the disc breaks down so it writes a byte",
    "start": "1982159",
    "end": "1989600"
  },
  {
    "text": "on the disk the the engine x goes down so it tries to do requests on engine x",
    "start": "1989600",
    "end": "1994799"
  },
  {
    "text": "and tries to verify the whole flow from nginx to the bidders to then uh the state of the bidders if",
    "start": "1994799",
    "end": "2000399"
  },
  {
    "text": "anything is wrong for five consecutive periods which is about five minutes that instance is completely just",
    "start": "2000399",
    "end": "2005919"
  },
  {
    "text": "completely killed the logs of course are saved and shipped to s3 so we can do forensics later but we don't keep that instance around",
    "start": "2005919",
    "end": "2012240"
  },
  {
    "text": "we're not friends and we just need to keep the infrastructure available at all times",
    "start": "2012240",
    "end": "2018080"
  },
  {
    "text": "on top of that as i said machines are stateless state is a really big baggage and it's really complicated to move",
    "start": "2018080",
    "end": "2023840"
  },
  {
    "text": "around when you're managing state you start to talk about paxos you start to talk about raft or how do you move things around",
    "start": "2023840",
    "end": "2029600"
  },
  {
    "text": "between instances or whatnot you start to do some jumps that don't make any sense so",
    "start": "2029600",
    "end": "2035679"
  },
  {
    "text": "better go stateless and move all of our of our state inside dynamodb or whatever other types of storage",
    "start": "2035679",
    "end": "2040880"
  },
  {
    "text": "that we don't need to uh manage in conjunction with the releases of the same machines so try to split the functionality and",
    "start": "2040880",
    "end": "2047360"
  },
  {
    "text": "the state of these of these boxes tcp load balancers",
    "start": "2047360",
    "end": "2052480"
  },
  {
    "text": "balance connections not requests and it's a it's obvious of course but",
    "start": "2052480",
    "end": "2057599"
  },
  {
    "text": "you don't think about it when you see graphs like this and this is a graph that is a six digit",
    "start": "2057599",
    "end": "2063280"
  },
  {
    "text": "damage to the revenue of adderall in 24 hours what has happened here c3s have been",
    "start": "2063280",
    "end": "2068800"
  },
  {
    "text": "released and it was around march 6th two weeks after they released them or something like that we deployed them and what happened is",
    "start": "2068800",
    "end": "2075358"
  },
  {
    "text": "that these machines were so efficient that they were actually not timing out that often and so the first three",
    "start": "2075359",
    "end": "2080720"
  },
  {
    "text": "machines that joined the elb group ended up capturing all of the connections and didn't leave any",
    "start": "2080720",
    "end": "2085760"
  },
  {
    "text": "connections for the other ones this is the cpu graph of those three machines so we're using about 60 70",
    "start": "2085760",
    "end": "2091200"
  },
  {
    "text": "percent of the cpu of the entire cluster and what was happening is that those three machines were running out of budget",
    "start": "2091200",
    "end": "2096720"
  },
  {
    "text": "but all the other machines were not and so we were not spending all of the budget that is up there and there's many machines there",
    "start": "2096720",
    "end": "2102560"
  },
  {
    "text": "and it took us 24 hours to find this problem and it cost a lot of money and how did we solve it well we had a",
    "start": "2102560",
    "end": "2108560"
  },
  {
    "text": "short-term solution we reduced the number of machines they started to time out more and everything went back to",
    "start": "2108560",
    "end": "2114839"
  },
  {
    "text": "normal and then afterwards we thought that's dumb so",
    "start": "2114839",
    "end": "2120560"
  },
  {
    "text": "let's let's uh let's put instead a random chance of closing a connection",
    "start": "2120560",
    "end": "2126079"
  },
  {
    "text": "over time for every one of these machines and so they started to update themselves uh this means of",
    "start": "2126079",
    "end": "2132640"
  },
  {
    "text": "course that your metrics need to be everywhere and perfect when you deploy a system like this distributed there are",
    "start": "2132640",
    "end": "2138720"
  },
  {
    "text": "really secondary tertiary effects it's really hard to figure out how everything is working during a deployment",
    "start": "2138720",
    "end": "2144160"
  },
  {
    "text": "even an automatic deployment is not always safe you need to have metrics at least one minute latency no more than that one",
    "start": "2144160",
    "end": "2150320"
  },
  {
    "text": "minute interval and less is much better you need to have the ability to see",
    "start": "2150320",
    "end": "2155599"
  },
  {
    "text": "period on period views of your metrics and be able to alert on that cloudwatch doesn't support this so we",
    "start": "2155599",
    "end": "2162480"
  },
  {
    "text": "need to implement our own on that and when you need to be able to do matrix math subtracting",
    "start": "2162480",
    "end": "2167920"
  },
  {
    "text": "different metrics or doing rate of change or integral or compositions of different metrics",
    "start": "2167920",
    "end": "2172960"
  },
  {
    "text": "because distributed systems are complicated and there isn't one single matrix that you're going to look at when",
    "start": "2172960",
    "end": "2178480"
  },
  {
    "text": "something needs to be alerted on there's usually 10 15 metrics that you need to look at exactly",
    "start": "2178480",
    "end": "2183839"
  },
  {
    "text": "for to understand what exactly has been happening and you can't you can't save on this this is really really important for your uptime it's like",
    "start": "2183839",
    "end": "2190320"
  },
  {
    "text": "it's like uh doing the japanese uh uh both or bo uh exercise where they are",
    "start": "2190320",
    "end": "2197280"
  },
  {
    "text": "like blinded and running on the back of the horse facing backwards and they somehow",
    "start": "2197280",
    "end": "2202800"
  },
  {
    "text": "managed to nail it i don't know how they do it so the most and the last the last",
    "start": "2202800",
    "end": "2210400"
  },
  {
    "text": "parting thought uh before i go believe it to is that cross-team capacity planning is",
    "start": "2210400",
    "end": "2216160"
  },
  {
    "text": "actually really really hard you have multiple teams amazon says that every team should be independent they",
    "start": "2216160",
    "end": "2222079"
  },
  {
    "text": "shouldn't they shouldn't necessarily communicate too much between each other because the cost of coordination is really high when",
    "start": "2222079",
    "end": "2227920"
  },
  {
    "text": "the teams start to scale and so you would like to be able to tell a team right to this table and to another team right to this table",
    "start": "2227920",
    "end": "2234160"
  },
  {
    "text": "and then a third team that you didn't foresee comes up and decides that they need to write 50 billion rows in the same in the same",
    "start": "2234160",
    "end": "2241040"
  },
  {
    "text": "table as the other two and suddenly the other two systems start to fail and so it's really complicated to manage",
    "start": "2241040",
    "end": "2246079"
  },
  {
    "text": "this type of capacity and dynamodb is not there yet i know the team is working on improving this aspect but",
    "start": "2246079",
    "end": "2252160"
  },
  {
    "text": "for now there isn't really an amazing way to work around this problem besides riding",
    "start": "2252160",
    "end": "2258400"
  },
  {
    "text": "throttling uh clients for for your dynamodb cluster so trying to figure out how fast you're",
    "start": "2258400",
    "end": "2263599"
  },
  {
    "text": "riding so you can ratchet down and set some kind of threshold in there but other than that this is probably the",
    "start": "2263599",
    "end": "2269599"
  },
  {
    "text": "number one thing that is hurting us because it's really hard to have coordination",
    "start": "2269599",
    "end": "2274720"
  },
  {
    "text": "across teams if you want to move really really fast and thank you for your attention",
    "start": "2274720",
    "end": "2285838"
  },
  {
    "text": "uh",
    "start": "2296839",
    "end": "2299839"
  },
  {
    "text": "especially the processing stages are decoupled from the storage the storage decouples",
    "start": "2335440",
    "end": "2341200"
  },
  {
    "text": "various processing stages the other piece in the architecture is that there is a batch layer",
    "start": "2341200",
    "end": "2346400"
  },
  {
    "text": "and a speed layer for example the data collection layer is a batch layer for example you know",
    "start": "2346400",
    "end": "2351760"
  },
  {
    "text": "all the pixels or the javascript code that runs in browsers that tell that plants the cookie and sends the",
    "start": "2351760",
    "end": "2357760"
  },
  {
    "text": "data over to adroll is in the batch layer you know that hits the batch layer",
    "start": "2357760",
    "end": "2363599"
  },
  {
    "text": "and then then eventually glitch globally distributed to the to the bid serving system uh which is",
    "start": "2363599",
    "end": "2369040"
  },
  {
    "text": "the speed layer um so getting into the specifics of that",
    "start": "2369040",
    "end": "2374240"
  },
  {
    "text": "in terms of the data collection and storage you know the architecture is really a simply an elastic load balancer that is sending all the",
    "start": "2374240",
    "end": "2381119"
  },
  {
    "text": "requests out to ec2 instances in multiple azs and those instances are writing to",
    "start": "2381119",
    "end": "2387440"
  },
  {
    "text": "amazon s3 and also amazon kinesis which is your storage tier there",
    "start": "2387440",
    "end": "2393680"
  },
  {
    "text": "to to to decouple uh the other uh you know data serving layer from this",
    "start": "2393680",
    "end": "2398880"
  },
  {
    "text": "and um in terms of the global distribution um now what happens is that magic box that",
    "start": "2398880",
    "end": "2405839"
  },
  {
    "text": "valentino talked about is actually the the apache storm cluster here that is taking the data and actually",
    "start": "2405839",
    "end": "2412960"
  },
  {
    "text": "distributing it to the dynamodb database in the in the same region",
    "start": "2412960",
    "end": "2418000"
  },
  {
    "text": "as well as in other regions i've used u.s west region and the eu west region here and there's",
    "start": "2418000",
    "end": "2423680"
  },
  {
    "text": "other regions that gets distributed as well for example you know singapore and potentially japan",
    "start": "2423680",
    "end": "2429040"
  },
  {
    "text": "and so you know putting it together uh the data collection layer",
    "start": "2429040",
    "end": "2434400"
  },
  {
    "text": "and bidding layer are decoupled um from each other and then the apache",
    "start": "2434400",
    "end": "2440000"
  },
  {
    "text": "strum actually moves the data that is collected by the data collection layer",
    "start": "2440000",
    "end": "2445359"
  },
  {
    "text": "to actually the bidding in a bidding layer and and again uh the stack is very",
    "start": "2445359",
    "end": "2452720"
  },
  {
    "text": "similar in the beading layer there's an elastic load balancer you know how you know for example the ad exchanges",
    "start": "2452720",
    "end": "2458480"
  },
  {
    "text": "communicate to the elastic load balancer and talk to the instances you know behind the load balancer",
    "start": "2458480",
    "end": "2465119"
  },
  {
    "text": "and and then and then the requests are served from dynamodb there so getting into one more level of depth",
    "start": "2465119",
    "end": "2472560"
  },
  {
    "text": "uh you know and really this is how the architecture looks like if you look at um you know i think this is i'm not sure",
    "start": "2472560",
    "end": "2478880"
  },
  {
    "text": "how much you can see from there i mean i i tried to fit everything in a single slide so you can you can you can you can see the whole picture",
    "start": "2478880",
    "end": "2485839"
  },
  {
    "text": "what's really happening is here this one is a single region and this is us let's say us east coast",
    "start": "2485839",
    "end": "2493680"
  },
  {
    "text": "and then this one is the u.s west coast there are two stack there are three stacks there what they do is they take the single",
    "start": "2493680",
    "end": "2499119"
  },
  {
    "text": "stack the same stack is replicated in multiple regions which is which is slight difference you",
    "start": "2499119",
    "end": "2505680"
  },
  {
    "text": "know the u.s east region acts as the master so in fact all the data if you look at the data collection",
    "start": "2505680",
    "end": "2511200"
  },
  {
    "text": "tier here the data collection tier is actually writing the data back to amazon s3 and amazon kinesis in the u.s",
    "start": "2511200",
    "end": "2519440"
  },
  {
    "text": "region which is the master region and and then the strom cluster takes the data and distributes the data",
    "start": "2519440",
    "end": "2526160"
  },
  {
    "text": "to dynamodb in multiple regions right and this is the and that is the magic",
    "start": "2526160",
    "end": "2531200"
  },
  {
    "text": "box there that's actually doing the distribution there and then now the speed layer here every",
    "start": "2531200",
    "end": "2536319"
  },
  {
    "text": "ad network they stand up a stack for every ad network you know this is the high speed layer that's actually serving",
    "start": "2536319",
    "end": "2542319"
  },
  {
    "text": "requests at less than you know 100 100 milliseconds uh serving a billion requests there",
    "start": "2542319",
    "end": "2548800"
  },
  {
    "text": "sorry million requests there it's 9 a.m on friday so trying to get my",
    "start": "2548800",
    "end": "2554160"
  },
  {
    "text": "head together so so in terms of the each layer here in the data collection layer simply",
    "start": "2554160",
    "end": "2560400"
  },
  {
    "text": "is built on top of amazon ec2 elastic load balancing and auto scaling",
    "start": "2560400",
    "end": "2565599"
  },
  {
    "text": "the storage tier here is built again on top of s3 and amazon kinesis as we talked about",
    "start": "2565599",
    "end": "2571359"
  },
  {
    "text": "the global distribution piece that is here runs on top of ec2 and",
    "start": "2571359",
    "end": "2576800"
  },
  {
    "text": "similarly the stack is inverse on the other side you know the bids are being served from a",
    "start": "2576800",
    "end": "2581920"
  },
  {
    "text": "in an elastic load balancer uh that is hooked up to an auto scaling group uh which actually fires up the various",
    "start": "2581920",
    "end": "2588640"
  },
  {
    "text": "ec2 instances um so the summary here is that you know when you're building scalable",
    "start": "2588640",
    "end": "2594720"
  },
  {
    "text": "architectures like this uh think of your architecture you know have",
    "start": "2594720",
    "end": "2599920"
  },
  {
    "text": "build decoupled architectures you know there should be a storage tier that separates the processing tiers and",
    "start": "2599920",
    "end": "2606800"
  },
  {
    "text": "then use the right store in each tier in other words um you know i think you cannot whatever you do here cannot break",
    "start": "2606800",
    "end": "2612400"
  },
  {
    "text": "the break the bank you know for example there is no need to have a large speed you know they can wait for 30 minutes",
    "start": "2612400",
    "end": "2617920"
  },
  {
    "text": "uh to an hour for the bid you know for the data collection piece to update their update their database here uh there's no",
    "start": "2617920",
    "end": "2624800"
  },
  {
    "text": "point therefore they picked a great data store there which is which is s3 or kinesis they have a few you know a few minutes",
    "start": "2624800",
    "end": "2631599"
  },
  {
    "text": "uh to replicate the data and then in the case of the serving tier they picked a very hot data store which is",
    "start": "2631599",
    "end": "2637839"
  },
  {
    "text": "dynamodb that can serve requests um at you know any number of requests at",
    "start": "2637839",
    "end": "2643040"
  },
  {
    "text": "a at a constant you know latency a low latency so you know that in my mind is the is",
    "start": "2643040",
    "end": "2650000"
  },
  {
    "text": "the essence of their of their secret here um in in serving such high uh request rate at",
    "start": "2650000",
    "end": "2656880"
  },
  {
    "text": "such low latency so the summary here here is that you can build architectures um using amazon",
    "start": "2656880",
    "end": "2665280"
  },
  {
    "text": "services uh that can serve you know billions of requests uh per day really it doesn't really",
    "start": "2665280",
    "end": "2670880"
  },
  {
    "text": "matter what scale of requests that you have you can actually use these primitives",
    "start": "2670880",
    "end": "2676400"
  },
  {
    "text": "to serve those requires with that um thank you very much for your time i hope that was helpful and it was a",
    "start": "2676400",
    "end": "2682319"
  },
  {
    "text": "pleasure to talk to you",
    "start": "2682319",
    "end": "2690560"
  }
]