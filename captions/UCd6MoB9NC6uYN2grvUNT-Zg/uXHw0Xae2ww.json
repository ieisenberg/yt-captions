[
  {
    "text": "so anybody who was asleep who hasn't been outside since the conference",
    "start": "230",
    "end": "5279"
  },
  {
    "text": "started oh yeah yeah it's rough",
    "start": "5279",
    "end": "10830"
  },
  {
    "text": "who uses Dropbox these are Netflix who's",
    "start": "10830",
    "end": "15900"
  },
  {
    "text": "looked at the cool pictures from Mars who uses Pinterest that's good that's",
    "start": "15900",
    "end": "25019"
  },
  {
    "text": "good I'm proud some of you admitted it some nice art deco cupcake decorations",
    "start": "25019",
    "end": "30449"
  },
  {
    "text": "the other day they're gonna be fabulous anyway all of those things have something in common",
    "start": "30449",
    "end": "36600"
  },
  {
    "text": "they all use s3 a lot I really like the pictures from Mars story in s3 right",
    "start": "36600",
    "end": "43770"
  },
  {
    "text": "there's a little robot on Mars it sends a picture in to a satellite in",
    "start": "43770",
    "end": "49980"
  },
  {
    "text": "geosynchronous orbit above the earth that satellite makes a TCP connection to s3 Amazon AWS comm and puts the image I",
    "start": "49980",
    "end": "58800"
  },
  {
    "text": "mean pictures from Mars s3 is a tremendous product that does tremendous",
    "start": "58800",
    "end": "64198"
  },
  {
    "text": "things it holds trillions and trillions of unique customer objects we're not",
    "start": "64199",
    "end": "71520"
  },
  {
    "text": "counting EBS snapshots in this we're not counting all the ways Amazon and AWS use",
    "start": "71520",
    "end": "77460"
  },
  {
    "text": "s3 it holds trillions of your objects it's tremendous it's incredibly durable",
    "start": "77460",
    "end": "84509"
  },
  {
    "text": "it's designed to survive the simultaneous failure of multiple",
    "start": "84509",
    "end": "89820"
  },
  {
    "text": "physical facilities right so your data center on-premise it's one building",
    "start": "89820",
    "end": "95759"
  },
  {
    "text": "truck runs into the building you have a problem a truck runs into a building that holds s3 you don't even know you",
    "start": "95759",
    "end": "102990"
  },
  {
    "text": "won't even know and that's the idea we're delivering that durability to you as a service it is in aggregate",
    "start": "102990",
    "end": "110299"
  },
  {
    "text": "incredibly fast 1.5 million puts and gets per second to the s3 infrastructure",
    "start": "110299",
    "end": "118740"
  },
  {
    "text": "as three is very very fast so I want",
    "start": "118740",
    "end": "124320"
  },
  {
    "text": "everybody in this room to use s3 well because it is possible to do a poor job using s3 and s3 will protect you from",
    "start": "124320",
    "end": "132660"
  },
  {
    "text": "yourself three will continue to operate well no matter how you use it but if you use it",
    "start": "132660",
    "end": "139170"
  },
  {
    "text": "well and you help us help you we can make s3 a lot better together so we're",
    "start": "139170",
    "end": "144510"
  },
  {
    "text": "gonna get into a bunch of details we want to talk about a bunch of topics we're gonna move through this very very quickly we have a lot of stuff to cover",
    "start": "144510",
    "end": "151230"
  },
  {
    "text": "a videotape of this session this session the code behind the demos I'm gonna show",
    "start": "151230",
    "end": "157230"
  },
  {
    "text": "you and more sample code plus some other stuff is gonna get emailed to you on Wednesday so you can have access to all",
    "start": "157230",
    "end": "163950"
  },
  {
    "text": "of this and the code and the executables on Wednesday so if you're not keeping up",
    "start": "163950",
    "end": "169200"
  },
  {
    "text": "that's perfectly fine we can get there we start before you even begin if at all",
    "start": "169200",
    "end": "175440"
  },
  {
    "text": "possible by choosing a region okay we have nine regions spread all around the world each region is made up of one or",
    "start": "175440",
    "end": "182190"
  },
  {
    "text": "more availability zones every availability zone is made up of one or more buildings",
    "start": "182190",
    "end": "187709"
  },
  {
    "text": "sorry each available each region has at least two availability zones each availability zones made up of one or more buildings that are separated by",
    "start": "187709",
    "end": "194370"
  },
  {
    "text": "some number of miles so we're very redundant when you pick a region you've got to consider some things if you're",
    "start": "194370",
    "end": "200370"
  },
  {
    "text": "building an application for the financial services industry and all of your customers are in New Jersey in New",
    "start": "200370",
    "end": "207480"
  },
  {
    "text": "York then you'll probably want to be in the u.s. East region because speed of light means that's gonna be a little bit faster for them if you're building an",
    "start": "207480",
    "end": "214380"
  },
  {
    "text": "application for people in the EU we have a region EU West one in Dublin you're gonna want to put your data in there",
    "start": "214380",
    "end": "220290"
  },
  {
    "text": "okay if you're gonna run EMR clusters or maybe Kinesis the new streaming service",
    "start": "220290",
    "end": "227660"
  },
  {
    "text": "against stuff in a bucket or put stuff from Kinesis into a bucket you're gonna want to make sure your bucket is in the",
    "start": "227660",
    "end": "233190"
  },
  {
    "text": "same region as Kinesis for performance legal and regulatory requirements we",
    "start": "233190",
    "end": "238290"
  },
  {
    "text": "talked about that if you're providing services to somebody in Brazil and they say I want my data in Brazil you're",
    "start": "238290",
    "end": "243660"
  },
  {
    "text": "gonna use our South Paulo region or Sydney region so on and so forth and costs vary by region right very",
    "start": "243660",
    "end": "250500"
  },
  {
    "text": "transparent about our costs they're all online so just go ahead and check the cost and use that when you're making a decision okay so we're gonna start right",
    "start": "250500",
    "end": "260100"
  },
  {
    "text": "off with a quick demo",
    "start": "260100",
    "end": "263479"
  },
  {
    "text": "and we're gonna talk about the details of this demo later but I want to get everybody looking at what some simple",
    "start": "267789",
    "end": "274970"
  },
  {
    "text": "simple changes can do we're putting a 100 megabyte object from s3 sorry from a",
    "start": "274970",
    "end": "283699"
  },
  {
    "text": "machine in u.s. East one to s3 we're uploading it sequentially so we're",
    "start": "283699",
    "end": "288979"
  },
  {
    "text": "taking the first bit of the file we're putting it we're taking the second bit of the file we're putting it we're doing it as a single thread sequentially okay",
    "start": "288979",
    "end": "296780"
  },
  {
    "text": "if you're using just a if you've UC and you're against our native restful interface this is how you're doing it",
    "start": "296780",
    "end": "302360"
  },
  {
    "text": "and it's it's not terribly fast that hundred megabyte file took eleven point",
    "start": "302360",
    "end": "307430"
  },
  {
    "text": "nine seconds 12 seconds to upload if you do multi-part upload right all of a",
    "start": "307430",
    "end": "315680"
  },
  {
    "text": "sudden that turns into five seconds and the way that everybody in here can start doing multi-part outload is use one of",
    "start": "315680",
    "end": "321770"
  },
  {
    "text": "our SDKs all of our SDKs all over them implement multi-part upload",
    "start": "321770",
    "end": "328240"
  },
  {
    "text": "automatically and transparently to you and what multi-part upload does is look at the size of the object decide how",
    "start": "328240",
    "end": "335150"
  },
  {
    "text": "many chunks to chunk it into right most of the SDKs do that based on the number of cores you have in your system",
    "start": "335150",
    "end": "343029"
  },
  {
    "text": "right chunks it up into that puts it into s3 and then you can get it as a",
    "start": "343029",
    "end": "349190"
  },
  {
    "text": "single chunk later so it's called multi-part upload it's been around for a very long time a lot of people don't use it and I don't know",
    "start": "349190",
    "end": "354620"
  },
  {
    "text": "why incredibly easy to use just use our SDKs and you'll get good multi-part",
    "start": "354620",
    "end": "360529"
  },
  {
    "text": "upload performance okay you can implement it yourself as well but you'll get good multi-part upload performance",
    "start": "360529",
    "end": "366529"
  },
  {
    "text": "we do the questions at the end of the I should mention that as well the new CLI",
    "start": "366529",
    "end": "373580"
  },
  {
    "text": "is based on the boto SDK so the new CLI has multi-part uploads so if you're just",
    "start": "373580",
    "end": "379039"
  },
  {
    "text": "doing bash scripting it's already there for you",
    "start": "379039",
    "end": "383138"
  },
  {
    "text": "weird my clicker go alright so let's",
    "start": "385910",
    "end": "391440"
  },
  {
    "text": "talk about naming all right I want everybody everybody's gonna get access to all of this stuff on Wednesday but",
    "start": "391440",
    "end": "398490"
  },
  {
    "text": "those of you that have your phone out have your iPad out or of course have your Kindle Fire out and once you go that URL or that URLs gonna lead you to",
    "start": "398490",
    "end": "405270"
  },
  {
    "text": "the most important piece of documentation you need to have if you're",
    "start": "405270",
    "end": "411240"
  },
  {
    "text": "worried about maximum performance on your s3 bucket okay so everybody go there the naming scheme of your keys is",
    "start": "411240",
    "end": "419810"
  },
  {
    "text": "important we use your naming scheme to spread your workload across lots of our",
    "start": "419810",
    "end": "427110"
  },
  {
    "text": "resources so if you have a poor naming scheme we're not going to be able to spread your your data across our",
    "start": "427110",
    "end": "434130"
  },
  {
    "text": "resources and so you're going to have a ceiling on the performance of your",
    "start": "434130",
    "end": "439710"
  },
  {
    "text": "bucket of about 100 transactions per second we're going to talk about transactions per second that's going to",
    "start": "439710",
    "end": "446550"
  },
  {
    "text": "lead you to the document that discusses naming schemes and we're going to go into some of the details about naming schemes now but this is important I want",
    "start": "446550",
    "end": "453509"
  },
  {
    "text": "everybody to have that in their bookmarks let's look at what a transaction is a transaction is a put or",
    "start": "453509",
    "end": "458880"
  },
  {
    "text": "a get for the most part let's look at a in a theoretical mobile application I",
    "start": "458880",
    "end": "464340"
  },
  {
    "text": "have a mobile device I have a bucket I have some ec2 instances that I'm gonna do work on those on that bucket with I",
    "start": "464340",
    "end": "471770"
  },
  {
    "text": "start by say uploading a video to s3 off of a mobile device that's one",
    "start": "471770",
    "end": "477840"
  },
  {
    "text": "transaction that's a put my cluster of ec2 instances get that video out of the",
    "start": "477840",
    "end": "485159"
  },
  {
    "text": "bucket that's two transactions it transcode them into three other formats",
    "start": "485159",
    "end": "490949"
  },
  {
    "text": "that's what my application is doing and puts them back to the bucket that's transactions three four and five and",
    "start": "490949",
    "end": "497150"
  },
  {
    "text": "then the mobile client gets those that's transactions six seven and eight so one",
    "start": "497150",
    "end": "504810"
  },
  {
    "text": "event in my application is eight two transactions if I ignored if you've",
    "start": "504810",
    "end": "512789"
  },
  {
    "text": "ignored my advice on naming schemes your bucket is going to be able to sustain",
    "start": "512789",
    "end": "518529"
  },
  {
    "text": "twelve and a half of these events a second right you're gonna get a hundred",
    "start": "518529",
    "end": "523880"
  },
  {
    "text": "transactions per second out of a bucket each one of your events is eight transactions you're gonna get 12 and a",
    "start": "523880",
    "end": "529610"
  },
  {
    "text": "half events per second if you have 10,000 users each user does ten of these",
    "start": "529610",
    "end": "535940"
  },
  {
    "text": "events an hour a bucket without without a good naming scheme isn't gonna hold up",
    "start": "535940",
    "end": "542779"
  },
  {
    "text": "you're not going to get the performance you want you're gonna get 503 rate limit exceeded errors you need 224",
    "start": "542779",
    "end": "548870"
  },
  {
    "text": "transactions per second so this application will need to pay attention to its bucket naming scheme here's the",
    "start": "548870",
    "end": "556850"
  },
  {
    "text": "anti-pattern here's what not to do we store things at s3 Alexa graphically",
    "start": "556850",
    "end": "564639"
  },
  {
    "text": "great word for alphabetical order and that good if you store everything with",
    "start": "564639",
    "end": "570920"
  },
  {
    "text": "the prefix of your key name is the same there's no arbitrary values there",
    "start": "570920",
    "end": "575990"
  },
  {
    "text": "there's no randomness there we can't spread your data set across lots and",
    "start": "575990",
    "end": "581269"
  },
  {
    "text": "lots of resources we can't intelligently distribute the load which means you're",
    "start": "581269",
    "end": "587540"
  },
  {
    "text": "stuck on a limited amount of equipment which means you're gonna have a maximum performance of about 100 transactions",
    "start": "587540",
    "end": "593870"
  },
  {
    "text": "per second and your your performance is going to be inconsistent one day it's",
    "start": "593870",
    "end": "599089"
  },
  {
    "text": "gonna be fine the next day it's gonna be a little bit slower the next day it's gonna be fine again it's gonna be inconsistent so we're storing things",
    "start": "599089",
    "end": "606380"
  },
  {
    "text": "here really easy example year-month-day minute our second milliseconds what's",
    "start": "606380",
    "end": "612529"
  },
  {
    "text": "the easiest way for me to improve the performance of this bucket immediately just switch it I just switch it if I put",
    "start": "612529",
    "end": "621110"
  },
  {
    "text": "milliseconds and seconds first in the prefix of my name I have arbitrary",
    "start": "621110",
    "end": "626779"
  },
  {
    "text": "values there now our service to spread your workload across lots and lots of",
    "start": "626779",
    "end": "632000"
  },
  {
    "text": "equipment that's all it takes I had a customer that came to me and said Craig my bucket is really really",
    "start": "632000",
    "end": "637940"
  },
  {
    "text": "slow and it's inconsistent and it's not it's not scaling the way I expect s3 to",
    "start": "637940",
    "end": "643670"
  },
  {
    "text": "scale and I said well let's look at your naming scheme and we look at it and all the objects are prepended with twelve",
    "start": "643670",
    "end": "650060"
  },
  {
    "text": "zeros and I say why in god's name where all the objects prepended with 12 zeros and",
    "start": "650060",
    "end": "655739"
  },
  {
    "text": "they said well we wanted all of our object names to be the same so when we were storing them in a database we know",
    "start": "655739",
    "end": "660809"
  },
  {
    "text": "how much space they were gonna take so we're patting them and I said no you're doing it wrong we swapped everything",
    "start": "660809",
    "end": "667889"
  },
  {
    "text": "around so they still had their twelve zeros they just put them at the end of the string and not the beginning of the string and a month later they were happy",
    "start": "667889",
    "end": "674639"
  },
  {
    "text": "as could be so it's an easy change for most people to make other ways to do that one of my",
    "start": "674639",
    "end": "680099"
  },
  {
    "text": "favorites is you can store objects as a hash of their name so my deadmau5 mix",
    "start": "680099",
    "end": "685529"
  },
  {
    "text": "mp3 file if I stored a whole bunch of these as deadmau5 or deadmau5 makes it",
    "start": "685529",
    "end": "691739"
  },
  {
    "text": "wouldn't work if I calculate the sha-1 of that file or the sha-1 of just the",
    "start": "691739",
    "end": "697769"
  },
  {
    "text": "name before I put it and then I put it with that as its name and I put the",
    "start": "697769",
    "end": "704669"
  },
  {
    "text": "original name in the metadata the performance of that bucket is going to be dramatically increased this can also",
    "start": "704669",
    "end": "711329"
  },
  {
    "text": "be a way to implement deduplication right so if you know that you're only",
    "start": "711329",
    "end": "717209"
  },
  {
    "text": "going to have original object names and you want to deduplicate based on object name by creating a hash of the object",
    "start": "717209",
    "end": "722759"
  },
  {
    "text": "name you'll be able to deduplicate fairly easily you can prepend your kenan",
    "start": "722759",
    "end": "727979"
  },
  {
    "text": "you can leave your key name deadmau5 mix and you can prepend it with a short hash so maybe do an md5 hash of the name take",
    "start": "727979",
    "end": "734999"
  },
  {
    "text": "the first four or five characters that's gonna add some arbitrariness to the beginning of your key space okay you can",
    "start": "734999",
    "end": "743279"
  },
  {
    "text": "take epoch time reverse it because I need milliseconds first and prepend your object with that so the goal here is to",
    "start": "743279",
    "end": "752189"
  },
  {
    "text": "have your key begin with some arbitrary or random values so I can use that",
    "start": "752189",
    "end": "759119"
  },
  {
    "text": "random value to distribute the workload",
    "start": "759119",
    "end": "763219"
  },
  {
    "text": "that's very important you all need to do it unless okay it's an anti-pattern when",
    "start": "765079",
    "end": "772199"
  },
  {
    "text": "we start talking about lifecycle policies if you want to tear things out to glacier or you want to automatically",
    "start": "772199",
    "end": "777989"
  },
  {
    "text": "delete things the way that you can filter that is by the prefix of your key",
    "start": "777989",
    "end": "783239"
  },
  {
    "text": "so this isn't going to work really well if you want to do list with prefix filters if you want to read",
    "start": "783239",
    "end": "789910"
  },
  {
    "text": "if you absolutely need to know without running a list or without doing any calculations what an object is",
    "start": "789910",
    "end": "795250"
  },
  {
    "text": "called an s3 you have a local index that you can't change or modify all of these",
    "start": "795250",
    "end": "800529"
  },
  {
    "text": "things mean that you have a hard time changing the name okay here's a way here's an example of how to how to",
    "start": "800529",
    "end": "806740"
  },
  {
    "text": "manage thumbnails right you can store Craig JPEG as because that's the",
    "start": "806740",
    "end": "812230"
  },
  {
    "text": "original I'm gonna prepend it with original and then a hash and then if I create a thumb nail image I prefix it",
    "start": "812230",
    "end": "819970"
  },
  {
    "text": "with the word thumb and the same hash so I can now associate my original image with my thumbnails fairly easily but I",
    "start": "819970",
    "end": "827230"
  },
  {
    "text": "still have some arbitrary Nate characters in the in the name okay so",
    "start": "827230",
    "end": "832510"
  },
  {
    "text": "how do we solve for that if I want to do lifecycle policies right I add some",
    "start": "832510",
    "end": "837820"
  },
  {
    "text": "additional prefixes to help sort the names we add images we add movies we add",
    "start": "837820",
    "end": "845410"
  },
  {
    "text": "thumbnails small medium and large so if you need to do lists if you need to have the ability to list all of your",
    "start": "845410",
    "end": "851470"
  },
  {
    "text": "small thumbnails or the ability to list all of your movies you can prefix like",
    "start": "851470",
    "end": "857380"
  },
  {
    "text": "this okay so this is incredibly",
    "start": "857380",
    "end": "863800"
  },
  {
    "text": "important we've talked about this okay once you go if I've said spired you and you're gonna go make these changes today",
    "start": "863800",
    "end": "870930"
  },
  {
    "text": "to your naming scheme it's gonna take a little while to propagate alright if you",
    "start": "870930",
    "end": "876400"
  },
  {
    "text": "need it to propagate immediately you can open up a support case and you can say I've changed the naming scheme for my",
    "start": "876400",
    "end": "881950"
  },
  {
    "text": "key space can you have that impact by sealing my performance sealing",
    "start": "881950",
    "end": "887680"
  },
  {
    "text": "immediately and support will help you with that okay let's talk briefly about",
    "start": "887680",
    "end": "894130"
  },
  {
    "text": "cloud front cloud fronts a fairly compelling content distribution network",
    "start": "894130",
    "end": "900130"
  },
  {
    "text": "so we're gonna run a quick demo",
    "start": "900130",
    "end": "903779"
  },
  {
    "text": "I hope we're gonna run a quick demo",
    "start": "906940",
    "end": "910230"
  },
  {
    "text": "I hate live demos with a passion let's try this again",
    "start": "917350",
    "end": "922290"
  },
  {
    "text": "there we go all right so let's run a quick cloud formation demo sorry cloud front demo and I'm going to",
    "start": "926840",
    "end": "932840"
  },
  {
    "text": "talk about what cloud front is cloud front is a content distribution network it has 46 physical locations around the",
    "start": "932840",
    "end": "940400"
  },
  {
    "text": "world with some equipment in them and you can use these locations to cash your",
    "start": "940400",
    "end": "945620"
  },
  {
    "text": "s3 bucket so if you have users spread all around the world who are coming back to an s3 bucket to get and to put data",
    "start": "945620",
    "end": "952930"
  },
  {
    "text": "they're having to traverse a very long network to get there and that's very late and they're having a poor customer",
    "start": "952930",
    "end": "959990"
  },
  {
    "text": "experience if we put cloud front in front of the s3 bucket all of a sudden",
    "start": "959990",
    "end": "965540"
  },
  {
    "text": "their experience improves dramatically so what we're doing here is we are",
    "start": "965540",
    "end": "971150"
  },
  {
    "text": "getting from a Sydney s3 bucket a whole bunch of files we're getting a bunch of",
    "start": "971150",
    "end": "977330"
  },
  {
    "text": "time so the so the demo is statistically relevant again everybody's going to get access to the code that runs this and so",
    "start": "977330",
    "end": "984350"
  },
  {
    "text": "you'll be able to do this yourself now we're getting the exact same data from cloud front exact same data from a",
    "start": "984350",
    "end": "991970"
  },
  {
    "text": "cached pump so on average it took us three seconds to get these files from s3 it",
    "start": "991970",
    "end": "999530"
  },
  {
    "text": "took us point one second to get the exact same content from cloud front one",
    "start": "999530",
    "end": "1007000"
  },
  {
    "text": "of the really exciting things about cloud front is it dramatically lowers the number of gets from s3 because",
    "start": "1007000",
    "end": "1016540"
  },
  {
    "text": "people are getting things from cloud front what that means is that in many use cases putting cloud front in front",
    "start": "1016540",
    "end": "1023530"
  },
  {
    "text": "of your s3 bucket lowers your total cost I can take your downloads from three",
    "start": "1023530",
    "end": "1030459"
  },
  {
    "text": "seconds to 0.1 seconds and I can lower your cost to the solution at the same",
    "start": "1030459",
    "end": "1035920"
  },
  {
    "text": "time so if you're doing gets you need to look at cloud front very very strongly",
    "start": "1035920",
    "end": "1042040"
  },
  {
    "text": "if you have a method or a function that does gets in your application all you",
    "start": "1042040",
    "end": "1047350"
  },
  {
    "text": "need to do is change the DNS name for that get for that function to your cloud",
    "start": "1047350",
    "end": "1052510"
  },
  {
    "text": "front DNS name and I'm going to show you how to set up a cloud front distribution because it's pretty easy your low",
    "start": "1052510",
    "end": "1058270"
  },
  {
    "text": "latency because your customers are right next to your pops because there's pups everywhere there's 46 pups we've added",
    "start": "1058270",
    "end": "1065200"
  },
  {
    "text": "some new ones in India and Asia pack very recently there's a very high",
    "start": "1065200",
    "end": "1070810"
  },
  {
    "text": "transfer rate so we have 46 pops sorry we have 46 pops spurt all over the globe",
    "start": "1070810",
    "end": "1076120"
  },
  {
    "text": "and every one of those pups has a whole bunch of bandwidth and now your application has access to a hundred",
    "start": "1076120",
    "end": "1081640"
  },
  {
    "text": "percent of that bandwidth so you have a high transfer rate we've been talking",
    "start": "1081640",
    "end": "1087250"
  },
  {
    "text": "today about web distribution that's static content distributed via cloud front they can also do streaming video",
    "start": "1087250",
    "end": "1094270"
  },
  {
    "text": "which a lot of customers use so I want to show you real quickly how to set up a",
    "start": "1094270",
    "end": "1100000"
  },
  {
    "text": "cloud front distribution because it is it is beyond easy and I want everybody",
    "start": "1100000",
    "end": "1106090"
  },
  {
    "text": "to go do it so you come here you find cloud front you create a distribution",
    "start": "1106090",
    "end": "1118380"
  },
  {
    "text": "we're gonna do a web distribution because we're distributing static content we're going to continue your",
    "start": "1118380",
    "end": "1123430"
  },
  {
    "text": "origin domain name now of course cloud front can distribute content from any",
    "start": "1123430",
    "end": "1128620"
  },
  {
    "text": "website hosted anywhere it doesn't have to be an s3 bucket but s3 buckets kind of the way we do it normally so we drop",
    "start": "1128620",
    "end": "1135670"
  },
  {
    "text": "down that's the original name that's the source name you can pick all kinds of options HTTP or HTTPS you can do a",
    "start": "1135670",
    "end": "1141700"
  },
  {
    "text": "custom certificate you can set TTLs do some stuff with cookies we're gonna",
    "start": "1141700",
    "end": "1147340"
  },
  {
    "text": "skip all of this and we're gonna hit create there it is",
    "start": "1147340",
    "end": "1156360"
  },
  {
    "text": "done and done so that's my new DNS name",
    "start": "1156360",
    "end": "1161580"
  },
  {
    "text": "it'll take about 10 minutes for that to propagate through route 53 and be available globally and you can start",
    "start": "1163320",
    "end": "1169600"
  },
  {
    "text": "doing gets from your s3 bucket at that DNS name the first time you get an object it's gonna take about the same",
    "start": "1169600",
    "end": "1175270"
  },
  {
    "text": "amount of time it would have taken with s3 after that it's gonna be tremendously faster that's how long it takes what did",
    "start": "1175270",
    "end": "1182260"
  },
  {
    "text": "that take 30 seconds something about that all right so that's cloud front",
    "start": "1182260",
    "end": "1187420"
  },
  {
    "text": "let's talk now about a big black screen",
    "start": "1187420",
    "end": "1196960"
  },
  {
    "text": "there we go",
    "start": "1209750",
    "end": "1213020"
  },
  {
    "text": "that's better so let's talk now about",
    "start": "1222230",
    "end": "1227820"
  },
  {
    "text": "multi-part uploads all right multi-part uploads are a much more efficient much",
    "start": "1227820",
    "end": "1234360"
  },
  {
    "text": "more effective way to put data into your buckets they allow faster more flexible",
    "start": "1234360",
    "end": "1239940"
  },
  {
    "text": "uploads so you have a one megabyte object you want to put to s3 you can",
    "start": "1239940",
    "end": "1245370"
  },
  {
    "text": "open up a stream and you can put that object sequentially just like we talked",
    "start": "1245370",
    "end": "1251550"
  },
  {
    "text": "about getting an object sequentially earlier you can that'll work and if you",
    "start": "1251550",
    "end": "1259050"
  },
  {
    "text": "have a wired connection and you're on the desktop chances are you're not gonna get any resets chances are you're not going to run into any issues but if",
    "start": "1259050",
    "end": "1265290"
  },
  {
    "text": "you're on a mobile device if you're on an even slightly flaky Network your chances of getting a network reset",
    "start": "1265290",
    "end": "1270720"
  },
  {
    "text": "during that hundred megabyte put fairly high so what we do is we chunk those",
    "start": "1270720",
    "end": "1277950"
  },
  {
    "text": "that that object into multiple parts and we put each part up as a completely independent transaction so we take that",
    "start": "1277950",
    "end": "1284700"
  },
  {
    "text": "hundred megabyte object and we put it up in 425 megabyte chunks so now one the",
    "start": "1284700",
    "end": "1291420"
  },
  {
    "text": "first one uploads without a problem the second one uploads without a problem the third one gets a connection reset I only",
    "start": "1291420",
    "end": "1296940"
  },
  {
    "text": "have to upload that 25 megabytes section again so it's much faster much more reliable I can also put these in",
    "start": "1296940",
    "end": "1303890"
  },
  {
    "text": "parallel so if I have 4 cores on my machine the transfer manager in our SDK",
    "start": "1303890",
    "end": "1309630"
  },
  {
    "text": "is automatically going to upload each one of those 25 megabits sections in parallel so a multi-part upload is very",
    "start": "1309630",
    "end": "1316500"
  },
  {
    "text": "powerful let's do a quick demo",
    "start": "1316500",
    "end": "1323990"
  },
  {
    "text": "this is the same demo we ran before you want to point it out one more time we're",
    "start": "1342690",
    "end": "1348570"
  },
  {
    "text": "uploading a file one bit at a time it's gonna take a very long time stand here",
    "start": "1348570",
    "end": "1355230"
  },
  {
    "text": "and introduce a little bit of pain here",
    "start": "1355230",
    "end": "1360270"
  },
  {
    "text": "does multi-part upload already who here does single part upload or isn't sure",
    "start": "1360270",
    "end": "1367640"
  },
  {
    "text": "how many people are gonna switch to multi-part upload there we go give yourself a hand some live demos they're",
    "start": "1367640",
    "end": "1385800"
  },
  {
    "text": "very dangerous",
    "start": "1385800",
    "end": "1388130"
  },
  {
    "text": "all right so if you're going to start doing multi-part uploads the important part is choosing the right part size so",
    "start": "1398389",
    "end": "1406019"
  },
  {
    "text": "that's very important if you pick too many parts you're going to spend more",
    "start": "1406019",
    "end": "1411720"
  },
  {
    "text": "time putting and start setting up and tearing down network connections then",
    "start": "1411720",
    "end": "1416940"
  },
  {
    "text": "you're gonna spend sending data so you don't want to pick a very small part size if you pick a really big part size",
    "start": "1416940",
    "end": "1426080"
  },
  {
    "text": "it's not gonna get you the advantages you need so this is usually something you want to test in your own application",
    "start": "1426080",
    "end": "1431460"
  },
  {
    "text": "quick sort of baseline is as many parts of you have cores on the device that",
    "start": "1431460",
    "end": "1438059"
  },
  {
    "text": "works really well for desktop and server clients it doesn't work so much for mobile on mobile clients you have to",
    "start": "1438059",
    "end": "1443279"
  },
  {
    "text": "decide if you want to saturate your network connection because the more parts the more likely you are to saturate your network connection on high",
    "start": "1443279",
    "end": "1449370"
  },
  {
    "text": "bandwidth networks we say 25 to 50 megabyte chunks and on mobile networks we say 10 megabyte chunks that's our",
    "start": "1449370",
    "end": "1456360"
  },
  {
    "text": "general guidance and that's a good place to start - you can paralyze your gets as",
    "start": "1456360",
    "end": "1462480"
  },
  {
    "text": "well and this is something that people miss a lot so the same is we can upload",
    "start": "1462480",
    "end": "1468120"
  },
  {
    "text": "chunks of a file you can get chunks of a file you can say give me chunks 0 or",
    "start": "1468120",
    "end": "1474450"
  },
  {
    "text": "give me part 0 through 1024 1025 to 2048",
    "start": "1474450",
    "end": "1479809"
  },
  {
    "text": "ok this is compensates for unreliable networks as the same as the same as",
    "start": "1479809",
    "end": "1486240"
  },
  {
    "text": "pudding does it benefits if you think is really good advantage of all of your cores and all of your processors and all",
    "start": "1486240",
    "end": "1492870"
  },
  {
    "text": "of your bandwidth it's a really good way to saturate your network bandwidth a trick that we haven't talked about a lot",
    "start": "1492870",
    "end": "1498629"
  },
  {
    "text": "is if you're doing multi-part uploads and you're putting them in sizes of say",
    "start": "1498629",
    "end": "1505559"
  },
  {
    "text": "10 megabytes get in 10 megabyte chunks as well if your gets are aligned with",
    "start": "1505559",
    "end": "1514110"
  },
  {
    "text": "your puts your gets will be tremendously fast so pick a standard size that you're",
    "start": "1514110",
    "end": "1520259"
  },
  {
    "text": "going to put objects with using the multi-part API and with all of our API you can specify I want this object size",
    "start": "1520259",
    "end": "1526289"
  },
  {
    "text": "don't or this individual chunk size don't calculate it for me you're gonna fix it if you then get using the same chunk",
    "start": "1526289",
    "end": "1533400"
  },
  {
    "text": "size incredibly fast gets incredibly incredibly fast gets okay so let's look",
    "start": "1533400",
    "end": "1540210"
  },
  {
    "text": "at a demo of parallel range gets so",
    "start": "1540210",
    "end": "1551070"
  },
  {
    "text": "we're gonna you didn't see that the boss",
    "start": "1551070",
    "end": "1558450"
  },
  {
    "text": "man had his head down he doesn't know what people are laughing at he's very nervous alright so we're gonna start getting an object with a single request",
    "start": "1558450",
    "end": "1564450"
  },
  {
    "text": "that's doing a get on a JPEG file we're just bringing it down locally it took us seven and a half seconds to get that",
    "start": "1564450",
    "end": "1571830"
  },
  {
    "text": "file seven point four seconds to get that file we do it in parallel it's a",
    "start": "1571830",
    "end": "1579059"
  },
  {
    "text": "hundred megabyte file we chunked it up into 425 megabyte pieces we got them in parallel and as expected we got them in",
    "start": "1579059",
    "end": "1585780"
  },
  {
    "text": "2.5 seconds it's easy it's easy all I said was give me the first 25 percent of",
    "start": "1585780",
    "end": "1592289"
  },
  {
    "text": "the file I made an API request to s3 give me the first 25 percent then I say give me the section 25 percent the third",
    "start": "1592289",
    "end": "1597900"
  },
  {
    "text": "and the fourth I got them all at the same time and then I had to put the parts back together again Java Python",
    "start": "1597900",
    "end": "1604890"
  },
  {
    "text": "and Ruby SDKs have a function to put the parts back together again but if you want to do it in bash it's",
    "start": "1604890",
    "end": "1610380"
  },
  {
    "text": "just cat just cat the pieces back together there's nothing complicated here this isn't rocket science it's not",
    "start": "1610380",
    "end": "1615450"
  },
  {
    "text": "fancy it's just very very fast thank God",
    "start": "1615450",
    "end": "1621330"
  },
  {
    "text": "Almighty that's the last demo alright so",
    "start": "1621330",
    "end": "1628440"
  },
  {
    "text": "let's talk about SSL if you've done what",
    "start": "1628440",
    "end": "1633450"
  },
  {
    "text": "I've said and you've said I'm going to do multi-part puts and multi-part gets",
    "start": "1633450",
    "end": "1639360"
  },
  {
    "text": "and you're using SSL which I hope you all are who does everything on s3 via SSL who does it be a non SSL ok all",
    "start": "1639360",
    "end": "1651299"
  },
  {
    "text": "right mostly SSL that's good if you're following my advice and you're doing lots of threads and lots of parallelism",
    "start": "1651299",
    "end": "1656730"
  },
  {
    "text": "you're gonna become CPU backed that's a great thing to be pushing your",
    "start": "1656730",
    "end": "1662789"
  },
  {
    "text": "bottleneck from your network from s3 to your CPUs is a great thing that's a good problem to have how do you",
    "start": "1662789",
    "end": "1669500"
  },
  {
    "text": "solve that problem you enable AES and I support in our SDKs we have",
    "start": "1669500",
    "end": "1675290"
  },
  {
    "text": "documentation online on how to do that right there's a link in the presentation you guys are going to get a copy of it",
    "start": "1675290",
    "end": "1680810"
  },
  {
    "text": "on Wednesday that shows you how to patch the drama SDK to enable AES ni many of",
    "start": "1680810",
    "end": "1687290"
  },
  {
    "text": "the instance types in the ec2 fleet have access to AES ni most new processors out",
    "start": "1687290",
    "end": "1693260"
  },
  {
    "text": "in the market and lots of mobile devices have access to si es ni that's pushing the ssl work down into a processor down",
    "start": "1693260",
    "end": "1701300"
  },
  {
    "text": "into a special part of your processor so you'll want to look at doing that when you follow my sage advice and all",
    "start": "1701300",
    "end": "1707900"
  },
  {
    "text": "of a sudden your CPU bound because you're using SSL lists lists and s",
    "start": "1707900",
    "end": "1715040"
  },
  {
    "text": "through your heart who has buckets of over 10 million objects who here tries to do lists on those who here is",
    "start": "1715040",
    "end": "1722390"
  },
  {
    "text": "tremendously successful with lists on those hey we got a winner lists are",
    "start": "1722390",
    "end": "1727700"
  },
  {
    "text": "really hard so if you do a list on a large bucket we return a thousand results back to you and then a token you",
    "start": "1727700",
    "end": "1735020"
  },
  {
    "text": "pass us the token we give you the next thousand and we do it again and again and again and again and again until you",
    "start": "1735020",
    "end": "1740060"
  },
  {
    "text": "get ten million results so lists are hard but there are still some cases",
    "start": "1740060",
    "end": "1745730"
  },
  {
    "text": "where you need lists you have to do lists we think you should avoid them as part of the regular process of managing",
    "start": "1745730",
    "end": "1751340"
  },
  {
    "text": "your bucket it can be sort of an audit thing you do once or twice a day but it's not something you want to do all the time but let's say that you need to",
    "start": "1751340",
    "end": "1758300"
  },
  {
    "text": "get a list of every list that your prepending your objects with the name of the customer that put them and you need",
    "start": "1758300",
    "end": "1765110"
  },
  {
    "text": "to get a list of all of those of all those objects you want to get a list of all of your videos or all of your 720p",
    "start": "1765110",
    "end": "1773240"
  },
  {
    "text": "encoded videos you want to get logs from a certain day you want to view an inventory there are reasons that you",
    "start": "1773240",
    "end": "1779300"
  },
  {
    "text": "need lists so how do we make lists faster you want to paralyze a list and",
    "start": "1779300",
    "end": "1787790"
  },
  {
    "text": "we have some code samples that help you do this but it's fairly easy if you know",
    "start": "1787790",
    "end": "1793580"
  },
  {
    "text": "that your data if every key starts with a through Z and zero through",
    "start": "1793580",
    "end": "1798669"
  },
  {
    "text": "nine you get a list for everything that starts with an A and at the same time",
    "start": "1798669",
    "end": "1804280"
  },
  {
    "text": "everything that starts with a B and at the same time everything that starts with a c really easy to implement that",
    "start": "1804280",
    "end": "1809350"
  },
  {
    "text": "sort of multi-threading in Python Ruby Java anywhere you want so now you've got",
    "start": "1809350",
    "end": "1815640"
  },
  {
    "text": "36 lists happening simultaneously and now your list is all of a sudden 36",
    "start": "1815640",
    "end": "1822039"
  },
  {
    "text": "times faster than it was before you've implemented some client-side logic and",
    "start": "1822039",
    "end": "1827350"
  },
  {
    "text": "you've made your list massively massively faster okay and we'll throw",
    "start": "1827350",
    "end": "1832360"
  },
  {
    "text": "some sample code in the deck to show you how to do that build a secondary index",
    "start": "1832360",
    "end": "1837520"
  },
  {
    "text": "so whenever you put an object to s3 make it insert to dynamodb whenever you",
    "start": "1837520",
    "end": "1844000"
  },
  {
    "text": "delete an object from s3 pull a delete from DynamoDB we just released a new",
    "start": "1844000",
    "end": "1851080"
  },
  {
    "text": "JavaScript API and a set of cores support for DynamoDB so in your web",
    "start": "1851080",
    "end": "1857350"
  },
  {
    "text": "application a user can put something to s3 and a user can do an insert to dynamodb and you don't need any server",
    "start": "1857350",
    "end": "1864700"
  },
  {
    "text": "infrastructure to make that work we released that a couple of weeks ago anybody using that new JavaScript library yet we've got a couple that's",
    "start": "1864700",
    "end": "1871750"
  },
  {
    "text": "good stuff and that makes it much easier and much more effective to build and",
    "start": "1871750",
    "end": "1877419"
  },
  {
    "text": "maintain lists in DynamoDB so like I said you're maintaining a parallel list",
    "start": "1877419",
    "end": "1884710"
  },
  {
    "text": "in dynamo DB with dynamo DB you've got lots of different indexes we now have global secondary indexes local secondary",
    "start": "1884710",
    "end": "1892090"
  },
  {
    "text": "indexes the number of table scans is way way down so if you do this in dynamo DB and you say give me a list of all of my",
    "start": "1892090",
    "end": "1898960"
  },
  {
    "text": "objects which belonged to user Jessica and are encoded in 720p that's really",
    "start": "1898960",
    "end": "1905950"
  },
  {
    "text": "really hard in s3 it's really really easy in dynamo dB so you do that in dynamo it returns a list of objects and",
    "start": "1905950",
    "end": "1912580"
  },
  {
    "text": "then you can get those objects so it's using dynamo DB and s3 together so we",
    "start": "1912580",
    "end": "1921340"
  },
  {
    "text": "talked about a lot I'm gonna leave plenty of time for QA and I'm gonna try and get you out of here a little bit early who's getting on a plane right",
    "start": "1921340",
    "end": "1927130"
  },
  {
    "text": "after this yeah all right so let's get you out of here pretty early we talked about picking a",
    "start": "1927130",
    "end": "1932350"
  },
  {
    "text": "region the most important thing which is the naming scheme I cannot stress enough",
    "start": "1932350",
    "end": "1938230"
  },
  {
    "text": "how important the naming scheme is all right don't use lists if at all possible is a",
    "start": "1938230",
    "end": "1945159"
  },
  {
    "text": "regular part of your application if you need to let's push them to DynamoDB anybody here who isn't doing parallel",
    "start": "1945159",
    "end": "1952419"
  },
  {
    "text": "puts and parallel gets you're gonna get a bunch of code that explains how to do",
    "start": "1952419",
    "end": "1957940"
  },
  {
    "text": "it and makes it incredibly easy to do take advantage of it all right the multi-part put is built into every",
    "start": "1957940",
    "end": "1964600"
  },
  {
    "text": "one of our SDKs and byte-range get is so easy it doesn't need to be built into",
    "start": "1964600",
    "end": "1969789"
  },
  {
    "text": "the SDKs it's very very easy to do alright so questions please",
    "start": "1969789",
    "end": "1977009"
  }
]