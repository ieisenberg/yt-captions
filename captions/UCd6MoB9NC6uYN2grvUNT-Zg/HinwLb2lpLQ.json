[
  {
    "text": "good afternoon London I hope you're having a great Summit my name is Marano auli I'm originally from Argentina uh",
    "start": "4520",
    "end": "12360"
  },
  {
    "text": "but really who needs sunny weather delicious steak and amazing wine all year around right so I moved to London",
    "start": "12360",
    "end": "18320"
  },
  {
    "text": "and I became a tam for AWS as a technical account manager I focus on",
    "start": "18320",
    "end": "24680"
  },
  {
    "text": "continued operational architecture and cost efficiency for workloads that Enterprise support customers move to",
    "start": "24680",
    "end": "33160"
  },
  {
    "text": "AWS time and time again customers have told us about three fundamental pillars on which they build both Enterprise and",
    "start": "33160",
    "end": "40480"
  },
  {
    "text": "Next Generation applications and those are security scalability and",
    "start": "40480",
    "end": "46520"
  },
  {
    "text": "availability as with any other product uh that Amazon develops elastic load",
    "start": "46520",
    "end": "51719"
  },
  {
    "text": "balancing is developed backwards from our customers requirements and it all starts with",
    "start": "51719",
    "end": "57320"
  },
  {
    "text": "security imagine that you have a could be a web server it could be an API",
    "start": "57320",
    "end": "63160"
  },
  {
    "text": "whatever you want um typically what you'll do is you'll have an elastic load balancer sitting in front of it and",
    "start": "63160",
    "end": "68960"
  },
  {
    "text": "you'll terminate your SSL in TLS traffic there now everything that we'll cover in",
    "start": "68960",
    "end": "74400"
  },
  {
    "text": "this section is security uh independent of the actual load balancing",
    "start": "74400",
    "end": "79799"
  },
  {
    "text": "capabilities of elb the first thing that we do on an elb",
    "start": "79799",
    "end": "85240"
  },
  {
    "text": "is terminate our secure connections if you create an elastic load balancer you you can choose to terminate your SSL and",
    "start": "85240",
    "end": "92119"
  },
  {
    "text": "TLS traffic there um you just need to upload a certificate and a key and you",
    "start": "92119",
    "end": "98119"
  },
  {
    "text": "can do this yourself or you can ask us to do this for you through AWS certificate manager so how do you ensure",
    "start": "98119",
    "end": "105960"
  },
  {
    "text": "that the SSL and TLS implementation is kept up to date well that's easy we",
    "start": "105960",
    "end": "111360"
  },
  {
    "text": "manage that for you so over the last few years we've seen a number of vulnerabilities come",
    "start": "111360",
    "end": "118079"
  },
  {
    "text": "out uh we've seen pudle the SSL V3 fallback issue uh we've seen Log Jam",
    "start": "118079",
    "end": "124560"
  },
  {
    "text": "which is an attack on Dy Helman exchanges and we've seen heart bed and I",
    "start": "124560",
    "end": "129800"
  },
  {
    "text": "have a special place in my heart for heart bed I've seen developers and sis ads run around for days trying to patch",
    "start": "129800",
    "end": "136680"
  },
  {
    "text": "everything under the Sun so how fast did we resolve this issues for elb customers",
    "start": "136680",
    "end": "142920"
  },
  {
    "text": "same day the only thing that you need to do when a new security issue comes out is log on to the console and update your",
    "start": "142920",
    "end": "149920"
  },
  {
    "text": "security policies but it's not just reactive we also do a bit of proactive work we removed rc4 in advance of it",
    "start": "149920",
    "end": "157480"
  },
  {
    "text": "becoming um an unreliable protocol how do we do this well we like to dive deep",
    "start": "157480",
    "end": "163840"
  },
  {
    "text": "when it comes to SSL and TLS and we came to a Crossroads um where we needed and",
    "start": "163840",
    "end": "169640"
  },
  {
    "text": "we decided to have our own implementation of them um we decided not to trade off security and performance so",
    "start": "169640",
    "end": "177159"
  },
  {
    "text": "we developed s2n it's open source you can go browse the code and GitHub",
    "start": "177159",
    "end": "182640"
  },
  {
    "text": "please wait until we finish here um and it is subject to intense review and",
    "start": "182640",
    "end": "188640"
  },
  {
    "text": "audits we don't want to stop at our internal development teams and that was",
    "start": "188640",
    "end": "193920"
  },
  {
    "text": "that is why we're full active members of the SSL TLS community and we make sure",
    "start": "193920",
    "end": "199040"
  },
  {
    "text": "that we're at the Forefront of collaboration when any whenever any security issues come",
    "start": "199040",
    "end": "205519"
  },
  {
    "text": "out we have AWS certificate manager as well to make things even easier so",
    "start": "205560",
    "end": "212239"
  },
  {
    "text": "managing your own certificates and your own keys can be a bit of a chore you've got to generate it you've got to copy them you've got to email them to someone",
    "start": "212239",
    "end": "218400"
  },
  {
    "text": "you've got to get you know open a ticket to someone to upload them to your actual elbs with AWS certificate manager you",
    "start": "218400",
    "end": "224680"
  },
  {
    "text": "can log on to the console and just create the certificates you can then associate them to an elb it takes about",
    "start": "224680",
    "end": "231879"
  },
  {
    "text": "five minutes and it's free you don't want to leave your terminal there is an API fill out",
    "start": "231879",
    "end": "238720"
  },
  {
    "text": "too we try to make we Tred to make everything as",
    "start": "238720",
    "end": "246000"
  },
  {
    "text": "possible thank you we try we try to make everything as simple as possible and how do we manage",
    "start": "247799",
    "end": "255200"
  },
  {
    "text": "this behind the scenes so how do we make it so easy to update the security policies well you can just log on to the",
    "start": "255200",
    "end": "261840"
  },
  {
    "text": "console and with a few clicks you're on your way with the default settings but we do a couple of things in the",
    "start": "261840",
    "end": "268199"
  },
  {
    "text": "background so we have lists of preference for Cipher Suites and some of",
    "start": "268199",
    "end": "273600"
  },
  {
    "text": "those are perfect forward secrecy so we subject all of the traffic that comes through the elb to an extra step and",
    "start": "273600",
    "end": "280720"
  },
  {
    "text": "that's a Dy Helman algorithm to make sure that we protect um past information",
    "start": "280720",
    "end": "285759"
  },
  {
    "text": "for future compromises in other words if an attacker gains access to one of your secret keys today they will not be able",
    "start": "285759",
    "end": "292560"
  },
  {
    "text": "to decrypt any of the traffic that they recorded yesterday that's a pretty cool feature um we also do a little bit of",
    "start": "292560",
    "end": "298759"
  },
  {
    "text": "work on the standards we prefer AES over 3des and rc4 which guys you shouldn't",
    "start": "298759",
    "end": "304560"
  },
  {
    "text": "have enabled please disable it if you do and we do a little bit of work with onet authentication algorithms as well to",
    "start": "304560",
    "end": "311280"
  },
  {
    "text": "help make traffic a little bit more temper proof so we prefer GSM as so GCM",
    "start": "311280",
    "end": "316720"
  },
  {
    "text": "over CBC and hmat and we don't just spot these policies out it's not just like we build a list and push it out to you guys",
    "start": "316720",
    "end": "324120"
  },
  {
    "text": "we actually test all of these criteria on billions of real world connections with real world clients",
    "start": "324120",
    "end": "330160"
  },
  {
    "text": "we want to make sure that you're secure and available but of course there's always",
    "start": "330160",
    "end": "335360"
  },
  {
    "text": "the art Legacy client out there uh there's the old Legacy system or embedded device that is using a cipher",
    "start": "335360",
    "end": "341160"
  },
  {
    "text": "Suite that has been deemed to be insecure um so how do we manage this how can we help customers migrate away from",
    "start": "341160",
    "end": "348000"
  },
  {
    "text": "those insecure Cipher Suites well access logs now you might not think about them",
    "start": "348000",
    "end": "353280"
  },
  {
    "text": "as a security feature at first but access log contain a world of information that you can parse at the",
    "start": "353280",
    "end": "359680"
  },
  {
    "text": "that you can leverage to make your infrastructure more secure even reacting to events in an automated fashion so you",
    "start": "359680",
    "end": "367319"
  },
  {
    "text": "can pipe all of your elb logs to an S3 bucket and with the correct cross",
    "start": "367319",
    "end": "373039"
  },
  {
    "text": "policies and permissions you can ensure that if anyone were to actually gain access to your environment they wouldn't",
    "start": "373039",
    "end": "380000"
  },
  {
    "text": "be able to remove the most important thing in tracing the attack back to them which is the logs and that doesn't mean",
    "start": "380000",
    "end": "386880"
  },
  {
    "text": "that you have to go out and build your own data Lake and your own parsing tools we've got customers here at the summit",
    "start": "386880",
    "end": "392520"
  },
  {
    "text": "today such as splank somalogic and lley who can provide you with tools from the",
    "start": "392520",
    "end": "397800"
  },
  {
    "text": "marketplace to how to help you do higher level analytics and deep Dives one of the most interesting things",
    "start": "397800",
    "end": "405319"
  },
  {
    "text": "is that we log the actual Cipher Suite that was used to negotiate the request",
    "start": "405319",
    "end": "410440"
  },
  {
    "text": "and this is important so say that you want to upgrade all of your um protocol say that you want to upgrate your",
    "start": "410440",
    "end": "415759"
  },
  {
    "text": "application but you need to find out who's actually using what Cipher it where you don't want to upgrade and",
    "start": "415759",
    "end": "422800"
  },
  {
    "text": "suddenly break something for someone somewhere so you enable logs you enable the access logs for a couple of days you",
    "start": "422800",
    "end": "428919"
  },
  {
    "text": "parse them with your own tools or one of our partner tools and you can figure out who's using whatw and reach out to them",
    "start": "428919",
    "end": "435960"
  },
  {
    "text": "before doing the upgrade using EB as a known defensive layer is one example of",
    "start": "435960",
    "end": "443280"
  },
  {
    "text": "compartmentalization what we've seen in terms of security pattern is that our customers are launching elbs into public",
    "start": "443280",
    "end": "450879"
  },
  {
    "text": "suance using VPC they then apply security groups from",
    "start": "450879",
    "end": "456720"
  },
  {
    "text": "the VPC and IR am roll accounts and permissions to ensure that that becomes",
    "start": "456720",
    "end": "462520"
  },
  {
    "text": "a known layer through which public internet traffic is piped it becomes effectively the only way to open up a",
    "start": "462520",
    "end": "469720"
  },
  {
    "text": "port to the internet customers can then have a degree of confidence that outside",
    "start": "469720",
    "end": "475800"
  },
  {
    "text": "access is protected and correctly filtered and they can become a lot more agile in their private",
    "start": "475800",
    "end": "482520"
  },
  {
    "text": "subnets we also support clout tray loging um it's fully supported within",
    "start": "482520",
    "end": "487639"
  },
  {
    "text": "the elb API and creating and launching elbs into these public subnets is a",
    "start": "487639",
    "end": "494000"
  },
  {
    "text": "known and traced activity so whenever someone does it in your environment you can go back to who did it when and go",
    "start": "494000",
    "end": "501199"
  },
  {
    "text": "ask why in addition to this we have the elb access logs and you can enable VPC",
    "start": "501199",
    "end": "507280"
  },
  {
    "text": "flow logging so these are Network level logs that will give you a vast amount of",
    "start": "507280",
    "end": "513518"
  },
  {
    "text": "information on what TCP connections or what TCP traffic is coming out uh sorry",
    "start": "513519",
    "end": "519680"
  },
  {
    "text": "coming in and going out of your elbs all of these that we've discussed so far",
    "start": "519680",
    "end": "525200"
  },
  {
    "text": "help keep things really tight and really constrained and it all feeds into the",
    "start": "525200",
    "end": "531160"
  },
  {
    "text": "security threat model um helping you protect against common security concerns",
    "start": "531160",
    "end": "536200"
  },
  {
    "text": "all very cool features that help you ensure that your environment is secured and up toate but the real job of the lb",
    "start": "536200",
    "end": "545040"
  },
  {
    "text": "as we all known is of course scaling and this is where it gets really interesting guys this is where we get jiggy with it",
    "start": "545040",
    "end": "551480"
  },
  {
    "text": "elb at its route is scal is a scalability product right so it takes small or huge loads and balances them",
    "start": "551480",
    "end": "558880"
  },
  {
    "text": "across the estate of ec2 instances on the back end so how do we understand how we need",
    "start": "558880",
    "end": "566440"
  },
  {
    "text": "to load balance things well there's a Lo called little law and it's one of the fundamental laws of applying load to",
    "start": "566440",
    "end": "572440"
  },
  {
    "text": "distributed systems and it's really really simple all it says is that your system's ability to process load is",
    "start": "572440",
    "end": "579560"
  },
  {
    "text": "directly proportional to the amount of requests coming in versus the time that it takes to process each one of them so",
    "start": "579560",
    "end": "586440"
  },
  {
    "text": "in short your system is going to become more latent the more load you put in it",
    "start": "586440",
    "end": "592000"
  },
  {
    "text": "and it's going to become faster the quicker that you can process every one of every one of those requests and the",
    "start": "592000",
    "end": "598040"
  },
  {
    "text": "least time that each one of those request sits there waiting now what causes latency when one",
    "start": "598040",
    "end": "606079"
  },
  {
    "text": "of the most common caes of latency um and one that people don't usually consider is garbage collection if you're",
    "start": "606079",
    "end": "612920"
  },
  {
    "text": "using a programming language that implements garbage collection then your system is not going to be serving",
    "start": "612920",
    "end": "619279"
  },
  {
    "text": "requests while the garbage collection is active and the garbage collection collection will kick in once the Heap",
    "start": "619279",
    "end": "625440"
  },
  {
    "text": "size is full how how big your HEAP size is will depend depend on how we've conf",
    "start": "625440",
    "end": "630640"
  },
  {
    "text": "configured your jvm too little Ram too big a heap and your gabage collection will have to kick in very often denying",
    "start": "630640",
    "end": "637320"
  },
  {
    "text": "the ability to process requests and another common reason that we see is caching um a lot of",
    "start": "637320",
    "end": "644240"
  },
  {
    "text": "applications have caching layers um or caching at different layers so if a",
    "start": "644240",
    "end": "649519"
  },
  {
    "text": "request happens to come in um for a bit of data that is sitting hot on the cache",
    "start": "649519",
    "end": "655600"
  },
  {
    "text": "then that's great absolutely amazing we've got the data right there we pull it out return it to the client and",
    "start": "655600",
    "end": "660959"
  },
  {
    "text": "that's it but what happens if your data is cold what happens if we have to go to dis or Worse what happens if we have to",
    "start": "660959",
    "end": "667560"
  },
  {
    "text": "go to a remote database all of that adds to the latency that your system has when",
    "start": "667560",
    "end": "672720"
  },
  {
    "text": "serving requests from the outside world so generally if you have an",
    "start": "672720",
    "end": "678079"
  },
  {
    "text": "instance serving traffic and this is for a single instance your time to serve",
    "start": "678079",
    "end": "683440"
  },
  {
    "text": "each request will look a little bit like a log normal distribution so you'll have",
    "start": "683440",
    "end": "689360"
  },
  {
    "text": "have really good um initial response times but your average will be a little bit slow and your 99th percental will be",
    "start": "689360",
    "end": "697279"
  },
  {
    "text": "really slow taking up to a second or more to return the request so how do we improve this well first we have to look",
    "start": "697279",
    "end": "705480"
  },
  {
    "text": "at what this looks like in a q format right so if we put this um in a q sort",
    "start": "705480",
    "end": "710800"
  },
  {
    "text": "of like diagram we can see that there's a multitude of requests all of different sizes and characteristics and they're",
    "start": "710800",
    "end": "717079"
  },
  {
    "text": "all sort of queuing up one after the other one waiting for the instance to serve them and this is of course quite",
    "start": "717079",
    "end": "723320"
  },
  {
    "text": "inefficient so some of the requests can be a few kilobytes in size and be in hot",
    "start": "723320",
    "end": "728399"
  },
  {
    "text": "cash which means that we can serve them out really fast and some of them might be quite large if you're requesting a",
    "start": "728399",
    "end": "733800"
  },
  {
    "text": "monthly report we have to go to a database we have to do a number of queries a number of joins and then return the result and that can take a",
    "start": "733800",
    "end": "740480"
  },
  {
    "text": "long time so again when you have that sort of processing uh criteria your",
    "start": "740480",
    "end": "747760"
  },
  {
    "text": "average will be really really bad and what can we do to improve this so how",
    "start": "747760",
    "end": "753519"
  },
  {
    "text": "what can we do to improve this situation well we can throw more capacity at the problem right instead of processing things linearly we can start processing",
    "start": "753519",
    "end": "760320"
  },
  {
    "text": "things in parallel and that will certainly help so that will make your averages a lot faster it will make the",
    "start": "760320",
    "end": "767000"
  },
  {
    "text": "initial time of response incredibly fast but you will still have a long tail and",
    "start": "767000",
    "end": "772160"
  },
  {
    "text": "the reason for this is that even though you've added capacity you're still processing things in a linear queue so",
    "start": "772160",
    "end": "778880"
  },
  {
    "text": "there a sequence of packets coming in small and big that need to be processed if we separate the requests and send",
    "start": "778880",
    "end": "785360"
  },
  {
    "text": "them all to different instances we do get a benefit um but there's more things that we can do to actually improve this",
    "start": "785360",
    "end": "791600"
  },
  {
    "text": "situation so we can use weighted round robbing to distribute the load across all of the um all of the instances and",
    "start": "791600",
    "end": "799040"
  },
  {
    "text": "this this will improve things so the Orange Line there is a single server and",
    "start": "799040",
    "end": "805079"
  },
  {
    "text": "the green line is the way they round robbing across multiple servers it helps pull in the tail a bit so your worst",
    "start": "805079",
    "end": "810800"
  },
  {
    "text": "case scenario is not going to be that bad but we like to do things differently um even though we like to paralyze the",
    "start": "810800",
    "end": "817920"
  },
  {
    "text": "workload we don't think that sequentially processing those requests is the best way to do it so how do we do",
    "start": "817920",
    "end": "826040"
  },
  {
    "text": "it we play Snake so essentially in the preview CU what you had was a single",
    "start": "826040",
    "end": "832720"
  },
  {
    "text": "file for each um agent or each server that would process the request what we try to do is we try to queue up the",
    "start": "832720",
    "end": "840040"
  },
  {
    "text": "requests and Route them to the next available server and what we do is we do",
    "start": "840040",
    "end": "847079"
  },
  {
    "text": "a lease con connections weight distribution so the idea is that we'll identify the load that each of the",
    "start": "847079",
    "end": "854000"
  },
  {
    "text": "components of the system is under and we will route the next request to the component with the least",
    "start": "854000",
    "end": "861440"
  },
  {
    "text": "load this will smooth the piece so you bring down the average you bring in the",
    "start": "861440",
    "end": "867040"
  },
  {
    "text": "tail and and this is is what the benefit of elb is right so as long as there is",
    "start": "867040",
    "end": "872480"
  },
  {
    "text": "capacity available as long as you have a server that can serve that request that coming in that's where the elb will root",
    "start": "872480",
    "end": "878279"
  },
  {
    "text": "their request to there is a caveat with this uh you have to be very very careful",
    "start": "878279",
    "end": "884240"
  },
  {
    "text": "not to Black Hole the traffic and what does black holing mean so if you have a",
    "start": "884240",
    "end": "889759"
  },
  {
    "text": "number of servers you have a number of components each one of them will have different response times and it might be",
    "start": "889759",
    "end": "894959"
  },
  {
    "text": "the case that one of them um has a very long response time because it's getting all of the really really long um bit of",
    "start": "894959",
    "end": "900959"
  },
  {
    "text": "the tail end requests but it might be that others are responding really fast",
    "start": "900959",
    "end": "906279"
  },
  {
    "text": "the faster that you respond the sooner that you get a new request now what happens if the response is not actually",
    "start": "906279",
    "end": "912240"
  },
  {
    "text": "an expected response uh but a 500 error and exception or whatever else uh is not",
    "start": "912240",
    "end": "917480"
  },
  {
    "text": "what we're asking for then that server will start getting all of the requests um and that will cost a bit of a problem",
    "start": "917480",
    "end": "924000"
  },
  {
    "text": "a nice easy hack if you have an application that is processing requests is to just put in an exception Handler",
    "start": "924000",
    "end": "930399"
  },
  {
    "text": "um which has a a delay in responding so even if the response is going to be an error you put in a little bit of a sleep",
    "start": "930399",
    "end": "936639"
  },
  {
    "text": "um let's say 100 milliseconds or something like that and that will attenuate and avoid black holing the",
    "start": "936639",
    "end": "943720"
  },
  {
    "text": "traffic so how do we scale eel Beast right because this this is all really",
    "start": "943720",
    "end": "949360"
  },
  {
    "text": "good how you scale East you scale on the back end but how do eel Beast themselves scale because they are the single point",
    "start": "949360",
    "end": "955040"
  },
  {
    "text": "of entry for all of the traffic so all of the traffic that eventually reach is your instances first has to go through",
    "start": "955040",
    "end": "960920"
  },
  {
    "text": "the elb so we see customers serve anything from two to a million requests",
    "start": "960920",
    "end": "967279"
  },
  {
    "text": "per seconds using elbs and we use two types of scaling on the elb platform one",
    "start": "967279",
    "end": "974120"
  },
  {
    "text": "is preemptive which means we scale up the elb as long as you're putting more",
    "start": "974120",
    "end": "979199"
  },
  {
    "text": "instance into the back end we assume that you have a very very good reason to put those instances there we assume that",
    "start": "979199",
    "end": "985279"
  },
  {
    "text": "you are expecting traffic to hit your so we'll scale up and we very very aggressive at scaling up we will sorry",
    "start": "985279",
    "end": "993000"
  },
  {
    "text": "we will scale up a whole lot and we will remain scaled up um even for days even",
    "start": "993000",
    "end": "998079"
  },
  {
    "text": "if we don't see traffic and we also scale reactively which means that we look at your traffic patterns and we try",
    "start": "998079",
    "end": "1005000"
  },
  {
    "text": "to scale ahead of those hitting your elb and your",
    "start": "1005000",
    "end": "1010880"
  },
  {
    "text": "infrastructure we also use clout watch or you can also use clout watch uh to scale up um and the idea is that every",
    "start": "1010880",
    "end": "1018240"
  },
  {
    "text": "single metric in cloudwatch can be used to scale up now some of them might not",
    "start": "1018240",
    "end": "1023519"
  },
  {
    "text": "be too useful or immediately obvious um and you don't need to build your own metrics like you you just take the",
    "start": "1023519",
    "end": "1029640"
  },
  {
    "text": "cloudwalk metrics that we offer and plug and play into your outer scaling we provide 13 cloudwatch metrics",
    "start": "1029640",
    "end": "1037720"
  },
  {
    "text": "um all of them can be used for scaling and you can also configure alarms to let you know when your solution is scaling",
    "start": "1037720",
    "end": "1043640"
  },
  {
    "text": "up and by how much it is scaling up we also offer a complete View on the",
    "start": "1043640",
    "end": "1049320"
  },
  {
    "text": "end to-end life of the requests going through your solution so that you can understand whether processing is getting",
    "start": "1049320",
    "end": "1055840"
  },
  {
    "text": "slower whether the life of that request is getting longer and this is very useful in understanding whether you can",
    "start": "1055840",
    "end": "1062440"
  },
  {
    "text": "Target any optimization opportunities at the application layer or at the solution layer and we also offer two metrics um",
    "start": "1062440",
    "end": "1069600"
  },
  {
    "text": "sege q and spillover so what sege Q does is it cues up requests that your backend",
    "start": "1069600",
    "end": "1076520"
  },
  {
    "text": "is not yet ready to process and and the idea is that we create a queue that holds up to 1,24 requests and once your",
    "start": "1076520",
    "end": "1084760"
  },
  {
    "text": "backend becomes available to processes request we slowly release them there's a",
    "start": "1084760",
    "end": "1090480"
  },
  {
    "text": "good reason for not going above 1024 and is the Stampede effect so we",
    "start": "1090480",
    "end": "1096640"
  },
  {
    "text": "found it that by turning requests away after 1,24 CU queued up requests we give",
    "start": "1096640",
    "end": "1103400"
  },
  {
    "text": "the application time to recover if you have a high count of spillo",
    "start": "1103400",
    "end": "1109600"
  },
  {
    "text": "then you should start looking at the back end and thinking about scaling up choosing a different um instance type or",
    "start": "1109600",
    "end": "1115799"
  },
  {
    "text": "even looking at the application for optimization opportunities and we also have access",
    "start": "1115799",
    "end": "1120880"
  },
  {
    "text": "logs uh other than for SSL and TLS purposes access logs provide a vast",
    "start": "1120880",
    "end": "1126919"
  },
  {
    "text": "amount of information for you to understand what's going on with your application it's a bit more veros that",
    "start": "1126919",
    "end": "1132880"
  },
  {
    "text": "you're a pasi log uh but we found that this information helps customers do a really deep dive into what's going on",
    "start": "1132880",
    "end": "1139720"
  },
  {
    "text": "with requests applications and the backend and uh in addition to Regional",
    "start": "1139720",
    "end": "1146400"
  },
  {
    "text": "availability uh we also support scaling through Route 53 so you can create a DNS",
    "start": "1146400",
    "end": "1151799"
  },
  {
    "text": "domain name um and you can Route traffic based on geot trffic uh sorry Gip",
    "start": "1151799",
    "end": "1158080"
  },
  {
    "text": "traffic um least sorry goip traffic uh least latency or whatever other metric",
    "start": "1158080",
    "end": "1165080"
  },
  {
    "text": "you can use so this is very useful for customers that have applications where latency is critical so advertising um",
    "start": "1165080",
    "end": "1172760"
  },
  {
    "text": "exchange or bidding and this ties very well into",
    "start": "1172760",
    "end": "1179400"
  },
  {
    "text": "availability um and to speak about availability I would like to welcome onto the stage Ben Doyle senior",
    "start": "1179400",
    "end": "1185159"
  },
  {
    "text": "infrastructure engineer for insiden please welcome",
    "start": "1185159",
    "end": "1189440"
  },
  {
    "text": "Ben good how's it going folks uh my name is",
    "start": "1190240",
    "end": "1195559"
  },
  {
    "text": "Ben Doyle um I to hail from a tropical climate like Mariano the exotic island of Ireland um I work for a company",
    "start": "1195559",
    "end": "1202640"
  },
  {
    "text": "called Inon um we're a web analytics company that have two main tracks of",
    "start": "1202640",
    "end": "1208559"
  },
  {
    "text": "products that will hopefully give you kind some kind of context about how important elbs are for us the first one",
    "start": "1208559",
    "end": "1213880"
  },
  {
    "text": "is a data collection um product so our customers will drop a pixel on their",
    "start": "1213880",
    "end": "1219520"
  },
  {
    "text": "website so they can start to track users Journeys through their website see if they bought something what kind of ads",
    "start": "1219520",
    "end": "1225120"
  },
  {
    "text": "they came in on and you know what's generally working for them and what's not the other kind is uh like a Content",
    "start": "1225120",
    "end": "1230880"
  },
  {
    "text": "management system that's uh referred to as tag management so uh we we need to be you know really",
    "start": "1230880",
    "end": "1238559"
  },
  {
    "text": "on point with this because if our tag Management Service stops working uh we're in danger of you know hindering uh",
    "start": "1238559",
    "end": "1244960"
  },
  {
    "text": "the availability of our clients's websites their websites might might not load properly or might not load at all",
    "start": "1244960",
    "end": "1250200"
  },
  {
    "text": "so we need to be as close to the end users as possible so we're across lots",
    "start": "1250200",
    "end": "1255799"
  },
  {
    "text": "and lots of different regions with a DNS here in front of our lbs that geot and also do uh health checks as well DNS",
    "start": "1255799",
    "end": "1262240"
  },
  {
    "text": "health checks so the nature of these two products give us two very um large",
    "start": "1262240",
    "end": "1267880"
  },
  {
    "text": "problems to solve the first one is we have um compounded traffic coming in so",
    "start": "1267880",
    "end": "1273039"
  },
  {
    "text": "we've quite big clients so United Airlines Samsung to name to anytime you visit one of th those websites we also",
    "start": "1273039",
    "end": "1278640"
  },
  {
    "text": "get a request to our infrastructure as well uh the second arguably more difficult problem to solve is we need to",
    "start": "1278640",
    "end": "1285039"
  },
  {
    "text": "explain on a daily basis to our families what an actual effect we do in our company um but many people here I'm sure",
    "start": "1285039",
    "end": "1290360"
  },
  {
    "text": "have that problem that they have to solve in their own way so a us have a pretty big tagline",
    "start": "1290360",
    "end": "1296559"
  },
  {
    "text": "about elbs um and it is that elbs provide seamless and graceful replacement of instances with no down",
    "start": "1296559",
    "end": "1302320"
  },
  {
    "text": "time now I hope there's no one here who is living in a world pre low balancers but uh before low balancers and even",
    "start": "1302320",
    "end": "1308520"
  },
  {
    "text": "some of you still might might might here might have to do this there's uh functionality mainly",
    "start": "1308520",
    "end": "1315320"
  },
  {
    "text": "powered by health checks gives you a functional um way of solving problems as well as",
    "start": "1315320",
    "end": "1321039"
  },
  {
    "text": "solving operational problems as well so traditionally you might have a server",
    "start": "1321039",
    "end": "1327400"
  },
  {
    "text": "up with the the your version of the application running you want you want to do an application upgrade you need to",
    "start": "1327400",
    "end": "1332880"
  },
  {
    "text": "get your engineers up at 2: a.m. in the morning they do not like that um take down the service schedule downtime you",
    "start": "1332880",
    "end": "1338919"
  },
  {
    "text": "might lose some requests clients might get angry hope that you complete the maintenance within the maintenance window bring it back up and hope all",
    "start": "1338919",
    "end": "1346000"
  },
  {
    "text": "goes well with an elb if you an instance running your application uh behind an ALB what you can do is you can bring up",
    "start": "1346000",
    "end": "1352320"
  },
  {
    "text": "another instance with the new version of your application running um add it in behind the elb see if the health checks",
    "start": "1352320",
    "end": "1357440"
  },
  {
    "text": "pass and then you can remove the other instance that's running your older version of the application from the lb",
    "start": "1357440",
    "end": "1363520"
  },
  {
    "text": "don't worry about requests that are currently that are still going to the old instance when you remove an instance or when it fails hell checks with an elb",
    "start": "1363520",
    "end": "1370320"
  },
  {
    "text": "client traffic will still that's in Flight will still go to that old instance so you can watch the",
    "start": "1370320",
    "end": "1376279"
  },
  {
    "text": "connections drain and then see the new instance take uh or the new ver application version take the hits so we use these to our",
    "start": "1376279",
    "end": "1384240"
  },
  {
    "text": "advantage in Insight we have an anible run that can be easily applied to any kind of orchestration tool or config",
    "start": "1384240",
    "end": "1390000"
  },
  {
    "text": "management tool whereby when we want to do a minor or patch upgrade to our applications um The anible Run basically",
    "start": "1390000",
    "end": "1396000"
  },
  {
    "text": "goes okay I'm going to get a list of the instances behind this elb and take the first one on my list I'm going to force",
    "start": "1396000",
    "end": "1402679"
  },
  {
    "text": "the health check to fail so that connections still go in so all the connections drain off then anall kicks",
    "start": "1402679",
    "end": "1408080"
  },
  {
    "text": "in copies down the new version of the application edits the config files bounce the service whatever have you and",
    "start": "1408080",
    "end": "1414520"
  },
  {
    "text": "then uh start to make the health check what it deems as healthy as again what anible then does is it waits to see if",
    "start": "1414520",
    "end": "1420320"
  },
  {
    "text": "the E accepts the instance back into the back into service if all goes well and it the",
    "start": "1420320",
    "end": "1426600"
  },
  {
    "text": "health checks do pass then anel goes on to the next instance repeats the exact same process if that if the health",
    "start": "1426600",
    "end": "1432360"
  },
  {
    "text": "checks don't pass anel screams human what have you done and the engineers need to log on to the box it it stops",
    "start": "1432360",
    "end": "1438559"
  },
  {
    "text": "there doesn't go on to the next instance and deploys a bad version of the application we've got a an instance ready to go with an example of what",
    "start": "1438559",
    "end": "1445240"
  },
  {
    "text": "hasn't worked and the problems that we need to solve so hopefully we can fix that run the anable run again and all will go",
    "start": "1445240",
    "end": "1450360"
  },
  {
    "text": "okay so these are two um kind of function functional problems you can solve with health checks um the other",
    "start": "1450360",
    "end": "1457000"
  },
  {
    "text": "one is operational um which is probably quite obvious so but I'll quickly run through it here um we've three ec2",
    "start": "1457000",
    "end": "1463159"
  },
  {
    "text": "instances behind an elb uh all running the same application the top instance there that's meant to be the CP CPU bar",
    "start": "1463159",
    "end": "1469360"
  },
  {
    "text": "on the far right um something's gone wrong the discs are full cpu's pinned there bug with the application uh either",
    "start": "1469360",
    "end": "1476159"
  },
  {
    "text": "with cloudwatch alarms um DBC well DB sending health checks those application",
    "start": "1476159",
    "end": "1482159"
  },
  {
    "text": "health health checks start to fail uh traffic starts going to that instance starts going to the other two instances",
    "start": "1482159",
    "end": "1488679"
  },
  {
    "text": "through alarming whether it be cloudwatch or your own internal Services uh an engineer is notified logs on that",
    "start": "1488679",
    "end": "1494279"
  },
  {
    "text": "box fixes the issue the El sees that that instance starts passing health checks again gets add added back into",
    "start": "1494279",
    "end": "1499679"
  },
  {
    "text": "your backend Fleet so health checks are really key um when",
    "start": "1499679",
    "end": "1506039"
  },
  {
    "text": "it comes to configuring how much value you get out of the availability aspect of an elb so uh elbs offer two kinds of",
    "start": "1506039",
    "end": "1512760"
  },
  {
    "text": "health checks one is a simple TCP health check whereby it just needs a TCP response so it's the equivalent running",
    "start": "1512760",
    "end": "1519320"
  },
  {
    "text": "net cat or T net to a certain port and getting you know the open reply um so that that might be fine but",
    "start": "1519320",
    "end": "1526520"
  },
  {
    "text": "you know a web server that's serving 503 errors um will respond with the TCP",
    "start": "1526520",
    "end": "1531559"
  },
  {
    "text": "check but your application might still be throwing errors this is where the HTTP health check is quite useful um",
    "start": "1531559",
    "end": "1537360"
  },
  {
    "text": "HTTP health check you point it to an endpoint in your application you know a URL on a certain port and theb will need",
    "start": "1537360",
    "end": "1544720"
  },
  {
    "text": "to get a 200 okay response back from that health check otherwise it doesn't count as healthy if he gets 503 404 a",
    "start": "1544720",
    "end": "1550960"
  },
  {
    "text": "timeout the lb will consider that unhealthy and after the threshold that you configure it'll remove that instance",
    "start": "1550960",
    "end": "1556440"
  },
  {
    "text": "from service so so this kind of gives you the ability to configure a kind of depth to your health checks so at andite",
    "start": "1556440",
    "end": "1563399"
  },
  {
    "text": "in one of our products has a web tier that's dependent on a database tier so if that database tier in that region",
    "start": "1563399",
    "end": "1568640"
  },
  {
    "text": "goes down the web tier also goes down in that region so what we have is a very light health check that hits the instance and that Health the instance",
    "start": "1568640",
    "end": "1575279"
  },
  {
    "text": "then goes off does a read from the database and returns 200 if it's okay if it can't get to the database returns a",
    "start": "1575279",
    "end": "1580679"
  },
  {
    "text": "503 or does something strange the health checks fail and then you go oh well hang on all your instances are going to start",
    "start": "1580679",
    "end": "1586559"
  },
  {
    "text": "failing then but that's okay cuz at our top tier we've got the DNS health checks running um that will fail us over to",
    "start": "1586559",
    "end": "1592480"
  },
  {
    "text": "another region when the elb has noal healthy instances behind it we fail over to another region that's hopefully",
    "start": "1592480",
    "end": "1599799"
  },
  {
    "text": "working so um another feature of eobs that you can figure to kind of uh figure",
    "start": "1599799",
    "end": "1605559"
  },
  {
    "text": "out the health of your application or you know how how it interacts with your requests is the ID idle timeout feature",
    "start": "1605559",
    "end": "1611240"
  },
  {
    "text": "so an idle timeout for an elb uh what happens is when a request comes into an",
    "start": "1611240",
    "end": "1616440"
  },
  {
    "text": "elb and it forces forwards that request onto the instances um a counter starts",
    "start": "1616440",
    "end": "1622600"
  },
  {
    "text": "and basically it waits until the request comes back and if it waits a number of seconds that's you know to your idle",
    "start": "1622600",
    "end": "1628640"
  },
  {
    "text": "your time out it's it's taking too long it's going to close the connection and close the connection to the client so this is quite useful if you want to fail",
    "start": "1628640",
    "end": "1634039"
  },
  {
    "text": "hard and fast with your applications you might have built into your own client somewhere that okay well if I get a bad",
    "start": "1634039",
    "end": "1639640"
  },
  {
    "text": "if I get a bad response I'm going to back off a bit and then connect back again later so this is where this is quite useful",
    "start": "1639640",
    "end": "1647080"
  },
  {
    "text": "so idle timeouts by default they're 60 seconds you can CH you can have it as low as one and a size 3,600 um pretty",
    "start": "1648760",
    "end": "1655640"
  },
  {
    "text": "useful uh giving the monthly report example that was given earlier on so you know you don't want your clients waiting",
    "start": "1655640",
    "end": "1661840"
  },
  {
    "text": "too long for that monthly report to come back but you need to have a think again like you would with your health checks um don't shoot yourself in the foot with",
    "start": "1661840",
    "end": "1668840"
  },
  {
    "text": "it like so if you configure a which will the diagram here if you were to if the monthly report uh takes on average 20",
    "start": "1668840",
    "end": "1676320"
  },
  {
    "text": "seconds to complete and you set your time out to 15 seconds then really that that request is never going to",
    "start": "1676320",
    "end": "1682279"
  },
  {
    "text": "successfully complete theu goes man sorry you're taking too long I need to shut that connection down to the client so you shouldn't just con uh configure",
    "start": "1682279",
    "end": "1689360"
  },
  {
    "text": "this on your elbs but you should also configure it throughout your the down the rest of your stack and the time out you get lower so in engine X or Apache",
    "start": "1689360",
    "end": "1697360"
  },
  {
    "text": "or your rail stock whatever uh you should determine how long uh a timeout",
    "start": "1697360",
    "end": "1702840"
  },
  {
    "text": "for you know other backend dependencies should take to respond so in this example here at the very bottom of the",
    "start": "1702840",
    "end": "1708960"
  },
  {
    "text": "stack we have our ec2 instances make a requests to S3 RDS and simple workflow",
    "start": "1708960",
    "end": "1715760"
  },
  {
    "text": "and you know they think okay well you know 9 seconds is an okay time for these to respond so the instance is N 9",
    "start": "1715760",
    "end": "1720840"
  },
  {
    "text": "seconds El is going to be a little more generous the instance in case it needs to do some number crunching after it",
    "start": "1720840",
    "end": "1725919"
  },
  {
    "text": "receives that data it's 15 seconds so you need to be careful with that you need to again need to have a think and",
    "start": "1725919",
    "end": "1732799"
  },
  {
    "text": "apply the correct value to your stack um another thing to keep in mind as well is uh the idle timeout connection setting",
    "start": "1732799",
    "end": "1739159"
  },
  {
    "text": "on your clients as well so by default a lot of browsers have the idle time out I think it's between 60 and 300 seconds so",
    "start": "1739159",
    "end": "1746360"
  },
  {
    "text": "if you set the idle time out to above what your client is the client's going to go nah close that request and you're going to have",
    "start": "1746360",
    "end": "1752440"
  },
  {
    "text": "issues so one of uh the key takeaways",
    "start": "1752440",
    "end": "1757679"
  },
  {
    "text": "from using elbs that you should bring away today is that you should always have uh your elbs associate across",
    "start": "1757679",
    "end": "1763640"
  },
  {
    "text": "multiple availability zones with your instances um what this enables to do is basically survive in the in the event",
    "start": "1763640",
    "end": "1770519"
  },
  {
    "text": "that an availability Zone goes down so you give an elb two subnets in this",
    "start": "1770519",
    "end": "1777039"
  },
  {
    "text": "case uh we have one elb uh on this diagram but it's Associated to two subnets one in US W 1A and the other in",
    "start": "1777039",
    "end": "1784080"
  },
  {
    "text": "1B along with ec2 instances behind that so if 1 a were to go down we're still okay the E is still there for you in US",
    "start": "1784080",
    "end": "1790840"
  },
  {
    "text": "W 1B as well as your instance there and your application can continue on um",
    "start": "1790840",
    "end": "1795919"
  },
  {
    "text": "there's no kind of black magic that goes around in the the background here there's no kind of complex control plane call for the lb um it's just simply DNS",
    "start": "1795919",
    "end": "1802799"
  },
  {
    "text": "health checks so Route 53 is constantly going you know Health checking the lb nodes and your A's and once it realizes",
    "start": "1802799",
    "end": "1809880"
  },
  {
    "text": "that they're failing health checks it's going to stop returning that IP address so you don't need to log in you",
    "start": "1809880",
    "end": "1816080"
  },
  {
    "text": "don't need to you know wait for someone in aw us to flick a switch or anything like that because uh as on this screen",
    "start": "1816080",
    "end": "1821840"
  },
  {
    "text": "here rather than reacting we have a system on the left that's reacting uh when a failure occurs but on the right",
    "start": "1821840",
    "end": "1828679"
  },
  {
    "text": "we have something uh like the elb system where it's constantly checking if everything's okay so therefore the time",
    "start": "1828679",
    "end": "1834960"
  },
  {
    "text": "to react is much more you know what you you know a lot faster so again key takeaway uh two or",
    "start": "1834960",
    "end": "1843240"
  },
  {
    "text": "more availability zones subnets are mapped to a single availability zone so give it two make sure they're in different regions or availability zones",
    "start": "1843240",
    "end": "1850159"
  },
  {
    "text": "rather and Associate those to your Els so having said that it does bring in",
    "start": "1850159",
    "end": "1857200"
  },
  {
    "text": "a few challenges um when you're when you've more uh two",
    "start": "1857200",
    "end": "1863399"
  },
  {
    "text": "availability zones what you can start to see happen is you have traffic and balances so on this screen here we have",
    "start": "1863399",
    "end": "1868639"
  },
  {
    "text": "uh a request count from an elb that's split across three subnets uh across",
    "start": "1868639",
    "end": "1873720"
  },
  {
    "text": "three availability zones we can see that the green availability Zone has a lot",
    "start": "1873720",
    "end": "1878919"
  },
  {
    "text": "more requests than the other ones and more often than not the cause of this is It's a DNS caching issue because while",
    "start": "1878919",
    "end": "1885440"
  },
  {
    "text": "you have the um the various low balancing algorithms Mariana went into before with the HTTP and TCP listeners",
    "start": "1885440",
    "end": "1893159"
  },
  {
    "text": "on the top level it's just DNS R Robin to figure out which elb not to give the request to so some clients looking at",
    "start": "1893159",
    "end": "1900440"
  },
  {
    "text": "you Java don't obey dnst ttls they start the program starts up goes oh yeah that",
    "start": "1900440",
    "end": "1905519"
  },
  {
    "text": "IP address will do I'm going to hang on to that until I restart great idea um so what can start to happen",
    "start": "1905519",
    "end": "1912480"
  },
  {
    "text": "is um in this again back to this diagram the bottom EB node in this case has its",
    "start": "1912480",
    "end": "1920840"
  },
  {
    "text": "IP address cached by a bunch of clients that aren't obeying DNS so all the requests are to go to that instance in",
    "start": "1920840",
    "end": "1927039"
  },
  {
    "text": "US West 1B uh how you can get around this is by turning on Cross Zone low",
    "start": "1927039",
    "end": "1934159"
  },
  {
    "text": "balancing which is a pretty handy feature in the previous slide uh crossone lad balancing was turned off so",
    "start": "1934159",
    "end": "1941279"
  },
  {
    "text": "uh the elb nodes that are in your that are associated with your subnet us s1b are only going to low balance to your",
    "start": "1941279",
    "end": "1947480"
  },
  {
    "text": "instance that are in US West 1B with crossone low balancing all the El nodes register all",
    "start": "1947480",
    "end": "1954200"
  },
  {
    "text": "your backend instances to themselves so what you can see start to happen is that",
    "start": "1954200",
    "end": "1959399"
  },
  {
    "text": "guy that El note at the bottom is low balancing to the uh instance in availability Zone",
    "start": "1959399",
    "end": "1965639"
  },
  {
    "text": "a and then you get much nicer traffic match up",
    "start": "1965639",
    "end": "1971519"
  },
  {
    "text": "there so again it's a feature that you get for free um one small little disclaimer um is that you're going to",
    "start": "1971519",
    "end": "1979200"
  },
  {
    "text": "see a small uh jump in network latency when you uh turn it on because rather than the requests going into the same",
    "start": "1979200",
    "end": "1985240"
  },
  {
    "text": "availability Zone that elb notes needs to make a request across to another availability Zone um in a lot of cases",
    "start": "1985240",
    "end": "1991440"
  },
  {
    "text": "it's negligible and for us it's quite negligible as",
    "start": "1991440",
    "end": "1995480"
  },
  {
    "text": "well um so for us really kind of to conclude my part um is that elbs I I",
    "start": "1997159",
    "end": "2003519"
  },
  {
    "text": "don't you know as an engineer in inight and they're they're the they're really they're one of our the biggest",
    "start": "2003519",
    "end": "2008679"
  },
  {
    "text": "workhorses of our infrastructure and I really don't have to worry about them a lot they're incredibly reliable I get my",
    "start": "2008679",
    "end": "2014000"
  },
  {
    "text": "metrics from them that I can tie to other systems and they work great with you know a lot of the configuration configuration management tools whether",
    "start": "2014000",
    "end": "2020120"
  },
  {
    "text": "it be infrastructures code like cloud formation or terraform um as well as like anible and whatever else have you",
    "start": "2020120",
    "end": "2026720"
  },
  {
    "text": "so they work quite well for us and I'm sure they can work quite well for a lot of you guys as",
    "start": "2026720",
    "end": "2032120"
  },
  {
    "text": "well so I'll pass over back to Mariano for the recap then",
    "start": "2032120",
    "end": "2039279"
  },
  {
    "text": "can I have the [Applause]",
    "start": "2039279",
    "end": "2045000"
  },
  {
    "text": "clicker thank you vent uh today we've covered the fundamental pillars of",
    "start": "2045000",
    "end": "2051280"
  },
  {
    "text": "elastic load balancing which is security with a fully managed slsl TLS stack AWS",
    "start": "2051280",
    "end": "2058800"
  },
  {
    "text": "certificate manager so that you don't have to copy and toss your security credentials around e association with",
    "start": "2058800",
    "end": "2065240"
  },
  {
    "text": "your elbs within your AWS account account not needing to go outside of it",
    "start": "2065240",
    "end": "2070638"
  },
  {
    "text": "and compartment compartmentalization which sounds hard to say but it's really useful um for driving Security in your",
    "start": "2070639",
    "end": "2079118"
  },
  {
    "text": "account um with all of these you can make sure that you have a fully secured",
    "start": "2079119",
    "end": "2085040"
  },
  {
    "text": "and upto-date solution and it removes the need for you to have to concentrate on running around patching boxes and",
    "start": "2085040",
    "end": "2091720"
  },
  {
    "text": "worrying about something that is anything other than your work and developing your application we've also",
    "start": "2091720",
    "end": "2097440"
  },
  {
    "text": "looked looked at scalability how elb scales up how it takes care of Distributing load across your instances",
    "start": "2097440",
    "end": "2104400"
  },
  {
    "text": "and how we make sure the DLB is capable of processing all the traffic coming into your environment we've looked at",
    "start": "2104400",
    "end": "2111079"
  },
  {
    "text": "clout watch metrics which you can use um to scale up your instances automat",
    "start": "2111079",
    "end": "2116359"
  },
  {
    "text": "automatically we've looked at access logs which will give you both a security insight as well as an ability to scale",
    "start": "2116359",
    "end": "2123960"
  },
  {
    "text": "up if you need it to and we've looked at Global scalability um scaling across regions using rout 53 to make sure that",
    "start": "2123960",
    "end": "2131839"
  },
  {
    "text": "you make the best use of your environment your infrastructure around the world and we've heard from Ben about",
    "start": "2131839",
    "end": "2138359"
  },
  {
    "text": "minimal downtime seamless replacement um of instances when an elb fails we've",
    "start": "2138359",
    "end": "2143760"
  },
  {
    "text": "heard about the health checks that you can leverage to ensure that your solution remains highly available and",
    "start": "2143760",
    "end": "2149880"
  },
  {
    "text": "we've looked at Cross Zone lot balancing to remove traffic imbalances and overall optimize the efficiency of the traffic",
    "start": "2149880",
    "end": "2156599"
  },
  {
    "text": "going through one one end to the other of your Solution please remember to rate this",
    "start": "2156599",
    "end": "2162400"
  },
  {
    "text": "session if you have the time on AWS summit. London I hope you have enjoyed the",
    "start": "2162400",
    "end": "2167520"
  },
  {
    "text": "session I hope that we've uh managed to give you a good insight into elbs uh and",
    "start": "2167520",
    "end": "2172599"
  },
  {
    "text": "please join me in thanking Bale do uh for joining us today on stage please have a nice day and enjoy the rest of",
    "start": "2172599",
    "end": "2178520"
  },
  {
    "text": "the summit [Applause]",
    "start": "2178520",
    "end": "2184299"
  }
]