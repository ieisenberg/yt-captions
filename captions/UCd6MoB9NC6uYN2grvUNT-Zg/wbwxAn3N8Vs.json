[
  {
    "start": "0",
    "end": "31000"
  },
  {
    "text": "now yesterday session was sort of cramming a court into a pint",
    "start": "10140",
    "end": "15269"
  },
  {
    "text": "time-wise but if I wind up going at a hundred miles an hour today that's more",
    "start": "15269",
    "end": "21750"
  },
  {
    "text": "because this happens to be the current subject the subject area that I happen",
    "start": "21750",
    "end": "27329"
  },
  {
    "text": "to be wildly enthusiastic about so it out further adue bit of an introduction",
    "start": "27329",
    "end": "33360"
  },
  {
    "start": "31000",
    "end": "31000"
  },
  {
    "text": "to service architectures I hope I'm not going to be stealing Martin's thunder on this and then some thoughts about",
    "start": "33360",
    "end": "41660"
  },
  {
    "text": "actually looking at service architectures and indeed architecture AWS architectures in general from a",
    "start": "41660",
    "end": "47460"
  },
  {
    "text": "threat model perspective thinking about all the bad things that could go on if I was to stick a notional black hat on",
    "start": "47460",
    "end": "53820"
  },
  {
    "text": "what nastiness could I cause to happen and then how would I stop myself doing it if I switch back to the white hat",
    "start": "53820",
    "end": "60120"
  },
  {
    "text": "although I don't do the whole Ronnie Barker hat sketch thing a little bit of",
    "start": "60120",
    "end": "66090"
  },
  {
    "text": "a look at I am and permissions in the context of service and then some things",
    "start": "66090",
    "end": "71340"
  },
  {
    "text": "I've been working on with our friends at alert logic about how to go about",
    "start": "71340",
    "end": "77570"
  },
  {
    "text": "wrapping lambda functions to do sanity checking front and back of what inputs",
    "start": "77570",
    "end": "84240"
  },
  {
    "text": "they're getting what outputs they're generating so essentially how to blackbox lambda functions if in sit you",
    "start": "84240",
    "end": "90270"
  },
  {
    "text": "it turned out that what we came up with before doing the backend of the black",
    "start": "90270",
    "end": "96060"
  },
  {
    "text": "box was actually more generalizable using api gateway and lambda again with",
    "start": "96060",
    "end": "103380"
  },
  {
    "text": "api gateway is probably my new favorite service and then actually how that can",
    "start": "103380",
    "end": "108810"
  },
  {
    "text": "be generalized across api's as a whole from an AWS perspective to add extra",
    "start": "108810",
    "end": "115709"
  },
  {
    "text": "layers of protection to all the AWS API s-- and we should have time today a",
    "start": "115709",
    "end": "123209"
  },
  {
    "text": "little bit of a surprise on the end unless you've actually seen this session",
    "start": "123209",
    "end": "128340"
  },
  {
    "text": "at reinvent the video is up as sa c31 o on YouTube so I won't spoil the surprise",
    "start": "128340",
    "end": "134849"
  },
  {
    "text": "in case you haven't so there was a fairly big hoo-ha about two years ago",
    "start": "134849",
    "end": "141180"
  },
  {
    "start": "137000",
    "end": "137000"
  },
  {
    "text": "when we launched lambda and serverless has been the very much the hot topic of",
    "start": "141180",
    "end": "146430"
  },
  {
    "text": "the moment since however serve is a long way from new I mean when you look at it s3 is actually a service",
    "start": "146430",
    "end": "153420"
  },
  {
    "text": "service from a customer's perspective you don't get to interact with servers you don't need to determine what the",
    "start": "153420",
    "end": "159960"
  },
  {
    "text": "sizing of your service is you just take your data determine how it has to be",
    "start": "159960",
    "end": "165180"
  },
  {
    "text": "protected whether that be through access controls or access controls in your bucket policy or encryption or as we",
    "start": "165180",
    "end": "172320"
  },
  {
    "text": "recommend both and you just drop it in s3 and you let s3 get on with it so all you need to worry about is the",
    "start": "172320",
    "end": "180330"
  },
  {
    "text": "functionality of the service offers rather than how you actually go about managing and maintaining it that's our",
    "start": "180330",
    "end": "185760"
  },
  {
    "text": "job now on the server side up until",
    "start": "185760",
    "end": "192000"
  },
  {
    "text": "reinvent she could normally characterize a service service in terms of this",
    "start": "192000",
    "end": "198150"
  },
  {
    "text": "little list here of what it actually does what they actually do I've updated this table here since reinvent and as",
    "start": "198150",
    "end": "207720"
  },
  {
    "start": "201000",
    "end": "201000"
  },
  {
    "text": "famously we now say that we have 70 something probably getting on for 80 now",
    "start": "207720",
    "end": "213030"
  },
  {
    "text": "services if we take a look at this we've got two four six eight ten twelve",
    "start": "213030",
    "end": "218490"
  },
  {
    "text": "fourteen sixteen thirty 263 ish a",
    "start": "218490",
    "end": "224450"
  },
  {
    "text": "considerably more than half put it that way of the services AWS offers are",
    "start": "224450",
    "end": "230250"
  },
  {
    "text": "actually serviced by my rule of thumb which is that you don't have to go sizing things from the point of view of",
    "start": "230250",
    "end": "237620"
  },
  {
    "text": "the execution environment that you're using lambda is a little bit of an exception for that but lambda is a",
    "start": "237620",
    "end": "244530"
  },
  {
    "text": "little bit of an exception for a lot of things in a good way as we'll be getting on to so here's an example service",
    "start": "244530",
    "end": "251280"
  },
  {
    "start": "247000",
    "end": "247000"
  },
  {
    "text": "architecture that I blatantly ripped out of someone else's previous years reinvent deck and a common common things",
    "start": "251280",
    "end": "260370"
  },
  {
    "text": "that you see in service architectures first of all you wind up having remote environments calling api's the whole",
    "start": "260370",
    "end": "267540"
  },
  {
    "text": "thing tends to be API driven also you often get API integration with external",
    "start": "267540",
    "end": "272570"
  },
  {
    "text": "service is like twily oh and slack as you've got here and then from your API",
    "start": "272570",
    "end": "279060"
  },
  {
    "text": "gate where you wind up fanning out into a whole of lambda functions based on what the restful calls are actually doing in",
    "start": "279060",
    "end": "286770"
  },
  {
    "text": "order to go calling various backends to do stuff and using s3 for your logging",
    "start": "286770",
    "end": "293389"
  },
  {
    "text": "static hosting various other repositories and visualizing stuff in",
    "start": "293389",
    "end": "299040"
  },
  {
    "text": "Cabana it this is a very common way that things hang together in a service world so thinking looking at the world through",
    "start": "299040",
    "end": "307800"
  },
  {
    "text": "security tinted glasses as I do what can go wrong so everything starts with a",
    "start": "307800",
    "end": "314729"
  },
  {
    "start": "311000",
    "end": "311000"
  },
  {
    "text": "threat model pretty much everything in my world starts with a threat model to be honest so what can we actually what",
    "start": "314729",
    "end": "324750"
  },
  {
    "text": "we actually do from a badness perspective we do a lot of threat",
    "start": "324750",
    "end": "329790"
  },
  {
    "text": "modeling at AWS we use stride we use dread we use a whole bunch of others but the thing about threat and risk is it's",
    "start": "329790",
    "end": "336960"
  },
  {
    "text": "something that the human brain is fundamentally bad at as bruce schneier and other illuminati have written at",
    "start": "336960",
    "end": "342630"
  },
  {
    "text": "great length i've actually I think I think that I read a few months ago and",
    "start": "342630",
    "end": "349020"
  },
  {
    "text": "which is actually a nice read if you're into this kind of thing is there's an MSC thesis from a chap named an iron",
    "start": "349020",
    "end": "356550"
  },
  {
    "text": "eater from the university of twente where he kind of has a gazetteer of it comes out as being 27 different threat",
    "start": "356550",
    "end": "363510"
  },
  {
    "text": "risk models some of which I knew about anyway there are a couple in there I",
    "start": "363510",
    "end": "369000"
  },
  {
    "text": "didn't but I also know about a couple that he didn't released either I've even invented one back when so ultimately",
    "start": "369000",
    "end": "375780"
  },
  {
    "text": "what you need to look at is who can do bad stuff what means they have of doing that bad stuff and the consequences of the",
    "start": "375780",
    "end": "383550"
  },
  {
    "text": "badness when it happens and there of course this is where you then wind up standing up mitigations to stop it",
    "start": "383550",
    "end": "390510"
  },
  {
    "text": "happening in the first place so consider an AWS API so if things have input",
    "start": "390510",
    "end": "399750"
  },
  {
    "start": "392000",
    "end": "392000"
  },
  {
    "text": "they've got attack vectors whether if they've got these tend to split into in and out of band but there's also the",
    "start": "399750",
    "end": "408270"
  },
  {
    "text": "matter of just using a service as a propagation vector rather than necessarily compromising it itself",
    "start": "408270",
    "end": "414380"
  },
  {
    "text": "imagine if you will taking some piece of malware put it need to be a fairly small",
    "start": "414380",
    "end": "421220"
  },
  {
    "text": "piece of malware for this example but let's consider that later drop it into",
    "start": "421220",
    "end": "426320"
  },
  {
    "text": "sqs as a message in the understanding that at some point an ec2 instance with",
    "start": "426320",
    "end": "432560"
  },
  {
    "text": "some vulnerability is going to pluck that message off the s off the sq sq consume it get compromised no fault in",
    "start": "432560",
    "end": "440330"
  },
  {
    "text": "sqs in this context it has done its job by propagating the message from point A",
    "start": "440330",
    "end": "446360"
  },
  {
    "text": "to point B with appropriate queuing and control and so forth it's just that the",
    "start": "446360",
    "end": "451780"
  },
  {
    "text": "the end of the actual consuming point has the issue but can we do things with",
    "start": "451780",
    "end": "457520"
  },
  {
    "text": "sqs to deal with that more later so",
    "start": "457520",
    "end": "462700"
  },
  {
    "text": "obviously for the actual things that you could go putting in that kind of payload start with the OWASP lot 10 so let's",
    "start": "462700",
    "end": "470800"
  },
  {
    "start": "469000",
    "end": "469000"
  },
  {
    "text": "have a look at the so that's in band attacks essentially for a service now let's look at out-of-band attacks for",
    "start": "470800",
    "end": "477320"
  },
  {
    "text": "against the actual API when we actually built our sig v4 API call mechanism we",
    "start": "477320",
    "end": "485750"
  },
  {
    "text": "did a lot of thinking about it from the point of view of integrity and non-repudiation confidentiality plus of",
    "start": "485750",
    "end": "493160"
  },
  {
    "text": "course of scaling of the API endpoints themselves they all auto scale and we monitor and throttle the traffic to them",
    "start": "493160",
    "end": "499400"
  },
  {
    "text": "gives us our availability so with a sig v4 call you're framing your recipe",
    "start": "499400",
    "end": "504890"
  },
  {
    "text": "you're framing your rest query or query based URL adding a timestamp adding your",
    "start": "504890",
    "end": "511730"
  },
  {
    "text": "AWS access key whether statically generated or better still ephemeral out of our secure token service you're doing",
    "start": "511730",
    "end": "519469"
  },
  {
    "text": "a char 256 H Mak over that with your secret access key and you're sending it into us we then verify that the call is",
    "start": "519469",
    "end": "526850"
  },
  {
    "text": "appropriately constructed we we dismantle it as needs be and get it",
    "start": "526850",
    "end": "531920"
  },
  {
    "text": "passed by the by the respective services parser once it's being checked against I am to determine that you've got the",
    "start": "531920",
    "end": "539210"
  },
  {
    "text": "permissions to do what you're trying to and it all hangs together pretty well we're using s to arrow we're using s to",
    "start": "539210",
    "end": "546800"
  },
  {
    "text": "N now which is our own implementation of TLS 1.2 to do the crypto on this it looks pretty well",
    "start": "546800",
    "end": "553280"
  },
  {
    "text": "sorted to my eye anyway but if you look",
    "start": "553280",
    "end": "559010"
  },
  {
    "start": "556000",
    "end": "556000"
  },
  {
    "text": "at what those payloads can constitute in your rest in your restful calls or your",
    "start": "559010",
    "end": "564620"
  },
  {
    "text": "API query based calls you can actually put a lot in one of these calls and the",
    "start": "564620",
    "end": "571580"
  },
  {
    "text": "payload that goes along with it so I've just picked some example payload sizes by service here and there is leeway here",
    "start": "571580",
    "end": "580790"
  },
  {
    "text": "to potentially get some interesting and bad payloads in band into API calls this",
    "start": "580790",
    "end": "588380"
  },
  {
    "text": "is interesting so what can we do about it first things first I am is a fairly",
    "start": "588380",
    "end": "598910"
  },
  {
    "start": "595000",
    "end": "595000"
  },
  {
    "text": "sharp instrument for this if you want to use it bluntly the obvious thing you do",
    "start": "598910",
    "end": "604580"
  },
  {
    "text": "is deny access to your API to anyone except the people you really want to have access to them and this is",
    "start": "604580",
    "end": "611060"
  },
  {
    "text": "something that I am really good at we recommend as is worth saying here that",
    "start": "611060",
    "end": "617600"
  },
  {
    "text": "anything that is doing interesting privileged operations be assigned to a",
    "start": "617600",
    "end": "623210"
  },
  {
    "text": "role rather than a user this means that you're authenticating to make that call using ephemeral keys VAR our STS service",
    "start": "623210",
    "end": "631760"
  },
  {
    "text": "and this means that there is less incentive for engineers who should probably know better to go wiring a",
    "start": "631760",
    "end": "638150"
  },
  {
    "text": "static static API keys into their code and then posting their code up to github",
    "start": "638150",
    "end": "643610"
  },
  {
    "text": "and then finding as we all know from the press that their AWS account is suddenly mining Bitcoin so using STS and rolls D",
    "start": "643610",
    "end": "655880"
  },
  {
    "text": "risks D risks that particular kind of threat vector effectively so that's an",
    "start": "655880",
    "end": "662570"
  },
  {
    "text": "obvious thing to do to begin with also a thing I'll be getting on to in a",
    "start": "662570",
    "end": "668090"
  },
  {
    "text": "slightly different way a bit later is if you actually start doing things cross",
    "start": "668090",
    "end": "674510"
  },
  {
    "text": "account using cross account I am roles for certain services that support this",
    "start": "674510",
    "end": "680270"
  },
  {
    "text": "you can actually bend the bend to the means of access to",
    "start": "680270",
    "end": "686809"
  },
  {
    "text": "those services and there api's and restricting permissions to a level where you effectively get mandatory access",
    "start": "686809",
    "end": "692179"
  },
  {
    "text": "control and those of you who are in yesterday's session will know that mandatory access control is something I",
    "start": "692179",
    "end": "698420"
  },
  {
    "text": "have a fixation with that borders on the unhealthy but more on that as well shortly so mostly you can constrain API",
    "start": "698420",
    "end": "710389"
  },
  {
    "text": "calls by source IP and your I am policy if you have the kind I if you're using",
    "start": "710389",
    "end": "716839"
  },
  {
    "text": "the kind of API that itself goes making API calls that is a bit more of an issue",
    "start": "716839",
    "end": "722600"
  },
  {
    "text": "and there are details as to which call which kinds of calls those are and means",
    "start": "722600",
    "end": "730189"
  },
  {
    "text": "of addressing the problem in the architecture I'll be presenting in terms of the means of making API calls from",
    "start": "730189",
    "end": "739549"
  },
  {
    "text": "AWS environments through the API we publish our IP I API ranges as IP ranges",
    "start": "739549",
    "end": "746059"
  },
  {
    "text": "which are themselves pretty large but you can scope them down by region to ensure that one region is only able to",
    "start": "746059",
    "end": "753350"
  },
  {
    "text": "call itself and we'll be using that later with our wrapper functions and of",
    "start": "753350",
    "end": "758990"
  },
  {
    "text": "course if you start by default by assigning things a little bit permissive you can very easily audit when specific",
    "start": "758990",
    "end": "767179"
  },
  {
    "text": "permissions were used so after an API or an environment as being active for a few",
    "start": "767179",
    "end": "772939"
  },
  {
    "text": "months if there's calls that haven't been used you can chat to appropriate people and see if you can gracefully drop them so this is an interesting bit",
    "start": "772939",
    "end": "782689"
  },
  {
    "text": "of research currently ongoing with friends at alert logic though I have",
    "start": "782689",
    "end": "788809"
  },
  {
    "text": "also just this morning got wind that there is a stealth company a start-up",
    "start": "788809",
    "end": "796669"
  },
  {
    "text": "currently in stealth mode who I hope to be seeing next week that are also doing something that might kind of mesh with",
    "start": "796669",
    "end": "804709"
  },
  {
    "text": "this nicely but I'm afraid I can't talk any more about this yet so if we want to go securing our service architectures",
    "start": "804709",
    "end": "812290"
  },
  {
    "start": "807000",
    "end": "807000"
  },
  {
    "text": "lambdas a nice place to start as a test case reason being lambda actually execute",
    "start": "812290",
    "end": "819850"
  },
  {
    "text": "your code anything that you are able to write in Python or nodejs or Java or any",
    "start": "819850",
    "end": "826540"
  },
  {
    "text": "languages that can be called from those a common thing to do is actually use a",
    "start": "826540",
    "end": "833019"
  },
  {
    "text": "nodejs shame which is doing the rounds on the internet to go calling",
    "start": "833019",
    "end": "838600"
  },
  {
    "text": "pre-compiled functions that you've built in any other language I've even seen people write lambda functions in C before now",
    "start": "838600",
    "end": "845790"
  },
  {
    "text": "but as we all know you can write insecure code in any language it's",
    "start": "845790",
    "end": "854019"
  },
  {
    "text": "supposed to be impossible but I've even once seen insecure code written in Ada they had insufficient rigor on the traps",
    "start": "854019",
    "end": "863620"
  },
  {
    "text": "that are on the on the trap handlers that were supposed to catch errors so",
    "start": "863620",
    "end": "869290"
  },
  {
    "text": "there is there is no accounting for what engineers can get up to if they want to",
    "start": "869290",
    "end": "875910"
  },
  {
    "text": "obviously when it comes to security the first thing you need to do is ensure",
    "start": "875910",
    "end": "880930"
  },
  {
    "text": "you're sanitizing your input not everyone does we've all we've all seen",
    "start": "880930",
    "end": "887230"
  },
  {
    "text": "the well-known xkcd cartoon where little Bobbie tables winds up actor by by",
    "start": "887230",
    "end": "894850"
  },
  {
    "text": "virtue of his name deleting the school's database system this is very much the",
    "start": "894850",
    "end": "900310"
  },
  {
    "text": "same idea here for licence brought up for automatic number plate recognition",
    "start": "900310",
    "end": "907019"
  },
  {
    "start": "907000",
    "end": "907000"
  },
  {
    "text": "not everyone done not everyone sanitizes there'd a sanitizes their input despite",
    "start": "907019",
    "end": "912790"
  },
  {
    "text": "it being a wasp or wasp threat number one in the top ten so if we consider",
    "start": "912790",
    "end": "918510"
  },
  {
    "text": "what our lambda function would normally do got our function here that is being",
    "start": "918510",
    "end": "924519"
  },
  {
    "text": "triggered by an events let's say an object being written to an s3 bucket it",
    "start": "924519",
    "end": "930040"
  },
  {
    "text": "runs in a in anion role let's say so let's say it has a permission whatever",
    "start": "930040",
    "end": "935949"
  },
  {
    "text": "that permission may be to go making a function call against a generic API endpoint force on AWS service let's now",
    "start": "935949",
    "end": "945130"
  },
  {
    "text": "put some wrapping around this so we're going to make ourselves a",
    "start": "945130",
    "end": "950930"
  },
  {
    "text": "little front end service here involving another lambda function and some extra magic box and we're going to filter our",
    "start": "950930",
    "end": "958670"
  },
  {
    "text": "API call going to our API endpoint by having a new back-end on here so let's",
    "start": "958670",
    "end": "966470"
  },
  {
    "text": "look at our front-end to start so instead of having our lambda our main",
    "start": "966470",
    "end": "971810"
  },
  {
    "text": "lambda function here get triggered by an object getting written here we instead",
    "start": "971810",
    "end": "977240"
  },
  {
    "text": "trigger a wrapper function that wrapper function goes and passes the data from",
    "start": "977240",
    "end": "982340"
  },
  {
    "text": "the trigger and its context to some analyzing box which needs to have the",
    "start": "982340",
    "end": "987860"
  },
  {
    "text": "same permissions as our main lambda function would have here in order to read the data that has been written and",
    "start": "987860",
    "end": "995000"
  },
  {
    "text": "therefore triggered the event it can then go doing some an allow some analysis on that data to determine if",
    "start": "995000",
    "end": "1002050"
  },
  {
    "text": "there is any badness in there for some value of badness that we choose to define if there is considered by the",
    "start": "1002050",
    "end": "1010780"
  },
  {
    "text": "function to be no badness it can go invoking our main function as though its",
    "start": "1010780",
    "end": "1017350"
  },
  {
    "text": "are being called by the event from our bucket it can pass that context along",
    "start": "1017350",
    "end": "1022870"
  },
  {
    "text": "with it and then our main function can just execute as it ordinarily would",
    "start": "1022870",
    "end": "1028579"
  },
  {
    "text": "so things that we need to look at and what we can potentially do we can either",
    "start": "1028579",
    "end": "1034409"
  },
  {
    "start": "1029000",
    "end": "1029000"
  },
  {
    "text": "do this checking synchronously or asynchronously we may want to do it asynchronously if the performance of our",
    "start": "1034409",
    "end": "1040949"
  },
  {
    "text": "lambda function is critical normally we would choose to do it synchronously so that our main lambda function only gets",
    "start": "1040949",
    "end": "1048120"
  },
  {
    "text": "called after the payload has been scanned for potential badness otherwise",
    "start": "1048120",
    "end": "1053909"
  },
  {
    "text": "we would wind up having an execution path potentially doing things with badness that we would need to trap and",
    "start": "1053909",
    "end": "1060830"
  },
  {
    "text": "undo and well prevention is always better than cure put it that way we",
    "start": "1060830",
    "end": "1067980"
  },
  {
    "text": "could do things around machine learning to determine what kind of usage patterns we were seeing of our lambda function",
    "start": "1067980",
    "end": "1074070"
  },
  {
    "text": "there may be interesting things minor below Matt about the behavior of potential threat actors obviously we can",
    "start": "1074070",
    "end": "1081450"
  },
  {
    "text": "use traditional techniques to go looking for malware in our payloads and we can",
    "start": "1081450",
    "end": "1086850"
  },
  {
    "text": "also go looking for the same kinds of threats that our whaff does in terms of doing things like cross-site scripting",
    "start": "1086850",
    "end": "1093360"
  },
  {
    "text": "and SQL injection a friend of mine when I showed him this he actually he",
    "start": "1093360",
    "end": "1098909"
  },
  {
    "text": "actually referred to it as being wack for the API so people when when they",
    "start": "1098909",
    "end": "1107639"
  },
  {
    "text": "were talking to alert logic about this we're saying SQL injection 2017 yeah",
    "start": "1107639",
    "end": "1113330"
  },
  {
    "text": "sort of banging rocks trying to make fire turns out from a lot it turns out",
    "start": "1113330",
    "end": "1120870"
  },
  {
    "text": "from alert logic stats doing all their threat intelligence and modeling that they do that back in 2016 they were",
    "start": "1120870",
    "end": "1129000"
  },
  {
    "text": "seeing an awful lot of SQL injection still about 39 percent of the malware",
    "start": "1129000",
    "end": "1134549"
  },
  {
    "text": "they were looking at was of this nature so it's still out there it still needs",
    "start": "1134549",
    "end": "1140039"
  },
  {
    "text": "stopping there are still people not reading the OWASP top ten either that or",
    "start": "1140039",
    "end": "1145889"
  },
  {
    "text": "bad guys are still banging rocks trying to make fire while while the defenders",
    "start": "1145889",
    "end": "1152490"
  },
  {
    "text": "of good infrastructures are sitting there flicking a Zippo or something",
    "start": "1152490",
    "end": "1157780"
  },
  {
    "text": "that's it that is a tax so let us take a",
    "start": "1157780",
    "end": "1163040"
  },
  {
    "text": "look at an example API call but logic crafted up so if you actually decompose",
    "start": "1163040",
    "end": "1170590"
  },
  {
    "text": "an AWS API call extract it out of the cig v4 framework you can why not getting",
    "start": "1170590",
    "end": "1177440"
  },
  {
    "text": "something like this this all looks reasonably fine although this is all",
    "start": "1177440",
    "end": "1183710"
  },
  {
    "text": "rather opaque if you take that and you base64 decode it",
    "start": "1183710",
    "end": "1189970"
  },
  {
    "text": "oops we got an SQL injection so what can we actually do to go looking for stuff",
    "start": "1189970",
    "end": "1197420"
  },
  {
    "text": "like this I mean it doesn't necessarily have all the one equals zero stuff that",
    "start": "1197420",
    "end": "1202520"
  },
  {
    "text": "you typically get in SQL injection attacks so what can we actually do here",
    "start": "1202520",
    "end": "1208370"
  },
  {
    "text": "to go looking at this and alert logic went and borrowed bits out of their analysis engine and built a little",
    "start": "1208370",
    "end": "1217790"
  },
  {
    "text": "scratch box here this is so that this is a lab environment that they put together where they're essentially using using",
    "start": "1217790",
    "end": "1226220"
  },
  {
    "text": "this using this architectural pattern for looking for SQL injection in people",
    "start": "1226220",
    "end": "1231920"
  },
  {
    "text": "trying to go logging into a little web site enter and also get hold of Cognito",
    "start": "1231920",
    "end": "1238760"
  },
  {
    "text": "creds so the actual wrapper function that they use is just this little bit of",
    "start": "1238760",
    "end": "1246380"
  },
  {
    "start": "1241000",
    "end": "1241000"
  },
  {
    "text": "Python it's not hugely complicated it just picks a handle or else throws it off to the analyzer sees if while it",
    "start": "1246380",
    "end": "1253730"
  },
  {
    "text": "gets back is a is a thumbs-up or a thumbs-down and gos calling our main function if the thumbs up comes back not",
    "start": "1253730",
    "end": "1260570"
  },
  {
    "text": "a complicated piece of code and if they wind up using a proper set of logging",
    "start": "1260570",
    "end": "1268040"
  },
  {
    "start": "1262000",
    "end": "1262000"
  },
  {
    "text": "credentials they wind up getting in if they wind up using gum if they why not",
    "start": "1268040",
    "end": "1275270"
  },
  {
    "text": "trying to do something mischievous here then they wind up getting thrown out and",
    "start": "1275270",
    "end": "1280810"
  },
  {
    "text": "yeah engineer can't spell",
    "start": "1280810",
    "end": "1284980"
  },
  {
    "text": "now that's the front end in terms of wrapping our lambda function let's look",
    "start": "1286050",
    "end": "1291630"
  },
  {
    "text": "at what we can do with the back so here we are with our lambda function",
    "start": "1291630",
    "end": "1296640"
  },
  {
    "start": "1292000",
    "end": "1292000"
  },
  {
    "text": "executing in its role making an API call to an API endpoint what fun can we have",
    "start": "1296640",
    "end": "1302880"
  },
  {
    "text": "here how can we actually do some useful things what we want to actually do is",
    "start": "1302880",
    "end": "1308960"
  },
  {
    "text": "use our API gateway as a proxy so we want to make our lambda function think",
    "start": "1308960",
    "end": "1314970"
  },
  {
    "text": "that our API gateway is actually our API endpoint we can get logs out of it which",
    "start": "1314970",
    "end": "1321290"
  },
  {
    "text": "it's something that we something that is a fact that we don't talk about a great",
    "start": "1321290",
    "end": "1327030"
  },
  {
    "text": "deal is that not every AWS service intrinsically has cloud has Cloud trail",
    "start": "1327030",
    "end": "1332550"
  },
  {
    "text": "integration all the ones that are released to production do it's a thing",
    "start": "1332550",
    "end": "1337740"
  },
  {
    "text": "that comes along very quickly if it's a service that's in preview as an enhancement before it goes to production",
    "start": "1337740",
    "end": "1343280"
  },
  {
    "text": "but when we've got really newly released services not everything can do cloud",
    "start": "1343280",
    "end": "1348600"
  },
  {
    "text": "trails straight out of the box so one of the things that you can do with API gateway is actually get decent logging",
    "start": "1348600",
    "end": "1354570"
  },
  {
    "text": "out of it so if you're using some of our brand-new services that may not have Cloud Trail integration doing this is",
    "start": "1354570",
    "end": "1361830"
  },
  {
    "text": "not a bad thing to do anyway API gateways supports sig v4 straight",
    "start": "1361830",
    "end": "1367290"
  },
  {
    "text": "out the box so we immediately have the ability to make our API gateway pretend",
    "start": "1367290",
    "end": "1373590"
  },
  {
    "text": "to be an API endpoint but now how do we convince our lambda function without",
    "start": "1373590",
    "end": "1378900"
  },
  {
    "text": "getting too messy modifying our code to use this instead of the real endpoint",
    "start": "1378900",
    "end": "1386420"
  },
  {
    "start": "1385000",
    "end": "1385000"
  },
  {
    "text": "inside the SDK for Java and Python at least",
    "start": "1386750",
    "end": "1392990"
  },
  {
    "text": "there is a file and you'll see the URL for it later that actually its sole",
    "start": "1392990",
    "end": "1400350"
  },
  {
    "text": "purpose is to make mappings between the names that the endpoints have for",
    "start": "1400350",
    "end": "1406080"
  },
  {
    "text": "specific services that you that are the names you call in your API calls and",
    "start": "1406080",
    "end": "1411210"
  },
  {
    "text": "they're fully qualified dns domain names that's all that this file does so how",
    "start": "1411210",
    "end": "1417120"
  },
  {
    "text": "about you take this file in the SD okay that underpins your lambda",
    "start": "1417120",
    "end": "1423150"
  },
  {
    "text": "environment and you tweak it so instead of pointing to the real end point it",
    "start": "1423150",
    "end": "1429000"
  },
  {
    "text": "points to where it points the Gateway that you've stood up you can do that",
    "start": "1429000",
    "end": "1434390"
  },
  {
    "start": "1433000",
    "end": "1433000"
  },
  {
    "text": "so obviously you need to make your lambda function a little bit two-stage",
    "start": "1434390",
    "end": "1439530"
  },
  {
    "text": "in that it needs to ensure first of all that that hacks in place and you're now talking to your gateways rather than the",
    "start": "1439530",
    "end": "1445620"
  },
  {
    "text": "real ones rather than the real endpoints but then you just check that and invoke your real function so we've been talking",
    "start": "1445620",
    "end": "1455250"
  },
  {
    "text": "about doing this for lambda functions calling API gateways how about anything",
    "start": "1455250",
    "end": "1460800"
  },
  {
    "text": "calling API gateways and API endpoints can do that and here's a little",
    "start": "1460800",
    "end": "1466440"
  },
  {
    "start": "1465000",
    "end": "1465000"
  },
  {
    "text": "architecture so if we've got our client whatever it may be we hack its SDK these",
    "start": "1466440",
    "end": "1476250"
  },
  {
    "text": "are the file names as to where you'll find that mapping file in boto the Pisan",
    "start": "1476250",
    "end": "1482160"
  },
  {
    "text": "SDK and also in the Java SDK I look through the JavaScript SDK and I didn't",
    "start": "1482160",
    "end": "1490470"
  },
  {
    "text": "actually find a file quite like this it's more distributed across the different API modules for the individual",
    "start": "1490470",
    "end": "1497910"
  },
  {
    "text": "services so there would be a bit more hacking to do but it's there it can be",
    "start": "1497910",
    "end": "1504030"
  },
  {
    "text": "done the other thing to bear in mind is that when you actually go standing up API gateways they intrinsically wound up",
    "start": "1504030",
    "end": "1512820"
  },
  {
    "text": "getting themselves an HTTP cert key pair when you stand them up those are",
    "start": "1512820",
    "end": "1519780"
  },
  {
    "text": "themselves also rooted in Amazon AWS comm so this means that unless you've",
    "start": "1519780",
    "end": "1526710"
  },
  {
    "text": "actually been using this SDK already pointing to the real API endpoint you",
    "start": "1526710",
    "end": "1534060"
  },
  {
    "text": "shouldn't have any trouble with DNS issues or certificate pinning or any of",
    "start": "1534060",
    "end": "1540570"
  },
  {
    "text": "the appropriate security things that ask tile stood up to protect the endpoint so",
    "start": "1540570",
    "end": "1547380"
  },
  {
    "text": "set your API gateway up to use specifically for have it decompose",
    "start": "1547380",
    "end": "1553560"
  },
  {
    "text": "or API call in all honesty while you can do a lot of subtle and sophisticated",
    "start": "1553560",
    "end": "1558840"
  },
  {
    "text": "things in API gateway I find that unless",
    "start": "1558840",
    "end": "1564060"
  },
  {
    "text": "you're actually building things in a swagger file and importing that it can",
    "start": "1564060",
    "end": "1570030"
  },
  {
    "text": "be easy to tie yourself in a bit of a knot with it so I would actually suggest",
    "start": "1570030",
    "end": "1575460"
  },
  {
    "text": "that unless you've unless you want to go building your API in swagger to begin with this is just the way out this is",
    "start": "1575460",
    "end": "1581550"
  },
  {
    "text": "just the way my brain works then it's easiest to do as little modification of",
    "start": "1581550",
    "end": "1587970"
  },
  {
    "text": "your calls in your API gateway as possible and pass things over HTTP which",
    "start": "1587970",
    "end": "1595380"
  },
  {
    "text": "is standard out box to your lambda function so your lambda function is",
    "start": "1595380",
    "end": "1601490"
  },
  {
    "text": "running in a cross account role so this little wrapper around here is a separate",
    "start": "1601490",
    "end": "1607380"
  },
  {
    "text": "AWS account and there are reasons why we do this which again get covered in the",
    "start": "1607380",
    "end": "1614520"
  },
  {
    "text": "cross account and mandatory access control presentation so we have an",
    "start": "1614520",
    "end": "1620040"
  },
  {
    "text": "interesting split horizon here because we've got our user out here who's making",
    "start": "1620040",
    "end": "1626430"
  },
  {
    "text": "call into our gateway here and is known by this account here but the call across",
    "start": "1626430",
    "end": "1632880"
  },
  {
    "text": "to the account here that has the real resources in it's actually being made by our lambda function not by our user so",
    "start": "1632880",
    "end": "1639840"
  },
  {
    "text": "we have a split horizon ownership handoff in our lambda function or we can if we want to and you can do interesting",
    "start": "1639840",
    "end": "1646110"
  },
  {
    "text": "things with this but let's not get ahead of ourselves we have our cross account",
    "start": "1646110",
    "end": "1651570"
  },
  {
    "text": "roles we can make that typically be most permissions associated with the service",
    "start": "1651570",
    "end": "1657560"
  },
  {
    "text": "we go having our lambda function make a real API call to the real API endpoint",
    "start": "1657560",
    "end": "1665310"
  },
  {
    "text": "and then things proceed as normal so things you can do with this so we've got",
    "start": "1665310",
    "end": "1673860"
  },
  {
    "start": "1670000",
    "end": "1670000"
  },
  {
    "text": "a gem we've got a general architecture let's actually see what we can do to put it to use now I like config rules I",
    "start": "1673860",
    "end": "1682580"
  },
  {
    "text": "spoke about them a little bit yesterday the idea is that if what while I am can give you the same",
    "start": "1682580",
    "end": "1692250"
  },
  {
    "text": "kinds of permission constraints as Linux are back can there are some things you",
    "start": "1692250",
    "end": "1698309"
  },
  {
    "text": "might want to enforce that I am Kant intrinsically enforce so for example",
    "start": "1698309",
    "end": "1703890"
  },
  {
    "text": "while I am can constrain who can in whatever circumstances go creating an",
    "start": "1703890",
    "end": "1710760"
  },
  {
    "text": "EBS volume in whatever in whatever environment they can't let a second--",
    "start": "1710760",
    "end": "1718440"
  },
  {
    "text": "actually insist that that that EBS volume is encrypted using kms so if you",
    "start": "1718440",
    "end": "1725280"
  },
  {
    "text": "have a policy that requires that your EBS volumes be encrypted by kms you'd have to have a config rules element a",
    "start": "1725280",
    "end": "1733410"
  },
  {
    "text": "lambda function in config rules that would when the event happens of creating your EBS volume say that EBS volume",
    "start": "1733410",
    "end": "1740730"
  },
  {
    "text": "isn't encrypted I'm either going to delete it or I'm going too far off an SNS topic to appeal to a Thark to a",
    "start": "1740730",
    "end": "1747990"
  },
  {
    "text": "higher authority to deal with the problem in this case you could actually",
    "start": "1747990",
    "end": "1754550"
  },
  {
    "text": "decompose the API call which is a query based URL rather than rather than a",
    "start": "1754550",
    "end": "1761910"
  },
  {
    "text": "strictly restful api well it is strictly restful but it puts a lot of stuff in",
    "start": "1761910",
    "end": "1767970"
  },
  {
    "text": "one URL call you could use some URL parse to take that API call apart",
    "start": "1767970",
    "end": "1774110"
  },
  {
    "text": "detects that you're trying to create an EBS volume see that there is no key",
    "start": "1774110",
    "end": "1779730"
  },
  {
    "text": "argument in there therefore the volume isn't encrypted and go that's against",
    "start": "1779730",
    "end": "1785460"
  },
  {
    "text": "policy do to go away all of a sudden your volume hasn't been created",
    "start": "1785460",
    "end": "1791870"
  },
  {
    "text": "admittedly you have to write code for this which can get complicated if you've",
    "start": "1791870",
    "end": "1797820"
  },
  {
    "text": "got a lot of API calls that you want to filter on in extremity could turn into",
    "start": "1797820",
    "end": "1803820"
  },
  {
    "text": "something as complicated as an SE linux profile and I'm trying to think about",
    "start": "1803820",
    "end": "1809850"
  },
  {
    "text": "how this how it could sensibly grow while still remaining tractable because",
    "start": "1809850",
    "end": "1814980"
  },
  {
    "text": "of course we have an awful lot of API calls up to AWS especially when you start thinking of",
    "start": "1814980",
    "end": "1820550"
  },
  {
    "text": "the permutations and combinations of arguments that can be applied to them so this is something I'm still thinking about for those services another example",
    "start": "1820550",
    "end": "1830420"
  },
  {
    "start": "1827000",
    "end": "1827000"
  },
  {
    "text": "so for those services that you can't intrinsically do source at source IP address filtering on at the moment this",
    "start": "1830420",
    "end": "1837710"
  },
  {
    "text": "is a way of doing it Gus you're filtering here on this source IP address",
    "start": "1837710",
    "end": "1844520"
  },
  {
    "text": "here this out here only needs to know that you're coming from an AWS IP",
    "start": "1844520",
    "end": "1854360"
  },
  {
    "text": "address and in fact you don't actually need to filter on the IP address back here because only things with this role",
    "start": "1854360",
    "end": "1861230"
  },
  {
    "text": "can go making that API call in the first place once you've set them up appropriately here so you wind up",
    "start": "1861230",
    "end": "1867470"
  },
  {
    "text": "actually using the role which our guide out there doesn't have in order to act",
    "start": "1867470",
    "end": "1872750"
  },
  {
    "text": "as our surrogate of a source IP filter and so you kind of have a transitive",
    "start": "1872750",
    "end": "1877820"
  },
  {
    "text": "trust between the resource area at the resource account here and the lambda function here again it can be made to",
    "start": "1877820",
    "end": "1887150"
  },
  {
    "start": "1887000",
    "end": "1887000"
  },
  {
    "text": "work sqs is something that um it's one",
    "start": "1887150",
    "end": "1892610"
  },
  {
    "text": "of the first services we introduced actually gets a lot of use but I do sometimes why not talking to customers",
    "start": "1892610",
    "end": "1900020"
  },
  {
    "text": "who have a conservative view of security often in highly regulated or controlled",
    "start": "1900020",
    "end": "1908270"
  },
  {
    "text": "industries and they think wouldn't it be nice if sqs was encrypted this is a way",
    "start": "1908270",
    "end": "1915230"
  },
  {
    "text": "to do it automatically so you could have your lambda function have permission to",
    "start": "1915230",
    "end": "1920450"
  },
  {
    "text": "encrypt your payload for the kms key only then does it actually wind up going",
    "start": "1920450",
    "end": "1926780"
  },
  {
    "text": "into SQS and you could have some other thing consuming the queue like an ec2",
    "start": "1926780",
    "end": "1932720"
  },
  {
    "text": "instance have a decrypt grant on the same key so out here you just wind up",
    "start": "1932720",
    "end": "1940010"
  },
  {
    "text": "making an sqs call this picks up that it's an sqs call encrypts it proxies it",
    "start": "1940010",
    "end": "1946480"
  },
  {
    "text": "transparently to you and this is one a friend of mine in Germany came up with",
    "start": "1946480",
    "end": "1954410"
  },
  {
    "start": "1950000",
    "end": "1950000"
  },
  {
    "text": "I've worked with customers who like to have workflow systems originally that",
    "start": "1954410",
    "end": "1960890"
  },
  {
    "text": "the customer I'm particularly thinking of they wanted to do this because some",
    "start": "1960890",
    "end": "1966140"
  },
  {
    "text": "there's a certain kind of software engineer whose approach to performance is to run everything on a c48 x-large",
    "start": "1966140",
    "end": "1974410"
  },
  {
    "text": "they had some of these guys and they wanted to ensure even though they're a",
    "start": "1974410",
    "end": "1979820"
  },
  {
    "text": "global company that their engineers could only find could only fire up",
    "start": "1979820",
    "end": "1985130"
  },
  {
    "text": "certain instance types if they had management approval so they spent a very",
    "start": "1985130",
    "end": "1991880"
  },
  {
    "text": "large amount of time effort and money with a system integrator to produce",
    "start": "1991880",
    "end": "1997000"
  },
  {
    "text": "something that was effectively a cloud",
    "start": "1997000",
    "end": "2002170"
  },
  {
    "text": "gateway stand-alone on their own premise that would go filtering API calls and",
    "start": "2002170",
    "end": "2008310"
  },
  {
    "text": "engage a workflow whenever it saw something like and it particular instance type being requested again you",
    "start": "2008310",
    "end": "2016390"
  },
  {
    "text": "can have the this is only the beginnings of a system it's not it's not a full integration but if you had some workflow",
    "start": "2016390",
    "end": "2023830"
  },
  {
    "text": "engine out here whereby management could pre-approve an engineer to fire up a",
    "start": "2023830",
    "end": "2030430"
  },
  {
    "text": "particular instance type they could put some kind of signed message into a queue giving giving that approval and our",
    "start": "2030430",
    "end": "2038440"
  },
  {
    "text": "lambda function could check for the existence of such a message and consume",
    "start": "2038440",
    "end": "2043600"
  },
  {
    "text": "it and only at that point allow the API call to succeed otherwise hello 403",
    "start": "2043600",
    "end": "2050260"
  },
  {
    "text": "again so it's potentially a touch point",
    "start": "2050260",
    "end": "2055750"
  },
  {
    "text": "whereby workflow systems could be integrated into an API call mechanism and and the final case as previously",
    "start": "2055750",
    "end": "2064600"
  },
  {
    "start": "2061000",
    "end": "2061000"
  },
  {
    "text": "mentioned is rather than just using just just wrapping lambda functions and",
    "start": "2064600",
    "end": "2070659"
  },
  {
    "text": "building Raph for the lambda API you could actually generalize this into",
    "start": "2070660",
    "end": "2075700"
  },
  {
    "text": "being woth for all the AWS api's scanning for badness in whatever form",
    "start": "2075700",
    "end": "2082120"
  },
  {
    "text": "you think badness may take and this is something bearing in mind",
    "start": "2082120",
    "end": "2088770"
  },
  {
    "text": "cyber essentials requires anti-malware as one of the five constraints it",
    "start": "2088770",
    "end": "2095100"
  },
  {
    "text": "imposes this could be a way of doing it at an API level in terms of what you",
    "start": "2095100",
    "end": "2101880"
  },
  {
    "start": "2100000",
    "end": "2100000"
  },
  {
    "text": "actually wind up doing with your lambda function and how you trigger it these are all the services that",
    "start": "2101880",
    "end": "2108390"
  },
  {
    "text": "currently have the means of calling lambda functions so the scope of what",
    "start": "2108390",
    "end": "2113580"
  },
  {
    "text": "you can do is pretty large it's a case of user imagination as to what you can",
    "start": "2113580",
    "end": "2120090"
  },
  {
    "text": "actually do here so just to wrap this piece of presentation up we've got an",
    "start": "2120090",
    "end": "2126150"
  },
  {
    "text": "interesting new tool for our toolbox in terms of being able to pre-filter API",
    "start": "2126150",
    "end": "2131340"
  },
  {
    "text": "calls and wrap lambda functions obviously I am is your first port of",
    "start": "2131340",
    "end": "2136560"
  },
  {
    "start": "2134000",
    "end": "2134000"
  },
  {
    "text": "call for limiting who can make API calls in the first place and the contexts in which they can API the API endpoints",
    "start": "2136560",
    "end": "2144660"
  },
  {
    "text": "we've got them reasonably sorted we look after them very carefully and you have",
    "start": "2144660",
    "end": "2150750"
  },
  {
    "text": "the means of using lambda in API call flow to do things like split horizon API",
    "start": "2150750",
    "end": "2157770"
  },
  {
    "text": "API call ownership changes and generally",
    "start": "2157770",
    "end": "2162780"
  },
  {
    "text": "proxying our API endpoints when you stick an API gateway in front of it I'm",
    "start": "2162780",
    "end": "2169950"
  },
  {
    "text": "interested to know other ideas you have replying this little architectural",
    "start": "2169950",
    "end": "2175830"
  },
  {
    "text": "pattern and very interested to engage in discussion as time passes if you look to",
    "start": "2175830",
    "end": "2182880"
  },
  {
    "text": "use this and not Steve Jobs but I happen",
    "start": "2182880",
    "end": "2189930"
  },
  {
    "text": "to like this approach to doing these things I have a fixation with mandatory",
    "start": "2189930",
    "end": "2195870"
  },
  {
    "text": "access control so when you look at the",
    "start": "2195870",
    "end": "2203430"
  },
  {
    "text": "AWS API it is classic Unix discretionary access control you've got this all you've got",
    "start": "2203430",
    "end": "2209580"
  },
  {
    "text": "this all-powerful entity called route that can do everything and completely blast through policy this is getting",
    "start": "2209580",
    "end": "2216810"
  },
  {
    "text": "addressed to a reasonable degree starting with with AWS organizations which we",
    "start": "2216810",
    "end": "2225730"
  },
  {
    "text": "announced at reinvent this is something I'm looking to build into this piece of",
    "start": "2225730",
    "end": "2230920"
  },
  {
    "text": "work but for a while in terms of an in account mandatory access control",
    "start": "2230920",
    "end": "2235950"
  },
  {
    "text": "environment we've had glazyev vault lock so what can we actually do to take route",
    "start": "2235950",
    "end": "2244030"
  },
  {
    "text": "away we can't actually get rid of it completely without a lot of work from I",
    "start": "2244030",
    "end": "2250150"
  },
  {
    "text": "am engineering but what if we were actually able to completely conceal the",
    "start": "2250150",
    "end": "2255790"
  },
  {
    "text": "nature of an AWS account from its users well using the architecture we've just",
    "start": "2255790",
    "end": "2261730"
  },
  {
    "text": "come up with we pretty much can plus there's an extra bit on the backend",
    "start": "2261730",
    "end": "2266800"
  },
  {
    "text": "my pal Bertram in Germany came up with this idea for actually filtering logs in",
    "start": "2266800",
    "end": "2276130"
  },
  {
    "text": "order to meet compliance requirements of German intellect and data protection law",
    "start": "2276130",
    "end": "2283510"
  },
  {
    "text": "the idea being here that if you have your cloud trail logs for example let go",
    "start": "2283510",
    "end": "2288580"
  },
  {
    "text": "landing in an s3 buckets your cloud trail logs contain a bunch of personally",
    "start": "2288580",
    "end": "2293980"
  },
  {
    "text": "identifiable information such as the details of the user that made the call",
    "start": "2293980",
    "end": "2299500"
  },
  {
    "text": "plus also in German law the tuple of a source IP address and a timestamp is",
    "start": "2299500",
    "end": "2306520"
  },
  {
    "text": "also considered to be personally identifiable information yes I know",
    "start": "2306520",
    "end": "2312160"
  },
  {
    "text": "so Bertram decided to write himself a lambda function whereby when a lump of",
    "start": "2312160",
    "end": "2319180"
  },
  {
    "text": "Cloud trail record lands in a bucket it gets picked up has the PII in the form",
    "start": "2319180",
    "end": "2326109"
  },
  {
    "text": "of the username and the IP address and timestamp redacted start out and then",
    "start": "2326109",
    "end": "2333099"
  },
  {
    "text": "goes stores it in another bucket reason why you do this in Germany is you are",
    "start": "2333099",
    "end": "2338890"
  },
  {
    "text": "allowed to retain the redacted version for as long as you like in terms of your",
    "start": "2338890",
    "end": "2345339"
  },
  {
    "text": "regular long-lived records this with the PII in you have to get rid of",
    "start": "2345339",
    "end": "2352430"
  },
  {
    "text": "a period that isn't to my understanding well defined in law I'm not a lawyer by",
    "start": "2352430",
    "end": "2359960"
  },
  {
    "text": "the way much less an international lawyer with knowledge of German law but you have to effectively throw this away",
    "start": "2359960",
    "end": "2365990"
  },
  {
    "text": "so Bertram just sets a an s3 lifecycle policy that deletes the contents of this",
    "start": "2365990",
    "end": "2373220"
  },
  {
    "text": "bucket if an object happens to be older than 31 days so if we consider that as",
    "start": "2373220",
    "end": "2380570"
  },
  {
    "text": "our back end we can use this we can use this model for redacting more than just",
    "start": "2380570",
    "end": "2387020"
  },
  {
    "text": "cloud tray logs we can retract or we can redact all the logs associated with an",
    "start": "2387020",
    "end": "2393290"
  },
  {
    "text": "AWS account in fact when I went when I'm talking about redacting here I'm not",
    "start": "2393290",
    "end": "2399020"
  },
  {
    "text": "talking about redacting the PII in the logs I'm talking about redacting the account ID and potentially replacing it",
    "start": "2399020",
    "end": "2406700"
  },
  {
    "text": "with something else because we want to see about hiding our account and it",
    "start": "2406700",
    "end": "2412970"
  },
  {
    "text": "turns out that if we nest our API proxies as we showed earlier we can",
    "start": "2412970",
    "end": "2419750"
  },
  {
    "text": "actually do that and get this big complicated diagram so what we're doing",
    "start": "2419750",
    "end": "2425690"
  },
  {
    "text": "is we're using our split horizon so our guy out here goes making his API call",
    "start": "2425690",
    "end": "2432410"
  },
  {
    "text": "goes through this lambda function he's making his API call against the account ID of this account this lambda",
    "start": "2432410",
    "end": "2439700"
  },
  {
    "text": "function is rewriting that API call and making it against the account ID of this",
    "start": "2439700",
    "end": "2445310"
  },
  {
    "text": "account so when the response comes back it need the lambda function needs to rewrite it before sending it back out",
    "start": "2445310",
    "end": "2451430"
  },
  {
    "text": "through the API gateway to our customer now if you do this in a two-stage fashion and you also apply Bertram's",
    "start": "2451430",
    "end": "2459890"
  },
  {
    "text": "function here on the backend then only people who have the ability to look",
    "start": "2459890",
    "end": "2466280"
  },
  {
    "text": "inside this red oval can determine what the true account ID of the account",
    "start": "2466280",
    "end": "2473150"
  },
  {
    "text": "holding our resources here is because you're rewriting here to this account",
    "start": "2473150",
    "end": "2480200"
  },
  {
    "text": "but is the only thing that has knowledge of this account I you're rewriting here which has",
    "start": "2480200",
    "end": "2487310"
  },
  {
    "text": "knowledge of the real account ID to this account that doesn't this is where you're this is where your audit and",
    "start": "2487310",
    "end": "2494240"
  },
  {
    "text": "logging team would go looking and this turns out to be completely hidden so",
    "start": "2494240",
    "end": "2500180"
  },
  {
    "text": "while we have the ability currently to",
    "start": "2500180",
    "end": "2505490"
  },
  {
    "text": "for customers to put route beyond use by assigning an MFA token and then",
    "start": "2505490",
    "end": "2511700"
  },
  {
    "text": "destroying the token normally use a soft token rather than a hard token for this",
    "start": "2511700",
    "end": "2516940"
  },
  {
    "text": "we can now actually completely conceal an account ID so okay root still exists",
    "start": "2516940",
    "end": "2525260"
  },
  {
    "text": "but root on what account nobody outside this circle knows food for thought I",
    "start": "2525260",
    "end": "2532130"
  },
  {
    "text": "hope so same thing here in text so that the presentation stands alone without me",
    "start": "2532130",
    "end": "2539180"
  },
  {
    "start": "2533000",
    "end": "2533000"
  },
  {
    "text": "waffling over it but because we're able to conceal the account and conceal all",
    "start": "2539180",
    "end": "2546589"
  },
  {
    "text": "the policies on it and essentially take away root even from the ability to go",
    "start": "2546589",
    "end": "2552589"
  },
  {
    "text": "making calls to the support line in terms of so what's the account ID sir I don't know then this again gives us",
    "start": "2552589",
    "end": "2561500"
  },
  {
    "text": "mandatory access control now there was an issue I came up with where an ec2",
    "start": "2561500",
    "end": "2569510"
  },
  {
    "text": "instance inside that concealed account can still go determining what it's some",
    "start": "2569510",
    "end": "2575570"
  },
  {
    "text": "account ID is by making calls to the ec2 metadata service but if you actually set",
    "start": "2575570",
    "end": "2584150"
  },
  {
    "text": "the if you actually limit the ec2 instances that can be stood up to being",
    "start": "2584150",
    "end": "2590080"
  },
  {
    "text": "instances of SELinux that have a policy on them under mandatory access control that uses the host-based firewall to",
    "start": "2590080",
    "end": "2599000"
  },
  {
    "text": "block access to the metadata service that closes that door and I haven't yet",
    "start": "2599000",
    "end": "2605270"
  },
  {
    "text": "thought of another way around it so so this is all research in progress but I wanted to give you a little look at it",
    "start": "2605270",
    "end": "2612290"
  },
  {
    "text": "in advance and that's me",
    "start": "2612290",
    "end": "2618310"
  },
  {
    "text": "yeah I have one question I've worked in past company I set up everything AWS I",
    "start": "2622320",
    "end": "2627790"
  },
  {
    "text": "has a root account I left the company my still I can access everything of the system if no so my thing if it is not a",
    "start": "2627790",
    "end": "2639100"
  },
  {
    "text": "device if it is on premises I cannot access other systems but it W is I still",
    "start": "2639100",
    "end": "2644350"
  },
  {
    "text": "can actually everything of the past you might be surprised I wound up working in",
    "start": "2644350",
    "end": "2650050"
  },
  {
    "text": "escalation back when I was at Sun Microsystems where it actually wound up",
    "start": "2650050",
    "end": "2658210"
  },
  {
    "text": "being a criminal case because the person who retained access to root since the",
    "start": "2658210",
    "end": "2664450"
  },
  {
    "text": "company hadn't gone rotating the credentials they wound up holding them to ransom but it's a thing that a",
    "start": "2664450",
    "end": "2672180"
  },
  {
    "text": "surprising number of people still when when someone with significant access",
    "start": "2672180",
    "end": "2677470"
  },
  {
    "text": "permissions leaves a company a surprising number of organizations even",
    "start": "2677470",
    "end": "2682630"
  },
  {
    "text": "on-premise neglect to rotate their credentials so credential rotation in",
    "start": "2682630",
    "end": "2687790"
  },
  {
    "text": "the event of a privileged person leaving is something that should be done no",
    "start": "2687790",
    "end": "2692950"
  },
  {
    "text": "matter whether you're on Prem or in AWS and it can be done in either environment people just need to be on top of their",
    "start": "2692950",
    "end": "2701050"
  },
  {
    "text": "policies and procedures well maybe I get maybe I'll take another so I wanted the",
    "start": "2701050",
    "end": "2706060"
  },
  {
    "text": "organization to of them use agile when I create AWS so none of them have closed",
    "start": "2706060",
    "end": "2713440"
  },
  {
    "text": "my account for this cloud but I can't access their on-premises infrastructure",
    "start": "2713440",
    "end": "2718740"
  },
  {
    "text": "I'm not sure because that is not integrally their Active Directory or something like that because let's say my",
    "start": "2718740",
    "end": "2725290"
  },
  {
    "text": "email account or anything it is linked with Active Directory so they will close I can't access anything cloud is still I",
    "start": "2725290",
    "end": "2731920"
  },
  {
    "text": "can excel three company I would suggest in that case you be a good citizen and",
    "start": "2731920",
    "end": "2738760"
  },
  {
    "text": "tell them that they have forgotten to extend the scope of their policies and",
    "start": "2738760",
    "end": "2743890"
  },
  {
    "text": "controls to include their AWS environment my only concern like people",
    "start": "2743890",
    "end": "2749830"
  },
  {
    "text": "don't I mean the only thing I can see like there are lot of account a lot of things like your email you have SharePoint you",
    "start": "2749830",
    "end": "2757950"
  },
  {
    "start": "2754000",
    "end": "2754000"
  },
  {
    "text": "have AWS generally there are different different team who manage yeah so that",
    "start": "2757950",
    "end": "2764730"
  },
  {
    "text": "is the main point of security like maybe because in whenever I but it is not",
    "start": "2764730",
    "end": "2769770"
  },
  {
    "text": "centralized like this person have access to ten systems so I I found the main",
    "start": "2769770",
    "end": "2776190"
  },
  {
    "text": "security point is first basis they have like yeah they see this is something that my friends logic often talk about",
    "start": "2776190",
    "end": "2782520"
  },
  {
    "text": "in that they see a lot of organizations who are on top of their on-premise",
    "start": "2782520",
    "end": "2788400"
  },
  {
    "text": "security from the point of view of firewalls and anti-malware and data loss",
    "start": "2788400",
    "end": "2794400"
  },
  {
    "text": "prevention and so forth and they seem to think that a cloud environment magically",
    "start": "2794400",
    "end": "2800100"
  },
  {
    "text": "gives them all this capability and it doesn't even though we get appropriate",
    "start": "2800100",
    "end": "2806460"
  },
  {
    "text": "external certifications on the services that we make available to our customers",
    "start": "2806460",
    "end": "2812490"
  },
  {
    "text": "you still need to run and manage your cloud environment in an appropriate and",
    "start": "2812490",
    "end": "2818550"
  },
  {
    "text": "diligent way and you can build wildly non-compliant architectures out of compliant parts in a cloud environment",
    "start": "2818550",
    "end": "2824580"
  },
  {
    "text": "just as you can on premise so it sounds like the companies in question need to",
    "start": "2824580",
    "end": "2831650"
  },
  {
    "text": "that they it sounds like they have a blind spot and alert logic while I'm",
    "start": "2831650",
    "end": "2837090"
  },
  {
    "text": "taking words out their mouth a little bit they see this not infrequently sounds like I have a bit of a blind spot",
    "start": "2837090",
    "end": "2842940"
  },
  {
    "text": "about their cloud environments so as I said I would suggest you take some",
    "start": "2842940",
    "end": "2849210"
  },
  {
    "text": "citizenship but it take take your look earn your citizenship points and tell them that they need to extend the scope",
    "start": "2849210",
    "end": "2857870"
  },
  {
    "text": "last things are lastly like everywhere like essentially it is in ninety days or",
    "start": "2857870",
    "end": "2864360"
  },
  {
    "text": "one week one month pass for change policy it's not like AWS can also implement that by default that you need",
    "start": "2864360",
    "end": "2871080"
  },
  {
    "text": "to change your default password after certain it is already there but I have not put like after 68 will expire it you",
    "start": "2871080",
    "end": "2879090"
  },
  {
    "text": "you can set you can set that up in I am dead easy but not for Roo it doesn't apply to roof that's the",
    "start": "2879090",
    "end": "2885500"
  },
  {
    "text": "thing but you can set it up in I am dead easy we don't set it up by default because",
    "start": "2885500",
    "end": "2891470"
  },
  {
    "text": "it's not our place to tell our customers what their policy is it's an interesting",
    "start": "2891470",
    "end": "2905390"
  },
  {
    "text": "I'm not saying I agree with the guidance but it is an interesting thought piece around forcing people to change their",
    "start": "2905390",
    "end": "2911150"
  },
  {
    "text": "passwords every 90 days 60 days how many of us use the same password basically",
    "start": "2911150",
    "end": "2916340"
  },
  {
    "text": "six seven eight or you know you change it one character somewhere and actually",
    "start": "2916340",
    "end": "2921950"
  },
  {
    "text": "the CHD guidance delves into that somewhat talking about forcing people to change really us taking a position in",
    "start": "2921950",
    "end": "2929180"
  },
  {
    "text": "terms of what your based practice should be about your decisions yeah the tool is there we do work closely with",
    "start": "2929180",
    "end": "2935420"
  },
  {
    "text": "organizations like the Center for Internet Security to come up with recommended baselines for securing AWS",
    "start": "2935420",
    "end": "2941960"
  },
  {
    "text": "accounts but it's not something we do by default thank you as yeah we we take a",
    "start": "2941960",
    "end": "2951110"
  },
  {
    "text": "UNIX approach to security as with any other as with all other things by",
    "start": "2951110",
    "end": "2956170"
  },
  {
    "text": "trusting our customers to have better knowledge of their business than we do",
    "start": "2956170",
    "end": "2962619"
  }
]