[
  {
    "text": "hi my name is G mut I am an Enterprise",
    "start": "1400",
    "end": "4160"
  },
  {
    "text": "architect atws today I want to show you",
    "start": "4160",
    "end": "6680"
  },
  {
    "text": "how to create a Lambda layer to simplify",
    "start": "6680",
    "end": "8840"
  },
  {
    "text": "the implementation of web fre LDA",
    "start": "8840",
    "end": "10840"
  },
  {
    "text": "functions in the following demo I will",
    "start": "10840",
    "end": "13320"
  },
  {
    "text": "create a Lambda layer from AWS clell",
    "start": "13320",
    "end": "15759"
  },
  {
    "text": "then use it to connect to the polygon",
    "start": "15759",
    "end": "17520"
  },
  {
    "text": "POS side chain you should be able to",
    "start": "17520",
    "end": "20199"
  },
  {
    "text": "execute those instructions on a free",
    "start": "20199",
    "end": "21800"
  },
  {
    "text": "tier account let's get",
    "start": "21800",
    "end": "25160"
  },
  {
    "text": "started from the AWS console we first",
    "start": "25160",
    "end": "28160"
  },
  {
    "text": "make sure that we are connected to us",
    "start": "28160",
    "end": "30039"
  },
  {
    "text": "this one as some of the services we will",
    "start": "30039",
    "end": "31920"
  },
  {
    "text": "be using are only available in this",
    "start": "31920",
    "end": "34640"
  },
  {
    "text": "region we then open clarel in a new",
    "start": "34640",
    "end": "39160"
  },
  {
    "text": "tab clarel comes with python 3.9 already",
    "start": "42039",
    "end": "45520"
  },
  {
    "text": "installed we will stick to this version",
    "start": "45520",
    "end": "47719"
  },
  {
    "text": "to generate the Lambda layer containing",
    "start": "47719",
    "end": "49600"
  },
  {
    "text": "the web Free",
    "start": "49600",
    "end": "52198"
  },
  {
    "text": "Library we start by creating a virtual",
    "start": "53359",
    "end": "56199"
  },
  {
    "text": "environment and installing the web free",
    "start": "56199",
    "end": "58600"
  },
  {
    "text": "python package inside it",
    "start": "58600",
    "end": "61920"
  },
  {
    "text": "we see that the web free python package",
    "start": "72880",
    "end": "74920"
  },
  {
    "text": "and all its dependencies have been",
    "start": "74920",
    "end": "76439"
  },
  {
    "text": "installed inside the virtual",
    "start": "76439",
    "end": "79840"
  },
  {
    "text": "environment we can now copy those",
    "start": "80159",
    "end": "82479"
  },
  {
    "text": "packages inside the python folder and",
    "start": "82479",
    "end": "84560"
  },
  {
    "text": "compress",
    "start": "84560",
    "end": "85640"
  },
  {
    "text": "it when used inside the Lambda layer",
    "start": "85640",
    "end": "88600"
  },
  {
    "text": "this ZIP file will be automa ically",
    "start": "88600",
    "end": "90240"
  },
  {
    "text": "decompressed and mounted inside the",
    "start": "90240",
    "end": "92000"
  },
  {
    "text": "Lambda execution environment this is how",
    "start": "92000",
    "end": "94920"
  },
  {
    "text": "the Lambda function will be able to use",
    "start": "94920",
    "end": "96720"
  },
  {
    "text": "the web free",
    "start": "96720",
    "end": "98640"
  },
  {
    "text": "package the final step is to create the",
    "start": "98640",
    "end": "103200"
  },
  {
    "text": "layer now that the web free layer is",
    "start": "104719",
    "end": "107360"
  },
  {
    "text": "created we can create the Lambda",
    "start": "107360",
    "end": "109399"
  },
  {
    "text": "function on top of",
    "start": "109399",
    "end": "110880"
  },
  {
    "text": "it from the Lambda console we create a",
    "start": "110880",
    "end": "114119"
  },
  {
    "text": "new function we select python 3.9 for",
    "start": "114119",
    "end": "117640"
  },
  {
    "text": "the run time and x86 for the",
    "start": "117640",
    "end": "120719"
  },
  {
    "text": "architecture as those parameters",
    "start": "120719",
    "end": "122799"
  },
  {
    "text": "correspond to the environment where we",
    "start": "122799",
    "end": "124680"
  },
  {
    "text": "created the",
    "start": "124680",
    "end": "127360"
  },
  {
    "text": "layer now that the function is created",
    "start": "131239",
    "end": "134200"
  },
  {
    "text": "we can add the layer to its",
    "start": "134200",
    "end": "135560"
  },
  {
    "text": "configuration",
    "start": "135560",
    "end": "138560"
  },
  {
    "text": "the last thing we need before we can",
    "start": "151080",
    "end": "152599"
  },
  {
    "text": "start writing our web three function is",
    "start": "152599",
    "end": "154640"
  },
  {
    "text": "a web3 rpcn",
    "start": "154640",
    "end": "158000"
  },
  {
    "text": "point from the Amazon manag blockchain",
    "start": "158000",
    "end": "160599"
  },
  {
    "text": "console we see that we can use a polygon",
    "start": "160599",
    "end": "163319"
  },
  {
    "text": "POS and point let's write it",
    "start": "163319",
    "end": "166959"
  },
  {
    "text": "down to access this endpoint we will",
    "start": "166959",
    "end": "169840"
  },
  {
    "text": "need a token that we will pass as a URL",
    "start": "169840",
    "end": "172440"
  },
  {
    "text": "parameter let's generate the new token",
    "start": "172440",
    "end": "174879"
  },
  {
    "text": "accessor for the polygon Network",
    "start": "174879",
    "end": "179319"
  },
  {
    "text": "now that the token accessor is created",
    "start": "185720",
    "end": "188280"
  },
  {
    "text": "we can write down the corresponding",
    "start": "188280",
    "end": "191440"
  },
  {
    "text": "token we have now all we need to create",
    "start": "191440",
    "end": "194040"
  },
  {
    "text": "the RPC",
    "start": "194040",
    "end": "195480"
  },
  {
    "text": "endpoint let's switch back to the Lambda",
    "start": "195480",
    "end": "197840"
  },
  {
    "text": "function and record the endpoint as an",
    "start": "197840",
    "end": "200239"
  },
  {
    "text": "environment",
    "start": "200239",
    "end": "202879"
  },
  {
    "text": "variable for the name of the variable we",
    "start": "203840",
    "end": "206319"
  },
  {
    "text": "will use rpcn point and for its value",
    "start": "206319",
    "end": "209400"
  },
  {
    "text": "the and point with the token as a",
    "start": "209400",
    "end": "211360"
  },
  {
    "text": "billing token URL",
    "start": "211360",
    "end": "214480"
  },
  {
    "text": "parameter we can now write some web free",
    "start": "217159",
    "end": "219640"
  },
  {
    "text": "code to test our",
    "start": "219640",
    "end": "222480"
  },
  {
    "text": "setup this code uses the web Free",
    "start": "228680",
    "end": "231159"
  },
  {
    "text": "Library to connect to the endpoint and",
    "start": "231159",
    "end": "234000"
  },
  {
    "text": "to get the latest block",
    "start": "234000",
    "end": "236040"
  },
  {
    "text": "number it should not be used in a",
    "start": "236040",
    "end": "238079"
  },
  {
    "text": "production environment but illustrates",
    "start": "238079",
    "end": "240400"
  },
  {
    "text": "the fact that we can use the web Free",
    "start": "240400",
    "end": "242079"
  },
  {
    "text": "Library thanks to our web free",
    "start": "242079",
    "end": "245599"
  },
  {
    "text": "layer let's deploy and test our",
    "start": "245599",
    "end": "249959"
  },
  {
    "text": "code we see that the execution",
    "start": "261400",
    "end": "263759"
  },
  {
    "text": "successfully returned the last block",
    "start": "263759",
    "end": "267000"
  },
  {
    "text": "number we can now check that this",
    "start": "267000",
    "end": "269199"
  },
  {
    "text": "corresponds to the latest block number",
    "start": "269199",
    "end": "271000"
  },
  {
    "text": "on polygon",
    "start": "271000",
    "end": "273639"
  },
  {
    "text": "scan that's all I wanted to show you in",
    "start": "275199",
    "end": "277479"
  },
  {
    "text": "this video I hope you enjoyed it and",
    "start": "277479",
    "end": "279680"
  },
  {
    "text": "that you will experiment on your own",
    "start": "279680",
    "end": "281240"
  },
  {
    "text": "with web fre Lambda functions thanks for",
    "start": "281240",
    "end": "283800"
  },
  {
    "text": "watching",
    "start": "283800",
    "end": "286800"
  }
]