[
  {
    "start": "0",
    "end": "51000"
  },
  {
    "text": "Welcome to 'Back to Basics',\nI am Gerardo Estaba.",
    "start": "2999",
    "end": "7812"
  },
  {
    "text": "Today we're going to\ntalk about implementing",
    "start": "7812",
    "end": "9700"
  },
  {
    "text": "a strong identity foundation\nfor your internal users.",
    "start": "9700",
    "end": "13314"
  },
  {
    "text": "If we ever\nbuild a house,",
    "start": "13314",
    "end": "15315"
  },
  {
    "text": "we don't want it to crumble down\nafter a couple of years",
    "start": "15315",
    "end": "17805"
  },
  {
    "text": "for the lack of a \nstrong foundation.",
    "start": "17805",
    "end": "19735"
  },
  {
    "text": "The same applies to\nour cloud applications.",
    "start": "19735",
    "end": "22208"
  },
  {
    "text": "We might be starting small,\nbut over time",
    "start": "22208",
    "end": "24738"
  },
  {
    "text": "it is likely we're going to end up\nwith more of those applications.",
    "start": "24738",
    "end": "28361"
  },
  {
    "text": "We're going to grow them,\nwe're going to add features. ",
    "start": "28361",
    "end": "30432"
  },
  {
    "text": "So, it's likely we'll end up\nwith a couple of workloads",
    "start": "30432",
    "end": "33379"
  },
  {
    "text": "running across a\ncouple of those accounts.",
    "start": "33380",
    "end": "35419"
  },
  {
    "text": "So, it makes sense to start\nwith a strong foundation.",
    "start": "35419",
    "end": "38664"
  },
  {
    "text": "One of the most important foundations\nfor building in the cloud is identity.",
    "start": "38665",
    "end": "43560"
  },
  {
    "text": "So, today we're\ngoing to talk about",
    "start": "43560",
    "end": "45039"
  },
  {
    "text": "four of the most important\nprinciples of identity in the cloud.",
    "start": "45039",
    "end": "48498"
  },
  {
    "text": "But I want to\nmake it easy for you,",
    "start": "48498",
    "end": "50075"
  },
  {
    "text": "and we're going to\ngive you a couple of tips",
    "start": "50075",
    "end": "51637"
  },
  {
    "start": "51000",
    "end": "125000"
  },
  {
    "text": "so that you can get started\nand implement those very easily.",
    "start": "51637",
    "end": "54834"
  },
  {
    "text": "So, let's do it!",
    "start": "54834",
    "end": "56198"
  },
  {
    "text": "Let's say we want to give\nAWS access to our colleagues.",
    "start": "57571",
    "end": "60485"
  },
  {
    "text": "I can create an AWS IAM user\nwith long term credentials,",
    "start": "60485",
    "end": "64726"
  },
  {
    "text": "but this isn't\nalways great",
    "start": "64727",
    "end": "66784"
  },
  {
    "text": "because creating\nanother set of credentials",
    "start": "66784",
    "end": "69276"
  },
  {
    "text": "adds complexity\nto that user,",
    "start": "69277",
    "end": "71173"
  },
  {
    "text": "and that in turn makes\nit harder to secure.",
    "start": "71173",
    "end": "73798"
  },
  {
    "text": "The best thing we can do\nis getting authentication",
    "start": "73798",
    "end": "77451"
  },
  {
    "text": "to a centralized\nidentity provider.",
    "start": "77451",
    "end": "79310"
  },
  {
    "text": "This is also\ncalled federation.",
    "start": "79310",
    "end": "81376"
  },
  {
    "text": "This way, we can manage all of our\ncolleagues identities in one place.",
    "start": "81376",
    "end": "85041"
  },
  {
    "text": "There are many popular\nidentity providers, ",
    "start": "85041",
    "end": "87176"
  },
  {
    "text": "such as Okta, Ping,\nActive Directory,",
    "start": "87176",
    "end": "89668"
  },
  {
    "text": "or even the built-in identity provider\nthat's available at AWS Single Sign-On.",
    "start": "89668",
    "end": "93910"
  },
  {
    "text": "By using a single\nidentity provider",
    "start": "93911",
    "end": "96533"
  },
  {
    "text": "we can manage access to multiple \napplications and services",
    "start": "96533",
    "end": "99391"
  },
  {
    "text": "from a\nsingle place",
    "start": "99391",
    "end": "100896"
  },
  {
    "text": "because we can create,\nmanage, and revoke access",
    "start": "100897",
    "end": "103651"
  },
  {
    "text": "in that\none location.",
    "start": "103651",
    "end": "105132"
  },
  {
    "text": "For example, if someone\nleaves our organization,",
    "start": "105132",
    "end": "107546"
  },
  {
    "text": "we can revoke access to all of\nour applications and services,",
    "start": "107546",
    "end": "110935"
  },
  {
    "text": "including AWS,\nfrom one location.",
    "start": "110935",
    "end": "113491"
  },
  {
    "text": "This also reduces the need for multiple\ncredentials for that particular user,",
    "start": "113491",
    "end": "118041"
  },
  {
    "text": "so users\nlove that.",
    "start": "118041",
    "end": "119834"
  },
  {
    "text": "So, the first step is avoid\ncreating AWS IAM users.",
    "start": "119834",
    "end": "125007"
  },
  {
    "text": "Instead, rely on a\ncentralized identity provider ",
    "start": "125007",
    "end": "128123"
  },
  {
    "text": "for federated\naccess to AWS.",
    "start": "128124",
    "end": "130767"
  },
  {
    "text": "Another anti-pattern is\nusing long term static credentials.",
    "start": "130767",
    "end": "135495"
  },
  {
    "text": "This is because, let's face it,\npeople make mistakes.",
    "start": "135495",
    "end": "138691"
  },
  {
    "text": "I have been guilty of publishing\naccess keys to GitHub,",
    "start": "138691",
    "end": "141859"
  },
  {
    "text": "despite telling my\ncustomers not to do it.",
    "start": "141859",
    "end": "144351"
  },
  {
    "text": "So, the best way to\nnever lose an access key",
    "start": "144352",
    "end": "147176"
  },
  {
    "text": "is to never have an\naccess key in the first place.",
    "start": "147176",
    "end": "149958"
  },
  {
    "text": "So, the tip here is we should\neliminate the reliance on",
    "start": "149958",
    "end": "153831"
  },
  {
    "text": "long term static\naccess credentials.",
    "start": "153831",
    "end": "156135"
  },
  {
    "text": "The good news is that we can\nenforce this for our colleagues",
    "start": "156135",
    "end": "160426"
  },
  {
    "text": "very easily\nand seamlessly",
    "start": "160426",
    "end": "162232"
  },
  {
    "text": "with the help of\nAWS Single Sign-On.",
    "start": "162232",
    "end": "165021"
  },
  {
    "text": "AWS SSO\ncentrally manages access",
    "start": "165022",
    "end": "167961"
  },
  {
    "text": "to business applications\nin one location.",
    "start": "167961",
    "end": "171000"
  },
  {
    "text": "When federating access \ninto AWS accounts,",
    "start": "171001",
    "end": "174242"
  },
  {
    "text": "AWS SSO acquires\ntemporary credentials,",
    "start": "174242",
    "end": "177454"
  },
  {
    "text": "and then refreshes them\non behalf of the users",
    "start": "177454",
    "end": "180291"
  },
  {
    "text": "when they're using\nthe AWS console,",
    "start": "180291",
    "end": "182403"
  },
  {
    "text": "or the latest versions\nof the AWS CLI.",
    "start": "182403",
    "end": "185043"
  },
  {
    "start": "185000",
    "end": "230000"
  },
  {
    "text": "So, not only is this\napproach secure,",
    "start": "185043",
    "end": "187385"
  },
  {
    "text": "but it also provides a great\nexperience to our colleagues.",
    "start": "187385",
    "end": "190562"
  },
  {
    "text": "So, now that we have our\ncentralized identity provider,",
    "start": "191911",
    "end": "195108"
  },
  {
    "text": "and we're enforcing the\nuse of temporary credentials",
    "start": "195108",
    "end": "197676"
  },
  {
    "text": "by federating\naccess into AWS,",
    "start": "197676",
    "end": "199917"
  },
  {
    "text": "it is time we secure\nour root user.",
    "start": "199917",
    "end": "202331"
  },
  {
    "text": "The root user is the\ndefault one that we get",
    "start": "202855",
    "end": "205138"
  },
  {
    "text": "when we first create an\nAWS account from scratch.",
    "start": "205138",
    "end": "208162"
  },
  {
    "text": "This user has\ncomplete access to",
    "start": "208162",
    "end": "210130"
  },
  {
    "text": "all AWS services and\nresources in the account.",
    "start": "210130",
    "end": "212782"
  },
  {
    "text": "Given how much\npower this root user has,",
    "start": "212782",
    "end": "215748"
  },
  {
    "text": "the best thing\nwe can do is",
    "start": "215748",
    "end": "217749"
  },
  {
    "text": "enable multi-factor\nauthentication for it,",
    "start": "217749",
    "end": "220071"
  },
  {
    "text": "configure strong\ncredentials for it,",
    "start": "220071",
    "end": "222656"
  },
  {
    "text": "and avoid using it altogether,\nor as much as possible.",
    "start": "222656",
    "end": "226193"
  },
  {
    "text": "While some actions require\nthe use of the root user,",
    "start": "226193",
    "end": "228866"
  },
  {
    "text": "these are\nthe exception,",
    "start": "228867",
    "end": "229996"
  },
  {
    "text": "and we should be using our identities\nfrom the identity provider",
    "start": "229996",
    "end": "233380"
  },
  {
    "start": "230000",
    "end": "295000"
  },
  {
    "text": "for all our general\nactivities on AWS.",
    "start": "233380",
    "end": "236102"
  },
  {
    "text": "Finally, we should grant \nthe least privilege access.",
    "start": "236102",
    "end": "239958"
  },
  {
    "text": "For our colleagues,\nit means giving them",
    "start": "239958",
    "end": "242083"
  },
  {
    "text": "the minimum permissions\nthey need to perform their job.",
    "start": "242083",
    "end": "245204"
  },
  {
    "text": "This prevents\nunintended access.",
    "start": "245205",
    "end": "247295"
  },
  {
    "text": "So, how do\nwe do this?",
    "start": "247295",
    "end": "248638"
  },
  {
    "text": "In our IAM policies, \ninstead of using the wild cards,",
    "start": "248638",
    "end": "251459"
  },
  {
    "text": "we should be\nscoping down our policies,",
    "start": "251459",
    "end": "253221"
  },
  {
    "text": "and being as\nspecific as possible.",
    "start": "253221",
    "end": "255838"
  },
  {
    "text": "We can specify the\nservice actions, the resources,",
    "start": "255839",
    "end": "259773"
  },
  {
    "text": "and the conditions that must\nbe true for AWS to allow access.",
    "start": "259774",
    "end": "263719"
  },
  {
    "text": "Managing IAM\npolicies at scale ",
    "start": "263719",
    "end": "266584"
  },
  {
    "text": "across multiple accounts\ncan become challenging.",
    "start": "266584",
    "end": "269011"
  },
  {
    "text": "But guess what? ",
    "start": "269011",
    "end": "270130"
  },
  {
    "text": "AWS Single Sign-On\nalso makes life simple here.",
    "start": "270131",
    "end": "273346"
  },
  {
    "text": "AWS SSO\nconfigures and maintains",
    "start": "273346",
    "end": "275229"
  },
  {
    "text": "all the necessary IAM policies\nin our accounts automatically.",
    "start": "275229",
    "end": "278851"
  },
  {
    "text": "This way you can focus on\nassigning user permissions",
    "start": "278851",
    "end": "281821"
  },
  {
    "text": "based on common\njob functions,",
    "start": "281821",
    "end": "283718"
  },
  {
    "text": "and assign these permissions\nto users or groups",
    "start": "283718",
    "end": "286349"
  },
  {
    "text": "in the specific account\nwhere they are needed.",
    "start": "286349",
    "end": "288730"
  },
  {
    "text": "If you want\nto learn more",
    "start": "288730",
    "end": "290356"
  },
  {
    "text": "there are a lot of links for diving deep\nin the description below.",
    "start": "290356",
    "end": "293720"
  },
  {
    "text": "See you\nnext time!",
    "start": "293720",
    "end": "294926"
  }
]