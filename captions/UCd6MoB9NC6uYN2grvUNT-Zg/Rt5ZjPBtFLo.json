[
  {
    "text": "hi my name is Tarun Chaudhary I'm a data",
    "start": "120",
    "end": "2939"
  },
  {
    "text": "analyst solutions architect here at AWS",
    "start": "2939",
    "end": "6290"
  },
  {
    "text": "with over 200 features and capabilities",
    "start": "6290",
    "end": "8790"
  },
  {
    "text": "added in the last 18 months Amazon",
    "start": "8790",
    "end": "11820"
  },
  {
    "text": "redshift continues to innovate to make",
    "start": "11820",
    "end": "14700"
  },
  {
    "text": "it easier faster and cheaper for the",
    "start": "14700",
    "end": "17280"
  },
  {
    "text": "customers to analyze their data in this",
    "start": "17280",
    "end": "20130"
  },
  {
    "text": "demo",
    "start": "20130",
    "end": "21490"
  },
  {
    "text": "I'm going to show you how you can query",
    "start": "21490",
    "end": "24789"
  },
  {
    "text": "operational data stored in an Aurora",
    "start": "24789",
    "end": "27880"
  },
  {
    "text": "Post Press TV from redshift let's see",
    "start": "27880",
    "end": "32379"
  },
  {
    "text": "how it works",
    "start": "32379",
    "end": "35010"
  },
  {
    "text": "in order to make this demo work I would",
    "start": "35010",
    "end": "37920"
  },
  {
    "text": "need the I am role associated with a red",
    "start": "37920",
    "end": "40290"
  },
  {
    "text": "chip cluster the RDS in point that we",
    "start": "40290",
    "end": "43740"
  },
  {
    "text": "are querying in the policy that will",
    "start": "43740",
    "end": "46740"
  },
  {
    "text": "enable red chip to query the Postgres DB",
    "start": "46740",
    "end": "51450"
  },
  {
    "text": "a secret a RN that would be needed to",
    "start": "51450",
    "end": "54690"
  },
  {
    "text": "authorize it achieved to connect to",
    "start": "54690",
    "end": "57870"
  },
  {
    "text": "Postgres and we are going to create an",
    "start": "57870",
    "end": "59760"
  },
  {
    "text": "external scheme at the end let's see so",
    "start": "59760",
    "end": "64320"
  },
  {
    "text": "from the AWS console you need to go to",
    "start": "64320",
    "end": "67860"
  },
  {
    "text": "the secrets management",
    "start": "67860",
    "end": "71390"
  },
  {
    "text": "once you are into secret management you",
    "start": "75770",
    "end": "79159"
  },
  {
    "text": "need to copy the secret AR and from",
    "start": "79159",
    "end": "81950"
  },
  {
    "text": "there the secret Iran is going to be",
    "start": "81950",
    "end": "86180"
  },
  {
    "text": "used in the policy and the create action",
    "start": "86180",
    "end": "91939"
  },
  {
    "text": "schema definition as well so here I just",
    "start": "91939",
    "end": "95509"
  },
  {
    "text": "pasted the security Allen",
    "start": "95509",
    "end": "99549"
  },
  {
    "text": "into the policy I'm going to copy the",
    "start": "99700",
    "end": "103780"
  },
  {
    "text": "policy portal I'm under policies I'm",
    "start": "103780",
    "end": "108729"
  },
  {
    "text": "going to create a new policy and this",
    "start": "108729",
    "end": "118929"
  },
  {
    "text": "policy text the JSON and then copy this",
    "start": "118929",
    "end": "123310"
  },
  {
    "text": "JSON and paste it into JSON box and hit",
    "start": "123310",
    "end": "129069"
  },
  {
    "text": "the new policy enter the name for the",
    "start": "129069",
    "end": "132849"
  },
  {
    "text": "policy and hit create pharmacy as you",
    "start": "132849",
    "end": "143170"
  },
  {
    "text": "can see the quality is created",
    "start": "143170",
    "end": "144579"
  },
  {
    "text": "successfully the next step is to attach",
    "start": "144579",
    "end": "147400"
  },
  {
    "text": "this policy to the role that if attached",
    "start": "147400",
    "end": "150819"
  },
  {
    "text": "to our stretch of cluster simply -",
    "start": "150819",
    "end": "155950"
  },
  {
    "text": "policy that we created in the previous",
    "start": "155950",
    "end": "158799"
  },
  {
    "text": "step",
    "start": "158799",
    "end": "159430"
  },
  {
    "text": "- this red shift role once this step is",
    "start": "159430",
    "end": "167019"
  },
  {
    "text": "successful let's go back to",
    "start": "167019",
    "end": "170549"
  },
  {
    "text": "comes on and go through the query editor",
    "start": "171110",
    "end": "177170"
  },
  {
    "text": "from here",
    "start": "177170",
    "end": "179920"
  },
  {
    "text": "Martin logging into the query editor we",
    "start": "185890",
    "end": "188870"
  },
  {
    "text": "need to create the external schema that",
    "start": "188870",
    "end": "191000"
  },
  {
    "text": "the less tar Postgres to the tables",
    "start": "191000",
    "end": "195700"
  },
  {
    "text": "I'm just replacing the values here the",
    "start": "208380",
    "end": "210840"
  },
  {
    "text": "Iron Throne",
    "start": "210840",
    "end": "212790"
  },
  {
    "text": "that is - to achieve cluster the RDS end",
    "start": "212790",
    "end": "217650"
  },
  {
    "text": "point that means - that year query from",
    "start": "217650",
    "end": "221850"
  },
  {
    "text": "the trip cluster and the secret air and",
    "start": "221850",
    "end": "226970"
  },
  {
    "text": "once the query successfully you would",
    "start": "241370",
    "end": "244370"
  },
  {
    "text": "see under the schema both first among",
    "start": "244370",
    "end": "247730"
  },
  {
    "text": "the listed",
    "start": "247730",
    "end": "250360"
  },
  {
    "text": "as you can see under the post Chris",
    "start": "252000",
    "end": "254570"
  },
  {
    "text": "schema you would see two tables customer",
    "start": "254570",
    "end": "257489"
  },
  {
    "text": "inventory these are the table that",
    "start": "257489",
    "end": "259650"
  },
  {
    "text": "exists in the Postgres DB I'm going to",
    "start": "259650",
    "end": "262560"
  },
  {
    "text": "write a simple query on these tables I'm",
    "start": "262560",
    "end": "266160"
  },
  {
    "text": "going to write a query on the inventory",
    "start": "266160",
    "end": "267840"
  },
  {
    "text": "table just a select start",
    "start": "267840",
    "end": "271060"
  },
  {
    "text": "and we're going to see how fetches the",
    "start": "271060",
    "end": "274030"
  },
  {
    "text": "data from those hoes press operational",
    "start": "274030",
    "end": "277660"
  },
  {
    "text": "database",
    "start": "277660",
    "end": "279810"
  },
  {
    "text": "you",
    "start": "283910",
    "end": "285970"
  },
  {
    "text": "there you go so you can see the results",
    "start": "286680",
    "end": "289470"
  },
  {
    "text": "we are fetching from the poor square",
    "start": "289470",
    "end": "291570"
  },
  {
    "text": "schema and the table inventory now let's",
    "start": "291570",
    "end": "295380"
  },
  {
    "text": "try out a simple join between the local",
    "start": "295380",
    "end": "297810"
  },
  {
    "text": "red chip table and Postgres TV table",
    "start": "297810",
    "end": "304460"
  },
  {
    "text": "in this particular query we are just",
    "start": "307430",
    "end": "309470"
  },
  {
    "text": "joining the inventory monstrous table",
    "start": "309470",
    "end": "312110"
  },
  {
    "text": "with our local warehouse table as you",
    "start": "312110",
    "end": "315020"
  },
  {
    "text": "can see the true very ram successfully",
    "start": "315020",
    "end": "319720"
  },
  {
    "text": "next let's try running an insert",
    "start": "319720",
    "end": "323090"
  },
  {
    "text": "statement this insert statement",
    "start": "323090",
    "end": "325490"
  },
  {
    "text": "essentially is comparing the inventory",
    "start": "325490",
    "end": "328430"
  },
  {
    "text": "table in the Postgres DB and the",
    "start": "328430",
    "end": "331130"
  },
  {
    "text": "inventory table the local data warehouse",
    "start": "331130",
    "end": "333800"
  },
  {
    "text": "a chip data warehouse and in this",
    "start": "333800",
    "end": "337610"
  },
  {
    "text": "particular query which is trying to",
    "start": "337610",
    "end": "340160"
  },
  {
    "text": "compare the results if there are records",
    "start": "340160",
    "end": "343940"
  },
  {
    "text": "as you can see there are records which",
    "start": "343940",
    "end": "345500"
  },
  {
    "text": "exist in the post-race DB but they do",
    "start": "345500",
    "end": "347900"
  },
  {
    "text": "not exist in the redshift table after",
    "start": "347900",
    "end": "351680"
  },
  {
    "text": "running the insert statement and these",
    "start": "351680",
    "end": "353300"
  },
  {
    "text": "Delta records would be inserted to the",
    "start": "353300",
    "end": "355370"
  },
  {
    "text": "local that check table so this is one of",
    "start": "355370",
    "end": "357919"
  },
  {
    "text": "those use cases where there are complex",
    "start": "357919",
    "end": "361160"
  },
  {
    "text": "et onze where you extract the data first",
    "start": "361160",
    "end": "363530"
  },
  {
    "text": "and then load a data warehouse in this",
    "start": "363530",
    "end": "368240"
  },
  {
    "text": "scenario it just happened in a single",
    "start": "368240",
    "end": "370190"
  },
  {
    "text": "statement and this concludes our demo",
    "start": "370190",
    "end": "374539"
  },
  {
    "text": "thanks for watching the video",
    "start": "374539",
    "end": "378250"
  }
]