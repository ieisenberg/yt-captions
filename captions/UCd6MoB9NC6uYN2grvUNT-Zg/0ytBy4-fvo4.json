[
  {
    "start": "0",
    "end": "79000"
  },
  {
    "text": "my name is Chris buns I'm a senior developer advocate from EWS in this session here is getting started with servlets architectures cmp 211 with me",
    "start": "329",
    "end": "9120"
  },
  {
    "text": "is Nik Joshi Nikki Jo she's hi from Capital One is director of software development he's gonna be talking a little bit later",
    "start": "9120",
    "end": "15000"
  },
  {
    "text": "about some of their experiences in building service applications at Capital",
    "start": "15000",
    "end": "20070"
  },
  {
    "text": "One so real quick a little bit more about me so again I'm currently the",
    "start": "20070",
    "end": "25350"
  },
  {
    "text": "currently senior developer advocate for serve lists at AWS I'm actually part of the lambda API a gateway team of been",
    "start": "25350",
    "end": "30810"
  },
  {
    "text": "and a DBS for a little over five years now in a couple of different roles but before my time at AWS I actually came",
    "start": "30810",
    "end": "36930"
  },
  {
    "text": "from much more of a traditional sass sysadmin or operations background maybe what people would call a DevOps role",
    "start": "36930",
    "end": "42750"
  },
  {
    "text": "these days but for the last years so I've been really really focused on what service means to us as an industry and",
    "start": "42750",
    "end": "49100"
  },
  {
    "text": "really excited and very much kind of deeply interested in seeing how this is changing the way that companies are",
    "start": "49100",
    "end": "55350"
  },
  {
    "text": "building new technology so why are we here today so throughout this week if",
    "start": "55350",
    "end": "61859"
  },
  {
    "text": "you've been here since yesterday you've probably already heard the term serval is thrown around a number of times if",
    "start": "61859",
    "end": "67200"
  },
  {
    "text": "you follow social media or any industry blogs or publications that are out there for the last year so you've probably",
    "start": "67200",
    "end": "72810"
  },
  {
    "text": "seen the word service thrown around in many different ways across all sorts of different use cases for us here at AWS",
    "start": "72810",
    "end": "79290"
  },
  {
    "start": "79000",
    "end": "79000"
  },
  {
    "text": "service really comes down to four kind of key attributes the first there being absolutely no servers to provision or",
    "start": "79290",
    "end": "85860"
  },
  {
    "text": "manage this doesn't just mean bare metal it means bare metal virtual machines things like containers anything that",
    "start": "85860",
    "end": "92009"
  },
  {
    "text": "requires you to care think about or put any sort of love or feeding into an operating system is not something you'd",
    "start": "92009",
    "end": "98700"
  },
  {
    "text": "ever have to do with a serverless product or service solution the next is its ability to scale directly with usage",
    "start": "98700",
    "end": "104850"
  },
  {
    "text": "so as requests come in or invocations come in the backend product or service platforms should be able to scale very",
    "start": "104850",
    "end": "110820"
  },
  {
    "text": "easily to handle those requests without you experiencing really much of a delay third concept is never paying for idle",
    "start": "110820",
    "end": "117600"
  },
  {
    "text": "this is maybe one of the most transformative about the technologies that we're going to talk about here today the general estimates in the",
    "start": "117600",
    "end": "124079"
  },
  {
    "text": "industry are that roughly 80 plus percent of IT resources inside of a traditional enterprise are sitting idle",
    "start": "124079",
    "end": "129899"
  },
  {
    "text": "most of the time and so for that and losing the cost associated with those resources is actually fairly",
    "start": "129899",
    "end": "137189"
  },
  {
    "text": "capital intensive for many businesses with service solutions and platforms you never have to pay for idle in terms of",
    "start": "137189",
    "end": "143730"
  },
  {
    "text": "things like compute resources and what's sitting around that's been configured for those solutions and then lastly high",
    "start": "143730",
    "end": "149159"
  },
  {
    "text": "availability and fault tolerance built in so for those of you who have been a de best customers for some period of",
    "start": "149159",
    "end": "154530"
  },
  {
    "text": "time now you're familiar with our concept of regions inside of regions there are things such as availability zones with service solutions you never",
    "start": "154530",
    "end": "161069"
  },
  {
    "text": "have to think about building multi AZ so it's going to be something that's going to be default based on the services that",
    "start": "161069",
    "end": "166680"
  },
  {
    "text": "you're using and so the core of this role for us is AWS lambda shown here in",
    "start": "166680",
    "end": "172019"
  },
  {
    "text": "the middle of the slide so AWS lambda is a compute service so similar to things like ec2 and ECS it is a service that",
    "start": "172019",
    "end": "179069"
  },
  {
    "text": "helps you then if they manage your applications on yes at the end of the day servers although with lambda you",
    "start": "179069",
    "end": "184889"
  },
  {
    "text": "don't do anything to manage those servers provision those servers update those servers that's all on us at AWS is",
    "start": "184889",
    "end": "190590"
  },
  {
    "text": "the provider of this platform we talk about a service application altogether we're talking about typically an event",
    "start": "190590",
    "end": "196409"
  },
  {
    "text": "source that is going to be called to invoke lambda and then whatever the business logic is that our lambda function is going to do and this talk",
    "start": "196409",
    "end": "203790"
  },
  {
    "text": "will be talking about a number of use cases and aspects around service applications and how service is a a",
    "start": "203790",
    "end": "211590"
  },
  {
    "text": "newer topic in general in the IT industry but it is by no means immature so here's kind of a small content slide",
    "start": "211590",
    "end": "219810"
  },
  {
    "text": "of a number of our customers that have publicly talked about their service usage and you'll see many different",
    "start": "219810",
    "end": "225180"
  },
  {
    "text": "brands and companies that you're probably very deeply familiar with so all of these companies are doing things in production with service architectures",
    "start": "225180",
    "end": "232409"
  },
  {
    "text": "and applications most likely saving money achieving higher availability at",
    "start": "232409",
    "end": "237780"
  },
  {
    "text": "point in time scaling and again very very very greatly reduced management overhead of managing those service",
    "start": "237780",
    "end": "243720"
  },
  {
    "text": "applications in terms of what you can do with service applications there's really a number of different use cases that",
    "start": "243720",
    "end": "250199"
  },
  {
    "text": "exist but we typically try to bucket them down into kinda what we consider the six most common so we have web",
    "start": "250199",
    "end": "255930"
  },
  {
    "text": "applications effectively the the API back-end application for say a a website or even a mobile application and that",
    "start": "255930",
    "end": "263099"
  },
  {
    "text": "ties into backends itself things like micro service based architectures data processing so stream analysis batch",
    "start": "263099",
    "end": "269650"
  },
  {
    "text": "processing any sort of large record analysis that you might need to do and philander this is actually one of the",
    "start": "269650",
    "end": "274990"
  },
  {
    "text": "biggest use cases that we see for it today companies processing billions of requests in a day taking amend",
    "start": "274990",
    "end": "280840"
  },
  {
    "text": "information doing everything from near real-time analytics on to aggregation into data warehouses to all sorts of",
    "start": "280840",
    "end": "287830"
  },
  {
    "text": "things like sensor based workloads chatbots so chatbots becoming an ever-increasing way for companies to",
    "start": "287830",
    "end": "293670"
  },
  {
    "text": "communicate not just with their customers but even internally inside of their organizations i you see companies",
    "start": "293670",
    "end": "298840"
  },
  {
    "text": "that are building chat bots to help their internal teams know where to find information or here to communicate with and chat BOTS both verbal and text-based",
    "start": "298840",
    "end": "305920"
  },
  {
    "text": "you becoming an ever-increasing medium for how people communicate it was on Alexa so for those of you who have an",
    "start": "305920",
    "end": "311830"
  },
  {
    "text": "Alexa capable device when you ask Alexa to do something there's a pretty strong chance that what it's going to do or how",
    "start": "311830",
    "end": "318520"
  },
  {
    "text": "it's going to reply to you is actually going to call a lambda function so the fulfilment of the conversation that",
    "start": "318520",
    "end": "323890"
  },
  {
    "text": "you're having with Alexa can be hosted basically with lambda and it's one of the most common ways that be close to I",
    "start": "323890",
    "end": "330280"
  },
  {
    "text": "think just shy of 30 thousand skills that exist today are powered and the lastly IT automation so this is one of",
    "start": "330280",
    "end": "336520"
  },
  {
    "text": "the most basic kind of the entry way that most people get into lambda especially if you're coming from a",
    "start": "336520",
    "end": "342100"
  },
  {
    "text": "traditional IT organization or even from a development background is using lambda as a glue between lots of different",
    "start": "342100",
    "end": "348130"
  },
  {
    "text": "services and there's many different places you can use lambda played or tied into our management and development",
    "start": "348130",
    "end": "354100"
  },
  {
    "text": "tools into deployment tools and to monitoring and metrics tools and all sorts of things that you can do you can",
    "start": "354100",
    "end": "359710"
  },
  {
    "text": "even use lambda as a managed cron as it were so lambda itself is a pretty unique",
    "start": "359710",
    "end": "366220"
  },
  {
    "text": "service in terms of what it does so again we mentioned before how this is a compute service right at the end of the",
    "start": "366220",
    "end": "371500"
  },
  {
    "text": "day it's helping you to manage effectively servers and your applications that sit on them again without you ever thinking about those",
    "start": "371500",
    "end": "377140"
  },
  {
    "text": "servers needing to configure them in a traditional sense now there's this concept of event-driven computing that",
    "start": "377140",
    "end": "383440"
  },
  {
    "text": "is becoming really keen how people are building applications today this is the idea that we're taking typically monolithic applications decomposing them",
    "start": "383440",
    "end": "390730"
  },
  {
    "text": "into event streams that are sourced in a different way than you would think of in a traditional monolithic application",
    "start": "390730",
    "end": "396490"
  },
  {
    "text": "that lends itself very directly to a other term which is functions as a service and this is where your",
    "start": "396490",
    "end": "402699"
  },
  {
    "text": "decomposing again those event-driven models into directly aligned function based applications effectively very very",
    "start": "402699",
    "end": "409659"
  },
  {
    "text": "small snippets of code that correlate typically with a single event and then that code is executed in response to",
    "start": "409659",
    "end": "415960"
  },
  {
    "text": "that event now lambda sits inside of all of these as a server list functions as a service product so again it's functions",
    "start": "415960",
    "end": "423699"
  },
  {
    "text": "as a service its event-driven it's completely serviced you don't do anything to manage the resources under it let's talk a little bit more about",
    "start": "423699",
    "end": "430479"
  },
  {
    "text": "lambda so today in lambda you have four different languages that are natively supported in it no js' Java Python and",
    "start": "430479",
    "end": "437770"
  },
  {
    "start": "432000",
    "end": "432000"
  },
  {
    "text": "c-sharp there are actually a number of third-party projects that are open source to help you support any number of",
    "start": "437770",
    "end": "444610"
  },
  {
    "text": "different languages and we often get a lot of requests to see this list grow and so we've got a number of days left",
    "start": "444610",
    "end": "450279"
  },
  {
    "text": "here in the week I'd say keep your eyes and ears open about that you could bring your own libraries or even native ones",
    "start": "450279",
    "end": "455680"
  },
  {
    "text": "so if you're using something like nodejs or Python you can bring in pip packages you can bring in NPM modules all sorts",
    "start": "455680",
    "end": "462580"
  },
  {
    "text": "of different things like that same with Java with maven or c-sharp with nougat all of those are supported now with",
    "start": "462580",
    "end": "468550"
  },
  {
    "text": "lambda there's really basically kind of one knob that you turn in terms of how you provision the underlying computer",
    "start": "468550",
    "end": "473560"
  },
  {
    "text": "resource and that's the amount of memory that your function has that it can consume doesn't mean that it will",
    "start": "473560",
    "end": "478779"
  },
  {
    "text": "absolutely consume that it but it gives you basically the Headroom that you might need based on what it is that your function needs and so today we support",
    "start": "478779",
    "end": "485889"
  },
  {
    "text": "everything from 128 megabytes up to 1.5 gigabytes and so you've got quite a lot of capability inside of that now when",
    "start": "485889",
    "end": "492909"
  },
  {
    "text": "you turn that knob from memory you also proportionally are adjusting the amount of CPU and network that is allotted with",
    "start": "492909",
    "end": "498370"
  },
  {
    "text": "that so one common performance tweaking a recommendation that we have is if you",
    "start": "498370",
    "end": "504219"
  },
  {
    "text": "think that your function for some reason is executing slow adding more memory does add more CPU and so if you have a CPU intensive workload you can see maybe",
    "start": "504219",
    "end": "511479"
  },
  {
    "text": "not to not come to mind first about tweaking that knob but it does again help you with performance flexible use",
    "start": "511479",
    "end": "519430"
  },
  {
    "text": "cases so we'll talk a little bit more about this here in a moment synchronous asynchronous streaming models for how",
    "start": "519430",
    "end": "524440"
  },
  {
    "text": "you invoke lambda and so coital again a lot of different capabilities for how you can actually put lambda into an",
    "start": "524440",
    "end": "529870"
  },
  {
    "text": "application stack and then lastly with with every service that we have here at",
    "start": "529870",
    "end": "534890"
  },
  {
    "text": "AWS securities is basically a top priority for how we build a product so",
    "start": "534890",
    "end": "540500"
  },
  {
    "text": "inside of lambda and we'll talk about the Syrian moment as well there's a number of different security capabilities that are ingrained and built into the product that basically",
    "start": "540500",
    "end": "547490"
  },
  {
    "text": "help you achieve I think a higher level of security potentially first if you",
    "start": "547490",
    "end": "553400"
  },
  {
    "text": "were doing this yourself and writing all the components inside of a traditional server based application in terms of",
    "start": "553400",
    "end": "560600"
  },
  {
    "text": "working with lambda and building your functions basically you can do what you've always done so use any IDE or",
    "start": "560600",
    "end": "565700"
  },
  {
    "text": "code editor whether it be VI or Emacs or visual studio or eclipse or notepad home",
    "start": "565700",
    "end": "573320"
  },
  {
    "text": "whatever it is that you want to write code in you can write lambda functions in again we've got a number of third-party plug-ins for various",
    "start": "573320",
    "end": "580070"
  },
  {
    "text": "different IDs and editors that are out there we consider monitor logging a kind",
    "start": "580070",
    "end": "585410"
  },
  {
    "text": "of core capability inside of lambda so inside of your lambda functions anytime that you do anything that looks like a",
    "start": "585410",
    "end": "590510"
  },
  {
    "text": "console log or a printf statement we're actually going to capture that text and put it into quad watch logs and make it",
    "start": "590510",
    "end": "596720"
  },
  {
    "text": "available to you so you can digest it via that service or you could take that data from cloud watch logs and pass it",
    "start": "596720",
    "end": "602270"
  },
  {
    "text": "into say a Splunk or an elf stack or into s3 or whatever it is that you might want to process that data same thing",
    "start": "602270",
    "end": "608240"
  },
  {
    "text": "goes with metrics so across lambda just like many other products here at AWS we generate a number of different metrics around things like invocation count",
    "start": "608240",
    "end": "615580"
  },
  {
    "text": "duration errors and a couple of other things that are there so we're gonna give you a lot of data and information",
    "start": "615580",
    "end": "621110"
  },
  {
    "text": "about how your function is performing just right out of the box without you having to add anything like an agent in",
    "start": "621110",
    "end": "626990"
  },
  {
    "text": "order to monitor or gather this information from a programming model perspective again it's very similar to",
    "start": "626990",
    "end": "633170"
  },
  {
    "text": "writing an application on any other computer you have the ability to kick off or fork other processes you have",
    "start": "633170",
    "end": "640220"
  },
  {
    "text": "access to temporary storage inside of the running environment while there are some restrictions in terms of what you",
    "start": "640220",
    "end": "645560"
  },
  {
    "text": "can do with those things it still doesn't change the way that you think about building your application from an actual code level all that much and then",
    "start": "645560",
    "end": "652339"
  },
  {
    "text": "lastly very important with lambda is it is a stateless compute service so behind",
    "start": "652339",
    "end": "657740"
  },
  {
    "text": "the scenes what happens as we manage very very large fleets of compute resources on AWS lambda team very very",
    "start": "657740",
    "end": "664220"
  },
  {
    "text": "very big large number of ec2 instances behind-the-scenes when your function gets a request that comes into it we",
    "start": "664220",
    "end": "671060"
  },
  {
    "text": "basically look and say okay is this function currently up and running effectively warm on the infrastructure",
    "start": "671060",
    "end": "676880"
  },
  {
    "text": "if it is then the request will go to that that that piece of compute capacity execute your business logic execute your",
    "start": "676880",
    "end": "683569"
  },
  {
    "text": "code effectively and then stop and so you only pay for that time during that execution in hundreds of milliseconds",
    "start": "683569",
    "end": "690410"
  },
  {
    "text": "worth of billing if for some reason you didn't have a a warmth piece of infrastructure that was set up for your",
    "start": "690410",
    "end": "696620"
  },
  {
    "text": "function then we go and basically a lot resources to that bootstrap your code executes your function and then return",
    "start": "696620",
    "end": "703639"
  },
  {
    "text": "it and so there's a number of things that you can get into about this but one of the key things to keep in mind is",
    "start": "703639",
    "end": "708829"
  },
  {
    "text": "that that compute resource that we creates execute your function does not stay around permanently so unlike a",
    "start": "708829",
    "end": "715250"
  },
  {
    "text": "traditional compute resource again whether it be virtual physical or even container based it's a stateless compute",
    "start": "715250",
    "end": "721459"
  },
  {
    "text": "resource there is no assurance that a subsequent request is going to have any affinity back to that resource so it",
    "start": "721459",
    "end": "727069"
  },
  {
    "text": "does change the programming model in that sense and that you can't make use of any sort of localized your cache",
    "start": "727069",
    "end": "733040"
  },
  {
    "text": "ability of data there are some tricks of the temp space but generally speaking it's not necessarily a best practice so",
    "start": "733040",
    "end": "740959"
  },
  {
    "text": "again in terms of pricing lambda is build by the hundreds of milliseconds you never pay for idle so if your lambda",
    "start": "740959",
    "end": "746720"
  },
  {
    "start": "741000",
    "end": "741000"
  },
  {
    "text": "function is configured and uh permanent and exists but not doing anything well then you're not paying for anything so a",
    "start": "746720",
    "end": "753529"
  },
  {
    "text": "whole lot of benefit again to this but then a and as requests come in you pay just for the requests just as they're",
    "start": "753529",
    "end": "758779"
  },
  {
    "text": "executed based on the execution time of your function from a development perspective you can think about how in a",
    "start": "758779",
    "end": "765139"
  },
  {
    "text": "neutral environment best practice is to have dev staging and prod and if you were doing that type of a model with",
    "start": "765139",
    "end": "770870"
  },
  {
    "text": "physical servers or virtual servers or containers you're paying for you know dev staging and obviously production but",
    "start": "770870",
    "end": "778040"
  },
  {
    "text": "in the case of lambda and many of the services architectures that we have you're paying for nothing of those resources to exist outside of when",
    "start": "778040",
    "end": "784970"
  },
  {
    "text": "you're invoking and executing them so again very different dynamic from a cost model aligned with service architectures",
    "start": "784970",
    "end": "791810"
  },
  {
    "text": "and we're gonna see and both here from Mickey here how these cost savings you know appear or show up for many of",
    "start": "791810",
    "end": "798079"
  },
  {
    "text": "our customers so when it comes to actually xuxa model I talked about a service application has an event source a",
    "start": "798079",
    "end": "804320"
  },
  {
    "start": "800000",
    "end": "800000"
  },
  {
    "text": "function and then that functions business logic the execution model are effectively the event invocation model",
    "start": "804320",
    "end": "810110"
  },
  {
    "text": "today there are three different ways that you can invoke the lambda function the first is a synchronous model in this",
    "start": "810110",
    "end": "815720"
  },
  {
    "text": "case we do the example of using Amazon API gateway which we have a API that",
    "start": "815720",
    "end": "820730"
  },
  {
    "text": "we're going to call and we're expecting Lamba to come back and give us a response and so that is asynchronous motion we also support a synchronous",
    "start": "820730",
    "end": "828440"
  },
  {
    "text": "model so we see here the example of using s3 and SNS where a object may be is uploaded to an s3 bucket or a message",
    "start": "828440",
    "end": "834920"
  },
  {
    "text": "is put into an SNS topic that is going to then go and invoke a lambda function either with that messages content or",
    "start": "834920",
    "end": "841430"
  },
  {
    "text": "with the data where that object lives in s3 such that we can pull it down a process in our lambda function now in",
    "start": "841430",
    "end": "847700"
  },
  {
    "text": "those situations you're expecting the response back from SNS rs3 to say that the message or the object was received",
    "start": "847700",
    "end": "853490"
  },
  {
    "text": "but you're typically not sitting around and waiting for then whatever it is that the lambda function is going to do in",
    "start": "853490",
    "end": "859100"
  },
  {
    "text": "any sort of synchronous models this is an asynchronous workflow lastly stream",
    "start": "859100",
    "end": "864470"
  },
  {
    "text": "based so in the case of stream based today we support this with dynamodb in Kinesis where you could potentially in",
    "start": "864470",
    "end": "870560"
  },
  {
    "text": "the case of Amazon Kinesis have a ton of data being ingested we have customers",
    "start": "870560",
    "end": "876170"
  },
  {
    "text": "that are doing tens of thousands if not hundreds of thousands of requests per second through Kinesis those will come",
    "start": "876170",
    "end": "882560"
  },
  {
    "text": "in through what are called Kinesis shards those shards then relate back to a lambda function which will be invoked",
    "start": "882560",
    "end": "888530"
  },
  {
    "text": "that lambda function will pull that information do whatever it needs to do so I've seen customers use this for ad",
    "start": "888530",
    "end": "893960"
  },
  {
    "text": "tech use cases for gathering things like log data sensor data and so forth with",
    "start": "893960",
    "end": "899300"
  },
  {
    "text": "dynamodb it actually in this case uses Kinesis streams behind the scenes or under the hood as it were such that when",
    "start": "899300",
    "end": "905450"
  },
  {
    "text": "you have updates creates or deletes to your DynamoDB table it can take those",
    "start": "905450",
    "end": "910490"
  },
  {
    "text": "calls pass them back into a stream and it lambda can process these these are",
    "start": "910490",
    "end": "915800"
  },
  {
    "text": "good for effectively creating more or less database triggers for doing things like replication for taking that data",
    "start": "915800",
    "end": "921860"
  },
  {
    "text": "and maybe putting into a data warehouse there's all sorts of different things that you can do in near-real-time with this model with lambda there's",
    "start": "921860",
    "end": "931220"
  },
  {
    "text": "actually a little over 20 services today as far as I know for today we've always",
    "start": "931220",
    "end": "936410"
  },
  {
    "text": "had a couple of announcements so there may be a couple more that are out there and there forgive me more throughout the rest of this week but we've got data",
    "start": "936410",
    "end": "943160"
  },
  {
    "text": "stores again development and management tools endpoint services event or messaging services so lots of different",
    "start": "943160",
    "end": "950689"
  },
  {
    "text": "capabilities lots of different things that you can do using lambda so",
    "start": "950689",
    "end": "956869"
  },
  {
    "text": "mentioned before about how security is a super high priority for us here at AWS considered our kind of first priority in",
    "start": "956869",
    "end": "962480"
  },
  {
    "text": "the products that we build it's something that's discussed from day one of planning a new product inside of",
    "start": "962480",
    "end": "967970"
  },
  {
    "text": "lambda there's a number of different capabilities that are built into it from a security perspective at a very very",
    "start": "967970",
    "end": "973790"
  },
  {
    "text": "very fine-grain security control so you can control who has the ability to invoke a lambda function and then when",
    "start": "973790",
    "end": "979970"
  },
  {
    "text": "that lambda function is invoked what it can do in terms of talking to other AWS services and you can get very very",
    "start": "979970",
    "end": "985549"
  },
  {
    "text": "specific and I am about what that looks like you can also do things like with API gateway passing credentials from the",
    "start": "985549",
    "end": "991819"
  },
  {
    "text": "third parties or from your customers that have maybe authenticated with an API gateway such that you can assume",
    "start": "991819",
    "end": "998119"
  },
  {
    "text": "those credentials pass them into lambda and have that lambda function do only what it needs to do based on what those",
    "start": "998119",
    "end": "1003309"
  },
  {
    "text": "credentials can allow so we have a concept of execution policies again it defines what that function can access we",
    "start": "1003309",
    "end": "1010720"
  },
  {
    "text": "then have function policies so who is allowed to actually execute that function and these can be used for cross",
    "start": "1010720",
    "end": "1016989"
  },
  {
    "text": "account as well so Amazon API gateway is another one of the products that exists",
    "start": "1016989",
    "end": "1023199"
  },
  {
    "start": "1020000",
    "end": "1020000"
  },
  {
    "text": "inside of our service space and there were kind of the key components that represents service here at AWS API",
    "start": "1023199",
    "end": "1028839"
  },
  {
    "text": "gateway much as the name might suggest is an API gateway so when you are building an API there's a lot of things",
    "start": "1028839",
    "end": "1035260"
  },
  {
    "text": "that typically go into that that are fairly standard authentication authorization throttling usage tiers",
    "start": "1035260",
    "end": "1041579"
  },
  {
    "text": "logging maybe something along with doing you know transforms or requests that come in things like DDoS protection",
    "start": "1041579",
    "end": "1049690"
  },
  {
    "text": "caching all of these are things that as a developer building an API boo service you often might think about building",
    "start": "1049690",
    "end": "1055870"
  },
  {
    "text": "yourself if you weren't using an API gateway and I pretty much 100% of the time recommend that if you're building",
    "start": "1055870",
    "end": "1060970"
  },
  {
    "text": "anything that looks like an API you should have some sort of API gateway and product in front of it so Amazon API gateway does",
    "start": "1060970",
    "end": "1068150"
  },
  {
    "text": "all things I just mentioned so helps with authentication authorization caching DDoS protection usage tears",
    "start": "1068150",
    "end": "1074450"
  },
  {
    "text": "throttling in a number of different ways and so it's a really very straightforward service where again you",
    "start": "1074450",
    "end": "1079910"
  },
  {
    "text": "don't manage any of the servers it's a completely managed automatically scalable high available II pay only for",
    "start": "1079910",
    "end": "1086240"
  },
  {
    "text": "what you use products so it meets again the four key tenets that we have for service here at AWS no other member of",
    "start": "1086240",
    "end": "1092420"
  },
  {
    "start": "1092000",
    "end": "1092000"
  },
  {
    "text": "the service family is a double step functions so step functions as a service workflow management products so while",
    "start": "1092420",
    "end": "1099140"
  },
  {
    "text": "why this is really interesting and important is that what we typically find as people start to decompose applications from a more monolithic",
    "start": "1099140",
    "end": "1106040"
  },
  {
    "text": "application or a traditional kind of compute workload into lambda is that you sometimes might think to yourself well",
    "start": "1106040",
    "end": "1112310"
  },
  {
    "text": "how do I make lambda functions call it lambda functions how do I handle parallelization how do I handle decision",
    "start": "1112310",
    "end": "1117890"
  },
  {
    "text": "trees how do I handle retries and failure logic and things like that so instead of you building a logic directly",
    "start": "1117890",
    "end": "1124160"
  },
  {
    "text": "into your lambda function you can use step functions to actually take and offload all this for you so we see here",
    "start": "1124160",
    "end": "1130880"
  },
  {
    "text": "an example of a fairly actually straightforward decision tree or workflow tree inside of step functions",
    "start": "1130880",
    "end": "1137350"
  },
  {
    "text": "we've got a function that has a choice and we have an execution function then calls another one which has basically to",
    "start": "1137350",
    "end": "1143960"
  },
  {
    "text": "make a decision about which path it should take here if it follows one of the other paths at some point it does a",
    "start": "1143960",
    "end": "1149060"
  },
  {
    "text": "parallel task it waits for both of those to finish has one more task and then ends and we can do all sorts of",
    "start": "1149060",
    "end": "1155180"
  },
  {
    "text": "complicated business logic inside of this again without having to put this into our function code and so what this means is that our lambda functions can",
    "start": "1155180",
    "end": "1161570"
  },
  {
    "text": "be basically just our business logic the actual work that we need to do and then",
    "start": "1161570",
    "end": "1166580"
  },
  {
    "text": "our work flow logic can be brought up to step functions so for many of our customers we see their lambda functions are in the tens of lines of code whereas",
    "start": "1166580",
    "end": "1174200"
  },
  {
    "text": "a traditional micro service might exist in the many hundreds of thousands of lines of code so I like to throw around",
    "start": "1174200",
    "end": "1179900"
  },
  {
    "text": "the term nano services which maybe is a little too far and into the future of what we're seeing people do but",
    "start": "1179900",
    "end": "1185510"
  },
  {
    "text": "realistically it does represent how people are building lambda based applications Amazon likes one of our AI",
    "start": "1185510",
    "end": "1192380"
  },
  {
    "text": "services this is a service that can allow you to take speech and via using",
    "start": "1192380",
    "end": "1197420"
  },
  {
    "text": "natural language understanding in automatic speech recognition derive the text from the either the audio that's being",
    "start": "1197420",
    "end": "1205610"
  },
  {
    "text": "spoken into it the voice or it can take textual based conversations and pull it apart and derive meaning from that as",
    "start": "1205610",
    "end": "1211130"
  },
  {
    "text": "well and so this is a service used to build chat BOTS again where they'd be audio based or text based and actually one of",
    "start": "1211130",
    "end": "1217130"
  },
  {
    "text": "the core services that powers Alexa behind the scenes and Solex uses lambda for fulfillment of actions so let's talk",
    "start": "1217130",
    "end": "1224539"
  },
  {
    "text": "really briefly about what that means so let's assume that I want to ask my chat bot to help me book a hotel and so I'm",
    "start": "1224539",
    "end": "1231350"
  },
  {
    "text": "going to say to it that I want to book a hotel in New York City the automatic speech recognition inside of Lex is",
    "start": "1231350",
    "end": "1236779"
  },
  {
    "text": "going to pull apart the individual words that are part of that the natural language processing is going to see that I have intense around doing a hotel",
    "start": "1236779",
    "end": "1243200"
  },
  {
    "text": "booking in New York City and so there's this intent and slot model basically",
    "start": "1243200",
    "end": "1249080"
  },
  {
    "text": "then these utterances we can get past into lambda and then lambda has the ability to say you know what we need a little bit more information about this",
    "start": "1249080",
    "end": "1255289"
  },
  {
    "text": "so we know New York City but let me go ahead and ask what time it is or what day I want to check in so again lambda",
    "start": "1255289",
    "end": "1262010"
  },
  {
    "text": "can help handle business logic it can also mean a thing that talks to your database to create the booking or talk to another API service and then",
    "start": "1262010",
    "end": "1268399"
  },
  {
    "text": "basically Lex can then reply back out through potentially Amazon Poly a verbal response and Polly today supports a",
    "start": "1268399",
    "end": "1274970"
  },
  {
    "text": "couple different languages and voices combining lambda and Amazon Canisius is",
    "start": "1274970",
    "end": "1282019"
  },
  {
    "text": "another really popular application architecture model for ADA for service",
    "start": "1282019",
    "end": "1287210"
  },
  {
    "text": "applications so what you could do here with Kinesis and there's a couple different components to Kinesis today",
    "start": "1287210",
    "end": "1292490"
  },
  {
    "text": "you can use two streams Kinesis firehose can use analytics and actually lambda can interface with all of those but",
    "start": "1292490",
    "end": "1298039"
  },
  {
    "text": "primarily what we're seeing customers do is ingesting data and then they need to do some sort of near time near real-time compute against that data and so in this",
    "start": "1298039",
    "end": "1305510"
  },
  {
    "text": "case we see kind of an architecture we have a Kenisha stream coming in that data is then being processed by lambda",
    "start": "1305510",
    "end": "1310970"
  },
  {
    "text": "one of my lambda functions is going to take that data and put it in s3 the other ones gonna maybe process that data",
    "start": "1310970",
    "end": "1316220"
  },
  {
    "text": "and pull out some metadata about something put into dynamo and maybe put some data into cloud watch logs maybe",
    "start": "1316220",
    "end": "1322220"
  },
  {
    "text": "i'm processing an event stream from one of my own products and so there's a lot of different things that you can do in",
    "start": "1322220",
    "end": "1327409"
  },
  {
    "text": "this space and this is again one of the larger use cases for service applications today one example of this",
    "start": "1327409",
    "end": "1334669"
  },
  {
    "text": "actually comes from bustled so bustle calm is a news and entertainment a lifestyle and fashion website for women I the state this data",
    "start": "1334669",
    "end": "1343340"
  },
  {
    "text": "might be a little data at this point but at the time of the use case they did with us they had fifty two million monthly users a hundred million events",
    "start": "1343340",
    "end": "1349820"
  },
  {
    "text": "daily and by moving from a traditional compute environment to serve a list they were able to save eighty four percent on",
    "start": "1349820",
    "end": "1356510"
  },
  {
    "text": "what it was costing them to run their technology in this case now they have zero servers that they manage control",
    "start": "1356510",
    "end": "1363350"
  },
  {
    "text": "update patch etc so zero operating system an automatic scaling built in no",
    "start": "1363350",
    "end": "1368750"
  },
  {
    "text": "more needing to tweak or tune auto scaling rules or needed to think about any of the other things that would",
    "start": "1368750",
    "end": "1374270"
  },
  {
    "text": "typically go into managing this from a traditional computing environment so what architecture that they've shared is",
    "start": "1374270",
    "end": "1379520"
  },
  {
    "text": "how they handle event streaming so this here is a fairly sophisticated event streaming pipeline where they're taking",
    "start": "1379520",
    "end": "1384830"
  },
  {
    "text": "in data coming from their customers either over mobile device or over traditional you know compute most",
    "start": "1384830",
    "end": "1389960"
  },
  {
    "text": "browsers into an API gateway into lambda back-end that's then going into Amazon Kinesis where the data is passed into",
    "start": "1389960",
    "end": "1396800"
  },
  {
    "text": "both another lambda function as well as directly into s3 the one lambda function",
    "start": "1396800",
    "end": "1401840"
  },
  {
    "text": "is taking the data that's coming in putting data and then into elasticsearch into cloud watch into mobile analytics",
    "start": "1401840",
    "end": "1407920"
  },
  {
    "text": "into Redis the data that's in s3 is then made available to redshift and then it can be looked at the RBI tool Amazon",
    "start": "1407920",
    "end": "1414980"
  },
  {
    "text": "quick site so outside of redshift which is a a largely a most zero",
    "start": "1414980",
    "end": "1420530"
  },
  {
    "text": "Administration managed data warehouse and outside an elastic search which is another managed service for them they",
    "start": "1420530",
    "end": "1427220"
  },
  {
    "text": "really don't have much in the way of servers that they're managing here again that entire interest pipeline will scale",
    "start": "1427220",
    "end": "1432410"
  },
  {
    "text": "up automatically for them have high availability and have a high level of security basically ability to very fine-grain lock down and tighten up this",
    "start": "1432410",
    "end": "1440240"
  },
  {
    "text": "the permissions for these services another example for this here is Ana distributed computing in the research",
    "start": "1440240",
    "end": "1446510"
  },
  {
    "start": "1443000",
    "end": "1443000"
  },
  {
    "text": "space and the University of California Berkeley they created a open source tool called pyrin and so pyrin is meant for",
    "start": "1446510",
    "end": "1453770"
  },
  {
    "text": "kind of massive large-scale distributed computation and they did just a couple of basic tests where they were able to",
    "start": "1453770",
    "end": "1460130"
  },
  {
    "text": "show really incredible results using lambda where they were running over 2,800 simultaneous lambda functions",
    "start": "1460130",
    "end": "1467549"
  },
  {
    "text": "processing between 60 and 80 gigabytes per second which is a lot of processing",
    "start": "1467549",
    "end": "1472779"
  },
  {
    "text": "to do in near-real-time free very very very low cost and that was one of the other key takeaways from",
    "start": "1472779",
    "end": "1478330"
  },
  {
    "text": "this square-enix the company behind the Dragon Quest games moved from a",
    "start": "1478330",
    "end": "1485769"
  },
  {
    "start": "1480000",
    "end": "1480000"
  },
  {
    "text": "traditional compute based model for processing images which used to take them way way longer than it did once",
    "start": "1485769",
    "end": "1492039"
  },
  {
    "text": "they moved to lambda in fact it used to take them hours they move down to 10",
    "start": "1492039",
    "end": "1497110"
  },
  {
    "text": "seconds or so per image at one tenth of the cost saving them again a whole lot",
    "start": "1497110",
    "end": "1502750"
  },
  {
    "text": "of money here right brings something in at 120th the cost is pretty drastic savings for a workload home 24 which is",
    "start": "1502750",
    "end": "1510700"
  },
  {
    "text": "a European online shopping market for home goods of all sorts of different",
    "start": "1510700",
    "end": "1515710"
  },
  {
    "text": "types moved from having a traditional compute environment to doing a bunch of workloads on lambda as well",
    "start": "1515710",
    "end": "1521889"
  },
  {
    "text": "they actually make heavy usage here of step functions as part of a data",
    "start": "1521889",
    "end": "1527019"
  },
  {
    "text": "aggregation and ingest to help with their product and so in this case the",
    "start": "1527019",
    "end": "1532029"
  },
  {
    "text": "cost savings was about 99 percent they're able to much more quickly stand up these ETL pipelines and then they",
    "start": "1532029",
    "end": "1537639"
  },
  {
    "text": "have increased resilience that they've seen as part of this so they're seeing fewer downtime or smaller depths of",
    "start": "1537639",
    "end": "1543129"
  },
  {
    "text": "downtime or issues as part of this move to service so lastly here one of the",
    "start": "1543129",
    "end": "1549190"
  },
  {
    "text": "other questions that we get is can I build applications using server lists",
    "start": "1549190",
    "end": "1554860"
  },
  {
    "text": "that have to meet certain accreditation or compliance standards the answer is yes so across most of the services that",
    "start": "1554860",
    "end": "1560799"
  },
  {
    "text": "fall into our service stack they are now as of about September covered under both HIPAA and PCI so whether you're building",
    "start": "1560799",
    "end": "1567970"
  },
  {
    "text": "a financial application or a healthcare application you can start looking at doing this with service as well so I'm",
    "start": "1567970",
    "end": "1574120"
  },
  {
    "text": "gonna hand it over here to Nikki to talk a little bit more about what Capital One has done as part of their journey to service all right",
    "start": "1574120",
    "end": "1580539"
  },
  {
    "text": "thanks Chris hello everyone my name is Nikki Joshi I'm a director of software",
    "start": "1580539",
    "end": "1586029"
  },
  {
    "text": "engineering at Capital One and I'm here to share our experiences about migrating one of her web applications to a service",
    "start": "1586029",
    "end": "1593409"
  },
  {
    "text": "architecture as many of you may know one is a top 10 u.s. bank with assets in",
    "start": "1593409",
    "end": "1600840"
  },
  {
    "text": "the tuna tune of 50 billion US dollars as many of you may not know is that Capital One is a technical institution",
    "start": "1600840",
    "end": "1609000"
  },
  {
    "text": "on the cutting edge of technology we are leading the pack in the move to public",
    "start": "1609000",
    "end": "1614700"
  },
  {
    "text": "cloud in AWS a strategic partner in this process according to alexa.com our",
    "start": "1614700",
    "end": "1622140"
  },
  {
    "text": "primary website capital 1.com is a top hundred us site in terms of web traffic",
    "start": "1622140",
    "end": "1628790"
  },
  {
    "text": "the story I'm going to share today is about our experiences of migrating our",
    "start": "1628790",
    "end": "1634650"
  },
  {
    "text": "capital one auto finance marketing website to a server less architecture",
    "start": "1634650",
    "end": "1641240"
  },
  {
    "start": "1641000",
    "end": "1641000"
  },
  {
    "text": "the story for us begins in 2015 2015 is when we started to migrate our systems",
    "start": "1641360",
    "end": "1648660"
  },
  {
    "text": "to AWS for a capital one auto finance website we broke the migration into two phases",
    "start": "1648660",
    "end": "1656510"
  },
  {
    "text": "the first phase went live in August of 2016 and we completed a server list",
    "start": "1656510",
    "end": "1663570"
  },
  {
    "text": "migration to in April of this year",
    "start": "1663570",
    "end": "1668299"
  },
  {
    "start": "1668000",
    "end": "1668000"
  },
  {
    "text": "before starting the migration we took a step back and looked at the holistic requirements of a marketing site",
    "start": "1670250",
    "end": "1677600"
  },
  {
    "text": "basically we had to migrate the full functionality of the site as well as have the ability for advanced",
    "start": "1677600",
    "end": "1684360"
  },
  {
    "text": "functionalities like a bee testing and multivariate testing we are a financial",
    "start": "1684360",
    "end": "1690270"
  },
  {
    "text": "institution so security was obviously critical for us we had to be set up in a",
    "start": "1690270",
    "end": "1696150"
  },
  {
    "text": "resilient active-active manner this is a marketing site so obviously the response time of the",
    "start": "1696150",
    "end": "1703110"
  },
  {
    "text": "site had to be very low and we had to be SEO friendly as well we had to have the",
    "start": "1703110",
    "end": "1710730"
  },
  {
    "text": "ability for continuous deployments and be set up in a low maintenance mode and",
    "start": "1710730",
    "end": "1716300"
  },
  {
    "text": "we didn't want to reinvent the wheel so there were a lot of existing tools and",
    "start": "1716300",
    "end": "1721440"
  },
  {
    "text": "processes in the organization that we wanted to reuse primarily around logging",
    "start": "1721440",
    "end": "1727100"
  },
  {
    "text": "monitoring and deployments this is where we started from so this",
    "start": "1727100",
    "end": "1734610"
  },
  {
    "start": "1731000",
    "end": "1731000"
  },
  {
    "text": "architecture is not very different than what many enterprises have even today for the web application stacks while",
    "start": "1734610",
    "end": "1742500"
  },
  {
    "text": "there are many challenges with this architecture there are a few of them they were highly limiting for us the",
    "start": "1742500",
    "end": "1749730"
  },
  {
    "text": "first was that since this is an enterprise-wide common deployment there was one release calendar that dictated",
    "start": "1749730",
    "end": "1757080"
  },
  {
    "text": "our release cycle this meant that sometimes our features had to be developed months in advance",
    "start": "1757080",
    "end": "1763200"
  },
  {
    "text": "before we could release them to production obviously that's not optimal for marketing site in this day and age",
    "start": "1763200",
    "end": "1769760"
  },
  {
    "text": "in addition to that this is a highly tightly coupled architecture there were",
    "start": "1769760",
    "end": "1776070"
  },
  {
    "text": "times when there were issues in one part of the application that would cause issues in an unrelated part of the",
    "start": "1776070",
    "end": "1782970"
  },
  {
    "text": "application which is obviously unacceptable so with that we started a",
    "start": "1782970",
    "end": "1789120"
  },
  {
    "text": "service migration and interphase one we achieve two objectives the first was to",
    "start": "1789120",
    "end": "1796710"
  },
  {
    "text": "move off and on-premises data center and moved to AWS as well as have a server",
    "start": "1796710",
    "end": "1803850"
  },
  {
    "text": "less content strategy in place this is the architecture that we landed for our",
    "start": "1803850",
    "end": "1810299"
  },
  {
    "start": "1807000",
    "end": "1807000"
  },
  {
    "text": "server less content for our application architecture we chose a single page",
    "start": "1810299",
    "end": "1817220"
  },
  {
    "text": "application framework and we use angular for that as many of you know a single",
    "start": "1817220",
    "end": "1823260"
  },
  {
    "text": "page application is served over multiple HTTP requests the first HTTP request",
    "start": "1823260",
    "end": "1828480"
  },
  {
    "text": "loads the application in the browser and then subsequent API calls are made to",
    "start": "1828480",
    "end": "1833789"
  },
  {
    "text": "load the content and the functionality of the application we created a",
    "start": "1833789",
    "end": "1839070"
  },
  {
    "text": "pre-rendered bundle of the angular app and stored that in the s3 bucket and we",
    "start": "1839070",
    "end": "1844980"
  },
  {
    "text": "enabled web hosting on the s3 bucket as well this content that was deployed in",
    "start": "1844980",
    "end": "1850679"
  },
  {
    "text": "the s3 bucket in the East region was also replicated to an s3 bucket in the West region in front of the s3 buckets",
    "start": "1850679",
    "end": "1858090"
  },
  {
    "text": "we leveraged Amazon CloudFront for hosting our SSL certificate for SSL",
    "start": "1858090",
    "end": "1863640"
  },
  {
    "text": "termination in front of CloudFront we leveraged route 53 which gives us a resilient",
    "start": "1863640",
    "end": "1869970"
  },
  {
    "text": "active active set up in addition to that we're able to use a non eat abuse component like Akamai at the edge for",
    "start": "1869970",
    "end": "1877080"
  },
  {
    "text": "content caching to summarize I want to call it three points in this architecture the first by leveraging the",
    "start": "1877080",
    "end": "1885179"
  },
  {
    "text": "s3 buckets we were able to eliminate the need for any ec2 instances secondly by",
    "start": "1885179",
    "end": "1891659"
  },
  {
    "text": "leveraging cloud front and route 53 we were able to meet our security and resiliency requirements and finally were",
    "start": "1891659",
    "end": "1899970"
  },
  {
    "text": "able to continue our investment in Akamai and leverage that investment and",
    "start": "1899970",
    "end": "1905059"
  },
  {
    "text": "have the ability for content caching at the edge while our destination state was",
    "start": "1905059",
    "end": "1913679"
  },
  {
    "text": "to go fully server less we ran into certain issues with the ability for us to use lambda functions in production in",
    "start": "1913679",
    "end": "1921090"
  },
  {
    "text": "2016 as a result of that we had to come up with an interim ec2 based",
    "start": "1921090",
    "end": "1926730"
  },
  {
    "text": "architecture for that we used a cluster of ec2 instances running Apache which",
    "start": "1926730",
    "end": "1933659"
  },
  {
    "text": "acted as a Web Application Firewall the ec2 instances in the back are running",
    "start": "1933659",
    "end": "1939210"
  },
  {
    "text": "tomcat running your application logic both ec2 instances affronted with load balancers this setup is then replicated",
    "start": "1939210",
    "end": "1948299"
  },
  {
    "text": "in a cost tree availability zones in the east region the entire setup is then",
    "start": "1948299",
    "end": "1954869"
  },
  {
    "text": "replicated in the west region as well and then we leveraged route 53 in the front of that for a resident",
    "start": "1954869",
    "end": "1960960"
  },
  {
    "text": "active-active setup for a simple a simple application like we had this",
    "start": "1960960",
    "end": "1966779"
  },
  {
    "text": "infrastructure definitely seemed to be a little bit of an overkill so as we are",
    "start": "1966779",
    "end": "1972480"
  },
  {
    "text": "going to talk about our complete serverless migration and phase 2 i'll address about how we migrated this over",
    "start": "1972480",
    "end": "1978389"
  },
  {
    "text": "to lambda functions wrapping up our",
    "start": "1978389",
    "end": "1985700"
  },
  {
    "start": "1985000",
    "end": "1985000"
  },
  {
    "text": "phase 1 migration this is the simple C icd pipeline that we created for content",
    "start": "1985700",
    "end": "1991730"
  },
  {
    "text": "we stored our application templates in github we stored our content in a",
    "start": "1991730",
    "end": "1996929"
  },
  {
    "text": "content management system we leverage an ec2 bill server which pulls the templates from github pulls",
    "start": "1996929",
    "end": "2003590"
  },
  {
    "text": "the content from CMS packages them together and then utilizes the AWS CLI",
    "start": "2003590",
    "end": "2009760"
  },
  {
    "text": "to push this content package bundle into an s3 bucket as a result of this we were",
    "start": "2009760",
    "end": "2017210"
  },
  {
    "text": "able to achieve two things first of all we got a very responsive response time",
    "start": "2017210",
    "end": "2022940"
  },
  {
    "text": "for a website and this resulted in our angular application being SEO friendly",
    "start": "2022940",
    "end": "2028220"
  },
  {
    "text": "as well coming to our server list migration phase to this is where we went",
    "start": "2028220",
    "end": "2035360"
  },
  {
    "text": "full server less we moved our api's over to a lambda functions and we created a",
    "start": "2035360",
    "end": "2042320"
  },
  {
    "text": "CI CD process for our api's as well this",
    "start": "2042320",
    "end": "2047810"
  },
  {
    "text": "is the architecture that we landed on for our move to server less AP is the",
    "start": "2047810",
    "end": "2053300"
  },
  {
    "text": "heart of this is obviously the lambda function in the front which is running or application logic that lambda",
    "start": "2053300",
    "end": "2060139"
  },
  {
    "text": "function is logging to cloud watch since our target destination state in the our",
    "start": "2060140",
    "end": "2067639"
  },
  {
    "text": "enterprise's Splunk we needed to find a way to get the logs from cloud watch",
    "start": "2067640",
    "end": "2072679"
  },
  {
    "text": "into Splunk for that we were able to use another lambda function that was",
    "start": "2072679",
    "end": "2078050"
  },
  {
    "text": "triggered with the logs that were in ingested in the cloud watch and put into",
    "start": "2078050",
    "end": "2083810"
  },
  {
    "text": "Splunk you may notice something that's fronting the lambda function called the capital 1 enterprise gateway think of",
    "start": "2083810",
    "end": "2091370"
  },
  {
    "text": "that as something very similar to the AWS api gateway that chris reference a little bit earlier in his slides since",
    "start": "2091370",
    "end": "2098570"
  },
  {
    "text": "capital 1 had an enterprise gateway that was performing functionally similar to",
    "start": "2098570",
    "end": "2105710"
  },
  {
    "text": "what we have for the AWS api gateway we chose to leverage the enterprise gateway",
    "start": "2105710",
    "end": "2111290"
  },
  {
    "text": "that we already had this set up was then created in the East region replicated",
    "start": "2111290",
    "end": "2117680"
  },
  {
    "text": "over to the West region as well and then we leveraged route 53 again for a resilient active active set up to",
    "start": "2117680",
    "end": "2125990"
  },
  {
    "text": "summarize two points on this architecture by leveraging lambda functions we were able to get rid of our",
    "start": "2125990",
    "end": "2131660"
  },
  {
    "text": "ec2 and this is completely and we were still able to leverage non eat abuse",
    "start": "2131660",
    "end": "2137780"
  },
  {
    "text": "components that the enterprise already had investment in like Splunk and the enterprise gateway for us to continue",
    "start": "2137780",
    "end": "2145220"
  },
  {
    "text": "and go fully service this is the CI CD",
    "start": "2145220",
    "end": "2151640"
  },
  {
    "start": "2149000",
    "end": "2149000"
  },
  {
    "text": "pipeline that we built for a lambda functions we store our lambda function",
    "start": "2151640",
    "end": "2156890"
  },
  {
    "text": "code and github jenkins is our build tool of choice in the enterprise on code",
    "start": "2156890",
    "end": "2163400"
  },
  {
    "text": "commits to github there's a build job that gets triggered in jenkins which pulls the code leverages the AWS CLI and",
    "start": "2163400",
    "end": "2172270"
  },
  {
    "text": "creates a deployment bundle in s3 bucket leveraging the AWC like commands like",
    "start": "2172270",
    "end": "2178550"
  },
  {
    "text": "lambda create and lambda update we were able to create and update a lambda",
    "start": "2178550",
    "end": "2183890"
  },
  {
    "text": "functions accordingly a couple of other options that we looked at was the",
    "start": "2183890",
    "end": "2189380"
  },
  {
    "text": "serverless application model and the serverless framework but for what we",
    "start": "2189380",
    "end": "2194630"
  },
  {
    "text": "needed for application was fairly simple and hence we chose to go with a very simple architecture like this coming to",
    "start": "2194630",
    "end": "2205160"
  },
  {
    "start": "2204000",
    "end": "2204000"
  },
  {
    "text": "the benefits of server less we as a result of the migration we ended up with",
    "start": "2205160",
    "end": "2210890"
  },
  {
    "text": "a very simple architecture basically it runs itself and it scales itself one of",
    "start": "2210890",
    "end": "2218960"
  },
  {
    "text": "the biggest benefits that we have is we no longer have to worry about am i rehydration and believe me for us that's",
    "start": "2218960",
    "end": "2227240"
  },
  {
    "text": "something that's keeping our compliance and operations teams extremely happy",
    "start": "2227240",
    "end": "2232690"
  },
  {
    "text": "finally coming to the cost savings as a result of this migration we",
    "start": "2232690",
    "end": "2238160"
  },
  {
    "text": "conservatively have been able to save about $50,000 a year by leveraging s3",
    "start": "2238160",
    "end": "2244940"
  },
  {
    "text": "web hosting and by leveraging lambda functions we've been able to eliminate",
    "start": "2244940",
    "end": "2251020"
  },
  {
    "text": "about twenty ec2 instances e-l bees and EBS volumes from our infrastructure not",
    "start": "2251020",
    "end": "2259730"
  },
  {
    "text": "to mention the countless number of hours that we have saved in terms of operations as well",
    "start": "2259730",
    "end": "2267130"
  },
  {
    "start": "2267000",
    "end": "2267000"
  },
  {
    "text": "coming over to lessons learned a migration can be a journey so would",
    "start": "2267130",
    "end": "2272719"
  },
  {
    "text": "recommend a plan accordingly when you're starting the migration start small start",
    "start": "2272719",
    "end": "2279049"
  },
  {
    "text": "with some of the easier pieces of your system and then go on to some of the",
    "start": "2279049",
    "end": "2284690"
  },
  {
    "text": "more complex pieces as we've demonstrated there's no one-size-fits-all with serverless",
    "start": "2284690",
    "end": "2291079"
  },
  {
    "text": "architecture you can go as much serverless as you want or as little service as you want reuse existing tools",
    "start": "2291079",
    "end": "2299599"
  },
  {
    "text": "and processes that you may already have you don't want to reinvent the wheel with first something like a system",
    "start": "2299599",
    "end": "2305299"
  },
  {
    "text": "migration if possible and finally get stakeholder buy-in",
    "start": "2305299",
    "end": "2311209"
  },
  {
    "text": "early in the process there's a lot of new learnings here but your enterprise",
    "start": "2311209",
    "end": "2316400"
  },
  {
    "text": "architects your security teams operation teams compliance teams will want to know",
    "start": "2316400",
    "end": "2321979"
  },
  {
    "text": "about your migration steps and will be very happy to be a part of this process as well so that wraps up my piece of the",
    "start": "2321979",
    "end": "2329839"
  },
  {
    "text": "presentation and I'd like to hand it back over to Chris drop up a presentation thank you thanks",
    "start": "2329839",
    "end": "2337749"
  },
  {
    "text": "I don't mean to call him out but this is Nikki's first time presenting out reinvent and I think he just did a",
    "start": "2341260",
    "end": "2346330"
  },
  {
    "text": "really incredible job and it spoke really well thank you thank you thank you so kind of kind of in summarization",
    "start": "2346330",
    "end": "2356410"
  },
  {
    "text": "here really great story from capital one where they were able to reuse some of the process and technology they had used",
    "start": "2356410",
    "end": "2362350"
  },
  {
    "text": "previously able to shift and migrate an on-prem solution up through the AWS",
    "start": "2362350",
    "end": "2367540"
  },
  {
    "text": "cloud using traditional compute resources and then eventually moving to a very simplistic service application",
    "start": "2367540",
    "end": "2373900"
  },
  {
    "text": "architecture some takeaways if you're new to service here today all right so the for kind of key things that we",
    "start": "2373900",
    "end": "2380200"
  },
  {
    "text": "consider as guiding rules for service here at AWS no servers to manager provision no cost for idle high",
    "start": "2380200",
    "end": "2388150"
  },
  {
    "text": "availability and automatic scalability built into it the architecture that Nikki just talked about is able to",
    "start": "2388150",
    "end": "2394360"
  },
  {
    "text": "leverage all four of those benefits in helping out their organization again save money save time achieve higher",
    "start": "2394360",
    "end": "2400450"
  },
  {
    "text": "resiliency and scalability with less work and effort lambda and many of the other eight of us service applications",
    "start": "2400450",
    "end": "2407290"
  },
  {
    "text": "and services that we have our integrated really deeply across the stack and if you come to any of the other service",
    "start": "2407290",
    "end": "2413020"
  },
  {
    "text": "track sessions this week or actually probably in a lot of the tracks that you'll see this week you'll see lambda and some of the rest of these services",
    "start": "2413020",
    "end": "2419110"
  },
  {
    "text": "pop up as again either core components or helper solutions in terms of what it",
    "start": "2419110",
    "end": "2424180"
  },
  {
    "text": "is that you might be doing and so you'd want to look at again some of these services here that today have the ability to invoke lambda and you know",
    "start": "2424180",
    "end": "2430630"
  },
  {
    "text": "coordination some of the rest of these services and then lastly from a use case perspective we've talked about just kind",
    "start": "2430630",
    "end": "2436210"
  },
  {
    "text": "of a couple of the big bucketed ones here today web applications backends data processing chatbots",
    "start": "2436210",
    "end": "2443020"
  },
  {
    "text": "amazon alexa and then IT automation but don't think of these six buckets as being fairly constrained there's a lot",
    "start": "2443020",
    "end": "2449380"
  },
  {
    "text": "of things that fits into them and so think about your own architecture think about the various application pools and",
    "start": "2449380",
    "end": "2454600"
  },
  {
    "text": "tiers that you run think about the various you know one-off compute resources that you might have and think about how you might be able to think",
    "start": "2454600",
    "end": "2460750"
  },
  {
    "text": "about moving them to a solution based on any of us lambda a lot of what I've talked about here at least today can be",
    "start": "2460750",
    "end": "2467080"
  },
  {
    "text": "found on our servers LAN engage at AWS and amazon.com server lists we have reference guides getting started guides",
    "start": "2467080",
    "end": "2473200"
  },
  {
    "text": "all our documentation links to our compute blog which gets updated sometimes multiple times a week with interesting",
    "start": "2473200",
    "end": "2479410"
  },
  {
    "text": "content and all sorts of other things like partner solutions as well so check to check that out again my name is Chris",
    "start": "2479410",
    "end": "2486430"
  },
  {
    "text": "one's senior developer advocate for service at AWS you can find me at MUNs at amazon.com or at Chrisman's on",
    "start": "2486430",
    "end": "2492579"
  },
  {
    "text": "twitter please give us feedback on this talk we'd love to know what we could do better next time what you'd like to see",
    "start": "2492579",
    "end": "2498220"
  },
  {
    "text": "in here from us in the future again this is a CMP 211 thank you very much for coming have a great rest here we carry a",
    "start": "2498220",
    "end": "2504339"
  },
  {
    "text": "night",
    "start": "2504339",
    "end": "2506549"
  }
]