[
  {
    "text": "good morning my name is Arun Gupta and I'm a principal open source technologies",
    "start": "4400",
    "end": "9510"
  },
  {
    "text": "for Amazon I'm Sara Wells I'm technical director for operations reliability at the financial times micro services is",
    "start": "9510",
    "end": "16710"
  },
  {
    "text": "all the rage these days and customers are using containers to deploy that architecture pattern in their",
    "start": "16710",
    "end": "22590"
  },
  {
    "text": "applications today we'll talk about how you can use AWS to build your micro",
    "start": "22590",
    "end": "28560"
  },
  {
    "text": "services using containers and then we'll hear from Financial Times how they have been using this as a platform for going",
    "start": "28560",
    "end": "34649"
  },
  {
    "text": "into production let's take a look back at development in Amazon you know this",
    "start": "34649",
    "end": "41460"
  },
  {
    "text": "is back in 2001 timeframe now we had a monolithic architecture at that point of",
    "start": "41460",
    "end": "46620"
  },
  {
    "text": "time like everybody else around that time and that means if you want to change one thing in the application the",
    "start": "46620",
    "end": "53430"
  },
  {
    "text": "entire application has to be changed think about you know you are driving a car and you want to change the wheel of",
    "start": "53430",
    "end": "59039"
  },
  {
    "text": "the car but you want to get a brand new car there is no option for changing the wheel only I like shiny new cards but",
    "start": "59039",
    "end": "65670"
  },
  {
    "text": "that is an expensive proposition which my family would not approved and that's an unnecessary maintenance has it for me",
    "start": "65670",
    "end": "72810"
  },
  {
    "text": "as well so one of the problems that we realized that Amazon is lot of people were setting up their own infrastructure",
    "start": "72810",
    "end": "78659"
  },
  {
    "text": "and that was taking such a long time for them to introduce a new feature into the",
    "start": "78659",
    "end": "83670"
  },
  {
    "text": "application so back in 2006 Andy Jesse started a proposal that hey we should",
    "start": "83670",
    "end": "88820"
  },
  {
    "text": "propose data center as a utility to our customers first of all internal and then",
    "start": "88820",
    "end": "94350"
  },
  {
    "text": "to external and that's how essentially AWS was started then they started realizing you know these services that",
    "start": "94350",
    "end": "100229"
  },
  {
    "text": "are being used all across Amazon we started creating them as services that",
    "start": "100229",
    "end": "105570"
  },
  {
    "text": "could potentially be used internally and then externally so we started with sqs as three so on so forth and today we",
    "start": "105570",
    "end": "112290"
  },
  {
    "text": "have about 120 plus services that customers have access to so essentially amazon.com architecture",
    "start": "112290",
    "end": "119640"
  },
  {
    "text": "change from one big monolithic application with multiple service teams working on it to multiple teams",
    "start": "119640",
    "end": "127550"
  },
  {
    "text": "collaborating on services and then those services really working with each other",
    "start": "127550",
    "end": "132960"
  },
  {
    "text": "each team was really a tupiza team now you may think american-sized pizza or a",
    "start": "132960",
    "end": "138090"
  },
  {
    "text": "European size visa opinions could differ or you may think hey there's this guy who eats four slices as opposed to two",
    "start": "138090",
    "end": "144840"
  },
  {
    "text": "slices but that's not what a troop is a team is about two peas a team is really",
    "start": "144840",
    "end": "150660"
  },
  {
    "text": "about full autonomy it's a single",
    "start": "150660",
    "end": "155940"
  },
  {
    "text": "threaded discussion you build the product you run the product you are creating a micro service that is working",
    "start": "155940",
    "end": "163440"
  },
  {
    "text": "for you you have full accountability of it you have the full ability to change any",
    "start": "163440",
    "end": "168720"
  },
  {
    "text": "underlying implementation of it you perform the DevOps model where you build it you run it you break it you fix it",
    "start": "168720",
    "end": "175710"
  },
  {
    "text": "and you move on with it now earlier this year I tweeted that customers think that",
    "start": "175710",
    "end": "182400"
  },
  {
    "text": "monolith eggs are really bad and micro-services is a golden hammer that can solve all of my issues so I want to",
    "start": "182400",
    "end": "189030"
  },
  {
    "text": "put a disclaimer over there think about what is the business problem that you are trying to solve you are trying to",
    "start": "189030",
    "end": "195540"
  },
  {
    "text": "innovate for your customer you're trying to bring agility in your application development process that is what matters",
    "start": "195540",
    "end": "201330"
  },
  {
    "text": "if you're able to do that with monolithic sure but we're seeing a lot more customers going on to the micro",
    "start": "201330",
    "end": "207180"
  },
  {
    "text": "services route and that's where this session is absolutely relevant for you now if you are on the micro services",
    "start": "207180",
    "end": "214980"
  },
  {
    "text": "route there are changes that need to be made what we talked about is just amazon's history so far on how we have",
    "start": "214980",
    "end": "221460"
  },
  {
    "text": "gone from monolithic to micro services based architecture and hundreds and thousands of customers have done that",
    "start": "221460",
    "end": "226530"
  },
  {
    "text": "and of course amazon has held a lot of them as well but what kind of changes are required in order to onboard on",
    "start": "226530",
    "end": "233070"
  },
  {
    "text": "their journey well you need changes in your architectural patterns you need changes in your operational model and",
    "start": "233070",
    "end": "238830"
  },
  {
    "text": "you need changes in how you deliver software let's talk about them one by",
    "start": "238830",
    "end": "245610"
  },
  {
    "text": "one the first one is changes to architectural patterns now if you look",
    "start": "245610",
    "end": "250770"
  },
  {
    "text": "at monoliths they are good I know they serve a purpose you know they've been you know not broken don't fix it kind of",
    "start": "250770",
    "end": "256650"
  },
  {
    "text": "paradigm they work first they worked fine and typically the thought process is the monoliths are simple at first but",
    "start": "256650",
    "end": "263550"
  },
  {
    "text": "as the complexity of the application as members get to the team members move",
    "start": "263550",
    "end": "269310"
  },
  {
    "text": "to a different team now the complexity of the application grows and there is a additional coordination",
    "start": "269310",
    "end": "275790"
  },
  {
    "text": "overhead that needs to be done to maintain that monolith also the code related to similar function starts to",
    "start": "275790",
    "end": "282300"
  },
  {
    "text": "become copy pasted across different parts of the application because there is no concept of dry.you not really",
    "start": "282300",
    "end": "289110"
  },
  {
    "text": "don't repeat yourself but you're really copy pasting the code because you want to get that functionality up and running",
    "start": "289110",
    "end": "294500"
  },
  {
    "text": "all or nothing really could lead to downtime and a high impact of change for",
    "start": "294500",
    "end": "300450"
  },
  {
    "text": "the application because one change can bring the entire application down and that leads to bad customer experience",
    "start": "300450",
    "end": "307140"
  },
  {
    "text": "you don't want to go that route different parts of the application have different scaling requirements could be",
    "start": "307140",
    "end": "312990"
  },
  {
    "text": "CPU could be network could be disk but because it's a monolithic application",
    "start": "312990",
    "end": "318000"
  },
  {
    "text": "and the requirements have to be met for the entire application you always end up over provisioning so that the monolithic",
    "start": "318000",
    "end": "325080"
  },
  {
    "text": "application can be scaled accordingly that's an inefficient utilization of resources and last but not the least you",
    "start": "325080",
    "end": "332400"
  },
  {
    "text": "have a much longer build time a single change means you have to build an entire application and that's not really a job",
    "start": "332400",
    "end": "341930"
  },
  {
    "text": "so what we are looking at is taking that monolithic application one big monolithic application and breaking it",
    "start": "343010",
    "end": "350520"
  },
  {
    "text": "down into smaller functionalities and those functionalities are called as micro services and then they are",
    "start": "350520",
    "end": "357030"
  },
  {
    "text": "interacting with each other to create the same business experience in a monolithic world you really have a",
    "start": "357030",
    "end": "363240"
  },
  {
    "text": "shared release pipeline where all the developers are pushing their change through that shared release pipeline and",
    "start": "363240",
    "end": "368910"
  },
  {
    "text": "because it requires coordination and sometimes coordination breaks it can cause friction in the pipeline",
    "start": "368910",
    "end": "375380"
  },
  {
    "text": "you wanna upgrade a shared library you want to leverage the new feature that has been recently introduced in version",
    "start": "375380",
    "end": "381960"
  },
  {
    "text": "1.1 well the other team does not want to use that feature so good luck with kind",
    "start": "381960",
    "end": "387030"
  },
  {
    "text": "of figuring out how you can upgrade the shared library there are concepts like March Fridays where everybody building",
    "start": "387030",
    "end": "393840"
  },
  {
    "text": "that application is gonna sit together on Friday so that they can actually agree upon what the merge is going to",
    "start": "393840",
    "end": "399330"
  },
  {
    "text": "look like and what's the version of the libraries they're gonna use even though you want to push a single change to your",
    "start": "399330",
    "end": "405160"
  },
  {
    "text": "application you need to rebuild retest everything for a fast growth company",
    "start": "405160",
    "end": "411430"
  },
  {
    "text": "trying to innovate and compete this overhead and sluggishness is completely unacceptable let's switch gears on how",
    "start": "411430",
    "end": "419170"
  },
  {
    "text": "micro services really help you on that well of course you have many smaller minimal function micro services that are",
    "start": "419170",
    "end": "426130"
  },
  {
    "text": "working with each other to create the same business experience for yourself each micro service can deploy",
    "start": "426130",
    "end": "432010"
  },
  {
    "text": "independently each has its own data store they're all organized around",
    "start": "432010",
    "end": "437080"
  },
  {
    "text": "business capabilities what you're getting is your system boundary is your business boundary so you identify the",
    "start": "437080",
    "end": "443980"
  },
  {
    "text": "scope of the micro service and you focus on that part of it also the ability",
    "start": "443980",
    "end": "450390"
  },
  {
    "text": "because your focus is very small you can innovate lot more rapidly you can",
    "start": "450390",
    "end": "456040"
  },
  {
    "text": "continue to iterate the application lot more rapidly and you can continue to push changes a lot more rapidly as well",
    "start": "456040",
    "end": "464310"
  },
  {
    "text": "now because we are taking one big application and breaking it down into multiple smaller applications",
    "start": "465480",
    "end": "471390"
  },
  {
    "text": "integration becomes a top priority and getting integration right is absolutely",
    "start": "471390",
    "end": "476980"
  },
  {
    "text": "critical well first of all you need to avoid breaking changes the whole point",
    "start": "476980",
    "end": "482320"
  },
  {
    "text": "of a micro service is being able to make a change to one service and deploy it",
    "start": "482320",
    "end": "487360"
  },
  {
    "text": "and yet keep the business logic up and going so you want to make sure there are no breaking changes over there you also",
    "start": "487360",
    "end": "493510"
  },
  {
    "text": "want to make sure your api's or technology agnostic you don't want to use a api or a product which allows api",
    "start": "493510",
    "end": "501310"
  },
  {
    "text": "is to interact where the product defines what stack is going to be used in your application so think about you know no",
    "start": "501310",
    "end": "508360"
  },
  {
    "text": "one I use Enterprise Service buses as opposed to an HTTP REST API which is very stateless there is also a very low",
    "start": "508360",
    "end": "515770"
  },
  {
    "text": "coupling between the different micro services all communication between services happens using network calls and",
    "start": "515770",
    "end": "522300"
  },
  {
    "text": "basically enforce separation between the API versus the underlying implementation all the implementation detail is",
    "start": "522300",
    "end": "529900"
  },
  {
    "text": "completely hidden from the end-user or from the humor of the micro service which gives you the flexibility that you can change",
    "start": "529900",
    "end": "536350"
  },
  {
    "text": "your implementation detail rather quickly so essentially what you're",
    "start": "536350",
    "end": "543160"
  },
  {
    "text": "looking at is you know in case of your microservices you can look at Amazon API gateway which is a fully managed service",
    "start": "543160",
    "end": "549580"
  },
  {
    "text": "on how that could be the forefront of your api's it allows you to do metering",
    "start": "549580",
    "end": "555430"
  },
  {
    "text": "it allows you to do rate limiting it allows you to set up your HTTP REST API gateways and all of that together you",
    "start": "555430",
    "end": "563440"
  },
  {
    "text": "can start doing caching of your API is you can start scaling the API",
    "start": "563440",
    "end": "568750"
  },
  {
    "text": "accordingly if you need to if you need a private back-end then Amazon API supports private link integrations if",
    "start": "568750",
    "end": "575320"
  },
  {
    "text": "you need a private API you can also have your own VPC in which you can easily set",
    "start": "575320",
    "end": "580930"
  },
  {
    "text": "up that this API is can only be invoked from within the web VPC the way micro",
    "start": "580930",
    "end": "591910"
  },
  {
    "text": "services were looks like I know essentially it becomes very even driven architecture now you have multiple micro",
    "start": "591910",
    "end": "597490"
  },
  {
    "text": "services sitting around and they are waiting for an event to occur and even occurs you call the micro services the",
    "start": "597490",
    "end": "605020"
  },
  {
    "text": "micro service is essentially stateless you get a response back and then you move on how do you handle that",
    "start": "605020",
    "end": "613950"
  },
  {
    "text": "asynchronous communication you could do synchronous communication as well but the asynchrony is what gives you the",
    "start": "613950",
    "end": "619600"
  },
  {
    "text": "scalability part of it so of course we add with in AWS we have a variety of services to help you with that",
    "start": "619600",
    "end": "625390"
  },
  {
    "text": "you can use simple queuing service or simple notification service and the advantage of using that is it gives you",
    "start": "625390",
    "end": "632110"
  },
  {
    "text": "the ability it decouples the producer and the consumer of the service the",
    "start": "632110",
    "end": "637180"
  },
  {
    "text": "producer does not know how the consumer is going to consume it but they agreed upon the payload of the service now we",
    "start": "637180",
    "end": "647500"
  },
  {
    "text": "have lots of micro services that are really talking to each other how do we track state between all these things you",
    "start": "647500",
    "end": "652839"
  },
  {
    "text": "know how do we make sure that they are getting executed in the right order we need a state machine to maintain that so",
    "start": "652839",
    "end": "660610"
  },
  {
    "text": "it's important to build a workflow which can orchestrate all of your state of the application",
    "start": "660610",
    "end": "665880"
  },
  {
    "text": "which can define that micro-service a calls B and based upon a decision within",
    "start": "665880",
    "end": "671310"
  },
  {
    "text": "B you can call C or D did this also helps you understand if there are any",
    "start": "671310",
    "end": "677339"
  },
  {
    "text": "redundant micro-services that you need to get rid of you can start setting timeouts and tasks you can interrupt the",
    "start": "677339",
    "end": "684839"
  },
  {
    "text": "execution you can have tasks and heartbeats and all of that should be able to be done from within your",
    "start": "684839",
    "end": "691110"
  },
  {
    "text": "workflow essentially let's take a look at it what how AWS provides a complete",
    "start": "691110",
    "end": "698370"
  },
  {
    "text": "cloud for you to create containerized micro-services compute is a key part on",
    "start": "698370",
    "end": "704130"
  },
  {
    "text": "how you build those micro services four years ago at reinvent we launched",
    "start": "704130",
    "end": "709380"
  },
  {
    "text": "Amazon ECS that is a fully managed container orchestration platform that",
    "start": "709380",
    "end": "714720"
  },
  {
    "text": "you can run on Amazon today we are launching hundreds of millions of",
    "start": "714720",
    "end": "720120"
  },
  {
    "text": "containers on ECS every week last year we launched Amazon eks or elastic",
    "start": "720120",
    "end": "727230"
  },
  {
    "text": "container service for kubernetes that gives you a managed kubernetes control plane so you can easily get started with",
    "start": "727230",
    "end": "734189"
  },
  {
    "text": "the kubernetes cluster go to AWS console create a kubernetes control plane attach",
    "start": "734189",
    "end": "739350"
  },
  {
    "text": "the worker nodes and you have your full kubernetes cluster over there",
    "start": "739350",
    "end": "745188"
  },
  {
    "text": "compute is just one part of micro services but if you start looking at sort of the broader spectrum you need",
    "start": "746240",
    "end": "752160"
  },
  {
    "text": "storage and database so you need tools like relational databases we have Amazon",
    "start": "752160",
    "end": "757620"
  },
  {
    "text": "RDS which provides you a single interface to a variety of different",
    "start": "757620",
    "end": "762660"
  },
  {
    "text": "databases in the backend so Oracle MySQL Postgres Aurora name a database and",
    "start": "762660",
    "end": "768269"
  },
  {
    "text": "they're integrated as part of RDS you're looking at non relational database then we have Amazon DynamoDB that gives you",
    "start": "768269",
    "end": "775500"
  },
  {
    "text": "full multi-region multi master database in a managed service way we talked about",
    "start": "775500",
    "end": "784259"
  },
  {
    "text": "the importance of integration so how micro services are really collaborating with each other using an asynchronous",
    "start": "784259",
    "end": "790319"
  },
  {
    "text": "mechanism and we talked about sqs SNS and other tools and step functions particularly to orchestrate your micro",
    "start": "790319",
    "end": "796769"
  },
  {
    "text": "services together we talked about the importance of Amazon",
    "start": "796769",
    "end": "802079"
  },
  {
    "text": "API gateway how that could be the front end for your applications and how you can start exposing your lambda functions",
    "start": "802079",
    "end": "809040"
  },
  {
    "text": "if you're writing them as micro services or even containers at the backend and create an API gateway front end for your",
    "start": "809040",
    "end": "815610"
  },
  {
    "text": "containers it's not just about building and deploying the micro services you",
    "start": "815610",
    "end": "822449"
  },
  {
    "text": "also need to write write correct tools in order to deploy those micro services the velocity of change is very important",
    "start": "822449",
    "end": "829470"
  },
  {
    "text": "and if you want to got that velocity of change then you really need to automate that process and that's where exactly",
    "start": "829470",
    "end": "835380"
  },
  {
    "text": "tools lives code build code commit code pipeline really help fully manage deployment pipelines that you can easily",
    "start": "835380",
    "end": "841649"
  },
  {
    "text": "get started with on AWS and last but not the least you need a complete set of",
    "start": "841649",
    "end": "848480"
  },
  {
    "text": "logging and monitoring tools if you're using containers there are a lot of tools available in the open source world",
    "start": "848480",
    "end": "853980"
  },
  {
    "text": "that you can integrate with but we of course with in AWS we have tools like AWS x-ray which provides you distributed",
    "start": "853980",
    "end": "860730"
  },
  {
    "text": "end-to-end tracing for example in kubernetes and particularly in a",
    "start": "860730",
    "end": "865800"
  },
  {
    "text": "container line your micro services could be written in multiple languages but if there is a problem happening somewhere",
    "start": "865800",
    "end": "871829"
  },
  {
    "text": "in the flow from your web from your front end to your micro services to your",
    "start": "871829",
    "end": "877350"
  },
  {
    "text": "database AWS x-ray provides you complete end-to-end heat map for how the application is",
    "start": "877350",
    "end": "883019"
  },
  {
    "text": "looking this helps you identify bottlenecks and then debug them from there now eight reasons why Amazon uses",
    "start": "883019",
    "end": "891720"
  },
  {
    "text": "micro services first of all one size does not fit all so with monoliths you are forced to",
    "start": "891720",
    "end": "897600"
  },
  {
    "text": "select the lowest common denominator with micro services because your scope is small because you are doing a focused",
    "start": "897600",
    "end": "904680"
  },
  {
    "text": "innovation you can pick the right tool for the right job so if today node happens to be the right language for you",
    "start": "904680",
    "end": "911310"
  },
  {
    "text": "you can continue to use it but if tomorrow go happens to be the right language for you you can switch you a",
    "start": "911310",
    "end": "916529"
  },
  {
    "text": "platform as long as you're honoring the contract of the API one of ovals wrote a",
    "start": "916529",
    "end": "922439"
  },
  {
    "text": "paper on the 10th anniversary of AWS and he talked about how failures are up",
    "start": "922439",
    "end": "927779"
  },
  {
    "text": "given and everything will eventually fail over time we need to keep the system running even",
    "start": "927779",
    "end": "933200"
  },
  {
    "text": "if the house is on fire so the important part here is you want to make sure you",
    "start": "933200",
    "end": "938720"
  },
  {
    "text": "embrace the failure you cannot close your eyes and say the failure is not coming the failure is gonna happen it's",
    "start": "938720",
    "end": "944840"
  },
  {
    "text": "about how quickly you recover from it and because as opposed to a one big",
    "start": "944840",
    "end": "949940"
  },
  {
    "text": "monolithic application if a failure happens the entire application goes down with microservice if it's just one part",
    "start": "949940",
    "end": "956720"
  },
  {
    "text": "of the application goes down you should still be able to recover from it and recover gracefully as we looked at the",
    "start": "956720",
    "end": "964490"
  },
  {
    "text": "monolithic application it really over it probably over provisions are your",
    "start": "964490",
    "end": "970010"
  },
  {
    "text": "resources and what that means is you know it's not very efficient for you but with micro services you can do",
    "start": "970010",
    "end": "975950"
  },
  {
    "text": "lower-cost with granular scaling so for example one part of your application is just the front end and you can write",
    "start": "975950",
    "end": "982610"
  },
  {
    "text": "size your ec2 instance accordingly and the other point needs to be more optimized for operational workflow and",
    "start": "982610",
    "end": "988490"
  },
  {
    "text": "then you can write size the instance because of the coordination overhead in",
    "start": "988490",
    "end": "994610"
  },
  {
    "text": "monoliths you know it becomes tends to become bulky rather soon in micro",
    "start": "994610",
    "end": "999680"
  },
  {
    "text": "services because you know the focus is small and you're focusing on the tupiza team aspect of it it really allows you",
    "start": "999680",
    "end": "1005500"
  },
  {
    "text": "to optimize on the team productivity you know you can start using tools which really allows you to communicate a lot more collaboratively and the team size",
    "start": "1005500",
    "end": "1012430"
  },
  {
    "text": "is much smaller as well when you typically go on a microservices journey",
    "start": "1012430",
    "end": "1018310"
  },
  {
    "text": "you tend to kind of sometimes over micro size your application you may think that",
    "start": "1018310",
    "end": "1023950"
  },
  {
    "text": "you know I have too much granularity in the application but your end users may not really need that granularity so in",
    "start": "1023950",
    "end": "1030069"
  },
  {
    "text": "that case you can start creating new compositions that can then be used by your end users and it really allows you",
    "start": "1030070",
    "end": "1036100"
  },
  {
    "text": "to create those compositions quickly because end of the day you're looking at really workflows and expose that workflow as a micro service itself it",
    "start": "1036100",
    "end": "1044319"
  },
  {
    "text": "also gives you the ability to experiment and fail safely because again if it",
    "start": "1044320",
    "end": "1049450"
  },
  {
    "text": "fails it's only one part of the application but in case of a monolithic application if the thing fails the",
    "start": "1049450",
    "end": "1055690"
  },
  {
    "text": "entire application goes down which is again not the customer experience that you would like to have with the",
    "start": "1055690",
    "end": "1062140"
  },
  {
    "text": "monolithic application you are doing the entire language stack framework for",
    "start": "1062140",
    "end": "1067450"
  },
  {
    "text": "your application and changing that to adapt to a newer technology could be much harder I've been a Java developer",
    "start": "1067450",
    "end": "1074230"
  },
  {
    "text": "pretty much all my life you know if you start with a j2ee or Java EE framework and spring boot comes along then it",
    "start": "1074230",
    "end": "1081280"
  },
  {
    "text": "makes it that much harder for you to change that framework but if you are using a micro services based approach",
    "start": "1081280",
    "end": "1087730"
  },
  {
    "text": "this would allow you to make that switch rather gradually because all you're",
    "start": "1087730",
    "end": "1092800"
  },
  {
    "text": "doing is you're honoring the API contract that matters to your customers and last but not the least because you",
    "start": "1092800",
    "end": "1099100"
  },
  {
    "text": "are able to iterate more rapidly you are able to go through the deployment pipelines lot more rapidly you can",
    "start": "1099100",
    "end": "1104830"
  },
  {
    "text": "deploy features more quickly as well so let's take a look at it what are the",
    "start": "1104830",
    "end": "1109960"
  },
  {
    "text": "changes required in your operational model we have always talked about shared",
    "start": "1109960",
    "end": "1115480"
  },
  {
    "text": "responsibility what that means is aw AWS operates managers provisions the",
    "start": "1115480",
    "end": "1121240"
  },
  {
    "text": "infrastructure for you and is responsible for the security including to the data center level as customers",
    "start": "1121240",
    "end": "1127720"
  },
  {
    "text": "build applications on top of that they are responsible for the security of their application and we provide the",
    "start": "1127720",
    "end": "1133240"
  },
  {
    "text": "right tools for it that's sort of the shared responsibility model that we've always talked about now depending upon",
    "start": "1133240",
    "end": "1138790"
  },
  {
    "text": "where you are in your micro services journey you could choose for example the compute using ec2 instances but then you",
    "start": "1138790",
    "end": "1147820"
  },
  {
    "text": "may realize you know four databases I really want a dynamo DB so really there is no hard line over here on what you",
    "start": "1147820",
    "end": "1155200"
  },
  {
    "text": "want to choose in terms of responsibilities but we have right tools right privileges right services for you",
    "start": "1155200",
    "end": "1161380"
  },
  {
    "text": "to get started with very easily and figure out what really works for you best and then accordingly pick the right tool so digging a little bit deeper on",
    "start": "1161380",
    "end": "1172690"
  },
  {
    "text": "the operational responsibility model if we look particularly at the compute aspect of it you know we look at it ec2",
    "start": "1172690",
    "end": "1179230"
  },
  {
    "text": "is one company the basic compute primitive then of course we have ECS anycast both of those are very strategic",
    "start": "1179230",
    "end": "1185140"
  },
  {
    "text": "services for Amazon you can use container management as a service over there then of course if you are not even",
    "start": "1185140",
    "end": "1191710"
  },
  {
    "text": "worried about what is my underlying orchestration system as an app developer that is undifferentiated heavy lifting",
    "start": "1191710",
    "end": "1197860"
  },
  {
    "text": "for me and I'm all in on AWS all I want is build my container and somebody else to",
    "start": "1197860",
    "end": "1204100"
  },
  {
    "text": "manage that container for me then you can go to AWS for gay travel today AWS",
    "start": "1204100",
    "end": "1209440"
  },
  {
    "text": "Fargate is only available for ECS though and then last but not the least if you don't even want to create a container",
    "start": "1209440",
    "end": "1215290"
  },
  {
    "text": "you just want to create a functionality and run that functionality up in the cloud somebody else manages that for you",
    "start": "1215290",
    "end": "1220930"
  },
  {
    "text": "then of course you can use AWS lambda and if you heard the keynote yesterday of period de scientists you probably",
    "start": "1220930",
    "end": "1226720"
  },
  {
    "text": "heard Matt we're talking about how we are running trillions of transactions on AWS lambda every month let's dig little",
    "start": "1226720",
    "end": "1235540"
  },
  {
    "text": "bit deeper into the containers and microservices part of the land and on how they are really closely correlated with each other",
    "start": "1235540",
    "end": "1241060"
  },
  {
    "text": "well the containers do one thing and one thing really well if you look at a docker file for example which is how you",
    "start": "1241060",
    "end": "1246670"
  },
  {
    "text": "create a container it could have multiple CMD commands but only the last CMD command is the one that becomes",
    "start": "1246670",
    "end": "1252730"
  },
  {
    "text": "active that means container do only one thing and that matches very well with the domain driven design for your micro",
    "start": "1252730",
    "end": "1258430"
  },
  {
    "text": "services containers again make you completely agnostic of what application",
    "start": "1258430",
    "end": "1263680"
  },
  {
    "text": "what language what framework you are using and that again nicely complements and how that could be done for micro services it also removes the impedance",
    "start": "1263680",
    "end": "1272500"
  },
  {
    "text": "mismatch between your test staging development deployment artifacts and that's really important particularly if",
    "start": "1272500",
    "end": "1278680"
  },
  {
    "text": "you have a high cadence or high release velocity for your features the services",
    "start": "1278680",
    "end": "1284200"
  },
  {
    "text": "are fully contained there are no external dependencies and that's exactly what happens with darker because everything needs to be packaged into the",
    "start": "1284200",
    "end": "1290710"
  },
  {
    "text": "docker image itself because of C groups and namespaces containers provides that",
    "start": "1290710",
    "end": "1296170"
  },
  {
    "text": "isolated execution environment and this is very relevant from the micro services perspective because it helps you reduce",
    "start": "1296170",
    "end": "1301900"
  },
  {
    "text": "the blast radius essentially container startup lot more rapidly as opposed to a",
    "start": "1301900",
    "end": "1307330"
  },
  {
    "text": "virtual machine and again nicely complements because you may be scaling your services up and down rather rapidly",
    "start": "1307330",
    "end": "1312700"
  },
  {
    "text": "and then on scaling and upgrading particularly most of the container orchestration frameworks provides native",
    "start": "1312700",
    "end": "1319120"
  },
  {
    "text": "primitives which allow you to scale your service up and down and that becomes very essential in a micro service as",
    "start": "1319120",
    "end": "1324370"
  },
  {
    "text": "well the first question that often comes up is because there is so much",
    "start": "1324370",
    "end": "1330280"
  },
  {
    "text": "complexity around 8 how do we that complexity in terms of these micro-services how do we get more",
    "start": "1330280",
    "end": "1336289"
  },
  {
    "text": "visibility into my metrics my logging my monitoring aspect of these micro services now if you're building micro",
    "start": "1336289",
    "end": "1344899"
  },
  {
    "text": "services if you are getting that polyglot approach over there then you can start looking at putting the",
    "start": "1344899",
    "end": "1349909"
  },
  {
    "text": "monitoring the routing the discovery logic all of that as part of your application but we talked about the",
    "start": "1349909",
    "end": "1356809"
  },
  {
    "text": "polyglot approach what that means is if you're using Java and node and go it",
    "start": "1356809",
    "end": "1361940"
  },
  {
    "text": "causes a framework explosion you need to manage those dependencies and need to make sure that those dependencies are",
    "start": "1361940",
    "end": "1367519"
  },
  {
    "text": "kind of continued to maintain over a period of time becomes a nightmare very soon rather so the approach that we have",
    "start": "1367519",
    "end": "1374269"
  },
  {
    "text": "seen customers using is they're going to keep the application code separate but move those cross-cutting concerns",
    "start": "1374269",
    "end": "1381019"
  },
  {
    "text": "monitoring routing discovery deployment etc into a proxy so one of the popular",
    "start": "1381019",
    "end": "1386239"
  },
  {
    "text": "approaches that we have seen customers using is they're using an Y as a proxy because that handles all of those concerns very easily now on Y is a CNC F",
    "start": "1386239",
    "end": "1394279"
  },
  {
    "text": "project which was created by lyft and can handle up to two million concurrent transactions per second so it's known to",
    "start": "1394279",
    "end": "1400159"
  },
  {
    "text": "scale really well what that gives you is the ability to get more observability",
    "start": "1400159",
    "end": "1407419"
  },
  {
    "text": "and traffic control for your applications so you can start doing features like a be testing or canary",
    "start": "1407419",
    "end": "1412639"
  },
  {
    "text": "testing now you want to introduce a new version of your application very easily from the client side you can guide where",
    "start": "1412639",
    "end": "1419419"
  },
  {
    "text": "the traffic needs to go you start getting distributed tracing across multiple applications multiple",
    "start": "1419419",
    "end": "1424879"
  },
  {
    "text": "microservices across multiple languages and that's the beauty of it and most importantly it works across multiple",
    "start": "1424879",
    "end": "1430999"
  },
  {
    "text": "clusters across container technologies and it avoids the framework explosion for you so it's a lot more bun cannibal",
    "start": "1430999",
    "end": "1438879"
  },
  {
    "text": "let's take a look at our simple application here and I have a web application that talks to a shopping cart that talks to inventory in the",
    "start": "1438879",
    "end": "1445279"
  },
  {
    "text": "backend and also a notification on the side the shopping cart the inventory and the notifications are written in",
    "start": "1445279",
    "end": "1451279"
  },
  {
    "text": "different languages so that's the true micro-services architecture here now I can introduce a chaos in my application",
    "start": "1451279",
    "end": "1458539"
  },
  {
    "text": "I want to test how my application is going to behave if I go from web to shopping cart so for example I can",
    "start": "1458539",
    "end": "1465259"
  },
  {
    "text": "introduce a latency and see how my application is going to react that's an important aspect of your testing now from shop",
    "start": "1465259",
    "end": "1472580"
  },
  {
    "text": "account to inventory I can set up how many times or retry needs to be done so",
    "start": "1472580",
    "end": "1477650"
  },
  {
    "text": "you can set up the retries and you can say this needs to be done outside the application logic independent of the",
    "start": "1477650",
    "end": "1483830"
  },
  {
    "text": "language now you are running version 1.0 of the inventory application which was built using ruby and you decide that i'm",
    "start": "1483830",
    "end": "1490760"
  },
  {
    "text": "gonna launch version 1.1 that is written using go and I'm gonna introduce that",
    "start": "1490760",
    "end": "1495799"
  },
  {
    "text": "knows new service but from client side I can start doing traffic shifting that means 5% of the traffic goes to the new",
    "start": "1495799",
    "end": "1502309"
  },
  {
    "text": "service and 95% goes over there and then you can start setting up your cloud watch alarms which basically essentially",
    "start": "1502309",
    "end": "1508400"
  },
  {
    "text": "says if everything looks healthy then scale up your version 1.1 and scale down",
    "start": "1508400",
    "end": "1513950"
  },
  {
    "text": "your version 1.0 we also need changes to software delivery model and that's the",
    "start": "1513950",
    "end": "1519919"
  },
  {
    "text": "last part of my talk here Jeff Bezos wrote in his 2018 letter to shareholders",
    "start": "1519919",
    "end": "1527360"
  },
  {
    "text": "he said that one thing I love about customers is that they're divinely discontent their expectations are never",
    "start": "1527360",
    "end": "1534230"
  },
  {
    "text": "static they always go up at the end of the day our goal is to deliver value to",
    "start": "1534230",
    "end": "1539900"
  },
  {
    "text": "the customers and customers are expecting at any point of time value selection and convenience from us this",
    "start": "1539900",
    "end": "1549140"
  },
  {
    "text": "2018 state of DevOps report talks about you know it takes multiple teams and divides them into low medium high and",
    "start": "1549140",
    "end": "1556730"
  },
  {
    "text": "elite categories and elite is a new category that was added this year only it talks about the difference between",
    "start": "1556730",
    "end": "1562549"
  },
  {
    "text": "low and elite categories the elite categories are deploying code more",
    "start": "1562549",
    "end": "1568640"
  },
  {
    "text": "frequently they are doing faster time from commit to deploy and they have a",
    "start": "1568640",
    "end": "1574340"
  },
  {
    "text": "lot faster recovery from failure so the important part is to embrace the failure and be able to recover from it lot more",
    "start": "1574340",
    "end": "1580790"
  },
  {
    "text": "gracefully so let's take a look at it how we can achieve that so in a typical",
    "start": "1580790",
    "end": "1587090"
  },
  {
    "text": "monolith development lifecycle you will have your developers multiple teams working on this one big monolithic",
    "start": "1587090",
    "end": "1593450"
  },
  {
    "text": "application and they all have to go through this shared release pipeline which can cause friction as we talk",
    "start": "1593450",
    "end": "1599690"
  },
  {
    "text": "about earlier you have to have those merge Fridays to make sure that this call goes through smooth with monolithic",
    "start": "1599690",
    "end": "1606350"
  },
  {
    "text": "or with the micro services the deployment model changes completely you have these two pieces are teams that are",
    "start": "1606350",
    "end": "1612740"
  },
  {
    "text": "focusing on a particular service and they have their own delivery pipelines and then at the back end you know you",
    "start": "1612740",
    "end": "1618320"
  },
  {
    "text": "are having those services really collaborate with each other to generate a high-level application and deliver",
    "start": "1618320",
    "end": "1624169"
  },
  {
    "text": "value to your customers so how does Amazon Amazon do DevOps well we talked",
    "start": "1624169",
    "end": "1629600"
  },
  {
    "text": "about it we decompose for agility as opposed to one big application is consists of thousands of micro services",
    "start": "1629600",
    "end": "1636169"
  },
  {
    "text": "we automate everything we use the standardized tools which makes it very easy for us to scale and we also use",
    "start": "1636169",
    "end": "1644029"
  },
  {
    "text": "infrastructure as a code you know you can use cloud formation you can use terraform chef puppet whatever comes to",
    "start": "1644029",
    "end": "1649639"
  },
  {
    "text": "your knowledge all of that works several customers have gone through this journey",
    "start": "1649639",
    "end": "1655879"
  },
  {
    "text": "with Amazon and with lot of others as well but one of the Amazon customers that I would like to highlight is",
    "start": "1655879",
    "end": "1661639"
  },
  {
    "text": "McDonald's how they have gone through digital transformation over the last couple of years",
    "start": "1661639",
    "end": "1667750"
  },
  {
    "text": "McDonald's is a restaurant which serves food and we all get hungry three times a day so on a given day they are taking",
    "start": "1667750",
    "end": "1675289"
  },
  {
    "text": "between 250 to 500 thousand orders from 37,000 restaurants over 120 countries",
    "start": "1675289",
    "end": "1682779"
  },
  {
    "text": "that typically goes to 20 thousand transactions per second so McDonald's in",
    "start": "1682779",
    "end": "1688279"
  },
  {
    "text": "order to reach that scale they partner with apps like uber eats and be able to",
    "start": "1688279",
    "end": "1693710"
  },
  {
    "text": "deliver that value rather quickly this is exactly where they use Amazon ECS to",
    "start": "1693710",
    "end": "1699649"
  },
  {
    "text": "scale and built a micro services based architecture over there they were able to use cloud watch alarms or auto",
    "start": "1699649",
    "end": "1706070"
  },
  {
    "text": "scaling groups and task placement strategy to efficiently optimize their resources with that I will invite Sarah",
    "start": "1706070",
    "end": "1713059"
  },
  {
    "text": "to talk about how they are using containerized micro services and financial times thank you",
    "start": "1713059",
    "end": "1720700"
  },
  {
    "text": "so I'm here to talk about adopting mug service in containers at the Financial Times Financial Times is one of the world's",
    "start": "1724570",
    "end": "1731000"
  },
  {
    "text": "leading business news organizations I'm talking specifically about the content publishing and delivery platform we have",
    "start": "1731000",
    "end": "1736730"
  },
  {
    "text": "up there Financial Times so this is a very simplified diagram of what that",
    "start": "1736730",
    "end": "1741800"
  },
  {
    "text": "does so effectively we take content from various content management systems so these are where journalists are writing",
    "start": "1741800",
    "end": "1747890"
  },
  {
    "text": "stories when they click publish we get a notification and we transform that content into a common format we annotate",
    "start": "1747890",
    "end": "1754910"
  },
  {
    "text": "it so that we can go through a natural language processing pipeline so we can say this story is about Apple or it",
    "start": "1754910",
    "end": "1760910"
  },
  {
    "text": "mentions a particular person to do that we have to load a great number of concepts we've got probably 14 million",
    "start": "1760910",
    "end": "1765950"
  },
  {
    "text": "concepts of companies people and the relationships between them and then we have a set of api's that we use to",
    "start": "1765950",
    "end": "1771740"
  },
  {
    "text": "provide all of this information to our customers both internal and external",
    "start": "1771740",
    "end": "1777040"
  },
  {
    "text": "first step of our so there's several steps in in our progress through this first step was to go from monolith to",
    "start": "1777040",
    "end": "1783290"
  },
  {
    "text": "micro services micro services started to be a thing that people talked about in",
    "start": "1783290",
    "end": "1788570"
  },
  {
    "text": "2012 but it was really 2014 when it started to be a thing that people really got excited about and there were some",
    "start": "1788570",
    "end": "1794390"
  },
  {
    "text": "new in book came out in February 15 but we were already looking at it in 2013 so we have pretty early adopters we started",
    "start": "1794390",
    "end": "1800810"
  },
  {
    "text": "the progress process before any of these things were published but in fact we started working on the things that we",
    "start": "1800810",
    "end": "1806030"
  },
  {
    "text": "needed to enable this a year or so earlier because there are conditions for change there are things you need in place if you're going to start building",
    "start": "1806030",
    "end": "1811790"
  },
  {
    "text": "micro services think about micro services you have a lot of them and as soon as you have a lot of things you do",
    "start": "1811790",
    "end": "1817520"
  },
  {
    "text": "things a lot of times every time you make a change you've got to do it for every micro service so as usual xkcd",
    "start": "1817520",
    "end": "1823400"
  },
  {
    "text": "nails this basically if you're a monolith you're somewhere up at the top right corner so you can afford to do a",
    "start": "1823400",
    "end": "1829310"
  },
  {
    "text": "manual process because you're probably only doing it a couple of times but with micro services you're doing things multiple times a day that means you need",
    "start": "1829310",
    "end": "1835670"
  },
  {
    "text": "to automate because otherwise you're taking too long to do things manually the first example for us what about",
    "start": "1835670",
    "end": "1841850"
  },
  {
    "text": "provisioning a server and when I joined the FT in 2011 it took on average 120",
    "start": "1841850",
    "end": "1848480"
  },
  {
    "text": "days to provision a server oh my god but basically this was we",
    "start": "1848480",
    "end": "1855200"
  },
  {
    "text": "didn't yeah we had to basically buy it configure it set it up it was all manual you can't do micro services when you",
    "start": "1855200",
    "end": "1861650"
  },
  {
    "text": "have that kind of a process because you're going to have lots of servers and also you do actually want all the service to be the same you want them to",
    "start": "1861650",
    "end": "1867740"
  },
  {
    "text": "be cattle not pets so you need to automate it using templates so the first",
    "start": "1867740",
    "end": "1872870"
  },
  {
    "text": "thing we did was set up a team who built something called FG platform and it was an investment in automation of",
    "start": "1872870",
    "end": "1878240"
  },
  {
    "text": "provisioning and deployment developers could set up a VM via self service and those VMs would have a useful scaffold",
    "start": "1878240",
    "end": "1884000"
  },
  {
    "text": "of all the things that you need for a server so things like monitoring logging deployment and that launched early in",
    "start": "1884000",
    "end": "1892160"
  },
  {
    "text": "2012 using our own private cloud and we started supporting deploying to Amazon",
    "start": "1892160",
    "end": "1897380"
  },
  {
    "text": "in 2014 and the difference was massive so basically by 2014 we were taking",
    "start": "1897380",
    "end": "1904970"
  },
  {
    "text": "minutes to deploy it it's several orders of magnitude quicker it's about 1/8 of 1% of the time that it",
    "start": "1904970",
    "end": "1910910"
  },
  {
    "text": "took in 2011 and that's transformational and you really can't start with Mike reservist is until you can provision a",
    "start": "1910910",
    "end": "1916790"
  },
  {
    "text": "server in minutes the same need for speed applies for deployments and if",
    "start": "1916790",
    "end": "1923240"
  },
  {
    "text": "you're going to benefit from exercise you need to be able are small deployments they have to be quick easy which means they have to be automated",
    "start": "1923240",
    "end": "1930160"
  },
  {
    "text": "and you really need them to be zero downtime because you need to be able to make them all the time without affecting your users and when you build a new",
    "start": "1930160",
    "end": "1937850"
  },
  {
    "text": "micro service you wanna be able to set up a deployment pipeline for it very quickly because you're doing this all the time and our old build and release",
    "start": "1937850",
    "end": "1945590"
  },
  {
    "text": "process was very manual we built wonderful a block artifact we were using continuous integration and quite good at",
    "start": "1945590",
    "end": "1951440"
  },
  {
    "text": "that but the deployment was done manually we did 12 releases a year because we couldn't do a zero downtime",
    "start": "1951440",
    "end": "1957290"
  },
  {
    "text": "deployment and this is for the content publishing platform and the thing about a news organization is you need to be",
    "start": "1957290",
    "end": "1962810"
  },
  {
    "text": "able to break the news all the time so you have to negotiate a time when you think it's very unlikely that anything's gonna happen that's newsworthy that's",
    "start": "1962810",
    "end": "1968510"
  },
  {
    "text": "quite hard to do so probably twelve releases a year quite a few of which get canceled at the last minute because some",
    "start": "1968510",
    "end": "1973790"
  },
  {
    "text": "news event happens and because we only did 12 releases a year the process",
    "start": "1973790",
    "end": "1979040"
  },
  {
    "text": "around each release was complicated and time-consuming so this is the process we fought so you'd batch up a bunch of stories you",
    "start": "1979040",
    "end": "1985520"
  },
  {
    "text": "cut the release you do some testing you test a rollback it never worked you test it again and then basically you'd say",
    "start": "1985520",
    "end": "1992330"
  },
  {
    "text": "right we're ready we're ready to go live with it first of all the actual release was done",
    "start": "1992330",
    "end": "1998120"
  },
  {
    "text": "by someone logging onto boxes and following some manual steps documented in a spreadsheet this is six steps there",
    "start": "1998120",
    "end": "2003940"
  },
  {
    "text": "are actually 54 steps in this particular release spreadsheet done by someone going through it and they were never",
    "start": "2003940",
    "end": "2009669"
  },
  {
    "text": "accurate they're always typos there's always things that's wrong you're relying on the fact that the person doing it has the context to say this is",
    "start": "2009669",
    "end": "2014890"
  },
  {
    "text": "not what you meant me to do and they took a long time they often took longer than the downtime negotiated we were",
    "start": "2014890",
    "end": "2020140"
  },
  {
    "text": "making schema changes on a relational database and things could go wrong and when they did go wrong it takes ages to work out exactly what's gone wrong when",
    "start": "2020140",
    "end": "2026020"
  },
  {
    "text": "you've got four weeks worth of work in that one release I don't know if anyone's had to do a git bisect to try",
    "start": "2026020",
    "end": "2031419"
  },
  {
    "text": "and work out where something went wrong but it's not fun so our new deployment",
    "start": "2031419",
    "end": "2036490"
  },
  {
    "text": "pipelines were based on Jenkins and puppet and our FT platform would basically install puppet for you as part",
    "start": "2036490",
    "end": "2043960"
  },
  {
    "text": "of setting up a server so it wasn't completely straight forward but it was pretty quick and it made a massive",
    "start": "2043960",
    "end": "2049270"
  },
  {
    "text": "difference because it's automated if you can't deploy the small as possible change to production in under",
    "start": "2049270",
    "end": "2055300"
  },
  {
    "text": "an hour you should fix that first because micro services are hard work in a lot of ways and you need to be able to",
    "start": "2055300",
    "end": "2060490"
  },
  {
    "text": "benefit from the work that you're doing which means you need to do continuous delivery with a smallest possible gap",
    "start": "2060490",
    "end": "2065740"
  },
  {
    "text": "between studying work on something and seeing it live in production continuous",
    "start": "2065740",
    "end": "2070750"
  },
  {
    "text": "delivery forces a change in your culture you certainly did at the FT because you",
    "start": "2070750",
    "end": "2076898"
  },
  {
    "text": "need to persuade people to trust your teams to remove process to empower people you know you can't have a change",
    "start": "2076899",
    "end": "2084128"
  },
  {
    "text": "approval board that meets on a Tuesday to decide to go to test on a Thursday if you want to do 20 releases a day it just",
    "start": "2084129",
    "end": "2089950"
  },
  {
    "text": "doesn't work so you absolutely have to get people to trust that you are likely to release the things that don't break",
    "start": "2089950",
    "end": "2097710"
  },
  {
    "text": "so we got to the point where we could provision a server quickly deploy quickly and we started building micro",
    "start": "2097710",
    "end": "2103210"
  },
  {
    "text": "services we aimed for single responsibility it's good it's the right",
    "start": "2103210",
    "end": "2108910"
  },
  {
    "text": "thing to do but we had a surprising number of conversations about exactly what the right level of granularity is I think actually it got to get it right",
    "start": "2108910",
    "end": "2116500"
  },
  {
    "text": "um as Irene said asynchronous communication Park u is essential because you don't want a long chain of",
    "start": "2116500",
    "end": "2122680"
  },
  {
    "text": "synchronous calls it's a bit brittle and it means that you're coupling these services together they know about each other you really want a service that",
    "start": "2122680",
    "end": "2129210"
  },
  {
    "text": "generates an event to just do that put it on a queue and then other services can consume that that are interested in",
    "start": "2129210",
    "end": "2135520"
  },
  {
    "text": "it and if you have a new service that is interested in that event the originating service doesn't need to know about it we",
    "start": "2135520",
    "end": "2143290"
  },
  {
    "text": "have taken big advantage of the fact that we can have polyglot approach and particularly polyglot persistence",
    "start": "2143290",
    "end": "2149770"
  },
  {
    "text": "because our services own particular parts of the data we can store things in the correct database for that so we",
    "start": "2149770",
    "end": "2156520"
  },
  {
    "text": "store our articles in MongoDB because really it's a document store in a document store but we also store the",
    "start": "2156520",
    "end": "2163120"
  },
  {
    "text": "articles and annotations in a graph database because we want to be able to navigate that graph and find all the Articles that are that are about Amazon",
    "start": "2163120",
    "end": "2169710"
  },
  {
    "text": "and then finally we we put all of that information also in elasticsearch because we do need people to be able to",
    "start": "2169710",
    "end": "2174940"
  },
  {
    "text": "discover our content so we've got a bunch of different databases that play in our in our architecture so what do we",
    "start": "2174940",
    "end": "2180850"
  },
  {
    "text": "gain from moving to micro services they're small so they're easy to understand if you're a developer picking",
    "start": "2180850",
    "end": "2186640"
  },
  {
    "text": "up a service you've never looked at before you've got a good chance of working out how it works and we spend more time running and maintaining",
    "start": "2186640",
    "end": "2193600"
  },
  {
    "text": "services than we do building them generally so it makes sense to optimize for ease of understanding for someone picking it up they have clear boundaries",
    "start": "2193600",
    "end": "2200830"
  },
  {
    "text": "we have HTTP calls or your reading or  you so that's easy to test because",
    "start": "2200830",
    "end": "2206500"
  },
  {
    "text": "you can inspect the requests you can inspect the responses and you can mock out collaborating services the releases",
    "start": "2206500",
    "end": "2214510"
  },
  {
    "text": "are small they're self-contained you can look at the different work out what the changes generally if they fail you can",
    "start": "2214510",
    "end": "2222010"
  },
  {
    "text": "fix the problem and roll forward very quickly and we moved from 12 to more than 2000 deployments a year because we",
    "start": "2222010",
    "end": "2228250"
  },
  {
    "text": "could do zero downtime deployments something's about 200 times as much you can do that kind of change from to",
    "start": "2228250",
    "end": "2234730"
  },
  {
    "text": "release more often with a monolith but it's still quite hard to understand whether a particular change has effects somewhere else with micro services the",
    "start": "2234730",
    "end": "2240940"
  },
  {
    "text": "very clear separation lets you think yeah this is pretty low risk and the failure rate is much much lower so with",
    "start": "2240940",
    "end": "2248050"
  },
  {
    "text": "our 12 releases a year we'd have probably a couple that something went wrong now it's less than 1% where we have any kind of problems",
    "start": "2248050",
    "end": "2253929"
  },
  {
    "text": "and we fix it it extremely quickly and this is gone into in depth in the state of DevOps report that Irene talked about",
    "start": "2253929",
    "end": "2259269"
  },
  {
    "text": "earlier decreasing the time to get new features out is the reason to do micro services it's how you can sell the",
    "start": "2259269",
    "end": "2265029"
  },
  {
    "text": "business on it because you can say look you can have an idea now and we can see it live tomorrow as opposed to in six weeks time and you",
    "start": "2265029",
    "end": "2271989"
  },
  {
    "text": "can't you need the business to be on side to do this kind of change but there are challenges because you remove the",
    "start": "2271989",
    "end": "2278739"
  },
  {
    "text": "complexity within the services but at the expense of vastly more complexity between services it's a distributed",
    "start": "2278739",
    "end": "2283839"
  },
  {
    "text": "system now and lots of people are making changes on it and you don't necessarily know exactly what it looks like at any",
    "start": "2283839",
    "end": "2289569"
  },
  {
    "text": "point we found a lot of problems around getting the right level of granularity on the Microsoft C's and I think we",
    "start": "2289569",
    "end": "2296439"
  },
  {
    "text": "probably went a little too granular because you don't want to have lots and lots of Micra services because you just",
    "start": "2296439",
    "end": "2302679"
  },
  {
    "text": "have to pay a tax every time you do something what we tended to notice is that sometimes you have lots of Micra",
    "start": "2302679",
    "end": "2309160"
  },
  {
    "text": "services that always get to play at the same time they always change at the same time suggests they might in fact be one",
    "start": "2309160",
    "end": "2314469"
  },
  {
    "text": "micro service that you should combine if you have one micro service that you find you'll have a lot of contention of",
    "start": "2314469",
    "end": "2319779"
  },
  {
    "text": "people making changes to it maybe it should split and really you should be prepared to make change your mind on this it's actually quite easy to do so",
    "start": "2319779",
    "end": "2326679"
  },
  {
    "text": "have a look if you're having pain points you just change it because we have",
    "start": "2326679",
    "end": "2333309"
  },
  {
    "text": "multiple data stores and multiple regions where we don't have necessarily database that are clustered across",
    "start": "2333309",
    "end": "2338799"
  },
  {
    "text": "regions we have to deal with eventual consistency there's not a single transaction anymore and I do you think that's pretty pretty a good thing to",
    "start": "2338799",
    "end": "2345549"
  },
  {
    "text": "plan for so you can have partial failure partial success we've published the article but it hasn't made it into our",
    "start": "2345549",
    "end": "2351309"
  },
  {
    "text": "elasticsearch instance in the US but we're lucky because we're doing something that's idempotent so we can just republish that article",
    "start": "2351309",
    "end": "2357369"
  },
  {
    "text": "and as long as it makes it everywhere in the end we're we're good so we use business level monitoring a lot here we",
    "start": "2357369",
    "end": "2362709"
  },
  {
    "text": "have a like reservist that checks that that publish event went everywhere and if it doesn't there's an alert and we republish the way that you develop is",
    "start": "2362709",
    "end": "2371679"
  },
  {
    "text": "very different from on lifto micro services you know I used to do monolithic development you have a database of your app you probably have a",
    "start": "2371679",
    "end": "2378999"
  },
  {
    "text": "debugger you kind of trying to work out what's going on in the middle of your code with micro services probably don't have the whole of your",
    "start": "2378999",
    "end": "2385340"
  },
  {
    "text": "Microsoft's architecture running locally I don't think you should you really want to look at the testing at the boundaries",
    "start": "2385340",
    "end": "2391390"
  },
  {
    "text": "one thing I think is useful is if you've got a microscope for Q is to put a small adapter in there that means you can",
    "start": "2391390",
    "end": "2397280"
  },
  {
    "text": "exercise it by sending in an HTTP request it just makes testing a lot easier gonna say that a contrast or RM",
    "start": "2397280",
    "end": "2405710"
  },
  {
    "text": "is saying earlier I think repeating yourself can be a good idea with micro-services and basically because you",
    "start": "2405710",
    "end": "2412220"
  },
  {
    "text": "to be careful about what you extract into a library so we've had great success where we've extracted behavior into a library so for example converting",
    "start": "2412220",
    "end": "2419090"
  },
  {
    "text": "errors in the code into HTTP status codes or adding a transaction ID across",
    "start": "2419090",
    "end": "2425300"
  },
  {
    "text": "services we've build these libraries but we never changed them they used in all of our code and that's very successful",
    "start": "2425300",
    "end": "2431480"
  },
  {
    "text": "where we've really failed is where we tried to extract some idea of a common model of what an article looks like because we found that every time we",
    "start": "2431480",
    "end": "2437630"
  },
  {
    "text": "changed that model we had to release a bunch of much services and anytime you're releasing all your micro services together you've just got a distributed",
    "start": "2437630",
    "end": "2443630"
  },
  {
    "text": "monolith which is the worst of all worlds so what we found is instead of having some some strict model we were",
    "start": "2443630",
    "end": "2451130"
  },
  {
    "text": "better off having every service be lenient in what it accepted look for the fields it cares about ignore all the",
    "start": "2451130",
    "end": "2456620"
  },
  {
    "text": "rest and if you have a lot of services that care about exactly the same fields maybe then also put Micra services maybe",
    "start": "2456620",
    "end": "2462200"
  },
  {
    "text": "they have the same domain there's a lot of operational complexity when you have",
    "start": "2462200",
    "end": "2468110"
  },
  {
    "text": "a monolith you probably have two application servers you can monitor the CPU disk space you can hop on the boxes",
    "start": "2468110",
    "end": "2473180"
  },
  {
    "text": "and tell logs if you need to but you can't do that those micro services you can't have one team writing code the",
    "start": "2473180",
    "end": "2479540"
  },
  {
    "text": "other team deploying and operating it things change too often you can't afford to do hands over when you're writing a couple of new services a week and gray",
    "start": "2479540",
    "end": "2489110"
  },
  {
    "text": "failure is the norm so we've got a distributed system with many many services lots of the there's no in",
    "start": "2489110",
    "end": "2496520"
  },
  {
    "text": "process communication it's all over the network so things go wrong but if you've architected it right it's resilient and",
    "start": "2496520",
    "end": "2502760"
  },
  {
    "text": "it recovers so if you don't change the way that you do monitoring you're in",
    "start": "2502760",
    "end": "2509360"
  },
  {
    "text": "trouble here so we have a hundred 50 services if we have two instances in two",
    "start": "2509360",
    "end": "2514400"
  },
  {
    "text": "regions five checks every minute we've got over 4 million checks today and what that means is that a",
    "start": "2514400",
    "end": "2519710"
  },
  {
    "text": "one-in-a-million event happens 4 times a day so transient failures happen all the time and lots of these failures are",
    "start": "2519710",
    "end": "2527450"
  },
  {
    "text": "things that you don't care about so if I have a service that calls out to another service and the first attempt fails and",
    "start": "2527450",
    "end": "2533089"
  },
  {
    "text": "it retries and that's successful I don't really want an alert for that first failure because the thing I wanted to",
    "start": "2533089",
    "end": "2538339"
  },
  {
    "text": "achieve worked it was fine so you need to monitor for the event that you care about you to think about what would you want someone to call you",
    "start": "2538339",
    "end": "2544700"
  },
  {
    "text": "about at 2:00 a.m. and I'm absolutely certain I don't want to know that you know something succeeded but there was a",
    "start": "2544700",
    "end": "2550820"
  },
  {
    "text": "bit of a retry in the middle and we care that our articles get published so we're",
    "start": "2550820",
    "end": "2556490"
  },
  {
    "text": "basically looking to see did that article successfully get published your",
    "start": "2556490",
    "end": "2561770"
  },
  {
    "text": "event of interest in a microcircuits is spread over huge numbers of VMs it's hard to even know which ones so you absolutely need to do log aggregation",
    "start": "2561770",
    "end": "2567650"
  },
  {
    "text": "send all your logs to somewhere central where you can where you can ask questions to your logs very good idea to",
    "start": "2567650",
    "end": "2573800"
  },
  {
    "text": "have these logs be structured because when you want to ask your questioning key value pairs make it a lot easier",
    "start": "2573800",
    "end": "2580119"
  },
  {
    "text": "tracing is also important how do you tie together the fact that all these logs represent the same event I can go into",
    "start": "2580599",
    "end": "2587420"
  },
  {
    "text": "our log aggregator and say ok here are all the logs there's probably 25 logs we",
    "start": "2587420",
    "end": "2593480"
  },
  {
    "text": "do it via transaction IDs we've got a library in the two main languages we use which is Java and go that looks for a",
    "start": "2593480",
    "end": "2599150"
  },
  {
    "text": "next request ID header and if it's there takes the value and puts it on every log message on every call out to another",
    "start": "2599150",
    "end": "2606140"
  },
  {
    "text": "service on any message that it sends on a queue and if it's not there it generates an ID and ads and adds that so",
    "start": "2606140",
    "end": "2612560"
  },
  {
    "text": "this is something that every service has and we don't have any problems where people don't add it because hey we've",
    "start": "2612560",
    "end": "2618380"
  },
  {
    "text": "got libraries and be it's so useful anytime you want to work out what's going on this this is really important",
    "start": "2618380",
    "end": "2623960"
  },
  {
    "text": "now we did this years ago if we were starting there we wouldn't build this ourselves we'd use something like Sipkins I'm open tracing or benefit from",
    "start": "2623960",
    "end": "2630380"
  },
  {
    "text": "something that a service measure would give us but we have it in place so we kind of stick with it in contrast to our",
    "start": "2630380",
    "end": "2637310"
  },
  {
    "text": "rune I think Mike reservist is can be expensive to run and kind of depends what your approach is but so we don't",
    "start": "2637310",
    "end": "2643400"
  },
  {
    "text": "have spikey payload where we need to scale up some part of our flow and if we go from",
    "start": "2643400",
    "end": "2650439"
  },
  {
    "text": "having a monolith on a single VM to having 150 microsomes is even on the smallest VMs that's gonna be more",
    "start": "2650439",
    "end": "2655689"
  },
  {
    "text": "expensive but you need to compare that increasing costs against the benefits of being able to experiment quickly not",
    "start": "2655689",
    "end": "2661269"
  },
  {
    "text": "having to pay overtime for people to come in at the weekend to support releases so when we started out on our",
    "start": "2661269",
    "end": "2667170"
  },
  {
    "text": "private cloud it's quite hard to attribute costs but with AWS we've got that we've got our own a diverse account",
    "start": "2667170",
    "end": "2672880"
  },
  {
    "text": "within the organization so we can see where our costs are high and we can make changes for that any manual change has",
    "start": "2672880",
    "end": "2681400"
  },
  {
    "text": "to be done many times so we need to be migrated from one version of circle CI to another version for KATUSA",
    "start": "2681400",
    "end": "2689170"
  },
  {
    "text": "integration that can be a time-consuming thing if you've got 150 services so",
    "start": "2689170",
    "end": "2695619"
  },
  {
    "text": "things like provisioning even with our investment in provisioning we'd have 8 VMs because we'd have to in it 2 of 2",
    "start": "2695619",
    "end": "2702849"
  },
  {
    "text": "production regions a couple of staging couple in development and even if it takes minutes that adds up to starts add up to quite a long time automation and",
    "start": "2702849",
    "end": "2710829"
  },
  {
    "text": "abstraction save you on this so you basically want to make a change to one thing and have it reflected automatically in all the services so a",
    "start": "2710829",
    "end": "2717579"
  },
  {
    "text": "templated deployment pipeline can make a massive difference so that was our first step was to move to micro services but",
    "start": "2717579",
    "end": "2724660"
  },
  {
    "text": "after a while we started looking at the cost at the overhead of provisioning and setting up deployment pipelines for a",
    "start": "2724660",
    "end": "2730119"
  },
  {
    "text": "new service and we started to get interested in what containers could give us so doctor was released in March 2013",
    "start": "2730119",
    "end": "2736209"
  },
  {
    "text": "and the first enterprise ready release came out in October 2014 and their air",
    "start": "2736209",
    "end": "2741640"
  },
  {
    "text": "quotes cuz I don't think it was Enterprise ready it was ambitious we were already looking at containers at",
    "start": "2741640",
    "end": "2747160"
  },
  {
    "text": "this point so we're very much early adopters this is a great blog post from",
    "start": "2747160",
    "end": "2752799"
  },
  {
    "text": "dama Kinney who at the time was working Eddy I really recommend reading it talks about innovation and says well you can't",
    "start": "2752799",
    "end": "2758799"
  },
  {
    "text": "do innovation everywhere at the same time so you need to pick what the things are they're going to innovate on think about the fact you have a couple of",
    "start": "2758799",
    "end": "2764529"
  },
  {
    "text": "tokens what are you spending them on so maybe you adopt a new database that's",
    "start": "2764529",
    "end": "2769839"
  },
  {
    "text": "never been used before well that's that's an innovation token maybe you're using a new programming language same thing in 2014 writing a cluster",
    "start": "2769839",
    "end": "2778609"
  },
  {
    "text": "castration was definitely spending an innovation token but it was worth it for us because we thought the cost saving",
    "start": "2778609",
    "end": "2783829"
  },
  {
    "text": "and the time saving of moving to containers would make it worthwhile so we built our own container platform on",
    "start": "2783829",
    "end": "2790880"
  },
  {
    "text": "core OS because it's a cut-down in its distribution designed from the ground up to manage deployment of docker containers we built a lot of other",
    "start": "2790880",
    "end": "2797089"
  },
  {
    "text": "things ourselves we were running using system D as a service manager defining service files and then service system",
    "start": "2797089",
    "end": "2804170"
  },
  {
    "text": "you run the service fleet is a cluster manager that make manage that a cluster level we wrote our own routing using",
    "start": "2804170",
    "end": "2811190"
  },
  {
    "text": "Vulcan D which is a programmatic load balancer and storing the configuration for that in etcetera D key value store",
    "start": "2811190",
    "end": "2816339"
  },
  {
    "text": "we wrote a service that would take human readable human maintainable configuration and convert it into Vulcan",
    "start": "2816339",
    "end": "2821960"
  },
  {
    "text": "d config which isn't particularly readable so this is just an example of the kind of file that we had it's",
    "start": "2821960",
    "end": "2827809"
  },
  {
    "text": "basically saying what other services do we need how do we start it how do we stop it and our deployment was based on a Yama",
    "start": "2827809",
    "end": "2836180"
  },
  {
    "text": "file in get that defined all the services that we wanted to run including the sidekicks how many instances and",
    "start": "2836180",
    "end": "2842480"
  },
  {
    "text": "what version and we had a go service that just looked at this file looked for changes and then made the environment",
    "start": "2842480",
    "end": "2848180"
  },
  {
    "text": "match whatever was in the latest version of the file so deployment to production was a gate merge onto master by mid-2015",
    "start": "2848180",
    "end": "2858349"
  },
  {
    "text": "we were running this in production so we started by building new stuff there and then we migrated everything else across",
    "start": "2858349",
    "end": "2863869"
  },
  {
    "text": "to it so what do we gain from doing this well we could run multiple services on each VM which we couldn't do with our",
    "start": "2863869",
    "end": "2869269"
  },
  {
    "text": "previous stack so we ended up running our services on eight extremely large VMs per region rather than 300 and that",
    "start": "2869269",
    "end": "2875269"
  },
  {
    "text": "was about a 40 percent reduction in AWS costs which was worthwhile for us and it was many fewer steps to start running a",
    "start": "2875269",
    "end": "2881720"
  },
  {
    "text": "new service in production you didn't need to provision a VM you didn't need to setup a deployment pipeline you just needed to edit a Hamel foil containers",
    "start": "2881720",
    "end": "2889999"
  },
  {
    "text": "gave us the father development staging and production were the same so you don't have any issues where the version of Java in one is different from the",
    "start": "2889999",
    "end": "2896089"
  },
  {
    "text": "version somewhere else but it came with challenges and most of this is because",
    "start": "2896089",
    "end": "2901460"
  },
  {
    "text": "we adopted it so early we had to build quite low stuff ourselves and when you do that that's kind of painful so",
    "start": "2901460",
    "end": "2907640"
  },
  {
    "text": "support ability of something you build yourself is a problem because you have nowhere else to go for help documentation in",
    "start": "2907640",
    "end": "2914520"
  },
  {
    "text": "particular of decisions people made and why is very rarely a priority and in our case most the containerization work was",
    "start": "2914520",
    "end": "2920850"
  },
  {
    "text": "done by a small group of developers who all left the FTA within a few months in 2016 so when that happens you've got",
    "start": "2920850",
    "end": "2926460"
  },
  {
    "text": "something you're supporting that you didn't you don't really understand deeply and I think every time you build something yourself you have something",
    "start": "2926460",
    "end": "2932670"
  },
  {
    "text": "that in three years time people will look at going well who knows how that works and we had technical debt now this",
    "start": "2932670",
    "end": "2938700"
  },
  {
    "text": "is true technical debt the idea that you consciously accept something that's not quite optimum because you know that you",
    "start": "2938700",
    "end": "2945119"
  },
  {
    "text": "get some benefit from it but it but eventually the interest on that technical debt starts to hurt you and",
    "start": "2945119",
    "end": "2950970"
  },
  {
    "text": "our routing was complex and error-prone people would try to add new roots into",
    "start": "2950970",
    "end": "2956430"
  },
  {
    "text": "our stack and they'd often get it wrong and when that happened they quite often broke all the rest of the routing too and there was limited rebalancing of",
    "start": "2956430",
    "end": "2963330"
  },
  {
    "text": "services so if we lost a VM we were okay because fleet would move all of those services to a different VM but it",
    "start": "2963330",
    "end": "2969210"
  },
  {
    "text": "wouldn't we can get restarting in that VM we didn't rebalance those containers and by late 2016 we were feeling the",
    "start": "2969210",
    "end": "2976050"
  },
  {
    "text": "pain but we were also looking out and seeing that tools were maturing so when we started using containers we didn't",
    "start": "2976050",
    "end": "2981060"
  },
  {
    "text": "have a lot of options for cluster management but now we could look around and see people successfully using cluster orchestrators in production and",
    "start": "2981060",
    "end": "2988260"
  },
  {
    "text": "this is the flip side of innovation tokens you should choose boring technology boring doesn't mean bad",
    "start": "2988260",
    "end": "2994040"
  },
  {
    "text": "boring technologies of things lots of people use successfully letting them focus on things that are differentiate is for their company and new new",
    "start": "2994040",
    "end": "3001490"
  },
  {
    "text": "innovative technologies exciting but the capabilities are not necessarily well understood in particular failure modes",
    "start": "3001490",
    "end": "3007700"
  },
  {
    "text": "are probably not well understood and you say you want boring in software that you're operating aft we often work at",
    "start": "3007700",
    "end": "3014960"
  },
  {
    "text": "the leading edge of technology even get a lot of benefits from doing that but sometimes that means that you need to",
    "start": "3014960",
    "end": "3020900"
  },
  {
    "text": "change your stack or revisit your decisions because you try something innovative and it didn't work or because the area's matured and now you can buy",
    "start": "3020900",
    "end": "3027619"
  },
  {
    "text": "something in that gives you the same benefits as the thing you've been building and maintaining and you",
    "start": "3027619",
    "end": "3033230"
  },
  {
    "text": "shouldn't be too scared of making the wrong decision so Jeff Pisa says there are two types of decision type one is",
    "start": "3033230",
    "end": "3038990"
  },
  {
    "text": "not reversible you should be very careful about making them but type two is like walking through a door you can always go back there in says they call it like a",
    "start": "3038990",
    "end": "3045420"
  },
  {
    "text": "one-way door to a door thing internally at AWS the dangers that people use the heavy weight decision-making process",
    "start": "3045420",
    "end": "3051270"
  },
  {
    "text": "that you need for a type 1 decision for everything so we built our own container stack because it was the right thing to",
    "start": "3051270",
    "end": "3056340"
  },
  {
    "text": "do but now we've moved to another stack because it seems like the right thing now and it's ready for us so end of 2016",
    "start": "3056340",
    "end": "3064920"
  },
  {
    "text": "we started looking to migrate away from our hand-rolled platform and we had a workshop evaluated a few options and we",
    "start": "3064920",
    "end": "3071760"
  },
  {
    "text": "selected kubernetes so communities was released in June 2014 and the one-point-six release in March",
    "start": "3071760",
    "end": "3078570"
  },
  {
    "text": "2017 was a few days of stabilization release ie this is ready for primetime and by August people like github or",
    "start": "3078570",
    "end": "3084600"
  },
  {
    "text": "migrating so that suggests that people trust that it's now ready for production use so we started looking at it early in",
    "start": "3084600",
    "end": "3092040"
  },
  {
    "text": "2017 again this is pretty early adoption and it solved our biggest issues I mean",
    "start": "3092040",
    "end": "3098130"
  },
  {
    "text": "there's a ton of stuff that Kunis's gives you I'm only really talking about the things where we we noticed the difference so it assigns names to every",
    "start": "3098130",
    "end": "3105630"
  },
  {
    "text": "service so routing was simpler and much less error-prone its self-healing unhealthy instances get restarted so you",
    "start": "3105630",
    "end": "3111420"
  },
  {
    "text": "don't have to spend a lot of time yourself doing this and it removes services around based on CPU or memory",
    "start": "3111420",
    "end": "3116520"
  },
  {
    "text": "load so you don't get some really unbalanced set of services we changed",
    "start": "3116520",
    "end": "3122070"
  },
  {
    "text": "our deployment mechanism at the same time part of it was just a simple swap of systemd service files to helm charts",
    "start": "3122070",
    "end": "3127530"
  },
  {
    "text": "that was very straightforward and part of it was that we actually introduced a templated Jenkins pipeline and this is",
    "start": "3127530",
    "end": "3132600"
  },
  {
    "text": "because although the gate based deployment was simple in theory it",
    "start": "3132600",
    "end": "3138030"
  },
  {
    "text": "wasn't so simple in practice first of all people found they had get merged issues surprisingly often but actually",
    "start": "3138030",
    "end": "3145080"
  },
  {
    "text": "the worst thing was when you wanted to a small change you ended up pulling in all of the changes anyone else had made to",
    "start": "3145080",
    "end": "3150510"
  },
  {
    "text": "production and then having to fix them up people just wanted to deploy their service but it's did a very simple",
    "start": "3150510",
    "end": "3157260"
  },
  {
    "text": "deployment mechanism everything on the yellow backgrounds automatic so basically there's not much there's not",
    "start": "3157260",
    "end": "3163320"
  },
  {
    "text": "much we have to do we're just doing testing verification then saying yep good to go so but February this this",
    "start": "3163320",
    "end": "3170850"
  },
  {
    "text": "year we were live on communities so the whole migration took us around a year which actually sounds pretty stacks up",
    "start": "3170850",
    "end": "3176370"
  },
  {
    "text": "very well with what I hear from other people doing this it just takes time to do this and we were slower than we could have been because we didn't staff it",
    "start": "3176370",
    "end": "3182020"
  },
  {
    "text": "very highly it's very hard to convince product and business that you want to spend a lot of your money and effort for",
    "start": "3182020",
    "end": "3188860"
  },
  {
    "text": "a year moving from one container stack to another so we probably didn't get as",
    "start": "3188860",
    "end": "3193900"
  },
  {
    "text": "many people as we should have done do that and this is a key point which is that actually moving around takes time",
    "start": "3193900",
    "end": "3200350"
  },
  {
    "text": "requires investment and you need to be able to sell that to your business so this is my suspect that this is just a",
    "start": "3200350",
    "end": "3205900"
  },
  {
    "text": "resume driven development oh yeah you're now introducing communities but actually you can sell things like you will do 200",
    "start": "3205900",
    "end": "3213070"
  },
  {
    "text": "times the number of releases that are you doing currently or the costs will go down by 40% or we'll be able to attract and keep",
    "start": "3213070",
    "end": "3221260"
  },
  {
    "text": "technical talent because we're using something that is state-of-the-art and you can probably build a road map that gives value along the way it's a way to",
    "start": "3221260",
    "end": "3227500"
  },
  {
    "text": "keep getting funding for the work that you know you need to do so what do we gain from this move it was a great",
    "start": "3227500",
    "end": "3232870"
  },
  {
    "text": "success for us it's considerably more stable and when things go wrong normally it heals itself it's much easier to",
    "start": "3232870",
    "end": "3239620"
  },
  {
    "text": "support we can look things up we can go to training courses this is this is a thing that other people use but there's",
    "start": "3239620",
    "end": "3246760"
  },
  {
    "text": "still challenges so we're happy compared with what we had before but you still have a platform you're maintaining if",
    "start": "3246760",
    "end": "3251980"
  },
  {
    "text": "you're running on Cuban titties and if you're a development team and not a platform team that's quite a bit of work we had a lot of experience so we were",
    "start": "3251980",
    "end": "3258610"
  },
  {
    "text": "able to adopt that but for other teams I see a patent I see working is to have a central team providing that platform so",
    "start": "3258610",
    "end": "3265120"
  },
  {
    "text": "delivery teams can just deploy the stuff they want to run without worrying about the gory details so now what are we",
    "start": "3265120",
    "end": "3271150"
  },
  {
    "text": "stopping at this point are we happy well contenders are definitely one of the",
    "start": "3271150",
    "end": "3277060"
  },
  {
    "text": "things we want to use at the FTA we we also do things like deploy apps to Heroku we have quite a lot of service",
    "start": "3277060",
    "end": "3282880"
  },
  {
    "text": "but most of our deployments - you see - we use containers it's part of our technical strategy but we don't have a",
    "start": "3282880",
    "end": "3287950"
  },
  {
    "text": "common approach we've got people using communities in fact we have two different teams using slightly different stacks we have people on ECS elastic",
    "start": "3287950",
    "end": "3294880"
  },
  {
    "text": "beanstalk so we kind of think maybe the thing to do is build one container deployment platform now so everything",
    "start": "3294880",
    "end": "3301030"
  },
  {
    "text": "doesn't have to build it on their own but really I think what we want to do is make it someone else's problem so",
    "start": "3301030",
    "end": "3307330"
  },
  {
    "text": "looking at eks Fargate and we want to to not have to do any operational stuff just run the workloads",
    "start": "3307330",
    "end": "3316570"
  },
  {
    "text": "like in summary for me what this has taught me is you need to get comfortable with change I think change is coming",
    "start": "3316570",
    "end": "3322220"
  },
  {
    "text": "quicker and quicker you can benefit a great deal if you're willing to change and adopt new things gives you an advantage you get good savings or you",
    "start": "3322220",
    "end": "3329450"
  },
  {
    "text": "get to move much more quickly it's been worth it for us but it requires a",
    "start": "3329450",
    "end": "3335150"
  },
  {
    "text": "culture change to accept that these things are always going to change and that's it for me thank you",
    "start": "3335150",
    "end": "3341560"
  },
  {
    "text": "[Applause]",
    "start": "3341560",
    "end": "3347219"
  }
]