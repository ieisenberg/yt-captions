[
  {
    "text": "[Music]",
    "start": "160",
    "end": "1180"
  },
  {
    "text": "[Applause]",
    "start": "1180",
    "end": "2930"
  },
  {
    "text": "[Music]",
    "start": "2930",
    "end": "6099"
  },
  {
    "text": "hello I'm Islam Cloud support engineer",
    "start": "8599",
    "end": "11320"
  },
  {
    "text": "here at vws office in Dublin today I'll",
    "start": "11320",
    "end": "14519"
  },
  {
    "text": "show you how to handle malforma gon",
    "start": "14519",
    "end": "16560"
  },
  {
    "text": "files when querying data in Amazon",
    "start": "16560",
    "end": "18560"
  },
  {
    "text": "Athena let's get",
    "start": "18560",
    "end": "20880"
  },
  {
    "text": "started we will cover some of the issues",
    "start": "20880",
    "end": "23439"
  },
  {
    "text": "you may encounter when dealing with gon",
    "start": "23439",
    "end": "25480"
  },
  {
    "text": "data on Amazon Athena how to investigate",
    "start": "25480",
    "end": "28320"
  },
  {
    "text": "the errors and how to fix",
    "start": "28320",
    "end": "30679"
  },
  {
    "text": "after logging into the ews Management",
    "start": "30679",
    "end": "32880"
  },
  {
    "text": "console navigate to the Amazon Athena",
    "start": "32880",
    "end": "37239"
  },
  {
    "text": "console I already created a table that",
    "start": "37840",
    "end": "40680"
  },
  {
    "text": "query is a malform Jon file so let's run",
    "start": "40680",
    "end": "43640"
  },
  {
    "text": "a select query as you can see the query",
    "start": "43640",
    "end": "47039"
  },
  {
    "text": "failed with the exception hi cursor",
    "start": "47039",
    "end": "49680"
  },
  {
    "text": "error row is not a valid gon object to",
    "start": "49680",
    "end": "53199"
  },
  {
    "text": "avoid the query failure when there is a",
    "start": "53199",
    "end": "55280"
  },
  {
    "text": "malform Jon the Ser property ignore",
    "start": "55280",
    "end": "58199"
  },
  {
    "text": "malform Jon should be added to the table",
    "start": "58199",
    "end": "61239"
  },
  {
    "text": "for that we can either recreate the",
    "start": "61239",
    "end": "63440"
  },
  {
    "text": "table from the Athena console or update",
    "start": "63440",
    "end": "66159"
  },
  {
    "text": "the table metadata from the ews glue",
    "start": "66159",
    "end": "68920"
  },
  {
    "text": "console let's navigate to the ews glue",
    "start": "68920",
    "end": "73320"
  },
  {
    "text": "console click on tables choose the table",
    "start": "73320",
    "end": "76880"
  },
  {
    "text": "Jon Mal formed and then select edit",
    "start": "76880",
    "end": "80479"
  },
  {
    "text": "table in the 30 parameters section let's",
    "start": "80479",
    "end": "84159"
  },
  {
    "text": "set ignor Mal form Jon to true",
    "start": "84159",
    "end": "89118"
  },
  {
    "text": "navigate back to the Athena console and",
    "start": "91360",
    "end": "94040"
  },
  {
    "text": "run the select query",
    "start": "94040",
    "end": "97040"
  },
  {
    "text": "again as you can see the query is now",
    "start": "97040",
    "end": "99880"
  },
  {
    "text": "successful and the corrupted rows show",
    "start": "99880",
    "end": "102840"
  },
  {
    "text": "as",
    "start": "102840",
    "end": "104920"
  },
  {
    "text": "empty to identify the files with malform",
    "start": "104920",
    "end": "108240"
  },
  {
    "text": "Jon I can use the following",
    "start": "108240",
    "end": "112240"
  },
  {
    "text": "query here's another way to identify the",
    "start": "115479",
    "end": "118439"
  },
  {
    "text": "rows and file name names that correspond",
    "start": "118439",
    "end": "121360"
  },
  {
    "text": "to an unvalid Jon first let's create a",
    "start": "121360",
    "end": "125000"
  },
  {
    "text": "table with a delimiter that is not",
    "start": "125000",
    "end": "126880"
  },
  {
    "text": "present in the input file I can use the",
    "start": "126880",
    "end": "129479"
  },
  {
    "text": "ddl example provided in the knowledge",
    "start": "129479",
    "end": "131520"
  },
  {
    "text": "Center",
    "start": "131520",
    "end": "132480"
  },
  {
    "text": "article now let's run this query to",
    "start": "132480",
    "end": "135640"
  },
  {
    "text": "return the file name row details and the",
    "start": "135640",
    "end": "138680"
  },
  {
    "text": "Amazon simple store service path for the",
    "start": "138680",
    "end": "141160"
  },
  {
    "text": "gon rows that are",
    "start": "141160",
    "end": "144280"
  },
  {
    "text": "invalid you might encounter J an",
    "start": "146360",
    "end": "149000"
  },
  {
    "text": "exception when you using hi Jon C or",
    "start": "149000",
    "end": "151800"
  },
  {
    "text": "open X Jon C with Jon text in pretty",
    "start": "151800",
    "end": "155440"
  },
  {
    "text": "print format let's see an example I have",
    "start": "155440",
    "end": "159120"
  },
  {
    "text": "the following data stored on Amazon S3",
    "start": "159120",
    "end": "162599"
  },
  {
    "text": "as you can see it's in pretty print",
    "start": "162599",
    "end": "167159"
  },
  {
    "text": "format let's return to Athena and create",
    "start": "167519",
    "end": "170440"
  },
  {
    "text": "a table to query that file I'm using the",
    "start": "170440",
    "end": "173000"
  },
  {
    "text": "following ddl query let's now run a",
    "start": "173000",
    "end": "176400"
  },
  {
    "text": "select",
    "start": "176400",
    "end": "178319"
  },
  {
    "text": "query as you can see see the query",
    "start": "178319",
    "end": "180760"
  },
  {
    "text": "results in the error hi cursor error row",
    "start": "180760",
    "end": "183879"
  },
  {
    "text": "is not a valid Jon object this error",
    "start": "183879",
    "end": "187040"
  },
  {
    "text": "occures because the Sur that was used",
    "start": "187040",
    "end": "189519"
  },
  {
    "text": "doesn't correspond to the format of the",
    "start": "189519",
    "end": "191720"
  },
  {
    "text": "data the open X gon Sur expect that each",
    "start": "191720",
    "end": "195720"
  },
  {
    "text": "gon document is on a single line to",
    "start": "195720",
    "end": "199360"
  },
  {
    "text": "resolve the issue we can recreate the",
    "start": "199360",
    "end": "201680"
  },
  {
    "text": "table using aadl query and then use the",
    "start": "201680",
    "end": "205560"
  },
  {
    "text": "iron hi Sur as it can par the Jon in",
    "start": "205560",
    "end": "208920"
  },
  {
    "text": "pretty print form",
    "start": "208920",
    "end": "211040"
  },
  {
    "text": "another option is to update the table",
    "start": "211040",
    "end": "213280"
  },
  {
    "text": "and replace the open x j and 30 by ion",
    "start": "213280",
    "end": "216760"
  },
  {
    "text": "hiive 30 we can update the table",
    "start": "216760",
    "end": "219519"
  },
  {
    "text": "metadata from the ews glue",
    "start": "219519",
    "end": "223640"
  },
  {
    "text": "console I'll open the ews glue console",
    "start": "223640",
    "end": "226879"
  },
  {
    "text": "and edit the table as we did previously",
    "start": "226879",
    "end": "230000"
  },
  {
    "text": "let's choose the table first and then",
    "start": "230000",
    "end": "232079"
  },
  {
    "text": "choose edit table and reactions we must",
    "start": "232079",
    "end": "235720"
  },
  {
    "text": "update input format output format and",
    "start": "235720",
    "end": "240000"
  },
  {
    "text": "realization Library as",
    "start": "240000",
    "end": "244000"
  },
  {
    "text": "Following return to the Athena console",
    "start": "249799",
    "end": "252720"
  },
  {
    "text": "and let's run the select query again the",
    "start": "252720",
    "end": "255519"
  },
  {
    "text": "query is now successful let's now see",
    "start": "255519",
    "end": "258600"
  },
  {
    "text": "the last scenario covered in this",
    "start": "258600",
    "end": "262160"
  },
  {
    "text": "video I have the following gon file that",
    "start": "262160",
    "end": "265240"
  },
  {
    "text": "I want to",
    "start": "265240",
    "end": "267720"
  },
  {
    "text": "query let's return to the Athena console",
    "start": "267840",
    "end": "270759"
  },
  {
    "text": "and create a table using the following",
    "start": "270759",
    "end": "274759"
  },
  {
    "text": "command let me try to query the",
    "start": "274880",
    "end": "279160"
  },
  {
    "text": "table the query Returns the error hi",
    "start": "279360",
    "end": "282639"
  },
  {
    "text": "cursor error row is not a valid gon",
    "start": "282639",
    "end": "285520"
  },
  {
    "text": "object gon exception duplicate key this",
    "start": "285520",
    "end": "289600"
  },
  {
    "text": "error occures because the source data",
    "start": "289600",
    "end": "292240"
  },
  {
    "text": "has two keys that are the same when they",
    "start": "292240",
    "end": "294800"
  },
  {
    "text": "are in lower case to fix the issue let's",
    "start": "294800",
    "end": "297639"
  },
  {
    "text": "update the table to make it use case",
    "start": "297639",
    "end": "300000"
  },
  {
    "text": "sensitive key names again let's update",
    "start": "300000",
    "end": "303120"
  },
  {
    "text": "the table from the AWS glue",
    "start": "303120",
    "end": "306759"
  },
  {
    "text": "console let's first set the property K",
    "start": "310160",
    "end": "313120"
  },
  {
    "text": "and sensitive to false to be able to use",
    "start": "313120",
    "end": "316240"
  },
  {
    "text": "case sensitive key names then I can use",
    "start": "316240",
    "end": "319120"
  },
  {
    "text": "a mapping property to map the key",
    "start": "319120",
    "end": "321400"
  },
  {
    "text": "username with uppercase to a different",
    "start": "321400",
    "end": "323680"
  },
  {
    "text": "colum name for example I can map it to",
    "start": "323680",
    "end": "326680"
  },
  {
    "text": "username with underscore",
    "start": "326680",
    "end": "330440"
  },
  {
    "text": "return to the Athena console and let's",
    "start": "333919",
    "end": "335919"
  },
  {
    "text": "run the select query",
    "start": "335919",
    "end": "337759"
  },
  {
    "text": "again you can see from the results that",
    "start": "337759",
    "end": "340600"
  },
  {
    "text": "the key username in uppercase was moed",
    "start": "340600",
    "end": "343520"
  },
  {
    "text": "to the colon username with underscore",
    "start": "343520",
    "end": "345880"
  },
  {
    "text": "and the query is now successful and now",
    "start": "345880",
    "end": "348639"
  },
  {
    "text": "you know how to handle malform gon files",
    "start": "348639",
    "end": "351360"
  },
  {
    "text": "when querying data in Amazon",
    "start": "351360",
    "end": "354600"
  },
  {
    "text": "Athena thanks for watching and happy",
    "start": "354600",
    "end": "357080"
  },
  {
    "text": "cloud computing from all of us here at",
    "start": "357080",
    "end": "359240"
  },
  {
    "text": "ew us",
    "start": "359240",
    "end": "361470"
  },
  {
    "text": "[Applause]",
    "start": "361470",
    "end": "363230"
  },
  {
    "text": "[Music]",
    "start": "363230",
    "end": "366389"
  },
  {
    "text": "[Music]",
    "start": "368430",
    "end": "371610"
  }
]