[
  {
    "start": "0",
    "end": "90000"
  },
  {
    "text": "hello everyone welcome my name is Stefano I'm a product manager at AWS and",
    "start": "960",
    "end": "8080"
  },
  {
    "text": "specifically I work on Amazon API Gateway first off I'd like to say thank",
    "start": "8080",
    "end": "13360"
  },
  {
    "text": "you for coming I am keenly aware that this is the last session of the day not",
    "start": "13360",
    "end": "18520"
  },
  {
    "text": "only that it's the last session separating yourselves and beer at the pop craw so thank you for taking the",
    "start": "18520",
    "end": "25279"
  },
  {
    "text": "time hopefully this will be helpful for all of you",
    "start": "25279",
    "end": "30800"
  },
  {
    "text": "I'd like to open another parenthesis before we start uh to thank the amazing",
    "start": "30800",
    "end": "35879"
  },
  {
    "text": "ecosystem of customers partners and developers that surrounds AWS because",
    "start": "35879",
    "end": "42600"
  },
  {
    "text": "all that we're doing would not have been possible without them and I'll give you a couple of examples when we launched",
    "start": "42600",
    "end": "48840"
  },
  {
    "text": "API Gateway we just a couple of days ago one of the AWS Partners three scale another another leader in the API",
    "start": "48840",
    "end": "54879"
  },
  {
    "text": "management space released a version of the tool set that allows you to create a develop ER portal manage authorization",
    "start": "54879",
    "end": "62680"
  },
  {
    "text": "and administration of your users that works with API Gateway and we've also seen many open",
    "start": "62680",
    "end": "69759"
  },
  {
    "text": "source Frameworks I'm sure you've heard of the Jaws framework come out to speed up development of apis with API Gateway",
    "start": "69759",
    "end": "77320"
  },
  {
    "text": "in Lambda so thank you an Applause should be for",
    "start": "77320",
    "end": "83240"
  },
  {
    "text": "yourself but let's get started the session today is all about building apis",
    "start": "83240",
    "end": "88799"
  },
  {
    "text": "with AWS and what we're going to look at is first",
    "start": "88799",
    "end": "93880"
  },
  {
    "start": "90000",
    "end": "90000"
  },
  {
    "text": "uh what is this new model that we are proposing this fully managed model where where we take care of your",
    "start": "93880",
    "end": "100439"
  },
  {
    "text": "infrastructure and then we're going to go deeper and we're going to use a practical example an actual application",
    "start": "100439",
    "end": "107040"
  },
  {
    "text": "that we've built to demonstrate how API Gateway works and integrate with the rest of AWS so we're going to use Lambda",
    "start": "107040",
    "end": "114040"
  },
  {
    "text": "to build our backend logic we're going to use Amazon Cognito to generate credentials and authorized calls to our",
    "start": "114040",
    "end": "121680"
  },
  {
    "text": "back end and then we look at how this is integrated with a client SDK we've built an iOS mobile app to show",
    "start": "121680",
    "end": "130080"
  },
  {
    "text": "this so the first thing we want to look at is this new Folly manag model you'll",
    "start": "130080",
    "end": "135319"
  },
  {
    "start": "131000",
    "end": "131000"
  },
  {
    "text": "see that it's a it's a fairly simple chart when you look at it it's just",
    "start": "135319",
    "end": "141720"
  },
  {
    "text": "client we use a mobile app in this case but it could really be another service a website anything you own talks to API",
    "start": "141720",
    "end": "149160"
  },
  {
    "text": "Gateway that then talks to Lambda and Lambda talks to anything else it's much simpler than what you're used to see and",
    "start": "149160",
    "end": "156000"
  },
  {
    "text": "what you're used to build yourselves and it's because that complexity is taken over by us and if you look at the zoomed",
    "start": "156000",
    "end": "162760"
  },
  {
    "text": "in zoomed in section down there that's how API Gateway Works requests first",
    "start": "162760",
    "end": "169239"
  },
  {
    "text": "come in through cloudfront so we use a global distribution with cloudfront to accept requests through all our 54 point",
    "start": "169239",
    "end": "176800"
  },
  {
    "text": "of presence around the world requests then go to AP Gateway in the region over",
    "start": "176800",
    "end": "181920"
  },
  {
    "text": "the internet and then API Gateway processes them and it can either read the cache if you've provisioned one and",
    "start": "181920",
    "end": "189239"
  },
  {
    "text": "respond without pinging your backand or run your logic whether that is an htpn",
    "start": "189239",
    "end": "195879"
  },
  {
    "text": "point that you own hosted on ec2 or anywhere else that is publicly accessible on the Internet or a Lambda",
    "start": "195879",
    "end": "204040"
  },
  {
    "start": "204000",
    "end": "204000"
  },
  {
    "text": "function so what I want you to take away from this session is first that that",
    "start": "204040",
    "end": "210400"
  },
  {
    "text": "using API Gateway plus Lambda means that you have no infrastructure to manage and",
    "start": "210400",
    "end": "216080"
  },
  {
    "text": "that scaling is incredibly simple and we see this particularly with with our mobile customers going from number 80 to",
    "start": "216080",
    "end": "224439"
  },
  {
    "text": "number two in the App Store takes 2 minutes and the spike in traffic the",
    "start": "224439",
    "end": "230360"
  },
  {
    "text": "velocity at which you have at which you have to reach the scale to handle that is not something that you can do easily",
    "start": "230360",
    "end": "236720"
  },
  {
    "text": "yourself and this is where manag services such as just API Gateway and Lambda come in because we have that",
    "start": "236720",
    "end": "242439"
  },
  {
    "text": "scale and we can handle your demand second is that security is",
    "start": "242439",
    "end": "248159"
  },
  {
    "text": "important duh well we talk with a lot of startups and very often what we hear is",
    "start": "248159",
    "end": "254239"
  },
  {
    "text": "yes security is important but we need to get to Market so we'll worry about that when it becomes a problem and we don't",
    "start": "254239",
    "end": "261479"
  },
  {
    "text": "think that world exists anymore given everything that's been happening security should be a top priority from",
    "start": "261479",
    "end": "268600"
  },
  {
    "text": "the GG go and so we're going to look at how you can leverage all of the work that we've done at",
    "start": "268600",
    "end": "274120"
  },
  {
    "text": "AWS to secure our infrastructure and how we've productize it and made it available to you so that you can",
    "start": "274120",
    "end": "280400"
  },
  {
    "text": "leverage it easily and finally we'll look at how to automate the workflow importing Swagger",
    "start": "280400",
    "end": "288360"
  },
  {
    "text": "definitions so that you can keep them um in your Source repository and incidentally on this I need to open",
    "start": "288360",
    "end": "294520"
  },
  {
    "text": "another parenthesis about the ecosystem if you know we've published the Swagger imported utility on GitHub and a short",
    "start": "294520",
    "end": "301880"
  },
  {
    "text": "time after uh the good folks from moft sent us a pull request that added support for",
    "start": "301880",
    "end": "308960"
  },
  {
    "text": "raml to that utility so raml is coming very soon it's",
    "start": "308960",
    "end": "314000"
  },
  {
    "text": "just a matter of us accepting that and it's coming to build our demo we're going to",
    "start": "314000",
    "end": "321400"
  },
  {
    "start": "318000",
    "end": "318000"
  },
  {
    "text": "use these four Services I mentioned them earlier the first is API Gateway this is what hosts our apis and what defines our",
    "start": "321400",
    "end": "327680"
  },
  {
    "text": "contract with our developers and end users Lambda will run our application's logic",
    "start": "327680",
    "end": "333720"
  },
  {
    "text": "and then Amazon Cognito is in charge of managing the end user identities and",
    "start": "333720",
    "end": "339199"
  },
  {
    "text": "delivering credentials that secure access to our apis and finally we're using dynb as a",
    "start": "339199",
    "end": "346280"
  },
  {
    "text": "data store so let's get right to it and yes",
    "start": "346280",
    "end": "351680"
  },
  {
    "text": "it is another pet store that that seems to be the hello world of apis but it is",
    "start": "351680",
    "end": "358199"
  },
  {
    "text": "a pet store with a twist there's two separate call flows in our",
    "start": "358199",
    "end": "364560"
  },
  {
    "start": "360000",
    "end": "360000"
  },
  {
    "text": "application the first one is the on authenticated flow when we don't know who the user is yet it just calls our",
    "start": "364560",
    "end": "371840"
  },
  {
    "text": "login or registration apis and in that case we will accept",
    "start": "371840",
    "end": "377599"
  },
  {
    "text": "requests authenticate the user against a user database and then give them AWS",
    "start": "377599",
    "end": "384120"
  },
  {
    "text": "credentials once they have those AWS credentials in the client we can switch",
    "start": "384120",
    "end": "390160"
  },
  {
    "text": "to our authenticated workflow which is where the pet store actually lives and all API requests are authenticated are",
    "start": "390160",
    "end": "398880"
  },
  {
    "text": "tracked against the user and authorized down Downstream throughout the AWS",
    "start": "398880",
    "end": "404039"
  },
  {
    "text": "Services we use and we'll go into quite a bit of detail on that and we'll also show you some code of how the",
    "start": "404039",
    "end": "410680"
  },
  {
    "text": "application works so what's new about this new",
    "start": "410680",
    "end": "416639"
  },
  {
    "start": "412000",
    "end": "412000"
  },
  {
    "text": "workflow well the first one is I always always hear people saying it's a serverless backand it's it's not",
    "start": "416639",
    "end": "423280"
  },
  {
    "text": "serverless in fact your application can use thousands of servers the difference is that you don't have to manage any one",
    "start": "423280",
    "end": "428879"
  },
  {
    "text": "of them we do that spin them up and spin them down for you as",
    "start": "428879",
    "end": "435319"
  },
  {
    "text": "needed we'll learn to leverage all of the AWS tools for",
    "start": "435319",
    "end": "440440"
  },
  {
    "text": "authorization as I mentioned we've done a lot of work at AWS to make sure that we had a secure environment and we've",
    "start": "440440",
    "end": "447039"
  },
  {
    "text": "built all of these tools such as IM am to manage policies and access control so we'll show how our",
    "start": "447039",
    "end": "453840"
  },
  {
    "text": "application leveraged these and finally we'll look at how we deploy the",
    "start": "453840",
    "end": "460160"
  },
  {
    "text": "API so let's Jump Right In the first component in architecture is API Gateway That's What receives a request coming in",
    "start": "460160",
    "end": "468479"
  },
  {
    "start": "468000",
    "end": "468000"
  },
  {
    "text": "so for those of you who are not familiar with API Gateway you want to learn more uh this is a brief overview so what API",
    "start": "468479",
    "end": "475479"
  },
  {
    "text": "Gateway offers is an abstraction on top of your existing API or your backend",
    "start": "475479",
    "end": "481440"
  },
  {
    "text": "logic and you can I like to think of it as an interface for",
    "start": "481440",
    "end": "487360"
  },
  {
    "text": "developers you build this interface so that you can later on change the",
    "start": "487360",
    "end": "492520"
  },
  {
    "text": "implementation the contract with the other developers Remains the Same because the interface is stable but your",
    "start": "492520",
    "end": "498599"
  },
  {
    "text": "implementation can be changed at well next is Network management this is",
    "start": "498599",
    "end": "506599"
  },
  {
    "text": "something we do a lot at AWS and we have learned a lot over the years the first thing is Dos",
    "start": "506599",
    "end": "512760"
  },
  {
    "text": "protection it's complex AWS API Gateway offers um layer seven dos protection so",
    "start": "512760",
    "end": "520518"
  },
  {
    "text": "malitia request if we can identify them and layer three dos protection so Sim",
    "start": "520519",
    "end": "525839"
  },
  {
    "text": "floods for example this is something we absorb and we handle you don't have to worry about",
    "start": "525839",
    "end": "531760"
  },
  {
    "text": "them and finally AWS or and I go on about this quite a bit",
    "start": "531760",
    "end": "538240"
  },
  {
    "text": "like a broken record but the big news with API Gateway is the fact that we treat your service your API and the",
    "start": "538240",
    "end": "545200"
  },
  {
    "text": "methods within your API as if you were an AWS service yourself so if you're used to working",
    "start": "545200",
    "end": "551120"
  },
  {
    "text": "with AWS you know we have the Amazon resource name those very readable Arns",
    "start": "551120",
    "end": "558200"
  },
  {
    "text": "that we give you and they uniquely identify a resource in your AWS account",
    "start": "558200",
    "end": "563240"
  },
  {
    "text": "so every one of your API methods so for example the post to/ users will have its",
    "start": "563240",
    "end": "568560"
  },
  {
    "text": "own AR and you can use it in your IM am access policies so you can leverage all",
    "start": "568560",
    "end": "574600"
  },
  {
    "text": "of the AWS tools to manage the security of your own apis of your own",
    "start": "574600",
    "end": "581600"
  },
  {
    "start": "582000",
    "end": "582000"
  },
  {
    "text": "software this is to give you an idea of how API Gateway thinks about your",
    "start": "582000",
    "end": "587040"
  },
  {
    "text": "requests it's a screenshot from our Management console uh this is the main page you will be looking at quite a lot",
    "start": "587040",
    "end": "593839"
  },
  {
    "text": "as you work with API Gateway and as you can see on the left we have the structure of the API",
    "start": "593839",
    "end": "599680"
  },
  {
    "text": "this is actually the API we are using for this demo and on the right we have the method editor there we are looking",
    "start": "599680",
    "end": "606760"
  },
  {
    "text": "at a specific method that posts to SL users there's four steps in a request",
    "start": "606760",
    "end": "613839"
  },
  {
    "text": "life cycle in API Gateway first is the method request which is where you define",
    "start": "613839",
    "end": "619519"
  },
  {
    "text": "uh what the body of the incoming request should look like which parameters query string headers it should accept and how",
    "start": "619519",
    "end": "626560"
  },
  {
    "text": "it's authorized this is the contract with your end users this is how you define",
    "start": "626560",
    "end": "631839"
  },
  {
    "text": "the public facing part of your API once that passed we go to the integration",
    "start": "631839",
    "end": "637600"
  },
  {
    "text": "request at that step you will be able to modify the incoming request transform it",
    "start": "637600",
    "end": "643560"
  },
  {
    "text": "however you want before it's sent to your backand you can also pass it straight",
    "start": "643560",
    "end": "649240"
  },
  {
    "text": "through if the interface looks exactly the same as your backand expects it once",
    "start": "649240",
    "end": "654680"
  },
  {
    "text": "the request is processed by your back end it comes out and you have the inte integration response step that is where",
    "start": "654680",
    "end": "662000"
  },
  {
    "text": "we capture the output coming out from your back end and you get another chance to transform it in case you want to",
    "start": "662000",
    "end": "668399"
  },
  {
    "text": "change it before it's sent back to your end users and there you also map it to http",
    "start": "668399",
    "end": "675240"
  },
  {
    "text": "status codes so for example in Lambda there is no concept of status codes but you will be throwing exception perhaps",
    "start": "675240",
    "end": "682760"
  },
  {
    "text": "so that's where you trap those exceptions and you say if the exception is this you should return a 400 or a 5",
    "start": "682760",
    "end": "689279"
  },
  {
    "text": "00 and we'll go into this during our our demo and samples and",
    "start": "689279",
    "end": "696120"
  },
  {
    "text": "finally is the method response which is again the definition of the contract with the end users what the API looks",
    "start": "696120",
    "end": "702440"
  },
  {
    "text": "like what it returns and I've drawn that vertical line because the way I think about it is",
    "start": "702440",
    "end": "709440"
  },
  {
    "text": "that everything on the left method request and Method response is the public facing part of your API is is",
    "start": "709440",
    "end": "715120"
  },
  {
    "text": "what you should strive not to change it's your stable interface and everything on the right what we call",
    "start": "715120",
    "end": "722120"
  },
  {
    "text": "integration is almost already part of your back end it's where you transform and tell API Gateway how to interact",
    "start": "722120",
    "end": "730040"
  },
  {
    "text": "with your back end and my clicker clicks excellent so",
    "start": "730040",
    "end": "737000"
  },
  {
    "start": "735000",
    "end": "735000"
  },
  {
    "text": "this is the API structure from our demo it's very simple we have the users and",
    "start": "737000",
    "end": "743600"
  },
  {
    "text": "login resources this is what we use to register and authenticate",
    "start": "743600",
    "end": "749560"
  },
  {
    "text": "users these require no authorization they are all authenticated methods and then we have the pet store itself which",
    "start": "749560",
    "end": "756600"
  },
  {
    "text": "have a SL has a SL Pats resource and the SL Pats Pat ID resource where you can",
    "start": "756600",
    "end": "763360"
  },
  {
    "text": "get the specifics of a pet now before before we go and actually",
    "start": "763360",
    "end": "770440"
  },
  {
    "text": "look at the code I want to show you the application very quickly to see what we'll end up",
    "start": "770440",
    "end": "777800"
  },
  {
    "text": "with you'll forgive me I'm not exactly a designer so it doesn't look particularly",
    "start": "777839",
    "end": "785720"
  },
  {
    "text": "flashy but the first thing it does is ask me for a login this is because it doesn't know",
    "start": "785720",
    "end": "792480"
  },
  {
    "text": "who we are so we're going through that um unauthenticated",
    "start": "792480",
    "end": "798040"
  },
  {
    "text": "flow what the application is doing now is spinning up my Lambda function logging in ask for the list of pets and",
    "start": "798040",
    "end": "806399"
  },
  {
    "text": "when I click it gets individual pets very very simple but there's quite a lot",
    "start": "806399",
    "end": "812079"
  },
  {
    "text": "going on behind it so let's get back to it and see how it's built both the application and its",
    "start": "812079",
    "end": "819160"
  },
  {
    "text": "back end the first thing we're doing is",
    "start": "819160",
    "end": "824360"
  },
  {
    "start": "822000",
    "end": "822000"
  },
  {
    "text": "defining that API structure we've just seen I'm using swagger for this",
    "start": "824360",
    "end": "830639"
  },
  {
    "text": "sample and I'm showing you this slide with a snippet of our Swagger code",
    "start": "830639",
    "end": "836160"
  },
  {
    "text": "because I want to draw the distinction between the various sections if you remember when we looked at the",
    "start": "836160",
    "end": "841560"
  },
  {
    "text": "screenshots we had those four boxes and as you can see in the Swagger you can clearly identify that the top",
    "start": "841560",
    "end": "848480"
  },
  {
    "text": "part SL post to/ users identifies which method it is and then we have a",
    "start": "848480",
    "end": "856000"
  },
  {
    "text": "definition of what the API receives what it what it which parameters it accepts and what it produces this is our method",
    "start": "856000",
    "end": "863759"
  },
  {
    "text": "request and then we have a custom extension that we've added the X Amazon",
    "start": "863759",
    "end": "869160"
  },
  {
    "text": "API Gateway integration that is where you tell API Gateway how to interact",
    "start": "869160",
    "end": "874240"
  },
  {
    "text": "with your backand that is where you define your two integration boxes and finally you have the method",
    "start": "874240",
    "end": "881560"
  },
  {
    "text": "response or your public definition of what the 200 status code looks like and what the 400 will look like so let's go",
    "start": "881560",
    "end": "889720"
  },
  {
    "text": "through the actual Swagger definition",
    "start": "889720",
    "end": "894920"
  },
  {
    "text": "file can we all read the read the text or should I make it",
    "start": "895199",
    "end": "901079"
  },
  {
    "text": "bigger good okay so it's very straightforward the first thing we're looking at is the post SL users our",
    "start": "901079",
    "end": "908680"
  },
  {
    "text": "registration API as you've seen from the slides it consumes Json it produces Json",
    "start": "908680",
    "end": "917320"
  },
  {
    "text": "it receives a body object with a username and password for the new",
    "start": "917320",
    "end": "923199"
  },
  {
    "text": "user and then it integrates with another AWS service",
    "start": "923199",
    "end": "930079"
  },
  {
    "text": "as it's very clear to see from this another very friendly readable URL it's",
    "start": "930079",
    "end": "936000"
  },
  {
    "text": "a Lambda function we are calling this is the invocation URL for the Lambda function and then we have this",
    "start": "936000",
    "end": "942319"
  },
  {
    "text": "credentials filled and here we're specifying a",
    "start": "942319",
    "end": "947360"
  },
  {
    "text": "role in our AWS account and that is because this API call is one of the",
    "start": "947360",
    "end": "954160"
  },
  {
    "text": "unauthenticated calls so we don't have credentials coming in we don't know who the user is so when API Gateway receives",
    "start": "954160",
    "end": "961120"
  },
  {
    "text": "the request it needs to assume a role in your account to be able to invoke the Lambda",
    "start": "961120",
    "end": "966920"
  },
  {
    "text": "function and I'd like to look I'd like you to look at this in contrast to one",
    "start": "966920",
    "end": "972399"
  },
  {
    "text": "of the authenticated requests so let's go and look at the pet store for example",
    "start": "972399",
    "end": "977639"
  },
  {
    "text": "the API to create a new Pat the post to/ pads you will see that the first",
    "start": "977639",
    "end": "983319"
  },
  {
    "text": "thing we have a new authorization tag that tells API Gateway that we we are",
    "start": "983319",
    "end": "988720"
  },
  {
    "text": "using am to authorize this request and when we go to the",
    "start": "988720",
    "end": "995399"
  },
  {
    "text": "integration you'll see this role there's nothing strange here this",
    "start": "995440",
    "end": "1001319"
  },
  {
    "text": "is U something that's always been available it's a bit of I am Witchcraft and what we are telling API Gateway here",
    "start": "1001319",
    "end": "1008759"
  },
  {
    "text": "is that we want to take the credentials from the incoming request and pass them on to Lambda so run the Lambda function",
    "start": "1008759",
    "end": "1016560"
  },
  {
    "text": "with the same credentials of the call to give Lambda the exact same permissions that you have assigned to",
    "start": "1016560",
    "end": "1023000"
  },
  {
    "text": "the end user when you produce the credentials for them and then as we go on you see that",
    "start": "1023000",
    "end": "1031959"
  },
  {
    "text": "in the integration definition we have a space where we transform the incoming",
    "start": "1031959",
    "end": "1037480"
  },
  {
    "text": "request and we'll go into more details of how this works and why I've done it this way later and how we map the",
    "start": "1037480",
    "end": "1045319"
  },
  {
    "text": "responses as I said you may throw exceptions so we want to make sure that those are mapped to the correct HTTP",
    "start": "1045319",
    "end": "1052120"
  },
  {
    "text": "status",
    "start": "1052120",
    "end": "1054520"
  },
  {
    "text": "code so we recommend you use something like Swagger or raml to Define your apis",
    "start": "1057760",
    "end": "1064679"
  },
  {
    "text": "because gives this gives you the ability to keep the API definition in your own",
    "start": "1064679",
    "end": "1070280"
  },
  {
    "start": "1068000",
    "end": "1068000"
  },
  {
    "text": "repository it's yours you own it you can version it you can work on it as much as you want and API Gateway should purely",
    "start": "1070280",
    "end": "1077039"
  },
  {
    "text": "be the tools that run it it you just deploy it to API",
    "start": "1077039",
    "end": "1082880"
  },
  {
    "text": "Gateway additionally both Swagger and raml provide a lot of tools open source tools",
    "start": "1083280",
    "end": "1090360"
  },
  {
    "text": "that can work with API definitions to generate documentation or even generate additional sdks so if you already work",
    "start": "1090360",
    "end": "1097360"
  },
  {
    "text": "with swagger you can import the definition API Gateway and then reuse the same file to generate documentation",
    "start": "1097360",
    "end": "1104840"
  },
  {
    "text": "generate sdks and anything else you may need so it's it it's not too intrusive into your",
    "start": "1104840",
    "end": "1111559"
  },
  {
    "text": "workflow it's just one additional step deploy to API Gateway and as you can see",
    "start": "1111559",
    "end": "1117200"
  },
  {
    "text": "it's a oneline command to get the entire Swagger file",
    "start": "1117200",
    "end": "1122400"
  },
  {
    "text": "into API Gateway and deployed so now we've we've defined our",
    "start": "1122400",
    "end": "1128760"
  },
  {
    "text": "API we have that definition the shape of it and the next thing we need to do is",
    "start": "1128760",
    "end": "1134400"
  },
  {
    "text": "Route requests decide how to handle them as I mentioned the applications",
    "start": "1134400",
    "end": "1141080"
  },
  {
    "start": "1138000",
    "end": "1138000"
  },
  {
    "text": "logic lives in AWS Lambda this is a service that needs little in way of",
    "start": "1141080",
    "end": "1147280"
  },
  {
    "text": "introduction how many of you have worked tried played with Lambda yeah that's that's what I thought",
    "start": "1147280",
    "end": "1155240"
  },
  {
    "text": "U so Lambda is our stateless trigger based compute",
    "start": "1155240",
    "end": "1160960"
  },
  {
    "text": "service what that means is that it gets rid of all of the boilerplate code that",
    "start": "1160960",
    "end": "1166880"
  },
  {
    "text": "you're used to writing around it to you know stand up your web server accept requests and to all of that you simply",
    "start": "1166880",
    "end": "1172720"
  },
  {
    "text": "write your applications logic upload it to Lambda and we run it on demand and",
    "start": "1172720",
    "end": "1178400"
  },
  {
    "text": "these events can be triggered by a file get being uploaded to S3 a row being modified in Dynamo DB or in our case a",
    "start": "1178400",
    "end": "1186880"
  },
  {
    "text": "request coming into API Gateway another great thing of lamba is",
    "start": "1186880",
    "end": "1193000"
  },
  {
    "text": "that you pay only when your code runs if your code runs runs for 100",
    "start": "1193000",
    "end": "1198960"
  },
  {
    "text": "milliseconds in a month you will pay for 100 milliseconds the rest is on",
    "start": "1198960",
    "end": "1205559"
  },
  {
    "text": "us so it's a great",
    "start": "1205559",
    "end": "1209799"
  },
  {
    "text": "model so how does our application work you may have noticed when I open",
    "start": "1210720",
    "end": "1216000"
  },
  {
    "text": "intellig that I've you I've written the application in Java and it compiles that into a single",
    "start": "1216000",
    "end": "1222320"
  },
  {
    "text": "jar and what that means is that I I have a single Lambda function that handles all of my apis",
    "start": "1222320",
    "end": "1228919"
  },
  {
    "text": "this is not necessarily best practices this is something I've decided to do this is how I prefer to work",
    "start": "1228919",
    "end": "1236000"
  },
  {
    "text": "because I of course we need to update",
    "start": "1236000",
    "end": "1241880"
  },
  {
    "start": "1242000",
    "end": "1242000"
  },
  {
    "text": "Java because I'd um I'd rather work with a single Lambda function rather than multiple functions",
    "start": "1243640",
    "end": "1251039"
  },
  {
    "text": "and updating them but as I said any approach is perfectly valid is purely how you prefer to work so how now I've",
    "start": "1251039",
    "end": "1258400"
  },
  {
    "text": "done this um if you remember where we looked at the Swagger that was that little snippet of request transformation",
    "start": "1258400",
    "end": "1266080"
  },
  {
    "text": "when it comes in and you can see the example down there my template what I'm doing there is telling",
    "start": "1266080",
    "end": "1273600"
  },
  {
    "text": "API Gateway that when a request comes in I want to generate this new Json object",
    "start": "1273600",
    "end": "1278799"
  },
  {
    "text": "the first property is the action where I have hardcoded the name of the class that I",
    "start": "1278799",
    "end": "1284880"
  },
  {
    "text": "want to run for that request and then I have a body property where I simply tell API Gateway to read everything that's",
    "start": "1284880",
    "end": "1291559"
  },
  {
    "text": "come in and just slot it in there so let's go and look at the code",
    "start": "1291559",
    "end": "1297679"
  },
  {
    "text": "for this I have a Lambda Handler a single entry point for my Lambda",
    "start": "1297679",
    "end": "1303520"
  },
  {
    "text": "function which is right here in my request router this the Lambda Handler so when I upload my jar to Lambda I",
    "start": "1303520",
    "end": "1310720"
  },
  {
    "text": "simply tell it to point to request router Lambda Handler and run this for",
    "start": "1310720",
    "end": "1315919"
  },
  {
    "text": "every single request so what I'm doing here is parsing the input Json that's",
    "start": "1315919",
    "end": "1324679"
  },
  {
    "text": "come from API Gateway once that's done it's completed",
    "start": "1324679",
    "end": "1330320"
  },
  {
    "text": "successfully I read my action object from there and if you remember that was the name of the class that I want to",
    "start": "1330320",
    "end": "1337440"
  },
  {
    "text": "execute and once I have the action object I simply try to instantiate the",
    "start": "1337440",
    "end": "1343200"
  },
  {
    "text": "class all of my actions as you can see them here on the left implement this in",
    "start": "1343200",
    "end": "1348559"
  },
  {
    "text": "interace so once I've once I've instantiated that class all I need to do is read the body",
    "start": "1348559",
    "end": "1355760"
  },
  {
    "text": "and R the handle method of my object with the body and this way I have a single Lambda function that handles all",
    "start": "1355760",
    "end": "1363400"
  },
  {
    "text": "API",
    "start": "1363400",
    "end": "1365840"
  },
  {
    "text": "methods so now we have our plumbing for requests coming in the next thing is",
    "start": "1368840",
    "end": "1377320"
  },
  {
    "start": "1377000",
    "end": "1377000"
  },
  {
    "text": "what we send back back what goes out and so as I mentioned there's",
    "start": "1377320",
    "end": "1383400"
  },
  {
    "text": "different classes one per method in my API and what I've done is I've made sure that all these classes throw exceptions",
    "start": "1383400",
    "end": "1390480"
  },
  {
    "text": "if something goes wrong and I've defined a number of custom exceptions in my application but there's two in",
    "start": "1390480",
    "end": "1397200"
  },
  {
    "text": "particular that I'm interested in one that I throw if I have wrong parameters coming in my bad request that's a",
    "start": "1397200",
    "end": "1404960"
  },
  {
    "text": "400 and one that I throw if something really really bad happens and I've made",
    "start": "1404960",
    "end": "1410320"
  },
  {
    "text": "a mistake and that's my 500 you can have as many as you want of",
    "start": "1410320",
    "end": "1416440"
  },
  {
    "text": "course I've kept it very simple here just 400 500 but there's nothing stopping you from defining a 401 402",
    "start": "1416440",
    "end": "1425159"
  },
  {
    "text": "403 as many as you need and you can see in the mapping there what I've done in API Gateway is I told it to expect",
    "start": "1425159",
    "end": "1432960"
  },
  {
    "text": "something that begins with bad then becomes a 400 something that begins with int",
    "start": "1432960",
    "end": "1438640"
  },
  {
    "text": "becomes a 500 so if we jump back to my",
    "start": "1438640",
    "end": "1444600"
  },
  {
    "text": "code you see that I have quite a few custom exceptions here but my Lambda",
    "start": "1444600",
    "end": "1451960"
  },
  {
    "text": "Handler function only throws these two sorry only throws a bet request and",
    "start": "1451960",
    "end": "1460760"
  },
  {
    "text": "an internal error and all I've done is in these",
    "start": "1460760",
    "end": "1465919"
  },
  {
    "text": "custom exceptions the bad request I've added this prefix so whenever the exception is",
    "start": "1465919",
    "end": "1471960"
  },
  {
    "text": "generated and the message is Pat out it contains that prefix bad request and",
    "start": "1471960",
    "end": "1477760"
  },
  {
    "text": "that's what API Gateway matches again it's not best practice it was my choice I decided to implement it",
    "start": "1477760",
    "end": "1484600"
  },
  {
    "text": "this way is perfectly valid you could do it any other",
    "start": "1484600",
    "end": "1491240"
  },
  {
    "text": "way but now we have the plumbing in place we can receive request run them in",
    "start": "1492919",
    "end": "1498760"
  },
  {
    "text": "the correct class and generate valid responses or valid",
    "start": "1498760",
    "end": "1505000"
  },
  {
    "start": "1505000",
    "end": "1505000"
  },
  {
    "text": "exceptions so what I want you to take away from this is that mapping templates",
    "start": "1505000",
    "end": "1510360"
  },
  {
    "text": "are extremely powerful I'm doing something very simple here in my sample I've just created that action and body",
    "start": "1510360",
    "end": "1516960"
  },
  {
    "text": "and just read everything in but there's quite a lot you can do in mapping templates you can read the body with",
    "start": "1516960",
    "end": "1522960"
  },
  {
    "text": "adjacent path you have for Loop you have if stat ments and we have a whole set of",
    "start": "1522960",
    "end": "1530279"
  },
  {
    "text": "variables for you to use so there's the input variable you can see there which contains all of the incoming request",
    "start": "1530279",
    "end": "1537720"
  },
  {
    "text": "there's a context variable that does exactly what it says it contains the context of the request",
    "start": "1537720",
    "end": "1544520"
  },
  {
    "text": "so it can tell you who the user is what's their IP address what role they've assumed if they have a role",
    "start": "1544520",
    "end": "1551120"
  },
  {
    "text": "what's their identity ID if they have one everything that we know about the incoming request you can read it and",
    "start": "1551120",
    "end": "1557480"
  },
  {
    "text": "pass pass it on to your back end and then we also have a utils function that you can see there",
    "start": "1557480",
    "end": "1565919"
  },
  {
    "text": "and util contains a few utility methods you can basic the for en code content",
    "start": "1565919",
    "end": "1572000"
  },
  {
    "text": "you can JavaScript Escape you can Json Escape your content as it goes through",
    "start": "1572000",
    "end": "1578919"
  },
  {
    "text": "and we have a whole page on the documentation with the reference of the mapping template so take a look because",
    "start": "1578919",
    "end": "1585000"
  },
  {
    "text": "they're extremely powerful once you learn that so as I said now we have the plumbing in",
    "start": "1585000",
    "end": "1590679"
  },
  {
    "text": "place we can receive requests and respond to them so the next step is to get",
    "start": "1590679",
    "end": "1597360"
  },
  {
    "text": "credentials to the client so that they can access our pet store as I mentioned we are going to use",
    "start": "1597360",
    "end": "1604320"
  },
  {
    "start": "1602000",
    "end": "1602000"
  },
  {
    "text": "Amazon Cognito to get the credentials for those of you who are not familiar",
    "start": "1604320",
    "end": "1609360"
  },
  {
    "text": "with Cognito Cognito is an identity management service it basically creates",
    "start": "1609360",
    "end": "1614880"
  },
  {
    "text": "a unique stable identifier for your your end user and this identifier can be",
    "start": "1614880",
    "end": "1620440"
  },
  {
    "text": "associated with a public login so Facebook Google Amazon we also support",
    "start": "1620440",
    "end": "1626120"
  },
  {
    "text": "Twitter and digits or with your own user identity if you run your own user database like",
    "start": "1626120",
    "end": "1633279"
  },
  {
    "text": "we're doing in my demo once you have the stable unique identifier Cognito helps you retrieve",
    "start": "1633279",
    "end": "1640480"
  },
  {
    "text": "AWS credentials for them these credentials are temporary they only last for 1 hour and they are associated with",
    "start": "1640480",
    "end": "1647679"
  },
  {
    "text": "the user with a specific identity ID of the end user and within with a role in",
    "start": "1647679",
    "end": "1652840"
  },
  {
    "text": "your AWS account so that's what regulates what the credentials have access to and Cognito can also save data",
    "start": "1652840",
    "end": "1660760"
  },
  {
    "text": "for the user and synchronize it across devices U we're not going to use this feature in this demo we are purely",
    "start": "1660760",
    "end": "1666559"
  },
  {
    "text": "concerned with creating identities and getting those credentials back so the details of the",
    "start": "1666559",
    "end": "1673919"
  },
  {
    "start": "1671000",
    "end": "1671000"
  },
  {
    "text": "unauthenticated flows we have registration and L l in the flow is fairly similar they check the user",
    "start": "1673919",
    "end": "1681679"
  },
  {
    "text": "credentials or create the user credentials in our Dynamo DB table and once the user is authenticated",
    "start": "1681679",
    "end": "1688360"
  },
  {
    "text": "they make the call to Amazon Cognito to get those credentials this is the flow of how that",
    "start": "1688360",
    "end": "1694919"
  },
  {
    "start": "1691000",
    "end": "1691000"
  },
  {
    "text": "call works the client will call they make a post to log in with a username and",
    "start": "1694919",
    "end": "1701039"
  },
  {
    "text": "password the first thing we do in our Lambda function is authenticate against Dynamo DB verify this use anmin password",
    "start": "1701039",
    "end": "1708919"
  },
  {
    "text": "once we have verified this we start the Cognito flow so the first thing we'll do",
    "start": "1708919",
    "end": "1716279"
  },
  {
    "text": "is ask Cognito to give us an open ID connect token and the identity ID for",
    "start": "1716279",
    "end": "1722039"
  },
  {
    "text": "the end user and what we I'm paraphrasing here but what we are saying in that API is hey Cognito I've",
    "start": "1722039",
    "end": "1729080"
  },
  {
    "text": "authenticated this user I trust them here's my unique identifier for them please give me an identity and token",
    "start": "1729080",
    "end": "1737360"
  },
  {
    "text": "Cognito responds with those two and the next step in the flow is to get the credentials so we sent Cognito back the",
    "start": "1737360",
    "end": "1744679"
  },
  {
    "text": "open ID token and Cognito will trade that token for AWS credentials and",
    "start": "1744679",
    "end": "1751519"
  },
  {
    "text": "return them to our Lambda function which then sends them back to the client so",
    "start": "1751519",
    "end": "1757760"
  },
  {
    "text": "that I'm going I'm going to take you through that login action in the",
    "start": "1757760",
    "end": "1763360"
  },
  {
    "text": "code is the login demo action so this is what runs",
    "start": "1765600",
    "end": "1772000"
  },
  {
    "text": "when you log in the first thing is read the incoming request into",
    "start": "1772000",
    "end": "1779240"
  },
  {
    "text": "our model into our bean and then we do some basic validation on it and if something's",
    "start": "1779240",
    "end": "1786600"
  },
  {
    "text": "wrong we return a bad request which translates to a 400 once that's",
    "start": "1786600",
    "end": "1792559"
  },
  {
    "text": "done we get our Dio object and we load the user from Dynamo DB get user by",
    "start": "1792559",
    "end": "1800120"
  },
  {
    "text": "name we found a user we then go ahead and authenticate to verify the password",
    "start": "1800120",
    "end": "1806919"
  },
  {
    "text": "they've attempted to log in against the one I have stored there's a bit going on in there but it's I'm going to skip",
    "start": "1806919",
    "end": "1813600"
  },
  {
    "text": "because it's it's not the topic of this conversation once they are authenticated",
    "start": "1813600",
    "end": "1818919"
  },
  {
    "text": "and we ass sure it's them then we start the Cognito flow I have two objects here that ramp this my user identity where I",
    "start": "1818919",
    "end": "1826600"
  },
  {
    "text": "store the token and the identity ID and the user credentials which is simply a",
    "start": "1826600",
    "end": "1832159"
  },
  {
    "text": "wrapper on top of the AWS credentials object the access key secret key and session token if you're familiar with",
    "start": "1832159",
    "end": "1839039"
  },
  {
    "text": "it so the first thing I do is make a call to get the user identity from",
    "start": "1839039",
    "end": "1845200"
  },
  {
    "text": "Cognito and we can go and look at this code it just uses the standard AWS Java",
    "start": "1845200",
    "end": "1852120"
  },
  {
    "text": "SDK where we have this very simple API",
    "start": "1852120",
    "end": "1857399"
  },
  {
    "text": "called the get open ID token for developer identity request and we run this with an identity",
    "start": "1857399",
    "end": "1865120"
  },
  {
    "text": "pool which is the main entity within Cognito and an identity ID if we already",
    "start": "1865120",
    "end": "1872120"
  },
  {
    "text": "have one if we've received it before from Cognito if we don't we don't have to send",
    "start": "1872120",
    "end": "1877559"
  },
  {
    "text": "it and we also tell Cognito that our unique identifier for this user it's the",
    "start": "1877559",
    "end": "1883600"
  },
  {
    "text": "username it could be anything so long as it's a unique string alpha numeric string that identifies the user for you",
    "start": "1883600",
    "end": "1890559"
  },
  {
    "text": "you can send it to Cognito and it will run with it Cognito response to this",
    "start": "1890559",
    "end": "1896440"
  },
  {
    "text": "with an identity ID which is just another string and the open ID",
    "start": "1896440",
    "end": "1902679"
  },
  {
    "text": "token so once the step is done we save the identity that we",
    "start": "1902679",
    "end": "1908679"
  },
  {
    "text": "retrieved into our user object and then we go and ask for",
    "start": "1908679",
    "end": "1915000"
  },
  {
    "text": "credentials for that user so let's go into this",
    "start": "1915000",
    "end": "1921639"
  },
  {
    "text": "function and it's again very simple using the standard AWS Javas SDK I have",
    "start": "1921639",
    "end": "1928039"
  },
  {
    "text": "the get credentials for identity request where I send the open ID token that",
    "start": "1928039",
    "end": "1934000"
  },
  {
    "text": "Cognito has just given me and Cognito responds to that with an",
    "start": "1934000",
    "end": "1939600"
  },
  {
    "text": "access key a secret key a session token and an expiration and you see that I'm",
    "start": "1939600",
    "end": "1945320"
  },
  {
    "text": "wrapping these in my own a credentials object and I'm doing this because I'm",
    "start": "1945320",
    "end": "1951840"
  },
  {
    "text": "then using this in a special way on the client and we'll go through that the whole purpose of this Loop I'm doing is",
    "start": "1951840",
    "end": "1958200"
  },
  {
    "text": "because developers that interact with my API shouldn't need to know that I run on",
    "start": "1958200",
    "end": "1964039"
  },
  {
    "text": "AWS or that I want to use AWS credentials is not their concern so I'm",
    "start": "1964039",
    "end": "1969919"
  },
  {
    "text": "I'm hiding this away from them and I'll show you how I do that on the",
    "start": "1969919",
    "end": "1975240"
  },
  {
    "text": "client but once that's done we have the credentials I simply build my response",
    "start": "1975240",
    "end": "1981039"
  },
  {
    "text": "object and what I'm sending back to the client is identity token and credentials",
    "start": "1981039",
    "end": "1987080"
  },
  {
    "text": "and send it out and that's it now we have credentials on the",
    "start": "1987080",
    "end": "1993799"
  },
  {
    "text": "client so our next step is to authorize API calls to our pet",
    "start": "1993799",
    "end": "2000120"
  },
  {
    "text": "store this just a refresher of the API structure for the pad store we simply",
    "start": "2000120",
    "end": "2005360"
  },
  {
    "text": "have the SL pads resource and the pet by ID",
    "start": "2005360",
    "end": "2011559"
  },
  {
    "text": "resource pretty standard rest implementation post creates a new pad G gets a list of pad and the other G with",
    "start": "2011559",
    "end": "2018039"
  },
  {
    "text": "the ID gets you the details of a pat what's special about this is what I",
    "start": "2018039",
    "end": "2023960"
  },
  {
    "start": "2021000",
    "end": "2021000"
  },
  {
    "text": "told you earlier that in API Gateway I'm configuring the API to",
    "start": "2023960",
    "end": "2031440"
  },
  {
    "text": "invoke the Lambda function using the credentials of the caller so those credentials that have just generated",
    "start": "2031440",
    "end": "2037960"
  },
  {
    "text": "Incognito for the particular identity ID are getting passed on and this is very important because",
    "start": "2037960",
    "end": "2045399"
  },
  {
    "start": "2045000",
    "end": "2045000"
  },
  {
    "text": "that means that you can use I am roles to Define what the user has access",
    "start": "2045399",
    "end": "2052280"
  },
  {
    "text": "to this is an example of a role for this application it's it's very straightforward it's it's very simple it",
    "start": "2052280",
    "end": "2059960"
  },
  {
    "text": "just tells the IM am that the user can access Dynamo DB and can invoke the Lambda function",
    "start": "2059960",
    "end": "2066960"
  },
  {
    "text": "function and it can call API Gateway and I'm limiting this to a particular set of",
    "start": "2066960",
    "end": "2072599"
  },
  {
    "text": "resources now this is very powerful because it allows you to separate the",
    "start": "2072599",
    "end": "2078158"
  },
  {
    "text": "concerns authorization is centralized in a policy your code doesn't need to know",
    "start": "2078159",
    "end": "2084320"
  },
  {
    "text": "about it and I've fallen into that trap many times myself it always starts with a little if on top of your code saying",
    "start": "2084320",
    "end": "2092000"
  },
  {
    "text": "if the user is this then don't allow it and two weeks down the line requirements have come in product manager have",
    "start": "2092000",
    "end": "2097240"
  },
  {
    "text": "meddled and you have two pages of spaghetti code that introduces one bug per line so it's very important that to",
    "start": "2097240",
    "end": "2104640"
  },
  {
    "text": "get rid of that yak you want to centralize this in a single place but we can take this one step",
    "start": "2104640",
    "end": "2111599"
  },
  {
    "text": "further because this policy is very simple it just says yeah I can read from",
    "start": "2111599",
    "end": "2116880"
  },
  {
    "text": "Dynamo DB or I can write to Dynamo DB but there's quite a lot more power in",
    "start": "2116880",
    "end": "2122599"
  },
  {
    "text": "IM am fine grained access permissions I have a sample policy there at the",
    "start": "2122599",
    "end": "2130720"
  },
  {
    "text": "bottom that specifies a condition and that condition I'm telling Dynamo DB",
    "start": "2130720",
    "end": "2136800"
  },
  {
    "text": "that the user is allowed to access the rle only if the leading key so the hash key the primary key of that table is",
    "start": "2136800",
    "end": "2143800"
  },
  {
    "text": "equals to the identity ID of the caller so what does that mean that means",
    "start": "2143800",
    "end": "2151040"
  },
  {
    "text": "that if someone finds a way to cheat your code somehow tries to get your code to read somebody else's dat",
    "start": "2151040",
    "end": "2157560"
  },
  {
    "text": "data the call will come through to API Gateway API Gateway will pass those credentials on to Lambda Lambda will use",
    "start": "2157560",
    "end": "2165319"
  },
  {
    "text": "those credentials and try to call Dynamo DB to read the data that doesn't belong to that user and AWS itself will drop",
    "start": "2165319",
    "end": "2171920"
  },
  {
    "text": "that call you don't have to worry about it in your own code you don't have to write that little",
    "start": "2171920",
    "end": "2178520"
  },
  {
    "text": "F so it's extremely powerful and it's very pervasive every step of the way each",
    "start": "2178520",
    "end": "2185599"
  },
  {
    "text": "service checks against that policy and this is where you want to get to this is the world where we want to get to where",
    "start": "2185599",
    "end": "2191800"
  },
  {
    "text": "the concerns are separated authentication is centralized and it's present at every step of the",
    "start": "2191800",
    "end": "2198839"
  },
  {
    "text": "way even in the database",
    "start": "2198839",
    "end": "2202880"
  },
  {
    "start": "2204000",
    "end": "2204000"
  },
  {
    "text": "itself as I said delegate authorization and authentication it's very complex we",
    "start": "2205319",
    "end": "2211119"
  },
  {
    "text": "do it reasonably well at AWS let us help you",
    "start": "2211119",
    "end": "2217359"
  },
  {
    "text": "centralize this and we've built all of the tools around it so when we when we produce",
    "start": "2217359",
    "end": "2224280"
  },
  {
    "text": "credentials or when you set up roles we also have all of the apis that you need",
    "start": "2224280",
    "end": "2229400"
  },
  {
    "text": "to disable a set of credentials even though they last only for 1 hour the the alarm sounds you can just switch them",
    "start": "2229400",
    "end": "2235839"
  },
  {
    "text": "off and lock them out so there's a lot of power in these",
    "start": "2235839",
    "end": "2241839"
  },
  {
    "text": "tools so we're nearly there now we've got the credentials we know how to authorize",
    "start": "2241839",
    "end": "2248280"
  },
  {
    "text": "calls and now we need to get to the client part so how do we handle those credentials on the",
    "start": "2248280",
    "end": "2254400"
  },
  {
    "text": "client the first thing is that API Gateway can generate client sdks for you",
    "start": "2254400",
    "end": "2261440"
  },
  {
    "start": "2255000",
    "end": "2255000"
  },
  {
    "text": "based on your API definition we will produce an SDK that contains all of your",
    "start": "2261440",
    "end": "2267640"
  },
  {
    "start": "2266000",
    "end": "2266000"
  },
  {
    "text": "methods and all of your objects so in this sample you can see I'm making a g",
    "start": "2267640",
    "end": "2273839"
  },
  {
    "text": "to the SL pets resource I know it's Objective C many people are",
    "start": "2273839",
    "end": "2279000"
  },
  {
    "text": "fans of Swift I haven't gotten to it yet I promise I will but the important thing",
    "start": "2279000",
    "end": "2284839"
  },
  {
    "text": "here is that you've got all your models generated and all of your methods easily available as you can see here all I'm",
    "start": "2284839",
    "end": "2290920"
  },
  {
    "text": "doing is calling the G to SL Pat the response is",
    "start": "2290920",
    "end": "2296560"
  },
  {
    "text": "automatically deserialized into my object and I can just pass it on and start looping over it it makes my client",
    "start": "2296560",
    "end": "2303839"
  },
  {
    "text": "code a lot simpler but the next topic we want to cover is those credentials as I",
    "start": "2303839",
    "end": "2309920"
  },
  {
    "text": "mentioned earlier I'm wrapping those credentials into my own custom Bean before I return",
    "start": "2309920",
    "end": "2315160"
  },
  {
    "text": "them and I'm doing this because I don't want my users to know or my developers to know that I'm using AWS they",
    "start": "2315160",
    "end": "2321680"
  },
  {
    "text": "shouldn't have to there's an object that comes with a client SDK and it's called the AWS",
    "start": "2321680",
    "end": "2328800"
  },
  {
    "text": "credentials provider the client SDK uses this credentials provider anytime it needs",
    "start": "2328800",
    "end": "2335280"
  },
  {
    "text": "credentials either because it doesn't have them yet or because the ones it has are",
    "start": "2335280",
    "end": "2340359"
  },
  {
    "text": "expired so what I've done in my application is built a custom implementation of this credentials",
    "start": "2340359",
    "end": "2347040"
  },
  {
    "text": "provider I work for AWS so I've picked a short name as well apig session credentials",
    "start": "2347040",
    "end": "2353079"
  },
  {
    "text": "provider and it implements a single method refresh this is what the client",
    "start": "2353079",
    "end": "2359160"
  },
  {
    "text": "SDK calls and if you can see my refresh method all I'm doing is loading a set of",
    "start": "2359160",
    "end": "2365079"
  },
  {
    "text": "cached username and password I'm using the keychain in iOS and making my login call using the",
    "start": "2365079",
    "end": "2371440"
  },
  {
    "text": "client SDK that will return AWS credentials and I make them available to",
    "start": "2371440",
    "end": "2376480"
  },
  {
    "text": "the client SDK so this is a very elegant way to load credentials because as far as",
    "start": "2376480",
    "end": "2382160"
  },
  {
    "text": "developers no they only need to give me a username and password and the credentials are lazily loaded only when",
    "start": "2382160",
    "end": "2387640"
  },
  {
    "text": "they're needed because the client SDK will not ask you for credentials unless it's about to make a call that require",
    "start": "2387640",
    "end": "2395400"
  },
  {
    "text": "credentials so let's take a look at",
    "start": "2395400",
    "end": "2401359"
  },
  {
    "text": "this in xcode is the font big enough for",
    "start": "2401359",
    "end": "2410000"
  },
  {
    "text": "everybody so the first thing we do in the app delegate is call this method",
    "start": "2410000",
    "end": "2415200"
  },
  {
    "text": "that sets the default configuration and what I'm doing here is loading my credentials from the",
    "start": "2415200",
    "end": "2422720"
  },
  {
    "text": "keychain and then I'm creating an instance of my session credentials",
    "start": "2422720",
    "end": "2428560"
  },
  {
    "text": "provider with that set of credentials and telling the SDK that",
    "start": "2428560",
    "end": "2434640"
  },
  {
    "text": "this is my default configuration if we look at the",
    "start": "2434640",
    "end": "2440839"
  },
  {
    "text": "credentials provider it's a very simple implementation of that refresh method",
    "start": "2440839",
    "end": "2446760"
  },
  {
    "text": "I'm simply loading the credentials I have here and making that login call as",
    "start": "2446760",
    "end": "2452119"
  },
  {
    "text": "you've seen in the in the slide so let's take a a quick look at it",
    "start": "2452119",
    "end": "2458079"
  },
  {
    "text": "as it runs let me expand",
    "start": "2458079",
    "end": "2463359"
  },
  {
    "text": "this so it started now it's loading the list of pads if we go to a log you see that the",
    "start": "2465359",
    "end": "2473440"
  },
  {
    "text": "first thing we've done the first thing my application has done is called my get",
    "start": "2473440",
    "end": "2478599"
  },
  {
    "text": "pads because that's my concern I have that list I need to populate it as soon as I made that call the SDK itself noted",
    "start": "2478599",
    "end": "2486359"
  },
  {
    "text": "is that it didn't have credentials and so by itself it called my refresh it did the login call and as",
    "start": "2486359",
    "end": "2494440"
  },
  {
    "text": "soon as it had credentials then it proceeded to make the get Pats API so if I go back to the application",
    "start": "2494440",
    "end": "2502319"
  },
  {
    "text": "now and I load a specific pth you'll see that there's no login call it already",
    "start": "2502319",
    "end": "2508880"
  },
  {
    "text": "has credentials they are valid so as I said this is a very elegant way to manage credentials and",
    "start": "2508880",
    "end": "2515599"
  },
  {
    "text": "lazily load them only when they're",
    "start": "2515599",
    "end": "2519000"
  },
  {
    "text": "needed so using the generated SDK obviously it knows how to sign",
    "start": "2525160",
    "end": "2531599"
  },
  {
    "start": "2526000",
    "end": "2526000"
  },
  {
    "text": "requests it's important although you could sign request yourself you simply use the AWS signature version for it's a",
    "start": "2531599",
    "end": "2539599"
  },
  {
    "text": "an open protocol you can go and read the documentation on the AWS website but",
    "start": "2539599",
    "end": "2545200"
  },
  {
    "text": "again it's it's some that boiler plate code that you don't want to have to write each time so the generated SDK",
    "start": "2545200",
    "end": "2551599"
  },
  {
    "text": "does that for you another example of boilerplate code is handling throttled",
    "start": "2551599",
    "end": "2557680"
  },
  {
    "text": "request you can ask API Gateway to throttle traffic to your apis if for",
    "start": "2557680",
    "end": "2562800"
  },
  {
    "text": "example your backhand can only handle 500 RPS you can tell API Gateway to only",
    "start": "2562800",
    "end": "2568000"
  },
  {
    "text": "send 500 RPS and all the other requests are dropped and they're dropped with a",
    "start": "2568000",
    "end": "2573240"
  },
  {
    "text": "response of 429 a response code of 4 429 that's what we use for throttling and",
    "start": "2573240",
    "end": "2579359"
  },
  {
    "text": "the generated sdks already know how to handle that so if they receive a 429",
    "start": "2579359",
    "end": "2584559"
  },
  {
    "text": "they will do what we call exponential back off so they will wait 100 millisecond try again if it's another",
    "start": "2584559",
    "end": "2591440"
  },
  {
    "text": "429 they will made 200 millisecond and try again by themselves so it's it's a",
    "start": "2591440",
    "end": "2597559"
  },
  {
    "text": "lot of that error Pro boilerplate code that you kind of don't want to have to write yourself and finally you get all",
    "start": "2597559",
    "end": "2604680"
  },
  {
    "text": "of the objects built together so just a final recap API",
    "start": "2604680",
    "end": "2612319"
  },
  {
    "text": "Gateway plus Lambda that is the new model we are proposing where there's no more management of infrastructure for",
    "start": "2612319",
    "end": "2619599"
  },
  {
    "text": "you no matter what the velocity at which you need to achieve your scale is we do that for you because we already run at",
    "start": "2619599",
    "end": "2625960"
  },
  {
    "text": "that scale security we've done a lot of work",
    "start": "2625960",
    "end": "2631280"
  },
  {
    "text": "at AWS and because API Gateway treats your services as if if you wear an AWS",
    "start": "2631280",
    "end": "2637000"
  },
  {
    "text": "service yourself it's time to make the most of these and leverage",
    "start": "2637000",
    "end": "2642880"
  },
  {
    "text": "them and finally we looked at the Swagger at the Swagger definition with",
    "start": "2642880",
    "end": "2648559"
  },
  {
    "text": "those files we can automate most of the workflows and more importantly the workflow remains in your hand you own",
    "start": "2648559",
    "end": "2655280"
  },
  {
    "text": "that file it's in your repository you can work on it you can version it and just import it and deploy it when you",
    "start": "2655280",
    "end": "2660920"
  },
  {
    "text": "need it so if we have some time left I believe we",
    "start": "2660920",
    "end": "2666520"
  },
  {
    "text": "do any questions from the room anything that we can clarify",
    "start": "2666520",
    "end": "2672520"
  }
]