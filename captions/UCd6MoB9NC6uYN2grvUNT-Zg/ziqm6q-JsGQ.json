[
  {
    "start": "0",
    "end": "82000"
  },
  {
    "text": "so first maybe start with a quick question is who have already used I",
    "start": "0",
    "end": "6000"
  },
  {
    "text": "already beat up in your ass I view any beginners on dynamodb or no",
    "start": "6000",
    "end": "12179"
  },
  {
    "text": "sequel if you so I will start with the core concept and then going to more and",
    "start": "12179",
    "end": "18720"
  },
  {
    "text": "deep dive teleport it and probably will finish on a few new features from",
    "start": "18720",
    "end": "25289"
  },
  {
    "text": "reinvent it touched on this morning on and the other session if you are already",
    "start": "25289",
    "end": "30420"
  },
  {
    "text": "in it's probably it gonna be a repeat for this my name is Patrick Munro I'm a",
    "start": "30420",
    "end": "36149"
  },
  {
    "text": "solution architect at address for the last few years and before that I've got",
    "start": "36149",
    "end": "41190"
  },
  {
    "text": "a quite strong database background so probably that's why I'm very passionate",
    "start": "41190",
    "end": "46590"
  },
  {
    "text": "about this but more around the Eurasian database like about Rowland's people",
    "start": "46590",
    "end": "52910"
  },
  {
    "text": "okay so let's get started so today is it's really how to dive in and how to",
    "start": "52910",
    "end": "60570"
  },
  {
    "text": "take into your actual application and to use dynamodb at its best and because it",
    "start": "60570",
    "end": "67619"
  },
  {
    "text": "is quite peculiar quite different from what you've seen even if you've been doing some no sequel on MongoDB or",
    "start": "67619",
    "end": "74070"
  },
  {
    "text": "Sandra there's a few very specific to dynamodb that we are going go to so the",
    "start": "74070",
    "end": "81840"
  },
  {
    "text": "session is called schema design butwait DynamoDB she was supposed to be",
    "start": "81840",
    "end": "88140"
  },
  {
    "start": "82000",
    "end": "503000"
  },
  {
    "text": "schema-less and as a developer you were",
    "start": "88140",
    "end": "93329"
  },
  {
    "text": "probably used to the world it is just a start-up where I put my data in actually you should care you",
    "start": "93329",
    "end": "100350"
  },
  {
    "text": "should care because of performance and because of cost you are in the cloud so everything that you do has its cost and",
    "start": "100350",
    "end": "107579"
  },
  {
    "text": "cost has also other consequences so everything is schema-less but you still",
    "start": "107579",
    "end": "115890"
  },
  {
    "text": "need to do the schema design so the old way was about relational",
    "start": "115890",
    "end": "123430"
  },
  {
    "text": "database was to do yeah normalized until it hurts and just just didn't realize",
    "start": "123430",
    "end": "130780"
  },
  {
    "text": "really when it's needed just because well I used to be back built back in the",
    "start": "130780",
    "end": "137890"
  },
  {
    "text": "days where the discs were quite cheap so that was okay to to have all the data on",
    "start": "137890",
    "end": "145950"
  },
  {
    "text": "separated images on the table but now no",
    "start": "145950",
    "end": "151239"
  },
  {
    "text": "sequel aggregate to normalize until it works and there's one important thing in",
    "start": "151239",
    "end": "161549"
  },
  {
    "text": "DynamoDB that you were probably not used to is when it starts design you have to",
    "start": "161549",
    "end": "166750"
  },
  {
    "text": "start from the business end so that you won't you answer and not from your data",
    "start": "166750",
    "end": "172090"
  },
  {
    "text": "that's very important and we'll just repeat this the whole session because that's really different and you should",
    "start": "172090",
    "end": "177940"
  },
  {
    "text": "never start by designing your table if you don't know what answer you want to what the questions you want to answer",
    "start": "177940",
    "end": "185489"
  },
  {
    "text": "and what I mean by that is you have to design your table based on your access",
    "start": "185489",
    "end": "192880"
  },
  {
    "text": "patterns because before that you were used to well you created the schema based on the",
    "start": "192880",
    "end": "197920"
  },
  {
    "text": "data on your business yeah well and an order contains all the lines so I would",
    "start": "197920",
    "end": "203410"
  },
  {
    "text": "create two tables over alright make sense but then always go back to the",
    "start": "203410",
    "end": "209950"
  },
  {
    "text": "actual question you want to answer and",
    "start": "209950",
    "end": "215519"
  },
  {
    "text": "so because of history that's my background also sequel probably a lot",
    "start": "215850",
    "end": "222700"
  },
  {
    "text": "started with sequel database so like I",
    "start": "222700",
    "end": "227739"
  },
  {
    "text": "said yeah the disk was cheap at this time so the idea was to eliminate",
    "start": "227739",
    "end": "234000"
  },
  {
    "text": "redundancy and try to have the lowest footprint sorry well and second thing is",
    "start": "234000",
    "end": "244959"
  },
  {
    "text": "to ensure data integrity on your database that's another important",
    "start": "244959",
    "end": "250830"
  },
  {
    "text": "is that we support we working a lot of business rules in your database foreign",
    "start": "250830",
    "end": "257579"
  },
  {
    "text": "keys tributes even include stored procedures things that actually matter",
    "start": "257580",
    "end": "263220"
  },
  {
    "text": "for your business was embedded in the database and you end up having and we",
    "start": "263220",
    "end": "269430"
  },
  {
    "text": "have a lot of customers having this no big model a big database on Oracle or",
    "start": "269430",
    "end": "274830"
  },
  {
    "text": "support or others are impossible to manage because everything is tied into",
    "start": "274830",
    "end": "280980"
  },
  {
    "text": "the the schema and it which are going to change the business rules then you have to go back to your schema design you",
    "start": "280980",
    "end": "291150"
  },
  {
    "text": "used to build relationships foreign keys and normalized as much as possible with",
    "start": "291150",
    "end": "297300"
  },
  {
    "text": "this very probably known by some of you first term or form in new sequel we are",
    "start": "297300",
    "end": "306150"
  },
  {
    "text": "like changing gears completely and talking about completely different",
    "start": "306150",
    "end": "311940"
  },
  {
    "text": "things first we don't bother about size",
    "start": "311940",
    "end": "317310"
  },
  {
    "text": "in terms of disk because no disk are cheap and you can sorry to confuse our",
    "start": "317310",
    "end": "325410"
  },
  {
    "text": "chips so you can have more compute to process your data some key features the",
    "start": "325410",
    "end": "333900"
  },
  {
    "text": "data size size matter because of partitions I will go back to the concept",
    "start": "333900",
    "end": "340980"
  },
  {
    "text": "of fashion and dynamodb but one person is 10 gig of data so considered to size",
    "start": "340980",
    "end": "350850"
  },
  {
    "text": "your database poverty shape we'd say",
    "start": "350850",
    "end": "356010"
  },
  {
    "text": "don't you think is shape or queries again you answer your questions so look at how you will grow your data first and",
    "start": "356010",
    "end": "365390"
  },
  {
    "text": "data velocity that moodily was designed to be low latency and probably well",
    "start": "365390",
    "end": "372570"
  },
  {
    "text": "excels is doing traditional fast very very fast queries when we say",
    "start": "372570",
    "end": "379650"
  },
  {
    "text": "fastest milliseconds war until microseconds using cache layer in front of that immunity",
    "start": "379650",
    "end": "385680"
  },
  {
    "text": "it's not meant for large queries that takes seconds or minutes or hours",
    "start": "385680",
    "end": "392419"
  },
  {
    "text": "that's probably if your query takes this time is either you have badly design",
    "start": "392419",
    "end": "398940"
  },
  {
    "text": "your dynamodb or it's not right database to use we have this concept ID rest as",
    "start": "398940",
    "end": "406940"
  },
  {
    "text": "purpose but purpose build databases that every database has to serve one purpose",
    "start": "406940",
    "end": "413819"
  },
  {
    "text": "and you shouldn't do everything with animal the animal is perfect for",
    "start": "413819",
    "end": "419159"
  },
  {
    "text": "transactional low latency queries but not for analytics it's good for time",
    "start": "419159",
    "end": "425879"
  },
  {
    "text": "service even though now we have a time series database that is even better than using dynamically",
    "start": "425879",
    "end": "431879"
  },
  {
    "text": "it's not meant for very strong integrity rules that you have to put in a",
    "start": "431879",
    "end": "436979"
  },
  {
    "text": "relationship database keep your data",
    "start": "436979",
    "end": "442080"
  },
  {
    "text": "together because everything is you want to reduce as much as possible the number",
    "start": "442080",
    "end": "448800"
  },
  {
    "text": "of queries you do on the item oh if you put all your data together in one item",
    "start": "448800",
    "end": "453979"
  },
  {
    "text": "then you would use your numbers of queries because if you do several tables",
    "start": "453979",
    "end": "459990"
  },
  {
    "text": "several if you spread your data that you used to do in sequel like having orders",
    "start": "459990",
    "end": "467490"
  },
  {
    "text": "or lines in two tables that's two queries on Naimo and then to Latin sees",
    "start": "467490",
    "end": "473669"
  },
  {
    "text": "and then cost use swords use GSI and",
    "start": "473669",
    "end": "479940"
  },
  {
    "text": "we'll explain later what is GSI global situation global index source keys and",
    "start": "479940",
    "end": "489259"
  },
  {
    "text": "this virtual queries so again start from",
    "start": "489259",
    "end": "495930"
  },
  {
    "text": "your access patterns and not from your data that's really important okay",
    "start": "495930",
    "end": "505390"
  },
  {
    "start": "503000",
    "end": "786000"
  },
  {
    "text": "so a few minutes on core concept just to make everyone at the same page on",
    "start": "505390",
    "end": "510730"
  },
  {
    "text": "dynamodb so it's a fully managed new sequel database that provide fast and",
    "start": "510730",
    "end": "517780"
  },
  {
    "text": "predictable performances predictable that you have always the same latency",
    "start": "517780",
    "end": "524760"
  },
  {
    "text": "and seamless scalability all this is right if you design it properly if you",
    "start": "524760",
    "end": "531730"
  },
  {
    "text": "don't decide properly you won't get the latency that the image can excel in so",
    "start": "531730",
    "end": "537340"
  },
  {
    "text": "we don't have a concept of database when in dynamo you create a table and in this",
    "start": "537340",
    "end": "544120"
  },
  {
    "text": "table you create items and these items have attributes one of the core",
    "start": "544120",
    "end": "552700"
  },
  {
    "text": "principles is usually what we say is one good application when good design is to",
    "start": "552700",
    "end": "559090"
  },
  {
    "text": "have only one table for your whole application instead of that's very",
    "start": "559090",
    "end": "564130"
  },
  {
    "text": "different from what we see in innovations this table have a primary",
    "start": "564130",
    "end": "570190"
  },
  {
    "text": "key primary key can be just simple primary key only in this case it has to",
    "start": "570190",
    "end": "576460"
  },
  {
    "text": "be unique because that's how you will identify your item or can be a composite",
    "start": "576460",
    "end": "582310"
  },
  {
    "text": "of a partition key and it's Alt key it's called pop Yammy",
    "start": "582310",
    "end": "589390"
  },
  {
    "text": "it's called partition key for a reason it's because behind the scene that's how we partition your data across multiple",
    "start": "589390",
    "end": "596610"
  },
  {
    "text": "shots news so make sure that you design",
    "start": "596610",
    "end": "602560"
  },
  {
    "text": "your partition key to be the most effective and the most effective primary",
    "start": "602560",
    "end": "608110"
  },
  {
    "text": "key is to be evenly rep evenly on your",
    "start": "608110",
    "end": "618160"
  },
  {
    "text": "data that you will have all your queries spread across all nodes you want to",
    "start": "618160",
    "end": "625570"
  },
  {
    "text": "avoid having a what we call hot key on one partition so one example of bad",
    "start": "625570",
    "end": "632280"
  },
  {
    "text": "partition key is will be the date if you insert data having a passion here as a date",
    "start": "632280",
    "end": "639879"
  },
  {
    "text": "because you can think as you create invoices but the first key would be date",
    "start": "639879",
    "end": "645759"
  },
  {
    "text": "on the some number of invoice if you do that then all your invoices of the day",
    "start": "645759",
    "end": "651309"
  },
  {
    "text": "will end up in one portion so you will always end up working on one portion to",
    "start": "651309",
    "end": "659739"
  },
  {
    "text": "instead use something that is very spread for example customer ID because",
    "start": "659739",
    "end": "664749"
  },
  {
    "text": "you will probably use a lot of customers ID okay second important core component",
    "start": "664749",
    "end": "676179"
  },
  {
    "text": "is the indexes things to understand is indexes in dynamo DB are very different",
    "start": "676179",
    "end": "682269"
  },
  {
    "text": "from relationship relational database indexes it's not meant to access the",
    "start": "682269",
    "end": "690129"
  },
  {
    "text": "data it's meant to store data in your different ways so think about indexes as",
    "start": "690129",
    "end": "698529"
  },
  {
    "text": "a copy of your data especially global segment indexes as your copy of the data",
    "start": "698529",
    "end": "703989"
  },
  {
    "text": "for a different access pattern and we will see that in examples so it's not so",
    "start": "703989",
    "end": "711369"
  },
  {
    "text": "in relational database when you access to that index is just to give you the pointer to the actual data when you",
    "start": "711369",
    "end": "718359"
  },
  {
    "text": "access data on the GSI on dynamodb you access exactly the data that you want so",
    "start": "718359",
    "end": "727619"
  },
  {
    "text": "yeah again indexes I like to see that as a as a view of mythologist view of your",
    "start": "727619",
    "end": "734979"
  },
  {
    "text": "data last two things I'll see you and W see you read and write unit if how we",
    "start": "734979",
    "end": "745049"
  },
  {
    "text": "price dynamodb it has changed since two",
    "start": "745049",
    "end": "750399"
  },
  {
    "text": "weeks ago at rain event because we announced that we can use on demand so pricing I will explain a bit more later",
    "start": "750399",
    "end": "757029"
  },
  {
    "text": "but basically we price per read and provide unit on your database on your",
    "start": "757029",
    "end": "764619"
  },
  {
    "text": "table and each table and each global index can have a",
    "start": "764619",
    "end": "769810"
  },
  {
    "text": "different right and read through it that's very important you design to be",
    "start": "769810",
    "end": "777010"
  },
  {
    "text": "able to minimize cost and still get your throughput right on your dynamo Jimmy",
    "start": "777010",
    "end": "783820"
  },
  {
    "text": "table okay let's do let's go into some",
    "start": "783820",
    "end": "790589"
  },
  {
    "text": "example first a quite simple example you",
    "start": "790589",
    "end": "796960"
  },
  {
    "text": "are storing people you have a secretary social number as a primary key attribute",
    "start": "796960",
    "end": "805140"
  },
  {
    "text": "it works well because you have very good selectivity on your social security",
    "start": "805140",
    "end": "810850"
  },
  {
    "text": "number that's unique your show it's unique and it's spread across the old",
    "start": "810850",
    "end": "819070"
  },
  {
    "text": "population of people okay that's easy",
    "start": "819070",
    "end": "824680"
  },
  {
    "text": "you don't have now that we if we want to add a variation to go to this one first",
    "start": "824680",
    "end": "834870"
  },
  {
    "text": "so you still have these people but then you start to think about having one",
    "start": "834870",
    "end": "839970"
  },
  {
    "text": "person definition in one job definition in in a relational schema you would",
    "start": "839970",
    "end": "847690"
  },
  {
    "text": "think about creating two tables one would be persons one would be jobs",
    "start": "847690",
    "end": "852780"
  },
  {
    "text": "joining by your Social Security what you actually do is use the partition key",
    "start": "852780",
    "end": "860460"
  },
  {
    "text": "still unique and use the sort key as as we call non-homogeneous to store",
    "start": "860460",
    "end": "868000"
  },
  {
    "text": "different things person and professions",
    "start": "868000",
    "end": "873030"
  },
  {
    "text": "skills or and and then you can you are still going like I said one table you",
    "start": "873030",
    "end": "881080"
  },
  {
    "text": "embrace the ambiguity because here you have a column that represents two",
    "start": "881080",
    "end": "886870"
  },
  {
    "text": "different things first owns or portion and here you're completely different data but you still",
    "start": "886870",
    "end": "894850"
  },
  {
    "text": "have everything's in one place so if you want to search for this specific person",
    "start": "894850",
    "end": "902770"
  },
  {
    "text": "you get everything's in one query if you query only on the passion key you get everything in one query if your query on",
    "start": "902770",
    "end": "910480"
  },
  {
    "text": "the just professional you can get on any occupation one more probably simpler",
    "start": "910480",
    "end": "922210"
  },
  {
    "start": "919000",
    "end": "1007000"
  },
  {
    "text": "example let's say 1 to n relationship or again because it's devices and",
    "start": "922210",
    "end": "928029"
  },
  {
    "text": "measurements so you would get the devices as a position key but that's not",
    "start": "928029",
    "end": "935980"
  },
  {
    "text": "unique it's quite spread because you probably have 10,000 of sensors but it's",
    "start": "935980",
    "end": "942010"
  },
  {
    "text": "not unique so you have to add another column to have the uniqueness between portion key and salt key and the salt",
    "start": "942010",
    "end": "948339"
  },
  {
    "text": "key could be the time stamp yep ok because you probably will query again",
    "start": "948339",
    "end": "955080"
  },
  {
    "text": "against the last measurements per device because you want to display when you",
    "start": "955080",
    "end": "961210"
  },
  {
    "text": "display the temperature in the room you don't want to query that two years ago you will query the day or the last 24",
    "start": "961210",
    "end": "968650"
  },
  {
    "text": "hours so that works very well in dynamo when you query a position key and sort key",
    "start": "968650",
    "end": "976170"
  },
  {
    "text": "with a greater than or late less than because as it written it's a salt key so",
    "start": "976170",
    "end": "983350"
  },
  {
    "text": "the data is sorted against this key in the partition so you will get all your",
    "start": "983350",
    "end": "989620"
  },
  {
    "text": "device one device will be in one partition and sort it by timestamp so",
    "start": "989620",
    "end": "996700"
  },
  {
    "text": "that will be very efficient to query if you query only the last n minutes",
    "start": "996700",
    "end": "1004370"
  },
  {
    "text": "okay so if we go a bit further to this example with probably sounds a bit weird",
    "start": "1007269",
    "end": "1014659"
  },
  {
    "text": "if you've been used to designing complex schema so that's a HR schema probably",
    "start": "1014659",
    "end": "1023839"
  },
  {
    "text": "sounds weird to store in the same table the job title the job titles where the",
    "start": "1023839",
    "end": "1031879"
  },
  {
    "text": "employee works wise is composition or name signatures or number etc so you",
    "start": "1031879",
    "end": "1042500"
  },
  {
    "text": "have very different information stored in one table so the problem would be so",
    "start": "1042500",
    "end": "1049639"
  },
  {
    "text": "that's all the the first answer that we said use only one table but if you want query let's say I want to search on the",
    "start": "1049639",
    "end": "1057529"
  },
  {
    "text": "employee name I'm the HR guy I'm looking for imprisoning if you don't do anything",
    "start": "1057529",
    "end": "1062809"
  },
  {
    "text": "if you're looking for the employee name well you don't have C or E ID so you",
    "start": "1062809",
    "end": "1068629"
  },
  {
    "text": "will search you will actually scan the whole table to the all nodes to get only",
    "start": "1068629",
    "end": "1075919"
  },
  {
    "text": "the employee named Murphy so that doesn't work doesn't work in terms of",
    "start": "1075919",
    "end": "1080960"
  },
  {
    "text": "efficiency so what we will do is create a GSI a global secondary index on top of",
    "start": "1080960",
    "end": "1088100"
  },
  {
    "text": "this table to solve the access pattern",
    "start": "1088100",
    "end": "1093139"
  },
  {
    "text": "that we want to query it's",
    "start": "1093139",
    "end": "1097149"
  },
  {
    "text": "so we will actually create a global second index on this Alt key as the",
    "start": "1098500",
    "end": "1105490"
  },
  {
    "text": "partition key of the global second index and having the salt key here so you end",
    "start": "1105490",
    "end": "1111130"
  },
  {
    "text": "up having a global index on this partition key and this as a salt key so",
    "start": "1111130",
    "end": "1118299"
  },
  {
    "text": "if I want to search for an opening name called Murphy UI candy I can do a query",
    "start": "1118299",
    "end": "1124210"
  },
  {
    "text": "on only the employee name global second index partition and scan for the",
    "start": "1124210",
    "end": "1131200"
  },
  {
    "text": "employee named Murphy and this I reduced a lot the numbers of throughput I need",
    "start": "1131200",
    "end": "1137700"
  },
  {
    "text": "because I only queried on my name and that can be also very efficient if you",
    "start": "1137700",
    "end": "1145480"
  },
  {
    "text": "have like very empty attributes for this like this",
    "start": "1145480",
    "end": "1152220"
  },
  {
    "text": "so now we have talked about 1 to n relationships and how to get end to M",
    "start": "1158800",
    "end": "1166140"
  },
  {
    "text": "relationships let's start to be a bit more complex because we still want to",
    "start": "1166140",
    "end": "1171280"
  },
  {
    "text": "use on in one table as a dynamodb principled and this is a very typical",
    "start": "1171280",
    "end": "1177190"
  },
  {
    "text": "example of invoices and bills one invoice can contain multiple bills and",
    "start": "1177190",
    "end": "1183330"
  },
  {
    "text": "one bills can be paid by 24 invoices so you have a n2m relationship",
    "start": "1183330",
    "end": "1190270"
  },
  {
    "text": "so actually what we do is create the table with partition key and the salt",
    "start": "1190270",
    "end": "1196690"
  },
  {
    "text": "keys having exactly the same attribute type which could be invoice or bills and",
    "start": "1196690",
    "end": "1206160"
  },
  {
    "text": "then you create the GSI on the other",
    "start": "1206160",
    "end": "1212880"
  },
  {
    "text": "partition so if you create the GSI would be on this column and the data would be",
    "start": "1212880",
    "end": "1222550"
  },
  {
    "text": "on the bastion key so you try to GSI on the opposite of your table and this way",
    "start": "1222550",
    "end": "1229630"
  },
  {
    "text": "you can query in one access so coming from one inverse or coming from one bill",
    "start": "1229630",
    "end": "1236860"
  },
  {
    "text": "and in the table you will get the attributes of each of the actual item",
    "start": "1236860",
    "end": "1244420"
  },
  {
    "text": "and in GSI you can choose which projected attributes you put in that's",
    "start": "1244420",
    "end": "1254920"
  },
  {
    "text": "very powerful very quite easy to implement and that solves the problem of",
    "start": "1254920",
    "end": "1260650"
  },
  {
    "text": "having I want to display one invoice and all the bills attached to it and also",
    "start": "1260650",
    "end": "1265930"
  },
  {
    "text": "I've got a bill and I'll need to reconciliate this to which invoices actually match this building",
    "start": "1265930",
    "end": "1275190"
  },
  {
    "text": "so I talked about projections attributes so that's a very probably seems too",
    "start": "1281660",
    "end": "1289460"
  },
  {
    "text": "complex like this but like it's quite straightforward probably is when you",
    "start": "1289460",
    "end": "1294590"
  },
  {
    "text": "create an index you choose which attributes you project in it so you",
    "start": "1294590",
    "end": "1300800"
  },
  {
    "text": "don't need to create an index with all the keys but you can and of course if",
    "start": "1300800",
    "end": "1308270"
  },
  {
    "text": "you create an index with all the attributes in it then you get more",
    "start": "1308270",
    "end": "1316220"
  },
  {
    "text": "storage cost but then we there's the",
    "start": "1316220",
    "end": "1321290"
  },
  {
    "text": "other part is how many RCU you will use and the idea here is you have again you",
    "start": "1321290",
    "end": "1330560"
  },
  {
    "text": "have to think about your access pattern and which data you actually want when you cry with your index while you create",
    "start": "1330560",
    "end": "1336080"
  },
  {
    "text": "your database your table is you have to put everything that you need in the",
    "start": "1336080",
    "end": "1342200"
  },
  {
    "text": "global storage index your GSI but nothing more because if you put",
    "start": "1342200",
    "end": "1347900"
  },
  {
    "text": "everything then you have a storage cost that goes up and instead if you only",
    "start": "1347900",
    "end": "1356090"
  },
  {
    "text": "need exactly if you put only the attributes that you need then you get a",
    "start": "1356090",
    "end": "1361250"
  },
  {
    "text": "good a good balance and the other side",
    "start": "1361250",
    "end": "1367460"
  },
  {
    "text": "of the other of the shot is chart is to talk about fetching cost and writing",
    "start": "1367460",
    "end": "1372680"
  },
  {
    "text": "cost as probably make sense for rather view use databases before if you have",
    "start": "1372680",
    "end": "1380300"
  },
  {
    "text": "more data to write when the cost is higher but you get less fetching cost",
    "start": "1380300",
    "end": "1388940"
  },
  {
    "text": "because you have all the thing in your index in your GSI so you don't need to query again the table and do a longer a",
    "start": "1388940",
    "end": "1398080"
  },
  {
    "text": "more expensive fetch",
    "start": "1398080",
    "end": "1403299"
  },
  {
    "text": "again maximize performance and minimize food cost that's all you want to do",
    "start": "1405070",
    "end": "1411310"
  },
  {
    "start": "1410000",
    "end": "1556000"
  },
  {
    "text": "sparse index because you want to reduce your read capacities and having less",
    "start": "1411310",
    "end": "1420110"
  },
  {
    "text": "food let's take this probably quite typical example of gaming and you can be",
    "start": "1420110",
    "end": "1426080"
  },
  {
    "text": "applicable to something else probably so you have a table containing all the",
    "start": "1426080",
    "end": "1432290"
  },
  {
    "text": "players and however every game it has played with scores date and they in the",
    "start": "1432290",
    "end": "1439370"
  },
  {
    "text": "world okay as well but that's probably going to be a large large table if you",
    "start": "1439370",
    "end": "1447080"
  },
  {
    "text": "have a very successful game and let's say now I want to display every get",
    "start": "1447080",
    "end": "1455180"
  },
  {
    "text": "every gamers that won an award if I",
    "start": "1455180",
    "end": "1461420"
  },
  {
    "text": "don't do anything I would have to scan the whole very large table to fetch only",
    "start": "1461420",
    "end": "1466610"
  },
  {
    "text": "this field and what we actually do is if you create a GSI as a primary key the",
    "start": "1466610",
    "end": "1474890"
  },
  {
    "text": "award we create what we call a sparse index because the GSI will be very small",
    "start": "1474890",
    "end": "1482000"
  },
  {
    "text": "because it will store only the lines that have actually a date on it so make",
    "start": "1482000",
    "end": "1488060"
  },
  {
    "text": "sure that you don't store something here like no 0 whatever don't store at all",
    "start": "1488060",
    "end": "1494270"
  },
  {
    "text": "the attribute if there's no data and then you get a sparse index sparse GSI",
    "start": "1494270",
    "end": "1499760"
  },
  {
    "text": "and this just I will be bored probably very small and will be updated automatically",
    "start": "1499760",
    "end": "1507550"
  },
  {
    "text": "yet one thing to note on the so I talked a lot about GSI there's also the other",
    "start": "1511070",
    "end": "1517400"
  },
  {
    "text": "side the local storage index that our local production so GSI is global and",
    "start": "1517400",
    "end": "1524680"
  },
  {
    "text": "LSI is local to a specific partition so we share the same bastion key and you",
    "start": "1524680",
    "end": "1531650"
  },
  {
    "text": "only index another salt key and again",
    "start": "1531650",
    "end": "1537020"
  },
  {
    "text": "and you can use the same principle of if I index a field that is not often filled",
    "start": "1537020",
    "end": "1545420"
  },
  {
    "text": "you get a very effective index because it will be very small and then better",
    "start": "1545420",
    "end": "1551180"
  },
  {
    "text": "latency and less cost so that's a more",
    "start": "1551180",
    "end": "1559550"
  },
  {
    "start": "1556000",
    "end": "1728000"
  },
  {
    "text": "advanced example of writing problem if",
    "start": "1559550",
    "end": "1566480"
  },
  {
    "text": "if you want to write heavily on a table",
    "start": "1566480",
    "end": "1574059"
  },
  {
    "text": "then you can get quite limited on the throughput or you can you will pay a lot",
    "start": "1574240",
    "end": "1579860"
  },
  {
    "text": "on write capacity you need just get things written as so the idea is to",
    "start": "1579860",
    "end": "1588340"
  },
  {
    "text": "create a GSI on a random key here from 0",
    "start": "1588340",
    "end": "1596000"
  },
  {
    "text": "to n and has to be defined bit based on your application and how many threads",
    "start": "1596000",
    "end": "1603500"
  },
  {
    "text": "you can have to write and if you have like say a hundred threads or hundred",
    "start": "1603500",
    "end": "1609170"
  },
  {
    "text": "nodes or application server or something that writes to the database then you",
    "start": "1609170",
    "end": "1614930"
  },
  {
    "text": "assign this particular hash from 0 to m and then you spread the write evenly on",
    "start": "1614930",
    "end": "1623120"
  },
  {
    "text": "the whole partition the idea here is so",
    "start": "1623120",
    "end": "1629450"
  },
  {
    "text": "when you write you a table we update the GSI for you and we update the address I",
    "start": "1629450",
    "end": "1636800"
  },
  {
    "text": "in a synchronous manner so a GSI as a eventual consistent read",
    "start": "1636800",
    "end": "1646850"
  },
  {
    "text": "because when you write to the table we don't write to the GSI as we write in",
    "start": "1646850",
    "end": "1652710"
  },
  {
    "text": "Word in the sacredness mode so if you have a very heavy read a very heavy",
    "start": "1652710",
    "end": "1658740"
  },
  {
    "text": "write in one table you can end up having quite significant delay here if you",
    "start": "1658740",
    "end": "1665010"
  },
  {
    "text": "don't do it this kind of tricky yeah it's kind of a trick to spread more",
    "start": "1665010",
    "end": "1672480"
  },
  {
    "text": "loads on more bastions and probably the",
    "start": "1672480",
    "end": "1682530"
  },
  {
    "text": "question you have is how do I create this because now I have this portion key",
    "start": "1682530",
    "end": "1688230"
  },
  {
    "text": "that doesn't make sense it's just a random number between 0 1 and 100 so",
    "start": "1688230",
    "end": "1695840"
  },
  {
    "text": "during this you have some more have anything to do when you read and what",
    "start": "1695840",
    "end": "1702420"
  },
  {
    "text": "you actually do is having n readers go back to the the same principles having 0",
    "start": "1702420",
    "end": "1711510"
  },
  {
    "text": "to n readers in parallel and doing every one will scan the data so that's that's",
    "start": "1711510",
    "end": "1719070"
  },
  {
    "text": "very handy if you do writes heavy but that's not very efficient for read",
    "start": "1719070",
    "end": "1724730"
  },
  {
    "text": "workloads the last example I have for",
    "start": "1724730",
    "end": "1731280"
  },
  {
    "start": "1728000",
    "end": "2002000"
  },
  {
    "text": "you is time series and we still talked about this even though we you probably",
    "start": "1731280",
    "end": "1737310"
  },
  {
    "text": "heard this morning about time stream the new time service database at Amazon I",
    "start": "1737310",
    "end": "1743750"
  },
  {
    "text": "still think that dynamodb can handle quite good the time series if you do it",
    "start": "1743750",
    "end": "1749580"
  },
  {
    "text": "properly so classical example of time series is for every X seconds or",
    "start": "1749580",
    "end": "1759660"
  },
  {
    "text": "milliseconds used or attributes so it makes sense to saw this as a partition",
    "start": "1759660",
    "end": "1766320"
  },
  {
    "text": "key today the date and salt key the timestamp and all the attributes H wrong",
    "start": "1766320",
    "end": "1772230"
  },
  {
    "text": "and the the trick for time series is to store only the current date in one table",
    "start": "1772230",
    "end": "1780109"
  },
  {
    "text": "with a very high work repertory right",
    "start": "1780109",
    "end": "1786049"
  },
  {
    "text": "unit and quite high read unit because your application will probably read a",
    "start": "1786049",
    "end": "1793049"
  },
  {
    "text": "lot and write a lot at the current day but then when you move to archive but",
    "start": "1793049",
    "end": "1800879"
  },
  {
    "text": "you don't need that much data so what you end up doing is having a second",
    "start": "1800879",
    "end": "1807840"
  },
  {
    "text": "table that's probably the only position",
    "start": "1807840",
    "end": "1814139"
  },
  {
    "text": "where you can have several tables for the same purpose it's a bit specific so",
    "start": "1814139",
    "end": "1820320"
  },
  {
    "text": "here you create another table for the previous day previous days depending on",
    "start": "1820320",
    "end": "1825929"
  },
  {
    "text": "the old again your comments maybe you need 24 hours maybe you seven days and",
    "start": "1825929",
    "end": "1830989"
  },
  {
    "text": "here you can reduce the right to one",
    "start": "1830989",
    "end": "1836210"
  },
  {
    "text": "because that's just an archive so you you are sure you will never write again",
    "start": "1836210",
    "end": "1841379"
  },
  {
    "text": "in this table and you still have a quite read heavy because your application will",
    "start": "1841379",
    "end": "1847889"
  },
  {
    "text": "probably display the last 30 days so and",
    "start": "1847889",
    "end": "1852950"
  },
  {
    "text": "then you have probably another table and the numbers of tables here depends on",
    "start": "1852950",
    "end": "1859019"
  },
  {
    "text": "your use case and the older table will be probably after 30 days and provision",
    "start": "1859019",
    "end": "1866580"
  },
  {
    "text": "only to one read and what right capacity",
    "start": "1866580",
    "end": "1871580"
  },
  {
    "text": "there's one problem here is how do you update data from one to another because",
    "start": "1871609",
    "end": "1878039"
  },
  {
    "text": "you have back here you have a component that writes Heavy D on the table all the",
    "start": "1878039",
    "end": "1886080"
  },
  {
    "text": "time so how do you get your dates or how",
    "start": "1886080",
    "end": "1891570"
  },
  {
    "text": "do you remove the date the data here and create it here and probably the best way",
    "start": "1891570",
    "end": "1898590"
  },
  {
    "text": "to do that is to use TTLs so when you create a table you can assign a TTL a",
    "start": "1898590",
    "end": "1904769"
  },
  {
    "text": "time to live for every item to say well in this",
    "start": "1904769",
    "end": "1909780"
  },
  {
    "text": "table I will expire after one day so we",
    "start": "1909780",
    "end": "1915390"
  },
  {
    "text": "will take care of deleting this item after one day okay so it's all the",
    "start": "1915390",
    "end": "1922170"
  },
  {
    "text": "delete problem but how do you get the data here is to use another component of",
    "start": "1922170",
    "end": "1927630"
  },
  {
    "text": "DynamoDB which is called DynamoDB streams dynamodb streams is a component",
    "start": "1927630",
    "end": "1933660"
  },
  {
    "text": "that takes every changes in your table and write it on a stream",
    "start": "1933660",
    "end": "1940850"
  },
  {
    "text": "similar to aki-nee's history and with the TTL you get a specific event which",
    "start": "1940850",
    "end": "1949890"
  },
  {
    "text": "is called a TTL delete which tells you oh I deleted the data here this is that",
    "start": "1949890",
    "end": "1958470"
  },
  {
    "text": "I have just deleted and from the stream you subscribe for example a lambda",
    "start": "1958470",
    "end": "1964380"
  },
  {
    "text": "function that right sorry reads from the string and will take all the TTL on",
    "start": "1964380",
    "end": "1970500"
  },
  {
    "text": "delete data and rise to a second table",
    "start": "1970500",
    "end": "1976010"
  },
  {
    "text": "you probably can stick to write one you may get photo you may get some latency",
    "start": "1976010",
    "end": "1982740"
  },
  {
    "text": "here it's probably fine it's just a curve you just want this to be done and",
    "start": "1982740",
    "end": "1987990"
  },
  {
    "text": "you can have a second stream on this one",
    "start": "1987990",
    "end": "1993090"
  },
  {
    "text": "a second city and a second stream that's right to the archive table",
    "start": "1993090",
    "end": "1998870"
  },
  {
    "start": "2002000",
    "end": "2330000"
  },
  {
    "text": "so that's that was that's probably a lot on the design schema but I would have at",
    "start": "2003059",
    "end": "2012700"
  },
  {
    "text": "least probably 10 15 minutes for questions at the end I want you to just point a bit on the new releases of",
    "start": "2012700",
    "end": "2020409"
  },
  {
    "text": "reinvent few weeks ago and the first one is collections",
    "start": "2020409",
    "end": "2028529"
  },
  {
    "text": "collections used back in before this there was a lot of libraries that done",
    "start": "2028529",
    "end": "2036549"
  },
  {
    "text": "that before so introduction is to be able to do multiple updates in a",
    "start": "2036549",
    "end": "2042549"
  },
  {
    "text": "consistent acid manner so you want to update several fields and if the last",
    "start": "2042549",
    "end": "2048760"
  },
  {
    "text": "update fails you want to roll back the whole selections it's very good in",
    "start": "2048760",
    "end": "2055658"
  },
  {
    "text": "finance but even in games or in a lot of contexts you need this consistency in",
    "start": "2055659",
    "end": "2062320"
  },
  {
    "text": "selections so that works in any items in any table that's available now so it's",
    "start": "2062320",
    "end": "2072220"
  },
  {
    "text": "we have just new queue API scores on Zack's right items and transact get",
    "start": "2072220",
    "end": "2077888"
  },
  {
    "text": "items they are acid means atomic consistent isolation and durability it's",
    "start": "2077889",
    "end": "2087128"
  },
  {
    "text": "atomic that means that all the updates are done once or not you don't get",
    "start": "2087129",
    "end": "2092830"
  },
  {
    "text": "inconsistency if one of the it fails and",
    "start": "2092830",
    "end": "2098190"
  },
  {
    "text": "durability well DynamoDB is spread",
    "start": "2098190",
    "end": "2104050"
  },
  {
    "text": "across very diesels and we ensure this durability that when you have",
    "start": "2104050",
    "end": "2109540"
  },
  {
    "text": "information that is committed you are sure that the data is in",
    "start": "2109540",
    "end": "2117240"
  },
  {
    "text": "and without the ugly things if you are",
    "start": "2117240",
    "end": "2122619"
  },
  {
    "text": "familiar with some things and relational database like deadlocks run running",
    "start": "2122619",
    "end": "2128619"
  },
  {
    "text": "transactions and finish transactions we don't have this simply because we",
    "start": "2128619",
    "end": "2138030"
  },
  {
    "text": "implemented selections in a very simple manner so in a very simple manner",
    "start": "2138030",
    "end": "2144930"
  },
  {
    "text": "because there's one thing to know is that's later it's that we don't lock the",
    "start": "2144930",
    "end": "2152910"
  },
  {
    "text": "item when we do selection all right so that's why you can't get deadlocks",
    "start": "2152910",
    "end": "2157950"
  },
  {
    "text": "because we don't lock judging you don't get a problem of long-running selections",
    "start": "2157950",
    "end": "2163770"
  },
  {
    "text": "because we are in the loaded and see table and even if it would happen it's",
    "start": "2163770",
    "end": "2169440"
  },
  {
    "text": "not in issue because it's not locked and DB ab/c be a pain well we are in the",
    "start": "2169440",
    "end": "2177299"
  },
  {
    "text": "full managed service so we don't have any thing to consider to work around or to monitor from your DBA perspective so",
    "start": "2177299",
    "end": "2187559"
  },
  {
    "text": "how does it work very simple example of a gamer you get status from from this",
    "start": "2187559",
    "end": "2197670"
  },
  {
    "text": "specific gamer with two fields health and that's worked well that's just the",
    "start": "2197670",
    "end": "2206069"
  },
  {
    "text": "query and you will turn everything's for either for two status or for the whole",
    "start": "2206069",
    "end": "2212910"
  },
  {
    "text": "gamer that's worked well but now if I need to update if I need to update two",
    "start": "2212910",
    "end": "2223369"
  },
  {
    "text": "attributes from the same player if",
    "start": "2223369",
    "end": "2230339"
  },
  {
    "text": "before introduction I could do two updates that's fine but I don't want the",
    "start": "2230339",
    "end": "2236040"
  },
  {
    "text": "in this example I don't want the coins to be deleted if the health is not",
    "start": "2236040",
    "end": "2241470"
  },
  {
    "text": "updated for example you had a portion that decrease your cost your points",
    "start": "2241470",
    "end": "2248640"
  },
  {
    "text": "I'll call Cohen's points and you don't want to help to be rigid so very simple",
    "start": "2248640",
    "end": "2254819"
  },
  {
    "text": "that's the election API you just put the two updates and you are sure that the",
    "start": "2254819",
    "end": "2262079"
  },
  {
    "text": "two updates are done either together or not done at all so like I said this",
    "start": "2262079",
    "end": "2272520"
  },
  {
    "text": "most important things to remember is that items are not locked during the selections which means that if you have",
    "start": "2272520",
    "end": "2280650"
  },
  {
    "text": "in your example here something else another event that try to modify one of",
    "start": "2280650",
    "end": "2290190"
  },
  {
    "text": "these attributes using the directions your transaction will be in fade mode",
    "start": "2290190",
    "end": "2299030"
  },
  {
    "text": "because we can't have a consistent answer then that means that your",
    "start": "2299030",
    "end": "2307070"
  },
  {
    "text": "selection is failed so you have to deal that in your application that is very different from a relational database",
    "start": "2307070",
    "end": "2313790"
  },
  {
    "text": "selection so you have an extension to deal with and that's your application to",
    "start": "2313790",
    "end": "2320550"
  },
  {
    "text": "to work around how to work about what you do when the selection phase",
    "start": "2320550",
    "end": "2327740"
  },
  {
    "start": "2330000",
    "end": "2424000"
  },
  {
    "text": "the last topic and the last feature that was released at reinvent is called",
    "start": "2331350",
    "end": "2338230"
  },
  {
    "text": "DynamoDB on demand so I talked a lot about read and write capacity before the",
    "start": "2338230",
    "end": "2346390"
  },
  {
    "text": "whole talk and so we used to buy reserved capacity read capacity and back",
    "start": "2346390",
    "end": "2354610"
  },
  {
    "text": "and write capacity for that for your table okay and you could auto scale you",
    "start": "2354610",
    "end": "2361090"
  },
  {
    "text": "could say my table is only used during the day so I will provision more read",
    "start": "2361090",
    "end": "2369040"
  },
  {
    "text": "more right to a specific table and scale down to in the night now you have two",
    "start": "2369040",
    "end": "2376570"
  },
  {
    "text": "choices either you stick to the provisioned mode so you will you will",
    "start": "2376570",
    "end": "2382990"
  },
  {
    "text": "decide like we've done for the time service you will decide my table for the day is very right heavy so I didn't",
    "start": "2382990",
    "end": "2389590"
  },
  {
    "text": "probably 700 right and the other I don't need a lot",
    "start": "2389590",
    "end": "2394750"
  },
  {
    "text": "oh you don't know what's going to be your requirements on reason right and",
    "start": "2394750",
    "end": "2401710"
  },
  {
    "text": "you have this very nice and easy button on demand that's the price that means",
    "start": "2401710",
    "end": "2410560"
  },
  {
    "text": "that we will do anything for adapting",
    "start": "2410560",
    "end": "2416410"
  },
  {
    "text": "the capacity based on your request so you only pay for what you use so that's",
    "start": "2416410",
    "end": "2424390"
  },
  {
    "start": "2424000",
    "end": "2528000"
  },
  {
    "text": "very good so when you create on demand is when you create new tables and you",
    "start": "2424390",
    "end": "2430930"
  },
  {
    "text": "don't know your workload you don't know how many people you will use you have",
    "start": "2430930",
    "end": "2436840"
  },
  {
    "text": "very unpredictable application traffic maybe you have a website but it can be",
    "start": "2436840",
    "end": "2442720"
  },
  {
    "text": "very used or not depends on a promotion",
    "start": "2442720",
    "end": "2449200"
  },
  {
    "text": "or a social media thing or and it's but",
    "start": "2449200",
    "end": "2455830"
  },
  {
    "text": "it's not meant for when you have predictable traffic you I will stick",
    "start": "2455830",
    "end": "2462120"
  },
  {
    "text": "still advise you to stick to a predictable provision manner if you know",
    "start": "2462120",
    "end": "2468420"
  },
  {
    "text": "actually how you will use your application so that's why we keep the to",
    "start": "2468420",
    "end": "2474630"
  },
  {
    "text": "model it's easier to predict cost it's easier to make sure that we you will not",
    "start": "2474630",
    "end": "2481590"
  },
  {
    "text": "have any photo on your application if you know exactly how many read or write you will do on your application so I",
    "start": "2481590",
    "end": "2490130"
  },
  {
    "text": "think we will have a lot of production environment stick to provisioned because",
    "start": "2490130",
    "end": "2497340"
  },
  {
    "text": "you need some predictable thing when you start you can start on on-demand and you",
    "start": "2497340",
    "end": "2503940"
  },
  {
    "text": "can always switch from one to another one time or the other so start with",
    "start": "2503940",
    "end": "2511530"
  },
  {
    "text": "on-demand start your your development on demand look at how many capacity use it you have and switch to publishing when",
    "start": "2511530",
    "end": "2520560"
  },
  {
    "text": "you have a more predictable work code so",
    "start": "2520560",
    "end": "2528960"
  },
  {
    "text": "to wrap up let's go back to this first slide as I mentioned that's all the",
    "start": "2528960",
    "end": "2535380"
  },
  {
    "text": "principle of make sure that you use the right size of your item that you put you",
    "start": "2535380",
    "end": "2541620"
  },
  {
    "text": "all your data together in one table as much as possible look at your access",
    "start": "2541620",
    "end": "2549990"
  },
  {
    "text": "button how what is your velocity required if you really require a very",
    "start": "2549990",
    "end": "2555720"
  },
  {
    "text": "very low latency you can have a cache layer in front of dynamo call Dax then",
    "start": "2555720",
    "end": "2563310"
  },
  {
    "text": "you can achieve microseconds latency and still doing it right through this cache",
    "start": "2563310",
    "end": "2571340"
  },
  {
    "text": "use the sort orders so designing from your table with primary key in mind to",
    "start": "2571340",
    "end": "2578100"
  },
  {
    "text": "spread the load on from a key but think about the salt key as the name implies",
    "start": "2578100",
    "end": "2584610"
  },
  {
    "text": "it's how the data is sorted so make sure that you will carry this field and use",
    "start": "2584610",
    "end": "2592800"
  },
  {
    "text": "the fact that it's sorted on this like damn Stan like an age like game ID",
    "start": "2592800",
    "end": "2599240"
  },
  {
    "text": "something that is a query that you will query on turkey use GSI for all the",
    "start": "2599240",
    "end": "2607970"
  },
  {
    "text": "access button so having one table for the primary usage and when you have a",
    "start": "2607970",
    "end": "2614660"
  },
  {
    "text": "new requirement when you can think about creating a GSI to answer these new",
    "start": "2614660",
    "end": "2621590"
  },
  {
    "text": "questions which is probably very different from the the main table wrap",
    "start": "2621590",
    "end": "2631700"
  },
  {
    "start": "2628000",
    "end": "2777000"
  },
  {
    "text": "up so that's the DynamoDB streams yeah",
    "start": "2631700",
    "end": "2637910"
  },
  {
    "text": "on the top and like I said the idea is that think about dynamodb for solving",
    "start": "2637910",
    "end": "2645290"
  },
  {
    "text": "one problem or something a few problems but don't DynamoDB will not solve every",
    "start": "2645290",
    "end": "2653260"
  },
  {
    "text": "problem for you you may have some analytics to do on your data and if we",
    "start": "2653260",
    "end": "2660950"
  },
  {
    "text": "take again the time series example with the whole archive from a few years from",
    "start": "2660950",
    "end": "2667940"
  },
  {
    "text": "thousands of senses and you want to do aggregates all you want you to make some",
    "start": "2667940",
    "end": "2674000"
  },
  {
    "text": "analyze detections of things that are already scan heavy in this case you",
    "start": "2674000",
    "end": "2679280"
  },
  {
    "text": "shouldn't do queries on dynamo because it would be a scan and the scan is very expensive it's not predictable it's not",
    "start": "2679280",
    "end": "2685910"
  },
  {
    "text": "meant for this so what you probably should do is having a separate database",
    "start": "2685910",
    "end": "2695120"
  },
  {
    "text": "or search engine or something else that works very well for solving your",
    "start": "2695120",
    "end": "2700760"
  },
  {
    "text": "analytics problem or if you want to do machine learnings on your data or if you want to do search on your data and with",
    "start": "2700760",
    "end": "2711380"
  },
  {
    "text": "this very powerful stream every changes can be pushed to something else so if",
    "start": "2711380",
    "end": "2718430"
  },
  {
    "text": "you have new data coming in that's work very well for those transactions for your day-to-day things on your",
    "start": "2718430",
    "end": "2725240"
  },
  {
    "text": "application then you want to to create a search engine use cloud search or elastic search probably to",
    "start": "2725240",
    "end": "2733940"
  },
  {
    "text": "create the search engine that we have a lot of customers in retail you do that is having dynamo for the order",
    "start": "2733940",
    "end": "2740600"
  },
  {
    "text": "management the customer facing or the management system because they query",
    "start": "2740600",
    "end": "2746270"
  },
  {
    "text": "only on orders or customers product ID",
    "start": "2746270",
    "end": "2751390"
  },
  {
    "text": "that's voice very well but then if you want to create a search engine on your for your customer to search for the",
    "start": "2751390",
    "end": "2758840"
  },
  {
    "text": "description or attributes or things that are adapt down in the attributes that",
    "start": "2758840",
    "end": "2764380"
  },
  {
    "text": "doesn't work for dynamo de so create a search engine that use something else",
    "start": "2764380",
    "end": "2769730"
  },
  {
    "text": "like it a stick search",
    "start": "2769730",
    "end": "2773050"
  },
  {
    "text": "I want you to finish on this we have it's a developer conference so I suppose",
    "start": "2776560",
    "end": "2782500"
  },
  {
    "start": "2777000",
    "end": "3075000"
  },
  {
    "text": "that we all know slack and we created a AdWords developers like probably you",
    "start": "2782500",
    "end": "2787660"
  },
  {
    "text": "have heard this morning already and we have a hashtag databases channel but for",
    "start": "2787660",
    "end": "2794620"
  },
  {
    "text": "now is only on invite so you if you want you have an invite you have to DM this",
    "start": "2794620",
    "end": "2801390"
  },
  {
    "text": "guy or Rick you probably saw him earlier in the day welcome message me also I can",
    "start": "2801390",
    "end": "2809860"
  },
  {
    "text": "do that and we have about 10 minutes for",
    "start": "2809860",
    "end": "2816040"
  },
  {
    "text": "for Q&A and happy to take your name",
    "start": "2816040",
    "end": "2822720"
  },
  {
    "text": "[Music]",
    "start": "2828300",
    "end": "2831510"
  },
  {
    "text": "okay yeah so the question is for on",
    "start": "2835280",
    "end": "2840300"
  },
  {
    "text": "demand can we add a maximum capacity the answer is no I don't think it's possible",
    "start": "2840300",
    "end": "2847530"
  },
  {
    "text": "but we can check afterwards it's a bit like a lot of on-demand services on a",
    "start": "2847530",
    "end": "2854040"
  },
  {
    "text": "race you have to make sure that you have other girl rights like billing and",
    "start": "2854040",
    "end": "2859290"
  },
  {
    "text": "things on it but the idea is that it will scare because you want to have the table to scale for unpredictable so if",
    "start": "2859290",
    "end": "2868290"
  },
  {
    "text": "you have this specific woman's go back to provisioned yes so the question is",
    "start": "2868290",
    "end": "2886580"
  },
  {
    "text": "the GSI do global indexes can can be added afterwards the answer is yes when",
    "start": "2886580",
    "end": "2894030"
  },
  {
    "text": "you create a table it's actually doesn't have any indexes and you create the GS eyes later on there's one big limitation",
    "start": "2894030",
    "end": "2902730"
  },
  {
    "text": "is that you only have five just as possible in one table so you can create",
    "start": "2902730",
    "end": "2908010"
  },
  {
    "text": "them later that's why I'm talking our totally rotten sober GSI overloading",
    "start": "2908010",
    "end": "2913800"
  },
  {
    "text": "make sure that you can use it one GSI with several completely different",
    "start": "2913800",
    "end": "2920070"
  },
  {
    "text": "conformation in it when we have the employee name and the job title in the",
    "start": "2920070",
    "end": "2925950"
  },
  {
    "text": "same GSI then you can go around the five minutes",
    "start": "2925950",
    "end": "2932390"
  },
  {
    "text": "yes",
    "start": "2938809",
    "end": "2941349"
  },
  {
    "text": "so the question is what happens if you go over your reserve capacity so let's",
    "start": "2946990",
    "end": "2954310"
  },
  {
    "text": "say you have 500 weight capacity if you if you go although it gets flattened so",
    "start": "2954310",
    "end": "2961180"
  },
  {
    "text": "when you're when a query is throttled is the the API answers right back that you",
    "start": "2961180",
    "end": "2967839"
  },
  {
    "text": "can't serve you and that's the application to be try so if you use the US SDK it's integrated in it so what do",
    "start": "2967839",
    "end": "2977290"
  },
  {
    "text": "we what you get is latency basically or even errors after some time a lot of",
    "start": "2977290",
    "end": "2984940"
  },
  {
    "text": "time but you get latency because your request is fraught also say no I'm over",
    "start": "2984940",
    "end": "2990609"
  },
  {
    "text": "capacity go back later you try again later on so you get capacity there's one",
    "start": "2990609",
    "end": "2998589"
  },
  {
    "text": "thing in dynamo is that we have burstable capacity so you can go a bit above your weight capacity is the back",
    "start": "2998589",
    "end": "3006180"
  },
  {
    "text": "it's the exact same as t2 and t3 is that you can go a bit above your capacity for",
    "start": "3006180",
    "end": "3012420"
  },
  {
    "text": "a certain period of time because you have this reserve capacity but doesn't",
    "start": "3012420",
    "end": "3017930"
  },
  {
    "text": "work for a long time answers your question",
    "start": "3017930",
    "end": "3024230"
  },
  {
    "text": "now that if you use the SDK it's inequality in it the hy the exponential",
    "start": "3026850",
    "end": "3034480"
  },
  {
    "text": "time before it we try is integrated in the SDK that's why I'm saying for from",
    "start": "3034480",
    "end": "3040480"
  },
  {
    "text": "the developer perspective you get a latency to your request we get more",
    "start": "3040480",
    "end": "3046890"
  },
  {
    "text": "okay well I'm around afterwards for other questions if you need to thank you",
    "start": "3053010",
    "end": "3061820"
  },
  {
    "text": "[Applause]",
    "start": "3061820",
    "end": "3066169"
  }
]