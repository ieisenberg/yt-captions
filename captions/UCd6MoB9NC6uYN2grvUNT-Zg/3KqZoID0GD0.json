[
  {
    "start": "0",
    "end": "69000"
  },
  {
    "text": "- Welcome to another\nvideo on Better Together.",
    "start": "3360",
    "end": "6060"
  },
  {
    "text": "The Better Together videos",
    "start": "6060",
    "end": "7740"
  },
  {
    "text": "highlight the benefits of\npairing database workloads",
    "start": "7740",
    "end": "10920"
  },
  {
    "text": "with Amazon ElastiCache.",
    "start": "10920",
    "end": "12840"
  },
  {
    "text": "In a previous video I talked\nabout general RDBMS workloads",
    "start": "12840",
    "end": "17250"
  },
  {
    "text": "that can benefit from being\npaired with AWS ElastiCache.",
    "start": "17250",
    "end": "22250"
  },
  {
    "text": "In today's video,",
    "start": "22350",
    "end": "23280"
  },
  {
    "text": "I'm going to talk about\nOracle-specific workloads.",
    "start": "23280",
    "end": "26460"
  },
  {
    "text": "Workloads that after being\npaired with ElastiCache",
    "start": "26460",
    "end": "30029"
  },
  {
    "text": "will have a boost in performance",
    "start": "30030",
    "end": "32220"
  },
  {
    "text": "and a reduction in total cost.",
    "start": "32220",
    "end": "35153"
  },
  {
    "text": "Thus, the two services\ntogether are better.",
    "start": "35153",
    "end": "37303"
  },
  {
    "text": "In today's video,",
    "start": "38220",
    "end": "39053"
  },
  {
    "text": "I'm going to share with\nyou tools and techniques",
    "start": "39053",
    "end": "41070"
  },
  {
    "text": "how to identify Oracle workloads,",
    "start": "41070",
    "end": "43770"
  },
  {
    "text": "and I will introduce various\narchitectural migration options",
    "start": "43770",
    "end": "48300"
  },
  {
    "text": "depending on where you currently are",
    "start": "48300",
    "end": "49800"
  },
  {
    "text": "in your Oracle workloads,",
    "start": "49800",
    "end": "51270"
  },
  {
    "text": "to introduce to add ElastiCache\nto your architecture,",
    "start": "51270",
    "end": "56250"
  },
  {
    "text": "and calculate sample cost savings\nand boosts in performance.",
    "start": "56250",
    "end": "59733"
  },
  {
    "text": "Hello, my name is Steven Hancz,",
    "start": "61020",
    "end": "62790"
  },
  {
    "text": "I'm a senior solutions architect,",
    "start": "62790",
    "end": "64710"
  },
  {
    "text": "and I specialize in in-memory databases.",
    "start": "64710",
    "end": "67803"
  },
  {
    "start": "69000",
    "end": "162000"
  },
  {
    "text": "So let's just first\nunderstand the economics,",
    "start": "69570",
    "end": "72270"
  },
  {
    "text": "why is this important, and how\nis this thing going to affect",
    "start": "72270",
    "end": "75479"
  },
  {
    "text": "your overall workload,\ncost, and performance.",
    "start": "75480",
    "end": "77913"
  },
  {
    "text": "In the above graph, in\nthe current graph here,",
    "start": "79020",
    "end": "81509"
  },
  {
    "text": "you're going to see that on the X axis",
    "start": "81510",
    "end": "84000"
  },
  {
    "text": "we represent the request per second",
    "start": "84000",
    "end": "85407"
  },
  {
    "text": "and the Y axis the cost.",
    "start": "85407",
    "end": "87810"
  },
  {
    "text": "So basically, as the number of\nrequests per second increase,",
    "start": "87810",
    "end": "91740"
  },
  {
    "text": "so will the cost, initially\nat the lower rate,",
    "start": "91740",
    "end": "94680"
  },
  {
    "text": "but later on at the higher rate.",
    "start": "94680",
    "end": "96300"
  },
  {
    "text": "This has to do with the\nscaling options Oracle has,",
    "start": "96300",
    "end": "99990"
  },
  {
    "text": "such as scaling up, as in vertically,",
    "start": "99990",
    "end": "102689"
  },
  {
    "text": "larger and larger instances,",
    "start": "102690",
    "end": "104160"
  },
  {
    "text": "so in some cases this\nwill double your cost,",
    "start": "104160",
    "end": "106770"
  },
  {
    "text": "or scaling out, adding\nmultiple read replicas,",
    "start": "106770",
    "end": "110159"
  },
  {
    "text": "which again will increase your\nlicensing cost, storage cost,",
    "start": "110160",
    "end": "113310"
  },
  {
    "text": "networking cost, and so on.",
    "start": "113310",
    "end": "114960"
  },
  {
    "text": "So as you add more and\nmore resources to it,",
    "start": "114960",
    "end": "116880"
  },
  {
    "text": "so will the cost increase with it.",
    "start": "116880",
    "end": "119909"
  },
  {
    "text": "But what if you could flatten this curve?",
    "start": "119910",
    "end": "122730"
  },
  {
    "text": "Now this next curve\nrepresents an Oracle workload",
    "start": "122730",
    "end": "126270"
  },
  {
    "text": "that had been paired with ElastiCache.",
    "start": "126270",
    "end": "128519"
  },
  {
    "text": "Now you can see that it\nwill flatten that curve,",
    "start": "128520",
    "end": "131130"
  },
  {
    "text": "you could achieve much\nhigher request per second",
    "start": "131130",
    "end": "133590"
  },
  {
    "text": "at the lower cost.",
    "start": "133590",
    "end": "135060"
  },
  {
    "text": "And there's an intersection there.",
    "start": "135060",
    "end": "136800"
  },
  {
    "text": "And that's what I'm\ngoing to share with you,",
    "start": "136800",
    "end": "138120"
  },
  {
    "text": "tools and techniques to\nfind that intersection,",
    "start": "138120",
    "end": "140040"
  },
  {
    "text": "where these two curves intersect.",
    "start": "140040",
    "end": "142500"
  },
  {
    "text": "Where it makes sense to add\nElastiCache to your workloads,",
    "start": "142500",
    "end": "145770"
  },
  {
    "text": "and to which workloads it's not,",
    "start": "145770",
    "end": "147150"
  },
  {
    "text": "because not every workload qualifies.",
    "start": "147150",
    "end": "150000"
  },
  {
    "text": "It doesn't really matter, in all cases,",
    "start": "150000",
    "end": "153300"
  },
  {
    "text": "you will see a boost in performance,",
    "start": "153300",
    "end": "155340"
  },
  {
    "text": "but in some cases you will see\nboth the boost in performance",
    "start": "155340",
    "end": "157860"
  },
  {
    "text": "and an increase in cost.",
    "start": "157860",
    "end": "159363"
  },
  {
    "text": "So, before we dive into that,",
    "start": "160590",
    "end": "162480"
  },
  {
    "start": "162000",
    "end": "285000"
  },
  {
    "text": "let's just have a quick\nrecap of Amazon ElastiCache,",
    "start": "162480",
    "end": "166620"
  },
  {
    "text": "quick overview of it.",
    "start": "166620",
    "end": "168030"
  },
  {
    "text": "So Amazon ElastiCache,",
    "start": "168030",
    "end": "169709"
  },
  {
    "text": "it's an open source compatible service,",
    "start": "169710",
    "end": "171660"
  },
  {
    "text": "meaning that it's compatible",
    "start": "171660",
    "end": "172800"
  },
  {
    "text": "with two compute engines, actually.",
    "start": "172800",
    "end": "175200"
  },
  {
    "text": "It supports both the Memcached\nand the Redis engines.",
    "start": "175200",
    "end": "178980"
  },
  {
    "text": "It's a fully managed service,",
    "start": "178980",
    "end": "180569"
  },
  {
    "text": "meaning that you don't have to bother",
    "start": "180570",
    "end": "182250"
  },
  {
    "text": "with acquiring hardware,\nconfiguring the hardware,",
    "start": "182250",
    "end": "186210"
  },
  {
    "text": "installing software,\nmanaging that, patching that,",
    "start": "186210",
    "end": "190290"
  },
  {
    "text": "even minor version upgrades",
    "start": "190290",
    "end": "191760"
  },
  {
    "text": "are taken care for you\nautomatically, as well as monitoring.",
    "start": "191760",
    "end": "196470"
  },
  {
    "text": "As of late last year, 2023,",
    "start": "196470",
    "end": "198450"
  },
  {
    "text": "we introduced a serverless\nversion of Amazon ElastiCache.",
    "start": "198450",
    "end": "202470"
  },
  {
    "text": "Which is basically completely serverless,",
    "start": "202470",
    "end": "204510"
  },
  {
    "text": "you just pay per use,",
    "start": "204510",
    "end": "206220"
  },
  {
    "text": "you don't even have to bother\nwith capacity or scaling.",
    "start": "206220",
    "end": "209733"
  },
  {
    "text": "All of that is taken care for you.",
    "start": "210870",
    "end": "212580"
  },
  {
    "text": "Basically, you just use the\nservice as much as you need,",
    "start": "212580",
    "end": "215160"
  },
  {
    "text": "and you pay for as much service\nas your consumption-based,",
    "start": "215160",
    "end": "218460"
  },
  {
    "text": "service as much as you used.",
    "start": "218460",
    "end": "220260"
  },
  {
    "text": "Both services, the older\none, the provisioned one,",
    "start": "220260",
    "end": "224069"
  },
  {
    "text": "the instance based, and the\nnew one are highly available,",
    "start": "224070",
    "end": "227310"
  },
  {
    "text": "with four nines availability.",
    "start": "227310",
    "end": "229112"
  },
  {
    "text": "Supporting multiple availability zones,",
    "start": "230550",
    "end": "232530"
  },
  {
    "text": "with automatic failover,\nautomatic recovery if needed.",
    "start": "232530",
    "end": "236670"
  },
  {
    "text": "Both services can do that,",
    "start": "236670",
    "end": "238410"
  },
  {
    "text": "with a very fast response\ntime for both services,",
    "start": "238410",
    "end": "241770"
  },
  {
    "text": "we're talking about\nmillisecond response time,",
    "start": "241770",
    "end": "244500"
  },
  {
    "text": "and millions of transactions per second,",
    "start": "244500",
    "end": "247110"
  },
  {
    "text": "so it could scale both\nas far as performance,",
    "start": "247110",
    "end": "250920"
  },
  {
    "text": "and as far as number of transactions,",
    "start": "250920",
    "end": "253110"
  },
  {
    "text": "the services are secure.",
    "start": "253110",
    "end": "255060"
  },
  {
    "text": "That's very important here\nat AWS, they both support",
    "start": "255060",
    "end": "258450"
  },
  {
    "text": "a number of encryption\nand safety standards,",
    "start": "258450",
    "end": "261630"
  },
  {
    "text": "security standards.",
    "start": "261630",
    "end": "262980"
  },
  {
    "text": "Including encryption at rest,\nand encryption in transit.",
    "start": "262980",
    "end": "266730"
  },
  {
    "text": "And they both scale.",
    "start": "266730",
    "end": "268260"
  },
  {
    "text": "In case of the provision instance based,",
    "start": "268260",
    "end": "270360"
  },
  {
    "text": "you have to manage your own scaling.",
    "start": "270360",
    "end": "272159"
  },
  {
    "text": "IE, when to scale up, when to scale down,",
    "start": "273330",
    "end": "274949"
  },
  {
    "text": "you have to set your own\nthresholds and manage that.",
    "start": "274950",
    "end": "277740"
  },
  {
    "text": "For the serverless one,",
    "start": "277740",
    "end": "278789"
  },
  {
    "text": "you don't have to do that at all,",
    "start": "278790",
    "end": "280020"
  },
  {
    "text": "it scales for you as needed.",
    "start": "280020",
    "end": "281910"
  },
  {
    "text": "You just pay for their consumption.",
    "start": "281910",
    "end": "284193"
  },
  {
    "start": "285000",
    "end": "292000"
  },
  {
    "text": "So, let's see that, how to\nidentify Oracle workloads",
    "start": "285690",
    "end": "288720"
  },
  {
    "text": "that can benefit from caching.",
    "start": "288720",
    "end": "290370"
  },
  {
    "text": "Now that we know what it is.",
    "start": "290370",
    "end": "291770"
  },
  {
    "start": "292000",
    "end": "395000"
  },
  {
    "text": "So first of all,",
    "start": "292650",
    "end": "293669"
  },
  {
    "text": "only specific workloads\nare good candidates.",
    "start": "293670",
    "end": "296910"
  },
  {
    "text": "First of all, the workload",
    "start": "296910",
    "end": "298260"
  },
  {
    "text": "has to execute more reads than writes.",
    "start": "298260",
    "end": "300930"
  },
  {
    "text": "So a higher read to write ratio.",
    "start": "300930",
    "end": "303090"
  },
  {
    "text": "70-30, it's ideal, higher\nthan that, it's even better.",
    "start": "303090",
    "end": "307020"
  },
  {
    "text": "So the higher the read to write ratio,",
    "start": "307020",
    "end": "308970"
  },
  {
    "text": "the better the workload is for a caching.",
    "start": "308970",
    "end": "312250"
  },
  {
    "text": "Next, if your workload has a database",
    "start": "313140",
    "end": "315570"
  },
  {
    "text": "with multiple read replicas,",
    "start": "315570",
    "end": "317070"
  },
  {
    "text": "so it's kinda like gives it away,",
    "start": "317070",
    "end": "318810"
  },
  {
    "text": "you have multiple read replicas",
    "start": "318810",
    "end": "320370"
  },
  {
    "text": "'cause the database is\ndoing a lot more reads,",
    "start": "320370",
    "end": "322770"
  },
  {
    "text": "and it had to scale out,",
    "start": "322770",
    "end": "324330"
  },
  {
    "text": "this is one of those\nexamples of scaling out,",
    "start": "324330",
    "end": "326849"
  },
  {
    "text": "adding multiple read replicas,",
    "start": "326850",
    "end": "328350"
  },
  {
    "text": "so that's another good indication",
    "start": "328350",
    "end": "329790"
  },
  {
    "text": "that this workload is a good candidate",
    "start": "329790",
    "end": "332430"
  },
  {
    "text": "to be paired with the caching service.",
    "start": "332430",
    "end": "334949"
  },
  {
    "text": "Workloads with repetitive reads,",
    "start": "334950",
    "end": "336510"
  },
  {
    "text": "so, kinda like I explained it\nalready, that if every read,",
    "start": "336510",
    "end": "339810"
  },
  {
    "text": "if there are lots of reads,",
    "start": "339810",
    "end": "340710"
  },
  {
    "text": "but if every read is a unique one,",
    "start": "340710",
    "end": "343020"
  },
  {
    "text": "then it doesn't really matter\nwhether you have a cache",
    "start": "343020",
    "end": "345419"
  },
  {
    "text": "or how you size your\ndatabase, how big it is.",
    "start": "345420",
    "end": "348210"
  },
  {
    "text": "That means every one of the reads",
    "start": "348210",
    "end": "349680"
  },
  {
    "text": "are going to go down to\nstorage because they're unique,",
    "start": "349680",
    "end": "351870"
  },
  {
    "text": "they cannot be cacheed,",
    "start": "351870",
    "end": "352703"
  },
  {
    "text": "so they have to be repetitive reads.",
    "start": "352703",
    "end": "355320"
  },
  {
    "text": "And finally, you got to\nthe point in your workload",
    "start": "355320",
    "end": "358110"
  },
  {
    "text": "that your overall database\ncost is just too high.",
    "start": "358110",
    "end": "362129"
  },
  {
    "text": "And you are thinking about other options,",
    "start": "362130",
    "end": "364140"
  },
  {
    "text": "such as completely\nrewriting your applications,",
    "start": "364140",
    "end": "366540"
  },
  {
    "text": "maybe migrate to a NoSQL database.",
    "start": "366540",
    "end": "369420"
  },
  {
    "text": "Well, you may not have to do\nthat, that's a big undertaking,",
    "start": "369420",
    "end": "372060"
  },
  {
    "text": "it's probably gonna take a lot\nof time and work on your end.",
    "start": "372060",
    "end": "375660"
  },
  {
    "text": "And may be very expensive, costly.",
    "start": "375660",
    "end": "378900"
  },
  {
    "text": "So in those cases, if your\ndatabase cost is high,",
    "start": "378900",
    "end": "382380"
  },
  {
    "text": "maybe you should consider\nadding a caching service to it",
    "start": "382380",
    "end": "385290"
  },
  {
    "text": "to bring down those costs,",
    "start": "385290",
    "end": "386790"
  },
  {
    "text": "and I will show you some\nexamples how is that possible,",
    "start": "386790",
    "end": "389040"
  },
  {
    "text": "various architecture\ndiagrams will show you that,",
    "start": "389040",
    "end": "391020"
  },
  {
    "text": "so, these are kinda like\nthe workloads that qualify.",
    "start": "391020",
    "end": "394022"
  },
  {
    "start": "395000",
    "end": "574000"
  },
  {
    "text": "Now let's just look at\nsome tools and techniques,",
    "start": "395670",
    "end": "397800"
  },
  {
    "text": "how to identify those workloads,",
    "start": "397800",
    "end": "399960"
  },
  {
    "text": "now that you have an overall idea,",
    "start": "399960",
    "end": "402240"
  },
  {
    "text": "you have to drill down a little bit deeper",
    "start": "402240",
    "end": "403800"
  },
  {
    "text": "to make sure that you have\nthose repetitive SQLs,",
    "start": "403800",
    "end": "406590"
  },
  {
    "text": "that these are really good candidates.",
    "start": "406590",
    "end": "408870"
  },
  {
    "text": "The first way that you can do that",
    "start": "408870",
    "end": "410580"
  },
  {
    "text": "if you're already in the cloud",
    "start": "410580",
    "end": "411780"
  },
  {
    "text": "is to use Amazon CloudWatch.",
    "start": "411780",
    "end": "413639"
  },
  {
    "text": "Amazon CloudWatch could help you identify",
    "start": "413640",
    "end": "416130"
  },
  {
    "text": "the read and write ratio,\nhow much data is going in,",
    "start": "416130",
    "end": "419070"
  },
  {
    "text": "how much data is coming out,",
    "start": "419070",
    "end": "420300"
  },
  {
    "text": "so it's an easy way to figure it out,",
    "start": "420300",
    "end": "422129"
  },
  {
    "text": "or, you can use Performance Insight.",
    "start": "422130",
    "end": "424200"
  },
  {
    "text": "If you enabled Performance Insight,",
    "start": "424200",
    "end": "426000"
  },
  {
    "text": "you could turn it on for seven days.",
    "start": "426000",
    "end": "427920"
  },
  {
    "text": "And have a good idea,\nfind out the top SQLs.",
    "start": "427920",
    "end": "430410"
  },
  {
    "text": "Have a graphical way of monitoring",
    "start": "430410",
    "end": "432990"
  },
  {
    "text": "what your database is doing,",
    "start": "432990",
    "end": "434580"
  },
  {
    "text": "and identify workloads\nthat are good candidates.",
    "start": "434580",
    "end": "437819"
  },
  {
    "text": "Now, if you're on-prem,",
    "start": "437820",
    "end": "439950"
  },
  {
    "text": "then you have to use\nOracle-native techniques,",
    "start": "439950",
    "end": "442050"
  },
  {
    "text": "and I will show you a SQL command",
    "start": "442050",
    "end": "444030"
  },
  {
    "text": "that could help you to do that,",
    "start": "444030",
    "end": "445200"
  },
  {
    "text": "how to find out top SQL commands",
    "start": "445200",
    "end": "447810"
  },
  {
    "text": "and whether you do a lot more\nreads or a lot more writes.",
    "start": "447810",
    "end": "451290"
  },
  {
    "text": "Another option to you\navailable if you're on-prem,",
    "start": "451290",
    "end": "454680"
  },
  {
    "text": "it's a tool that you could download",
    "start": "454680",
    "end": "456509"
  },
  {
    "text": "that had been updated.",
    "start": "456510",
    "end": "457500"
  },
  {
    "text": "It's called DB CSI or\nCurrent State Investigation,",
    "start": "457500",
    "end": "461280"
  },
  {
    "text": "and I'll show you a bit\nmore details on that.",
    "start": "461280",
    "end": "463350"
  },
  {
    "text": "This is a tool that has\nbeen around for some time,",
    "start": "463350",
    "end": "465360"
  },
  {
    "text": "but now it's updated to include",
    "start": "465360",
    "end": "467460"
  },
  {
    "text": "recommendations for migration,\nincluding ElastiCache,",
    "start": "467460",
    "end": "471630"
  },
  {
    "text": "not just a straight lift and shift.",
    "start": "471630",
    "end": "473970"
  },
  {
    "text": "And finally, third party\ntools, if none of that works,",
    "start": "473970",
    "end": "476610"
  },
  {
    "text": "then you can try to use\nsome third-party tools",
    "start": "476610",
    "end": "478439"
  },
  {
    "text": "that could help you identify workloads.",
    "start": "478440",
    "end": "480900"
  },
  {
    "text": "So let's just have a little detail,",
    "start": "480900",
    "end": "482310"
  },
  {
    "text": "first I talked about CloudWatch,",
    "start": "482310",
    "end": "484020"
  },
  {
    "text": "yes, you can use CloudWatch\nmetrics at the command line,",
    "start": "484020",
    "end": "486990"
  },
  {
    "text": "to find out the bytes transferred in,",
    "start": "486990",
    "end": "490440"
  },
  {
    "text": "or the bytes transferred out,",
    "start": "490440",
    "end": "491490"
  },
  {
    "text": "so basically a read-write ratio,",
    "start": "491490",
    "end": "492870"
  },
  {
    "text": "this will tell you, in\na quick calculation,",
    "start": "492870",
    "end": "495150"
  },
  {
    "text": "you could see the difference\nbetween read and write,",
    "start": "495150",
    "end": "497009"
  },
  {
    "text": "and you will know that the\nworkload is read or write heavy,",
    "start": "497010",
    "end": "500640"
  },
  {
    "text": "you could set a period of time.",
    "start": "500640",
    "end": "502530"
  },
  {
    "text": "Obviously you don't wanna\nset it down to an hour.",
    "start": "502530",
    "end": "504630"
  },
  {
    "text": "You wanna have a larger period\nof time, maybe 24 hours,",
    "start": "504630",
    "end": "507570"
  },
  {
    "text": "to find out what the database\nis doing in a 24-hour session.",
    "start": "507570",
    "end": "510990"
  },
  {
    "text": "If you do it during a one-hour session,",
    "start": "510990",
    "end": "513060"
  },
  {
    "text": "it's possible that a backup is running",
    "start": "513060",
    "end": "514830"
  },
  {
    "text": "or data is being loaded.",
    "start": "514830",
    "end": "516300"
  },
  {
    "text": "It's not sufficient,",
    "start": "516300",
    "end": "517229"
  },
  {
    "text": "you wanna have at least\na good 24-hour window.",
    "start": "517230",
    "end": "519750"
  },
  {
    "text": "And then you will see what\nthe workload is doing,",
    "start": "519750",
    "end": "521909"
  },
  {
    "text": "you know, what if it's\na cyclical workload?",
    "start": "521910",
    "end": "524159"
  },
  {
    "text": "So that's why you can't\njust pick a one-hour session",
    "start": "524160",
    "end": "526560"
  },
  {
    "text": "when a specific workload is running.",
    "start": "526560",
    "end": "529080"
  },
  {
    "text": "Here is a graphical version of CloudWatch.",
    "start": "529080",
    "end": "531453"
  },
  {
    "text": "If you configured your console,",
    "start": "532478",
    "end": "533550"
  },
  {
    "text": "you could use your\nCloudWatch, and in this case,",
    "start": "533550",
    "end": "535230"
  },
  {
    "text": "you can see that this database",
    "start": "535230",
    "end": "536790"
  },
  {
    "text": "is doing constantly a lot of reading.",
    "start": "536790",
    "end": "539970"
  },
  {
    "text": "So there you go, it's a good candidate,",
    "start": "539970",
    "end": "541470"
  },
  {
    "text": "it's not just a five-minute snapshot,",
    "start": "541470",
    "end": "543149"
  },
  {
    "text": "it goes on for several hours.",
    "start": "543150",
    "end": "545220"
  },
  {
    "text": "And you can see it, that\nis doing a lot of read, so,",
    "start": "545220",
    "end": "548879"
  },
  {
    "text": "easy way to figure it out, good candidate.",
    "start": "548880",
    "end": "552030"
  },
  {
    "text": "Now another tool that I mentioned,",
    "start": "552030",
    "end": "553980"
  },
  {
    "text": "if you're already in the\ncloud, is Performance Insights.",
    "start": "553980",
    "end": "556769"
  },
  {
    "text": "Performance Insight,\nsimilar to CloudWatch,",
    "start": "556770",
    "end": "558900"
  },
  {
    "text": "gives you the drilling capabilities",
    "start": "558900",
    "end": "560970"
  },
  {
    "text": "to find even the specific SQL commands.",
    "start": "560970",
    "end": "563670"
  },
  {
    "text": "In this case, you can see the top SQLs,",
    "start": "563670",
    "end": "565980"
  },
  {
    "text": "and see how many times\nthey have been executed,",
    "start": "565980",
    "end": "568557"
  },
  {
    "text": "IE, to find those repetitive SQL commands,",
    "start": "568557",
    "end": "570810"
  },
  {
    "text": "so, these are the options you have",
    "start": "570810",
    "end": "573240"
  },
  {
    "text": "if you're already in the cloud,",
    "start": "573240",
    "end": "574320"
  },
  {
    "start": "574000",
    "end": "716000"
  },
  {
    "text": "now, if you're not, if you're on-prem,",
    "start": "574320",
    "end": "576570"
  },
  {
    "text": "you have to use the native\nways, Oracle-native ways,",
    "start": "576570",
    "end": "580320"
  },
  {
    "text": "which is always available to you,",
    "start": "580320",
    "end": "581217"
  },
  {
    "text": "you can do that even if\nyou're on the cloud already,",
    "start": "581217",
    "end": "584190"
  },
  {
    "text": "if you're already in AWS, you\ncould use the native ways,",
    "start": "584190",
    "end": "586410"
  },
  {
    "text": "but, if not, these are\nsome of the options.",
    "start": "586410",
    "end": "588810"
  },
  {
    "text": "So for example, you could\nuse Oracle Snapshots,",
    "start": "588810",
    "end": "591603"
  },
  {
    "text": "part of the Statspack.",
    "start": "592560",
    "end": "594150"
  },
  {
    "text": "And take a couple of snapshots,",
    "start": "594150",
    "end": "596820"
  },
  {
    "text": "you know, maybe a couple of hours apart,",
    "start": "596820",
    "end": "598530"
  },
  {
    "text": "or take a few snapshots\nevery hours, compare them,",
    "start": "598530",
    "end": "601680"
  },
  {
    "text": "and then you will see basically\nwhat the database is doing,",
    "start": "601680",
    "end": "604920"
  },
  {
    "text": "the read to write ratio.",
    "start": "604920",
    "end": "606839"
  },
  {
    "text": "And, you can even identify\nthe top SQL commands.",
    "start": "606840",
    "end": "610410"
  },
  {
    "text": "Talking about identifying\ntop SQL commands,",
    "start": "610410",
    "end": "612720"
  },
  {
    "text": "one way to do that is\nto select the account,",
    "start": "612720",
    "end": "615420"
  },
  {
    "text": "basically the number of executions,",
    "start": "615420",
    "end": "617040"
  },
  {
    "text": "from a V dollar SQL table,",
    "start": "617040",
    "end": "618810"
  },
  {
    "text": "this is going to give you\ninformation of all the cache SQLs,",
    "start": "618810",
    "end": "622680"
  },
  {
    "text": "how many times has been executed.",
    "start": "622680",
    "end": "624450"
  },
  {
    "text": "Okay, talking about it.",
    "start": "624450",
    "end": "625590"
  },
  {
    "text": "Here's a sample SQL command.",
    "start": "625590",
    "end": "627510"
  },
  {
    "text": "So you could select the\nnumber of executions,",
    "start": "627510",
    "end": "629580"
  },
  {
    "text": "buffer gets is the logical reads.",
    "start": "629580",
    "end": "631770"
  },
  {
    "text": "This grades, obviously, the physical read,",
    "start": "631770",
    "end": "633450"
  },
  {
    "text": "sorry, this way you could find out",
    "start": "633450",
    "end": "635550"
  },
  {
    "text": "how often the SQL was executed,",
    "start": "635550",
    "end": "637410"
  },
  {
    "text": "how many logical reads it has executed,",
    "start": "637410",
    "end": "639300"
  },
  {
    "text": "so get more and more details about it,",
    "start": "639300",
    "end": "643320"
  },
  {
    "text": "this is a native way to do it.",
    "start": "643320",
    "end": "644853"
  },
  {
    "text": "I talked about DB CSI\nearlier, if you're on-prem.",
    "start": "646440",
    "end": "650220"
  },
  {
    "text": "So the DB CSI, current\nstate investigation,",
    "start": "650220",
    "end": "652709"
  },
  {
    "text": "had been updated to help you",
    "start": "652710",
    "end": "654360"
  },
  {
    "text": "with migration from on-prem to the cloud.",
    "start": "654360",
    "end": "656883"
  },
  {
    "text": "And the feature that it\nhas is that in the past",
    "start": "657780",
    "end": "661050"
  },
  {
    "text": "it recommended an\ninstance based migration.",
    "start": "661050",
    "end": "664620"
  },
  {
    "text": "But now it recommends,\nif the workload is such,",
    "start": "664620",
    "end": "667380"
  },
  {
    "text": "it actually is gonna look at\npast workloads, AWR reports,",
    "start": "667380",
    "end": "672120"
  },
  {
    "text": "that are stored in your database,",
    "start": "672120",
    "end": "673320"
  },
  {
    "text": "it's gonna look at past performance.",
    "start": "673320",
    "end": "675780"
  },
  {
    "text": "And if the database is such",
    "start": "675780",
    "end": "677190"
  },
  {
    "text": "that it's executing a lot\nmore reads and writes,",
    "start": "677190",
    "end": "679350"
  },
  {
    "text": "has repetitive reads commands,",
    "start": "679350",
    "end": "681480"
  },
  {
    "text": "then it's gonna recommend,\nbased on an execution,",
    "start": "681480",
    "end": "685829"
  },
  {
    "text": "it's gonna recommend\ntwo migration options.",
    "start": "685830",
    "end": "688770"
  },
  {
    "text": "One, a strict lift and shift.",
    "start": "688770",
    "end": "691020"
  },
  {
    "text": "And the second one that\nis highlighted there,",
    "start": "691020",
    "end": "692970"
  },
  {
    "text": "the one that includes\nadding ElastiCache to it,",
    "start": "692970",
    "end": "696180"
  },
  {
    "text": "and it will try to do a\ncalculation for you, as well,",
    "start": "696180",
    "end": "698910"
  },
  {
    "text": "what size of a cache you might need,",
    "start": "698910",
    "end": "700889"
  },
  {
    "text": "even it's trying to calculate",
    "start": "700890",
    "end": "701940"
  },
  {
    "text": "some sort of a cost savings for you.",
    "start": "701940",
    "end": "704190"
  },
  {
    "text": "So, very interesting, very good tool,",
    "start": "704190",
    "end": "706920"
  },
  {
    "text": "that you could use on-Prem,",
    "start": "706920",
    "end": "708000"
  },
  {
    "text": "it's not gonna make any\nchanges to your database,",
    "start": "708000",
    "end": "709830"
  },
  {
    "text": "it's just going to look\nat past performance,",
    "start": "709830",
    "end": "712590"
  },
  {
    "text": "current database configuration,",
    "start": "712590",
    "end": "714390"
  },
  {
    "text": "and is going to give\nyou two recommendations.",
    "start": "714390",
    "end": "716640"
  },
  {
    "start": "716000",
    "end": "1018000"
  },
  {
    "text": "Talking about migration\nand recommendations,",
    "start": "717540",
    "end": "720360"
  },
  {
    "text": "let's just look at some\nsample migration diagrams.",
    "start": "720360",
    "end": "723390"
  },
  {
    "text": "So let's just look at, what\nif you're in this situation,",
    "start": "723390",
    "end": "727140"
  },
  {
    "text": "what are your options",
    "start": "727140",
    "end": "728100"
  },
  {
    "text": "to migrate to a different architecture",
    "start": "728100",
    "end": "730199"
  },
  {
    "text": "that includes ElastiCache,",
    "start": "730200",
    "end": "732720"
  },
  {
    "text": "that basically will boost the\nperformance of your workload,",
    "start": "732720",
    "end": "735689"
  },
  {
    "text": "and reduce costs at the same time.",
    "start": "735690",
    "end": "737583"
  },
  {
    "text": "So the simplest thing that\nyou could do, as I said,",
    "start": "738900",
    "end": "741360"
  },
  {
    "text": "depending on your cost,",
    "start": "741360",
    "end": "742410"
  },
  {
    "text": "if you're just gonna look\nstrictly at the cost,",
    "start": "742410",
    "end": "744810"
  },
  {
    "text": "and maybe you got to a point",
    "start": "744810",
    "end": "745980"
  },
  {
    "text": "that you wanna see, what are my options,",
    "start": "745980",
    "end": "747990"
  },
  {
    "text": "because my database cost is\ntrying to get out of hand.",
    "start": "747990",
    "end": "751080"
  },
  {
    "text": "Let's just look at the\nvery simple calculation,",
    "start": "751080",
    "end": "753600"
  },
  {
    "text": "you could do that on your workload,",
    "start": "753600",
    "end": "755522"
  },
  {
    "text": "this case is when you have a database",
    "start": "757050",
    "end": "759180"
  },
  {
    "text": "that is running at the Excel instance,",
    "start": "759180",
    "end": "762420"
  },
  {
    "text": "and everything is good, but\nyour application has scaled,",
    "start": "762420",
    "end": "765329"
  },
  {
    "text": "so it's one of those examples,",
    "start": "765330",
    "end": "766173"
  },
  {
    "text": "when your application is scaling,",
    "start": "766173",
    "end": "767940"
  },
  {
    "text": "your database is gonna\nscale with it vertically.",
    "start": "767940",
    "end": "771360"
  },
  {
    "text": "And basically the simplest\nthing that you could do",
    "start": "771360",
    "end": "774120"
  },
  {
    "text": "is to bring in a bigger database instance.",
    "start": "774120",
    "end": "777210"
  },
  {
    "text": "So from an Excel, go to two Excel.",
    "start": "777210",
    "end": "779700"
  },
  {
    "text": "A two Excel will give you twice\nthe CPUs, twice the memory.",
    "start": "779700",
    "end": "784080"
  },
  {
    "text": "Almost twice the throughput,",
    "start": "784080",
    "end": "785160"
  },
  {
    "text": "the networking is not\nnecessarily gonna double,",
    "start": "785160",
    "end": "787440"
  },
  {
    "text": "but yes, you will get more for that,",
    "start": "787440",
    "end": "788850"
  },
  {
    "text": "but your cost basis will also double.",
    "start": "788850",
    "end": "791970"
  },
  {
    "text": "So in that case, you have the option",
    "start": "791970",
    "end": "794850"
  },
  {
    "text": "to add ElastiCache to it for a flat fee.",
    "start": "794850",
    "end": "797639"
  },
  {
    "text": "This is an example where you\nadd an instance-based example,",
    "start": "797640",
    "end": "800793"
  },
  {
    "text": "which is calculated at the flat fee,",
    "start": "801930",
    "end": "804029"
  },
  {
    "text": "no matter the consumption.",
    "start": "804030",
    "end": "805773"
  },
  {
    "text": "So yes, what's the difference,",
    "start": "807030",
    "end": "808380"
  },
  {
    "text": "well, without the ElastiCache,\nyou could scale up, yes,",
    "start": "808380",
    "end": "812280"
  },
  {
    "text": "you could double your performance.",
    "start": "812280",
    "end": "814410"
  },
  {
    "text": "But it will cost you about $1300.",
    "start": "814410",
    "end": "818009"
  },
  {
    "text": "But with ElastiCache, it will\ncost you a flat fee of $300.",
    "start": "818010",
    "end": "822150"
  },
  {
    "text": "So, the difference is about 4X.",
    "start": "822150",
    "end": "824283"
  },
  {
    "text": "Now let's just look",
    "start": "825630",
    "end": "826463"
  },
  {
    "text": "at the more detailed architecture diagram",
    "start": "826463",
    "end": "828810"
  },
  {
    "text": "that includes a production\nOracle database,",
    "start": "828810",
    "end": "831360"
  },
  {
    "text": "that has a primary database,\nand a read replica.",
    "start": "831360",
    "end": "835110"
  },
  {
    "text": "So in this case,",
    "start": "835110",
    "end": "835943"
  },
  {
    "text": "the database is running on a 4XL instance.",
    "start": "835943",
    "end": "839399"
  },
  {
    "text": "And this is because the demand was such",
    "start": "839400",
    "end": "842010"
  },
  {
    "text": "to meet read and write demand,",
    "start": "842010",
    "end": "843930"
  },
  {
    "text": "so the database was\nput on an instance size",
    "start": "843930",
    "end": "846660"
  },
  {
    "text": "that would satisfy that.",
    "start": "846660",
    "end": "848819"
  },
  {
    "text": "So obviously a solution like that",
    "start": "848820",
    "end": "850800"
  },
  {
    "text": "would run about $123,000 a year.",
    "start": "850800",
    "end": "854459"
  },
  {
    "text": "Now, if you were to migrate this",
    "start": "854460",
    "end": "856770"
  },
  {
    "text": "to the architecture on the right,",
    "start": "856770",
    "end": "858510"
  },
  {
    "text": "where we add ElastiCache to it.",
    "start": "858510",
    "end": "860853"
  },
  {
    "text": "Well your database is still gonna have",
    "start": "861933",
    "end": "862860"
  },
  {
    "text": "a primary database and a read replica,",
    "start": "862860",
    "end": "864720"
  },
  {
    "text": "but instead of a 4XL, a\n2XL instance is sufficient,",
    "start": "864720",
    "end": "868350"
  },
  {
    "text": "because all those read requests",
    "start": "868350",
    "end": "870360"
  },
  {
    "text": "now can be farmed out to ElastiCache,",
    "start": "870360",
    "end": "874019"
  },
  {
    "text": "which is going to cost significantly less.",
    "start": "874020",
    "end": "876840"
  },
  {
    "text": "So there you go in comparison there.",
    "start": "876840",
    "end": "879060"
  },
  {
    "text": "Now, the new architecture\non the right hand side",
    "start": "879060",
    "end": "881970"
  },
  {
    "text": "cost only $77,000,",
    "start": "881970",
    "end": "884339"
  },
  {
    "text": "which is about a 37%\nreduction in total cost.",
    "start": "884340",
    "end": "889340"
  },
  {
    "text": "And all what you had to do,\nadd a caching service to it,",
    "start": "890520",
    "end": "893760"
  },
  {
    "text": "you're not gonna lose any\nof your high availability,",
    "start": "893760",
    "end": "895860"
  },
  {
    "text": "you still have a primary database,",
    "start": "895860",
    "end": "897720"
  },
  {
    "text": "standby at the cache itself,\nit's highly available.",
    "start": "897720",
    "end": "900930"
  },
  {
    "text": "So this is an example of scaling down,",
    "start": "900930",
    "end": "903330"
  },
  {
    "text": "actually, maybe previously\nscaled up vertically,",
    "start": "903330",
    "end": "906270"
  },
  {
    "text": "you could scale down.",
    "start": "906270",
    "end": "907323"
  },
  {
    "text": "Let's just look at another example.",
    "start": "908280",
    "end": "910530"
  },
  {
    "text": "This example has to do",
    "start": "910530",
    "end": "912270"
  },
  {
    "text": "when the database administrator\nhas decided to scale out.",
    "start": "912270",
    "end": "916830"
  },
  {
    "text": "So basically, multiple read replicas",
    "start": "916830",
    "end": "919290"
  },
  {
    "text": "have been added to the workload.",
    "start": "919290",
    "end": "921329"
  },
  {
    "text": "So in this case, just two,\nwe're not talking three, four,",
    "start": "921330",
    "end": "924870"
  },
  {
    "text": "just two read replicas have been added.",
    "start": "924870",
    "end": "927180"
  },
  {
    "text": "So the client application is already such",
    "start": "927180",
    "end": "929430"
  },
  {
    "text": "that separates the reads from the writes.",
    "start": "929430",
    "end": "932310"
  },
  {
    "text": "It uses one way to write to the database,",
    "start": "932310",
    "end": "934170"
  },
  {
    "text": "to the primary database,",
    "start": "934170",
    "end": "935430"
  },
  {
    "text": "and then it reads from the read replica,",
    "start": "935430",
    "end": "938670"
  },
  {
    "text": "so that's a very good position to be in,",
    "start": "938670",
    "end": "941459"
  },
  {
    "text": "because the application has\nmostly been updated already",
    "start": "941460",
    "end": "944130"
  },
  {
    "text": "to separate the reads from the writes.",
    "start": "944130",
    "end": "946260"
  },
  {
    "text": "Now, let's see how we could migrate",
    "start": "946260",
    "end": "948390"
  },
  {
    "text": "this potential architecture",
    "start": "948390",
    "end": "950100"
  },
  {
    "text": "to one that includes ElastiCache.",
    "start": "950100",
    "end": "953310"
  },
  {
    "text": "Now this is the new architecture.",
    "start": "953310",
    "end": "955740"
  },
  {
    "text": "And in this one, the Read replicas,",
    "start": "955740",
    "end": "957810"
  },
  {
    "text": "the Oracle read replicas,",
    "start": "957810",
    "end": "959190"
  },
  {
    "text": "have been replaced with ElastiCache.",
    "start": "959190",
    "end": "961770"
  },
  {
    "text": "The instance size\nactually remain the same,",
    "start": "961770",
    "end": "963690"
  },
  {
    "text": "the primary database instance\nis still the same size.",
    "start": "963690",
    "end": "966900"
  },
  {
    "text": "So the writes are not going\nto be affected, the same size,",
    "start": "966900",
    "end": "970200"
  },
  {
    "text": "but actually, a standby\ndatabase was added,",
    "start": "970200",
    "end": "974100"
  },
  {
    "text": "in a secondary AZ,",
    "start": "974100",
    "end": "975350"
  },
  {
    "text": "so now the database\nbecome highly available,",
    "start": "975350",
    "end": "978300"
  },
  {
    "text": "because it utilizes two\navailability zones, in the past,",
    "start": "978300",
    "end": "981930"
  },
  {
    "text": "the primary database, the previous slide,",
    "start": "981930",
    "end": "984720"
  },
  {
    "text": "the primary database and\nthe two read replicas",
    "start": "984720",
    "end": "986730"
  },
  {
    "text": "were in the single AZ, now,",
    "start": "986730",
    "end": "988589"
  },
  {
    "text": "we have a primary database and a standby,",
    "start": "988590",
    "end": "990990"
  },
  {
    "text": "and a secondary AZ,",
    "start": "990990",
    "end": "992100"
  },
  {
    "text": "so the database is highly\navailable, and so is the cache.",
    "start": "992100",
    "end": "995402"
  },
  {
    "text": "The reads and writes are still separated,",
    "start": "996300",
    "end": "998220"
  },
  {
    "text": "the writes are going to the database,",
    "start": "998220",
    "end": "999720"
  },
  {
    "text": "the reads are coming out of the cache.",
    "start": "999720",
    "end": "1001910"
  },
  {
    "text": "In the event the data is not in the cache,",
    "start": "1001910",
    "end": "1003889"
  },
  {
    "text": "you do a one-time read from the database,",
    "start": "1003890",
    "end": "1006080"
  },
  {
    "text": "and then you update the cache with that.",
    "start": "1006080",
    "end": "1008333"
  },
  {
    "text": "The cache itself, again,\nit's highly available,",
    "start": "1009900",
    "end": "1012020"
  },
  {
    "text": "with multiple nodes",
    "start": "1012020",
    "end": "1013610"
  },
  {
    "text": "spread out across multiple\navailability zones.",
    "start": "1013610",
    "end": "1017180"
  },
  {
    "text": "Now this, actually, I\nhave modeled in our labs.",
    "start": "1017180",
    "end": "1021230"
  },
  {
    "start": "1018000",
    "end": "1127000"
  },
  {
    "text": "So let's just see the performance gains,",
    "start": "1021230",
    "end": "1023420"
  },
  {
    "text": "and the cost difference\nthat one might anticipate.",
    "start": "1023420",
    "end": "1026243"
  },
  {
    "text": "In our testing, where we used an 80-20,",
    "start": "1027260",
    "end": "1030225"
  },
  {
    "text": "80% reads and 20% writes in our workload,",
    "start": "1030225",
    "end": "1032870"
  },
  {
    "text": "simulated workload, we\nhave simulated 400 users.",
    "start": "1032870",
    "end": "1036593"
  },
  {
    "text": "And our response was the following,",
    "start": "1037640",
    "end": "1039350"
  },
  {
    "text": "about 18,000 transactions per second, DPS",
    "start": "1039350",
    "end": "1043579"
  },
  {
    "text": "with an average response time,\nART, average response time,",
    "start": "1043580",
    "end": "1046760"
  },
  {
    "text": "of 21 milliseconds,",
    "start": "1046760",
    "end": "1048170"
  },
  {
    "text": "that's the combined average response time,",
    "start": "1048170",
    "end": "1051260"
  },
  {
    "text": "of the reads and the writes\nobserved on the client's side.",
    "start": "1051260",
    "end": "1055370"
  },
  {
    "text": "Okay, and this architecture",
    "start": "1055370",
    "end": "1056630"
  },
  {
    "text": "cost about just over $100,000, $101,000.",
    "start": "1056630",
    "end": "1061340"
  },
  {
    "text": "Now let's just see the new architecture,",
    "start": "1061340",
    "end": "1062960"
  },
  {
    "text": "how does that breaks down?",
    "start": "1062960",
    "end": "1064399"
  },
  {
    "text": "So in the new architecture,",
    "start": "1064400",
    "end": "1065840"
  },
  {
    "text": "we were able to push up the TPS to 24,000,",
    "start": "1065840",
    "end": "1070840"
  },
  {
    "text": "that's a 33% boost in performance.",
    "start": "1071090",
    "end": "1074360"
  },
  {
    "text": "And the average response time\nwent down to 12 milliseconds,",
    "start": "1074360",
    "end": "1077210"
  },
  {
    "text": "again, the combined read\nand write response time,",
    "start": "1077210",
    "end": "1079880"
  },
  {
    "text": "that's a 42% reduction,\nlet's look at the cost.",
    "start": "1079880",
    "end": "1083300"
  },
  {
    "text": "The cost went down by 20%.",
    "start": "1083300",
    "end": "1086870"
  },
  {
    "text": "Now let's imagine that\nyou haven't done this,",
    "start": "1086870",
    "end": "1089450"
  },
  {
    "text": "and your demand is to keep increasing",
    "start": "1089450",
    "end": "1091740"
  },
  {
    "text": "the request on the database",
    "start": "1092588",
    "end": "1093620"
  },
  {
    "text": "because your application has scaled,",
    "start": "1093620",
    "end": "1096080"
  },
  {
    "text": "perhaps using containerized\nsolutions, or something similar,",
    "start": "1096080",
    "end": "1099230"
  },
  {
    "text": "you can always increase your application.",
    "start": "1099230",
    "end": "1101210"
  },
  {
    "text": "And you had to add another\nread replica to your database.",
    "start": "1101210",
    "end": "1104870"
  },
  {
    "text": "So in that case, your\ncost would be even higher",
    "start": "1104870",
    "end": "1107090"
  },
  {
    "text": "to achieve the similar\n24,000 requests per second",
    "start": "1107090",
    "end": "1111200"
  },
  {
    "text": "on your database side,",
    "start": "1111200",
    "end": "1112130"
  },
  {
    "text": "so in that case, your\ndatabase cost would go",
    "start": "1112130",
    "end": "1114350"
  },
  {
    "text": "probably in the 130,000 range,",
    "start": "1114350",
    "end": "1116360"
  },
  {
    "text": "so, your costs are going to be even lower,",
    "start": "1116360",
    "end": "1118580"
  },
  {
    "text": "so, in this case, you can\nkeep scaling your application,",
    "start": "1118580",
    "end": "1122240"
  },
  {
    "text": "but not your database cost,",
    "start": "1122240",
    "end": "1123679"
  },
  {
    "text": "your database cost will remain the same.",
    "start": "1123680",
    "end": "1125680"
  },
  {
    "start": "1127000",
    "end": "1151000"
  },
  {
    "text": "So let's have a quick recap\nabout the database workloads",
    "start": "1127160",
    "end": "1130610"
  },
  {
    "text": "that can benefit from this.",
    "start": "1130610",
    "end": "1132049"
  },
  {
    "text": "Well, you will have a\nboost in performance,",
    "start": "1132050",
    "end": "1135020"
  },
  {
    "text": "and a much lower\napplication response time,",
    "start": "1135020",
    "end": "1138500"
  },
  {
    "text": "as this last slide has demonstrated.",
    "start": "1138500",
    "end": "1141170"
  },
  {
    "text": "The response time went down by 42%.",
    "start": "1141170",
    "end": "1143420"
  },
  {
    "text": "You could offload all those I/O work",
    "start": "1143420",
    "end": "1145550"
  },
  {
    "text": "from the primary database\ninto a caching service,",
    "start": "1145550",
    "end": "1148220"
  },
  {
    "text": "and scale at the much lower cost.",
    "start": "1148220",
    "end": "1150473"
  },
  {
    "start": "1151000",
    "end": "1204000"
  },
  {
    "text": "Here are some QR codes,",
    "start": "1151640",
    "end": "1153560"
  },
  {
    "text": "to read up more on Amazon ElastiCache.",
    "start": "1153560",
    "end": "1156110"
  },
  {
    "text": "There's a QR code to a blog",
    "start": "1156110",
    "end": "1158059"
  },
  {
    "text": "that will detail you how\nto set up your own testing",
    "start": "1158060",
    "end": "1161030"
  },
  {
    "text": "if you want to test on your own,",
    "start": "1161030",
    "end": "1162830"
  },
  {
    "text": "to see what kind of performance boost",
    "start": "1162830",
    "end": "1164510"
  },
  {
    "text": "and response time you might\nsee, and cost savings.",
    "start": "1164510",
    "end": "1167870"
  },
  {
    "text": "There's a blog there that\ngoes into a lot of details.",
    "start": "1167870",
    "end": "1171260"
  },
  {
    "text": "And some learning path",
    "start": "1171260",
    "end": "1172250"
  },
  {
    "text": "to learn more about AWS ElastiCache.",
    "start": "1172250",
    "end": "1175040"
  },
  {
    "text": "And here are the QR codes",
    "start": "1175040",
    "end": "1176630"
  },
  {
    "text": "about the tools and the products\nthat I mentioned before,",
    "start": "1176630",
    "end": "1179180"
  },
  {
    "text": "such as CloudWatch, Performance Insight,",
    "start": "1179180",
    "end": "1181640"
  },
  {
    "text": "and Database Current State Investigation,",
    "start": "1181640",
    "end": "1183770"
  },
  {
    "text": "or DB CSI, the Oracle-specific workloads",
    "start": "1183770",
    "end": "1186770"
  },
  {
    "text": "that helps you to migrate\nfrom on-prem to the AWS Cloud.",
    "start": "1186770",
    "end": "1190973"
  },
  {
    "text": "This concludes today's video.",
    "start": "1192290",
    "end": "1193940"
  },
  {
    "text": "Here's my contact information or my team",
    "start": "1193940",
    "end": "1196669"
  },
  {
    "text": "if you'd like to learn more.",
    "start": "1196670",
    "end": "1198083"
  }
]