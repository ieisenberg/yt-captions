[
  {
    "start": "0",
    "end": "23000"
  },
  {
    "text": "hello everybody my name is Sam I'm a",
    "start": "420",
    "end": "2879"
  },
  {
    "text": "swimming essay at AWS today I'll be",
    "start": "2879",
    "end": "5220"
  },
  {
    "text": "discussing about Amazon msk tier storage",
    "start": "5220",
    "end": "9740"
  },
  {
    "text": "in this session I will cover the key",
    "start": "10260",
    "end": "12840"
  },
  {
    "text": "Concepts and the use case of Apache",
    "start": "12840",
    "end": "14580"
  },
  {
    "text": "Kafka and I will provide some examples",
    "start": "14580",
    "end": "17699"
  },
  {
    "text": "of recent Innovation and then we'll Deep",
    "start": "17699",
    "end": "20400"
  },
  {
    "text": "dive on msk tier storage feature",
    "start": "20400",
    "end": "23939"
  },
  {
    "start": "23000",
    "end": "23000"
  },
  {
    "text": "let's start by talking about Apache",
    "start": "23939",
    "end": "26580"
  },
  {
    "text": "Kafka so you may already know that Kafka",
    "start": "26580",
    "end": "29400"
  },
  {
    "text": "is an open source distributed event",
    "start": "29400",
    "end": "31019"
  },
  {
    "text": "streaming platform that's used by",
    "start": "31019",
    "end": "33420"
  },
  {
    "text": "thousands of companies all around the",
    "start": "33420",
    "end": "35340"
  },
  {
    "text": "world",
    "start": "35340",
    "end": "36360"
  },
  {
    "text": "the reason for its incredible growth in",
    "start": "36360",
    "end": "38880"
  },
  {
    "text": "popularity is due to its wide variety of",
    "start": "38880",
    "end": "41879"
  },
  {
    "text": "use cases where Kafka is used as a major",
    "start": "41879",
    "end": "44460"
  },
  {
    "text": "component",
    "start": "44460",
    "end": "46260"
  },
  {
    "text": "Kafka is incredibly useful for many",
    "start": "46260",
    "end": "48840"
  },
  {
    "text": "different Industries and use cases such",
    "start": "48840",
    "end": "51059"
  },
  {
    "text": "as log monitoring real-time thread",
    "start": "51059",
    "end": "53820"
  },
  {
    "text": "detection connected device monitoring",
    "start": "53820",
    "end": "55860"
  },
  {
    "text": "implementing micro service based",
    "start": "55860",
    "end": "57899"
  },
  {
    "text": "architecture streaming ETL messaging and",
    "start": "57899",
    "end": "60840"
  },
  {
    "text": "much more",
    "start": "60840",
    "end": "63199"
  },
  {
    "start": "63000",
    "end": "63000"
  },
  {
    "text": "is very popular running Kafka is",
    "start": "64580",
    "end": "67500"
  },
  {
    "text": "challenging in a self-management",
    "start": "67500",
    "end": "69780"
  },
  {
    "text": "Kafka has many configuration options in",
    "start": "69780",
    "end": "72260"
  },
  {
    "text": "parameters that can affect its",
    "start": "72260",
    "end": "75000"
  },
  {
    "text": "performance and the behavior and",
    "start": "75000",
    "end": "76920"
  },
  {
    "text": "managing these configuration can be very",
    "start": "76920",
    "end": "78840"
  },
  {
    "text": "challenging",
    "start": "78840",
    "end": "80580"
  },
  {
    "text": "not only that ensuring High availability",
    "start": "80580",
    "end": "83340"
  },
  {
    "text": "is critical for many Kafka deployment",
    "start": "83340",
    "end": "86040"
  },
  {
    "text": "and downtime can be unacceptable in",
    "start": "86040",
    "end": "88439"
  },
  {
    "text": "Mission critical application",
    "start": "88439",
    "end": "90299"
  },
  {
    "text": "and ensuring High availability requires",
    "start": "90299",
    "end": "92640"
  },
  {
    "text": "careful planning and implementation",
    "start": "92640",
    "end": "96560"
  },
  {
    "text": "integrating Kafka with other systems and",
    "start": "96600",
    "end": "99119"
  },
  {
    "text": "tools can be challenging as well",
    "start": "99119",
    "end": "102360"
  },
  {
    "start": "102000",
    "end": "102000"
  },
  {
    "text": "and you can avoid all those challenges",
    "start": "102360",
    "end": "104880"
  },
  {
    "text": "by moving to a managed Kafka service on",
    "start": "104880",
    "end": "107520"
  },
  {
    "text": "AWS",
    "start": "107520",
    "end": "109500"
  },
  {
    "text": "so when considering a managed Kafka",
    "start": "109500",
    "end": "112259"
  },
  {
    "text": "service there are three overreaching",
    "start": "112259",
    "end": "114000"
  },
  {
    "text": "benefit that you can achieve",
    "start": "114000",
    "end": "116460"
  },
  {
    "text": "the first key benefit of manage Kafka",
    "start": "116460",
    "end": "119220"
  },
  {
    "text": "service provides is that it can increase",
    "start": "119220",
    "end": "122640"
  },
  {
    "text": "the efficiency of your Kafka environment",
    "start": "122640",
    "end": "124500"
  },
  {
    "text": "by automating undifferentiated",
    "start": "124500",
    "end": "127020"
  },
  {
    "text": "administrative tasks and removing the",
    "start": "127020",
    "end": "129599"
  },
  {
    "text": "human error",
    "start": "129599",
    "end": "131400"
  },
  {
    "text": "with manage Kafka you can realize",
    "start": "131400",
    "end": "133319"
  },
  {
    "text": "benefits such as improved performance",
    "start": "133319",
    "end": "136319"
  },
  {
    "text": "scalability durability and much more",
    "start": "136319",
    "end": "141060"
  },
  {
    "text": "second by",
    "start": "141060",
    "end": "143160"
  },
  {
    "text": "improving the efficiency of your Kafka",
    "start": "143160",
    "end": "145440"
  },
  {
    "text": "environment you are able to reduce the",
    "start": "145440",
    "end": "147180"
  },
  {
    "text": "cost for example when it comes to a",
    "start": "147180",
    "end": "149940"
  },
  {
    "text": "scaling your cluster if you have a spiky",
    "start": "149940",
    "end": "152640"
  },
  {
    "text": "workload instead of constantly over",
    "start": "152640",
    "end": "155220"
  },
  {
    "text": "provisioning your Kafka cluster for Peak",
    "start": "155220",
    "end": "157860"
  },
  {
    "text": "capacity you can use Amazon msk",
    "start": "157860",
    "end": "160020"
  },
  {
    "text": "serverless for instance scaling",
    "start": "160020",
    "end": "163140"
  },
  {
    "text": "and finally with a managed service you",
    "start": "163140",
    "end": "166019"
  },
  {
    "text": "are freeing up your team resources to",
    "start": "166019",
    "end": "168060"
  },
  {
    "text": "focus on innovating on behalf of your",
    "start": "168060",
    "end": "171120"
  },
  {
    "text": "own customer",
    "start": "171120",
    "end": "173599"
  },
  {
    "text": "and the managed service I'm referring",
    "start": "174959",
    "end": "176879"
  },
  {
    "text": "here is Amazon msk",
    "start": "176879",
    "end": "179040"
  },
  {
    "text": "Amazon whiskey is a fully managed apogee",
    "start": "179040",
    "end": "181319"
  },
  {
    "text": "Kafka service",
    "start": "181319",
    "end": "182580"
  },
  {
    "text": "you get capability like automated",
    "start": "182580",
    "end": "185280"
  },
  {
    "text": "provisioning configuring your Kafka",
    "start": "185280",
    "end": "187440"
  },
  {
    "text": "cluster you can also provide custom",
    "start": "187440",
    "end": "190260"
  },
  {
    "text": "configuration based on your use case",
    "start": "190260",
    "end": "193379"
  },
  {
    "text": "the service is fully competable with",
    "start": "193379",
    "end": "195659"
  },
  {
    "text": "open source Apache Kafka so migrating",
    "start": "195659",
    "end": "199739"
  },
  {
    "text": "your Kafka workload to Amazon mski is",
    "start": "199739",
    "end": "201720"
  },
  {
    "text": "pretty easy",
    "start": "201720",
    "end": "202980"
  },
  {
    "text": "Amazon Scholars runs within a managed",
    "start": "202980",
    "end": "206220"
  },
  {
    "text": "VPC and provide multiple authentication",
    "start": "206220",
    "end": "208560"
  },
  {
    "text": "mechanism to securely connect with",
    "start": "208560",
    "end": "211140"
  },
  {
    "text": "Apache Kafka",
    "start": "211140",
    "end": "213900"
  },
  {
    "text": "with pay as you go pricing running Kafka",
    "start": "213900",
    "end": "216840"
  },
  {
    "text": "on Amazon msk is low as 1 13 the cost of",
    "start": "216840",
    "end": "221220"
  },
  {
    "text": "other many service providers",
    "start": "221220",
    "end": "224220"
  },
  {
    "text": "Amazon msk has two cluster type",
    "start": "224220",
    "end": "226319"
  },
  {
    "text": "provision mood and serverless and with",
    "start": "226319",
    "end": "229200"
  },
  {
    "text": "provision cluster type you specify how",
    "start": "229200",
    "end": "232319"
  },
  {
    "text": "many Brokers that you need how much",
    "start": "232319",
    "end": "234060"
  },
  {
    "text": "storage that you need and also other",
    "start": "234060",
    "end": "236400"
  },
  {
    "text": "Kafka configuration that you want to",
    "start": "236400",
    "end": "239099"
  },
  {
    "text": "apply based on your use case",
    "start": "239099",
    "end": "242540"
  },
  {
    "text": "on the other hand with serverless",
    "start": "242640",
    "end": "244680"
  },
  {
    "text": "cluster type for Amazon msk",
    "start": "244680",
    "end": "247500"
  },
  {
    "text": "um it is easy for you to run Apache",
    "start": "247500",
    "end": "249239"
  },
  {
    "text": "Kafka without having to manage or scale",
    "start": "249239",
    "end": "251939"
  },
  {
    "text": "the cluster capacity",
    "start": "251939",
    "end": "253920"
  },
  {
    "text": "Amazon music serverless automatically",
    "start": "253920",
    "end": "256019"
  },
  {
    "text": "provision and scale compute and storage",
    "start": "256019",
    "end": "258239"
  },
  {
    "text": "resources",
    "start": "258239",
    "end": "260400"
  },
  {
    "text": "so you can use Apache half Count On",
    "start": "260400",
    "end": "262079"
  },
  {
    "text": "Demand basis and msk serverless offers",
    "start": "262079",
    "end": "265259"
  },
  {
    "text": "throughput based pricing so you pay for",
    "start": "265259",
    "end": "268860"
  },
  {
    "text": "the data volume that you stream and",
    "start": "268860",
    "end": "270419"
  },
  {
    "text": "retain and you don't need to worry about",
    "start": "270419",
    "end": "272639"
  },
  {
    "text": "idle broker and storage capacity",
    "start": "272639",
    "end": "276860"
  },
  {
    "start": "277000",
    "end": "277000"
  },
  {
    "text": "and these are the core capability when",
    "start": "280259",
    "end": "282360"
  },
  {
    "text": "you are using Amazon msk in terms of",
    "start": "282360",
    "end": "285120"
  },
  {
    "text": "compatibility and elasticity as I",
    "start": "285120",
    "end": "287639"
  },
  {
    "text": "mentioned earlier the service is fully",
    "start": "287639",
    "end": "289800"
  },
  {
    "text": "competable with open source Apache Kafka",
    "start": "289800",
    "end": "292139"
  },
  {
    "text": "and its tool set you can apply custom",
    "start": "292139",
    "end": "294840"
  },
  {
    "text": "configuration based on your use case it",
    "start": "294840",
    "end": "297600"
  },
  {
    "text": "uses a rolling version of grid based",
    "start": "297600",
    "end": "300000"
  },
  {
    "text": "practices to maintain High availability",
    "start": "300000",
    "end": "302479"
  },
  {
    "text": "throughout the version upgrade you can",
    "start": "302479",
    "end": "305400"
  },
  {
    "text": "enable auto scaling for storage scaling",
    "start": "305400",
    "end": "307680"
  },
  {
    "text": "you can also do broker scaling",
    "start": "307680",
    "end": "310620"
  },
  {
    "text": "vertically and horizontally",
    "start": "310620",
    "end": "312479"
  },
  {
    "text": "and for Kafka authentication you can",
    "start": "312479",
    "end": "314880"
  },
  {
    "text": "enable multiple authentication mechanism",
    "start": "314880",
    "end": "316800"
  },
  {
    "text": "within the same cluster including IM TLS",
    "start": "316800",
    "end": "320699"
  },
  {
    "text": "satella scrim and Amazon msk integrates",
    "start": "320699",
    "end": "323699"
  },
  {
    "text": "with an AWS Key Management Service to",
    "start": "323699",
    "end": "326220"
  },
  {
    "text": "offer server-side encryption",
    "start": "326220",
    "end": "329280"
  },
  {
    "text": "and by the way Amazon msq always encrypt",
    "start": "329280",
    "end": "331860"
  },
  {
    "text": "your data at rest and the cluster can be",
    "start": "331860",
    "end": "334680"
  },
  {
    "text": "deployed across two or three",
    "start": "334680",
    "end": "336660"
  },
  {
    "text": "availability Zone",
    "start": "336660",
    "end": "339479"
  },
  {
    "text": "the service is a part of AWS compliance",
    "start": "339479",
    "end": "341820"
  },
  {
    "text": "program these include HIPAA PCI ISO and",
    "start": "341820",
    "end": "345240"
  },
  {
    "text": "SOC with msk serverless you can",
    "start": "345240",
    "end": "348360"
  },
  {
    "text": "instantly scale and msk connect provides",
    "start": "348360",
    "end": "351539"
  },
  {
    "text": "a managed Kafka connect environment to",
    "start": "351539",
    "end": "354120"
  },
  {
    "text": "host open source apogee Kafka connectors",
    "start": "354120",
    "end": "358020"
  },
  {
    "text": "in addition with Ms KTR storage you get",
    "start": "358020",
    "end": "360840"
  },
  {
    "text": "virtually unlimited capacity for Kafka",
    "start": "360840",
    "end": "363120"
  },
  {
    "text": "storage",
    "start": "363120",
    "end": "365039"
  },
  {
    "text": "not only that the services integration",
    "start": "365039",
    "end": "367199"
  },
  {
    "text": "with many other AWS Services here's I",
    "start": "367199",
    "end": "370440"
  },
  {
    "text": "just listed few",
    "start": "370440",
    "end": "372080"
  },
  {
    "text": "for example you can use AWS database",
    "start": "372080",
    "end": "375300"
  },
  {
    "text": "migration Services DMS for change data",
    "start": "375300",
    "end": "378600"
  },
  {
    "text": "capture from transactional database and",
    "start": "378600",
    "end": "380880"
  },
  {
    "text": "send it to Amazon msk",
    "start": "380880",
    "end": "383479"
  },
  {
    "text": "AWS Lambda and Kinesis data analytics",
    "start": "383479",
    "end": "386160"
  },
  {
    "text": "for Apache flying Amazon redshift Amazon",
    "start": "386160",
    "end": "388440"
  },
  {
    "text": "Athena has inbuilt integration to read",
    "start": "388440",
    "end": "391860"
  },
  {
    "text": "data from Amazon msk",
    "start": "391860",
    "end": "394860"
  },
  {
    "text": "AWS iot core can send iot data to Amazon",
    "start": "394860",
    "end": "397680"
  },
  {
    "text": "msk",
    "start": "397680",
    "end": "400280"
  },
  {
    "text": "and for monitoring security deployment",
    "start": "402060",
    "end": "404940"
  },
  {
    "text": "and governance the service has",
    "start": "404940",
    "end": "406800"
  },
  {
    "text": "integration with Amazon cloud words AWS",
    "start": "406800",
    "end": "409740"
  },
  {
    "text": "IM AWS cloud formation AWS KMS AWS",
    "start": "409740",
    "end": "413940"
  },
  {
    "text": "certificate manager and glue schema",
    "start": "413940",
    "end": "415979"
  },
  {
    "text": "registry",
    "start": "415979",
    "end": "418400"
  },
  {
    "start": "418000",
    "end": "418000"
  },
  {
    "text": "I also want to highlight some of the",
    "start": "419580",
    "end": "421259"
  },
  {
    "text": "recent feature releases on AWS which is",
    "start": "421259",
    "end": "423780"
  },
  {
    "text": "related to Amazon msk",
    "start": "423780",
    "end": "426539"
  },
  {
    "text": "we added Kafka 3.x version support field",
    "start": "426539",
    "end": "429900"
  },
  {
    "text": "gym compliance and Athena connector for",
    "start": "429900",
    "end": "431759"
  },
  {
    "text": "Amazon msk",
    "start": "431759",
    "end": "433020"
  },
  {
    "text": "and when you are doing a Sim processing",
    "start": "433020",
    "end": "435720"
  },
  {
    "text": "with AWS lambdam and AWS Lambda now",
    "start": "435720",
    "end": "438960"
  },
  {
    "text": "support Max batching window and which is",
    "start": "438960",
    "end": "441720"
  },
  {
    "text": "a new feature that allows you to fine",
    "start": "441720",
    "end": "445500"
  },
  {
    "text": "tune your Lambda invocation for cost",
    "start": "445500",
    "end": "447240"
  },
  {
    "text": "optimization",
    "start": "447240",
    "end": "449819"
  },
  {
    "text": "so for example with match batching",
    "start": "449819",
    "end": "452639"
  },
  {
    "text": "window you can wait as long as 300",
    "start": "452639",
    "end": "455639"
  },
  {
    "text": "seconds to build a batch before you",
    "start": "455639",
    "end": "457500"
  },
  {
    "text": "invoke the Lambda function",
    "start": "457500",
    "end": "460819"
  },
  {
    "text": "previously Lambda used to scale up",
    "start": "460940",
    "end": "463319"
  },
  {
    "text": "consumer every 15 minutes now when you",
    "start": "463319",
    "end": "466680"
  },
  {
    "text": "use Lambda as a Kafka consumer it starts",
    "start": "466680",
    "end": "469259"
  },
  {
    "text": "with one consumer and check the offset",
    "start": "469259",
    "end": "471720"
  },
  {
    "text": "lag metrics every minute and scale up",
    "start": "471720",
    "end": "474479"
  },
  {
    "text": "and down every three minutes",
    "start": "474479",
    "end": "477360"
  },
  {
    "text": "AWS blue is streaming ETL added support",
    "start": "477360",
    "end": "480180"
  },
  {
    "text": "for auto decompression for B zip Z zip",
    "start": "480180",
    "end": "484500"
  },
  {
    "text": "Snappy and many other compression type",
    "start": "484500",
    "end": "486900"
  },
  {
    "text": "and glue schema registry added support",
    "start": "486900",
    "end": "489240"
  },
  {
    "text": "for Proto Buffs",
    "start": "489240",
    "end": "491400"
  },
  {
    "text": "so with that now glue schema is to",
    "start": "491400",
    "end": "493979"
  },
  {
    "text": "support Avro protobuf and Json schema",
    "start": "493979",
    "end": "498660"
  },
  {
    "text": "recently msk serverless added support",
    "start": "498660",
    "end": "500879"
  },
  {
    "text": "for 2400 liter partition on a single",
    "start": "500879",
    "end": "503520"
  },
  {
    "text": "serverless cluster and previously it was",
    "start": "503520",
    "end": "506460"
  },
  {
    "text": "120 partitions per cluster",
    "start": "506460",
    "end": "509819"
  },
  {
    "text": "finally with a private DNS endpoint",
    "start": "509819",
    "end": "512399"
  },
  {
    "text": "support in msk Connect you can configure",
    "start": "512399",
    "end": "515219"
  },
  {
    "text": "connected to reference public and",
    "start": "515219",
    "end": "517020"
  },
  {
    "text": "private domain names",
    "start": "517020",
    "end": "519860"
  },
  {
    "text": "as I mentioned earlier Kafka is a",
    "start": "520440",
    "end": "522899"
  },
  {
    "text": "popular because it can handle both",
    "start": "522899",
    "end": "525060"
  },
  {
    "text": "real-time and historical data",
    "start": "525060",
    "end": "527820"
  },
  {
    "text": "and that means you can use historic data",
    "start": "527820",
    "end": "531480"
  },
  {
    "text": "to train machine learning models and use",
    "start": "531480",
    "end": "533640"
  },
  {
    "text": "those model to make prediction in real",
    "start": "533640",
    "end": "536279"
  },
  {
    "text": "time",
    "start": "536279",
    "end": "538160"
  },
  {
    "text": "also you can easily recompute past",
    "start": "538160",
    "end": "541019"
  },
  {
    "text": "results when the application logic",
    "start": "541019",
    "end": "542760"
  },
  {
    "text": "changes",
    "start": "542760",
    "end": "545120"
  },
  {
    "text": "these use cases often require data to be",
    "start": "545160",
    "end": "547320"
  },
  {
    "text": "stored for weeks month",
    "start": "547320",
    "end": "550260"
  },
  {
    "text": "or even years",
    "start": "550260",
    "end": "552360"
  },
  {
    "text": "and Apache Kafka is well suited to",
    "start": "552360",
    "end": "555060"
  },
  {
    "text": "handle them for example by configuring",
    "start": "555060",
    "end": "557940"
  },
  {
    "text": "the retention policy data can be",
    "start": "557940",
    "end": "559980"
  },
  {
    "text": "retained",
    "start": "559980",
    "end": "561240"
  },
  {
    "text": "in Kafka cluster for as long as you need",
    "start": "561240",
    "end": "566300"
  },
  {
    "start": "567000",
    "end": "567000"
  },
  {
    "text": "all the retaining data in Kafka cluster",
    "start": "569640",
    "end": "571680"
  },
  {
    "text": "has its own benefits such as real-time",
    "start": "571680",
    "end": "574440"
  },
  {
    "text": "data processing it can also be expensive",
    "start": "574440",
    "end": "577320"
  },
  {
    "text": "due to the tightly coupled nature of a",
    "start": "577320",
    "end": "579540"
  },
  {
    "text": "storage and compute in the cluster",
    "start": "579540",
    "end": "582120"
  },
  {
    "text": "skinning Up Storage by adding more",
    "start": "582120",
    "end": "584880"
  },
  {
    "text": "broker often lead to wastage of compute",
    "start": "584880",
    "end": "587580"
  },
  {
    "text": "resources like CPU and the memory",
    "start": "587580",
    "end": "590100"
  },
  {
    "text": "additionally a large cluster with more",
    "start": "590100",
    "end": "592620"
  },
  {
    "text": "node can result in increased operational",
    "start": "592620",
    "end": "595019"
  },
  {
    "text": "complexity and longer recovery time when",
    "start": "595019",
    "end": "598440"
  },
  {
    "text": "a broker fails",
    "start": "598440",
    "end": "601279"
  },
  {
    "text": "So to avoid such issue you can move data",
    "start": "601320",
    "end": "604740"
  },
  {
    "text": "to Amazon S3 for long term access",
    "start": "604740",
    "end": "607399"
  },
  {
    "text": "with cost effective storage classes",
    "start": "607399",
    "end": "610080"
  },
  {
    "text": "available in Amazon S3",
    "start": "610080",
    "end": "611880"
  },
  {
    "text": "however this approach comes with its own",
    "start": "611880",
    "end": "614459"
  },
  {
    "text": "set of challenges as well",
    "start": "614459",
    "end": "616680"
  },
  {
    "text": "you'll need to build and maintain an",
    "start": "616680",
    "end": "618480"
  },
  {
    "text": "architecture for data movement to a",
    "start": "618480",
    "end": "620940"
  },
  {
    "text": "different data store and additionally",
    "start": "620940",
    "end": "623180"
  },
  {
    "text": "different data processing logic needs to",
    "start": "623180",
    "end": "626519"
  },
  {
    "text": "be developed using different apis for",
    "start": "626519",
    "end": "628620"
  },
  {
    "text": "consuming data for example Kafka API is",
    "start": "628620",
    "end": "632600"
  },
  {
    "text": "you're going to use for streaming data",
    "start": "632600",
    "end": "635160"
  },
  {
    "text": "Amazon S3 API you'll you will be",
    "start": "635160",
    "end": "638100"
  },
  {
    "text": "required for historic data",
    "start": "638100",
    "end": "641839"
  },
  {
    "start": "643000",
    "end": "643000"
  },
  {
    "text": "to overcome all those challenges and to",
    "start": "643620",
    "end": "646079"
  },
  {
    "text": "retain data longer in Kafka you can use",
    "start": "646079",
    "end": "648120"
  },
  {
    "text": "Ms KTR storage feature",
    "start": "648120",
    "end": "650640"
  },
  {
    "text": "and this feature offers a virtually",
    "start": "650640",
    "end": "653220"
  },
  {
    "text": "unlimited and Low Cost Storage tier for",
    "start": "653220",
    "end": "656160"
  },
  {
    "text": "Amazon msk",
    "start": "656160",
    "end": "658140"
  },
  {
    "text": "making it simpler and more cost",
    "start": "658140",
    "end": "660240"
  },
  {
    "text": "effective for you to build this",
    "start": "660240",
    "end": "662160"
  },
  {
    "text": "streaming data application",
    "start": "662160",
    "end": "664079"
  },
  {
    "text": "it is a cost effective solution for",
    "start": "664079",
    "end": "666360"
  },
  {
    "text": "running Kafka workload which enables you",
    "start": "666360",
    "end": "669060"
  },
  {
    "text": "to store data in Apache Kafka without",
    "start": "669060",
    "end": "671360"
  },
  {
    "text": "worrying about limits",
    "start": "671360",
    "end": "674640"
  },
  {
    "text": "with msktl storage you can effectively",
    "start": "674640",
    "end": "677399"
  },
  {
    "text": "balance your performance and the cost",
    "start": "677399",
    "end": "679100"
  },
  {
    "text": "this frees you from making hard",
    "start": "679100",
    "end": "681899"
  },
  {
    "text": "trade-off between supporting the data",
    "start": "681899",
    "end": "683940"
  },
  {
    "text": "retention need of your application theme",
    "start": "683940",
    "end": "685560"
  },
  {
    "text": "and the operational complexity that",
    "start": "685560",
    "end": "688200"
  },
  {
    "text": "comes with it",
    "start": "688200",
    "end": "690779"
  },
  {
    "text": "you can use the same code to process",
    "start": "690779",
    "end": "692880"
  },
  {
    "text": "both real-time and historical data that",
    "start": "692880",
    "end": "696300"
  },
  {
    "text": "can minimize the Redundant workflow and",
    "start": "696300",
    "end": "698279"
  },
  {
    "text": "can simplify your architecture",
    "start": "698279",
    "end": "701339"
  },
  {
    "text": "and the best part is there is no",
    "start": "701339",
    "end": "703200"
  },
  {
    "text": "additional infrastructure to manage when",
    "start": "703200",
    "end": "705300"
  },
  {
    "text": "you are using this feature making it",
    "start": "705300",
    "end": "707519"
  },
  {
    "text": "even easier to use",
    "start": "707519",
    "end": "710640"
  },
  {
    "start": "710000",
    "end": "710000"
  },
  {
    "text": "you can easily enable theater storage",
    "start": "710640",
    "end": "712380"
  },
  {
    "text": "feature on Amazon msk to enable tier",
    "start": "712380",
    "end": "714959"
  },
  {
    "text": "storage on your existing cluster upgrade",
    "start": "714959",
    "end": "717360"
  },
  {
    "text": "your msk cluster to Kafka version",
    "start": "717360",
    "end": "720320"
  },
  {
    "text": "2.8.2 Point tiered and then choose tier",
    "start": "720320",
    "end": "723480"
  },
  {
    "text": "storage and EBS storage as your cluster",
    "start": "723480",
    "end": "725880"
  },
  {
    "text": "is storage mode",
    "start": "725880",
    "end": "727500"
  },
  {
    "text": "you can upgrade your cluster using msk",
    "start": "727500",
    "end": "729899"
  },
  {
    "text": "console and awcli",
    "start": "729899",
    "end": "732420"
  },
  {
    "text": "after you enable TRS storage on a",
    "start": "732420",
    "end": "734339"
  },
  {
    "text": "cluster you can choose individual topic",
    "start": "734339",
    "end": "736620"
  },
  {
    "text": "on a cluster to enable Tierra storage on",
    "start": "736620",
    "end": "739380"
  },
  {
    "text": "their specific topic using Kafka CLI",
    "start": "739380",
    "end": "743459"
  },
  {
    "text": "here I have two examples of how you can",
    "start": "743459",
    "end": "746519"
  },
  {
    "text": "do that so on the first example I am",
    "start": "746519",
    "end": "749700"
  },
  {
    "text": "enabling TRS storage on an existing",
    "start": "749700",
    "end": "752339"
  },
  {
    "text": "Kafka topic with two hours local",
    "start": "752339",
    "end": "754980"
  },
  {
    "text": "retention and seven days tier storage",
    "start": "754980",
    "end": "757860"
  },
  {
    "text": "retention and on the second example I am",
    "start": "757860",
    "end": "760800"
  },
  {
    "text": "creating a new topic enabling",
    "start": "760800",
    "end": "763200"
  },
  {
    "text": "theoristers with two hours local",
    "start": "763200",
    "end": "765959"
  },
  {
    "text": "retention and seven days tier storage",
    "start": "765959",
    "end": "768839"
  },
  {
    "text": "detention",
    "start": "768839",
    "end": "771320"
  },
  {
    "text": "now I want to dive a bit more about how",
    "start": "771320",
    "end": "774839"
  },
  {
    "text": "a musketeer storage works",
    "start": "774839",
    "end": "778339"
  },
  {
    "text": "but before I do that let's take a look",
    "start": "779639",
    "end": "781860"
  },
  {
    "text": "how Kafka stores data in disk and how",
    "start": "781860",
    "end": "784560"
  },
  {
    "text": "data expires from Kafka",
    "start": "784560",
    "end": "786720"
  },
  {
    "text": "this concept is very important to",
    "start": "786720",
    "end": "788519"
  },
  {
    "text": "understand for my next discussion",
    "start": "788519",
    "end": "791279"
  },
  {
    "text": "as you know Kafka is a distributed",
    "start": "791279",
    "end": "793139"
  },
  {
    "text": "system where it partitions the topic",
    "start": "793139",
    "end": "795240"
  },
  {
    "text": "data across multiple Brokers within the",
    "start": "795240",
    "end": "798000"
  },
  {
    "text": "same cluster",
    "start": "798000",
    "end": "800660"
  },
  {
    "text": "which means a topic can have multiple",
    "start": "800940",
    "end": "803220"
  },
  {
    "text": "partitions and Kafka broker is split",
    "start": "803220",
    "end": "806040"
  },
  {
    "text": "each partition into segment",
    "start": "806040",
    "end": "808920"
  },
  {
    "text": "each segment is stored in a single data",
    "start": "808920",
    "end": "811320"
  },
  {
    "text": "file on the disk attached to the broker",
    "start": "811320",
    "end": "814260"
  },
  {
    "text": "and by default each segment contains one",
    "start": "814260",
    "end": "817260"
  },
  {
    "text": "gigabyte of data or a week of data",
    "start": "817260",
    "end": "819899"
  },
  {
    "text": "whichever limit is attained first",
    "start": "819899",
    "end": "823019"
  },
  {
    "text": "when the Kafka broker receives data for",
    "start": "823019",
    "end": "825480"
  },
  {
    "text": "a partition as the segment limit is",
    "start": "825480",
    "end": "827880"
  },
  {
    "text": "reached it will close the file and start",
    "start": "827880",
    "end": "830940"
  },
  {
    "text": "a new one",
    "start": "830940",
    "end": "832320"
  },
  {
    "text": "and your right will always goes to the",
    "start": "832320",
    "end": "835260"
  },
  {
    "text": "active signal",
    "start": "835260",
    "end": "837120"
  },
  {
    "text": "when it has",
    "start": "837120",
    "end": "839060"
  },
  {
    "text": "reached or exceed the retention time",
    "start": "839060",
    "end": "841560"
  },
  {
    "text": "limit",
    "start": "841560",
    "end": "842579"
  },
  {
    "text": "Kafka will eventually delete the closed",
    "start": "842579",
    "end": "844560"
  },
  {
    "text": "segment",
    "start": "844560",
    "end": "846000"
  },
  {
    "text": "and I hope this quick summary will help",
    "start": "846000",
    "end": "850320"
  },
  {
    "text": "you to understand how data lifecycle",
    "start": "850320",
    "end": "852000"
  },
  {
    "text": "Works in Kafka",
    "start": "852000",
    "end": "853380"
  },
  {
    "text": "so with that in mind let's take a look",
    "start": "853380",
    "end": "855540"
  },
  {
    "text": "how data life cycle works in a msktl",
    "start": "855540",
    "end": "858600"
  },
  {
    "text": "storage cluster",
    "start": "858600",
    "end": "861500"
  },
  {
    "start": "861000",
    "end": "861000"
  },
  {
    "text": "in this example you have a topic with",
    "start": "862079",
    "end": "864360"
  },
  {
    "text": "one partition and before you enable",
    "start": "864360",
    "end": "867000"
  },
  {
    "text": "Tierra storage for this topic there are",
    "start": "867000",
    "end": "869399"
  },
  {
    "text": "three log segments one of the log",
    "start": "869399",
    "end": "872459"
  },
  {
    "text": "segment is active and others are closed",
    "start": "872459",
    "end": "877040"
  },
  {
    "text": "storage for this topic with two days",
    "start": "878120",
    "end": "881220"
  },
  {
    "text": "local retention and five days overload",
    "start": "881220",
    "end": "883560"
  },
  {
    "text": "retention and Apache Kafka copies log",
    "start": "883560",
    "end": "886620"
  },
  {
    "text": "segment one and two to the TR storage",
    "start": "886620",
    "end": "890420"
  },
  {
    "text": "also retains the primary storage",
    "start": "890420",
    "end": "893820"
  },
  {
    "text": "um copy for segment one and two",
    "start": "893820",
    "end": "897300"
  },
  {
    "text": "and the active segment 3 is not eligible",
    "start": "897300",
    "end": "899760"
  },
  {
    "text": "to copy over two tier storage yet",
    "start": "899760",
    "end": "902279"
  },
  {
    "text": "in this timeline none of the retention",
    "start": "902279",
    "end": "904500"
  },
  {
    "text": "settings are applied yet for any of the",
    "start": "904500",
    "end": "907440"
  },
  {
    "text": "messages in Segment 1 and segment 2.",
    "start": "907440",
    "end": "911839"
  },
  {
    "text": "and after two days primary retention",
    "start": "911880",
    "end": "914519"
  },
  {
    "text": "settings take effect for segment one and",
    "start": "914519",
    "end": "918720"
  },
  {
    "text": "segment 2 that aperture copies to tr",
    "start": "918720",
    "end": "922620"
  },
  {
    "text": "storage so segment one and two now",
    "start": "922620",
    "end": "925620"
  },
  {
    "text": "expires from the local storage",
    "start": "925620",
    "end": "928019"
  },
  {
    "text": "active segment 3 is neither eligible for",
    "start": "928019",
    "end": "931199"
  },
  {
    "text": "expiration nor eligible to copy over the",
    "start": "931199",
    "end": "934500"
  },
  {
    "text": "tier storage yet as it is an active",
    "start": "934500",
    "end": "937260"
  },
  {
    "text": "segment",
    "start": "937260",
    "end": "939560"
  },
  {
    "text": "and after five days overall retention",
    "start": "940560",
    "end": "942959"
  },
  {
    "text": "setting take effect uh Kafka clears",
    "start": "942959",
    "end": "945720"
  },
  {
    "text": "locks even one and two from tier storage",
    "start": "945720",
    "end": "948600"
  },
  {
    "text": "and segment 3 is neither eligible for",
    "start": "948600",
    "end": "952260"
  },
  {
    "text": "expiration nor eligible to copy over to",
    "start": "952260",
    "end": "955139"
  },
  {
    "text": "Tierra storage yet because it is a",
    "start": "955139",
    "end": "957000"
  },
  {
    "text": "active segment",
    "start": "957000",
    "end": "958620"
  },
  {
    "text": "and that's how how data life cycle works",
    "start": "958620",
    "end": "961199"
  },
  {
    "text": "on a tier history reasonable cluster",
    "start": "961199",
    "end": "964680"
  },
  {
    "start": "964000",
    "end": "964000"
  },
  {
    "text": "now how about when you are reading data",
    "start": "964680",
    "end": "967079"
  },
  {
    "text": "from theater storage",
    "start": "967079",
    "end": "968399"
  },
  {
    "text": "for any fetch request or read request",
    "start": "968399",
    "end": "970560"
  },
  {
    "text": "replica manager a component of Kafka",
    "start": "970560",
    "end": "973199"
  },
  {
    "text": "will proceed with making a call to read",
    "start": "973199",
    "end": "976680"
  },
  {
    "text": "from local log and if it returns offset",
    "start": "976680",
    "end": "979740"
  },
  {
    "text": "out of range exception it will delegate",
    "start": "979740",
    "end": "982680"
  },
  {
    "text": "the read call to remote lock manager to",
    "start": "982680",
    "end": "985260"
  },
  {
    "text": "read from tier storage",
    "start": "985260",
    "end": "988320"
  },
  {
    "text": "Kafka depends on operating system page",
    "start": "988320",
    "end": "990959"
  },
  {
    "text": "cache for read and write",
    "start": "990959",
    "end": "992940"
  },
  {
    "text": "for remote read the remote storage",
    "start": "992940",
    "end": "996600"
  },
  {
    "text": "component uses in memory cache to",
    "start": "996600",
    "end": "998880"
  },
  {
    "text": "sequentially preface the segment part to",
    "start": "998880",
    "end": "1001880"
  },
  {
    "text": "start from local in memory cache",
    "start": "1001880",
    "end": "1004100"
  },
  {
    "text": "and that's why when your application is",
    "start": "1004100",
    "end": "1006500"
  },
  {
    "text": "start reading data from tier storage you",
    "start": "1006500",
    "end": "1008959"
  },
  {
    "text": "can expect latency that is similar to",
    "start": "1008959",
    "end": "1010940"
  },
  {
    "text": "the local storage tier",
    "start": "1010940",
    "end": "1012699"
  },
  {
    "text": "except an increase read residency for",
    "start": "1012699",
    "end": "1016279"
  },
  {
    "text": "the first few bytes only",
    "start": "1016279",
    "end": "1019660"
  },
  {
    "text": "I hope this will help you to understand",
    "start": "1019820",
    "end": "1021980"
  },
  {
    "text": "how Ms KTR storage works",
    "start": "1021980",
    "end": "1026140"
  },
  {
    "text": "in summary with msktl storage there is",
    "start": "1026660",
    "end": "1029959"
  },
  {
    "text": "zero infrastructure management for tier",
    "start": "1029959",
    "end": "1032298"
  },
  {
    "text": "storage",
    "start": "1032299",
    "end": "1033140"
  },
  {
    "text": "you get virtually unlimited storage",
    "start": "1033140",
    "end": "1036918"
  },
  {
    "text": "the feature is fully compatible with",
    "start": "1036919",
    "end": "1039640"
  },
  {
    "text": "apogee Kafka consumer API streams API",
    "start": "1039640",
    "end": "1042558"
  },
  {
    "text": "and connectors",
    "start": "1042559",
    "end": "1044959"
  },
  {
    "text": "it will provide you similar read lagency",
    "start": "1044959",
    "end": "1047298"
  },
  {
    "text": "while reading from tier storage",
    "start": "1047299",
    "end": "1051340"
  },
  {
    "text": "and in terms of cost you pay for the",
    "start": "1051380",
    "end": "1053600"
  },
  {
    "text": "amount of data that you store and the",
    "start": "1053600",
    "end": "1055760"
  },
  {
    "text": "amount of data that you retrieve",
    "start": "1055760",
    "end": "1058039"
  },
  {
    "text": "and this feature is compatible with the",
    "start": "1058039",
    "end": "1059900"
  },
  {
    "text": "API introduced in keep 405.",
    "start": "1059900",
    "end": "1064340"
  },
  {
    "text": "and that brings us into our presentation",
    "start": "1064340",
    "end": "1066679"
  },
  {
    "text": "if you want to learn more check out",
    "start": "1066679",
    "end": "1068900"
  },
  {
    "text": "documentation and blog post thank you",
    "start": "1068900",
    "end": "1071419"
  },
  {
    "text": "all for your attention today I hope that",
    "start": "1071419",
    "end": "1074240"
  },
  {
    "text": "you found the talk informative and",
    "start": "1074240",
    "end": "1076039"
  },
  {
    "text": "valuable if you have any questions",
    "start": "1076039",
    "end": "1077840"
  },
  {
    "text": "comments or feedback please reach out to",
    "start": "1077840",
    "end": "1080539"
  },
  {
    "text": "us",
    "start": "1080539",
    "end": "1082720"
  },
  {
    "text": "have a great day all",
    "start": "1083059",
    "end": "1086260"
  }
]