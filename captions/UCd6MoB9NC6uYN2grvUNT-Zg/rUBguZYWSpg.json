[
  {
    "start": "0",
    "end": "83000"
  },
  {
    "text": "all right welcome everyone my name is Siobhan and I'm a senior solution",
    "start": "60",
    "end": "7410"
  },
  {
    "text": "architect here and I'm gonna talk about getting started with a SS lambda and service computing so how many of you",
    "start": "7410",
    "end": "15690"
  },
  {
    "text": "have used lambda or have worked with server less cool so we have couple of",
    "start": "15690",
    "end": "23279"
  },
  {
    "text": "folks who have worked so before we get started a little bit about myself as I",
    "start": "23279",
    "end": "29369"
  },
  {
    "text": "mentioned I'm Siobhan CH I'm here a senior solution architect at a SS quick start team and I've been working with",
    "start": "29369",
    "end": "36500"
  },
  {
    "text": "customers on different aww service technologies I live here in San",
    "start": "36500",
    "end": "41760"
  },
  {
    "text": "Francisco before working at AWS I've been working as a senior software",
    "start": "41760",
    "end": "47010"
  },
  {
    "text": "engineer at Intuit and I did my masters from computer science incumbent science",
    "start": "47010",
    "end": "53820"
  },
  {
    "text": "from Northeastern University Boston so",
    "start": "53820",
    "end": "58859"
  },
  {
    "text": "why are we here today so Cerberus is essentially a really hot topic from last",
    "start": "58859",
    "end": "66960"
  },
  {
    "text": "couple of years and it's growing really fast and in a very rapid pace so today's",
    "start": "66960",
    "end": "73290"
  },
  {
    "text": "session is about getting started with serverless in AWS and primarily we will",
    "start": "73290",
    "end": "78420"
  },
  {
    "text": "focus on a SS lambda and API gateway so",
    "start": "78420",
    "end": "84810"
  },
  {
    "start": "83000",
    "end": "83000"
  },
  {
    "text": "what a service means at AWS there are",
    "start": "84810",
    "end": "90030"
  },
  {
    "text": "four things which are the core pillars for service you don't have to worry",
    "start": "90030",
    "end": "96960"
  },
  {
    "text": "about managing any of your infrastructure so no servers no physicals no virtual and no containers",
    "start": "96960",
    "end": "103880"
  },
  {
    "text": "it automatically scales with the usage so anytime your request comes in it",
    "start": "103880",
    "end": "110040"
  },
  {
    "text": "automatically grows with your request demand and you only pay for what you use",
    "start": "110040",
    "end": "116969"
  },
  {
    "text": "so there is no commitment no idle time and you're only paying whatever you are",
    "start": "116969",
    "end": "123869"
  },
  {
    "text": "using in terms of compute and also the compute you are using based on the the",
    "start": "123869",
    "end": "130709"
  },
  {
    "text": "storage for your lambda functions and last it's highly available and",
    "start": "130709",
    "end": "138069"
  },
  {
    "text": "fault-tolerance so like any of the aw services height availability and fault tolerance",
    "start": "138069",
    "end": "144220"
  },
  {
    "text": "is built into the serverless technologies we have here at AWS so what",
    "start": "144220",
    "end": "152170"
  },
  {
    "text": "does that mean for you basically greater agility less overhead better focus so",
    "start": "152170",
    "end": "159430"
  },
  {
    "text": "you just focus on building the your business logic and worry less about maintaining the server's or maintaining",
    "start": "159430",
    "end": "165310"
  },
  {
    "text": "the infrastructure it increases automatically with the scale of your application and you have more",
    "start": "165310",
    "end": "172750"
  },
  {
    "text": "flexibility in terms of what technologies and what services do you use and that ultimately brings down to",
    "start": "172750",
    "end": "180370"
  },
  {
    "text": "faster time-to-market your application",
    "start": "180370",
    "end": "184500"
  },
  {
    "text": "so at the center of Cerberus technologies here at AWS lambda is the",
    "start": "186510",
    "end": "192939"
  },
  {
    "text": "main focus so we don't highlight we're going to talk about lot in a SS lambda",
    "start": "192939",
    "end": "199720"
  },
  {
    "text": "and also we will focus on lambda functions as well as API gateway so",
    "start": "199720",
    "end": "211269"
  },
  {
    "text": "there are servers behind server lists but when it comes down to you it essentially means that you've only",
    "start": "211269",
    "end": "218049"
  },
  {
    "text": "focused on building the service application using and focusing on your",
    "start": "218049",
    "end": "223239"
  },
  {
    "text": "business logic for you you don't have to worry about maintaining the server's creating virtual machines or creating",
    "start": "223239",
    "end": "230919"
  },
  {
    "text": "the containers or managing the fleet of servers so lambda is at the center of",
    "start": "230919",
    "end": "239709"
  },
  {
    "text": "few different trends and terms as you can see here event-driven compute",
    "start": "239709",
    "end": "244810"
  },
  {
    "text": "function as a service and server less functions and all the four pillars which",
    "start": "244810",
    "end": "250299"
  },
  {
    "text": "I mentioned before it's all built into lambda which we I'm going to talk about",
    "start": "250299",
    "end": "257019"
  },
  {
    "text": "a little bit more in detail in next couple of slides so today we will show",
    "start": "257019",
    "end": "265300"
  },
  {
    "start": "261000",
    "end": "261000"
  },
  {
    "text": "how lambda transfer he supports load-balancing auto scaling and handling failures while preserving",
    "start": "265300",
    "end": "272920"
  },
  {
    "text": "security isolation and utilization so",
    "start": "272920",
    "end": "279190"
  },
  {
    "text": "let's talk about building a service application so when you are building a",
    "start": "279190",
    "end": "286240"
  },
  {
    "text": "service application you are primarily there are three sections your lambda",
    "start": "286240",
    "end": "292810"
  },
  {
    "text": "function which you can use any programming languages such as nodejs Python Java C sharp go Ruby and you can",
    "start": "292810",
    "end": "303160"
  },
  {
    "text": "also bring your own custom runtime and I'm gonna talk about a little bit more in detail how you can bring any of your",
    "start": "303160",
    "end": "311200"
  },
  {
    "text": "custom programming languages and use lambda function to build your",
    "start": "311200",
    "end": "316600"
  },
  {
    "text": "application now once you have your application business logic built into",
    "start": "316600",
    "end": "323590"
  },
  {
    "text": "lambda function how you gonna invoke that and there are a couple of ways you can do it when you",
    "start": "323590",
    "end": "330130"
  },
  {
    "text": "are using lambda function and that we call it even source so you can invoke",
    "start": "330130",
    "end": "335620"
  },
  {
    "text": "your lambda function when there's a change in data state or you can directly invoke lambda function endpoints",
    "start": "335620",
    "end": "343480"
  },
  {
    "text": "directly either through lambda endpoints or API gateway endpoints and I'll show",
    "start": "343480",
    "end": "349390"
  },
  {
    "text": "you in a little bit how you can actually create API gateway endpoints and how you can invoke your lambda function the",
    "start": "349390",
    "end": "356860"
  },
  {
    "text": "third is also you can invoke your lambda function based on the change in the resource state and the third section you",
    "start": "356860",
    "end": "365170"
  },
  {
    "text": "see here is basically your lambda function calling external services or any HTTP or HTTPS endpoints which are",
    "start": "365170",
    "end": "373330"
  },
  {
    "text": "available on the Internet we will not focus a lot on the third part of it but",
    "start": "373330",
    "end": "378940"
  },
  {
    "text": "we will have our focus mainly on functions as well as the event source",
    "start": "378940",
    "end": "386460"
  },
  {
    "text": "all right so let's get into the demo",
    "start": "386700",
    "end": "391770"
  },
  {
    "text": "so here on the a SS management console and the way you create and navigate",
    "start": "412430",
    "end": "420320"
  },
  {
    "text": "through the SS console to create a lambda function you basically search for",
    "start": "420320",
    "end": "425690"
  },
  {
    "text": "a SS lambda and you are directly moved",
    "start": "425690",
    "end": "435440"
  },
  {
    "text": "into the lambda console so make sure you select the appropriate a SS region so",
    "start": "435440",
    "end": "443120"
  },
  {
    "text": "right now I am in so I'm in right now in",
    "start": "443120",
    "end": "449240"
  },
  {
    "text": "u.s. West too and I'm gonna sell keep",
    "start": "449240",
    "end": "455360"
  },
  {
    "text": "that and click right on the create function so you have a couple of options",
    "start": "455360",
    "end": "463430"
  },
  {
    "text": "to create a lambda function you can author from scratch so you gonna it's",
    "start": "463430",
    "end": "468530"
  },
  {
    "text": "going to create a template for the lambda function and you're gonna have all your business logic writing from the",
    "start": "468530",
    "end": "473810"
  },
  {
    "text": "scratch you we also have some of the blueprints so you can actually get started with creating a lambda function",
    "start": "473810",
    "end": "479810"
  },
  {
    "text": "with some of the boilerplate code which will help you get started really quickly",
    "start": "479810",
    "end": "485300"
  },
  {
    "text": "so I'm gonna create a lambda function from scratch and call it AWS loft lambda",
    "start": "485300",
    "end": "494440"
  },
  {
    "text": "you select the run time so I'm gonna use node Python 3.7 but you can see here",
    "start": "494440",
    "end": "502099"
  },
  {
    "text": "there are different programming languages available for you to use for your lambda function and within each",
    "start": "502099",
    "end": "508789"
  },
  {
    "text": "programming language you have different versions of it so each lambda function",
    "start": "508789",
    "end": "516919"
  },
  {
    "text": "requires a role to actually execute the lambda function and which services it can use while execution I'm gonna talk",
    "start": "516919",
    "end": "524360"
  },
  {
    "text": "about the security model of lambda function a little bit more detail so right now I'll say choose existing role",
    "start": "524360",
    "end": "532220"
  },
  {
    "text": "and select one of the I am role which is lambda basic execution click create",
    "start": "532220",
    "end": "541480"
  },
  {
    "text": "and I have my lambda function created as you can see here it automatically gives",
    "start": "542549",
    "end": "550059"
  },
  {
    "text": "me a code which is basically a lambda handler and I'm Alec deeper into what",
    "start": "550059",
    "end": "555939"
  },
  {
    "text": "exactly this lambda handler means but it this is kind of a hello world program",
    "start": "555939",
    "end": "561849"
  },
  {
    "text": "for lambda function so to able to test it I'll create a test event on the top",
    "start": "561849",
    "end": "568869"
  },
  {
    "text": "right corner",
    "start": "568869",
    "end": "571349"
  },
  {
    "text": "give my test event a name so I'll give a WS test event and click create and click",
    "start": "577100",
    "end": "592940"
  },
  {
    "text": "test so you can see that it executed correctly and there's a green checkmark",
    "start": "592940",
    "end": "600949"
  },
  {
    "text": "and I can see the details of the logs in in the execution output so it's this",
    "start": "600949",
    "end": "607970"
  },
  {
    "text": "basically gives you a high-level overview of how you create a lambda function through the a SS console and",
    "start": "607970",
    "end": "613220"
  },
  {
    "text": "how you navigate in the a SS lamda console so when we talk about lambdas a",
    "start": "613220",
    "end": "625190"
  },
  {
    "start": "621000",
    "end": "621000"
  },
  {
    "text": "double as lambda service we primarily talk about lambda function and that's the unit of deployment and the model you",
    "start": "625190",
    "end": "633110"
  },
  {
    "text": "think about in terms of configuration your lambda function so and we are",
    "start": "633110",
    "end": "639259"
  },
  {
    "text": "talking about lambda function there are primarily three things your handler function your event object and the",
    "start": "639259",
    "end": "646160"
  },
  {
    "text": "context object so the handler function is basically the entry point for your",
    "start": "646160",
    "end": "652130"
  },
  {
    "text": "code as you can see here we are defining",
    "start": "652130",
    "end": "658399"
  },
  {
    "text": "the lambda for a handler which calls lambda handler and we are passing event object and context object and everything",
    "start": "658399",
    "end": "666800"
  },
  {
    "text": "we do inside is essentially it's up to you based on your business logic you can create a different function which is",
    "start": "666800",
    "end": "673819"
  },
  {
    "text": "called from the lambda handler and you return the output from your business",
    "start": "673819",
    "end": "679550"
  },
  {
    "text": "logic back to the AWS lambda service through the lambda handler now even object is then as the name",
    "start": "679550",
    "end": "688279"
  },
  {
    "text": "suggests it contains the information about the event source and even so it",
    "start": "688279",
    "end": "693920"
  },
  {
    "text": "depends upon the event which is invoking your lambda function so if you are calling lambda function from API gateway",
    "start": "693920",
    "end": "701389"
  },
  {
    "text": "it's gonna have a different even object then when you are invoking a lambda function using a trigger of s3 bucket",
    "start": "701389",
    "end": "711430"
  },
  {
    "text": "the third thing is which we are passing to the lambda function is the context object and the context object is another",
    "start": "711430",
    "end": "719000"
  },
  {
    "text": "object which is available for your lambda function which provides information about the execution environment so such as the request ID",
    "start": "719000",
    "end": "727790"
  },
  {
    "text": "log group and more information about what kind of execution environment you",
    "start": "727790",
    "end": "734389"
  },
  {
    "text": "are using now some of the things we have",
    "start": "734389",
    "end": "744709"
  },
  {
    "text": "seen customers doing is a lot of times when you create a server list application you are reusing your code so",
    "start": "744709",
    "end": "752509"
  },
  {
    "text": "there are some utility functions and some of the business logic which are being used across multiple lambda",
    "start": "752509",
    "end": "759560"
  },
  {
    "text": "functions so earlier before we announced lambda layers what customers were doing",
    "start": "759560",
    "end": "768589"
  },
  {
    "text": "actually you have to package the lambda the common code within your deployment",
    "start": "768589",
    "end": "773839"
  },
  {
    "text": "package for each lambda function which kinds of make your lambda function bulky as well as it's unnecessary so we",
    "start": "773839",
    "end": "781610"
  },
  {
    "text": "launched lambda layers for that and what you can do with lambda layers is you can create the you can put the reusable code",
    "start": "781610",
    "end": "788660"
  },
  {
    "text": "of your lambda function which you're going to use with multiple lambda functions and zip it and create a lambda",
    "start": "788660",
    "end": "794959"
  },
  {
    "text": "layer which essentially helps you to actually separate your business logic",
    "start": "794959",
    "end": "800779"
  },
  {
    "text": "from the reusable code or the utility functions which you are using within your service application so some of the",
    "start": "800779",
    "end": "811279"
  },
  {
    "start": "809000",
    "end": "809000"
  },
  {
    "text": "details about the lambda layers you can zip your common code within the",
    "start": "811279",
    "end": "817009"
  },
  {
    "text": "deployment package and create a lambda layer and the lambda layers are immutable but they can be version to",
    "start": "817009",
    "end": "824029"
  },
  {
    "text": "manage updates so what does that mean with the immutability is if you created",
    "start": "824029",
    "end": "830300"
  },
  {
    "text": "a layer and you deleted that layer your lambda function which is using that",
    "start": "830300",
    "end": "836059"
  },
  {
    "text": "layer will continue to work but you won't be able to create any new lambda",
    "start": "836059",
    "end": "841279"
  },
  {
    "text": "functions with that layer and the limit sorry yeah I'll give a",
    "start": "841279",
    "end": "853440"
  },
  {
    "text": "little bit more detail into the rest of the presentation and towards the later if you have any questions and another",
    "start": "853440",
    "end": "860900"
  },
  {
    "text": "limit you have with the lambda layers is you can create up to 5 lambda layers for",
    "start": "860900",
    "end": "866130"
  },
  {
    "text": "now including the your custom runtime api which I'm going to talk about in the",
    "start": "866130",
    "end": "871380"
  },
  {
    "text": "next slide so as I mentioned before you can bring any custom programming model",
    "start": "871380",
    "end": "878640"
  },
  {
    "start": "872000",
    "end": "872000"
  },
  {
    "text": "and which are not directly supported by a SS lambda using lambda layers so let's say there's",
    "start": "878640",
    "end": "885930"
  },
  {
    "text": "a programming language you want to use which is not directly supported by a SS lambda like which you see in the console",
    "start": "885930",
    "end": "892800"
  },
  {
    "text": "when we were creating the lambda function you can bring the runtime api",
    "start": "892800",
    "end": "898230"
  },
  {
    "text": "s-- and at that programming model and package it as a lambda layer and create",
    "start": "898230",
    "end": "903300"
  },
  {
    "text": "a layer the only restriction is it needs",
    "start": "903300",
    "end": "910320"
  },
  {
    "text": "to be compatible with Amazon Linux because that's what we use underline for",
    "start": "910320",
    "end": "915660"
  },
  {
    "text": "runtime api's so the baby you can",
    "start": "915660",
    "end": "923430"
  },
  {
    "start": "920000",
    "end": "920000"
  },
  {
    "text": "actually create the custom runtime api is you have to create a bootstrap file",
    "start": "923430",
    "end": "930150"
  },
  {
    "text": "which is an executable file which acts as a bridge between the runtime HTTP api",
    "start": "930150",
    "end": "937200"
  },
  {
    "text": "and the function your lambda function which needs to be executed so the",
    "start": "937200",
    "end": "943790"
  },
  {
    "text": "bootstrap needs to manage the response and error handling the context creation",
    "start": "943790",
    "end": "949260"
  },
  {
    "text": "and the function execution and the",
    "start": "949260",
    "end": "954390"
  },
  {
    "text": "information on the interface endpoint and the function handler are shared as environment variables when you are using",
    "start": "954390",
    "end": "960360"
  },
  {
    "text": "the runtime bootstrap so if you are the way it's gonna work is when you invoke",
    "start": "960360",
    "end": "966810"
  },
  {
    "text": "your lambda function it's gonna get an event so if the bootstrap will get an",
    "start": "966810",
    "end": "971850"
  },
  {
    "text": "event it will propagate the tracing ID to your lambda function",
    "start": "971850",
    "end": "977100"
  },
  {
    "text": "it will create a context object and then it will invoke your function handler which you have defined in your lambda",
    "start": "977100",
    "end": "983400"
  },
  {
    "text": "function the function handler will receive the event and context object it",
    "start": "983400",
    "end": "988890"
  },
  {
    "text": "will execute it it will return the response back to the bootstrap and the",
    "start": "988890",
    "end": "994500"
  },
  {
    "text": "bootstrap needs to handle that response handle any errors which happen within your lambda function and then also do",
    "start": "994500",
    "end": "1001940"
  },
  {
    "text": "the clean up so cleaning up like any resources you have opened or any connections you have open that needs to",
    "start": "1001940",
    "end": "1008390"
  },
  {
    "text": "be done by your bootstrap as well so essentially it's acting as a bridge between the HTTP API and your function",
    "start": "1008390",
    "end": "1019000"
  },
  {
    "start": "1020000",
    "end": "1020000"
  },
  {
    "text": "now let's talk about the pricing model of lambda function which primarily",
    "start": "1021700",
    "end": "1026990"
  },
  {
    "text": "depends on two things the memory you you are choosing for your lambda function",
    "start": "1026990",
    "end": "1032120"
  },
  {
    "text": "and the compute time of your lambda function based on how much you are using",
    "start": "1032120",
    "end": "1038510"
  },
  {
    "text": "running your lambda function longer so the compute time of your lambda function",
    "start": "1038510",
    "end": "1044510"
  },
  {
    "text": "is in 100 milliseconds increment but there is no commitment for using the",
    "start": "1044510",
    "end": "1051350"
  },
  {
    "text": "lambda function so if you are using a lambda function for whatever minutes you pay based on that and based on the",
    "start": "1051350",
    "end": "1058850"
  },
  {
    "text": "memory you have selected for your lambda function so there's no hourly charge no",
    "start": "1058850",
    "end": "1064790"
  },
  {
    "text": "daily charge no monthly charge and no minimums for using or creating a SS",
    "start": "1064790",
    "end": "1070670"
  },
  {
    "text": "lambda function as well there is no per device fees and you never pay for your idle lambda function",
    "start": "1070670",
    "end": "1079390"
  },
  {
    "start": "1080000",
    "end": "1080000"
  },
  {
    "text": "now when tweaking your lambda function for power or how much memory you use",
    "start": "1081880",
    "end": "1089720"
  },
  {
    "text": "there is essentially only one knob to be able to tweak your lambda function and that knob is basically you are selecting",
    "start": "1089720",
    "end": "1097340"
  },
  {
    "text": "how much memory you want to allocate to your lambda function the percentage CPU",
    "start": "1097340",
    "end": "1104180"
  },
  {
    "text": "as well as the network capacity is automatically provided based on the",
    "start": "1104180",
    "end": "1109700"
  },
  {
    "text": "memory you choose the function so you don't have to worry about having multiple knobs and having",
    "start": "1109700",
    "end": "1115539"
  },
  {
    "text": "managed between okay how much CPU you have you want to you provide to your",
    "start": "1115539",
    "end": "1120919"
  },
  {
    "text": "lambda function or how much network bandwidth you want to provide now there",
    "start": "1120919",
    "end": "1134090"
  },
  {
    "start": "1128000",
    "end": "1128000"
  },
  {
    "text": "are a couple of execution models when it comes down to lambda as you can see here",
    "start": "1134090",
    "end": "1140440"
  },
  {
    "text": "the first is the synchronous model which is also called a push model so let's say",
    "start": "1140440",
    "end": "1147169"
  },
  {
    "text": "you have a lambda function and you you are create you created that lambda function behind Amazon API gateway and",
    "start": "1147169",
    "end": "1154190"
  },
  {
    "text": "your request comes in to the slash order endpoint which invokes your lambda",
    "start": "1154190",
    "end": "1161119"
  },
  {
    "text": "function in this case it's a push model and it's a synchronous model because your lambda function needs to return",
    "start": "1161119",
    "end": "1167869"
  },
  {
    "text": "back that response back to the API gateway so it's a whole round-trip invocation the another execution model",
    "start": "1167869",
    "end": "1174769"
  },
  {
    "text": "is the asynchronous model which is an event-driven model so if you have an",
    "start": "1174769",
    "end": "1179929"
  },
  {
    "text": "Amazon SNS topic or Amazon s3 if there is a change in the if there is a message",
    "start": "1179929",
    "end": "1187129"
  },
  {
    "text": "to the Amazon SNS topic or is there a change in the object of s3 it can invoke",
    "start": "1187129",
    "end": "1193639"
  },
  {
    "text": "a a SS lambda function and in that case your lambda function does return a response but it does not return or it's",
    "start": "1193639",
    "end": "1201919"
  },
  {
    "text": "not waiting for the response back to the s3 or SNS so it's only one way and",
    "start": "1201919",
    "end": "1208190"
  },
  {
    "text": "that's basically as asynchronous or UN driven model the third execution model",
    "start": "1208190",
    "end": "1214249"
  },
  {
    "text": "is the pole based model so for example if you have an Amazon DynamoDB streams or you are using Amazon Kinesis stream",
    "start": "1214249",
    "end": "1222230"
  },
  {
    "text": "if there is a change in the stream or if there are any activity happen for",
    "start": "1222230",
    "end": "1229909"
  },
  {
    "text": "example in your Amazon DynamoDB table and you have a stream created for your table the stream is gonna get that",
    "start": "1229909",
    "end": "1237889"
  },
  {
    "text": "information and there's a lambda service which is pulling that stream and executes your lambda function",
    "start": "1237889",
    "end": "1244250"
  },
  {
    "text": "so that's the poll based model a SS",
    "start": "1244250",
    "end": "1251510"
  },
  {
    "start": "1248000",
    "end": "1248000"
  },
  {
    "text": "lambda also provide the api's so if instead of directly using instead of",
    "start": "1251510",
    "end": "1258530"
  },
  {
    "text": "using the API gateway you can directly invoke lambda functions through the lambda API and these are used by all",
    "start": "1258530",
    "end": "1266960"
  },
  {
    "text": "other services to invoke the lambda functions within the ecosystem it supports synchronous and asynchronous",
    "start": "1266960",
    "end": "1273320"
  },
  {
    "text": "both and you can pass any payload directly to the lambda function when you",
    "start": "1273320",
    "end": "1279890"
  },
  {
    "text": "are using the lambda API now let's talk",
    "start": "1279890",
    "end": "1288260"
  },
  {
    "start": "1285000",
    "end": "1285000"
  },
  {
    "text": "about the security so security is our number one priority at AWS and it's no",
    "start": "1288260",
    "end": "1293929"
  },
  {
    "text": "exception with a SS lambda as well and security is deeply ingrained into a SS",
    "start": "1293929",
    "end": "1300590"
  },
  {
    "text": "lambda there are primarily two models when it comes down to security in lambda",
    "start": "1300590",
    "end": "1306850"
  },
  {
    "text": "first is what the lambda function itself can do when it's when you are invoking a",
    "start": "1306850",
    "end": "1314960"
  },
  {
    "text": "lambda function so for example can lambda function get an object from s3 bucket or can a lambda function write to",
    "start": "1314960",
    "end": "1323059"
  },
  {
    "text": "a DynamoDB table that's called execution policy the second aspect of it is the",
    "start": "1323059",
    "end": "1331100"
  },
  {
    "text": "function policy which is basically telling who can invoke your lambda function so if an API gateway can invoke",
    "start": "1331100",
    "end": "1339890"
  },
  {
    "text": "your lambda function or if your lambda function can be triggered through s3",
    "start": "1339890",
    "end": "1345580"
  },
  {
    "text": "changing this three object and that basically is the function policy so it",
    "start": "1345580",
    "end": "1351770"
  },
  {
    "text": "gives really fine-grained control over what your lambda function can do and who",
    "start": "1351770",
    "end": "1356929"
  },
  {
    "text": "can do with your lambda function",
    "start": "1356929",
    "end": "1360760"
  },
  {
    "start": "1361000",
    "end": "1361000"
  },
  {
    "text": "now there are a couple of common use cases we have seen across how lambda",
    "start": "1363340",
    "end": "1369200"
  },
  {
    "text": "function has been used and which primarily falls into these six",
    "start": "1369200",
    "end": "1374390"
  },
  {
    "text": "categories first web applications customers use lambda for various",
    "start": "1374390",
    "end": "1380900"
  },
  {
    "text": "different use cases for creating static web sites complex web applications are packaging for flask or Express",
    "start": "1380900",
    "end": "1388930"
  },
  {
    "text": "frameworks the another use case is creating the application back-end such",
    "start": "1388930",
    "end": "1396140"
  },
  {
    "text": "as mobile backend or IOT applications and using lambda function for the IOT",
    "start": "1396140",
    "end": "1403280"
  },
  {
    "text": "application back in the third use case is data processing so whether it's real",
    "start": "1403280",
    "end": "1408680"
  },
  {
    "text": "time data processing or batch data processing or doing a MapReduce using lambda function customers also use",
    "start": "1408680",
    "end": "1416750"
  },
  {
    "text": "lambda function for chatbots so they have the chatbots",
    "start": "1416750",
    "end": "1422180"
  },
  {
    "text": "created for for their business and they use legs along with the a SS lambda to",
    "start": "1422180",
    "end": "1429860"
  },
  {
    "text": "create the back end for the chatbots",
    "start": "1429860",
    "end": "1433780"
  },
  {
    "text": "lambda is also a core part of Amazon Alexa so a lot of skills which you see",
    "start": "1435490",
    "end": "1442430"
  },
  {
    "text": "with Amazon Alexa are backed by a SS lambda functions lambda is also used",
    "start": "1442430",
    "end": "1451100"
  },
  {
    "text": "primarily in IT automation so for policy engines or creating or doing any action",
    "start": "1451100",
    "end": "1458450"
  },
  {
    "text": "or executing any action based on alarms and monitoring is also very much used",
    "start": "1458450",
    "end": "1465050"
  },
  {
    "text": "for the ID automation use cases",
    "start": "1465050",
    "end": "1469450"
  },
  {
    "start": "1470000",
    "end": "1470000"
  },
  {
    "text": "now let's switch some gear and talk about another service within the",
    "start": "1472140",
    "end": "1478650"
  },
  {
    "text": "serverless ecosystem which is Amazon API gateway as the name suggests it's a API",
    "start": "1478650",
    "end": "1485190"
  },
  {
    "text": "gateway which is a unified API front-end for multiple services such as micro",
    "start": "1485190",
    "end": "1491340"
  },
  {
    "text": "services or monolithic services it automatically provides a DDoS protection",
    "start": "1491340",
    "end": "1496710"
  },
  {
    "text": "and throttling for your back-end it also has way to authenticate and",
    "start": "1496710",
    "end": "1502110"
  },
  {
    "text": "authorize requests to your back-end whether it's lambda function or anything else and you also get to throttle or",
    "start": "1502110",
    "end": "1509370"
  },
  {
    "text": "meter and monetize your api's for the third-party developers when you are",
    "start": "1509370",
    "end": "1514890"
  },
  {
    "text": "using Amazon API gateway now when you",
    "start": "1514890",
    "end": "1521790"
  },
  {
    "text": "use Amazon API gateway there are three primary ways you can use it first",
    "start": "1521790",
    "end": "1528570"
  },
  {
    "text": "as we call it edge endpoints which basically you use Amazon API gateway",
    "start": "1528570",
    "end": "1534720"
  },
  {
    "text": "along with the CDN which is a Amazon CloudFront service the second way you",
    "start": "1534720",
    "end": "1542010"
  },
  {
    "text": "can use Amazon API gateway which we is called regional endpoints so you can",
    "start": "1542010",
    "end": "1547440"
  },
  {
    "text": "have your endpoints created using Amazon API gateway which are available within",
    "start": "1547440",
    "end": "1552929"
  },
  {
    "text": "an AWS region so it could be any other application which is available in the",
    "start": "1552929",
    "end": "1559320"
  },
  {
    "text": "same region for your business and you only want to use within that a SS region and the third is the completely private",
    "start": "1559320",
    "end": "1567690"
  },
  {
    "text": "API endpoint for your back-end services within your V PC so you have your",
    "start": "1567690",
    "end": "1573059"
  },
  {
    "text": "application and you have a endpoint created for your application and some of",
    "start": "1573059",
    "end": "1578730"
  },
  {
    "text": "the other components of your application wants to call that then you don't need to go all the way to the Internet you",
    "start": "1578730",
    "end": "1585660"
  },
  {
    "text": "can use the private API endpoints for that now there are a number of",
    "start": "1585660",
    "end": "1592020"
  },
  {
    "text": "technologies which can run code for your API gateway when you are are actually",
    "start": "1592020",
    "end": "1597960"
  },
  {
    "text": "behind the API gateway of course we saw how you can use lambda functions behind",
    "start": "1597960",
    "end": "1603179"
  },
  {
    "text": "the API gateway but you can also you any HTTP endpoint you are running on ec2",
    "start": "1603179",
    "end": "1609570"
  },
  {
    "text": "or elastic Beanstalk or Amazon ECS which is our elastic container service or you",
    "start": "1609570",
    "end": "1617310"
  },
  {
    "text": "can run your code on Fargate or anything which runs on Amazon ec2 you can also",
    "start": "1617310",
    "end": "1626060"
  },
  {
    "text": "wrap other AWS services for your back-end when you are using Amazon API",
    "start": "1626060",
    "end": "1631350"
  },
  {
    "text": "gateway in addition you can also use API",
    "start": "1631350",
    "end": "1640950"
  },
  {
    "text": "gateway and you can call any HTTP or HTTPS which are available on the",
    "start": "1640950",
    "end": "1646560"
  },
  {
    "text": "Internet so in front of the in front of your",
    "start": "1646560",
    "end": "1653670"
  },
  {
    "text": "resources within your V PC you can also use Amazon API gateways so for example",
    "start": "1653670",
    "end": "1659160"
  },
  {
    "text": "in this diagram on the right hand side corner you can see that you have your endpoints running on your Amazon ec2",
    "start": "1659160",
    "end": "1667020"
  },
  {
    "text": "instances which are private and you can use you can call those endpoints from",
    "start": "1667020",
    "end": "1673020"
  },
  {
    "text": "your Amazon API gateway endpoints now",
    "start": "1673020",
    "end": "1679860"
  },
  {
    "start": "1678000",
    "end": "1678000"
  },
  {
    "text": "recently we also introduced something called as API gateway WebSockets using",
    "start": "1679860",
    "end": "1686670"
  },
  {
    "text": "Amazon API gate with WebSockets you can build real time two-way communication application so such as chatbots alerts",
    "start": "1686670",
    "end": "1695310"
  },
  {
    "text": "and notifications and streaming dashboards and again api gateway is the",
    "start": "1695310",
    "end": "1701610"
  },
  {
    "text": "fully managed service so which gives you to handle connections between your application and transfer messages using",
    "start": "1701610",
    "end": "1710370"
  },
  {
    "text": "the fully managed API using api gateway WebSockets you can you invoke these ADA",
    "start": "1710370",
    "end": "1719960"
  },
  {
    "text": "API gate with WebSockets using different AWS services such as lambda or Kinesis",
    "start": "1719960",
    "end": "1725220"
  },
  {
    "text": "or other HTTP endpoint based message",
    "start": "1725220",
    "end": "1730260"
  },
  {
    "text": "content and also when you are using API gateway WebSockets you only pay for what",
    "start": "1730260",
    "end": "1736170"
  },
  {
    "text": "you use so based primarily you pay based on two things",
    "start": "1736170",
    "end": "1741300"
  },
  {
    "text": "one you pay for your connection minutes and the messages transferred using those",
    "start": "1741300",
    "end": "1748010"
  },
  {
    "text": "calls now let's talk about how some of",
    "start": "1748010",
    "end": "1759390"
  },
  {
    "start": "1752000",
    "end": "1752000"
  },
  {
    "text": "the customers use and build their server less web applications using a SS lambda",
    "start": "1759390",
    "end": "1765570"
  },
  {
    "text": "e SS API gateway and some of the other services within the service ecosystem we",
    "start": "1765570",
    "end": "1771060"
  },
  {
    "text": "have here at AWS so as you see in this diagram here you have your static pages",
    "start": "1771060",
    "end": "1779670"
  },
  {
    "text": "on Amazon s3 bucket and those are connected to Amazon CloudFront",
    "start": "1779670",
    "end": "1786330"
  },
  {
    "text": "and served through Amazon CloudFront where your customers are located and you",
    "start": "1786330",
    "end": "1791940"
  },
  {
    "text": "have your back-end written in a SS lambda and you have the Amazon API",
    "start": "1791940",
    "end": "1797520"
  },
  {
    "text": "gateway which invokes the lambda function and executes your business",
    "start": "1797520",
    "end": "1802650"
  },
  {
    "text": "logic so when client is accessing your website",
    "start": "1802650",
    "end": "1807900"
  },
  {
    "text": "it goes through Amazon CloudFront any of the static content is served through",
    "start": "1807900",
    "end": "1812940"
  },
  {
    "text": "Amazon s3 and any of the dynamic content or the business logic is executed",
    "start": "1812940",
    "end": "1819600"
  },
  {
    "text": "through Amazon API gateway calling a lambda function and but at the backend",
    "start": "1819600",
    "end": "1824670"
  },
  {
    "text": "it could be interacting with database tables or any other HTTP or HTTPS based",
    "start": "1824670",
    "end": "1831810"
  },
  {
    "text": "endpoints some of the other service",
    "start": "1831810",
    "end": "1837420"
  },
  {
    "start": "1835000",
    "end": "1835000"
  },
  {
    "text": "architectures we have seen customers using with different AWS services in the",
    "start": "1837420",
    "end": "1845310"
  },
  {
    "text": "service ecosystem are these so one you can see here on the left hand side the",
    "start": "1845310",
    "end": "1852030"
  },
  {
    "text": "first column is you have an s3 bucket and you have the objects in the s3",
    "start": "1852030",
    "end": "1857370"
  },
  {
    "text": "bucket so every time there is a object is put into the s3 bucket a lambda",
    "start": "1857370",
    "end": "1863280"
  },
  {
    "text": "function is involved the second architecture you could use when using a",
    "start": "1863280",
    "end": "1869600"
  },
  {
    "text": "lambda function is when you are publishing messages into SNS topic and you call",
    "start": "1869600",
    "end": "1877190"
  },
  {
    "text": "lambda function through that SNS topic so every time there's a message put into",
    "start": "1877190",
    "end": "1884970"
  },
  {
    "text": "the SNS topic there's a trigger which triggers your lambda function which executes your business logic in the",
    "start": "1884970",
    "end": "1891720"
  },
  {
    "text": "lambda function the third is when you let's say you are using Amazon sqs",
    "start": "1891720",
    "end": "1899060"
  },
  {
    "text": "there's a message which is put into the sqs Q lambda pulls the Q and it invokes",
    "start": "1899060",
    "end": "1905460"
  },
  {
    "text": "the lambda function and the function performs some action based on that message and it removes that message from",
    "start": "1905460",
    "end": "1912360"
  },
  {
    "text": "the Q another way you can build",
    "start": "1912360",
    "end": "1918750"
  },
  {
    "text": "serverless application is using Amazon Kinesis data stream so you have multiple",
    "start": "1918750",
    "end": "1925620"
  },
  {
    "text": "devices or other applications which are putting messages into the Amazon Kinesis",
    "start": "1925620",
    "end": "1932580"
  },
  {
    "text": "data stream and the lambda function is invoked through that data stream as it's",
    "start": "1932580",
    "end": "1939150"
  },
  {
    "text": "pulling the your Kinesis data stream it executes the lambda function take some",
    "start": "1939150",
    "end": "1945030"
  },
  {
    "text": "action based on that and return back to the data stream another example as I",
    "start": "1945030",
    "end": "1953460"
  },
  {
    "text": "mentioned before customers use chatbots and they use lambda function to actually",
    "start": "1953460",
    "end": "1959730"
  },
  {
    "text": "perform some back-end execution so you have a chat bot which have some",
    "start": "1959730",
    "end": "1965580"
  },
  {
    "text": "conversation need so it talks to Amazon Lex which is another a SS service and it",
    "start": "1965580",
    "end": "1972570"
  },
  {
    "text": "invokes lambda function to take some action based on the chat messages",
    "start": "1972570",
    "end": "1979039"
  },
  {
    "text": "another way you could use a SS lambda is through cloud watch events so you you",
    "start": "1979640",
    "end": "1987030"
  },
  {
    "text": "can schedule your the lambda function to be invoked at certain time through the",
    "start": "1987030",
    "end": "1993690"
  },
  {
    "text": "scheduled events within your cloud watch logs",
    "start": "1993690",
    "end": "1998540"
  },
  {
    "start": "1999000",
    "end": "1999000"
  },
  {
    "text": "now what we have seen from working with many customers is they do a lot of",
    "start": "2001590",
    "end": "2007810"
  },
  {
    "text": "orchestration within the lambda function so they do if an else to do take some",
    "start": "2007810",
    "end": "2013570"
  },
  {
    "text": "decisions or perform some exception handling catching errors and also they",
    "start": "2013570",
    "end": "2020440"
  },
  {
    "text": "do wait or sleep within the lambda function which essentially if you think about it the pricing model we have it",
    "start": "2020440",
    "end": "2027220"
  },
  {
    "text": "does not is a very useful way of using lambda function because you are still paying for that idle minutes while you",
    "start": "2027220",
    "end": "2034240"
  },
  {
    "text": "are waiting or while you're sleeping within your lambda function so we have",
    "start": "2034240",
    "end": "2041260"
  },
  {
    "start": "2041000",
    "end": "2041000"
  },
  {
    "text": "us another service which is called a double step functions with step function",
    "start": "2041260",
    "end": "2048220"
  },
  {
    "text": "it's essential workflow management with zero administration so what step",
    "start": "2048220",
    "end": "2053919"
  },
  {
    "text": "function provides it it provides different states or different tasks for",
    "start": "2053920",
    "end": "2060190"
  },
  {
    "text": "your lambda function so for example as you can see here there's a task state",
    "start": "2060190",
    "end": "2066550"
  },
  {
    "text": "there's a choice state what you can do using that is within the task you can",
    "start": "2066550",
    "end": "2072010"
  },
  {
    "text": "perform any actions the choice you can make if and else decisions and you can",
    "start": "2072010",
    "end": "2078070"
  },
  {
    "text": "also perform parallel tasks or do cap failure handling using step function so",
    "start": "2078070",
    "end": "2085060"
  },
  {
    "text": "which makes it really really easy to coordinate the different components of a distributed application which you are",
    "start": "2085060",
    "end": "2091149"
  },
  {
    "text": "building so each box you see here like extract image metadata image type check",
    "start": "2091150",
    "end": "2098050"
  },
  {
    "text": "every green box you see here is each lambda function and essentially you are",
    "start": "2098050",
    "end": "2103720"
  },
  {
    "text": "doing the management of the workflow through this step function by just",
    "start": "2103720",
    "end": "2108970"
  },
  {
    "text": "defining different choices different parallel tasks or another failure",
    "start": "2108970",
    "end": "2115720"
  },
  {
    "text": "capture task",
    "start": "2115720",
    "end": "2118560"
  },
  {
    "start": "2122000",
    "end": "2122000"
  },
  {
    "text": "now all the services we have here at AWS like a SS lambda Amazon s3 Amazon",
    "start": "2124260",
    "end": "2132750"
  },
  {
    "text": "CloudFront Amazon DynamoDB Amazon Kinesis data stream Amazon Cognito Amazon SNS all are you can use",
    "start": "2132750",
    "end": "2141750"
  },
  {
    "text": "all of these services to build PCI and HIPAA compliant serverless applications",
    "start": "2141750",
    "end": "2148850"
  },
  {
    "text": "now the question is how do you start or where do you actually start with using",
    "start": "2149750",
    "end": "2156210"
  },
  {
    "text": "the different services or a SS lambda and start building your service application one of the thing I always",
    "start": "2156210",
    "end": "2164520"
  },
  {
    "start": "2162000",
    "end": "2162000"
  },
  {
    "text": "recommend to the customers is start with the framework we have a lot of different",
    "start": "2164520",
    "end": "2170310"
  },
  {
    "text": "frameworks at build by AWS but we also have lot of third-party frameworks which",
    "start": "2170310",
    "end": "2175650"
  },
  {
    "text": "can help you get started with building service application at AWS some of the",
    "start": "2175650",
    "end": "2182880"
  },
  {
    "text": "frameworks we have is a SS chalice a SS amplify aw Sam which I'm gonna talk",
    "start": "2182880",
    "end": "2189420"
  },
  {
    "text": "about a little bit in more detail but we also have some of the third-party service app framework which are really",
    "start": "2189420",
    "end": "2196590"
  },
  {
    "text": "popular like Claudia GS and severus framework",
    "start": "2196590",
    "end": "2202760"
  },
  {
    "start": "2204000",
    "end": "2204000"
  },
  {
    "text": "now let's talk about Sam as you can see a little cute squirrel friend here which",
    "start": "2209020",
    "end": "2216380"
  },
  {
    "text": "is our mascot for aw Sam which Sam stands for service application model so",
    "start": "2216380",
    "end": "2223610"
  },
  {
    "text": "it's basically an extension for AWS CloudFormation which is optimized",
    "start": "2223610",
    "end": "2229520"
  },
  {
    "text": "specifically for building service application what it provides is",
    "start": "2229520",
    "end": "2235910"
  },
  {
    "text": "basically a special special service resource types so you can create",
    "start": "2235910",
    "end": "2242120"
  },
  {
    "text": "functions api's tables and serverless a SS layers using Sam template we have",
    "start": "2242120",
    "end": "2250940"
  },
  {
    "text": "open sourced the specification for Sam and you can get more detail in a SS",
    "start": "2250940",
    "end": "2257780"
  },
  {
    "text": "amazon.com slash serverless slash Sam",
    "start": "2257780",
    "end": "2262540"
  },
  {
    "text": "now let's take a look into how the Sam template looks like so primarily it has",
    "start": "2263140",
    "end": "2269870"
  },
  {
    "text": "three different components on the top you see is a header which is a SS",
    "start": "2269870",
    "end": "2275120"
  },
  {
    "text": "template format version the second is transform which tells what exactly this",
    "start": "2275120",
    "end": "2281600"
  },
  {
    "text": "template is about so it tells cloud formation that it's not a regular CloudFormation template",
    "start": "2281600",
    "end": "2287900"
  },
  {
    "text": "it's a Cerberus template we needs to be transformed into the cloud formation resources and the third which is the",
    "start": "2287900",
    "end": "2295480"
  },
  {
    "text": "crux of this Sam template is the resource section you can see here there",
    "start": "2295480",
    "end": "2301160"
  },
  {
    "text": "are two different resources one is get HTML function and the second is list",
    "start": "2301160",
    "end": "2307100"
  },
  {
    "text": "table lists table is a simple resource which creates a DynamoDB table with five",
    "start": "2307100",
    "end": "2312950"
  },
  {
    "text": "read and write units by default and the second resource is get HTML function",
    "start": "2312950",
    "end": "2318970"
  },
  {
    "text": "what it does it creates a lambda function which is and provides some of",
    "start": "2318970",
    "end": "2324740"
  },
  {
    "text": "the properties such as code uri which tells where the lambda function zip file is which what is the name of the handler",
    "start": "2324740",
    "end": "2332630"
  },
  {
    "text": "what is the run time in this case it's no GS 6.10 what policy does lambda",
    "start": "2332630",
    "end": "2339590"
  },
  {
    "text": "function is going to use and it also creates an API gateway endpoint with the n path as slash proxy",
    "start": "2339590",
    "end": "2348829"
  },
  {
    "text": "and method as any so if you see here just the 20 lines of code actually",
    "start": "2348829",
    "end": "2357729"
  },
  {
    "text": "reduces and helps you to create these many resources for you so if you want to",
    "start": "2357729",
    "end": "2364430"
  },
  {
    "text": "create these resources in a regular CloudFormation template you have to write anywhere around 80 200 lines of",
    "start": "2364430",
    "end": "2371059"
  },
  {
    "text": "code which in Sam it makes it really easy and you can achieve in like almost",
    "start": "2371059",
    "end": "2376400"
  },
  {
    "text": "15 to 20 lines so this is another example you can see for the Sam template",
    "start": "2376400",
    "end": "2383809"
  },
  {
    "start": "2378000",
    "end": "2378000"
  },
  {
    "text": "on the left hand side you see from line 9 to 925 it's actually creating seven",
    "start": "2383809",
    "end": "2390829"
  },
  {
    "text": "different AWS resources which you can see on the right hand side in the picture which makes it really really",
    "start": "2390829",
    "end": "2396890"
  },
  {
    "text": "simple to create different AWS resources using Sam template",
    "start": "2396890",
    "end": "2403749"
  },
  {
    "text": "so we also have Sam CLI which is our command-line interface which you can use",
    "start": "2409530",
    "end": "2415710"
  },
  {
    "text": "on your local machine or your local development environment and it helps you to develop debug test deploy and",
    "start": "2415710",
    "end": "2422910"
  },
  {
    "text": "monitoring monitor your service application what it helps you to",
    "start": "2422910",
    "end": "2430440"
  },
  {
    "text": "actually is really fast pace your development when you are doing it on",
    "start": "2430440",
    "end": "2436440"
  },
  {
    "text": "your local machine so it uses darker to actually create the execution",
    "start": "2436440",
    "end": "2441480"
  },
  {
    "text": "environment for your lambda function or your on your development machine it deploys the code in that execution",
    "start": "2441480",
    "end": "2447660"
  },
  {
    "text": "environment it executes sit and if you're using API gateway it will also",
    "start": "2447660",
    "end": "2453840"
  },
  {
    "text": "provide a API endpoint and you can also use CLI to actually generate the payload",
    "start": "2453840",
    "end": "2460530"
  },
  {
    "text": "for your lambda function automatically so it makes it really easy to give you",
    "start": "2460530",
    "end": "2466050"
  },
  {
    "text": "the whole picture of running a lambda function and creating a lambda function on your local machine you can get more",
    "start": "2466050",
    "end": "2475980"
  },
  {
    "text": "details on Sam at a SS amazon.com slash serverless less Sam so another thing we",
    "start": "2475980",
    "end": "2489360"
  },
  {
    "text": "have within our service ecosystem is service application repository and this",
    "start": "2489360",
    "end": "2495960"
  },
  {
    "text": "is basically a central place to discover and deploy and publish serverless",
    "start": "2495960",
    "end": "2502140"
  },
  {
    "text": "applications and also this is a really",
    "start": "2502140",
    "end": "2507150"
  },
  {
    "text": "easy way to actually start exploring different service applications every",
    "start": "2507150",
    "end": "2512790"
  },
  {
    "text": "time if you have any example you want to see how to do something I think this is",
    "start": "2512790",
    "end": "2519360"
  },
  {
    "text": "a really good place to actually go and explore and see how others have contributed and how others have built",
    "start": "2519360",
    "end": "2525480"
  },
  {
    "text": "service applications using different services now let's talk about some of",
    "start": "2525480",
    "end": "2533370"
  },
  {
    "start": "2530000",
    "end": "2530000"
  },
  {
    "text": "the other capabilities we have in the ecosystem that is metric and logging and as we say here metric and logging are a",
    "start": "2533370",
    "end": "2541770"
  },
  {
    "text": "universal right and it is no different for lambda and API gateway we have a cloud watch matrix",
    "start": "2541770",
    "end": "2551460"
  },
  {
    "text": "directly integrated with a SS lambda and we have by default seven built in matrix",
    "start": "2551460",
    "end": "2558900"
  },
  {
    "text": "for a SS lambda invocation count invocation duration invocation errors",
    "start": "2558900",
    "end": "2564510"
  },
  {
    "text": "turtle invocation iterator age dead letter Q errors and concurrency you can",
    "start": "2564510",
    "end": "2573120"
  },
  {
    "text": "also create your own custom metrics using cloud watch logs sorry cloud watch matrix by using the",
    "start": "2573120",
    "end": "2581400"
  },
  {
    "text": "API called put metric data there are seven built-in metrics for API gateway",
    "start": "2581400",
    "end": "2588710"
  },
  {
    "text": "API call counts latency 400 errors 500 errors integrated integration latency",
    "start": "2588710",
    "end": "2596850"
  },
  {
    "text": "cache hit count and cache miss counts",
    "start": "2596850",
    "end": "2601280"
  },
  {
    "text": "you can also have cloud watch logs so",
    "start": "2606420",
    "end": "2611610"
  },
  {
    "text": "when you are using API get by logging you automatically get error and info",
    "start": "2611610",
    "end": "2617020"
  },
  {
    "text": "logs for your API gateway optionally you can also log request and response body",
    "start": "2617020",
    "end": "2623320"
  },
  {
    "text": "content but I will I will be careful about doing that if you really have a",
    "start": "2623320",
    "end": "2628990"
  },
  {
    "text": "large payload because it can really cost you a lot if you have a really high",
    "start": "2628990",
    "end": "2636280"
  },
  {
    "text": "traffic API we also have logging",
    "start": "2636280",
    "end": "2643210"
  },
  {
    "text": "directly integrated with a SS lambda so you can automatically get the logs in",
    "start": "2643210",
    "end": "2649900"
  },
  {
    "text": "the cloud watch logs by creating the console dot log or any other log",
    "start": "2649900",
    "end": "2656850"
  },
  {
    "text": "equivalent of that in whatever language you are using for your lambda function",
    "start": "2656850",
    "end": "2662070"
  },
  {
    "text": "some of the basic information is automatically provided when you are using cloud watch logs for your lambda",
    "start": "2662070",
    "end": "2668320"
  },
  {
    "text": "function but you can log anything like you want you use any programming",
    "start": "2668320",
    "end": "2673720"
  },
  {
    "text": "language like printf or you can write any commands as you use for your",
    "start": "2673720",
    "end": "2681280"
  },
  {
    "text": "different programming model we also have something called as lock pivot so when",
    "start": "2681280",
    "end": "2689290"
  },
  {
    "text": "you are building the matrix actually when you are using the lock pivot you can build metrics based on the lock",
    "start": "2689290",
    "end": "2696010"
  },
  {
    "text": "filters so you can provide the filters which you want to filter into your log and it will automatically generate the",
    "start": "2696010",
    "end": "2703090"
  },
  {
    "text": "metrics based on those filters and you",
    "start": "2703090",
    "end": "2708100"
  },
  {
    "text": "can also export export those logs to AWS elastic cache or s3 and you can explore",
    "start": "2708100",
    "end": "2714190"
  },
  {
    "text": "those logs using Cubana or athina or quick side",
    "start": "2714190",
    "end": "2719700"
  },
  {
    "start": "2720000",
    "end": "2720000"
  },
  {
    "text": "now one other component which I would like to talk about is a SS x-ray now",
    "start": "2723450",
    "end": "2730260"
  },
  {
    "text": "when you are doing debugging or troubleshooting your service application a SS x-ray is a really useful service it",
    "start": "2730260",
    "end": "2740520"
  },
  {
    "text": "allows you to capture information from inside the lambda function and execution of the lambda functions there are two",
    "start": "2740520",
    "end": "2748589"
  },
  {
    "text": "basic things about a SS extra integration you can enable tracing for",
    "start": "2748589",
    "end": "2755849"
  },
  {
    "text": "your function so as you can see here you can do that by doing clicking that",
    "start": "2755849",
    "end": "2763470"
  },
  {
    "text": "checkbox when you are when you want to enable x-ray integration tracing and then you can also inside your function",
    "start": "2763470",
    "end": "2771839"
  },
  {
    "text": "optionally include x-ray SDK that allows you to capture detailed information",
    "start": "2771839",
    "end": "2777660"
  },
  {
    "text": "about the calls within your lambda function and you get this awesome diagram which shows you how your clients",
    "start": "2777660",
    "end": "2785309"
  },
  {
    "text": "are calling your lambda function how many success and failures and what are the external calls your lambda function",
    "start": "2785309",
    "end": "2792299"
  },
  {
    "text": "is making to either d SS other a SS",
    "start": "2792299",
    "end": "2797730"
  },
  {
    "text": "services or other HTTP endpoints it's a really powerful tool when you are doing",
    "start": "2797730",
    "end": "2803460"
  },
  {
    "text": "debugging and troubleshooting of your service application and whenever I am",
    "start": "2803460",
    "end": "2808740"
  },
  {
    "text": "talking to any of the customers and the first thing if they are want to do any troubleshooting is I recommend them to",
    "start": "2808740",
    "end": "2816540"
  },
  {
    "text": "actually enable AWS x-ray another thing",
    "start": "2816540",
    "end": "2822420"
  },
  {
    "start": "2820000",
    "end": "2820000"
  },
  {
    "text": "you get with that is this really awesome water flow diagram of the flow of the application it is really useful when you",
    "start": "2822420",
    "end": "2829920"
  },
  {
    "text": "are troubleshooting and you want to see which components within your service application is slow or responding or",
    "start": "2829920",
    "end": "2837140"
  },
  {
    "text": "slowly or taking more time",
    "start": "2837140",
    "end": "2841338"
  },
  {
    "text": "now if if you want to understand more about what are the different resources",
    "start": "2845700",
    "end": "2851950"
  },
  {
    "text": "we have available at our service ecosystem at AWS you can go to this page",
    "start": "2851950",
    "end": "2858130"
  },
  {
    "text": "aw amazon.com slash serverless and it will give you more information",
    "start": "2858130",
    "end": "2863859"
  },
  {
    "text": "and you can learn more about different services we have at AWS for in service",
    "start": "2863859",
    "end": "2869260"
  },
  {
    "text": "ecosystem you can see in the center bar you can look at the serverless",
    "start": "2869260",
    "end": "2875410"
  },
  {
    "text": "application repository you can also see what are the developer tools we have and",
    "start": "2875410",
    "end": "2881049"
  },
  {
    "text": "other resources and some of the partners we have who are working and building",
    "start": "2881049",
    "end": "2886630"
  },
  {
    "text": "capabilities on top of different AWS services again thanks for coming my name",
    "start": "2886630",
    "end": "2896410"
  },
  {
    "text": "is Siobhan and if you have any questions you can follow me on twitter my handle",
    "start": "2896410",
    "end": "2901660"
  },
  {
    "text": "is she wants underscore saying and thank",
    "start": "2901660",
    "end": "2906849"
  },
  {
    "text": "you very much",
    "start": "2906849",
    "end": "2909329"
  },
  {
    "text": "so any questions",
    "start": "2915010",
    "end": "2919270"
  },
  {
    "text": "okay so just for the livestream the cushion is the time how much you can run",
    "start": "2937930",
    "end": "2945050"
  },
  {
    "text": "your lambda function and is there a way to extend that so right now we have around you can each lambda function can",
    "start": "2945050",
    "end": "2953510"
  },
  {
    "text": "run for 15 minutes you there's no way you can go beyond that but the way we",
    "start": "2953510",
    "end": "2960530"
  },
  {
    "text": "have seen customers using lambda function is between you have a limit of",
    "start": "2960530",
    "end": "2966470"
  },
  {
    "text": "15 minutes to run each lambda function yes",
    "start": "2966470",
    "end": "2974350"
  },
  {
    "text": "sorry so your question is about how do you tune your lambda function",
    "start": "3000230",
    "end": "3007240"
  },
  {
    "text": "right so so your question is about tuning your excuse me tuning your lambda",
    "start": "3018230",
    "end": "3024630"
  },
  {
    "text": "function and also using the free tier for that four hundred gigabit per",
    "start": "3024630",
    "end": "3030000"
  },
  {
    "text": "customer per month you get its gigabits",
    "start": "3030000",
    "end": "3037340"
  },
  {
    "text": "so the so the V so right now there is",
    "start": "3038120",
    "end": "3045510"
  },
  {
    "text": "single knob to actually tune your lambda function and essentially when you create",
    "start": "3045510",
    "end": "3051600"
  },
  {
    "text": "a lambda function you have memory which you allocate to your lambda function and",
    "start": "3051600",
    "end": "3057600"
  },
  {
    "text": "based on the how much memory you allocate to a lambda function it automatically locates the corresponding",
    "start": "3057600",
    "end": "3065280"
  },
  {
    "text": "CPU and network bandwidth for that lambda function now for the payment side",
    "start": "3065280",
    "end": "3071580"
  },
  {
    "text": "of it you actually pay for the compute",
    "start": "3071580",
    "end": "3076650"
  },
  {
    "text": "time or the runtime of your lambda function as well as the storage so",
    "start": "3076650",
    "end": "3083880"
  },
  {
    "text": "that's the combination of what you pay for your lambda function does that",
    "start": "3083880",
    "end": "3090180"
  },
  {
    "text": "answer your question",
    "start": "3090180",
    "end": "3092660"
  },
  {
    "text": "yes I I think I can answer your question",
    "start": "3097059",
    "end": "3103989"
  },
  {
    "text": "late later in the during the workshop I need to look into what exactly your",
    "start": "3103989",
    "end": "3110499"
  },
  {
    "text": "question is about the network bandwidth and I can help you calculate that if you have any specific use case okay oh yeah",
    "start": "3110499",
    "end": "3123269"
  },
  {
    "text": "performance penalty",
    "start": "3127259",
    "end": "3130859"
  },
  {
    "text": "no so there is no penalty or anything essentially you are when you're using a",
    "start": "3147800",
    "end": "3154250"
  },
  {
    "text": "lambda leer you actually the combined store sorry you're the total limit for",
    "start": "3154250",
    "end": "3163130"
  },
  {
    "text": "your package the deployment package is including your lambda layer so for each",
    "start": "3163130",
    "end": "3169250"
  },
  {
    "text": "lambda it's not just the lambda function it includes all the layers as well so you have the limit for the whole layer",
    "start": "3169250",
    "end": "3176770"
  },
  {
    "text": "okay I think we'll wrap up here we have",
    "start": "3179080",
    "end": "3184190"
  },
  {
    "text": "a couple of minutes so if you wanna take a break go for it but we will start the workshop at 11:00 and if you have any",
    "start": "3184190",
    "end": "3192620"
  },
  {
    "text": "more questions we can myself and my colleagues will be available here we",
    "start": "3192620",
    "end": "3197780"
  },
  {
    "text": "will be walking around so we can help you answer those questions as well Thanks",
    "start": "3197780",
    "end": "3205420"
  }
]