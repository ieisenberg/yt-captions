[
  {
    "start": "0",
    "end": "30000"
  },
  {
    "text": "[Music]",
    "start": "610",
    "end": "6049"
  },
  {
    "text": "hi this is Shahab with Amazon Web",
    "start": "6049",
    "end": "8790"
  },
  {
    "text": "Services in this section we are going to",
    "start": "8790",
    "end": "11519"
  },
  {
    "text": "take a look at how to use Amazon simple",
    "start": "11519",
    "end": "13559"
  },
  {
    "text": "queue service or sqs in your dotnet",
    "start": "13559",
    "end": "16770"
  },
  {
    "text": "application Amazon simple queue service",
    "start": "16770",
    "end": "19619"
  },
  {
    "text": "is a fully managed Message Queuing",
    "start": "19619",
    "end": "22230"
  },
  {
    "text": "service that makes it easy to decouple",
    "start": "22230",
    "end": "24779"
  },
  {
    "text": "and scale micro-services distributed",
    "start": "24779",
    "end": "27990"
  },
  {
    "text": "systems and server les applications",
    "start": "27990",
    "end": "30359"
  },
  {
    "start": "30000",
    "end": "74000"
  },
  {
    "text": "let's take a look at some",
    "start": "30359",
    "end": "32369"
  },
  {
    "text": "characteristics of Amazon sqs Amazon sqs",
    "start": "32369",
    "end": "36690"
  },
  {
    "text": "is a fast reliable scalable and fully",
    "start": "36690",
    "end": "38969"
  },
  {
    "text": "managed Message Queuing service it makes",
    "start": "38969",
    "end": "42149"
  },
  {
    "text": "it simple and cost effective to decouple",
    "start": "42149",
    "end": "44129"
  },
  {
    "text": "the components of a cloud application",
    "start": "44129",
    "end": "46370"
  },
  {
    "text": "Amazon sqs is a buffer between the",
    "start": "46370",
    "end": "49230"
  },
  {
    "text": "application components that receive data",
    "start": "49230",
    "end": "51660"
  },
  {
    "text": "and those components that process the",
    "start": "51660",
    "end": "53969"
  },
  {
    "text": "data in your system also ask us ensures",
    "start": "53969",
    "end": "57030"
  },
  {
    "text": "delivery of each message at least once",
    "start": "57030",
    "end": "59399"
  },
  {
    "text": "and supports multiple readers and",
    "start": "59399",
    "end": "61739"
  },
  {
    "text": "writers interacting with the same queue",
    "start": "61739",
    "end": "64220"
  },
  {
    "text": "also most of the time each message will",
    "start": "64220",
    "end": "68220"
  },
  {
    "text": "be delivered to your application exactly",
    "start": "68220",
    "end": "70380"
  },
  {
    "text": "once so you should design your system to",
    "start": "70380",
    "end": "73229"
  },
  {
    "text": "be idempotent now let's take a look at",
    "start": "73229",
    "end": "75960"
  },
  {
    "start": "74000",
    "end": "116000"
  },
  {
    "text": "the differences between Amazon sqs and",
    "start": "75960",
    "end": "78330"
  },
  {
    "text": "SNS they are both messaging queues but",
    "start": "78330",
    "end": "81210"
  },
  {
    "text": "there is a slightly differences between",
    "start": "81210",
    "end": "82770"
  },
  {
    "text": "them for example when it comes to",
    "start": "82770",
    "end": "84840"
  },
  {
    "text": "keeping the data Amazon sqs is persisted",
    "start": "84840",
    "end": "88530"
  },
  {
    "text": "however Amazon SNS is not also Amazon",
    "start": "88530",
    "end": "92130"
  },
  {
    "text": "SNS uses push mechanism to push the",
    "start": "92130",
    "end": "95159"
  },
  {
    "text": "notifications to the client and Amazon",
    "start": "95159",
    "end": "97500"
  },
  {
    "text": "SQS uses the pull mechanism so the",
    "start": "97500",
    "end": "101009"
  },
  {
    "text": "clients they need to pull the QD",
    "start": "101009",
    "end": "103110"
  },
  {
    "text": "messages from queue and at last",
    "start": "103110",
    "end": "105990"
  },
  {
    "text": "Amazon SNS has a one-to-many",
    "start": "105990",
    "end": "109369"
  },
  {
    "text": "publish/subscribe method however for sqs",
    "start": "109369",
    "end": "113130"
  },
  {
    "text": "it's a one-to-one send/receive mechanism",
    "start": "113130",
    "end": "116070"
  },
  {
    "start": "116000",
    "end": "141000"
  },
  {
    "text": "now let's take a look at Amazon s qsq",
    "start": "116070",
    "end": "119189"
  },
  {
    "text": "types there are two different queue",
    "start": "119189",
    "end": "120719"
  },
  {
    "text": "types for Amazon sqs there is the",
    "start": "120719",
    "end": "123210"
  },
  {
    "text": "standard queue for which the message",
    "start": "123210",
    "end": "125790"
  },
  {
    "text": "ordering is not guaranteed messages may",
    "start": "125790",
    "end": "128759"
  },
  {
    "text": "be duplicated and true put is nearly",
    "start": "128759",
    "end": "131580"
  },
  {
    "text": "unlimited",
    "start": "131580",
    "end": "132940"
  },
  {
    "text": "we have 5oq which message ordering is",
    "start": "132940",
    "end": "136000"
  },
  {
    "text": "preserved messages are only received",
    "start": "136000",
    "end": "139000"
  },
  {
    "text": "once and true put is limited now let's",
    "start": "139000",
    "end": "142630"
  },
  {
    "start": "141000",
    "end": "203000"
  },
  {
    "text": "take a look at some key concepts when a",
    "start": "142630",
    "end": "145330"
  },
  {
    "text": "consumer takes a message from the queue",
    "start": "145330",
    "end": "148360"
  },
  {
    "text": "it's provided with a receipt handle a",
    "start": "148360",
    "end": "150820"
  },
  {
    "text": "receipt handle is a very important",
    "start": "150820",
    "end": "153250"
  },
  {
    "text": "component because you need the receipt",
    "start": "153250",
    "end": "154870"
  },
  {
    "text": "handle to delete the message from the",
    "start": "154870",
    "end": "157300"
  },
  {
    "text": "queue also the visibility timeout is a",
    "start": "157300",
    "end": "160570"
  },
  {
    "text": "very important concept it's the period",
    "start": "160570",
    "end": "163990"
  },
  {
    "text": "of time that a message is invisible to",
    "start": "163990",
    "end": "166300"
  },
  {
    "text": "the rest of the application after an",
    "start": "166300",
    "end": "168280"
  },
  {
    "text": "application component gets it from the",
    "start": "168280",
    "end": "171250"
  },
  {
    "text": "queue so in this way it prevents",
    "start": "171250",
    "end": "173950"
  },
  {
    "text": "multiple components from purchasing the",
    "start": "173950",
    "end": "176380"
  },
  {
    "text": "same message by locking the messages",
    "start": "176380",
    "end": "179110"
  },
  {
    "text": "also when the application needs more",
    "start": "179110",
    "end": "181930"
  },
  {
    "text": "time for processing you can change this",
    "start": "181930",
    "end": "184390"
  },
  {
    "text": "timeout value dynamically why a change",
    "start": "184390",
    "end": "187300"
  },
  {
    "text": "message visibility operation when the",
    "start": "187300",
    "end": "190630"
  },
  {
    "text": "process is finished the component which",
    "start": "190630",
    "end": "192850"
  },
  {
    "text": "received a message will delete it from",
    "start": "192850",
    "end": "194950"
  },
  {
    "text": "the queue and if processing fails the",
    "start": "194950",
    "end": "199570"
  },
  {
    "text": "lock expires a message becomes available",
    "start": "199570",
    "end": "202180"
  },
  {
    "text": "again now let's take a look at some more",
    "start": "202180",
    "end": "204580"
  },
  {
    "start": "203000",
    "end": "237000"
  },
  {
    "text": "key concepts when it comes to receiving",
    "start": "204580",
    "end": "207190"
  },
  {
    "text": "messages Amazon SQL supports was long",
    "start": "207190",
    "end": "210340"
  },
  {
    "text": "polling and short polling please",
    "start": "210340",
    "end": "212230"
  },
  {
    "text": "remember that short polling is the",
    "start": "212230",
    "end": "213820"
  },
  {
    "text": "default method also Amazon sqs supports",
    "start": "213820",
    "end": "219280"
  },
  {
    "text": "that letter Hughes it means that message",
    "start": "219280",
    "end": "221260"
  },
  {
    "text": "is that for some reason cannot be",
    "start": "221260",
    "end": "223480"
  },
  {
    "text": "successfully processed they will be",
    "start": "223480",
    "end": "226060"
  },
  {
    "text": "sidelined and isolated so you can",
    "start": "226060",
    "end": "229060"
  },
  {
    "text": "analyze these messages in the dead",
    "start": "229060",
    "end": "231610"
  },
  {
    "text": "letter Q later to determine the cause of",
    "start": "231610",
    "end": "234130"
  },
  {
    "text": "failure or if you want to retry the",
    "start": "234130",
    "end": "236500"
  },
  {
    "text": "operation now let's take a look at some",
    "start": "236500",
    "end": "239110"
  },
  {
    "start": "237000",
    "end": "271000"
  },
  {
    "text": "basic you operations that Amazon sqs",
    "start": "239110",
    "end": "242140"
  },
  {
    "text": "supports there is a full list of api is",
    "start": "242140",
    "end": "244870"
  },
  {
    "text": "provided in the URL i have provided in",
    "start": "244870",
    "end": "247330"
  },
  {
    "text": "the bottom of the screen however the",
    "start": "247330",
    "end": "249760"
  },
  {
    "text": "more important ones that I put it",
    "start": "249760",
    "end": "251500"
  },
  {
    "text": "together are create queue set queue",
    "start": "251500",
    "end": "254739"
  },
  {
    "text": "attributes get queue attributes get",
    "start": "254739",
    "end": "257350"
  },
  {
    "text": "queue URL least queues and delete queues",
    "start": "257350",
    "end": "260190"
  },
  {
    "text": "please remember that through the gets",
    "start": "260190",
    "end": "262930"
  },
  {
    "text": "here crate queue you can set delay",
    "start": "262930",
    "end": "265510"
  },
  {
    "text": "seconds and visible",
    "start": "265510",
    "end": "266740"
  },
  {
    "text": "the timeout which are very important for",
    "start": "266740",
    "end": "269259"
  },
  {
    "text": "the purpose of your application now",
    "start": "269259",
    "end": "271840"
  },
  {
    "start": "271000",
    "end": "604000"
  },
  {
    "text": "let's take a look at how to use the SQS",
    "start": "271840",
    "end": "274509"
  },
  {
    "text": "api's in a dotnet application interface",
    "start": "274509",
    "end": "277150"
  },
  {
    "text": "using visual studio in microsoft visual",
    "start": "277150",
    "end": "281110"
  },
  {
    "text": "studio you can always see the amazon sqs",
    "start": "281110",
    "end": "285250"
  },
  {
    "text": "under amazon explorer window you can",
    "start": "285250",
    "end": "289360"
  },
  {
    "text": "always expand the tab and see the name",
    "start": "289360",
    "end": "291699"
  },
  {
    "text": "of the accused that you already have",
    "start": "291699",
    "end": "293470"
  },
  {
    "text": "created in order to use the Amazon sqs",
    "start": "293470",
    "end": "298180"
  },
  {
    "text": "aps in the earning in Visual Studio I'm",
    "start": "298180",
    "end": "301840"
  },
  {
    "text": "going to use a sample application let's",
    "start": "301840",
    "end": "304449"
  },
  {
    "text": "go to file new project under visual",
    "start": "304449",
    "end": "308710"
  },
  {
    "text": "c-sharp",
    "start": "308710",
    "end": "309729"
  },
  {
    "text": "aw samples you should be able to see app",
    "start": "309729",
    "end": "312849"
  },
  {
    "text": "services click on SQL sample and click",
    "start": "312849",
    "end": "315789"
  },
  {
    "text": "OK you are allowed to choose the profile",
    "start": "315789",
    "end": "321009"
  },
  {
    "text": "and region in this screen you can always",
    "start": "321009",
    "end": "323409"
  },
  {
    "text": "change the screen in the app config file",
    "start": "323409",
    "end": "326139"
  },
  {
    "text": "later also in order to use Amazon SDK",
    "start": "326139",
    "end": "333909"
  },
  {
    "text": "for sqs you always need the proper",
    "start": "333909",
    "end": "336669"
  },
  {
    "text": "nougat package here this sample already",
    "start": "336669",
    "end": "339430"
  },
  {
    "text": "has the nougat package downloaded and",
    "start": "339430",
    "end": "342039"
  },
  {
    "text": "installed if you are working on a new",
    "start": "342039",
    "end": "344979"
  },
  {
    "text": "application you just need to right-click",
    "start": "344979",
    "end": "346900"
  },
  {
    "text": "on dependencies go to manage nougat",
    "start": "346900",
    "end": "349060"
  },
  {
    "text": "packages and search for AWS SDK AWS SDK",
    "start": "349060",
    "end": "357039"
  },
  {
    "text": "that sqs and you can click on it here",
    "start": "357039",
    "end": "360580"
  },
  {
    "text": "since its installed",
    "start": "360580",
    "end": "361930"
  },
  {
    "text": "I can uninstall or update it in your",
    "start": "361930",
    "end": "364539"
  },
  {
    "text": "case you should be able to see the",
    "start": "364539",
    "end": "366190"
  },
  {
    "text": "install and click on install it since",
    "start": "366190",
    "end": "370960"
  },
  {
    "text": "this is a console application everything",
    "start": "370960",
    "end": "372849"
  },
  {
    "text": "gets started from the program that CS",
    "start": "372849",
    "end": "375069"
  },
  {
    "text": "file let's take a look at program that",
    "start": "375069",
    "end": "377289"
  },
  {
    "text": "CS as you can see we are importing",
    "start": "377289",
    "end": "382090"
  },
  {
    "text": "Amazon that sqs and SQS that model these",
    "start": "382090",
    "end": "385000"
  },
  {
    "text": "libraries are required for you to use",
    "start": "385000",
    "end": "387909"
  },
  {
    "text": "SQS api's in your dotnet application if",
    "start": "387909",
    "end": "390729"
  },
  {
    "text": "you are creating a new application you",
    "start": "390729",
    "end": "393460"
  },
  {
    "text": "should import this libraries or use them",
    "start": "393460",
    "end": "397589"
  },
  {
    "text": "in order to use Amazon sqs you need to",
    "start": "397650",
    "end": "400949"
  },
  {
    "text": "create a client this client should be of",
    "start": "400949",
    "end": "403830"
  },
  {
    "text": "type Amazon sqs client after you have",
    "start": "403830",
    "end": "407460"
  },
  {
    "text": "the client created you can use this",
    "start": "407460",
    "end": "409380"
  },
  {
    "text": "client to create a queue to least queues",
    "start": "409380",
    "end": "414050"
  },
  {
    "text": "to send messages to the queues or to",
    "start": "414050",
    "end": "419010"
  },
  {
    "text": "receive messages from the queue for each",
    "start": "419010",
    "end": "423780"
  },
  {
    "text": "operation you will need a request for",
    "start": "423780",
    "end": "426030"
  },
  {
    "text": "example sqs request to create a queue",
    "start": "426030",
    "end": "428760"
  },
  {
    "text": "just requires a queue name here in this",
    "start": "428760",
    "end": "431910"
  },
  {
    "text": "scenario we can call it my AWS queue to",
    "start": "431910",
    "end": "435870"
  },
  {
    "text": "create a queue name also after you",
    "start": "435870",
    "end": "440910"
  },
  {
    "text": "created a queue to lease the queue you",
    "start": "440910",
    "end": "443070"
  },
  {
    "text": "also need a least queue request the",
    "start": "443070",
    "end": "445979"
  },
  {
    "text": "lease queue request doesn't enforce you",
    "start": "445979",
    "end": "447930"
  },
  {
    "text": "to pass any arguments when you want to",
    "start": "447930",
    "end": "452430"
  },
  {
    "text": "send a message you need to create a send",
    "start": "452430",
    "end": "454770"
  },
  {
    "text": "message request the minimum information",
    "start": "454770",
    "end": "457260"
  },
  {
    "text": "you need to provide for the send message",
    "start": "457260",
    "end": "459510"
  },
  {
    "text": "request is the queue URL and a message",
    "start": "459510",
    "end": "462539"
  },
  {
    "text": "body and I'm going to call it this is my",
    "start": "462539",
    "end": "466190"
  },
  {
    "text": "new message text from AWS at last one",
    "start": "466190",
    "end": "475020"
  },
  {
    "text": "you want to receive a messages you need",
    "start": "475020",
    "end": "476940"
  },
  {
    "text": "to define an receive message request the",
    "start": "476940",
    "end": "480840"
  },
  {
    "text": "minimum thing you need to provide is the",
    "start": "480840",
    "end": "482880"
  },
  {
    "text": "queue URL after you do that the message",
    "start": "482880",
    "end": "486750"
  },
  {
    "text": "can have the response can have one or",
    "start": "486750",
    "end": "490440"
  },
  {
    "text": "more set of messages you need to go",
    "start": "490440",
    "end": "493080"
  },
  {
    "text": "through those messages and you need to",
    "start": "493080",
    "end": "494910"
  },
  {
    "text": "properly process them in a way that you",
    "start": "494910",
    "end": "497310"
  },
  {
    "text": "want please remember as I mentioned",
    "start": "497310",
    "end": "500970"
  },
  {
    "text": "before the response to receive message",
    "start": "500970",
    "end": "503910"
  },
  {
    "text": "will return you a receipt handle you",
    "start": "503910",
    "end": "506789"
  },
  {
    "text": "need duties receipt handle if you need",
    "start": "506789",
    "end": "509820"
  },
  {
    "text": "to delete the request when you are done",
    "start": "509820",
    "end": "512640"
  },
  {
    "text": "with processing and you need to delete",
    "start": "512640",
    "end": "514800"
  },
  {
    "text": "the process the request after you are",
    "start": "514800",
    "end": "517560"
  },
  {
    "text": "done processing to order to call the",
    "start": "517560",
    "end": "520589"
  },
  {
    "text": "delete request you need to provide the",
    "start": "520589",
    "end": "525959"
  },
  {
    "text": "queue name or URL and also the receipt",
    "start": "525959",
    "end": "529829"
  },
  {
    "text": "handle",
    "start": "529829",
    "end": "532279"
  },
  {
    "text": "always also you can catch the sqs",
    "start": "533810",
    "end": "537270"
  },
  {
    "text": "exception to any sqs api carl that can",
    "start": "537270",
    "end": "541170"
  },
  {
    "text": "tell you more information about if",
    "start": "541170",
    "end": "543840"
  },
  {
    "text": "anything goes wrong now let's run this",
    "start": "543840",
    "end": "547320"
  },
  {
    "text": "application start without debugging and",
    "start": "547320",
    "end": "551030"
  },
  {
    "text": "let's see how it works so it is create a",
    "start": "551030",
    "end": "554190"
  },
  {
    "text": "queue called my queue and then print",
    "start": "554190",
    "end": "556770"
  },
  {
    "text": "list of Amazon sqs queues and you can",
    "start": "556770",
    "end": "560010"
  },
  {
    "text": "see my a SS queue is here now then we",
    "start": "560010",
    "end": "563940"
  },
  {
    "text": "sent a message to my queue in this case",
    "start": "563940",
    "end": "567150"
  },
  {
    "text": "is my a SS queue and we got it and it",
    "start": "567150",
    "end": "571920"
  },
  {
    "text": "says that it could receive the message",
    "start": "571920",
    "end": "573780"
  },
  {
    "text": "this is my new message text from AWS and",
    "start": "573780",
    "end": "577140"
  },
  {
    "text": "at last we deleted the message in this",
    "start": "577140",
    "end": "581190"
  },
  {
    "text": "example I did show you how to use SQS",
    "start": "581190",
    "end": "585150"
  },
  {
    "text": "api's in your dotnet application in this",
    "start": "585150",
    "end": "588540"
  },
  {
    "text": "video we went over how to use Amazon sqs",
    "start": "588540",
    "end": "591540"
  },
  {
    "text": "in your dotnet application thank you for",
    "start": "591540",
    "end": "594180"
  },
  {
    "text": "watching",
    "start": "594180",
    "end": "596540"
  },
  {
    "text": "[Music]",
    "start": "596620",
    "end": "606099"
  }
]