[
  {
    "text": "hello and thank you for watching this",
    "start": "2080",
    "end": "3679"
  },
  {
    "text": "video",
    "start": "3679",
    "end": "4160"
  },
  {
    "text": "on how to use serverless eventbus in.net",
    "start": "4160",
    "end": "6399"
  },
  {
    "text": "applications on aws",
    "start": "6399",
    "end": "8880"
  },
  {
    "text": "my name is carlos santos and i'm a",
    "start": "8880",
    "end": "10559"
  },
  {
    "text": "microsoft specialist solutions architect",
    "start": "10559",
    "end": "13200"
  },
  {
    "text": "we will start off with a short",
    "start": "13200",
    "end": "14559"
  },
  {
    "text": "explanation of what amazon event bridge",
    "start": "14559",
    "end": "17119"
  },
  {
    "text": "is",
    "start": "17119",
    "end": "17680"
  },
  {
    "text": "and some use cases for it then we'll see",
    "start": "17680",
    "end": "20880"
  },
  {
    "text": "how to publish and consume events",
    "start": "20880",
    "end": "22480"
  },
  {
    "text": "using.net amazon eventbridge is a",
    "start": "22480",
    "end": "25920"
  },
  {
    "text": "serverless event bus service",
    "start": "25920",
    "end": "27599"
  },
  {
    "text": "it helps you ingest and route events",
    "start": "27599",
    "end": "29279"
  },
  {
    "text": "from aws services",
    "start": "29279",
    "end": "31039"
  },
  {
    "text": "your own applications and sas",
    "start": "31039",
    "end": "33040"
  },
  {
    "text": "applications",
    "start": "33040",
    "end": "34719"
  },
  {
    "text": "it is a fully managed service so there's",
    "start": "34719",
    "end": "36719"
  },
  {
    "text": "no infrastructure to manage or provision",
    "start": "36719",
    "end": "39520"
  },
  {
    "text": "scaling is managed for you and you only",
    "start": "39520",
    "end": "41440"
  },
  {
    "text": "pay for what you use",
    "start": "41440",
    "end": "43440"
  },
  {
    "text": "it offers native integrations with sas",
    "start": "43440",
    "end": "45200"
  },
  {
    "text": "providers and traffic travels internally",
    "start": "45200",
    "end": "47920"
  },
  {
    "text": "within aws infrastructure",
    "start": "47920",
    "end": "49920"
  },
  {
    "text": "when you work with sas providers instead",
    "start": "49920",
    "end": "51840"
  },
  {
    "text": "of on the public internet",
    "start": "51840",
    "end": "54640"
  },
  {
    "text": "eventbridge also integrates with over",
    "start": "54640",
    "end": "56239"
  },
  {
    "text": "100 aws services",
    "start": "56239",
    "end": "58160"
  },
  {
    "text": "as sources and 21 services as targets",
    "start": "58160",
    "end": "63280"
  },
  {
    "text": "it costs one dollar per million events",
    "start": "63280",
    "end": "65680"
  },
  {
    "text": "and there's no charge for events sourced",
    "start": "65680",
    "end": "67600"
  },
  {
    "text": "from aws services",
    "start": "67600",
    "end": "69520"
  },
  {
    "text": "or for the delivery of events",
    "start": "69520",
    "end": "72000"
  },
  {
    "text": "eventbridge was formerly called",
    "start": "72000",
    "end": "74000"
  },
  {
    "text": "amazon cloudwatch events and uses the",
    "start": "74000",
    "end": "76240"
  },
  {
    "text": "same cloudwatch events api",
    "start": "76240",
    "end": "78400"
  },
  {
    "text": "so all of your existing cloudwatch",
    "start": "78400",
    "end": "79840"
  },
  {
    "text": "events api usage remains the same",
    "start": "79840",
    "end": "82799"
  },
  {
    "text": "let's take a look at how eventbridge",
    "start": "82799",
    "end": "84840"
  },
  {
    "text": "works",
    "start": "84840",
    "end": "87200"
  },
  {
    "text": "eventbridge connects applications using",
    "start": "87200",
    "end": "89040"
  },
  {
    "text": "events an event is a signal that a",
    "start": "89040",
    "end": "91520"
  },
  {
    "text": "system state has changed",
    "start": "91520",
    "end": "93520"
  },
  {
    "text": "such as an order being placed by a",
    "start": "93520",
    "end": "95200"
  },
  {
    "text": "customer",
    "start": "95200",
    "end": "97200"
  },
  {
    "text": "to write code to reactor events you need",
    "start": "97200",
    "end": "99360"
  },
  {
    "text": "to know the event schema",
    "start": "99360",
    "end": "100960"
  },
  {
    "text": "which includes information such as the",
    "start": "100960",
    "end": "103040"
  },
  {
    "text": "title",
    "start": "103040",
    "end": "104000"
  },
  {
    "text": "format and validation rules for each",
    "start": "104000",
    "end": "106479"
  },
  {
    "text": "piece of event data",
    "start": "106479",
    "end": "108720"
  },
  {
    "text": "the event bridge schema registry stores",
    "start": "108720",
    "end": "111040"
  },
  {
    "text": "a collection of easy-to-find schemas",
    "start": "111040",
    "end": "113200"
  },
  {
    "text": "generated by your organization's",
    "start": "113200",
    "end": "114720"
  },
  {
    "text": "applications aws services",
    "start": "114720",
    "end": "117280"
  },
  {
    "text": "or sas applications there are four main",
    "start": "117280",
    "end": "120799"
  },
  {
    "text": "concepts that make up eventbridge",
    "start": "120799",
    "end": "123119"
  },
  {
    "text": "event sources even buses rules",
    "start": "123119",
    "end": "126640"
  },
  {
    "text": "and targets it all starts with an event",
    "start": "126640",
    "end": "130160"
  },
  {
    "text": "source",
    "start": "130160",
    "end": "130959"
  },
  {
    "text": "these can be any one of over 100 aws",
    "start": "130959",
    "end": "133920"
  },
  {
    "text": "services",
    "start": "133920",
    "end": "134800"
  },
  {
    "text": "custom applications you write or sas",
    "start": "134800",
    "end": "137440"
  },
  {
    "text": "applications",
    "start": "137440",
    "end": "140080"
  },
  {
    "text": "when you use a sas application",
    "start": "140080",
    "end": "141680"
  },
  {
    "text": "integration there's a special resource",
    "start": "141680",
    "end": "143520"
  },
  {
    "text": "called a partner event source",
    "start": "143520",
    "end": "145360"
  },
  {
    "text": "that provides a logical connection",
    "start": "145360",
    "end": "147120"
  },
  {
    "text": "between the partner system",
    "start": "147120",
    "end": "148800"
  },
  {
    "text": "and your aws account without the need",
    "start": "148800",
    "end": "151680"
  },
  {
    "text": "for provisioning",
    "start": "151680",
    "end": "152800"
  },
  {
    "text": "and managing cross-account iam roles or",
    "start": "152800",
    "end": "155120"
  },
  {
    "text": "credentials",
    "start": "155120",
    "end": "157519"
  },
  {
    "text": "at the core of eventbridge are event",
    "start": "157519",
    "end": "159280"
  },
  {
    "text": "buses an eventbus",
    "start": "159280",
    "end": "161040"
  },
  {
    "text": "is a mechanism that allows different",
    "start": "161040",
    "end": "162640"
  },
  {
    "text": "components to communicate with each",
    "start": "162640",
    "end": "164319"
  },
  {
    "text": "other",
    "start": "164319",
    "end": "164959"
  },
  {
    "text": "using a publish subscribe communication",
    "start": "164959",
    "end": "166720"
  },
  {
    "text": "style without knowing about each other",
    "start": "166720",
    "end": "169760"
  },
  {
    "text": "a component can send an event to an",
    "start": "169760",
    "end": "171280"
  },
  {
    "text": "event bus without knowing who",
    "start": "171280",
    "end": "173040"
  },
  {
    "text": "or how many will pick it up if you're",
    "start": "173040",
    "end": "175840"
  },
  {
    "text": "familiar with the cloudwatch event's",
    "start": "175840",
    "end": "177280"
  },
  {
    "text": "default eventbus",
    "start": "177280",
    "end": "178959"
  },
  {
    "text": "this is exactly the same thing except",
    "start": "178959",
    "end": "181360"
  },
  {
    "text": "you can create your own custom event",
    "start": "181360",
    "end": "182800"
  },
  {
    "text": "buses",
    "start": "182800",
    "end": "183599"
  },
  {
    "text": "as well as event buses dedicated to",
    "start": "183599",
    "end": "185360"
  },
  {
    "text": "ingesting partner events",
    "start": "185360",
    "end": "188640"
  },
  {
    "text": "once you have an eventbus you can",
    "start": "188720",
    "end": "190319"
  },
  {
    "text": "associate rules with it",
    "start": "190319",
    "end": "192319"
  },
  {
    "text": "rules allow you to match against values",
    "start": "192319",
    "end": "194159"
  },
  {
    "text": "in the metadata and payloads of the",
    "start": "194159",
    "end": "195840"
  },
  {
    "text": "events ingested",
    "start": "195840",
    "end": "197360"
  },
  {
    "text": "and determine which events should get",
    "start": "197360",
    "end": "198879"
  },
  {
    "text": "routed to which destinations",
    "start": "198879",
    "end": "200800"
  },
  {
    "text": "and optionally apply a transformation",
    "start": "200800",
    "end": "203840"
  },
  {
    "text": "finally you can associate multiple",
    "start": "203840",
    "end": "206000"
  },
  {
    "text": "targets with each rule",
    "start": "206000",
    "end": "207360"
  },
  {
    "text": "in order to send the events that match",
    "start": "207360",
    "end": "209200"
  },
  {
    "text": "to the appropriate destination",
    "start": "209200",
    "end": "211440"
  },
  {
    "text": "targets allow you to do things like",
    "start": "211440",
    "end": "212879"
  },
  {
    "text": "invoke a lambda function",
    "start": "212879",
    "end": "214799"
  },
  {
    "text": "put a record on a kinesis data stream or",
    "start": "214799",
    "end": "216959"
  },
  {
    "text": "firehose",
    "start": "216959",
    "end": "218560"
  },
  {
    "text": "start the execution of a step functions",
    "start": "218560",
    "end": "220400"
  },
  {
    "text": "workflow or integrate with many other",
    "start": "220400",
    "end": "222480"
  },
  {
    "text": "services",
    "start": "222480",
    "end": "224159"
  },
  {
    "text": "let's take a look at some examples of",
    "start": "224159",
    "end": "225760"
  },
  {
    "text": "how rules can match a sample event",
    "start": "225760",
    "end": "229120"
  },
  {
    "text": "here we have a sample event for an order",
    "start": "229120",
    "end": "230959"
  },
  {
    "text": "being created",
    "start": "230959",
    "end": "232720"
  },
  {
    "text": "in this example the rule matches using",
    "start": "232720",
    "end": "234640"
  },
  {
    "text": "the source",
    "start": "234640",
    "end": "235840"
  },
  {
    "text": "it's a simple equality comparison and",
    "start": "235840",
    "end": "238400"
  },
  {
    "text": "because the value in the rule matches",
    "start": "238400",
    "end": "239920"
  },
  {
    "text": "that of the event",
    "start": "239920",
    "end": "241040"
  },
  {
    "text": "the event is forwarded to the targets",
    "start": "241040",
    "end": "244000"
  },
  {
    "text": "looking at a slightly more advanced",
    "start": "244000",
    "end": "245280"
  },
  {
    "text": "scenario",
    "start": "245280",
    "end": "246319"
  },
  {
    "text": "the rule will match a message with",
    "start": "246319",
    "end": "247760"
  },
  {
    "text": "either the billing or fulfillment",
    "start": "247760",
    "end": "249519"
  },
  {
    "text": "departments",
    "start": "249519",
    "end": "251280"
  },
  {
    "text": "however this event would not be matched",
    "start": "251280",
    "end": "253439"
  },
  {
    "text": "because the rule is looking for a",
    "start": "253439",
    "end": "254640"
  },
  {
    "text": "detailed type of order shipped",
    "start": "254640",
    "end": "257280"
  },
  {
    "text": "with eventbridge you can remove the",
    "start": "257280",
    "end": "258799"
  },
  {
    "text": "friction of having to write",
    "start": "258799",
    "end": "259840"
  },
  {
    "text": "point-to-point integrations between",
    "start": "259840",
    "end": "261359"
  },
  {
    "text": "services",
    "start": "261359",
    "end": "262639"
  },
  {
    "text": "you can take action on sas messages by",
    "start": "262639",
    "end": "265440"
  },
  {
    "text": "writing rules that send events to a",
    "start": "265440",
    "end": "266960"
  },
  {
    "text": "lambda function",
    "start": "266960",
    "end": "268240"
  },
  {
    "text": "which can take automatic remediation to",
    "start": "268240",
    "end": "270720"
  },
  {
    "text": "fix the issue",
    "start": "270720",
    "end": "272000"
  },
  {
    "text": "for example call an api of an internal",
    "start": "272000",
    "end": "274320"
  },
  {
    "text": "microservice",
    "start": "274320",
    "end": "276400"
  },
  {
    "text": "or run aws step functions workflows as a",
    "start": "276400",
    "end": "279360"
  },
  {
    "text": "result of an event being published",
    "start": "279360",
    "end": "282080"
  },
  {
    "text": "or you can apply intelligence to your",
    "start": "282080",
    "end": "283759"
  },
  {
    "text": "workloads by adding machine learning in",
    "start": "283759",
    "end": "285759"
  },
  {
    "text": "response to events",
    "start": "285759",
    "end": "287919"
  },
  {
    "text": "you can audit and analyze events by",
    "start": "287919",
    "end": "289919"
  },
  {
    "text": "sending events to amazon kinesis data",
    "start": "289919",
    "end": "292000"
  },
  {
    "text": "firehose",
    "start": "292000",
    "end": "293040"
  },
  {
    "text": "where you can capture transform and",
    "start": "293040",
    "end": "295840"
  },
  {
    "text": "deliver data to amazon s3",
    "start": "295840",
    "end": "298000"
  },
  {
    "text": "where you can use amazon athena to query",
    "start": "298000",
    "end": "300400"
  },
  {
    "text": "and analyze the data using standard sql",
    "start": "300400",
    "end": "303440"
  },
  {
    "text": "you can synchronize data from desperate",
    "start": "303440",
    "end": "305280"
  },
  {
    "text": "systems for example",
    "start": "305280",
    "end": "307199"
  },
  {
    "text": "use changes in customer data in your",
    "start": "307199",
    "end": "308880"
  },
  {
    "text": "customer relationship management system",
    "start": "308880",
    "end": "311280"
  },
  {
    "text": "to trigger workflows in other systems by",
    "start": "311280",
    "end": "314000"
  },
  {
    "text": "sending an event to eventbridge when the",
    "start": "314000",
    "end": "315840"
  },
  {
    "text": "status of an",
    "start": "315840",
    "end": "316639"
  },
  {
    "text": "opportunity changes to closed one and",
    "start": "316639",
    "end": "319440"
  },
  {
    "text": "trigger a workflow that will synchronize",
    "start": "319440",
    "end": "321280"
  },
  {
    "text": "the changes in dynamodb",
    "start": "321280",
    "end": "324000"
  },
  {
    "text": "let's see eventbridge in action in this",
    "start": "324000",
    "end": "326800"
  },
  {
    "text": "example we're going to use the",
    "start": "326800",
    "end": "328080"
  },
  {
    "text": "modernization unicorn store",
    "start": "328080",
    "end": "329840"
  },
  {
    "text": "github project available at github.com",
    "start": "329840",
    "end": "333120"
  },
  {
    "text": "forward slash aws dash samples",
    "start": "333120",
    "end": "336880"
  },
  {
    "text": "forward slash modernization dash unicorn",
    "start": "336880",
    "end": "340479"
  },
  {
    "text": "dash store",
    "start": "340479",
    "end": "343520"
  },
  {
    "text": "if you're not familiar with it it allows",
    "start": "343600",
    "end": "345120"
  },
  {
    "text": "you to place orders for unicorns",
    "start": "345120",
    "end": "347440"
  },
  {
    "text": "currently when an order is placed it is",
    "start": "347440",
    "end": "349520"
  },
  {
    "text": "persisted to the sql server database",
    "start": "349520",
    "end": "352639"
  },
  {
    "text": "what we're going to do is also publish a",
    "start": "352639",
    "end": "354160"
  },
  {
    "text": "custom event using eventbridge",
    "start": "354160",
    "end": "356319"
  },
  {
    "text": "when an order is created changing our",
    "start": "356319",
    "end": "359440"
  },
  {
    "text": "unicorn application to use eventbridge",
    "start": "359440",
    "end": "361680"
  },
  {
    "text": "will allow other services to subscribe",
    "start": "361680",
    "end": "363520"
  },
  {
    "text": "to those events and",
    "start": "363520",
    "end": "364880"
  },
  {
    "text": "execute actions in response in our",
    "start": "364880",
    "end": "368080"
  },
  {
    "text": "example",
    "start": "368080",
    "end": "368880"
  },
  {
    "text": "the new order created event will allow",
    "start": "368880",
    "end": "371039"
  },
  {
    "text": "the marketing department",
    "start": "371039",
    "end": "372240"
  },
  {
    "text": "to start a marketing campaign in",
    "start": "372240",
    "end": "374319"
  },
  {
    "text": "response to that event",
    "start": "374319",
    "end": "376319"
  },
  {
    "text": "we'll go ahead and change the",
    "start": "376319",
    "end": "377759"
  },
  {
    "text": "application so that when we place an",
    "start": "377759",
    "end": "379840"
  },
  {
    "text": "order it publishes an event to event",
    "start": "379840",
    "end": "381680"
  },
  {
    "text": "bridge",
    "start": "381680",
    "end": "383039"
  },
  {
    "text": "thinking back to the presentation",
    "start": "383039",
    "end": "385840"
  },
  {
    "text": "sources publish events to a bus",
    "start": "385840",
    "end": "388240"
  },
  {
    "text": "in this example the unicorn application",
    "start": "388240",
    "end": "390639"
  },
  {
    "text": "will be the source",
    "start": "390639",
    "end": "392160"
  },
  {
    "text": "so let's go ahead and create the event",
    "start": "392160",
    "end": "393600"
  },
  {
    "text": "bus using the aws management console",
    "start": "393600",
    "end": "397440"
  },
  {
    "text": "we'll select amazon event bridge then go",
    "start": "397440",
    "end": "400720"
  },
  {
    "text": "to event buses",
    "start": "400720",
    "end": "403680"
  },
  {
    "text": "here we see the default cloudwatch event",
    "start": "403840",
    "end": "405520"
  },
  {
    "text": "bus mentioned earlier",
    "start": "405520",
    "end": "407680"
  },
  {
    "text": "we'll create a new event buzz for the",
    "start": "407680",
    "end": "409280"
  },
  {
    "text": "events for our application",
    "start": "409280",
    "end": "411840"
  },
  {
    "text": "we'll name it unicorn dash store",
    "start": "411840",
    "end": "415280"
  },
  {
    "text": "since this aws account is not a member",
    "start": "415280",
    "end": "417360"
  },
  {
    "text": "of an organization",
    "start": "417360",
    "end": "418880"
  },
  {
    "text": "and i do not want other aws accounts to",
    "start": "418880",
    "end": "421039"
  },
  {
    "text": "be able to interact",
    "start": "421039",
    "end": "422000"
  },
  {
    "text": "with the event bus i will leave the",
    "start": "422000",
    "end": "424000"
  },
  {
    "text": "permissions options unchecked",
    "start": "424000",
    "end": "425840"
  },
  {
    "text": "to see the integration with aws services",
    "start": "425840",
    "end": "428400"
  },
  {
    "text": "we'll create a rule that will match",
    "start": "428400",
    "end": "430160"
  },
  {
    "text": "the order created event we're going to",
    "start": "430160",
    "end": "431680"
  },
  {
    "text": "publish from the unicorn store",
    "start": "431680",
    "end": "433840"
  },
  {
    "text": "and forward the event to amazon",
    "start": "433840",
    "end": "435199"
  },
  {
    "text": "cloudwatch logs let's go to rules",
    "start": "435199",
    "end": "437919"
  },
  {
    "text": "and select the bus we just created and",
    "start": "437919",
    "end": "440400"
  },
  {
    "text": "click",
    "start": "440400",
    "end": "441039"
  },
  {
    "text": "create rule for now we'll match all",
    "start": "441039",
    "end": "443919"
  },
  {
    "text": "events from the unicorn store",
    "start": "443919",
    "end": "445360"
  },
  {
    "text": "application",
    "start": "445360",
    "end": "446319"
  },
  {
    "text": "so we'll use the name catch-all we'll",
    "start": "446319",
    "end": "449520"
  },
  {
    "text": "select the event pattern",
    "start": "449520",
    "end": "451440"
  },
  {
    "text": "and set the value to match the source",
    "start": "451440",
    "end": "453440"
  },
  {
    "text": "that we'll publish from",
    "start": "453440",
    "end": "456639"
  },
  {
    "text": "event patterns have the same structure",
    "start": "457280",
    "end": "458880"
  },
  {
    "text": "as the events they match and you only",
    "start": "458880",
    "end": "460880"
  },
  {
    "text": "specify fields",
    "start": "460880",
    "end": "462160"
  },
  {
    "text": "that you are filtering for with the",
    "start": "462160",
    "end": "464479"
  },
  {
    "text": "values always as a raise",
    "start": "464479",
    "end": "467440"
  },
  {
    "text": "we'll select our unicorn store event bus",
    "start": "467440",
    "end": "469680"
  },
  {
    "text": "and set the target to a new cloudwatch",
    "start": "469680",
    "end": "471440"
  },
  {
    "text": "lock group",
    "start": "471440",
    "end": "473919"
  },
  {
    "text": "and finish creating the rule",
    "start": "476720",
    "end": "479759"
  },
  {
    "text": "with the rule now created let's go ahead",
    "start": "479759",
    "end": "482160"
  },
  {
    "text": "and change the application to publish",
    "start": "482160",
    "end": "483759"
  },
  {
    "text": "the event",
    "start": "483759",
    "end": "484560"
  },
  {
    "text": "when an event is created the first thing",
    "start": "484560",
    "end": "486800"
  },
  {
    "text": "we'll do is add a reference to the event",
    "start": "486800",
    "end": "488639"
  },
  {
    "text": "page nuget package",
    "start": "488639",
    "end": "491599"
  },
  {
    "text": "it is named aws sdk.eventbridge",
    "start": "491759",
    "end": "496400"
  },
  {
    "text": "we'll click install",
    "start": "497599",
    "end": "500560"
  },
  {
    "text": "we'll go ahead and create a class that",
    "start": "504960",
    "end": "506240"
  },
  {
    "text": "represents the event we will be",
    "start": "506240",
    "end": "507520"
  },
  {
    "text": "publishing",
    "start": "507520",
    "end": "509360"
  },
  {
    "text": "we'll name it order created",
    "start": "509360",
    "end": "512878"
  },
  {
    "text": "and use only a subset of the order",
    "start": "513120",
    "end": "514880"
  },
  {
    "text": "classes properties for the event",
    "start": "514880",
    "end": "518479"
  },
  {
    "text": "now it's time to go to the checkout",
    "start": "518640",
    "end": "520080"
  },
  {
    "text": "controller and publish the event after",
    "start": "520080",
    "end": "522159"
  },
  {
    "text": "the order is saved to the database",
    "start": "522159",
    "end": "525279"
  },
  {
    "text": "for simplicity's sake i'll create the",
    "start": "525279",
    "end": "527519"
  },
  {
    "text": "amazon eventbridge client instance",
    "start": "527519",
    "end": "529920"
  },
  {
    "text": "right after the save changes call to",
    "start": "529920",
    "end": "533040"
  },
  {
    "text": "publish the event we instantiate the put",
    "start": "533040",
    "end": "534720"
  },
  {
    "text": "events request class",
    "start": "534720",
    "end": "536320"
  },
  {
    "text": "and initialize the entries property with",
    "start": "536320",
    "end": "538720"
  },
  {
    "text": "the events that need to be published",
    "start": "538720",
    "end": "541600"
  },
  {
    "text": "we only have one so we'll create one",
    "start": "541600",
    "end": "543920"
  },
  {
    "text": "instance",
    "start": "543920",
    "end": "544800"
  },
  {
    "text": "of pulley events request entry set its",
    "start": "544800",
    "end": "547920"
  },
  {
    "text": "detail type to the name of the event",
    "start": "547920",
    "end": "549680"
  },
  {
    "text": "which is order created",
    "start": "549680",
    "end": "552560"
  },
  {
    "text": "the event bus name to unicorn dash store",
    "start": "552560",
    "end": "555600"
  },
  {
    "text": "the name of the bus we created earlier",
    "start": "555600",
    "end": "558080"
  },
  {
    "text": "and the source says",
    "start": "558080",
    "end": "559120"
  },
  {
    "text": "unicorn dash store forward slash",
    "start": "559120",
    "end": "561760"
  },
  {
    "text": "storefront",
    "start": "561760",
    "end": "563920"
  },
  {
    "text": "the detail property contains the event",
    "start": "563920",
    "end": "565519"
  },
  {
    "text": "payload as a json string",
    "start": "565519",
    "end": "567440"
  },
  {
    "text": "so we'll serialize our order created",
    "start": "567440",
    "end": "569120"
  },
  {
    "text": "event class",
    "start": "569120",
    "end": "571200"
  },
  {
    "text": "let's go ahead and run the application",
    "start": "571200",
    "end": "572959"
  },
  {
    "text": "again and create an order",
    "start": "572959",
    "end": "577839"
  },
  {
    "text": "when i create an order we should see the",
    "start": "578080",
    "end": "579920"
  },
  {
    "text": "event in cloudwatch because of the",
    "start": "579920",
    "end": "581600"
  },
  {
    "text": "target we set up earlier",
    "start": "581600",
    "end": "584640"
  },
  {
    "text": "let's go to cloudwatch logs",
    "start": "584640",
    "end": "590160"
  },
  {
    "text": "and a target log group",
    "start": "590160",
    "end": "593199"
  },
  {
    "text": "here we see the event being logged it is",
    "start": "594240",
    "end": "596720"
  },
  {
    "text": "that easy to publish events and",
    "start": "596720",
    "end": "598320"
  },
  {
    "text": "integrate with aws services",
    "start": "598320",
    "end": "601920"
  },
  {
    "text": "now imagine that the marketing",
    "start": "602560",
    "end": "603680"
  },
  {
    "text": "department wants to start a marketing",
    "start": "603680",
    "end": "605200"
  },
  {
    "text": "campaign",
    "start": "605200",
    "end": "606160"
  },
  {
    "text": "whenever an order is created using",
    "start": "606160",
    "end": "608959"
  },
  {
    "text": "eventbridge",
    "start": "608959",
    "end": "609680"
  },
  {
    "text": "we can add this functionality without",
    "start": "609680",
    "end": "611519"
  },
  {
    "text": "changing the unicorn store application",
    "start": "611519",
    "end": "614399"
  },
  {
    "text": "we do that by adding an additional",
    "start": "614399",
    "end": "616000"
  },
  {
    "text": "target to the event bridge rule we just",
    "start": "616000",
    "end": "617600"
  },
  {
    "text": "created",
    "start": "617600",
    "end": "618880"
  },
  {
    "text": "first thing we need to do is create a",
    "start": "618880",
    "end": "620240"
  },
  {
    "text": "lambda function that will act as the new",
    "start": "620240",
    "end": "622160"
  },
  {
    "text": "target",
    "start": "622160",
    "end": "623519"
  },
  {
    "text": "we'll start with creating a new aws",
    "start": "623519",
    "end": "625920"
  },
  {
    "text": "landed project",
    "start": "625920",
    "end": "628639"
  },
  {
    "text": "and name it unicorn marketing start",
    "start": "628720",
    "end": "630399"
  },
  {
    "text": "campaign we'll select the empty function",
    "start": "630399",
    "end": "632640"
  },
  {
    "text": "blueprint",
    "start": "632640",
    "end": "634480"
  },
  {
    "text": "and click finish eventbridge was",
    "start": "634480",
    "end": "637920"
  },
  {
    "text": "formerly called amazon cloudwatch events",
    "start": "637920",
    "end": "640320"
  },
  {
    "text": "and uses the same cloudwatch events api",
    "start": "640320",
    "end": "643040"
  },
  {
    "text": "so we can leverage the amazon.lambda.com",
    "start": "643040",
    "end": "646079"
  },
  {
    "text": "nougat package to get the land the",
    "start": "646079",
    "end": "648000"
  },
  {
    "text": "invocation support",
    "start": "648000",
    "end": "650000"
  },
  {
    "text": "so let's go ahead and add that package",
    "start": "650000",
    "end": "653680"
  },
  {
    "text": "next we'll create a class to represent",
    "start": "658399",
    "end": "660480"
  },
  {
    "text": "the order created event",
    "start": "660480",
    "end": "663600"
  },
  {
    "text": "and use only a subset of the order",
    "start": "664959",
    "end": "666720"
  },
  {
    "text": "classes properties for the event",
    "start": "666720",
    "end": "669680"
  },
  {
    "text": "with that class created we'll change the",
    "start": "669680",
    "end": "671600"
  },
  {
    "text": "lambda handler to use the cloudwatch",
    "start": "671600",
    "end": "673120"
  },
  {
    "text": "event generic type",
    "start": "673120",
    "end": "674640"
  },
  {
    "text": "with the order created as the event",
    "start": "674640",
    "end": "676240"
  },
  {
    "text": "detail",
    "start": "676240",
    "end": "677920"
  },
  {
    "text": "for now we'll just write out the order",
    "start": "677920",
    "end": "679600"
  },
  {
    "text": "id to the console",
    "start": "679600",
    "end": "681519"
  },
  {
    "text": "but this would be where we would",
    "start": "681519",
    "end": "682720"
  },
  {
    "text": "implement the code to start the",
    "start": "682720",
    "end": "684160"
  },
  {
    "text": "marketing campaign",
    "start": "684160",
    "end": "685839"
  },
  {
    "text": "we'll see this message written out to",
    "start": "685839",
    "end": "687279"
  },
  {
    "text": "the lambda's cloudwatch log group",
    "start": "687279",
    "end": "689040"
  },
  {
    "text": "when this lambda is invoked let's go",
    "start": "689040",
    "end": "691839"
  },
  {
    "text": "ahead and deploy the function",
    "start": "691839",
    "end": "694959"
  },
  {
    "text": "we'll name the function and use the",
    "start": "695360",
    "end": "697279"
  },
  {
    "text": "basic execution rule",
    "start": "697279",
    "end": "703760"
  },
  {
    "text": "with the lambda function deployed we can",
    "start": "703760",
    "end": "705760"
  },
  {
    "text": "change the previously created rule",
    "start": "705760",
    "end": "707519"
  },
  {
    "text": "and add the lambda function as a target",
    "start": "707519",
    "end": "711200"
  },
  {
    "text": "let's go back to the aws management",
    "start": "711200",
    "end": "712880"
  },
  {
    "text": "console and make that change",
    "start": "712880",
    "end": "717440"
  },
  {
    "text": "we can select the rule",
    "start": "717440",
    "end": "720480"
  },
  {
    "text": "and add the new target",
    "start": "720720",
    "end": "731839"
  },
  {
    "text": "let's go back to the application and",
    "start": "732240",
    "end": "733920"
  },
  {
    "text": "place a new order",
    "start": "733920",
    "end": "736800"
  },
  {
    "text": "as you can see our new order id is 5.",
    "start": "742240",
    "end": "745279"
  },
  {
    "text": "now we can go to the lambdas cloudwatch",
    "start": "745279",
    "end": "746880"
  },
  {
    "text": "log group to see the event log entry",
    "start": "746880",
    "end": "750720"
  },
  {
    "text": "and here's the log entry matching the",
    "start": "750720",
    "end": "752959"
  },
  {
    "text": "order id that was just created",
    "start": "752959",
    "end": "755920"
  },
  {
    "text": "as you can see we added a whole new",
    "start": "755920",
    "end": "758160"
  },
  {
    "text": "consumer",
    "start": "758160",
    "end": "758959"
  },
  {
    "text": "to the order created event without",
    "start": "758959",
    "end": "760880"
  },
  {
    "text": "modifying the source application",
    "start": "760880",
    "end": "763279"
  },
  {
    "text": "this is the type of loose coupling the",
    "start": "763279",
    "end": "764959"
  },
  {
    "text": "event bridge enables",
    "start": "764959",
    "end": "766720"
  },
  {
    "text": "you can visit the aws sdkfor.net api",
    "start": "766720",
    "end": "769600"
  },
  {
    "text": "reference for details",
    "start": "769600",
    "end": "770959"
  },
  {
    "text": "on the event bridge api for example",
    "start": "770959",
    "end": "774079"
  },
  {
    "text": "the amazon event bridge client",
    "start": "774079",
    "end": "777600"
  },
  {
    "text": "and the put events method used in the",
    "start": "777920",
    "end": "779839"
  },
  {
    "text": "example",
    "start": "779839",
    "end": "782320"
  },
  {
    "text": "in this video we saw how we can use both",
    "start": "783920",
    "end": "785839"
  },
  {
    "text": "amazon event bridge",
    "start": "785839",
    "end": "787120"
  },
  {
    "text": "and the aws sdk4.net to create loosely",
    "start": "787120",
    "end": "790000"
  },
  {
    "text": "coupled components that communicate in",
    "start": "790000",
    "end": "791839"
  },
  {
    "text": "the publish",
    "start": "791839",
    "end": "792800"
  },
  {
    "text": "subscribe communication style i hope you",
    "start": "792800",
    "end": "795680"
  },
  {
    "text": "enjoyed this video and found it",
    "start": "795680",
    "end": "797040"
  },
  {
    "text": "informative",
    "start": "797040",
    "end": "798240"
  },
  {
    "text": "thank you for watching",
    "start": "798240",
    "end": "801839"
  }
]