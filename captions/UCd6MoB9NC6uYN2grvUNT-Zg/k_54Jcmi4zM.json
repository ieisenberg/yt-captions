[
  {
    "start": "0",
    "end": "146000"
  },
  {
    "text": "okay let's get started good afternoon everyone thank you very",
    "start": "2639",
    "end": "8400"
  },
  {
    "text": "much for being here my name is jonathan de roche i'm a solutions architect with amazon web services",
    "start": "8400",
    "end": "14320"
  },
  {
    "text": "later my colleague vipre calling vippers for shazam is going to be joining us to talk about",
    "start": "14320",
    "end": "19760"
  },
  {
    "text": "their experience with amazon's simple key service",
    "start": "19760",
    "end": "24160"
  },
  {
    "text": "today's presentation is going to focus on amazon's simple queue service and more specifically how we can",
    "start": "26880",
    "end": "32398"
  },
  {
    "text": "leverage the service not just as a message passing interface between one application and other",
    "start": "32399",
    "end": "37920"
  },
  {
    "text": "but as a glue that glue different services together such as database services and we're going to get into that",
    "start": "37920",
    "end": "45200"
  },
  {
    "text": "so let's start with a quick overview about the ad the messaging services",
    "start": "45200",
    "end": "50320"
  },
  {
    "text": "which are composed of both amazon's simple queue service as well as amazon's simple",
    "start": "50320",
    "end": "55920"
  },
  {
    "text": "notification service and as i go through these design goals which is what drove us to make the",
    "start": "55920",
    "end": "61920"
  },
  {
    "text": "services as they are today i'd like to keep in mind two things or in other words that this is a two-way",
    "start": "61920",
    "end": "67680"
  },
  {
    "text": "relationship those elements relate both to how the",
    "start": "67680",
    "end": "72799"
  },
  {
    "text": "services are built and operated as well as what's in it for you as a customer",
    "start": "72799",
    "end": "78720"
  },
  {
    "text": "right let's talk let's start with the customer as a customer or as a developer one of",
    "start": "78720",
    "end": "84799"
  },
  {
    "text": "the big benefits of using those services is simplicity right uh the same that came from our",
    "start": "84799",
    "end": "90320"
  },
  {
    "text": "city over in our locals loose coupling sets you free the whole notion of how can we be more agile",
    "start": "90320",
    "end": "96960"
  },
  {
    "text": "and how can we be smarter in terms of how do we connect and interconnect our components in the application",
    "start": "96960",
    "end": "102560"
  },
  {
    "text": "this is a topic that we're discussing at length in the architecture track and i encourage you to take advantage of that",
    "start": "102560",
    "end": "108320"
  },
  {
    "text": "if that's something that's interesting the second topic is reliability and",
    "start": "108320",
    "end": "114320"
  },
  {
    "text": "again it's very legitimate to ask what is the reliability and what is the scalability",
    "start": "114320",
    "end": "120719"
  },
  {
    "text": "of the service that i'm consuming as a customer i want to make sure that i'm building on a sound foundation",
    "start": "120719",
    "end": "126719"
  },
  {
    "text": "also keep in mind that from the receiving end it is entirely possible to build on those",
    "start": "126719",
    "end": "132560"
  },
  {
    "text": "services in a way that's going to improve my reliability and my scalability as a customer and as a",
    "start": "132560",
    "end": "138879"
  },
  {
    "text": "consumer of those services and we're going to be talking about those at length during this this session",
    "start": "138879",
    "end": "145680"
  },
  {
    "start": "146000",
    "end": "146000"
  },
  {
    "text": "so the first service to launch and yet we're still working and making improvements to it",
    "start": "147200",
    "end": "153120"
  },
  {
    "text": "so i'm thrilled to talk about the core capabilities of amazon's simple",
    "start": "153120",
    "end": "158640"
  },
  {
    "text": "queue servers which are still relevant in this world and i'm even more so happy to talk about the new and improved ones",
    "start": "158640",
    "end": "164959"
  },
  {
    "text": "i won't call all of them out in this session although many of them will be implicitly",
    "start": "164959",
    "end": "170239"
  },
  {
    "text": "discussed i do want to call out two of them in particular one of them is the fact that we allow",
    "start": "170239",
    "end": "175840"
  },
  {
    "text": "you to use simple q service to store messages to a period of up to 14",
    "start": "175840",
    "end": "181280"
  },
  {
    "text": "days and the other one is that the payload size",
    "start": "181280",
    "end": "186400"
  },
  {
    "text": "has been increased this year and can now be 256k",
    "start": "186400",
    "end": "191280"
  },
  {
    "text": "so as we dive deeper into the usage patterns and into the design",
    "start": "193200",
    "end": "198560"
  },
  {
    "text": "patterns let's start with laying the baseline and the foundation of the sqs core mechanics",
    "start": "198560",
    "end": "204720"
  },
  {
    "start": "204000",
    "end": "204000"
  },
  {
    "text": "so let's start with a writer right i have one sqsq i have a writer and i would like my",
    "start": "204720",
    "end": "212159"
  },
  {
    "text": "writer to enqueue messages into the queue we can start with one message and then another",
    "start": "212159",
    "end": "217360"
  },
  {
    "text": "and now we have a queue and a writer with two messages in it let's flip the perspective and talk",
    "start": "217360",
    "end": "223120"
  },
  {
    "text": "about the customers or the clients of this queue right in this case we have two services or two components in my application",
    "start": "223120",
    "end": "229200"
  },
  {
    "text": "reader a and reader b now should both of them ask for messages at the same time",
    "start": "229200",
    "end": "234640"
  },
  {
    "text": "that's a perfectly competent that's a perfectly common and perfectly acceptable scenario amazon's simple cure service is actually",
    "start": "234640",
    "end": "241280"
  },
  {
    "text": "going to distribute the load to the two of them in a way that that's going to ensure that each reader is going to get a different message",
    "start": "241280",
    "end": "249120"
  },
  {
    "text": "now take note that the act of delivering the message still leaves the message in the queue",
    "start": "249120",
    "end": "255519"
  },
  {
    "text": "the message is not gone it is merely said to be invisible or in other words locked",
    "start": "255519",
    "end": "260560"
  },
  {
    "text": "and the reason is that the cue itself and the messages on it",
    "start": "260560",
    "end": "265600"
  },
  {
    "text": "are resilient and redundant but the client isn't so lucky what would",
    "start": "265600",
    "end": "271440"
  },
  {
    "text": "happen should one of my clients fail in a transaction in this case let's cross off reader a",
    "start": "271440",
    "end": "277919"
  },
  {
    "text": "reader a has received the message has locked a message to it and yet it has failed with transaction",
    "start": "277919",
    "end": "285520"
  },
  {
    "text": "what would happen is that the lock would be or the visibility timeout would eventually time out",
    "start": "285520",
    "end": "290560"
  },
  {
    "text": "and the message would go back into the queue and available to the next reader and at the same time reader b is going",
    "start": "290560",
    "end": "295759"
  },
  {
    "text": "to delete that message that it has successfully uh processed and then would proceed to receive that",
    "start": "295759",
    "end": "302320"
  },
  {
    "text": "second message successfully process it delete it and be done with the",
    "start": "302320",
    "end": "308840"
  },
  {
    "text": "exercise so far so good in terms of the base mechanics let's talk about how we can make it scale",
    "start": "308840",
    "end": "315919"
  },
  {
    "text": "so in the previous example we we've talked about how each reader could process one message at",
    "start": "315919",
    "end": "321120"
  },
  {
    "start": "316000",
    "end": "316000"
  },
  {
    "text": "a time now let's talk about how we can amp it up to have more than one message",
    "start": "321120",
    "end": "327280"
  },
  {
    "text": "at the client so in this case i'm actually showcasing the recent improvement of batch reads",
    "start": "327280",
    "end": "332800"
  },
  {
    "text": "where a single api call could retrieve up to 10 messages in the same call so i have just received",
    "start": "332800",
    "end": "339919"
  },
  {
    "text": "10 messages i've stored them in mm perhaps i'm doing something useful with them perhaps i'm waiting for more messages",
    "start": "339919",
    "end": "346320"
  },
  {
    "text": "as in this case i'm making another api on call i'm asking for 10 more and 10 more now i have 30 messages",
    "start": "346320",
    "end": "354080"
  },
  {
    "text": "in my ram that i could do something with keep in mind should reader a fail",
    "start": "354080",
    "end": "360960"
  },
  {
    "text": "those messages would go back into the queue and would go to a successor",
    "start": "360960",
    "end": "367840"
  },
  {
    "text": "should the transaction succeed we can simply delete all the messages and move on",
    "start": "369440",
    "end": "374960"
  },
  {
    "text": "we're going to talk about at length about how we can leverage this design pattern and how we could",
    "start": "375039",
    "end": "380319"
  },
  {
    "text": "make small bits of information and data and aggregate them into larger transactions",
    "start": "380319",
    "end": "387680"
  },
  {
    "text": "now let's take it to real life here is an example where i took data",
    "start": "388240",
    "end": "395039"
  },
  {
    "start": "391000",
    "end": "391000"
  },
  {
    "text": "from the stock market in this case we're looking at transaction volume and i've plotted it over the time of the",
    "start": "395039",
    "end": "400639"
  },
  {
    "text": "day it's very easy to see the difference between the peak and the valleys",
    "start": "400639",
    "end": "406000"
  },
  {
    "text": "with the peaks being the beginning of the business day and the end of the business day",
    "start": "406000",
    "end": "412000"
  },
  {
    "text": "this is the classic amazon web services story right we have variable load we have great variance between peaks and",
    "start": "412000",
    "end": "418319"
  },
  {
    "text": "valleys in fact in this case the difference between the peak and the valley is six-fold should we to run an environment that",
    "start": "418319",
    "end": "426240"
  },
  {
    "text": "size to the peak that would mean that it would be utilized only at 22",
    "start": "426240",
    "end": "431759"
  },
  {
    "text": "of the time that's hardly ideal now while amazon web services certainly has",
    "start": "431759",
    "end": "437360"
  },
  {
    "text": "technologies that are going to help us things like amazon dynamodb auto scaling",
    "start": "437360",
    "end": "443199"
  },
  {
    "text": "elastic load balancing many of those technologies require some sort of a ramp period for",
    "start": "443199",
    "end": "450000"
  },
  {
    "text": "example when i'm creating a dynamodb table i need to specify the capacity that is",
    "start": "450000",
    "end": "455039"
  },
  {
    "text": "going to stay behind it that is great in this example i could even get away with it",
    "start": "455039",
    "end": "460080"
  },
  {
    "text": "i know to expect a greater load at the beginning at the end of the business day in real life there are some instances",
    "start": "460080",
    "end": "467199"
  },
  {
    "text": "where we don't know when the peak load is going to come we don't know when the burst is going to happen",
    "start": "467199",
    "end": "472400"
  },
  {
    "text": "and we need to prepare ourselves to start surges this is where a simple key service shines",
    "start": "472400",
    "end": "479520"
  },
  {
    "text": "one more takeaway from this slide is that going back to the market example the",
    "start": "479520",
    "end": "485919"
  },
  {
    "text": "data comes in sequentially right in chronological order yet",
    "start": "485919",
    "end": "492319"
  },
  {
    "text": "i may be asked to retrieve it along different dimensions for example perhaps my application gives",
    "start": "492319",
    "end": "499599"
  },
  {
    "text": "user a feed that they can in that they can subscribe to and receive messages from that's a",
    "start": "499599",
    "end": "505680"
  },
  {
    "text": "sequential workload perhaps i'm actually giving my users the ability to query data along different",
    "start": "505680",
    "end": "510720"
  },
  {
    "text": "axes so a user may ask for the performance of a particular instrument over the past five years",
    "start": "510720",
    "end": "516719"
  },
  {
    "text": "in the grand scheme of things that's actually a random workload when you start to mix those different workloads and when you",
    "start": "516719",
    "end": "522640"
  },
  {
    "text": "start to mix those different requirements on the same data set what oftentimes happens is we take this",
    "start": "522640",
    "end": "528720"
  },
  {
    "text": "one feed of data that's coming in through the front door and we are forking it out to different backend mechanisms",
    "start": "528720",
    "end": "534959"
  },
  {
    "text": "so for example we often see customers using dynamodb and redshift and s3 and",
    "start": "534959",
    "end": "542800"
  },
  {
    "text": "elastic mapreduce simple queue servers as well as simple notification service",
    "start": "542800",
    "end": "548480"
  },
  {
    "text": "are the glue that can help and bring all them together and bridge the gap between this feed",
    "start": "548480",
    "end": "553680"
  },
  {
    "text": "that comes in the form of small transactions and the back-end systems that actually expect bulk loads",
    "start": "553680",
    "end": "563519"
  },
  {
    "text": "so let's talk about some design patterns and ultimate beauty the batch processing",
    "start": "563519",
    "end": "570320"
  },
  {
    "start": "564000",
    "end": "564000"
  },
  {
    "text": "in this case i may have clients uploading data to an elastic beanstalk application",
    "start": "570320",
    "end": "577839"
  },
  {
    "text": "the workers in the application may take each and every upload and end key within the queue and just",
    "start": "578080",
    "end": "584480"
  },
  {
    "text": "leave the message that they're right there in amazon's simple key services queue the queue is going to fill up and up and",
    "start": "584480",
    "end": "591519"
  },
  {
    "text": "up up until i get to that point in time which perhaps is end of day end of week and of",
    "start": "591519",
    "end": "599920"
  },
  {
    "text": "whatever process i'm running and whatever cadence my business calls for when i reach that point where i'm",
    "start": "599920",
    "end": "605200"
  },
  {
    "text": "willing and able to download the messages from the queue i can just do that in mass i spin up the sufficient capacity of",
    "start": "605200",
    "end": "611120"
  },
  {
    "text": "amazon ec2 instances download all the messages until they're done and then dispose of the entire environment because i don't need it",
    "start": "611120",
    "end": "616880"
  },
  {
    "text": "anymore",
    "start": "616880",
    "end": "619839"
  },
  {
    "text": "i'd like to take a quick step step and talk about another improvement that",
    "start": "623440",
    "end": "629200"
  },
  {
    "start": "626000",
    "end": "626000"
  },
  {
    "text": "we've done in the past year which is i enrolled for amazon ec2 so",
    "start": "629200",
    "end": "634560"
  },
  {
    "text": "roles are the idea where you can define an i am policy entitling",
    "start": "634560",
    "end": "642480"
  },
  {
    "text": "the the user or the entity that that was created using this policy to do certain things in the system",
    "start": "642480",
    "end": "649040"
  },
  {
    "text": "in this case i've created a policy that defines who can go to the this particular queue and",
    "start": "649040",
    "end": "655600"
  },
  {
    "text": "perform these particular activities now i can take this role",
    "start": "655600",
    "end": "661279"
  },
  {
    "text": "i launch ec2 instances with this role and i'm done right the audit logs",
    "start": "661279",
    "end": "668000"
  },
  {
    "text": "such as cloudtrail are going to capture the identity of the instance in iam is automatically going to rotate",
    "start": "668000",
    "end": "674560"
  },
  {
    "text": "the credentials for me as well as pass them to the instance in a secure fashion",
    "start": "674560",
    "end": "679760"
  },
  {
    "text": "on the receiving end my code on the instance looks like this",
    "start": "679760",
    "end": "686079"
  },
  {
    "text": "two things worth mentioning first that's pretty easy",
    "start": "686959",
    "end": "692160"
  },
  {
    "text": "i count five lines of code but more importantly is what's not there",
    "start": "692160",
    "end": "697360"
  },
  {
    "text": "namely the credentials there is no need to make for me maintaining the credentials certainly no need to check them into the",
    "start": "697360",
    "end": "703760"
  },
  {
    "text": "source control and no need to find a way to securely pass them to the instance at runtime all you need to do",
    "start": "703760",
    "end": "709519"
  },
  {
    "text": "is use the amazon sdk of the language of your choice in which case we're talking about ruby",
    "start": "709519",
    "end": "715200"
  },
  {
    "text": "and you're good so that's a really easy way of connecting simple key servers to ec2",
    "start": "715200",
    "end": "722160"
  },
  {
    "text": "let's talk about another design pattern so going back to my example",
    "start": "722959",
    "end": "732240"
  },
  {
    "start": "727000",
    "end": "727000"
  },
  {
    "text": "a very common use case that i see in the field is i have a bunch of clients which may",
    "start": "732240",
    "end": "738639"
  },
  {
    "text": "be sensors and nowadays that could mean a lot of things sensor could be",
    "start": "738639",
    "end": "743680"
  },
  {
    "text": "a user's browser uploading in certain payloads could be thermostats sitting on a",
    "start": "743680",
    "end": "750160"
  },
  {
    "text": "manufacturing floor could be trucks with gps devices on them it could be",
    "start": "750160",
    "end": "755680"
  },
  {
    "text": "in this day and age iac wristbands that upload my activity to the cloud",
    "start": "755680",
    "end": "761120"
  },
  {
    "text": "i see ways that actually report how am i weighing over the timeline so nowadays when we say the word client",
    "start": "761120",
    "end": "768320"
  },
  {
    "text": "or when we say the word sensor that's not what it used to be anyway i have a whole bunch of clients each one",
    "start": "768320",
    "end": "775600"
  },
  {
    "text": "of them is uploading this burst of information to me let's just assume that it's 100 kilobytes in size",
    "start": "775600",
    "end": "782480"
  },
  {
    "text": "my goal my end state is actually to take all this information and store it into s3",
    "start": "782560",
    "end": "788399"
  },
  {
    "text": "here's the challenge",
    "start": "789519",
    "end": "792240"
  },
  {
    "text": "e-mar best practices call for an object size of larger than 10 megabytes",
    "start": "794720",
    "end": "800240"
  },
  {
    "text": "those are related to the native capabilities of the hadoop distribution",
    "start": "800240",
    "end": "805440"
  },
  {
    "text": "similarly if my end goal is to upload the data into redshift redshift by virtue of being a data",
    "start": "805440",
    "end": "812639"
  },
  {
    "text": "warehouse expects to receive the data using bulk inserts so once i've initiated the insert i need to wait",
    "start": "812639",
    "end": "820160"
  },
  {
    "text": "until it completes before i can add the next insert right so i find myself living on this cadence of",
    "start": "820160",
    "end": "826079"
  },
  {
    "text": "loading buffering loading some more buffering some more etc how am i going to bridge the gap and",
    "start": "826079",
    "end": "832079"
  },
  {
    "text": "again going back to the design tenants i want to be simple i want to be durable and i want to be highly",
    "start": "832079",
    "end": "837680"
  },
  {
    "text": "available in other words i don't want to lose a single message how can i bridge this gap between having",
    "start": "837680",
    "end": "843760"
  },
  {
    "text": "100k uploads and 10 megabytes chunk in s3",
    "start": "843760",
    "end": "849199"
  },
  {
    "text": "this is where a simple queue service comes into play if i were to configure my elastic",
    "start": "849519",
    "end": "855519"
  },
  {
    "text": "beanstalk application to take each and every upload and cue it as its own message in its",
    "start": "855519",
    "end": "860880"
  },
  {
    "text": "queue by which point is resilient and redundant throughout the region",
    "start": "860880",
    "end": "866240"
  },
  {
    "text": "and then i can have another worker role that actually receives those messages using the batch reads so i could batch read 10 or 100 messages",
    "start": "866959",
    "end": "874880"
  },
  {
    "text": "in order to get to the desired 10 megabyte size take those 100 messages upload them as a",
    "start": "874880",
    "end": "880160"
  },
  {
    "text": "single object to amazon simple storage service and then delete them from the queue",
    "start": "880160",
    "end": "886160"
  },
  {
    "text": "also to consider while relational databases certainly can ingest little bits of information one at",
    "start": "888959",
    "end": "896399"
  },
  {
    "text": "a time it's a trade-off ask any dba and he's going to tell you that the cost of",
    "start": "896399",
    "end": "901680"
  },
  {
    "text": "adding more data to the database is very much proportional to the amount of indexing that i have there",
    "start": "901680",
    "end": "907040"
  },
  {
    "text": "to the point where some people say well we can't afford to add more indexing",
    "start": "907040",
    "end": "912639"
  },
  {
    "text": "this kind of changes the paradigm right were i to do batch inserts into the database i can",
    "start": "912639",
    "end": "918399"
  },
  {
    "text": "afford to have more indexing than they could have done were i uploading the files one at a time",
    "start": "918399",
    "end": "923519"
  },
  {
    "text": "one byte at a time let's talk about design pattern number",
    "start": "923519",
    "end": "928639"
  },
  {
    "text": "four and this one is important because it touches on the business right every time i touch the",
    "start": "928639",
    "end": "934959"
  },
  {
    "text": "keyboard i try to think about the business requirements that drive me to do whatever i'm doing",
    "start": "934959",
    "end": "941040"
  },
  {
    "text": "suppose that my business relies on the freshness of data in other words if the data is older than",
    "start": "941040",
    "end": "946800"
  },
  {
    "text": "x many minutes it holds no value to me suppose that something happened and it",
    "start": "946800",
    "end": "953360"
  },
  {
    "text": "just got stuck in the queue stuck in the cube being i failed to read it and do something meaningful with it",
    "start": "953360",
    "end": "960000"
  },
  {
    "text": "now i have still data in the queue why would i bother to read the data and discard it",
    "start": "960000",
    "end": "966639"
  },
  {
    "text": "or worse yet do something meaningful with it when the data is not meaningful when i can simply ask the poke server to",
    "start": "966639",
    "end": "973040"
  },
  {
    "text": "discard the data on my behalf right this is a very different paradigm",
    "start": "973040",
    "end": "978399"
  },
  {
    "text": "from the can we can't lose every single message but the reality is that sometimes we do want to discard data",
    "start": "978399",
    "end": "984560"
  },
  {
    "text": "we just need to do so intelligently",
    "start": "984560",
    "end": "988320"
  },
  {
    "start": "992000",
    "end": "992000"
  },
  {
    "text": "let's talk a bit about amazon's simple notification service so simple notification service is a",
    "start": "994160",
    "end": "999519"
  },
  {
    "text": "service that relies on the pub sub paradigm meaning that myself",
    "start": "999519",
    "end": "1006480"
  },
  {
    "text": "as the sender there's a topic and there are recipients of the topic the sender doesn't need to know who the",
    "start": "1006480",
    "end": "1013040"
  },
  {
    "text": "recipients are nor does he necessarily care and he certainly doesn't necessarily need to know how many of them are they",
    "start": "1013040",
    "end": "1019199"
  },
  {
    "text": "all i know is that i'm going to fire this event and whoever is interested is going to receive it",
    "start": "1019199",
    "end": "1025199"
  },
  {
    "text": "now the transports on which this event is being fanned out and delivered to the",
    "start": "1025199",
    "end": "1030480"
  },
  {
    "text": "end recipient are numerous first off you could use a simple q",
    "start": "1030480",
    "end": "1036079"
  },
  {
    "text": "service cube alternatively we support http puts",
    "start": "1036079",
    "end": "1041199"
  },
  {
    "text": "that could either work to a particular ip address or to an elastic bouncer",
    "start": "1041199",
    "end": "1046720"
  },
  {
    "text": "recently we have also announced seamless integration with mobile push",
    "start": "1046720",
    "end": "1052400"
  },
  {
    "text": "so different mobile devices on different operating systems such as",
    "start": "1052400",
    "end": "1059039"
  },
  {
    "text": "ios the google android or the amazon android",
    "start": "1059039",
    "end": "1064480"
  },
  {
    "text": "you could push messages to those devices seamlessly without having to deal with the",
    "start": "1064480",
    "end": "1069520"
  },
  {
    "text": "different implementation of the different transports by the way all that is going to be covered at length in",
    "start": "1069520",
    "end": "1076000"
  },
  {
    "text": "mobile session 308 if anyone is interested back to simple notification service for",
    "start": "1076000",
    "end": "1082960"
  },
  {
    "text": "our purposes i could also have an email message sent whenever the recipient receives a",
    "start": "1082960",
    "end": "1088400"
  },
  {
    "text": "message tying it to our use case suppose i want",
    "start": "1088400",
    "end": "1095360"
  },
  {
    "text": "to take this piece of data durably ingest it at the front door like we've talked about earlier",
    "start": "1095360",
    "end": "1101919"
  },
  {
    "text": "and then i want to do some different operations on it for example maybe i want to take some",
    "start": "1101919",
    "end": "1108799"
  },
  {
    "text": "fields of the data and work them into elastic mapreduce perhaps i want to take other fields and",
    "start": "1108799",
    "end": "1113919"
  },
  {
    "text": "work them into amazon redshift here's another twist going back to the",
    "start": "1113919",
    "end": "1119760"
  },
  {
    "text": "market data example if my business use case is such that",
    "start": "1119760",
    "end": "1124880"
  },
  {
    "text": "data from today is hot there's a lot more queries about what's going on today",
    "start": "1124880",
    "end": "1130240"
  },
  {
    "text": "than there are about what went down five years ago maybe my course of action is going to be",
    "start": "1130240",
    "end": "1136240"
  },
  {
    "text": "to fork the data send all the messages to elastic mapreduce",
    "start": "1136240",
    "end": "1142000"
  },
  {
    "text": "there i can run spark and shark which are frameworks for sql queries on data which is stored in",
    "start": "1142000",
    "end": "1149440"
  },
  {
    "text": "memory so it's essentially an in-memory database storing my data of what went",
    "start": "1149440",
    "end": "1154880"
  },
  {
    "text": "down today funnel all the queries as to what",
    "start": "1154880",
    "end": "1160960"
  },
  {
    "text": "happened in the market today to the in-memory database and the rest of the queries which are on",
    "start": "1160960",
    "end": "1167280"
  },
  {
    "text": "the longer tail of the data as to what happened yesterday what happened five years ago those are going to go into",
    "start": "1167280",
    "end": "1173440"
  },
  {
    "text": "redshift obviously it would have been great if i could have the in memory databases",
    "start": "1173440",
    "end": "1179840"
  },
  {
    "text": "stores everything but the reality and the economics of it forced me to to tier my approach and to pick my",
    "start": "1179840",
    "end": "1186720"
  },
  {
    "text": "battles now apart from having different",
    "start": "1186720",
    "end": "1193280"
  },
  {
    "text": "functionality on different uses of the data i could actually have it serve different purposes in different environments",
    "start": "1193280",
    "end": "1199919"
  },
  {
    "text": "so for example we have customers that fork their data into a production environment and a test environment this is a really",
    "start": "1199919",
    "end": "1207440"
  },
  {
    "text": "easy way of doing a b testing and in amazon we like to talk about innovation and",
    "start": "1207440",
    "end": "1212720"
  },
  {
    "text": "i used to say that innovation didn't occur on the day that you've downloaded or that you've",
    "start": "1212720",
    "end": "1217840"
  },
  {
    "text": "released a new version of your product innovation occurred in some random night prior when someone said",
    "start": "1217840",
    "end": "1223280"
  },
  {
    "text": "i have a crazy idea let's test it right what better way of testing your new",
    "start": "1223280",
    "end": "1229440"
  },
  {
    "text": "algorithm or your invention than on the data the real one all of it",
    "start": "1229440",
    "end": "1236240"
  },
  {
    "text": "i could also use the sns fanout in order to take the message take the data and push it into different",
    "start": "1242720",
    "end": "1249360"
  },
  {
    "text": "locations which are external to my region for example perhaps i want to replicate",
    "start": "1249360",
    "end": "1254799"
  },
  {
    "text": "the data worldwide right so perhaps i have presence in a couple of regions worldwide and i would like each",
    "start": "1254799",
    "end": "1262159"
  },
  {
    "text": "region to have an entire data set the full one along the way",
    "start": "1262159",
    "end": "1268000"
  },
  {
    "text": "perhaps i have an on-premises data center and i like that data center to have the same data as well",
    "start": "1268000",
    "end": "1274240"
  },
  {
    "text": "here we can simply take this data work it into an sns topic work all the different locations",
    "start": "1274240",
    "end": "1280080"
  },
  {
    "text": "worldwide into the same topic and simply fire the messages away the the ingestion point which is the",
    "start": "1280080",
    "end": "1286480"
  },
  {
    "text": "amazon elastic bean stock application doesn't need to know who the recipients are all it knows is the topic here's a pro",
    "start": "1286480",
    "end": "1294000"
  },
  {
    "text": "tip the message id which is stamped on the message by simple notification service upon the",
    "start": "1294000",
    "end": "1301280"
  },
  {
    "text": "ingestion is actually duplicated and is persistent worldwide this is how i can ensure persistent",
    "start": "1301280",
    "end": "1307600"
  },
  {
    "text": "handling of the messages worldwide because i can track it all the way back to the source",
    "start": "1307600",
    "end": "1313679"
  },
  {
    "text": "now we've talked about how simple notification servers could have different transports for different",
    "start": "1315919",
    "end": "1321120"
  },
  {
    "text": "recipients and this could be the case so a real life example might be",
    "start": "1321120",
    "end": "1326720"
  },
  {
    "text": "i have this transaction which i would like to send to a number of backend systems perhaps these systems actually belong to",
    "start": "1326720",
    "end": "1332480"
  },
  {
    "text": "different companies a real life example might be electronic bidding i'm sending out an rfp electronically",
    "start": "1332480",
    "end": "1338720"
  },
  {
    "text": "and i would like the recipients to respond to it different receipts have different preference as to how would you like to",
    "start": "1338720",
    "end": "1344240"
  },
  {
    "text": "receive them right perhaps i would i were to use simple key service for guaranteed delivery right if the recipient is down the",
    "start": "1344240",
    "end": "1351440"
  },
  {
    "text": "messengers are going to end queue rather than get spilled over and lost perhaps it's the reverse",
    "start": "1351440",
    "end": "1356799"
  },
  {
    "text": "i would like to receive this message now and do something meaningful with it or never receive it at all this is when i may i opt in to use",
    "start": "1356799",
    "end": "1364000"
  },
  {
    "text": "elastically balancing and perhaps this particular partner is old school",
    "start": "1364000",
    "end": "1369039"
  },
  {
    "text": "and would actually like to get an email message about this rfpn process we can also support that quite easily",
    "start": "1369039",
    "end": "1376559"
  },
  {
    "text": "and here's another tip simple hue service relies on http gets so the recipient of",
    "start": "1376559",
    "end": "1384559"
  },
  {
    "text": "the message is actually reaching out to aws and fetches the messages in",
    "start": "1384559",
    "end": "1389760"
  },
  {
    "text": "rather than us pushing the messages all the way to the recipient in other words this is a firewall friendly",
    "start": "1389760",
    "end": "1394799"
  },
  {
    "text": "arrangement and it is also one that involves a better degree of trust because the recipient can validate who",
    "start": "1394799",
    "end": "1402640"
  },
  {
    "text": "he is talking to namely simple queue service through the services ssl certificate",
    "start": "1402640",
    "end": "1408159"
  },
  {
    "text": "and know that the entire transaction has been validated and has been encrypted in",
    "start": "1408159",
    "end": "1414559"
  },
  {
    "text": "flight lastly i want to talk about a very",
    "start": "1414840",
    "end": "1420400"
  },
  {
    "text": "recent release which is to send messages from the browser so a few weeks ago we have announced the",
    "start": "1420400",
    "end": "1427039"
  },
  {
    "start": "1423000",
    "end": "1423000"
  },
  {
    "text": "release of the aws sdk for javascript in the browser",
    "start": "1427039",
    "end": "1432799"
  },
  {
    "text": "the idea is that you embed this piece of code in the client's browser and at that point you can actually make",
    "start": "1432799",
    "end": "1438559"
  },
  {
    "text": "direct calls from the browser itself using the full-fledged sdk to various services",
    "start": "1438559",
    "end": "1445760"
  },
  {
    "text": "the natural course of action is to provide an sts token rather than embed the credentials in the browser",
    "start": "1445760",
    "end": "1452080"
  },
  {
    "text": "so the browser authenticates to a service and then operates on our behalf the supported",
    "start": "1452080",
    "end": "1458159"
  },
  {
    "text": "services are simple storage service simple queue service simple notification service and amazon dynamodb",
    "start": "1458159",
    "end": "1465039"
  },
  {
    "text": "back to our sample architecture suppose i have my beanstalk application in place",
    "start": "1465600",
    "end": "1471440"
  },
  {
    "text": "this application could serve as my control plane meaning that the clients authenticate to the application",
    "start": "1471440",
    "end": "1476640"
  },
  {
    "text": "receive directions saying this is where you should go this is where you should send the queues and here are",
    "start": "1476640",
    "end": "1482240"
  },
  {
    "text": "the credentials that you'll need in order to do so at that point we're actually calling out cutting away the mailman there is no",
    "start": "1482240",
    "end": "1488799"
  },
  {
    "text": "need for us to handle each and every message along the way we can simply orchestrate who can do what and leave them to their own devices",
    "start": "1488799",
    "end": "1497120"
  },
  {
    "text": "also worth noting that along the same simple token service authentication we",
    "start": "1498880",
    "end": "1504400"
  },
  {
    "text": "have also recently announced support for external providers such as login with amazon",
    "start": "1504400",
    "end": "1509840"
  },
  {
    "text": "google identity and facebook identities so in some use cases if i'm using a",
    "start": "1509840",
    "end": "1516400"
  },
  {
    "text": "mobile app that plugs into a social network i may even be able to get away with having the",
    "start": "1516400",
    "end": "1521520"
  },
  {
    "text": "elastic green stock application and now i would like to introduce colin",
    "start": "1521520",
    "end": "1527520"
  },
  {
    "text": "vapors from shazam",
    "start": "1527520",
    "end": "1530320"
  },
  {
    "text": "hi everyone um so i'm colin and i work at shazam as a technology",
    "start": "1541200",
    "end": "1547200"
  },
  {
    "text": "evangelist so my day job mostly involves looking after our development teams",
    "start": "1547200",
    "end": "1554080"
  },
  {
    "text": "worldwide looking after architectural and coding guidelines making sure we're",
    "start": "1554080",
    "end": "1559520"
  },
  {
    "text": "adhering to best practices and a lot of time coming out to places like this and talking to you guys about what we do",
    "start": "1559520",
    "end": "1567120"
  },
  {
    "start": "1568000",
    "end": "1568000"
  },
  {
    "text": "so what is shazam um are we quite popular but i've been talking to a few people",
    "start": "1568240",
    "end": "1574880"
  },
  {
    "text": "this week and some people apparently know what we do so we are a mobile application",
    "start": "1574880",
    "end": "1582159"
  },
  {
    "text": "and our primary use cases say you're at a bar you're at a club maybe you sat at home",
    "start": "1582159",
    "end": "1587520"
  },
  {
    "text": "on the radio and there's a really cool tune comes on so you get out your app you launch shazam push the blue button",
    "start": "1587520",
    "end": "1594480"
  },
  {
    "text": "give it a few seconds and it tells you that actually you're like a secret justin bieber fan and you didn't know it",
    "start": "1594480",
    "end": "1601039"
  },
  {
    "text": "so that's what we've been doing for quite a long time now but over the last couple years we've been moving into television",
    "start": "1601039",
    "end": "1607919"
  },
  {
    "text": "and advertising as well so a couple of examples here is in 2011 there was this quite big thing",
    "start": "1607919",
    "end": "1616000"
  },
  {
    "text": "here called super bowl and you could shazam seven",
    "start": "1616000",
    "end": "1621120"
  },
  {
    "text": "adverts in the super bowl and one of them the total advert was to win a car",
    "start": "1621120",
    "end": "1626640"
  },
  {
    "text": "and the only way you could win the car was by something's advert and i'm sure as anyone who's into",
    "start": "1626640",
    "end": "1632559"
  },
  {
    "text": "football knows is super bowl is quite a big thing so there's like 150 million people i",
    "start": "1632559",
    "end": "1637600"
  },
  {
    "text": "think watch this event that was quite large for us more recently just just last week",
    "start": "1637600",
    "end": "1643679"
  },
  {
    "text": "we supported both the cmas and x factor so you could use our application",
    "start": "1643679",
    "end": "1649360"
  },
  {
    "text": "to vote for your favorite artist on xfactor as well",
    "start": "1649360",
    "end": "1654559"
  },
  {
    "text": "so just a couple of stats about us so we have nearly 400 million users",
    "start": "1654559",
    "end": "1660559"
  },
  {
    "text": "75 million of those are active every month and we're adding about 10 every month um but you guys aren't here",
    "start": "1660559",
    "end": "1666720"
  },
  {
    "text": "to hear marketing stats so the interesting things we've got here is it took us 10 years to do our first",
    "start": "1666720",
    "end": "1673760"
  },
  {
    "text": "billion tags which is quite a long time but it only took us 10 months to the second",
    "start": "1673760",
    "end": "1678880"
  },
  {
    "text": "billion and only two months to do every billion since then so you can see",
    "start": "1678880",
    "end": "1684559"
  },
  {
    "text": "from the graph here that's quite a change in scale",
    "start": "1684559",
    "end": "1690158"
  },
  {
    "text": "um so in 2010 we decided we need to rewrite our systems and we had various goals in",
    "start": "1690480",
    "end": "1696799"
  },
  {
    "text": "mind so we were like code quality tdd constant refactoring all that kind of",
    "start": "1696799",
    "end": "1702159"
  },
  {
    "text": "really cool hip stuff but one thing we really knew about is our system had to scale and we had to scale well and this is where sqs comes",
    "start": "1702159",
    "end": "1709360"
  },
  {
    "text": "in so we receive data from our clients",
    "start": "1709360",
    "end": "1714799"
  },
  {
    "start": "1710000",
    "end": "1710000"
  },
  {
    "text": "we've seen a lot of that certainly during super bowl type events we get a lot of traffic at once but we also receive data from",
    "start": "1714799",
    "end": "1721200"
  },
  {
    "text": "places like facebook we ingest a lot of data from music companies weirdly we receive data from amazon and",
    "start": "1721200",
    "end": "1728240"
  },
  {
    "text": "then we take it into our system and show it through aws very weird relationship going on there and what we",
    "start": "1728240",
    "end": "1734880"
  },
  {
    "text": "essentially use sqs as a shield for all of our internal systems from these third party providers",
    "start": "1734880",
    "end": "1741440"
  },
  {
    "text": "and one reason we choose sqs is basically as i like to put it it just works it's near zero operational overhead for",
    "start": "1741440",
    "end": "1749760"
  },
  {
    "text": "us we could use zero mq we can use rabbitmq we can do those other things but what we really care about is",
    "start": "1749760",
    "end": "1755679"
  },
  {
    "text": "potentially building software and getting things out for our users we don't care about building messaging infrastructure",
    "start": "1755679",
    "end": "1761120"
  },
  {
    "text": "that's amazon's job you know let those guys handle that kind of stuff so what i'm going to talk to you about now is",
    "start": "1761120",
    "end": "1767919"
  },
  {
    "text": "what we do with facebook so our application you can launch it you can sign in with facebook",
    "start": "1767919",
    "end": "1774640"
  },
  {
    "text": "and the primary use case there is you can see the music your friends are tagging and they can see what you're tagging and then basically you can abuse",
    "start": "1774640",
    "end": "1781760"
  },
  {
    "text": "each other because you're listening to really bad music now one of the things about facebook is",
    "start": "1781760",
    "end": "1786960"
  },
  {
    "text": "um if you haven't worked with it before is they're quite strict on you keeping your",
    "start": "1786960",
    "end": "1792240"
  },
  {
    "text": "user data up to date so profile pictures usernames not so bad and with your friends graph",
    "start": "1792240",
    "end": "1798799"
  },
  {
    "text": "they're really quite hard on that especially if say i'm friends with this gentleman in the front row and he decides he doesn't",
    "start": "1798799",
    "end": "1805039"
  },
  {
    "text": "like me anymore he deletes me from his friend's graph we have to break that connection inside our system and we have to do it",
    "start": "1805039",
    "end": "1810320"
  },
  {
    "text": "relatively quickly sorry come back too many slides there",
    "start": "1810320",
    "end": "1817679"
  },
  {
    "start": "1817000",
    "end": "1817000"
  },
  {
    "text": "so this is a kind of overview of some of our architecture here so we received these calls from facebook",
    "start": "1818240",
    "end": "1824559"
  },
  {
    "text": "and that's push model for them and we have no idea how much data this is going to be",
    "start": "1824559",
    "end": "1829840"
  },
  {
    "text": "it could be five users have changed could be five million could be 50 million we have no idea",
    "start": "1829840",
    "end": "1835039"
  },
  {
    "text": "so we have a little service in front called c3po um which is kind of a little joke we have",
    "start": "1835039",
    "end": "1840720"
  },
  {
    "text": "it was originally called third party central trafford parties all talk to this and then we were thinking well just how",
    "start": "1840720",
    "end": "1846960"
  },
  {
    "text": "can we make that funny so this is our our binary translation between the inside and the outside world",
    "start": "1846960",
    "end": "1852240"
  },
  {
    "text": "c3pr and what this service does is she takes these huge batches from",
    "start": "1852240",
    "end": "1857360"
  },
  {
    "text": "facebook splits them up into discrete events one per user and just dumps them straight onto a queue",
    "start": "1857360",
    "end": "1863600"
  },
  {
    "text": "so that's our buffer right there it's very simple very slim so what we can do is we can scale that",
    "start": "1863600",
    "end": "1868799"
  },
  {
    "text": "service up completely independently independently from the inside of our",
    "start": "1868799",
    "end": "1874080"
  },
  {
    "text": "system then we have these things we let's call q workers they sit inside ec2",
    "start": "1874080",
    "end": "1880240"
  },
  {
    "text": "they're in the same region that our queues are in so we want really low latency going on",
    "start": "1880240",
    "end": "1885440"
  },
  {
    "text": "there and they just sit and pull for messages and take some action so in this instance they basically read",
    "start": "1885440",
    "end": "1891360"
  },
  {
    "text": "the message they go to facebook fetch the data and then write it into dynamo",
    "start": "1891360",
    "end": "1896559"
  },
  {
    "text": "we're also really big fans of dynamo so you might think that you know really",
    "start": "1896559",
    "end": "1902880"
  },
  {
    "text": "how many changes can people make to their data during a day this could probably handle synchronously",
    "start": "1902880",
    "end": "1909519"
  },
  {
    "text": "so one thing is we monitor everything in our system we i think we send out about quarter of",
    "start": "1909519",
    "end": "1915279"
  },
  {
    "text": "a million stats every second about what's going on internally and this graph represents the different",
    "start": "1915279",
    "end": "1922799"
  },
  {
    "text": "types of messages that get written into sqs and this is a 24 hour period",
    "start": "1922799",
    "end": "1928320"
  },
  {
    "text": "and that's about 50 million messages there and that big blue block at the bottom",
    "start": "1928320",
    "end": "1934000"
  },
  {
    "text": "they're all the messages we've received from real-time updates from facebook which is it's quite a large portion of",
    "start": "1934000",
    "end": "1939039"
  },
  {
    "text": "our traffic so let's dive a little bit more into how these q workers actually function",
    "start": "1939039",
    "end": "1945840"
  },
  {
    "start": "1943000",
    "end": "1943000"
  },
  {
    "text": "so they're essentially fit into three different things we've got polars unmarshallers and handlers polars as the",
    "start": "1945840",
    "end": "1952720"
  },
  {
    "text": "name suggests quite simple go to sqs read some messages back that's all they do they get a little",
    "start": "1952720",
    "end": "1958799"
  },
  {
    "text": "json blob and handle it off to unmarshallers now what we do is we version every",
    "start": "1958799",
    "end": "1966480"
  },
  {
    "text": "message that runs through our system through a 24-hour day operation and we like simplicity",
    "start": "1966480",
    "end": "1972559"
  },
  {
    "text": "if we make a change to a date structure we don't want to mess around draining cues stopping riders pushing in",
    "start": "1972559",
    "end": "1979279"
  },
  {
    "text": "messing up with multiple cues any of that kind of stuff we just want to seamlessly upgrade our systems",
    "start": "1979279",
    "end": "1985840"
  },
  {
    "text": "so we stick a version on there if we make a break and change of the version and we will roll out code that can",
    "start": "1985840",
    "end": "1991120"
  },
  {
    "text": "handle multiple versions concurrently and then when we're sure in old versions that disappeared we'll just",
    "start": "1991120",
    "end": "1996480"
  },
  {
    "text": "rip out the old code so marshaller we'll take version message and because we're at java house we love",
    "start": "1996480",
    "end": "2002960"
  },
  {
    "text": "ooh we love objects we'll turn this payload into an object and we hand it off to a handler",
    "start": "2002960",
    "end": "2009200"
  },
  {
    "text": "and the handlers are also keyed based on the version number so we can have multiple versions of handlers running at",
    "start": "2009200",
    "end": "2014399"
  },
  {
    "text": "the same time and then they simply just fire off whatever business logic there is so in the facebook example that's where the code",
    "start": "2014399",
    "end": "2021600"
  },
  {
    "text": "goes that says talk to facebook write the information into dynamo",
    "start": "2021600",
    "end": "2026480"
  },
  {
    "text": "now there is a disconnect between these two sets of lines here so the handlers have more lines and the polars that's",
    "start": "2026720",
    "end": "2033039"
  },
  {
    "text": "actually intentional so we those two things are actually decoupled there so the polars and the",
    "start": "2033039",
    "end": "2039519"
  },
  {
    "text": "unmarshallers they are asynchronous flow but handing off the handlers isn't a completely separate",
    "start": "2039519",
    "end": "2045360"
  },
  {
    "text": "um executed so fred bank and we originally did this um because a",
    "start": "2045360",
    "end": "2052079"
  },
  {
    "text": "lot of what we do with our handlers is i o bound like we're making a network called facebook",
    "start": "2052079",
    "end": "2057679"
  },
  {
    "text": "then we're making the network called the dynabo so we want to have a lot of messages in flight any one time",
    "start": "2057679",
    "end": "2063200"
  },
  {
    "text": "and i think that's our facebook system typically has about 8 000 messages in flight at any",
    "start": "2063200",
    "end": "2068480"
  },
  {
    "text": "one time now earlier in the year um",
    "start": "2068480",
    "end": "2075280"
  },
  {
    "text": "having jonathan actually mentioned hugo amazon did batch reading now when we wrote this there was",
    "start": "2075280",
    "end": "2080398"
  },
  {
    "text": "no such thing as batch reading we had to do one message at once and handle it now when batch reading",
    "start": "2080399",
    "end": "2085919"
  },
  {
    "text": "came in this is actually really really cool for us because we could lower the number of our polars and just start reading in batches",
    "start": "2085919",
    "end": "2092320"
  },
  {
    "text": "but because the two sides here are disconnected we can actually get the same throughput but actually save money so that was a",
    "start": "2092320",
    "end": "2098800"
  },
  {
    "text": "really really cool thing for us and when another thing when we first did",
    "start": "2098800",
    "end": "2105440"
  },
  {
    "text": "this is single message reading is when queues are empty we have to go",
    "start": "2105440",
    "end": "2110720"
  },
  {
    "text": "to sleep because we don't want to basically waste money we found it out the hard way we actually didn't put very big sleeps",
    "start": "2110720",
    "end": "2117280"
  },
  {
    "text": "in and we found that we spent thousands constantly hitting queues and not getting any messages back",
    "start": "2117280",
    "end": "2123280"
  },
  {
    "text": "so we started introducing longer sleeps and that becomes a trade-off between latency and cost there so we can",
    "start": "2123280",
    "end": "2130320"
  },
  {
    "text": "say go to sleep for five seconds which is fine it's not gonna cost us a lot of money in mgq",
    "start": "2130320",
    "end": "2135440"
  },
  {
    "text": "but that does mean we've got at least a five second gap when there's an mgq between process and",
    "start": "2135440",
    "end": "2140480"
  },
  {
    "text": "message so that was always a bit of a pain for us and knowing where to put those numbers",
    "start": "2140480",
    "end": "2146720"
  },
  {
    "text": "but earlier this year um amazon introduced a long polling as well so what long polling there is we make a",
    "start": "2146720",
    "end": "2153520"
  },
  {
    "text": "connection to the queue and we can sit there if the queue is empty we can sit there for up to 20 seconds",
    "start": "2153520",
    "end": "2159680"
  },
  {
    "text": "before it will actually tell us there's no message but if there is a message it comes through immediately so again having the",
    "start": "2159680",
    "end": "2166079"
  },
  {
    "text": "disconnect between our two sides here was really awesome because now we can spin down the number",
    "start": "2166079",
    "end": "2171599"
  },
  {
    "text": "of polls made again and we no longer have to care about latency and cost because amazon have basically taken care",
    "start": "2171599",
    "end": "2177760"
  },
  {
    "text": "of that for us now",
    "start": "2177760",
    "end": "2180720"
  },
  {
    "text": "so another area i want to talk about is how we make use of sqs slas like i say lsa slash they're not",
    "start": "2183599",
    "end": "2190560"
  },
  {
    "text": "really they're kind of modest priority based systems so we take",
    "start": "2190560",
    "end": "2196160"
  },
  {
    "text": "data from music companies um it wasn't always this way we used to we used a bunch of people",
    "start": "2196160",
    "end": "2201680"
  },
  {
    "text": "would go and buy cds from amazon and then we'd rip cds and they'd type all the information and everything but",
    "start": "2201680",
    "end": "2207119"
  },
  {
    "text": "as we became cooler and more well known record companies actually want to work",
    "start": "2207119",
    "end": "2212240"
  },
  {
    "text": "with us so they they sometimes ship us hard drives full of music or more often not now is they push this",
    "start": "2212240",
    "end": "2218720"
  },
  {
    "text": "stuff directly into us now some record companies are really really important someone we don't care",
    "start": "2218720",
    "end": "2224640"
  },
  {
    "text": "about so much and they can take longer but at the same time we've got human beings updating this data",
    "start": "2224640",
    "end": "2231680"
  },
  {
    "text": "and that's typically we've spotted a problem they need to go and fix it asap or in the case of tv stuff they're",
    "start": "2231680",
    "end": "2238079"
  },
  {
    "text": "actually ingesting tv data into our system to be made available within the next few minutes now one of",
    "start": "2238079",
    "end": "2244880"
  },
  {
    "text": "the downsides of sqs is it has no notion of priority or delivery ordering it's it goes into a",
    "start": "2244880",
    "end": "2251839"
  },
  {
    "text": "queue you know it's coming out but you don't know when it's coming out or what order it's going to go in",
    "start": "2251839",
    "end": "2257760"
  },
  {
    "text": "and this is something we actually need to handle so we solve this with three queues",
    "start": "2257760",
    "end": "2263520"
  },
  {
    "text": "so we have a high priority queue standard protocute a low priority queue and most of our traffic comes in via",
    "start": "2263520",
    "end": "2269760"
  },
  {
    "text": "standard priority queue we don't we're not really too fussed about it's going to happen you know at a normal",
    "start": "2269760",
    "end": "2274960"
  },
  {
    "text": "rate but if we have a really high priority customer or a human being put information and we",
    "start": "2274960",
    "end": "2281440"
  },
  {
    "text": "stick this into a high priority queue and generally things that's like a really big catalog but we don't care so",
    "start": "2281440",
    "end": "2287680"
  },
  {
    "text": "much we'll drop into a low priority queue and what we do about q workers here is",
    "start": "2287680",
    "end": "2293520"
  },
  {
    "text": "they will sit and talk to all three queues here but they will start on the high priority queue and they would sit and connect and",
    "start": "2293520",
    "end": "2299599"
  },
  {
    "text": "work through all the work on that queue until it's empty and we'll sit there with a long pole",
    "start": "2299599",
    "end": "2304640"
  },
  {
    "text": "and we'll wait for that one to time out then and only then do we move on to a standard priority queue and we will do a single iteration on",
    "start": "2304640",
    "end": "2311839"
  },
  {
    "text": "that queue so if there's data we will do one read process that data",
    "start": "2311839",
    "end": "2316880"
  },
  {
    "text": "go back onto the high priority queue again and now wait for information it's basically so we're always",
    "start": "2316880",
    "end": "2322720"
  },
  {
    "text": "processing the most high priority stuff any one time and then ultimately we make it down to the low priority queue",
    "start": "2322720",
    "end": "2328560"
  },
  {
    "text": "and that's it's just background work at that point your stuff's going to get in but we're really not fussed about when",
    "start": "2328560",
    "end": "2334480"
  },
  {
    "text": "it's going to be this is actually my favorite part of what we do with sqs oh",
    "start": "2334480",
    "end": "2341920"
  },
  {
    "text": "sorry my bad um so we used dynamo quite a lot we're real big fans",
    "start": "2341920",
    "end": "2348320"
  },
  {
    "text": "of that like sqs near zero operational concerns for us it's plug and play it just works",
    "start": "2348320",
    "end": "2354720"
  },
  {
    "text": "fantastic um but the thing about dynamo is dynamo only has two configuration values",
    "start": "2354720",
    "end": "2363040"
  },
  {
    "text": "write capacity and read capacity i want to talk about the right capacity",
    "start": "2363040",
    "end": "2369359"
  },
  {
    "text": "so our traffic can be fairly well predicted this is like a traffic graph for a week",
    "start": "2369359",
    "end": "2375200"
  },
  {
    "text": "um fairly predictable as we grow we know how much it's growing by so we could say we need 500 right a",
    "start": "2375200",
    "end": "2382400"
  },
  {
    "text": "second into dynamo that's all we need we will take care of that that's fine",
    "start": "2382400",
    "end": "2387680"
  },
  {
    "text": "but at 8am in the uk that's when we're at the trough of our data everyone in the states is",
    "start": "2387680",
    "end": "2393440"
  },
  {
    "text": "asleep the states is our biggest market we're essentially just wasting money at that point we don't need the throughput",
    "start": "2393440",
    "end": "2400560"
  },
  {
    "text": "and of course we could um schedule changing the capacity on dynamo but",
    "start": "2400560",
    "end": "2406000"
  },
  {
    "text": "there's no guarantees on how long it's going to take for dynamo to scale up or scale down it's just you know it could be a few",
    "start": "2406000",
    "end": "2411760"
  },
  {
    "text": "minutes it could be a few hours and we don't lose any data and then we have",
    "start": "2411760",
    "end": "2417040"
  },
  {
    "text": "large volume events um so like the super bowl or the cmas or the x factor we know these are coming",
    "start": "2417040",
    "end": "2424079"
  },
  {
    "text": "and we can relatively accurately predict the kind of data we're going to see um",
    "start": "2424079",
    "end": "2430319"
  },
  {
    "text": "or the very least we can go and ramp our capacity up really really high so we know we're going to handle it then take it down",
    "start": "2430319",
    "end": "2436000"
  },
  {
    "text": "straight away but we get unknown events as well so they'll be",
    "start": "2436000",
    "end": "2441760"
  },
  {
    "text": "like france is actually really annoying for this is they'll have some random thing on tv",
    "start": "2441760",
    "end": "2447280"
  },
  {
    "text": "some music will come on and everybody gets their phone out at the same time and we don't know it's coming and",
    "start": "2447280",
    "end": "2453280"
  },
  {
    "text": "because it's time sensitive it's you know it's if it's like an advert there's a track on there that adverts on",
    "start": "2453280",
    "end": "2458560"
  },
  {
    "text": "tv for 15 20 seconds if we have a huge volume of data coming in then",
    "start": "2458560",
    "end": "2463920"
  },
  {
    "text": "we don't know it's coming and by the time we've seen it it's gone again so we just cannot react",
    "start": "2463920",
    "end": "2469760"
  },
  {
    "text": "so what we need here is elastic capacity we need to handle any kind of data coming into our system",
    "start": "2469760",
    "end": "2477920"
  },
  {
    "start": "2478000",
    "end": "2478000"
  },
  {
    "text": "so what we do is we essentially put sqs in the middle now jonathan is showing you how you can",
    "start": "2478160",
    "end": "2483760"
  },
  {
    "text": "just use sqs as a buffer through to your systems but the thing about dynamo is",
    "start": "2483760",
    "end": "2489119"
  },
  {
    "text": "is if i say i want 500 rights a second i'm paying for those 500 writes a second",
    "start": "2489119",
    "end": "2494160"
  },
  {
    "text": "whether i use them or not so we really want to use them and have our system running at full speed where",
    "start": "2494160",
    "end": "2499200"
  },
  {
    "text": "possible so what we do here is we write into dynamo",
    "start": "2499200",
    "end": "2504800"
  },
  {
    "text": "we get the message back saying our throughput's been exceeded then we immediately just drop this data onto a queue",
    "start": "2504800",
    "end": "2511040"
  },
  {
    "text": "again we've got q workers sitting inside ec2 constantly spinning readiness data and writing into dynamo",
    "start": "2511040",
    "end": "2519040"
  },
  {
    "text": "now this is not the most sophisticated way of doing this we could figure out really complicated",
    "start": "2519040",
    "end": "2524400"
  },
  {
    "text": "algorithms and make sure we're getting the best throughput from everything but this is very very simple and we like",
    "start": "2524400",
    "end": "2531599"
  },
  {
    "text": "simplicity and it just works and we have this is kind of built into our code as well so we can just",
    "start": "2531599",
    "end": "2537599"
  },
  {
    "text": "this is essentially flipping a switch on any table we write to dynamo we can say to it use a queue as a",
    "start": "2537599",
    "end": "2543760"
  },
  {
    "text": "backdrop so we know we're always writing our data and what an interesting side effects we",
    "start": "2543760",
    "end": "2549680"
  },
  {
    "text": "got this because this is all based on java exception handling is if we make some kind of code problem or",
    "start": "2549680",
    "end": "2555680"
  },
  {
    "text": "there's a network issue or any there's any kind of problem right to dynamo this stuff just ends up on a queue",
    "start": "2555680",
    "end": "2562079"
  },
  {
    "text": "so we can actually come back later and fix that data and we don't get in the way of our",
    "start": "2562079",
    "end": "2567280"
  },
  {
    "text": "clients receiving their response so the default sdk for dynamo",
    "start": "2567280",
    "end": "2575839"
  },
  {
    "text": "is actually it's very nice and what it tries to do is it will retry writing your data into",
    "start": "2575839",
    "end": "2583040"
  },
  {
    "text": "dynamo and i think the java client will do exponential back off up to 45 seconds",
    "start": "2583040",
    "end": "2590240"
  },
  {
    "text": "now for us this is not acceptable we need our data in and out system as fast as possible if you have to sit there with your phone",
    "start": "2590240",
    "end": "2596720"
  },
  {
    "text": "and wait 45 seconds for it to come back and tell you what's on is our competitors are going to kill us at that point we want",
    "start": "2596720",
    "end": "2602880"
  },
  {
    "text": "less than a second in and out of our system so what we do is we reconfigure the",
    "start": "2602880",
    "end": "2608240"
  },
  {
    "text": "clients oh actually it's one more thing sorry is at the same time as this date has been retried",
    "start": "2608240",
    "end": "2614480"
  },
  {
    "text": "45 seconds that's sat in memory so if that server goes down we have lost any data in flight at any",
    "start": "2614480",
    "end": "2620640"
  },
  {
    "text": "point there and again that's just completely unacceptable for us so what we do is our transaction flow",
    "start": "2620640",
    "end": "2628079"
  },
  {
    "text": "reconfigure the client no retries fail as fast as possible because it's dynamo we're looking at",
    "start": "2628079",
    "end": "2633520"
  },
  {
    "text": "single digit millisecond times there but our q workers what we use is they're",
    "start": "2633520",
    "end": "2639280"
  },
  {
    "text": "already asynchronous so they can say we do reconfigure them slightly from the defaults",
    "start": "2639280",
    "end": "2644480"
  },
  {
    "text": "so they're a bit more aggressive with their retries but essentially they can sit and just wait up to 45 seconds to get the data",
    "start": "2644480",
    "end": "2650880"
  },
  {
    "text": "right that's fine they're asynchronous and these are now the guys that apply back pressure into the queue so we don't",
    "start": "2650880",
    "end": "2656400"
  },
  {
    "text": "just constantly read information off them now when we first started writing the",
    "start": "2656400",
    "end": "2662960"
  },
  {
    "text": "system we went through a variety of database technologies some key value some relational",
    "start": "2662960",
    "end": "2670000"
  },
  {
    "text": "and because we changed our mind quite a lot is we needed an abstraction and any java people knows like jdbc is",
    "start": "2670000",
    "end": "2677680"
  },
  {
    "text": "typically your your abstraction layer that doesn't work with nosql databases so we can of our own",
    "start": "2677680",
    "end": "2683200"
  },
  {
    "text": "just comically simple and it's just the writer and it writes a piece of data and that's what it does is",
    "start": "2683200",
    "end": "2690079"
  },
  {
    "text": "we have some other stuff going on it's a little bit more complicated this is the main thing",
    "start": "2690079",
    "end": "2695119"
  },
  {
    "text": "so inside our code all of our business logic just knows i'm being given a writer and what we have is we have a dynamo",
    "start": "2695119",
    "end": "2701599"
  },
  {
    "text": "writer and we have an sqs writer what's our business logic",
    "start": "2701599",
    "end": "2706880"
  },
  {
    "text": "it has no idea what's going on we can switch to writing directly to sqs or straight to dynamo",
    "start": "2706880",
    "end": "2712560"
  },
  {
    "text": "the backing off can all happen automatically no code is ever aware of it",
    "start": "2712560",
    "end": "2719839"
  },
  {
    "text": "this will become very important in a second so during our redesign um",
    "start": "2720480",
    "end": "2727920"
  },
  {
    "start": "2721000",
    "end": "2721000"
  },
  {
    "text": "one of the key things we thought was important is is moving fast we're an agile company we",
    "start": "2727920",
    "end": "2733119"
  },
  {
    "text": "like to move really quickly and be very agile and all that kind of hip stuff um so relational databases for us we're",
    "start": "2733119",
    "end": "2740240"
  },
  {
    "text": "just out so doing an upgrade we don't want dbas getting involved",
    "start": "2740240",
    "end": "2745680"
  },
  {
    "text": "and at the same time the ultimate decision is we don't want multiple teams having access to the same data stores",
    "start": "2745680",
    "end": "2751920"
  },
  {
    "text": "so we can actually go in our system now from developer machine to hooked up to",
    "start": "2751920",
    "end": "2757760"
  },
  {
    "text": "production databases in a staging environment within 17 minutes",
    "start": "2757760",
    "end": "2762800"
  },
  {
    "text": "now once you bring in other teams into that picture and you make a breaking change to your",
    "start": "2762800",
    "end": "2768160"
  },
  {
    "text": "schema that now 17 minutes is more like 17 days or 17 weeks because everybody has to get",
    "start": "2768160",
    "end": "2775040"
  },
  {
    "text": "up to speed with the changes so we say no we're not doing that",
    "start": "2775040",
    "end": "2780160"
  },
  {
    "text": "so we have teams maintain their own data stores so we can now use sns sqs bridging for",
    "start": "2780160",
    "end": "2787520"
  },
  {
    "text": "this so again our logic previously that was writing out into sqs",
    "start": "2787520",
    "end": "2793040"
  },
  {
    "text": "we swapped it in for an s writer at this point so we've got this is our tag data here",
    "start": "2793040",
    "end": "2798319"
  },
  {
    "text": "so basically information about you you've recognized the song oh",
    "start": "2798319",
    "end": "2804000"
  },
  {
    "text": "you don't need something you haven't seen that one um so you recognize the song we've got the artist the track id",
    "start": "2804079",
    "end": "2809280"
  },
  {
    "text": "all that kind of usual stuff um and we broadcast to sns and then we",
    "start": "2809280",
    "end": "2814640"
  },
  {
    "text": "bind it into a queue for reporting system our reporting system reads straight into s3 ultimately goes into redshift",
    "start": "2814640",
    "end": "2820880"
  },
  {
    "text": "they can do their funky sql style analytic stuff um and we also have i mentioned",
    "start": "2820880",
    "end": "2828400"
  },
  {
    "text": "earlier is we do the social stuff you can see what your friends are tagging now",
    "start": "2828400",
    "end": "2833680"
  },
  {
    "text": "this is completely an asynchronous flow anyway because this doesn't have to be on the transaction pathway you don't want getting in the way",
    "start": "2833680",
    "end": "2839040"
  },
  {
    "text": "of a user getting a result so this happens in the background very very quickly happens in the background but we use",
    "start": "2839040",
    "end": "2845680"
  },
  {
    "text": "the same queue for that as well so we have the api on the left and the api on the right",
    "start": "2845680",
    "end": "2850800"
  },
  {
    "text": "same api they've just got a queue set in the middle buffering all this information",
    "start": "2850800",
    "end": "2856880"
  },
  {
    "text": "now one of the really really cool things about this is you can add extra cues onto the back of",
    "start": "2857200",
    "end": "2862720"
  },
  {
    "text": "sns and you will get no performance penalty whatsoever because your code right to sns that's really quick",
    "start": "2862720",
    "end": "2869119"
  },
  {
    "text": "and the bindings is happening the background by amazon you've got to pay a little bit more money obviously but",
    "start": "2869119",
    "end": "2875440"
  },
  {
    "text": "there's no performance penalty and it's very very safe so there's nothing anybody on the right",
    "start": "2875440",
    "end": "2880559"
  },
  {
    "text": "hand side of this picture can do to affect anybody else they've got their own copy of the data",
    "start": "2880559",
    "end": "2887359"
  },
  {
    "text": "now one of the things we do at shazam is we get to spend 15 of our time hacking around on random",
    "start": "2887359",
    "end": "2894079"
  },
  {
    "text": "stuff so you know we can play with build processes or we can just mess around with new tools and techniques but a lot",
    "start": "2894079",
    "end": "2901440"
  },
  {
    "text": "of the front-end guys they like to make really cool visualizations and do funky web stuff which i'll be honest",
    "start": "2901440",
    "end": "2906559"
  },
  {
    "text": "i don't understand in the slightest and one of the things they've always wanted was",
    "start": "2906559",
    "end": "2911760"
  },
  {
    "text": "a copy of production data inside our development environment because we're not insane we're not going to let",
    "start": "2911760",
    "end": "2916960"
  },
  {
    "text": "them have access to our production data well this has always been very cost prohibitive we've got a lot of data",
    "start": "2916960",
    "end": "2923760"
  },
  {
    "text": "we've got an old oracle system kicking around we're not going to pay all the money to duplicate that into dev but once we had this",
    "start": "2923760",
    "end": "2931200"
  },
  {
    "text": "we realized we've got a really cost effective way of getting this data into development so we added another q1 there",
    "start": "2931200",
    "end": "2938640"
  },
  {
    "text": "awesome production no issues whatsoever we just spend a little bit more money",
    "start": "2938640",
    "end": "2943839"
  },
  {
    "text": "but then what we realized at the time was we don't need to feed this information into a database because actually what devs want isn't",
    "start": "2943839",
    "end": "2951040"
  },
  {
    "text": "access to historical data they want access to data now so these guys end up with actually a",
    "start": "2951040",
    "end": "2956160"
  },
  {
    "text": "real-time stream of data into the development environment that they can hack on and they've done some",
    "start": "2956160",
    "end": "2961599"
  },
  {
    "text": "really cool stuff with real-time visualizations and spinning globes and stuff that's happening it's",
    "start": "2961599",
    "end": "2966960"
  },
  {
    "text": "it's very very cool unfortunately you can't see it cause i'm not allowed to show you",
    "start": "2966960",
    "end": "2972160"
  },
  {
    "text": "so to summarize for us is buffering dynamo was our first use case",
    "start": "2972800",
    "end": "2978319"
  },
  {
    "text": "for sqs um and we didn't we didn't really see it as a queuing system we just saw it as this is a really awesome short-term",
    "start": "2978319",
    "end": "2986079"
  },
  {
    "text": "storage space though that's completely unbounded that just costs us a little bit more than",
    "start": "2986079",
    "end": "2991280"
  },
  {
    "text": "writing into dynamo but we can use it when we need to and after that we realize now we've done",
    "start": "2991280",
    "end": "2997440"
  },
  {
    "text": "this we've actually got a lot more use cases for it so it was after this we started using it",
    "start": "2997440",
    "end": "3002960"
  },
  {
    "text": "for our outside world protection our sqs shield if you will and it's cost effective",
    "start": "3002960",
    "end": "3009200"
  },
  {
    "text": "capacity and it lets us do our data segregation in a really scalable",
    "start": "3009200",
    "end": "3014800"
  },
  {
    "text": "way um one thing we're actually working on right now is decoupling essentially all of our front-end traffic from",
    "start": "3014800",
    "end": "3021359"
  },
  {
    "text": "anything on the back end and pushing everything through sqs so that our back-end systems don't have to",
    "start": "3021359",
    "end": "3027520"
  },
  {
    "text": "scale as much as our front-end systems do thank you",
    "start": "3027520",
    "end": "3038400"
  }
]