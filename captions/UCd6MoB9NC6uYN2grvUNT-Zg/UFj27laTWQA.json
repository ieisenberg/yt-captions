[
  {
    "start": "0",
    "end": "23000"
  },
  {
    "text": "good morning thanks so much for joining us here today hopefully most of you had a chance to hear a little bit about",
    "start": "1360",
    "end": "6560"
  },
  {
    "text": "Lambda in verner's keynote this earlier this morning and in this session we're going to be talking about how we develop",
    "start": "6560",
    "end": "12719"
  },
  {
    "text": "this service in the first place some of the things that we think people are going to use it for and then a little bit about how you actually use",
    "start": "12719",
    "end": "20840"
  },
  {
    "text": "Lambda so let's talk a little bit about the motivations here and I want to begin with a couple of simple problems so",
    "start": "21920",
    "end": "29400"
  },
  {
    "start": "23000",
    "end": "23000"
  },
  {
    "text": "first imagine that you want to upload some images maybe from a mobile app or web app to your S3 bucket and then once",
    "start": "29400",
    "end": "36800"
  },
  {
    "text": "they're there you'd like to turn them into thumbnails or maybe do some other kind of image",
    "start": "36800",
    "end": "41879"
  },
  {
    "text": "conversion very simple problem another simple problem imagine that you've got a",
    "start": "41879",
    "end": "47360"
  },
  {
    "text": "Dynamo DB table you've got addresses stored in the table and you'd like to verify that each of those addresses is",
    "start": "47360",
    "end": "53000"
  },
  {
    "text": "well formed maybe corrected if it's not easy to describe probably not very much",
    "start": "53000",
    "end": "58480"
  },
  {
    "text": "code for either one of these problems but what does it take to actually Implement them well it turns out the",
    "start": "58480",
    "end": "64400"
  },
  {
    "text": "solution is actually a more complicated even with all the great building blocks that AWS provides there's still a lot",
    "start": "64400",
    "end": "72000"
  },
  {
    "text": "that you've got to do turning those few lines of code into a highly available highly reliable highly scalable and very",
    "start": "72000",
    "end": "79799"
  },
  {
    "text": "secure web service takes a lot of work you've got to go provision some machines to be able to capture those incoming",
    "start": "79799",
    "end": "86960"
  },
  {
    "text": "requests you need some kind of durable queue to be be able to store the jobs that you're going to need to do such as",
    "start": "86960",
    "end": "92479"
  },
  {
    "text": "those image transforms you need some more machines to actually go do the image transforms",
    "start": "92479",
    "end": "97799"
  },
  {
    "text": "and then with all these machines you've got to get code deployed onto them not just once but many times you need to",
    "start": "97799",
    "end": "103600"
  },
  {
    "text": "figure out how many you machines you need how much capacity how bursty will your workloads be are you sure you've",
    "start": "103600",
    "end": "109560"
  },
  {
    "text": "got enough but not too much and then you need to build in a bunch of things which aren't directly",
    "start": "109560",
    "end": "114880"
  },
  {
    "text": "related to your business logic but are still super important the monitoring piece the logging",
    "start": "114880",
    "end": "121000"
  },
  {
    "text": "piece and then once you've got all of that on day one you've got to worry about the future how do you migrate this",
    "start": "121000",
    "end": "127079"
  },
  {
    "text": "going forward how do you do security patching how do you keep all of this up to date what happens when Hardware types",
    "start": "127079",
    "end": "134480"
  },
  {
    "text": "change what if there were a better way what we challenged ourselves to think about was a mechanism by which we could",
    "start": "134560",
    "end": "141120"
  },
  {
    "text": "take use cases like this and provide a much simpler solution one way you could",
    "start": "141120",
    "end": "146480"
  },
  {
    "text": "tie the code to the data as it enters the cloud or as it passes through the",
    "start": "146480",
    "end": "153000"
  },
  {
    "text": "cloud and so one of the key ideas we had was what if every service in AWS could",
    "start": "153000",
    "end": "159360"
  },
  {
    "text": "generate events could tell you when it's done something interesting maybe an API has been called or an object has been",
    "start": "159360",
    "end": "166800"
  },
  {
    "text": "has gone through some kind of transition so if you think about S3 as an example",
    "start": "166800",
    "end": "171920"
  },
  {
    "text": "you start by putting an object the first time that's a creation event then you copy the object perhaps that's a copy",
    "start": "171920",
    "end": "177360"
  },
  {
    "text": "event then you do some updates to the object delete the object each one of these transitions is a different kind of",
    "start": "177360",
    "end": "184560"
  },
  {
    "text": "event but having events themselves isn't enough you need a way to respond to",
    "start": "184560",
    "end": "190280"
  },
  {
    "text": "those events that's super easy in a way that matches the complexity of the solution to the complexity of the code",
    "start": "190280",
    "end": "197400"
  },
  {
    "text": "that you're trying to deploy so it's got to be easy to author it's got to be easy to maintain it's got to be easy to",
    "start": "197400",
    "end": "203400"
  },
  {
    "text": "manage it's got to be easy to scale right this is where a full stack solution is so complicated because if",
    "start": "203400",
    "end": "209599"
  },
  {
    "text": "you you've got 10 lines of codee right deploying a full stack solution for that just doesn't feel like the right answer",
    "start": "209599",
    "end": "215959"
  },
  {
    "text": "it's an impedance mismatch to the size and scope of the actual problem so instead our answer to this is what we",
    "start": "215959",
    "end": "221840"
  },
  {
    "start": "220000",
    "end": "220000"
  },
  {
    "text": "call event driven compute it's all about taking stateless",
    "start": "221840",
    "end": "227720"
  },
  {
    "text": "request driven code that we call Lambda functions and then triggering those Lambda functions on all of these",
    "start": "227720",
    "end": "234000"
  },
  {
    "text": "different events so if something happens in an AWS service you can have a trigger or an event handler that goes that goes",
    "start": "234000",
    "end": "240720"
  },
  {
    "text": "and takes action to respond to that and that action can be anything you want it's just code you can call other AWS",
    "start": "240720",
    "end": "247840"
  },
  {
    "text": "Services you can call other web services so now you can take something like a put to a uh an S3 bucket a write",
    "start": "247840",
    "end": "255840"
  },
  {
    "text": "to a Dynamo table maybe a life cycle transition in you see2 messages that get",
    "start": "255840",
    "end": "260919"
  },
  {
    "text": "entered into a queue or data that's passing through uh like clickstream data passing through a Kinesis stream and you",
    "start": "260919",
    "end": "267479"
  },
  {
    "text": "can turn all of those things in fact any any API or resource transition eventually into a code",
    "start": "267479",
    "end": "274720"
  },
  {
    "text": "execution with this ads Lambda becomes the connective tissue for all of AWS the",
    "start": "274720",
    "end": "280720"
  },
  {
    "text": "thing that lets you turn these API calls or resource changes into code",
    "start": "280720",
    "end": "286919"
  },
  {
    "text": "responses so what could we do with this if we had it well we already talked about one",
    "start": "286919",
    "end": "293560"
  },
  {
    "text": "interesting use case here we can build data triggers we can take things like uploads of images as they pass into an",
    "start": "293560",
    "end": "300400"
  },
  {
    "text": "S3 bucket and then build automatic responses to them so Lambda can take those images and with a few lines of",
    "start": "300400",
    "end": "306800"
  },
  {
    "text": "code create a thumbnail and put it back into the same bucket into a different bucket in fact we'll take a look at that",
    "start": "306800",
    "end": "312280"
  },
  {
    "text": "in the demo here in a few minutes another example data that you put into a Dynamo",
    "start": "312280",
    "end": "319199"
  },
  {
    "start": "315000",
    "end": "315000"
  },
  {
    "text": "DB table can generate change events so earlier this week we announced a limited",
    "start": "319199",
    "end": "324280"
  },
  {
    "text": "preview of a new Dynamo feature called streams streams are Delta events they",
    "start": "324280",
    "end": "330039"
  },
  {
    "text": "tell you what happened to a table by showing you either the new data the old data or both of them as that data is",
    "start": "330039",
    "end": "337000"
  },
  {
    "text": "changing in the table now you can use this feature for lots of different things but one really interesting thing",
    "start": "337000",
    "end": "342520"
  },
  {
    "text": "you can do with it is to hook it up to a Lambda function so now as you put data into your Dynamo table you can respond",
    "start": "342520",
    "end": "349360"
  },
  {
    "text": "to those changes you can check an address you can correct an address you",
    "start": "349360",
    "end": "354680"
  },
  {
    "text": "can make copies to another table and not just blind copies but filtered or transformed copies copies or you can",
    "start": "354680",
    "end": "361080"
  },
  {
    "text": "detect data that maybe is anomalous or out of bounds and send yourself a",
    "start": "361080",
    "end": "366600"
  },
  {
    "text": "notification to expand a little bit on that notification one we think there's a whole range of really interesting",
    "start": "367440",
    "end": "373000"
  },
  {
    "start": "368000",
    "end": "368000"
  },
  {
    "text": "auditing cases here as well so if you're already familiar with AWS cloud trail",
    "start": "373000",
    "end": "378039"
  },
  {
    "text": "you know that we have a mechanism in AWS a service that for any API call across",
    "start": "378039",
    "end": "383120"
  },
  {
    "text": "the whole range of AWS Services can generate a log file in S3 to tell you",
    "start": "383120",
    "end": "388440"
  },
  {
    "text": "who's been calling what who's been doing what with your resources that's a super powerful service already but because it drops",
    "start": "388440",
    "end": "395400"
  },
  {
    "text": "that file into S3 now you can hook up Lambda and you can very quickly build an",
    "start": "395400",
    "end": "400720"
  },
  {
    "text": "auditing solution that looks at the records in that audit in that audit log and decides what to do with them which",
    "start": "400720",
    "end": "407039"
  },
  {
    "text": "ones are important which ones aren't important which ones to keep or if something looks really bad maybe which",
    "start": "407039",
    "end": "412560"
  },
  {
    "text": "ones to wake you up in the middle of the night for and while we I describe this here in terms of cloud trail there's nothing",
    "start": "412560",
    "end": "419800"
  },
  {
    "text": "special about the fact that that they generated the log any log generated by any Source in S3 could do the same",
    "start": "419800",
    "end": "427479"
  },
  {
    "text": "thing and finally there's nothing magic about the fact that other AWS services",
    "start": "427479",
    "end": "432520"
  },
  {
    "start": "428000",
    "end": "428000"
  },
  {
    "text": "are generating these events the API on Lambda that accepts those events is just triggering a batch",
    "start": "432520",
    "end": "439960"
  },
  {
    "text": "computation it can take custom events from any of your applications as well so if you have a mobile application tablet",
    "start": "439960",
    "end": "446639"
  },
  {
    "text": "application web app other web service you can call into lambda's public API pass it an event as Json and get it to",
    "start": "446639",
    "end": "453800"
  },
  {
    "text": "kick off an event processing just as if it were coming from another AWS service so some interesting use cases",
    "start": "453800",
    "end": "462080"
  },
  {
    "text": "here what does it take to make those use cases really sore how would we have to style this in a way that would make it",
    "start": "462080",
    "end": "468680"
  },
  {
    "text": "really effective well when we thought about the requirements for Lambda the first one we started with was the",
    "start": "468680",
    "end": "474680"
  },
  {
    "text": "infrastructure challenge because if you think of that long laundry list I gave you at the beginning we've got to get",
    "start": "474680",
    "end": "480840"
  },
  {
    "text": "rid of all of those different steps or we're not going to be able to make this simple enough to have maybe as little as",
    "start": "480840",
    "end": "486840"
  },
  {
    "text": "one line of code turned into a service and do and do so easily and quickly so",
    "start": "486840",
    "end": "492759"
  },
  {
    "text": "in order to let you focus on the business logic Lambda has to take on the other responsibilities handling capacity",
    "start": "492759",
    "end": "499479"
  },
  {
    "text": "scaling deployment of your code fault tolerance monitoring logging all of",
    "start": "499479",
    "end": "504520"
  },
  {
    "text": "these things are built into Lambda so that you don't have to worry about them anymore",
    "start": "504520",
    "end": "510879"
  },
  {
    "text": "now the other piece that's really important to get right here is automatic scaling and this has to do with the way",
    "start": "510879",
    "end": "517279"
  },
  {
    "text": "lamb works so instead of renting compute capacity and installing your own applications on it you give us code and",
    "start": "517279",
    "end": "523959"
  },
  {
    "text": "then you tell us when to run the code so lambda's request model looks a lot like S3 or Dynamo's request model only",
    "start": "523959",
    "end": "530720"
  },
  {
    "text": "instead of saying hey please upload my code or please get me an object that I've previously stored with Lambda",
    "start": "530720",
    "end": "536880"
  },
  {
    "text": "you're saying please run my code now it's time to it's time to go do something here's an event let's go",
    "start": "536880",
    "end": "542000"
  },
  {
    "text": "process it so in order to make that work right we need to be able to match the",
    "start": "542000",
    "end": "547040"
  },
  {
    "text": "rate of changes that are happening in say an S3 bucket or a Dynamo table with",
    "start": "547040",
    "end": "552160"
  },
  {
    "text": "the rate of invocation of the Lambda functions so as you start doing more and more puts in the table more and more",
    "start": "552160",
    "end": "558720"
  },
  {
    "text": "parallel Lambda functions start getting fired off if you throttle them back you make fewer and fewer requests and the",
    "start": "558720",
    "end": "565200"
  },
  {
    "text": "nice thing about that is you don't have to worry about over or under provisioning just as if you're using an",
    "start": "565200",
    "end": "570600"
  },
  {
    "text": "S3 API right you never worry about whether or not there's too much or too little disc capacity in S3 you just make",
    "start": "570600",
    "end": "577120"
  },
  {
    "text": "the request you want and you trust that service to do the right thing with them and of course that also means that you",
    "start": "577120",
    "end": "582800"
  },
  {
    "text": "get a very micro version of pay for use because we only do work on your behalf",
    "start": "582800",
    "end": "589000"
  },
  {
    "text": "when you actually give us a request be yoc bring your own code so",
    "start": "589000",
    "end": "595920"
  },
  {
    "text": "obviously Lambda is a different kind of Paradigm and I want to be really clear that is not about taking an existing web",
    "start": "595920",
    "end": "601399"
  },
  {
    "text": "app and running it in a different way ec2 is a great existing solution for that we have bean stalk and lots of",
    "start": "601399",
    "end": "606920"
  },
  {
    "text": "other mechanisms that work really well for that today but if you want to run some node.js code which is the language",
    "start": "606920",
    "end": "612279"
  },
  {
    "text": "we support at launch you want to be able to do so in a way that doesn't provide lockin and gives you lots of flexibility",
    "start": "612279",
    "end": "619440"
  },
  {
    "text": "so for example you want to be able to create threads and processes you don't want to get locked into some strange programming model that doesn't feel",
    "start": "619440",
    "end": "626240"
  },
  {
    "text": "natural you want to be able to use libraries that might have to write write data to/ temp and in fact we'll do that",
    "start": "626240",
    "end": "631560"
  },
  {
    "text": "in the demo in a few seconds here and you want to be able to bring your libraries with you and so one of the",
    "start": "631560",
    "end": "636880"
  },
  {
    "text": "designed requirements that we set at the very beginning of the Lambda project was to say that you have to be able to bring",
    "start": "636880",
    "end": "643040"
  },
  {
    "text": "any Library you want not just native JavaScript libraries in the node.js case",
    "start": "643040",
    "end": "648600"
  },
  {
    "text": "but native but any native Library whatsoever and then finally to make all",
    "start": "648600",
    "end": "654920"
  },
  {
    "text": "of this work the pricing has to match the scale of the functions so if you have a function that only runs for a few",
    "start": "654920",
    "end": "661120"
  },
  {
    "text": "hundred milliseconds to thumbnail an image you don't want to be charged for a minute or an hour of compute time and as",
    "start": "661120",
    "end": "667959"
  },
  {
    "text": "a result we've set the pricing at a very granular way so that every 100 milliseconds is the granularity that",
    "start": "667959",
    "end": "673519"
  },
  {
    "text": "we've chosen here so that it's a nice match to the size of the functions and the amount of work that they're",
    "start": "673519",
    "end": "680120"
  },
  {
    "text": "doing so let me just take a second here and kind of do a quick compare and contrast because one of the questions I",
    "start": "680120",
    "end": "685680"
  },
  {
    "text": "get asked a lot is you know how is this different than what you've got today what different about Lambda so quick",
    "start": "685680",
    "end": "692279"
  },
  {
    "text": "summary here as I said lambda's request driven as opposed to an infrastructure rental so you tell us when you want work",
    "start": "692279",
    "end": "699079"
  },
  {
    "text": "to get done you call into the apis or more frequently you do something if with",
    "start": "699079",
    "end": "704519"
  },
  {
    "text": "another AWS service that triggers the apis to run Lambda was designed with the",
    "start": "704519",
    "end": "710320"
  },
  {
    "text": "perspective of trying to be making it easy to use is designed with productivity in mind so it has a fixed",
    "start": "710320",
    "end": "716639"
  },
  {
    "text": "operating system has a fixed language we let you bring your own libraries of course but we try to make it a very",
    "start": "716639",
    "end": "723160"
  },
  {
    "text": "simple system to get started I contrast that with ec2 where there are a whole lot of different workloads some",
    "start": "723160",
    "end": "728760"
  },
  {
    "text": "workloads that require different types of of Hardware workloads that require different operating systems and so if",
    "start": "728760",
    "end": "735320"
  },
  {
    "text": "you have that kind of flexibility need E2 is the right answer but if you just have some code you want to run and",
    "start": "735320",
    "end": "740360"
  },
  {
    "text": "you're relatively indifferent to things like you know exactly which Linux am I running on then Lambda makes it really",
    "start": "740360",
    "end": "746600"
  },
  {
    "text": "easy to get that job done with ec2 you own and manage the infrastructure you rent with Lambda we",
    "start": "746600",
    "end": "753160"
  },
  {
    "text": "own and manage the infrastructure so that's the way that we make it possible to take a lot of that burden away from",
    "start": "753160",
    "end": "759800"
  },
  {
    "text": "the from the developer and then of course the scaling model as I mentioned with Lambda rather",
    "start": "759800",
    "end": "765440"
  },
  {
    "text": "than scaling by specific instances you just scale by making requests it's implicit scaling system in that you ask",
    "start": "765440",
    "end": "771600"
  },
  {
    "text": "for the work you want to get done and behind the scenes we take care of things like figuring out how much compute",
    "start": "771600",
    "end": "777160"
  },
  {
    "text": "capacity you need and where to land those requests within it all right let's move on here and talk",
    "start": "777160",
    "end": "783839"
  },
  {
    "text": "a little bit about how you actually use Lambda so what does it feel like to a developer well we'll start with the",
    "start": "783839",
    "end": "789399"
  },
  {
    "start": "788000",
    "end": "788000"
  },
  {
    "text": "obvious here like writing the code we're launching with nodejs support we'll be adding more languages down the",
    "start": "789399",
    "end": "797000"
  },
  {
    "text": "line built into this is the AWS SDK so while you're not required to use other AWS services in order to use Lambda one",
    "start": "797000",
    "end": "804800"
  },
  {
    "text": "of the things that we wanted to make really easy was setting up and pre-red ening your ability to call any other AWS",
    "start": "804800",
    "end": "812160"
  },
  {
    "text": "service so by including the the SDK and getting it all set up we made it really simple for you to just get started all",
    "start": "812160",
    "end": "819000"
  },
  {
    "text": "you have to do is is begin calling say S3 or Dynamo or whatever apis you want",
    "start": "819000",
    "end": "824360"
  },
  {
    "text": "to use and then for convenience we've actually included a graphics Library as well um image magic but we've done that",
    "start": "824360",
    "end": "832279"
  },
  {
    "text": "purely for convenience you don't like the version that we included more than welcome to bring your own you can even bring a different copy of image magic if",
    "start": "832279",
    "end": "838880"
  },
  {
    "text": "you want to compile it with different flags than what we've chosen now the programming model has one",
    "start": "838880",
    "end": "844320"
  },
  {
    "text": "interesting difference than what you might be used to on ec2 and that's that these Lambda functions are stateless and",
    "start": "844320",
    "end": "850880"
  },
  {
    "text": "what we mean by that is that if you've got persistent data you can't store it",
    "start": "850880",
    "end": "855959"
  },
  {
    "text": "locally within the function because there's no guarantee that your function is going to be run on the same piece of infrastructure from from invocation to",
    "start": "855959",
    "end": "862600"
  },
  {
    "text": "invocation different requests might land on on different pieces of infrastructure either because you're running them in",
    "start": "862600",
    "end": "867759"
  },
  {
    "text": "parallel or because we've changed the infrastructure over time so if you've got data that you want to store or data",
    "start": "867759",
    "end": "873639"
  },
  {
    "text": "that you want to read you need to put it in S3 Dynamo or some other kind of Internet available storage device so",
    "start": "873639",
    "end": "880120"
  },
  {
    "text": "that you can retrieve that data when you want it apart from that we've tried very hard",
    "start": "880120",
    "end": "885240"
  },
  {
    "text": "to make this a familiar model so you can use things like processes and threads you can write data to slash temp data",
    "start": "885240",
    "end": "892399"
  },
  {
    "text": "won't be there forever but you can write it there while you're executing bring your own libraries and there are a very",
    "start": "892399",
    "end": "897959"
  },
  {
    "text": "small number of restrictions that we put in place from the sandbox so we tried really hard not to let the complexity of",
    "start": "897959",
    "end": "904399"
  },
  {
    "text": "providing a very secure and isolated model show through into the programming so we put only a few restrictions things",
    "start": "904399",
    "end": "911360"
  },
  {
    "text": "like not allowing you to do inbound socket connections because we're doing the web service front end for",
    "start": "911360",
    "end": "917800"
  },
  {
    "text": "you all right once you've written some code what do you do with it well configuring Lambda functions is really",
    "start": "917800",
    "end": "923240"
  },
  {
    "start": "919000",
    "end": "919000"
  },
  {
    "text": "straightforward we'll we'll show you how that works pick a name for your function that's how we identify them",
    "start": "923240",
    "end": "929480"
  },
  {
    "text": "pick a size and by size we mean picking a memory size so you can set it anywhere from 128 to a gigabyte in steps of 64",
    "start": "929480",
    "end": "938639"
  },
  {
    "text": "Meg now while we ask you for it in terms of memory what we're really doing here",
    "start": "938639",
    "end": "944000"
  },
  {
    "text": "is sizing all of the resources for you at once so if you ask for say 512 versus",
    "start": "944000",
    "end": "949440"
  },
  {
    "text": "256 you get roughly twice the compute power along with twice the memory this gives you a sing a simple single dial by",
    "start": "949440",
    "end": "957000"
  },
  {
    "text": "which you can tune your price performance ratio now one of the questions that people",
    "start": "957000",
    "end": "963120"
  },
  {
    "text": "have is well how do I know like what you know what if I use too much or too little memory so we provide monitoring",
    "start": "963120",
    "end": "970519"
  },
  {
    "text": "so you can see things like error rates in case you've provided too little memory and maybe you're you're having challenges there or your latency is",
    "start": "970519",
    "end": "976440"
  },
  {
    "text": "getting high we also stamp into every log result for every function that executes how much memory you had",
    "start": "976440",
    "end": "982720"
  },
  {
    "text": "requested for it and how much you actually used so that it's really easy for you to go in there and see hey maybe",
    "start": "982720",
    "end": "988360"
  },
  {
    "text": "I've allocated too much and I can turn it down and save myself some money and then once you pick the name",
    "start": "988360",
    "end": "993759"
  },
  {
    "text": "and pick the size you have the option to pick an event source so if you're doing custom events you might stop after the",
    "start": "993759",
    "end": "1000440"
  },
  {
    "text": "first two if you want to hook this Lambda function up to S3 to Dynamo to a Kinesis stream then you're going to go",
    "start": "1000440",
    "end": "1007560"
  },
  {
    "text": "configure the association between the function and the AWS service that's generating those",
    "start": "1007560",
    "end": "1014480"
  },
  {
    "start": "1016000",
    "end": "1016000"
  },
  {
    "text": "events so wiring up events AWS Services send these events or or",
    "start": "1016120",
    "end": "1023240"
  },
  {
    "text": "have these events retrieved from them in the form of Json and in fact if anybody's looked at the cloud trail",
    "start": "1023240",
    "end": "1030520"
  },
  {
    "text": "schema in the docs that's exactly the same thing that we're using now like the events that S3 and Dynamo would generate",
    "start": "1030520",
    "end": "1037400"
  },
  {
    "text": "look a whole lot like the records that cloud trail generates today for API",
    "start": "1037400",
    "end": "1043319"
  },
  {
    "text": "auditing these events these Json payloads get reliably transmitted between other AWS services and Lambda so",
    "start": "1043319",
    "end": "1051919"
  },
  {
    "text": "that we can provide what we call at least once execution attempts on your code and you can guarantee for example",
    "start": "1051919",
    "end": "1058679"
  },
  {
    "text": "that if you've put an object into S3 that we will in fact go and and attempt the execution of your lamb of your",
    "start": "1058679",
    "end": "1064559"
  },
  {
    "text": "Lambda function now what happens if your code is broken right we're going to",
    "start": "1064559",
    "end": "1070360"
  },
  {
    "text": "attempt the execution but there's no guarantee that your code is going to do something useful it could have a top level exception it could it could go",
    "start": "1070360",
    "end": "1077080"
  },
  {
    "text": "into an infinite Loop so there are two possible answers to that and we have to",
    "start": "1077080",
    "end": "1082320"
  },
  {
    "text": "talk here a little bit about the implementation specifics so the first category of",
    "start": "1082320",
    "end": "1088000"
  },
  {
    "text": "events that we've got are from services that we call Push Services so the easiest one of those to understand is",
    "start": "1088000",
    "end": "1094480"
  },
  {
    "text": "custom events obviously in that case your application is pushing that event to Lambda in the form of making an API",
    "start": "1094480",
    "end": "1100840"
  },
  {
    "text": "call it turns out S3 works the same way when something happens in an S3 bucket",
    "start": "1100840",
    "end": "1106360"
  },
  {
    "text": "S3 on your behalf makes a call to Lambda and says hey it's time to go run an event here's what just went on in this",
    "start": "1106360",
    "end": "1113919"
  },
  {
    "text": "bucket those are processed in an unordered model very similar to what the way SQ sqs work today and we'll make",
    "start": "1113919",
    "end": "1121240"
  },
  {
    "text": "three attempts to run your code so if your code is throwing a top level exception you get two more tries at that",
    "start": "1121240",
    "end": "1127080"
  },
  {
    "text": "point we'll give up of course you can always put handlers in your code to sort of to catch that",
    "start": "1127080",
    "end": "1133559"
  },
  {
    "text": "case and decide what you want to do in fact if You' got that error but if but if you are escaping out or time out then",
    "start": "1133559",
    "end": "1139240"
  },
  {
    "text": "we'll make three attempts the other category here are what we call pole sources so Dynamo DB",
    "start": "1139240",
    "end": "1146440"
  },
  {
    "text": "streams and Kinesis streams work a little differently they have to be pulled and Lambda will do that on your",
    "start": "1146440",
    "end": "1152919"
  },
  {
    "text": "behalf so you don't have to worry about the details of it you just tell Lambda which event sources you'd like it to go read for that type of event but the",
    "start": "1152919",
    "end": "1159640"
  },
  {
    "text": "model is slightly different here first of all those are ordered event sources",
    "start": "1159640",
    "end": "1164720"
  },
  {
    "text": "right and so it's important that Lambda process those events in the order that they they're generated by The Event",
    "start": "1164720",
    "end": "1169880"
  },
  {
    "text": "Source we do that so we can preserve the ordering semantics and as a result We",
    "start": "1169880",
    "end": "1174919"
  },
  {
    "text": "Can't Stop M attempting to call your code because doing things out of order or giving up might result in a in an",
    "start": "1174919",
    "end": "1181520"
  },
  {
    "text": "invalid sequence and invalid semantics so we'll do some back off but we're going what we will keep trying in those",
    "start": "1181520",
    "end": "1187159"
  },
  {
    "text": "cases until the data expires and then it's important for you to monitor you know error rates and sort of throughput",
    "start": "1187159",
    "end": "1192960"
  },
  {
    "text": "for those sources to make sure that your codee's doing what you expect all righty I'm going to come back",
    "start": "1192960",
    "end": "1199559"
  },
  {
    "text": "to this in a second here and switch over",
    "start": "1199559",
    "end": "1204840"
  },
  {
    "text": "to the other",
    "start": "1205880",
    "end": "1209280"
  },
  {
    "text": "machine all righty this is the Lambda",
    "start": "1214200",
    "end": "1220760"
  },
  {
    "text": "console so while you can use the the CLI or the SDK of course um demo is a little",
    "start": "1220760",
    "end": "1227080"
  },
  {
    "text": "easier to drive from here so let's take a look at what happens when we go to create a Lambda",
    "start": "1227080",
    "end": "1233600"
  },
  {
    "text": "function we'll see if the demo gods are with",
    "start": "1236280",
    "end": "1240600"
  },
  {
    "text": "me all righty",
    "start": "1247960",
    "end": "1252200"
  },
  {
    "text": "all right let's try creating a new function here called hello",
    "start": "1263120",
    "end": "1269200"
  },
  {
    "text": "reinvent so first step we give it the name uh we're going to come down and use",
    "start": "1270480",
    "end": "1276880"
  },
  {
    "text": "the inline editor here so let me expand this a little",
    "start": "1276880",
    "end": "1282960"
  },
  {
    "text": "bit and we'll do the kind of classic demo here console .",
    "start": "1283159",
    "end": "1290720"
  },
  {
    "text": "log hello world so the inline editor makes it easy",
    "start": "1290720",
    "end": "1298200"
  },
  {
    "text": "to get started of course you can upload from a zip file as well but this is an easy way to uh to write your code",
    "start": "1298200",
    "end": "1304600"
  },
  {
    "text": "directly within the browser now we need to give that code a roll to tell it what kind of of",
    "start": "1304600",
    "end": "1311120"
  },
  {
    "text": "authentication that it has which kinds of things we wanted to to be able to do so I'm going to hop over here to the",
    "start": "1311120",
    "end": "1317600"
  },
  {
    "text": "IM management cons this will just take a a second I'm still running on a uh beta version of this so",
    "start": "1317600",
    "end": "1323880"
  },
  {
    "text": "the interaction is a little slow today and I'm going to go ahead",
    "start": "1323880",
    "end": "1329200"
  },
  {
    "text": "and give this an execution role that and uh policy that I've already created",
    "start": "1329200",
    "end": "1336559"
  },
  {
    "text": "earlier and what I just did there was effectively credential my code with the ability to use the things that I wanted",
    "start": "1337480",
    "end": "1344080"
  },
  {
    "text": "to use in this case we're doing um uh writing some logs and so it need needs among other things the ability to write",
    "start": "1344080",
    "end": "1350120"
  },
  {
    "text": "to the log streams in cloudwatch I've set the memory and the timeout here earlier I'm going to go",
    "start": "1350120",
    "end": "1355279"
  },
  {
    "text": "ahead and create this function now without changing those",
    "start": "1355279",
    "end": "1359600"
  },
  {
    "text": "values and now you can see here I've been taken to the dashboard so my hello reinvent function",
    "start": "1360799",
    "end": "1368000"
  },
  {
    "text": "is here not much interesting has happened so far I haven't had any requests um so from here I can do a few",
    "start": "1368000",
    "end": "1374320"
  },
  {
    "text": "different things um for example if I wanted to go wire this up to an S3 bucket I could go do that right here",
    "start": "1374320",
    "end": "1381440"
  },
  {
    "text": "pick a bucket in S3 and say every time an object is there please respond to it",
    "start": "1381440",
    "end": "1386760"
  },
  {
    "text": "now we already have one of those set up so I'm going to go back here and do something else",
    "start": "1386760",
    "end": "1392279"
  },
  {
    "text": "instead I want to go test this so I'm going to pick a template",
    "start": "1392279",
    "end": "1398840"
  },
  {
    "text": "here for testing and what this what you're looking at here is just uh essentially",
    "start": "1398840",
    "end": "1404559"
  },
  {
    "text": "um a little test driven version of the event Halo that we're going to send right it's just got some dummy values in",
    "start": "1404559",
    "end": "1411799"
  },
  {
    "text": "it so now we'll go down to my code here we have the the code that we just created for our Cloud function I'm not",
    "start": "1411799",
    "end": "1417400"
  },
  {
    "text": "going to edit it any further um what I want to do is I want to go run it now",
    "start": "1417400",
    "end": "1422679"
  },
  {
    "text": "and here we can see we just executed that pulled back hello world not very",
    "start": "1422679",
    "end": "1427799"
  },
  {
    "text": "interesting from a semantics perspective what's interesting is that we just did what would have taken a lot of work had",
    "start": "1427799",
    "end": "1434480"
  },
  {
    "text": "you had to do it yourself provisioning an ec2 instance deploying that instance",
    "start": "1434480",
    "end": "1439799"
  },
  {
    "text": "getting it getting your application stack on it running your code on it setting up monitoring and logging that",
    "start": "1439799",
    "end": "1445840"
  },
  {
    "text": "little hello world that just happened in the space of a of a couple of seconds there did all of that work behind the",
    "start": "1445840",
    "end": "1452880"
  },
  {
    "text": "scenes and now I'm going to hop over here quickly to the cloudwatch",
    "start": "1453559",
    "end": "1459720"
  },
  {
    "text": "console and we'll scroll down here and look for our sample there it is",
    "start": "1462840",
    "end": "1469120"
  },
  {
    "text": "oops sorry I got the wrong one here let's try hello reinvent here's our log stream and here we can see that same",
    "start": "1478159",
    "end": "1484520"
  },
  {
    "text": "data that we showed in the uh in the results pane in the other in the Lambda console right what we brought back was",
    "start": "1484520",
    "end": "1491720"
  },
  {
    "text": "just the the log capture from running that but of course all the logs are also going to actual cloudwatch logs so",
    "start": "1491720",
    "end": "1497960"
  },
  {
    "text": "without any work on your part you get a full logging solution and a full monitoring solution all of the the",
    "start": "1497960",
    "end": "1503919"
  },
  {
    "text": "Lambda dashboard which we can go back and take a look at here now is also being mirrored in cloudwatch",
    "start": "1503919",
    "end": "1511960"
  },
  {
    "text": "metrics so here we can see we had um uh we had a little Spike here because we actually did a little bit of work and we",
    "start": "1511960",
    "end": "1518320"
  },
  {
    "text": "could hop over to Cloud watch metrics and see those same metrics in detail from the execution of that hello",
    "start": "1518320",
    "end": "1524919"
  },
  {
    "text": "world function all right so now we've kind of done done a full life cycle here we've we've created a function we tested",
    "start": "1524919",
    "end": "1531360"
  },
  {
    "text": "it we invoked it we checked out the logs and the the automatic monitoring that we did let's go look at something that's a",
    "start": "1531360",
    "end": "1537559"
  },
  {
    "text": "little more interesting so I have one here which actually is wired up to S3 you can see I've used it a little bit in",
    "start": "1537559",
    "end": "1543520"
  },
  {
    "text": "the past and we're going to hop into that same edit and test feature so that we can try some try to have some fun",
    "start": "1543520",
    "end": "1549440"
  },
  {
    "text": "with it so this code I'll scroll down here so you can get a little bit of a sense of it is an image thumbnail alert",
    "start": "1549440",
    "end": "1557159"
  },
  {
    "text": "and so in uh let's see how many lines we've got 56 lines of code I've got an",
    "start": "1557159",
    "end": "1563520"
  },
  {
    "text": "image thumbnailer which is reliable scalable secure and connect it up to an",
    "start": "1563520",
    "end": "1570440"
  },
  {
    "text": "S3 bucket so let's go ahead and try",
    "start": "1570440",
    "end": "1575600"
  },
  {
    "text": "executing that I'm going to use the same template this time an S3 template instead of a um instead of a Hello World",
    "start": "1575600",
    "end": "1583720"
  },
  {
    "text": "template and I'm going to go take the mock values that we put in there and I'm going to trade them out",
    "start": "1583720",
    "end": "1590240"
  },
  {
    "text": "for some for an actual bucket name and an actual key name so we'll take a quick look here",
    "start": "1590440",
    "end": "1597399"
  },
  {
    "text": "here's the here's the S3 bucket I've got a couple of files in there big fan of squirrels I got a pet squirrel at home",
    "start": "1597399",
    "end": "1603600"
  },
  {
    "text": "so I've got squirrel pictures in my bucket so I to see what",
    "start": "1603600",
    "end": "1610399"
  },
  {
    "text": "happens fingers crossed I'm going to press that invoke button again just like I did for hello",
    "start": "1610399",
    "end": "1616440"
  },
  {
    "text": "world run the code so so behind the scenes compute infrastructure was found",
    "start": "1616440",
    "end": "1621520"
  },
  {
    "text": "my code was deployed the code was run um the log file looks interesting here let's hop back to S3 and see what",
    "start": "1621520",
    "end": "1629320"
  },
  {
    "text": "happened go refresh and sure enough we got a thumbnail here of a squirrel let's",
    "start": "1629320",
    "end": "1635399"
  },
  {
    "text": "see if we can uh check that",
    "start": "1635399",
    "end": "1640720"
  },
  {
    "text": "out sometimes my image viewer doesn't like to start here",
    "start": "1641840",
    "end": "1647520"
  },
  {
    "text": "going to get a squirrel there we go little",
    "start": "1648520",
    "end": "1652880"
  },
  {
    "text": "squirrel sadly I forgot to upload a picture of my own squirrel so that's just some random squirrel all right so",
    "start": "1655320",
    "end": "1662279"
  },
  {
    "text": "we saw the we saw the code running here in the form of a test and voke and we saw it sort of do something interesting",
    "start": "1662279",
    "end": "1668240"
  },
  {
    "text": "with this with this S3 bucket so you saw Lambda doing something in S3 you didn't see it getting triggered from S3 so",
    "start": "1668240",
    "end": "1674480"
  },
  {
    "text": "let's go try that now so I'm going to upload another file",
    "start": "1674480",
    "end": "1680120"
  },
  {
    "text": "here's a squirrel picture we haven't used",
    "start": "1683159",
    "end": "1686799"
  },
  {
    "text": "before let me see if I can get this High dialogue actually high enough up that I",
    "start": "1690960",
    "end": "1698320"
  },
  {
    "text": "can",
    "start": "1699120",
    "end": "1702120"
  },
  {
    "text": "oops apologies here let's try that again",
    "start": "1705200",
    "end": "1710120"
  },
  {
    "text": "again all righty I made this small enough we can actually see the buttons okay we got a scroll picture",
    "start": "1713799",
    "end": "1720720"
  },
  {
    "text": "we're going to start the upload okay so a new squirrel picture appeared red squirrel.",
    "start": "1720720",
    "end": "1728159"
  },
  {
    "text": "jpeg let's go refresh the uh the screen and now we see thumbnail of red squirel",
    "start": "1728279",
    "end": "1734679"
  },
  {
    "text": "that they",
    "start": "1734679",
    "end": "1737840"
  },
  {
    "text": "S3 talking to Lambda behind the scenes No work that you had to do to make that",
    "start": "1740919",
    "end": "1748559"
  },
  {
    "start": "1753000",
    "end": "1753000"
  },
  {
    "text": "happen all righty so a couple of best practices",
    "start": "1753080",
    "end": "1758559"
  },
  {
    "text": "here one of the things that you saw me do there was create a role for my Lambda",
    "start": "1758799",
    "end": "1764559"
  },
  {
    "text": "function and there are actually two different roles that are interesting here there's what we call execution",
    "start": "1764559",
    "end": "1771279"
  },
  {
    "text": "roles and those control what it is that the Lambda functions can do so for example if you're going to read from an",
    "start": "1771279",
    "end": "1777399"
  },
  {
    "text": "S3 bucket and send notifications to SNS then your execution role has to provide",
    "start": "1777399",
    "end": "1783159"
  },
  {
    "text": "you with the capabilities to read from S3 and to write into into SNS right the role has the role has to match the set",
    "start": "1783159",
    "end": "1790279"
  },
  {
    "text": "of activities that you want to do this gives you fine grain control so you can determine what that exactly what that",
    "start": "1790279",
    "end": "1795840"
  },
  {
    "text": "function is allowed to do and if you're doing this inside an Enterprise you've got complete control over those policies",
    "start": "1795840",
    "end": "1801760"
  },
  {
    "text": "in the same way that you do for any other invocation of any other API within",
    "start": "1801760",
    "end": "1807360"
  },
  {
    "text": "AWS so keeps things fully authenticated and fully secured and fully under control of Enterprise",
    "start": "1807360",
    "end": "1814919"
  },
  {
    "text": "administrators now there's a second role which we didn't talk about much and that's called the invocation role so",
    "start": "1814919",
    "end": "1822039"
  },
  {
    "text": "while execution roles determine what your function can do invocation roles determine who can call it so we think",
    "start": "1822039",
    "end": "1829039"
  },
  {
    "text": "about that S3 case that we just did I had a a whole list of buckets there and I had a whole list of cloud functions so",
    "start": "1829039",
    "end": "1836600"
  },
  {
    "text": "we want to be able to decide which of those buckets get to send events to which of those Cloud functions so I've",
    "start": "1836600",
    "end": "1842279"
  },
  {
    "text": "got bucket a sending the function a bucket B sending to function B I might want to make sure that I don't get any",
    "start": "1842279",
    "end": "1848240"
  },
  {
    "text": "cross talk there right between those things maybe they're owned by different parts of my organization so that's where",
    "start": "1848240",
    "end": "1853279"
  },
  {
    "text": "invocation roles come in while you can set your invocation roles in a very simple way if you need more complicated",
    "start": "1853279",
    "end": "1859039"
  },
  {
    "text": "setup they give you the fine grain control over who can call what and they work not just for the S3 case but also",
    "start": "1859039",
    "end": "1865799"
  },
  {
    "text": "for the Dynamo case and all other AWS Services all right the second thing I",
    "start": "1865799",
    "end": "1871320"
  },
  {
    "text": "want to talk a little bit from uh best practices perspective is recursion so if you were kind of watching carefully",
    "start": "1871320",
    "end": "1877559"
  },
  {
    "text": "there you notice something interesting right I put objects into an S3 bucket",
    "start": "1877559",
    "end": "1882960"
  },
  {
    "text": "and they called a Lambda function which turned around and put objects back into an S3 bucket",
    "start": "1882960",
    "end": "1888760"
  },
  {
    "text": "so it turns out that in that code there in my code I actually put a check to say hey if the thing the name starts with",
    "start": "1888760",
    "end": "1895600"
  },
  {
    "text": "thumbnail then we're done don't do anymore don't create thumbnail of thumbnail and thumbnail of thumbnail of",
    "start": "1895600",
    "end": "1902240"
  },
  {
    "text": "thumbnail so you've got great power here right this is obviously an interesting",
    "start": "1902240",
    "end": "1907480"
  },
  {
    "text": "uh use case to be able to repurpose the same bucket even though you could have done it with a different bucket and some ways it would have made my demo a little",
    "start": "1907480",
    "end": "1913360"
  },
  {
    "text": "safer this morning but we wanted to illustrate the fact that there's a lot flexibility here",
    "start": "1913360",
    "end": "1919200"
  },
  {
    "text": "to put objects wherever you want to write the code that you want of course just as is the case with your own code",
    "start": "1919200",
    "end": "1924720"
  },
  {
    "text": "in any programming language right there's the possibility of creating infinite recursion or or infinite",
    "start": "1924720",
    "end": "1930919"
  },
  {
    "text": "Loops another thing that we didn't show here today in the demo was the ability for Lambda functions to call other",
    "start": "1930919",
    "end": "1936519"
  },
  {
    "text": "Lambda functions that allows you to do interesting things like get get one event from a source like an S3 bucket or",
    "start": "1936519",
    "end": "1943039"
  },
  {
    "text": "Dynamo and then actually Fork off several different kinds of work so that you can organize functions in different",
    "start": "1943039",
    "end": "1948799"
  },
  {
    "text": "ways or decide conditionally which ones you want to call again powerful feature",
    "start": "1948799",
    "end": "1953840"
  },
  {
    "text": "really useful mimics what you would do in a conventional programming language of course just convert it to the cloud",
    "start": "1953840",
    "end": "1958960"
  },
  {
    "text": "execution Paradigm here but again you want to be careful because of course if those functions call themselves then you",
    "start": "1958960",
    "end": "1965360"
  },
  {
    "text": "will be sitting there in a loop generating requests over and over again and you know you can use monitoring you",
    "start": "1965360",
    "end": "1970799"
  },
  {
    "text": "can use logs all the typical ways to to Divine that but we felt that it was important to give people this power",
    "start": "1970799",
    "end": "1976679"
  },
  {
    "text": "rather than artificially limit in what it is they can",
    "start": "1976679",
    "end": "1980799"
  },
  {
    "text": "do all right so we talked a lot about what Lambda is a lot about the things",
    "start": "1981760",
    "end": "1987440"
  },
  {
    "text": "that we think people are going to want to do with it how do you actually get started with doing something so what",
    "start": "1987440",
    "end": "1993840"
  },
  {
    "start": "1991000",
    "end": "1991000"
  },
  {
    "text": "we're announcing today is the Amazon the AWS Lambda preview Lambda launching and preview",
    "start": "1993840",
    "end": "2001080"
  },
  {
    "text": "includes support for Amazon S3 event notifications which are also being announced today there'll be a talk later",
    "start": "2001080",
    "end": "2007120"
  },
  {
    "text": "this afternoon if you want to hear more about that feature it's capable of sending events to Lambda as well as SNS",
    "start": "2007120",
    "end": "2012399"
  },
  {
    "text": "and sqs it includes support for Dynamo DB streams those are also in limited",
    "start": "2012399",
    "end": "2019320"
  },
  {
    "text": "preview and so if you're interested in trying the combination of both uh you'll need to join the limited preview for",
    "start": "2019320",
    "end": "2024799"
  },
  {
    "text": "Dynamo streams as well as the Lambda preview and we also include support for Amazon kesa Stream So if you want to be",
    "start": "2024799",
    "end": "2030919"
  },
  {
    "text": "able to to uh trigger transform or operate on stream data you've got that",
    "start": "2030919",
    "end": "2036480"
  },
  {
    "text": "built in as well the console I showed today along with the SDK and the CLI is included in the",
    "start": "2036480",
    "end": "2041960"
  },
  {
    "text": "preview so you've got full functionality what we limit during the preview is basically capacity so to ensure that",
    "start": "2041960",
    "end": "2048638"
  },
  {
    "text": "we've got capacity for all the people who want to try it out we're initially launching with a limit of 25 concurrent",
    "start": "2048639",
    "end": "2054000"
  },
  {
    "text": "requests per account and a limit of 60 seconds of runtime for each request and expected in the future we we will lift",
    "start": "2054000",
    "end": "2061118"
  },
  {
    "text": "both of these uh limits higher to get started go to AWS .",
    "start": "2061119",
    "end": "2068000"
  },
  {
    "text": "amazon.com Lambda you can sign up for the preview and we'll be letting people in as as quickly as we can after",
    "start": "2068000",
    "end": "2076078"
  },
  {
    "text": "that right and with that I think we have um uh time for a few questions here if",
    "start": "2076679",
    "end": "2082760"
  },
  {
    "text": "anybody wants to ask some in the room sure can you dis",
    "start": "2082760",
    "end": "2088480"
  },
  {
    "text": "little good good questions um so so a couple of interesting topics I in there",
    "start": "2093159",
    "end": "2098359"
  },
  {
    "text": "um unsurprisingly sorry so uh question included u a little bit about how we",
    "start": "2098359",
    "end": "2105000"
  },
  {
    "text": "built Lambda um are we using Docker containers um and maybe more more broadly kind of what's the relationship",
    "start": "2105000",
    "end": "2110880"
  },
  {
    "text": "of this to some of the other technologies that you're hearing here today so of course we're using the same",
    "start": "2110880",
    "end": "2116079"
  },
  {
    "text": "reliable infrastructure that ec2 uses to provide our capacity and also to provide",
    "start": "2116079",
    "end": "2121320"
  },
  {
    "text": "some of the security apparatus that helps us ensure that we've got strong isolation between customer accounts so",
    "start": "2121320",
    "end": "2128000"
  },
  {
    "text": "the same kinds of security and and um operational fortitude that people have",
    "start": "2128000",
    "end": "2133599"
  },
  {
    "text": "known and trusted on ec2 is also buildt right into the Lambda infrastructure now we do use uh Linux",
    "start": "2133599",
    "end": "2140760"
  },
  {
    "text": "containers as part of our implementation we don't rely exclusively on Linux containers for any of our security or",
    "start": "2140760",
    "end": "2147440"
  },
  {
    "text": "isolation because we felt that it was important to actually couple that to to a range of Technologies if you heard this morning",
    "start": "2147440",
    "end": "2154440"
  },
  {
    "text": "about um the uh the container service that's coming out one of the things you should expect us to do is create joint",
    "start": "2154440",
    "end": "2161280"
  },
  {
    "text": "possibilities for using both of those things over time thanks sure is there",
    "start": "2161280",
    "end": "2169440"
  },
  {
    "text": "a yeah so um let's suppose that you've you've got a runaway execution what are your what what are your what what are",
    "start": "2172599",
    "end": "2179079"
  },
  {
    "text": "your choices here in terms of in terms of fixing that well you one of the things you saw me do here was edit the",
    "start": "2179079",
    "end": "2184720"
  },
  {
    "text": "code live and so it's easy enough to in there and simply terminate the um the",
    "start": "2184720",
    "end": "2190200"
  },
  {
    "text": "code or effectively put it into a disabled State simply by editing the implementation if you want to do",
    "start": "2190200",
    "end": "2195400"
  },
  {
    "text": "something more hardcore um while I didn't illustrate it here today you can also delete a cloud function and then go",
    "start": "2195400",
    "end": "2201359"
  },
  {
    "text": "recreate it later on so that's kind of your your your instant kill switch if you like",
    "start": "2201359",
    "end": "2209039"
  },
  {
    "text": "sure",
    "start": "2210119",
    "end": "2213119"
  },
  {
    "text": "sorry um yes so the question was what functionality can you access from the uh",
    "start": "2215520",
    "end": "2220800"
  },
  {
    "text": "from the underlying operating system um so we use a we build we built this on top of Amazon Linux and from within",
    "start": "2220800",
    "end": "2228160"
  },
  {
    "text": "node.js you uh you're basically welcome to use most of the operating system",
    "start": "2228160",
    "end": "2233680"
  },
  {
    "text": "functionality so um we give you a a restricted file system view obviously in",
    "start": "2233680",
    "end": "2239319"
  },
  {
    "text": "which you're running um but you've got you've got a broad set of capabilities even within that so as I mentioned for",
    "start": "2239319",
    "end": "2245440"
  },
  {
    "text": "instance you can go fire up a bash script if you want so there's a lot of there's a lot of flexibility there",
    "start": "2245440",
    "end": "2250680"
  },
  {
    "text": "almost all of the operating system Primitives are available to you we restrict a few things like inbound",
    "start": "2250680",
    "end": "2255760"
  },
  {
    "text": "network connections UDP type sockets um and a couple of system",
    "start": "2255760",
    "end": "2262160"
  },
  {
    "text": "calls software installation no no software installation other than",
    "start": "2262560",
    "end": "2267880"
  },
  {
    "text": "implicitly what you bring in in your zip file with you sure and sorry I I know I",
    "start": "2267880",
    "end": "2274480"
  },
  {
    "text": "almost had you there so gu question was latency from the time",
    "start": "2274480",
    "end": "2282960"
  },
  {
    "text": "produced is there any data on the latency from the event being produced to when it starts processing yeah so um so",
    "start": "2282960",
    "end": "2290359"
  },
  {
    "text": "latency great question let's talk about that um our goal in Lambda is to start",
    "start": "2290359",
    "end": "2297400"
  },
  {
    "text": "executing your code within milliseconds of the arrival time so typical latencies",
    "start": "2297400",
    "end": "2302680"
  },
  {
    "text": "I mean hopefully you got a sense of seeing this up here right is is a subsecond now it depends a little bit on",
    "start": "2302680",
    "end": "2309640"
  },
  {
    "text": "what the Event Source is as well because the real answer to your question is not just how fast is Lambda but also how",
    "start": "2309640",
    "end": "2315640"
  },
  {
    "text": "does it work when you've connected it up to a different data source and the the periodicity and the latency of something",
    "start": "2315640",
    "end": "2321200"
  },
  {
    "text": "like Dynamo streams is a little bit different than what Amazon S3 buckets are which is again maybe a little",
    "start": "2321200",
    "end": "2327280"
  },
  {
    "text": "different from the way Kinesis streams work so the real answer that to be you know to be sort of uh complete about it",
    "start": "2327280",
    "end": "2334560"
  },
  {
    "text": "is that you've got to add the latency of whatever the Event Source ources to the latency of Lambda itself but we go",
    "start": "2334560",
    "end": "2340280"
  },
  {
    "text": "ourselves to have um on the order of 100 milliseconds or less Transit time between the event arriving or the event",
    "start": "2340280",
    "end": "2346440"
  },
  {
    "text": "being pulled and the time when we actually start your code that'll be a little higher on the first use obviously",
    "start": "2346440",
    "end": "2352319"
  },
  {
    "text": "if we need to go fetch your code because we've never seen it before or because you haven't been around for a few months um then there's a a higher latency there",
    "start": "2352319",
    "end": "2359119"
  },
  {
    "text": "as we go grab your code and get it running again sure so oh sorry so do you have",
    "start": "2359119",
    "end": "2366200"
  },
  {
    "text": "any plans to go beyond um editing your functions in the web view or zip files as far as like Version",
    "start": "2366200",
    "end": "2372280"
  },
  {
    "text": "Control get integration or anything like that yeah um you you know the uh the",
    "start": "2372280",
    "end": "2378160"
  },
  {
    "text": "desire here is always to try to find a balance between you know a minimum viable product getting things out early",
    "start": "2378160",
    "end": "2383920"
  },
  {
    "text": "into people's hands and building a a sufficiently complete a complete",
    "start": "2383920",
    "end": "2388960"
  },
  {
    "text": "solution that's got all the things that you really wanted to have so we had some painful Cuts here of course um I would",
    "start": "2388960",
    "end": "2394599"
  },
  {
    "text": "have loved more deployment options at launch that's high on our list as is adding more languages here um and you",
    "start": "2394599",
    "end": "2400560"
  },
  {
    "text": "should expect that we'll you know obviously we want to hear feedback about that to help us develop those priorities but that's certainly on our you know on",
    "start": "2400560",
    "end": "2406920"
  },
  {
    "text": "our list to execute on can you can you describe what it",
    "start": "2406920",
    "end": "2412119"
  },
  {
    "text": "looks like for the native Library stuff like do we include a script or you know a build script or or what ah yeah sure",
    "start": "2412119",
    "end": "2419960"
  },
  {
    "text": "um so you bring your native library in the form of a basically put it in no in in node clothing right so um if if you",
    "start": "2419960",
    "end": "2427440"
  },
  {
    "text": "can expose it to to no. JS then you can call it from there and and execute",
    "start": "2427440",
    "end": "2432599"
  },
  {
    "text": "it yeah yep um so one of the things we'll be working on we don't have it",
    "start": "2432599",
    "end": "2437680"
  },
  {
    "text": "ready today is but we'll be doing a a a Blog on how do I build myself a custom library and and call it from inside a",
    "start": "2437680",
    "end": "2444599"
  },
  {
    "text": "Lambda function when do you expect it will go into uh General availability when can we",
    "start": "2444599",
    "end": "2451680"
  },
  {
    "text": "start building production on top of that um uh early in",
    "start": "2451680",
    "end": "2458000"
  },
  {
    "text": "so uh um in case everybody in hear like when will we when will we move into into General availability our our plan for",
    "start": "2458000",
    "end": "2464640"
  },
  {
    "text": "that is early",
    "start": "2464640",
    "end": "2467078"
  },
  {
    "text": "2015 so you mentioned at least once semantic so is it the same as sqs where",
    "start": "2470400",
    "end": "2476359"
  },
  {
    "text": "you potentially could have the same event trigger the function twice yeah so um a great way to think",
    "start": "2476359",
    "end": "2482720"
  },
  {
    "text": "about the way that the S3 interaction or custom events work is to imag an sqsq",
    "start": "2482720",
    "end": "2488319"
  },
  {
    "text": "sitting at the front end of Lambda so those events come into a que the Q provides durability but it also has an",
    "start": "2488319",
    "end": "2494000"
  },
  {
    "text": "impact on the semantics of uh of how those events get processed so um in this",
    "start": "2494000",
    "end": "2499520"
  },
  {
    "text": "case that means that those events occasionally may come out of order or may occasionally be presented",
    "start": "2499520",
    "end": "2506240"
  },
  {
    "text": "twice sorry folks I'm just I'm following the microphone here just so we can hear the",
    "start": "2508000",
    "end": "2514720"
  },
  {
    "text": "questions what's the road map math around adding uh integration with other AWS services like",
    "start": "2515440",
    "end": "2522680"
  },
  {
    "text": "RDS yeah so um uh you should expect us to be working aggressively to add",
    "start": "2522680",
    "end": "2527720"
  },
  {
    "text": "support for additional Services here um we've heard uh requests for ec2 come up",
    "start": "2527720",
    "end": "2533160"
  },
  {
    "text": "a lot RDS is obviously another one um so I don't have a road map to share with you here today I'd love some feedback if",
    "start": "2533160",
    "end": "2539680"
  },
  {
    "text": "uh if people have it on that uh what about the eventual consistency of S3 or inov us is us is",
    "start": "2539680",
    "end": "2548680"
  },
  {
    "text": "one region ah so um eventual consistency yeah so one of the reasons",
    "start": "2548680",
    "end": "2554359"
  },
  {
    "text": "that we put the multiple retry logic in was precisely to give your code some time in case you're hitting an eventual",
    "start": "2554359",
    "end": "2560680"
  },
  {
    "text": "consistency issue um that's that's one of the reasons to actually spread that out a little bit and allow time for",
    "start": "2560680",
    "end": "2566200"
  },
  {
    "text": "stability in the case of of right stabilization is there any support for",
    "start": "2566200",
    "end": "2572240"
  },
  {
    "text": "timed events something that'll trigger at the same time every day yeah that's a it's a a requested I've I've heard a lot",
    "start": "2572240",
    "end": "2578599"
  },
  {
    "text": "already so um you know I guess the the unsatisfying answer is of course you're welcome to run a timer somewhere or you",
    "start": "2578599",
    "end": "2584480"
  },
  {
    "text": "can you know use S swf if you'd like to generate uh sort of uh events out of there um what we'd like to do is in the",
    "start": "2584480",
    "end": "2591240"
  },
  {
    "text": "same way that we made the infrastructure simple we'd like to make the timing and initialization simple and so you should",
    "start": "2591240",
    "end": "2597680"
  },
  {
    "text": "expect it in the future as we move forward that's one of the things that's that's on our",
    "start": "2597680",
    "end": "2602799"
  },
  {
    "text": "list uh we will you be able to will you be able to uh hook up other",
    "start": "2605319",
    "end": "2611480"
  },
  {
    "text": "uh non AWS stuff for your pool interface sorry could you repeat the question um",
    "start": "2611480",
    "end": "2616640"
  },
  {
    "text": "can you hook up other U Ser like your own services to the pool interface uh to the to the pole",
    "start": "2616640",
    "end": "2622720"
  },
  {
    "text": "interface not to the poll interface today um we've we have actually done a a",
    "start": "2622720",
    "end": "2628119"
  },
  {
    "text": "hard-coded polling system to the to the essentially to the internal services that we know operate that way um one of",
    "start": "2628119",
    "end": "2635000"
  },
  {
    "text": "the ways that you can accomplish that though is if you can use Kinesis as an intermediary since it's a lowcost",
    "start": "2635000",
    "end": "2640960"
  },
  {
    "text": "sharded ordered event model it forms a great uh capacitance in transit between",
    "start": "2640960",
    "end": "2646520"
  },
  {
    "text": "uh other services so we'll take one last question and then will be around Get Low",
    "start": "2646520",
    "end": "2651559"
  },
  {
    "text": "time also there will be a repeat session at 11:00 a.m. tomorrow so please be there if you have any other questions so",
    "start": "2651559",
    "end": "2658800"
  },
  {
    "text": "um with the npm libraries that you can install could you potentially install like the a or AWS mpm library and",
    "start": "2658800",
    "end": "2665920"
  },
  {
    "text": "integrate through that and what kind of network access do these scripted instances have could you stream a file",
    "start": "2665920",
    "end": "2671640"
  },
  {
    "text": "from it is it you know like what sort of limits are there on on your network access while this node.js script is",
    "start": "2671640",
    "end": "2678680"
  },
  {
    "text": "running yeah so um uh for outbound connections we've we uh basically what you can do with TCP sockets you can do",
    "start": "2678680",
    "end": "2686480"
  },
  {
    "text": "from within a Lambda routine so we don't put restrictions on what you can do at that level um now during the preview the",
    "start": "2686480",
    "end": "2693720"
  },
  {
    "text": "duration of execution at 60 seconds would obviously limit some of the things things you couldn't do you know interesting movie transcoding with this",
    "start": "2693720",
    "end": "2700079"
  },
  {
    "text": "you know with the limits we've got in place today um and that might not be the the best or most obvious use case anyway",
    "start": "2700079",
    "end": "2706319"
  },
  {
    "text": "for Lambda but um yeah if you can do it with a with a TCP IP socket then you have access to",
    "start": "2706319",
    "end": "2713318"
  },
  {
    "text": "that yeah this so the questions can we use the the AWS SDK libraries yeah um",
    "start": "2721400",
    "end": "2726720"
  },
  {
    "text": "and and it may have been gone by too fast or been too small to see but um what I was doing with the um with the",
    "start": "2726720",
    "end": "2733319"
  },
  {
    "text": "image TR uh image here today was the aw SDK JavaScript library and I was using",
    "start": "2733319",
    "end": "2738680"
  },
  {
    "text": "that to make the S3 calls all right I think we're out of time here thanks so much everyone",
    "start": "2738680",
    "end": "2745680"
  }
]