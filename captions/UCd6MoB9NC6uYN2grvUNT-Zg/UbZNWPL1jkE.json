[
  {
    "text": "hey everybody thanks for coming to this session on how to accelerate your AWS Java development my name is Jason fulum and",
    "start": "2120",
    "end": "9639"
  },
  {
    "text": "I'm a Java developer on the AWS sdks and tools team my team is responsible for",
    "start": "9639",
    "end": "15400"
  },
  {
    "text": "building the various AWS sdks IDE integration and command line tools for AWS",
    "start": "15400",
    "end": "22279"
  },
  {
    "text": "developers in this session we're going to be talking about some of the ways to speed up your AWS jaob development and",
    "start": "23840",
    "end": "30480"
  },
  {
    "text": "we're going to be talking about some of the tools that my team builds uh and how they can help you do that specifically we're going to be",
    "start": "30480",
    "end": "37360"
  },
  {
    "text": "focusing on some of the higher level apis in the SDK and a few of the core features in the eclipse toolkit that can",
    "start": "37360",
    "end": "43800"
  },
  {
    "text": "really help you do a lot during your",
    "start": "43800",
    "end": "47200"
  },
  {
    "text": "development the first tool I want to introduce to you is the AWS SDK for Java at its core the SDK is a set of",
    "start": "50280",
    "end": "58760"
  },
  {
    "text": "java bindings for interacting with about 30 AWS infrastructure",
    "start": "58760",
    "end": "64080"
  },
  {
    "text": "Services the SDK makes it really easy to interact with all those services and provides a nice onetoone mapping of the",
    "start": "64080",
    "end": "70000"
  },
  {
    "text": "services API so anytime Services release new features and rev their API you can",
    "start": "70000",
    "end": "75799"
  },
  {
    "text": "go download the latest SDK and take use of those features immediately the SDK is open source you",
    "start": "75799",
    "end": "82880"
  },
  {
    "text": "can find us on GitHub we love hearing from customers uh whether it's GitHub issues or GitHub poll request we're also",
    "start": "82880",
    "end": "89119"
  },
  {
    "text": "licensed under a a 2.0 so it's a very permissive license you can take the source code and use it for just about",
    "start": "89119",
    "end": "94280"
  },
  {
    "text": "anything you want to use it for and we're also distributed through the maven Central repository so it's really easy",
    "start": "94280",
    "end": "100680"
  },
  {
    "text": "to get the SDK if you want to get it from Maven or you want to download it from our site or if you want to get it from the eclipse tools like we're going",
    "start": "100680",
    "end": "106520"
  },
  {
    "text": "to see in a few minutes for the purpose of our talk",
    "start": "106520",
    "end": "113000"
  },
  {
    "text": "today the SDK is really divided into two layers at the bottom of the SDK we have",
    "start": "113000",
    "end": "118479"
  },
  {
    "text": "the client access layer that's where you're going to find these clients that work with the 30 or so AWS",
    "start": "118479",
    "end": "124840"
  },
  {
    "text": "infrastructure Services each one of those clients provides a nice onetoone mapping so it's very easy to go from the",
    "start": "124840",
    "end": "131440"
  },
  {
    "text": "service documentation to the SDK and see exactly how to take advantage of all the features in a",
    "start": "131440",
    "end": "137480"
  },
  {
    "text": "service the lower level of the SDK is where we also Implement a lot of clients side best practices that we've learned",
    "start": "137480",
    "end": "143560"
  },
  {
    "text": "over the years things that your application doesn't have to worry about like secure request authentication",
    "start": "143560",
    "end": "148920"
  },
  {
    "text": "passing item potency tokens and a lot of different places where we deal with data Integrity checking to make sure that as",
    "start": "148920",
    "end": "154400"
  },
  {
    "text": "we pass through data around it's not getting uh transformed incorrectly but we're not really going to be talking",
    "start": "154400",
    "end": "160400"
  },
  {
    "text": "about this lower level in the SDK very much today we're going to be focusing instead on the higher level apis and",
    "start": "160400",
    "end": "166840"
  },
  {
    "text": "Utilities in the SDK whereas the low-level clients have uh the goal to expose all 100% of a",
    "start": "166840",
    "end": "174440"
  },
  {
    "text": "Services functionality the goal of the higher level apis is to Target a very specific task that developers commonly",
    "start": "174440",
    "end": "181480"
  },
  {
    "text": "do such as getting data in and out of S3 or mapping objects to items and",
    "start": "181480",
    "end": "186879"
  },
  {
    "text": "attributes in Dynamo DB table and it aims to make each one of those uh specific use cases as easy and flexible",
    "start": "186879",
    "end": "193040"
  },
  {
    "text": "as possible so that's really the key to getting more out of the SDK is understanding these different highle",
    "start": "193040",
    "end": "198959"
  },
  {
    "text": "apis and what they can do for you there are a lot of these apis that I'd love to show you in the SDK but of course we",
    "start": "198959",
    "end": "205720"
  },
  {
    "text": "only have time to go over a few of them so we're going to go over what me and my team think are some of the most important for any application developer",
    "start": "205720",
    "end": "211959"
  },
  {
    "text": "to know about and at the end of this session I'm going to give you guys some links on where you can go and find out",
    "start": "211959",
    "end": "217000"
  },
  {
    "text": "lots more information on lots more of these highle apis and",
    "start": "217000",
    "end": "222120"
  },
  {
    "text": "utilities the next tool I want to introduce is the AWS toolkit for eclipse the eclipse toolkit is a set of",
    "start": "224599",
    "end": "231760"
  },
  {
    "text": "Open Source Eclipse plugins that extend Eclipse with support for developing debugging and deploying AWS applications",
    "start": "231760",
    "end": "240040"
  },
  {
    "text": "you can create different types of AWS projects directly from within Eclipse you can deploy and debug your projects",
    "start": "240040",
    "end": "246439"
  },
  {
    "text": "on AWS directly from within eclipse and you can also manage a lot of your AWS",
    "start": "246439",
    "end": "251560"
  },
  {
    "text": "resources you can uh send a message to your sqsq for example if you're Building A system that has uh maybe communication",
    "start": "251560",
    "end": "259160"
  },
  {
    "text": "between parts that is driven by an sqsq you can use these management tools to help out during your development and",
    "start": "259160",
    "end": "265240"
  },
  {
    "text": "send test messages to that part of your system you can change your objects in S3 you can change permissions you can work",
    "start": "265240",
    "end": "271440"
  },
  {
    "text": "with your data in Dynamo DB and a lot more using those management",
    "start": "271440",
    "end": "276479"
  },
  {
    "text": "features just like with the SDK there's a lot more to the eclipse toolkit that we're not going to be able to go over today and at the end of this session",
    "start": "277600",
    "end": "284440"
  },
  {
    "text": "I'll have some more links for additional features on the eclipse toolkit as well just in the past year we've added a lot",
    "start": "284440",
    "end": "290160"
  },
  {
    "text": "of really exciting features to the eclipse toolkit some of the big ones are support for developing AWS Android",
    "start": "290160",
    "end": "296320"
  },
  {
    "text": "applications really easily with the eclipse toolkit and also a lot of support around AWS cloud formation you",
    "start": "296320",
    "end": "303240"
  },
  {
    "text": "can deploy to your Stacks you can uh work with a custom editor for cloud formation templates and a lot more cool",
    "start": "303240",
    "end": "309320"
  },
  {
    "text": "features that we've added over the past",
    "start": "309320",
    "end": "312720"
  },
  {
    "text": "year we're going to be working with this sample application and we're going to be taking a look from start to finish on a",
    "start": "315000",
    "end": "321720"
  },
  {
    "text": "slice of the application development life cycle some of you guys might have been here last year at AWS reinvent and",
    "start": "321720",
    "end": "327720"
  },
  {
    "text": "seen us debut the AWS meme generator application last year we used this application in our Eclipse presentation",
    "start": "327720",
    "end": "334720"
  },
  {
    "text": "to demonstrate how you can use the eclipse tools to work with your application and its application data",
    "start": "334720",
    "end": "340520"
  },
  {
    "text": "this year we've revamped the code a little bit and we'll have it updated on GitHub after this and we're going to",
    "start": "340520",
    "end": "345800"
  },
  {
    "text": "really get into the code this year and show how it uses the SDK to uh work with a few different",
    "start": "345800",
    "end": "352520"
  },
  {
    "text": "services so let's switch over and we're going to take a quick look at what the application does",
    "start": "353400",
    "end": "360120"
  },
  {
    "text": "this is a really really simple web application and it's a great demo app because uh it's very easy to see the",
    "start": "360120",
    "end": "365600"
  },
  {
    "text": "interaction with a few different AWS Services because the app itself is so simple and just a few JSP",
    "start": "365600",
    "end": "371919"
  },
  {
    "text": "Pages the uh basic idea is we choose a starting image and we'll select some",
    "start": "371919",
    "end": "377840"
  },
  {
    "text": "caption text",
    "start": "377840",
    "end": "381319"
  },
  {
    "text": "then as soon as we finish this form our system is going to start creating a new image and overlay these captions for",
    "start": "389800",
    "end": "395199"
  },
  {
    "text": "us and that's about all there is to this application it's really a very simple application but it's going to let us",
    "start": "395199",
    "end": "400840"
  },
  {
    "text": "highlight a couple of interesting interactions with a few different AWS",
    "start": "400840",
    "end": "405840"
  },
  {
    "text": "services so now let's talk about how this application works and then we'll start getting into the slice of the",
    "start": "409599",
    "end": "415479"
  },
  {
    "text": "application development life cycle for this app this app is divided into two",
    "start": "415479",
    "end": "420720"
  },
  {
    "text": "components there's a front- end piece that we just saw it's a very simple web UI nothing fancy just a few JSP pages",
    "start": "420720",
    "end": "428520"
  },
  {
    "text": "and then there's a backend worker piece that actually does the image processing for us the front-end web UI is really just",
    "start": "428520",
    "end": "435440"
  },
  {
    "text": "responsible for two things as soon as we complete the form that you just saw us fill in it's going to uh write all that",
    "start": "435440",
    "end": "443080"
  },
  {
    "text": "data out to a table in Amazon Dynamo DB as soon as it finishes writing that data to Dynamo DB it's going to push a",
    "start": "443080",
    "end": "449720"
  },
  {
    "text": "message onto our sqs Q pushing that message onto the sqs Q is going to wake",
    "start": "449720",
    "end": "455199"
  },
  {
    "text": "up our back-end worker process this backend worker process is sitting there pulling the sqsq it sees",
    "start": "455199",
    "end": "461720"
  },
  {
    "text": "this message come in then that message tells it where to look in Dynamo DB to pull out all that data that we just",
    "start": "461720",
    "end": "467400"
  },
  {
    "text": "entered so it downloads the captions and the starting image that we just selected",
    "start": "467400",
    "end": "472520"
  },
  {
    "text": "and then it creates that new image and stores it to S3 once it's stored in S3 our front-end UI just displays it right",
    "start": "472520",
    "end": "478879"
  },
  {
    "text": "back to us so for the rest of this presentation",
    "start": "478879",
    "end": "484120"
  },
  {
    "text": "we're going to talk about how we started this project how we use tools like the eclipse toolkit to get this project off",
    "start": "484120",
    "end": "489680"
  },
  {
    "text": "to a fast start how we use some of the higher level apis uh in the SDK to work with S3 and our data in Dynamo DB then",
    "start": "489680",
    "end": "497759"
  },
  {
    "text": "we're going to wrap up by showing how we use the tools in the eclipse toolkit to actually get this app running on",
    "start": "497759",
    "end": "504680"
  },
  {
    "text": "AWS so the very first thing we needed to do was start our produ and carve out a space where we could enter some of our",
    "start": "506240",
    "end": "512360"
  },
  {
    "text": "code and the eclipse toolkit has a couple of new project Wizards that make it really easy to get started with new",
    "start": "512360",
    "end": "519120"
  },
  {
    "text": "AWS Java projects there are a few of these new project Wizards you can create new",
    "start": "519120",
    "end": "525240"
  },
  {
    "text": "Android projects AWS Java projects and of course we're going to be creating a AWS Java web project for this",
    "start": "525240",
    "end": "532240"
  },
  {
    "text": "dumo we just need to enter our project",
    "start": "532240",
    "end": "537000"
  },
  {
    "text": "name this next next section allows us to select which AWS security credentials we want to use the eclipse toolkit lets you",
    "start": "538079",
    "end": "545279"
  },
  {
    "text": "configure multiple AWS accounts we're going to be using our Java demo account for this",
    "start": "545279",
    "end": "550440"
  },
  {
    "text": "one and this next section lets us choose which code we want to start from so one",
    "start": "550440",
    "end": "555680"
  },
  {
    "text": "of the great things about these new Wizards is that as soon as you finish them you've got a project that's got your credentials configured and ready to",
    "start": "555680",
    "end": "561680"
  },
  {
    "text": "run and uh ready to make request to AWS as soon as you finish creating the",
    "start": "561680",
    "end": "567399"
  },
  {
    "text": "project I just want to highlight this one option down at the bottom of this wizard that we just added this summer",
    "start": "567399",
    "end": "572800"
  },
  {
    "text": "this is for a new project called the Amazon Dynamo DB session manager for Tomcat it's a brand new open source",
    "start": "572800",
    "end": "578959"
  },
  {
    "text": "project you can find it on GitHub it's something that we're excited to keep building on and it's essentially a",
    "start": "578959",
    "end": "584320"
  },
  {
    "text": "custom session manager for Tomcat that saves all your web session State into Dynamo DB for you so check that out on",
    "start": "584320",
    "end": "591120"
  },
  {
    "text": "GitHub sometime this option helps you use the uh custom session manager when you're deploying to elastic bean stock",
    "start": "591120",
    "end": "599560"
  },
  {
    "text": "so jumping back over here to package Explorer we can see our new project we've got our AWS security credentials",
    "start": "602720",
    "end": "609120"
  },
  {
    "text": "already set up in here for us JRE library of course on our bill path j2e",
    "start": "609120",
    "end": "614399"
  },
  {
    "text": "runtime libraries then we have the latest SDK for Java on our build path",
    "start": "614399",
    "end": "619480"
  },
  {
    "text": "the eclipse toolkit will manage downloading the latest sdks for you putting them on your Project's class path and it will also include all the",
    "start": "619480",
    "end": "626040"
  },
  {
    "text": "source for the SDK so if you want to debug through the SDK source code or you just want to look around through the SDK",
    "start": "626040",
    "end": "632680"
  },
  {
    "text": "source code this is a really great way to explore the SDK and uh the different features and code available in",
    "start": "632680",
    "end": "639680"
  },
  {
    "text": "it and then like I promised we've got a little teeny uh snippet of JSP code to",
    "start": "639680",
    "end": "644800"
  },
  {
    "text": "start us off just to show us how to use some of these uh SDK features and how to make some sample requests to",
    "start": "644800",
    "end": "652519"
  },
  {
    "text": "AWS so we can use the standard web development Tools in Eclipse to just drag and drop our code down here to our",
    "start": "652720",
    "end": "659320"
  },
  {
    "text": "local Tomcat server and in just a second we should see Tomcat restarting we'll see Eclipse",
    "start": "659320",
    "end": "666200"
  },
  {
    "text": "open up a browser window for us uh compile our JSP code and we should see this application start up in just a",
    "start": "666200",
    "end": "672800"
  },
  {
    "text": "second this sample code that we start with just list out a few of our AWS resources and just kind of gives you a",
    "start": "672800",
    "end": "678560"
  },
  {
    "text": "nice easy starting point so that's all I wanted to show for the new project Wizards it's a really",
    "start": "678560",
    "end": "684360"
  },
  {
    "text": "easy way to get a new project off to a fast start",
    "start": "684360",
    "end": "689160"
  },
  {
    "text": "the next thing I want to talk about is how you can start using the SDK to take advantage of some of these services and",
    "start": "692040",
    "end": "698760"
  },
  {
    "text": "we are specifically going to be looking at S3 and Dynamo DB today and some of the features in the SDK that make it",
    "start": "698760",
    "end": "704160"
  },
  {
    "text": "really easy to work with them S3 is of course the Amazon simple storage service",
    "start": "704160",
    "end": "710120"
  },
  {
    "text": "and it's essentially unlimited storage in the cloud it's a truly massive service that has over two trillion",
    "start": "710120",
    "end": "716399"
  },
  {
    "text": "objects stored in it today and regularly processed processes over a million requests every second coming into the",
    "start": "716399",
    "end": "722279"
  },
  {
    "text": "front end of the web service so it's a really useful service to know and I'm sure a lot of you guys have already been",
    "start": "722279",
    "end": "727920"
  },
  {
    "text": "using S3 the first SDK tip that I want to show you is a really quick one a lot of times",
    "start": "727920",
    "end": "735000"
  },
  {
    "text": "you need to iterate over your objects or your versions in your S3 buckets and I'm sure you guys have written code that's",
    "start": "735000",
    "end": "740160"
  },
  {
    "text": "very similar to this with any service that returns passionated responses you're going to have this pattern where",
    "start": "740160",
    "end": "746240"
  },
  {
    "text": "you download the first page of responses process them check to see if there's more data download the next page it's",
    "start": "746240",
    "end": "753399"
  },
  {
    "text": "not the most complicated piece of code but uh it is a little more complicated and essentially what we're trying to do",
    "start": "753399",
    "end": "758839"
  },
  {
    "text": "is just iterate over our objects so take a look one more time at",
    "start": "758839",
    "end": "764360"
  },
  {
    "text": "this common pattern and then compare that to what happens when you use some of these Utilities in the",
    "start": "764360",
    "end": "770079"
  },
  {
    "text": "SDK so there's two utilities that I want to show you off first this is S3 objects and S3 versions in the background the",
    "start": "770079",
    "end": "777920"
  },
  {
    "text": "exact same code is happening we're still requesting pages of data at a time but you're using these utilities to use",
    "start": "777920",
    "end": "784399"
  },
  {
    "text": "these custom iterators that handle all that pagination for you so if you really don't care about the paginated responses",
    "start": "784399",
    "end": "791120"
  },
  {
    "text": "you just want to iterate over your objects you should always be using these S3 objects and S3 versions utilities",
    "start": "791120",
    "end": "796920"
  },
  {
    "text": "they're going to save you a few lines of code every time you use them and just keep your application a little bit simpler a little bit cleaner so that's",
    "start": "796920",
    "end": "803880"
  },
  {
    "text": "my first tip for you guys next thing I want to talk about is how we actually get our data into and out of Amazon",
    "start": "803880",
    "end": "812279"
  },
  {
    "text": "S3 so this is a little beefier of a highlevel API it's one of I think the",
    "start": "812279",
    "end": "817440"
  },
  {
    "text": "most useful highle apis in the SDK and this is the S3 transfer manager",
    "start": "817440",
    "end": "822920"
  },
  {
    "text": "highle API transfer manager gives you asynchronous management of your data",
    "start": "822920",
    "end": "828720"
  },
  {
    "text": "transfers into and out of Amazon S3 there are a couple really nice things",
    "start": "828720",
    "end": "834000"
  },
  {
    "text": "about transfer manager the first thing that I really like about transfer manager is the asynchronous program",
    "start": "834000",
    "end": "839079"
  },
  {
    "text": "pring model this is a really convenient programming model where you start off your transfers you get a transfer object",
    "start": "839079",
    "end": "845040"
  },
  {
    "text": "back and your transfer itself is running asynchronously in the background the next great thing about",
    "start": "845040",
    "end": "850959"
  },
  {
    "text": "transfer manager is that it has a really really simple API the API essentially",
    "start": "850959",
    "end": "856079"
  },
  {
    "text": "boils down to two different types of operations uploads and downloads we'll see a few variants of those in a minute",
    "start": "856079",
    "end": "862639"
  },
  {
    "text": "but each one of those methods is going to return to you a transfer object and you can use that transfer object to control the transfer as it actually uh",
    "start": "862639",
    "end": "869279"
  },
  {
    "text": "progresses in the background uh the third thing that I really like about transfer manager is",
    "start": "869279",
    "end": "875040"
  },
  {
    "text": "that even though you have this very simple API behind that API it has some uh some nice logic to optimize your",
    "start": "875040",
    "end": "882320"
  },
  {
    "text": "transfers so for example if you're uploading a large file from disk transfer manager is actually going to",
    "start": "882320",
    "end": "888079"
  },
  {
    "text": "break that file up into multiple parallel upload streams without your application ever needing to know about",
    "start": "888079",
    "end": "893600"
  },
  {
    "text": "it or to make those choices based on the type of upload you're doing breaking that into multip mple upload Parts gives",
    "start": "893600",
    "end": "899959"
  },
  {
    "text": "you a couple of nice benefits the first one is that you're going to get better Network",
    "start": "899959",
    "end": "905839"
  },
  {
    "text": "utilization and the second nice side effect of that is that if you hit any transient network errors along the way",
    "start": "905839",
    "end": "911360"
  },
  {
    "text": "of your transfer you're not going to have to restart like you would if you were streaming all your data in a single",
    "start": "911360",
    "end": "917000"
  },
  {
    "text": "stream if you hit some sort of network IO error with the uh multi-part upload that transfer manager implements only",
    "start": "917000",
    "end": "924120"
  },
  {
    "text": "that part is going to be affected by that error so you're not going to lose all the progress that you've made made in the other parts you're just going to",
    "start": "924120",
    "end": "930600"
  },
  {
    "text": "have to restart that individual part and of course transfer manager takes care of restarting and resenting that part for",
    "start": "930600",
    "end": "936759"
  },
  {
    "text": "you so your application is typically unaware that it ever even saw any",
    "start": "936759",
    "end": "942279"
  },
  {
    "text": "error let's talk a little bit more about the transfer manager API and then we're going to get into some code and we're",
    "start": "944959",
    "end": "950120"
  },
  {
    "text": "going to use this to help us manage some of the data that our meme generator app is creating in our S3",
    "start": "950120",
    "end": "955680"
  },
  {
    "text": "bucket like I mentioned before transfer manager is essentially two different types of methods you've got upload",
    "start": "955680",
    "end": "962279"
  },
  {
    "text": "methods and download methods and each one of those returns to use some type of transfer object typically those are",
    "start": "962279",
    "end": "968639"
  },
  {
    "text": "download and upload but we're going to see one more interesting type in a minute uh but the nice thing about this",
    "start": "968639",
    "end": "974639"
  },
  {
    "text": "is that the interface for all those transfers is essentially the same comes from the transfer interface class so you",
    "start": "974639",
    "end": "980839"
  },
  {
    "text": "can work with downloads and uploads in the same way transfers have a state you can ask",
    "start": "980839",
    "end": "986600"
  },
  {
    "text": "them if they've started processing yet or if they're waiting for resources you can see if they've been completed or",
    "start": "986600",
    "end": "992519"
  },
  {
    "text": "canell or failed they all have a human readable description you can also",
    "start": "992519",
    "end": "997560"
  },
  {
    "text": "transfer for its progress see how many bytes it's transferred how many bytes are remaining then I think one of the",
    "start": "997560",
    "end": "1003240"
  },
  {
    "text": "neatest features of the transfer manager API is the ability to attach these progress",
    "start": "1003240",
    "end": "1009279"
  },
  {
    "text": "listeners this progress listener interface is really simple you just have to provide this one progress change",
    "start": "1009279",
    "end": "1014759"
  },
  {
    "text": "method and transfer manager is going to call back into that method to give you updates on how your transfer is",
    "start": "1014759",
    "end": "1022040"
  },
  {
    "text": "progressing so let's jump back over to eclipse and I want to give you a quick",
    "start": "1022040",
    "end": "1028319"
  },
  {
    "text": "tour of the meme generator application code that we're going to be working with today and then we're going to see if we",
    "start": "1028319",
    "end": "1033558"
  },
  {
    "text": "can use transfer manager to help us download some of the data that our app is",
    "start": "1033559",
    "end": "1038720"
  },
  {
    "text": "creating so this meme generator application that you can find on GitHub is divided into three",
    "start": "1040000",
    "end": "1046640"
  },
  {
    "text": "projects this first project is the worker project this is where we have a few Java classes for the backend worker",
    "start": "1046640",
    "end": "1053880"
  },
  {
    "text": "process just two really simple Java classes that we'll see in a minute this next project is memes this",
    "start": "1053880",
    "end": "1061160"
  },
  {
    "text": "is where we have our front-end web UI it's got a few jsps in it and that's about",
    "start": "1061160",
    "end": "1067120"
  },
  {
    "text": "it and then both of those projects depend on this meme common project this",
    "start": "1067120",
    "end": "1072559"
  },
  {
    "text": "meme common project is where we have our AWS credentials managed and we have this AWS resources class that we're going to",
    "start": "1072559",
    "end": "1078320"
  },
  {
    "text": "be using through throughout the session it's got some constants in there for the S3 buckets we're using Dynamo DB tables",
    "start": "1078320",
    "end": "1084799"
  },
  {
    "text": "and it's also got some client objects that we can share throughout our application so let's go ahead and create",
    "start": "1084799",
    "end": "1091280"
  },
  {
    "text": "a new class in meme common and what we're going to try to do",
    "start": "1091280",
    "end": "1096840"
  },
  {
    "text": "remember that our meme generator application is creating all these new images and storing them in our Amazon S3",
    "start": "1096840",
    "end": "1102919"
  },
  {
    "text": "bucket so what we want to do is try to download all of those completed images so that we can work with them locally",
    "start": "1102919",
    "end": "1109120"
  },
  {
    "text": "and do something with them so let's call this CL class download all image",
    "start": "1109120",
    "end": "1115960"
  },
  {
    "text": "macros and we'll give it a public static void main",
    "start": "1115960",
    "end": "1121000"
  },
  {
    "text": "method and we'll go ahead and have this throw exception so that we don't have to deal with any of those right",
    "start": "1124720",
    "end": "1131200"
  },
  {
    "text": "now and the first thing we want to do is get a new instance of transfer manager for us to start downloading some of",
    "start": "1131200",
    "end": "1136480"
  },
  {
    "text": "these objects with",
    "start": "1136480",
    "end": "1140039"
  },
  {
    "text": "we've got our ads credentials already stored in that ads resources class that I mentioned so we'll just throw those",
    "start": "1142440",
    "end": "1151960"
  },
  {
    "text": "in and we'll assign this to a new variable called TM so now we got our transfer manager",
    "start": "1153360",
    "end": "1160480"
  },
  {
    "text": "object it's ready for us to use to start downloading some of these objects now we could use the S3 objects utility that we",
    "start": "1160480",
    "end": "1166840"
  },
  {
    "text": "just learned about we could iterate over all those objects in our bucket and download them individually but there's",
    "start": "1166840",
    "end": "1172159"
  },
  {
    "text": "also another interesting form of download in transfer manager that will let us do all of that at once and",
    "start": "1172159",
    "end": "1177280"
  },
  {
    "text": "managed in a single transfer object so we're going to use this download directory method",
    "start": "1177280",
    "end": "1183919"
  },
  {
    "text": "here we're going to grab our S3 bucket name again from this AWS resources",
    "start": "1183919",
    "end": "1190600"
  },
  {
    "text": "class then I happen to know we're storing all of our completed um image macros under this memes key prefix",
    "start": "1191720",
    "end": "1199760"
  },
  {
    "text": "and the last thing we need to provide is just a directory for transfer manager to download all these",
    "start": "1199760",
    "end": "1205720"
  },
  {
    "text": "to so we'll bring in Java IO file and then just to make sure this",
    "start": "1212000",
    "end": "1217760"
  },
  {
    "text": "directory already exists I'm going to pull this out into a directory local",
    "start": "1217760",
    "end": "1222919"
  },
  {
    "text": "variable and just call makers",
    "start": "1222919",
    "end": "1227679"
  },
  {
    "text": "so we've got one line of code to create transfer manager a few lines of code to create a directory and then another line of code that's going to download all of",
    "start": "1229000",
    "end": "1236039"
  },
  {
    "text": "those objects from our S3 bucket so this is really all we need to",
    "start": "1236039",
    "end": "1241240"
  },
  {
    "text": "do to accomplish what we're trying to do but I want to show you one more feature for transfer manager like I mentioned before anytime",
    "start": "1241240",
    "end": "1248679"
  },
  {
    "text": "you call one of these download or upload methods they're not going to block they're going to immediately return to you some type of transfer this one for",
    "start": "1248679",
    "end": "1256200"
  },
  {
    "text": "download directory is called a multiple file download but it works just the same way as any other",
    "start": "1256200",
    "end": "1262640"
  },
  {
    "text": "transfer next thing we're going to do is hook this transfer up to show us some progress in the UI as it's downloading",
    "start": "1263919",
    "end": "1270200"
  },
  {
    "text": "everything so all we have to do is add a progress listener and we've already got a really",
    "start": "1270200",
    "end": "1276840"
  },
  {
    "text": "simple swing progress listener implemented want take a quick look at",
    "start": "1276840",
    "end": "1282440"
  },
  {
    "text": "that so we've implemented this uh class called swing progress let's",
    "start": "1284960",
    "end": "1290360"
  },
  {
    "text": "first thing you notice is that we have implemented the progress listener interface because we've got all that SDK",
    "start": "1290360",
    "end": "1296880"
  },
  {
    "text": "source code on our class path from the eclipse tools we can step in and look at that interface this interface is really",
    "start": "1296880",
    "end": "1302760"
  },
  {
    "text": "simple we just have to provide this one progress change method and that method is going to be periodically called by",
    "start": "1302760",
    "end": "1308200"
  },
  {
    "text": "transfer manager to give us updates let us know if some sort of event occurred like the transfer started or failed or",
    "start": "1308200",
    "end": "1314480"
  },
  {
    "text": "completed and to let us know as the number of bytes uh have been transferred",
    "start": "1314480",
    "end": "1319880"
  },
  {
    "text": "so let's go back to our swing progress listener everything in this Constructor is just setting up a jframe not",
    "start": "1319880",
    "end": "1326240"
  },
  {
    "text": "particularly interesting then down here we've got just about the simplest implementation of progress change that we could write",
    "start": "1326240",
    "end": "1333440"
  },
  {
    "text": "we uh every time we get this call back from the transfer manager API we ask our",
    "start": "1333440",
    "end": "1338559"
  },
  {
    "text": "transfer for the current progress and we just dump that into a progress",
    "start": "1338559",
    "end": "1343840"
  },
  {
    "text": "bar so let's go back to our class and try running this and see what it it",
    "start": "1343960",
    "end": "1350679"
  },
  {
    "text": "does so in just a second we should see our swing UI pop up in our progress bar",
    "start": "1350840",
    "end": "1356799"
  },
  {
    "text": "and filling up as our files transfer from S3 so with just a few lines of code",
    "start": "1356799",
    "end": "1362559"
  },
  {
    "text": "we're able to use transfer manager to do this fairly sophisticated download of all of our objects or a whole section of",
    "start": "1362559",
    "end": "1369279"
  },
  {
    "text": "objects from our S3 bucket and by adding just a little bit more code we're able to easily hook that up to the UI and",
    "start": "1369279",
    "end": "1375559"
  },
  {
    "text": "provide nice progress reporting so there's a lot more that transfer",
    "start": "1375559",
    "end": "1380720"
  },
  {
    "text": "manager can do beyond the basics that we're seeing here and we'll have some more Links at the end of this session uh",
    "start": "1380720",
    "end": "1386520"
  },
  {
    "text": "but it's definitely a powerful API that's worth knowing in the",
    "start": "1386520",
    "end": "1391480"
  },
  {
    "text": "SDK so now I want to change gears a little bit and talk about working with Amazon Dynamo",
    "start": "1396120",
    "end": "1401919"
  },
  {
    "text": "DB Dynamo DB is a fully managed nosql database that has really good performance characteristics not only",
    "start": "1401919",
    "end": "1409279"
  },
  {
    "text": "does it give you fast performance but it gives you very predictable performance and because Dynamo DB is",
    "start": "1409279",
    "end": "1415600"
  },
  {
    "text": "such an important and useful service to know we wanted to show you a few tricks for working with your data in Dynamo DB",
    "start": "1415600",
    "end": "1421840"
  },
  {
    "text": "using the SDK for",
    "start": "1421840",
    "end": "1424880"
  },
  {
    "text": "Java like I mentioned before one of the the keys to getting more out of the SDK",
    "start": "1427440",
    "end": "1433760"
  },
  {
    "text": "is really understanding these highlevel apis understanding the high level API that exist and what they can do for you",
    "start": "1433760",
    "end": "1441559"
  },
  {
    "text": "anything that these apis can do for you in your application means codes you don't have to write code you don't have",
    "start": "1441559",
    "end": "1446840"
  },
  {
    "text": "to test and code you don't have to end up maintaining over time and the Dynamo DB object mapper is a really great",
    "start": "1446840",
    "end": "1452919"
  },
  {
    "text": "example of a powerful high level API that can do a lot for you and uh take care of automatically marshalling your",
    "start": "1452919",
    "end": "1460440"
  },
  {
    "text": "Java objects into Dynamo DB items and attributes that's the big feature of",
    "start": "1460440",
    "end": "1466720"
  },
  {
    "text": "Dynamo DB mapper that we're going to be talking about today but there's a couple more major features in the mapper as",
    "start": "1466720",
    "end": "1472080"
  },
  {
    "text": "well you can use the mapper to run scans and queries on your data and anytime you",
    "start": "1472080",
    "end": "1477679"
  },
  {
    "text": "do those scans and queries you're still going to be talking in your model objects you're not going to drop down to",
    "start": "1477679",
    "end": "1483880"
  },
  {
    "text": "Dynamo DB items and attributes you can also use object mapper to use some of the batching",
    "start": "1483880",
    "end": "1489720"
  },
  {
    "text": "features in the Dynamo DB API really easily but we're going to be working specifically with the automatic data",
    "start": "1489720",
    "end": "1497039"
  },
  {
    "text": "marshalling and for any of you that have ever used hibernate or any other jpa provider this is going to be instantly",
    "start": "1497039",
    "end": "1502520"
  },
  {
    "text": "familiar and really easy to pick up the idea is the same that we simply",
    "start": "1502520",
    "end": "1508279"
  },
  {
    "text": "take our Java objects in our meme common project for example we've got this image macro",
    "start": "1508279",
    "end": "1515000"
  },
  {
    "text": "class and we just have to apply a few annotations to this class and then it's ready for use with a mapper so you guys",
    "start": "1515000",
    "end": "1521880"
  },
  {
    "text": "can see this is H just a plain old Java object some Fields some Getters and Setters and we only need to use about",
    "start": "1521880",
    "end": "1527720"
  },
  {
    "text": "three an anotations to get this class working with the Dynamo mapper this first annotation that we",
    "start": "1527720",
    "end": "1534520"
  },
  {
    "text": "need is Dynamo DB table and you have to apply this annotation for any object or",
    "start": "1534520",
    "end": "1539880"
  },
  {
    "text": "any class that you want to use with Dynamo DB mapper this is going to tell the mapper which table to use when it's",
    "start": "1539880",
    "end": "1545799"
  },
  {
    "text": "saving and loading your objects and you have to have this annotation for any class you want to use with a mapper so",
    "start": "1545799",
    "end": "1552559"
  },
  {
    "text": "that's our first annotation scrolling down a little bit we can see the next two that we need",
    "start": "1552559",
    "end": "1559399"
  },
  {
    "text": "the next one is Dynamo DB hash key this is uh The annotation that tells the",
    "start": "1559399",
    "end": "1564679"
  },
  {
    "text": "mapper that this field in our object maps to the hash key in our Dynamo DB table if you guys aren't familiar with",
    "start": "1564679",
    "end": "1571320"
  },
  {
    "text": "Dynamo DB Keys you can essentially think of a hash key as the same idea as a unique primary key in a relational",
    "start": "1571320",
    "end": "1578000"
  },
  {
    "text": "database table this last annotation that we're using is Dynamo DB autogenerated key",
    "start": "1578000",
    "end": "1585520"
  },
  {
    "text": "this one is actually a little bit extra we don't technically have to use this one but it enables the mapper to do a",
    "start": "1585520",
    "end": "1591200"
  },
  {
    "text": "little bit more work for us and simplifies our application code so just like with a autoincrement field in a",
    "start": "1591200",
    "end": "1598600"
  },
  {
    "text": "traditional relat relational database system we always want this field to have a unique ID but we don't particularly",
    "start": "1598600",
    "end": "1605440"
  },
  {
    "text": "care about what the value is so using this annotation is the exact same idea",
    "start": "1605440",
    "end": "1610840"
  },
  {
    "text": "we use this annotation and the Dynamo DB mapper is automatically going to fill in a unique ID for",
    "start": "1610840",
    "end": "1617240"
  },
  {
    "text": "us and that's all we have to do is add these three annotations and now our class is ready to be used with the",
    "start": "1617240",
    "end": "1622919"
  },
  {
    "text": "Dynamo DB mapper I want to talk a little bit about what types of data we can use in our",
    "start": "1622919",
    "end": "1629360"
  },
  {
    "text": "objects or our classes uh what types of data will work with a Dynamo DB mapper",
    "start": "1629360",
    "end": "1634679"
  },
  {
    "text": "you can use sets you can see we're using strings we're using dates here you can use numeric types like we'll see in a",
    "start": "1634679",
    "end": "1640440"
  },
  {
    "text": "minute but I want to take a few minutes to talk about this brand new type that we just added this summer and that's",
    "start": "1640440",
    "end": "1645840"
  },
  {
    "text": "this S3 link type that you see up there so you see that we have two members of type S3 link we have a starting image",
    "start": "1645840",
    "end": "1653120"
  },
  {
    "text": "link and we have a finished image link so let's talk a little bit more",
    "start": "1653120",
    "end": "1659000"
  },
  {
    "text": "about what this S3 link type is and uh why it's",
    "start": "1659000",
    "end": "1664600"
  },
  {
    "text": "useful there's this really common pattern in application development where you'll put your sowhat structured data",
    "start": "1666000",
    "end": "1672600"
  },
  {
    "text": "in Dynamo DB and it'll reference larger data that's stored in Amazon S3 and S3",
    "start": "1672600",
    "end": "1678600"
  },
  {
    "text": "link has two goals But ultimately it's trying to make that pattern more useful",
    "start": "1678600",
    "end": "1684679"
  },
  {
    "text": "and uh more easy to use with a Dynamo DB mapper so the two things that you really get from S3 link are essentially a",
    "start": "1684679",
    "end": "1692919"
  },
  {
    "text": "pointer to that data that's stored in S3 so you have this common representation for how to store the information that",
    "start": "1692919",
    "end": "1699399"
  },
  {
    "text": "points to a larger object in S3 uh and it works with a Dynamo DB mapper so",
    "start": "1699399",
    "end": "1705159"
  },
  {
    "text": "that's the first thing that you get from s through link but the really useful thing from S3 link and where S3 link",
    "start": "1705159",
    "end": "1710840"
  },
  {
    "text": "really shines is that it actually makes working with your data in S3 really easy as well so you can think of S3 link as a",
    "start": "1710840",
    "end": "1718080"
  },
  {
    "text": "pointer to your data stored in S3 and then there's a bunch of convenience methods on this S3 link type that",
    "start": "1718080",
    "end": "1723880"
  },
  {
    "text": "essentially allow you to dreference that pointer and work directly with the data without having to spin up a new S3",
    "start": "1723880",
    "end": "1729919"
  },
  {
    "text": "client so you can download your data directly from the object you can replace the object's contents you can change",
    "start": "1729919",
    "end": "1735919"
  },
  {
    "text": "object's permissions and a few other simple op operations with S3",
    "start": "1735919",
    "end": "1741200"
  },
  {
    "text": "link we're going to take a look through the rest of the meme generator code and we're going to see how we use",
    "start": "1741600",
    "end": "1748760"
  },
  {
    "text": "the mapper to save and load our instances of image macro when we get to the meme worker code we're going to see",
    "start": "1748760",
    "end": "1755120"
  },
  {
    "text": "how we use the two instances of S3 link to make it really easy for the worker to",
    "start": "1755120",
    "end": "1760600"
  },
  {
    "text": "manipulate that S3",
    "start": "1760600",
    "end": "1763880"
  },
  {
    "text": "data so as soon as we as soon as we uh fill out that form",
    "start": "1766159",
    "end": "1774039"
  },
  {
    "text": "that we saw in the web UI earlier our frontend UI is going to",
    "start": "1774039",
    "end": "1779320"
  },
  {
    "text": "execute this code here this method called submit job all the method or all the data that we",
    "start": "1779320",
    "end": "1785440"
  },
  {
    "text": "entered into that form just gets passed into this method and then we're going to create a new instance of image macro",
    "start": "1785440",
    "end": "1791600"
  },
  {
    "text": "just like we would for any other pojo we're going to populate its fields and then we're going to grab this instance",
    "start": "1791600",
    "end": "1797880"
  },
  {
    "text": "of Dynamo DB mapper and we're going to call the save operation and then mapper is going to look at those annotations on",
    "start": "1797880",
    "end": "1803919"
  },
  {
    "text": "the class see which table in dynamod DB it needs to use to persist all the data and write our object to Dynamo",
    "start": "1803919",
    "end": "1812080"
  },
  {
    "text": "DB as soon as the front in writes our data to Dynamo DB we're going to send a really quick message to our sqsq to wake",
    "start": "1812080",
    "end": "1819320"
  },
  {
    "text": "up that backend worker process and that worker process is just",
    "start": "1819320",
    "end": "1826320"
  },
  {
    "text": "a really really simple thread that's sitting there and pulling that sqsq as soon as it sees a message come",
    "start": "1826320",
    "end": "1833200"
  },
  {
    "text": "in on that sqsq it's going to call this message processor",
    "start": "1833200",
    "end": "1839919"
  },
  {
    "text": "code and for every message that comes in we're going to pull the ID of our image macro out of the message then we're",
    "start": "1840120",
    "end": "1846600"
  },
  {
    "text": "going to use the mapper to go download or load that image macro object",
    "start": "1846600",
    "end": "1851799"
  },
  {
    "text": "instance so here we're using the load method of Dynamo DB mapper and we have",
    "start": "1851799",
    "end": "1857039"
  },
  {
    "text": "to give it two arguments the first thing we have to tell it is what type of object we're trying to load",
    "start": "1857039",
    "end": "1863440"
  },
  {
    "text": "so we pass in the image macro class it uses that class to load the annotations to see which table to load our data from",
    "start": "1863440",
    "end": "1871080"
  },
  {
    "text": "and then the second parameter we pass in is the unique ID for our image macro object so once we pass that in the",
    "start": "1871080",
    "end": "1878399"
  },
  {
    "text": "mapper takes care of downloading all the uh items and attributes from our Dynamo DB table and then it Marshall Marshals",
    "start": "1878399",
    "end": "1885360"
  },
  {
    "text": "those back into our image macro object so now we've got the same image macro",
    "start": "1885360",
    "end": "1890919"
  },
  {
    "text": "object or containing at least the same data that we just submitted a minute ago the first thing the worker is going",
    "start": "1890919",
    "end": "1897600"
  },
  {
    "text": "to do with that is update the status then it's going to use the mapper to save that update back to Dynamo DB so",
    "start": "1897600",
    "end": "1904120"
  },
  {
    "text": "anyone else looking at this data sees that we're already working on it then these next few lines of code are",
    "start": "1904120",
    "end": "1910360"
  },
  {
    "text": "where we actually do the image processing this is where we're going to see how these S3 links make it really",
    "start": "1910360",
    "end": "1915480"
  },
  {
    "text": "easy to work with that data that's stored in Amazon S3 the first thing we do is create a",
    "start": "1915480",
    "end": "1922559"
  },
  {
    "text": "bite array output stream that we're essentially using as a buffer then we're going to access that",
    "start": "1922559",
    "end": "1928279"
  },
  {
    "text": "very first S3 link type get starting image link we're going to call download",
    "start": "1928279",
    "end": "1933480"
  },
  {
    "text": "two to download all of that reference data into our buffer this next line of code just turns",
    "start": "1933480",
    "end": "1940519"
  },
  {
    "text": "that uh that buffer into a buffered image object and then this fourth line here",
    "start": "1940519",
    "end": "1946840"
  },
  {
    "text": "overlays those caption and creates our final image in these next lines of code we're",
    "start": "1946840",
    "end": "1953519"
  },
  {
    "text": "using that second S3 link type and this is where we're going to upload our new created image to our its final position",
    "start": "1953519",
    "end": "1960200"
  },
  {
    "text": "in Amazon S3 so just like before we just grab that field with get finished image link then",
    "start": "1960200",
    "end": "1967120"
  },
  {
    "text": "we're calling the upload from method and we're reading that buffered image into a inmemory buffer and letting",
    "start": "1967120",
    "end": "1974679"
  },
  {
    "text": "that S3 link type handle getting that data stored into Amazon s",
    "start": "1974679",
    "end": "1979840"
  },
  {
    "text": "3 the next line of code you can see we're again using that S3 link type that get finished image link and we're using",
    "start": "1980000",
    "end": "1987399"
  },
  {
    "text": "the convenience method set akle to change its Access Control list or its permissions so that anyone on the web",
    "start": "1987399",
    "end": "1993159"
  },
  {
    "text": "can see the new image that our system just created once the meme worker finishes",
    "start": "1993159",
    "end": "2000679"
  },
  {
    "text": "doing that we update the status one more time then we use the mapper to save it back to Dynamo DB so you guys you can",
    "start": "2000679",
    "end": "2007919"
  },
  {
    "text": "see that this is a really simple example of using the basics of Dynamo DB mapper to save your data to Dynamo DB and to",
    "start": "2007919",
    "end": "2015000"
  },
  {
    "text": "load it back into uh your model objects so now that we know the basics",
    "start": "2015000",
    "end": "2021399"
  },
  {
    "text": "of using the Dynamo DB mapper I want to show you how easy it is to add new data to our",
    "start": "2021399",
    "end": "2026919"
  },
  {
    "text": "system so there's one more page in our application where we can see all the image macros that our users have been",
    "start": "2026919",
    "end": "2033880"
  },
  {
    "text": "creating and what we want to do is provide a new link on this page for every one of these images so that users",
    "start": "2033880",
    "end": "2040600"
  },
  {
    "text": "can essentially vote on uh which image images they like essentially storing a vote count for all these",
    "start": "2040600",
    "end": "2048000"
  },
  {
    "text": "images so the very first thing we need to do is go back to our model class this image macro",
    "start": "2048200",
    "end": "2054118"
  },
  {
    "text": "class and we're going to add a new field here called votes to track our vote",
    "start": "2054119",
    "end": "2061000"
  },
  {
    "text": "count all we need to do is give it a getter and setter",
    "start": "2062560",
    "end": "2068919"
  },
  {
    "text": "and just by doing this by adding the new field and by adding the getter and Setter the Dynamo DV mapper is now",
    "start": "2069280",
    "end": "2074919"
  },
  {
    "text": "automatically going to find this whenever we use the mapper to save our objects and it's going to store this votes count as a new attribute in Dynamo",
    "start": "2074919",
    "end": "2084398"
  },
  {
    "text": "DB the next thing we're going to do is add that link to the page we were just looking",
    "start": "2084960",
    "end": "2091398"
  },
  {
    "text": "at we're going to open this memes JSP page and every time we output one of our",
    "start": "2091679",
    "end": "2100520"
  },
  {
    "text": "final images we're going to add a new link to a new JSP page that we're going to create in a",
    "start": "2100520",
    "end": "2105800"
  },
  {
    "text": "second we're going to call this page vote. JSP and we're going to pass in our ID of",
    "start": "2105800",
    "end": "2112400"
  },
  {
    "text": "the image macro that we're",
    "start": "2112400",
    "end": "2115680"
  },
  {
    "text": "displaying so we've added our field to our model class we we've added a link to",
    "start": "2123040",
    "end": "2128359"
  },
  {
    "text": "this new page and now we're going to create this new JSP that's going to download the image macro object and",
    "start": "2128359",
    "end": "2134320"
  },
  {
    "text": "update the vote count and save it back to Dynamo",
    "start": "2134320",
    "end": "2138520"
  },
  {
    "text": "DB so we're creating a new JSP called vote",
    "start": "2139599",
    "end": "2144800"
  },
  {
    "text": "JSP first thing we're going to do is go ahead and import our Java code so we can use all those classes and resources",
    "start": "2145320",
    "end": "2154160"
  },
  {
    "text": "the way we're going to do this is by using the mapper to download that image object or to load it the image macro to",
    "start": "2160920",
    "end": "2167920"
  },
  {
    "text": "update the vote count locally and then to save that back now If This Were Real production code we were writing we'd",
    "start": "2167920",
    "end": "2173680"
  },
  {
    "text": "probably be doing some things differently of course uh for one we probably wouldn't be throwing everything in a JSP there's also an interesting",
    "start": "2173680",
    "end": "2180440"
  },
  {
    "text": "race condition that I want you guys to understand here when you use the mapper to load data from Dynamo DB and then",
    "start": "2180440",
    "end": "2186040"
  },
  {
    "text": "work with it locally so consider what happens in the case when we have two users voting on the same image at the",
    "start": "2186040",
    "end": "2192480"
  },
  {
    "text": "same time we've got two threads processing both of those requests they load the image macro object they update",
    "start": "2192480",
    "end": "2198680"
  },
  {
    "text": "the vote count and they're going to save them back to Dynamo DB one of those requests is going to get in first and",
    "start": "2198680",
    "end": "2204240"
  },
  {
    "text": "the other one is going to essentially overwrite that first request that got in now for some types of applications",
    "start": "2204240",
    "end": "2211040"
  },
  {
    "text": "you might not care about that data but most of the time you're going to want to be able to detect when that happens and",
    "start": "2211040",
    "end": "2216560"
  },
  {
    "text": "fortunately using the Dynamo DB mapper or the lower level SDK it's really easy to handle this case the mapper has a",
    "start": "2216560",
    "end": "2224520"
  },
  {
    "text": "really easy feature that you can turn on for optimistic locking and I'll give you some more information about that in The Links at the end but essentially all you",
    "start": "2224520",
    "end": "2231520"
  },
  {
    "text": "have to do is add an extra annotation to your class and mapper will take care of detecting if you ever try to save back",
    "start": "2231520",
    "end": "2237839"
  },
  {
    "text": "stale data to Dynamo DB and if that ever happens it's going to prevent it from being saved and it's going to give your",
    "start": "2237839",
    "end": "2244160"
  },
  {
    "text": "application the chance to refresh the data and retry that update so that's one really easy way of taking care of that",
    "start": "2244160",
    "end": "2250079"
  },
  {
    "text": "race condition another one is dropping down to the lower level Dynamo DB API",
    "start": "2250079",
    "end": "2256119"
  },
  {
    "text": "and using this really neat feature where you can actually increment that vote count directly on the server side so if",
    "start": "2256119",
    "end": "2261760"
  },
  {
    "text": "we were doing this in production code that's probably how we would want to do this but for the purpose of this demo I just want to show you a little more on",
    "start": "2261760",
    "end": "2267839"
  },
  {
    "text": "the basics of loading and saving with a mapper so the first thing we need to do",
    "start": "2267839",
    "end": "2274800"
  },
  {
    "text": "is find out which image macro we're working with we've got that stashed in a request",
    "start": "2274800",
    "end": "2281599"
  },
  {
    "text": "parameter then once we know the ID we can use the mapper to load that an instance of image macro that has all the",
    "start": "2281599",
    "end": "2287960"
  },
  {
    "text": "same data in it so we'll create our image macro and again we're using this AWS",
    "start": "2287960",
    "end": "2295400"
  },
  {
    "text": "resources class to grab a quick instance of Dynamo DB",
    "start": "2295400",
    "end": "2300599"
  },
  {
    "text": "mapper and whenever we call load the first thing we need to tell it is what type of object we're loading",
    "start": "2300760",
    "end": "2308359"
  },
  {
    "text": "then the next thing we need to tell it is the ID so the Dynamo and the mapper can find that unique object that we're",
    "start": "2310000",
    "end": "2315040"
  },
  {
    "text": "looking for so now that we've got this image mackerel object the next thing we need",
    "start": "2315040",
    "end": "2321000"
  },
  {
    "text": "to do is update the vote count we want to watch out and make sure",
    "start": "2321000",
    "end": "2327599"
  },
  {
    "text": "that if this uh image macro doesn't have any votes yet we initialize this to one",
    "start": "2327599",
    "end": "2334599"
  },
  {
    "text": "vote otherwise we're just going to grab the current current vote count and uh increment it by",
    "start": "2334599",
    "end": "2342599"
  },
  {
    "text": "one we're going to set that vote count back and the image macro and then again",
    "start": "2342599",
    "end": "2347920"
  },
  {
    "text": "just use the Dynamo mapper to save that data back to",
    "start": "2347920",
    "end": "2354400"
  },
  {
    "text": "Dynamo and then we'll add just a line down here at the bottom so we can see uh that vote count just have a little",
    "start": "2358040",
    "end": "2364160"
  },
  {
    "text": "feedback",
    "start": "2364160",
    "end": "2367160"
  },
  {
    "text": "so we added one field to our image macro class we added a link to our memes JSP",
    "start": "2369280",
    "end": "2374960"
  },
  {
    "text": "and then we had this small JSP where we're loading the object manipulating it locally and saving it",
    "start": "2374960",
    "end": "2380240"
  },
  {
    "text": "back let's grab this uh memes JSP page and we'll just pull it down to our local",
    "start": "2380240",
    "end": "2385920"
  },
  {
    "text": "Tomcat",
    "start": "2385920",
    "end": "2388400"
  },
  {
    "text": "server and in just a second we should see this open",
    "start": "2391400",
    "end": "2396920"
  },
  {
    "text": "let's try one more",
    "start": "2398640",
    "end": "2401519"
  },
  {
    "text": "time there we go so we've got our same uh list of all",
    "start": "2406079",
    "end": "2411880"
  },
  {
    "text": "our completed image macros here we've got this new link that we created and when we click on this we can",
    "start": "2411880",
    "end": "2417960"
  },
  {
    "text": "see that our vote count is one just like we expected so that's great that gives you a little bit of feedback um really easy",
    "start": "2417960",
    "end": "2424119"
  },
  {
    "text": "to use the mapper but a lot of times when you're developing these features really the best way to know if your code",
    "start": "2424119",
    "end": "2430079"
  },
  {
    "text": "is working like you expect it is to go straight to the data and look at it and that's where some of these management features in the eclipse toolkit can",
    "start": "2430079",
    "end": "2436599"
  },
  {
    "text": "really help you during your development time so over here in the AWS Explorer",
    "start": "2436599",
    "end": "2442040"
  },
  {
    "text": "we've got a nice view of all of our ads resources for our current account and our current region so we can come down",
    "start": "2442040",
    "end": "2449440"
  },
  {
    "text": "here to Dynamo and we can take a look at our data in our reinvent memes table we",
    "start": "2449440",
    "end": "2455800"
  },
  {
    "text": "can see just like we expected we got this brand new attribute that we just created by adding that field to the",
    "start": "2455800",
    "end": "2460839"
  },
  {
    "text": "mapper and just like we expected it's got one vote correctly stored so that's just a quick example of",
    "start": "2460839",
    "end": "2467560"
  },
  {
    "text": "how some of these management tools can help you during development to validate that your code is really working and uh",
    "start": "2467560",
    "end": "2472920"
  },
  {
    "text": "editing your adabas resources like you expected",
    "start": "2472920",
    "end": "2477160"
  },
  {
    "text": "is so there's a lot more you can do with the Dynamo mapper I'm going to have some more resources at the end of this",
    "start": "2482119",
    "end": "2487319"
  },
  {
    "text": "session you can control a lot of options on how the mapper saves your data and how it behaves and uh we'll be able to",
    "start": "2487319",
    "end": "2494400"
  },
  {
    "text": "send you some links on digging in deeper to some of those features after this session the next thing I want to talk",
    "start": "2494400",
    "end": "2500440"
  },
  {
    "text": "about is how we actually get our application running on AWS and the service that we're using to",
    "start": "2500440",
    "end": "2505920"
  },
  {
    "text": "run our application for the meme generator is AWS elastic bean stock and",
    "start": "2505920",
    "end": "2511680"
  },
  {
    "text": "elastic beanock is a managed application container service so that means all you",
    "start": "2511680",
    "end": "2516839"
  },
  {
    "text": "really have have to worry about is building a great web application and then take it and drop it into elastic",
    "start": "2516839",
    "end": "2522119"
  },
  {
    "text": "beanock we're building a Java web app of course but beanock also supports Ruby web applications PHP Python and node.js",
    "start": "2522119",
    "end": "2531839"
  },
  {
    "text": "um it's a great service especially for running web applications it gives you a really good uh infrastructure it will",
    "start": "2531839",
    "end": "2537720"
  },
  {
    "text": "assemble all your ec2 instances for you Auto scaling rulle security groups",
    "start": "2537720",
    "end": "2542839"
  },
  {
    "text": "monitoring really takes care of all those details for you so you can just worry about building your",
    "start": "2542839",
    "end": "2549119"
  },
  {
    "text": "application beanock is also a fairly simple Service uh unlike some other services you really only have to know",
    "start": "2550240",
    "end": "2556440"
  },
  {
    "text": "three concepts to use beanock effectively the first two comp or concepts are applications and",
    "start": "2556440",
    "end": "2562760"
  },
  {
    "text": "application versions applications represent the projects that you're building and",
    "start": "2562760",
    "end": "2568119"
  },
  {
    "text": "application versions represent specific sets of your application code that you've uploaded to",
    "start": "2568119",
    "end": "2573680"
  },
  {
    "text": "AWS the last concept that you need to understand is an environment an elastic beanock environment an environment",
    "start": "2573680",
    "end": "2581119"
  },
  {
    "text": "represents an actual running instance of your application so it's a specific application version plus all of the",
    "start": "2581119",
    "end": "2588319"
  },
  {
    "text": "Amazon resources that you need to run your application ec2 instances security groups autoscaling groups cloudwatch",
    "start": "2588319",
    "end": "2595440"
  },
  {
    "text": "monitoring everything that you and your application don't have to worry about is automatically assembled for you by the",
    "start": "2595440",
    "end": "2601400"
  },
  {
    "text": "beanock service there are a lot of great tools that you can use to run your your",
    "start": "2601400",
    "end": "2607240"
  },
  {
    "text": "beanock applications or to deploy to beanock there's the AWS Management console there's third party tools you",
    "start": "2607240",
    "end": "2613640"
  },
  {
    "text": "can use the API directly there's a CLI but of course we're going to be using the eclipse tools to show how we can",
    "start": "2613640",
    "end": "2619440"
  },
  {
    "text": "easily take the meme generator app and deploy it to elastic beanock with a few",
    "start": "2619440",
    "end": "2625280"
  },
  {
    "text": "clicks so if you've created an environment already and one of the other tools for elastic beanock you can simply",
    "start": "2630920",
    "end": "2636559"
  },
  {
    "text": "import those into eclipse and use them or you can come down here to the servers view in eclipse and create a brand new",
    "start": "2636559",
    "end": "2645000"
  },
  {
    "text": "environment so we're creating a new server of type AWS elastic bean stock for Tomcat",
    "start": "2647599",
    "end": "2656240"
  },
  {
    "text": "7 then we only have to give it a few options to get our new server created in Eclipse first thing we have to tell",
    "start": "2656240",
    "end": "2662760"
  },
  {
    "text": "eclipse is what AWS region we want to run our elastic beant stock environment in",
    "start": "2662760",
    "end": "2668920"
  },
  {
    "text": "the next thing we need to tell eclipse is which application what is the name of our application that we're going to be running in this uh",
    "start": "2668920",
    "end": "2676359"
  },
  {
    "text": "environment and the last thing we need to do is give our environment a",
    "start": "2678800",
    "end": "2684440"
  },
  {
    "text": "name and that's really all we need to do to create this new elastic beanock environment in Eclipse I want to quickly",
    "start": "2687839",
    "end": "2694880"
  },
  {
    "text": "call out this brand new option that we've uh recently added in the past year the default option for your web",
    "start": "2694880",
    "end": "2702520"
  },
  {
    "text": "applications infrastructure architecture is this load balanced architecture and that's a really good architecture for",
    "start": "2702520",
    "end": "2708040"
  },
  {
    "text": "running a production web application you're going to get a horizontally scaled Fleet of application servers that",
    "start": "2708040",
    "end": "2713559"
  },
  {
    "text": "are fronted by an elastic load balancer it's great if you're running a production web application that's the",
    "start": "2713559",
    "end": "2719119"
  },
  {
    "text": "choice you want to use but if you're setting up a beta or gamma environment or if you just want to test out elastic",
    "start": "2719119",
    "end": "2724520"
  },
  {
    "text": "bean stock and you're not running a production web application we've added this new single instance option you're not going to get the",
    "start": "2724520",
    "end": "2730920"
  },
  {
    "text": "elastic load balancer you're not going to get the horizontal scaling you're just going to get a really simple application server to start and get uh",
    "start": "2730920",
    "end": "2737400"
  },
  {
    "text": "to start playing with so now down here in our servers",
    "start": "2737400",
    "end": "2743599"
  },
  {
    "text": "view we've got this new elastic beant stock environment and then because the eclipse tools build on top of the",
    "start": "2743599",
    "end": "2749920"
  },
  {
    "text": "standard web development Tools in Eclipse we can deploy to elastic beant stock in exactly the same way that we",
    "start": "2749920",
    "end": "2755280"
  },
  {
    "text": "deployed to our local Tomcat server so we can take one of our JSP uh Pages",
    "start": "2755280",
    "end": "2760480"
  },
  {
    "text": "or one of our servlets and just drag them down to our elastic beanock server now because starting a new",
    "start": "2760480",
    "end": "2767200"
  },
  {
    "text": "environment takes around 5 to 10 minutes for elastic beanock to set up all those ec2 instances start up your application",
    "start": "2767200",
    "end": "2774040"
  },
  {
    "text": "servers and deploy your code we're going to skip creating a new environment and just deploy to this existing environment",
    "start": "2774040",
    "end": "2779599"
  },
  {
    "text": "that we have so we're going to grab this uh index JSP from our meme generator app",
    "start": "2779599",
    "end": "2787640"
  },
  {
    "text": "we're going to drag that down to our meme generator environment and then down in the bottom",
    "start": "2787640",
    "end": "2794040"
  },
  {
    "text": "corner you can see a little bit of progress being reported eclipse is taking our latest code from our",
    "start": "2794040",
    "end": "2799160"
  },
  {
    "text": "application uploading it to AWS as new application version and then beanock is going to start deploying that out to our",
    "start": "2799160",
    "end": "2805800"
  },
  {
    "text": "elastic beanock environment so this is going to take one or two minutes while beanock sends our",
    "start": "2805800",
    "end": "2812079"
  },
  {
    "text": "application servers our new version of our code and while we're waiting on that browser to pop up I want to show you",
    "start": "2812079",
    "end": "2817160"
  },
  {
    "text": "some of the management features for our beanock environment so from the servers view we",
    "start": "2817160",
    "end": "2822440"
  },
  {
    "text": "can double click on our elastic beanock environment to bring up the server",
    "start": "2822440",
    "end": "2828559"
  },
  {
    "text": "configuration editor so this is a really great way to see what your environment is doing how",
    "start": "2828559",
    "end": "2834400"
  },
  {
    "text": "it's configured change the configuration look at logs see what kind of resources it's using there's a lot of great",
    "start": "2834400",
    "end": "2840440"
  },
  {
    "text": "information in this editor here you can see we've got six different tabs down at the bottom of this editor",
    "start": "2840440",
    "end": "2847119"
  },
  {
    "text": "this first tab gives us the very basic information about our environment which region is it running in which",
    "start": "2847119",
    "end": "2852400"
  },
  {
    "text": "application version is is uh currently deployed to our application or our environment and what is the environment",
    "start": "2852400",
    "end": "2858319"
  },
  {
    "text": "status or health this next tab shows us all of the ec2 instances that are part of our",
    "start": "2858319",
    "end": "2865400"
  },
  {
    "text": "environment uh load balancer information then uh you probably saw some other tabs down there for the events real-time",
    "start": "2865400",
    "end": "2872280"
  },
  {
    "text": "events that are happening in our environment and also log access so that was about a minute or two",
    "start": "2872280",
    "end": "2878240"
  },
  {
    "text": "minutes maybe at most for us to drag and drop our index JSP down to our environment now you guys can see that",
    "start": "2878240",
    "end": "2884480"
  },
  {
    "text": "elastic beanock URL up there we're running our application on AWS just by dragging and dropping it uh from",
    "start": "2884480",
    "end": "2892040"
  },
  {
    "text": "Eclipse so I just wanted to highlight uh that it's really easy to create your",
    "start": "2892040",
    "end": "2897520"
  },
  {
    "text": "projects in Eclipse like we saw to use the SDK to work with the different services and then to actually even",
    "start": "2897520",
    "end": "2903480"
  },
  {
    "text": "deploy your projects directly from Eclipse to your elastic beanock environment",
    "start": "2903480",
    "end": "2908760"
  },
  {
    "text": "so we saw from start to finish of starting this project and getting it deployed on AWS and we saw how the tools",
    "start": "2912599",
    "end": "2918800"
  },
  {
    "text": "in eclipse and the tools in the SDK can make that really easy but we really saw a very small slice of what's available",
    "start": "2918800",
    "end": "2925319"
  },
  {
    "text": "in the SDK and the AWS toolkit the very best way to stay on top of the new",
    "start": "2925319",
    "end": "2930760"
  },
  {
    "text": "features that we're adding to the sdks and to the eclipse toolkit is by following us on the AWS Java developer",
    "start": "2930760",
    "end": "2937359"
  },
  {
    "text": "blog and if you guys go to the blog today it's at java. AWS blogs.com you're",
    "start": "2937359",
    "end": "2943119"
  },
  {
    "text": "going to find a post that I put out there just a couple of hours ago that's got a couple of dozen links to articles",
    "start": "2943119",
    "end": "2948920"
  },
  {
    "text": "on our site to other Java blog posts to documentation in Java do that show",
    "start": "2948920",
    "end": "2955040"
  },
  {
    "text": "probably about a dozen different highlevel apis and Utilities in the SDK we've got lots more information on how",
    "start": "2955040",
    "end": "2961000"
  },
  {
    "text": "to use different features in the Dynamo DB mapper how to use more features in S3 transfer manager uh and a ton more high",
    "start": "2961000",
    "end": "2968119"
  },
  {
    "text": "level apis encryption Java mail and and a lot more on there so check those out",
    "start": "2968119",
    "end": "2973480"
  },
  {
    "text": "play with some of the other high level apis that we didn't have time to show today and of course I'd love for all of",
    "start": "2973480",
    "end": "2979119"
  },
  {
    "text": "you guys to download the SDK for Java install the eclipse toolkit and uh it'd be great for everyone to follow us on",
    "start": "2979119",
    "end": "2985680"
  },
  {
    "text": "GitHub send us some poll requests issues we love hearing feedback however we can get it from you",
    "start": "2985680",
    "end": "2992119"
  },
  {
    "text": "guys uh oh what did I miss oh got it thank you did you guys hear",
    "start": "2992960",
    "end": "3001119"
  },
  {
    "text": "that no s um so that's all I've got for you guys I hope that everybody learned at least",
    "start": "3001119",
    "end": "3006160"
  },
  {
    "text": "one new tip or trick that you can take back to your development to uh speed up how you use the SDK and some of the",
    "start": "3006160",
    "end": "3012240"
  },
  {
    "text": "eclipse tools thank you",
    "start": "3012240",
    "end": "3017680"
  }
]