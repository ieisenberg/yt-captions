[
  {
    "start": "0",
    "end": "27000"
  },
  {
    "text": "- Welcome to 'Back to Basics'.",
    "start": "5970",
    "end": "8189"
  },
  {
    "text": "In this episode, we'll\ndiscuss methods you can employ",
    "start": "8190",
    "end": "12269"
  },
  {
    "text": "to recover data due to an\naccidental data deletion",
    "start": "12270",
    "end": "15930"
  },
  {
    "text": "or possible data corruption\nin Amazon DynamoDB",
    "start": "15930",
    "end": "19890"
  },
  {
    "text": "and Amazon Aurora, and\npatterns you can use",
    "start": "19890",
    "end": "23400"
  },
  {
    "text": "to maintain consistency\nin your microservices.",
    "start": "23400",
    "end": "27000"
  },
  {
    "start": "27000",
    "end": "78000"
  },
  {
    "text": "Let's say you have an\nonline jewelry store,",
    "start": "27000",
    "end": "30570"
  },
  {
    "text": "and in the case of an unforeseen event,",
    "start": "30570",
    "end": "33239"
  },
  {
    "text": "you can tolerate a recovery\npoint objective of five minutes",
    "start": "33240",
    "end": "37740"
  },
  {
    "text": "and a recovery time objective of an hour.",
    "start": "37740",
    "end": "40950"
  },
  {
    "text": "You have regular sales events,",
    "start": "40950",
    "end": "42930"
  },
  {
    "text": "which significantly fluctuate\ntraffic to your website,",
    "start": "42930",
    "end": "46860"
  },
  {
    "text": "and therefore, you've implemented",
    "start": "46860",
    "end": "49110"
  },
  {
    "text": "a serverless microservices architecture.",
    "start": "49110",
    "end": "51990"
  },
  {
    "text": "In traditional applications,",
    "start": "51990",
    "end": "53760"
  },
  {
    "text": "you would typically\nhave one large database",
    "start": "53760",
    "end": "56339"
  },
  {
    "text": "to service all business functions.",
    "start": "56340",
    "end": "59010"
  },
  {
    "text": "In a microservice architecture,",
    "start": "59010",
    "end": "61199"
  },
  {
    "text": "each business function has its\nown independent data store.",
    "start": "61200",
    "end": "65040"
  },
  {
    "text": "A key design consideration",
    "start": "65040",
    "end": "66690"
  },
  {
    "text": "is you will need to\nmaintain ACID compliance",
    "start": "66690",
    "end": "69870"
  },
  {
    "text": "across all microservices, so\ntransactions can be completed",
    "start": "69870",
    "end": "74370"
  },
  {
    "text": "and recovered in the event\nof corruption or a failure.",
    "start": "74370",
    "end": "78870"
  },
  {
    "start": "78000",
    "end": "189000"
  },
  {
    "text": "With that, let's start with\nour first microservice.",
    "start": "78870",
    "end": "82530"
  },
  {
    "text": "When a customer makes an online purchase,",
    "start": "82530",
    "end": "85409"
  },
  {
    "text": "one of the services that\nyour website interacts with",
    "start": "85410",
    "end": "88320"
  },
  {
    "text": "is the orders microservice.",
    "start": "88320",
    "end": "90690"
  },
  {
    "text": "You've exposed your\norders microservice using",
    "start": "90690",
    "end": "94200"
  },
  {
    "text": "Amazon API Gateway and AWS Lambda,",
    "start": "94200",
    "end": "96990"
  },
  {
    "text": "which performs additional business logic",
    "start": "96990",
    "end": "99240"
  },
  {
    "text": "like ensuring the item is still available",
    "start": "99240",
    "end": "102210"
  },
  {
    "text": "and then saves the order in an\norders table within DynamoDB.",
    "start": "102210",
    "end": "106950"
  },
  {
    "text": "You also publish events for successful",
    "start": "106950",
    "end": "109500"
  },
  {
    "text": "or unsuccessful transactions.",
    "start": "109500",
    "end": "112350"
  },
  {
    "text": "A NoSQL database like DynamoDB\nis an excellent choice",
    "start": "112350",
    "end": "116640"
  },
  {
    "text": "for this microservice as it provides",
    "start": "116640",
    "end": "119820"
  },
  {
    "text": "low latency access to your online orders.",
    "start": "119820",
    "end": "123450"
  },
  {
    "text": "Additionally, DynamoDB transactions",
    "start": "123450",
    "end": "125939"
  },
  {
    "text": "provide ACID across one or more tables.",
    "start": "125940",
    "end": "130080"
  },
  {
    "text": "What if your jewelry\norders in the orders table",
    "start": "130080",
    "end": "132810"
  },
  {
    "text": "is accidentally deleted or corrupted?",
    "start": "132810",
    "end": "135390"
  },
  {
    "text": "DynamoDB has a point in time\nrecovery (PITR) feature,",
    "start": "135390",
    "end": "138930"
  },
  {
    "text": "which once enabled\nprovides continuous backups",
    "start": "138930",
    "end": "143069"
  },
  {
    "text": "of your DynamoDB data for up to 35 days",
    "start": "143070",
    "end": "146220"
  },
  {
    "text": "with per second granularity. Restoration",
    "start": "146220",
    "end": "148515"
  },
  {
    "text": "using this method will\noccur in a new table.",
    "start": "148515",
    "end": "153060"
  },
  {
    "text": "You simply point your\nmicroservice to this new table",
    "start": "153060",
    "end": "156900"
  },
  {
    "text": "or copy the deleted\ndata from the new table",
    "start": "156900",
    "end": "160230"
  },
  {
    "text": "to your original table.",
    "start": "160230",
    "end": "162330"
  },
  {
    "text": "Preventing this from happening",
    "start": "162330",
    "end": "163710"
  },
  {
    "text": "in the first place is important.",
    "start": "163710",
    "end": "166080"
  },
  {
    "text": "A common anti-pattern",
    "start": "166080",
    "end": "167610"
  },
  {
    "text": "is leaving your DynamoDB\ntable access wide open.",
    "start": "167610",
    "end": "171660"
  },
  {
    "text": "Also, the order service",
    "start": "171660",
    "end": "173310"
  },
  {
    "text": "may not even need delete permissions.",
    "start": "173310",
    "end": "176340"
  },
  {
    "text": "To achieve this apply\nleast privileged principles",
    "start": "176340",
    "end": "179879"
  },
  {
    "text": "by explicitly allowing only\nthe needed permissions.",
    "start": "179880",
    "end": "183720"
  },
  {
    "text": "Let's now take a look at\nthe payments microservice",
    "start": "183720",
    "end": "186720"
  },
  {
    "text": "leveraging Amazon Aurora.",
    "start": "186720",
    "end": "188970"
  },
  {
    "text": "Aurora is a fully managed\nrelational database engine",
    "start": "188970",
    "end": "193200"
  },
  {
    "start": "189000",
    "end": "299000"
  },
  {
    "text": "that's compatible with\nMySQL and PostgreSQL,",
    "start": "193200",
    "end": "197400"
  },
  {
    "text": "and adheres to ACID properties.",
    "start": "197400",
    "end": "200010"
  },
  {
    "text": "If data is accidentally\ndeleted or corrupted,",
    "start": "200010",
    "end": "203700"
  },
  {
    "text": "your customers will be unable\nto complete their orders",
    "start": "203700",
    "end": "207330"
  },
  {
    "text": "or your website may be left\nin a dysfunctional state.",
    "start": "207330",
    "end": "211680"
  },
  {
    "text": "Aurora backs up your\ncluster volume automatically",
    "start": "211680",
    "end": "215219"
  },
  {
    "text": "and retains restore data",
    "start": "215220",
    "end": "217680"
  },
  {
    "text": "for the length of the backup\nretention period up to 35 days.",
    "start": "217680",
    "end": "222629"
  },
  {
    "text": "You can quickly restore to\nany point within this period,",
    "start": "222630",
    "end": "226650"
  },
  {
    "text": "typically within five\nminutes of the current time,",
    "start": "226650",
    "end": "230849"
  },
  {
    "text": "which creates a new cluster.",
    "start": "230850",
    "end": "233040"
  },
  {
    "text": "You can then copy your desired information",
    "start": "233040",
    "end": "236099"
  },
  {
    "text": "back to your original cluster.",
    "start": "236100",
    "end": "238830"
  },
  {
    "text": "If using a supported\nversion of Aurora MySQL,",
    "start": "238830",
    "end": "243390"
  },
  {
    "text": "once enabled, Aurora\nhas a backtrack feature",
    "start": "243390",
    "end": "247680"
  },
  {
    "text": "that essentially rewinds\nyour database cluster",
    "start": "247680",
    "end": "250941"
  },
  {
    "text": "to the time you specify up to 72 hours.",
    "start": "250941",
    "end": "255840"
  },
  {
    "text": "If your applications cannot be stopped",
    "start": "255840",
    "end": "258630"
  },
  {
    "text": "or pause briefly, backtracking\nshould not be used",
    "start": "258630",
    "end": "262560"
  },
  {
    "text": "as it causes a brief database disruption.",
    "start": "262560",
    "end": "266100"
  },
  {
    "text": "Completing orders is typically made up",
    "start": "266100",
    "end": "268170"
  },
  {
    "text": "of multiple microservices.",
    "start": "268170",
    "end": "271080"
  },
  {
    "text": "If there is a deletion\nor a data corruption",
    "start": "271080",
    "end": "273720"
  },
  {
    "text": "along this chain,",
    "start": "273720",
    "end": "275760"
  },
  {
    "text": "Not only will each microservice data store",
    "start": "275760",
    "end": "278850"
  },
  {
    "text": "need to be in a consistent state,",
    "start": "278850",
    "end": "281520"
  },
  {
    "text": "but you'll need a mechanism to ensure",
    "start": "281520",
    "end": "283889"
  },
  {
    "text": "that retries are not applied\ntwice to the same transaction.",
    "start": "283890",
    "end": "287853"
  },
  {
    "text": "For example, you don't want\nthe payment microservice",
    "start": "288870",
    "end": "292020"
  },
  {
    "text": "to charge the customer twice.",
    "start": "292020",
    "end": "294389"
  },
  {
    "text": "One pattern you can use here\nis the concept of idempotency.",
    "start": "294390",
    "end": "299340"
  },
  {
    "start": "299000",
    "end": "361000"
  },
  {
    "text": "Which implies that given\nthe same input arguments,",
    "start": "299340",
    "end": "303600"
  },
  {
    "text": "a function invocation\nwill only change state",
    "start": "303600",
    "end": "307440"
  },
  {
    "text": "on the first indication.",
    "start": "307440",
    "end": "308970"
  },
  {
    "text": "One way to implement this is\nto create a new unique ID,",
    "start": "308970",
    "end": "313440"
  },
  {
    "text": "an idempotency token.",
    "start": "313440",
    "end": "315420"
  },
  {
    "text": "If the microservice\nencounters an identifier",
    "start": "315420",
    "end": "318120"
  },
  {
    "text": "it has previously executed,",
    "start": "318120",
    "end": "320460"
  },
  {
    "text": "it returns early and doesn't\napply any state changes.",
    "start": "320460",
    "end": "324810"
  },
  {
    "text": "To implement idempotency\nin your Lambda functions,",
    "start": "324810",
    "end": "328290"
  },
  {
    "text": "you can use Power Tools for Lambda,",
    "start": "328290",
    "end": "331170"
  },
  {
    "text": "which provides a module\nto handle idempotency.",
    "start": "331170",
    "end": "334983"
  },
  {
    "text": "In this episode, we\ndiscussed different ways",
    "start": "336000",
    "end": "339540"
  },
  {
    "text": "to recover from accidental data deletion",
    "start": "339540",
    "end": "342630"
  },
  {
    "text": "or corruption in DynamoDB and Aurora",
    "start": "342630",
    "end": "346440"
  },
  {
    "text": "to keep your business running smoothly.",
    "start": "346440",
    "end": "348753"
  },
  {
    "text": "Check out the links in\nthe description below",
    "start": "349800",
    "end": "352199"
  },
  {
    "text": "for more details.",
    "start": "352200",
    "end": "354030"
  },
  {
    "text": "Thanks for watching, 'Back to\nBasics'. See you next time.",
    "start": "354030",
    "end": "358780"
  }
]