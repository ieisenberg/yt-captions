[
  {
    "text": "uh welcome thanks everybody for coming out to serverless paloa I uh wore this hat in solidarity with all the Cowboys",
    "start": "399",
    "end": "6919"
  },
  {
    "text": "it was the closest thing I had um so I'm here to tell you about uh I'm an engineer by the way um I'm I'm here to",
    "start": "6919",
    "end": "14679"
  },
  {
    "text": "tell you about uh step functions it's a new AWS service that verer introduced to the world this morning so I'm going to",
    "start": "14679",
    "end": "22320"
  },
  {
    "text": "claim in advance that this is a pretty simple product and here's some objective evidence so when I first sat down to",
    "start": "22320",
    "end": "27760"
  },
  {
    "text": "write this speech I took a lot of trouble to pair it down to the essentials the bare things the the bare",
    "start": "27760",
    "end": "32840"
  },
  {
    "text": "few things you need to know to decide whether you need this thing and and how to use it and that came in at 27 minutes",
    "start": "32840",
    "end": "38760"
  },
  {
    "text": "so I kept putting more stuff and more stuff and more stuff in and I'm still maybe a little short of the of the full",
    "start": "38760",
    "end": "44160"
  },
  {
    "text": "hour so um it's quite possible I'll use all the time if I go slow and there",
    "start": "44160",
    "end": "49280"
  },
  {
    "text": "won't be any for questions if that's the case I promise to go out there and stand in the hallway and talk about step",
    "start": "49280",
    "end": "54960"
  },
  {
    "text": "functions until either you get bored or fall over um so let's let's plan on",
    "start": "54960",
    "end": "60399"
  },
  {
    "text": "doing that okay uh any other introductory remarks no let's dive in let's look at",
    "start": "60399",
    "end": "65880"
  },
  {
    "text": "the issues that step functions exist to solve now let me see if this thing works oh yeah I should I should say that I saw",
    "start": "65880",
    "end": "72119"
  },
  {
    "text": "on the program this was listed as a 200 level session but it's not this is a 300 level session and there will be code I",
    "start": "72119",
    "end": "79520"
  },
  {
    "text": "hope that's I hope I hope that's okay okay sounds like",
    "start": "79520",
    "end": "85840"
  },
  {
    "text": "it's okay okay so let's start here there you go there's Lambda function a stateless function living in the cloud",
    "start": "85840",
    "end": "92399"
  },
  {
    "text": "isn't that a great thing so I think we all got our minds expanded in 2014 when they announced that and uh what else",
    "start": "92399",
    "end": "98640"
  },
  {
    "text": "would you want I'm done um you might want a little more than that uh and I think the core idea",
    "start": "98640",
    "end": "105399"
  },
  {
    "text": "of a stateless function in the cloud driven by events remains a very strong idea and number of people in this room",
    "start": "105399",
    "end": "111600"
  },
  {
    "text": "suggests a few of you agree with me but you know in real world uh there aren't that many apps that only have one",
    "start": "111600",
    "end": "117479"
  },
  {
    "text": "function one entry point one mod module one component so I think it's going to be you know more typical to see multiple",
    "start": "117479",
    "end": "124719"
  },
  {
    "text": "functions in the cloud when we're trying to solve a real hard real world problem and in fact more than just a few a lot",
    "start": "124719",
    "end": "131319"
  },
  {
    "text": "of functions in the cloud you'll notice the arrows connecting them are different in color because uh there's more than",
    "start": "131319",
    "end": "137080"
  },
  {
    "text": "one way for functions to interact with each other now these are going to be real world applications and real world",
    "start": "137080",
    "end": "143720"
  },
  {
    "text": "applications have data and if you have data you probably have a database and I've noticed that with",
    "start": "143720",
    "end": "150280"
  },
  {
    "text": "Cloud native applications there is very very high usage of queuing and messaging",
    "start": "150280",
    "end": "155840"
  },
  {
    "text": "technology that gold thing is the icon for sqs which is another thing I happen to work on but there's lots of other",
    "start": "155840",
    "end": "162400"
  },
  {
    "text": "messaging technology as well and now I'm going to say something that may be in poor taste now I I realize that this is",
    "start": "162400",
    "end": "170360"
  },
  {
    "text": "the serverless track but they're still servers the world still does have servers and and and I think uh you know",
    "start": "170360",
    "end": "177720"
  },
  {
    "text": "those of us living in the serverless future should be tolerant of the fact that the world has servers and and deal",
    "start": "177720",
    "end": "182959"
  },
  {
    "text": "with them and you know it's worse than that because this is a cloud conference but sometimes those servers aren't in",
    "start": "182959",
    "end": "188640"
  },
  {
    "text": "the cloud they're just out there in a data center somewhere and so probably at some point you're going to have to talk",
    "start": "188640",
    "end": "194319"
  },
  {
    "text": "to them so I'm going to claim that I have now built up on the screen here a",
    "start": "194319",
    "end": "200159"
  },
  {
    "text": "picture of the real internals of a modern serverless applications application with the kinds of things you",
    "start": "200159",
    "end": "206920"
  },
  {
    "text": "might find in it okay so let's subtract all the parts and just leave the arrows",
    "start": "206920",
    "end": "212120"
  },
  {
    "text": "they're different colors as I said and and that's really the essence of what we're going to talk about here today is",
    "start": "212120",
    "end": "218360"
  },
  {
    "text": "you know how we actually what those arrows are how we actually coordinate and communicate with each other so",
    "start": "218360",
    "end": "224599"
  },
  {
    "text": "before we dive into the how of what we're going to do um let's talk about what people want to do now you may have",
    "start": "224599",
    "end": "232319"
  },
  {
    "text": "seen one or two of these slides in verner's keynote this morning um he stole them from me but that's okay uh so",
    "start": "232319",
    "end": "238680"
  },
  {
    "text": "I'm not going to talk about these right now because we're going to give each of these subjects a little love as we work our way through the presentation but I",
    "start": "238680",
    "end": "245480"
  },
  {
    "text": "think you know most people are going to say uhhuh when they see that I mean most people have wanted to run functions in sequence or in parallel or catch errors",
    "start": "245480",
    "end": "252840"
  },
  {
    "text": "or you know um run things for hours or wrote things to a function based on",
    "start": "252840",
    "end": "258000"
  },
  {
    "text": "what's going on none of these are terribly controversial subjects and speaking of verer I want to uh toss a",
    "start": "258000",
    "end": "265960"
  },
  {
    "text": "give a nod to another subject he invested some time in uh the 12 Factor app idea um for those of you who have",
    "start": "265960",
    "end": "272080"
  },
  {
    "text": "not read this essay please do um I'm not dogmatic and I don't insist that our",
    "start": "272080",
    "end": "277840"
  },
  {
    "text": "Junior Engineers actually chant these like mantras but I I do care a lot about",
    "start": "277840",
    "end": "283720"
  },
  {
    "text": "the questions the 12 Factor act uh app uh asks and I and I try and ensure that",
    "start": "283720",
    "end": "289520"
  },
  {
    "text": "people have at least thought about them and I want to focus in on on uh step six",
    "start": "289520",
    "end": "294560"
  },
  {
    "text": "and read out the last paragraph there which says in well architected application States state should be",
    "start": "294560",
    "end": "301039"
  },
  {
    "text": "stored in a stateful backing service uhuh that's what this is okay so I think",
    "start": "301039",
    "end": "308320"
  },
  {
    "text": "we've agreed that it's a good idea to deploy and coordinate multiple functions in order to get our job done and you",
    "start": "308320",
    "end": "315360"
  },
  {
    "text": "know we know that because people are doing it right now and let's talk for a couple of minutes about how they go about doing it so probably you know the",
    "start": "315360",
    "end": "322840"
  },
  {
    "text": "most obvious way to link Lambda functions together is to link them together into one great big binary and",
    "start": "322840",
    "end": "329120"
  },
  {
    "text": "call from one to the other good using good oldfashioned method dispatch and I'm not going to say this is a terrible",
    "start": "329120",
    "end": "334840"
  },
  {
    "text": "idea I mean if you look at the Zappa project it implements more or less all",
    "start": "334840",
    "end": "339919"
  },
  {
    "text": "of the Django framework or or actually uh any wsgi based python app as a",
    "start": "339919",
    "end": "345280"
  },
  {
    "text": "lambdaa function and that's fine it it it's a really cool project and I'm a fan but I think we can do better I I",
    "start": "345280",
    "end": "352960"
  },
  {
    "text": "actually am warmer to the idea of multiple independent Lambda functions in the in the cloud each of them doing one",
    "start": "352960",
    "end": "359880"
  },
  {
    "text": "thing well and dispatching to each other I think we get better modularity more of a microservices approach so so I'm I'm",
    "start": "359880",
    "end": "366319"
  },
  {
    "text": "not really crazy about this idea in the cases where you can avoid it uh being",
    "start": "366319",
    "end": "371720"
  },
  {
    "text": "independent tastes smells more like the future well I guess the next thing you could think about for coordination would",
    "start": "371720",
    "end": "377680"
  },
  {
    "text": "be using the good oldfashioned Lambda API because from one Lambda function you can obviously call another Lambda",
    "start": "377680",
    "end": "383160"
  },
  {
    "text": "function and chain them together that way um now the question arises am I going to make the synchronous or an A",
    "start": "383160",
    "end": "389479"
  },
  {
    "text": "synchronous call to the other Lambda function and I'm going to claim that if I make a synchronous call I might as",
    "start": "389479",
    "end": "394520"
  },
  {
    "text": "well just have linked them together at that point because you know the first is waiting for the seconds waiting for the thirds waiting for the fourth and so on",
    "start": "394520",
    "end": "400400"
  },
  {
    "text": "and I think that if you were going to do this you'd really want to use the asynchronous call that's more in the spirit of serverless anyhow you have a a",
    "start": "400400",
    "end": "406160"
  },
  {
    "text": "function it does something it exits and passes the workload on and that's okay people are doing that and getting okay",
    "start": "406160",
    "end": "412120"
  },
  {
    "text": "results but error handling and and retries and things like that start to get tricky when you call an an a a",
    "start": "412120",
    "end": "418680"
  },
  {
    "text": "Lambda function a synchronously it can be quite tricky to figure out you know did it run did it succeed did it fail",
    "start": "418680",
    "end": "425120"
  },
  {
    "text": "now people are doing this but they're having to build a bunch of scaffolding and infrastructure to make it work and it just seems like it's more work than",
    "start": "425120",
    "end": "431240"
  },
  {
    "text": "it than it ought to be um another approach that we're seeing a lot of maybe this is the most popular",
    "start": "431240",
    "end": "437520"
  },
  {
    "text": "approach I think um that's being used right now which is to use a database to",
    "start": "437520",
    "end": "443120"
  },
  {
    "text": "stash your your your state As you move through multiple functions to deal with an app once again I don't want to diss",
    "start": "443120",
    "end": "448879"
  },
  {
    "text": "this because people are doing it and and they're getting good results um and and it's not terrible but there's two",
    "start": "448879",
    "end": "454599"
  },
  {
    "text": "problems with this one is that you have to write the code to do it which is kind of boring non-productive non very",
    "start": "454599",
    "end": "460520"
  },
  {
    "text": "interesting code there's a deeper problem I think that we should worry about which is the impedance mismatch",
    "start": "460520",
    "end": "465800"
  },
  {
    "text": "one of the great things about about serverless and and Lambda is do you get this great scaling Behavior if I have a",
    "start": "465800",
    "end": "471520"
  },
  {
    "text": "throughput of so much and I suddenly need to do 10 times that much or 100 times that much MDA can do that it it",
    "start": "471520",
    "end": "477720"
  },
  {
    "text": "just runs more functions and I have discovered that with databases when they're running at this speed and",
    "start": "477720",
    "end": "483720"
  },
  {
    "text": "you suddenly ask them to run at 10 times that speed or more well they don't um",
    "start": "483720",
    "end": "489879"
  },
  {
    "text": "it's just the way databases are so so I think you're going to have an impedance mismatch there that could lead to a a",
    "start": "489879",
    "end": "495599"
  },
  {
    "text": "not happy ending the final way that I see people integrating functions together these",
    "start": "495599",
    "end": "500680"
  },
  {
    "text": "days is with q's once again that's the dsq icon",
    "start": "500680",
    "end": "505840"
  },
  {
    "text": "um I actually have a lot of time for this approach I think this is is a good Cloud native serverless tasting approach",
    "start": "505840",
    "end": "513240"
  },
  {
    "text": "um and and I've seen people get good results with it and and once again it there's nothing terrible about it but",
    "start": "513240",
    "end": "519880"
  },
  {
    "text": "once again it feels like more work than it should be because you have to own and maintain the cues you have to put the",
    "start": "519880",
    "end": "525360"
  },
  {
    "text": "messages in and take them out and then there's the issue of you know I do some work I I send it down the queue to the",
    "start": "525360",
    "end": "530600"
  },
  {
    "text": "next uh uh worker and suppose they blow up or get throttled or or something bad happens and I want to retry well once",
    "start": "530600",
    "end": "537519"
  },
  {
    "text": "again you're going to have to do a bunch of extra work to to engineer that and make that",
    "start": "537519",
    "end": "543000"
  },
  {
    "text": "happen so let's assume hypothetically that we wanted to build a service that would take care of all this stuff for",
    "start": "543000",
    "end": "549320"
  },
  {
    "text": "you um and uh let's talk about what our uh our musthaves would be now I think",
    "start": "549320",
    "end": "555920"
  },
  {
    "text": "all of these are non-controversial not to say blindingly obvious um but I want",
    "start": "555920",
    "end": "560959"
  },
  {
    "text": "to zero in on the last two we we we've shown that we can do all these things using existing Machinery so I think if",
    "start": "560959",
    "end": "567399"
  },
  {
    "text": "we're going to build a serverless coordination framework perhaps our top goal should be that it's easy I mean",
    "start": "567399",
    "end": "572839"
  },
  {
    "text": "this stuff is easy to talk about I want to run this function and that function I want to catch an error and retry I want",
    "start": "572839",
    "end": "578040"
  },
  {
    "text": "to run these three in parallel you know it's easy to think about it's easy to understand why shouldn't it be easy to",
    "start": "578040",
    "end": "583200"
  },
  {
    "text": "to just do and then the last thing I want to mention there is um something that that we really do need to focus on",
    "start": "583200",
    "end": "589079"
  },
  {
    "text": "more I so all these various ways that people are using to coordinate and integrate multiple functions tend to",
    "start": "589079",
    "end": "596040"
  },
  {
    "text": "have a failing when it comes to auditing and debugging and and and and and and there's no one place to go and look at",
    "start": "596040",
    "end": "602160"
  },
  {
    "text": "for the log and and see exactly what happened so I think that should be pretty important as we as we work",
    "start": "602160",
    "end": "607680"
  },
  {
    "text": "through this okay so enough Preamble there you go AWS state state functions",
    "start": "607680",
    "end": "614079"
  },
  {
    "text": "um announced today it is at right now generally available in five regions I was just looking at the graphs before I",
    "start": "614079",
    "end": "619800"
  },
  {
    "text": "came in here and uh it's start there people starting to run them so cool and",
    "start": "619800",
    "end": "624839"
  },
  {
    "text": "it offers multicolored boxes and arrows as a service a new paradigm we're going to be we're going to be in the Gartner",
    "start": "624839",
    "end": "631200"
  },
  {
    "text": "magic quadrant I bet you for for that one um so it's actually a fully managed",
    "start": "631200",
    "end": "636519"
  },
  {
    "text": "service that tracks and coordinates and manages application State and does all",
    "start": "636519",
    "end": "641680"
  },
  {
    "text": "the things we we were just talking about and is really easy to use and has a centralized audit Trail and scales down",
    "start": "641680",
    "end": "648519"
  },
  {
    "text": "to little oneoff shell script Replacements or up to billions of of",
    "start": "648519",
    "end": "654079"
  },
  {
    "text": "invocations and when I say billions I'm I'm not arm waving the predecessor product of this is actually in active",
    "start": "654079",
    "end": "660800"
  },
  {
    "text": "use inside Amazon both on the retail side and on the AWS side and as we speak",
    "start": "660800",
    "end": "666480"
  },
  {
    "text": "is currently running uh a billion State machines a week um so this is you know well debugged shaken down robust code",
    "start": "666480",
    "end": "673839"
  },
  {
    "text": "we're talking about here now for those of you who know about the aw existing",
    "start": "673839",
    "end": "679079"
  },
  {
    "text": "AWS service called Simple workflow um this service actually uses quite a bit",
    "start": "679079",
    "end": "684320"
  },
  {
    "text": "of the simple workflow back end but don't let that scare you it's not nearly as complicated it's really really easy",
    "start": "684320",
    "end": "690880"
  },
  {
    "text": "as I hope to prove to you in the rest of this talk so so what is this thing at the end of the day um let's go back and",
    "start": "690880",
    "end": "697200"
  },
  {
    "text": "quote from that 12 Factor app any data that needs to persist must be stored in a stateful backing service typically a",
    "start": "697200",
    "end": "704399"
  },
  {
    "text": "database and that's all this is really optimized for the problem of running distributed applications in the",
    "start": "704399",
    "end": "711839"
  },
  {
    "text": "cloud so so those boxes and arrows on the screen uh right now are actually",
    "start": "711839",
    "end": "716880"
  },
  {
    "text": "grabbed from the state step functions console and you may have noticed that only you know 5 minutes into this talk",
    "start": "716880",
    "end": "722760"
  },
  {
    "text": "we've seen a lot of boxes and arrows and nodes and arrows connecting them and I don't know about you but when I see",
    "start": "722760",
    "end": "728959"
  },
  {
    "text": "those things I think of State machines because I'm an old geek um and so if you",
    "start": "728959",
    "end": "734279"
  },
  {
    "text": "had a really bad time in third-year compai with with the state machine unit my sympathy and you know you might find",
    "start": "734279",
    "end": "740360"
  },
  {
    "text": "the rest of this talk a little tough because it's going to be State machines and state machines and more State machines um but personally I like State",
    "start": "740360",
    "end": "747600"
  },
  {
    "text": "machines a lot and and I've had really good experiences deploying them at various times in my career um and the",
    "start": "747600",
    "end": "754760"
  },
  {
    "text": "notion of making it anybody easy for anybody to use them to orchestrate serverless stuff makes me happy having",
    "start": "754760",
    "end": "760279"
  },
  {
    "text": "said that I'm to totally not going to spend any time diving into the theory of State machines or the math because this",
    "start": "760279",
    "end": "765560"
  },
  {
    "text": "is not a computer science class um I will note however that a craps table is",
    "start": "765560",
    "end": "771120"
  },
  {
    "text": "clearly a state machine if you think about it since we're in Vegas and where I'm staying over at the wind the room",
    "start": "771120",
    "end": "776399"
  },
  {
    "text": "lights are a very complex State machine um anyhow so this is an Amazon service",
    "start": "776399",
    "end": "783320"
  },
  {
    "text": "and as a result it has an API and a CLI and all that stuff and and we'll talk about that but I thought it would be",
    "start": "783320",
    "end": "788959"
  },
  {
    "text": "easier to to start with some actual concrete use cases and examples and let's start with the simplest imaginable",
    "start": "788959",
    "end": "795399"
  },
  {
    "text": "use case which is I want to run one function and then I want to run another function so the customer who's doing",
    "start": "795399",
    "end": "801160"
  },
  {
    "text": "this they're called food Panda and they are in the takeout meal delivery business and focusing on the developing",
    "start": "801160",
    "end": "807440"
  },
  {
    "text": "world and they're really making great use of of cloud infrastructure uh they've been in the step functions beta",
    "start": "807440",
    "end": "813440"
  },
  {
    "text": "their problem is deceptively simple they take orders for meals they have deals with meal providers and trucks and they",
    "start": "813440",
    "end": "820519"
  },
  {
    "text": "get the meals to the hungry which means you know as a subtask they have to solve the traveling salesman problem which is",
    "start": "820519",
    "end": "826279"
  },
  {
    "text": "NP complete but they're smart um so they want to do most of this with",
    "start": "826279",
    "end": "832839"
  },
  {
    "text": "Lambda functions so this is the actual State machine that they wrote to solve",
    "start": "832839",
    "end": "838320"
  },
  {
    "text": "this problem and most of the states here are are executed by Lambda tasks but I want to",
    "start": "838320",
    "end": "844399"
  },
  {
    "text": "zero in on one small part of the problem in in the middle there where they run their assignment code and then dispatch",
    "start": "844399",
    "end": "849639"
  },
  {
    "text": "a vehicle which is an obvious basic thing that many people want to do all the time run this Lambda then that Lambda and and I also want to zero in on",
    "start": "849639",
    "end": "856560"
  },
  {
    "text": "just two states because that way I can fit it on a slide um so here's an actual",
    "start": "856560",
    "end": "862720"
  },
  {
    "text": "shot from the uh from the step functions console um and and I don't really feel",
    "start": "862720",
    "end": "868399"
  },
  {
    "text": "guilty at all about investing time in this moronically simple sequencing problem because I think it's an important use case and maybe at the end",
    "start": "868399",
    "end": "874600"
  },
  {
    "text": "of the day the single most common use case for a multi-function approach so um",
    "start": "874600",
    "end": "880440"
  },
  {
    "text": "this is something that sounds easy and it should be easy so there's a visual rendition of the state machine at the top half an adjacent expression of it on",
    "start": "880440",
    "end": "887680"
  },
  {
    "text": "the bottom so this is an actual screen grab from the state function I already said that the picture is self-explanatory so let's look at the",
    "start": "887680",
    "end": "894440"
  },
  {
    "text": "Json a state machine's top level um has a structure called states which contains",
    "start": "894440",
    "end": "900480"
  },
  {
    "text": "well the states and it has a field called start at that says where you should start I feel like an idiot saying",
    "start": "900480",
    "end": "907320"
  },
  {
    "text": "those things they're so obvious um so in this particular case you start at the Run assignment algorithm step and then",
    "start": "907320",
    "end": "914120"
  },
  {
    "text": "you do that and you proceed to the dispatch vehicle step and you can see",
    "start": "914120",
    "end": "919199"
  },
  {
    "text": "the next field in the first state that points at the second um and of course you do this with a Lambda function okay",
    "start": "919199",
    "end": "926360"
  },
  {
    "text": "so it's easy enough step functions uh and and if you look in the second state you can see end is true so that's how it",
    "start": "926360",
    "end": "931519"
  },
  {
    "text": "knows it's the end of the work of the state machine um so State step functions",
    "start": "931519",
    "end": "937040"
  },
  {
    "text": "goes through the states and executes each and moves on until it gets to the end obviously it can get way fancier",
    "start": "937040",
    "end": "942319"
  },
  {
    "text": "than this but let's use this one to dive into how these things work so I didn't actually include um food Panda's actual",
    "start": "942319",
    "end": "947639"
  },
  {
    "text": "Lambda function I I got rid of those and substituted demoware and in fact if you look closely it's the same function both",
    "start": "947639",
    "end": "954319"
  },
  {
    "text": "in both places and here it is I hope you guys can read uh node code um so this",
    "start": "954319",
    "end": "960040"
  },
  {
    "text": "all this function really does is tweet to prove that it that that it ran um so ignore the first couple of lines and",
    "start": "960040",
    "end": "965240"
  },
  {
    "text": "let's start here so in any state you get input which is a Json blob and it assumes that this has a field called",
    "start": "965240",
    "end": "971440"
  },
  {
    "text": "input list and it assumes that this value of this field is an array of strings so it pops off the first",
    "start": "971440",
    "end": "978800"
  },
  {
    "text": "string and then it goes and tweets that and assuming that it all worked it uh",
    "start": "978800",
    "end": "984720"
  },
  {
    "text": "passes on to the next state um that list that it pop the first thing off okay so",
    "start": "984720",
    "end": "991120"
  },
  {
    "text": "I was going to do live demos but I'm too chicken so I'm going to show you a screencast I made a couple of days days",
    "start": "991120",
    "end": "996240"
  },
  {
    "text": "ago instead so here's the state machines console with a couple of State machines on it uh pardon me the step functions",
    "start": "996240",
    "end": "1002240"
  },
  {
    "text": "console with a couple of State machines on it and I'm going to run that one called food Panda and without further Ado I'm going to execute it and remember",
    "start": "1002240",
    "end": "1010279"
  },
  {
    "text": "it wanted there to be a field named uh input list um pardon my slow typing two",
    "start": "1010279",
    "end": "1016319"
  },
  {
    "text": "days ago and it wanted the value of input list to be uh a string array so",
    "start": "1016319",
    "end": "1022000"
  },
  {
    "text": "let's pop a couple of strings in there um yeah I was typing badly two days ago",
    "start": "1022000",
    "end": "1027918"
  },
  {
    "text": "um H happy Thursday in Las Vegas but I said I typed this uh Tuesday so having provided the input let's go and run that",
    "start": "1027919",
    "end": "1034918"
  },
  {
    "text": "puppy um as soon as I do that it draws a picture the first thing is colored blue",
    "start": "1034919",
    "end": "1040360"
  },
  {
    "text": "it means it's executing now that's a bit of a lie it's already finished by now it's just a couple of Lambda functions but we're waiting for the console to",
    "start": "1040360",
    "end": "1046360"
  },
  {
    "text": "update now the console will update and there it is and it shows that both of them ran and completed successfully and",
    "start": "1046360",
    "end": "1051799"
  },
  {
    "text": "turned green now if you look at the bottom there's that audit Trail I was telling you about so it walks you through what happened you know the state",
    "start": "1051799",
    "end": "1058240"
  },
  {
    "text": "machine started it entered this state it scheduled the Lambda the Lambda ran the Lambda succeeded the task exited the",
    "start": "1058240",
    "end": "1064280"
  },
  {
    "text": "next and of course this is a standard AWS kind of History format there's an API you can you can fetch it um let's go",
    "start": "1064280",
    "end": "1072200"
  },
  {
    "text": "back up come on Tim two days ago I finished talking about that yeah let's go back up and uh look at I'm going to",
    "start": "1072200",
    "end": "1078120"
  },
  {
    "text": "click on on that first state and then I'm going to go over on the right there and these are debugging AIDS so I can",
    "start": "1078120",
    "end": "1083240"
  },
  {
    "text": "see there was the input to the whole um the whole state machine and if I go down and there's the output from the whole",
    "start": "1083240",
    "end": "1088520"
  },
  {
    "text": "state machine if I move down and click on the um the details for the step I can see that it's input was well what I",
    "start": "1088520",
    "end": "1095559"
  },
  {
    "text": "diped in and its output was the same only with the first thing piped off so you can see how this this sort of works",
    "start": "1095559",
    "end": "1102360"
  },
  {
    "text": "now we should actually not take it on faith see let's go over to Twitter and refresh it and make the you make care",
    "start": "1102360",
    "end": "1108600"
  },
  {
    "text": "about thing go away and there are the first uh happy Thursday from Vegas um",
    "start": "1108600",
    "end": "1114600"
  },
  {
    "text": "well with a Google Cloud ad in between so cute",
    "start": "1114600",
    "end": "1119480"
  },
  {
    "text": "um anyhow let's go back here so um now what I just did was show you",
    "start": "1120039",
    "end": "1126799"
  },
  {
    "text": "running a state machine in the console which is not a crazy thing to do but in fact we don't really do most of our work",
    "start": "1126799",
    "end": "1132360"
  },
  {
    "text": "that way you know we the real truth is the API behind that so so let's talk about the API a little bit so the API",
    "start": "1132360",
    "end": "1140159"
  },
  {
    "text": "and there's this isn't the whole API there's some more stuff and I'm not going to dive into the details of methods and arguments and so on but I'm",
    "start": "1140159",
    "end": "1146280"
  },
  {
    "text": "going to give you a 50,000 foot view so there's some more API that I'll show you later but this is everything this is everything you need to uh run what I",
    "start": "1146280",
    "end": "1153440"
  },
  {
    "text": "just showed you so the first thing you do is you're going to create a state machine which you define in Json DSL um",
    "start": "1153440",
    "end": "1159080"
  },
  {
    "text": "let's take a quick side trip over to the console and so here's the create State machine screen and you can see that it's",
    "start": "1159080",
    "end": "1164120"
  },
  {
    "text": "got a bunch of blueprints just like Lambda so you can there's a bunch of pre-cooked State machines you can take and and",
    "start": "1164120",
    "end": "1169960"
  },
  {
    "text": "edit I'm going back to the API so the you know probably the most important API",
    "start": "1169960",
    "end": "1175600"
  },
  {
    "text": "call is the one to run a state machine in the cloud and that you give that a Jason blob and it gives you an execution",
    "start": "1175600",
    "end": "1181400"
  },
  {
    "text": "ID which is a handle that you can use and use to describe the execution get its audit Trail kill it if need be and",
    "start": "1181400",
    "end": "1187960"
  },
  {
    "text": "there's obviously the standard apis to list your state machines and list the executions in case it's not obvious you",
    "start": "1187960",
    "end": "1193760"
  },
  {
    "text": "can have hundreds or thousands or any number at all of executions of the same state machine machine live at any one",
    "start": "1193760",
    "end": "1199840"
  },
  {
    "text": "time and that's what we'd expect now there'll be one-offs a few cases where you used to write a shell script but",
    "start": "1199840",
    "end": "1205120"
  },
  {
    "text": "it's just easier to do this and and orchestrate your lambas this way um but but you know there's I'm sure there's going to be people who have production",
    "start": "1205120",
    "end": "1211320"
  },
  {
    "text": "ones that run hundreds of thousands wide and I know that because that we're doing that actually inside uh Amazon now let's",
    "start": "1211320",
    "end": "1217799"
  },
  {
    "text": "go back to that first step where we create a state Machine by um uploading a Json DSL so there's the specification of",
    "start": "1217799",
    "end": "1226480"
  },
  {
    "text": "the DSL and there's it URL down there at the bottom of the screen States language. netec oops pardon me that's",
    "start": "1226480",
    "end": "1233080"
  },
  {
    "text": "wrong it's actually spec. HTML uh pardon me States language. nets.",
    "start": "1233080",
    "end": "1239039"
  },
  {
    "text": "HTML um and it's a standard easy to read uh specification with a nice friendly",
    "start": "1239039",
    "end": "1244640"
  },
  {
    "text": "license at the top um why is it in Json I mean it could have been yaml or XML or",
    "start": "1244640",
    "end": "1250600"
  },
  {
    "text": "ion or we could have invented a new syntax and I just don't want to have that argument really um Json you know is",
    "start": "1250600",
    "end": "1257039"
  },
  {
    "text": "so widely implemented these days that is kind of the thing you should use unless there's a really good reason you shouldn't use it um uh and it has the",
    "start": "1257039",
    "end": "1264880"
  },
  {
    "text": "advantage that I can show you examples and you can read them without you know ever having seen this language before which I think is a pretty big deal um I",
    "start": "1264880",
    "end": "1271799"
  },
  {
    "text": "I I should say however that I found there was a pretty uh close uh correspondence between um uh what I",
    "start": "1271799",
    "end": "1278760"
  },
  {
    "text": "wanted what we needed to have in the states language and what Jason can do um having said that I personally hate hand",
    "start": "1278760",
    "end": "1284960"
  },
  {
    "text": "itting Jason I can never ever get the commas right um and so I wouldn't be surprised if there were higher order",
    "start": "1284960",
    "end": "1291840"
  },
  {
    "text": "ways of specifying State machines that compile down to this this may end up being the the state state machine",
    "start": "1291840",
    "end": "1297080"
  },
  {
    "text": "assembler language now I see that a lot of you are now looking at your laptops having clicked on that URL and that's fine go",
    "start": "1297080",
    "end": "1305200"
  },
  {
    "text": "ahead and read it see if I care um but but I'm going to show some code that's not in there um so it turns out that",
    "start": "1305200",
    "end": "1311840"
  },
  {
    "text": "when you upload a state machine uh the step step function service runs a syntax Checker that throws it back at you with",
    "start": "1311840",
    "end": "1316880"
  },
  {
    "text": "a 400 code if if you fat fingered it and that's really really annoying particularly when you're trying to",
    "start": "1316880",
    "end": "1322640"
  },
  {
    "text": "develop a state machine so there's a ruby gem called State lint what a great name that you can go and download and",
    "start": "1322640",
    "end": "1330200"
  },
  {
    "text": "use to on your desktop or laptop or wherever to um check it uh the",
    "start": "1330200",
    "end": "1335559"
  },
  {
    "text": "construction of that validator is actually uh a little bit interesting and does not rely on on Json schema uh I",
    "start": "1335559",
    "end": "1342200"
  },
  {
    "text": "wrote a Blog on it my blog's easy to find if you know my name anyhow uh let's go back to some of the things we can do",
    "start": "1342200",
    "end": "1347600"
  },
  {
    "text": "with state machines uh to build serverless applications so we talked about running them in sequence the next",
    "start": "1347600",
    "end": "1353039"
  },
  {
    "text": "thing I want to do is uh route execution to a particular State machine based on",
    "start": "1353039",
    "end": "1359520"
  },
  {
    "text": "the data that I'm dealing with common thing to want to do and the customer we tal that that you know uh uh did this",
    "start": "1359520",
    "end": "1365559"
  },
  {
    "text": "work in this case is called the take they are a uh a movie marketing company",
    "start": "1365559",
    "end": "1370880"
  },
  {
    "text": "so if you like the coat that Matt Damon's wearing in in in in a movie you can go to them and and they'll help you",
    "start": "1370880",
    "end": "1375960"
  },
  {
    "text": "buy it um and they uh they they get requests and they wrote them to a bunch",
    "start": "1375960",
    "end": "1381240"
  },
  {
    "text": "of different retailers only one of whom is Amazon oh well and um then they also",
    "start": "1381240",
    "end": "1386480"
  },
  {
    "text": "have a screen scraping fa facility and so in order to do what they wanted to do they wrote this state machine uh some of",
    "start": "1386480",
    "end": "1393200"
  },
  {
    "text": "those boxes are Lambda functions it it's all pretty straightforward now the interesting part for what I want to talk about now is that box at the top of the",
    "start": "1393200",
    "end": "1400039"
  },
  {
    "text": "screen that is labeled Choice state that decides which way to branch and which Lambda function to call so",
    "start": "1400039",
    "end": "1406440"
  },
  {
    "text": "let's dive straight in and look at the on for that um I think it's pretty",
    "start": "1406440",
    "end": "1411919"
  },
  {
    "text": "self-explanatory uh this particular choice has five branches now if you look closely at the choices field um it uh",
    "start": "1411919",
    "end": "1419320"
  },
  {
    "text": "it's an array so it works like a case statement in the programming language it goes through the elements of the array",
    "start": "1419320",
    "end": "1424720"
  },
  {
    "text": "uh trying to until it finds one that matches and then follows the next pointer and the way it does it is it's",
    "start": "1424720",
    "end": "1431000"
  },
  {
    "text": "got this field called variable in there and the value of variable is a Json path Json path is is a widely implemented",
    "start": "1431000",
    "end": "1437440"
  },
  {
    "text": "popular thing for pulling data out of Json blobs um and it turns out that uh",
    "start": "1437440",
    "end": "1443760"
  },
  {
    "text": "in this case uh for the choice in the first Branch it looks at the variable field and if the value is screen scraped",
    "start": "1443760",
    "end": "1450679"
  },
  {
    "text": "you can see where it goes I don't think this requires that much explanation I should say that um in this case we're",
    "start": "1450679",
    "end": "1456360"
  },
  {
    "text": "doing string equals but we have a full Suite of comparators there's you know numeric and Boolean and time stamp time",
    "start": "1456360",
    "end": "1462080"
  },
  {
    "text": "SP is is nice to have and it's got greater than and less than and greater equal all the stuff you'd expect and",
    "start": "1462080",
    "end": "1467919"
  },
  {
    "text": "it's got and and or and not so you could build hideous deeply nested booleans that I would have no hope of fitting on",
    "start": "1467919",
    "end": "1474000"
  },
  {
    "text": "a slide here so you're not going to see it sorry um so I think it's pretty obvious how this works I want to",
    "start": "1474000",
    "end": "1480080"
  },
  {
    "text": "emphasize once again this notion of passing data along from one state to the next and acting based on what that is",
    "start": "1480080",
    "end": "1486640"
  },
  {
    "text": "that represents the transient state of your whole application that's in progress so generally speaking each",
    "start": "1486640",
    "end": "1492760"
  },
  {
    "text": "state gets some input which can update or replace and then passes it on to the next state let's talk about another",
    "start": "1492760",
    "end": "1498799"
  },
  {
    "text": "thing you might want to do um I want to try I want to retry functions here's another uh uh uh service now I'm",
    "start": "1498799",
    "end": "1505799"
  },
  {
    "text": "speaking for myself my software always works first time and never ever fails so it never ever needs to be retried but in",
    "start": "1505799",
    "end": "1512120"
  },
  {
    "text": "the cloud we have dependencies and I found that when you you're trying to dodge the blame for something",
    "start": "1512120",
    "end": "1517919"
  },
  {
    "text": "dependencies are are very helpful in that and in this particular uh case they have a dependency on a restful API that",
    "start": "1517919",
    "end": "1524960"
  },
  {
    "text": "you know mysteriously just sometimes fails hard to believe that such a thing could happen I know but you know in the",
    "start": "1524960",
    "end": "1530200"
  },
  {
    "text": "real world it just might fortunately it doesn't fail that often so let's just dive into the Json and see what happens",
    "start": "1530200",
    "end": "1536520"
  },
  {
    "text": "um so in this particular case they've only got one state in the state machine called callout and it's got a retry",
    "start": "1536520",
    "end": "1545480"
  },
  {
    "text": "field and it says that if you get a handled error which is what this particular Lambda happens to emit uh",
    "start": "1545480",
    "end": "1552399"
  },
  {
    "text": "keep retrying as many as 10 times if necessary there are some more arguments I could throw at this and and if you",
    "start": "1552399",
    "end": "1557919"
  },
  {
    "text": "look closely you can see that the retry is a variable field square brackets there so you can have catches for lots",
    "start": "1557919",
    "end": "1564000"
  },
  {
    "text": "of different errors with different retry policies for each um so let's actually run this",
    "start": "1564000",
    "end": "1571360"
  },
  {
    "text": "rather than talk about it so back to the States machine conso and this time two days ago I ran this other uh State",
    "start": "1571360",
    "end": "1578000"
  },
  {
    "text": "machine called rful call out let's run it and um in this particular case I'm",
    "start": "1578000",
    "end": "1583320"
  },
  {
    "text": "not using the input so let's just run it and there it goes so it's blue because it's running and if we look at the auto",
    "start": "1583320",
    "end": "1589520"
  },
  {
    "text": "Trail we can see that the Lambda function was started but oops it failed give it a minute to um run and look it",
    "start": "1589520",
    "end": "1597399"
  },
  {
    "text": "took only two tries um yes I did some other screencasts in which it failed 11 times first but um this is the one I'm",
    "start": "1597399",
    "end": "1603520"
  },
  {
    "text": "showing you um so once again I want to emphasize that that audit Trail at the",
    "start": "1603520",
    "end": "1609640"
  },
  {
    "text": "at at the bottom which showed you exactly what happened what failed how often thoroughly Gable um State machines",
    "start": "1609640",
    "end": "1615679"
  },
  {
    "text": "are your friends so we've talked about running State machines in sequence and",
    "start": "1615679",
    "end": "1621120"
  },
  {
    "text": "branching Based on data and and dealing with errors so what else so Lambda",
    "start": "1621120",
    "end": "1626440"
  },
  {
    "text": "functions are stateless functions in the cloud and whenever I think about stateless I think about parallel I want",
    "start": "1626440",
    "end": "1633960"
  },
  {
    "text": "to run them side by side so here's another uh customer who had an interesting problem um who uh they want",
    "start": "1633960",
    "end": "1640640"
  },
  {
    "text": "to have their customers take a picture of of a thing on their product and send it in and to enter uh survey contest and",
    "start": "1640640",
    "end": "1649080"
  },
  {
    "text": "they uh they want to OCR optical character recognition on the picture the customer sends in and and and process",
    "start": "1649080",
    "end": "1655640"
  },
  {
    "text": "that now anybody who's ever dealt with OCR Services knows that they can be a little bit chancy so what they want to",
    "start": "1655640",
    "end": "1661039"
  },
  {
    "text": "do is actually send it off to three different OCR services in parallel and get uh oh there's a picture of what they",
    "start": "1661039",
    "end": "1668000"
  },
  {
    "text": "do and and and and get the get the best one back uh get them all back and pick the best one and go forward on that",
    "start": "1668000",
    "end": "1673799"
  },
  {
    "text": "basis so there are three and of course they don't want to do this in sequences the customer sitting there waiting so they they want to do all three of these",
    "start": "1673799",
    "end": "1679840"
  },
  {
    "text": "in parallel so there are three branches each with a couple of States now it turned I don't think that's hard to",
    "start": "1679840",
    "end": "1686000"
  },
  {
    "text": "understand it turns out that the go1 go2 and go3 are the states that actually",
    "start": "1686000",
    "end": "1691640"
  },
  {
    "text": "send the image off for OCR and furthermore it turns out they all use the same Lambda function which knows how",
    "start": "1691640",
    "end": "1697720"
  },
  {
    "text": "to send something off get the OCR result back and see whether it likes it or not um and so the prep States prep one prep",
    "start": "1697720",
    "end": "1704960"
  },
  {
    "text": "two and prep three are just to set up the each of Lambda function states to point off to the right um vendor OCR",
    "start": "1704960",
    "end": "1711679"
  },
  {
    "text": "vendor so to make that easier to understand let's just dive into the Json and have a look so what we have here is",
    "start": "1711679",
    "end": "1718559"
  },
  {
    "text": "a parallel State one of the things that St that step functions comes with and a",
    "start": "1718559",
    "end": "1723760"
  },
  {
    "text": "parallel state will have multiple branches as you saw on the slide before I could only fit the left side branch into the slide here and so this thing",
    "start": "1723760",
    "end": "1730880"
  },
  {
    "text": "this and each branch is is a tiny little self-contained State machine with its own set of states and and and start",
    "start": "1730880",
    "end": "1736440"
  },
  {
    "text": "pointer um um and the first state in this one is called prep one and it's not a task it's just a a pass which is a",
    "start": "1736440",
    "end": "1743200"
  },
  {
    "text": "noop the uh the be the name being a call out to python for the pythonistas in the crowd um and all it really does is uh",
    "start": "1743200",
    "end": "1751080"
  },
  {
    "text": "sticks some Json in the output so a past State can set up the Json so that when",
    "start": "1751080",
    "end": "1756559"
  },
  {
    "text": "the uh the the next state the Goan state is called the it's Lambda function will",
    "start": "1756559",
    "end": "1762120"
  },
  {
    "text": "get an input saying OCR provider one now the key KN among you will notice that the actual function used was the same",
    "start": "1762120",
    "end": "1768000"
  },
  {
    "text": "one I used before uh to tweet so if I did run this thing you'd see three tweets almost exactly at the same time",
    "start": "1768000",
    "end": "1774279"
  },
  {
    "text": "uh saying OCR provider one provider two and provider three um so I think",
    "start": "1774279",
    "end": "1780600"
  },
  {
    "text": "parallels a really big deal in state machines and serverless applications because you know that's what lambda's built to do I would be unsurprised if we",
    "start": "1780600",
    "end": "1787960"
  },
  {
    "text": "had customers running monster State machines that had thousands of parallel executions potentially with nested",
    "start": "1787960",
    "end": "1794760"
  },
  {
    "text": "States each with hundreds of parallel executions I think that's a perfectly natural thing to want to",
    "start": "1794760",
    "end": "1800760"
  },
  {
    "text": "do now I'm going to keep banging this drum because I think it's important I'm assuming you've noticed a pattern here",
    "start": "1800760",
    "end": "1807200"
  },
  {
    "text": "which is that step functions is all about managing application state in the cloud now a large part of your",
    "start": "1807200",
    "end": "1812880"
  },
  {
    "text": "application State lives in your own databases and cues and so on but the actual transient state that we use to",
    "start": "1812880",
    "end": "1819960"
  },
  {
    "text": "track the progress of a single task or single request or single job through your distributed serverless application",
    "start": "1819960",
    "end": "1827000"
  },
  {
    "text": "is captured here it's captured in these Blobs of Json that pass from state to",
    "start": "1827000",
    "end": "1832399"
  },
  {
    "text": "state so the basic idea and in fact the way we do it is the same way that you guys have been doing it yourselves we",
    "start": "1832399",
    "end": "1838399"
  },
  {
    "text": "stash it in a database and and and and persist it that way it's just we offer that as a service so you don't have to",
    "start": "1838399",
    "end": "1844600"
  },
  {
    "text": "um the basic idea is that a state machine execution has an input which is a Json blob um now in another life I'm",
    "start": "1844600",
    "end": "1851919"
  },
  {
    "text": "the editor of thef Json RFC so you'll allow me to be a little bit pedantic here it turns turns out that the input",
    "start": "1851919",
    "end": "1859200"
  },
  {
    "text": "to a state machine to be exactly correct is what's called a Json text now for",
    "start": "1859200",
    "end": "1864559"
  },
  {
    "text": "those of you who are Json weenies that means that it doesn't have to be an object or or an array it can just be",
    "start": "1864559",
    "end": "1870480"
  },
  {
    "text": "like a number or a string with quotes around it or true or false or null those",
    "start": "1870480",
    "end": "1875600"
  },
  {
    "text": "are all perfectly good Json texts and can be and routinely should be passed along between",
    "start": "1875600",
    "end": "1881679"
  },
  {
    "text": "states um anyhow the state machine has an input text and that becomes the input",
    "start": "1881679",
    "end": "1886840"
  },
  {
    "text": "to the first state and the output of the first state is then passed to the second state and so on and eventually you get",
    "start": "1886840",
    "end": "1892320"
  },
  {
    "text": "to the end and the output of the last state becomes the output of the whole state machine that's not complicated and",
    "start": "1892320",
    "end": "1898320"
  },
  {
    "text": "hard to understand now it turns out that it's a little more complex than that because sometimes you don't want to feed",
    "start": "1898320",
    "end": "1904919"
  },
  {
    "text": "the whole blob of state that's going through to your Lambda function you just want to feed some information let me",
    "start": "1904919",
    "end": "1910120"
  },
  {
    "text": "make that concrete by showing you an example so suppose I have a Lambda that can add up an array of numbers that's",
    "start": "1910120",
    "end": "1917519"
  },
  {
    "text": "all it can do okay and I have a task State there in the middle but the input to this state is a nice little Json",
    "start": "1917519",
    "end": "1925240"
  },
  {
    "text": "object with you know a title and and another field which is the array of numbers and so what you can do is in the",
    "start": "1925240",
    "end": "1930720"
  },
  {
    "text": "specification of the state you can say input path what that means is that it",
    "start": "1930720",
    "end": "1935760"
  },
  {
    "text": "just pulls out the array of numbers and the Lambda function all it ever sees is the square bracket 3 comma four close",
    "start": "1935760",
    "end": "1941880"
  },
  {
    "text": "square bracket um and which is what it knows how to handle um",
    "start": "1941880",
    "end": "1948320"
  },
  {
    "text": "uh Json path is is if you haven't seen it before it's really simple it's really easy there's implementations in every programming language go check it out now",
    "start": "1948320",
    "end": "1955720"
  },
  {
    "text": "there are some Corner cases here now you notice in in the the machines I showed you so far there weren't any input paths",
    "start": "1955720",
    "end": "1960880"
  },
  {
    "text": "and if you don't provide an input path well the default is it just passes the whole thing whatever came into the state to the Json function sometimes you're",
    "start": "1960880",
    "end": "1967399"
  },
  {
    "text": "going to want to run a uh to the Lambda function sometimes you're going to want to run a function strictly for side",
    "start": "1967399",
    "end": "1972639"
  },
  {
    "text": "effects to update a a database field or something like that so you can arrange for it not to have any put at all you just say input uh input path nil and it",
    "start": "1972639",
    "end": "1979960"
  },
  {
    "text": "won't it'll just get an empty object um and for those of you who really are are expert at Json path you will know that",
    "start": "1979960",
    "end": "1986799"
  },
  {
    "text": "you can actually have a Json path that produces multiple outputs and if you do that we wrap square brackets around it",
    "start": "1986799",
    "end": "1992200"
  },
  {
    "text": "and hand a single Json array to the to the to the task so this is just book bookkeeping",
    "start": "1992200",
    "end": "1998159"
  },
  {
    "text": "but I think it hits actually a pretty useful 8020 point so I've talked about the stuff coming into a state now let's",
    "start": "1998159",
    "end": "2004720"
  },
  {
    "text": "talk about the stuff going out of a state so let's go back to that same example suppose that Lambda function",
    "start": "2004720",
    "end": "2010919"
  },
  {
    "text": "that knows how to add arrays of numbers uh it just produces a single number as output so in this particular case its",
    "start": "2010919",
    "end": "2017399"
  },
  {
    "text": "output would just be the Single Character seven which is a perfectly fine Json text but we don't want to",
    "start": "2017399",
    "end": "2023639"
  },
  {
    "text": "throw away all our input and just have seven be the output so there's another field here called result path and that",
    "start": "2023639",
    "end": "2029799"
  },
  {
    "text": "says take the input and then take the output from the Lambda function from the",
    "start": "2029799",
    "end": "2034960"
  },
  {
    "text": "task and stick it into the input at that Json path and so you can see what the output the output of the state is at the",
    "start": "2034960",
    "end": "2041000"
  },
  {
    "text": "bottom right so we've pulled the array out of the input raw input we fed it to",
    "start": "2041000",
    "end": "2046080"
  },
  {
    "text": "the Lambda function we've taken the output from the Lambda function and we've jammed it into the input State and",
    "start": "2046080",
    "end": "2051280"
  },
  {
    "text": "passed that on to the next state in the state machine once again uh not all that",
    "start": "2051280",
    "end": "2056440"
  },
  {
    "text": "sophisticated but it hits a a I think a super useful 8020 Point um having said",
    "start": "2056440",
    "end": "2061560"
  },
  {
    "text": "that I I wouldn't be terribly surprised if sometimes State machines have lambdas that are only there to rearrange the J",
    "start": "2061560",
    "end": "2067079"
  },
  {
    "text": "and get it ready for the for the next date but I've actually seen this pattern I saw one customer had a thing where",
    "start": "2067079",
    "end": "2073040"
  },
  {
    "text": "they put a just a very little object with just the customer ID and at the top then they successively enriched it by",
    "start": "2073040",
    "end": "2078480"
  },
  {
    "text": "putting in account numbers and um phone numbers and email addresses and so on",
    "start": "2078480",
    "end": "2083878"
  },
  {
    "text": "with just this style of computing as they pass through the through the state machine once again there are some Corner",
    "start": "2083879",
    "end": "2089440"
  },
  {
    "text": "cases um if you don't provide a result path like I hadn't in any of the state machines I've showed you so far um the",
    "start": "2089440",
    "end": "2097240"
  },
  {
    "text": "output from the task just becomes the output from the state um you can also arrange to have it just thrown away once",
    "start": "2097240",
    "end": "2103560"
  },
  {
    "text": "again if you're just you know iner side effects um and you're not allowed to have plural Json paths in this not",
    "start": "2103560",
    "end": "2110920"
  },
  {
    "text": "acceptable okay um that's enough about bookkeeping and data flowing through but",
    "start": "2110920",
    "end": "2116960"
  },
  {
    "text": "let's go back to some more customer situations and and how they used State",
    "start": "2116960",
    "end": "2122160"
  },
  {
    "text": "machines to address them gosh I'm running fast going to be lots of time at the end this is a simple service",
    "start": "2122160",
    "end": "2127800"
  },
  {
    "text": "um let's talk about uh TR catch finally um you know every programming language",
    "start": "2127800",
    "end": "2133119"
  },
  {
    "text": "in the world has TR catch finally and uh you know you've already seen a retry",
    "start": "2133119",
    "end": "2139280"
  },
  {
    "text": "when I retried that Lambda function until it worked but you know you need more than that you need to say try doing",
    "start": "2139280",
    "end": "2144440"
  },
  {
    "text": "this if it blows up well do go do that instead and no matter what happens at the end of the day do this and and of",
    "start": "2144440",
    "end": "2150079"
  },
  {
    "text": "course you could do that in your um in your uh in your Lambda function in",
    "start": "2150079",
    "end": "2158040"
  },
  {
    "text": "this particular case the the customer who's doing this is O pardon me I missed",
    "start": "2158040",
    "end": "2163400"
  },
  {
    "text": "a slide there oh I guess",
    "start": "2163400",
    "end": "2172520"
  },
  {
    "text": "yeah huh okay uh I missed there's the slides being skipped over but it's not that important so the customer here is a",
    "start": "2174119",
    "end": "2180160"
  },
  {
    "text": "customer called out systems and they provide a a platform as a service uh uh service and they really care a lot about",
    "start": "2180160",
    "end": "2187920"
  },
  {
    "text": "reliability and so they care a lot about try catch fail and and resisting errors when they happen so this is the state",
    "start": "2187920",
    "end": "2194160"
  },
  {
    "text": "machine uh out systems that they built to implement this this one particular task they needed to accomplish as you",
    "start": "2194160",
    "end": "2200119"
  },
  {
    "text": "can see it it stretches out a bit and gets a little bit complicated and it has a lot of error handling because anybody",
    "start": "2200119",
    "end": "2205560"
  },
  {
    "text": "who's in the platform as a service business knows you know reliability is is is is something you you really have",
    "start": "2205560",
    "end": "2211280"
  },
  {
    "text": "to care about a lot so uh this is a serious State machine that does some heavy L lifting and a lot of of TR catch",
    "start": "2211280",
    "end": "2218040"
  },
  {
    "text": "finally now you could say that you know in in JavaScript or Java or whatever you have the programming idioms you need to",
    "start": "2218040",
    "end": "2223760"
  },
  {
    "text": "do TR catch finally so why don't you just do your error handling right there inside your Lambda function and you know",
    "start": "2223760",
    "end": "2229640"
  },
  {
    "text": "you can there's nothing wrong with that but I would actually prefer not to I would like my Lambda functions to be",
    "start": "2229640",
    "end": "2235599"
  },
  {
    "text": "single-purpose things that just do one thing and do it well and if they blow up or something goes wrong let's take care of that at another level um at a higher",
    "start": "2235599",
    "end": "2243079"
  },
  {
    "text": "level at the state Machine level so I I want to show you what the tri catch finally language looks like but once",
    "start": "2243079",
    "end": "2248359"
  },
  {
    "text": "again I'm dealing with the size of a reinvent slide so let's use a smaller State machine so here's a a much smaller",
    "start": "2248359",
    "end": "2255359"
  },
  {
    "text": "State machine that uh knows how to access some media and um if if it uh succeeds in",
    "start": "2255359",
    "end": "2264079"
  },
  {
    "text": "accessing the media it moves directly to graceful exit and if it has a problem accessing the media it goes to a cleanup",
    "start": "2264079",
    "end": "2270079"
  },
  {
    "text": "state which runs another cleanup Lambda function and if that in turn breaks there's still a second level of",
    "start": "2270079",
    "end": "2275599"
  },
  {
    "text": "fallback I think Tim ran one of one of these in um he just talked just before me anyhow",
    "start": "2275599",
    "end": "2282640"
  },
  {
    "text": "let's look at the Json that you have to write to accomplish this okay so this time we have a a state called access",
    "start": "2282640",
    "end": "2289160"
  },
  {
    "text": "media and it's runs a Lambda just like everything else we've seen here um only it has a new field we haven't showed you",
    "start": "2289160",
    "end": "2295480"
  },
  {
    "text": "yet which is a timeout so this says that that Lambda is only given uh 2 minutes",
    "start": "2295480",
    "end": "2301680"
  },
  {
    "text": "to uh complete its work uh 2 seconds to complete its work and should it should it should that pass",
    "start": "2301680",
    "end": "2308800"
  },
  {
    "text": "it will be failed with an error code of states. timeout okay and if that happens",
    "start": "2308800",
    "end": "2315560"
  },
  {
    "text": "that error code would be caught by this retry Clause now I've already showed you one retry Clause but it was kind of dumb",
    "start": "2315560",
    "end": "2321480"
  },
  {
    "text": "it just said keep going give it 10 times this retry Clause here is quite a bit more sophisticated it says not only how",
    "start": "2321480",
    "end": "2328440"
  },
  {
    "text": "many times can you retry but how long you wait and how much you increase the back off by each time so uh you know if",
    "start": "2328440",
    "end": "2335520"
  },
  {
    "text": "it fails it'll wait wait 2 seconds and retry and if it fails times out again",
    "start": "2335520",
    "end": "2341040"
  },
  {
    "text": "it'll wait 3 seconds and retry and if it times out again it would wait 4.5 seconds only it won't because we've only",
    "start": "2341040",
    "end": "2346680"
  },
  {
    "text": "allowed two retries so with one attempt and two retries it it will run a maximum number of of three times be before it",
    "start": "2346680",
    "end": "2353800"
  },
  {
    "text": "gives up and should that happen should it time out three times in a row or should the Lambda s suffer some other",
    "start": "2353800",
    "end": "2360280"
  },
  {
    "text": "catastrophic failure that that we haven't accounted for that would fall through to the uh catch Clause uh and",
    "start": "2360280",
    "end": "2366839"
  },
  {
    "text": "once again catch just like retry is an array so you can have different catchers for lots of different error conditions",
    "start": "2366839",
    "end": "2374079"
  },
  {
    "text": "and it would Branch to the cleanup state so of all the things in Step",
    "start": "2374079",
    "end": "2379920"
  },
  {
    "text": "functions I have a sneaking suspicion that this might be the single most useful and and I kind of think that uh",
    "start": "2379920",
    "end": "2387400"
  },
  {
    "text": "you really don't want to write any serious serverless code with",
    "start": "2387400",
    "end": "2392440"
  },
  {
    "text": "orchestrated multiple functions without having one of these and I also think that it might be the case that a high",
    "start": "2392440",
    "end": "2399319"
  },
  {
    "text": "proportion of just the Standalone single Lambda functions in the world might benefit from having one of these things",
    "start": "2399319",
    "end": "2404720"
  },
  {
    "text": "uh wrapped around them to uh to deal with it when it uh when",
    "start": "2404720",
    "end": "2409839"
  },
  {
    "text": "necessary okay um let us talk then about",
    "start": "2409839",
    "end": "2415000"
  },
  {
    "text": "the last thing that that I'm going to talk about in terms of of how this works uh that we hear about from customers and",
    "start": "2415000",
    "end": "2422079"
  },
  {
    "text": "this is the situation where code that runs for hours or a long time and the world has a lot of this stuff you know",
    "start": "2422079",
    "end": "2428520"
  },
  {
    "text": "obvious examples are uh you know transcoding huge media files or you know",
    "start": "2428520",
    "end": "2434119"
  },
  {
    "text": "inverting Mega matrices or you know running Legacy fortrend code or whatever it is that that floats your boat um but",
    "start": "2434119",
    "end": "2441599"
  },
  {
    "text": "it happens and whereas you know the amount of time that lambdas are allowed to run is growing um there's going to be",
    "start": "2441599",
    "end": "2448480"
  },
  {
    "text": "things where you know Lambda is just a poor match let me give you one concrete example um and this is the example of",
    "start": "2448480",
    "end": "2455280"
  },
  {
    "text": "somebody who wants to monitor some equipment for an 8 hour shift now this is just a wildly inappropriate thing to",
    "start": "2455280",
    "end": "2461599"
  },
  {
    "text": "do with a Lambda um so how how how are we going to do this",
    "start": "2461599",
    "end": "2467440"
  },
  {
    "text": "um let me show you the Json that oh no first of all we need a new API to do that because so far all I've showed you",
    "start": "2467440",
    "end": "2474200"
  },
  {
    "text": "is how to uh how to how to call lambdas so we need a little bit more API for this to work so in the state machines",
    "start": "2474200",
    "end": "2480920"
  },
  {
    "text": "there's a thing called a task and Al task can be a Lambda or it can be one of these things called an activity and the",
    "start": "2480920",
    "end": "2487880"
  },
  {
    "text": "way it works is you register an activity and it gets an IR so you can refer to it",
    "start": "2487880",
    "end": "2493560"
  },
  {
    "text": "and then you some WR you write some code that actually does the activity for example you know monitor a machine for eight hours at a time and then the way",
    "start": "2493560",
    "end": "2500839"
  },
  {
    "text": "it works is that task that you write the code that you write pulls the service good old fashion HTTP long pull and says",
    "start": "2500839",
    "end": "2508640"
  },
  {
    "text": "here's here's the task I know how to do got one of those for me and if the state machine has progressed to the point where it wants one of those tasks done",
    "start": "2508640",
    "end": "2514839"
  },
  {
    "text": "the service will H will hand that that task to it and then once you've done that inside your own code uh you can",
    "start": "2514839",
    "end": "2521760"
  },
  {
    "text": "when you're finished you can report back success or you can report back failure",
    "start": "2521760",
    "end": "2527760"
  },
  {
    "text": "or you can report a heartbeat to say you know here I'm still here I'm working everything's okay now this code um it",
    "start": "2527760",
    "end": "2534480"
  },
  {
    "text": "can be anything that can uh make rest calls to do this so it could be running",
    "start": "2534480",
    "end": "2541359"
  },
  {
    "text": "on ec2 it could be running in an ECS container it could be running on your own desktop at home it could be running",
    "start": "2541359",
    "end": "2548119"
  },
  {
    "text": "in your own data center it could be in any programming language you can possibly think",
    "start": "2548119",
    "end": "2553240"
  },
  {
    "text": "of now okay yeah I acknowledge this is not exactly serverless but once again I",
    "start": "2553240",
    "end": "2559160"
  },
  {
    "text": "think that the serverless world and the Legacy server full world need to get along and be best friends so you know we",
    "start": "2559160",
    "end": "2565680"
  },
  {
    "text": "need to we need to cross walk both sides of that street at certain times so let's actually do a state machine that does",
    "start": "2565680",
    "end": "2571880"
  },
  {
    "text": "that so once again there's there's a few interesting lessons in here so here are two States in a state machine that",
    "start": "2571880",
    "end": "2577640"
  },
  {
    "text": "actually use one of these activity thingies um the first one is a weight",
    "start": "2577640",
    "end": "2584880"
  },
  {
    "text": "state which is something that's logically necessary to have in a state machine even though I hadn't talked about it yet now a weight State can",
    "start": "2584880",
    "end": "2592119"
  },
  {
    "text": "literally say wait so many seconds or it can wait till a provided timestamp or it",
    "start": "2592119",
    "end": "2597520"
  },
  {
    "text": "can do what we do here which I think is actually more interesting which is to uh take the input Json that's coming in and",
    "start": "2597520",
    "end": "2604359"
  },
  {
    "text": "pull out a field which is expected to have a time stamp semantic in it saying here's where I want you when when I want",
    "start": "2604359",
    "end": "2610079"
  },
  {
    "text": "you to start so you're going to send this a Json message with a field called uh shift start that's going to say we'll",
    "start": "2610079",
    "end": "2615839"
  },
  {
    "text": "start this at you know 4 p.m. or midnight or whenever it is your your your shift starts and the the state",
    "start": "2615839",
    "end": "2621920"
  },
  {
    "text": "machine will then just lock up and wait and do nothing until that time comes around then the step function service",
    "start": "2621920",
    "end": "2626960"
  },
  {
    "text": "will wake it up and and put it to work um and then it'll go through the next",
    "start": "2626960",
    "end": "2632760"
  },
  {
    "text": "pointer there and go off to the gather plant data now this task state looks",
    "start": "2632760",
    "end": "2639000"
  },
  {
    "text": "just exactly like all the other task states that I've been showing you in fact to see any difference at all you",
    "start": "2639000",
    "end": "2644720"
  },
  {
    "text": "have to look really closely inside the iron which is no longer a Lambda iron it's just one of these registered uh",
    "start": "2644720",
    "end": "2651400"
  },
  {
    "text": "activity worker IRS so when the state machine executes this it'll say oh okay is anybody out there polling that knows",
    "start": "2651400",
    "end": "2657200"
  },
  {
    "text": "how to do this uh PL watch activity if so I'll hand it off to them and and and",
    "start": "2657200",
    "end": "2663119"
  },
  {
    "text": "get it to work um and in fact if you think carefully there's a",
    "start": "2663119",
    "end": "2668599"
  },
  {
    "text": "big extensibility Point here essentially we have a task State and the the thing",
    "start": "2668599",
    "end": "2674400"
  },
  {
    "text": "that it's supposed to do is just a string which we as which is an iron and at the current time we support lambdas",
    "start": "2674400",
    "end": "2681400"
  },
  {
    "text": "and we support um activities but there's no reason at all that we couldn't support I don't know something involving",
    "start": "2681400",
    "end": "2687559"
  },
  {
    "text": "perhaps Docker containers uh or something like that that you could conceivably identify with an iron and",
    "start": "2687559",
    "end": "2693200"
  },
  {
    "text": "launch there's no reason at all that it couldn't just be a UR URL and you go and post the thing to an HTTP endpoint and",
    "start": "2693200",
    "end": "2700040"
  },
  {
    "text": "wait for it to come back so you know I think you can expect lots of other kinds",
    "start": "2700040",
    "end": "2705119"
  },
  {
    "text": "of units of work to find their way into State machines going forward what else oh yeah the the timing",
    "start": "2705119",
    "end": "2712280"
  },
  {
    "text": "is interesting here so it turns out that an 8 hour shift is 28,800 seconds and so",
    "start": "2712280",
    "end": "2718319"
  },
  {
    "text": "it's got a a total time out of 30,000 and it will not let this thing run longer than 30 SEC 30 30,000 seconds if",
    "start": "2718319",
    "end": "2724280"
  },
  {
    "text": "it if it does it'll it'll fail with a a timeout error um it also noticed the heartbeat thing there too uh remember I",
    "start": "2724280",
    "end": "2731839"
  },
  {
    "text": "I there was there's a heartbeat API so the task that's doing the work can call back to the service every so often and say yeah I'm still alive now in this",
    "start": "2731839",
    "end": "2738760"
  },
  {
    "text": "particular case um if uh the if it doesn't call every 2 minutes or more",
    "start": "2738760",
    "end": "2744280"
  },
  {
    "text": "often the service will conclude that it's locked up or Frozen and declare an error which you can probably not retry",
    "start": "2744280",
    "end": "2751160"
  },
  {
    "text": "in this case you probably just want to catch it and uh launch it I'm not sure what you'd want to do and anyhow so so",
    "start": "2751160",
    "end": "2756559"
  },
  {
    "text": "that's long running thing so I guess that raises uh an obvious question which is well how long can a state machine run",
    "start": "2756559",
    "end": "2763440"
  },
  {
    "text": "um and the answer is in principle forever however we have a limit of one year we do not allow State machines to",
    "start": "2763440",
    "end": "2770280"
  },
  {
    "text": "execute longer than one year no you're laughing but people are already asking for it okay there they're saying I",
    "start": "2770280",
    "end": "2776640"
  },
  {
    "text": "I um and and and the brutal truth is the reason we have that one year in there is",
    "start": "2776640",
    "end": "2782160"
  },
  {
    "text": "that we're pretty sure there's a good chance that any state machines that's been running for a year is probably a forgotten pitiable orphan State machine",
    "start": "2782160",
    "end": "2789559"
  },
  {
    "text": "that you know they lost track of and needs to be put to sleep for its own good um so yeah so you can so at the",
    "start": "2789559",
    "end": "2797400"
  },
  {
    "text": "moment you know clearly the the construction of this service was driven",
    "start": "2797400",
    "end": "2803000"
  },
  {
    "text": "in large part by the necessity to orchestrate lambdas and things like that in the in the serverless cloud but step",
    "start": "2803000",
    "end": "2809960"
  },
  {
    "text": "functions also is comes ready to run with um uh long running functions and",
    "start": "2809960",
    "end": "2815920"
  },
  {
    "text": "and stuff like that as well okay so then let's have I said everything I'm going to say yes about",
    "start": "2815920",
    "end": "2822119"
  },
  {
    "text": "this so let's go back to that list of things that we think people want to do",
    "start": "2822119",
    "end": "2829760"
  },
  {
    "text": "in serverless applications and ask the question well is this you um and I think",
    "start": "2829760",
    "end": "2835599"
  },
  {
    "text": "there are actually probably quite a lot of you um this has not been a complete",
    "start": "2835599",
    "end": "2842599"
  },
  {
    "text": "tour of Step functions but it has has covered really a lot of it there are are",
    "start": "2842599",
    "end": "2848440"
  },
  {
    "text": "very few parts of it that I didn't at least touch on this is actually a pretty simple service with a pretty small API",
    "start": "2848440",
    "end": "2855680"
  },
  {
    "text": "the most complicated thing about it is the actual Json language it use for for describing States but even that is is",
    "start": "2855680",
    "end": "2862359"
  },
  {
    "text": "not that complicated um the product managers who you know who as an engineer",
    "start": "2862359",
    "end": "2869040"
  },
  {
    "text": "I nominally work for um have this vision of you know people running massive",
    "start": "2869040",
    "end": "2874599"
  },
  {
    "text": "complicated State machines to do business critical functions and you know having tens of thousands of them running",
    "start": "2874599",
    "end": "2880559"
  },
  {
    "text": "for hours at a time and in fact uh that's how you know a lot of Amazon's publishing activities get get get done",
    "start": "2880559",
    "end": "2887240"
  },
  {
    "text": "um and that's fine but my own personal itch here is I see so many people",
    "start": "2887240",
    "end": "2893359"
  },
  {
    "text": "writing these nasty little shell scripts nasty nasty little shell scripts to",
    "start": "2893359",
    "end": "2898839"
  },
  {
    "text": "automate you know deploying something or configuring something or cleaning something you wouldn't do that um",
    "start": "2898839",
    "end": "2904440"
  },
  {
    "text": "cleaning something up and and I just know they look like ticking time bombs to me you know because you know do I",
    "start": "2904440",
    "end": "2910880"
  },
  {
    "text": "trust that the person who wrote the shell script you know will will safely keep the state between you know as as",
    "start": "2910880",
    "end": "2915920"
  },
  {
    "text": "you as you move from one LDA to the next will they carefully track and persist and back up and replicate and do all",
    "start": "2915920",
    "end": "2921480"
  },
  {
    "text": "that AWS durability stuff with the state of and and so on and I think probably they won't and my hope is that this is",
    "start": "2921480",
    "end": "2928079"
  },
  {
    "text": "sufficiently easy that a lot of those dirty nasty little shell scripts will migrate into Cloud space and become much",
    "start": "2928079",
    "end": "2935319"
  },
  {
    "text": "nicer much cleaner little Json uh State machine specifications and and uh remove",
    "start": "2935319",
    "end": "2940799"
  },
  {
    "text": "what I consider to be a source of significant danger among our customers",
    "start": "2940799",
    "end": "2945920"
  },
  {
    "text": "um I am almost finished here I think that there are a lot of you there's the",
    "start": "2945920",
    "end": "2951200"
  },
  {
    "text": "front page for the service it is no preview no nothing like that it's generally available it's in um Oregon",
    "start": "2951200",
    "end": "2959559"
  },
  {
    "text": "Virginia Ohio um Dublin and Tokyo right",
    "start": "2959559",
    "end": "2964960"
  },
  {
    "text": "now today and uh our intent is that it be available everywhere we regard this as a",
    "start": "2964960",
    "end": "2972359"
  },
  {
    "text": "well at least everywhere their Lambda is um a foundational element for the construction of Next Generation Cloud",
    "start": "2972359",
    "end": "2979720"
  },
  {
    "text": "native applications so head on over there try it out we think it's easy um",
    "start": "2979720",
    "end": "2987359"
  },
  {
    "text": "now you're going to ask is it free no it's not free um but the price is really",
    "start": "2987359",
    "end": "2992480"
  },
  {
    "text": "really really easy to understand uh so you think think of your state machine as one of those graphs that was being",
    "start": "2992480",
    "end": "2998359"
  },
  {
    "text": "driven on the board and every time you click from one box to to the next that's 1 1000 of 2",
    "start": "2998359",
    "end": "3004480"
  },
  {
    "text": "and A5 cents um and there you go and also it has a free tier uh 4,000 free",
    "start": "3004480",
    "end": "3011240"
  },
  {
    "text": "transitions a month um which I think should be plenty to motivate you to make all those nasty little shell scripts go",
    "start": "3011240",
    "end": "3017720"
  },
  {
    "text": "away and replace them with with nice clean State machines",
    "start": "3017720",
    "end": "3023440"
  },
  {
    "text": "um yeah the pricing is nice and easy to understand I am about done and we have almost 10 minutes left I will say that",
    "start": "3023440",
    "end": "3030040"
  },
  {
    "text": "there is another related session at 5:30 today over in the compute track that one since it's in the compute track is a",
    "start": "3030040",
    "end": "3036559"
  },
  {
    "text": "little bit little bit less Lambda Centric and a little bit less code heavy and more talking about the kind of",
    "start": "3036559",
    "end": "3042480"
  },
  {
    "text": "business considerations you might find uh applicable to uh to doing this stuff",
    "start": "3042480",
    "end": "3048680"
  },
  {
    "text": "and uh then of course we're going to have a related session for anybody who wants to talk about this um I think they",
    "start": "3048680",
    "end": "3054160"
  },
  {
    "text": "want to clear the room so I think I'm going to be rude and and walk steadfastly out the door and if you want to talk to me let's go outside and and",
    "start": "3054160",
    "end": "3060880"
  },
  {
    "text": "and talk outside um uh that's me Tim BR at Amazon anybody who does anything with",
    "start": "3060880",
    "end": "3066760"
  },
  {
    "text": "this and it's really great send me an email and tell me about it I'm also called Tim Bray on on Twitter um and uh",
    "start": "3066760",
    "end": "3074000"
  },
  {
    "text": "evaluation please",
    "start": "3074000",
    "end": "3078880"
  }
]