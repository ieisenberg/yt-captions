[
  {
    "start": "0",
    "end": "12000"
  },
  {
    "text": "Welcome to 'This is My Architecture'.\nI am Hawn.",
    "start": "6100",
    "end": "8643"
  },
  {
    "text": "And today, we have Erik\nfrom Heimdall Data joining us.",
    "start": "8643",
    "end": "12763"
  },
  {
    "text": "Welcome, Erik.\nAnd thank you for joining us.",
    "start": "12763",
    "end": "14573"
  },
  {
    "text": "Thank you.",
    "start": "14574",
    "end": "15633"
  },
  {
    "text": "So before we get into your architecture,",
    "start": "15633",
    "end": "17329"
  },
  {
    "text": "can you tell me a little bit\nabout Heimdall?",
    "start": "17329",
    "end": "19077"
  },
  {
    "text": "Yes.",
    "start": "19077",
    "end": "20119"
  },
  {
    "text": "Heimdall is an ISV partner of Amazon.",
    "start": "20119",
    "end": "23076"
  },
  {
    "text": "And what we do is we provide\na software solution that's a proxy,",
    "start": "23076",
    "end": "27381"
  },
  {
    "text": "database proxy,\nthat sits between client applications,",
    "start": "27381",
    "end": "31257"
  },
  {
    "text": "Lambda functions,\nand the database itself.",
    "start": "31257",
    "end": "34424"
  },
  {
    "text": "And within the software, it provides\na wide variety of different functions",
    "start": "34424",
    "end": "38669"
  },
  {
    "text": "in order to improve the scale\nand performance of applications,",
    "start": "38669",
    "end": "42974"
  },
  {
    "text": "and just help\nsimplify the life of developers.",
    "start": "42974",
    "end": "46240"
  },
  {
    "text": "So, let's say I'm a developer,",
    "start": "46241",
    "end": "48035"
  },
  {
    "text": "so walk me through the flow\nof how that would help.",
    "start": "48035",
    "end": "50809"
  },
  {
    "text": "Okay.",
    "start": "50809",
    "end": "51875"
  },
  {
    "text": "So whether you've got\nan application server",
    "start": "51875",
    "end": "54325"
  },
  {
    "text": "or Lambda function,",
    "start": "54325",
    "end": "55932"
  },
  {
    "text": "they are going to connect to an NLB",
    "start": "55932",
    "end": "59252"
  },
  {
    "text": "that will then distribute\ndatabase queries",
    "start": "59252",
    "end": "62446"
  },
  {
    "text": "as if it were the database",
    "start": "62446",
    "end": "64771"
  },
  {
    "text": "into one or more proxies\nvia an auto-scaling group.",
    "start": "64772",
    "end": "69796"
  },
  {
    "text": "These proxies then provide\none of the several",
    "start": "70926",
    "end": "73845"
  },
  {
    "text": "or any one of several functions",
    "start": "73845",
    "end": "76483"
  },
  {
    "text": "via caching or read/write split,\nwhich we're about to talk about today,",
    "start": "76483",
    "end": "80932"
  },
  {
    "text": "all in accessing the database.",
    "start": "80932",
    "end": "84120"
  },
  {
    "start": "84000",
    "end": "144000"
  },
  {
    "text": "Okay, so you said read/write split.\nSo how does that orchestration work?",
    "start": "84120",
    "end": "87795"
  },
  {
    "text": "Okay.",
    "start": "87795",
    "end": "88854"
  },
  {
    "text": "So the whole idea here is that\nmost applications aren't designed",
    "start": "88854",
    "end": "92802"
  },
  {
    "text": "to access multiple application\nor database nodes,",
    "start": "92803",
    "end": "96385"
  },
  {
    "text": "because the database nodes\nare read/write",
    "start": "96385",
    "end": "99600"
  },
  {
    "text": "or as, in the case\nof a secondary server,",
    "start": "99600",
    "end": "102284"
  },
  {
    "text": "it is a read-only node.",
    "start": "102284",
    "end": "103864"
  },
  {
    "text": "And the applications\naren't designed to know",
    "start": "103864",
    "end": "106556"
  },
  {
    "text": "when it's safe to use\nthat second server.",
    "start": "106556",
    "end": "109493"
  },
  {
    "text": "So what Heimdall does, is as the proxy",
    "start": "109493",
    "end": "112270"
  },
  {
    "text": "it monitors the traffic\nthat's going through the Heimdall",
    "start": "112270",
    "end": "115130"
  },
  {
    "text": "or going through the proxy.",
    "start": "115130",
    "end": "117624"
  },
  {
    "text": "It is able to determine\nwhat tables are being written to,",
    "start": "117624",
    "end": "122453"
  },
  {
    "text": "and what tables\nare being read from, out of the database.",
    "start": "122453",
    "end": "126542"
  },
  {
    "text": "So let's say you've got a write\ngoing into the primary server.",
    "start": "126542",
    "end": "131273"
  },
  {
    "text": "We know that it is no longer safe",
    "start": "131273",
    "end": "135297"
  },
  {
    "text": "to read that same table from the reader",
    "start": "135298",
    "end": "138594"
  },
  {
    "text": "until, a long enough has occurred that",
    "start": "138594",
    "end": "141618"
  },
  {
    "text": "that data is now\non the secondary server.",
    "start": "141619",
    "end": "144025"
  },
  {
    "start": "144000",
    "end": "192000"
  },
  {
    "text": "Great.",
    "start": "144025",
    "end": "145097"
  },
  {
    "text": "So I noticed that the proxy\nis in a cluster.",
    "start": "145097",
    "end": "148355"
  },
  {
    "text": "So how do you ensure there's no drift\namong the different nodes within there?",
    "start": "148355",
    "end": "152524"
  },
  {
    "text": "Okay.",
    "start": "152524",
    "end": "154220"
  },
  {
    "text": "What Heimdall does is\nwhen we see the DML happening,",
    "start": "154220",
    "end": "158259"
  },
  {
    "text": "we leverage the pub/sub interface\nof ElastiCache.",
    "start": "158259",
    "end": "161208"
  },
  {
    "text": "It's something an interface\nis very similar to SNS,",
    "start": "161208",
    "end": "164353"
  },
  {
    "text": "although very low latency.",
    "start": "164354",
    "end": "166402"
  },
  {
    "text": "So the proxy will come through,",
    "start": "166402",
    "end": "168165"
  },
  {
    "text": "will write an invalidation message\nagainst that pub/sub interface,",
    "start": "168165",
    "end": "173075"
  },
  {
    "text": "and then it will synchronize that",
    "start": "173075",
    "end": "176902"
  },
  {
    "text": "with all the other proxies.",
    "start": "176902",
    "end": "179206"
  },
  {
    "text": "So by doing that, all the nodes know\nwhat is happening on any individual node",
    "start": "179207",
    "end": "185197"
  },
  {
    "text": "and they're able to operate as one",
    "start": "185197",
    "end": "187185"
  },
  {
    "text": "even though they're distributed\nacross many physical instances.",
    "start": "187185",
    "end": "192323"
  },
  {
    "start": "192000",
    "end": "265000"
  },
  {
    "text": "That's cool.",
    "start": "192323",
    "end": "193385"
  },
  {
    "text": "So, as a developer, what do I need to do?\nDo I have to make some code changes?",
    "start": "193385",
    "end": "197213"
  },
  {
    "text": "Nope, you don't, okay?\nHeimdall takes care of everything.",
    "start": "197213",
    "end": "201395"
  },
  {
    "text": "We understand\nwhat tables are being written to,",
    "start": "201395",
    "end": "204326"
  },
  {
    "text": "what are being read from,\nwe synchronize that.",
    "start": "204326",
    "end": "207524"
  },
  {
    "text": "We also do something\nthat we call lag detection.",
    "start": "207524",
    "end": "210126"
  },
  {
    "text": "- Wow.\n- Okay.",
    "start": "210126",
    "end": "211433"
  },
  {
    "text": "What lag detection is",
    "start": "211433",
    "end": "212857"
  },
  {
    "text": "is independent of all the traffic\nthe application's doing.",
    "start": "212857",
    "end": "217526"
  },
  {
    "text": "We write into the primary database.",
    "start": "217526",
    "end": "220827"
  },
  {
    "text": "We let it synchronize\nover to the secondary database.",
    "start": "220827",
    "end": "225170"
  },
  {
    "text": "And then we read what we wrote.",
    "start": "225171",
    "end": "228043"
  },
  {
    "text": "And what we're writing is a timestamp.",
    "start": "228043",
    "end": "230671"
  },
  {
    "text": "So by reading it back in,",
    "start": "230671",
    "end": "232917"
  },
  {
    "text": "we're able to tell\nhow long it takes for data",
    "start": "232917",
    "end": "236484"
  },
  {
    "text": "to go from the primary to the secondary.",
    "start": "236484",
    "end": "239743"
  },
  {
    "text": "We then use the last write time\non the table,",
    "start": "239744",
    "end": "245258"
  },
  {
    "text": "plus that replication lag\nto determine what is safe to do",
    "start": "245258",
    "end": "250534"
  },
  {
    "text": "when we do a read.",
    "start": "250534",
    "end": "252267"
  },
  {
    "text": "Is the secondary safe?\nAnd it's all automatic.",
    "start": "252267",
    "end": "255280"
  },
  {
    "text": "That's the beauty of it.",
    "start": "255280",
    "end": "256458"
  },
  {
    "text": "So application developers\ncan now scale their database",
    "start": "256459",
    "end": "260894"
  },
  {
    "text": "from one writable server, to let's say,\nan Aurora cluster with 15 readers.",
    "start": "260894",
    "end": "265738"
  },
  {
    "start": "265000",
    "end": "312000"
  },
  {
    "text": "That's fantastic.",
    "start": "265738",
    "end": "266779"
  },
  {
    "text": "I definitely can see\nhow that will make it easier",
    "start": "266779",
    "end": "268697"
  },
  {
    "text": "for the developer's life.",
    "start": "268697",
    "end": "270319"
  },
  {
    "text": "So what are some of the benefits\nthat you've seen...",
    "start": "270320",
    "end": "273323"
  },
  {
    "text": "Where your customer has seen\nwith this architecture?",
    "start": "273323",
    "end": "275332"
  },
  {
    "text": "Okay.",
    "start": "275332",
    "end": "276381"
  },
  {
    "text": "Oh, we literally have customers\nthat are using 15 read replicas.",
    "start": "276381",
    "end": "281907"
  },
  {
    "text": "Wow.",
    "start": "281907",
    "end": "282951"
  },
  {
    "text": "And because of the way\nthat we handle everything,",
    "start": "282951",
    "end": "285565"
  },
  {
    "text": "we're able to effectively use\nall 15 replicas.",
    "start": "285566",
    "end": "290485"
  },
  {
    "text": "If you even try\nto implement this on your own,",
    "start": "290485",
    "end": "292826"
  },
  {
    "text": "most developers would try to use\nthe reader endpoint",
    "start": "292826",
    "end": "296987"
  },
  {
    "text": "of your Aurora cluster, for example,",
    "start": "296987",
    "end": "299256"
  },
  {
    "text": "but because of DNS\nand the way load balancing happens,",
    "start": "299256",
    "end": "302109"
  },
  {
    "text": "you'll often get very different loads\non the different databases.",
    "start": "302109",
    "end": "306246"
  },
  {
    "text": "So even if you tried to implement this,",
    "start": "306246",
    "end": "308050"
  },
  {
    "text": "it generally isn't going to get you\nthe same results that you get with us.",
    "start": "308050",
    "end": "311628"
  },
  {
    "text": "Okay.",
    "start": "311628",
    "end": "312677"
  },
  {
    "start": "312000",
    "end": "365000"
  },
  {
    "text": "So what are the other benefits that,",
    "start": "312678",
    "end": "314398"
  },
  {
    "text": "you know, that your customers have seen\nwith this architecture?",
    "start": "314398",
    "end": "316611"
  },
  {
    "text": "Okay.",
    "start": "316611",
    "end": "317653"
  },
  {
    "text": "So on top of the read/write split,\nwe have other functionality.",
    "start": "317653",
    "end": "320806"
  },
  {
    "text": "We've got another video,\nwe talk about our caching logic,",
    "start": "320806",
    "end": "324332"
  },
  {
    "text": "which is very much related\nto how we do the read/write split.",
    "start": "324332",
    "end": "327781"
  },
  {
    "text": "But we also do connection pooling\nand multiplexing",
    "start": "327781",
    "end": "330128"
  },
  {
    "text": "in order to reduce\nthe number of connections on a database.",
    "start": "330128",
    "end": "333470"
  },
  {
    "text": "And then in particular,\nwith Postgres derived databases,",
    "start": "333471",
    "end": "336611"
  },
  {
    "text": "lowering the connection count",
    "start": "336611",
    "end": "338166"
  },
  {
    "text": "can be very important\nto improve performance.",
    "start": "338166",
    "end": "341194"
  },
  {
    "text": "Thank you\nfor going over your architecture.",
    "start": "341194",
    "end": "343711"
  },
  {
    "text": "It's definitely very beneficial\nfor the developers",
    "start": "343711",
    "end": "346695"
  },
  {
    "text": "to give that lift in the application\nwith little to no code changes",
    "start": "346696",
    "end": "350338"
  },
  {
    "text": "and having to handle\nthe connection pooling and replication.",
    "start": "350338",
    "end": "353773"
  },
  {
    "text": "- So that's really awesome.\n- Thank you.",
    "start": "353773",
    "end": "356038"
  },
  {
    "text": "And thank you for watching\n'This is My Architecture'.",
    "start": "356038",
    "end": "358306"
  }
]