[
  {
    "text": "hi everyone thanks for joining in today we will talk about the very interesting space of building conversational",
    "start": "0",
    "end": "6509"
  },
  {
    "text": "interfaces for our applications using language understanding automatic speech",
    "start": "6509",
    "end": "11700"
  },
  {
    "text": "recognition text to speech capabilities and look at analyzing users interactions",
    "start": "11700",
    "end": "17160"
  },
  {
    "text": "using language processing my name is Athena Roy and I work as a Solutions",
    "start": "17160",
    "end": "24029"
  },
  {
    "text": "Architect focused on artificial intelligence it's no secret that large",
    "start": "24029",
    "end": "29400"
  },
  {
    "text": "number of companies are trying to reimagine how to improve their application users experience and",
    "start": "29400",
    "end": "34680"
  },
  {
    "text": "building a conversational interface so that the users can interact with their application through voice or text",
    "start": "34680",
    "end": "41340"
  },
  {
    "text": "commands what's encouraging them to take up such project is the availability of",
    "start": "41340",
    "end": "47010"
  },
  {
    "text": "different cloud-based tools which let them solve very difficult problems very easily for example NASA",
    "start": "47010",
    "end": "55250"
  },
  {
    "text": "imagined how it wants to reach out to students in schools and community organizations and inspire the next",
    "start": "55250",
    "end": "61949"
  },
  {
    "text": "generation of explorers they created a conversational interface for their robotic Ambassador",
    "start": "61949",
    "end": "67770"
  },
  {
    "text": "Rovi which is a close replica of the NASA Mars rovers by the way so that",
    "start": "67770",
    "end": "72990"
  },
  {
    "text": "students can ask questions about Mars and get interesting answers it's the",
    "start": "72990",
    "end": "78630"
  },
  {
    "text": "same intention of making user interactions more conversational that let capital want to make all their",
    "start": "78630",
    "end": "84299"
  },
  {
    "text": "customer facing online transactions voice driven where you can check your balance paying your bills track your",
    "start": "84299",
    "end": "91140"
  },
  {
    "text": "spending through voice commands or aloud Liberty Mutual to add chat bot",
    "start": "91140",
    "end": "96329"
  },
  {
    "text": "capability to their existing web application now if you have to build",
    "start": "96329",
    "end": "101610"
  },
  {
    "text": "such systems from scratch let's look at what are the challenges you have to solve you have to build an accurate",
    "start": "101610",
    "end": "108210"
  },
  {
    "text": "speech recognition engine that will convert the voice commands to text you then have to build a natural language",
    "start": "108210",
    "end": "114689"
  },
  {
    "text": "into understanding engine that will accurately extract the users intent from that text once you have response ready",
    "start": "114689",
    "end": "122610"
  },
  {
    "text": "for the user then you have to convert that text to speech and play back to the",
    "start": "122610",
    "end": "127740"
  },
  {
    "text": "user all in real time these free by themselves are extremely hot",
    "start": "127740",
    "end": "133620"
  },
  {
    "text": "to solve but imagine even if you crack them you need to take care of how to",
    "start": "133620",
    "end": "138810"
  },
  {
    "text": "build dialogue flows how to easily integrate with your application or a messenger service how to scale to",
    "start": "138810",
    "end": "145590"
  },
  {
    "text": "thousands of concurrent users how to achieve high availability of each components think about it it's really a",
    "start": "145590",
    "end": "153599"
  },
  {
    "text": "significant amount of work now let's look at some of the tools that AWS provides to take away some of those bins",
    "start": "153599",
    "end": "163519"
  },
  {
    "text": "Amazon Lakes is the primary AWA service which lets you build conversational interfaces",
    "start": "163640",
    "end": "169109"
  },
  {
    "text": "using voice and text it uses another AWA service called Amazon poly to convert",
    "start": "169109",
    "end": "176099"
  },
  {
    "text": "text to speech whenever you want to interact with your user through voice by",
    "start": "176099",
    "end": "182129"
  },
  {
    "text": "the way customers use poly independently to implement a wide range of use cases - like generating audio books news on the",
    "start": "182129",
    "end": "189720"
  },
  {
    "text": "go ib are systems etc and you can use a third AWS service called Amazon",
    "start": "189720",
    "end": "195359"
  },
  {
    "text": "comprehend along with legs to analyze the users conversation to understand",
    "start": "195359",
    "end": "200579"
  },
  {
    "text": "what's their overall sentiment of the interaction going forward will refer to",
    "start": "200579",
    "end": "205829"
  },
  {
    "text": "these services as Lex poly and comprehend so combining these three you",
    "start": "205829",
    "end": "211799"
  },
  {
    "text": "get a complete end-to-end solution managed and hosted by AWS that will",
    "start": "211799",
    "end": "216989"
  },
  {
    "text": "provide among others native support for text-to-speech speech recognition and",
    "start": "216989",
    "end": "222660"
  },
  {
    "text": "language understanding integrated into one single API one-click deployment and",
    "start": "222660",
    "end": "228150"
  },
  {
    "text": "fully managed scalability easy business logic integration fully encrypted data",
    "start": "228150",
    "end": "234389"
  },
  {
    "text": "at rest and in transit some important features to know about legs firstly the",
    "start": "234389",
    "end": "242940"
  },
  {
    "text": "NLU and the speech recognition capabilities are powered by the same engines as Amazon Alexa but exposed as a",
    "start": "242940",
    "end": "250169"
  },
  {
    "text": "single API which can take both text and speech another cool thing about leg",
    "start": "250169",
    "end": "255629"
  },
  {
    "text": "spots is that you build it once and have the choice of deploying it multiple times to either your mobile app through",
    "start": "255629",
    "end": "263430"
  },
  {
    "text": "the iOS and Android SDKs or to messenger services like book slack or kick or integrate with",
    "start": "263430",
    "end": "270960"
  },
  {
    "text": "your web application using one of the many supported SDKs like Java JavaScript Python dotnet Ruby on Rails etc or even",
    "start": "270960",
    "end": "279479"
  },
  {
    "text": "deploy it on your IOT devices as we'll see during the demo it has an efficient",
    "start": "279479",
    "end": "285000"
  },
  {
    "text": "and intuitive console which allows builders to design their BOTS easily Lex",
    "start": "285000",
    "end": "292139"
  },
  {
    "text": "allows seamless connectivity with multiple enterprise systems like Salesforce Microsoft Dynamics",
    "start": "292139",
    "end": "297689"
  },
  {
    "text": "Zendesk etc importantly it provides out-of-the-box capabilities to monitor",
    "start": "297689",
    "end": "303509"
  },
  {
    "text": "interactions through cloud Watson logs and lies mr. trenches and add them back",
    "start": "303509",
    "end": "308969"
  },
  {
    "text": "to the intent from the console now we look at depth into how to build",
    "start": "308969",
    "end": "315000"
  },
  {
    "text": "conversational apps using legs and what customizations can be built into our",
    "start": "315000",
    "end": "320069"
  },
  {
    "text": "board later we'll demo how to create a bot and integrate it with your",
    "start": "320069",
    "end": "325770"
  },
  {
    "text": "application we start by defining the actions to be performed by the bot",
    "start": "325770",
    "end": "331440"
  },
  {
    "text": "these actions are defined in legs as intents for each intent will add",
    "start": "331440",
    "end": "338810"
  },
  {
    "text": "utterances and slots utterances are a list of sample phrases that the bot",
    "start": "338810",
    "end": "345240"
  },
  {
    "text": "users are likely to use to invoke that intent we use these appearances to Train",
    "start": "345240",
    "end": "350550"
  },
  {
    "text": "our language module slots are like variables populated by user inputs that",
    "start": "350550",
    "end": "356250"
  },
  {
    "text": "will capture useful information to fulfill the intent lastly we will",
    "start": "356250",
    "end": "361770"
  },
  {
    "text": "provide the business logic necessary to execute the action by defining a fulfillment as we will see later let's",
    "start": "361770",
    "end": "369930"
  },
  {
    "text": "let's you use AWS lambda to make this incredibly simple now let's take a",
    "start": "369930",
    "end": "376620"
  },
  {
    "text": "closer look at how uh pterence s and slots work let's imagine we are going to create a trouble bot and we'll start by",
    "start": "376620",
    "end": "384180"
  },
  {
    "text": "defining intents like book hotel book flight book car etc now for each intent",
    "start": "384180",
    "end": "390960"
  },
  {
    "text": "we'll provide a few sample utterances that could potentially be used by the users of the body for a book Hotel",
    "start": "390960",
    "end": "398159"
  },
  {
    "text": "intent it could be utterances like to book a hotel can you book a hotel for",
    "start": "398159",
    "end": "403169"
  },
  {
    "text": "me please reserve a room for me like this let's feel triggered this intent",
    "start": "403169",
    "end": "408840"
  },
  {
    "text": "when the user speaks or typed something along those lights please note that this is not exact match by any way just a few",
    "start": "408840",
    "end": "416610"
  },
  {
    "text": "samples will let let us know what you want next we specify slots these are",
    "start": "416610",
    "end": "423630"
  },
  {
    "text": "additional information that you request from the user before you are able to fulfill the intent so for our book Hotel",
    "start": "423630",
    "end": "430620"
  },
  {
    "text": "intent will instruct Lex how to elicit slots by prompting questions about the",
    "start": "430620",
    "end": "435690"
  },
  {
    "text": "destination and the number of nights and Lex will populate the user's response to",
    "start": "435690",
    "end": "441300"
  },
  {
    "text": "the respective predefined slot variables Lex allows you to define what kind of",
    "start": "441300",
    "end": "446310"
  },
  {
    "text": "data type you are looking for in those slots it provides a list of native data",
    "start": "446310",
    "end": "451800"
  },
  {
    "text": "types and additionally lets you define your own data types Lex will",
    "start": "451800",
    "end": "457199"
  },
  {
    "text": "automatically extract the slot from the users response for example if user says I want to stay at New York City next",
    "start": "457199",
    "end": "464370"
  },
  {
    "text": "we'll extract New York City and populate the slot let's maintain the",
    "start": "464370",
    "end": "469800"
  },
  {
    "text": "conversational context throughout the lifecycle of the conversation it stores information that a user or the",
    "start": "469800",
    "end": "476159"
  },
  {
    "text": "application provide to fulfill an intent conversation context includes slot data",
    "start": "476159",
    "end": "482820"
  },
  {
    "text": "that the user provides the intent that is currently being fulfilled and requests on session attributes that the",
    "start": "482820",
    "end": "489780"
  },
  {
    "text": "client application can create Lex lets us invoke a AWS function at every turn",
    "start": "489780",
    "end": "496349"
  },
  {
    "text": "of the conversation AWS lambda for those who are not aware lets you upload a",
    "start": "496349",
    "end": "502169"
  },
  {
    "text": "function in any of the supported languages like Python Java node.js etc and set it up to trigger directly from",
    "start": "502169",
    "end": "509789"
  },
  {
    "text": "other AWS services or you can call it directly from any web or mobile application without the need of setting",
    "start": "509789",
    "end": "516390"
  },
  {
    "text": "up or managing any infrastructure we'll see in the next slides that we can use",
    "start": "516390",
    "end": "521849"
  },
  {
    "text": "AWS lambda as a code hook to customize lakes pots in many different ways first",
    "start": "521849",
    "end": "529529"
  },
  {
    "text": "let's look at switching from one intent to another for example if the user is currently progressing",
    "start": "529529",
    "end": "535710"
  },
  {
    "text": "through book Hotel intent and based on the interaction looks like Airbnb would",
    "start": "535710",
    "end": "541230"
  },
  {
    "text": "be a more appropriate option for her then we can ask whether she would want to book an Airbnb instead and if the",
    "start": "541230",
    "end": "548910"
  },
  {
    "text": "user responds yes then we can switch the conversation to a different intent called book Airbnb this also gives us",
    "start": "548910",
    "end": "557040"
  },
  {
    "text": "the ability to chain in tents like book a car after hotel booking for instance",
    "start": "557040",
    "end": "563570"
  },
  {
    "text": "when Lex calls lambda who it sends all the required information as JSON payload",
    "start": "563570",
    "end": "569430"
  },
  {
    "text": "like the one we can see on the screen it contains the name of the bot intent slot",
    "start": "569430",
    "end": "575940"
  },
  {
    "text": "values and also any session attribute if required you can see now how lambda will",
    "start": "575940",
    "end": "582300"
  },
  {
    "text": "send the response back to Lex after processing the users interaction and determining that it might be useful",
    "start": "582300",
    "end": "588540"
  },
  {
    "text": "to switch the intent to book Airbnb it will create a dialogue action with type",
    "start": "588540",
    "end": "594060"
  },
  {
    "text": "confirm intent set the message to be prompted to the user in this case would",
    "start": "594060",
    "end": "599490"
  },
  {
    "text": "you like your B&B instead and finally define the destination intent to switch to which is book",
    "start": "599490",
    "end": "605250"
  },
  {
    "text": "Cherubini you'll soon see that we can play with the different values of dialogue action",
    "start": "605250",
    "end": "610950"
  },
  {
    "text": "type to control conversational flows very effectively dialogue management in",
    "start": "610950",
    "end": "617520"
  },
  {
    "text": "Lex is very easy to set up in the console and lets you build multi turn conversations using simple declarative",
    "start": "617520",
    "end": "624300"
  },
  {
    "text": "model however if you want to create dynamic conversations and use customized",
    "start": "624300",
    "end": "630570"
  },
  {
    "text": "prompts depending on the situation we can do that too using similar aw slam",
    "start": "630570",
    "end": "636270"
  },
  {
    "text": "decor look that we discussed earlier for example if your application captures",
    "start": "636270",
    "end": "641550"
  },
  {
    "text": "users past preferences then when the user comes back to our chat bot we can prompt a customized message like would",
    "start": "641550",
    "end": "649380"
  },
  {
    "text": "you prefer to stay in downtown in this time as well this gives a more personalized feel to the user in order",
    "start": "649380",
    "end": "657060"
  },
  {
    "text": "to achieve this the lambda hook will have to send a response back to legs similar to the one we saw earlier but",
    "start": "657060",
    "end": "664170"
  },
  {
    "text": "setting type as elicit slot in the dialogue action object along with",
    "start": "664170",
    "end": "669450"
  },
  {
    "text": "other details if you want to analyze the sentiment of the user and take necessary",
    "start": "669450",
    "end": "674730"
  },
  {
    "text": "action based on that we can do that with a single API call to Amazon comprehend",
    "start": "674730",
    "end": "680040"
  },
  {
    "text": "from the AWS lambda code hoop for example we could from the user for a",
    "start": "680040",
    "end": "685410"
  },
  {
    "text": "feedback and the user could respond sorry this did not help we can use",
    "start": "685410",
    "end": "691320"
  },
  {
    "text": "comprehend to identify the negative sentiment in the users response and offer to transfer her to a human",
    "start": "691320",
    "end": "697320"
  },
  {
    "text": "associate we'll see more about this when we built the demo let's also supports elegant",
    "start": "697320",
    "end": "704910"
  },
  {
    "text": "error handling flows natively for example if the users response is not legible or a slot cannot be extracted",
    "start": "704910",
    "end": "712290"
  },
  {
    "text": "from the response we can ask them to retry we can use a different prompt each",
    "start": "712290",
    "end": "717450"
  },
  {
    "text": "time and finally hang up with an appropriate prompt once the max number of retries over finally once we have",
    "start": "717450",
    "end": "726000"
  },
  {
    "text": "mapped the user inputs to an intent and all the required slots are defined we",
    "start": "726000",
    "end": "731190"
  },
  {
    "text": "need to create the output for leaks we can create simple responses or pass the",
    "start": "731190",
    "end": "736830"
  },
  {
    "text": "intent and slots to AWS lambda to implement complicated business logics",
    "start": "736830",
    "end": "742190"
  },
  {
    "text": "AWS lambda will integrate with AWS or other services as required for example",
    "start": "742190",
    "end": "748800"
  },
  {
    "text": "if the user is ordering Pisa then we might need to integrate with your stores API in our example when the",
    "start": "748800",
    "end": "757170"
  },
  {
    "text": "user books our hotel room we might need to update the database with the booking details or contact our ERP system at the",
    "start": "757170",
    "end": "765630"
  },
  {
    "text": "end lambda returns a response to Lex which then forms a response back to the",
    "start": "765630",
    "end": "770850"
  },
  {
    "text": "user as we keep iterating through the bot design it's important to know that",
    "start": "770850",
    "end": "776190"
  },
  {
    "text": "Lex allows us to version all the changes we are making to the part which also allows us to roll back to an older",
    "start": "776190",
    "end": "782520"
  },
  {
    "text": "version if the latest version is not working out well before we publish we",
    "start": "782520",
    "end": "787530"
  },
  {
    "text": "can specify an Elias and map the lies to a version this is useful to create",
    "start": "787530",
    "end": "793050"
  },
  {
    "text": "development test staging or a production version for example when we save an",
    "start": "793050",
    "end": "798510"
  },
  {
    "text": "intent change within a bot we need to first build this new version this will create the",
    "start": "798510",
    "end": "803860"
  },
  {
    "text": "underlying in a new model based on the slots and utterances that we have defined while designing the bot we can",
    "start": "803860",
    "end": "811270"
  },
  {
    "text": "then test the bot and if satisfied publish it to the live environment well",
    "start": "811270",
    "end": "817120"
  },
  {
    "text": "there are many ways to deploy late spots to multiple channels including facebook Messenger slack etc and then there are",
    "start": "817120",
    "end": "823780"
  },
  {
    "text": "many tutorials already available that tells you how to do that today we'll",
    "start": "823780",
    "end": "828910"
  },
  {
    "text": "demo how to integrate legs with your web or mobile application as you can see on",
    "start": "828910",
    "end": "834460"
  },
  {
    "text": "screen for this demo we'll use a server less architecture where we will call the",
    "start": "834460",
    "end": "840100"
  },
  {
    "text": "necessary AWS api's directly from the browser using javascript it does the",
    "start": "840100",
    "end": "846280"
  },
  {
    "text": "authentication and authorization using AWS kognito which generates a temporary token so that you don't have to store",
    "start": "846280",
    "end": "852190"
  },
  {
    "text": "any credential on the client after that it calls Lex and Polly directly to",
    "start": "852190",
    "end": "857920"
  },
  {
    "text": "integrate with your chat bot since javascript is the basis of this integration we have hosted the",
    "start": "857920",
    "end": "863680"
  },
  {
    "text": "application directly out of Amazon s3 as a static website by the way the full",
    "start": "863680",
    "end": "869860"
  },
  {
    "text": "code is available in the github link that you are seeing on screen and it comes with a very neat CloudFormation",
    "start": "869860",
    "end": "875560"
  },
  {
    "text": "template that creates the entire stack with a single thing the bot we are going",
    "start": "875560",
    "end": "881260"
  },
  {
    "text": "to build today is one that many of us have wished for many times it's an",
    "start": "881260",
    "end": "886810"
  },
  {
    "text": "excuse but the base version first created by some of my colleagues in",
    "start": "886810",
    "end": "892660"
  },
  {
    "text": "India for a workshop which I modified to add a bunch of new features to it you",
    "start": "892660",
    "end": "897970"
  },
  {
    "text": "can ask it to generate an appropriate excuse for one of your common scenes it",
    "start": "897970",
    "end": "903370"
  },
  {
    "text": "takes in a few inputs on what did you do to need an excuse for or when you did",
    "start": "903370",
    "end": "909790"
  },
  {
    "text": "what you did and generates an excuse some of them are interesting others",
    "start": "909790",
    "end": "915460"
  },
  {
    "text": "quite hilarious alright guys we are going to start with",
    "start": "915460",
    "end": "921130"
  },
  {
    "text": "the Amazon Lakes console we'll go to the AWS console and hit the Amazon Lakes",
    "start": "921130",
    "end": "926460"
  },
  {
    "text": "once we are at the Amazon Lakes console we are going to first create a bot and since we are creating a bore",
    "start": "926460",
    "end": "932920"
  },
  {
    "text": "to generate excuse for let us name it excuse pot next we are going to choose a",
    "start": "932920",
    "end": "942610"
  },
  {
    "text": "voice these are some of the voices that Amazon Polly supports as in when you",
    "start": "942610",
    "end": "948279"
  },
  {
    "text": "input a text to Polly and generate the speech out of it you can choose which of the supported voices you want to",
    "start": "948279",
    "end": "954730"
  },
  {
    "text": "generate speech to be in in our case we lose Sally as the voice which means if",
    "start": "954730",
    "end": "960699"
  },
  {
    "text": "Lex calls Polly to play a voice back to the user it will leave Sally as that voice we are going to put the session",
    "start": "960699",
    "end": "968500"
  },
  {
    "text": "timeout as five minutes and then we are going to click on this radio button",
    "start": "968500",
    "end": "973990"
  },
  {
    "text": "which tells that this bot is not subject to Children's Privacy Protection Act so",
    "start": "973990",
    "end": "980440"
  },
  {
    "text": "we hit the create button and now our bot skeleton is created now as discussed",
    "start": "980440",
    "end": "986470"
  },
  {
    "text": "earlier whenever you create a board the first step is to define the action for you and the action for this pot by the",
    "start": "986470",
    "end": "993220"
  },
  {
    "text": "way is to generate excuses and how do you define an action you define by creating an intent so we'll go and",
    "start": "993220",
    "end": "1001470"
  },
  {
    "text": "create an intent and we'll name this intent as excused intent and add it you",
    "start": "1001470",
    "end": "1011430"
  },
  {
    "text": "can see that the excused intent has been listed here once you create an intent",
    "start": "1011430",
    "end": "1016970"
  },
  {
    "text": "next we have to add some sample utterances if you remember purpose of",
    "start": "1016970",
    "end": "1023150"
  },
  {
    "text": "occurrences is to let let us know how to end how the end user is going to invoke",
    "start": "1023150",
    "end": "1029910"
  },
  {
    "text": "this intent what are the different utterances the end user could potentially use in this case it could be",
    "start": "1029910",
    "end": "1038630"
  },
  {
    "text": "can you generate an excuse for me that's a valid question to ask it can also ask",
    "start": "1038630",
    "end": "1046790"
  },
  {
    "text": "give me an excuse",
    "start": "1049070",
    "end": "1052820"
  },
  {
    "text": "you can go ahead and ask need an excuse if you're desperate enough",
    "start": "1055210",
    "end": "1063700"
  },
  {
    "text": "let's for now just to find these three uh trances thing to remember is that by",
    "start": "1068120",
    "end": "1073710"
  },
  {
    "text": "no means these are exact matches so it's not that the user has to come and say exactly these same sentences these are",
    "start": "1073710",
    "end": "1081510"
  },
  {
    "text": "just some samples that we use to build our language model and as long as the user comes and says something around",
    "start": "1081510",
    "end": "1087870"
  },
  {
    "text": "these lines it should be picked up once you create the utterances the next step",
    "start": "1087870",
    "end": "1094170"
  },
  {
    "text": "is to create the slots and for this part we are going to collect two information",
    "start": "1094170",
    "end": "1100290"
  },
  {
    "text": "from the user one is what is this excuse",
    "start": "1100290",
    "end": "1107040"
  },
  {
    "text": "needed for I mean what is the reason for the excuse and the second one is when",
    "start": "1107040",
    "end": "1114210"
  },
  {
    "text": "did she do whatever she did to need the excuse for so the first one we are going",
    "start": "1114210",
    "end": "1122760"
  },
  {
    "text": "to name it excuse for which means what",
    "start": "1122760",
    "end": "1128250"
  },
  {
    "text": "is the reason for the excuse now if we look at into the slot type you can see that it comes with a bunch of implicit",
    "start": "1128250",
    "end": "1134220"
  },
  {
    "text": "data types that Amazon provides for example there is one date there are",
    "start": "1134220",
    "end": "1139530"
  },
  {
    "text": "others for color for country for CT etcetera but for the excuse for slot we",
    "start": "1139530",
    "end": "1147390"
  },
  {
    "text": "are going to create a custom slot type because there are some specific inputs that we want to gather from the user so",
    "start": "1147390",
    "end": "1155460"
  },
  {
    "text": "let's go ahead and create a custom slot Tech and we'll name this as excuse type",
    "start": "1155460",
    "end": "1163789"
  },
  {
    "text": "okay and we need to give the different options that this slot is going to",
    "start": "1164030",
    "end": "1170220"
  },
  {
    "text": "capture from the user's response so for this demos purpose we are going to have",
    "start": "1170220",
    "end": "1175610"
  },
  {
    "text": "three types of excuses addressed one would be forgot birthday very common at",
    "start": "1175610",
    "end": "1182520"
  },
  {
    "text": "least for me second could be for god",
    "start": "1182520",
    "end": "1188180"
  },
  {
    "text": "anniversary you better not but just in case third",
    "start": "1188180",
    "end": "1195240"
  },
  {
    "text": "one could be missing office don't know whether that's",
    "start": "1195240",
    "end": "1201870"
  },
  {
    "text": "applicable to you okay so these are the three different reasons for which this bot is going to generate",
    "start": "1201870",
    "end": "1208680"
  },
  {
    "text": "excuses and those are three values we defined for the slot type variable now",
    "start": "1208680",
    "end": "1216180"
  },
  {
    "text": "once we are done we can directly add the slot type to the intent we click on this button add type to intent and once we do",
    "start": "1216180",
    "end": "1223770"
  },
  {
    "text": "that you can see that one slot has already been created with the slot type",
    "start": "1223770",
    "end": "1230310"
  },
  {
    "text": "as excuse type we are going to name this excuse for and we need to prompt",
    "start": "1230310",
    "end": "1237720"
  },
  {
    "text": "something to the user the response of which is going to come and land into the",
    "start": "1237720",
    "end": "1243270"
  },
  {
    "text": "excuse for slot so let's prompt what do you need the excuse for that's a valid",
    "start": "1243270",
    "end": "1249510"
  },
  {
    "text": "question to ask so that's our first slot as I mentioned the second slot is going",
    "start": "1249510",
    "end": "1258240"
  },
  {
    "text": "to be the date for when she did what she did so we are going to name this excuse",
    "start": "1258240",
    "end": "1264240"
  },
  {
    "text": "VIN and since this is a date type we'll go ahead and tap use the Amazon implicit",
    "start": "1264240",
    "end": "1270690"
  },
  {
    "text": "date datatype that is available we need not create a custom slot type for this one and let's see what we can prompt we",
    "start": "1270690",
    "end": "1277860"
  },
  {
    "text": "have captured the reason for the excuse and we need the date so let's ask okay",
    "start": "1277860",
    "end": "1284240"
  },
  {
    "text": "when did you screw up okay",
    "start": "1284240",
    "end": "1293250"
  },
  {
    "text": "and we are going to add this choose this for the intent so now we have our slots",
    "start": "1293250",
    "end": "1299250"
  },
  {
    "text": "ready we have two slots which are ready and we have defined the utterances too",
    "start": "1299250",
    "end": "1305960"
  },
  {
    "text": "so next we have to define the fulfillment if you remember what's a",
    "start": "1305960",
    "end": "1312419"
  },
  {
    "text": "fulfillment it's the business logic which will define the action to be taken",
    "start": "1312419",
    "end": "1317549"
  },
  {
    "text": "by this bot and we are going to using the slots and the trenches and we are",
    "start": "1317549",
    "end": "1322950"
  },
  {
    "text": "going to use AWS lambda to build that business logic I have already created a lambda function known as excuse",
    "start": "1322950",
    "end": "1330210"
  },
  {
    "text": "generator if you click on the view in lambda console that particular link it",
    "start": "1330210",
    "end": "1335880"
  },
  {
    "text": "takes you to the lambda console you can see the execution at a console and it's",
    "start": "1335880",
    "end": "1341400"
  },
  {
    "text": "a Python code uses the Python 3.6 runtime if you look at the code the",
    "start": "1341400",
    "end": "1347610"
  },
  {
    "text": "entry point to any lambda from function the function that the trigger calls is",
    "start": "1347610",
    "end": "1352860"
  },
  {
    "text": "lambda underscore Handler it passes the event and context capturing all the information that needs to pass and from",
    "start": "1352860",
    "end": "1361289"
  },
  {
    "text": "within the lambda underscore handler if the invocation source is fulfillment",
    "start": "1361289",
    "end": "1369210"
  },
  {
    "text": "code hook we call fulfill excuses the helper function okay before we go to",
    "start": "1369210",
    "end": "1377730"
  },
  {
    "text": "fulfill excuses let's look at what we are doing here so we have these three",
    "start": "1377730",
    "end": "1383610"
  },
  {
    "text": "reasons excuses for missing office and we have generated a bunch of different",
    "start": "1383610",
    "end": "1389490"
  },
  {
    "text": "excuses for each of them for forgetting birthday for getting anniversary for",
    "start": "1389490",
    "end": "1394500"
  },
  {
    "text": "each of these three types we have a bunch of different excuses that we have defined and then we use the random",
    "start": "1394500",
    "end": "1403350"
  },
  {
    "text": "library that we imported the random library and we will randomly pick up one of the excuses and show it back to the",
    "start": "1403350",
    "end": "1410669"
  },
  {
    "text": "user so out of these different options we are going to choose one of them within the fulfill excuses function we",
    "start": "1410669",
    "end": "1419010"
  },
  {
    "text": "are going to create constructor message the message would say you should say and",
    "start": "1419010",
    "end": "1424169"
  },
  {
    "text": "then pick up the excuse and also we asked like so did you did",
    "start": "1424169",
    "end": "1430600"
  },
  {
    "text": "the excuse help would you like to give us a feedback so that's our message and to play it back two legs we are going to",
    "start": "1430600",
    "end": "1437860"
  },
  {
    "text": "create a dialogue action with type confirm intent put the message there",
    "start": "1437860",
    "end": "1445350"
  },
  {
    "text": "okay so confirm intent has to be the type whatever message we constructed we",
    "start": "1445350",
    "end": "1452380"
  },
  {
    "text": "are going to pass it in message and then we are going to keep the intent name as excused intent because it is going to go",
    "start": "1452380",
    "end": "1458560"
  },
  {
    "text": "back to the same same intent and we passed the slot values that we have so",
    "start": "1458560",
    "end": "1463570"
  },
  {
    "text": "that's a lambda so now we have the fulfilment lambda ready the only thing",
    "start": "1463570",
    "end": "1468940"
  },
  {
    "text": "we are left to do is do the sentiment analysis of the users interaction and we",
    "start": "1468940",
    "end": "1474520"
  },
  {
    "text": "do it by defining a validation lambda code hook so in the validation lambda",
    "start": "1474520",
    "end": "1480550"
  },
  {
    "text": "code hook we are going to capture the users interaction we are going to use Amazon comprehend and to capture the",
    "start": "1480550",
    "end": "1488140"
  },
  {
    "text": "sentiment and based on that we are going to take some action so we click on to",
    "start": "1488140",
    "end": "1495760"
  },
  {
    "text": "create this lambda hook again I have a pre created lambda function which is",
    "start": "1495760",
    "end": "1501400"
  },
  {
    "text": "known as sentiment extract sentiment and",
    "start": "1501400",
    "end": "1506860"
  },
  {
    "text": "again you can click on this link that will take you to the lambda console to",
    "start": "1506860",
    "end": "1512500"
  },
  {
    "text": "the extract sentiment lambda function here also have used the Python 3.6",
    "start": "1512500",
    "end": "1519520"
  },
  {
    "text": "runtime and in the code you can see that we are doing some interesting things so firstly we import boto 3 library which",
    "start": "1519520",
    "end": "1527110"
  },
  {
    "text": "is the AWS Python client and we create the Amazon comprehend client by just",
    "start": "1527110",
    "end": "1533920"
  },
  {
    "text": "calling moto3 dot client and pass comprehend as a parameter so that gives us the comprehend client and then we",
    "start": "1533920",
    "end": "1540850"
  },
  {
    "text": "call the detect underscore sentiment function on the comprehend client and pass the text the input transcript that",
    "start": "1540850",
    "end": "1547780"
  },
  {
    "text": "the user has passed in give the language code as English and we get the sentiment",
    "start": "1547780",
    "end": "1552970"
  },
  {
    "text": "back that's where we are getting the sentiment and if the sentiment is negative",
    "start": "1552970",
    "end": "1558290"
  },
  {
    "text": "what we do is we again create a dialogue action with the type as delicate because",
    "start": "1558290",
    "end": "1565280"
  },
  {
    "text": "we what we are going to do here is if the sentiment is negative we are going to pass the flow back two legs along",
    "start": "1565280",
    "end": "1571640"
  },
  {
    "text": "with the slot values so that it can generate one more excuse and give it back to the user to see whether she",
    "start": "1571640",
    "end": "1577160"
  },
  {
    "text": "likes it or not if the sentiment is positive then we are",
    "start": "1577160",
    "end": "1582530"
  },
  {
    "text": "done so we put the type as confirm intent and with a satisfied message okay",
    "start": "1582530",
    "end": "1591800"
  },
  {
    "text": "because there is nothing more to do the satisfied message is thanks for your feedback glad to be of help and then we",
    "start": "1591800",
    "end": "1600130"
  },
  {
    "text": "switch the intent to a successful operations intent so that's it so we",
    "start": "1600130",
    "end": "1607100"
  },
  {
    "text": "have the sentiment analysis hook - we have the slots we have collected both",
    "start": "1607100",
    "end": "1614540"
  },
  {
    "text": "the two values that we want we have the fulfilment lambda we have the validation lambda so we are done we are ready to",
    "start": "1614540",
    "end": "1621800"
  },
  {
    "text": "build before doing that we will quickly save the intent and there is one thing I",
    "start": "1621800",
    "end": "1628430"
  },
  {
    "text": "need to do before hitting the build button is we'll create a dummy a dummy",
    "start": "1628430",
    "end": "1633650"
  },
  {
    "text": "intent where where the flow is going to pass once the user is satisfied and",
    "start": "1633650",
    "end": "1638840"
  },
  {
    "text": "everything is done so this is where I'm going to finally pass the flow back let",
    "start": "1638840",
    "end": "1644930"
  },
  {
    "text": "me just quickly create this domain tent it doesn't too much its name is new",
    "start": "1644930",
    "end": "1650390"
  },
  {
    "text": "intent so I'll quickly create that",
    "start": "1650390",
    "end": "1654160"
  },
  {
    "text": "alright then so we are ready to build our bot so we'll hit the build button and it takes close to a minute to build",
    "start": "1656380",
    "end": "1667240"
  },
  {
    "text": "so while it gets built you can see that there is a test chat bot link on the",
    "start": "1667240",
    "end": "1673250"
  },
  {
    "text": "right which you can click this gives a very cool little way of testing out your",
    "start": "1673250",
    "end": "1680120"
  },
  {
    "text": "bot the features there is a place where you can type in your whatever your want",
    "start": "1680120",
    "end": "1686120"
  },
  {
    "text": "the user is going to input and you are going to get the response from legs in that and it also gives you a way",
    "start": "1686120",
    "end": "1692240"
  },
  {
    "text": "of inspecting the response so whatever are the details of the response Jason and the slot values what is going to be",
    "start": "1692240",
    "end": "1699800"
  },
  {
    "text": "the so it is going to give all that so now our excuse body is built so let's",
    "start": "1699800",
    "end": "1705290"
  },
  {
    "text": "let's test it out will right give me an excuse okay and okay we get what do you",
    "start": "1705290",
    "end": "1716510"
  },
  {
    "text": "need the excuse for so we are getting the response from Lex and you can see that in the inspect response you have",
    "start": "1716510",
    "end": "1722900"
  },
  {
    "text": "excuse for highlighted in blue which says that you know that is what the response to this prompt is going to be",
    "start": "1722900",
    "end": "1728450"
  },
  {
    "text": "filled with so that is the slot which is going to be filled by this this particular prompt okay just just one",
    "start": "1728450",
    "end": "1739040"
  },
  {
    "text": "more build okay so will now go to the UI from which we are going to integrate the",
    "start": "1739040",
    "end": "1745490"
  },
  {
    "text": "port we said that we we are going to integrate this bought with a web application and you if you recollect the",
    "start": "1745490",
    "end": "1752960"
  },
  {
    "text": "architecture it's a server less architecture that we are building and we are hosting it out of history bucket only so all the required codes the Java",
    "start": "1752960",
    "end": "1760880"
  },
  {
    "text": "scripts which is primarily how we are going to integrate with legs everything is in this s3 bucket and it has a few",
    "start": "1760880",
    "end": "1768890"
  },
  {
    "text": "html's you know as a hook point for those java scripts if you go to the",
    "start": "1768890",
    "end": "1775910"
  },
  {
    "text": "properties tab you can see that the available static website hosting and you",
    "start": "1775910",
    "end": "1782990"
  },
  {
    "text": "get a link so if you go to this link that will actually take you to the to the web UI this is the web UI and it",
    "start": "1782990",
    "end": "1793280"
  },
  {
    "text": "comes with iframe generate excuses iframe and this is where you can the",
    "start": "1793280",
    "end": "1799250"
  },
  {
    "text": "user can you know click so this is how you integrate with your application so let's go",
    "start": "1799250",
    "end": "1804290"
  },
  {
    "text": "will will okay the build is done so we",
    "start": "1804290",
    "end": "1812390"
  },
  {
    "text": "are ready to test so let's type in",
    "start": "1812390",
    "end": "1816820"
  },
  {
    "text": "need an excuse okay let's see what do",
    "start": "1818210",
    "end": "1825150"
  },
  {
    "text": "you need to excuse for let's say forgot her birthday and okay when did you screw",
    "start": "1825150",
    "end": "1835710"
  },
  {
    "text": "up yesterday you should say I did not",
    "start": "1835710",
    "end": "1844050"
  },
  {
    "text": "know even you had a birthday your deveined remember that's funny not going to work probably for me so I",
    "start": "1844050",
    "end": "1852809"
  },
  {
    "text": "say sorry that's not going to work okay",
    "start": "1852809",
    "end": "1860809"
  },
  {
    "text": "it gives me another one I didn't forget you but look at the future",
    "start": "1860809",
    "end": "1865920"
  },
  {
    "text": "walking-sticks medications boiled vegetables and knowing grandkids it was",
    "start": "1865920",
    "end": "1871350"
  },
  {
    "text": "just being polite are you kidding me that's pathetic okay so it tries another one that divine",
    "start": "1871350",
    "end": "1879990"
  },
  {
    "text": "thing let's take it this time okay so that's I can try that out that should",
    "start": "1879990",
    "end": "1889190"
  },
  {
    "text": "work thank you okay once you hit that it",
    "start": "1889190",
    "end": "1894290"
  },
  {
    "text": "keeps the positive response and it responds back thanks for your feedback glad to be of help so you could see that",
    "start": "1894290",
    "end": "1900630"
  },
  {
    "text": "captured the sentiment from my response whenever the sentiment was negative it was trying something else it was trying",
    "start": "1900630",
    "end": "1907410"
  },
  {
    "text": "to give another excuse and finally when it detected a positive sentiment it",
    "start": "1907410",
    "end": "1914309"
  },
  {
    "text": "showed the satisfactory message and it takes it out of that intent flow okay so",
    "start": "1914309",
    "end": "1922440"
  },
  {
    "text": "that's how easy it is to build the bots and integrate it with your application to gain more confidence and hands-on",
    "start": "1922440",
    "end": "1929760"
  },
  {
    "text": "experience with AWS access the digital training built by AWS experts attend our",
    "start": "1929760",
    "end": "1936179"
  },
  {
    "text": "instructor-led classes by qualified AWS instructors and learn how to design",
    "start": "1936179",
    "end": "1941309"
  },
  {
    "text": "deploy and operate highly available cost-effective and secure applications on a deploys and validate your technical",
    "start": "1941309",
    "end": "1949020"
  },
  {
    "text": "expertise with AWS and use practice exams to help you prepare for AWS certification as",
    "start": "1949020",
    "end": "1955960"
  },
  {
    "text": "mentioned earlier AWS also has a wide range of partner ecosystem to help you",
    "start": "1955960",
    "end": "1961059"
  },
  {
    "text": "focus on your success and take full advantage of all the business benefits that the bluest has to offer",
    "start": "1961059",
    "end": "1967380"
  },
  {
    "text": "to learn more about EPA and partners and find the right one that fits your needs",
    "start": "1967380",
    "end": "1972750"
  },
  {
    "text": "please visit the AWS APN booth at our showcase finally I would like to thank",
    "start": "1972750",
    "end": "1979809"
  },
  {
    "text": "you for attending today and sticking it out until the very end of the presentation thank you",
    "start": "1979809",
    "end": "1987419"
  }
]