[
  {
    "text": "This is My Architecture",
    "start": "1962",
    "end": "3365"
  },
  {
    "text": "Akatsuki: Building Stable And Scalable \nLarge Scale Game Servers With Amazon ECS",
    "start": "3365",
    "end": "5440"
  },
  {
    "text": "Welcome to \"This is My Architecture\".",
    "start": "6717",
    "end": "8818"
  },
  {
    "text": "Today, we have Yuto Komai from Akatsuki.",
    "start": "8818",
    "end": "12642"
  },
  {
    "text": "Thank you for coming.",
    "start": "12642",
    "end": "13700"
  },
  {
    "text": "My pleasure.",
    "start": "13700",
    "end": "15664"
  },
  {
    "text": "Could you start off by",
    "start": "15664",
    "end": "18000"
  },
  {
    "text": "introducing Akatsuki and your architecture?",
    "start": "18000",
    "end": "21239"
  },
  {
    "text": "Akatsuki is an entertainment company \nthat develops",
    "start": "21239",
    "end": "24295"
  },
  {
    "text": "live experience business \nincluding mobile games development.",
    "start": "24295",
    "end": "28680"
  },
  {
    "text": "Today, I'll share with you our architecture",
    "start": "28680",
    "end": "32791"
  },
  {
    "text": "that constantly runs over 1000 containers.",
    "start": "32791",
    "end": "35367"
  },
  {
    "text": "This workload is a back-end system \nfor mobile games.",
    "start": "35367",
    "end": "38472"
  },
  {
    "text": "We operate multiple game titles.",
    "start": "38472",
    "end": "41630"
  },
  {
    "text": "For example,",
    "start": "41630",
    "end": "43814"
  },
  {
    "text": "there is a game released by Square Enix",
    "start": "43814",
    "end": "46607"
  },
  {
    "text": "called Romancing SaGa Re: Universe.",
    "start": "46607",
    "end": "49183"
  },
  {
    "text": "We develop the server for this game.",
    "start": "49183",
    "end": "52067"
  },
  {
    "text": "This game has reached \nover 15 million downloads",
    "start": "52068",
    "end": "55990"
  },
  {
    "text": "in the Japanese mobile app store alone",
    "start": "55990",
    "end": "58702"
  },
  {
    "text": "and has been enjoyed by millions of users.",
    "start": "58702",
    "end": "61147"
  },
  {
    "text": "Yes, Re: Universe is popular.",
    "start": "61147",
    "end": "62554"
  },
  {
    "text": "Thank you.",
    "start": "62554",
    "end": "63338"
  },
  {
    "text": "So you mentioned this architecture \nis used for the back-end.",
    "start": "63338",
    "end": "67231"
  },
  {
    "text": "How does it handle user requests?",
    "start": "67231",
    "end": "70650"
  },
  {
    "text": "When it receives API requests \nfrom mobile devices,",
    "start": "70680",
    "end": "73969"
  },
  {
    "text": "it sends back the game logic.",
    "start": "73969",
    "end": "76844"
  },
  {
    "text": "When a command\nsuch as \"attack\" is run on a mobile,",
    "start": "76844",
    "end": "81741"
  },
  {
    "text": "the server calculates \nthe appropriate amount of damage",
    "start": "81741",
    "end": "85024"
  },
  {
    "text": "and gives a response.",
    "start": "85100",
    "end": "87297"
  },
  {
    "text": "Requests are sent to EC2-based ECS via ALB.",
    "start": "87297",
    "end": "91828"
  },
  {
    "text": "Player data is stored on Aurora",
    "start": "91829",
    "end": "94399"
  },
  {
    "text": "and cache information is stored on ElastiCache.",
    "start": "94399",
    "end": "97236"
  },
  {
    "text": "Game logic is calculated by the app on ECS",
    "start": "97236",
    "end": "100990"
  },
  {
    "text": "and is sent back to the client.",
    "start": "100990",
    "end": "103948"
  },
  {
    "text": "Games are very...",
    "start": "103948",
    "end": "106993"
  },
  {
    "text": "When a new event begins,",
    "start": "106993",
    "end": "109466"
  },
  {
    "text": "very many players may access all at once.",
    "start": "109467",
    "end": "113002"
  },
  {
    "text": "It causes heavy traffic on the system.",
    "start": "113002",
    "end": "116878"
  },
  {
    "text": "So we link EC2 and ECS for auto scaling.",
    "start": "116878",
    "end": "121595"
  },
  {
    "text": "By auto scaling EC2 and scaling it out,",
    "start": "121595",
    "end": "124920"
  },
  {
    "text": "the startup event is detected on CloudWatch Events.",
    "start": "124920",
    "end": "128595"
  },
  {
    "text": "The number of ECS tasks is controlled by Lambda.",
    "start": "128595",
    "end": "132384"
  },
  {
    "text": "It allows EC2 and ECS to link",
    "start": "132384",
    "end": "135976"
  },
  {
    "text": "for auto scaling in about two minutes.",
    "start": "135976",
    "end": "140106"
  },
  {
    "text": "Yes, spike is a problem in mobile games.",
    "start": "140106",
    "end": "142786"
  },
  {
    "text": "It's great that you can scale \nwithin two minutes after detecting it.",
    "start": "142786",
    "end": "149032"
  },
  {
    "text": "What part of this architecture did you focus on?",
    "start": "149032",
    "end": "152489"
  },
  {
    "text": "We focused on increasing concurrent connectivity.",
    "start": "152489",
    "end": "157163"
  },
  {
    "text": "During peak periods, there may be \nmore than a million requests per minute,",
    "start": "157163",
    "end": "161627"
  },
  {
    "text": "or over 700 containers to scale.",
    "start": "161627",
    "end": "165717"
  },
  {
    "text": "Even then, the operation was stable.",
    "start": "165717",
    "end": "168799"
  },
  {
    "text": "A million requests per minute \nand 700 containers.",
    "start": "168800",
    "end": "171984"
  },
  {
    "text": "That's a lot.",
    "start": "171984",
    "end": "173737"
  },
  {
    "text": "How did you manage to stabilize the operation?",
    "start": "173738",
    "end": "177508"
  },
  {
    "text": "We conduct five different kinds of stress test.",
    "start": "177508",
    "end": "182749"
  },
  {
    "text": "First is the app's performance test.",
    "start": "182749",
    "end": "187670"
  },
  {
    "text": "We conduct a stress test on the system",
    "start": "187670",
    "end": "193288"
  },
  {
    "text": "by mocking the clients' behavior.",
    "start": "193288",
    "end": "195325"
  },
  {
    "text": "The server users \nthe app performance monitoring service",
    "start": "195325",
    "end": "199080"
  },
  {
    "text": "to identify the app's bottleneck.",
    "start": "199080",
    "end": "202040"
  },
  {
    "text": "This test is repeated multiple times.",
    "start": "202040",
    "end": "205247"
  },
  {
    "text": "Second is the overload test.",
    "start": "205248",
    "end": "208048"
  },
  {
    "text": "This test identifies the bottleneck \nby overloading EC2 and RDS",
    "start": "208048",
    "end": "212630"
  },
  {
    "text": "so the CPU would run at 100%.",
    "start": "212630",
    "end": "214770"
  },
  {
    "text": "Let's say EC2 is overloaded",
    "start": "214770",
    "end": "219045"
  },
  {
    "text": "and causes an error \nwhen the CPU usage is 70%.",
    "start": "219045",
    "end": "222293"
  },
  {
    "text": "Here, we check if any resource is left unused",
    "start": "222293",
    "end": "225234"
  },
  {
    "text": "or if there's any parameter restrictions",
    "start": "225234",
    "end": "229101"
  },
  {
    "text": "for parameter tuning of the OS,",
    "start": "229102",
    "end": "231421"
  },
  {
    "text": "database middleware or app.",
    "start": "231421",
    "end": "234222"
  },
  {
    "text": "Third is the scaling test.",
    "start": "234222",
    "end": "236889"
  },
  {
    "text": "We check whether the vertically and horizontally \npartitioned database is properly distributed,",
    "start": "236889",
    "end": "241386"
  },
  {
    "text": "or the scaling in and out works properly.",
    "start": "241386",
    "end": "244348"
  },
  {
    "text": "On top of that,",
    "start": "244348",
    "end": "246024"
  },
  {
    "text": "we also check if the system sizing is adequate",
    "start": "246024",
    "end": "251481"
  },
  {
    "text": "for the expected number of access to the system.",
    "start": "251481",
    "end": "256599"
  },
  {
    "text": "Fourth is the failure test.",
    "start": "256599",
    "end": "260747"
  },
  {
    "text": "We cause failures on EC2 and RDS \non purpose to see if the service stops.",
    "start": "260748",
    "end": "264943"
  },
  {
    "text": "For example,",
    "start": "264943",
    "end": "266518"
  },
  {
    "text": "we cause failures on Aurora \non purpose during a stress test",
    "start": "266518",
    "end": "271556"
  },
  {
    "text": "to see if the service would keep running.",
    "start": "271556",
    "end": "274233"
  },
  {
    "text": "If it stops, we would identify the cause",
    "start": "274233",
    "end": "276921"
  },
  {
    "text": "or create an auto-recovery system.",
    "start": "276921",
    "end": "280677"
  },
  {
    "text": "Fifth is the long-hour test.",
    "start": "280677",
    "end": "282833"
  },
  {
    "text": "We give stress for long hours \nto see if it causes any troubles",
    "start": "282833",
    "end": "287626"
  },
  {
    "text": "such as memory leaks.",
    "start": "287626",
    "end": "289864"
  },
  {
    "text": "We conduct these kinds of stress tests \nfrom different perspectives",
    "start": "289864",
    "end": "293827"
  },
  {
    "text": "to improve concurrent connectivity \nand reliability of the system.",
    "start": "293827",
    "end": "296593"
  },
  {
    "text": "I see. By conducting such extensive tests,",
    "start": "296593",
    "end": "299711"
  },
  {
    "text": "you realize stable operation \nand improve performance.",
    "start": "299711",
    "end": "303372"
  },
  {
    "text": "Great effort.",
    "start": "303372",
    "end": "304429"
  },
  {
    "text": "Thank you.",
    "start": "304429",
    "end": "305366"
  },
  {
    "text": "What are some of the things \nyou've achieved from this architecture?",
    "start": "305380",
    "end": "309102"
  },
  {
    "text": "Yes.",
    "start": "309102",
    "end": "310300"
  },
  {
    "text": "When the service was first released\nthere was much more traffic than we expected.",
    "start": "310320",
    "end": "317003"
  },
  {
    "text": "It was once ranked at the top \nin the smartphone app store",
    "start": "317003",
    "end": "321443"
  },
  {
    "text": "and speaking of the system,",
    "start": "321443",
    "end": "323600"
  },
  {
    "text": "it received more than a million requests per minute.",
    "start": "323600",
    "end": "326662"
  },
  {
    "text": "Even then, it remained stable.",
    "start": "326662",
    "end": "329487"
  },
  {
    "text": "This stress test,",
    "start": "329488",
    "end": "332135"
  },
  {
    "text": "including the auto-scaling architecture \nis also used on other games",
    "start": "332135",
    "end": "336103"
  },
  {
    "text": "and we have been running \nmore than 1000 containers at Akatsuki.",
    "start": "336103",
    "end": "342464"
  },
  {
    "text": "That's great. So your company \nuses a lot of this architecture.",
    "start": "342464",
    "end": "346000"
  },
  {
    "text": "That's  a great impact on your business, too.",
    "start": "346050",
    "end": "350513"
  },
  {
    "text": "Please let our audience know \nwhich areas you'd like to improve further",
    "start": "350514",
    "end": "356444"
  },
  {
    "text": "and some features you plan to develop.",
    "start": "357142",
    "end": "360472"
  },
  {
    "text": "Sure.",
    "start": "360472",
    "end": "362564"
  },
  {
    "text": "We're considering a system \nthat automatically performs stress tests.",
    "start": "362564",
    "end": "366267"
  },
  {
    "text": "Game apps are evolving every day.",
    "start": "366267",
    "end": "368912"
  },
  {
    "text": "We are currently perfoming \na stress test for every version update.",
    "start": "368912",
    "end": "371492"
  },
  {
    "text": "To detect a change in load characteristics faster\nwe are considering a system",
    "start": "371550",
    "end": "375294"
  },
  {
    "text": "that automatically and constantly \nperforms load tests.",
    "start": "375295",
    "end": "378824"
  },
  {
    "text": "That could lead to greater efficiency \nin development and operation.",
    "start": "378824",
    "end": "382970"
  },
  {
    "text": "Lastly, do you have \nany message to our audience?",
    "start": "382970",
    "end": "386225"
  },
  {
    "text": "An international version of \nRomancing SaGa Re: Universe is underway.",
    "start": "386225",
    "end": "391384"
  },
  {
    "text": "Please look forward to it.",
    "start": "391384",
    "end": "393262"
  },
  {
    "text": "Thank you. We look forward to it.",
    "start": "393262",
    "end": "396070"
  },
  {
    "text": "Today's architecture is used on mobile games\nwhere spikes are likely to occur.",
    "start": "396342",
    "end": "401529"
  },
  {
    "text": "It auto scales within two minutes \nwhen it detects a spike.",
    "start": "401529",
    "end": "405188"
  },
  {
    "text": "in order to stabilize the operation.",
    "start": "405210",
    "end": "408000"
  },
  {
    "text": "This would be the end of the lecture.",
    "start": "408000",
    "end": "410600"
  },
  {
    "text": "Thank you, Mr. Komai.",
    "start": "410600",
    "end": "411948"
  },
  {
    "text": "Thank you.",
    "start": "411948",
    "end": "413225"
  },
  {
    "text": "I hope this helps our audience.",
    "start": "414350",
    "end": "417813"
  },
  {
    "text": "This is Akatsuki's \"This is My Architecture\".",
    "start": "417813",
    "end": "420865"
  },
  {
    "text": "Thank you for watching",
    "start": "420865",
    "end": "422658"
  },
  {
    "text": "For more information visit\naws.amazon.com/this-is-my-architecture",
    "start": "422658",
    "end": "426000"
  }
]