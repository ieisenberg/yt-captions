[
  {
    "start": "0",
    "end": "38000"
  },
  {
    "text": "all right time is 4 o'clock so let's get started and first of all I guess good",
    "start": "470",
    "end": "5479"
  },
  {
    "text": "laughter never won and they're welcome to this talk on how to apply the principles of chaos engineering to",
    "start": "5479",
    "end": "10839"
  },
  {
    "text": "servers we can spend a few minutes to talk about what is chaos engineering and",
    "start": "10839",
    "end": "16100"
  },
  {
    "text": "what it is not and some of the new challenges that the service paradigm has presented to the current set of tools",
    "start": "16100",
    "end": "22820"
  },
  {
    "text": "and practices that we have for doing chaos engineering and how maybe to treat some of these current practices to make",
    "start": "22820",
    "end": "29000"
  },
  {
    "text": "them work for service technology so",
    "start": "29000",
    "end": "37430"
  },
  {
    "text": "after the talk or the slides going to be available on SlideShare and the recording will be pushed published on",
    "start": "37430",
    "end": "42890"
  },
  {
    "start": "38000",
    "end": "38000"
  },
  {
    "text": "the YouTube within 48 hours and you can find links to both on my blog as well",
    "start": "42890",
    "end": "48878"
  },
  {
    "text": "okay check us out so let's start with what is chaos engineering if we go to the",
    "start": "49809",
    "end": "56780"
  },
  {
    "text": "principles of chaos org you'll find this nice definition that says chaos engineering is the discipline",
    "start": "56780",
    "end": "63469"
  },
  {
    "text": "of experimenting on a distributed system in order to build confidence in the",
    "start": "63469",
    "end": "69290"
  },
  {
    "text": "system that capability to withstand turbulent conditions in production now that sounds great and it talks about",
    "start": "69290",
    "end": "75380"
  },
  {
    "text": "these to be the systems and talks about building confidence but personally I still find it to be quite vague in terms",
    "start": "75380",
    "end": "81650"
  },
  {
    "text": "of what do we actually do in practice personally I like to use analogies and I",
    "start": "81650",
    "end": "87530"
  },
  {
    "text": "think the perfect analogy for chaos engineering is vaccination and you can't talk about vaccination without going all",
    "start": "87530",
    "end": "94190"
  },
  {
    "start": "94000",
    "end": "94000"
  },
  {
    "text": "the way back to smallpox which was easily one of the most deadly diseases that we have ever encountered as a",
    "start": "94190",
    "end": "100400"
  },
  {
    "text": "species I was kidding people in the hundreds of thousands every year in Europe alone until about 1798 when at the journal",
    "start": "100400",
    "end": "109430"
  },
  {
    "start": "107000",
    "end": "107000"
  },
  {
    "text": "create the first vaccination and less than 200 years later we were able to",
    "start": "109430",
    "end": "114920"
  },
  {
    "text": "eradicate smallpox at a global scale today we have over 25 different",
    "start": "114920",
    "end": "120580"
  },
  {
    "text": "vaccinations for different infectious diseases in the UK by the time you're 14",
    "start": "120580",
    "end": "126230"
  },
  {
    "text": "you will have had at least 20 vaccinations already and vaccinations has become our most effective defense",
    "start": "126230",
    "end": "132410"
  },
  {
    "text": "against infectious diseases and it works by inserting ourselves with a very small dose of the disease not",
    "start": "132410",
    "end": "139190"
  },
  {
    "text": "enough to make us sick or anything but enough to trigger our body's autoimmune system to start identifying this foreign",
    "start": "139190",
    "end": "145400"
  },
  {
    "text": "agent as danger and to start building defense against it before we actually come into full contact with the disease",
    "start": "145400",
    "end": "151340"
  },
  {
    "text": "I think that's where we can do a lot of parallels with chaos engineering where",
    "start": "151340",
    "end": "157340"
  },
  {
    "text": "power we're using controlled experiments in order to inject failures into the system deliberately so that we can learn",
    "start": "157340",
    "end": "164840"
  },
  {
    "text": "about how the system fails under those failure conditions before they actually",
    "start": "164840",
    "end": "169970"
  },
  {
    "text": "happens in production in an uncontrolled fashion so now we share a time to understand how the system behaves and",
    "start": "169970",
    "end": "176840"
  },
  {
    "text": "then to go back and build our systems to be more resilient to harden our application against those failures and",
    "start": "176840",
    "end": "183730"
  },
  {
    "text": "in time as we repeat this process and iteratively harden application against",
    "start": "183730",
    "end": "189980"
  },
  {
    "text": "different forms of failures we can also start to build confidence that our system will actually be fine in",
    "start": "189980",
    "end": "195740"
  },
  {
    "text": "production regardless what turbulent conditions is going to face so I think it's fair to say that chaos engineering",
    "start": "195740",
    "end": "202370"
  },
  {
    "text": "is the vaccines for frailties in modern software which tend to be a disputed and",
    "start": "202370",
    "end": "208040"
  },
  {
    "text": "B runs in the cloud so my name is yen tre I'm a principal engineer at the zone",
    "start": "208040",
    "end": "214760"
  },
  {
    "text": "and as of July this year I'm also one of the a diverse community heroes that focuses on the server space I'm also the",
    "start": "214760",
    "end": "222770"
  },
  {
    "text": "author for the production-ready servlets video caused by Manning where I share a lot of the lessons I've learned by",
    "start": "222770",
    "end": "229490"
  },
  {
    "text": "running and operating lambda and service architectures in production and my spare",
    "start": "229490",
    "end": "235280"
  },
  {
    "text": "time also a very active blogger and I go to many conferences and user groups to talk about many other things that I've",
    "start": "235280",
    "end": "241160"
  },
  {
    "text": "learned about servers so the zone is sports streaming platform we have a",
    "start": "241160",
    "end": "247010"
  },
  {
    "text": "monthly subscription fee like Netflix except of except ye or no streaming",
    "start": "247010",
    "end": "252320"
  },
  {
    "text": "movies you're streaming live sporting events instead and of which we have over 40 different sports and over 200",
    "start": "252320",
    "end": "258680"
  },
  {
    "text": "different leagues all around the world and we have recently launched in the US and we are streaming boxing matches now",
    "start": "258680",
    "end": "265030"
  },
  {
    "text": "in total we are available in 70 countries and over 30 different devices",
    "start": "265030",
    "end": "270380"
  },
  {
    "start": "266000",
    "end": "266000"
  },
  {
    "text": "and at peak we have around a million concurrent viewers for any given sporting event that we are streaming and",
    "start": "270380",
    "end": "277430"
  },
  {
    "text": "because everything we stream our life and that we can't just turn around to our customer and say sorry guys we are",
    "start": "277430",
    "end": "284120"
  },
  {
    "text": "down please come back in half an hour when your event has finished so that",
    "start": "284120",
    "end": "289460"
  },
  {
    "text": "clearly is not going to fly of anybody which is why resiliency is very high up on the lesser priorities for us and",
    "start": "289460",
    "end": "295730"
  },
  {
    "text": "given the application runs in both containers and lambda functions and given my personal interest in the",
    "start": "295730",
    "end": "301940"
  },
  {
    "text": "servlet space I spend a lot of time thinking about how can I take some of this current practices that we have with",
    "start": "301940",
    "end": "308120"
  },
  {
    "text": "chaos engineering that doesn't quite work with servlets just yet and make them work and how use them to help me",
    "start": "308120",
    "end": "314210"
  },
  {
    "text": "make my service application more resilient so before we go into that I",
    "start": "314210",
    "end": "320120"
  },
  {
    "start": "319000",
    "end": "319000"
  },
  {
    "text": "also want to share with you some of my observations about this space of chaos engineering whereby often when I try to",
    "start": "320120",
    "end": "327440"
  },
  {
    "text": "read about what other people are doing I'm seeing blog post with titles like breaking face on purpose the joy of",
    "start": "327440",
    "end": "334220"
  },
  {
    "text": "destruction which worries me a lot because it just puts so much emphasis on",
    "start": "334220",
    "end": "339470"
  },
  {
    "text": "breaking something and nothing about why we're doing it our goal is not actually",
    "start": "339470",
    "end": "344960"
  },
  {
    "text": "to end up with a broken system in production it's the opposite we want systems running in production that are",
    "start": "344960",
    "end": "350150"
  },
  {
    "text": "resilient they can stay up even when bad things happen and we put so much",
    "start": "350150",
    "end": "355640"
  },
  {
    "text": "emphasis on the action of injective failures it's easy to conflate them with the outcome that you're hoping to",
    "start": "355640",
    "end": "361550"
  },
  {
    "text": "achieve the point is to learn how your system fails before they actually happen",
    "start": "361550",
    "end": "367910"
  },
  {
    "text": "in production to the knowledge they have the chance to make your system better to put the engineering effort too hard on",
    "start": "367910",
    "end": "373880"
  },
  {
    "text": "your system against those failures in time apart by doing this you can",
    "start": "373880",
    "end": "379400"
  },
  {
    "text": "repeatedly doing this you can start to build confidence that your system we actually been fine and even if we are",
    "start": "379400",
    "end": "385010"
  },
  {
    "text": "intentionally breaking things in order to learn how our systems fails breaking things itself is not the goal again if",
    "start": "385010",
    "end": "393620"
  },
  {
    "text": "you go back to the principles of chaos org which is generally one of the best places you can go to learn about chaos",
    "start": "393620",
    "end": "399560"
  },
  {
    "text": "engineering your outlines for simple anyone anyone of us can follow to start",
    "start": "399560",
    "end": "404849"
  },
  {
    "text": "doing care of experiments ourselves step one we need to know what normal actually",
    "start": "404849",
    "end": "410400"
  },
  {
    "text": "looks like for our system what does normal working condition looks like but",
    "start": "410400",
    "end": "417300"
  },
  {
    "text": "if everything is on fire all the time and you're constantly firefighting and every day you come in the different kind",
    "start": "417300",
    "end": "423360"
  },
  {
    "text": "of problem is breaking things then I'm afraid we don't have a steady state and you're not ready to start doing chaos",
    "start": "423360",
    "end": "429809"
  },
  {
    "text": "and chaos experiments for the same reason that you wouldn't fascinate someone if you know their immune system",
    "start": "429809",
    "end": "436259"
  },
  {
    "text": "is really broken and vaccination is just going to do them more harm than good but if you want the lucky ones and you",
    "start": "436259",
    "end": "443460"
  },
  {
    "text": "do have a working system and you have you know where your steady-state looks like then now you can start to design",
    "start": "443460",
    "end": "449069"
  },
  {
    "text": "scenarios and hypothesize given some failure happens in the system somewhere how is my system going to behave and",
    "start": "449069",
    "end": "456949"
  },
  {
    "text": "here you want to explore all kind of different scenarios including scenarios where you just have no idea what how",
    "start": "456949",
    "end": "465059"
  },
  {
    "start": "457000",
    "end": "457000"
  },
  {
    "text": "it's going to happen how your system is going to behave and those concern hours are great for learning and finding",
    "start": "465059",
    "end": "470490"
  },
  {
    "text": "weaknesses in your system very very quickly but given that you don't actually know what's going to happen maybe you didn't want to go straight to",
    "start": "470490",
    "end": "477330"
  },
  {
    "text": "production with those kind of experiments for good reason right and",
    "start": "477330",
    "end": "482389"
  },
  {
    "text": "experiments that actually graduate always to production they need to be carefully considered to plan and",
    "start": "482389",
    "end": "488159"
  },
  {
    "text": "carefully executed and by the time we hit production you should have a very good confidence that your system is",
    "start": "488159",
    "end": "494370"
  },
  {
    "text": "actually gonna be fine it's going to be the handle the failure properly and you only get there based on a knowledge are",
    "start": "494370",
    "end": "500759"
  },
  {
    "text": "you able to gain the understanding about a system that able to gain by running those experiments in the environment",
    "start": "500759",
    "end": "506610"
  },
  {
    "text": "outside of production where the stakes are not so high so run your experiments in their environment in staging running",
    "start": "506610",
    "end": "513690"
  },
  {
    "text": "experiments dev and staging where you can try our all these scenarios that are potentially risky that you don't want to",
    "start": "513690",
    "end": "519388"
  },
  {
    "text": "do them in production right away where you can learn so much about how a system behaves just as the goal of resonation",
    "start": "519389",
    "end": "527339"
  },
  {
    "text": "is not actually catch disease the goal of doing care of and a chaos experiments",
    "start": "527339",
    "end": "533040"
  },
  {
    "text": "not to actually hurt your production environment either and even though your systems gonna break",
    "start": "533040",
    "end": "538680"
  },
  {
    "text": "and your production anyway then that's not what we call a chaos experiment at all for one you haven't learned anything",
    "start": "538680",
    "end": "546150"
  },
  {
    "text": "didn't know before doing that you knew it's going to break and you broke congratulations you learned nothing",
    "start": "546150",
    "end": "551610"
  },
  {
    "text": "well hopefully you learn not to do again all you have done in that case we have",
    "start": "551610",
    "end": "557100"
  },
  {
    "text": "just anchored your users and damage your reputation and your plan so please do not make that very silly mistake the",
    "start": "557100",
    "end": "565800"
  },
  {
    "text": "next step would be to actually then go ahead and check some failures into your system and this is where Netflix is",
    "start": "565800",
    "end": "572250"
  },
  {
    "text": "simian army is a great tool for doing that especially if your application runs on VMs or runs on containers perhaps and",
    "start": "572250",
    "end": "579150"
  },
  {
    "text": "the engineers are Netflix also publish a free ebook that you can download from O'Reilly using this link where it talks",
    "start": "579150",
    "end": "586260"
  },
  {
    "text": "about how the engineers are Netflix how they run game days where everyone gathers together to brainstorm how the",
    "start": "586260",
    "end": "592560"
  },
  {
    "text": "system might fail under the different failure conditions and how what kind of experiments they can design and the also",
    "start": "592560",
    "end": "599190"
  },
  {
    "text": "talks about the process by which they communicate with each other in terms of what experiments are going to happen",
    "start": "599190",
    "end": "604380"
  },
  {
    "text": "where they're going to test and then how they go about planning and executing those experiments as well so whilst",
    "start": "604380",
    "end": "612090"
  },
  {
    "text": "running your experiment you're keeping an eye on a dashboard to make sure that at a top level at least there's nothing",
    "start": "612090",
    "end": "617280"
  },
  {
    "text": "really bad happening and if there is then stop the experiment right away and afterwards you go through your metrics",
    "start": "617280",
    "end": "623700"
  },
  {
    "text": "in more detail and try to look for evidence whether or not your steady state was impacted by the failure that",
    "start": "623700",
    "end": "630420"
  },
  {
    "text": "you injected and if you are able to find a weakness great something fell they",
    "start": "630420",
    "end": "636510"
  },
  {
    "text": "didn't expect now's the time to go ahead and fix it before he actually happens for real and since the experiments his",
    "start": "636510",
    "end": "646680"
  },
  {
    "start": "643000",
    "end": "643000"
  },
  {
    "text": "sister go is not actually her production read to make sure the experiments that we are running are actually done in a",
    "start": "646680",
    "end": "652620"
  },
  {
    "text": "controlled manner and which is why containment and blast radius should be front and center of your thinking at all",
    "start": "652620",
    "end": "658680"
  },
  {
    "text": "times especially we want if you want to move your experiment into the production environment the point again is not",
    "start": "658680",
    "end": "665820"
  },
  {
    "text": "actually her production so how do we actually keep those under control of anyone the most",
    "start": "665820",
    "end": "672600"
  },
  {
    "text": "important thing to do is make sure that everybody involved is communicated so that if your experiment can potentially",
    "start": "672600",
    "end": "679290"
  },
  {
    "text": "impact the systems owned by a different team make sure that they are aware of what you're killing and that they're",
    "start": "679290",
    "end": "684900"
  },
  {
    "text": "okay and they're ready for it it should never be surprised to somebody else that where your experiments end up hurting",
    "start": "684900",
    "end": "691500"
  },
  {
    "text": "their systems so I shouldn't have to come into the office one day look in my dashboard and everything is red and",
    "start": "691500",
    "end": "697530"
  },
  {
    "text": "paratime I spent hours investigating what the hell's going on it turns out wait a minute you guys are in some",
    "start": "697530",
    "end": "703410"
  },
  {
    "text": "experiment and that's why all my systems are broken oh it's great now that we've identified some cascade failures we can go back and",
    "start": "703410",
    "end": "710370"
  },
  {
    "text": "fix it but maybe you should have told me in the first place so they know what to look careful I supposed to waste all",
    "start": "710370",
    "end": "715380"
  },
  {
    "text": "this time trying to dig around and see what's going on and you also want to",
    "start": "715380",
    "end": "720450"
  },
  {
    "text": "make sure that you run your experiments during office hours when people are in there are you find our laptops and",
    "start": "720450",
    "end": "725790"
  },
  {
    "text": "they're ready to deal with any unexpected fallout and if you have",
    "start": "725790",
    "end": "731550"
  },
  {
    "text": "important long studies coming up for example if your Netflix and you're launching the new narcos mexico´s TV",
    "start": "731550",
    "end": "738690"
  },
  {
    "text": "show which is great by the way thank you if you haven't already I've done my",
    "start": "738690",
    "end": "743700"
  },
  {
    "text": "share already spent so much time watching a last week is amazing or in the case of the zone if a boxing match",
    "start": "743700",
    "end": "749400"
  },
  {
    "text": "is about to happen then avoid those important days important times at all cost you don't want to go to production",
    "start": "749400",
    "end": "755250"
  },
  {
    "text": "and take unnecessary risk and taking down system when there's something really important is happening there's a",
    "start": "755250",
    "end": "761310"
  },
  {
    "text": "time for taking risk for the sake of learning but then there's also time for good old common sense and not take any",
    "start": "761310",
    "end": "767250"
  },
  {
    "text": "unnecessary risk that you don't have to you also want to make sure that you make",
    "start": "767250",
    "end": "773310"
  },
  {
    "text": "the smallest change possible that still allowed to detect and decide and so improve your hypothesis but not risk",
    "start": "773310",
    "end": "781860"
  },
  {
    "text": "entirely taking down the entire system so this could be killing one server at a time or running experiments against one",
    "start": "781860",
    "end": "788910"
  },
  {
    "text": "function at the time or making sure injective failures into only a small percentage of requests or and doing only",
    "start": "788910",
    "end": "795510"
  },
  {
    "text": "and doing them only one story in only one region at the time as well and she",
    "start": "795510",
    "end": "802080"
  },
  {
    "text": "also a rope I'm ready just in case things to go bad and you want to stop experiment right",
    "start": "802080",
    "end": "807640"
  },
  {
    "text": "away and then roll back whatever changes that's been done already and last that probably the most important thing is",
    "start": "807640",
    "end": "813850"
  },
  {
    "text": "don't go don't start in production there's just so much you can learn about running experiments in a staging",
    "start": "813850",
    "end": "819190"
  },
  {
    "text": "environment and give yourself the time and and the space to get used to the process of designing experiments or",
    "start": "819190",
    "end": "826360"
  },
  {
    "text": "planning executing them and even the big boys do Netflix and Hulu and Amazon of",
    "start": "826360",
    "end": "831370"
  },
  {
    "text": "this world who are constantly running in chaos experiments in production they didn't start the experiments in",
    "start": "831370",
    "end": "836529"
  },
  {
    "text": "production on day one either and you shouldn't and Russ Mouse also talks",
    "start": "836529",
    "end": "842080"
  },
  {
    "text": "about how chaos engineering is not just about just testing your infrastructure it can be applied to your entire stack",
    "start": "842080",
    "end": "849130"
  },
  {
    "text": "that covers the people and processes that you have your application the platform and infrastructure that your",
    "start": "849130",
    "end": "855430"
  },
  {
    "text": "platen runs on top of if anything the people and process that you have are",
    "start": "855430",
    "end": "860440"
  },
  {
    "text": "oftentimes the first thing that goes judging by the number of postmodern instant reports I've read they start",
    "start": "860440",
    "end": "866110"
  },
  {
    "text": "with operator did act and then bad things happened in fact one of the most",
    "start": "866110",
    "end": "872950"
  },
  {
    "text": "important lesson I learned from verse is that when you're talking to the business",
    "start": "872950",
    "end": "878339"
  },
  {
    "text": "don't even use the word chaos again it",
    "start": "878339",
    "end": "884339"
  },
  {
    "text": "it just puts the emphasis on the wrong things and just as we just talked about we want",
    "start": "884820",
    "end": "891490"
  },
  {
    "text": "to make sure that our experiments are done in a controlled manner and that is the exact opposite of chaos right so",
    "start": "891490",
    "end": "897670"
  },
  {
    "text": "when you're talking to the business about what this is trying to do call it what it actually is don't call it chaos",
    "start": "897670",
    "end": "903550"
  },
  {
    "text": "engineering call it continuous resilience testing",
    "start": "903550",
    "end": "908730"
  },
  {
    "text": "and when you frame what you're trying to achieve in those worth it makes it easier for the business to care behind",
    "start": "909070",
    "end": "915230"
  },
  {
    "text": "you because I'm sure they share the common go of warning that won't in the system do you be more resilient when you",
    "start": "915230",
    "end": "921560"
  },
  {
    "text": "don't mention that were you mentioning world chaos is just freaks people out they just think oh you just want to go ahead and pray production and that's not",
    "start": "921560",
    "end": "928460"
  },
  {
    "text": "what we actually want in terms of the surveillance paradigm and the similar",
    "start": "928460",
    "end": "934190"
  },
  {
    "text": "tools that we currently have thus number of interesting challenges that arise with the service paradigm so",
    "start": "934190",
    "end": "940640"
  },
  {
    "text": "I mentioned that fix is simian army to earlier within that suite of tools you",
    "start": "940640",
    "end": "946010"
  },
  {
    "text": "have the latency monkey that can inject latency to simulate slow response from",
    "start": "946010",
    "end": "951320"
  },
  {
    "text": "API call and you also have chaos monkey that can kill each two instances randomly you have also chaos gorilla",
    "start": "951320",
    "end": "958490"
  },
  {
    "text": "they can kill an entire database availability zone and finally chaos Kong can just queue a whole region in AWS and",
    "start": "958490",
    "end": "966680"
  },
  {
    "text": "I also seen several attempts are wrapping the logic of chaos monkey into a lambda function so that you don't have",
    "start": "966680",
    "end": "972890"
  },
  {
    "text": "to run and pay for server 24/7 just today you can occasionally use it to kill other servers but that's not what",
    "start": "972890",
    "end": "980180"
  },
  {
    "text": "I'm interested in I'm interested in how can I take the practices of chaos engineering and apply",
    "start": "980180",
    "end": "986090"
  },
  {
    "text": "them to a paradigm where I don't have access to the servers that runs my code and therefore there's nothing there's no",
    "start": "986090",
    "end": "992510"
  },
  {
    "text": "server that I can actually kill but then Karis engineer is never about killing",
    "start": "992510",
    "end": "998450"
  },
  {
    "text": "server to begin with so is what we do oftentimes to stress test the infrastructure when application runs on",
    "start": "998450",
    "end": "1005560"
  },
  {
    "text": "servers that we have to manage and we gain access but chaos engine is about",
    "start": "1005560",
    "end": "1010600"
  },
  {
    "text": "identifying witnesses before they manifest in system-wide aberrant behaviors and we shouldn't confuse the",
    "start": "1010600",
    "end": "1017020"
  },
  {
    "text": "principle or why we do something with the action that we do in order to apply those principles in our current in our",
    "start": "1017020",
    "end": "1023410"
  },
  {
    "text": "context so having worked on several non-trivial service applications in the",
    "start": "1023410",
    "end": "1029589"
  },
  {
    "text": "past including migrating a social network to run pretty much entirely on servers one of the key lessons I've",
    "start": "1029589",
    "end": "1036459"
  },
  {
    "text": "learned that process is that there are just way more inherent chaos and complexity in science",
    "start": "1036459",
    "end": "1042069"
  },
  {
    "text": "service application you have smaller units of deployment which is great for",
    "start": "1042070",
    "end": "1048250"
  },
  {
    "start": "1045000",
    "end": "1045000"
  },
  {
    "text": "many many reasons that we don't we're not gonna go into in this session but at the same time you also end up with a lot",
    "start": "1048250",
    "end": "1054130"
  },
  {
    "text": "more of them and that means there are now more boundaries that you need to harden around instead of hardening your",
    "start": "1054130",
    "end": "1060550"
  },
  {
    "text": "application around the application itself or with the containers it runs on or the VM now you have the heart and the",
    "start": "1060550",
    "end": "1066190"
  },
  {
    "text": "boundary for every single function that computer put that together makes up your application and every function need to",
    "start": "1066190",
    "end": "1074110"
  },
  {
    "text": "be correctly configured and given the right iëm permissions which is both an opportunity because now we have refined",
    "start": "1074110",
    "end": "1080830"
  },
  {
    "text": "more fine-grained control over every aspect of our application especially from the security point of view but it's",
    "start": "1080830",
    "end": "1087490"
  },
  {
    "text": "also a risk because now there are more things that we need to configure and therefore more opportunities for miss",
    "start": "1087490",
    "end": "1092860"
  },
  {
    "text": "configuration incorrect timeout settings for functions or incorrect iëm permissions and so on and people",
    "start": "1092860",
    "end": "1100270"
  },
  {
    "text": "such as myself who has been building things we serve list we also just want to move away from how to manage in one",
    "start": "1100270",
    "end": "1105640"
  },
  {
    "text": "service at all so you tend to find that we are using a lot of managed services with lambda and every single one of",
    "start": "1105640",
    "end": "1113290"
  },
  {
    "text": "those services have got its own set of failure modes some of which are documented but many of which are not",
    "start": "1113290",
    "end": "1119020"
  },
  {
    "text": "because of tied to implementation details and even those documented behaviors that's probably not good way",
    "start": "1119020",
    "end": "1125140"
  },
  {
    "text": "for us to really verify them the behavior until something bad actually happens and then there's everything the",
    "start": "1125140",
    "end": "1132190"
  },
  {
    "text": "platform does for you in terms of scheduling containers scaling polling Kinesis and then calling",
    "start": "1132190",
    "end": "1138010"
  },
  {
    "text": "your function of the events or retrying fail invocations all of those features and capabilities have their own set of",
    "start": "1138010",
    "end": "1144100"
  },
  {
    "text": "failure modes as well and again some of which may be documented that many of which are not and they are prone to",
    "start": "1144100",
    "end": "1150640"
  },
  {
    "text": "change without notice anyway because they're all caffeine level implementation details and oftentimes",
    "start": "1150640",
    "end": "1156910"
  },
  {
    "text": "when something does go wrong we don't really have a meaningful alternative than to just wait for a table to fix the",
    "start": "1156910",
    "end": "1162490"
  },
  {
    "text": "problem which to their credit they do a very good job compared to all the unpromising solution I've seen in the past they tend",
    "start": "1162490",
    "end": "1169420"
  },
  {
    "text": "to recover for many issues a lot faster that's it there are still plenty of",
    "start": "1169420",
    "end": "1176410"
  },
  {
    "start": "1174000",
    "end": "1174000"
  },
  {
    "text": "in my own code and how my code deals with is dependencies where I can use",
    "start": "1176410",
    "end": "1182140"
  },
  {
    "text": "experiments of quickly identify weaknesses in those for example maybe",
    "start": "1182140",
    "end": "1187810"
  },
  {
    "text": "I'm not handling timeouts when I'm talking to third-party services properly so that a slow response from a",
    "start": "1187810",
    "end": "1194320"
  },
  {
    "text": "third-party system can actually cause my function to get timed out and by lambda",
    "start": "1194320",
    "end": "1199420"
  },
  {
    "text": "by lambda service and in turn create a returns a 502 my caller and start the",
    "start": "1199420",
    "end": "1204460"
  },
  {
    "text": "country and create a cascade failure in the whole coaching or maybe I'm missing",
    "start": "1204460",
    "end": "1209680"
  },
  {
    "text": "some error handling in my code when I'm talking to third-party systems in cases",
    "start": "1209680",
    "end": "1215080"
  },
  {
    "text": "where if the thirty first dependency is not available I could have returned me for cash response or maybe a static",
    "start": "1215080",
    "end": "1221110"
  },
  {
    "text": "default value and maybe I'm missing some of those missing those three four four packs in cases where if a multi region",
    "start": "1221110",
    "end": "1227770"
  },
  {
    "text": "set up perhaps you're also missing a trick band or having regional fair over as well",
    "start": "1227770",
    "end": "1232920"
  },
  {
    "text": "but by far the most common issue and running three production tends to be performance and latency related and they",
    "start": "1232920",
    "end": "1239860"
  },
  {
    "text": "can be symptomatic of a whole range of other underlying issues it could be a doubles having a networking problem it",
    "start": "1239860",
    "end": "1246730"
  },
  {
    "text": "could be you're talking to a server that is just overloaded or having very long GC garbage collection pause and you tend",
    "start": "1246730",
    "end": "1254320"
  },
  {
    "text": "to find a lot of the code there are a lot of coal dust sorry you tend to find there are a lot of implicit assumptions",
    "start": "1254320",
    "end": "1260260"
  },
  {
    "text": "about response time based on what we have experienced in the past and we're not very good at thinking about those",
    "start": "1260260",
    "end": "1266620"
  },
  {
    "text": "exceptional cases when said response time start to deviate from what from the norm that we have seen with those",
    "start": "1266620",
    "end": "1272770"
  },
  {
    "text": "services and we can use latency injection to help us identify those weaknesses to find those implicit",
    "start": "1272770",
    "end": "1278830"
  },
  {
    "text": "assumptions that we have in our code using experiments and again following",
    "start": "1278830",
    "end": "1284230"
  },
  {
    "text": "the simple four steps step one we know what normal observe our system and what",
    "start": "1284230",
    "end": "1289900"
  },
  {
    "start": "1289000",
    "end": "1289000"
  },
  {
    "text": "metrics we used to define that humanity depends entirely on what type of system you're building some common candidates",
    "start": "1289900",
    "end": "1296350"
  },
  {
    "text": "include your 95 or 99 percent our latencies or error counts and if you're",
    "start": "1296350",
    "end": "1301900"
  },
  {
    "text": "building a messaging based system maybe the backlog size is a good indicator that maybe you're falling behind you",
    "start": "1301900",
    "end": "1309310"
  },
  {
    "text": "might also use instead of using absolute County might also use youth which can be defined as the percentage of requests that you were",
    "start": "1309310",
    "end": "1316600"
  },
  {
    "text": "able to respond to with a related code that's not 500 so once you define what",
    "start": "1316600",
    "end": "1322870"
  },
  {
    "text": "normal looks are for your system you can now to start to design scenarios on how the system might fail giving this some",
    "start": "1322870",
    "end": "1329490"
  },
  {
    "text": "failures that you can eject in this case there's some specific consideration we",
    "start": "1329490",
    "end": "1334690"
  },
  {
    "start": "1332000",
    "end": "1332000"
  },
  {
    "text": "need to make for a service application for example even your function can you're from your lambda functions can",
    "start": "1334690",
    "end": "1340600"
  },
  {
    "text": "now run for 15 minutes now but API Gabri has got a hard time out of 29 seconds so",
    "start": "1340600",
    "end": "1346630"
  },
  {
    "text": "after 29 seconds apiary is going to timeout the request even if your function is still running in the pit in the background so your",
    "start": "1346630",
    "end": "1353440"
  },
  {
    "text": "caller is going to get back a 500 response and then there's the effective code starts if you have one function",
    "start": "1353440",
    "end": "1360340"
  },
  {
    "text": "talking to another of our API gateway even if you know the time are setting for the other function by the time you",
    "start": "1360340",
    "end": "1366670"
  },
  {
    "text": "consider the toaster time and whatever latency overhead API layer actually",
    "start": "1366670",
    "end": "1372220"
  },
  {
    "text": "introduces then the actual response time you can experience from the calling function can be a lot longer than a",
    "start": "1372220",
    "end": "1378100"
  },
  {
    "text": "timer on the other function so you can't make hard assumptions about the maximum response time you can expect based on",
    "start": "1378100",
    "end": "1384250"
  },
  {
    "text": "your knowledge about the timer setting for the other function behind the API gateway and the rule of thumb in",
    "start": "1384250",
    "end": "1391360"
  },
  {
    "start": "1391000",
    "end": "1391000"
  },
  {
    "text": "microservices is the user short time out and that your time our strategy to give",
    "start": "1391360",
    "end": "1397030"
  },
  {
    "text": "your requests the best chance to succeed but not at the cost of waiting for so",
    "start": "1397030",
    "end": "1402490"
  },
  {
    "text": "long that your function is served gets timed out before we hear spec from the other service you're talking to you in",
    "start": "1402490",
    "end": "1408100"
  },
  {
    "text": "which case you can end up creating a cascade failures you know in your core chain and this is where I find trying to",
    "start": "1408100",
    "end": "1414880"
  },
  {
    "text": "pick the right timeout value it's very tricky when they are too short you're not giving the request the best chances to",
    "start": "1414880",
    "end": "1421090"
  },
  {
    "text": "see so suppose that we've got a function with five seconds left and I set my timer for order to outbound requests to",
    "start": "1421090",
    "end": "1428020"
  },
  {
    "text": "3 seconds then even though I've got 5 seconds I'm only making use of that 3 seconds already can be too long and if",
    "start": "1428020",
    "end": "1436120"
  },
  {
    "text": "so in the same example my functions got 5 seconds left in the vocation but my timeout for the request is 6 seconds so",
    "start": "1436120",
    "end": "1443230"
  },
  {
    "text": "before if so if they're a service I'm talking to having a really slow day then my function is gonna get timed out par",
    "start": "1443230",
    "end": "1449380"
  },
  {
    "text": "lambda before a hair back and again that turns into a 500 pounds to my collar and",
    "start": "1449380",
    "end": "1455350"
  },
  {
    "text": "this case even worse when you consider consider that many of our functions do multiple API calls in one invocation a",
    "start": "1455350",
    "end": "1462490"
  },
  {
    "text": "simple example could be I make a call to dynamo DB get some data pack loot 80",
    "start": "1462490",
    "end": "1467980"
  },
  {
    "text": "somehow and then make a put against an I'm a DB to save the changes and then I'm gonna publish an event into a",
    "start": "1467980",
    "end": "1473680"
  },
  {
    "text": "keynesian to say hey guys some interesting event just happened maybe you're interested in that and I see two",
    "start": "1473680",
    "end": "1480130"
  },
  {
    "text": "common strategies on how to combat this situation one is such that I've got a function with six second timeout and I'm",
    "start": "1480130",
    "end": "1487120"
  },
  {
    "text": "making three different API calls so I'm gonna divide my six seconds equally so the every request gets two seconds in",
    "start": "1487120",
    "end": "1493330"
  },
  {
    "text": "this case I can see that overall we've got enough time to make all three requests but because one of the requests",
    "start": "1493330",
    "end": "1500560"
  },
  {
    "text": "was longer than two seconds it gets timed out so we're not giving our requests the best chance to succeed here",
    "start": "1500560",
    "end": "1507240"
  },
  {
    "text": "in an approach I see is I've got a function in six seconds I'm gonna be much more optimistic here and I'm gonna",
    "start": "1507240",
    "end": "1513700"
  },
  {
    "text": "allow every request five seconds to complete so even though individually none of them took longer than five",
    "start": "1513700",
    "end": "1519820"
  },
  {
    "text": "seconds but collectively they took too long and more than six seconds are having a function in this case my",
    "start": "1519820",
    "end": "1527170"
  },
  {
    "text": "function gets timed out before I had a chance to do any recovery from those steps myself so instead my proposal here",
    "start": "1527170",
    "end": "1535000"
  },
  {
    "text": "is to sell your request timer for those outbound communication dynamically based",
    "start": "1535000",
    "end": "1540220"
  },
  {
    "text": "on the actual amount invocation time you have left in the current invocation which conveniently you can find from the",
    "start": "1540220",
    "end": "1547120"
  },
  {
    "text": "context of gel that your function is involved with so in this case I'm I say",
    "start": "1547120",
    "end": "1552280"
  },
  {
    "text": "that for every invocation I'm going to reserve some block of time at the end for recovery if things go bad but before",
    "start": "1552280",
    "end": "1559150"
  },
  {
    "text": "that every request is given as much time as is left with the entire invocation -",
    "start": "1559150",
    "end": "1564820"
  },
  {
    "text": "observed time for recovery and if collectively all the requests still took",
    "start": "1564820",
    "end": "1570550"
  },
  {
    "text": "too long and I had to time out that last request now as we have some time left at the end so that I can do some recovery",
    "start": "1570550",
    "end": "1576670"
  },
  {
    "text": "steps in locking the timeout incident with as much context as possible including what",
    "start": "1576670",
    "end": "1583570"
  },
  {
    "start": "1579000",
    "end": "1579000"
  },
  {
    "text": "was the API that was trying to call was the timeout value any correlation IDs I've collected so far as well as the",
    "start": "1583570",
    "end": "1590289"
  },
  {
    "text": "request object it may be something else as well and I also want to record custom metric for say service X dot timeout in",
    "start": "1590289",
    "end": "1599830"
  },
  {
    "text": "cases where I can't get the most up-to-date valid response data from say Dunham NTP maybe I can return some cash",
    "start": "1599830",
    "end": "1607149"
  },
  {
    "text": "value instead and failing that maybe I can return a static value it has been pegged into my application so that's",
    "start": "1607149",
    "end": "1614320"
  },
  {
    "text": "actually a pattern that's baked right into the history X library there netflix published paraspinal netflix whereby",
    "start": "1614320",
    "end": "1620440"
  },
  {
    "text": "you're writing your cam your handlers into commands and every command has got a 4/4 back command if an error happens",
    "start": "1620440",
    "end": "1627340"
  },
  {
    "text": "and every and the fallback command himself can also have four packs and so on and so forth so say you're doing a",
    "start": "1627340",
    "end": "1633669"
  },
  {
    "text": "read from DynamoDB and that errors or timeout then you can check do i have local cache and stale value for this",
    "start": "1633669",
    "end": "1640389"
  },
  {
    "text": "request you find if I if I have then great I can return that and failing that I can return some default and this",
    "start": "1640389",
    "end": "1646990"
  },
  {
    "text": "exactly what happens when you go to Netflix the home page where they try to load your recommended movies and if",
    "start": "1646990",
    "end": "1653200"
  },
  {
    "text": "that's API call fails then they try to return a cache recommendation for you",
    "start": "1653200",
    "end": "1658210"
  },
  {
    "text": "and failing that they also returned you so static recommendation which i think is movies from 1950s and 60s where",
    "start": "1658210",
    "end": "1665679"
  },
  {
    "text": "there's no copyright constraint that's the important detail to consider so here",
    "start": "1665679",
    "end": "1674679"
  },
  {
    "text": "you're trading precision for availability which is a good trade-off for many many cases but maybe you don't",
    "start": "1674679",
    "end": "1680799"
  },
  {
    "text": "want to do that you say someone's checking their bank balance maybe you don't want to return a default value of",
    "start": "1680799",
    "end": "1686019"
  },
  {
    "text": "zero which of course is just going to freak them out and they're gonna call your customer support and scream at them",
    "start": "1686019",
    "end": "1691840"
  },
  {
    "text": "what have you guys done about money so even though this trade-off between precision for availability is great you",
    "start": "1691840",
    "end": "1698799"
  },
  {
    "text": "have to keep in mind that your user experience is the most important thing to keep in mind here so next let's talk",
    "start": "1698799",
    "end": "1705460"
  },
  {
    "text": "about how can we then inject failures into our system and specifically or starting with where",
    "start": "1705460",
    "end": "1710540"
  },
  {
    "text": "we do it suppose you've got a very simple setup here where you have a client application talking to two public",
    "start": "1710540",
    "end": "1717170"
  },
  {
    "text": "facing API is both of API gateway and lambda both of which are talking to some internal API which are also implemented",
    "start": "1717170",
    "end": "1724460"
  },
  {
    "text": "with API gateway and lambda and your hypothesis is such that one of those",
    "start": "1724460",
    "end": "1730760"
  },
  {
    "text": "functions are talking to the internet' p.i is going to be fine when the internal API is having a some some",
    "start": "1730760",
    "end": "1737120"
  },
  {
    "text": "issues and response time starts to spike so in this case you can you can simulate",
    "start": "1737120",
    "end": "1742280"
  },
  {
    "text": "that by injecting latency in delay into the HTTP client your function uses to",
    "start": "1742280",
    "end": "1748970"
  },
  {
    "text": "talk to the internal API this allows you to review any witnesses you have in terms of how you hand those slow",
    "start": "1748970",
    "end": "1755330"
  },
  {
    "text": "responses from API so it depends on and should also do the same thing when",
    "start": "1755330",
    "end": "1760790"
  },
  {
    "text": "you're talking to other third-party services including those Adriel services that we use all the time like dynamodb",
    "start": "1760790",
    "end": "1767000"
  },
  {
    "text": "or even other and other non able services as well like 2000 of 0 and so",
    "start": "1767000",
    "end": "1772760"
  },
  {
    "text": "on and we can apply the same technique for as it was decayed by injecting some",
    "start": "1772760",
    "end": "1779510"
  },
  {
    "text": "latency into the eight of sdk clients and we see example of how you can do that later and since we talked about how we need to",
    "start": "1779510",
    "end": "1788030"
  },
  {
    "text": "worry about containment and blast radius so for this particular experiment the blast radius is fairly self-contained",
    "start": "1788030",
    "end": "1794630"
  },
  {
    "text": "it's just between the client and that particular lambda function serving the endpoint that particular client is using",
    "start": "1794630",
    "end": "1800270"
  },
  {
    "text": "at that moment in time so you're not gonna create cascade failures throughout the whole system but what if you want to",
    "start": "1800270",
    "end": "1807310"
  },
  {
    "text": "expand your hypothesis and say that okay the hypothesis that when the internet'",
    "start": "1807310",
    "end": "1813020"
  },
  {
    "text": "API is slow is not going to cause any problem in any of the public facing API that depends on it in which case you can",
    "start": "1813020",
    "end": "1821510"
  },
  {
    "start": "1821000",
    "end": "1821000"
  },
  {
    "text": "also just inject latency into the invocation of a function directory rather please do some middleware engine",
    "start": "1821510",
    "end": "1828140"
  },
  {
    "text": "you use for node.js function lambda functions there's a MIDI meter middleware engine there are found really",
    "start": "1828140",
    "end": "1833330"
  },
  {
    "text": "useful and you can use that in general agency into an invocation this has got same impact as if you just",
    "start": "1833330",
    "end": "1840170"
  },
  {
    "text": "inject latency into the HTTP client used by order h fade order puppy facing API functions but your",
    "start": "1840170",
    "end": "1847430"
  },
  {
    "text": "blast radius can be quite big now because by injecting latency into this internal API function you can impact so",
    "start": "1847430",
    "end": "1855290"
  },
  {
    "text": "many over the functions that's on the public facing side of things and",
    "start": "1855290",
    "end": "1860530"
  },
  {
    "text": "remember the point is not actually her production so if you want to run this kind of experiments",
    "start": "1860530",
    "end": "1866360"
  },
  {
    "text": "definitely definitely start in an environment away from production and maybe you don't want to run this kind of",
    "start": "1866360",
    "end": "1871910"
  },
  {
    "text": "experiments in production at all because of the risk involved but the same time it's also very effective at finding and",
    "start": "1871910",
    "end": "1879110"
  },
  {
    "text": "reading our witnesses very very quickly and I think you can actually use it for different purpose as well one of the",
    "start": "1879110",
    "end": "1886340"
  },
  {
    "text": "common traps in software development I find is that we are not used to priming our developers to think about failures",
    "start": "1886340",
    "end": "1892940"
  },
  {
    "text": "early on this is especially true if you're working on a greenfield project whereby you're developing against a dev",
    "start": "1892940",
    "end": "1899330"
  },
  {
    "text": "environment for mums and maybe sometimes years at a time and in that type of environment you've got minimum load you",
    "start": "1899330",
    "end": "1905690"
  },
  {
    "text": "almost never see slow server response or errors at the moment you release your code into production that's a completely",
    "start": "1905690",
    "end": "1912080"
  },
  {
    "text": "different ball game altogether and since we haven't been thinking about failures early during the development cycle where",
    "start": "1912080",
    "end": "1918200"
  },
  {
    "text": "our system is not going to have a chance in production once it says all kinda different phases that can happen in production and in psychology we have got",
    "start": "1918200",
    "end": "1926120"
  },
  {
    "text": "this technique called priming whereby we can subtly influence or manipulate the way that some of things that behaves by",
    "start": "1926120",
    "end": "1932920"
  },
  {
    "text": "repeatedly projecting them with the same stimulus and Facebook took advantage of",
    "start": "1932920",
    "end": "1938060"
  },
  {
    "text": "this technique when they were moving into the Asian market where the network bandwidth is not very good so they had",
    "start": "1938060",
    "end": "1945290"
  },
  {
    "text": "this initiative called 2g Tuesdays whereby on every Tuesday they turn the office Wi-Fi to smear a 2g bandwidth so",
    "start": "1945290",
    "end": "1953720"
  },
  {
    "text": "that as a developer working on Facebook I have a weekly reminder of what it's like to use Facebook on a 2g connection",
    "start": "1953720",
    "end": "1960740"
  },
  {
    "text": "so naturally I start to optimize my code so that even a 2g connection I keep my",
    "start": "1960740",
    "end": "1966770"
  },
  {
    "text": "users a decent experience so I think we can actually use failure injection to",
    "start": "1966770",
    "end": "1972860"
  },
  {
    "text": "actually program our developers our colleagues to think about failures for a way",
    "start": "1972860",
    "end": "1978640"
  },
  {
    "text": "by making our dev environments resemble the kind of turbulent condition that we should realistically expect our system",
    "start": "1978640",
    "end": "1985910"
  },
  {
    "text": "to survive in in production but potentially making a small percentage of all requests have a slow response time",
    "start": "1985910",
    "end": "1992600"
  },
  {
    "text": "or make an error and of course the",
    "start": "1992600",
    "end": "1997760"
  },
  {
    "text": "client just is just as important part of the whole system in fact is your last chance so it's the last line of defense",
    "start": "1997760",
    "end": "2004330"
  },
  {
    "text": "before any cascade failures gets all the way to your users and we should include",
    "start": "2004330",
    "end": "2009760"
  },
  {
    "text": "our clients in our experiments as well in this case if I want to verify I want to check that my clients are handling",
    "start": "2009760",
    "end": "2016060"
  },
  {
    "text": "slow responses from the server properly and there are no implicit response time species assumptions of our server",
    "start": "2016060",
    "end": "2022090"
  },
  {
    "text": "response time then I can also inject latency into those public API functions directly in case of the in terms of the",
    "start": "2022090",
    "end": "2030070"
  },
  {
    "text": "blast radius again they're fairly self-contained it's just between those individual functions and the client is",
    "start": "2030070",
    "end": "2035800"
  },
  {
    "text": "using them at that moment in time so years ago when I first started doing",
    "start": "2035800",
    "end": "2040960"
  },
  {
    "text": "chaos engineering and I was working on a MMORPG game and we got this a constant",
    "start": "2040960",
    "end": "2046900"
  },
  {
    "text": "stream like couple of couple of complaints a day from user that says oh your your app is crap he just hangs when",
    "start": "2046900",
    "end": "2053860"
  },
  {
    "text": "you try to starve and does nothing and we couldn't for the life of me I couldn't reproduce the problem and we",
    "start": "2053860",
    "end": "2060580"
  },
  {
    "text": "add the all these tests on a client on a server and still no luck until one day I decided to take some of these things",
    "start": "2060580",
    "end": "2066700"
  },
  {
    "text": "I've been learning about chaos engineering and started put into practice and and we found that the",
    "start": "2066700",
    "end": "2073570"
  },
  {
    "text": "theory stop the client makes the multiple concurrent tracks concurrent set of requests and if there's once",
    "start": "2073570",
    "end": "2079960"
  },
  {
    "text": "there's one specific API calls the server that you've added errors or it takes more than two seconds then the",
    "start": "2079960",
    "end": "2087280"
  },
  {
    "text": "requests are being made on parallel it's gonna fair with now reference point they're pointing exception and the whole thing just silently crashes and that's",
    "start": "2087280",
    "end": "2094330"
  },
  {
    "text": "why we had all his report from the client but it was such a complicated there's a very specific step and stopping that for you to happen that we",
    "start": "2094330",
    "end": "2101140"
  },
  {
    "text": "just couldn't replicate it in any of our tests and any of our attempts to reproduce a bug but by making our dev",
    "start": "2101140",
    "end": "2108160"
  },
  {
    "text": "environment we know we produce resemble some of these can some of these conditions that we might see production we were able to start see",
    "start": "2108160",
    "end": "2115180"
  },
  {
    "text": "those except those things happen those errors happen in the devil dev environment and like before we can also",
    "start": "2115180",
    "end": "2122530"
  },
  {
    "text": "inject latency into the ACP client that are mobile or web client uses instead of injecting latency into the function",
    "start": "2122530",
    "end": "2129190"
  },
  {
    "text": "themselves and once you run the experiment you're keeping your eye on the holiday of a dashboard to make sure",
    "start": "2129190",
    "end": "2135070"
  },
  {
    "text": "that nothing really bad happens and afterwards you go through your metrics and trying to find evidence that support",
    "start": "2135070",
    "end": "2140560"
  },
  {
    "text": "your original hypotheses in terms of how do we then go ahead and jet latency into",
    "start": "2140560",
    "end": "2146590"
  },
  {
    "start": "2143000",
    "end": "2143000"
  },
  {
    "text": "our code if you're talking about study languages like C sharp or Java then you can potentially use Weaver such as push",
    "start": "2146590",
    "end": "2153970"
  },
  {
    "text": "up for Tom net or weave aspectj for jvm languages and it's something that I use",
    "start": "2153970",
    "end": "2159460"
  },
  {
    "text": "in the past and I wrote a blog post about that a few years ago and for nodejs or Python other dynamic languages",
    "start": "2159460",
    "end": "2166810"
  },
  {
    "text": "you can potentially write wrapper libraries for your clients and as a proof of concept I've got a very simple",
    "start": "2166810",
    "end": "2172120"
  },
  {
    "text": "HTTP client that allows me to pass in a config object that lets me control",
    "start": "2172120",
    "end": "2177190"
  },
  {
    "text": "toggle on and off those experiments but also control how often we inject latency and how much latency to inject in this",
    "start": "2177190",
    "end": "2185080"
  },
  {
    "text": "case I'm just using blooper to bloopers delay function to then add some aperture delay to a repeat request so from the",
    "start": "2185080",
    "end": "2194290"
  },
  {
    "text": "for HTTP clone itself is essentially just one big function that takes in an options object the part allows me to",
    "start": "2194290",
    "end": "2201490"
  },
  {
    "text": "pass in that concrete that we saw earlier which ultimately comes in from as the same parameter store I've got",
    "start": "2201490",
    "end": "2207670"
  },
  {
    "text": "configuration as an M primary store which in this particular experiment I set the probability to 50% of latency",
    "start": "2207670",
    "end": "2215050"
  },
  {
    "text": "between hundred milliseconds and five seconds being added to hp's request my function and since all my functions are",
    "start": "2215050",
    "end": "2222160"
  },
  {
    "text": "hooked up to X ray and instrument it so in one experiment I can see that there's",
    "start": "2222160",
    "end": "2227530"
  },
  {
    "text": "no edit there's no latency being added so the whole requests finished under 60 milliseconds but on a different",
    "start": "2227530",
    "end": "2235080"
  },
  {
    "text": "invocation 3.4 seconds was added to this HP request so that's all well and good",
    "start": "2235080",
    "end": "2244000"
  },
  {
    "text": "for essentially library with just one method on one function but that's not possible with",
    "start": "2244000",
    "end": "2250989"
  },
  {
    "text": "the a 20k for example is not feasible for you to manually create client libraries for everything or a diversity",
    "start": "2250989",
    "end": "2257259"
  },
  {
    "text": "case client that you want to use so in this case you can apply the same technique it's the same factory function",
    "start": "2257259",
    "end": "2263470"
  },
  {
    "text": "as say bloopers promised by all in this case I've got a simple module called",
    "start": "2263470",
    "end": "2268630"
  },
  {
    "text": "injectable rape and name but bear with me whereby I can take a bazooka client",
    "start": "2268630",
    "end": "2274269"
  },
  {
    "text": "and overwrite they get acing functions we forgot to take it to talk to monkey",
    "start": "2274269",
    "end": "2280150"
  },
  {
    "text": "patch the async function to take in another parameter which includes the config rarely the contrary so earlier in",
    "start": "2280150",
    "end": "2287799"
  },
  {
    "text": "this case I can see that the one imitation one experiment one point four seconds was added to a request to a",
    "start": "2287799",
    "end": "2294160"
  },
  {
    "text": "DynamoDB yet so all that proof of concert is available and github so feel",
    "start": "2294160",
    "end": "2300430"
  },
  {
    "text": "free to go play around with that and see what you can you see if it's something that you can use but we don't have to",
    "start": "2300430",
    "end": "2306039"
  },
  {
    "text": "stop there we don't have a stop at just adding latency and doing latency ingestion we can also inject other forms",
    "start": "2306039",
    "end": "2311950"
  },
  {
    "text": "of errors as well for example we can inject 500 responses to HTTP requests",
    "start": "2311950",
    "end": "2319119"
  },
  {
    "start": "2314000",
    "end": "2314000"
  },
  {
    "text": "but for specific address services we can also inject those as service specific exceptions dynamically B's through",
    "start": "2319119",
    "end": "2326019"
  },
  {
    "text": "provision super exceed exception for example it catches me all the time because again is not something that I",
    "start": "2326019",
    "end": "2331989"
  },
  {
    "text": "see often during development but in production this kind of thing can happen all the time very very easily and we're",
    "start": "2331989",
    "end": "2338710"
  },
  {
    "text": "not we're just not very good at thinking about those failure most early on and in",
    "start": "2338710",
    "end": "2344049"
  },
  {
    "text": "the specific case of lambda you may also want to explore the scenarios whereby what happens say if a business critical",
    "start": "2344049",
    "end": "2350319"
  },
  {
    "text": "function gets told because your overall concurrency control institutions has gone past a regional limit what happens",
    "start": "2350319",
    "end": "2357849"
  },
  {
    "text": "to the rest of the system say for example if something does processing events from Kinesis and then synchronize",
    "start": "2357849",
    "end": "2363369"
  },
  {
    "text": "them to other systems when that function keeps getting a throttle because the overall concurrent executions has gone",
    "start": "2363369",
    "end": "2369160"
  },
  {
    "text": "to high as it's simple hypothesis you might say okay my functions are handling",
    "start": "2369160",
    "end": "2375940"
  },
  {
    "text": "those HP errors properly and we can simulate those failure we can",
    "start": "2375940",
    "end": "2381140"
  },
  {
    "text": "simulate those failures by again injecting errors into an HTTP client and as we mentioned earlier for specific",
    "start": "2381140",
    "end": "2388010"
  },
  {
    "text": "address services we can also again monkey patch to a domesticates you then also inject specific service specific",
    "start": "2388010",
    "end": "2395390"
  },
  {
    "start": "2389000",
    "end": "2389000"
  },
  {
    "text": "errors as well and if you want to simulate what happens if lambda functions are being throttled during an",
    "start": "2395390",
    "end": "2402260"
  },
  {
    "text": "experiment you can also then go to either programmatically or doing a console by changing and taking the",
    "start": "2402260",
    "end": "2408560"
  },
  {
    "text": "reserved concurrency for function which given the name actually means the opposite when you set the reserve",
    "start": "2408560",
    "end": "2414500"
  },
  {
    "text": "concurrency of function you're setting the maximum number of concurrent solutions that particular function can have so if your function is running as a",
    "start": "2414500",
    "end": "2421940"
  },
  {
    "text": "ten concurrent execution steadily you may want to see okay what happens if I set the concurrency the reserve",
    "start": "2421940",
    "end": "2427880"
  },
  {
    "text": "concurrency to eight or nine so that analysis ROC is throttling happening against that function to see how the",
    "start": "2427880",
    "end": "2434540"
  },
  {
    "text": "impacts the rest of your system maybe that's where you can start to block here okay the peroxide started to pie up and that",
    "start": "2434540",
    "end": "2441170"
  },
  {
    "text": "has got knock-on effects on other plasma system and the eventual consistency something happened everywhere because we",
    "start": "2441170",
    "end": "2446990"
  },
  {
    "text": "hadn't thought about what happens when the different system that need to sync up together and the thing that's doing",
    "start": "2446990",
    "end": "2452000"
  },
  {
    "text": "the synchronization is not being throttled so as a quick recap failures",
    "start": "2452000",
    "end": "2459920"
  },
  {
    "text": "are inevitable regardless whether your code is running inside an easy to VM or inside a container or inside a lambda",
    "start": "2459920",
    "end": "2467150"
  },
  {
    "text": "function and the only way for surely know that our system is resilient against different forms of failures is",
    "start": "2467150",
    "end": "2473180"
  },
  {
    "text": "actually tested so you through use of controlled experiments and over time as",
    "start": "2473180",
    "end": "2479510"
  },
  {
    "text": "we do this we can we can start actually real confidence that our system we",
    "start": "2479510",
    "end": "2485630"
  },
  {
    "text": "actually would be fine and the goal of doing curves engineering is not actually",
    "start": "2485630",
    "end": "2491360"
  },
  {
    "text": "break the production environment which is why containment and blast radius should be at all times from the center of your",
    "start": "2491360",
    "end": "2497930"
  },
  {
    "text": "thinking if you do jump the gun and go straight to production with a risky for the experiment end up breaking the",
    "start": "2497930",
    "end": "2504320"
  },
  {
    "text": "production environment and you can be sure then you can be sure that no business",
    "start": "2504320",
    "end": "2511310"
  },
  {
    "text": "can let you go back to production with your fancy chaotic experiments ever again and to execute and to execute the",
    "start": "2511310",
    "end": "2519770"
  },
  {
    "text": "Kaos experiments ourselves we can follow four simple steps to define what steady-state locks are for our system",
    "start": "2519770",
    "end": "2525770"
  },
  {
    "text": "high profile hypothesize different scenarios and different failures and how a system should behave call ahead inject",
    "start": "2525770",
    "end": "2533300"
  },
  {
    "text": "those failures into the system and then keep an eye on the metrics and try to find evidence that supports our original",
    "start": "2533300",
    "end": "2538910"
  },
  {
    "text": "hypothesis or to disprove it and with service technologies are a dose lambda",
    "start": "2538910",
    "end": "2546110"
  },
  {
    "text": "there are a lot more inherent complexity and chaos in this hole in the architecture and if anything there's",
    "start": "2546110",
    "end": "2552230"
  },
  {
    "text": "even more need for us to use chaos and during practices to identify those weaknesses early so that we can then go",
    "start": "2552230",
    "end": "2559640"
  },
  {
    "text": "ahead and harden our applications and make them more resilient even with our servers you can still inject controlled",
    "start": "2559640",
    "end": "2567020"
  },
  {
    "text": "failures into the system at the application level by potentially",
    "start": "2567020",
    "end": "2572900"
  },
  {
    "text": "injecting errors and latency into httpclient or into the a dress decay our functions",
    "start": "2572900",
    "end": "2578150"
  },
  {
    "text": "use or into the functions themselves directly and the client is also an",
    "start": "2578150",
    "end": "2585290"
  },
  {
    "text": "important part of the whole system and we should include them in our experiments as well so is that that's",
    "start": "2585290",
    "end": "2592190"
  },
  {
    "text": "everything I have I thank you very much for your time and",
    "start": "2592190",
    "end": "2597040"
  },
  {
    "text": "and if you want to learn more about chaos engineering or general practice on how to make a server application more",
    "start": "2603360",
    "end": "2609460"
  },
  {
    "text": "resilient there's a couple more sessions tomorrow and the day after as well so feel free to check those guys out and",
    "start": "2609460",
    "end": "2615510"
  },
  {
    "text": "please fill out the session survey in the mobile lab afterwards as well thank",
    "start": "2615510",
    "end": "2621160"
  },
  {
    "text": "you if you got any questions I'm gonna hang around here so you can come and ask me anything you want again figure guys very much for your",
    "start": "2621160",
    "end": "2626620"
  },
  {
    "text": "time",
    "start": "2626620",
    "end": "2628800"
  }
]