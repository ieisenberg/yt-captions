[
  {
    "start": "0",
    "end": "113000"
  },
  {
    "text": "all right thanks everyone for joining us today I think it's about time to get started we'll let the rest of the folks",
    "start": "230",
    "end": "6839"
  },
  {
    "text": "kind of stream in but wanted to go ahead and kick things off here so my name is Mike deck I'm a principal Solutions",
    "start": "6839",
    "end": "12330"
  },
  {
    "text": "Architect at AWS I'm gonna be joined a little bit later by Daniel from data Dog to tell you about some of the stuff that",
    "start": "12330",
    "end": "18660"
  },
  {
    "text": "they're building with with some of the topics that we are going to discuss today and I've been involved with the",
    "start": "18660",
    "end": "24869"
  },
  {
    "text": "event bridge service team and all of the sass providers that are launching integrations with us today helping them",
    "start": "24869",
    "end": "30779"
  },
  {
    "text": "to get onboard helping them to build their integrations with the service and I'm really excited to talk to you a little bit about what we've been",
    "start": "30779",
    "end": "37590"
  },
  {
    "text": "building so let's go and get started so in case you missed the keynote Amazon",
    "start": "37590",
    "end": "43530"
  },
  {
    "text": "event bridge is a new service event bus service that we just launched just a couple hours ago we will talk about this",
    "start": "43530",
    "end": "52500"
  },
  {
    "text": "in a lot more detail a little bit later on in the talk but you know the way that I kind of in general describe this is",
    "start": "52500",
    "end": "58430"
  },
  {
    "text": "event bridge makes it just as easy to consume events from all of your favorites apps like data dog or Zendesk",
    "start": "58430",
    "end": "66390"
  },
  {
    "text": "or pager duty as it is to consume events from Amazon s3 or other native AWS",
    "start": "66390",
    "end": "72030"
  },
  {
    "text": "services now before we kind of jump into all the details about event bridge itself I wanted to talk a little bit",
    "start": "72030",
    "end": "78180"
  },
  {
    "text": "about event-driven architectures in general and how they can help you to build better more reliable and scalable",
    "start": "78180",
    "end": "85130"
  },
  {
    "text": "systems yourself and to kind of introduce that topic I figured I'd tell you a little bit of tell you a little",
    "start": "85130",
    "end": "91290"
  },
  {
    "text": "story so how many folks here have kids anyone else have kids anyone have young kids like toddlers",
    "start": "91290",
    "end": "96350"
  },
  {
    "text": "okay I've got a couple of kids they're both pretty young and my wife and I take them to this gymnastics class every week",
    "start": "96350",
    "end": "104430"
  },
  {
    "text": "and I realized one day when we were getting them ready to go that they may actually do a great job of illustrating",
    "start": "104430",
    "end": "109500"
  },
  {
    "text": "the difference between command driven and event-driven architectures so let's",
    "start": "109500",
    "end": "114930"
  },
  {
    "start": "113000",
    "end": "113000"
  },
  {
    "text": "talk a little bit about what the process looks like at my house when were trying to get ready to go right so with my",
    "start": "114930",
    "end": "120270"
  },
  {
    "text": "older son he's pretty easy I can tell him hey James it's time for little Jim little Jim's about to start and he will",
    "start": "120270",
    "end": "125939"
  },
  {
    "text": "immediately run off and go get his shoes put him on go jump in the car seat he loves going to little Jim so he's super",
    "start": "125939",
    "end": "131280"
  },
  {
    "text": "excited cuz that takes care of that all by himself no problems great now I also have a",
    "start": "131280",
    "end": "138210"
  },
  {
    "text": "two-year-old two-year-olds a little bit different I can't just tell them hey it's time for little Jim I got to explicitly tell him hey Matthew",
    "start": "138210",
    "end": "143730"
  },
  {
    "text": "go find your shoes can you go find those and of course he runs off gets lost I've got to go figure out where he went I got",
    "start": "143730",
    "end": "149400"
  },
  {
    "text": "to go get the shoes come back sit down with him say Matthew let's put your shoes on buddy all right it's time to go",
    "start": "149400",
    "end": "155670"
  },
  {
    "text": "to lunch I'm got to get your shoes on no daddy don't want to don't want to is his favorite response to any request that I",
    "start": "155670",
    "end": "162150"
  },
  {
    "text": "have these days so I got to try and reformat it a little bit hey let's put your shoes on I got to do this before we can go you know nope I'm playing try it",
    "start": "162150",
    "end": "169230"
  },
  {
    "text": "again he's still not having it right eventually I'm gonna try this request so many times that you know I bring the",
    "start": "169230",
    "end": "175950"
  },
  {
    "text": "service down I get throttled I've got to go reboot it I got to go get mom to get involved with the ops escalation right",
    "start": "175950",
    "end": "182270"
  },
  {
    "text": "and I think that this really kind of illustrates this is a command oriented model right I have to tell him",
    "start": "182270",
    "end": "187920"
  },
  {
    "text": "specifically what I want him to do I've got to worry about service discovery I've got to worry about what happens",
    "start": "187920",
    "end": "193560"
  },
  {
    "text": "when something fails what happens when my requests fail how do I actually interact with him as opposed to James",
    "start": "193560",
    "end": "199080"
  },
  {
    "text": "where I just said hey it's time to go to a little gym and he takes care of the rest of it right how great would it be if all of the the kids in my household I",
    "start": "199080",
    "end": "206130"
  },
  {
    "text": "could just say hey it's time to go to little gym once and everyone immediately goes off and does whatever it is they",
    "start": "206130",
    "end": "211860"
  },
  {
    "text": "need to do in order to handle that event right so we're going to talk a little bit more about how these types of",
    "start": "211860",
    "end": "218130"
  },
  {
    "text": "patterns and using events can really improve the architectures that you're building then we'll jump in and kind of",
    "start": "218130",
    "end": "223350"
  },
  {
    "text": "deep dive into the details about the event bridge service itself and then last well Daniel come up and talk about",
    "start": "223350",
    "end": "229260"
  },
  {
    "text": "what data dog is built as a customer during our private beta period with this service so if you've been to a talk at",
    "start": "229260",
    "end": "237540"
  },
  {
    "start": "234000",
    "end": "234000"
  },
  {
    "text": "AWS if you've been to re-invent any of the other talks that you go to you're probably going to run into this slide",
    "start": "237540",
    "end": "242700"
  },
  {
    "text": "you've probably seen this before but I've actually got a little bit different spin on this so I'm here to tell you",
    "start": "242700",
    "end": "249060"
  },
  {
    "text": "that monoliths get a bad rap monoliths are actually way easier to build and program and reason about like there's a",
    "start": "249060",
    "end": "255540"
  },
  {
    "text": "lot of complexity when you move over to building distributed systems and so if",
    "start": "255540",
    "end": "260850"
  },
  {
    "text": "you can get away with building monoliths that's great the problem is monoliths don't scale both in terms of the number",
    "start": "260850",
    "end": "266729"
  },
  {
    "text": "of transactions second you can push through them as well as the size of the teams that you can build to support them so as your",
    "start": "266729",
    "end": "273690"
  },
  {
    "text": "organization grows to the point where you've got sufficient complexity you sort of have to move over to this",
    "start": "273690",
    "end": "279270"
  },
  {
    "text": "micro-services world in order to be able to address the issues that you've got",
    "start": "279270",
    "end": "284310"
  },
  {
    "text": "around being able to apply engineering effort across all of these different features and functionality in order to",
    "start": "284310",
    "end": "290670"
  },
  {
    "text": "be efficient but what I think it's important to recognize is that any of these new architectural paradigms we",
    "start": "290670",
    "end": "295830"
  },
  {
    "start": "293000",
    "end": "293000"
  },
  {
    "text": "talked about whether it's micro-services or event-driven architectures are really in service to these end goals right what",
    "start": "295830",
    "end": "302580"
  },
  {
    "text": "we want to do is build new features and functionality that our customers actually care about and do it in a way",
    "start": "302580",
    "end": "307920"
  },
  {
    "text": "that's reliable and resilient and scalable and we want to be able to do it faster so the rest of this talk is",
    "start": "307920",
    "end": "313710"
  },
  {
    "text": "really about talking about how can we apply event-driven architectures to meet these kind of end goals given the fact",
    "start": "313710",
    "end": "319770"
  },
  {
    "text": "that we're we're forced out of this kind of comfortable simple model where all of our data lives in one database and",
    "start": "319770",
    "end": "325410"
  },
  {
    "text": "everything is in the same memory space into this much more sort of complex and interesting distributed model of",
    "start": "325410",
    "end": "331470"
  },
  {
    "text": "microservices so let's talk a little bit about some of the challenges associated with building these types of distributed",
    "start": "331470",
    "end": "338400"
  },
  {
    "text": "systems right so the first thing I want to talk about is coupling so we",
    "start": "338400",
    "end": "343410"
  },
  {
    "text": "oftentimes when we talk about microservices one of the big sort of you know benefits that's often cited is oh",
    "start": "343410",
    "end": "349710"
  },
  {
    "text": "well micro services are decoupled or they're loosely coupled right but it's important to recognize that anytime you",
    "start": "349710",
    "end": "355650"
  },
  {
    "text": "have two systems communicating with one another there is some degree of coupling happening there and you need to",
    "start": "355650",
    "end": "361020"
  },
  {
    "text": "understand sort of the the subtleties of what that style of coupling that you've designed in there the the ramifications",
    "start": "361020",
    "end": "367260"
  },
  {
    "text": "of that sort of long term for the health of your system so we can take a look at a super simple synchronous API we've all",
    "start": "367260",
    "end": "374610"
  },
  {
    "text": "built these a hundred times I'm sure right client comes in says hey I want a new order the order service then has to",
    "start": "374610",
    "end": "380130"
  },
  {
    "text": "go and talk to some other service like an invoice service say hey can you create a new invoice for me it waits to get that response back and then it",
    "start": "380130",
    "end": "386310"
  },
  {
    "text": "responds to the client right super easy and this works great when you've got a really simple easy architecture like",
    "start": "386310",
    "end": "393000"
  },
  {
    "start": "389000",
    "end": "389000"
  },
  {
    "text": "this but as we continue to grow this system as we continue to add more complexity to it",
    "start": "393000",
    "end": "399900"
  },
  {
    "text": "you start to run into the problem we're now the order service is taking on more and more complexity of",
    "start": "399900",
    "end": "404970"
  },
  {
    "text": "all of these other endpoints that it needs to talk to you right it's got a bundle in the SDK is for each one of",
    "start": "404970",
    "end": "410280"
  },
  {
    "text": "these different services it needs to understand what are the failure and retry semantics as it communicates with each other it's got to do service",
    "start": "410280",
    "end": "416669"
  },
  {
    "text": "discovery across all of these endpoints than it needs to communicate with and so as this grows and you continue to add",
    "start": "416669",
    "end": "422820"
  },
  {
    "start": "422000",
    "end": "422000"
  },
  {
    "text": "more and more services you know you continue to compound this problem and you're adding friction to",
    "start": "422820",
    "end": "429630"
  },
  {
    "text": "kind of the development process here right so new services want to come on board now I've got to involve my orders",
    "start": "429630",
    "end": "434880"
  },
  {
    "text": "my my the team that manages the order service to work with them to make sure",
    "start": "434880",
    "end": "439889"
  },
  {
    "text": "that we get this kind of integration correctly the kid just come on and magically start getting called by the order service without kind of doing that",
    "start": "439889",
    "end": "446039"
  },
  {
    "text": "coordination so again this kind of slows down our development process one of the reasons that we wanted to go to micro",
    "start": "446039",
    "end": "451289"
  },
  {
    "text": "services in the first place is that we can have a lot of different independent engineering teams all working together",
    "start": "451289",
    "end": "457280"
  },
  {
    "text": "but independently without having to have kind of these high touch friction points",
    "start": "457280",
    "end": "463169"
  },
  {
    "text": "from between one other so let's take a look at what what events can do to help",
    "start": "463169",
    "end": "468990"
  },
  {
    "text": "us solve this problem but first I think it's important to kind of define what what is an event so I've been saying",
    "start": "468990",
    "end": "474990"
  },
  {
    "text": "this word event-driven a lot and the simplest definition I've got is an event is a signal that a systems state has",
    "start": "474990",
    "end": "481080"
  },
  {
    "text": "changed and I don't think it's terribly useful to get into a big sort of philosophical argument about the",
    "start": "481080",
    "end": "487919"
  },
  {
    "text": "semantics of what is or is not an event practically speaking events are typically going to be little JSON",
    "start": "487919",
    "end": "494460"
  },
  {
    "text": "payloads that get passed around it's basically any blob of information that can be passed from one system to another",
    "start": "494460",
    "end": "500880"
  },
  {
    "text": "that represents the the current state of that system or some transition of state",
    "start": "500880",
    "end": "505889"
  },
  {
    "text": "that has happened upstream so this could be hey a new order was created hey a new customer service ticket was created or",
    "start": "505889",
    "end": "511199"
  },
  {
    "text": "maybe even hey a new and item was added to your database table or a new object was added to your s3 buy it right all of",
    "start": "511199",
    "end": "517440"
  },
  {
    "text": "these are events they all contain this kind of information that can be acted upon by other people but one of the",
    "start": "517440",
    "end": "522750"
  },
  {
    "text": "really kind of critical properties of events is that they're observable as opposed to directed so when you've got",
    "start": "522750",
    "end": "530160"
  },
  {
    "start": "523000",
    "end": "523000"
  },
  {
    "text": "kind of a command oriented architecture you tend to have commands that are directed to an",
    "start": "530160",
    "end": "535710"
  },
  {
    "text": "individual end point right so in this case you know I'm saying Joe please go",
    "start": "535710",
    "end": "541290"
  },
  {
    "text": "and create this invoice and then Joe can come and respond back to me directly and we kind of have this one-to-one communication pattern the command that I",
    "start": "541290",
    "end": "547650"
  },
  {
    "text": "created was specifically intended for that one endpoint my vents on the other hand are observable these are simply",
    "start": "547650",
    "end": "554339"
  },
  {
    "text": "facts that are sort of put out there to the room that anyone can listen to if they choose to so in this case I can say",
    "start": "554339",
    "end": "560940"
  },
  {
    "text": "hey you know customer X just bought a widget or just ordered a widget maybe I've got one person up at the top that",
    "start": "560940",
    "end": "566970"
  },
  {
    "text": "sort of makes a mental note of that and says okay that's interesting I'm glad I know that maybe someone else says oh",
    "start": "566970",
    "end": "572640"
  },
  {
    "text": "that means that I need to go and create the invoice I'm gonna go and do something right and then I've got other people that maybe ignore that event they",
    "start": "572640",
    "end": "578790"
  },
  {
    "text": "don't particularly care about events being orders being created maybe they only care when orders are canceled or when other things happen right but the",
    "start": "578790",
    "end": "585839"
  },
  {
    "text": "important part about this is the guy in the blue shirt doesn't need to know what everyone else is going to do with that",
    "start": "585839",
    "end": "592290"
  },
  {
    "text": "event you just need to know how to sort of publish that event publicly so they can all hear it so getting back to our",
    "start": "592290",
    "end": "598620"
  },
  {
    "text": "original architecture we can update our order ServiceNow to publish this event",
    "start": "598620",
    "end": "603690"
  },
  {
    "text": "instead of making these individual command calls but we still kind of have all of these arrows right we still have",
    "start": "603690",
    "end": "609300"
  },
  {
    "text": "all of this these lines on here that are representing these individual point-to-point connections and so we still need to kind of figure out how to",
    "start": "609300",
    "end": "615420"
  },
  {
    "text": "manage that and to do that what we need is what I'm referring to as an event router so the event router is some sort",
    "start": "615420",
    "end": "621570"
  },
  {
    "text": "of service that can abstract our event producers from the event consumers and also gives us the ability to you know",
    "start": "621570",
    "end": "628470"
  },
  {
    "text": "filter and route specific events to the consumers that care about them right so",
    "start": "628470",
    "end": "633660"
  },
  {
    "text": "we had some consumers in the previous example that maybe didn't care about order creation events we want to make",
    "start": "633660",
    "end": "639000"
  },
  {
    "text": "sure that they're not getting sort of flooded with all of the events they don't care about everyone can just subscribe to sort of the events that are",
    "start": "639000",
    "end": "644790"
  },
  {
    "text": "interesting to them so there are a couple of different services that you can use in AWS to to achieve this these",
    "start": "644790",
    "end": "652290"
  },
  {
    "start": "647000",
    "end": "647000"
  },
  {
    "text": "are the two sort of most common and most powerful ones I would say so Amazon simple notification service has been",
    "start": "652290",
    "end": "658529"
  },
  {
    "text": "around for a long time SNS if you guys have used this before is great at this",
    "start": "658529",
    "end": "663540"
  },
  {
    "text": "kind of event routing model and then of course Amazon Evette bridge or cloud watch events if you guys have",
    "start": "663540",
    "end": "669459"
  },
  {
    "text": "used the cloud watch events event bus has the exact same model and so these",
    "start": "669459",
    "end": "674500"
  },
  {
    "text": "are really powerful services both of them give you the ability to kind of publish events on the front side and",
    "start": "674500",
    "end": "679750"
  },
  {
    "text": "then have multiple systems downstream that are consuming these events both of them can send events to lambda functions",
    "start": "679750",
    "end": "686290"
  },
  {
    "text": "and SQS as well as a couple of others but there are a couple of key differences here to think about when",
    "start": "686290",
    "end": "691329"
  },
  {
    "text": "when you're trying to choose which of these services is right for your architecture so SNS is really great when",
    "start": "691329",
    "end": "698170"
  },
  {
    "text": "you need to go super wide or have super high throughput systems right so if you need millions of subscribers to a topic",
    "start": "698170",
    "end": "704139"
  },
  {
    "text": "or you want to push really really high throughput through service SNS is the is",
    "start": "704139",
    "end": "709930"
  },
  {
    "text": "the right service for you can it can handle all of that with ease Amazon event bridge really shines when",
    "start": "709930",
    "end": "716139"
  },
  {
    "text": "it comes to its native integrations with producers and consumers right so we've got 95 different AWS services that can",
    "start": "716139",
    "end": "723519"
  },
  {
    "text": "create events and they just show up in your event bus there's also 15 different downstream AWS",
    "start": "723519",
    "end": "730750"
  },
  {
    "text": "services that you can trigger directly and now we've got integration with 10 new SAS providers today and more more of",
    "start": "730750",
    "end": "736540"
  },
  {
    "text": "those to come so event bridge gives you this really powerful mechanism where you can can you can connect these event",
    "start": "736540",
    "end": "744490"
  },
  {
    "text": "producers to various event consumers you can even add in you know simple transformational logic inside of the",
    "start": "744490",
    "end": "750550"
  },
  {
    "text": "event bus itself so you can do really really powerful things without writing a whole lot of code by using a vet bridge",
    "start": "750550",
    "end": "756850"
  },
  {
    "text": "and event buses so now that we have this concept of an event router this is what",
    "start": "756850",
    "end": "761860"
  },
  {
    "start": "759000",
    "end": "759000"
  },
  {
    "text": "our architecture it looks like and the great thing here is now you know we've broken this coupling between the order",
    "start": "761860",
    "end": "767680"
  },
  {
    "text": "service and all of these downstream services so now the order service doesn't need to do service discovery",
    "start": "767680",
    "end": "772959"
  },
  {
    "text": "across all of these it doesn't need to embed the SDK for all of these other api's it can just integrate directly",
    "start": "772959",
    "end": "778990"
  },
  {
    "text": "with event bridge or SNS publish its messages there and move on with us life so it keeps the order service a lot",
    "start": "778990",
    "end": "785139"
  },
  {
    "text": "simpler overall by introducing this kind of event router concept and then all of the other new services on the right can",
    "start": "785139",
    "end": "792040"
  },
  {
    "text": "very easily come in and subscribe to these events and add new filter policies or add new routes that they want to you",
    "start": "792040",
    "end": "799149"
  },
  {
    "text": "know that indicate that they want to receive events so now when you want to add a new box here on the right when a new team",
    "start": "799149",
    "end": "804570"
  },
  {
    "text": "comes in and says hey I'd like to build an analytic service that's going to consume all of these order creation",
    "start": "804570",
    "end": "810270"
  },
  {
    "text": "events it's really easy for them to do that they don't have to go and bother the order of service team to manage that",
    "start": "810270",
    "end": "815850"
  },
  {
    "text": "for them so yeah so once the order service sends these events to the router",
    "start": "815850",
    "end": "821970"
  },
  {
    "text": "the router is going to route them intelligently to provide only the events",
    "start": "821970",
    "end": "827400"
  },
  {
    "text": "that are interesting to each downstream consumer so we've been talking so that",
    "start": "827400",
    "end": "833820"
  },
  {
    "start": "833000",
    "end": "833000"
  },
  {
    "text": "you know the example that I've been using to kind of set this up has been primarily around how do you get multiple",
    "start": "833820",
    "end": "840000"
  },
  {
    "text": "sort of micro services to talk to each other but this same sort of model is actually really powerful even inside of",
    "start": "840000",
    "end": "846360"
  },
  {
    "text": "a single bounded context so we can take a look at kind of how we might potentially build the order service",
    "start": "846360",
    "end": "852720"
  },
  {
    "text": "itself to be more event-driven right so here we've got a simple sort of service API up at the front that can receive our",
    "start": "852720",
    "end": "859320"
  },
  {
    "text": "our order requests it's going to put a an event onto an SNS topic and then",
    "start": "859320",
    "end": "864330"
  },
  {
    "text": "that's going to go out to this kind of primary order processing pipeline right so this process order function is where",
    "start": "864330",
    "end": "870720"
  },
  {
    "text": "the majority of our business logic for how we see the Howey and handle an",
    "start": "870720",
    "end": "876300"
  },
  {
    "text": "individual order is going to go now you might be asking yourself why put an SNS topic and an sqs queue in the middle of",
    "start": "876300",
    "end": "882960"
  },
  {
    "text": "this architecture right it seems like it would be a lot easier if I just had this front-end lambda function take care of",
    "start": "882960",
    "end": "891060"
  },
  {
    "text": "that you know all of that business logic directly but what this allows us to do is start to add additional components to",
    "start": "891060",
    "end": "897840"
  },
  {
    "text": "the service in a really nice kind of decoupled independent way so one of the cool things about building systems using",
    "start": "897840",
    "end": "905460"
  },
  {
    "text": "events is now you can actually capture those events and then replay them if something goes wrong right so imagine a",
    "start": "905460",
    "end": "911670"
  },
  {
    "text": "situation where we deploy a bug out to production we end up corrupting our database wouldn't it be nice if I could",
    "start": "911670",
    "end": "917670"
  },
  {
    "text": "turn back the clock fix the bug and then just replay all of the events from the last day to kind of reset the state of",
    "start": "917670",
    "end": "923520"
  },
  {
    "text": "my system it's actually really easy to deploy a system like that and you can do it now in parallel with the rest of your",
    "start": "923520",
    "end": "929730"
  },
  {
    "text": "pipelines without having to add all of that logic into kind of that primary order processing",
    "start": "929730",
    "end": "935320"
  },
  {
    "text": "flow another super common example here would be like a search and analytics use case so maybe I want to take all of my",
    "start": "935320",
    "end": "942070"
  },
  {
    "text": "largest orders write orders where you know they're they're larger than some dollar amount or have some kind of",
    "start": "942070",
    "end": "948550"
  },
  {
    "text": "specific attribute and I want to ingest those into an elastic search cluster so",
    "start": "948550",
    "end": "954100"
  },
  {
    "text": "I can build Cabana dashboards or what have you again super easy now to kind of add that on as this additional component",
    "start": "954100",
    "end": "961390"
  },
  {
    "text": "that doesn't have to impact the rest of the code that I'm writing these can all be now deployed developed and maintained",
    "start": "961390",
    "end": "967540"
  },
  {
    "text": "independently of one another and they can all coexist here without me having",
    "start": "967540",
    "end": "973120"
  },
  {
    "text": "to add a bunch of custom logic into the the API itself so a couple other",
    "start": "973120",
    "end": "980440"
  },
  {
    "text": "interesting things to kind of call out from this diagram you'll notice that there are a lot of lambda functions kind of start and starting to pop up here and",
    "start": "980440",
    "end": "987310"
  },
  {
    "text": "what I think is interesting is when you start moving to a more event-driven model becomes really obvious that your",
    "start": "987310",
    "end": "994330"
  },
  {
    "text": "systems start to reduce down to this kind of notion that okay I've got some set of events that are getting produced",
    "start": "994330",
    "end": "1000150"
  },
  {
    "text": "and then there are bits of business logic I need to execute every time one of those events occurs and so it starts",
    "start": "1000150",
    "end": "1006300"
  },
  {
    "text": "to get really easy to take those little bits of business logic and package them up too into these stateless functions",
    "start": "1006300",
    "end": "1012150"
  },
  {
    "text": "that you can then deploy using lambda not have to worry about managing any of the infrastructure etc so this is really",
    "start": "1012150",
    "end": "1017550"
  },
  {
    "text": "a great enabler as you're trying to move away get out of the business of you know managing servers and all of the",
    "start": "1017550",
    "end": "1023460"
  },
  {
    "text": "operational overhead that that comes along with that the other thing to note here is this kind of architecture these",
    "start": "1023460",
    "end": "1029699"
  },
  {
    "text": "these actual sort of pipeline examples are from a project that we recently release called the event fork pipelines",
    "start": "1029699",
    "end": "1036510"
  },
  {
    "text": "so if you just search for event for pipelines you'll find a project on github that has all of the code for",
    "start": "1036510",
    "end": "1043560"
  },
  {
    "text": "these it's got confirmation and Sam templates that you can use to deploy these and these are actually now available in the server list app repo as",
    "start": "1043560",
    "end": "1050490"
  },
  {
    "text": "well so if you want to include these in your own designs it's super easy to add those as kind of sub components inside",
    "start": "1050490",
    "end": "1056250"
  },
  {
    "text": "of your own Sam templates so talks a little bit about kind of coupling and",
    "start": "1056250",
    "end": "1062490"
  },
  {
    "text": "how we can use event-driven architectures to reduce the amount of coupling in our systems and make them more flexible but",
    "start": "1062490",
    "end": "1069330"
  },
  {
    "text": "I also want to talk about availability and how event-driven architectures can help you to build more highly available",
    "start": "1069330",
    "end": "1075929"
  },
  {
    "text": "more resilient architectures as well so going back to our original example right",
    "start": "1075929",
    "end": "1081509"
  },
  {
    "text": "I think it's important to think about what happens in this diagram when our invoice service goes down right",
    "start": "1081509",
    "end": "1088169"
  },
  {
    "text": "everything fails all the time we've got to be prepared for the the situation when one of our services has an outage",
    "start": "1088169",
    "end": "1095099"
  },
  {
    "text": "for some reason right and because we have this kind of synchronous direct coupling between these two services if",
    "start": "1095099",
    "end": "1101429"
  },
  {
    "text": "the invoice service goes down that effectively means that our order services down right so it may be able to still respond to client requests but",
    "start": "1101429",
    "end": "1109019"
  },
  {
    "text": "it's not going to be able to do so effectively and ultimately our clients are going to sort of be stuck and not be able to place orders and this kind of",
    "start": "1109019",
    "end": "1116190"
  },
  {
    "text": "concept is applicable even if the invoice service isn't down completely right maybe the invoice service is just",
    "start": "1116190",
    "end": "1122099"
  },
  {
    "text": "having a bad day it's just got really high latency or you know maybe it's just got a slightly increased error rate you",
    "start": "1122099",
    "end": "1130080"
  },
  {
    "text": "can you can start to see these kind of patterns where you know maybe your order service is a little bit faster than the",
    "start": "1130080",
    "end": "1136289"
  },
  {
    "text": "invoice service and you get a flood of traffic and now the order service is hammering the invoice service and",
    "start": "1136289",
    "end": "1142349"
  },
  {
    "text": "eventually it starts slowing down and eventually starting to error a little bit and so that means now your upstream services are all gonna start retrying",
    "start": "1142349",
    "end": "1148889"
  },
  {
    "text": "and you end up making the problem even worse you get into these really sort of negative feedback loops that can that",
    "start": "1148889",
    "end": "1155429"
  },
  {
    "text": "can really cause a lot of problems when you get into these synchronously coupled distributed systems so that brings us to",
    "start": "1155429",
    "end": "1162239"
  },
  {
    "start": "1161000",
    "end": "1161000"
  },
  {
    "text": "kind of the next property of events that's super critical which is events are asynchronous right so when we look",
    "start": "1162239",
    "end": "1169200"
  },
  {
    "text": "at kind of a synchronous model what that means is simply that you know when service a makes a synchronous call to",
    "start": "1169200",
    "end": "1174269"
  },
  {
    "text": "service B it's got a wait for service B to do its entire process and return back before service a you can kind of move on",
    "start": "1174269",
    "end": "1181169"
  },
  {
    "text": "with its life compare that to an asynchronous model which is more of a fire-and-forget type of scenario where",
    "start": "1181169",
    "end": "1188789"
  },
  {
    "text": "service a can send this message to service B and then immediately go back and continue processing and let service",
    "start": "1188789",
    "end": "1195089"
  },
  {
    "text": "B go and do its thing in parallel right so now we've kind of effectively decoupled these these two processes",
    "start": "1195089",
    "end": "1200950"
  },
  {
    "text": "we don't have the same sort of latency penalty of additive latency when we're",
    "start": "1200950",
    "end": "1206140"
  },
  {
    "text": "when we're doing this and because we're not waiting for that response service say it can continue to to respond back",
    "start": "1206140",
    "end": "1213160"
  },
  {
    "text": "to clients and do the rest of the work that it needs to even in the event that service B has some sort of problem right",
    "start": "1213160",
    "end": "1220600"
  },
  {
    "start": "1220000",
    "end": "1220000"
  },
  {
    "text": "so taking a look at our diagram again now inserting sort of this event router in the middle in order to make this an",
    "start": "1220600",
    "end": "1226810"
  },
  {
    "text": "asynchronous communication now when we post the order and our order service goes to put the event into our event bus",
    "start": "1226810",
    "end": "1233770"
  },
  {
    "text": "the event bus is going to respond immediately right it's going to respond as soon as it's persisted that event",
    "start": "1233770",
    "end": "1238900"
  },
  {
    "text": "said hey thanks I got the event but the order service doesn't need to wait around for the invoice service to do it",
    "start": "1238900",
    "end": "1244090"
  },
  {
    "text": "its thing it can just move forward immediately right so it responds about the client the clients happy and then",
    "start": "1244090",
    "end": "1249640"
  },
  {
    "text": "the invoice service can get that message when it needs to and Ango and process it on the back end and so even in the case",
    "start": "1249640",
    "end": "1255700"
  },
  {
    "text": "where the invoice service is down we can still have a successful confirmation back to the client and then go in and",
    "start": "1255700",
    "end": "1262390"
  },
  {
    "text": "kind of handle that event later on once the invoice services back right so some",
    "start": "1262390",
    "end": "1268000"
  },
  {
    "text": "of you may be thinking though like hey if we've if we've kind of broken this synchronous link between these two",
    "start": "1268000",
    "end": "1274270"
  },
  {
    "text": "services what happens when the invoice service goes down and I tell my client that yeah everything was successful",
    "start": "1274270",
    "end": "1279400"
  },
  {
    "text": "that's problematic and in a lot of cases that's true I'd kind of rather get the error immediately rather than waiting to",
    "start": "1279400",
    "end": "1287290"
  },
  {
    "text": "find out that oh you know you set the message to the invoice service but it got lost because the invoice service was down but really this is this is really",
    "start": "1287290",
    "end": "1293650"
  },
  {
    "text": "kind of a problem with how the invoice service is working we want to figure out is there a way that the invoice service",
    "start": "1293650",
    "end": "1299410"
  },
  {
    "text": "itself can could have sustained these types of outages but still managed to handle all of the events that we've sent",
    "start": "1299410",
    "end": "1306490"
  },
  {
    "text": "to it and really if you look inside of the order service and this is obviously in a simplified view of the world but I",
    "start": "1306490",
    "end": "1313240"
  },
  {
    "start": "1307000",
    "end": "1307000"
  },
  {
    "text": "think it represents what most micro services really are kind of at their fundamental level the issue here is that",
    "start": "1313240",
    "end": "1318910"
  },
  {
    "text": "we're pushing events into this kind of business logic component and so if this business auction goes down we're",
    "start": "1318910",
    "end": "1325150"
  },
  {
    "text": "continuing to try to push events into it which means that it's not going to actually get to execute its logic it's",
    "start": "1325150",
    "end": "1331090"
  },
  {
    "text": "not going to persist things to the database correctly and we've got problems right so the way",
    "start": "1331090",
    "end": "1336670"
  },
  {
    "text": "to get around this is to move to a pole based model so we insert an event store",
    "start": "1336670",
    "end": "1342400"
  },
  {
    "text": "of some sort some sort of service that can persist events upfront and then the",
    "start": "1342400",
    "end": "1347740"
  },
  {
    "text": "the service itself the invoice service can now pull these events whenever it",
    "start": "1347740",
    "end": "1352840"
  },
  {
    "text": "feels like so whenever it's available so now as we're pushing events in here they're gonna get stored in our events",
    "start": "1352840",
    "end": "1358390"
  },
  {
    "text": "store even if the even if the invoice service itself goes down we can continue to add more events and those are going",
    "start": "1358390",
    "end": "1364600"
  },
  {
    "text": "to be stored safely and held on - even if the even if the kind of primary processing components down and then when",
    "start": "1364600",
    "end": "1371140"
  },
  {
    "text": "this comes back we can go and process those it can pull them back as it sees fit right and one of the great things",
    "start": "1371140",
    "end": "1377470"
  },
  {
    "text": "about this - is it allows you to kind of buffer messages in the event that again we get one of those big spikes in",
    "start": "1377470",
    "end": "1382690"
  },
  {
    "text": "traffic and the invoice service is running a little slow that day well now this gives us a nice way to kind of",
    "start": "1382690",
    "end": "1388240"
  },
  {
    "text": "buffer these messages and handle them at the speed that it it feels is appropriate so you don't end up with",
    "start": "1388240",
    "end": "1394600"
  },
  {
    "text": "this sort of retry storm where all of these services are kind of hitting you over and over again because you're",
    "start": "1394600",
    "end": "1399790"
  },
  {
    "text": "saying hey please I'm under too much load I can't handle this traffic people are just going to continue to retry well",
    "start": "1399790",
    "end": "1405820"
  },
  {
    "text": "here you've got sort of a buffer out in front where even if you're in a degraded capacity you can serve handle messages",
    "start": "1405820",
    "end": "1411730"
  },
  {
    "text": "as quickly as is appropriate for you at that time so looking again at kind of",
    "start": "1411730",
    "end": "1417280"
  },
  {
    "start": "1416000",
    "end": "1416000"
  },
  {
    "text": "the AWS services you can use in this type of model the the two kind of big ones here would be Amazon simple queue",
    "start": "1417280",
    "end": "1424330"
  },
  {
    "text": "service or sqs as well as Amazon Kinesis so comparing these these have some some",
    "start": "1424330",
    "end": "1432190"
  },
  {
    "text": "more significant differences I think than the last slide that we looked at so Kinesis is really interesting because",
    "start": "1432190",
    "end": "1437530"
  },
  {
    "text": "you can actually have multiple consumers for a single stream so it kind of gives you some of those features around being",
    "start": "1437530",
    "end": "1444970"
  },
  {
    "text": "able to fan out and do kind of those event routing types of pieces inside of",
    "start": "1444970",
    "end": "1451240"
  },
  {
    "text": "this service it also gives you kind of out-of-the-box well-ordered stream",
    "start": "1451240",
    "end": "1457450"
  },
  {
    "text": "semantics so if message ordering ends up being really important for your service which ideally you should try to design",
    "start": "1457450",
    "end": "1465100"
  },
  {
    "text": "as much as possible so services that are kind of agnostic to the message ordering but in some cases",
    "start": "1465100",
    "end": "1470429"
  },
  {
    "text": "you need that and Kinesis gives you kind of that well ordered messaging out-of-the-box sqs can also provide well",
    "start": "1470429",
    "end": "1477059"
  },
  {
    "text": "ordered messaging using what are called FIFO queues but when you use general",
    "start": "1477059",
    "end": "1482280"
  },
  {
    "text": "cues there aren't kind of guarantees around that but what's great about standard sqs queues is that you don't",
    "start": "1482280",
    "end": "1488520"
  },
  {
    "text": "have to worry about scaling at all so it's fully managed there's no concept of setting kind of any capacity you just",
    "start": "1488520",
    "end": "1495059"
  },
  {
    "text": "send messages to it you can send as many messages as you want right you virtually unlimited amount of scale that you can",
    "start": "1495059",
    "end": "1502140"
  },
  {
    "text": "achieve with a single SQ SQ and makes it really really easy just you to put these",
    "start": "1502140",
    "end": "1508080"
  },
  {
    "text": "into your architecture and then use that as this kind of durable event store that you can you can use to to buffer",
    "start": "1508080",
    "end": "1514980"
  },
  {
    "text": "messages as needed throughout throughout that kind of process so now they the",
    "start": "1514980",
    "end": "1520710"
  },
  {
    "start": "1519000",
    "end": "1519000"
  },
  {
    "text": "kind of final architecture that we've arrived at we've got a vent bridge which is serving as our event router and then",
    "start": "1520710",
    "end": "1526470"
  },
  {
    "text": "we've got an sqs queue that belongs to the invoice service as our events store that's going to help kind of provide",
    "start": "1526470",
    "end": "1533100"
  },
  {
    "text": "this resiliency of this architecture and so this can be extended out as you fan",
    "start": "1533100",
    "end": "1539490"
  },
  {
    "start": "1536000",
    "end": "1536000"
  },
  {
    "text": "out as you've got multiple micro services that you're integrating with each one of them can have their own queue and you can route these messages",
    "start": "1539490",
    "end": "1546090"
  },
  {
    "text": "to to these queues directly and so this ends up providing you this is really",
    "start": "1546090",
    "end": "1551190"
  },
  {
    "text": "nice robust architecture any one of these components can fail independently and not have any impact on anyone else",
    "start": "1551190",
    "end": "1558390"
  },
  {
    "text": "right so we've got this really nice kind of property now where we're yeah the the",
    "start": "1558390",
    "end": "1564390"
  },
  {
    "text": "system itself is much much more resilient to failure and in a single kind of outage is not going to propagate",
    "start": "1564390",
    "end": "1570780"
  },
  {
    "text": "through the rest of the system so we can go in we can recover from that failure in the invoice service the invoice",
    "start": "1570780",
    "end": "1575790"
  },
  {
    "text": "service can come back process its backlog of events and then kind of move on so up until now I've been talking a",
    "start": "1575790",
    "end": "1586110"
  },
  {
    "text": "lot about these sort of hypothetical services that you own right so in all my examples I'm assuming that you know you",
    "start": "1586110",
    "end": "1592740"
  },
  {
    "text": "own the order service and you can update it so that it's talking now to event bridge instead of making these direct",
    "start": "1592740",
    "end": "1598710"
  },
  {
    "text": "API calls but what I find when I talk to customers these days is more and more customers",
    "start": "1598710",
    "end": "1604559"
  },
  {
    "text": "are relying on SAS applications as major components within their enterprise architecture so there's a lot of really",
    "start": "1604559",
    "end": "1610920"
  },
  {
    "text": "kind of critical business workflows that are getting managed inside of SAS applications whether it's a CRM or an",
    "start": "1610920",
    "end": "1617850"
  },
  {
    "text": "identity management solution or monitoring platform customers are more and more kind of using these managed",
    "start": "1617850",
    "end": "1624360"
  },
  {
    "text": "services that they don't necessarily control directly so the question becomes how do we take all of these really rich",
    "start": "1624360",
    "end": "1631380"
  },
  {
    "start": "1630000",
    "end": "1630000"
  },
  {
    "text": "kind of data sources and events that that exist within these SAS applications",
    "start": "1631380",
    "end": "1637710"
  },
  {
    "text": "and get them into our environment so that we can kind of kick off all of these great event-driven workflows that",
    "start": "1637710",
    "end": "1642900"
  },
  {
    "text": "I've been talking about and there are a couple of different options that you've got right so the first one and one that",
    "start": "1642900",
    "end": "1650040"
  },
  {
    "text": "you end up resorting to a lot of times is kind of this idea of pulling right so we can set up essentially a cron job in",
    "start": "1650040",
    "end": "1657990"
  },
  {
    "text": "some cases literally a cron job on a server in other cases you might use quad watch events with a schedule based rule",
    "start": "1657990",
    "end": "1664980"
  },
  {
    "text": "that's going to go off and trigger and a lambda function or some other mechanism",
    "start": "1664980",
    "end": "1670590"
  },
  {
    "text": "to go out and make a request to this API and try to detect what's actually",
    "start": "1670590",
    "end": "1675720"
  },
  {
    "text": "changed and sort of then go and send these events downstream right and this certainly works and in is absolutely",
    "start": "1675720",
    "end": "1681990"
  },
  {
    "text": "plenty of cases where customers have successfully deployed these kind of models but there's a lot of drawbacks to",
    "start": "1681990",
    "end": "1687690"
  },
  {
    "text": "doing it this way right so one is from a data freshness perspective this is not ideal because I may only be pulling once",
    "start": "1687690",
    "end": "1695700"
  },
  {
    "text": "every few minutes or once an hour or something like that and so I'm not getting kind of real-time updates",
    "start": "1695700",
    "end": "1701580"
  },
  {
    "text": "there's there's a significant delay in terms of how how quickly I'm able to",
    "start": "1701580",
    "end": "1707010"
  },
  {
    "text": "respond to events and if I want to increase you know decrease the amount of event latency that I'm introducing that",
    "start": "1707010",
    "end": "1713910"
  },
  {
    "text": "means I need to increase the frequency with which I'm pulling this system and",
    "start": "1713910",
    "end": "1719669"
  },
  {
    "text": "that becomes kind of expensive right you've got to manage this polling fleet you've got a you know pay for all of these systems to go out and just kind of",
    "start": "1719669",
    "end": "1726960"
  },
  {
    "text": "constantly ask hey is anything is there anything new and the downstream system or the in this case I guess the upstream",
    "start": "1726960",
    "end": "1732290"
  },
  {
    "text": "the SAS application probably doesn't really appreciate that either in a lot of cases you may be getting throttled",
    "start": "1732290",
    "end": "1737750"
  },
  {
    "text": "because of that that can impact other areas of your architecture that are making other kind of API calls and so",
    "start": "1737750",
    "end": "1745730"
  },
  {
    "text": "just overall if you can get away if you can avoid pulling you probably shouldn't",
    "start": "1745730",
    "end": "1750760"
  },
  {
    "text": "so one of the other kind of common approaches to solving this you know SAS eventing problem is is this concept of a",
    "start": "1750760",
    "end": "1758390"
  },
  {
    "text": "web hook right so a web hook just means I can go into my SAS application I can figure some HTTP endpoint that I want",
    "start": "1758390",
    "end": "1766310"
  },
  {
    "text": "them to call back to anytime a new event occurs and you know again this is this",
    "start": "1766310",
    "end": "1772970"
  },
  {
    "text": "is definitely better than sort of the polling model because now I'm getting sort of events in real time as they're",
    "start": "1772970",
    "end": "1778340"
  },
  {
    "text": "happening I'm kind of getting notified immediately and I don't have to spend those extra cycles kind of constantly",
    "start": "1778340",
    "end": "1783710"
  },
  {
    "text": "pulling and asking is there is there anything new but the downside to this is now I've got to own and manage a",
    "start": "1783710",
    "end": "1789980"
  },
  {
    "text": "publicly accessible HTTP endpoint right like typically you've got to go and put some endpoint out on the public Internet",
    "start": "1789980",
    "end": "1796610"
  },
  {
    "text": "that anyone who wants to can call and I've got to manage kind of the security around that I've got to deal with you",
    "start": "1796610",
    "end": "1803450"
  },
  {
    "text": "know potential DDoS attacks and all of those things and now there are services that make that a lot easier to do than",
    "start": "1803450",
    "end": "1808610"
  },
  {
    "text": "it used to be so Amazon API gateway is a great way to kind of manage these types",
    "start": "1808610",
    "end": "1813860"
  },
  {
    "text": "of public endpoints but it's still something that you have to deal with you're still gonna have to write some",
    "start": "1813860",
    "end": "1819050"
  },
  {
    "text": "code to handle these events to do the auth a lot of times like the off models",
    "start": "1819050",
    "end": "1824090"
  },
  {
    "text": "that some of these web hooks use are not ideal you know they might just be using a static shared secret that are",
    "start": "1824090",
    "end": "1829910"
  },
  {
    "text": "vulnerable to replay attacks and other things like that and so so anyway so this is just a number of sort of",
    "start": "1829910",
    "end": "1835340"
  },
  {
    "text": "limitations that that web hooks have that ideally we would have a better sort of solution so that was really kind of",
    "start": "1835340",
    "end": "1842930"
  },
  {
    "text": "the genesis for us in thinking about you know how can we solve this problem matter this is something that we see",
    "start": "1842930",
    "end": "1849170"
  },
  {
    "text": "more and more customers doing is using SAS event sources or using SAS applications and also building",
    "start": "1849170",
    "end": "1855230"
  },
  {
    "text": "event-driven architectures internally how do we give people a better way to kind of marry",
    "start": "1855230",
    "end": "1860630"
  },
  {
    "text": "these two worlds together and that was really the the genesis for Amazon event bridge",
    "start": "1860630",
    "end": "1866090"
  },
  {
    "text": "so if anyone here has used cloud watch events before you're already familiar with kind of the basic model that that",
    "start": "1866090",
    "end": "1872899"
  },
  {
    "text": "Amazon event bridge uses right so cloud watch events provides you with a default",
    "start": "1872899",
    "end": "1877970"
  },
  {
    "text": "event bus within your account where you can capture events from native AWS services so I mentioned previously we've",
    "start": "1877970",
    "end": "1884119"
  },
  {
    "text": "got 95 different AWS services that can put events into your default event bus",
    "start": "1884119",
    "end": "1889220"
  },
  {
    "text": "and we realized that this event bus model was a super powerful primitive for",
    "start": "1889220",
    "end": "1895100"
  },
  {
    "text": "customers to use to build event-driven architectures so we kind of extended that API out of this new facility for",
    "start": "1895100",
    "end": "1901429"
  },
  {
    "text": "SAS providers to integrate directly with the service and that is what we're",
    "start": "1901429",
    "end": "1906529"
  },
  {
    "text": "releasing now as Amazon of Enbridge so when you go and start playing with this you'll see that the the actual API",
    "start": "1906529",
    "end": "1911600"
  },
  {
    "text": "endpoint itself is the same one as cloud watch events if you go into the Amazon event bridge console you'll see your",
    "start": "1911600",
    "end": "1917299"
  },
  {
    "text": "default event bus there but you'll also now be able to create custom event buses that allow you to integrate with these",
    "start": "1917299",
    "end": "1924289"
  },
  {
    "text": "native SAS providers as well as build your own kind of custom applications and",
    "start": "1924289",
    "end": "1929659"
  },
  {
    "text": "an event routing and you can do all of that without having to write a bunch of custom code so let's take a look at kind",
    "start": "1929659",
    "end": "1936409"
  },
  {
    "text": "of the the internals of this service and dive into some of the details here so",
    "start": "1936409",
    "end": "1941720"
  },
  {
    "text": "this is kind of a high-level you know conceptual view of how event bridge",
    "start": "1941720",
    "end": "1947720"
  },
  {
    "text": "works it all starts out on the left side with event sources right so as I mentioned we've got a number of native",
    "start": "1947720",
    "end": "1954499"
  },
  {
    "text": "AWS services you can publish custom events using the put events API and then",
    "start": "1954499",
    "end": "1959749"
  },
  {
    "text": "we also have ten SAS providers who have integrated with the service at launch",
    "start": "1959749",
    "end": "1964850"
  },
  {
    "text": "and more of those to come when you're using a SAS provider to provide it to",
    "start": "1964850",
    "end": "1971299"
  },
  {
    "text": "put events into your event bridge within your account there's this concept of a",
    "start": "1971299",
    "end": "1976489"
  },
  {
    "text": "partner event source as what we call it so we'll talk a little bit about kind of the the way that this flow works in a",
    "start": "1976489",
    "end": "1983929"
  },
  {
    "text": "second but but you should think of this event source is kind of this secure channel between the SAS provider and",
    "start": "1983929",
    "end": "1991279"
  },
  {
    "text": "your AWS account right and it doesn't require you to create iam roles or other",
    "start": "1991279",
    "end": "1996379"
  },
  {
    "text": "credentials and give them sort of or broad access to your account it allows you to sort of open up this very",
    "start": "1996379",
    "end": "2002950"
  },
  {
    "text": "specific hole in in your your AWS perimeter to say hey I want this specific SAS provider to be able to send",
    "start": "2002950",
    "end": "2010869"
  },
  {
    "text": "me specific events and then I can consume them through event buses so the",
    "start": "2010869",
    "end": "2016450"
  },
  {
    "text": "next piece of the puzzle this is really kind of the core component of event",
    "start": "2016450",
    "end": "2021549"
  },
  {
    "text": "bridge is this concept of an event bus so you've got your default event bus which you've always had from cloud watch",
    "start": "2021549",
    "end": "2027429"
  },
  {
    "text": "events and then you can also create specific event buses for each of the SAS providers that you're integrating with",
    "start": "2027429",
    "end": "2032679"
  },
  {
    "text": "or custom event buses if you just want to push your own events from from the from the applications that you yourself",
    "start": "2032679",
    "end": "2038080"
  },
  {
    "text": "right once you've got event buses created you can associate rules with",
    "start": "2038080",
    "end": "2043929"
  },
  {
    "text": "those of that buses and the rules are really kind of how we connect the events from the producer side to the downstream",
    "start": "2043929",
    "end": "2050500"
  },
  {
    "text": "consumer so let's take a look at a couple of examples so here's a very simplified you know example event I've",
    "start": "2050500",
    "end": "2056559"
  },
  {
    "text": "left off a number of the fields here just to kind of make it fit on the slide better but you know this is an example",
    "start": "2056559",
    "end": "2062799"
  },
  {
    "text": "event maybe I've got a ticket in my CRM system just got created and so now here's a new event it's got a number of",
    "start": "2062799",
    "end": "2069368"
  },
  {
    "text": "different fields some metadata as well as some some details in the payload itself and so we can write an event or",
    "start": "2069369",
    "end": "2075669"
  },
  {
    "text": "I'm sorry we can write a rule now to match against the events that are provided so in this case I've written a",
    "start": "2075669",
    "end": "2083108"
  },
  {
    "text": "rule that matches against any event that comes from this particular event source",
    "start": "2083109",
    "end": "2088388"
  },
  {
    "text": "right so anything that comes from this SAS provider is going to meet it's going to match against this rule and get",
    "start": "2088389",
    "end": "2094540"
  },
  {
    "text": "forwarded on to the targets and so this is a super common you know rule that you",
    "start": "2094540",
    "end": "2099549"
  },
  {
    "text": "know a lot of customers use because a lot of times you just want to get everything and be able to kind of handle",
    "start": "2099549",
    "end": "2105069"
  },
  {
    "text": "that but we can also get more specific right so if I want to go in and start matching against kind of items inside of",
    "start": "2105069",
    "end": "2111640"
  },
  {
    "text": "the payload itself I can write a rule and that you know matches against a specific department so I only care about",
    "start": "2111640",
    "end": "2118859"
  },
  {
    "text": "tickets that get created for either the billing or fulfillment departments for any other department you know the",
    "start": "2118859",
    "end": "2124660"
  },
  {
    "text": "service that I'm working on it doesn't need to concern itself so great I can write this rule it's going to match",
    "start": "2124660",
    "end": "2129670"
  },
  {
    "text": "against this particular filled on the ticket I can also match against metadata about you know as part",
    "start": "2129670",
    "end": "2135599"
  },
  {
    "text": "of the envelope that is provided with this event in this case I'm showing an example of the detailed type so this is",
    "start": "2135599",
    "end": "2142109"
  },
  {
    "text": "sort of the event type that's going to get published in this case I've got a filter that only wants to only wants to",
    "start": "2142109",
    "end": "2150450"
  },
  {
    "text": "match on ticket resolved events so I maybe don't care about the actual creation I just want to see when when it",
    "start": "2150450",
    "end": "2156630"
  },
  {
    "text": "tick it actually gets resolved but in this case the event that we had was actually a ticket created so it's not going to match and so I don't have to",
    "start": "2156630",
    "end": "2164130"
  },
  {
    "text": "send that message downstream to to the targets that I've got so then the last piece of this is the targets that we've",
    "start": "2164130",
    "end": "2170040"
  },
  {
    "text": "talked a little bit about these include services like aw Solano so I can invoke a lambda function I can put records onto",
    "start": "2170040",
    "end": "2177480"
  },
  {
    "text": "a Kinesis stream or into a firehose that's a really powerful model here is using something like Kinesis firehose to",
    "start": "2177480",
    "end": "2184349"
  },
  {
    "text": "load data into a data lake or other kind of analytics application I can kick off step function workflows which is super",
    "start": "2184349",
    "end": "2191040"
  },
  {
    "text": "common right so every time a new ticket gets created in my CRM I want to go and kick off some other downstream workflow",
    "start": "2191040",
    "end": "2197250"
  },
  {
    "text": "and I'm gonna orchestrate that using step functions and there's additional targets to batch you know you can create",
    "start": "2197250",
    "end": "2202950"
  },
  {
    "text": "Fargate tasks and all of those can be sort of natively invoked directly through event bridge without you having",
    "start": "2202950",
    "end": "2209369"
  },
  {
    "text": "to go and write any other you know lambda functions or other kind of glue code in order to make that work that's all just now configuration within the",
    "start": "2209369",
    "end": "2215790"
  },
  {
    "text": "event bus itself so talking a little bit about the sass providers that we have",
    "start": "2215790",
    "end": "2223349"
  },
  {
    "start": "2219000",
    "end": "2219000"
  },
  {
    "text": "integrations with today so we've got 10 partners that we're launching with today",
    "start": "2223349",
    "end": "2229500"
  },
  {
    "text": "got more to come we want to hear from you about the sass solutions that you're",
    "start": "2229500",
    "end": "2234720"
  },
  {
    "text": "using about the cases where you're using polling or web hooks today and who you",
    "start": "2234720",
    "end": "2239940"
  },
  {
    "text": "want us to work with and in onboard we would love to hear that kind of feedback and we'll have a way for you to get in",
    "start": "2239940",
    "end": "2246299"
  },
  {
    "text": "touch with us about that but just to call out a couple of examples of some of",
    "start": "2246299",
    "end": "2251549"
  },
  {
    "text": "the cool things that customers have either built or or we expect them to build with some of these partners",
    "start": "2251549",
    "end": "2257010"
  },
  {
    "text": "Pedro Duty has been working with Cox automotive to to build kind of an extension to their incident reporting to",
    "start": "2257010",
    "end": "2264720"
  },
  {
    "text": "also pay he's got this awesome you know tool for detecting when incidents occur in your",
    "start": "2264720",
    "end": "2270220"
  },
  {
    "text": "applications or infrastructure and Cox automotive has actually gone out and built a runbook automation script where",
    "start": "2270220",
    "end": "2278080"
  },
  {
    "text": "every time a new incident gets created they've got a lambda function that fires it goes out figures out which system is",
    "start": "2278080",
    "end": "2283180"
  },
  {
    "text": "actually impacted pulls down an existing run book from s3 and then attaches that in the notes field of that incident so",
    "start": "2283180",
    "end": "2289480"
  },
  {
    "text": "now when the operator gets page she can log right in and take a look and see",
    "start": "2289480",
    "end": "2294610"
  },
  {
    "text": "right there inside of the incident kind of the initial troubleshooting steps to go and take care of whispers got a",
    "start": "2294610",
    "end": "2301180"
  },
  {
    "text": "really cool example where they've got this concept of a call to action button",
    "start": "2301180",
    "end": "2306460"
  },
  {
    "text": "that they can embed in emails right so you can use whisper to go out and send transactional emails to your customers",
    "start": "2306460",
    "end": "2312550"
  },
  {
    "text": "that say you know hey something new is going on in your account and and add a button there directly in the email that",
    "start": "2312550",
    "end": "2318580"
  },
  {
    "text": "a customer can click and now using a vent bridge you can actually tie a lambda function directly to that button",
    "start": "2318580",
    "end": "2324280"
  },
  {
    "text": "that you put in the email so now every time a customer clicks the button it fires a lambda function automatically",
    "start": "2324280",
    "end": "2330070"
  },
  {
    "text": "makes it super easy to go in and automated ly handle a bunch of different kind of customer interaction scenarios",
    "start": "2330070",
    "end": "2336630"
  },
  {
    "text": "you'll hear a little bit more about how Zendesk is working with data dog data dogs themselves are also a SAS provider here",
    "start": "2336630",
    "end": "2344200"
  },
  {
    "text": "so you know you can imagine all of the different kind of monitoring and alerting tools that you already have set up in a tool like data dog going and",
    "start": "2344200",
    "end": "2350950"
  },
  {
    "text": "launching you know step functions workflow to go and Auto remediated Auto rescale a cluster based on some alert",
    "start": "2350950",
    "end": "2357400"
  },
  {
    "text": "that you know that you're running out of capacity in a particular application so",
    "start": "2357400",
    "end": "2362830"
  },
  {
    "text": "a lot of really cool things that people are already starting to build and we would love to hear about what you end up",
    "start": "2362830",
    "end": "2367960"
  },
  {
    "text": "building with these partners as well so talking a little bit more generically about some of the the kind of standard",
    "start": "2367960",
    "end": "2374170"
  },
  {
    "start": "2371000",
    "end": "2371000"
  },
  {
    "text": "use cases that we see this being really powerful for the first one is it's kind of you know go off and trigger a lambda",
    "start": "2374170",
    "end": "2380200"
  },
  {
    "text": "function right that's that's I think a lot of there are a lot of tests that you",
    "start": "2380200",
    "end": "2385600"
  },
  {
    "text": "can automate they can become extremely simple if all you can do is hey I just want to run this little piece of code every time this things happens that",
    "start": "2385600",
    "end": "2392530"
  },
  {
    "text": "becomes really really easy to do now with an event bridge also you know in the same kind of model using",
    "start": "2392530",
    "end": "2397930"
  },
  {
    "text": "functions really really powerful right so step functions has these great options for doing like manual approval",
    "start": "2397930",
    "end": "2404260"
  },
  {
    "text": "processes and integrating and doing automatic retry and handling all of these kind of complex aspects of",
    "start": "2404260",
    "end": "2409859"
  },
  {
    "text": "orchestrating the interaction across different services and so kicking off one of those workflows as part of this",
    "start": "2409859",
    "end": "2416579"
  },
  {
    "text": "venting model ends up being really powerful certainly AI ml is something",
    "start": "2416579",
    "end": "2421660"
  },
  {
    "text": "that a lot of companies are starting to invest more in so you can imagine hey every time I've got a new CRM ticket I want to go and do sentiment analysis",
    "start": "2421660",
    "end": "2427720"
  },
  {
    "text": "using using comprehend so I can determine hey you know how mad is the customer and I can potentially do you",
    "start": "2427720",
    "end": "2434740"
  },
  {
    "text": "know routing or a prioritization based on some of these AI ml models and then",
    "start": "2434740",
    "end": "2441720"
  },
  {
    "text": "also additionally you know kind of the the audit and analytics type use cases",
    "start": "2441720",
    "end": "2448480"
  },
  {
    "text": "are really powerful here too so I just want to subscribe to an event stream of every single thing that happens in these",
    "start": "2448480",
    "end": "2454119"
  },
  {
    "text": "applications and dump them into my data life right I just want to throw them in s3 and then I can come back with something like Athena and do powerful",
    "start": "2454119",
    "end": "2460809"
  },
  {
    "text": "queries against that data set that I've built up and then similarly you know doing kind of a data synchronization",
    "start": "2460809",
    "end": "2467290"
  },
  {
    "text": "exercise is oftentimes an important piece you so you've got data sort of spread out across all of these various",
    "start": "2467290",
    "end": "2473559"
  },
  {
    "text": "applications as well as internal custom apps and I just need to be sort of aware when something changes over here when I",
    "start": "2473559",
    "end": "2480280"
  },
  {
    "text": "go and make sure that that changes is accurately reflected to my other systems and and so getting away from having to",
    "start": "2480280",
    "end": "2486520"
  },
  {
    "text": "do those kind of pulling oriented or batch jobs to go and do this data synchronization that has a lot of that",
    "start": "2486520",
    "end": "2492849"
  },
  {
    "text": "you know additional unnecessary latency this ends up being a really powerful way to handle that so let's walk through",
    "start": "2492849",
    "end": "2501010"
  },
  {
    "text": "sort of what the process is to actually integrate with a SAS provider using",
    "start": "2501010",
    "end": "2507490"
  },
  {
    "start": "2502000",
    "end": "2502000"
  },
  {
    "text": "event bridge so it's a really simple process like I mentioned you don't have to create any iam roles you don't have",
    "start": "2507490",
    "end": "2512680"
  },
  {
    "text": "to grant access or hand over access keys or anything like that the first thing you do is you actually",
    "start": "2512680",
    "end": "2519130"
  },
  {
    "text": "go to one of the SAS providers that supports event bridge and you enter your AWS account ID and select what region",
    "start": "2519130",
    "end": "2526390"
  },
  {
    "text": "you want these events to show up in so really simple you just need two pieces of them from you hand those over as a result of that",
    "start": "2526390",
    "end": "2532690"
  },
  {
    "text": "the partner is going to go out and create a partner event source so I referenced this earlier this partner",
    "start": "2532690",
    "end": "2539350"
  },
  {
    "text": "event source is really kind of that that conduit between your account and the partners account that provides a a",
    "start": "2539350",
    "end": "2546250"
  },
  {
    "text": "secure channel for them to send you these events and make sure that they're getting mapped to the correct event bus",
    "start": "2546250",
    "end": "2551470"
  },
  {
    "text": "when this partner event source is initially created so as soon as it gets created it's it's a nert it doesn't",
    "start": "2551470",
    "end": "2557140"
  },
  {
    "text": "really do anything until you come back then and create a new event bus and associated with that event source so for",
    "start": "2557140",
    "end": "2563620"
  },
  {
    "text": "whatever reason someone that you didn't intend to have access to your account goes out and tries to create an event",
    "start": "2563620",
    "end": "2568630"
  },
  {
    "text": "source inside of your account without your knowing it it's not going to do anything until you go in and explicitly",
    "start": "2568630",
    "end": "2573820"
  },
  {
    "text": "say yeah I want to create this event bus and associate it with this event source creating the event bus is super",
    "start": "2573820",
    "end": "2579760"
  },
  {
    "text": "straightforward it's just literally clicking a button in the console and once you've got the event bus created now we can start attaching rules to that",
    "start": "2579760",
    "end": "2586600"
  },
  {
    "text": "event bus that'll start routing to our various downstream targets so be that a lambda function or an s qsq etc so",
    "start": "2586600",
    "end": "2594100"
  },
  {
    "text": "really there's three very simple steps that you go through in order to subscribe to these events on any of the",
    "start": "2594100",
    "end": "2600010"
  },
  {
    "text": "SAS providers that we've got support with and then hook those up to start",
    "start": "2600010",
    "end": "2605650"
  },
  {
    "text": "actually integrating with your the systems that you yourself are building",
    "start": "2605650",
    "end": "2610950"
  },
  {
    "text": "so with all that said I'd like to invite Daniel Langer from data dog to come up",
    "start": "2610950",
    "end": "2616570"
  },
  {
    "text": "here and talk a little bit about some of the cool things that they've built with",
    "start": "2616570",
    "end": "2621810"
  },
  {
    "text": "Zendesk who's another one of our partners as an event source using event bridge so Daniel woman come on",
    "start": "2621810",
    "end": "2629250"
  },
  {
    "text": "cool thank you Mike really excited to be here my name is",
    "start": "2633790",
    "end": "2638840"
  },
  {
    "start": "2637000",
    "end": "2637000"
  },
  {
    "text": "Daniel I'm a product manager at data dog and for those of you who don't know just a quick overview of what data dog is we",
    "start": "2638840",
    "end": "2645800"
  },
  {
    "text": "are a SAS based monitoring platform so we'll collect metrics from your infrastructure and underlying systems",
    "start": "2645800",
    "end": "2651980"
  },
  {
    "text": "from your applications and traces as well as log analytics right we'll bring",
    "start": "2651980",
    "end": "2657620"
  },
  {
    "text": "them all in one place so you can have full visibility and observability into your environment so we also have 350",
    "start": "2657620",
    "end": "2667070"
  },
  {
    "text": "plus integrations so no matter what you know databases and runtimes you're using we will likely support it",
    "start": "2667070",
    "end": "2673130"
  },
  {
    "text": "and we're getting pretty big these days we have over 8,000 customers and we're handling trillions and trillions upon",
    "start": "2673130",
    "end": "2679060"
  },
  {
    "text": "data points per day so we're built for scale and at data dog we are a customer",
    "start": "2679060",
    "end": "2687320"
  },
  {
    "text": "of Zendesk and again for those of you who aren't familiar with Zendesk they are a cloud-based customer support and",
    "start": "2687320",
    "end": "2695210"
  },
  {
    "text": "engagement platform they have a variety of products for ticketing chat you know",
    "start": "2695210",
    "end": "2701780"
  },
  {
    "text": "email and we use a variety of these at data dog while the main consumers of",
    "start": "2701780",
    "end": "2708980"
  },
  {
    "text": "Zendesk at data dog are our solutions and support team myself as a product manager uses that our customer success",
    "start": "2708980",
    "end": "2715280"
  },
  {
    "text": "team uses it right to interact with our customers to understand pain they're",
    "start": "2715280",
    "end": "2720620"
  },
  {
    "text": "having and help resolve those issues and to get into a little more specifics we",
    "start": "2720620",
    "end": "2726590"
  },
  {
    "text": "are a 24/7 monitoring platform that companies rely on to monitor their",
    "start": "2726590",
    "end": "2731960"
  },
  {
    "text": "systems right you can imagine we have fortune 500 and financial institutions who rely on us to make sure that their",
    "start": "2731960",
    "end": "2738560"
  },
  {
    "text": "systems are running so it's imperative that we as a company can resolve any issues that our customers are having as",
    "start": "2738560",
    "end": "2745340"
  },
  {
    "text": "quickly as possible we have solutions teams across the world across many time zones who are handling a really high",
    "start": "2745340",
    "end": "2752470"
  },
  {
    "text": "volume of ticket traffic and our goal is",
    "start": "2752470",
    "end": "2758540"
  },
  {
    "text": "to resolve those tickets right troubleshoot them as quickly as possible so that our customers can get back to",
    "start": "2758540",
    "end": "2765590"
  },
  {
    "text": "what they do best which is their operations and ensure everything is going smoothly so our goal is right",
    "start": "2765590",
    "end": "2771230"
  },
  {
    "text": "to reduce that mean time to resolution and maximize customer satisfaction and apart from using Zen desks main",
    "start": "2771230",
    "end": "2778839"
  },
  {
    "text": "cloud-based platform we also leverages n desk api's to extract data to make",
    "start": "2778839",
    "end": "2784730"
  },
  {
    "text": "smarter decisions and the way we've been doing this up until now is through the",
    "start": "2784730",
    "end": "2791750"
  },
  {
    "start": "2787000",
    "end": "2787000"
  },
  {
    "text": "exact type of polling architecture that Mike described right we have this cron",
    "start": "2791750",
    "end": "2796819"
  },
  {
    "text": "job that's running on a server somewhere polling Zendesk api's you know at some",
    "start": "2796819",
    "end": "2802640"
  },
  {
    "text": "cadence and then we and we don't we ingest that it data dog and make use of it and the problems Mike described are",
    "start": "2802640",
    "end": "2809750"
  },
  {
    "text": "the exact ones that we were facing state of freshness is issue hitting Zendesk API is hard right batching getting this",
    "start": "2809750",
    "end": "2818150"
  },
  {
    "text": "batch of data that we have to parse through every day and it you know many many entries right so it just created",
    "start": "2818150",
    "end": "2824270"
  },
  {
    "text": "this the system that was burdensome and clunky and our engineer spent time",
    "start": "2824270",
    "end": "2830630"
  },
  {
    "text": "maintaining it versus doing what they do best which is solve our customers",
    "start": "2830630",
    "end": "2836720"
  },
  {
    "text": "problems and make sure they can run smoothly so we've been working with",
    "start": "2836720",
    "end": "2842180"
  },
  {
    "text": "Zendesk and with with AWS to use a vent bridge to create a new architecture and",
    "start": "2842180",
    "end": "2849410"
  },
  {
    "start": "2847000",
    "end": "2847000"
  },
  {
    "text": "instead of having this polling cron job based architecture we can now use a vent bridge to get events pushed to us in",
    "start": "2849410",
    "end": "2856339"
  },
  {
    "text": "real time and these type of events are things like take a creation events you",
    "start": "2856339",
    "end": "2861829"
  },
  {
    "text": "know status change events assignee events and we tagged all this",
    "start": "2861829",
    "end": "2868040"
  },
  {
    "text": "information with relevant with relevant metadata right what what was the what",
    "start": "2868040",
    "end": "2874099"
  },
  {
    "text": "was the issue what category does it fall under was it a bug is it a feature request what part of our product was it",
    "start": "2874099",
    "end": "2879859"
  },
  {
    "text": "was it affecting and we get this all into data dog in real time and we have a",
    "start": "2879859",
    "end": "2885950"
  },
  {
    "text": "lambda function that now subscribes to this this partner event bus we have M bridge and we have them in data dog in",
    "start": "2885950",
    "end": "2893329"
  },
  {
    "text": "real time and right there's several advantages advantages of this",
    "start": "2893329",
    "end": "2900980"
  },
  {
    "start": "2895000",
    "end": "2895000"
  },
  {
    "text": "to this that we get right out of the box like I said we get events now in real time",
    "start": "2900980",
    "end": "2906349"
  },
  {
    "text": "there's no batching right there's no data freshness issue we have it and we can use it right away and because of",
    "start": "2906349",
    "end": "2912770"
  },
  {
    "text": "that we can start to use some of data dogs built-in advanced analytics features right anomaly detection",
    "start": "2912770",
    "end": "2920660"
  },
  {
    "text": "you know log analytics to group and find patterns in these in these tickets and",
    "start": "2920660",
    "end": "2926300"
  },
  {
    "text": "now our engineers can go back to doing what they do best like I said solving customer issues triaging requests versus",
    "start": "2926300",
    "end": "2933290"
  },
  {
    "text": "spending time working through this this cron based system and what's another",
    "start": "2933290",
    "end": "2939230"
  },
  {
    "text": "added benefit is we're no longer pulling Zendesk api's right we don't have to worry about you know having any effect",
    "start": "2939230",
    "end": "2945710"
  },
  {
    "text": "on their system they don't have to worry about us taking down their system it's all managed through event bridge and",
    "start": "2945710",
    "end": "2951079"
  },
  {
    "text": "lambda and diving a little deeper into",
    "start": "2951079",
    "end": "2957430"
  },
  {
    "start": "2955000",
    "end": "2955000"
  },
  {
    "text": "the customer experience benefits around this real-time routing like I said our",
    "start": "2957430",
    "end": "2965329"
  },
  {
    "text": "goal is to resolve our customer issues as quickly as possible right so that they don't have any blind spots in their",
    "start": "2965329",
    "end": "2973310"
  },
  {
    "text": "in their systems so with these real-time events we can do some really cool things",
    "start": "2973310",
    "end": "2980480"
  },
  {
    "text": "right we can we can identify where there is capacity for solutions engineer's to",
    "start": "2980480",
    "end": "2986630"
  },
  {
    "text": "route tickets to those sets of engineers who have more capacity we can understand which you know which of our agents are",
    "start": "2986630",
    "end": "2993380"
  },
  {
    "text": "overloaded right and move things to another to another set of agents and we",
    "start": "2993380",
    "end": "2998930"
  },
  {
    "text": "have all the data in one place and we can make really great use of it so now our our customers don't have to you know",
    "start": "2998930",
    "end": "3007359"
  },
  {
    "text": "escalate tickets when they when they're taking too long right we can we can triage them more quickly get engineers assigned get the right engineers",
    "start": "3007359",
    "end": "3013960"
  },
  {
    "text": "assigned so that our our customer satisfaction is higher than ever I know",
    "start": "3013960",
    "end": "3020710"
  },
  {
    "text": "that was very brief but I just wanted to you know show you how you know we can",
    "start": "3020710",
    "end": "3027430"
  },
  {
    "text": "make use of a beverage right out of the box really quickly and see really",
    "start": "3027430",
    "end": "3033119"
  },
  {
    "text": "benefits right away and with that I'm gonna pass it back to Mike great thanks hot dinner Daniel so yes so",
    "start": "3033980",
    "end": "3044270"
  },
  {
    "text": "just real quick kind of call-outs if you guys are interested in continuing to dive more into some of the architectural concepts that we talked about Sam's",
    "start": "3044270",
    "end": "3051830"
  },
  {
    "text": "breakout later on this afternoon man 3 of 308 on scalable service",
    "start": "3051830",
    "end": "3056840"
  },
  {
    "text": "architecture is using event-driven design be a great great option we'll talk a lot more in depth about some of",
    "start": "3056840",
    "end": "3063170"
  },
  {
    "text": "the topics that we introduced here Jeremy Daley also be doing a dev talk and the dev lounge about this same kind",
    "start": "3063170",
    "end": "3070460"
  },
  {
    "text": "of topic so I highly encourage you to catch one of those too and then there's also a dotnet session on on building",
    "start": "3070460",
    "end": "3077720"
  },
  {
    "text": "service applications that that should be very interesting so Daniel I'll be down",
    "start": "3077720",
    "end": "3083090"
  },
  {
    "text": "here at the front or outside I know we've got some folks from I think the service team that are here around and a",
    "start": "3083090",
    "end": "3089330"
  },
  {
    "text": "number of other partners really appreciate everyone's time today and yeah have a great rest of the summit",
    "start": "3089330",
    "end": "3096290"
  },
  {
    "text": "[Applause]",
    "start": "3096290",
    "end": "3100389"
  }
]