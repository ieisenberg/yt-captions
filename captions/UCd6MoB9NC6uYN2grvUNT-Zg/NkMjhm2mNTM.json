[
  {
    "text": "hi welcome I'm Garuda Hawker Enterprise",
    "start": "0",
    "end": "2460"
  },
  {
    "text": "Solutions Architect at Amazon we'll be",
    "start": "2460",
    "end": "4799"
  },
  {
    "text": "discussing various compute options that",
    "start": "4799",
    "end": "6450"
  },
  {
    "text": "we have on AWS for micro services but",
    "start": "6450",
    "end": "10860"
  },
  {
    "text": "before we get started let's discuss how",
    "start": "10860",
    "end": "12509"
  },
  {
    "text": "we reads the micro services error one",
    "start": "12509",
    "end": "15089"
  },
  {
    "text": "application pattern perhaps many of you",
    "start": "15089",
    "end": "17100"
  },
  {
    "text": "have experienced and hopefully put in",
    "start": "17100",
    "end": "19109"
  },
  {
    "text": "your past is the monolithic architecture",
    "start": "19109",
    "end": "21029"
  },
  {
    "text": "your holistic application is deployed as",
    "start": "21029",
    "end": "23970"
  },
  {
    "text": "a single unit on shared infrastructure",
    "start": "23970",
    "end": "26130"
  },
  {
    "text": "it's tightly coupled components perform",
    "start": "26130",
    "end": "28560"
  },
  {
    "text": "many different functions and are",
    "start": "28560",
    "end": "30300"
  },
  {
    "text": "maintained by many different development",
    "start": "30300",
    "end": "32040"
  },
  {
    "text": "teams deployments are extremely risky",
    "start": "32040",
    "end": "34410"
  },
  {
    "text": "and disruptive if any components",
    "start": "34410",
    "end": "36600"
  },
  {
    "text": "deployment fails the whole deployment",
    "start": "36600",
    "end": "38520"
  },
  {
    "text": "must be rolled back so deployments",
    "start": "38520",
    "end": "41579"
  },
  {
    "text": "rarely occur and require intense amount",
    "start": "41579",
    "end": "43680"
  },
  {
    "text": "of centralized approval and coordination",
    "start": "43680",
    "end": "45539"
  },
  {
    "text": "not saying monoliths are bad but a lot",
    "start": "45539",
    "end": "48000"
  },
  {
    "text": "of organizations that need agility are",
    "start": "48000",
    "end": "50100"
  },
  {
    "text": "looking for better ways to package",
    "start": "50100",
    "end": "51510"
  },
  {
    "text": "applications so moving from monolithic",
    "start": "51510",
    "end": "54510"
  },
  {
    "text": "applications one of the most popular",
    "start": "54510",
    "end": "56100"
  },
  {
    "text": "architecture patterns for many years is",
    "start": "56100",
    "end": "58680"
  },
  {
    "text": "the service oriented architecture",
    "start": "58680",
    "end": "60510"
  },
  {
    "text": "approach your components are decoupled",
    "start": "60510",
    "end": "62969"
  },
  {
    "text": "and communicate with each other wire web",
    "start": "62969",
    "end": "65489"
  },
  {
    "text": "service API so the picture is one of the",
    "start": "65489",
    "end": "67619"
  },
  {
    "text": "most common examples of a",
    "start": "67619",
    "end": "68970"
  },
  {
    "text": "service-oriented architecture the multi",
    "start": "68970",
    "end": "71610"
  },
  {
    "text": "tired architecture or an entire",
    "start": "71610",
    "end": "73260"
  },
  {
    "text": "architecture in it user experience is",
    "start": "73260",
    "end": "75900"
  },
  {
    "text": "delivered on the front of the",
    "start": "75900",
    "end": "77430"
  },
  {
    "text": "application by the presentation tier the",
    "start": "77430",
    "end": "79650"
  },
  {
    "text": "core business logic resides on the",
    "start": "79650",
    "end": "81180"
  },
  {
    "text": "server side as a part of the logic tier",
    "start": "81180",
    "end": "83159"
  },
  {
    "text": "and any data that needs to be persisted",
    "start": "83159",
    "end": "85830"
  },
  {
    "text": "by the application resides in the data",
    "start": "85830",
    "end": "87869"
  },
  {
    "text": "tier this pattern allows for really",
    "start": "87869",
    "end": "91079"
  },
  {
    "text": "important things amongst other",
    "start": "91079",
    "end": "92850"
  },
  {
    "text": "infrastructure is decoupled so",
    "start": "92850",
    "end": "95369"
  },
  {
    "text": "deployments can occur independently and",
    "start": "95369",
    "end": "97560"
  },
  {
    "text": "scaling and resource consumption can be",
    "start": "97560",
    "end": "99720"
  },
  {
    "text": "managed independently development teams",
    "start": "99720",
    "end": "102150"
  },
  {
    "text": "can now be specialized now teams can be",
    "start": "102150",
    "end": "104340"
  },
  {
    "text": "filled with developers that can be",
    "start": "104340",
    "end": "106049"
  },
  {
    "text": "specialized with skillsets that are well",
    "start": "106049",
    "end": "108119"
  },
  {
    "text": "suited for the area of application that",
    "start": "108119",
    "end": "110310"
  },
  {
    "text": "the team owns what you're left with is",
    "start": "110310",
    "end": "112560"
  },
  {
    "text": "smaller ownership and deeper less broad",
    "start": "112560",
    "end": "115680"
  },
  {
    "text": "technical skills so a faster process and",
    "start": "115680",
    "end": "118140"
  },
  {
    "text": "smaller most able frequent deployments",
    "start": "118140",
    "end": "121140"
  },
  {
    "text": "could be achieved the micro services",
    "start": "121140",
    "end": "124619"
  },
  {
    "text": "architecture finally a pattern that has",
    "start": "124619",
    "end": "126780"
  },
  {
    "text": "become very popular in the last few",
    "start": "126780",
    "end": "128550"
  },
  {
    "text": "years is the Microsoft slack",
    "start": "128550",
    "end": "130660"
  },
  {
    "text": "here the same tenets that apply to a",
    "start": "130660",
    "end": "132790"
  },
  {
    "text": "service-oriented architecture are still",
    "start": "132790",
    "end": "134410"
  },
  {
    "text": "valid but components are broken down",
    "start": "134410",
    "end": "136510"
  },
  {
    "text": "into smaller single function modular web",
    "start": "136510",
    "end": "139420"
  },
  {
    "text": "services so that the benefits of so are",
    "start": "139420",
    "end": "142050"
  },
  {
    "text": "amplified throughout the architecture if",
    "start": "142050",
    "end": "145060"
  },
  {
    "text": "you are working in a centralized",
    "start": "145060",
    "end": "146560"
  },
  {
    "text": "organization today that's happy",
    "start": "146560",
    "end": "148510"
  },
  {
    "text": "supporting monolith organization this",
    "start": "148510",
    "end": "150730"
  },
  {
    "text": "might look a bit complex to support",
    "start": "150730",
    "end": "152620"
  },
  {
    "text": "which remember that in order to support",
    "start": "152620",
    "end": "155170"
  },
  {
    "text": "the move to sua or micro services",
    "start": "155170",
    "end": "157239"
  },
  {
    "text": "they'll have to be a similar breaking",
    "start": "157239",
    "end": "159099"
  },
  {
    "text": "apart of the deployment and the",
    "start": "159099",
    "end": "161290"
  },
  {
    "text": "development processes to recap the full",
    "start": "161290",
    "end": "163870"
  },
  {
    "text": "benefits because things have been broken",
    "start": "163870",
    "end": "166480"
  },
  {
    "text": "apart you may have small development",
    "start": "166480",
    "end": "168400"
  },
  {
    "text": "teams whose responsibility is limited to",
    "start": "168400",
    "end": "170799"
  },
  {
    "text": "just these pieces of the application so",
    "start": "170799",
    "end": "173769"
  },
  {
    "text": "how does this look in real life this is",
    "start": "173769",
    "end": "175780"
  },
  {
    "text": "exactly what you would see on our",
    "start": "175780",
    "end": "177930"
  },
  {
    "text": "amazon.com page each component that you",
    "start": "177930",
    "end": "180640"
  },
  {
    "text": "would see is a micro service like the",
    "start": "180640",
    "end": "182739"
  },
  {
    "text": "product catalog the shopping cart",
    "start": "182739",
    "end": "184510"
  },
  {
    "text": "product reviews frequently brought",
    "start": "184510",
    "end": "186190"
  },
  {
    "text": "together experience other sellers and",
    "start": "186190",
    "end": "189400"
  },
  {
    "text": "many more this whole experience is",
    "start": "189400",
    "end": "191590"
  },
  {
    "text": "carefully designed to make it simpler",
    "start": "191590",
    "end": "193780"
  },
  {
    "text": "but offer a great amount of detail when",
    "start": "193780",
    "end": "196090"
  },
  {
    "text": "you make a purchase at Amazon now let's",
    "start": "196090",
    "end": "198280"
  },
  {
    "text": "talk about how you can implement it",
    "start": "198280",
    "end": "200350"
  },
  {
    "text": "today on AWS it's to start with with",
    "start": "200350",
    "end": "203530"
  },
  {
    "text": "elastic Beanstalk you can quickly deploy",
    "start": "203530",
    "end": "205720"
  },
  {
    "text": "and manage applications in the AWS cloud",
    "start": "205720",
    "end": "208540"
  },
  {
    "text": "without worrying about the",
    "start": "208540",
    "end": "210040"
  },
  {
    "text": "infrastructure that runs these",
    "start": "210040",
    "end": "211450"
  },
  {
    "text": "application AWS elastic Beanstalk",
    "start": "211450",
    "end": "213790"
  },
  {
    "text": "reduces the complexity without",
    "start": "213790",
    "end": "216340"
  },
  {
    "text": "restricting the choice or control you",
    "start": "216340",
    "end": "218980"
  },
  {
    "text": "simply upload your application an",
    "start": "218980",
    "end": "220569"
  },
  {
    "text": "elastic Beanstalk automatically handles",
    "start": "220569",
    "end": "223090"
  },
  {
    "text": "the details of capacity provisioning",
    "start": "223090",
    "end": "225130"
  },
  {
    "text": "load balancing scaling an application",
    "start": "225130",
    "end": "227859"
  },
  {
    "text": "health monitoring elastic Beanstalk",
    "start": "227859",
    "end": "230109"
  },
  {
    "text": "supports applications developed in Java",
    "start": "230109",
    "end": "232620"
  },
  {
    "text": "dotnet PHP node.js Python Ruby and as",
    "start": "232620",
    "end": "236560"
  },
  {
    "text": "well as different types of containers",
    "start": "236560",
    "end": "238000"
  },
  {
    "text": "for each language a container defines",
    "start": "238000",
    "end": "240700"
  },
  {
    "text": "infrastructure and software stack to be",
    "start": "240700",
    "end": "242920"
  },
  {
    "text": "used with a given environment when you",
    "start": "242920",
    "end": "244989"
  },
  {
    "text": "deploy application elastic Beanstalk",
    "start": "244989",
    "end": "247180"
  },
  {
    "text": "provisions one of many AWS resources",
    "start": "247180",
    "end": "249269"
  },
  {
    "text": "like AWS ec2 instances the software",
    "start": "249269",
    "end": "253299"
  },
  {
    "text": "stack that runs on your Amazon ec2",
    "start": "253299",
    "end": "254889"
  },
  {
    "text": "instances depends on the container time",
    "start": "254889",
    "end": "257190"
  },
  {
    "text": "but when you're doing micro services",
    "start": "257190",
    "end": "259510"
  },
  {
    "text": "you're speaking of a single area of",
    "start": "259510",
    "end": "261250"
  },
  {
    "text": "responsibility the single responsibility",
    "start": "261250",
    "end": "263020"
  },
  {
    "text": "principle by its",
    "start": "263020",
    "end": "264230"
  },
  {
    "text": "a micro service or the team that caters",
    "start": "264230",
    "end": "266870"
  },
  {
    "text": "to it does one job and does it very well",
    "start": "266870",
    "end": "269810"
  },
  {
    "text": "fine-grained execution environments are",
    "start": "269810",
    "end": "271940"
  },
  {
    "text": "what you're worried about what you're",
    "start": "271940",
    "end": "273530"
  },
  {
    "text": "also looking about is better isolation",
    "start": "273530",
    "end": "275780"
  },
  {
    "text": "that allows for component Co",
    "start": "275780",
    "end": "277670"
  },
  {
    "text": "habilitation the thing that you get at",
    "start": "277670",
    "end": "280490"
  },
  {
    "text": "the end of it is faster initialization",
    "start": "280490",
    "end": "282320"
  },
  {
    "text": "and execution so why not do it using",
    "start": "282320",
    "end": "285230"
  },
  {
    "text": "containers what is a container a",
    "start": "285230",
    "end": "287540"
  },
  {
    "text": "container image is a lightweight",
    "start": "287540",
    "end": "289330"
  },
  {
    "text": "standalone executable package of a piece",
    "start": "289330",
    "end": "292220"
  },
  {
    "text": "of software that includes everything",
    "start": "292220",
    "end": "294290"
  },
  {
    "text": "that is needed to run it code runtime",
    "start": "294290",
    "end": "296480"
  },
  {
    "text": "system tools system libraries and the",
    "start": "296480",
    "end": "298850"
  },
  {
    "text": "settings involved if you want to run the",
    "start": "298850",
    "end": "301130"
  },
  {
    "text": "containers on the cloud it's easy you",
    "start": "301130",
    "end": "303230"
  },
  {
    "text": "spin up some ec2 instances launch",
    "start": "303230",
    "end": "305270"
  },
  {
    "text": "containers on them and get going in",
    "start": "305270",
    "end": "307100"
  },
  {
    "text": "minutes this would work even better if",
    "start": "307100",
    "end": "309440"
  },
  {
    "text": "you're using dozens of container but if",
    "start": "309440",
    "end": "311960"
  },
  {
    "text": "you think about it",
    "start": "311960",
    "end": "312980"
  },
  {
    "text": "scaling this managing hundreds of",
    "start": "312980",
    "end": "315440"
  },
  {
    "text": "instances monitoring their health",
    "start": "315440",
    "end": "316850"
  },
  {
    "text": "scaling them and launching your",
    "start": "316850",
    "end": "318830"
  },
  {
    "text": "containers on them and a whole lifecycle",
    "start": "318830",
    "end": "321140"
  },
  {
    "text": "around them how do you scale to that",
    "start": "321140",
    "end": "323270"
  },
  {
    "text": "size it was just three years ago that we",
    "start": "323270",
    "end": "325580"
  },
  {
    "text": "announced the release of Amazon Elastic",
    "start": "325580",
    "end": "327830"
  },
  {
    "text": "container service we launched ECS",
    "start": "327830",
    "end": "329990"
  },
  {
    "text": "because our customers needed a way to",
    "start": "329990",
    "end": "331820"
  },
  {
    "text": "manage the scale and the deployment of",
    "start": "331820",
    "end": "333860"
  },
  {
    "text": "docker containers on AWS a customers",
    "start": "333860",
    "end": "336410"
  },
  {
    "text": "wanted a managed service where they",
    "start": "336410",
    "end": "338480"
  },
  {
    "text": "didn't have to operate their own cluster",
    "start": "338480",
    "end": "340310"
  },
  {
    "text": "a solution that was scalable secure that",
    "start": "340310",
    "end": "343610"
  },
  {
    "text": "they could use and Trust to run their",
    "start": "343610",
    "end": "345530"
  },
  {
    "text": "product production workloads and then",
    "start": "345530",
    "end": "347750"
  },
  {
    "text": "they wanted to tight integration with",
    "start": "347750",
    "end": "350060"
  },
  {
    "text": "and support for ec2 features that they",
    "start": "350060",
    "end": "352520"
  },
  {
    "text": "are already liked and used then we",
    "start": "352520",
    "end": "355100"
  },
  {
    "text": "focused on building a highly reliable",
    "start": "355100",
    "end": "356930"
  },
  {
    "text": "and a performant docker image registry",
    "start": "356930",
    "end": "359900"
  },
  {
    "text": "and announced this ga release at the end",
    "start": "359900",
    "end": "362780"
  },
  {
    "text": "of 2015 a goal with ECR was to enable",
    "start": "362780",
    "end": "366380"
  },
  {
    "text": "developers to use the same familiar",
    "start": "366380",
    "end": "368600"
  },
  {
    "text": "docker push/pull api's to store the",
    "start": "368600",
    "end": "370940"
  },
  {
    "text": "container images and see this product",
    "start": "370940",
    "end": "373010"
  },
  {
    "text": "highly adopted by customers both running",
    "start": "373010",
    "end": "375620"
  },
  {
    "text": "containers on AWS and really across any",
    "start": "375620",
    "end": "378050"
  },
  {
    "text": "environment but let's focus on the other",
    "start": "378050",
    "end": "381530"
  },
  {
    "text": "three today so let's say you plan to run",
    "start": "381530",
    "end": "386270"
  },
  {
    "text": "several highly available applications",
    "start": "386270",
    "end": "388220"
  },
  {
    "text": "across three availability zones ECS",
    "start": "388220",
    "end": "390650"
  },
  {
    "text": "enables you to be able to operationalize",
    "start": "390650",
    "end": "392870"
  },
  {
    "text": "your containerized workloads at very",
    "start": "392870",
    "end": "394850"
  },
  {
    "text": "high scale",
    "start": "394850",
    "end": "395639"
  },
  {
    "text": "no management software to install or",
    "start": "395639",
    "end": "397710"
  },
  {
    "text": "worry about its own high availability",
    "start": "397710",
    "end": "399240"
  },
  {
    "text": "the cluster management piece enabled you",
    "start": "399240",
    "end": "402090"
  },
  {
    "text": "to be able to monitor the clusters scale",
    "start": "402090",
    "end": "404639"
  },
  {
    "text": "at using auto scaling groups and be able",
    "start": "404639",
    "end": "406590"
  },
  {
    "text": "to manage the state of the instances in",
    "start": "406590",
    "end": "408629"
  },
  {
    "text": "the cluster the placement engine enables",
    "start": "408629",
    "end": "411180"
  },
  {
    "text": "you to be able to set rules to the",
    "start": "411180",
    "end": "412979"
  },
  {
    "text": "target landing zone of your containers",
    "start": "412979",
    "end": "415349"
  },
  {
    "text": "on the right instances and that is based",
    "start": "415349",
    "end": "417569"
  },
  {
    "text": "on your preference and then finally the",
    "start": "417569",
    "end": "420060"
  },
  {
    "text": "advanced scheduling features help",
    "start": "420060",
    "end": "421710"
  },
  {
    "text": "maintain the desired state of the",
    "start": "421710",
    "end": "423479"
  },
  {
    "text": "application spawn new containers to",
    "start": "423479",
    "end": "425729"
  },
  {
    "text": "automatically respond to your scaling",
    "start": "425729",
    "end": "427560"
  },
  {
    "text": "needs and then of course maintain",
    "start": "427560",
    "end": "429529"
  },
  {
    "text": "resiliency by deploying across multiple",
    "start": "429529",
    "end": "431849"
  },
  {
    "text": "availability zones while being resource",
    "start": "431849",
    "end": "434189"
  },
  {
    "text": "aware of the underlying computer in the",
    "start": "434189",
    "end": "436979"
  },
  {
    "text": "last couple of years we've seen a great",
    "start": "436979",
    "end": "438659"
  },
  {
    "text": "adoption of production use cases on",
    "start": "438659",
    "end": "440460"
  },
  {
    "text": "Amazon ECS are active because users are",
    "start": "440460",
    "end": "443310"
  },
  {
    "text": "up by more than four hundred fifty",
    "start": "443310",
    "end": "445560"
  },
  {
    "text": "percent by since 2016 and we are",
    "start": "445560",
    "end": "448020"
  },
  {
    "text": "managing containers across millions of",
    "start": "448020",
    "end": "450120"
  },
  {
    "text": "instances each month in fact we have",
    "start": "450120",
    "end": "452339"
  },
  {
    "text": "written icing an incredible transition",
    "start": "452339",
    "end": "454110"
  },
  {
    "text": "to containers and customers of easiest",
    "start": "454110",
    "end": "456150"
  },
  {
    "text": "whether it's Expedia running its travel",
    "start": "456150",
    "end": "458249"
  },
  {
    "text": "platform or my box powering mapping date",
    "start": "458249",
    "end": "460889"
  },
  {
    "text": "of some of the most popular website",
    "start": "460889",
    "end": "462569"
  },
  {
    "text": "Amazon ECS enables the customers to be",
    "start": "462569",
    "end": "465120"
  },
  {
    "text": "able to run containers at scale and",
    "start": "465120",
    "end": "467129"
  },
  {
    "text": "indeed we see hundreds and millions of",
    "start": "467129",
    "end": "469139"
  },
  {
    "text": "containers launched every week",
    "start": "469139",
    "end": "471919"
  },
  {
    "text": "kubernetes is a portable extension open",
    "start": "471919",
    "end": "475710"
  },
  {
    "text": "source platform for managing",
    "start": "475710",
    "end": "476930"
  },
  {
    "text": "containerized workloads and services",
    "start": "476930",
    "end": "479250"
  },
  {
    "text": "that facilitates both declarative",
    "start": "479250",
    "end": "481800"
  },
  {
    "text": "configuration and automation",
    "start": "481800",
    "end": "483629"
  },
  {
    "text": "according to a recent CN CF survey 63",
    "start": "483629",
    "end": "487560"
  },
  {
    "text": "percent of respondents front containers",
    "start": "487560",
    "end": "489870"
  },
  {
    "text": "on AWS but our customers told us hey",
    "start": "489870",
    "end": "493139"
  },
  {
    "text": "running kubernetes isn't a trivial work",
    "start": "493139",
    "end": "495330"
  },
  {
    "text": "piece and we think we can better spend",
    "start": "495330",
    "end": "498569"
  },
  {
    "text": "our cycles focusing on our applications",
    "start": "498569",
    "end": "500639"
  },
  {
    "text": "they also said if we add things our way",
    "start": "500639",
    "end": "502710"
  },
  {
    "text": "we wouldn't have to think about the",
    "start": "502710",
    "end": "504419"
  },
  {
    "text": "nuances of kubernetes deployment or",
    "start": "504419",
    "end": "506460"
  },
  {
    "text": "configuration we wouldn't have to worry",
    "start": "506460",
    "end": "508050"
  },
  {
    "text": "about managing",
    "start": "508050",
    "end": "509039"
  },
  {
    "text": "ET cds or the masters so what we did is",
    "start": "509039",
    "end": "512399"
  },
  {
    "text": "we built plastic container services for",
    "start": "512399",
    "end": "514919"
  },
  {
    "text": "kubernetes also known as eks and we",
    "start": "514919",
    "end": "518070"
  },
  {
    "text": "built it around",
    "start": "518070",
    "end": "518698"
  },
  {
    "text": "only four tenets platform to run",
    "start": "518699",
    "end": "520860"
  },
  {
    "text": "production grade workloads native and",
    "start": "520860",
    "end": "523289"
  },
  {
    "text": "upstream kubernetes experience seamless",
    "start": "523289",
    "end": "526079"
  },
  {
    "text": "integration with AWS services and",
    "start": "526079",
    "end": "528779"
  },
  {
    "text": "esteem actively contribute to the",
    "start": "528779",
    "end": "531120"
  },
  {
    "text": "upstream environment",
    "start": "531120",
    "end": "532589"
  },
  {
    "text": "now with eks the complexity of standing",
    "start": "532589",
    "end": "535800"
  },
  {
    "text": "your own kubernetes control plane is",
    "start": "535800",
    "end": "537959"
  },
  {
    "text": "simplified instead of running the",
    "start": "537959",
    "end": "539790"
  },
  {
    "text": "kubernetes control plane on your account",
    "start": "539790",
    "end": "541529"
  },
  {
    "text": "you connect to a managed kubernetes",
    "start": "541529",
    "end": "543300"
  },
  {
    "text": "endpoint on the cloud this endpoint",
    "start": "543300",
    "end": "545430"
  },
  {
    "text": "abstracts the kubernetes control plane",
    "start": "545430",
    "end": "547740"
  },
  {
    "text": "you walk on roads can check into the",
    "start": "547740",
    "end": "549540"
  },
  {
    "text": "cluster and you can interact with the",
    "start": "549540",
    "end": "551490"
  },
  {
    "text": "kubernetes cluster through a tooling",
    "start": "551490",
    "end": "553199"
  },
  {
    "text": "that you are already comfortable and you",
    "start": "553199",
    "end": "554999"
  },
  {
    "text": "already love all this file we've been",
    "start": "554999",
    "end": "557639"
  },
  {
    "text": "discussing how to get our compute",
    "start": "557639",
    "end": "559050"
  },
  {
    "text": "options we still got a bit of underlying",
    "start": "559050",
    "end": "561629"
  },
  {
    "text": "server management to do so let's talk",
    "start": "561629",
    "end": "563670"
  },
  {
    "text": "about how to use Fargate with easy s you",
    "start": "563670",
    "end": "566910"
  },
  {
    "text": "want to think about Fargate as a",
    "start": "566910",
    "end": "568290"
  },
  {
    "text": "technology and not a different service",
    "start": "568290",
    "end": "570449"
  },
  {
    "text": "per se when you're using e CS that is",
    "start": "570449",
    "end": "572670"
  },
  {
    "text": "there are no api used for you to learn",
    "start": "572670",
    "end": "574610"
  },
  {
    "text": "with foggy you have no instances to",
    "start": "574610",
    "end": "577290"
  },
  {
    "text": "manage",
    "start": "577290",
    "end": "577740"
  },
  {
    "text": "so no more patching OS or runtimes with",
    "start": "577740",
    "end": "580199"
  },
  {
    "text": "the new task negative api you don't need",
    "start": "580199",
    "end": "582269"
  },
  {
    "text": "to worry about the clusters they are an",
    "start": "582269",
    "end": "583889"
  },
  {
    "text": "organizational and a security boundary",
    "start": "583889",
    "end": "585809"
  },
  {
    "text": "at best but you don't need to do cluster",
    "start": "585809",
    "end": "588720"
  },
  {
    "text": "utilization or auto scaling of compute",
    "start": "588720",
    "end": "591029"
  },
  {
    "text": "resources within the cluster with the",
    "start": "591029",
    "end": "593970"
  },
  {
    "text": "resource based pricing model you only",
    "start": "593970",
    "end": "595709"
  },
  {
    "text": "pay for the resources that you provision",
    "start": "595709",
    "end": "597389"
  },
  {
    "text": "with each task within it",
    "start": "597389",
    "end": "599069"
  },
  {
    "text": "fundamentally changes how you think",
    "start": "599069",
    "end": "600720"
  },
  {
    "text": "about your consumption how you run and",
    "start": "600720",
    "end": "602970"
  },
  {
    "text": "deploy your application that containers",
    "start": "602970",
    "end": "605360"
  },
  {
    "text": "here's a screenshot of ECS when you",
    "start": "605360",
    "end": "608129"
  },
  {
    "text": "define an application call as a task",
    "start": "608129",
    "end": "610470"
  },
  {
    "text": "definition you're presented with an",
    "start": "610470",
    "end": "612509"
  },
  {
    "text": "option to select compatibilities with",
    "start": "612509",
    "end": "614490"
  },
  {
    "text": "the launch type essentially far gate is",
    "start": "614490",
    "end": "616589"
  },
  {
    "text": "just launched type we want to run your",
    "start": "616589",
    "end": "618720"
  },
  {
    "text": "containers on ec2 instances registered",
    "start": "618720",
    "end": "620910"
  },
  {
    "text": "with your easiest cluster that's the",
    "start": "620910",
    "end": "623279"
  },
  {
    "text": "easy to launch type so far gate clusters",
    "start": "623279",
    "end": "626730"
  },
  {
    "text": "are heterogeneous say you have different",
    "start": "626730",
    "end": "629309"
  },
  {
    "text": "requirements where your notification app",
    "start": "629309",
    "end": "631050"
  },
  {
    "text": "team would like to be able to move to",
    "start": "631050",
    "end": "633000"
  },
  {
    "text": "foggy but has a different time line plan",
    "start": "633000",
    "end": "635639"
  },
  {
    "text": "to do so but are ready to use your far",
    "start": "635639",
    "end": "638759"
  },
  {
    "text": "gate for shopping cart and web apps as",
    "start": "638759",
    "end": "641300"
  },
  {
    "text": "you notice you can run the web and the",
    "start": "641300",
    "end": "644610"
  },
  {
    "text": "shopping cart apps as ECS services with",
    "start": "644610",
    "end": "647009"
  },
  {
    "text": "launched type is foggy and you only see",
    "start": "647009",
    "end": "649410"
  },
  {
    "text": "your tasks across the various subnets",
    "start": "649410",
    "end": "652709"
  },
  {
    "text": "and Easy's you can continue to run",
    "start": "652709",
    "end": "654389"
  },
  {
    "text": "notification apps as easy to launch",
    "start": "654389",
    "end": "656819"
  },
  {
    "text": "types",
    "start": "656819",
    "end": "657560"
  },
  {
    "text": "in the same cluster as the Fargate power",
    "start": "657560",
    "end": "659390"
  },
  {
    "text": "web app and network boundaries there by",
    "start": "659390",
    "end": "661730"
  },
  {
    "text": "applying uniform set of policies in",
    "start": "661730",
    "end": "663650"
  },
  {
    "text": "terms of I am permissions as well as",
    "start": "663650",
    "end": "665810"
  },
  {
    "text": "network access rule",
    "start": "665810",
    "end": "666920"
  },
  {
    "text": "notice how the containers are spread",
    "start": "666920",
    "end": "668750"
  },
  {
    "text": "across the different subnets across a",
    "start": "668750",
    "end": "671840"
  },
  {
    "text": "ZZZ this gives high resiliency and fault",
    "start": "671840",
    "end": "674360"
  },
  {
    "text": "tolerance to your micro-services and on",
    "start": "674360",
    "end": "677480"
  },
  {
    "text": "the topic of serverless let's go to AWS",
    "start": "677480",
    "end": "679550"
  },
  {
    "text": "lambda aww slam des lets you run the",
    "start": "679550",
    "end": "683330"
  },
  {
    "text": "code without provisioning your managing",
    "start": "683330",
    "end": "684980"
  },
  {
    "text": "servers you pay only for the compute",
    "start": "684980",
    "end": "687320"
  },
  {
    "text": "time that you consume and there's no",
    "start": "687320",
    "end": "688970"
  },
  {
    "text": "charge when your code is not running",
    "start": "688970",
    "end": "690260"
  },
  {
    "text": "with lambda you can run code virtually",
    "start": "690260",
    "end": "692990"
  },
  {
    "text": "for any type of an application or a",
    "start": "692990",
    "end": "694550"
  },
  {
    "text": "back-end service all with zero",
    "start": "694550",
    "end": "696200"
  },
  {
    "text": "administration just upload your code the",
    "start": "696200",
    "end": "699320"
  },
  {
    "text": "lambda takes care of everything required",
    "start": "699320",
    "end": "701510"
  },
  {
    "text": "to run and scale your code with high",
    "start": "701510",
    "end": "703250"
  },
  {
    "text": "availability you can set up your code to",
    "start": "703250",
    "end": "705200"
  },
  {
    "text": "automatically trigger from other AWS",
    "start": "705200",
    "end": "707660"
  },
  {
    "text": "services or call it directly from any",
    "start": "707660",
    "end": "709790"
  },
  {
    "text": "web or mobile app the service computing",
    "start": "709790",
    "end": "712279"
  },
  {
    "text": "approach that brings lambda isn't about",
    "start": "712279",
    "end": "714560"
  },
  {
    "text": "not just having to manage servers",
    "start": "714560",
    "end": "716890"
  },
  {
    "text": "service means having a simple but a",
    "start": "716890",
    "end": "719300"
  },
  {
    "text": "usable parameter your code as a lambda",
    "start": "719300",
    "end": "721460"
  },
  {
    "text": "function with nothing that looks like a",
    "start": "721460",
    "end": "723380"
  },
  {
    "text": "container or so the programming model",
    "start": "723380",
    "end": "725510"
  },
  {
    "text": "and the API are all row oriented around",
    "start": "725510",
    "end": "729440"
  },
  {
    "text": "dealing with functions serverless means",
    "start": "729440",
    "end": "731810"
  },
  {
    "text": "you only pay for the work done and not",
    "start": "731810",
    "end": "733790"
  },
  {
    "text": "for provisioning capacity you don't have",
    "start": "733790",
    "end": "736010"
  },
  {
    "text": "to worry about the utilization you never",
    "start": "736010",
    "end": "738080"
  },
  {
    "text": "pay for idle you only pay for the",
    "start": "738080",
    "end": "740030"
  },
  {
    "text": "compute time that is the time that your",
    "start": "740030",
    "end": "742700"
  },
  {
    "text": "function takes to run in that to in the",
    "start": "742700",
    "end": "744920"
  },
  {
    "text": "units of 100 milliseconds this is",
    "start": "744920",
    "end": "746930"
  },
  {
    "text": "something that most of our customers get",
    "start": "746930",
    "end": "748670"
  },
  {
    "text": "excited about thinking about what 21",
    "start": "748670",
    "end": "751460"
  },
  {
    "text": "microseconds for 100 milliseconds of",
    "start": "751460",
    "end": "753350"
  },
  {
    "text": "compute can do for their cost for",
    "start": "753350",
    "end": "755440"
  },
  {
    "text": "example a publishing company from",
    "start": "755440",
    "end": "757580"
  },
  {
    "text": "Singapore tells us that they saved over",
    "start": "757580",
    "end": "759230"
  },
  {
    "text": "30 thousand dollars per month by",
    "start": "759230",
    "end": "761240"
  },
  {
    "text": "switching from a proprietary image",
    "start": "761240",
    "end": "762830"
  },
  {
    "text": "processing solution to the one that they",
    "start": "762830",
    "end": "764780"
  },
  {
    "text": "built on lambda for processing millions",
    "start": "764780",
    "end": "766700"
  },
  {
    "text": "of images a day which brings me to the",
    "start": "766700",
    "end": "769190"
  },
  {
    "text": "third aspect that a service means that",
    "start": "769190",
    "end": "771560"
  },
  {
    "text": "the scaling is already built in",
    "start": "771560",
    "end": "773240"
  },
  {
    "text": "you can never over provision or under",
    "start": "773240",
    "end": "775339"
  },
  {
    "text": "provision your resources since your code",
    "start": "775339",
    "end": "777320"
  },
  {
    "text": "is run in response to events lambda will",
    "start": "777320",
    "end": "779779"
  },
  {
    "text": "automatically spin up as many instances",
    "start": "779779",
    "end": "782060"
  },
  {
    "text": "of your function as are required to",
    "start": "782060",
    "end": "784430"
  },
  {
    "text": "handle any incoming event rate let me",
    "start": "784430",
    "end": "787100"
  },
  {
    "text": "repeat this we have customers running",
    "start": "787100",
    "end": "789890"
  },
  {
    "text": "back end",
    "start": "789890",
    "end": "790660"
  },
  {
    "text": "handling in excess of 100,000",
    "start": "790660",
    "end": "793449"
  },
  {
    "text": "transactions per second at peak and",
    "start": "793449",
    "end": "795519"
  },
  {
    "text": "others like AdRoll who are processing or",
    "start": "795519",
    "end": "797889"
  },
  {
    "text": "55 billion ad impressions per day using",
    "start": "797889",
    "end": "801069"
  },
  {
    "text": "lambda last and not the least of course",
    "start": "801069",
    "end": "804940"
  },
  {
    "text": "service means that the functions come",
    "start": "804940",
    "end": "806649"
  },
  {
    "text": "with high availability and depending on",
    "start": "806649",
    "end": "808600"
  },
  {
    "text": "the workload fault tolerance comes",
    "start": "808600",
    "end": "810339"
  },
  {
    "text": "built-in the combination of offloading",
    "start": "810339",
    "end": "813160"
  },
  {
    "text": "these responsibilities can have a",
    "start": "813160",
    "end": "814660"
  },
  {
    "text": "significant impact on the way you own",
    "start": "814660",
    "end": "817209"
  },
  {
    "text": "and operate the applications running in",
    "start": "817209",
    "end": "818860"
  },
  {
    "text": "the cloud let's discuss about how we go",
    "start": "818860",
    "end": "821410"
  },
  {
    "text": "about using AWS lambda first your",
    "start": "821410",
    "end": "824079"
  },
  {
    "text": "software is able to respond to events in",
    "start": "824079",
    "end": "826240"
  },
  {
    "text": "real times so data stores state changes",
    "start": "826240",
    "end": "829720"
  },
  {
    "text": "on ec2 or created alarms on cloud wats",
    "start": "829720",
    "end": "832509"
  },
  {
    "text": "or bring your own event through API",
    "start": "832509",
    "end": "834370"
  },
  {
    "text": "gateway or the SDKs the second part",
    "start": "834370",
    "end": "836800"
  },
  {
    "text": "means that you are able to continuously",
    "start": "836800",
    "end": "839199"
  },
  {
    "text": "scale this means it is automatic you",
    "start": "839199",
    "end": "841029"
  },
  {
    "text": "don't need to be provisioning servers",
    "start": "841029",
    "end": "842649"
  },
  {
    "text": "all the time and then you don't have to",
    "start": "842649",
    "end": "845410"
  },
  {
    "text": "think about deployments and code",
    "start": "845410",
    "end": "847360"
  },
  {
    "text": "runtimes at the Machine level you just",
    "start": "847360",
    "end": "849459"
  },
  {
    "text": "pay for how long your code transfer and",
    "start": "849459",
    "end": "851470"
  },
  {
    "text": "this allows you to handle instantaneous",
    "start": "851470",
    "end": "854230"
  },
  {
    "text": "and ephemeral types of application and",
    "start": "854230",
    "end": "856449"
  },
  {
    "text": "this was not really possible previously",
    "start": "856449",
    "end": "859000"
  },
  {
    "text": "was it and it's easy to use I'm done",
    "start": "859000",
    "end": "861519"
  },
  {
    "text": "being your own code write it in your",
    "start": "861519",
    "end": "863290"
  },
  {
    "text": "favorite programming language like",
    "start": "863290",
    "end": "864970"
  },
  {
    "text": "nodejs all the versions from 4.3 to 8.10",
    "start": "864970",
    "end": "868540"
  },
  {
    "text": "use java 8 or python from 2.7 to 3.6 you",
    "start": "868540",
    "end": "872620"
  },
  {
    "text": "can now also use dotnet core 1.0.1",
    "start": "872620",
    "end": "875920"
  },
  {
    "text": "or 2.0 and if you've watched the latest",
    "start": "875920",
    "end": "879130"
  },
  {
    "text": "treatment you can now use go lang and",
    "start": "879130",
    "end": "881259"
  },
  {
    "text": "then of course you can bring in your",
    "start": "881259",
    "end": "882759"
  },
  {
    "text": "third-party libraries use maven or",
    "start": "882759",
    "end": "885069"
  },
  {
    "text": "Gradle or tools of your choice for that",
    "start": "885069",
    "end": "886980"
  },
  {
    "text": "and then this comes with only one dial",
    "start": "886980",
    "end": "889899"
  },
  {
    "text": "for you to tune",
    "start": "889899",
    "end": "890829"
  },
  {
    "text": "select the memory you can choose all the",
    "start": "890829",
    "end": "893230"
  },
  {
    "text": "way from 128 MB to three jeebies the CPU",
    "start": "893230",
    "end": "896949"
  },
  {
    "text": "and network are allocated proportionally",
    "start": "896949",
    "end": "900688"
  },
  {
    "text": "lambdas are easily integrated with other",
    "start": "900959",
    "end": "903579"
  },
  {
    "text": "services so you either invoke your",
    "start": "903579",
    "end": "905740"
  },
  {
    "text": "lambda directly in sync or a sync mode",
    "start": "905740",
    "end": "907540"
  },
  {
    "text": "or it is completely even driven so an s3",
    "start": "907540",
    "end": "910509"
  },
  {
    "text": "put DynamoDB streams Canisius or cloud",
    "start": "910509",
    "end": "913300"
  },
  {
    "text": "watch events all of that is supported",
    "start": "913300",
    "end": "915279"
  },
  {
    "text": "and many more the other part that we",
    "start": "915279",
    "end": "918339"
  },
  {
    "text": "need to understand is the flexible",
    "start": "918339",
    "end": "920019"
  },
  {
    "text": "authorization securely grant access to",
    "start": "920019",
    "end": "922329"
  },
  {
    "text": "resources and v pcs",
    "start": "922329",
    "end": "924640"
  },
  {
    "text": "through the lambda function and then",
    "start": "924640",
    "end": "926530"
  },
  {
    "text": "also give a fine-grained access control",
    "start": "926530",
    "end": "928960"
  },
  {
    "text": "to who can invoke your lambda functions",
    "start": "928960",
    "end": "930850"
  },
  {
    "text": "in the first place itself further",
    "start": "930850",
    "end": "934090"
  },
  {
    "text": "docking authorizing functions you could",
    "start": "934090",
    "end": "936880"
  },
  {
    "text": "use cloud 9 editor or I'll just upload",
    "start": "936880",
    "end": "939490"
  },
  {
    "text": "your pre-written code as a package zip",
    "start": "939490",
    "end": "941500"
  },
  {
    "text": "and of course we've got third-party",
    "start": "941500",
    "end": "943360"
  },
  {
    "text": "plugins with for your favorite IDE like",
    "start": "943360",
    "end": "945160"
  },
  {
    "text": "eclipse or Visual Studio monitoring and",
    "start": "945160",
    "end": "948430"
  },
  {
    "text": "logging is pretty much very important",
    "start": "948430",
    "end": "950200"
  },
  {
    "text": "now how do you do it in a server",
    "start": "950200",
    "end": "951430"
  },
  {
    "text": "l'espace matrix for requests errors and",
    "start": "951430",
    "end": "954100"
  },
  {
    "text": "throttles are available to you on the",
    "start": "954100",
    "end": "955510"
  },
  {
    "text": "dashboard itself and built-in logs are",
    "start": "955510",
    "end": "957910"
  },
  {
    "text": "provided through Amazon CloudWatch locks",
    "start": "957910",
    "end": "960540"
  },
  {
    "text": "the programming model however remains",
    "start": "960540",
    "end": "962950"
  },
  {
    "text": "the same and the one that you're used to",
    "start": "962950",
    "end": "964720"
  },
  {
    "text": "so you can use processes threads",
    "start": "964720",
    "end": "967110"
  },
  {
    "text": "500 MB of /tmp sockets and all of that",
    "start": "967110",
    "end": "971290"
  },
  {
    "text": "normally and then we've got the SDK",
    "start": "971290",
    "end": "973690"
  },
  {
    "text": "built in for python using boto 3 and",
    "start": "973690",
    "end": "975730"
  },
  {
    "text": "nodes yes you have to keep in mind",
    "start": "975730",
    "end": "978310"
  },
  {
    "text": "however that the applications are",
    "start": "978310",
    "end": "980440"
  },
  {
    "text": "designed to be stateless purses the data",
    "start": "980440",
    "end": "982690"
  },
  {
    "text": "using external storage like Redis or",
    "start": "982690",
    "end": "984850"
  },
  {
    "text": "your favorite data store and don't",
    "start": "984850",
    "end": "987310"
  },
  {
    "text": "assume any affinity to underlying",
    "start": "987310",
    "end": "989110"
  },
  {
    "text": "infrastructure we have discussed the",
    "start": "989110",
    "end": "991270"
  },
  {
    "text": "compute side of services with AWS",
    "start": "991270",
    "end": "993730"
  },
  {
    "text": "however we still need a perspective of",
    "start": "993730",
    "end": "996460"
  },
  {
    "text": "the spectrum of services that are",
    "start": "996460",
    "end": "998110"
  },
  {
    "text": "available to you so what we're going to",
    "start": "998110",
    "end": "1000270"
  },
  {
    "text": "talk about is the concept of region and",
    "start": "1000270",
    "end": "1002880"
  },
  {
    "text": "availabilities and I'm hopeful that you",
    "start": "1002880",
    "end": "1005220"
  },
  {
    "text": "are already comfortable with it to make",
    "start": "1005220",
    "end": "1007260"
  },
  {
    "text": "a chain on ec2 what you have to do is",
    "start": "1007260",
    "end": "1010250"
  },
  {
    "text": "deploy a cross availability zones on",
    "start": "1010250",
    "end": "1013280"
  },
  {
    "text": "manage there is an option for multi easy",
    "start": "1013280",
    "end": "1015870"
  },
  {
    "text": "in server list H a and fault tolerance",
    "start": "1015870",
    "end": "1018510"
  },
  {
    "text": "is taken care for you first services",
    "start": "1018510",
    "end": "1020970"
  },
  {
    "text": "that were available on AWS about 11",
    "start": "1020970",
    "end": "1023790"
  },
  {
    "text": "years back were SQS and s3 serverless",
    "start": "1023790",
    "end": "1026310"
  },
  {
    "text": "services by themselves lambda was added",
    "start": "1026310",
    "end": "1028589"
  },
  {
    "text": "as a compute to s3 because our customers",
    "start": "1028589",
    "end": "1030660"
  },
  {
    "text": "gave us a feedback and then we added",
    "start": "1030660",
    "end": "1032490"
  },
  {
    "text": "sources to lambda this provides a whole",
    "start": "1032490",
    "end": "1035430"
  },
  {
    "text": "spectrum of server lists for you from",
    "start": "1035430",
    "end": "1037589"
  },
  {
    "text": "chat BOTS IT automation web applications",
    "start": "1037589",
    "end": "1040949"
  },
  {
    "text": "and and Alexa amongst many others micro",
    "start": "1040949",
    "end": "1046050"
  },
  {
    "text": "services provide your ability for that",
    "start": "1046050",
    "end": "1048209"
  },
  {
    "text": "you have to ensure that your entire",
    "start": "1048209",
    "end": "1050360"
  },
  {
    "text": "continuous integration and continuous",
    "start": "1050360",
    "end": "1052380"
  },
  {
    "text": "deployment pipeline is set remember that",
    "start": "1052380",
    "end": "1055920"
  },
  {
    "text": "with AWS infrastructure",
    "start": "1055920",
    "end": "1057539"
  },
  {
    "text": "skort cloud formation helps you spin",
    "start": "1057539",
    "end": "1059940"
  },
  {
    "text": "infrastructure including network",
    "start": "1059940",
    "end": "1061559"
  },
  {
    "text": "components like VP C's subnets and",
    "start": "1061559",
    "end": "1063840"
  },
  {
    "text": "security groups",
    "start": "1063840",
    "end": "1064830"
  },
  {
    "text": "now you can version control the",
    "start": "1064830",
    "end": "1066629"
  },
  {
    "text": "configuration execute these services",
    "start": "1066629",
    "end": "1069570"
  },
  {
    "text": "like code pipeline and use AWS code",
    "start": "1069570",
    "end": "1072419"
  },
  {
    "text": "deploy for deploying to a fleet of ec2",
    "start": "1072419",
    "end": "1074759"
  },
  {
    "text": "service or even lambda make sure that",
    "start": "1074759",
    "end": "1077970"
  },
  {
    "text": "you also get introduced to a little",
    "start": "1077970",
    "end": "1079379"
  },
  {
    "text": "squirrel called Sam server this",
    "start": "1079379",
    "end": "1080940"
  },
  {
    "text": "application model where you can define",
    "start": "1080940",
    "end": "1082799"
  },
  {
    "text": "resources optimized for server list the",
    "start": "1082799",
    "end": "1085440"
  },
  {
    "text": "aw Sam extends cloud formation to",
    "start": "1085440",
    "end": "1087779"
  },
  {
    "text": "provide a simplified way of defining the",
    "start": "1087779",
    "end": "1090179"
  },
  {
    "text": "Amazon API gateway api's AWS lambda",
    "start": "1090179",
    "end": "1093720"
  },
  {
    "text": "functions Amazon DynamoDB tables needed",
    "start": "1093720",
    "end": "1096239"
  },
  {
    "text": "by your server this application keep in",
    "start": "1096239",
    "end": "1098940"
  },
  {
    "text": "mind it's an Apache 2.0 project which",
    "start": "1098940",
    "end": "1101129"
  },
  {
    "text": "builds on the cloud formation scrip",
    "start": "1101129",
    "end": "1103049"
  },
  {
    "text": "previously cloud formation lacked the",
    "start": "1103049",
    "end": "1105269"
  },
  {
    "text": "specialized resources and types",
    "start": "1105269",
    "end": "1107369"
  },
  {
    "text": "optimized for defining service",
    "start": "1107369",
    "end": "1109169"
  },
  {
    "text": "application now with Sam you can use",
    "start": "1109169",
    "end": "1111299"
  },
  {
    "text": "resource types to write cloud formation",
    "start": "1111299",
    "end": "1113220"
  },
  {
    "text": "template that defines your service in",
    "start": "1113220",
    "end": "1116070"
  },
  {
    "text": "resources only with a few lines of code",
    "start": "1116070",
    "end": "1118279"
  },
  {
    "text": "how do you get started you will find a",
    "start": "1118279",
    "end": "1120960"
  },
  {
    "text": "wide diversity of application for Sam",
    "start": "1120960",
    "end": "1123239"
  },
  {
    "text": "and server application repository which",
    "start": "1123239",
    "end": "1125909"
  },
  {
    "text": "consists of scripts in code for you to",
    "start": "1125909",
    "end": "1128700"
  },
  {
    "text": "get working on to create service",
    "start": "1128700",
    "end": "1131820"
  },
  {
    "text": "application using Sam first you create a",
    "start": "1131820",
    "end": "1134249"
  },
  {
    "text": "Sam template it's a JSON or AML",
    "start": "1134249",
    "end": "1136409"
  },
  {
    "text": "configuration file that describes your",
    "start": "1136409",
    "end": "1138119"
  },
  {
    "text": "lambda function API endpoints and other",
    "start": "1138119",
    "end": "1140609"
  },
  {
    "text": "receives resources that you need in your",
    "start": "1140609",
    "end": "1142379"
  },
  {
    "text": "application then you test upload and",
    "start": "1142379",
    "end": "1146369"
  },
  {
    "text": "deploy your application using the Sam",
    "start": "1146369",
    "end": "1148259"
  },
  {
    "text": "local command-line interface the Sam CLI",
    "start": "1148259",
    "end": "1150659"
  },
  {
    "text": "during deployment Sam automatically",
    "start": "1150659",
    "end": "1153149"
  },
  {
    "text": "translates your application",
    "start": "1153149",
    "end": "1154679"
  },
  {
    "text": "specification to CloudFormation template",
    "start": "1154679",
    "end": "1156929"
  },
  {
    "text": "filling in the default values for",
    "start": "1156929",
    "end": "1159059"
  },
  {
    "text": "unspecified properties and determining",
    "start": "1159059",
    "end": "1161460"
  },
  {
    "text": "the appropriate mappings for invocations",
    "start": "1161460",
    "end": "1163679"
  },
  {
    "text": "so the permissions to setup for any",
    "start": "1163679",
    "end": "1166320"
  },
  {
    "text": "lambda functions are built in it will",
    "start": "1166320",
    "end": "1168330"
  },
  {
    "text": "refer to your swagger definition for the",
    "start": "1168330",
    "end": "1170549"
  },
  {
    "text": "API sparked to build it monitoring the",
    "start": "1170549",
    "end": "1174330"
  },
  {
    "text": "services especially if their server list",
    "start": "1174330",
    "end": "1176519"
  },
  {
    "text": "is another thing that we got asked very",
    "start": "1176519",
    "end": "1178559"
  },
  {
    "text": "often x-ray is a service that provides",
    "start": "1178559",
    "end": "1181619"
  },
  {
    "text": "an end-to-end view of the requests as",
    "start": "1181619",
    "end": "1183989"
  },
  {
    "text": "they travel through your application and",
    "start": "1183989",
    "end": "1185489"
  },
  {
    "text": "it shows a map of your applications",
    "start": "1185489",
    "end": "1187769"
  },
  {
    "text": "underlying components the service Maps",
    "start": "1187769",
    "end": "1190440"
  },
  {
    "text": "let you see the",
    "start": "1190440",
    "end": "1191549"
  },
  {
    "text": "between all the resources within your",
    "start": "1191549",
    "end": "1193679"
  },
  {
    "text": "application and that too in real-time",
    "start": "1193679",
    "end": "1195239"
  },
  {
    "text": "you can quickly see where the high",
    "start": "1195239",
    "end": "1197850"
  },
  {
    "text": "latency czar occurring in your",
    "start": "1197850",
    "end": "1199470"
  },
  {
    "text": "application and then drill down into the",
    "start": "1199470",
    "end": "1201570"
  },
  {
    "text": "specific services and paths that are",
    "start": "1201570",
    "end": "1203369"
  },
  {
    "text": "performing poorly so you might ask how",
    "start": "1203369",
    "end": "1206639"
  },
  {
    "text": "does actually do all this what x-ray",
    "start": "1206639",
    "end": "1208919"
  },
  {
    "text": "does in a sense is x-ray captures the",
    "start": "1208919",
    "end": "1210840"
  },
  {
    "text": "trace data from the code running on ec2",
    "start": "1210840",
    "end": "1212730"
  },
  {
    "text": "instances also ECS containers beanstalks",
    "start": "1212730",
    "end": "1215489"
  },
  {
    "text": "api gateway lamda and many more it",
    "start": "1215489",
    "end": "1218190"
  },
  {
    "text": "implements follow the thread tracing by",
    "start": "1218190",
    "end": "1221429"
  },
  {
    "text": "adding HTTP headers to requests that",
    "start": "1221429",
    "end": "1223139"
  },
  {
    "text": "don't already have one and then pass the",
    "start": "1223139",
    "end": "1226379"
  },
  {
    "text": "header along the additional tires of",
    "start": "1226379",
    "end": "1228720"
  },
  {
    "text": "request handlers the data collected at",
    "start": "1228720",
    "end": "1231480"
  },
  {
    "text": "each point is called as a segment it is",
    "start": "1231480",
    "end": "1234059"
  },
  {
    "text": "stored as a chunk of JSON data a segment",
    "start": "1234059",
    "end": "1236609"
  },
  {
    "text": "represents a unit of work and includes",
    "start": "1236609",
    "end": "1238950"
  },
  {
    "text": "request and response timing along with",
    "start": "1238950",
    "end": "1240980"
  },
  {
    "text": "optional sub segments that represent",
    "start": "1240980",
    "end": "1243749"
  },
  {
    "text": "smaller units of work it can be as deep",
    "start": "1243749",
    "end": "1245789"
  },
  {
    "text": "as the lines of code if you supply the",
    "start": "1245789",
    "end": "1247980"
  },
  {
    "text": "proper instrumentation then a",
    "start": "1247980",
    "end": "1250169"
  },
  {
    "text": "statistically meaningful sample of the",
    "start": "1250169",
    "end": "1252629"
  },
  {
    "text": "segment's are routed to x-ray service",
    "start": "1252629",
    "end": "1254519"
  },
  {
    "text": "which in a sense is a daemon process",
    "start": "1254519",
    "end": "1256379"
  },
  {
    "text": "that runs on ec2 instances inside",
    "start": "1256379",
    "end": "1258749"
  },
  {
    "text": "containers the segment's are then",
    "start": "1258749",
    "end": "1260879"
  },
  {
    "text": "assembled into traces which is groups of",
    "start": "1260879",
    "end": "1264149"
  },
  {
    "text": "segments that say share the common ID",
    "start": "1264149",
    "end": "1265830"
  },
  {
    "text": "the traces of segments are then further",
    "start": "1265830",
    "end": "1268200"
  },
  {
    "text": "process to create a service graph which",
    "start": "1268200",
    "end": "1270419"
  },
  {
    "text": "is visually depicted the relationship",
    "start": "1270419",
    "end": "1272399"
  },
  {
    "text": "between the services to each other today",
    "start": "1272399",
    "end": "1274200"
  },
  {
    "text": "we've discussed and compared various",
    "start": "1274200",
    "end": "1276629"
  },
  {
    "text": "compute options that are available to",
    "start": "1276629",
    "end": "1278460"
  },
  {
    "text": "you when you think of micro services",
    "start": "1278460",
    "end": "1280409"
  },
  {
    "text": "we've covered a range from elastic",
    "start": "1280409",
    "end": "1282869"
  },
  {
    "text": "beanstalk to containers and going all",
    "start": "1282869",
    "end": "1285239"
  },
  {
    "text": "the way to service if after today you",
    "start": "1285239",
    "end": "1287759"
  },
  {
    "text": "want to take AWS knowledge to the next",
    "start": "1287759",
    "end": "1289769"
  },
  {
    "text": "level you've several options available",
    "start": "1289769",
    "end": "1291269"
  },
  {
    "text": "to you",
    "start": "1291269",
    "end": "1291989"
  },
  {
    "text": "to gain more confidence and hands-on",
    "start": "1291989",
    "end": "1294359"
  },
  {
    "text": "experience with a double use watch our",
    "start": "1294359",
    "end": "1296369"
  },
  {
    "text": "instructional videos and explore the",
    "start": "1296369",
    "end": "1298200"
  },
  {
    "text": "self-paced labs additionally you can",
    "start": "1298200",
    "end": "1300659"
  },
  {
    "text": "attend an instructor-led class by",
    "start": "1300659",
    "end": "1303059"
  },
  {
    "text": "qualified AWS instructors and learn how",
    "start": "1303059",
    "end": "1305580"
  },
  {
    "text": "to design deploy and operate highly",
    "start": "1305580",
    "end": "1307919"
  },
  {
    "text": "available cost-effective and secure",
    "start": "1307919",
    "end": "1310289"
  },
  {
    "text": "applications on AWS and remember to",
    "start": "1310289",
    "end": "1312929"
  },
  {
    "text": "validate your technical expertise with",
    "start": "1312929",
    "end": "1314580"
  },
  {
    "text": "AWS certification a Douglas also has a",
    "start": "1314580",
    "end": "1318119"
  },
  {
    "text": "wide partner ecosystem to help you focus",
    "start": "1318119",
    "end": "1320429"
  },
  {
    "text": "on your success and take the full",
    "start": "1320429",
    "end": "1322409"
  },
  {
    "text": "advantage of all the AWS business",
    "start": "1322409",
    "end": "1324659"
  },
  {
    "text": "benefits",
    "start": "1324659",
    "end": "1325450"
  },
  {
    "text": "that AWS has to offer to learn more",
    "start": "1325450",
    "end": "1327880"
  },
  {
    "text": "about the appian partners and find the",
    "start": "1327880",
    "end": "1330040"
  },
  {
    "text": "right one that fits your needs please",
    "start": "1330040",
    "end": "1331990"
  },
  {
    "text": "visit the AWS APN booth at our showcase",
    "start": "1331990",
    "end": "1334390"
  },
  {
    "text": "I hope you enjoy the rest of the AWS",
    "start": "1334390",
    "end": "1336610"
  },
  {
    "text": "innovate online conference do take the",
    "start": "1336610",
    "end": "1338800"
  },
  {
    "text": "time to provide feedback on today's",
    "start": "1338800",
    "end": "1340450"
  },
  {
    "text": "event so that we can keep improving on",
    "start": "1340450",
    "end": "1342310"
  },
  {
    "text": "the event experience have a great day",
    "start": "1342310",
    "end": "1346440"
  },
  {
    "text": "I'm Dave and I'm here with Barry from",
    "start": "1356880",
    "end": "1359500"
  },
  {
    "text": "Vanguard welcome Barry usually usually",
    "start": "1359500",
    "end": "1361990"
  },
  {
    "text": "ask people what their company does but I",
    "start": "1361990",
    "end": "1363880"
  },
  {
    "text": "know what you guys do you have my money",
    "start": "1363880",
    "end": "1365020"
  },
  {
    "text": "we're a small financial investments",
    "start": "1365020",
    "end": "1367120"
  },
  {
    "text": "company yeah but you're growing all the",
    "start": "1367120",
    "end": "1368410"
  },
  {
    "text": "time sure you you're facing some unique",
    "start": "1368410",
    "end": "1371860"
  },
  {
    "text": "challenges because of that and it kind",
    "start": "1371860",
    "end": "1373570"
  },
  {
    "text": "of all starts at the db2 database right",
    "start": "1373570",
    "end": "1376090"
  },
  {
    "text": "right at the moment db2 is our crown",
    "start": "1376090",
    "end": "1378520"
  },
  {
    "text": "jewels every night we process trillions",
    "start": "1378520",
    "end": "1380620"
  },
  {
    "text": "of dollars through that system and",
    "start": "1380620",
    "end": "1384120"
  },
  {
    "text": "basically keep everyone's records",
    "start": "1384120",
    "end": "1386400"
  },
  {
    "text": "reconciled so how do we get that data",
    "start": "1386400",
    "end": "1388930"
  },
  {
    "text": "into the cloud so we can do cool things",
    "start": "1388930",
    "end": "1390250"
  },
  {
    "text": "with it well as a part of that",
    "start": "1390250",
    "end": "1392290"
  },
  {
    "text": "processing db2 writes an transaction log",
    "start": "1392290",
    "end": "1396340"
  },
  {
    "text": "so basically we take the data from that",
    "start": "1396340",
    "end": "1398320"
  },
  {
    "text": "transaction log using a CDC tool CDC",
    "start": "1398320",
    "end": "1401980"
  },
  {
    "text": "meaning change data capture so every",
    "start": "1401980",
    "end": "1405040"
  },
  {
    "text": "change that happens gets recorded out",
    "start": "1405040",
    "end": "1406660"
  },
  {
    "text": "here and then we can push it from the",
    "start": "1406660",
    "end": "1409860"
  },
  {
    "text": "on-prem system out into a CDC",
    "start": "1409860",
    "end": "1413580"
  },
  {
    "text": "distributor which is located in Amazon",
    "start": "1413580",
    "end": "1416350"
  },
  {
    "text": "okay so now we've moved the data up into",
    "start": "1416350",
    "end": "1418420"
  },
  {
    "text": "Amazon Web Services right what are we",
    "start": "1418420",
    "end": "1420700"
  },
  {
    "text": "trying to do with it now I see RDS I see",
    "start": "1420700",
    "end": "1422620"
  },
  {
    "text": "dynamo is there a method to our madness",
    "start": "1422620",
    "end": "1425430"
  },
  {
    "text": "absolutely we have a number of different",
    "start": "1425430",
    "end": "1427900"
  },
  {
    "text": "lines of business and not",
    "start": "1427900",
    "end": "1429430"
  },
  {
    "text": "one-size-fits-all so for example one of",
    "start": "1429430",
    "end": "1432220"
  },
  {
    "text": "our lines of business is really",
    "start": "1432220",
    "end": "1433480"
  },
  {
    "text": "interested in continuing to use",
    "start": "1433480",
    "end": "1435160"
  },
  {
    "text": "relational technology so what we can do",
    "start": "1435160",
    "end": "1437800"
  },
  {
    "text": "is from the CDC tool we can push the",
    "start": "1437800",
    "end": "1440020"
  },
  {
    "text": "data directly into Amazon RDS where it",
    "start": "1440020",
    "end": "1443350"
  },
  {
    "text": "meets the same schema that we have in",
    "start": "1443350",
    "end": "1445750"
  },
  {
    "text": "db2 out there and then the micro",
    "start": "1445750",
    "end": "1448030"
  },
  {
    "text": "services can be written to pull the data",
    "start": "1448030",
    "end": "1450010"
  },
  {
    "text": "from RDS directly and that meets the",
    "start": "1450010",
    "end": "1454180"
  },
  {
    "text": "requirement for the micro services to",
    "start": "1454180",
    "end": "1456310"
  },
  {
    "text": "own their own data and",
    "start": "1456310",
    "end": "1458150"
  },
  {
    "text": "represent that within a bounded context",
    "start": "1458150",
    "end": "1459890"
  },
  {
    "text": "but but not so fast for dynamodb right",
    "start": "1459890",
    "end": "1462080"
  },
  {
    "text": "they do we have to make some changes",
    "start": "1462080",
    "end": "1463460"
  },
  {
    "text": "absolutely right so the CDC tools at the",
    "start": "1463460",
    "end": "1466610"
  },
  {
    "text": "moment aren't capable of writing",
    "start": "1466610",
    "end": "1468170"
  },
  {
    "text": "directly to to dynamodb and even if they",
    "start": "1468170",
    "end": "1470960"
  },
  {
    "text": "were we wouldn't necessarily want the",
    "start": "1470960",
    "end": "1473210"
  },
  {
    "text": "schema that they might use so what we're",
    "start": "1473210",
    "end": "1475400"
  },
  {
    "text": "actually looking at at the moment is",
    "start": "1475400",
    "end": "1476900"
  },
  {
    "text": "pushing data from the CDC into a",
    "start": "1476900",
    "end": "1479330"
  },
  {
    "text": "streaming data platform okay and once",
    "start": "1479330",
    "end": "1481850"
  },
  {
    "text": "it's in that streaming data platform we",
    "start": "1481850",
    "end": "1483590"
  },
  {
    "text": "can look for messages going into it and",
    "start": "1483590",
    "end": "1485390"
  },
  {
    "text": "then use our own logic to translate",
    "start": "1485390",
    "end": "1488120"
  },
  {
    "text": "those relational changes to the format",
    "start": "1488120",
    "end": "1491540"
  },
  {
    "text": "that we would want to see them in the no",
    "start": "1491540",
    "end": "1493250"
  },
  {
    "text": "sequel DynamoDB database okay and then",
    "start": "1493250",
    "end": "1495710"
  },
  {
    "text": "our micro services can feed off dynamic",
    "start": "1495710",
    "end": "1497420"
  },
  {
    "text": "absolutely so the micro service is there",
    "start": "1497420",
    "end": "1499670"
  },
  {
    "text": "would be written to talk to their",
    "start": "1499670",
    "end": "1501710"
  },
  {
    "text": "bounded context which exists within",
    "start": "1501710",
    "end": "1503450"
  },
  {
    "text": "DynamoDB now we've got the micro",
    "start": "1503450",
    "end": "1505220"
  },
  {
    "text": "services talking to their database of",
    "start": "1505220",
    "end": "1506960"
  },
  {
    "text": "choice right yep but this kind of opens",
    "start": "1506960",
    "end": "1509090"
  },
  {
    "text": "up some things you mentioned you guys",
    "start": "1509090",
    "end": "1510470"
  },
  {
    "text": "are growing they kind of all over the",
    "start": "1510470",
    "end": "1512000"
  },
  {
    "text": "world now right right so we have offices",
    "start": "1512000",
    "end": "1514190"
  },
  {
    "text": "in London and in Sydney we want the",
    "start": "1514190",
    "end": "1516920"
  },
  {
    "text": "customers there to have the same",
    "start": "1516920",
    "end": "1518150"
  },
  {
    "text": "experience that they would have if they",
    "start": "1518150",
    "end": "1519530"
  },
  {
    "text": "were in the United States so for example",
    "start": "1519530",
    "end": "1521690"
  },
  {
    "text": "we can use RDS read replicas and push",
    "start": "1521690",
    "end": "1524660"
  },
  {
    "text": "the data directly from what we call our",
    "start": "1524660",
    "end": "1527000"
  },
  {
    "text": "hub data center out to any number of",
    "start": "1527000",
    "end": "1529280"
  },
  {
    "text": "spokes one of which we'd expect to be in",
    "start": "1529280",
    "end": "1531590"
  },
  {
    "text": "Sydney one in London the data would be",
    "start": "1531590",
    "end": "1534380"
  },
  {
    "text": "pushed from dynamodb into a read replica",
    "start": "1534380",
    "end": "1537200"
  },
  {
    "text": "out there using dynamodb streams so we",
    "start": "1537200",
    "end": "1541340"
  },
  {
    "text": "put the data close to the user's right",
    "start": "1541340",
    "end": "1542930"
  },
  {
    "text": "and now this opens like opportunities",
    "start": "1542930",
    "end": "1545690"
  },
  {
    "text": "for us to you know be able to access",
    "start": "1545690",
    "end": "1547940"
  },
  {
    "text": "that anytime anywhere and really support",
    "start": "1547940",
    "end": "1551060"
  },
  {
    "text": "your growth",
    "start": "1551060",
    "end": "1551390"
  },
  {
    "text": "absolutely okay awesome thanks for",
    "start": "1551390",
    "end": "1553760"
  },
  {
    "text": "coming and talking with us Barry thank",
    "start": "1553760",
    "end": "1555170"
  },
  {
    "text": "you and thanks for watching this is my",
    "start": "1555170",
    "end": "1557150"
  },
  {
    "text": "architecture",
    "start": "1557150",
    "end": "1559720"
  }
]