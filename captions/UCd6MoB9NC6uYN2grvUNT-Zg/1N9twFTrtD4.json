[
  {
    "start": "0",
    "end": "40000"
  },
  {
    "text": "Welcome to 'Back to Basics',\nI'm Gonzalo Ron. ",
    "start": "5453",
    "end": "8687"
  },
  {
    "text": "In this episode we're going to talk about",
    "start": "8687",
    "end": "10892"
  },
  {
    "text": "how to manage the communications\nbetween your application services. ",
    "start": "10892",
    "end": "14717"
  },
  {
    "text": "Some time ago, I was developing \na distributed application for an e-commerce website.",
    "start": "14717",
    "end": "20896"
  },
  {
    "text": "In the early days of my development,",
    "start": "20896",
    "end": "24064"
  },
  {
    "text": "I made a mistake of not thinking enough\nabout the communications between the services. ",
    "start": "24064",
    "end": "28250"
  },
  {
    "text": "I ended swimming in problems...\nlike errors that were difficult to debug",
    "start": "28250",
    "end": "33770"
  },
  {
    "text": "and delays that were propagated \nbetween the applications. ",
    "start": "33770",
    "end": "37414"
  },
  {
    "text": "Those were long nights of production support!",
    "start": "37414",
    "end": "40017"
  },
  {
    "start": "40000",
    "end": "78000"
  },
  {
    "text": "One problem I remember was a set\nof synchronous calls between our services.",
    "start": "40017",
    "end": "44849"
  },
  {
    "text": "The user was calling a service to buy a product.",
    "start": "44849",
    "end": "48471"
  },
  {
    "text": "Then this service was orchestrating calls \nto other services to reduce inventory,",
    "start": "48471",
    "end": "53321"
  },
  {
    "text": "charge for the transaction, \nand send some marketing emails. ",
    "start": "53321",
    "end": "57614"
  },
  {
    "text": "The problems started when, for instance, \nthe service to send marketing emails was taking too long!",
    "start": "57614",
    "end": "63142"
  },
  {
    "text": "That delay in the response was \npropagated to the \"buy product service\"",
    "start": "63143",
    "end": "67440"
  },
  {
    "text": "and then to the customer!",
    "start": "67440",
    "end": "69440"
  },
  {
    "text": "Even worse... when the \"marketing service\" was down, \nthe customer just received an error.",
    "start": "69440",
    "end": "74076"
  },
  {
    "text": "Those problems impacted many of our customers.",
    "start": "74076",
    "end": "77048"
  },
  {
    "text": "How could you avoid problems like this?",
    "start": "77049",
    "end": "80081"
  },
  {
    "text": "What about sending messages to an Amazon SQS queue\nto communicate with the \"marketing service\"?",
    "start": "80081",
    "end": "85233"
  },
  {
    "text": "In that way you recover the services\nand return the control to the customer quickly.",
    "start": "85233",
    "end": "90506"
  },
  {
    "text": "Even better; if the marketing service is down, \nthe messages are still in the queue",
    "start": "90506",
    "end": "95563"
  },
  {
    "text": "until the service is back \nand ready to pick up each of them. ",
    "start": "95564",
    "end": "98572"
  },
  {
    "text": "But let's think about something else...",
    "start": "98572",
    "end": "100748"
  },
  {
    "text": "Asynchronous calls are great to simplify \nand de-risk your deployment processes.",
    "start": "100748",
    "end": "105551"
  },
  {
    "start": "103000",
    "end": "182000"
  },
  {
    "text": "For instance, consider this architecture. ",
    "start": "105551",
    "end": "108518"
  },
  {
    "text": "What would be the steps \nto release a new version of your service?",
    "start": "108518",
    "end": "111879"
  },
  {
    "text": "The service is going down \nand the messages sent by the client",
    "start": "111879",
    "end": "115948"
  },
  {
    "text": "start accumulating in the queue.",
    "start": "115948",
    "end": "117998"
  },
  {
    "text": "Then you deploy your new version of the service \nand it starts consuming those messages. ",
    "start": "117998",
    "end": "122849"
  },
  {
    "text": "You are not producing any downtime. ",
    "start": "122849",
    "end": "125974"
  },
  {
    "text": "This is an example of how Amazon SQS \ncould help you to make your deployments more reliable. ",
    "start": "125974",
    "end": "130923"
  },
  {
    "text": "There are many patterns for asynchronous communications. ",
    "start": "130924",
    "end": "134069"
  },
  {
    "text": "You can have one to one communications \nusing a queue with Amazon SQS,",
    "start": "134070",
    "end": "139335"
  },
  {
    "text": "or you can have one to many communications \nusing services like Amazon Simple Notification service ",
    "start": "139335",
    "end": "145644"
  },
  {
    "text": "or Amazon EventBridge.",
    "start": "145644",
    "end": "147877"
  },
  {
    "text": "They can help you to simplify \nyour distributed applications. ",
    "start": "147878",
    "end": "151552"
  },
  {
    "text": "Sometimes you want to have synchronous communications. ",
    "start": "151552",
    "end": "154613"
  },
  {
    "text": "For instance, if you have hard real-time distributed systems.",
    "start": "154613",
    "end": "159146"
  },
  {
    "text": "In those cases, it's important to avoid \npropagating delays and errors between your applications.",
    "start": "159146",
    "end": "165425"
  },
  {
    "text": "That's why it's important to review \nthe time-outs in those communications. ",
    "start": "166930",
    "end": "171808"
  },
  {
    "text": "And also, implement a concept called circuit breakers. ",
    "start": "171808",
    "end": "175774"
  },
  {
    "text": "The circuit breaker's pattern is about \nwrapping a call into an object.",
    "start": "175774",
    "end": "179526"
  },
  {
    "text": "This object can be used to monitor for failures.",
    "start": "179526",
    "end": "183158"
  },
  {
    "start": "182000",
    "end": "213000"
  },
  {
    "text": "When the failures reach a threshold, \nthe circuit breaker trips ",
    "start": "183158",
    "end": "187251"
  },
  {
    "text": "and the next calls automatically return with an error",
    "start": "187251",
    "end": "190283"
  },
  {
    "text": "without propagating any delays to the client.  ",
    "start": "190283",
    "end": "192939"
  },
  {
    "text": "You could implement circuit breakers \nby yourself or using any library in the market. ",
    "start": "192939",
    "end": "198243"
  },
  {
    "text": "However, when you scale to hundreds \nof applications,",
    "start": "198244",
    "end": "202061"
  },
  {
    "text": "the changes in your code and configurations \ncould become very challenging. ",
    "start": "202061",
    "end": "206966"
  },
  {
    "text": "A better option could be letting \na service-mesh handle the circuit breakers for you.",
    "start": "206966",
    "end": "212346"
  },
  {
    "text": "A service-mesh is a software layer \nthat can handle all the communications for your services.",
    "start": "212346",
    "end": "218316"
  },
  {
    "start": "213000",
    "end": "235000"
  },
  {
    "text": "It has features like circuit breakers, \nhealth checks, and retries.",
    "start": "218317",
    "end": "223594"
  },
  {
    "text": "AWS has a service for this that is called AWS App Mesh. ",
    "start": "223594",
    "end": "228336"
  },
  {
    "text": "AWS App Mesh is a service that helps you \nto config, control, and monitor your services",
    "start": "228336",
    "end": "234857"
  },
  {
    "text": "without making any code changes. ",
    "start": "234857",
    "end": "237745"
  },
  {
    "start": "235000",
    "end": "299000"
  },
  {
    "text": "AWS App Mesh configures services \nso you can explore monitoring data,",
    "start": "237745",
    "end": "243108"
  },
  {
    "text": "metrics, and logs into CloudWatch.",
    "start": "243108",
    "end": "246870"
  },
  {
    "text": "It highly simplifies your visibility and communications. ",
    "start": "246870",
    "end": "250922"
  },
  {
    "text": "In this pattern, every member of your service has a proxy",
    "start": "250922",
    "end": "255245"
  },
  {
    "text": "that in the case of AWS App Mesh, \nis an open source tool called Envoy.",
    "start": "255245",
    "end": "260596"
  },
  {
    "text": "This proxy abstracts the network communication for your services.",
    "start": "260597",
    "end": "265275"
  },
  {
    "text": "It's essential to take the time to think \nabout the communication between your services. ",
    "start": "265276",
    "end": "269768"
  },
  {
    "text": "In both cases, synchronous or asynchronous communications,",
    "start": "269768",
    "end": "274112"
  },
  {
    "text": "I recommend using high level of extractions \nand take advantage of available services.",
    "start": "274112",
    "end": "279439"
  },
  {
    "text": "Click the links below for more information. ",
    "start": "279439",
    "end": "283276"
  },
  {
    "text": "Thank you for watching 'Back to Basics'. ",
    "start": "283276",
    "end": "286001"
  },
  {
    "text": "See you next time. ",
    "start": "286001",
    "end": "287465"
  }
]