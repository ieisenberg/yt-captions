[
  {
    "text": "hello and welcome to connecting devices",
    "start": "0",
    "end": "2190"
  },
  {
    "text": "to AWS IOT core a part of the AWS",
    "start": "2190",
    "end": "5460"
  },
  {
    "text": "innovate online conference",
    "start": "5460",
    "end": "7170"
  },
  {
    "text": "my name is simit Nambiar and we are",
    "start": "7170",
    "end": "9510"
  },
  {
    "text": "going to explore how you can connect",
    "start": "9510",
    "end": "11160"
  },
  {
    "text": "your devices to AWS IOT for many of you",
    "start": "11160",
    "end": "14759"
  },
  {
    "text": "this may be quite new so we will share a",
    "start": "14759",
    "end": "17789"
  },
  {
    "text": "short demonstration of a micro",
    "start": "17789",
    "end": "19590"
  },
  {
    "text": "controller running Amazon free orders",
    "start": "19590",
    "end": "21600"
  },
  {
    "text": "connecting to a tablet IOT at the end of",
    "start": "21600",
    "end": "24390"
  },
  {
    "text": "this session we hope that by the end of",
    "start": "24390",
    "end": "27660"
  },
  {
    "text": "your time together you will have",
    "start": "27660",
    "end": "29609"
  },
  {
    "text": "developed an appreciation of the",
    "start": "29609",
    "end": "31410"
  },
  {
    "text": "different ways in which you can connect",
    "start": "31410",
    "end": "33149"
  },
  {
    "text": "your devices to the AWS iot platform so",
    "start": "33149",
    "end": "36660"
  },
  {
    "text": "let's get started if you knew the state",
    "start": "36660",
    "end": "40200"
  },
  {
    "text": "of everything and could reason on top of",
    "start": "40200",
    "end": "43020"
  },
  {
    "text": "that data what problems would you solve",
    "start": "43020",
    "end": "45329"
  },
  {
    "text": "a w sy o T's mission is to help",
    "start": "45329",
    "end": "48570"
  },
  {
    "text": "customers know the state of their",
    "start": "48570",
    "end": "50250"
  },
  {
    "text": "devices and help them reason on top of",
    "start": "50250",
    "end": "52890"
  },
  {
    "text": "the data so that customers can get",
    "start": "52890",
    "end": "55440"
  },
  {
    "text": "deeper insights and solve their business",
    "start": "55440",
    "end": "57120"
  },
  {
    "text": "problems in this session I will focus on",
    "start": "57120",
    "end": "61109"
  },
  {
    "text": "how we help our customers to know the",
    "start": "61109",
    "end": "63390"
  },
  {
    "text": "state of everything the SDKs libraries",
    "start": "63390",
    "end": "67490"
  },
  {
    "text": "frameworks and even operating systems",
    "start": "67490",
    "end": "70049"
  },
  {
    "text": "that we provide to seamlessly connect a",
    "start": "70049",
    "end": "72540"
  },
  {
    "text": "wide array of devices to AWS IOT let us",
    "start": "72540",
    "end": "77070"
  },
  {
    "text": "start by looking at the IOT device",
    "start": "77070",
    "end": "78930"
  },
  {
    "text": "landscape at one end of the spectrum we",
    "start": "78930",
    "end": "82110"
  },
  {
    "text": "have microcontroller or MCU based",
    "start": "82110",
    "end": "84450"
  },
  {
    "text": "devices a microcontroller",
    "start": "84450",
    "end": "86820"
  },
  {
    "text": "is a single chip containing a simple",
    "start": "86820",
    "end": "89189"
  },
  {
    "text": "processor that can be found in many",
    "start": "89189",
    "end": "91590"
  },
  {
    "text": "devices MCS frequently run operating",
    "start": "91590",
    "end": "95040"
  },
  {
    "text": "systems which do not have built-in",
    "start": "95040",
    "end": "97020"
  },
  {
    "text": "functionality to connect to local",
    "start": "97020",
    "end": "98729"
  },
  {
    "text": "networks or the cloud making IOT",
    "start": "98729",
    "end": "101490"
  },
  {
    "text": "applications a real challenge Amazon",
    "start": "101490",
    "end": "105270"
  },
  {
    "text": "free adders helps solve this problem by",
    "start": "105270",
    "end": "108210"
  },
  {
    "text": "providing both the core operating system",
    "start": "108210",
    "end": "110220"
  },
  {
    "text": "as well as software libraries that make",
    "start": "110220",
    "end": "112350"
  },
  {
    "text": "it easy to securely connect to the cloud",
    "start": "112350",
    "end": "114920"
  },
  {
    "text": "so that you can collect data from IOT",
    "start": "114920",
    "end": "118740"
  },
  {
    "text": "devices and take action amazon free at",
    "start": "118740",
    "end": "122850"
  },
  {
    "text": "AWS is based on the free RS kernel a",
    "start": "122850",
    "end": "125430"
  },
  {
    "text": "popular open source operating system for",
    "start": "125430",
    "end": "128039"
  },
  {
    "text": "microcontrollers and extends it with",
    "start": "128039",
    "end": "130739"
  },
  {
    "text": "software libraries that make it easy to",
    "start": "130739",
    "end": "132720"
  },
  {
    "text": "securely connect",
    "start": "132720",
    "end": "133900"
  },
  {
    "text": "dear small low-power devices to AWS",
    "start": "133900",
    "end": "136840"
  },
  {
    "text": "cloud services like AWS IOT core onto",
    "start": "136840",
    "end": "140080"
  },
  {
    "text": "more powerful edge devices running a",
    "start": "140080",
    "end": "142540"
  },
  {
    "text": "tablet screen class microcontrollers are",
    "start": "142540",
    "end": "146500"
  },
  {
    "text": "used widely in different industries and",
    "start": "146500",
    "end": "148569"
  },
  {
    "text": "in a range of applications including",
    "start": "148569",
    "end": "150280"
  },
  {
    "text": "home appliances sensors fitness trackers",
    "start": "150280",
    "end": "153670"
  },
  {
    "text": "industrial automation and automobiles",
    "start": "153670",
    "end": "157319"
  },
  {
    "text": "Amazon free arrows provides everything",
    "start": "157319",
    "end": "159940"
  },
  {
    "text": "you need to easily program connected",
    "start": "159940",
    "end": "162370"
  },
  {
    "text": "microcontroller based devices and",
    "start": "162370",
    "end": "164440"
  },
  {
    "text": "collect data from them for IOT",
    "start": "164440",
    "end": "166690"
  },
  {
    "text": "applications you can get started by",
    "start": "166690",
    "end": "169780"
  },
  {
    "text": "choosing a microcontroller that fully",
    "start": "169780",
    "end": "171459"
  },
  {
    "text": "supports Amazon free RS features and",
    "start": "171459",
    "end": "173560"
  },
  {
    "text": "capabilities from trusted providers like",
    "start": "173560",
    "end": "176500"
  },
  {
    "text": "s perceive microchip and XP",
    "start": "176500",
    "end": "179739"
  },
  {
    "text": "semiconductors stmicroelectronics Texas",
    "start": "179739",
    "end": "182950"
  },
  {
    "text": "Instruments or others from the Amazon",
    "start": "182950",
    "end": "185590"
  },
  {
    "text": "free arthas qualification program now",
    "start": "185590",
    "end": "188650"
  },
  {
    "text": "why is this important we can say from",
    "start": "188650",
    "end": "191829"
  },
  {
    "text": "our experience that porting applications",
    "start": "191829",
    "end": "194290"
  },
  {
    "text": "to different microcontroller",
    "start": "194290",
    "end": "195609"
  },
  {
    "text": "architectures is really hard and a",
    "start": "195609",
    "end": "197980"
  },
  {
    "text": "time-consuming process I still remember",
    "start": "197980",
    "end": "200829"
  },
  {
    "text": "the time when I had spent a month in",
    "start": "200829",
    "end": "203470"
  },
  {
    "text": "troubleshooting while moving an embedded",
    "start": "203470",
    "end": "205900"
  },
  {
    "text": "application to a different architecture",
    "start": "205900",
    "end": "207750"
  },
  {
    "text": "only to realize that it was just a flag",
    "start": "207750",
    "end": "210519"
  },
  {
    "text": "to the compiler that I had missed while",
    "start": "210519",
    "end": "212829"
  },
  {
    "text": "cross compiling with Amazon free our US",
    "start": "212829",
    "end": "216419"
  },
  {
    "text": "customers do not have to spend months",
    "start": "216419",
    "end": "218889"
  },
  {
    "text": "porting anymore and can now focus more",
    "start": "218889",
    "end": "221440"
  },
  {
    "text": "on building great features into their",
    "start": "221440",
    "end": "223359"
  },
  {
    "text": "products leaving the heavy lifting to us",
    "start": "223359",
    "end": "226859"
  },
  {
    "text": "we have another class of devices that",
    "start": "226859",
    "end": "229510"
  },
  {
    "text": "might not necessarily be running free",
    "start": "229510",
    "end": "231579"
  },
  {
    "text": "orders but would still need to connect",
    "start": "231579",
    "end": "234280"
  },
  {
    "text": "seamlessly to the AWS IOT core the AWC",
    "start": "234280",
    "end": "237790"
  },
  {
    "text": "iot devices DK helps you to easily and",
    "start": "237790",
    "end": "240940"
  },
  {
    "text": "quickly connect your hardware device to",
    "start": "240940",
    "end": "242859"
  },
  {
    "text": "AWS I or T it provides enhanced features",
    "start": "242859",
    "end": "246160"
  },
  {
    "text": "so that your hardware device can",
    "start": "246160",
    "end": "248410"
  },
  {
    "text": "seamlessly and securely work with device",
    "start": "248410",
    "end": "250870"
  },
  {
    "text": "gateway and device sharrows these SDKs",
    "start": "250870",
    "end": "254349"
  },
  {
    "text": "include open source libraries developer",
    "start": "254349",
    "end": "256989"
  },
  {
    "text": "guides with samples and porting guides",
    "start": "256989",
    "end": "259239"
  },
  {
    "text": "so that you can build innovative IOT",
    "start": "259239",
    "end": "262300"
  },
  {
    "text": "products or solutions on your choice of",
    "start": "262300",
    "end": "264280"
  },
  {
    "text": "hardware platforms",
    "start": "264280",
    "end": "266610"
  },
  {
    "text": "the alias IOT SDKs are available in",
    "start": "266610",
    "end": "269310"
  },
  {
    "text": "various high-level programming languages",
    "start": "269310",
    "end": "271349"
  },
  {
    "text": "like C C++ Java JavaScript and Python we",
    "start": "271349",
    "end": "277379"
  },
  {
    "text": "also provide mobile SDKs for Android and",
    "start": "277379",
    "end": "280050"
  },
  {
    "text": "iOS which can be used to talk to their",
    "start": "280050",
    "end": "282599"
  },
  {
    "text": "wlt curve up next we have those more",
    "start": "282599",
    "end": "287250"
  },
  {
    "text": "powerful devices that act as smart comm",
    "start": "287250",
    "end": "289349"
  },
  {
    "text": "hubs or industrial gateways that require",
    "start": "289349",
    "end": "291750"
  },
  {
    "text": "much more functionality than just",
    "start": "291750",
    "end": "294030"
  },
  {
    "text": "connecting to the AWS IOT core to send",
    "start": "294030",
    "end": "296879"
  },
  {
    "text": "and receive messages AWS green grass is",
    "start": "296879",
    "end": "300509"
  },
  {
    "text": "software that lets you run local compute",
    "start": "300509",
    "end": "303150"
  },
  {
    "text": "messaging data caching sync and machine",
    "start": "303150",
    "end": "306629"
  },
  {
    "text": "learning inference capabilities for",
    "start": "306629",
    "end": "308729"
  },
  {
    "text": "connected devices in a secure way with",
    "start": "308729",
    "end": "311520"
  },
  {
    "text": "Greengrass connected devices can run a",
    "start": "311520",
    "end": "314370"
  },
  {
    "text": "double use lambda functions locally keep",
    "start": "314370",
    "end": "317009"
  },
  {
    "text": "device data in sync and communicate with",
    "start": "317009",
    "end": "319740"
  },
  {
    "text": "other devices securely even when not",
    "start": "319740",
    "end": "322590"
  },
  {
    "text": "connected to the Internet",
    "start": "322590",
    "end": "325069"
  },
  {
    "text": "using lambda Greengrass ensures your IOT",
    "start": "325069",
    "end": "328949"
  },
  {
    "text": "devices can respond quickly to local",
    "start": "328949",
    "end": "331289"
  },
  {
    "text": "events use lambda functions running on",
    "start": "331289",
    "end": "333599"
  },
  {
    "text": "Greengrass core to interact with local",
    "start": "333599",
    "end": "335849"
  },
  {
    "text": "resources operate with intermittent",
    "start": "335849",
    "end": "338310"
  },
  {
    "text": "connections stay updated with",
    "start": "338310",
    "end": "340259"
  },
  {
    "text": "over-the-air updates and minimize the",
    "start": "340259",
    "end": "342779"
  },
  {
    "text": "cost of transmitting IOT data to the",
    "start": "342779",
    "end": "344580"
  },
  {
    "text": "cloud Greengrass has support for",
    "start": "344580",
    "end": "348449"
  },
  {
    "text": "different operating systems and CPU",
    "start": "348449",
    "end": "350400"
  },
  {
    "text": "architectures with amazon linux support",
    "start": "350400",
    "end": "353370"
  },
  {
    "text": "you could even run green grass courts on",
    "start": "353370",
    "end": "355500"
  },
  {
    "text": "the AWS cloud as I said before green",
    "start": "355500",
    "end": "360389"
  },
  {
    "text": "grass supports lambda functions and you",
    "start": "360389",
    "end": "362520"
  },
  {
    "text": "can write these functions in Python",
    "start": "362520",
    "end": "363960"
  },
  {
    "text": "node.js and Charma now that we have seen",
    "start": "363960",
    "end": "368819"
  },
  {
    "text": "the device landscape SDKs and tools you",
    "start": "368819",
    "end": "371460"
  },
  {
    "text": "can use let us see how they connect to",
    "start": "371460",
    "end": "373860"
  },
  {
    "text": "the alw Scioto curve on the left hand",
    "start": "373860",
    "end": "376740"
  },
  {
    "text": "side we see the edge devices using the",
    "start": "376740",
    "end": "379349"
  },
  {
    "text": "IOT devices decay amazon free arrows and",
    "start": "379349",
    "end": "382050"
  },
  {
    "text": "green grass to connect to the AWS I or",
    "start": "382050",
    "end": "384210"
  },
  {
    "text": "II code you can also see some of the",
    "start": "384210",
    "end": "386819"
  },
  {
    "text": "devices connecting to AWS Greengrass",
    "start": "386819",
    "end": "389009"
  },
  {
    "text": "without connecting directly to the cloud",
    "start": "389009",
    "end": "391259"
  },
  {
    "text": "platform we will now explore the",
    "start": "391259",
    "end": "394889"
  },
  {
    "text": "different components that make up the",
    "start": "394889",
    "end": "396360"
  },
  {
    "text": "AWS IOT core like the message broker the",
    "start": "396360",
    "end": "398969"
  },
  {
    "text": "rules engine and",
    "start": "398969",
    "end": "400260"
  },
  {
    "text": "shadows LW Scioto coal is a managed",
    "start": "400260",
    "end": "404490"
  },
  {
    "text": "cloud platform that lets connected",
    "start": "404490",
    "end": "406650"
  },
  {
    "text": "devices easily and securely interact",
    "start": "406650",
    "end": "409080"
  },
  {
    "text": "with cloud applications and other",
    "start": "409080",
    "end": "410550"
  },
  {
    "text": "devices the IOT core allows you to",
    "start": "410550",
    "end": "414090"
  },
  {
    "text": "easily connect devices to the cloud and",
    "start": "414090",
    "end": "416160"
  },
  {
    "text": "to other devices it supports HTTP web",
    "start": "416160",
    "end": "420060"
  },
  {
    "text": "sockets and mqtt that is the message",
    "start": "420060",
    "end": "422700"
  },
  {
    "text": "queue telemetry transport lightweight",
    "start": "422700",
    "end": "425190"
  },
  {
    "text": "communication protocols specifically",
    "start": "425190",
    "end": "427230"
  },
  {
    "text": "designed to tolerate intermittent",
    "start": "427230",
    "end": "429090"
  },
  {
    "text": "connections minimize the code footprint",
    "start": "429090",
    "end": "431490"
  },
  {
    "text": "on devices and to radius network",
    "start": "431490",
    "end": "433620"
  },
  {
    "text": "bandwidth requirements aw society core",
    "start": "433620",
    "end": "437400"
  },
  {
    "text": "provides mutual authentication and",
    "start": "437400",
    "end": "439320"
  },
  {
    "text": "encryption at all points of a connection",
    "start": "439320",
    "end": "441690"
  },
  {
    "text": "so that data is never exchanged between",
    "start": "441690",
    "end": "444510"
  },
  {
    "text": "devices and AWS IOT core without a",
    "start": "444510",
    "end": "447210"
  },
  {
    "text": "proven identity",
    "start": "447210",
    "end": "448380"
  },
  {
    "text": "it supports AWS method of authentication",
    "start": "448380",
    "end": "451590"
  },
  {
    "text": "called sig v4 X dot 5:09 certificate",
    "start": "451590",
    "end": "455280"
  },
  {
    "text": "based authentication customer created",
    "start": "455280",
    "end": "458070"
  },
  {
    "text": "token-based authentication using custom",
    "start": "458070",
    "end": "460140"
  },
  {
    "text": "authorizes connections using HTTP can",
    "start": "460140",
    "end": "464400"
  },
  {
    "text": "use any of these methods while",
    "start": "464400",
    "end": "466500"
  },
  {
    "text": "connections using MQTT use certificate",
    "start": "466500",
    "end": "468990"
  },
  {
    "text": "based authentication and connections",
    "start": "468990",
    "end": "471300"
  },
  {
    "text": "using WebSockets can use sink before",
    "start": "471300",
    "end": "473730"
  },
  {
    "text": "our customer arises with AWS iot you can",
    "start": "473730",
    "end": "477840"
  },
  {
    "text": "use AWS iot generated certificates as",
    "start": "477840",
    "end": "480360"
  },
  {
    "text": "well as those signed by your preferred",
    "start": "480360",
    "end": "482730"
  },
  {
    "text": "certificate authority or CA you can map",
    "start": "482730",
    "end": "486450"
  },
  {
    "text": "your choice of policies to each",
    "start": "486450",
    "end": "488460"
  },
  {
    "text": "certificate so that you can authorize",
    "start": "488460",
    "end": "490950"
  },
  {
    "text": "devices or applications to have access",
    "start": "490950",
    "end": "493500"
  },
  {
    "text": "or change your mind and revoke access",
    "start": "493500",
    "end": "495600"
  },
  {
    "text": "altogether without ever touching the",
    "start": "495600",
    "end": "497820"
  },
  {
    "text": "device you can create deploy and manage",
    "start": "497820",
    "end": "501660"
  },
  {
    "text": "certificates and policies for the",
    "start": "501660",
    "end": "503610"
  },
  {
    "text": "devices from the console or using the",
    "start": "503610",
    "end": "505890"
  },
  {
    "text": "API those device certificates can be",
    "start": "505890",
    "end": "508890"
  },
  {
    "text": "provisioned activated and associated",
    "start": "508890",
    "end": "511650"
  },
  {
    "text": "with relevant iot policies that are",
    "start": "511650",
    "end": "513930"
  },
  {
    "text": "configured using AWS iot this allows you",
    "start": "513930",
    "end": "517800"
  },
  {
    "text": "to instantly revoke access for an",
    "start": "517800",
    "end": "519570"
  },
  {
    "text": "individual device if you choose to do so",
    "start": "519570",
    "end": "523400"
  },
  {
    "text": "when you receive data from devices at",
    "start": "523400",
    "end": "526170"
  },
  {
    "text": "scale you would want it to be seamlessly",
    "start": "526170",
    "end": "528720"
  },
  {
    "text": "routed to your applications or other AWS",
    "start": "528720",
    "end": "531000"
  },
  {
    "text": "services you can do this without",
    "start": "531000",
    "end": "533910"
  },
  {
    "text": "writing a single line of code using the",
    "start": "533910",
    "end": "536430"
  },
  {
    "text": "rules engine the rules engine within the",
    "start": "536430",
    "end": "539010"
  },
  {
    "text": "AWS IOT core can filter transform and",
    "start": "539010",
    "end": "542340"
  },
  {
    "text": "act upon the device data on the fly",
    "start": "542340",
    "end": "544860"
  },
  {
    "text": "based on business rules you define you",
    "start": "544860",
    "end": "548490"
  },
  {
    "text": "can update your rules to implement new",
    "start": "548490",
    "end": "550710"
  },
  {
    "text": "device and application features at any",
    "start": "550710",
    "end": "552780"
  },
  {
    "text": "time",
    "start": "552780",
    "end": "554120"
  },
  {
    "text": "AWS IOT core makes it easy to route",
    "start": "554120",
    "end": "557670"
  },
  {
    "text": "messages to AWS services like AWS lambda",
    "start": "557670",
    "end": "561030"
  },
  {
    "text": "Amazon Kenny C's Amazon s3 Amazon",
    "start": "561030",
    "end": "564420"
  },
  {
    "text": "DynamoDB etc rules give your device's",
    "start": "564420",
    "end": "569220"
  },
  {
    "text": "the ability to interact with AWS",
    "start": "569220",
    "end": "571230"
  },
  {
    "text": "services rules are analyzed and actions",
    "start": "571230",
    "end": "574230"
  },
  {
    "text": "are performed based on the entity topic",
    "start": "574230",
    "end": "576420"
  },
  {
    "text": "stream you can use rules to support",
    "start": "576420",
    "end": "579150"
  },
  {
    "text": "tasks like writing data received from a",
    "start": "579150",
    "end": "582060"
  },
  {
    "text": "device to an Amazon DynamoDB table save",
    "start": "582060",
    "end": "585570"
  },
  {
    "text": "a file to Amazon s3 send a push",
    "start": "585570",
    "end": "588330"
  },
  {
    "text": "notification to all users using Amazon",
    "start": "588330",
    "end": "590700"
  },
  {
    "text": "SNS publish data to an Amazon s qsq",
    "start": "590700",
    "end": "595100"
  },
  {
    "text": "invoke a lambda function to execute your",
    "start": "595100",
    "end": "597780"
  },
  {
    "text": "business logic process messages from a",
    "start": "597780",
    "end": "600720"
  },
  {
    "text": "large number of devices using Amazon",
    "start": "600720",
    "end": "603000"
  },
  {
    "text": "Kinesis send data to the Amazon Elastic",
    "start": "603000",
    "end": "606480"
  },
  {
    "text": "search service or capture a cloud watch",
    "start": "606480",
    "end": "608940"
  },
  {
    "text": "metric send message data to an AWS IOT",
    "start": "608940",
    "end": "612750"
  },
  {
    "text": "analytics channel before AWS iot can",
    "start": "612750",
    "end": "617070"
  },
  {
    "text": "perform these actions you must granted",
    "start": "617070",
    "end": "619170"
  },
  {
    "text": "permission to access your AWS resources",
    "start": "619170",
    "end": "621090"
  },
  {
    "text": "on your behalf when the actions are",
    "start": "621090",
    "end": "624030"
  },
  {
    "text": "performed you incur the standard charges",
    "start": "624030",
    "end": "626550"
  },
  {
    "text": "for AWS services you use an AWD rule",
    "start": "626550",
    "end": "631830"
  },
  {
    "text": "consists of an SQL select statement a",
    "start": "631830",
    "end": "634770"
  },
  {
    "text": "topic filter and a rule action device is",
    "start": "634770",
    "end": "638130"
  },
  {
    "text": "sending information to AWS IOT by",
    "start": "638130",
    "end": "640380"
  },
  {
    "text": "publishing messages to mqtt topics the",
    "start": "640380",
    "end": "643650"
  },
  {
    "text": "sequel select statement allows you to",
    "start": "643650",
    "end": "646110"
  },
  {
    "text": "extract data from an incoming MQTT",
    "start": "646110",
    "end": "648780"
  },
  {
    "text": "message the topic filter of an AWS IOT",
    "start": "648780",
    "end": "651960"
  },
  {
    "text": "rule specifies one or more MQTT topics",
    "start": "651960",
    "end": "655260"
  },
  {
    "text": "the rule is triggered when an empty TD",
    "start": "655260",
    "end": "658140"
  },
  {
    "text": "message is received on a topic that",
    "start": "658140",
    "end": "659760"
  },
  {
    "text": "matches the topic filter rule actions",
    "start": "659760",
    "end": "662970"
  },
  {
    "text": "allow you to take the information",
    "start": "662970",
    "end": "664710"
  },
  {
    "text": "extracted from an mqtt message and",
    "start": "664710",
    "end": "667680"
  },
  {
    "text": "send it to another AWS service rural",
    "start": "667680",
    "end": "670830"
  },
  {
    "text": "actions are defined for a wide set of",
    "start": "670830",
    "end": "672930"
  },
  {
    "text": "AWS services for example by using a",
    "start": "672930",
    "end": "676350"
  },
  {
    "text": "lambda rule you can call other AWS or",
    "start": "676350",
    "end": "679260"
  },
  {
    "text": "third-party web services with AWS IOT",
    "start": "679260",
    "end": "683760"
  },
  {
    "text": "core you can create a persistent virtual",
    "start": "683760",
    "end": "686970"
  },
  {
    "text": "version or device shadow of each device",
    "start": "686970",
    "end": "689910"
  },
  {
    "text": "that includes the devices latest state",
    "start": "689910",
    "end": "692250"
  },
  {
    "text": "so that applications or other devices",
    "start": "692250",
    "end": "695430"
  },
  {
    "text": "can read messages and interact with the",
    "start": "695430",
    "end": "697860"
  },
  {
    "text": "device the device shadow passes the last",
    "start": "697860",
    "end": "701430"
  },
  {
    "text": "reported state and the desired future",
    "start": "701430",
    "end": "703770"
  },
  {
    "text": "state of each device when the device is",
    "start": "703770",
    "end": "706230"
  },
  {
    "text": "offline you can retrieve the last",
    "start": "706230",
    "end": "708750"
  },
  {
    "text": "reported state of the device or a set of",
    "start": "708750",
    "end": "710730"
  },
  {
    "text": "desired future State through the API or",
    "start": "710730",
    "end": "713370"
  },
  {
    "text": "using the rules engine the device shadow",
    "start": "713370",
    "end": "716430"
  },
  {
    "text": "makes it easier to build applications",
    "start": "716430",
    "end": "719010"
  },
  {
    "text": "that interact with your devices by",
    "start": "719010",
    "end": "721110"
  },
  {
    "text": "providing always available REST API s in",
    "start": "721110",
    "end": "724350"
  },
  {
    "text": "addition applications can set the",
    "start": "724350",
    "end": "726930"
  },
  {
    "text": "desired future state of a device without",
    "start": "726930",
    "end": "728730"
  },
  {
    "text": "accounting for the device's current",
    "start": "728730",
    "end": "730620"
  },
  {
    "text": "state aw Scioto core will compare the",
    "start": "730620",
    "end": "734730"
  },
  {
    "text": "difference between the desired and the",
    "start": "734730",
    "end": "736620"
  },
  {
    "text": "last reported state and command the",
    "start": "736620",
    "end": "738810"
  },
  {
    "text": "device to make up the difference the AWS",
    "start": "738810",
    "end": "742020"
  },
  {
    "text": "IOT devices DK makes it easy for your",
    "start": "742020",
    "end": "744570"
  },
  {
    "text": "device to synchronize it straight with",
    "start": "744570",
    "end": "746700"
  },
  {
    "text": "its device shadow by providing high",
    "start": "746700",
    "end": "748800"
  },
  {
    "text": "level API to interact with the device",
    "start": "748800",
    "end": "750779"
  },
  {
    "text": "Shadow the device shadow lets you store",
    "start": "750779",
    "end": "755070"
  },
  {
    "text": "the state of your devices for up to a",
    "start": "755070",
    "end": "756839"
  },
  {
    "text": "year for free the device shadow passes",
    "start": "756839",
    "end": "759900"
  },
  {
    "text": "forever if you update them at least once",
    "start": "759900",
    "end": "762540"
  },
  {
    "text": "per year otherwise they expire now that",
    "start": "762540",
    "end": "767430"
  },
  {
    "text": "we have seen the a IOT device ecosystem",
    "start": "767430",
    "end": "770310"
  },
  {
    "text": "and how various libraries and tools help",
    "start": "770310",
    "end": "772770"
  },
  {
    "text": "to make it so simple to connect your",
    "start": "772770",
    "end": "774779"
  },
  {
    "text": "devices to AWS IOT let us dive a bit",
    "start": "774779",
    "end": "777329"
  },
  {
    "text": "deeper to understand how it all works",
    "start": "777329",
    "end": "780410"
  },
  {
    "text": "there are three things that needs to be",
    "start": "780410",
    "end": "783000"
  },
  {
    "text": "in place for a thing to successfully",
    "start": "783000",
    "end": "785130"
  },
  {
    "text": "connect to send and receive messages to",
    "start": "785130",
    "end": "787260"
  },
  {
    "text": "the IOT core 1 authentication the thing",
    "start": "787260",
    "end": "792270"
  },
  {
    "text": "would be to prove its identity 2",
    "start": "792270",
    "end": "796730"
  },
  {
    "text": "authorization the thing would need to",
    "start": "796730",
    "end": "800040"
  },
  {
    "text": "have the right permission",
    "start": "800040",
    "end": "801180"
  },
  {
    "text": "in place finally you will use one of the",
    "start": "801180",
    "end": "804630"
  },
  {
    "text": "SDKs Amazon free our das our AWS",
    "start": "804630",
    "end": "807600"
  },
  {
    "text": "Greengrass to connect to the IOT core",
    "start": "807600",
    "end": "811040"
  },
  {
    "text": "each connected device must have a",
    "start": "811040",
    "end": "813780"
  },
  {
    "text": "credential to access the message broker",
    "start": "813780",
    "end": "815610"
  },
  {
    "text": "or the device shadow service all traffic",
    "start": "815610",
    "end": "818760"
  },
  {
    "text": "to and from AWS IOT must be encrypted",
    "start": "818760",
    "end": "821580"
  },
  {
    "text": "our transport layer security or TLS",
    "start": "821580",
    "end": "824900"
  },
  {
    "text": "device credentials must be kept safe in",
    "start": "824900",
    "end": "828210"
  },
  {
    "text": "order to send data securely to the",
    "start": "828210",
    "end": "830220"
  },
  {
    "text": "message broker AWS cloud security",
    "start": "830220",
    "end": "833220"
  },
  {
    "text": "mechanisms product data as it moves",
    "start": "833220",
    "end": "835500"
  },
  {
    "text": "between AWS IOT and other devices or AWS",
    "start": "835500",
    "end": "838680"
  },
  {
    "text": "services devices connect using your",
    "start": "838680",
    "end": "842610"
  },
  {
    "text": "choice of identity or a secure",
    "start": "842610",
    "end": "844320"
  },
  {
    "text": "connection according to the AWS IOT",
    "start": "844320",
    "end": "846420"
  },
  {
    "text": "connection model AWS IOT allows you to",
    "start": "846420",
    "end": "849750"
  },
  {
    "text": "define custom authorizes that allows you",
    "start": "849750",
    "end": "852210"
  },
  {
    "text": "to manage your own authentication and",
    "start": "852210",
    "end": "854130"
  },
  {
    "text": "authorization strategy using a custom",
    "start": "854130",
    "end": "856410"
  },
  {
    "text": "authentication service and a lambda",
    "start": "856410",
    "end": "858150"
  },
  {
    "text": "function when using custom",
    "start": "858150",
    "end": "860610"
  },
  {
    "text": "authentication a customer to riser is",
    "start": "860610",
    "end": "862950"
  },
  {
    "text": "responsible for authenticating your",
    "start": "862950",
    "end": "865080"
  },
  {
    "text": "devices and providing an AWS IOT or iam",
    "start": "865080",
    "end": "868440"
  },
  {
    "text": "policy to authorize actions in your",
    "start": "868440",
    "end": "870600"
  },
  {
    "text": "account when using AWS IOT",
    "start": "870600",
    "end": "873420"
  },
  {
    "text": "authentication the message broker",
    "start": "873420",
    "end": "875390"
  },
  {
    "text": "authenticates and authorizes all actions",
    "start": "875390",
    "end": "878130"
  },
  {
    "text": "in your account the message broker is",
    "start": "878130",
    "end": "880980"
  },
  {
    "text": "responsible for authenticating your",
    "start": "880980",
    "end": "882930"
  },
  {
    "text": "devices securely ingesting device data",
    "start": "882930",
    "end": "885510"
  },
  {
    "text": "and adhering to the access permission",
    "start": "885510",
    "end": "888240"
  },
  {
    "text": "you place on devices using policies",
    "start": "888240",
    "end": "892490"
  },
  {
    "text": "authentication in a doubly as IOT from a",
    "start": "892490",
    "end": "894930"
  },
  {
    "text": "device's perspective is done mostly by",
    "start": "894930",
    "end": "897240"
  },
  {
    "text": "our TLS mutual authentication using X",
    "start": "897240",
    "end": "900090"
  },
  {
    "text": "dot 5:09 certificates AWS IOT core",
    "start": "900090",
    "end": "903750"
  },
  {
    "text": "provides device certificates which can",
    "start": "903750",
    "end": "906000"
  },
  {
    "text": "be used by the devices to authenticate",
    "start": "906000",
    "end": "907950"
  },
  {
    "text": "to the platform customers can also bring",
    "start": "907950",
    "end": "910950"
  },
  {
    "text": "their own certificates and use device",
    "start": "910950",
    "end": "912840"
  },
  {
    "text": "certificates why are the just-in-time",
    "start": "912840",
    "end": "914460"
  },
  {
    "text": "provisioning feature of AWS IOT the next",
    "start": "914460",
    "end": "919530"
  },
  {
    "text": "step is authorization once the thing or",
    "start": "919530",
    "end": "923610"
  },
  {
    "text": "device has authenticated it has",
    "start": "923610",
    "end": "925740"
  },
  {
    "text": "essentially proved to the AWS iot",
    "start": "925740",
    "end": "928020"
  },
  {
    "text": "platform its identity now a TLS secured",
    "start": "928020",
    "end": "931950"
  },
  {
    "text": "transport has been established in the",
    "start": "931950",
    "end": "934050"
  },
  {
    "text": "process",
    "start": "934050",
    "end": "934540"
  },
  {
    "text": "the next step would be to use mqtt to",
    "start": "934540",
    "end": "937959"
  },
  {
    "text": "connect to the AWS IOT core or the",
    "start": "937959",
    "end": "940360"
  },
  {
    "text": "secure transport but to actually connect",
    "start": "940360",
    "end": "944560"
  },
  {
    "text": "via MQTT to the platform the thing needs",
    "start": "944560",
    "end": "947529"
  },
  {
    "text": "to have an IOT policy attached to its",
    "start": "947529",
    "end": "950550"
  },
  {
    "text": "x.509 certificates which will describe",
    "start": "950550",
    "end": "953440"
  },
  {
    "text": "the various operations it can perform",
    "start": "953440",
    "end": "955990"
  },
  {
    "text": "once authenticated this is called",
    "start": "955990",
    "end": "959170"
  },
  {
    "text": "authorization authorization essentially",
    "start": "959170",
    "end": "961839"
  },
  {
    "text": "defines what a thing can do once it's",
    "start": "961839",
    "end": "964480"
  },
  {
    "text": "successfully connects to their wiat",
    "start": "964480",
    "end": "966279"
  },
  {
    "text": "platform an AWS iot policy is a JSON",
    "start": "966279",
    "end": "971139"
  },
  {
    "text": "document that contains one or more",
    "start": "971139",
    "end": "973240"
  },
  {
    "text": "policy statement each statement contains",
    "start": "973240",
    "end": "976389"
  },
  {
    "text": "an effect an action and a resource the",
    "start": "976389",
    "end": "979690"
  },
  {
    "text": "effect specifies whether the action is",
    "start": "979690",
    "end": "982300"
  },
  {
    "text": "allowed or denied the action specifies",
    "start": "982300",
    "end": "985540"
  },
  {
    "text": "the action the policies allowing or",
    "start": "985540",
    "end": "988149"
  },
  {
    "text": "denied the resource specifies the",
    "start": "988149",
    "end": "991480"
  },
  {
    "text": "resource or resources on which the",
    "start": "991480",
    "end": "994000"
  },
  {
    "text": "action is allowed or denied the policy",
    "start": "994000",
    "end": "997570"
  },
  {
    "text": "in this example grants the vehicle",
    "start": "997570",
    "end": "999550"
  },
  {
    "text": "permission to connect to the AWS IOT",
    "start": "999550",
    "end": "1002040"
  },
  {
    "text": "message broker using a particular client",
    "start": "1002040",
    "end": "1004230"
  },
  {
    "text": "ID and restricts the device to publish",
    "start": "1004230",
    "end": "1007110"
  },
  {
    "text": "on a specific mqtt topic vehicle /",
    "start": "1007110",
    "end": "1010709"
  },
  {
    "text": "vehicle ID / position they follow the",
    "start": "1010709",
    "end": "1014160"
  },
  {
    "text": "same conventions as I am policies AWS",
    "start": "1014160",
    "end": "1018089"
  },
  {
    "text": "IOT defines a set of policy actions that",
    "start": "1018089",
    "end": "1021060"
  },
  {
    "text": "describe the operations and resources to",
    "start": "1021060",
    "end": "1023819"
  },
  {
    "text": "which you can grant or deny access for",
    "start": "1023819",
    "end": "1026640"
  },
  {
    "text": "example IOT Connect represents",
    "start": "1026640",
    "end": "1029490"
  },
  {
    "text": "permission to connect to the AWS IOT",
    "start": "1029490",
    "end": "1031709"
  },
  {
    "text": "message broker IOT SUBSCRIBE represents",
    "start": "1031709",
    "end": "1035428"
  },
  {
    "text": "permission to subscribe to an end qtt",
    "start": "1035429",
    "end": "1037140"
  },
  {
    "text": "topic or topic filter IOT getting shadow",
    "start": "1037140",
    "end": "1040938"
  },
  {
    "text": "represent permission to gather devices",
    "start": "1040939",
    "end": "1043500"
  },
  {
    "text": "shadow the last step is to use the SDKs",
    "start": "1043500",
    "end": "1047339"
  },
  {
    "text": "and tools as we now know how to",
    "start": "1047339",
    "end": "1050760"
  },
  {
    "text": "authenticate using x.509 certificates",
    "start": "1050760",
    "end": "1053520"
  },
  {
    "text": "and set up a W Scioto policies for",
    "start": "1053520",
    "end": "1055980"
  },
  {
    "text": "authorization we are now ready to",
    "start": "1055980",
    "end": "1058320"
  },
  {
    "text": "connect the device to the AWS IOT course",
    "start": "1058320",
    "end": "1060570"
  },
  {
    "text": "securely and publish our first hello",
    "start": "1060570",
    "end": "1063210"
  },
  {
    "text": "world message using the MQTT protocol",
    "start": "1063210",
    "end": "1065929"
  },
  {
    "text": "let us dive into the ADA",
    "start": "1065929",
    "end": "1068250"
  },
  {
    "text": "yes IOT devices DK to learn about the",
    "start": "1068250",
    "end": "1070590"
  },
  {
    "text": "API that allows us to do that we will be",
    "start": "1070590",
    "end": "1073590"
  },
  {
    "text": "using the AWS IOT devices DK for Python",
    "start": "1073590",
    "end": "1076500"
  },
  {
    "text": "in this example let us create the think",
    "start": "1076500",
    "end": "1080780"
  },
  {
    "text": "certificates and AWS IOT policies using",
    "start": "1080780",
    "end": "1084180"
  },
  {
    "text": "the AWS CLI or command-line interface",
    "start": "1084180",
    "end": "1086970"
  },
  {
    "text": "and link them all up together the create",
    "start": "1086970",
    "end": "1090600"
  },
  {
    "text": "think command is used to create the",
    "start": "1090600",
    "end": "1092730"
  },
  {
    "text": "think record in the AWS IOT registry we",
    "start": "1092730",
    "end": "1096150"
  },
  {
    "text": "have created a bike with the name or",
    "start": "1096150",
    "end": "1098160"
  },
  {
    "text": "bike the JSON document printed on the",
    "start": "1098160",
    "end": "1101910"
  },
  {
    "text": "console just below the creating command",
    "start": "1101910",
    "end": "1104280"
  },
  {
    "text": "is essentially the response received",
    "start": "1104280",
    "end": "1106590"
  },
  {
    "text": "from the platform you can see that a",
    "start": "1106590",
    "end": "1109740"
  },
  {
    "text": "unique thing ID has been created to",
    "start": "1109740",
    "end": "1111960"
  },
  {
    "text": "uniquely identify this thing using the",
    "start": "1111960",
    "end": "1115890"
  },
  {
    "text": "create keys and certificate API we",
    "start": "1115890",
    "end": "1118740"
  },
  {
    "text": "obtain the certificate is required for",
    "start": "1118740",
    "end": "1120900"
  },
  {
    "text": "authentication this is the only time a",
    "start": "1120900",
    "end": "1123870"
  },
  {
    "text": "WSI OT issues the private key for this",
    "start": "1123870",
    "end": "1126870"
  },
  {
    "text": "certificate so it is important to keep",
    "start": "1126870",
    "end": "1129360"
  },
  {
    "text": "it in a secure location we will now",
    "start": "1129360",
    "end": "1132870"
  },
  {
    "text": "create an IOT policy for authorization",
    "start": "1132870",
    "end": "1135290"
  },
  {
    "text": "the policy document we will use to",
    "start": "1135290",
    "end": "1137880"
  },
  {
    "text": "create the policy is called or bike",
    "start": "1137880",
    "end": "1139710"
  },
  {
    "text": "underscore policy toward Jason you can",
    "start": "1139710",
    "end": "1142590"
  },
  {
    "text": "see that the policy is quite liberal and",
    "start": "1142590",
    "end": "1144930"
  },
  {
    "text": "does not lock down the resources and",
    "start": "1144930",
    "end": "1146970"
  },
  {
    "text": "action the device using this certificate",
    "start": "1146970",
    "end": "1148830"
  },
  {
    "text": "can perform however we need to be",
    "start": "1148830",
    "end": "1152100"
  },
  {
    "text": "careful in properly providing access",
    "start": "1152100",
    "end": "1154140"
  },
  {
    "text": "only to the required actions and",
    "start": "1154140",
    "end": "1156570"
  },
  {
    "text": "resources in the IOT policy as you will",
    "start": "1156570",
    "end": "1159510"
  },
  {
    "text": "see later in the example for now this",
    "start": "1159510",
    "end": "1162480"
  },
  {
    "text": "should be okay the next step is to",
    "start": "1162480",
    "end": "1165570"
  },
  {
    "text": "attach the policy to the principle the",
    "start": "1165570",
    "end": "1170160"
  },
  {
    "text": "final step is to attach the thing to the",
    "start": "1170160",
    "end": "1173010"
  },
  {
    "text": "principle although this step is not",
    "start": "1173010",
    "end": "1175290"
  },
  {
    "text": "mandatory and has no effect on the",
    "start": "1175290",
    "end": "1177510"
  },
  {
    "text": "authorization flow but can help you keep",
    "start": "1177510",
    "end": "1180720"
  },
  {
    "text": "track of what principle or certificate",
    "start": "1180720",
    "end": "1183060"
  },
  {
    "text": "is attached to a particular thing on the",
    "start": "1183060",
    "end": "1186750"
  },
  {
    "text": "AWS console you should now be able to",
    "start": "1186750",
    "end": "1189240"
  },
  {
    "text": "see the following relations we have set",
    "start": "1189240",
    "end": "1191370"
  },
  {
    "text": "up why are they a doubly as CLI that is",
    "start": "1191370",
    "end": "1194310"
  },
  {
    "text": "how a principle or certificate is linked",
    "start": "1194310",
    "end": "1197250"
  },
  {
    "text": "to the thing and the policy you can",
    "start": "1197250",
    "end": "1200010"
  },
  {
    "text": "access this on the AWS IOT cont",
    "start": "1200010",
    "end": "1202080"
  },
  {
    "text": "so by navigating to the secure menu on",
    "start": "1202080",
    "end": "1205320"
  },
  {
    "text": "the left hand side and then clicking on",
    "start": "1205320",
    "end": "1207510"
  },
  {
    "text": "the certificate ID which was returned",
    "start": "1207510",
    "end": "1209880"
  },
  {
    "text": "when we receive the certificates to",
    "start": "1209880",
    "end": "1215309"
  },
  {
    "text": "summarize what we have done till now we",
    "start": "1215309",
    "end": "1217980"
  },
  {
    "text": "have created a thing a certificate and",
    "start": "1217980",
    "end": "1220529"
  },
  {
    "text": "an IOT policy using the AWS CLI we have",
    "start": "1220529",
    "end": "1224010"
  },
  {
    "text": "also linked everything together the AWA",
    "start": "1224010",
    "end": "1228360"
  },
  {
    "text": "ot devices TK makes the final step of",
    "start": "1228360",
    "end": "1231360"
  },
  {
    "text": "connecting very simple by hiding the",
    "start": "1231360",
    "end": "1234149"
  },
  {
    "text": "complexity of TLS and MQTT and wrapping",
    "start": "1234149",
    "end": "1237179"
  },
  {
    "text": "it up in a few high-level API calls in",
    "start": "1237179",
    "end": "1241620"
  },
  {
    "text": "this example we have changed the AWS iot",
    "start": "1241620",
    "end": "1244740"
  },
  {
    "text": "policy to lock it down to what the",
    "start": "1244740",
    "end": "1247380"
  },
  {
    "text": "device can do in this case connect using",
    "start": "1247380",
    "end": "1250649"
  },
  {
    "text": "a particular client ID and publish",
    "start": "1250649",
    "end": "1253350"
  },
  {
    "text": "messages to a particular topic in lines",
    "start": "1253350",
    "end": "1256289"
  },
  {
    "text": "three to seven we import the",
    "start": "1256289",
    "end": "1258779"
  },
  {
    "text": "dependencies required for the program in",
    "start": "1258779",
    "end": "1261690"
  },
  {
    "text": "line number ten we instantiate the AWS",
    "start": "1261690",
    "end": "1264690"
  },
  {
    "text": "IOT MQTT client line 30 we set up them",
    "start": "1264690",
    "end": "1268710"
  },
  {
    "text": "QT t endpoint each AWS account will have",
    "start": "1268710",
    "end": "1272220"
  },
  {
    "text": "a unique head point you can find it on",
    "start": "1272220",
    "end": "1274740"
  },
  {
    "text": "the AWS iota console if we visit the",
    "start": "1274740",
    "end": "1277169"
  },
  {
    "text": "settings page this is your custom end",
    "start": "1277169",
    "end": "1280080"
  },
  {
    "text": "point that allows you to connect to a",
    "start": "1280080",
    "end": "1281850"
  },
  {
    "text": "whir T next we configure the AWS IOT",
    "start": "1281850",
    "end": "1286830"
  },
  {
    "text": "root certificate which can be downloaded",
    "start": "1286830",
    "end": "1288720"
  },
  {
    "text": "publicly private key and device",
    "start": "1288720",
    "end": "1291779"
  },
  {
    "text": "certificates which we received when we",
    "start": "1291779",
    "end": "1294059"
  },
  {
    "text": "use the create keys and certificate AWS",
    "start": "1294059",
    "end": "1296820"
  },
  {
    "text": "CLI command we have now configured the",
    "start": "1296820",
    "end": "1300450"
  },
  {
    "text": "client to connect to their wiat platform",
    "start": "1300450",
    "end": "1302909"
  },
  {
    "text": "and once connected can publish messages",
    "start": "1302909",
    "end": "1305789"
  },
  {
    "text": "to the AWS IOT core line 15 we make the",
    "start": "1305789",
    "end": "1310019"
  },
  {
    "text": "connect call once connected we publish a",
    "start": "1310019",
    "end": "1313139"
  },
  {
    "text": "hello world to a particular topic which",
    "start": "1313139",
    "end": "1315480"
  },
  {
    "text": "is the same topic we defined in the AWS",
    "start": "1315480",
    "end": "1317639"
  },
  {
    "text": "iot policy to view the published",
    "start": "1317639",
    "end": "1320909"
  },
  {
    "text": "messages and for testing purpose AWS I",
    "start": "1320909",
    "end": "1323970"
  },
  {
    "text": "ot provides a test console where you can",
    "start": "1323970",
    "end": "1326190"
  },
  {
    "text": "both subscribe and publish to topics by",
    "start": "1326190",
    "end": "1329909"
  },
  {
    "text": "navigating to the test console you can",
    "start": "1329909",
    "end": "1332130"
  },
  {
    "text": "see the messages now being published",
    "start": "1332130",
    "end": "1333929"
  },
  {
    "text": "buzz by subscribing",
    "start": "1333929",
    "end": "1335580"
  },
  {
    "text": "to the vehicle topic from the sample",
    "start": "1335580",
    "end": "1337440"
  },
  {
    "text": "code as shown during a POC or testing it",
    "start": "1337440",
    "end": "1342780"
  },
  {
    "text": "might be easier to physically copy the",
    "start": "1342780",
    "end": "1344880"
  },
  {
    "text": "device certificates onto the devices",
    "start": "1344880",
    "end": "1346800"
  },
  {
    "text": "however this might not be a practical",
    "start": "1346800",
    "end": "1349590"
  },
  {
    "text": "when devices are produced at scale aw",
    "start": "1349590",
    "end": "1353880"
  },
  {
    "text": "Scioto course support just-in-time",
    "start": "1353880",
    "end": "1355770"
  },
  {
    "text": "provisioning of device certificates",
    "start": "1355770",
    "end": "1357630"
  },
  {
    "text": "where manufacturers can register their",
    "start": "1357630",
    "end": "1359850"
  },
  {
    "text": "own CA certificate on AWS IOT and create",
    "start": "1359850",
    "end": "1363180"
  },
  {
    "text": "device certificates in the factories and",
    "start": "1363180",
    "end": "1364980"
  },
  {
    "text": "flash them onto the devices in this demo",
    "start": "1364980",
    "end": "1368640"
  },
  {
    "text": "I am going to demonstrate an ESP 32m see",
    "start": "1368640",
    "end": "1371700"
  },
  {
    "text": "you running Amazon FreeRTOS to publish",
    "start": "1371700",
    "end": "1374430"
  },
  {
    "text": "messages to the AWS IOT core ESB 32 is a",
    "start": "1374430",
    "end": "1378390"
  },
  {
    "text": "series of low cost low pass",
    "start": "1378390",
    "end": "1380550"
  },
  {
    "text": "system-on-a-chip microcontrollers with",
    "start": "1380550",
    "end": "1382710"
  },
  {
    "text": "integrated Wi-Fi you can now take",
    "start": "1382710",
    "end": "1385410"
  },
  {
    "text": "advantage of Amazon free artists",
    "start": "1385410",
    "end": "1387780"
  },
  {
    "text": "features and benefits for",
    "start": "1387780",
    "end": "1389670"
  },
  {
    "text": "microcontrollers using the development",
    "start": "1389670",
    "end": "1391470"
  },
  {
    "text": "boards from s preceive this enables you",
    "start": "1391470",
    "end": "1394830"
  },
  {
    "text": "to easily and securely connect your ESP",
    "start": "1394830",
    "end": "1397740"
  },
  {
    "text": "32 based devices to AWS cloud services",
    "start": "1397740",
    "end": "1400680"
  },
  {
    "text": "like aw sciatic or r2 edge devices",
    "start": "1400680",
    "end": "1404160"
  },
  {
    "text": "running aw screen class let's jump",
    "start": "1404160",
    "end": "1407160"
  },
  {
    "text": "straight into the demo",
    "start": "1407160",
    "end": "1408710"
  },
  {
    "text": "let us first quickly compile the program",
    "start": "1408710",
    "end": "1411480"
  },
  {
    "text": "and get an executable I'm going to now",
    "start": "1411480",
    "end": "1414600"
  },
  {
    "text": "flash the program onto the ESP 32",
    "start": "1414600",
    "end": "1417360"
  },
  {
    "text": "connected to my laptop by using the make",
    "start": "1417360",
    "end": "1420510"
  },
  {
    "text": "flash monitor command this command does",
    "start": "1420510",
    "end": "1423810"
  },
  {
    "text": "two things it flashes the firmware onto",
    "start": "1423810",
    "end": "1426420"
  },
  {
    "text": "the device and also starts monitoring",
    "start": "1426420",
    "end": "1428730"
  },
  {
    "text": "the console output we are now going to",
    "start": "1428730",
    "end": "1431640"
  },
  {
    "text": "have a look at the browser to check",
    "start": "1431640",
    "end": "1433920"
  },
  {
    "text": "whether we have any messages being",
    "start": "1433920",
    "end": "1436080"
  },
  {
    "text": "received on the subscription well you",
    "start": "1436080",
    "end": "1438900"
  },
  {
    "text": "can see that the background color of the",
    "start": "1438900",
    "end": "1441150"
  },
  {
    "text": "browser is changing every second let's",
    "start": "1441150",
    "end": "1444330"
  },
  {
    "text": "also go to the AWS IOT test console to",
    "start": "1444330",
    "end": "1447570"
  },
  {
    "text": "check whether we are receiving any",
    "start": "1447570",
    "end": "1449070"
  },
  {
    "text": "messages or subscribing to the topic you",
    "start": "1449070",
    "end": "1451980"
  },
  {
    "text": "can see that there are messages arriving",
    "start": "1451980",
    "end": "1453750"
  },
  {
    "text": "every second - now that the ESP 32",
    "start": "1453750",
    "end": "1458010"
  },
  {
    "text": "device is subscribed to a control topic",
    "start": "1458010",
    "end": "1460290"
  },
  {
    "text": "I can control the onboard led by sending",
    "start": "1460290",
    "end": "1463530"
  },
  {
    "text": "a publish message with state on or off",
    "start": "1463530",
    "end": "1466260"
  },
  {
    "text": "let us to start by first turning it",
    "start": "1466260",
    "end": "1469500"
  },
  {
    "text": "I'm going to send a State on message",
    "start": "1469500",
    "end": "1471960"
  },
  {
    "text": "right now the LED turns on now I'm gonna",
    "start": "1471960",
    "end": "1476550"
  },
  {
    "text": "turn it off by sending a state off",
    "start": "1476550",
    "end": "1479100"
  },
  {
    "text": "message and the LED goes off we have now",
    "start": "1479100",
    "end": "1485430"
  },
  {
    "text": "seen how a highly constrained",
    "start": "1485430",
    "end": "1487370"
  },
  {
    "text": "microcontroller device can be connected",
    "start": "1487370",
    "end": "1489330"
  },
  {
    "text": "to the AWS IOT core seamlessly with",
    "start": "1489330",
    "end": "1492690"
  },
  {
    "text": "minimum effort to gain more confidence",
    "start": "1492690",
    "end": "1495360"
  },
  {
    "text": "and hands-on experience with AWS access",
    "start": "1495360",
    "end": "1498930"
  },
  {
    "text": "the digital training built by AWS",
    "start": "1498930",
    "end": "1500700"
  },
  {
    "text": "experts attend our instructor-led",
    "start": "1500700",
    "end": "1502980"
  },
  {
    "text": "classes by qualified AWS instructors and",
    "start": "1502980",
    "end": "1505710"
  },
  {
    "text": "learn how to design deploy and operate",
    "start": "1505710",
    "end": "1508020"
  },
  {
    "text": "highly available cost-effective and",
    "start": "1508020",
    "end": "1510660"
  },
  {
    "text": "secure applications on AWS and validate",
    "start": "1510660",
    "end": "1514050"
  },
  {
    "text": "your technical expertise with AWS and",
    "start": "1514050",
    "end": "1516510"
  },
  {
    "text": "use practice exams to help you prepare",
    "start": "1516510",
    "end": "1518640"
  },
  {
    "text": "for AWS certification it appears also",
    "start": "1518640",
    "end": "1522240"
  },
  {
    "text": "has a wide partner ecosystem to help you",
    "start": "1522240",
    "end": "1524850"
  },
  {
    "text": "focus on your success and take full",
    "start": "1524850",
    "end": "1527040"
  },
  {
    "text": "advantage of all the business benefits",
    "start": "1527040",
    "end": "1529170"
  },
  {
    "text": "that AWS has to offer to learn more",
    "start": "1529170",
    "end": "1532320"
  },
  {
    "text": "about how a paean partners can help you",
    "start": "1532320",
    "end": "1534840"
  },
  {
    "text": "find the right tape and partner for your",
    "start": "1534840",
    "end": "1536820"
  },
  {
    "text": "needs visit their WS APN booth at our",
    "start": "1536820",
    "end": "1539820"
  },
  {
    "text": "showcase finally I would like to thank",
    "start": "1539820",
    "end": "1543060"
  },
  {
    "text": "you for attending today and sticking it",
    "start": "1543060",
    "end": "1545220"
  },
  {
    "text": "out until the very end of the",
    "start": "1545220",
    "end": "1547050"
  },
  {
    "text": "presentation",
    "start": "1547050",
    "end": "1549620"
  }
]