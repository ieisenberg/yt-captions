[
  {
    "text": "hello my name is Julian Turner and I'm",
    "start": "719",
    "end": "3480"
  },
  {
    "text": "an associate Solutions architect with",
    "start": "3480",
    "end": "5339"
  },
  {
    "text": "AWS in this video we will be showing you",
    "start": "5339",
    "end": "8340"
  },
  {
    "text": "how to use automatic mounting of AWS",
    "start": "8340",
    "end": "11160"
  },
  {
    "text": "glued data catalog with Amazon redshift",
    "start": "11160",
    "end": "13679"
  },
  {
    "text": "this feature will make it easier for you",
    "start": "13679",
    "end": "16139"
  },
  {
    "text": "to run queries in your data Lakes",
    "start": "16139",
    "end": "17640"
  },
  {
    "text": "without having to create any external",
    "start": "17640",
    "end": "19800"
  },
  {
    "text": "schemas in Amazon redshift",
    "start": "19800",
    "end": "21960"
  },
  {
    "text": "in this video we will be taking a look",
    "start": "21960",
    "end": "24300"
  },
  {
    "text": "at this feature using query editor V2",
    "start": "24300",
    "end": "26400"
  },
  {
    "text": "with Amazon redshift provisioned and",
    "start": "26400",
    "end": "29099"
  },
  {
    "text": "serverless but keep in mind you can also",
    "start": "29099",
    "end": "31859"
  },
  {
    "text": "do this with your favorite jdbc or odbc",
    "start": "31859",
    "end": "34860"
  },
  {
    "text": "clients",
    "start": "34860",
    "end": "37399"
  },
  {
    "text": "let us start off by showing the ease of",
    "start": "37440",
    "end": "39420"
  },
  {
    "text": "use of this feature in this example we",
    "start": "39420",
    "end": "42360"
  },
  {
    "text": "have a role set up with certain I am",
    "start": "42360",
    "end": "44399"
  },
  {
    "text": "policies attached that allows the role",
    "start": "44399",
    "end": "46739"
  },
  {
    "text": "to access certain Services which we will",
    "start": "46739",
    "end": "48960"
  },
  {
    "text": "cover later on in the video",
    "start": "48960",
    "end": "51239"
  },
  {
    "text": "here you can see after establishing a",
    "start": "51239",
    "end": "53640"
  },
  {
    "text": "connection to our Amazon redshift",
    "start": "53640",
    "end": "55260"
  },
  {
    "text": "serverless instance and to our provision",
    "start": "55260",
    "end": "57539"
  },
  {
    "text": "cluster then Auto mounted database",
    "start": "57539",
    "end": "59940"
  },
  {
    "text": "exists for the role that was granted",
    "start": "59940",
    "end": "61559"
  },
  {
    "text": "access",
    "start": "61559",
    "end": "62879"
  },
  {
    "text": "keep in mind with using query editor V2",
    "start": "62879",
    "end": "66060"
  },
  {
    "text": "you can also expand on the tree browser",
    "start": "66060",
    "end": "68460"
  },
  {
    "text": "and have the ability to see the",
    "start": "68460",
    "end": "70320"
  },
  {
    "text": "auto-mounted databases created in AWS",
    "start": "70320",
    "end": "72600"
  },
  {
    "text": "glue and even further to see the tables",
    "start": "72600",
    "end": "75420"
  },
  {
    "text": "and see the columns that populate those",
    "start": "75420",
    "end": "77520"
  },
  {
    "text": "tables it is that easy",
    "start": "77520",
    "end": "80100"
  },
  {
    "text": "users can then query those tables as",
    "start": "80100",
    "end": "82140"
  },
  {
    "text": "normal without any additional steps",
    "start": "82140",
    "end": "86240"
  },
  {
    "text": "to establish this connection the first",
    "start": "92000",
    "end": "95100"
  },
  {
    "text": "step will be creating an AWS glue",
    "start": "95100",
    "end": "97259"
  },
  {
    "text": "crawler to create an external table from",
    "start": "97259",
    "end": "99720"
  },
  {
    "text": "the data source of your choice",
    "start": "99720",
    "end": "101700"
  },
  {
    "text": "here you can see that our AWS glue",
    "start": "101700",
    "end": "103920"
  },
  {
    "text": "crawler is named New York Taxi crawler",
    "start": "103920",
    "end": "105840"
  },
  {
    "text": "with a database name of Auto Mount DB in",
    "start": "105840",
    "end": "109680"
  },
  {
    "text": "this demo we will be using data from a",
    "start": "109680",
    "end": "112020"
  },
  {
    "text": "public Amazon S3 bucket",
    "start": "112020",
    "end": "114540"
  },
  {
    "text": "then after your AWS glue crawler has",
    "start": "114540",
    "end": "117299"
  },
  {
    "text": "been created properly run the crawler to",
    "start": "117299",
    "end": "119759"
  },
  {
    "text": "create your database table",
    "start": "119759",
    "end": "121560"
  },
  {
    "text": "check under databases under the data",
    "start": "121560",
    "end": "124020"
  },
  {
    "text": "catalog to ensure your database and",
    "start": "124020",
    "end": "126180"
  },
  {
    "text": "table were created properly",
    "start": "126180",
    "end": "129438"
  },
  {
    "text": "next to enable access to this Auto",
    "start": "129479",
    "end": "132120"
  },
  {
    "text": "amount database we must configure our IM",
    "start": "132120",
    "end": "134879"
  },
  {
    "text": "role for Amazon Rich of users",
    "start": "134879",
    "end": "137580"
  },
  {
    "text": "for this video we have attached the",
    "start": "137580",
    "end": "139980"
  },
  {
    "text": "Amazon redshift full access Amazon S3",
    "start": "139980",
    "end": "143220"
  },
  {
    "text": "full access AWS glue console full access",
    "start": "143220",
    "end": "146340"
  },
  {
    "text": "and the Amazon redshift query editor B2",
    "start": "146340",
    "end": "149760"
  },
  {
    "text": "read write and sharing policies but do",
    "start": "149760",
    "end": "153360"
  },
  {
    "text": "keep in mind when in the production",
    "start": "153360",
    "end": "155220"
  },
  {
    "text": "scenario it is highly recommended to",
    "start": "155220",
    "end": "157500"
  },
  {
    "text": "apply more granular permissions under",
    "start": "157500",
    "end": "160020"
  },
  {
    "text": "the tags tab we also added redshift DB",
    "start": "160020",
    "end": "163200"
  },
  {
    "text": "rolls as a key and Auto Mount as the",
    "start": "163200",
    "end": "166319"
  },
  {
    "text": "value",
    "start": "166319",
    "end": "168480"
  },
  {
    "text": "from there we will be heading into the",
    "start": "168480",
    "end": "170340"
  },
  {
    "text": "Amazon redshift query editor V2",
    "start": "170340",
    "end": "173099"
  },
  {
    "text": "starting from the point of view of the",
    "start": "173099",
    "end": "174780"
  },
  {
    "text": "admin we have to allow access to Amazon",
    "start": "174780",
    "end": "177360"
  },
  {
    "text": "redshift for the other role",
    "start": "177360",
    "end": "179519"
  },
  {
    "text": "for serverless create a role through",
    "start": "179519",
    "end": "181739"
  },
  {
    "text": "query editor V2 and Grant usage to the",
    "start": "181739",
    "end": "184739"
  },
  {
    "text": "AWS data catalog to that role",
    "start": "184739",
    "end": "187379"
  },
  {
    "text": "users can then authenticate using",
    "start": "187379",
    "end": "189420"
  },
  {
    "text": "Federated user to establish a connection",
    "start": "189420",
    "end": "191580"
  },
  {
    "text": "with this feature",
    "start": "191580",
    "end": "193620"
  },
  {
    "text": "for a provision cluster Grant usage to",
    "start": "193620",
    "end": "196319"
  },
  {
    "text": "the AWS data catalog database to the",
    "start": "196319",
    "end": "198599"
  },
  {
    "text": "role with your admin credentials and the",
    "start": "198599",
    "end": "200760"
  },
  {
    "text": "role can access the cluster through",
    "start": "200760",
    "end": "202260"
  },
  {
    "text": "temporary credentials using their IEM",
    "start": "202260",
    "end": "204180"
  },
  {
    "text": "identity",
    "start": "204180",
    "end": "206099"
  },
  {
    "text": "with automatic mounting of AWS glue data",
    "start": "206099",
    "end": "209220"
  },
  {
    "text": "catalog it makes it easier for customers",
    "start": "209220",
    "end": "211260"
  },
  {
    "text": "to run queries in their data leaks there",
    "start": "211260",
    "end": "213840"
  },
  {
    "text": "are a few final notes to leave on",
    "start": "213840",
    "end": "216060"
  },
  {
    "text": "for Best Practices on fine-grained",
    "start": "216060",
    "end": "218340"
  },
  {
    "text": "access control build a permission model",
    "start": "218340",
    "end": "220680"
  },
  {
    "text": "in AWS Lake formation",
    "start": "220680",
    "end": "223019"
  },
  {
    "text": "if permissions have been maintained at",
    "start": "223019",
    "end": "225060"
  },
  {
    "text": "the Amazon redshift database level leave",
    "start": "225060",
    "end": "227700"
  },
  {
    "text": "the AWS Lake formation settings as is",
    "start": "227700",
    "end": "230280"
  },
  {
    "text": "and then Grant or revoke in Amazon",
    "start": "230280",
    "end": "232799"
  },
  {
    "text": "roadshift",
    "start": "232799",
    "end": "234840"
  },
  {
    "text": "thank you so much for your time",
    "start": "234840",
    "end": "238220"
  }
]