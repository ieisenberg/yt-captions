[
  {
    "start": "0",
    "end": "82000"
  },
  {
    "text": "[Music]",
    "start": "580",
    "end": "14360"
  },
  {
    "text": "my name is Matthew Lodge uh I'm from",
    "start": "14360",
    "end": "16600"
  },
  {
    "text": "weave Works we're a small startup uh in",
    "start": "16600",
    "end": "19080"
  },
  {
    "text": "the docker space uh based here in San",
    "start": "19080",
    "end": "21160"
  },
  {
    "text": "Francisco and also out of London uh and",
    "start": "21160",
    "end": "24119"
  },
  {
    "text": "I'm going to talk to you about deploying",
    "start": "24119",
    "end": "25359"
  },
  {
    "text": "microservices on ECS and how you can do",
    "start": "25359",
    "end": "28400"
  },
  {
    "text": "that uh more quickly and easily if you",
    "start": "28400",
    "end": "30400"
  },
  {
    "text": "think about a typical",
    "start": "30400",
    "end": "32119"
  },
  {
    "text": "microservice the the pattern you see is",
    "start": "32120",
    "end": "34600"
  },
  {
    "text": "some kind of client somebody who wants",
    "start": "34600",
    "end": "36079"
  },
  {
    "text": "to make use of this microservice let's",
    "start": "36079",
    "end": "37760"
  },
  {
    "text": "say this was authentication for a",
    "start": "37760",
    "end": "39960"
  },
  {
    "text": "website so you've got a collection of",
    "start": "39960",
    "end": "42120"
  },
  {
    "text": "containers worker containers usually",
    "start": "42120",
    "end": "43960"
  },
  {
    "text": "these are replicas of a single uh image",
    "start": "43960",
    "end": "47160"
  },
  {
    "text": "single container image and they",
    "start": "47160",
    "end": "49079"
  },
  {
    "text": "implement the service so you might pass",
    "start": "49079",
    "end": "50320"
  },
  {
    "text": "in some credentials username password um",
    "start": "50320",
    "end": "53520"
  },
  {
    "text": "and one of that that request goes into",
    "start": "53520",
    "end": "55800"
  },
  {
    "text": "some kind of proxy or load balancer gets",
    "start": "55800",
    "end": "58480"
  },
  {
    "text": "given to one of these worker Pro as one",
    "start": "58480",
    "end": "60359"
  },
  {
    "text": "of these replicas uh does the",
    "start": "60359",
    "end": "62399"
  },
  {
    "text": "authentication and passes back you know",
    "start": "62399",
    "end": "64198"
  },
  {
    "text": "pass or fail maybe some uh other you",
    "start": "64199",
    "end": "66840"
  },
  {
    "text": "know token that says something about",
    "start": "66840",
    "end": "68360"
  },
  {
    "text": "permissions of that particular user and",
    "start": "68360",
    "end": "70560"
  },
  {
    "text": "that's a",
    "start": "70560",
    "end": "71520"
  },
  {
    "text": "microservice so when you uh take this um",
    "start": "71520",
    "end": "74320"
  },
  {
    "text": "pattern then it fits really well into",
    "start": "74320",
    "end": "76439"
  },
  {
    "text": "the model of containers and and Docker",
    "start": "76439",
    "end": "79200"
  },
  {
    "text": "so you can see how you can map all of",
    "start": "79200",
    "end": "80600"
  },
  {
    "text": "this stuff into containers that looks",
    "start": "80600",
    "end": "81960"
  },
  {
    "text": "pretty straightforward but it actually",
    "start": "81960",
    "end": "84000"
  },
  {
    "start": "82000",
    "end": "147000"
  },
  {
    "text": "turns out it's quite difficult to do",
    "start": "84000",
    "end": "85439"
  },
  {
    "text": "this on Docker and um part of the",
    "start": "85439",
    "end": "88360"
  },
  {
    "text": "challenge is just simply getting the",
    "start": "88360",
    "end": "90280"
  },
  {
    "text": "request from one container to another so",
    "start": "90280",
    "end": "92840"
  },
  {
    "text": "one of the things that um you this used",
    "start": "92840",
    "end": "94880"
  },
  {
    "text": "to be the way Docker worked up until",
    "start": "94880",
    "end": "96680"
  },
  {
    "text": "version 1.9 we have this port mapping",
    "start": "96680",
    "end": "99280"
  },
  {
    "text": "and you can see this in um in TAS",
    "start": "99280",
    "end": "101200"
  },
  {
    "text": "definitions you look in ECS one of the",
    "start": "101200",
    "end": "103399"
  },
  {
    "text": "things you're can res setting up is",
    "start": "103399",
    "end": "104399"
  },
  {
    "text": "these Port mappings so on the docker",
    "start": "104399",
    "end": "107079"
  },
  {
    "text": "host the ECS instance you have this",
    "start": "107079",
    "end": "109119"
  },
  {
    "text": "external port and internal ports the",
    "start": "109119",
    "end": "110719"
  },
  {
    "text": "containers have a port number so this",
    "start": "110719",
    "end": "112960"
  },
  {
    "text": "client might you know something else",
    "start": "112960",
    "end": "114040"
  },
  {
    "text": "might call the client on Port 80 um and",
    "start": "114040",
    "end": "116640"
  },
  {
    "text": "then you map that into an external Port",
    "start": "116640",
    "end": "118240"
  },
  {
    "text": "of 8080 and then you do the same thing",
    "start": "118240",
    "end": "120399"
  },
  {
    "text": "on this other instance over here so you",
    "start": "120399",
    "end": "122439"
  },
  {
    "text": "have an external Port the maps to an",
    "start": "122439",
    "end": "123880"
  },
  {
    "text": "internal port and as you can imagine",
    "start": "123880",
    "end": "126119"
  },
  {
    "text": "this is all quite tedious it also",
    "start": "126119",
    "end": "127880"
  },
  {
    "text": "presents you with a a real challenge",
    "start": "127880",
    "end": "129879"
  },
  {
    "text": "when you want to do something like",
    "start": "129879",
    "end": "131560"
  },
  {
    "text": "develop your micros service or your",
    "start": "131560",
    "end": "133640"
  },
  {
    "text": "application on your laptop and then you",
    "start": "133640",
    "end": "135680"
  },
  {
    "text": "want to deploy to ECS and now you're",
    "start": "135680",
    "end": "138200"
  },
  {
    "text": "going to have to worry about managing",
    "start": "138200",
    "end": "140760"
  },
  {
    "text": "two sets of configuration on one thing",
    "start": "140760",
    "end": "142440"
  },
  {
    "text": "that works on your laptop and then",
    "start": "142440",
    "end": "143519"
  },
  {
    "text": "something else entirely for when this",
    "start": "143519",
    "end": "145360"
  },
  {
    "text": "gets deployed elsewhere Docker",
    "start": "145360",
    "end": "147599"
  },
  {
    "start": "147000",
    "end": "301000"
  },
  {
    "text": "introduced U Docker networking in",
    "start": "147599",
    "end": "149400"
  },
  {
    "text": "version 1 .9 where you now have a",
    "start": "149400",
    "end": "152239"
  },
  {
    "text": "virtual Network for the containers so",
    "start": "152239",
    "end": "155000"
  },
  {
    "text": "just a container only Network um it's an",
    "start": "155000",
    "end": "157959"
  },
  {
    "text": "overlay actually runs over vxlan tunnels",
    "start": "157959",
    "end": "161239"
  },
  {
    "text": "in between the hosts so there is a an",
    "start": "161239",
    "end": "163800"
  },
  {
    "text": "Ethernet bridge on each host all the",
    "start": "163800",
    "end": "165720"
  },
  {
    "text": "containers are connected to the bridge",
    "start": "165720",
    "end": "167159"
  },
  {
    "text": "they just use their normal port numbers",
    "start": "167159",
    "end": "169400"
  },
  {
    "text": "and then between the host there's VXL",
    "start": "169400",
    "end": "171040"
  },
  {
    "text": "tunnels right so that traffic goes",
    "start": "171040",
    "end": "172440"
  },
  {
    "text": "across you know VPC or whatever it is on",
    "start": "172440",
    "end": "175200"
  },
  {
    "text": "on ECS so this is obviously much simpler",
    "start": "175200",
    "end": "178280"
  },
  {
    "text": "from an application standpoint the",
    "start": "178280",
    "end": "180000"
  },
  {
    "text": "challenge though is that when you deploy",
    "start": "180000",
    "end": "181840"
  },
  {
    "text": "this on Docker uh you end up with a lot",
    "start": "181840",
    "end": "185040"
  },
  {
    "text": "of configuration and a lot of extra",
    "start": "185040",
    "end": "186879"
  },
  {
    "text": "things so in Docker one9 you need this",
    "start": "186879",
    "end": "189200"
  },
  {
    "text": "thing called a cluster store uh the",
    "start": "189200",
    "end": "191480"
  },
  {
    "text": "default cluster store in Docker",
    "start": "191480",
    "end": "192720"
  },
  {
    "text": "networking is based on Console you can",
    "start": "192720",
    "end": "195120"
  },
  {
    "text": "use ETD you can use zookeeper as well",
    "start": "195120",
    "end": "197159"
  },
  {
    "text": "but the purpose of the cluster store is",
    "start": "197159",
    "end": "199680"
  },
  {
    "text": "to keep track of all the things on the",
    "start": "199680",
    "end": "201360"
  },
  {
    "text": "network so all the IP addresses for the",
    "start": "201360",
    "end": "203319"
  },
  {
    "text": "containers and then all the name",
    "start": "203319",
    "end": "205159"
  },
  {
    "text": "mappings for uh name",
    "start": "205159",
    "end": "207519"
  },
  {
    "text": "resolution so um I ironically you can't",
    "start": "207519",
    "end": "210439"
  },
  {
    "text": "run the cluster store in a container uh",
    "start": "210439",
    "end": "212400"
  },
  {
    "text": "because it has to be up and running",
    "start": "212400",
    "end": "213680"
  },
  {
    "text": "before the cluster starts so when the",
    "start": "213680",
    "end": "216120"
  },
  {
    "text": "cluster starts and when you start",
    "start": "216120",
    "end": "217959"
  },
  {
    "text": "containers what happens is Docker goes",
    "start": "217959",
    "end": "220319"
  },
  {
    "text": "off to the cluster store to allocate IP",
    "start": "220319",
    "end": "222680"
  },
  {
    "text": "addresses to containers and so that has",
    "start": "222680",
    "end": "226080"
  },
  {
    "text": "to happen on this cluster store because",
    "start": "226080",
    "end": "228680"
  },
  {
    "text": "you don't want to hand out duplicate",
    "start": "228680",
    "end": "231319"
  },
  {
    "text": "addresses so the way that's implemented",
    "start": "231319",
    "end": "233680"
  },
  {
    "text": "in Docker 1 n and and Docker",
    "start": "233680",
    "end": "236319"
  },
  {
    "text": "110 is that you go to the cluster store",
    "start": "236319",
    "end": "239280"
  },
  {
    "text": "and you ask",
    "start": "239280",
    "end": "240360"
  },
  {
    "text": "for um a transaction a consensus",
    "start": "240360",
    "end": "243120"
  },
  {
    "text": "transaction involving all of the members",
    "start": "243120",
    "end": "247439"
  },
  {
    "text": "of that database so in console it's a um",
    "start": "247439",
    "end": "251560"
  },
  {
    "text": "it's a consensus algorithm so you have",
    "start": "251560",
    "end": "253799"
  },
  {
    "text": "to have at least three nodes can't have",
    "start": "253799",
    "end": "256440"
  },
  {
    "text": "consensus with two nodes because if they",
    "start": "256440",
    "end": "257959"
  },
  {
    "text": "differ then you don't know which one to",
    "start": "257959",
    "end": "259199"
  },
  {
    "text": "choose so with three nodes and then no",
    "start": "259199",
    "end": "262199"
  },
  {
    "text": "more than five uh because that's the",
    "start": "262199",
    "end": "264479"
  },
  {
    "text": "design maximum for a console so the",
    "start": "264479",
    "end": "267160"
  },
  {
    "text": "challenge here is that we've just",
    "start": "267160",
    "end": "268759"
  },
  {
    "text": "introduced a whole bunch of care and",
    "start": "268759",
    "end": "270240"
  },
  {
    "text": "feeding and extra stuff and extra",
    "start": "270240",
    "end": "272160"
  },
  {
    "text": "configuration you now have to do on this",
    "start": "272160",
    "end": "274160"
  },
  {
    "text": "cluster store you also have to configure",
    "start": "274160",
    "end": "276280"
  },
  {
    "text": "your Docker hosts so they know about the",
    "start": "276280",
    "end": "278400"
  },
  {
    "text": "cluster store they have the right",
    "start": "278400",
    "end": "279360"
  },
  {
    "text": "credentials all those other good things",
    "start": "279360",
    "end": "281400"
  },
  {
    "text": "and so what looked like something that",
    "start": "281400",
    "end": "283160"
  },
  {
    "text": "was fairly simple has now actually",
    "start": "283160",
    "end": "284320"
  },
  {
    "text": "turned out to be quite complicated to",
    "start": "284320",
    "end": "286199"
  },
  {
    "text": "deploy um and then in production if you",
    "start": "286199",
    "end": "289000"
  },
  {
    "text": "lose contact with anything any of the",
    "start": "289000",
    "end": "290759"
  },
  {
    "text": "cluster Stores um then you can't start",
    "start": "290759",
    "end": "293160"
  },
  {
    "text": "or stop any",
    "start": "293160",
    "end": "294639"
  },
  {
    "text": "containers because they can't get IP",
    "start": "294639",
    "end": "296479"
  },
  {
    "text": "addresses and they can't hand them back",
    "start": "296479",
    "end": "298960"
  },
  {
    "text": "so we set up to solve this uh problem",
    "start": "298960",
    "end": "301560"
  },
  {
    "start": "301000",
    "end": "710000"
  },
  {
    "text": "what we do is um we have this product",
    "start": "301560",
    "end": "303759"
  },
  {
    "text": "called weave net that makes things",
    "start": "303759",
    "end": "305440"
  },
  {
    "text": "simpler and essentially what we do is we",
    "start": "305440",
    "end": "307360"
  },
  {
    "text": "just do away with that cluster store and",
    "start": "307360",
    "end": "309479"
  },
  {
    "text": "instead we have routers that run on",
    "start": "309479",
    "end": "311160"
  },
  {
    "text": "every Docker host and they work a lot",
    "start": "311160",
    "end": "312680"
  },
  {
    "text": "like the internet routers in the",
    "start": "312680",
    "end": "314919"
  },
  {
    "text": "internet so RS of the internet just talk",
    "start": "314919",
    "end": "316840"
  },
  {
    "text": "to each other they learn they have some",
    "start": "316840",
    "end": "318160"
  },
  {
    "text": "local",
    "start": "318160",
    "end": "319240"
  },
  {
    "text": "configuration uh and they learn about",
    "start": "319240",
    "end": "321560"
  },
  {
    "text": "the topology of the network from each",
    "start": "321560",
    "end": "322880"
  },
  {
    "text": "other by exchanging uh updates um and in",
    "start": "322880",
    "end": "326600"
  },
  {
    "text": "the case of the weave routers they also",
    "start": "326600",
    "end": "328120"
  },
  {
    "text": "can hand out IP addresses",
    "start": "328120",
    "end": "330240"
  },
  {
    "text": "and I'll talk a little bit more about",
    "start": "330240",
    "end": "331280"
  },
  {
    "text": "how that works in a second but",
    "start": "331280",
    "end": "332520"
  },
  {
    "text": "essentially what we do is we get rid of",
    "start": "332520",
    "end": "333800"
  },
  {
    "text": "that cluster store you get rid of all",
    "start": "333800",
    "end": "335039"
  },
  {
    "text": "the configuration associated with that",
    "start": "335039",
    "end": "337319"
  },
  {
    "text": "and also for service Discovery now uh we",
    "start": "337319",
    "end": "340639"
  },
  {
    "text": "can uh respond to DNS queries from",
    "start": "340639",
    "end": "344240"
  },
  {
    "text": "containers in the cluster and so if you",
    "start": "344240",
    "end": "346479"
  },
  {
    "text": "want to you you know your client",
    "start": "346479",
    "end": "347759"
  },
  {
    "text": "container wants to find the worker you",
    "start": "347759",
    "end": "349000"
  },
  {
    "text": "can do do a DNS request for the name of",
    "start": "349000",
    "end": "351880"
  },
  {
    "text": "the container and you get an IP address",
    "start": "351880",
    "end": "354479"
  },
  {
    "text": "back that's and now you've done service",
    "start": "354479",
    "end": "357199"
  },
  {
    "text": "Discovery you know where your containers",
    "start": "357199",
    "end": "358560"
  },
  {
    "text": "are regardless of where where they're",
    "start": "358560",
    "end": "359880"
  },
  {
    "text": "running they could be running anywhere",
    "start": "359880",
    "end": "361120"
  },
  {
    "text": "in the",
    "start": "361120",
    "end": "362560"
  },
  {
    "text": "cluster you can also use webnet itself",
    "start": "362560",
    "end": "365960"
  },
  {
    "text": "and the micro DNS server for a basic",
    "start": "365960",
    "end": "367759"
  },
  {
    "text": "form of load balancing so DNS based load",
    "start": "367759",
    "end": "369639"
  },
  {
    "text": "balancing so you've got multiple",
    "start": "369639",
    "end": "370840"
  },
  {
    "text": "containers with the same name so if",
    "start": "370840",
    "end": "372720"
  },
  {
    "text": "these are all called worker then we can",
    "start": "372720",
    "end": "375400"
  },
  {
    "text": "round robin the IP addresses that we",
    "start": "375400",
    "end": "377400"
  },
  {
    "text": "hand back from DNS and therefore you can",
    "start": "377400",
    "end": "380360"
  },
  {
    "text": "use a basic form of load balancing uh",
    "start": "380360",
    "end": "382800"
  },
  {
    "text": "with weav net let's take a look at uh",
    "start": "382800",
    "end": "385039"
  },
  {
    "text": "how we might do this I'm going to do a",
    "start": "385039",
    "end": "387080"
  },
  {
    "text": "quick demo here I'm going to run this",
    "start": "387080",
    "end": "388880"
  },
  {
    "text": "locally on my machine and then I'm going",
    "start": "388880",
    "end": "390280"
  },
  {
    "text": "to run it on AWS",
    "start": "390280",
    "end": "392080"
  },
  {
    "text": "ECS so I'm just using dock a",
    "start": "392080",
    "end": "396159"
  },
  {
    "text": "machine so here I have a blank dock",
    "start": "396759",
    "end": "399360"
  },
  {
    "text": "machine and I'm going to start the weave",
    "start": "399360",
    "end": "401919"
  },
  {
    "text": "Network that gives you that",
    "start": "401919",
    "end": "405520"
  },
  {
    "text": "sdn and that's it so I'm now running a",
    "start": "408680",
    "end": "411319"
  },
  {
    "text": "software defined network uh on my uh",
    "start": "411319",
    "end": "413599"
  },
  {
    "text": "laptop in this particular virtual box uh",
    "start": "413599",
    "end": "416879"
  },
  {
    "text": "installation here and if I was running",
    "start": "416879",
    "end": "418840"
  },
  {
    "text": "this on multiple instances I would just",
    "start": "418840",
    "end": "420440"
  },
  {
    "text": "do weave launch on each one of them um",
    "start": "420440",
    "end": "422800"
  },
  {
    "text": "and I just need to tell it about another",
    "start": "422800",
    "end": "424680"
  },
  {
    "text": "weave router I'll get onto that in a",
    "start": "424680",
    "end": "426400"
  },
  {
    "text": "second so now every container that comes",
    "start": "426400",
    "end": "428560"
  },
  {
    "text": "up is going to get its IP address it's",
    "start": "428560",
    "end": "430479"
  },
  {
    "text": "going to be on the sdn and it's going to",
    "start": "430479",
    "end": "432400"
  },
  {
    "text": "have that name resolution so if I do",
    "start": "432400",
    "end": "435000"
  },
  {
    "text": "Docker PS here what I can see is the we",
    "start": "435000",
    "end": "439479"
  },
  {
    "text": "Works",
    "start": "439479",
    "end": "440240"
  },
  {
    "text": "router um we have an API proxy for the",
    "start": "440240",
    "end": "442800"
  },
  {
    "text": "docker API so we can see what's going on",
    "start": "442800",
    "end": "445080"
  },
  {
    "text": "with that when a container starts we can",
    "start": "445080",
    "end": "446720"
  },
  {
    "text": "then hook into that and give it an IP",
    "start": "446720",
    "end": "447919"
  },
  {
    "text": "address for example and then also uh",
    "start": "447919",
    "end": "450639"
  },
  {
    "text": "this functions as a plug-in for Docker",
    "start": "450639",
    "end": "452240"
  },
  {
    "text": "for Docker networking so you can see",
    "start": "452240",
    "end": "453560"
  },
  {
    "text": "that running as well so what I'm going",
    "start": "453560",
    "end": "455160"
  },
  {
    "text": "to do is start a bunch of containers",
    "start": "455160",
    "end": "456680"
  },
  {
    "text": "that Implement uh an app that's made up",
    "start": "456680",
    "end": "458639"
  },
  {
    "text": "of a number of different",
    "start": "458639",
    "end": "460440"
  },
  {
    "text": "microservices so really what I'm doing",
    "start": "460440",
    "end": "462759"
  },
  {
    "text": "here is uh I'm just running docka run",
    "start": "462759",
    "end": "464680"
  },
  {
    "text": "essentially I've got a script so I just",
    "start": "464680",
    "end": "466400"
  },
  {
    "text": "ran a bunch of different",
    "start": "466400",
    "end": "468240"
  },
  {
    "text": "applications in",
    "start": "468240",
    "end": "470599"
  },
  {
    "text": "containers I can see that I've got a",
    "start": "470599",
    "end": "472400"
  },
  {
    "text": "bunch of different things in here some",
    "start": "472400",
    "end": "473599"
  },
  {
    "text": "of it's in Python I've got some engine X",
    "start": "473599",
    "end": "475240"
  },
  {
    "text": "front end things some elastic search and",
    "start": "475240",
    "end": "478560"
  },
  {
    "text": "all these things are working together on",
    "start": "478560",
    "end": "480080"
  },
  {
    "text": "the wee network but it's kind of hard to",
    "start": "480080",
    "end": "481360"
  },
  {
    "text": "see so what I'm going to do is run",
    "start": "481360",
    "end": "485039"
  },
  {
    "text": "another wee Works tool called scope it's",
    "start": "485039",
    "end": "487759"
  },
  {
    "text": "going to draw us a picture of what's",
    "start": "487759",
    "end": "489080"
  },
  {
    "text": "going on so it'll be easier for you to",
    "start": "489080",
    "end": "491879"
  },
  {
    "text": "follow what is happening",
    "start": "491879",
    "end": "495759"
  },
  {
    "text": "here so here I am so this is um running",
    "start": "497639",
    "end": "501280"
  },
  {
    "text": "locally",
    "start": "501280",
    "end": "502479"
  },
  {
    "text": "here and you can see the picture of the",
    "start": "502479",
    "end": "504520"
  },
  {
    "text": "application so what I'm going to do is",
    "start": "504520",
    "end": "506440"
  },
  {
    "text": "switch to these are all the containers",
    "start": "506440",
    "end": "507960"
  },
  {
    "text": "I'm going to switch to a different mode",
    "start": "507960",
    "end": "509120"
  },
  {
    "text": "I'm going to just look by DNS host name",
    "start": "509120",
    "end": "511000"
  },
  {
    "text": "so what I'm doing here is collapsing",
    "start": "511000",
    "end": "513320"
  },
  {
    "text": "down all the containers that have the",
    "start": "513320",
    "end": "514518"
  },
  {
    "text": "same DNS host name so I can see I've got",
    "start": "514519",
    "end": "517800"
  },
  {
    "text": "my client there's one container there",
    "start": "517800",
    "end": "519440"
  },
  {
    "text": "I've got two front-end clients I've got",
    "start": "519440",
    "end": "521200"
  },
  {
    "text": "an app server made out of two containers",
    "start": "521200",
    "end": "523919"
  },
  {
    "text": "and so this entire application all these",
    "start": "523919",
    "end": "525760"
  },
  {
    "text": "um containers talk to each other just by",
    "start": "525760",
    "end": "527399"
  },
  {
    "text": "using DNS resolution so the client when",
    "start": "527399",
    "end": "530040"
  },
  {
    "text": "it wants to send requests to the server",
    "start": "530040",
    "end": "532240"
  },
  {
    "text": "just does a DNS look up for front end.",
    "start": "532240",
    "end": "534440"
  },
  {
    "text": "weave. local and the micro DNS server",
    "start": "534440",
    "end": "537480"
  },
  {
    "text": "inside of weave comes back and gives it",
    "start": "537480",
    "end": "540200"
  },
  {
    "text": "the IP addresses round robin IP",
    "start": "540200",
    "end": "542560"
  },
  {
    "text": "addresses for the two containers that",
    "start": "542560",
    "end": "544959"
  },
  {
    "text": "implement the front end so super simple",
    "start": "544959",
    "end": "548800"
  },
  {
    "text": "uh everyone knows how to do a DNS lookup",
    "start": "548800",
    "end": "551320"
  },
  {
    "text": "um doesn't matter what language you",
    "start": "551320",
    "end": "553360"
  },
  {
    "text": "write your application in you know your",
    "start": "553360",
    "end": "555600"
  },
  {
    "text": "container is running in every uh",
    "start": "555600",
    "end": "557920"
  },
  {
    "text": "application you don't need a special",
    "start": "557920",
    "end": "559200"
  },
  {
    "text": "Library every application can do a DS",
    "start": "559200",
    "end": "562000"
  },
  {
    "text": "Lookout so I can see that I've got my",
    "start": "562000",
    "end": "564079"
  },
  {
    "text": "container here it's it's got all of",
    "start": "564079",
    "end": "565800"
  },
  {
    "text": "these other different components in",
    "start": "565800",
    "end": "567800"
  },
  {
    "text": "there and then in this diagram all these",
    "start": "567800",
    "end": "570279"
  },
  {
    "text": "lines represent Communications actually",
    "start": "570279",
    "end": "572440"
  },
  {
    "text": "between the various different containers",
    "start": "572440",
    "end": "574600"
  },
  {
    "text": "so we're seeing the sort of the live map",
    "start": "574600",
    "end": "576160"
  },
  {
    "text": "of U what's going on with this",
    "start": "576160",
    "end": "578600"
  },
  {
    "text": "particular application so you can see",
    "start": "578600",
    "end": "580560"
  },
  {
    "text": "that very very easily we deployed our",
    "start": "580560",
    "end": "583440"
  },
  {
    "text": "application uh and it was very simple",
    "start": "583440",
    "end": "585560"
  },
  {
    "text": "for all the components to find each",
    "start": "585560",
    "end": "586920"
  },
  {
    "text": "other and send requests um we didn't",
    "start": "586920",
    "end": "589240"
  },
  {
    "text": "have to do Port mapping we didn't have",
    "start": "589240",
    "end": "590720"
  },
  {
    "text": "to set up console we can just get going",
    "start": "590720",
    "end": "593360"
  },
  {
    "text": "very quickly and you can set this up",
    "start": "593360",
    "end": "595120"
  },
  {
    "text": "faster you can run these containers",
    "start": "595120",
    "end": "596839"
  },
  {
    "text": "faster than you can deploy the instances",
    "start": "596839",
    "end": "598320"
  },
  {
    "text": "on aw us",
    "start": "598320",
    "end": "600120"
  },
  {
    "text": "ECS but let's we can do that too so uh",
    "start": "600120",
    "end": "604760"
  },
  {
    "text": "earlier on I went on to ECS and I",
    "start": "604760",
    "end": "607519"
  },
  {
    "text": "launched exactly the same thing I did it",
    "start": "607519",
    "end": "609680"
  },
  {
    "text": "through a cloud formation template",
    "start": "609680",
    "end": "611480"
  },
  {
    "text": "instead so you can see uh this is uh",
    "start": "611480",
    "end": "613959"
  },
  {
    "text": "available on GitHub if you want to take",
    "start": "613959",
    "end": "615240"
  },
  {
    "text": "a look later",
    "start": "615240",
    "end": "617440"
  },
  {
    "text": "on but you can see in here all of my",
    "start": "617440",
    "end": "621160"
  },
  {
    "text": "definitions U to run my various",
    "start": "621160",
    "end": "623680"
  },
  {
    "text": "different containers inside of",
    "start": "623680",
    "end": "626200"
  },
  {
    "text": "ECS and so I ran this on two Docker host",
    "start": "626200",
    "end": "629800"
  },
  {
    "text": "in or two instances I should say on ECS",
    "start": "629800",
    "end": "633440"
  },
  {
    "text": "and one of them",
    "start": "633440",
    "end": "636519"
  },
  {
    "text": "here we can do the same",
    "start": "638480",
    "end": "642839"
  },
  {
    "text": "trick and we can see our app how our",
    "start": "642920",
    "end": "645639"
  },
  {
    "text": "application ran on ECS so in this",
    "start": "645639",
    "end": "648560"
  },
  {
    "text": "there's a one slight difference here",
    "start": "648560",
    "end": "649680"
  },
  {
    "text": "we've got two clients on the front end",
    "start": "649680",
    "end": "651200"
  },
  {
    "text": "instead of one client that's the only",
    "start": "651200",
    "end": "652519"
  },
  {
    "text": "difference in this application and again",
    "start": "652519",
    "end": "653959"
  },
  {
    "text": "we can see that from the diagram we drew",
    "start": "653959",
    "end": "655519"
  },
  {
    "text": "here so what happens is I ran this",
    "start": "655519",
    "end": "657200"
  },
  {
    "text": "application it was completely unchanged",
    "start": "657200",
    "end": "661240"
  },
  {
    "text": "right there was no change in the code I",
    "start": "662040",
    "end": "663920"
  },
  {
    "text": "ran exactly the same containers that I",
    "start": "663920",
    "end": "665720"
  },
  {
    "text": "ran on my laptop and I just ran them on",
    "start": "665720",
    "end": "667440"
  },
  {
    "text": "AWS ECS with a cloud formation template",
    "start": "667440",
    "end": "670519"
  },
  {
    "text": "and they can all talk to each other they",
    "start": "670519",
    "end": "671800"
  },
  {
    "text": "can all do service Discovery uh and",
    "start": "671800",
    "end": "674040"
  },
  {
    "text": "everybody can find everyone else and so",
    "start": "674040",
    "end": "675800"
  },
  {
    "text": "that's makes it much much easier for you",
    "start": "675800",
    "end": "677720"
  },
  {
    "text": "to uh deploy your containers on ECS and",
    "start": "677720",
    "end": "681360"
  },
  {
    "text": "do service Discovery you can also build",
    "start": "681360",
    "end": "683839"
  },
  {
    "text": "a network that spans your laptop your",
    "start": "683839",
    "end": "686839"
  },
  {
    "text": "data center and AWS",
    "start": "686839",
    "end": "690000"
  },
  {
    "text": "so you can run containers in different",
    "start": "690000",
    "end": "691480"
  },
  {
    "text": "places and the network can span all of",
    "start": "691480",
    "end": "693320"
  },
  {
    "text": "those same thing still works do the gns",
    "start": "693320",
    "end": "696000"
  },
  {
    "text": "look up find the IP address of the other",
    "start": "696000",
    "end": "697880"
  },
  {
    "text": "containers and run everything",
    "start": "697880",
    "end": "700600"
  },
  {
    "text": "simply so this is one way that you can",
    "start": "700600",
    "end": "704680"
  },
  {
    "text": "um improve uh your your speed for",
    "start": "704680",
    "end": "707880"
  },
  {
    "text": "deploying microservices on uh on ECS so",
    "start": "707880",
    "end": "710639"
  },
  {
    "start": "710000",
    "end": "817000"
  },
  {
    "text": "what's happening inside of uh ECS is",
    "start": "710639",
    "end": "713680"
  },
  {
    "text": "when you're starting this instance now",
    "start": "713680",
    "end": "715839"
  },
  {
    "text": "you're running this weave router",
    "start": "715839",
    "end": "717279"
  },
  {
    "text": "container and it runs on each host each",
    "start": "717279",
    "end": "720000"
  },
  {
    "text": "instance and so the uh weave router",
    "start": "720000",
    "end": "724600"
  },
  {
    "text": "allocates IP addresses to Containers so",
    "start": "724600",
    "end": "726800"
  },
  {
    "text": "it does that by dividing up the IP",
    "start": "726800",
    "end": "730000"
  },
  {
    "text": "address space into segments so each",
    "start": "730000",
    "end": "732760"
  },
  {
    "text": "router that starts owns a different",
    "start": "732760",
    "end": "735360"
  },
  {
    "text": "segment of the IP address bace so the",
    "start": "735360",
    "end": "737000"
  },
  {
    "text": "routers coordinate with each other and",
    "start": "737000",
    "end": "739880"
  },
  {
    "text": "to divide and conquer on the IP address",
    "start": "739880",
    "end": "742040"
  },
  {
    "text": "space so there's address ranges are",
    "start": "742040",
    "end": "743360"
  },
  {
    "text": "non-overlapping what that means is that",
    "start": "743360",
    "end": "746079"
  },
  {
    "text": "a weave router local to a particular",
    "start": "746079",
    "end": "747920"
  },
  {
    "text": "instance can hand out IP addresses to",
    "start": "747920",
    "end": "749639"
  },
  {
    "text": "containers that start on that same",
    "start": "749639",
    "end": "751720"
  },
  {
    "text": "instance and they're guaranteed not to",
    "start": "751720",
    "end": "753720"
  },
  {
    "text": "be",
    "start": "753720",
    "end": "754600"
  },
  {
    "text": "duplicates of any other IP addresses",
    "start": "754600",
    "end": "756720"
  },
  {
    "text": "running anywhere else and so event what",
    "start": "756720",
    "end": "758480"
  },
  {
    "text": "you get is this eventually",
    "start": "758480",
    "end": "760120"
  },
  {
    "text": "consistent uh Network topology and then",
    "start": "760120",
    "end": "763680"
  },
  {
    "text": "the routers um exchange updates the",
    "start": "763680",
    "end": "767079"
  },
  {
    "text": "gossip updates to other weave routers",
    "start": "767079",
    "end": "771040"
  },
  {
    "text": "and that's how they build up this view",
    "start": "771040",
    "end": "773240"
  },
  {
    "text": "the topology so the router also",
    "start": "773240",
    "end": "775600"
  },
  {
    "text": "maintains that IP address to DNS name",
    "start": "775600",
    "end": "777480"
  },
  {
    "text": "mapping and as I as containing start on",
    "start": "777480",
    "end": "779959"
  },
  {
    "text": "other hosts and the weave router hands",
    "start": "779959",
    "end": "783320"
  },
  {
    "text": "out the IP addresses you know the",
    "start": "783320",
    "end": "784959"
  },
  {
    "text": "updates come over in a gossip update and",
    "start": "784959",
    "end": "787399"
  },
  {
    "text": "so over time all of the routers learn",
    "start": "787399",
    "end": "789199"
  },
  {
    "text": "about all the containers their IP",
    "start": "789199",
    "end": "790519"
  },
  {
    "text": "addresses and their",
    "start": "790519",
    "end": "793000"
  },
  {
    "text": "names it's a very simple DNS server it",
    "start": "793000",
    "end": "795440"
  },
  {
    "text": "just responds to that local domain",
    "start": "795440",
    "end": "797880"
  },
  {
    "text": "anything that it doesn't recognize as",
    "start": "797880",
    "end": "799199"
  },
  {
    "text": "being part of the local domain it just",
    "start": "799199",
    "end": "800440"
  },
  {
    "text": "passes on to the regular name resolver",
    "start": "800440",
    "end": "803279"
  },
  {
    "text": "same um method of connectivity between",
    "start": "803279",
    "end": "805360"
  },
  {
    "text": "hosts VX land so this rides on top of",
    "start": "805360",
    "end": "807560"
  },
  {
    "text": "your VPC inside of",
    "start": "807560",
    "end": "810240"
  },
  {
    "text": "AWS right and so all containers on this",
    "start": "810240",
    "end": "812600"
  },
  {
    "text": "local bridge and they're all connected",
    "start": "812600",
    "end": "813760"
  },
  {
    "text": "to this vxlan uh so it just rides on top",
    "start": "813760",
    "end": "816399"
  },
  {
    "text": "of the existing Network that you have",
    "start": "816399",
    "end": "817959"
  },
  {
    "start": "817000",
    "end": "872000"
  },
  {
    "text": "when you deploy onto ECS uh if you put",
    "start": "817959",
    "end": "820440"
  },
  {
    "text": "all of your instances into an",
    "start": "820440",
    "end": "822480"
  },
  {
    "text": "autoscaling group then the weave routers",
    "start": "822480",
    "end": "826040"
  },
  {
    "text": "uh realize they're inside of an",
    "start": "826040",
    "end": "827480"
  },
  {
    "text": "autoscaling group and they can use that",
    "start": "827480",
    "end": "829720"
  },
  {
    "text": "API to learn about each other so you",
    "start": "829720",
    "end": "831360"
  },
  {
    "text": "don't have to tell uh the zero",
    "start": "831360",
    "end": "834399"
  },
  {
    "text": "configuration here you don't need to",
    "start": "834399",
    "end": "835480"
  },
  {
    "text": "tell one weave router about the other",
    "start": "835480",
    "end": "836880"
  },
  {
    "text": "weave routers because they can learn",
    "start": "836880",
    "end": "838720"
  },
  {
    "text": "that information directly from the aut",
    "start": "838720",
    "end": "840680"
  },
  {
    "text": "scaling group we also use uh we've got a",
    "start": "840680",
    "end": "843440"
  },
  {
    "text": "a beater of a cloud service version of",
    "start": "843440",
    "end": "845639"
  },
  {
    "text": "the thing that I just ran on my laptop",
    "start": "845639",
    "end": "847079"
  },
  {
    "text": "for scope there uh and so this runs uh",
    "start": "847079",
    "end": "850279"
  },
  {
    "text": "on AWS today um and we're using",
    "start": "850279",
    "end": "854320"
  },
  {
    "text": "kubernetes for the scheduler for that",
    "start": "854320",
    "end": "857360"
  },
  {
    "text": "but it gives you an idea of you know how",
    "start": "857360",
    "end": "859800"
  },
  {
    "text": "we can use this technology build",
    "start": "859800",
    "end": "862399"
  },
  {
    "text": "microservices uh and make things uh run",
    "start": "862399",
    "end": "864800"
  },
  {
    "text": "faster and easier on ECS",
    "start": "864800",
    "end": "867480"
  },
  {
    "text": "[Music]",
    "start": "867480",
    "end": "874110"
  }
]