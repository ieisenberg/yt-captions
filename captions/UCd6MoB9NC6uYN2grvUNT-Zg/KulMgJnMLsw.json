[
  {
    "text": "all right so uh thanks to coming to the the session today scaling to your first 10 million",
    "start": "900",
    "end": "6660"
  },
  {
    "text": "users my name is Brett Holman I'm a manager of solutions architecture at Amazon web services you should be",
    "start": "6660",
    "end": "13920"
  },
  {
    "text": "here learn to learn more about scaling on AWS we're going to talk about scaling fault tolerance and how to scale your",
    "start": "13920",
    "end": "20039"
  },
  {
    "text": "app kind of throughout the life cycle of the first user all the way to the 10 millionth and Beyond so that that is",
    "start": "20039",
    "end": "25320"
  },
  {
    "text": "that is the session for today we'll go through a broad range of you know steps your application will make on that Journey",
    "start": "25320",
    "end": "32279"
  },
  {
    "text": "so how do you start off scaling um you know and there's there's lots of",
    "start": "32279",
    "end": "37320"
  },
  {
    "text": "documentation out there how to's guides topics people with opinions all of that",
    "start": "37320",
    "end": "42920"
  },
  {
    "text": "you know and where a lot of people are going to start they're going to start with a search engine that's pretty common",
    "start": "42920",
    "end": "49140"
  },
  {
    "text": "um that's where I'm going to start I'm probably going to do a search on Google for something I want to learn about and",
    "start": "49140",
    "end": "54539"
  },
  {
    "text": "um you know as you see you're going to get about a half million plus topics back so it's a lot of things to read you",
    "start": "54539",
    "end": "61559"
  },
  {
    "text": "know so is that a good place to start you know I would say probably not this",
    "start": "61559",
    "end": "66900"
  },
  {
    "text": "isn't where you want to start here unfortunately you know we didn't get the best result which shows us exactly a",
    "start": "66900",
    "end": "72299"
  },
  {
    "text": "how-to guide on scaling your application Auto scaling which is mentioned here on",
    "start": "72299",
    "end": "78479"
  },
  {
    "text": "the on the overhead this is actually a destination it's a it's a tool we may",
    "start": "78479",
    "end": "83580"
  },
  {
    "text": "use or we are going to use later in the the discussion today but it's not the end-all be-all it's not where you start from so",
    "start": "83580",
    "end": "89640"
  },
  {
    "text": "you know I think you know let's talk about where we do start first where do we start when",
    "start": "89640",
    "end": "94979"
  },
  {
    "text": "we want to build an app out day one and um first I want to do some level setting so everybody's on the same page we're",
    "start": "94979",
    "end": "101220"
  },
  {
    "text": "going to go through some Basics and then we'll dive into your day one application on AWS so so first off AWS has 11",
    "start": "101220",
    "end": "108960"
  },
  {
    "text": "regions around the world five continents are covered we got regions in U.S West U.S east U.S West",
    "start": "108960",
    "end": "116759"
  },
  {
    "text": "Oregon we have an itar compliant region called gov cloud in the US where itar compliant workloads there's also two",
    "start": "116759",
    "end": "123180"
  },
  {
    "text": "regions in Europe a few in Asia Australia South America Brazil so a",
    "start": "123180",
    "end": "128220"
  },
  {
    "text": "region is like an island you know you can think of it as a place where we have multiple data centers and more or less a",
    "start": "128220",
    "end": "133860"
  },
  {
    "text": "metropolitan area and so it's going to be many data centers and and each one of those",
    "start": "133860",
    "end": "140400"
  },
  {
    "text": "regions you know when you actually put your data into a region your data stays in that region I mean you can always move it you can copy it but it's not",
    "start": "140400",
    "end": "146160"
  },
  {
    "text": "going to move outside of that geographic area without you knowing about it you know you have control so so um",
    "start": "146160",
    "end": "152099"
  },
  {
    "text": "regions are made of availability zones so we I mentioned data centers I didn't want to mention availability zones until",
    "start": "152099",
    "end": "157739"
  },
  {
    "text": "I kind of defined what it is but essentially an availability zone is a data center or a cluster of data centers",
    "start": "157739",
    "end": "163700"
  },
  {
    "text": "on a piece of property like a campus environment so in some cases we've outgrown that single data center in one",
    "start": "163700",
    "end": "169980"
  },
  {
    "text": "piece of property we've grown up to two or three or more on a single piece of property so an availability zone is is a",
    "start": "169980",
    "end": "176099"
  },
  {
    "text": "cluster of data centers on a piece of property in every region has two or more oftentimes three or more availability",
    "start": "176099",
    "end": "181739"
  },
  {
    "text": "zones each one of these availability zones is built to be fault tolerant from each other so they're on different Power",
    "start": "181739",
    "end": "187920"
  },
  {
    "text": "grids floodplains they have different tier one internet service providers multiple of those there's multiple routes of fiber between the availability",
    "start": "187920",
    "end": "194099"
  },
  {
    "text": "zones in the region it's low latency you're looking at single like low single digit millisecond ping times for latency",
    "start": "194099",
    "end": "200280"
  },
  {
    "text": "between availability zones so I mean in the end we're going to talk much more about this today but you can actually",
    "start": "200280",
    "end": "205860"
  },
  {
    "text": "build apps that span regions or a single region so your app lives within a single region we're gonna we're gonna talk more",
    "start": "205860",
    "end": "211260"
  },
  {
    "text": "about that in the coming slides so lastly on the kind of the geography side",
    "start": "211260",
    "end": "217980"
  },
  {
    "text": "we have over 50 Edge locations around the world it's constantly growing we're constantly adding New Edge locations to",
    "start": "217980",
    "end": "224220"
  },
  {
    "text": "get closer to our customers where people are putting the most demand and so on essentially these represent our CDN or",
    "start": "224220",
    "end": "231000"
  },
  {
    "text": "our route which is cloudfront our content delivery Network called cloudfront or our DNS service called",
    "start": "231000",
    "end": "236700"
  },
  {
    "text": "Route 53 and these are Geographic Services if you want to do a DNS resolution you're going to end up at the",
    "start": "236700",
    "end": "242760"
  },
  {
    "text": "closest pop on this Edge location map same with a Content delivery if you're actually delivering content via your",
    "start": "242760",
    "end": "248819"
  },
  {
    "text": "application to a user and you're using our CDN cloudfront you'll go to the nearest pop on this map",
    "start": "248819",
    "end": "255720"
  },
  {
    "text": "so what do you need to build an application on AWS or in general just in",
    "start": "255720",
    "end": "261000"
  },
  {
    "text": "your own data center you know first off you need your data center right you need your your place where you're going to",
    "start": "261000",
    "end": "266820"
  },
  {
    "text": "um you know your physical footprint where you're going to put all of your other services in place so you need your your data centers you need your",
    "start": "266820",
    "end": "273840"
  },
  {
    "text": "foundational services like your compute storage and networking um then you've got your platform and",
    "start": "273840",
    "end": "279060"
  },
  {
    "text": "application Services things like um email um queuing messaging orchestration",
    "start": "279060",
    "end": "285780"
  },
  {
    "text": "deployment tools monitoring all those things are required and you know we have services in each one of these areas that",
    "start": "285780",
    "end": "292740"
  },
  {
    "text": "actually fit your particular needs lots of things at the platform and application Level so if you look down at",
    "start": "292740",
    "end": "298979"
  },
  {
    "text": "the bottom infrastructure is what we just talked about it's those regions availability zones and points of presence on our on our CDN Network",
    "start": "298979",
    "end": "305699"
  },
  {
    "text": "foundational Services infrastructure as a service you know what what um we're very famous for you know compute storage",
    "start": "305699",
    "end": "312080"
  },
  {
    "text": "networking you also have a bunch of controls for security and identity and access management so you can control who",
    "start": "312080",
    "end": "317580"
  },
  {
    "text": "has access to your AWS resources we have a ton of platform Services as well things in the database space for",
    "start": "317580",
    "end": "323759"
  },
  {
    "text": "relational databases nosql caching analytics for like Hadoop",
    "start": "323759",
    "end": "329220"
  },
  {
    "text": "real-time analytics for streaming ingest data warehousing automated workflows app",
    "start": "329220",
    "end": "334500"
  },
  {
    "text": "services for queuing orchestration email transcoding you name it we've got",
    "start": "334500",
    "end": "339780"
  },
  {
    "text": "deployment services for deploying applications for managing application life cycle template based template based",
    "start": "339780",
    "end": "348600"
  },
  {
    "text": "uh you know building out of your infrastructure a monitoring log tracking all of that kind of stuff and then lastly we've got some mobile tools for",
    "start": "348600",
    "end": "356820"
  },
  {
    "text": "mobile developers and then at the very top in the application layer we have our virtual desktops and collaboration and",
    "start": "356820",
    "end": "362280"
  },
  {
    "text": "sharing services so before we leave the overall Services",
    "start": "362280",
    "end": "367380"
  },
  {
    "text": "I wanted to define a few things I don't think this is said often enough so I think it's something that to note we",
    "start": "367380",
    "end": "373800"
  },
  {
    "text": "have services at the global level at the regional level and and at the local level um and I want to tell you what I mean by",
    "start": "373800",
    "end": "380160"
  },
  {
    "text": "that and then we're going to use these Concepts as we go through the talk so so first off at the global level we've got our CDN cloudfront and Route 53. those",
    "start": "380160",
    "end": "387780"
  },
  {
    "text": "things span the globe um nodes all over the place over 50. then as you get down to the regional",
    "start": "387780",
    "end": "394080"
  },
  {
    "text": "level we've got a bunch of inherently fault tolerance services that are self-healing scaling and all of that",
    "start": "394080",
    "end": "399680"
  },
  {
    "text": "and things like S3 our Cloud object storage so if you want to store an",
    "start": "399680",
    "end": "404940"
  },
  {
    "text": "object up in S3 we replicate your data all the way around the region multiple copies of it so it's really durable Dyno",
    "start": "404940",
    "end": "411539"
  },
  {
    "text": "DB when you do a write to our nosql dynamodb platform you're writing to multiple azs before you get a commit so",
    "start": "411539",
    "end": "417479"
  },
  {
    "text": "highly durable again elastic load balancing you can actually load balance traffic to multiple",
    "start": "417479",
    "end": "423120"
  },
  {
    "text": "availability zones to servers running into multiple availability zones on AWS so the load balancer is scalable it's",
    "start": "423120",
    "end": "429419"
  },
  {
    "text": "fault tolerant and it can spread traffic all the way through the region and lastly sqs it's our messaging service if",
    "start": "429419",
    "end": "435960"
  },
  {
    "text": "you want to you know you can always build out your own messaging service on ec2 but you can also use ours and it's",
    "start": "435960",
    "end": "441000"
  },
  {
    "text": "fault tolerant it's meant to scale with you so you don't have to worry about scaling it worrying about building a fault tolerance service sqs is just",
    "start": "441000",
    "end": "448139"
  },
  {
    "text": "there you can just put messages in there and get messages out so lastly the last concept here it's things that are local to an",
    "start": "448139",
    "end": "454919"
  },
  {
    "text": "availability Zone things like ec2 if you actually go and turn up a virtual server in the cloud I mean it is on a physical",
    "start": "454919",
    "end": "461400"
  },
  {
    "text": "piece of Hardware somewhere there is a host somewhere that's running that particular virtual server and if that",
    "start": "461400",
    "end": "466620"
  },
  {
    "text": "virtual server goes down that server's down right it's not fault tolerant by default but by building out an",
    "start": "466620",
    "end": "471840"
  },
  {
    "text": "architecture with a load balancer in front of it and spreading traffic across a tier of servers with our load",
    "start": "471840",
    "end": "477539"
  },
  {
    "text": "balancing service you can help check the server remove it from from uh processing requests no longer send traffic to it",
    "start": "477539",
    "end": "483539"
  },
  {
    "text": "and you actually have a little fault tolerant architecture with our load balancer and a couple ec2 instances so we're going to talk more about that as",
    "start": "483539",
    "end": "489599"
  },
  {
    "text": "the Taco's on so let's start out day one user one",
    "start": "489599",
    "end": "494819"
  },
  {
    "text": "which is probably you the developer that's building up this application so this is probably what your",
    "start": "494819",
    "end": "501720"
  },
  {
    "text": "architecture looks like in its most basic form um yeah you've got it ec2 instance",
    "start": "501720",
    "end": "507360"
  },
  {
    "text": "which is basically your server in the cloud and you're running your web and apps or your web server there your database server there any management",
    "start": "507360",
    "end": "513899"
  },
  {
    "text": "tools all that stuff is running on that single host or that single virtual server and then you're attaching an",
    "start": "513899",
    "end": "518940"
  },
  {
    "text": "elastic IP to it then you're going to go create a DNS entry that Maps your domain name to that",
    "start": "518940",
    "end": "524580"
  },
  {
    "text": "IP address and a record that maps that domain name to the IP address that you assigned to that ec2 instance and now",
    "start": "524580",
    "end": "530279"
  },
  {
    "text": "your users can get to that particular instance via Route 53 DNS lookup so so",
    "start": "530279",
    "end": "535740"
  },
  {
    "text": "this is kind of where you start and um you know we can get pretty far here but",
    "start": "535740",
    "end": "540980"
  },
  {
    "text": "scaling isn't you know I mean it's not forever here you know there is one option though there's vertical scaling so let's say we started off on a smaller",
    "start": "540980",
    "end": "547800"
  },
  {
    "text": "server instance we can always go to a bigger box this is the simplest approach to scaling",
    "start": "547800",
    "end": "554519"
  },
  {
    "text": "um really easy to edit assert so let's say I want to move from a small server to a large server I can just stop the",
    "start": "554519",
    "end": "559920"
  },
  {
    "text": "server edit the instance type change it to a larger instance type and reboot it a couple minutes later I've got a bigger",
    "start": "559920",
    "end": "565320"
  },
  {
    "text": "server running with the same IP address the same storage and all of that so there are a whole host of different",
    "start": "565320",
    "end": "570899"
  },
  {
    "text": "instance types we group them in what we call instance families so an instance family would be like the compute",
    "start": "570899",
    "end": "576720"
  },
  {
    "text": "optimized instances the c3s and C4s the uh Ohio optimized instances which would",
    "start": "576720",
    "end": "582600"
  },
  {
    "text": "be the iTunes or the memory Optimizer this is the r3s or the linear compute and RAM instances which are the M3s and",
    "start": "582600",
    "end": "588959"
  },
  {
    "text": "essentially what you want to do you want to take a look at your workload you want to look at the metrics and see where it",
    "start": "588959",
    "end": "594000"
  },
  {
    "text": "maxes out does it max out on CPU does it max out on memory or is it pretty linear or is it i o that is the thing that",
    "start": "594000",
    "end": "600180"
  },
  {
    "text": "limits my workload and you pick a family for your ec2 instance that follows you know where you're limited you know what",
    "start": "600180",
    "end": "606000"
  },
  {
    "text": "what metric do you max out on first and then inside of an instance family you got instant sizes right so you can",
    "start": "606000",
    "end": "612000"
  },
  {
    "text": "you know there's the t2 micro like we show in the bottom of this um there's also the c38xl so there's graduations in",
    "start": "612000",
    "end": "618959"
  },
  {
    "text": "each family of different instance sizes that have more horsepower so also we can leverage EBS optimized",
    "start": "618959",
    "end": "625680"
  },
  {
    "text": "instances which optimize our access over Network to storage and you can actually do provisioned i o for your storage as",
    "start": "625680",
    "end": "631800"
  },
  {
    "text": "well so you can say hey I need you know a really big Drive of this size and I want 10 000 iops or 20 000 iops and you",
    "start": "631800",
    "end": "638220"
  },
  {
    "text": "can do that as well so um so this is kind of our first spot in terms of scaling",
    "start": "638220",
    "end": "644160"
  },
  {
    "text": "you're going to eventually hit an endpoint though right this is only going to go so far you're not going to be running a web Scale app on one server I",
    "start": "644160",
    "end": "649560"
  },
  {
    "text": "hope so you know we can potentially get to a few hundred users maybe even a few",
    "start": "649560",
    "end": "656339"
  },
  {
    "text": "thousand depending upon our app complexity but we don't have any failover we don't have any redundancy",
    "start": "656339",
    "end": "661380"
  },
  {
    "text": "we've got a lot of eggs in one basket here not necessarily the best architecture but you know maybe Dev or",
    "start": "661380",
    "end": "667560"
  },
  {
    "text": "maybe standing up our initial POC or our MVP that we're putting out there this might be the way we do it you know I",
    "start": "667560",
    "end": "673500"
  },
  {
    "text": "would suggest there are probably some better architectures but nevertheless this might be the way a lot of people do it",
    "start": "673500",
    "end": "678720"
  },
  {
    "text": "so let's talk about day two we're still at user one or greater than one so",
    "start": "678720",
    "end": "684060"
  },
  {
    "text": "what's the first thing we can do to make our app a little bit better well first we can break apart the database and the",
    "start": "684060",
    "end": "690360"
  },
  {
    "text": "web app I mean that's just a basic thing right so here we've done just that we've actually separated the database instance from the web instance and now what can",
    "start": "690360",
    "end": "697079"
  },
  {
    "text": "we do we can actually scale those independently at each tier now we can vertically scale each one of those instances so we can go twice the size",
    "start": "697079",
    "end": "703140"
  },
  {
    "text": "and we might find that our our database scales much quicker needs to scale much quicker than our app or vice versa right",
    "start": "703140",
    "end": "709320"
  },
  {
    "text": "and we might find out that we want a memory optimized instance for our database server or or i o optimizers for",
    "start": "709320",
    "end": "716700"
  },
  {
    "text": "our database server and we want um you know a CPU optimized instance for our web so anyway this is our first starting",
    "start": "716700",
    "end": "723300"
  },
  {
    "text": "point so what are our database options if we're going to break out the database now first off you can run any database",
    "start": "723300",
    "end": "730980"
  },
  {
    "text": "on ec2 just about any database on ec2 I mean go and install it bring your own license",
    "start": "730980",
    "end": "737160"
  },
  {
    "text": "you know I mean if you if you're a DBA and you're comfortable snapshotting I'm doing backups patch management",
    "start": "737160",
    "end": "744899"
  },
  {
    "text": "um you know if you need to make it high availability and cluster it doing all of those types of things um this might be for you this also could",
    "start": "744899",
    "end": "750480"
  },
  {
    "text": "be for you let's say you've got something very unique you're trying to do and you really need to you know work with the hardware and have access to the",
    "start": "750480",
    "end": "756540"
  },
  {
    "text": "hardware on the database instance this might be the right place for you as well and also if you don't have",
    "start": "756540",
    "end": "761940"
  },
  {
    "text": "um if one of our other Solutions doesn't accommodate you but we think you know there are some better options out there and um RDS would potentially be one of",
    "start": "761940",
    "end": "769320"
  },
  {
    "text": "those right RDS is our relational database service so it's a postgres MySQL SQL server and Oracle and we",
    "start": "769320",
    "end": "776579"
  },
  {
    "text": "manage it for you so it's database as a service we launch it kind of with a general standard default config that's",
    "start": "776579",
    "end": "782700"
  },
  {
    "text": "good for that particular database and you can change the sizes you want just like you could a server you can also",
    "start": "782700",
    "end": "788100"
  },
  {
    "text": "scale the storage you can say I want to go from 100 gigs to 200 gigs you can also cluster it high availability set up",
    "start": "788100",
    "end": "793920"
  },
  {
    "text": "Snapshot management and Patch management we take care of it all for you just set it up on a schedule so it's a really great service to get started with",
    "start": "793920",
    "end": "800459"
  },
  {
    "text": "um and and lastly you know I talked about the high seek the high availability clustering you can also do read replicas with postgres in MySQL so",
    "start": "800459",
    "end": "807660"
  },
  {
    "text": "that's a pretty powerful tool as well dynamodb is our manage no SQL offering it's SSD backed we call it zero admin",
    "start": "807660",
    "end": "816600"
  },
  {
    "text": "because there's really just a crank you just kind of Say Hey I want this many reads and writes per second and that's",
    "start": "816600",
    "end": "822000"
  },
  {
    "text": "all you really crank and we Auto scale it on the back end based upon the size of the database or the size of the table I should say and how many reads and",
    "start": "822000",
    "end": "828360"
  },
  {
    "text": "writes per second you're trying to do so if you've ever heard of the Dynamo white paper back in 2003 this is really",
    "start": "828360",
    "end": "834180"
  },
  {
    "text": "the the um that was kind of the grandfather of a lot of nosql engines like Cassandra it was written by Amazon",
    "start": "834180",
    "end": "840660"
  },
  {
    "text": "back in 2003 well this is kind of the evolution of that this would be like the cousin you know three generations later",
    "start": "840660",
    "end": "845880"
  },
  {
    "text": "or something like that um redshift is our petabyte scale data warehouse",
    "start": "845880",
    "end": "851579"
  },
  {
    "text": "fast power powerful you can start off with one node um scale it to many nodes you speak to it with ANSI SQL over the",
    "start": "851579",
    "end": "857700"
  },
  {
    "text": "wire you know it's really great in terms of price performance as well so you can",
    "start": "857700",
    "end": "863519"
  },
  {
    "text": "start off really small on a single node but it's massively parallel you can scale up to 100 nodes so your workload might only require one small node to",
    "start": "863519",
    "end": "869579"
  },
  {
    "text": "start but you might go to you know like 108 Excel nodes to finish and you might be running at petabyte scale on this",
    "start": "869579",
    "end": "875160"
  },
  {
    "text": "data warehouse so you know it comes in at a fraction of the cost of a lot of the other database or data warehouse engines out there",
    "start": "875160",
    "end": "881880"
  },
  {
    "text": "so how do you choose which technology to start with here do you want to start with SQL nosql is Data Warehouse right",
    "start": "881880",
    "end": "888120"
  },
  {
    "text": "to start probably not um unless you're just doing an analytical tool some people aren't going",
    "start": "888120",
    "end": "893579"
  },
  {
    "text": "to like this but you should start with a SQL database I mean every application has a SQL database somewhere in their",
    "start": "893579",
    "end": "900180"
  },
  {
    "text": "architecture I mean for the most part and pretty much everything you see out there today has that so SQL is a great place to start",
    "start": "900180",
    "end": "906959"
  },
  {
    "text": "it's established it's well worn technology there's lots of existing code books tutorials how to's lots of people",
    "start": "906959",
    "end": "914699"
  },
  {
    "text": "most importantly right lots of people know SQL probably majority of people in the room do so when you're trying to",
    "start": "914699",
    "end": "920760"
  },
  {
    "text": "hire people it's pretty easy to hire people that know SQL if you go to nosql how many people are running at scale and",
    "start": "920760",
    "end": "926040"
  },
  {
    "text": "really know how to do that really well I mean it's it's a much smaller number you're probably not going to break SQL in your",
    "start": "926040",
    "end": "931740"
  },
  {
    "text": "first 10 million users either and there's a little asterisk on that you know you might be doing something weird",
    "start": "931740",
    "end": "937339"
  },
  {
    "text": "or have massive rapid ingest and there might be a case for nosql but chances",
    "start": "937339",
    "end": "942480"
  },
  {
    "text": "are most people aren't going to break SQL in their first 10 million users and we're going to talk about the clear patterns the scalability for for SQL",
    "start": "942480",
    "end": "949320"
  },
  {
    "text": "databases as well today and nosql as well but you know later in the talk but um you know there are clear patterns of",
    "start": "949320",
    "end": "954720"
  },
  {
    "text": "scalability that people know how to execute so you said massive amounts of data well",
    "start": "954720",
    "end": "959760"
  },
  {
    "text": "you might be thinking I have massive amounts of data and maybe there's a couple of you that do but let's let's clarify what massive amounts of data",
    "start": "959760",
    "end": "966839"
  },
  {
    "text": "means um you know if you're if you're usage is such that you're bringing in several terabytes of data in your first year or",
    "start": "966839",
    "end": "973440"
  },
  {
    "text": "you have an incredibly data intensive workload like thousands of transactions per second coming in or thousands of",
    "start": "973440",
    "end": "979199"
  },
  {
    "text": "writes per second or many thousands of writes per second maybe then you know this is right for you maybe maybe no SQL",
    "start": "979199",
    "end": "984240"
  },
  {
    "text": "is right for you and we're going to talk about some of the use cases for nosql later but you know I mean there's a few other",
    "start": "984240",
    "end": "990180"
  },
  {
    "text": "use cases super low latency applications metadata driven data sets highly non-relational data that doesn't store",
    "start": "990180",
    "end": "995579"
  },
  {
    "text": "well in a in a schema things that require seamless data constructs and they ask us there not just because the",
    "start": "995579",
    "end": "1002420"
  },
  {
    "text": "developers are lazy and don't want to define a schema it's pretty easy to define a schema and relational you know databases are easy to use so you know",
    "start": "1002420",
    "end": "1009500"
  },
  {
    "text": "that's not a good excuse again massive amounts of data or stuff that's got rapid ingests so",
    "start": "1009500",
    "end": "1015380"
  },
  {
    "text": "so now we're getting up to over 100 users we separated our tiers our web and",
    "start": "1015380",
    "end": "1020839"
  },
  {
    "text": "app tier um we're going to use RDS now for our database of choice and we're going to",
    "start": "1020839",
    "end": "1026058"
  },
  {
    "text": "use MySQL in this particular scenario because it's you know it's AWS is going to manage it for us we just need to",
    "start": "1026059",
    "end": "1031819"
  },
  {
    "text": "manage the tables the indexing the kind of the standard stuff around tuning but not necessarily the hardware the",
    "start": "1031819",
    "end": "1037579"
  },
  {
    "text": "snapshotting and all the other things that aren't a huge value add for most applications because AWS can take care",
    "start": "1037579",
    "end": "1042918"
  },
  {
    "text": "of those on the back side so as we start scaling up to over a thousand users and we want to start",
    "start": "1042919",
    "end": "1048980"
  },
  {
    "text": "talking about and thinking about our fault tolerance our lack of failure or",
    "start": "1048980",
    "end": "1054140"
  },
  {
    "text": "lack of failover our redundancy issues so first thing we're going to do we're going to get rid of that elastic IP we're going to go create an elastic load",
    "start": "1054140",
    "end": "1060620"
  },
  {
    "text": "balancer and with Route 53 we can create an a Alias record that points directly the whole domain directly at the elb or",
    "start": "1060620",
    "end": "1067400"
  },
  {
    "text": "we can do a cname to a particular subdomain and then behind that elb we're going to",
    "start": "1067400",
    "end": "1073220"
  },
  {
    "text": "put a couple web instances in different availability zones right now we can spread traffic to",
    "start": "1073220",
    "end": "1078260"
  },
  {
    "text": "multiple availability zones and you know vernervogel's AWS CTO always says",
    "start": "1078260",
    "end": "1083780"
  },
  {
    "text": "everything fails when you're talking about Hardware software everything fails so build things that are fault tolerant",
    "start": "1083780",
    "end": "1089660"
  },
  {
    "text": "by Nature right at every tier of your application that's a really common thing he says in a lot of his talks so you",
    "start": "1089660",
    "end": "1094880"
  },
  {
    "text": "know elb is is self-healing on its own and it scales organically and now our web instances you'll be also health",
    "start": "1094880",
    "end": "1101539"
  },
  {
    "text": "checks our instances so so now now we'll serve traffic to two instances if one of them goes down we still got another and",
    "start": "1101539",
    "end": "1106640"
  },
  {
    "text": "then lastly we've got a clustered when I say clustered we've got a high availability database for MySQL we've",
    "start": "1106640",
    "end": "1112100"
  },
  {
    "text": "got a master and we've got a slave and we're synchronously replicating to the slave as we write to the master so um so",
    "start": "1112100",
    "end": "1118160"
  },
  {
    "text": "if that Master goes down will automatically fail over to the slave your application will use the same",
    "start": "1118160",
    "end": "1123320"
  },
  {
    "text": "connection string you don't have to write any logic around that as the DNS fails over and the master is up you can nomadic automatically start hitting the",
    "start": "1123320",
    "end": "1129679"
  },
  {
    "text": "master as soon as it's up small little little amount of downtime and then we'll start spinning up another slave and",
    "start": "1129679",
    "end": "1135020"
  },
  {
    "text": "another availability zones so so we've got a high availability um or a pretty well architected application",
    "start": "1135020",
    "end": "1140720"
  },
  {
    "text": "here for a thousand users or a little over a thousand users so um so let's quickly talk about what",
    "start": "1140720",
    "end": "1146780"
  },
  {
    "text": "elastic load balancing is so it's a highly scalable self-healing load balancing service that can distribute",
    "start": "1146780",
    "end": "1153679"
  },
  {
    "text": "load across multiple availabilities almost to multiple ec2 instances it does health checks that's really key",
    "start": "1153679",
    "end": "1159860"
  },
  {
    "text": "you can set up a health check on your particular web or app tier or whatever and and then the load balancer will go",
    "start": "1159860",
    "end": "1168380"
  },
  {
    "text": "check it and you can set up the interval how often it checks it and it'll if it fails you can actually fail it out of the tier and you can make that a really",
    "start": "1168380",
    "end": "1175400"
  },
  {
    "text": "deep health check that hits your database or could be a really simple health check that just says yeah the web server is up 200 okay you know so so",
    "start": "1175400",
    "end": "1181700"
  },
  {
    "text": "pretty powerful there it also supports SSL termination so you can terminal your SSL in the load balancer not on your",
    "start": "1181700",
    "end": "1187160"
  },
  {
    "text": "your servers take that load off of the servers it also supports sticky sessions",
    "start": "1187160",
    "end": "1192380"
  },
  {
    "text": "um so if you've got your session State stored on your server you can actually make sure that the load balancer will direct your user to the same server",
    "start": "1192380",
    "end": "1198679"
  },
  {
    "text": "every time and uh it publishes metrics to cloudwatch so you can actually track what it's doing you can actually push",
    "start": "1198679",
    "end": "1204140"
  },
  {
    "text": "logs out to S3 as well so yeah so so use elb um so you know we can get pretty far",
    "start": "1204140",
    "end": "1210320"
  },
  {
    "text": "scaling horizontally and vertically with this pattern that we got here tens to hundreds of thousands of users",
    "start": "1210320",
    "end": "1215480"
  },
  {
    "text": "um and this is what it looks like right we've got um we've got about eight web instances here",
    "start": "1215480",
    "end": "1222860"
  },
  {
    "text": "and we've got a master database replicating to a slave database and",
    "start": "1222860",
    "end": "1228080"
  },
  {
    "text": "we've got a series of read replicas in each availability Zone and we're doing all of our reads against the redirect because to take that weight off of the",
    "start": "1228080",
    "end": "1234740"
  },
  {
    "text": "master so we're only writing to the master but reading from these read replicas now we do this as a service we'll see on these rewrap because",
    "start": "1234740",
    "end": "1240620"
  },
  {
    "text": "they're not synchronously replicated to they use MySQL replication so they can be a hair behind so if you need to do a",
    "start": "1240620",
    "end": "1246919"
  },
  {
    "text": "consistent reading you might need to do it against the master but things that are typical that you can read out of the database you can read out of those read about because in typically if you don't",
    "start": "1246919",
    "end": "1252860"
  },
  {
    "text": "have a super write heavy application should be pretty close to in sync so",
    "start": "1252860",
    "end": "1257440"
  },
  {
    "text": "um so this is going to take us pretty far but you know we do care about performance and efficiency we kind of",
    "start": "1257900",
    "end": "1263720"
  },
  {
    "text": "have a monolith here that we've built out so we're going to talk about some ways to start separating out some things and shifting some things around so let's",
    "start": "1263720",
    "end": "1270559"
  },
  {
    "text": "start shifting some things around um we want to load lighten our load on the database and lighten our load on the",
    "start": "1270559",
    "end": "1276620"
  },
  {
    "text": "web tier so the first thing we can do is move some static content out of the web servers and move it out to S3 and",
    "start": "1276620",
    "end": "1282260"
  },
  {
    "text": "cloudfront so we're going to talk about that in a little bit and then we'll talk about moving session State and standard",
    "start": "1282260",
    "end": "1287299"
  },
  {
    "text": "common queries out to Cache so first off",
    "start": "1287299",
    "end": "1294440"
  },
  {
    "text": "all of your JavaScript your CSS your images your videos all that stuff that's static that's sitting on your web",
    "start": "1294440",
    "end": "1300080"
  },
  {
    "text": "servers imagine if you're getting thousands of hits you know or hundreds of hits a second and you're serving up",
    "start": "1300080",
    "end": "1305360"
  },
  {
    "text": "video or images and every time you know every time you get hit you're serving up that heavy content you don't have to",
    "start": "1305360",
    "end": "1310520"
  },
  {
    "text": "have that content on your web server that's something that works really well in s3s3 can be the origin for your static content and you can further put",
    "start": "1310520",
    "end": "1317659"
  },
  {
    "text": "cloudfront our Global CDN in front of it so you've got that content cached close to the users all over the globe and you",
    "start": "1317659",
    "end": "1323600"
  },
  {
    "text": "deliver it from a very close location helps increase your response time to your users and takes that load off of",
    "start": "1323600",
    "end": "1329419"
  },
  {
    "text": "your web servers so it's a really common pattern used by many of our customers",
    "start": "1329419",
    "end": "1335659"
  },
  {
    "text": "so what is S3 well it's a cloud object storage so you can store objects up in",
    "start": "1335659",
    "end": "1341659"
  },
  {
    "text": "S3 and you can reference those objects with a restful URL and you know the object you store in S3",
    "start": "1341659",
    "end": "1347900"
  },
  {
    "text": "you can have very tight fine-grained security permissions about who can get to that object you know with a particular credential or you can make it",
    "start": "1347900",
    "end": "1354980"
  },
  {
    "text": "public so that's what we want here for this public web app that we're talking about right but um",
    "start": "1354980",
    "end": "1360200"
  },
  {
    "text": "yeah that's a very common pattern right and then and then 11 nines of durability what does that mean well it means every",
    "start": "1360200",
    "end": "1366080"
  },
  {
    "text": "time I put an object in S3 we're replicating it around the region remember I said the data doesn't leave the region it doesn't you've got 11",
    "start": "1366080",
    "end": "1373220"
  },
  {
    "text": "nines of durability meaning that you know that that object's highly durable it's there's a check some placed on it",
    "start": "1373220",
    "end": "1379280"
  },
  {
    "text": "if one of the objects degrades will actually blow it away um and you know you're only going to be served up a good object so um this is",
    "start": "1379280",
    "end": "1385760"
  },
  {
    "text": "great again for things like JavaScript CSS images videos um backups logs a lot of people",
    "start": "1385760",
    "end": "1391700"
  },
  {
    "text": "centralize their logs to S3 you know commonplace for Hadoop to read out of or our data warehouse to ingest from so um",
    "start": "1391700",
    "end": "1398600"
  },
  {
    "text": "S3 is common for a lot of things and further you can put our Cloud front in",
    "start": "1398600",
    "end": "1404299"
  },
  {
    "text": "front of it and actually have a the global caching in front of it so um you know probably the last thing to note is",
    "start": "1404299",
    "end": "1410179"
  },
  {
    "text": "that um uh you know it's it's a it's a good logging endpoint for all the different services so you know a good place to um",
    "start": "1410179",
    "end": "1416900"
  },
  {
    "text": "to dump your Cloud front logs to dump your elb logs and to do introspection on your application as well and um further",
    "start": "1416900",
    "end": "1422900"
  },
  {
    "text": "you can actually tear off your data um so there's there's a glacier archival service which comes in at about a cent a",
    "start": "1422900",
    "end": "1428299"
  },
  {
    "text": "gig per month in most regions and um you can say you know like hey all this log data after 30 days I want to just put it",
    "start": "1428299",
    "end": "1433400"
  },
  {
    "text": "out in our archival location and pay a sent a gig versus whatever I'm paying in S3",
    "start": "1433400",
    "end": "1438679"
  },
  {
    "text": "so cloudfront is that Global caching capability for that content we can cache",
    "start": "1438679",
    "end": "1443780"
  },
  {
    "text": "static content all over the globe close to the user one of the things it also does though it can it can be put in",
    "start": "1443780",
    "end": "1448880"
  },
  {
    "text": "front of your site as a proxy back to your Dynamic origin back to your web stack so you can actually have your web",
    "start": "1448880",
    "end": "1453919"
  },
  {
    "text": "stack behind cloudfront and have a cloudfront local cloudfront node proxy the connection back and it actually",
    "start": "1453919",
    "end": "1460159"
  },
  {
    "text": "accelerates that connection so it actually speeds up the response time for dynamic content as well and",
    "start": "1460159",
    "end": "1465799"
  },
  {
    "text": "um it's great for streaming video lots of other Technologies it supports a zero TTL so when we talk about that Dynamic",
    "start": "1465799",
    "end": "1472039"
  },
  {
    "text": "content we can set a zero time to live zero second time to live on that origin that Dynamic origin such that we're",
    "start": "1472039",
    "end": "1478280"
  },
  {
    "text": "always going to look back to the origin excuse me to um to go you know go fetch on the dynamic",
    "start": "1478280",
    "end": "1484220"
  },
  {
    "text": "content out of your web stack we might set a high TTL over on the static content like a day or 10 days or",
    "start": "1484220",
    "end": "1489860"
  },
  {
    "text": "whatever and keep that stuff cached out on the edge oh actually a couple things here upper",
    "start": "1489860",
    "end": "1496580"
  },
  {
    "text": "right response time so it shows what a site in like what a representative site would would be for in terms of response",
    "start": "1496580",
    "end": "1502280"
  },
  {
    "text": "time and server load with no CDN with CDN for static content only and CDN for",
    "start": "1502280",
    "end": "1507440"
  },
  {
    "text": "static and dynamic content and this is a particular example of one particular site but you can see as you get to the",
    "start": "1507440",
    "end": "1513380"
  },
  {
    "text": "far end with static and dynamic content being cached by cloudfront your your server load and response time is at its",
    "start": "1513380",
    "end": "1518900"
  },
  {
    "text": "best at the bottom that's a representative example of a particular customer",
    "start": "1518900",
    "end": "1524659"
  },
  {
    "text": "who is running you know um it looks like under about five gigabits per second on that particular graph you know pretty",
    "start": "1524659",
    "end": "1530419"
  },
  {
    "text": "solid load but all of a sudden they spiked up to 60 gigabits per second well they had Cloud front in front of it and you know didn't cause any alarms to go",
    "start": "1530419",
    "end": "1537140"
  },
  {
    "text": "off or bells to ring because you know they they had an architecture that responded to it and cloudfront was proxying the majority of that traffic so",
    "start": "1537140",
    "end": "1543860"
  },
  {
    "text": "really you know isolated their application from that massive Spike of traffic",
    "start": "1543860",
    "end": "1549278"
  },
  {
    "text": "so next pattern here moving session State and common queries out of your",
    "start": "1549320",
    "end": "1555200"
  },
  {
    "text": "database so um why is it important to move session state",
    "start": "1555200",
    "end": "1560299"
  },
  {
    "text": "because we're going to talk about scaling out our tiers next and it's hard to scale out a tier when you have sticky",
    "start": "1560299",
    "end": "1565940"
  },
  {
    "text": "sessions going to a particular server instance let's say I've got my servers pegged at 95 CPU and I scale out and add",
    "start": "1565940",
    "end": "1572240"
  },
  {
    "text": "four more servers can I move those users on those servers that are pegged out and getting slow response times to those new",
    "start": "1572240",
    "end": "1577340"
  },
  {
    "text": "servers no I can't right because the session state is being stored on the server if I actually set up my server as",
    "start": "1577340",
    "end": "1583100"
  },
  {
    "text": "a stateless and move my session State out to something like dynamodb as in the architecture here",
    "start": "1583100",
    "end": "1589100"
  },
  {
    "text": "then you know my servers are stateless I look up my session State information in dynamodb and I can scale out and scale",
    "start": "1589100",
    "end": "1595039"
  },
  {
    "text": "down without worrying about losing session information for users so it's a good pattern also caching common queries",
    "start": "1595039",
    "end": "1602059"
  },
  {
    "text": "in cash is another good pattern and we're going to talk a little bit more about that as well so this this particular architecture shows those two",
    "start": "1602059",
    "end": "1607940"
  },
  {
    "text": "things happening here so we talked a little bit about dynamodb",
    "start": "1607940",
    "end": "1613640"
  },
  {
    "text": "so I'm just going to touch on it but again it's our manage provision throughput nosql further it has",
    "start": "1613640",
    "end": "1618980"
  },
  {
    "text": "connectors from a lot of the sdks to store session State automatically so you you just plug in the connector for like",
    "start": "1618980",
    "end": "1625159"
  },
  {
    "text": "PHP or Java or what have you and it'll automatically start taking that session State out of your app and pushing it up",
    "start": "1625159",
    "end": "1630740"
  },
  {
    "text": "to dynamodb tables so pretty powerful so you don't have to do a lot of heavy lifting to actually get that session",
    "start": "1630740",
    "end": "1636200"
  },
  {
    "text": "State moved out of those tiers and make your your tears stateless like we talked about um fast predictable again single dial to",
    "start": "1636200",
    "end": "1642980"
  },
  {
    "text": "crank I'm gonna have support for Json now and it supports larger item sizes as well so um pretty powerful and this is",
    "start": "1642980",
    "end": "1649159"
  },
  {
    "text": "like a managed database it can scale fairly infinitely um you know we've got examples of users",
    "start": "1649159",
    "end": "1654740"
  },
  {
    "text": "that are running at half a million reads and writes per second um you know imagine what you got to",
    "start": "1654740",
    "end": "1659779"
  },
  {
    "text": "scale out in terms of infrastructure and management to do that and this is zero admin so",
    "start": "1659779",
    "end": "1665559"
  },
  {
    "text": "elastic cache this is our hosted memcache D and redis service thing to",
    "start": "1665620",
    "end": "1670760"
  },
  {
    "text": "note here is it really speaks the same API as standard memcache D and redis the",
    "start": "1670760",
    "end": "1675860"
  },
  {
    "text": "you know the open source you know tools so but we handle the managing the cluster for you it'll allow you to scale",
    "start": "1675860",
    "end": "1681380"
  },
  {
    "text": "out nodes or self-healing and this again gives you very fast single low single digit millisecond response times from",
    "start": "1681380",
    "end": "1688220"
  },
  {
    "text": "queries so there's a good place for cash in there for caching common queries and taking that load off your database",
    "start": "1688220",
    "end": "1695419"
  },
  {
    "text": "so um I wanted to quickly talk about a caching pattern here what what would you do if you wanted to start caching common",
    "start": "1695419",
    "end": "1701900"
  },
  {
    "text": "queries how would you make that work well you know the if you've heard the lazy load pattern that's a good you know",
    "start": "1701900",
    "end": "1708980"
  },
  {
    "text": "you can pre-warm your cache by loading it all up with you know these common things you look up but you can also just",
    "start": "1708980",
    "end": "1714140"
  },
  {
    "text": "say hey I'm going to go look in the cache and my application is going to look in the cache if it finds the value I'm",
    "start": "1714140",
    "end": "1719720"
  },
  {
    "text": "looking for I return it my application uses it for processing if I don't have it in the cache I go to the database",
    "start": "1719720",
    "end": "1724880"
  },
  {
    "text": "look it up put it in the cache and then return it to the application and the next time and I can set a TTL on",
    "start": "1724880",
    "end": "1731059"
  },
  {
    "text": "that value as well time to live excuse me and uh and you know I might say you know this is good",
    "start": "1731059",
    "end": "1736220"
  },
  {
    "text": "for 10 seconds or this is good for 10 minutes or whatever it makes sense for that particular piece of data right but now um you know let's say I'm hitting",
    "start": "1736220",
    "end": "1742340"
  },
  {
    "text": "that that same value 10 times per second I'm taking a lot of load off my database and the cash is very faster response to",
    "start": "1742340",
    "end": "1748640"
  },
  {
    "text": "respond so um so so use caching to take load off your database for your common queries",
    "start": "1748640",
    "end": "1755779"
  },
  {
    "text": "and lastly move your Dynamic content out to cloudfront put cloudfront in front of",
    "start": "1755779",
    "end": "1761360"
  },
  {
    "text": "your your elastic load balancer in your web stack and again it's going to proxy the connections and accelerate that connectivity back to your origin so",
    "start": "1761360",
    "end": "1767779"
  },
  {
    "text": "you're going to get better better response time for your your pages that you're rendering as well as lower server load allowing you to shrink that that",
    "start": "1767779",
    "end": "1774020"
  },
  {
    "text": "web and app tier and that's probably what costs most in your application stack",
    "start": "1774020",
    "end": "1779179"
  },
  {
    "text": "so we're in a spot now where our application is much more lightweight than where we started",
    "start": "1779179",
    "end": "1784520"
  },
  {
    "text": "um you know so if you think about the beginning of our talk we had everything you know",
    "start": "1784520",
    "end": "1790700"
  },
  {
    "text": "boxed in there but we still have a pretty monolithic application right I mean this thing is a monolith all the business logic lives on those web",
    "start": "1790700",
    "end": "1797059"
  },
  {
    "text": "servers nothing's really separated out we did remove static content we did remove some caching on the database side",
    "start": "1797059",
    "end": "1802580"
  },
  {
    "text": "but you know um we're gonna we're gonna go a little further here but first we're going to",
    "start": "1802580",
    "end": "1807980"
  },
  {
    "text": "talk about Auto scaling and we're going to go back to the beginning of our talk so so Auto scaling is the resizing of",
    "start": "1807980",
    "end": "1814820"
  },
  {
    "text": "compute clusters on Demand right so you can take a tier like a web tier or an application tier and you can scale it",
    "start": "1814820",
    "end": "1821960"
  },
  {
    "text": "out horizontally or in horizontally as well and the way it works you basically",
    "start": "1821960",
    "end": "1828200"
  },
  {
    "text": "Define a launch configuration an auto scaling launch configuration which says every time I launch a server I want to",
    "start": "1828200",
    "end": "1833899"
  },
  {
    "text": "launch it just like this I'm going to use this image this Ami I'm going to use this is the user data I might want to",
    "start": "1833899",
    "end": "1840799"
  },
  {
    "text": "pass in and this is the instant size I want to launch and that's essentially what a launch configuration is then I go into find an auto scaling group and you",
    "start": "1840799",
    "end": "1847159"
  },
  {
    "text": "can see the auto scaling group down there I Want A Min of four servers in my tier and a Max of 200.",
    "start": "1847159",
    "end": "1852440"
  },
  {
    "text": "and I want to be in these two availability zones a US West 2C and US West 2B and um and then lastly I Define",
    "start": "1852440",
    "end": "1859100"
  },
  {
    "text": "a policy either a policy to scale by schedule or to scale by Metric and if I",
    "start": "1859100",
    "end": "1865340"
  },
  {
    "text": "want to scale by Metric I use cloud watch metrics and I can say hey when my application tier is over 80 CPU for over",
    "start": "1865340",
    "end": "1871340"
  },
  {
    "text": "five minutes let's scale up by two instances or four instances or however many makes sense right and if my",
    "start": "1871340",
    "end": "1877159"
  },
  {
    "text": "application is cooling down and my CPU is below 40 for say five minutes or 10 minutes I I might shrink by two or four",
    "start": "1877159",
    "end": "1883940"
  },
  {
    "text": "servers or whatever I want to do um let's say I want to let's say I know there's a particular time of the day I",
    "start": "1883940",
    "end": "1889940"
  },
  {
    "text": "don't want to start scaling as the traffic's coming but I know at 5 PM people get home from work traffic doubles on my site maybe at 4 30 I",
    "start": "1889940",
    "end": "1897500"
  },
  {
    "text": "double my fleet right so I can scale by schedule as well and I can scale down by schedule just the same",
    "start": "1897500",
    "end": "1904039"
  },
  {
    "text": "so um Auto scaling has a place in your tier especially where there's variability",
    "start": "1904039",
    "end": "1909440"
  },
  {
    "text": "so this is typical weekly traffic to amazon.com you can see the Peaks during the day the pits at night and imagine",
    "start": "1909440",
    "end": "1915980"
  },
  {
    "text": "where the provision capacity needs to be you know to accommodate a spike you need to be about 15 above those kind of",
    "start": "1915980",
    "end": "1921020"
  },
  {
    "text": "typical Peaks so this would be our provision capacity well imagine it's November and um",
    "start": "1921020",
    "end": "1928880"
  },
  {
    "text": "you've got Black Friday and Cyber Monday and your chart looks more like this where do I need to provision capacity to",
    "start": "1928880",
    "end": "1935779"
  },
  {
    "text": "um you know fulfill all these requests I need to provision it somewhere up there right",
    "start": "1935779",
    "end": "1941120"
  },
  {
    "text": "um so so I'm way above my normal usage and if you think about traditional data center six to 12 month planning cycle",
    "start": "1941120",
    "end": "1947779"
  },
  {
    "text": "right I may have done this way before November and way after November I'm going to have all this extra capacity sitting there that's being unused and",
    "start": "1947779",
    "end": "1955100"
  },
  {
    "text": "you know according to this graph 76 percent waste here so wouldn't it be better to do something",
    "start": "1955100",
    "end": "1961460"
  },
  {
    "text": "that was you know matching supply and demand like that where you just are using a little more",
    "start": "1961460",
    "end": "1967580"
  },
  {
    "text": "CPU than you need all the time well that's what Auto scaling lets you do so so that's why you want to use it",
    "start": "1967580",
    "end": "1973640"
  },
  {
    "text": "that's why you scale out tiers and that's what Amazon does that's what a whole host of AWS customers do that operate at web scale so",
    "start": "1973640",
    "end": "1979880"
  },
  {
    "text": "good tool to use so now we've got this application where over a half million users and we've got Auto scaling web",
    "start": "1979880",
    "end": "1986480"
  },
  {
    "text": "tier we've got um you know we're caching our content in front of our app with cloudfront where",
    "start": "1986480",
    "end": "1992960"
  },
  {
    "text": "you've got static content coming out of S3 our Dynamic content coming of our load balancer we're using Master Slave",
    "start": "1992960",
    "end": "1998120"
  },
  {
    "text": "databases with read replicas for the reads and all the common queries coming out of the cache and we've got all of our session State and dynamodb right and",
    "start": "1998120",
    "end": "2006340"
  },
  {
    "text": "um so we got a state list here we can scale out and scale down pretty easily and not worry about losing session data",
    "start": "2006340",
    "end": "2011860"
  },
  {
    "text": "for users so we're in a pretty good spot um",
    "start": "2011860",
    "end": "2017260"
  },
  {
    "text": "but uh what what's next you probably don't want to be deploying",
    "start": "2017260",
    "end": "2022299"
  },
  {
    "text": "all this stuff by hand and we're this architecture is going to get a lot more complicated as this goes on I mean as we start talking about web scale we're",
    "start": "2022299",
    "end": "2028360"
  },
  {
    "text": "going to have a lot of moving pieces here so you know this is a good point to kind of move over to this topic of",
    "start": "2028360",
    "end": "2034179"
  },
  {
    "text": "um automation so you know use automation um becomes really important there's a",
    "start": "2034179",
    "end": "2040120"
  },
  {
    "text": "whole bunch of tools inside of AWS to automate and make sure you're automating all the repetitive tasks and and your",
    "start": "2040120",
    "end": "2046179"
  },
  {
    "text": "release cycle or your your processing your software development and release cycle is very fine-tuned and you're",
    "start": "2046179",
    "end": "2051580"
  },
  {
    "text": "repetitive you're not doing things manually there's a whole host of third-party tools out there for",
    "start": "2051580",
    "end": "2057820"
  },
  {
    "text": "configuration management of instances and so on things like chef and puppet and ansible and many others and then",
    "start": "2057820",
    "end": "2064060"
  },
  {
    "text": "there's you know make sure you instrument your application as well monitoring metrics logging application",
    "start": "2064060",
    "end": "2069878"
  },
  {
    "text": "application performance monitoring these things are all really important there's a lot of great third-party tools out there you don't have to reinvent the",
    "start": "2069879",
    "end": "2075339"
  },
  {
    "text": "wheel um take a look at them so here are some of the AWS application",
    "start": "2075339",
    "end": "2080679"
  },
  {
    "text": "management tools I'm going to quickly touch on they kind of range from convenience to the most control so",
    "start": "2080679",
    "end": "2086138"
  },
  {
    "text": "elastic Beanstalk basically if I'm a developer I don't want to worry about my infrastructure I just want to write code and deploy it and just kind of specify a",
    "start": "2086139",
    "end": "2092858"
  },
  {
    "text": "few things in the GUI around what I want to scale from into beanstalk's great I just deploy with Git",
    "start": "2092859",
    "end": "2098080"
  },
  {
    "text": "or with Eclipse push my code to the the application Beanstalk will version it and deploy it",
    "start": "2098080",
    "end": "2104619"
  },
  {
    "text": "to the instances and you can even do blue green deployments with this as well",
    "start": "2104619",
    "end": "2109720"
  },
  {
    "text": "pretty cool for you know like a two-tier app or a three-tier app you know load balancer tier database",
    "start": "2109720",
    "end": "2117280"
  },
  {
    "text": "Ops works is an app application lifecycle management tool so what it",
    "start": "2117280",
    "end": "2123400"
  },
  {
    "text": "allows you to do is you can write layers so you can have a multi-layer app a more complex app with many layers and each",
    "start": "2123400",
    "end": "2130540"
  },
  {
    "text": "one of those layers you can use Chef recipes to manage that layer and out of",
    "start": "2130540",
    "end": "2135579"
  },
  {
    "text": "the box we've got many Chef recipes defined for many standard layers like a ruby app layer or a PHP lap app layer or",
    "start": "2135579",
    "end": "2142000"
  },
  {
    "text": "a Java app layer or a load balancing tier or a database tier or a management tier and monitoring tier so there's all",
    "start": "2142000",
    "end": "2148540"
  },
  {
    "text": "these layers you can just go use out of the box but you can also write any of your own custom layers you want to run  you can write a layer right",
    "start": "2148540",
    "end": "2154660"
  },
  {
    "text": "or whatever it might be so opsworks allows you to do that and then orchestrate the overall application",
    "start": "2154660",
    "end": "2160720"
  },
  {
    "text": "life cycle from opsworks so pretty cool cloud formation is infrastructure as code so what that is is it's a",
    "start": "2160720",
    "end": "2167200"
  },
  {
    "text": "declarative resource-based tool or or language I should say where you can go",
    "start": "2167200",
    "end": "2172480"
  },
  {
    "text": "out and script out all your resources for your application into a stack and you can say for my ec2 instance I want",
    "start": "2172480",
    "end": "2178780"
  },
  {
    "text": "to use this size and I wanted to play this many in an auto scaling group and I want to use this Army and here's my my",
    "start": "2178780",
    "end": "2184240"
  },
  {
    "text": "bootstrap actions that I'm going to pass in Via user data and here's the security groups that are going to go on it and you can Define all the relationships",
    "start": "2184240",
    "end": "2190119"
  },
  {
    "text": "right and then you can you can test deploying it just like you test your application you can test your infrastructure you can version it as",
    "start": "2190119",
    "end": "2197079"
  },
  {
    "text": "your application grows it's a very powerful very powerful tool lots of control there and then lastly",
    "start": "2197079",
    "end": "2202720"
  },
  {
    "text": "you can always manage everything on ec2 on your own and that but that requires a lot of hands and especially as we start",
    "start": "2202720",
    "end": "2207820"
  },
  {
    "text": "getting to web scale you're going to see that it would take an army to to manage manually deploying these things that would be very hard and lots of risk",
    "start": "2207820",
    "end": "2214240"
  },
  {
    "text": "there too so as we start getting up to 500 000 users plus we're going to start running",
    "start": "2214240",
    "end": "2220480"
  },
  {
    "text": "into issues with Speed and Performance so that's where you know a lot of these um you know monitoring and metrics tools",
    "start": "2220480",
    "end": "2225880"
  },
  {
    "text": "come into place it's really important to instrument your application um you know pay attention to what your",
    "start": "2225880",
    "end": "2232180"
  },
  {
    "text": "application is telling you and we're going to look at a couple dashboards coming up here also pay attention to",
    "start": "2232180",
    "end": "2237339"
  },
  {
    "text": "what your users are telling you talk to your super users find out who they are maybe send out a survey you know I mean",
    "start": "2237339",
    "end": "2242560"
  },
  {
    "text": "like your user is going to know what works really well on the page and what doesn't what areas your site don't respond well but don't load well what",
    "start": "2242560",
    "end": "2248260"
  },
  {
    "text": "crash you know all that kind of stuff so that's a good thing to do and remember to try to squeeze as much performance out of each service or component as",
    "start": "2248260",
    "end": "2254560"
  },
  {
    "text": "possible so this is a couple just representative",
    "start": "2254560",
    "end": "2259720"
  },
  {
    "text": "examples here you know you got your host level metrics from cloud watch you got your aggregate level metrics from cloudwatch what are they good for I mean",
    "start": "2259720",
    "end": "2265300"
  },
  {
    "text": "host level lets you drill into what's happening on a particular instance if there's an instance in trouble you can go drill into what's going on there is",
    "start": "2265300",
    "end": "2271359"
  },
  {
    "text": "it maxed out in CPU what's going on is it maxed out and I O aggregate level",
    "start": "2271359",
    "end": "2276880"
  },
  {
    "text": "metrics let you see what's happening on a tier for an application you can also use cloudwatch logs to push",
    "start": "2276880",
    "end": "2283000"
  },
  {
    "text": "all your logging to um to cloudwatch logs and you can set up alarms and metrics that capture an",
    "start": "2283000",
    "end": "2288880"
  },
  {
    "text": "event happening like hey if this event happens five times in some period um I want to know about it right and you know",
    "start": "2288880",
    "end": "2294760"
  },
  {
    "text": "you can be watching for something in your logs that happens you're like oh it alerts your your admins or your Ops people or whatever or perform an option",
    "start": "2294760",
    "end": "2301119"
  },
  {
    "text": "an action is performed right you you take that alarm send it out to a queue and you have some agent that's actually pulling that queue and doing some action",
    "start": "2301119",
    "end": "2307060"
  },
  {
    "text": "because of that so lots of things you can do with Cloud watch logs and and the metrics that come out of that in the alarming that comes out of that",
    "start": "2307060",
    "end": "2313119"
  },
  {
    "text": "lastly it's important to understand what's going on with your external site performance you know tools like pingdom",
    "start": "2313119",
    "end": "2318960"
  },
  {
    "text": "which are is in the bottom right corner here will tell you you know what your site's doing lastly I don't have a",
    "start": "2318960",
    "end": "2324220"
  },
  {
    "text": "picture of it but like something like New Relic app Dynamics application Performance Management tools are really key it allows you to drill into a",
    "start": "2324220",
    "end": "2331420"
  },
  {
    "text": "particular like a page render and see what each controller is doing and what database calls are happening and how",
    "start": "2331420",
    "end": "2336700"
  },
  {
    "text": "long everything takes at each step through processing that page and you can say oh well two-thirds of the time is",
    "start": "2336700",
    "end": "2342280"
  },
  {
    "text": "spent right here in this controller and this database action here and maybe I need an index or maybe I need X or Y or",
    "start": "2342280",
    "end": "2348280"
  },
  {
    "text": "Z I mean obviously you can go to more advanced profiling tools but this gives you a good aggregate view of what your application is doing so I'd take a look",
    "start": "2348280",
    "end": "2354520"
  },
  {
    "text": "at some of those tools as well as you're getting to this point so um there are there are a lot of",
    "start": "2354520",
    "end": "2360820"
  },
  {
    "text": "further application or improvements to be made in Breaking this application apart we're kind of at the base here",
    "start": "2360820",
    "end": "2366880"
  },
  {
    "text": "um we've got a web um an app layer that's running on the same server all of our business logic is in one place we basically got a monolith",
    "start": "2366880",
    "end": "2372520"
  },
  {
    "text": "right now um so what can we do next um what does SOA mean so so I actually was",
    "start": "2372520",
    "end": "2379780"
  },
  {
    "text": "looking for a good diagram for this particular slide and this is what turned up in in Google Images I thought it was",
    "start": "2379780",
    "end": "2385300"
  },
  {
    "text": "pretty funny um so it's not Sons of Anarchy it's Solutions or I'm service oriented",
    "start": "2385300",
    "end": "2390820"
  },
  {
    "text": "architecture excuse me um but that was pretty good um so really what this is about is",
    "start": "2390820",
    "end": "2396640"
  },
  {
    "text": "actually moving all of your services into different tiers and modules and then treating each of these as 100 separate pieces of your infrastructure",
    "start": "2396640",
    "end": "2403660"
  },
  {
    "text": "so you're going to be able to scale them up independently of each other so you can reach much greater scale that way",
    "start": "2403660",
    "end": "2408880"
  },
  {
    "text": "and you know AWS does this amazon.com does this hundreds of services are under the hood that represent what you guys",
    "start": "2408880",
    "end": "2415180"
  },
  {
    "text": "see in a handful of services or a handful of pages right so think of amazon.com you got recommendations going",
    "start": "2415180",
    "end": "2420880"
  },
  {
    "text": "on you've got a search bar you've got user reviews you've got all these things that plug into a page are those all part",
    "start": "2420880",
    "end": "2426220"
  },
  {
    "text": "of a monolithic application or do you think their independent Services running behind the scenes that are scaling on their own",
    "start": "2426220",
    "end": "2431619"
  },
  {
    "text": "it's going to be the latter so um I think this is actually a good",
    "start": "2431619",
    "end": "2437760"
  },
  {
    "text": "demonstration of something I was getting to earlier when I was talking about those self-scaling fault tolerance Services",
    "start": "2437760",
    "end": "2443880"
  },
  {
    "text": "you know loose coupling plus service oriented architecture really equals winning especially when you combine it",
    "start": "2443880",
    "end": "2449320"
  },
  {
    "text": "with services that are available out of the box that you can use today that will scale for you don't have to worry about",
    "start": "2449320",
    "end": "2455140"
  },
  {
    "text": "it you don't have to manage them you don't have to worry about them being fault tolerant they're full tolerant by default so there's lots of examples in",
    "start": "2455140",
    "end": "2461500"
  },
  {
    "text": "that platform and application tier that you can use to fit components of your architecture like hey we need to send",
    "start": "2461500",
    "end": "2467140"
  },
  {
    "text": "transactional emails and we want them highly deliverable well you can use Simple email service hey we want to decouple our application and put queuing",
    "start": "2467140",
    "end": "2473500"
  },
  {
    "text": "in between tiers simple queuing service simple notification service for Pub sub messaging and lots of examples here",
    "start": "2473500",
    "end": "2480579"
  },
  {
    "text": "orchestration Lambda and we're going to talk about simple queuing service and Lambda coming up here so",
    "start": "2480579",
    "end": "2485800"
  },
  {
    "text": "so what is simple queuing service it's really a reliable scalable queuing services for storing messages as they",
    "start": "2485800",
    "end": "2491680"
  },
  {
    "text": "travel between your your application tiers or between your instances right um so you know there's simple apis to",
    "start": "2491680",
    "end": "2498040"
  },
  {
    "text": "put messages and to get messages there's sdks for all the for all the major languages so you know it's really easy",
    "start": "2498040",
    "end": "2503140"
  },
  {
    "text": "to just do a put into a queue you know I typically put a Json message into a queue in a particular structure and then",
    "start": "2503140",
    "end": "2508420"
  },
  {
    "text": "my receiving instance knows how to read that Json as well right and um and they get the get out of a queue is very easy",
    "start": "2508420",
    "end": "2514359"
  },
  {
    "text": "as well just plug in the sdks for any of the major languages it can scale unlimited number of messages so it's",
    "start": "2514359",
    "end": "2521200"
  },
  {
    "text": "great to use little example here in the upper right let's say we had a photo CMS",
    "start": "2521200",
    "end": "2526960"
  },
  {
    "text": "so I've got a big photo CMS I've got users uploading thousands or millions of",
    "start": "2526960",
    "end": "2532240"
  },
  {
    "text": "images you know every week and um you know do I process those on the web",
    "start": "2532240",
    "end": "2537400"
  },
  {
    "text": "instance this would be a great example of you know decoupling right I probably don't want to create 10 different copies",
    "start": "2537400",
    "end": "2542859"
  },
  {
    "text": "of that image in different sizes for different form factors on my web instance what I want to do is I want to",
    "start": "2542859",
    "end": "2547900"
  },
  {
    "text": "just go store that back in S3 I want to put a message in the queue and I want to have something on the back end asynchronously out of the the you know",
    "start": "2547900",
    "end": "2554619"
  },
  {
    "text": "synchronous flow of my user you know I'm uploading that image go and create the 10 different copies so I put the message",
    "start": "2554619",
    "end": "2560680"
  },
  {
    "text": "in the queue to do the the rendering or that create all the different images and then I've got a back-end instance that",
    "start": "2560680",
    "end": "2565900"
  },
  {
    "text": "can or or tier of instances that can Auto Scale based upon queue depth",
    "start": "2565900",
    "end": "2571780"
  },
  {
    "text": "um to do all that that work on the back side so um and I can actually set up Auto scale methods that happen off of",
    "start": "2571780",
    "end": "2577660"
  },
  {
    "text": "qdep and sqs so I can say hey if my Q depth is X scale up",
    "start": "2577660",
    "end": "2583440"
  },
  {
    "text": "so um another pretty cool service that we released um into GA I think today",
    "start": "2584500",
    "end": "2590079"
  },
  {
    "text": "um if I'm not mistaken is uh Lambda it's an event driven compute um so you know they're calling this the",
    "start": "2590079",
    "end": "2596319"
  },
  {
    "text": "connective tissue for AWS Services it's a good way to describe it really what you do is you write a Lambda function",
    "start": "2596319",
    "end": "2601900"
  },
  {
    "text": "it's like it's stateless JavaScript code that can perform some action and um and",
    "start": "2601900",
    "end": "2607599"
  },
  {
    "text": "then uh you can once you've written the cloud function you can go and subscribe it to services and have events from the",
    "start": "2607599",
    "end": "2613060"
  },
  {
    "text": "services trigger a Lambda function to run so let's let's think about our",
    "start": "2613060",
    "end": "2618280"
  },
  {
    "text": "our our particular photo CMS example again here now um I can have Push events or I can have",
    "start": "2618280",
    "end": "2624700"
  },
  {
    "text": "pull capabilities out of Lambda as well and so in S3 you can actually set up an event hey when a new image lands in this",
    "start": "2624700",
    "end": "2631000"
  },
  {
    "text": "bucket um trigger the Lambda function send an event to the Lambda function and then Lambda will do all the resizing so now I",
    "start": "2631000",
    "end": "2637119"
  },
  {
    "text": "don't have to manage the queue and manage the um the auto scaling tier there I can have Lambda do it so sometimes Q with long polling might be",
    "start": "2637119",
    "end": "2643780"
  },
  {
    "text": "the best answer sometimes Lambda might be the best answer and further I can have it pull out of dynamodb streams and",
    "start": "2643780",
    "end": "2649119"
  },
  {
    "text": "do things I could have it go and check um you know the you know verify and address when an address goes into a",
    "start": "2649119",
    "end": "2654760"
  },
  {
    "text": "table in in dynamodb I could have it um pull from a Kinesis stream and take actions based upon something in the",
    "start": "2654760",
    "end": "2661119"
  },
  {
    "text": "Kinesis stream I can trigger events from SNS all sorts of things so lots of capabilities here in a bright future for",
    "start": "2661119",
    "end": "2667480"
  },
  {
    "text": "Lambda and it you know AWS manages manages deploying that JavaScript code on infrastructure and scaling it up for",
    "start": "2667480",
    "end": "2674440"
  },
  {
    "text": "you so you know as requests come in we scale out those JavaScript you know little compartments that are going to do",
    "start": "2674440",
    "end": "2679839"
  },
  {
    "text": "the work and shut down so so you know we on WE manage the infrastructure you don't really manage any infrastructure you just say I want to load this code",
    "start": "2679839",
    "end": "2685960"
  },
  {
    "text": "This Cloud function in JavaScript up to the cloud so",
    "start": "2685960",
    "end": "2691780"
  },
  {
    "text": "um I guess the whole point to all this right is loose coupling sets you free you know um the bigger the more Loosely",
    "start": "2691780",
    "end": "2698440"
  },
  {
    "text": "coupled your services are together the better you can scale so design everything as a black box and independently decouple the interactions",
    "start": "2698440",
    "end": "2705579"
  },
  {
    "text": "and favor services with built-in redundancy and scalability out of the box rather than Reinventing the wheel",
    "start": "2705579",
    "end": "2711099"
  },
  {
    "text": "and building your own there might be a place for that and we're going to talk about it coming up but you know when you're starting out and use those",
    "start": "2711099",
    "end": "2717099"
  },
  {
    "text": "services that are going to save a ton of time and effort so now we're approaching a million plus",
    "start": "2717099",
    "end": "2723040"
  },
  {
    "text": "users and um you know this is where we need to think a bit about all the previous things we've done so we might",
    "start": "2723040",
    "end": "2728800"
  },
  {
    "text": "have been going multi-az maybe we want to introduce a third availability Zone with an auto scaling you know tier that's going up there maybe more read",
    "start": "2728800",
    "end": "2734980"
  },
  {
    "text": "replicas out there another cache out there so we can accommodate more users in that way we always want to be load",
    "start": "2734980",
    "end": "2741040"
  },
  {
    "text": "balancing between all our tiers um to decouple those tiers so we're not having point-to-point connections",
    "start": "2741040",
    "end": "2746380"
  },
  {
    "text": "between servers deploy service oriented architecture as much as possible",
    "start": "2746380",
    "end": "2752020"
  },
  {
    "text": "um be serving all of our content out of S3 and cloudfront caching off our database separating session state from",
    "start": "2752020",
    "end": "2758440"
  },
  {
    "text": "Dynamo all those things are important here and this is what our architecture starts to look like right so now we've",
    "start": "2758440",
    "end": "2764800"
  },
  {
    "text": "got worker instances that are long pulling out of sqs to do stuff that wasn't you know that was originally part",
    "start": "2764800",
    "end": "2771339"
  },
  {
    "text": "of our web instances now we've moved that out and we can scale that organically or independently excuse me we also have an internal app instance",
    "start": "2771339",
    "end": "2777460"
  },
  {
    "text": "maybe I've got some web services running behind another load balancer and maybe my my app calls it maybe external maybe",
    "start": "2777460",
    "end": "2784240"
  },
  {
    "text": "it's an API server for our mobile app I don't know but it you know again I've decoupled that particular component of",
    "start": "2784240",
    "end": "2790119"
  },
  {
    "text": "my application I also might have Dynamo and S3 you know being processed by Lambda functions that are running out",
    "start": "2790119",
    "end": "2796119"
  },
  {
    "text": "there as well I'm using SES to do all my transactional email I'm calling that via API",
    "start": "2796119",
    "end": "2802140"
  },
  {
    "text": "so lastly I'm front ending my my web stack with cloudfront and I'm actually",
    "start": "2802140",
    "end": "2808500"
  },
  {
    "text": "front ending my my static content with cloudfront as well like we discussed before",
    "start": "2808500",
    "end": "2813640"
  },
  {
    "text": "you see what I'm doing on time um so what are the next big steps here that you want to take in your",
    "start": "2813640",
    "end": "2818740"
  },
  {
    "text": "application well as you're getting to five to ten million users this is where you might run into some database",
    "start": "2818740",
    "end": "2824800"
  },
  {
    "text": "contention issues on rights so how do you solve this",
    "start": "2824800",
    "end": "2829960"
  },
  {
    "text": "well we're using a relational database we've got some good patterns and we're going to talk about Federation and sharding so let's Dive Right In",
    "start": "2829960",
    "end": "2837060"
  },
  {
    "text": "so what is Federation well really it's where we're splitting up our database by function or purpose so you know we just",
    "start": "2837060",
    "end": "2844660"
  },
  {
    "text": "broke out our single database into a forums database in a user's database in a products database we might have many functions that that can live",
    "start": "2844660",
    "end": "2851200"
  },
  {
    "text": "independently of each other here and so they're in different databases but what do we lose here well",
    "start": "2851200",
    "end": "2856839"
  },
  {
    "text": "it's harder to do cross functional queries or joins across these these areas what do you have to do you got to",
    "start": "2856839",
    "end": "2862599"
  },
  {
    "text": "do that through code right my app would have to query one of those databases bring back the results and then take those IDs and put them into another",
    "start": "2862599",
    "end": "2868060"
  },
  {
    "text": "query over in the other database or something like that right it it removes it adds a little bit of",
    "start": "2868060",
    "end": "2873220"
  },
  {
    "text": "complexity but it allows us to not have to Shard for quite a long time we can go pretty far here by federating and not",
    "start": "2873220",
    "end": "2879040"
  },
  {
    "text": "having to Shard and we're going to talk about sharding next so this isn't going to help with a",
    "start": "2879040",
    "end": "2884200"
  },
  {
    "text": "single huge function or table and that's that's where we get into sharding so sharding is where I've got this",
    "start": "2884200",
    "end": "2890740"
  },
  {
    "text": "single huge function or table and it it you know it's it's running the bounds of my database right so I've got",
    "start": "2890740",
    "end": "2897160"
  },
  {
    "text": "to do something with it so now I'm going to carve it into multiple databases and um you know what I need to do is I need",
    "start": "2897160",
    "end": "2902980"
  },
  {
    "text": "to write some logic into my application layer or potentially use an orm that's going to understand hey user a is in",
    "start": "2902980",
    "end": "2908440"
  },
  {
    "text": "this database user B is in this database user C is in this database and the easiest way to think of it usually you",
    "start": "2908440",
    "end": "2914380"
  },
  {
    "text": "separate these things by key space and your orm understands what keys go in which database but if you want to think",
    "start": "2914380",
    "end": "2920260"
  },
  {
    "text": "of this in its most simplest form my users with the username that starts with a through LR in this database M through",
    "start": "2920260",
    "end": "2925599"
  },
  {
    "text": "S are in the second database T through zero in the third right that would be a very simple explanation of sharding",
    "start": "2925599",
    "end": "2931780"
  },
  {
    "text": "and really There's no practical limit I can keep on sharding as long as I'm using something to manage it smartly and",
    "start": "2931780",
    "end": "2938140"
  },
  {
    "text": "manage my key space smartly and you can do sharding on SQL or nosql so you know",
    "start": "2938140",
    "end": "2943300"
  },
  {
    "text": "this is what the people are doing with large Cassandra deployments as well and large deployments they're sharding their data across those this is what",
    "start": "2943300",
    "end": "2948700"
  },
  {
    "text": "dynamodb does on the back end for you so you talk about scaling Dynam up to half a million reads in writes per second",
    "start": "2948700",
    "end": "2955119"
  },
  {
    "text": "I mean something's happening on the back end right you just don't know about it we're managing it for you we're managing that scaling out of that database",
    "start": "2955119",
    "end": "2961240"
  },
  {
    "text": "infrastructure on the back end for you so you can actually you know handle that that amount of traffic so as you crank",
    "start": "2961240",
    "end": "2966940"
  },
  {
    "text": "that dial on Dynamo things like this are happening on the back end so you know maybe you want to move to",
    "start": "2966940",
    "end": "2973060"
  },
  {
    "text": "nosql functionality here it's similar in a sense to Federation in that you know each table is like its own database",
    "start": "2973060",
    "end": "2979480"
  },
  {
    "text": "right it there's no relation between them I can't do a cross table query and join these tables together to to grab",
    "start": "2979480",
    "end": "2985480"
  },
  {
    "text": "results from both that meets some criteria right so so I need to query a table get back the results and then",
    "start": "2985480",
    "end": "2991720"
  },
  {
    "text": "query another table and that's what happens in those SQL and that's why I said don't start with nosql start with SQL because it gives you a lot of things",
    "start": "2991720",
    "end": "2998560"
  },
  {
    "text": "out of the box that you don't get with nosql but there are cases where this is what you need to do if you start getting to web scale you know you there's",
    "start": "2998560",
    "end": "3005160"
  },
  {
    "text": "there's definitely probably going to be a place where nosql there might be a whole bunch of use cases for you know rapid ingestive data like click stream",
    "start": "3005160",
    "end": "3011640"
  },
  {
    "text": "data leaderboards um you know cart data temporary data files metadata lookup tables there's a",
    "start": "3011640",
    "end": "3017819"
  },
  {
    "text": "whole bunch of places where nosql is really great just make sure you're using it in the right spots so",
    "start": "3017819",
    "end": "3024480"
  },
  {
    "text": "okay so a quick review um multi-azier infrastructure and make use",
    "start": "3024480",
    "end": "3030780"
  },
  {
    "text": "of services that are you know designed out of the box to be scalable and fault tolerant and you don't have to you know",
    "start": "3030780",
    "end": "3035819"
  },
  {
    "text": "invent it yourself build in redundancy at every level of your application like we've discussed like definitely start",
    "start": "3035819",
    "end": "3042660"
  },
  {
    "text": "with SQL even if you're going to move to nosql at some point there's always a spot for SQL in almost every application",
    "start": "3042660",
    "end": "3048180"
  },
  {
    "text": "I've ever seen um cache data both inside and outside your infrastructure using the techniques",
    "start": "3048180",
    "end": "3053220"
  },
  {
    "text": "we discussed use automation Tools in your infrastructure make sure you're using metrics monitoring logging to",
    "start": "3053220",
    "end": "3060599"
  },
  {
    "text": "determine what changes you need to make and make sure that application is well instrumented so you you understand what",
    "start": "3060599",
    "end": "3066240"
  },
  {
    "text": "changes need to be made to your infrastructure split out as many components as you can",
    "start": "3066240",
    "end": "3071420"
  },
  {
    "text": "using soil principles use Auto scaling once you're ready for it you know like I said don't reinvent the wheel reuse",
    "start": "3071420",
    "end": "3077460"
  },
  {
    "text": "those those services that are out there for you and only move to nosql once it makes sense so",
    "start": "3077460",
    "end": "3082980"
  },
  {
    "text": "so you know putting this all together you really can get to the point where you're talking about delivering a",
    "start": "3082980",
    "end": "3088500"
  },
  {
    "text": "service to over 10 million users you know and this could really scale like onward you know to infinity and beyond",
    "start": "3088500",
    "end": "3094140"
  },
  {
    "text": "so um you can iterate on top of these patterns and get to 100 million plus users here",
    "start": "3094140",
    "end": "3100200"
  },
  {
    "text": "so um some of the things you might think about for going to that kind of scale more fine-tuning of your application",
    "start": "3100200",
    "end": "3105660"
  },
  {
    "text": "we're using a lot of the techniques we talked about more SOA I mean breakout every nook and cranny of your",
    "start": "3105660",
    "end": "3111420"
  },
  {
    "text": "application into a several separate component that can scale on its own maybe you were running multi-az and you",
    "start": "3111420",
    "end": "3116819"
  },
  {
    "text": "should still run multi AZ but maybe now you go to multi-region and you know like a great example of that",
    "start": "3116819",
    "end": "3123960"
  },
  {
    "text": "like think about Amazon's latency based routing if you haven't heard of that take take a look at it so what it does is it it allows a DNS request to come in",
    "start": "3123960",
    "end": "3131339"
  },
  {
    "text": "from a user and and latency based routing says where is the nearest Amazon region where that's running and it'll",
    "start": "3131339",
    "end": "3136680"
  },
  {
    "text": "route the traffic to the nearest region and you could have an app stack running in multiple regions around the world that are close to your customers now",
    "start": "3136680",
    "end": "3143280"
  },
  {
    "text": "that adds other complexities but if you're running it 100 million user scale you've got the engineering Force to",
    "start": "3143280",
    "end": "3148319"
  },
  {
    "text": "figure that out how you how you ship data around how you keep things in sync or how you redirect users back to other",
    "start": "3148319",
    "end": "3153900"
  },
  {
    "text": "regions all that kind of stuff right so um this might be this spot where you want to start running building custom",
    "start": "3153900",
    "end": "3160140"
  },
  {
    "text": "Solutions I mean you know maybe these out of the box Solutions don't fit your needs at 100 million users right there",
    "start": "3160140",
    "end": "3166260"
  },
  {
    "text": "might be some requirement or some nook and cranny that you can make better or squeeze some more performance out of by building it yourself and you've probably",
    "start": "3166260",
    "end": "3172079"
  },
  {
    "text": "got a good engineering staff to do that lastly just you know focus on deep analysis of your entire stack figure out",
    "start": "3172079",
    "end": "3177720"
  },
  {
    "text": "what you need to do and what makes sense so um next steps here would be you know",
    "start": "3177720",
    "end": "3184559"
  },
  {
    "text": "take a look at our documentation if you haven't seen it off of every page there's a documentation link off of every product page but you can find all",
    "start": "3184559",
    "end": "3191040"
  },
  {
    "text": "of them at aws.amazon.com documentation we have an architecture site that shows",
    "start": "3191040",
    "end": "3196260"
  },
  {
    "text": "a lot of these patterns there's also a place for startups if you want more information startups we have a",
    "start": "3196260",
    "end": "3202200"
  },
  {
    "text": "free tier um also all this stuff will be on YouTube so this talk will be on YouTube next",
    "start": "3202200",
    "end": "3208800"
  },
  {
    "text": "week I believe it's going to be posted along with these slides will be on SlideShare about a week out so you can take a look for them there",
    "start": "3208800",
    "end": "3215540"
  },
  {
    "text": "feel free to ask for help you know we've got forums we've got premium support or",
    "start": "3215540",
    "end": "3221099"
  },
  {
    "text": "find an account manager and a Solutions architect and um you know you can you can contact us if you don't have one",
    "start": "3221099",
    "end": "3226440"
  },
  {
    "text": "today from the website so thanks for listening really appreciate your time what I think we're",
    "start": "3226440",
    "end": "3233819"
  },
  {
    "text": "going to probably do I think there's a couple essays that I had join us here and we're kind of at the end of the hour so we're going to step to the back and",
    "start": "3233819",
    "end": "3240540"
  },
  {
    "text": "we'll answer questions while the next person is setting up up here so really wanted to thank you for listening also",
    "start": "3240540",
    "end": "3246180"
  },
  {
    "text": "inside of your application there's the ability to rate this let me know give me feedback we want to get better so thanks",
    "start": "3246180",
    "end": "3252780"
  },
  {
    "text": "again for coming [Applause]",
    "start": "3252780",
    "end": "3256780"
  }
]