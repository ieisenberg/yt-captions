[
  {
    "start": "0",
    "end": "60000"
  },
  {
    "text": "thank you everyone for attending scp-048 chance migration journey to AWS called",
    "start": "30",
    "end": "5580"
  },
  {
    "text": "pipeline conformation and ECS I'm the systems engineering manner manager for a",
    "start": "5580",
    "end": "10700"
  },
  {
    "text": "company based out of New York City we focus on healthcare analytics we also have offices in LA and Boston and",
    "start": "10700",
    "end": "17580"
  },
  {
    "text": "without further ado let's talk about the agenda of what we will cover for today number one I'll briefly talk about what",
    "start": "17580",
    "end": "24359"
  },
  {
    "text": "it does with HR evidence platform entails then we'll speak to what the Cisco the make up of the systems",
    "start": "24359",
    "end": "30960"
  },
  {
    "text": "engineering team and we'll dive immediately into the technicalities of our platform what are the primary",
    "start": "30960",
    "end": "36809"
  },
  {
    "text": "components we will then move on to speaking about the legacy built and deploy architecture the problems we face",
    "start": "36809",
    "end": "42719"
  },
  {
    "text": "with that and how that influenced the problems in the overall architecture then finally moving on to how we devise",
    "start": "42719",
    "end": "48719"
  },
  {
    "text": "the solution to solve those issues the migration itself and we'll also allude to what we are working on for the",
    "start": "48719",
    "end": "55770"
  },
  {
    "text": "foreseeable future in the coming months so what is the H on evidence platform",
    "start": "55770",
    "end": "62280"
  },
  {
    "start": "60000",
    "end": "172000"
  },
  {
    "text": "and what does 80 on do we are essentially a healthcare analytics",
    "start": "62280",
    "end": "68340"
  },
  {
    "text": "company that leverages this medical science of Epidemiology where we attempt",
    "start": "68340",
    "end": "73740"
  },
  {
    "text": "to provide real-world real-world evidence based outcomes and in other words what that means is we work with we",
    "start": "73740",
    "end": "80280"
  },
  {
    "text": "work with institutions who will provide us with their large data sets we will upload it on to our platforms and then",
    "start": "80280",
    "end": "86340"
  },
  {
    "text": "we'll have their scientists execute analyses on specific populations and the result of those analyses will influence",
    "start": "86340",
    "end": "92909"
  },
  {
    "text": "research studies in the biopharma and healthcare space in general I'm in no means qualified to speak about the",
    "start": "92909",
    "end": "99210"
  },
  {
    "text": "scientists so up self I'd be happy to put you in touch with folks who are who can answer specific questions so do see",
    "start": "99210",
    "end": "105930"
  },
  {
    "text": "me after that if you have if you if you'd like more information on what we do in terms of the science itself one",
    "start": "105930",
    "end": "112770"
  },
  {
    "text": "point to mention before moving on here is that we have we are a platform offering so we have two types of",
    "start": "112770",
    "end": "118399"
  },
  {
    "text": "offerings number one we have the primary cloud offering we also do have an on-prem offering",
    "start": "118399",
    "end": "123689"
  },
  {
    "text": "however we primarily going to be focused on speaking about the ECS migration and the",
    "start": "123689",
    "end": "130399"
  },
  {
    "text": "CloudFormation components for the cloud offering the on-prem offering is a secondary offering that we have so",
    "start": "130399",
    "end": "138500"
  },
  {
    "text": "before moving on I just want to give a brief shout out to the makeup of the systems team we have an engineering",
    "start": "138500",
    "end": "143510"
  },
  {
    "text": "organization which is about 30 or more engineers and overall we are a company of more than 100 series be continuously",
    "start": "143510",
    "end": "150080"
  },
  {
    "text": "growing the systems engineering team specifically is about six people including myself we've got Scott in LA",
    "start": "150080",
    "end": "155959"
  },
  {
    "text": "we have Abe Dinesh Peng and Steven based out of New York Peng is actually with us",
    "start": "155959",
    "end": "161720"
  },
  {
    "text": "today unfortunately the rest of the members couldn't make it here obviously they're more happy keeping the lights on",
    "start": "161720",
    "end": "166790"
  },
  {
    "text": "than being in Vegas so this is they're these these are their ten seconds of fame and with those ten seconds being up",
    "start": "166790",
    "end": "172390"
  },
  {
    "start": "172000",
    "end": "332000"
  },
  {
    "text": "let's talk about the primary components and what they overall tech stack looks like at atm so we've divided this",
    "start": "172390",
    "end": "180500"
  },
  {
    "text": "diagram into two components client services and central services and the reason we're making this distinction is",
    "start": "180500",
    "end": "186430"
  },
  {
    "text": "client services actually represents a V PC on a per client basis so yes we",
    "start": "186430",
    "end": "192230"
  },
  {
    "text": "deploy all the services that you see inside the client services box to every single client so if you have 25 clients",
    "start": "192230",
    "end": "198829"
  },
  {
    "text": "replicate that box by 25 times obviously that is a scalability problem but initially when you're bootstrapping a",
    "start": "198829",
    "end": "204799"
  },
  {
    "text": "company this was done because it was easier to solve the security problem I we won't be covering the issues with",
    "start": "204799",
    "end": "210730"
  },
  {
    "text": "running multiple V pcs on a per client basis throughout this presentation but I will speak to the problems of this and",
    "start": "210730",
    "end": "216470"
  },
  {
    "text": "what we're looking to solve this in the what's next phase at the very end of the presentation the Central Services is",
    "start": "216470",
    "end": "221959"
  },
  {
    "text": "another V PC these are the services that are shared across all of our client services and the way we share these",
    "start": "221959",
    "end": "228260"
  },
  {
    "text": "services across client services is we have V PC peering between the client V pcs and the central V PC the central",
    "start": "228260",
    "end": "235340"
  },
  {
    "text": "services as you can see contain things like the authorization service the administration service if we need to",
    "start": "235340",
    "end": "241310"
  },
  {
    "text": "generate a plot based off of an analysis the back end will reach out to the thought service that is going to",
    "start": "241310",
    "end": "248720"
  },
  {
    "text": "piggyback off of a V PC peer connection sitting in the central services V PC another point to note over here is that",
    "start": "248720",
    "end": "255739"
  },
  {
    "text": "primarily you'll notice we are a java-based shop and am I asked they shot barring the report services",
    "start": "255739",
    "end": "261430"
  },
  {
    "text": "which are fairly new and are fronting which is angular report services being excuse me the report services being",
    "start": "261430",
    "end": "267250"
  },
  {
    "text": "react based and the react based because it's something that we developed recently and angular being our front end",
    "start": "267250",
    "end": "272560"
  },
  {
    "text": "everything else is Java and MySQL based and we have a set of job dispatchers",
    "start": "272560",
    "end": "279070"
  },
  {
    "text": "that are actually separate from our primary back-end this is where each one of our jobs are regulated and executed",
    "start": "279070",
    "end": "287100"
  },
  {
    "text": "inside the central services component there are two things to note over here number one is chef we are from a legacy",
    "start": "287100",
    "end": "293200"
  },
  {
    "text": "standpoint a heavy chef based shop and you'll hear chef quite a few times today because it does directly impact the",
    "start": "293200",
    "end": "299440"
  },
  {
    "text": "issues we face and moving to and why we move to a new type of code pipeline conformation and ECS based architecture",
    "start": "299440",
    "end": "306190"
  },
  {
    "text": "we also have fabricator here and one item that might not be here is Jenkins so we use Jenkins as their legacy build",
    "start": "306190",
    "end": "312340"
  },
  {
    "text": "tool fabricator if you haven't heard is an open source tool by Facebook it's essentially another version of bitbucket",
    "start": "312340",
    "end": "318070"
  },
  {
    "text": "which is self hosted or cloud hosted we have always been using fabricator and we'll talk about how we'll potentially",
    "start": "318070",
    "end": "324430"
  },
  {
    "text": "move off a fabricator as well we are moving towards github but these are the primary components that make up our",
    "start": "324430",
    "end": "329740"
  },
  {
    "text": "entire application stack and with these being covered let's talk about how they're being used and we'll start off",
    "start": "329740",
    "end": "335919"
  },
  {
    "start": "332000",
    "end": "456000"
  },
  {
    "text": "with the legacy build architecture or what does the build flow look like so we have three phases over here number one",
    "start": "335919",
    "end": "342340"
  },
  {
    "text": "we have the commit phase where a developer will go ahead and make a commit and that code will end up in the",
    "start": "342340",
    "end": "348940"
  },
  {
    "text": "fabricator repository the only reason it says arced if master over here that's equivalent to a pull request and github",
    "start": "348940",
    "end": "355810"
  },
  {
    "text": "but if you're using mark coupled with fabricator that is the kind of command equal issue so a developer would be",
    "start": "355810",
    "end": "362229"
  },
  {
    "text": "ready to commit code art that you he would arced if master it it would go through a local lint it would go through",
    "start": "362229",
    "end": "367600"
  },
  {
    "text": "the review process and if that's successful it will be pushed into the fabricator repository fabricator is a",
    "start": "367600",
    "end": "373660"
  },
  {
    "text": "self-hosted version again which is running on an ec2 instance it is clustered for high availability then we",
    "start": "373660",
    "end": "380500"
  },
  {
    "text": "move on to the build phase the build phase has Jenkins box and this Jenkins box is basically pulling the fabricator",
    "start": "380500",
    "end": "387370"
  },
  {
    "text": "repository for any changes again fabricators simply host git repository so there's nothing the unique over here and when that",
    "start": "387370",
    "end": "393600"
  },
  {
    "text": "polling happens it finds a change it will then go ahead and attempt any kind of build based off of the requirements",
    "start": "393600",
    "end": "400080"
  },
  {
    "text": "of that Jenkins job so in this case let's say there will be a maven bill that will happen and the output of that",
    "start": "400080",
    "end": "405690"
  },
  {
    "text": "maven build after the integration test and the unit tests have been completed would be a docker container and we would",
    "start": "405690",
    "end": "411090"
  },
  {
    "text": "push this docker container to a self-hosted docker registry based off of ec2 as well so a few issues over here",
    "start": "411090",
    "end": "418230"
  },
  {
    "text": "number one Jenkins is a standalone box in this architecture so if it goes down we're done",
    "start": "418230",
    "end": "423380"
  },
  {
    "text": "number two the docker registry is also a standalone box over here if that goes down that's also obviously a problem and",
    "start": "423380",
    "end": "430110"
  },
  {
    "text": "so there's no sense of high availability or fault tolerance we're alive we relied purely on EBS backups and midnight",
    "start": "430110",
    "end": "438090"
  },
  {
    "text": "snapshots but despite that being an issue this works just fine if you're",
    "start": "438090",
    "end": "443310"
  },
  {
    "text": "bootstrapping a company and you simply need to create a build environment and you're pushing out docker images however",
    "start": "443310",
    "end": "450090"
  },
  {
    "text": "this does start to unravel when we speak to how we are going to actually deploy so the next phase is the legacy deploy",
    "start": "450090",
    "end": "457770"
  },
  {
    "start": "456000",
    "end": "846000"
  },
  {
    "text": "architecture how did we ship the code over here we have three phases again number one we have the commit phase then",
    "start": "457770",
    "end": "464820"
  },
  {
    "text": "we have a chef update phase and then finally the push phase so this is where things get interesting why do we have a",
    "start": "464820",
    "end": "470460"
  },
  {
    "text": "commit phase for our deploys well chef is actually very prominent across our",
    "start": "470460",
    "end": "475620"
  },
  {
    "text": "legacy infrastructure in the sense that chef is the one that provision those ec2 instances and all the resources across",
    "start": "475620",
    "end": "481590"
  },
  {
    "text": "the board chef configured those ec2 instances and we made the cardinal mistake of also using chef for deploying",
    "start": "481590",
    "end": "488790"
  },
  {
    "text": "our application onto those very own instances so what does that process look like I've got a chef global file which",
    "start": "488790",
    "end": "494970"
  },
  {
    "text": "has every single client VPC I want to deploy let's say a new version of the front end instead of the front end",
    "start": "494970",
    "end": "501000"
  },
  {
    "text": "container to the to the to the front end ec2 instance I would go to my chef",
    "start": "501000",
    "end": "506790"
  },
  {
    "text": "global file I would update the docker excuse me I would update the docker tag number that I've obtained obtained from",
    "start": "506790",
    "end": "513210"
  },
  {
    "text": "the build phase and once that update has been made it goes through a normal fabricator repository process it's",
    "start": "513210",
    "end": "518610"
  },
  {
    "text": "pushed up into if located registry Jenkins is now going to pull that registry it sees that there",
    "start": "518610",
    "end": "525600"
  },
  {
    "text": "has been a change and now the Jenkins job is responsible for executing a job whose responsibility it is to actually",
    "start": "525600",
    "end": "532529"
  },
  {
    "text": "update the chef's organization because the chef organization is where the information is stored on what docker",
    "start": "532529",
    "end": "538709"
  },
  {
    "text": "container I need to deploy on that particular instance so once the chef organization has been updated now I can do one of two things I",
    "start": "538709",
    "end": "546060"
  },
  {
    "text": "can either manually Association to any one of my back-end front-end or worker instance boxes and run sudo chef content",
    "start": "546060",
    "end": "552510"
  },
  {
    "text": "so it can pull the latest changes down or I would wait for the next chef interval in dev this happened to be five",
    "start": "552510",
    "end": "558209"
  },
  {
    "text": "minutes in production it was 15 minutes obviously this is a huge problem because we managed to create a pull based",
    "start": "558209",
    "end": "565110"
  },
  {
    "text": "architecture and not a push based architecture when it came to application deployments and not only was chef",
    "start": "565110",
    "end": "572010"
  },
  {
    "text": "deploying a new container but it was also downloading configuration so there are a variety of things that were being",
    "start": "572010",
    "end": "577740"
  },
  {
    "text": "done but this is a brief snippet of what the primary components of chef's responsibility was here number one",
    "start": "577740",
    "end": "583500"
  },
  {
    "text": "update the configuration files number two downloads shards what I mean by download charge over here is in our",
    "start": "583500",
    "end": "589080"
  },
  {
    "text": "legacy architecture we actually had to download those datasets on to those local ec2 instances and that was also a",
    "start": "589080",
    "end": "596070"
  },
  {
    "text": "part of a deployment process so we actually had two types of deployments one the standard version deployment for",
    "start": "596070",
    "end": "601110"
  },
  {
    "text": "an application code update and number two data deployment specific to a client or a customer and this was also handled",
    "start": "601110",
    "end": "607500"
  },
  {
    "text": "by chef and then number three and four it would stop the existing docker containers pulled down the latest images",
    "start": "607500",
    "end": "613440"
  },
  {
    "text": "based on what was provided in the chef global files and then it would be responsible for deploying the new docker",
    "start": "613440",
    "end": "619080"
  },
  {
    "text": "containers as well and we had some kind of hacked custom logic that if anything failed there hopefully it would roll",
    "start": "619080",
    "end": "626279"
  },
  {
    "text": "back to the previous container obviously that didn't always work out so again I also want to be clear over here that",
    "start": "626279",
    "end": "633120"
  },
  {
    "text": "we're not hitting on chef in any way shape chef is a fantastic tool when you use it for configuration in the right",
    "start": "633120",
    "end": "638399"
  },
  {
    "text": "manner and also if you leverage provisioning in the right manner but when you start using it for deployments",
    "start": "638399",
    "end": "643860"
  },
  {
    "text": "it's really outside of the scope of what the tool can do obviously you can have to get there any type of scripts but",
    "start": "643860",
    "end": "649220"
  },
  {
    "text": "when you go to a point of scalar and you're certainly adding more clients as a Series A and Series B company does",
    "start": "649220",
    "end": "655980"
  },
  {
    "text": "it becomes unmanageable so this was the type of architecture that we inherited that was problematic so with those",
    "start": "655980",
    "end": "662970"
  },
  {
    "text": "problems let's talk about what this looked like for the overall legacy architecture so to your left",
    "start": "662970",
    "end": "670110"
  },
  {
    "text": "you would start off with the user hitting the browser and you would go to X Y Z T on Comm or client ID T uncom DNS",
    "start": "670110",
    "end": "677220"
  },
  {
    "text": "magic takes place it goes on to rock 53 and rock 53 will now forward your request down to an",
    "start": "677220",
    "end": "684330"
  },
  {
    "text": "elastic load balancer that elastic load balancer now forwards that request to an angular instance excuse me to an angular",
    "start": "684330",
    "end": "691200"
  },
  {
    "text": "container which is our front-end and angular would then forward that request to our back-end which is Java base and",
    "start": "691200",
    "end": "696510"
  },
  {
    "text": "if the user was attempting to log in the Java back-end now needs to communicate with the authorization service sitting",
    "start": "696510",
    "end": "702810"
  },
  {
    "text": "in the central services VPC and would go ahead and make that connection over the VPC pure route if the user had suggested",
    "start": "702810",
    "end": "710790"
  },
  {
    "text": "that if the user had performed an action which would require the execution of a job that would queue up something in the",
    "start": "710790",
    "end": "716400"
  },
  {
    "text": "database and then we would have our worker dispatchers who would be constantly pulling the database and",
    "start": "716400",
    "end": "722360"
  },
  {
    "text": "execute the job on demand this is actually depicting a static dispatcher where it was always sitting there idle",
    "start": "722360",
    "end": "728190"
  },
  {
    "text": "but we have converted those into dynamic dispatchers that is outside the scope of the president of this presentation we",
    "start": "728190",
    "end": "733590"
  },
  {
    "text": "actually did present our movement towards dynamic dispatchers last year at ECS so if you would like more",
    "start": "733590",
    "end": "738600"
  },
  {
    "text": "information on how we did that we'd be happy to provide it but with that being said what you see what we hear with the",
    "start": "738600",
    "end": "746460"
  },
  {
    "text": "backend front-end ec2 is not actually a mistake what the front-end in the back",
    "start": "746460",
    "end": "751890"
  },
  {
    "text": "end and the MySQL database did live on a single ec2 instance I don't know how we",
    "start": "751890",
    "end": "756960"
  },
  {
    "text": "managed to do that but I can tell you when we inherited this architecture there were many sleepless nights as a result of that so number one there's no",
    "start": "756960",
    "end": "763980"
  },
  {
    "text": "fault tolerance there's no high availability the RDS if it goes down excuse me if my SQL goes down then we're",
    "start": "763980",
    "end": "769920"
  },
  {
    "text": "toasted we simply rely on those EBS snapshots that happen on a nightly basis",
    "start": "769920",
    "end": "776210"
  },
  {
    "text": "furthermore every single one of these I as mentioned earlier is managed by chef so these boxes were provision through",
    "start": "776210",
    "end": "782890"
  },
  {
    "text": "chef and we had the same kind of deployment pattern not just for a back-end and front-end instances but",
    "start": "782890",
    "end": "788529"
  },
  {
    "text": "also every single one of the central services you see and those central services although in this diagram we don't indicate where the databases live",
    "start": "788529",
    "end": "794950"
  },
  {
    "text": "those databases were also co-located with their docker containers so it was one single type of deployment pattern",
    "start": "794950",
    "end": "802480"
  },
  {
    "text": "one single type of architecture where if a single node went down that's it that was the end of being able to log into",
    "start": "802480",
    "end": "808899"
  },
  {
    "text": "the platform of performing some kind of analyses and given we were a monolith we weren't necessarily able to handle these",
    "start": "808899",
    "end": "814750"
  },
  {
    "text": "failures as well the only exception to all of this that you see over here are the report services and the report",
    "start": "814750",
    "end": "821260"
  },
  {
    "text": "services were essentially our POC onto ECS code pipeline and cloud formation so",
    "start": "821260",
    "end": "827560"
  },
  {
    "text": "reports and reports UI reports was a java becca is a Java back-end reports UI is a react front-end and both of these",
    "start": "827560",
    "end": "834490"
  },
  {
    "text": "items run on ECS and are deployed through the code pipeline via cloud formation which will speak to you later",
    "start": "834490",
    "end": "840670"
  },
  {
    "text": "on and they also leverage AWS RDS so",
    "start": "840670",
    "end": "845980"
  },
  {
    "text": "with the overall legacy architecture being displayed there just to summarize once more what were the problems that we",
    "start": "845980",
    "end": "851650"
  },
  {
    "start": "846000",
    "end": "921000"
  },
  {
    "text": "had number one the build phase is disjointed from the deploy phase number two the deploy model is home base via",
    "start": "851650",
    "end": "857980"
  },
  {
    "text": "chef it's not pushed base you rely on individual actions to take place on a manual in a manual scenario to actually",
    "start": "857980",
    "end": "864880"
  },
  {
    "text": "update your applications chef does everything and obviously that's a highlight of the biggest problem that we",
    "start": "864880",
    "end": "870310"
  },
  {
    "text": "had it provisions it configures it even does deployments in fact we had JVM parameters that were somehow being",
    "start": "870310",
    "end": "876010"
  },
  {
    "text": "passed through chef as well for some of these applications so we did quite a bit it was pretty impressive from that perspective but not in terms of",
    "start": "876010",
    "end": "881950"
  },
  {
    "text": "reliability or stability at all of course no database and app level high",
    "start": "881950",
    "end": "886959"
  },
  {
    "text": "availability and because we're fairly monolith application auto scaling was non-existent and we had to vertically",
    "start": "886959",
    "end": "894700"
  },
  {
    "text": "scale and there was no sense of horizontal scalability monitoring was limited we're not really going to refer to that in this presentation but that",
    "start": "894700",
    "end": "900820"
  },
  {
    "text": "was part of a bigger problem that we had see ICD non-existent we've already spoken about that decentralized logging",
    "start": "900820",
    "end": "906459"
  },
  {
    "text": "because everything was a container running on ec2 instance on its own those logs were local to that particular instance and of",
    "start": "906459",
    "end": "913910"
  },
  {
    "text": "course chef would put out a log rotate script which would ensure that the disks don't fill up which didn't always work",
    "start": "913910",
    "end": "920680"
  },
  {
    "text": "but with those problems in mind there is hope or there rather there was hope for us and what did our solution roadmap",
    "start": "920680",
    "end": "927620"
  },
  {
    "start": "921000",
    "end": "1243000"
  },
  {
    "text": "look like we took we basically broke it down into a set of short-term",
    "start": "927620",
    "end": "933380"
  },
  {
    "text": "initiatives and long-term initiatives and it spans from a few weeks to more",
    "start": "933380",
    "end": "938420"
  },
  {
    "text": "than a year and we this is not an exhaustive list by any means but these",
    "start": "938420",
    "end": "943880"
  },
  {
    "text": "are the primary components that will essentially cover today number one we recognize that hey we are a software",
    "start": "943880",
    "end": "948950"
  },
  {
    "text": "company right our bread and butter at the end of the day is being able to ship software we need to be able to do that",
    "start": "948950",
    "end": "954290"
  },
  {
    "text": "on demand and we can't have systems spend fifty percent of their time on deployments it doesn't have any benefit",
    "start": "954290",
    "end": "960080"
  },
  {
    "text": "to the company so we point so we decided that CI CD is one of our utmost CI CD is",
    "start": "960080",
    "end": "966770"
  },
  {
    "text": "one of our utmost priorities why is it that I'm referring to semi CD over here that was really just internal language",
    "start": "966770",
    "end": "972770"
  },
  {
    "text": "we use for our own stakeholders and what I mean by that is depending on how you define CD it can refer to continuous",
    "start": "972770",
    "end": "979790"
  },
  {
    "text": "delivery or continuous deployment and again depending on how you define those two continuous delivery generally is",
    "start": "979790",
    "end": "985250"
  },
  {
    "text": "referred to as continuous delivery is generally classified as the ability to",
    "start": "985250",
    "end": "990550"
  },
  {
    "text": "push a container or an application across the pipeline whereas continuous",
    "start": "990550",
    "end": "995720"
  },
  {
    "text": "deployment is I push code and I commit code and it's going to end up in production as soon as possible because",
    "start": "995720",
    "end": "1001420"
  },
  {
    "text": "you've assumed that everything including the testing piece has been automated we recognize that for us to be able to",
    "start": "1001420",
    "end": "1008170"
  },
  {
    "text": "do continuous deployment it was not going to happen overnight we would have to change the entire developer workflow we would need more scrutiny when it came",
    "start": "1008170",
    "end": "1015970"
  },
  {
    "text": "to testing and we would need a better level of automated testing so we simply are referring to continuous integration",
    "start": "1015970",
    "end": "1022060"
  },
  {
    "text": "and we were referring to this as continuous integration / semi continuous deployment number two dynamic",
    "start": "1022060",
    "end": "1030040"
  },
  {
    "text": "dispatchers again this is not part of this presentation but one of the reasons that we looked at dynamic dispatchers",
    "start": "1030040",
    "end": "1035970"
  },
  {
    "text": "was we recognize that our dynamic dispatchers were actually excuse me our",
    "start": "1035970",
    "end": "1043500"
  },
  {
    "text": "static dispatchers were actually sitting there idle most of the time incurring additional expenses and if we leverage",
    "start": "1043500",
    "end": "1049890"
  },
  {
    "text": "the CS and created these workers on-demand it would not be an issue for us and we would save a ton of money this was actually our first foray in",
    "start": "1049890",
    "end": "1056039"
  },
  {
    "text": "CS which sort of translates into number three which is the the rationale behind",
    "start": "1056039",
    "end": "1061440"
  },
  {
    "text": "migrating all of our applications to E's pcs number one we would obtain a sense of high availability because of how ECS",
    "start": "1061440",
    "end": "1067799"
  },
  {
    "text": "is architected obviously there is an onus on us to insure our applications are stateless but it would enforce us to",
    "start": "1067799",
    "end": "1073440"
  },
  {
    "text": "do that naturally as part of this migration and rolling deploys our default as part of e CS so unless we're",
    "start": "1073440",
    "end": "1080549"
  },
  {
    "text": "looking at blue green or red green types of deployments or red blue based deployments rolling deployments work just fine for us and ECS provided that",
    "start": "1080549",
    "end": "1087299"
  },
  {
    "text": "out-of-the-box reducing a maintenance headache obviously you'd no longer have to maintain docker containers across ec2",
    "start": "1087299",
    "end": "1093029"
  },
  {
    "text": "instances that have their own management capabilities and their own management headache that comes along with it a",
    "start": "1093029",
    "end": "1099020"
  },
  {
    "text": "common question that arrives over here is why use e CS why not kubernetes when",
    "start": "1099020",
    "end": "1104880"
  },
  {
    "text": "we were having this discussion it was about a year ago we looked at a variety of factors number one we were a small",
    "start": "1104880",
    "end": "1111090"
  },
  {
    "text": "series a organization the amount of time you would have to allocate two resources for working on kubernetes was not",
    "start": "1111090",
    "end": "1117240"
  },
  {
    "text": "something that we could do at that point in time but we had already POC dynamic dispatchers on e CS it worked",
    "start": "1117240",
    "end": "1123120"
  },
  {
    "text": "wonderfully for us and we decided to therefore move down that route that doesn't mean we completely eliminate",
    "start": "1123120",
    "end": "1128820"
  },
  {
    "text": "kubernetes in fact I'll refer to that at the very end of the presentation as well but ECS was our go-to and we decided to",
    "start": "1128820",
    "end": "1135779"
  },
  {
    "text": "move forward with ECS itself number four migrated all databases to RDS this is pretty straightforward we",
    "start": "1135779",
    "end": "1143789"
  },
  {
    "text": "didn't want to deal with our own clustering with our own slave master relationships and RDS does the job",
    "start": "1143789",
    "end": "1149580"
  },
  {
    "text": "really well so we decided to move onto RDS in fact as part of this migration the first",
    "start": "1149580",
    "end": "1154860"
  },
  {
    "text": "thing we did before we modified anything was move those MySQL instances onto their own RDS databases because that",
    "start": "1154860",
    "end": "1160740"
  },
  {
    "text": "allowed us to really play around with the rest the infrastructure and more easier fashion without impacting the client or",
    "start": "1160740",
    "end": "1166400"
  },
  {
    "text": "the customers number five reduce the chef's dependency and this really comes more from this doesn't come this doesn't",
    "start": "1166400",
    "end": "1174140"
  },
  {
    "text": "come from a tooling standpoint this comes more from a design and architectural standpoint we didn't want to choose a new tool because it was cool",
    "start": "1174140",
    "end": "1180890"
  },
  {
    "text": "terraform is all the buzz these days and everybody wants to use it that doesn't mean chef can't do its job it has its",
    "start": "1180890",
    "end": "1186770"
  },
  {
    "text": "abilities and it has its own area when it does the job really well but based on",
    "start": "1186770",
    "end": "1192800"
  },
  {
    "text": "the problems that we face we wanted to ensure that our provisioning configuration and application layers",
    "start": "1192800",
    "end": "1198200"
  },
  {
    "text": "were absolutely independent from one another and that they would not interfere with one another and enable in",
    "start": "1198200",
    "end": "1203720"
  },
  {
    "text": "order to enable that we decided to introduce two new tools which were terraform and CloudFormation and why",
    "start": "1203720",
    "end": "1210710"
  },
  {
    "text": "terraform and CloudFormation because you could also because technically they can do the same same set of they can produce",
    "start": "1210710",
    "end": "1216230"
  },
  {
    "text": "the same set of tasks and the same set of results I'll get into that later on in the presentation and number seven is",
    "start": "1216230",
    "end": "1223040"
  },
  {
    "text": "for application and infrastructure level monitoring we explored a bunch of tools",
    "start": "1223040",
    "end": "1228350"
  },
  {
    "text": "but we settled on data dog it seems to work for us well New Relic was another option that we explored there was no particular reason why we chose one over",
    "start": "1228350",
    "end": "1235610"
  },
  {
    "text": "the other we thought that both were compatible and I think it just came down to pricing for",
    "start": "1235610",
    "end": "1240710"
  },
  {
    "text": "chip for choosing data dog so that was",
    "start": "1240710",
    "end": "1245810"
  },
  {
    "text": "the solution roadmap and now what was the first task that we embarked what was the first task as part of this journey",
    "start": "1245810",
    "end": "1250910"
  },
  {
    "text": "that we embarked upon it was the big fish which was let's enable continuous integration and semi continuous deployment and why do C is mi CD some of",
    "start": "1250910",
    "end": "1259820"
  },
  {
    "text": "these have already been mentioned number one reduced the strain on the systems team we want our engineers to focus on the application layer and the",
    "start": "1259820",
    "end": "1266570"
  },
  {
    "text": "scalability of the infrastructure rather than spending 50% of your time deploying number two it automatically moves us to",
    "start": "1266570",
    "end": "1273080"
  },
  {
    "text": "enforces our moved towards a micro services based architecture which we were already headed towards and so if",
    "start": "1273080",
    "end": "1278930"
  },
  {
    "text": "we're enabling CI semi CD we have to absolutely ensure that by the time we",
    "start": "1278930",
    "end": "1284540"
  },
  {
    "text": "get to micro services we have this set in stone number three it was a smoother",
    "start": "1284540",
    "end": "1289670"
  },
  {
    "text": "transition to us for elastic container service because we had already done some of this work on the ECS side",
    "start": "1289670",
    "end": "1296270"
  },
  {
    "text": "it enforces a transition to the AWS called pipeline suite I'll talk to that I'll talk about that in the next slide",
    "start": "1296270",
    "end": "1301670"
  },
  {
    "text": "but number five is simply plagiarized from another Amazon presentation which is if you implement CI CD it improves",
    "start": "1301670",
    "end": "1309050"
  },
  {
    "text": "developer workflow which results in improving the developer output which potentially increases the developer",
    "start": "1309050",
    "end": "1315290"
  },
  {
    "text": "happiness when we ask their developers after the migration were you more happy their reaction aside from whatever",
    "start": "1315290",
    "end": "1320720"
  },
  {
    "text": "happiness they may have was all great we now have to learn AWS so how are we",
    "start": "1320720",
    "end": "1326810"
  },
  {
    "text": "going to how did we proceed on doing this number one again throw out chef reduce the dependency on Jenkins because",
    "start": "1326810",
    "end": "1332690"
  },
  {
    "text": "it was treated as a monolith we wanted to leverage more modular tools number three migrate migrate to pipeline",
    "start": "1332690",
    "end": "1338300"
  },
  {
    "text": "that's code for what that means is this notion of why we're reusing a pipeline it stems from the fact that we want the",
    "start": "1338300",
    "end": "1344210"
  },
  {
    "text": "preceding action to influence the next action so if something failed in the CI environment stage we don't want that",
    "start": "1344210",
    "end": "1350360"
  },
  {
    "text": "being deployed to the QA stage and it also enabled us to provide put in manual",
    "start": "1350360",
    "end": "1355790"
  },
  {
    "text": "interactions to ensure that there was a separation of concerns and finally leverage the AWS code pipeline ecosystem",
    "start": "1355790",
    "end": "1362000"
  },
  {
    "text": "so a common question here is why did you use the AWS code pipeline ecosystem which consists of code commit code",
    "start": "1362000",
    "end": "1367790"
  },
  {
    "text": "deploy code build cloud formation and so forth and not other tools such as go CD circle CI those are all fantastic tools",
    "start": "1367790",
    "end": "1374960"
  },
  {
    "text": "we had engineers within our teams that had used those successfully in previous companies we had a few limitations on",
    "start": "1374960",
    "end": "1381590"
  },
  {
    "text": "what tools we could use recall that we use the self hosted version of fabricator so most of those third-party",
    "start": "1381590",
    "end": "1387320"
  },
  {
    "text": "tools did not integrate well with fabricator and while AWS called pipeline doesn't integrate with fabricator either",
    "start": "1387320",
    "end": "1392990"
  },
  {
    "text": "either we did find a way to temporarily make that integration but more",
    "start": "1392990",
    "end": "1398570"
  },
  {
    "text": "importantly we found that old AWS code Python actually did not lock us in to specific set of tools it did force a",
    "start": "1398570",
    "end": "1406010"
  },
  {
    "text": "confirmation of course but that was intended and intentional on our part so it provided us that level of modularity",
    "start": "1406010",
    "end": "1412850"
  },
  {
    "text": "that we were seeking but what does that modularity look like you can see it in the end result of this entire pipeline",
    "start": "1412850",
    "end": "1418520"
  },
  {
    "start": "1415000",
    "end": "1900000"
  },
  {
    "text": "so what does this CI semi CD pipeline look like today this is exactly what you're seeing",
    "start": "1418520",
    "end": "1424070"
  },
  {
    "text": "again we have the commit phase why do we have a commit phase because every single application is treated as a micro",
    "start": "1424070",
    "end": "1429380"
  },
  {
    "text": "service and so within that application repository we now add two files number one we have a build spec file",
    "start": "1429380",
    "end": "1435560"
  },
  {
    "text": "I'll speak to why what that build spec file does but it's related to a Tobias code build and number two we have a",
    "start": "1435560",
    "end": "1441110"
  },
  {
    "text": "double your confirmation file and that is leverage in the deploy frames so I am",
    "start": "1441110",
    "end": "1446570"
  },
  {
    "text": "a developer I make a code change I commit my code fabricator has the latest",
    "start": "1446570",
    "end": "1452780"
  },
  {
    "text": "change how do I get that change to invoke the pipeline when we were leveraging the AWS code pipeline at that",
    "start": "1452780",
    "end": "1459650"
  },
  {
    "text": "point in time the code pipeline only allowed invoking actions through three",
    "start": "1459650",
    "end": "1464930"
  },
  {
    "text": "items AWS code commit AWS s3 and github we were neither using github and nor did",
    "start": "1464930",
    "end": "1470960"
  },
  {
    "text": "we want to use the other ones so we decided to create a temporary mirror",
    "start": "1470960",
    "end": "1476210"
  },
  {
    "text": "hook between the fabricator registry and they an AWS code commit while a developer all always committed to the",
    "start": "1476210",
    "end": "1482600"
  },
  {
    "text": "fabricator registry he or she did not know that in the back we were actually doing another mirror push to a",
    "start": "1482600",
    "end": "1487700"
  },
  {
    "text": "duplicated repository this is not recommended but we were able to get by with this simply because of the fact",
    "start": "1487700",
    "end": "1492920"
  },
  {
    "text": "that it was not exposed to the developers and only systems engineers knew how to touch it and if something",
    "start": "1492920",
    "end": "1498680"
  },
  {
    "text": "did break you know who you knew go defined but the primary reason for",
    "start": "1498680",
    "end": "1504980"
  },
  {
    "text": "having AWS code commit again is only to invoke the pipeline and this would be replaced over the next few weeks by",
    "start": "1504980",
    "end": "1511340"
  },
  {
    "text": "github in fact once code commit knows that a change has been made it then",
    "start": "1511340",
    "end": "1516740"
  },
  {
    "text": "pushes the change down to AWS code build an AWS code build will begin the build",
    "start": "1516740",
    "end": "1522170"
  },
  {
    "text": "process so how does it know to how to build in the bolt build process it does that by looking at the application",
    "start": "1522170",
    "end": "1528380"
  },
  {
    "text": "repository again that build spec file that built build spec file actually has three phases those phases are pre build",
    "start": "1528380",
    "end": "1534830"
  },
  {
    "text": "build post build and a fourth phase being artifacts the pre build phase is where you specify I want you to install",
    "start": "1534830",
    "end": "1540890"
  },
  {
    "text": "the dependencies I need I need maven to do a Javan build I need to do a Java",
    "start": "1540890",
    "end": "1546230"
  },
  {
    "text": "build I need no js' to do a no js' built once those dependencies are implemented inside the",
    "start": "1546230",
    "end": "1552570"
  },
  {
    "text": "AWS code built container it will then proceed on doing the build if there are any unit tests that that have to take",
    "start": "1552570",
    "end": "1557940"
  },
  {
    "text": "place those tests will also take place the end result of that is just like in our previous legacy architecture a dr.",
    "start": "1557940",
    "end": "1563760"
  },
  {
    "text": "container what's unique about AWS code build and one of the reasons why we wanted to use it is it is a service by",
    "start": "1563760",
    "end": "1569130"
  },
  {
    "text": "Amazon that only comes that only starts up when a commit has been made and a",
    "start": "1569130",
    "end": "1574230"
  },
  {
    "text": "build is now required so whereas Jenkins was always sitting there as a monolith we were always",
    "start": "1574230",
    "end": "1579990"
  },
  {
    "text": "leveraging we were wasting quite a bit of money now that being said you can do the same thing in Jenkins by leveraging",
    "start": "1579990",
    "end": "1585270"
  },
  {
    "text": "workers so that was always a possibility but since we were adopting AWS pipeline",
    "start": "1585270",
    "end": "1590910"
  },
  {
    "text": "in AWS services it was a simple hook for us to be able to use code build because we were already creating these images",
    "start": "1590910",
    "end": "1597440"
  },
  {
    "text": "using maven for the java based applications and as soon as the",
    "start": "1597440",
    "end": "1602850"
  },
  {
    "text": "container as soon as the code build container completes a bill that actually goes away so we only actually pay for the duration when the build takes place",
    "start": "1602850",
    "end": "1610440"
  },
  {
    "text": "now once the docker container has pushed previously we would push it to our self hosted docker registry which was not",
    "start": "1610440",
    "end": "1616620"
  },
  {
    "text": "highly available now we push it to Amazon Elastic container registry as a result we don't have to worry about maintaining any kind of server nor of",
    "start": "1616620",
    "end": "1623490"
  },
  {
    "text": "the high availability for any one of those images that reside there once that is complete we move on to the deployment",
    "start": "1623490",
    "end": "1630480"
  },
  {
    "text": "phase and while this diagram does depict it as another phases if you can",
    "start": "1630480",
    "end": "1635730"
  },
  {
    "text": "visualize it visualize it as one single pipeline but the next phase is probably",
    "start": "1635730",
    "end": "1640770"
  },
  {
    "text": "the more important piece and speaks to how we look how we sought to design application provisioning versus",
    "start": "1640770",
    "end": "1648240"
  },
  {
    "text": "infrastructure provisioning we use confirmation to deploy to our continuous",
    "start": "1648240",
    "end": "1654150"
  },
  {
    "text": "integration environment so why do we use cloud formation we recognize that our underlying infrastructure would consist",
    "start": "1654150",
    "end": "1659760"
  },
  {
    "text": "of core components those components would be the V PC the e CS clusters that houses ECS instances the AWS called",
    "start": "1659760",
    "end": "1666870"
  },
  {
    "text": "pipelines and the RDS databases these were components that we didn't want any of the application components to",
    "start": "1666870",
    "end": "1672990"
  },
  {
    "text": "interact with per se and we wanted to keep them as separate as possible so we provision those in the",
    "start": "1672990",
    "end": "1678260"
  },
  {
    "text": "pendant ly through terraform which we'll get to in another slide but to go back to confirmation confirmation was focused",
    "start": "1678260",
    "end": "1684230"
  },
  {
    "text": "on the application components naturally we tend to think that the application is only consisting of a container but the",
    "start": "1684230",
    "end": "1690950"
  },
  {
    "text": "reality is the application actually has infrastructure components as well such as the application load balancer route",
    "start": "1690950",
    "end": "1698300"
  },
  {
    "text": "53 entries security groups IIM roles the actual ECS service itself and the test",
    "start": "1698300",
    "end": "1704120"
  },
  {
    "text": "definitions associated with those ECI services aka the container definitions that are defined in ECS so by creating a",
    "start": "1704120",
    "end": "1711860"
  },
  {
    "text": "dynamic CloudFormation template what we were able to do is at any given time we can spin up an entire environment for",
    "start": "1711860",
    "end": "1718310"
  },
  {
    "text": "any for any one of our V pcs as long as we provided two things the easiest",
    "start": "1718310",
    "end": "1723590"
  },
  {
    "text": "cluster where it would be provision and of course the V PC where we would like to deploy that code to so on the initial",
    "start": "1723590",
    "end": "1730490"
  },
  {
    "text": "pipeline run conformation would create the application load balancer the target groups and the security groups and",
    "start": "1730490",
    "end": "1736310"
  },
  {
    "text": "everything else that was associated with it but on a subsequent run of the pipeline it would not recreate those",
    "start": "1736310",
    "end": "1741380"
  },
  {
    "text": "resources unless they were modified and really the only item that is modified on a subsequent run-in generally is the",
    "start": "1741380",
    "end": "1748580"
  },
  {
    "text": "task definition because you have a new build that you would like to deploy so while we solved the deployment problem",
    "start": "1748580",
    "end": "1754610"
  },
  {
    "text": "through CloudFormation we still lack one issue over here which is how do we actually start the application within",
    "start": "1754610",
    "end": "1760700"
  },
  {
    "text": "ECS as the container and previously we did this by obtaining secrets and the",
    "start": "1760700",
    "end": "1767180"
  },
  {
    "text": "AWS data excuse me the secrets and the database urls and the passwords through shaft we wanted to eliminate chef",
    "start": "1767180",
    "end": "1773960"
  },
  {
    "text": "and we started storing these secrets into the AWS parameter store so in the",
    "start": "1773960",
    "end": "1779240"
  },
  {
    "text": "parameter store we stored secrets that were restored items that were that we",
    "start": "1779240",
    "end": "1784910"
  },
  {
    "text": "wanted to be encrypted such as the database password and we also store non sensitive items such as the database URL",
    "start": "1784910",
    "end": "1791150"
  },
  {
    "text": "and the database username and then at that point when confirmation has",
    "start": "1791150",
    "end": "1796340"
  },
  {
    "text": "successfully deployed the ECF service the it would confirmation will not go ahead and say that this service is up",
    "start": "1796340",
    "end": "1801500"
  },
  {
    "text": "and running until our health check passes and for that health check to pass the service has to query the AWS",
    "start": "1801500",
    "end": "1807950"
  },
  {
    "text": "parameter store obtain the configuration connect to the database because if that doesn't happen the service would not be able to respond to a culture once the",
    "start": "1807950",
    "end": "1814880"
  },
  {
    "text": "health check has been responded to CloudFormation says ok the service is up and running and the code pipeline would",
    "start": "1814880",
    "end": "1819980"
  },
  {
    "text": "indicate all right we are ready to move on to the next phase and the next phase in this diagram is a manual approval but",
    "start": "1819980",
    "end": "1827150"
  },
  {
    "text": "it can be another deploy to another environment such as QA the only reason a manual approval is over here is because",
    "start": "1827150",
    "end": "1833360"
  },
  {
    "text": "of the fact that again we wanted to control our releases outside of the CI environment so only specific people who",
    "start": "1833360",
    "end": "1840530"
  },
  {
    "text": "had privileges or who have privileges to deploy to the next environment had the ability to approve or reject that",
    "start": "1840530",
    "end": "1847310"
  },
  {
    "text": "particular change that would go down that pipe one item that's not actually mentioned here is with confirmation we",
    "start": "1847310",
    "end": "1853850"
  },
  {
    "text": "leverage change sets and this is something that was introduced last year that didn't exist for confirmation before that so the manual approval what",
    "start": "1853850",
    "end": "1861170"
  },
  {
    "text": "it actually indicates to us is what are the changes that CloudFormation is going to make based",
    "start": "1861170",
    "end": "1866180"
  },
  {
    "text": "off of your code commit so if somebody did make a change to the application load balancer that is not something that you would that is not something desired",
    "start": "1866180",
    "end": "1872600"
  },
  {
    "text": "you have the option to reject it for that reason this is extremely important for us in production especially when",
    "start": "1872600",
    "end": "1877760"
  },
  {
    "text": "we're doing this in our initial phases so we manually approve we can now deploy",
    "start": "1877760",
    "end": "1883940"
  },
  {
    "text": "an identical fashion using CloudFormation to QA and you can visualize this moving on to all other",
    "start": "1883940",
    "end": "1889820"
  },
  {
    "text": "environments so staging being next any other environment after that and last the last environment to deploy to of",
    "start": "1889820",
    "end": "1895730"
  },
  {
    "text": "course would be the production environment itself this is a throwback",
    "start": "1895730",
    "end": "1903170"
  },
  {
    "start": "1900000",
    "end": "1939000"
  },
  {
    "text": "to our legacy deployer architecture just to highlight the differences obviously we have problems here with multi with",
    "start": "1903170",
    "end": "1909770"
  },
  {
    "text": "multiple tools that were disjointed stitched together but our primary problem was the fact that we were unable",
    "start": "1909770",
    "end": "1916070"
  },
  {
    "text": "to successfully deploy something without relying on chef and the polling based mechanism what this allowed us to do is",
    "start": "1916070",
    "end": "1923120"
  },
  {
    "text": "everything was push based we know exactly what was going to happen at any time in the pipeline and if something did end up in production that was not",
    "start": "1923120",
    "end": "1928670"
  },
  {
    "text": "supposed to be in production it was either someone improved something that was not supposed to go through or",
    "start": "1928670",
    "end": "1933790"
  },
  {
    "text": "something miss as part of the testing phase which we would need to continuously improve upon so with that being said we covered",
    "start": "1933790",
    "end": "1942390"
  },
  {
    "text": "the application pieces but we didn't cover the separation of the provisioning concerns when it came to everything else",
    "start": "1942390",
    "end": "1948750"
  },
  {
    "text": "the ACS cluster the VPC and so forth so on your left side what you see over here is how we are leveraging terraform to be",
    "start": "1948750",
    "end": "1956100"
  },
  {
    "text": "able to create that underlying work architectures excuse me infrastructure being number one VP CEC as clusters",
    "start": "1956100",
    "end": "1963210"
  },
  {
    "text": "pipelines and RDS these are the only four components that we actually create using terraform everything else when it",
    "start": "1963210",
    "end": "1970530"
  },
  {
    "text": "comes to the application is deployed using that confirmation and CI CD model that you saw before so that was our",
    "start": "1970530",
    "end": "1977220"
  },
  {
    "text": "separation between using terraform and CloudFormation people ask well why couldn't you do the same thing in confirmation and that's",
    "start": "1977220",
    "end": "1982890"
  },
  {
    "text": "absolutely true you could however one thing we didn't like at that point in time about confirmation was if you",
    "start": "1982890",
    "end": "1989700"
  },
  {
    "text": "modified something outside of the code which is also true for Tara form to an extent you were not able to see that",
    "start": "1989700",
    "end": "1995580"
  },
  {
    "text": "drift confirmation did release an update a few weeks ago where there's a drift check where you can now see if someone",
    "start": "1995580",
    "end": "2001580"
  },
  {
    "text": "modified something outside of the the written templates through the console that oh look someone has modified",
    "start": "2001580",
    "end": "2007490"
  },
  {
    "text": "something I want you to pull in the latest changes terraform already had this capability to an extent it was",
    "start": "2007490",
    "end": "2012680"
  },
  {
    "text": "dynamic in nature of course it's called agnostic as well but that really wasn't our primary concern because we were",
    "start": "2012680",
    "end": "2018200"
  },
  {
    "text": "pretty satisfied with being on AWS however using terraform also gave us the",
    "start": "2018200",
    "end": "2023210"
  },
  {
    "text": "advantage of if need be where we need to be on a multi cloud provider or in a private data center we could actually",
    "start": "2023210",
    "end": "2028790"
  },
  {
    "text": "leverage terraform to create some of those underlying resources and I briefly alluded to our on-prem model the on-prem",
    "start": "2028790",
    "end": "2034550"
  },
  {
    "text": "model would also work well for when it came to post provisioning via terraform",
    "start": "2034550",
    "end": "2040809"
  },
  {
    "start": "2040000",
    "end": "2095000"
  },
  {
    "text": "so what are we using again this is just a recap of everything that's already been mentioned so I'll quickly move",
    "start": "2041020",
    "end": "2046850"
  },
  {
    "text": "through this the only item that we haven't spoken about over here is launched directly to further alleviate",
    "start": "2046850",
    "end": "2051889"
  },
  {
    "text": "some of our concerns when it came to configuration management at the application layer we decided to use a third-party tool called",
    "start": "2051890",
    "end": "2057950"
  },
  {
    "text": "launch Darkly essentially all launch Darkly does is provide feature management",
    "start": "2057950",
    "end": "2063020"
  },
  {
    "text": "and instead previously we relied on chef so when I said we did configuration",
    "start": "2063020",
    "end": "2068148"
  },
  {
    "text": "through chef we didn't just do configuration for the box but just like for those JVM parameters we didn't even",
    "start": "2068149",
    "end": "2073280"
  },
  {
    "text": "more specific configuration such as oh I want to enable this feature so if you wanted to enable disable feature our",
    "start": "2073280",
    "end": "2078560"
  },
  {
    "text": "monolith was already feature flag base but it would still require a restart of the application which was not useful at",
    "start": "2078560",
    "end": "2085070"
  },
  {
    "text": "all so that was really the only application outside of Jenkins that we leveraged outside excuse me that we",
    "start": "2085070",
    "end": "2092898"
  },
  {
    "text": "leveraged outside of the AWS ecosystem so what does what did the overall legacy architecture look like apologies that",
    "start": "2092899",
    "end": "2098720"
  },
  {
    "start": "2095000",
    "end": "2138000"
  },
  {
    "text": "this diagram might be a bit difficult to read but we went from this overall architecture where everything as you can",
    "start": "2098720",
    "end": "2106430"
  },
  {
    "text": "see is co-located onto its own ec2 instance and the connections that you",
    "start": "2106430",
    "end": "2111710"
  },
  {
    "text": "see are the services going from the client V PC and the central V PC and vice versa to communicate with one",
    "start": "2111710",
    "end": "2116960"
  },
  {
    "text": "another we do have a layer over here for RDS databases and we also have a layer at the bottom for ECS clusters this is",
    "start": "2116960",
    "end": "2125390"
  },
  {
    "text": "actually referring to a later phase of our legacy architecture where we had already moved on to RDS instances and we",
    "start": "2125390",
    "end": "2131690"
  },
  {
    "text": "had already POC dynamic dispatchers and the report services on ECS but we went from this gigantic architecture which",
    "start": "2131690",
    "end": "2138980"
  },
  {
    "start": "2138000",
    "end": "2206000"
  },
  {
    "text": "only represents 50% of it because it's multiplied by the number of customers we have to a more simplified architecture",
    "start": "2138980",
    "end": "2144380"
  },
  {
    "text": "and this is what we currently have again we still maintain multiple V pcs but if",
    "start": "2144380",
    "end": "2149540"
  },
  {
    "text": "you were to look at it from a single clients perspective you have two V pcs a central V PC and a client V PC and",
    "start": "2149540",
    "end": "2155119"
  },
  {
    "text": "within those V pcs we have two layers of high-level components the first layer",
    "start": "2155119",
    "end": "2160880"
  },
  {
    "text": "being the ECS cluster which houses every single one of those services that you saw which were previously running on",
    "start": "2160880",
    "end": "2166880"
  },
  {
    "text": "their standalone ec2 boxes and then number two you have an RDS layer which contains all the databases that those",
    "start": "2166880",
    "end": "2173480"
  },
  {
    "text": "services require and of course V PC peering is continued so the services can communicate with one another and the",
    "start": "2173480",
    "end": "2178760"
  },
  {
    "text": "items that are outside of those particular clock those particular clusters and excuse me the items that",
    "start": "2178760",
    "end": "2184070"
  },
  {
    "text": "are outside of those particular V pcs are the AWS parameter stores and launch Darkly AWS parameters store being used",
    "start": "2184070",
    "end": "2189950"
  },
  {
    "text": "for secrets management and one starkly being used for feature management this was obviously a much",
    "start": "2189950",
    "end": "2197070"
  },
  {
    "text": "easier this is obviously a much easier architecture for us to handle today despite the fact that we still provision",
    "start": "2197070",
    "end": "2203490"
  },
  {
    "text": "multiple V pcs on a per client basis so at the end of the day what did we achieve we definitely reduce cost",
    "start": "2203490",
    "end": "2209220"
  },
  {
    "start": "2206000",
    "end": "2378000"
  },
  {
    "text": "significantly because when you move to ECS you start thinking about resources from a horizontal scalability standpoint",
    "start": "2209220",
    "end": "2215520"
  },
  {
    "text": "so if you because we couldn't verdict because we couldn't horizontally scale we now had the infrastructure in place",
    "start": "2215520",
    "end": "2220950"
  },
  {
    "text": "to horizontally scale so it enforced us to think about our resources as a cluster rather than oh this item would",
    "start": "2220950",
    "end": "2227730"
  },
  {
    "text": "require four gigs of memory at scale but you're not always running at scale this is where I could take that same service",
    "start": "2227730",
    "end": "2234450"
  },
  {
    "text": "running at two gigs have an H a component and have an auto scaling component which would simply add another",
    "start": "2234450",
    "end": "2240060"
  },
  {
    "text": "service if that scale were to take place we achieve CISM icd we've already spoken about that one of the my personal",
    "start": "2240060",
    "end": "2247140"
  },
  {
    "text": "favorites is our the removal of reliance on chef for provisioning an app level configuration we separated the two by",
    "start": "2247140",
    "end": "2255980"
  },
  {
    "text": "ensuring that the infrastructure is provisioned through terraform and CloudFormation and the pipeline handles",
    "start": "2255980",
    "end": "2261660"
  },
  {
    "text": "the application provisioning component and as a result of those two items the new environments that we had to create",
    "start": "2261660",
    "end": "2267480"
  },
  {
    "text": "on a per client basis are now brought up in a matter of minutes versus a matter",
    "start": "2267480",
    "end": "2272670"
  },
  {
    "text": "of days and the reason it becomes days is because everything was through chef and everything was correlated despite",
    "start": "2272670",
    "end": "2279630"
  },
  {
    "text": "the fact that each client being on their own different VP sees we were afraid to",
    "start": "2279630",
    "end": "2284730"
  },
  {
    "text": "modify our chef cookbooks because we don't know what kind of divergence has taken place and chef would potentially",
    "start": "2284730",
    "end": "2290190"
  },
  {
    "text": "override that so we would have provisioning jobs that we would be afraid to run if we had a requirement to",
    "start": "2290190",
    "end": "2296850"
  },
  {
    "text": "add a new client so that's a nightmare because you're saying oh I'm a series B company I'm growing and you're telling",
    "start": "2296850",
    "end": "2302190"
  },
  {
    "text": "me I can't have a client where it's taking me three days to onboard somebody obviously that is an operational nightmare which is no longer the case",
    "start": "2302190",
    "end": "2308490"
  },
  {
    "text": "thanks to the new migrated thanks to the new flows that we've created naturally",
    "start": "2308490",
    "end": "2313500"
  },
  {
    "text": "this simplifies the developer workflow they don't need to understand chef if we do encourage them and we do want",
    "start": "2313500",
    "end": "2319140"
  },
  {
    "text": "to eventually understand the AWS ecosystem we do feel that as we go towards microservices it should be an",
    "start": "2319140",
    "end": "2324660"
  },
  {
    "text": "end-to-end type of ownership but there will it will take some time to get there regardless today the commit code it ends",
    "start": "2324660",
    "end": "2332100"
  },
  {
    "text": "up in CI and through the manual approvals it'll potentially end up all the way into production we also force",
    "start": "2332100",
    "end": "2338430"
  },
  {
    "text": "high availability as well as enabled high availability across apps and databases RDS handled the database piece",
    "start": "2338430",
    "end": "2344160"
  },
  {
    "text": "not not not all of the apps can per se necessarily are highly available in the",
    "start": "2344160",
    "end": "2352140"
  },
  {
    "text": "common sense but we've enabled it we're within a few weeks most of them should also be highly available but more",
    "start": "2352140",
    "end": "2358320"
  },
  {
    "text": "importantly what we did is we've altered the focus from an infrastructure and infrastructure component to an",
    "start": "2358320",
    "end": "2364950"
  },
  {
    "text": "application component so now we can actually focus on the scalability of the app the security of the app and the",
    "start": "2364950",
    "end": "2370320"
  },
  {
    "text": "testability of that whereas previously we were worried about the infrastructure just blowing up in our faces which may",
    "start": "2370320",
    "end": "2376080"
  },
  {
    "text": "or may not have happened a few times so that covers what we the entire migration",
    "start": "2376080",
    "end": "2381960"
  },
  {
    "start": "2378000",
    "end": "2389000"
  },
  {
    "text": "process and what we did just solve the problems we face but what's out there for us next and this isn't an exhaustive",
    "start": "2381960",
    "end": "2390270"
  },
  {
    "start": "2389000",
    "end": "2640000"
  },
  {
    "text": "list again this doesn't represent what we're doing across all of our 30 all of our multiple engineering teams but it",
    "start": "2390270",
    "end": "2396030"
  },
  {
    "text": "focuses on the items we mentioned throughout this presentation or the themes we've mentioned throughout throughout this presentation number one",
    "start": "2396030",
    "end": "2403050"
  },
  {
    "text": "and two referred to multi tenant container architecture and multi tenant application or intersection I'll talk about multi tenant application",
    "start": "2403050",
    "end": "2408720"
  },
  {
    "text": "architecture first for this for something like this to take place we would need to deed couple our",
    "start": "2408720",
    "end": "2414180"
  },
  {
    "text": "application so we are taking our monolith and breaking it out into micro services so it happens for us naturally",
    "start": "2414180",
    "end": "2420570"
  },
  {
    "text": "and we've enabled CI semi CD so that is not a problem for us when it comes to deployment the multi tenant container",
    "start": "2420570",
    "end": "2426270"
  },
  {
    "text": "architecture is what we also look at when it comes to the problem we face with provisioning multiple V pcs yes",
    "start": "2426270",
    "end": "2433920"
  },
  {
    "text": "we've reduced the burden on ourselves to provision those V pcs and maintain those B PCs but 50 V pcs today a thousand",
    "start": "2433920",
    "end": "2441690"
  },
  {
    "text": "customers tomorrow equal to a thousand V pcs you could potentially automate that and make that work but instead of a",
    "start": "2441690",
    "end": "2449430"
  },
  {
    "text": "graph moving up on the y-axis on the x-axis in terms of maintainability you'd",
    "start": "2449430",
    "end": "2454740"
  },
  {
    "text": "start moving up on the y-axis because you're taking that same application and replicating across multiple locations",
    "start": "2454740",
    "end": "2460770"
  },
  {
    "text": "increasing your footprint on what you need to maintain and what kind of outages you need to look for so if we",
    "start": "2460770",
    "end": "2465900"
  },
  {
    "text": "can take all of those V pcs on all those perk line V pcs consolidate them into a single one that would be far beneficial",
    "start": "2465900",
    "end": "2473940"
  },
  {
    "text": "to us than having to recreate V pcs on a per client basis that being said that is",
    "start": "2473940",
    "end": "2479190"
  },
  {
    "text": "heavily dependent on number three security and compliance is one of the reasons why we never did this in the beginning and one of the major",
    "start": "2479190",
    "end": "2485550"
  },
  {
    "text": "initiatives we have for the next year is Hydra certification we are not pH I certified the only way we are when we do",
    "start": "2485550",
    "end": "2491700"
  },
  {
    "text": "deal with pH items is because we partner with clear data so we actually deploy our entire infrastructure for pH I",
    "start": "2491700",
    "end": "2497520"
  },
  {
    "text": "related resources and to clear data as AWS environment that is our temporary stopgap until we achieve our AWS hydras",
    "start": "2497520",
    "end": "2505830"
  },
  {
    "text": "excuse me not an AWS but our hydras certification they did not pay me enough to say that Hydra certification so",
    "start": "2505830",
    "end": "2514290"
  },
  {
    "text": "security and compliance are extremely important and that will potentially modify parts of our existing infrastructure which is good because",
    "start": "2514290",
    "end": "2520170"
  },
  {
    "text": "it'll make our infrastructure and our application architecture more robust and far more secure number four exploring",
    "start": "2520170",
    "end": "2527880"
  },
  {
    "text": "kubernetes to reduce divergence between cloud and on-premise the on-prem model",
    "start": "2527880",
    "end": "2533100"
  },
  {
    "text": "is actually very simple it's a VMware image which contains docker containers whenever we're",
    "start": "2533100",
    "end": "2539460"
  },
  {
    "text": "deploying on Fram we know what kind of version we're going to deploy because it's a closed-off environment it's a",
    "start": "2539460",
    "end": "2544740"
  },
  {
    "text": "traditional deployment before the cloud era took off and so providing a VMware",
    "start": "2544740",
    "end": "2550410"
  },
  {
    "text": "image were would suffice for us however as the business grows on the on-prem size on the on-prem side we would have",
    "start": "2550410",
    "end": "2558840"
  },
  {
    "text": "it if we had an increase of VMware main VMware image maintenance that would be divergent from what we were doing in the",
    "start": "2558840",
    "end": "2565080"
  },
  {
    "text": "cloud and while ECS is only in the cloud kubernetes could potentially be deployed on from as well so that is something",
    "start": "2565080",
    "end": "2571560"
  },
  {
    "text": "that we're looking to explore but the primary advantage we see as from our vantage point at this time around is it",
    "start": "2571560",
    "end": "2577740"
  },
  {
    "text": "would reduce divergence and not necessarily anything because ECS satisfies most of the other",
    "start": "2577740",
    "end": "2582880"
  },
  {
    "text": "requirements also on Prem models and hybrid models can differ from customer to customer some customers will say you",
    "start": "2582880",
    "end": "2589869"
  },
  {
    "text": "can deploy into our environment and we will not provide you any level of",
    "start": "2589869",
    "end": "2594939"
  },
  {
    "text": "connectivity into our environment whereas others will say we'll give you a hybrid connectivity you can connect the two V pcs together you can actually",
    "start": "2594939",
    "end": "2601269"
  },
  {
    "text": "access H into those boxes so you could leverage other services to dynamically push code down into their data centers",
    "start": "2601269",
    "end": "2608439"
  },
  {
    "text": "also kubernetes would be beneficial for us not just for excuse me on Prem",
    "start": "2608439",
    "end": "2613650"
  },
  {
    "text": "resources on Prem data centers but also private data centers and clear data like",
    "start": "2613650",
    "end": "2618669"
  },
  {
    "text": "other private AWS accounts should a customer require us to do so but this",
    "start": "2618669",
    "end": "2625509"
  },
  {
    "text": "essentially wraps up the majority of the presentation and we do have quite a few",
    "start": "2625509",
    "end": "2632739"
  },
  {
    "text": "initiatives that are in the pipeline but these will be the primary ones that we'll focus on for the foreseeable",
    "start": "2632739",
    "end": "2637959"
  },
  {
    "text": "future I want to give a brief shout out to the team that has worked tirelessly over the last few months to do what to achieve what we've",
    "start": "2637959",
    "end": "2645759"
  },
  {
    "text": "achieved so far and thank you everyone else for attending we are hiring cheap plug for et on thank you we'll take",
    "start": "2645759",
    "end": "2651519"
  },
  {
    "text": "questions",
    "start": "2651519",
    "end": "2653640"
  },
  {
    "start": "2657000",
    "end": "2665000"
  },
  {
    "text": "all right we are gonna be taking some questions from slide oh no no questions",
    "start": "2658099",
    "end": "2664369"
  },
  {
    "text": "yet so how much more sleep do you get at night now that you have infrastructure",
    "start": "2664369",
    "end": "2669440"
  },
  {
    "text": "that's highly available you would hope I get a lot more but I'm still working on that any questions the audience about",
    "start": "2669440",
    "end": "2676099"
  },
  {
    "text": "going through this journey now that you got it up what kind of percentage on",
    "start": "2676099",
    "end": "2682190"
  },
  {
    "text": "your ROI are you seeing out of this endeavor oh yeah so the biggest ROI",
    "start": "2682190",
    "end": "2687470"
  },
  {
    "text": "percentage that we saw was on dynamic dispatchers by moving them to ACS and",
    "start": "2687470",
    "end": "2692499"
  },
  {
    "text": "our bill as it was was over way over the",
    "start": "2692499",
    "end": "2697549"
  },
  {
    "text": "roof when we spoke to people about our bill they thought we were a unicorn startup we were only Series B and we",
    "start": "2697549",
    "end": "2704569"
  },
  {
    "text": "essentially say shaved off at least 40 to 45 percent and I'm being conservative",
    "start": "2704569",
    "end": "2709940"
  },
  {
    "text": "when I say that on a monthly basis so where's your biggest spent now that you've eliminated I assume the compute",
    "start": "2709940",
    "end": "2716359"
  },
  {
    "text": "was the biggest piece by switching with retainer ization yeah so where's the biggest partyer spent now as a storage for infrastructure I would say storage",
    "start": "2716359",
    "end": "2724849"
  },
  {
    "text": "is naturally going to increase because of the number of data because of the sizes of the data set but compute will",
    "start": "2724849",
    "end": "2730609"
  },
  {
    "text": "continue to be our primary spec because when we're crunching those those data sets you have to recognize that they",
    "start": "2730609",
    "end": "2737390"
  },
  {
    "text": "require really large instances depending on how big that data set is to be able",
    "start": "2737390",
    "end": "2742549"
  },
  {
    "text": "to successfully crunch those numbers any any plans to look into anything of a server left side we did consider lambda",
    "start": "2742549",
    "end": "2750499"
  },
  {
    "text": "last year but it was too early for us to look at it there might be space for",
    "start": "2750499",
    "end": "2755869"
  },
  {
    "text": "lambda and the service components when it comes to our data ingestion pipeline we are using lambda for minor things",
    "start": "2755869",
    "end": "2762739"
  },
  {
    "text": "such as notifications down to slack so the data ingestion pipeline is probably the primary area the compute side the",
    "start": "2762739",
    "end": "2769339"
  },
  {
    "text": "application deployment side we seem to be pretty satisfied with where we are today any other questions",
    "start": "2769339",
    "end": "2776170"
  },
  {
    "text": "what about your cost for the the build like how much how much call star you",
    "start": "2777260",
    "end": "2785070"
  },
  {
    "text": "incurring on bills because you're paying for the code for every time it's",
    "start": "2785070",
    "end": "2790140"
  },
  {
    "text": "building oh you're getting a reduction but Oh for the code man so every time they keep putting out new code you're",
    "start": "2790140",
    "end": "2796080"
  },
  {
    "text": "occurring a charge how is that affected you right so it's practically negligible",
    "start": "2796080",
    "end": "2802650"
  },
  {
    "text": "well we don't even consider it I think we'd we had multiple deployments",
    "start": "2802650",
    "end": "2807900"
  },
  {
    "text": "obviously we did hundreds of deployments specifically within the dev environments over the past month and it was only a",
    "start": "2807900",
    "end": "2814410"
  },
  {
    "text": "few bucks here and there yeah I mean you think about a build server you want to be up and active and ready to take jobs",
    "start": "2814410",
    "end": "2819450"
  },
  {
    "text": "so you can deploy any time so traditionally if you were running just jenkins you'd have this massive machine",
    "start": "2819450",
    "end": "2824640"
  },
  {
    "text": "running all the time you turn off at night that's expensive with this you only pay for the compute during the",
    "start": "2824640",
    "end": "2829920"
  },
  {
    "text": "build job and if you get a hundred jobs being built at one time you can run all in parallel so it's much quicker so it's",
    "start": "2829920",
    "end": "2836130"
  },
  {
    "text": "it's cheap yeah and one more thing to add on to the bill component is you can actually reduce the time of your builds",
    "start": "2836130",
    "end": "2841650"
  },
  {
    "text": "on AWS code build if you pre create some of those docker images so if you're",
    "start": "2841650",
    "end": "2847440"
  },
  {
    "text": "using a vanilla image it would have to download maven it would have to download the dependencies which takes up a few",
    "start": "2847440",
    "end": "2852570"
  },
  {
    "text": "minutes you could potentially pre create an image specify that as the image you want to use for AWS code build and you",
    "start": "2852570",
    "end": "2858960"
  },
  {
    "text": "would reduce their time even further of reducing your cost even further and there's also we launched a service last year called code star and code star lets",
    "start": "2858960",
    "end": "2866340"
  },
  {
    "text": "you basically deploy you pick the type of application you want whether it's lambda whether it's PHP app whether you",
    "start": "2866340",
    "end": "2871350"
  },
  {
    "text": "pick and then where you want to run it do you want to run it on ec2 go and run down lambda and it'll set up as an",
    "start": "2871350",
    "end": "2878310"
  },
  {
    "text": "entire pipeline for you in a matter of minutes so it's really slick so you're",
    "start": "2878310",
    "end": "2883560"
  },
  {
    "text": "running a QuickStart costars fantastic for that any other questions",
    "start": "2883560",
    "end": "2889400"
  },
  {
    "text": "yes so are you leveraging good question not yes to that we are not leveraging",
    "start": "2889650",
    "end": "2895450"
  },
  {
    "text": "far gate at the moment we did look at far gate when we had these discussions last year but at that point in time far",
    "start": "2895450",
    "end": "2900519"
  },
  {
    "text": "gate was not HIPAA compliant so it wasn't something we could consider as far get something that we're going to absolutely look at yeah q1 when we're",
    "start": "2900519",
    "end": "2906640"
  },
  {
    "text": "looking at kubernetes we will also look at for gate in fact for some of the other areas such as the dynamic",
    "start": "2906640",
    "end": "2912700"
  },
  {
    "text": "dispatchers we're already considering leveraging forget but again that's highly dependent on compliance and",
    "start": "2912700",
    "end": "2917829"
  },
  {
    "text": "security so as long as we do our due diligence and those are satisfied we could potentially move on to that so now",
    "start": "2917829",
    "end": "2924430"
  },
  {
    "text": "it's eligible for it so it's a potential candidate yeah you have some great stories of customers using far gate it's",
    "start": "2924430",
    "end": "2930369"
  },
  {
    "text": "highly adopted really simplifies managing these containers you don't want have to manage the infrastructure the",
    "start": "2930369",
    "end": "2935529"
  },
  {
    "text": "hazards container so great approach for it any other questions all right well thank",
    "start": "2935529",
    "end": "2941979"
  },
  {
    "text": "you very much round of applause",
    "start": "2941979",
    "end": "2945180"
  }
]