[
  {
    "text": "[Music]",
    "start": "0",
    "end": "2480"
  },
  {
    "text": "hello",
    "start": "2480",
    "end": "3199"
  },
  {
    "text": "and thank you for watching this video on",
    "start": "3199",
    "end": "4960"
  },
  {
    "text": "how to deploy your.net application",
    "start": "4960",
    "end": "7440"
  },
  {
    "text": "to amazon elastic container service",
    "start": "7440",
    "end": "9840"
  },
  {
    "text": "amazon ecs",
    "start": "9840",
    "end": "11200"
  },
  {
    "text": "with aws copilot i am ignacio fuentes",
    "start": "11200",
    "end": "15040"
  },
  {
    "text": "a solutions architect here at aws",
    "start": "15040",
    "end": "18720"
  },
  {
    "text": "before we get started let's begin by",
    "start": "18720",
    "end": "21199"
  },
  {
    "text": "talking about ecs and how",
    "start": "21199",
    "end": "23119"
  },
  {
    "text": "copilot can simplify deploying",
    "start": "23119",
    "end": "25359"
  },
  {
    "text": "applications to it",
    "start": "25359",
    "end": "27199"
  },
  {
    "text": "amazon ecs is a container management",
    "start": "27199",
    "end": "30000"
  },
  {
    "text": "service",
    "start": "30000",
    "end": "30640"
  },
  {
    "text": "that makes it easy to run stop and",
    "start": "30640",
    "end": "33280"
  },
  {
    "text": "manage containers in a cluster",
    "start": "33280",
    "end": "35600"
  },
  {
    "text": "with ecs your containers are defined in",
    "start": "35600",
    "end": "38640"
  },
  {
    "text": "a task",
    "start": "38640",
    "end": "39280"
  },
  {
    "text": "definition which you use to run",
    "start": "39280",
    "end": "41360"
  },
  {
    "text": "individual tasks",
    "start": "41360",
    "end": "42879"
  },
  {
    "text": "or as a service ecs gives you many",
    "start": "42879",
    "end": "46000"
  },
  {
    "text": "architectural options",
    "start": "46000",
    "end": "47760"
  },
  {
    "text": "to fine tune exactly how you want the",
    "start": "47760",
    "end": "50480"
  },
  {
    "text": "architecture of your workloads to",
    "start": "50480",
    "end": "52239"
  },
  {
    "text": "operate",
    "start": "52239",
    "end": "53440"
  },
  {
    "text": "you can run your tasks and services on a",
    "start": "53440",
    "end": "56079"
  },
  {
    "text": "serverless infrastructure that is",
    "start": "56079",
    "end": "57600"
  },
  {
    "text": "managed",
    "start": "57600",
    "end": "58000"
  },
  {
    "text": "by aws fargate or for more control over",
    "start": "58000",
    "end": "61680"
  },
  {
    "text": "your infrastructure",
    "start": "61680",
    "end": "62800"
  },
  {
    "text": "you can run your tasks and services on a",
    "start": "62800",
    "end": "65198"
  },
  {
    "text": "cluster of amazon ec2 instances",
    "start": "65199",
    "end": "67680"
  },
  {
    "text": "that you manage this model is great and",
    "start": "67680",
    "end": "70799"
  },
  {
    "text": "is serving thousands of customers today",
    "start": "70799",
    "end": "73920"
  },
  {
    "text": "but for some customers that want less",
    "start": "73920",
    "end": "76720"
  },
  {
    "text": "focus on",
    "start": "76720",
    "end": "77439"
  },
  {
    "text": "infrastructure but rather would prefer a",
    "start": "77439",
    "end": "80479"
  },
  {
    "text": "more app-focused approach to workload",
    "start": "80479",
    "end": "83759"
  },
  {
    "text": "deployment and management",
    "start": "83759",
    "end": "85600"
  },
  {
    "text": "aws copilot is a great choice",
    "start": "85600",
    "end": "89520"
  },
  {
    "text": "aws copilot is a command line tool that",
    "start": "89520",
    "end": "92560"
  },
  {
    "text": "makes it easier",
    "start": "92560",
    "end": "93680"
  },
  {
    "text": "for you to deploy your applications on",
    "start": "93680",
    "end": "96159"
  },
  {
    "text": "amazon ecs",
    "start": "96159",
    "end": "98720"
  },
  {
    "text": "the idea behind co-pilot is that when",
    "start": "98720",
    "end": "101520"
  },
  {
    "text": "thinking about creating a new container",
    "start": "101520",
    "end": "103920"
  },
  {
    "text": "space application",
    "start": "103920",
    "end": "105280"
  },
  {
    "text": "you want to spend time focusing on the",
    "start": "105280",
    "end": "107360"
  },
  {
    "text": "concepts and constructs",
    "start": "107360",
    "end": "108960"
  },
  {
    "text": "that are specific to your application",
    "start": "108960",
    "end": "111520"
  },
  {
    "text": "and not about infrastructure concepts",
    "start": "111520",
    "end": "113439"
  },
  {
    "text": "like vpcs",
    "start": "113439",
    "end": "114880"
  },
  {
    "text": "load balancers internet gateways cicd",
    "start": "114880",
    "end": "118240"
  },
  {
    "text": "pipelines",
    "start": "118240",
    "end": "119040"
  },
  {
    "text": "databases storage etc",
    "start": "119040",
    "end": "122479"
  },
  {
    "text": "copilot handles all these underlying",
    "start": "122479",
    "end": "124960"
  },
  {
    "text": "details for you",
    "start": "124960",
    "end": "126399"
  },
  {
    "text": "you just provide your container and then",
    "start": "126399",
    "end": "128720"
  },
  {
    "text": "let co-pilot handle high availability",
    "start": "128720",
    "end": "130879"
  },
  {
    "text": "deployments",
    "start": "130879",
    "end": "131760"
  },
  {
    "text": "and load balancer creation and",
    "start": "131760",
    "end": "133280"
  },
  {
    "text": "configuration",
    "start": "133280",
    "end": "134879"
  },
  {
    "text": "you can even have copilot create a",
    "start": "134879",
    "end": "136800"
  },
  {
    "text": "deployment pipeline",
    "start": "136800",
    "end": "138160"
  },
  {
    "text": "that will automatically redeploy the",
    "start": "138160",
    "end": "140319"
  },
  {
    "text": "latest version of your application",
    "start": "140319",
    "end": "142319"
  },
  {
    "text": "every time you push a new commit to your",
    "start": "142319",
    "end": "144560"
  },
  {
    "text": "code repository",
    "start": "144560",
    "end": "146239"
  },
  {
    "text": "with copilot you can rapidly go from",
    "start": "146239",
    "end": "148400"
  },
  {
    "text": "idea to implementation",
    "start": "148400",
    "end": "150560"
  },
  {
    "text": "with the confidence that the",
    "start": "150560",
    "end": "151760"
  },
  {
    "text": "infrastructure you have deployed has",
    "start": "151760",
    "end": "154239"
  },
  {
    "text": "production ready configuration with that",
    "start": "154239",
    "end": "157760"
  },
  {
    "text": "let's go ahead and take a look at the",
    "start": "157760",
    "end": "159599"
  },
  {
    "text": "steps to deploy a brand new",
    "start": "159599",
    "end": "161680"
  },
  {
    "text": "asp.net core application to ecs",
    "start": "161680",
    "end": "164959"
  },
  {
    "text": "with aws copilot i will first use the",
    "start": "164959",
    "end": "169120"
  },
  {
    "text": "terminal to",
    "start": "169120",
    "end": "170080"
  },
  {
    "text": "create the folder for my application",
    "start": "170080",
    "end": "174319"
  },
  {
    "text": "i will navigate to that folder and",
    "start": "174959",
    "end": "177120"
  },
  {
    "text": "initialize the application with the.net",
    "start": "177120",
    "end": "179599"
  },
  {
    "text": "cli",
    "start": "179599",
    "end": "181040"
  },
  {
    "text": "today i will be creating an asp.net fvc",
    "start": "181040",
    "end": "184400"
  },
  {
    "text": "application",
    "start": "184400",
    "end": "185360"
  },
  {
    "text": "so i will use the net new mbc command",
    "start": "185360",
    "end": "188560"
  },
  {
    "text": "and pass the rrc parameter for razer",
    "start": "188560",
    "end": "191760"
  },
  {
    "text": "runtime compilation and debugging",
    "start": "191760",
    "end": "193920"
  },
  {
    "text": "and no https i don't need https as part",
    "start": "193920",
    "end": "198080"
  },
  {
    "text": "of my.net service",
    "start": "198080",
    "end": "199519"
  },
  {
    "text": "as https and tls termination",
    "start": "199519",
    "end": "202560"
  },
  {
    "text": "will happen at the load balancer level",
    "start": "202560",
    "end": "206319"
  },
  {
    "text": "with this in place let's open up visual",
    "start": "206319",
    "end": "208560"
  },
  {
    "text": "studio code",
    "start": "208560",
    "end": "209599"
  },
  {
    "text": "and take a look at our application code",
    "start": "209599",
    "end": "213440"
  },
  {
    "text": "i am using visual studio code and.net 5",
    "start": "213440",
    "end": "216959"
  },
  {
    "text": "but you can use visual studio and other",
    "start": "216959",
    "end": "219120"
  },
  {
    "text": "versions of.net",
    "start": "219120",
    "end": "221680"
  },
  {
    "text": "as we can see this is a typical asp.net",
    "start": "221680",
    "end": "224959"
  },
  {
    "text": "mvc application for demonstration",
    "start": "224959",
    "end": "228720"
  },
  {
    "text": "purposes",
    "start": "228720",
    "end": "229760"
  },
  {
    "text": "i will make a couple of ui changes to it",
    "start": "229760",
    "end": "232640"
  },
  {
    "text": "and run it locally",
    "start": "232640",
    "end": "241840"
  },
  {
    "text": "now that i'm ready to deploy my",
    "start": "242080",
    "end": "243599"
  },
  {
    "text": "application i need to containerize it",
    "start": "243599",
    "end": "246319"
  },
  {
    "text": "using docker",
    "start": "246319",
    "end": "247439"
  },
  {
    "text": "by creating a docker file",
    "start": "247439",
    "end": "250879"
  },
  {
    "text": "vs code has built-in support for docker",
    "start": "250879",
    "end": "253840"
  },
  {
    "text": "file generation",
    "start": "253840",
    "end": "254959"
  },
  {
    "text": "so i will make use of that",
    "start": "254959",
    "end": "258239"
  },
  {
    "text": "as mentioned before i will choose port",
    "start": "260239",
    "end": "263040"
  },
  {
    "text": "80 only",
    "start": "263040",
    "end": "264240"
  },
  {
    "text": "as the tls termination will happen at",
    "start": "264240",
    "end": "266800"
  },
  {
    "text": "the load balancer level",
    "start": "266800",
    "end": "270319"
  },
  {
    "text": "now we are ready to deploy our",
    "start": "273759",
    "end": "276000"
  },
  {
    "text": "application with aws",
    "start": "276000",
    "end": "277759"
  },
  {
    "text": "copilot",
    "start": "277759",
    "end": "280479"
  },
  {
    "text": "to install the copilot cli you can run",
    "start": "280800",
    "end": "284000"
  },
  {
    "text": "the brew",
    "start": "284000",
    "end": "284720"
  },
  {
    "text": "install aws slash tab slash go power",
    "start": "284720",
    "end": "288240"
  },
  {
    "text": "cli command",
    "start": "288240",
    "end": "291199"
  },
  {
    "text": "i already have copilot installed so i",
    "start": "291919",
    "end": "294880"
  },
  {
    "text": "will go ahead and start",
    "start": "294880",
    "end": "296080"
  },
  {
    "text": "using it to deploy my application to ecs",
    "start": "296080",
    "end": "300800"
  },
  {
    "text": "in order to deploy my application the",
    "start": "302320",
    "end": "304800"
  },
  {
    "text": "first command i will run",
    "start": "304800",
    "end": "306479"
  },
  {
    "text": "is a copilot command this command will",
    "start": "306479",
    "end": "309600"
  },
  {
    "text": "display",
    "start": "309600",
    "end": "310080"
  },
  {
    "text": "a summary of all the available",
    "start": "310080",
    "end": "312240"
  },
  {
    "text": "operations you can perform",
    "start": "312240",
    "end": "314080"
  },
  {
    "text": "with the copilot cli",
    "start": "314080",
    "end": "317520"
  },
  {
    "text": "we will create an application by making",
    "start": "318320",
    "end": "320720"
  },
  {
    "text": "use of the copilot",
    "start": "320720",
    "end": "322080"
  },
  {
    "text": "app in each command and passing the name",
    "start": "322080",
    "end": "325120"
  },
  {
    "text": "of our app",
    "start": "325120",
    "end": "326000"
  },
  {
    "text": "and the domain we want to use",
    "start": "326000",
    "end": "329360"
  },
  {
    "text": "the domain parameter is optional i will",
    "start": "329360",
    "end": "331919"
  },
  {
    "text": "be using it to deploy my services to my",
    "start": "331919",
    "end": "334320"
  },
  {
    "text": "domain",
    "start": "334320",
    "end": "334960"
  },
  {
    "text": "hosted in amazon route 53.",
    "start": "334960",
    "end": "339120"
  },
  {
    "text": "now we will use the copilot init",
    "start": "339120",
    "end": "342240"
  },
  {
    "text": "command copilot will ask a few",
    "start": "342240",
    "end": "345759"
  },
  {
    "text": "questions about our containerized",
    "start": "345759",
    "end": "347759"
  },
  {
    "text": "application",
    "start": "347759",
    "end": "348960"
  },
  {
    "text": "before it proceeds to deploy the",
    "start": "348960",
    "end": "350800"
  },
  {
    "text": "application to ecs",
    "start": "350800",
    "end": "353280"
  },
  {
    "text": "we will select load balancer service as",
    "start": "353280",
    "end": "356319"
  },
  {
    "text": "we want this application to be",
    "start": "356319",
    "end": "358240"
  },
  {
    "text": "accessible over the internet",
    "start": "358240",
    "end": "360000"
  },
  {
    "text": "via a load balancer but you could also",
    "start": "360000",
    "end": "362720"
  },
  {
    "text": "choose back-end service",
    "start": "362720",
    "end": "364400"
  },
  {
    "text": "for internal services only available to",
    "start": "364400",
    "end": "367120"
  },
  {
    "text": "other containers",
    "start": "367120",
    "end": "368319"
  },
  {
    "text": "within your application or schedule jobs",
    "start": "368319",
    "end": "371360"
  },
  {
    "text": "for operations that need to be executed",
    "start": "371360",
    "end": "373759"
  },
  {
    "text": "periodically",
    "start": "373759",
    "end": "375520"
  },
  {
    "text": "we will provide a name for our load",
    "start": "375520",
    "end": "377840"
  },
  {
    "text": "balancer",
    "start": "377840",
    "end": "379120"
  },
  {
    "text": "i will use svc1 this will also be the",
    "start": "379120",
    "end": "382880"
  },
  {
    "text": "dns subdomain assigned",
    "start": "382880",
    "end": "384960"
  },
  {
    "text": "to our service co-pilot will ask for the",
    "start": "384960",
    "end": "389280"
  },
  {
    "text": "path",
    "start": "389280",
    "end": "389680"
  },
  {
    "text": "of our docker file in this case it's at",
    "start": "389680",
    "end": "392560"
  },
  {
    "text": "the root folder of my asp.net",
    "start": "392560",
    "end": "394880"
  },
  {
    "text": "application",
    "start": "394880",
    "end": "397360"
  },
  {
    "text": "copilot will go ahead and create the",
    "start": "397360",
    "end": "399600"
  },
  {
    "text": "necessary infrastructure for our",
    "start": "399600",
    "end": "401520"
  },
  {
    "text": "application",
    "start": "401520",
    "end": "403520"
  },
  {
    "text": "we will respond yes to deploying a test",
    "start": "403520",
    "end": "406840"
  },
  {
    "text": "environment co-pilot will then",
    "start": "406840",
    "end": "409039"
  },
  {
    "text": "create the required networking stack iim",
    "start": "409039",
    "end": "412400"
  },
  {
    "text": "roles",
    "start": "412400",
    "end": "413280"
  },
  {
    "text": "build our docker image push it to amazon",
    "start": "413280",
    "end": "416160"
  },
  {
    "text": "ecr",
    "start": "416160",
    "end": "417120"
  },
  {
    "text": "and deploy our service",
    "start": "417120",
    "end": "420400"
  },
  {
    "text": "after this process is finished we now",
    "start": "421599",
    "end": "423840"
  },
  {
    "text": "have an accessible service we can get to",
    "start": "423840",
    "end": "428240"
  },
  {
    "text": "we can go to our aws console and verify",
    "start": "432400",
    "end": "435199"
  },
  {
    "text": "that co-pilot has created an ecs cluster",
    "start": "435199",
    "end": "438160"
  },
  {
    "text": "for us",
    "start": "438160",
    "end": "439039"
  },
  {
    "text": "created a task definition and deployed",
    "start": "439039",
    "end": "441840"
  },
  {
    "text": "one",
    "start": "441840",
    "end": "442240"
  },
  {
    "text": "instance of the task via firegate to our",
    "start": "442240",
    "end": "447199"
  },
  {
    "text": "cluster",
    "start": "448840",
    "end": "451360"
  },
  {
    "text": "we can also deploy a new production",
    "start": "451360",
    "end": "453759"
  },
  {
    "text": "environment",
    "start": "453759",
    "end": "454720"
  },
  {
    "text": "separate from our test environment we",
    "start": "454720",
    "end": "457680"
  },
  {
    "text": "can do this by running the co-pilot",
    "start": "457680",
    "end": "459840"
  },
  {
    "text": "m init command we will pass it",
    "start": "459840",
    "end": "462960"
  },
  {
    "text": "production as its name",
    "start": "462960",
    "end": "466638"
  },
  {
    "text": "as part of this production environment",
    "start": "472000",
    "end": "474160"
  },
  {
    "text": "we can make some configuration changes",
    "start": "474160",
    "end": "476479"
  },
  {
    "text": "that will only be applicable to this new",
    "start": "476479",
    "end": "478879"
  },
  {
    "text": "environment",
    "start": "478879",
    "end": "480160"
  },
  {
    "text": "for example we can change the desired",
    "start": "480160",
    "end": "482879"
  },
  {
    "text": "number of running tasks",
    "start": "482879",
    "end": "484800"
  },
  {
    "text": "as well as the size of the cpu and the",
    "start": "484800",
    "end": "488080"
  },
  {
    "text": "amount of memory allocated to each task",
    "start": "488080",
    "end": "492800"
  },
  {
    "text": "we can do this in our manifesto yaml",
    "start": "492800",
    "end": "495120"
  },
  {
    "text": "file",
    "start": "495120",
    "end": "495840"
  },
  {
    "text": "that copilot automatically added to our",
    "start": "495840",
    "end": "498240"
  },
  {
    "text": "application",
    "start": "498240",
    "end": "500960"
  },
  {
    "text": "with this in place we can now run the",
    "start": "504080",
    "end": "506400"
  },
  {
    "text": "copilot service deploy command",
    "start": "506400",
    "end": "508879"
  },
  {
    "text": "to deploy our service to the production",
    "start": "508879",
    "end": "511520"
  },
  {
    "text": "environment",
    "start": "511520",
    "end": "512320"
  },
  {
    "text": "with this new configuration",
    "start": "512320",
    "end": "521839"
  },
  {
    "text": "we can go to our aws console once more",
    "start": "524080",
    "end": "526959"
  },
  {
    "text": "and verify that codepilot has",
    "start": "526959",
    "end": "529120"
  },
  {
    "text": "created a new production ecs cluster for",
    "start": "529120",
    "end": "532320"
  },
  {
    "text": "us",
    "start": "532320",
    "end": "532880"
  },
  {
    "text": "created a task definition and deployed",
    "start": "532880",
    "end": "535839"
  },
  {
    "text": "two",
    "start": "535839",
    "end": "536480"
  },
  {
    "text": "instances of the task as configured",
    "start": "536480",
    "end": "540080"
  },
  {
    "text": "we can also see that the task definition",
    "start": "540080",
    "end": "542720"
  },
  {
    "text": "is using our set",
    "start": "542720",
    "end": "544480"
  },
  {
    "text": "cpu and memory configurations that we",
    "start": "544480",
    "end": "547279"
  },
  {
    "text": "passed to our manifest file",
    "start": "547279",
    "end": "550320"
  },
  {
    "text": "as you can see it's very easy to get",
    "start": "550320",
    "end": "552640"
  },
  {
    "text": "started with copilot",
    "start": "552640",
    "end": "554320"
  },
  {
    "text": "and in today's example i showed you how",
    "start": "554320",
    "end": "556720"
  },
  {
    "text": "to deploy an asp.net 5",
    "start": "556720",
    "end": "558640"
  },
  {
    "text": "application to ecs and fargate with",
    "start": "558640",
    "end": "561440"
  },
  {
    "text": "co-pilot",
    "start": "561440",
    "end": "563120"
  },
  {
    "text": "but this is really just the beginning",
    "start": "563120",
    "end": "565600"
  },
  {
    "text": "co-pilot",
    "start": "565600",
    "end": "566399"
  },
  {
    "text": "also supports auto provisioning cicd",
    "start": "566399",
    "end": "569200"
  },
  {
    "text": "pipelines",
    "start": "569200",
    "end": "570399"
  },
  {
    "text": "streamlines the creation of dynamodb and",
    "start": "570399",
    "end": "572959"
  },
  {
    "text": "s3 resources",
    "start": "572959",
    "end": "574480"
  },
  {
    "text": "and has support for add-ons to extend",
    "start": "574480",
    "end": "577120"
  },
  {
    "text": "its functionality",
    "start": "577120",
    "end": "578480"
  },
  {
    "text": "to many other aws services that your",
    "start": "578480",
    "end": "581200"
  },
  {
    "text": "application might need",
    "start": "581200",
    "end": "583600"
  },
  {
    "text": "so head on over to co-pilot cli space on",
    "start": "583600",
    "end": "586480"
  },
  {
    "text": "github",
    "start": "586480",
    "end": "587120"
  },
  {
    "text": "and get started with aws co-pilot today",
    "start": "587120",
    "end": "590720"
  },
  {
    "text": "i hope you enjoyed this video and found",
    "start": "590720",
    "end": "593040"
  },
  {
    "text": "it informative",
    "start": "593040",
    "end": "594320"
  },
  {
    "text": "thank you for watching",
    "start": "594320",
    "end": "604720"
  },
  {
    "text": "you",
    "start": "604720",
    "end": "606800"
  }
]