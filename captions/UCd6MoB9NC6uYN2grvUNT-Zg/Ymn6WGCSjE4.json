[
  {
    "text": "hello everybody oh thank you for the clicker my name is Norman Johansson and with me here is Steve Roberts we are",
    "start": "880",
    "end": "7560"
  },
  {
    "text": "both software developers on the ads. net team and today we're going to talk about serverless development with c and ads",
    "start": "7560",
    "end": "16080"
  },
  {
    "text": "Lambda very",
    "start": "16080",
    "end": "19320"
  },
  {
    "text": "exciting so yeah a little background on that Steve and I were at reinvent uh last year and like every conversation we",
    "start": "21400",
    "end": "28080"
  },
  {
    "text": "had with you guys was when can we write SE Lambda so we were very determined that we're not coming back to reinvent",
    "start": "28080",
    "end": "33800"
  },
  {
    "text": "unless we could tell you guys we could write C Lambda functions so here we are Yes we made it back so luckily to the",
    "start": "33800",
    "end": "40559"
  },
  {
    "text": "great team back in Seattle they made this happen now the reason why I tell you that story is because this also is a",
    "start": "40559",
    "end": "47199"
  },
  {
    "text": "prime example of how we build our backlog we work on an Amazon it's basically you tell us what you want and",
    "start": "47199",
    "end": "52600"
  },
  {
    "text": "that helps prioritize some we things so if you see something you want let us know if you see other things people are",
    "start": "52600",
    "end": "58480"
  },
  {
    "text": "asking that would be helpful for you plus one that and that's really what helps Drive the backlogs that we work",
    "start": "58480",
    "end": "65280"
  },
  {
    "text": "on so today what we're going to talk about is we're going to give a very brief introduction to adus Lambda judging by the round of applause I'm",
    "start": "65280",
    "end": "71640"
  },
  {
    "text": "assuming that most of you already know what adus Lambda is but I just want to get a little brief introduction there",
    "start": "71640",
    "end": "77280"
  },
  {
    "text": "and I'm going chose why we chose to use net core versus the Trad traditional NET",
    "start": "77280",
    "end": "82360"
  },
  {
    "text": "Framework and then show off a lot of the newnet core Lambda tooling we've had to help you write your C functions today",
    "start": "82360",
    "end": "89200"
  },
  {
    "text": "the talk there that should be fairly short because for the most part Steve and I are just going to be working in",
    "start": "89200",
    "end": "94799"
  },
  {
    "text": "visual studio and showing you how to get started writing",
    "start": "94799",
    "end": "99399"
  },
  {
    "text": "today so Lambda is considered the compute part of the adus serverless architecture and it has zero",
    "start": "99960",
    "end": "106360"
  },
  {
    "text": "Administration here in this world we are not thinking about what ec2 instances do I want to have what's the instance type",
    "start": "106360",
    "end": "112560"
  },
  {
    "text": "how do I set up my load balancers are autoscaling and in the servess world all that's taken care of for you all you're",
    "start": "112560",
    "end": "118640"
  },
  {
    "text": "really going to do is going to say for my Lambda function how much memory do I want to dedicate to that function and Lambda has an event driven",
    "start": "118640",
    "end": "126240"
  },
  {
    "text": "scaling meaning that Lambda is going to take care of making sure that your function has all the compute power it needs to meet the current Demand on your",
    "start": "126240",
    "end": "133560"
  },
  {
    "text": "functions so as your functions being called a lot by lots of paralyzed requests it'll make sure it has that",
    "start": "133560",
    "end": "139239"
  },
  {
    "text": "compute power and it works in the opposite too if unlike an ec2 instance world where if you you know you pay that",
    "start": "139239",
    "end": "146840"
  },
  {
    "text": "hourly rate even if you're not even using it and L's case if no one's calling your function then you're not",
    "start": "146840",
    "end": "152840"
  },
  {
    "text": "paying for anything there's no cost for idle time in lambda's world so really with Lambda you're just going to upload",
    "start": "152840",
    "end": "158680"
  },
  {
    "text": "your code and go now why did we choose net core versus",
    "start": "158680",
    "end": "164640"
  },
  {
    "text": "the traditional NET Framework now net core is the new redesigned version of net with a focus on more modern",
    "start": "164640",
    "end": "171640"
  },
  {
    "text": "applications and in particular Cloud enable applications which has a lot of great benefits for writing Lambda",
    "start": "171640",
    "end": "178280"
  },
  {
    "text": "functions first is performance net core was designed for Speed and it also was",
    "start": "178280",
    "end": "184440"
  },
  {
    "text": "designed with a modulized design allowing you when you're writing your Lambda functions to only include the",
    "start": "184440",
    "end": "190120"
  },
  {
    "text": "parts of net that you're actually going to use which gives you a much lower memory usage and in lambda's case one of",
    "start": "190120",
    "end": "197120"
  },
  {
    "text": "the factors on how much you pay for Lambda is how much memory you use so if you can use less memory you can pay",
    "start": "197120",
    "end": "202480"
  },
  {
    "text": "Lambda Less open source is another benefit of net core so we actually took the net",
    "start": "202480",
    "end": "208799"
  },
  {
    "text": "core source and we built it and validated to work on top of Amazon Linux which is the underlying platform for",
    "start": "208799",
    "end": "215439"
  },
  {
    "text": "adus Lambda and by being open source this is also going to allow AWS to be",
    "start": "215439",
    "end": "220799"
  },
  {
    "text": "able to respond to any security issues that might come up without at core and crossplatform is also a major",
    "start": "220799",
    "end": "227879"
  },
  {
    "text": "feature of net core we as a room full ofet developers know that c is a great and powerful language but for the most",
    "start": "227879",
    "end": "234239"
  },
  {
    "text": "part we've all just been writing them on Windows now at that Court we can write our C LED functions on any platform Mac",
    "start": "234239",
    "end": "240599"
  },
  {
    "text": "OS Linux or Windows so to get started writing your",
    "start": "240599",
    "end": "247959"
  },
  {
    "text": "in net core Lambda functions you're going to want to install net Core 10 which you can if you don't already have",
    "start": "247959",
    "end": "253159"
  },
  {
    "text": "it There's the link there now net core1 is the current LTS version the long-term",
    "start": "253159",
    "end": "258560"
  },
  {
    "text": "support version of net core if you've been following the release chain the way they've talked about D core um earlier",
    "start": "258560",
    "end": "265880"
  },
  {
    "text": "this month version 1.1 came out and that's considered a current version or a FastTrack support version and the",
    "start": "265880",
    "end": "272800"
  },
  {
    "text": "release Cadence of done a COR is to have several these Point releases with this FASTT track meaning much shorter support",
    "start": "272800",
    "end": "278960"
  },
  {
    "text": "cycle which will eventually then be rolled up into a new LTS a new long-term support version and that's when Lambda",
    "start": "278960",
    "end": "285000"
  },
  {
    "text": "will start looking at when would we add the next version of net core now if we want to do your",
    "start": "285000",
    "end": "291000"
  },
  {
    "text": "development Visual Studio which aset developers we mostly do you would use Visual Studio 2015 and update 3 and You'",
    "start": "291000",
    "end": "298840"
  },
  {
    "text": "also would install Visual Studio 2015 tools Preview 2 and that's the the install that gives you the doet core",
    "start": "298840",
    "end": "305320"
  },
  {
    "text": "tooling added to visual studio which you can Again download from that link up there now when you're actually creating",
    "start": "305320",
    "end": "312199"
  },
  {
    "text": "your Visual Studio Projects you're going to want to Target the net core app one0 framework and this framework allows you",
    "start": "312199",
    "end": "318479"
  },
  {
    "text": "to use the net CLI to essentially do a net publish on that project which will then",
    "start": "318479",
    "end": "325600"
  },
  {
    "text": "copy your dll and all of your dependent DLS into one folder then you can just zip that folder up and send that up to",
    "start": "325600",
    "end": "332000"
  },
  {
    "text": "Lambda and Lambda can run your code now we're going to show you some tooling later on that we have to actually make",
    "start": "332000",
    "end": "337080"
  },
  {
    "text": "that process even easier now when you're actually writing",
    "start": "337080",
    "end": "342840"
  },
  {
    "text": "your C functions that you're going to expose as Lambda functions there's a few rules you want to follow first your",
    "start": "342840",
    "end": "348479"
  },
  {
    "text": "methods can be either static or instance methods but now if you're using instance methods you must have a default",
    "start": "348479",
    "end": "354800"
  },
  {
    "text": "Constructor in your class because that's what Lamb's going to use to instantiate that class your function can take zero",
    "start": "354800",
    "end": "360800"
  },
  {
    "text": "or one input parameter input parameters and can optionally take an i Lambda",
    "start": "360800",
    "end": "365880"
  },
  {
    "text": "context parameter and that would be the last parameter in there and that object is going to give you some runtime",
    "start": "365880",
    "end": "371800"
  },
  {
    "text": "information about the Lambda environment executing your",
    "start": "371800",
    "end": "376599"
  },
  {
    "text": "function you can also write ASC methods as well and in fact if you're using our a SDK for.net you most likely will",
    "start": "378759",
    "end": "386160"
  },
  {
    "text": "because with that version with our net core version of the SDK all of the operations that call a",
    "start": "386160",
    "end": "392120"
  },
  {
    "text": "services are async so you will return back a task and basically what lambda's",
    "start": "392120",
    "end": "397919"
  },
  {
    "text": "going to do is it's going to wait for that task to be complete and that's how it knows your Lambda function is done now you can't use generic methods",
    "start": "397919",
    "end": "405160"
  },
  {
    "text": "where you say like my function T because at runtime Lambda would not know what to resolve that t",
    "start": "405160",
    "end": "411919"
  },
  {
    "text": "into so to actually invoke our Lambda functions we have a few ways we can do that the first is we can have have our",
    "start": "412800",
    "end": "419639"
  },
  {
    "text": "Lambda functions be invoked in response to events coming out from other AD services for example we can have our",
    "start": "419639",
    "end": "425319"
  },
  {
    "text": "functions be invoked if new functions or new objects that are loaded to S3 or if our downb table is being changed or as",
    "start": "425319",
    "end": "431840"
  },
  {
    "text": "we learned in yesterday's que note with Amazon Lex we could have our function being voked when as part of a",
    "start": "431840",
    "end": "437080"
  },
  {
    "text": "conversation below is a few of the supported services that have integrated with Lambda check the Amazon lamba",
    "start": "437080",
    "end": "443560"
  },
  {
    "text": "developer guide for the full list of services the bottom two I wanted to call out because they sell some of the common",
    "start": "443560",
    "end": "449759"
  },
  {
    "text": "request we've gotten fromet developers which was I want to write a pure C way to consume my Kinesis stream and now",
    "start": "449759",
    "end": "457000"
  },
  {
    "text": "with Lambda I can write a c Lambda function and hook that up as an event source to a Kinesis stream and do that",
    "start": "457000",
    "end": "463280"
  },
  {
    "text": "also is I have just some c code that i r on once a day or once a week and I don't want to set up infrastructure for that",
    "start": "463280",
    "end": "469680"
  },
  {
    "text": "now with cloudwatch scheduled events you can schedule when you want your Lambda function to",
    "start": "469680",
    "end": "475599"
  },
  {
    "text": "run another way you can have your function be voked is is explicitly with any of the ad sdks basically what the",
    "start": "476919",
    "end": "483319"
  },
  {
    "text": "sdks you can do is you create the Lambda client call the invoke method pass in",
    "start": "483319",
    "end": "488520"
  },
  {
    "text": "the function name that you want to invoke and a payload and that payload is going to be translated into that input",
    "start": "488520",
    "end": "493639"
  },
  {
    "text": "parameter into your Lambda function and this works really well for our mobile developers who really want to focus a",
    "start": "493639",
    "end": "499440"
  },
  {
    "text": "lot on their mobile app and not so much on building an infrastructure on the back end so in this world they can just",
    "start": "499440",
    "end": "504520"
  },
  {
    "text": "build their Lambda function and then write the code in their mobile app to call the to function there and they can",
    "start": "504520",
    "end": "510759"
  },
  {
    "text": "use Amazon Cognito to manage your a credentials and your",
    "start": "510759",
    "end": "515479"
  },
  {
    "text": "identity and the third way you can have your functions being invoked is with Amazon API Gateway and API Gateway is",
    "start": "516320",
    "end": "522719"
  },
  {
    "text": "considered the front end of the serverless architecture this is going to allow you to expose your Lambda",
    "start": "522719",
    "end": "527800"
  },
  {
    "text": "functions as an HTTP API and API gway has a lot of great features built on top",
    "start": "527800",
    "end": "533120"
  },
  {
    "text": "of that so it can manage your authentication your versioning monitoring and more I highly recommend",
    "start": "533120",
    "end": "538880"
  },
  {
    "text": "checking out the API Gateway developer guide and all its features and again that's our talky part",
    "start": "538880",
    "end": "545440"
  },
  {
    "text": "really what we want to do is now get into code so Steve why don't you get it started okay so the first function that",
    "start": "545440",
    "end": "552600"
  },
  {
    "text": "we're going to write is going to demonstrate invoking a Lambda function in response to an event from an A Service uh in this particular case what",
    "start": "552600",
    "end": "559120"
  },
  {
    "text": "we're going to do is write a function that's going to be invoked when a new object is created in an Amazon S3 bucket",
    "start": "559120",
    "end": "564600"
  },
  {
    "text": "and what we're going to do inside that function is get the details of the object that was uploaded and then we're going to used the new Amazon recognition",
    "start": "564600",
    "end": "570480"
  },
  {
    "text": "service um that was launched earli this week to actually look at it if it's an image file and then analyze it for",
    "start": "570480",
    "end": "575959"
  },
  {
    "text": "labels so things of interest in the photo building tree person Etc we're then going to write those labels back as",
    "start": "575959",
    "end": "582680"
  },
  {
    "text": "tags on the S3 object using the support that was also announced earlier this week so let's get",
    "start": "582680",
    "end": "589279"
  },
  {
    "text": "started okay so here we are in visual studio and if you've got the copy the visual studio toolkit for ad us that we",
    "start": "590399",
    "end": "596959"
  },
  {
    "text": "released about two hours ago now uh if you you got a new project uh under the visual cop um tree",
    "start": "596959",
    "end": "603880"
  },
  {
    "text": "here you'll see a Lambda so there are four project templates in Visual Studio currently um Aus Lambda project a Lambda",
    "start": "603880",
    "end": "610519"
  },
  {
    "text": "project with test server list which we'll come to later the test um templates generate a um a solution that",
    "start": "610519",
    "end": "616320"
  },
  {
    "text": "contains a test project as well as a source code so you can do local testing so I'm just going to choose Lambda",
    "start": "616320",
    "end": "621519"
  },
  {
    "text": "project for now and I'm going to call this function uh this uh application my image",
    "start": "621519",
    "end": "628040"
  },
  {
    "text": "tagger cck enter that's going to take me into another wizard where I get to select a blueprint so this is the",
    "start": "628040",
    "end": "633200"
  },
  {
    "text": "skeleton code for my starter uh function so you can see we currently have four blueprints in here these will expand over time and I'm going to choose the",
    "start": "633200",
    "end": "639760"
  },
  {
    "text": "simple S3 function then here click finish and that will generate me a solution with a a single project in",
    "start": "639760",
    "end": "646880"
  },
  {
    "text": "it so let's go and take a look while the references are restoring of what's been generated you'll see we have this function CS",
    "start": "646880",
    "end": "652959"
  },
  {
    "text": "file and you can see in here that as n was just talking about we have a parameter list Constructor will come to",
    "start": "652959",
    "end": "659079"
  },
  {
    "text": "in a little while but but I want to draw your attention to line 12 first this assembly qualified Lambda serializer",
    "start": "659079",
    "end": "664600"
  },
  {
    "text": "attribute nor do you want to go through what that does sure so we talked about how your function can take an input",
    "start": "664600",
    "end": "669639"
  },
  {
    "text": "parameter and by default what you can pass into Lambda functions is streams and return M streams but now as that",
    "start": "669639",
    "end": "676560"
  },
  {
    "text": "developers we want to work in typed classes so we've added is a mechanism where you can essentially register a serializer either at the assembly level",
    "start": "676560",
    "end": "683760"
  },
  {
    "text": "at the method level that will basically translate that stream into your typed classes so so here we have registered",
    "start": "683760",
    "end": "690200"
  },
  {
    "text": "our Lambda Json serializer which is built based on Newton soft and then in the Lambda function that Steve will show",
    "start": "690200",
    "end": "696399"
  },
  {
    "text": "you can see it actually takes in an S3 event object and not a",
    "start": "696399",
    "end": "701200"
  },
  {
    "text": "stream okay so let's go back to the Constructor you can see here that we're instantiating an AM Amazon S3 client no",
    "start": "702079",
    "end": "707880"
  },
  {
    "text": "great surprise we're going to be responding to S3 event but if you've used our SDK for C before you might be wondering where are the credentials I",
    "start": "707880",
    "end": "714360"
  },
  {
    "text": "normally Supply some sort of credential object when the function runs it's going to run under the context of an identity",
    "start": "714360",
    "end": "720600"
  },
  {
    "text": "and access management role okay and that role will provide credentials to the function that the SDK will automatically",
    "start": "720600",
    "end": "726720"
  },
  {
    "text": "get hold of so you don't need to put credentials in here in addition I'm not specifying any region the region can be",
    "start": "726720",
    "end": "732399"
  },
  {
    "text": "inferred automatically from the region that the function is running in so we can just use the parameters Constructors scrolling down a little bit",
    "start": "732399",
    "end": "739000"
  },
  {
    "text": "further let's take a look at the generated function Handler that we got you can see here we're getting this S3 event object and that contains details",
    "start": "739000",
    "end": "744680"
  },
  {
    "text": "of the object that was uploaded the bucket name the object key Etc and in the the sample that gets generated we",
    "start": "744680",
    "end": "749880"
  },
  {
    "text": "just return the content type so we're going to replace this with our new function so I've already saved you the",
    "start": "749880",
    "end": "755160"
  },
  {
    "text": "uh the paint of me typing it in I've gone away and pre-written it so I'm going to copy these two files the change",
    "start": "755160",
    "end": "760720"
  },
  {
    "text": "to the project Json file is just for uh adding the Amazon recognition new get",
    "start": "760720",
    "end": "766839"
  },
  {
    "text": "package for R SDK paste these in here and that's SDK we just released yesterday that package",
    "start": "766839",
    "end": "772880"
  },
  {
    "text": "for recognition Okay so visual studio prompts to reload so here we are we're back in our function so we still have",
    "start": "772880",
    "end": "777959"
  },
  {
    "text": "the parameters construct the other Constructor by the way is used by the unit test projects that we generate so you can do local testing and",
    "start": "777959",
    "end": "783839"
  },
  {
    "text": "pass in your own S3 client if you were wondering but let's take a look at the function Handler itself so here you can see what I'm doing is getting the object",
    "start": "783839",
    "end": "790920"
  },
  {
    "text": "key I'm going to take a look at the extension on that object if it's an image file recognition supports jpeg or",
    "start": "790920",
    "end": "796480"
  },
  {
    "text": "PNG files then we're going to process it otherwise we're just going to skip now Ste I see you're writing to the console",
    "start": "796480",
    "end": "801760"
  },
  {
    "text": "where do those go in so all the console output gets trapped and written into the cloudwatch logs for the function so we'll actually see that when we actually",
    "start": "801760",
    "end": "807920"
  },
  {
    "text": "run the function and little while uh then we're actually going to like take a look at an environment variable called",
    "start": "807920",
    "end": "813279"
  },
  {
    "text": "confidence level so when we invoke this function we're going to give it a confidence level that recognition is going to use to say well if the label",
    "start": "813279",
    "end": "819320"
  },
  {
    "text": "that I detect or the object I detect uh we're confident that it's you know higher than the minimum I've set then",
    "start": "819320",
    "end": "824399"
  },
  {
    "text": "we'll return that label if it's less than that then we'll skip it that avoids us having to redeploy with a different",
    "start": "824399",
    "end": "829639"
  },
  {
    "text": "confidence level if we want to change what we're doing and you can see that we're just going to instantiate a recognition client again we're not going",
    "start": "829639",
    "end": "835440"
  },
  {
    "text": "to give any any uh credentials or region information we're going to form up the detect labels operation giving the uh",
    "start": "835440",
    "end": "842959"
  },
  {
    "text": "bucket name and the key of the object passing in our confidence and we're going to call recognition when recognition comes back we're then going",
    "start": "842959",
    "end": "849440"
  },
  {
    "text": "to iterate through all of the labels it returned and apply those as tags on the S3 object and so tagging is the new",
    "start": "849440",
    "end": "855040"
  },
  {
    "text": "feature that came out just the other day right yeah so there's one other file I want to show you before we actually deploy the function and this is this AWS",
    "start": "855040",
    "end": "861160"
  },
  {
    "text": "Lambda tools defaults Jon file so this backing file is used by the tooling to",
    "start": "861160",
    "end": "866639"
  },
  {
    "text": "preedee or pre-populate the deployment values for the function so you can share this with your development team and have",
    "start": "866639",
    "end": "872399"
  },
  {
    "text": "a consistent experience um when we run the wizard shortly you'll see that it uses this to pre to to set all the",
    "start": "872399",
    "end": "877600"
  },
  {
    "text": "fields on the wizard ready to go um the important thing to point out in here is this function Handler you can see down",
    "start": "877600",
    "end": "883240"
  },
  {
    "text": "at line 18 this is how you tell Lambda which C method to invoke for your Lambda",
    "start": "883240",
    "end": "888320"
  },
  {
    "text": "function and the format is the assembly name double colon the name spaced class",
    "start": "888320",
    "end": "893519"
  },
  {
    "text": "name double colon function Handler of the actual Handler itself method name so my image tag is my assembly name my",
    "start": "893519",
    "end": "900040"
  },
  {
    "text": "image tager function is my class name and function Handler is the C method so basically I'm just going to then take my",
    "start": "900040",
    "end": "905199"
  },
  {
    "text": "zip file that we uploaded expand that out and use that information to identify the entry point into my function yeah so",
    "start": "905199",
    "end": "911880"
  },
  {
    "text": "that's it for the uh function let's deploy it so to do that I'm going to right click on the",
    "start": "911880",
    "end": "917399"
  },
  {
    "text": "project and I'm going to select publish to AWS Lambda so this brings up the Lambda deployment Wizard and you can see",
    "start": "917399",
    "end": "923079"
  },
  {
    "text": "that the values are already pre-populated courtesy of that backing file all I need to do is choose my image name so let's let's call this my sorry",
    "start": "923079",
    "end": "930079"
  },
  {
    "text": "my function name my image lost ability type my image tagger",
    "start": "930079",
    "end": "936920"
  },
  {
    "text": "function now if this was a redeployment to an existing function and I I selected a drop down there the wizard would",
    "start": "936920",
    "end": "942880"
  },
  {
    "text": "change it would reach out to Lambda get the current function configuration and repopulate The Wizard Fields so you do all your deployment and redeployment",
    "start": "942880",
    "end": "949040"
  },
  {
    "text": "from one wizard in Visual Studio I'm going click next now a few moments ago I",
    "start": "949040",
    "end": "954240"
  },
  {
    "text": "said that the function is going to run in the context of an identity and access management role this is where we get to choose the role so if I drop down the",
    "start": "954240",
    "end": "960759"
  },
  {
    "text": "combo here I can choose from either existing roles that I've created or I can have a new role created automatically for me based on a manage",
    "start": "960759",
    "end": "967120"
  },
  {
    "text": "policy that can be an a with manage policy or it can be your own custom manage policy your choice I'm going to",
    "start": "967120",
    "end": "972560"
  },
  {
    "text": "go and choose my existing image tagger rooll here and I said we're going to actually pass in an environment variable",
    "start": "972560",
    "end": "977920"
  },
  {
    "text": "that is the confidence level that we're looking for so confidence level and",
    "start": "977920",
    "end": "983319"
  },
  {
    "text": "let's say we're interested in confidence value of 60 or higher okay I'm just click upload that's it we're ready to go",
    "start": "983319",
    "end": "989720"
  },
  {
    "text": "so now we're going to invoke the net publish commands behind the scenes we're going to package your your function up your class up into a zip file and send",
    "start": "989720",
    "end": "996639"
  },
  {
    "text": "it to Lambda and when that's done we open the function view so you can see here we have a number of tabs test function configuration Etc I could",
    "start": "996639",
    "end": "1003440"
  },
  {
    "text": "actually test the function directly from here if I drop down the example requests here for example I can look at an S3 put",
    "start": "1003440",
    "end": "1011000"
  },
  {
    "text": "and I could scroll through here and change like the booket name of the object here click invoke and then it would test the so this is an example of",
    "start": "1011000",
    "end": "1016639"
  },
  {
    "text": "the Json that three would send to our function yeah okay we're not going to do",
    "start": "1016639",
    "end": "1022000"
  },
  {
    "text": "that though we're going to do it live so right now our function is inside Lambda ready to go but there's nothing to",
    "start": "1022000",
    "end": "1027199"
  },
  {
    "text": "invoke it so what we're going to do is add an event source so I'm going to go to the event sources tab click add and",
    "start": "1027199",
    "end": "1033959"
  },
  {
    "text": "you can see here we The Event Source dialog comes up Amazon S3 on the drop down are some of the other services that",
    "start": "1033959",
    "end": "1039600"
  },
  {
    "text": "are supported inside the toolkit for event uh event sources and a lot of the other services that have integrated with",
    "start": "1039600",
    "end": "1045360"
  },
  {
    "text": "Lambda you would actually configure that on those consoles so so I'm going to go and choose S3 the booket that I want is",
    "start": "1045360",
    "end": "1050840"
  },
  {
    "text": "already selected I'm not going to give any prefix or suffix because I want to scan all image files that come in going to click okay that will then wire up the",
    "start": "1050840",
    "end": "1058360"
  },
  {
    "text": "Event Source for my function so now we want some data to run on so let's go away in the Adis Explorer and open up",
    "start": "1058360",
    "end": "1064360"
  },
  {
    "text": "the bucket that we're interested in here and what we'll do do is I'm going",
    "start": "1064360",
    "end": "1069480"
  },
  {
    "text": "to go away to some image files that I have and I see let's uh choose the puppy",
    "start": "1069480",
    "end": "1074600"
  },
  {
    "text": "and I don't know Norms lot and the lake and the boat we'll drag and drop those",
    "start": "1074600",
    "end": "1080120"
  },
  {
    "text": "into the bucket click okay to upload",
    "start": "1080120",
    "end": "1084480"
  },
  {
    "text": "them uploading it this is actually going to trigger S3 events Y which is going to then cause our functions to be run yeah",
    "start": "1085159",
    "end": "1092880"
  },
  {
    "text": "so now you're thinking well how do I know that the function actually ran right so let's go back to the image tagger function and if we click on logs",
    "start": "1092880",
    "end": "1100200"
  },
  {
    "text": "and refresh we should see some log activity coming through from cadat logs this is the console rights that we've just been doing okay let's just open up",
    "start": "1100200",
    "end": "1106799"
  },
  {
    "text": "one of these and see where we're at",
    "start": "1106799",
    "end": "1110320"
  },
  {
    "text": "okay so you can see uh oh when I able to load tie what did I do one demo had to",
    "start": "1112520",
    "end": "1117720"
  },
  {
    "text": "go wrong what did I do wrong let's take a look Che the",
    "start": "1117720",
    "end": "1124720"
  },
  {
    "text": "name myage tager everything looks good well that's disappointing isn't it",
    "start": "1124720",
    "end": "1131280"
  },
  {
    "text": "first demo I don't know what I did let's check the other",
    "start": "1131280",
    "end": "1137320"
  },
  {
    "text": "logs sorry we always have next year we always have next year you're right you're right what did I",
    "start": "1137320",
    "end": "1143640"
  },
  {
    "text": "do okay oh hang on a second did I not change did you mistype the name I",
    "start": "1143640",
    "end": "1150960"
  },
  {
    "text": "mistyped the name I'm sorry I know well now we can demonstrate how you redeploy so we all did this on purpose to show",
    "start": "1150960",
    "end": "1157080"
  },
  {
    "text": "you how fast it is to [Laughter] redeploy all right so my image tger so let's try that then let's try that again",
    "start": "1157080",
    "end": "1163480"
  },
  {
    "text": "shall we just rewind a couple of minutes and uh I'm going to select the image there we go my image tager",
    "start": "1163480",
    "end": "1171400"
  },
  {
    "text": "next again we've reached out to the function configuration we've pulled back everything you already set let's click",
    "start": "1171400",
    "end": "1177960"
  },
  {
    "text": "upload there we go okay so now that's the redep process fairly quick just like the function go let's just show the",
    "start": "1179960",
    "end": "1186559"
  },
  {
    "text": "event responding Let's Take Me In The Koala because I'm feeling a bit silly now",
    "start": "1186559",
    "end": "1194039"
  },
  {
    "text": "okay okay so now let's go back to the tager function and refresh the log",
    "start": "1194039",
    "end": "1199120"
  },
  {
    "text": "fingers",
    "start": "1199120",
    "end": "1201520"
  },
  {
    "text": "crossed there we go running invoked on the Calla me jpeg okay so it's going to run while it's uh see",
    "start": "1204600",
    "end": "1212919"
  },
  {
    "text": "if we can get a little bit more data out of it there we go so it's found three",
    "start": "1212919",
    "end": "1219640"
  },
  {
    "text": "labels so far people person and human hasn't found the qu yet maybe thinks the Kal is a human I don't know um based on",
    "start": "1219640",
    "end": "1227000"
  },
  {
    "text": "me that also brings up another point though you'll notice that I I loaded the puppy Etc and we also had some existing",
    "start": "1227000",
    "end": "1233440"
  },
  {
    "text": "files inside the bucket so we can actually test the function directly from the bucket if I right click on puppy and",
    "start": "1233440",
    "end": "1239159"
  },
  {
    "text": "select invoke Lambda function then you can see my function is already listed here it's the only one I have currently",
    "start": "1239159",
    "end": "1244400"
  },
  {
    "text": "and this is an example we talked about in the slide where you can explicitly invoke your function in this case what we're doing in the toolkit is we're",
    "start": "1244400",
    "end": "1250200"
  },
  {
    "text": "using the dotnet SDK to invoke our function by recreating that Json document that S3 would send to it so let",
    "start": "1250200",
    "end": "1256960"
  },
  {
    "text": "going to take a look at coal me remember I said that the labels are going to be written back as S3 tag as tags on the S3",
    "start": "1256960",
    "end": "1262000"
  },
  {
    "text": "object let's go see what we got so properties on the koala me image I uploaded there you can see human mammal",
    "start": "1262000",
    "end": "1268360"
  },
  {
    "text": "animal koala you picked it up adorable I like it that's that's",
    "start": "1268360",
    "end": "1274640"
  },
  {
    "text": "me and the puppy that I just ran should also now have some tags on",
    "start": "1274640",
    "end": "1279880"
  },
  {
    "text": "it tags there we go adorable oh the puppy is more adorable than I am oh fair",
    "start": "1279880",
    "end": "1285960"
  },
  {
    "text": "enough okay so then let's go back to the slides and",
    "start": "1285960",
    "end": "1292600"
  },
  {
    "text": "recap so we showed how you can create a new Lambda project in Visual Studio using the new project templates and how",
    "start": "1292600",
    "end": "1298400"
  },
  {
    "text": "we apply serialization attributes so we can control serialization if we need to um we saw the Handler format that I got",
    "start": "1298400",
    "end": "1305760"
  },
  {
    "text": "wrong so that's but that actually brings up an important point if you change your method name or your class name or your",
    "start": "1305760",
    "end": "1312080"
  },
  {
    "text": "namespace then you need to make sure you update the function Handler okay I'd like to say I did it deliberately but I",
    "start": "1312080",
    "end": "1317720"
  },
  {
    "text": "didn't we could have done it we could have pulled it off we showed how quickly we can publish",
    "start": "1317720",
    "end": "1323440"
  },
  {
    "text": "and redeploy from visual studio with the wizard and how we can configure an event source and then do testing inside Visual Studio either by directly invoking the",
    "start": "1323440",
    "end": "1330000"
  },
  {
    "text": "function or waiting for the event to trigger uh through some other action so let's move on now Norm pointed out",
    "start": "1330000",
    "end": "1337039"
  },
  {
    "text": "earlier on that one of the uh big features of uh net core is that it's crossplatform okay so if we're working",
    "start": "1337039",
    "end": "1343200"
  },
  {
    "text": "on other platforms like Mac or Linux we might have come across the command line the net command line so you need to",
    "start": "1343200",
    "end": "1348760"
  },
  {
    "text": "switch the no no I have another slide yet oh sorry jum again this talk is so",
    "start": "1348760",
    "end": "1353880"
  },
  {
    "text": "hot off the press so we may be using command line",
    "start": "1353880",
    "end": "1359120"
  },
  {
    "text": "tooling right we don't have visual studio available to us or it might be that we're integrating with A continuous integration system right and we just",
    "start": "1359120",
    "end": "1364480"
  },
  {
    "text": "want to run commands we don't want to put Visual Studio on our CI systems so let's see what's",
    "start": "1364480",
    "end": "1369640"
  },
  {
    "text": "available so if we've been using there we go if we've been using some like asp.net call on uh on Mac or",
    "start": "1369640",
    "end": "1377679"
  },
  {
    "text": "Linux platforms you might have come across something called Yen so yman is a project skeleton ecosystem it contains a",
    "start": "1377679",
    "end": "1383080"
  },
  {
    "text": "number of generators that the community provides that generate the skeleton code for you much like we just did inside visual studio so we that allows us to",
    "start": "1383080",
    "end": "1390559"
  },
  {
    "text": "developing any editor on any platform uh and it's a really easy install it has a dependency on nodejs you install using",
    "start": "1390559",
    "end": "1396720"
  },
  {
    "text": "mpm the commands are shown on the slide what we've done is written a a generator for AIS Lander so you can install it",
    "start": "1396720",
    "end": "1403799"
  },
  {
    "text": "again using the command on screen and to run it is really easy let's go and take a look",
    "start": "1403799",
    "end": "1409880"
  },
  {
    "text": "so here I am on an abunto Linux system so I'm just going to log",
    "start": "1410279",
    "end": "1415000"
  },
  {
    "text": "in and here we are at the command line um so I've already installed Yen and all",
    "start": "1415600",
    "end": "1421279"
  },
  {
    "text": "the necessary tools on here to save some time so I'm just going to invoke the generator directly yo AWS lambda.",
    "start": "1421279",
    "end": "1430039"
  },
  {
    "text": "net okay so here we are inside Yen you can see that we have a set of skeleton projects empty empty function simple",
    "start": "1431360",
    "end": "1436960"
  },
  {
    "text": "Dynamo D simple S3 Etc these should look familiar we just saw these in visual studio right we actually single sourced",
    "start": "1436960",
    "end": "1442919"
  },
  {
    "text": "the Yen blueprints or the Yen generators and the visual studio blueprints from the same code base so as the ecosystem",
    "start": "1442919",
    "end": "1449080"
  },
  {
    "text": "grows uh both will get that benefit one difference though is in Visual Studio that list of blueprints is actually read",
    "start": "1449080",
    "end": "1455520"
  },
  {
    "text": "all the time by our medit system with Yen all the generators are always installed statically on your machine so to get the new ones you always need to",
    "start": "1455520",
    "end": "1461320"
  },
  {
    "text": "update your y generator so for this demo I'm not going to do anything particular special I'm just going to choose an empty function and I'm going to call it",
    "start": "1461320",
    "end": "1467840"
  },
  {
    "text": "make upper um reasons that become obvious I've already set up a shared credentials file on this on this auntu",
    "start": "1467840",
    "end": "1475000"
  },
  {
    "text": "box so and I've called the credential profile default so I don't actually need to give it a name I'm going to skip that but we're going to use all the same SDK",
    "start": "1475000",
    "end": "1481120"
  },
  {
    "text": "credential fallback me mechanisms to find your credentials I'm going to give it a region us east1 generates the",
    "start": "1481120",
    "end": "1487000"
  },
  {
    "text": "skeleton code for me and then gives me a set of helpful hints about where to go next so let's take a look at what was",
    "start": "1487000",
    "end": "1494000"
  },
  {
    "text": "generated with Visual Studio code now one difference here over the visual",
    "start": "1494000",
    "end": "1500279"
  },
  {
    "text": "studio um thing I hope you can all see that it's a little bit tiny on the on the Explorer font but you'll see that we",
    "start": "1500279",
    "end": "1505720"
  },
  {
    "text": "have a test folder okay in Visual Studio we have the option of generating a solution with or without a unit test uh",
    "start": "1505720",
    "end": "1511279"
  },
  {
    "text": "project in The Omen generators we give you the test anyway let's take a look under source and you can see it looks",
    "start": "1511279",
    "end": "1517320"
  },
  {
    "text": "identical we have the function CS file in this case the function Handler just takes the input as a string and Returns",
    "start": "1517320",
    "end": "1523360"
  },
  {
    "text": "the uppercase equivalent that's why I called it make upper get rid of these these prompts out here don't ask me",
    "start": "1523360",
    "end": "1529799"
  },
  {
    "text": "again it's amazing how I don't ask me again and it asks me again every time every time every time um and then we",
    "start": "1529799",
    "end": "1535960"
  },
  {
    "text": "also have the backing file the Lambda defaults file you can see here the function handle is in place correctly this time and notice that the Region's",
    "start": "1535960",
    "end": "1542120"
  },
  {
    "text": "been updated Us East one is sitting in there because I just entered it by default so let's think about tooling now",
    "start": "1542120",
    "end": "1549200"
  },
  {
    "text": "right we said that we're integrating with the command line how does that get turned on well the clue is in the project Json file if I open the file",
    "start": "1549200",
    "end": "1556919"
  },
  {
    "text": "you'll see at 15 a dependency on amazon. lambda. tools version 1000 preview one",
    "start": "1556919",
    "end": "1563880"
  },
  {
    "text": "now we mark this as preview because as the donet CLI itself is actually under preview while they're doing their",
    "start": "1563880",
    "end": "1569240"
  },
  {
    "text": "switching from the project Json to the Miss build the code that we have in there we we deem it's production ready",
    "start": "1569240",
    "end": "1574640"
  },
  {
    "text": "but we will move that forward with the new project system and then I have that also as a reference for tools so that",
    "start": "1574640",
    "end": "1580919"
  },
  {
    "text": "now adds extensions to the net CLI for publishing and testing Lambda functions let's going to take a look at that I'm",
    "start": "1580919",
    "end": "1586600"
  },
  {
    "text": "going to open up a conso here and I'm going to move into the uh Source folder and we'll do net",
    "start": "1586600",
    "end": "1594399"
  },
  {
    "text": "restore and so that's going to pull in all of our noua dependencies y including that Lambda tools now you probably",
    "start": "1594399",
    "end": "1599880"
  },
  {
    "text": "already haven't cached so it's going to go pretty quick quick y so now let's take a look at what commands we have",
    "start": "1599880",
    "end": "1604919"
  },
  {
    "text": "available so net Lambda Lambda",
    "start": "1604919",
    "end": "1611799"
  },
  {
    "text": "help and you can see here we have a number of function a number of command subcommands to control Lambda functions",
    "start": "1611799",
    "end": "1617039"
  },
  {
    "text": "so deploy function invoke function delete function Etc we have commands for server list that we're going to come to later on and then the final subc",
    "start": "1617039",
    "end": "1623559"
  },
  {
    "text": "commmand package this is what you're probably going to want to use if you're integrating with a CI system all the other commands will actually package up",
    "start": "1623559",
    "end": "1629240"
  },
  {
    "text": "your function and deploy it to Lambda or the serverless deployment package just produces the the artifact bundle and",
    "start": "1629240",
    "end": "1635600"
  },
  {
    "text": "then some other uh part of your pipeline Cod pipeline or whatever will then pick that up and deploy it out so I can use",
    "start": "1635600",
    "end": "1641000"
  },
  {
    "text": "package with my code build and send it through the pipeline yes uh all the commands also come with help so let's",
    "start": "1641000",
    "end": "1646640"
  },
  {
    "text": "take a look at the function that we going to use to upload deploy function and you'll see it has a number of",
    "start": "1646640",
    "end": "1652039"
  },
  {
    "text": "command line switches these look familiar to what we just saw in that defaults file right um so if I don't actually specify any of these it'll",
    "start": "1652039",
    "end": "1658720"
  },
  {
    "text": "attempt to read it from the backing file right if it needs something like the rooll for example and you don't Supply it in the backing file it'll you'll",
    "start": "1658720",
    "end": "1664919"
  },
  {
    "text": "prompt you for it so pretty easy so by having that defaults file I don't have to SP set a lot of these parameters on",
    "start": "1664919",
    "end": "1671480"
  },
  {
    "text": "command so let's deploy our",
    "start": "1671480",
    "end": "1675799"
  },
  {
    "text": "function and we'll call it make upper so just like we saw in Visual",
    "start": "1676519",
    "end": "1683159"
  },
  {
    "text": "Studio it's running net publish to produce the artifacts to deploy it's created the archive it's creating the function now it wants to know what I am",
    "start": "1683159",
    "end": "1689559"
  },
  {
    "text": "R am I'm going to run this function underneath so again I have the same options I saw in Visual Studio I can create an existing I can use an existing",
    "start": "1689559",
    "end": "1695399"
  },
  {
    "text": "role or I can create a new role from a managed policy I'm going to use my existing make uper",
    "start": "1695399",
    "end": "1700640"
  },
  {
    "text": "role and I could have specified the role of the command line and I wouldn't have been that's it the functions created so",
    "start": "1700640",
    "end": "1707039"
  },
  {
    "text": "in visual Studio we saw we had those tabs where we could go and do a testing voke of the function or do things like we can do the same thing at the command",
    "start": "1707039",
    "end": "1712880"
  },
  {
    "text": "line so net Lambda invoke",
    "start": "1712880",
    "end": "1718679"
  },
  {
    "text": "function make upper now we need to give it a payload and we do that with a payload switch and that takes a string",
    "start": "1720080",
    "end": "1725760"
  },
  {
    "text": "that can either be a file name if the file exists we'll use the file content and send that on the invoke or just a",
    "start": "1725760",
    "end": "1732320"
  },
  {
    "text": "simple string",
    "start": "1732320",
    "end": "1739399"
  },
  {
    "text": "yeah okay there we go came back with hello Reinventing caps and it took 960",
    "start": "1741039",
    "end": "1747679"
  },
  {
    "text": "milliseconds so good thing to know when working with Lambda is the first time you're going tooke your function that's called the cold star where essentially",
    "start": "1747679",
    "end": "1754799"
  },
  {
    "text": "Lambda has to go procure the compute power for your function get your code on the machine and ready to run so we did",
    "start": "1754799",
    "end": "1761360"
  },
  {
    "text": "all that in 900 milliseconds now if Steve was to rerun this function again it's all ready to go so it will be a",
    "start": "1761360",
    "end": "1768120"
  },
  {
    "text": "fast turnaround 1.15 milliseconds so there we",
    "start": "1768120",
    "end": "1773600"
  },
  {
    "text": "have the fastest two upper Cloud function ever okay let's go back in",
    "start": "1773600",
    "end": "1781440"
  },
  {
    "text": "recap so we showed that on uh on platforms outside of windows we can use yen to create our project skeletons and",
    "start": "1781440",
    "end": "1787679"
  },
  {
    "text": "with our new generator that you can install and easy to run again we're developing with any editor and",
    "start": "1787679",
    "end": "1793360"
  },
  {
    "text": "deployment is done with a command line tool with a newg get package that we activate when you add the reference to your project Json file automatically",
    "start": "1793360",
    "end": "1799480"
  },
  {
    "text": "downloads and we have the commands to run cool okay so the next thing we're",
    "start": "1799480",
    "end": "1804919"
  },
  {
    "text": "talking about is the serverless application one of the features that Lambda came out fairly recently is called the Ed serus application model",
    "start": "1804919",
    "end": "1812519"
  },
  {
    "text": "which is essentially deploying your application with a cloud formation template but it's a much more uh",
    "start": "1812519",
    "end": "1818080"
  },
  {
    "text": "simplified version of a cloud formation template where you can basically just Define your serverless function all as",
    "start": "1818080",
    "end": "1823159"
  },
  {
    "text": "one unit with all the event sources and by doing this as a serverless function with Cloud for cloud formation we are",
    "start": "1823159",
    "end": "1830000"
  },
  {
    "text": "actually able to deploy a collection of functions all together as one unit and being cloud formation we can also",
    "start": "1830000",
    "end": "1836559"
  },
  {
    "text": "include any other Adis resources that we need if we need DB tables or an RDS",
    "start": "1836559",
    "end": "1841799"
  },
  {
    "text": "database we can do all that in one Function One deployment so the demo we're about to go",
    "start": "1841799",
    "end": "1847919"
  },
  {
    "text": "do is we're going to show off one of the blueprints that we added it's a for a blogging API and that basically is we're",
    "start": "1847919",
    "end": "1854519"
  },
  {
    "text": "going to have requests coming in from the internet and our AP our Ser list is going to be fronted by API Gateway which",
    "start": "1854519",
    "end": "1860880"
  },
  {
    "text": "is then going to be exposing our four Lambda functions on how you would manipulate your blog and then those apis",
    "start": "1860880",
    "end": "1867159"
  },
  {
    "text": "are then using dob as um its source and now this is our blueprint that you can",
    "start": "1867159",
    "end": "1872639"
  },
  {
    "text": "also do as well now how we deploy it is slightly",
    "start": "1872639",
    "end": "1877840"
  },
  {
    "text": "different than the first demo we showed in this case we're going to use cloud formation to drive the deployment so",
    "start": "1877840",
    "end": "1883279"
  },
  {
    "text": "basically when we do the deployment we're going to do the same building with a publish send that application bundle",
    "start": "1883279",
    "end": "1889080"
  },
  {
    "text": "up to S3 then we're going to load up our cloud formation template and then basically say where did we go just put our bits in",
    "start": "1889080",
    "end": "1895919"
  },
  {
    "text": "S3 send that template to S3 and then tell cloud formation go create our stack with that",
    "start": "1895919",
    "end": "1902440"
  },
  {
    "text": "information okay let's go do it so here are back in visual studio so",
    "start": "1902440",
    "end": "1909000"
  },
  {
    "text": "you should be familiar by now file new project and this time I'm going to choose the serverless application let's",
    "start": "1909000",
    "end": "1915639"
  },
  {
    "text": "call this uh demo three okay now we going to set a blueprints for Ser applications we",
    "start": "1915639",
    "end": "1922039"
  },
  {
    "text": "currently have two an mty1 and a Blog API so let's choose the blog API one",
    "start": "1922039",
    "end": "1927279"
  },
  {
    "text": "click finish so this time let's take a look at",
    "start": "1927279",
    "end": "1933679"
  },
  {
    "text": "the function CS file that was generated whoops don't want to go there yet there we go so you can see pretty much simar",
    "start": "1933679",
    "end": "1939360"
  },
  {
    "text": "what we saw before we have the Lambda serialize attribute in there we have our parameters Constructor uh and if we scroll a little bit further you can see",
    "start": "1939360",
    "end": "1945399"
  },
  {
    "text": "here's the first of our functions get blogs async make a little bit more room here and then we have a second one get",
    "start": "1945399",
    "end": "1951799"
  },
  {
    "text": "blog async these will be exposed our Lambda functions and they're taking API Gateway proxy request objects right",
    "start": "1951799",
    "end": "1957760"
  },
  {
    "text": "because we are going to have all of our Lambda functions be fronted by API Gateway as a proxy and what that does",
    "start": "1957760",
    "end": "1963519"
  },
  {
    "text": "API Gateway is going to take the whole HT request object Mar rate as a Json document and pass it into our function",
    "start": "1963519",
    "end": "1969760"
  },
  {
    "text": "and then we are using our typed classes uh the API Gateway request producty is one of the Lambda or noua packages we",
    "start": "1969760",
    "end": "1976000"
  },
  {
    "text": "released today that has that in there but we don't actually have to do Json parsing in our functions so seress",
    "start": "1976000",
    "end": "1982240"
  },
  {
    "text": "template file I'll come to in a minute let's take a look at the default file that we generated you'll see there's some differences here before we had",
    "start": "1982240",
    "end": "1987519"
  },
  {
    "text": "those function settings here now we have an S3 prefix setting this is where we're going to upload the content to S3 and",
    "start": "1987519",
    "end": "1993760"
  },
  {
    "text": "then a reference to the template file name and any template parameters that we want but other than that it's function is the same so let's deploy",
    "start": "1993760",
    "end": "2001639"
  },
  {
    "text": "it right click on the project publish to Lambda now this time the wizard has changed because we're not deploying a",
    "start": "2001639",
    "end": "2007919"
  },
  {
    "text": "function we're deploying a service application containing many functions it just wants to know what stack name do you want it can be an existing stack or",
    "start": "2007919",
    "end": "2014120"
  },
  {
    "text": "a new stack so let's put in a stack name of uh demo 3 and it wants to know what",
    "start": "2014120",
    "end": "2020120"
  },
  {
    "text": "bucket do we want to upload the content to and that needs to be in the same region as the stack now the the service template that",
    "start": "2020120",
    "end": "2026840"
  },
  {
    "text": "we're using has been parameterized for the Dynamo DB table that we're using and we're going to use the same table in a couple of demos so we've already",
    "start": "2026840",
    "end": "2032320"
  },
  {
    "text": "pre-created it so in the template parameters we've actually had the option to allow us to spe if we want to create",
    "start": "2032320",
    "end": "2037639"
  },
  {
    "text": "the table or not so I'm going to turn that table off but I am going to give it the table name of",
    "start": "2037639",
    "end": "2043120"
  },
  {
    "text": "blog and then click publish so again same example we do",
    "start": "2043120",
    "end": "2049079"
  },
  {
    "text": "publish build everything up send that to S3 and then we're going to go and create our cloud formation stack now notice",
    "start": "2049079",
    "end": "2054960"
  },
  {
    "text": "that we create the cloud formation stack with a change set this means that when we do a redeploy with a change set Cloud",
    "start": "2054960",
    "end": "2061079"
  },
  {
    "text": "information only needs to look at the things that have changed you doesn't have to rebuild the whole thing okay once the deployment is done you'll see",
    "start": "2061079",
    "end": "2066760"
  },
  {
    "text": "that stack view opens and the stack Creation in progress so while that comes up let's go and take a look at the serverless template file and you'll see",
    "start": "2066760",
    "end": "2073560"
  },
  {
    "text": "it's a cloud formation template um the key difference though is at line three this transform statement right so",
    "start": "2073560",
    "end": "2080320"
  },
  {
    "text": "mention how this is using the new adus service application model and that transform is basically going to let us",
    "start": "2080320",
    "end": "2086118"
  },
  {
    "text": "write what we' call Meta resources in our cloudformation template so if we look at that g blogs resource type down",
    "start": "2086119",
    "end": "2092560"
  },
  {
    "text": "there you can see that that is a type adus serverless function and there is no ad Serv function resource type what",
    "start": "2092560",
    "end": "2099480"
  },
  {
    "text": "actually happens by that transform is it breaks it down down into the here's my Lambda function this is my IM roll this",
    "start": "2099480",
    "end": "2105920"
  },
  {
    "text": "is my uh API Gateway rest and hooked up all those event sources so it's a much more compact way for us defining our",
    "start": "2105920",
    "end": "2112960"
  },
  {
    "text": "serverless temp application just like we saw in the function demos earlier on you can see some familiar things here memory",
    "start": "2112960",
    "end": "2118920"
  },
  {
    "text": "size timeout role Etc but there's a new one at line 42 code URI so that's the",
    "start": "2118920",
    "end": "2124359"
  },
  {
    "text": "property I talked about once we uploaded the the bids to s three we basically in our tooling read this file up in memory",
    "start": "2124359",
    "end": "2130760"
  },
  {
    "text": "go fill in all those code your right properties to that location we just put your code in and then take that modified",
    "start": "2130760",
    "end": "2137000"
  },
  {
    "text": "template in memory and put that up to S3 until clap formation go begin the deployment process so it never changes",
    "start": "2137000",
    "end": "2143200"
  },
  {
    "text": "the original template no the template is yours to modify and add any other bries so this is our cloud formation editor",
    "start": "2143200",
    "end": "2148800"
  },
  {
    "text": "which has a lot of features of intelligence and validating you can use to add more adus resources on it yeah",
    "start": "2148800",
    "end": "2154200"
  },
  {
    "text": "that's the key takeway here that although we have this serverless function pseudo type in here anything you can do in a cloud formation template",
    "start": "2154200",
    "end": "2159359"
  },
  {
    "text": "today in terms of spinning up resources and controlling them you can do with uh Serv application templates as well so",
    "start": "2159359",
    "end": "2165119"
  },
  {
    "text": "let's go take a look at our stack it should be up and running and there we go everything's created complete let's go",
    "start": "2165119",
    "end": "2171200"
  },
  {
    "text": "take a look at the resources tab here and you can see that the template resources we spun up are a lot more than we actually had in that template okay",
    "start": "2171200",
    "end": "2177599"
  },
  {
    "text": "that those pseudo functions have expanded out um to create the necessary um resources that we need",
    "start": "2177599",
    "end": "2184280"
  },
  {
    "text": "yeah so let's go and look at our application running and I'm going to click this URL this is the root URL of",
    "start": "2184280",
    "end": "2190400"
  },
  {
    "text": "our app so click copy that's the root URL of our API Gateway prod stage so I'm",
    "start": "2190400",
    "end": "2195440"
  },
  {
    "text": "going to jump away to postman HTP testing tool I'm going to paste in that so Postman is just an HTP API testing",
    "start": "2195440",
    "end": "2201000"
  },
  {
    "text": "tool that we like to use for testing our functions so this is our first time",
    "start": "2201000",
    "end": "2206599"
  },
  {
    "text": "running it so again that cold start where Lambda is going in and procuring those Computer Resources and there's our",
    "start": "2206599",
    "end": "2212640"
  },
  {
    "text": "blog data that's just come back so we have three blog entries so let's just do that again just to illustrate again the difference between cold start and warm",
    "start": "2212640",
    "end": "2219880"
  },
  {
    "text": "start near instant okay so earlier on I showed the uh the",
    "start": "2219880",
    "end": "2226560"
  },
  {
    "text": "command line tools yeah that's where you would use the deploy serverless variants on a on a server so you can do Ser",
    "start": "2226560",
    "end": "2233040"
  },
  {
    "text": "application deployment on uh non- Windows platforms as well I think it's we mentioned but all that deployment",
    "start": "2233040",
    "end": "2238400"
  },
  {
    "text": "mechanism you see we've added to the toet this is the same thing in that Amazon Lambda tool so anything you can do in bu Studio you can also do using",
    "start": "2238400",
    "end": "2244880"
  },
  {
    "text": "that tool right so C so we walked through how to create a",
    "start": "2244880",
    "end": "2250599"
  },
  {
    "text": "serverless application inside visual studio and you know we looked at the serverless template file and those pseudo um resource types for for",
    "start": "2250599",
    "end": "2257599"
  },
  {
    "text": "functions and that lets us expose our Lambda functions as a HTTP API with deployment via cloud formation U plus",
    "start": "2257599",
    "end": "2264400"
  },
  {
    "text": "all the capabilities we have in cloud formation today um for controlling our resources",
    "start": "2264400",
    "end": "2270599"
  },
  {
    "text": "okay so for our final demo what we've been thinking is if you've been writing as core applications in the past in a",
    "start": "2270599",
    "end": "2277599"
  },
  {
    "text": "particular as or as applications you know there's already a built-in framework for web API and so with that",
    "start": "2277599",
    "end": "2285160"
  },
  {
    "text": "framework you basically Define controllers and you have attributes for routing and attributes for which HP",
    "start": "2285160",
    "end": "2290400"
  },
  {
    "text": "method and where to get the data from and there's a large ecosystem already on this framework you can add middleware",
    "start": "2290400",
    "end": "2296480"
  },
  {
    "text": "there's lots of extensions on it and so we thought wouldn't it be great if we could just run this on Lambda and you",
    "start": "2296480",
    "end": "2301920"
  },
  {
    "text": "could just reuse the already existing ecosystem instead of learning a new programming model so what we've done is using the",
    "start": "2301920",
    "end": "2309839"
  },
  {
    "text": "new a API Gateway proxy integration feature that came out this fall which",
    "start": "2309839",
    "end": "2314920"
  },
  {
    "text": "allows you to essentially forward all requests to one Lambda function we can",
    "start": "2314920",
    "end": "2320200"
  },
  {
    "text": "do this we have a Lambda function it's going to use our new noua package that we just released today as well called",
    "start": "2320200",
    "end": "2325839"
  },
  {
    "text": "Amazon Lambda as course server which is currently in preview because we've really just kind of",
    "start": "2325839",
    "end": "2331680"
  },
  {
    "text": "scratched the surface now what you can do with this right we've basically turned this on and we know we can do web API but this is a a lot of things we can",
    "start": "2331680",
    "end": "2337079"
  },
  {
    "text": "do so um let us know what you can find to do and we're going to keep working on this but so what we do in that Lambda",
    "start": "2337079",
    "end": "2344160"
  },
  {
    "text": "function is using that Library we are going to then take that Json document that comes from API Gateway and",
    "start": "2344160",
    "end": "2349680"
  },
  {
    "text": "transform it into the classes that the a core framework understands and then pass that on and let exp core framework do",
    "start": "2349680",
    "end": "2356319"
  },
  {
    "text": "all the routing to your controllers and then on the way back we're going to Marshal the respon ofle framework back",
    "start": "2356319",
    "end": "2362280"
  },
  {
    "text": "to what API gayway understands so the 10,000v architecture",
    "start": "2362280",
    "end": "2368000"
  },
  {
    "text": "view of how a core web applications work it's essentially requests are going to come in from the internet they're going",
    "start": "2368000",
    "end": "2373200"
  },
  {
    "text": "to go to IAS or engx on Linux they're going to then talk to Kestrel which is the as core web server and that's doing",
    "start": "2373200",
    "end": "2380599"
  },
  {
    "text": "that marshalling of what requests look like from there to what as core framework understands which then takes",
    "start": "2380599",
    "end": "2385960"
  },
  {
    "text": "care of the routing to your controllers your code so what we've done is essentially replace those first two",
    "start": "2385960",
    "end": "2391920"
  },
  {
    "text": "boxes instead of is we're going to use API Gateway as our front end and instead instead of Cal we're going to use Lambda",
    "start": "2391920",
    "end": "2398599"
  },
  {
    "text": "to do all that marshalling back and forth leaving a COR framework alone and",
    "start": "2398599",
    "end": "2404040"
  },
  {
    "text": "most importantly leaving your controllers alone so you keep that the same so Steve let's see if we can do it",
    "start": "2404040",
    "end": "2412960"
  },
  {
    "text": "okay so here we are back in visual studio and this time I've got the project pre-loaded so this is a a web",
    "start": "2413240",
    "end": "2419599"
  },
  {
    "text": "API asp.net cor web API project that I could have got from Fall new project the only change that we've made so far is",
    "start": "2419599",
    "end": "2425720"
  },
  {
    "text": "that we've added a blogs controller right this is going to talk about blogs API that blog controller basically has",
    "start": "2425720",
    "end": "2431119"
  },
  {
    "text": "the same behavior as the previous demo yeah you'll notice we've left the values controller in that was generated from the project template we're going to use",
    "start": "2431119",
    "end": "2437280"
  },
  {
    "text": "that shortly and if we look at the program CS file we have the regular asp.net start because this is how when",
    "start": "2437280",
    "end": "2443839"
  },
  {
    "text": "you write a core applications this it's basically a console application and in that program main is where you're",
    "start": "2443839",
    "end": "2448920"
  },
  {
    "text": "bootstrapping the a core framework and that's really the part that we need to replace for",
    "start": "2448920",
    "end": "2454680"
  },
  {
    "text": "Lambda so let's get started started so the first thing I'm going to do is uh turn on the new Ser sport so I'm going",
    "start": "2454680",
    "end": "2462359"
  },
  {
    "text": "to add a reference to the Amazon Lambda ASP net course server",
    "start": "2462359",
    "end": "2471200"
  },
  {
    "text": "okay and then I'm going to add a new class to the",
    "start": "2471200",
    "end": "2476839"
  },
  {
    "text": "project that's going to represent our Lambda function and so we can have the",
    "start": "2479359",
    "end": "2484560"
  },
  {
    "text": "Lambda function but it's again it's still going to be console or web application so we can run it locally and then deploy to",
    "start": "2484560",
    "end": "2490040"
  },
  {
    "text": "Lambda inside the Lambda function I'm going to derive that from one of the classes inside that package I just",
    "start": "2490040",
    "end": "2496160"
  },
  {
    "text": "referenced [Music] Lambda server called API Gateway proxy",
    "start": "2496160",
    "end": "2502400"
  },
  {
    "text": "function now this class has an abstract member that we need to implement so we hover over and Implement and you'll see",
    "start": "2502400",
    "end": "2508920"
  },
  {
    "text": "it's an initialization statement so what I'm going to do now is going to take the parts of the initialization statement",
    "start": "2508920",
    "end": "2514640"
  },
  {
    "text": "that I want because we don't need I s or chestal but we do want to specify where the content route is at and where our",
    "start": "2514640",
    "end": "2520880"
  },
  {
    "text": "startup class is so that we can add all of our as course services to our application paste those in we'll fix up",
    "start": "2520880",
    "end": "2527280"
  },
  {
    "text": "the name space for the directory there and just make it a little bit tidier and then i' got more thing to add do use API",
    "start": "2527280",
    "end": "2534560"
  },
  {
    "text": "Gateway and so that's going to be tell that's basically tell a core framework this is our server it's not castal API",
    "start": "2534560",
    "end": "2541240"
  },
  {
    "text": "Gateway is our server now if I right click on the project at this point you'll see that there's no published to Lambda",
    "start": "2541240",
    "end": "2546720"
  },
  {
    "text": "still it think actually still thinks it's an a web API project I can publish to elastic beant right so we got one",
    "start": "2546720",
    "end": "2551920"
  },
  {
    "text": "more thing to do we're going to add on the Lambda tools so go back to project Json and we'll add in a reference to the",
    "start": "2551920",
    "end": "2558359"
  },
  {
    "text": "tools assembly so basically what we're doing in the toolkit is we want to make sure",
    "start": "2558359",
    "end": "2563640"
  },
  {
    "text": "we we support anything you have um so what we do when and when to what we do",
    "start": "2563640",
    "end": "2569800"
  },
  {
    "text": "to turn on their tooling is to see do you have a dependency on amda Amazon Lambda tools if you do then we are",
    "start": "2569800",
    "end": "2576160"
  },
  {
    "text": "assuming this is something you want to deploy to Lambda and that turns on our publishing tools now this package we're",
    "start": "2576160",
    "end": "2582280"
  },
  {
    "text": "adding is a build project so it's not going to be something that's affecting your publish it does not get included into there it's just something that we",
    "start": "2582280",
    "end": "2588160"
  },
  {
    "text": "use for your building and now Steve's adding it to the tool section because that's then",
    "start": "2588160",
    "end": "2593319"
  },
  {
    "text": "what also makes it integrate with the net CLI okay there we go so if you right",
    "start": "2593319",
    "end": "2601119"
  },
  {
    "text": "click on the project now we have published Lambda already set to go in fact why don't we just deploy this as a",
    "start": "2601119",
    "end": "2606160"
  },
  {
    "text": "function let's do it so we'll call this now we don't have",
    "start": "2606160",
    "end": "2611240"
  },
  {
    "text": "a backing file now because we're this is the plain file we don't have that default file and that's why a lot of these fields are blank and so the",
    "start": "2611240",
    "end": "2617280"
  },
  {
    "text": "advantage of having default files we don't have to always set those up but we do have some intelligence in the editor",
    "start": "2617280",
    "end": "2622760"
  },
  {
    "text": "to help Steve not mistype another function there so here we go I'm going to choose",
    "start": "2622760",
    "end": "2629559"
  },
  {
    "text": "the RO it's going to run there let's go a Blog platform roll everything else is good to go just",
    "start": "2629559",
    "end": "2635079"
  },
  {
    "text": "upload so this is doing the regular Lambda deployment so it's basically sending it to there and creating our",
    "start": "2635079",
    "end": "2641280"
  },
  {
    "text": "function there we go inside the function here and in fact we can do a testing voke straight away so let's drop down",
    "start": "2641280",
    "end": "2648359"
  },
  {
    "text": "this and choose the a ag proxy type and so this is that Json document that API",
    "start": "2648359",
    "end": "2653400"
  },
  {
    "text": "Gateway basically has to represent the HTP request and it's what that Nate package is reading to translate into",
    "start": "2653400",
    "end": "2659440"
  },
  {
    "text": "what as core understands so I'm going change the method to get and then if you remember I said that the original values",
    "start": "2659440",
    "end": "2664520"
  },
  {
    "text": "controller was still present so let's invoke that so API SL",
    "start": "2664520",
    "end": "2671000"
  },
  {
    "text": "values hit invoke I think you missed the click I think I missed the click there we",
    "start": "2671000",
    "end": "2677920"
  },
  {
    "text": "go okay and again since we just deployed this function ad lamb is out there",
    "start": "2677920",
    "end": "2683680"
  },
  {
    "text": "recurring our resources getting our functions on there and then getting our function vote there we go let's pretty print that there we go so we so got two",
    "start": "2683680",
    "end": "2690559"
  },
  {
    "text": "values back from the values controller so here we we have the whole entire core framework running as a Lambda function",
    "start": "2690559",
    "end": "2696240"
  },
  {
    "text": "we can do it because I can I'm going to invoke it",
    "start": "2696240",
    "end": "2700200"
  },
  {
    "text": "again but we're not finished no so our blog API obviously right now",
    "start": "2705240",
    "end": "2710920"
  },
  {
    "text": "we're exposed as a Lambda function but we don't have that API Gateway front end that we're looking for right so we're going to turn this into a serverless",
    "start": "2710920",
    "end": "2717319"
  },
  {
    "text": "application so what I'm going to do is right click the project choose add serverless template and so this adds a",
    "start": "2717319",
    "end": "2724400"
  },
  {
    "text": "default version of that server list template which basically has one function set up as that proxy you could",
    "start": "2724400",
    "end": "2730559"
  },
  {
    "text": "if you could obviously customize this and should customize this to your needs so I'm going to go away and swipe the",
    "start": "2730559",
    "end": "2736200"
  },
  {
    "text": "Handler because by default we don't have that function Handler in there so Steve needs to put it is their actual function",
    "start": "2736200",
    "end": "2741359"
  },
  {
    "text": "Handler of our function and I don't think the actual implementation of the function is in the",
    "start": "2741359",
    "end": "2747599"
  },
  {
    "text": "Base Class yes I'm going to go show that in a second so what I'm actually going to do now is deploy this and now we're",
    "start": "2747599",
    "end": "2753680"
  },
  {
    "text": "going to deploy it as a service application so the visible will change and we're going to call this our blog",
    "start": "2753680",
    "end": "2760079"
  },
  {
    "text": "API uh the booket fine our our template isn't parameterized so there's no extra things for the wizard to show you just",
    "start": "2760079",
    "end": "2766240"
  },
  {
    "text": "click publish now as Norm said that I called",
    "start": "2766240",
    "end": "2772040"
  },
  {
    "text": "that class Lambda function but there was no actual Lambda function in there right let's go and see where that is all the",
    "start": "2772040",
    "end": "2777559"
  },
  {
    "text": "change sets reviewed and the stack will start coming",
    "start": "2777559",
    "end": "2782400"
  },
  {
    "text": "up always no there we go creating progress so let's go and take a look at the Lambda function so you see I derived",
    "start": "2783400",
    "end": "2789079"
  },
  {
    "text": "from that API Gateway proxy function class if I hit F12 on that to navigate to it you'll see there's a function Handler async so where's that well on",
    "start": "2789079",
    "end": "2797520"
  },
  {
    "text": "GitHub there is a new ads lambda. net repo that we published this morning and this is I highly recommend you guys",
    "start": "2797520",
    "end": "2803640"
  },
  {
    "text": "check this out again all the steps that we've been walking through on setting up this thing we'll eventually turn that into a blueprint but right now we have",
    "start": "2803640",
    "end": "2809559"
  },
  {
    "text": "those on on the G packages and so all of the new G packages that we released today including the Lambda tools this",
    "start": "2809559",
    "end": "2814880"
  },
  {
    "text": "aset core um and all the event packages are in this GitHub repository and this is a place if you've got issues or",
    "start": "2814880",
    "end": "2820480"
  },
  {
    "text": "anything let us know so there's a read me in here that goes through a lot of what nor I've been talking about this morning let's take a look at the actual",
    "start": "2820480",
    "end": "2826359"
  },
  {
    "text": "implementation of that class and if I scroll through here um nor you wanted to have a few words about the Constructor",
    "start": "2826359",
    "end": "2832160"
  },
  {
    "text": "in this yeah so I mentioned when you write instance method you have to have a default Constructor and what's useful",
    "start": "2832160",
    "end": "2837319"
  },
  {
    "text": "about that is Lambda is going to always reused that same instance for every function invocation while it maintains",
    "start": "2837319",
    "end": "2843079"
  },
  {
    "text": "That Computer Resources so if you have any heavy lift you need to do like in our case we need to bootst the a core",
    "start": "2843079",
    "end": "2849079"
  },
  {
    "text": "framework we don't want to do that in a per function invocation we do that as part of the Constructor so then in the",
    "start": "2849079",
    "end": "2854520"
  },
  {
    "text": "actual function all we're really doing is doing that serializing it and then passing it on to the already bootstrapped framework let's take a look",
    "start": "2854520",
    "end": "2861520"
  },
  {
    "text": "at the actual function Handler implementation there we go so overall",
    "start": "2861520",
    "end": "2867079"
  },
  {
    "text": "was actually not that much go to do it so no let's go back and take a look at our",
    "start": "2867079",
    "end": "2872640"
  },
  {
    "text": "stack and it's launched we're good so this is the root URL so we're going to",
    "start": "2874000",
    "end": "2879040"
  },
  {
    "text": "copy that and I'm going to jump away to postman again and we'll Post in this but",
    "start": "2879040",
    "end": "2884400"
  },
  {
    "text": "this time I'm actually going to add on API blogs",
    "start": "2884400",
    "end": "2891160"
  },
  {
    "text": "enter now it won't surprise you to learn it's the same blog data that's coming back",
    "start": "2891440",
    "end": "2898000"
  },
  {
    "text": "but because we haven't actually done a put there we go there we go and then we",
    "start": "2899280",
    "end": "2905000"
  },
  {
    "text": "do the same we have a a core framework that we deployed on Lambda and it is exposed to the internet and overall I",
    "start": "2905000",
    "end": "2910880"
  },
  {
    "text": "think very very few am steps yeah there we go let's",
    "start": "2910880",
    "end": "2916800"
  },
  {
    "text": "recap so I think we've just done the recap right we took the asp.net core web API project made few very few changes to",
    "start": "2920280",
    "end": "2926839"
  },
  {
    "text": "it we didn't change the controllers at all deployed it used API Gateway proxy integration as our front end through to",
    "start": "2926839",
    "end": "2932880"
  },
  {
    "text": "Lambda through to our controllers using that new new package that we published this morning and the Handler source code",
    "start": "2932880",
    "end": "2938480"
  },
  {
    "text": "and everything is all there on GitHub and again check out that GitHub repository and let us know what you",
    "start": "2938480",
    "end": "2945040"
  },
  {
    "text": "think so that's most we want to show here's some extra links to get started next uh again we just released all these",
    "start": "2945040",
    "end": "2951240"
  },
  {
    "text": "bits this morning as part of the keynote so you need get the latest Visual Studio which you can get from there our gith",
    "start": "2951240",
    "end": "2956359"
  },
  {
    "text": "posit right we just made public this morning Steve and I contribute a lot to theet developer blog when we get back to",
    "start": "2956359",
    "end": "2961960"
  },
  {
    "text": "Seattle we will have a lot of things to write about when it comes to net lamb and check out the new the updated Lambda",
    "start": "2961960",
    "end": "2968760"
  },
  {
    "text": "developer guide and the ads toolkit guide uh here are some other sessions that you might find related or",
    "start": "2968760",
    "end": "2974680"
  },
  {
    "text": "interesting as part of the services architecture some of these have probably happened but remember all these sessions will be up there on",
    "start": "2974680",
    "end": "2981280"
  },
  {
    "text": "YouTube with that thank you",
    "start": "2981280",
    "end": "2988680"
  }
]