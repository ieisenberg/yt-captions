[
  {
    "start": "0",
    "end": "30000"
  },
  {
    "text": "[Music]",
    "start": "650",
    "end": "1010"
  },
  {
    "text": "[Applause]",
    "start": "1010",
    "end": "4088"
  },
  {
    "text": "[Music]",
    "start": "4960",
    "end": "11240"
  },
  {
    "text": "hello I'm Kashif a cloud support",
    "start": "11240",
    "end": "14519"
  },
  {
    "text": "engineer here at the AWS office in",
    "start": "14519",
    "end": "17580"
  },
  {
    "text": "Sydney today I am going to show you how",
    "start": "17580",
    "end": "20460"
  },
  {
    "text": "to rebalance uneven Shard distribution",
    "start": "20460",
    "end": "23340"
  },
  {
    "text": "by updating sharding strategy let's get",
    "start": "23340",
    "end": "27180"
  },
  {
    "text": "started sometimes disk space in an",
    "start": "27180",
    "end": "31019"
  },
  {
    "start": "30000",
    "end": "220000"
  },
  {
    "text": "Amazon open search service domain is",
    "start": "31019",
    "end": "33960"
  },
  {
    "text": "unevenly distributed across the data",
    "start": "33960",
    "end": "36780"
  },
  {
    "text": "nodes this is normally due to uneven",
    "start": "36780",
    "end": "40140"
  },
  {
    "text": "chart sizes across the indices there are",
    "start": "40140",
    "end": "43980"
  },
  {
    "text": "several ways to rebalance The Shard",
    "start": "43980",
    "end": "46320"
  },
  {
    "text": "allocation including updating your",
    "start": "46320",
    "end": "49079"
  },
  {
    "text": "sharding strategy or adding more data",
    "start": "49079",
    "end": "52739"
  },
  {
    "text": "nodes or by deleting unused indices or",
    "start": "52739",
    "end": "57960"
  },
  {
    "text": "using index State Management to automate",
    "start": "57960",
    "end": "61079"
  },
  {
    "text": "particularly delete old indices",
    "start": "61079",
    "end": "63979"
  },
  {
    "text": "or even by moving old indices to low",
    "start": "63979",
    "end": "68460"
  },
  {
    "text": "cost Ultra worm storage let's take a",
    "start": "68460",
    "end": "71939"
  },
  {
    "text": "look at how to implement updating your",
    "start": "71939",
    "end": "75000"
  },
  {
    "text": "sharding strategies",
    "start": "75000",
    "end": "76680"
  },
  {
    "text": "after logging into the AWS Management",
    "start": "76680",
    "end": "79560"
  },
  {
    "text": "console navigate to the Amazon open",
    "start": "79560",
    "end": "83220"
  },
  {
    "text": "search service console",
    "start": "83220",
    "end": "86780"
  },
  {
    "text": "choose your domain and then choose open",
    "start": "87360",
    "end": "90360"
  },
  {
    "text": "search dashboards URL to open open",
    "start": "90360",
    "end": "93360"
  },
  {
    "text": "search dashboards",
    "start": "93360",
    "end": "96680"
  },
  {
    "text": "choose tab tools",
    "start": "97680",
    "end": "99720"
  },
  {
    "text": "now we can see the console where we'll",
    "start": "99720",
    "end": "103079"
  },
  {
    "text": "be running commands",
    "start": "103079",
    "end": "105240"
  },
  {
    "text": "let's check amount of disk space",
    "start": "105240",
    "end": "107400"
  },
  {
    "text": "available on each node by using command",
    "start": "107400",
    "end": "110880"
  },
  {
    "text": "as shown",
    "start": "110880",
    "end": "112920"
  },
  {
    "text": "choose the play button to run the",
    "start": "112920",
    "end": "115020"
  },
  {
    "text": "command",
    "start": "115020",
    "end": "116880"
  },
  {
    "text": "we see that for two nodes disk space is",
    "start": "116880",
    "end": "121380"
  },
  {
    "text": "almost full but each node has equal",
    "start": "121380",
    "end": "124619"
  },
  {
    "text": "number of shards this is because by",
    "start": "124619",
    "end": "127920"
  },
  {
    "text": "default Amazon open search service",
    "start": "127920",
    "end": "130759"
  },
  {
    "text": "evenly distributes the number of shards",
    "start": "130760",
    "end": "134160"
  },
  {
    "text": "across nodes",
    "start": "134160",
    "end": "135780"
  },
  {
    "text": "this distribution is not based on",
    "start": "135780",
    "end": "138599"
  },
  {
    "text": "individual Shard sizes",
    "start": "138599",
    "end": "141180"
  },
  {
    "text": "so if some shards are very large",
    "start": "141180",
    "end": "143520"
  },
  {
    "text": "compared to other then you might see",
    "start": "143520",
    "end": "146940"
  },
  {
    "text": "uneven short distribution and lack of",
    "start": "146940",
    "end": "149520"
  },
  {
    "text": "space on few nodes",
    "start": "149520",
    "end": "151379"
  },
  {
    "text": "let's check short sizes by using this",
    "start": "151379",
    "end": "154860"
  },
  {
    "text": "command",
    "start": "154860",
    "end": "157280"
  },
  {
    "text": "this output shows the size of shards for",
    "start": "162959",
    "end": "166560"
  },
  {
    "text": "different indices",
    "start": "166560",
    "end": "168060"
  },
  {
    "text": "we can see that index with big shards",
    "start": "168060",
    "end": "171239"
  },
  {
    "text": "has very large shards while index small",
    "start": "171239",
    "end": "175680"
  },
  {
    "text": "shards has very small shards so although",
    "start": "175680",
    "end": "179400"
  },
  {
    "text": "there are equal number of shards on each",
    "start": "179400",
    "end": "182220"
  },
  {
    "text": "node some nodes have very large shards",
    "start": "182220",
    "end": "186180"
  },
  {
    "text": "let's take a look at data skewness where",
    "start": "186180",
    "end": "190019"
  },
  {
    "text": "shards of bigger indices reside on only",
    "start": "190019",
    "end": "193500"
  },
  {
    "text": "a few nodes instead of being distributed",
    "start": "193500",
    "end": "195959"
  },
  {
    "text": "across all nodes",
    "start": "195959",
    "end": "198300"
  },
  {
    "text": "check the sharding strategy for indices",
    "start": "198300",
    "end": "200879"
  },
  {
    "text": "by using this command",
    "start": "200879",
    "end": "204560"
  },
  {
    "text": "we see some indices are too big and some",
    "start": "207959",
    "end": "211500"
  },
  {
    "text": "are too small",
    "start": "211500",
    "end": "213060"
  },
  {
    "text": "let's fix it by first splitting the",
    "start": "213060",
    "end": "215940"
  },
  {
    "text": "large index and then merging small",
    "start": "215940",
    "end": "218640"
  },
  {
    "text": "indices using re-index API",
    "start": "218640",
    "end": "223580"
  },
  {
    "start": "220000",
    "end": "486000"
  },
  {
    "text": "note that it's a best practice to stop",
    "start": "233420",
    "end": "236760"
  },
  {
    "text": "adding new Documents To Source indices",
    "start": "236760",
    "end": "239220"
  },
  {
    "text": "before starting re-indexing operation",
    "start": "239220",
    "end": "242900"
  },
  {
    "text": "even though re-indexing can be performed",
    "start": "242900",
    "end": "246060"
  },
  {
    "text": "in a live cluster it's also a best",
    "start": "246060",
    "end": "249420"
  },
  {
    "text": "practice to do this during off-peak",
    "start": "249420",
    "end": "252180"
  },
  {
    "text": "hours so you can minimize the",
    "start": "252180",
    "end": "254280"
  },
  {
    "text": "performance impact to improve",
    "start": "254280",
    "end": "256560"
  },
  {
    "text": "re-indexing performance while disable",
    "start": "256560",
    "end": "259019"
  },
  {
    "text": "replicas and increase the refresh",
    "start": "259019",
    "end": "261780"
  },
  {
    "text": "interval to 120 seconds",
    "start": "261780",
    "end": "264180"
  },
  {
    "text": "you can try other steps to improve",
    "start": "264180",
    "end": "267840"
  },
  {
    "text": "indexing performance for example",
    "start": "267840",
    "end": "270440"
  },
  {
    "text": "temporarily disabling the refresh",
    "start": "270440",
    "end": "272820"
  },
  {
    "text": "interval increasing the value of index",
    "start": "272820",
    "end": "276240"
  },
  {
    "text": "trans log flush threshold size using",
    "start": "276240",
    "end": "280080"
  },
  {
    "text": "slicing and so on",
    "start": "280080",
    "end": "282660"
  },
  {
    "text": "now let's create destination index",
    "start": "282660",
    "end": "285180"
  },
  {
    "text": "without replicas and with an increased",
    "start": "285180",
    "end": "288360"
  },
  {
    "text": "refresh interval to improve indexing",
    "start": "288360",
    "end": "290759"
  },
  {
    "text": "performance by using this command",
    "start": "290759",
    "end": "294979"
  },
  {
    "text": "next let's use re-index API to copy",
    "start": "297380",
    "end": "301979"
  },
  {
    "text": "index with big shards to destination",
    "start": "301979",
    "end": "304800"
  },
  {
    "text": "index with increased primary count by",
    "start": "304800",
    "end": "307919"
  },
  {
    "text": "using this command",
    "start": "307919",
    "end": "310880"
  },
  {
    "text": "this can take a lot of time depending on",
    "start": "313320",
    "end": "316259"
  },
  {
    "text": "cluster resources and size of source",
    "start": "316259",
    "end": "319139"
  },
  {
    "text": "data that's used when performance",
    "start": "319139",
    "end": "322139"
  },
  {
    "text": "optimization is done for indexing",
    "start": "322139",
    "end": "325080"
  },
  {
    "text": "let's use the tasks API to monitor",
    "start": "325080",
    "end": "328680"
  },
  {
    "text": "progress",
    "start": "328680",
    "end": "331139"
  },
  {
    "text": "when re-indexing is complete will enable",
    "start": "331139",
    "end": "335100"
  },
  {
    "text": "replicas by using this command",
    "start": "335100",
    "end": "339139"
  },
  {
    "text": "now let's set the default value of one",
    "start": "346020",
    "end": "349259"
  },
  {
    "text": "second for refresh interval",
    "start": "349259",
    "end": "353180"
  },
  {
    "text": "now if your application allows delete",
    "start": "354300",
    "end": "358080"
  },
  {
    "text": "the old index to free up disk space",
    "start": "358080",
    "end": "362900"
  },
  {
    "text": "let's merge small indices to create a",
    "start": "364139",
    "end": "368220"
  },
  {
    "text": "large index first create desired",
    "start": "368220",
    "end": "371280"
  },
  {
    "text": "destination index without replicas",
    "start": "371280",
    "end": "374280"
  },
  {
    "text": "with only one primary Shard and with an",
    "start": "374280",
    "end": "378000"
  },
  {
    "text": "increased refresh interval by using this",
    "start": "378000",
    "end": "381000"
  },
  {
    "text": "command",
    "start": "381000",
    "end": "383419"
  },
  {
    "text": "you can adjust the number of primary",
    "start": "384900",
    "end": "387479"
  },
  {
    "text": "shards based on your data size but you",
    "start": "387479",
    "end": "391259"
  },
  {
    "text": "want to make sure that the resulting",
    "start": "391259",
    "end": "392880"
  },
  {
    "text": "short size is at least 10 to 30 GB",
    "start": "392880",
    "end": "396660"
  },
  {
    "text": "next use the V index API to copy small",
    "start": "396660",
    "end": "401880"
  },
  {
    "text": "indices to merge index with reduced",
    "start": "401880",
    "end": "406020"
  },
  {
    "text": "short count by choosing this command",
    "start": "406020",
    "end": "410720"
  },
  {
    "text": "this will again take a lot of time",
    "start": "414020",
    "end": "417120"
  },
  {
    "text": "depending on cluster resources and size",
    "start": "417120",
    "end": "421680"
  },
  {
    "text": "of source data and the performance",
    "start": "421680",
    "end": "423840"
  },
  {
    "text": "optimization done for indexing",
    "start": "423840",
    "end": "426900"
  },
  {
    "text": "let's use tasks API to monitor progress",
    "start": "426900",
    "end": "432979"
  },
  {
    "text": "when re-indexing is completed let's",
    "start": "436139",
    "end": "439199"
  },
  {
    "text": "increase replica count from 0 to 1 by",
    "start": "439199",
    "end": "443220"
  },
  {
    "text": "using this command",
    "start": "443220",
    "end": "446300"
  },
  {
    "text": "next reset refresh interval to the",
    "start": "448460",
    "end": "452460"
  },
  {
    "text": "default value of one second",
    "start": "452460",
    "end": "456319"
  },
  {
    "text": "if your use case allows delete old",
    "start": "456539",
    "end": "459960"
  },
  {
    "text": "indices by using this command",
    "start": "459960",
    "end": "464419"
  },
  {
    "text": "finally let's check amount of disk space",
    "start": "466740",
    "end": "469860"
  },
  {
    "text": "available on each node by using this",
    "start": "469860",
    "end": "472800"
  },
  {
    "text": "command",
    "start": "472800",
    "end": "475220"
  },
  {
    "text": "this shows more balanced cluster in",
    "start": "477720",
    "end": "481020"
  },
  {
    "text": "terms of space compared to start",
    "start": "481020",
    "end": "485000"
  },
  {
    "start": "486000",
    "end": "501000"
  },
  {
    "text": "thanks for watching and happy cloud",
    "start": "486660",
    "end": "488819"
  },
  {
    "text": "computing from all of us here at AWS",
    "start": "488819",
    "end": "492450"
  },
  {
    "text": "[Applause]",
    "start": "492450",
    "end": "494210"
  },
  {
    "text": "[Music]",
    "start": "494210",
    "end": "497370"
  },
  {
    "text": "[Music]",
    "start": "499410",
    "end": "502589"
  }
]