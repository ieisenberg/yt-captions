[
  {
    "start": "0",
    "end": "15000"
  },
  {
    "text": "all right I assume the cut in music means that it's time for me to start so first of all welcome this is uh CMP 406",
    "start": "399",
    "end": "7160"
  },
  {
    "text": "Amazon ECS at corsera powering a unified uh general purpose execution",
    "start": "7160",
    "end": "12280"
  },
  {
    "text": "microservice while defending against untrusted code now this is a 400 level session so we will assume familiarity",
    "start": "12280",
    "end": "18560"
  },
  {
    "start": "15000",
    "end": "15000"
  },
  {
    "text": "with Docker with Linux and with Amazon ECS um we hope you take away from this",
    "start": "18560",
    "end": "23680"
  },
  {
    "text": "session a number of techniques for a nearline uh scheduled and batch",
    "start": "23680",
    "end": "28800"
  },
  {
    "text": "microservice powered by on ECS additionally we will be discussing a number of security vulnerabilities and",
    "start": "28800",
    "end": "35360"
  },
  {
    "text": "counter measures when running untrusted code within Docker and on Amazon ECS and so we hope you learned some of the",
    "start": "35360",
    "end": "41280"
  },
  {
    "text": "defenses that you can apply in your own usage of Docker finally we'll talk about",
    "start": "41280",
    "end": "46399"
  },
  {
    "text": "why we have actually forked the Amazon ECS agent and modified it and why you may want to as well now this talk is organized as",
    "start": "46399",
    "end": "53520"
  },
  {
    "start": "52000",
    "end": "52000"
  },
  {
    "text": "follows Begin by introducing corsera to provide the necessary background to understand the decisions that we've made",
    "start": "53520",
    "end": "58640"
  },
  {
    "text": "and why we've done what we've done then we will move into uh my colleague Frank will actually discuss our unified",
    "start": "58640",
    "end": "65920"
  },
  {
    "text": "uh job execution framework discuss the advantages and disadvantages of using Amazon ECS and finally go over our",
    "start": "65920",
    "end": "72799"
  },
  {
    "text": "system's architecture then I'm going to delve into one application of this uh unified scheduling and uh execution",
    "start": "72799",
    "end": "80200"
  },
  {
    "text": "system that is evaluating programming assignments and in particular we'll discuss the security threat model",
    "start": "80200",
    "end": "85520"
  },
  {
    "text": "involved and finally go over the attacks and defenses that we employ to secure our",
    "start": "85520",
    "end": "91840"
  },
  {
    "text": "system now without any further Ado I'd like to begin by introducing corsera so",
    "start": "91840",
    "end": "98240"
  },
  {
    "text": "corsera uh was founded in 2012 by two Stanford professors and our mission is",
    "start": "98240",
    "end": "103439"
  },
  {
    "text": "universal access to the world's best education we partner with worldclass",
    "start": "103439",
    "end": "109200"
  },
  {
    "text": "educational institutions from around the globe we have a couple of them up here behind me now these institutions they",
    "start": "109200",
    "end": "117960"
  },
  {
    "text": "take their best programs their best instructors and their best courses and they put them on the corsera Global",
    "start": "117960",
    "end": "123600"
  },
  {
    "text": "Learning platform for anyone to consume around the world now we have a couple of the course",
    "start": "123600",
    "end": "129239"
  },
  {
    "text": "icons behind me here and these courses actually span a range from highly technical courses including machine",
    "start": "129239",
    "end": "134400"
  },
  {
    "text": "learning and our data science specialization to Humanities courses including learning how to learn social",
    "start": "134400",
    "end": "140680"
  },
  {
    "text": "psychology and IR rational Behavior to name a few of our most popular now corsera is all about",
    "start": "140680",
    "end": "147519"
  },
  {
    "start": "146000",
    "end": "146000"
  },
  {
    "text": "education at scale this is inherent to our mission we have 15 million Learners",
    "start": "147519",
    "end": "152840"
  },
  {
    "text": "worldwide well over a thousand courses and well over 100 over 100 Partners now",
    "start": "152840",
    "end": "158560"
  },
  {
    "text": "our scale brings a number of opportunities but also a number of challenges for example the export grade",
    "start": "158560",
    "end": "164640"
  },
  {
    "text": "book function is relatively trivial if your courses have 20 or even 200 students our courses regularly have over",
    "start": "164640",
    "end": "172560"
  },
  {
    "text": "200,000 participants now in order to meet our Global Learning platform needs we've had",
    "start": "172560",
    "end": "178720"
  },
  {
    "text": "to develop a number of techniques systems and tools in order to help power",
    "start": "178720",
    "end": "184319"
  },
  {
    "text": "and make this all work smoothly and now I'd like to turn it over to Frank Chen a founding engineer at corsera to discuss",
    "start": "184319",
    "end": "190799"
  },
  {
    "text": "our unified execution framework thank you Brandon so what does a unified",
    "start": "190799",
    "end": "195879"
  },
  {
    "text": "execution framework entail so three things batch processing scheduled processing and nearline processing and",
    "start": "195879",
    "end": "202640"
  },
  {
    "text": "I'll go over each of them in turn so what does batch processing enable us to do as Brandon said instructors by",
    "start": "202640",
    "end": "209959"
  },
  {
    "start": "205000",
    "end": "205000"
  },
  {
    "text": "putting course in return for putting courses our platforms one of the things instructors want from us are reports",
    "start": "209959",
    "end": "216000"
  },
  {
    "text": "great exports learner demographics and course progress statistics are just three examples generating these reports",
    "start": "216000",
    "end": "222560"
  },
  {
    "text": "is easy for you know 20 or 200 Learners it's very hard for 200,000 Learners we",
    "start": "222560",
    "end": "227680"
  },
  {
    "text": "can't do that in 5 seconds so we have to batch we have to batch process them similarly our finance Business",
    "start": "227680",
    "end": "234200"
  },
  {
    "text": "Development and marketing teams want B want very upto-date business metrics and",
    "start": "234200",
    "end": "239720"
  },
  {
    "text": "our payments team wants to do say payments reconciliation to make sure that we are getting the right product to",
    "start": "239720",
    "end": "245879"
  },
  {
    "text": "the right people so this is and this uh and again this is very easy when you",
    "start": "245879",
    "end": "251239"
  },
  {
    "text": "have you know a thousand Learners it's very hard when you have a th a 100,00 Learners or a million learners for",
    "start": "251239",
    "end": "256359"
  },
  {
    "text": "instance so the second thing is scheduled processing so how many of you have received a casera recommendation",
    "start": "256359",
    "end": "262120"
  },
  {
    "text": "email before great so that is part that is",
    "start": "262120",
    "end": "267680"
  },
  {
    "text": "actually being sent out as a batch job that's run every week that sends out a recom weekly recommendation email to",
    "start": "267680",
    "end": "273199"
  },
  {
    "text": "each of our 15 million Learners and uh at the same time we also do smaller uh",
    "start": "273199",
    "end": "278880"
  },
  {
    "text": "SCH scholar smaller marketing emails involving targeted marketing and some",
    "start": "278880",
    "end": "283960"
  },
  {
    "text": "and user reactivation and finally nearline processing enables us to do pedagogical",
    "start": "283960",
    "end": "290039"
  },
  {
    "text": "Innovations so kazera at its heart it's a education company and we develop",
    "start": "290039",
    "end": "296400"
  },
  {
    "text": "things like for instance peer review or Auto autograd programming assignments to help with that and nearline processing",
    "start": "296400",
    "end": "302240"
  },
  {
    "text": "enables us to do some of these things as aside I just want to talk a bit about what is peer review so in a lot of our",
    "start": "302240",
    "end": "308840"
  },
  {
    "text": "classes such as uh fiction writing or modern poetry instructors cannot accurately assess student performance",
    "start": "308840",
    "end": "315240"
  },
  {
    "text": "just by asking McQ questions you want in students are required to submit for",
    "start": "315240",
    "end": "320880"
  },
  {
    "text": "instance a short answers or essays or even submit drawings or recordings and",
    "start": "320880",
    "end": "326199"
  },
  {
    "text": "you really need human beings to evaluate these in an Ideal World you know you can we can hire you know a thousand Tas to",
    "start": "326199",
    "end": "333400"
  },
  {
    "text": "grade these submissions but we can't afford that so you can but we can do the next best thing which is getting other",
    "start": "333400",
    "end": "339479"
  },
  {
    "text": "students to evaluate your work as part of this system we need to assign reviewers to your assignments in a fair",
    "start": "339479",
    "end": "346080"
  },
  {
    "text": "and and efficient manner according to sometimes complex criteria and nearline processing enables us to do this and",
    "start": "346080",
    "end": "352440"
  },
  {
    "text": "Brandon later will talk about uh programming assignments so again before I jump into",
    "start": "352440",
    "end": "357479"
  },
  {
    "text": "what we did with ECS I want to talk about about the early days of batch processing at Cera we built two systems",
    "start": "357479",
    "end": "363360"
  },
  {
    "text": "back in the early days first was this system called Cascade it was a PHP based",
    "start": "363360",
    "end": "368759"
  },
  {
    "start": "365000",
    "end": "365000"
  },
  {
    "text": "job Runner and you can imagine how well that worked out for us it originally ran in screen sessions and it pulled apis",
    "start": "368759",
    "end": "375120"
  },
  {
    "text": "for new jobs so PHP really is designed for serving WordPress sites and so on",
    "start": "375120",
    "end": "380400"
  },
  {
    "text": "it's really not designed to run for hours at a time so we had a lot of unexplained memory leaks that forc us to",
    "start": "380400",
    "end": "386560"
  },
  {
    "text": "write a python script that restarted the PHP scripts once in a while because of",
    "start": "386560",
    "end": "391720"
  },
  {
    "text": "these memory leaks and this and made it really fragile and really unreliable and our developers were not very happy and",
    "start": "391720",
    "end": "399240"
  },
  {
    "text": "as we moved from a PHP and python based back end to uh to a scholar based back",
    "start": "399240",
    "end": "404360"
  },
  {
    "text": "end uh we ALS rewrote this thing called Saturn which is a Scala uh schedule batch job Runner it's based on the",
    "start": "404360",
    "end": "410919"
  },
  {
    "text": "quartz uh scheduler Library so this was better than Cascade for one it has types but then all jobs ran on the same jvm",
    "start": "410919",
    "end": "418759"
  },
  {
    "text": "which you know caused a lot of interference for instance a lot of our metrix reports uh starts uh every hour",
    "start": "418759",
    "end": "425599"
  },
  {
    "text": "at the top of the hour and when you have 15 of these jobs starting at once on the same jvm reports would take 20 or 30",
    "start": "425599",
    "end": "432319"
  },
  {
    "text": "times longer than they should be and again this cost developers to be really really",
    "start": "432319",
    "end": "437560"
  },
  {
    "text": "unhappy so we were looking for something better and we and what did we want we wanted six things one our new system had",
    "start": "437560",
    "end": "446360"
  },
  {
    "start": "442000",
    "end": "442000"
  },
  {
    "text": "to be reliable so Saturn and clade were really ly and developers became became",
    "start": "446360",
    "end": "451440"
  },
  {
    "text": "very frustrated with jobs not running properly second we wanted something",
    "start": "451440",
    "end": "456639"
  },
  {
    "text": "that's easy to do develop for so developing and testing locally with those old systems was very difficult and",
    "start": "456639",
    "end": "463120"
  },
  {
    "text": "developers unfortunately developed a bad habit of pushing code to prod without testing it so we wanted something that",
    "start": "463120",
    "end": "470120"
  },
  {
    "text": "required little to know setup and little to know boiler plate code to actually write and test the job third we wanted",
    "start": "470120",
    "end": "476560"
  },
  {
    "text": "something that's easy to easy to deploy again deployment on those two old system was very difficult and fragile what we",
    "start": "476560",
    "end": "484479"
  },
  {
    "text": "did was that we killed off the old processors on the on on those machines and get pulled and just restarted the",
    "start": "484479",
    "end": "489599"
  },
  {
    "text": "jobs and as you can imagine that killed off a lot of running jobs so that was not great and besides that we also had",
    "start": "489599",
    "end": "497599"
  },
  {
    "text": "very good tooling for our online deployment services and our product Engineers were were asking the",
    "start": "497599",
    "end": "503360"
  },
  {
    "text": "infrastructure team you know you have these great tools for online services actually written by Brennan but you know",
    "start": "503360",
    "end": "509319"
  },
  {
    "text": "why can't you do that for your offline services and so we need to come up an answer for that fourth we wanted",
    "start": "509319",
    "end": "516440"
  },
  {
    "text": "something with high efficiency specifically low startup and shutdown overhead we wanted to be responsive",
    "start": "516440",
    "end": "522080"
  },
  {
    "text": "enough to start a job within say 15 seconds and 15 seconds of a job being requested and this is really important",
    "start": "522080",
    "end": "529040"
  },
  {
    "text": "for especially for nearline processing requirements fifth we wanted something with a low Ops load so casera despite",
    "start": "529040",
    "end": "536200"
  },
  {
    "text": "you know being over you know 180 people has exactly one devops engineer so he",
    "start": "536200",
    "end": "542079"
  },
  {
    "text": "can't possibly manage everything and besides that casera has a tradition of developers owning their own services and",
    "start": "542079",
    "end": "549040"
  },
  {
    "text": "developers really don't want to be woken up at 3: a.m 3:00 a.m. in the morning because their Jobs",
    "start": "549040",
    "end": "555160"
  },
  {
    "text": "died and finally cost Effectiveness we are startup and we are costc conscious",
    "start": "555160",
    "end": "561320"
  },
  {
    "text": "and in our research we found that most of our jobs actually complete in about 15 to 20 minutes so we didn't want to",
    "start": "561320",
    "end": "567200"
  },
  {
    "text": "say run a new ec2 instance for every single job that comes up because easy2 uh rounds cost up to a full hour so we",
    "start": "567200",
    "end": "574399"
  },
  {
    "text": "wanted something that's cost effective and we looked at a couple of other Technologies so we are developers",
    "start": "574399",
    "end": "580640"
  },
  {
    "text": "we want to write our own code and sometimes we have a we have a not invented here syndrome so we tried we",
    "start": "580640",
    "end": "587120"
  },
  {
    "text": "tried that but it proved to be unreliable specifically it proved to be difficult to handle coordination and",
    "start": "587120",
    "end": "593120"
  },
  {
    "text": "synchronization across you know a cluster of machines next we look at apachi misos so misos is a General",
    "start": "593120",
    "end": "599519"
  },
  {
    "text": "scheduling framework uh by the Apache foundation so it's very powerful but on the other hand it's very hard to",
    "start": "599519",
    "end": "605079"
  },
  {
    "text": "productionize properly and this and me to run misos properly you need developers with experience and we didn't",
    "start": "605079",
    "end": "611480"
  },
  {
    "text": "have any experience at that time and finally we looked at uh kubernetes by Google so this is again another",
    "start": "611480",
    "end": "618279"
  },
  {
    "text": "scheduling framework This Time by Google so at least at the time we looked at it it was really designed for the Google",
    "start": "618279",
    "end": "624720"
  },
  {
    "text": "compute engine uh first and everything else second and second it was not managed service so that created a higher",
    "start": "624720",
    "end": "631560"
  },
  {
    "text": "Ops load uh for our poor Dev Ops engineer and then during re during",
    "start": "631560",
    "end": "637279"
  },
  {
    "start": "636000",
    "end": "636000"
  },
  {
    "text": "reinvent last year uh Dr wner walos introduced the Amazon ec2 container service and we looked at it and was like",
    "start": "637279",
    "end": "644200"
  },
  {
    "text": "yeah this might be exactly what we want so why is that so three things first low",
    "start": "644200",
    "end": "649360"
  },
  {
    "text": "maintenance Amazon in this case does the hard work of coordination and synchronization in a distributed system",
    "start": "649360",
    "end": "656079"
  },
  {
    "text": "and even provides an agent to run the jobs itself so so this makes our devops engineer very happy because he can have",
    "start": "656079",
    "end": "661880"
  },
  {
    "text": "one Ami with Docker and that agent on it and he can launch say 16 instances of it",
    "start": "661880",
    "end": "667079"
  },
  {
    "text": "and suddenly has a 60 machine cluster in which to run jobs so that's great second is integrated with the rest",
    "start": "667079",
    "end": "673800"
  },
  {
    "text": "of AWS for instance we can use AWS am roles and users to re to restrict access",
    "start": "673800",
    "end": "679600"
  },
  {
    "text": "to the ECS API and this makes Brennan who is also our security engineer very",
    "start": "679600",
    "end": "685279"
  },
  {
    "text": "happy because we got security without him doing any extra work and finally it's easy to do out for",
    "start": "685279",
    "end": "692800"
  },
  {
    "text": "Amazon traditionally has a very good set of apis uh documentation and sdks and",
    "start": "692800",
    "end": "698519"
  },
  {
    "text": "ECS is of course no different so we found it very easy to grasp the key Concepts and get started with using",
    "start": "698519",
    "end": "704839"
  },
  {
    "text": "Amazon ECS and this made me very happy because I ended up being the guy who wrote All the",
    "start": "704839",
    "end": "710040"
  },
  {
    "text": "code um so Amazon ECS is a great building block but we still need to build Tools around it for our purposes",
    "start": "710040",
    "end": "715920"
  },
  {
    "text": "so what did we build so you might have seen this seen the name Iguazu in the keynote given by uh Dr Dr wos in the",
    "start": "715920",
    "end": "723040"
  },
  {
    "text": "morning so what is Iguazu so Iguazu is a batch job scheder for Amazon ECS it has",
    "start": "723040",
    "end": "728920"
  },
  {
    "text": "three modes either you can run a job immediately or you can run a job uh in a deferred manner for instance run a job",
    "start": "728920",
    "end": "734560"
  },
  {
    "text": "two hours from now or run a job at 9:00 p.m. tomorrow or you can run it in a scheduled recurring or Chron likee",
    "start": "734560",
    "end": "740480"
  },
  {
    "text": "manner say run a job say at 2 p.m. Mondays through Thursdays every week it's programmatically accessible",
    "start": "740480",
    "end": "746760"
  },
  {
    "text": "internally by our standard apis and clients and it's named for Iguazu Falls it's the world's largest waterfall by",
    "start": "746760",
    "end": "753000"
  },
  {
    "text": "volume and we hope that Iguazu was will handle a similar volume of jobs so let",
    "start": "753000",
    "end": "758920"
  },
  {
    "text": "me go through the architecture of Iguazu uh with like a sample request so in this case a user submits a request to a",
    "start": "758920",
    "end": "765519"
  },
  {
    "start": "759000",
    "end": "759000"
  },
  {
    "text": "front-end or online service for instance an in an instructor might be requesting for an export of all the grades of the",
    "start": "765519",
    "end": "772519"
  },
  {
    "text": "Learners in his class for a specific quiz and so he submits a request to the quiz Service uh the quit service detects",
    "start": "772519",
    "end": "779839"
  },
  {
    "text": "that okay this is a bad shot and it just makes a request to Iguazu frontend Iguazu front The Iguazu",
    "start": "779839",
    "end": "786120"
  },
  {
    "text": "frontend persists pertinent job information to Cassandra which we use for our",
    "start": "786120",
    "end": "791399"
  },
  {
    "text": "database and the front end then submits the job request into an sqsq and The Iguazu backend then reads",
    "start": "791399",
    "end": "798760"
  },
  {
    "text": "the pending jobs of the sqsq and processes them so in this case it will",
    "start": "798760",
    "end": "804279"
  },
  {
    "text": "talk to the ECS apis to get a list of all the container instances and select",
    "start": "804279",
    "end": "809399"
  },
  {
    "text": "the container instance manually to run a job so a special note here in our original design we handed off the",
    "start": "809399",
    "end": "815800"
  },
  {
    "text": "scheduling part of this to the ECS system Itself by calling run task some of you might be familiar with that which",
    "start": "815800",
    "end": "821920"
  },
  {
    "text": "would run which would randomly choose an instance with enough CPU and R CPU and Ram uh resources to run my job on uh",
    "start": "821920",
    "end": "830279"
  },
  {
    "text": "however we found that this was not flexible enough for our purposes specifically as we were integrating The",
    "start": "830279",
    "end": "835519"
  },
  {
    "text": "Iguazu back end uh with the E2 autoscaling system we in order to",
    "start": "835519",
    "end": "840920"
  },
  {
    "text": "autoscale our ec2 uh ECS uh container instances we found a run task with",
    "start": "840920",
    "end": "846000"
  },
  {
    "text": "sometimes scheduled jobs on instances that were in the process of termination so that's not great so we decided to",
    "start": "846000",
    "end": "852839"
  },
  {
    "text": "switch to the start Task API and wrote Our Own scheduling very simple scheduling system instead so with that",
    "start": "852839",
    "end": "859079"
  },
  {
    "text": "we eliminated the problem by you know just simply not scheduling jobs on instances undergoing termination uh in",
    "start": "859079",
    "end": "866160"
  },
  {
    "text": "addition Iguazu also has the capability to receive notifications from the life cycle apis uh when say an instance is",
    "start": "866160",
    "end": "873560"
  },
  {
    "text": "getting terminated and Iguazu will even block the termination of of instances uh",
    "start": "873560",
    "end": "878800"
  },
  {
    "text": "until all jobs that were already running on those instances uh had completed so this greatly greatly improved uh",
    "start": "878800",
    "end": "885440"
  },
  {
    "text": "reliability especially when operating with autoscaling and of course if the jobs cannot be run because of say a lack",
    "start": "885440",
    "end": "891519"
  },
  {
    "text": "of resources available then they would just go back in sqsq for retry after a 10-minute waiting period And if the job",
    "start": "891519",
    "end": "898199"
  },
  {
    "text": "of course still fails to be scheduled after an hour because say a developer accidentally requested for 64 gigs of",
    "start": "898199",
    "end": "903800"
  },
  {
    "text": "RAM then the job would just be deleted in an exception logged and if have and of course if we",
    "start": "903800",
    "end": "910240"
  },
  {
    "text": "have successfully identified an instance with enough resources then we'll call to start Task API and ask ECS to run the",
    "start": "910240",
    "end": "917759"
  },
  {
    "text": "task on a specific container instance The Iguazu backend will also periodically monitor the job by calling",
    "start": "917759",
    "end": "923680"
  },
  {
    "text": "the ECS apis and update the status of the job in Cassandra and of and each",
    "start": "923680",
    "end": "928759"
  },
  {
    "text": "online service in this case the quiz service can query The Iguazu front end for that job update in within",
    "start": "928759",
    "end": "935880"
  },
  {
    "text": "Cassandra and of course similarly developers can use an admin interface to schedule recurring jobs so this goes",
    "start": "935880",
    "end": "942600"
  },
  {
    "text": "into an alternate Iguazu front end that basically wakes up every second to and sends all the T all the jobs it has to",
    "start": "942600",
    "end": "949519"
  },
  {
    "text": "run to the back end we the same queue so that's great so how do how do developers",
    "start": "949519",
    "end": "954720"
  },
  {
    "start": "953000",
    "end": "953000"
  },
  {
    "text": "develop Iguazu jobs so because we write everything in Scala we wanted to make it as simple as possible so all developers",
    "start": "954720",
    "end": "961880"
  },
  {
    "text": "really have to do is to write basically a new class cut job specify the amount",
    "start": "961880",
    "end": "967240"
  },
  {
    "text": "of CPU uh CPU for the job the amount of memory for the job and just one function run and Iguazu will handle the rest so",
    "start": "967240",
    "end": "975079"
  },
  {
    "text": "this is almost there's no almost no boiler plate code and it's very easy to get started and running jobs from other",
    "start": "975079",
    "end": "981079"
  },
  {
    "text": "services is even simpler so we have an internal rest RPC framework called nap",
    "start": "981079",
    "end": "986240"
  },
  {
    "text": "time that abstracts the details of uh inter service API cost away from developers so developers can just take",
    "start": "986240",
    "end": "993639"
  },
  {
    "text": "the uh Iguazu client uh that nap time provides and call the create method with",
    "start": "993639",
    "end": "998800"
  },
  {
    "text": "the parameters in this case uh exporting quiz grades and the and just call it and",
    "start": "998800",
    "end": "1004959"
  },
  {
    "text": "the develop and and there you go the you get a you get a new job instance running",
    "start": "1004959",
    "end": "1011480"
  },
  {
    "text": "just like that so it's really simple and you know the developer and Ops user so we have a develop we have",
    "start": "1011480",
    "end": "1018519"
  },
  {
    "start": "1014000",
    "end": "1014000"
  },
  {
    "text": "have a admin interface like I talked about and you can say add scheduled jobs look at all the invocation look at all",
    "start": "1018519",
    "end": "1025038"
  },
  {
    "text": "the job invocations that happening and things like that and you can just you know click the plus button in the lower",
    "start": "1025039",
    "end": "1030520"
  },
  {
    "text": "right to add a new scheduled job and they also can click to edit existing ones and of course all changes are",
    "start": "1030520",
    "end": "1036120"
  },
  {
    "text": "logged for auditing purposes deploying jobs also becomes very",
    "start": "1036120",
    "end": "1041280"
  },
  {
    "start": "1039000",
    "end": "1039000"
  },
  {
    "text": "easy so for developers now they just merge into master and that's it uh and",
    "start": "1041280",
    "end": "1047600"
  },
  {
    "text": "jenin stakehold takes over Jenkins first builds a zip package from Master prepares the docker image with the zip",
    "start": "1047600",
    "end": "1053799"
  },
  {
    "text": "file pushes the image into the into our own Docker registry which we are going to switch to using the newly announced",
    "start": "1053799",
    "end": "1060480"
  },
  {
    "text": "easy to container registry and registers the updated jobs with the Amazon ECS API",
    "start": "1060480",
    "end": "1065919"
  },
  {
    "text": "so this makes lives really easy for developers from developing the jobs to running the jobs to deploying the",
    "start": "1065919",
    "end": "1072640"
  },
  {
    "text": "jobs so sometimes things go wrong or even when things go right we want to look at logs and metrics so we did",
    "start": "1072640",
    "end": "1078919"
  },
  {
    "text": "something really simple here uh so logs are just stored for all Docker containers logs are just stored in war",
    "start": "1078919",
    "end": "1085440"
  },
  {
    "text": "lip Docker containers and we just upload this into a log analysis service we use",
    "start": "1085440",
    "end": "1091159"
  },
  {
    "text": "Summa logic you might use Splunk or any of the other providers or even Ro your own so one of the problems with this is",
    "start": "1091159",
    "end": "1097640"
  },
  {
    "text": "that container IDs are specific to that Docker uh to to that Docker process and",
    "start": "1097640",
    "end": "1102880"
  },
  {
    "text": "it's not apparent you know what container ID is associated with which job so this this simplest solution we",
    "start": "1102880",
    "end": "1109120"
  },
  {
    "text": "can think of and we implemented is that we just print out the job name and the job ID at the start so that people can",
    "start": "1109120",
    "end": "1114919"
  },
  {
    "text": "search us people can search for their specific job very easily and we find that this works pretty well in practice",
    "start": "1114919",
    "end": "1121799"
  },
  {
    "text": "and same thing with metrics U again we use a third-party metrix collector got data do and we submit metric for both",
    "start": "1121799",
    "end": "1127840"
  },
  {
    "start": "1122000",
    "end": "1122000"
  },
  {
    "text": "jobs and the container instances itself and we found that so long as you know worker machines can talk to the internet",
    "start": "1127840",
    "end": "1134480"
  },
  {
    "text": "things will work out pretty well so we launched this system in April of 2015 and currently we have 65 jobs running in",
    "start": "1134480",
    "end": "1141400"
  },
  {
    "text": "production uh we have 44 different scheduled jobs and we have over a thousand uh runs per day on the main",
    "start": "1141400",
    "end": "1147360"
  },
  {
    "text": "system so developers are definitely happier with this system than with the previous PHP based ones but we are",
    "start": "1147360",
    "end": "1152799"
  },
  {
    "text": "always continuing to improve this system and now I will hand it back to Brennan our information security officer we'll",
    "start": "1152799",
    "end": "1158600"
  },
  {
    "text": "talk about a special case of Iguazu which is evaluating programming assignments brenon thank you",
    "start": "1158600",
    "end": "1164640"
  },
  {
    "text": "Frank so what do we mean when we say a evaluating programming",
    "start": "1164640",
    "end": "1170320"
  },
  {
    "text": "assignments now some of you may have uh done programming assignments when you were in school on the corer platform",
    "start": "1170320",
    "end": "1177039"
  },
  {
    "text": "they look as follows Pro programming assignments start with a set of instructions and",
    "start": "1177039",
    "end": "1182520"
  },
  {
    "text": "typically some starter code this uh Blue Link here this is actually from a course in Chinese on uh competitive programming",
    "start": "1182520",
    "end": "1189120"
  },
  {
    "text": "in c now uh participants in the course download that starter code and work on",
    "start": "1189120",
    "end": "1194919"
  },
  {
    "text": "the assignment on their local machines and when they've got things working then they upload them their submission back",
    "start": "1194919",
    "end": "1201080"
  },
  {
    "text": "to the corsera platform here's our web uploader interface immediately upon",
    "start": "1201080",
    "end": "1206240"
  },
  {
    "text": "uploading the submission we kick off a job to score that submission we want to",
    "start": "1206240",
    "end": "1212400"
  },
  {
    "text": "provide instant feedback as much or as close to that as possible for pedagogical reasons now these test cases they're not",
    "start": "1212400",
    "end": "1220320"
  },
  {
    "text": "cor are authored an instructional team will put together a suite of typically test cases and sometimes even static",
    "start": "1220320",
    "end": "1225919"
  },
  {
    "text": "analysis tools like Java find bugs package it up into a Docker container and upload it to the corsera servers we",
    "start": "1225919",
    "end": "1233200"
  },
  {
    "text": "then schedule this to run on Au guazu now program corsera I previously",
    "start": "1233200",
    "end": "1239559"
  },
  {
    "start": "1237000",
    "end": "1237000"
  },
  {
    "text": "mentioned corsera is all about education at scale and this scale actually manifests itself in multiple Dimensions",
    "start": "1239559",
    "end": "1245600"
  },
  {
    "text": "not only must we contend with hundreds of thousands of participants in some of our largest courses but we also must",
    "start": "1245600",
    "end": "1251840"
  },
  {
    "text": "scale across course Topics in particular we cannot Target for example the jvm we",
    "start": "1251840",
    "end": "1257559"
  },
  {
    "text": "cannot Target Target uh node and JavaScript we have to handle a whole",
    "start": "1257559",
    "end": "1263440"
  },
  {
    "text": "broad range of different courses we have courses from programming for everybody in Python to courses that use the GPU",
    "start": "1263440",
    "end": "1270400"
  },
  {
    "text": "programming uh framework from Nvidia Cuda fundamentally the greatest common",
    "start": "1270400",
    "end": "1276919"
  },
  {
    "text": "denominator for us is we have to be able to handle running and securely running",
    "start": "1276919",
    "end": "1282520"
  },
  {
    "text": "arbitrary binaries so this is the security challenge that programming assignments presented to us now actually",
    "start": "1282520",
    "end": "1288320"
  },
  {
    "start": "1283000",
    "end": "1283000"
  },
  {
    "text": "by by a show of hands who would like to compile and run arbitrary C code from random people on the internet on your own",
    "start": "1288320",
    "end": "1293960"
  },
  {
    "text": "machines you all are AWS employees I can tell the thing is we don't even require",
    "start": "1293960",
    "end": "1299480"
  },
  {
    "text": "a credit card anyway we've had programming assignments we've had programming",
    "start": "1299480",
    "end": "1305279"
  },
  {
    "start": "1302000",
    "end": "1302000"
  },
  {
    "text": "assignments on corsera since roughly the beginning since 2012 and our first generation system looked as follows",
    "start": "1305279",
    "end": "1311000"
  },
  {
    "text": "Learners would upload their submissions to the corsera servers and they'd immediately be put into a queue Amazon",
    "start": "1311000",
    "end": "1317039"
  },
  {
    "text": "sqs graders authored by the instructional teams would poll an API download the submissions evaluate them",
    "start": "1317039",
    "end": "1324960"
  },
  {
    "text": "and post back a score to be included in the uh their their grade um people's grade for the for the course now",
    "start": "1324960",
    "end": "1331720"
  },
  {
    "text": "typically the way this worked is we would provision an ec2 instance or two in a separate AWS account and let the",
    "start": "1331720",
    "end": "1337000"
  },
  {
    "text": "instructional teams you know log in and set up everything over there some of our more advanced or adventurous uh",
    "start": "1337000",
    "end": "1344679"
  },
  {
    "text": "instructional teams set up their own infrastructure some of them even set up in their own AWS account autoscaling on",
    "start": "1344679",
    "end": "1350039"
  },
  {
    "text": "spot instances and others even used alternate Cloud platforms including Google app",
    "start": "1350039",
    "end": "1355400"
  },
  {
    "text": "engine and of course some professors set up their graders on machines under their desks naturally the power cord always",
    "start": "1355400",
    "end": "1362760"
  },
  {
    "text": "became unplugged hours before the submission deadline now this first system had a",
    "start": "1362760",
    "end": "1369240"
  },
  {
    "start": "1367000",
    "end": "1367000"
  },
  {
    "text": "couple of weaknesses in particular it didn't have autoscaling uh except for the few",
    "start": "1369240",
    "end": "1374440"
  },
  {
    "text": "instructional teams that set it up now when I was in school I confess to being",
    "start": "1374440",
    "end": "1379480"
  },
  {
    "text": "a bit of a procrastinator I never turned in assignments more than two days before the deadline as it turns out",
    "start": "1379480",
    "end": "1385080"
  },
  {
    "text": "procrastination is a global phenomenon we after running this for for an",
    "start": "1385080",
    "end": "1390480"
  },
  {
    "text": "extended period of time we would regularly see submission spikes of over an order of magnitude more compared to",
    "start": "1390480",
    "end": "1397080"
  },
  {
    "text": "just simply the the day before so typically what would happen is we would over provision for the weeks coming up",
    "start": "1397080",
    "end": "1403360"
  },
  {
    "text": "to the assignment deadline we would then be woefully underprovision for the few hours before the submission deadline and",
    "start": "1403360",
    "end": "1409640"
  },
  {
    "text": "so we'd frantically add capacity and then naturally we'd forget about all that added capacity for a week or two",
    "start": "1409640",
    "end": "1415360"
  },
  {
    "text": "later and it would just sit idle wasting money so this was a bit of a problem further in this first generation system",
    "start": "1415360",
    "end": "1421840"
  },
  {
    "text": "we ended up punting on securing the code to basically the instructional teams and",
    "start": "1421840",
    "end": "1426960"
  },
  {
    "text": "securing untrusted code is hard and so this was met with mixed results finally the last thing we",
    "start": "1426960",
    "end": "1433159"
  },
  {
    "text": "learned is that grad evaluating programming assignments grading is surprisingly challenging things fail in",
    "start": "1433159",
    "end": "1438559"
  },
  {
    "text": "unexpected ways and I think this is best illustrated by an example now we had a course on Parallel",
    "start": "1438559",
    "end": "1444480"
  },
  {
    "text": "programming in Java and so the task was to solve some problem within a set amount of CPU time so what the greater",
    "start": "1444480",
    "end": "1452480"
  },
  {
    "text": "did is it would have some test case and it would start the submission on that particular test case and it would then",
    "start": "1452480",
    "end": "1458440"
  },
  {
    "text": "monitor the amount of CPU time it used and either the submission would complete the task and would be done or it would",
    "start": "1458440",
    "end": "1464880"
  },
  {
    "text": "use too much CPU time and the grer would kill it and uh it would respond back with a grading",
    "start": "1464880",
    "end": "1470440"
  },
  {
    "text": "failure now this these graders worked beautifully until someone submitted an assignment that had a deadlock in it in",
    "start": "1470440",
    "end": "1477320"
  },
  {
    "text": "fact it deadlocked every single time it ran now for fault tolerant purposes if",
    "start": "1477320",
    "end": "1484080"
  },
  {
    "text": "we don't hear a grade pingback from the the instructor grader within 15 minutes",
    "start": "1484080",
    "end": "1489159"
  },
  {
    "text": "we read it back to the queue and so that way you know if an instance diet or something you know we'd be able to to",
    "start": "1489159",
    "end": "1494559"
  },
  {
    "text": "handle it gracefully now some of you may have figured this out out but basically what happened is The Grater would download",
    "start": "1494559",
    "end": "1501320"
  },
  {
    "text": "this uh submission it would start it executing and then watch CPU time very very carefully now because it",
    "start": "1501320",
    "end": "1508039"
  },
  {
    "text": "immediately deadlocked CPU time never increased so naturally 15 minutes later",
    "start": "1508039",
    "end": "1513559"
  },
  {
    "text": "corera we put the submission back in the sqsq and another worker in their grater ended up pulling down and getting stuck",
    "start": "1513559",
    "end": "1519880"
  },
  {
    "text": "as well this is just one example of a large number of strange edge cases that show up when",
    "start": "1519880",
    "end": "1527080"
  },
  {
    "text": "you're really trying to run un trusted code it's sort of a wild world out there now corsera recently underwent a",
    "start": "1527080",
    "end": "1533720"
  },
  {
    "text": "complete revamp of the course platform we've migrated from running courses two to three times a year to starting a new",
    "start": "1533720",
    "end": "1540279"
  },
  {
    "text": "session every two to four weeks um and as a result as part of that we've had to",
    "start": "1540279",
    "end": "1545679"
  },
  {
    "text": "completely rewrite from the effectively from the ground up our course platform and in doing so we actually got another",
    "start": "1545679",
    "end": "1551559"
  },
  {
    "text": "shot at having better programming assignments infrastructure now corsera is a startup",
    "start": "1551559",
    "end": "1558159"
  },
  {
    "text": "and we also provide generous financial aid and so we are actually very costc conscious and in many of our reviews of",
    "start": "1558159",
    "end": "1564320"
  },
  {
    "text": "our cost spend we found that these programming assignment graders were a disproportionate amount of our our ec2",
    "start": "1564320",
    "end": "1571799"
  },
  {
    "text": "and and AWS costs since it's a given that we need to support more courses with more",
    "start": "1571799",
    "end": "1578760"
  },
  {
    "text": "interactive and sophisticated programming assignments and other kinds of assignments we needed we were targeting cost Savings of an order of",
    "start": "1578760",
    "end": "1585559"
  },
  {
    "text": "magnitude for our second generation system system now to us cost savings implied",
    "start": "1585559",
    "end": "1590720"
  },
  {
    "text": "Auto scaling and that works really really well it also helps with the load spikes but this also implied to us we",
    "start": "1590720",
    "end": "1596520"
  },
  {
    "text": "must use a shared pool of resources no longer can we dedicate a whole ec2 instance to an assignment or even to a",
    "start": "1596520",
    "end": "1602440"
  },
  {
    "text": "whole course now we've had a lot of experience",
    "start": "1602440",
    "end": "1607880"
  },
  {
    "text": "with these other previous graders and we found that again this they took a disproportionate amount of our Ops load",
    "start": "1607880",
    "end": "1614440"
  },
  {
    "text": "they on both the corsera side as well as on the instructional team side things would break dis would fill up a new",
    "start": "1614440",
    "end": "1620679"
  },
  {
    "text": "version came out things would need to be patched we could not handle this sort of opsol as we were going for as we're",
    "start": "1620679",
    "end": "1625919"
  },
  {
    "text": "going forward scaling our course platform now no maintenance to us we've had a huge amount of success with very",
    "start": "1625919",
    "end": "1632960"
  },
  {
    "text": "little maintenance and Ops load for our online serving stack and we use the immutable infrastructure and blue green",
    "start": "1632960",
    "end": "1638840"
  },
  {
    "text": "design patterns for deployment and so we wanted to try and apply those same learnings to our programming assignments",
    "start": "1638840",
    "end": "1645960"
  },
  {
    "text": "infrastructure now the fin uh or the third uh design goal that we had is we wanted to provide feedback in",
    "start": "1645960",
    "end": "1652880"
  },
  {
    "text": "near real time for pedagogical reasons it's far better to receive your feedback and on your submission as soon as",
    "start": "1652880",
    "end": "1659919"
  },
  {
    "text": "possible after the submission so you can learn from it and continue to improve and so we wanted to actually execute",
    "start": "1659919",
    "end": "1666120"
  },
  {
    "text": "fast graders and turn around a grade within 30 seconds at the 90th",
    "start": "1666120",
    "end": "1671159"
  },
  {
    "text": "percentile now near real time means that we have no hope of booting an ec2 instance on every new submission not",
    "start": "1671159",
    "end": "1677919"
  },
  {
    "text": "only because uh it would waste a lot of money but also because they can't boot fast enough and so in combination with",
    "start": "1677919",
    "end": "1683600"
  },
  {
    "start": "1682000",
    "end": "1682000"
  },
  {
    "text": "all of these the previous uh two design goals these three design goals impli that we needed to use containers and",
    "start": "1683600",
    "end": "1690440"
  },
  {
    "text": "Docker finally we wanted to bake security right into the infrastructure without and this would allow us to",
    "start": "1690440",
    "end": "1696919"
  },
  {
    "text": "automatically relieve a number of uh security vulnerabilities from the instructor graders and has actually had",
    "start": "1696919",
    "end": "1703159"
  },
  {
    "text": "the added benefit of making the whole system more robust to more innocent occurr es but what does secure infrastructure",
    "start": "1703159",
    "end": "1710240"
  },
  {
    "text": "even mean in order to understand that we had to define a threat model what can submissions do what can't they do and in",
    "start": "1710240",
    "end": "1717360"
  },
  {
    "text": "particular we wanted to prevent submitted code from doing the following we wanted to prevent submission a from",
    "start": "1717360",
    "end": "1723960"
  },
  {
    "text": "at all changing or affecting the score from submission B from the evaluation of submission B this is a pretty reasonable",
    "start": "1723960",
    "end": "1730799"
  },
  {
    "text": "design goal um and would definitely make our students happier We additionally",
    "start": "1730799",
    "end": "1735840"
  },
  {
    "text": "wanted to prevent a submission from being able to disrupt or take out the grading environment and we also wanted",
    "start": "1735840",
    "end": "1742039"
  },
  {
    "text": "to really really really make sure that a bad submission can't take out the rest of our course",
    "start": "1742039",
    "end": "1747720"
  },
  {
    "text": "platform now these graders provided by the instructional teams they typically have secret test cases and so we also by",
    "start": "1747720",
    "end": "1754320"
  },
  {
    "text": "default wanted to make it as difficult as possible to steal those test cases now it's impo we can't make it",
    "start": "1754320",
    "end": "1760559"
  },
  {
    "text": "impossible to steal those test cases for a variety of reasons we wanted to make it as difficult as possible and finally",
    "start": "1760559",
    "end": "1766240"
  },
  {
    "text": "we wanted to prevent this you know super submission from always changing its score to 100% every single time we want",
    "start": "1766240",
    "end": "1772320"
  },
  {
    "text": "to try and make it as difficult as possible for submissions to do that now as part of our threat model we",
    "start": "1772320",
    "end": "1778679"
  },
  {
    "start": "1777000",
    "end": "1777000"
  },
  {
    "text": "made a number of assumptions as previously mentioned due to our scale in terms of the breadth of courses we had",
    "start": "1778679",
    "end": "1784440"
  },
  {
    "text": "to handle arbitrary binaries further instructors are humans and therefore they make mistakes and",
    "start": "1784440",
    "end": "1790799"
  },
  {
    "text": "because of that we assume that instructor grading scripts and the instructor containers may have security",
    "start": "1790799",
    "end": "1796360"
  },
  {
    "text": "vulnerabilities this has the implication that all of the grading code and everything within those containers we",
    "start": "1796360",
    "end": "1801880"
  },
  {
    "text": "treat as untrusted finally although the Linux namespace implementation has been around",
    "start": "1801880",
    "end": "1808480"
  },
  {
    "text": "for a few years Docker is still a relatively new process and so we assume that there are unknown vulnerabilities",
    "start": "1808480",
    "end": "1814440"
  },
  {
    "text": "within the container implementation as of today this assumption is also uh",
    "start": "1814440",
    "end": "1820080"
  },
  {
    "text": "bolstered by the fact that the docker website itself says this should not be trusted for containing uh untrusted code",
    "start": "1820080",
    "end": "1827760"
  },
  {
    "text": "now this last assumption ends up bifurcating the threats and vulnerabilities into two main categories",
    "start": "1827760",
    "end": "1835799"
  },
  {
    "start": "1828000",
    "end": "1828000"
  },
  {
    "text": "in particular the first one we assume that the basic container technology is secure and given that we want to prevent",
    "start": "1835799",
    "end": "1841679"
  },
  {
    "text": "any negative impacts to running this arbitrary code the second category is of course we",
    "start": "1841679",
    "end": "1846760"
  },
  {
    "text": "assume the opposite we assume that basic container technology is vulnerable and given that we want to mitigate the",
    "start": "1846760",
    "end": "1852480"
  },
  {
    "text": "impacts as much as possible so with that security context in mind let me describe the system that",
    "start": "1852480",
    "end": "1858760"
  },
  {
    "text": "we built so we built a service and architecture for griding programming assignments called grid and it builds on",
    "start": "1858760",
    "end": "1864120"
  },
  {
    "text": "top of Amazon ECS and Iguazu exactly now I named it for tron's digital Frontier",
    "start": "1864120",
    "end": "1869279"
  },
  {
    "text": "but it has a convenient backronym grading inside Docker now the way it works is Learners",
    "start": "1869279",
    "end": "1877279"
  },
  {
    "text": "upload their submission to the grid servers and the grid servers immediately turn around and persist the submission in an Amazon S3",
    "start": "1877279",
    "end": "1883760"
  },
  {
    "text": "bucket upon completion grid invokes aaz to schedule the execution of the grading",
    "start": "1883760",
    "end": "1890080"
  },
  {
    "text": "container uh through the ECS apis these containers then get scheduled",
    "start": "1890080",
    "end": "1896000"
  },
  {
    "text": "on these highly secured and hardened grading machines now with that basic",
    "start": "1896000",
    "end": "1901480"
  },
  {
    "text": "architecture overview I'd like to delve into some attacks and defenses starting from some very simple ones and moving to",
    "start": "1901480",
    "end": "1907240"
  },
  {
    "start": "1906000",
    "end": "1906000"
  },
  {
    "text": "more serious ones now a very simple one is a simple resource exhaustion attack a submission could try and eat up as much",
    "start": "1907240",
    "end": "1913480"
  },
  {
    "text": "CPU as it can it can try and eat up all of memory on the machine could even even try and eat up all of the swap space on",
    "start": "1913480",
    "end": "1919080"
  },
  {
    "text": "a machine so fortunately the Linux kernel has control groups and and Docker provides a really nice API to set them",
    "start": "1919080",
    "end": "1926760"
  },
  {
    "text": "um these cgroups um as they're affectionately known allow you to set CPU quotas and limits on memory and and",
    "start": "1926760",
    "end": "1933480"
  },
  {
    "text": "swap it's important to get both of those because the memory limits will not also protect against swap",
    "start": "1933480",
    "end": "1940200"
  },
  {
    "text": "overflows further we have a hard time out for for container execution and this",
    "start": "1940200",
    "end": "1945240"
  },
  {
    "text": "ensures that some runaway process even if it's using within its quota can't continue to uh flood the the system with",
    "start": "1945240",
    "end": "1952679"
  },
  {
    "text": "uh useless CPU work now another shared resource is the file system and it's",
    "start": "1952679",
    "end": "1958120"
  },
  {
    "text": "important to protect against runaway submissions or even uh innocent submissions from filling up disk now we",
    "start": "1958120",
    "end": "1965559"
  },
  {
    "text": "use butter fs and the reason for that is because this allows us to set quotas on a per sub Vol basis and because the we",
    "start": "1965559",
    "end": "1973200"
  },
  {
    "text": "can map a s a single sub volume into a particular container this allows us to",
    "start": "1973200",
    "end": "1978399"
  },
  {
    "text": "limit the total file system usage by a single grading container submission to a set fixed",
    "start": "1978399",
    "end": "1984399"
  },
  {
    "text": "amount another part that you have to be wary of is you have to uh throttle iops",
    "start": "1984399",
    "end": "1990120"
  },
  {
    "text": "or to make sure that they're being shared evenly because that's another resource if one submission is pounding the the disk they can end up taking up",
    "start": "1990120",
    "end": "1996880"
  },
  {
    "text": "all of the iops and dis bandwidth now there's another shared",
    "start": "1996880",
    "end": "2002440"
  },
  {
    "start": "2000000",
    "end": "2000000"
  },
  {
    "text": "resource the kernel and there are a number of attacks possible that a malicious submission can do to try and",
    "start": "2002440",
    "end": "2008039"
  },
  {
    "text": "attack and take out the Linux kernel to take out or take it gain advantage in some",
    "start": "2008039",
    "end": "2013320"
  },
  {
    "text": "way for example a submission can try and open as many files as it uh can",
    "start": "2013320",
    "end": "2018919"
  },
  {
    "text": "fortunately Linux has U limits which allows you to set a number of limits in",
    "start": "2018919",
    "end": "2024039"
  },
  {
    "text": "fact we can do this on a per C group or per container basis and this is the no file or the number of open file limit",
    "start": "2024039",
    "end": "2030159"
  },
  {
    "text": "this works really really well another attack is a fork bomb attack or a process could try and spawn as many",
    "start": "2030159",
    "end": "2036320"
  },
  {
    "text": "subprocesses as possible and try and consume a lot of memory both in user space as well as in kernel space now the",
    "start": "2036320",
    "end": "2043519"
  },
  {
    "text": "Linux kernel has the NPR process limit but note that the NPR process limit is enforced on a per user basis and because",
    "start": "2043519",
    "end": "2051040"
  },
  {
    "text": "all of the grading containers run as the same de privileged user this actually has some unfortunate implications for us",
    "start": "2051040",
    "end": "2057280"
  },
  {
    "text": "in that one grading container could Fork too many times and impact the score of an alternate one",
    "start": "2057280",
    "end": "2064118"
  },
  {
    "text": "now the way you can handle it is by limiting the amount of Kernel memory on a per cgroup basis and this basically",
    "start": "2064119",
    "end": "2071960"
  },
  {
    "text": "will prevent a process from forking too many times because there won't be enough space in the process table in kernel",
    "start": "2071960",
    "end": "2077679"
  },
  {
    "text": "memory to continue forking and the fork will fail now unfortunately this works",
    "start": "2077679",
    "end": "2082760"
  },
  {
    "text": "pretty well but it still leaks a little bit of memory and so as a result we have a hard limit on the total amount of",
    "start": "2082760",
    "end": "2087960"
  },
  {
    "text": "execution time and this gives us a complete defense the final shared resource I'd",
    "start": "2087960",
    "end": "2094480"
  },
  {
    "start": "2093000",
    "end": "2093000"
  },
  {
    "text": "like to discuss is Network attacks now now there are a number of attacks that are possible if a submission has access",
    "start": "2094480",
    "end": "2100040"
  },
  {
    "text": "to the network in particular they could just be a Bitcoin miner that just tries to mine Bitcoin as much as possible on",
    "start": "2100040",
    "end": "2105440"
  },
  {
    "text": "our uh dime they could try and poke it uh AWS apis and and Amazon S3 which",
    "start": "2105440",
    "end": "2111680"
  },
  {
    "text": "would also be unfortunate and finally they could even take our grading instances and launch denial of service",
    "start": "2111680",
    "end": "2117920"
  },
  {
    "text": "attacks on corsera or even other thirdparty sites on the internet this was obviously not",
    "start": "2117920",
    "end": "2123920"
  },
  {
    "text": "appropriate so we the conclusion we came to is that we needed to deny all network access and this has the added benefit of",
    "start": "2123920",
    "end": "2130359"
  },
  {
    "text": "meaning that we can actually regrade assignments at a later Point without being beholden to particular services or",
    "start": "2130359",
    "end": "2136320"
  },
  {
    "text": "something being online at a particular time everything is contained within the container which is kind of nice now in",
    "start": "2136320",
    "end": "2142960"
  },
  {
    "text": "order to deny network access we had to modify the Amazon ECS agent it's not up",
    "start": "2142960",
    "end": "2148720"
  },
  {
    "start": "2143000",
    "end": "2143000"
  },
  {
    "text": "until this morning is not possible to specify the network mode and and disable",
    "start": "2148720",
    "end": "2154880"
  },
  {
    "text": "network access for container ERS launched by Amazon ECS we initially started Docker has a",
    "start": "2154880",
    "end": "2161400"
  },
  {
    "text": "number of ways of limiting network access in particular it has the network disabled flag which denies all uh",
    "start": "2161400",
    "end": "2167880"
  },
  {
    "text": "Network all access to the tcpip stack among other things this unfortunately is too restrictive for us for example we",
    "start": "2167880",
    "end": "2174440"
  },
  {
    "text": "have courses like a Ruby on Rails course or a web development course where they need to run a local web server to run",
    "start": "2174440",
    "end": "2180000"
  },
  {
    "text": "tests and to evaluate the submissions so this did not work for us this feature is also deprecated according to the docker",
    "start": "2180000",
    "end": "2186560"
  },
  {
    "text": "uh documentation so we wanted to move off of that uh in order to enable all the courses we need to support now",
    "start": "2186560",
    "end": "2192800"
  },
  {
    "text": "Docker has the D when you run Docker run it has the D- net is equal to and there are a number of potential Network modes",
    "start": "2192800",
    "end": "2199200"
  },
  {
    "text": "and the one that works for us is net is equal to none so what happens is Docker creates an independent Network stack for",
    "start": "2199200",
    "end": "2205560"
  },
  {
    "text": "each container and because it's not linked to the actual Network it's not bridged to",
    "start": "2205560",
    "end": "2211319"
  },
  {
    "text": "the host bridged mode is the default mode this allows us to get complete isolation in particular binding to Local",
    "start": "2211319",
    "end": "2217240"
  },
  {
    "text": "Host or e or the loop back device within each of the containers is totally separate and so the loop back device in",
    "start": "2217240",
    "end": "2224200"
  },
  {
    "text": "one container is separate from the loopb device in another container this gives us complete resource",
    "start": "2224200",
    "end": "2229480"
  },
  {
    "text": "isolation now I mentioned to do this we've had to Fork the Amazon ECS agent we have it available open source on",
    "start": "2229480",
    "end": "2234800"
  },
  {
    "text": "GitHub feel free to check it out or send us poll requests now I'd like to move on and",
    "start": "2234800",
    "end": "2240520"
  },
  {
    "text": "discuss the second category of attacks and that is we assume here that the Nam",
    "start": "2240520",
    "end": "2246280"
  },
  {
    "text": "space the container implementation has unknown vulnerabilities how do we defend",
    "start": "2246280",
    "end": "2251560"
  },
  {
    "text": "against that now containers are not the only security game in town with the Linux kernel in fact it's one of the",
    "start": "2251560",
    "end": "2257319"
  },
  {
    "text": "newest ones there have been many other older ones a good good oldie is discretionary Access Controller the",
    "start": "2257319",
    "end": "2263079"
  },
  {
    "text": "typical Unix file system permissions be sure to set those correctly but another one I wanted to talk about is there are",
    "start": "2263079",
    "end": "2269599"
  },
  {
    "text": "mandatory Access Control Systems built into the Linux kernel now there are a couple different variants of this app",
    "start": "2269599",
    "end": "2275000"
  },
  {
    "start": "2274000",
    "end": "2274000"
  },
  {
    "text": "armor and SE Linux and the one you should choose depends upon the Linux distribution you are using because we",
    "start": "2275000",
    "end": "2281359"
  },
  {
    "text": "use auntu app armor is our mandatory access control system of choice now up until this morning in",
    "start": "2281359",
    "end": "2288920"
  },
  {
    "text": "order to set an app armor profile or to set this the limits uh a particular container can do we had to modify the",
    "start": "2288920",
    "end": "2295440"
  },
  {
    "text": "Amazon Amazon ECS agent fortunately as of now if you would like to set a Mac uh",
    "start": "2295440",
    "end": "2301520"
  },
  {
    "text": "an app armor profile on your containers you can do this now without modifying the Amazon ECS",
    "start": "2301520",
    "end": "2308400"
  },
  {
    "text": "what does app armor allow us to do it allows us to deny access to key parts of the file system it allows us to audit",
    "start": "2308400",
    "end": "2314160"
  },
  {
    "text": "certain resources and even deny other capabilities so it's an extra great layer on top of the container",
    "start": "2314160",
    "end": "2321400"
  },
  {
    "text": "security now there's another security feature in Linux and that is uh poix capabilities and it used to be that",
    "start": "2321400",
    "end": "2329760"
  },
  {
    "text": "either you had root or you were a peon uh and you that was basically the only",
    "start": "2329760",
    "end": "2334960"
  },
  {
    "text": "differentiation uh capab abilities in the Linux allow you to disaggregate all the reasons why you might need root you",
    "start": "2334960",
    "end": "2340920"
  },
  {
    "text": "might need root to bind to a port below 1024 you might need root in order to change the owners of certain files",
    "start": "2340920",
    "end": "2347880"
  },
  {
    "text": "capabilities allow you to in a more fine grain fashion allocate what you can and can't do instead of it's just root or",
    "start": "2347880",
    "end": "2354800"
  },
  {
    "text": "not now we can actually drop capabilities within the containers so that even if you do get root within a",
    "start": "2354800",
    "end": "2361560"
  },
  {
    "text": "container you can't access certain capabilities that are dropped and so we're able to do this and this adds",
    "start": "2361560",
    "end": "2367200"
  },
  {
    "text": "another layer of Defense to limit the amount of nasty that a malicious submission can do finally we do our best to deny root",
    "start": "2367200",
    "end": "2374160"
  },
  {
    "text": "within the container and in order to discuss how we do that because we can't trust the base container OS",
    "start": "2374160",
    "end": "2379960"
  },
  {
    "text": "itself we need to actually uh in order to prevent root escalations within the",
    "start": "2379960",
    "end": "2385520"
  },
  {
    "start": "2381000",
    "end": "2381000"
  },
  {
    "text": "container we actually have to modify the instructor provided container images in",
    "start": "2385520",
    "end": "2391040"
  },
  {
    "text": "particular we pull apart the uploaded container images uh into the from the docker bundled uh format and we scan",
    "start": "2391040",
    "end": "2398240"
  },
  {
    "text": "through the file system and do a number of checks and make a number of changes in particular we clear the set uid bit",
    "start": "2398240",
    "end": "2403920"
  },
  {
    "text": "from all binaries this is the typical way that you escalate to root and if you just can't do that Within These grading",
    "start": "2403920",
    "end": "2409839"
  },
  {
    "text": "containers then that adds another major layer of security onto our grading platform we do a number of other checks",
    "start": "2409839",
    "end": "2416880"
  },
  {
    "text": "and one of them that we do is we insert a c wrapper that does uh a statically linked C binary that uh does a number of",
    "start": "2416880",
    "end": "2423480"
  },
  {
    "text": "additional Security checks at runtime when the containers are launched now in order to do this we needed a you",
    "start": "2423480",
    "end": "2429480"
  },
  {
    "text": "know job execution environment that worked in near real time and so as it turns out we had one of those with",
    "start": "2429480",
    "end": "2434920"
  },
  {
    "text": "Iguazu so our grid cluster is actually two Iguazu clusters one for the grading",
    "start": "2434920",
    "end": "2440280"
  },
  {
    "text": "cluster that runs everything in a very secured mode and one where we actually clean the uploaded Docker images before",
    "start": "2440280",
    "end": "2446599"
  },
  {
    "text": "registering them in the grading cluster now in order to pull apart reassemble and register the docker uh grading",
    "start": "2446599",
    "end": "2454319"
  },
  {
    "text": "images we actually run docker inside of Docker in order to do this we actually",
    "start": "2454319",
    "end": "2461119"
  },
  {
    "text": "have to run it's it's supported by Docker um mostly and uh in order to do this you have to run the container that",
    "start": "2461119",
    "end": "2468760"
  },
  {
    "text": "runs Docker inside of Docker with a privileged flag um and in order to do this we",
    "start": "2468760",
    "end": "2475400"
  },
  {
    "text": "actually had to modify the Amazon ECS agent again so we actually have two forks one is the secured grading fork",
    "start": "2475400",
    "end": "2480599"
  },
  {
    "text": "and one is our privileged mode Fork that allows us to run Docker and Docker now I've discussed a number of",
    "start": "2480599",
    "end": "2487000"
  },
  {
    "text": "attacks that allow us to secure things on a host level basis but it's important when you're really trying to do security",
    "start": "2487000",
    "end": "2493760"
  },
  {
    "text": "to have defense in depth or have multiple layers of security so we have an additional layer or a number of",
    "start": "2493760",
    "end": "2498920"
  },
  {
    "text": "additional layers of security at the network level so all of this runs with an Amazon VPC and this allows us to deny",
    "start": "2498920",
    "end": "2505319"
  },
  {
    "text": "public internet access to our grading machine so you just can't talk to the internet when you're on one of these grading",
    "start": "2505319",
    "end": "2511160"
  },
  {
    "text": "machines additionally we use amazon security groups to restrict network access inbound outbound traffic between",
    "start": "2511160",
    "end": "2517400"
  },
  {
    "text": "the instances and and and Elsewhere on the network and finally Amazon VPC allows us to turn on network flow logs",
    "start": "2517400",
    "end": "2523680"
  },
  {
    "text": "which allow us to see if there's any strange network activity going on within our cluster that we can then",
    "start": "2523680",
    "end": "2529200"
  },
  {
    "text": "investigate finally on top of all of this we run this all entirely in a separate AWS account and this gives us a",
    "start": "2529200",
    "end": "2536359"
  },
  {
    "text": "whole bunch of peace of mind that no matter what happens in this grading account the rest of our corsera learning platform should survive",
    "start": "2536359",
    "end": "2543440"
  },
  {
    "text": "unscathed finally what happens if someone does break out of the containers system escalates to root somehow and and",
    "start": "2543440",
    "end": "2549760"
  },
  {
    "text": "has taken over the Box well because everything runs in an autoscaling group we just go through and regularly",
    "start": "2549760",
    "end": "2555160"
  },
  {
    "text": "terminate all of the instances that have been running for a while so even if you do manage to break through all the layers of security you still only get",
    "start": "2555160",
    "end": "2561720"
  },
  {
    "text": "the instance for a couple hours before you're gone this is really nice a great piece",
    "start": "2561720",
    "end": "2567040"
  },
  {
    "text": "of mind now we have a number of other security measures that are important if",
    "start": "2567040",
    "end": "2572119"
  },
  {
    "start": "2569000",
    "end": "2569000"
  },
  {
    "text": "we're going to uh run something securely we need monitoring and auditing so we use cloud trail and a third party uh",
    "start": "2572119",
    "end": "2579200"
  },
  {
    "text": "security monitoring agent from threat stack that looks for any unusual activity on these instances files",
    "start": "2579200",
    "end": "2584480"
  },
  {
    "text": "changed processes running and most importantly because this is an entirely automated environment if there's anyone",
    "start": "2584480",
    "end": "2591000"
  },
  {
    "text": "who logs in if there's any TTY that's an immediate alert so how do we actually guarantee",
    "start": "2591000",
    "end": "2596520"
  },
  {
    "text": "that everything is secure that we haven't just uh pretended to be secure we pay a third-party red team synac to",
    "start": "2596520",
    "end": "2603559"
  },
  {
    "text": "try and penetrate this environment and so far so good now some of you may have noticed we",
    "start": "2603559",
    "end": "2609839"
  },
  {
    "text": "have a major problem and that is we've locked down these grading containers so much that we can't even get the score",
    "start": "2609839",
    "end": "2615760"
  },
  {
    "text": "out at the end after it runs it's a bit of a problem so the way",
    "start": "2615760",
    "end": "2621800"
  },
  {
    "text": "we actually solve this is we have a co-process that runs outside of the containers and mounts a shared file system and this shared file system is",
    "start": "2621800",
    "end": "2628160"
  },
  {
    "text": "used for communication so the grades are put on the shared file system and then shipped back to the rest of the corsera",
    "start": "2628160",
    "end": "2633800"
  },
  {
    "text": "learning platform and the other AWS account and persisted for uh display and analytics",
    "start": "2633800",
    "end": "2640640"
  },
  {
    "text": "purposes now this system has actually worked really really well for us we have thousands of assignments evaluated daily",
    "start": "2640640",
    "end": "2647280"
  },
  {
    "text": "we have um near 100 assignments on the platform and dozens of courses using this programming assignments",
    "start": "2647280",
    "end": "2652640"
  },
  {
    "text": "infrastructure but despite the success there are a number of improvements that we'd like to make in particular",
    "start": "2652640",
    "end": "2657960"
  },
  {
    "text": "sometimes instructors make mistakes in their graders and they need to regrade all previous submissions so we'd like to",
    "start": "2657960",
    "end": "2663440"
  },
  {
    "text": "add priority cues so we can use the same shared cluster without impacting new submissions as they come in we'd like to add better instructor",
    "start": "2663440",
    "end": "2670760"
  },
  {
    "text": "tooling and the second one that I'd like to talk about is that we'd like to have a more accurate simulation of our",
    "start": "2670760",
    "end": "2676559"
  },
  {
    "text": "production environment on their local machines and in in order to do that we can't simulate the AWS Network um",
    "start": "2676559",
    "end": "2683280"
  },
  {
    "text": "security layers but what we can do is we can open source our app armor profile so we may try and do that in the near",
    "start": "2683280",
    "end": "2689240"
  },
  {
    "text": "future finally I talked about that Cuda class but unfortunately we still don't have the capability of mapping the G CPU",
    "start": "2689240",
    "end": "2696280"
  },
  {
    "text": "devices into our grading containers so we're hoping to get that working soon now building this we've learned a",
    "start": "2696280",
    "end": "2703160"
  },
  {
    "start": "2701000",
    "end": "2701000"
  },
  {
    "text": "number of lessons not only should you always run the latest kernels and uh for the security patches and updates but as",
    "start": "2703160",
    "end": "2709839"
  },
  {
    "text": "it turns out there are a number of important usability and feature bug fixes that happen in the newer kernels",
    "start": "2709839",
    "end": "2715720"
  },
  {
    "text": "in fact butter FS can get so full you can't delete any files on it it gets wedged because it's a copy on right file",
    "start": "2715720",
    "end": "2722440"
  },
  {
    "text": "system the default most importantly the default BTU 1404 kernel is not new enough and it's still vulnerable to this",
    "start": "2722440",
    "end": "2729240"
  },
  {
    "text": "bug further it's important to carefully monitor dis usage in our typical online serving environment you add a bit of log",
    "start": "2729240",
    "end": "2735480"
  },
  {
    "text": "rotate and you Auto scale instances and you basically don't have to worry about dis at least in our in our case Docker",
    "start": "2735480",
    "end": "2741319"
  },
  {
    "text": "is not the same and it ends up using a lot more dis so you need to be have careful monitoring uh systems in",
    "start": "2741319",
    "end": "2748040"
  },
  {
    "text": "place additionally reliable deployment tooling is a must we found this in our online serving stack and it the same is",
    "start": "2748040",
    "end": "2753920"
  },
  {
    "text": "true for this environment by having everything reliable and automated we can reliably and with confidence push new",
    "start": "2753920",
    "end": "2759800"
  },
  {
    "text": "changes and security patches out to this cluster finally building a platform for",
    "start": "2759800",
    "end": "2765480"
  },
  {
    "text": "code execution is much harder than building an API in front of a database and so I'd like to give a big thank you",
    "start": "2765480",
    "end": "2770800"
  },
  {
    "text": "to all the engineers at AWS who are building the secure and reliable systems we've come to depend",
    "start": "2770800",
    "end": "2777359"
  },
  {
    "text": "upon now I'm almost done we have a couple of related sessions we have uh also from corsera tomorrow you can learn",
    "start": "2777359",
    "end": "2784359"
  },
  {
    "start": "2778000",
    "end": "2778000"
  },
  {
    "text": "about how we power our learning analytics and our instructor dashboards and actually in the next session the",
    "start": "2784359",
    "end": "2789960"
  },
  {
    "text": "next time slot uh there's Amazon ec2 container service distributed applications at scale and I hear that's",
    "start": "2789960",
    "end": "2795040"
  },
  {
    "text": "supposed to be good now if anything of what we've talked about today sounds interesting to you please know that Corsair is always",
    "start": "2795040",
    "end": "2801599"
  },
  {
    "text": "hiring uh phenomenal Engineers developers and uh designers and managers and please uh you know reach out to us",
    "start": "2801599",
    "end": "2808200"
  },
  {
    "text": "if you'd like to join the team and also follow our Tech blog uh where you can learn about some of the stuff that we're up to so thank you all very much for",
    "start": "2808200",
    "end": "2814800"
  },
  {
    "text": "attending",
    "start": "2814800",
    "end": "2817800"
  }
]