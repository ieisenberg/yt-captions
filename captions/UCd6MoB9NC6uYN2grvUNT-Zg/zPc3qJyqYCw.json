[
  {
    "start": "0",
    "end": "78000"
  },
  {
    "text": "okay hello my name is Matt McMullen I'm your host today I just want to run",
    "start": "3049",
    "end": "8400"
  },
  {
    "text": "through some housekeeping items the emergency exits are out the doors and to",
    "start": "8400",
    "end": "13530"
  },
  {
    "text": "your right the bathrooms are out the door and to your left you should find them on the left hand side just a reminder to please",
    "start": "13530",
    "end": "20369"
  },
  {
    "text": "submit your feedback on the sessions in the app please put your devices on on",
    "start": "20369",
    "end": "26849"
  },
  {
    "text": "silent and a reminder that all sessions are recorded and will be available after the event so for this session building a",
    "start": "26849",
    "end": "35309"
  },
  {
    "text": "critical communications platform using serverless technologies please welcome your presenters at Doug Gardner and Mack",
    "start": "35309",
    "end": "41190"
  },
  {
    "text": "Stevens okay welcome everyone and good",
    "start": "41190",
    "end": "50940"
  },
  {
    "text": "afternoon so today we're gonna be talking about lips let me go back we're",
    "start": "50940",
    "end": "56250"
  },
  {
    "text": "gonna be talking about building a critical communications platform using serverless technologies so essentially what that means is we have a customer",
    "start": "56250",
    "end": "63390"
  },
  {
    "text": "spoke who worked to build this platform using just serverless went from a journey essentially from a monolithic",
    "start": "63390",
    "end": "69810"
  },
  {
    "text": "application to service we're gonna go through some optimization strategies on how you want to do that and then we're",
    "start": "69810",
    "end": "75330"
  },
  {
    "text": "gonna go through some some lessons learned so just a couple of quick items",
    "start": "75330",
    "end": "80520"
  },
  {
    "start": "78000",
    "end": "127000"
  },
  {
    "text": "there are two sessions that are kind of related in the service track one is to infinity and beyond",
    "start": "80520",
    "end": "85740"
  },
  {
    "text": "so they're talking about what's new with serverless and the other one is built and delivered in six months using",
    "start": "85740",
    "end": "91439"
  },
  {
    "text": "serverless technical patterns and micro services so two other good sessions to check out if you can't check them out",
    "start": "91439",
    "end": "96869"
  },
  {
    "text": "here I encourage you to watch the recaps afterwards so quick agenda we're gonna",
    "start": "96869",
    "end": "103140"
  },
  {
    "text": "do a serverless review I won't spend too much time on this this will be just five minutes review of what serverless is",
    "start": "103140",
    "end": "108540"
  },
  {
    "text": "then I'm going to talk about some lambda best practices and optimizations from",
    "start": "108540",
    "end": "113729"
  },
  {
    "text": "there we're going to introduce Mac from spoke and he's going to talk about the journey to going 100% service as well as",
    "start": "113729",
    "end": "120329"
  },
  {
    "text": "a server list orchestration deep dive and then some of the lessons learned and gotchas along the way so a little bit of",
    "start": "120329",
    "end": "128819"
  },
  {
    "start": "127000",
    "end": "315000"
  },
  {
    "text": "review here so what server list is it allows you to get closer to that efficiency curve so instead of provisioning provisioning",
    "start": "128819",
    "end": "135360"
  },
  {
    "text": "let's say an ec2 instance or you know a machine that you have to have running all the time and that's kind of sitting",
    "start": "135360",
    "end": "141030"
  },
  {
    "text": "idly you don't need to do that right you can just spin up what you need when you need it and this is really good this is",
    "start": "141030",
    "end": "147120"
  },
  {
    "text": "the best way to get closer to to paying for what you use and for paying what you consume as opposed to you know spinning",
    "start": "147120",
    "end": "153810"
  },
  {
    "text": "up these these machines that may sit 60% 70% or higher idle throughout the day",
    "start": "153810",
    "end": "159450"
  },
  {
    "text": "and you're sort of paying for those CPU cycles and you're consuming them without actually benefiting from them again",
    "start": "159450",
    "end": "166769"
  },
  {
    "text": "there's automatic scaling built into server lists so in terms of previously you'd have to build out your own scaling",
    "start": "166769",
    "end": "173100"
  },
  {
    "text": "mechanisms you'd have to make sure that you're planning accordingly such that when you receive bursts of traffic or",
    "start": "173100",
    "end": "178260"
  },
  {
    "text": "new traffic you have to scale accordingly but using serverless technologies that that sort of automatic",
    "start": "178260",
    "end": "183810"
  },
  {
    "text": "scaling is built in and it's a really good way of getting again closer to matching that demand and matching that",
    "start": "183810",
    "end": "189900"
  },
  {
    "text": "efficiency curve and then lastly it's highly available and secure so again traditionally you would have to build",
    "start": "189900",
    "end": "195540"
  },
  {
    "text": "your applications to leverage some of the high availability best practices which is still a good thing to do but",
    "start": "195540",
    "end": "201299"
  },
  {
    "text": "here a lot of that high availability is built in it leverages multiple availability zones and it's secure and",
    "start": "201299",
    "end": "206790"
  },
  {
    "text": "you would get to inherit all of those controls as you build out your applications so just a kind of a",
    "start": "206790",
    "end": "214920"
  },
  {
    "text": "covering of some of the server lists capability services that we have things in the integration layer things like API",
    "start": "214920",
    "end": "221459"
  },
  {
    "text": "gateway kognito sqs or the simple queue service these are great ways to leverage",
    "start": "221459",
    "end": "227459"
  },
  {
    "text": "compute leverage you know integration services without actually spinning up",
    "start": "227459",
    "end": "232650"
  },
  {
    "text": "servers to host these things data stores so s3 if you need objects store and you need to just take sort of a catch-all to",
    "start": "232650",
    "end": "239310"
  },
  {
    "text": "place all of your objects s3 is a great way to do that Aurora server list if you have a use case that warrants the",
    "start": "239310",
    "end": "245760"
  },
  {
    "text": "traditional sort of relational database and you need to have that you can still do that in a server this way using",
    "start": "245760",
    "end": "251209"
  },
  {
    "text": "Aurora server list and then dynamodb so this is a no sequel server list capability if you need really just need",
    "start": "251209",
    "end": "258090"
  },
  {
    "text": "a key value store right I just need a place to put my keys and values this is a distributed key-value store that",
    "start": "258090",
    "end": "263610"
  },
  {
    "text": "allows you to do that and Mac is going to go into some of the best just as and deep dives on what they learned us they went through that",
    "start": "263610",
    "end": "269980"
  },
  {
    "text": "journey then at the top layer we have our to compute services so lambda and",
    "start": "269980",
    "end": "275650"
  },
  {
    "text": "Fargate today we're gonna focus on optimization strategies for lambda as",
    "start": "275650",
    "end": "280810"
  },
  {
    "text": "you can imagine when you're building a critical communications platform latency means everything it means a lot and if",
    "start": "280810",
    "end": "287350"
  },
  {
    "text": "you have seconds you know of latency that's those seconds of overhead are really negative in terms of impacting",
    "start": "287350",
    "end": "294340"
  },
  {
    "text": "your overall experience and the critical communications that need to be delivered in a time-sensitive manner so we're",
    "start": "294340",
    "end": "300250"
  },
  {
    "text": "going to talk about some of the optimization strategies that you would use on lambda to really make that",
    "start": "300250",
    "end": "305260"
  },
  {
    "text": "latency get as small as possible so that you don't have these these you know",
    "start": "305260",
    "end": "310270"
  },
  {
    "text": "hiccups and in delivering your your messages so from a development",
    "start": "310270",
    "end": "317320"
  },
  {
    "start": "315000",
    "end": "396000"
  },
  {
    "text": "standpoint LEM does a lot of things it makes its it's easily accessible for developers it supports all runtimes we",
    "start": "317320",
    "end": "323680"
  },
  {
    "text": "have a lot of these runtimes out of the box things like Java node Python all out of the box you go other",
    "start": "323680",
    "end": "331480"
  },
  {
    "text": "languages its ISO PCI HIPAA sock gdpr and FedRAMP compliance out of the box so",
    "start": "331480",
    "end": "337930"
  },
  {
    "text": "it's you can inherit all those controls as you're building out your compute your server lists compute as you're building",
    "start": "337930",
    "end": "343660"
  },
  {
    "text": "out your application space in lambda it allows for greater productivity so there's toolkits already available for",
    "start": "343660",
    "end": "350080"
  },
  {
    "text": "some of the popular IDE so if you use vs code or IntelliJ or pycharm you can use and leverage those toolkits that",
    "start": "350080",
    "end": "356470"
  },
  {
    "text": "integrate with existing IDE s and it's a simplified development deployment environment with these applications in",
    "start": "356470",
    "end": "362710"
  },
  {
    "text": "IVs and then lastly there's new application patterns and these will continue to iterate we support up to",
    "start": "362710",
    "end": "368410"
  },
  {
    "text": "15-minute functions for running in lambda you can use sqs for lambda load",
    "start": "368410",
    "end": "373630"
  },
  {
    "text": "that automatic load balancing and then support for Kinesis data streams enhanced with the fan-out approach so",
    "start": "373630",
    "end": "379180"
  },
  {
    "text": "these are come that some of the new patterns and I'll talk about some other new initiatives and other things we have",
    "start": "379180",
    "end": "384310"
  },
  {
    "text": "going on but essentially you can think about this as a really easy way to get going get started but still scale and",
    "start": "384310",
    "end": "390850"
  },
  {
    "text": "and continue to iterate as we add more capability so again going back to this",
    "start": "390850",
    "end": "398710"
  },
  {
    "start": "396000",
    "end": "422000"
  },
  {
    "text": "this idea of optimizations and best practices if we think back to the critical communications platform the idea is you",
    "start": "398710",
    "end": "405880"
  },
  {
    "text": "have to get these messages deliver you have to push them forward and what you might think is I should have a",
    "start": "405880",
    "end": "410950"
  },
  {
    "text": "capability capability sitting idly waiting to deliver the message and that's gonna be you know the most",
    "start": "410950",
    "end": "416560"
  },
  {
    "text": "efficient way but you don't need to do that you don't need to be sort of that wasteful when you're thinking about delivering these messages so let's go",
    "start": "416560",
    "end": "422710"
  },
  {
    "start": "422000",
    "end": "511000"
  },
  {
    "text": "through what an actual occurrence of the lambda lifecycle is so it's to start you have to launch a container so these",
    "start": "422710",
    "end": "429250"
  },
  {
    "text": "lambda functions these this code that you you've written it's going to launch inside of a container that needs to be",
    "start": "429250",
    "end": "435040"
  },
  {
    "text": "executed so that's going to go through a bootstrapping process in that bootstrapping process you can think",
    "start": "435040",
    "end": "440290"
  },
  {
    "text": "about all of the initialization that you would normally need to do in your traditional application still needs to",
    "start": "440290",
    "end": "445690"
  },
  {
    "text": "happen here but you're trying to make sure that bootstrapping is as lightweight as possible and is accelerated as possible so that it's",
    "start": "445690",
    "end": "451720"
  },
  {
    "text": "it's you know delivered to your messages get delivered as quickly as they can then it goes through the execution phase",
    "start": "451720",
    "end": "458380"
  },
  {
    "text": "so this is where your business logic actually actually gets executed this is like the core of the function and so all",
    "start": "458380",
    "end": "464350"
  },
  {
    "text": "of the other stuff about that you can think of as overhead and that's what you need to minimize to get to that business",
    "start": "464350",
    "end": "469720"
  },
  {
    "text": "logic to execute that business logic from there once it's executed it's completed the message has been sent the",
    "start": "469720",
    "end": "476110"
  },
  {
    "text": "you know whatever operation in your lambda function whatever business logic you put in there has been delivered and",
    "start": "476110",
    "end": "481330"
  },
  {
    "text": "so then it goes into sort of a waiting period right it goes into a free State and then when you need to bring that",
    "start": "481330",
    "end": "487120"
  },
  {
    "text": "back in when in an event or a trigger criteria comes in to spawn that new lambda function it has to be thawed out",
    "start": "487120",
    "end": "493990"
  },
  {
    "text": "of that and so once it's thawed then it goes back in and has to bootstrap and do all of that good stuff so again the",
    "start": "493990",
    "end": "499870"
  },
  {
    "text": "execution part you can see here is a really small piece of this lifecycle and so we have to minimize all of the other",
    "start": "499870",
    "end": "505570"
  },
  {
    "text": "surrounding pieces in order to just focus on making sure our execution happens as quickly as possible",
    "start": "505570",
    "end": "511710"
  },
  {
    "start": "511000",
    "end": "688000"
  },
  {
    "text": "so there's this this idea what I've been describing so far is this idea of a cold start and so what a cold start is is you",
    "start": "511710",
    "end": "519070"
  },
  {
    "text": "can see it downloads your code and then starts the container and then has to bootstrap and then finally launches the",
    "start": "519070",
    "end": "524770"
  },
  {
    "text": "code so there's a lot of optimization that we're going to talk about to optimize the the cold start sort of",
    "start": "524770",
    "end": "530380"
  },
  {
    "text": "penalty if you will and that way you can get to executing your function more quickly so",
    "start": "530380",
    "end": "536040"
  },
  {
    "text": "for instance when you're when you're you know loading these these libraries these dependencies traditionally when you load",
    "start": "536040",
    "end": "542910"
  },
  {
    "text": "let's say a you know an application you load the dependencies at runtime and it's not that big of a deal if I wait",
    "start": "542910",
    "end": "548850"
  },
  {
    "text": "two minutes five minutes if I even wait 20 minutes for my application to start in the grand scheme of things twenty",
    "start": "548850",
    "end": "555000"
  },
  {
    "text": "minutes is not that big of a hit because I'm gonna have this long-running application that may be running for months on end and I took a 20 minute",
    "start": "555000",
    "end": "562170"
  },
  {
    "text": "overhead it's not gonna hurt that much it's not a big deal so I don't have to really optimize that area but when you",
    "start": "562170",
    "end": "568200"
  },
  {
    "text": "think of lambda to learn in order to get to the function execution if you waited 20 minutes or even waited even seconds",
    "start": "568200",
    "end": "574560"
  },
  {
    "text": "in a critical communications platform it's not gonna work right so you can't just afford to do a lot of those well",
    "start": "574560",
    "end": "580260"
  },
  {
    "text": "I'll just load it at runtime or throw in and sort of not really care about my dependencies and not not really focus on",
    "start": "580260",
    "end": "586050"
  },
  {
    "text": "dependency management because I don't care about this initial overhead now you really are hyper focused on that initial",
    "start": "586050",
    "end": "592650"
  },
  {
    "text": "overhead and matters so much that you don't want to sort of do some of those traditional things that you do so",
    "start": "592650",
    "end": "598350"
  },
  {
    "text": "instead of dumping libraries in dumping dependencies in be really conscious and",
    "start": "598350",
    "end": "603420"
  },
  {
    "text": "really focused about what you're actually loading and then be conscious about what is dynamically loaded at runtime so instead of saying oh this is",
    "start": "603420",
    "end": "610590"
  },
  {
    "text": "something that you know I'll just pull in at runtime I'll go out and grab this library you know if you did something",
    "start": "610590",
    "end": "615780"
  },
  {
    "text": "really heavy weight like reach out to a dependency API pull down the library loaded that in all that overhead you're",
    "start": "615780",
    "end": "622110"
  },
  {
    "text": "gonna have to hit each time you execute that that sort of cold start and so the idea is don't you know pull that in it's",
    "start": "622110",
    "end": "629010"
  },
  {
    "text": "okay to bundle that in bring that closer together and make sure that you don't have these external dependencies so that",
    "start": "629010",
    "end": "634200"
  },
  {
    "text": "you have as most the most control then you can have before launching this container",
    "start": "634200",
    "end": "639930"
  },
  {
    "text": "one other thing to think about in the cold start is the idea that with VP sees you have to access your resource in a V",
    "start": "639930",
    "end": "647310"
  },
  {
    "text": "PC so there's this other layer if you're having a V PC dependency like I need to access my services hosted in my V PC I",
    "start": "647310",
    "end": "654360"
  },
  {
    "text": "have to attach a networking interface an E and I to get to that V PC so again yet",
    "start": "654360",
    "end": "659970"
  },
  {
    "text": "another piece of overhead that's involved in this this life cycle and so",
    "start": "659970",
    "end": "665160"
  },
  {
    "text": "that's that's something that's sort of unavoidable you have to be able to get into the VPC so I need an Eni again if it's not a",
    "start": "665160",
    "end": "671450"
  },
  {
    "text": "cold start if you can leverage an existing container that you had just recently run it's not gonna hurt that",
    "start": "671450",
    "end": "677420"
  },
  {
    "text": "much but you don't want it to be something where you know you haven't run this function in a while and now you have to go out attach an e and I and",
    "start": "677420",
    "end": "683630"
  },
  {
    "text": "then get into your V PC it's just another layer so the on that note specifically we have some updates so",
    "start": "683630",
    "end": "691210"
  },
  {
    "start": "688000",
    "end": "737000"
  },
  {
    "text": "traditionally what it was was there's a local map that you know you would have for your lambda function and that would",
    "start": "691210",
    "end": "696800"
  },
  {
    "text": "attached the eni to the V PC and it was unavoidable this is just how you access your resources in the V PC so this is",
    "start": "696800",
    "end": "704630"
  },
  {
    "text": "something that you know we've had traditionally and it works but again the cold start is there and you can feel it",
    "start": "704630",
    "end": "709730"
  },
  {
    "text": "so moving forward we're gonna have this concept of essentially a remote map that you can pull from and it's it's warm",
    "start": "709730",
    "end": "716180"
  },
  {
    "text": "it's living it's a live eni that you can bring in and attach to the function so",
    "start": "716180",
    "end": "721880"
  },
  {
    "text": "this is just something this is an optimization on the AWS side that you'll notice as as you are accessing resources",
    "start": "721880",
    "end": "728660"
  },
  {
    "text": "within your B PC they should get faster and faster because they're leveraging this new way of attaching the eni behind",
    "start": "728660",
    "end": "735590"
  },
  {
    "text": "the scenes what this allows for is faster scaling right getting getting",
    "start": "735590",
    "end": "740870"
  },
  {
    "text": "those resources definitely lower latency because that E and I sort of provisioned already and waiting to be attached to a",
    "start": "740870",
    "end": "746750"
  },
  {
    "text": "lambda function I'm just easier to use overall so you can try to minimize all of the complexities you were doing before to",
    "start": "746750",
    "end": "753880"
  },
  {
    "text": "optimize that eni attachment now it should be a lot easier for you to just attach that and move forward and access",
    "start": "753880",
    "end": "760370"
  },
  {
    "text": "your resources within a V PC so this is for specifically for a V PC if you had resources like attaching not or just",
    "start": "760370",
    "end": "769160"
  },
  {
    "text": "accessing a DynamoDB or a dynamo table you wouldn't need to do this because those resources aren't living within the",
    "start": "769160",
    "end": "775430"
  },
  {
    "text": "V PC so just from a focus standpoint this is for optimizations for accessing",
    "start": "775430",
    "end": "780589"
  },
  {
    "text": "your what if they you have a database in a V PC or something similar so function",
    "start": "780589",
    "end": "787550"
  },
  {
    "start": "785000",
    "end": "895000"
  },
  {
    "text": "runtime so again choose your dependencies and frameworks very carefully so as you're going through it",
    "start": "787550",
    "end": "793100"
  },
  {
    "text": "there are ways to optimize all runtimes right whether using java.net whether",
    "start": "793100",
    "end": "798230"
  },
  {
    "text": "you're using you know go or Python it doesn't matter you can optimize all of them but the key",
    "start": "798230",
    "end": "804449"
  },
  {
    "text": "to remember here is that you want to be very conscious about what you're doing with those so that JVM startup is",
    "start": "804449",
    "end": "810389"
  },
  {
    "text": "something you're gonna have to look at and think through so you're gonna want to use paradigm so for instance using a",
    "start": "810389",
    "end": "816209"
  },
  {
    "text": "singleton design paradigm where you're instantiating you know an object once and then you're leveraging that existing",
    "start": "816209",
    "end": "822509"
  },
  {
    "text": "object rather than recreating it each time is a really good way of leveraging an existing sort of either connection or",
    "start": "822509",
    "end": "830299"
  },
  {
    "text": "initialization point without an reinitializing interpreted languages in general are much quicker but they're not",
    "start": "830299",
    "end": "836999"
  },
  {
    "text": "necessarily faster overall so it's you know there are ways to optimize your traditional functions if you have a Java",
    "start": "836999",
    "end": "843600"
  },
  {
    "text": "heavy application or a dotnet heavy application you can certainly optimize those it's just again thinking back to",
    "start": "843600",
    "end": "850259"
  },
  {
    "text": "those dependency frameworks dependency injection how that's done and what's done at runtime and how dynamic that is",
    "start": "850259",
    "end": "857160"
  },
  {
    "text": "if it's heavy and dynamic and requires a lot of CPU at initialization time that's gonna translate into a longer cold start",
    "start": "857160",
    "end": "865009"
  },
  {
    "text": "and then a good best practice is just to separate the business logic from the lambda Handler and this is goes along",
    "start": "865009",
    "end": "870660"
  },
  {
    "text": "with sort of a theme your business logic in that execution lifecycle is what you're really trying to focus on and",
    "start": "870660",
    "end": "876119"
  },
  {
    "text": "really try to get to so you want to get to that as quickly as possible and the lambda handler you put external from",
    "start": "876119",
    "end": "881999"
  },
  {
    "text": "that so you're not bundling that piece together so the lambda handler is something you'd sort of initialize",
    "start": "881999",
    "end": "887579"
  },
  {
    "text": "outside of the function and then your business logic your core business logic you'd put into the actual application",
    "start": "887579",
    "end": "893459"
  },
  {
    "text": "function so to see one thing in terms of container we use use that global scope",
    "start": "893459",
    "end": "901559"
  },
  {
    "start": "895000",
    "end": "959000"
  },
  {
    "text": "wisely so for functions that you've recently called with out of EPC they'll",
    "start": "901559",
    "end": "906600"
  },
  {
    "text": "stay warm for roughly five minutes within a V PC if you have sort of the",
    "start": "906600",
    "end": "911639"
  },
  {
    "text": "eni attached that would be 15 minutes and then again don't load it if you don't need it right so if you have",
    "start": "911639",
    "end": "917850"
  },
  {
    "text": "something that is gonna be necessary great use it build it out and make sure",
    "start": "917850",
    "end": "924600"
  },
  {
    "text": "it's leveraged but don't load all the next the extraneous pieces where in the past that wasn't that big of a hit now",
    "start": "924600",
    "end": "931889"
  },
  {
    "text": "it's a sort of a big penalty so just be really efficient about what you're loading in and then just to see an example of that",
    "start": "931889",
    "end": "938410"
  },
  {
    "text": "separating the business logic from the function signor signature you have the application logic the business logic",
    "start": "938410",
    "end": "944680"
  },
  {
    "text": "external and then you want to have the handler you know that separate from that",
    "start": "944680",
    "end": "950530"
  },
  {
    "text": "business logic this is a really good way to keep your business the emphasis on your business logic and focus on getting",
    "start": "950530",
    "end": "956740"
  },
  {
    "text": "to that as quickly as possible so an example of tuning these right so after",
    "start": "956740",
    "end": "962980"
  },
  {
    "start": "959000",
    "end": "1065000"
  },
  {
    "text": "you've built that out and you've gotten really good and really confident about what you've put into your lambda function what you've loaded beforehand",
    "start": "962980",
    "end": "969370"
  },
  {
    "text": "you want to tweak it and the control that you're gonna get is a memory control in lambda so before if you let's",
    "start": "969370",
    "end": "975970"
  },
  {
    "text": "say you know that this workload is CPU bound or you know it's Network bound you're still gonna want to tweak that",
    "start": "975970",
    "end": "981100"
  },
  {
    "text": "memory because by tweaking the memory you'll get additional CPU and get additional networking but the only",
    "start": "981100",
    "end": "987610"
  },
  {
    "text": "control that you have is that memory control so John you know in even if your",
    "start": "987610",
    "end": "993100"
  },
  {
    "text": "function is like oh I don't need much memory for this it's a you know a CPU bound workload that's okay tweak that",
    "start": "993100",
    "end": "999370"
  },
  {
    "text": "memory and you'll still get in better performance out of the CPU because you get better CPU as you tune that memory",
    "start": "999370",
    "end": "1006060"
  },
  {
    "text": "up so an example of this let's say that you have a lambda function that's going",
    "start": "1006060",
    "end": "1011400"
  },
  {
    "text": "to calculate all prime numbers less than or equal to a million and you're gonna run a thousand iterations of this if you",
    "start": "1011400",
    "end": "1018120"
  },
  {
    "text": "do that and you use let's say 128 megabyte memory setting it's gonna take",
    "start": "1018120",
    "end": "1023360"
  },
  {
    "text": "eleven point seven seconds and for a thousand iterations you know two point four six cents which is cheap but it's",
    "start": "1023360",
    "end": "1031740"
  },
  {
    "text": "gonna take a long time to run right so if I dialed that up to 256 megabytes I'm",
    "start": "1031740",
    "end": "1037380"
  },
  {
    "text": "looking at you know sick half that time roughly for not much additional cost a little bit of additional cost but not",
    "start": "1037380",
    "end": "1042810"
  },
  {
    "text": "much if I go up to 512 I'm again bringing that CPU and bringing the time",
    "start": "1042810",
    "end": "1048209"
  },
  {
    "text": "down to calculate those prime numbers with again a little bit of additional cost but not as bad as actually the 256",
    "start": "1048210",
    "end": "1054570"
  },
  {
    "text": "and then if I go up to a thousand twenty four I can see that the cost is down to",
    "start": "1054570",
    "end": "1059640"
  },
  {
    "text": "or the time is down to roughly one point four seven seconds and actually it's",
    "start": "1059640",
    "end": "1065700"
  },
  {
    "text": "only you know a fraction of a penny more right so the idea here is that I tune",
    "start": "1065700",
    "end": "1071190"
  },
  {
    "text": "that up and there wasn't strict guidance on you know which one was gonna perform best which one was gonna cost the most",
    "start": "1071190",
    "end": "1077610"
  },
  {
    "text": "so there's a there's an analysis that you're gonna do and this is something you're gonna want to do after you optimize fully right because if you",
    "start": "1077610",
    "end": "1084870"
  },
  {
    "text": "tweak this and then you take out a bunch of dependencies you're gonna have to retweet it so the order of operations",
    "start": "1084870",
    "end": "1090810"
  },
  {
    "text": "should be tweaked you're you're sort of build out your dependency structure how",
    "start": "1090810",
    "end": "1096000"
  },
  {
    "text": "you like it and then move forward with tweaking the memory allocation and you can this one would be a CPU bound",
    "start": "1096000",
    "end": "1101970"
  },
  {
    "text": "workload to calculate those prime numbers but by adding more memory you're gonna get more CPU so some other best",
    "start": "1101970",
    "end": "1110430"
  },
  {
    "start": "1108000",
    "end": "1263000"
  },
  {
    "text": "practices know the limits and concurrency behavior if you're doing a if you're building out a lot of lambda",
    "start": "1110430",
    "end": "1117180"
  },
  {
    "text": "functions and you're getting ready to deploy to production you want to make sure that you know where those limits are and then you stress tested the",
    "start": "1117180",
    "end": "1123000"
  },
  {
    "text": "environment this is a really good way to make sure you're staying in front of anything that's gonna come along when",
    "start": "1123000",
    "end": "1128640"
  },
  {
    "text": "you build out your serverless application because if you have you know a lot of onboarding or a lot of",
    "start": "1128640",
    "end": "1134790"
  },
  {
    "text": "environments you're gonna switch over they need you need to know when you're gonna reach those limits and make sure that you're either increasing those",
    "start": "1134790",
    "end": "1141270"
  },
  {
    "text": "limits or finding a way to avoid hitting those ceilings again minimize the",
    "start": "1141270",
    "end": "1146970"
  },
  {
    "text": "package size is key this is not only due to the dependencies and the extraneous dependencies but also just the fact that",
    "start": "1146970",
    "end": "1153570"
  },
  {
    "text": "you have to download that's it right so whatever you can do to make that smaller just going to limit that initialization",
    "start": "1153570",
    "end": "1160200"
  },
  {
    "text": "penalty you have to hit avoid using recursive code so this is where I would",
    "start": "1160200",
    "end": "1165690"
  },
  {
    "text": "go back and call that lambda over and over again that's not again that's something if you had a traditional",
    "start": "1165690",
    "end": "1170940"
  },
  {
    "text": "application that's okay to do but in this world where you have that overhead and that overhead matters so much you're",
    "start": "1170940",
    "end": "1177060"
  },
  {
    "text": "essentially extrapolating that overhead many times so you're bringing that overhead out by using recursion so you",
    "start": "1177060",
    "end": "1183270"
  },
  {
    "text": "know you if you need to use something like that think about different ways of leveraging that and either a single lambda or lambda like step functions and",
    "start": "1183270",
    "end": "1190860"
  },
  {
    "text": "layers that we'll talk about definitely use environment variables to to modify your operation of what",
    "start": "1190860",
    "end": "1197310"
  },
  {
    "text": "behavior so the environment variables give you a way to parameterize and add arguments without having tons and tons of lambda",
    "start": "1197310",
    "end": "1204200"
  },
  {
    "text": "functions that you're storing for different things so lambda functions should be very purpose-built but it's okay to parameterize if they're",
    "start": "1204200",
    "end": "1210740"
  },
  {
    "text": "use you know in several places throughout that application self-contained dependencies for sure so",
    "start": "1210740",
    "end": "1217340"
  },
  {
    "text": "rather than again reaching out to an external dependency structure to put yourself in grabbing that dependency at",
    "start": "1217340",
    "end": "1224029"
  },
  {
    "text": "launch time or at load time you want to bundle that together so that you can be very predictive and very consistent and",
    "start": "1224029",
    "end": "1230269"
  },
  {
    "text": "constant on that initialization time delete large unused functions so there is a seventy-five gigabyte limit which",
    "start": "1230269",
    "end": "1236840"
  },
  {
    "text": "is very high but you you want to make sure that you're not just storing a bunch of unused functions that aren't",
    "start": "1236840",
    "end": "1242330"
  },
  {
    "text": "sitting there it's more efficient to have smaller a smaller footprint and",
    "start": "1242330",
    "end": "1247700"
  },
  {
    "text": "then we'll talk about this but consider using layers and so what layers allows you to do is leverage some existing",
    "start": "1247700",
    "end": "1254419"
  },
  {
    "text": "libraries and things that you need in dependencies that you'll need without having to do a lot of copying paste or",
    "start": "1254419",
    "end": "1259880"
  },
  {
    "text": "you know a lot of the same function call over and over again so layers not",
    "start": "1259880",
    "end": "1265909"
  },
  {
    "start": "1263000",
    "end": "1306000"
  },
  {
    "text": "necessarily from a performance standpoint but just from a development standpoint allow you to really leverage",
    "start": "1265909",
    "end": "1272120"
  },
  {
    "text": "existing libraries and existing other methods and functions that you know",
    "start": "1272120",
    "end": "1277279"
  },
  {
    "text": "other developers have built and so you can essentially promote these these layers and it lets you separate and",
    "start": "1277279",
    "end": "1284659"
  },
  {
    "text": "iterate faster on writing the business logic also you can share these layers so",
    "start": "1284659",
    "end": "1290000"
  },
  {
    "text": "you can share them within your own AWS account you can share them with your AWS organization or you can share them",
    "start": "1290000",
    "end": "1296630"
  },
  {
    "text": "publicly and this is where things like you know some of the runtimes that are available you will be shared publicly",
    "start": "1296630",
    "end": "1303049"
  },
  {
    "text": "and you can go consume those runtimes so using lambda layer so you'd want to put",
    "start": "1303049",
    "end": "1309980"
  },
  {
    "start": "1306000",
    "end": "1366000"
  },
  {
    "text": "the common components in a zip and then upload it as a layer once you do that",
    "start": "1309980",
    "end": "1315049"
  },
  {
    "text": "these are immutable and they can be versioned if you need to add updates but there are mutable pieces of for your",
    "start": "1315049",
    "end": "1321590"
  },
  {
    "text": "architecture so the reason for that is if you have lots of functions and they're depending on these layers and",
    "start": "1321590",
    "end": "1327649"
  },
  {
    "text": "you go out and change those layers that's okay but those functions may need to leverage the previous version of the",
    "start": "1327649",
    "end": "1334010"
  },
  {
    "text": "to stay compatible they can do that and if you actually delete the the layer that the functions that are referencing",
    "start": "1334010",
    "end": "1341330"
  },
  {
    "text": "that will continue to work but you won't be able to create new lambda functions that let that reference those deleted",
    "start": "1341330",
    "end": "1347540"
  },
  {
    "text": "layers so it's a good way of it'll still sort of continue to support your application that you've built out but as",
    "start": "1347540",
    "end": "1354110"
  },
  {
    "text": "your versioning these and as you're building more you want to make sure that you stays up to date with your functions as possible you can reference up to five",
    "start": "1354110",
    "end": "1361040"
  },
  {
    "text": "of these layers and one of those can be optionally be this runtime that we're describing so for the runtime",
    "start": "1361040",
    "end": "1367400"
  },
  {
    "start": "1366000",
    "end": "1411000"
  },
  {
    "text": "perspective you can bring any Linux compatible language runtime and examine a great example of this is the support",
    "start": "1367400",
    "end": "1374000"
  },
  {
    "text": "for Ruby so it leverages if you need to use if you want to use Ruby you can totally do that you would basically use",
    "start": "1374000",
    "end": "1379730"
  },
  {
    "text": "the the Ruby runtime API and that's going to be you know done as a layer in",
    "start": "1379730",
    "end": "1385100"
  },
  {
    "text": "the lambda function other things like Erlang or other runtimes are also",
    "start": "1385100",
    "end": "1390169"
  },
  {
    "text": "supported any runtime that's Linux compatible is supported and you do this by leveraging the lambda layer so this",
    "start": "1390169",
    "end": "1395990"
  },
  {
    "text": "is a really good way of reusing necessary pieces and also if you need to change something you can change it in a",
    "start": "1395990",
    "end": "1401780"
  },
  {
    "text": "single place so it's a really good best practice to share these not only the",
    "start": "1401780",
    "end": "1407630"
  },
  {
    "text": "runtimes but whatever other custom layers you might mean and then lastly in",
    "start": "1407630",
    "end": "1414290"
  },
  {
    "start": "1411000",
    "end": "1450000"
  },
  {
    "text": "terms of building out these applications if you're nervous about HIPAA or PCI or comply their compliance needs a lot many",
    "start": "1414290",
    "end": "1421790"
  },
  {
    "text": "of these server lists components that we're talking about the services that we have meet HIPAA and PCI compliance so",
    "start": "1421790",
    "end": "1428000"
  },
  {
    "text": "the ones that I described and discussed or are all HIPAA and PCI compliant and",
    "start": "1428000",
    "end": "1433100"
  },
  {
    "text": "you can use you know there's other compliance pieces there too but the goal",
    "start": "1433100",
    "end": "1438260"
  },
  {
    "text": "should be this shouldn't this shouldn't be a deterrent you can definitely build serverless applications and use them in",
    "start": "1438260",
    "end": "1443750"
  },
  {
    "text": "not only critical communications platforms but mission-critical platforms meaning the compliance",
    "start": "1443750",
    "end": "1449840"
  },
  {
    "text": "requirements and with that I'm going to introduce Mac from spoke thanks Doug",
    "start": "1449840",
    "end": "1456670"
  },
  {
    "start": "1450000",
    "end": "1491000"
  },
  {
    "text": "so what is a critical communications platform I think the best way to kind of",
    "start": "1456670",
    "end": "1462320"
  },
  {
    "text": "describe what scope does and who we are is to walk you through a scenario I want",
    "start": "1462320",
    "end": "1467510"
  },
  {
    "text": "you to all to kind of imagine you're sitting down on the couch after a large meal yeah kind of felt like you maybe",
    "start": "1467510",
    "end": "1474110"
  },
  {
    "text": "ate too much feel a little bit heavy and you feel a little short of breath",
    "start": "1474110",
    "end": "1480280"
  },
  {
    "text": "not wanting to chance anything maybe it's the flu you decide to go into the",
    "start": "1480280",
    "end": "1485480"
  },
  {
    "text": "hospital so you walk up to the front desk you describe your symptoms all of a",
    "start": "1485480",
    "end": "1491270"
  },
  {
    "text": "sudden before you know it you're surrounded by nurses and doctors they're",
    "start": "1491270",
    "end": "1497990"
  },
  {
    "text": "putting IVs in your arm they're drawing blood they are attaching pulse oximeters",
    "start": "1497990",
    "end": "1503450"
  },
  {
    "text": "to your fingertips they're running an EKG the doctor comes up to you and tells",
    "start": "1503450",
    "end": "1510530"
  },
  {
    "text": "you you're having a heart attack specifically an ST elevation myocardial",
    "start": "1510530",
    "end": "1515740"
  },
  {
    "text": "infarction or is that we call it a code STEMI they need to send you up into the",
    "start": "1515740",
    "end": "1522200"
  },
  {
    "text": "cath lab effectively in operating room to put a stent in the time that they",
    "start": "1522200",
    "end": "1530120"
  },
  {
    "start": "1526000",
    "end": "1552000"
  },
  {
    "text": "have to get that stent in from when you walk in that door we call it the door-to-balloon time is 90 minutes",
    "start": "1530120",
    "end": "1537070"
  },
  {
    "text": "anything longer than that and permanent cardiac damage occurs so time is",
    "start": "1537070",
    "end": "1542360"
  },
  {
    "text": "absolutely of the essence luckily in your case it was a lot quicker than that",
    "start": "1542360",
    "end": "1547660"
  },
  {
    "text": "so let's walk through what happened behind the scenes the moment they identified the code STEMI they've logged",
    "start": "1547660",
    "end": "1556429"
  },
  {
    "start": "1552000",
    "end": "1634000"
  },
  {
    "text": "into a console this console sent several messages out to phones pagers yes they",
    "start": "1556429",
    "end": "1563660"
  },
  {
    "text": "actually still exist and mobile devices specifically a couple of mobile apps",
    "start": "1563660",
    "end": "1568730"
  },
  {
    "text": "that we've built those mobile apps allow the care team to collaborate they allow",
    "start": "1568730",
    "end": "1574280"
  },
  {
    "text": "them to share test results they can look at your EKGs they can look at your blood work they can kind of orchestrate",
    "start": "1574280",
    "end": "1579440"
  },
  {
    "text": "everything to get you up into that cath lab as soon as possible now this",
    "start": "1579440",
    "end": "1587300"
  },
  {
    "text": "solution right now is in 1,900 different hospitals so thankfully we are reducing that time",
    "start": "1587300",
    "end": "1593730"
  },
  {
    "text": "that door-to-balloon time throughout the country now the average without a",
    "start": "1593730",
    "end": "1598799"
  },
  {
    "text": "critical communication solution the average time to that door-to-balloon is 139 minutes with this solution the",
    "start": "1598799",
    "end": "1607080"
  },
  {
    "text": "average is 68 minutes so there's real impact that occurs from this and we're",
    "start": "1607080",
    "end": "1612600"
  },
  {
    "text": "going to talk about how we effectively transitioned to a server less architecture so the company decided",
    "start": "1612600",
    "end": "1620400"
  },
  {
    "text": "several years ago to make the transition to the cloud and a lot of it was driven",
    "start": "1620400",
    "end": "1626399"
  },
  {
    "text": "by our customers they don't want to be in the business of managing servers or physical data centers they want to",
    "start": "1626399",
    "end": "1631830"
  },
  {
    "text": "really be focusing on care so as part of that they invested in modern DevOps",
    "start": "1631830",
    "end": "1637380"
  },
  {
    "start": "1634000",
    "end": "1705000"
  },
  {
    "text": "principles infrastructure is code so to just kind of quickly recap what this",
    "start": "1637380",
    "end": "1642690"
  },
  {
    "text": "means is that a developer will write some code they'll check it in that will be built as part of an automated build",
    "start": "1642690",
    "end": "1649049"
  },
  {
    "text": "process and then it'll be tested a bunch of automated tests will occur and then it'll be reviewed and merged into",
    "start": "1649049",
    "end": "1655559"
  },
  {
    "text": "effectively a master branch or a release candidate that in turn goes through a system test that system tests will go",
    "start": "1655559",
    "end": "1662820"
  },
  {
    "text": "back into the build process as well so all the teams that are building code are testing against what is effectively",
    "start": "1662820",
    "end": "1669899"
  },
  {
    "text": "about to get out to production so no one's lagging behind with their their build pipeline and eventually that will",
    "start": "1669899",
    "end": "1677039"
  },
  {
    "text": "get deployed to production now we we deploy quite often to production launching to production is not a big",
    "start": "1677039",
    "end": "1682980"
  },
  {
    "text": "bang deployment for us we reap rack tiss a lot of smaller incremental changes and there's some really good reasons for",
    "start": "1682980",
    "end": "1688020"
  },
  {
    "text": "that one of the biggest is by reducing your batch size you actually improve system reliability and that's a that's a",
    "start": "1688020",
    "end": "1694740"
  },
  {
    "text": "pretty critical thing that we have found that it's reduced our failed deployments",
    "start": "1694740",
    "end": "1700370"
  },
  {
    "text": "so we started like a lot of companies not going the serverless route in fact",
    "start": "1700370",
    "end": "1706230"
  },
  {
    "start": "1705000",
    "end": "1739000"
  },
  {
    "text": "here's kind of what the original infrastructure looked like we built a lot of stuff on top of docker so we had",
    "start": "1706230",
    "end": "1713190"
  },
  {
    "text": "docker containers inside of ec2 instances instead of a V PC inside of",
    "start": "1713190",
    "end": "1718620"
  },
  {
    "text": "security groups lots of alphabet soup going on behind an application load balancer we",
    "start": "1718620",
    "end": "1725280"
  },
  {
    "text": "were spending a lot of time turning knobs building infrastructure and",
    "start": "1725280",
    "end": "1730820"
  },
  {
    "text": "honestly it was probably the bulk of the time that we were spending so there's a",
    "start": "1730820",
    "end": "1736860"
  },
  {
    "text": "catalyst around about a year ago a new",
    "start": "1736860",
    "end": "1742020"
  },
  {
    "start": "1739000",
    "end": "1861000"
  },
  {
    "text": "VP of engineering came in and he was kind of an AWS enthusiast he had read all up on all the different services in",
    "start": "1742020",
    "end": "1748230"
  },
  {
    "text": "AWS and he challenged the fact that we were spending so much time building all",
    "start": "1748230",
    "end": "1753810"
  },
  {
    "text": "this infrastructure I said oh you guys heard of lambda yeah we've heard of lambda are you using lambda not really",
    "start": "1753810",
    "end": "1760320"
  },
  {
    "text": "would you like to use lambda yeah so what we said well he said okay well why",
    "start": "1760320",
    "end": "1767190"
  },
  {
    "text": "don't you try to take everything you've built this critical platform that you've built using docker containers and make",
    "start": "1767190",
    "end": "1773700"
  },
  {
    "text": "it serverless use lambda use dynamo open grazing what",
    "start": "1773700",
    "end": "1779340"
  },
  {
    "text": "that was pretty cool it's developers you get to play with a lot of new toys until",
    "start": "1779340",
    "end": "1784800"
  },
  {
    "text": "he called us how long we had to do it three weeks I want to see the platform",
    "start": "1784800",
    "end": "1791190"
  },
  {
    "text": "running serverless in three weeks doesn't have to be perfect but I want to know that's feasible so after we freaked",
    "start": "1791190",
    "end": "1799170"
  },
  {
    "text": "out a little we ended up putting a small team together created a brand-new AWS",
    "start": "1799170",
    "end": "1806670"
  },
  {
    "text": "account so before in the previous architecture really the only people that had right access to our development",
    "start": "1806670",
    "end": "1812850"
  },
  {
    "text": "environment was DevOps in this case developers are going to need to have access to the AWS environment they're",
    "start": "1812850",
    "end": "1818730"
  },
  {
    "text": "going to be able to write to that environment they're going to be able to play so we stood up a separate sandbox account okay and we took our dotnet core",
    "start": "1818730",
    "end": "1828330"
  },
  {
    "text": "based application and began migrating it to lambda interestingly enough the first",
    "start": "1828330",
    "end": "1836690"
  },
  {
    "text": "time we had something running was only a couple of days we were a little surprised and this is",
    "start": "1836690",
    "end": "1843150"
  },
  {
    "text": "the bulk of the team didn't have any sort of AWS experience those first few days were really spent around learning AWS and how to use AWS and a couple days",
    "start": "1843150",
    "end": "1852870"
  },
  {
    "text": "later we actually had some of the data persistent layer a lot of the core database logic migrated over to DynamoDB",
    "start": "1852870",
    "end": "1860610"
  },
  {
    "text": "and this is kind of our original architecture it it's fairly sparse we we",
    "start": "1860610",
    "end": "1868480"
  },
  {
    "start": "1861000",
    "end": "1906000"
  },
  {
    "text": "made a lot of mistakes which we're gonna we're going to talk about the blooper reel in just a little bit here but what",
    "start": "1868480",
    "end": "1874270"
  },
  {
    "text": "we had here is we took really just one of our stacks and put it behind API gateway using what's called a proxy",
    "start": "1874270",
    "end": "1880450"
  },
  {
    "text": "integration so this is API gateway whatever you get just send it on to the lambda now this is not a recommended",
    "start": "1880450",
    "end": "1887260"
  },
  {
    "text": "best practice but for the purpose of getting up and running it allowed us to kind of get up and running an experiment",
    "start": "1887260",
    "end": "1892990"
  },
  {
    "text": "and then of course was sitting behind DynamoDB and when I talked about those that those first few days and we had",
    "start": "1892990",
    "end": "1900040"
  },
  {
    "text": "dotnet core running I'd like to show you exactly how we made that transition over to lambda here's what it looked like",
    "start": "1900040",
    "end": "1907990"
  },
  {
    "start": "1906000",
    "end": "1930000"
  },
  {
    "text": "before okay so we had this is simplified we had a couple of docker containers",
    "start": "1907990",
    "end": "1914850"
  },
  {
    "text": "Ingenix so it kind of serves the initial traffic behind that was the actual",
    "start": "1914880",
    "end": "1920620"
  },
  {
    "text": "gotten at core stack with kestrel which is what serves all the HTTP requests and that triggers the business logic okay to",
    "start": "1920620",
    "end": "1928690"
  },
  {
    "text": "convert over to lambda all we did was change that kestrel labor layer over to",
    "start": "1928690",
    "end": "1935200"
  },
  {
    "start": "1930000",
    "end": "1950000"
  },
  {
    "text": "an api proxy gateway proxy function now I know probably a lot of you've seen the slides or somebody just replaces a box",
    "start": "1935200",
    "end": "1941559"
  },
  {
    "text": "and it looks really nice and clean and really easy and then you get to do it and it takes six months been there done",
    "start": "1941559",
    "end": "1948010"
  },
  {
    "text": "that so I'd like to actually show you the code here's what it looks like before I mean this is a little",
    "start": "1948010",
    "end": "1953679"
  },
  {
    "start": "1950000",
    "end": "1960000"
  },
  {
    "text": "simplified but here's what it looks like before this is the entry point for a Kestrel based net core stack and here's",
    "start": "1953679",
    "end": "1961030"
  },
  {
    "start": "1960000",
    "end": "1979000"
  },
  {
    "text": "what it looks like after as you can see we just subclass that right from the API gateway proxy function removed all the",
    "start": "1961030",
    "end": "1967780"
  },
  {
    "text": "Kestrel logic and we're off to the races now I talked about the blooper reel or",
    "start": "1967780",
    "end": "1973900"
  },
  {
    "text": "the mistakes that we made along the way and some of the best practices we learned first one I would say is around",
    "start": "1973900",
    "end": "1980800"
  },
  {
    "text": "I am policies keep them locked down lock down early and lock down often okay",
    "start": "1980800",
    "end": "1987400"
  },
  {
    "text": "the default recommended the default examples out there they tend to use the",
    "start": "1987400",
    "end": "1993880"
  },
  {
    "text": "lambda full access which allows you to access to everything you can access all the things you can across your account",
    "start": "1993880",
    "end": "2000530"
  },
  {
    "text": "but keep them locked down so here's an example of this how many have seen a",
    "start": "2000530",
    "end": "2006870"
  },
  {
    "start": "2004000",
    "end": "2060000"
  },
  {
    "text": "policy like this you know you got lambda star log star DynamoDB star resource bar",
    "start": "2006870",
    "end": "2012750"
  },
  {
    "text": "you can be honest you can be honest all right okay a much better way of doing",
    "start": "2012750",
    "end": "2017760"
  },
  {
    "text": "this okay is really around scoping it more towards what your service needs to",
    "start": "2017760",
    "end": "2024360"
  },
  {
    "text": "do okay build those bulkheads the security bulkheads as you can see we've locked this one down this lambda really",
    "start": "2024360",
    "end": "2030930"
  },
  {
    "text": "only needs to invoke put some log events get a couple of records from dynamo and then we're really scoping that resource",
    "start": "2030930",
    "end": "2037440"
  },
  {
    "text": "down to the nifty table I don't all I heard to see out there but again",
    "start": "2037440",
    "end": "2043200"
  },
  {
    "text": "lockdown them those policies early it also is a nice side effect that if teens",
    "start": "2043200",
    "end": "2048510"
  },
  {
    "text": "are kind of reaching into each other's databases like they shouldn't be doing and they're not putting api's in front",
    "start": "2048510",
    "end": "2054810"
  },
  {
    "text": "of that or queues in front of that it will identify that pretty quickly",
    "start": "2054810",
    "end": "2060080"
  },
  {
    "start": "2060000",
    "end": "2135000"
  },
  {
    "text": "another one is your developers are gonna have access to AWS this is a lot of",
    "start": "2060080",
    "end": "2065370"
  },
  {
    "text": "people they're gonna have access to AWS all right there's a lot of opportunities for things to go wrong here so use MFA",
    "start": "2065370",
    "end": "2073379"
  },
  {
    "text": "make sure everyone is using MFA that's not just for the console you can do some really nice stuff with simple token",
    "start": "2073380",
    "end": "2079649"
  },
  {
    "text": "service STS so that you can actually scope that MFA access down to actual API",
    "start": "2079650",
    "end": "2085830"
  },
  {
    "text": "and console level access it's it's a great thing it's a beautiful thing because eventually going to have to",
    "start": "2085830",
    "end": "2092220"
  },
  {
    "text": "assume somebody's going to leak a key we tell our developers that those access keys are nuclear launch codes but you",
    "start": "2092220",
    "end": "2098670"
  },
  {
    "text": "know that they're going to end up in a configuration file that somebody is going to upload to github I see some smiles out there yes it happens so have",
    "start": "2098670",
    "end": "2107730"
  },
  {
    "text": "a plan in place to rotate keys use MFA and the other thing I also recommend",
    "start": "2107730",
    "end": "2113520"
  },
  {
    "text": "which is not on this slide is really use services like guard duty to monitor that developer account all sorts of crazy",
    "start": "2113520",
    "end": "2120060"
  },
  {
    "text": "things are going to happen you developers can experiment this is just part of empowering them but use guard duty really kind of keep an eye on",
    "start": "2120060",
    "end": "2125520"
  },
  {
    "text": "things out there another thing which was one of our more interesting bloopers was",
    "start": "2125520",
    "end": "2133860"
  },
  {
    "text": "dynamodb tables so who here has used DynamoDB alright a lot of people who",
    "start": "2133860",
    "end": "2140010"
  },
  {
    "start": "2135000",
    "end": "2188000"
  },
  {
    "text": "here when they first started using DynamoDB treated it like a relational database again honesty's appreciated because we did it",
    "start": "2140010",
    "end": "2146900"
  },
  {
    "text": "a lot of times you find out that not necessarily relational database but everyone creates a separate table based",
    "start": "2146900",
    "end": "2153570"
  },
  {
    "text": "on the object so we've got a user table we've got a group table we've got a department table and then we kind of",
    "start": "2153570",
    "end": "2159360"
  },
  {
    "text": "link through them you know we like luckily have considered eventual consistency in this model but we did",
    "start": "2159360",
    "end": "2165840"
  },
  {
    "text": "this and the what really kind of woke us up was the advanced design patterns for",
    "start": "2165840",
    "end": "2172290"
  },
  {
    "text": "DynamoDB reinvent video if you're using DynamoDB watch that video I mean again",
    "start": "2172290",
    "end": "2177990"
  },
  {
    "text": "advanced design patterns for DynamoDB that opened our eyes and realized that",
    "start": "2177990",
    "end": "2183300"
  },
  {
    "text": "we're doing quite a few things that are not right here that are not a best practice so we ended up migrating to a",
    "start": "2183300",
    "end": "2189960"
  },
  {
    "start": "2188000",
    "end": "2273000"
  },
  {
    "text": "single table as you can see here everything is all in one table so each of our services has one table our",
    "start": "2189960",
    "end": "2197040"
  },
  {
    "text": "primary keys are generic you know so they represent typically a unique identifier there's a sort key that we",
    "start": "2197040",
    "end": "2204000"
  },
  {
    "text": "can that that is typically scoped to user so maybe with Bob it might be you",
    "start": "2204000",
    "end": "2211470"
  },
  {
    "text": "know Bob's name and in a lot of cases we also use ragged rows in this so",
    "start": "2211470",
    "end": "2219050"
  },
  {
    "text": "obviously the row for rapid response will be different than the columns for rapid response will be different for the",
    "start": "2219050",
    "end": "2225240"
  },
  {
    "text": "columns for the user in this case Bob okay that way we can build global secondary indexes off of that so the key",
    "start": "2225240",
    "end": "2232860"
  },
  {
    "text": "point I tell our teams is that if you're trying to decide between dynamo or Aurora ask yourself a couple of",
    "start": "2232860",
    "end": "2238290"
  },
  {
    "text": "questions do you know how you're going to be accessing your data if you do then",
    "start": "2238290",
    "end": "2243420"
  },
  {
    "text": "use dynamo is it transactional in nature if yes then you may want to consider an",
    "start": "2243420",
    "end": "2249450"
  },
  {
    "text": "OC of a sequel based database like Aurora or if it is if",
    "start": "2249450",
    "end": "2254550"
  },
  {
    "text": "truly you don't know the answer you're gonna be doing some analytics on that then you may want to consider a relational database like Aurora another",
    "start": "2254550",
    "end": "2263580"
  },
  {
    "text": "key thing that getting to kind of now to the critical communications point of this is around orchestration how do we",
    "start": "2263580",
    "end": "2270510"
  },
  {
    "text": "deploy all of this to production we've got a lot of different teams that are making a lot of changes and they're",
    "start": "2270510",
    "end": "2277680"
  },
  {
    "start": "2273000",
    "end": "2322000"
  },
  {
    "text": "they're not all lockstep things are merging in throughout the time one service updates and other service",
    "start": "2277680",
    "end": "2282870"
  },
  {
    "text": "updates how are we orchestrating all of that well we end up having to create a new utility called bootstrapper what",
    "start": "2282870",
    "end": "2290070"
  },
  {
    "text": "this does is this leverages cloud formation but in a different way we originally tried nested templates but",
    "start": "2290070",
    "end": "2296700"
  },
  {
    "text": "the templates that you the base kind of parent template in that case is immutable and we couldn't do that",
    "start": "2296700",
    "end": "2302280"
  },
  {
    "text": "because we're constantly changing our infrastructure so in this case bootstrapper brings in a set of",
    "start": "2302280",
    "end": "2308730"
  },
  {
    "text": "templates so each of our services has a template that they publish this is mostly a cloud formation stack but",
    "start": "2308730",
    "end": "2314520"
  },
  {
    "text": "there's some additional data associated with that that advertises the information that it needs from the various services ok that generates a",
    "start": "2314520",
    "end": "2323640"
  },
  {
    "text": "cloud formation stack that deploys in this case initially the first parent stack which their common services this",
    "start": "2323640",
    "end": "2329580"
  },
  {
    "text": "will be things like route 53 all the services are using around 53 but they also might need to know that information",
    "start": "2329580",
    "end": "2335700"
  },
  {
    "text": "about route 53 so that gets passed through as part of the cloud formation",
    "start": "2335700",
    "end": "2340770"
  },
  {
    "text": "parameters so the other stacks can then update with that information so we can update any one of these stacks without",
    "start": "2340770",
    "end": "2348960"
  },
  {
    "text": "having to redeploy the whole system so we can do these smaller incremental deployments throughout our system so",
    "start": "2348960",
    "end": "2356610"
  },
  {
    "text": "this was a big key piece to making sure that we're not taking our system down for updates that the system is always",
    "start": "2356610",
    "end": "2362370"
  },
  {
    "text": "operational I'd like to also kind of walk you through our reference",
    "start": "2362370",
    "end": "2367550"
  },
  {
    "text": "architecture now this here is not",
    "start": "2367550",
    "end": "2373350"
  },
  {
    "text": "completely what every one of our services looks like but this is the foundational layer that a lot of our services build upon so I want to start",
    "start": "2373350",
    "end": "2381090"
  },
  {
    "text": "you out where the user comes into the system it looks up the the entry in the DNS entry in route 53",
    "start": "2381090",
    "end": "2388490"
  },
  {
    "text": "the front end code has been deployed to Amazon s3 which of course seeds a",
    "start": "2388520",
    "end": "2393530"
  },
  {
    "text": "CloudFront distribution that cloud front distribution of course loads into the users browser it's it's not always a",
    "start": "2393530",
    "end": "2400460"
  },
  {
    "text": "browser either it's also a mobile app that will make a call out into API",
    "start": "2400460",
    "end": "2405530"
  },
  {
    "text": "gateway that API gateway is gonna then hit that services lambda okay which of",
    "start": "2405530",
    "end": "2410810"
  },
  {
    "text": "course uses dynamo DB or the single table it'll log any of its logs or",
    "start": "2410810",
    "end": "2416570"
  },
  {
    "text": "metrics to cloud watch which I can't stress that enough use cloud watch it's it's a fantastic tool and and from there",
    "start": "2416570",
    "end": "2426680"
  },
  {
    "text": "we'll return the call back to the user now this is great but what about other",
    "start": "2426680",
    "end": "2431720"
  },
  {
    "text": "services we talked about we have multiple services in our stack one of the things we always talk about is",
    "start": "2431720",
    "end": "2437360"
  },
  {
    "text": "building bulkheads and part of what that means is that let's say we're updating",
    "start": "2437360",
    "end": "2444200"
  },
  {
    "text": "one of these lambdas things are changing they're churning ok even though it might be a couple of milliseconds during the update we still want to make sure that",
    "start": "2444200",
    "end": "2450200"
  },
  {
    "text": "we're not dropping any traffic on the ground so there's other services that are going to need to communicate with us",
    "start": "2450200",
    "end": "2456050"
  },
  {
    "text": "lambdas so we make use of at that point is a combination of either SQS or Kinesis or both so we use simple queue",
    "start": "2456050",
    "end": "2463880"
  },
  {
    "text": "service when it's a it's a one-off event you know it's a it's a single event you can just kind of publish and subscribe",
    "start": "2463880",
    "end": "2468980"
  },
  {
    "text": "to in some cases we've got streams of data that are coming in and we make",
    "start": "2468980",
    "end": "2474380"
  },
  {
    "text": "heavy use of Kinesis these in turn end up in what we call an event lambda which",
    "start": "2474380",
    "end": "2479990"
  },
  {
    "text": "writes directly to dynamodb it actually doesn't trigger the services lambda and that of course also uses clot",
    "start": "2479990",
    "end": "2485390"
  },
  {
    "text": "watch what is nice about this is we can take one of these services down or you",
    "start": "2485390",
    "end": "2492920"
  },
  {
    "text": "know if we really wanted to for a minute or two or a couple of minutes which we wouldn't do but we can take them down and the only thing that happens in that",
    "start": "2492920",
    "end": "2499190"
  },
  {
    "text": "case is that queue starts to back up we bring that lambda back back on line and then the lambda can service all of that",
    "start": "2499190",
    "end": "2505910"
  },
  {
    "text": "traffic so one point I want to make as",
    "start": "2505910",
    "end": "2512600"
  },
  {
    "text": "well with this pattern is it's critical it's absolutely critical that your service is lambda and your event lambda",
    "start": "2512600",
    "end": "2518960"
  },
  {
    "text": "share the same data persistence lair whether that's their lambda layers or through a shared library so what this",
    "start": "2518960",
    "end": "2524780"
  },
  {
    "text": "means is that those things are in lockstep so you don't you can avoid data inconsistency within dynamodb so let's",
    "start": "2524780",
    "end": "2532130"
  },
  {
    "text": "say you update your services lambda and you don't update your event lambda and that data persistence layer changes",
    "start": "2532130",
    "end": "2537850"
  },
  {
    "text": "you're gonna be in for a world of hurt you're gonna get a lot of data inconsistency in dynamo so to kind of",
    "start": "2537850",
    "end": "2545750"
  },
  {
    "text": "recap here lambda really allowed us to move quickly in fact from going from",
    "start": "2545750",
    "end": "2554090"
  },
  {
    "start": "2548000",
    "end": "2694000"
  },
  {
    "text": "that first runway to where we actually deployed a surrealist production",
    "start": "2554090",
    "end": "2559510"
  },
  {
    "text": "infrastructure and this means 0 we see two instances was only nine months with",
    "start": "2559510",
    "end": "2566720"
  },
  {
    "text": "our team the other side of this is you're going to need to empower your developers when they do this your",
    "start": "2566720",
    "end": "2573110"
  },
  {
    "text": "developers are all going to have to become AWS experts whether that happens organically or through training material",
    "start": "2573110",
    "end": "2578720"
  },
  {
    "text": "they're gonna have to become AWS experts they're going to need an AWS account to kind of play with to experiment with",
    "start": "2578720",
    "end": "2584990"
  },
  {
    "text": "keep that separate from your Prada comes a little bit of advice but they are",
    "start": "2584990",
    "end": "2592850"
  },
  {
    "text": "gonna need that account so you need to put proper controls around that where you're using MFA you're providing proper",
    "start": "2592850",
    "end": "2599840"
  },
  {
    "text": "guardrails for your developers when they're using that account and you're watching it with guard duty another nice",
    "start": "2599840",
    "end": "2606470"
  },
  {
    "text": "part of this is infrastructure should always always always be done as code so when things migrate from that sandbox",
    "start": "2606470",
    "end": "2612530"
  },
  {
    "text": "account to that development account or that product it should be done as code you shouldn't have to have somebody in",
    "start": "2612530",
    "end": "2618800"
  },
  {
    "text": "DevOps having to go in and turn a knob in a development account to make something get through to prod that that",
    "start": "2618800",
    "end": "2625190"
  },
  {
    "text": "should never be done review your resources as well on a regular basis now",
    "start": "2625190",
    "end": "2630380"
  },
  {
    "text": "lambda makes this a lot easier one of the challenges sometimes with ec2 is you might have an ec2 instance that's out",
    "start": "2630380",
    "end": "2636440"
  },
  {
    "text": "there and it's been running for like three months and no one knows what it does moment you shut it down all of a",
    "start": "2636440",
    "end": "2641960"
  },
  {
    "text": "sudden everything breaks the nice thing about lambda is that the ephemeral nature of it is is a lot of times we can",
    "start": "2641960",
    "end": "2648800"
  },
  {
    "text": "remove a lambda resource in as part of the cleanup operation and it's kind of a non-event but make",
    "start": "2648800",
    "end": "2654890"
  },
  {
    "text": "sure your resources are getting cleaned up developers will leave resources hanging around and again I've already",
    "start": "2654890",
    "end": "2662270"
  },
  {
    "text": "emphasized this before but keep I am locked down always use MFA and assume a key is going to leak and finally there AWS is a big",
    "start": "2662270",
    "end": "2671240"
  },
  {
    "text": "place it's a really big place I think everyone in that in the room knows that but leverage all of the AWS education",
    "start": "2671240",
    "end": "2677869"
  },
  {
    "text": "what's your material out there especially the reinvent videos the the the very sessions here and a lot of the",
    "start": "2677869",
    "end": "2684920"
  },
  {
    "text": "blog articles we constantly follow those and we constantly report back to other teams around best practices as we've",
    "start": "2684920",
    "end": "2691309"
  },
  {
    "text": "learned thank you very much",
    "start": "2691309",
    "end": "2696010"
  },
  {
    "start": "2694000",
    "end": "2840000"
  },
  {
    "text": "does anyone have any questions",
    "start": "2701170",
    "end": "2704740"
  },
  {
    "text": "oh so being cloud agnostic so one thing I didn't really talk about here was that",
    "start": "2718640",
    "end": "2725710"
  },
  {
    "text": "huge docker architecture that we had was because we were trying to originally be",
    "start": "2725710",
    "end": "2730940"
  },
  {
    "text": "cloud agnostic to be honest you will",
    "start": "2730940",
    "end": "2737480"
  },
  {
    "text": "often become your own worst enemy by trying to be cloud agnostic to be honest all right you're gonna spend a lot of",
    "start": "2737480",
    "end": "2742999"
  },
  {
    "text": "time building infrastructure upon infrastructure upon infrastructure the more likely failure point is going to be",
    "start": "2742999",
    "end": "2748819"
  },
  {
    "text": "your own infrastructure just in my own experience so in the case of portability",
    "start": "2748819",
    "end": "2754489"
  },
  {
    "text": "for the lambdas themselves a lot of times we run those containers locally on our dev environment inside of docker",
    "start": "2754489",
    "end": "2761029"
  },
  {
    "text": "containers so we've developers want to be able to just kind of step through and debug code will run those as docker",
    "start": "2761029",
    "end": "2766160"
  },
  {
    "text": "containers locally so we still maintain those two entry points but not with the intent of being cloud agnostic just",
    "start": "2766160",
    "end": "2771859"
  },
  {
    "text": "because again it's a very difficult path to go down and I think it actually has",
    "start": "2771859",
    "end": "2778009"
  },
  {
    "text": "more risk than most realize",
    "start": "2778009",
    "end": "2781210"
  },
  {
    "text": "yes what do we use to deploy our",
    "start": "2785720",
    "end": "2792150"
  },
  {
    "text": "serverless service yep so we make heavy heavy use of cloud formation and we also created",
    "start": "2792150",
    "end": "2799670"
  },
  {
    "text": "bootstrapper which is it's not a huge it's actually not a huge application it's a Python script that we have that",
    "start": "2799670",
    "end": "2806000"
  },
  {
    "text": "deploys the individual stacks and keeps everything synchronized across them so another key point on that is those",
    "start": "2806000",
    "end": "2814079"
  },
  {
    "text": "really work for runtime or sorry to deploy time concerns for runtime concerns you may also have to leverage",
    "start": "2814079",
    "end": "2819180"
  },
  {
    "text": "some sort of service discovery such as cloud map as well",
    "start": "2819180",
    "end": "2823730"
  },
  {
    "text": "other questions all will be down front",
    "start": "2829600",
    "end": "2834760"
  },
  {
    "text": "if you have any more questions thank you very much and please complete the second",
    "start": "2834760",
    "end": "2842040"
  }
]