[
  {
    "text": "In this first episode,",
    "start": "0",
    "end": "1633"
  },
  {
    "text": "we will start learning",
    "start": "1633",
    "end": "3166"
  },
  {
    "text": "about stream processing.",
    "start": "3166",
    "end": "5432"
  },
  {
    "text": "We will see what is peculiar",
    "start": "5433",
    "end": "7166"
  },
  {
    "text": "with streaming data compared",
    "start": "7166",
    "end": "8500"
  },
  {
    "text": "with more conventional approaches",
    "start": "8500",
    "end": "10566"
  },
  {
    "text": "like batching.",
    "start": "10566",
    "end": "12300"
  },
  {
    "text": "And we will see",
    "start": "12300",
    "end": "12900"
  },
  {
    "text": "some of the fundamental transformation",
    "start": "12900",
    "end": "15066"
  },
  {
    "text": "that you can do when stream processing.",
    "start": "15066",
    "end": "17033"
  },
  {
    "text": "Compare with what you would do",
    "start": "17033",
    "end": "19700"
  },
  {
    "text": "when querying a database",
    "start": "19700",
    "end": "21200"
  },
  {
    "text": "or when batching.",
    "start": "21200",
    "end": "24200"
  },
  {
    "text": "But first let's start",
    "start": "27466",
    "end": "29100"
  },
  {
    "text": "with the terminology.",
    "start": "29100",
    "end": "30633"
  },
  {
    "text": "What is actually data streaming?",
    "start": "30633",
    "end": "33100"
  },
  {
    "text": "When we talk about data streaming,",
    "start": "33100",
    "end": "35199"
  },
  {
    "text": "we actually refer to two separate",
    "start": "35200",
    "end": "37366"
  },
  {
    "text": "meanings.",
    "start": "37366",
    "end": "39100"
  },
  {
    "text": "One is about what we process",
    "start": "39100",
    "end": "41600"
  },
  {
    "text": "or the nature of the data,",
    "start": "41600",
    "end": "43865"
  },
  {
    "text": "and the other is about how we process it",
    "start": "43866",
    "end": "46833"
  },
  {
    "text": "or the processing mode.",
    "start": "46833",
    "end": "48600"
  },
  {
    "text": "When we use the term streaming",
    "start": "48600",
    "end": "50466"
  },
  {
    "text": "to define the nature of the data,",
    "start": "50466",
    "end": "52433"
  },
  {
    "text": "we refer to unbounded data sets, data",
    "start": "52433",
    "end": "56399"
  },
  {
    "text": "that has no end.",
    "start": "56400",
    "end": "57800"
  },
  {
    "text": "Think of it like a flowing",
    "start": "58800",
    "end": "61000"
  },
  {
    "text": "river of information",
    "start": "61000",
    "end": "62400"
  },
  {
    "text": "or a stream of information.",
    "start": "62400",
    "end": "64766"
  },
  {
    "text": "Hence the term streaming.",
    "start": "64766",
    "end": "67600"
  },
  {
    "text": "And when we build a system to process",
    "start": "67600",
    "end": "70166"
  },
  {
    "text": "streaming data,",
    "start": "70166",
    "end": "71100"
  },
  {
    "text": "we need to keep in mind",
    "start": "71100",
    "end": "72900"
  },
  {
    "text": "this unbounded nature of the data.",
    "start": "72900",
    "end": "75166"
  },
  {
    "text": "Because data will never end.",
    "start": "75166",
    "end": "78166"
  },
  {
    "text": "And this is in contrast",
    "start": "79266",
    "end": "81900"
  },
  {
    "text": "with bounded",
    "start": "81900",
    "end": "83200"
  },
  {
    "text": "datasets like tables or files.",
    "start": "83200",
    "end": "86200"
  },
  {
    "text": "Bounded datasets are finite.",
    "start": "86400",
    "end": "89266"
  },
  {
    "text": "There are packages of data",
    "start": "89266",
    "end": "90666"
  },
  {
    "text": "with a known beginning and a known end.",
    "start": "90666",
    "end": "93666"
  },
  {
    "text": "Conversely, when we use the term",
    "start": "94700",
    "end": "96500"
  },
  {
    "text": "streaming",
    "start": "96500",
    "end": "97133"
  },
  {
    "text": "referring to the processing mode,",
    "start": "97133",
    "end": "98966"
  },
  {
    "text": "what do we mean?",
    "start": "98966",
    "end": "99733"
  },
  {
    "text": "Is processing data continuously?",
    "start": "99733",
    "end": "102733"
  },
  {
    "text": "Processing runs forever.",
    "start": "103066",
    "end": "105000"
  },
  {
    "text": "Once started, processing will never end.",
    "start": "105000",
    "end": "107700"
  },
  {
    "text": "At least theoretically, of course.",
    "start": "107700",
    "end": "109600"
  },
  {
    "text": "And we handle records as they come in.",
    "start": "109600",
    "end": "112600"
  },
  {
    "text": "And this is in stark contrast with batch",
    "start": "114733",
    "end": "117866"
  },
  {
    "text": "processing, where we process data in a",
    "start": "117866",
    "end": "120766"
  },
  {
    "text": "periodic manner.",
    "start": "120766",
    "end": "122166"
  },
  {
    "text": "We can run the process on",
    "start": "124266",
    "end": "125632"
  },
  {
    "text": "every minute, every hour,",
    "start": "125633",
    "end": "127333"
  },
  {
    "text": "every day,",
    "start": "127333",
    "end": "128132"
  },
  {
    "text": "or even when a new file arrives.",
    "start": "128133",
    "end": "131133"
  },
  {
    "text": "But each processing,",
    "start": "131133",
    "end": "132532"
  },
  {
    "text": "each processing run has a start",
    "start": "132533",
    "end": "135466"
  },
  {
    "text": "and then end.",
    "start": "135466",
    "end": "136433"
  },
  {
    "text": "After having processed all the data.",
    "start": "136433",
    "end": "139433"
  },
  {
    "text": "I think everybody is familiar",
    "start": "141500",
    "end": "143066"
  },
  {
    "text": "with a bounded dataset like a table.",
    "start": "143066",
    "end": "145500"
  },
  {
    "text": "It contains a finite number of records,",
    "start": "145500",
    "end": "148266"
  },
  {
    "text": "maybe many, but still finite",
    "start": "148266",
    "end": "151266"
  },
  {
    "text": "bounded datasets often represent",
    "start": "151700",
    "end": "153599"
  },
  {
    "text": "the state of a system",
    "start": "153600",
    "end": "154933"
  },
  {
    "text": "at a specific point in time.",
    "start": "154933",
    "end": "157933"
  },
  {
    "text": "This table, for example, represent",
    "start": "157933",
    "end": "159600"
  },
  {
    "text": "the temperatures",
    "start": "159600",
    "end": "160366"
  },
  {
    "text": "measured by sensors in various rooms",
    "start": "160366",
    "end": "163366"
  },
  {
    "text": "at this specific time and date.",
    "start": "163633",
    "end": "167133"
  },
  {
    "text": "The content of the table",
    "start": "168233",
    "end": "169366"
  },
  {
    "text": "will change over time, obviously.",
    "start": "169366",
    "end": "171633"
  },
  {
    "text": "But each time we look at it,",
    "start": "171633",
    "end": "173866"
  },
  {
    "text": "we see a snapshot at",
    "start": "173866",
    "end": "176200"
  },
  {
    "text": "the time we are looking.",
    "start": "176200",
    "end": "178032"
  },
  {
    "text": "An unbounded dataset",
    "start": "178033",
    "end": "179400"
  },
  {
    "text": "looks much different.",
    "start": "179400",
    "end": "181400"
  },
  {
    "text": "It's a stream or a timeline",
    "start": "181400",
    "end": "183732"
  },
  {
    "text": "or distinct events,",
    "start": "183733",
    "end": "185633"
  },
  {
    "text": "and each record represents",
    "start": "185633",
    "end": "187366"
  },
  {
    "text": "a distinct fact",
    "start": "187366",
    "end": "189133"
  },
  {
    "text": "a temperature reading in this case,",
    "start": "189133",
    "end": "191733"
  },
  {
    "text": "and each event",
    "start": "191733",
    "end": "193100"
  },
  {
    "text": "is associated",
    "start": "193100",
    "end": "194100"
  },
  {
    "text": "with the time or the time",
    "start": "194100",
    "end": "195666"
  },
  {
    "text": "when the fact as happened,",
    "start": "195666",
    "end": "197500"
  },
  {
    "text": "or the time when the sensor",
    "start": "197500",
    "end": "199233"
  },
  {
    "text": "took the measurement.",
    "start": "199233",
    "end": "200433"
  },
  {
    "text": "In this case,",
    "start": "200433",
    "end": "202000"
  },
  {
    "text": "and the timestamp is usually written",
    "start": "202000",
    "end": "204400"
  },
  {
    "text": "in the record itself.",
    "start": "204400",
    "end": "205799"
  },
  {
    "text": "As you can see in the picture.",
    "start": "205800",
    "end": "207600"
  },
  {
    "text": "So now we have",
    "start": "211800",
    "end": "212966"
  },
  {
    "text": "seen the difference",
    "start": "212966",
    "end": "213933"
  },
  {
    "text": "between bounded and unbounded datasets.",
    "start": "213933",
    "end": "216933"
  },
  {
    "text": "Let's see how we can process data",
    "start": "217000",
    "end": "218666"
  },
  {
    "text": "that never ends.",
    "start": "218666",
    "end": "221666"
  },
  {
    "text": "Can we create",
    "start": "224633",
    "end": "226166"
  },
  {
    "text": "the same way",
    "start": "226166",
    "end": "227066"
  },
  {
    "text": "we would query a database table",
    "start": "227066",
    "end": "229666"
  },
  {
    "text": "with a Select statement, and close",
    "start": "229666",
    "end": "232500"
  },
  {
    "text": "to filter records",
    "start": "232500",
    "end": "233700"
  },
  {
    "text": "that match some conditions?",
    "start": "233700",
    "end": "236133"
  },
  {
    "text": "The answer is yes,",
    "start": "236133",
    "end": "237166"
  },
  {
    "text": "but the how is going to be very different",
    "start": "237166",
    "end": "239500"
  },
  {
    "text": "from querying a bounded dataset.",
    "start": "239500",
    "end": "242500"
  },
  {
    "text": "Let's start with the more familiar",
    "start": "243433",
    "end": "245033"
  },
  {
    "text": "example of a table.",
    "start": "245033",
    "end": "246933"
  },
  {
    "text": "When we query table",
    "start": "246933",
    "end": "248133"
  },
  {
    "text": "or execute",
    "start": "248133",
    "end": "249000"
  },
  {
    "text": "a batch on a finite set of data,",
    "start": "249000",
    "end": "252233"
  },
  {
    "text": "we start having the entire data set.",
    "start": "252233",
    "end": "255233"
  },
  {
    "text": "Then our query can go through",
    "start": "256200",
    "end": "258233"
  },
  {
    "text": "all the records",
    "start": "258233",
    "end": "259265"
  },
  {
    "text": "and extract",
    "start": "259266",
    "end": "260065"
  },
  {
    "text": "those",
    "start": "260066",
    "end": "260400"
  },
  {
    "text": "that are matching the rare condition.",
    "start": "260400",
    "end": "263400"
  },
  {
    "text": "And once the query is applied,",
    "start": "263600",
    "end": "265333"
  },
  {
    "text": "the result is another bounded dataset",
    "start": "265333",
    "end": "268133"
  },
  {
    "text": "only containing the selected records.",
    "start": "268133",
    "end": "270400"
  },
  {
    "text": "So we start with the bounded",
    "start": "271466",
    "end": "273700"
  },
  {
    "text": "data set",
    "start": "273700",
    "end": "274500"
  },
  {
    "text": "and we end with another bounded dataset.",
    "start": "274500",
    "end": "277500"
  },
  {
    "text": "In streaming this works very differently.",
    "start": "279766",
    "end": "282766"
  },
  {
    "text": "It's because we never have all the data,",
    "start": "283266",
    "end": "285832"
  },
  {
    "text": "and our query",
    "start": "285833",
    "end": "287100"
  },
  {
    "text": "cannot go through",
    "start": "287100",
    "end": "288033"
  },
  {
    "text": "all the records at once.",
    "start": "288033",
    "end": "291000"
  },
  {
    "text": "So instead the query stands still",
    "start": "291000",
    "end": "294066"
  },
  {
    "text": "and the records flow through it.",
    "start": "294200",
    "end": "297200"
  },
  {
    "text": "The query acts as a filter,",
    "start": "298666",
    "end": "301266"
  },
  {
    "text": "only letting it through the record",
    "start": "301266",
    "end": "303166"
  },
  {
    "text": "that matches the condition.",
    "start": "303166",
    "end": "306166"
  },
  {
    "text": "Another common transformation",
    "start": "309866",
    "end": "311366"
  },
  {
    "text": "is grouping records.",
    "start": "311366",
    "end": "312900"
  },
  {
    "text": "Grouping by some fields or some property.",
    "start": "312900",
    "end": "315900"
  },
  {
    "text": "This operation is represented",
    "start": "317100",
    "end": "319000"
  },
  {
    "text": "as a group by in SQL.",
    "start": "319000",
    "end": "321300"
  },
  {
    "text": "While in streaming is often",
    "start": "321300",
    "end": "323533"
  },
  {
    "text": "represented as a key by and we will see",
    "start": "323533",
    "end": "326599"
  },
  {
    "text": "the reason in a minute.",
    "start": "326600",
    "end": "329600"
  },
  {
    "text": "Let's start again",
    "start": "330500",
    "end": "331700"
  },
  {
    "text": "with the more familiar example",
    "start": "331700",
    "end": "333866"
  },
  {
    "text": "of a bounded dataset or a table.",
    "start": "333866",
    "end": "336866"
  },
  {
    "text": "As usual, we can start with old data.",
    "start": "337100",
    "end": "339900"
  },
  {
    "text": "So the query can go through old records.",
    "start": "341966",
    "end": "345000"
  },
  {
    "text": "Putting the records",
    "start": "345233",
    "end": "346200"
  },
  {
    "text": "with the same color in the same group",
    "start": "346200",
    "end": "349100"
  },
  {
    "text": "and the result is again",
    "start": "349100",
    "end": "351433"
  },
  {
    "text": "a bounded dataset.",
    "start": "351433",
    "end": "354000"
  },
  {
    "text": "We normally also want to do",
    "start": "354000",
    "end": "355366"
  },
  {
    "text": "some aggregation",
    "start": "355366",
    "end": "356300"
  },
  {
    "text": "or summarization on each group.",
    "start": "356300",
    "end": "358366"
  },
  {
    "text": "For example,",
    "start": "358366",
    "end": "359166"
  },
  {
    "text": "counting the records for each color.",
    "start": "359166",
    "end": "362166"
  },
  {
    "text": "In streaming.",
    "start": "364900",
    "end": "365766"
  },
  {
    "text": "This process is going to work",
    "start": "365766",
    "end": "367666"
  },
  {
    "text": "very differently",
    "start": "367666",
    "end": "369366"
  },
  {
    "text": "as we process records as they arrive.",
    "start": "369366",
    "end": "371666"
  },
  {
    "text": "We never have all the records.",
    "start": "371666",
    "end": "373699"
  },
  {
    "text": "So grouping becomes",
    "start": "373700",
    "end": "375833"
  },
  {
    "text": "splitting or better partitioning.",
    "start": "375833",
    "end": "378833"
  },
  {
    "text": "So we split the source stream",
    "start": "379200",
    "end": "381733"
  },
  {
    "text": "into a number of discrete sub streams.",
    "start": "381733",
    "end": "384733"
  },
  {
    "text": "And each sub stream",
    "start": "386166",
    "end": "387699"
  },
  {
    "text": "is identified by a key or the color.",
    "start": "387700",
    "end": "391000"
  },
  {
    "text": "In our case.",
    "start": "391000",
    "end": "393533"
  },
  {
    "text": "So we examine each record",
    "start": "393533",
    "end": "395400"
  },
  {
    "text": "and send it to the sub stream",
    "start": "395400",
    "end": "397199"
  },
  {
    "text": "associated to that color.",
    "start": "397200",
    "end": "400200"
  },
  {
    "text": "And we have a sub stream",
    "start": "401400",
    "end": "402766"
  },
  {
    "text": "for each of the possible keys",
    "start": "402766",
    "end": "405400"
  },
  {
    "text": "for each of the colors.",
    "start": "405400",
    "end": "406666"
  },
  {
    "text": "After we have partitioned",
    "start": "408400",
    "end": "410033"
  },
  {
    "text": "the data by key,",
    "start": "410033",
    "end": "411432"
  },
  {
    "text": "we can now",
    "start": "411433",
    "end": "412066"
  },
  {
    "text": "do some aggregation on each sub stream.",
    "start": "412066",
    "end": "415066"
  },
  {
    "text": "And you can probably already",
    "start": "415766",
    "end": "416966"
  },
  {
    "text": "guess that",
    "start": "416966",
    "end": "417500"
  },
  {
    "text": "counting records in each",
    "start": "417500",
    "end": "419100"
  },
  {
    "text": "sub stream is not going to be the same",
    "start": "419100",
    "end": "421166"
  },
  {
    "text": "as counting",
    "start": "421166",
    "end": "421633"
  },
  {
    "text": "record on each group of a table.",
    "start": "421633",
    "end": "424633"
  },
  {
    "text": "And this is because",
    "start": "424966",
    "end": "426200"
  },
  {
    "text": "streaming data keeps arriving",
    "start": "426200",
    "end": "428866"
  },
  {
    "text": "and we never reach an end,",
    "start": "428866",
    "end": "430432"
  },
  {
    "text": "so we can never stop and count",
    "start": "430433",
    "end": "432300"
  },
  {
    "text": "the records in each group.",
    "start": "432300",
    "end": "435099"
  },
  {
    "text": "We will see more about this later",
    "start": "435100",
    "end": "437366"
  },
  {
    "text": "in the series.",
    "start": "437366",
    "end": "438300"
  },
  {
    "text": "But what is important to understand",
    "start": "438300",
    "end": "440099"
  },
  {
    "text": "now is that in streaming,",
    "start": "440100",
    "end": "442200"
  },
  {
    "text": "grouping becomes",
    "start": "442200",
    "end": "443633"
  },
  {
    "text": "partitioning or keying by a key.",
    "start": "443633",
    "end": "446966"
  },
  {
    "text": "The color in this case.",
    "start": "447566",
    "end": "450566"
  },
  {
    "text": "Let's see a slightly different case.",
    "start": "451633",
    "end": "454000"
  },
  {
    "text": "Let's see what happens",
    "start": "454000",
    "end": "455233"
  },
  {
    "text": "if we want to group",
    "start": "455233",
    "end": "456066"
  },
  {
    "text": "by time and not by color.",
    "start": "456066",
    "end": "459300"
  },
  {
    "text": "So for example",
    "start": "460200",
    "end": "461366"
  },
  {
    "text": "we want to count event a count",
    "start": "461366",
    "end": "463000"
  },
  {
    "text": "through our system on every minute.",
    "start": "463000",
    "end": "465200"
  },
  {
    "text": "When working with",
    "start": "466400",
    "end": "467266"
  },
  {
    "text": "a bounded data set with the table,",
    "start": "467266",
    "end": "469332"
  },
  {
    "text": "grouping by",
    "start": "469333",
    "end": "469866"
  },
  {
    "text": "time is more or less",
    "start": "469866",
    "end": "471733"
  },
  {
    "text": "the same as grouping",
    "start": "471733",
    "end": "472666"
  },
  {
    "text": "by any other property.",
    "start": "472666",
    "end": "474533"
  },
  {
    "text": "And this is",
    "start": "474533",
    "end": "475033"
  },
  {
    "text": "because the time is usually",
    "start": "475033",
    "end": "476533"
  },
  {
    "text": "just another field in the table.",
    "start": "476533",
    "end": "479533"
  },
  {
    "text": "But in streaming",
    "start": "479700",
    "end": "480533"
  },
  {
    "text": "this is completely different.",
    "start": "480533",
    "end": "483533"
  },
  {
    "text": "Let's say we have the same stream",
    "start": "483933",
    "end": "486366"
  },
  {
    "text": "or color circle",
    "start": "486366",
    "end": "487500"
  },
  {
    "text": "as in the previous example,",
    "start": "487500",
    "end": "489200"
  },
  {
    "text": "but in this time,",
    "start": "489200",
    "end": "490333"
  },
  {
    "text": "instead of grouping by color,",
    "start": "490333",
    "end": "491700"
  },
  {
    "text": "we want to group them",
    "start": "491700",
    "end": "492700"
  },
  {
    "text": "by one minute intervals.",
    "start": "492700",
    "end": "495700"
  },
  {
    "text": "As we advance through the stream,",
    "start": "496800",
    "end": "498866"
  },
  {
    "text": "the time also advances.",
    "start": "498866",
    "end": "501866"
  },
  {
    "text": "And once the first minute is over,",
    "start": "504200",
    "end": "506066"
  },
  {
    "text": "we have a minute full of data",
    "start": "506066",
    "end": "507600"
  },
  {
    "text": "that we can aggregate and meet a result.",
    "start": "507600",
    "end": "510600"
  },
  {
    "text": "For example, count them.",
    "start": "510700",
    "end": "513700"
  },
  {
    "text": "On every minutes.",
    "start": "517366",
    "end": "518432"
  },
  {
    "text": "We aggregate the collected records,",
    "start": "518433",
    "end": "520500"
  },
  {
    "text": "calculate the aggregation,",
    "start": "520500",
    "end": "522400"
  },
  {
    "text": "and emit a new result,",
    "start": "522400",
    "end": "524700"
  },
  {
    "text": "and note",
    "start": "524700",
    "end": "525400"
  },
  {
    "text": "that we have one result per minute.",
    "start": "525400",
    "end": "528200"
  },
  {
    "text": "There is also another very",
    "start": "534366",
    "end": "535500"
  },
  {
    "text": "important factor",
    "start": "535500",
    "end": "536566"
  },
  {
    "text": "you may have noticed",
    "start": "536566",
    "end": "538333"
  },
  {
    "text": "when grouping over time.",
    "start": "538333",
    "end": "540200"
  },
  {
    "text": "We need to keep something over",
    "start": "540200",
    "end": "542633"
  },
  {
    "text": "multiple messages, at least the count.",
    "start": "542633",
    "end": "545400"
  },
  {
    "text": "In this simple example,",
    "start": "545400",
    "end": "547500"
  },
  {
    "text": "because this type of operation",
    "start": "547500",
    "end": "549566"
  },
  {
    "text": "is called stateful, we will see more",
    "start": "549566",
    "end": "552733"
  },
  {
    "text": "about stateful operation",
    "start": "552733",
    "end": "554399"
  },
  {
    "text": "in the next episode.",
    "start": "554400",
    "end": "555833"
  },
  {
    "text": "But before that,",
    "start": "555833",
    "end": "556866"
  },
  {
    "text": "let's take a closer",
    "start": "556866",
    "end": "558333"
  },
  {
    "text": "look to the operation.",
    "start": "558333",
    "end": "560200"
  },
  {
    "text": "We have time.",
    "start": "560200",
    "end": "563200"
  },
  {
    "text": "This type of aggregation",
    "start": "563600",
    "end": "565165"
  },
  {
    "text": "over time in Apache Flink",
    "start": "565166",
    "end": "566866"
  },
  {
    "text": "is called tumbling windows.",
    "start": "566866",
    "end": "569000"
  },
  {
    "text": "In processing time.",
    "start": "569000",
    "end": "571366"
  },
  {
    "text": "It's called",
    "start": "571366",
    "end": "572100"
  },
  {
    "text": "tumbling windows",
    "start": "572100",
    "end": "573266"
  },
  {
    "text": "because each window has a fixed duration,",
    "start": "573266",
    "end": "576333"
  },
  {
    "text": "and the next window",
    "start": "576333",
    "end": "577700"
  },
  {
    "text": "immediately follows the previous one.",
    "start": "577700",
    "end": "580266"
  },
  {
    "text": "Like windows are tumbling over each other",
    "start": "580266",
    "end": "583266"
  },
  {
    "text": "and it's called processing time,",
    "start": "584700",
    "end": "587366"
  },
  {
    "text": "because the time we are considering",
    "start": "587366",
    "end": "589133"
  },
  {
    "text": "is the current time, or the time",
    "start": "589133",
    "end": "591300"
  },
  {
    "text": "when we are processing the data.",
    "start": "591300",
    "end": "593066"
  },
  {
    "text": "Later in the series.",
    "start": "593066",
    "end": "595500"
  },
  {
    "text": "We will see that",
    "start": "595500",
    "end": "596900"
  },
  {
    "text": "this is not",
    "start": "596900",
    "end": "597600"
  },
  {
    "text": "the only concept of time in streaming.",
    "start": "597600",
    "end": "600600"
  },
  {
    "text": "Thank you for watching this video",
    "start": "600933",
    "end": "602933"
  },
  {
    "text": "and please leave a comment",
    "start": "602933",
    "end": "604200"
  },
  {
    "text": "with any question",
    "start": "604200",
    "end": "605366"
  },
  {
    "text": "you might have about the concepts",
    "start": "605366",
    "end": "607100"
  },
  {
    "text": "we introduced.",
    "start": "607100",
    "end": "608466"
  },
  {
    "text": "And stay tuned for the next video",
    "start": "608466",
    "end": "610700"
  },
  {
    "text": "where we will talk about",
    "start": "610700",
    "end": "612300"
  },
  {
    "text": "stateful stream processing.",
    "start": "612300",
    "end": "614433"
  }
]