[
  {
    "start": "0",
    "end": "30000"
  },
  {
    "text": "hello and welcome to the first episode",
    "start": "359",
    "end": "2760"
  },
  {
    "text": "of Amazon redshift quick bytes where it",
    "start": "2760",
    "end": "6060"
  },
  {
    "text": "shift Solutions architect present a new",
    "start": "6060",
    "end": "8160"
  },
  {
    "text": "feature of redshift in three minutes or",
    "start": "8160",
    "end": "10440"
  },
  {
    "text": "less",
    "start": "10440",
    "end": "12480"
  },
  {
    "text": "Amazon redshift is a fast fully managed",
    "start": "12480",
    "end": "15120"
  },
  {
    "text": "petabyte scale data warehouse service",
    "start": "15120",
    "end": "17100"
  },
  {
    "text": "that makes it simple and cost efficient",
    "start": "17100",
    "end": "19619"
  },
  {
    "text": "to analyze all your data",
    "start": "19619",
    "end": "22020"
  },
  {
    "text": "in this video we will go over the",
    "start": "22020",
    "end": "25080"
  },
  {
    "text": "recently released qualified clause in",
    "start": "25080",
    "end": "27660"
  },
  {
    "text": "redshift",
    "start": "27660",
    "end": "30140"
  },
  {
    "start": "30000",
    "end": "68000"
  },
  {
    "text": "qualified Clause does to the results of",
    "start": "30240",
    "end": "33120"
  },
  {
    "text": "a Windows function what the having",
    "start": "33120",
    "end": "35460"
  },
  {
    "text": "Clause does to aggregate functions",
    "start": "35460",
    "end": "37980"
  },
  {
    "text": "both these Clause help to apply complex",
    "start": "37980",
    "end": "40980"
  },
  {
    "text": "filtering conditions which may not be",
    "start": "40980",
    "end": "43379"
  },
  {
    "text": "achievable by simple where clause",
    "start": "43379",
    "end": "47399"
  },
  {
    "text": "you can use both the qualify and having",
    "start": "47399",
    "end": "49680"
  },
  {
    "text": "clause in the same query",
    "start": "49680",
    "end": "52500"
  },
  {
    "text": "qualify class is frequently used in",
    "start": "52500",
    "end": "54899"
  },
  {
    "text": "analytical queries",
    "start": "54899",
    "end": "57059"
  },
  {
    "text": "qualify Clause makes your query more",
    "start": "57059",
    "end": "59699"
  },
  {
    "text": "readable and avoids the use of subquery",
    "start": "59699",
    "end": "62399"
  },
  {
    "text": "or the with clause",
    "start": "62399",
    "end": "65820"
  },
  {
    "text": "let's move on to the demo now",
    "start": "65820",
    "end": "68820"
  },
  {
    "start": "68000",
    "end": "168000"
  },
  {
    "text": "here I have a table called Library which",
    "start": "68820",
    "end": "71700"
  },
  {
    "text": "stores the checkout dates of all my",
    "start": "71700",
    "end": "74100"
  },
  {
    "text": "movie titles",
    "start": "74100",
    "end": "75659"
  },
  {
    "text": "now see I want to find out what is the",
    "start": "75659",
    "end": "79380"
  },
  {
    "text": "latest checkout date for each of my",
    "start": "79380",
    "end": "81720"
  },
  {
    "text": "movie titles",
    "start": "81720",
    "end": "83759"
  },
  {
    "text": "to do that",
    "start": "83759",
    "end": "85320"
  },
  {
    "text": "I would probably rank the dates that",
    "start": "85320",
    "end": "89460"
  },
  {
    "text": "each of these movies were checked out",
    "start": "89460",
    "end": "91439"
  },
  {
    "text": "using a rank function and then",
    "start": "91439",
    "end": "95280"
  },
  {
    "text": "just filter on the rank is equal to 1",
    "start": "95280",
    "end": "98520"
  },
  {
    "text": "and I should be good right",
    "start": "98520",
    "end": "101100"
  },
  {
    "text": "wrong it throws an error the reason",
    "start": "101100",
    "end": "104460"
  },
  {
    "text": "being that the windows functions are",
    "start": "104460",
    "end": "107400"
  },
  {
    "text": "always evaluated after the where Clause",
    "start": "107400",
    "end": "110460"
  },
  {
    "text": "is evaluated other way is to use a",
    "start": "110460",
    "end": "114299"
  },
  {
    "text": "commentable expression",
    "start": "114299",
    "end": "116280"
  },
  {
    "text": "like this which will first run the",
    "start": "116280",
    "end": "119220"
  },
  {
    "text": "windows function and then use the output",
    "start": "119220",
    "end": "121920"
  },
  {
    "text": "of this Windows function as a filter in",
    "start": "121920",
    "end": "124799"
  },
  {
    "text": "the where clause and I should be able to",
    "start": "124799",
    "end": "127439"
  },
  {
    "text": "retrieve my results",
    "start": "127439",
    "end": "130220"
  },
  {
    "text": "but say I wanted to make my code a",
    "start": "132180",
    "end": "135000"
  },
  {
    "text": "little bit more readable I would then",
    "start": "135000",
    "end": "137520"
  },
  {
    "text": "use the word qualify Clause the",
    "start": "137520",
    "end": "139800"
  },
  {
    "text": "filtering on the rank is done with the",
    "start": "139800",
    "end": "142560"
  },
  {
    "text": "qualify Clause as opposed to the where",
    "start": "142560",
    "end": "144840"
  },
  {
    "text": "Clause when I run this I see my results",
    "start": "144840",
    "end": "148140"
  },
  {
    "text": "you'll see that the latest checkout date",
    "start": "148140",
    "end": "150780"
  },
  {
    "text": "is 7 7 for this movie and that brings us",
    "start": "150780",
    "end": "154319"
  },
  {
    "text": "to the end of the demo thank you for",
    "start": "154319",
    "end": "156840"
  },
  {
    "text": "watching for more details on Amazon",
    "start": "156840",
    "end": "158819"
  },
  {
    "text": "redshift check out the documentation and",
    "start": "158819",
    "end": "161459"
  },
  {
    "text": "blog links stated on the slide",
    "start": "161459",
    "end": "165080"
  }
]