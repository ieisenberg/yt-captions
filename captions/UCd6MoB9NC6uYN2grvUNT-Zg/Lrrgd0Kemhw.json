[
  {
    "start": "0",
    "end": "95000"
  },
  {
    "text": "good evening and welcome thank you for joining me after an exciting day of",
    "start": "350",
    "end": "6420"
  },
  {
    "text": "breakout sessions a quick show of hands does anyone fear that your continuous",
    "start": "6420",
    "end": "14040"
  },
  {
    "text": "delivery pipeline is gonna break your production environment I see some hands over here up over here",
    "start": "14040",
    "end": "21119"
  },
  {
    "text": "as well well if you do you're not alone this talk is about adding safety checks",
    "start": "21119",
    "end": "29039"
  },
  {
    "text": "to your continuous delivery pipeline I'm going to show you how to efficiently",
    "start": "29039",
    "end": "34260"
  },
  {
    "text": "test your changes before pushing them to production and how to add safety checks",
    "start": "34260",
    "end": "39329"
  },
  {
    "text": "in the deployment process in the production portion of your pipeline",
    "start": "39329",
    "end": "44930"
  },
  {
    "text": "hello my name is Curtis Bray and I own the continuous delivery tool AWS code",
    "start": "44930",
    "end": "51809"
  },
  {
    "text": "pipeline we're gonna make our production",
    "start": "51809",
    "end": "58590"
  },
  {
    "text": "pipeline safer by performing tests to block bad code changes before they reach",
    "start": "58590",
    "end": "64978"
  },
  {
    "text": "production we're gonna improve monitoring of production so that you can",
    "start": "64979",
    "end": "71340"
  },
  {
    "text": "identify production issues quickly we're",
    "start": "71340",
    "end": "76470"
  },
  {
    "text": "going to configure deployments so that our deployment engine only deploys changes safely and lastly we're going to",
    "start": "76470",
    "end": "85590"
  },
  {
    "text": "modify the behavior of our pipeline so that we only deploy to production when",
    "start": "85590",
    "end": "91140"
  },
  {
    "text": "it's safe to do so now the techniques that we're going to",
    "start": "91140",
    "end": "97439"
  },
  {
    "start": "95000",
    "end": "95000"
  },
  {
    "text": "use our leveraging automated testing to quickly identify regressions before they",
    "start": "97439",
    "end": "104520"
  },
  {
    "text": "reach production we're going to continuously test production to identify",
    "start": "104520",
    "end": "110759"
  },
  {
    "text": "any functional regressions quickly and we're going to validate running software",
    "start": "110759",
    "end": "116520"
  },
  {
    "text": "on each host at deployment time this ensures that our deployments are successful BIGBANG deployments can be",
    "start": "116520",
    "end": "126450"
  },
  {
    "text": "dangerous so instead what we want to do is segment production and deploy to each",
    "start": "126450",
    "end": "131610"
  },
  {
    "text": "segment separately and then when production is unwell and",
    "start": "131610",
    "end": "137520"
  },
  {
    "text": "we don't know why we're gonna halt promotions into production to help stabilize the environment now key",
    "start": "137520",
    "end": "147900"
  },
  {
    "text": "components to being successful at continuous delivery is to have an automated release process this means",
    "start": "147900",
    "end": "156630"
  },
  {
    "start": "154000",
    "end": "154000"
  },
  {
    "text": "you're using version control for your source code you've automated your build",
    "start": "156630",
    "end": "162960"
  },
  {
    "text": "and your and your deployment steps you",
    "start": "162960",
    "end": "168750"
  },
  {
    "text": "likely deployed them to more than one host and you've also written unit tests",
    "start": "168750",
    "end": "174300"
  },
  {
    "text": "and integration tests that you can rely on to capture regressions quickly you've",
    "start": "174300",
    "end": "182190"
  },
  {
    "text": "then tied this all together with either a homegrown script or an off-the-shelf product to create a pipeline in addition",
    "start": "182190",
    "end": "191660"
  },
  {
    "text": "you've set up some operational dashboards so that you can monitor the health of your production environment in",
    "start": "191660",
    "end": "199430"
  },
  {
    "text": "the end this means your automated process your pipeline would look something like this",
    "start": "199430",
    "end": "206750"
  },
  {
    "start": "210000",
    "end": "210000"
  },
  {
    "text": "so at a high level this talk is focused on deployment and release automation",
    "start": "212300",
    "end": "218290"
  },
  {
    "text": "best practices the techniques I'm going to use should be transferable to",
    "start": "218290",
    "end": "224420"
  },
  {
    "text": "whatever tools you're using today that may mean you need to extend those tools",
    "start": "224420",
    "end": "229910"
  },
  {
    "text": "but that's all part of building out your continuous delivery pipeline I believe",
    "start": "229910",
    "end": "238070"
  },
  {
    "text": "that these practices are easier to understand when they're made concrete so for this talk I'm gonna use our AWS",
    "start": "238070",
    "end": "244580"
  },
  {
    "text": "tools to demonstrate each of the techniques we're gonna use four",
    "start": "244580",
    "end": "253010"
  },
  {
    "start": "251000",
    "end": "251000"
  },
  {
    "text": "different categories of tools in this top monitoring software development",
    "start": "253010",
    "end": "259150"
  },
  {
    "text": "build and test and deploy 'men tools for",
    "start": "259150",
    "end": "264740"
  },
  {
    "text": "monitoring we want to be able to listen to production and have it send us alarms when things go bad we're gonna use cloud",
    "start": "264740",
    "end": "272870"
  },
  {
    "text": "watch for events metrics and alarms",
    "start": "272870",
    "end": "278680"
  },
  {
    "text": "we're gonna extend our release process with some software development tools in",
    "start": "280870",
    "end": "286160"
  },
  {
    "text": "this case SNS and lambda are going to provide us with the tools we need to extend code pipelines behavior well",
    "start": "286160",
    "end": "295850"
  },
  {
    "text": "you'd will use code build as our fully managed build service where we're gonna",
    "start": "295850",
    "end": "301220"
  },
  {
    "text": "be able to compile our code and run our tests and then package it in a form that's ready for deployment and lastly",
    "start": "301220",
    "end": "311030"
  },
  {
    "text": "we're gonna use some deployment tools to ship our code into production will be",
    "start": "311030",
    "end": "316310"
  },
  {
    "text": "using code deploy to deploy on to our ec2 instances and then we're gonna use",
    "start": "316310",
    "end": "322310"
  },
  {
    "text": "code pipeline as our continuous delivery service that's going to automate that end-to-end process okay",
    "start": "322310",
    "end": "332570"
  },
  {
    "start": "330000",
    "end": "330000"
  },
  {
    "text": "now let's translate this abstract release process into code pipeline again",
    "start": "332570",
    "end": "338270"
  },
  {
    "text": "you should be able to translate this into whatever pipeline tools you're already using today",
    "start": "338270",
    "end": "343570"
  },
  {
    "text": "so you can see our five actions from our and our end-to-end release process map",
    "start": "343570",
    "end": "349300"
  },
  {
    "text": "onto code pipeline like this so a pipeline models our workflow from end to",
    "start": "349300",
    "end": "357340"
  },
  {
    "text": "end within our pipeline we can have stages and you can think of stages as",
    "start": "357340",
    "end": "363850"
  },
  {
    "text": "groups of actions in action or a plug-in",
    "start": "363850",
    "end": "369610"
  },
  {
    "text": "is what acts upon the current revision that's moving through your pipeline this",
    "start": "369610",
    "end": "376780"
  },
  {
    "text": "is where the actual work happens in your pipeline stages can then be connected by",
    "start": "376780",
    "end": "384400"
  },
  {
    "text": "transitions and in our console we represent these by an arrow between each stage transitions can be enabled or",
    "start": "384400",
    "end": "392530"
  },
  {
    "text": "disabled and when you disable a transition that's how you can prevent changes from being promoted into",
    "start": "392530",
    "end": "399640"
  },
  {
    "text": "production each time a new change is",
    "start": "399640",
    "end": "405010"
  },
  {
    "text": "committed into your source location a new pipeline run is triggered this new",
    "start": "405010",
    "end": "412450"
  },
  {
    "text": "code changed and passes through all the actions in the pipeline and many pipelines in the final stage that's",
    "start": "412450",
    "end": "419380"
  },
  {
    "text": "where a deployment to production happens",
    "start": "419380",
    "end": "423000"
  },
  {
    "start": "423000",
    "end": "423000"
  },
  {
    "text": "so our pipeline is configured to use code deploy and we're going to use it to",
    "start": "425460",
    "end": "430900"
  },
  {
    "text": "deploy to three hosts the defaults in code deploy are to deploy to one host at",
    "start": "430900",
    "end": "438160"
  },
  {
    "text": "a time but we're gonna modify this slide throughout the talk and we're going to",
    "start": "438160",
    "end": "443260"
  },
  {
    "text": "see how our techniques are going to change our release our deployment and our production environment",
    "start": "443260",
    "end": "451320"
  },
  {
    "text": "so now that we've got the prerequisites out of the way let's move on to our first technique the first a quick story",
    "start": "455370",
    "end": "464039"
  },
  {
    "text": "so when your team writes software there's bound to be tests that slip by",
    "start": "464039",
    "end": "469389"
  },
  {
    "text": "local developer box testing I remember a team in a situation where they needed to",
    "start": "469389",
    "end": "475330"
  },
  {
    "text": "push out an urgent bug fix through their pipeline as they got ready to push that",
    "start": "475330",
    "end": "480879"
  },
  {
    "text": "change they noticed that they'd been committing regular code changes for the last couple weeks but none had actually",
    "start": "480879",
    "end": "487840"
  },
  {
    "text": "been reaching production due to a failed integration test the team was busy",
    "start": "487840",
    "end": "493180"
  },
  {
    "text": "writing software but lost sight of tracking that software all the way out to their production boxes if the team",
    "start": "493180",
    "end": "501340"
  },
  {
    "text": "had more proactive notifications of their test failures then they would have had better hygiene of their pipeline and",
    "start": "501340",
    "end": "508180"
  },
  {
    "text": "would have been more confident of making this urgent change knowing that it was",
    "start": "508180",
    "end": "513190"
  },
  {
    "text": "going to be the only thing being pushed to production at that time so let's not",
    "start": "513190",
    "end": "520000"
  },
  {
    "text": "be this guy let's make sure that we have reliable automated tests in creep in a",
    "start": "520000",
    "end": "527350"
  },
  {
    "text": "pre-production environment that don't slow down that doesn't slow down our release pipeline the takeaway here is",
    "start": "527350",
    "end": "537190"
  },
  {
    "text": "that although we're committing code it doesn't mean our customers are getting that benefit if our continuous delivery",
    "start": "537190",
    "end": "542920"
  },
  {
    "text": "pipeline is blocked so some integration tests can take multiple hours or longer",
    "start": "542920",
    "end": "548920"
  },
  {
    "text": "to run so it's not realistic that the developers would sit there and manually watch for success or failure from the",
    "start": "548920",
    "end": "555699"
  },
  {
    "text": "test so to solve this problem we need to",
    "start": "555699",
    "end": "561940"
  },
  {
    "text": "automate the notification of test failures and we need to deliver it to a place where the developers live and that",
    "start": "561940",
    "end": "569470"
  },
  {
    "text": "would keep the test and the pipeline in good health so for each build the suite of unit",
    "start": "569470",
    "end": "575440"
  },
  {
    "text": "tests should be run automatically once built it would be deployed to a",
    "start": "575440",
    "end": "581709"
  },
  {
    "text": "dedication dedicated integration environment the integration environment then can be",
    "start": "581709",
    "end": "588790"
  },
  {
    "text": "used to test multiple software components together and to run other automated tests like UI testing if any",
    "start": "588790",
    "end": "599320"
  },
  {
    "text": "of those automated tests fail the development team can be notified in their chat room immediately to rectify",
    "start": "599320",
    "end": "606190"
  },
  {
    "text": "the issue so let's look how at how we",
    "start": "606190",
    "end": "611470"
  },
  {
    "text": "can utilize code bill as our container for building our software and running our automated test executions",
    "start": "611470",
    "end": "620040"
  },
  {
    "start": "620000",
    "end": "620000"
  },
  {
    "text": "now again each commit of your source repository is going to trigger a source change then it'll be automatically built",
    "start": "621390",
    "end": "629740"
  },
  {
    "text": "in unit tested and the application will be deployed to your dedicated integration environment at that point",
    "start": "629740",
    "end": "638350"
  },
  {
    "text": "additional integration and browser tests can be run in parallel against that integration environment now here's the",
    "start": "638350",
    "end": "648310"
  },
  {
    "start": "647000",
    "end": "647000"
  },
  {
    "text": "screenshot of showing how to configure cloud watch events when a particular action fails in your pipeline in the",
    "start": "648310",
    "end": "657640"
  },
  {
    "text": "event source we can select all code pipeline actions then we select the",
    "start": "657640",
    "end": "664510"
  },
  {
    "text": "state of failed we can then configure the failure event to trigger a lambda",
    "start": "664510",
    "end": "672160"
  },
  {
    "text": "function using that lambda function will",
    "start": "672160",
    "end": "677200"
  },
  {
    "text": "then notify our slack or our chime chat rooms and then cloud watch can even",
    "start": "677200",
    "end": "682959"
  },
  {
    "text": "allow you to further refine the filter down to a specific pipeline or specific",
    "start": "682959",
    "end": "688839"
  },
  {
    "text": "action or action type",
    "start": "688839",
    "end": "691920"
  },
  {
    "start": "694000",
    "end": "694000"
  },
  {
    "text": "so now let's take a look at that from the end-to-end flow the change enters",
    "start": "695260",
    "end": "700370"
  },
  {
    "text": "our pipeline it's built unit tested and deployed but in this case a failed UI",
    "start": "700370",
    "end": "706670"
  },
  {
    "text": "test would then trigger a cloud watch event that event triggers our lambda",
    "start": "706670",
    "end": "713390"
  },
  {
    "text": "function that notifies the developer chatroom now it's important to know that",
    "start": "713390",
    "end": "719720"
  },
  {
    "text": "every change that moves or the pipeline is going to send a unique notification if it failed and each of those",
    "start": "719720",
    "end": "726260"
  },
  {
    "text": "notifications would detail the exact change and action that failed okay that",
    "start": "726260",
    "end": "736910"
  },
  {
    "text": "covers our first automated testing technique now we all run complex systems",
    "start": "736910",
    "end": "745580"
  },
  {
    "text": "and they can often break in some unexpected ways I remember a time where",
    "start": "745580",
    "end": "750830"
  },
  {
    "text": "a team had a Buy button disappear from their website the site had some",
    "start": "750830",
    "end": "756500"
  },
  {
    "text": "downstream dependencies on an inventory management system that system started returning empty pricing data so the site",
    "start": "756500",
    "end": "763460"
  },
  {
    "text": "simply stopped showing the button the team was unaware of the issue until a",
    "start": "763460",
    "end": "769040"
  },
  {
    "text": "customer actually contacted them and told them of the problem when they were trying to buy items if the team had",
    "start": "769040",
    "end": "775760"
  },
  {
    "text": "better information about the state of their service they might have been able to fix the issue before the customer",
    "start": "775760",
    "end": "781220"
  },
  {
    "text": "even discovered it so lesson to take away here is that although our service",
    "start": "781220",
    "end": "787760"
  },
  {
    "text": "is working currently at one point in time it doesn't guarantee that it won't",
    "start": "787760",
    "end": "793730"
  },
  {
    "text": "stop working at a later point in time there's a wide range of reasons the",
    "start": "793730",
    "end": "799070"
  },
  {
    "text": "service may degrade including dependency or environmental changes these",
    "start": "799070",
    "end": "806570"
  },
  {
    "text": "regressions and our service aren't caught with our standard monitoring so",
    "start": "806570",
    "end": "813440"
  },
  {
    "start": "812000",
    "end": "812000"
  },
  {
    "text": "to solve this problem we can use synthetic traffic to simulate real users",
    "start": "813440",
    "end": "819410"
  },
  {
    "text": "and identify problems before the customers run into the issues",
    "start": "819410",
    "end": "824949"
  },
  {
    "text": "our synthetic traffic needs to test all business critical functionality we want",
    "start": "825430",
    "end": "832070"
  },
  {
    "text": "our synthetic tests to behave like real customers do so this would typically mean you would authenticate add an item",
    "start": "832070",
    "end": "838610"
  },
  {
    "text": "to a cart and checkout but it's important not to just test the user interface but also want the public ap is",
    "start": "838610",
    "end": "845420"
  },
  {
    "text": "the tests need to run quickly so that",
    "start": "845420",
    "end": "850550"
  },
  {
    "text": "you get feedback fast the longer the test runs the more likely your customer",
    "start": "850550",
    "end": "855830"
  },
  {
    "text": "is going to find the issue before you do so a good target is halved at your test run in about a minute since we're",
    "start": "855830",
    "end": "865430"
  },
  {
    "text": "simulating user interaction with our site we can test the speed at which our",
    "start": "865430",
    "end": "872660"
  },
  {
    "text": "calls return from the customers perspective and tell if the customer experience is degrading we can also test",
    "start": "872660",
    "end": "883220"
  },
  {
    "text": "to see if the customer if our site is reachable by our customers the system",
    "start": "883220",
    "end": "889340"
  },
  {
    "text": "may be up but for some reason traffic from our customers may be blocked and not being received all right so let's",
    "start": "889340",
    "end": "899780"
  },
  {
    "text": "look at the flow of how synthetic traffic works when a customer use our",
    "start": "899780",
    "end": "904940"
  },
  {
    "text": "service we return this successful result back to our customer and then report",
    "start": "904940",
    "end": "910970"
  },
  {
    "text": "success to our monitoring system the system in this case cloud watch our",
    "start": "910970",
    "end": "918860"
  },
  {
    "start": "917000",
    "end": "917000"
  },
  {
    "text": "synthetic traffic has the same workflow it makes a request to our service our service reports success to cloud watch",
    "start": "918860",
    "end": "927370"
  },
  {
    "text": "but then our cert are synthetic tests also sends results back to our",
    "start": "927760",
    "end": "934160"
  },
  {
    "text": "monitoring system the synthetic traffic metric will let us know if this critical",
    "start": "934160",
    "end": "942260"
  },
  {
    "text": "business functionality is no longer working it provides us with data also to",
    "start": "942260",
    "end": "947840"
  },
  {
    "text": "then measure the client latency and reach ability now we're going to",
    "start": "947840",
    "end": "953060"
  },
  {
    "text": "schedule these synthetic tests to happen once a minute with cloud watch",
    "start": "953060",
    "end": "959290"
  },
  {
    "text": "when our synthetic test fails then it",
    "start": "959820",
    "end": "964840"
  },
  {
    "text": "will issue an alert and raise an alarm through cloud watch at that point our",
    "start": "964840",
    "end": "970540"
  },
  {
    "text": "operators can respond and fix the issue now with this particular setup",
    "start": "970540",
    "end": "975730"
  },
  {
    "text": "we're not provisioning any new hosts into our fleet to run these tests so why",
    "start": "975730",
    "end": "984520"
  },
  {
    "text": "don't we have two metric streams it may not be obvious why both our service and our synthetic traffic tester both send",
    "start": "984520",
    "end": "991120"
  },
  {
    "text": "the results to cloud watch so if we think back to that earlier story where the site no longer displayed the Buy",
    "start": "991120",
    "end": "997750"
  },
  {
    "text": "button the customers will continue to use your website and be unable to see",
    "start": "997750",
    "end": "1003810"
  },
  {
    "text": "the Buy button but all the monitoring data from your service reports healthy",
    "start": "1003810",
    "end": "1009690"
  },
  {
    "text": "because the customer interactions will work however from the synthetic testing",
    "start": "1009690",
    "end": "1016470"
  },
  {
    "text": "point of view the business critical functionality is missing so the synthetic tester will then report an",
    "start": "1016470",
    "end": "1023280"
  },
  {
    "text": "error back to cloud watch to trigger an alarm so the problem can be resolved",
    "start": "1023280",
    "end": "1029449"
  },
  {
    "text": "so now let's build out one of these synthetic traffic tests we're gonna",
    "start": "1042180",
    "end": "1048329"
  },
  {
    "text": "build the synthetic test in lambda and have it run every minute in this example",
    "start": "1048330",
    "end": "1054410"
  },
  {
    "text": "we're not gonna build a complex test that's gonna simulate all customer interaction but instead we're gonna do",
    "start": "1054410",
    "end": "1060570"
  },
  {
    "text": "something a little simpler we're gonna test that we can access the website by",
    "start": "1060570",
    "end": "1067440"
  },
  {
    "text": "making an HTTP call and validate the contents of the response we're gonna use",
    "start": "1067440",
    "end": "1075240"
  },
  {
    "text": "lambda to run our tests and then we'll use cloud watch to capture the data from",
    "start": "1075240",
    "end": "1081480"
  },
  {
    "text": "the test the lambda console has sample",
    "start": "1081480",
    "end": "1087570"
  },
  {
    "start": "1085000",
    "end": "1085000"
  },
  {
    "text": "applications called blueprints and these can help you get started building out functions very quickly lambda has a",
    "start": "1087570",
    "end": "1096090"
  },
  {
    "text": "blueprint for synthetic tests that we're gonna use in this case Canaries are a",
    "start": "1096090",
    "end": "1102510"
  },
  {
    "text": "term used by our internal teams at Amazon for a synthetic test which is why",
    "start": "1102510",
    "end": "1107790"
  },
  {
    "text": "we use the term canary here now during",
    "start": "1107790",
    "end": "1114000"
  },
  {
    "start": "1113000",
    "end": "1113000"
  },
  {
    "text": "blueprint configuration you can also select to invoke the lambda function on",
    "start": "1114000",
    "end": "1120180"
  },
  {
    "text": "a schedule with a cloud watch event now",
    "start": "1120180",
    "end": "1125430"
  },
  {
    "text": "here's the Python code that's created by our lambda blueprint we're gonna define",
    "start": "1125430",
    "end": "1130980"
  },
  {
    "text": "the URL that we're gonna test and the text that we're looking for AWS code",
    "start": "1130980",
    "end": "1136680"
  },
  {
    "text": "pipeline the URL open method does the actual work of making the request to our",
    "start": "1136680",
    "end": "1145230"
  },
  {
    "text": "site and then the validate method looks for the text on the page now it's very",
    "start": "1145230",
    "end": "1151860"
  },
  {
    "text": "important to return the write status report status codes because those are what are fed to cloud watch if there's a",
    "start": "1151860",
    "end": "1160530"
  },
  {
    "text": "failure lambda will raise an exception otherwise it will exit normally",
    "start": "1160530",
    "end": "1168529"
  },
  {
    "text": "lambda functions automatically report their health of each of their calls as cloud watch metrics streams so in this",
    "start": "1171850",
    "end": "1180860"
  },
  {
    "text": "screenshot you can see a number of lambda functions that have been created and then I can graph the metrics that",
    "start": "1180860",
    "end": "1187190"
  },
  {
    "text": "are important to me by selecting them in the console and also build alarms off of",
    "start": "1187190",
    "end": "1192950"
  },
  {
    "text": "those metrics in this case we want to build two alarms one if the synthetic",
    "start": "1192950",
    "end": "1198470"
  },
  {
    "text": "test fails and the other alarm would be when we're receiving no traffic so for",
    "start": "1198470",
    "end": "1204620"
  },
  {
    "text": "some reason the test isn't running now if the canary fails our operator is",
    "start": "1204620",
    "end": "1210740"
  },
  {
    "text": "going to get notification immediately so",
    "start": "1210740",
    "end": "1216620"
  },
  {
    "text": "the process to release and deploy changes isn't altered at all by the addition of these additional synthetic",
    "start": "1216620",
    "end": "1223130"
  },
  {
    "text": "the additional synthetic traffic but it does provide us with valuable data on",
    "start": "1223130",
    "end": "1228529"
  },
  {
    "text": "the health of our service which we're going to use soon",
    "start": "1228529",
    "end": "1233648"
  },
  {
    "text": "now one of our teams had built an internal service and they were getting ready to launch an Operations dashboard",
    "start": "1236770",
    "end": "1244300"
  },
  {
    "text": "review is a standard process that we use when we're preparing to release a new service in that review of the dashboard",
    "start": "1244300",
    "end": "1251940"
  },
  {
    "text": "we noticed that the service had been unavailable and upon deeper inspection",
    "start": "1251940",
    "end": "1257410"
  },
  {
    "text": "we found out that during one of the deployments a database table had been renamed so the development team had",
    "start": "1257410",
    "end": "1264340"
  },
  {
    "text": "fixed the table and redeployed and didn't think much of it but during that deployment window not one host in their",
    "start": "1264340",
    "end": "1271120"
  },
  {
    "text": "fleet was serving traffic they were completely down the team wasn't checking whether their deployment has succeeded",
    "start": "1271120",
    "end": "1277540"
  },
  {
    "text": "they actually had a bug in their deployment process so if this had",
    "start": "1277540",
    "end": "1283450"
  },
  {
    "text": "happened a week later it would have been much more catastrophic because the service would have been live so let's",
    "start": "1283450",
    "end": "1290770"
  },
  {
    "text": "look at how we can prevent this from happening to you in the future",
    "start": "1290770",
    "end": "1295470"
  },
  {
    "text": "now again we're using code deploy for all of our deployments here code deploy",
    "start": "1296309",
    "end": "1303040"
  },
  {
    "text": "will deploy rolling updates to ec2 instances as you can see each host is",
    "start": "1303040",
    "end": "1309070"
  },
  {
    "text": "taken out of the load balancer the version is updated and then it's placed back into the load balancer but rolling",
    "start": "1309070",
    "end": "1318940"
  },
  {
    "text": "deployments by themselves don't verify that the application is working when the instance is updated this means if you",
    "start": "1318940",
    "end": "1326590"
  },
  {
    "text": "accidentally made a change and your application stopped working you could",
    "start": "1326590",
    "end": "1332080"
  },
  {
    "text": "easily find your fleet broken and completely unable to serve traffic so by",
    "start": "1332080",
    "end": "1340210"
  },
  {
    "text": "default deployment systems are unaware of application specific logic including",
    "start": "1340210",
    "end": "1345700"
  },
  {
    "text": "whether the new code actually works this means we don't know if the deployment",
    "start": "1345700",
    "end": "1350830"
  },
  {
    "text": "has left our service running or whether it's broken",
    "start": "1350830",
    "end": "1355500"
  },
  {
    "start": "1357000",
    "end": "1357000"
  },
  {
    "text": "rolling deployments need three checks four deployments to be safe the first",
    "start": "1357270",
    "end": "1364270"
  },
  {
    "text": "check we need to do is for each host that we deploy to we should start up the application and then quickly verify that",
    "start": "1364270",
    "end": "1371410"
  },
  {
    "text": "the applications working second we need to configure our deployment engine to",
    "start": "1371410",
    "end": "1378370"
  },
  {
    "text": "tolerate a small number of failures and lastly if the deployment fails we need",
    "start": "1378370",
    "end": "1384730"
  },
  {
    "text": "to roll back to a previous version so",
    "start": "1384730",
    "end": "1389740"
  },
  {
    "text": "let's look at how we can make these three changes in code deploy code deploy",
    "start": "1389740",
    "end": "1396850"
  },
  {
    "start": "1393000",
    "end": "1393000"
  },
  {
    "text": "can be configured to run scripts a different part of the deployment lifecycle the apps a KML file defines",
    "start": "1396850",
    "end": "1405429"
  },
  {
    "text": "those life cycles and the scripts to run the lifecycle hook the last one that",
    "start": "1405429",
    "end": "1413410"
  },
  {
    "text": "we're interested in here the validate service hook is at the point where the",
    "start": "1413410",
    "end": "1419320"
  },
  {
    "text": "application is started up and we can validate that it's running and return invalid results before adding it back",
    "start": "1419320",
    "end": "1426250"
  },
  {
    "text": "into the load balancer so let's look at",
    "start": "1426250",
    "end": "1432940"
  },
  {
    "start": "1430000",
    "end": "1430000"
  },
  {
    "text": "our deployment process once we've added the deployment validation steps during our hosts updates now when a deployment",
    "start": "1432940",
    "end": "1441549"
  },
  {
    "text": "occurs and a host fails to startup will fail the hosts deployment and not put it",
    "start": "1441549",
    "end": "1448660"
  },
  {
    "text": "back into the load balancer now we fix the problem of only adding hosts back",
    "start": "1448660",
    "end": "1454270"
  },
  {
    "text": "into service if they can serve traffic but from a deployment perspective it's",
    "start": "1454270",
    "end": "1460720"
  },
  {
    "text": "still live it will have failed and it's unlikely that we want in fail our entire",
    "start": "1460720",
    "end": "1466210"
  },
  {
    "text": "deployment just because one host failed to startup imagine you run a large",
    "start": "1466210",
    "end": "1471790"
  },
  {
    "text": "service and a you have a fleet of hundreds of hosts in this case if a host",
    "start": "1471790",
    "end": "1478000"
  },
  {
    "text": "fails to update you want to quarantine that host and continue deploying to the rest of the fleet in this example we're",
    "start": "1478000",
    "end": "1486850"
  },
  {
    "text": "also left with the host with the fleet in an inconsistent date so let's see how we can fix both of",
    "start": "1486850",
    "end": "1493989"
  },
  {
    "text": "those issues and this is where code deploys minimum healthy hosts can help",
    "start": "1493989",
    "end": "1499779"
  },
  {
    "start": "1494000",
    "end": "1494000"
  },
  {
    "text": "us out the minimum healthy host setting defines the percentage of hosts that",
    "start": "1499779",
    "end": "1506470"
  },
  {
    "text": "must be healthy for a deployment to continue let's look at an example where",
    "start": "1506470",
    "end": "1511809"
  },
  {
    "text": "we have a fleet of our 10 hosts and we've set our minimum healthy host percentage to 70%",
    "start": "1511809",
    "end": "1518940"
  },
  {
    "text": "if one hosts fails their deployment then the overall deployment will succeed in",
    "start": "1518940",
    "end": "1525989"
  },
  {
    "text": "this scenario 90% of our hosts are healthy however if four hosts had failed",
    "start": "1525989",
    "end": "1533769"
  },
  {
    "text": "their deployment then the overall deployment would fail in this scenario",
    "start": "1533769",
    "end": "1539080"
  },
  {
    "text": "only 60% of our hosts are healthy but also notice that we have one host that",
    "start": "1539080",
    "end": "1544960"
  },
  {
    "text": "wasn't deployed to because the deployment failed",
    "start": "1544960",
    "end": "1549119"
  },
  {
    "text": "now code deploy supports the minimum healthy host setting via deployment configuration by default code deploy",
    "start": "1550710",
    "end": "1559059"
  },
  {
    "text": "will update one host at a time but it also provides the ability to update all hosts at once or half at a time if these",
    "start": "1559059",
    "end": "1568119"
  },
  {
    "text": "options aren't suitable for you then you can also define your own percentage via the CLI",
    "start": "1568119",
    "end": "1574528"
  },
  {
    "start": "1578000",
    "end": "1578000"
  },
  {
    "text": "so by using validation tests and minimum healthy hosts we're gonna prevent a large number of availability issues",
    "start": "1578810",
    "end": "1585140"
  },
  {
    "text": "caused by bad code changes but after failed deployment we still have part of the fleet running the old code and part",
    "start": "1585140",
    "end": "1592400"
  },
  {
    "text": "of our fleet not in service so code deploy will roll back to a previous",
    "start": "1592400",
    "end": "1598040"
  },
  {
    "text": "application version if the deployment fails and the rollback option is selected this should then restore your",
    "start": "1598040",
    "end": "1605750"
  },
  {
    "text": "fleet to a healthy state so managing",
    "start": "1605750",
    "end": "1613250"
  },
  {
    "start": "1611000",
    "end": "1611000"
  },
  {
    "text": "deployment health doesn't affect our release process but it does change our deployment process after a host is",
    "start": "1613250",
    "end": "1619640"
  },
  {
    "text": "updated we need to test if the newly deployed code works and to do this we",
    "start": "1619640",
    "end": "1624860"
  },
  {
    "text": "write tests to validate the running service we can use minimum healthy hosts",
    "start": "1624860",
    "end": "1630920"
  },
  {
    "text": "to allow a few hosts to fail our deployment and quarantine them for later",
    "start": "1630920",
    "end": "1636160"
  },
  {
    "text": "if the deployment breaches are minimal healthy in host setting then we're gonna roll back and repair the fleet",
    "start": "1636280",
    "end": "1643570"
  },
  {
    "text": "okay next let's talk about segmenting production so I remember team as part of",
    "start": "1646640",
    "end": "1654300"
  },
  {
    "text": "their release process they broke the ability to add items into the cart the",
    "start": "1654300",
    "end": "1659400"
  },
  {
    "text": "team had already implemented synthetic traffic testing so they caught the issue",
    "start": "1659400",
    "end": "1664530"
  },
  {
    "text": "very quickly and they roll back their change unfortunately the service they",
    "start": "1664530",
    "end": "1670020"
  },
  {
    "text": "broke received a lot of traffic so customers were calling in and emailing and tweeting frustrated that they",
    "start": "1670020",
    "end": "1676380"
  },
  {
    "text": "couldn't add items the service was only unavailable for a brief period of time",
    "start": "1676380",
    "end": "1682500"
  },
  {
    "text": "but it affected all of their customers so let's not deploy in a manner that's",
    "start": "1682500",
    "end": "1690450"
  },
  {
    "text": "gonna impact every customer even if that's what the grumpy cat wants you to do if you leave production as one big",
    "start": "1690450",
    "end": "1701010"
  },
  {
    "text": "pool then any bad change can affect all customers and that blast radius is just",
    "start": "1701010",
    "end": "1706560"
  },
  {
    "text": "too large for many services to reduce",
    "start": "1706560",
    "end": "1712890"
  },
  {
    "text": "the risk of a bug impacting production we can then segment our fleet into",
    "start": "1712890",
    "end": "1717990"
  },
  {
    "text": "multiple smaller sections and deploy to one segment at a time after each",
    "start": "1717990",
    "end": "1725550"
  },
  {
    "text": "deployment we can then run our post deployment tests before we move on and deploy to the next segment we keep",
    "start": "1725550",
    "end": "1734640"
  },
  {
    "text": "deploying and testing until all of our production fleet is updated so let's",
    "start": "1734640",
    "end": "1742920"
  },
  {
    "text": "look at the different ways that we could segment production the first step is to",
    "start": "1742920",
    "end": "1749010"
  },
  {
    "start": "1745000",
    "end": "1745000"
  },
  {
    "text": "break your your production environment down into multiple segments and you can think of a segment as a deployment blast",
    "start": "1749010",
    "end": "1756300"
  },
  {
    "text": "radius so some typical segment types could first be a region in AWS region is a",
    "start": "1756300",
    "end": "1765570"
  },
  {
    "text": "physical location around the world where we cluster data centers and we always segment deployments to at least a region",
    "start": "1765570",
    "end": "1772830"
  },
  {
    "text": "level we tend to deploy to one region at a time",
    "start": "1772830",
    "end": "1777980"
  },
  {
    "text": "so that the blast radius for a change is limited to a single region we call each",
    "start": "1777980",
    "end": "1784610"
  },
  {
    "text": "group of logical data centers and availability zone and the zonal",
    "start": "1784610",
    "end": "1789889"
  },
  {
    "text": "deployment pattern then allows us to tie software changes to network topologies",
    "start": "1789889",
    "end": "1795250"
  },
  {
    "text": "by deploying to a zone at a time we can reduce the risk of a bad change affecting the entire region but even a",
    "start": "1795250",
    "end": "1804919"
  },
  {
    "text": "zone can be a too large of a blast radius for many services so we can",
    "start": "1804919",
    "end": "1812149"
  },
  {
    "text": "create deployment segments that are sub-zone we see larger teams at AWS",
    "start": "1812149",
    "end": "1817809"
  },
  {
    "text": "structure their deployments into sub zonal cells but all teams want to gain",
    "start": "1817809",
    "end": "1826220"
  },
  {
    "text": "some confidence in their deployment before they start rolling it out into other segments and these customers would",
    "start": "1826220",
    "end": "1834679"
  },
  {
    "text": "deploy to a single host a canary deployment before continuing out to the rest of their fleet so here your release",
    "start": "1834679",
    "end": "1845630"
  },
  {
    "start": "1844000",
    "end": "1844000"
  },
  {
    "text": "process changes to reflect the level of safety you want to achieve the minimum",
    "start": "1845630",
    "end": "1851480"
  },
  {
    "text": "configuration I see is one canary deployment and then the deployment to",
    "start": "1851480",
    "end": "1857539"
  },
  {
    "text": "the remainder of the region a more common pattern is to deploy to three",
    "start": "1857539",
    "end": "1863809"
  },
  {
    "text": "zones each with three hosts having many hosts over many zones helps us with our",
    "start": "1863809",
    "end": "1871639"
  },
  {
    "text": "availability because we can lose an entire availability zone and still have 66% of our hosts available to serve",
    "start": "1871639",
    "end": "1878360"
  },
  {
    "text": "customer traffic now to manage costs we could migrate to smaller instance sizes",
    "start": "1878360",
    "end": "1886269"
  },
  {
    "text": "as we start deploying to production we'll only deploy to one host will",
    "start": "1886269",
    "end": "1892669"
  },
  {
    "text": "validate that hosts in our post deployment tests and if all goes well we'll start deploying our hosts to the",
    "start": "1892669",
    "end": "1898909"
  },
  {
    "text": "next deployment group if that first zonal deployment is",
    "start": "1898909",
    "end": "1905510"
  },
  {
    "text": "successful then we can perform our post deployment tests and deploy to the",
    "start": "1905510",
    "end": "1910670"
  },
  {
    "text": "remaining zones so now let's model these",
    "start": "1910670",
    "end": "1917360"
  },
  {
    "start": "1916000",
    "end": "1916000"
  },
  {
    "text": "different segments in code deploy code deploy uses deployment groups to group",
    "start": "1917360",
    "end": "1924170"
  },
  {
    "text": "the an application with hosts a deployment group will identify the host",
    "start": "1924170",
    "end": "1930290"
  },
  {
    "text": "based on their tag their auto scaling group or both this then allows us to",
    "start": "1930290",
    "end": "1936890"
  },
  {
    "text": "specify the zone in which the hosts lives for an application we can use",
    "start": "1936890",
    "end": "1944810"
  },
  {
    "text": "these groups to identify both our canary and our zonal based deployments so now",
    "start": "1944810",
    "end": "1951800"
  },
  {
    "text": "let's take these deployment groups and add them into our pipeline our updated",
    "start": "1951800",
    "end": "1958280"
  },
  {
    "start": "1955000",
    "end": "1955000"
  },
  {
    "text": "pipeline starts to look like this we have each segment represented as a code",
    "start": "1958280",
    "end": "1963860"
  },
  {
    "text": "deploy deployment group followed by a test you can see the canary deployment",
    "start": "1963860",
    "end": "1972910"
  },
  {
    "text": "followed by the post deployment test and then the zonal deployment followed by a",
    "start": "1972910",
    "end": "1979460"
  },
  {
    "text": "post deployment test and finally the deployment out to the remaining hosts",
    "start": "1979460",
    "end": "1985300"
  },
  {
    "text": "now you'll notice that we don't make another validation in that final group",
    "start": "1985300",
    "end": "1991990"
  },
  {
    "text": "since we're continuously testing production with our synthetic tests an additional post deployment test here",
    "start": "1991990",
    "end": "1999140"
  },
  {
    "text": "wouldn't add any extra validation",
    "start": "1999140",
    "end": "2002970"
  },
  {
    "start": "2004000",
    "end": "2004000"
  },
  {
    "text": "so now let's get into the details on how to build one of these segments out and",
    "start": "2006570",
    "end": "2012350"
  },
  {
    "text": "test them so in order to test a deployment we want to gather enough",
    "start": "2012350",
    "end": "2018810"
  },
  {
    "text": "statistics about that deployment to gain the confidence that the deployments good",
    "start": "2018810",
    "end": "2025070"
  },
  {
    "text": "each called our service is already writing success or failure information to cloud watch we can use that cloud",
    "start": "2025070",
    "end": "2032880"
  },
  {
    "text": "watch data stream as our datasource to validate the segment deployment hasn't",
    "start": "2032880",
    "end": "2038100"
  },
  {
    "text": "broken production to ensure there's no larger operational issues occurring we",
    "start": "2038100",
    "end": "2045600"
  },
  {
    "text": "want to also look at our alarms and make sure nothing's firing we're also going",
    "start": "2045600",
    "end": "2055139"
  },
  {
    "text": "to time-bound our validation of that deployment if we can't verify that the chick with the the",
    "start": "2055140",
    "end": "2061470"
  },
  {
    "text": "change working within a couple hours then it's probably not working so we're going to time it out and we'll use some",
    "start": "2061470",
    "end": "2067530"
  },
  {
    "text": "code in order to do that time out now we",
    "start": "2067530",
    "end": "2073950"
  },
  {
    "start": "2072000",
    "end": "2072000"
  },
  {
    "text": "need to build a post deployment test and add them into our pipeline we could",
    "start": "2073950",
    "end": "2079350"
  },
  {
    "text": "write these tests as a code pipeline test action a lambda invoke action or",
    "start": "2079350",
    "end": "2085500"
  },
  {
    "text": "custom action a good part about writing action is that they're easy to do but",
    "start": "2085500",
    "end": "2091080"
  },
  {
    "text": "the downside is they all have a one-hour timeout our post deployment tests could",
    "start": "2091080",
    "end": "2097680"
  },
  {
    "text": "take many hours to run so approvals have seven day timeout which is the long",
    "start": "2097680",
    "end": "2104100"
  },
  {
    "text": "enough to run our tests approvals are designed to pause our pipeline until an",
    "start": "2104100",
    "end": "2111000"
  },
  {
    "text": "external check occurs by default they'll wait for a manual that they'll manually",
    "start": "2111000",
    "end": "2118140"
  },
  {
    "text": "wait there for a human to approve the action but they could also be configured",
    "start": "2118140",
    "end": "2123450"
  },
  {
    "text": "to be approved by an API call and that's how we're going to use them in this example so let's take a look at the",
    "start": "2123450",
    "end": "2131610"
  },
  {
    "start": "2130000",
    "end": "2130000"
  },
  {
    "text": "approval pattern now proven actions don't run code but",
    "start": "2131610",
    "end": "2138220"
  },
  {
    "text": "they can signal that they're waiting for an approval approval it can be",
    "start": "2138220",
    "end": "2143920"
  },
  {
    "text": "configured to send out a message on an SNS topic when work needs to be done and",
    "start": "2143920",
    "end": "2150869"
  },
  {
    "text": "then a callback can be made back into code pipeline to approve the action and",
    "start": "2150869",
    "end": "2156400"
  },
  {
    "text": "then the pipeline will continue processing the change so let's see how",
    "start": "2156400",
    "end": "2162730"
  },
  {
    "text": "to configure the approval and the SNS configured configured the approval to use an SMS topic in this screen",
    "start": "2162730",
    "end": "2171220"
  },
  {
    "start": "2164000",
    "end": "2164000"
  },
  {
    "text": "screenshot the approval actions being configured and we're gonna configure it",
    "start": "2171220",
    "end": "2177519"
  },
  {
    "text": "to send this message on an SNS topic approvals also have a comment field and",
    "start": "2177519",
    "end": "2183119"
  },
  {
    "text": "the comment field can be used to pass additional machine data to the approver",
    "start": "2183119",
    "end": "2188440"
  },
  {
    "text": "in this case the approvers are lambda function so we're gonna send the data as",
    "start": "2188440",
    "end": "2193809"
  },
  {
    "text": "a JSON format we're gonna pass through",
    "start": "2193809",
    "end": "2198970"
  },
  {
    "text": "the cloud watch metrics stream that we want to monitor the number of data",
    "start": "2198970",
    "end": "2204130"
  },
  {
    "text": "points that are needed to succeed and then a timeout period before we fail the",
    "start": "2204130",
    "end": "2209920"
  },
  {
    "text": "test if we don't receive a positive result so let's look at that end to end",
    "start": "2209920",
    "end": "2218079"
  },
  {
    "start": "2215000",
    "end": "2215000"
  },
  {
    "text": "flow now of performing the test when a change enters our pipeline it reaches",
    "start": "2218079",
    "end": "2223839"
  },
  {
    "text": "the approval action and it sends a message on the SNS topic to our lambda",
    "start": "2223839",
    "end": "2229630"
  },
  {
    "text": "function the lamina function will didn't store the message in a dynamodb table",
    "start": "2229630",
    "end": "2235859"
  },
  {
    "text": "then we have a second lambda function that will read that segment deployment approval data from dynamodb",
    "start": "2235859",
    "end": "2242309"
  },
  {
    "text": "we use cloud watch events to schedule a calling of that lambda function each minute if we have enough data from cloud",
    "start": "2242309",
    "end": "2252309"
  },
  {
    "text": "watch then we can call back into code pipeline and approve the action that",
    "start": "2252309",
    "end": "2259210"
  },
  {
    "text": "then allows our change to move on to the next deployment now let's look at each of these lambda",
    "start": "2259210",
    "end": "2265560"
  },
  {
    "text": "functions in a little more detail first is the register deploy test function",
    "start": "2265560",
    "end": "2272340"
  },
  {
    "text": "it's goal is to read the approval data from s and s and write it into dynamo",
    "start": "2272340",
    "end": "2278600"
  },
  {
    "start": "2276000",
    "end": "2276000"
  },
  {
    "text": "this function takes in three parameters the first parameter events contains the",
    "start": "2278660",
    "end": "2284430"
  },
  {
    "text": "information about the approval action that's been delivered from s and S will",
    "start": "2284430",
    "end": "2290820"
  },
  {
    "text": "pull out the approval information and put it into our notification data variable in this example we're just",
    "start": "2290820",
    "end": "2297330"
  },
  {
    "text": "assuming one record but in actuality you could have many messages once we pull",
    "start": "2297330",
    "end": "2304860"
  },
  {
    "text": "the data out we can then write it straight into dynamo dB now let's look",
    "start": "2304860",
    "end": "2312630"
  },
  {
    "text": "at the evaluate deploy function it will allow a deployment to succeed if it can",
    "start": "2312630",
    "end": "2318240"
  },
  {
    "text": "gather enough data usage points from cloud watch and it's gonna fail the",
    "start": "2318240",
    "end": "2323460"
  },
  {
    "text": "deployment if the test take too long or if there's an alarm firing I'm not going",
    "start": "2323460",
    "end": "2330450"
  },
  {
    "text": "to show you the details of that code for that particular post deployment test although it's gonna be available on our",
    "start": "2330450",
    "end": "2336090"
  },
  {
    "text": "github repository after the talk instead I'm gonna focus on the code to send the",
    "start": "2336090",
    "end": "2343350"
  },
  {
    "text": "approval result back to code pipeline now it's a signal code pipeline that a",
    "start": "2343350",
    "end": "2349710"
  },
  {
    "text": "post deployment test has succeeded we'll call the put approval result method this method requires the pipeline",
    "start": "2349710",
    "end": "2356900"
  },
  {
    "text": "the stage and the action name to identify the action to approve the",
    "start": "2356900",
    "end": "2364920"
  },
  {
    "text": "method also requires a status and a message to signify that the post deployment test is approved so I want to",
    "start": "2364920",
    "end": "2374520"
  },
  {
    "start": "2373000",
    "end": "2373000"
  },
  {
    "text": "briefly talk about canary deployments because they're configured slightly differently than regular deployments the",
    "start": "2374520",
    "end": "2382980"
  },
  {
    "text": "way they're the same is that they are part of the production fleet just like",
    "start": "2382980",
    "end": "2388710"
  },
  {
    "text": "regular deployments and they serve production traffic to customers they're",
    "start": "2388710",
    "end": "2394080"
  },
  {
    "text": "configured in the same way as the remainder of your production fleet they participate in the production fleet",
    "start": "2394080",
    "end": "2400020"
  },
  {
    "text": "metrics dream and alarms as well but where they differ is that they have",
    "start": "2400020",
    "end": "2406470"
  },
  {
    "text": "their own metrics dream two alarm on canary deployments emit their metrics",
    "start": "2406470",
    "end": "2411599"
  },
  {
    "text": "twice once for the production fleet and a second time for use in testing their",
    "start": "2411599",
    "end": "2417240"
  },
  {
    "text": "deployments canary deployments need",
    "start": "2417240",
    "end": "2422849"
  },
  {
    "text": "their own metric stream because canary metrics can get drowned out when aggregated with the production fleet",
    "start": "2422849",
    "end": "2428609"
  },
  {
    "text": "metrics think about the instance when you have hundreds of hosts in your fleet",
    "start": "2428609",
    "end": "2434849"
  },
  {
    "text": "and you have an alarm configured to fire on a set of three failed data points",
    "start": "2434849",
    "end": "2440970"
  },
  {
    "text": "three consecutive failed data points if your canary is throwing errors it's very",
    "start": "2440970",
    "end": "2447510"
  },
  {
    "text": "unlikely that the alarm will fire even though the canary deployment is clearly unhealthy so instead canary deployments",
    "start": "2447510",
    "end": "2456030"
  },
  {
    "text": "should emit a second metric and the validation should have should occur on that canary deployment metric stream so",
    "start": "2456030",
    "end": "2466290"
  },
  {
    "text": "segmenting our deployment has a big impact both on our release process and",
    "start": "2466290",
    "end": "2472170"
  },
  {
    "text": "our deployment process at a minimum we'll end up with two deployments a",
    "start": "2472170",
    "end": "2478530"
  },
  {
    "text": "canary deployment and a regional deployment the extra deployment steps",
    "start": "2478530",
    "end": "2484109"
  },
  {
    "text": "need to be reflected in our pipeline larger services may also choose to",
    "start": "2484109",
    "end": "2490650"
  },
  {
    "text": "deploy zonally and then we'll also add in our post deployment tests to our",
    "start": "2490650",
    "end": "2496319"
  },
  {
    "text": "pipeline",
    "start": "2496319",
    "end": "2498559"
  },
  {
    "text": "so now let's look at our last technique halting promotions at AWS we regularly",
    "start": "2504290",
    "end": "2515150"
  },
  {
    "start": "2512000",
    "end": "2512000"
  },
  {
    "text": "review internal availability incidents to identify their root causes during a",
    "start": "2515150",
    "end": "2521630"
  },
  {
    "text": "review of a new HR system a customer had a bad host that was causing errors to be",
    "start": "2521630",
    "end": "2529250"
  },
  {
    "text": "thrown and they so they took it out of the load balancer unfortunately their",
    "start": "2529250",
    "end": "2534560"
  },
  {
    "text": "pipeline pushed a new change that ran a script and put that host bad back into",
    "start": "2534560",
    "end": "2539660"
  },
  {
    "text": "the load balancer and now it began serving customer traffic again so this",
    "start": "2539660",
    "end": "2545270"
  },
  {
    "text": "was a bad user experience or a bad customer experience because the customer had random randomly random failures if",
    "start": "2545270",
    "end": "2552740"
  },
  {
    "text": "they were hitting that host but also made it very hard for the operator to diagnose the issue that was occurring so",
    "start": "2552740",
    "end": "2561260"
  },
  {
    "text": "when your system is an experiencing and availability event it's helpful to keep",
    "start": "2561260",
    "end": "2566360"
  },
  {
    "text": "the system stable we want to disable new transitions into our production stages",
    "start": "2566360",
    "end": "2573700"
  },
  {
    "text": "during an availability event unless we have a specific fix that we want to get",
    "start": "2573700",
    "end": "2578900"
  },
  {
    "text": "out to production so to do this we're",
    "start": "2578900",
    "end": "2584570"
  },
  {
    "text": "going to use promotion blockers when",
    "start": "2584570",
    "end": "2590030"
  },
  {
    "start": "2588000",
    "end": "2588000"
  },
  {
    "text": "your system is suffering from an availability event there should be an alarm firing somewhere now this could be",
    "start": "2590030",
    "end": "2595520"
  },
  {
    "text": "a service level alarm or a company-wide alarm service level alarms are owned by",
    "start": "2595520",
    "end": "2601370"
  },
  {
    "text": "each team and fire when some portion of their service is not working",
    "start": "2601370",
    "end": "2607300"
  },
  {
    "text": "company-wide alarms fire when a significant portion of your business functionality is broken at AWS when",
    "start": "2607300",
    "end": "2615980"
  },
  {
    "text": "either of these alarms are firing many teams halt promotions into production so",
    "start": "2615980",
    "end": "2623420"
  },
  {
    "text": "we've already built Canaries that fire service level alarms when our service is in a unhealthy state we can then wire",
    "start": "2623420",
    "end": "2631580"
  },
  {
    "text": "that to a lambda function and to a cloud watch alarm via SNS",
    "start": "2631580",
    "end": "2637930"
  },
  {
    "text": "if the lamp in the lambda function we can then call back into our continuous delivery system and disable the",
    "start": "2637930",
    "end": "2644990"
  },
  {
    "text": "transition into production now disabling",
    "start": "2644990",
    "end": "2650270"
  },
  {
    "text": "the transaction transition is going to halt any changes flowing out into production and this then gives us the",
    "start": "2650270",
    "end": "2656090"
  },
  {
    "text": "operator the stability they need to diagnose the issue and resolve it the",
    "start": "2656090",
    "end": "2663470"
  },
  {
    "text": "operator can then manually re-enable the transition when the issues resolved and changes will continue to flow the code",
    "start": "2663470",
    "end": "2673970"
  },
  {
    "text": "to disable a code pipeline transition is fairly trivial Coe pipeline has an API",
    "start": "2673970",
    "end": "2680900"
  },
  {
    "text": "named disabled stage transition now this is going to then stop our change from",
    "start": "2680900",
    "end": "2686750"
  },
  {
    "text": "entering production we need to know scope this by passing in the pipeline",
    "start": "2686750",
    "end": "2691760"
  },
  {
    "text": "name the stage name and whether we're disabling the inbound or outbound transition and also provide a reason",
    "start": "2691760",
    "end": "2701560"
  },
  {
    "text": "when a stage is disabled either through the API call or through the console it'll contain a reason and the operator",
    "start": "2702970",
    "end": "2710870"
  },
  {
    "text": "can then come back and enable the transition once the operational event is",
    "start": "2710870",
    "end": "2717320"
  },
  {
    "text": "resolved now our release process is",
    "start": "2717320",
    "end": "2723380"
  },
  {
    "text": "updated to disable promotions to production as you can see we're starting",
    "start": "2723380",
    "end": "2729230"
  },
  {
    "text": "to build a release process that's able to adapt to environmental changes",
    "start": "2729230",
    "end": "2735760"
  },
  {
    "text": "so this actually finishes our review of the five techniques to improve your",
    "start": "2738140",
    "end": "2743329"
  },
  {
    "text": "deployment safety my goal is to teach you a few techniques to make your pipeline safer and I hope these",
    "start": "2743329",
    "end": "2750410"
  },
  {
    "text": "techniques will help make your customers happier and your operators happier as well but this wasn't just a talk about",
    "start": "2750410",
    "end": "2757640"
  },
  {
    "text": "handling a bad code change before it reaches production or modifying your release process but it was about",
    "start": "2757640",
    "end": "2763160"
  },
  {
    "text": "modifying your release process and your tools to behave the way that worked well",
    "start": "2763160",
    "end": "2769130"
  },
  {
    "text": "for your team so to recap we can use automated testing to quickly notify our",
    "start": "2769130",
    "end": "2776200"
  },
  {
    "text": "developers and keep our pipelines unblocked and current we can use",
    "start": "2776200",
    "end": "2782150"
  },
  {
    "text": "continuous production testing to react quickly to production issues we can",
    "start": "2782150",
    "end": "2788960"
  },
  {
    "text": "deploy safely to production by setting up our deployment configuration to test each host after it's updated and roll",
    "start": "2788960",
    "end": "2797119"
  },
  {
    "text": "back if the deployment fails we also learned how to Perdition partition",
    "start": "2797119",
    "end": "2802359"
  },
  {
    "text": "production by building canary deployments and zonal deployments we",
    "start": "2802359",
    "end": "2809720"
  },
  {
    "text": "wrapped up with the technique to manage our pipeline by automatically halting deployment for production to production",
    "start": "2809720",
    "end": "2816410"
  },
  {
    "text": "by disabling our stage transitions so",
    "start": "2816410",
    "end": "2824089"
  },
  {
    "start": "2822000",
    "end": "2822000"
  },
  {
    "text": "we've dramatically overhauled our release and our deployment process we now have real-time data on the health of",
    "start": "2824089",
    "end": "2830569"
  },
  {
    "text": "our system by adding in synthetic tests from a deployment perspective we've",
    "start": "2830569",
    "end": "2835849"
  },
  {
    "text": "added in three new tests that didn't exist before we started we're testing the each host conservative traffic that",
    "start": "2835849",
    "end": "2842509"
  },
  {
    "text": "each segment deployment doesn't create a functional regression and we're testing whether deployment failed and triggering",
    "start": "2842509",
    "end": "2849109"
  },
  {
    "text": "rollbacks if so from a release perspective we've added the ability to",
    "start": "2849109",
    "end": "2854329"
  },
  {
    "text": "halt the flow of changes out to production during availability events I",
    "start": "2854329",
    "end": "2860559"
  },
  {
    "text": "hope you've learned something here today that you can then take home and apply into your own continuous delivery",
    "start": "2860559",
    "end": "2867349"
  },
  {
    "text": "process thank you [Applause]",
    "start": "2867349",
    "end": "2876489"
  }
]