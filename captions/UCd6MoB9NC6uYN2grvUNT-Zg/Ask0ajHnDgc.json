[
  {
    "text": "in this video you'll see how to get",
    "start": "0",
    "end": "1860"
  },
  {
    "text": "started with msk serverless with this",
    "start": "1860",
    "end": "4620"
  },
  {
    "text": "solution you can create a serverless",
    "start": "4620",
    "end": "6420"
  },
  {
    "text": "cluster for Amazon managed streaming for",
    "start": "6420",
    "end": "8460"
  },
  {
    "text": "Apache Kafka or Amazon msk that",
    "start": "8460",
    "end": "11040"
  },
  {
    "text": "automatically provisions and scales",
    "start": "11040",
    "end": "12599"
  },
  {
    "text": "compute and storage resources so you can",
    "start": "12599",
    "end": "14820"
  },
  {
    "text": "use Apache Kafka on demand and pay for",
    "start": "14820",
    "end": "16980"
  },
  {
    "text": "the data you stream and retain",
    "start": "16980",
    "end": "19740"
  },
  {
    "text": "you can get started with msk serverless",
    "start": "19740",
    "end": "21720"
  },
  {
    "text": "in just a few clicks it also integrates",
    "start": "21720",
    "end": "24119"
  },
  {
    "text": "with existing Kafka applications",
    "start": "24119",
    "end": "26640"
  },
  {
    "text": "the solution lowers operational overhead",
    "start": "26640",
    "end": "28920"
  },
  {
    "text": "instead of managing your own cluster",
    "start": "28920",
    "end": "31019"
  },
  {
    "text": "infrastructure you can use your time to",
    "start": "31019",
    "end": "32940"
  },
  {
    "text": "solve customer problems",
    "start": "32940",
    "end": "34920"
  },
  {
    "text": "msk serverless is cost effective",
    "start": "34920",
    "end": "37200"
  },
  {
    "text": "especially for highly variable workloads",
    "start": "37200",
    "end": "40140"
  },
  {
    "text": "it allows for on-demand streaming",
    "start": "40140",
    "end": "42000"
  },
  {
    "text": "capacity",
    "start": "42000",
    "end": "43739"
  },
  {
    "text": "each cluster can sustain 200 megabytes",
    "start": "43739",
    "end": "46079"
  },
  {
    "text": "per second of write capacity",
    "start": "46079",
    "end": "48420"
  },
  {
    "text": "read capacity is capped at 400 megabytes",
    "start": "48420",
    "end": "51960"
  },
  {
    "text": "msk clusters utilize partitions for",
    "start": "51960",
    "end": "54360"
  },
  {
    "text": "scaling each partition can allocate up",
    "start": "54360",
    "end": "56820"
  },
  {
    "text": "to five megabytes of write capacity and",
    "start": "56820",
    "end": "58800"
  },
  {
    "text": "10 megabytes of read capacity",
    "start": "58800",
    "end": "61440"
  },
  {
    "text": "msk serverless offers throughput based",
    "start": "61440",
    "end": "63960"
  },
  {
    "text": "pricing",
    "start": "63960",
    "end": "65338"
  },
  {
    "text": "the fixed cost for running a cluster is",
    "start": "65339",
    "end": "67680"
  },
  {
    "text": "75 cents per hour",
    "start": "67680",
    "end": "69360"
  },
  {
    "text": "data and partitions costs are directly",
    "start": "69360",
    "end": "71460"
  },
  {
    "text": "related to throughput",
    "start": "71460",
    "end": "73020"
  },
  {
    "text": "storage costs vary based on throughput",
    "start": "73020",
    "end": "75299"
  },
  {
    "text": "and data retention plans",
    "start": "75299",
    "end": "77820"
  },
  {
    "text": "load balancing within Kafka relies on",
    "start": "77820",
    "end": "79920"
  },
  {
    "text": "partition placement",
    "start": "79920",
    "end": "81360"
  },
  {
    "text": "msk serverless offers Auto partition",
    "start": "81360",
    "end": "83580"
  },
  {
    "text": "placement",
    "start": "83580",
    "end": "85320"
  },
  {
    "text": "it is also fully compatible with Apache",
    "start": "85320",
    "end": "87299"
  },
  {
    "text": "Kafka",
    "start": "87299",
    "end": "88799"
  },
  {
    "text": "msk serverless offers the same level of",
    "start": "88799",
    "end": "91140"
  },
  {
    "text": "security as provisioned msk for private",
    "start": "91140",
    "end": "94080"
  },
  {
    "text": "and secure connectivity all cluster",
    "start": "94080",
    "end": "95939"
  },
  {
    "text": "resources are placed within an Amazon",
    "start": "95939",
    "end": "97500"
  },
  {
    "text": "msk VPC and your clients your producers",
    "start": "97500",
    "end": "100619"
  },
  {
    "text": "and consumers are placed within your own",
    "start": "100619",
    "end": "102540"
  },
  {
    "text": "VPC",
    "start": "102540",
    "end": "104220"
  },
  {
    "text": "msk serverless also offers the same high",
    "start": "104220",
    "end": "106799"
  },
  {
    "text": "availability as msk when creating an msk",
    "start": "106799",
    "end": "109979"
  },
  {
    "text": "serverless cluster partitions are placed",
    "start": "109979",
    "end": "112320"
  },
  {
    "text": "across three availability zones",
    "start": "112320",
    "end": "115820"
  },
  {
    "text": "to get started let's navigate to msk and",
    "start": "116159",
    "end": "118619"
  },
  {
    "text": "create a serverless cluster",
    "start": "118619",
    "end": "121880"
  },
  {
    "text": "we'll choose custom create as the",
    "start": "124439",
    "end": "126420"
  },
  {
    "text": "cluster creation method and give our",
    "start": "126420",
    "end": "127979"
  },
  {
    "text": "cluster a name",
    "start": "127979",
    "end": "130640"
  },
  {
    "text": "we'll leave server lists selected as our",
    "start": "132000",
    "end": "134099"
  },
  {
    "text": "cluster type a description of default",
    "start": "134099",
    "end": "136379"
  },
  {
    "text": "cluster throughput and storage is",
    "start": "136379",
    "end": "137879"
  },
  {
    "text": "provided",
    "start": "137879",
    "end": "139440"
  },
  {
    "text": "let's proceed to the next screen",
    "start": "139440",
    "end": "142319"
  },
  {
    "text": "here we'll enter our networking",
    "start": "142319",
    "end": "143940"
  },
  {
    "text": "information",
    "start": "143940",
    "end": "145620"
  },
  {
    "text": "we can create up to five VPC",
    "start": "145620",
    "end": "147420"
  },
  {
    "text": "configurations to connect our clients to",
    "start": "147420",
    "end": "149340"
  },
  {
    "text": "our msk serverless cluster we'll just",
    "start": "149340",
    "end": "151860"
  },
  {
    "text": "create one configuration",
    "start": "151860",
    "end": "154260"
  },
  {
    "text": "we can choose any VPC in our account",
    "start": "154260",
    "end": "158239"
  },
  {
    "text": "next we'll provide our subnet",
    "start": "159420",
    "end": "160980"
  },
  {
    "text": "information we're required to provide",
    "start": "160980",
    "end": "163200"
  },
  {
    "text": "subnets for at least two availability",
    "start": "163200",
    "end": "164760"
  },
  {
    "text": "zones",
    "start": "164760",
    "end": "167239"
  },
  {
    "text": "we'll retain the default Security Group",
    "start": "175560",
    "end": "179360"
  },
  {
    "text": "we are alerted that serverless clusters",
    "start": "181680",
    "end": "183780"
  },
  {
    "text": "require AWS identity and access",
    "start": "183780",
    "end": "185819"
  },
  {
    "text": "management or IAM role-based",
    "start": "185819",
    "end": "187800"
  },
  {
    "text": "authentication let's continue to the",
    "start": "187800",
    "end": "189959"
  },
  {
    "text": "next screen",
    "start": "189959",
    "end": "191580"
  },
  {
    "text": "we're provided with a description of the",
    "start": "191580",
    "end": "193319"
  },
  {
    "text": "default metrics that will be reported in",
    "start": "193319",
    "end": "195000"
  },
  {
    "text": "Amazon cloudwatch for our cluster",
    "start": "195000",
    "end": "197280"
  },
  {
    "text": "we also have the option to create custom",
    "start": "197280",
    "end": "199019"
  },
  {
    "text": "tags",
    "start": "199019",
    "end": "200640"
  },
  {
    "text": "let's proceed to the final screen",
    "start": "200640",
    "end": "203280"
  },
  {
    "text": "here we can review the settings that we",
    "start": "203280",
    "end": "205080"
  },
  {
    "text": "have selected for our serverless cluster",
    "start": "205080",
    "end": "207840"
  },
  {
    "text": "now we can create our cluster which",
    "start": "207840",
    "end": "209640"
  },
  {
    "text": "takes approximately five minutes for",
    "start": "209640",
    "end": "211680"
  },
  {
    "text": "demonstration purposes however we have",
    "start": "211680",
    "end": "213540"
  },
  {
    "text": "some clusters that are ready to use",
    "start": "213540",
    "end": "216060"
  },
  {
    "text": "we'll be using both a provisioned",
    "start": "216060",
    "end": "217800"
  },
  {
    "text": "cluster and a serverless cluster in this",
    "start": "217800",
    "end": "219599"
  },
  {
    "text": "demonstration",
    "start": "219599",
    "end": "221040"
  },
  {
    "text": "now let's navigate to our integrated",
    "start": "221040",
    "end": "222900"
  },
  {
    "text": "development environment or IDE and",
    "start": "222900",
    "end": "225060"
  },
  {
    "text": "connect with the producer and consumer",
    "start": "225060",
    "end": "226500"
  },
  {
    "text": "environments for our serverless cluster",
    "start": "226500",
    "end": "229319"
  },
  {
    "text": "we're using the AWS Cloud9 IDE but other",
    "start": "229319",
    "end": "232379"
  },
  {
    "text": "Ides can be used",
    "start": "232379",
    "end": "234780"
  },
  {
    "text": "from the left window we'll produce data",
    "start": "234780",
    "end": "236700"
  },
  {
    "text": "to our cluster from the right window",
    "start": "236700",
    "end": "238620"
  },
  {
    "text": "we'll consume data from our cluster in",
    "start": "238620",
    "end": "240480"
  },
  {
    "text": "real time",
    "start": "240480",
    "end": "242099"
  },
  {
    "text": "first we'll produce the data to the",
    "start": "242099",
    "end": "243780"
  },
  {
    "text": "provisioned cluster and consume data",
    "start": "243780",
    "end": "245519"
  },
  {
    "text": "from it then we'll show how to use the",
    "start": "245519",
    "end": "248040"
  },
  {
    "text": "same client to produce and consume data",
    "start": "248040",
    "end": "249840"
  },
  {
    "text": "using the serverless cluster",
    "start": "249840",
    "end": "252180"
  },
  {
    "text": "we'll set an environment variable called",
    "start": "252180",
    "end": "254099"
  },
  {
    "text": "BS short for bootstrap string",
    "start": "254099",
    "end": "257160"
  },
  {
    "text": "to get the BS value we'll go to our",
    "start": "257160",
    "end": "259260"
  },
  {
    "text": "provisioned cluster and copy the private",
    "start": "259260",
    "end": "261060"
  },
  {
    "text": "endpoint",
    "start": "261060",
    "end": "263419"
  },
  {
    "text": "next we'll perform an echo command to",
    "start": "266340",
    "end": "268380"
  },
  {
    "text": "confirm that our variable was set",
    "start": "268380",
    "end": "270960"
  },
  {
    "text": "we'll set another environment variable",
    "start": "270960",
    "end": "272699"
  },
  {
    "text": "with the same value on the producer side",
    "start": "272699",
    "end": "275699"
  },
  {
    "text": "again we'll perform an echo command to",
    "start": "275699",
    "end": "277740"
  },
  {
    "text": "confirm that our variable was set",
    "start": "277740",
    "end": "280199"
  },
  {
    "text": "our next step is to create a Kafka topic",
    "start": "280199",
    "end": "282600"
  },
  {
    "text": "we'll copy the command for creating a",
    "start": "282600",
    "end": "284699"
  },
  {
    "text": "topic from the msk developer guide",
    "start": "284699",
    "end": "287520"
  },
  {
    "text": "we only need the last part of this",
    "start": "287520",
    "end": "289199"
  },
  {
    "text": "command",
    "start": "289199",
    "end": "291500"
  },
  {
    "text": "let's run our copied topic creation",
    "start": "295620",
    "end": "297479"
  },
  {
    "text": "command",
    "start": "297479",
    "end": "298919"
  },
  {
    "text": "we have already created this topic so we",
    "start": "298919",
    "end": "301139"
  },
  {
    "text": "can ignore the error related to the",
    "start": "301139",
    "end": "302699"
  },
  {
    "text": "topic already existing",
    "start": "302699",
    "end": "305100"
  },
  {
    "text": "we'll run a list command to view our",
    "start": "305100",
    "end": "306780"
  },
  {
    "text": "already created topic",
    "start": "306780",
    "end": "308880"
  },
  {
    "text": "next we'll set up our producer let's go",
    "start": "308880",
    "end": "311340"
  },
  {
    "text": "back to the msk developer guide",
    "start": "311340",
    "end": "314780"
  },
  {
    "text": "we'll copy the command for creating a",
    "start": "315660",
    "end": "317580"
  },
  {
    "text": "Kafka console producer",
    "start": "317580",
    "end": "320820"
  },
  {
    "text": "we'll paste our copied command",
    "start": "320820",
    "end": "324560"
  },
  {
    "text": "our Kafka console producer has now",
    "start": "325500",
    "end": "327539"
  },
  {
    "text": "started",
    "start": "327539",
    "end": "328979"
  },
  {
    "text": "now we'll start our Kafka console",
    "start": "328979",
    "end": "330780"
  },
  {
    "text": "consumer to see messages that are piped",
    "start": "330780",
    "end": "332580"
  },
  {
    "text": "through to our topic",
    "start": "332580",
    "end": "334440"
  },
  {
    "text": "again we can copy the command we need",
    "start": "334440",
    "end": "336240"
  },
  {
    "text": "from the msk developer guide",
    "start": "336240",
    "end": "339680"
  },
  {
    "text": "we'll input our bootstrap endpoint",
    "start": "342660",
    "end": "344400"
  },
  {
    "text": "variable",
    "start": "344400",
    "end": "346020"
  },
  {
    "text": "the Kafka consumer console has now",
    "start": "346020",
    "end": "348180"
  },
  {
    "text": "started and messages are going through",
    "start": "348180",
    "end": "349740"
  },
  {
    "text": "from producer to consumer",
    "start": "349740",
    "end": "352199"
  },
  {
    "text": "what we've shown so far has been on our",
    "start": "352199",
    "end": "354060"
  },
  {
    "text": "provisioned cluster now we'll exit the",
    "start": "354060",
    "end": "356460"
  },
  {
    "text": "consumer and producer on both sides",
    "start": "356460",
    "end": "360080"
  },
  {
    "text": "next we'll demonstrate the same",
    "start": "360479",
    "end": "362039"
  },
  {
    "text": "operation on a serverless cluster",
    "start": "362039",
    "end": "364919"
  },
  {
    "text": "we'll use the same producer and consumer",
    "start": "364919",
    "end": "367020"
  },
  {
    "text": "but we'll change the bootstrap broker",
    "start": "367020",
    "end": "368820"
  },
  {
    "text": "endpoint strain to communicate with the",
    "start": "368820",
    "end": "370440"
  },
  {
    "text": "serverless cluster",
    "start": "370440",
    "end": "372360"
  },
  {
    "text": "back in Amazon msk we'll select our",
    "start": "372360",
    "end": "374759"
  },
  {
    "text": "serverless cluster",
    "start": "374759",
    "end": "377720"
  },
  {
    "text": "let's copy the bootstrap endpoint string",
    "start": "378479",
    "end": "380759"
  },
  {
    "text": "and then return to our IDE",
    "start": "380759",
    "end": "383840"
  },
  {
    "text": "we'll reset our BS environmental",
    "start": "384240",
    "end": "386160"
  },
  {
    "text": "variables to our serverless bootstrap",
    "start": "386160",
    "end": "387840"
  },
  {
    "text": "endpoint",
    "start": "387840",
    "end": "390259"
  },
  {
    "text": "let's confirm our variable is correct",
    "start": "390539",
    "end": "392340"
  },
  {
    "text": "with the echo command",
    "start": "392340",
    "end": "395280"
  },
  {
    "text": "the bootstrap variable string has now",
    "start": "395280",
    "end": "397199"
  },
  {
    "text": "changed",
    "start": "397199",
    "end": "398759"
  },
  {
    "text": "on our serverless cluster we'll now",
    "start": "398759",
    "end": "400560"
  },
  {
    "text": "create our topic like we did previously",
    "start": "400560",
    "end": "402419"
  },
  {
    "text": "let's go back to our developer guide",
    "start": "402419",
    "end": "406280"
  },
  {
    "text": "we'll copy the portion of the command",
    "start": "408000",
    "end": "409560"
  },
  {
    "text": "that we need",
    "start": "409560",
    "end": "412039"
  },
  {
    "text": "let's paste and run our create topic",
    "start": "416039",
    "end": "418199"
  },
  {
    "text": "command",
    "start": "418199",
    "end": "419520"
  },
  {
    "text": "with the topic created we now need to",
    "start": "419520",
    "end": "421620"
  },
  {
    "text": "start our Kafka console producer",
    "start": "421620",
    "end": "424259"
  },
  {
    "text": "now we'll start our Kafka console",
    "start": "424259",
    "end": "426120"
  },
  {
    "text": "consumer",
    "start": "426120",
    "end": "427740"
  },
  {
    "text": "our Kafka console consumer is now",
    "start": "427740",
    "end": "429660"
  },
  {
    "text": "running",
    "start": "429660",
    "end": "430500"
  },
  {
    "text": "let's enter some text in the producer",
    "start": "430500",
    "end": "432300"
  },
  {
    "text": "window to see if it appears in the",
    "start": "432300",
    "end": "433740"
  },
  {
    "text": "consumer window",
    "start": "433740",
    "end": "435479"
  },
  {
    "text": "the message was successfully sent to our",
    "start": "435479",
    "end": "437280"
  },
  {
    "text": "serverless cluster",
    "start": "437280",
    "end": "440180"
  },
  {
    "text": "you've just seen how to get started with",
    "start": "441360",
    "end": "443039"
  },
  {
    "text": "msk serverless",
    "start": "443039",
    "end": "445740"
  },
  {
    "text": "you can learn more about this topic in",
    "start": "445740",
    "end": "447660"
  },
  {
    "text": "the description and links for this video",
    "start": "447660",
    "end": "449099"
  },
  {
    "text": "thanks for watching now it's your turn",
    "start": "449099",
    "end": "451139"
  },
  {
    "text": "to try",
    "start": "451139",
    "end": "453500"
  }
]