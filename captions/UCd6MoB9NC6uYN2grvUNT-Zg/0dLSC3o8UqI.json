[
  {
    "start": "0",
    "end": "19000"
  },
  {
    "text": "good afternoon everybody my name is Latin I got here Maria and Danny we're",
    "start": "829",
    "end": "7680"
  },
  {
    "text": "going to be talking to you about building civil assesses architecture with dotnet core first of all a little",
    "start": "7680",
    "end": "16470"
  },
  {
    "text": "bit about myself I've been a dot Neda for the longest time I worked and a lot of Microsoft projects in my you know",
    "start": "16470",
    "end": "25130"
  },
  {
    "start": "19000",
    "end": "19000"
  },
  {
    "text": "very old past in them and I've dealt with it on both on multiple platforms in",
    "start": "25130",
    "end": "31890"
  },
  {
    "text": "a lot of it on AWS itself so I'm gonna",
    "start": "31890",
    "end": "37260"
  },
  {
    "text": "be talking to you first about traditional dotnet architectures probably something the way you are",
    "start": "37260",
    "end": "43079"
  },
  {
    "text": "currently running things or the way you are you you're transitioning over to running things and all that kind of what",
    "start": "43079",
    "end": "49920"
  },
  {
    "text": "you can do right now which you can do in an interim what you probably already have running and then I'm gonna hand it",
    "start": "49920",
    "end": "56489"
  },
  {
    "text": "over to Murray it's going to be talking about how to build it through by means",
    "start": "56489",
    "end": "61559"
  },
  {
    "text": "of micro services and service architectures and then you'll hear from Danny about how that all works in real",
    "start": "61559",
    "end": "69600"
  },
  {
    "text": "time in in real world at Experian so",
    "start": "69600",
    "end": "75619"
  },
  {
    "start": "74000",
    "end": "74000"
  },
  {
    "text": "what are the current issues what are nightmares that we have when we work",
    "start": "75619",
    "end": "81570"
  },
  {
    "text": "with dotnet applications you know in traditional manner right in the old-school way if you're dealing with",
    "start": "81570",
    "end": "87150"
  },
  {
    "text": "any of the legacy applications right number one they stateful right why stateful when I most of the things",
    "start": "87150",
    "end": "94619"
  },
  {
    "text": "that I need the state for I can keep that information in the database right what about asymmetric resource",
    "start": "94619",
    "end": "101100"
  },
  {
    "text": "utilization what do I mean by that well think about it if we're running most of",
    "start": "101100",
    "end": "107070"
  },
  {
    "text": "the things I mean you'll see depending really who designed the applications on your side it couldn't mean some consulting company it could mean another",
    "start": "107070",
    "end": "113040"
  },
  {
    "text": "team it could have been someone from a past may be there for the best architectures I don't know if you",
    "start": "113040",
    "end": "118799"
  },
  {
    "text": "remember dotnet patterns and practices and all that maybe they didn't maybe",
    "start": "118799",
    "end": "123810"
  },
  {
    "text": "they didn't know too well how to develop application layers in dotnet so they built the entire thing using store",
    "start": "123810",
    "end": "130649"
  },
  {
    "text": "procedures on sequel and and so basically you know you",
    "start": "130649",
    "end": "135660"
  },
  {
    "text": "you would have a mix of trans both transactional and batch type services that are running and they will a",
    "start": "135660",
    "end": "140760"
  },
  {
    "text": "symmetrically use both RAM and CPU and I ops on your side so that's not a good",
    "start": "140760",
    "end": "146280"
  },
  {
    "text": "thing right you what about the CDC I solutions right there weren't too many that were great",
    "start": "146280",
    "end": "152550"
  },
  {
    "text": "or they wouldn't like extremely expensive that you could use in the dotnet world in the past so you know and",
    "start": "152550",
    "end": "160230"
  },
  {
    "text": "for the most part as you cannot transition between environments as you would go from you know from your",
    "start": "160230",
    "end": "165990"
  },
  {
    "text": "development to integration to test and to QA you know you would have like a different set of dependencies you would",
    "start": "165990",
    "end": "173250"
  },
  {
    "text": "have a different set of like you know frameworks that are needed things could be working on my machine as the big",
    "start": "173250",
    "end": "179760"
  },
  {
    "text": "thing says over there but they're definitely not working you know on any other environment as it goes on you know",
    "start": "179760",
    "end": "187080"
  },
  {
    "text": "they would be running great on bare metal but not that great on on virtual environment a lot of these things people",
    "start": "187080",
    "end": "193650"
  },
  {
    "text": "you know developers didn't care about the infrastructure aspects and how these things should be running so they are all",
    "start": "193650",
    "end": "198900"
  },
  {
    "text": "running in a very monolithic way store procedures or he mentioned right that",
    "start": "198900",
    "end": "203940"
  },
  {
    "text": "has been a nightmare of decoupling like how are you going to scale that it's impossible to scale sequel server",
    "start": "203940",
    "end": "209040"
  },
  {
    "text": "doesn't scale right it only scales upwards it doesn't scale horizontally and of course full trust solutions right",
    "start": "209040",
    "end": "217410"
  },
  {
    "text": "it for the most part what a mic needed was right I mean you know you could really have full access full system",
    "start": "217410",
    "end": "224340"
  },
  {
    "text": "access to the entire you know opera it was a security issue obviously from one",
    "start": "224340",
    "end": "229410"
  },
  {
    "text": "side but also it could use resources in which way nobody could manage in any or",
    "start": "229410",
    "end": "235890"
  },
  {
    "text": "isolate in any way right all of that was result resulting in too",
    "start": "235890",
    "end": "242010"
  },
  {
    "text": "many points of failure but having having all that in mind right we these are kind",
    "start": "242010",
    "end": "249090"
  },
  {
    "text": "of the current kind of traditional dotnet architectures not only on in on a day AWS side of things but mostly they",
    "start": "249090",
    "end": "255780"
  },
  {
    "text": "are probably running currently in your data center or you know all on some other platform so to speak but let's",
    "start": "255780",
    "end": "263070"
  },
  {
    "text": "let's look at it like if you were to kind of run it on on AWS right there are few things that do help",
    "start": "263070",
    "end": "269410"
  },
  {
    "text": "us here right things like having different availability zones right what are the availability zones they",
    "start": "269410",
    "end": "275860"
  },
  {
    "text": "effectively clusters of data centers that are geographically displaced for one another and if you were to actually",
    "start": "275860",
    "end": "284580"
  },
  {
    "text": "expand your architecture between two RA sees that pretty much already qualifies",
    "start": "284580",
    "end": "290050"
  },
  {
    "text": "in a sense as a dr environment so you're already achieving quite a bit of a",
    "start": "290050",
    "end": "295150"
  },
  {
    "text": "availability and resilience just by doing so right you can use are they should be popping",
    "start": "295150",
    "end": "302980"
  },
  {
    "text": "out the area ie OB externally OB without",
    "start": "302980",
    "end": "310540"
  },
  {
    "text": "actually needing to put any of the server roles into a DMZ or public subnet in this case you can use vp c vp c not",
    "start": "310540",
    "end": "319240"
  },
  {
    "text": "get gateways that auto-scale and you don't have to worry about like having just like nat instances when it comes to",
    "start": "319240",
    "end": "326380"
  },
  {
    "text": "having to pull update from private subnets for instance is running in private subnets you can use rd g w as as",
    "start": "326380",
    "end": "335680"
  },
  {
    "text": "a jump box to actually get in and administer any of these things i don't know if you've had and you can also have",
    "start": "335680",
    "end": "342400"
  },
  {
    "text": "an internal access just as well in a very secure way you can put certificates",
    "start": "342400",
    "end": "347410"
  },
  {
    "text": "on it you can upload much of the much much of the media storage on s3 by v pc",
    "start": "347410",
    "end": "355330"
  },
  {
    "text": "endpoints in a there's quite a bit that you can do right so there are transitional ways in you in",
    "start": "355330",
    "end": "361120"
  },
  {
    "text": "which you can kind of transition over to AWS with traditional dotnet architectures as you're transitioning",
    "start": "361120",
    "end": "366640"
  },
  {
    "text": "over to more modern architectures that my colleagues here are going to be talking about we do have a lot of also",
    "start": "366640",
    "end": "375970"
  },
  {
    "text": "many services that you can use things like AWS directory service we it's a fully full-blown managed",
    "start": "375970",
    "end": "382780"
  },
  {
    "text": "Microsoft Active Directory you can either have you know the enterprise one or the or the standard one you can you",
    "start": "382780",
    "end": "390280"
  },
  {
    "text": "have schema extensions you can establish a one-way or two-way trust you can use a",
    "start": "390280",
    "end": "395470"
  },
  {
    "text": "DFS with with its proxies to to go ahead and federates",
    "start": "395470",
    "end": "400919"
  },
  {
    "text": "to added you know to your own premise or to other systems or to your partner partner sites and so on partial",
    "start": "400919",
    "end": "407909"
  },
  {
    "text": "solutions so this this quite a bit that that you can utilize from what we have got to offer already from class",
    "start": "407909",
    "end": "414659"
  },
  {
    "text": "formations and from a quick stuff that we built right other thing you can you",
    "start": "414659",
    "end": "422310"
  },
  {
    "text": "can also use our code services you can use called pipeline which is basically",
    "start": "422310",
    "end": "428280"
  },
  {
    "text": "our how we did CDC I internally at Amazon for many years for building all",
    "start": "428280",
    "end": "434940"
  },
  {
    "text": "of our services a lot of our customers took one look at it and there's like this is amazing guys please go ahead and",
    "start": "434940",
    "end": "441090"
  },
  {
    "text": "make this available for all of us to use and that really gave birth to AWS called pipeline you can use a source in it you",
    "start": "441090",
    "end": "449610"
  },
  {
    "text": "can use things like github get our manage get is code commit you can use s3",
    "start": "449610",
    "end": "456330"
  },
  {
    "text": "and s3 is really kind of a binding glue with any other solution like TFS with",
    "start": "456330",
    "end": "462050"
  },
  {
    "text": "AWS toolkit can actually go ahead and push packages out to s3 and they will",
    "start": "462050",
    "end": "471810"
  },
  {
    "text": "automatically then then be pushed over to code build AWS code built and to code",
    "start": "471810",
    "end": "477779"
  },
  {
    "text": "deploy we'll see well here we actually touch on that a little bit more later",
    "start": "477779",
    "end": "483270"
  },
  {
    "text": "and a micro services side of things and and in that way integrated so you can",
    "start": "483270",
    "end": "489509"
  },
  {
    "text": "use VSDs in the cloud you can use TFS in in the context of AWS code pipeline code",
    "start": "489509",
    "end": "496620"
  },
  {
    "text": "build can be used either to actually build the solution or to test out solution it's very easy it's very",
    "start": "496620",
    "end": "503460"
  },
  {
    "text": "straightforward it uses build spec file to actually where you can define your scripts in a",
    "start": "503460",
    "end": "509729"
  },
  {
    "text": "very easy way and where you want to copy the files over and code deploy can do both normal deployments you know in",
    "start": "509729",
    "end": "517620"
  },
  {
    "text": "sequential employments or Bluegreen deployments where it can actually replicate the same environment deployed",
    "start": "517620",
    "end": "523078"
  },
  {
    "text": "over there test it out and then do connection draining from one to another and decommission the previous one pretty pretty awesome",
    "start": "523079",
    "end": "530540"
  },
  {
    "text": "pretty powerful stuff and very consistent it specifically for dotnet development making use making use of",
    "start": "530540",
    "end": "539710"
  },
  {
    "text": "service architecture on our side there are many services I I do only have a few",
    "start": "539710",
    "end": "546110"
  },
  {
    "text": "here that I'm that I'm going to mention you know things like you know s3 already",
    "start": "546110",
    "end": "552080"
  },
  {
    "text": "mentioned Kinesis for real-time processing or massive amounts of data that you either need to hook into as an",
    "start": "552080",
    "end": "558770"
  },
  {
    "text": "event or you need to pipe it out to specific systems or specific data",
    "start": "558770",
    "end": "563870"
  },
  {
    "text": "warehouses or something like that using things like kognito for actually",
    "start": "563870",
    "end": "569690"
  },
  {
    "text": "authentication side of things we use that on a you know for a lot of mobile applications and so on",
    "start": "569690",
    "end": "576310"
  },
  {
    "text": "what about using on adopted side we use windows workflow foundation windows",
    "start": "576310",
    "end": "581600"
  },
  {
    "text": "complete windows communication foundation you know for building out ESB",
    "start": "581600",
    "end": "587089"
  },
  {
    "text": "and all that and windows workflow foundation for state machine workflows and all that we do have in a much",
    "start": "587089",
    "end": "594110"
  },
  {
    "text": "simpler services on our side things like aw step functions which actually allows you to build very easily in our schema",
    "start": "594110",
    "end": "602660"
  },
  {
    "text": "based language state machine workflows that work in conjunction with lambda and",
    "start": "602660",
    "end": "608720"
  },
  {
    "text": "most of you probably know what lambda is for those of you that don't know that is really the core about micro services",
    "start": "608720",
    "end": "614089"
  },
  {
    "text": "added where you can use actually c-sharp to write out you know literally a piece",
    "start": "614089",
    "end": "620060"
  },
  {
    "text": "of code that we actually we execute and run in the background we ensure the for availability and resilience on our side",
    "start": "620060",
    "end": "628010"
  },
  {
    "text": "all you have to just worry about to what api do what you want the code to do itself so so the step functions can",
    "start": "628010",
    "end": "635270"
  },
  {
    "text": "either execute lambdas or they can work through activity steps by execution of any of the code with the day be running",
    "start": "635270",
    "end": "641420"
  },
  {
    "text": "on containers or any other external servers or anything like that extremely powerful extremely also easy to use api",
    "start": "641420",
    "end": "649790"
  },
  {
    "text": "gateway really for for traditional architecture i'm going to only talk about the traditional side of things",
    "start": "649790",
    "end": "655790"
  },
  {
    "text": "murray will talk about more you know a service side I've used it to like encapsulate our",
    "start": "655790",
    "end": "662430"
  },
  {
    "text": "legacy services like soap services by that needed to actually provide a",
    "start": "662430",
    "end": "667830"
  },
  {
    "text": "restful endpoint so and you can encapsulate just about any aspect or",
    "start": "667830",
    "end": "673710"
  },
  {
    "text": "basically procreate very quickly an API that that behind so the way it kind of",
    "start": "673710",
    "end": "680640"
  },
  {
    "text": "works is that you have an API gateway that you know you just define you know that the rest'll endpoint quite easily",
    "start": "680640",
    "end": "686930"
  },
  {
    "text": "and then you know this there's the payload goes out to the lambda function",
    "start": "686930",
    "end": "692820"
  },
  {
    "text": "which again you can write in c-sharp and then you can just decide whatever you want to do with it and how you want to",
    "start": "692820",
    "end": "698550"
  },
  {
    "text": "respond back quite easily things like SNS oh my god what a useful",
    "start": "698550",
    "end": "705450"
  },
  {
    "text": "service and not only can you talk to other you know restful services and",
    "start": "705450",
    "end": "711060"
  },
  {
    "text": "other services in general but it can also send out emails it can send SMS as it can do a lot you can do tons of",
    "start": "711060",
    "end": "717960"
  },
  {
    "text": "things to decouple you know very problematic parts of your legacy dotnet applications using our service services",
    "start": "717960",
    "end": "724709"
  },
  {
    "text": "SCS for sending out emails you can use Alexis obviously and hold air this",
    "start": "724709",
    "end": "731190"
  },
  {
    "text": "there's quite a bit we image you get actually jazz up your existing applications and existing architectures",
    "start": "731190",
    "end": "736740"
  },
  {
    "text": "before you even transition over to micro services and service so where do you",
    "start": "736740",
    "end": "743730"
  },
  {
    "start": "742000",
    "end": "742000"
  },
  {
    "text": "want to be what is the message you want to be stateless for crying out loud",
    "start": "743730",
    "end": "750510"
  },
  {
    "text": "really we do not need stateful services anymore this is this is an issue for so",
    "start": "750510",
    "end": "756120"
  },
  {
    "text": "many on so many levels and for so many reasons right we want to make sure that",
    "start": "756120",
    "end": "761880"
  },
  {
    "text": "that we have a highly scalable self-healing and available architecture similar services provide this thing",
    "start": "761880",
    "end": "768690"
  },
  {
    "text": "already for you you don't have to worry about whether you actually doing a multi AZ deployment or anything like that and",
    "start": "768690",
    "end": "774150"
  },
  {
    "text": "how it's gonna failover we do that for you right and they are competitively",
    "start": "774150",
    "end": "779430"
  },
  {
    "text": "there's so much cheaper than anything that you would be running on ec2 nevermind nearly anywhere else make use",
    "start": "779430",
    "end": "786959"
  },
  {
    "text": "of the the service platform try and augment as much of the this complicated functionality from your",
    "start": "786959",
    "end": "793430"
  },
  {
    "text": "applications and use lambda use step functions use API gateways open yourself",
    "start": "793430",
    "end": "799910"
  },
  {
    "text": "up to using no sequel databases like dynamodb they're very easy and quick to use and servlets way simple queuing",
    "start": "799910",
    "end": "806630"
  },
  {
    "text": "service for curing simple modification service for communication either between services or to you know your emails and",
    "start": "806630",
    "end": "813890"
  },
  {
    "text": "SMS and so on and make use of things I think that we're going to be talking",
    "start": "813890",
    "end": "820070"
  },
  {
    "text": "more about like ECS container services and AWS batch which is really an overlay",
    "start": "820070",
    "end": "826910"
  },
  {
    "text": "on top of ACS that that is a fully managed service that manages execution",
    "start": "826910",
    "end": "832279"
  },
  {
    "text": "of batch jobs which are effectively tasks for specific applications and use",
    "start": "832279",
    "end": "841040"
  },
  {
    "text": "that really to to execute specific tasks",
    "start": "841040",
    "end": "846320"
  },
  {
    "text": "and specific services if they need to be running for a prolonged period of time",
    "start": "846320",
    "end": "851450"
  },
  {
    "text": "or just as a batch in a way where you just need to execute something for that",
    "start": "851450",
    "end": "857089"
  },
  {
    "text": "needs to run on a specifically optimized instance with specific resources assigned to it and that can kind of you",
    "start": "857089",
    "end": "865459"
  },
  {
    "text": "know kind of die and and be recycled without incurring any more cost so with",
    "start": "865459",
    "end": "874910"
  },
  {
    "text": "that I hand over to Murray who's going to be talking to you about how to start building out micro services using.net",
    "start": "874910",
    "end": "883720"
  },
  {
    "text": "architecture thank you hi everyone murray up here ATO a Solutions Architect",
    "start": "883720",
    "end": "889300"
  },
  {
    "text": "so dotnet has been used by a lot of",
    "start": "889300",
    "end": "894650"
  },
  {
    "start": "891000",
    "end": "891000"
  },
  {
    "text": "businesses empowering a lot of mission-critical applications we all start with monolith application and",
    "start": "894650",
    "end": "900560"
  },
  {
    "text": "that's what we discover as we add more features in this application our code base becomes larger and it has a sprawl",
    "start": "900560",
    "end": "908750"
  },
  {
    "text": "and therefore it's longer to compile and it's much more difficult to deploy the",
    "start": "908750",
    "end": "914750"
  },
  {
    "text": "operational aspect of that one - with monolith applications and with all the",
    "start": "914750",
    "end": "919880"
  },
  {
    "text": "dependencies as what Z has mentioned is that it's so difficult to scale other",
    "start": "919880",
    "end": "925250"
  },
  {
    "text": "than that one of the patterns that we see also is that developers use the same release",
    "start": "925250",
    "end": "931040"
  },
  {
    "text": "pipeline to deploy or push their code making the release cycle much longer",
    "start": "931040",
    "end": "936200"
  },
  {
    "text": "because there's a lot of congestion in that single release pipeline there's a",
    "start": "936200",
    "end": "941420"
  },
  {
    "text": "lot of you know like who could probably anyone here could relate that with",
    "start": "941420",
    "end": "946660"
  },
  {
    "text": "monolithic applications when you just change a single line of code it takes",
    "start": "946660",
    "end": "951829"
  },
  {
    "text": "like a very high overhead process to redeploy that one back to production so",
    "start": "951829",
    "end": "957290"
  },
  {
    "text": "a lot of these are something that companies would like to change and wanted to embrace and move forward to",
    "start": "957290",
    "end": "963320"
  },
  {
    "text": "micro-services so with micro services it drives agility in the application which",
    "start": "963320",
    "end": "969110"
  },
  {
    "text": "means that since micro services are independent with each other you can scale them without any problems there's",
    "start": "969110",
    "end": "976760"
  },
  {
    "text": "also an ease of operation and iteration in the platform on top of that there's",
    "start": "976760",
    "end": "982970"
  },
  {
    "text": "faster pace of innovation because micro services drives a faster build task and",
    "start": "982970",
    "end": "988670"
  },
  {
    "text": "release cycle and also at the end of the day it's all about the happy customers right so it's whether it's an internal",
    "start": "988670",
    "end": "994940"
  },
  {
    "text": "customers where the micro service team is responsible for the micro servers that they support they operate",
    "start": "994940",
    "end": "1002050"
  },
  {
    "text": "independently because of this culture of being able to be accountable for the",
    "start": "1002050",
    "end": "1007630"
  },
  {
    "text": "things that they own so what are the tools and the common architecture patterns that we see here in AWS in",
    "start": "1007630",
    "end": "1014560"
  },
  {
    "text": "deploying dotnet core micro services so how do we start",
    "start": "1014560",
    "end": "1019630"
  },
  {
    "start": "1018000",
    "end": "1018000"
  },
  {
    "text": "so to start building your micro service dotnet core base application you install",
    "start": "1019630",
    "end": "1026678"
  },
  {
    "text": "the AWS toolkit for visual studio so for visual studio 2017 you can actually",
    "start": "1026679",
    "end": "1032798"
  },
  {
    "text": "download that from the visual studio gallery and then if you are working with Visual Studio 2015 then you can download",
    "start": "1032799",
    "end": "1039188"
  },
  {
    "text": "download that one from the visual studio section from the AWS website so within",
    "start": "1039189",
    "end": "1045970"
  },
  {
    "text": "this toolkit what you can do is you can create a profile that would contain your AWS credentials and this credentials",
    "start": "1045970",
    "end": "1053110"
  },
  {
    "text": "would allow you to basically create and access resources from AWS",
    "start": "1053110",
    "end": "1059260"
  },
  {
    "text": "services that you can use within your dotnet application so the dotnet SDK for",
    "start": "1059260",
    "end": "1064980"
  },
  {
    "text": "iOS SDK for dotnet is actually supporting the 3.5 framework the 4.5",
    "start": "1064980",
    "end": "1072850"
  },
  {
    "text": "framework and also the dotnet core which allows you to deploy c-sharp functions",
    "start": "1072850",
    "end": "1078070"
  },
  {
    "text": "or dotnet core application in lambda and API gateway and then we also do some",
    "start": "1078070",
    "end": "1084670"
  },
  {
    "text": "integration or an extension for the visual studio team services and team",
    "start": "1084670",
    "end": "1090190"
  },
  {
    "text": "foundation server x' so it what we do is we have an extension called Adria's",
    "start": "1090190",
    "end": "1096670"
  },
  {
    "text": "tools for visual studio team services which allows you to rapidly build and deploy your applications into AWS it is",
    "start": "1096670",
    "end": "1105610"
  },
  {
    "text": "an extension where for example if you wanted to deploy your code into AWS",
    "start": "1105610",
    "end": "1110680"
  },
  {
    "text": "using elastic mean stuff there's a VST s task for that one and then let's say if",
    "start": "1110680",
    "end": "1117310"
  },
  {
    "text": "you plan to deploy your application an ec2 or easy to container services then you can",
    "start": "1117310",
    "end": "1124270"
  },
  {
    "text": "create a task for that also using AWS code deploy which is a managed service",
    "start": "1124270",
    "end": "1130480"
  },
  {
    "text": "for automated code deployment or application deployment in AWS so if you",
    "start": "1130480",
    "end": "1136060"
  },
  {
    "text": "do need to provision any other resources using VST s you can create a task and",
    "start": "1136060",
    "end": "1142060"
  },
  {
    "text": "reference a CloudFormation template which is infrastructure as code and you can actually create any resources that",
    "start": "1142060",
    "end": "1148030"
  },
  {
    "text": "you need for your net application automation is a big thing in creating",
    "start": "1148030",
    "end": "1154930"
  },
  {
    "text": "micro services it's one way for us to manage things seamlessly so therefore",
    "start": "1154930",
    "end": "1159970"
  },
  {
    "text": "there we have tools also for command line and we also have tools for PowerShell so if you do need to know",
    "start": "1159970",
    "end": "1167620"
  },
  {
    "text": "more of looking into an example and how to develop dotnet core and AWS there's",
    "start": "1167620",
    "end": "1173230"
  },
  {
    "text": "also another session here and we invent it's called dev three-30 so if you have",
    "start": "1173230",
    "end": "1178900"
  },
  {
    "text": "some time please check that one out so",
    "start": "1178900",
    "end": "1184260"
  },
  {
    "start": "1183000",
    "end": "1183000"
  },
  {
    "text": "when you're looking into micro services there are actually three layers with that so you have the UI or user",
    "start": "1184260",
    "end": "1191620"
  },
  {
    "text": "interface Slayer then you got your microservice and then you got your data store so at",
    "start": "1191620",
    "end": "1197470"
  },
  {
    "text": "the very basic anyone could actually deploy their micro service on ec2 and then put the ec2 in auto scaling group",
    "start": "1197470",
    "end": "1204400"
  },
  {
    "text": "and then put that behind the load balancer and then you could pick any data story that you want behind it right",
    "start": "1204400",
    "end": "1209710"
  },
  {
    "text": "so but then this poses a lot of infrastructure management and",
    "start": "1209710",
    "end": "1215230"
  },
  {
    "text": "administration and so to avoid the heavy lifting of doing that one we're looking",
    "start": "1215230",
    "end": "1220600"
  },
  {
    "text": "into the first approach here which is a server les type of architecture in the",
    "start": "1220600",
    "end": "1227169"
  },
  {
    "text": "Pointer dotnet core micro service so this is using the Adria's lambda architecture so with this one in this",
    "start": "1227169",
    "end": "1234789"
  },
  {
    "text": "three layer you can see on the first layer on the UI layer for all our rjs",
    "start": "1234789",
    "end": "1241960"
  },
  {
    "text": "our HTML our static content we can store it at an s3 which is fronted out by cloud front and then we're micro service",
    "start": "1241960",
    "end": "1250179"
  },
  {
    "text": "is basically using the api and AWS api gateway and ada way s lambda and then",
    "start": "1250179",
    "end": "1257230"
  },
  {
    "text": "for the datastore you have many options in here you could go with Amazon DynamoDB for no sequel or if you need to",
    "start": "1257230",
    "end": "1264400"
  },
  {
    "text": "have like more of like a transactional type of micro service then there's a relational database for that my AWS a",
    "start": "1264400",
    "end": "1272380"
  },
  {
    "text": "relational database service and then you can also use like an in-memory managed",
    "start": "1272380",
    "end": "1278350"
  },
  {
    "text": "database service called Amazon ElastiCache so in this case what what",
    "start": "1278350",
    "end": "1285760"
  },
  {
    "text": "happens is that your dotnet core application is actually deployed as a lambda function and then the request is",
    "start": "1285760",
    "end": "1292929"
  },
  {
    "text": "actually coming from the API gateway so this request is being processed by lambda which is being passed with a",
    "start": "1292929",
    "end": "1299470"
  },
  {
    "text": "dotnet core processing pipeline and then what it does is that the request is then",
    "start": "1299470",
    "end": "1304809"
  },
  {
    "text": "being passed through to the datastore if it needs to be accessed if it needs to access the data store so with this one",
    "start": "1304809",
    "end": "1311950"
  },
  {
    "text": "here instead of using kestrel nginx or is we're actually replacing that",
    "start": "1311950",
    "end": "1317470"
  },
  {
    "text": "architecture using api gateway and lambda and when you're looking into api gateway and micro service type of",
    "start": "1317470",
    "end": "1324340"
  },
  {
    "text": "architecture it gives you a means of abstraction it makes your micro service more agile",
    "start": "1324340",
    "end": "1330490"
  },
  {
    "text": "which means that you could have your api's expose in Amazon API gateway and",
    "start": "1330490",
    "end": "1336310"
  },
  {
    "text": "then you could have anything behind the scene you could have you could deploy your application on lambda on ec2 or in",
    "start": "1336310",
    "end": "1343150"
  },
  {
    "text": "a container so it doesn't matter other than that API gateway is a managed",
    "start": "1343150",
    "end": "1348820"
  },
  {
    "text": "service so you don't have any servers to deploy it scales out for you seamlessly and also there is a feature an API",
    "start": "1348820",
    "end": "1355930"
  },
  {
    "text": "gateway that you can control the rate of request that goes into your micro service other than that security",
    "start": "1355930",
    "end": "1362740"
  },
  {
    "text": "security is a very important part of micro service so with API gateway it",
    "start": "1362740",
    "end": "1368380"
  },
  {
    "text": "allows you to have a centralized place to put your security policies and control it has a direct integration with",
    "start": "1368380",
    "end": "1376390"
  },
  {
    "text": "lambda so users like lambda authorizers wherein it allows you to use the",
    "start": "1376390",
    "end": "1382540"
  },
  {
    "text": "Identity and Access Management policies in AWS and roles to restrict or grant",
    "start": "1382540",
    "end": "1389140"
  },
  {
    "text": "permission to which AWS lambda function that contains your micro services can be accessed so instead of putting all the",
    "start": "1389140",
    "end": "1397030"
  },
  {
    "text": "security controls in your code you can take that out and then put that on API",
    "start": "1397030",
    "end": "1402040"
  },
  {
    "text": "gateway to manage the security controls for you and how your micro services",
    "start": "1402040",
    "end": "1407320"
  },
  {
    "text": "would be accessed other than that when we were working with micro services and",
    "start": "1407320",
    "end": "1413740"
  },
  {
    "text": "especially like deploying new features or building you know like patch fixes and so on it's important to do",
    "start": "1413740",
    "end": "1420310"
  },
  {
    "text": "versioning so you should be your applications or other applications should be able to have the time to",
    "start": "1420310",
    "end": "1426400"
  },
  {
    "text": "adjust the new you know version of the API or and also being able to rollback",
    "start": "1426400",
    "end": "1431920"
  },
  {
    "text": "or access the old version of the api's so with that there is a versioning",
    "start": "1431920",
    "end": "1437740"
  },
  {
    "text": "feature also and the API gateway which is part of the API lifecycle management",
    "start": "1437740",
    "end": "1442830"
  },
  {
    "text": "also lambda has versioning features so both of these features allows you use to seamlessly access both versions of your",
    "start": "1442830",
    "end": "1450580"
  },
  {
    "text": "api's and then another approach that we",
    "start": "1450580",
    "end": "1456550"
  },
  {
    "start": "1453000",
    "end": "1453000"
  },
  {
    "text": "see here is that if you're not ready for a server list type of architecture there is another option here so easy to container",
    "start": "1456550",
    "end": "1464570"
  },
  {
    "text": "architecture is basically using the ec2 container services so what is different",
    "start": "1464570",
    "end": "1471470"
  },
  {
    "text": "here is actually in the middle so instead of using API gateway and lambda",
    "start": "1471470",
    "end": "1476720"
  },
  {
    "text": "we're using Amazon ACS which is fronted by an application load down sir so the",
    "start": "1476720",
    "end": "1482000"
  },
  {
    "text": "application load balancer directs all the requests your micro services deployed on an Amazon ec2 container",
    "start": "1482000",
    "end": "1489500"
  },
  {
    "text": "instance which contains your micro service API and business logic so also",
    "start": "1489500",
    "end": "1496460"
  },
  {
    "text": "announced this morning there is a new managed container service for gates so",
    "start": "1496460",
    "end": "1502280"
  },
  {
    "text": "instead of using ECS you can also use for gate us as another option in this",
    "start": "1502280",
    "end": "1507410"
  },
  {
    "text": "architecture so within ECS there is a task parameter which is a JSON file that",
    "start": "1507410",
    "end": "1513800"
  },
  {
    "text": "you specify on what are the parameters that is needed for your dotnet applications to run and also on and also",
    "start": "1513800",
    "end": "1521780"
  },
  {
    "text": "the docker image which is the dotnet core docker image that it would be using for for the ec2 of container instances",
    "start": "1521780",
    "end": "1529430"
  },
  {
    "text": "so so so with that you know with all",
    "start": "1529430",
    "end": "1534830"
  },
  {
    "text": "this managed services it will be more easier for you to deploy or you know",
    "start": "1534830",
    "end": "1539930"
  },
  {
    "text": "dotnet core based micro service architecture so to see this all come",
    "start": "1539930",
    "end": "1545870"
  },
  {
    "start": "1545000",
    "end": "1545000"
  },
  {
    "text": "together we'll be looking into an application that has 2.5 about 2.5",
    "start": "1545870",
    "end": "1551990"
  },
  {
    "text": "million visitors per month about 85,000 logins per day 70 micro services written",
    "start": "1551990",
    "end": "1558500"
  },
  {
    "text": "across three different languages about 3,500 API requests per second its PCI",
    "start": "1558500",
    "end": "1564710"
  },
  {
    "text": "compliant and it took out about one year for this team to build from the ground up so I would like to pass over to Danny",
    "start": "1564710",
    "end": "1572510"
  },
  {
    "text": "from experience to experience to share their journey to the micro services thanks Mary hi so I'm Danny personick",
    "start": "1572510",
    "end": "1580370"
  },
  {
    "text": "and I've worked for Experian for 11 years doing a dotnet programming and architecture been doing AWS for about",
    "start": "1580370",
    "end": "1588230"
  },
  {
    "text": "two now and like I said I support experience Cote UK so this this architects we're going to",
    "start": "1588230",
    "end": "1594009"
  },
  {
    "text": "speak on is what runs our credit expert and credit master websites in the UK so",
    "start": "1594009",
    "end": "1599169"
  },
  {
    "text": "before I get into the AWS stuff though I'm gonna talk a little bit about where we used to be which is kind of what",
    "start": "1599169",
    "end": "1604179"
  },
  {
    "start": "1604000",
    "end": "1604000"
  },
  {
    "text": "Marie Ann's lawton talked about all of the the pitfalls of what happens before you get an AWS or the digital",
    "start": "1604179",
    "end": "1610809"
  },
  {
    "text": "architecture so we were an NT ER architecture platform running dotnet 4.5 sequel server is web servers WCF hosted",
    "start": "1610809",
    "end": "1619239"
  },
  {
    "text": "web application servers sends 50 developers we actually had a hundred plus developers across three different",
    "start": "1619239",
    "end": "1624309"
  },
  {
    "text": "offices so we had single TFS instance for all of our code which was very hard",
    "start": "1624309",
    "end": "1629919"
  },
  {
    "text": "to deploy from and our solution file was we broke it up but it was roughly 350",
    "start": "1629919",
    "end": "1635470"
  },
  {
    "text": "different CS projects so it was a massive application that was split across the the different web app and job",
    "start": "1635470",
    "end": "1641440"
  },
  {
    "text": "server so as you can imagine it was not easy to maintain it was not easy to",
    "start": "1641440",
    "end": "1646779"
  },
  {
    "text": "update and deployments took quite a long time so all of our window all of our servers were actually Windows servers -",
    "start": "1646779",
    "end": "1653259"
  },
  {
    "text": "with very complex configs so tweaking any of that was was definitely a pain so",
    "start": "1653259",
    "end": "1658599"
  },
  {
    "text": "with that we had a goal that we wanted to get into the cloud another team on our in North America had just started",
    "start": "1658599",
    "end": "1665080"
  },
  {
    "text": "dabbling in AWS and so we started looking at options as well and we thought it would be best if we moved",
    "start": "1665080",
    "end": "1670899"
  },
  {
    "text": "into AWS so we could leverage all the work that they had done another goal was to automate everything as I said in our",
    "start": "1670899",
    "end": "1676599"
  },
  {
    "text": "old system everything was very manual from testing to deployments everything",
    "start": "1676599",
    "end": "1682239"
  },
  {
    "text": "was manual so our goal was automate wherever we could so unit tests automation tests automated deployments",
    "start": "1682239",
    "end": "1688690"
  },
  {
    "text": "etc we always we definitely wanted to go with infrastructure as code because setting up new servers in our old world",
    "start": "1688690",
    "end": "1695590"
  },
  {
    "text": "was very tedious we had some of its scripted but you know spinning up a new a new environment or new new servers",
    "start": "1695590",
    "end": "1703210"
  },
  {
    "text": "just took a lot of time so everything that we wanted to do for all of our deployments and infrastructure we had to have his code had to be in github",
    "start": "1703210",
    "end": "1709929"
  },
  {
    "text": "it had to be easily easily maintained and obviously we want to go to microservices as well going from a",
    "start": "1709929",
    "end": "1716409"
  },
  {
    "text": "monolith to micro services because it make it much easier for us to spread the deployment across our three different",
    "start": "1716409",
    "end": "1721659"
  },
  {
    "text": "office locations and against smaller teams so we also were going to transform from waterfall",
    "start": "1721659",
    "end": "1727980"
  },
  {
    "text": "to agile I'm sure a lot of you in the dotnet world and maybe even the financial worlds have been more of a traditional waterfall or waterfall sdlc",
    "start": "1727980",
    "end": "1735389"
  },
  {
    "text": "so we use this as an opportunity to actually transform the culture and the",
    "start": "1735389",
    "end": "1740730"
  },
  {
    "text": "way our organization works so it was it was a difficult process in doing this",
    "start": "1740730",
    "end": "1746100"
  },
  {
    "text": "but we are successfully agile now so so",
    "start": "1746100",
    "end": "1753299"
  },
  {
    "text": "what are we gonna do well fortunately Microsoft came out with dotnet core so we started playing around with dotnet",
    "start": "1753299",
    "end": "1758580"
  },
  {
    "text": "core roughly in the beginning of 2050 when it came out and or in the betas in",
    "start": "1758580",
    "end": "1765509"
  },
  {
    "start": "1759000",
    "end": "1759000"
  },
  {
    "text": "2015 I believe it was so we started prototyping in AWS summer of 2015 when",
    "start": "1765509",
    "end": "1772080"
  },
  {
    "text": "dotnet core was still beta seven this is actually our first docker file when I",
    "start": "1772080",
    "end": "1777299"
  },
  {
    "text": "deployed our first service to an ec2 instance so very simplistic but it just to show how far we've come",
    "start": "1777299",
    "end": "1783869"
  },
  {
    "text": "Microsoft was maintaining their own docker images even back then so it allowed us to rapidly get things into",
    "start": "1783869",
    "end": "1790470"
  },
  {
    "text": "ec2 and try things this was before we before ECS was even a thing so it's also open",
    "start": "1790470",
    "end": "1798749"
  },
  {
    "text": "source one of the one of the benefits of open source is it's allowed us to actually go through some of the microsoft source code and figure out",
    "start": "1798749",
    "end": "1805080"
  },
  {
    "text": "some of the issues that we're having we've had developers contribute back to microsoft's repos and github one of",
    "start": "1805080",
    "end": "1810990"
  },
  {
    "text": "those developers in the audience here somewhere so he's submitted PRS and got them approved so that's pretty cool obviously",
    "start": "1810990",
    "end": "1818009"
  },
  {
    "text": "it's cross-platform so in our old world we were primarily windows servers we wanted to move into a Linux based",
    "start": "1818009",
    "end": "1823830"
  },
  {
    "text": "environment lessons learned from our North America team when they first started doing their AWS deployments they",
    "start": "1823830",
    "end": "1829529"
  },
  {
    "text": "try to take our old application and run it in Windows servers and getting the Windows servers to auto scale and spin up was very time consuming so we we made",
    "start": "1829529",
    "end": "1838080"
  },
  {
    "text": "it a goal that we didn't want to have anything windows-based at all anymore would be a hundred percent Linux so docker allowed us to do that",
    "start": "1838080",
    "end": "1843960"
  },
  {
    "text": "the other big thing was the AWS SDK support they were putting out updates every beta really quickly and I actually",
    "start": "1843960",
    "end": "1850919"
  },
  {
    "text": "worked closely with one of the ATF's developers it's the session that she's talking about dev 330 and just make",
    "start": "1850919",
    "end": "1856440"
  },
  {
    "text": "sure that we got the timely releases so that we could get that without having the AWS SDK support that we did we",
    "start": "1856440",
    "end": "1862260"
  },
  {
    "text": "wouldn't been able to get this platform out the door in the time that we did so one of the first things we did was we",
    "start": "1862260",
    "end": "1868290"
  },
  {
    "start": "1866000",
    "end": "1866000"
  },
  {
    "text": "actually decide we're gonna sketch a blueprint architecture for what we were trying to build so this is a simplified",
    "start": "1868290",
    "end": "1874980"
  },
  {
    "text": "version of it but this was our goal our idea of the different services we wanted",
    "start": "1874980",
    "end": "1880710"
  },
  {
    "text": "to use in AWS and like I said we started this two years ago so it was a little bit before API gateway was a thing so",
    "start": "1880710",
    "end": "1885870"
  },
  {
    "text": "we're still using an engine X reverse proxy but this was the starting point our goal was to use as many AWS services",
    "start": "1885870",
    "end": "1892440"
  },
  {
    "text": "as possible we didn't want to build things that Amazon could provide for us because we didn't want to be in the mate",
    "start": "1892440",
    "end": "1897900"
  },
  {
    "text": "we wanted to focus on business logic and providing customers features as opposed to maintaining other services that we",
    "start": "1897900",
    "end": "1904260"
  },
  {
    "text": "just didn't need to so everywhere there was an Amazon service we we utilized that so from dynamo SMS SQS s3 redshift",
    "start": "1904260",
    "end": "1912990"
  },
  {
    "text": "etc in this in this diagram one of the two things that you see that are that",
    "start": "1912990",
    "end": "1918000"
  },
  {
    "text": "are not necessarily AWS services that we built ourselves are our service registry and our service configuration so those",
    "start": "1918000",
    "end": "1924630"
  },
  {
    "text": "are two key points that all of our micro services use the service registry is basically that it's a service lookup so",
    "start": "1924630",
    "end": "1930900"
  },
  {
    "text": "when when services want to do a service the service call they're going to call into this this Redis cache which is",
    "start": "1930900",
    "end": "1937500"
  },
  {
    "text": "backed by a dynamo database that has all of the addresses for the different micro services there's also the service config",
    "start": "1937500",
    "end": "1943830"
  },
  {
    "text": "as part of our deployment process every micro service fills out a service description or a JSON file that has all",
    "start": "1943830",
    "end": "1950730"
  },
  {
    "text": "of its configuration data and it I'll get to that little bit more later but that's the other key rhetta's config that we have that all micro services use",
    "start": "1950730",
    "end": "1957060"
  },
  {
    "text": "and those are the two shared components in this system so I said that we broke",
    "start": "1957060",
    "end": "1962820"
  },
  {
    "start": "1961000",
    "end": "1961000"
  },
  {
    "text": "we had to change our culture so what do we do so we actually broke up our dev team so our dev team like I said was",
    "start": "1962820",
    "end": "1969360"
  },
  {
    "text": "about 100 developers split across three offices everyone there people didn't",
    "start": "1969360",
    "end": "1974580"
  },
  {
    "text": "necessarily have focus it was just we had what we have with front-end developers we had back in developers but no one had their own domain so we",
    "start": "1974580",
    "end": "1981570"
  },
  {
    "text": "decided to come with the pizza team concept that Amazon had we call them domain teams internally but basically we",
    "start": "1981570",
    "end": "1987720"
  },
  {
    "text": "broke up all the teams in you different focus focus areas so we have a customer profiling team we have a",
    "start": "1987720",
    "end": "1994260"
  },
  {
    "text": "credit report and score team we have a CRM team and we have an alerts team and",
    "start": "1994260",
    "end": "2001100"
  },
  {
    "text": "we also have compare team so all these different teams allowed us to really give the team's focus and those are the",
    "start": "2001100",
    "end": "2007460"
  },
  {
    "text": "services they owned it didn't have to worry so much about stepping on everybody else's toes another thing we",
    "start": "2007460",
    "end": "2013550"
  },
  {
    "text": "did is we built a set of core libraries we we wanted to have some standards so",
    "start": "2013550",
    "end": "2019730"
  },
  {
    "text": "we thought if we built a set of core libraries that we could actually share amongst all micro services it would",
    "start": "2019730",
    "end": "2025670"
  },
  {
    "text": "allow us to speed things up it allow us to have versions in those libraries and allowed us to abstract some of the 8008",
    "start": "2025670",
    "end": "2031250"
  },
  {
    "text": "of us services so everybody can do things in the same way so it's a little bit of a wrapper around the AWS SDK but",
    "start": "2031250",
    "end": "2038240"
  },
  {
    "text": "it also allowed us to have some commonality with things so all of our logging is maintained within the core",
    "start": "2038240",
    "end": "2043550"
  },
  {
    "text": "library some of our event publishing which I'll get to in a little bit later the message format all of that is there",
    "start": "2043550",
    "end": "2050240"
  },
  {
    "text": "the API standard requests coming in and out all within the core library and we have that all automated now in Travis CI",
    "start": "2050240",
    "end": "2057139"
  },
  {
    "text": "so when we push to our github repo internally a doctor bill gets kicked off",
    "start": "2057140",
    "end": "2063290"
  },
  {
    "text": "within Travis CI and when it's done they actually get pushed out to our own internal nougat server",
    "start": "2063290",
    "end": "2068780"
  },
  {
    "text": "we're running Nexus OSS internally for that so we have versions I think we're",
    "start": "2068780",
    "end": "2073970"
  },
  {
    "text": "up to 4.0 of our common libraries at this point now and it's it's been a real success story for us in terms of really",
    "start": "2073970",
    "end": "2080750"
  },
  {
    "text": "speeding things up another thing we did is we built a service generator so we",
    "start": "2080750",
    "end": "2086090"
  },
  {
    "text": "use yeoman yeoman was what Microsoft was putting out at the very beginning a dotnet core and so the service generator",
    "start": "2086090",
    "end": "2092060"
  },
  {
    "text": "allowed us to really like to quickly scaffold new services so we came up with a base template of what we thought a",
    "start": "2092060",
    "end": "2097640"
  },
  {
    "text": "microchip like in terms of your visual studio project and you know from your from your API layer all the way to your",
    "start": "2097640",
    "end": "2104240"
  },
  {
    "text": "data layer we took that and we basically came up with a template put it in yeoman and now basically developers pull yeoman",
    "start": "2104240",
    "end": "2111320"
  },
  {
    "text": "generator down type in a few commands and they have a micro service that pulls in all the base common libraries they need and we'll run right away so it a",
    "start": "2111320",
    "end": "2118970"
  },
  {
    "text": "lot it's allowed us to basically get new micro services out from having nothing to a full running service",
    "start": "2118970",
    "end": "2124450"
  },
  {
    "text": "in under a day so that our development process obviously had to change a little",
    "start": "2124450",
    "end": "2130540"
  },
  {
    "start": "2127000",
    "end": "2127000"
  },
  {
    "text": "bit too we were everyone still on for the most part Windows machines our DevOps teams are not on Windows teams or Windows",
    "start": "2130540",
    "end": "2136570"
  },
  {
    "text": "machines but all of our existing developers still had Windows machines so getting docker to work on Windows is a",
    "start": "2136570",
    "end": "2143440"
  },
  {
    "text": "little bit of a challenge because we were running a little bit older Windows it's not Windows 10 but we got it working and so but the good thing about",
    "start": "2143440",
    "end": "2149050"
  },
  {
    "text": "docker is once you build your service locally you can run it on Windows you can deploy it in docker and then it's",
    "start": "2149050",
    "end": "2154359"
  },
  {
    "text": "going to go out into the ec2 Linux environment and really to haven't had any issues there all all services are",
    "start": "2154359",
    "end": "2162340"
  },
  {
    "text": "independent - and have their own independent github repos so there's no dependencies on service deployment one",
    "start": "2162340",
    "end": "2168520"
  },
  {
    "text": "team wants to deploy a service and they just go they pull it from pull it from github and go from there on the",
    "start": "2168520",
    "end": "2174580"
  },
  {
    "text": "right-hand side of this you see what is called our metadata JSON this is our own",
    "start": "2174580",
    "end": "2179710"
  },
  {
    "text": "internal description layer that we've kind of built that our build pipeline reads and basically this is going to go",
    "start": "2179710",
    "end": "2187330"
  },
  {
    "text": "when it's deploying the service to cloud formation it's going to read all the AWS resources that the dev team has requested so if you need to s3 buckets",
    "start": "2187330",
    "end": "2193960"
  },
  {
    "text": "if you need queues dinamo etc all that's configured in here and the deployment",
    "start": "2193960",
    "end": "2199570"
  },
  {
    "text": "process is going to use that we also and this is what gets stored in that service configuration Redis cache that I mentioned so when services start up",
    "start": "2199570",
    "end": "2205810"
  },
  {
    "text": "they're going to read all of this data obviously all the resources already created in AWS but any other service",
    "start": "2205810",
    "end": "2211330"
  },
  {
    "text": "specific configuration can be pulled out of this so I wanna talk a little bit",
    "start": "2211330",
    "end": "2217750"
  },
  {
    "start": "2216000",
    "end": "2216000"
  },
  {
    "text": "about the anatomy of what one of our micro services look like so all of our micro services exist in ECS so we are",
    "start": "2217750",
    "end": "2225490"
  },
  {
    "text": "using container service and each micro service consists of actually three containers what you can see is there's",
    "start": "2225490",
    "end": "2232420"
  },
  {
    "text": "we have what's called an sqs listener an HTTP listener and then this service container so the two the two listeners",
    "start": "2232420",
    "end": "2239109"
  },
  {
    "text": "that you see in front of the micro Service are both node.js applications they're the ones that are going to be",
    "start": "2239109",
    "end": "2244150"
  },
  {
    "text": "receiving sqs calls as well as all the HTTP calls the HTTP listener basically",
    "start": "2244150",
    "end": "2250270"
  },
  {
    "text": "is validating the request before it gets the micro service so we wanted to pull all of that kind of out of the micro service so developers didn't have",
    "start": "2250270",
    "end": "2256059"
  },
  {
    "text": "to worry about that it's making sure headers are formed that it knows what routes it can call Akal and authorization everything so that's in",
    "start": "2256059",
    "end": "2263019"
  },
  {
    "text": "the HTTP listener the service container that you see in the back is where all the dotnet business logic is and",
    "start": "2263019",
    "end": "2268029"
  },
  {
    "text": "obviously in this example we're speaking on dotnet but we have multiple languages we have a bunch in Java as well even",
    "start": "2268029",
    "end": "2273309"
  },
  {
    "text": "though we are primarily dotnet but this paradigm of you know three containers is what we're using all throughout our",
    "start": "2273309",
    "end": "2279160"
  },
  {
    "text": "entire ecosystem and then we're using SNS and SQS for events all of our",
    "start": "2279160",
    "end": "2284859"
  },
  {
    "text": "databases are DynamoDB and storing objects and s3 and then we're stirring our logs are all going into Kinesis",
    "start": "2284859",
    "end": "2291519"
  },
  {
    "text": "through streams and they get output into Splunk for aggregation and troubleshooting yeah that's that one so",
    "start": "2291519",
    "end": "2300309"
  },
  {
    "start": "2300000",
    "end": "2300000"
  },
  {
    "text": "then this slides actually now obsolete because I was going to talk about scaling in ECS but I kind of think now",
    "start": "2300309",
    "end": "2307420"
  },
  {
    "text": "with Fargate we're gonna move into that but in essence we set up auto scaling group in ECS to add more tasks as those",
    "start": "2307420",
    "end": "2316599"
  },
  {
    "text": "tasks get added cloud watch events occur and they CH and we have lambda functions that are then listening to those cloud",
    "start": "2316599",
    "end": "2322689"
  },
  {
    "text": "watch events whether they needed to add new ec2 instances within the scaling",
    "start": "2322689",
    "end": "2328029"
  },
  {
    "text": "groups so as I said this is gonna probably change drastically starting",
    "start": "2328029",
    "end": "2333130"
  },
  {
    "text": "next week when I when I go back to the office but we ECS was a little bit clunky but we made it work with all of",
    "start": "2333130",
    "end": "2340119"
  },
  {
    "text": "the the various lambda functions and cloud watch events and it's it's working great for us another thing that we're",
    "start": "2340119",
    "end": "2347469"
  },
  {
    "text": "doing heavily all of our system is pub/sub with SNS and SQS so we really",
    "start": "2347469",
    "end": "2354309"
  },
  {
    "text": "wanted to have a decoupled event-driven asynchronous architecture and so we can",
    "start": "2354309",
    "end": "2359499"
  },
  {
    "text": "with this paradigm which basically service can generate any number of",
    "start": "2359499",
    "end": "2364959"
  },
  {
    "text": "events that it wants and as it generates that event the events are they going to be consumed by multiple other services",
    "start": "2364959",
    "end": "2371259"
  },
  {
    "text": "so in this example you can see service D is has three different queues that it's",
    "start": "2371259",
    "end": "2376989"
  },
  {
    "text": "pulling from from three different events but service e is only pulling one but the SNS topic for service C publishes",
    "start": "2376989",
    "end": "2384459"
  },
  {
    "text": "the events two to one SNS topic which then gets routed out to multiple sqs topics or sqs cues we use this all",
    "start": "2384459",
    "end": "2392790"
  },
  {
    "text": "over our system two examples that we we primarily use it for our for our CRM",
    "start": "2392790",
    "end": "2398220"
  },
  {
    "text": "platform so as as things happen in our system an example is a customer gets",
    "start": "2398220",
    "end": "2403410"
  },
  {
    "text": "created a subscription gets updated or created billing records etc we need to",
    "start": "2403410",
    "end": "2409050"
  },
  {
    "text": "send all that to our CRM platform so that we can you know send out emails and you know what nots and customers and communicate so we have a service that",
    "start": "2409050",
    "end": "2416100"
  },
  {
    "text": "basically is sitting there listening to roughly eleven different events for things that are happening in the system",
    "start": "2416100",
    "end": "2421170"
  },
  {
    "text": "and then it pushes off to the CRM platform we also use it for our Salesforce integration so again as as",
    "start": "2421170",
    "end": "2427860"
  },
  {
    "text": "things happen around our system customers get created we use that so we can push data off to Salesforce a little",
    "start": "2427860",
    "end": "2436560"
  },
  {
    "text": "bit more detail on that so the way that it works is basically each service that wants to publish an event it describes",
    "start": "2436560",
    "end": "2443400"
  },
  {
    "text": "its it's very simple it pushes it puts a block of data in the metadata JSON called SMS topics published and",
    "start": "2443400",
    "end": "2449790"
  },
  {
    "text": "literally it's just a named event a logical ID our deployment process is actually gonna then kick in and when it",
    "start": "2449790",
    "end": "2457260"
  },
  {
    "text": "when it when it actually creates the cue it's gonna put the physical ID in there and our common library knows to read",
    "start": "2457260",
    "end": "2462270"
  },
  {
    "text": "that logical ID but then pull the physical ID so that it actually the it actually can write to the SNS topic on",
    "start": "2462270",
    "end": "2469590"
  },
  {
    "text": "the other side the subscribers basically it this puts all the information of what event it needs to listen to what cue it",
    "start": "2469590",
    "end": "2475830"
  },
  {
    "text": "has and then the the neat thing here is the the route so basically each event",
    "start": "2475830",
    "end": "2481940"
  },
  {
    "text": "each of each cue that it reads off of is configured to route to a specific event",
    "start": "2481940",
    "end": "2487290"
  },
  {
    "text": "with inside the system so as it reads that message off it will then pull out",
    "start": "2487290",
    "end": "2493320"
  },
  {
    "text": "the message body and basically does an HTTP HTTP posts to the service container so this allows it we standardized the",
    "start": "2493320",
    "end": "2501330"
  },
  {
    "text": "message format within our common libraries so that any language can publish the event the sqs listener can",
    "start": "2501330",
    "end": "2507540"
  },
  {
    "text": "then receive that event and then push the body off to the via standard restful call in the service container this also",
    "start": "2507540",
    "end": "2515370"
  },
  {
    "text": "allows us to set visibility timeout and whatever other configuration values that you would have for",
    "start": "2515370",
    "end": "2521460"
  },
  {
    "text": "like sq sq so the visibility timeouts been really helpful to in terms of allowing us to make it so messages can",
    "start": "2521460",
    "end": "2528359"
  },
  {
    "text": "be read quicker or slower if we have an external a third party that may be taking longer to respond so I set the",
    "start": "2528359",
    "end": "2533910"
  },
  {
    "text": "visibility timeout longer so that we're not pulling messages off the queue and retrying them too quickly another thing",
    "start": "2533910",
    "end": "2542520"
  },
  {
    "start": "2542000",
    "end": "2542000"
  },
  {
    "text": "that we did is we've we're using Hadoop for some for some big data batch",
    "start": "2542520",
    "end": "2547950"
  },
  {
    "text": "processing and we're doing this all using.net core docker compose basically",
    "start": "2547950",
    "end": "2554130"
  },
  {
    "text": "we built a docker compose image that has a master in the multiple workers right now we're doing it with four workers but",
    "start": "2554130",
    "end": "2559560"
  },
  {
    "text": "we can scale out with more in essence what this is is it's a standard standard",
    "start": "2559560",
    "end": "2566970"
  },
  {
    "text": "Hadoop install that reads the mapper and reducer DLLs that we write ourselves and",
    "start": "2566970",
    "end": "2573240"
  },
  {
    "text": "it orchestrates calling that so we have quite a bit of data processing that we",
    "start": "2573240",
    "end": "2578700"
  },
  {
    "text": "do all the time and like I said we have a lot of dotnet developers so we wanted to see ideally we would have loved to",
    "start": "2578700",
    "end": "2584070"
  },
  {
    "text": "use EMR so we wouldn't roll this ourselves but since EMR is in support net we came up with this solution and",
    "start": "2584070",
    "end": "2589380"
  },
  {
    "text": "it's it's pretty quick actually in the next example I will show you so in this",
    "start": "2589380",
    "end": "2594660"
  },
  {
    "text": "this example we took it a step further so normally in Hadoop you have mapper",
    "start": "2594660",
    "end": "2599760"
  },
  {
    "text": "and reducer so in in our example we took it one step further and we came up with the idea of having a preprocessor and a",
    "start": "2599760",
    "end": "2605310"
  },
  {
    "text": "post processor so our preprocessor in this example is calling aurora and",
    "start": "2605310",
    "end": "2610710"
  },
  {
    "text": "pulling roughly a million records out of Aurora doing some massaging on the data",
    "start": "2610710",
    "end": "2616290"
  },
  {
    "text": "putting that putting it into a CSV file and then passing it on to the mapper and then the mapper and the mapper does more",
    "start": "2616290",
    "end": "2624990"
  },
  {
    "text": "data manipulation on it which then gets reduced but and then at the end we have a post processor which basically reads",
    "start": "2624990",
    "end": "2630900"
  },
  {
    "text": "the output file and uploads it to SFTP somewhere but the cool thing with this",
    "start": "2630900",
    "end": "2636030"
  },
  {
    "text": "is that it's all standard dotnet some of the the difficult part was kind of the",
    "start": "2636030",
    "end": "2642210"
  },
  {
    "text": "orchestration and getting the pre and post processor but we wrote a Python script all these are doctor containers",
    "start": "2642210",
    "end": "2647430"
  },
  {
    "text": "all of them are standard dotnet core dll's and like I said it's very performant we can process a million records out of",
    "start": "2647430",
    "end": "2653520"
  },
  {
    "text": "this database and roughly eight minutes so you guys are probably wondering why does all this",
    "start": "2653520",
    "end": "2659530"
  },
  {
    "start": "2657000",
    "end": "2657000"
  },
  {
    "text": "matter this is all kind of standard dotnet architecture stuff when standard AWS architecture I think basically",
    "start": "2659530",
    "end": "2665470"
  },
  {
    "text": "because Microsoft has open source dotnet core and allowed it to run on Linux it's",
    "start": "2665470",
    "end": "2671500"
  },
  {
    "text": "really made dotnet core a first-class citizen AWS so all of these things that",
    "start": "2671500",
    "end": "2677200"
  },
  {
    "text": "we've done we were able to easily take from our North America side which is doing stuff in Java and do everything in",
    "start": "2677200",
    "end": "2682420"
  },
  {
    "text": "dotnet core ourselves so we're able to repurpose our existing development team without having to hire new people and",
    "start": "2682420",
    "end": "2688000"
  },
  {
    "text": "figure I'll figure out new ways of doing things and so in just a year we went from an on-prem solution to a fully",
    "start": "2688000",
    "end": "2694630"
  },
  {
    "text": "cloud-based micro-services system in dotnet so with that I think that's it",
    "start": "2694630",
    "end": "2700180"
  },
  {
    "text": "and we'll open the floor to questions I think the mics are up here there's any",
    "start": "2700180",
    "end": "2712900"
  },
  {
    "text": "questions for either one of us for Danny or for myself Marie please come up",
    "start": "2712900",
    "end": "2718990"
  },
  {
    "text": "otherwise for the rest of you thank you so much for coming",
    "start": "2718990",
    "end": "2724170"
  },
  {
    "text": "thank you question about the support for the netcode 2.0 on lambda if you have",
    "start": "2730430",
    "end": "2737730"
  },
  {
    "text": "any sort of estimator there isn't many announcements I'm just soon all right",
    "start": "2737730",
    "end": "2747540"
  },
  {
    "text": "maybe tomorrow pretty much so you",
    "start": "2747540",
    "end": "2753360"
  },
  {
    "text": "mentioned you use readies for your configuration I guess you have multiple environments like integration testing",
    "start": "2753360",
    "end": "2760250"
  },
  {
    "text": "how do you handle you know provisioning that configuration on each environment we have different Jenkins jobs basically",
    "start": "2760250",
    "end": "2766560"
  },
  {
    "text": "for each environment so our deployment process has in we basically have just instances of Jenkins and our deployment",
    "start": "2766560",
    "end": "2772020"
  },
  {
    "text": "servers per environment got it but where do you store the secrets let's say the connection string things like that it",
    "start": "2772020",
    "end": "2780810"
  },
  {
    "text": "does get it's it's something that we have to do a little bit by hand it's our deployment process we have a",
    "start": "2780810",
    "end": "2786870"
  },
  {
    "text": "separate configuration table that we write to once and the deployment process",
    "start": "2786870",
    "end": "2792330"
  },
  {
    "text": "reads it and we clear that out as it deploys the the secrets and things like that you could be using also parameter",
    "start": "2792330",
    "end": "2798480"
  },
  {
    "text": "store on our side to actually store secrets that's integrated with TMS it's encrypted it's actually very good it is",
    "start": "2798480",
    "end": "2804660"
  },
  {
    "text": "a primer on how we store secrets in these particular cases now in that scenario let's say you have multiple",
    "start": "2804660",
    "end": "2810450"
  },
  {
    "text": "accounts at least that's how we do it right like they've account QA account protocol in AWS that means you have to",
    "start": "2810450",
    "end": "2817170"
  },
  {
    "text": "keep them in sync you see like we are dev configure QA configure yeah you do and as you know in",
    "start": "2817170",
    "end": "2824580"
  },
  {
    "text": "AWS be automates everything correctly that includes even configuration aspect",
    "start": "2824580",
    "end": "2829920"
  },
  {
    "text": "of system manager including obviously you know parameter store and all of that",
    "start": "2829920",
    "end": "2835170"
  },
  {
    "text": "so we will they will be also updates in in which way that's going to be even",
    "start": "2835170",
    "end": "2840360"
  },
  {
    "text": "more simplified but I'm going to leave that for others to announce but right",
    "start": "2840360",
    "end": "2846360"
  },
  {
    "text": "now the way we are doing it and the way I've been doing it specifically is literally by by means of doing changes",
    "start": "2846360",
    "end": "2855720"
  },
  {
    "text": "you know to to infrastructure configuration on multiple accounts not",
    "start": "2855720",
    "end": "2861450"
  },
  {
    "text": "just John just parameter still but generally got you know okay thank you thank you hi I'm",
    "start": "2861450",
    "end": "2870420"
  },
  {
    "text": "scripts your thoughts on Windows containers then went up 2016 and I actually how they work with Amazon and",
    "start": "2870420",
    "end": "2875579"
  },
  {
    "text": "the ECS and then we did a mess with Windows containers at all we just went straight for the Linux",
    "start": "2875579",
    "end": "2880890"
  },
  {
    "text": "yeah we just that's what we build things in Windows containers as a POC okay and",
    "start": "2880890",
    "end": "2886829"
  },
  {
    "text": "yeah come in hitting brick walls cozy CS invoice why why do you want to use Windows containers versus lived on",
    "start": "2886829",
    "end": "2892619"
  },
  {
    "text": "Accord vs. just going with Linux containers we're dealing with legacy apps that were converting that aren't dotnet core okay so I don't know if",
    "start": "2892619",
    "end": "2902789"
  },
  {
    "text": "you've seen but you know we've made some progress around UCS support for the windows containers you can actually you",
    "start": "2902789",
    "end": "2908760"
  },
  {
    "text": "know you can run Windows containers there's a production on production-ready like the third line yeah you'd be very",
    "start": "2908760",
    "end": "2916470"
  },
  {
    "text": "careful about it since so yeah surely but it did that that should preclude you from starting up you or rather testing",
    "start": "2916470",
    "end": "2923520"
  },
  {
    "text": "it out right now because it's it's really a matter of time take it from me before it's it is so so",
    "start": "2923520",
    "end": "2929579"
  },
  {
    "text": "that that will actually give you a good chance to actually start working with them you can also use any other you know",
    "start": "2929579",
    "end": "2936690"
  },
  {
    "text": "container orchestration that's usually the manager Benetti supported I've been",
    "start": "2936690",
    "end": "2941700"
  },
  {
    "text": "using yeah cops kubernetes right there to do that so there are ways and now you have",
    "start": "2941700",
    "end": "2947010"
  },
  {
    "text": "actually kubernetes support so there are so many options to which you can do we already have like you know images or you",
    "start": "2947010",
    "end": "2954329"
  },
  {
    "text": "for running like for hosting you know containers and all that sort of stuff",
    "start": "2954329",
    "end": "2959369"
  },
  {
    "text": "you know we've had it for a while with Windows 2016 Emmys and all that so yeah",
    "start": "2959369",
    "end": "2964410"
  },
  {
    "text": "encourage you yeah we can put offline this wrong I appreciate it hey issues those um I think you can't",
    "start": "2964410",
    "end": "2972299"
  },
  {
    "text": "service definition with those JSON configs what was what was processing those or what at what point were they being picked up so we have an entire",
    "start": "2972299",
    "end": "2980789"
  },
  {
    "text": "basically our DevOps application the it's written in Python and it uses",
    "start": "2980789",
    "end": "2986570"
  },
  {
    "text": "the standard AWS libraries to then deploy so we create Jenkins jobs that",
    "start": "2986570",
    "end": "2992120"
  },
  {
    "text": "basically execute those Python scripts read the service definitions and then create confirmation confirmation",
    "start": "2992120",
    "end": "2997880"
  },
  {
    "text": "templates you know that's just so wow",
    "start": "2997880",
    "end": "3006520"
  },
  {
    "text": "what kind of or how do you handle it when tables change for different",
    "start": "3006520",
    "end": "3011740"
  },
  {
    "text": "versions of services if you had a rolling back yeah so that's that's a",
    "start": "3011740",
    "end": "3016990"
  },
  {
    "text": "that's something we're working on right now so right now as we've deployed new",
    "start": "3016990",
    "end": "3022900"
  },
  {
    "text": "version we deployed new versions of services in our infrastructure we've actually kept the same data stack and we",
    "start": "3022900",
    "end": "3029260"
  },
  {
    "text": "haven't changed any of the schemas yet or we've created an entirely new version of the service and then migrate the data",
    "start": "3029260",
    "end": "3034750"
  },
  {
    "text": "to that to make it work so we're doing a couple different things we're we're running services either side by side they would have the same data stack or",
    "start": "3034750",
    "end": "3041620"
  },
  {
    "text": "we're just going completely new and then pushing the data over to a new Dynamo table okay thanks Kendyl relational data",
    "start": "3041620",
    "end": "3052470"
  },
  {
    "text": "foreign keys among all those micro services we're not using any relational databases everything is using dynamo so",
    "start": "3052470",
    "end": "3060150"
  },
  {
    "text": "basically we've just decided that what whatever whatever objects are important",
    "start": "3060150",
    "end": "3065680"
  },
  {
    "text": "to that micro service we're trying to keep our marques micro services very lean so like I said a customer profile",
    "start": "3065680",
    "end": "3071380"
  },
  {
    "text": "has one set of data we have another service that might just have your profile preferences for certain things",
    "start": "3071380",
    "end": "3076420"
  },
  {
    "text": "so we're not doing any relational database at all right now you could be using RDS service which actually",
    "start": "3076420",
    "end": "3082810"
  },
  {
    "text": "includes sequel server as well or if you want to go cheaper on a licensing and and you want to just as good if not",
    "start": "3082810",
    "end": "3089380"
  },
  {
    "text": "better Enterprise ready database Aurora is a good choice yeah the problem that we are trying to solve like we have a",
    "start": "3089380",
    "end": "3095620"
  },
  {
    "text": "products table that we probably will need everywhere in like we can create 30",
    "start": "3095620",
    "end": "3101020"
  },
  {
    "text": "40 50 micro services so how can we so the way that we've kind of done stuff",
    "start": "3101020",
    "end": "3106240"
  },
  {
    "text": "like that is basically whatever the micro service that has that data store behind it define your API is and have",
    "start": "3106240",
    "end": "3111400"
  },
  {
    "text": "other micro services call that so whatever define your data store define your your API is and what your data your",
    "start": "3111400",
    "end": "3117640"
  },
  {
    "text": "outputs want to be and then you those other micro-services call it to get it because we have a products API our product service as well and it's",
    "start": "3117640",
    "end": "3124240"
  },
  {
    "text": "used all over our system to get the data from but how do I know the product I will just give a gooey dorsum something",
    "start": "3124240",
    "end": "3131470"
  },
  {
    "text": "like that you mean yeah you have to maintain that somewhere you're right so I guess I'd have to know a little bit",
    "start": "3131470",
    "end": "3139420"
  },
  {
    "text": "more about the domain to tell you but I mean it is it is someone I mean you cannot pass it kind of as you know",
    "start": "3139420",
    "end": "3146770"
  },
  {
    "text": "through task definitions in each yes I don't know if you guys are you currently using ECS okay so there's ways you know",
    "start": "3146770",
    "end": "3156640"
  },
  {
    "text": "you can just pass it or just pass it through command right that's a docker command you know through task definition",
    "start": "3156640",
    "end": "3163270"
  },
  {
    "text": "files and you can actually you know define also constraints and whole bunch",
    "start": "3163270",
    "end": "3168970"
  },
  {
    "text": "of other things but you can actually pass that the environment variables and all that sort of stuff you can you can",
    "start": "3168970",
    "end": "3174580"
  },
  {
    "text": "pass it through or just do a fetch and run which we between which is basically",
    "start": "3174580",
    "end": "3179770"
  },
  {
    "text": "a once again docker command that goes and fetches and runs when it starts",
    "start": "3179770",
    "end": "3184990"
  },
  {
    "text": "running a script that might may be sitting on an s3 or something like that",
    "start": "3184990",
    "end": "3190990"
  },
  {
    "text": "and then you can continuously change the script or whatever the case is with references that you need and this will always fetch and run when and when it",
    "start": "3190990",
    "end": "3197680"
  },
  {
    "text": "executes and I know what you mean we've we've kind of done some of that so like we take our product service and then we",
    "start": "3197680",
    "end": "3202690"
  },
  {
    "text": "have another service that may need to reference those once the product service is defined and some of those values are already there we'll provide those to the",
    "start": "3202690",
    "end": "3209590"
  },
  {
    "text": "other service that may need to use them and they can kind of deal with it in their own configuration way but I know that can be depending on how many",
    "start": "3209590",
    "end": "3214930"
  },
  {
    "text": "products you have that can get pretty unruly so we're just trying to make sure the api's are well defined in the data stores up front before we even write any",
    "start": "3214930",
    "end": "3222340"
  },
  {
    "text": "code on that okay so using custom CD",
    "start": "3222340",
    "end": "3228310"
  },
  {
    "text": "pipeline somebody who was using TFS what would will be the documentation I know",
    "start": "3228310",
    "end": "3233350"
  },
  {
    "text": "the toolkit for TFS and VSDs was just really recently is it easy to use how mature is it yeah so I've been doing",
    "start": "3233350",
    "end": "3241900"
  },
  {
    "text": "quite a bit of these you know implementations recently it's really all about configuring it to push it out to",
    "start": "3241900",
    "end": "3247030"
  },
  {
    "text": "s3 and then you know getting cold pipeline to to have s3 registered as a",
    "start": "3247030",
    "end": "3253150"
  },
  {
    "text": "source in this case so as soon as the package gets pushed out to s3 could pipeline automatically picks it up",
    "start": "3253150",
    "end": "3259360"
  },
  {
    "text": "starts building it deploying it whatever you defined in it right there is because you can create a",
    "start": "3259360",
    "end": "3266020"
  },
  {
    "text": "task and bsts the the toolkit integration so you can invoke the cloud",
    "start": "3266020",
    "end": "3271990"
  },
  {
    "text": "formation and basically call formation would let's say create a code pipeline and then within the code pipeline you",
    "start": "3271990",
    "end": "3278320"
  },
  {
    "text": "can specify whether you want to call code build or code deploy or others and then you can put your build artifact on",
    "start": "3278320",
    "end": "3285730"
  },
  {
    "text": "s3 so that it's accessible anywhere yeah but you don't need to create those things on the fly I'm guessing you would",
    "start": "3285730",
    "end": "3291550"
  },
  {
    "text": "have caught by plan already defined with all the steps and then you would have continuous packages that are just being",
    "start": "3291550",
    "end": "3296650"
  },
  {
    "text": "sent to basically we just need the final step just push them on to s3 that's what it is and in literally a",
    "start": "3296650",
    "end": "3301750"
  },
  {
    "text": "pattern that we do for all the non dotnet dotnet services as well and all",
    "start": "3301750",
    "end": "3307360"
  },
  {
    "text": "this other stuff s3 is really a go-to thing okay thanks I'm just wondering how",
    "start": "3307360",
    "end": "3315070"
  },
  {
    "text": "did you deal with your WCF services themselves we didn't so we rewrote everything so it's sorry yeah cuz we we",
    "start": "3315070",
    "end": "3323650"
  },
  {
    "text": "had quite a bit of everything was WCF in the backend before and so we basically just rewrote everything sorry I mean cuz",
    "start": "3323650",
    "end": "3332740"
  },
  {
    "text": "Microsoft doesn't even support it anymore so API gates my man my question",
    "start": "3332740",
    "end": "3339280"
  },
  {
    "text": "is around like you know how would you handle failures especially with nan idempotent requests because I don't want",
    "start": "3339280",
    "end": "3346690"
  },
  {
    "text": "to create you know keep on creating you know objects right when I make posts so how",
    "start": "3346690",
    "end": "3353050"
  },
  {
    "text": "would you handle those situations I mean in case of failures we try to make everything is idempotent",
    "start": "3353050",
    "end": "3358120"
  },
  {
    "text": "as possible I know that's not always the case though but that so we've had to",
    "start": "3358120",
    "end": "3363760"
  },
  {
    "text": "deal with some of that in in terms of the sqs processing you know requests coming in and so the sometimes we've",
    "start": "3363760",
    "end": "3371830"
  },
  {
    "text": "actually maintained if we've pushed off one of those requests already in dynamo",
    "start": "3371830",
    "end": "3377140"
  },
  {
    "text": "so it's not it's not really stateful but at least we know yes this request has already been",
    "start": "3377140",
    "end": "3382330"
  },
  {
    "text": "see we don't need to necessarily send this off to our third party again so in case the message comes in twice or if if",
    "start": "3382330",
    "end": "3388060"
  },
  {
    "text": "if the message fails though we're just using standard the sqs listener how just listens for standard HTV codes if it",
    "start": "3388060",
    "end": "3394720"
  },
  {
    "text": "doesn't get a 200 back it's gonna go back on the queue and be reprocessed so let's just say you made a request and it",
    "start": "3394720",
    "end": "3400690"
  },
  {
    "text": "was successful but while getting the response it failed and since it again",
    "start": "3400690",
    "end": "3405850"
  },
  {
    "text": "you failed to review the response you might try it again which is gonna create another well and that's that's why we've",
    "start": "3405850",
    "end": "3412060"
  },
  {
    "text": "had to make our services able to accept messages twice and deal with that if that HAP so you use like you know unique",
    "start": "3412060",
    "end": "3417760"
  },
  {
    "text": "IDs for requests and how do you yes yes we're using it's one it's the mess I believe it's the message ID within the",
    "start": "3417760",
    "end": "3424710"
  },
  {
    "text": "SNS sqs message okay and one big question like did you guys use the BPI",
    "start": "3424710",
    "end": "3430120"
  },
  {
    "text": "is first yeah all of all of basically we decided that everything was gonna be restful I should have said that but all of our services are restful and so it's",
    "start": "3430120",
    "end": "3437470"
  },
  {
    "text": "using kestrel and web api as the front end so we just wanted to make everything consistent so that way our java services",
    "start": "3437470",
    "end": "3444550"
  },
  {
    "text": "are using you know restful api is our dotnet services or restful api is as well and the packages that you said",
    "start": "3444550",
    "end": "3450070"
  },
  {
    "text": "there were nougat packages right now how were you consuming them so sorry the",
    "start": "3450070",
    "end": "3456130"
  },
  {
    "text": "NuGet packages are strictly for the.net services our java our Java team has built their own set of common libraries",
    "start": "3456130",
    "end": "3461800"
  },
  {
    "text": "as well but basically we kind of we mapped out what we thought were like common core functions between both languages and we built libraries up for",
    "start": "3461800",
    "end": "3468940"
  },
  {
    "text": "all of that like I said so the logging the SNS messageformat stuff like that it's all consistent across the board",
    "start": "3468940",
    "end": "3474250"
  },
  {
    "text": "it's just each each language has its own set of libraries to maintain cool thank you you're welcome",
    "start": "3474250",
    "end": "3479940"
  },
  {
    "text": "thank you for hosting the session a good question around authentication",
    "start": "3479940",
    "end": "3485680"
  },
  {
    "text": "how are you guys attenti cating your microservices I can't talk about that you can't I can't no sorry I can tell",
    "start": "3485680",
    "end": "3495310"
  },
  {
    "text": "you though is that we're heavy using I am everywhere so I like each microservice and the the resources that",
    "start": "3495310",
    "end": "3501400"
  },
  {
    "text": "it can that it has are all using IIM roles so micro basically microservices",
    "start": "3501400",
    "end": "3506710"
  },
  {
    "text": "only have purview and access to its own resources okay so we were advised",
    "start": "3506710",
    "end": "3511780"
  },
  {
    "text": "basically using rules you can never apply drawers to literally each of the containers that is running and you know",
    "start": "3511780",
    "end": "3518020"
  },
  {
    "text": "and then you would you know whatever code is running on top of it would effectively assume that rule and then",
    "start": "3518020",
    "end": "3524140"
  },
  {
    "text": "you can define specific and explicit policies for what it can access how and all that sort of stuff that way you're",
    "start": "3524140",
    "end": "3530110"
  },
  {
    "text": "not using any secrets you're not using any you know saying you don't have to worry about any of these things you know",
    "start": "3530110",
    "end": "3535180"
  },
  {
    "text": "and you know it's really secure okay and question on performance monitoring how",
    "start": "3535180",
    "end": "3542200"
  },
  {
    "text": "are you guys doing that are you using new relic or plays meters do all our performance testing so we test",
    "start": "3542200",
    "end": "3548920"
  },
  {
    "text": "everything before we even go to prod and we do load testing on that and we're",
    "start": "3548920",
    "end": "3554290"
  },
  {
    "text": "waiting for AppDynamics forgotten that though so my question is how to deal",
    "start": "3554290",
    "end": "3563740"
  },
  {
    "text": "with the sir library like the dr4000 delay to upgrade to the macro service",
    "start": "3563740",
    "end": "3568990"
  },
  {
    "text": "mmhmm yeah so we've they're all version right so all the versions are maintained within github and we're doing you know",
    "start": "3568990",
    "end": "3575920"
  },
  {
    "text": "we're doing major minor patch and so it's a responsibility we its responsibility for each micro service",
    "start": "3575920",
    "end": "3581560"
  },
  {
    "text": "team decide when they're gonna pull in a new version of library but we're we work as a team and you know we let everybody",
    "start": "3581560",
    "end": "3587800"
  },
  {
    "text": "know that when we are pushing out the the new versions what they are we have release notes and whatnot we try not to",
    "start": "3587800",
    "end": "3593650"
  },
  {
    "text": "mandate anything unless there's maybe security things that we're putting in there and then we say okay and the next sprint everybody needs to pull in maybe",
    "start": "3593650",
    "end": "3599350"
  },
  {
    "text": "a new major version because of X or whatever but it's it's the responsibility of each team to pull in",
    "start": "3599350",
    "end": "3605200"
  },
  {
    "text": "that version yeah so what about the library that doesn't support like the donut code just like currently just",
    "start": "3605200",
    "end": "3611200"
  },
  {
    "text": "support in the Windows we'd literally want everything that was only dotnet core we have nothing that we have no",
    "start": "3611200",
    "end": "3616800"
  },
  {
    "text": "dependencies at all every everything is dot hundred percent dotnet core when it comes to dotnet right now we did we",
    "start": "3616800",
    "end": "3622800"
  },
  {
    "text": "didn't take it whatever was legacy left was there we may have brought code in that might have been business logic but we wrote",
    "start": "3622800",
    "end": "3629190"
  },
  {
    "text": "everything from scratch dotnet core 100% from the ground up so so y'all go ahead",
    "start": "3629190",
    "end": "3634830"
  },
  {
    "text": "sorry you weren't it you wanted to you know so the second question is about so currently we are using the VB donate we",
    "start": "3634830",
    "end": "3641100"
  },
  {
    "text": "trying to transfer but the tonic or two point two point zero is reporting that a",
    "start": "3641100",
    "end": "3646320"
  },
  {
    "text": "conscious not right so it's only a plan or yeah yeah there will be announcements oh yeah I would say look hot okay maybe",
    "start": "3646320",
    "end": "3655260"
  },
  {
    "text": "there may be the dev 3:30 session because those are the dotnet SDK developers and they might be or the yeah",
    "start": "3655260",
    "end": "3660870"
  },
  {
    "text": "AWS SDK developers they could might be able to help you a bit more with that well yeah",
    "start": "3660870",
    "end": "3666000"
  },
  {
    "text": "they'll probably be allowed to tell you I think we're out of time so if we want",
    "start": "3666000",
    "end": "3671520"
  },
  {
    "text": "if people have questions we can talk to you guys outside you can take it outside yeah we are the time we got a vacate",
    "start": "3671520",
    "end": "3678710"
  },
  {
    "text": "we'll take the questions just outside sir to be sketches there",
    "start": "3678710",
    "end": "3684140"
  }
]