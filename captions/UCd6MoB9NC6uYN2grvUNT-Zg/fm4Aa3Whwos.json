[
  {
    "start": "0",
    "end": "37000"
  },
  {
    "text": "hello everyone welcome to AWS reinvent 2015 and welcome to dev 204 my name is",
    "start": "650",
    "end": "10139"
  },
  {
    "text": "Preston Tamkin and this is Jonathan Hanson behind me we're here today to",
    "start": "10139",
    "end": "15900"
  },
  {
    "text": "talk about the AWS SDK for C++ we're so happy to be here",
    "start": "15900",
    "end": "21240"
  },
  {
    "text": "we released this SDK last month and we've been super excited to see pull",
    "start": "21240",
    "end": "26939"
  },
  {
    "text": "requests and issues and feedback from from you guys and our other customers so",
    "start": "26939",
    "end": "34010"
  },
  {
    "text": "let's talk about let's let's preview our agenda today so we're going to talk a",
    "start": "34010",
    "end": "40530"
  },
  {
    "start": "37000",
    "end": "37000"
  },
  {
    "text": "little bit about the SDK some of our reasons are design tenants where you can",
    "start": "40530",
    "end": "47070"
  },
  {
    "text": "get it how you can build it we're gonna spend most of the presentation talking",
    "start": "47070",
    "end": "53789"
  },
  {
    "text": "about core library features in this SDK some of these are going to look very familiar to you from the other SDKs like",
    "start": "53789",
    "end": "60870"
  },
  {
    "text": "credential management some of these things we handle a little differently things like exceptions and error",
    "start": "60870",
    "end": "66990"
  },
  {
    "text": "handling there are some features in this SDK that are don't really have parallels",
    "start": "66990",
    "end": "72930"
  },
  {
    "text": "on the other SDKs like custom memory allocation and that sort of thing",
    "start": "72930",
    "end": "78409"
  },
  {
    "text": "towards the end john is going to show you a demo and also talk about some of our high-level features that we have",
    "start": "78409",
    "end": "85080"
  },
  {
    "text": "written to to help you use services like Amazon Cognito or there's some others",
    "start": "85080",
    "end": "91650"
  },
  {
    "text": "too okay let's so let's get started so",
    "start": "91650",
    "end": "97350"
  },
  {
    "start": "95000",
    "end": "95000"
  },
  {
    "text": "the C++ SDK it's like the other SDKs it's a C++ language binding to talk to",
    "start": "97350",
    "end": "103110"
  },
  {
    "text": "AWS it comprises of a core library that does all the heavy lifting things like",
    "start": "103110",
    "end": "110390"
  },
  {
    "text": "AWS request signing request marshalling and unn marshalling logging all all",
    "start": "110390",
    "end": "115619"
  },
  {
    "text": "sorts of other things then we have a set of generated service clients so here at",
    "start": "115619",
    "end": "121020"
  },
  {
    "text": "Amazon we use a common schema to define our service interfaces and we in the",
    "start": "121020",
    "end": "128220"
  },
  {
    "text": "case of this SDK will use that schema to generate code that are the service",
    "start": "128220",
    "end": "134220"
  },
  {
    "text": "we use this mechanism to make it easy to keep up with the rapid rate that AWS is",
    "start": "134220",
    "end": "140820"
  },
  {
    "text": "releasing new services and features so that we can get those supported in the SDK as quickly as possible so where do",
    "start": "140820",
    "end": "147780"
  },
  {
    "text": "you get it so you github link is up there you can go download it today as I said we released it last month we've",
    "start": "147780",
    "end": "153570"
  },
  {
    "text": "seen lots of interest around it which is which is awesome well show there's something at the at the end as well but",
    "start": "153570",
    "end": "159510"
  },
  {
    "text": "it's pretty easy to find so let's talk about building this so we had some core",
    "start": "159510",
    "end": "164820"
  },
  {
    "text": "tenants in building the C++ SDK that we wanted to avoid large third-party",
    "start": "164820",
    "end": "170700"
  },
  {
    "text": "dependencies like boost we wanted to avoid situations where you had to pull in boost to use our SDK or other such",
    "start": "170700",
    "end": "176760"
  },
  {
    "text": "things or and if we did and you were already using that you know version mismatches etc we want to avoid all that",
    "start": "176760",
    "end": "182670"
  },
  {
    "text": "so we use C++ 11 we want this to be a modern codebase that we can maintain for",
    "start": "182670",
    "end": "188400"
  },
  {
    "text": "a long time using modern language features in the repo we ships emic build",
    "start": "188400",
    "end": "196230"
  },
  {
    "text": "files this maximizes our portability across different platforms and build systems so that's what we ship so the",
    "start": "196230",
    "end": "204480"
  },
  {
    "text": "only dependency that the STA has outside of what we ship inside of it is an HTTP",
    "start": "204480",
    "end": "210690"
  },
  {
    "text": "and TLS implementation so we wrote this to be as pluggable as possible we ship interfaces for libraries that",
    "start": "210690",
    "end": "217500"
  },
  {
    "text": "are probably already on your system so we support curl when HTTP and when I net",
    "start": "217500",
    "end": "222630"
  },
  {
    "text": "so as you guys probably know these libraries will help you sir on Windows and Linux and Mac and various mobile",
    "start": "222630",
    "end": "230220"
  },
  {
    "text": "platforms and John's going to talk to you later about how you can plug in your own implementation or interface in case",
    "start": "230220",
    "end": "236880"
  },
  {
    "text": "you have other other requirements that these don't help that these don't fit ok",
    "start": "236880",
    "end": "242700"
  },
  {
    "text": "great so we've download the SDK we've built it got it running on our system let's see some code",
    "start": "242700",
    "end": "249739"
  },
  {
    "text": "so this is probably gonna look very similar to some of the other SDKs guessing probably makes sense of this",
    "start": "258320",
    "end": "264419"
  },
  {
    "text": "it's not that complicated so line one we're building a dynamo DB client Sanchi ating one so dynamo DB is a",
    "start": "264419",
    "end": "271860"
  },
  {
    "text": "service at the Amazons no sequel database in this service you create tables and within those tables there are",
    "start": "271860",
    "end": "278340"
  },
  {
    "text": "many items an item is uniquely identified by hash key and then has a some set of attributes associated with",
    "start": "278340",
    "end": "284639"
  },
  {
    "text": "that hash key so on lines two through nine we're building up a put item request put item is to put a new piece",
    "start": "284639",
    "end": "291900"
  },
  {
    "text": "of data or overwrite an existing piece of data in your table so we're specifying a table name and a hash key",
    "start": "291900",
    "end": "297870"
  },
  {
    "text": "value and a range key value so on line 11 we're calling that operation put item",
    "start": "297870",
    "end": "304050"
  },
  {
    "text": "on our client with that request object so that's the basics so all the",
    "start": "304050",
    "end": "309570"
  },
  {
    "text": "generated clients look kind of like this they're generated that might look similar to code you might see in the",
    "start": "309570",
    "end": "315330"
  },
  {
    "text": "Java SDK and some of the others okay so as many of you probably know one of the",
    "start": "315330",
    "end": "321180"
  },
  {
    "text": "first things you have to learn about when you're using AWS is how to manage your credentials so let's talk about",
    "start": "321180",
    "end": "328520"
  },
  {
    "text": "credential management so we use a",
    "start": "328520",
    "end": "337110"
  },
  {
    "start": "329000",
    "end": "329000"
  },
  {
    "text": "familiar AWS credentials provider interface we ship many of the same",
    "start": "337110",
    "end": "342270"
  },
  {
    "text": "implementations that you see in the other SDKs so the security the security",
    "start": "342270",
    "end": "351539"
  },
  {
    "text": "strategy at FPS can be very complicated between i''m users and roles and roles",
    "start": "351539",
    "end": "357180"
  },
  {
    "text": "for ec2 and assuming cross account and kognito and there's lots of more",
    "start": "357180",
    "end": "362430"
  },
  {
    "text": "advanced use cases like that so we have we have a couple here so the environment variables the config file you might use",
    "start": "362430",
    "end": "369120"
  },
  {
    "text": "with the AWS CLI and other client-side tools the instance profile credentials provider which talks to the ec2 metadata",
    "start": "369120",
    "end": "375690"
  },
  {
    "text": "service if you're using roles for ec2 which you definitely should be and then the default implementation like the one",
    "start": "375690",
    "end": "381300"
  },
  {
    "text": "we saw in the last slide where I did not specify one you get this default chain which until one works it's the same thing all",
    "start": "381300",
    "end": "388050"
  },
  {
    "text": "the SDKs do so in our high-level features we ship a we should have some",
    "start": "388050",
    "end": "393119"
  },
  {
    "text": "cognitive support so kognito is a service to help you get credentials onto",
    "start": "393119",
    "end": "398219"
  },
  {
    "text": "end-user untrusted devices like mobile phones to federate into your AWS account",
    "start": "398219",
    "end": "403469"
  },
  {
    "text": "in a controlled way so we help you a little bit with that and of course you can write your own if you have other things you need to do so let's plug some",
    "start": "403469",
    "end": "412860"
  },
  {
    "start": "411000",
    "end": "411000"
  },
  {
    "text": "credentials into our sample so a couple",
    "start": "412860",
    "end": "417959"
  },
  {
    "text": "things to note here on line one there's this AWS make shared thing this is just just pretend this as an alias to STD",
    "start": "417959",
    "end": "424860"
  },
  {
    "text": "make shared John will talk more about what this is and why we use it later so",
    "start": "424860",
    "end": "430979"
  },
  {
    "text": "we're instantiate an instance profile credentials provider so this application is going to talk to roles for ec2 that",
    "start": "430979",
    "end": "437729"
  },
  {
    "text": "reinvents sample in the the string that is a memory allocation tag that's useful",
    "start": "437729",
    "end": "443459"
  },
  {
    "text": "in your memory allocation system for tracking memory usage and John will talk about that later as well so now that we",
    "start": "443459",
    "end": "451169"
  },
  {
    "text": "have a credential provider we can pass it to the constructor in our client now on line 12 when we call put item the the",
    "start": "451169",
    "end": "460919"
  },
  {
    "text": "SDK will will call out to the ec2 instance profile metadata service and retrieve credentials and use those to",
    "start": "460919",
    "end": "466229"
  },
  {
    "text": "make the call so you might use this if you you know you want to force it to use ec2 roles because you you know you don't",
    "start": "466229",
    "end": "472079"
  },
  {
    "text": "want to accidentally use credentials that are in the home directory or in environment variables or something being",
    "start": "472079",
    "end": "478259"
  },
  {
    "text": "very specific with what we're doing it's at least a it's a little bit of time too because that chain isn't you know checking the file system and other sorts",
    "start": "478259",
    "end": "484529"
  },
  {
    "text": "of things for credentials ok so let's say I've run this on ec2 and I have a",
    "start": "484529",
    "end": "491309"
  },
  {
    "text": "problem it doesn't work I'm expecting my service to do something so we need some Diagnostics so let's talk about login",
    "start": "491309",
    "end": "500689"
  },
  {
    "text": "so as I said earlier we do not want to ship large dependencies that we don't",
    "start": "505110",
    "end": "510629"
  },
  {
    "text": "need to we don't want to force you to take on some of these other things like log for CPP or or whatever so we have an",
    "start": "510629",
    "end": "518070"
  },
  {
    "text": "interface that the SDK writes to and then you can implement the other side of",
    "start": "518070",
    "end": "523529"
  },
  {
    "text": "that to do whatever you need to do so we ship a default implementation to get you",
    "start": "523529",
    "end": "529649"
  },
  {
    "text": "started that simply writes to log files and the current working directory and just rotates the many every hour so just",
    "start": "529649",
    "end": "535950"
  },
  {
    "text": "to get started during your development purposes you can use this but there's a logging interface you can implement it's",
    "start": "535950",
    "end": "542430"
  },
  {
    "text": "basically just a stream that will that you can implement to plug into your own",
    "start": "542430",
    "end": "547620"
  },
  {
    "text": "logging system you push it the cloud watch logs or Kinesis or your own",
    "start": "547620",
    "end": "553829"
  },
  {
    "text": "logging system or or whatever so let's plug in some logging to this sample",
    "start": "553829",
    "end": "562399"
  },
  {
    "text": "so the logging system is a global system in the SDK so on line one we are calling initialize AWS logging we're creating a",
    "start": "565620",
    "end": "576300"
  },
  {
    "text": "default log system instance a share pointer and passing it to our initialize so there's a fall out system is of that",
    "start": "576300",
    "end": "582810"
  },
  {
    "text": "one that I mentioned it logs to the local file system so again we have our",
    "start": "582810",
    "end": "588180"
  },
  {
    "text": "memory allocation tag then we're saying that we want to do a trace log level we",
    "start": "588180",
    "end": "593850"
  },
  {
    "text": "want everything the SDK will give us that last parameter AWS underscore",
    "start": "593850",
    "end": "599400"
  },
  {
    "text": "that's a that's an input to the default logging system so it which is a file",
    "start": "599400",
    "end": "605340"
  },
  {
    "text": "prefix for the log files it's writing so that's just how our default implementation works so now whenever",
    "start": "605340",
    "end": "613440"
  },
  {
    "text": "you'd make a call say on line 14 when we call put item you will get some log files next to your application so it's",
    "start": "613440",
    "end": "622440"
  },
  {
    "text": "very important to initialize the log each system before any of your calls to AWS so the logging system uses our",
    "start": "622440",
    "end": "628980"
  },
  {
    "text": "background threads whenever a call is made those logs that happen are pushed pushed into this background thread to be",
    "start": "628980",
    "end": "635820"
  },
  {
    "text": "flushed into the log system outside of your main execution path so we don't want logging to interfere with with what",
    "start": "635820",
    "end": "641700"
  },
  {
    "text": "you're doing so line 15 when we shut down a bit AWS logging that makes sure that everything",
    "start": "641700",
    "end": "646800"
  },
  {
    "start": "646000",
    "end": "646000"
  },
  {
    "text": "is flushed out to your log system out of our log system and everything's everything's good to go so we recommend",
    "start": "646800",
    "end": "653010"
  },
  {
    "text": "of course that you call initialize at the very beginning of your program like in the main entry point before you use",
    "start": "653010",
    "end": "659010"
  },
  {
    "text": "the SDK any other way and the call shut down at the very end to make sure that everything's cleaned up next we're going",
    "start": "659010",
    "end": "669060"
  },
  {
    "start": "668000",
    "end": "668000"
  },
  {
    "text": "to talk about a couple of features that are over i double pour clients they have",
    "start": "669060",
    "end": "674310"
  },
  {
    "text": "same defaults sometimes it's the features off they have same defaults so you don't need to use this so it's just plain old data it",
    "start": "674310",
    "end": "683700"
  },
  {
    "text": "is it is actually copied by the client constructor so you can use one and reuse it among a lot of clients and you don't",
    "start": "683700",
    "end": "689370"
  },
  {
    "text": "have to worry about those clients changing data for some reason and you know changing data out for mother",
    "start": "689370",
    "end": "695770"
  },
  {
    "text": "underneath other clients and make weird bugs happen so the first feature we're",
    "start": "695770",
    "end": "702400"
  },
  {
    "text": "going to talk about is making asynchronous requests with the SDK so",
    "start": "702400",
    "end": "707940"
  },
  {
    "text": "that put item call that we showed on previous slides is a synchronous version",
    "start": "707940",
    "end": "716010"
  },
  {
    "text": "in the generated clients every synchronous put item has a corresponding",
    "start": "716010",
    "end": "722110"
  },
  {
    "text": "put item async an async call in addition",
    "start": "722110",
    "end": "728200"
  },
  {
    "text": "to that request object optionally can also take a callback and the context",
    "start": "728200",
    "end": "734830"
  },
  {
    "text": "object so we have a default implementation for how this works so if you change all your synchronous calls to",
    "start": "734830",
    "end": "741070"
  },
  {
    "text": "a synchronous is if you're not using and the return values you don't have to do anything it will run and do what you",
    "start": "741070",
    "end": "747250"
  },
  {
    "text": "know the requests that you're trying to do so we have the default implementation and we'll talk in a minute about how to",
    "start": "747250",
    "end": "753970"
  },
  {
    "text": "override that but first let's see how to use it so on line one we're defining our",
    "start": "753970",
    "end": "763390"
  },
  {
    "text": "global callback it's a function global global function and star callback we'll",
    "start": "763390",
    "end": "769960"
  },
  {
    "text": "get to what's in there in just a sec so on line 11 we are defining a context",
    "start": "769960",
    "end": "776350"
  },
  {
    "text": "object async context it's important to know this is not something that we're giving you is completely up to you what",
    "start": "776350",
    "end": "782710"
  },
  {
    "text": "you pass in here just whatever you want so in this program we have some async context where we can store our UID so we",
    "start": "782710",
    "end": "790270"
  },
  {
    "text": "have some unit of work that has you IDs that makes make sense to our system so",
    "start": "790270",
    "end": "796300"
  },
  {
    "text": "we're storing that in that context and so when our callbacks come back later we know how that relates into the back of",
    "start": "796300",
    "end": "802840"
  },
  {
    "text": "our system and back into our system so then on line 13 you see we're also",
    "start": "802840",
    "end": "808360"
  },
  {
    "text": "storing this request in some queue which is these work items that were performing",
    "start": "808360",
    "end": "813780"
  },
  {
    "text": "so on line 14 we've changed that put item to a put item async in addition to",
    "start": "813780",
    "end": "821170"
  },
  {
    "text": "that request object we're now passing a pointer to our global function callback",
    "start": "821170",
    "end": "827170"
  },
  {
    "text": "and also a context so what happens so you call put item async this this work",
    "start": "827170",
    "end": "835269"
  },
  {
    "text": "this request and the other arguments are passed to a background thread how",
    "start": "835269",
    "end": "840490"
  },
  {
    "text": "exactly how we'll get to in a bit and then put item async immediately returns so that request under the hood it",
    "start": "840490",
    "end": "848139"
  },
  {
    "text": "actually makes the request to put item synchronously thus the regular put items",
    "start": "848139",
    "end": "853930"
  },
  {
    "text": "anchor synchronous call and the response comes back and then it calls your callback with the arguments you see",
    "start": "853930",
    "end": "860079"
  },
  {
    "text": "there on line two one through three a pointer to the client that may the original call the original request",
    "start": "860079",
    "end": "866949"
  },
  {
    "text": "object the outcome object which is the the response and or they or the error",
    "start": "866949",
    "end": "873339"
  },
  {
    "text": "which we'll talk about in a little bit and also your context object so one cool",
    "start": "873339",
    "end": "880449"
  },
  {
    "text": "thing about our modern C++ code base is that that callback function is an STD",
    "start": "880449",
    "end": "886300"
  },
  {
    "start": "881000",
    "end": "881000"
  },
  {
    "text": "function which you can pass in as we just did a function pointer you can also",
    "start": "886300",
    "end": "891699"
  },
  {
    "text": "put a C++ lambda right in line there or you can do what we're doing in this",
    "start": "891699",
    "end": "896949"
  },
  {
    "text": "slide which is we're using STD bind to bind a an instance of an object this",
    "start": "896949",
    "end": "904170"
  },
  {
    "text": "bind it to a member function put item finished is now a member function and those placeholders is the STD bind",
    "start": "904170",
    "end": "911079"
  },
  {
    "text": "syntax and that's how that works so in line one you can see that we now have a member function and on line seven",
    "start": "911079",
    "end": "919529"
  },
  {
    "text": "we're interacting with a member variable so this is happening in the context of our of our object",
    "start": "919529",
    "end": "928709"
  },
  {
    "start": "930000",
    "end": "930000"
  },
  {
    "text": "so as I said there's a default implementation for this we simply spawn a thread which makes that synchronous",
    "start": "934050",
    "end": "940600"
  },
  {
    "text": "call and then calls your callback and then detaches it so to get started to",
    "start": "940600",
    "end": "946449"
  },
  {
    "text": "get the pattern up your asynchronous code running this is probably good for some of you it may even work all the way",
    "start": "946449",
    "end": "951610"
  },
  {
    "text": "through production depending on what you're doing but I'm sure that many of you want more control over how this happens so you can implement an executor",
    "start": "951610",
    "end": "958749"
  },
  {
    "text": "interface that the SDK will use to to control this so let's take a look at",
    "start": "958749",
    "end": "965350"
  },
  {
    "text": "what that might look like so many of you",
    "start": "965350",
    "end": "971350"
  },
  {
    "text": "will probably use this interface to tie into your existing tasks running facilities you know you have some task",
    "start": "971350",
    "end": "976929"
  },
  {
    "text": "manager or your own you know back around thread pool or something so this is a simple example of if I already had an",
    "start": "976929",
    "end": "983920"
  },
  {
    "text": "executor my systems executor implementation that had a queue task method as you seen 11 we just kind of as",
    "start": "983920",
    "end": "991540"
  },
  {
    "text": "an adapter really so on line 6 you can see that we restoring a pointer to our",
    "start": "991540",
    "end": "996879"
  },
  {
    "text": "existing executor on line 9 we see submit to thread so submit to thread is",
    "start": "996879",
    "end": "1002519"
  },
  {
    "text": "really the only only function you get to override here in this executor it simply gives you a standard function that you get to run however you like so in the",
    "start": "1002519",
    "end": "1010949"
  },
  {
    "text": "case of our implementation we're just going to pass along to ours its existing executor now whenever I make an",
    "start": "1010949",
    "end": "1018240"
  },
  {
    "text": "asynchronous call using the SDK I have full control over how those requests are",
    "start": "1018240",
    "end": "1025260"
  },
  {
    "text": "made and win so let's see how to plug",
    "start": "1025260",
    "end": "1032308"
  },
  {
    "text": "that executor into our application",
    "start": "1032309",
    "end": "1036079"
  },
  {
    "text": "so on line one we see our client configuration object you just",
    "start": "1040140",
    "end": "1045699"
  },
  {
    "text": "instantiate it it's just got a bunch of default values so if you create this and pass it in to your client it's the same",
    "start": "1045699",
    "end": "1052120"
  },
  {
    "text": "as not using it at all so on line two we're going to fetch our executor that",
    "start": "1052120",
    "end": "1057550"
  },
  {
    "text": "that's part of our global application state and we're gonna set it on our",
    "start": "1057550",
    "end": "1062770"
  },
  {
    "text": "client config object now on line 15 when we call put item async death Center",
    "start": "1062770",
    "end": "1071380"
  },
  {
    "text": "function will be executed by our own executor okay enough about asynchronous",
    "start": "1071380",
    "end": "1078580"
  },
  {
    "text": "let's talk about client side rate limiting so we have a feature where you",
    "start": "1078580",
    "end": "1087220"
  },
  {
    "start": "1083000",
    "end": "1083000"
  },
  {
    "text": "can limit the amount of bytes going in and out of the SDK per second or",
    "start": "1087220",
    "end": "1093309"
  },
  {
    "text": "actually you get to control how this  when it works which we'll see in a second this happens at the HTTP layer",
    "start": "1093309",
    "end": "1099330"
  },
  {
    "text": "so this is configurable on the client config object which means you can do separate limiters for each client or you",
    "start": "1099330",
    "end": "1106240"
  },
  {
    "text": "can use one for for all your clients we also have separate limiters that use are",
    "start": "1106240",
    "end": "1112660"
  },
  {
    "text": "configurable per directionality so separate upload and download limiters so you might use write limiters to control",
    "start": "1112660",
    "end": "1118809"
  },
  {
    "text": "burstiness you never want to use more than X bytes of upload bandwidth you may",
    "start": "1118809",
    "end": "1125320"
  },
  {
    "text": "use this too if you have a mobile application and you you don't want background operations interfering with",
    "start": "1125320",
    "end": "1133330"
  },
  {
    "text": "the forward facing user experience with other services so that's why you might use rate limiting so let's take a look",
    "start": "1133330",
    "end": "1140559"
  },
  {
    "text": "at how we might implement one of these the important one here is on line 12",
    "start": "1140559",
    "end": "1146559"
  },
  {
    "text": "apply and pay for costs so whenever the HTTP layer wants to send",
    "start": "1146559",
    "end": "1151600"
  },
  {
    "text": "a message up to AWS it's going to call this method and say hey I need to send this many bytes which is cost and so",
    "start": "1151600",
    "end": "1159490"
  },
  {
    "text": "it's really up to you to simply sleep if you don't have budget or just let it go if you do so that's what we're doing",
    "start": "1159490",
    "end": "1166510"
  },
  {
    "text": "here so if we were to write our own rate limiter let's see how we would plug it into our",
    "start": "1166510",
    "end": "1173140"
  },
  {
    "text": "application",
    "start": "1173140",
    "end": "1175710"
  },
  {
    "text": "so once again on line one and creating a client configuration object online stew",
    "start": "1184120",
    "end": "1190940"
  },
  {
    "text": "and three yum we're creating a download limiter in an upload limiter so we're",
    "start": "1190940",
    "end": "1195980"
  },
  {
    "text": "gonna where we want to limit our downloads to five megabytes a second but we have a much lower upload at 200",
    "start": "1195980",
    "end": "1202430"
  },
  {
    "text": "kilobytes a second so I set this on our config object and we pass it to our client constructor so",
    "start": "1202430",
    "end": "1208820"
  },
  {
    "text": "now when we call many when we make many dynamodb calls we know we will never",
    "start": "1208820",
    "end": "1214390"
  },
  {
    "text": "make them some more data than that every second so again so you can make that one",
    "start": "1214390",
    "end": "1221840"
  },
  {
    "text": "shared pointer and put it on both upload and downloads if you want to control your bandwidth usage globally like you",
    "start": "1221840",
    "end": "1227420"
  },
  {
    "text": "don't you don't want to you don't need to differentiate between up and down so you can do that as well",
    "start": "1227420",
    "end": "1233890"
  },
  {
    "text": "so some notes about rate limiting we have a default implementation which which covers the scenarios I described",
    "start": "1233890",
    "end": "1240530"
  },
  {
    "text": "which is where you want to have a max amount of bandwidth I can go out for a second calculation is made at i/o time",
    "start": "1240530",
    "end": "1250100"
  },
  {
    "text": "and not requests of time so that's important to know so if you are uploading a large object Amazon s3 for",
    "start": "1250100",
    "end": "1256370"
  },
  {
    "text": "example it will take each packet individually to decide whether to to",
    "start": "1256370",
    "end": "1262760"
  },
  {
    "text": "wait on that packet or not it's not like it will down upload the whole object before going on to the next request and",
    "start": "1262760",
    "end": "1267920"
  },
  {
    "text": "maybe rate limiting that one okay so that's very limiting next we're gonna",
    "start": "1267920",
    "end": "1275420"
  },
  {
    "text": "talk about exceptions and error handling",
    "start": "1275420",
    "end": "1279610"
  },
  {
    "text": "so we're not using any exceptions on this codebase we do this for performance",
    "start": "1284470",
    "end": "1290120"
  },
  {
    "text": "and flexibility reasons we don't want to throw exceptions to make you catch them",
    "start": "1290120",
    "end": "1296060"
  },
  {
    "text": "if some if some of our customers they don't want to turn they're very resilient turning on exception handling",
    "start": "1296060",
    "end": "1302920"
  },
  {
    "text": "in stock unwinding in their applications so we don't want to make you do that",
    "start": "1302920",
    "end": "1308710"
  },
  {
    "text": "that said the SEK is exceptions safe so feel free to use exceptions if you want to we're just not going to throw them to",
    "start": "1308710",
    "end": "1315080"
  },
  {
    "text": "you so if we don't throw exceptions we don't use C++ exceptions what do we do",
    "start": "1315080",
    "end": "1321580"
  },
  {
    "text": "so we use this outcome pattern in the other SDKs when you make a request you",
    "start": "1321580",
    "end": "1331220"
  },
  {
    "text": "generally receive a response object in return in the C++ SDK you will receive",
    "start": "1331220",
    "end": "1338480"
  },
  {
    "text": "an outcome object that outcome has a success flag see their successful works or its failed if it's successful you can",
    "start": "1338480",
    "end": "1346880"
  },
  {
    "text": "pull out that service model response object like put item response if the",
    "start": "1346880",
    "end": "1353960"
  },
  {
    "text": "outcome is not successful you can pull out the error object which is the exception so that's how we're doing",
    "start": "1353960",
    "end": "1360890"
  },
  {
    "text": "error handling in this sdk so let's add some hair handling to our code sample",
    "start": "1360890",
    "end": "1368290"
  },
  {
    "start": "1368000",
    "end": "1368000"
  },
  {
    "text": "so on line one we're back to the synchronous put item request so now it's",
    "start": "1376930",
    "end": "1382510"
  },
  {
    "text": "returning an outcome object and we're capturing that finally so what we're doing on line two is we're checking the",
    "start": "1382510",
    "end": "1389860"
  },
  {
    "text": "success flag on that outcome object if it's successful we're gonna pull the",
    "start": "1389860",
    "end": "1395440"
  },
  {
    "text": "result out outcome dot get result on line four and use something with the data that we received so in this example",
    "start": "1395440",
    "end": "1402670"
  },
  {
    "text": "we're just we're just pulling out the capacity that DynamoDB charged us and we're gonna print it out just to prove",
    "start": "1402670",
    "end": "1408520"
  },
  {
    "text": "that the request was successful then of course line 7r else that is that's our",
    "start": "1408520",
    "end": "1414730"
  },
  {
    "text": "error handling so I mentioned earlier",
    "start": "1414730",
    "end": "1419830"
  },
  {
    "text": "that at Amazon we use a common schema to define our service interfaces and that",
    "start": "1419830",
    "end": "1425380"
  },
  {
    "text": "includes errors that the service might throw so a part of our generated service is the error types that a service has",
    "start": "1425380",
    "end": "1431500"
  },
  {
    "text": "defined so in DynamoDB whenever you do a write a put item or an update you can",
    "start": "1431500",
    "end": "1437980"
  },
  {
    "text": "specify a condition that must hold true for DynamoDB to accept your right so you",
    "start": "1437980",
    "end": "1443470"
  },
  {
    "text": "know you can make sure an attribute exists or does not exist before dynamodb will commit you right it's very handy",
    "start": "1443470",
    "end": "1448930"
  },
  {
    "text": "for atomic updates and that sort of thing so in line 9 we're checking the",
    "start": "1448930",
    "end": "1454450"
  },
  {
    "text": "error type return to see if it's a conditional check failed exception if it is we're just you know we're going to do",
    "start": "1454450",
    "end": "1460180"
  },
  {
    "text": "something with that error going to handle it so we're just going to print out that message in this example and",
    "start": "1460180",
    "end": "1465960"
  },
  {
    "text": "then lions 14 through 17 is our kind of catch-all so of course you can you can",
    "start": "1465960",
    "end": "1471850"
  },
  {
    "text": "go down and catch all the errors and then we just have a catch all at the end",
    "start": "1471850",
    "end": "1476940"
  },
  {
    "text": "okay so that's error handling in the SDK I'm gonna turn this over to John to talk",
    "start": "1476940",
    "end": "1483490"
  },
  {
    "text": "about some more cool stuff",
    "start": "1483490",
    "end": "1486240"
  },
  {
    "text": "Preston mentioned I'm Jonathan Hinson I'm an ste with Amazon Web Services and",
    "start": "1491460",
    "end": "1497640"
  },
  {
    "text": "so anytime we're talking over the web especially if we have an application",
    "start": "1497640",
    "end": "1503350"
  },
  {
    "text": "layer sitting on top of this there are several things that can go wrong that we don't want our application layer to be",
    "start": "1503350",
    "end": "1508900"
  },
  {
    "text": "concerned about until we need to be concerned about it so if our network",
    "start": "1508900",
    "end": "1514090"
  },
  {
    "text": "card goes down temporarily or we lost an internet connection or a service return to 500 result we would just like it to",
    "start": "1514090",
    "end": "1521080"
  },
  {
    "text": "quietly retry and if it can't eventually be successful then let us know we'd also",
    "start": "1521080",
    "end": "1526900"
  },
  {
    "text": "like to override this or change this behavior if it's not what we want so we",
    "start": "1526900",
    "end": "1534340"
  },
  {
    "start": "1534000",
    "end": "1534000"
  },
  {
    "text": "provide you a default retry strategy it's there by default and it's on so if",
    "start": "1534340",
    "end": "1540370"
  },
  {
    "text": "your request fails for some reason that we have deemed reliable we'll talk about",
    "start": "1540370",
    "end": "1545710"
  },
  {
    "text": "that in just a moment then we'll retry it up to a certain point and then the error will propagate up the stack and as I said you can",
    "start": "1545710",
    "end": "1554590"
  },
  {
    "text": "override this behavior if you want more granular support for your application so",
    "start": "1554590",
    "end": "1559810"
  },
  {
    "text": "let's look at what it would how we could implement our own custom retry strategy",
    "start": "1559810",
    "end": "1567059"
  },
  {
    "text": "so this is a very simple exponential back-off strategy the first thing you",
    "start": "1567240",
    "end": "1574150"
  },
  {
    "text": "should notice is in line 4 we've overridden the should retry method and this receives an error object which has",
    "start": "1574150",
    "end": "1582490"
  },
  {
    "text": "it should retry flag on it which is just a hint that we are giving that hey this was a 500 error from the HTTP layer or",
    "start": "1582490",
    "end": "1590220"
  },
  {
    "text": "we know that this should be retried so this is how you know you should we try",
    "start": "1590220",
    "end": "1595690"
  },
  {
    "text": "it and then there's the attempted retries which is the number of times we have already retried this request so in",
    "start": "1595690",
    "end": "1603400"
  },
  {
    "text": "this scenario we're going to say we don't want to retry more than five times and we want the error to actually be",
    "start": "1603400",
    "end": "1609310"
  },
  {
    "text": "retrial otherwise don't retry the next",
    "start": "1609310",
    "end": "1614350"
  },
  {
    "text": "thing you'll see is at line 11 the calculate delay before next retry and",
    "start": "1614350",
    "end": "1619620"
  },
  {
    "text": "what this does is this DK has already determined it's going to retry your request so what we the job",
    "start": "1619620",
    "end": "1627700"
  },
  {
    "text": "here is to simply calculate how long the SDK needs to pause before it retries this request again so in this scenario",
    "start": "1627700",
    "end": "1635050"
  },
  {
    "text": "if we haven't retried yet and we do a context switch and immediately return or",
    "start": "1635050",
    "end": "1641740"
  },
  {
    "text": "immediately start retrying otherwise we're going to do a bit shift on the number of times we've retried and then",
    "start": "1641740",
    "end": "1647530"
  },
  {
    "text": "we're going to multiply it by some arbitrary number and that's going to give us our exponential back-off this",
    "start": "1647530",
    "end": "1652870"
  },
  {
    "text": "doesn't have jitter or anything that you need in a production-ready exponential back-off but you get the",
    "start": "1652870",
    "end": "1658330"
  },
  {
    "text": "idea so how would we use this so this is",
    "start": "1658330",
    "end": "1663370"
  },
  {
    "text": "very similar to the pattern you've already seen you simply create an instance of your retry strategy here is",
    "start": "1663370",
    "end": "1669430"
  },
  {
    "text": "exponential back-off strategy you set it on your client configuration and you pass it to your client now when you call",
    "start": "1669430",
    "end": "1677560"
  },
  {
    "text": "put item on your client on line 16 if your network went down temporarily and",
    "start": "1677560",
    "end": "1684550"
  },
  {
    "text": "you got a timeout or something of that nature it will just retry probably the",
    "start": "1684550",
    "end": "1693520"
  },
  {
    "start": "1692000",
    "end": "1692000"
  },
  {
    "text": "most complex topic we're gonna talk to you today and one of the reasons you use C++ many times is to have control over",
    "start": "1693520",
    "end": "1700960"
  },
  {
    "text": "your memory and there are many applications where it is just simply not an option to use malloc or free or to",
    "start": "1700960",
    "end": "1708790"
  },
  {
    "text": "use new and delete and there's many applications where that's absolutely what you want so we wanted to give you",
    "start": "1708790",
    "end": "1714490"
  },
  {
    "text": "this flexibility which is a challenge because we're pursuing platform-independent modern c++ and part",
    "start": "1714490",
    "end": "1722410"
  },
  {
    "text": "of the thing that goes with that is the S the standard template library and we didn't want to take that from our",
    "start": "1722410",
    "end": "1727420"
  },
  {
    "text": "developers we wanted you to be able to leverage this so most of the time when you see custom memory management someone",
    "start": "1727420",
    "end": "1734770"
  },
  {
    "text": "has rolled their own STL implementation so we wanted to keep it and we'll get to",
    "start": "1734770",
    "end": "1741940"
  },
  {
    "text": "how we did that in just a minute and one thing you should note is that this is switched on at compile time you can at",
    "start": "1741940",
    "end": "1749470"
  },
  {
    "text": "runtime install your own memory management strategy and for safety",
    "start": "1749470",
    "end": "1754960"
  },
  {
    "text": "reasons by default we turn this on for dynamic libraries and we'll talk about that in a",
    "start": "1754960",
    "end": "1760060"
  },
  {
    "text": "moment so how would we implement our own memory allocator so DL malloc is one",
    "start": "1760060",
    "end": "1772050"
  },
  {
    "text": "many people use this as a more efficient allocator and it was developed by",
    "start": "1772050",
    "end": "1777400"
  },
  {
    "text": "Douglas Lu in the 80s he was the primary author of libgdx and it minimizes",
    "start": "1777400",
    "end": "1785590"
  },
  {
    "text": "wastage using binning strategies and so forth and we're just going to plug this",
    "start": "1785590",
    "end": "1791980"
  },
  {
    "text": "in to our system so notice in line 9 that we have an allocate memory method",
    "start": "1791980",
    "end": "1798730"
  },
  {
    "text": "that we override and this takes a block size which is the amount of memory we want to allocate in alignment if you",
    "start": "1798730",
    "end": "1806380"
  },
  {
    "text": "don't know how you're wanting to handle this you probably shouldn't be handling it and then an allocation tag which is",
    "start": "1806380",
    "end": "1811930"
  },
  {
    "text": "here largely for debugging purposes say if you don't have Val grind or something like that to check with and then we're",
    "start": "1811930",
    "end": "1818770"
  },
  {
    "text": "going to return the call to DL mallet and the memory that it created and on",
    "start": "1818770",
    "end": "1825010"
  },
  {
    "text": "line 14 we free the memory calling DL free it's that simple you'll also notice the begin in the end",
    "start": "1825010",
    "end": "1832600"
  },
  {
    "text": "methods are empty the memory system is used in a static context so this is",
    "start": "1832600",
    "end": "1838270"
  },
  {
    "text": "merely an opportunity for you to make any static calls you need to make to allocate to set up your memory system so",
    "start": "1838270",
    "end": "1845020"
  },
  {
    "text": "how would we plug this in you might remember from the logging example that",
    "start": "1845020",
    "end": "1850960"
  },
  {
    "text": "we had some static initialize and cleanup calls and we're going to follow a similar pattern here so we're going to",
    "start": "1850960",
    "end": "1857980"
  },
  {
    "text": "create an instance of our DL malloc memory system and then we're going to call initialize AWS memory system and",
    "start": "1857980",
    "end": "1865060"
  },
  {
    "text": "this will plug everything in and then we're going to shut it down longer finish this should go in the main entry",
    "start": "1865060",
    "end": "1871450"
  },
  {
    "text": "point of your application before any AWS calls are made so DLL main or main or",
    "start": "1871450",
    "end": "1877990"
  },
  {
    "text": "wherever your static in it is for the library you're producing whatever that may be",
    "start": "1877990",
    "end": "1884100"
  },
  {
    "text": "so I mentioned the standard template library how did we handle that well you'll notice in",
    "start": "1884190",
    "end": "1889690"
  },
  {
    "text": "samples that we've shown you and also if you look at the code on github that there's AWS : : and then a very familiar",
    "start": "1889690",
    "end": "1896860"
  },
  {
    "text": "name like AWS string AWS vector AWS map queues io streams so on if you are not",
    "start": "1896860",
    "end": "1904419"
  },
  {
    "text": "using custom memory management this just immediately turns into standard string",
    "start": "1904419",
    "end": "1910210"
  },
  {
    "text": "standard vector standard map so on if you are then we will pass your allocator",
    "start": "1910210",
    "end": "1916000"
  },
  {
    "text": "to the standard Lib definitions and it's",
    "start": "1916000",
    "end": "1921129"
  },
  {
    "text": "just aliased over to that so one of the benefits here is if you code using R",
    "start": "1921129",
    "end": "1926559"
  },
  {
    "text": "types and then you turn on custom memory management you don't have to change anything in your code everything will",
    "start": "1926559",
    "end": "1932980"
  },
  {
    "text": "just compile so we're going to look at",
    "start": "1932980",
    "end": "1938590"
  },
  {
    "text": "the compiled time switch and then we're going to come back to one of the points that we're making there at the bottom so",
    "start": "1938590",
    "end": "1945460"
  },
  {
    "text": "here's a code sample we've prepared and",
    "start": "1945460",
    "end": "1952299"
  },
  {
    "text": "we're going to just play around with the standard template library a little bit so we're going to dynamically allocate a",
    "start": "1952299",
    "end": "1959919"
  },
  {
    "text": "string and it's going to have the value I'm a dynamically allocated string and",
    "start": "1959919",
    "end": "1965230"
  },
  {
    "text": "it's going to print that out to the standard output and then we're going to clean it up and then the side of block",
    "start": "1965230",
    "end": "1971620"
  },
  {
    "text": "we're gonna create a string on the stack and we're going to print that out and just for fun we're gonna create a vector",
    "start": "1971620",
    "end": "1979090"
  },
  {
    "text": "and push a copy of our string on the vector and then we're also going to move our string on the vector so let's run",
    "start": "1979090",
    "end": "1987789"
  },
  {
    "text": "this and see what happens",
    "start": "1987789",
    "end": "1991830"
  },
  {
    "text": "okay so it just printed our strings up it's exactly what we expected now let's",
    "start": "2001150",
    "end": "2007070"
  },
  {
    "text": "do something a bit more complex let's make a live dynamodb call",
    "start": "2007070",
    "end": "2013720"
  },
  {
    "text": "so this dynamodb call we're going to create a client configuration and we're",
    "start": "2013930",
    "end": "2019010"
  },
  {
    "text": "going to call out to us West two we're going to use our profile config AWS",
    "start": "2019010",
    "end": "2024560"
  },
  {
    "text": "credentials provider and we're going to",
    "start": "2024560",
    "end": "2029600"
  },
  {
    "text": "pass in our client configuration so we've we've already created a table and",
    "start": "2029600",
    "end": "2034880"
  },
  {
    "text": "we're gonna put a value into that a hash key reinvent demo Jonathan Henson and",
    "start": "2034880",
    "end": "2040070"
  },
  {
    "text": "we're going to put the value welcome to reinvent 2015 we're gonna create our put",
    "start": "2040070",
    "end": "2045620"
  },
  {
    "text": "item request and if it's successful then we'll just print out that we're successful if it fails we'll say okay",
    "start": "2045620",
    "end": "2053659"
  },
  {
    "text": "operation failed here's the error next we're going to get the item back out",
    "start": "2053660",
    "end": "2060490"
  },
  {
    "text": "we're gonna put our table name and the attributes we want to get and the key to pull from and then if that's successful",
    "start": "2060490",
    "end": "2067040"
  },
  {
    "text": "we're going to write the value out to the screen otherwise we'll write the error out to the screen so let's",
    "start": "2067040",
    "end": "2074360"
  },
  {
    "text": "recompile the run",
    "start": "2074360",
    "end": "2077620"
  },
  {
    "text": "and you'll notice our put item was successful and our get item was successful and we got our value back out",
    "start": "2082990",
    "end": "2088908"
  },
  {
    "text": "of the database so I'm going to swap here and then we're going to talk for a minute so I'm going to swap a flag in",
    "start": "2088909",
    "end": "2098000"
  },
  {
    "text": "our C make which changes a macro",
    "start": "2098000",
    "end": "2101890"
  },
  {
    "text": "and you will notice that immediately we are now rebuilding that's because this compile time switch changes the",
    "start": "2109160",
    "end": "2115880"
  },
  {
    "text": "definitions of art all of your memory allocation and AWS STL objects it",
    "start": "2115880",
    "end": "2123650"
  },
  {
    "text": "changes how those are defined so everything needs to be recompiled",
    "start": "2123650",
    "end": "2128170"
  },
  {
    "text": "so now custom memory management is turned on but notice we have not yet",
    "start": "2139890",
    "end": "2145920"
  },
  {
    "text": "installed a memory system implementation yet so this will still work in fact it",
    "start": "2145920",
    "end": "2153690"
  },
  {
    "text": "will have identical output as before by",
    "start": "2153690",
    "end": "2158849"
  },
  {
    "text": "default we give you a centralized allocation and de-allocation strategy",
    "start": "2158849",
    "end": "2163980"
  },
  {
    "text": "that just calls malloc and free and new and delete under the hood there is a benefit to this and that is it helps you",
    "start": "2163980",
    "end": "2170130"
  },
  {
    "text": "tremendously with DLL safety which we'll talk about it in just a moment so but",
    "start": "2170130",
    "end": "2176489"
  },
  {
    "text": "now let's suppose we wanted to implement our own memory system interface so we",
    "start": "2176489",
    "end": "2182009"
  },
  {
    "text": "have to find a memory system that simply just writes out the console when it's allocating and freeing memory and the",
    "start": "2182009",
    "end": "2188519"
  },
  {
    "text": "allocation tag so you'll see we've over an allocate memory we write a bunch of stuff out to the console and then we",
    "start": "2188519",
    "end": "2195150"
  },
  {
    "text": "return the value of malloc free we write out that we're freeing it with the pointer address and then we free it up",
    "start": "2195150",
    "end": "2201960"
  },
  {
    "text": "and that's all there is to it so now let's plug this in to our example",
    "start": "2201960",
    "end": "2209119"
  },
  {
    "text": "and let's run it so we should see not only the value of our strings printed",
    "start": "2216420",
    "end": "2221850"
  },
  {
    "text": "out to the console but we should now see every allocation and de-allocation that happens so now we see all of the",
    "start": "2221850",
    "end": "2235050"
  },
  {
    "text": "memories that we allocated we see all of it that was free feel look carefully you can see the copies and the moves going",
    "start": "2235050",
    "end": "2241620"
  },
  {
    "text": "on the push to the vector you'll also see these tags for STL it says this went through the STL allocators and then",
    "start": "2241620",
    "end": "2249240"
  },
  {
    "text": "you'll see our allocation tag for our a WS new call so I think that demonstrates",
    "start": "2249240",
    "end": "2256350"
  },
  {
    "text": "how it works but just for fun let's make the DynamoDB call",
    "start": "2256350",
    "end": "2262579"
  },
  {
    "text": "so this was quite extensive because",
    "start": "2271220",
    "end": "2278480"
  },
  {
    "text": "there's a lot going on to make an AWS request from converting your data into",
    "start": "2278480",
    "end": "2283579"
  },
  {
    "text": "JSON or XML or query HTTP forms to",
    "start": "2283579",
    "end": "2290140"
  },
  {
    "text": "signing the request to putting it on the HTTP stack to TLS signing and encryption",
    "start": "2290140",
    "end": "2296480"
  },
  {
    "text": "a lot of that has to happen and what we have just done is we have run that entire process through our allocation",
    "start": "2296480",
    "end": "2302839"
  },
  {
    "text": "strategy one further note I would like",
    "start": "2302839",
    "end": "2309140"
  },
  {
    "text": "to bring up is most of the api's also take primitives so anywhere we are asking for a standard string or an AWS",
    "start": "2309140",
    "end": "2316730"
  },
  {
    "text": "string it will also take a constant char pointer this way you don't have to use STL if you don't need STL or if you",
    "start": "2316730",
    "end": "2324290"
  },
  {
    "text": "don't want to use it so just some general advice custom memory management",
    "start": "2324290",
    "end": "2331010"
  },
  {
    "text": "will help you with dynamic linking especially on Windows if none of you",
    "start": "2331010",
    "end": "2336980"
  },
  {
    "text": "have ever had to struggle with different heaps and debug symbols on one and release symbols on another and",
    "start": "2336980",
    "end": "2342770"
  },
  {
    "text": "mysterious seg faults on mismatching object sizes then I encourage you to go",
    "start": "2342770",
    "end": "2348050"
  },
  {
    "text": "try dynamically linking things together with different runtimes see what happens and then come turn custom memory",
    "start": "2348050",
    "end": "2353810"
  },
  {
    "text": "management on we will help you don't use the STL containers directly if you ever",
    "start": "2353810",
    "end": "2360980"
  },
  {
    "text": "plan on turning customary management on just use that what we've aliased for you because if you ever come back and need",
    "start": "2360980",
    "end": "2367520"
  },
  {
    "text": "to turn it on or someone ports your application to a mobile environment or a game or somewhere where this would need",
    "start": "2367520",
    "end": "2374060"
  },
  {
    "text": "to be done they won't have to change any of the code it'll just resolve don't use",
    "start": "2374060",
    "end": "2379490"
  },
  {
    "text": "new and delete or malloc and free or make shared and make unique directly use",
    "start": "2379490",
    "end": "2385880"
  },
  {
    "text": "AWS new AWS delete AWS make shared AWS make unique this will resolve to what",
    "start": "2385880",
    "end": "2392119"
  },
  {
    "text": "you're expecting if you don't have it on but if you do it will tie everything together for you and lastly and this is",
    "start": "2392119",
    "end": "2399319"
  },
  {
    "text": "something we've seen a lot and dealing with people on github the common thing people forget is",
    "start": "2399319",
    "end": "2404660"
  },
  {
    "text": "past the macro definition to their compiled commit command when they are using the library so don't forget to",
    "start": "2404660",
    "end": "2411230"
  },
  {
    "text": "pass AWS custom memory management to your compiler so that it knows how to resolve the symbols correctly so up till",
    "start": "2411230",
    "end": "2423799"
  },
  {
    "start": "2419000",
    "end": "2419000"
  },
  {
    "text": "now most of the web requests we've been dealing with have been well-formed they",
    "start": "2423799",
    "end": "2430250"
  },
  {
    "text": "were JSON or XML or query protocol or",
    "start": "2430250",
    "end": "2435410"
  },
  {
    "text": "something of that nature but what about cases where the payload doesn't have a",
    "start": "2435410",
    "end": "2440650"
  },
  {
    "text": "well-formed type what about if you're sending a giant binary file up to s3",
    "start": "2440650",
    "end": "2446240"
  },
  {
    "text": "what if you're getting the results of a lambda invoke function what if you're doing some of these things the data",
    "start": "2446240",
    "end": "2452930"
  },
  {
    "text": "doesn't have a defined type so for this we've used the STL iostream interface",
    "start": "2452930",
    "end": "2459700"
  },
  {
    "text": "but notice that it's be aware that it's going to default to a string buffer",
    "start": "2459700",
    "end": "2465920"
  },
  {
    "text": "under the hood so for many things such as getting a JSON value back out of s3",
    "start": "2465920",
    "end": "2471440"
  },
  {
    "text": "or a lambda and VOC result this may be exactly what you want but if you're",
    "start": "2471440",
    "end": "2477170"
  },
  {
    "text": "doing something like an s3 object foot or a get then and it's a really large",
    "start": "2477170",
    "end": "2483140"
  },
  {
    "text": "file then you may run out of memory or other really bad things may happen so",
    "start": "2483140",
    "end": "2489160"
  },
  {
    "text": "we're going to need to override this so let's look at some cases where we need to override it so Amazon s3 is Amazon's",
    "start": "2489160",
    "end": "2499130"
  },
  {
    "text": "distributed object store it has the simple rest interface sitting on top of it probably one of the oldest and most",
    "start": "2499130",
    "end": "2506779"
  },
  {
    "text": "well known services we have so we're going to make a put object request with",
    "start": "2506779",
    "end": "2512029"
  },
  {
    "text": "our bucket name and you just create this ahead of time on the console or another",
    "start": "2512029",
    "end": "2517520"
  },
  {
    "text": "API calls and then we're gonna set the key name now here's where it gets a",
    "start": "2517520",
    "end": "2524150"
  },
  {
    "text": "little different we're going to create an F stream and we're going to just say",
    "start": "2524150",
    "end": "2529960"
  },
  {
    "text": "create a file stream for this image",
    "start": "2529960",
    "end": "2535730"
  },
  {
    "text": "that's sitting on my desk and then we just pass that filestream",
    "start": "2535730",
    "end": "2541010"
  },
  {
    "text": "inline 8 to our put object request as the body now when we call client put",
    "start": "2541010",
    "end": "2547050"
  },
  {
    "text": "object what will happen is it will just read that directly from disk as it's streaming it over the socket",
    "start": "2547050",
    "end": "2555080"
  },
  {
    "text": "what about responses that's a little different because we don't create the response until we've already gotten our",
    "start": "2555080",
    "end": "2561300"
  },
  {
    "start": "2556000",
    "end": "2556000"
  },
  {
    "text": "response back from the server so in this case you simply need to provide us with a strategy so we provide you with the",
    "start": "2561300",
    "end": "2568890"
  },
  {
    "text": "response stream Factory and notice that we're calling AWS new we take ownership of this memory that you give us and it",
    "start": "2568890",
    "end": "2576720"
  },
  {
    "text": "it will have the lifetime of the response object that's coming back so in this case we're going to create a file",
    "start": "2576720",
    "end": "2582690"
  },
  {
    "text": "stream and we're going to point it to a location on disk and now when we create",
    "start": "2582690",
    "end": "2588030"
  },
  {
    "text": "your HTTP response which will then become your GUID object response it will",
    "start": "2588030",
    "end": "2593700"
  },
  {
    "text": "just write it directly to the disk it won't load any more memory than you would use if you were just using standard streaming stuff on your on your",
    "start": "2593700",
    "end": "2600420"
  },
  {
    "text": "machine so notice that set response stream factory takes any closure that",
    "start": "2600420",
    "end": "2608100"
  },
  {
    "text": "can be passed as a constructor arc to standard function so this could be a",
    "start": "2608100",
    "end": "2613110"
  },
  {
    "text": "standard bind call this could be static C style function or this could be a",
    "start": "2613110",
    "end": "2618660"
  },
  {
    "text": "lambda and so we did a lambda in this case lastly a more advanced topic if",
    "start": "2618660",
    "end": "2629160"
  },
  {
    "start": "2626000",
    "end": "2626000"
  },
  {
    "text": "this is something that meets your requirements is suppose you are writing a browser plugin or suppose you are",
    "start": "2629160",
    "end": "2636390"
  },
  {
    "text": "deploying to a game or a mobile mobile application that already has an existing",
    "start": "2636390",
    "end": "2641610"
  },
  {
    "text": "HTTP and TLS that you would need to override it in this case because who wants to deploy two stacks that they",
    "start": "2641610",
    "end": "2647550"
  },
  {
    "text": "don't need so you can inject them into your clients directly you can implement",
    "start": "2647550",
    "end": "2653640"
  },
  {
    "text": "your own client and there's an abstract factory pattern you just provide us with this Factory and it will start using",
    "start": "2653640",
    "end": "2659040"
  },
  {
    "text": "your client under the hood so we're going to look at a small sample of what that may look like it's an extensive",
    "start": "2659040",
    "end": "2664680"
  },
  {
    "text": "thing to write so we're just going to look at the interface and talk through it so",
    "start": "2664680",
    "end": "2670640"
  },
  {
    "text": "libuv some of you may have played with is a async IO and many other things",
    "start": "2670640",
    "end": "2676910"
  },
  {
    "text": "framework for C++ so suppose we wanted to implement our own HTTP client using",
    "start": "2676910",
    "end": "2682940"
  },
  {
    "text": "libuv and then signal-to-noise is a project that Amazon's been working on to",
    "start": "2682940",
    "end": "2689210"
  },
  {
    "text": "simplify the SSL stack that's kind of grown unwieldy over the years so we're",
    "start": "2689210",
    "end": "2697490"
  },
  {
    "text": "gonna be avant-garde and new guys that are doing something fun and unique and",
    "start": "2697490",
    "end": "2702920"
  },
  {
    "text": "we're gonna implement a libuv and signal-to-noise httpclient all we have",
    "start": "2702920",
    "end": "2708560"
  },
  {
    "text": "to do is notice that line six we override make request this takes an HTTP",
    "start": "2708560",
    "end": "2714500"
  },
  {
    "text": "request object which is an abstract class but we provide you with a concrete implementation if it works for you and",
    "start": "2714500",
    "end": "2721300"
  },
  {
    "text": "then notice that the rate limiter and the right limiter are passed in here if you write your own HTTP client it is",
    "start": "2721300",
    "end": "2730070"
  },
  {
    "text": "your responsibility to use the rate limiter that is passed to you so if you",
    "start": "2730070",
    "end": "2735950"
  },
  {
    "text": "don't care about it don't worry but if you do just notice your responsibility",
    "start": "2735950",
    "end": "2741160"
  },
  {
    "text": "so how do we plug this into our factory so line six we create an HTTP client and",
    "start": "2741160",
    "end": "2749240"
  },
  {
    "text": "this can be a singleton this can be a new instance that's your choice and it takes the client configuration which",
    "start": "2749240",
    "end": "2755420"
  },
  {
    "text": "will contain data that you're going to want to pull out like max connections whether we want to use HTTP or HTTPS",
    "start": "2755420",
    "end": "2764770"
  },
  {
    "text": "grab the user agent string things like that and you just return a new instance",
    "start": "2764770",
    "end": "2770090"
  },
  {
    "text": "of HTTP client then we part of the mechanism for allowing you to have your",
    "start": "2770090",
    "end": "2776210"
  },
  {
    "text": "own HTTP request system is you can return your own HTTP request or you can",
    "start": "2776210",
    "end": "2781940"
  },
  {
    "text": "just use ours so how would we plug this in so we instantiate our client factory",
    "start": "2781940",
    "end": "2791570"
  },
  {
    "text": "and we inject it into our client it's that simple now once we call put item it",
    "start": "2791570",
    "end": "2799340"
  },
  {
    "text": "will make all of the HTTP and TLS calls using your stack that you have provided",
    "start": "2799340",
    "end": "2806310"
  },
  {
    "text": "so there's a lot of other small core features that you want to look at some utilities we've provided but this is a",
    "start": "2806310",
    "end": "2813660"
  },
  {
    "text": "high-level summary of what we've given you for the core library so let's look",
    "start": "2813660",
    "end": "2818829"
  },
  {
    "text": "at some of the high-level api's that we have given you real quick so Amazon",
    "start": "2818829",
    "end": "2823960"
  },
  {
    "start": "2822000",
    "end": "2822000"
  },
  {
    "text": "Cognito identity as Preston mentioned solves the complicated problem of getting credentials to a device that you",
    "start": "2823960",
    "end": "2830530"
  },
  {
    "text": "do not trust and in a secure manner so",
    "start": "2830530",
    "end": "2835829"
  },
  {
    "text": "you can do this authenticated you can do it anonymous it's a lot of different choices you have there so we've given",
    "start": "2835829",
    "end": "2841570"
  },
  {
    "text": "you an API that will give you a kognito identity credential provider where you could simply say here's my identity pool",
    "start": "2841570",
    "end": "2848650"
  },
  {
    "text": "or and here's my account ID send that to your clients and now you'll be using kognito under the hood",
    "start": "2848650",
    "end": "2856050"
  },
  {
    "text": "likewise if you've used any of our other SDKs you've probably grown used to the transfer manager so really cool utility",
    "start": "2856050",
    "end": "2863170"
  },
  {
    "text": "that helps you with using s3 and transferring large files and directories and large amount of objects so we've",
    "start": "2863170",
    "end": "2871270"
  },
  {
    "text": "given you that there's a few differences we'll talk about we get there next",
    "start": "2871270",
    "end": "2876369"
  },
  {
    "text": "there's sort of an experimental thing we've been playing around with because one day we were sitting thinking it'll be really cool if I could have an sqs",
    "start": "2876369",
    "end": "2883000"
  },
  {
    "text": "queue and I could just dump it into my PC channel or if I could you know have a",
    "start": "2883000",
    "end": "2889300"
  },
  {
    "text": "local stack sitting around and drive an entire event mechanism for my C++",
    "start": "2889300",
    "end": "2894760"
  },
  {
    "text": "application off of sqs and where I didn't have to worry about making the sqs calls myself I could just say cue",
    "start": "2894760",
    "end": "2901839"
  },
  {
    "text": "start polling let me know when I got a message so we've provided that lastly",
    "start": "2901839",
    "end": "2908589"
  },
  {
    "text": "we're not going to show a sample for this last one but we've put a high level interface on top of I am and this is",
    "start": "2908589",
    "end": "2915400"
  },
  {
    "text": "sort of ORN like where you could say ORM give me the users in this group or give",
    "start": "2915400",
    "end": "2921310"
  },
  {
    "text": "me all of the groups that this user is part of assume roll all those sorts or get me roles that all those sorts of",
    "start": "2921310",
    "end": "2927460"
  },
  {
    "text": "things so let's look at cognitive identity so this is the UH nonnamous",
    "start": "2927460",
    "end": "2933849"
  },
  {
    "text": "identity pool implementation so notice that we're calling make sure",
    "start": "2933849",
    "end": "2939230"
  },
  {
    "text": "we're going to get a shared pointer to a Cognito cashing anonymous credentials provider says caching because it caches",
    "start": "2939230",
    "end": "2946220"
  },
  {
    "text": "the identity to disk so that it's not need to keep going out to Cognito to get an identity that should be unique for",
    "start": "2946220",
    "end": "2952430"
  },
  {
    "text": "the user so it's gonna by default write this out to your home directory AWS",
    "start": "2952430",
    "end": "2959270"
  },
  {
    "text": "identities file under the hood there is a persistence layer and it can be",
    "start": "2959270",
    "end": "2964910"
  },
  {
    "text": "injected into your constructor and will actually touch that explicitly in our",
    "start": "2964910",
    "end": "2970430"
  },
  {
    "text": "next example and then we pass this credentials provider to our DynamoDB",
    "start": "2970430",
    "end": "2975470"
  },
  {
    "text": "client now when we make our first dynamodb call it will when it goes to",
    "start": "2975470",
    "end": "2981680"
  },
  {
    "text": "sign the request it will go out to kognito get an identity back and then it will",
    "start": "2981680",
    "end": "2986690"
  },
  {
    "text": "get credentials for that identity it will cache it all and then it will just run what about the authenticated use",
    "start": "2986690",
    "end": "2994130"
  },
  {
    "text": "case say I have a bunch of open IDs or some other provider that I want to tie in to kognito well that persistence",
    "start": "2994130",
    "end": "3001780"
  },
  {
    "text": "layer I was talking about before is right here it's just the default",
    "start": "3001780",
    "end": "3007690"
  },
  {
    "text": "persistence kognito identity provider so we're gonna create one of these and we're gonna write some login with Amazon",
    "start": "3007690",
    "end": "3013450"
  },
  {
    "text": "tokens to our persistence provider and these are just made-up things and this",
    "start": "3013450",
    "end": "3019030"
  },
  {
    "text": "token is going to be good for one hour we're going to persist this to our identity provider and then we're going",
    "start": "3019030",
    "end": "3026290"
  },
  {
    "text": "to create a Cognito cashing authenticated credentials provider the only difference here is it makes",
    "start": "3026290",
    "end": "3032400"
  },
  {
    "text": "authenticated calls to Cognito using the log ins you provide and then just like",
    "start": "3032400",
    "end": "3039160"
  },
  {
    "text": "before on line 11 we will inject our credentials provider into our client and",
    "start": "3039160",
    "end": "3044940"
  },
  {
    "text": "now when we make our calls it will call it to Cognito make the entire exchange",
    "start": "3044940",
    "end": "3051190"
  },
  {
    "text": "cash this stuff and be running what",
    "start": "3051190",
    "end": "3056650"
  },
  {
    "text": "about transfer manager there's a lot going on here and a lot of things we have provided but notice that line 2 we",
    "start": "3056650",
    "end": "3064630"
  },
  {
    "text": "just create a simple transfer client it takes an s3 client instance and then there's this",
    "start": "3064630",
    "end": "3069970"
  },
  {
    "text": "configure transfer client configuration object the first number 10 is the number",
    "start": "3069970",
    "end": "3075460"
  },
  {
    "text": "of concurrent threads we weren't running at a time the second one is the default",
    "start": "3075460",
    "end": "3081660"
  },
  {
    "text": "use the default buffer manager and the default buffer manager is going to create five mega byte buffers and then",
    "start": "3081660",
    "end": "3088390"
  },
  {
    "text": "as we go to upload the file it's going to create 10 threads each with 5 mega byte buffers sequentially read through",
    "start": "3088390",
    "end": "3095140"
  },
  {
    "text": "the file but as it gets a 5 mega byte buffer it's gonna create a put put item",
    "start": "3095140",
    "end": "3100810"
  },
  {
    "text": "part put object upload part request don't remember the name of it and it's",
    "start": "3100810",
    "end": "3106840"
  },
  {
    "text": "going to create ten of these and it's going to send them as fast as it can when one finishes it'll return the buffer and it'll just keep going so in",
    "start": "3106840",
    "end": "3115030"
  },
  {
    "text": "this case suppose we have a 10 gigabyte my sequel database file and we want to",
    "start": "3115030",
    "end": "3121060"
  },
  {
    "text": "upload this to s3 so we simply say upload the file here's the content type",
    "start": "3121060",
    "end": "3127119"
  },
  {
    "text": "here's where I want you to put it and this will return a handle on the upload file request and you can use this to get",
    "start": "3127119",
    "end": "3135490"
  },
  {
    "text": "notifications it'll you can provide callbacks you can cancel the request we've got a very similar API for the",
    "start": "3135490",
    "end": "3142210"
  },
  {
    "text": "downloads what about queues so in this scenario",
    "start": "3142210",
    "end": "3151320"
  },
  {
    "text": "notice that line two we're going to create an sqs queue and this inherits",
    "start": "3151320",
    "end": "3157030"
  },
  {
    "text": "from a higher-level queue interface and we're going to inject our sqs client into our higher-level client then we're",
    "start": "3157030",
    "end": "3166180"
  },
  {
    "text": "going to set our callback like we do on lines three four and five to a member function and then line seven we're gonna",
    "start": "3166180",
    "end": "3172720"
  },
  {
    "text": "tell it to start polling and then we can just forget about it and then later on",
    "start": "3172720",
    "end": "3178450"
  },
  {
    "text": "somebody put something into RS qsq then we will immediately be notified that we",
    "start": "3178450",
    "end": "3183670"
  },
  {
    "text": "have received a message and we can handle it notice the delete message flag if you set that to true it will remove",
    "start": "3183670",
    "end": "3190810"
  },
  {
    "text": "the message from your queue otherwise it will stay there and it will come back when the visibility timeout is finished",
    "start": "3190810",
    "end": "3195910"
  },
  {
    "text": "and then we're just going to send an IPC message however you do that on your platform with what we got from sqs and",
    "start": "3195910",
    "end": "3202630"
  },
  {
    "text": "now we have tie our IPC channel into our distributed cue",
    "start": "3202630",
    "end": "3208950"
  },
  {
    "text": "with SQS so as you're using this you may",
    "start": "3208950",
    "end": "3215980"
  },
  {
    "text": "find things that are just really cool that you want to contribute back and we would love to use them and we would love",
    "start": "3215980",
    "end": "3221410"
  },
  {
    "text": "to offer them to our customers and we'd love to help you improve them and for you to help us improve ours so please",
    "start": "3221410",
    "end": "3227680"
  },
  {
    "text": "contribute high level SDKs we are currently updating the",
    "start": "3227680",
    "end": "3233280"
  },
  {
    "text": "contribution guidelines and the readme but use C++ best practices as far as",
    "start": "3233280",
    "end": "3239130"
  },
  {
    "text": "this can be agreed upon and remember is just one sort of extra hint please use",
    "start": "3239130",
    "end": "3247210"
  },
  {
    "text": "constructor injection in your high level SDKs for low level clients because it's a really complex process to create some",
    "start": "3247210",
    "end": "3254260"
  },
  {
    "text": "of these low level clients and we and there's a lot of options that go into that and we want to make sure that",
    "start": "3254260",
    "end": "3259750"
  },
  {
    "text": "customers still have that ability so what did we learn we saw where the code",
    "start": "3259750",
    "end": "3267579"
  },
  {
    "start": "3264000",
    "end": "3264000"
  },
  {
    "text": "is we had a high level view of the core features we went through credential",
    "start": "3267579",
    "end": "3275140"
  },
  {
    "text": "management how that works how you can turn logging on we looked at asynchronous requests and overriding",
    "start": "3275140",
    "end": "3281589"
  },
  {
    "text": "your asynchronous executor rate limiting in cases where you might want to use that we talked about exceptions and",
    "start": "3281589",
    "end": "3289030"
  },
  {
    "text": "error handling memory allocation strategies how do you handle data that",
    "start": "3289030",
    "end": "3295180"
  },
  {
    "text": "isn't necessarily well-formed that's just a stream and then how we can override the HTTP and TLS step one thing",
    "start": "3295180",
    "end": "3302049"
  },
  {
    "text": "I would point out on these core library features is you want to use common sense",
    "start": "3302049",
    "end": "3307059"
  },
  {
    "text": "when you are using them and tandem with one another for example I can picture",
    "start": "3307059",
    "end": "3312640"
  },
  {
    "text": "plenty of scenarios where rate limiting and retry strategies could go horribly",
    "start": "3312640",
    "end": "3319900"
  },
  {
    "text": "wrong if you're blasting out your HTTP stack and you say don't use more than",
    "start": "3319900",
    "end": "3326770"
  },
  {
    "text": "two megabytes and then it's going to fail and then it's gonna retry and it's just going to get worse and worse you",
    "start": "3326770",
    "end": "3332410"
  },
  {
    "text": "should use these things judiciously where they are the right tool for your job then we talked about the high-level",
    "start": "3332410",
    "end": "3339559"
  },
  {
    "text": "api's overview the things that we are offering so send us pull requests we've",
    "start": "3339559",
    "end": "3346069"
  },
  {
    "text": "already gotten several pull requests and issues they have helped us tremendously to improve this library is still an",
    "start": "3346069",
    "end": "3352130"
  },
  {
    "text": "experimental phase so that we can get things ready for you guys to use in",
    "start": "3352130",
    "end": "3357349"
  },
  {
    "text": "production environments we have people using it in production already - great - great success so please when you notice",
    "start": "3357349",
    "end": "3364579"
  },
  {
    "text": "things or you find ways you want to improve it send us pull requests and",
    "start": "3364579",
    "end": "3370009"
  },
  {
    "text": "thank you and please remember to complete your evaluations if you have any questions Preston and I will be up",
    "start": "3370009",
    "end": "3376489"
  },
  {
    "text": "here at the stage after the presentation and you can also probably find us at any bar around here so thank you",
    "start": "3376489",
    "end": "3386200"
  }
]