[
  {
    "text": "- Welcome to \"Back to Basics.\"",
    "start": "6990",
    "end": "9269"
  },
  {
    "text": "In this episode, we will discuss\nusing elastic architectures",
    "start": "9270",
    "end": "13200"
  },
  {
    "text": "to help with better cost management",
    "start": "13200",
    "end": "15180"
  },
  {
    "text": "and adaptability to volatile conditions.",
    "start": "15180",
    "end": "18180"
  },
  {
    "text": "With the macroeconomic\nconditions constantly changing,",
    "start": "18180",
    "end": "21240"
  },
  {
    "text": "customers are looking\nto build architectures",
    "start": "21240",
    "end": "23520"
  },
  {
    "text": "that automatically adapt to demand",
    "start": "23520",
    "end": "25380"
  },
  {
    "text": "instead of spending engineering resources",
    "start": "25380",
    "end": "27869"
  },
  {
    "text": "to constantly re-architect workloads.",
    "start": "27870",
    "end": "30660"
  },
  {
    "text": "Let's assume you're an online\nfood delivery provider.",
    "start": "30660",
    "end": "33690"
  },
  {
    "text": "Your demand is likely very variable,",
    "start": "33690",
    "end": "36149"
  },
  {
    "text": "increasing during business hours",
    "start": "36150",
    "end": "37980"
  },
  {
    "text": "and tapering off during\nmornings and at night.",
    "start": "37980",
    "end": "40950"
  },
  {
    "text": "In addition, you may experience demand",
    "start": "40950",
    "end": "43470"
  },
  {
    "text": "through the roof during\nmajor sporting events.",
    "start": "43470",
    "end": "46500"
  },
  {
    "text": "Using an elastic architecture\nin cases like these",
    "start": "46500",
    "end": "49290"
  },
  {
    "text": "helps you keep up with the demand,",
    "start": "49290",
    "end": "50910"
  },
  {
    "text": "but at the same time\nprevent unnecessary spending",
    "start": "50910",
    "end": "54210"
  },
  {
    "text": "by having always on architectures.",
    "start": "54210",
    "end": "56940"
  },
  {
    "text": "Taking the example of the\nfood delivery company,",
    "start": "56940",
    "end": "59430"
  },
  {
    "text": "you'll likely see a high uptake in CPU",
    "start": "59430",
    "end": "62010"
  },
  {
    "text": "and network usage during\nlunch and dinner times,",
    "start": "62010",
    "end": "65189"
  },
  {
    "text": "and almost no usage for\nthe rest of the day.",
    "start": "65190",
    "end": "68160"
  },
  {
    "text": "Similarly, you may see a\nhuge uptake in database",
    "start": "68160",
    "end": "71730"
  },
  {
    "text": "and storage usage at night",
    "start": "71730",
    "end": "73470"
  },
  {
    "text": "when analytics and reporting\njobs are being run.",
    "start": "73470",
    "end": "76465"
  },
  {
    "text": "AWS provides many tools and services",
    "start": "76465",
    "end": "79020"
  },
  {
    "text": "to convert to an elastic architecture.",
    "start": "79020",
    "end": "81990"
  },
  {
    "text": "The first step is\nidentification of workloads",
    "start": "81990",
    "end": "84600"
  },
  {
    "text": "that are good candidates\nfor these patterns.",
    "start": "84600",
    "end": "87570"
  },
  {
    "text": "Using tools like AWS Cost Explorer,",
    "start": "87570",
    "end": "90181"
  },
  {
    "text": "AWS Trusted Advisor, and\nAWS Compute Optimizer,",
    "start": "90181",
    "end": "93750"
  },
  {
    "text": "you can get reports of underutilized",
    "start": "93750",
    "end": "95730"
  },
  {
    "text": "and overutilized workloads.",
    "start": "95730",
    "end": "98160"
  },
  {
    "text": "By leveraging Amazon CloudWatch metrics,",
    "start": "98160",
    "end": "100530"
  },
  {
    "text": "you'll be able to dive deeper",
    "start": "100530",
    "end": "102330"
  },
  {
    "text": "and understand the pattern of utilization.",
    "start": "102330",
    "end": "104673"
  },
  {
    "text": "Workloads, where you see a lot of variance",
    "start": "105510",
    "end": "107640"
  },
  {
    "text": "in usage patterns,",
    "start": "107640",
    "end": "108930"
  },
  {
    "text": "can be good candidates for this conversion",
    "start": "108930",
    "end": "111060"
  },
  {
    "text": "to elastic architectures.",
    "start": "111060",
    "end": "113009"
  },
  {
    "text": "This is not limited to\ncompute resources only,",
    "start": "113010",
    "end": "116160"
  },
  {
    "text": "but also applies to storage,\ndatabase, queues, et cetera.",
    "start": "116160",
    "end": "120390"
  },
  {
    "text": "You should not rely on one metric alone,",
    "start": "120390",
    "end": "122760"
  },
  {
    "text": "but rather do a holistic analysis\nusing the tools provided.",
    "start": "122760",
    "end": "126900"
  },
  {
    "text": "After identification of these workloads,",
    "start": "126900",
    "end": "128910"
  },
  {
    "text": "the next step is converting them",
    "start": "128910",
    "end": "130710"
  },
  {
    "text": "to take advantage of elasticity.",
    "start": "130710",
    "end": "133710"
  },
  {
    "text": "Let's look at the food\ndelivery service example",
    "start": "133710",
    "end": "136140"
  },
  {
    "text": "and understand how elastic architectures",
    "start": "136140",
    "end": "138540"
  },
  {
    "text": "can help with fluctuating usage.",
    "start": "138540",
    "end": "140790"
  },
  {
    "text": "If we were to use an elastic architecture,",
    "start": "140790",
    "end": "143340"
  },
  {
    "text": "order requests from users",
    "start": "143340",
    "end": "144959"
  },
  {
    "text": "would come into Amazon\nSimple Queue Service or SQS",
    "start": "144960",
    "end": "149070"
  },
  {
    "text": "where they can stay\nuntil the backend system",
    "start": "149070",
    "end": "151380"
  },
  {
    "text": "is ready to process them.",
    "start": "151380",
    "end": "153390"
  },
  {
    "text": "Using a reliable queue\nthat can massively scale",
    "start": "153390",
    "end": "156600"
  },
  {
    "text": "provides reliability",
    "start": "156600",
    "end": "157830"
  },
  {
    "text": "so that order requests do\nnot get lost or failed.",
    "start": "157830",
    "end": "161010"
  },
  {
    "text": "From there, instead of using",
    "start": "161010",
    "end": "162689"
  },
  {
    "text": "a long running compute instance,",
    "start": "162690",
    "end": "164670"
  },
  {
    "text": "the requests can be picked\nup by serverless tool",
    "start": "164670",
    "end": "167490"
  },
  {
    "text": "like AWS Lambda.",
    "start": "167490",
    "end": "169470"
  },
  {
    "text": "This is not to say that you\ncannot achieve elasticity",
    "start": "169470",
    "end": "172290"
  },
  {
    "text": "on EC2 machines.",
    "start": "172290",
    "end": "173939"
  },
  {
    "text": "You can still make EC2 machines elastic",
    "start": "173940",
    "end": "176430"
  },
  {
    "text": "by using autoscaling groups.",
    "start": "176430",
    "end": "178680"
  },
  {
    "text": "You're also able to\nuse other technologies,",
    "start": "178680",
    "end": "181290"
  },
  {
    "text": "like ECS and EKS.",
    "start": "181290",
    "end": "183659"
  },
  {
    "text": "In this case, the Lambdas\ncan also scale horizontally",
    "start": "183660",
    "end": "187200"
  },
  {
    "text": "and add more instances when load is high.",
    "start": "187200",
    "end": "189810"
  },
  {
    "text": "The request then goes to another Lambda,",
    "start": "189810",
    "end": "192390"
  },
  {
    "text": "which reaches out to an external\npayment processing system",
    "start": "192390",
    "end": "195840"
  },
  {
    "text": "and upon confirmation\nof successful payment,",
    "start": "195840",
    "end": "198239"
  },
  {
    "text": "it updates the DynamoDB database.",
    "start": "198240",
    "end": "200400"
  },
  {
    "text": "By using a serverless database",
    "start": "200400",
    "end": "202230"
  },
  {
    "text": "for key value and document entries,",
    "start": "202230",
    "end": "204569"
  },
  {
    "text": "you don't need to worry\nabout the load or scale",
    "start": "204570",
    "end": "207150"
  },
  {
    "text": "as it auto adjusts throughout the day",
    "start": "207150",
    "end": "209640"
  },
  {
    "text": "as your order volume varies.",
    "start": "209640",
    "end": "211440"
  },
  {
    "text": "Using a decoupled system ensures",
    "start": "211440",
    "end": "213780"
  },
  {
    "text": "that the first Lambda is not\nwaiting for long durations",
    "start": "213780",
    "end": "217410"
  },
  {
    "text": "in case the external\nsystems are taking long.",
    "start": "217410",
    "end": "220470"
  },
  {
    "text": "For storage of any static\nassets, like images or files,",
    "start": "220470",
    "end": "224730"
  },
  {
    "text": "you can use Amazon S3, an object store",
    "start": "224730",
    "end": "227909"
  },
  {
    "text": "with which you will never have to worry",
    "start": "227910",
    "end": "229710"
  },
  {
    "text": "about provisioning,\nmanaging, or scaling storage",
    "start": "229710",
    "end": "233160"
  },
  {
    "text": "as S3 is designed to grow with your needs",
    "start": "233160",
    "end": "235980"
  },
  {
    "text": "to a massive scale",
    "start": "235980",
    "end": "237540"
  },
  {
    "text": "and you only pay for the data\nyou're currently storing.",
    "start": "237540",
    "end": "240510"
  },
  {
    "text": "As opposed to provision drives",
    "start": "240510",
    "end": "242220"
  },
  {
    "text": "where you pay for the entire capacity",
    "start": "242220",
    "end": "244020"
  },
  {
    "text": "of the provision drive",
    "start": "244020",
    "end": "245490"
  },
  {
    "text": "even if you're not using that data.",
    "start": "245490",
    "end": "247470"
  },
  {
    "text": "Once the order is recorded,",
    "start": "247470",
    "end": "249090"
  },
  {
    "text": "the restaurant and the delivery carrier",
    "start": "249090",
    "end": "251129"
  },
  {
    "text": "are notified via Amazon Simple\nNotification Service or SNS.",
    "start": "251130",
    "end": "256079"
  },
  {
    "text": "In addition, an entry is added",
    "start": "256080",
    "end": "257939"
  },
  {
    "text": "into Amazon Redshift Serverless\nfor running analytics.",
    "start": "257940",
    "end": "261989"
  },
  {
    "text": "Replacing your data warehouse",
    "start": "261990",
    "end": "263639"
  },
  {
    "text": "with a serverless one,\nlike Redshift Serverless,",
    "start": "263640",
    "end": "266550"
  },
  {
    "text": "enables accounting for\nvarying patterns and requests.",
    "start": "266550",
    "end": "270419"
  },
  {
    "text": "Keep in mind that this may not always be",
    "start": "270420",
    "end": "272670"
  },
  {
    "text": "the most optimal route.",
    "start": "272670",
    "end": "274110"
  },
  {
    "text": "If your workload pattern is well-defined",
    "start": "274110",
    "end": "276629"
  },
  {
    "text": "and stays consistent for a defined period,",
    "start": "276630",
    "end": "279660"
  },
  {
    "text": "then other provisioning\nmethods may be better suited.",
    "start": "279660",
    "end": "282630"
  },
  {
    "text": "Workloads that never expect\nto scale down or stop,",
    "start": "282630",
    "end": "286350"
  },
  {
    "text": "like long running training models",
    "start": "286350",
    "end": "288390"
  },
  {
    "text": "or always on workloads",
    "start": "288390",
    "end": "290010"
  },
  {
    "text": "may not benefit from\nelastic architectures.",
    "start": "290010",
    "end": "292830"
  },
  {
    "text": "Other cost saving mechanisms,\nlike Savings Plan,",
    "start": "292830",
    "end": "296009"
  },
  {
    "text": "will benefit such cases\nto help reduce costs.",
    "start": "296010",
    "end": "299520"
  },
  {
    "text": "In the architecture we just looked at,",
    "start": "299520",
    "end": "301470"
  },
  {
    "text": "all the components are elastic",
    "start": "301470",
    "end": "303150"
  },
  {
    "text": "and will adjust their size\nautomatically according to load.",
    "start": "303150",
    "end": "307050"
  },
  {
    "text": "This will help run a reliable",
    "start": "307050",
    "end": "308819"
  },
  {
    "text": "yet very cost-efficient architecture.",
    "start": "308820",
    "end": "311670"
  },
  {
    "text": "In this episode, we discussed\nelastic architectures",
    "start": "311670",
    "end": "314610"
  },
  {
    "text": "and how you can leverage patterns",
    "start": "314610",
    "end": "316590"
  },
  {
    "text": "to design an architecture\nthat automatically scales.",
    "start": "316590",
    "end": "320010"
  },
  {
    "text": "By using the patterns discussed,",
    "start": "320010",
    "end": "321600"
  },
  {
    "text": "you'll also be able to save on cost",
    "start": "321600",
    "end": "323760"
  },
  {
    "text": "and deliver reliable\nservices to your customers.",
    "start": "323760",
    "end": "327000"
  },
  {
    "text": "For more information,",
    "start": "327000",
    "end": "328230"
  },
  {
    "text": "check out the links in\nthe description below.",
    "start": "328230",
    "end": "330600"
  },
  {
    "text": "Thanks for watching \"Back to Basics.\"",
    "start": "330600",
    "end": "332310"
  },
  {
    "text": "See you next time.",
    "start": "332310",
    "end": "334100"
  }
]