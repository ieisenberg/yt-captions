[
  {
    "text": "hello and welcome to the IAM policy evaluation video series my name is Matt Latrell and this is part one of the",
    "start": "1020",
    "end": "7980"
  },
  {
    "text": "series The IAM policy language explained let's jump right into it",
    "start": "7980",
    "end": "13679"
  },
  {
    "text": "what are we going to cover in this series the video you're watching now is the IEM policy language explained where",
    "start": "13679",
    "end": "20400"
  },
  {
    "text": "we'll go through each of the policy elements talk about do's and don'ts and explain how IEM performs IM policy",
    "start": "20400",
    "end": "27000"
  },
  {
    "text": "statement matching in part 2 we'll dive deeply into IEM policy conditions and look at some",
    "start": "27000",
    "end": "33600"
  },
  {
    "text": "helpful condition keys and explain what condition keys to use in various situations",
    "start": "33600",
    "end": "40079"
  },
  {
    "text": "part 3 will introduce and explain how I am policy evaluation chains work and",
    "start": "40079",
    "end": "45719"
  },
  {
    "text": "show how different IEM policies interact with each other we'll take a special look at the principal element of an IM",
    "start": "45719",
    "end": "51840"
  },
  {
    "text": "policy in part three and lastly part 4 will take all of the learnings from the previous videos and",
    "start": "51840",
    "end": "58500"
  },
  {
    "text": "walk through an authorization of an AWS request from start to finish",
    "start": "58500",
    "end": "64280"
  },
  {
    "text": "so what are we going to talk about today we'll start with an overview of the IEM policy language",
    "start": "64379",
    "end": "70860"
  },
  {
    "text": "we'll work through a statement matching exercise and then we'll take a look at each of",
    "start": "70860",
    "end": "76260"
  },
  {
    "text": "the elements of an IM policy statement in detail so let's get started",
    "start": "76260",
    "end": "82220"
  },
  {
    "text": "first we'll start with an overview of the policy language itself",
    "start": "82500",
    "end": "87140"
  },
  {
    "text": "here you can see an example of an IEM policy statement all IEM policies are made up of one or",
    "start": "87840",
    "end": "93299"
  },
  {
    "text": "more statements within a statement you have five primary elements the first of which is the effect element",
    "start": "93299",
    "end": "99299"
  },
  {
    "text": "which specifies whether the request should be allowed or denied when the statement is evaluated",
    "start": "99299",
    "end": "105720"
  },
  {
    "text": "the next element is the principal element the principal element specifies The Entity that has allowed or denied",
    "start": "105720",
    "end": "111540"
  },
  {
    "text": "access you'll see that sometimes the principal element is implied and not present in a policy statement",
    "start": "111540",
    "end": "118860"
  },
  {
    "text": "next we have the action element which specifies the action or actions that are allowed or denied",
    "start": "118860",
    "end": "126360"
  },
  {
    "text": "and we have the resource element the resource element specifies the resource or resources that are the target of the",
    "start": "126360",
    "end": "132900"
  },
  {
    "text": "action lastly we have the condition element the",
    "start": "132900",
    "end": "138180"
  },
  {
    "text": "condition element specifies the context under which access should be evaluated for example the example statement here",
    "start": "138180",
    "end": "145620"
  },
  {
    "text": "only applies if the value for the AWS secured transport condition key is equal",
    "start": "145620",
    "end": "151860"
  },
  {
    "text": "to true now we just looked at an IM policy",
    "start": "151860",
    "end": "158640"
  },
  {
    "text": "statement and so that IM policies can contain one or more statements there are also a number of different types of IEM",
    "start": "158640",
    "end": "165300"
  },
  {
    "text": "policies there are policies that are associated with an IEM role user or group and policies that are associated",
    "start": "165300",
    "end": "172260"
  },
  {
    "text": "with an AWS resource for policies that are attached Associated to a role user or group there",
    "start": "172260",
    "end": "178680"
  },
  {
    "text": "are identity-based policies which are policies that are directly attached to an IEM role user or group and continue",
    "start": "178680",
    "end": "184980"
  },
  {
    "text": "fine-grained permissions there are service control policies which are policies that typically contain",
    "start": "184980",
    "end": "191040"
  },
  {
    "text": "broad guard rails and are used with with AWS organizations across many accounts",
    "start": "191040",
    "end": "197280"
  },
  {
    "text": "and we have permission boundaries which are an advanced policy feature that is typically used to delegate the creation",
    "start": "197280",
    "end": "203700"
  },
  {
    "text": "of IAM entities we also have session policies session",
    "start": "203700",
    "end": "209099"
  },
  {
    "text": "policies are policies that are applied to an individual session when you assume an IM role",
    "start": "209099",
    "end": "215220"
  },
  {
    "text": "now as for policies that are associated with an AWS resource there are resource-based policies and",
    "start": "215220",
    "end": "221580"
  },
  {
    "text": "resource-based policies or policies that are attached directly to resources such as an S3 bucket or an sqsq",
    "start": "221580",
    "end": "228959"
  },
  {
    "text": "and then we have VPC endpoint policies and VPC endpoint policies are policies that can control who can use and access",
    "start": "228959",
    "end": "235739"
  },
  {
    "text": "a particular VPC endpoint",
    "start": "235739",
    "end": "239480"
  },
  {
    "text": "now all of these different policy types are made up of one or more policy statements let's expand a bit more on",
    "start": "241920",
    "end": "247620"
  },
  {
    "text": "policy statements shown here is a typical policy statement",
    "start": "247620",
    "end": "253739"
  },
  {
    "text": "that is associated with an identity starting with an optional statement ID",
    "start": "253739",
    "end": "259260"
  },
  {
    "text": "value that we did not touch on earlier and this is just a unique identifier for the statement and it's an optional value",
    "start": "259260",
    "end": "267000"
  },
  {
    "text": "then we have the effect the action and the resource these are the three",
    "start": "267000",
    "end": "272040"
  },
  {
    "text": "important and required elements of a policy statement associated with an identity",
    "start": "272040",
    "end": "278599"
  },
  {
    "text": "lastly we have the condition and the condition is optional and you use the condition like we mentioned earlier to",
    "start": "278759",
    "end": "284940"
  },
  {
    "text": "scope the policy down even further and say that this statement applies under these conditions",
    "start": "284940",
    "end": "290820"
  },
  {
    "text": "you might notice that there is no principal element here now that's because the principle is implied since",
    "start": "290820",
    "end": "296639"
  },
  {
    "text": "the policies themselves are associated with the principle",
    "start": "296639",
    "end": "301880"
  },
  {
    "text": "a resource-based policy has the same elements that an identity based policy has but with the added requirement of a",
    "start": "305160",
    "end": "311940"
  },
  {
    "text": "principal element that's because any principal can attempt to make a call to a resource and it's up",
    "start": "311940",
    "end": "318479"
  },
  {
    "text": "to you to use the principal element to Define who can or cannot access your resource",
    "start": "318479",
    "end": "323639"
  },
  {
    "text": "you'll also notice an asterisk by the required pointing to the resource element and this means that the resource",
    "start": "323639",
    "end": "331080"
  },
  {
    "text": "is implied and optional in some resource-based policies such as an IAM role trust policy in most cases you'll",
    "start": "331080",
    "end": "338759"
  },
  {
    "text": "see this resource element however now we've been focused on a single",
    "start": "338759",
    "end": "345479"
  },
  {
    "text": "policy statement up to this point and here's an example of an entire IM policy that has multiple statements you'll see",
    "start": "345479",
    "end": "352500"
  },
  {
    "text": "the addition of a version element and then a statement element which contains the array of your statements",
    "start": "352500",
    "end": "359520"
  },
  {
    "text": "so we've learned about policies we've learned about statements now how does IM take our policies and statements and",
    "start": "359520",
    "end": "366120"
  },
  {
    "text": "determine if access is allowed or denied and that's where an exercise that I'll",
    "start": "366120",
    "end": "371880"
  },
  {
    "text": "call statement matching comes in but first let's review a few important",
    "start": "371880",
    "end": "379139"
  },
  {
    "text": "rules of policy evaluation rule number one at least one statement",
    "start": "379139",
    "end": "384600"
  },
  {
    "text": "with an effect of allow must match for a request to be allowed and Rule Number Two a matching statement",
    "start": "384600",
    "end": "391620"
  },
  {
    "text": "with an effect of deny takes precedence over a matching statement with an effect of allow",
    "start": "391620",
    "end": "398160"
  },
  {
    "text": "it also does not matter what order you write your policy statements in if a statement with an effective deny matches",
    "start": "398160",
    "end": "404400"
  },
  {
    "text": "at any point the request is denied now what do I mean by matching",
    "start": "404400",
    "end": "411139"
  },
  {
    "text": "in order to go through the statement matching exercise we need to have something to match against this is where the authorization context",
    "start": "411600",
    "end": "418380"
  },
  {
    "text": "comes in when you make a request to AWS we build information about that request",
    "start": "418380",
    "end": "423419"
  },
  {
    "text": "and put that information in this big property bag this includes information about who is making the request the",
    "start": "423419",
    "end": "429840"
  },
  {
    "text": "target of the request and even some values that you supply like tag keys and tag values IM then Compares this",
    "start": "429840",
    "end": "437759"
  },
  {
    "text": "authorization context to your IM policies to determine which policy statements match and in the end if a",
    "start": "437759",
    "end": "444180"
  },
  {
    "text": "request is allowed or denied now don't get too caught up in the exact values that you'll see in these examples",
    "start": "444180",
    "end": "450000"
  },
  {
    "text": "of the authorization context they're just for illustrative purposes to help you understand how statement matching",
    "start": "450000",
    "end": "455520"
  },
  {
    "text": "works you should use the IEM documentation to determine what a particular value will look like in the",
    "start": "455520",
    "end": "461759"
  },
  {
    "text": "authorization context let's start with our first statement",
    "start": "461759",
    "end": "466860"
  },
  {
    "text": "matching example in this example John uses his IM role to",
    "start": "466860",
    "end": "472440"
  },
  {
    "text": "get the object my file.text from the bucket example bucket",
    "start": "472440",
    "end": "478319"
  },
  {
    "text": "the role making the request is John the resource targeted in the request is",
    "start": "478319",
    "end": "484500"
  },
  {
    "text": "the myfile.text object that lives in the example bucket bucket",
    "start": "484500",
    "end": "490800"
  },
  {
    "text": "and the action that John is attempting to perform is S3 git object",
    "start": "490800",
    "end": "496819"
  },
  {
    "text": "throughout these examples we assume we have this identity based policy attached to John's rule that has these four",
    "start": "498419",
    "end": "504960"
  },
  {
    "text": "statements now don't worry about memorizing these statements we'll show them individually throughout the matching exercise",
    "start": "504960",
    "end": "513138"
  },
  {
    "text": "here's an example of what the authorization context could look like for John's attempt to perform a git object request against an S3 object",
    "start": "516180",
    "end": "523500"
  },
  {
    "text": "named my file.txt you can see that the authorization context contains the action that John's",
    "start": "523500",
    "end": "529260"
  },
  {
    "text": "principal is attempting to perform the resource that John is attempting to perform that action against",
    "start": "529260",
    "end": "535920"
  },
  {
    "text": "and some additional context associated with the request an actual request would contain more",
    "start": "535920",
    "end": "542220"
  },
  {
    "text": "context than what you see here but we're keeping it simple for these examples you can also see that the request",
    "start": "542220",
    "end": "548459"
  },
  {
    "text": "includes a unique ID for John's IAM role in this principle field",
    "start": "548459",
    "end": "553860"
  },
  {
    "text": "to determine if the request is allowed or denied IEM will compare this authorization context against the policy",
    "start": "553860",
    "end": "560279"
  },
  {
    "text": "statements attached to John's role an IM will also compare the authorization contest against other policy types that",
    "start": "560279",
    "end": "566580"
  },
  {
    "text": "we mentioned earlier but for this exercise we're just focused on John's identity based policy",
    "start": "566580",
    "end": "573779"
  },
  {
    "text": "let's start by comparing the resource and the authorization context with the resource in our IM policy",
    "start": "573779",
    "end": "579480"
  },
  {
    "text": "the asterisk that you see in the resource is a wild card value that will match any text so we can see that the",
    "start": "579480",
    "end": "585180"
  },
  {
    "text": "resource is a match now let's look at the action we see that we have S3 git object in the",
    "start": "585180",
    "end": "591000"
  },
  {
    "text": "authorization context and we also have S3 get object listed in our IM policy",
    "start": "591000",
    "end": "596279"
  },
  {
    "text": "statement so the action matches as well because both the action and resource",
    "start": "596279",
    "end": "601500"
  },
  {
    "text": "match we can say that this statement matches so then we look at the effect of the statement and we see that it's an allow",
    "start": "601500",
    "end": "608279"
  },
  {
    "text": "now you can start to see how authorization is really just this elaborate string matching exercise",
    "start": "608279",
    "end": "613500"
  },
  {
    "text": "and you might think okay we found a matching statement we can stop this exercise now and the request is allowed",
    "start": "613500",
    "end": "618720"
  },
  {
    "text": "but remember that an explicit deny always takes precedence over an explicit",
    "start": "618720",
    "end": "624180"
  },
  {
    "text": "allow so we have to keep going let's look at the next statement in our",
    "start": "624180",
    "end": "630720"
  },
  {
    "text": "policy we look at the resource in the authorization context and the resource in the policy and those resources match",
    "start": "630720",
    "end": "637560"
  },
  {
    "text": "we look at the action and the action in the policy those don't match so we say that",
    "start": "637560",
    "end": "643920"
  },
  {
    "text": "statement two does not match let's look at the next statement",
    "start": "643920",
    "end": "649380"
  },
  {
    "text": "now statement three is interesting because we already have a statement that allows the request and we only need one",
    "start": "649380",
    "end": "655440"
  },
  {
    "text": "matching allow statement for the request to be allowed so for the purposes of this exercise we can just skip this",
    "start": "655440",
    "end": "661320"
  },
  {
    "text": "statement a statement 4 is the same way again",
    "start": "661320",
    "end": "667920"
  },
  {
    "text": "another allow statement and we don't need to look at it so we'll ignore statement four",
    "start": "667920",
    "end": "673639"
  },
  {
    "text": "so to determine the result of the evaluation we only need to look at the statements that match and for this",
    "start": "676019",
    "end": "681660"
  },
  {
    "text": "request only statement 1 matched our authorization context and the effect for statement 1 was allow so we can say that",
    "start": "681660",
    "end": "688920"
  },
  {
    "text": "the request is allowed",
    "start": "688920",
    "end": "692000"
  },
  {
    "text": "let's move on to request two in request 2 John uses his IM role to create the",
    "start": "694980",
    "end": "701160"
  },
  {
    "text": "bucket example bucket and again the rule making the request is John the resource targeted in the request is the example",
    "start": "701160",
    "end": "707459"
  },
  {
    "text": "bucket and the action performed by John is the S3 create bucket action",
    "start": "707459",
    "end": "714199"
  },
  {
    "text": "we again compare the authorization context to the request",
    "start": "714240",
    "end": "719300"
  },
  {
    "text": "and this is interesting it may look like the resource matches here but remember we're just comparing strings and the",
    "start": "719399",
    "end": "726060"
  },
  {
    "text": "resource in our authorization context does not have a forward slash that the resource in our policy has this forward",
    "start": "726060",
    "end": "732120"
  },
  {
    "text": "slash is used with an S3 bucket to reference an S3 object and not the bucket itself which is the resource in",
    "start": "732120",
    "end": "738720"
  },
  {
    "text": "our authorization context so we can say this statement does not match we move on to statement two",
    "start": "738720",
    "end": "745440"
  },
  {
    "text": "look at the resource the resource matches we look at the action the action does not match statement two",
    "start": "745440",
    "end": "751800"
  },
  {
    "text": "does not match let's look at statement three look at our resources the resources",
    "start": "751800",
    "end": "758220"
  },
  {
    "text": "match we look at our actions and again the action does not match so",
    "start": "758220",
    "end": "763380"
  },
  {
    "text": "statement three also does not match what about statement four we look at our resource",
    "start": "763380",
    "end": "770519"
  },
  {
    "text": "and in this case our resource does not match so statement four does not match",
    "start": "770519",
    "end": "776700"
  },
  {
    "text": "so if we look at our the evaluation results for this request we can see that none of our statements match so what",
    "start": "776700",
    "end": "782940"
  },
  {
    "text": "happens this means that request 2 is implicitly denied remember you must have at least",
    "start": "782940",
    "end": "790019"
  },
  {
    "text": "one matching allow statement for request to be allowed so because there was no matching allow",
    "start": "790019",
    "end": "795300"
  },
  {
    "text": "statements this request is denied",
    "start": "795300",
    "end": "799339"
  },
  {
    "text": "now let's take a look at one more example in this example John is again using his I am role to put the object my",
    "start": "801899",
    "end": "808200"
  },
  {
    "text": "file dot text to the bucket example bucket the rule making the request again is",
    "start": "808200",
    "end": "813480"
  },
  {
    "text": "John he's targeting that my file dot text object",
    "start": "813480",
    "end": "818579"
  },
  {
    "text": "and he's trying to perform S3 put object this time so let's go through our statement",
    "start": "818579",
    "end": "824220"
  },
  {
    "text": "matching exercise the resource matches here as well this time we have",
    "start": "824220",
    "end": "829920"
  },
  {
    "text": "the forward slash in the authorization context since we're referencing an S3 object",
    "start": "829920",
    "end": "835079"
  },
  {
    "text": "the action matches we look at the effect the effect is allow we have one matching allow",
    "start": "835079",
    "end": "841680"
  },
  {
    "text": "statement let's look at statement two the resource matches",
    "start": "841680",
    "end": "848220"
  },
  {
    "text": "the action and statement two matches this time we look at the effect we see that the effect is deny",
    "start": "848220",
    "end": "855660"
  },
  {
    "text": "so statement two matches with an effective deny now once we found a matching deny",
    "start": "855660",
    "end": "862079"
  },
  {
    "text": "statement we can actually ignore any other statement but similarly we once we find our",
    "start": "862079",
    "end": "867480"
  },
  {
    "text": "matching allow statement we can ignore allows as well so we'll ignore statement three we can",
    "start": "867480",
    "end": "873360"
  },
  {
    "text": "ignore statement four and we get back to our evaluation results table now we have two matching",
    "start": "873360",
    "end": "879899"
  },
  {
    "text": "statements this time one allow and one deny because a matching deny statement always overrides a matching allow",
    "start": "879899",
    "end": "885959"
  },
  {
    "text": "statement we say that request 3 is explicitly denied",
    "start": "885959",
    "end": "892519"
  },
  {
    "text": "so let's review our possible policy evaluation results we have explicit allow that we saw in",
    "start": "895800",
    "end": "901500"
  },
  {
    "text": "request one and that says that at least one matching allow statement and no matching deny",
    "start": "901500",
    "end": "907500"
  },
  {
    "text": "statements exist we have the implicit deny that we saw in request two and that means that there",
    "start": "907500",
    "end": "913860"
  },
  {
    "text": "are no matching allow or deny statements nothing matches we have explicit deny that we saw in",
    "start": "913860",
    "end": "920940"
  },
  {
    "text": "request three and that means at least one matching deny statement it doesn't matter how many matching allow",
    "start": "920940",
    "end": "926459"
  },
  {
    "text": "statements we also have but at least one matching denied statement means the result of the evaluation is an explicit",
    "start": "926459",
    "end": "932639"
  },
  {
    "text": "deny you'll notice that there is no implicit allow and that's because a request must",
    "start": "932639",
    "end": "937980"
  },
  {
    "text": "always have a matching allow statement to be allowed",
    "start": "937980",
    "end": "942379"
  },
  {
    "text": "so now that you have an understanding how a statement matching Works let's take a deeper look at each of the",
    "start": "946440",
    "end": "952260"
  },
  {
    "text": "elements in our policy statements starting with the simplest element the",
    "start": "952260",
    "end": "957720"
  },
  {
    "text": "effect element the effect element as we mentioned is a required element and it specifies with the result of the",
    "start": "957720",
    "end": "964139"
  },
  {
    "text": "matching statement is as we just saw now the reason it's the simplest element",
    "start": "964139",
    "end": "969660"
  },
  {
    "text": "in an IEM policy there are only two options it's either allow or deny and remember again that a matching deny",
    "start": "969660",
    "end": "976320"
  },
  {
    "text": "statement always overrides a matching allow statement",
    "start": "976320",
    "end": "981139"
  },
  {
    "text": "the action element is a required element that describes a specific action or a set of actions that will be allowed or",
    "start": "982579",
    "end": "988800"
  },
  {
    "text": "denied this example statement shows how the action element can include more than one action and this statement will match",
    "start": "988800",
    "end": "995519"
  },
  {
    "text": "if any of these actions match we would say that a set of actions is evaluated as a logical or",
    "start": "995519",
    "end": "1002980"
  },
  {
    "text": "now there are multiple representations allowed within an action element an action is divided into two parts the",
    "start": "1006079",
    "end": "1012139"
  },
  {
    "text": "service prefix on the left of the colon and the name of the action on the right of the colon the asterisk that you see",
    "start": "1012139",
    "end": "1018740"
  },
  {
    "text": "here and we'll see in other elements as well represents a wild card which means that it matches all characters this",
    "start": "1018740",
    "end": "1025520"
  },
  {
    "text": "allows you to match more than one action based on some sort of naming convention",
    "start": "1025520",
    "end": "1030740"
  },
  {
    "text": "so you can specify the action directly you can put the wild card at the end of",
    "start": "1030740",
    "end": "1036678"
  },
  {
    "text": "the action or you can put it at the beginning of the action you can even put a wild card on both",
    "start": "1036679",
    "end": "1043040"
  },
  {
    "text": "sides you can specify the Wild Card immediately after the colon as well",
    "start": "1043040",
    "end": "1048620"
  },
  {
    "text": "which represents all actions that belong to the specified service",
    "start": "1048620",
    "end": "1054100"
  },
  {
    "text": "or you can use a wild card by itself to specify all available actions take extra",
    "start": "1054200",
    "end": "1059480"
  },
  {
    "text": "care when using a wildcard by itself this should only be done for highly privileged principles",
    "start": "1059480",
    "end": "1067059"
  },
  {
    "text": "now what you can't do however is use a wild card for the name of the service",
    "start": "1067640",
    "end": "1073840"
  },
  {
    "text": "and both the service prefix and the action name are case insensitive in IM policies",
    "start": "1073940",
    "end": "1080919"
  },
  {
    "text": "the action element also is an inverse variant the not action element IM",
    "start": "1083600",
    "end": "1089000"
  },
  {
    "text": "policies must must either include an action element or a not action element a not action element allows you to build",
    "start": "1089000",
    "end": "1095840"
  },
  {
    "text": "an exception list by matching all actions except for the actions listed in the policy",
    "start": "1095840",
    "end": "1101480"
  },
  {
    "text": "not action elements should primarily be used with an effect of deny and this can be a good way to build an",
    "start": "1101480",
    "end": "1107960"
  },
  {
    "text": "allow list in something like a service control policy where you explicitly deny actions that do not appear in the not",
    "start": "1107960",
    "end": "1114620"
  },
  {
    "text": "action list the policy statement that you see here is an example of this with an effect of",
    "start": "1114620",
    "end": "1120679"
  },
  {
    "text": "deny that says that IM should deny any action that does not belong to the S3 or",
    "start": "1120679",
    "end": "1126679"
  },
  {
    "text": "ec2 service prefix so if we think about applying this policy to all possible services",
    "start": "1126679",
    "end": "1133100"
  },
  {
    "text": "our mental model might look a bit like this where the services in red are explicitly denied along with all the",
    "start": "1133100",
    "end": "1140120"
  },
  {
    "text": "other services that are not listed now we still haven't allowed any actions",
    "start": "1140120",
    "end": "1145220"
  },
  {
    "text": "with this policy statement but we we've explicitly denied every service except for ec2 and S3",
    "start": "1145220",
    "end": "1152059"
  },
  {
    "text": "so using not action with the deny is a common pattern in service control policies to build this allow list",
    "start": "1152059",
    "end": "1159460"
  },
  {
    "text": "now what about a not action within allow this policy might make sense at first glance maybe I'm an admin and I'm trying",
    "start": "1159860",
    "end": "1166460"
  },
  {
    "text": "to write a policy to stop someone from creating a role but what actually happens when you write a policy like",
    "start": "1166460",
    "end": "1172160"
  },
  {
    "text": "this in green are the actions that I've allowed when I write a policy like this",
    "start": "1172160",
    "end": "1178520"
  },
  {
    "text": "and you can see that you end up allowing every action except for the single IEM create role action and there are",
    "start": "1178520",
    "end": "1184760"
  },
  {
    "text": "thousands of actions so this is effectively an administrative policy",
    "start": "1184760",
    "end": "1189799"
  },
  {
    "text": "if you find yourself using not action with an allow statement think very carefully about what you're trying to do",
    "start": "1189799",
    "end": "1194960"
  },
  {
    "text": "most of the times there are better ways to write that policy",
    "start": "1194960",
    "end": "1200320"
  },
  {
    "text": "a quick note that not action is technically a logical nor which is what allows it to behave like an exception",
    "start": "1201620",
    "end": "1207799"
  },
  {
    "text": "list when you have multiple actions listed in the not action element",
    "start": "1207799",
    "end": "1212900"
  },
  {
    "text": "this means that this statement will match and deny any action that's not S3 git object nor S3 put object",
    "start": "1212900",
    "end": "1222460"
  },
  {
    "text": "now what important action I want to highlight is IAM pass role this action allows or denies the ability to give an",
    "start": "1224419",
    "end": "1232460"
  },
  {
    "text": "IEM role to an IEM server an AWS service the AWS service is then able to use that",
    "start": "1232460",
    "end": "1238820"
  },
  {
    "text": "IM role on your behalf apis that require I am pastoral usually",
    "start": "1238820",
    "end": "1244880"
  },
  {
    "text": "take a rule Arn as a parameter if you're not familiar and arn is a unique identifier for an AWS resource",
    "start": "1244880",
    "end": "1252380"
  },
  {
    "text": "now the rules that you're passing must be in the same account as the resources they are passed to",
    "start": "1252380",
    "end": "1258200"
  },
  {
    "text": "and you really need to take extra care to control who can pass what role to an AWS service",
    "start": "1258200",
    "end": "1265600"
  },
  {
    "text": "now here's an example of the Lambda create function API that takes a rule Arn as a parameter and therefore also",
    "start": "1266360",
    "end": "1273260"
  },
  {
    "text": "requires the IEM password permission that means that if I tried to create a Lambda function I would only be able to",
    "start": "1273260",
    "end": "1279559"
  },
  {
    "text": "create one that uses IEM rules that I have permission to pass by way of the IEM pass role action",
    "start": "1279559",
    "end": "1288100"
  },
  {
    "text": "another note on actions is that when you make a call to an AWS API that API will",
    "start": "1292039",
    "end": "1297799"
  },
  {
    "text": "authorize one or more IM actions these IM actions usually share the same name",
    "start": "1297799",
    "end": "1303080"
  },
  {
    "text": "as the API but there are some exceptions one example of an exception is the S3",
    "start": "1303080",
    "end": "1308840"
  },
  {
    "text": "copy object API which requires the S3 git object permission on the bucket you're copying from the S3 put object",
    "start": "1308840",
    "end": "1315980"
  },
  {
    "text": "permission on the bucket you're copying to as well as the S3 list bucket permission",
    "start": "1315980",
    "end": "1322340"
  },
  {
    "text": "there are also apis where the IAM action has a slightly different name than the API such as lambda's invoke API that",
    "start": "1322340",
    "end": "1329480"
  },
  {
    "text": "requires the Lambda invoke function IEM action so double check the documentation to",
    "start": "1329480",
    "end": "1336020"
  },
  {
    "text": "figure out the exact IM actions you need to call a particular API",
    "start": "1336020",
    "end": "1341740"
  },
  {
    "text": "moving on to the resource element the resource element is a required element that describes a resource or set",
    "start": "1343880",
    "end": "1349880"
  },
  {
    "text": "of resources against which the actions in the statement are allowed or denied",
    "start": "1349880",
    "end": "1356080"
  },
  {
    "text": "resources are specified using Amazon resource names or Arns which we said were unique identifiers for AWS",
    "start": "1356799",
    "end": "1363620"
  },
  {
    "text": "resources take a look at some example Arns on the slide notice that not all",
    "start": "1363620",
    "end": "1368840"
  },
  {
    "text": "resource resources include every part of the Arn an S3 bucket for example does",
    "start": "1368840",
    "end": "1374120"
  },
  {
    "text": "not include an account ID or a region an IM role does not include a region",
    "start": "1374120",
    "end": "1379580"
  },
  {
    "text": "so once again you should reference the documentation to figure out what the proper Arn format is for the resource",
    "start": "1379580",
    "end": "1385580"
  },
  {
    "text": "that you're referencing in your IM policy",
    "start": "1385580",
    "end": "1389679"
  },
  {
    "text": "you can also use wildcards for the resource element the first example here would match any",
    "start": "1392120",
    "end": "1397400"
  },
  {
    "text": "resource the second example would match an ec2 instance in any account in any region",
    "start": "1397400",
    "end": "1405500"
  },
  {
    "text": "but only in the AWS standard partition and the third example would match and an",
    "start": "1405500",
    "end": "1411620"
  },
  {
    "text": "ec2 instance in the all ones accounts but in any region in that AWS standard",
    "start": "1411620",
    "end": "1416720"
  },
  {
    "text": "partition as well and the last example here matches a very",
    "start": "1416720",
    "end": "1421820"
  },
  {
    "text": "specific IEM role and only that I am role",
    "start": "1421820",
    "end": "1426940"
  },
  {
    "text": "as we saw with the action element if a statement has multiple resources they are evaluated as a logical or this",
    "start": "1429140",
    "end": "1436159"
  },
  {
    "text": "statement allows the IM get role action on role one or rule 2.",
    "start": "1436159",
    "end": "1443020"
  },
  {
    "text": "also like we saw with the action element the resource element has an inverse element that can be used in its place",
    "start": "1445120",
    "end": "1451820"
  },
  {
    "text": "you can also think of the not resource element as an exception list again this statement reads deny S3 get object and",
    "start": "1451820",
    "end": "1459980"
  },
  {
    "text": "put object to all resources except the objects in example bucket",
    "start": "1459980",
    "end": "1466100"
  },
  {
    "text": "like not action not resources typically used with a statement that has an effective deny",
    "start": "1466100",
    "end": "1472840"
  },
  {
    "text": "not resource also evaluates as a logical nor when there is more than one resource in the not resource element this",
    "start": "1474559",
    "end": "1481520"
  },
  {
    "text": "statement denies S3 get object action as long as the resource is not example",
    "start": "1481520",
    "end": "1486980"
  },
  {
    "text": "bucket 1 nor example bucket 2.",
    "start": "1486980",
    "end": "1491500"
  },
  {
    "text": "and once again with that resource this time be very careful about using the not resource element with an allow effect",
    "start": "1494360",
    "end": "1501500"
  },
  {
    "text": "using not resources and allow effect will grant access to every resource except the resource specified in the not",
    "start": "1501500",
    "end": "1508100"
  },
  {
    "text": "resource element",
    "start": "1508100",
    "end": "1510820"
  },
  {
    "text": "onto the condition element the condition element is an optional element that lets you specify when a",
    "start": "1517280",
    "end": "1524000"
  },
  {
    "text": "policy statement is in effect this policy statement allows an S3 get",
    "start": "1524000",
    "end": "1529039"
  },
  {
    "text": "object request to the example bucket resource but only",
    "start": "1529039",
    "end": "1534260"
  },
  {
    "text": "if the request is made using TLS adding that but only if to the end can",
    "start": "1534260",
    "end": "1539960"
  },
  {
    "text": "be a helpful way to read policy statements that have conditions",
    "start": "1539960",
    "end": "1544720"
  },
  {
    "text": "let's start with the definitions of different elements that make up a condition the operator defines what comparison IAM",
    "start": "1546020",
    "end": "1553700"
  },
  {
    "text": "should perform to attempt to match the values in your policy with the values in the authorization context",
    "start": "1553700",
    "end": "1560600"
  },
  {
    "text": "the key defines which value in the authorization context IM should look at for the comparison",
    "start": "1560600",
    "end": "1567980"
  },
  {
    "text": "and the values are either a single value or a set of values that must match the value in the authorization context for a",
    "start": "1567980",
    "end": "1574880"
  },
  {
    "text": "statement to match there are a number of different",
    "start": "1574880",
    "end": "1580700"
  },
  {
    "text": "condition operators and which condition operator to use depends on the type that the value has in the authorization",
    "start": "1580700",
    "end": "1586760"
  },
  {
    "text": "context you can also use different suffixes on an operator such as equals and like to",
    "start": "1586760",
    "end": "1592760"
  },
  {
    "text": "do exact matching and wildcard matching respectively you can also add not to many of these",
    "start": "1592760",
    "end": "1598700"
  },
  {
    "text": "operators to invert them we will dive deeper into many of these operators later in this series",
    "start": "1598700",
    "end": "1604640"
  },
  {
    "text": "there are also what are called multi-valued qualifiers these qualifiers can be combined with condition operators",
    "start": "1604640",
    "end": "1610940"
  },
  {
    "text": "to make comparisons against keys in the authorization context that have multiple values",
    "start": "1610940",
    "end": "1616640"
  },
  {
    "text": "most condition keys can only ever have a single value in the authorization context and most condition keys are not",
    "start": "1616640",
    "end": "1623539"
  },
  {
    "text": "multi-valued you should only use multi-valid multi-valued qualifiers for those",
    "start": "1623539",
    "end": "1629360"
  },
  {
    "text": "condition keys that can have multiple values in the authorization context",
    "start": "1629360",
    "end": "1635559"
  },
  {
    "text": "so how do we figure out which condition keys can be used with which IAM actions and resources that's where the service authorization",
    "start": "1637100",
    "end": "1643820"
  },
  {
    "text": "reference comes in the service authorization reference is an IEM documentation page that documents",
    "start": "1643820",
    "end": "1650299"
  },
  {
    "text": "a particular Services authorization design I would strongly suggest bookmarking this page if you find",
    "start": "1650299",
    "end": "1656179"
  },
  {
    "text": "yourself writing IIM policies there's also a section on each page with",
    "start": "1656179",
    "end": "1663320"
  },
  {
    "text": "which lists what we call service specific condition keys and their types the types here tell you which operator",
    "start": "1663320",
    "end": "1669740"
  },
  {
    "text": "you should use to perform the comparison a condition key that has a type that starts with array of indicates that the",
    "start": "1669740",
    "end": "1676580"
  },
  {
    "text": "condition key can have multiple values in the authorization context and that you should use a multi-valued qualifier",
    "start": "1676580",
    "end": "1682940"
  },
  {
    "text": "to compare it so either for all values or for any value there are also condition keys that work",
    "start": "1682940",
    "end": "1688880"
  },
  {
    "text": "across all AWS services that start with with AWS colon these condition keys and their types are",
    "start": "1688880",
    "end": "1695779"
  },
  {
    "text": "documented outside of the service authorization reference in the IEM documentation",
    "start": "1695779",
    "end": "1702279"
  },
  {
    "text": "now that you've seen condition operators and their types let's take another look at the authorization context",
    "start": "1704059",
    "end": "1709700"
  },
  {
    "text": "you can see that we've got a few different types of context values here AWS principle org ID is a string value",
    "start": "1709700",
    "end": "1717200"
  },
  {
    "text": "and you should use a string operators to match this value AWS principle Arn is an Arn and you",
    "start": "1717200",
    "end": "1724820"
  },
  {
    "text": "should use the Arn operators an AWS secure transport is a Boolean and",
    "start": "1724820",
    "end": "1730820"
  },
  {
    "text": "you should use the Boolean operators in blue I've highlighted all of the",
    "start": "1730820",
    "end": "1736159"
  },
  {
    "text": "single valued keys in this request remember that a single valued key is a key that can only ever have zero or one",
    "start": "1736159",
    "end": "1742940"
  },
  {
    "text": "value in the authorization context in Orange you can see that the only",
    "start": "1742940",
    "end": "1748840"
  },
  {
    "text": "multi-valued key in this request is AWS tag keys this is the only key in this",
    "start": "1748840",
    "end": "1754640"
  },
  {
    "text": "particular request that may have multiple values this means that this is the only key",
    "start": "1754640",
    "end": "1760580"
  },
  {
    "text": "that you should use the multi-valued qualifiers for any value and for all values to match in this particular",
    "start": "1760580",
    "end": "1766880"
  },
  {
    "text": "authorization context let's switch gears slightly and look at",
    "start": "1766880",
    "end": "1773179"
  },
  {
    "text": "the Boolean logic of how condition keys are evaluated in more depth now these are just examples designed to",
    "start": "1773179",
    "end": "1779000"
  },
  {
    "text": "get a point across don't get too caught up in the actual condition keys and values that I'm using here these aren't",
    "start": "1779000",
    "end": "1785000"
  },
  {
    "text": "intended to be example policies that you should use in your environment the focus here is really just on the Boolean logic",
    "start": "1785000",
    "end": "1790940"
  },
  {
    "text": "okay so first off values for a condition key are ordered",
    "start": "1790940",
    "end": "1797000"
  },
  {
    "text": "this policy allows the creation of an IM role if the tag in the request with a",
    "start": "1797000",
    "end": "1802159"
  },
  {
    "text": "key of team has a value of Team a or Team B or team C",
    "start": "1802159",
    "end": "1808760"
  },
  {
    "text": "so values of a condition key are evaluated as a logical or",
    "start": "1808760",
    "end": "1814299"
  },
  {
    "text": "values for for a condition key that include a not comparison are Nord the",
    "start": "1815480",
    "end": "1821059"
  },
  {
    "text": "policy denies the creation of an IM role if the tag in the request with key team does not have a value of Team a nor Team",
    "start": "1821059",
    "end": "1829340"
  },
  {
    "text": "B nor team C so this is your way to write an exception list with a deny statement",
    "start": "1829340",
    "end": "1836620"
  },
  {
    "text": "now all condition keys and a requests are logically anded together this is true even if the operators have",
    "start": "1837620",
    "end": "1844100"
  },
  {
    "text": "different names as shown in this example with string not equals and string not like each condition key must evaluate to True",
    "start": "1844100",
    "end": "1851120"
  },
  {
    "text": "independently for the policy statement to match this policy allows the creation of an S3",
    "start": "1851120",
    "end": "1856279"
  },
  {
    "text": "bucket if the principle belongs to the all ones account and the request originates from VPC abc123 and the value",
    "start": "1856279",
    "end": "1865460"
  },
  {
    "text": "of the tag on the principal with key of Team starts with team",
    "start": "1865460",
    "end": "1871240"
  },
  {
    "text": "again don't get too caught up with the actual condition values here focus on the Boolean logic",
    "start": "1872360",
    "end": "1879278"
  },
  {
    "text": "condition keys that contain a knot are still ended together though it can be tricky to follow some",
    "start": "1880340",
    "end": "1885440"
  },
  {
    "text": "of the double negatives without a pen and paper at times this policy denies the creation of an S3",
    "start": "1885440",
    "end": "1890600"
  },
  {
    "text": "bucket if the principle does not belong to the all one's accounts and the request does not originate from VPC",
    "start": "1890600",
    "end": "1897279"
  },
  {
    "text": "abc123 and the tag on the principle does not start with team",
    "start": "1897279",
    "end": "1903460"
  },
  {
    "text": "we'll go much deeper into the condition element later in this series but for now hopefully this was a helpful",
    "start": "1904520",
    "end": "1910399"
  },
  {
    "text": "introduction lastly let's briefly touch on the",
    "start": "1910399",
    "end": "1915980"
  },
  {
    "text": "principal element again we'll go much deeper to the principal element later in this series as well",
    "start": "1915980",
    "end": "1921679"
  },
  {
    "text": "the principal element is a policy element that's only available on resource-based policies and VPC endpoint",
    "start": "1921679",
    "end": "1927440"
  },
  {
    "text": "policies it defines what principles can access the resource there are four types",
    "start": "1927440",
    "end": "1933200"
  },
  {
    "text": "four possible types for the principal element AWS Federated service and",
    "start": "1933200",
    "end": "1939320"
  },
  {
    "text": "canonical user only a few use cases in AWS still require the use of canonical users so",
    "start": "1939320",
    "end": "1944720"
  },
  {
    "text": "we're not going to talk much about it you use the AWS principle type to",
    "start": "1944720",
    "end": "1950960"
  },
  {
    "text": "reference other accounts roles and users and session principles this is the most common principle type and the one you",
    "start": "1950960",
    "end": "1957380"
  },
  {
    "text": "will use to Grant access directly to AWS principles that belong to you or even Grant cross-account access to other",
    "start": "1957380",
    "end": "1963200"
  },
  {
    "text": "trusted accounts and trusted principles now note that these two representations",
    "start": "1963200",
    "end": "1971360"
  },
  {
    "text": "of the account are exactly the same they are just two different ways to write the",
    "start": "1971360",
    "end": "1976460"
  },
  {
    "text": "principal element in the account or sorry write the account in the principal element",
    "start": "1976460",
    "end": "1983320"
  },
  {
    "text": "the service principle type is used on a resource to allow access to an AWS service when you write a policy that",
    "start": "1985399",
    "end": "1991760"
  },
  {
    "text": "uses the service principle type you should usually include a condition key that specifies either the source Arn or",
    "start": "1991760",
    "end": "1997940"
  },
  {
    "text": "the source account the requests originated from this is to prevent against a confused",
    "start": "1997940",
    "end": "2003100"
  },
  {
    "text": "Deputy problem which will go into detail more about later in this series",
    "start": "2003100",
    "end": "2009120"
  },
  {
    "text": "and lastly Federated principles are only used in IM rule trust policies and they",
    "start": "2012640",
    "end": "2018220"
  },
  {
    "text": "are used to Grant access to a web identity session principle from a web identity provider or a saml session",
    "start": "2018220",
    "end": "2024760"
  },
  {
    "text": "principle from a sample provider the policy shown here provides access to users Federated with the saml provider",
    "start": "2024760",
    "end": "2031360"
  },
  {
    "text": "listed in the principal element you'll want to take a look at the documentation to determine what condition keys to",
    "start": "2031360",
    "end": "2037059"
  },
  {
    "text": "include when creating an IM rule trust policy using a Federated principle because it can be use case dependent",
    "start": "2037059",
    "end": "2045179"
  },
  {
    "text": "now a wildcard by itself in the principal element is a legal value but be very very careful before you do this",
    "start": "2048339",
    "end": "2055679"
  },
  {
    "text": "policy makes example bucket accessible to anyone on the internet not just your",
    "start": "2055679",
    "end": "2061240"
  },
  {
    "text": "principles there are few cases that require a wild card in the principal element when used",
    "start": "2061240",
    "end": "2066520"
  },
  {
    "text": "with an allow effect using a wildcard with a deny effect however is safe and is usually a good",
    "start": "2066520",
    "end": "2073240"
  },
  {
    "text": "idea but be very careful using a wild card in the principal element with an allow",
    "start": "2073240",
    "end": "2079419"
  },
  {
    "text": "effect so you might think okay I'll add a",
    "start": "2079419",
    "end": "2084878"
  },
  {
    "text": "condition to limit access to only principles with a certain tag and I'm good the problem here is that this policy",
    "start": "2084879",
    "end": "2091240"
  },
  {
    "text": "still applies to anyone not just your principles anyone can add the same tag to their",
    "start": "2091240",
    "end": "2096878"
  },
  {
    "text": "principal and still access your bucket don't do this we'll touch on a few valid use cases for",
    "start": "2096879",
    "end": "2103060"
  },
  {
    "text": "using a wildcard in the principal element with an effect of an allow when we do the Deep dive on principles later",
    "start": "2103060",
    "end": "2108280"
  },
  {
    "text": "in the series but for now the takeaway is that you should be very careful with the wildcard value in the principal",
    "start": "2108280",
    "end": "2114640"
  },
  {
    "text": "element when used with an effective allow",
    "start": "2114640",
    "end": "2118800"
  },
  {
    "text": "now what happens if I just try to wildcard a portion of the principal element yeah this doesn't work this is not valid syntax the only wild card that",
    "start": "2121180",
    "end": "2128920"
  },
  {
    "text": "is supported in the principal element is a wild card by itself",
    "start": "2128920",
    "end": "2133740"
  },
  {
    "text": "when you need to use a wildcard to reference a group of roles or a particular rule naming convention you",
    "start": "2134980",
    "end": "2140200"
  },
  {
    "text": "can use the AWS principal Arn condition key instead take a look and note that this policy",
    "start": "2140200",
    "end": "2145960"
  },
  {
    "text": "also has a deny effect which is how I would recommend you use this pattern there are better ways to do this with an",
    "start": "2145960",
    "end": "2152680"
  },
  {
    "text": "allow effect but again we'll cover in the principles series",
    "start": "2152680",
    "end": "2157320"
  },
  {
    "text": "like the action and resource element there's also an inverted element for the principal element the not principle",
    "start": "2161980",
    "end": "2167920"
  },
  {
    "text": "element the different difference with a not principle element is that there's not really a great use case for it today",
    "start": "2167920",
    "end": "2174060"
  },
  {
    "text": "I would generally recommend avoiding the not principle element altogether the policy statement that you see here",
    "start": "2174060",
    "end": "2180700"
  },
  {
    "text": "seems to make sense I want to deny every principle except for my role that's the",
    "start": "2180700",
    "end": "2185859"
  },
  {
    "text": "only one that's the only principle that should have access to this bucket but this doesn't quite work as you'd expect",
    "start": "2185859",
    "end": "2191020"
  },
  {
    "text": "for reasons that are out of scope for this presentation that we'll cover in the principal Deep dive",
    "start": "2191020",
    "end": "2197280"
  },
  {
    "text": "for now just know that the recommended way to write that kind of policy is again using the AWS principle Arn",
    "start": "2197980",
    "end": "2204280"
  },
  {
    "text": "condition key this policy that you see here will work as you'd expect and deny all principles",
    "start": "2204280",
    "end": "2210579"
  },
  {
    "text": "except for my role",
    "start": "2210579",
    "end": "2214500"
  },
  {
    "text": "you should not use not principle with an effective allow this statement says that it allows all",
    "start": "2218140",
    "end": "2223960"
  },
  {
    "text": "principles except for my role this includes principles outside of your AWS account that do not belong to you this",
    "start": "2223960",
    "end": "2230680"
  },
  {
    "text": "is effectively the same thing as using a wild card with an allow in the principal element this will allow Anonymous access",
    "start": "2230680",
    "end": "2237520"
  },
  {
    "text": "to your resource you should avoid writing statements like this altogether",
    "start": "2237520",
    "end": "2243240"
  },
  {
    "text": "so we went through a lot here today we learned about each of the individual elements of an IM policy",
    "start": "2246280",
    "end": "2252700"
  },
  {
    "text": "we learned how IM does statement matching between the authorization context and your IM policies",
    "start": "2252700",
    "end": "2258820"
  },
  {
    "text": "we also learned some basic rules of policy evaluation like explicits and eyes taking precedence over an explicit",
    "start": "2258820",
    "end": "2265540"
  },
  {
    "text": "allow and we scratch the surface of the principal element and we learned that the AWS principal Arn condition key has",
    "start": "2265540",
    "end": "2271960"
  },
  {
    "text": "a lot of uses and is a good alternative to not principle",
    "start": "2271960",
    "end": "2276960"
  },
  {
    "text": "so what's next in part two we'll go deep on various policy conditions and talk",
    "start": "2277599",
    "end": "2282640"
  },
  {
    "text": "about how and when to use them part three is our Deep dive on the principal element where we'll also",
    "start": "2282640",
    "end": "2288280"
  },
  {
    "text": "introduce policy evaluation chains which will help you understand how the different IM policies factor into the",
    "start": "2288280",
    "end": "2294339"
  },
  {
    "text": "authorization result and then part four we will put everything together and we'll walk through an authorization",
    "start": "2294339",
    "end": "2300400"
  },
  {
    "text": "request from start to finish and with that thank you and I hope to",
    "start": "2300400",
    "end": "2305500"
  },
  {
    "text": "see you in the next video",
    "start": "2305500",
    "end": "2308280"
  }
]