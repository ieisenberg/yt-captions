[
  {
    "text": "[Music]",
    "start": "410",
    "end": "2720"
  },
  {
    "text": "hi I'm massive Khan I'm a Solutions",
    "start": "7370",
    "end": "10620"
  },
  {
    "text": "Architect at Amazon Web Services and",
    "start": "10620",
    "end": "12539"
  },
  {
    "text": "today I'll walk you through setting up",
    "start": "12539",
    "end": "14610"
  },
  {
    "text": "your first CI CD pipeline using Amazon",
    "start": "14610",
    "end": "17400"
  },
  {
    "text": "SES Amazon VCR and AWS developer tools",
    "start": "17400",
    "end": "21109"
  },
  {
    "text": "Amazon ec2 container service is a highly",
    "start": "21109",
    "end": "24240"
  },
  {
    "text": "scaleable high performance management",
    "start": "24240",
    "end": "26250"
  },
  {
    "text": "service that supports containers and",
    "start": "26250",
    "end": "28350"
  },
  {
    "text": "allows you to easily run applications on",
    "start": "28350",
    "end": "30990"
  },
  {
    "text": "a managed cluster of Amazon ec2",
    "start": "30990",
    "end": "32910"
  },
  {
    "text": "instances Amazon ECS eliminates the need",
    "start": "32910",
    "end": "36300"
  },
  {
    "text": "for you to install operate and scale",
    "start": "36300",
    "end": "38910"
  },
  {
    "text": "your own cluster management",
    "start": "38910",
    "end": "40230"
  },
  {
    "text": "infrastructure Amazon ec2 container",
    "start": "40230",
    "end": "42989"
  },
  {
    "text": "registry is a fully managed container",
    "start": "42989",
    "end": "45690"
  },
  {
    "text": "registry that makes it easy for",
    "start": "45690",
    "end": "47340"
  },
  {
    "text": "developers to store manage and deploy",
    "start": "47340",
    "end": "49680"
  },
  {
    "text": "docker container images Amazon ECR is",
    "start": "49680",
    "end": "52590"
  },
  {
    "text": "integrated with simplifying your",
    "start": "52590",
    "end": "54600"
  },
  {
    "text": "development to production workflow the",
    "start": "54600",
    "end": "56579"
  },
  {
    "text": "AWS developer tools is a set of services",
    "start": "56579",
    "end": "59100"
  },
  {
    "text": "designed to enable developers and IT",
    "start": "59100",
    "end": "61770"
  },
  {
    "text": "operations for professionals practicing",
    "start": "61770",
    "end": "64320"
  },
  {
    "text": "to rapidly and safely deliver software",
    "start": "64320",
    "end": "66469"
  },
  {
    "text": "together these services help you",
    "start": "66469",
    "end": "69119"
  },
  {
    "text": "securely store and version control your",
    "start": "69119",
    "end": "71790"
  },
  {
    "text": "applications source code and",
    "start": "71790",
    "end": "73460"
  },
  {
    "text": "automatically build test and deploy your",
    "start": "73460",
    "end": "76440"
  },
  {
    "text": "application to AWS or your on-premise",
    "start": "76440",
    "end": "79260"
  },
  {
    "text": "environment you can use AWS code",
    "start": "79260",
    "end": "82500"
  },
  {
    "text": "pipeline to orchestrate an end-to-end",
    "start": "82500",
    "end": "84780"
  },
  {
    "text": "software release workflow using these",
    "start": "84780",
    "end": "87090"
  },
  {
    "text": "services and third-party tools or",
    "start": "87090",
    "end": "89400"
  },
  {
    "text": "integrate each service independently",
    "start": "89400",
    "end": "91979"
  },
  {
    "text": "with your own existing tools in this",
    "start": "91979",
    "end": "94470"
  },
  {
    "text": "example we will demonstrate how to",
    "start": "94470",
    "end": "96210"
  },
  {
    "text": "provision and ECS cluster build the",
    "start": "96210",
    "end": "98790"
  },
  {
    "text": "underlying infrastructure such as ECS",
    "start": "98790",
    "end": "100920"
  },
  {
    "text": "compute nodes pcr VPC will also",
    "start": "100920",
    "end": "104400"
  },
  {
    "text": "demonstrate how to build a pipeline",
    "start": "104400",
    "end": "105750"
  },
  {
    "text": "using cloud formation code pipeline to",
    "start": "105750",
    "end": "108750"
  },
  {
    "text": "control the development workflow code",
    "start": "108750",
    "end": "110250"
  },
  {
    "text": "built to build an image and deploy the",
    "start": "110250",
    "end": "112020"
  },
  {
    "text": "image to ECS we log into AWS console at",
    "start": "112020",
    "end": "115530"
  },
  {
    "text": "console dot aws.amazon.com and go to",
    "start": "115530",
    "end": "118920"
  },
  {
    "text": "cloud formation and enter the master",
    "start": "118920",
    "end": "120780"
  },
  {
    "text": "template URL we launched a stack from",
    "start": "120780",
    "end": "124229"
  },
  {
    "text": "the reference architecture the reference",
    "start": "124229",
    "end": "126030"
  },
  {
    "text": "architecture is available at github in",
    "start": "126030",
    "end": "128970"
  },
  {
    "text": "this reference architecture we are using",
    "start": "128970",
    "end": "130828"
  },
  {
    "text": "multiple stacks to provision the VPC VCS",
    "start": "130829",
    "end": "133650"
  },
  {
    "text": "infrastructure and the build pipeline so",
    "start": "133650",
    "end": "136469"
  },
  {
    "text": "let's launch the stack let's give the",
    "start": "136469",
    "end": "138900"
  },
  {
    "text": "stack a name I'm going to",
    "start": "138900",
    "end": "140260"
  },
  {
    "text": "MX net vest I'm gonna click next again",
    "start": "140260",
    "end": "143140"
  },
  {
    "text": "and give my CloudFormation permissions",
    "start": "143140",
    "end": "145689"
  },
  {
    "text": "to create iron rolls with custom names",
    "start": "145689",
    "end": "147730"
  },
  {
    "text": "and I'm gonna say create let's switch",
    "start": "147730",
    "end": "150909"
  },
  {
    "text": "over to US east one we see four stacks",
    "start": "150909",
    "end": "153730"
  },
  {
    "text": "the first tag the MX net API is the",
    "start": "153730",
    "end": "156610"
  },
  {
    "text": "master stack which coordinates the other",
    "start": "156610",
    "end": "158620"
  },
  {
    "text": "stacks are they as they get built the",
    "start": "158620",
    "end": "161019"
  },
  {
    "text": "build stack builds the build pipeline",
    "start": "161019",
    "end": "163030"
  },
  {
    "text": "which is deploying code pipeline code",
    "start": "163030",
    "end": "165099"
  },
  {
    "text": "build and other services VPC builds the",
    "start": "165099",
    "end": "168069"
  },
  {
    "text": "underlying EPC infrastructure and the",
    "start": "168069",
    "end": "170170"
  },
  {
    "text": "easiest stack builds the ECS artifacts",
    "start": "170170",
    "end": "172299"
  },
  {
    "text": "like services tasks and the cluster",
    "start": "172299",
    "end": "174790"
  },
  {
    "text": "itself the VPC stack has provisioned VPC",
    "start": "174790",
    "end": "177430"
  },
  {
    "text": "and subnets the build stack has",
    "start": "177430",
    "end": "179200"
  },
  {
    "text": "provisioned a pipeline using cloud",
    "start": "179200",
    "end": "180730"
  },
  {
    "text": "formation use code pipeline to control",
    "start": "180730",
    "end": "182829"
  },
  {
    "text": "development workflow code build to build",
    "start": "182829",
    "end": "184480"
  },
  {
    "text": "an image and deploy the image to ECS so",
    "start": "184480",
    "end": "187690"
  },
  {
    "text": "let's switch over to the code pipeline",
    "start": "187690",
    "end": "189280"
  },
  {
    "text": "and check the workflow the cloud",
    "start": "189280",
    "end": "191319"
  },
  {
    "text": "formation stack from the build pipeline",
    "start": "191319",
    "end": "193420"
  },
  {
    "text": "created us are built pipeline in coal",
    "start": "193420",
    "end": "195730"
  },
  {
    "text": "pipeline let's look deeper into the coal",
    "start": "195730",
    "end": "198340"
  },
  {
    "text": "pipeline that was built we have two",
    "start": "198340",
    "end": "200079"
  },
  {
    "text": "actions in the code pipeline one is the",
    "start": "200079",
    "end": "202780"
  },
  {
    "text": "source action which pulls code from AWS",
    "start": "202780",
    "end": "205120"
  },
  {
    "text": "commit gold commits repository and the",
    "start": "205120",
    "end": "207940"
  },
  {
    "text": "second action is the build action which",
    "start": "207940",
    "end": "210099"
  },
  {
    "text": "builds it using code bed let's navigate",
    "start": "210099",
    "end": "212620"
  },
  {
    "text": "to the code commit repository and check",
    "start": "212620",
    "end": "214690"
  },
  {
    "text": "the content some of the key things to",
    "start": "214690",
    "end": "216760"
  },
  {
    "text": "note are the docker file the docker file",
    "start": "216760",
    "end": "219760"
  },
  {
    "text": "defines defines the dependencies needed",
    "start": "219760",
    "end": "222010"
  },
  {
    "text": "by my application and how to build the",
    "start": "222010",
    "end": "224139"
  },
  {
    "text": "image and provision my deep learning api",
    "start": "224139",
    "end": "226000"
  },
  {
    "text": "in this docker file i'm installing the",
    "start": "226000",
    "end": "227889"
  },
  {
    "text": "dependencies needed 4mx net library MX",
    "start": "227889",
    "end": "231250"
  },
  {
    "text": "net flask and finally my application I'm",
    "start": "231250",
    "end": "234730"
  },
  {
    "text": "also specifying the launch configuration",
    "start": "234730",
    "end": "237669"
  },
  {
    "text": "for this API let's switch over to the",
    "start": "237669",
    "end": "240790"
  },
  {
    "text": "bills back yeah Mel file this file",
    "start": "240790",
    "end": "243099"
  },
  {
    "text": "specifies the build steps needed here I",
    "start": "243099",
    "end": "245650"
  },
  {
    "text": "define the pre build post build and",
    "start": "245650",
    "end": "248049"
  },
  {
    "text": "build configuration in this example I'm",
    "start": "248049",
    "end": "250540"
  },
  {
    "text": "building a docker image and pushing the",
    "start": "250540",
    "end": "252340"
  },
  {
    "text": "image to ECR using AWS api why scripting",
    "start": "252340",
    "end": "255730"
  },
  {
    "text": "and not plugins let's step into the",
    "start": "255730",
    "end": "257979"
  },
  {
    "text": "build step code build which is a managed",
    "start": "257979",
    "end": "260109"
  },
  {
    "text": "service provision the build server and",
    "start": "260109",
    "end": "262210"
  },
  {
    "text": "has executed the pre build build and",
    "start": "262210",
    "end": "264159"
  },
  {
    "text": "post build step this has also pushed the",
    "start": "264159",
    "end": "266470"
  },
  {
    "text": "image to ECR",
    "start": "266470",
    "end": "267610"
  },
  {
    "text": "in the ECR we had earlier created a",
    "start": "267610",
    "end": "270400"
  },
  {
    "text": "repository called",
    "start": "270400",
    "end": "271330"
  },
  {
    "text": "ml tests ripple through our cloud",
    "start": "271330",
    "end": "272979"
  },
  {
    "text": "formation temple",
    "start": "272979",
    "end": "274000"
  },
  {
    "text": "this represents image that code build",
    "start": "274000",
    "end": "277300"
  },
  {
    "text": "pushed you can define permissions for",
    "start": "277300",
    "end": "280450"
  },
  {
    "text": "ECR for the actions such as get image",
    "start": "280450",
    "end": "283300"
  },
  {
    "text": "push image against principles from AWS I",
    "start": "283300",
    "end": "287320"
  },
  {
    "text": "am let's take a look at the easiest",
    "start": "287320",
    "end": "289720"
  },
  {
    "text": "cluster and artifacts created inside it",
    "start": "289720",
    "end": "292210"
  },
  {
    "text": "we have a cluster with one service",
    "start": "292210",
    "end": "294460"
  },
  {
    "text": "running inside it let's take a look at",
    "start": "294460",
    "end": "297010"
  },
  {
    "text": "the service the service is running one",
    "start": "297010",
    "end": "298810"
  },
  {
    "text": "copy of the task and is behind an",
    "start": "298810",
    "end": "300970"
  },
  {
    "text": "application load balancer and is using",
    "start": "300970",
    "end": "303490"
  },
  {
    "text": "dynamic port mapping by a target group",
    "start": "303490",
    "end": "305760"
  },
  {
    "text": "the task has a container running on port",
    "start": "305760",
    "end": "309060"
  },
  {
    "text": "5,000 map to port 80 on the alb it uses",
    "start": "309060",
    "end": "312820"
  },
  {
    "text": "the container image we pushed so let's",
    "start": "312820",
    "end": "315310"
  },
  {
    "text": "see the end result of all this I'll go",
    "start": "315310",
    "end": "317560"
  },
  {
    "text": "back to cloud formation and get our",
    "start": "317560",
    "end": "319360"
  },
  {
    "text": "endpoint which was deployed which in",
    "start": "319360",
    "end": "320980"
  },
  {
    "text": "this case is listed as the ECS alb let's",
    "start": "320980",
    "end": "323560"
  },
  {
    "text": "open postman and try to call the API we",
    "start": "323560",
    "end": "326410"
  },
  {
    "text": "are sending a picture of a bridge which",
    "start": "326410",
    "end": "328000"
  },
  {
    "text": "is a suspension bridge and we are hoping",
    "start": "328000",
    "end": "330280"
  },
  {
    "text": "for our answer from the machine learning",
    "start": "330280",
    "end": "332170"
  },
  {
    "text": "API deployed that this is a suspension",
    "start": "332170",
    "end": "334780"
  },
  {
    "text": "bridge so let's see what it tells us and",
    "start": "334780",
    "end": "338350"
  },
  {
    "text": "it tells us with 62% accuracy that this",
    "start": "338350",
    "end": "341020"
  },
  {
    "text": "is a suspension bridge let's switch over",
    "start": "341020",
    "end": "343240"
  },
  {
    "text": "to US West to Oregon where we initially",
    "start": "343240",
    "end": "345640"
  },
  {
    "text": "kicked off the stack the build is",
    "start": "345640",
    "end": "347710"
  },
  {
    "text": "complete and the new api has been",
    "start": "347710",
    "end": "349840"
  },
  {
    "text": "deployed let's look at the build logs",
    "start": "349840",
    "end": "351910"
  },
  {
    "text": "the build has been pushed and the new",
    "start": "351910",
    "end": "353740"
  },
  {
    "text": "api can be tested",
    "start": "353740",
    "end": "354940"
  },
  {
    "text": "we've seen how amazon ECS ECR and",
    "start": "354940",
    "end": "358360"
  },
  {
    "text": "enables developer tools make it easy to",
    "start": "358360",
    "end": "360670"
  },
  {
    "text": "set up a completely managed containers",
    "start": "360670",
    "end": "363040"
  },
  {
    "text": "deployment pipeline in the cloud which",
    "start": "363040",
    "end": "365260"
  },
  {
    "text": "provides you development agility thanks",
    "start": "365260",
    "end": "368650"
  },
  {
    "text": "for watching",
    "start": "368650",
    "end": "370510"
  },
  {
    "text": "you",
    "start": "370510",
    "end": "372570"
  }
]