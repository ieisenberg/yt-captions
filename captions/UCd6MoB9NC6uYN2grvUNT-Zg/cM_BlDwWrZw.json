[
  {
    "text": "In this video, you’ll see how to securely \nsend cross-account Prometheus metrics from",
    "start": "160",
    "end": "4160"
  },
  {
    "text": "Amazon Elastic Kubernetes Service (Amazon EKS) \nto Amazon Managed Service for Prometheus (AMP).  ",
    "start": "4160",
    "end": "10164"
  },
  {
    "text": "With this solution, you can view all your \nPrometheus metrics from a centralized account,",
    "start": "10997",
    "end": "14906"
  },
  {
    "text": "configure fine-grained permissions for \ncross-account access with Amazon EKS,",
    "start": "14906",
    "end": "19157"
  },
  {
    "text": "and achieve private data transfer with \nvirtual private cloud (VPC) endpoints.",
    "start": "19157",
    "end": "23310"
  },
  {
    "text": "The architecture we’ll use \nincludes two workload accounts,",
    "start": "24498",
    "end": "27317"
  },
  {
    "text": "each running Amazon EKS clusters \nand a Prometheus server,",
    "start": "27317",
    "end": "30517"
  },
  {
    "text": "and a central monitoring account with an AMP \nworkspace connected to Amazon Managed Grafana.",
    "start": "30517",
    "end": "35044"
  },
  {
    "text": "We’ll work in the Cloud9 \nintegrated development environment.",
    "start": "36233",
    "end": "38888"
  },
  {
    "text": "For demonstration purposes, we’ve already\nset up some AWS accounts.",
    "start": "39239",
    "end": "42575"
  },
  {
    "text": "This is workload account 1.",
    "start": "43010",
    "end": "44518"
  },
  {
    "text": "This is workload account 2.",
    "start": "46941",
    "end": "48381"
  },
  {
    "text": "This is the central account.",
    "start": "50769",
    "end": "52049"
  },
  {
    "text": "Let’s return to workload account 1.",
    "start": "52828",
    "end": "54506"
  },
  {
    "text": "This script and others we'll use in this video rely on\ndependencies such as kubectl, eksctl, and helm.",
    "start": "57000",
    "end": "62600"
  },
  {
    "text": "Let’s begin by creating an AWS Identity and Access Management (IAM) role\nfor the Kubernetes service account with permissions to assume a cross-account role.",
    "start": "63889",
    "end": "71652"
  },
  {
    "text": "Next, we’ll prepare the environment by setting \nthe region, Availability Zones, and CIDR blocks.",
    "start": "72722",
    "end": "77710"
  },
  {
    "text": "Next, we’ll get the workload account \nID and configure AWS authentication.",
    "start": "80790",
    "end": "84784"
  },
  {
    "text": "Now, we’ll create a new VPC.",
    "start": "87122",
    "end": "88851"
  },
  {
    "text": "Let’s name the VPC and enable DNS.",
    "start": "91341",
    "end": "93755"
  },
  {
    "text": "We’ll create an internet gateway \nand attach it to the VPC.",
    "start": "97249",
    "end": "100098"
  },
  {
    "text": "Next we'll create the subnets \nand the associated route tables.",
    "start": "103520",
    "end": "106738"
  },
  {
    "text": "Let’s enable public IPs on the subnets \nand associate route tables with them.",
    "start": "111226",
    "end": "114920"
  },
  {
    "text": "Before we create the EKS cluster, let’s review \nour VPC from the VPC Management Console.",
    "start": "123569",
    "end": "128369"
  },
  {
    "text": "Here’s the VPC we created.",
    "start": "134279",
    "end": "135777"
  },
  {
    "text": "Let’s take a closer look at its associated \nsubnets and internet gateway.",
    "start": "136223",
    "end": "139581"
  },
  {
    "text": "Now let’s go back to workload account 1\nand create the EKS cluster.",
    "start": "141912",
    "end": "145272"
  },
  {
    "text": "We’ll now repeat this entire process to create\nan EKS cluster for workload account 2.",
    "start": "149343",
    "end": "153673"
  },
  {
    "text": "Let’s fast forward to when the \nsecond cluster has been created.",
    "start": "155877",
    "end": "158485"
  },
  {
    "text": "To help manage user access, let’s associate the \nOpenID Connect (OIDC) provider with both clusters.",
    "start": "158896",
    "end": "164816"
  },
  {
    "text": "Now let’s go to the EKS console in workload \naccount 1 to find the cluster we created.",
    "start": "168084",
    "end": "172404"
  },
  {
    "text": "Let’s review the configuration \nand compute details.",
    "start": "178369",
    "end": "180755"
  },
  {
    "text": "We can see that some instances\nhave been provisioned.",
    "start": "190507",
    "end": "192601"
  },
  {
    "text": "We can’t see the nodes because some\nauthentication is needed to visualize them.",
    "start": "192965",
    "end": "196336"
  },
  {
    "text": "Let’s navigate to Amazon Elastic Compute \nCloud (Amazon EC2) to view our instances.",
    "start": "196988",
    "end": "201482"
  },
  {
    "text": "Two EC2 instances are running EKS workloads \nusing the IP addresses on the VPC we set up.",
    "start": "204254",
    "end": "209364"
  },
  {
    "text": "Let’s view the EKS cluster on \nthe second workload account.",
    "start": "210519",
    "end": "213079"
  },
  {
    "text": "Next, let’s check for the EC2 instances.",
    "start": "215920",
    "end": "218211"
  },
  {
    "text": "Here they are, with their IP addresses.",
    "start": "221319",
    "end": "223079"
  },
  {
    "text": "Let’s continue our setup and create a \ncluster OIDC provider in workload account 1.",
    "start": "224416",
    "end": "228736"
  },
  {
    "text": "Let’s view the trust policy we created.",
    "start": "233272",
    "end": "235112"
  },
  {
    "text": "The policy includes the current account ID.",
    "start": "237686",
    "end": "239722"
  },
  {
    "text": "We can now create the role.",
    "start": "242221",
    "end": "243500"
  },
  {
    "text": "Let’s find the role we just \ncreated in the IAM console.",
    "start": "246954",
    "end": "249664"
  },
  {
    "text": "Here it is, with the correct identity provider.",
    "start": "257729",
    "end": "259889"
  },
  {
    "text": "We’ll now repeat the process to create a \ncluster OIDC provider in workload account 2.",
    "start": "261331",
    "end": "265679"
  },
  {
    "text": "Let’s skip ahead to when this is finished.",
    "start": "266183",
    "end": "267840"
  },
  {
    "text": "As you can see, this role now has \npermissions to assume a role across accounts.",
    "start": "270242",
    "end": "273983"
  },
  {
    "text": "Next, we’ll go back to the central account\nand create a Prometheus workspace.",
    "start": "274880",
    "end": "278521"
  },
  {
    "text": "Now we need to create an IAM role that corresponds\nto the role permissions we set up in the two workload accounts.",
    "start": "282541",
    "end": "287676"
  },
  {
    "text": "Let’s get the two workload account \nIDs and pass them down to the role.",
    "start": "288051",
    "end": "291284"
  },
  {
    "text": "Let’s go ahead and create the IAM policy.",
    "start": "294000",
    "end": "296270"
  },
  {
    "text": "Let’s take a look at the policy.",
    "start": "298371",
    "end": "299731"
  },
  {
    "text": "Notice that we’re only granting AssumeRole permissions\nto the EKS role on these specific workload accounts.",
    "start": "302240",
    "end": "307202"
  },
  {
    "text": "Now we can create the role.",
    "start": "310369",
    "end": "311621"
  },
  {
    "text": "We’ll provide remoteWrite access to Prometheus.",
    "start": "311939",
    "end": "314291"
  },
  {
    "text": "Let’s check for this role in \nIAM from our central account.",
    "start": "316291",
    "end": "319077"
  },
  {
    "text": "Here’s the role we set up.",
    "start": "328108",
    "end": "329228"
  },
  {
    "text": "As you can see, the role has \nPrometheus remoteWrite access.",
    "start": "332952",
    "end": "335766"
  },
  {
    "text": "This access is essential.",
    "start": "336279",
    "end": "337643"
  },
  {
    "text": "The EKS cluster service account is associated with this role,\nand this role needs permission to write into AMP in the central account.",
    "start": "338173",
    "end": "344623"
  },
  {
    "text": "Let's review the architecture of this setup.",
    "start": "346063",
    "end": "347913"
  },
  {
    "text": "Notice that the EKS cluster will use the service account,\nwhich is connected to the role we created.",
    "start": "350552",
    "end": "354952"
  },
  {
    "text": "Let’s return to workload account 1 and deploy\na Prometheus server inside the Amazon EKS cluster",
    "start": "356428",
    "end": "361460"
  },
  {
    "text": "so we can collect environmental metrics.",
    "start": "361460",
    "end": "363263"
  },
  {
    "text": "We’ll need the workspace ID of the \ncentral account, so let’s get that.",
    "start": "365879",
    "end": "368999"
  },
  {
    "text": "Let’s paste in the workplace ID and create a YAML \nfile we’ll use to configure the Prometheus server.",
    "start": "372141",
    "end": "376850"
  },
  {
    "text": "Let’s take a look at the YAML file.",
    "start": "379971",
    "end": "381491"
  },
  {
    "text": "Notice that the service account is using\nthe AWS Account ID of the local account.",
    "start": "384209",
    "end": "388181"
  },
  {
    "text": "You can also see the Prometheus server’s remoteWrite URL, \nqueue configuration, and SigV4 specifications.",
    "start": "388744",
    "end": "394395"
  },
  {
    "text": "Let’s deploy Prometheus.",
    "start": "396964",
    "end": "398258"
  },
  {
    "text": "You can use kubectl to see if \neach pod is running correctly.",
    "start": "406691",
    "end": "409536"
  },
  {
    "text": "Not every pod has been created yet.",
    "start": "410289",
    "end": "411912"
  },
  {
    "text": "Let’s wait a moment and try again.",
    "start": "412088",
    "end": "413548"
  },
  {
    "text": "At this point, Prometheus should be running,",
    "start": "416164",
    "end": "418004"
  },
  {
    "text": "and the metrics should be \nvisible from the central account.",
    "start": "418004",
    "end": "420080"
  },
  {
    "text": "Let’s verify this by connecting \nto Grafana on the central account.",
    "start": "421686",
    "end": "424806"
  },
  {
    "text": "For this example, we’ve set up a \nworkspace with Amazon Managed Grafana,",
    "start": "427341",
    "end": "430863"
  },
  {
    "text": "which provides a native integration with AMP.",
    "start": "430863",
    "end": "433056"
  },
  {
    "text": "You can also run your own Grafana server.",
    "start": "433315",
    "end": "435219"
  },
  {
    "text": "Let’s configure AMP as a data \nsource for this workspace.",
    "start": "436599",
    "end": "439378"
  },
  {
    "text": "In this case, the region is Ireland.",
    "start": "443068",
    "end": "444828"
  },
  {
    "text": "All the workspaces in the selected\nregion will appear here.",
    "start": "448188",
    "end": "450822"
  },
  {
    "text": "Here’s our AMP workspace.",
    "start": "451268",
    "end": "452774"
  },
  {
    "text": "Let’s add the data source.",
    "start": "455308",
    "end": "456545"
  },
  {
    "text": "Now let’s go to the Explore \nmode and find the data.",
    "start": "458654",
    "end": "461100"
  },
  {
    "text": "We’ll look in the AMP workspace.",
    "start": "463959",
    "end": "465676"
  },
  {
    "text": "We can see all the metrics that \nPrometheus is sending right now to AMP.",
    "start": "468623",
    "end": "471936"
  },
  {
    "text": "Let’s query the origin of these commands.",
    "start": "472359",
    "end": "474309"
  },
  {
    "text": "As you can see, the metrics are starting to flow.",
    "start": "482244",
    "end": "484211"
  },
  {
    "text": "We can see the IP addresses \nthe metrics are coming from.",
    "start": "485651",
    "end": "488144"
  },
  {
    "text": "Let’s see if they match the CIDR \nrange of our instances in EC2.",
    "start": "488531",
    "end": "491629"
  },
  {
    "text": "One of the IP addresses here matches \nan IP address displayed in Grafana.",
    "start": "495719",
    "end": "499319"
  },
  {
    "text": "As does one of these IP addresses.",
    "start": "502268",
    "end": "504058"
  },
  {
    "text": "The metrics are flowing through the \npublic internet via the internet gateway.",
    "start": "507607",
    "end": "510667"
  },
  {
    "text": "Let’s verify that only public internet IP addresses\nare currently being used for the Prometheus endpoint.",
    "start": "511183",
    "end": "516223"
  },
  {
    "text": "We can see public IP addresses \nfor the Prometheus endpoint.",
    "start": "517548",
    "end": "520347"
  },
  {
    "text": "Traffic is secure because \nwe’re using HTTPS and SigV4,",
    "start": "520722",
    "end": "524726"
  },
  {
    "text": "but to also make traffic completely private, \nwe can add a VPC endpoint.",
    "start": "524726",
    "end": "528363"
  },
  {
    "text": "Let’s do that.",
    "start": "528574",
    "end": "529331"
  },
  {
    "text": "Let’s switch to the VPC console to confirm \nthat the endpoint is being created.",
    "start": "533755",
    "end": "537355"
  },
  {
    "text": "The VPC endpoint is currently pending.",
    "start": "542519",
    "end": "544423"
  },
  {
    "text": "Let’s wait a moment.",
    "start": "544599",
    "end": "545387"
  },
  {
    "text": "The VPC endpoint is now available.",
    "start": "547846",
    "end": "549833"
  },
  {
    "text": "Let’s check the traffic again.",
    "start": "550010",
    "end": "551343"
  },
  {
    "text": "Within a few minutes, traffic will begin flowing privately,\nwithout any additional configuration on our part.",
    "start": "554086",
    "end": "559189"
  },
  {
    "text": "As you can see, traffic has shifted from public addresses\nto private addresses for the AMP DNS state.",
    "start": "563889",
    "end": "569115"
  },
  {
    "text": "Let’s return to Grafana and refresh the query.",
    "start": "569926",
    "end": "572061"
  },
  {
    "text": "Metrics are now flowing from the private endpoint.",
    "start": "576000",
    "end": "578186"
  },
  {
    "text": "Let’s quickly create a private VPC \nendpoint for workload account 2.",
    "start": "578919",
    "end": "582310"
  },
  {
    "text": "As before, we’ll create the Kubernetes workspace, \ninstall Helm charts, and deploy our application.",
    "start": "593089",
    "end": "597844"
  },
  {
    "text": "The Prometheus pods are running.",
    "start": "599115",
    "end": "600600"
  },
  {
    "text": "If we go on Grafana, we should see\ntwo additional sets of metrics.",
    "start": "600975",
    "end": "604097"
  },
  {
    "text": "We now have four time-series values\ncoming from four IP addresses,",
    "start": "606475",
    "end": "610177"
  },
  {
    "text": "confirming that metrics from both workload accounts\nare flowing through AMP in the central account.",
    "start": "610177",
    "end": "614359"
  },
  {
    "text": "You've just seen how to securely send cross-account\nPrometheus metrics from Amazon EKS to AMP.",
    "start": "615823",
    "end": "620863"
  },
  {
    "text": "You can learn more about this topic in \nthe description and links for this video.",
    "start": "621971",
    "end": "625073"
  },
  {
    "text": "Thanks for watching.\nNow it’s your turn to try.",
    "start": "625319",
    "end": "627191"
  }
]