[
  {
    "start": "0",
    "end": "150000"
  },
  {
    "text": "good morning and welcome to the AWS public sector summit Singapore I'm your room host Matthew we have lots",
    "start": "5480",
    "end": "13230"
  },
  {
    "text": "of good sessions in store for you today as you move between sessions please take your seats promptly to ensure speakers",
    "start": "13230",
    "end": "19680"
  },
  {
    "text": "are able to start on time we're pleased to advise you that all AWS sessions you see today are being recorded and will be",
    "start": "19680",
    "end": "26189"
  },
  {
    "text": "available after the event if you would like to access the slides today for many sessions please approach one of our",
    "start": "26189",
    "end": "32340"
  },
  {
    "text": "staff and tap your badge on the touch point at the front of the room after each session finally all of you have a",
    "start": "32340",
    "end": "38190"
  },
  {
    "text": "QR code on the back of your badge you can use this or the URL to provide",
    "start": "38190",
    "end": "43590"
  },
  {
    "text": "feedback on any session you see here today we would love to hear from you with your help",
    "start": "43590",
    "end": "48870"
  },
  {
    "text": "we promise to always look for better ways to run these events in addition we will be randomly generating a winner per",
    "start": "48870",
    "end": "54960"
  },
  {
    "text": "session from the submitted feedback pool who will walk away with a limited-edition swag winners will be",
    "start": "54960",
    "end": "60210"
  },
  {
    "text": "announced at 1 p.m. 4 p.m. and 6 p.m. respectively in the rooms I would now",
    "start": "60210",
    "end": "65610"
  },
  {
    "text": "like to introduce you to our first speaker Dennis Maggs awho solutions architect worldwide public sector AWS",
    "start": "65610",
    "end": "72530"
  },
  {
    "text": "please welcome him to the stage hello",
    "start": "72530",
    "end": "80299"
  },
  {
    "text": "all right morning that was a very interesting introduction well the lights",
    "start": "80299",
    "end": "86810"
  },
  {
    "text": "are okay so how's snack oh right so it's",
    "start": "86810",
    "end": "93140"
  },
  {
    "text": "sort of a challenge in the sense that this is the first semi-technical session right after the keynote so I won't shock",
    "start": "93140",
    "end": "100429"
  },
  {
    "text": "you by putting in too much technical details into it right so I'll be discussing about well it's it's a quite",
    "start": "100429",
    "end": "107810"
  },
  {
    "text": "popular term these days or serverless and micro-services right so there a lot",
    "start": "107810",
    "end": "115880"
  },
  {
    "text": "of services EWS services to be exact that would be touched on throughout the",
    "start": "115880",
    "end": "122299"
  },
  {
    "text": "presentation but I will not be going to each one of them in detail there would be other sessions like for example",
    "start": "122299",
    "end": "128298"
  },
  {
    "text": "relational databases there's in fact one for serverless functions later on the",
    "start": "128299",
    "end": "134209"
  },
  {
    "text": "sessions but in this case I will be mentioning them but it's morally more in",
    "start": "134209",
    "end": "139220"
  },
  {
    "text": "the context of serverless and microservices good right okay I was",
    "start": "139220",
    "end": "147980"
  },
  {
    "text": "introduced right so yeah right so show of hands who are doing server list now",
    "start": "147980",
    "end": "155739"
  },
  {
    "start": "150000",
    "end": "150000"
  },
  {
    "text": "Wow really okay right so with regards to",
    "start": "155890",
    "end": "162470"
  },
  {
    "text": "server list there are a couple of things that well that would stand out one of course there are no servers right so",
    "start": "162470",
    "end": "169870"
  },
  {
    "text": "technically speaking it's not it's not really that you don't have servers but you actually do not manage the servers",
    "start": "169870",
    "end": "176780"
  },
  {
    "text": "yourselves right so that's one of course is the key factor it also scales with",
    "start": "176780",
    "end": "182510"
  },
  {
    "text": "usage so you don't since you're not worrying about how many servers I have it doesn't really matter if you do 110",
    "start": "182510",
    "end": "188120"
  },
  {
    "text": "200 1000 right you shouldn't be caring about those you never pay for idols so",
    "start": "188120",
    "end": "194510"
  },
  {
    "text": "this is something that would be emphasized later on in the sense that if you are running a virtual machine or a",
    "start": "194510",
    "end": "201470"
  },
  {
    "text": "server on the per hour per second basis or even a year basis you pay for it",
    "start": "201470",
    "end": "207230"
  },
  {
    "text": "whether it's idle or not so this is something that server less can actually",
    "start": "207230",
    "end": "212269"
  },
  {
    "text": "address and of course with in the same manner that you would expect some level of",
    "start": "212269",
    "end": "219140"
  },
  {
    "text": "availability and resilience to your server the applications that should be",
    "start": "219140",
    "end": "224660"
  },
  {
    "text": "expected on server less as well okay now we have had EWS services for serverless",
    "start": "224660",
    "end": "235220"
  },
  {
    "start": "228000",
    "end": "228000"
  },
  {
    "text": "how I'm you might have heard of EWS lambda which is our server dysfunction",
    "start": "235220",
    "end": "241430"
  },
  {
    "text": "and of course Amazon API gateways that can be used to invoke lambda function so",
    "start": "241430",
    "end": "247430"
  },
  {
    "text": "it's just like invoking let's an API arrest called HTTP calling a lambda function to perform the function for you",
    "start": "247430",
    "end": "254780"
  },
  {
    "text": "but of course these are the more popular ones but there are a lot of services",
    "start": "254780",
    "end": "260859"
  },
  {
    "text": "that we consider serverless if you are performing implementation or architecture for your application right",
    "start": "260859",
    "end": "268670"
  },
  {
    "text": "so we have services for storage like Amazon DynamoDB Amazon s3 is very",
    "start": "268670",
    "end": "275900"
  },
  {
    "text": "popular when it comes to storing data and of course we have security services like Amazon kognito for user pools and",
    "start": "275900",
    "end": "284210"
  },
  {
    "text": "then streaming data with Amazon Kinesis so there are a lot of services in your",
    "start": "284210",
    "end": "289970"
  },
  {
    "text": "arsenal if you are going to build server unless applications and then of course more recently there have been advances",
    "start": "289970",
    "end": "297500"
  },
  {
    "text": "you know that we come up with services in in a high grade right so Amazon or",
    "start": "297500",
    "end": "307130"
  },
  {
    "text": "our service is for relational databases this is a my sequel Edition and then of course later on I will be tell us",
    "start": "307130",
    "end": "316250"
  },
  {
    "text": "something about forget AWS forget is a server less container service right ok",
    "start": "316250",
    "end": "325250"
  },
  {
    "start": "325000",
    "end": "325000"
  },
  {
    "text": "so next question again show of hands who are already doing micro services or",
    "start": "325250",
    "end": "330860"
  },
  {
    "text": "considering micro services and ok so it's equal it's like equal amount of",
    "start": "330860",
    "end": "338419"
  },
  {
    "text": "server less and micro services so the concept behind micro services is you try",
    "start": "338419",
    "end": "344090"
  },
  {
    "text": "to make things small hence the term micro that that is in terms of",
    "start": "344090",
    "end": "350800"
  },
  {
    "text": "managing the code itself or the application itself right and at the same time since these are small isolated",
    "start": "350800",
    "end": "358250"
  },
  {
    "text": "services whenever there's failure you actually limit the impact of the failure",
    "start": "358250",
    "end": "364430"
  },
  {
    "text": "right so it's not something something blows like if something blows up it blows up the entire application right so",
    "start": "364430",
    "end": "371210"
  },
  {
    "text": "they have their own data and of course they are resilient so how does now",
    "start": "371210",
    "end": "376490"
  },
  {
    "start": "375000",
    "end": "375000"
  },
  {
    "text": "serverless relate to micro services because you can do micro services without doing",
    "start": "376490",
    "end": "382190"
  },
  {
    "text": "surveillance right so they are aligned",
    "start": "382190",
    "end": "387740"
  },
  {
    "text": "in a sense that a lot of the features that I'll be discussing later are",
    "start": "387740",
    "end": "393020"
  },
  {
    "text": "actually aligned to doing the two or conforming to the pillars of micro",
    "start": "393020",
    "end": "399470"
  },
  {
    "text": "services some of them out of the box meaning once you use this server less service it addresses a micro service",
    "start": "399470",
    "end": "407560"
  },
  {
    "text": "requirement some of them are not really out of the box but at the least it's",
    "start": "407560",
    "end": "412699"
  },
  {
    "text": "easier to implement as well as compared to let's say doing traditional way of",
    "start": "412699",
    "end": "419419"
  },
  {
    "text": "doing micro services but the second-to-the-last serverless is not a",
    "start": "419419",
    "end": "424909"
  },
  {
    "text": "silver bullet so it's not like okay serverless is so good let's all move the services right there would be cases that",
    "start": "424909",
    "end": "431060"
  },
  {
    "text": "you would be requiring serve word sort of components right so it's a matter of",
    "start": "431060",
    "end": "437210"
  },
  {
    "text": "getting the right fit picking the right services and ding and making sure at the",
    "start": "437210",
    "end": "443449"
  },
  {
    "text": "end of the day you your applications your customers get what they need ok so going back to micro services then",
    "start": "443449",
    "end": "451940"
  },
  {
    "start": "449000",
    "end": "449000"
  },
  {
    "text": "right so these are on the left side one your your left we have like two major",
    "start": "451940",
    "end": "458389"
  },
  {
    "text": "businesses one is faster time-to-market so how does that work because if you're dealing remember I mentioned that we",
    "start": "458389",
    "end": "465590"
  },
  {
    "text": "reduce the size of the code right but with that reduction you reduce the risk",
    "start": "465590",
    "end": "471740"
  },
  {
    "text": "of failure but at the same time it has to be frequent right so now it's agility",
    "start": "471740",
    "end": "477830"
  },
  {
    "text": "we have to move fast right if you get a small if you want a small",
    "start": "477830",
    "end": "483050"
  },
  {
    "text": "enhancement and put it in let's test it if it fails and we recover then we do it again and again and again and again so",
    "start": "483050",
    "end": "488960"
  },
  {
    "text": "that is on the faster time-to-market and at the same time since you've broken down your monolithic application into",
    "start": "488960",
    "end": "496009"
  },
  {
    "text": "smaller chunks you can actually move and assign them to different teams so that's ideally speaking you now have separate",
    "start": "496009",
    "end": "502940"
  },
  {
    "text": "teams that can manage a particular component right now to come up or to",
    "start": "502940",
    "end": "508879"
  },
  {
    "text": "achieve the business goals there are design pillars that you would have to consider resilience this one it has to",
    "start": "508879",
    "end": "515839"
  },
  {
    "text": "be highly available it should scale that's one of the reasons why I went",
    "start": "515839",
    "end": "521209"
  },
  {
    "text": "serverless right I don't want to worry about the number server the number of servers that I'm maintaining and at the",
    "start": "521209",
    "end": "526220"
  },
  {
    "text": "same time the continuous delivery part which addresses the time to market",
    "start": "526220",
    "end": "531380"
  },
  {
    "text": "business goal right there has to be automation there has to be a set of processes and there has to be there",
    "start": "531380",
    "end": "538640"
  },
  {
    "text": "there should be services that would help me write do faster time-to-market",
    "start": "538640",
    "end": "545140"
  },
  {
    "text": "so I'll be going through the three the the different colors so the first one is resilience right of course in AWS we",
    "start": "545140",
    "end": "553279"
  },
  {
    "start": "550000",
    "end": "550000"
  },
  {
    "text": "design for failure right so failures will happen it will fail right I there",
    "start": "553279",
    "end": "563420"
  },
  {
    "text": "would be like people saying we should plan that it should be 100% up and available but the thing is it will fail",
    "start": "563420",
    "end": "569810"
  },
  {
    "text": "so we plan for that one so and at the same time there are some some",
    "start": "569810",
    "end": "575180"
  },
  {
    "text": "considerations like throttling that you would have to guess I'll show an example later on prattling and of course the",
    "start": "575180",
    "end": "581420"
  },
  {
    "text": "functionality that if something fails how do I try when do I rely and let's",
    "start": "581420",
    "end": "587720"
  },
  {
    "text": "say if it takes too long I should be I should have the capability to stop the",
    "start": "587720",
    "end": "592760"
  },
  {
    "text": "processing and then either perform a try or handle the error so we have teachers",
    "start": "592760",
    "end": "597800"
  },
  {
    "text": "for that one as well so I'll be addressing the high availability first so we have a couple of service that you",
    "start": "597800",
    "end": "603920"
  },
  {
    "start": "599000",
    "end": "599000"
  },
  {
    "text": "can use for resiliency so in this case I can set up an application let's say",
    "start": "603920",
    "end": "609320"
  },
  {
    "text": "coming from a mobile application and I'll be utilizing a double years it can be in this case it's us East one",
    "start": "609320",
    "end": "616610"
  },
  {
    "text": "and east to an API can traverse the different regions so in this case if",
    "start": "616610",
    "end": "624050"
  },
  {
    "text": "let's say one of the regions have a problem with network and the latency goes down then you would have the",
    "start": "624050",
    "end": "631190"
  },
  {
    "text": "capability to redirect the request to the surviving region right so that's",
    "start": "631190",
    "end": "636500"
  },
  {
    "text": "what high availability is all about you should have redundancy such that one fails there's another one to actually",
    "start": "636500",
    "end": "643490"
  },
  {
    "text": "cater for the service okay so again diving deeper into the functionality of",
    "start": "643490",
    "end": "649070"
  },
  {
    "text": "API gateways you are able to specify throttling and Kota now you you might be",
    "start": "649070",
    "end": "655220"
  },
  {
    "text": "saying why would I total my application imagine this you have an application on",
    "start": "655220",
    "end": "662300"
  },
  {
    "text": "a front-end that is talking to a back-end database right so you know that",
    "start": "662300",
    "end": "669560"
  },
  {
    "text": "my database can only handle this much requests and workloads right so what you",
    "start": "669560",
    "end": "675050"
  },
  {
    "text": "do now is you throttle the front-end service such that it controls the transactions going into your database",
    "start": "675050",
    "end": "682090"
  },
  {
    "text": "why would you do that well it would probably be easier to manage totalling",
    "start": "682090",
    "end": "688130"
  },
  {
    "text": "on the application side don't recover from a failed database that's why",
    "start": "688130",
    "end": "693380"
  },
  {
    "text": "throttling is there for you to be able to design your applications to handle them then of course another function is",
    "start": "693380",
    "end": "701060"
  },
  {
    "text": "timeouts so the EWS lambda functions our serverless functions you are able to set",
    "start": "701060",
    "end": "709340"
  },
  {
    "text": "timeouts so you cannot have the lambda function ran for three years right waiting for it to finish so there has to",
    "start": "709340",
    "end": "714800"
  },
  {
    "text": "be a means to set a timeout such that this is the only allowable time I would",
    "start": "714800",
    "end": "719960"
  },
  {
    "text": "want my process to run and if it fails or it if it exceeds the timeout you",
    "start": "719960",
    "end": "726230"
  },
  {
    "text": "should be able to either retry or go back and handle the error right so these",
    "start": "726230",
    "end": "732020"
  },
  {
    "text": "are the functionalities that we cover our features and services for to address",
    "start": "732020",
    "end": "737510"
  },
  {
    "start": "737000",
    "end": "737000"
  },
  {
    "text": "availability and of course you should have a means to see what's going on that's why we have the app we have",
    "start": "737510",
    "end": "743420"
  },
  {
    "text": "Amazon Cloud Watch it's our application and in for structural monitoring service so in",
    "start": "743420",
    "end": "749240"
  },
  {
    "text": "this case you would know the number of failures latency probably you can how",
    "start": "749240",
    "end": "754309"
  },
  {
    "text": "you you would have metrics for that as well and on the left side is a service",
    "start": "754309",
    "end": "759319"
  },
  {
    "text": "that we use is a tracing tracing analysis and debugging service for",
    "start": "759319",
    "end": "764559"
  },
  {
    "text": "distributed applications which is very typical to micro services so since we",
    "start": "764559",
    "end": "770809"
  },
  {
    "text": "have broken down the application into smaller chunks it in a way is distributed and AWS x-ray",
    "start": "770809",
    "end": "779449"
  },
  {
    "text": "thus the monitoring of where did my transaction go how is this component",
    "start": "779449",
    "end": "784699"
  },
  {
    "text": "doing and also these are services that would help you sort of rate or monitor",
    "start": "784699",
    "end": "791929"
  },
  {
    "text": "the availability and resilience of your serverless application right so we've",
    "start": "791929",
    "end": "798439"
  },
  {
    "text": "titled availability let's go to scalability so in terms of scalability I",
    "start": "798439",
    "end": "804860"
  },
  {
    "start": "801000",
    "end": "801000"
  },
  {
    "text": "would want to address two different layers one is on the storage and the other one later on is on the compute ok",
    "start": "804860",
    "end": "812269"
  },
  {
    "text": "so to sort of better explain the scalability capability of our storage",
    "start": "812269",
    "end": "820970"
  },
  {
    "text": "services let's go through the concept of what we call a data link right a data",
    "start": "820970",
    "end": "827149"
  },
  {
    "text": "link is in is interesting because it requires on the left side and on the",
    "start": "827149",
    "end": "832639"
  },
  {
    "text": "right side or your right track gets a virtually virtually limitless",
    "start": "832639",
    "end": "838120"
  },
  {
    "text": "centralized storage platform so virtually virtually limitless so that's",
    "start": "838120",
    "end": "845420"
  },
  {
    "text": "where the scalability concern so you don't have to worry about chassis don't have to worry about how many petabytes",
    "start": "845420",
    "end": "851720"
  },
  {
    "text": "how many free space etc right so and it's decoupled decoupled is very",
    "start": "851720",
    "end": "859160"
  },
  {
    "text": "important in a in serverless architecture I will sort of discuss that later as well and at the same time the",
    "start": "859160",
    "end": "866449"
  },
  {
    "text": "capability to ingest data and perform transformation of course your storage if",
    "start": "866449",
    "end": "872420"
  },
  {
    "text": "let's say you're scaling your users you're scaling your applications but your storage cannot keep up in terms of",
    "start": "872420",
    "end": "878420"
  },
  {
    "text": "ingestion then that's just bad right so the DITA lake or in this case",
    "start": "878420",
    "end": "884090"
  },
  {
    "text": "the underlying storage should be able to handle that so our choice for that is",
    "start": "884090",
    "end": "889670"
  },
  {
    "text": "Amazon s3 for data leaks you do get a lot of benefits from using Amazon s3 so",
    "start": "889670",
    "end": "896240"
  },
  {
    "text": "there is security there is object level control of course",
    "start": "896240",
    "end": "901670"
  },
  {
    "text": "there are monitoring and then probably business intelligence or reporting on top of it but the feature that is in",
    "start": "901670",
    "end": "909020"
  },
  {
    "text": "line with our topic is the unmatched durability availability and scalability",
    "start": "909020",
    "end": "916870"
  },
  {
    "text": "right you don't have to worry about if my disk gets full or not so that is why",
    "start": "916870",
    "end": "922130"
  },
  {
    "text": "s3 is a good choice if you are going or considering going to a server less micro",
    "start": "922130",
    "end": "928250"
  },
  {
    "text": "service implementation s3 would be able to handle files objects but what if",
    "start": "928250",
    "end": "938300"
  },
  {
    "text": "you're dealing with relational data or in this you're probably non-relational",
    "start": "938300",
    "end": "944780"
  },
  {
    "text": "data as well so we do have services that caters for serverless storage of",
    "start": "944780",
    "end": "950980"
  },
  {
    "text": "relational and non-relational people ok first one of course is we have Amazon or",
    "start": "950980",
    "end": "958220"
  },
  {
    "text": "or a server list so you might have heard of Amazon or or opposed grey and Amazon",
    "start": "958220",
    "end": "963590"
  },
  {
    "text": "or or a my sequel before so this is part of our relational database service",
    "start": "963590",
    "end": "971260"
  },
  {
    "text": "offering which we will have a separate session for that but in this case Amazon",
    "start": "971260",
    "end": "976730"
  },
  {
    "text": "or R or is in a sense server list so you don't have to worry about that",
    "start": "976730",
    "end": "982430"
  },
  {
    "text": "particular instance if you need more database resources then it goes up and",
    "start": "982430",
    "end": "988730"
  },
  {
    "text": "if you need less it was not so that is the concept of being server less for relational databases and at the same",
    "start": "988730",
    "end": "995150"
  },
  {
    "text": "time of course on your right is the Amazon DynamoDB which is our which is our non relational",
    "start": "995150",
    "end": "1000550"
  },
  {
    "text": "database service right same concept you know you just insert your data you",
    "start": "1000550",
    "end": "1005950"
  },
  {
    "text": "manage it you don't have to worry about the server the instances so that takes care of your object data relational data",
    "start": "1005950",
    "end": "1013450"
  },
  {
    "text": "and on relational data okay so let's go to",
    "start": "1013450",
    "end": "1018459"
  },
  {
    "start": "1016000",
    "end": "1016000"
  },
  {
    "text": "the compute side of things I've mentioned about storage so the second part is computed I remember I was asking",
    "start": "1018459",
    "end": "1025750"
  },
  {
    "text": "like who-who are those doing micro services right so when you say micro",
    "start": "1025750",
    "end": "1033548"
  },
  {
    "text": "services sometimes you that is actually related to you using docker containers",
    "start": "1033549",
    "end": "1041438"
  },
  {
    "text": "or containers generally speaking so that's what the first thing that comes to mind so micro services tend okay then",
    "start": "1041439",
    "end": "1046720"
  },
  {
    "text": "they'll use let's use containers but if you would be using containers whether",
    "start": "1046720",
    "end": "1052570"
  },
  {
    "text": "you run it on premises whether you run it virtualized in AWS using ec2",
    "start": "1052570",
    "end": "1059770"
  },
  {
    "text": "instances and whether you're running it with our elastic container services you",
    "start": "1059770",
    "end": "1065919"
  },
  {
    "text": "would still have to maintain the cluster the cluster of ec2 instances serving",
    "start": "1065919",
    "end": "1071559"
  },
  {
    "text": "your containers and you get you are charged for using that so we came up",
    "start": "1071559",
    "end": "1077169"
  },
  {
    "text": "with AWS target where the granularity of you managing goes to the task level I",
    "start": "1077169",
    "end": "1084250"
  },
  {
    "text": "spin up up an application it can be like a task it can utilize three separate",
    "start": "1084250",
    "end": "1090820"
  },
  {
    "text": "containers it spins it up then if it finishes it shuts down you only pay for",
    "start": "1090820",
    "end": "1096730"
  },
  {
    "text": "the time that your task was running right so in this case again since this",
    "start": "1096730",
    "end": "1104799"
  },
  {
    "text": "is serverless you only manage your tasks you don't have to look into the ec2",
    "start": "1104799",
    "end": "1110290"
  },
  {
    "text": "cluster right so in this case there are no instances to manage the task is did",
    "start": "1110290",
    "end": "1116980"
  },
  {
    "text": "they use native API so darker ApS will work and its resource based pricing as",
    "start": "1116980",
    "end": "1123700"
  },
  {
    "text": "I've mentioned earlier okay so of course going back to the most common service",
    "start": "1123700",
    "end": "1131320"
  },
  {
    "start": "1125000",
    "end": "1125000"
  },
  {
    "text": "forever unless we have the server less functions which is a double as lambda so how do you scale them well it scales but",
    "start": "1131320",
    "end": "1138790"
  },
  {
    "text": "you don't need to worry about that the under the hood it's it's using container",
    "start": "1138790",
    "end": "1145549"
  },
  {
    "text": "ecology right so you just pin the function if it finishes you don't have",
    "start": "1145549",
    "end": "1150769"
  },
  {
    "text": "to worry about anything else or managing whatever is the infrastructure underneath it so they just scale okay",
    "start": "1150769",
    "end": "1158799"
  },
  {
    "text": "right I mentioned that decoupling is very important once you've broken down the",
    "start": "1158799",
    "end": "1166159"
  },
  {
    "start": "1159000",
    "end": "1159000"
  },
  {
    "text": "architecture into smaller chunks or layers right so I mentioned we do that",
    "start": "1166159",
    "end": "1173029"
  },
  {
    "text": "to lessen the impact of failures one of the more important things that you would have to consider is how does Mike",
    "start": "1173029",
    "end": "1178879"
  },
  {
    "text": "compute integrate let's say with my storage right or how do processes or",
    "start": "1178879",
    "end": "1185239"
  },
  {
    "text": "functions communicate with other functions because we've decoupled them before it was like one monolithic",
    "start": "1185239",
    "end": "1191059"
  },
  {
    "text": "application well where all of them share the same data or variables but since",
    "start": "1191059",
    "end": "1196940"
  },
  {
    "text": "we've broken them down there has to be a means for them to communicate right so we do have a couple of services for that",
    "start": "1196940",
    "end": "1203450"
  },
  {
    "text": "as well so depending on how you would want to execute your integration you can",
    "start": "1203450",
    "end": "1209239"
  },
  {
    "text": "either push using Amazon API gateways so you make HTTP calls right and then the",
    "start": "1209239",
    "end": "1215299"
  },
  {
    "text": "function files you get you wait you get the data and then you process we have a",
    "start": "1215299",
    "end": "1221059"
  },
  {
    "text": "synchronous events so we can make use of Amazon SNS or simple notification",
    "start": "1221059",
    "end": "1226759"
  },
  {
    "text": "service where data is put in a buffer and then a synchronously processes can",
    "start": "1226759",
    "end": "1233840"
  },
  {
    "text": "pick it up do the processing and probably insert a reply back or do something else and we have of course Amazon s3 again",
    "start": "1233840",
    "end": "1241549"
  },
  {
    "text": "has an intermediate sort of Spore where if you store or write something into s3",
    "start": "1241549",
    "end": "1247399"
  },
  {
    "text": "it can invoke a lambda process to",
    "start": "1247399",
    "end": "1252759"
  },
  {
    "text": "perform operations on the data that you just uploaded and of course their stream",
    "start": "1252759",
    "end": "1258769"
  },
  {
    "text": "based so stream based meaning data continually goes in so we have Amazon",
    "start": "1258769",
    "end": "1263840"
  },
  {
    "text": "DynamoDB for transactions and then of course Amazon kisses which is our data streaming service both of which can",
    "start": "1263840",
    "end": "1271850"
  },
  {
    "text": "invoke or code fire-up lambda functions so looking at this",
    "start": "1271850",
    "end": "1278630"
  },
  {
    "text": "looking at lambda looking at the previous services that I've mentioned you can now tied them together right so",
    "start": "1278630",
    "end": "1286789"
  },
  {
    "text": "I'm not sure if do we have a lot of developers in the room presumably remember when you when we were in",
    "start": "1286789",
    "end": "1293029"
  },
  {
    "text": "college and the first things we learned were declaring variables execution of",
    "start": "1293029",
    "end": "1298220"
  },
  {
    "text": "statements begin and end so that's one big application and then in your first year at the university you have like",
    "start": "1298220",
    "end": "1304009"
  },
  {
    "text": "1,000 lines of codes because you didn't know how to put them in libraries so it's just one big main function so",
    "start": "1304009",
    "end": "1311299"
  },
  {
    "text": "imagine that concept has your monolithic application but now we have the capability to have variables in the form",
    "start": "1311299",
    "end": "1319370"
  },
  {
    "text": "of DynamoDB s3 we have your individual statements in the form of lambda",
    "start": "1319370",
    "end": "1324950"
  },
  {
    "text": "functions and stop functions and then you just tie them together talk to to",
    "start": "1324950",
    "end": "1330230"
  },
  {
    "text": "operate as one right so that is something that you may want to consider",
    "start": "1330230",
    "end": "1335559"
  },
  {
    "text": "right and of course the last pillar is into continuous delivery right you you",
    "start": "1335559",
    "end": "1343370"
  },
  {
    "text": "might be saying okay that's well and good right but when you're doing serverless and micro services it's so",
    "start": "1343370",
    "end": "1352970"
  },
  {
    "text": "easy to like okay I'll create a lambda function and it will say hello world right so okay we were able to do hello",
    "start": "1352970",
    "end": "1360350"
  },
  {
    "text": "world now can we like link that that one stays it says hello world it send it",
    "start": "1360350",
    "end": "1367190"
  },
  {
    "text": "asks for user input so it keeps growing and growing and growing so it has a",
    "start": "1367190",
    "end": "1372740"
  },
  {
    "text": "direct effect on how you operate things right so the process now becomes very",
    "start": "1372740",
    "end": "1379039"
  },
  {
    "text": "important not just the technology right so like how often do you how often do",
    "start": "1379039",
    "end": "1385279"
  },
  {
    "text": "you build your application we do it nightly are you looking into the DevOps",
    "start": "1385279",
    "end": "1390669"
  },
  {
    "text": "bandwagon do we do like nightly builds do you release every week or do we",
    "start": "1390669",
    "end": "1398659"
  },
  {
    "text": "release every year so those are procedural considerations that can be",
    "start": "1398659",
    "end": "1403850"
  },
  {
    "text": "supported by technology so what's a good process so there are a couple of things",
    "start": "1403850",
    "end": "1409039"
  },
  {
    "start": "1406000",
    "end": "1406000"
  },
  {
    "text": "that I would like want to highlight in again in with the faster time-to-market business",
    "start": "1409039",
    "end": "1415070"
  },
  {
    "text": "goal so it has to be easy to interpret we go back to the frequent and small",
    "start": "1415070",
    "end": "1421100"
  },
  {
    "text": "changes and then the impact as I've mentioned earlier should not be hue so we try to reduce that and of course",
    "start": "1421100",
    "end": "1427840"
  },
  {
    "text": "automation is very important automation in the sense that if you do something there's a chain of events that will",
    "start": "1427840",
    "end": "1433850"
  },
  {
    "text": "happen whether there's approval or not to help you move quicker right so each",
    "start": "1433850",
    "end": "1441950"
  },
  {
    "text": "one of them will be sort of like briefly mentioning about a particular service or",
    "start": "1441950",
    "end": "1447740"
  },
  {
    "text": "feature in this case easy to interpret we have what we call the AWS",
    "start": "1447740",
    "end": "1453530"
  },
  {
    "text": "CloudFormation it's infrastructure has code service so if you are less if you",
    "start": "1453530",
    "end": "1458720"
  },
  {
    "text": "would want to build an application in AWS you can have a cloud from his confirmation template which is like well",
    "start": "1458720",
    "end": "1465950"
  },
  {
    "text": "it's a file that would contain the different components and if you want to deploy them you just send that template",
    "start": "1465950",
    "end": "1471860"
  },
  {
    "text": "and ews will take care of spinning up or building the services that is specified",
    "start": "1471860",
    "end": "1477460"
  },
  {
    "text": "with the EWS serverless application model or Sam we may we made it more it",
    "start": "1477460",
    "end": "1485930"
  },
  {
    "text": "well you made it easier such that if you are using a cloud formation template and",
    "start": "1485930",
    "end": "1491210"
  },
  {
    "text": "it uses lambda functions API gateways DynamoDB or some other server less",
    "start": "1491210",
    "end": "1496480"
  },
  {
    "text": "service with a few with fewer codes it",
    "start": "1496480",
    "end": "1501860"
  },
  {
    "text": "executes the same as with cloud formation so we have improved and extended cloud formation to handle",
    "start": "1501860",
    "end": "1508370"
  },
  {
    "text": "server less specific components right so instead of let's say maintaining 25",
    "start": "1508370",
    "end": "1514190"
  },
  {
    "text": "lines of codes it could be 5 it could be 10 right it lessens the length of the template that you're using and at the",
    "start": "1514190",
    "end": "1520400"
  },
  {
    "text": "same time as we had a double Scott formation you are able to deploy that with other services as well including",
    "start": "1520400",
    "end": "1527830"
  },
  {
    "text": "code pipeline ok so that's it for easy interpretation with the same function",
    "start": "1527830",
    "end": "1534740"
  },
  {
    "text": "with the same feature or with the same tool we have now what we called it was previously some local but now we call it",
    "start": "1534740",
    "end": "1541880"
  },
  {
    "text": "aw Sam CLI SoDo so anyone has used lambda before",
    "start": "1541880",
    "end": "1548510"
  },
  {
    "text": "okay quite a few so pretty too prior to this prior to prior to you to test your",
    "start": "1548510",
    "end": "1555210"
  },
  {
    "text": "lambda function you of course would have to deploy it and see how it functions on the cloud right so it requires internet",
    "start": "1555210",
    "end": "1562980"
  },
  {
    "text": "connectivity there's latency because you're sending data from your machine going to to",
    "start": "1562980",
    "end": "1568650"
  },
  {
    "text": "address for example right with some CLI you are now you now have the capability",
    "start": "1568650",
    "end": "1576900"
  },
  {
    "text": "to test lambda functions on your machine so if you're working on a laptop or a PC",
    "start": "1576900",
    "end": "1583050"
  },
  {
    "text": "or a Linux box you can test your lambda functions without needing to deploy them",
    "start": "1583050",
    "end": "1588950"
  },
  {
    "text": "to AWS right so what it does it it spins up a container that emulates the",
    "start": "1588950",
    "end": "1596910"
  },
  {
    "text": "environment of lambda and lambda function right so with that you now take",
    "start": "1596910",
    "end": "1603960"
  },
  {
    "text": "away the latency of having to set your code back and forth so quickly you can develop and you can even do that without",
    "start": "1603960",
    "end": "1611400"
  },
  {
    "text": "the internet connection and come the time that you need to do that you would want to deploy then you do the",
    "start": "1611400",
    "end": "1617430"
  },
  {
    "text": "deployment to two EWS so that is on the frequent and small changes okay so what",
    "start": "1617430",
    "end": "1627090"
  },
  {
    "text": "about controlling the impact what if okay I deployed my lambda function it's very critical lambda",
    "start": "1627090",
    "end": "1633930"
  },
  {
    "text": "function but suddenly I realize there's an enhancement or a change that I would need to do okay but its life its",
    "start": "1633930",
    "end": "1641550"
  },
  {
    "text": "production okay so the feature this particular feature would now enable you",
    "start": "1641550",
    "end": "1647010"
  },
  {
    "text": "to create versions of your function such that you can deploy a version two and",
    "start": "1647010",
    "end": "1652920"
  },
  {
    "text": "then once you deploy you tell it SS I",
    "start": "1652920",
    "end": "1660930"
  },
  {
    "text": "only want 5% on on this new code and then 95% on my production code so at",
    "start": "1660930",
    "end": "1668220"
  },
  {
    "text": "least that 5% those are the ones at risk of maybe getting a failure because it's new right so now you have the capability",
    "start": "1668220",
    "end": "1676650"
  },
  {
    "text": "to do can deploy so you can put weights I think the third one two three the third command actually puts the weights on the",
    "start": "1676650",
    "end": "1684540"
  },
  {
    "text": "distribution of requests that would be executed by your lambda version such",
    "start": "1684540",
    "end": "1689580"
  },
  {
    "text": "version 1 and that's version - okay and of course this is one if in terms of the",
    "start": "1689580",
    "end": "1699510"
  },
  {
    "text": "the overall workflow of development we have our AWS code services so I have",
    "start": "1699510",
    "end": "1710010"
  },
  {
    "text": "seen a couple of customers using code",
    "start": "1710010",
    "end": "1715920"
  },
  {
    "text": "services and it it they it puts together a lot of tools for developers like IDE",
    "start": "1715920",
    "end": "1723920"
  },
  {
    "text": "the automation of compiling building code etc so going through the services",
    "start": "1723920",
    "end": "1730760"
  },
  {
    "text": "on the third icon we call it EWS code commit that is a good compatible repository so if anyone",
    "start": "1730760",
    "end": "1738840"
  },
  {
    "text": "of you are using probably you are get lab or github it's the same thing so you use the same client but in this case",
    "start": "1738840",
    "end": "1746250"
  },
  {
    "text": "this is a repository in AWS yes so just the first part storing your code the",
    "start": "1746250",
    "end": "1752040"
  },
  {
    "text": "second one is building your code so that's AWS code build performs the building and the testing of your",
    "start": "1752040",
    "end": "1758820"
  },
  {
    "text": "artifacts so if you want let's say if you want to automate that every night I",
    "start": "1758820",
    "end": "1763860"
  },
  {
    "text": "would want to compile my Java code the dot Java and convert it to classes and",
    "start": "1763860",
    "end": "1770340"
  },
  {
    "text": "then package it into a war file and ear file or a jar file you can have that",
    "start": "1770340",
    "end": "1775740"
  },
  {
    "text": "automated and you have code deploy code deploy would help you automate deploying",
    "start": "1775740",
    "end": "1783120"
  },
  {
    "text": "through the different environments that you might have I may have a dev I may have QA and I may have production and",
    "start": "1783120",
    "end": "1791040"
  },
  {
    "text": "the code and code deploy would help in doing that and you also have code pipeline AWS code client with stitches",
    "start": "1791040",
    "end": "1797940"
  },
  {
    "text": "them together so bill I'm sorry code commit which is the store then you build",
    "start": "1797940",
    "end": "1803100"
  },
  {
    "text": "then you deploy then it monitors the execution for the different components and one of my well my personality",
    "start": "1803100",
    "end": "1812160"
  },
  {
    "text": "awws code star so it takes all of those on top pipeline deploy commit code build",
    "start": "1812160",
    "end": "1821260"
  },
  {
    "text": "and put it and puts it in a service where if you create it one it gives you",
    "start": "1821260",
    "end": "1827980"
  },
  {
    "text": "an IDE so we have cloud 9 which is our cloud IDE you will have that of course",
    "start": "1827980",
    "end": "1834610"
  },
  {
    "text": "you still have the choice to move let's say if you're using Eclipse or some other IDE you can still use that but we",
    "start": "1834610",
    "end": "1840490"
  },
  {
    "text": "give you that option and then it actually apart from the services you",
    "start": "1840490",
    "end": "1846670"
  },
  {
    "text": "have integration with JIRA at lesions so if you are looking into ticketing into project management there is integration",
    "start": "1846670",
    "end": "1853990"
  },
  {
    "text": "that you can use okay so code the code star makes it easy to start us with the",
    "start": "1853990",
    "end": "1861370"
  },
  {
    "text": "topic is getting started easily with serverless and microservices so one",
    "start": "1861370",
    "end": "1868030"
  },
  {
    "text": "suggestion once you get out of this session try to start up a server less",
    "start": "1868030",
    "end": "1873310"
  },
  {
    "text": "application using code star so it will create all the needed components that",
    "start": "1873310",
    "end": "1880570"
  },
  {
    "text": "you would require to run a server less application so it will ask for a repository where you will be keeping",
    "start": "1880570",
    "end": "1887020"
  },
  {
    "text": "your code it will ask you if you're going to use cloud 9 has your IDE or",
    "start": "1887020",
    "end": "1892480"
  },
  {
    "text": "have some other idea for that one and it will give you sample codes and in fact",
    "start": "1892480",
    "end": "1898960"
  },
  {
    "text": "once you click the end the endpoint it will show you the initial application",
    "start": "1898960",
    "end": "1905380"
  },
  {
    "text": "and then you can do modifications as you'd want to it write it they you can also provide with remember I've",
    "start": "1905380",
    "end": "1912460"
  },
  {
    "text": "mentioned Sam the DLL files for the configurations per service right right",
    "start": "1912460",
    "end": "1921970"
  },
  {
    "start": "1921000",
    "end": "1921000"
  },
  {
    "text": "job zero for ews with security so as with any service that we we introduce",
    "start": "1921970",
    "end": "1930730"
  },
  {
    "text": "Security's our foremost concern so that is something that we extend to the",
    "start": "1930730",
    "end": "1936640"
  },
  {
    "text": "customers as well in terms of capabilities that's why we have fine-grained access control so you can",
    "start": "1936640",
    "end": "1943210"
  },
  {
    "text": "control the resources by assigning rolls to the different server let's call components that you're deploying and at",
    "start": "1943210",
    "end": "1949840"
  },
  {
    "text": "the same time this is something that I would highly suggest especially to those who are using Amazon history or our",
    "start": "1949840",
    "end": "1956950"
  },
  {
    "text": "simple story simple storage service try not to deploy s3 as public buckets",
    "start": "1956950",
    "end": "1964920"
  },
  {
    "text": "so I know developers would it would be easier for developers okay I don't need",
    "start": "1964920",
    "end": "1970450"
  },
  {
    "text": "to set the restrictions in alright but make it a practice to port NDK",
    "start": "1970450",
    "end": "1975880"
  },
  {
    "text": "you'll never know you say this is harmless data then it goes out and it's not pretty harmless so that's a practice",
    "start": "1975880",
    "end": "1982900"
  },
  {
    "text": "again we will provide the technology but it's still up to the customers to actually make use of that technology and",
    "start": "1982900",
    "end": "1989820"
  },
  {
    "text": "Amazon kognito gives you the capability to do so by providing with you with user",
    "start": "1989820",
    "end": "1996370"
  },
  {
    "text": "pools for security so instead of setting that history bucket public create a",
    "start": "1996370",
    "end": "2002490"
  },
  {
    "text": "kognito user that you can get a token from so that it can authenticate okay so",
    "start": "2002490",
    "end": "2012440"
  },
  {
    "text": "don't take don't just take our word for it when it comes to security but we do comply with PCI and HIPAA when it comes",
    "start": "2012440",
    "end": "2020850"
  },
  {
    "text": "to our server less application so yes we will say it's secure but we have proof",
    "start": "2020850",
    "end": "2026070"
  },
  {
    "text": "or we have other stations from third party saying that the server less applications or services that you will",
    "start": "2026070",
    "end": "2032160"
  },
  {
    "text": "be using is HIPAA or PCI compliant use",
    "start": "2032160",
    "end": "2037320"
  },
  {
    "start": "2036000",
    "end": "2036000"
  },
  {
    "text": "cases more often than not I see web applications because these are the",
    "start": "2037320",
    "end": "2042930"
  },
  {
    "text": "easiest to do you just need 12 if you are on HTML html5 developer or you do",
    "start": "2042930",
    "end": "2050570"
  },
  {
    "text": "JavaScript right so you can just like have a static website that calls API",
    "start": "2050570",
    "end": "2056879"
  },
  {
    "text": "gateways that execute slammed at the backend then you don't need to maintain service backends as well if you would",
    "start": "2056880",
    "end": "2063419"
  },
  {
    "text": "want like automatically process files in my case I'm I have this area where if I",
    "start": "2063419",
    "end": "2070560"
  },
  {
    "text": "upload a file to s3 it fires and gets the metadata of the file and inserts it",
    "start": "2070560",
    "end": "2077370"
  },
  {
    "text": "to a search engine so automatically when I load files it does indexing for me so back-end",
    "start": "2077370",
    "end": "2082648"
  },
  {
    "text": "processing data processing can be done as well but mind the timeouts for lambda",
    "start": "2082649",
    "end": "2088200"
  },
  {
    "text": "functions or do not execute huge batch operations using lambda but you can",
    "start": "2088200",
    "end": "2093898"
  },
  {
    "text": "insert it in a queue remember the decoupling that I've mentioned earlier you insert something in s3 the a lambda",
    "start": "2093899",
    "end": "2102059"
  },
  {
    "text": "function fires up and then insert it inserts it into a queue wing or a",
    "start": "2102059",
    "end": "2107609"
  },
  {
    "text": "notification service and then at the back end you can even have like sparked or some other processing engine that",
    "start": "2107609",
    "end": "2115440"
  },
  {
    "text": "picks up from the queue okay so artificial intelligence chat BOTS and",
    "start": "2115440",
    "end": "2121530"
  },
  {
    "text": "automation so going to the proof points cost would be something that you might",
    "start": "2121530",
    "end": "2128880"
  },
  {
    "text": "be interested in well of course you'd be but again it depends on the usage because remember I mentioned that if",
    "start": "2128880",
    "end": "2135000"
  },
  {
    "text": "you're running a server or an instance 24 by 7 you're paying for it whether it's idle or not so customers find it",
    "start": "2135000",
    "end": "2143970"
  },
  {
    "text": "find cost savings by using server less instance then we do have a lot of",
    "start": "2143970",
    "end": "2149430"
  },
  {
    "text": "customers that have moved to that for different reasons right so of course it's up to you to find whatever reason",
    "start": "2149430",
    "end": "2156029"
  },
  {
    "text": "that would fit in your particular use case and if you would want further",
    "start": "2156029",
    "end": "2162359"
  },
  {
    "text": "information so we do have a website for server less computing so server less computing and applications it has",
    "start": "2162359",
    "end": "2167970"
  },
  {
    "text": "templates it has so you don't have to start from scratch we do have a couple of templates and cloud for that would be",
    "start": "2167970",
    "end": "2175079"
  },
  {
    "text": "cloud formation templates or images that would help you get started with server",
    "start": "2175079",
    "end": "2180990"
  },
  {
    "text": "less and with that that would be my last",
    "start": "2180990",
    "end": "2187170"
  },
  {
    "text": "slide so so the the QR code would have to be shown I guess right so thank you",
    "start": "2187170",
    "end": "2193740"
  },
  {
    "text": "thank you for your time Thank You Dennis if you have any",
    "start": "2193740",
    "end": "2200850"
  },
  {
    "text": "questions about this session you can find Dennis or any of the AWS architecture team at the AWS booth",
    "start": "2200850",
    "end": "2206930"
  },
  {
    "text": "remember that we would love your feedback scan the QR code to have a say about this session and stand to win a",
    "start": "2206930",
    "end": "2213030"
  },
  {
    "text": "limited edition swag from us thank you",
    "start": "2213030",
    "end": "2217850"
  }
]