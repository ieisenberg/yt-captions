[
  {
    "text": "[Music]",
    "start": "610",
    "end": "5990"
  },
  {
    "text": "hi my name is trevor sullivan i'm an AWS",
    "start": "5990",
    "end": "9660"
  },
  {
    "text": "solutions architect and welcome to this",
    "start": "9660",
    "end": "11550"
  },
  {
    "text": "video in the dotnet learning series did",
    "start": "11550",
    "end": "14340"
  },
  {
    "text": "you know that you can create your own",
    "start": "14340",
    "end": "15540"
  },
  {
    "text": "custom events in the AWS cloud there are",
    "start": "15540",
    "end": "18420"
  },
  {
    "text": "a few different ways to accomplish this",
    "start": "18420",
    "end": "20070"
  },
  {
    "text": "such as sending a message to a simple",
    "start": "20070",
    "end": "22230"
  },
  {
    "text": "notification service topic or SNS topic",
    "start": "22230",
    "end": "25220"
  },
  {
    "text": "another option is to send your event",
    "start": "25220",
    "end": "27420"
  },
  {
    "text": "data to the Amazon Cloud watch events",
    "start": "27420",
    "end": "29160"
  },
  {
    "text": "service by default many other AWS",
    "start": "29160",
    "end": "32640"
  },
  {
    "text": "services send key notifications to cloud",
    "start": "32640",
    "end": "35340"
  },
  {
    "text": "watch events but what if you wanted to",
    "start": "35340",
    "end": "37320"
  },
  {
    "text": "create your own custom event",
    "start": "37320",
    "end": "38579"
  },
  {
    "text": "notification I have good news you can as",
    "start": "38579",
    "end": "41340"
  },
  {
    "text": "an example scenario let's say that you",
    "start": "41340",
    "end": "44010"
  },
  {
    "text": "were taking a local backup of some",
    "start": "44010",
    "end": "45600"
  },
  {
    "text": "important files on an ec2 instance once",
    "start": "45600",
    "end": "48870"
  },
  {
    "text": "the backup is completed your local",
    "start": "48870",
    "end": "51030"
  },
  {
    "text": "script uploads the backup archive to an",
    "start": "51030",
    "end": "53039"
  },
  {
    "text": "Amazon s3 bucket next you want to trim",
    "start": "53039",
    "end": "56430"
  },
  {
    "text": "your oldest backups to save on storage",
    "start": "56430",
    "end": "58469"
  },
  {
    "text": "costs by using a short running and",
    "start": "58469",
    "end": "60539"
  },
  {
    "text": "cost-effective lambda function but how",
    "start": "60539",
    "end": "63660"
  },
  {
    "text": "does that lambda function know when your",
    "start": "63660",
    "end": "65220"
  },
  {
    "text": "backup and upload process has completed",
    "start": "65220",
    "end": "66840"
  },
  {
    "text": "on your ec2 instance that's where cloud",
    "start": "66840",
    "end": "69689"
  },
  {
    "text": "watch events comes into play cloud watch",
    "start": "69689",
    "end": "72540"
  },
  {
    "text": "events enables you to trigger one or",
    "start": "72540",
    "end": "74400"
  },
  {
    "text": "more targets across a wide variety of",
    "start": "74400",
    "end": "76470"
  },
  {
    "text": "other AWS cloud services these targets",
    "start": "76470",
    "end": "79920"
  },
  {
    "text": "can include services like AWS step",
    "start": "79920",
    "end": "81869"
  },
  {
    "text": "functions an SNS topic Systems Manager",
    "start": "81869",
    "end": "84810"
  },
  {
    "text": "run command and yes even an AWS lambda",
    "start": "84810",
    "end": "88049"
  },
  {
    "text": "function in the rest of this video we'll",
    "start": "88049",
    "end": "90479"
  },
  {
    "text": "explore how you can send your own custom",
    "start": "90479",
    "end": "92369"
  },
  {
    "text": "application events to the Amazon Cloud",
    "start": "92369",
    "end": "94770"
  },
  {
    "text": "watch service using the AWS tools for",
    "start": "94770",
    "end": "97409"
  },
  {
    "text": "PowerShell once you've installed the AWS",
    "start": "97409",
    "end": "100350"
  },
  {
    "text": "tools for PowerShell also simply known",
    "start": "100350",
    "end": "102420"
  },
  {
    "text": "as the AWS PowerShell module you'll set",
    "start": "102420",
    "end": "105060"
  },
  {
    "text": "up your credentials file and you'll be",
    "start": "105060",
    "end": "106500"
  },
  {
    "text": "ready to go we've covered the setup",
    "start": "106500",
    "end": "108810"
  },
  {
    "text": "process in a separate video so if you're",
    "start": "108810",
    "end": "110820"
  },
  {
    "text": "brand new to AWS or new to PowerShell be",
    "start": "110820",
    "end": "113909"
  },
  {
    "text": "sure to check it out before moving on",
    "start": "113909",
    "end": "115439"
  },
  {
    "text": "before we go any further let's start out",
    "start": "115439",
    "end": "118170"
  },
  {
    "text": "by exploring the AWS PowerShell commands",
    "start": "118170",
    "end": "120540"
  },
  {
    "text": "that allow you to interact with cloud",
    "start": "120540",
    "end": "122369"
  },
  {
    "text": "watch events api's to do this we use the",
    "start": "122369",
    "end": "125369"
  },
  {
    "text": "get AWS command land to ask for a list",
    "start": "125369",
    "end": "128910"
  },
  {
    "text": "of commands by AWS service name so we'll",
    "start": "128910",
    "end": "133140"
  },
  {
    "text": "switch",
    "start": "133140",
    "end": "133740"
  },
  {
    "text": "over to our shell here and call get AWS",
    "start": "133740",
    "end": "136050"
  },
  {
    "text": "command let name - service events you",
    "start": "136050",
    "end": "141390"
  },
  {
    "text": "don't need to know the exact service",
    "start": "141390",
    "end": "142950"
  },
  {
    "text": "name or type it out in full instead just",
    "start": "142950",
    "end": "145830"
  },
  {
    "text": "type part of the unique service name",
    "start": "145830",
    "end": "147420"
  },
  {
    "text": "such as events to perform a pattern",
    "start": "147420",
    "end": "149910"
  },
  {
    "text": "based match in response you'll see a",
    "start": "149910",
    "end": "152610"
  },
  {
    "text": "list of roughly a dozen PowerShell",
    "start": "152610",
    "end": "154290"
  },
  {
    "text": "commands that perform various actions",
    "start": "154290",
    "end": "156000"
  },
  {
    "text": "against the cloud watch events service",
    "start": "156000",
    "end": "158450"
  },
  {
    "text": "take special note of the right cwe event",
    "start": "158450",
    "end": "161670"
  },
  {
    "text": "command this is the command that we'll",
    "start": "161670",
    "end": "163530"
  },
  {
    "text": "be using to write our custom events to",
    "start": "163530",
    "end": "165630"
  },
  {
    "text": "cloud watch now that we know the",
    "start": "165630",
    "end": "168270"
  },
  {
    "text": "PowerShell commands that we want to call",
    "start": "168270",
    "end": "169860"
  },
  {
    "text": "how do we know which parameters to pass",
    "start": "169860",
    "end": "172050"
  },
  {
    "text": "to this command that's where the power",
    "start": "172050",
    "end": "174120"
  },
  {
    "text": "power shells built-in help system comes",
    "start": "174120",
    "end": "175950"
  },
  {
    "text": "to the rescue",
    "start": "175950",
    "end": "176570"
  },
  {
    "text": "we'll call the get help command to learn",
    "start": "176570",
    "end": "179160"
  },
  {
    "text": "the commands signature so that we know",
    "start": "179160",
    "end": "181110"
  },
  {
    "text": "how to call it correctly so switching",
    "start": "181110",
    "end": "183510"
  },
  {
    "text": "back over to our shell will call the get",
    "start": "183510",
    "end": "185640"
  },
  {
    "text": "help - name write cwe event command as",
    "start": "185640",
    "end": "192210"
  },
  {
    "text": "you'll notice from the built in",
    "start": "192210",
    "end": "193740"
  },
  {
    "text": "documentation this command accepts a",
    "start": "193740",
    "end": "195720"
  },
  {
    "text": "single parameter called - entry however",
    "start": "195720",
    "end": "199230"
  },
  {
    "text": "if you look at the data type that the -",
    "start": "199230",
    "end": "201090"
  },
  {
    "text": "entry parameter expects you'll notice",
    "start": "201090",
    "end": "203400"
  },
  {
    "text": "that it's a dotnet object type that",
    "start": "203400",
    "end": "205170"
  },
  {
    "text": "resides in the Amazon CloudWatch model",
    "start": "205170",
    "end": "207840"
  },
  {
    "text": "dotnet namespace in order to call this",
    "start": "207840",
    "end": "211020"
  },
  {
    "text": "command successfully we first need to",
    "start": "211020",
    "end": "213090"
  },
  {
    "text": "construct an instance of the put events",
    "start": "213090",
    "end": "215490"
  },
  {
    "text": "request entry net class set a few",
    "start": "215490",
    "end": "218640"
  },
  {
    "text": "properties on it and then pass it into",
    "start": "218640",
    "end": "220680"
  },
  {
    "text": "the command invocation there are a",
    "start": "220680",
    "end": "223770"
  },
  {
    "text": "couple of ways to instantiate a dotnet",
    "start": "223770",
    "end": "225450"
  },
  {
    "text": "object in PowerShell first you can use",
    "start": "225450",
    "end": "228270"
  },
  {
    "text": "the traditional new object command with",
    "start": "228270",
    "end": "230250"
  },
  {
    "text": "the tightening parameter",
    "start": "230250",
    "end": "231770"
  },
  {
    "text": "alternatively powershell 5.0 introduced",
    "start": "231770",
    "end": "234720"
  },
  {
    "text": "to the static new method to call a",
    "start": "234720",
    "end": "236790"
  },
  {
    "text": "classes constructor so let's go ahead",
    "start": "236790",
    "end": "239610"
  },
  {
    "text": "and take a look at that now so we'll",
    "start": "239610",
    "end": "242190"
  },
  {
    "text": "switch over to our shell and look at the",
    "start": "242190",
    "end": "243720"
  },
  {
    "text": "Amazon Cloud watch events dot model dot",
    "start": "243720",
    "end": "249530"
  },
  {
    "text": "put events request entry class and then",
    "start": "249530",
    "end": "252750"
  },
  {
    "text": "we'll look at the new method on it if",
    "start": "252750",
    "end": "255770"
  },
  {
    "text": "you reference a constructor or method",
    "start": "255770",
    "end": "258299"
  },
  {
    "text": "without the parentheses PowerShell will",
    "start": "258299",
    "end": "260579"
  },
  {
    "text": "return a list of the overloads for that",
    "start": "260580",
    "end": "262530"
  },
  {
    "text": "method in this case there's only a",
    "start": "262530",
    "end": "265110"
  },
  {
    "text": "single parameter list default",
    "start": "265110",
    "end": "267190"
  },
  {
    "text": "constructor so let's go ahead and use",
    "start": "267190",
    "end": "268930"
  },
  {
    "text": "that now we'll actually call the",
    "start": "268930",
    "end": "271600"
  },
  {
    "text": "constructor and assign the new object",
    "start": "271600",
    "end": "273310"
  },
  {
    "text": "instance to a variable named my event so",
    "start": "273310",
    "end": "277480"
  },
  {
    "text": "switching back to the shell here we'll",
    "start": "277480",
    "end": "279190"
  },
  {
    "text": "create a variable called my event and",
    "start": "279190",
    "end": "280930"
  },
  {
    "text": "set it equal to a new instance of the",
    "start": "280930",
    "end": "285190"
  },
  {
    "text": "put events request entry class great so",
    "start": "285190",
    "end": "296950"
  },
  {
    "text": "now we've got a new object so what do we",
    "start": "296950",
    "end": "298750"
  },
  {
    "text": "do now well we need to set some",
    "start": "298750",
    "end": "300790"
  },
  {
    "text": "properties on this objects before we can",
    "start": "300790",
    "end": "303070"
  },
  {
    "text": "pass it into the right cwe event command",
    "start": "303070",
    "end": "305820"
  },
  {
    "text": "how do you know which properties to set",
    "start": "305820",
    "end": "308200"
  },
  {
    "text": "a great starting place is to pipe the",
    "start": "308200",
    "end": "310480"
  },
  {
    "text": "object into the get member powershell",
    "start": "310480",
    "end": "312310"
  },
  {
    "text": "command the get member command performs",
    "start": "312310",
    "end": "314800"
  },
  {
    "text": "type reflection over the objects passed",
    "start": "314800",
    "end": "317140"
  },
  {
    "text": "into it and it will show you the",
    "start": "317140",
    "end": "318850"
  },
  {
    "text": "properties and methods on that object",
    "start": "318850",
    "end": "321810"
  },
  {
    "text": "you should also examine the Amazon Cloud",
    "start": "321810",
    "end": "324310"
  },
  {
    "text": "watch documentation for the put events",
    "start": "324310",
    "end": "326080"
  },
  {
    "text": "API as the authoritative source to",
    "start": "326080",
    "end": "328570"
  },
  {
    "text": "determine what input the service expects",
    "start": "328570",
    "end": "330540"
  },
  {
    "text": "so let's go ahead and take a look at the",
    "start": "330540",
    "end": "332919"
  },
  {
    "text": "get member command first you'll need to",
    "start": "332919",
    "end": "339910"
  },
  {
    "text": "set the time property for the event this",
    "start": "339910",
    "end": "342310"
  },
  {
    "text": "represents the point in time that the",
    "start": "342310",
    "end": "343990"
  },
  {
    "text": "event took place to do that we reference",
    "start": "343990",
    "end": "347470"
  },
  {
    "text": "the my event variable containing the",
    "start": "347470",
    "end": "349240"
  },
  {
    "text": "event object then we specify the time",
    "start": "349240",
    "end": "352240"
  },
  {
    "text": "property and set that equal to the",
    "start": "352240",
    "end": "354220"
  },
  {
    "text": "output of get date which simply returns",
    "start": "354220",
    "end": "356410"
  },
  {
    "text": "the current date and time",
    "start": "356410",
    "end": "357810"
  },
  {
    "text": "next you can optionally add one or more",
    "start": "357810",
    "end": "360370"
  },
  {
    "text": "affected AWS cloud resources to a string",
    "start": "360370",
    "end": "363160"
  },
  {
    "text": "collection setting the resources",
    "start": "363160",
    "end": "365680"
  },
  {
    "text": "property is not mandatory but it helps",
    "start": "365680",
    "end": "367840"
  },
  {
    "text": "correlate application events to specific",
    "start": "367840",
    "end": "369850"
  },
  {
    "text": "resources inside of your AWS account if",
    "start": "369850",
    "end": "372160"
  },
  {
    "text": "you do add any strings to this property",
    "start": "372160",
    "end": "374710"
  },
  {
    "text": "they must be valid at Amazon resource",
    "start": "374710",
    "end": "376780"
  },
  {
    "text": "names or AR ends you can also set this",
    "start": "376780",
    "end": "380980"
  },
  {
    "text": "detail property to a valid JSON string",
    "start": "380980",
    "end": "383860"
  },
  {
    "text": "this property provides context for the",
    "start": "383860",
    "end": "386260"
  },
  {
    "text": "event so that the event receiver knows",
    "start": "386260",
    "end": "388419"
  },
  {
    "text": "what's happening so let's go ahead and",
    "start": "388419",
    "end": "390370"
  },
  {
    "text": "switch to the shell here and we'll grab",
    "start": "390370",
    "end": "393820"
  },
  {
    "text": "the detail property and set that to a",
    "start": "393820",
    "end": "397650"
  },
  {
    "text": "powershell hash table",
    "start": "397650",
    "end": "400389"
  },
  {
    "text": "and then pipe that into the built-in",
    "start": "400389",
    "end": "404020"
  },
  {
    "text": "convert to JSON command so if we do my",
    "start": "404020",
    "end": "407860"
  },
  {
    "text": "event detail you can see that we have a",
    "start": "407860",
    "end": "410020"
  },
  {
    "text": "valid JSON string you also need to set",
    "start": "410020",
    "end": "413110"
  },
  {
    "text": "the source property indicating where the",
    "start": "413110",
    "end": "415150"
  },
  {
    "text": "event was triggered from you can simply",
    "start": "415150",
    "end": "417400"
  },
  {
    "text": "set the source property to a string like",
    "start": "417400",
    "end": "419139"
  },
  {
    "text": "PowerShell or perhaps more usefully the",
    "start": "419139",
    "end": "421659"
  },
  {
    "text": "powershell run space instance ID which",
    "start": "421659",
    "end": "424000"
  },
  {
    "text": "uniquely represents a powershell",
    "start": "424000",
    "end": "425830"
  },
  {
    "text": "instance this is more useful if you're",
    "start": "425830",
    "end": "428199"
  },
  {
    "text": "trying to debug a program using log",
    "start": "428199",
    "end": "429879"
  },
  {
    "text": "files containing that powershell run",
    "start": "429879",
    "end": "431770"
  },
  {
    "text": "space ID so let's go ahead and set that",
    "start": "431770",
    "end": "434620"
  },
  {
    "text": "source property now so well do my event",
    "start": "434620",
    "end": "436840"
  },
  {
    "text": "source equals host run space dot",
    "start": "436840",
    "end": "440949"
  },
  {
    "text": "instance ID gooood and if we take a look",
    "start": "440949",
    "end": "444580"
  },
  {
    "text": "at the source property you'll see that",
    "start": "444580",
    "end": "446409"
  },
  {
    "text": "we have to run space ID the last",
    "start": "446409",
    "end": "448330"
  },
  {
    "text": "property you need to set is the detail",
    "start": "448330",
    "end": "450310"
  },
  {
    "text": "type property which is a custom field",
    "start": "450310",
    "end": "451840"
  },
  {
    "text": "that specifies the type of event that",
    "start": "451840",
    "end": "454000"
  },
  {
    "text": "occurred so we'll go ahead and set my",
    "start": "454000",
    "end": "456669"
  },
  {
    "text": "event dot detail type equal to something",
    "start": "456669",
    "end": "462779"
  },
  {
    "text": "happened with the my event object fully",
    "start": "462779",
    "end": "467560"
  },
  {
    "text": "configured you're finally ready to call",
    "start": "467560",
    "end": "469479"
  },
  {
    "text": "the right cwe event command simply call",
    "start": "469479",
    "end": "472270"
  },
  {
    "text": "the right cwe event command specifying",
    "start": "472270",
    "end": "474879"
  },
  {
    "text": "the dash entry parameter and then pass",
    "start": "474879",
    "end": "477039"
  },
  {
    "text": "in your my event variable in order to",
    "start": "477039",
    "end": "480069"
  },
  {
    "text": "consume events sent by your custom",
    "start": "480069",
    "end": "482080"
  },
  {
    "text": "powershell application you'll need to",
    "start": "482080",
    "end": "483969"
  },
  {
    "text": "configure a cloud watch event rule that",
    "start": "483969",
    "end": "486159"
  },
  {
    "text": "is a topic for a different video however",
    "start": "486159",
    "end": "487810"
  },
  {
    "text": "so let's go ahead and run right cwe",
    "start": "487810",
    "end": "490930"
  },
  {
    "text": "event specify - entry and then pass in",
    "start": "490930",
    "end": "494650"
  },
  {
    "text": "my event as you can see we get back a",
    "start": "494650",
    "end": "497979"
  },
  {
    "text": "populated entry which indicates that the",
    "start": "497979",
    "end": "500050"
  },
  {
    "text": "command ran successfully I hope you",
    "start": "500050",
    "end": "502629"
  },
  {
    "text": "enjoyed learning about sending custom",
    "start": "502629",
    "end": "504099"
  },
  {
    "text": "events to Amazon Cloud watch from",
    "start": "504099",
    "end": "505779"
  },
  {
    "text": "PowerShell keep an eye out for future",
    "start": "505779",
    "end": "507639"
  },
  {
    "text": "videos related to PowerShell development",
    "start": "507639",
    "end": "509800"
  },
  {
    "text": "on AWS thank you",
    "start": "509800",
    "end": "513450"
  },
  {
    "text": "[Music]",
    "start": "513450",
    "end": "522929"
  }
]