[
  {
    "start": "0",
    "end": "47000"
  },
  {
    "text": "- Hello. Welcome to 'Back To Basics'.",
    "start": "6150",
    "end": "8340"
  },
  {
    "text": "In this episode,",
    "start": "8340",
    "end": "9510"
  },
  {
    "text": "we are going to talk\nabout database sharding",
    "start": "9510",
    "end": "11970"
  },
  {
    "text": "to horizontally scale\nyour relational databases.",
    "start": "11970",
    "end": "14940"
  },
  {
    "text": "Four years ago,",
    "start": "14940",
    "end": "15773"
  },
  {
    "text": "I was working with a\nlast-mile delivery customer",
    "start": "15773",
    "end": "18539"
  },
  {
    "text": "who were dealing with database\nscalability challenges.",
    "start": "18540",
    "end": "21660"
  },
  {
    "text": "They had a very good problem.",
    "start": "21660",
    "end": "23250"
  },
  {
    "text": "That is, significant growth\nin number of customers",
    "start": "23250",
    "end": "26130"
  },
  {
    "text": "in a short amount of time.",
    "start": "26130",
    "end": "28080"
  },
  {
    "text": "They implemented different design patterns",
    "start": "28080",
    "end": "30119"
  },
  {
    "text": "to increase system throughput.",
    "start": "30120",
    "end": "32160"
  },
  {
    "text": "That is, adding more read replicas,",
    "start": "32160",
    "end": "34530"
  },
  {
    "text": "leveraging cache for\nfrequently accessed data,",
    "start": "34530",
    "end": "36870"
  },
  {
    "text": "and partitioning and archiving data.",
    "start": "36870",
    "end": "38883"
  },
  {
    "text": "It worked for a few months,",
    "start": "39790",
    "end": "41430"
  },
  {
    "text": "but the growth of databases\nwere reaching vertical limits",
    "start": "41430",
    "end": "44640"
  },
  {
    "text": "and they needed to plan\nfor additional growth.",
    "start": "44640",
    "end": "47520"
  },
  {
    "start": "47000",
    "end": "127000"
  },
  {
    "text": "This is when they considered\nhorizontal database sharding.",
    "start": "47520",
    "end": "51030"
  },
  {
    "text": "Let's look at a similar customer use case.",
    "start": "51030",
    "end": "53699"
  },
  {
    "text": "Here is an example of a\ntypical e-commerce application",
    "start": "53700",
    "end": "56730"
  },
  {
    "text": "with a three-tier architecture.",
    "start": "56730",
    "end": "58710"
  },
  {
    "text": "The architecture includes web tier,",
    "start": "58710",
    "end": "60960"
  },
  {
    "text": "that interacts with the\norder management application,",
    "start": "60960",
    "end": "63510"
  },
  {
    "text": "and backend databases to\ncomplete the order lifecycle.",
    "start": "63510",
    "end": "66960"
  },
  {
    "text": "As e-commerce companies acquire new users,",
    "start": "66960",
    "end": "70200"
  },
  {
    "text": "database size and number of\ndatabase requests per second",
    "start": "70200",
    "end": "73920"
  },
  {
    "text": "increase for their order database.",
    "start": "73920",
    "end": "76560"
  },
  {
    "text": "As the number of incoming orders increase,",
    "start": "76560",
    "end": "79470"
  },
  {
    "text": "database size grows",
    "start": "79470",
    "end": "81000"
  },
  {
    "text": "along with increasing\nnumber of database requests,",
    "start": "81000",
    "end": "84000"
  },
  {
    "text": "increasing the average response time",
    "start": "84000",
    "end": "86550"
  },
  {
    "text": "until it reaches an inflection point",
    "start": "86550",
    "end": "89100"
  },
  {
    "text": "when the response time goes\nbeyond the client timeout",
    "start": "89100",
    "end": "92250"
  },
  {
    "text": "and client requests start to fail.",
    "start": "92250",
    "end": "95070"
  },
  {
    "text": "In this situation,",
    "start": "95070",
    "end": "96360"
  },
  {
    "text": "you can upgrade database\ninstances from a smaller",
    "start": "96360",
    "end": "99150"
  },
  {
    "text": "to a larger instance to handle\nadditional user traffic,",
    "start": "99150",
    "end": "102630"
  },
  {
    "text": "but you will reach\nvertical limits eventually.",
    "start": "102630",
    "end": "105540"
  },
  {
    "text": "When the limits are reached,",
    "start": "105540",
    "end": "107310"
  },
  {
    "text": "you still face increased\naverage response time.",
    "start": "107310",
    "end": "111360"
  },
  {
    "text": "This phenomena can also be\nexplained with Little's Law.",
    "start": "111360",
    "end": "115650"
  },
  {
    "text": "It says, as the average number\nof requests being processed",
    "start": "115650",
    "end": "119940"
  },
  {
    "text": "and average rate of\nincoming requests increase,",
    "start": "119940",
    "end": "123390"
  },
  {
    "text": "the average time it takes\na request increases.",
    "start": "123390",
    "end": "128250"
  },
  {
    "start": "127000",
    "end": "156000"
  },
  {
    "text": "Now let's look at how it works\nwhen we do horizontal scaling",
    "start": "128250",
    "end": "131700"
  },
  {
    "text": "instead of vertical scaling.",
    "start": "131700",
    "end": "133860"
  },
  {
    "text": "As the number of orders increases,",
    "start": "133860",
    "end": "136350"
  },
  {
    "text": "you distribute the orders\nacross multiple database shards.",
    "start": "136350",
    "end": "139803"
  },
  {
    "text": "The number of incoming\ndatabase requests per shard",
    "start": "140700",
    "end": "143849"
  },
  {
    "text": "is still within the limits",
    "start": "143850",
    "end": "145680"
  },
  {
    "text": "and average response time\ndoesn't go beyond client timeout.",
    "start": "145680",
    "end": "149252"
  },
  {
    "text": "As you expect more orders to process,",
    "start": "150210",
    "end": "152490"
  },
  {
    "text": "you can add more shards",
    "start": "152490",
    "end": "154110"
  },
  {
    "text": "without affecting customer experience.",
    "start": "154110",
    "end": "156153"
  },
  {
    "start": "156000",
    "end": "216000"
  },
  {
    "text": "Now, there are a number\nof sharding techniques",
    "start": "157080",
    "end": "159570"
  },
  {
    "text": "that you can use to shard your database.",
    "start": "159570",
    "end": "162060"
  },
  {
    "text": "Identifying the right technique",
    "start": "162060",
    "end": "164010"
  },
  {
    "text": "requires you to consider\nfirst cardinality,",
    "start": "164010",
    "end": "167220"
  },
  {
    "text": "which is possible values of the shard key.",
    "start": "167220",
    "end": "169680"
  },
  {
    "text": "Second, frequency, which\nis probability of storing",
    "start": "169680",
    "end": "173189"
  },
  {
    "text": "specific information\nin a particular shard.",
    "start": "173190",
    "end": "175830"
  },
  {
    "text": "There are different types\nof sharding techniques,",
    "start": "175830",
    "end": "177870"
  },
  {
    "text": "key-based, range-based,\nhash-based, and geo-based.",
    "start": "177870",
    "end": "181922"
  },
  {
    "text": "Here is a customer order\ndatabase, which has customer ID,",
    "start": "182880",
    "end": "186720"
  },
  {
    "text": "order ID, and number of other columns.",
    "start": "186720",
    "end": "189630"
  },
  {
    "text": "The cardinality of customer\nID in this example is 20.",
    "start": "189630",
    "end": "193143"
  },
  {
    "text": "Let's take average number\nof orders per customer",
    "start": "194160",
    "end": "196650"
  },
  {
    "text": "to be balanced across\nthe first 10 customers",
    "start": "196650",
    "end": "199500"
  },
  {
    "text": "and the next 10 customers.",
    "start": "199500",
    "end": "201060"
  },
  {
    "text": "We split the customer\ndatabase using customer ID",
    "start": "201060",
    "end": "204120"
  },
  {
    "text": "as the shard key with\nrange-based partitioning.",
    "start": "204120",
    "end": "207569"
  },
  {
    "text": "Once you have identified sharding method",
    "start": "207570",
    "end": "209790"
  },
  {
    "text": "and database design, the\nnext step is to implement,",
    "start": "209790",
    "end": "213329"
  },
  {
    "text": "which requires some changes\non the application layer.",
    "start": "213330",
    "end": "216660"
  },
  {
    "start": "216000",
    "end": "394000"
  },
  {
    "text": "You'll need to build/re-use a proxy layer",
    "start": "216660",
    "end": "220350"
  },
  {
    "text": "that's responsible for properly\nrouting database requests",
    "start": "220350",
    "end": "223860"
  },
  {
    "text": "from the application\nlayer to database shards.",
    "start": "223860",
    "end": "226890"
  },
  {
    "text": "A number of database engines",
    "start": "226890",
    "end": "228540"
  },
  {
    "text": "natively don't support sharding,",
    "start": "228540",
    "end": "230700"
  },
  {
    "text": "so you need to use a\nproxy layer to do a lookup",
    "start": "230700",
    "end": "233550"
  },
  {
    "text": "and properly request\ndatabase requests to a shard.",
    "start": "233550",
    "end": "237030"
  },
  {
    "text": "Some database engines such as PostgreSQL",
    "start": "237030",
    "end": "239819"
  },
  {
    "text": "have open source proxy implementation",
    "start": "239820",
    "end": "242640"
  },
  {
    "text": "such as PgCat for you to use.",
    "start": "242640",
    "end": "245520"
  },
  {
    "text": "When choosing database sharding\nas your scalability design,",
    "start": "245520",
    "end": "248550"
  },
  {
    "text": "it brings additional complexity\nof maintaining shards",
    "start": "248550",
    "end": "251730"
  },
  {
    "text": "and re-sharding databases\nin case of hot spotting.",
    "start": "251730",
    "end": "255657"
  },
  {
    "text": "AWS reduces a lot of\nmaintenance operational overhead",
    "start": "255657",
    "end": "259769"
  },
  {
    "text": "by removing heavy lift of\ndatabase maintenance activities.",
    "start": "259770",
    "end": "264030"
  },
  {
    "text": "You need to watch for hotspots.",
    "start": "264030",
    "end": "265950"
  },
  {
    "text": "It's possible that certain shards",
    "start": "265950",
    "end": "268380"
  },
  {
    "text": "are accessed more\nfrequently than the others,",
    "start": "268380",
    "end": "271170"
  },
  {
    "text": "leading to uneven resource utilization",
    "start": "271170",
    "end": "273510"
  },
  {
    "text": "and possible performance impact.",
    "start": "273510",
    "end": "276000"
  },
  {
    "text": "In this case, Shard-2 gets\naccessed more frequently",
    "start": "276000",
    "end": "280230"
  },
  {
    "text": "as can be seen from the number of orders.",
    "start": "280230",
    "end": "282960"
  },
  {
    "text": "If hot spotting starts\nimpacting your performance,",
    "start": "282960",
    "end": "286470"
  },
  {
    "text": "you have to re-shard with a new shard,",
    "start": "286470",
    "end": "289680"
  },
  {
    "text": "possibly order ID in this case.",
    "start": "289680",
    "end": "291603"
  },
  {
    "text": "Lastly, your application\ncomplexity increases",
    "start": "292440",
    "end": "295647"
  },
  {
    "text": "due to the introduction of a proxy layer.",
    "start": "295647",
    "end": "298530"
  },
  {
    "text": "Now, coming back to our\noriginal application design,",
    "start": "298530",
    "end": "301860"
  },
  {
    "text": "let's see how it looks when\nwe have multiple shards",
    "start": "301860",
    "end": "305490"
  },
  {
    "text": "on Amazon RDS.",
    "start": "305490",
    "end": "307650"
  },
  {
    "text": "You introduce another RDS instance",
    "start": "307650",
    "end": "310110"
  },
  {
    "text": "independently functioning as a shard.",
    "start": "310110",
    "end": "312479"
  },
  {
    "text": "The shard leverages high availability",
    "start": "312480",
    "end": "314670"
  },
  {
    "text": "best practices of multi-AZ",
    "start": "314670",
    "end": "316620"
  },
  {
    "text": "and additional read replicas.",
    "start": "316620",
    "end": "319169"
  },
  {
    "text": "Afterwards, you add a proxy\nlayer to map shards to ranges",
    "start": "319170",
    "end": "323520"
  },
  {
    "text": "or hashes or something else",
    "start": "323520",
    "end": "325020"
  },
  {
    "text": "depending upon your sharding technique.",
    "start": "325020",
    "end": "327479"
  },
  {
    "text": "As you may have noticed,",
    "start": "327480",
    "end": "328800"
  },
  {
    "text": "you can add virtually as\nmany shards as possible,",
    "start": "328800",
    "end": "332520"
  },
  {
    "text": "but AWS service limits still apply.",
    "start": "332520",
    "end": "335039"
  },
  {
    "text": "You need to check for those limits",
    "start": "335040",
    "end": "336510"
  },
  {
    "text": "when building your sharding strategy.",
    "start": "336510",
    "end": "338790"
  },
  {
    "text": "After sharding, you comparatively",
    "start": "338790",
    "end": "341340"
  },
  {
    "text": "have a smaller number of rows per shard",
    "start": "341340",
    "end": "344130"
  },
  {
    "text": "and queries will take less time to execute",
    "start": "344130",
    "end": "346530"
  },
  {
    "text": "in comparison to all queries\nrunning on the same database.",
    "start": "346530",
    "end": "350310"
  },
  {
    "text": "Along with performance, it\nprovides higher resiliency",
    "start": "350310",
    "end": "354150"
  },
  {
    "text": "as if a database shard\nexperiences any issues.",
    "start": "354150",
    "end": "357449"
  },
  {
    "text": "You can still process customer orders",
    "start": "357450",
    "end": "359550"
  },
  {
    "text": "and avoid complete disruptions.",
    "start": "359550",
    "end": "362280"
  },
  {
    "text": "From a security standpoint,",
    "start": "362280",
    "end": "363990"
  },
  {
    "text": "it reduces blast radius if a\ndatabase shard is compromised.",
    "start": "363990",
    "end": "367802"
  },
  {
    "text": "In summary, it's a good design pattern",
    "start": "368700",
    "end": "371280"
  },
  {
    "text": "when you have already utilized\nall other design patterns",
    "start": "371280",
    "end": "374010"
  },
  {
    "text": "and are still facing\ndatabase scaling challenges.",
    "start": "374010",
    "end": "376710"
  },
  {
    "text": "You will need to spend most of the time",
    "start": "376710",
    "end": "379080"
  },
  {
    "text": "coming up with a scalable\nsharding strategy",
    "start": "379080",
    "end": "381629"
  },
  {
    "text": "to accommodate for growth\nfor many years to come.",
    "start": "381630",
    "end": "384750"
  },
  {
    "text": "Check out the links\nbelow for more details.",
    "start": "384750",
    "end": "386850"
  },
  {
    "text": "Thanks for watching 'Back to\nBasics'. See you next time.",
    "start": "386850",
    "end": "391350"
  }
]