[
  {
    "text": "- [Anusha] Hi everyone.",
    "start": "2550",
    "end": "3659"
  },
  {
    "text": "I'm Anusha, and today I'm\nexcited to walk you through",
    "start": "3660",
    "end": "6900"
  },
  {
    "text": "a demo of a chatbot we have built",
    "start": "6900",
    "end": "9270"
  },
  {
    "text": "using Retrieval Augmented Generation",
    "start": "9270",
    "end": "11640"
  },
  {
    "text": "with Amazon Bedrock and Amazon Redshift.",
    "start": "11640",
    "end": "14313"
  },
  {
    "text": "This chatbot is connected\nto an Amazon Redshift",
    "start": "15270",
    "end": "18150"
  },
  {
    "text": "data warehouse where I have\nloaded the TPC-DS dataset.",
    "start": "18150",
    "end": "22443"
  },
  {
    "text": "For those of you who may\nnot know what TPD-DS is,",
    "start": "23400",
    "end": "26850"
  },
  {
    "text": "it's a sample dataset that represents",
    "start": "26850",
    "end": "28966"
  },
  {
    "text": "a fictional retail company.",
    "start": "28966",
    "end": "31380"
  },
  {
    "text": "It's widely used for analytics testing.",
    "start": "31380",
    "end": "33453"
  },
  {
    "text": "Now, what makes this chatbot unique",
    "start": "34615",
    "end": "37620"
  },
  {
    "text": "is how it uses data\ndirectly from Redshift.",
    "start": "37620",
    "end": "41399"
  },
  {
    "text": "It answers your questions\nby first identifying",
    "start": "41400",
    "end": "44730"
  },
  {
    "text": "which columns in the Redshift schema",
    "start": "44730",
    "end": "47820"
  },
  {
    "text": "contain the data relevant to your query.",
    "start": "47820",
    "end": "50400"
  },
  {
    "text": "It then dynamically builds SQL queries",
    "start": "50400",
    "end": "53040"
  },
  {
    "text": "to get you the right answer.",
    "start": "53040",
    "end": "54420"
  },
  {
    "text": "And here's the really exciting part.",
    "start": "54420",
    "end": "57750"
  },
  {
    "text": "It works independently\nof the table schema.",
    "start": "57750",
    "end": "60333"
  },
  {
    "text": "This chatbot pulls the\nschema directly from",
    "start": "61200",
    "end": "63870"
  },
  {
    "text": "Redshift system tables so it can adopt",
    "start": "63870",
    "end": "66720"
  },
  {
    "text": "to any data set across any industry.",
    "start": "66720",
    "end": "68973"
  },
  {
    "text": "Let's take a look at the architecture",
    "start": "73950",
    "end": "75630"
  },
  {
    "text": "that powers this chatbot.",
    "start": "75630",
    "end": "76930"
  },
  {
    "text": "This solution uses Amazon Bedrock agents",
    "start": "78090",
    "end": "81299"
  },
  {
    "text": "with action groups that\ntrigger Lambda functions,",
    "start": "81300",
    "end": "84240"
  },
  {
    "text": "which in turn query Lambda.",
    "start": "84240",
    "end": "85983"
  },
  {
    "text": "Here is how it works.",
    "start": "87180",
    "end": "89070"
  },
  {
    "text": "First, the user asks a\nquestion in natural language.",
    "start": "89070",
    "end": "92823"
  },
  {
    "text": "The question is sent to\nBedrock Workflow Orchestrator,",
    "start": "93720",
    "end": "97290"
  },
  {
    "text": "where it is processed by\na large language model.",
    "start": "97290",
    "end": "100625"
  },
  {
    "text": "The LLM generates the necessary SQL query",
    "start": "100625",
    "end": "104340"
  },
  {
    "text": "based on the schema.",
    "start": "104340",
    "end": "106079"
  },
  {
    "text": "This query is passed the Lambda function,",
    "start": "106080",
    "end": "108810"
  },
  {
    "text": "which then executes it on Redshift.",
    "start": "108810",
    "end": "111092"
  },
  {
    "text": "The result from Redshift\nis returned to the LLM,",
    "start": "112978",
    "end": "115409"
  },
  {
    "text": "which then summarizes the output",
    "start": "115410",
    "end": "117780"
  },
  {
    "text": "and sends it back to\nyou in simple English.",
    "start": "117780",
    "end": "120690"
  },
  {
    "text": "Let's start with a simple example.",
    "start": "120690",
    "end": "123270"
  },
  {
    "text": "You can ask the chatbot,",
    "start": "123270",
    "end": "124746"
  },
  {
    "text": "\"How many tables are\nthere in the database?\"",
    "start": "124747",
    "end": "128100"
  },
  {
    "text": "Right away it runs a query on Redshift.",
    "start": "128100",
    "end": "131120"
  },
  {
    "text": "As you can see, the\ntables in this data set",
    "start": "131120",
    "end": "134580"
  },
  {
    "text": "relate to the retail\nindustry with categories",
    "start": "134580",
    "end": "136980"
  },
  {
    "text": "like catalog, sales, customer\ndata, suppliers, et cetera.",
    "start": "136980",
    "end": "141663"
  },
  {
    "text": "But this chatbot isn't\nlimited to basic query.",
    "start": "143580",
    "end": "147330"
  },
  {
    "text": "It's powerful enough to answer\ncomplex business questions.",
    "start": "147330",
    "end": "151260"
  },
  {
    "text": "For instance, you can ask it,",
    "start": "151260",
    "end": "153336"
  },
  {
    "text": "\"Who are the top 10 high value customers?\"",
    "start": "153337",
    "end": "156420"
  },
  {
    "text": "The chatbot instantly generates SQL query",
    "start": "156420",
    "end": "159300"
  },
  {
    "text": "that is needed to find this information,",
    "start": "159300",
    "end": "162000"
  },
  {
    "text": "runs it on Redshift,\nand presents the result.",
    "start": "162000",
    "end": "165406"
  },
  {
    "text": "It doesn't just stop there.",
    "start": "165406",
    "end": "167430"
  },
  {
    "text": "It even explains it in simple\nEnglish on why these customers",
    "start": "167430",
    "end": "171480"
  },
  {
    "text": "are considered high\nvalue based on the data.",
    "start": "171480",
    "end": "174303"
  },
  {
    "text": "What's more, the chatbot remembers\nthe conversation history.",
    "start": "175380",
    "end": "179460"
  },
  {
    "text": "So if you ask a follow up question, like",
    "start": "179460",
    "end": "182077"
  },
  {
    "text": "\"Why are these customers high value?\"",
    "start": "182077",
    "end": "184650"
  },
  {
    "text": "It can explain the criteria it used",
    "start": "184650",
    "end": "186689"
  },
  {
    "text": "to determine that in plain English.",
    "start": "186690",
    "end": "189423"
  },
  {
    "text": "Let's take it a step further.",
    "start": "191730",
    "end": "194010"
  },
  {
    "text": "Say you are a product manager",
    "start": "194010",
    "end": "195959"
  },
  {
    "text": "and you want to know what is\nthe highest selling product?",
    "start": "195960",
    "end": "199410"
  },
  {
    "text": "The chatbot pulls the relevant data,",
    "start": "199410",
    "end": "201300"
  },
  {
    "text": "builds SQL, and returns the answer,",
    "start": "201300",
    "end": "203970"
  },
  {
    "text": "along with an easy to\nunderstand explanation.",
    "start": "203970",
    "end": "206793"
  },
  {
    "text": "This makes it ideal for\nnon-technical users who want",
    "start": "207840",
    "end": "211260"
  },
  {
    "text": "to make data-driven decisions\nwithout needing to know SQL.",
    "start": "211260",
    "end": "214327"
  },
  {
    "text": "You can even ask more\nstrategic questions like,",
    "start": "215200",
    "end": "218887"
  },
  {
    "text": "\"Which products should we promote?\"",
    "start": "218887",
    "end": "221250"
  },
  {
    "text": "This chatbot then analyzes the data",
    "start": "221250",
    "end": "223320"
  },
  {
    "text": "and makes recommendations",
    "start": "223320",
    "end": "224700"
  },
  {
    "text": "based on factors like profit margins.",
    "start": "224700",
    "end": "227430"
  },
  {
    "text": "For example, it might be\nsuggesting to promote a product",
    "start": "227430",
    "end": "230879"
  },
  {
    "text": "with a lower margin to\nimprove overall profitability.",
    "start": "230880",
    "end": "233763"
  },
  {
    "text": "Now, let's talk about\nhandling more complex queries.",
    "start": "236160",
    "end": "239160"
  },
  {
    "text": "Suppose you ask \"Which product\nhas the highest return rate?\"",
    "start": "239160",
    "end": "243087"
  },
  {
    "text": "The chatbot will find the\ndata and show it to you.",
    "start": "244500",
    "end": "248010"
  },
  {
    "text": "But what if the results\ninclude some null values?",
    "start": "248010",
    "end": "250713"
  },
  {
    "text": "You can then simply ask,",
    "start": "251820",
    "end": "253417"
  },
  {
    "text": "\"Exclude null from the product list,\"",
    "start": "253417",
    "end": "255900"
  },
  {
    "text": "and the chatbot will update query,",
    "start": "255900",
    "end": "257820"
  },
  {
    "text": "removing any irrelevant data\nand gives you a cleaner result.",
    "start": "257820",
    "end": "262380"
  },
  {
    "text": "Then provides recommendation",
    "start": "262380",
    "end": "264000"
  },
  {
    "text": "on how to address the\nreturn based on this data.",
    "start": "264000",
    "end": "267213"
  },
  {
    "text": "Let's say if you're a supply manager",
    "start": "269370",
    "end": "271260"
  },
  {
    "text": "in this fictional retail\ncompany, the chatbot can answer",
    "start": "271260",
    "end": "275310"
  },
  {
    "text": "questions like, \"Who is our\nmost reliable supplier?\"",
    "start": "275310",
    "end": "278550"
  },
  {
    "text": "It automatically determines\nthe criteria for reliability,",
    "start": "278550",
    "end": "281580"
  },
  {
    "text": "such as on time delivery or\nquality scores, and gives you",
    "start": "281580",
    "end": "285389"
  },
  {
    "text": "the most reliable supplier\nbased on that analysis.",
    "start": "285390",
    "end": "288750"
  },
  {
    "text": "Now, if you try to ask\ndisruptive questions",
    "start": "288750",
    "end": "290963"
  },
  {
    "text": "like \"drop the supplier,\"\nthe chatbot knows its limits",
    "start": "290963",
    "end": "295560"
  },
  {
    "text": "and responds appropriately.",
    "start": "295560",
    "end": "297303"
  },
  {
    "text": "Now, let's quickly look at\nthe Bedrock agent in itself.",
    "start": "299100",
    "end": "302283"
  },
  {
    "text": "As you can see, the instructions",
    "start": "303360",
    "end": "305729"
  },
  {
    "text": "are written in plain English.",
    "start": "305730",
    "end": "307533"
  },
  {
    "text": "These instructions guide the agent",
    "start": "308760",
    "end": "310860"
  },
  {
    "text": "on how to handle the user queries.",
    "start": "310860",
    "end": "313293"
  },
  {
    "text": "The agent is connected to an action group,",
    "start": "314490",
    "end": "317220"
  },
  {
    "text": "which calls the Lambda function.",
    "start": "317220",
    "end": "319263"
  },
  {
    "text": "And here's the code. The code is simple.",
    "start": "320220",
    "end": "323850"
  },
  {
    "text": "Just receives the SQL query from the event",
    "start": "323850",
    "end": "326910"
  },
  {
    "text": "that it receives from Bedrock.",
    "start": "326910",
    "end": "329370"
  },
  {
    "text": "Executes it.",
    "start": "329370",
    "end": "331169"
  },
  {
    "text": "It monitors the status of\nthe query until completion.",
    "start": "331170",
    "end": "335130"
  },
  {
    "text": "And then sends the result back to Bedrock.",
    "start": "335130",
    "end": "337863"
  },
  {
    "text": "The chatbot then takes a result,",
    "start": "338790",
    "end": "341130"
  },
  {
    "text": "summarizes it, and presents it to you.",
    "start": "341130",
    "end": "343053"
  },
  {
    "text": "And that's the wrap on\nthe demo of our chatbot.",
    "start": "345210",
    "end": "348419"
  },
  {
    "text": "I hope this gives you a\nglimpse into how powerful",
    "start": "348420",
    "end": "351000"
  },
  {
    "text": "and versatile the solution can be",
    "start": "351000",
    "end": "352800"
  },
  {
    "text": "for any industry or dataset.",
    "start": "352800",
    "end": "354917"
  },
  {
    "text": "This is the Retrieval\nAugmented Generation,",
    "start": "354917",
    "end": "358050"
  },
  {
    "text": "RAG-based solution that\nuses Redshift and Bedrock.",
    "start": "358050",
    "end": "361533"
  },
  {
    "text": "Thanks for watching, and\nI hope this inspires you",
    "start": "363300",
    "end": "365669"
  },
  {
    "text": "to explore the power of\nchatbots in data analytics.",
    "start": "365670",
    "end": "368703"
  }
]