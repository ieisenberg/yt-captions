[
  {
    "start": "0",
    "end": "88000"
  },
  {
    "text": "good afternoon welcome my name is Eliot Horowitz I'm the CEO and co-founder of",
    "start": "60",
    "end": "7220"
  },
  {
    "text": "MongoDB and this afternoon we're gonna talk a little bit about a little bit",
    "start": "7220",
    "end": "18510"
  },
  {
    "text": "about how to make your life a little bit more magical with sort of a lot of streaming and real time and making it",
    "start": "18510",
    "end": "25320"
  },
  {
    "text": "easy to combine a lot of services and a lot of what modern applications are doing these days is the way we like to",
    "start": "25320",
    "end": "31800"
  },
  {
    "text": "think about it is banishing batch operations no one wants things to happen in bash on",
    "start": "31800",
    "end": "37110"
  },
  {
    "text": "the weekend or at night things want to happen in real time in sort of streaming in real time ways connecting lots of",
    "start": "37110",
    "end": "43680"
  },
  {
    "text": "different services to make things a little bit smoother for developers and for all of your actual end users so",
    "start": "43680",
    "end": "51270"
  },
  {
    "text": "before we get started I thought it'd make a little bit of sense just to sort of see how much people already using server lists and so quickly how",
    "start": "51270",
    "end": "58260"
  },
  {
    "text": "many people here are using in production today so about a third how",
    "start": "58260",
    "end": "63930"
  },
  {
    "text": "many our server lists are using server list technologies that's a half-ish and",
    "start": "63930",
    "end": "70530"
  },
  {
    "text": "how many people are using streaming there's like a Kinesis stream or a Kafka stream so actually a little bit fewer",
    "start": "70530",
    "end": "78420"
  },
  {
    "text": "than I would have thought maybe like a quarter of the lights are a little hard to count so it's pretty good so I think",
    "start": "78420",
    "end": "84810"
  },
  {
    "text": "first let's talk a little bit about what we're gonna talk about in this talk so first we're gonna talk about sort of a",
    "start": "84810",
    "end": "90600"
  },
  {
    "start": "88000",
    "end": "112000"
  },
  {
    "text": "modern data architecture and all the pieces that combine that go into what a modern application looks like why why it",
    "start": "90600",
    "end": "97350"
  },
  {
    "text": "looks like that and sort of how to make that a little bit better then we'll talk a little bit of where MongoDB fits in how to use it where to use it what kinds",
    "start": "97350",
    "end": "104729"
  },
  {
    "text": "of services can you do with MongoDB we'll go through some use cases and then we'll go through an actual real world",
    "start": "104729",
    "end": "109759"
  },
  {
    "text": "example architecture so this is sort of a big diagram of what a modern",
    "start": "109759",
    "end": "117270"
  },
  {
    "start": "112000",
    "end": "262000"
  },
  {
    "text": "application might look like so on the left hand side we've got clients and these are different kinds of clients",
    "start": "117270",
    "end": "123060"
  },
  {
    "text": "they'll go into the details a little bit later we've got a sort of on the top in the middle we've got sort of your a",
    "start": "123060",
    "end": "128220"
  },
  {
    "text": "traditional persistent transactional databases on the bottom we've got your streaming services",
    "start": "128220",
    "end": "133860"
  },
  {
    "text": "on the top right we've got sort of different analytics tools and analytic services we've got event processing and",
    "start": "133860",
    "end": "139440"
  },
  {
    "text": "we've got sort of archival and sort of long-term storage and so the first thing you're going to look at on this slide is",
    "start": "139440",
    "end": "144450"
  },
  {
    "text": "the fact that there are a lot of boxes there are a lot of boxes and I think the",
    "start": "144450",
    "end": "150660"
  },
  {
    "text": "the reason why modern architectures tend to look like this is that sort of the way people build applications today is",
    "start": "150660",
    "end": "156780"
  },
  {
    "text": "completely change and the way people want to build applications has completely changed so why one of the the",
    "start": "156780",
    "end": "162420"
  },
  {
    "text": "main things is this whole notion of services so you know twelve years ago if",
    "start": "162420",
    "end": "168030"
  },
  {
    "text": "you wanted to build any sort of application that did interact with different things you had to do most of it yourself so an example from my life",
    "start": "168030",
    "end": "174810"
  },
  {
    "text": "is about thirty twelve years ago I had to build a service that dealt with images we had to build different size",
    "start": "174810",
    "end": "180270"
  },
  {
    "text": "images for different places so we would get him we would get an image we had thumbnail it we'd create like a small one a medium one a large one a slightly",
    "start": "180270",
    "end": "186570"
  },
  {
    "text": "bigger one I think with like five different versions for every image we also have to do video encoding as how do",
    "start": "186570",
    "end": "191850"
  },
  {
    "text": "we do this well we actually went and bought servers we rack them in a data center we installed image magic and wrote a bunch of Python scripts to glue",
    "start": "191850",
    "end": "197910"
  },
  {
    "text": "it all together and we did that for you know for image thumbnail image thumbnailing for doing video encoding we",
    "start": "197910",
    "end": "204140"
  },
  {
    "text": "used fuse and you know did her own video encoding and should have built a service around that but I wasn't really called",
    "start": "204140",
    "end": "210209"
  },
  {
    "text": "the service because it's just a bunch of scripts and now no one would ever do that right now there's a third-party service or almost everything you'd want",
    "start": "210209",
    "end": "216510"
  },
  {
    "text": "to do right use a service for video encoding or sending email or for sending text messages and that sort of",
    "start": "216510",
    "end": "221550"
  },
  {
    "text": "fundamentally changes the way you get to build an application I guess rather than having to build a model to the application that handles absolutely",
    "start": "221550",
    "end": "227820"
  },
  {
    "text": "everything your job is to sort of build the core business logic and then connect all these different services together to",
    "start": "227820",
    "end": "234450"
  },
  {
    "text": "sort of build an actually great application for your end users and this is great for a number of reasons one is",
    "start": "234450",
    "end": "239459"
  },
  {
    "text": "it's less code you have to write and it makes your life easier two is you've got all these services we've got people who",
    "start": "239459",
    "end": "244500"
  },
  {
    "text": "like manage those services that take care of that sort of workload for you and at the end of the day you're gonna",
    "start": "244500",
    "end": "249690"
  },
  {
    "text": "get applications and get features out faster right because you're spending less time going in and building all",
    "start": "249690",
    "end": "254850"
  },
  {
    "text": "these different components right you're just going to be more productive as developers so let's dig into sort of the",
    "start": "254850",
    "end": "260459"
  },
  {
    "text": "components of the system so first we've got the clients and this is you know even the clients are interesting here so",
    "start": "260459",
    "end": "266550"
  },
  {
    "start": "262000",
    "end": "325000"
  },
  {
    "text": "we've got web so it's sort of a pretty standard web application clients we've got mobile clients right usually I you know some",
    "start": "266550",
    "end": "273220"
  },
  {
    "text": "sort of phone device maybe an iPad something like that which is sort of interesting then we have IOT devices",
    "start": "273220",
    "end": "279099"
  },
  {
    "text": "right this is sort of a pretty new trend where there's IOT devices weather sensors you know or things that collect",
    "start": "279099",
    "end": "284770"
  },
  {
    "text": "data and once you ship it back to sort of the main application or they're some sort of device that actually takes",
    "start": "284770",
    "end": "290710"
  },
  {
    "text": "information and disseminates it right maybe something as simple as a light or an LED display you know down to sort of",
    "start": "290710",
    "end": "297370"
  },
  {
    "text": "a you know something that interacts with people right so some sort of IOT device and then you also have app servers all",
    "start": "297370",
    "end": "303819"
  },
  {
    "text": "right so why are app service a client of a modern architecture well there are still use cases where you actually need",
    "start": "303819",
    "end": "308979"
  },
  {
    "text": "an app server right a traditional sort of app server or the Java app server on node.js app server and in those cases",
    "start": "308979",
    "end": "315009"
  },
  {
    "text": "you actually have to have your app server be a regular client of your architecture and one of the nice things",
    "start": "315009",
    "end": "321159"
  },
  {
    "text": "you can do is actually try to treat all of your clients the same all right so next you've got the sort of the",
    "start": "321159",
    "end": "327099"
  },
  {
    "start": "325000",
    "end": "358000"
  },
  {
    "text": "persistence and you know transactional data stores pretty sort of core data whether it's MongoDB like it should be",
    "start": "327099",
    "end": "334090"
  },
  {
    "text": "or a sort of other database like RDS or Postgres or Aurora you can bet your",
    "start": "334090",
    "end": "340569"
  },
  {
    "text": "persistence transactional databases you've got sort of the streaming engines right that actually connect all these",
    "start": "340569",
    "end": "347050"
  },
  {
    "text": "things together it's whether it's an Amazon Kinesis or an Apache Kafka right you know same fundamental idea as you",
    "start": "347050",
    "end": "352900"
  },
  {
    "text": "put an event onto a stream then you send it to one or many places sort of in real time there's a whole bunch of things in",
    "start": "352900",
    "end": "359560"
  },
  {
    "text": "the analytic space and these are kind of different right you've got things like snowflake and redshift which are places where you can put data to do queries on",
    "start": "359560",
    "end": "365800"
  },
  {
    "text": "it and then you've got tools like quick site and things like that where you can actually go ahead and look at data in real time or pseudo real time to get",
    "start": "365800",
    "end": "372430"
  },
  {
    "text": "sort of interesting insights out of that data and then you got event processing an event processing I would say is a",
    "start": "372430",
    "end": "378759"
  },
  {
    "text": "pretty broad category this is where a lot of sort of the magic happens right and the way you get there could be anything from sort of an Atlanta",
    "start": "378759",
    "end": "385240"
  },
  {
    "text": "function or ec2 like we're an actual app server and this is where sort of connecting everything that's happening",
    "start": "385240",
    "end": "390909"
  },
  {
    "text": "in your data world or your application world to all the other services that you care about right whether it's sending",
    "start": "390909",
    "end": "397029"
  },
  {
    "text": "text messages or sending email or you know actually shipping a product through some you know API with actually",
    "start": "397029",
    "end": "402750"
  },
  {
    "text": "lets you send real mail creating a ups you know shipping to you know shipping",
    "start": "402750",
    "end": "407760"
  },
  {
    "text": "label right anything you want to do that interacts with sort of the virtual world or the real world you can do right there",
    "start": "407760",
    "end": "412920"
  },
  {
    "text": "and last but certainly not least is archival right in the archival places",
    "start": "412920",
    "end": "418020"
  },
  {
    "start": "414000",
    "end": "437000"
  },
  {
    "text": "and a lot of people want to store data in something like s/3 s/3 like thing in order to have like a very cheap very",
    "start": "418020",
    "end": "424020"
  },
  {
    "text": "long-term storage and then maybe it'll sort of like look at that data in its native form on s3 to makes things really",
    "start": "424020",
    "end": "431070"
  },
  {
    "text": "cost-effective and so this is sort of a whole bunch of different stuff and so what we're gonna focus on next a little",
    "start": "431070",
    "end": "437340"
  },
  {
    "text": "bit is sort of just the persistent and transactional bit and talk a little bit about MongoDB and how long going to be",
    "start": "437340",
    "end": "443310"
  },
  {
    "text": "fits into the AWS ecosystem so obviously AWS has a lot of their own database",
    "start": "443310",
    "end": "451110"
  },
  {
    "start": "447000",
    "end": "468000"
  },
  {
    "text": "services and so really comes out to sort of why would you use MongoDB in sort of a dubious context and for us that comes",
    "start": "451110",
    "end": "457200"
  },
  {
    "text": "down to sort of two main items one is the document model right you can and one",
    "start": "457200",
    "end": "463440"
  },
  {
    "text": "and the other is distributed systems and so for both of these is a couple different ways you can think about it so one documents are incredibly flexible",
    "start": "463440",
    "end": "471360"
  },
  {
    "start": "468000",
    "end": "522000"
  },
  {
    "text": "right so documents are JSON schema and JSON is pretty nice it's not XML which",
    "start": "471360",
    "end": "476730"
  },
  {
    "text": "is good and JSON is great also one because it matches very much the way people think about data right when you",
    "start": "476730",
    "end": "483660"
  },
  {
    "text": "think about things business objects in your world or people or you know anything that you interact with you tend",
    "start": "483660",
    "end": "488730"
  },
  {
    "text": "to think of it and then some sort of hierarchical way but when you think about a person you think of them as a whole person hopefully and like you take",
    "start": "488730",
    "end": "496590"
  },
  {
    "text": "all their components and you keep them together and you keep their likes and their dislikes and their addresses and you put it I want to put it in one you know a JSON document or one piece on",
    "start": "496590",
    "end": "503400"
  },
  {
    "text": "document and put in the database and then still be able to change that over time right as you add features to your",
    "start": "503400",
    "end": "509550"
  },
  {
    "text": "application it adapts and have sort of a really nice query language that sort of does what you would expect from a",
    "start": "509550",
    "end": "515190"
  },
  {
    "text": "database with indexes and queries while having the sort of really flexible sort of JSON schema but documents in",
    "start": "515190",
    "end": "524039"
  },
  {
    "text": "are also incredibly powerful right so you have the aggregation framework and manga newbie which lets you do real-time analytics across either small data sets",
    "start": "524039",
    "end": "530430"
  },
  {
    "text": "or very large data sets right so you sort of get the best features from relational databases in a very document-centric way so if you",
    "start": "530430",
    "end": "537570"
  },
  {
    "text": "have a very large data set and you want to compute a group by or some sort of thing you don't have to go to a separate service or a separate sort of data",
    "start": "537570",
    "end": "543750"
  },
  {
    "text": "warehouse just to go ahead and look at sort of a group by or do an average or sort of look at this stuff um you can do",
    "start": "543750",
    "end": "549390"
  },
  {
    "text": "things like joins using dollar lookup in MongoDB in the 4.0 which came out in June and you can now do fully asset",
    "start": "549390",
    "end": "554730"
  },
  {
    "text": "transactions directly in MongoDB which is pretty exciting because now you have the best features from sort of",
    "start": "554730",
    "end": "559950"
  },
  {
    "text": "traditional databases but done in a very modern document way for distributed",
    "start": "559950",
    "end": "565470"
  },
  {
    "text": "systems they're also quite flexible and they're flexible and a couple different dimensions one is high availability",
    "start": "565470",
    "end": "571490"
  },
  {
    "text": "right you've got incredible high availability baked right in so you don't worry about machines crashing machines going away Network failures or even like",
    "start": "571490",
    "end": "577980"
  },
  {
    "text": "hold regions going out and you've got cool things where you can do things like workload isolation right so you can have different nodes in a class are",
    "start": "577980",
    "end": "584400"
  },
  {
    "text": "dedicated to transaction processing in different nodes in a class are dedicated to analytics so you can have",
    "start": "584400",
    "end": "590070"
  },
  {
    "text": "business users going and running queries against some analytics nodes that can't possibly ever interrupt your actual",
    "start": "590070",
    "end": "595980"
  },
  {
    "text": "production app so that's pretty powerful and of course distributed systems also give you a lot of really great sort of",
    "start": "595980",
    "end": "601740"
  },
  {
    "text": "power features like Scala right you can have horizontal scaling so you can scale as wide as you possibly need to be we",
    "start": "601740",
    "end": "608310"
  },
  {
    "text": "also have a cool feature called zone sharding which lets you put different plate different data in different places",
    "start": "608310",
    "end": "613380"
  },
  {
    "text": "based on a configuration so for example let's say you've got data and you want some of that data to live in the u.s. so",
    "start": "613380",
    "end": "619110"
  },
  {
    "text": "that can be close to users maybe even more specifically some data lives on the west coast some in the east coast some data it lives in Europe to comply with",
    "start": "619110",
    "end": "625500"
  },
  {
    "text": "sort of European data privacy laws and some data lives in Australia for their data privacy laws or just so people for",
    "start": "625500",
    "end": "630870"
  },
  {
    "text": "people in Australia don't have a terribly slow experience because they have to go back to you know Virginia for",
    "start": "630870",
    "end": "636900"
  },
  {
    "text": "every database query and with its own charting you have different nodes and these different regions and you tag data",
    "start": "636900",
    "end": "642810"
  },
  {
    "text": "with where it should live so you can keep it in the right place for low latency ease and you know regulatory",
    "start": "642810",
    "end": "648030"
  },
  {
    "text": "reasons but still have one logical cluster so you can still write anywhere or a query anywhere and still get a sort",
    "start": "648030",
    "end": "654180"
  },
  {
    "text": "of a fully consistent view across the entire world there's some very powerful features there to comply with laws and",
    "start": "654180",
    "end": "659580"
  },
  {
    "text": "make the application really fast for people and you've got flexible storage options right this is an area where we're doing a lot of work where you can",
    "start": "659580",
    "end": "665700"
  },
  {
    "text": "store data in different kinds of places and different kind of storage mediums for example you can put different kind of data on SSDs or spinning disks sort",
    "start": "665700",
    "end": "674370"
  },
  {
    "text": "of maximize efficiency and maximize sort of the value in your in your hardware so",
    "start": "674370",
    "end": "681090"
  },
  {
    "text": "traditionally if you were running MongoDB in Amazon and using Amazon in a very self-service way you can do it and",
    "start": "681090",
    "end": "687660"
  },
  {
    "start": "686000",
    "end": "795000"
  },
  {
    "text": "quite a few people you know do that as well and so a pretty typical thing if you're using AWS anyone needs a to be of",
    "start": "687660",
    "end": "693270"
  },
  {
    "text": "services you wanna use MongoDB and you do it on myself I don't want any sort of management help it might look like this",
    "start": "693270",
    "end": "699210"
  },
  {
    "text": "right so you're managing your own manga to be replica sets you go spin up some ec2 instances you still install MongoDB",
    "start": "699210",
    "end": "704790"
  },
  {
    "text": "on them you do that that's fine you install some app servers you're running some big app servers that go and use the",
    "start": "704790",
    "end": "710820"
  },
  {
    "text": "MongoDB SDK to talk to and you write some code to go and go ahead and talk to a bunch of different AWS",
    "start": "710820",
    "end": "716010"
  },
  {
    "text": "services but there's a lot of things that are sort of left for you for example you are now managing all of",
    "start": "716010",
    "end": "722340"
  },
  {
    "text": "those ec2 nodes that make up that cluster so if one goes down if one",
    "start": "722340",
    "end": "727440"
  },
  {
    "text": "crashes the Amazon takes one out of service you've got to go and do something and figure that out if you",
    "start": "727440",
    "end": "733770"
  },
  {
    "text": "want to scale scale up or scale down you've got to figure out what to do and how to do it",
    "start": "733770",
    "end": "739530"
  },
  {
    "text": "things like upgrades all that stuff you got to do yourself and one of the really interesting ones is all the code for",
    "start": "739530",
    "end": "745890"
  },
  {
    "text": "interacting both with MongoDB and the ADA Bureau services you've got to build yourself and that's kind of a little bit",
    "start": "745890",
    "end": "752130"
  },
  {
    "text": "boilerplate you know for example things like failover and things like you know retry ability write an operation happens",
    "start": "752130",
    "end": "758010"
  },
  {
    "text": "something in a real time system happens and an event goes through but the app server crashes in the middle and say",
    "start": "758010",
    "end": "763230"
  },
  {
    "text": "okay well do that finish or not finish and where do I keep tracking and where do I keep you know track of that state and what if I call to an AWS service",
    "start": "763230",
    "end": "770100"
  },
  {
    "text": "fails - how many times do I retry is there's some back off what do i how do I make that work and you've got to sort of connect all these different things",
    "start": "770100",
    "end": "776160"
  },
  {
    "text": "together to put that to make that happen and so there's a more modern way right a",
    "start": "776160",
    "end": "781260"
  },
  {
    "text": "sort of a better way to do this and again it's all focused on making it easier for people to build applications",
    "start": "781260",
    "end": "786360"
  },
  {
    "text": "and get applications out the door faster so developers can focus on you know adding innovative features to their apps",
    "start": "786360",
    "end": "792120"
  },
  {
    "text": "rather than writing boilerplate code so that looks very different so for example",
    "start": "792120",
    "end": "797310"
  },
  {
    "start": "795000",
    "end": "842000"
  },
  {
    "text": "that would use MongoDB Atlas it's a MongoDB Atlas is fully managed database service and so",
    "start": "797310",
    "end": "806070"
  },
  {
    "text": "basically it's a fully hosted version of  so things like provisioning monitoring backup data access all those",
    "start": "806070",
    "end": "813690"
  },
  {
    "text": "things are managed by Alice itself but you go in you create a cluster you can scale out you know a couple of clicks",
    "start": "813690",
    "end": "820199"
  },
  {
    "text": "you can scale it up scale it down monitoring is built in backups built-in it's all kind of just there for you and",
    "start": "820199",
    "end": "826680"
  },
  {
    "text": "then it's pretty it's also secure by default so you can connect it to your own V PC so like every project and",
    "start": "826680",
    "end": "832310"
  },
  {
    "text": "analysis gets its own V PC you can carry your own V PC through V PC peering so it's a fully managed service that",
    "start": "832310",
    "end": "838620"
  },
  {
    "text": "sort of makes your life much easier if you go up the stack a little bit we've got a new thing that when GA in June",
    "start": "838620",
    "end": "844889"
  },
  {
    "start": "842000",
    "end": "881000"
  },
  {
    "text": "called MongoDB stitch long going to be stitch is a service platform for MongoDB that will dig into a little bit more and",
    "start": "844889",
    "end": "850350"
  },
  {
    "text": "it's got a bunch of different services like triggers functions and also a JavaScript wrapper for sort of the",
    "start": "850350",
    "end": "856380"
  },
  {
    "text": "entire AWS SDK based on the go version and what's great about stitch is what",
    "start": "856380",
    "end": "862050"
  },
  {
    "text": "stitch lets you do is connect sort of everything happening in your database or in your data flows directly to all the",
    "start": "862050",
    "end": "867990"
  },
  {
    "text": "AWS services that you want right so you can go directly from events happen in the database to you know driving sort of",
    "start": "867990",
    "end": "874920"
  },
  {
    "text": "anything you want in the a debussy ecosystem or vice versa so so what is",
    "start": "874920",
    "end": "880529"
  },
  {
    "text": "stitch so it's a server this platform and really what that means is you don't",
    "start": "880529",
    "end": "887579"
  },
  {
    "text": "have to think about scaling you don't think about what size servers there are how many there are you just sort of write code configure things and",
    "start": "887579",
    "end": "893880"
  },
  {
    "text": "everything else is sort of managed for you and really seamlessly connects everything happening in your Atlas world",
    "start": "893880",
    "end": "900120"
  },
  {
    "text": "directly to sort of the a device ecosystem so there are four main stitch",
    "start": "900120",
    "end": "905490"
  },
  {
    "start": "904000",
    "end": "1019000"
  },
  {
    "text": "services right now the first one is called query anywhere and what query anywhere lets you do is directly query",
    "start": "905490",
    "end": "912360"
  },
  {
    "text": "MongoDB from from any well from anywhere frankly and the way that it works is you",
    "start": "912360",
    "end": "917790"
  },
  {
    "text": "can write a regular query sort of in a web browser in a web app or on a mobile phone and you actually write a",
    "start": "917790",
    "end": "923579"
  },
  {
    "text": "full MongoDB query like a regular query it goes through stitch stitch modifies that query to make it safe and then",
    "start": "923579",
    "end": "930510"
  },
  {
    "text": "sends it to the database so this means that developers can write regular queries they get full benefits of query optimizer is",
    "start": "930510",
    "end": "936750"
  },
  {
    "text": "everything like that and you don't have to go and write custom API is for every different kind of access you want to the",
    "start": "936750",
    "end": "942600"
  },
  {
    "text": "data and the way that it works is it's got a declarative sort of access control system where for any different",
    "start": "942600",
    "end": "948420"
  },
  {
    "text": "collection you can declare exactly who can read what kinds of documents what fields they can read what fields they",
    "start": "948420",
    "end": "953520"
  },
  {
    "text": "can write and it's all based on attributes both in the user document and the user and in the document itself",
    "start": "953520",
    "end": "959880"
  },
  {
    "text": "all right so for example you can do things like say ok for this document if my user ID matches the owner ID then I",
    "start": "959880",
    "end": "966690"
  },
  {
    "text": "can do anything or if my user ID shows up in a list of readers and I can read these five fields and if my list of my",
    "start": "966690",
    "end": "974520"
  },
  {
    "text": "user ID shows up in a list of sort of admins I can read everything and modify these three fields so you've got a very",
    "start": "974520",
    "end": "979530"
  },
  {
    "text": "sort of flexible way to sort of control this in a completely declarative way and so you have nativist then you have",
    "start": "979530",
    "end": "985830"
  },
  {
    "text": "native SDKs both for iOS devices for Android devices for the browser so then",
    "start": "985830",
    "end": "991950"
  },
  {
    "text": "you're running regular queries so now if you're a developer and you want to go ahead and sort of build a new new web app or a new mobile app you're not",
    "start": "991950",
    "end": "998220"
  },
  {
    "text": "going ahead and building a REST API for every different access pattern or sort of you're not building a query language",
    "start": "998220",
    "end": "1003710"
  },
  {
    "text": "in sort of a REST API you're just writing a regular query on any device I'm letting it go directly to the",
    "start": "1003710",
    "end": "1010370"
  },
  {
    "text": "database it's got sort of full off integration and it's sort of in it's got the full manga to be a query language",
    "start": "1010370",
    "end": "1016040"
  },
  {
    "text": "built in the next service and stitch is functions and functions are similar to",
    "start": "1016040",
    "end": "1023510"
  },
  {
    "start": "1019000",
    "end": "1060000"
  },
  {
    "text": "similar to lambda so I'm gonna say a Tobias lambda its serverless JavaScript so JavaScript you know functions as a",
    "start": "1023510",
    "end": "1029240"
  },
  {
    "text": "service and it's a very different sort of by purpose right for the really purpose for it for stitch functions is",
    "start": "1029240",
    "end": "1035720"
  },
  {
    "text": "service integrations right integrating atlas with different AWS services like",
    "start": "1035720",
    "end": "1040730"
  },
  {
    "text": "SES or integrating out things like Tullio for sending text messages right so it really more of an integration point rather than running sort of heavy",
    "start": "1040730",
    "end": "1046970"
  },
  {
    "text": "code it's really been for very lightweight operations very lightweight things and great for querying Atlas for",
    "start": "1046970",
    "end": "1054140"
  },
  {
    "text": "example so just to sort of understand the differences between sort of stitch functions and lambda functions so state",
    "start": "1054140",
    "end": "1060980"
  },
  {
    "start": "1060000",
    "end": "1136000"
  },
  {
    "text": "functions are per millisecond billing so it's a very small granularity very short of they meant or a very short",
    "start": "1060980",
    "end": "1066920"
  },
  {
    "text": "amounts of things great for things like service orchestration database triggers and",
    "start": "1066920",
    "end": "1072130"
  },
  {
    "text": "they're only in JavaScript so in lambda it's 100 millisecond billing so and",
    "start": "1072130",
    "end": "1077380"
  },
  {
    "text": "actually so the 4 lambda functions your build the smallest unit of billing is",
    "start": "1077380",
    "end": "1083410"
  },
  {
    "text": "100 milliseconds and 10 megabytes and in lambda it's 1 millisecond and in stitch",
    "start": "1083410",
    "end": "1091570"
  },
  {
    "text": "functions it's 1 millisecond and 1 megabyte and then lambda is 100 milliseconds and 10 megabytes so it's",
    "start": "1091570",
    "end": "1097330"
  },
  {
    "text": "like a thousand times smaller granularity but the overall price like the per millisecond gigabyte is actually",
    "start": "1097330",
    "end": "1103180"
  },
  {
    "text": "the same so it's really meant for sort of real-time things where everything's happening in real time you know you're expecting to have lots and lots of very",
    "start": "1103180",
    "end": "1108970"
  },
  {
    "text": "tiny things so if you have like you know a million inserts into your database and every single one of them calls a tiny little JavaScript function it's not",
    "start": "1108970",
    "end": "1115660"
  },
  {
    "text": "going to be a you know a pricing problem it's actually very cost effective lambdas probably better as sort of a",
    "start": "1115660",
    "end": "1120820"
  },
  {
    "text": "longer running functions where you're going to do some furtive heavy computation or if you want to sort of",
    "start": "1120820",
    "end": "1126490"
  },
  {
    "text": "package it with a bunch of libraries and sort of do bigger things there or you sort of a whole bunch of different languages and we go through some",
    "start": "1126490",
    "end": "1132580"
  },
  {
    "text": "examples a little bit later about like what you might want to do there the net the next service is triggers and",
    "start": "1132580",
    "end": "1139600"
  },
  {
    "start": "1136000",
    "end": "1176000"
  },
  {
    "text": "triggers is sort of exactly what it sounds like it lets you observe things inside",
    "start": "1139600",
    "end": "1145540"
  },
  {
    "text": "happening in your database cluster and trigger JavaScript functions executions when those things happen it all happens",
    "start": "1145540",
    "end": "1152200"
  },
  {
    "text": "in real time it's based off the change streams inside of MongoDB and so basically what you do is you say hey if",
    "start": "1152200",
    "end": "1158770"
  },
  {
    "text": "there's AZ collection I care about and every time a document is inserted or updated in this collection call this up",
    "start": "1158770",
    "end": "1164110"
  },
  {
    "text": "JavaScript function right in that JavaScript function you could do anything that you want right inside a text or an email or go you know send or",
    "start": "1164110",
    "end": "1172090"
  },
  {
    "text": "good just call any sort of a to be a service that you want and the last service and stitch is mobile sync mobile",
    "start": "1172090",
    "end": "1179410"
  },
  {
    "start": "1176000",
    "end": "1220000"
  },
  {
    "text": "sync again does sort of exactly what it sounds like unless you synchronize data automatically between a Atlas MongoDB",
    "start": "1179410",
    "end": "1185350"
  },
  {
    "text": "cluster and a embedded version of right so we have an embedded version of  that you can embed directly in",
    "start": "1185350",
    "end": "1191080"
  },
  {
    "text": "sort of an iOS or Android application and with mobile sync you can sort of synchronize those things automatically",
    "start": "1191080",
    "end": "1196170"
  },
  {
    "text": "things happen in real time and if you're go offline there's sort of a",
    "start": "1196170",
    "end": "1201250"
  },
  {
    "text": "conflict-resolution thing that happens on your phone so that you can sort of adapt and sort of ask the user what happens and Maul gonna be mobile as ga",
    "start": "1201250",
    "end": "1208660"
  },
  {
    "text": "came out a few weeks ago and yeah again mergers and conflict resolutions happen directly on your phone so what are some",
    "start": "1208660",
    "end": "1216460"
  },
  {
    "text": "use cases where how are you going to go ahead and sort of put these things together so in the most simple case",
    "start": "1216460",
    "end": "1222610"
  },
  {
    "start": "1220000",
    "end": "1296000"
  },
  {
    "text": "maybe you want to go ahead and sort of use Kinesis streams and have them sort of interact with their data and this",
    "start": "1222610",
    "end": "1227620"
  },
  {
    "text": "could be anything wheres lots of things you want to do the streaming data for example maybe you just want to go ahead and every time someone places an order",
    "start": "1227620",
    "end": "1233170"
  },
  {
    "text": "in your e-commerce system you want to go ahead and actually go and put it on an LCD display in your office right it's",
    "start": "1233170",
    "end": "1239950"
  },
  {
    "text": "something very simple that you can do very easily with you know stitch triggers and sort of Kinesis what about event processing right so",
    "start": "1239950",
    "end": "1247120"
  },
  {
    "text": "you're using lamda using stitch functions and what you're probably doing is things like sending an email sending",
    "start": "1247120",
    "end": "1252610"
  },
  {
    "text": "some sort of notification out to someone maybe it's actually joing and generating a shipping label something like that",
    "start": "1252610",
    "end": "1258250"
  },
  {
    "text": "there's a lot of things going to thany lytx for example maybe you want to have everything that goes into an Atlas",
    "start": "1258250",
    "end": "1263620"
  },
  {
    "text": "cluster automatically stream into a redshift warehouse to make that really easy maybe you want to then go ahead and",
    "start": "1263620",
    "end": "1269620"
  },
  {
    "text": "connect quick site to either Atlas or redshift or use long AV charts and then",
    "start": "1269620",
    "end": "1275380"
  },
  {
    "text": "maybe you want to have things archived to s3 and sort of use stitch to sort of go ahead and take data directly from Atlas straight into s3 so that's sort of",
    "start": "1275380",
    "end": "1283930"
  },
  {
    "text": "some basic use cases what we're gonna do now is actually walk through some of them and do a few simple demos to show",
    "start": "1283930",
    "end": "1288940"
  },
  {
    "text": "you how you can sort of connect all these things together and turn this sort of like theoretical concept to something",
    "start": "1288940",
    "end": "1294490"
  },
  {
    "text": "pretty real so the first thing that we're gonna do is actually go ahead and row to set up stitch and set up our",
    "start": "1294490",
    "end": "1301060"
  },
  {
    "text": "atlas cluster so that we can get going",
    "start": "1301060",
    "end": "1305850"
  },
  {
    "text": "so this is this is the Atlas UI so this is for managing clusters I've got one a",
    "start": "1310370",
    "end": "1315500"
  },
  {
    "text": "cluster already created if you wanted to go and build a new cluster you would have this little form there's a bunch of",
    "start": "1315500",
    "end": "1321200"
  },
  {
    "text": "things you can configure I don't have time to show you all the sort of the cool features one of my favorite features is that you can have global",
    "start": "1321200",
    "end": "1327080"
  },
  {
    "text": "clusters with like I talked about before and you've got this cool map that you can play with that I highly",
    "start": "1327080",
    "end": "1332450"
  },
  {
    "text": "recommend going and playing with because it's fun you can go into just decide where you want to run this and choose",
    "start": "1332450",
    "end": "1337970"
  },
  {
    "text": "your region choose whatever size you want so on and so forth it's just you",
    "start": "1337970",
    "end": "1343580"
  },
  {
    "text": "just press the button and then you hit create cluster and it'll cook it created if you want to edit your cluster you get the exact same UI where you can just go",
    "start": "1343580",
    "end": "1350059"
  },
  {
    "text": "ahead and edit it anything you make a change to will be done sort of in background with you know in a rolling fashion such that you never have any",
    "start": "1350059",
    "end": "1356630"
  },
  {
    "text": "downtime your application that's never actually down then you can go ahead and sort of build a stitch out to built you",
    "start": "1356630",
    "end": "1363740"
  },
  {
    "text": "know to get a pull the stitch up again you're just gonna go ahead and click create new application fill this all in and and do that I already have one so",
    "start": "1363740",
    "end": "1371120"
  },
  {
    "text": "then this is what the stitch UI looks like and so this is a blank stitch",
    "start": "1371120",
    "end": "1376250"
  },
  {
    "text": "playing stitch app and so what we're gonna do is sort of again just do the basic setup here so first we're going to",
    "start": "1376250",
    "end": "1382340"
  },
  {
    "text": "do is connect this to AWS so the way that it works is as a bunch of different services we support so we're gonna",
    "start": "1382340",
    "end": "1387770"
  },
  {
    "text": "connect it to AWS and I call it AWS you can actually have multiple AWS services",
    "start": "1387770",
    "end": "1394220"
  },
  {
    "text": "inside of one stitch app because maybe you've got different IM users that have turned credentials or you want to",
    "start": "1394220",
    "end": "1399440"
  },
  {
    "text": "connect it to different accounts so you're not limited to one you can have as many as you want ah so I'm just gonna go ahead and don't",
    "start": "1399440",
    "end": "1406159"
  },
  {
    "text": "worry I will remove these usernames and passwords momentarily right after this talk I didn't go put that in there cool",
    "start": "1406159",
    "end": "1415190"
  },
  {
    "text": "so now I have my service set up now one of the cool things that you can do with stitch is you can actually let end-users",
    "start": "1415190",
    "end": "1420620"
  },
  {
    "text": "directly call JavaScript functions with two things and when those works there's",
    "start": "1420620",
    "end": "1425779"
  },
  {
    "text": "actually a whole rules engine that did can tell you what users can do what functions who can access what can I actually make",
    "start": "1425779",
    "end": "1432559"
  },
  {
    "text": "this you know s3 call can I access this book as a whole ACL system built-in and I don't have any",
    "start": "1432559",
    "end": "1437809"
  },
  {
    "text": "time to show you any of the cool parts of that so we're just gonna make some simple rules I'll let me do almost anything I want",
    "start": "1437809",
    "end": "1444620"
  },
  {
    "text": "but it it is fun to play with basically you have a JavaScript declarative",
    "start": "1444620",
    "end": "1449970"
  },
  {
    "text": "condition in here the Lajoie json declarative configuration here that lets you should have control who can do what",
    "start": "1449970",
    "end": "1455550"
  },
  {
    "text": "we're not going to do that right now so I just gave access to all s you know all",
    "start": "1455550",
    "end": "1460710"
  },
  {
    "text": "of us three so that's fine and now let's go ahead and just make sure this works so what I want to do is go ahead and",
    "start": "1460710",
    "end": "1466980"
  },
  {
    "text": "upload a file to s3 so we're just gonna create a function I'm gonna call it test s3 we'll make it private we're gonna",
    "start": "1466980",
    "end": "1474360"
  },
  {
    "text": "again more rules engines and ACL stuff that you can control here but we're not gonna put any of that on for the moment",
    "start": "1474360",
    "end": "1481070"
  },
  {
    "text": "great so what we're gonna do is we're gonna get the AWS service they're just",
    "start": "1481070",
    "end": "1486570"
  },
  {
    "text": "going to get sort of this contacts this little variable get the AWS service all",
    "start": "1486570",
    "end": "1492300"
  },
  {
    "text": "this and luckily our documentation has an example for s3 so we can just go",
    "start": "1492300",
    "end": "1499200"
  },
  {
    "text": "ahead and copy this makes my life easier",
    "start": "1499200",
    "end": "1503510"
  },
  {
    "text": "I'll just return this now we need to know a bucket we I haven't my s3 console over here so this is the bucket we're",
    "start": "1504980",
    "end": "1512460"
  },
  {
    "text": "gonna put things in it is empty so this",
    "start": "1512460",
    "end": "1517620"
  },
  {
    "text": "is just again the AWS API inside of stitch is a JavaScript wrapper around",
    "start": "1517620",
    "end": "1523050"
  },
  {
    "text": "the go SDK so anything that you can do in the go ews sdk you can do in stitch",
    "start": "1523050",
    "end": "1528510"
  },
  {
    "text": "which is basically everything we're gonna go do this",
    "start": "1528510",
    "end": "1533990"
  },
  {
    "text": "that seems correct we'll go run it I don't know why I",
    "start": "1533990",
    "end": "1541650"
  },
  {
    "text": "haven't this dear and I forgot one more thing",
    "start": "1541650",
    "end": "1547580"
  },
  {
    "text": "cool so now we have an e-tag now if you go back over here and refresh you have a file which is not very exciting to look",
    "start": "1550590",
    "end": "1557190"
  },
  {
    "text": "at so okay so now we've so now we've gone and connected our stitch app directly to",
    "start": "1557190",
    "end": "1562529"
  },
  {
    "text": "AWS so not the most exciting so what could we do or can actually do with this",
    "start": "1562529",
    "end": "1567950"
  },
  {
    "text": "so the first thing we can do is start taking events from MongoDB and putting them on a Kinesis stream so maybe I've",
    "start": "1567950",
    "end": "1574710"
  },
  {
    "start": "1568000",
    "end": "1606000"
  },
  {
    "text": "got a sensor or some of I owe T sensor that's gonna you know write directly to  or through an API to and",
    "start": "1574710",
    "end": "1580020"
  },
  {
    "text": "it's gonna insert sort of an observation so a sensor ID some sort of value I don't know what that value it's not my",
    "start": "1580020",
    "end": "1586679"
  },
  {
    "text": "temperature hopefully and a timestamp and the way that's gonna work is it's going to go ahead and insert it into Atlas it'll use a stitch trigger to go",
    "start": "1586679",
    "end": "1595559"
  },
  {
    "text": "ahead and listen to that event it will then call a stitch function right at this JavaScript event this little",
    "start": "1595559",
    "end": "1601380"
  },
  {
    "text": "JavaScript function to go ahead and put that directly onto a Kinesis stream so",
    "start": "1601380",
    "end": "1606750"
  },
  {
    "text": "this is what the so that this is first as the Amazon CLI and how you're going to go ahead and create that the shard",
    "start": "1606750",
    "end": "1612510"
  },
  {
    "text": "count right so the way that Kinesis works is that you specify the number of chars say how many sort of things you want to be able to scale to and then",
    "start": "1612510",
    "end": "1619289"
  },
  {
    "text": "when you insert something into a Kinesis stream you specify a partition key right so the partition key maps to what shard",
    "start": "1619289",
    "end": "1624840"
  },
  {
    "text": "the nice thing about Kinesis is it actually automatically figures out based on your partition key which shard to go through so you don't have to worry about",
    "start": "1624840",
    "end": "1630450"
  },
  {
    "text": "that you just have to say how many party how many shards you want for sort of how much the scalability you want and then how to sort of partition the data for",
    "start": "1630450",
    "end": "1637559"
  },
  {
    "text": "that so this is the function that you would have to write inside a stitch you can see it's quite straightforward the",
    "start": "1637559",
    "end": "1644100"
  },
  {
    "text": "sensor event is the event that you're gonna get from MongoDB from the trigger you're gonna connect get the Kinesis",
    "start": "1644100",
    "end": "1651230"
  },
  {
    "text": "service and then all you are gonna do is call put record and and that's it and",
    "start": "1651230",
    "end": "1656970"
  },
  {
    "text": "you can do some logging just so you understand what's going on and the nice thing is let's say this fails right let's say that Kinesis call just fails",
    "start": "1656970",
    "end": "1663830"
  },
  {
    "text": "just app server crashes something goes wrong stitch is just going to automatically retry it something that's",
    "start": "1663830",
    "end": "1669000"
  },
  {
    "text": "wrong you're gonna get an email notification you'll say hey something went wrong you'll sort of turn something back on you'll fix the bug you'll wait a",
    "start": "1669000",
    "end": "1675600"
  },
  {
    "text": "little while and then it will recover back from where it left off right so it's gonna remember what failed and what didn't fail and you'll be able to move",
    "start": "1675600",
    "end": "1681899"
  },
  {
    "text": "on you know what you want do what if you want to consume things",
    "start": "1681899",
    "end": "1687059"
  },
  {
    "text": "directly from qissas well that's a little harder so Kinesis by default only",
    "start": "1687059",
    "end": "1692159"
  },
  {
    "text": "has sort of four places you can go ahead and put data automatically unfortunately it's not very configurable so you're",
    "start": "1692159",
    "end": "1698519"
  },
  {
    "text": "sort of stuck with what they give you but there is an API to pull data out of Kinesis and so the way you would do it",
    "start": "1698519",
    "end": "1704580"
  },
  {
    "start": "1703000",
    "end": "1737000"
  },
  {
    "text": "is first you know so let's say you want to build it so first you're going to have in your sort of app server probably sort of a this is a node J a node J a",
    "start": "1704580",
    "end": "1710999"
  },
  {
    "text": "sort of version of this you first you're gonna set up your connection to MongoDB which is just gonna look like this right",
    "start": "1710999",
    "end": "1717840"
  },
  {
    "text": "connecting to your regular cluster then you'll go ahead and actually sort of process the record so for each record",
    "start": "1717840",
    "end": "1723029"
  },
  {
    "text": "you pull out of Kinesis you're gonna go and update account in MongoDB in this example and then you're going to go",
    "start": "1723029",
    "end": "1729539"
  },
  {
    "text": "ahead and sort of you know at the end so they'll shut everything down so let's actually go and try this and see if see",
    "start": "1729539",
    "end": "1736259"
  },
  {
    "text": "what we can do so what we want to do here is sort of the very simple example of taking a insert directly into MongoDB",
    "start": "1736259",
    "end": "1744210"
  },
  {
    "start": "1737000",
    "end": "2007000"
  },
  {
    "text": "and putting it on to a Kinesis stream so I've got this function over here so the",
    "start": "1744210",
    "end": "1751799"
  },
  {
    "text": "first thing we're gonna do is write the function to actually go ahead and insert on at the Canisius stream so i'll create",
    "start": "1751799",
    "end": "1757499"
  },
  {
    "text": "a new function save this one I'll call",
    "start": "1757499",
    "end": "1764070"
  },
  {
    "text": "this event hook save it so again well",
    "start": "1764070",
    "end": "1771779"
  },
  {
    "text": "clear we have an example right here so what we're gonna start with that okay so",
    "start": "1771779",
    "end": "1779090"
  },
  {
    "text": "first we're gonna get our a to do a service again we're gonna get Kinesis and it's simple",
    "start": "1779090",
    "end": "1785940"
  },
  {
    "text": "as sort of calling put record so the data is gonna be so we're gonna make this the event result over here so",
    "start": "1785940",
    "end": "1796169"
  },
  {
    "text": "you're gonna get the full document you're going to turn that into the data that's going to Kinesis so we have a",
    "start": "1796169",
    "end": "1801239"
  },
  {
    "text": "stream that we set up already so if we come over here",
    "start": "1801239",
    "end": "1806509"
  },
  {
    "text": "so the stream is called sensor stream the partition key since we want to sort",
    "start": "1807880",
    "end": "1814960"
  },
  {
    "text": "of keep events for a sensor together it'll make the partition key the sensor",
    "start": "1814960",
    "end": "1820059"
  },
  {
    "text": "ID great now to make this a little bit",
    "start": "1820059",
    "end": "1830710"
  },
  {
    "text": "easier to debug and sure if this shows we're gonna use sort of make this all",
    "start": "1830710",
    "end": "1835780"
  },
  {
    "text": "sort of not asynchronous and then we're gonna log go ahead and sort of log this",
    "start": "1835780",
    "end": "1840820"
  },
  {
    "text": "result so we can sort of see it a little later and almost return it as well okay",
    "start": "1840820",
    "end": "1851169"
  },
  {
    "text": "so all we're doing here again is taking sort of a event from this sort of chain",
    "start": "1851169",
    "end": "1856870"
  },
  {
    "text": "stream we're gonna then put it on a Kinesis stream and that should work so let's go ahead and do that so we need an",
    "start": "1856870",
    "end": "1864070"
  },
  {
    "text": "get a sample document so we've got full and I'll show you where this comes from in a moment and it needs a sensor ID foo",
    "start": "1864070",
    "end": "1875039"
  },
  {
    "text": "and then if we run that we get a sequence ID now in theory I could show",
    "start": "1875039",
    "end": "1882039"
  },
  {
    "text": "you in here that it worked sometimes it takes a while for the monitoring page to",
    "start": "1882039",
    "end": "1888309"
  },
  {
    "text": "actually update in real time they maybe should use more Kinesis themselves but",
    "start": "1888309",
    "end": "1894370"
  },
  {
    "text": "you can do that there and so now let's go can now it's gonna actually make this a trigger so all we have to do is we go",
    "start": "1894370",
    "end": "1901480"
  },
  {
    "text": "to triggers let me say at a database trigger so we select our cluster now in",
    "start": "1901480",
    "end": "1909010"
  },
  {
    "text": "our Atlas cluster we can go see what data we have and then what we're gonna do is we're gonna put the database name",
    "start": "1909010",
    "end": "1914740"
  },
  {
    "text": "in in the collection name that we want to listen to we want to go for all inserts we want this trigger to happen every time I enter something into",
    "start": "1914740",
    "end": "1920890"
  },
  {
    "text": "MongoDB and the collection I want to use as sensors dot observations so let's go",
    "start": "1920890",
    "end": "1927549"
  },
  {
    "text": "ahead and move this over here",
    "start": "1927549",
    "end": "1930419"
  },
  {
    "text": "and I want the full document so this triggers has two modes of operating one is that the full document that you get",
    "start": "1933290",
    "end": "1938300"
  },
  {
    "text": "in MongoDB gets pulled directly into the event handler and the other is that",
    "start": "1938300",
    "end": "1944270"
  },
  {
    "text": "where you actually go ahead and only get the actual delta so if you're doing an update for example all you're gonna do is get sort of the increment operator or",
    "start": "1944270",
    "end": "1950180"
  },
  {
    "text": "the update operator then we're gonna say well we want to call that the event hook",
    "start": "1950180",
    "end": "1955720"
  },
  {
    "text": "we'll save that okay so now we should be good so to see if this works we're gonna",
    "start": "1955720",
    "end": "1960920"
  },
  {
    "text": "go we're gonna go to the logs and we're gonna go an insert using the data",
    "start": "1960920",
    "end": "1967160"
  },
  {
    "text": "Explorer API directly inside of Atlas let's go to insert that document and if",
    "start": "1967160",
    "end": "1975260"
  },
  {
    "text": "we refresh this page you'll see that now there's an event here and you'll see the sequence ID that got put into Kinesis",
    "start": "1975260",
    "end": "1981710"
  },
  {
    "text": "with so now is that easy so now every time in document gets inserted into this collection this trigger is gonna get",
    "start": "1981710",
    "end": "1987770"
  },
  {
    "text": "triggered that function is gonna go and this thing is gonna automatically go from Atlas all the way down into Kinesis",
    "start": "1987770",
    "end": "1992900"
  },
  {
    "text": "right and then from Canisius you can then obviously put it sort of anywhere that you want so that's pretty",
    "start": "1992900",
    "end": "1998780"
  },
  {
    "text": "straightforward so let's keep going so I said earlier",
    "start": "1998780",
    "end": "2004090"
  },
  {
    "text": "that stitch function is a lambda sort of serve different purposes so where is",
    "start": "2004090",
    "end": "2009100"
  },
  {
    "text": "sort of a lambda you know particularly useful well let's imagine that for every time a you know we update the status of",
    "start": "2009100",
    "end": "2015250"
  },
  {
    "text": "an order from not shipped to shipped we want to send an actual PDF you know order invoice to our users right and",
    "start": "2015250",
    "end": "2022990"
  },
  {
    "text": "that's what we want to do so in this case we're gonna have a stitch trigger and this stitch trigger is gonna go",
    "start": "2022990",
    "end": "2028660"
  },
  {
    "text": "ahead and listen to all updates on the orders collection in that stitch trigger",
    "start": "2028660",
    "end": "2033940"
  },
  {
    "text": "you can sort of put some criteria and say okay I'm only going to actually trigger on this when status goes from not ship to ship",
    "start": "2033940",
    "end": "2041070"
  },
  {
    "text": "then if that happens I'm gonna call lambda function so the lambda again the",
    "start": "2041070",
    "end": "2046960"
  },
  {
    "start": "2045000",
    "end": "2068000"
  },
  {
    "text": "stitch code to call this is going to look like this it's almost identical to all the other things we just looked at",
    "start": "2046960",
    "end": "2052780"
  },
  {
    "text": "right all you're doing is invoking something on the lambda service instead of on the other services used to give it",
    "start": "2052780",
    "end": "2058389"
  },
  {
    "text": "different parameters but all looks kind of the same and the reason why you might want to use lambda for sort of actually generating the PDF",
    "start": "2058390",
    "end": "2064398"
  },
  {
    "text": "they're generating the PDF you may not want to do it all my custom JavaScript but maybe you want to do it in Python",
    "start": "2064399",
    "end": "2069829"
  },
  {
    "start": "2068000",
    "end": "2100000"
  },
  {
    "text": "you want to go ahead and use some sort of standard PDF library and in this case you can actually use it and it may take",
    "start": "2069829",
    "end": "2075470"
  },
  {
    "text": "a few seconds to generate a PDF maybe there's a lot of things in it generating a PDF could you want to put on s3 y/y a",
    "start": "2075470",
    "end": "2081470"
  },
  {
    "text": "bunch of different stuff so in this case you can actually just take your write a lambda function that goes and pulls it",
    "start": "2081470",
    "end": "2086809"
  },
  {
    "text": "off the attributes of the order directly from the event coming from MongoDB and then generate the full PDF that's a",
    "start": "2086809",
    "end": "2094128"
  },
  {
    "text": "pretty good use case for lambda and it's pretty straightforward to do it and then you can sort of do things right there so",
    "start": "2094129",
    "end": "2101930"
  },
  {
    "start": "2100000",
    "end": "2128000"
  },
  {
    "text": "what if you want to go ahead and send text messages right now every time you update the inventory and item maybe",
    "start": "2101930",
    "end": "2107150"
  },
  {
    "text": "that's now out of stock and I want to sort of go and tell my shipping to Herman hey I need to get more of these things that's a pretty interesting case",
    "start": "2107150",
    "end": "2112819"
  },
  {
    "text": "where I want to go it from a mall gonna be atlas cluster or some sort of event to a stitch trigger to a stitch function",
    "start": "2112819",
    "end": "2119630"
  },
  {
    "text": "and either like maybe send the text message if I need this product like right now or maybe a you know send an email and just say hey can you please go",
    "start": "2119630",
    "end": "2126319"
  },
  {
    "text": "and order more of these things and again this is pretty straightforward so this is how you would send a SCS email",
    "start": "2126319",
    "end": "2132589"
  },
  {
    "start": "2128000",
    "end": "2141000"
  },
  {
    "text": "through stitch right again it's the same kind of a thing you're just using the SES API and calling that directly Oh",
    "start": "2132589",
    "end": "2138940"
  },
  {
    "text": "without analytics so in the analytics world I was a bunch of different things",
    "start": "2138940",
    "end": "2143960"
  },
  {
    "start": "2141000",
    "end": "2189000"
  },
  {
    "text": "you might want to do so for example maybe every time something gets modified in your atlas cluster you want to go and",
    "start": "2143960",
    "end": "2150170"
  },
  {
    "text": "put a copy of that data in redshift so you can use some sort of interesting queries on and in redshift so again it's",
    "start": "2150170",
    "end": "2155630"
  },
  {
    "text": "going to look very similar as well it's gonna go from outlets to stitch to a Kinesis data stream going through the",
    "start": "2155630",
    "end": "2161690"
  },
  {
    "text": "Kinesis data firehose of which the redshift is sort of one of the possible outcomes there and then from there",
    "start": "2161690",
    "end": "2166730"
  },
  {
    "text": "directly onto redshift so that's one way you can look at it another way you you might want to look at it is maybe you",
    "start": "2166730",
    "end": "2172640"
  },
  {
    "text": "don't want to have to sort of put it into a different kind of a data warehouse right maybe what you want to do is be able to actually query that",
    "start": "2172640",
    "end": "2178039"
  },
  {
    "text": "data in real time so I don't have to sort of go somewhere else or maybe I just don't want to have two copies of my",
    "start": "2178039",
    "end": "2183799"
  },
  {
    "text": "data because why would I want to have two copies of my data when I potentially only need one so in that case what you",
    "start": "2183799",
    "end": "2190130"
  },
  {
    "text": "can actually do is actually query MongoDB Atlas directly with Amazon quick",
    "start": "2190130",
    "end": "2195410"
  },
  {
    "text": "site using the be a connector for those of you don't know the bi connector is a",
    "start": "2195410",
    "end": "2202020"
  },
  {
    "text": "basically a sequel proxy for among the DB so you can run inside of Atlas it basically it mimics the my sequel wire",
    "start": "2202020",
    "end": "2209730"
  },
  {
    "text": "protocol so anything that speaks the my sequel wire protocol can go ahead and talk directly to your instance",
    "start": "2209730",
    "end": "2216480"
  },
  {
    "text": "works in Atlas or not in Atlas its supports all read-only my sequel queries",
    "start": "2216480",
    "end": "2222720"
  },
  {
    "text": "I think it's support of basically everything in the latest version of my sequel so that's pretty cool and then you can go ahead using quick site",
    "start": "2222720",
    "end": "2228690"
  },
  {
    "text": "because quick site supports my sequel and you can actually just connect connect quick site directly to add to",
    "start": "2228690",
    "end": "2234450"
  },
  {
    "text": "Alice will haven't jumped through any more hoops so let's just show you sort of just how simple that is so what we're",
    "start": "2234450",
    "end": "2242340"
  },
  {
    "start": "2240000",
    "end": "2489000"
  },
  {
    "text": "gonna do is so over here we've got our",
    "start": "2242340",
    "end": "2248850"
  },
  {
    "text": "cluster so I said before editing the cluster that's pretty straightforward so",
    "start": "2248850",
    "end": "2253890"
  },
  {
    "text": "let's say we wants to turn on the BI connector I already have it on but just if you wanted to turn it on you could",
    "start": "2253890",
    "end": "2258900"
  },
  {
    "text": "come down to sort of the Edit configuration page you go to additional settings and you would just turn on the",
    "start": "2258900",
    "end": "2264810"
  },
  {
    "text": "BI connector like this you can figure the be a connector to either query secondary nodes if you don't want to",
    "start": "2264810",
    "end": "2270480"
  },
  {
    "text": "sort of impact reduction in production traffic or you can say I want to update I want to hit from the primaries because",
    "start": "2270480",
    "end": "2275580"
  },
  {
    "text": "I want it to be consistent because maybe I want you know for whatever reason you want that to happen there's some a few",
    "start": "2275580",
    "end": "2281160"
  },
  {
    "text": "little options you can have there as well and then you just go and turn that on and so now I've actually got a bi",
    "start": "2281160",
    "end": "2287280"
  },
  {
    "text": "connector running it's running on the same nodes as my regular Atlas nodes and I can go and connect to it directly",
    "start": "2287280",
    "end": "2292860"
  },
  {
    "text": "either through the my sequel shell or anything that speaks my sequel so in this case we're actually going to go",
    "start": "2292860",
    "end": "2298500"
  },
  {
    "text": "ahead and connect it directly from quick site so here is the Amazon quick site UI",
    "start": "2298500",
    "end": "2304070"
  },
  {
    "text": "so we're going to go ahead and create a new data set and we were just going to",
    "start": "2304070",
    "end": "2310680"
  },
  {
    "text": "create the data set from my sequel I'm being blind right there so we're going",
    "start": "2310680",
    "end": "2316830"
  },
  {
    "text": "to call this the data set we're gonna look like look at as an Airbnb data set it's got some interesting stuff in it",
    "start": "2316830",
    "end": "2322380"
  },
  {
    "text": "and so now if you come back over to to Atlas it tells you if you want to connect to a bi connector I here's how",
    "start": "2322380",
    "end": "2329430"
  },
  {
    "text": "to do that so here is the hostname to use for my sequel the port is 2701 5 let's go",
    "start": "2329430",
    "end": "2339690"
  },
  {
    "text": "figure out what cluster what data we want to actually go look at so in this case we want to connect to the Airbnb",
    "start": "2339690",
    "end": "2346910"
  },
  {
    "text": "database and my username is demo I'm not gonna tell you my password we're going",
    "start": "2346910",
    "end": "2354119"
  },
  {
    "text": "to validate the connection and then go ahead and create the datasource we're just gonna pull on one table for now ok",
    "start": "2354119",
    "end": "2363210"
  },
  {
    "text": "and so now we were actually connected quick site directly to my cluster and MongoDB and I can go ahead and start",
    "start": "2363210",
    "end": "2369960"
  },
  {
    "text": "creating reports directly from this data so let's imagine that I want to go ahead",
    "start": "2369960",
    "end": "2375510"
  },
  {
    "text": "and look at the this is sort of all the data from San Francisco so I want to look at different suburbs of San",
    "start": "2375510",
    "end": "2382770"
  },
  {
    "text": "Francisco and I want to sort of count so automatically this is a count of how",
    "start": "2382770",
    "end": "2387960"
  },
  {
    "text": "many Airbnb listings there are for that suburb but maybe what I want to do is look at the price for different suburbs",
    "start": "2387960",
    "end": "2399530"
  },
  {
    "text": "take the price drag that over here I believe this is the total price and now",
    "start": "2399530",
    "end": "2408030"
  },
  {
    "text": "we can actually go ahead and know",
    "start": "2408030",
    "end": "2416119"
  },
  {
    "text": "there is a magic button to press well",
    "start": "2418589",
    "end": "2424839"
  },
  {
    "text": "you can see it's computing the total price for you right now I know there",
    "start": "2424839",
    "end": "2431039"
  },
  {
    "text": "that I'm gonna stop trying to figure it out but you can see even if you are a",
    "start": "2431640",
    "end": "2436839"
  },
  {
    "text": "quick site expert unlike me you can go ahead and figure this out very quickly and sort of create a dashboard you can go ahead and then create another one",
    "start": "2436839",
    "end": "2443020"
  },
  {
    "text": "pretty nicely so this looks pretty nice this is pretty straightforward of course the only downside is I've gone",
    "start": "2443020",
    "end": "2448990"
  },
  {
    "text": "ahead and taking my really nice collections in MongoDB and flattened",
    "start": "2448990",
    "end": "2454660"
  },
  {
    "text": "them right the way that the BI connector works is for every collection in MongoDB it figures out the levels of hierarchy",
    "start": "2454660",
    "end": "2460240"
  },
  {
    "text": "that are there it samples the schema and forever every sort of possible combination it actually goes and creates",
    "start": "2460240",
    "end": "2465579"
  },
  {
    "text": "a table right not a real table it's a virtual table but it exposes it as tables so you can sort of get that view",
    "start": "2465579",
    "end": "2471609"
  },
  {
    "text": "from a relational database so if you notice when we create when we actually were creating our dataset",
    "start": "2471609",
    "end": "2478680"
  },
  {
    "text": "let's get that you there's actually those three collections turned into about 25 different tables so that's not",
    "start": "2479700",
    "end": "2486400"
  },
  {
    "text": "entirely ideal and since that's not entirely ideal that's why we actually",
    "start": "2486400",
    "end": "2492250"
  },
  {
    "start": "2489000",
    "end": "2565000"
  },
  {
    "text": "created a new product called MongoDB charts and MongoDB charts is again pretty much what it sounds like my mom",
    "start": "2492250",
    "end": "2499299"
  },
  {
    "text": "gonna be charts let's do query data directly in MongoDB natively through sort of a native charting and",
    "start": "2499299",
    "end": "2505029"
  },
  {
    "text": "dashboarding app built for MongoDB right so it doesn't go through the sequel layer it just builds aggregation of",
    "start": "2505029",
    "end": "2510430"
  },
  {
    "text": "pipeline queries directly so this is what it looks like this is sort of the chart builder where you can go ahead and",
    "start": "2510430",
    "end": "2516220"
  },
  {
    "text": "build nice charts and then you can go and combine them and build them and turn them into one dashboard if you want to",
    "start": "2516220",
    "end": "2523270"
  },
  {
    "text": "go play with it it's actually in beta right now so you can go download it try it and start start poking around and",
    "start": "2523270",
    "end": "2529450"
  },
  {
    "text": "then of course one thing you the last thing you might want to do in this case is actually go ahead and everything that you're doing inside of MongoDB Atlas",
    "start": "2529450",
    "end": "2535809"
  },
  {
    "text": "maybe I want to go have a stitch function and go ahead and put those documents onto s3 maybe I want to use G",
    "start": "2535809",
    "end": "2541180"
  },
  {
    "text": "also like query them using spark or something like that or maybe you know definitely a lot of services out there that are looking at things like okay",
    "start": "2541180",
    "end": "2546910"
  },
  {
    "text": "maybe I wanna build a query things in s3 using different things pretty interesting so that's sort of a",
    "start": "2546910",
    "end": "2553100"
  },
  {
    "text": "lot of theory and a lot of sort of philosophical things you could do and a lot of sort of ways you might want to",
    "start": "2553100",
    "end": "2558740"
  },
  {
    "text": "build a modern application but next I thought it'd be good to actually go ahead and look at an actual one and look at a real one",
    "start": "2558740",
    "end": "2564410"
  },
  {
    "text": "in this case tick attack and luckily we have actually the enterprise architect who designed the take attack who can",
    "start": "2564410",
    "end": "2570680"
  },
  {
    "start": "2565000",
    "end": "2601000"
  },
  {
    "text": "walk us through the example so we'd like to invite honey Oats to come and talk you a little about ticket Tech's actual",
    "start": "2570680",
    "end": "2575900"
  },
  {
    "text": "real-time data streaming platform thanks",
    "start": "2575900",
    "end": "2584330"
  },
  {
    "text": "Eliot before I get into how real-time our real-time streaming architecture drives data across our business has",
    "start": "2584330",
    "end": "2591500"
  },
  {
    "text": "anyone heard of ticket tech here in this room didn't Oh one person Ozzie or Kiwi there you go so",
    "start": "2591500",
    "end": "2600290"
  },
  {
    "text": "let me just give you a quick run through what we are we're Australian New Zealand's number one ticketing company",
    "start": "2600290",
    "end": "2605630"
  },
  {
    "text": "so we drive ticketing from an online sense we drive the ticketing at the venue we drive the ability for you to",
    "start": "2605630",
    "end": "2611300"
  },
  {
    "text": "get that ticket into the venue so we stretch across all parts of actually selling the ticket and getting you into",
    "start": "2611300",
    "end": "2617570"
  },
  {
    "text": "that venue to be able to do that so you can kind of see the importance that we actually have with being able to move",
    "start": "2617570",
    "end": "2623120"
  },
  {
    "text": "data around and run it through so about four years ago we went and did a whole",
    "start": "2623120",
    "end": "2628220"
  },
  {
    "text": "Reap lat forming of our architecture which I'm going to tell you which is the heart of wood drove it in there and we used to be able to drive",
    "start": "2628220",
    "end": "2635390"
  },
  {
    "text": "ourselves which are around we write about 10,000 records a minute or documents a minute into and drive",
    "start": "2635390",
    "end": "2641480"
  },
  {
    "text": "it through with that though that information it's transactional needs to get out to all these sources and we",
    "start": "2641480",
    "end": "2647960"
  },
  {
    "start": "2646000",
    "end": "2907000"
  },
  {
    "text": "needed to put an architecture and play that allowed that to play and what we did is we essentially moved our world in",
    "start": "2647960",
    "end": "2653870"
  },
  {
    "text": "our industry away from batch files see the CSV files going out by SFTP and such",
    "start": "2653870",
    "end": "2660170"
  },
  {
    "text": "and take it into a real streaming architecture so we had to feed a real-time analytics dashboard we had to",
    "start": "2660170",
    "end": "2667880"
  },
  {
    "text": "feed a data warehouse which is like redshift there we had to be able to feed what we call is tools that people use to",
    "start": "2667880",
    "end": "2675830"
  },
  {
    "text": "understand how the venues are actually selling how they populate what it's selling right to make decisions about",
    "start": "2675830",
    "end": "2682220"
  },
  {
    "text": "how they maybe market that on sale they made me move seats around how they reprice it to do those side of things",
    "start": "2682220",
    "end": "2688769"
  },
  {
    "text": "and the other part we had to do is we had to bring all of our clients on this journey so the clients of our business",
    "start": "2688769",
    "end": "2695159"
  },
  {
    "text": "our venues our promoters and they all use data to make their own type of decisions of what's going on and we had",
    "start": "2695159",
    "end": "2701609"
  },
  {
    "text": "to bring them along to be able to take real time data streaming because there's no point bringing a whole architecture",
    "start": "2701609",
    "end": "2707129"
  },
  {
    "text": "together and then say here's what you're going to do but no one can actually work and consume that so our journey over the",
    "start": "2707129",
    "end": "2713369"
  },
  {
    "text": "years has also been bringing these type of armed parties to cloud-based platforms to be able to take this",
    "start": "2713369",
    "end": "2719459"
  },
  {
    "text": "information so well you can see up here we have data that's coming in from and the very less that's as I said",
    "start": "2719459",
    "end": "2726149"
  },
  {
    "text": "that's the heart that's our transactional database of what we're going in there we then have a system",
    "start": "2726149",
    "end": "2731579"
  },
  {
    "text": "that sits there and pulls and pulls that information off and then pumps it into a Kinesis data stream as a leeet's been",
    "start": "2731579",
    "end": "2739349"
  },
  {
    "text": "talking today with the introduction of stitch and stitched triggers that's where that sort of plays and that's",
    "start": "2739349",
    "end": "2744809"
  },
  {
    "text": "where that would actually go forward with us in there but at the moment we run that on arm currently at the moment",
    "start": "2744809",
    "end": "2750119"
  },
  {
    "text": "AWS Fargate container base side of things and what it does is it pushes into streams so we've got ranges of data",
    "start": "2750119",
    "end": "2756479"
  },
  {
    "text": "objects that are being written documents have been written to go into streams and we've got sets of Landers",
    "start": "2756479",
    "end": "2762389"
  },
  {
    "text": "that are consumed in those streams and then doing different things with that data sometimes they might be pushing",
    "start": "2762389",
    "end": "2768389"
  },
  {
    "text": "them into just another data source I'm sorry another stream based on some bit",
    "start": "2768389",
    "end": "2773579"
  },
  {
    "text": "of information and it may be it's a sale information for a particular venue so it needs to go into them maybe it's some",
    "start": "2773579",
    "end": "2780929"
  },
  {
    "text": "type of customer information that needs to go into our analytics or data marketing team and all they do is they",
    "start": "2780929",
    "end": "2788429"
  },
  {
    "text": "get that data Landers go and enrich that data possibly and then pass it along to another stream",
    "start": "2788429",
    "end": "2793499"
  },
  {
    "text": "which actually then has Landers sitting on the end of it so we have a continual streaming and enriching process that",
    "start": "2793499",
    "end": "2799049"
  },
  {
    "text": "goes along and feeds these different sources and eventually you get into as you can see there we run things into our",
    "start": "2799049",
    "end": "2807239"
  },
  {
    "text": "ticktick data warehouse we put it into real time sales which is running off of ElastiCache Redis aggregation databases",
    "start": "2807239",
    "end": "2816700"
  },
  {
    "text": "we and as I said we push it out currently we push out into event",
    "start": "2816700",
    "end": "2822180"
  },
  {
    "text": "Microsoft Azure environments AWS environments Google cloud environments",
    "start": "2822180",
    "end": "2827440"
  },
  {
    "text": "for other parties that actually doing that so we don't drive that they have to be particular into one cloud platform or",
    "start": "2827440",
    "end": "2833500"
  },
  {
    "text": "not what we do we drive and they take the data in real time and that's really the heart of what we",
    "start": "2833500",
    "end": "2839140"
  },
  {
    "text": "actually do and if you think about where I sort of talked about being the heart are streaming architecture as the",
    "start": "2839140",
    "end": "2845230"
  },
  {
    "text": "arteries that's going around that's driving the parts of our business that run off of data which are the limbs and",
    "start": "2845230",
    "end": "2851380"
  },
  {
    "text": "all of that side of things going in there so that's what we're going to do I would say what we're doing now what",
    "start": "2851380",
    "end": "2857109"
  },
  {
    "text": "we're going to do and take this on with the introduction of stitch as what I mentioned is we're really excited about",
    "start": "2857109",
    "end": "2862720"
  },
  {
    "text": "stitch triggers that takes a part of our infrastructure that's where you can see",
    "start": "2862720",
    "end": "2867910"
  },
  {
    "text": "underneath is this memo to KI which is actually just short for to Kinesis very simple get in there",
    "start": "2867910",
    "end": "2874599"
  },
  {
    "text": "that's sitting there and running on that side of things in there and that's just a purpose-built polling of the our table",
    "start": "2874599",
    "end": "2879910"
  },
  {
    "text": "so with stitch triggers we can actually remove that and actually get into more pure server less architecture that we're",
    "start": "2879910",
    "end": "2886660"
  },
  {
    "text": "running through the rest of the environment so we're really excited for that coming on board and looking for the",
    "start": "2886660",
    "end": "2892000"
  },
  {
    "text": "future to how we can keep driving through what we do if our data thank you",
    "start": "2892000",
    "end": "2898200"
  },
  {
    "text": "[Applause]",
    "start": "2898410",
    "end": "2905440"
  },
  {
    "text": "so thanks town I so that is a great sort of real-world example sort of how you",
    "start": "2906940",
    "end": "2912350"
  },
  {
    "start": "2907000",
    "end": "3044000"
  },
  {
    "text": "can compose you know build modern applications with it by composing by composing a you know whole bunch of",
    "start": "2912350",
    "end": "2918830"
  },
  {
    "text": "different services together and by composing these servers this build sort of a really great architecture without having to write a Nascimento boilerplate",
    "start": "2918830",
    "end": "2925310"
  },
  {
    "text": "code yourself so another interesting thing is sort of the the atlas which",
    "start": "2925310",
    "end": "2931520"
  },
  {
    "text": "really is a global cloud database and one of the sort of the cool things you can do in Atlas is one it's available in",
    "start": "2931520",
    "end": "2938360"
  },
  {
    "text": "every sort of it's available in every single Amazon region and you can go full sort of global cross region distribution",
    "start": "2938360",
    "end": "2945680"
  },
  {
    "text": "of data and this too is a couple of different ways this can work one is let's say you've got sort of a data set that's mostly written to from one region",
    "start": "2945680",
    "end": "2951830"
  },
  {
    "text": "and then you want to distribute that data to every region right you can very easily configure it close to this says ok I've got three nodes sitting in US",
    "start": "2951830",
    "end": "2958010"
  },
  {
    "text": "East one and then I put one node into almost every other Amazon region so I can serve very fast reads out of out of",
    "start": "2958010",
    "end": "2964130"
  },
  {
    "text": "every region you can also do you know the zone Chardon like we've talked about before so you can use that map that I",
    "start": "2964130",
    "end": "2969530"
  },
  {
    "text": "would love to sort of go back and show you and actually go ahead and sort of put data in different geographies for either a little very low latency reads",
    "start": "2969530",
    "end": "2975920"
  },
  {
    "text": "and or writes and also sort of to meet regulatory needs so you can keep different data and different geographies",
    "start": "2975920",
    "end": "2982400"
  },
  {
    "text": "to make sure that data stays where it needs to stay and it's sort of completely fully managed stitch right we",
    "start": "2982400",
    "end": "2989630"
  },
  {
    "text": "talked a lot about stitched today it executes to sort of on changes you know directly in your database so as things",
    "start": "2989630",
    "end": "2995810"
  },
  {
    "text": "change in your database a stitch function is going to get called so anything you want to do real-time based on things happening in the database is",
    "start": "2995810",
    "end": "3001420"
  },
  {
    "text": "incredibly easy it's just a very small JavaScript function and it's incredibly easy to integrate with through",
    "start": "3001420",
    "end": "3006820"
  },
  {
    "text": "third-party services or any other any Amazon services any Amazon service that",
    "start": "3006820",
    "end": "3011890"
  },
  {
    "text": "you want so whether it's sending text messages through Twilio or integrating with SES or Kinesis or anything like",
    "start": "3011890",
    "end": "3017470"
  },
  {
    "text": "that it's super simple and then it also sort of very securely exposes the data",
    "start": "3017470",
    "end": "3023530"
  },
  {
    "text": "you know of MongoDB to sort of any client using stitch query anywhere we can sort of very regimented access in a",
    "start": "3023530",
    "end": "3030430"
  },
  {
    "text": "very declarative way but still be able to actually do very interesting queries very interesting analytic from any device was a mobile device or",
    "start": "3030430",
    "end": "3037540"
  },
  {
    "text": "sort of IOT device or a mobile application so that's sort of a a lot of",
    "start": "3037540",
    "end": "3043900"
  },
  {
    "text": "interesting stuff if you want to go ahead and try MongoDB use that if you use that URL you'll get a free two",
    "start": "3043900",
    "end": "3050350"
  },
  {
    "text": "hundred dollars in Atlas credit you can also if you like it you can also loop live migrate your existing long ago",
    "start": "3050350",
    "end": "3056380"
  },
  {
    "text": "cluster that's not on Atlas into Atlas with no downtime right it actually goes ahead and takes the data and uses sort",
    "start": "3056380",
    "end": "3063070"
  },
  {
    "text": "of the octave pull the data from your cluster into Hmong into Atlas and then when you're ready to cut over you just",
    "start": "3063070",
    "end": "3068200"
  },
  {
    "text": "have to you know change your connection strings those of you who are interested please join us for our pub you know the",
    "start": "3068200",
    "end": "3074770"
  },
  {
    "text": "beginning of the pub crawl at aqua at aqua Knox at six o'clock we're just pretty pretty soon and then also if you",
    "start": "3074770",
    "end": "3082420"
  },
  {
    "text": "haven't done so already check out our booth at the Venetian or you can learn more about Allison stitch or at the at",
    "start": "3082420",
    "end": "3088600"
  },
  {
    "text": "Aria we actually have a little stitch powered Rover that is trying to drive",
    "start": "3088600",
    "end": "3093970"
  },
  {
    "text": "around a simulated Mars environment it's pretty fun you can go play with it and see what Mars might look like and so now",
    "start": "3093970",
    "end": "3100930"
  },
  {
    "text": "I think we'll see if there are any questions and uh answer any questions that people might have",
    "start": "3100930",
    "end": "3106320"
  },
  {
    "text": "and then Dorothy is running the mic around and there's yes hi is it FedRAMP",
    "start": "3106320",
    "end": "3116050"
  },
  {
    "text": "approved and does it work in a hybrid environment like on premise and in AWS",
    "start": "3116050",
    "end": "3121770"
  },
  {
    "text": "so is the FedRAMP reproof ed not yet we're working on it right now we have we",
    "start": "3121770",
    "end": "3127150"
  },
  {
    "text": "have sock Q type two we also are signing bas for HIPAA and we're working in an",
    "start": "3127150",
    "end": "3132670"
  },
  {
    "text": "ISO PCI and FedRAMP and will it work in hybrid environment so MongoDB does quite",
    "start": "3132670",
    "end": "3139300"
  },
  {
    "text": "well so you can you know we have practically most of our clients are sort of hybrid in some way whether on Fram or",
    "start": "3139300",
    "end": "3145780"
  },
  {
    "text": "in the cloud and there's lots of ways you can do that and we have tools for like managing on in your own data",
    "start": "3145780",
    "end": "3151930"
  },
  {
    "text": "center and your own private cloud all that all of that kind of stuff",
    "start": "3151930",
    "end": "3157890"
  },
  {
    "text": "any other questions great so thank you for coming and please don't forget to",
    "start": "3158040",
    "end": "3164380"
  },
  {
    "text": "submit the survey for the session thank you very much [Applause]",
    "start": "3164380",
    "end": "3174219"
  }
]