[
  {
    "start": "0",
    "end": "76000"
  },
  {
    "text": "welcome to the session I am Assad javahar I a software development manager on the Amazon simple workflow",
    "start": "399",
    "end": "7599"
  },
  {
    "text": "team in this session we are going to talk about Amazon simple workflow and",
    "start": "7599",
    "end": "12880"
  },
  {
    "text": "how you can use it to build out various use cases in the applications that you that you",
    "start": "12880",
    "end": "18840"
  },
  {
    "text": "build and specifically we are going to talk about the crown use skilles which is running tasks on a periodic",
    "start": "18840",
    "end": "25400"
  },
  {
    "text": "basis uh I'm excited to have with me presenting today Jeff uh who is one of our valued",
    "start": "25400",
    "end": "31599"
  },
  {
    "text": "customers and Jeff is the CTO and co-founder of contactually and Jeff is",
    "start": "31599",
    "end": "37559"
  },
  {
    "text": "going to talk about how they are adopting simple workflow in contextually",
    "start": "37559",
    "end": "42760"
  },
  {
    "text": "uh among other things for their cron needs uh so in this session I'm not uh",
    "start": "42760",
    "end": "48559"
  },
  {
    "text": "making any assumptions about um any prior knowledge of simple workflow so I'm going to give you an overview of",
    "start": "48559",
    "end": "54640"
  },
  {
    "text": "simple workflow and I'm going to talk about all the basic concepts that you need to understand uh for the rest of of",
    "start": "54640",
    "end": "60120"
  },
  {
    "text": "the content so the overall flow is that we'll look at simple workflow give you a brief overview uh then we will build out",
    "start": "60120",
    "end": "66720"
  },
  {
    "text": "a use case where we might need chronik functionality and then Jeff will talk about how they are using simple workflow",
    "start": "66720",
    "end": "73119"
  },
  {
    "text": "in contactually okay so let's start with",
    "start": "73119",
    "end": "78360"
  },
  {
    "start": "76000",
    "end": "306000"
  },
  {
    "text": "some Basics so what is simple workflow in a nutshell simple workflow",
    "start": "78360",
    "end": "84360"
  },
  {
    "text": "is a service that provides the building blocks and a controller to reduce the",
    "start": "84360",
    "end": "90600"
  },
  {
    "text": "complexity of infrastructure programming and state Machinery in other words it's a service",
    "start": "90600",
    "end": "98159"
  },
  {
    "text": "that makes it easy for you to coordinate tasks or Works across distributed",
    "start": "98159",
    "end": "103799"
  },
  {
    "text": "components of your application so let me tell you a little bit of a history on simple workflow so",
    "start": "103799",
    "end": "110960"
  },
  {
    "text": "simple workflow was introduced as a public AWS service only last year but",
    "start": "110960",
    "end": "116759"
  },
  {
    "text": "really within Amazon we've been using it for a number of years in various applications and the reason that we",
    "start": "116759",
    "end": "123119"
  },
  {
    "text": "built simple workflow was to address a need that we saw becoming increasingly",
    "start": "123119",
    "end": "128479"
  },
  {
    "text": "common in the types of applications that we were building within Amazon and the types of applications that we saw our",
    "start": "128479",
    "end": "135440"
  },
  {
    "text": "customers try to build on AWS and what was common in those",
    "start": "135440",
    "end": "140760"
  },
  {
    "text": "applications was the way that they were getting their work done and the way that they were getting their work done was by",
    "start": "140760",
    "end": "147400"
  },
  {
    "text": "utilizing a number of different components uh that were running on a number of different machines and the reason that these",
    "start": "147400",
    "end": "154319"
  },
  {
    "text": "applications did that was either because they had some existing infrastructure that they wanted to reuse in new",
    "start": "154319",
    "end": "160440"
  },
  {
    "text": "applications that they were building and sometimes even the new components of these applications that the developers",
    "start": "160440",
    "end": "166000"
  },
  {
    "text": "were writing from scratch were also running on separate machines and usually they would do it because they wanted to",
    "start": "166000",
    "end": "172720"
  },
  {
    "text": "have control and that component so they can selectively scale that out and sometimes they simply wanted to reuse",
    "start": "172720",
    "end": "178680"
  },
  {
    "text": "that component across many applications so they made it into its own system into",
    "start": "178680",
    "end": "184159"
  },
  {
    "text": "its own service then they were able to share across applications and often times uh these",
    "start": "184159",
    "end": "191519"
  },
  {
    "text": "applications were trying to model a process or they were automating some process that was inherently distributed",
    "start": "191519",
    "end": "197040"
  },
  {
    "text": "so you can imagine a system where you may need to have a component that needs to run on a mobile device or you may",
    "start": "197040",
    "end": "203040"
  },
  {
    "text": "have a component that is required to be run in a certain part of your network so examples of these types of",
    "start": "203040",
    "end": "209120"
  },
  {
    "text": "applications include thing like things like infrastructure provisioning which is a process of bringing online new",
    "start": "209120",
    "end": "214920"
  },
  {
    "text": "servers automation of billing processes uh media ingestion where you may have a library of videos that you process into",
    "start": "214920",
    "end": "221840"
  },
  {
    "text": "different formats for consumption on different devices now implementing these types of",
    "start": "221840",
    "end": "227040"
  },
  {
    "text": "applications required significant investment in the infrastructure to",
    "start": "227040",
    "end": "232079"
  },
  {
    "text": "coordinate work across these components and this coordination involved creating work creating task for",
    "start": "232079",
    "end": "238879"
  },
  {
    "text": "these components assigning tasks to these components uh as these components worked on those tasks monitoring their",
    "start": "238879",
    "end": "245040"
  },
  {
    "text": "progress keeping the overall state of the execution of the process somewhere centrally so that your application has",
    "start": "245040",
    "end": "251599"
  },
  {
    "text": "one place it can look and tell authoritatively what's going on in the overall process and this you know all all this",
    "start": "251599",
    "end": "258799"
  },
  {
    "text": "infrastructure programming made these applications pretty complicated and if you think about it in reality they were",
    "start": "258799",
    "end": "264680"
  },
  {
    "text": "trying to do something very simple so our goal with simple workflow was to provide IDE this coordination",
    "start": "264680",
    "end": "271000"
  },
  {
    "text": "infrastructure out of the box as a service so that you don't have to build it over and over again in your",
    "start": "271000",
    "end": "277479"
  },
  {
    "text": "applications so what simple workflow provides is a coordination engine in the cloud along with libraries and tools",
    "start": "277479",
    "end": "285320"
  },
  {
    "text": "that you can use to easily coordinate work across components of your application and what that allows you to",
    "start": "285320",
    "end": "292360"
  },
  {
    "text": "do is that it gives you the freedom you the application developer to focus on the things that you care about which is",
    "start": "292360",
    "end": "298919"
  },
  {
    "text": "the logic the business logic and the algorithms that make your applications",
    "start": "298919",
    "end": "305360"
  },
  {
    "start": "306000",
    "end": "433000"
  },
  {
    "text": "unique so a few use cases that we have seen our customers recently build on simple workflow the first one here is",
    "start": "306080",
    "end": "313360"
  },
  {
    "text": "NASA Nasa uses simple workflow for their Mars Curiosity project and they use",
    "start": "313360",
    "end": "319280"
  },
  {
    "text": "Simple workflow to process the steroscopic images that are being beamed down from the mar surface and those",
    "start": "319280",
    "end": "325319"
  },
  {
    "text": "images go through a processing Pipeline and NASA is using simple workflow to Arch that entire process and they are",
    "start": "325319",
    "end": "332199"
  },
  {
    "text": "using resources both in the public cloud in ec2 as well as some heavy metal machinery that they have in their own",
    "start": "332199",
    "end": "338440"
  },
  {
    "text": "private networks my second example here is Sage",
    "start": "338440",
    "end": "344080"
  },
  {
    "text": "bio networks Sage is a scientific research organization they are using",
    "start": "344080",
    "end": "349199"
  },
  {
    "text": "simple workflow to process very large genomics data sets using specific",
    "start": "349199",
    "end": "354840"
  },
  {
    "text": "algorithms that various scientists are developing and they're able to use Simple workflow to share these",
    "start": "354840",
    "end": "359960"
  },
  {
    "text": "algorithms across the community my next example here is fluid",
    "start": "359960",
    "end": "367120"
  },
  {
    "text": "fluid was one of our customers uh that presented with us at reinvent last year fluid has a data uh has a product",
    "start": "367120",
    "end": "374479"
  },
  {
    "text": "visualization service and what they do is they take images of of products that",
    "start": "374479",
    "end": "380039"
  },
  {
    "text": "their e-commerce customers want to present on their websites and they create 3D renderings out of those images",
    "start": "380039",
    "end": "385680"
  },
  {
    "text": "and that of course requires a lot of processing a lot of application of algorithms and fluid uses simple workflow to or orchestrate that entire",
    "start": "385680",
    "end": "393680"
  },
  {
    "text": "process uh fluid actually had an implementation which was not based on simple workflow and uh for using that",
    "start": "393680",
    "end": "399599"
  },
  {
    "text": "implementation some of their more complex uh tasks required upwards of a day sometimes two days to completely",
    "start": "399599",
    "end": "405000"
  },
  {
    "text": "process them uh using simple workflow they were able to add a lot of parallelism in that process and now they",
    "start": "405000",
    "end": "411039"
  },
  {
    "text": "have brought down that time uh to process those images uh down to a few hours so those are just some use cases",
    "start": "411039",
    "end": "418520"
  },
  {
    "text": "uh what we have provided with simple workflow is you know very basic foundational kind of capabilities using",
    "start": "418520",
    "end": "424879"
  },
  {
    "text": "which you can build a lot of different kinds of use cases a lot of different kind of applications where you need to coordinate work across",
    "start": "424879",
    "end": "431400"
  },
  {
    "text": "components and one of those use cases that we are going to talk about today is cron so what is cron cron is scheduled",
    "start": "431400",
    "end": "439199"
  },
  {
    "start": "433000",
    "end": "585000"
  },
  {
    "text": "tasks uh it's a it's a facility that's available to you in the operating system on the operating system Crown runs uh on",
    "start": "439199",
    "end": "447000"
  },
  {
    "text": "a continuous basis and you can configure that process to say run a specific task",
    "start": "447000",
    "end": "452680"
  },
  {
    "text": "or a specific script on a schedule uh typically it's used for maintenance and administrative types of tasks so for",
    "start": "452680",
    "end": "459599"
  },
  {
    "text": "example you may have a script uh that kicks in every midnight and it deletes some logs that your application is",
    "start": "459599",
    "end": "465479"
  },
  {
    "text": "putting in a folder another application could be that you are generating a report every day or you may have a",
    "start": "465479",
    "end": "471759"
  },
  {
    "text": "script that backs up your database uh every few hours so it's it's a general you know it's a general useful facility",
    "start": "471759",
    "end": "478039"
  },
  {
    "text": "that you can use in a lot of different us cases so if cron is available in the operating system why might you you know",
    "start": "478039",
    "end": "485280"
  },
  {
    "text": "build similar kind of functionality with simple workflow well there are several good reasons for that the first reason",
    "start": "485280",
    "end": "491680"
  },
  {
    "text": "is that when you run Kon on a single machine in the operating system that single machine is your single you know",
    "start": "491680",
    "end": "498479"
  },
  {
    "text": "point of failure in the system if that machine goes down then your crown is no longer running any jobs",
    "start": "498479",
    "end": "504520"
  },
  {
    "text": "that you wanted to run on that machine are no longer running the other Pro problem with with",
    "start": "504520",
    "end": "509720"
  },
  {
    "text": "operating system provided Kon is that when that machine is down any tasks that",
    "start": "509720",
    "end": "514839"
  },
  {
    "text": "were supposed to run during that time while it was down are lost so if I bring",
    "start": "514839",
    "end": "520080"
  },
  {
    "text": "that machine back up or I replace that machine uh it's going to you know start from that point on it's not going to go",
    "start": "520080",
    "end": "526320"
  },
  {
    "text": "back and backfill any of the tasks that were lost with simple workflow you have a lot of flexibility in how you handle",
    "start": "526320",
    "end": "533200"
  },
  {
    "text": "failure conditions so you can easily Implement various mitigation strategies and you can easily Implement a strategy",
    "start": "533200",
    "end": "538720"
  },
  {
    "text": "which says if there was downtime go back and backfill these",
    "start": "538720",
    "end": "543639"
  },
  {
    "text": "tasks the other obvious problem with running cron on a single machine is that that single machine is now your scale",
    "start": "543880",
    "end": "549519"
  },
  {
    "text": "limit if you wanted to run a lot of heavy duty jobs on a priodic basis you don't want to run it on a single machine",
    "start": "549519",
    "end": "555720"
  },
  {
    "text": "you want to run it on a pool of machines but now that means you have to coordinate between those machines and that's what simple workflow is built to",
    "start": "555720",
    "end": "563240"
  },
  {
    "text": "do and the last thing here is that sometimes operating system provided Crown is simply not an option for you",
    "start": "563240",
    "end": "569480"
  },
  {
    "text": "especially if you're running in some sort of a shared hosting environment uh cron is typically not available as an option so what you can do is that you",
    "start": "569480",
    "end": "576120"
  },
  {
    "text": "can build those tasks as a simple workflow workflow and still have them run on a periodic basis on these",
    "start": "576120",
    "end": "584079"
  },
  {
    "text": "machines so let's take a use case where we may need um crownlike functionality and see how we can build that with",
    "start": "584880",
    "end": "590959"
  },
  {
    "start": "585000",
    "end": "649000"
  },
  {
    "text": "simple workflow so this is continuous integration something we do in our development teams all the time you have",
    "start": "590959",
    "end": "596519"
  },
  {
    "text": "probably used similar systems or may have built similar system so the idea is that we have a number of",
    "start": "596519",
    "end": "603000"
  },
  {
    "text": "developers working on a software project and as they Implement their components they do incremental",
    "start": "603000",
    "end": "609120"
  },
  {
    "text": "check-ins and usually we rely on our developers to keep a high quality bar but sometimes they'll checkin code that",
    "start": "609120",
    "end": "614480"
  },
  {
    "text": "isn't that great and it breaks everybody else so that's a problem so what we wanted was to have a system that on a",
    "start": "614480",
    "end": "621760"
  },
  {
    "text": "periodic basis syncs sources from our source repository builds them and runs a",
    "start": "621760",
    "end": "627000"
  },
  {
    "text": "set of tests on um on the those binaries and then it sends out a report",
    "start": "627000",
    "end": "632440"
  },
  {
    "text": "which says you know a report on the health of our code base so what that allows us to do is",
    "start": "632440",
    "end": "638680"
  },
  {
    "text": "that if there's a if there's a bad check-in we can go back and look at the last good build and then try to narrow",
    "start": "638680",
    "end": "644040"
  },
  {
    "text": "down which check-in broke the build and tried to fix that problem so that seems like a fairly",
    "start": "644040",
    "end": "651040"
  },
  {
    "text": "straightforward process um it's it's a script that you can Implement using Ruby or python or what have you and there are",
    "start": "651040",
    "end": "658160"
  },
  {
    "text": "four steps in this process right I sync the sources I build them when that process is done I run some tests when",
    "start": "658160",
    "end": "665760"
  },
  {
    "text": "the tests have run I publish the binaries and then I send out an email which says whether the test passed or",
    "start": "665760",
    "end": "671600"
  },
  {
    "text": "not so fairly straightforward process I can implement it as a script and run it on a machine uh with a schedule running",
    "start": "671600",
    "end": "678399"
  },
  {
    "text": "through through the operating system provided cron but as I said before that has you",
    "start": "678399",
    "end": "683920"
  },
  {
    "text": "know several limitations if that machine goes down my continuous integration process isn't running any bad check-ins",
    "start": "683920",
    "end": "690600"
  },
  {
    "text": "that happen I won't I won't know about this the other problem is that this is",
    "start": "690600",
    "end": "696200"
  },
  {
    "text": "my scale limit if I had a lot of uh other software projects that I also wanted to run through this system uh it",
    "start": "696200",
    "end": "702000"
  },
  {
    "text": "will be a problem if I have continuous integration running on a single machine so what I really want is that I",
    "start": "702000",
    "end": "708480"
  },
  {
    "start": "706000",
    "end": "758000"
  },
  {
    "text": "want to have many machines running this job so I can scale them out the other",
    "start": "708480",
    "end": "713920"
  },
  {
    "text": "problem that I had with my script was that my script was a monolithic piece of code right and typically typically I",
    "start": "713920",
    "end": "719560"
  },
  {
    "text": "don't need to scale all parts of my application uh in this kind of a situation it's typically typically the",
    "start": "719560",
    "end": "725040"
  },
  {
    "text": "testing that's uh that's the most resource intensive so right now I don't have any ability to dedicate resources",
    "start": "725040",
    "end": "731720"
  },
  {
    "text": "additional resources just to the test piece so what I really want is that I want to have my build tasks separate",
    "start": "731720",
    "end": "737360"
  },
  {
    "text": "from my test tasks so that I can assign different you know resources to each of those",
    "start": "737360",
    "end": "742760"
  },
  {
    "text": "tasks and eventually what I want is that if one of these machines is running a task and it goes down I don't want to",
    "start": "742760",
    "end": "749279"
  },
  {
    "text": "lose that job I actually want another worker in my pool to pick up that job and keep working on it while I replace",
    "start": "749279",
    "end": "755760"
  },
  {
    "text": "or fix that machine that went down so my simple script now evolves",
    "start": "755760",
    "end": "761639"
  },
  {
    "start": "758000",
    "end": "907000"
  },
  {
    "text": "into a little bit of a more elaborate application and my application now has three components I have two worker",
    "start": "761639",
    "end": "768920"
  },
  {
    "text": "components I have a worker machine uh that's doing all my build jobs I have another worker machine that's running",
    "start": "768920",
    "end": "774760"
  },
  {
    "text": "all my test jobs and then I have this coordinator component",
    "start": "774760",
    "end": "779959"
  },
  {
    "text": "and the coordinator component is the component that's running the crown and when it's time to kick off a Bild job",
    "start": "779959",
    "end": "786120"
  },
  {
    "text": "it's going to assign a task to the build worker to do the build the build worker gets the sources does the build reports",
    "start": "786120",
    "end": "792920"
  },
  {
    "text": "success back to my coordinator and then the coordinator kicks off the test job and so on and so",
    "start": "792920",
    "end": "798880"
  },
  {
    "text": "forth so one other thing that we wanted in our application is that we wanted it to be resilient to failures so our",
    "start": "798880",
    "end": "805320"
  },
  {
    "text": "coordinator component here is keeping it stay in a a separate little database on the",
    "start": "805320",
    "end": "811199"
  },
  {
    "text": "side okay so anytime uh a task is kicked off or anytime a task is uh completed it",
    "start": "811199",
    "end": "818160"
  },
  {
    "text": "updates state in that database so there are there are a couple of very nice properties of the way that",
    "start": "818160",
    "end": "824000"
  },
  {
    "text": "we have implemented this application the first is that there's very clean separation of concerns each of my",
    "start": "824000",
    "end": "831079"
  },
  {
    "text": "components is doing exactly one thing each of my workers they only know how to do a build or they only know how to do a",
    "start": "831079",
    "end": "837480"
  },
  {
    "text": "test run and they don't need to know anything else about what's happening in the system similarly my my coordinator",
    "start": "837480",
    "end": "844639"
  },
  {
    "text": "component it knows how the overall process works so I can give it a job and",
    "start": "844639",
    "end": "850000"
  },
  {
    "text": "based on what's happened so far it can tell me what are the next steps to be taken for that job but it doesn't",
    "start": "850000",
    "end": "855199"
  },
  {
    "text": "necessarily know how to do one specific job the other nice thing in this",
    "start": "855199",
    "end": "860800"
  },
  {
    "text": "application is that each of these components is completely stateless so my workers here all the",
    "start": "860800",
    "end": "867600"
  },
  {
    "text": "information they need to do their tasks is provided to provided to them as part as part of this uh part of the task so",
    "start": "867600",
    "end": "874720"
  },
  {
    "text": "all they need to know is the build location or where where to put the binaries similarly my coordinator",
    "start": "874720",
    "end": "880800"
  },
  {
    "text": "component it is more stateful in that it needs to know the overall state of execution but it's Outsourcing it to a",
    "start": "880800",
    "end": "886920"
  },
  {
    "text": "database right so what that means is that if any of these components goes down I can easily replace it with a with",
    "start": "886920",
    "end": "893160"
  },
  {
    "text": "a new machine and it can get the state it needs from the system and recover but that also means is that if I",
    "start": "893160",
    "end": "899880"
  },
  {
    "text": "need to scale this application and run a lot of software projects through this system I can easily add more machines",
    "start": "899880",
    "end": "905440"
  },
  {
    "text": "and scale this application up so let's now look at what that means in terms of simple workflow",
    "start": "905440",
    "end": "911959"
  },
  {
    "start": "907000",
    "end": "961000"
  },
  {
    "text": "Concepts so the way that we implemented this application is very similar to how you implement workflows in simple",
    "start": "911959",
    "end": "919639"
  },
  {
    "text": "workflow there are a couple of basic concepts that you really need to understand uh in simple workflow to to",
    "start": "919639",
    "end": "925880"
  },
  {
    "text": "understand what it does and those are decider and activity so remember the coordinator component",
    "start": "925880",
    "end": "931959"
  },
  {
    "text": "that we had in our application which was the decision maker the timekeeper in simple workflow terminology we call it",
    "start": "931959",
    "end": "937560"
  },
  {
    "text": "the decider and in simple workflow when you implement a workflow you implement a separate component which makes those",
    "start": "937560",
    "end": "944319"
  },
  {
    "text": "decisions and then everything else in your application becomes an activity it's all the individual steps the heavy",
    "start": "944319",
    "end": "950480"
  },
  {
    "text": "lifting you know the independent steps that happen the units of work so in our case it was building the sources running",
    "start": "950480",
    "end": "956399"
  },
  {
    "text": "the tests publishing results and sending emails",
    "start": "956399",
    "end": "960920"
  },
  {
    "start": "961000",
    "end": "1123000"
  },
  {
    "text": "so when you build this process as a simple workflow workflow and deployed there are there are a few more Concepts",
    "start": "962199",
    "end": "967959"
  },
  {
    "text": "uh that show up so now I have these workers I have workers both for my decider component",
    "start": "967959",
    "end": "974040"
  },
  {
    "text": "and I have workers for my activity components a worker is simply a process",
    "start": "974040",
    "end": "979279"
  },
  {
    "text": "that hosts your desci logic or your activity logic and you can choose to have that process running on the same",
    "start": "979279",
    "end": "985639"
  },
  {
    "text": "machine or you can have them running on different machines in this case I have a separate pool of machines running my",
    "start": "985639",
    "end": "991319"
  },
  {
    "text": "decider component and a separate pool of machines running my",
    "start": "991319",
    "end": "996720"
  },
  {
    "text": "activities simple workflow acts as the glue between these components anytime my",
    "start": "996720",
    "end": "1002519"
  },
  {
    "text": "decider component needs to kick off a job or assign a job to a component it asks simple workflow to create an",
    "start": "1002519",
    "end": "1009199"
  },
  {
    "text": "activity task simple workflow assigns that activity task to one of your activity",
    "start": "1009199",
    "end": "1014759"
  },
  {
    "text": "workers the other thing simple workflow does is that it keeps state of the execution so anytime you it kicks off a",
    "start": "1014759",
    "end": "1022360"
  },
  {
    "text": "task or anytime a task completes it's going to keep a step by-step detailed execution",
    "start": "1022360",
    "end": "1028280"
  },
  {
    "text": "log so remember our our coordination component needed to keep state in a database uh to be resilient to failures",
    "start": "1028280",
    "end": "1034959"
  },
  {
    "text": "simple workflow provides that functionality for you task is also the mechanism by which",
    "start": "1034959",
    "end": "1041678"
  },
  {
    "text": "simple workflow communicates to your decider component so anytime uh you know let's say we kicked off the bill job and",
    "start": "1041679",
    "end": "1048079"
  },
  {
    "text": "that bill job compl leads your worker is going to report back to simple workflow that it's done doing doing that activity",
    "start": "1048079",
    "end": "1054160"
  },
  {
    "text": "simple workflow is going to create a decision task to tell your deci component that your you need to make",
    "start": "1054160",
    "end": "1059840"
  },
  {
    "text": "more decisions your execution has moved forward and it's an opportunity for it to make next set of",
    "start": "1059840",
    "end": "1065880"
  },
  {
    "text": "decisions uh one last thing remaining on that slide is uh task lists so it's those small boxes that you see up in",
    "start": "1065880",
    "end": "1072559"
  },
  {
    "text": "simple workflow so task list is simply a collection of similar tasks you can",
    "start": "1072559",
    "end": "1077640"
  },
  {
    "text": "think of it as a cu and what that allows us to do is to uh",
    "start": "1077640",
    "end": "1083320"
  },
  {
    "text": "assign those set of tasks to a specific group of machines or to one specific worker so in our case we wanted our test",
    "start": "1083320",
    "end": "1089480"
  },
  {
    "text": "tasks to be running on one set of machines and our build tasks to be running on a separate set of machines so in simple workl I can create two",
    "start": "1089480",
    "end": "1095640"
  },
  {
    "text": "separate task list for that and have them assigned to different uh components okay to quickly uh recap key",
    "start": "1095640",
    "end": "1103400"
  },
  {
    "text": "concept and simple workflow decider this is your decision- making logic activities this is all the heavy lifting",
    "start": "1103400",
    "end": "1109600"
  },
  {
    "text": "the units of work that happen in your application history uh detailed execution log of what's happening in",
    "start": "1109600",
    "end": "1115880"
  },
  {
    "text": "your workflow and a task which is an intent to do some",
    "start": "1115880",
    "end": "1122919"
  },
  {
    "start": "1123000",
    "end": "1217000"
  },
  {
    "text": "work so in terms of ownership you own the step sequence logic you basically own writing that",
    "start": "1123120",
    "end": "1130000"
  },
  {
    "text": "decider component this is your specific business logic it's your secret Source",
    "start": "1130000",
    "end": "1135120"
  },
  {
    "text": "you also own the discrete step logic which are the activities again this is your specific business",
    "start": "1135120",
    "end": "1141400"
  },
  {
    "text": "logic you also own the activity and the decider workers and the nice thing in",
    "start": "1141400",
    "end": "1147039"
  },
  {
    "text": "simple workflow is that you can host those workflow those workers anywhere you want so you don't have to host them",
    "start": "1147039",
    "end": "1153200"
  },
  {
    "text": "in ec2 if you want to host them behind a fireball you can do that the way that these workers talk to simple workflow is",
    "start": "1153200",
    "end": "1159000"
  },
  {
    "text": "by using uh poll requests so all you need is the ability for that worker to be able to make outbound calls to simple",
    "start": "1159000",
    "end": "1165559"
  },
  {
    "text": "workflow and then you can run that work worker anywhere you want",
    "start": "1165559",
    "end": "1170720"
  },
  {
    "text": "and of course you also own any any data that goes into those workflows and the data that comes out of",
    "start": "1171240",
    "end": "1177400"
  },
  {
    "text": "it AWS and simple workflow provide everything else so we provide the",
    "start": "1177400",
    "end": "1182440"
  },
  {
    "text": "control engine uh which creates these tasks which assigns these tasks and holds tasks while they're pending simple",
    "start": "1182440",
    "end": "1189000"
  },
  {
    "text": "workflow also keeps track of the tasks as they're ongoing and you can put uh time limits on how long those tasks can",
    "start": "1189000",
    "end": "1196520"
  },
  {
    "text": "execute it of course maintains the distrib Ed execution history and it also provides uh features that help you with",
    "start": "1196520",
    "end": "1203400"
  },
  {
    "text": "operational tasks so you can walk up to the simple workflow console uh drill down into individual workflows that are",
    "start": "1203400",
    "end": "1209200"
  },
  {
    "text": "running look at you know at the at the event level look at the history and that's very useful for things like debugging or Journal",
    "start": "1209200",
    "end": "1217279"
  },
  {
    "start": "1217000",
    "end": "1292000"
  },
  {
    "text": "auditing so how do we Implement our KRON process using simple workflow and a lot",
    "start": "1217799",
    "end": "1223960"
  },
  {
    "text": "of it won't make sense right now but in the rest of the presentation we are going to drill down into details but I",
    "start": "1223960",
    "end": "1229120"
  },
  {
    "text": "wanted to show you quickly you know what it looks like to implement a very simple Crown workflow using Ruby on top of",
    "start": "1229120",
    "end": "1235960"
  },
  {
    "text": "simple workflow for all intents and purposes you can think uh of the rest of uh you",
    "start": "1235960",
    "end": "1242120"
  },
  {
    "text": "know this code AS configuration uh settings that you're passing to simple workflow and you inject your logic in",
    "start": "1242120",
    "end": "1247799"
  },
  {
    "text": "these two blocks the decider here is simply creating a timer to fire every day when",
    "start": "1247799",
    "end": "1255400"
  },
  {
    "text": "that timer fires it kicks off a build job and it's doing that in a loop and my",
    "start": "1255400",
    "end": "1262320"
  },
  {
    "text": "activity is simply a method and really I can put any Ruby code that I want within that method and it will be executed as a",
    "start": "1262320",
    "end": "1269280"
  },
  {
    "text": "task on a remote component so if I already had a you know build script uh",
    "start": "1269280",
    "end": "1275080"
  },
  {
    "text": "that you know knows how to do a build I can simply invoke that build script from uh that activity method and now I can",
    "start": "1275080",
    "end": "1281440"
  },
  {
    "text": "run that method on many machines and load balances okay so uh we're going to go",
    "start": "1281440",
    "end": "1286919"
  },
  {
    "text": "into more details and look at the individual pieces of the code that I'm showing",
    "start": "1286919",
    "end": "1291960"
  },
  {
    "text": "here but first let's talk about the AWS flow framework so the code that you just saw up there uh was implemented using",
    "start": "1291960",
    "end": "1299679"
  },
  {
    "start": "1292000",
    "end": "1519000"
  },
  {
    "text": "the AWS flow framework when we initially launched simple workflow we introduced AWS flow",
    "start": "1299679",
    "end": "1306880"
  },
  {
    "text": "framework in Java and today we are announcing similar capability for our",
    "start": "1306880",
    "end": "1312279"
  },
  {
    "text": "Ruby customers the flow framework is an ease ofuse library on top of simple workflow",
    "start": "1312279",
    "end": "1319320"
  },
  {
    "text": "apis so just like any other uh AWS service you can use Simple workflow",
    "start": "1319320",
    "end": "1325200"
  },
  {
    "text": "through HTTP calls next layer of abstraction on top of that is the AWS sdks which make it very easy for you to",
    "start": "1325200",
    "end": "1332080"
  },
  {
    "text": "call our apis from any any language of your choice and then what what simple workflow does a little bit unique is",
    "start": "1332080",
    "end": "1337799"
  },
  {
    "text": "that it also provides this ease of use library and what it does is that it hides the details of our apis and makes",
    "start": "1337799",
    "end": "1345159"
  },
  {
    "text": "it very natural for you to program against simple workflow in Ruby so it's built using standard Ruby",
    "start": "1345159",
    "end": "1351279"
  },
  {
    "text": "constructs and it allows you to use standard Ruby constructs to talk to simple workflow uh we package it as gems so you",
    "start": "1351279",
    "end": "1358480"
  },
  {
    "text": "can easily deploy to any environment and uh right now we are in private beta which is Invitation Only um",
    "start": "1358480",
    "end": "1365799"
  },
  {
    "text": "the journal availability is coming soon stay tuned for that uh once it becomes generally available it will be an open",
    "start": "1365799",
    "end": "1372039"
  },
  {
    "text": "source project on GitHub uh you can look at the source you can contribute to it uh just like you can today with Java",
    "start": "1372039",
    "end": "1380720"
  },
  {
    "text": "flow okay so what are some of the benefits of using the flow",
    "start": "1381120",
    "end": "1386200"
  },
  {
    "text": "framework so flow framework makes it very simple for you to take existing code and wrap that into workflows so",
    "start": "1386200",
    "end": "1392840"
  },
  {
    "text": "that you can run it on multiple machines and have it load balanced uh the example that we just saw",
    "start": "1392840",
    "end": "1398600"
  },
  {
    "text": "where I had a build script already um and I wrapped it in a in a simple activity uh is an example of how you can",
    "start": "1398600",
    "end": "1404520"
  },
  {
    "text": "easily do that the other thing uh that the flow framework allows you to do is that it it",
    "start": "1404520",
    "end": "1411679"
  },
  {
    "text": "allows you to easily take advantage of simple workflow and do things like remote calls do things like long running",
    "start": "1411679",
    "end": "1418480"
  },
  {
    "text": "operations and asynchronous operations using Amazon simple workflow and since",
    "start": "1418480",
    "end": "1423960"
  },
  {
    "text": "it's it's an abstraction layer on top of the SDK you don't have to deal with a lot of the apis API calls that hand that",
    "start": "1423960",
    "end": "1430880"
  },
  {
    "text": "happen under the cover so remember how our decider component needed to look at the execution history and based on that",
    "start": "1430880",
    "end": "1436080"
  },
  {
    "text": "make decisions simple workflow handles that for uh the flow framework hand handles that for you so it under the",
    "start": "1436080",
    "end": "1442279"
  },
  {
    "text": "covers makes call to to simple workflow gets the history and based on that it's going to invoke the appropriate code in",
    "start": "1442279",
    "end": "1450120"
  },
  {
    "text": "your workflow to move the execution forward and you simply program your workflows as as classes and as method",
    "start": "1450120",
    "end": "1458840"
  },
  {
    "text": "calls the other nice thing in the flow framework is that failure handling is built in anytime you're doing U",
    "start": "1459159",
    "end": "1464840"
  },
  {
    "text": "distributed comput computations uh there could be errors that happen on remote components uh what simple workflow uh",
    "start": "1464840",
    "end": "1471000"
  },
  {
    "text": "what the flow framework allows you to do is that it allows you to handle those errors as if they were local errors so",
    "start": "1471000",
    "end": "1476799"
  },
  {
    "text": "you can use your standard um error handling mechanisms to handle errors that may happen on remote components and",
    "start": "1476799",
    "end": "1483640"
  },
  {
    "text": "it also allows you to implement various kinds of mitigation strategies so things like retries they are built into the",
    "start": "1483640",
    "end": "1489200"
  },
  {
    "text": "flow framework and the other nice thing about the flow framework is that you can easily evolve your logic right since you",
    "start": "1489200",
    "end": "1496200"
  },
  {
    "text": "are not maintaining State and you are not maintaining the events uh handling the individual events that happen um to",
    "start": "1496200",
    "end": "1502679"
  },
  {
    "text": "modify that state the flow framework is doing it for you adding additional logic doesn't complicate that you know State",
    "start": "1502679",
    "end": "1509360"
  },
  {
    "text": "machine the flow framework handles that state machine for you and if you need to add one additional step in your process",
    "start": "1509360",
    "end": "1514840"
  },
  {
    "text": "you simply invoke another method call so just to uh go over some of the",
    "start": "1514840",
    "end": "1522039"
  },
  {
    "start": "1519000",
    "end": "1735000"
  },
  {
    "text": "constructs that we provide um in simple workflow so for failure handling uh you",
    "start": "1522039",
    "end": "1528320"
  },
  {
    "text": "you use the standard begin rescue inure blocks we have extended this construct to work for both you know synchronous",
    "start": "1528320",
    "end": "1534640"
  },
  {
    "text": "local uh invocations and also for remote uh activities that may be running on different machines and if an exception",
    "start": "1534640",
    "end": "1541640"
  },
  {
    "text": "happens in an activity on a remote component we argument the exception stack with with stack information from",
    "start": "1541640",
    "end": "1547240"
  },
  {
    "text": "that remote component so that it's very easy for you to debug and see uh what what went",
    "start": "1547240",
    "end": "1553600"
  },
  {
    "text": "wrong if you wanted to retry steps that fail in your workflow we provide a declarative mechanism for specifying",
    "start": "1553600",
    "end": "1560399"
  },
  {
    "text": "exponential uh an exponential retry policy and what that does is that you can declaratively say if this step fails",
    "start": "1560399",
    "end": "1567679"
  },
  {
    "text": "let's say retry it three times but when you retry it wait you know 10 seconds before you do the first try and then",
    "start": "1567679",
    "end": "1574520"
  },
  {
    "text": "wait more time if it continues to fail and that's very simple to do um in using",
    "start": "1574520",
    "end": "1580000"
  },
  {
    "text": "the AWS flow framework we also add support for doing",
    "start": "1580000",
    "end": "1585720"
  },
  {
    "text": "concurrent steps so for example you can imagine an application that needs to start a bunch of tasks in parallel and",
    "start": "1585720",
    "end": "1592640"
  },
  {
    "text": "let them run and at some point later in the execution you want to get the results back and join them using the",
    "start": "1592640",
    "end": "1598559"
  },
  {
    "text": "flow framework you can easily do that we provide a send a sync method uh just like you have the send method in Ruby",
    "start": "1598559",
    "end": "1604799"
  },
  {
    "text": "what this does is that it creates a task which runs on a fiber and if it blocks another task could be running at the",
    "start": "1604799",
    "end": "1610679"
  },
  {
    "text": "same time send a sync returns uh a future back to you so let's say if you had a",
    "start": "1610679",
    "end": "1616320"
  },
  {
    "text": "bunch of those Futures at some point later in your execution you can wait on those Futures to collect the results of",
    "start": "1616320",
    "end": "1622279"
  },
  {
    "text": "those parallel tasks and since we are talking to remote components uh we have to put you know",
    "start": "1622279",
    "end": "1628159"
  },
  {
    "text": "bits on The Wire when you're programming your workflows in Ruby flow you program them in terms of Ruby objects and when",
    "start": "1628159",
    "end": "1636679"
  },
  {
    "text": "we put them on the wire we automatically convert them using an extensible data conversion layer uh by default we support the yaml",
    "start": "1636679",
    "end": "1643960"
  },
  {
    "text": "format but this is totally extensible you can go and add your own formats if you want want some of our customers do",
    "start": "1643960",
    "end": "1649679"
  },
  {
    "text": "things like uh encryption or they do",
    "start": "1649679",
    "end": "1653960"
  },
  {
    "text": "compression uh we also provide an ability for your workflows to handle external events uh so a good example of",
    "start": "1654960",
    "end": "1660679"
  },
  {
    "text": "that is you have an order processing workflow where a customer decides to change an order you can Implement that",
    "start": "1660679",
    "end": "1666200"
  },
  {
    "text": "as another method which is marked as an inter point in your workflow when that event happens we'll invoke that method",
    "start": "1666200",
    "end": "1671919"
  },
  {
    "text": "and then you can handle it as appropriate uh for your process and then the last thing I want",
    "start": "1671919",
    "end": "1678640"
  },
  {
    "text": "to call out here is timers uh you can think of uh timers as um durable timers",
    "start": "1678640",
    "end": "1684480"
  },
  {
    "text": "so these are timers that you run in the cloud uh so for our cron example uh this is something that we will use quite",
    "start": "1684480",
    "end": "1692639"
  },
  {
    "text": "heavily okay so what do we need to build uh for our continuous integration we",
    "start": "1692960",
    "end": "1698480"
  },
  {
    "text": "need to build a decider component we need to build our activities and then we need to build the workers for for our",
    "start": "1698480",
    "end": "1704799"
  },
  {
    "text": "activities and the decider so quick recap of um what our",
    "start": "1704799",
    "end": "1711559"
  },
  {
    "text": "decision logic looks like so our decision logic is basically a loop we do the build step we once that",
    "start": "1711559",
    "end": "1719679"
  },
  {
    "text": "step is complete we do uh testing then we publish the binaries and one other thing that I want to add here is retries",
    "start": "1719679",
    "end": "1726279"
  },
  {
    "text": "if any of those steps fail I want to be able to retry them up to three times and I keep doing that on a schedule in a",
    "start": "1726279",
    "end": "1734880"
  },
  {
    "start": "1735000",
    "end": "1927000"
  },
  {
    "text": "loop okay so let's look at the decider compon component so using Ruby flow you",
    "start": "1735279",
    "end": "1742519"
  },
  {
    "text": "implement your decider component as a class in this case I'm calling it The",
    "start": "1742519",
    "end": "1747760"
  },
  {
    "text": "build workflow and you extend this module called workflows and what that does is that it brings into scope a number of",
    "start": "1747760",
    "end": "1754880"
  },
  {
    "text": "utility methods that you need to implement the rest of your",
    "start": "1754880",
    "end": "1760120"
  },
  {
    "text": "decider one of those methods is the entrypoint method and what the entrypoint method does is that it tells",
    "start": "1760120",
    "end": "1766760"
  },
  {
    "text": "the flow framework when a workflow of this type starts this is where the execution should should initiate so this",
    "start": "1766760",
    "end": "1773960"
  },
  {
    "text": "is the entry point of your workflow and this start method which is the entry point itself is you know just",
    "start": "1773960",
    "end": "1780880"
  },
  {
    "text": "just a ruby method and you can put any kind of logic U that you want to put in",
    "start": "1780880",
    "end": "1785960"
  },
  {
    "text": "there in our case the start method is taking two parameters and those become the input to your workflow in this case",
    "start": "1785960",
    "end": "1793240"
  },
  {
    "text": "I'm taking the location of the sources and I'm also taking the location where I want to put the the binaries uh when the",
    "start": "1793240",
    "end": "1799480"
  },
  {
    "text": "build is done the actual code here is is a is a",
    "start": "1799480",
    "end": "1805760"
  },
  {
    "text": "while loop that runs forever and keeps scheduling jobs uh after every",
    "start": "1805760",
    "end": "1812399"
  },
  {
    "text": "hour okay one other piece here is this activity client method and what that is",
    "start": "1812399",
    "end": "1818200"
  },
  {
    "text": "doing is that it's creating a client that I use to initiate activity tasks so",
    "start": "1818200",
    "end": "1823720"
  },
  {
    "text": "remember those activities could be running on remote components so it's not actually a local call so this activity",
    "start": "1823720",
    "end": "1829039"
  },
  {
    "text": "client is what I use to initiate tasks for that component to process and I simply specify the class",
    "start": "1829039",
    "end": "1835799"
  },
  {
    "text": "which implements them and then I can use that activity client so this is the actual",
    "start": "1835799",
    "end": "1841360"
  },
  {
    "text": "implementation or the logic so it's basically just running the steps in sequence it's going to do the",
    "start": "1841360",
    "end": "1848399"
  },
  {
    "text": "build the then the test and then publish the results so these are it's it's a strict sequence so the first task",
    "start": "1848399",
    "end": "1854960"
  },
  {
    "text": "happens first when it completes then it will kick off the second job and so and so forth as you can see I'm using begin",
    "start": "1854960",
    "end": "1862399"
  },
  {
    "text": "andure uh here to to do error handling so if any of the tasks like build or",
    "start": "1862399",
    "end": "1867919"
  },
  {
    "text": "test or publish fails for some reason uh there's an exception uh I simply bail",
    "start": "1867919",
    "end": "1873039"
  },
  {
    "text": "out I send an email and continue uh processing for the next hour so remember that those are running",
    "start": "1873039",
    "end": "1879519"
  },
  {
    "text": "on remote components but here I'm handling them as if they were",
    "start": "1879519",
    "end": "1883720"
  },
  {
    "text": "local so one thing that was missing in our decider implementation is that I wanted to actually send those tasks to",
    "start": "1886120",
    "end": "1892840"
  },
  {
    "text": "specific workers and in simple workflow you do that through task lists and in the flow framework you can configure",
    "start": "1892840",
    "end": "1899480"
  },
  {
    "text": "your task list on the client and I'm showing a couple of variations of how you do that so on the client I can call",
    "start": "1899480",
    "end": "1905480"
  },
  {
    "text": "the configure method specify the activities and then specify in a hash the task list that I want to use for",
    "start": "1905480",
    "end": "1912000"
  },
  {
    "text": "those tasks and another variation is that I can actually specify it on one specific",
    "start": "1912000",
    "end": "1917360"
  },
  {
    "text": "invitation of an activity so it's different you know levels that you can uh specify those task",
    "start": "1917360",
    "end": "1924679"
  },
  {
    "text": "lists and of course I wanted to do some sort of uh retries uh if any of these activities fail so the uh exponential",
    "start": "1926840",
    "end": "1935320"
  },
  {
    "start": "1927000",
    "end": "1991000"
  },
  {
    "text": "retry that the way it's exposed in the flow framework uh two couple of variations of that so first we provide",
    "start": "1935320",
    "end": "1940399"
  },
  {
    "text": "this retry block and you can think of it as a block of code a chunk of code that if anything fails in that uh if anything",
    "start": "1940399",
    "end": "1947240"
  },
  {
    "text": "throws in that code I want to apply a retry policy on the entire blocks I want to execute it from the from the start",
    "start": "1947240",
    "end": "1953200"
  },
  {
    "text": "all over again in this case I only have uh one method call here but you can imagine it could be you know any number",
    "start": "1953200",
    "end": "1959360"
  },
  {
    "text": "of method calls and the policy that I specify here is I'm right now I'm only specifying how many times I want to",
    "start": "1959360",
    "end": "1965760"
  },
  {
    "text": "retry but this can get pretty elaborate I can specify you know what specific types of exceptions I want to retry on",
    "start": "1965760",
    "end": "1971600"
  },
  {
    "text": "or how many times I want each exception type to be retried and so on and so forth in the second case I am uh just",
    "start": "1971600",
    "end": "1978639"
  },
  {
    "text": "specifying a retry policy on one specific activity and I do that through an uh this option block uh that's pass",
    "start": "1978639",
    "end": "1985960"
  },
  {
    "text": "to the activity when I invoke it on the client and my activities themselves are",
    "start": "1985960",
    "end": "1992760"
  },
  {
    "start": "1991000",
    "end": "2094000"
  },
  {
    "text": "fairly straightforward it's you know it's just a method call and I can have any sort of logic that I want to put in",
    "start": "1992760",
    "end": "1998320"
  },
  {
    "text": "there uh it's really your business logic that goes in here what's interesting here is the is the configuration that we",
    "start": "1998320",
    "end": "2004159"
  },
  {
    "text": "specify on the activity so remember I said that you can put time bounds on the computations that",
    "start": "2004159",
    "end": "2010559"
  },
  {
    "text": "you do so various different timeouts that you can specify on the activity so you have the schedule to start timeout",
    "start": "2010559",
    "end": "2017639"
  },
  {
    "text": "which specifies how long can a task sit in a task list waiting for a worker to pick it",
    "start": "2017639",
    "end": "2023000"
  },
  {
    "text": "up uh then you have the start to close timeout which is that when a worker actually picks up that task how long do",
    "start": "2023000",
    "end": "2029399"
  },
  {
    "text": "I want to wait for that worker to complete it then you have the schedule to close time out which is the overall total time",
    "start": "2029399",
    "end": "2036639"
  },
  {
    "text": "from the point that I scheduled that task to the point that it's completed and then I have heartbeat timeout which is if I had a long running",
    "start": "2036639",
    "end": "2044000"
  },
  {
    "text": "task I may want the uh activity worker to keep reporting um that it's working",
    "start": "2044000",
    "end": "2049079"
  },
  {
    "text": "on that task so what these timeouts allow me to do is that if a worker dies then simple workflow will realize that a",
    "start": "2049079",
    "end": "2056280"
  },
  {
    "text": "task is timed out or it will realize that your worker is not sending a heartbeat and it will create a decision",
    "start": "2056280",
    "end": "2061878"
  },
  {
    "text": "task and let your deci know that something's gone wrong and then you can Implement a mitigation strategy like you",
    "start": "2061879",
    "end": "2067158"
  },
  {
    "text": "can retry the that task on a different worker for example the other configuration we have",
    "start": "2067159",
    "end": "2073000"
  },
  {
    "text": "here is a task list so remember uh I was setting a task list when I invoked activities uh if you don't have a use",
    "start": "2073000",
    "end": "2079320"
  },
  {
    "text": "case where you need to Route task to specific workers you can just specify a default uh here and then you don't have",
    "start": "2079320",
    "end": "2084520"
  },
  {
    "text": "to specify it when you actually invoke that activity and then there's a version uh which just tells you it's it's",
    "start": "2084520",
    "end": "2089960"
  },
  {
    "text": "metadata in terms of uh my",
    "start": "2089960",
    "end": "2094280"
  },
  {
    "start": "2094000",
    "end": "2169000"
  },
  {
    "text": "implementation so one last uh piece for our decider so our this is a crown",
    "start": "2095960",
    "end": "2102119"
  },
  {
    "text": "workflow which is going to run potentially forever right it's a continuous process uh so simple workflow",
    "start": "2102119",
    "end": "2107680"
  },
  {
    "text": "is maintaining this history and anytime you know there's an event in my execution simple workflow is going to add events to this history that it's",
    "start": "2107680",
    "end": "2114480"
  },
  {
    "text": "maintaining now which now that means if I process keeps on running forever then that history keeps on becoming larger",
    "start": "2114480",
    "end": "2120760"
  },
  {
    "text": "and larger and since my decider needs to look at the history to decide on what to do next it could become a problem",
    "start": "2120760",
    "end": "2126599"
  },
  {
    "text": "because the latency will keep increasing I'll keep on downloading bigger histories so a feature that's available",
    "start": "2126599",
    "end": "2132240"
  },
  {
    "text": "in the flow framework and simple workflow is called continue as new and what that does is that in a single",
    "start": "2132240",
    "end": "2138359"
  },
  {
    "text": "Atomic step it closes the current execution and then it starts a new one with the same",
    "start": "2138359",
    "end": "2144400"
  },
  {
    "text": "identifier um and your execution starts with a fresh history so your history",
    "start": "2144400",
    "end": "2149599"
  },
  {
    "text": "goes back to zero so in this case what I'm doing here is that I uh do a 100 iterations of uh",
    "start": "2149599",
    "end": "2157079"
  },
  {
    "text": "my continuous integration within the same execution and after the 100 execution I do continuous new which is",
    "start": "2157079",
    "end": "2163839"
  },
  {
    "text": "going to close this execution start a new one and my process will keep on",
    "start": "2163839",
    "end": "2169040"
  },
  {
    "start": "2169000",
    "end": "2266000"
  },
  {
    "text": "running so the last couple of pieces uh we need to implement we need to implement the activity",
    "start": "2169880",
    "end": "2176839"
  },
  {
    "text": "worker uh the activity worker is the process that's going to pull simple workflow ask for task and then it's",
    "start": "2176839",
    "end": "2183520"
  },
  {
    "text": "going to dispatch it to your activity method that you implemented uh um in the flow framework",
    "start": "2183520",
    "end": "2189760"
  },
  {
    "text": "the activity worker utilizes two separate pools of processes so it has a pool of processes that actually does the",
    "start": "2189760",
    "end": "2195560"
  },
  {
    "text": "polling and then has it has a larger pool of processes that actually perform those tasks so you can have a large set",
    "start": "2195560",
    "end": "2201040"
  },
  {
    "text": "of tasks going on in parallel in each activity worker and in order to create the activity worker I simply pass it the",
    "start": "2201040",
    "end": "2206880"
  },
  {
    "text": "simple workflow client which is really configuration in terms of which endpoint you want to H uh your credentials you",
    "start": "2206880",
    "end": "2213480"
  },
  {
    "text": "specify the domain which is just a Sandbox within simple workflow you specify the task list from where to get",
    "start": "2213480",
    "end": "2219680"
  },
  {
    "text": "the task and then you specify the class which has your activity implementations and then you simply call",
    "start": "2219680",
    "end": "2225640"
  },
  {
    "text": "start on it and it keeps on pulling simple workflow in a",
    "start": "2225640",
    "end": "2230079"
  },
  {
    "text": "loop same thing uh for the deci worker the only difference here is that your deci worker utilizes a single uh pool of",
    "start": "2230760",
    "end": "2237760"
  },
  {
    "text": "processes uses the same process to poll and process the task and we do that",
    "start": "2237760",
    "end": "2242839"
  },
  {
    "text": "because your Desir is supposed to be pretty lightweight it's Outsourcing all the heavy lifting to the activity",
    "start": "2242839",
    "end": "2248680"
  },
  {
    "text": "ities uh similar configuration for creating the workflow or the decider worker and you simply call start on it",
    "start": "2248680",
    "end": "2256359"
  },
  {
    "text": "so if you look at our documentation we use the word decider and workflow uh interchangeably so just to clarify",
    "start": "2256359",
    "end": "2262920"
  },
  {
    "text": "hopefully that doesn't cause any confusion here okay so once we have built this",
    "start": "2262920",
    "end": "2268680"
  },
  {
    "start": "2266000",
    "end": "2398000"
  },
  {
    "text": "workflow let's see how it runs in simple workflow so let's start with the different actors that we have so we have",
    "start": "2268680",
    "end": "2274240"
  },
  {
    "text": "our deci uh worker we have our build worker and then we have our test worker",
    "start": "2274240",
    "end": "2279440"
  },
  {
    "text": "and let's just say that our test worker is running behind a fireball then I have the three task lists I have the buildt task list I have",
    "start": "2279440",
    "end": "2285880"
  },
  {
    "text": "the test task list and I have a task list for my decision tasks so what happens when I uh so so when I bring",
    "start": "2285880",
    "end": "2291880"
  },
  {
    "text": "online these workers they're going to start long pulling simple workflow for tasks and then I go and start an",
    "start": "2291880",
    "end": "2298839"
  },
  {
    "text": "execution of this cron workflow the first thing simple workflow does is that it creates an execution",
    "start": "2298839",
    "end": "2305079"
  },
  {
    "text": "history for this workflow and the first record is there is going to indicate whatever inputs I passed in to that",
    "start": "2305079",
    "end": "2311560"
  },
  {
    "text": "workflow and simple workflow is going to create a decision task decision task is dispatched to my deci decider looks at",
    "start": "2311560",
    "end": "2318680"
  },
  {
    "text": "the history and sees it's a new workflow so the first thing it does it it creates the timer simple workflow starts the timer",
    "start": "2318680",
    "end": "2326119"
  },
  {
    "text": "it keeps waiting for the timer to fire when the timer fire it updates the history assigns a task to the deci and",
    "start": "2326119",
    "end": "2333440"
  },
  {
    "text": "the deci will then schedule the first task which is to build that task goes through the build task list is picked up",
    "start": "2333440",
    "end": "2340040"
  },
  {
    "text": "by the build worker the build worker does the build and reports results back to simple workflow simple workflow",
    "start": "2340040",
    "end": "2347000"
  },
  {
    "text": "updates the history creates another decision task the and this time the decider schedules the test task this one",
    "start": "2347000",
    "end": "2354280"
  },
  {
    "text": "goes to our test worker which does the test Returns the result simple workflow updates history creates another decision",
    "start": "2354280",
    "end": "2361839"
  },
  {
    "text": "task and this time we will uh schedule our task to publish the binary",
    "start": "2361839",
    "end": "2368079"
  },
  {
    "text": "is picked up our by our build worker which publishes the binaries and then the decider decides to",
    "start": "2368079",
    "end": "2374440"
  },
  {
    "text": "send an email again that's picked up uh by our build worker which sends an",
    "start": "2374440",
    "end": "2379480"
  },
  {
    "text": "email and now one iteration of this process is complete so the next time when a decision task is created our",
    "start": "2379480",
    "end": "2385319"
  },
  {
    "text": "decider is going to create the timer again and the loop continues okay so uh now I'm going to",
    "start": "2385319",
    "end": "2392520"
  },
  {
    "text": "invite Jeff uh to talk about how they are using simple workflow Inc contactually",
    "start": "2392520",
    "end": "2399319"
  },
  {
    "start": "2398000",
    "end": "2432000"
  },
  {
    "text": "so uh okay so thanks Asad um my name is Jeff carbonella I'm the CTO and",
    "start": "2405760",
    "end": "2411200"
  },
  {
    "text": "co-founder of Conta so um contactually is a contact management system that",
    "start": "2411200",
    "end": "2417800"
  },
  {
    "text": "focuses on relationships so um we try to enable our users both individuals and",
    "start": "2417800",
    "end": "2423079"
  },
  {
    "text": "teams to harness the power of their Network and relationships without without spending hours each day um",
    "start": "2423079",
    "end": "2429720"
  },
  {
    "text": "manually entering data into a database so to accomplish this goal we do a lot behind the scenes um so we",
    "start": "2429720",
    "end": "2436839"
  },
  {
    "start": "2432000",
    "end": "2495000"
  },
  {
    "text": "allow users to connect U multiple email accounts social media accounts crms like",
    "start": "2436839",
    "end": "2442319"
  },
  {
    "text": "Salesforce Iris um you contact management systems like Machamp and U we",
    "start": "2442319",
    "end": "2448319"
  },
  {
    "text": "pull in all this data and try to give our users a realtime view of what's going on um in their uh in their network",
    "start": "2448319",
    "end": "2455920"
  },
  {
    "text": "with their contacts and like their relationships so for instance when the last time they talked to a specific person was what they talked about any",
    "start": "2455920",
    "end": "2462800"
  },
  {
    "text": "updated information like a new phone number or job change and so none of these systems",
    "start": "2462800",
    "end": "2468440"
  },
  {
    "text": "really provide web hooks or feeds to subscribe to in order to get this change",
    "start": "2468440",
    "end": "2473480"
  },
  {
    "text": "data so what we wound up doing was um you know polling each service every few minutes to try to get the most upto-date",
    "start": "2473480",
    "end": "2479880"
  },
  {
    "text": "uh data now when we only had a handful of users this really wasn't that big of a deal um but you know as we add more",
    "start": "2479880",
    "end": "2488160"
  },
  {
    "text": "and more users we have tens of thousands of accounts now um scaling our KRON is",
    "start": "2488160",
    "end": "2493240"
  },
  {
    "text": "becoming a bit of an issue so contu right now is a rails application um it's running on Heroku we",
    "start": "2493240",
    "end": "2501119"
  },
  {
    "start": "2495000",
    "end": "2512000"
  },
  {
    "text": "use rescue which is a reddis backed Q management system to manage our backend cues and we use Kon to uh sorry",
    "start": "2501119",
    "end": "2509000"
  },
  {
    "text": "Clockwork to manage our our Kon flow so the problems with our current setup um the first one is that the cues",
    "start": "2509000",
    "end": "2516720"
  },
  {
    "start": "2512000",
    "end": "2558000"
  },
  {
    "text": "get backed up occationally and there's no easy way to dup jobs on for a rescue",
    "start": "2516720",
    "end": "2522160"
  },
  {
    "text": "so KRON will sort of mindlessly dump redundant jobs onto the cues which just sort of exacerbates the issue um there's",
    "start": "2522160",
    "end": "2528880"
  },
  {
    "text": "obviously the single point of failure issue given that Kon is running on its uh on a single",
    "start": "2528880",
    "end": "2534800"
  },
  {
    "text": "instance there's also no support for synchronous flows so if you have anything um you know there's stuff that",
    "start": "2534800",
    "end": "2539960"
  },
  {
    "text": "we would like to implement that with certain jobs follow in a certain order um and it's kind of hard to do",
    "start": "2539960",
    "end": "2545680"
  },
  {
    "text": "especially when everything's running in parallel and lastly there's poor uh tracking and auditing for generating reports um to",
    "start": "2545680",
    "end": "2552839"
  },
  {
    "text": "help our user sort of self- diagnose issues which leads to more support headaches for us so when we were uh looking for",
    "start": "2552839",
    "end": "2560359"
  },
  {
    "start": "2558000",
    "end": "2626000"
  },
  {
    "text": "solutions to to solve these problems we also want to keep in mind that we didn't want to have to rewrite a lot of our backend infrastructure so simple",
    "start": "2560359",
    "end": "2567559"
  },
  {
    "text": "workflow actually provided um was actually a really good solution for us",
    "start": "2567559",
    "end": "2572720"
  },
  {
    "text": "so a simple workflow activity is pretty much just a rescue job that's how um you know we kind of associate it in our app",
    "start": "2572720",
    "end": "2579720"
  },
  {
    "text": "so a workflow groups relevant activities allow allows you to execute them um in",
    "start": "2579720",
    "end": "2585160"
  },
  {
    "text": "serial and it also allows you at each step to then do things in parallel and I",
    "start": "2585160",
    "end": "2591119"
  },
  {
    "text": "could uh the example I'll show you in a second we'll kind of um show you how that works and then we have a basically",
    "start": "2591119",
    "end": "2597760"
  },
  {
    "text": "a Chron workflow it's sort of a parent workflow that calls the individual child workflows that are sort of um the more",
    "start": "2597760",
    "end": "2603640"
  },
  {
    "text": "function-based things that um you know have specific steps that need to get done",
    "start": "2603640",
    "end": "2610000"
  },
  {
    "text": "so um I'm going to quickly just go through and show you how we moved from our rescue setup um to simple workflow",
    "start": "2610000",
    "end": "2616880"
  },
  {
    "text": "and just show you one of the main one of the main uh workflows that we migrated um into simple workflow and really only",
    "start": "2616880",
    "end": "2622800"
  },
  {
    "text": "took probably a few hours um to do so if you look here this is um where",
    "start": "2622800",
    "end": "2630400"
  },
  {
    "start": "2626000",
    "end": "2650000"
  },
  {
    "text": "we Define the activities so like I said an activity is basically a onetoone mapping of a rescue job um for those of",
    "start": "2630400",
    "end": "2636160"
  },
  {
    "text": "you who aren't familiar rescue a rescue job is pretty much just a ruby class that defines one method called perform",
    "start": "2636160",
    "end": "2642760"
  },
  {
    "text": "right so you see here we have um each activity is just calling the perform method of a ruby of a rescue",
    "start": "2642760",
    "end": "2649800"
  },
  {
    "text": "job now we have uh here is where we have a workflow so this is the workflow that",
    "start": "2649800",
    "end": "2654960"
  },
  {
    "start": "2650000",
    "end": "2703000"
  },
  {
    "text": "actually fetches new emails from a user inbox and then processes those messages",
    "start": "2654960",
    "end": "2660400"
  },
  {
    "text": "um creates any new contacts and then it will generate a report actually based on that so if you see um you know the first",
    "start": "2660400",
    "end": "2667400"
  },
  {
    "text": "there it it has we're using the retry block so it'll retry that three times if it fails um you see if online",
    "start": "2667400",
    "end": "2675200"
  },
  {
    "text": "3132 it's actually processing all the emails that it found in parallel so it's",
    "start": "2675200",
    "end": "2680839"
  },
  {
    "text": "still it's still maintaining order but it's allowing us to um to still do some of our most timec consuming steps um in",
    "start": "2680839",
    "end": "2687800"
  },
  {
    "text": "parallel and at the bottom the the generate summary is actually something that we weren't really able to do given",
    "start": "2687800",
    "end": "2693160"
  },
  {
    "text": "our current setup because there um you know aside from me maintaining uh complicated State outside of rescue",
    "start": "2693160",
    "end": "2699680"
  },
  {
    "text": "there's really no easy way to go about doing that and then this is our our Chron",
    "start": "2699680",
    "end": "2705200"
  },
  {
    "start": "2703000",
    "end": "2751000"
  },
  {
    "text": "workflow so you see here basically uh it just creates a timer it sleeps for some",
    "start": "2705200",
    "end": "2710520"
  },
  {
    "text": "amount of time it um and then it Ines a few workflows to be uh to be processed",
    "start": "2710520",
    "end": "2716920"
  },
  {
    "text": "and now the cool thing here is if you look at line 28 there you sort of get duping for free so with uh with simple",
    "start": "2716920",
    "end": "2724160"
  },
  {
    "text": "workflow when you define um when you pass in explicitly a workflow ID it will first check if that ID is already on on",
    "start": "2724160",
    "end": "2731079"
  },
  {
    "text": "the list and not processed yet and if it is it safely ignores it um and then yeah",
    "start": "2731079",
    "end": "2736319"
  },
  {
    "text": "at the bottom here line 32 we just do a continue as new which will restart the history so uh each um each time through",
    "start": "2736319",
    "end": "2743160"
  },
  {
    "text": "the loop we're actually um generating a specific history block so in our application um I guess",
    "start": "2743160",
    "end": "2750760"
  },
  {
    "text": "the next piece I'll show you here is how we actually start the workers so it's pretty simple we just created a few rake",
    "start": "2750760",
    "end": "2756160"
  },
  {
    "text": "tasks so the first one um starts the activity worker and so these process all",
    "start": "2756160",
    "end": "2761520"
  },
  {
    "text": "like the discret logic steps that assab was talking about earlier and then the second task here starts the workflow",
    "start": "2761520",
    "end": "2768200"
  },
  {
    "text": "worker so basically anytime a workflow gets added onto a list this thing will pull it off and process",
    "start": "2768200",
    "end": "2773440"
  },
  {
    "text": "it and since we're running on Heroku um the the um they basically have a process",
    "start": "2773440",
    "end": "2780800"
  },
  {
    "start": "2774000",
    "end": "2812000"
  },
  {
    "text": "file so you could Define different process types so when you uh push your code to um to Heroku they'll start",
    "start": "2780800",
    "end": "2787559"
  },
  {
    "text": "servers b um using these processes and so you see here we just pretty much uh",
    "start": "2787559",
    "end": "2792800"
  },
  {
    "text": "commented out our Clockwork and rescue um processes and then just added the simple workflow uh processes and",
    "start": "2792800",
    "end": "2800440"
  },
  {
    "text": "everything kind of just works so that's it that's how we um implemented uh KRON",
    "start": "2800440",
    "end": "2805880"
  },
  {
    "text": "in our application using simple workflow thanks",
    "start": "2805880",
    "end": "2811440"
  },
  {
    "text": "Jeff so that pretty much uh brings us to the end of our uh presentation um",
    "start": "2811440",
    "end": "2817359"
  },
  {
    "start": "2812000",
    "end": "2858000"
  },
  {
    "text": "so just to summarize uh simple workflow is providing a foundational set of features that you can use to build a lot",
    "start": "2817359",
    "end": "2823599"
  },
  {
    "text": "of different kinds of applications uh today we looked at how you can use it to build distributed cron uh if you're",
    "start": "2823599",
    "end": "2829599"
  },
  {
    "text": "interested to learn more uh here are some you know resources for you to go check out if you're interested in",
    "start": "2829599",
    "end": "2835319"
  },
  {
    "text": "joining the private beta for the Ruby version of the flow framework uh email myself asj at Amazon.com or our product",
    "start": "2835319",
    "end": "2842760"
  },
  {
    "text": "manager Sanjay amazon.com and uh thank thanks thanks for taking the time to come and listen",
    "start": "2842760",
    "end": "2849079"
  },
  {
    "text": "to our talk um and we'll take any",
    "start": "2849079",
    "end": "2852839"
  },
  {
    "text": "questions",
    "start": "2857200",
    "end": "2860200"
  }
]