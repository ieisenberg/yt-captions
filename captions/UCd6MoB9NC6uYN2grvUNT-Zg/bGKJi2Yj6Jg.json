[
  {
    "start": "0",
    "end": "54000"
  },
  {
    "text": "- [Instructor] Hello, everyone.",
    "start": "300",
    "end": "2160"
  },
  {
    "text": "Today, I'm excited to exemplify a modern,",
    "start": "2160",
    "end": "4740"
  },
  {
    "text": "scalable, and low latency approach",
    "start": "4740",
    "end": "6839"
  },
  {
    "text": "to building data-driven applications.",
    "start": "6840",
    "end": "9420"
  },
  {
    "text": "We'll explore how to build\nin just a few minutes,",
    "start": "9420",
    "end": "12330"
  },
  {
    "text": "a serverless application,\nintegrating Amazon Aurora DSQL,",
    "start": "12330",
    "end": "16890"
  },
  {
    "text": "a serverless distributed SQL database",
    "start": "16890",
    "end": "19380"
  },
  {
    "text": "that offers high availability",
    "start": "19380",
    "end": "20970"
  },
  {
    "text": "and automatic scaling\ndesigned for cloud native",
    "start": "20970",
    "end": "24150"
  },
  {
    "text": "applications, requiring high throughput",
    "start": "24150",
    "end": "26310"
  },
  {
    "text": "and low latency and high resiliency.",
    "start": "26310",
    "end": "30342"
  },
  {
    "text": "AWS Lambda, a serverless compute service",
    "start": "30343",
    "end": "34020"
  },
  {
    "text": "that runs code in response to events",
    "start": "34020",
    "end": "36210"
  },
  {
    "text": "and automatically manages the\nunderlying compute resources.",
    "start": "36210",
    "end": "39840"
  },
  {
    "text": "And Amazon API gateway,\na fully managed service",
    "start": "39840",
    "end": "43920"
  },
  {
    "text": "that makes it easy for\ndevelopers to create, publish,",
    "start": "43920",
    "end": "47129"
  },
  {
    "text": "maintain, secure APIs at any scale.",
    "start": "47130",
    "end": "50133"
  },
  {
    "text": "Our demo will illustrate",
    "start": "51990",
    "end": "56460"
  },
  {
    "start": "54000",
    "end": "122000"
  },
  {
    "text": "how these services work together.",
    "start": "56460",
    "end": "59129"
  },
  {
    "text": "The API gateway will serve",
    "start": "59130",
    "end": "60960"
  },
  {
    "text": "as the entry point handling HTTP requests",
    "start": "60960",
    "end": "63750"
  },
  {
    "text": "and routing them to our Lambda function.",
    "start": "63750",
    "end": "67680"
  },
  {
    "text": "The Lambda function will\nprocess the incoming requests",
    "start": "67680",
    "end": "70500"
  },
  {
    "text": "and interact with the\nAurora DSQL database,",
    "start": "70500",
    "end": "75060"
  },
  {
    "text": "our persistence layer.",
    "start": "75060",
    "end": "76562"
  },
  {
    "text": "The Lambda function will authenticate",
    "start": "78630",
    "end": "81659"
  },
  {
    "text": "through an AWSIAM policy,",
    "start": "81660",
    "end": "85713"
  },
  {
    "text": "and it'll use a psycopg adapter,",
    "start": "87150",
    "end": "89700"
  },
  {
    "text": "a standard Python connectivity solution",
    "start": "89700",
    "end": "91979"
  },
  {
    "text": "for Postgre scale databases.",
    "start": "91980",
    "end": "93690"
  },
  {
    "text": "This is to say",
    "start": "93690",
    "end": "95200"
  },
  {
    "text": "you'll see how our new Amazon Aurora DSQL",
    "start": "96180",
    "end": "101180"
  },
  {
    "text": "database maintains compatibility",
    "start": "101520",
    "end": "104009"
  },
  {
    "text": "with existing Postgre\nscale tools and libraries.",
    "start": "104010",
    "end": "107283"
  },
  {
    "text": "And last but not least, Amazon Aurora DSQL",
    "start": "109350",
    "end": "112170"
  },
  {
    "text": "will be the layer that\nstores retrieves the data,",
    "start": "112170",
    "end": "116040"
  },
  {
    "text": "and we'll show you how\nquick and easy it is",
    "start": "116040",
    "end": "118470"
  },
  {
    "text": "to spin off an Aurora\nDSQL database cluster.",
    "start": "118470",
    "end": "121923"
  },
  {
    "start": "122000",
    "end": "230000"
  },
  {
    "text": "Let's go ahead and get started\nwith creating a cluster.",
    "start": "123030",
    "end": "127503"
  },
  {
    "text": "For the purpose of this demo,",
    "start": "132570",
    "end": "134400"
  },
  {
    "text": "I'll just create it just\nto show how easy it is.",
    "start": "134400",
    "end": "137939"
  },
  {
    "text": "One click, one cluster, no\ninstance type to choose from,",
    "start": "137940",
    "end": "141600"
  },
  {
    "text": "no parameter group to configure.",
    "start": "141600",
    "end": "143373"
  },
  {
    "text": "My cluster is now available.",
    "start": "147330",
    "end": "149550"
  },
  {
    "text": "I can connect to it either by",
    "start": "149550",
    "end": "152970"
  },
  {
    "text": "generating a one time, 15\nminutes valid password.",
    "start": "152970",
    "end": "157970"
  },
  {
    "text": "This is to be matched with my IAM role,",
    "start": "159930",
    "end": "164849"
  },
  {
    "text": "which has the permissions\ngranted to authenticate",
    "start": "164850",
    "end": "167580"
  },
  {
    "text": "to this database, to this cluster,",
    "start": "167580",
    "end": "170340"
  },
  {
    "text": "or I can choose to generate my token",
    "start": "170340",
    "end": "174090"
  },
  {
    "text": "through the AWS CLI.",
    "start": "174090",
    "end": "176670"
  },
  {
    "text": "And in that case, I will\nspecify a longer duration,",
    "start": "176670",
    "end": "181620"
  },
  {
    "text": "a longer expiry time for my password.",
    "start": "181620",
    "end": "184709"
  },
  {
    "text": "So I will say",
    "start": "184710",
    "end": "187660"
  },
  {
    "text": "generate me a token valid for one hour.",
    "start": "188700",
    "end": "191913"
  },
  {
    "text": "I'll store that password\nand my environment variable,",
    "start": "193230",
    "end": "198030"
  },
  {
    "text": "and that I will invoke",
    "start": "198030",
    "end": "199569"
  },
  {
    "text": "psql,",
    "start": "202080",
    "end": "202913"
  },
  {
    "text": "as I would with any Postgres database.",
    "start": "204150",
    "end": "206342"
  },
  {
    "text": "Now that I am connected to\nmy newly created cluster,",
    "start": "207570",
    "end": "212403"
  },
  {
    "text": "I will create the table where\nI want to store the results",
    "start": "213840",
    "end": "218610"
  },
  {
    "text": "of my Lambda function.",
    "start": "218610",
    "end": "220203"
  },
  {
    "text": "And that was it.",
    "start": "225030",
    "end": "226500"
  },
  {
    "text": "The database layer is done.",
    "start": "226500",
    "end": "230313"
  },
  {
    "start": "230000",
    "end": "513000"
  },
  {
    "text": "Let's go ahead and create\nthe Lambda function.",
    "start": "231750",
    "end": "234873"
  },
  {
    "text": "Let's say this is DSQL edition,",
    "start": "239370",
    "end": "244023"
  },
  {
    "text": "a Python",
    "start": "245250",
    "end": "246640"
  },
  {
    "text": "Lambda function.",
    "start": "248070",
    "end": "249333"
  },
  {
    "text": "I would need a layer",
    "start": "253980",
    "end": "257010"
  },
  {
    "text": "to include the psycopg adapter.",
    "start": "257010",
    "end": "262010"
  },
  {
    "text": "If I were to create the\nlayer, it takes a bit of a,",
    "start": "264630",
    "end": "269223"
  },
  {
    "text": "I don't know, maybe one minute or two.",
    "start": "270480",
    "end": "273120"
  },
  {
    "text": "So I won't choose to do that just now,",
    "start": "273120",
    "end": "276510"
  },
  {
    "text": "but I will show you",
    "start": "276510",
    "end": "277990"
  },
  {
    "text": "what the steps are.",
    "start": "280590",
    "end": "281913"
  },
  {
    "text": "I'm attaching all those libraries",
    "start": "285090",
    "end": "287740"
  },
  {
    "text": "zipped in a folder.",
    "start": "288840",
    "end": "290613"
  },
  {
    "text": "Suitable for my Python environment,",
    "start": "294000",
    "end": "297303"
  },
  {
    "text": "and I just create it.",
    "start": "298530",
    "end": "299940"
  },
  {
    "text": "And that was it.",
    "start": "299940",
    "end": "300773"
  },
  {
    "text": "But for now, I have my\nlayer already created",
    "start": "301710",
    "end": "305580"
  },
  {
    "text": "and I can just go ahead",
    "start": "305580",
    "end": "308970"
  },
  {
    "text": "and add it to my new Lambda function.",
    "start": "308970",
    "end": "313923"
  },
  {
    "text": "I'll also need to assign the permissions",
    "start": "326649",
    "end": "329982"
  },
  {
    "text": "so that my Lambda function\nis also able to use the IAM",
    "start": "331080",
    "end": "335770"
  },
  {
    "text": "authentication to connect\nto the Aurora DSQL cluster.",
    "start": "336780",
    "end": "341780"
  },
  {
    "text": "So let's go ahead and attach the policy,",
    "start": "342180",
    "end": "345663"
  },
  {
    "text": "that looks like this.",
    "start": "348270",
    "end": "350492"
  },
  {
    "text": "And the permission that\nI'm interested in this case",
    "start": "351510",
    "end": "354330"
  },
  {
    "text": "is the ability to connect\nto my cluster as admin.",
    "start": "354330",
    "end": "358860"
  },
  {
    "text": "In this case, we'll keep it simple.",
    "start": "358860",
    "end": "361202"
  },
  {
    "text": "Once my role is attached,",
    "start": "364320",
    "end": "367800"
  },
  {
    "text": "enhanced with this new\npolicy, I have my layer",
    "start": "367800",
    "end": "372370"
  },
  {
    "text": "for the psycopg adapter,",
    "start": "374070",
    "end": "376830"
  },
  {
    "text": "and I can just go ahead and code.",
    "start": "376830",
    "end": "380492"
  },
  {
    "text": "(keyboard clicking)",
    "start": "382827",
    "end": "385827"
  },
  {
    "text": "(keyboard clicking)",
    "start": "392868",
    "end": "396210"
  },
  {
    "text": "All right.",
    "start": "396210",
    "end": "397043"
  },
  {
    "text": "So I'm connecting as\nadmin, as I mentioned,",
    "start": "398970",
    "end": "401400"
  },
  {
    "text": "my Lambda function will use this,",
    "start": "401400",
    "end": "404639"
  },
  {
    "text": "generate DB connect\nadmin off token method.",
    "start": "404640",
    "end": "409640"
  },
  {
    "text": "This comes with the Python SDK",
    "start": "410610",
    "end": "413849"
  },
  {
    "text": "that is available on our website.",
    "start": "413850",
    "end": "416040"
  },
  {
    "text": "And if you want to learn more about it,",
    "start": "416040",
    "end": "418383"
  },
  {
    "text": "you can either use the read me of the SDK",
    "start": "419760",
    "end": "421890"
  },
  {
    "text": "or you can use this,",
    "start": "421890",
    "end": "423573"
  },
  {
    "text": "the nice instructions\nin our documentation.",
    "start": "425550",
    "end": "427862"
  },
  {
    "text": "And as I mentioned,",
    "start": "430410",
    "end": "431790"
  },
  {
    "text": "all we're doing in this\nfunction is inserting the result",
    "start": "431790",
    "end": "435930"
  },
  {
    "text": "of two numbers getting\nadded to one another.",
    "start": "435930",
    "end": "439653"
  },
  {
    "text": "So let's deploy the code.",
    "start": "441690",
    "end": "443373"
  },
  {
    "text": "Let's create a test event.",
    "start": "445320",
    "end": "447963"
  },
  {
    "text": "The test event needs to\nuse those two numbers",
    "start": "459589",
    "end": "463339"
  },
  {
    "text": "and the cluster end point.",
    "start": "464370",
    "end": "466533"
  },
  {
    "text": "I will copy my cluster endpoint,",
    "start": "468270",
    "end": "471843"
  },
  {
    "text": "give a name to the test event,",
    "start": "476820",
    "end": "479703"
  },
  {
    "text": "and let's invoke it.",
    "start": "483180",
    "end": "484623"
  },
  {
    "text": "It is successful.",
    "start": "487860",
    "end": "489302"
  },
  {
    "text": "And if we check in",
    "start": "490170",
    "end": "492720"
  },
  {
    "text": "the cloud shell again in our\nconnection to the database,",
    "start": "492720",
    "end": "497720"
  },
  {
    "text": "the addition results\nshould already be there.",
    "start": "501180",
    "end": "505259"
  },
  {
    "text": "Let's see.",
    "start": "505260",
    "end": "506093"
  },
  {
    "text": "And there they are.",
    "start": "511200",
    "end": "512193"
  },
  {
    "start": "513000",
    "end": "764000"
  },
  {
    "text": "We are now, in the last\nstage of this demo.",
    "start": "513750",
    "end": "516543"
  },
  {
    "text": "We have our cluster, our table,",
    "start": "517500",
    "end": "520950"
  },
  {
    "text": "our Lambda function,",
    "start": "520950",
    "end": "522030"
  },
  {
    "text": "and we've seen that those\nthree connect to one another.",
    "start": "522030",
    "end": "525663"
  },
  {
    "text": "And now let's create an API that will",
    "start": "527250",
    "end": "531720"
  },
  {
    "text": "route HTTP requests to\nour Lambda function.",
    "start": "531720",
    "end": "535202"
  },
  {
    "text": "We'll choose a REST API,",
    "start": "539850",
    "end": "543063"
  },
  {
    "text": "we'll call it addition.",
    "start": "543900",
    "end": "546933"
  },
  {
    "text": "Create a resource, also named addition.",
    "start": "551160",
    "end": "554673"
  },
  {
    "text": "Create a method, get,",
    "start": "557850",
    "end": "560613"
  },
  {
    "text": "we'll specify that we wanted",
    "start": "563250",
    "end": "567540"
  },
  {
    "text": "to connect to our Lambda function.",
    "start": "567540",
    "end": "572133"
  },
  {
    "text": "We'll also have to specify the parameters",
    "start": "580170",
    "end": "584519"
  },
  {
    "text": "that this API expects.",
    "start": "584520",
    "end": "586470"
  },
  {
    "text": "So we'll use",
    "start": "586470",
    "end": "587860"
  },
  {
    "text": "the same parameters as\nwe did in our test event",
    "start": "589380",
    "end": "594380"
  },
  {
    "text": "for the Lambda function.",
    "start": "596250",
    "end": "601250"
  },
  {
    "text": "If you remember, this is\nwhere we were testing it.",
    "start": "601980",
    "end": "606209"
  },
  {
    "text": "So we're expecting the\nsame parameters in our API.",
    "start": "606210",
    "end": "609543"
  },
  {
    "text": "Yes.",
    "start": "613290",
    "end": "614123"
  },
  {
    "text": "Now let's deploy the API.",
    "start": "616980",
    "end": "619833"
  },
  {
    "text": "Create a stage name, test.",
    "start": "624090",
    "end": "627723"
  },
  {
    "text": "We have our URL,",
    "start": "628890",
    "end": "630423"
  },
  {
    "text": "and we'll keep it simple and just insert",
    "start": "632820",
    "end": "637200"
  },
  {
    "text": "in our browser",
    "start": "637200",
    "end": "639910"
  },
  {
    "text": "an API call",
    "start": "646470",
    "end": "647800"
  },
  {
    "text": "and we'll define the first number,",
    "start": "648780",
    "end": "652770"
  },
  {
    "text": "345,",
    "start": "652770",
    "end": "653973"
  },
  {
    "text": "the second number 476,",
    "start": "655020",
    "end": "658263"
  },
  {
    "text": "and the cluster end point,",
    "start": "659280",
    "end": "662433"
  },
  {
    "text": "which we need to get",
    "start": "666450",
    "end": "667990"
  },
  {
    "text": "from the console.",
    "start": "671040",
    "end": "672693"
  },
  {
    "text": "Oh, it looks like I made a mistake here.",
    "start": "682020",
    "end": "685230"
  },
  {
    "text": "Let's just add",
    "start": "685230",
    "end": "686293"
  },
  {
    "text": "a second parameter.",
    "start": "688865",
    "end": "691053"
  },
  {
    "text": "And there it is.",
    "start": "693960",
    "end": "694800"
  },
  {
    "text": "And if I go to my database connection,",
    "start": "694800",
    "end": "699149"
  },
  {
    "text": "I should be able to see this",
    "start": "699150",
    "end": "702450"
  },
  {
    "text": "stored in the database.",
    "start": "702450",
    "end": "704043"
  },
  {
    "text": "This concludes our demo today.",
    "start": "705720",
    "end": "708483"
  },
  {
    "text": "I hope you've seen how\neasy it is to create",
    "start": "709830",
    "end": "714400"
  },
  {
    "text": "serverless architecture\nwith Amazon AWS solutions",
    "start": "715260",
    "end": "720260"
  },
  {
    "text": "like AWS Lambda, the APA gateway,",
    "start": "720270",
    "end": "724830"
  },
  {
    "text": "which effectively routed our\nrequest to the Lambda function,",
    "start": "724830",
    "end": "729830"
  },
  {
    "text": "the Lambda function, which\nused the psycopg adapter",
    "start": "729870",
    "end": "732570"
  },
  {
    "text": "to successfully establish a connection",
    "start": "732570",
    "end": "734640"
  },
  {
    "text": "with the Aurora DSQL cluster,",
    "start": "734640",
    "end": "737490"
  },
  {
    "text": "connection secured by IAM authentication.",
    "start": "737490",
    "end": "740760"
  },
  {
    "text": "And of course, we've shown\nthe remarkable simplicity",
    "start": "740760",
    "end": "744630"
  },
  {
    "text": "of the Aurora DSQL provisioning.",
    "start": "744630",
    "end": "747030"
  },
  {
    "text": "With just one click,",
    "start": "747030",
    "end": "748710"
  },
  {
    "text": "we created a fully managed\nserverless database,",
    "start": "748710",
    "end": "751620"
  },
  {
    "text": "no need for complex setup,",
    "start": "751620",
    "end": "753390"
  },
  {
    "text": "capacity planning, manual configuration.",
    "start": "753390",
    "end": "756120"
  },
  {
    "text": "It's really the minimum time\nfrom an idea to deployment.",
    "start": "756120",
    "end": "760713"
  }
]