[
  {
    "start": "0",
    "end": "33000"
  },
  {
    "text": "I'm the general manager for Amazon Neptune our new graph database offering I also run Amazon Elastic search service",
    "start": "0",
    "end": "6180"
  },
  {
    "text": "and amazon cloudsearch and with me today is Brad Beebe who is the head of product management for Amazon Neptune before we",
    "start": "6180",
    "end": "14880"
  },
  {
    "text": "talk about Neptune and why graphs matter and why we actually went down the journey of building a graph database I",
    "start": "14880",
    "end": "21210"
  },
  {
    "text": "did want to tell you a bit about our philosophy around databases at AWS and",
    "start": "21210",
    "end": "26400"
  },
  {
    "text": "what actually caused us to start working on this very purpose build database so",
    "start": "26400",
    "end": "34710"
  },
  {
    "start": "33000",
    "end": "80000"
  },
  {
    "text": "purpose or Mataura that is really kind of how we think about databases we think",
    "start": "34710",
    "end": "41640"
  },
  {
    "text": "about it as you know the purpose is the reason for building something you know or creating something that has a reason",
    "start": "41640",
    "end": "48210"
  },
  {
    "text": "behind it and at AWS we believe that databases that are purpose-built for a",
    "start": "48210",
    "end": "53850"
  },
  {
    "text": "very specific task are gonna do better are gonna perform better are gonna be",
    "start": "53850",
    "end": "59609"
  },
  {
    "text": "easier to use and scale better than general-purpose databases that are trying to solve every problem that's out",
    "start": "59609",
    "end": "66900"
  },
  {
    "text": "there so that is a very key fundamental belief in how we think about it and our",
    "start": "66900",
    "end": "73049"
  },
  {
    "text": "goal is ready to deliver the best tools for the job to developers whether that's languages databases or analytics engines",
    "start": "73049",
    "end": "80689"
  },
  {
    "start": "80000",
    "end": "136000"
  },
  {
    "text": "if you go back in time and think about the traditional applications we've built",
    "start": "80689",
    "end": "85820"
  },
  {
    "text": "CRM ERP HR applications you know these applications have had",
    "start": "85820",
    "end": "91860"
  },
  {
    "text": "hundreds of users maybe thousands of users we thought about data storage in",
    "start": "91860",
    "end": "97710"
  },
  {
    "text": "gigabytes and when they were really big we thought about them in terabytes response times typically had to be in",
    "start": "97710",
    "end": "104460"
  },
  {
    "text": "seconds and at most we'd had tens of thousands of concurrent requests per",
    "start": "104460",
    "end": "109770"
  },
  {
    "text": "second and usually much less than that and and in general we would scale up the",
    "start": "109770",
    "end": "115649"
  },
  {
    "text": "systems and you know if the system was down for a bit it wasn't such a big deal because the amount of users we had was",
    "start": "115649",
    "end": "122939"
  },
  {
    "text": "very very limited in this era we will basically very often use one database",
    "start": "122939",
    "end": "129600"
  },
  {
    "text": "just put everything in a one database and it was good enough and we didn't have the really difficult challenges we",
    "start": "129600",
    "end": "135330"
  },
  {
    "text": "have today where we have to build a whole different class of applications so",
    "start": "135330",
    "end": "140460"
  },
  {
    "start": "136000",
    "end": "213000"
  },
  {
    "text": "today we're building cloud scale applications we definitely see a lot of",
    "start": "140460",
    "end": "145590"
  },
  {
    "text": "them here in Israel you know at Tech security applications very large applications reaching millions of users",
    "start": "145590",
    "end": "152840"
  },
  {
    "text": "we think of storage like the small storage is usually terabytes we seen",
    "start": "152840",
    "end": "158130"
  },
  {
    "text": "petabyte applications we even have some customers who have exabytes of data",
    "start": "158130",
    "end": "163310"
  },
  {
    "text": "these applications are global you know the new second is millisecond from our",
    "start": "163310",
    "end": "169410"
  },
  {
    "text": "perspective and in that tech world millisecond isn't fast enough in any microsecond latency and so this starts",
    "start": "169410",
    "end": "176760"
  },
  {
    "text": "to get us to think about okay when we have to move from these kind of old applications to the new ones can we",
    "start": "176760",
    "end": "182550"
  },
  {
    "text": "really achieve you know these kind of goals with a one-size-fits-all strategy",
    "start": "182550",
    "end": "188780"
  },
  {
    "text": "also when we think about scaling it's not just about scaling up it also is",
    "start": "188780",
    "end": "194190"
  },
  {
    "text": "because we care about memory and we want to you know have as much data in memory as possible but we also think about",
    "start": "194190",
    "end": "199770"
  },
  {
    "text": "scaling up scaling down and given that we're starting to use a lot of resources being able to pay on a pay-as-you-go",
    "start": "199770",
    "end": "206550"
  },
  {
    "text": "basis and not have to over provision is also something that is extremely important to us so basically as we were",
    "start": "206550",
    "end": "214290"
  },
  {
    "text": "thinking about these new applications we really start to think about you know what's driving those applications it's",
    "start": "214290",
    "end": "221040"
  },
  {
    "text": "much faster response times much faster scale and and the use cases are starting",
    "start": "221040",
    "end": "226920"
  },
  {
    "text": "to become very very diverse and so we basically spend a lot of time at AWS to",
    "start": "226920",
    "end": "233340"
  },
  {
    "text": "start to build databases that can meet very specific needs of yours to really",
    "start": "233340",
    "end": "239190"
  },
  {
    "text": "build very innovative applications and so let's talk about some of the graph Paris re some of the database paradigms",
    "start": "239190",
    "end": "246240"
  },
  {
    "text": "you really care about so I'll take ecommerce as an example not because we're Amazon and we have amazon.com but",
    "start": "246240",
    "end": "252780"
  },
  {
    "text": "it's just an example I like if you think about the kind of data stores we use",
    "start": "252780",
    "end": "258239"
  },
  {
    "start": "254000",
    "end": "428000"
  },
  {
    "text": "today and how that would relate to an e-commerce application think about the relation model really good if you care about",
    "start": "258239",
    "end": "265060"
  },
  {
    "text": "referential data refs are referential integrity you care about transactions",
    "start": "265060",
    "end": "270370"
  },
  {
    "text": "it's really good in an e-commerce use case if for the transactional processing",
    "start": "270370",
    "end": "275800"
  },
  {
    "text": "side so you know when people say relational is dead we think relational is great we have offerings like Aurora",
    "start": "275800",
    "end": "282160"
  },
  {
    "text": "on the relational side but when you start to think about the shopping carts now you have you know hundreds of",
    "start": "282160",
    "end": "288640"
  },
  {
    "text": "thousands or millions of users coming to your e-commerce website and you need to have very very fast response time",
    "start": "288640",
    "end": "294400"
  },
  {
    "text": "because if if you lose them during the buying journey they're never going to convert into the transaction and so",
    "start": "294400",
    "end": "300430"
  },
  {
    "text": "there you may have something more like a key value store that's why we build dynamo dynamo gives you single-digit",
    "start": "300430",
    "end": "305710"
  },
  {
    "text": "millisecond response times pretty much infinite scale and super useful for kind",
    "start": "305710",
    "end": "312430"
  },
  {
    "text": "of a shopping cart example think about document store you know dynamo also",
    "start": "312430",
    "end": "318610"
  },
  {
    "text": "supports document obviously other databases also have document capabilities documents would be really",
    "start": "318610",
    "end": "325330"
  },
  {
    "text": "good for the product page right the product product description usually that's a more fluid and kind of data",
    "start": "325330",
    "end": "333970"
  },
  {
    "text": "that you want to keep it's gonna evolve quite a bit it's not gonna be super structured having a nice JSON based",
    "start": "333970",
    "end": "339490"
  },
  {
    "text": "document store is really exciting and so talking about graph you know why do we",
    "start": "339490",
    "end": "345280"
  },
  {
    "text": "build graph if you think about e-commerce and shopping one of the key things you can do with graph and Brad's",
    "start": "345280",
    "end": "351040"
  },
  {
    "text": "gonna talk a lot more about how you can do that in graph what about a recommendation if you know what people",
    "start": "351040",
    "end": "358030"
  },
  {
    "text": "bought and you know who they like and you know what kind of products they like what their interests are what who their",
    "start": "358030",
    "end": "364120"
  },
  {
    "text": "friends are you can actually start to understand from that connected data you know you",
    "start": "364120",
    "end": "370090"
  },
  {
    "text": "can start making recommendations and actually convert more customers on your websites to buying other products and",
    "start": "370090",
    "end": "376630"
  },
  {
    "text": "we'll give you an example later on the chose exactly how you would actually think about that and then last but not",
    "start": "376630",
    "end": "382540"
  },
  {
    "text": "least time series many of you probably know elasticsearch that's one example of an offering we have but time series data",
    "start": "382540",
    "end": "388840"
  },
  {
    "text": "is really going it's growing super fast both because of IOT application",
    "start": "388840",
    "end": "393880"
  },
  {
    "text": "monitoring and a lot of other use so when we think about this again as AWS",
    "start": "393880",
    "end": "400460"
  },
  {
    "text": "our goal is ready to deliver the best databases that around these different",
    "start": "400460",
    "end": "406980"
  },
  {
    "text": "database characteristics and sometimes it may be one database that can do both or we will very very specific databases",
    "start": "406980",
    "end": "414870"
  },
  {
    "text": "for that purpose and I've already mentioned quite a few of the databases",
    "start": "414870",
    "end": "420240"
  },
  {
    "text": "I'll skip this slide but basically from relational to non relation and latex engines you have a lot of choice at AWS",
    "start": "420240",
    "end": "427020"
  },
  {
    "text": "on what you use so let's talk about graph what makes graph really exciting",
    "start": "427020",
    "end": "432810"
  },
  {
    "start": "428000",
    "end": "531000"
  },
  {
    "text": "and unique is graph is actually less about the data and it's more about the interconnection of the data its how does",
    "start": "432810",
    "end": "439770"
  },
  {
    "text": "data relate to each other and more and more and more of your data actually has this kind these kind of connections",
    "start": "439770",
    "end": "446520"
  },
  {
    "text": "within it whether you notice it or not and those interconnections can actually",
    "start": "446520",
    "end": "452250"
  },
  {
    "text": "help you solve problems that you weren't able to solve previously the problem we've had to date is that being able to",
    "start": "452250",
    "end": "459030"
  },
  {
    "text": "solve those problems in traditional databases has been far too difficult has been slow and so building a",
    "start": "459030",
    "end": "467250"
  },
  {
    "text": "purpose-built graph database can actually help you look at the data in a very very different way and deliver",
    "start": "467250",
    "end": "474210"
  },
  {
    "text": "experiences and capabilities in your applications that are very differentiated compared to the kind of",
    "start": "474210",
    "end": "480930"
  },
  {
    "text": "applications that you built before what we see very often is that you know many",
    "start": "480930",
    "end": "486180"
  },
  {
    "text": "people actually know they have graph problems but because they haven't been",
    "start": "486180",
    "end": "491580"
  },
  {
    "text": "very good graph tools they either haven't solved them or they've used databases like dynamo or relational",
    "start": "491580",
    "end": "499560"
  },
  {
    "text": "database to try and kind of solve a graphic but the key issue is always but",
    "start": "499560",
    "end": "506190"
  },
  {
    "text": "then you start to really fall down on things like performance and agility and so on so I'm gonna hand it over to Brad",
    "start": "506190",
    "end": "512490"
  },
  {
    "text": "now brad is an expert in graph he's been in the graph space for many years and he'll take you much deeper into what",
    "start": "512490",
    "end": "521130"
  },
  {
    "text": "kind of gap graph problems are out there how you should think about solving them and then talk very specifically about",
    "start": "521130",
    "end": "526800"
  },
  {
    "text": "Neptune and what some of the key these are in Neptune alright thank you",
    "start": "526800",
    "end": "534750"
  },
  {
    "start": "531000",
    "end": "764000"
  },
  {
    "text": "so before we get started I wanted to just see from the audience how many people have used the graph database",
    "start": "534750",
    "end": "541320"
  },
  {
    "text": "before okay a couple how many people have used Apache tinker pop or the",
    "start": "541320",
    "end": "547800"
  },
  {
    "text": "gremlin language from imperative traversals a few less that's great and any rdf sparkle users resource",
    "start": "547800",
    "end": "555630"
  },
  {
    "text": "description framework okay great fantastic well one of the things that personally I like about being in",
    "start": "555630",
    "end": "562890"
  },
  {
    "text": "the graph space is really the huge range of use cases that you get to experience",
    "start": "562890",
    "end": "567900"
  },
  {
    "text": "and you know Andy talked about purpose-built databases and you know what we really saw was that increasingly",
    "start": "567900",
    "end": "574350"
  },
  {
    "text": "our customers needed to process data that was both rich and highly connected",
    "start": "574350",
    "end": "579780"
  },
  {
    "text": "and it was rich in that it had a diversity of different data types",
    "start": "579780",
    "end": "585860"
  },
  {
    "text": "different schemas different sources it came in at different rates from",
    "start": "585860",
    "end": "591090"
  },
  {
    "text": "different sensors and most importantly what sort of linked all of these",
    "start": "591090",
    "end": "596910"
  },
  {
    "text": "different use cases and customer needs together was that the real core value in the applications was in processing the",
    "start": "596910",
    "end": "604410"
  },
  {
    "text": "relationships that the data created and so these are really the six use cases you know we're really focusing on for",
    "start": "604410",
    "end": "612000"
  },
  {
    "text": "Amazon Neptune you know the first is social networking you know social networks are really all about people",
    "start": "612000",
    "end": "618560"
  },
  {
    "text": "people's interactions things that people like ways that they express actions that",
    "start": "618560",
    "end": "625200"
  },
  {
    "text": "they do and social networks are a classic graph application the second major area are different types of",
    "start": "625200",
    "end": "631440"
  },
  {
    "text": "recommendation systems so things ranging from product recommendations to",
    "start": "631440",
    "end": "636720"
  },
  {
    "text": "friendship recommendations to other applications knowledge graphs are an",
    "start": "636720",
    "end": "642660"
  },
  {
    "text": "area we've seen a lot of growth in in the past 12 to 18 months knowledge graphs use a graph model to represent",
    "start": "642660",
    "end": "650070"
  },
  {
    "text": "domain information and then they enable you to do things like improve information retrieval or help customers",
    "start": "650070",
    "end": "657000"
  },
  {
    "text": "answer new questions by really understanding the core concepts that they're asking",
    "start": "657000",
    "end": "662930"
  },
  {
    "text": "fraud is a very traditional graphic location we see both real time fraud use",
    "start": "662930",
    "end": "669150"
  },
  {
    "text": "cases where people want to try and evaluate in a transaction time line",
    "start": "669150",
    "end": "674370"
  },
  {
    "text": "whether there may be fraudulent activity and then we also see retrospective use cases where people want to look",
    "start": "674370",
    "end": "680060"
  },
  {
    "text": "longitudinally at a set of transactions over time and try and understand what patterns may be in there and see if they",
    "start": "680060",
    "end": "687720"
  },
  {
    "text": "can learn to prevent future fraud the Life Sciences has a long history of",
    "start": "687720",
    "end": "693960"
  },
  {
    "text": "investing in high quality data to model things like proteins chemical compounds",
    "start": "693960",
    "end": "700980"
  },
  {
    "text": "so on and so forth and so there's a number of different applications and life sciences ranging from drug",
    "start": "700980",
    "end": "707670"
  },
  {
    "text": "hypothesis regeneration where you look at existing improved drugs and you look",
    "start": "707670",
    "end": "712950"
  },
  {
    "text": "at the protein receptors and try and understand if there's new treatments that they can be applied to to using",
    "start": "712950",
    "end": "720110"
  },
  {
    "text": "research and information retrieval techniques where you provide very fine-grain topical information on",
    "start": "720110",
    "end": "726150"
  },
  {
    "text": "research and then allow people to retrieve it very quickly - all the way to just using graph based data",
    "start": "726150",
    "end": "733590"
  },
  {
    "text": "integration techniques where you take information coming out of different medical systems and try and combine it",
    "start": "733590",
    "end": "739530"
  },
  {
    "text": "for a few and then really lastly networks themselves are fundamentally",
    "start": "739530",
    "end": "745260"
  },
  {
    "text": "connected data structures and so we see network use cases ranging from protecting the boundary how can I know",
    "start": "745260",
    "end": "751290"
  },
  {
    "text": "what's happening at the edge of my network to capacity planning what will",
    "start": "751290",
    "end": "756600"
  },
  {
    "text": "happen if this particular node goes down and so there's just really a breadth of use cases but let's look at a couple of",
    "start": "756600",
    "end": "762450"
  },
  {
    "text": "more detailed examples so this graph is showing sort of a hypothetical on your right we see social information on the",
    "start": "762450",
    "end": "770490"
  },
  {
    "start": "764000",
    "end": "810000"
  },
  {
    "text": "top we have some product purchase history on the bottom we have some shared interest and by looking at",
    "start": "770490",
    "end": "777780"
  },
  {
    "text": "features of the graph and trying to complete them we can use this as the basis for making recommendations so for",
    "start": "777780",
    "end": "785580"
  },
  {
    "text": "example by intern at shared interest in purchase history we can make a product",
    "start": "785580",
    "end": "791370"
  },
  {
    "text": "recommendation that people who also followed sports purchased this product we can do the same kinds of things in a",
    "start": "791370",
    "end": "799019"
  },
  {
    "text": "social context so by noticing that there's a shared friendship here we can",
    "start": "799019",
    "end": "804179"
  },
  {
    "text": "recommend a relationship to say here's someone that you may also know I",
    "start": "804179",
    "end": "811100"
  },
  {
    "start": "810000",
    "end": "849000"
  },
  {
    "text": "mentioned knowledge graph applications earlier this particular example is taken from the w3c s knowledge graph primer",
    "start": "811189",
    "end": "818549"
  },
  {
    "text": "and on the right you see some information about art artwork the",
    "start": "818549",
    "end": "823829"
  },
  {
    "text": "artists where it's located we've also overlaid a social graph some travel history and by combining all of",
    "start": "823829",
    "end": "831720"
  },
  {
    "text": "these things together we can start to build applications that answer questions like who painted the Mona Lisa what",
    "start": "831720",
    "end": "840029"
  },
  {
    "text": "museums should Alice visit while she's in Paris or what artists have paintings",
    "start": "840029",
    "end": "845459"
  },
  {
    "text": "in the Louvre Thompson Reuters is one of",
    "start": "845459",
    "end": "851789"
  },
  {
    "start": "849000",
    "end": "892000"
  },
  {
    "text": "our public preview customers for an Amazon Neptune and they have quite an interesting use case what they're doing",
    "start": "851789",
    "end": "858209"
  },
  {
    "text": "is they are using a graph model to model tax policies in various different geographic regions and then they also",
    "start": "858209",
    "end": "865769"
  },
  {
    "text": "model their corporates their clients corporate structures and they use the combination of information to help their",
    "start": "865769",
    "end": "873359"
  },
  {
    "text": "customers understand what are my tax compliance obligations in all of the",
    "start": "873359",
    "end": "878459"
  },
  {
    "text": "places where I do business and beyond that also helping them to optimize their",
    "start": "878459",
    "end": "883739"
  },
  {
    "text": "tax exposure and suggest different strategies that may help them you know as they look at their their liabilities",
    "start": "883739",
    "end": "891980"
  },
  {
    "text": "so in thinking about the product we sort of asked ourselves what can customers",
    "start": "891980",
    "end": "898470"
  },
  {
    "start": "892000",
    "end": "996000"
  },
  {
    "text": "use to process this kind of data and you know the first thing that came to mind",
    "start": "898470",
    "end": "903539"
  },
  {
    "text": "was how about a relational database can I use a relational database to process",
    "start": "903539",
    "end": "909119"
  },
  {
    "text": "graph data and the answer is yes of course you can but there's a couple of",
    "start": "909119",
    "end": "914309"
  },
  {
    "text": "things that you need to be aware of the first is that the query language for a",
    "start": "914309",
    "end": "919859"
  },
  {
    "text": "relational database is sequel the construct that you would use to traverse",
    "start": "919859",
    "end": "925319"
  },
  {
    "text": "a graph or to Express graph queries is a joint operation and graph applications have a very large",
    "start": "925319",
    "end": "933150"
  },
  {
    "text": "amount of joint operations and so sequel queries to Express graph traversals very",
    "start": "933150",
    "end": "939300"
  },
  {
    "text": "quickly get complicated and expensive to execute and this is because the second",
    "start": "939300",
    "end": "946590"
  },
  {
    "text": "point which is that relational database management systems have a very different",
    "start": "946590",
    "end": "951690"
  },
  {
    "text": "type of workload than you see in graphs graphs are characterized by a large number of self join operations and so",
    "start": "951690",
    "end": "957900"
  },
  {
    "text": "the kinds of io characteristics that relational systems are designed to handle are very different than graph so",
    "start": "957900",
    "end": "963510"
  },
  {
    "text": "you get these large numbers of joins executed over a relational systems and what you see is a declining query",
    "start": "963510",
    "end": "969480"
  },
  {
    "text": "performance and increase in query complexity and then the last thing that we noticed was that one of the key",
    "start": "969480",
    "end": "977010"
  },
  {
    "text": "features of graph and why customers wanted to use it was that they could",
    "start": "977010",
    "end": "982260"
  },
  {
    "text": "very easily combine data that they really didn't even think about in their design about bringing together so the",
    "start": "982260",
    "end": "989070"
  },
  {
    "text": "flexibility of the graph in relational databases you can be hard to evolve the schema quickly let's look at it from a",
    "start": "989070",
    "end": "996690"
  },
  {
    "text": "dislike lead different concept here here on your left-hand side you're seeing a very basic entity relationship diagram",
    "start": "996690",
    "end": "1003530"
  },
  {
    "text": "of a hypothetical HR system and this was a application that was built",
    "start": "1003530",
    "end": "1009320"
  },
  {
    "text": "specifically to handle HR and it does that very very well but there's a lot of different information in it and so if",
    "start": "1009320",
    "end": "1016850"
  },
  {
    "text": "you want to start to ask questions of the this information that's really outside of the scope of what the",
    "start": "1016850",
    "end": "1024110"
  },
  {
    "text": "application was built for it becomes very difficult now if you look on the right hand side you'll see the same",
    "start": "1024110",
    "end": "1030079"
  },
  {
    "text": "kinds of information but represented in a graph and what you'll notice right away is that rather than being buried in",
    "start": "1030080",
    "end": "1037310"
  },
  {
    "text": "foreign key relationships like in the ER diagram the relationships themselves are",
    "start": "1037310",
    "end": "1042350"
  },
  {
    "text": "first-class objects in the data model and so if you want to ask questions like what are the skills required to build a",
    "start": "1042350",
    "end": "1050000"
  },
  {
    "text": "particular product it's very easy and straightforward to do that whereas that information is is buried within the",
    "start": "1050000",
    "end": "1057440"
  },
  {
    "text": "relational system so what's a graph database well graph",
    "start": "1057440",
    "end": "1063669"
  },
  {
    "start": "1060000",
    "end": "1082000"
  },
  {
    "text": "database is a database system that's optimized for handling graph workloads and it provides support for query",
    "start": "1063669",
    "end": "1071769"
  },
  {
    "text": "languages that are designed to very efficiently and concisely Express graph",
    "start": "1071769",
    "end": "1077590"
  },
  {
    "text": "operations traversals and graph patterns",
    "start": "1077590",
    "end": "1081870"
  },
  {
    "start": "1082000",
    "end": "1233000"
  },
  {
    "text": "there's two leading models for graph the first is something called property graphs property graphs have nodes and",
    "start": "1083009",
    "end": "1090730"
  },
  {
    "text": "edges and nodes and edges have attributes the leading framework for a",
    "start": "1090730",
    "end": "1096460"
  },
  {
    "text": "property graph is something called apache tinker pop which is an open-source project and it provides a",
    "start": "1096460",
    "end": "1102460"
  },
  {
    "text": "language called gremlin which allows you to write imperative traversals over",
    "start": "1102460",
    "end": "1107679"
  },
  {
    "text": "property graphs the second major graph model is something that's called the resource",
    "start": "1107679",
    "end": "1114039"
  },
  {
    "text": "description framework or RDF which is a standard from the World Wide Web",
    "start": "1114039",
    "end": "1119259"
  },
  {
    "text": "Consortium and it has an Associated query language which is called sparkle which provides a declarative graph query",
    "start": "1119259",
    "end": "1125919"
  },
  {
    "text": "language for RDF graphs now there are some differences around the edges of the",
    "start": "1125919",
    "end": "1132549"
  },
  {
    "text": "models but in general you can do almost any application with either model what",
    "start": "1132549",
    "end": "1138519"
  },
  {
    "text": "we tend to find is that customers who are coming from a relational database background often find property graph a",
    "start": "1138519",
    "end": "1145029"
  },
  {
    "text": "very very natural transition so if you used to thinking of things in tables and",
    "start": "1145029",
    "end": "1150100"
  },
  {
    "text": "rows then thinking about things with nodes and node properties and edge and edge properties can be a very natural",
    "start": "1150100",
    "end": "1155860"
  },
  {
    "text": "transition also the gremlin language with it's imperative model makes it very",
    "start": "1155860",
    "end": "1161230"
  },
  {
    "text": "easy to think about applications where in building the application itself users",
    "start": "1161230",
    "end": "1167169"
  },
  {
    "text": "interact with it and they're effectively building graph traversals so it if imperative lee as they interact with",
    "start": "1167169",
    "end": "1172809"
  },
  {
    "text": "their applications so if you think about a social app as you expand out a Hopf",
    "start": "1172809",
    "end": "1178330"
  },
  {
    "text": "you're really building an imperative traversal on the other hand customers",
    "start": "1178330",
    "end": "1184450"
  },
  {
    "text": "like RDF graphs because RDF gives you an exchange standard and so there's a large",
    "start": "1184450",
    "end": "1191169"
  },
  {
    "text": "number of different data sets publicly-available some of them are published by government organizations",
    "start": "1191169",
    "end": "1198100"
  },
  {
    "text": "research organizations commercial organizations and these kinds of datasets things like wiki data things",
    "start": "1198100",
    "end": "1205210"
  },
  {
    "text": "like pubchem things like chem BL they allow you to rapidly bootstrap",
    "start": "1205210",
    "end": "1210610"
  },
  {
    "text": "applications so if you want to take if you have an application that wants to take advantage of these datasets RDF can",
    "start": "1210610",
    "end": "1216790"
  },
  {
    "text": "be a very good choice also if your applications themselves are producing",
    "start": "1216790",
    "end": "1222120"
  },
  {
    "text": "information content that you'd like to have other people consume the exchange",
    "start": "1222120",
    "end": "1227770"
  },
  {
    "text": "standard gives you a benefit for being able to publish and distribute the information so let's look at a",
    "start": "1227770",
    "end": "1235570"
  },
  {
    "start": "1233000",
    "end": "1273000"
  },
  {
    "text": "hypothetical example here on your right hand side we have a picture of a graph",
    "start": "1235570",
    "end": "1241300"
  },
  {
    "text": "data model and this data model is describing a university structure and so",
    "start": "1241300",
    "end": "1247240"
  },
  {
    "text": "we have a university universities have departments departments have professors",
    "start": "1247240",
    "end": "1252490"
  },
  {
    "text": "and graduate students who teach courses and there's students and students take courses students and professors receive",
    "start": "1252490",
    "end": "1259930"
  },
  {
    "text": "degrees from different universities there's sort of a snapshot here which is looking at the class hierarchy of",
    "start": "1259930",
    "end": "1266430"
  },
  {
    "text": "professors and so this is sort of the data model that we're going to use for example now we want to ask a question",
    "start": "1266430",
    "end": "1276040"
  },
  {
    "start": "1273000",
    "end": "1323000"
  },
  {
    "text": "here and the question we want to ask is a graph pattern so we want to say find",
    "start": "1276040",
    "end": "1282280"
  },
  {
    "text": "all the graduate students who received an undergraduate degree from the same University and to answer this we're",
    "start": "1282280",
    "end": "1289960"
  },
  {
    "text": "going to construct a graph pattern so we're gonna first look for graduate",
    "start": "1289960",
    "end": "1296200"
  },
  {
    "text": "students that are members of a department where that department is in a",
    "start": "1296200",
    "end": "1302970"
  },
  {
    "text": "part of a university and they also receive their undergraduate degree now",
    "start": "1302970",
    "end": "1308530"
  },
  {
    "text": "for folks who are familiar in the graph space this example is taken from a fairly well known graph benchmark and so",
    "start": "1308530",
    "end": "1317110"
  },
  {
    "text": "now let's look at how this looks in the various different graph models",
    "start": "1317110",
    "end": "1322410"
  },
  {
    "start": "1323000",
    "end": "1374000"
  },
  {
    "text": "so this is looking at some representative input data this is in the",
    "start": "1323170",
    "end": "1328580"
  },
  {
    "text": "format for our property graph the Neptune property graph and at the top",
    "start": "1328580",
    "end": "1335180"
  },
  {
    "text": "you'll see various different information about the nodes and so this is a CSV format the ID is shown on the left hand",
    "start": "1335180",
    "end": "1342620"
  },
  {
    "text": "side the very the label which in a property graph is very much like a type and you can see that there's attributes",
    "start": "1342620",
    "end": "1349370"
  },
  {
    "text": "so if this should look very familiar for anyone that's worked with CSV the relational databases on the bottom",
    "start": "1349370",
    "end": "1356630"
  },
  {
    "text": "you'll see an example of some input data for the relationships or the edges these",
    "start": "1356630",
    "end": "1361880"
  },
  {
    "text": "there's an ID for the edge then a from in to and then a label the label again",
    "start": "1361880",
    "end": "1366980"
  },
  {
    "text": "is a basic typing mechanism and so this is a example of the input data and we're",
    "start": "1366980",
    "end": "1375830"
  },
  {
    "text": "gonna ask this question and we're going to express it as a gremlin imperative traversal so the first thing that we're",
    "start": "1375830",
    "end": "1382460"
  },
  {
    "text": "going to do is we're going to find all the graduate students and we're gonna",
    "start": "1382460",
    "end": "1387530"
  },
  {
    "text": "save that off as a variable that we're gonna use later then we're going to traverse out one hop and say where did",
    "start": "1387530",
    "end": "1395810"
  },
  {
    "text": "this graduate students get their degree from Denver to look for incoming edges",
    "start": "1395810",
    "end": "1402670"
  },
  {
    "text": "to find departments that are part of these universities where they got their degree then we're going to find incoming",
    "start": "1402670",
    "end": "1411320"
  },
  {
    "text": "edges where the graduate students are actually members of that department and",
    "start": "1411320",
    "end": "1418400"
  },
  {
    "text": "we're going to join that effectively with the starting point of students so we're going to take the intersection of",
    "start": "1418400",
    "end": "1425330"
  },
  {
    "text": "those graduate students that receive the degree from the University with those",
    "start": "1425330",
    "end": "1430970"
  },
  {
    "text": "that are a member and that's how we're gonna answer that question in Gremlin",
    "start": "1430970",
    "end": "1437110"
  },
  {
    "text": "now this is a snippet of data that would effectively match that gremlin traversal",
    "start": "1438100",
    "end": "1444530"
  },
  {
    "text": "and so we can see graduate student the relationship type or the type of the top",
    "start": "1444530",
    "end": "1450380"
  },
  {
    "text": "there if we can see the department that they're a member of we can see the edge relationships there",
    "start": "1450380",
    "end": "1456950"
  },
  {
    "text": "and there undergraduate degree and so that's an example of how that traversal",
    "start": "1456950",
    "end": "1462140"
  },
  {
    "text": "would match for a property graph now let's look at the RDF data model",
    "start": "1462140",
    "end": "1468760"
  },
  {
    "start": "1468000",
    "end": "1523000"
  },
  {
    "text": "so RDF or the resource description framework was originally designed to",
    "start": "1468760",
    "end": "1474580"
  },
  {
    "text": "describe resources that are available on the web and as part of that it makes",
    "start": "1474580",
    "end": "1480919"
  },
  {
    "text": "extensive use of something that they call an IRI or an internationalized resource identifier so this is",
    "start": "1480919",
    "end": "1487460"
  },
  {
    "text": "essentially like a URL and that allows you to distinctly and uniquely express",
    "start": "1487460",
    "end": "1492860"
  },
  {
    "text": "the concepts of identity in RDF and so RDF consists of different what they call",
    "start": "1492860",
    "end": "1500390"
  },
  {
    "text": "triples each triple has three parts a subject a predicate and an object and so the top we say we can see these first",
    "start": "1500390",
    "end": "1507740"
  },
  {
    "text": "two lines defined types so this graduate student has a type of graduate student then they have some property values",
    "start": "1507740",
    "end": "1514520"
  },
  {
    "text": "named some relationships the member of and then some other data associated with",
    "start": "1514520",
    "end": "1520580"
  },
  {
    "text": "it whereas Gremlin provides an",
    "start": "1520580",
    "end": "1525950"
  },
  {
    "text": "imperative traversal model sparkl provides a declarative graph query and",
    "start": "1525950",
    "end": "1531529"
  },
  {
    "text": "so this is the sparkle query that asks the same question so the first three",
    "start": "1531529",
    "end": "1538039"
  },
  {
    "text": "triple patterns here and sparkle queries are expressed as triple patterns find me",
    "start": "1538039",
    "end": "1547640"
  },
  {
    "text": "all of the students that have a type of graduate student and store it in this",
    "start": "1547640",
    "end": "1553520"
  },
  {
    "text": "variable which is conveniently called student and then we have a similar type of triple pattern for universities find",
    "start": "1553520",
    "end": "1560090"
  },
  {
    "text": "me all the universities then find me all the departments and now we start to express our graph pattern and so of",
    "start": "1560090",
    "end": "1568820"
  },
  {
    "text": "these students universities and departments find me the students that are a member of these particular",
    "start": "1568820",
    "end": "1575539"
  },
  {
    "text": "departments where the departments part of the University and the student has an",
    "start": "1575539",
    "end": "1582320"
  },
  {
    "text": "undergraduate degree from that department and what you'll see is in a sparkle query the use of these",
    "start": "1582320",
    "end": "1588970"
  },
  {
    "text": "shared variables effectively creates the join patterns that you need to use to",
    "start": "1588970",
    "end": "1595059"
  },
  {
    "text": "evaluate over the graph and so let's take a look at what the data would look",
    "start": "1595059",
    "end": "1600789"
  },
  {
    "text": "like that would match the sparkle query so here you'll recall this was the data",
    "start": "1600789",
    "end": "1607840"
  },
  {
    "start": "1605000",
    "end": "1640000"
  },
  {
    "text": "we showed earlier and then we highlighted the triples that would be evaluated to match that sparkle query so",
    "start": "1607840",
    "end": "1615220"
  },
  {
    "text": "we can see we found this graduate student based on the type we found that",
    "start": "1615220",
    "end": "1622510"
  },
  {
    "text": "they're part of the University we found where they got their undergraduate degree from and then we have the",
    "start": "1622510",
    "end": "1628720"
  },
  {
    "text": "information that completes the relationship between the University and the department so this is an example of",
    "start": "1628720",
    "end": "1634210"
  },
  {
    "text": "the same question expressed in the RDF in Sparkle model so graph is very",
    "start": "1634210",
    "end": "1642460"
  },
  {
    "text": "complementary to other different analytic techniques as well for anyone that was in the innovate track they saw",
    "start": "1642460",
    "end": "1648970"
  },
  {
    "text": "URIs talk perhaps on sort of service with using recognition this is sort of a similar example using Amazon comprehend",
    "start": "1648970",
    "end": "1657059"
  },
  {
    "text": "here what we're what we're showing is the end result of a workflow that takes",
    "start": "1657059",
    "end": "1663520"
  },
  {
    "text": "RSS feeds so news information processes then with Amazon comprehend extracting",
    "start": "1663520",
    "end": "1670240"
  },
  {
    "text": "the named entities so persons places and things transits them through s3 for storage",
    "start": "1670240",
    "end": "1677400"
  },
  {
    "text": "then loads them into Neptune itself and then has an open source graph",
    "start": "1677400",
    "end": "1683530"
  },
  {
    "text": "visualization on top where we can see the different types of information",
    "start": "1683530",
    "end": "1688720"
  },
  {
    "text": "that's being displayed by different organizations so this is an example of the kinds of things that you can do with",
    "start": "1688720",
    "end": "1695230"
  },
  {
    "text": "a graph where you're taking information generated from other systems that provides relationships you're using the",
    "start": "1695230",
    "end": "1701770"
  },
  {
    "text": "graph to integrate it together and to drive you their visualizations or other analytic capabilities so graphs seem",
    "start": "1701770",
    "end": "1710559"
  },
  {
    "text": "pretty cool right maybe not as cool as the music that came earlier",
    "start": "1710559",
    "end": "1717690"
  },
  {
    "start": "1717000",
    "end": "1831000"
  },
  {
    "text": "so we wanted to look at you know so graph database is a good thing what are",
    "start": "1717900",
    "end": "1723030"
  },
  {
    "text": "the alternatives for customers to use a graph database and so we looked around",
    "start": "1723030",
    "end": "1728070"
  },
  {
    "text": "and a couple of things really struck out",
    "start": "1728070",
    "end": "1733800"
  },
  {
    "text": "to us one was that we talked to a lot of customers who had some success with the",
    "start": "1733800",
    "end": "1739350"
  },
  {
    "text": "proof-of-concept with the graph database so they tried some small-scale application they had built it it had",
    "start": "1739350",
    "end": "1747420"
  },
  {
    "text": "worked great they really liked it they found it easy to use and then they went",
    "start": "1747420",
    "end": "1752910"
  },
  {
    "text": "to take it into production and they they had a couple of challenges the first of",
    "start": "1752910",
    "end": "1758400"
  },
  {
    "text": "which was that as they increased from a POC data scale into that of production",
    "start": "1758400",
    "end": "1764820"
  },
  {
    "text": "they saw a rapid decline in query performance the second was that when",
    "start": "1764820",
    "end": "1771420"
  },
  {
    "text": "they needed to move beyond just a single open source or community edition and put",
    "start": "1771420",
    "end": "1778230"
  },
  {
    "text": "things into production where they needed to have high availability read replication security features encryption",
    "start": "1778230",
    "end": "1784830"
  },
  {
    "text": "at rest they what they found is that these kinds of features were either not",
    "start": "1784830",
    "end": "1790800"
  },
  {
    "text": "available in open source or community editions or very very expensive to",
    "start": "1790800",
    "end": "1796440"
  },
  {
    "text": "license in Enterprise editions to these products the second thing that we found",
    "start": "1796440",
    "end": "1801990"
  },
  {
    "text": "was that well some alternatives provide support for both graph models there tend",
    "start": "1801990",
    "end": "1809520"
  },
  {
    "text": "to be a very strong bias towards one of the others so for your property graph applications if you chose a an",
    "start": "1809520",
    "end": "1816020"
  },
  {
    "text": "alternative that supported both property graph and rdf you get very good performance potentially for property",
    "start": "1816020",
    "end": "1821700"
  },
  {
    "text": "graph but not so good for rdf and vice-versa so this was the overall",
    "start": "1821700",
    "end": "1827190"
  },
  {
    "text": "context for which we designed to Amazon Neptune so Amazon Neptune is designed to",
    "start": "1827190",
    "end": "1835050"
  },
  {
    "start": "1831000",
    "end": "2007000"
  },
  {
    "text": "be an interactive graph database that supports graph applications that need",
    "start": "1835050",
    "end": "1840420"
  },
  {
    "text": "very high throughput query answering with low latency and in particular we",
    "start": "1840420",
    "end": "1846630"
  },
  {
    "text": "think about graph query operations in two different categories the first are OLTP like graph queries",
    "start": "1846630",
    "end": "1853820"
  },
  {
    "text": "which we define as parameterize graphed reversals of less than three hops or",
    "start": "1853820",
    "end": "1860430"
  },
  {
    "text": "parameterize graph patterns and for these kinds of oil TP style reads the",
    "start": "1860430",
    "end": "1865980"
  },
  {
    "text": "target throughput is to support up to 10,000 OLTP reads per server per second",
    "start": "1865980",
    "end": "1872840"
  },
  {
    "text": "with a latency of less than 50 milliseconds and we support horizontal",
    "start": "1872840",
    "end": "1878700"
  },
  {
    "text": "read scaling of up to 15 different read replicas so you can scale that a little",
    "start": "1878700",
    "end": "1883830"
  },
  {
    "text": "TP throughput up to 150,000 queries per second per cluster the second kind of",
    "start": "1883830",
    "end": "1890700"
  },
  {
    "text": "read that we think about or OLAP style queries and we think about these as traversals of three or more hops on",
    "start": "1890700",
    "end": "1897960"
  },
  {
    "text": "bound graph patterns complex filters combinations of all three of these",
    "start": "1897960",
    "end": "1903390"
  },
  {
    "text": "things and for OLAP style queries the",
    "start": "1903390",
    "end": "1908880"
  },
  {
    "text": "target throughput is to support up to a hundred OLAP queries per server per",
    "start": "1908880",
    "end": "1914010"
  },
  {
    "text": "second with latency targets that vary and they vary from hundreds of",
    "start": "1914010",
    "end": "1919020"
  },
  {
    "text": "milliseconds all the way up to minutes because the ability to effectively evaluate OLAP queries very much depends",
    "start": "1919020",
    "end": "1926280"
  },
  {
    "text": "on the shape of the data that you have underneath of it the second thing that",
    "start": "1926280",
    "end": "1931290"
  },
  {
    "text": "we really tried to focus on with Neptune is for it to really be an enterprise ready fully managed graph database",
    "start": "1931290",
    "end": "1938220"
  },
  {
    "text": "experience so at all levels regardless of the instance size that you choose to use with the Amazon Neptune you can",
    "start": "1938220",
    "end": "1945090"
  },
  {
    "text": "configure it with multi availability zone and high availability you can configure it with encryption at rest",
    "start": "1945090",
    "end": "1951290"
  },
  {
    "text": "using customer managed ie kms keys you can configure up to 15 different read",
    "start": "1951290",
    "end": "1957330"
  },
  {
    "text": "replicas and you can do that all through the console SDK or API so we wanted to make that a very very easy experience",
    "start": "1957330",
    "end": "1964050"
  },
  {
    "text": "for you also with Neptune you don't have to configure do things like configure",
    "start": "1964050",
    "end": "1970470"
  },
  {
    "text": "specific indices over different properties if you want to query them these kinds of things we do for you and",
    "start": "1970470",
    "end": "1976920"
  },
  {
    "text": "provide you a very good query experience without having to do a large amount of operational maintenance",
    "start": "1976920",
    "end": "1983530"
  },
  {
    "text": "and the last key feature for Neptune is that for Neptune both property graph and RDF are really first-class data models",
    "start": "1983530",
    "end": "1992020"
  },
  {
    "text": "that were supporting we provide an optimized career experience for both so you can choose the data model or API",
    "start": "1992020",
    "end": "1998980"
  },
  {
    "text": "that's best suited for your application and we talked to a lot of customers that have use cases for both in the single",
    "start": "1998980",
    "end": "2004860"
  },
  {
    "text": "organization so this is a high-level view of the Neptune architecture across",
    "start": "2004860",
    "end": "2012300"
  },
  {
    "start": "2007000",
    "end": "2085000"
  },
  {
    "text": "the top you'll see the different use cases that we're supporting the graph focused api's and then the blue box in",
    "start": "2012300",
    "end": "2020640"
  },
  {
    "text": "the middle is really the core of Neptune Neptune is a purpose-built",
    "start": "2020640",
    "end": "2026730"
  },
  {
    "text": "graph database engine that's durable an acid with immediate consistency it's",
    "start": "2026730",
    "end": "2031890"
  },
  {
    "text": "built on a cloud native storage layer that's shared with other database",
    "start": "2031890",
    "end": "2037230"
  },
  {
    "text": "services technology and that's what enables us to offer the H a the read",
    "start": "2037230",
    "end": "2042360"
  },
  {
    "text": "replication encryption at rest in addition to that we also provide a REST",
    "start": "2042360",
    "end": "2048120"
  },
  {
    "text": "API for you to do fast parallel bulk loads of graph data that you have stored in s3 buckets into Neptune and for",
    "start": "2048120",
    "end": "2056120"
  },
  {
    "text": "property graph we support a CSV based graph serialization which you guys saw",
    "start": "2056120",
    "end": "2061408"
  },
  {
    "text": "an example of earlier where you take nodes and node properties and serialize in CSV files and you take edge and edge",
    "start": "2061409",
    "end": "2068850"
  },
  {
    "text": "properties and serialize them in CSV files for the RDF data model we support",
    "start": "2068850",
    "end": "2074669"
  },
  {
    "text": "four different civilizations in the bulk loading capability something called turtle n triples and quads and RDF XML",
    "start": "2074669",
    "end": "2085280"
  },
  {
    "start": "2085000",
    "end": "2110000"
  },
  {
    "text": "so just as a quick summary of the fully managed aspects of Neptune we can see",
    "start": "2085520",
    "end": "2091350"
  },
  {
    "text": "that we it's completely operable via a console API and SDKs provides multiple",
    "start": "2091350",
    "end": "2097200"
  },
  {
    "text": "a-z high availability read replication encryption at rest encryption in transit",
    "start": "2097200",
    "end": "2102600"
  },
  {
    "text": "and backup restore point in time recovery all of these are easily done through the management console Neptune",
    "start": "2102600",
    "end": "2111270"
  },
  {
    "start": "2110000",
    "end": "2159000"
  },
  {
    "text": "supports V PC deployment when you an instance of Amazon Neptune within",
    "start": "2111270",
    "end": "2116619"
  },
  {
    "text": "your VPC you get three different things that show up you get a network interface that provides a tinkerer pop WebSocket",
    "start": "2116619",
    "end": "2123849"
  },
  {
    "text": "server with which you can use to connect your apache tinker pop clients we support apache tinker pop 3.3 o",
    "start": "2123849",
    "end": "2130359"
  },
  {
    "text": "currently you get a network interface that provides a rest endpoint that",
    "start": "2130359",
    "end": "2135789"
  },
  {
    "text": "implements the sparkle protocol 1:1 with which you can use to connect your RT of sparkle clients and then of course you",
    "start": "2135789",
    "end": "2142270"
  },
  {
    "text": "get a rest interface for that bulk loading capability where you can post JSON documents that describe specific",
    "start": "2142270",
    "end": "2150099"
  },
  {
    "text": "bulk loads in terms of the s3 bucket the iam credentials you'd like to use and",
    "start": "2150099",
    "end": "2155559"
  },
  {
    "text": "various parameters the underlying cloud",
    "start": "2155559",
    "end": "2162670"
  },
  {
    "start": "2159000",
    "end": "2197000"
  },
  {
    "text": "storage layer provides the read replication it also provides the underlying data protection and so within",
    "start": "2162670",
    "end": "2169960"
  },
  {
    "text": "the data your with it within this cloud native storage layer each piece of your data is replicated six times across",
    "start": "2169960",
    "end": "2177069"
  },
  {
    "text": "three availability zones with a quorum of four of six and this allows us to",
    "start": "2177069",
    "end": "2182680"
  },
  {
    "text": "provide very very low latency read replication typically less than ten milliseconds we have repeatable reads on",
    "start": "2182680",
    "end": "2191170"
  },
  {
    "text": "the read replicas and we have immediate consistency on the right master so I",
    "start": "2191170",
    "end": "2197859"
  },
  {
    "start": "2197000",
    "end": "2252000"
  },
  {
    "text": "talked a little bit about Thomson Reuters these are some other customers that are previewing Neptune we did a",
    "start": "2197859",
    "end": "2204279"
  },
  {
    "text": "reinvent talk this year with Siemens Siemens has a number of different graph use cases the ones we talked about this",
    "start": "2204279",
    "end": "2210549"
  },
  {
    "text": "at reinvent we're using modeling industrial designs as graph integrating",
    "start": "2210549",
    "end": "2216520"
  },
  {
    "text": "that with various support costs and then using the resulting knowledge graph to help them to estimate the how to bid and",
    "start": "2216520",
    "end": "2223329"
  },
  {
    "text": "price support contracts AstraZeneca is a life sciences firm they have graph use",
    "start": "2223329",
    "end": "2229270"
  },
  {
    "text": "cases ranging from drug discovery to research information FINRA is the US",
    "start": "2229270",
    "end": "2235900"
  },
  {
    "text": "financial regulatory agency they're analyzing various different stock and",
    "start": "2235900",
    "end": "2242079"
  },
  {
    "text": "equity transactions from the context of making sure that they comply with various regulatory require",
    "start": "2242079",
    "end": "2248140"
  },
  {
    "text": "and of course Amazon Alexa as well so",
    "start": "2248140",
    "end": "2253240"
  },
  {
    "text": "Neptune is in preview now it was announced that the reinvent conference in November you can sign up by visiting",
    "start": "2253240",
    "end": "2260620"
  },
  {
    "text": "the product page and requesting is providing your AWS account ID and",
    "start": "2260620",
    "end": "2265660"
  },
  {
    "text": "requesting access and we'd love to have you try it out we're planning to take neptune into general availability later",
    "start": "2265660",
    "end": "2271990"
  },
  {
    "text": "this year the preview is only in one region it's in the US ceased Northern",
    "start": "2271990",
    "end": "2277150"
  },
  {
    "text": "Virginia region IgA we plan to expand into three additional regions that will support us East Ohio us West Oregon and",
    "start": "2277150",
    "end": "2285070"
  },
  {
    "text": "then EU West Dublin the feature set is largely what's available in the preview",
    "start": "2285070",
    "end": "2290740"
  },
  {
    "text": "plus we're adding I am based authentication for access to the gremlin WebSocket server the sparkle protocol",
    "start": "2290740",
    "end": "2298300"
  },
  {
    "text": "one one rest endpoint and the bulk loader and we've already rolled out the",
    "start": "2298300",
    "end": "2303580"
  },
  {
    "text": "assumed roles bulk loading into the preview currently so thank you very much",
    "start": "2303580",
    "end": "2309340"
  },
  {
    "start": "2308000",
    "end": "2319000"
  },
  {
    "text": "and we'd love to have you try out depth in thank you [Applause]",
    "start": "2309340",
    "end": "2319579"
  }
]