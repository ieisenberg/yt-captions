[
  {
    "start": "0",
    "end": "32000"
  },
  {
    "text": "hi my name is sundar rahavan i'm a senior database specialist solutions architect with aws",
    "start": "1680",
    "end": "7200"
  },
  {
    "text": "today i'm here to talk about how you can integrate existing database resource authorization",
    "start": "7200",
    "end": "13040"
  },
  {
    "text": "with aws iam and amazon rds proxy to achieve a centralized",
    "start": "13040",
    "end": "18320"
  },
  {
    "text": "authorization management model before getting to know more about the",
    "start": "18320",
    "end": "23519"
  },
  {
    "text": "solution and a small demo let's look at the services that is involved in this",
    "start": "23519",
    "end": "31840"
  },
  {
    "start": "32000",
    "end": "32000"
  },
  {
    "text": "to begin with amazon rds rs is one of the first aw services launched back in 2009. we have more than",
    "start": "32559",
    "end": "39760"
  },
  {
    "text": "a decade of experience operating and scaling database workloads for customers in the cloud amazon rds takes over many of the",
    "start": "39760",
    "end": "46559"
  },
  {
    "text": "difficult and tedious management tasks of a relational database such as os patching",
    "start": "46559",
    "end": "52239"
  },
  {
    "text": "hardware maintenance setting up and provisioning encrypting in the data addressed in in",
    "start": "52239",
    "end": "57280"
  },
  {
    "text": "transit backing up the database on regular basis setting up notification setting up replication higher will be high",
    "start": "57280",
    "end": "64158"
  },
  {
    "text": "availability across availability zone or region scaling apart down a database in alignment with",
    "start": "64159",
    "end": "70560"
  },
  {
    "text": "the demand of your application it frees you to focus on your application so you can",
    "start": "70560",
    "end": "76080"
  },
  {
    "text": "give them the fast performance high availability and security and compatibility that they need",
    "start": "76080",
    "end": "83118"
  },
  {
    "text": "as customers move more and more workload to the cloud and cloud-native databases it also",
    "start": "85119",
    "end": "91040"
  },
  {
    "text": "brings new challenge with the ability to scale quickly also adds complexity",
    "start": "91040",
    "end": "97119"
  },
  {
    "text": "especially modern event-based applications such as those built with a serverless or",
    "start": "97119",
    "end": "102320"
  },
  {
    "text": "event-driven architecture which could result in hundreds or even thousands of connections to the database",
    "start": "102320",
    "end": "109520"
  },
  {
    "text": "it also equally true for properly architected more traditional applications which can",
    "start": "109520",
    "end": "115200"
  },
  {
    "text": "open and close thousands of connections simultaneously or simply keep the connections open",
    "start": "115200",
    "end": "120560"
  },
  {
    "text": "for extended periods of time relational databases have a finite amount of resources namely cpu",
    "start": "120560",
    "end": "127520"
  },
  {
    "text": "memory and open and closing of the connections takes resources",
    "start": "127520",
    "end": "132879"
  },
  {
    "text": "especially when connections are at scale it's not ideal to utilize these resources for connection setup and",
    "start": "132879",
    "end": "140239"
  },
  {
    "text": "teardown instead we could rather focus on running queries to serve your end",
    "start": "140239",
    "end": "146000"
  },
  {
    "text": "users moreover as the count of database connections increases",
    "start": "146000",
    "end": "151920"
  },
  {
    "text": "the free memory available for os cash goes down this causes the os to remove data pages",
    "start": "151920",
    "end": "158640"
  },
  {
    "text": "or blocks from the cache the next lookup of these pages results",
    "start": "158640",
    "end": "164319"
  },
  {
    "text": "in a fetch from the storage volume and is thus just for slower",
    "start": "164319",
    "end": "169599"
  },
  {
    "text": "if the instance is a low on free memory it starts using the swap space which is again",
    "start": "169599",
    "end": "175040"
  },
  {
    "text": "on the storage volume and therefore it's going to be slow this is where the database proxy is",
    "start": "175040",
    "end": "180400"
  },
  {
    "text": "coming to help so how are database is addressing this issue a database proxy can create pull of db",
    "start": "180400",
    "end": "187519"
  },
  {
    "text": "connections to the database and then utilize this pool to communicate with the database through",
    "start": "187519",
    "end": "192959"
  },
  {
    "text": "a smaller and more manageable number of connections it's a software that could be installed",
    "start": "192959",
    "end": "198400"
  },
  {
    "text": "on ec2 mission and managed however a self-managed proxy can require",
    "start": "198400",
    "end": "204480"
  },
  {
    "text": "quite a bit of heavy lifting including having to deploy it across multiple acs",
    "start": "204480",
    "end": "209920"
  },
  {
    "text": "scaling it patching it maintenance policies etc also the connection pooler would become",
    "start": "209920",
    "end": "216319"
  },
  {
    "text": "a single point of failure this is where managed proxy come into",
    "start": "216319",
    "end": "222640"
  },
  {
    "text": "picture audio proxy is a fully managed highly available and easy to use database proxy",
    "start": "224840",
    "end": "231760"
  },
  {
    "text": "feature of rds that enables your applications to improve scalability by pooling and sharing",
    "start": "231760",
    "end": "239040"
  },
  {
    "text": "database connections it also improves availability by reducing database failover times by up to 66",
    "start": "239040",
    "end": "246720"
  },
  {
    "text": "percent and preserving application connections during this failover",
    "start": "246720",
    "end": "252319"
  },
  {
    "text": "also it improves security by optionally enforcing aws am authentication to database",
    "start": "252319",
    "end": "259359"
  },
  {
    "text": "and securely storing credentials in aws secrets manager",
    "start": "259359",
    "end": "264720"
  },
  {
    "text": "note that amazon rds proxy is now generally available for aurora my sequel aura postgres rds mysql",
    "start": "264720",
    "end": "271440"
  },
  {
    "text": "and rds postgres",
    "start": "271440",
    "end": "274400"
  },
  {
    "text": "rds proxy transforms your approach to building modern serverless applications that leverage",
    "start": "276960",
    "end": "282880"
  },
  {
    "text": "the power and simplicity of relational databases first rds proxy enables serverless",
    "start": "282880",
    "end": "288639"
  },
  {
    "text": "applications to scale efficiently by pooling and reusing database connections",
    "start": "288639",
    "end": "294800"
  },
  {
    "text": "second with rds proxy you no longer need to handle database credentials in your",
    "start": "294800",
    "end": "300080"
  },
  {
    "text": "lambda code you can use the iam execution role associated with your lambda functions to",
    "start": "300080",
    "end": "306080"
  },
  {
    "text": "authenticate with rds proxy and your database third you don't need to manage any new",
    "start": "306080",
    "end": "313360"
  },
  {
    "text": "infrastructure or code to utilize the full potential of serverless applications backed by relational databases",
    "start": "313360",
    "end": "321199"
  },
  {
    "text": "audios proxy is fully managed it is right size based on the application demand",
    "start": "321199",
    "end": "329280"
  },
  {
    "start": "330000",
    "end": "330000"
  },
  {
    "text": "so how ardis proxy works each proxy handles connections to a single rds",
    "start": "331680",
    "end": "337120"
  },
  {
    "text": "database instance or a raw database cluster rds proxy handles the network traffic between the",
    "start": "337120",
    "end": "343039"
  },
  {
    "text": "client application and the database it does so in an active way",
    "start": "343039",
    "end": "348160"
  },
  {
    "text": "first by understanding the database protocol it then adjusts its behavior based on the sql",
    "start": "348160",
    "end": "354080"
  },
  {
    "text": "operations from your application and then results set from the database",
    "start": "354080",
    "end": "359440"
  },
  {
    "text": "the connections that a proxy keeps open and available for your database application to use forms",
    "start": "359440",
    "end": "366720"
  },
  {
    "text": "the connection pool rds proxy makes applications more resilient",
    "start": "366720",
    "end": "372639"
  },
  {
    "text": "to the database failures by automatically connecting to a standby database instance while preserving application connections",
    "start": "372639",
    "end": "380880"
  },
  {
    "text": "rds proxy uses the existing rds security mechanisms such as ssl and aws identity and access",
    "start": "380880",
    "end": "387280"
  },
  {
    "text": "management rds proxy can act as an additional layer of security between",
    "start": "387280",
    "end": "393039"
  },
  {
    "text": "client applications and the underlying database for example you can connect to the proxy using tls",
    "start": "393039",
    "end": "400160"
  },
  {
    "text": "1.2 even if the underlying database instance supports only tls 1 or 1.1 a proxy has a default endpoint",
    "start": "400160",
    "end": "409840"
  },
  {
    "start": "407000",
    "end": "407000"
  },
  {
    "text": "you connect to this endpoint when you work with the rds database instance or aura database cluster",
    "start": "409840",
    "end": "415680"
  },
  {
    "text": "instead of connecting to the read or right endpoint that connects directly to the instance or cluster the special purpose",
    "start": "415680",
    "end": "422960"
  },
  {
    "text": "endpoint for an aura cluster is still available so what are the benefits of using an rds proxy endpoint you can use",
    "start": "422960",
    "end": "430720"
  },
  {
    "text": "multiple endpoints with a proxy to monitor and troubleshoot connections from different applications independently",
    "start": "430720",
    "end": "436639"
  },
  {
    "text": "you can use reader endpoints with raw database clusters to improve read scalability and",
    "start": "436639",
    "end": "442800"
  },
  {
    "text": "high availability for your query intensive applications you can use the cross vpc",
    "start": "442800",
    "end": "448080"
  },
  {
    "text": "endpoints to allow access to databases in 1vpc from resources such as an amazon ec2 instance in a different",
    "start": "448080",
    "end": "454479"
  },
  {
    "text": "vpc also working with that rds proxy endpoints involves the same kind of",
    "start": "454479",
    "end": "459680"
  },
  {
    "text": "procedure as with aurora database clusters and reader endpoints and rds instance endpoints",
    "start": "459680",
    "end": "466960"
  },
  {
    "text": "by default the endpoints that you connect to when you use rds proxy with an aura cluster has a",
    "start": "466960",
    "end": "472319"
  },
  {
    "text": "read write capability as a consequence this endpoint sends all requests to the writer instance of the",
    "start": "472319",
    "end": "478080"
  },
  {
    "text": "cluster and all of those connections count against the max underscore connections value of the writer instance",
    "start": "478080",
    "end": "484479"
  },
  {
    "text": "if your proxy is associated with an aura database cluster you can create additional read write or read",
    "start": "484479",
    "end": "490400"
  },
  {
    "text": "only endpoints for that proxy you can use the read-only endpoints with your proxy for read-only",
    "start": "490400",
    "end": "496639"
  },
  {
    "text": "queries the same way that you use a reader endpoint for an aura provision cluster",
    "start": "496639",
    "end": "502400"
  },
  {
    "text": "doing so helps you to take advantage of the read scalability of an order cluster with one or",
    "start": "502400",
    "end": "507680"
  },
  {
    "text": "more readers in the error cluster you can run more simultaneous queries",
    "start": "507680",
    "end": "513120"
  },
  {
    "text": "and make more simultaneous connections by using the read-only endpoint and adding more reader db instance to",
    "start": "513120",
    "end": "519279"
  },
  {
    "text": "your error cluster as needed there are some limitations with proxy and points as well that you might want",
    "start": "519279",
    "end": "525279"
  },
  {
    "text": "to be aware of each proxy has a default endpoint that you can modify",
    "start": "525279",
    "end": "530800"
  },
  {
    "text": "but not create or delete the maximum number of user defined endpoints for a proxy is 20 thus a proxy can have",
    "start": "530800",
    "end": "538320"
  },
  {
    "text": "up to 21 endpoints the default endpoints plus 20 that you can create",
    "start": "538320",
    "end": "543600"
  },
  {
    "text": "when you associate additional endpoints to the proxy rds proxy automatically determines which db instances in your",
    "start": "543600",
    "end": "550320"
  },
  {
    "text": "cluster to use for each endpoint let's look at some concept about the",
    "start": "550320",
    "end": "555360"
  },
  {
    "start": "553000",
    "end": "553000"
  },
  {
    "text": "connection pooling in rds proxy the connections that a proxy keeps open and available for your database",
    "start": "555360",
    "end": "561440"
  },
  {
    "text": "application to use make up the connection pool by default rds proxy can reuse a connection after",
    "start": "561440",
    "end": "568000"
  },
  {
    "text": "each transaction in your session this transaction level reuse is called multiplexing",
    "start": "568000",
    "end": "574000"
  },
  {
    "text": "when rds proxy temporarily removes the connection from the connection pool to reuse it that",
    "start": "574000",
    "end": "579920"
  },
  {
    "text": "operation is called borrowing a connection when it is safe to do so rdx proxy returns that connection to the",
    "start": "579920",
    "end": "586720"
  },
  {
    "text": "connection pool in some cases rds proxy can't be sure that it is safe to reuse a database",
    "start": "586720",
    "end": "592880"
  },
  {
    "text": "connection outside the current session in these cases it keeps that session on the same connection until the session",
    "start": "592880",
    "end": "599360"
  },
  {
    "text": "ends this fallback behavior is called pinning each proxy performs connection pooling",
    "start": "599360",
    "end": "606480"
  },
  {
    "text": "for the writer instance of its associated rds or raw database connection pooling is an optimization",
    "start": "606480",
    "end": "612880"
  },
  {
    "text": "that reduces the overhead associated with opening and closing connections and with",
    "start": "612880",
    "end": "618720"
  },
  {
    "text": "keeping many connections open simultaneously this overhead includes memory needed to",
    "start": "618720",
    "end": "624160"
  },
  {
    "text": "handle each new connection it also involves cpu overhead to close each connection",
    "start": "624160",
    "end": "629519"
  },
  {
    "text": "open a new connection such as tls ssl handshaking authentication negotiating capabilities",
    "start": "629519",
    "end": "635839"
  },
  {
    "text": "and so on connection pooling simplifies your application logic you don't need to",
    "start": "635839",
    "end": "640880"
  },
  {
    "text": "write application code to minimize the number of simultaneous open connections",
    "start": "640880",
    "end": "647440"
  },
  {
    "text": "each proxy also performs connection multiplexing also known as connection reuse with multiplexing",
    "start": "647440",
    "end": "654480"
  },
  {
    "text": "rds proxy perform all the operations for a transaction using one underlying database connection",
    "start": "654480",
    "end": "661120"
  },
  {
    "text": "then can use a different connection for the next transaction you can open",
    "start": "661120",
    "end": "666959"
  },
  {
    "text": "many simultaneous connections to the proxy and the proxy keeps a smaller number of connections open to the database",
    "start": "666959",
    "end": "673200"
  },
  {
    "text": "instance of the cluster doing so further minimize the memory overhead for connections on",
    "start": "673200",
    "end": "678640"
  },
  {
    "text": "the database server this technique also reduces the chances of too many connections errors",
    "start": "678640",
    "end": "685600"
  },
  {
    "text": "as i mentioned before here is the reference architecture for having the client and the proxy along",
    "start": "685600",
    "end": "691279"
  },
  {
    "text": "with the database in different vpc your audio proxy must be in the same bpc",
    "start": "691279",
    "end": "696720"
  },
  {
    "text": "as the database the proxy cannot be publicly accessible although the database can be",
    "start": "696720",
    "end": "702959"
  },
  {
    "text": "so for our database clusters you can enable cross vpc access by creating an additional endpoint",
    "start": "702959",
    "end": "708560"
  },
  {
    "text": "for a proxy and specifying different vpc subnets and security groups with that endpoint",
    "start": "708560",
    "end": "715040"
  },
  {
    "text": "keep in mind you cannot use rds proxy with a vpc that has dedicated tenancy",
    "start": "715040",
    "end": "722480"
  },
  {
    "text": "so the next service that i will be using in the demo is aws identity and access management",
    "start": "724639",
    "end": "731839"
  },
  {
    "start": "732000",
    "end": "732000"
  },
  {
    "text": "rds proxy supports iem-based authentication to offload credential management from applications",
    "start": "734079",
    "end": "740880"
  },
  {
    "text": "instead of specifying a username and password while establishing connections you can use an im execution role",
    "start": "740880",
    "end": "747360"
  },
  {
    "text": "associated with your lambda function or ec2 instance to authenticate",
    "start": "747360",
    "end": "752480"
  },
  {
    "text": "rds proxy rds proxy also allows you to enforce im authentication",
    "start": "752480",
    "end": "757760"
  },
  {
    "text": "to help improve the security posture of your application database credentials used by the rds",
    "start": "757760",
    "end": "764240"
  },
  {
    "text": "proxy in turn are stored in database sequence manager alternatively you can connect with rds",
    "start": "764240",
    "end": "770800"
  },
  {
    "text": "proxy the same way you connect with your database the username and password you supply for",
    "start": "770800",
    "end": "776079"
  },
  {
    "text": "establishing connections with rds proxy are matched with the credentials stored in the sequence manager and then",
    "start": "776079",
    "end": "781440"
  },
  {
    "text": "utilized for creating connections to the underlying database authentications is achieved by obtaining",
    "start": "781440",
    "end": "787920"
  },
  {
    "text": "a temporary token which is valid for 15 minutes when it comes to rds or our postgres the",
    "start": "787920",
    "end": "793279"
  },
  {
    "text": "connection per second is limited by the type of database instance that you are using so the next service is",
    "start": "793279",
    "end": "801760"
  },
  {
    "text": "aws secrets manager what is aws secrets manager aws secrets",
    "start": "801760",
    "end": "808560"
  },
  {
    "start": "804000",
    "end": "804000"
  },
  {
    "text": "manager is a secrets management service that helps you protect access to your applications",
    "start": "808560",
    "end": "814560"
  },
  {
    "text": "services and it resources using secrets manager you can secure and",
    "start": "814560",
    "end": "820000"
  },
  {
    "text": "manage secrets used to access resources in the aws cloud on third party services",
    "start": "820000",
    "end": "826240"
  },
  {
    "text": "and on-premises answers to the questions such as these",
    "start": "826240",
    "end": "832639"
  },
  {
    "text": "lies with the life cycle management of the secret which is provided by the secrets manager",
    "start": "832639",
    "end": "838639"
  },
  {
    "text": "you can encrypt secrets at rest to reduce the likelihood of unauthorized users viewing sensitive",
    "start": "838639",
    "end": "844560"
  },
  {
    "text": "information to retrieve secrets you simply replace the secrets in plain text in your application with",
    "start": "844560",
    "end": "852240"
  },
  {
    "text": "code to pull in these secrets programmatically using secrets managers api",
    "start": "852240",
    "end": "858800"
  },
  {
    "text": "you use aws iam policies to control which users and applications can access",
    "start": "858800",
    "end": "864079"
  },
  {
    "text": "these secrets you can rotate password on a schedule or on demand",
    "start": "864079",
    "end": "869279"
  },
  {
    "text": "for supported database types hosted on aws without a risk of impacting application",
    "start": "869279",
    "end": "875199"
  },
  {
    "text": "you can extend this functionality to rotate other seekers such as passwords for",
    "start": "875199",
    "end": "880800"
  },
  {
    "text": "oracle database hosted on amazon ec2 or oauth refresh tokens by modifying sample lambda functions",
    "start": "880800",
    "end": "888639"
  },
  {
    "text": "you can also audit and monitor secrets because secrets manager integrates with aws cloudtrail amazon cloudwatch and",
    "start": "888639",
    "end": "896160"
  },
  {
    "text": "amazon sns",
    "start": "896160",
    "end": "899839"
  },
  {
    "text": "you can manage secrets such as database credentials on-premise resource credentials sas",
    "start": "901839",
    "end": "907760"
  },
  {
    "text": "applications credentials third-party apis and ssh keys",
    "start": "907760",
    "end": "912880"
  },
  {
    "text": "secret manager enables you to store a json document which allows you to manage any text",
    "start": "912880",
    "end": "919440"
  },
  {
    "text": "blurb that is 64 kilobytes or smaller you can natively rotate",
    "start": "919440",
    "end": "925040"
  },
  {
    "text": "credentials for rds amazon document db amazon redshift",
    "start": "925040",
    "end": "930720"
  },
  {
    "text": "redis auth tokens for elastic cache admin credentials for active directory",
    "start": "930720",
    "end": "937120"
  },
  {
    "text": "let's now look at how authorizations work in postgres",
    "start": "937120",
    "end": "942399"
  },
  {
    "text": "postgres postgresql is one of the most popular open source relational database",
    "start": "943279",
    "end": "948560"
  },
  {
    "text": "systems with more than 30 years of development work postgres has proven to be highly",
    "start": "948560",
    "end": "955040"
  },
  {
    "text": "reliable and robust database that can handle a large number of complicated data workloads",
    "start": "955040",
    "end": "960720"
  },
  {
    "text": "with postgres you can create users and roles with granular access and permissions",
    "start": "960720",
    "end": "966320"
  },
  {
    "text": "the new user or role must be selectively granted the required permissions for each object",
    "start": "966320",
    "end": "973920"
  },
  {
    "text": "this gives a lot of power to the end user so we put together a demo and then we'll",
    "start": "973920",
    "end": "979680"
  },
  {
    "text": "walk through this demo scenario and then explain how this could be achieved",
    "start": "979680",
    "end": "985440"
  },
  {
    "start": "985000",
    "end": "985000"
  },
  {
    "text": "so here is a model where we have some scenario like this we have a postgres instance where we have two",
    "start": "985839",
    "end": "991440"
  },
  {
    "text": "different database management database and finance database under which you have multiple",
    "start": "991440",
    "end": "996480"
  },
  {
    "text": "schema so the schema is more of a soft definition in postgres where it's more",
    "start": "996480",
    "end": "1002560"
  },
  {
    "text": "like a search path under which you have multiple tables residing across the board across the",
    "start": "1002560",
    "end": "1009440"
  },
  {
    "text": "database you have users or roles who have access to these databases so this is a",
    "start": "1009440",
    "end": "1016800"
  },
  {
    "text": "sample postgres authentication authorization model which we are going to use and i'll be showing a demo for this in a",
    "start": "1016800",
    "end": "1023360"
  },
  {
    "text": "while but this how the high level is going to look it's going to integrate with im",
    "start": "1023360",
    "end": "1028720"
  },
  {
    "text": "identity and access management to achieve that centralized authorization model",
    "start": "1028720",
    "end": "1034319"
  },
  {
    "text": "so here's a scenario four different scenarios we are going to address so the first scenario is about native",
    "start": "1035520",
    "end": "1041520"
  },
  {
    "text": "authentication to the database through lambda so you have let's say as an application that issues",
    "start": "1041520",
    "end": "1047280"
  },
  {
    "text": "call to the lambda through api and the lambda is going to call the secrets managed to get the password and log into",
    "start": "1047280",
    "end": "1052559"
  },
  {
    "text": "the database and does something the second scenario is about iam authentication with im enabled at",
    "start": "1052559",
    "end": "1059760"
  },
  {
    "text": "the database site to lambda so the users will come and because they are going to assume a role",
    "start": "1059760",
    "end": "1065440"
  },
  {
    "text": "and take a role from the the iam authentication and with the role they'll be able to access the database",
    "start": "1065440",
    "end": "1071360"
  },
  {
    "text": "through the lambda the third scenario is where we are bringing in the rds proxy in",
    "start": "1071360",
    "end": "1076480"
  },
  {
    "text": "this case so native authentication will retrieve the password from the secrets manager but through the rds proxies",
    "start": "1076480",
    "end": "1083840"
  },
  {
    "text": "lambda will connect to the database and retrieve the information and finally im authentications and secrets manager",
    "start": "1083840",
    "end": "1090799"
  },
  {
    "text": "with proxy and this is where we are going to show you how the centralized authorization is going to come into play",
    "start": "1090799",
    "end": "1098640"
  },
  {
    "text": "so if you have to explain these two diagrams here is the high level picture so you have four different scenarios the first one",
    "start": "1100240",
    "end": "1107200"
  },
  {
    "text": "is iam authentication with the lambda and then directly accessing the database",
    "start": "1107200",
    "end": "1112480"
  },
  {
    "start": "1112000",
    "end": "1112000"
  },
  {
    "text": "the first use case second is the native authentication retrieves the password from the secrets manager and connects to database",
    "start": "1112480",
    "end": "1119360"
  },
  {
    "text": "third one is the secrets manager getting the password and connecting to the database through the rds proxy and",
    "start": "1119360",
    "end": "1125520"
  },
  {
    "text": "finally this is a place where you have multiple users to set up",
    "start": "1125520",
    "end": "1131280"
  },
  {
    "text": "users with appropriate role they can access the rds proxy and because rds",
    "start": "1131280",
    "end": "1136880"
  },
  {
    "text": "proxy has access to the database with the secrets manager properly defined and these roles will allow them to",
    "start": "1136880",
    "end": "1142400"
  },
  {
    "text": "connect to the appropriate database we'll also show a demo of a rogue user",
    "start": "1142400",
    "end": "1148240"
  },
  {
    "text": "meaning a user from the finance user trying to access the database and see how it would end up",
    "start": "1148240",
    "end": "1153440"
  },
  {
    "text": "in a permission denied state so to set this demo we have to create",
    "start": "1153440",
    "end": "1160000"
  },
  {
    "start": "1159000",
    "end": "1159000"
  },
  {
    "text": "certain roles to set up roles i would say so the first role we created in this demo is to allow the",
    "start": "1160000",
    "end": "1168240"
  },
  {
    "text": "role assumed by the proxy to have access to the secrets manager this is where the password is",
    "start": "1168240",
    "end": "1174240"
  },
  {
    "text": "stored this is what i mean by when i say that you have a secret store but it's not just encrypted at trust and",
    "start": "1174240",
    "end": "1180080"
  },
  {
    "text": "transit but you can also define roles who have access to the secrets and this is how we control so the rds proxy",
    "start": "1180080",
    "end": "1186559"
  },
  {
    "text": "defined here have access to the secrets manager and you can access it",
    "start": "1186559",
    "end": "1193200"
  },
  {
    "text": "and here are the set of roles lambda will assume so that they will be able to have access",
    "start": "1193200",
    "end": "1199120"
  },
  {
    "text": "to the secrets manager so in cases where the lambda access secrets management",
    "start": "1199120",
    "end": "1204320"
  },
  {
    "text": "connects to the database and it does the same thing so",
    "start": "1204320",
    "end": "1209679"
  },
  {
    "text": "with this we will show you the demo now and then we'll walk through that and then we'll come back and then have some more points",
    "start": "1209679",
    "end": "1216799"
  },
  {
    "text": "we can discuss about the value of integrating all these three services together and",
    "start": "1216799",
    "end": "1222159"
  },
  {
    "text": "end up getting a centralized authorization model [Music]",
    "start": "1222159",
    "end": "1229600"
  },
  {
    "text": "so as you can see in when i was explaining the the demo scenario there are several",
    "start": "1229600",
    "end": "1235520"
  },
  {
    "text": "moving parts so what i did was i put together a script to create all the components needed for the demo and then",
    "start": "1235520",
    "end": "1242080"
  },
  {
    "text": "i had them uh with the configuration file so i have a script and then also a",
    "start": "1242080",
    "end": "1248960"
  },
  {
    "text": "configuration file so let's look at the configuration file first uh this takes several input and then you",
    "start": "1248960",
    "end": "1254559"
  },
  {
    "text": "could pass it as a parameter and then i have it as a script but in my case i just have to pass the",
    "start": "1254559",
    "end": "1260240"
  },
  {
    "text": "database subnet group where the database will be created with all the details so i run the script and it will show me",
    "start": "1260240",
    "end": "1268080"
  },
  {
    "text": "what it is going to do i will say that take it from the environment i have the aws",
    "start": "1268080",
    "end": "1274000"
  },
  {
    "text": "configure command run and then it has the environment set there and then when i do this it",
    "start": "1274000",
    "end": "1280559"
  },
  {
    "text": "talks about all the resources this is going to create so this is obviously going to create an rds",
    "start": "1280559",
    "end": "1286640"
  },
  {
    "text": "instance and then followed by the two proxies the reason why this script creates two",
    "start": "1286640",
    "end": "1292159"
  },
  {
    "text": "proxies is because we have a set of users connecting to the database through the username password stored in the secrets",
    "start": "1292159",
    "end": "1298720"
  },
  {
    "text": "manager and there's a set of connections that's going through the proxy",
    "start": "1298720",
    "end": "1304720"
  },
  {
    "text": "a proxy cannot have both you can have either this iam authentication or to the password secrets manager so even",
    "start": "1304720",
    "end": "1311919"
  },
  {
    "text": "though database is the same you need to have two different proxies to accommodate that you could connect to the database",
    "start": "1311919",
    "end": "1317760"
  },
  {
    "text": "directly if you want but you're trying to avoid connecting to the database directly that's the whole purpose here",
    "start": "1317760",
    "end": "1323600"
  },
  {
    "text": "and then we have secrets manager secrets uh i create one to take the master password",
    "start": "1323600",
    "end": "1329840"
  },
  {
    "text": "when i create the rds instance the rest of them are all the user that is going to be used",
    "start": "1329840",
    "end": "1335039"
  },
  {
    "text": "to connect to the database by various means like i mentioned before then we have roles that i mentioned",
    "start": "1335039",
    "end": "1341679"
  },
  {
    "text": "before so these are the roles so two roles that will allow the uh rds",
    "start": "1341679",
    "end": "1349600"
  },
  {
    "text": "proxy to access a secret manager and also the roles that are needed for the lambda functions to",
    "start": "1349600",
    "end": "1355440"
  },
  {
    "text": "access the secrets manager and then also followed by lambda functions um so one for the",
    "start": "1355440",
    "end": "1362400"
  },
  {
    "text": "directly connecting to the database that will access the sequence manager and one directly",
    "start": "1362400",
    "end": "1368799"
  },
  {
    "text": "connecting to the database using the iam and then the rest for connecting",
    "start": "1368799",
    "end": "1374720"
  },
  {
    "text": "to the proxy directly database using the secrets manager and the rest are the one that we are interested in",
    "start": "1374720",
    "end": "1381280"
  },
  {
    "text": "which is a set of users two set of users i am users connecting to through the",
    "start": "1381280",
    "end": "1386960"
  },
  {
    "text": "proxy to the database and it will be directed to the appropriate database there's also one extra lambda functions",
    "start": "1386960",
    "end": "1393280"
  },
  {
    "text": "that will i will show you that how if a new crisscross especially when a finance",
    "start": "1393280",
    "end": "1398480"
  },
  {
    "text": "department uses content to the management database i need to throw an error we'll also show this through the pl sql",
    "start": "1398480",
    "end": "1405280"
  },
  {
    "text": "and p sql and then show how it works so let's first create the necessary resources needed",
    "start": "1405280",
    "end": "1411039"
  },
  {
    "text": "for the for the demo so i'll say continue and then take it",
    "start": "1411039",
    "end": "1416240"
  },
  {
    "text": "from the infinite configuration file",
    "start": "1416240",
    "end": "1420240"
  },
  {
    "text": "so it's creating all the necessary resources so we'll pause it for a while and then once everything is done then i'll show this",
    "start": "1424640",
    "end": "1430000"
  },
  {
    "text": "quick so the database instance creation is",
    "start": "1430000",
    "end": "1436720"
  },
  {
    "text": "completed and it also completed the rest of the stuff so it created and then",
    "start": "1436720",
    "end": "1441919"
  },
  {
    "text": "we have the database instance created here and also it uh proceeded with the creation of the",
    "start": "1441919",
    "end": "1447120"
  },
  {
    "text": "database objects which will be used for the testing",
    "start": "1447120",
    "end": "1452480"
  },
  {
    "text": "so for example it created a test database it created management and finance",
    "start": "1452640",
    "end": "1460320"
  },
  {
    "text": "database and then it also created the users that are that have the privilege to connect to these database at the database level",
    "start": "1460320",
    "end": "1467360"
  },
  {
    "text": "and then some objects within this uh each each of this database",
    "start": "1467360",
    "end": "1473840"
  },
  {
    "text": "then it went on to create uh the produce proxy and the necessary secrets that we talked",
    "start": "1474000",
    "end": "1480400"
  },
  {
    "text": "about and also the roles and then all the lambdas that are going to be",
    "start": "1480400",
    "end": "1487520"
  },
  {
    "text": "used for testing so now let's run through each of the scenario and show you how it connects",
    "start": "1487520",
    "end": "1493360"
  },
  {
    "text": "and then what it does and also corresponding lambda that will do the same thing",
    "start": "1493360",
    "end": "1500080"
  },
  {
    "text": "also go through the console and then see what objects it created so it created this instance",
    "start": "1500080",
    "end": "1505520"
  },
  {
    "text": "and it created two proxies that i mentioned a bunch of lambdas that i will go",
    "start": "1505520",
    "end": "1512799"
  },
  {
    "text": "through and then test this and then the secrets manager that i mentioned are the secrets",
    "start": "1512799",
    "end": "1518000"
  },
  {
    "text": "actually the first one is a temporary uh the call is temporary because that's where i",
    "start": "1518000",
    "end": "1523600"
  },
  {
    "text": "picked up the master user password for the database so that will not be used in the demo",
    "start": "1523600",
    "end": "1529120"
  },
  {
    "text": "also and then all the roles that are needed for lambda and for the proxy as well",
    "start": "1529120",
    "end": "1536799"
  },
  {
    "text": "so these are the lambdas that got created by the script so let's go through this each of this lambda and then see what it has and how",
    "start": "1536960",
    "end": "1543440"
  },
  {
    "text": "it connects to the database so to start with scenario number one which is",
    "start": "1543440",
    "end": "1549919"
  },
  {
    "start": "1549000",
    "end": "1549000"
  },
  {
    "text": "this where the lambda connects to the database after getting a temporary password from the am",
    "start": "1549919",
    "end": "1557600"
  },
  {
    "text": "the lambda that corresponds to this scenario 1 is this so let's open this lambda",
    "start": "1558640",
    "end": "1565460"
  },
  {
    "text": "[Music] and then we'll do a test execution of this so to create a test",
    "start": "1565460",
    "end": "1571120"
  },
  {
    "text": "execution of this lambda then we need to add something a test case and then here this is how",
    "start": "1571120",
    "end": "1576799"
  },
  {
    "text": "you create a test and then i just created a temporary test here so so before we run we'll quickly",
    "start": "1576799",
    "end": "1582720"
  },
  {
    "text": "look into the permission it has so the way the iam authentication to the database",
    "start": "1582720",
    "end": "1587919"
  },
  {
    "text": "is going to work is that for this particular lambda this lambda has a role and then the role",
    "start": "1587919",
    "end": "1594320"
  },
  {
    "text": "will allow this lambda to communicate to the proxy or to the database and get the permission and secrets and",
    "start": "1594320",
    "end": "1601440"
  },
  {
    "text": "connect to the database so the permission is given in the form of a role and that role is called",
    "start": "1601440",
    "end": "1606799"
  },
  {
    "text": "lambda am direct rule and then if we click this and it will open up the role what role",
    "start": "1606799",
    "end": "1612880"
  },
  {
    "text": "it is and then let's see the policy that role has",
    "start": "1612880",
    "end": "1618799"
  },
  {
    "text": "this role has connecting allow the effect of effect of allow and it connect and",
    "start": "1618799",
    "end": "1624960"
  },
  {
    "text": "connects to this rds instance and the db user is this database",
    "start": "1624960",
    "end": "1633120"
  },
  {
    "text": "this is a dbid and then this is the the database user so that's how the permission is",
    "start": "1633120",
    "end": "1639200"
  },
  {
    "text": "established and that's how it goes and connects to this so if i go and run this connection",
    "start": "1639200",
    "end": "1645600"
  },
  {
    "text": "sorry the lambda script so it ran the lambda script and then it",
    "start": "1649520",
    "end": "1654640"
  },
  {
    "text": "connects to this database this is a the rds postgres database endpoint and",
    "start": "1654640",
    "end": "1660480"
  },
  {
    "text": "can actually use that db user x and this is the query that it just executed and then let's came out with",
    "start": "1660480",
    "end": "1665600"
  },
  {
    "text": "the result and that's how the lambda execution can be tracked and then it can",
    "start": "1665600",
    "end": "1672080"
  },
  {
    "text": "be displayed here the console now let's look at the scenario number two which is",
    "start": "1672080",
    "end": "1679840"
  },
  {
    "start": "1680000",
    "end": "1680000"
  },
  {
    "text": "this where the lambda actually connects to the database after getting the seek password from the",
    "start": "1681360",
    "end": "1687200"
  },
  {
    "text": "secrets manager and then directly connects to the database with the database user and let's see how this lambda functions",
    "start": "1687200",
    "end": "1693679"
  },
  {
    "text": "there the lambda that corresponds to this scenario number two",
    "start": "1693679",
    "end": "1698880"
  },
  {
    "text": "is this one so let's open this up and then as we did before i also created",
    "start": "1698880",
    "end": "1704880"
  },
  {
    "text": "another test here and i'm going to run this test but prior to the test let's look at the permission",
    "start": "1704880",
    "end": "1710880"
  },
  {
    "text": "this has a role called lambda native directoral and if i open this up and it will",
    "start": "1710880",
    "end": "1718080"
  },
  {
    "text": "tell you it has a policy that's called native direct policy and then by expanding the",
    "start": "1718080",
    "end": "1724880"
  },
  {
    "text": "policy and looking at the json it essentially has access to the secrets manager where it can retrieve the",
    "start": "1724880",
    "end": "1730799"
  },
  {
    "text": "secrets for that database user and that's how it's going to connect to the database because the rest of the",
    "start": "1730799",
    "end": "1736240"
  },
  {
    "text": "connection information are specified in the lambda itself so essentially all it needs is that get the password for the user",
    "start": "1736240",
    "end": "1742559"
  },
  {
    "text": "and connects to the database so let's go and run this test",
    "start": "1742559",
    "end": "1749120"
  },
  {
    "text": "and it ran this and then it actually connects to the database instance rds",
    "start": "1750559",
    "end": "1757120"
  },
  {
    "text": "instance and as a native user and then connected to the database called test that's a simple straightforward",
    "start": "1757120",
    "end": "1764840"
  },
  {
    "text": "connection now let's look at the scenario number three which is",
    "start": "1764840",
    "end": "1771120"
  },
  {
    "start": "1771000",
    "end": "1771000"
  },
  {
    "text": "this where the lambda retrieves the secret from the secrets",
    "start": "1771120",
    "end": "1776640"
  },
  {
    "text": "manager and connects to the rds proxy and then which in turn connects to the database",
    "start": "1776640",
    "end": "1782159"
  },
  {
    "text": "so it's the same lambda connection from the secrets manager but instead of connecting to the database directly it",
    "start": "1782159",
    "end": "1787679"
  },
  {
    "text": "connects through the proxy so let's see the lambda how it functions",
    "start": "1787679",
    "end": "1792840"
  },
  {
    "text": "there so the lambda that corresponds to this is lambda native proxy so let's pick this up and then let's",
    "start": "1792840",
    "end": "1801600"
  },
  {
    "text": "take a look at the permission body test so here this has a rule called lambda",
    "start": "1801600",
    "end": "1806960"
  },
  {
    "text": "native proxyro by opening this up and we can see the policy that",
    "start": "1806960",
    "end": "1813759"
  },
  {
    "text": "it has a permission to retrieve the secrets manager password for the native user the same way but",
    "start": "1814720",
    "end": "1822640"
  },
  {
    "text": "the way it connects to the database is where the difference is instead of connecting to the database it will connect to the rds proxy",
    "start": "1822640",
    "end": "1830720"
  },
  {
    "text": "so same way so we go and run the test",
    "start": "1830720",
    "end": "1837840"
  },
  {
    "text": "trans successfully so let's go and look at what it does so it's connecting to the endpoint which is",
    "start": "1840880",
    "end": "1846880"
  },
  {
    "text": "the audi's proxy and as a database user native user and then it just selects this simple query so you",
    "start": "1846880",
    "end": "1854399"
  },
  {
    "text": "can see this one so now let's see how things are",
    "start": "1854399",
    "end": "1859600"
  },
  {
    "text": "different with a scenario number four which is this where we have",
    "start": "1859600",
    "end": "1867760"
  },
  {
    "text": "different lambda functions uh with the appropriate role it will go on get the token from",
    "start": "1867760",
    "end": "1874960"
  },
  {
    "text": "the iam and with that ability to generate the token and it goes connects to the rds proxy",
    "start": "1874960",
    "end": "1882320"
  },
  {
    "text": "but rds proxy in turn which has the information about the database and it connects to the database through the secrets manager",
    "start": "1882320",
    "end": "1888799"
  },
  {
    "text": "and let's again show this whole functioning of this particular lambda through the console let's look at",
    "start": "1888799",
    "end": "1896640"
  },
  {
    "text": "one example for each so let's look at these lambda i am proxy management user one so if i",
    "start": "1896640",
    "end": "1903200"
  },
  {
    "text": "open this open this up again i need to create a text test event",
    "start": "1903200",
    "end": "1910080"
  },
  {
    "text": "and then run the test and then do this but before that let's quickly take a look at the permission",
    "start": "1910080",
    "end": "1915519"
  },
  {
    "text": "and this has a role called lambda am proxy management role and then looking at the permission",
    "start": "1915519",
    "end": "1921360"
  },
  {
    "text": "for this role and it has a policy where as you can see",
    "start": "1921360",
    "end": "1927760"
  },
  {
    "text": "it does allow the connect to the rds instance however here",
    "start": "1927760",
    "end": "1932880"
  },
  {
    "text": "it is connecting to the proxy and it is allowed to connect only as a management user",
    "start": "1932880",
    "end": "1939600"
  },
  {
    "text": "so if with this role if it tries to connect to a different user database user then",
    "start": "1939600",
    "end": "1946559"
  },
  {
    "text": "it will not be allowed and this policy is what is controlling that so let's go and run this lambda or test",
    "start": "1946559",
    "end": "1953600"
  },
  {
    "text": "it and you can see this",
    "start": "1953600",
    "end": "1962399"
  },
  {
    "text": "and here you can see that so it connects to this proxy with the management user as a username",
    "start": "1962399",
    "end": "1969279"
  },
  {
    "text": "and it gets the database name and this query is successful similarly i'm going to run one from the",
    "start": "1969279",
    "end": "1977840"
  },
  {
    "text": "proxy finance user so if i go here and then just again run this",
    "start": "1977840",
    "end": "1983919"
  },
  {
    "text": "you will see the same result it will connect to the finance database",
    "start": "1983919",
    "end": "1990320"
  },
  {
    "text": "and how it happens because if i go and look at the role and the role here is find role and by",
    "start": "1990320",
    "end": "1997200"
  },
  {
    "text": "looking at the fin rule this role will allow connection and by looking at the policy",
    "start": "1997200",
    "end": "2003120"
  },
  {
    "text": "you'll see that it allows the connection to the proxy but only to the finance user here so",
    "start": "2003120",
    "end": "2009200"
  },
  {
    "text": "this is where this filtered now with this setup i want to show a",
    "start": "2009200",
    "end": "2014320"
  },
  {
    "text": "lambda which crosses from management to the finance meaning",
    "start": "2014320",
    "end": "2019679"
  },
  {
    "text": "a rogue user uh from the finance somehow we got this role and then he tries to connect to the",
    "start": "2019679",
    "end": "2024960"
  },
  {
    "text": "it he wrote the function he or she and it connects to the management database and then let's see",
    "start": "2024960",
    "end": "2030640"
  },
  {
    "text": "what happens now if you open this",
    "start": "2030640",
    "end": "2035518"
  },
  {
    "text": "and looking at the permission and then this is finance role",
    "start": "2037120",
    "end": "2042320"
  },
  {
    "text": "finance user and looking at the definition of the policy",
    "start": "2042320",
    "end": "2047519"
  },
  {
    "text": "it has only access to the finance user but if the code is written in such a way",
    "start": "2047519",
    "end": "2053118"
  },
  {
    "text": "that it tries to connect to the management database so let's go and run this test",
    "start": "2053119",
    "end": "2059358"
  },
  {
    "text": "this is expected to fail and it will fail with the permission error and as you can see yes it failed",
    "start": "2059359",
    "end": "2067760"
  },
  {
    "text": "so it tries to connect to the management and it says that insufficient privilege and that's how this permission gets",
    "start": "2067839",
    "end": "2073919"
  },
  {
    "text": "filtered so as you can see that it's try to connect to the",
    "start": "2073919",
    "end": "2080000"
  },
  {
    "text": "proxy but it's with the user fin user but it's try to access the",
    "start": "2080720",
    "end": "2086720"
  },
  {
    "text": "finance database and that's where the problem is so this is how the permissions are",
    "start": "2086720",
    "end": "2092638"
  },
  {
    "text": "managed uh using the iam authentication and iam authorization so here we played",
    "start": "2092639",
    "end": "2097920"
  },
  {
    "text": "with lambda and then we gave the role to the lambda so that role could be given to an iam",
    "start": "2097920",
    "end": "2103680"
  },
  {
    "text": "user or an ec2 role so you can be assigned to an ecd so you can have a bunch of mission that has easy to roll",
    "start": "2103680",
    "end": "2110720"
  },
  {
    "text": "so only that machine can only access management database or if it has if you have imuser then the",
    "start": "2110720",
    "end": "2117599"
  },
  {
    "text": "set of imuses then that those users can only connect to the corresponding finance or management",
    "start": "2117599",
    "end": "2123680"
  },
  {
    "text": "database and that's how you can manage this and place authorization",
    "start": "2123680",
    "end": "2128480"
  },
  {
    "text": "as you observed in this demo i've taken the authorization of database resources that exist within the database",
    "start": "2129599",
    "end": "2135920"
  },
  {
    "text": "and integrated with externally with iam and that way i can control the",
    "start": "2135920",
    "end": "2141040"
  },
  {
    "text": "authorization of database resources from outside with this i'm concluding this demo hope",
    "start": "2141040",
    "end": "2146640"
  },
  {
    "text": "you really enjoyed it happy cloud computing",
    "start": "2146640",
    "end": "2157119"
  }
]