[
  {
    "start": "0",
    "end": "56000"
  },
  {
    "text": "good afternoon Thanks for coming and welcome to the presentation today about AWS",
    "start": "12160",
    "end": "17880"
  },
  {
    "text": "Lambda I know we got a few folks still sorting in but we're going to go ahead and get this kicked",
    "start": "17880",
    "end": "23160"
  },
  {
    "text": "off So today's a birthday party of sorts A year ago we introduced AWS Lambda to",
    "start": "23160",
    "end": "29599"
  },
  {
    "text": "the world a new way to think about serverless computing And today I'm here to give you an update on what we've done",
    "start": "29599",
    "end": "36079"
  },
  {
    "text": "with Lambda over the course of the last year talk a little bit about some of the emerging use cases that we've seen and",
    "start": "36079",
    "end": "42719"
  },
  {
    "text": "most excitingly roll out some of the new features that you heard about this morning in the",
    "start": "42719",
    "end": "48200"
  },
  {
    "text": "keynote First though let me make sure we're all caught up because maybe not everybody in the room has been uh has",
    "start": "48200",
    "end": "54000"
  },
  {
    "text": "been using Lambda So AWS Lambda is a compute service and the interesting thing about",
    "start": "54000",
    "end": "59920"
  },
  {
    "start": "56000",
    "end": "219000"
  },
  {
    "text": "it is what you don't have to think about Starting with not having to think about",
    "start": "59920",
    "end": "65478"
  },
  {
    "text": "infrastructure and with that comes lots of interesting consequences For starters",
    "start": "65479",
    "end": "70720"
  },
  {
    "text": "you don't have to think about being under or over capacity One of the nice things about",
    "start": "70720",
    "end": "75840"
  },
  {
    "text": "that is you can just give work to Lambda in the same way that you might ask S3 to store your objects and it'll do the",
    "start": "75840",
    "end": "81600"
  },
  {
    "text": "compute on your behalf So the problems of having too many or too few servers don't",
    "start": "81600",
    "end": "88280"
  },
  {
    "text": "occur Similarly since you're not thinking about the infrastructure you don't think about how to get things onto the infrastructure So there's no",
    "start": "88280",
    "end": "95600"
  },
  {
    "text": "challenge of deploying code onto a fleet That's left to the you know basically to",
    "start": "95600",
    "end": "100960"
  },
  {
    "text": "the guys back in Seattle who were building that piece And then you don't have to think",
    "start": "100960",
    "end": "106159"
  },
  {
    "text": "about scaling and fault tolerance because we build this as a fully managed service So that under this under the",
    "start": "106159",
    "end": "112320"
  },
  {
    "text": "covers we worry about things like availability zones spinning machines up and down taking care of unhealthy hosts",
    "start": "112320",
    "end": "119119"
  },
  {
    "text": "all of those pieces that are undifferiated heavy lifting that have nothing to do with your business value",
    "start": "119119",
    "end": "124880"
  },
  {
    "text": "per se but stand between you and deploying production apps at",
    "start": "124880",
    "end": "131239"
  },
  {
    "text": "scale And then finally boilerplate activities like like building in your logging system come readymade out of the",
    "start": "131239",
    "end": "138319"
  },
  {
    "text": "box So you don't have to take special action to do that Although you're welcome to add more if you",
    "start": "138319",
    "end": "143800"
  },
  {
    "text": "like Now those are all the things you don't have to think about But there's a whole bunch of stuff that you do get to",
    "start": "143800",
    "end": "148959"
  },
  {
    "text": "think about which is what code do I want to bring to this platform And you can run the code you like So there's no",
    "start": "148959",
    "end": "154879"
  },
  {
    "text": "straight jacket here that says it has to be written in Java It has to be written in in JavaScript You can bring native",
    "start": "154879",
    "end": "160560"
  },
  {
    "text": "libraries You can create processes You can use threads All the natural pieces of programming that you're used to",
    "start": "160560",
    "end": "167360"
  },
  {
    "text": "You can run code in parallel massively in parallel and easily in parallel One",
    "start": "167360",
    "end": "172400"
  },
  {
    "text": "of the nice things about a system like this is you tell us the requests that you want to run and we figure out how to get that code",
    "start": "172400",
    "end": "178680"
  },
  {
    "text": "started You can create things like backends mobile backends web backends as",
    "start": "178680",
    "end": "183920"
  },
  {
    "text": "you heard this morning in the keynote IoT backends along with event handlers hooking up Lambda functions to other",
    "start": "183920",
    "end": "190480"
  },
  {
    "text": "pieces of AWS or third-party event sources and process all kinds of data",
    "start": "190480",
    "end": "196000"
  },
  {
    "text": "data at scale coming through Kinesis coming through S3 coming through lots of pipes And one of the most interesting",
    "start": "196000",
    "end": "202560"
  },
  {
    "text": "things of all is the economics of all of this So there's a there's an obvious productivity element here because you",
    "start": "202560",
    "end": "209760"
  },
  {
    "text": "don't have to do all those things on the left and think about all those different pieces You don't have to spend time on them So you're more productive and you",
    "start": "209760",
    "end": "216239"
  },
  {
    "text": "don't spend money on the things you don't need to But there are also some interesting economics that come from the",
    "start": "216239",
    "end": "221280"
  },
  {
    "start": "219000",
    "end": "260000"
  },
  {
    "text": "benefits here So first of all when you don't have the infrastructure you don't have to worry about underutilized underutilizing the",
    "start": "221280",
    "end": "229239"
  },
  {
    "text": "infrastructure So there are no servers that are sitting around idle or cold or",
    "start": "229239",
    "end": "234519"
  },
  {
    "text": "underutilized that are costing you money but not delivering value You also don't have to worry about",
    "start": "234519",
    "end": "240959"
  },
  {
    "text": "overprovisioning so that you might handle burst capacity but then have extra extra capacity lying",
    "start": "240959",
    "end": "247560"
  },
  {
    "text": "around And then finally Lambda's got sub-second billing So we build in these incredibly fine grained 100 millisecond",
    "start": "247560",
    "end": "253959"
  },
  {
    "text": "units so that as soon as you're done with the computation you stop paying for",
    "start": "253959",
    "end": "259560"
  },
  {
    "text": "it Now how all of this works is relatively simple You take your code in the form of a zip file and then you",
    "start": "259560",
    "end": "266720"
  },
  {
    "start": "260000",
    "end": "307000"
  },
  {
    "text": "upload that to Lambda either directly or from S3 and at that point we're ready to",
    "start": "266720",
    "end": "271840"
  },
  {
    "text": "start deploying that for you and you're ready to run it So there's no explicit step there for deployment from you The",
    "start": "271840",
    "end": "279120"
  },
  {
    "text": "code that you upload is what we call stateless And by that what we mean is that you take the persistent data and you put it elsewhere You put it in S3",
    "start": "279120",
    "end": "286479"
  },
  {
    "text": "you put it in Dynamob put it in a database of your choice or a system of your choice And we'll talk about some of the new options here in a few minutes",
    "start": "286479",
    "end": "292720"
  },
  {
    "text": "that are coming along And then finally for monitoring and logging you've got",
    "start": "292720",
    "end": "298080"
  },
  {
    "text": "built-in support for Cloudatch metrics and Cloudatch logs which makes it very easy for you to get started without",
    "start": "298080",
    "end": "304639"
  },
  {
    "text": "having to create that boilerplate code Now a year ago when we launched this we",
    "start": "304639",
    "end": "311120"
  },
  {
    "text": "brought it to you with some simple use cases for event handling with three different services Uploading objects to",
    "start": "311120",
    "end": "317759"
  },
  {
    "text": "S3 like images where you could kick off you know resizing or indexing Amazon Dynamob update streams",
    "start": "317759",
    "end": "325039"
  },
  {
    "text": "which were in preview at the time and real-time streaming with our managed streaming solution Amazon Kinesis",
    "start": "325039",
    "end": "333400"
  },
  {
    "start": "333000",
    "end": "372000"
  },
  {
    "text": "A year later we've seen this integration expand across the AWS",
    "start": "333680",
    "end": "338759"
  },
  {
    "text": "portfolio So many different services that you can now use with Lambda Things like uh Amazon simple workflow where you",
    "start": "338759",
    "end": "346400"
  },
  {
    "text": "can take actions in Lambda Uh SNS where you can take messages and you can automatically process them Some amazing",
    "start": "346400",
    "end": "352639"
  },
  {
    "text": "use cases there around it automation as well as user message delivery and a host of others And we're going to continue",
    "start": "352639",
    "end": "359120"
  },
  {
    "text": "with this We promised last year that ultimately every resource every interesting change every interesting",
    "start": "359120",
    "end": "365120"
  },
  {
    "text": "transition would be something that you could do compute on And you're seeing us take those",
    "start": "365120",
    "end": "371440"
  },
  {
    "text": "steps Now the story doesn't start and end with those first party integrations As much as we love our our fellow teams",
    "start": "371960",
    "end": "378800"
  },
  {
    "start": "372000",
    "end": "449000"
  },
  {
    "text": "at AWS in some ways what's even more exciting is seeing Lambda and its",
    "start": "378800",
    "end": "384880"
  },
  {
    "text": "compute model brought to third parties and the broad kind of internet space of events And so today we've launched",
    "start": "384880",
    "end": "392360"
  },
  {
    "text": "blueprints our templates for creating easy lambda code starters on the m on the uh on the Lambda console for several",
    "start": "392360",
    "end": "399840"
  },
  {
    "text": "new companies Algorithmia which is a very exciting startup that we're happy to partner with that takes academic and",
    "start": "399840",
    "end": "407680"
  },
  {
    "text": "research and other sources of these incredible algorithms and brings them to a marketplace where companies with data",
    "start": "407680",
    "end": "413600"
  },
  {
    "text": "and business needs can find them Splunk which is this incredible way",
    "start": "413600",
    "end": "418960"
  },
  {
    "text": "to get operational insights into machine data that makes companies more productive more competitive more",
    "start": "418960",
    "end": "426280"
  },
  {
    "text": "insightful And I love Splunk in part because it's also a great demonstration of how open Lambda is Yes we give you",
    "start": "426280",
    "end": "433120"
  },
  {
    "text": "Cloudatch logs built in by default You're welcome to use them You're also welcome to use Splunk and other third",
    "start": "433120",
    "end": "439199"
  },
  {
    "text": "parties as well It's a completely open platform where you can call any APIs that you like And we're excited to be",
    "start": "439199",
    "end": "444960"
  },
  {
    "text": "able to bring partners like Splunk into that fold Amazon Echo you've you've probably",
    "start": "444960",
    "end": "450720"
  },
  {
    "start": "449000",
    "end": "500000"
  },
  {
    "text": "heard us talk about and perhaps even demo if you've come to some of the summits Voice enabled apps are one of",
    "start": "450720",
    "end": "456240"
  },
  {
    "text": "the most exciting new frontiers and the easiest way to create an Amazon Echo app",
    "start": "456240",
    "end": "461280"
  },
  {
    "text": "is to run that code on AWS Lambda and Twilio which powers modern",
    "start": "461280",
    "end": "467960"
  },
  {
    "text": "communications offering this next generation of voice and SMS applications is another blueprint that",
    "start": "467960",
    "end": "474560"
  },
  {
    "text": "we've added today and we love that incredible integration of the way they're taking these these telecom",
    "start": "474560",
    "end": "481120"
  },
  {
    "text": "hardware bringing it to the cloud and then using Lambda as a way to get an extensible easy tomp compute ecosystem",
    "start": "481120",
    "end": "488160"
  },
  {
    "text": "that they can bring to their customers as well And we're going to continue This is just the start of using Lambda across",
    "start": "488160",
    "end": "494560"
  },
  {
    "text": "the internet for events far and wide Now when we launched we began with",
    "start": "494560",
    "end": "502599"
  },
  {
    "start": "500000",
    "end": "633000"
  },
  {
    "text": "Node.js and we talked to you about using that to build these event handlers hooked up to uh at the time other AWS",
    "start": "502599",
    "end": "509840"
  },
  {
    "text": "properties In April we released Lambda in production having added support for",
    "start": "509840",
    "end": "516599"
  },
  {
    "text": "cores integrated with the mobile SDK to support mobile backends and synchronous request response type calls and added",
    "start": "516599",
    "end": "523919"
  },
  {
    "text": "functionality like resource policies and cross account access for enterprises",
    "start": "523919",
    "end": "529920"
  },
  {
    "text": "By the summer we'd added Java additional support for S3 uploads expanded the maximum size of memory that we were",
    "start": "529920",
    "end": "536480"
  },
  {
    "text": "offering brought Lambda to a new region in Tokyo and added support for Amazon Echo and other sources of voice enabled",
    "start": "536480",
    "end": "544680"
  },
  {
    "text": "applications And that trend continues And what we want to spend time on today is talking a little bit about all the",
    "start": "544680",
    "end": "550080"
  },
  {
    "text": "new features that we've added So first the last two weeks have been busy And in case you missed it",
    "start": "550080",
    "end": "556640"
  },
  {
    "text": "we've done two integrations that are already out there We announced recently that simple email",
    "start": "556640",
    "end": "562240"
  },
  {
    "text": "service Amazon SCES now uses Lambda for inbound rule processing So if you've got",
    "start": "562240",
    "end": "568160"
  },
  {
    "text": "code that does for example spam detection and analysis you can write that as a Lambda function that will be",
    "start": "568160",
    "end": "573360"
  },
  {
    "text": "automatically invoked and used to process incoming email And this is a great example of where Lambda functions",
    "start": "573360",
    "end": "580640"
  },
  {
    "text": "and their easytouse serverless style can be applied to different kinds of computation where the burden of setting",
    "start": "580640",
    "end": "587040"
  },
  {
    "text": "up and maintaining a server fleet might have been overwhelming",
    "start": "587040",
    "end": "592080"
  },
  {
    "text": "Another one that I'm incredibly excited about that we just launched is integration between Cloudatch logs and",
    "start": "592080",
    "end": "599040"
  },
  {
    "text": "Lambda functions So that now you can scan audit index transform or notify on",
    "start": "599040",
    "end": "605760"
  },
  {
    "text": "log entries in real time This complements some of the built-in Cloudatch alarm style functionality in",
    "start": "605760",
    "end": "611680"
  },
  {
    "text": "Cloudatch logs because now you can do anything that you compute any library that you want to bring you can run it",
    "start": "611680",
    "end": "617839"
  },
  {
    "text": "over your logs and take action on them You can take the results and consolidate them and store them You can notify end",
    "start": "617839",
    "end": "624800"
  },
  {
    "text": "users or operators of problems Anything that you can call from Lambda you can now do on logs Very very exciting new",
    "start": "624800",
    "end": "632839"
  },
  {
    "text": "functionality And now we come to this morning's announcements So hopefully most of you heard the verer in this",
    "start": "632839",
    "end": "638640"
  },
  {
    "start": "633000",
    "end": "660000"
  },
  {
    "text": "morning's keynote talk about some of the new features that we're we're bringing out across the board And one of the most",
    "start": "638640",
    "end": "643760"
  },
  {
    "text": "exciting ones for Lambda is introducing a new language A lot of our users have been excited to",
    "start": "643760",
    "end": "649760"
  },
  {
    "text": "get Python functionality and today we're bringing Python 2.7 to the Lambda",
    "start": "649760",
    "end": "656240"
  },
  {
    "text": "platform So do a quick demo here I'll show you here's the um the Lambda",
    "start": "659800",
    "end": "665519"
  },
  {
    "start": "660000",
    "end": "755000"
  },
  {
    "text": "Blueprint page and you can see that we've created support here for a number of Python",
    "start": "665519",
    "end": "672200"
  },
  {
    "text": "blueprints We'll do a do a quick hello world here",
    "start": "672200",
    "end": "678480"
  },
  {
    "text": "I'll go ahead and give this a name And you can see normal Python code We're running a stock Python 2.7 runtime here",
    "start": "693600",
    "end": "703000"
  },
  {
    "text": "And there we go We've created a Python function I'll go ahead and change one of",
    "start": "707279",
    "end": "712959"
  },
  {
    "text": "the key values",
    "start": "712959",
    "end": "715760"
  },
  {
    "text": "here There we have it So our newest language Python",
    "start": "721720",
    "end": "727560"
  },
  {
    "text": "Python support's available today It's available from all of the SDKs and the AWS CLI You obviously just saw me",
    "start": "731120",
    "end": "737120"
  },
  {
    "text": "demonstrate the interactive editing mode So fully supported in our console as well And it comes in with Boto3 builtin",
    "start": "737120",
    "end": "744560"
  },
  {
    "text": "So you can easily call any other AWS public uh API through your Python code",
    "start": "744560",
    "end": "750880"
  },
  {
    "text": "inside of Lambda",
    "start": "750880",
    "end": "754360"
  },
  {
    "start": "755000",
    "end": "822000"
  },
  {
    "text": "Now the next one I want to tell you about is longer running functions And we've heard this request",
    "start": "756160",
    "end": "761760"
  },
  {
    "text": "for a couple of different reasons First we have some folks who occasionally have",
    "start": "761760",
    "end": "768079"
  },
  {
    "text": "maybe a large log file or a large image or a large object for processing that just takes a little bit longer than that",
    "start": "768079",
    "end": "773760"
  },
  {
    "text": "60-cond limit in Lambda We also have a class of users who are doing very computensive work Perhaps",
    "start": "773760",
    "end": "779920"
  },
  {
    "text": "it's video transcoding or other kinds of log manipulation where they've got a lot of work to sort through and they just",
    "start": "779920",
    "end": "786160"
  },
  {
    "text": "want to be able to do more compute at a time So today we're bringing a five-fold increase in the limit lifting that from",
    "start": "786160",
    "end": "793680"
  },
  {
    "text": "60 seconds to 5 minutes",
    "start": "793680",
    "end": "798120"
  },
  {
    "text": "And you can see here in the uh in the settings configuration I won't ask you to sit through a uh a demonstration of a",
    "start": "803200",
    "end": "809680"
  },
  {
    "text": "5m minute function wait but you can see that the uh the timeout now goes all the way up to",
    "start": "809680",
    "end": "815920"
  },
  {
    "text": "five This feature is available from most of our SDKs Um we actually have added",
    "start": "821560",
    "end": "826880"
  },
  {
    "text": "Ruby to this list as well And with some of them you also will need to set the the socket timeout higher if",
    "start": "826880",
    "end": "833600"
  },
  {
    "text": "you want to make a synchronous call Of course for asynchronous work that's not necessary The asynchronous invoke",
    "start": "833600",
    "end": "839440"
  },
  {
    "text": "returns very quickly from Lambda but the job itself can then continue on running",
    "start": "839440",
    "end": "844560"
  },
  {
    "text": "for up to 5 minutes Now I want to take a pause here",
    "start": "844560",
    "end": "850480"
  },
  {
    "start": "848000",
    "end": "951000"
  },
  {
    "text": "and talk a little bit about resources in general for Lambda So Lambda offers 23 power levels",
    "start": "850480",
    "end": "858079"
  },
  {
    "text": "This is up from last year when we when we first launched when we've raised since we've subsequently raised the limit to 1.5",
    "start": "858079",
    "end": "865000"
  },
  {
    "text": "GB And these power levels although you express them in terms of memory you should think about them as the",
    "start": "865000",
    "end": "870480"
  },
  {
    "text": "percentage of the machine that you're requesting So turn it all the way down you're getting a small slice of the",
    "start": "870480",
    "end": "875600"
  },
  {
    "text": "machine Turn it all the way up to 1.5 gig and you're getting essentially the full power of the",
    "start": "875600",
    "end": "881880"
  },
  {
    "text": "machine Now the guidance on where you should set this depends on what kind of workload you're doing So if you've got a",
    "start": "881880",
    "end": "887680"
  },
  {
    "text": "compute intensive workload you might choose to set that power setting high because this the higher you set it the",
    "start": "887680",
    "end": "893680"
  },
  {
    "text": "faster you'll complete So you'll pay more but you'll run you'll run for less time And generally speaking you want to",
    "start": "893680",
    "end": "899680"
  },
  {
    "text": "finish that work as quickly as you can However if you've got an IObound task you probably want to set this fairly low",
    "start": "899680",
    "end": "906160"
  },
  {
    "text": "There's no reason to pay for extra compute power if what your job is generally doing is waiting for a request",
    "start": "906160",
    "end": "911279"
  },
  {
    "text": "to complete If you have something that's highly bursty where maybe you're mostly",
    "start": "911279",
    "end": "917519"
  },
  {
    "text": "not doing any work but then all of a sudden burst very very rapidly and to very high levels you can set it",
    "start": "917519",
    "end": "923199"
  },
  {
    "text": "somewhere in the middle because that compute power will allow you to start all of those all of those jobs very",
    "start": "923199",
    "end": "928639"
  },
  {
    "text": "quickly without spending too much for the parts of the computation you don't",
    "start": "928639",
    "end": "934440"
  },
  {
    "text": "need As we mentioned the duration now can run run from 100 milliseconds all the way up to 5 minutes And the free",
    "start": "934440",
    "end": "941199"
  },
  {
    "text": "tier as a reminder gives you a million free requests in 400,000 gigabyte seconds every month to every user in",
    "start": "941199",
    "end": "950000"
  },
  {
    "start": "951000",
    "end": "974000"
  },
  {
    "text": "perpetuity Now one of the features that's probably the single most requested one on the AWS forums has been",
    "start": "951160",
    "end": "957759"
  },
  {
    "text": "scheduled functions And some of our friends out there in the community have been helping out by filling in the gaps",
    "start": "957759",
    "end": "963360"
  },
  {
    "text": "here But I'm pleased today to say that we finally have support in Lambda itself for scheduled functions",
    "start": "963360",
    "end": "971680"
  },
  {
    "start": "974000",
    "end": "1137000"
  },
  {
    "text": "And I want to give you a little bit of insight into what that looks like And in particular I want to show you a new",
    "start": "974880",
    "end": "980000"
  },
  {
    "text": "blueprint that we've added called the Lambda Canary The Lambda Canary is incredibly",
    "start": "980000",
    "end": "986519"
  },
  {
    "text": "simple It's a little bit of Python code that calls an HTTP function So it lets",
    "start": "986519",
    "end": "992720"
  },
  {
    "text": "you basically go out and look at some site on on the web and then it checks to see that the response it got back has",
    "start": "992720",
    "end": "998880"
  },
  {
    "text": "some particular value right nothing magical about this code It's just an example of what you can do with",
    "start": "998880",
    "end": "1004800"
  },
  {
    "text": "scheduled jobs And one of the things I'm doing here is I'm checking Amazon.com the",
    "start": "1004800",
    "end": "1011360"
  },
  {
    "text": "Amazon retail site to see if it's got a particular value So checking to see if",
    "start": "1011360",
    "end": "1017120"
  },
  {
    "text": "the word shopping appears somewhere Now here's the fun thing I've set this up so",
    "start": "1017120",
    "end": "1022800"
  },
  {
    "text": "that it can run periodically And if we uh if we go ahead",
    "start": "1022800",
    "end": "1028000"
  },
  {
    "text": "and select the canary",
    "start": "1028000",
    "end": "1030959"
  },
  {
    "text": "here you can choose a schedule expression that has this run periodically like every 5 minutes every",
    "start": "1034919",
    "end": "1041520"
  },
  {
    "text": "10 minutes once an hour once a day or you can supply cron syntax here So we support both and using cron syntax you",
    "start": "1041520",
    "end": "1048240"
  },
  {
    "text": "can tell it to run at a specific time of day Now the nice thing about that little",
    "start": "1048240",
    "end": "1053600"
  },
  {
    "text": "canary example that I showed you is that the built-in Cloudatch metrics effectively turn this immediately into a",
    "start": "1053600",
    "end": "1060679"
  },
  {
    "text": "canary So I can come over here and I can look at the Cloudatch metrics for that function and I can see how many times",
    "start": "1060679",
    "end": "1067600"
  },
  {
    "text": "that probe of the Amazon retail website has succeeded The orange line here tells",
    "start": "1067600",
    "end": "1072640"
  },
  {
    "text": "me the invocation So that's just an invoca an indication that the Canary is is sitting there running And then the",
    "start": "1072640",
    "end": "1078720"
  },
  {
    "text": "blue line is the number of successes and failures And you can see we've had a couple of times here where the page for",
    "start": "1078720",
    "end": "1084799"
  },
  {
    "text": "whatever reason didn't contain the word shopping Now maybe that's okay in some cases not in others You know",
    "start": "1084799",
    "end": "1090240"
  },
  {
    "text": "advertisements are coming and going in this case But here's an interesting example of what you can do with scheduled jobs and the built-in",
    "start": "1090240",
    "end": "1096480"
  },
  {
    "text": "Cloudatch metrics with almost no work And this solution as simple as it",
    "start": "1096480",
    "end": "1101600"
  },
  {
    "text": "seems here is highly available and highly scalable So you could do this for many canaries And those canaries will",
    "start": "1101600",
    "end": "1108320"
  },
  {
    "text": "keep chirping away with with the kind of the full power of a highly available cron driver behind",
    "start": "1108320",
    "end": "1113559"
  },
  {
    "text": "them And of course this is just one example of what you can build with scheduled jobs One of the things that we",
    "start": "1113559",
    "end": "1119520"
  },
  {
    "text": "get asked a lot is for um how do I pull other event sources like SQS or rabbit",
    "start": "1119520",
    "end": "1125039"
  },
  {
    "text": "MQ and now with scheduled jobs you can easily go out and grab data from those",
    "start": "1125039",
    "end": "1130240"
  },
  {
    "text": "event sources as well",
    "start": "1130240",
    "end": "1134120"
  },
  {
    "start": "1137000",
    "end": "1179000"
  },
  {
    "text": "Scheduled jobs are available today and they're present in the AWS Lambda console and we will be adding support",
    "start": "1138000",
    "end": "1145360"
  },
  {
    "text": "later this year for both CLI and SDK support as well As I mentioned they",
    "start": "1145360",
    "end": "1150640"
  },
  {
    "text": "support both recurring and specific time invocation You can use cron syntax or",
    "start": "1150640",
    "end": "1155679"
  },
  {
    "text": "sort of simple recurring syntax as you saw me demonstrate in the console just now Granularity at launcher is 5 minutes",
    "start": "1155679",
    "end": "1162000"
  },
  {
    "text": "and we will eventually be making that finer grained as well But since you've got five minute lambda jobs and",
    "start": "1162000",
    "end": "1167280"
  },
  {
    "text": "fiveminute granularity on scheduled jobs you can always inside your code decide to do activities at a much finer level",
    "start": "1167280",
    "end": "1174160"
  },
  {
    "text": "of granularity",
    "start": "1174160",
    "end": "1177400"
  },
  {
    "start": "1179000",
    "end": "1226000"
  },
  {
    "text": "Now if anybody was present or was a saw the New York Summit we talked about",
    "start": "1179919",
    "end": "1186080"
  },
  {
    "text": "Lambda bringing out a new feature around versioning We've had lots of requests",
    "start": "1186080",
    "end": "1191200"
  },
  {
    "text": "for the ability to take a function and create different versions of that function for lots of reasons Supporting",
    "start": "1191200",
    "end": "1197760"
  },
  {
    "text": "scenarios such as roll forward and roll back but also to allow teams to",
    "start": "1197760",
    "end": "1202799"
  },
  {
    "text": "communicate and collaborate more effectively by having different team members be able to create different",
    "start": "1202799",
    "end": "1207919"
  },
  {
    "text": "versions of a function And I want to go ahead and show you what that what that versioning looks like",
    "start": "1207919",
    "end": "1216080"
  },
  {
    "text": "here So I'm going to show you a very simple little web page that we stood up here",
    "start": "1225880",
    "end": "1233720"
  },
  {
    "start": "1226000",
    "end": "1266000"
  },
  {
    "text": "And not that the architecture matters all that much but what you're seeing here is an AWS an API gateway provided",
    "start": "1234559",
    "end": "1242000"
  },
  {
    "text": "site some S3 static content and then ultimately the gateway is calling a",
    "start": "1242000",
    "end": "1247039"
  },
  {
    "text": "Lambda function So this is a this is a completely serverless uh uh website",
    "start": "1247039",
    "end": "1252400"
  },
  {
    "text": "design or web app design here But what I'm showing you with it is actually the versioning feature So I'm going to go",
    "start": "1252400",
    "end": "1257919"
  },
  {
    "text": "ahead and and hit this particular AR What the Lambda function is going to do is just call that",
    "start": "1257919",
    "end": "1265679"
  },
  {
    "start": "1266000",
    "end": "1294000"
  },
  {
    "text": "And the color indicates that we've got version one here I'll go ahead and change this to two Already you're",
    "start": "1267120",
    "end": "1272880"
  },
  {
    "text": "starting to get a flavor of what versions look like in Lambda And go ahead and trigger this",
    "start": "1272880",
    "end": "1278919"
  },
  {
    "text": "again Background changes to blue This is version two of the function So demonstration of API gateway calling a",
    "start": "1278919",
    "end": "1285440"
  },
  {
    "text": "Lambda function where we've changed from version one to version two keeping the keeping the name of the function the",
    "start": "1285440",
    "end": "1290880"
  },
  {
    "text": "same Now over here on the Lambda",
    "start": "1290880",
    "end": "1298280"
  },
  {
    "start": "1294000",
    "end": "1347000"
  },
  {
    "text": "console we've added some new",
    "start": "1298280",
    "end": "1302240"
  },
  {
    "text": "UI So the edit box here on the right looks the same Looks like the code you're familiar",
    "start": "1304360",
    "end": "1310520"
  },
  {
    "text": "with but on the left we've added this new tab which shows us the different versions And I'm currently viewing",
    "start": "1310520",
    "end": "1317360"
  },
  {
    "text": "version three Here I can switch to version two And latest is the version that you're",
    "start": "1317360",
    "end": "1323440"
  },
  {
    "text": "used to the editable mutable copy of the code that resides essentially at the at",
    "start": "1323440",
    "end": "1329360"
  },
  {
    "text": "the head of your development stream Now I'll show you one more thing",
    "start": "1329360",
    "end": "1335840"
  },
  {
    "text": "here before we flip back to the slides We can also look at aliases over here and I'll tell you in a second how aliases work",
    "start": "1335840",
    "end": "1344440"
  },
  {
    "start": "1347000",
    "end": "1433000"
  },
  {
    "text": "So the first thing you need to know about versioning is that if you don't care about versioning nothing changes",
    "start": "1347919",
    "end": "1353280"
  },
  {
    "text": "Everything is backward compatible And if you simply want to upload code to Lambda and run it it works exactly as it has",
    "start": "1353280",
    "end": "1359080"
  },
  {
    "text": "before So you can make changes to your Lambda function upload that code and",
    "start": "1359080",
    "end": "1364880"
  },
  {
    "text": "every time you make new changes to it you overwrite the code and get a get the updated copy of whatever you've stored",
    "start": "1364880",
    "end": "1371120"
  },
  {
    "text": "most recently What's different now is that if you have",
    "start": "1371120",
    "end": "1376400"
  },
  {
    "text": "a version that you like you can call a new API called publish Publish takes",
    "start": "1376400",
    "end": "1381760"
  },
  {
    "text": "what you've got in that development arena what we call dollar latest and it copies it into an immutable snapshot It",
    "start": "1381760",
    "end": "1388960"
  },
  {
    "text": "also assigns it a number a small easy to read integer version number Unsurprisingly the first one's",
    "start": "1388960",
    "end": "1395960"
  },
  {
    "text": "one And then you can refer to that later on from your from your client And every",
    "start": "1395960",
    "end": "1401360"
  },
  {
    "text": "time you call publish you get another number assigned And these numbers are durable And the nice thing about their",
    "start": "1401360",
    "end": "1406799"
  },
  {
    "text": "durability coupled with their immutability is that it creates a contract with the client As the as the",
    "start": "1406799",
    "end": "1413760"
  },
  {
    "text": "function owner you're of course always free to delete your function But the client of that version whether that's",
    "start": "1413760",
    "end": "1419280"
  },
  {
    "text": "your own code or your own tools or a client that you've given out say through a mobile through a mobile app or some",
    "start": "1419280",
    "end": "1424559"
  },
  {
    "text": "other app knows that that version is is always the same set of bits And those",
    "start": "1424559",
    "end": "1429679"
  },
  {
    "text": "bits don't change So how do you access this well",
    "start": "1429679",
    "end": "1436799"
  },
  {
    "start": "1433000",
    "end": "1493000"
  },
  {
    "text": "first of all calling a Lambda function normally doesn't change So if we already got an AR that you've handed out that AR",
    "start": "1436799",
    "end": "1443120"
  },
  {
    "text": "is still good And that AR means the development version or dollar",
    "start": "1443120",
    "end": "1448280"
  },
  {
    "text": "latest You can also hand out ARS to these new versions that you're creating by calling",
    "start": "1448280",
    "end": "1454039"
  },
  {
    "text": "publish And they look very simple They look exactly like the ARS you've always given out with a colon and then a number",
    "start": "1454039",
    "end": "1460240"
  },
  {
    "text": "on them So what you saw me demo in the console and the syntax up here So very simple addition to the existing AR",
    "start": "1460240",
    "end": "1468520"
  },
  {
    "text": "format So now what happens if you want to have a client and you want them to be able to",
    "start": "1468520",
    "end": "1474799"
  },
  {
    "text": "call a version but you want to change what that version means over time because versions are immutable",
    "start": "1474799",
    "end": "1481120"
  },
  {
    "text": "So you want to give out an AR that looks something like you know fu production or fu you know v1 And then you want to be",
    "start": "1481120",
    "end": "1488960"
  },
  {
    "text": "able to decide hey on Monday that means one thing and on Tuesday that means something else That's where aliases come",
    "start": "1488960",
    "end": "1494880"
  },
  {
    "start": "1493000",
    "end": "1556000"
  },
  {
    "text": "in Aliases are like symbolic links in a Unix system You can point them at any of the",
    "start": "1494880",
    "end": "1501120"
  },
  {
    "text": "versions that you've created including the development version but then you can change them",
    "start": "1501120",
    "end": "1506559"
  },
  {
    "text": "over time and you can give your client a stable AR while retaining the privilege to change what that AR means Aliases",
    "start": "1506559",
    "end": "1514640"
  },
  {
    "text": "will be appropriate for certain activities and not for others But the nice thing about it from a function owner perspective is you can define",
    "start": "1514640",
    "end": "1520799"
  },
  {
    "text": "something like a production version and now you can do roll forward and roll back So to do that you point an alias at",
    "start": "1520799",
    "end": "1528159"
  },
  {
    "text": "say V1 You roll forward or promote by pointing it to V2 If you discover you don't like V2 you found a bug in it you",
    "start": "1528159",
    "end": "1535200"
  },
  {
    "text": "roll it back to V1 again simply by changing the alias value And within a few minutes Lambda will quickly converge",
    "start": "1535200",
    "end": "1542159"
  },
  {
    "text": "and all of your clients will be calling the older version again So very simple",
    "start": "1542159",
    "end": "1547360"
  },
  {
    "text": "approach extension to what we've got today lots of power in terms of defining",
    "start": "1547360",
    "end": "1552400"
  },
  {
    "text": "different capabilities for managing versions and aliases Now one final thing I want to",
    "start": "1552400",
    "end": "1558159"
  },
  {
    "start": "1556000",
    "end": "1625000"
  },
  {
    "text": "mention before I leave leave this part is that if you're using API gateway you",
    "start": "1558159",
    "end": "1563440"
  },
  {
    "text": "have essentially two different places that you can choose to version So API gateway lets you define HTTP endpoints",
    "start": "1563440",
    "end": "1570799"
  },
  {
    "text": "and you can point them at a at a variety of things but of most interest to us here at the moment is you can point them",
    "start": "1570799",
    "end": "1576240"
  },
  {
    "text": "at a Lambda function and those define a public API for that for that surface",
    "start": "1576240",
    "end": "1581799"
  },
  {
    "text": "area You've always been able to version API gateway APIs and now you can version",
    "start": "1581799",
    "end": "1587120"
  },
  {
    "text": "Lambda functions as well and you can do a lot of different interesting scenarios here You can hand out different versions",
    "start": "1587120",
    "end": "1593679"
  },
  {
    "text": "of APIs to different customers or partners You can also create stability in your API holding customers there",
    "start": "1593679",
    "end": "1600240"
  },
  {
    "text": "while changing what that means on the back end by varying the versions of the Lambda function And you do that by",
    "start": "1600240",
    "end": "1605440"
  },
  {
    "text": "changing what API gateway points to in terms of Lambda or by using aliases So lots of flexibility now to control",
    "start": "1605440",
    "end": "1612320"
  },
  {
    "text": "versioning and control aliases and to create different expressions of your code through different partners thanks",
    "start": "1612320",
    "end": "1618720"
  },
  {
    "text": "to API gateway",
    "start": "1618720",
    "end": "1622360"
  },
  {
    "start": "1625000",
    "end": "1707000"
  },
  {
    "text": "One of the most exciting things that we've been we've brought out today is support for the internet of things and",
    "start": "1625760",
    "end": "1631919"
  },
  {
    "text": "we announced earlier some of the amazing new technologies that are available now",
    "start": "1631919",
    "end": "1637600"
  },
  {
    "text": "to use and connect hardware devices be they smart thermostats or industrial",
    "start": "1637600",
    "end": "1643799"
  },
  {
    "text": "devices to the to the cloud and to data",
    "start": "1643799",
    "end": "1648840"
  },
  {
    "text": "centers and Lambda just as it does for Alexa skills kits for for Amazon Echo",
    "start": "1648840",
    "end": "1654559"
  },
  {
    "text": "apps or for mobile apps is the easiest way to create the compute infrastructure for these this new class of IoT",
    "start": "1654559",
    "end": "1662679"
  },
  {
    "text": "applications And we make that super simple by having a rules engine in our IoT service that can call a Lambda",
    "start": "1662679",
    "end": "1669960"
  },
  {
    "text": "function And now by writing your Lambda function and taking advantage of of all of these other features you can define",
    "start": "1669960",
    "end": "1676720"
  },
  {
    "text": "the backend control for how your Internet of Things devices should behave",
    "start": "1676720",
    "end": "1682559"
  },
  {
    "text": "And you can do both data ingestion here as well as command and control by",
    "start": "1682559",
    "end": "1687760"
  },
  {
    "text": "sending cap by sending those requests and commands back through the IoT system and ultimately down to the device So",
    "start": "1687760",
    "end": "1694480"
  },
  {
    "text": "birectional capability here using lambda using lambda functions hooked up to the",
    "start": "1694480",
    "end": "1700000"
  },
  {
    "text": "AWS IoT service that we launched this morning",
    "start": "1700000",
    "end": "1705559"
  },
  {
    "start": "1707000",
    "end": "1757000"
  },
  {
    "text": "Now one of the most exciting things that uh we've been working on here recently and that you heard about in the keynote",
    "start": "1707919",
    "end": "1713600"
  },
  {
    "text": "today is VPC support And what VPC support means is",
    "start": "1713600",
    "end": "1720080"
  },
  {
    "text": "taking a Lambda function and running it inside a VPC that you own So if you've",
    "start": "1720080",
    "end": "1726240"
  },
  {
    "text": "got something like a relational database like Elasticache like an EC2 instance",
    "start": "1726240",
    "end": "1731600"
  },
  {
    "text": "with a with an endpoint you'd like to get to but they're private inside your VPC this feature will give you the",
    "start": "1731600",
    "end": "1738480"
  },
  {
    "text": "capability to hook up your Lambda function to call those to retrieve data from them or put data into them Let's",
    "start": "1738480",
    "end": "1745200"
  },
  {
    "text": "take a little bit of of a journey here and see what that's going to look like",
    "start": "1745200",
    "end": "1751559"
  },
  {
    "start": "1757000",
    "end": "1788000"
  },
  {
    "text": "So first of all I want to show you the RDS configuration page and in",
    "start": "1758399",
    "end": "1765760"
  },
  {
    "text": "particular scroll down here this",
    "start": "1767240",
    "end": "1772080"
  },
  {
    "text": "line So I've got an RDS instance a MySQL instance that's not publicly accessible",
    "start": "1773480",
    "end": "1779200"
  },
  {
    "text": "So it's it's visible only within my private",
    "start": "1779200",
    "end": "1784000"
  },
  {
    "text": "VPC I'm going to go ahead and um and show you on the command line here",
    "start": "1787720",
    "end": "1794240"
  },
  {
    "start": "1788000",
    "end": "1972000"
  },
  {
    "text": "what the AWS function configuration looks like And then in a second here we'll step over and look at the code for",
    "start": "1794240",
    "end": "1799440"
  },
  {
    "text": "this But first I want to show you what that configuration is like So here's a Lambda function which I'm",
    "start": "1799440",
    "end": "1805760"
  },
  {
    "text": "going to place inside the same VPC that I've got that RDS instance running And you can see this function",
    "start": "1805760",
    "end": "1811279"
  },
  {
    "text": "config has a new section now called called the VPC config And in that are",
    "start": "1811279",
    "end": "1816320"
  },
  {
    "text": "the security group IDs that you want to use and the subnet IDs So this works",
    "start": "1816320",
    "end": "1821679"
  },
  {
    "text": "just like anything else you would place into an Amazon VPC In particular security groups work",
    "start": "1821679",
    "end": "1828960"
  },
  {
    "text": "exactly the same way So you have full control over whether or not you let that Lambda function see the internet which",
    "start": "1828960",
    "end": "1835679"
  },
  {
    "text": "ports it can use etc Works exactly like everything else inside your",
    "start": "1835679",
    "end": "1841840"
  },
  {
    "text": "VPC Now let's take a look at my sample code here So I've just pulled this up in in",
    "start": "1842760",
    "end": "1850000"
  },
  {
    "text": "Atom because I've actually got multiple libraries",
    "start": "1850000",
    "end": "1854600"
  },
  {
    "text": "And you can see some simple Python code here in which I'm going to retrieve data from my MySQL my MySQL",
    "start": "1856080",
    "end": "1864399"
  },
  {
    "text": "database And I've got some configuration information here These the hosts of which are again are completely private",
    "start": "1864600",
    "end": "1870880"
  },
  {
    "text": "to my VPC And then the code is going to be very simple I'm simply going to open up",
    "start": "1870880",
    "end": "1876640"
  },
  {
    "text": "a connection and then I'm going to iterate through that cursor doing a select star",
    "start": "1876640",
    "end": "1883440"
  },
  {
    "text": "from a from a table I've called lambda and just retrieve a few simple",
    "start": "1883440",
    "end": "1888640"
  },
  {
    "text": "items And then once I've done that just as an illustration of of some of the",
    "start": "1888919",
    "end": "1894080"
  },
  {
    "text": "other capabilities here I'm going to put the count that I've of items I've retrieved into into uh an elastic cache",
    "start": "1894080",
    "end": "1902240"
  },
  {
    "text": "instance So I'm going to take my mem cache and I'm going to go ahead and write some data into that as well So this is very simple toy code but it",
    "start": "1902240",
    "end": "1908640"
  },
  {
    "text": "illustrates the power of VPC grabbing something from a relational database and using a cache that's completely private",
    "start": "1908640",
    "end": "1914720"
  },
  {
    "text": "to me And you can see the result down here So fetch three items out of that RDS my SQL table See the items in the in",
    "start": "1914720",
    "end": "1922480"
  },
  {
    "text": "the log here and some verification that we got",
    "start": "1922480",
    "end": "1927919"
  },
  {
    "text": "that stashed into into my memcache instance And here's the other part that's exciting Um on a hot instance and",
    "start": "1927919",
    "end": "1936000"
  },
  {
    "text": "full disclosure the cold one takes longer as we need to attach ENIs but on a hot instance this works very very",
    "start": "1936000",
    "end": "1941519"
  },
  {
    "text": "quickly And so you see that that duration about uh 67 milliseconds there",
    "start": "1941519",
    "end": "1947640"
  },
  {
    "text": "So great opportunity to use to use something like Elasticash to create a a",
    "start": "1947640",
    "end": "1954000"
  },
  {
    "text": "cross lambda function um information repository so that you get all the benefits of serverlessness and",
    "start": "1954000",
    "end": "1960159"
  },
  {
    "text": "statelessness from your Lambda function while still being able to use things like a MySQL database or a local cache",
    "start": "1960159",
    "end": "1966000"
  },
  {
    "text": "inside your",
    "start": "1966000",
    "end": "1968480"
  },
  {
    "text": "VPC So we talked a little bit about how this works run functions inside the VPC",
    "start": "1972120",
    "end": "1977840"
  },
  {
    "text": "Subnets and security groups work exactly like you'd expect them to We'll be launching this in uh in a",
    "start": "1977840",
    "end": "1984399"
  },
  {
    "text": "few weeks So the functionality you saw here will be the way this way this works and we'll be bringing this out",
    "start": "1984399",
    "end": "1991919"
  },
  {
    "start": "1992000",
    "end": "2074000"
  },
  {
    "text": "shortly All right it's been a busy year Now we'd like you to take take the",
    "start": "1993080",
    "end": "1999600"
  },
  {
    "text": "next step So if you haven't already go check out the AWS Lambda Console You saw me you",
    "start": "1999600",
    "end": "2007039"
  },
  {
    "text": "saw me doing a bunch of coding up here just how simple it is to get started You've got a choice of languages in",
    "start": "2007039",
    "end": "2012240"
  },
  {
    "text": "terms of Python Java Node.js Really easy to run code and the",
    "start": "2012240",
    "end": "2017279"
  },
  {
    "text": "first million invocations are free As a next step try adding one of",
    "start": "2017279",
    "end": "2024640"
  },
  {
    "text": "those many event sources If you've got data in S3 if you've got data in in",
    "start": "2024640",
    "end": "2029720"
  },
  {
    "text": "DynamoB or create an HTTP endpoint very simple to take those things and hook them up to your Lambda",
    "start": "2029720",
    "end": "2038320"
  },
  {
    "text": "code and then build a backend take either the",
    "start": "2041799",
    "end": "2047840"
  },
  {
    "text": "blueprint for a mobile app or an Alexa skills kit blueprint or the new IoT",
    "start": "2047840",
    "end": "2054240"
  },
  {
    "text": "blueprints we'll be publishing next week and with a few few lines of code see how easy it is to create a scalable flexible",
    "start": "2054240",
    "end": "2062398"
  },
  {
    "text": "serverless backend that can provide all of that coding capability without the",
    "start": "2062399",
    "end": "2067440"
  },
  {
    "text": "conventional challenges of standing up",
    "start": "2067440",
    "end": "2071520"
  },
  {
    "text": "infrastructure I want to ask everybody to also Remember to complete your evaluations Um we appreciate that",
    "start": "2073879",
    "end": "2079599"
  },
  {
    "start": "2074000",
    "end": "2124000"
  },
  {
    "text": "feedback and we definitely read all of those comments and also invite you to follow",
    "start": "2079599",
    "end": "2085118"
  },
  {
    "text": "along with us So the compute blog is a fantastic place to see some of the incredible new",
    "start": "2085119",
    "end": "2091839"
  },
  {
    "text": "scenarios that people are doing and also get more detailed information about the scenarios that we've talked about up",
    "start": "2091839",
    "end": "2097440"
  },
  {
    "text": "here today Both the new features we're launching and the features that that we've already brought over the course of",
    "start": "2097440",
    "end": "2102560"
  },
  {
    "text": "the last year We've also done a refresh on our on our website So we've got a lot of customer",
    "start": "2102560",
    "end": "2108000"
  },
  {
    "text": "use cases and studies up there that provide great information about people who are already getting value out of",
    "start": "2108000",
    "end": "2113800"
  },
  {
    "text": "Lambda And of course the Lambda forum is a great place for interactive feedback as you've got questions concerns uh",
    "start": "2113800",
    "end": "2120960"
  },
  {
    "text": "feature requests and so forth",
    "start": "2120960",
    "end": "2125078"
  }
]