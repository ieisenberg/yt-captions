[
  {
    "text": "morning early birds welcome to my",
    "start": "3770",
    "end": "9150"
  },
  {
    "text": "session this today we're going to talk about air B&B journey from self-managed",
    "start": "9150",
    "end": "14820"
  },
  {
    "text": "Redis to ElastiCache Paredes",
    "start": "14820",
    "end": "19430"
  },
  {
    "text": "deserves our agenda we're not talking about a little bit of background on",
    "start": "24450",
    "end": "30390"
  },
  {
    "text": "Airbnb how redis looked like at Airbnb why would chose ElastiCache our",
    "start": "30390",
    "end": "38190"
  },
  {
    "text": "migration requirements the procedure which is the exciting part and we'll do",
    "start": "38190",
    "end": "47309"
  },
  {
    "text": "a summary so a little bit of background",
    "start": "47309",
    "end": "54540"
  },
  {
    "text": "about Airbnb it was founded 10 years ago",
    "start": "54540",
    "end": "59940"
  },
  {
    "text": "and it used to be called air bed-and-breakfast",
    "start": "59940",
    "end": "66380"
  },
  {
    "text": "our mission is to create a world where people can belong through healthy travel",
    "start": "68850",
    "end": "74670"
  },
  {
    "text": "that is local authentic diverse inclusive and sustainable today on the",
    "start": "74670",
    "end": "82320"
  },
  {
    "text": "platform we have 5 more than 5 million unique homes around the world in 80 1000",
    "start": "82320",
    "end": "88259"
  },
  {
    "text": "cities and in 191 countries we have more",
    "start": "88259",
    "end": "94530"
  },
  {
    "text": "than 15,000 unique activities on experiences in more than a thousand",
    "start": "94530",
    "end": "101459"
  },
  {
    "text": "markets so whether you like surfing or cooking or biking you can find something",
    "start": "101459",
    "end": "107369"
  },
  {
    "text": "you like this is how much data we have",
    "start": "107369",
    "end": "112920"
  },
  {
    "text": "stored today we have 104 petah bytes 900",
    "start": "112920",
    "end": "120450"
  },
  {
    "text": "that's only an s3 900 900 42 terabytes",
    "start": "120450",
    "end": "125520"
  },
  {
    "text": "in Aurora and 237 terabytes in Redis so",
    "start": "125520",
    "end": "133290"
  },
  {
    "text": "a little bit of background of what Redis looked like before we migrated to ElastiCache before the migration we had",
    "start": "133290",
    "end": "142620"
  },
  {
    "text": "82 clusters in ec2 that we managed post",
    "start": "142620",
    "end": "151050"
  },
  {
    "text": "migration about a day after a hundred percent migration we had 130 in Alaska",
    "start": "151050",
    "end": "156450"
  },
  {
    "text": "shraddha's clusters and today we actually have more than one hundred and forty-six clusters when we",
    "start": "156450",
    "end": "168120"
  },
  {
    "text": "talk about Redis a lot of times people",
    "start": "168120",
    "end": "174780"
  },
  {
    "text": "think it's just like memcached but a lot",
    "start": "174780",
    "end": "181920"
  },
  {
    "text": "of you know now that would there's many use cases for Redis since it has a lot more features than memcached deep one of",
    "start": "181920",
    "end": "189900"
  },
  {
    "text": "the use cases is authentication right we use it for user login sessions feeds for",
    "start": "189900",
    "end": "197519"
  },
  {
    "text": "homes and experiences verification and fraud detection messaging and payments",
    "start": "197519",
    "end": "205290"
  },
  {
    "text": "these are these are just some of the use cases so we had two types of Redis",
    "start": "205290",
    "end": "216049"
  },
  {
    "text": "architectures that we managed the first one is called or was called the smart",
    "start": "216049",
    "end": "221610"
  },
  {
    "text": "stack Redis this one is pretty simple it's got a primary and a replica",
    "start": "221610",
    "end": "228650"
  },
  {
    "text": "instance it's multi a-z but it didn't",
    "start": "228650",
    "end": "237380"
  },
  {
    "text": "scale well this one aside from",
    "start": "237380",
    "end": "242730"
  },
  {
    "text": "operational overhead we had to manually failover when we got an alert that one",
    "start": "242730",
    "end": "250139"
  },
  {
    "text": "of the instances was down there's no support for sharding and there was also",
    "start": "250139",
    "end": "256650"
  },
  {
    "text": "no encryption support the other",
    "start": "256650",
    "end": "262109"
  },
  {
    "text": "architecture we had was called H a Redis or high availability Redis this one had",
    "start": "262109",
    "end": "268770"
  },
  {
    "text": "auto failover so we had that mechanism in place it was also multi a Z as you can see in",
    "start": "268770",
    "end": "276389"
  },
  {
    "text": "this diagram we had this service called",
    "start": "276389",
    "end": "282539"
  },
  {
    "text": "Redis Sentinel that continually monitored our Redis clusters and",
    "start": "282539",
    "end": "289580"
  },
  {
    "text": "whenever there was a failure failure event we did an automatic",
    "start": "289580",
    "end": "296529"
  },
  {
    "text": "promotion of the replica and and replaced it with a new instance and",
    "start": "296529",
    "end": "302649"
  },
  {
    "text": "published the new primary to our service discovery the cons for for this",
    "start": "302649",
    "end": "313539"
  },
  {
    "text": "architecture was that it had more operational overhead we had to maintain",
    "start": "313539",
    "end": "319479"
  },
  {
    "text": "the Redis Sentinel cluster right that's another framework so it was a lot of",
    "start": "319479",
    "end": "326439"
  },
  {
    "text": "work and a lot of people also didn't understand how that worked in the",
    "start": "326439",
    "end": "333580"
  },
  {
    "text": "background right there were things such as the all of the Redis clusters looking",
    "start": "333580",
    "end": "342219"
  },
  {
    "text": "like it was one huge cluster it was hard",
    "start": "342219",
    "end": "348879"
  },
  {
    "text": "to distinguish which cluster belonged to a service there was no support for sharding either and no encryption",
    "start": "348879",
    "end": "357189"
  },
  {
    "text": "support and with this architecture we",
    "start": "357189",
    "end": "362610"
  },
  {
    "text": "started using two one proxy and that",
    "start": "362610",
    "end": "369009"
  },
  {
    "text": "posed a lot of issues such as restricted commands right for those of you who who",
    "start": "369009",
    "end": "376300"
  },
  {
    "text": "are familiar with one proxy so why did",
    "start": "376300",
    "end": "381729"
  },
  {
    "text": "we choose to use ElastiCache because the",
    "start": "381729",
    "end": "388629"
  },
  {
    "text": "current approach doesn't work right it's difficult to manage there's poor user",
    "start": "388629",
    "end": "395289"
  },
  {
    "text": "experience for example the manual",
    "start": "395289",
    "end": "400419"
  },
  {
    "text": "failover whoever's on call had to had to",
    "start": "400419",
    "end": "407860"
  },
  {
    "text": "respond to that and that also made it",
    "start": "407860",
    "end": "414969"
  },
  {
    "text": "very difficult for us to scale especially when we needed sharding that's just smart socratis but also a",
    "start": "414969",
    "end": "422050"
  },
  {
    "text": "che Redis and it was also very expensive the ec2",
    "start": "422050",
    "end": "429360"
  },
  {
    "text": "instances or instance types that that we had to use in a lot of the clusters",
    "start": "429360",
    "end": "434790"
  },
  {
    "text": "where were expensive instance types very memory intensive instance types with",
    "start": "434790",
    "end": "444870"
  },
  {
    "text": "ElastiCache Redis these are the features that we really liked right key value",
    "start": "444870",
    "end": "450810"
  },
  {
    "text": "store as I mentioned earlier we have many different use cases for for Redis",
    "start": "450810",
    "end": "457650"
  },
  {
    "text": "right we don't just use it as cache for persistent data stores we use it as",
    "start": "457650",
    "end": "465680"
  },
  {
    "text": "really fast in memory data store itself",
    "start": "465680",
    "end": "470870"
  },
  {
    "text": "the high availability and reliability as an SRE that's my favorite we have read",
    "start": "473120",
    "end": "480990"
  },
  {
    "text": "replicas we can have many read replicas and point certain services to directly",
    "start": "480990",
    "end": "487350"
  },
  {
    "text": "read from the replicas multiple primaries we can also have multi a Z",
    "start": "487350",
    "end": "496080"
  },
  {
    "text": "with automatic failover right we don't have to worry about an entire",
    "start": "496080",
    "end": "504440"
  },
  {
    "text": "availability zone going down and now we don't just have we don't just have them",
    "start": "504440",
    "end": "511500"
  },
  {
    "text": "into a Z's we have them in three a Z's it's fully managed and harden we don't",
    "start": "511500",
    "end": "517800"
  },
  {
    "text": "have to worry about upgrades or security patches it's easily scalable right you",
    "start": "517800",
    "end": "526110"
  },
  {
    "text": "can keep adding replicas you can keep expanding your cluster if you if you use",
    "start": "526110",
    "end": "533310"
  },
  {
    "text": "it in cluster mode cluster with up to 6.1 tera terabytes of in memory data",
    "start": "533310",
    "end": "543260"
  },
  {
    "text": "it's secure and compliant so you can",
    "start": "543260",
    "end": "549240"
  },
  {
    "text": "have encryption at rest and in transit there's you can also enforce",
    "start": "549240",
    "end": "555410"
  },
  {
    "text": "using a password migration requirements",
    "start": "555970",
    "end": "565139"
  },
  {
    "text": "we have a very unique requirement right first when we took think about Redis and",
    "start": "565139",
    "end": "572799"
  },
  {
    "text": "caching we don't we don't by default",
    "start": "572799",
    "end": "578829"
  },
  {
    "text": "think of persistent data stores right when caching you can just by default we",
    "start": "578829",
    "end": "587649"
  },
  {
    "text": "think oh we could lose that data it's just cache but because of our",
    "start": "587649",
    "end": "592749"
  },
  {
    "text": "unique use cases and the way we use Redis we have these migration",
    "start": "592749",
    "end": "601269"
  },
  {
    "text": "requirements right we had to have zero downtime from switching from the ec2",
    "start": "601269",
    "end": "606569"
  },
  {
    "text": "Redis cluster to the ElastiCache Redis cluster we had to migrate all our data",
    "start": "606569",
    "end": "612970"
  },
  {
    "text": "there had to be no data loss and no cold",
    "start": "612970",
    "end": "618609"
  },
  {
    "text": "starts right cache had to be had to have",
    "start": "618609",
    "end": "626769"
  },
  {
    "text": "data how did we do that this is the very",
    "start": "626769",
    "end": "635900"
  },
  {
    "text": "difficult part that the ElastiCache team helped us with we did it off testing",
    "start": "635900",
    "end": "641390"
  },
  {
    "text": "first a ton of testing not only to test",
    "start": "641390",
    "end": "648470"
  },
  {
    "text": "that the migration procedure works but benchmarking network throughput and all",
    "start": "648470",
    "end": "657290"
  },
  {
    "text": "of these things so first we had to stage",
    "start": "657290",
    "end": "664910"
  },
  {
    "text": "the application so prepare to redirect rebus traffic from ec2 Redis to",
    "start": "664910",
    "end": "673520"
  },
  {
    "text": "ElastiCache Redis we'll go over all of",
    "start": "673520",
    "end": "679970"
  },
  {
    "text": "these steps in detail and then we have to deploy ElastiCache Redis cluster so",
    "start": "679970",
    "end": "688040"
  },
  {
    "text": "we just provision a new one with sync the data we do the failover and then the",
    "start": "688040",
    "end": "695150"
  },
  {
    "text": "cleanup of the old ec2 Redis cluster so",
    "start": "695150",
    "end": "700550"
  },
  {
    "text": "staging the application here we have to be to be ready to push an update to",
    "start": "700550",
    "end": "706520"
  },
  {
    "text": "production that will redirect gratis traffic to ElastiCache in in this case it's either a configuration change via",
    "start": "706520",
    "end": "714620"
  },
  {
    "text": "chef or a chef rule because that's how we manage ec2 instances or a docker a",
    "start": "714620",
    "end": "723740"
  },
  {
    "text": "change in the docker image and pushing that out for our containerized",
    "start": "723740",
    "end": "729590"
  },
  {
    "text": "applications we make sure the the PR or the pull request is ready to be merged",
    "start": "729590",
    "end": "736030"
  },
  {
    "text": "to redirect the traffic then for the new",
    "start": "736030",
    "end": "741470"
  },
  {
    "text": "ElastiCache Redis cluster it had to be a single node cluster I'll explain that in",
    "start": "741470",
    "end": "750380"
  },
  {
    "text": "a little bit right with multi AZ failover disabled so it had to be a",
    "start": "750380",
    "end": "757400"
  },
  {
    "text": "single node cluster because in order for us to replicate or sync the data from",
    "start": "757400",
    "end": "763460"
  },
  {
    "text": "ec2 Redis we had to make the ElastiCache where this single node cluster a replica right",
    "start": "763460",
    "end": "772879"
  },
  {
    "text": "so now we have a cluster with one master in ec2 one replica and ec2 and the",
    "start": "772879",
    "end": "781339"
  },
  {
    "text": "second replica in elastic cache and then",
    "start": "781339",
    "end": "786499"
  },
  {
    "text": "we allow traffic from EC to EC to Redis",
    "start": "786499",
    "end": "792319"
  },
  {
    "text": "and the application",
    "start": "792319",
    "end": "795670"
  },
  {
    "text": "right this is what so we managed our infrastructure in code and this is what",
    "start": "803120",
    "end": "808410"
  },
  {
    "text": "it looks like when we first deploy the cluster to make it a replica the ElastiCache cluster rather to make it a",
    "start": "808410",
    "end": "815400"
  },
  {
    "text": "replica so if you could see here replica count is zero and auto failover",
    "start": "815400",
    "end": "822810"
  },
  {
    "text": "is disabled right auto failover also has to be disabled in ElastiCache Redis",
    "start": "822810",
    "end": "833760"
  },
  {
    "text": "because you only have one node right one instance and an auto failover can only",
    "start": "833760",
    "end": "839730"
  },
  {
    "text": "be enabled if you have replicas syncing",
    "start": "839730",
    "end": "845250"
  },
  {
    "text": "the data also disclaimer AWS des doesn't",
    "start": "845250",
    "end": "854970"
  },
  {
    "text": "usually support or get this much involved in a migration procedure thanks",
    "start": "854970",
    "end": "860730"
  },
  {
    "text": "very much to the ElastiCache Redis team for making this happen for us but",
    "start": "860730",
    "end": "867090"
  },
  {
    "text": "alerting for for ElastiCache is is a is turned off at this point so we have to",
    "start": "867090",
    "end": "872730"
  },
  {
    "text": "keep that in mind right first because there's only one node in the redness or",
    "start": "872730",
    "end": "880290"
  },
  {
    "text": "ElastiCache Redis cluster and there's no primary so we we have to have monitoring",
    "start": "880290",
    "end": "888450"
  },
  {
    "text": "turned off so syncing the data work the Amazon ElastiCache team enables is the",
    "start": "888450",
    "end": "895860"
  },
  {
    "text": "slave of command right if you look at the ElastiCache rata stock youment ation",
    "start": "895860",
    "end": "901980"
  },
  {
    "text": "on restricted commands these are one of four I believe restricted commands of",
    "start": "901980",
    "end": "909360"
  },
  {
    "text": "slave of so they enable us enable that for us during migration",
    "start": "909360",
    "end": "915110"
  },
  {
    "text": "once the node is is the single node",
    "start": "915110",
    "end": "921060"
  },
  {
    "text": "cluster is deployed in order for us to to make that a replica and then we add",
    "start": "921060",
    "end": "928770"
  },
  {
    "text": "the ElastiCache cluster as a replica and the Redis cluster right so well how do",
    "start": "928770",
    "end": "934200"
  },
  {
    "text": "you do that I just run this this command just your",
    "start": "934200",
    "end": "939910"
  },
  {
    "text": "plain old Redis CLI command from your ec2 Redis primary instance so that adds",
    "start": "939910",
    "end": "953080"
  },
  {
    "text": "the third or the second replica to your ec2 Redis cluster the failover this is I",
    "start": "953080",
    "end": "962500"
  },
  {
    "text": "would say the most critical part because this is where you can you will",
    "start": "962500",
    "end": "971830"
  },
  {
    "text": "definitely get errors right so at this point we have to block traffic to ec2",
    "start": "971830",
    "end": "980080"
  },
  {
    "text": "Redis which will block all rights right you could still you won't get any read",
    "start": "980080",
    "end": "988810"
  },
  {
    "text": "errors but your application will get write errors because now they can't",
    "start": "988810",
    "end": "994750"
  },
  {
    "text": "write to the any any of your ec2 Redis",
    "start": "994750",
    "end": "1000600"
  },
  {
    "text": "nodes or clusters we disable the alerts for ec2 Redis we block the traffic and",
    "start": "1000600",
    "end": "1008520"
  },
  {
    "text": "we allow this sync to finish we have to",
    "start": "1008520",
    "end": "1014790"
  },
  {
    "text": "do this so that we don't lose any data if we don't block traffic rights will",
    "start": "1014790",
    "end": "1022980"
  },
  {
    "text": "continue and sync will never finish right or if we fail over without doing",
    "start": "1022980",
    "end": "1028680"
  },
  {
    "text": "so we'll lose data right not all of the",
    "start": "1028680",
    "end": "1033990"
  },
  {
    "text": "the data it will get to the replicas once we switch over so we disable alerts",
    "start": "1033990",
    "end": "1043670"
  },
  {
    "text": "because you're about to take Redis traffic down you block traffic to do",
    "start": "1043670",
    "end": "1053280"
  },
  {
    "text": "this in smart sack Redis and hae Redis we have to disable this thing called",
    "start": "1053280",
    "end": "1059880"
  },
  {
    "text": "nerve and in our Redis clusters for those of you who are familiar with our",
    "start": "1059880",
    "end": "1066390"
  },
  {
    "text": "open source service discovery framework smart stack nerve is like in our nervous",
    "start": "1066390",
    "end": "1075509"
  },
  {
    "text": "system it reports to the brain right it lets us know that Redis is still working",
    "start": "1075509",
    "end": "1083369"
  },
  {
    "text": "it does health checks it makes sure traffic flows through yeah and then",
    "start": "1083369",
    "end": "1093330"
  },
  {
    "text": "allows thing to finish to ensure there's no data loss and then the failover",
    "start": "1093330",
    "end": "1102860"
  },
  {
    "text": "another critical part now we're at that",
    "start": "1103940",
    "end": "1109350"
  },
  {
    "text": "point where our application is is getting right errors so we need to",
    "start": "1109350",
    "end": "1116909"
  },
  {
    "text": "update the application configuration point to point to the new ElastiCache",
    "start": "1116909",
    "end": "1122129"
  },
  {
    "text": "Redis endpoint so in this diagram you",
    "start": "1122129",
    "end": "1127619"
  },
  {
    "text": "can see that we're writing to the ec2 primary but we've blocked that right and",
    "start": "1127619",
    "end": "1132799"
  },
  {
    "text": "both the ec2 replica and the ElastiCache replicas are syncing so we have to push",
    "start": "1132799",
    "end": "1142230"
  },
  {
    "text": "what we staged earlier in in the pull",
    "start": "1142230",
    "end": "1147690"
  },
  {
    "text": "request earlier for current configuration management or your docker image so this is what it looks like for",
    "start": "1147690",
    "end": "1155070"
  },
  {
    "text": "us because we're using smart stack for service discovery so we stopped nerve",
    "start": "1155070",
    "end": "1161929"
  },
  {
    "text": "that's how we block the traffic and then",
    "start": "1161929",
    "end": "1168859"
  },
  {
    "text": "we get the status of the replication right as you can see we have two",
    "start": "1169249",
    "end": "1176009"
  },
  {
    "text": "connected replicas one of them is the ec2 Redis replicas and the other is the",
    "start": "1176009",
    "end": "1182419"
  },
  {
    "text": "ElastiCache Redis replicas what we want to look at here is the offset and make",
    "start": "1182419",
    "end": "1191279"
  },
  {
    "text": "sure that matches",
    "start": "1191279",
    "end": "1194239"
  },
  {
    "text": "right so this is where you finally do",
    "start": "1197400",
    "end": "1205390"
  },
  {
    "text": "your merge either for us it was via chef and docker docker image at this point",
    "start": "1205390",
    "end": "1216670"
  },
  {
    "text": "your application is still getting readwrite errors usually that error",
    "start": "1216670",
    "end": "1222490"
  },
  {
    "text": "would look like can't write to our read replica right because you've failed over",
    "start": "1222490",
    "end": "1230680"
  },
  {
    "text": "you've directed your traffic you configuration you're configuration management you've made the change to",
    "start": "1230680",
    "end": "1238000"
  },
  {
    "text": "have your service or your application read and write from the ec2 Redis host now to the ElastiCache Redis cluster",
    "start": "1238000",
    "end": "1246450"
  },
  {
    "text": "which is still allarakha replicas which still only has one node and which still",
    "start": "1246450",
    "end": "1253840"
  },
  {
    "text": "has no auto failover enabled so what's",
    "start": "1253840",
    "end": "1264820"
  },
  {
    "text": "the next step now we need to promote the single node ElastiCache Redis cluster",
    "start": "1264820",
    "end": "1273040"
  },
  {
    "text": "right we have to make that replica a a master",
    "start": "1273040",
    "end": "1279930"
  },
  {
    "text": "and you you just issue the slave of no one commence earlier we did the the",
    "start": "1284160",
    "end": "1290309"
  },
  {
    "text": "slave of command to make the ElastiCache cluster a replica of ec2 Redis now we're",
    "start": "1290309",
    "end": "1299070"
  },
  {
    "text": "issuing the command that it should be a slave of no one so the this is the three",
    "start": "1299070",
    "end": "1310860"
  },
  {
    "text": "steps to do the failover right we promote the replica the ElastiCache Redis replica we add a replica to it and",
    "start": "1310860",
    "end": "1318990"
  },
  {
    "text": "we enable the multi AZ failover at this",
    "start": "1318990",
    "end": "1324510"
  },
  {
    "text": "point we get the AWS elastic cache team",
    "start": "1324510",
    "end": "1329820"
  },
  {
    "text": "involved again right so first I do the",
    "start": "1329820",
    "end": "1337429"
  },
  {
    "text": "the promotion and then this changed so",
    "start": "1337429",
    "end": "1348240"
  },
  {
    "text": "earlier we saw this block of code where we have zero replicas and we have auto",
    "start": "1348240",
    "end": "1355799"
  },
  {
    "text": "failover disabled you just make those",
    "start": "1355799",
    "end": "1361049"
  },
  {
    "text": "two lines of code changes to enable Oh",
    "start": "1361049",
    "end": "1366140"
  },
  {
    "text": "first first you have to add a replica",
    "start": "1366140",
    "end": "1371390"
  },
  {
    "text": "because you can't enable and add a replica at the same time once that's provisioned and and ready to",
    "start": "1371390",
    "end": "1378360"
  },
  {
    "text": "go usually takes a while it depends on how much data you have in memory and",
    "start": "1378360",
    "end": "1388409"
  },
  {
    "text": "then you just enable that the default is enabled so we just delete that line of",
    "start": "1388409",
    "end": "1395010"
  },
  {
    "text": "code so now we have a fully configured",
    "start": "1395010",
    "end": "1402299"
  },
  {
    "text": "and loaded Redis right we have primary and we have replica it's multi a-z you",
    "start": "1402299",
    "end": "1410520"
  },
  {
    "text": "can add another replica so we have to",
    "start": "1410520",
    "end": "1416070"
  },
  {
    "text": "notify the ElastiCache to disable the slave of command at this",
    "start": "1416070",
    "end": "1421290"
  },
  {
    "text": "point so that they can also turn on monitoring for the ElastiCache Redis",
    "start": "1421290",
    "end": "1426390"
  },
  {
    "text": "cluster because without monitoring they",
    "start": "1426390",
    "end": "1432750"
  },
  {
    "text": "can we can't have Auto failover right so what do we do next this is my favorite",
    "start": "1432750",
    "end": "1442590"
  },
  {
    "text": "part is cleanup now we can finally",
    "start": "1442590",
    "end": "1447750"
  },
  {
    "text": "terminate those ec2 Redis clusters instances terminate proxy instances if",
    "start": "1447750",
    "end": "1456390"
  },
  {
    "text": "you're using 'too and proxy right in our case in our H a Redis clusters we were using time proxy and then we delete",
    "start": "1456390",
    "end": "1465660"
  },
  {
    "text": "Redis and the proxy configurations everywhere a lot of you may be wondering",
    "start": "1465660",
    "end": "1475700"
  },
  {
    "text": "and I'll have time for questions later a lot of you may be wondering about a",
    "start": "1475700",
    "end": "1482490"
  },
  {
    "text": "rollback plan right what if this doesn't work how do we roll back what do we do",
    "start": "1482490",
    "end": "1489300"
  },
  {
    "text": "can we go back to ec2 Redis you can if",
    "start": "1489300",
    "end": "1496020"
  },
  {
    "text": "you're willing to take some data loss you can go back to ec2 Redis before you",
    "start": "1496020",
    "end": "1501540"
  },
  {
    "text": "terminate it right if you do so you're supposed to do some testing right after",
    "start": "1501540",
    "end": "1508680"
  },
  {
    "text": "you do that failover right to make sure you got rid of the readwrite errors you're receiving data you have",
    "start": "1508680",
    "end": "1515550"
  },
  {
    "text": "connection from clients but if that fails you can roll roll back your",
    "start": "1515550",
    "end": "1522750"
  },
  {
    "text": "traffic by rolling back those pull requests as well but you will get data",
    "start": "1522750",
    "end": "1528000"
  },
  {
    "text": "loss another thing you could do to avoid",
    "start": "1528000",
    "end": "1533880"
  },
  {
    "text": "that is of course to to have retries write a lot of retries",
    "start": "1533880",
    "end": "1542600"
  },
  {
    "text": "recap just a little bit summary of what",
    "start": "1547450",
    "end": "1555020"
  },
  {
    "text": "we went over so stage ik right stage the application make those pull requests to",
    "start": "1555020",
    "end": "1562700"
  },
  {
    "text": "divert your traffic from ec2 Redis to ElastiCache Redis be ready to merge that",
    "start": "1562700",
    "end": "1570820"
  },
  {
    "text": "deploy your ElastiCache brightest cluster your single node ElastiCache",
    "start": "1570820",
    "end": "1576140"
  },
  {
    "text": "Redis cluster with Auto failover disabled contact the let the ElastiCache",
    "start": "1576140",
    "end": "1584240"
  },
  {
    "text": "Redis team know so that they can enable the slave of command for you sync the",
    "start": "1584240",
    "end": "1592220"
  },
  {
    "text": "data so add the ElastiCache Redis cluster as a replica to your ec2 Redis",
    "start": "1592220",
    "end": "1601300"
  },
  {
    "text": "wait for that to finish and perform your failover performing the failover is a",
    "start": "1601300",
    "end": "1610040"
  },
  {
    "text": "three-step process right we have to",
    "start": "1610040",
    "end": "1614590"
  },
  {
    "text": "block the traffic to ec2 Redis where's",
    "start": "1617020",
    "end": "1624530"
  },
  {
    "text": "your pull request to make your",
    "start": "1624530",
    "end": "1630050"
  },
  {
    "text": "application start reading and writing to the ElastiCache Redis node and finally",
    "start": "1630050",
    "end": "1639620"
  },
  {
    "text": "cleanup right you can now clean up and terminate your as easy to read as'",
    "start": "1639620",
    "end": "1645610"
  },
  {
    "text": "cluster some takeaways that we have is",
    "start": "1645610",
    "end": "1655330"
  },
  {
    "text": "that Redis is is not only or not only",
    "start": "1655330",
    "end": "1660890"
  },
  {
    "text": "used for caching right memcache D is is a very simple caching framework and can",
    "start": "1660890",
    "end": "1671870"
  },
  {
    "text": "be used to cache or to use it in front of your persistent data stores but Redis is a bit more",
    "start": "1671870",
    "end": "1679310"
  },
  {
    "text": "full-featured and you can use it as a really fast in memory database message",
    "start": "1679310",
    "end": "1685760"
  },
  {
    "text": "broker queuing system for scheduling right it's fully managed and hardened so",
    "start": "1685760",
    "end": "1694190"
  },
  {
    "text": "we don't have to worry about patching it we don't have to worry about updating or",
    "start": "1694190",
    "end": "1700490"
  },
  {
    "text": "upgrading to versions it's high it's got monitoring failure recovery and backups",
    "start": "1700490",
    "end": "1707750"
  },
  {
    "text": "right snapshots you can have daily snapshots it's secure and compliant in",
    "start": "1707750",
    "end": "1713840"
  },
  {
    "text": "our case that's a big win for at rest and in transit encryption for compliance",
    "start": "1713840",
    "end": "1721720"
  },
  {
    "text": "it's highly available and reliable that auto failover feature and multi a-z is",
    "start": "1721720",
    "end": "1730120"
  },
  {
    "text": "is has been really good for us right especially because previously we had",
    "start": "1730120",
    "end": "1739180"
  },
  {
    "text": "clusters that we had to manually failover it's easily scalable now we have",
    "start": "1739180",
    "end": "1746570"
  },
  {
    "text": "sharding support right where we couldn't previously scale some of our clusters",
    "start": "1746570",
    "end": "1754520"
  },
  {
    "text": "because of that we had one offs but it",
    "start": "1754520",
    "end": "1759920"
  },
  {
    "text": "wasn't a standard now it's super easy just enable cluster mode right and you",
    "start": "1759920",
    "end": "1769010"
  },
  {
    "text": "could do this in place so the nice thing about this also that I've noticed is we",
    "start": "1769010",
    "end": "1774860"
  },
  {
    "text": "can expand our shortage clusters in",
    "start": "1774860",
    "end": "1780290"
  },
  {
    "text": "place we can add replicas in place and all of these things and it doesn't give",
    "start": "1780290",
    "end": "1785750"
  },
  {
    "text": "us any downtime I'll save some time for",
    "start": "1785750",
    "end": "1792290"
  },
  {
    "text": "for questions you can also pull me aside later on for any other questions but",
    "start": "1792290",
    "end": "1797990"
  },
  {
    "text": "thank you [Applause]",
    "start": "1797990",
    "end": "1806459"
  }
]