[
  {
    "start": "0",
    "end": "40000"
  },
  {
    "text": "hey everyone this is melina from the aws",
    "start": "719",
    "end": "3439"
  },
  {
    "text": "startup solutions architect team and",
    "start": "3439",
    "end": "5520"
  },
  {
    "text": "today i will be demonstrating how to",
    "start": "5520",
    "end": "7279"
  },
  {
    "text": "build an analytics pipeline from your",
    "start": "7279",
    "end": "9440"
  },
  {
    "text": "iot data on aws",
    "start": "9440",
    "end": "11920"
  },
  {
    "text": "this can be used for building upon data",
    "start": "11920",
    "end": "13840"
  },
  {
    "text": "being ingested into aws iot core and",
    "start": "13840",
    "end": "16480"
  },
  {
    "text": "using it for analysis and creating",
    "start": "16480",
    "end": "18240"
  },
  {
    "text": "reports that can then be utilized to",
    "start": "18240",
    "end": "20720"
  },
  {
    "text": "gain actionable insights on how to",
    "start": "20720",
    "end": "22640"
  },
  {
    "text": "improve your products and overall",
    "start": "22640",
    "end": "24240"
  },
  {
    "text": "experience",
    "start": "24240",
    "end": "26160"
  },
  {
    "text": "all the services that we're going to be",
    "start": "26160",
    "end": "27599"
  },
  {
    "text": "using today are serverless that means",
    "start": "27599",
    "end": "29840"
  },
  {
    "text": "that they are fully managed by aws so",
    "start": "29840",
    "end": "32160"
  },
  {
    "text": "you do not have to maintain any",
    "start": "32160",
    "end": "33680"
  },
  {
    "text": "infrastructure worry about manually",
    "start": "33680",
    "end": "35760"
  },
  {
    "text": "scaling it or pay anything upfront",
    "start": "35760",
    "end": "39839"
  },
  {
    "start": "40000",
    "end": "68000"
  },
  {
    "text": "with that said let's look at the",
    "start": "40079",
    "end": "41680"
  },
  {
    "text": "prerequisites for this tutorial in order",
    "start": "41680",
    "end": "44640"
  },
  {
    "text": "to recreate what we will be building",
    "start": "44640",
    "end": "46320"
  },
  {
    "text": "today you will need casity and aws",
    "start": "46320",
    "end": "49360"
  },
  {
    "text": "account",
    "start": "49360",
    "end": "50480"
  },
  {
    "text": "if you are new to awps you can make use",
    "start": "50480",
    "end": "52719"
  },
  {
    "text": "of the free tier that lets you try out",
    "start": "52719",
    "end": "54640"
  },
  {
    "text": "some aws services free of charge for a",
    "start": "54640",
    "end": "57039"
  },
  {
    "text": "certain amount of usage",
    "start": "57039",
    "end": "59199"
  },
  {
    "text": "within your account you need one or more",
    "start": "59199",
    "end": "61199"
  },
  {
    "text": "devices that are connected to the",
    "start": "61199",
    "end": "62879"
  },
  {
    "text": "service aws if the court and sending in",
    "start": "62879",
    "end": "65920"
  },
  {
    "text": "messages",
    "start": "65920",
    "end": "68400"
  },
  {
    "start": "68000",
    "end": "110000"
  },
  {
    "text": "to give a brief overview we will be",
    "start": "69360",
    "end": "71360"
  },
  {
    "text": "storing all the incoming messages from",
    "start": "71360",
    "end": "73520"
  },
  {
    "text": "aws iot core to a data lake in amazon s3",
    "start": "73520",
    "end": "77119"
  },
  {
    "text": "with an intermediate step of aggregating",
    "start": "77119",
    "end": "79439"
  },
  {
    "text": "them using amazon kinesis data files",
    "start": "79439",
    "end": "83200"
  },
  {
    "text": "amazon s3 is aws object storage service",
    "start": "83200",
    "end": "86560"
  },
  {
    "text": "that scales virtually infinitely is cost",
    "start": "86560",
    "end": "89200"
  },
  {
    "text": "efficient and offers 119 securability",
    "start": "89200",
    "end": "92720"
  },
  {
    "text": "thus being an ideal candidate for data",
    "start": "92720",
    "end": "94880"
  },
  {
    "text": "leaks",
    "start": "94880",
    "end": "96159"
  },
  {
    "text": "we will be querying the data in amazon",
    "start": "96159",
    "end": "98079"
  },
  {
    "text": "s3 in place using recurring service",
    "start": "98079",
    "end": "100799"
  },
  {
    "text": "amazon athena",
    "start": "100799",
    "end": "102320"
  },
  {
    "text": "and finally visualizing the created",
    "start": "102320",
    "end": "104320"
  },
  {
    "text": "analyses in our business intelligence",
    "start": "104320",
    "end": "106560"
  },
  {
    "text": "service amazon quick site",
    "start": "106560",
    "end": "110240"
  },
  {
    "start": "110000",
    "end": "141000"
  },
  {
    "text": "so let's get started here we are at the",
    "start": "110960",
    "end": "113200"
  },
  {
    "text": "aws management console",
    "start": "113200",
    "end": "115360"
  },
  {
    "text": "let's go into aws iot core",
    "start": "115360",
    "end": "119119"
  },
  {
    "text": "for the purpose of this demo we are",
    "start": "119119",
    "end": "121040"
  },
  {
    "text": "already getting our data from e-scooters",
    "start": "121040",
    "end": "123040"
  },
  {
    "text": "owned by a fictional mobility company",
    "start": "123040",
    "end": "124880"
  },
  {
    "text": "called octan",
    "start": "124880",
    "end": "126479"
  },
  {
    "text": "i've connected a raspberry pi device",
    "start": "126479",
    "end": "128319"
  },
  {
    "text": "that is simulating this data and sending",
    "start": "128319",
    "end": "130640"
  },
  {
    "text": "updates to iot code",
    "start": "130640",
    "end": "133200"
  },
  {
    "text": "we can confirm that by expanding the",
    "start": "133200",
    "end": "135440"
  },
  {
    "text": "test menu and going into the mqtt test",
    "start": "135440",
    "end": "138160"
  },
  {
    "text": "client provided by aws iot",
    "start": "138160",
    "end": "141840"
  },
  {
    "start": "141000",
    "end": "200000"
  },
  {
    "text": "here we can subscribe to specific topics",
    "start": "141840",
    "end": "144000"
  },
  {
    "text": "where our devices are publishing data",
    "start": "144000",
    "end": "146560"
  },
  {
    "text": "or by just using hash we can subscribe",
    "start": "146560",
    "end": "149680"
  },
  {
    "text": "to all topics that are receiving data",
    "start": "149680",
    "end": "153200"
  },
  {
    "text": "we will subscribe to the octane escorter",
    "start": "153200",
    "end": "155599"
  },
  {
    "text": "topic here",
    "start": "155599",
    "end": "158239"
  },
  {
    "text": "as this is the topic where all our",
    "start": "159599",
    "end": "161440"
  },
  {
    "text": "simulated devices are publishing their",
    "start": "161440",
    "end": "163599"
  },
  {
    "text": "updates",
    "start": "163599",
    "end": "166000"
  },
  {
    "text": "we can see the data as it is being",
    "start": "167920",
    "end": "169599"
  },
  {
    "text": "received here",
    "start": "169599",
    "end": "171040"
  },
  {
    "text": "for each data point there is a device id",
    "start": "171040",
    "end": "173519"
  },
  {
    "text": "to identify the scooter as well as other",
    "start": "173519",
    "end": "176160"
  },
  {
    "text": "attributes such as battery",
    "start": "176160",
    "end": "179760"
  },
  {
    "text": "speed",
    "start": "179760",
    "end": "181440"
  },
  {
    "text": "location",
    "start": "181440",
    "end": "182720"
  },
  {
    "text": "and the time at which the data was",
    "start": "182720",
    "end": "184319"
  },
  {
    "text": "sampled",
    "start": "184319",
    "end": "185920"
  },
  {
    "text": "now that we have data coming into aws",
    "start": "185920",
    "end": "188239"
  },
  {
    "text": "iot core the next step is to forward",
    "start": "188239",
    "end": "190640"
  },
  {
    "text": "this data into the analytics pipeline",
    "start": "190640",
    "end": "194800"
  },
  {
    "text": "go to the act section within iot core",
    "start": "195120",
    "end": "198000"
  },
  {
    "text": "and click on rules",
    "start": "198000",
    "end": "199920"
  },
  {
    "text": "this will take us to the roles engine",
    "start": "199920",
    "end": "202319"
  },
  {
    "start": "200000",
    "end": "308000"
  },
  {
    "text": "the rules engine gives us the ability to",
    "start": "202319",
    "end": "204239"
  },
  {
    "text": "create rules that analyze the data",
    "start": "204239",
    "end": "206480"
  },
  {
    "text": "coming into the different topic streams",
    "start": "206480",
    "end": "208720"
  },
  {
    "text": "using standard sql and trigger actions",
    "start": "208720",
    "end": "211280"
  },
  {
    "text": "on it",
    "start": "211280",
    "end": "213280"
  },
  {
    "text": "now click on create a rule and give it",
    "start": "213280",
    "end": "215760"
  },
  {
    "text": "an appropriate name",
    "start": "215760",
    "end": "218910"
  },
  {
    "text": "[Music]",
    "start": "218910",
    "end": "226400"
  },
  {
    "text": "we can optionally add a description here",
    "start": "226400",
    "end": "228400"
  },
  {
    "text": "as well",
    "start": "228400",
    "end": "230799"
  },
  {
    "text": "in the rule query statement we can write",
    "start": "232159",
    "end": "234799"
  },
  {
    "text": "sql statements to select all or specific",
    "start": "234799",
    "end": "237519"
  },
  {
    "text": "attributes from the topic we can",
    "start": "237519",
    "end": "240239"
  },
  {
    "text": "additionally use the where clause to add",
    "start": "240239",
    "end": "242239"
  },
  {
    "text": "conditions",
    "start": "242239",
    "end": "243760"
  },
  {
    "text": "in our case we will select all the",
    "start": "243760",
    "end": "245439"
  },
  {
    "text": "attributes that we are getting from the",
    "start": "245439",
    "end": "247040"
  },
  {
    "text": "octane e-scooter topic by using an",
    "start": "247040",
    "end": "249840"
  },
  {
    "text": "asterisk",
    "start": "249840",
    "end": "252400"
  },
  {
    "text": "moving on to the next step we can add",
    "start": "253599",
    "end": "255840"
  },
  {
    "text": "actions to our rule that would be",
    "start": "255840",
    "end": "257600"
  },
  {
    "text": "triggered when the rule gets executed",
    "start": "257600",
    "end": "260799"
  },
  {
    "text": "rule engine integrates with a lot of",
    "start": "260799",
    "end": "262560"
  },
  {
    "text": "other aws services such as amazon",
    "start": "262560",
    "end": "264880"
  },
  {
    "text": "dynamodb",
    "start": "264880",
    "end": "266320"
  },
  {
    "text": "which is our no sql database offering",
    "start": "266320",
    "end": "269520"
  },
  {
    "text": "aws lambda and amazon sqs",
    "start": "269520",
    "end": "272460"
  },
  {
    "text": "[Music]",
    "start": "272460",
    "end": "273600"
  },
  {
    "text": "the straightforward option for an action",
    "start": "273600",
    "end": "275600"
  },
  {
    "text": "here would be to store each message in",
    "start": "275600",
    "end": "277680"
  },
  {
    "text": "an amazon s3 bucket the challenge then",
    "start": "277680",
    "end": "280560"
  },
  {
    "text": "would be that any time awsite or",
    "start": "280560",
    "end": "283280"
  },
  {
    "text": "receives a message it would be stored as",
    "start": "283280",
    "end": "285360"
  },
  {
    "text": "a new object in s3",
    "start": "285360",
    "end": "287440"
  },
  {
    "text": "if you have a thousand devices sending",
    "start": "287440",
    "end": "289120"
  },
  {
    "text": "in one data record every second that",
    "start": "289120",
    "end": "291199"
  },
  {
    "text": "would result in 1000 new objects per",
    "start": "291199",
    "end": "293759"
  },
  {
    "text": "second",
    "start": "293759",
    "end": "294800"
  },
  {
    "text": "therefore we can add an intermediate",
    "start": "294800",
    "end": "296560"
  },
  {
    "text": "aggregation step where each record is",
    "start": "296560",
    "end": "299440"
  },
  {
    "text": "batched before being sent forward to the",
    "start": "299440",
    "end": "301600"
  },
  {
    "text": "s3 bucket",
    "start": "301600",
    "end": "302880"
  },
  {
    "text": "for this we would use amazon kinesis",
    "start": "302880",
    "end": "304880"
  },
  {
    "text": "data fire host",
    "start": "304880",
    "end": "307759"
  },
  {
    "start": "308000",
    "end": "486000"
  },
  {
    "text": "amazon kinesis data firehose gives us",
    "start": "308720",
    "end": "310800"
  },
  {
    "text": "the option to create a delivery stream",
    "start": "310800",
    "end": "313120"
  },
  {
    "text": "that collects these records that are",
    "start": "313120",
    "end": "314720"
  },
  {
    "text": "coming in before sending them to the",
    "start": "314720",
    "end": "316880"
  },
  {
    "text": "destination",
    "start": "316880",
    "end": "318320"
  },
  {
    "text": "optionally it can transform as well as",
    "start": "318320",
    "end": "320479"
  },
  {
    "text": "convert the format of the data",
    "start": "320479",
    "end": "323039"
  },
  {
    "text": "so before we configure the action we",
    "start": "323039",
    "end": "325280"
  },
  {
    "text": "need to create a delivery stream",
    "start": "325280",
    "end": "327280"
  },
  {
    "text": "and in order to do that we will select",
    "start": "327280",
    "end": "329919"
  },
  {
    "text": "the create a new resource option",
    "start": "329919",
    "end": "333360"
  },
  {
    "text": "this will switch us over to the amazon",
    "start": "333360",
    "end": "335199"
  },
  {
    "text": "kinesis data firehose console",
    "start": "335199",
    "end": "338400"
  },
  {
    "text": "now click on create delivery stream",
    "start": "338400",
    "end": "341360"
  },
  {
    "text": "and give it a meaningful name",
    "start": "341360",
    "end": "345510"
  },
  {
    "text": "[Music]",
    "start": "345510",
    "end": "353160"
  },
  {
    "text": "since the data is coming in from aws iot",
    "start": "354080",
    "end": "356800"
  },
  {
    "text": "for the source we will keep it as direct",
    "start": "356800",
    "end": "358720"
  },
  {
    "text": "put or other sources",
    "start": "358720",
    "end": "360880"
  },
  {
    "text": "we can optionally enable encryption on",
    "start": "360880",
    "end": "362880"
  },
  {
    "text": "the delivery stream and use an aws on",
    "start": "362880",
    "end": "365520"
  },
  {
    "text": "key or a customer managed key",
    "start": "365520",
    "end": "368160"
  },
  {
    "text": "but we will skip this step for now and",
    "start": "368160",
    "end": "370400"
  },
  {
    "text": "uncheck the checkbox",
    "start": "370400",
    "end": "373280"
  },
  {
    "text": "and then",
    "start": "373280",
    "end": "374400"
  },
  {
    "text": "click on next",
    "start": "374400",
    "end": "377199"
  },
  {
    "text": "for the destination we will choose",
    "start": "379360",
    "end": "381039"
  },
  {
    "text": "amazon s3 as that is where our bucket",
    "start": "381039",
    "end": "383280"
  },
  {
    "text": "for the data lake will reside",
    "start": "383280",
    "end": "385360"
  },
  {
    "text": "so now we scroll down choosing an sp",
    "start": "385360",
    "end": "387680"
  },
  {
    "text": "bucket",
    "start": "387680",
    "end": "388639"
  },
  {
    "text": "if you already have a bucket created for",
    "start": "388639",
    "end": "390560"
  },
  {
    "text": "this purpose you can select it from the",
    "start": "390560",
    "end": "392639"
  },
  {
    "text": "drop down so we will select our bucket",
    "start": "392639",
    "end": "395520"
  },
  {
    "text": "from here",
    "start": "395520",
    "end": "397759"
  },
  {
    "text": "if you don't have such a bucket in place",
    "start": "397759",
    "end": "399919"
  },
  {
    "text": "then you can create a new bucket by",
    "start": "399919",
    "end": "402160"
  },
  {
    "text": "clicking on create new",
    "start": "402160",
    "end": "403919"
  },
  {
    "text": "give it a name",
    "start": "403919",
    "end": "405199"
  },
  {
    "text": "select the region for the bucket and so",
    "start": "405199",
    "end": "407520"
  },
  {
    "text": "on",
    "start": "407520",
    "end": "408720"
  },
  {
    "text": "now click on next",
    "start": "408720",
    "end": "411120"
  },
  {
    "text": "on the configure settings page you will",
    "start": "411120",
    "end": "413360"
  },
  {
    "text": "have two important parameters to",
    "start": "413360",
    "end": "414880"
  },
  {
    "text": "configure",
    "start": "414880",
    "end": "416160"
  },
  {
    "text": "these are the buffer conditions amazon",
    "start": "416160",
    "end": "417919"
  },
  {
    "text": "can use the data fire host checks before",
    "start": "417919",
    "end": "419840"
  },
  {
    "text": "delivering brackets to s3 bucket",
    "start": "419840",
    "end": "423280"
  },
  {
    "text": "the two conditions are buffer size which",
    "start": "423280",
    "end": "425440"
  },
  {
    "text": "is the total size of the aggregated",
    "start": "425440",
    "end": "427120"
  },
  {
    "text": "records",
    "start": "427120",
    "end": "428240"
  },
  {
    "text": "and with buffer interval which is the",
    "start": "428240",
    "end": "431039"
  },
  {
    "text": "number of seconds since the last",
    "start": "431039",
    "end": "432880"
  },
  {
    "text": "delivery was triggered",
    "start": "432880",
    "end": "435120"
  },
  {
    "text": "once either of these conditions is",
    "start": "435120",
    "end": "436800"
  },
  {
    "text": "fulfilled all the records in the",
    "start": "436800",
    "end": "438639"
  },
  {
    "text": "delivery stream are",
    "start": "438639",
    "end": "440400"
  },
  {
    "text": "sent to our data lake",
    "start": "440400",
    "end": "442720"
  },
  {
    "text": "depending on our payload size and",
    "start": "442720",
    "end": "444479"
  },
  {
    "text": "latency requirements we can tune these",
    "start": "444479",
    "end": "446800"
  },
  {
    "text": "parameters for now we will leave them as",
    "start": "446800",
    "end": "449599"
  },
  {
    "text": "default",
    "start": "449599",
    "end": "451599"
  },
  {
    "text": "for all of the other fields as well we",
    "start": "451599",
    "end": "453520"
  },
  {
    "text": "will keep the defaults and jump to the",
    "start": "453520",
    "end": "455680"
  },
  {
    "text": "review page",
    "start": "455680",
    "end": "457919"
  },
  {
    "text": "after reviewing all of the options we",
    "start": "457919",
    "end": "460000"
  },
  {
    "text": "will select create delivery stream",
    "start": "460000",
    "end": "463759"
  },
  {
    "text": "now this is the point where it might",
    "start": "463759",
    "end": "465280"
  },
  {
    "text": "take a few moments to create the",
    "start": "465280",
    "end": "466560"
  },
  {
    "text": "delivery stream",
    "start": "466560",
    "end": "470039"
  },
  {
    "text": "now that the delivery stream has been",
    "start": "482400",
    "end": "484080"
  },
  {
    "text": "created head back to the rules engine",
    "start": "484080",
    "end": "486080"
  },
  {
    "start": "486000",
    "end": "539000"
  },
  {
    "text": "tab",
    "start": "486080",
    "end": "487039"
  },
  {
    "text": "from the stream name drop down select",
    "start": "487039",
    "end": "489360"
  },
  {
    "text": "the name of our newly created delivery",
    "start": "489360",
    "end": "491120"
  },
  {
    "text": "stream",
    "start": "491120",
    "end": "492800"
  },
  {
    "text": "you can also have a separator added",
    "start": "492800",
    "end": "494560"
  },
  {
    "text": "between the brackets that you are",
    "start": "494560",
    "end": "496160"
  },
  {
    "text": "sending to amazon kinesis data firehose",
    "start": "496160",
    "end": "498720"
  },
  {
    "text": "but that is optional",
    "start": "498720",
    "end": "501199"
  },
  {
    "text": "as a penultimate step to creating our",
    "start": "501199",
    "end": "503039"
  },
  {
    "text": "rule we need to give iot permissions to",
    "start": "503039",
    "end": "505759"
  },
  {
    "text": "put objects into our delivery stream",
    "start": "505759",
    "end": "508400"
  },
  {
    "text": "so for that purpose we will click on",
    "start": "508400",
    "end": "510400"
  },
  {
    "text": "create a role",
    "start": "510400",
    "end": "512800"
  },
  {
    "text": "this will create a role with permissions",
    "start": "512800",
    "end": "514560"
  },
  {
    "text": "to put records into delivery stream on",
    "start": "514560",
    "end": "516880"
  },
  {
    "text": "our behalf",
    "start": "516880",
    "end": "518880"
  },
  {
    "text": "we will name our role as aws iot fire",
    "start": "518880",
    "end": "522399"
  },
  {
    "text": "hose role",
    "start": "522399",
    "end": "524959"
  },
  {
    "text": "and then click on create all",
    "start": "527200",
    "end": "530640"
  },
  {
    "text": "then the next step would be to add this",
    "start": "531360",
    "end": "533760"
  },
  {
    "text": "as an action",
    "start": "533760",
    "end": "536080"
  },
  {
    "text": "and finally creating the rule",
    "start": "536080",
    "end": "539920"
  },
  {
    "start": "539000",
    "end": "588000"
  },
  {
    "text": "this will start sending all of our",
    "start": "539920",
    "end": "541519"
  },
  {
    "text": "incoming data from the opt-in key",
    "start": "541519",
    "end": "543279"
  },
  {
    "text": "scooter topic into the octane delivery",
    "start": "543279",
    "end": "545519"
  },
  {
    "text": "screen and then finally the octane data",
    "start": "545519",
    "end": "547600"
  },
  {
    "text": "link in amazon s3",
    "start": "547600",
    "end": "550880"
  },
  {
    "text": "by accessing the data",
    "start": "551120",
    "end": "553200"
  },
  {
    "text": "via the amazon sd console in our data",
    "start": "553200",
    "end": "556000"
  },
  {
    "text": "lake we can double check the storage of",
    "start": "556000",
    "end": "558160"
  },
  {
    "text": "the iot data",
    "start": "558160",
    "end": "559920"
  },
  {
    "text": "amazon can use this data fire hose adds",
    "start": "559920",
    "end": "562000"
  },
  {
    "text": "default date time prefixes to objects",
    "start": "562000",
    "end": "564560"
  },
  {
    "text": "before saving them in the bucket",
    "start": "564560",
    "end": "566880"
  },
  {
    "text": "these prefixes are customizable and",
    "start": "566880",
    "end": "568800"
  },
  {
    "text": "create folder structure within the data",
    "start": "568800",
    "end": "570800"
  },
  {
    "text": "lake",
    "start": "570800",
    "end": "572000"
  },
  {
    "text": "going deeper into the folders we can",
    "start": "572000",
    "end": "573680"
  },
  {
    "text": "take a look at the objects that were",
    "start": "573680",
    "end": "575360"
  },
  {
    "text": "created",
    "start": "575360",
    "end": "576080"
  },
  {
    "text": "[Music]",
    "start": "576080",
    "end": "577360"
  },
  {
    "text": "now that we have all our data coming",
    "start": "577360",
    "end": "579200"
  },
  {
    "text": "into amazon sv we can run queries on top",
    "start": "579200",
    "end": "581839"
  },
  {
    "text": "of it",
    "start": "581839",
    "end": "582800"
  },
  {
    "text": "for that purpose we use aws's",
    "start": "582800",
    "end": "585040"
  },
  {
    "text": "interactive query service amazon athena",
    "start": "585040",
    "end": "588399"
  },
  {
    "start": "588000",
    "end": "875000"
  },
  {
    "text": "go to the search bar and type athena",
    "start": "588399",
    "end": "591519"
  },
  {
    "text": "amazon athena uses presto a distributed",
    "start": "591519",
    "end": "594240"
  },
  {
    "text": "sql engine to run queries",
    "start": "594240",
    "end": "596959"
  },
  {
    "text": "it also uses apache height data",
    "start": "596959",
    "end": "598880"
  },
  {
    "text": "definition language to create drop and",
    "start": "598880",
    "end": "601519"
  },
  {
    "text": "alt tables and",
    "start": "601519",
    "end": "602839"
  },
  {
    "text": "partitions once the console opens make",
    "start": "602839",
    "end": "605680"
  },
  {
    "text": "sure you are in the query editor tab",
    "start": "605680",
    "end": "608560"
  },
  {
    "text": "amazon athena does not store the data",
    "start": "608560",
    "end": "610640"
  },
  {
    "text": "itself rather queries stamps on sv data",
    "start": "610640",
    "end": "613120"
  },
  {
    "text": "in place",
    "start": "613120",
    "end": "614720"
  },
  {
    "text": "to start analyzing we need to connect",
    "start": "614720",
    "end": "617200"
  },
  {
    "text": "amazon and zena to our data source that",
    "start": "617200",
    "end": "619600"
  },
  {
    "text": "is our sv data lake",
    "start": "619600",
    "end": "621920"
  },
  {
    "text": "we can do this by either running the",
    "start": "621920",
    "end": "623600"
  },
  {
    "text": "query in amazon athena or directly using",
    "start": "623600",
    "end": "626399"
  },
  {
    "text": "the console",
    "start": "626399",
    "end": "627839"
  },
  {
    "text": "let's go with the ladder path",
    "start": "627839",
    "end": "631880"
  },
  {
    "text": "click on connect to your data source and",
    "start": "632320",
    "end": "634399"
  },
  {
    "text": "choose amazon s3 as the location",
    "start": "634399",
    "end": "638480"
  },
  {
    "text": "in the metadata catalog choose aws blue",
    "start": "638480",
    "end": "641600"
  },
  {
    "text": "data catalog",
    "start": "641600",
    "end": "643680"
  },
  {
    "text": "amazon athena uses aws glue which is an",
    "start": "643680",
    "end": "646480"
  },
  {
    "text": "extract transform and load service to",
    "start": "646480",
    "end": "649040"
  },
  {
    "text": "retrieve table metadata for amazon s3 by",
    "start": "649040",
    "end": "652240"
  },
  {
    "text": "creating data catalogs",
    "start": "652240",
    "end": "654240"
  },
  {
    "text": "this table metadata then tells amazon",
    "start": "654240",
    "end": "656560"
  },
  {
    "text": "ethena how to find read and process the",
    "start": "656560",
    "end": "658959"
  },
  {
    "text": "data that it is supposed to create",
    "start": "658959",
    "end": "662640"
  },
  {
    "text": "click next",
    "start": "662880",
    "end": "664959"
  },
  {
    "text": "similarly for connection details keep",
    "start": "664959",
    "end": "666880"
  },
  {
    "text": "the defaults and connect to aws view",
    "start": "666880",
    "end": "670959"
  },
  {
    "text": "this will open the aws view console in a",
    "start": "670959",
    "end": "673120"
  },
  {
    "text": "new tab just to reiterate the usage of",
    "start": "673120",
    "end": "675839"
  },
  {
    "text": "aws glue here we need to find how the",
    "start": "675839",
    "end": "678640"
  },
  {
    "text": "data is structured in our data lake and",
    "start": "678640",
    "end": "680640"
  },
  {
    "text": "for this naw's blue crawler would crawl",
    "start": "680640",
    "end": "683600"
  },
  {
    "text": "our svd relay and automatically populate",
    "start": "683600",
    "end": "686480"
  },
  {
    "text": "data catalogs with tables following the",
    "start": "686480",
    "end": "688560"
  },
  {
    "text": "bucket schema",
    "start": "688560",
    "end": "690480"
  },
  {
    "text": "to see that in action we will create a",
    "start": "690480",
    "end": "692480"
  },
  {
    "text": "crawler by first giving it a name",
    "start": "692480",
    "end": "696720"
  },
  {
    "text": "i'm clicking on next and specifying the",
    "start": "701279",
    "end": "703600"
  },
  {
    "text": "crawler type as data stores",
    "start": "703600",
    "end": "706399"
  },
  {
    "text": "depending upon how our data is",
    "start": "706399",
    "end": "707920"
  },
  {
    "text": "partitioned and updated we can choose to",
    "start": "707920",
    "end": "709839"
  },
  {
    "text": "crawl every folder or only the new",
    "start": "709839",
    "end": "711920"
  },
  {
    "text": "folders",
    "start": "711920",
    "end": "713279"
  },
  {
    "text": "we will stick to the defaults for now",
    "start": "713279",
    "end": "715120"
  },
  {
    "text": "and move to the next step",
    "start": "715120",
    "end": "717680"
  },
  {
    "text": "on the add a data store page specify the",
    "start": "717680",
    "end": "719839"
  },
  {
    "text": "path to our data lake bucket and keep",
    "start": "719839",
    "end": "722079"
  },
  {
    "text": "the rest as is",
    "start": "722079",
    "end": "725440"
  },
  {
    "text": "hit",
    "start": "727680",
    "end": "728839"
  },
  {
    "text": "next",
    "start": "728839",
    "end": "730399"
  },
  {
    "text": "we only want to crawl one bucket for now",
    "start": "730399",
    "end": "732560"
  },
  {
    "text": "so skip to the next step",
    "start": "732560",
    "end": "734720"
  },
  {
    "text": "for giving blue read permissions to our",
    "start": "734720",
    "end": "736560"
  },
  {
    "text": "sg bucket select create an iam rule and",
    "start": "736560",
    "end": "739760"
  },
  {
    "text": "give the role a name",
    "start": "739760",
    "end": "743720"
  },
  {
    "text": "this will automatically create and",
    "start": "744959",
    "end": "746720"
  },
  {
    "text": "assign a role to glue with the required",
    "start": "746720",
    "end": "748639"
  },
  {
    "text": "permissions",
    "start": "748639",
    "end": "751200"
  },
  {
    "text": "click next",
    "start": "751200",
    "end": "753360"
  },
  {
    "text": "depending upon how often the data is",
    "start": "753360",
    "end": "755600"
  },
  {
    "text": "updated we can choose to set the",
    "start": "755600",
    "end": "757440"
  },
  {
    "text": "frequency of the crawler",
    "start": "757440",
    "end": "759200"
  },
  {
    "text": "for this tutorial we will keep it as run",
    "start": "759200",
    "end": "761360"
  },
  {
    "text": "on demand where we will run the crawler",
    "start": "761360",
    "end": "763440"
  },
  {
    "text": "before crying the data",
    "start": "763440",
    "end": "766639"
  },
  {
    "text": "to store the crawl metadata in a",
    "start": "766880",
    "end": "768639"
  },
  {
    "text": "database select add",
    "start": "768639",
    "end": "770839"
  },
  {
    "text": "database give it a name",
    "start": "770839",
    "end": "774560"
  },
  {
    "text": "leave the rest of the fields empty and",
    "start": "775839",
    "end": "777519"
  },
  {
    "text": "create",
    "start": "777519",
    "end": "779839"
  },
  {
    "text": "go to the final step to review all the",
    "start": "780480",
    "end": "782639"
  },
  {
    "text": "options",
    "start": "782639",
    "end": "785120"
  },
  {
    "text": "and then select finish to create your",
    "start": "785600",
    "end": "787839"
  },
  {
    "text": "crawler",
    "start": "787839",
    "end": "790240"
  },
  {
    "text": "select the newly created crawler",
    "start": "793519",
    "end": "796000"
  },
  {
    "text": "and then run it",
    "start": "796000",
    "end": "799880"
  },
  {
    "text": "here you can see that the status of the",
    "start": "806000",
    "end": "808079"
  },
  {
    "text": "crawler has changed",
    "start": "808079",
    "end": "810720"
  },
  {
    "text": "and now one table has been added",
    "start": "810720",
    "end": "813600"
  },
  {
    "text": "head back now to the amazon athena",
    "start": "813600",
    "end": "816000"
  },
  {
    "text": "console",
    "start": "816000",
    "end": "818160"
  },
  {
    "text": "and set the database to our recently",
    "start": "818160",
    "end": "820079"
  },
  {
    "text": "created database which is octane pbe in",
    "start": "820079",
    "end": "822880"
  },
  {
    "text": "this case",
    "start": "822880",
    "end": "824720"
  },
  {
    "text": "this will automatically populate the",
    "start": "824720",
    "end": "826399"
  },
  {
    "text": "tables in the database we can review",
    "start": "826399",
    "end": "829040"
  },
  {
    "text": "this data by clicking on preview table",
    "start": "829040",
    "end": "833440"
  },
  {
    "text": "the data from the escorters",
    "start": "834000",
    "end": "836560"
  },
  {
    "text": "is displayed in table form and can be",
    "start": "836560",
    "end": "838560"
  },
  {
    "text": "seen here",
    "start": "838560",
    "end": "840079"
  },
  {
    "text": "now various sql queries can be run on",
    "start": "840079",
    "end": "842240"
  },
  {
    "text": "top of this data to analyze it",
    "start": "842240",
    "end": "844720"
  },
  {
    "text": "a caveat worth mentioning here is that",
    "start": "844720",
    "end": "846800"
  },
  {
    "text": "if you're a first-time user of athena on",
    "start": "846800",
    "end": "849199"
  },
  {
    "text": "top of the query section you would get a",
    "start": "849199",
    "end": "851279"
  },
  {
    "text": "pop-up asking you to set an output",
    "start": "851279",
    "end": "853199"
  },
  {
    "text": "location for your queries before you run",
    "start": "853199",
    "end": "855120"
  },
  {
    "text": "them you can create an s3 bucket for",
    "start": "855120",
    "end": "857760"
  },
  {
    "text": "amazon latina query outputs and specify",
    "start": "857760",
    "end": "860639"
  },
  {
    "text": "that as a destination here",
    "start": "860639",
    "end": "864160"
  },
  {
    "text": "this brings us to the final step in our",
    "start": "865199",
    "end": "867040"
  },
  {
    "text": "pipeline we will complete the iot data",
    "start": "867040",
    "end": "869519"
  },
  {
    "text": "analysis by visualizing it in your",
    "start": "869519",
    "end": "871760"
  },
  {
    "text": "business intelligence tool amazon",
    "start": "871760",
    "end": "873920"
  },
  {
    "text": "quickside",
    "start": "873920",
    "end": "875279"
  },
  {
    "start": "875000",
    "end": "965000"
  },
  {
    "text": "for first time users you will have to",
    "start": "875279",
    "end": "877040"
  },
  {
    "text": "sign up for amazon quicksite you can",
    "start": "877040",
    "end": "879279"
  },
  {
    "text": "sign up for standard or enterprise",
    "start": "879279",
    "end": "881040"
  },
  {
    "text": "edition for following along with this",
    "start": "881040",
    "end": "883120"
  },
  {
    "text": "demo the standard edition should be",
    "start": "883120",
    "end": "884880"
  },
  {
    "text": "enough",
    "start": "884880",
    "end": "886399"
  },
  {
    "text": "within amazon quickside there are three",
    "start": "886399",
    "end": "888720"
  },
  {
    "text": "main components",
    "start": "888720",
    "end": "890399"
  },
  {
    "text": "these three main components would be",
    "start": "890399",
    "end": "892800"
  },
  {
    "text": "datasets",
    "start": "892800",
    "end": "894880"
  },
  {
    "text": "analyses",
    "start": "894880",
    "end": "896560"
  },
  {
    "text": "and dashboards",
    "start": "896560",
    "end": "898800"
  },
  {
    "text": "datasets allow integration with various",
    "start": "898800",
    "end": "901040"
  },
  {
    "text": "data sources here we will connect to the",
    "start": "901040",
    "end": "903519"
  },
  {
    "text": "database we just created an amazon",
    "start": "903519",
    "end": "905519"
  },
  {
    "text": "athena",
    "start": "905519",
    "end": "907600"
  },
  {
    "text": "so now we will go to new dataset and",
    "start": "907600",
    "end": "910240"
  },
  {
    "text": "select amazon athena we will give this",
    "start": "910240",
    "end": "913199"
  },
  {
    "text": "data source a name",
    "start": "913199",
    "end": "915130"
  },
  {
    "text": "[Music]",
    "start": "915130",
    "end": "917839"
  },
  {
    "text": "and then",
    "start": "917839",
    "end": "919680"
  },
  {
    "text": "click on create data source",
    "start": "919680",
    "end": "923120"
  },
  {
    "text": "now we will select the database we",
    "start": "923440",
    "end": "925120"
  },
  {
    "text": "created",
    "start": "925120",
    "end": "927839"
  },
  {
    "text": "and then select the table from within",
    "start": "929680",
    "end": "931600"
  },
  {
    "text": "the database",
    "start": "931600",
    "end": "934319"
  },
  {
    "text": "we can either directly query our data",
    "start": "935120",
    "end": "937360"
  },
  {
    "text": "from amazon athena or import it into a",
    "start": "937360",
    "end": "939600"
  },
  {
    "text": "dataset via spice which is component of",
    "start": "939600",
    "end": "942480"
  },
  {
    "text": "amazon quickside and stands for super",
    "start": "942480",
    "end": "944560"
  },
  {
    "text": "fast parallel in memory calculation",
    "start": "944560",
    "end": "946720"
  },
  {
    "text": "engine",
    "start": "946720",
    "end": "947839"
  },
  {
    "text": "let's continue by importing our data",
    "start": "947839",
    "end": "949600"
  },
  {
    "text": "into spice which will save time and",
    "start": "949600",
    "end": "951680"
  },
  {
    "text": "money as our data will be residing in",
    "start": "951680",
    "end": "953759"
  },
  {
    "text": "memory and we can reuse it multiple",
    "start": "953759",
    "end": "956079"
  },
  {
    "text": "times before refreshing",
    "start": "956079",
    "end": "958480"
  },
  {
    "text": "now clicking on visualize would create a",
    "start": "958480",
    "end": "961040"
  },
  {
    "text": "new analysis here so let's do that",
    "start": "961040",
    "end": "964880"
  },
  {
    "text": "analysis are the second major component",
    "start": "964880",
    "end": "967440"
  },
  {
    "start": "965000",
    "end": "1111000"
  },
  {
    "text": "of amazon quickside within an analysis",
    "start": "967440",
    "end": "970160"
  },
  {
    "text": "we can create visuals pertaining to",
    "start": "970160",
    "end": "972079"
  },
  {
    "text": "different fields in our data set",
    "start": "972079",
    "end": "974000"
  },
  {
    "text": "let's start by adding a visual to our",
    "start": "974000",
    "end": "975759"
  },
  {
    "text": "analysis",
    "start": "975759",
    "end": "977120"
  },
  {
    "text": "we want to analyze the average speed and",
    "start": "977120",
    "end": "979040"
  },
  {
    "text": "battery life of the scooters we begin by",
    "start": "979040",
    "end": "982320"
  },
  {
    "text": "selecting the fields that we want in our",
    "start": "982320",
    "end": "984079"
  },
  {
    "text": "visual so we would select device id",
    "start": "984079",
    "end": "988079"
  },
  {
    "text": "speed",
    "start": "988079",
    "end": "989759"
  },
  {
    "text": "and battery",
    "start": "989759",
    "end": "990520"
  },
  {
    "text": "[Music]",
    "start": "990520",
    "end": "992240"
  },
  {
    "text": "amazon quicksite has a feature called",
    "start": "992240",
    "end": "994160"
  },
  {
    "text": "autograph",
    "start": "994160",
    "end": "995440"
  },
  {
    "text": "that automatically selects the most",
    "start": "995440",
    "end": "997360"
  },
  {
    "text": "well-suited graph type for the selected",
    "start": "997360",
    "end": "999360"
  },
  {
    "text": "fields",
    "start": "999360",
    "end": "1000480"
  },
  {
    "text": "we can then proceed to customize it as",
    "start": "1000480",
    "end": "1002560"
  },
  {
    "text": "we like",
    "start": "1002560",
    "end": "1003920"
  },
  {
    "text": "in this particular scenario we want to",
    "start": "1003920",
    "end": "1006160"
  },
  {
    "text": "compare the averages we will select the",
    "start": "1006160",
    "end": "1008639"
  },
  {
    "text": "appropriate aggregation function for",
    "start": "1008639",
    "end": "1010639"
  },
  {
    "text": "speed and battery",
    "start": "1010639",
    "end": "1012079"
  },
  {
    "text": "select value",
    "start": "1012079",
    "end": "1013050"
  },
  {
    "text": "[Music]",
    "start": "1013050",
    "end": "1014399"
  },
  {
    "text": "now open the drop down",
    "start": "1014399",
    "end": "1016639"
  },
  {
    "text": "and then change the aggregation function",
    "start": "1016639",
    "end": "1018880"
  },
  {
    "text": "from sum to average",
    "start": "1018880",
    "end": "1021279"
  },
  {
    "text": "now we will repeat the same for the",
    "start": "1021279",
    "end": "1023600"
  },
  {
    "text": "battery field",
    "start": "1023600",
    "end": "1026319"
  },
  {
    "text": "here we have a visual created",
    "start": "1026319",
    "end": "1028140"
  },
  {
    "text": "[Music]",
    "start": "1028140",
    "end": "1029600"
  },
  {
    "text": "now more visuals can be added by going",
    "start": "1029600",
    "end": "1031760"
  },
  {
    "text": "to add and selecting add visual",
    "start": "1031760",
    "end": "1035919"
  },
  {
    "text": "as a final step we can go to share",
    "start": "1037679",
    "end": "1042000"
  },
  {
    "text": "and publish our analysis as a dashboard",
    "start": "1042559",
    "end": "1046000"
  },
  {
    "text": "we will do that by giving the dashboard",
    "start": "1046000",
    "end": "1048079"
  },
  {
    "text": "a name",
    "start": "1048079",
    "end": "1051160"
  },
  {
    "text": "and then hitting publish dashboard",
    "start": "1056720",
    "end": "1060559"
  },
  {
    "text": "this will create a read-only copy of our",
    "start": "1060559",
    "end": "1062720"
  },
  {
    "text": "analysis that can be shared with",
    "start": "1062720",
    "end": "1064400"
  },
  {
    "text": "stakeholders so they can make",
    "start": "1064400",
    "end": "1066160"
  },
  {
    "text": "data-driven decisions",
    "start": "1066160",
    "end": "1068480"
  },
  {
    "text": "now to summarize we started off by",
    "start": "1068480",
    "end": "1070240"
  },
  {
    "text": "creating the rule in aws iot rules",
    "start": "1070240",
    "end": "1072720"
  },
  {
    "text": "engine",
    "start": "1072720",
    "end": "1073679"
  },
  {
    "text": "which triggers an action to send each",
    "start": "1073679",
    "end": "1076000"
  },
  {
    "text": "record to amazon kinesis data fire host",
    "start": "1076000",
    "end": "1079039"
  },
  {
    "text": "where they are aggregated and then",
    "start": "1079039",
    "end": "1080960"
  },
  {
    "text": "finally stored in our data lake and",
    "start": "1080960",
    "end": "1083120"
  },
  {
    "text": "amazon s3",
    "start": "1083120",
    "end": "1085440"
  },
  {
    "text": "for running analysis on the data we use",
    "start": "1085440",
    "end": "1087600"
  },
  {
    "text": "amazon athena",
    "start": "1087600",
    "end": "1089200"
  },
  {
    "text": "and then lastly we created visuals in",
    "start": "1089200",
    "end": "1091280"
  },
  {
    "text": "amazon quickside and published them in",
    "start": "1091280",
    "end": "1093600"
  },
  {
    "text": "the form of dashboards",
    "start": "1093600",
    "end": "1095840"
  },
  {
    "text": "this way we started off with raw data",
    "start": "1095840",
    "end": "1098160"
  },
  {
    "text": "from our devices and ended up with an",
    "start": "1098160",
    "end": "1100559"
  },
  {
    "text": "easy to understand visuals to gain",
    "start": "1100559",
    "end": "1102720"
  },
  {
    "text": "insights from",
    "start": "1102720",
    "end": "1104720"
  },
  {
    "text": "thanks for watching and happy building",
    "start": "1104720",
    "end": "1109159"
  }
]