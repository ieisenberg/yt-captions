[
  {
    "start": "0",
    "end": "40000"
  },
  {
    "text": "[Music]",
    "start": "4059",
    "end": "4450"
  },
  {
    "text": "[Applause]",
    "start": "4450",
    "end": "7830"
  },
  {
    "text": "in this video you'll see how to use",
    "start": "7830",
    "end": "10389"
  },
  {
    "text": "Amazon CloudWatch events to monitor",
    "start": "10389",
    "end": "12820"
  },
  {
    "text": "resource changes in your Amazon Web",
    "start": "12820",
    "end": "14889"
  },
  {
    "text": "Services environment and automate alerts",
    "start": "14889",
    "end": "17619"
  },
  {
    "text": "that invoke an action we're going to use",
    "start": "17619",
    "end": "20710"
  },
  {
    "text": "a simple example of how you can monitor",
    "start": "20710",
    "end": "22869"
  },
  {
    "text": "your running Amazon Elastic Compute",
    "start": "22869",
    "end": "24610"
  },
  {
    "text": "cloud or ec2 instances with cloud watch",
    "start": "24610",
    "end": "28329"
  },
  {
    "text": "events and then create an alert to email",
    "start": "28329",
    "end": "31180"
  },
  {
    "text": "you if an instance enters the stopping",
    "start": "31180",
    "end": "33399"
  },
  {
    "text": "state starting from the AWS management",
    "start": "33399",
    "end": "36190"
  },
  {
    "text": "console let's navigate to cloud watch",
    "start": "36190",
    "end": "38829"
  },
  {
    "text": "events let's see how we can create a",
    "start": "38829",
    "end": "41650"
  },
  {
    "start": "40000",
    "end": "183000"
  },
  {
    "text": "cloud watch rule to monitor our ec2",
    "start": "41650",
    "end": "44230"
  },
  {
    "text": "instances",
    "start": "44230",
    "end": "46800"
  },
  {
    "text": "rules can be triggered based on an event",
    "start": "47530",
    "end": "49810"
  },
  {
    "text": "pattern that you define or on a schedule",
    "start": "49810",
    "end": "54540"
  },
  {
    "text": "you can even define the schedule with a",
    "start": "55059",
    "end": "57489"
  },
  {
    "text": "cron expression",
    "start": "57489",
    "end": "59820"
  },
  {
    "text": "in this case we'll use an event pattern",
    "start": "60960",
    "end": "65540"
  },
  {
    "text": "event patterns can match us",
    "start": "65540",
    "end": "67860"
  },
  {
    "text": "service or all event",
    "start": "67860",
    "end": "71750"
  },
  {
    "text": "use caution before creating a rule that",
    "start": "72390",
    "end": "74880"
  },
  {
    "text": "matches all events",
    "start": "74880",
    "end": "77899"
  },
  {
    "text": "in this case we want to limit our",
    "start": "78380",
    "end": "80509"
  },
  {
    "text": "monitoring to the ec2 service",
    "start": "80509",
    "end": "84579"
  },
  {
    "text": "as you can see many different AWS",
    "start": "84820",
    "end": "87520"
  },
  {
    "text": "services can be monitored by cloud watch",
    "start": "87520",
    "end": "89590"
  },
  {
    "text": "events",
    "start": "89590",
    "end": "91610"
  },
  {
    "text": "for this example we've already set up",
    "start": "91610",
    "end": "94070"
  },
  {
    "text": "two linux instances running in ec2",
    "start": "94070",
    "end": "98590"
  },
  {
    "text": "you can use rules to monitor different",
    "start": "100020",
    "end": "102270"
  },
  {
    "text": "event types",
    "start": "102270",
    "end": "104990"
  },
  {
    "text": "let's select the state change note",
    "start": "105610",
    "end": "107990"
  },
  {
    "text": "vacation event type",
    "start": "107990",
    "end": "111008"
  },
  {
    "text": "you can choose to monitor for any state",
    "start": "111640",
    "end": "114100"
  },
  {
    "text": "change or for a specific state change",
    "start": "114100",
    "end": "118619"
  },
  {
    "text": "let's set this rule to watch for",
    "start": "118780",
    "end": "120760"
  },
  {
    "text": "instances entering the stopping state",
    "start": "120760",
    "end": "124710"
  },
  {
    "text": "you can also choose to",
    "start": "124939",
    "end": "127150"
  },
  {
    "text": "any instance or specific instances",
    "start": "127150",
    "end": "131340"
  },
  {
    "text": "in this case we'll monitor all instances",
    "start": "131760",
    "end": "136640"
  },
  {
    "text": "now we're ready to define the target to",
    "start": "137230",
    "end": "139930"
  },
  {
    "text": "invoke when a state change is detected",
    "start": "139930",
    "end": "143909"
  },
  {
    "text": "CloudWatch event supports many different",
    "start": "144380",
    "end": "146540"
  },
  {
    "text": "targets and actions that can be",
    "start": "146540",
    "end": "148640"
  },
  {
    "text": "performed to respond to an event",
    "start": "148640",
    "end": "152590"
  },
  {
    "text": "for example you might choose to execute",
    "start": "153280",
    "end": "155860"
  },
  {
    "text": "an AWS lambda function perform an ec2",
    "start": "155860",
    "end": "159340"
  },
  {
    "text": "API call or issue an AWS Systems Manager",
    "start": "159340",
    "end": "163150"
  },
  {
    "text": "or SSM run command",
    "start": "163150",
    "end": "166500"
  },
  {
    "text": "in this case let's choose an Amazon",
    "start": "166500",
    "end": "168780"
  },
  {
    "text": "simple notification service or SNS topic",
    "start": "168780",
    "end": "171810"
  },
  {
    "text": "as the target to invoke when an event",
    "start": "171810",
    "end": "174270"
  },
  {
    "text": "matches our event pattern",
    "start": "174270",
    "end": "177800"
  },
  {
    "text": "let's quickly set up a new topic",
    "start": "178630",
    "end": "182250"
  },
  {
    "text": "Amazon SNS is a highly available and",
    "start": "182800",
    "end": "185989"
  },
  {
    "start": "183000",
    "end": "338000"
  },
  {
    "text": "secure pub/sub messaging service",
    "start": "185989",
    "end": "190269"
  },
  {
    "text": "you can use Amazon SNS topics for",
    "start": "190349",
    "end": "193439"
  },
  {
    "text": "high-throughput push-based many-to-many",
    "start": "193439",
    "end": "195810"
  },
  {
    "text": "messaging",
    "start": "195810",
    "end": "198130"
  },
  {
    "text": "let's create a new topic for cloud watch",
    "start": "198130",
    "end": "200650"
  },
  {
    "text": "event notifications",
    "start": "200650",
    "end": "203939"
  },
  {
    "text": "a display name",
    "start": "205440",
    "end": "208100"
  },
  {
    "text": "now that we created the topic we need to",
    "start": "212800",
    "end": "215440"
  },
  {
    "text": "create a subscription to it",
    "start": "215440",
    "end": "218250"
  },
  {
    "text": "subscribe different types of end points",
    "start": "218250",
    "end": "220020"
  },
  {
    "text": "but for now we'll select email",
    "start": "220020",
    "end": "224180"
  },
  {
    "text": "enter an email address that can receive",
    "start": "224819",
    "end": "227069"
  },
  {
    "text": "notifications from Amazon SNS",
    "start": "227069",
    "end": "231200"
  },
  {
    "text": "before we can start using the emails",
    "start": "232550",
    "end": "234940"
  },
  {
    "text": "description we need to confirm it",
    "start": "234940",
    "end": "238500"
  },
  {
    "text": "as you can see the subscription has been",
    "start": "239090",
    "end": "241160"
  },
  {
    "text": "confirmed",
    "start": "241160",
    "end": "243190"
  },
  {
    "text": "we can also see our subscription in the",
    "start": "243190",
    "end": "245320"
  },
  {
    "text": "AWS services portal",
    "start": "245320",
    "end": "249000"
  },
  {
    "text": "we're all set up to receive event",
    "start": "249980",
    "end": "251780"
  },
  {
    "text": "notifications now",
    "start": "251780",
    "end": "254680"
  },
  {
    "text": "returning to the rule we're creating we",
    "start": "255319",
    "end": "257810"
  },
  {
    "text": "can now select the topic we just created",
    "start": "257810",
    "end": "261970"
  },
  {
    "text": "on this next screen we simply need to",
    "start": "265120",
    "end": "267520"
  },
  {
    "text": "enter a name for the rule",
    "start": "267520",
    "end": "270750"
  },
  {
    "text": "monitor when ec2 instances enter the",
    "start": "271950",
    "end": "274320"
  },
  {
    "text": "stopping state has been created",
    "start": "274320",
    "end": "278210"
  },
  {
    "text": "now let's test this rule out by stopping",
    "start": "278680",
    "end": "281259"
  },
  {
    "text": "one of the two instances",
    "start": "281259",
    "end": "284520"
  },
  {
    "text": "you",
    "start": "289790",
    "end": "291850"
  },
  {
    "text": "this instance is now entering the",
    "start": "292180",
    "end": "294190"
  },
  {
    "text": "stopped state",
    "start": "294190",
    "end": "296090"
  },
  {
    "text": "now let's check our email",
    "start": "296090",
    "end": "299560"
  },
  {
    "text": "we've already received a new cloud watch",
    "start": "300100",
    "end": "302530"
  },
  {
    "text": "events notification",
    "start": "302530",
    "end": "305700"
  },
  {
    "text": "the notification contains",
    "start": "306199",
    "end": "308249"
  },
  {
    "text": "details about the event we need to take",
    "start": "308249",
    "end": "310529"
  },
  {
    "text": "action notice that the details are in",
    "start": "310529",
    "end": "313199"
  },
  {
    "text": "JSON format which is useful when sending",
    "start": "313199",
    "end": "316409"
  },
  {
    "text": "email notifications to other systems or",
    "start": "316409",
    "end": "318689"
  },
  {
    "text": "AWS partner solutions",
    "start": "318689",
    "end": "321740"
  },
  {
    "text": "you've just seen how to use Amazon",
    "start": "321740",
    "end": "323930"
  },
  {
    "text": "CloudWatch events to monitor resource",
    "start": "323930",
    "end": "326180"
  },
  {
    "text": "changes in your AWS environment and",
    "start": "326180",
    "end": "328690"
  },
  {
    "text": "automate alerts that invoke an action",
    "start": "328690",
    "end": "332910"
  },
  {
    "text": "thanks for watching now it's your turn",
    "start": "332910",
    "end": "334980"
  },
  {
    "text": "to try",
    "start": "334980",
    "end": "337370"
  }
]