[
  {
    "start": "0",
    "end": "20000"
  },
  {
    "text": "good afternoon everybody thanks for taking a time to come see me talk a little bit about our purpose-built database strategy this is our debt 301",
    "start": "60",
    "end": "7410"
  },
  {
    "text": "session we're matching the database to the workload and I'm gonna talk about exactly that subject so hopefully that's",
    "start": "7410",
    "end": "12660"
  },
  {
    "text": "what you're here to see if not we just had lunch it's a nice warm room so feel free to kick back close your eyes and",
    "start": "12660",
    "end": "18840"
  },
  {
    "text": "take a little nap I think I'm gonna be a little more interesting alright so if we're gonna talk about this session is",
    "start": "18840",
    "end": "24359"
  },
  {
    "start": "20000",
    "end": "20000"
  },
  {
    "text": "generally speaking we're talking about workload classifications for databases right what what workload makes the most",
    "start": "24359",
    "end": "29970"
  },
  {
    "text": "sense for what database and so we're gonna get into the dimensions of a workload and the types of workloads that",
    "start": "29970",
    "end": "35130"
  },
  {
    "text": "typically make up modern applications that we work with today we'll talk a little bit about some of the traditional",
    "start": "35130",
    "end": "40320"
  },
  {
    "text": "approaches to scaling the relational database because the relational database has been the backend platform for every",
    "start": "40320",
    "end": "45660"
  },
  {
    "text": "application that we pretty much built over the last 30 40 years or so until the advent of no SQL technology and then",
    "start": "45660",
    "end": "52110"
  },
  {
    "text": "we'll talk about how no SQL database is actually compare when it comes to you know scale design patterns and data",
    "start": "52110",
    "end": "58859"
  },
  {
    "text": "modeling whatnot we'll get into some of the flavors of no SQL on AWS is you're probably aware we have a purpose-built",
    "start": "58859",
    "end": "64710"
  },
  {
    "text": "database strategy with lots of options and we'll talk about what flavors of no SQL we have and when it makes sense to",
    "start": "64710",
    "end": "71159"
  },
  {
    "text": "use you know a graph database like a Neptune versus dynamodb and when it makes sense to use a relational database",
    "start": "71159",
    "end": "77220"
  },
  {
    "text": "for your application because there's plenty of workloads that still require that and that's generally what we'll do what we'll do to fill out the the",
    "start": "77220",
    "end": "84210"
  },
  {
    "text": "session this what database to use when and for what workload so I deal with a",
    "start": "84210",
    "end": "89939"
  },
  {
    "start": "88000",
    "end": "88000"
  },
  {
    "text": "lot of development teams I do a lot of migrations relational databases to know",
    "start": "89939",
    "end": "96000"
  },
  {
    "text": "SQL as a matter of fact for the last year and a half actually up until about six months ago for for the year and a",
    "start": "96000",
    "end": "101610"
  },
  {
    "text": "half prior to that my primary goal in life was to migrate the Amazon retail organization many of you probably read",
    "start": "101610",
    "end": "107820"
  },
  {
    "text": "the effort we've had to move everything off of Oracle back-end and into a no SQL",
    "start": "107820",
    "end": "113640"
  },
  {
    "text": "platform that means DynamoDB so I've worked with we have about 350 or so what",
    "start": "113640",
    "end": "120270"
  },
  {
    "text": "we call Tier one services these are services that are revenue generators when they're down we're losing money and",
    "start": "120270",
    "end": "125880"
  },
  {
    "text": "that one of the biggest reasons why we decided to move off of Oracle because we were going down way too often so we",
    "start": "125880",
    "end": "131730"
  },
  {
    "text": "moved this up to a more scalable platform because the data load and this is really what I've seen over the last year or two is that the common app is",
    "start": "131730",
    "end": "139920"
  },
  {
    "text": "becoming a Big Data app right so we're seeing a lot more types of applications that previously maybe would have been",
    "start": "139920",
    "end": "145800"
  },
  {
    "text": "okay with the relational back in there now hitting that scale barrier and we'll talk a little bit about that but when I",
    "start": "145800",
    "end": "150990"
  },
  {
    "text": "go to teens I talk to them I ask them these questions right what did you use you know why did you choose this database you know for your workload and",
    "start": "150990",
    "end": "157380"
  },
  {
    "text": "generally I get these answers you know it's a well because we heard it's a really the new exciting technology right",
    "start": "157380",
    "end": "163170"
  },
  {
    "text": "we've got to use no SQL I want to use MongoDB because MongoDB is awesome right and it is but it's not necessarily",
    "start": "163170",
    "end": "168840"
  },
  {
    "text": "awesome for everything right no SQL is really a great technology maybe because we have a site license for this",
    "start": "168840",
    "end": "174660"
  },
  {
    "text": "technology we hear that a lot and you know we have a site license for oracle or ms SQL server or something like that",
    "start": "174660",
    "end": "181140"
  },
  {
    "text": "it makes more sense for them to use that and then it's because the third option that we get third answer I get is it's",
    "start": "181140",
    "end": "187739"
  },
  {
    "text": "because it's we know we know how to use it okay which I suppose that's a good answer as well but the reality is what",
    "start": "187739",
    "end": "193860"
  },
  {
    "text": "you really want is you want the databases purpose-built you know to support what your application is designed to do if you want to be",
    "start": "193860",
    "end": "199910"
  },
  {
    "text": "cost-efficient you want to be performant then we need a back-end that's going to",
    "start": "199910",
    "end": "205320"
  },
  {
    "text": "be responsive to the needs of your workload so what does that really mean when we talk about workloads it really",
    "start": "205320",
    "end": "212430"
  },
  {
    "start": "209000",
    "end": "209000"
  },
  {
    "text": "breaks down into you know a couple of buckets really two buckets we have an operational application and we have an",
    "start": "212430",
    "end": "218130"
  },
  {
    "text": "analytical application right the operations application is what we traditionally have referred to as an",
    "start": "218130",
    "end": "224610"
  },
  {
    "text": "OLTP or online transaction processing app OLTP app represents a common",
    "start": "224610",
    "end": "229920"
  },
  {
    "text": "business process and it's one of the most common applications that we build today common business processes are regular and repeatable the same thing",
    "start": "229920",
    "end": "236579"
  },
  {
    "text": "happens every time that the data is processed so that's that's what's new would be an OLTP or an Operations",
    "start": "236579",
    "end": "242100"
  },
  {
    "text": "application the other types of workloads that we have are OLAP workloads these are analytics workloads so think",
    "start": "242100",
    "end": "249060"
  },
  {
    "text": "bi business intelligence or reporting types of applications and typically",
    "start": "249060",
    "end": "254940"
  },
  {
    "text": "these applications have more what we'd call ad hoc access patterns right we don't really know what questions you know the users",
    "start": "254940",
    "end": "262000"
  },
  {
    "text": "are going to be asking when they come into the application there's a totally different set of requirements to support",
    "start": "262000",
    "end": "267280"
  },
  {
    "text": "a regular and repeatable business process versus you know support than ad-hoc queries and then the other type",
    "start": "267280",
    "end": "274780"
  },
  {
    "text": "of application workload that we typically see is a decision support system these are scaled out data lakes data",
    "start": "274780",
    "end": "281740"
  },
  {
    "text": "warehouses we're running long-running queries and workloads against semi structured data because we're trying to",
    "start": "281740",
    "end": "287800"
  },
  {
    "text": "answer questions you know for the business so if you think about how these analytics applications break down you",
    "start": "287800",
    "end": "293919"
  },
  {
    "text": "know we have our OLAP or workload which is really going to be a more responsive",
    "start": "293919",
    "end": "301930"
  },
  {
    "text": "framework these are types of real-time queries I'm expecting answers for in line with maybe a user's request versus",
    "start": "301930",
    "end": "308710"
  },
  {
    "text": "a data warehouse or a decision support system or data Lake which is maybe I'm gonna run queries where latency isn't",
    "start": "308710",
    "end": "314800"
  },
  {
    "text": "really the biggest deal what I really want is the answer and I might be running that query across you know some",
    "start": "314800",
    "end": "320139"
  },
  {
    "text": "distributed document store and it's okay if it takes a couple seconds for the answer to come back so think of your",
    "start": "320139",
    "end": "325990"
  },
  {
    "text": "dimensions of your workload along these lines I mean I need maybe one dimension might be the need to support ad-hoc",
    "start": "325990",
    "end": "333729"
  },
  {
    "text": "queries right or the or the the need to support the efficiency in the query",
    "start": "333729",
    "end": "339759"
  },
  {
    "text": "right so a couple of dimensions that we're talking about the you know the nature of the access pattern itself and",
    "start": "339759",
    "end": "345460"
  },
  {
    "text": "and the reality of the amount of response time that I'm expecting from the system those are two very important",
    "start": "345460",
    "end": "351789"
  },
  {
    "text": "dimensions when I get into looking at what my workload might require they're not the only dimensions we'll talk about",
    "start": "351789",
    "end": "358000"
  },
  {
    "text": "some other ones but the next thing we want to look at is sizing the workload",
    "start": "358000",
    "end": "363880"
  },
  {
    "start": "359000",
    "end": "359000"
  },
  {
    "text": "right it's you know depending on the nature of the application I'm working with I have different requirements for",
    "start": "363880",
    "end": "368919"
  },
  {
    "text": "my back-end obviously if I have a problem with limited scope its easy to solve if maybe I have a a point of",
    "start": "368919",
    "end": "376870"
  },
  {
    "text": "presence or point of sale system that would be deployed inside of a you know convenience store I can have a single",
    "start": "376870",
    "end": "383469"
  },
  {
    "text": "computer that runs behind the cash register that manages my inventory my billing my invoicing",
    "start": "383469",
    "end": "389810"
  },
  {
    "text": "and all of the things that I need in my store and that's a very small problem and I don't necessarily need a lot of infrastructure but unbounded problems",
    "start": "389810",
    "end": "397490"
  },
  {
    "text": "are much harder to solve I mean if I wanted to build a system that was capable of doing root cause analysis for",
    "start": "397490",
    "end": "403850"
  },
  {
    "text": "market events across global markets looking at millions and millions of trading events and we've actually built",
    "start": "403850",
    "end": "410000"
  },
  {
    "text": "an application to do this for one of our customers that's not an easy problem and it's not a problem that's going to be",
    "start": "410000",
    "end": "415640"
  },
  {
    "text": "solved on a single desktop computer sitting behind a cash register right obviously I need a bigger system a lot",
    "start": "415640",
    "end": "421880"
  },
  {
    "text": "more infrastructure and a totally different database to be able to run that application so that's an extreme",
    "start": "421880",
    "end": "426950"
  },
  {
    "text": "example but there's a various degrees of data pressure you could say any given",
    "start": "426950",
    "end": "433730"
  },
  {
    "text": "system right so the scale of the system is another dimension that we need to be the aware of when we're working with in",
    "start": "433730",
    "end": "441200"
  },
  {
    "start": "441000",
    "end": "441000"
  },
  {
    "text": "trying to choose a database so to that end let's look a little bit about what",
    "start": "441200",
    "end": "447080"
  },
  {
    "text": "it takes to size the database and so typically when we've sized a relational database it's about adding incremental",
    "start": "447080",
    "end": "453140"
  },
  {
    "text": "chunks of capacity and that's great but that leaves us with the situation that oftentimes looks very much like this so",
    "start": "453140",
    "end": "460010"
  },
  {
    "text": "we have maybe some amount of capacity that we're not utilizing and that's really wasted dollars and at some point",
    "start": "460010",
    "end": "466610"
  },
  {
    "text": "we're gonna cross the line and say we're perfectly provisioned and then all of a sudden we're having a bad user experience because we're under",
    "start": "466610",
    "end": "472310"
  },
  {
    "text": "provisioned and we need to add more capacity but it's very very difficult to find that balance between the amount of",
    "start": "472310",
    "end": "477650"
  },
  {
    "text": "capacity that I have available and the amount of demand for my application or service that that is present so this is",
    "start": "477650",
    "end": "484250"
  },
  {
    "text": "kind of the problem or the conundrum that we face as we start to provision capacity and it's that step function",
    "start": "484250",
    "end": "489650"
  },
  {
    "text": "that really makes it difficult right if we add capacity and chunks and the way we've actually done that with the",
    "start": "489650",
    "end": "496130"
  },
  {
    "text": "relational database is to do exactly that you start off with a small box it can do a certain amount of work as that",
    "start": "496130",
    "end": "502090"
  },
  {
    "text": "workload increases and the demand for that particular application service increases we're gonna go and get a",
    "start": "502090",
    "end": "507530"
  },
  {
    "text": "bigger box and eventually we're gonna get a bigger box and eventually we're gonna run out of big boxes and then",
    "start": "507530",
    "end": "513800"
  },
  {
    "text": "we're in trouble right what do we do then we go into a situation where we actually have to start sharding the relational databases I ran into you this",
    "start": "513800",
    "end": "521330"
  },
  {
    "start": "517000",
    "end": "517000"
  },
  {
    "text": "situation in a previous company about ten years ago we were doing event management in ITSM IT",
    "start": "521330",
    "end": "527950"
  },
  {
    "text": "systems management software and the event load of the enterprise IT infrastructure especially for large",
    "start": "527950",
    "end": "533589"
  },
  {
    "text": "enterprise is extremely big I mean we're talking about I was working with a",
    "start": "533589",
    "end": "539170"
  },
  {
    "text": "customer who had over a million networked devices on the west coast alone the and had a policy of capturing",
    "start": "539170",
    "end": "546160"
  },
  {
    "text": "every event that came off of all of that infrastructure we were literally partitioning our MySQL database every",
    "start": "546160",
    "end": "551740"
  },
  {
    "text": "day to support this and that a five year retention policy so we're looking at that going okay with 1,900 instances of",
    "start": "551740",
    "end": "558190"
  },
  {
    "text": "MySQL I think we're gonna have a problem managing that system so so he thought maybe we need a better solution and",
    "start": "558190",
    "end": "564250"
  },
  {
    "text": "that's when we started looking at no SQL I start digging in to the differences between the relational database and the",
    "start": "564250",
    "end": "569649"
  },
  {
    "text": "new SQL platform so no SQL databases leverage ad normalized data model that",
    "start": "569649",
    "end": "575050"
  },
  {
    "text": "is sharded or distributed across multiple storage nodes or processing",
    "start": "575050",
    "end": "580690"
  },
  {
    "text": "servers to provide a near nearly unbounded throughput and storage",
    "start": "580690",
    "end": "585700"
  },
  {
    "text": "capacity and we'll talk a little bit about how that works but the idea here is to get away from the relational data",
    "start": "585700",
    "end": "592180"
  },
  {
    "text": "model which requires us to kind of collate co-locate all of the data on the same in the same processing space which",
    "start": "592180",
    "end": "598149"
  },
  {
    "text": "is the the primary limit or limiter of scale and with a relational database so",
    "start": "598149",
    "end": "603730"
  },
  {
    "text": "the way no SQL databases work is we're going to distribute these items across a",
    "start": "603730",
    "end": "609579"
  },
  {
    "text": "arbitrary key space using an attribute in all no SQL databases must have called",
    "start": "609579",
    "end": "614620"
  },
  {
    "text": "a partition key and it looks like some of my graphics are missing on these charts I don't know why those little",
    "start": "614620",
    "end": "619899"
  },
  {
    "text": "items should have a a couple of attributes in there one of them would be a partition key that we're calling ID so",
    "start": "619899",
    "end": "625480"
  },
  {
    "text": "we're gonna hash the ID value we're gonna distribute these items out across this arbitrary key space and as I need",
    "start": "625480",
    "end": "631510"
  },
  {
    "text": "to scale the system now all I need to do is chop that key space up and spread those documents out across multiple",
    "start": "631510",
    "end": "637390"
  },
  {
    "text": "physical storage nodes this how all no SQL databases work we we need to get",
    "start": "637390",
    "end": "643990"
  },
  {
    "text": "those documents spread out those items spread out across some physical key space that can be chopped up and and and",
    "start": "643990",
    "end": "650949"
  },
  {
    "text": "spread out across multiple physical devices in order to provide more compute more capacity you know for the database now",
    "start": "650949",
    "end": "657339"
  },
  {
    "text": "when I query the database what I'm gonna do is provide that partition key value and tell the system where to go to get",
    "start": "657339",
    "end": "664450"
  },
  {
    "text": "that data in dynamo DB we call it a partition key in MongoDB they call it a shard key in Cassandra they call it a",
    "start": "664450",
    "end": "671589"
  },
  {
    "text": "partition key but every node no SQL database must have this mechanism or we won't be able to spread those documents",
    "start": "671589",
    "end": "677110"
  },
  {
    "text": "out across multiple physical nodes and we won't know where to go when the query comes in you give me some shard key",
    "start": "677110",
    "end": "683080"
  },
  {
    "text": "value I know I need to go to this specific device and that's what makes no SQL databases fast and consistent at any",
    "start": "683080",
    "end": "689320"
  },
  {
    "text": "scale so when we get into no SQL and",
    "start": "689320",
    "end": "694720"
  },
  {
    "text": "this is just nothing not this is something that has been such a theoretical concept for relational databases because there's just been no",
    "start": "694720",
    "end": "699910"
  },
  {
    "text": "choice relational databases need to perform in this very specific manner no",
    "start": "699910",
    "end": "705880"
  },
  {
    "text": "SQL databases make some choices and we'll talk a little bit about this but this is the cap theorem it's the Iron Triangle of data so to speak if you're",
    "start": "705880",
    "end": "712660"
  },
  {
    "text": "familiar with project management you have this Iron Triangle of three dimensions it's either you're going to get it fasting a cheap or you're gonna",
    "start": "712660",
    "end": "718750"
  },
  {
    "text": "get it good pick two you can't get all three well data has its own Iron Triangle it's called cap let's talk a",
    "start": "718750",
    "end": "724060"
  },
  {
    "text": "little bit about those particular dimensions the consistency is the first one we'll talk about and consistency is about the ability of all clients always",
    "start": "724060",
    "end": "731800"
  },
  {
    "text": "having the same view of the data in the system no client can log into the system and get a different view of data than",
    "start": "731800",
    "end": "737020"
  },
  {
    "text": "another client in a given time so consistent view of data when data is written and read immediately after it's",
    "start": "737020",
    "end": "742810"
  },
  {
    "text": "written by another client then they're gonna see the same data that was exact that was written by that client",
    "start": "742810",
    "end": "748950"
  },
  {
    "text": "availability is the ability of the system for all clients to always be able to read and write it's important to",
    "start": "748950",
    "end": "755740"
  },
  {
    "text": "understand both dimensions must be satisfied in order to be an available system if I can only read the data but I",
    "start": "755740",
    "end": "762520"
  },
  {
    "text": "can't write then it's not a fully available system so relational databases have chosen to always maintain this",
    "start": "762520",
    "end": "768220"
  },
  {
    "text": "consistent and available view and now the third dimension is what we call partition tolerance and this is about",
    "start": "768220",
    "end": "774040"
  },
  {
    "text": "what happens when the connection between the devices that constitute the database",
    "start": "774040",
    "end": "779170"
  },
  {
    "text": "the storage nodes that constitute the database start to fail right the network",
    "start": "779170",
    "end": "784450"
  },
  {
    "text": "connectivity and I insert partitions between these storage nodes what's going to happen and so this is",
    "start": "784450",
    "end": "789550"
  },
  {
    "text": "really the crux of what no SQL is all about we make some decisions here so the first again we get to pick two of these",
    "start": "789550",
    "end": "795790"
  },
  {
    "text": "dimensions and if you look at the relational databases the two that they picked are consistency and availability and they do this by locating all the",
    "start": "795790",
    "end": "802210"
  },
  {
    "text": "data on the same storage space on the same processing space right so we don't have to worry about partition tolerance",
    "start": "802210",
    "end": "808630"
  },
  {
    "text": "because I cannot partition the data store all the data in a relational database instance lives in the same",
    "start": "808630",
    "end": "814210"
  },
  {
    "text": "storage device in the same processing space there's no shared or sharded you",
    "start": "814210",
    "end": "820960"
  },
  {
    "text": "know processing of that data now no SQL databases have to make a choice because we're going to break that consistency",
    "start": "820960",
    "end": "826839"
  },
  {
    "text": "and availability when we go to a distributed database model because now we're introducing this concept of you",
    "start": "826839",
    "end": "832150"
  },
  {
    "text": "know partition tolerance and how does the database react when that partition is introduced into the environment so",
    "start": "832150",
    "end": "839020"
  },
  {
    "text": "the first choice we have is to say well we're going to be cars consistent and partition tolerant and we're going to",
    "start": "839020",
    "end": "844270"
  },
  {
    "text": "punt on availability what does that mean that means I'm going to have some sort of a primary node that all rights are",
    "start": "844270",
    "end": "849820"
  },
  {
    "text": "going to go into if that primary node were to fail or there was a network partition inserted between that primary",
    "start": "849820",
    "end": "855100"
  },
  {
    "text": "node and the other storage nodes there would be some sort of election process to determine whether or not that primary",
    "start": "855100",
    "end": "860470"
  },
  {
    "text": "needs to step down and we need to promote a new primary during that period of step down and failover",
    "start": "860470",
    "end": "866260"
  },
  {
    "text": "that some of those clients on the network are not going to be able to write data into the system until that new primary becomes available what this",
    "start": "866260",
    "end": "873730"
  },
  {
    "text": "means now is that's a consistent system because nobody can write data while we don't know who the master is and all",
    "start": "873730",
    "end": "878950"
  },
  {
    "text": "data has to be written through the master so if I write if I read from the master I'm going to be able to get it a consistent read other no SQL databases",
    "start": "878950",
    "end": "886330"
  },
  {
    "text": "make a different choice they make the availability and partition tolerant tolerant choice or the AP choice this is",
    "start": "886330",
    "end": "892510"
  },
  {
    "text": "what we haven't Lyra furred to as master master configuration I can write anywhere it doesn't matter what node",
    "start": "892510",
    "end": "898150"
  },
  {
    "text": "fails I'm just gonna write data into the system at any node that data is going to replicate around the the ring or the the",
    "start": "898150",
    "end": "904450"
  },
  {
    "text": "cluster or so to speak and as we detect conflicts where we've had items that are updated in multiple places there's some",
    "start": "904450",
    "end": "910900"
  },
  {
    "text": "conflict resolution logic or some callback that's going to be executed to be able to resolve those conflicts",
    "start": "910900",
    "end": "916089"
  },
  {
    "text": "conflicts mostly it's a time-based right I'd have some sort of NTP synchronization of",
    "start": "916089",
    "end": "921250"
  },
  {
    "text": "hosts if a host fails where a host receives a replication from a from",
    "start": "921250",
    "end": "927490"
  },
  {
    "text": "another place and there's a conflict because I've updated my data we're gonna look at the timestamp and the last",
    "start": "927490",
    "end": "932590"
  },
  {
    "text": "update wins there's also the ability in some systems to provide more complex logic dynamodb is a database that",
    "start": "932590",
    "end": "939160"
  },
  {
    "text": "provides consistent and partition tolerant functionality out of the box you know within the region we are a CP",
    "start": "939160",
    "end": "946510"
  },
  {
    "text": "system but with the introduction of global tables what's interesting is that we become the only globally distributed",
    "start": "946510",
    "end": "951940"
  },
  {
    "text": "managed to know SQL service that provides master master functionality so we are actually both a CP and an AP",
    "start": "951940",
    "end": "958750"
  },
  {
    "text": "system we run CP within the region and we're AP across regions because of the replication for multiple regions now at",
    "start": "958750",
    "end": "965380"
  },
  {
    "text": "conflict resolution with global tables is strictly time-based so we maintain clock synchronization",
    "start": "965380",
    "end": "970420"
  },
  {
    "text": "across regions and as writes coming to the table if there's a collision because",
    "start": "970420",
    "end": "975580"
  },
  {
    "text": "I updated in multiple regions then that the latest update is going to win so that's how that works with dynamodb",
    "start": "975580",
    "end": "981540"
  },
  {
    "text": "other databases make different choices as you can see a variety of no SQL technologies but all no SQL technologies",
    "start": "981540",
    "end": "989110"
  },
  {
    "text": "have to make that decision am I going to be a CP system where am I going to be an AP system because we're breaking that CA",
    "start": "989110",
    "end": "995740"
  },
  {
    "text": "branch which the relational database is used one of the most important things",
    "start": "995740",
    "end": "1001110"
  },
  {
    "start": "999000",
    "end": "999000"
  },
  {
    "text": "when you're looking at new technologies like no SQL really any new technology and this chart is about learning how to",
    "start": "1001110",
    "end": "1007589"
  },
  {
    "text": "use new technology as we naturally start to use new technologies we're going to take the design patterns and best",
    "start": "1007589",
    "end": "1014220"
  },
  {
    "text": "practices that we've learned in the past and we're going to try and apply those to this new technology and oftentimes",
    "start": "1014220",
    "end": "1019440"
  },
  {
    "text": "that's actually the worst decision you can make because most the time new technology doesn't work the same way as",
    "start": "1019440",
    "end": "1024480"
  },
  {
    "text": "the old technology right I mean when we used to bust concrete with the sledgehammer and I'd swing it over my",
    "start": "1024480",
    "end": "1029970"
  },
  {
    "text": "head right and then the jackhammer comes along I don't swing the jackhammer over my head I'm much more efficient using the jackhammer and I'm much if with a",
    "start": "1029970",
    "end": "1036209"
  },
  {
    "text": "different approach it's the same thing with technology and this what this chart is about if you look at the bottom of",
    "start": "1036209",
    "end": "1041250"
  },
  {
    "text": "the chart it's the adoption curve right so as we you know in the early part of the market for a given technology",
    "start": "1041250",
    "end": "1047459"
  },
  {
    "text": "there's some sort of challenge technical challenge a technology triggers forcing innovation we invent new things to solve",
    "start": "1047459",
    "end": "1053429"
  },
  {
    "text": "these problems certain some people have good experiences with this new technology and",
    "start": "1053429",
    "end": "1058600"
  },
  {
    "text": "and then everybody starts to run to the new technologies hey that's how that's gonna solve my problems the problem is",
    "start": "1058600",
    "end": "1064240"
  },
  {
    "text": "they don't learn how to use the new technology first and they try and do the same thing and this is that they did with the old technology this is the",
    "start": "1064240",
    "end": "1069910"
  },
  {
    "text": "biggest problem I run into a team's using no SQL technology is they're actually using relational data modeling",
    "start": "1069910",
    "end": "1075880"
  },
  {
    "text": "and they're going into a no SQL database they're implementing a parent-child relationship they're implementing many",
    "start": "1075880",
    "end": "1081490"
  },
  {
    "text": "many to relationships are implementing multiple tables with look-up tables and the whole nine yards and then they're wondering why isn't it working",
    "start": "1081490",
    "end": "1087730"
  },
  {
    "text": "why is it so expensive you know why is it so slow and it's because you're managing your joins at the application",
    "start": "1087730",
    "end": "1093340"
  },
  {
    "text": "layer instead of you know denormalizing the data model properly so if you want to have a better experience with any new",
    "start": "1093340",
    "end": "1099250"
  },
  {
    "text": "technology you want to avoid that trough of disillusionment so to speak you're gonna you know want to learn how to use",
    "start": "1099250",
    "end": "1105250"
  },
  {
    "text": "that new technology first and if you look at relational technology we're all the way out on the right-hand side of that graph if you haven't if you don't",
    "start": "1105250",
    "end": "1112090"
  },
  {
    "text": "know what an inner join is today then I don't know where you've been for the last three decades you need to go back",
    "start": "1112090",
    "end": "1117880"
  },
  {
    "text": "to school but it's not the same with no SQL technology right we just don't know",
    "start": "1117880",
    "end": "1123430"
  },
  {
    "text": "it most developers have little experience with it and even again they come in and they start to assume that it works the same way so as that skillset",
    "start": "1123430",
    "end": "1130930"
  },
  {
    "text": "starts to commoditize across the market you're gonna start to see that slope of enlightenment is gonna become more and",
    "start": "1130930",
    "end": "1136180"
  },
  {
    "text": "more common that kind of productivity increase as the skill set starts to distribute I think today that no SQL",
    "start": "1136180",
    "end": "1142630"
  },
  {
    "text": "technology is firmly planted in that early adopter maybe even in the technology gap right now we still",
    "start": "1142630",
    "end": "1149200"
  },
  {
    "text": "haven't cleared at that point there's no that the skill set has not diffused right when we start to see the majority",
    "start": "1149200",
    "end": "1156190"
  },
  {
    "text": "of developers today understanding no SQL technology then we're gonna be in that early majority right I'm probably the",
    "start": "1156190",
    "end": "1162820"
  },
  {
    "text": "clearest indicator of this is I don't interview a developer today and asked him what is an inner join nobody asked",
    "start": "1162820",
    "end": "1167950"
  },
  {
    "text": "that question right but when I did 2530 years ago when we interviewed developers yes we had to ask that question because",
    "start": "1167950",
    "end": "1174070"
  },
  {
    "text": "authors didn't understand how to normalize their data as much as they do today today it's like the back of our",
    "start": "1174070",
    "end": "1179530"
  },
  {
    "text": "hand the same thing will happen with no SQL technology over the next five to ten years denormalized data modeling is",
    "start": "1179530",
    "end": "1185020"
  },
  {
    "text": "going to be commonplace and people are gonna understand you know what that really means if you're interested in that I",
    "start": "1185020",
    "end": "1190540"
  },
  {
    "text": "gave a great session last night the dad 401 session it's up on YouTube already talks a lot about design patterns of",
    "start": "1190540",
    "end": "1196059"
  },
  {
    "text": "best practices for no SQL alright AWS has an enormous array of technology for",
    "start": "1196059",
    "end": "1203470"
  },
  {
    "text": "you to solve your problems and we've really analyzed our approach here to try",
    "start": "1203470",
    "end": "1210040"
  },
  {
    "text": "and you know decide what's the best way to go after this you know certainly we",
    "start": "1210040",
    "end": "1215080"
  },
  {
    "text": "can stand up an API in front of maybe a dynamodb we could provide you know various forms of these types of",
    "start": "1215080",
    "end": "1220330"
  },
  {
    "text": "interfaces a graph function a time series function you know what not in front of a generic new SQL store but",
    "start": "1220330",
    "end": "1225970"
  },
  {
    "text": "that flexibility comes at a cost and that cost is typically dollars and efficiency so what we decided to do instead when you look at modern",
    "start": "1225970",
    "end": "1232870"
  },
  {
    "text": "application frameworks they're not all about a single monolithic application right they're about services that",
    "start": "1232870",
    "end": "1238900"
  },
  {
    "text": "comprise an application and those services might have different dimensions to the workload that they're supporting",
    "start": "1238900",
    "end": "1244240"
  },
  {
    "text": "which means we might want different backends right now oftentimes these services don't even work with data that's even related or connected and it",
    "start": "1244240",
    "end": "1251320"
  },
  {
    "text": "might better it might be better served to spread that data out across multiple backends so this is kind of the approach",
    "start": "1251320",
    "end": "1257440"
  },
  {
    "text": "we're taking by providing these specialized solutions you know if you look at no SQL offerings today we",
    "start": "1257440",
    "end": "1262900"
  },
  {
    "text": "announced a few really cool new offerings I'm not actually gonna talk too much about those today because",
    "start": "1262900",
    "end": "1268300"
  },
  {
    "text": "they're still new but they're the use cases for those technologies are evident right if you look at no SQL solutions",
    "start": "1268300",
    "end": "1274270"
  },
  {
    "text": "dynamodb neptune time stream ql DB is amazing array of solutions for you the",
    "start": "1274270",
    "end": "1281470"
  },
  {
    "text": "relational database solutions RDS and aurora and in getting into analytics redshift athena EMR there's such a",
    "start": "1281470",
    "end": "1289690"
  },
  {
    "text": "variety of services for you to be able to use that basically we can handle any workload in any dimension of any",
    "start": "1289690",
    "end": "1296620"
  },
  {
    "text": "workload with one of the database backends that we offer getting into the",
    "start": "1296620",
    "end": "1303580"
  },
  {
    "text": "individual services I'm not gonna spend a lot of time talking about RDS again because it's a relational database it's",
    "start": "1303580",
    "end": "1308890"
  },
  {
    "text": "so well understood probably the best points to talk to with relational at",
    "start": "1308890",
    "end": "1315070"
  },
  {
    "text": "this point is because it is an option in the array of database services that are",
    "start": "1315070",
    "end": "1320460"
  },
  {
    "text": "out there it's not the only service available to us anymore it's really to understand when do I want",
    "start": "1320460",
    "end": "1325920"
  },
  {
    "text": "to use a relational database and again we talked about the the OLAP style workload and that is the sweet spot for",
    "start": "1325920",
    "end": "1332160"
  },
  {
    "text": "relational don't try and solve ad hoc query workflows with the new SQL database because it's going to be a",
    "start": "1332160",
    "end": "1338280"
  },
  {
    "text": "difficult chore no SQL databases like to tune the data model to the access pattern which kind of means I need to",
    "start": "1338280",
    "end": "1343410"
  },
  {
    "text": "understand the access pattern before I model the data relational databases reshape the data on the way out and they",
    "start": "1343410",
    "end": "1349890"
  },
  {
    "text": "say give you an ad hoc query engine on top of that so I can write all kinds of queries to reshape the data to support",
    "start": "1349890",
    "end": "1355320"
  },
  {
    "text": "any type of access pattern I want so that's a fundamental decision making ricotta gnocchi RIA for whether I should",
    "start": "1355320",
    "end": "1362940"
  },
  {
    "text": "use relational or not is it is an application that requires ad hoc queries or the access patterns are not well",
    "start": "1362940",
    "end": "1369960"
  },
  {
    "text": "understood you're probably going to be better off with the relational database because those access patterns are more",
    "start": "1369960",
    "end": "1375150"
  },
  {
    "text": "flexible and once you once you structure your data and tightly coupled to the access pattern it's difficult to unwind",
    "start": "1375150",
    "end": "1381300"
  },
  {
    "text": "that and so no SQL databases shine in that OLTP use case whereas relational",
    "start": "1381300",
    "end": "1386790"
  },
  {
    "text": "databases shine in that ad hoc use case if you look at Amazon DynamoDB it is a",
    "start": "1386790",
    "end": "1393140"
  },
  {
    "text": "wide column key value store it supports both document and attributes and and",
    "start": "1393140",
    "end": "1401220"
  },
  {
    "text": "first-class attributes it's a highly scalable system it's fully managed and that's one of the things",
    "start": "1401220",
    "end": "1406380"
  },
  {
    "text": "that is probably the biggest value pointing to dynamo I mean no SQL databases there's not a lot of",
    "start": "1406380",
    "end": "1411510"
  },
  {
    "text": "differentiation you're going to get into people are gonna tell you about this API feature that API feature the reality is",
    "start": "1411510",
    "end": "1416910"
  },
  {
    "text": "the design patterns that I implement I implement across all stacks I don't I don't discriminate against you know",
    "start": "1416910",
    "end": "1424590"
  },
  {
    "text": "MongoDB Cassandra dynamodb they're all the same and and the design patterns are all equally applicable they are all fast",
    "start": "1424590",
    "end": "1432450"
  },
  {
    "text": "and consistent in any scale but the difference between a DynamoDB and and",
    "start": "1432450",
    "end": "1437580"
  },
  {
    "text": "say a Cassandra or MongoDB is really about scale how many people in the audience have managed no SQL databases",
    "start": "1437580",
    "end": "1442860"
  },
  {
    "text": "at scale I'm talking like 50 plus nodes right so not very many when you get into",
    "start": "1442860",
    "end": "1448440"
  },
  {
    "text": "there there's a few the amount of overhead that goes into managing that system when you start to",
    "start": "1448440",
    "end": "1455400"
  },
  {
    "text": "scale out the cluster is extreme right I have customers that have 724 Knox staffed 365 days a year with engineers",
    "start": "1455400",
    "end": "1463980"
  },
  {
    "text": "that their only job is to keep the Cassandra cluster online right we keep their MongoDB shards running and you",
    "start": "1463980",
    "end": "1470520"
  },
  {
    "text": "know I've had customers with you know trying to add new shards into their clusters and they're under under",
    "start": "1470520",
    "end": "1475710"
  },
  {
    "text": "pressure under under high utilization and they can't even get the clusters to replicate and bring the new capacity",
    "start": "1475710",
    "end": "1482520"
  },
  {
    "text": "online without API throttling their services to reduce and eliminate the",
    "start": "1482520",
    "end": "1487530"
  },
  {
    "text": "pred the the back-end processing pressure on their clusters and so managing that infrastructure at scale",
    "start": "1487530",
    "end": "1493320"
  },
  {
    "text": "that becomes an extreme investment for an organization a very large investment that most companies don't want to make",
    "start": "1493320",
    "end": "1499500"
  },
  {
    "text": "at some point so most of the customers I talk to are the guys that have scaled out to the point where they realize that's that's just not a cost that they",
    "start": "1499500",
    "end": "1506010"
  },
  {
    "text": "want to maintain now how do I get this thing into a fully managed service like a DynamoDB when you look at dynamo DB",
    "start": "1506010",
    "end": "1514679"
  },
  {
    "text": "schema there's like all no SQL databases we have some form of a table or a collection or a key space that's really",
    "start": "1514679",
    "end": "1521820"
  },
  {
    "text": "what a table is in dynamo DB could they call it a key space in cassandra they call it a collection in MongoDB it's all",
    "start": "1521820",
    "end": "1527309"
  },
  {
    "text": "the same and items exist inside of a table and dynamodb items have attributes",
    "start": "1527309",
    "end": "1532919"
  },
  {
    "text": "they don't all have to have the same attributes that's kind of a fundamental characteristic of all no SQL databases",
    "start": "1532919",
    "end": "1538650"
  },
  {
    "text": "is it's a schema list I say not really schema lists I say flexible schema and that allows us to in it to put multiple",
    "start": "1538650",
    "end": "1546059"
  },
  {
    "text": "types of objects on to the table right not just one type of object in dynamo DB we provide a partition key which is a",
    "start": "1546059",
    "end": "1552240"
  },
  {
    "text": "mandatory it uniquely identifies the item we have an optional sort key that",
    "start": "1552240",
    "end": "1557429"
  },
  {
    "text": "you can provide if you provide the sort key then it's the combination of the partition key and the store key that uniquely identify the item what this",
    "start": "1557429",
    "end": "1564179"
  },
  {
    "text": "really means is now the partition key identifies a folder or a bucket and the sort key identifies the order of the",
    "start": "1564179",
    "end": "1570270"
  },
  {
    "text": "items within that folder or bucket and I can execute complex range queries against the sort key attribute to be",
    "start": "1570270",
    "end": "1576780"
  },
  {
    "text": "able to filter and create selective result sets so if you think maybe the Tinky might be a customer ID and the",
    "start": "1576780",
    "end": "1583070"
  },
  {
    "text": "sort key might be the order date for a given customer and my primary access pattern might be get me all of the",
    "start": "1583070",
    "end": "1589190"
  },
  {
    "text": "orders for a given customer in the last 24 hours I can say select star from table where",
    "start": "1589190",
    "end": "1594229"
  },
  {
    "text": "customer ID equals x sort key is greater than 24 hours ago and I could have two years worth of",
    "start": "1594229",
    "end": "1599779"
  },
  {
    "text": "orders for that given customer but I'm only going to get the orders that match that particular sort key condition that I provided so all kinds of range",
    "start": "1599779",
    "end": "1605929"
  },
  {
    "text": "operators available for you to be able to filter and select those resort sets result sets out of those individual",
    "start": "1605929",
    "end": "1612649"
  },
  {
    "text": "partitions that this is the fundamental construct that we're going to maintain in dynamodb is that kind of partition",
    "start": "1612649",
    "end": "1618649"
  },
  {
    "text": "and sort key relationship to be able to group and aggregate the items on the table again all no SQL databases use",
    "start": "1618649",
    "end": "1624919"
  },
  {
    "text": "similar constructs in MongoDB you could call this the shard key and an index versus a partition key and a sword key",
    "start": "1624919",
    "end": "1631159"
  },
  {
    "text": "with the same constructs apply so SQL versus no SQL typically in the past is",
    "start": "1631159",
    "end": "1639019"
  },
  {
    "text": "how we maintain those relational data on a relational database and this is an",
    "start": "1639019",
    "end": "1645529"
  },
  {
    "text": "example of a product catalog we have all of the common relationships that we would expect to see in a relational",
    "start": "1645529",
    "end": "1652669"
  },
  {
    "text": "database a one to one relationship between products and books albums and and videos one-to-many between albums",
    "start": "1652669",
    "end": "1658609"
  },
  {
    "text": "and tracks we have a many-to-many between videos and actors because actors can be in many videos so if you think",
    "start": "1658609",
    "end": "1665899"
  },
  {
    "text": "about the types of queries that we'd have to execute to get a list of my products as three individual queries joining up to four tables of varying",
    "start": "1665899",
    "end": "1672590"
  },
  {
    "text": "levels complexity and this gives you a good idea of why no sqr relational databases have a trouble scaling because",
    "start": "1672590",
    "end": "1678619"
  },
  {
    "text": "that's CPUs hopping all over that disk trying to assemble this denormalized view that the application is actually requiring when I say hey give me all of",
    "start": "1678619",
    "end": "1684919"
  },
  {
    "text": "my videos right and give me out and I want all you know everything the whole actor is in the video and the whole nine",
    "start": "1684919",
    "end": "1690649"
  },
  {
    "text": "yards right it's going to denormalize that into a view and serve it up to the user and this is really if you get into",
    "start": "1690649",
    "end": "1697580"
  },
  {
    "text": "why was relational database invented it was invented in the 60s and 70s late 60s",
    "start": "1697580",
    "end": "1703820"
  },
  {
    "text": "early 70s because storage was extremely expensive so I like to tell is when I",
    "start": "1703820",
    "end": "1709999"
  },
  {
    "text": "was in the mid-80s I was at Macworld in Moscone Center as walking through the Convention",
    "start": "1709999",
    "end": "1716320"
  },
  {
    "text": "Center and I saw a truck transmission in the middle of the conference center so why is there truck transmission in the",
    "start": "1716320",
    "end": "1721870"
  },
  {
    "text": "middle of Moscone Center I went over there and looked a little closer and it wasn't the truck transmission it was a hard drive from 1974 and was cross",
    "start": "1721870",
    "end": "1729100"
  },
  {
    "text": "section it was really cool-looking his eldest platters and everything all cut in half but how little sticker I'd said",
    "start": "1729100",
    "end": "1734710"
  },
  {
    "text": "you know capacity four megabytes I was like wow that's a pretty big disc four four megabytes and then underneath it",
    "start": "1734710",
    "end": "1740169"
  },
  {
    "text": "said MSRP $256,000 whoa so so back in",
    "start": "1740169",
    "end": "1745210"
  },
  {
    "text": "1974 I guess we weren't storing a lot of data on magnetic discs probably not but the point is yeah we were probably using",
    "start": "1745210",
    "end": "1751630"
  },
  {
    "text": "paper tape magnetic tape and all this kind of stuff floppy disks even but the reality is storage was extremely",
    "start": "1751630",
    "end": "1757780"
  },
  {
    "text": "expensive and the sprawl of data on disk was was was causing data centers to rack",
    "start": "1757780",
    "end": "1763480"
  },
  {
    "text": "nothing but more and more and more storage arrays right so we wanted to deep to decrease the pressure on the",
    "start": "1763480",
    "end": "1769480"
  },
  {
    "text": "storage subsystem so we developed a relational database which does a beautiful job of normalizing the data",
    "start": "1769480",
    "end": "1774960"
  },
  {
    "text": "deduplicating that data on disk gives me an ad hoc query engine so I can restructure that data on the way out but",
    "start": "1774960",
    "end": "1781360"
  },
  {
    "text": "it comes at a cost and that cost is CPU right but we didn't care about that in 1970 we cared about the stories now",
    "start": "1781360",
    "end": "1786730"
  },
  {
    "text": "fast-forward 40 years and that is not the case today today I pay for CPU seconds I pay pennies per gigabyte for",
    "start": "1786730",
    "end": "1794110"
  },
  {
    "text": "storage so why would I use a relational technology that's optimizing the least expensive resource in the data center",
    "start": "1794110",
    "end": "1800350"
  },
  {
    "text": "and that's really what we're doing when we start looking at new SQL so there's a reason there's a method to the madness",
    "start": "1800350",
    "end": "1805360"
  },
  {
    "text": "here we're not just changing things because we like to we're changing things because we have to because it's not cost",
    "start": "1805360",
    "end": "1811270"
  },
  {
    "text": "effective to use a relational database for big data applications and one of the things I'm seeing the huge trend I'm",
    "start": "1811270",
    "end": "1816790"
  },
  {
    "text": "seeing in the industry is if you asked me a year ago even where I thought the the no SQL technology I mean I would",
    "start": "1816790",
    "end": "1823210"
  },
  {
    "text": "tell you right away that it was well I think there's this class of application but it's not the common class it's the",
    "start": "1823210",
    "end": "1829870"
  },
  {
    "text": "big data app today I'm seeing that the common app is starting to become the big data app more and more I'm working with",
    "start": "1829870",
    "end": "1836049"
  },
  {
    "text": "customers and I'm looking at applications it's just a year ago weren't working under the same data load that they are it reminds me of you know the early days",
    "start": "1836049",
    "end": "1843090"
  },
  {
    "text": "when we would talk about sizing a workload in estimating and we're always wrong right if there is something",
    "start": "1843090",
    "end": "1848549"
  },
  {
    "text": "successful it always ends up consuming a lot more than we expect and that's what I'm starting to see in this trend so",
    "start": "1848549",
    "end": "1854610"
  },
  {
    "text": "maybe a better approach to this is to use a denormalized data structure where",
    "start": "1854610",
    "end": "1860279"
  },
  {
    "text": "I'm going to take those hierarchical items and those tables and I'm gonna rotate all of those rows into a",
    "start": "1860279",
    "end": "1865440"
  },
  {
    "text": "hierarchical data structure a document or a collection of items that live in a single partition on my table and now if",
    "start": "1865440",
    "end": "1871830"
  },
  {
    "text": "I want to get all the products on the table I have a very simple query select star from products Wow I've eliminated",
    "start": "1871830",
    "end": "1878580"
  },
  {
    "text": "all the complexity in multiple round trips to the database and a lot of CPU load simply by denormalizing the data",
    "start": "1878580",
    "end": "1885000"
  },
  {
    "text": "and storing it in a little bit different ways so this is kind of a general approach we're gonna see with no SQL",
    "start": "1885000",
    "end": "1890309"
  },
  {
    "text": "right UID normalize that data so that we can distribute the processing and make things scale a little bit easier when",
    "start": "1890309",
    "end": "1898350"
  },
  {
    "start": "1897000",
    "end": "1897000"
  },
  {
    "text": "you get into graph databases we haven't a great offering Amazon Neptune and really graph databases are about",
    "start": "1898350",
    "end": "1904759"
  },
  {
    "text": "relationships it's about querying those relationships relationships in the graph database are first-class entities what",
    "start": "1904759",
    "end": "1910919"
  },
  {
    "text": "does that mean it means they have properties right relation in a relational database I have a one-to-many relationship but I don't those",
    "start": "1910919",
    "end": "1916799"
  },
  {
    "text": "relationships don't have properties in them they're cells that define how are these items actually related to each other if I want to do that in relational",
    "start": "1916799",
    "end": "1923279"
  },
  {
    "text": "database I have to create this little lookup table and then the lookup table can have no properties on the mapping",
    "start": "1923279",
    "end": "1928919"
  },
  {
    "text": "between the parent the child and whatnot but it becomes again another step another aggregation function that the",
    "start": "1928919",
    "end": "1935250"
  },
  {
    "text": "CPU has to execute an or build provide that data so Amazon Neptune is out there for you it's a fully scalable graph",
    "start": "1935250",
    "end": "1942450"
  },
  {
    "text": "database supports millions of transactions fruit you know per second across multiple read nodes a very very",
    "start": "1942450",
    "end": "1951629"
  },
  {
    "text": "powerful system and we'll get into what kind of workloads make sense for graph then there's a very specific class of",
    "start": "1951629",
    "end": "1959190"
  },
  {
    "text": "workloads that work very well with the graph database and they're typically it involves traversing those relationships",
    "start": "1959190",
    "end": "1964259"
  },
  {
    "text": "so you know if you find yourself querying a database and round-tripping back and forth multiple times to get the",
    "start": "1964259",
    "end": "1970139"
  },
  {
    "text": "answer that you want then maybe it's a good workflow for graphs let's talk about it and a recommendation engine here where I have",
    "start": "1970139",
    "end": "1976340"
  },
  {
    "text": "you know maybe a users going to visit Paris he's interested in the Mona Lisa he wants to see other things in Paris",
    "start": "1976340",
    "end": "1983000"
  },
  {
    "text": "that his friends you know have seen and liked and so if we look at the approaches that we can take to solve",
    "start": "1983000",
    "end": "1988970"
  },
  {
    "start": "1984000",
    "end": "1984000"
  },
  {
    "text": "this problem maybe the first approach is to use a normalized graph design this would be a relational database purely",
    "start": "1988970",
    "end": "1994130"
  },
  {
    "text": "relational fully normalized and you can start to think about okay well if Bob wants to find out all of his friends",
    "start": "1994130",
    "end": "2000340"
  },
  {
    "text": "first I have to query for all of Bob's friends and I have to query for all the things that Bob's friends have done and like and then I have to go in and if I'm",
    "start": "2000340",
    "end": "2006970"
  },
  {
    "text": "making multiple round trips through the database to be able to get the lists of data that I need to process in order to",
    "start": "2006970",
    "end": "2012790"
  },
  {
    "text": "determine what are the things Bob might want to see when he goes to Paris obviously not a very efficient approach",
    "start": "2012790",
    "end": "2018340"
  },
  {
    "text": "I'm gonna have a round trip back and forth this database multiple times to get all the various items and and and",
    "start": "2018340",
    "end": "2025059"
  },
  {
    "text": "and whatnot that are related in order to be able to come up with an answer and the different approach might be to say",
    "start": "2025059",
    "end": "2031660"
  },
  {
    "start": "2030000",
    "end": "2030000"
  },
  {
    "text": "let's denormalize that graph into an adjacency list right we've been solving graph problems for a long time without",
    "start": "2031660",
    "end": "2037720"
  },
  {
    "text": "graph databases and this is how we've done it you build these denormalized views where I create a table and on this",
    "start": "2037720",
    "end": "2043840"
  },
  {
    "text": "table I have nodes and each one of the nodes has relationships defined within",
    "start": "2043840",
    "end": "2049810"
  },
  {
    "text": "these nodes that define how they're connected to the other nodes of the graph all right so in this case let's",
    "start": "2049810",
    "end": "2055570"
  },
  {
    "text": "say we want to get all the edges that are connected to Bob right the Bob is",
    "start": "2055570",
    "end": "2061840"
  },
  {
    "text": "connected to I could select star from the table where the node ID or the partition key equals Bob and I'm gonna",
    "start": "2061840",
    "end": "2068050"
  },
  {
    "text": "get all the things that define Bob and his relationships to all the things that he's chosen to relate to you if I want",
    "start": "2068050",
    "end": "2073510"
  },
  {
    "text": "to get all the types of edges or all of the edges that that have chosen to",
    "start": "2073510",
    "end": "2079690"
  },
  {
    "text": "connect to Bob then I could create inverted indexes on the type of relationship between those nodes I could",
    "start": "2079690",
    "end": "2086230"
  },
  {
    "text": "index the endpoints of the relationships between those nodes and I can query one side or the other of that many-to-many",
    "start": "2086230",
    "end": "2092500"
  },
  {
    "text": "relationship but we're still stuck in that same problem if I need to actually traverse the edges and this use case Bob",
    "start": "2092500",
    "end": "2098290"
  },
  {
    "text": "wants to see the Mona Lisa while he's in Paris he wants to see other things okay now I",
    "start": "2098290",
    "end": "2103820"
  },
  {
    "text": "two round-trip multiple times through to get all the things that Bob's connected to all the friends that have visited",
    "start": "2103820",
    "end": "2109100"
  },
  {
    "text": "Paris all the things that they've done in Paris I'm traversing the relationships okay I'm making multiple",
    "start": "2109100",
    "end": "2114560"
  },
  {
    "text": "round trips to the database inefficient high latency process so this is a",
    "start": "2114560",
    "end": "2119600"
  },
  {
    "text": "perfect example of what a graph database gives you is the ability to query those edges behind the API I can make one",
    "start": "2119600",
    "end": "2125810"
  },
  {
    "start": "2120000",
    "end": "2120000"
  },
  {
    "text": "query of a graph database so if you look at the graph query types we have a node query is kind of the primary query and",
    "start": "2125810",
    "end": "2131210"
  },
  {
    "text": "this is like what entities are in the graph I can do this with a relational database or no SQL database or graph",
    "start": "2131210",
    "end": "2136760"
  },
  {
    "text": "database just as easily I have an edge query that gives me you know what relationships do the graph entities have",
    "start": "2136760",
    "end": "2142460"
  },
  {
    "text": "to each other I can do this again with a relational database or a no SQL database or a graph database but that last one",
    "start": "2142460",
    "end": "2149120"
  },
  {
    "text": "that high that hybrid query the traversal this is where graph database is shine because now I don't have to",
    "start": "2149120",
    "end": "2155150"
  },
  {
    "text": "traverse the edges I can query and say give me everything that is related to Bob all of his friends and what they've done and the things they like and I'm",
    "start": "2155150",
    "end": "2162050"
  },
  {
    "text": "gonna be able to make one query of a graph database and retrieve all of that data in one roundtrip so that's a that's",
    "start": "2162050",
    "end": "2168590"
  },
  {
    "text": "the that's a primary advantage of that graph database is when I actually need to traverse the relationships between",
    "start": "2168590",
    "end": "2173990"
  },
  {
    "text": "the entities in my application that's when I'd actually pull that out all right let's move on getting to redshift",
    "start": "2173990",
    "end": "2180620"
  },
  {
    "start": "2178000",
    "end": "2178000"
  },
  {
    "text": "redshift is about data warehousing fully scaleable back in one of the most",
    "start": "2180620",
    "end": "2186830"
  },
  {
    "text": "powerful features of redshift is the elasticity right we can resize the",
    "start": "2186830",
    "end": "2191900"
  },
  {
    "text": "cluster up and down is the performance and capacity needs change which is not what you something you can do with an",
    "start": "2191900",
    "end": "2197240"
  },
  {
    "text": "on-prem data warehouse writing an on-prem data warehouse is provisioned 100% it sits there spinning disks and",
    "start": "2197240",
    "end": "2203090"
  },
  {
    "text": "spinning cpu whether I'm using it or not with redshift I can actually spin up the capacity I need when I need to execute",
    "start": "2203090",
    "end": "2208670"
  },
  {
    "text": "those decision support systems style workloads or data warehousing workloads and and spin it down when I don't save",
    "start": "2208670",
    "end": "2215300"
  },
  {
    "text": "yourself a lot of a lot of money that way Athena is another way to be able to",
    "start": "2215300",
    "end": "2221150"
  },
  {
    "start": "2219000",
    "end": "2219000"
  },
  {
    "text": "manage you know DSS style workloads against a data Lake if I have a",
    "start": "2221150",
    "end": "2226510"
  },
  {
    "text": "semi-structured data in s3 you've really nice thing about Athena is it's the own server list completely serverless",
    "start": "2226510",
    "end": "2232310"
  },
  {
    "text": "infrastructure for doing these types of analytics you pay only for the queries that are run and it's very open and easy I mean one",
    "start": "2232310",
    "end": "2240049"
  },
  {
    "text": "of the nice things about JDBC ODBC connectors you can build your application connect right to the right to the Athena service and again you pay",
    "start": "2240049",
    "end": "2247309"
  },
  {
    "text": "only for the queries that you run just point the thing to s3 and execute those complex SQL know queries against the",
    "start": "2247309",
    "end": "2254839"
  },
  {
    "text": "data that you have archived and I believe the glacier feature is still in a coming soon state I noticed this",
    "start": "2254839",
    "end": "2260089"
  },
  {
    "text": "before the session it says I'm not I did have checked that it might actually have been released by now but you know we",
    "start": "2260089",
    "end": "2266989"
  },
  {
    "text": "will be able to query the data that you actually have stored in Amazon glacier as well with the Athena engine qld be",
    "start": "2266989",
    "end": "2275450"
  },
  {
    "text": "announced earlier today this is a fully managed ledger database this is really cool really exciting because this gives",
    "start": "2275450",
    "end": "2280519"
  },
  {
    "text": "us a system that gives us it's a pend only immutable journal right so one of",
    "start": "2280519",
    "end": "2286279"
  },
  {
    "text": "the things that we run into you know often times is the ability to guarantee an audit trail how do I guarantee an",
    "start": "2286279",
    "end": "2292039"
  },
  {
    "text": "audit trail in the system right I cannot stop a malicious actor from coming in and changing the data underneath the",
    "start": "2292039",
    "end": "2297470"
  },
  {
    "text": "covers I mean no matter how much code I write at the application layer if somebody comes in directly to the database and starts executing you know",
    "start": "2297470",
    "end": "2304249"
  },
  {
    "text": "queries against the data in the database then that data could be changed without the application layer being aware of it",
    "start": "2304249",
    "end": "2309950"
  },
  {
    "text": "with the cathay with a ledger database that is not the case right they it's a mutable and transparent in a journal",
    "start": "2309950",
    "end": "2316700"
  },
  {
    "text": "that script illogically or cryptographically verifiable is probably the most powerful feature of a ledger",
    "start": "2316700",
    "end": "2322549"
  },
  {
    "text": "database so when you have those use cases that have that kind of compliance requirements around auditing audit",
    "start": "2322549",
    "end": "2329150"
  },
  {
    "text": "trails whatnot this is a really good solution for you the other thing we have just recently announced is in a time",
    "start": "2329150",
    "end": "2335839"
  },
  {
    "text": "stream which is time series database this was a really neat system to be able",
    "start": "2335839",
    "end": "2341299"
  },
  {
    "text": "to you know process that and analyze data there's optimized for time series",
    "start": "2341299",
    "end": "2347059"
  },
  {
    "text": "so anyone who's using like a familiar with IOT type of applications oftentimes",
    "start": "2347059",
    "end": "2353029"
  },
  {
    "text": "that's exactly what we're doing we're managing that time series data we're bucketed partitions where we need partitioned metrics amazon's time stream",
    "start": "2353029",
    "end": "2361249"
  },
  {
    "text": "is optimized for those workloads so again purpose-built database solutions for just about every single type of",
    "start": "2361249",
    "end": "2367069"
  },
  {
    "start": "2364000",
    "end": "2364000"
  },
  {
    "text": "workload when you get into you know what to use when it's really about you know again these dimensions if",
    "start": "2367069",
    "end": "2374400"
  },
  {
    "text": "I'm looking at an SQL database then I'm looking at normalized relational data or",
    "start": "2374400",
    "end": "2379650"
  },
  {
    "text": "dimensional any snowflakes type schemas I'm gonna load into a redshift or data warehouse I'm running ad-hoc queries and",
    "start": "2379650",
    "end": "2387060"
  },
  {
    "text": "aggregations I'm gonna scale vertically right I got a scale within a single system a single box and it's really good",
    "start": "2387060",
    "end": "2394350"
  },
  {
    "text": "for those OLAP or DSS style workloads right decision support system workloads where you know analytics access patterns",
    "start": "2394350",
    "end": "2401490"
  },
  {
    "text": "that are not well understood these are really good use cases for SQL no SQL is",
    "start": "2401490",
    "end": "2406650"
  },
  {
    "text": "really optimized for compute right so again SQL optimized for storage no SQL optimized for compute I'm gonna spend",
    "start": "2406650",
    "end": "2412980"
  },
  {
    "text": "more time upfront modeling my data with an with a no SQL database I'm gonna need to understand the access patterns of",
    "start": "2412980",
    "end": "2419490"
  },
  {
    "text": "that particular application they're going to need to be definable well understood once I've done that I'm gonna",
    "start": "2419490",
    "end": "2424860"
  },
  {
    "text": "spend the time and denormalized that data and then I can I can store it as a I guess you could say a collection of",
    "start": "2424860",
    "end": "2431100"
  },
  {
    "text": "instantiated views or pre computed aggregations that I can call up with simple queries I'm not going to ask the",
    "start": "2431100",
    "end": "2437850"
  },
  {
    "text": "system to compute a lot of data on the way out I want that read pattern to be highly efficient so and when we",
    "start": "2437850",
    "end": "2444360"
  },
  {
    "text": "denormalize the data model now we can scale horizontally across multiple boxes again for nearly unbounded throughput in",
    "start": "2444360",
    "end": "2450840"
  },
  {
    "text": "capacity no SQL databases are absolutely fantastic and then the last category we",
    "start": "2450840",
    "end": "2456420"
  },
  {
    "text": "have here is that graph database and the graph database is about relationships right denormalized entity relationships",
    "start": "2456420",
    "end": "2463440"
  },
  {
    "text": "traversing the graph so to speak it's really really good for ad-hoc queries against those relationships one of the",
    "start": "2463440",
    "end": "2470100"
  },
  {
    "text": "nice things about a no SQL database you know we've showed that you Jason C list model I can actually pre compute the",
    "start": "2470100",
    "end": "2475650"
  },
  {
    "text": "graph aggregations and write those into the edges and if you think about you know common social networking",
    "start": "2475650",
    "end": "2480780"
  },
  {
    "text": "applications like you know Facebook or LinkedIn things like this those are not",
    "start": "2480780",
    "end": "2486420"
  },
  {
    "text": "running on graph databases that are computing the results ad hoc every time I want to get the list of friends of my friends right or the connections my",
    "start": "2486420",
    "end": "2493050"
  },
  {
    "text": "second and third level connections typically what happens in those applications is are going to have a batch process that runs on a regular",
    "start": "2493050",
    "end": "2499410"
  },
  {
    "text": "schedule it's going to modify the that's related to my user to include those graph projections so that when I",
    "start": "2499410",
    "end": "2505589"
  },
  {
    "text": "make the query I don't have to actually compute the result it's reading the result to offload the CPU so the",
    "start": "2505589",
    "end": "2511109"
  },
  {
    "text": "eventually consistent view but it's going to be a much more efficient view so it depends on the nature of the",
    "start": "2511109",
    "end": "2516269"
  },
  {
    "text": "workload right if I want to support those ad hoc entity-relationship aggregations and graph databases or",
    "start": "2516269",
    "end": "2522180"
  },
  {
    "text": "wonderful solutions and so it's kind of a hybrid scale model as designed for",
    "start": "2522180",
    "end": "2527880"
  },
  {
    "text": "those graphed reversals so we get down to it there's a couple of dimensions to",
    "start": "2527880",
    "end": "2534930"
  },
  {
    "start": "2530000",
    "end": "2530000"
  },
  {
    "text": "your workload I like to call this the iron triangle of purpose it's the or the pi theorem because I like pie it's tasty",
    "start": "2534930",
    "end": "2542609"
  },
  {
    "text": "but bottom line is you have a couple of dimensions the first dimension is pattern flexibility this is the ad hoc",
    "start": "2542609",
    "end": "2548069"
  },
  {
    "text": "queries do I do I understand my access patterns are they well understood or not if they're not then I need that pattern",
    "start": "2548069",
    "end": "2553890"
  },
  {
    "text": "flexibility that's one of the dimensions of the Iron Triangle of purpose if I have the need to scale for all practical",
    "start": "2553890",
    "end": "2560609"
  },
  {
    "text": "purposes without bound write that infinite scale if I have the need for that then that's another",
    "start": "2560609",
    "end": "2566400"
  },
  {
    "text": "dimension right how about much scaled as my application as my workload require and then there's efficiency how fast",
    "start": "2566400",
    "end": "2573089"
  },
  {
    "text": "does the result need to come back and these are the three fundamental dimensions of any given workload and if",
    "start": "2573089",
    "end": "2578489"
  },
  {
    "text": "you look at Amazon's solutions that are available we have solutions available for every single category if you look at",
    "start": "2578489",
    "end": "2584849"
  },
  {
    "text": "the PI solution or pattern flexibility in fits scale we have that's a data warehousing workload I don't really",
    "start": "2584849",
    "end": "2590489"
  },
  {
    "text": "necessarily I don't care about the efficiency what I need is I need scale and I need the ability to answer ad hoc",
    "start": "2590489",
    "end": "2596819"
  },
  {
    "text": "queries and questions that I don't necessarily know what they are right now and that's a data warehousing or a",
    "start": "2596819",
    "end": "2602519"
  },
  {
    "text": "decision support system that works very well with Amazon's redshift or athina offerings if you look at the IE",
    "start": "2602519",
    "end": "2608249"
  },
  {
    "text": "or the infinite scale and the efficiency dimensions then we're really talking about a denormalized data store with",
    "start": "2608249",
    "end": "2614099"
  },
  {
    "text": "well-understood access patterns because I don't need the pattern flexibility this is an OLTP application and this is",
    "start": "2614099",
    "end": "2619949"
  },
  {
    "text": "going to be a beautiful application for Amazon's DynamoDB and then the last category would be the PE dimension or",
    "start": "2619949",
    "end": "2626160"
  },
  {
    "text": "pattern flexibility efficiency and this is where we're getting into ad hoc queries and I need to have low latency",
    "start": "2626160",
    "end": "2631439"
  },
  {
    "text": "response times so maybe you know OLTP applications don't require a lot of scale could be",
    "start": "2631439",
    "end": "2637009"
  },
  {
    "text": "supported by these systems or you know I need OLAP style applications or",
    "start": "2637009",
    "end": "2643460"
  },
  {
    "text": "operational analytics where I'm trying to answer questions in real time of my",
    "start": "2643460",
    "end": "2648710"
  },
  {
    "text": "data and I don't know what questions are gonna be answered or passed say multiple multi dimensional searches users have",
    "start": "2648710",
    "end": "2653930"
  },
  {
    "text": "the ability to come in and say search on you know in number of dimensions these are the types of applications that run",
    "start": "2653930",
    "end": "2659299"
  },
  {
    "text": "much more efficiently with the relational database I put a Neptune in this category as well because it excels",
    "start": "2659299",
    "end": "2664819"
  },
  {
    "text": "at ad hoc graph queries even though it's a no SQL database that it's it's sweet spot is in those ad hoc graph",
    "start": "2664819",
    "end": "2670490"
  },
  {
    "text": "aggregations so there's a really good dimensional graph here that you can look at say okay what is my workload do I",
    "start": "2670490",
    "end": "2677390"
  },
  {
    "text": "need pattern flexibility an infinite scale do I need infinite scale and efficiency do I need pattern flexibility",
    "start": "2677390",
    "end": "2683420"
  },
  {
    "text": "and efficiency and we kind of break things down into one of those three categories and we can really pick the",
    "start": "2683420",
    "end": "2689089"
  },
  {
    "text": "database that's going to be the most effective you know for your solution based on those dimensions when you get",
    "start": "2689089",
    "end": "2697130"
  },
  {
    "text": "into DynamoDB as a service the reliability the services is undeniable I mean it's what we call this tier 0",
    "start": "2697130",
    "end": "2703460"
  },
  {
    "text": "service at AWS it backs other AWS services as a matter of fact in our",
    "start": "2703460",
    "end": "2708799"
  },
  {
    "text": "region build process a region cannot even go live it's a you know other services are built on top of it so when",
    "start": "2708799",
    "end": "2715430"
  },
  {
    "text": "we actually lay down the foundation of a region DynamoDB is one of the very first services to come online if not the first",
    "start": "2715430",
    "end": "2721839"
  },
  {
    "text": "hundreds of thousands of customers use dynamodb for just about any given workload that you can think of some of",
    "start": "2721839",
    "end": "2727849"
  },
  {
    "text": "the most mission critical workloads in the world how many folks in the audience have a galaxy samsung galaxy phone all",
    "start": "2727849",
    "end": "2735470"
  },
  {
    "text": "right you're using dynamodb because the galaxy sync service runs on top of dynamodb as a matter of fact almost",
    "start": "2735470",
    "end": "2741079"
  },
  {
    "text": "every one of you guys if you pull out your phones and start flipping through your apps I could point to a dozen applications that are probably installed",
    "start": "2741079",
    "end": "2746960"
  },
  {
    "text": "on your phone that are actually using dynamodb that's how distributed or how ubiquitous this technology is you don't",
    "start": "2746960",
    "end": "2753589"
  },
  {
    "text": "even know that you're customers but you all our customers hundreds of thousands more use RDS obviously RDS is a",
    "start": "2753589",
    "end": "2760640"
  },
  {
    "text": "technology relational database technology's been around for 40 years it's not going away anytime soon oftentimes the",
    "start": "2760640",
    "end": "2766900"
  },
  {
    "text": "the easiest way to get your applications into the cloud is to lift and shift so to speak maybe you're not experiencing",
    "start": "2766900",
    "end": "2772660"
  },
  {
    "text": "the scale pressure that makes it you know necessary to migrate that application that dynamodb but you're not",
    "start": "2772660",
    "end": "2778329"
  },
  {
    "text": "interested in managing that infrastructure anymore that's one of the best things about RDS is it's fully",
    "start": "2778329",
    "end": "2783849"
  },
  {
    "text": "managed you don't have to worry about patching your servers or rebuilding your volumes if datak if you get storage",
    "start": "2783849",
    "end": "2790059"
  },
  {
    "text": "corruption that's that's our job so let us do that heavy lifting if you look at",
    "start": "2790059",
    "end": "2795509"
  },
  {
    "start": "2794000",
    "end": "2794000"
  },
  {
    "text": "purpose-built database solutions it's all about offloading that infrastructure management from you and think of all the",
    "start": "2795509",
    "end": "2802119"
  },
  {
    "text": "things that you can do if you didn't have to worry about capacity planning provisioning monitoring OS patching",
    "start": "2802119",
    "end": "2807339"
  },
  {
    "text": "hardware upgrades provisioning for new regions and not only that software database upgrades security patches",
    "start": "2807339",
    "end": "2814499"
  },
  {
    "text": "scaling that that system monitoring performance tuning these are all things that you know are not core to your",
    "start": "2814499",
    "end": "2820239"
  },
  {
    "text": "business so don't do it let us do it let the managed service providers do it we actually are really really good at this",
    "start": "2820239",
    "end": "2825999"
  },
  {
    "text": "stuff because we've been doing it for a long long time and and not only that but can you do this with all-zero with zero",
    "start": "2825999",
    "end": "2832119"
  },
  {
    "text": "unplanned downtime or in the case of like a DynamoDB zero downtime as a matter of fact I'm gonna say zero we",
    "start": "2832119",
    "end": "2838479"
  },
  {
    "text": "have an SLA up on DynamoDB it's for nine SLA and it's in a single region if you go global tables it's five nines if",
    "start": "2838479",
    "end": "2845559"
  },
  {
    "text": "anyone has tried to maintain IT infrastructure with a five nine availability you'll know that's like seconds of downtime per year right",
    "start": "2845559",
    "end": "2853200"
  },
  {
    "text": "that's not easy to accomplish we do it every day as a matter of fact we have to",
    "start": "2853200",
    "end": "2858880"
  },
  {
    "text": "do it every day because again Amazon DynamoDB is a tier zero service with other AWS services built on top of it if",
    "start": "2858880",
    "end": "2864579"
  },
  {
    "text": "we go down regions go down we've never seen a region failure so that's a good",
    "start": "2864579",
    "end": "2870039"
  },
  {
    "text": "test a testament to the reliability of dynamodb all right that's what I have",
    "start": "2870039",
    "end": "2876880"
  },
  {
    "text": "for you guys today thank you so much I'll be taking questions out in the hallway out there",
    "start": "2876880",
    "end": "2882538"
  }
]