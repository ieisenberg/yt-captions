[
  {
    "text": "This video will help you get started \nwith Amazon Kinesis Data Streams.",
    "start": "0",
    "end": "3418"
  },
  {
    "text": "Let’s begin by talking about the \nimportance of having fresh data.",
    "start": "4669",
    "end": "7484"
  },
  {
    "text": "Data loses value over time.",
    "start": "8185",
    "end": "9844"
  },
  {
    "text": "Making decisions based on outdated \ndata can negatively affect the customer",
    "start": "10000",
    "end": "13457"
  },
  {
    "text": "experience and inhibit organizational growth.",
    "start": "13457",
    "end": "16125"
  },
  {
    "text": "Traditional batch processing of data \nresults in business intelligence that is",
    "start": "17341",
    "end": "20471"
  },
  {
    "text": "often hours, days, or even months \nold by the time it is available.",
    "start": "20471",
    "end": "23834"
  },
  {
    "text": "However, many time-critical decisions require \ndata that is only seconds or minutes old.",
    "start": "25039",
    "end": "29154"
  },
  {
    "text": "For instance, time is critical for \nreal-time anomaly and fraud detection.",
    "start": "30890",
    "end": "34505"
  },
  {
    "text": "Likewise, businesses want to \nprovide safe, real-time customer",
    "start": "35234",
    "end": "38200"
  },
  {
    "text": "experiences and personalization.",
    "start": "38200",
    "end": "40000"
  },
  {
    "text": "Event-driven architecture permits a\ngreater degree of development agility",
    "start": "41053",
    "end": "44498"
  },
  {
    "text": "than would otherwise be possible.",
    "start": "44498",
    "end": "45931"
  },
  {
    "text": "It also enables businesses to decouple \ntheir microservices to increase resiliency,",
    "start": "46713",
    "end": "50965"
  },
  {
    "text": "and to analyze Change Data Capture \nsignals across a variety of applications.",
    "start": "50965",
    "end": "55082"
  },
  {
    "text": "All this is achievable by processing \nstreaming data in real time.",
    "start": "55757",
    "end": "59184"
  },
  {
    "text": "Streaming data is high-volume, \ncontinuous, and generated by thousands",
    "start": "60870",
    "end": "64224"
  },
  {
    "text": "of data sources, often simultaneously.",
    "start": "64224",
    "end": "66368"
  },
  {
    "text": "Processing it must account \nfor record order and latency.",
    "start": "66909",
    "end": "69827"
  },
  {
    "text": "Let’s look at how data is streamed.",
    "start": "71213",
    "end": "72697"
  },
  {
    "text": "At a very basic level, all stream \nprocessing applications include five stages.",
    "start": "72985",
    "end": "77035"
  },
  {
    "text": "The process begins with data generated\n by multiple sources, or producers.",
    "start": "77754",
    "end": "81423"
  },
  {
    "text": "Second is stream ingestion, when data",
    "start": "82377",
    "end": "84433"
  },
  {
    "text": "from tens of thousands of data sources \nis collected and ingested in real time.",
    "start": "84433",
    "end": "88173"
  },
  {
    "text": "The third stage is stream storage.",
    "start": "89117",
    "end": "90854"
  },
  {
    "text": "Data is stored in the order received \nfor a set duration, and can be replayed",
    "start": "91259",
    "end": "94550"
  },
  {
    "text": "indefinitely during that time.",
    "start": "94550",
    "end": "96125"
  },
  {
    "text": "The fourth stage, stream processing, is when \nthe stored data is analyzed to gain insights.",
    "start": "96836",
    "end": "101557"
  },
  {
    "text": "Records are always read in the \norder in which they are received.",
    "start": "102222",
    "end": "104821"
  },
  {
    "text": "The final stage is to send the processed\n data to a destination, such as a data",
    "start": "105694",
    "end": "109379"
  },
  {
    "text": "lake, data warehouse, or database.",
    "start": "109379",
    "end": "111338"
  },
  {
    "text": "While the advantages to real-time \ndata streaming are clear, building and",
    "start": "112976",
    "end": "116258"
  },
  {
    "text": "operating a custom streaming \ndata pipeline is resource intensive.",
    "start": "116259",
    "end": "119610"
  },
  {
    "text": "The system can be difficult \nto set up and tricky to scale.",
    "start": "119906",
    "end": "122587"
  },
  {
    "text": "It can also be hard to achieve high \navailability, as this requires fine-tuning storage,",
    "start": "123639",
    "end": "128155"
  },
  {
    "text": "data batching, and compute resources \nfor maximum throughput and low latency.",
    "start": "128155",
    "end": "132056"
  },
  {
    "text": "Maintaining real-time data streaming \nis error prone and complex to manage.",
    "start": "133000",
    "end": "136790"
  },
  {
    "text": "And all of this takes valuable time and money.",
    "start": "137501",
    "end": "139699"
  },
  {
    "text": "Amazon Kinesis Data Streams \naddresses these issues for you.",
    "start": "140959",
    "end": "143931"
  },
  {
    "text": "Kinesis Data Streams is a cloud-native, \nhighly available, serverless streaming",
    "start": "144489",
    "end": "148172"
  },
  {
    "text": "data service built to handle billions of events.",
    "start": "148172",
    "end": "150776"
  },
  {
    "text": "Kinesis Data Streams handles \ningestion and stream storage",
    "start": "151957",
    "end": "155132"
  },
  {
    "text": "stages of data-streaming use cases.",
    "start": "155132",
    "end": "157222"
  },
  {
    "text": "It provides one simple solution that \nallows any organization to ingest large",
    "start": "157780",
    "end": "161409"
  },
  {
    "text": "data volumes per second from thousands \nof sources, in the right order, and have",
    "start": "161409",
    "end": "165192"
  },
  {
    "text": "consistent, scalable performance.",
    "start": "165192",
    "end": "166996"
  },
  {
    "text": "The data is stored in shards within data\n streams, and customers can replay",
    "start": "167833",
    "end": "171146"
  },
  {
    "text": "them and consume as much as \nneeded during the retention period.",
    "start": "171147",
    "end": "174048"
  },
  {
    "text": "Data stored in the stream can be \nprocessed by real-time applications",
    "start": "174840",
    "end": "177840"
  },
  {
    "text": "to generate real-time analytics, execute \nreal-time ETL, and then deliver the continuous",
    "start": "177840",
    "end": "182496"
  },
  {
    "text": "data to an end destination such as \na data lake, warehouse, or database.",
    "start": "182496",
    "end": "186263"
  },
  {
    "text": "To ensure high analytics performance \nfor certain stream data, customers can",
    "start": "187342",
    "end": "190931"
  },
  {
    "text": "set up enhanced fan-out, or EFO, \nconsumers to avoid data-read congestion.",
    "start": "190931",
    "end": "195270"
  },
  {
    "text": "Each EFO consumer is given its own \ndedicated bandwidth within a shard",
    "start": "196466",
    "end": "199976"
  },
  {
    "text": "to ensure consistent low latency.",
    "start": "199976",
    "end": "201875"
  },
  {
    "text": "This feature is supported by Amazon Lambda, \nApache Flink, Kinesis Client Library, and more.",
    "start": "202704",
    "end": "207637"
  },
  {
    "text": "In this example, Shard 1 has been set up\n with three EFO consumer applications.",
    "start": "208295",
    "end": "212513"
  },
  {
    "text": "As a result, these three will not have to \nfight for bandwidth with other applications.",
    "start": "213098",
    "end": "216812"
  },
  {
    "text": "To further help customers with \nmanaging growing data volume,",
    "start": "218000",
    "end": "220778"
  },
  {
    "text": "Kinesis Data Streams \nprovides hands-free scaling.",
    "start": "220778",
    "end": "223351"
  },
  {
    "text": "This is now the default option when \nyou create a data stream, ensuring",
    "start": "224000",
    "end": "227021"
  },
  {
    "text": "that you only pay for what you use.",
    "start": "227021",
    "end": "228825"
  },
  {
    "text": "Streaming data is stored in the order \nreceived for a set duration of time,",
    "start": "229941",
    "end": "233155"
  },
  {
    "text": "and can be replayed \nindefinitely during that time.",
    "start": "233155",
    "end": "235338"
  },
  {
    "text": "The default retention period for stream \ndata is 24 hours, but customers can",
    "start": "235995",
    "end": "239752"
  },
  {
    "text": "extend it to as long as one year, according\nto their data replay and retrieval needs.",
    "start": "239752",
    "end": "243726"
  },
  {
    "text": "On the data ingestion side, Kinesis Data \nStreams can be connected with tens of",
    "start": "244931",
    "end": "248440"
  },
  {
    "text": "thousands of data sources from \nAmazon and other data producers.",
    "start": "248440",
    "end": "251521"
  },
  {
    "text": "On the data consumer side as well, \nKinesis Data Streams can be connected",
    "start": "252724",
    "end": "255782"
  },
  {
    "text": "with many applications from \nAmazon and third-party providers.",
    "start": "255782",
    "end": "258850"
  },
  {
    "text": "You can learn more about this topic in \nthe description and links for this video.",
    "start": "259589",
    "end": "262682"
  },
  {
    "text": "Thanks for watching. Now it's your turn to try.",
    "start": "262890",
    "end": "264956"
  }
]