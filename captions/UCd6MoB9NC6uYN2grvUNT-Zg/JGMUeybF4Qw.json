[
  {
    "start": "0",
    "end": "108000"
  },
  {
    "text": "all right we're gonna go ahead and get",
    "start": "560",
    "end": "2700"
  },
  {
    "text": "started first up we have segment giving",
    "start": "2700",
    "end": "6299"
  },
  {
    "text": "a talk about using containers and using",
    "start": "6299",
    "end": "8880"
  },
  {
    "text": "step functions and Michael Fisher will",
    "start": "8880",
    "end": "11460"
  },
  {
    "text": "be dropping some knowledge take it away",
    "start": "11460",
    "end": "16500"
  },
  {
    "text": "hi everyone Oh testing one two three",
    "start": "16500",
    "end": "20970"
  },
  {
    "text": "okay I think we got that hi everyone my",
    "start": "20970",
    "end": "23939"
  },
  {
    "text": "name is Michael Fisher I am the lead",
    "start": "23939",
    "end": "26010"
  },
  {
    "text": "site reliability engineer at segment",
    "start": "26010",
    "end": "28640"
  },
  {
    "text": "segment is a start-up hiren primarily",
    "start": "28640",
    "end": "32160"
  },
  {
    "text": "located here in San Francisco we have a",
    "start": "32160",
    "end": "34530"
  },
  {
    "text": "little over 250 employees we are a we",
    "start": "34530",
    "end": "40379"
  },
  {
    "text": "provide analytics and event management",
    "start": "40379",
    "end": "42059"
  },
  {
    "text": "event processing and warehousing for all",
    "start": "42059",
    "end": "44940"
  },
  {
    "text": "sorts of web companies from small",
    "start": "44940",
    "end": "47579"
  },
  {
    "text": "startups to very large enterprises I'm",
    "start": "47579",
    "end": "50789"
  },
  {
    "text": "here to talk today about some of the",
    "start": "50789",
    "end": "52559"
  },
  {
    "text": "work we've been doing with EC ec2",
    "start": "52559",
    "end": "55680"
  },
  {
    "text": "auto-scaling ECS and step functions for",
    "start": "55680",
    "end": "58770"
  },
  {
    "text": "managing fairly complex container",
    "start": "58770",
    "end": "61559"
  },
  {
    "text": "orchestration workloads how many of you",
    "start": "61559",
    "end": "64110"
  },
  {
    "text": "i'm just show of hands how many of you",
    "start": "64110",
    "end": "65610"
  },
  {
    "text": "are currently using ec2 auto-scaling",
    "start": "65610",
    "end": "68960"
  },
  {
    "text": "how many of you who are currently ECS",
    "start": "68960",
    "end": "71460"
  },
  {
    "text": "users running docker containers on e CS",
    "start": "71460",
    "end": "74240"
  },
  {
    "text": "clusters ok cool how many of you have",
    "start": "74240",
    "end": "77189"
  },
  {
    "text": "heard of step functions how many of you",
    "start": "77189",
    "end": "80250"
  },
  {
    "text": "use step functions",
    "start": "80250",
    "end": "81280"
  },
  {
    "text": "[Music]",
    "start": "81280",
    "end": "82490"
  },
  {
    "text": "that's not surprising step functions are",
    "start": "82490",
    "end": "85010"
  },
  {
    "text": "one of the lesser-known feet products in",
    "start": "85010",
    "end": "89000"
  },
  {
    "text": "AWS which we think is extremely powerful",
    "start": "89000",
    "end": "90860"
  },
  {
    "text": "and going to talk about some of the",
    "start": "90860",
    "end": "92750"
  },
  {
    "text": "technical some of the cool stuff that I",
    "start": "92750",
    "end": "94880"
  },
  {
    "text": "can enable in orchestrating and",
    "start": "94880",
    "end": "96560"
  },
  {
    "text": "container workloads for for complex",
    "start": "96560",
    "end": "99170"
  },
  {
    "text": "systems a little bit of Mogi Bakke there",
    "start": "99170",
    "end": "102290"
  },
  {
    "text": "sorry about that it looked better on my",
    "start": "102290",
    "end": "103850"
  },
  {
    "text": "Mac but segment is loads ECS we're huge",
    "start": "103850",
    "end": "108890"
  },
  {
    "start": "108000",
    "end": "546000"
  },
  {
    "text": "users of ECS how big as of last week",
    "start": "108890",
    "end": "113180"
  },
  {
    "text": "this was our container workload graph as",
    "start": "113180",
    "end": "116390"
  },
  {
    "text": "you can see here we regularly run over",
    "start": "116390",
    "end": "118580"
  },
  {
    "text": "10,000 ECS tasks this is in production",
    "start": "118580",
    "end": "120800"
  },
  {
    "text": "by the way at any given time",
    "start": "120800",
    "end": "123679"
  },
  {
    "text": "sometimes that number goes up and down",
    "start": "123679",
    "end": "125300"
  },
  {
    "text": "with auto scaling but we run very very",
    "start": "125300",
    "end": "128390"
  },
  {
    "text": "large container workloads on ECS so",
    "start": "128390",
    "end": "133330"
  },
  {
    "text": "there's Sigma tier engineering why do we",
    "start": "133330",
    "end": "135590"
  },
  {
    "text": "do this first segment engineering loves",
    "start": "135590",
    "end": "137390"
  },
  {
    "text": "containers containers are a great way",
    "start": "137390",
    "end": "139519"
  },
  {
    "text": "for developers to build software to put",
    "start": "139519",
    "end": "142970"
  },
  {
    "text": "to deployment as is those of you to use",
    "start": "142970",
    "end": "145970"
  },
  {
    "text": "containers no there are no issues with",
    "start": "145970",
    "end": "149239"
  },
  {
    "text": "dependencies your root filesystem is",
    "start": "149239",
    "end": "151130"
  },
  {
    "text": "completely contained you don't have to",
    "start": "151130",
    "end": "153079"
  },
  {
    "text": "worry about packaging conflicts library",
    "start": "153079",
    "end": "155450"
  },
  {
    "text": "conflicts you can make the containers as",
    "start": "155450",
    "end": "158239"
  },
  {
    "text": "small as this is necessary to enable the",
    "start": "158239",
    "end": "160579"
  },
  {
    "text": "software it gives you a very small",
    "start": "160579",
    "end": "163700"
  },
  {
    "text": "security surface to a smaller security",
    "start": "163700",
    "end": "165769"
  },
  {
    "text": "surface to attack and it allows rapid",
    "start": "165769",
    "end": "168470"
  },
  {
    "text": "iteration and continuous integration",
    "start": "168470",
    "end": "170769"
  },
  {
    "text": "segment is a big fan of AWS we've been",
    "start": "170769",
    "end": "174650"
  },
  {
    "text": "using AWS for many years we we have many",
    "start": "174650",
    "end": "179090"
  },
  {
    "text": "many instances in production we use many",
    "start": "179090",
    "end": "181940"
  },
  {
    "text": "of the data services there and we find",
    "start": "181940",
    "end": "185480"
  },
  {
    "text": "that ECS integrates very very well with",
    "start": "185480",
    "end": "187780"
  },
  {
    "text": "other Atos components in their portfolio",
    "start": "187780",
    "end": "191060"
  },
  {
    "text": "so easy to for example elastic load",
    "start": "191060",
    "end": "193850"
  },
  {
    "text": "balancing auto scaling ECR which is the",
    "start": "193850",
    "end": "197480"
  },
  {
    "text": "private image registry or container",
    "start": "197480",
    "end": "200239"
  },
  {
    "text": "registry and cloud watch cloud watch",
    "start": "200239",
    "end": "203180"
  },
  {
    "text": "logs",
    "start": "203180",
    "end": "205050"
  },
  {
    "text": "so if you're not already using e CS e CS",
    "start": "205050",
    "end": "208630"
  },
  {
    "text": "is a container management system that",
    "start": "208630",
    "end": "210880"
  },
  {
    "text": "you use to handle deployments of both",
    "start": "210880",
    "end": "214510"
  },
  {
    "text": "tasks and services it's a great fit I'm",
    "start": "214510",
    "end": "218170"
  },
  {
    "text": "you know most when most people talk",
    "start": "218170",
    "end": "220000"
  },
  {
    "text": "about container deployment on ACS the",
    "start": "220000",
    "end": "222370"
  },
  {
    "text": "most common use cases for so called",
    "start": "222370",
    "end": "224020"
  },
  {
    "text": "stateless service this stateless",
    "start": "224020",
    "end": "226360"
  },
  {
    "text": "services are as the name would suggest",
    "start": "226360",
    "end": "228480"
  },
  {
    "text": "services that don't store state so I",
    "start": "228480",
    "end": "231820"
  },
  {
    "text": "think micro service is that process data",
    "start": "231820",
    "end": "234040"
  },
  {
    "text": "in a subway but rely on some other",
    "start": "234040",
    "end": "236470"
  },
  {
    "text": "service to actually provide storage so",
    "start": "236470",
    "end": "238840"
  },
  {
    "text": "this is a pretty typical architecture",
    "start": "238840",
    "end": "241180"
  },
  {
    "text": "decision EWS provides great store",
    "start": "241180",
    "end": "244180"
  },
  {
    "text": "services like RDS DynamoDB es3 elastic",
    "start": "244180",
    "end": "247960"
  },
  {
    "text": "hash and so forth these are tasks that",
    "start": "247960",
    "end": "251890"
  },
  {
    "text": "can be generally terminated at will so",
    "start": "251890",
    "end": "254650"
  },
  {
    "text": "when the scheduler decides that pursuant",
    "start": "254650",
    "end": "257980"
  },
  {
    "text": "to an auto scaling rule or deployment",
    "start": "257980",
    "end": "259600"
  },
  {
    "text": "that it needs to terminate a task it's",
    "start": "259600",
    "end": "262000"
  },
  {
    "text": "just going to do it without any user",
    "start": "262000",
    "end": "264280"
  },
  {
    "text": "input and typically your services need",
    "start": "264280",
    "end": "266800"
  },
  {
    "text": "to be built such that they can tolerate",
    "start": "266800",
    "end": "269200"
  },
  {
    "text": "that they're typically routed to by a",
    "start": "269200",
    "end": "272140"
  },
  {
    "text": "load balancer or service mesh many of",
    "start": "272140",
    "end": "275440"
  },
  {
    "text": "you working with kubernetes may have",
    "start": "275440",
    "end": "277150"
  },
  {
    "text": "heard of the ISTE oh these are basically",
    "start": "277150",
    "end": "279930"
  },
  {
    "text": "reverse proxies that perform health",
    "start": "279930",
    "end": "282790"
  },
  {
    "text": "checks against your container",
    "start": "282790",
    "end": "284170"
  },
  {
    "text": "containerized services and will",
    "start": "284170",
    "end": "286630"
  },
  {
    "text": "automatically reroute connections to the",
    "start": "286630",
    "end": "289210"
  },
  {
    "text": "instances of those containers",
    "start": "289210",
    "end": "290920"
  },
  {
    "text": "containerized services that happen to be",
    "start": "290920",
    "end": "292810"
  },
  {
    "text": "up this is in accordance with the",
    "start": "292810",
    "end": "297360"
  },
  {
    "text": "containerized highly scalable metaphor",
    "start": "297360",
    "end": "301930"
  },
  {
    "text": "of cattle as opposed to pets right in",
    "start": "301930",
    "end": "304570"
  },
  {
    "text": "this world all of your servers are",
    "start": "304570",
    "end": "307330"
  },
  {
    "text": "roughly interchangeable you have a very",
    "start": "307330",
    "end": "310020"
  },
  {
    "text": "uniform collection of anonymous systems",
    "start": "310020",
    "end": "313180"
  },
  {
    "text": "on which these containers run and as",
    "start": "313180",
    "end": "317050"
  },
  {
    "text": "long as there's enough resources in",
    "start": "317050",
    "end": "318490"
  },
  {
    "text": "terms of CPU i/o network etc they're all",
    "start": "318490",
    "end": "321160"
  },
  {
    "text": "interchangeable for the purpose of",
    "start": "321160",
    "end": "322330"
  },
  {
    "text": "running services the service or wrap or",
    "start": "322330",
    "end": "324160"
  },
  {
    "text": "routing mesh handles the actual",
    "start": "324160",
    "end": "325570"
  },
  {
    "text": "direction of traffic to the right ec2",
    "start": "325570",
    "end": "328270"
  },
  {
    "text": "instances",
    "start": "328270",
    "end": "329760"
  },
  {
    "text": "in some ways though segment is a little",
    "start": "329760",
    "end": "333570"
  },
  {
    "text": "bit different so we like to run as much",
    "start": "333570",
    "end": "337650"
  },
  {
    "text": "as we can and UCS why",
    "start": "337650",
    "end": "340170"
  },
  {
    "text": "ECS gives us as close to a sort of",
    "start": "340170",
    "end": "343050"
  },
  {
    "text": "single pane of glass for managing all of",
    "start": "343050",
    "end": "345450"
  },
  {
    "text": "our tasks and services as we can get",
    "start": "345450",
    "end": "347400"
  },
  {
    "text": "without writing a lot of custom",
    "start": "347400",
    "end": "349200"
  },
  {
    "text": "orchestration code and UI's since our",
    "start": "349200",
    "end": "352380"
  },
  {
    "text": "developers have loved love to work with",
    "start": "352380",
    "end": "354600"
  },
  {
    "text": "talker it provides us a natively",
    "start": "354600",
    "end": "356970"
  },
  {
    "text": "supported method for deploying those",
    "start": "356970",
    "end": "358920"
  },
  {
    "text": "tasks on to our ec2 instances and then",
    "start": "358920",
    "end": "361290"
  },
  {
    "text": "managing those life cycles so what this",
    "start": "361290",
    "end": "366600"
  },
  {
    "text": "means this actually means doing a little",
    "start": "366600",
    "end": "368280"
  },
  {
    "text": "bit more than simply are stateless",
    "start": "368280",
    "end": "369840"
  },
  {
    "text": "services we actually run state full",
    "start": "369840",
    "end": "372540"
  },
  {
    "text": "services on top of ECS - these include",
    "start": "372540",
    "end": "376500"
  },
  {
    "text": "Kafka for those of you not familiar with",
    "start": "376500",
    "end": "378900"
  },
  {
    "text": "Kafka Kafka is a scalable highly",
    "start": "378900",
    "end": "381090"
  },
  {
    "text": "performant log based message broker",
    "start": "381090",
    "end": "384260"
  },
  {
    "text": "imagine a cluster of services that read",
    "start": "384260",
    "end": "387360"
  },
  {
    "text": "data off the network append it to a",
    "start": "387360",
    "end": "389700"
  },
  {
    "text": "bunch of files and then clients to",
    "start": "389700",
    "end": "392340"
  },
  {
    "text": "basically tale - after that file that",
    "start": "392340",
    "end": "394650"
  },
  {
    "text": "that collection of files that that is",
    "start": "394650",
    "end": "396360"
  },
  {
    "text": "essentially what Kafka is zookeeper",
    "start": "396360",
    "end": "399390"
  },
  {
    "text": "which is a state coordination system and",
    "start": "399390",
    "end": "401310"
  },
  {
    "text": "metadata directory that used by Kafka we",
    "start": "401310",
    "end": "403440"
  },
  {
    "text": "run that with ECS console it's a key",
    "start": "403440",
    "end": "407130"
  },
  {
    "text": "value store a service discovery solution",
    "start": "407130",
    "end": "409440"
  },
  {
    "text": "and a distributed lock manager",
    "start": "409440",
    "end": "411030"
  },
  {
    "text": "all-in-one it's a truly fantastic",
    "start": "411030",
    "end": "413100"
  },
  {
    "text": "product and it's QD is a message queuing",
    "start": "413100",
    "end": "418440"
  },
  {
    "text": "system written and go",
    "start": "418440",
    "end": "420390"
  },
  {
    "text": "we used it before Kafka it still",
    "start": "420390",
    "end": "422580"
  },
  {
    "text": "provides we still have a bit of legacy",
    "start": "422580",
    "end": "425100"
  },
  {
    "text": "and sqd in our architecture but we we",
    "start": "425100",
    "end": "428220"
  },
  {
    "text": "run that as well stateful e and then we",
    "start": "428220",
    "end": "431670"
  },
  {
    "text": "have an event deduplicate ER that we",
    "start": "431670",
    "end": "433950"
  },
  {
    "text": "call d dupe which is a custom service",
    "start": "433950",
    "end": "436650"
  },
  {
    "text": "written and go that uses rocks DB",
    "start": "436650",
    "end": "440190"
  },
  {
    "text": "underneath in order to store state",
    "start": "440190",
    "end": "442680"
  },
  {
    "text": "[Music]",
    "start": "442680",
    "end": "444700"
  },
  {
    "text": "so but stateful services require a",
    "start": "444700",
    "end": "447550"
  },
  {
    "text": "little bit more TLC than stateless",
    "start": "447550",
    "end": "450310"
  },
  {
    "text": "services so suppose that you're doing a",
    "start": "450310",
    "end": "453880"
  },
  {
    "text": "scale in event you're stateful service",
    "start": "453880",
    "end": "457150"
  },
  {
    "text": "isn't being used as much anymore and you",
    "start": "457150",
    "end": "459910"
  },
  {
    "text": "can migrate some of that data or there's",
    "start": "459910",
    "end": "461560"
  },
  {
    "text": "where you can reduce the number of reed",
    "start": "461560",
    "end": "463030"
  },
  {
    "text": "replicas for that particular stateful",
    "start": "463030",
    "end": "465490"
  },
  {
    "text": "service perhaps you might want local",
    "start": "465490",
    "end": "467680"
  },
  {
    "text": "cues to drain work used to dream that",
    "start": "467680",
    "end": "469780"
  },
  {
    "text": "needs that the suppose the cues are",
    "start": "469780",
    "end": "471460"
  },
  {
    "text": "stored locally on that system they have",
    "start": "471460",
    "end": "473440"
  },
  {
    "text": "some work to do and we know what those",
    "start": "473440",
    "end": "475090"
  },
  {
    "text": "two drain before signing the instance",
    "start": "475090",
    "end": "476560"
  },
  {
    "text": "off we want to task itself to sign off",
    "start": "476560",
    "end": "479500"
  },
  {
    "text": "and preserve quorum or we want to ensure",
    "start": "479500",
    "end": "482860"
  },
  {
    "text": "a replacement task is standing by on",
    "start": "482860",
    "end": "484900"
  },
  {
    "text": "another instance for example suppose the",
    "start": "484900",
    "end": "487510"
  },
  {
    "text": "instance you're running is about to",
    "start": "487510",
    "end": "488890"
  },
  {
    "text": "undergo maintenance unscheduled runs",
    "start": "488890",
    "end": "490960"
  },
  {
    "text": "scheduled maintenance you might want to",
    "start": "490960",
    "end": "492550"
  },
  {
    "text": "make sure that the work can be",
    "start": "492550",
    "end": "493990"
  },
  {
    "text": "transitioned off to another worker",
    "start": "493990",
    "end": "495580"
  },
  {
    "text": "before shutting that instance down I",
    "start": "495580",
    "end": "498940"
  },
  {
    "text": "should make a footnote here is that this",
    "start": "498940",
    "end": "502000"
  },
  {
    "text": "is really a best effort right we we",
    "start": "502000",
    "end": "504370"
  },
  {
    "text": "don't segment another company it doesn't",
    "start": "504370",
    "end": "506500"
  },
  {
    "text": "really encourage and I certainly don't",
    "start": "506500",
    "end": "508120"
  },
  {
    "text": "encourage intentionally creating",
    "start": "508120",
    "end": "510040"
  },
  {
    "text": "services that work this way if they're",
    "start": "510040",
    "end": "511420"
  },
  {
    "text": "gonna run them and containerized",
    "start": "511420",
    "end": "512740"
  },
  {
    "text": "workloads with the scheduler like ECS it",
    "start": "512740",
    "end": "516370"
  },
  {
    "text": "but it is one of those things that",
    "start": "516370",
    "end": "517900"
  },
  {
    "text": "sometimes you have to do you know if",
    "start": "517900",
    "end": "521050"
  },
  {
    "text": "you're running legacy systems or for",
    "start": "521050",
    "end": "523030"
  },
  {
    "text": "example if that hacked-up MVP that you",
    "start": "523030",
    "end": "525250"
  },
  {
    "text": "hastily written during a caffee if you",
    "start": "525250",
    "end": "526930"
  },
  {
    "text": "binge over a weekend happens to still",
    "start": "526930",
    "end": "529420"
  },
  {
    "text": "serve live traffic to this day not that",
    "start": "529420",
    "end": "531280"
  },
  {
    "text": "we actually do any of those things but",
    "start": "531280",
    "end": "534160"
  },
  {
    "text": "they may not be super tolerant of",
    "start": "534160",
    "end": "535780"
  },
  {
    "text": "uncontrolled shutdown and so they need",
    "start": "535780",
    "end": "537640"
  },
  {
    "text": "to be carefully managed and quiet",
    "start": "537640",
    "end": "539020"
  },
  {
    "text": "instead of just having an outside",
    "start": "539020",
    "end": "540670"
  },
  {
    "text": "scheduler pull the plug without warning",
    "start": "540670",
    "end": "542830"
  },
  {
    "text": "so how do we handle this we take",
    "start": "542830",
    "end": "547840"
  },
  {
    "start": "546000",
    "end": "751000"
  },
  {
    "text": "advantage of some technologies and some",
    "start": "547840",
    "end": "550780"
  },
  {
    "text": "features that AWS provides that it's",
    "start": "550780",
    "end": "552640"
  },
  {
    "text": "autoscaler so this is a very useful",
    "start": "552640",
    "end": "556720"
  },
  {
    "text": "feature and I believe as far as I know",
    "start": "556720",
    "end": "558580"
  },
  {
    "text": "it's still exclusive to ec2 autoscaler",
    "start": "558580",
    "end": "562860"
  },
  {
    "text": "so this is a typical instance draining",
    "start": "562860",
    "end": "566580"
  },
  {
    "text": "chart there or start it's an instance",
    "start": "566580",
    "end": "570000"
  },
  {
    "text": "lifetime step state machine for an ec2",
    "start": "570000",
    "end": "574800"
  },
  {
    "text": "auto-scaling instance raise your hand if",
    "start": "574800",
    "end": "576900"
  },
  {
    "text": "you've seen this before like in the",
    "start": "576900",
    "end": "578010"
  },
  {
    "text": "documentation this is actually an",
    "start": "578010",
    "end": "580320"
  },
  {
    "text": "incredible use useful thing to look to",
    "start": "580320",
    "end": "582690"
  },
  {
    "text": "study in the ec2 auto-scaling",
    "start": "582690",
    "end": "585000"
  },
  {
    "text": "documentation so one of the one of the",
    "start": "585000",
    "end": "588450"
  },
  {
    "text": "really cool things you can do with ec2",
    "start": "588450",
    "end": "590520"
  },
  {
    "text": "auto-scaling groups is you can cut you",
    "start": "590520",
    "end": "594060"
  },
  {
    "text": "can specify a termination lifecycle hook",
    "start": "594060",
    "end": "596700"
  },
  {
    "text": "and what a termination life lifecycle",
    "start": "596700",
    "end": "599460"
  },
  {
    "text": "hook does is you just you just configure",
    "start": "599460",
    "end": "601560"
  },
  {
    "text": "this between your when you set up the",
    "start": "601560",
    "end": "603210"
  },
  {
    "text": "auto scaling group and you give it a",
    "start": "603210",
    "end": "605670"
  },
  {
    "text": "name it doesn't matter what the name is",
    "start": "605670",
    "end": "607050"
  },
  {
    "text": "and what will happen is when the auto",
    "start": "607050",
    "end": "609450"
  },
  {
    "text": "scaling prepares to terminate the",
    "start": "609450",
    "end": "610950"
  },
  {
    "text": "instance it will put the instance into a",
    "start": "610950",
    "end": "613500"
  },
  {
    "text": "state called terminating wait and what",
    "start": "613500",
    "end": "617010"
  },
  {
    "text": "that does is is is once it transitions",
    "start": "617010",
    "end": "619140"
  },
  {
    "text": "into that state the instance is still",
    "start": "619140",
    "end": "620580"
  },
  {
    "text": "alive doing whatever is currently",
    "start": "620580",
    "end": "622500"
  },
  {
    "text": "running on it but the autoscaler is now",
    "start": "622500",
    "end": "624840"
  },
  {
    "text": "waiting for an api invocation that says",
    "start": "624840",
    "end": "627660"
  },
  {
    "text": "ok you can now continue with termination",
    "start": "627660",
    "end": "630240"
  },
  {
    "text": "that's called a completion and so what",
    "start": "630240",
    "end": "634320"
  },
  {
    "text": "we do is so what will happen is",
    "start": "634320",
    "end": "635850"
  },
  {
    "text": "termination will be deferred until we",
    "start": "635850",
    "end": "638010"
  },
  {
    "text": "complete the life cycle action with a",
    "start": "638010",
    "end": "639630"
  },
  {
    "text": "continue signal and we get we declare",
    "start": "639630",
    "end": "642450"
  },
  {
    "text": "these termination lifecycle hooks on",
    "start": "642450",
    "end": "644040"
  },
  {
    "text": "most of our auto scaling groups in",
    "start": "644040",
    "end": "645720"
  },
  {
    "text": "segments so once once we've configured",
    "start": "645720",
    "end": "650160"
  },
  {
    "text": "that out of that hook and the hook",
    "start": "650160",
    "end": "652170"
  },
  {
    "text": "itself lasts for the lifetime of the",
    "start": "652170",
    "end": "654300"
  },
  {
    "text": "auto scaling group unless you modify it",
    "start": "654300",
    "end": "655770"
  },
  {
    "text": "or destroy the auto scaling group so one",
    "start": "655770",
    "end": "660300"
  },
  {
    "text": "of the things that we've done so what",
    "start": "660300",
    "end": "661950"
  },
  {
    "text": "happens next",
    "start": "661950",
    "end": "663330"
  },
  {
    "text": "is when the autoscaler is preparing to",
    "start": "663330",
    "end": "666990"
  },
  {
    "text": "terminate an instance it actually you",
    "start": "666990",
    "end": "670050"
  },
  {
    "text": "can configure a cloud watch event",
    "start": "670050",
    "end": "671820"
  },
  {
    "text": "pattern match so cloud watch can be",
    "start": "671820",
    "end": "676020"
  },
  {
    "text": "configured to to for example dispatch to",
    "start": "676020",
    "end": "680550"
  },
  {
    "text": "SNS but what we haven't do is we have an",
    "start": "680550",
    "end": "683490"
  },
  {
    "text": "invoke a lambda function so what happens",
    "start": "683490",
    "end": "686310"
  },
  {
    "text": "is there's this pattern match here under",
    "start": "686310",
    "end": "688560"
  },
  {
    "text": "cloud watch events the source is AWS",
    "start": "688560",
    "end": "690930"
  },
  {
    "text": "auto scaling the detail type and these",
    "start": "690930",
    "end": "693120"
  },
  {
    "text": "are these are fixed strings by the way",
    "start": "693120",
    "end": "696070"
  },
  {
    "text": "we match we match this event these event",
    "start": "696070",
    "end": "698550"
  },
  {
    "text": "these event patterns and then we include",
    "start": "698550",
    "end": "701709"
  },
  {
    "text": "the auto scaling group of the group that",
    "start": "701709",
    "end": "703449"
  },
  {
    "text": "we want to match where you could just",
    "start": "703449",
    "end": "704529"
  },
  {
    "text": "put you can have no match at all if you",
    "start": "704529",
    "end": "706029"
  },
  {
    "text": "wanted to match any of them so what",
    "start": "706029",
    "end": "708790"
  },
  {
    "text": "happens is the cloud watchin event is",
    "start": "708790",
    "end": "710170"
  },
  {
    "text": "received it's matched by the rules",
    "start": "710170",
    "end": "712360"
  },
  {
    "text": "engine and then we have a start ECS",
    "start": "712360",
    "end": "715839"
  },
  {
    "text": "dream lambda function that is invoked",
    "start": "715839",
    "end": "718180"
  },
  {
    "text": "when when that event is seen by cloud",
    "start": "718180",
    "end": "720040"
  },
  {
    "text": "watch events and that then in turn",
    "start": "720040",
    "end": "721990"
  },
  {
    "text": "invokes our ECS strain or step function",
    "start": "721990",
    "end": "725880"
  },
  {
    "text": "by the way it used to be those of you",
    "start": "725880",
    "end": "728709"
  },
  {
    "text": "have been using auto scaling groups for",
    "start": "728709",
    "end": "730240"
  },
  {
    "text": "a long time may know about before what",
    "start": "730240",
    "end": "733480"
  },
  {
    "text": "you could do is you could configure an",
    "start": "733480",
    "end": "735579"
  },
  {
    "text": "SNS topic to deliver messages to deliver",
    "start": "735579",
    "end": "739810"
  },
  {
    "text": "notifications to that is no legacy",
    "start": "739810",
    "end": "743350"
  },
  {
    "text": "behavior you can still do it but but",
    "start": "743350",
    "end": "746529"
  },
  {
    "text": "using cloud watch event pattern matches",
    "start": "746529",
    "end": "748120"
  },
  {
    "text": "is now recommended instead",
    "start": "748120",
    "end": "750850"
  },
  {
    "text": "so okay what's the step function to make",
    "start": "750850",
    "end": "755499"
  },
  {
    "start": "751000",
    "end": "1104000"
  },
  {
    "text": "a long story short a step function is a",
    "start": "755499",
    "end": "757539"
  },
  {
    "text": "state machine raise your hand if you",
    "start": "757539",
    "end": "759910"
  },
  {
    "text": "know what a state machine is okay so the",
    "start": "759910",
    "end": "763569"
  },
  {
    "text": "state machine is a graph of steps with",
    "start": "763569",
    "end": "766809"
  },
  {
    "text": "start intermediate and terminating nodes",
    "start": "766809",
    "end": "768999"
  },
  {
    "text": "I'll give an example of this a little",
    "start": "768999",
    "end": "770350"
  },
  {
    "text": "bit later each step is one of them can",
    "start": "770350",
    "end": "773350"
  },
  {
    "text": "be one of the following it can be a",
    "start": "773350",
    "end": "774939"
  },
  {
    "text": "lambda or remote function invocation it",
    "start": "774939",
    "end": "777939"
  },
  {
    "text": "can be a choice which is basically a",
    "start": "777939",
    "end": "779529"
  },
  {
    "text": "branch a wait state which is asleep a",
    "start": "779529",
    "end": "783309"
  },
  {
    "text": "past state which can modify the actual",
    "start": "783309",
    "end": "786039"
  },
  {
    "text": "state object without invoking a function",
    "start": "786039",
    "end": "788229"
  },
  {
    "text": "or a terminate state and terminate",
    "start": "788229",
    "end": "790569"
  },
  {
    "text": "states can be either succeed or fail",
    "start": "790569",
    "end": "793049"
  },
  {
    "text": "each step in the process accepts it",
    "start": "793049",
    "end": "796629"
  },
  {
    "text": "emits a state object which is basically",
    "start": "796629",
    "end": "798759"
  },
  {
    "text": "for all intents and purposes json",
    "start": "798759",
    "end": "801539"
  },
  {
    "text": "looping is okay which is when you",
    "start": "801539",
    "end": "804729"
  },
  {
    "text": "combine loops and wait States makes step",
    "start": "804729",
    "end": "807039"
  },
  {
    "text": "functions extremely powerful and the",
    "start": "807039",
    "end": "809559"
  },
  {
    "text": "plumbing is exclude is included and it's",
    "start": "809559",
    "end": "811479"
  },
  {
    "text": "really inexpensive to operate I looked",
    "start": "811479",
    "end": "814179"
  },
  {
    "text": "at the pricing four thousand straight",
    "start": "814179",
    "end": "817059"
  },
  {
    "text": "transitions are free per month and it is",
    "start": "817059",
    "end": "820619"
  },
  {
    "text": "2.5 cents per 1000 state transitions",
    "start": "820619",
    "end": "824559"
  },
  {
    "text": "thereafter and it does not include",
    "start": "824559",
    "end": "826989"
  },
  {
    "text": "lambda pricing or data transfer fees",
    "start": "826989",
    "end": "830549"
  },
  {
    "text": "here's an example of what a step",
    "start": "830549",
    "end": "833799"
  },
  {
    "text": "function looks like so these are two",
    "start": "833799",
    "end": "837359"
  },
  {
    "text": "nodes in in the step function in the",
    "start": "837359",
    "end": "840129"
  },
  {
    "text": "step function this graph so one is",
    "start": "840129",
    "end": "842169"
  },
  {
    "text": "called get task count you can see here",
    "start": "842169",
    "end": "844689"
  },
  {
    "text": "that it has a type of task so remember",
    "start": "844689",
    "end": "846970"
  },
  {
    "text": "there's task choice wait terminate and",
    "start": "846970",
    "end": "851589"
  },
  {
    "text": "then the resource is the AR end of the",
    "start": "851589",
    "end": "853839"
  },
  {
    "text": "lambda function we're going to call and",
    "start": "853839",
    "end": "855009"
  },
  {
    "text": "then step functions also provide for",
    "start": "855009",
    "end": "857949"
  },
  {
    "text": "retries and and exception handling so",
    "start": "857949",
    "end": "861279"
  },
  {
    "text": "you can declare a catch as well if it",
    "start": "861279",
    "end": "862809"
  },
  {
    "text": "fails so we will retry with the",
    "start": "862809",
    "end": "865779"
  },
  {
    "text": "exponential back-off if some sort of",
    "start": "865779",
    "end": "867970"
  },
  {
    "text": "error has occurred and then next is the",
    "start": "867970",
    "end": "871799"
  },
  {
    "text": "vertex basically beach work between or",
    "start": "871799",
    "end": "875499"
  },
  {
    "text": "the link to the next step in the step",
    "start": "875499",
    "end": "876999"
  },
  {
    "text": "function so a Val task count is the next",
    "start": "876999",
    "end": "879459"
  },
  {
    "text": "node or",
    "start": "879459",
    "end": "880880"
  },
  {
    "text": "or edge if you will if you prefer in the",
    "start": "880880",
    "end": "882620"
  },
  {
    "text": "step in the step function graph so eval",
    "start": "882620",
    "end": "885110"
  },
  {
    "text": "tasks count that has a type of choice so",
    "start": "885110",
    "end": "887149"
  },
  {
    "text": "that's a branch and then there's a",
    "start": "887149",
    "end": "889850"
  },
  {
    "text": "default choice if none of the choices in",
    "start": "889850",
    "end": "891889"
  },
  {
    "text": "the list matches so the default node is",
    "start": "891889",
    "end": "895160"
  },
  {
    "text": "called check elapse time and then the",
    "start": "895160",
    "end": "898100"
  },
  {
    "text": "choice is we are trying to match whether",
    "start": "898100",
    "end": "900889"
  },
  {
    "text": "a variable called running tasks count is",
    "start": "900889",
    "end": "903620"
  },
  {
    "text": "equal to zero and if that is true then",
    "start": "903620",
    "end": "905690"
  },
  {
    "text": "jump to the finished finished",
    "start": "905690",
    "end": "907819"
  },
  {
    "text": "termination task and each of the",
    "start": "907819",
    "end": "911060"
  },
  {
    "text": "variables when you're when you're",
    "start": "911060",
    "end": "912230"
  },
  {
    "text": "evaluating break branches or choice",
    "start": "912230",
    "end": "914389"
  },
  {
    "text": "types what you're doing is you're",
    "start": "914389",
    "end": "916730"
  },
  {
    "text": "evaluating against a so called JSON path",
    "start": "916730",
    "end": "918980"
  },
  {
    "text": "expression so in this case this",
    "start": "918980",
    "end": "921829"
  },
  {
    "text": "expression would match dollar sign",
    "start": "921829",
    "end": "924199"
  },
  {
    "text": "basically means the root the roots node",
    "start": "924199",
    "end": "926480"
  },
  {
    "text": "of the json tree in this case we're just",
    "start": "926480",
    "end": "930019"
  },
  {
    "text": "matching whether or not the running",
    "start": "930019",
    "end": "931670"
  },
  {
    "text": "tasks count as root a root object is",
    "start": "931670",
    "end": "935810"
  },
  {
    "text": "equal to zero so here's an example of",
    "start": "935810",
    "end": "938870"
  },
  {
    "text": "what it actually would a real what a",
    "start": "938870",
    "end": "940610"
  },
  {
    "text": "relatively simple instance draining step",
    "start": "940610",
    "end": "943220"
  },
  {
    "text": "function looks like I'm gonna walk you",
    "start": "943220",
    "end": "945019"
  },
  {
    "text": "through a little bit so at the start",
    "start": "945019",
    "end": "948199"
  },
  {
    "text": "node is drain instance",
    "start": "948199",
    "end": "950300"
  },
  {
    "text": "so what drain instance is is it's a",
    "start": "950300",
    "end": "952100"
  },
  {
    "text": "lambda function that you through the ECS",
    "start": "952100",
    "end": "955399"
  },
  {
    "text": "API tells that instance that's being",
    "start": "955399",
    "end": "957529"
  },
  {
    "text": "terminated to go into drain State and",
    "start": "957529",
    "end": "959540"
  },
  {
    "text": "draining State and ECS means don't",
    "start": "959540",
    "end": "961370"
  },
  {
    "text": "accept any more tasks and if possible if",
    "start": "961370",
    "end": "963980"
  },
  {
    "text": "it's a service as opposed to a task that",
    "start": "963980",
    "end": "966490"
  },
  {
    "text": "any services any service associated",
    "start": "966490",
    "end": "969319"
  },
  {
    "text": "tasks on that instance VCS will try to",
    "start": "969319",
    "end": "971449"
  },
  {
    "text": "migrate over to other instances and then",
    "start": "971449",
    "end": "974180"
  },
  {
    "text": "terminate it after it's successfully",
    "start": "974180",
    "end": "976040"
  },
  {
    "text": "migrated to another instance get tasks",
    "start": "976040",
    "end": "978949"
  },
  {
    "text": "count gets the queries the ECS api for",
    "start": "978949",
    "end": "981889"
  },
  {
    "text": "the number of remaining tasks on that",
    "start": "981889",
    "end": "983750"
  },
  {
    "text": "instance and then the next step is to",
    "start": "983750",
    "end": "987199"
  },
  {
    "text": "invoke a choice called eval task count",
    "start": "987199",
    "end": "989959"
  },
  {
    "text": "and as you saw on the previous page if",
    "start": "989959",
    "end": "992329"
  },
  {
    "text": "it's if it's equal to zero then we're",
    "start": "992329",
    "end": "994009"
  },
  {
    "text": "going to go to finish termination which",
    "start": "994009",
    "end": "995329"
  },
  {
    "text": "starts the termination process over here",
    "start": "995329",
    "end": "999050"
  },
  {
    "text": "on that instance",
    "start": "999050",
    "end": "999980"
  },
  {
    "text": "otherwise we're going to check the",
    "start": "999980",
    "end": "1001930"
  },
  {
    "text": "elapsed time the time since we started",
    "start": "1001930",
    "end": "1003820"
  },
  {
    "text": "the process the step function because we",
    "start": "1003820",
    "end": "1005500"
  },
  {
    "text": "record that in our in the state that",
    "start": "1005500",
    "end": "1007690"
  },
  {
    "text": "we're passing around and if if the",
    "start": "1007690",
    "end": "1011260"
  },
  {
    "text": "elapsed time is below our threshold we",
    "start": "1011260",
    "end": "1014290"
  },
  {
    "text": "just sleep which is a wait states to",
    "start": "1014290",
    "end": "1016090"
  },
  {
    "text": "retry it waits then goes back to the",
    "start": "1016090",
    "end": "1018640"
  },
  {
    "text": "vowel task count if the elapsed time has",
    "start": "1018640",
    "end": "1021850"
  },
  {
    "text": "been too long we notify in slack we have",
    "start": "1021850",
    "end": "1025030"
  },
  {
    "text": "a slack notifier that an unacceptable",
    "start": "1025030",
    "end": "1027400"
  },
  {
    "text": "delay has occurred we also notify and",
    "start": "1027400",
    "end": "1028930"
  },
  {
    "text": "data dog as well and then if it's been",
    "start": "1028930",
    "end": "1031870"
  },
  {
    "text": "too long we also have a predicate called",
    "start": "1031870",
    "end": "1034000"
  },
  {
    "text": "should terminate after deadline if",
    "start": "1034000",
    "end": "1035620"
  },
  {
    "text": "that's set to true then we'll go ahead",
    "start": "1035620",
    "end": "1037510"
  },
  {
    "text": "and finish the termination because we",
    "start": "1037510",
    "end": "1038920"
  },
  {
    "text": "gave up otherwise we'll retry and go",
    "start": "1038920",
    "end": "1041530"
  },
  {
    "text": "wait again it looks it looks complicated",
    "start": "1041530",
    "end": "1045850"
  },
  {
    "text": "but one of the most one of the greatest",
    "start": "1045850",
    "end": "1049240"
  },
  {
    "text": "things about it is that state functions",
    "start": "1049240",
    "end": "1051190"
  },
  {
    "text": "if we didn't have for example a sign out",
    "start": "1051190",
    "end": "1053860"
  },
  {
    "text": "here we can run this for a year and it",
    "start": "1053860",
    "end": "1057670"
  },
  {
    "text": "would wait as long as it takes for the",
    "start": "1057670",
    "end": "1060130"
  },
  {
    "text": "eval task count predicates to match zero",
    "start": "1060130",
    "end": "1064320"
  },
  {
    "text": "we we don't you don't pay for wait",
    "start": "1064320",
    "end": "1066850"
  },
  {
    "text": "states in step functions and so what",
    "start": "1066850",
    "end": "1069880"
  },
  {
    "text": "this allows you to do is the big",
    "start": "1069880",
    "end": "1073030"
  },
  {
    "text": "learning here is that you can run very",
    "start": "1073030",
    "end": "1075000"
  },
  {
    "text": "complex systems in lambda without",
    "start": "1075000",
    "end": "1078280"
  },
  {
    "text": "actually paying for land or runtime",
    "start": "1078280",
    "end": "1080170"
  },
  {
    "text": "costs that are spent waiting around so",
    "start": "1080170",
    "end": "1084310"
  },
  {
    "text": "the the maximum run time on a lambda I",
    "start": "1084310",
    "end": "1086590"
  },
  {
    "text": "think is now one minute or five minutes",
    "start": "1086590",
    "end": "1088660"
  },
  {
    "text": "it's pretty high but you're actually",
    "start": "1088660",
    "end": "1091420"
  },
  {
    "text": "paying if you're not actually doing real",
    "start": "1091420",
    "end": "1093580"
  },
  {
    "text": "work in that lambda function you're just",
    "start": "1093580",
    "end": "1095830"
  },
  {
    "text": "paying it for it to wait around well why",
    "start": "1095830",
    "end": "1097150"
  },
  {
    "text": "should you do that when step functions",
    "start": "1097150",
    "end": "1098710"
  },
  {
    "text": "when you get wait states for free with",
    "start": "1098710",
    "end": "1100150"
  },
  {
    "text": "step functions",
    "start": "1100150",
    "end": "1102750"
  },
  {
    "start": "1104000",
    "end": "1543000"
  },
  {
    "text": "one of the another case of using step",
    "start": "1106090",
    "end": "1109100"
  },
  {
    "text": "functions for very fairly complex tasks",
    "start": "1109100",
    "end": "1112220"
  },
  {
    "text": "is to update an auto scaling group what",
    "start": "1112220",
    "end": "1115400"
  },
  {
    "text": "we mean by updating an auto scaling",
    "start": "1115400",
    "end": "1116720"
  },
  {
    "text": "group you in this context is actually to",
    "start": "1116720",
    "end": "1118340"
  },
  {
    "text": "update its ami its Amazon machine image",
    "start": "1118340",
    "end": "1122060"
  },
  {
    "text": "raise your hand if you have to do this",
    "start": "1122060",
    "end": "1123620"
  },
  {
    "text": "task periodically so there's a canonical",
    "start": "1123620",
    "end": "1127670"
  },
  {
    "text": "method that a lot of people call",
    "start": "1127670",
    "end": "1129110"
  },
  {
    "text": "Bluegreen so in the Bluegreen canonical",
    "start": "1129110",
    "end": "1132260"
  },
  {
    "text": "method suppose that you already have an",
    "start": "1132260",
    "end": "1135140"
  },
  {
    "text": "auto scaling group with a particular ami",
    "start": "1135140",
    "end": "1137030"
  },
  {
    "text": "it's coming along it's working great and",
    "start": "1137030",
    "end": "1139730"
  },
  {
    "text": "then you need to replace that ami on on",
    "start": "1139730",
    "end": "1143030"
  },
  {
    "text": "that cluster so with the canonical",
    "start": "1143030",
    "end": "1144710"
  },
  {
    "text": "method which is recommended by just",
    "start": "1144710",
    "end": "1146360"
  },
  {
    "text": "about everybody you create a new auto",
    "start": "1146360",
    "end": "1148430"
  },
  {
    "text": "scaling group with the new ami you add",
    "start": "1148430",
    "end": "1151580"
  },
  {
    "text": "the new targets for that new auto",
    "start": "1151580",
    "end": "1153740"
  },
  {
    "text": "scaling group to your existing load",
    "start": "1153740",
    "end": "1155090"
  },
  {
    "text": "balancer you drain the connections from",
    "start": "1155090",
    "end": "1157940"
  },
  {
    "text": "the old aileth auto scaling group",
    "start": "1157940",
    "end": "1159920"
  },
  {
    "text": "targets and then you destroyed that",
    "start": "1159920",
    "end": "1161150"
  },
  {
    "text": "Lovato scaling group makes sense right",
    "start": "1161150",
    "end": "1162860"
  },
  {
    "text": "it's very straightforward very simple",
    "start": "1162860",
    "end": "1165040"
  },
  {
    "text": "it's not a perfect fit for all cases it",
    "start": "1165040",
    "end": "1169070"
  },
  {
    "text": "can be somewhat difficult to orchestrate",
    "start": "1169070",
    "end": "1171050"
  },
  {
    "text": "depending on what kind of orchestration",
    "start": "1171050",
    "end": "1173450"
  },
  {
    "text": "system you use so if you're using cloud",
    "start": "1173450",
    "end": "1176270"
  },
  {
    "text": "formation or terraform that means you",
    "start": "1176270",
    "end": "1178310"
  },
  {
    "text": "have to have multiple stacks or multiple",
    "start": "1178310",
    "end": "1180110"
  },
  {
    "text": "auto scaling group Spri declared in",
    "start": "1180110",
    "end": "1181820"
  },
  {
    "text": "advance and then you need some sort of",
    "start": "1181820",
    "end": "1184460"
  },
  {
    "text": "external orchestration to to manage this",
    "start": "1184460",
    "end": "1187940"
  },
  {
    "text": "blue/green deployment and it can be",
    "start": "1187940",
    "end": "1189950"
  },
  {
    "text": "error-prone if you're not careful I mean",
    "start": "1189950",
    "end": "1191750"
  },
  {
    "text": "imagine the worst case scenario where",
    "start": "1191750",
    "end": "1193430"
  },
  {
    "text": "you bring down the the live stack before",
    "start": "1193430",
    "end": "1195350"
  },
  {
    "text": "bringing up the new one that would be",
    "start": "1195350",
    "end": "1197030"
  },
  {
    "text": "disastrous another another challenge is",
    "start": "1197030",
    "end": "1200480"
  },
  {
    "text": "that depending on how you've set up auto",
    "start": "1200480",
    "end": "1202550"
  },
  {
    "text": "scaling you know if you immediately add",
    "start": "1202550",
    "end": "1206540"
  },
  {
    "text": "all of your new instances to your auto",
    "start": "1206540",
    "end": "1208370"
  },
  {
    "text": "scaling group half of your traffic and",
    "start": "1208370",
    "end": "1209900"
  },
  {
    "text": "start flowing to cold cache instances",
    "start": "1209900",
    "end": "1211460"
  },
  {
    "text": "and impact your SLA and impact your",
    "start": "1211460",
    "end": "1213800"
  },
  {
    "text": "response metrics to your customers",
    "start": "1213800",
    "end": "1216880"
  },
  {
    "text": "it could be extremely costly if you have",
    "start": "1216880",
    "end": "1219280"
  },
  {
    "text": "very very large autoscaler groups at",
    "start": "1219280",
    "end": "1222370"
  },
  {
    "text": "segments we often run with auto-scaling",
    "start": "1222370",
    "end": "1224950"
  },
  {
    "text": "groups 200 300 500 instances in size and",
    "start": "1224950",
    "end": "1228790"
  },
  {
    "text": "we run them on very large cc5 9x large",
    "start": "1228790",
    "end": "1231610"
  },
  {
    "text": "instances so time that we spend doing",
    "start": "1231610",
    "end": "1235030"
  },
  {
    "text": "this transition we could run into every",
    "start": "1235030",
    "end": "1237250"
  },
  {
    "text": "instant instance resource limits can be",
    "start": "1237250",
    "end": "1239680"
  },
  {
    "text": "very costly and then it's also not",
    "start": "1239680",
    "end": "1243370"
  },
  {
    "text": "appropriate for stateful services as I",
    "start": "1243370",
    "end": "1245140"
  },
  {
    "text": "talked about before so to answer this",
    "start": "1245140",
    "end": "1248920"
  },
  {
    "text": "problem we've had we've had many",
    "start": "1248920",
    "end": "1251170"
  },
  {
    "text": "attempts at engineering for this",
    "start": "1251170",
    "end": "1253270"
  },
  {
    "text": "particular problem and the one that we",
    "start": "1253270",
    "end": "1255370"
  },
  {
    "text": "are currently experimenting with in",
    "start": "1255370",
    "end": "1258820"
  },
  {
    "text": "development at Simon is called roller",
    "start": "1258820",
    "end": "1260020"
  },
  {
    "text": "BOTS so roller BOTS we call it roller",
    "start": "1260020",
    "end": "1262840"
  },
  {
    "text": "bot because the interface board is a",
    "start": "1262840",
    "end": "1264310"
  },
  {
    "text": "slack bot but it's as I said it's so",
    "start": "1264310",
    "end": "1267220"
  },
  {
    "text": "very much in development we're still",
    "start": "1267220",
    "end": "1268420"
  },
  {
    "text": "working the kinks out it instead of",
    "start": "1268420",
    "end": "1271120"
  },
  {
    "text": "having multiple autoscaler groups you",
    "start": "1271120",
    "end": "1272680"
  },
  {
    "text": "just have one auto scaling and so the",
    "start": "1272680",
    "end": "1275230"
  },
  {
    "text": "basic method of operation is that it",
    "start": "1275230",
    "end": "1278230"
  },
  {
    "text": "updates the launch configuration with",
    "start": "1278230",
    "end": "1280000"
  },
  {
    "text": "the new ami that's associated with your",
    "start": "1280000",
    "end": "1281680"
  },
  {
    "text": "existing auto scaling group and when you",
    "start": "1281680",
    "end": "1283390"
  },
  {
    "text": "do that any new instances that are",
    "start": "1283390",
    "end": "1285690"
  },
  {
    "text": "launched is a scant part of a scale out",
    "start": "1285690",
    "end": "1287860"
  },
  {
    "text": "get the new get the new launch",
    "start": "1287860",
    "end": "1290680"
  },
  {
    "text": "configuration automatically associated",
    "start": "1290680",
    "end": "1292240"
  },
  {
    "text": "with them so we update the launch",
    "start": "1292240",
    "end": "1294460"
  },
  {
    "text": "configuration and while there are",
    "start": "1294460",
    "end": "1297120"
  },
  {
    "text": "existing old instances of the previous",
    "start": "1297120",
    "end": "1299860"
  },
  {
    "text": "launch configuration still alive what",
    "start": "1299860",
    "end": "1302170"
  },
  {
    "text": "roller bot does is it adds a fraction of",
    "start": "1302170",
    "end": "1304330"
  },
  {
    "text": "new instances to the auto scaling group",
    "start": "1304330",
    "end": "1305800"
  },
  {
    "text": "by simply increasing the desired count",
    "start": "1305800",
    "end": "1308050"
  },
  {
    "text": "by you know suppose it's a 10 or sorry",
    "start": "1308050",
    "end": "1311920"
  },
  {
    "text": "supposed to 100 instance cluster we add",
    "start": "1311920",
    "end": "1314170"
  },
  {
    "text": "10 you we raise desired count by 10 to",
    "start": "1314170",
    "end": "1316960"
  },
  {
    "text": "bring it up to say 110 we wait for them",
    "start": "1316960",
    "end": "1320380"
  },
  {
    "text": "and we wait for all their launch hooks",
    "start": "1320380",
    "end": "1322840"
  },
  {
    "text": "to complete and then we wait and",
    "start": "1322840",
    "end": "1325720"
  },
  {
    "text": "basically we wait for those new",
    "start": "1325720",
    "end": "1327460"
  },
  {
    "text": "instances to transition to in service",
    "start": "1327460",
    "end": "1329890"
  },
  {
    "text": "date once they're in service and",
    "start": "1329890",
    "end": "1331750"
  },
  {
    "text": "verified we drain in the in terment we",
    "start": "1331750",
    "end": "1333880"
  },
  {
    "text": "pick 10 and 10 of the old instances and",
    "start": "1333880",
    "end": "1336010"
  },
  {
    "text": "we just terminate them and we decrease",
    "start": "1336010",
    "end": "1338710"
  },
  {
    "text": "and every time we terminate we decrease",
    "start": "1338710",
    "end": "1340570"
  },
  {
    "text": "the desired count but until it reaches",
    "start": "1340570",
    "end": "1342520"
  },
  {
    "text": "back down to the original count yet so",
    "start": "1342520",
    "end": "1344470"
  },
  {
    "text": "if we were at 110 we then go back to",
    "start": "1344470",
    "end": "1346660"
  },
  {
    "text": "down to 1",
    "start": "1346660",
    "end": "1347890"
  },
  {
    "text": "and we repeat this process over and over",
    "start": "1347890",
    "end": "1350230"
  },
  {
    "text": "until there are no old instances left",
    "start": "1350230",
    "end": "1353490"
  },
  {
    "text": "and then we also have a stateful method",
    "start": "1353490",
    "end": "1356500"
  },
  {
    "text": "as well that's useful for replicated",
    "start": "1356500",
    "end": "1358290"
  },
  {
    "text": "data services like Kafka that simply go",
    "start": "1358290",
    "end": "1361809"
  },
  {
    "text": "one instance at a time drain and",
    "start": "1361809",
    "end": "1364330"
  },
  {
    "text": "terminate one on one instance and then",
    "start": "1364330",
    "end": "1367030"
  },
  {
    "text": "add a replacement until that replacement",
    "start": "1367030",
    "end": "1369760"
  },
  {
    "text": "instance is quiet so that we don't end",
    "start": "1369760",
    "end": "1371679"
  },
  {
    "text": "up having d synchronization of our of",
    "start": "1371679",
    "end": "1375280"
  },
  {
    "text": "our replicas so I had to in order to",
    "start": "1375280",
    "end": "1380080"
  },
  {
    "text": "make this all fit on the screen",
    "start": "1380080",
    "end": "1381460"
  },
  {
    "text": "I had to decrease the font size a lot",
    "start": "1381460",
    "end": "1383530"
  },
  {
    "text": "but as you can see roller bot is a much",
    "start": "1383530",
    "end": "1386049"
  },
  {
    "text": "more complicated step function than the",
    "start": "1386049",
    "end": "1389169"
  },
  {
    "text": "ACS instance trainer it is I believe",
    "start": "1389169",
    "end": "1392700"
  },
  {
    "text": "about 20 20 to 25 steps in the step",
    "start": "1392700",
    "end": "1397630"
  },
  {
    "text": "function that are linked together some",
    "start": "1397630",
    "end": "1400600"
  },
  {
    "text": "of the some of the names sort of",
    "start": "1400600",
    "end": "1402580"
  },
  {
    "text": "indicate what they do for example we we",
    "start": "1402580",
    "end": "1404260"
  },
  {
    "text": "have a validation step we have ensure",
    "start": "1404260",
    "end": "1407140"
  },
  {
    "text": "that there are no protected instances",
    "start": "1407140",
    "end": "1408760"
  },
  {
    "text": "that can't be terminated we ensure that",
    "start": "1408760",
    "end": "1411070"
  },
  {
    "text": "we've actually add instances by looking",
    "start": "1411070",
    "end": "1413020"
  },
  {
    "text": "at I believe it's the trusted adviser",
    "start": "1413020",
    "end": "1416260"
  },
  {
    "text": "API to make sure that we're not going to",
    "start": "1416260",
    "end": "1418030"
  },
  {
    "text": "hit a limit we have you know outdated",
    "start": "1418030",
    "end": "1421150"
  },
  {
    "text": "instance counters we have terminations",
    "start": "1421150",
    "end": "1424410"
  },
  {
    "text": "and we have recoverable and",
    "start": "1424410",
    "end": "1426429"
  },
  {
    "text": "unrecoverable error handlers that do the",
    "start": "1426429",
    "end": "1428650"
  },
  {
    "text": "right thing we also have that acquire",
    "start": "1428650",
    "end": "1430299"
  },
  {
    "text": "lock and dynamodb as well some of the",
    "start": "1430299",
    "end": "1434140"
  },
  {
    "text": "things I've learned about with step",
    "start": "1434140",
    "end": "1435280"
  },
  {
    "text": "functions some of the best practices so",
    "start": "1435280",
    "end": "1438070"
  },
  {
    "text": "best practice one is surface as much",
    "start": "1438070",
    "end": "1441100"
  },
  {
    "text": "logic in the machine as possible",
    "start": "1441100",
    "end": "1444010"
  },
  {
    "text": "don't hide the logic and functions as",
    "start": "1444010",
    "end": "1447299"
  },
  {
    "text": "keep the functions as simple as possible",
    "start": "1447299",
    "end": "1449530"
  },
  {
    "text": "don't branch in them don't sleep don't",
    "start": "1449530",
    "end": "1451870"
  },
  {
    "text": "loop let them let the machine do that",
    "start": "1451870",
    "end": "1454080"
  },
  {
    "text": "just make your function do as little as",
    "start": "1454080",
    "end": "1456850"
  },
  {
    "text": "possible so keep them simple put the",
    "start": "1456850",
    "end": "1459700"
  },
  {
    "text": "switching logic in to choice steps",
    "start": "1459700",
    "end": "1461440"
  },
  {
    "text": "instead it makes it very clear to the",
    "start": "1461440",
    "end": "1463900"
  },
  {
    "text": "observer what's going on",
    "start": "1463900",
    "end": "1466240"
  },
  {
    "text": "notify as we do when an execution time",
    "start": "1466240",
    "end": "1469059"
  },
  {
    "text": "exceeds some reasonable threshold",
    "start": "1469059",
    "end": "1470730"
  },
  {
    "text": "otherwise it'll you know it's possible",
    "start": "1470730",
    "end": "1472720"
  },
  {
    "text": "that a state machine can loop for a year",
    "start": "1472720",
    "end": "1474790"
  },
  {
    "text": "and you might not notice and then don't",
    "start": "1474790",
    "end": "1477340"
  },
  {
    "text": "barriers surface them as much as you can",
    "start": "1477340",
    "end": "1480350"
  },
  {
    "text": "at the very least catch them in a ball",
    "start": "1480350",
    "end": "1482389"
  },
  {
    "text": "and notify somebody who might actually",
    "start": "1482389",
    "end": "1483649"
  },
  {
    "text": "be able to take action on them it's been",
    "start": "1483649",
    "end": "1487369"
  },
  {
    "text": "my experience that my peers really like",
    "start": "1487369",
    "end": "1489200"
  },
  {
    "text": "to soar one of the cool things about",
    "start": "1489200",
    "end": "1490519"
  },
  {
    "text": "step functions is the UI when in step",
    "start": "1490519",
    "end": "1493129"
  },
  {
    "text": "function is actually executing it has",
    "start": "1493129",
    "end": "1495350"
  },
  {
    "text": "this cool animated display of what's",
    "start": "1495350",
    "end": "1497419"
  },
  {
    "text": "what step is executing and when it fails",
    "start": "1497419",
    "end": "1500029"
  },
  {
    "text": "what step failed it's been my experience",
    "start": "1500029",
    "end": "1501859"
  },
  {
    "text": "that my colleagues really like to see",
    "start": "1501859",
    "end": "1503359"
  },
  {
    "text": "the various steps as it makes the larger",
    "start": "1503359",
    "end": "1505909"
  },
  {
    "text": "a lot clearer that diving into the code",
    "start": "1505909",
    "end": "1507679"
  },
  {
    "text": "and they love to watch this animations",
    "start": "1507679",
    "end": "1509749"
  },
  {
    "text": "to again I just want to say segment is",
    "start": "1509749",
    "end": "1514580"
  },
  {
    "text": "really enjoyed working with AWS on this",
    "start": "1514580",
    "end": "1516409"
  },
  {
    "text": "we really love step functions we love",
    "start": "1516409",
    "end": "1518450"
  },
  {
    "text": "ECS we love lamda and I will be present",
    "start": "1518450",
    "end": "1522590"
  },
  {
    "text": "or I will be available at the ask a",
    "start": "1522590",
    "end": "1524090"
  },
  {
    "text": "start-up table a little bit later on",
    "start": "1524090",
    "end": "1526249"
  },
  {
    "text": "today I'd love to answer your questions",
    "start": "1526249",
    "end": "1528590"
  },
  {
    "text": "talk to you get to know you again my",
    "start": "1528590",
    "end": "1530299"
  },
  {
    "text": "name is Michael Fisher and thank you for",
    "start": "1530299",
    "end": "1533149"
  },
  {
    "text": "attending I really appreciate the",
    "start": "1533149",
    "end": "1534409"
  },
  {
    "text": "turnout and everybody coming to learn",
    "start": "1534409",
    "end": "1537080"
  },
  {
    "text": "about step functions",
    "start": "1537080",
    "end": "1539240"
  },
  {
    "text": "[Applause]",
    "start": "1539240",
    "end": "1544970"
  }
]