[
  {
    "start": "0",
    "end": "173000"
  },
  {
    "text": "all right good morning everyone can you hear me good awesome uh well it's it's uh our honor and",
    "start": "1760",
    "end": "9120"
  },
  {
    "text": "privilege to talk to you this morning about containers on aws uh you know i'd",
    "start": "9120",
    "end": "14160"
  },
  {
    "text": "like to be one of the first to welcome you to the worldwide public sector summit we're certainly really excited to have",
    "start": "14160",
    "end": "20800"
  },
  {
    "text": "you here there's lots of great sessions and i hope you get to see all the the sessions that you're interested in",
    "start": "20800",
    "end": "28080"
  },
  {
    "text": "my name is david kurd i'm a solutions architect with amazon web services i primarily support the federal",
    "start": "28080",
    "end": "34399"
  },
  {
    "text": "government uh in helping them move their workloads to the cloud i'll be co-presenting today with kevin",
    "start": "34399",
    "end": "40239"
  },
  {
    "text": "mccandless go ahead and introduce you yep good morning everybody my name is kevin mccandless i'm a solutions",
    "start": "40239",
    "end": "45520"
  },
  {
    "text": "architect on the education team here at amazon web services and i'll be uh taking over the the second half of the",
    "start": "45520",
    "end": "51600"
  },
  {
    "text": "presentation today with dave awesome all right",
    "start": "51600",
    "end": "57280"
  },
  {
    "text": "well let's go ahead and get started all right so uh like i said this is containers on aws",
    "start": "57280",
    "end": "64640"
  },
  {
    "text": "and introduction so i just want to level set everyone this is not going to be a deep dive into",
    "start": "64640",
    "end": "70640"
  },
  {
    "text": "any particular technology right so we're looking to",
    "start": "70640",
    "end": "76560"
  },
  {
    "text": "touch base with those folks that may just be interested in containers maybe you have some experience with containers",
    "start": "76560",
    "end": "82080"
  },
  {
    "text": "that's okay but we won't be deep diving into any one service or any uh any particular",
    "start": "82080",
    "end": "87439"
  },
  {
    "text": "technology it really is an overview",
    "start": "87439",
    "end": "91280"
  },
  {
    "text": "all right all good things start with an agenda so we'll be talking about uh we'll be giving a containers over you for those",
    "start": "95439",
    "end": "101759"
  },
  {
    "text": "of you that aren't familiar with containers or you just you just kind of have heard about it we'll be talking about that",
    "start": "101759",
    "end": "107920"
  },
  {
    "text": "and i think it's really instructive if you're thinking about using containers you have to really start thinking about",
    "start": "107920",
    "end": "114320"
  },
  {
    "text": "what happens whenever you start to deploy those containers at scale and so we'll talk about container",
    "start": "114320",
    "end": "120320"
  },
  {
    "text": "orchestration at that point i'll hand it over to kevin and he's going to talk about the aws",
    "start": "120320",
    "end": "126719"
  },
  {
    "text": "container landscape so he'll be talking about a lot of the different services that aws provides for running containers",
    "start": "126719",
    "end": "133280"
  },
  {
    "text": "in the cloud and then he'll also talk about the aws marketplace for containers which is a",
    "start": "133280",
    "end": "138800"
  },
  {
    "text": "really exciting service offering which allows you to take advantage and utilize",
    "start": "138800",
    "end": "144160"
  },
  {
    "text": "other containers that other partners and other third party vendors are supplying",
    "start": "144160",
    "end": "151120"
  },
  {
    "text": "all right so we'll talk about this introduction to containers and we'll touch on docker okay we'll talk about",
    "start": "155120",
    "end": "161360"
  },
  {
    "text": "docker because it is a very exciting and very common platform for running containers",
    "start": "161360",
    "end": "167840"
  },
  {
    "text": "there certainly our other container platforms out there but we want to touch on docker today",
    "start": "167840",
    "end": "173519"
  },
  {
    "start": "173000",
    "end": "173000"
  },
  {
    "text": "so first things first uh why are what are containers and why are customers using them",
    "start": "173519",
    "end": "181840"
  },
  {
    "text": "so there are certainly a lot of reasons why we can look to using containers",
    "start": "181840",
    "end": "188879"
  },
  {
    "text": "first the container really is just an isolation of processes",
    "start": "189760",
    "end": "194800"
  },
  {
    "text": "so how many of you out there are developers",
    "start": "194800",
    "end": "199920"
  },
  {
    "text": "all right and how many of you would consider yourself the system administration infrastructure type",
    "start": "199920",
    "end": "205680"
  },
  {
    "text": "okay cool so containers really are an evolution of",
    "start": "205680",
    "end": "212239"
  },
  {
    "text": "virtualization technology so certainly virtualized hardware",
    "start": "212239",
    "end": "217760"
  },
  {
    "text": "virtualized machines are what we're used to and we have been used to for many years and there's many vendors that provide",
    "start": "217760",
    "end": "224000"
  },
  {
    "text": "that and with a virtual machine you have an operating system which is virtualized",
    "start": "224000",
    "end": "230000"
  },
  {
    "text": "and you're running an application in the associated binaries and libraries which are required for that application within",
    "start": "230000",
    "end": "236239"
  },
  {
    "text": "that virtual environment containers on the other hand are a little bit further up the stack",
    "start": "236239",
    "end": "242239"
  },
  {
    "text": "so instead of virtualizing the operating system you virtualize the application and the",
    "start": "242239",
    "end": "248080"
  },
  {
    "text": "associated binaries and libraries for that application to run",
    "start": "248080",
    "end": "254080"
  },
  {
    "text": "reason why customers are using them is because they're super lightweight",
    "start": "254080",
    "end": "259199"
  },
  {
    "text": "they're super portable and they make it very easy to distribute",
    "start": "259199",
    "end": "264400"
  },
  {
    "text": "applications and to build applications at scale so really in a nutshell the container is",
    "start": "264400",
    "end": "271280"
  },
  {
    "text": "this standard unit of software that packages up all of your code and all of its dependencies so that you",
    "start": "271280",
    "end": "277600"
  },
  {
    "text": "can deploy your application quickly the other real benefit here is that you can run it reliably across a number of",
    "start": "277600",
    "end": "284160"
  },
  {
    "text": "different compute environments and that can be a challenge certainly if you don't know necessarily where your application is going to run",
    "start": "284160",
    "end": "290800"
  },
  {
    "text": "there are a lot of variables to consider and containers can help ease that challenge",
    "start": "290800",
    "end": "297320"
  },
  {
    "text": "so how many unix veterans do we have out there okay so if you're not familiar with",
    "start": "297440",
    "end": "303120"
  },
  {
    "text": "containers you may be familiar with some of the technology that containers really has evolved to",
    "start": "303120",
    "end": "308479"
  },
  {
    "text": "you know if you remember back in the days of unix you had rooted environments where you could isolate",
    "start": "308479",
    "end": "313840"
  },
  {
    "text": "the types of activities that a particular process or a user could take and containers really are just an",
    "start": "313840",
    "end": "319680"
  },
  {
    "text": "evolution of that",
    "start": "319680",
    "end": "323240"
  },
  {
    "text": "all right so when we're looking at what type of application we can run a container really the sky is the limit",
    "start": "326560",
    "end": "334400"
  },
  {
    "start": "329000",
    "end": "329000"
  },
  {
    "text": "but here's some things to think about the first thing we need for our application is going to be that runtime",
    "start": "334400",
    "end": "339440"
  },
  {
    "text": "engine so whether that's the java virtual machine or that's net nodejs",
    "start": "339440",
    "end": "345759"
  },
  {
    "text": "you know the runtime engine is certainly going to be important and those are the instructions that the code needs in",
    "start": "345759",
    "end": "351759"
  },
  {
    "text": "order to run on the hardware then of course you have your code right that's self-explanatory that's the",
    "start": "351759",
    "end": "357680"
  },
  {
    "text": "application code itself and then we have our dependencies and configuration",
    "start": "357680",
    "end": "363199"
  },
  {
    "text": "so if you're developing an application it's easy to take a shortcut sometimes and hard code your dependencies",
    "start": "363199",
    "end": "370720"
  },
  {
    "text": "right your dependencies are all of the software and and packages and libraries that your code needs to actually run",
    "start": "370720",
    "end": "380280"
  },
  {
    "text": "but it's important to note that when we're building applications that could run at scale and can run in the cloud we",
    "start": "381440",
    "end": "387280"
  },
  {
    "text": "want to try to extract those dependencies and we don't want to rely on the the environment that that",
    "start": "387280",
    "end": "393360"
  },
  {
    "text": "application is running in having the actual packages or libraries that our application and our code would need to",
    "start": "393360",
    "end": "399520"
  },
  {
    "text": "run and so best practice here is really to explicitly define your dependencies as",
    "start": "399520",
    "end": "405120"
  },
  {
    "text": "part of that code package so if there's a particular library that you need you don't want to rely on",
    "start": "405120",
    "end": "410960"
  },
  {
    "text": "having that library available in different environments and then our configuration items",
    "start": "410960",
    "end": "418639"
  },
  {
    "text": "your configuration items are going to be those differences between environments that you know are going to be there",
    "start": "418639",
    "end": "426319"
  },
  {
    "text": "and when we're developing applications to run in containers we can think of these as environment variables that we",
    "start": "426319",
    "end": "431520"
  },
  {
    "text": "would pass to the container so for instance there might be some back-end service connection handles like",
    "start": "431520",
    "end": "438880"
  },
  {
    "text": "the database that it's going to connect to or dns names for back-end services that it would connect to",
    "start": "438880",
    "end": "444880"
  },
  {
    "text": "and these are really good items to have as separate configuration items and these shouldn't be hard coded",
    "start": "444880",
    "end": "450319"
  },
  {
    "text": "and the reason why that's important is because you want this container that's going to have the code and the",
    "start": "450319",
    "end": "455680"
  },
  {
    "text": "dependencies to be a discrete unit that can be deployed across a number of environments",
    "start": "455680",
    "end": "462160"
  },
  {
    "text": "if you have those configuration items in there it makes it very difficult to do that and it causes you to have to hard",
    "start": "462160",
    "end": "467680"
  },
  {
    "text": "code some things later on so this is really important when you're thinking about running an application in",
    "start": "467680",
    "end": "473759"
  },
  {
    "text": "a distributed fashion and running it at scale",
    "start": "473759",
    "end": "478840"
  },
  {
    "start": "479000",
    "end": "479000"
  },
  {
    "text": "so when i say different environments here's really what kind of what i'm talking about i'm talking about your local development",
    "start": "479440",
    "end": "485360"
  },
  {
    "text": "laptop or your local development system it'll have all of the software you need",
    "start": "485360",
    "end": "490400"
  },
  {
    "text": "but there's no guarantee that the libraries and the packages are going to be the same in your staging environment",
    "start": "490400",
    "end": "497599"
  },
  {
    "text": "or in your production environment or even in your on-premises environment they can be slightly different or they",
    "start": "497599",
    "end": "503360"
  },
  {
    "text": "can be vastly different so those those differences can be",
    "start": "503360",
    "end": "508639"
  },
  {
    "text": "operating system patch levels the actual packages the version numbers they can be very different the runtime engines can",
    "start": "508639",
    "end": "515200"
  },
  {
    "text": "be different and that all presents challenges whenever you're trying to build an application that you're going to deploy",
    "start": "515200",
    "end": "522000"
  },
  {
    "text": "at scale in a distributed fashion so the more environments you have the",
    "start": "522000",
    "end": "527279"
  },
  {
    "text": "larger the opportunity for configuration and dependency drift uh begins to present itself",
    "start": "527279",
    "end": "535240"
  },
  {
    "text": "all right how many of you have asked yourself this question",
    "start": "541600",
    "end": "546079"
  },
  {
    "text": "nobody i've asked myself this question it happens right",
    "start": "546839",
    "end": "553600"
  },
  {
    "text": "whenever we're building an application or we're going to deploy an application we certainly try our best to try to",
    "start": "553600",
    "end": "559279"
  },
  {
    "text": "think of all of the different possible environments it's going to run in the different software versions",
    "start": "559279",
    "end": "565279"
  },
  {
    "text": "and in a lot of cases we know what that is right here's a great example we know our staging is at version 7. we know our",
    "start": "565279",
    "end": "572399"
  },
  {
    "text": "on-prem is the same and we know our production is a little bit further behind",
    "start": "572399",
    "end": "577600"
  },
  {
    "text": "and we can test for that and we can develop for that",
    "start": "577600",
    "end": "582640"
  },
  {
    "text": "and we think it should work but it doesn't okay so",
    "start": "582640",
    "end": "587839"
  },
  {
    "text": "even if we have the good grasp of the different environments the variability certainly makes it",
    "start": "587839",
    "end": "593440"
  },
  {
    "text": "difficult and you know even though we're well aware of of the the differences",
    "start": "593440",
    "end": "600240"
  },
  {
    "text": "murphy still rears its ugly head",
    "start": "600240",
    "end": "604760"
  },
  {
    "start": "606000",
    "end": "606000"
  },
  {
    "text": "so how do we solve that this is where a container platform where docker comes to the rescue",
    "start": "606160",
    "end": "613360"
  },
  {
    "text": "so docker is a container platform and this is going to allow you to run these discrete units of code these",
    "start": "613360",
    "end": "619440"
  },
  {
    "text": "applications on a platform that really abstracts the underlying operating",
    "start": "619440",
    "end": "624480"
  },
  {
    "text": "system resources from the container itself and it brokers that between the container that",
    "start": "624480",
    "end": "631040"
  },
  {
    "text": "information between the container and the os now you can run docker on a physical",
    "start": "631040",
    "end": "637040"
  },
  {
    "text": "operating system on a physical machine and you can run it on a virtual machine on the operating",
    "start": "637040",
    "end": "643760"
  },
  {
    "text": "system there so it's very flexible docker is a client server environment that consists of a docker d daemon",
    "start": "643760",
    "end": "652560"
  },
  {
    "text": "right that's the service the docker service and a rest api so if you wanted to interact with it pro",
    "start": "652560",
    "end": "658959"
  },
  {
    "text": "programmatically you can do so and then a command line interface the platform is really easy to use",
    "start": "658959",
    "end": "666399"
  },
  {
    "text": "it's quite reliable and the cli itself the commands are really simple to learn",
    "start": "666399",
    "end": "672000"
  },
  {
    "text": "but uh it offers a lot of functionality to you in terms of being able to run",
    "start": "672000",
    "end": "677200"
  },
  {
    "text": "containers in different types of environments to network these containers together to keep them completely",
    "start": "677200",
    "end": "682959"
  },
  {
    "text": "isolated if you so choose now when you're using the cli",
    "start": "682959",
    "end": "688480"
  },
  {
    "text": "it actually uses the rest api and that's important because if you need to communicate with remote",
    "start": "688480",
    "end": "694880"
  },
  {
    "text": "servers or systems which are running the docker platform you can manipulate that",
    "start": "694880",
    "end": "700160"
  },
  {
    "text": "that remote instantiation of docker as well a lot of users run their containers on",
    "start": "700160",
    "end": "705600"
  },
  {
    "text": "the same system that they're running the the docker service and the cli that's okay too",
    "start": "705600",
    "end": "711440"
  },
  {
    "text": "but there's a lot of flexibility here now docker is really providing you the",
    "start": "711440",
    "end": "717360"
  },
  {
    "text": "developer or the application the system administrator to actually run the application in the container and it",
    "start": "717360",
    "end": "723600"
  },
  {
    "text": "manages those containers for you so as we talked about the container is",
    "start": "723600",
    "end": "730800"
  },
  {
    "text": "is going to contain the code it's going to have the dependencies and it's going to have that runtime engine all defined",
    "start": "730800",
    "end": "736800"
  },
  {
    "text": "specifically in that container all right",
    "start": "736800",
    "end": "742240"
  },
  {
    "text": "so here's a quick look at the difference between a virtual machine and a docker container",
    "start": "742240",
    "end": "748320"
  },
  {
    "text": "so there on the left you see you've got your virtual machine it's running on a physical server",
    "start": "748320",
    "end": "753920"
  },
  {
    "text": "there's the host operating system then there's the hypervisor and then of course you have your virtual machine",
    "start": "753920",
    "end": "759120"
  },
  {
    "text": "with the guest operating system and if you have an application that you want to isolate with a virtual machine",
    "start": "759120",
    "end": "765920"
  },
  {
    "text": "this is how you do it but you have a guest operating system and that can be kind of expensive",
    "start": "765920",
    "end": "771680"
  },
  {
    "text": "whenever you're talking about a distributed application that needs to run at scale operating systems you can find",
    "start": "771680",
    "end": "778240"
  },
  {
    "text": "lightweight operating systems to run your application on but there's still a lot of information there",
    "start": "778240",
    "end": "786160"
  },
  {
    "text": "but just like a container you're still going to have those binaries and libraries that those packages that are required by the code to run",
    "start": "786160",
    "end": "793200"
  },
  {
    "text": "and then of course the application itself on the right is the container and this is where we see how lightweight",
    "start": "793200",
    "end": "799040"
  },
  {
    "text": "containers can be because docker actually allows you to share the resources of that underlying",
    "start": "799040",
    "end": "805360"
  },
  {
    "text": "operating system and then all you have to do is",
    "start": "805360",
    "end": "810880"
  },
  {
    "text": "make sure that the container has the appropriate dependencies declared it has the appropriate binaries and libraries",
    "start": "810880",
    "end": "816800"
  },
  {
    "text": "for your application to run now this causes containers as they're lightweight to be very fast to start up",
    "start": "816800",
    "end": "824160"
  },
  {
    "text": "they're very portable they're consistent and it's a discrete unit of software that can be deployed",
    "start": "824160",
    "end": "829760"
  },
  {
    "text": "across many different environments and there's a lot of advantages there in terms of building applications that",
    "start": "829760",
    "end": "835839"
  },
  {
    "text": "scale now when we talk about a docker container",
    "start": "835839",
    "end": "842399"
  },
  {
    "start": "837000",
    "end": "837000"
  },
  {
    "text": "it's not just the container itself that's actually the running instance that's the the process",
    "start": "842399",
    "end": "847760"
  },
  {
    "text": "that's actually running but how we get to the container is through an image",
    "start": "847760",
    "end": "853360"
  },
  {
    "text": "now the image really is a read-only template of what the container requires to actually run what it what is required",
    "start": "853360",
    "end": "859760"
  },
  {
    "text": "to instantiate that container and it all starts with a base image",
    "start": "859760",
    "end": "865199"
  },
  {
    "text": "and then as you layer on the dependencies those are actually created as layers and that could be really nice",
    "start": "865199",
    "end": "872320"
  },
  {
    "text": "when it comes to updating your container image i'll talk about that in just a second so",
    "start": "872320",
    "end": "877519"
  },
  {
    "text": "we start with this base image in this case it's ubuntu it's got the basics of ubuntu that that the application would",
    "start": "877519",
    "end": "883600"
  },
  {
    "text": "need to to know about and understand this allows us as we launch into the",
    "start": "883600",
    "end": "888639"
  },
  {
    "text": "container and we interact with the container we have some command line utilities that we can work with and then",
    "start": "888639",
    "end": "893920"
  },
  {
    "text": "basic processes that the application would need and then on top of that we actually add our runtime engine in this case it's",
    "start": "893920",
    "end": "900240"
  },
  {
    "text": "node.js that's a layer in the image and that layer references the parent",
    "start": "900240",
    "end": "905440"
  },
  {
    "text": "image and then here we're running uh nginx so we're running a web server as well and",
    "start": "905440",
    "end": "912320"
  },
  {
    "text": "then we have our application code that our web application code that would be a part of that that's a separate layer and then at the",
    "start": "912320",
    "end": "918800"
  },
  {
    "text": "very top you have that container now containers are writable in the sense that once it's running you",
    "start": "918800",
    "end": "925279"
  },
  {
    "text": "can interact with it and you can change uh what's happening inside the container right you can you can adjust settings if",
    "start": "925279",
    "end": "932320"
  },
  {
    "text": "you needed to do so but that's the only thing that's writable the image itself is not it is",
    "start": "932320",
    "end": "937920"
  },
  {
    "text": "immutable so once it's set aside from you going in and updating the image you can be assured that every container",
    "start": "937920",
    "end": "944880"
  },
  {
    "text": "launched from that image will be exactly the same",
    "start": "944880",
    "end": "949279"
  },
  {
    "text": "so this is actually represented through something called the docker file and the docker file is a very easy to use",
    "start": "950560",
    "end": "957920"
  },
  {
    "text": "standardized template for building the image and the docker file just literally has the commands that the docker",
    "start": "957920",
    "end": "964639"
  },
  {
    "text": "platform will run to go ahead and build the container and so it's again simple to use but quite",
    "start": "964639",
    "end": "971519"
  },
  {
    "text": "powerful and the commands are easy commands like copy and run so it offers you",
    "start": "971519",
    "end": "977360"
  },
  {
    "text": "ease of use but quite a bit of flexibility",
    "start": "977360",
    "end": "981959"
  },
  {
    "start": "982000",
    "end": "982000"
  },
  {
    "text": "all right so now that challenge we had where we had the four different environments",
    "start": "983120",
    "end": "988399"
  },
  {
    "text": "we can actually abstract that out to having one container environment where",
    "start": "988399",
    "end": "993519"
  },
  {
    "text": "docker is going to be running in all those so if i develop my application and it's running great in docker on my",
    "start": "993519",
    "end": "999600"
  },
  {
    "text": "laptop and i'm running docker across the rest of my environments i can be reasonably assured that this is going to",
    "start": "999600",
    "end": "1005839"
  },
  {
    "text": "run exactly the way it it's supposed to",
    "start": "1005839",
    "end": "1011320"
  },
  {
    "start": "1012000",
    "end": "1012000"
  },
  {
    "text": "so the the container benefits that you get are one that it runs reliably",
    "start": "1012639",
    "end": "1018160"
  },
  {
    "text": "everywhere okay and we've seen that through the use of docker itself and",
    "start": "1018160",
    "end": "1023279"
  },
  {
    "text": "then the docker file by building a consistent container you can run different applications",
    "start": "1023279",
    "end": "1029120"
  },
  {
    "text": "simultaneously right so this is a this is a benefit of virtualization in general but now i can run these many",
    "start": "1029120",
    "end": "1036480"
  },
  {
    "text": "different containers on one system and because containers are so lightweight",
    "start": "1036480",
    "end": "1041600"
  },
  {
    "text": "i get a lot more density in terms of applications running on a physical piece of hardware and that certainly has",
    "start": "1041600",
    "end": "1048000"
  },
  {
    "text": "benefits in terms of cost and resource utilization and speaking of resource",
    "start": "1048000",
    "end": "1053039"
  },
  {
    "text": "utilization with containers you can actually detail and dictate how much of",
    "start": "1053039",
    "end": "1058320"
  },
  {
    "text": "how much memory is actually utilized by that container how much cpu is utilized by that container and that'll really",
    "start": "1058320",
    "end": "1064480"
  },
  {
    "text": "allows you to place containers strategically across your physical infrastructure in order to best serve",
    "start": "1064480",
    "end": "1070640"
  },
  {
    "text": "your customers",
    "start": "1070640",
    "end": "1073280"
  },
  {
    "text": "so containers due to their lightweight portable nature really made it easy to build and scale cloud native",
    "start": "1077039",
    "end": "1082880"
  },
  {
    "text": "applications now running one container is easy maybe",
    "start": "1082880",
    "end": "1088880"
  },
  {
    "start": "1086000",
    "end": "1086000"
  },
  {
    "text": "running 10 containers is easy but whenever you're talking about running containers at scale and we're",
    "start": "1088880",
    "end": "1096000"
  },
  {
    "text": "talking hundreds and thousands of containers comprising hundreds of services this can get out of",
    "start": "1096000",
    "end": "1103280"
  },
  {
    "text": "hand really really quickly and since containers allow for rapid",
    "start": "1103280",
    "end": "1108320"
  },
  {
    "text": "scaling and you're ready for these containers to scale you can go from one or two containers to 100 in no time and",
    "start": "1108320",
    "end": "1115200"
  },
  {
    "text": "that's really great for being able to serve your customers but you also need to know where are",
    "start": "1115200",
    "end": "1120240"
  },
  {
    "text": "those containers being placed you know are you able to place them automatically are you able to look",
    "start": "1120240",
    "end": "1126320"
  },
  {
    "text": "across your physical infrastructure and see how how much of your resources are available and then place your containers",
    "start": "1126320",
    "end": "1132559"
  },
  {
    "text": "there and so unless you're going to do that by hand you could automate it and certainly",
    "start": "1132559",
    "end": "1137600"
  },
  {
    "text": "automation is going to be key but there needs to be some sort of service or tool that you can use to",
    "start": "1137600",
    "end": "1143760"
  },
  {
    "text": "handle that for you right and that's where container orchestration",
    "start": "1143760",
    "end": "1149200"
  },
  {
    "text": "tools come in so there are a number of container orchestration tools",
    "start": "1149200",
    "end": "1155039"
  },
  {
    "start": "1151000",
    "end": "1151000"
  },
  {
    "text": "some of you may have heard of our service which is amazon elastic container service",
    "start": "1155039",
    "end": "1160160"
  },
  {
    "text": "kevin's actually going to talk about that in a little bit more detail kubernetes is another container",
    "start": "1160160",
    "end": "1165200"
  },
  {
    "text": "orchestration platform which is very popular docker swarm docker has its own the cube is a",
    "start": "1165200",
    "end": "1172400"
  },
  {
    "text": "hashicorp nomad and apache mesos and these are just some options you have for orchestrating your containers at scale",
    "start": "1172400",
    "end": "1180160"
  },
  {
    "text": "so really what is container orchestration all about it's really about managing the life cycle of",
    "start": "1180160",
    "end": "1185520"
  },
  {
    "text": "containers when you instantiate the container that's not the end of it right it's",
    "start": "1185520",
    "end": "1191440"
  },
  {
    "text": "there's a very good possibility it won't always live either on that same physical infrastructure it might need to be moved",
    "start": "1191440",
    "end": "1197360"
  },
  {
    "text": "around it might become part of a load-balanced pool of resources so the the orchestration tool really handles",
    "start": "1197360",
    "end": "1204559"
  },
  {
    "text": "all of that for you so it will handle the provisioning and deployment of containers it'll handle the redundancy and",
    "start": "1204559",
    "end": "1210880"
  },
  {
    "text": "availability of those containers any load balancing that you would want to have across those containers",
    "start": "1210880",
    "end": "1216640"
  },
  {
    "text": "scaling out and removing containers is something that your container orchestration tool can do",
    "start": "1216640",
    "end": "1222720"
  },
  {
    "text": "and hopefully you see that there's a lot of activities that go into running containers at scale",
    "start": "1222720",
    "end": "1229039"
  },
  {
    "text": "the other thing is you might have a system a physical system that underlying infrastructure",
    "start": "1229039",
    "end": "1234400"
  },
  {
    "text": "which is actually uh running out of resources and you might want to rebalance your containers",
    "start": "1234400",
    "end": "1240640"
  },
  {
    "text": "or or move them from one host to another or it just completely shuts down on you and so you need your orchestration tool",
    "start": "1240640",
    "end": "1246960"
  },
  {
    "text": "to handle the movement of those containers",
    "start": "1246960",
    "end": "1251120"
  },
  {
    "text": "so since kubernetes kubernetes is really really popular i just wanted to touch on this uh quickly so kubernetes is",
    "start": "1252559",
    "end": "1260080"
  },
  {
    "text": "an it's a rapidly moving open source uh container management platform",
    "start": "1260080",
    "end": "1265600"
  },
  {
    "text": "and uh it's since it's open source there are there's a lot of excitement about it and there are a lot of developers that",
    "start": "1265600",
    "end": "1270880"
  },
  {
    "text": "are engaged in uh in developing kubernetes and it moves quite quickly in",
    "start": "1270880",
    "end": "1276720"
  },
  {
    "text": "terms of the features and functionality that it provides but as a container management platform",
    "start": "1276720",
    "end": "1283280"
  },
  {
    "text": "it really helps you run your containers at scale and it gives you those primitives for building modern",
    "start": "1283280",
    "end": "1288480"
  },
  {
    "text": "applications",
    "start": "1288480",
    "end": "1291480"
  },
  {
    "start": "1293000",
    "end": "1293000"
  },
  {
    "text": "so kubernetes is actually managed by the cloud native computing foundation uh amazon web services",
    "start": "1294080",
    "end": "1301200"
  },
  {
    "text": "is a is an important member of the cloud native computing foundation and regularly contributes to development",
    "start": "1301200",
    "end": "1306240"
  },
  {
    "text": "on kubernetes and we have thousands of customers who are running containers on on aws",
    "start": "1306240",
    "end": "1313840"
  },
  {
    "text": "and and certainly we have thousands of customers using amazon ecs but we also have a lot of customers that are using",
    "start": "1313840",
    "end": "1320720"
  },
  {
    "text": "kubernetes and love it and they want to run that in aws as well and we have options for them whether they're running",
    "start": "1320720",
    "end": "1326960"
  },
  {
    "text": "it on our elastic compute cloud or they're running it through our or managed kubernetes service",
    "start": "1326960",
    "end": "1333600"
  },
  {
    "text": "customers have options for running it",
    "start": "1333600",
    "end": "1337200"
  },
  {
    "text": "certainly where you run kubernetes matters",
    "start": "1340480",
    "end": "1345000"
  },
  {
    "text": "important to understand that if you run kubernetes on a platform that really",
    "start": "1346159",
    "end": "1351440"
  },
  {
    "text": "can't the underlying platform can't scale very well it can certainly affect the user experience",
    "start": "1351440",
    "end": "1357039"
  },
  {
    "text": "so it's important to consider the cloud platform that you're running kubernetes on and aws is a great",
    "start": "1357039",
    "end": "1363280"
  },
  {
    "text": "platform to run kubernetes due to our experience and ability to scale",
    "start": "1363280",
    "end": "1369280"
  },
  {
    "text": "the reliability we have with aws certainly is going to help in terms of keeping those that underlying",
    "start": "1369280",
    "end": "1374799"
  },
  {
    "text": "infrastructure running but then your users are going to have a great user experience because the system and the",
    "start": "1374799",
    "end": "1380559"
  },
  {
    "text": "application will always be up and running",
    "start": "1380559",
    "end": "1385320"
  },
  {
    "text": "so since 2014 aws has launched more than 50 new features and services to help",
    "start": "1389120",
    "end": "1394880"
  },
  {
    "text": "developers run containers in the cloud at first it was just running containers",
    "start": "1394880",
    "end": "1400799"
  },
  {
    "text": "then we were able to release services that allow you to manage and orchestrate those containers but our mission really",
    "start": "1400799",
    "end": "1407600"
  },
  {
    "text": "remains to make aws the best place to run any containerized application",
    "start": "1407600",
    "end": "1413520"
  },
  {
    "text": "our goal really is to remove that undifferentiated heavy lifting of underlying infrastructure management and",
    "start": "1413520",
    "end": "1418960"
  },
  {
    "text": "then container orchestration so that you can get your new ideas out to your customers as quickly as possible right",
    "start": "1418960",
    "end": "1426320"
  },
  {
    "text": "we want you to be able to experiment and iterate and do a lot of experimentation and iteration we want to see you",
    "start": "1426320",
    "end": "1433039"
  },
  {
    "text": "innovate",
    "start": "1433039",
    "end": "1435440"
  },
  {
    "text": "and so with that i'm going to hand it over to kevin and he's going to talk about the container landscape on aws",
    "start": "1438320",
    "end": "1444320"
  },
  {
    "text": "all right thank you dave can everybody hear me all right can i get a thumbs up all right awesome",
    "start": "1444320",
    "end": "1449840"
  },
  {
    "text": "um all right so so thanks again for joining us this morning um dave just gave us a great overview right of kind",
    "start": "1449840",
    "end": "1455919"
  },
  {
    "text": "of containers in general a lot of the benefits of containers and why a lot of customers are starting to adopt containers so now i'm sure you're",
    "start": "1455919",
    "end": "1462000"
  },
  {
    "text": "wondering how does that actually map to aws and really what aws services might you",
    "start": "1462000",
    "end": "1467919"
  },
  {
    "text": "use if you want to run containers in the cloud so this is really what that landscape",
    "start": "1467919",
    "end": "1474320"
  },
  {
    "text": "looks like at a high level there's definitely a ton more services that we offer that you would probably want to use as part of your overall",
    "start": "1474320",
    "end": "1481039"
  },
  {
    "text": "application architecture but these are really going to be kind of the core services that you're going to have to look at and think about and choose",
    "start": "1481039",
    "end": "1487360"
  },
  {
    "text": "between if you do want to run sort of a managed container environment on top of aws",
    "start": "1487360",
    "end": "1494080"
  },
  {
    "text": "so you can see we have a couple of different options starting at the top in terms of kind of the orchestration engine that actual management plane for",
    "start": "1494080",
    "end": "1500880"
  },
  {
    "text": "your containerized applications our two primary managed services there are going to be amazon elastic container service",
    "start": "1500880",
    "end": "1507120"
  },
  {
    "text": "or amazon ecs as well as amazon elastic container service for kubernetes or",
    "start": "1507120",
    "end": "1512159"
  },
  {
    "text": "amazon eks we'll talk about both of those more but really just keep in mind those are meant to be the control plane",
    "start": "1512159",
    "end": "1518799"
  },
  {
    "text": "for your containers right so those are handling the deployment of your containers scheduling your containers to",
    "start": "1518799",
    "end": "1524000"
  },
  {
    "text": "run and placing them on your fleet of compute resources that's running the actual containers themselves",
    "start": "1524000",
    "end": "1530480"
  },
  {
    "text": "so for the actual hosting environment of the containers basically what's actually going to be giving those",
    "start": "1530480",
    "end": "1535840"
  },
  {
    "text": "those containers their cpu and their memory we also have a couple options primary one being amazon elastic compute",
    "start": "1535840",
    "end": "1542480"
  },
  {
    "text": "cloud or ec2 who here has used or knows ec2 right i'm guessing most of you right",
    "start": "1542480",
    "end": "1547600"
  },
  {
    "text": "so that's kind of um our service where you can spin up what we call ec2 instances which are really just virtual",
    "start": "1547600",
    "end": "1553520"
  },
  {
    "text": "machines in any different variety of types and sizes to suit virtually any",
    "start": "1553520",
    "end": "1558880"
  },
  {
    "text": "different kind of workload right so you can use ec2 to host your containers or you can also use aws fargate which we'll",
    "start": "1558880",
    "end": "1565840"
  },
  {
    "text": "talk more about but it's really just a serverless way to launch containers on demand",
    "start": "1565840",
    "end": "1571520"
  },
  {
    "text": "then last service we'll always mention with our container services is amazon elastic container registry or ecr which",
    "start": "1571520",
    "end": "1578080"
  },
  {
    "text": "is really just a managed container image repository",
    "start": "1578080",
    "end": "1583799"
  },
  {
    "text": "now all of these services they're all designed and built to give you a platform to run your containerized",
    "start": "1584799",
    "end": "1590799"
  },
  {
    "text": "applications on aws right and like david said we don't just want to be another place where you can",
    "start": "1590799",
    "end": "1596240"
  },
  {
    "text": "run containers we want to make aws the best place to run containers so we want to make it easy not just to get started",
    "start": "1596240",
    "end": "1602720"
  },
  {
    "text": "and to run a few containers but also easy to scale your applications out to hundreds and thousands of containers if",
    "start": "1602720",
    "end": "1608960"
  },
  {
    "text": "you need to all these services at the same time have a great native integrations with a",
    "start": "1608960",
    "end": "1614159"
  },
  {
    "text": "number of other aws services things you would expect like cloud watch cloudtrail iam vpcs load balancing",
    "start": "1614159",
    "end": "1621520"
  },
  {
    "text": "and they also pair very well with our continuous integration continuous deployment tools so you can build very",
    "start": "1621520",
    "end": "1626720"
  },
  {
    "text": "robust ci cd pipelines for your containerized applications",
    "start": "1626720",
    "end": "1631760"
  },
  {
    "text": "all this at the same time is still going to be built around kind of that core concept of docker and containers so",
    "start": "1631760",
    "end": "1636799"
  },
  {
    "text": "you're still getting all the benefits of containers when you use these services in terms of the portability that containers give you the control that you",
    "start": "1636799",
    "end": "1643440"
  },
  {
    "text": "have over your application when you run it in containers as well as that rich ecosystem of third party and partner",
    "start": "1643440",
    "end": "1648960"
  },
  {
    "text": "tools that have already developed around containers today",
    "start": "1648960",
    "end": "1654840"
  },
  {
    "text": "and you don't just have to take our word for it either the cloud native computing foundation actually did a study they",
    "start": "1655520",
    "end": "1661120"
  },
  {
    "text": "found that 63 percent of companies that are running container workloads run on aws today right so they're using",
    "start": "1661120",
    "end": "1668159"
  },
  {
    "text": "services like all the ones i just talked about and many more to run their containers and they're doing it for",
    "start": "1668159",
    "end": "1673200"
  },
  {
    "text": "everything from super small scale you know dev and test environments just playing around with it all the way up to",
    "start": "1673200",
    "end": "1678880"
  },
  {
    "text": "enterprise scale mission critical applications using those container services",
    "start": "1678880",
    "end": "1685120"
  },
  {
    "text": "so diving in now amazon elastic container service or amazon ecs this is our own container",
    "start": "1685200",
    "end": "1692000"
  },
  {
    "start": "1686000",
    "end": "1686000"
  },
  {
    "text": "orchestration service right so as a container orchestration service like dave mentioned before you know",
    "start": "1692000",
    "end": "1697840"
  },
  {
    "text": "running one container is easy but once you actually scale out to hundreds or thousands of containers you're definitely going to want some sort of",
    "start": "1697840",
    "end": "1703840"
  },
  {
    "text": "management engine in place which is really just going to act as that control plane that you can use to handle",
    "start": "1703840",
    "end": "1709279"
  },
  {
    "text": "container level networking as well as placing containers on your fleet of compute resources scheduling containers",
    "start": "1709279",
    "end": "1715840"
  },
  {
    "text": "to run at certain times in response to certain events while still giving you deep integration with the rest of the",
    "start": "1715840",
    "end": "1721919"
  },
  {
    "text": "aws platform so ecs it integrates with services like cloudwatch for metrics and",
    "start": "1721919",
    "end": "1726960"
  },
  {
    "text": "monitoring it integrates with our elastic load balancing service so you can load balance across several",
    "start": "1726960",
    "end": "1732080"
  },
  {
    "text": "containers running on ecs it also of course has an ecs cli so you",
    "start": "1732080",
    "end": "1738320"
  },
  {
    "text": "can interact with ecs via the command line you don't have to do everything via the console and like with a lot of aws services",
    "start": "1738320",
    "end": "1745840"
  },
  {
    "text": "ecs is also available in a number of regions all around the world so you can quickly deploy your containers globally",
    "start": "1745840",
    "end": "1752480"
  },
  {
    "text": "if you need to now an important thing to keep in mind",
    "start": "1752480",
    "end": "1758320"
  },
  {
    "text": "again is that ecs is just that control point it's just that management engine right so the ecs service itself is going",
    "start": "1758320",
    "end": "1765039"
  },
  {
    "text": "to be responsible for scheduling and orchestrating your containers and really just placing those containers on your",
    "start": "1765039",
    "end": "1770799"
  },
  {
    "text": "underlying fleet of compute resources so for that actual hosting of your containers i mentioned two options",
    "start": "1770799",
    "end": "1777360"
  },
  {
    "text": "before ec2 and fargate so talking about ec2 first each of these boxes at the bottom of the diagram could be an ec2",
    "start": "1777360",
    "end": "1784480"
  },
  {
    "text": "instance and you can provision an instance just like you would any other ec2 instance",
    "start": "1784480",
    "end": "1789600"
  },
  {
    "text": "and then you can add that instance to your ecs fleet or your ecs cluster and then once it's part of that that cluster",
    "start": "1789600",
    "end": "1795760"
  },
  {
    "text": "you can use ecs to actually place running containers onto that ec2 instance",
    "start": "1795760",
    "end": "1802240"
  },
  {
    "text": "and what's great about using ec2 instances is that it gives you a lot of flexibility and a lot of very",
    "start": "1802240",
    "end": "1807440"
  },
  {
    "text": "fine-grained control over the underlying infrastructure that's powering your containers so you choose the exact type",
    "start": "1807440",
    "end": "1813840"
  },
  {
    "text": "and size of ec2 instance you want to provision you can have an ec2 instance with the gpu if you need that you can get into",
    "start": "1813840",
    "end": "1820559"
  },
  {
    "text": "the operating system of that ec2 instance if you need to you also have the option of using ec2's various",
    "start": "1820559",
    "end": "1826320"
  },
  {
    "text": "pricing models whether you want to use on-demand reserved or spot instances but with that increased control does",
    "start": "1826320",
    "end": "1833440"
  },
  {
    "text": "come in increased burden as well so if you're using ec2 instances with ecs",
    "start": "1833440",
    "end": "1838799"
  },
  {
    "text": "you are still going to be responsible for managing the ec2 instance as well as the actual containers and developing",
    "start": "1838799",
    "end": "1844720"
  },
  {
    "text": "those containers so for the ec2 instance ultimately you're still going to be responsible for managing that operating",
    "start": "1844720",
    "end": "1850640"
  },
  {
    "text": "system as well as the docker and the ecs agent as well as any other various software and packages you might have on",
    "start": "1850640",
    "end": "1856799"
  },
  {
    "text": "that instance itself so with ec2 instances you're going to be responsible for patching and upgrading",
    "start": "1856799",
    "end": "1863600"
  },
  {
    "text": "that operating system of the instance the agents etc and you're also going to be responsible for making sure you properly scale your",
    "start": "1863600",
    "end": "1870640"
  },
  {
    "text": "fleet and have the proper amount of compute capacity with your ec2 instances to run and scale as many containers as",
    "start": "1870640",
    "end": "1877600"
  },
  {
    "text": "you need to on top of those ec2 instances so while ecs is giving you that nice",
    "start": "1877600",
    "end": "1884399"
  },
  {
    "text": "managed control plane you will still have a lot of control over the underlying compute infrastructure but",
    "start": "1884399",
    "end": "1889840"
  },
  {
    "text": "again you will have to manage a little bit more with ec2 and so we had a lot of customers who",
    "start": "1889840",
    "end": "1895679"
  },
  {
    "text": "said you know ecs and ec2 works great but i really don't need that much control",
    "start": "1895679",
    "end": "1902159"
  },
  {
    "text": "right and they basically said all i want to think about is the container itself and i don't need to be able to pick the",
    "start": "1902159",
    "end": "1907440"
  },
  {
    "text": "specific instance type and size i don't need all that flexibility and control i just want to worry about the container",
    "start": "1907440",
    "end": "1912559"
  },
  {
    "text": "and let you guys handle all the details and so that's where aws fargate comes in",
    "start": "1912559",
    "end": "1919440"
  },
  {
    "start": "1916000",
    "end": "1916000"
  },
  {
    "text": "so aws fargate like i mentioned before it's really our serverless way to launch containers where you can quickly launch",
    "start": "1919440",
    "end": "1925919"
  },
  {
    "text": "containers on demand without having to worry about the underlying infrastructure",
    "start": "1925919",
    "end": "1931120"
  },
  {
    "text": "so with fargate you basically just tell ecs i want to launch this container using fargate instead of launch it on my",
    "start": "1931120",
    "end": "1937919"
  },
  {
    "text": "ec2 instance and then the fargate service itself will automatically take care of the underlying infrastructure",
    "start": "1937919",
    "end": "1944240"
  },
  {
    "text": "the underlying compute resources that are powering that container so that means there's no infrastructure",
    "start": "1944240",
    "end": "1950000"
  },
  {
    "text": "for you to manage you can think about and manage everything at the container level directly that also means it's",
    "start": "1950000",
    "end": "1955919"
  },
  {
    "text": "really quick to launch new containers and easily scale your containers right because you don't have to worry about",
    "start": "1955919",
    "end": "1961039"
  },
  {
    "text": "having enough ec2 capacity or having the instances provisioned you can just say i want to launch this using fargate and",
    "start": "1961039",
    "end": "1967039"
  },
  {
    "text": "the service takes care of the rest it also has very effective pricing model where you pay based on how long the",
    "start": "1967039",
    "end": "1973440"
  },
  {
    "text": "container runs based on how much cpu and memory you requested for that container's task",
    "start": "1973440",
    "end": "1980720"
  },
  {
    "text": "so this really gives you kind of that fully managed experience again because you don't have ec2 instances to worry about",
    "start": "1981279",
    "end": "1988240"
  },
  {
    "text": "it's also automatically elastic because you can scale up and down seamlessly again without having to worry about",
    "start": "1988240",
    "end": "1994320"
  },
  {
    "text": "scaling your ec2 fleet itself and you're really only paying for what you use with aws fargate because you",
    "start": "1994320",
    "end": "2001440"
  },
  {
    "text": "don't have an ec2 instance that you might provision and be paying for but not actually running any containers on",
    "start": "2001440",
    "end": "2007039"
  },
  {
    "text": "you're only paying when you actually launch the containers and they're running with fargate and it still means it maintains deep",
    "start": "2007039",
    "end": "2013360"
  },
  {
    "text": "integration with the aws ecosystem services like vpc networking elastic load balancing iam cloudwatch cloudtrail",
    "start": "2013360",
    "end": "2021039"
  },
  {
    "text": "and others so by combining ecs with fargate like i",
    "start": "2021039",
    "end": "2026799"
  },
  {
    "text": "said you're really getting that fully managed experience where the control plane is going to be managed by the ecs",
    "start": "2026799",
    "end": "2032880"
  },
  {
    "text": "service and then the underlying compute infrastructure that's actually powering your containers is taken care of by",
    "start": "2032880",
    "end": "2038640"
  },
  {
    "text": "fargate and so all you have to worry about is building those container images and launching those containers",
    "start": "2038640",
    "end": "2044080"
  },
  {
    "text": "themselves so taking a step back now that we know",
    "start": "2044080",
    "end": "2049280"
  },
  {
    "start": "2047000",
    "end": "2047000"
  },
  {
    "text": "those two kind of options for ecs the the end-to-end workflow for ecs is going to look something like this",
    "start": "2049280",
    "end": "2055200"
  },
  {
    "text": "right so you are going to need to have some place to actually store your container images we'll talk a little bit more about amazon elastic container",
    "start": "2055200",
    "end": "2061440"
  },
  {
    "text": "registry but again that's really where you can store the images of your containers that you want to launch",
    "start": "2061440",
    "end": "2066800"
  },
  {
    "text": "then you'll have to create an amazon ecs cluster and then within that cluster you'll have to define what's called task and service",
    "start": "2066800",
    "end": "2074000"
  },
  {
    "text": "definitions and those are really just the mechanism through which you tell the ecs service i want to launch this",
    "start": "2074000",
    "end": "2080320"
  },
  {
    "text": "specific container image with this much cpu and memory with these specific network settings and all those other",
    "start": "2080320",
    "end": "2086079"
  },
  {
    "text": "kind of configuration details that the service needs to know and then once you have those definitions you can launch",
    "start": "2086079",
    "end": "2091760"
  },
  {
    "text": "running containers either onto ec2 instances or via aws fargate and then",
    "start": "2091760",
    "end": "2097920"
  },
  {
    "text": "once you have those running containers the ecs service will manage the container level in terms of",
    "start": "2097920",
    "end": "2104240"
  },
  {
    "text": "automatically scaling your containers and effectively placing them on your fleet of compute resources",
    "start": "2104240",
    "end": "2112079"
  },
  {
    "text": "now um the other service in terms of container management as opposed to ecs",
    "start": "2113119",
    "end": "2119119"
  },
  {
    "text": "is going to be amazon elastic container service for kubernetes or eks all right so dave touched on kubernetes",
    "start": "2119119",
    "end": "2125520"
  },
  {
    "text": "before it's a super popular open source container orchestration system and",
    "start": "2125520",
    "end": "2131280"
  },
  {
    "text": "with amazon eks as a container orchestration service it's really meant to solve a lot of the same problems that",
    "start": "2131280",
    "end": "2137520"
  },
  {
    "text": "ecs is built to solve right so doing container level networking placing containers scheduling containers scaling",
    "start": "2137520",
    "end": "2143760"
  },
  {
    "text": "containers but the key differentiator with eks versus ecs is that it is built",
    "start": "2143760",
    "end": "2149119"
  },
  {
    "text": "on 100 upstream kubernetes so that means that you can use the same kubernetes apis with eks you have access",
    "start": "2149119",
    "end": "2157119"
  },
  {
    "text": "to the same kubernetes ecosystem and same kubernetes tooling that you would have if you were running kubernetes in",
    "start": "2157119",
    "end": "2162880"
  },
  {
    "text": "another environment today while at the same time still getting the",
    "start": "2162880",
    "end": "2168160"
  },
  {
    "text": "benefits of a managed control plane so the eks service itself will automatically provision and manage the",
    "start": "2168160",
    "end": "2174720"
  },
  {
    "text": "master nodes that are actually powering kubernetes behind the scenes",
    "start": "2174720",
    "end": "2179760"
  },
  {
    "text": "while also still giving you deep integration with other aws services again things like cloud watch vpc",
    "start": "2179760",
    "end": "2185839"
  },
  {
    "text": "networking load balancing things like that and again you don't just have to take",
    "start": "2185839",
    "end": "2192160"
  },
  {
    "text": "our word for it right in the same study by the cloud native computing foundation they found that 51",
    "start": "2192160",
    "end": "2197920"
  },
  {
    "text": "of companies running kubernetes run on aws so not just our customers choosing us",
    "start": "2197920",
    "end": "2203440"
  },
  {
    "text": "you know for ecs and fargate and our own native offerings are also choosing us for for managed kubernetes as well",
    "start": "2203440",
    "end": "2211200"
  },
  {
    "start": "2212000",
    "end": "2212000"
  },
  {
    "text": "so the workflow for eks is going to be um relatively similar to ecs right but",
    "start": "2212400",
    "end": "2218000"
  },
  {
    "text": "we're going to use kind of kubernetes specific uh terminology here right so the first thing you're going to have to do is provision an eks cluster again",
    "start": "2218000",
    "end": "2225440"
  },
  {
    "text": "when you do that the eks service will automatically manage the underlying masternodes that power eks",
    "start": "2225440",
    "end": "2232320"
  },
  {
    "text": "then you're going to have to deploy worker nodes and add those into your eks cluster",
    "start": "2232320",
    "end": "2237760"
  },
  {
    "text": "and those worker nodes again they are really going to be the actual compute infrastructure that powers the running",
    "start": "2237760",
    "end": "2242800"
  },
  {
    "text": "containers while the master nodes handle the control plane and the orchestration then you can connect to eks again",
    "start": "2242800",
    "end": "2249680"
  },
  {
    "text": "because it's built on kubernetes you can use the same kubernetes tooling that you might already be accustomed to and then",
    "start": "2249680",
    "end": "2255599"
  },
  {
    "text": "finally you can start launching your kubernetes applications",
    "start": "2255599",
    "end": "2260559"
  },
  {
    "start": "2261000",
    "end": "2261000"
  },
  {
    "text": "so if you're familiar with the architecture of kubernetes this is really what the servers is managing for you so with eks when you create a",
    "start": "2261680",
    "end": "2268560"
  },
  {
    "text": "cluster in eks the service itself is automatically going to provision and manage multiple masternodes",
    "start": "2268560",
    "end": "2274960"
  },
  {
    "text": "as well as the included at cd as part of that to power kubernetes and act as that control plane it's also automatically",
    "start": "2274960",
    "end": "2281599"
  },
  {
    "text": "going to provision and manage those across multiple availability zones within a region so you automatically",
    "start": "2281599",
    "end": "2287440"
  },
  {
    "text": "have a highly available control plane without having to set up or worry about provisioning that yourself",
    "start": "2287440",
    "end": "2292960"
  },
  {
    "text": "but you are still going to have to worry about in your own account again those worker nodes that are providing the actual compute capacity for the",
    "start": "2292960",
    "end": "2299440"
  },
  {
    "text": "containers so using eks you're going to create that cluster it'll give you a cluster",
    "start": "2299440",
    "end": "2305680"
  },
  {
    "text": "endpoint excuse me and then you'll actually add worker nodes to that cluster and again those",
    "start": "2305680",
    "end": "2311359"
  },
  {
    "text": "could be ec2 instances in your aws account we're going to recommend you spread those across availability zones and then",
    "start": "2311359",
    "end": "2317839"
  },
  {
    "text": "once you have that cluster created and ready to go you can connect to it again via your favorite kubernetes tooling",
    "start": "2317839",
    "end": "2323280"
  },
  {
    "text": "whether it's cube ctl whatever else it might be and start actually using that cluster to launch applications",
    "start": "2323280",
    "end": "2330800"
  },
  {
    "text": "now so you guys are probably wondering alright that's great that makes sense but how do i actually choose between",
    "start": "2330960",
    "end": "2336320"
  },
  {
    "text": "these options and so if you do want to run a managed container on aws there are going to be a",
    "start": "2336320",
    "end": "2342160"
  },
  {
    "text": "couple different choices that you have to make so first choice being which orchestration tool do i want to use",
    "start": "2342160",
    "end": "2347839"
  },
  {
    "text": "right and again our two managed services for that are going to be amazon ecs as well as amazon eks and really",
    "start": "2347839",
    "end": "2355200"
  },
  {
    "text": "one of the important things to keep in mind with that is that if you're already using kubernetes today in another",
    "start": "2355200",
    "end": "2360640"
  },
  {
    "text": "environment or on-prem or you have a very specific reason to use kubernetes and you want to be able to use existing",
    "start": "2360640",
    "end": "2366960"
  },
  {
    "text": "kubernetes tooling then you might want to gravitate towards eks but if you're not married to kubernetes",
    "start": "2366960",
    "end": "2373280"
  },
  {
    "text": "and you really just want a quicker more seamless way to get started then ecs might be the way to go simply because",
    "start": "2373280",
    "end": "2379200"
  },
  {
    "text": "ecs has been out as a service longer than eks so it's a little more mature",
    "start": "2379200",
    "end": "2384480"
  },
  {
    "text": "in the aws ecosystem and then another kind of key differentiator for that is that as you",
    "start": "2384480",
    "end": "2389839"
  },
  {
    "text": "guys can see on the slide fargate if you want to use fargate you will currently today have to use ecs but that is coming",
    "start": "2389839",
    "end": "2396240"
  },
  {
    "text": "soon for for eks as well so then once you have that orchestration tool selected you will then have to pick",
    "start": "2396240",
    "end": "2402720"
  },
  {
    "text": "the launch type again really the compute environment that's going to be running the containers themselves and so your options there again are",
    "start": "2402720",
    "end": "2409040"
  },
  {
    "text": "going to be amazon ec2 or aws fargate and so if you want really",
    "start": "2409040",
    "end": "2414960"
  },
  {
    "text": "you know a lot of control and you want the most flexibility out of the compute environment ec2 is going to be the way",
    "start": "2414960",
    "end": "2420240"
  },
  {
    "text": "to go because again you are explicitly selecting the ec2 instances that you want as part of your fleet but if you",
    "start": "2420240",
    "end": "2426160"
  },
  {
    "text": "want that more managed experience all you want to think about is the containers you don't want to worry about the underlying infrastructure fargate is",
    "start": "2426160",
    "end": "2432480"
  },
  {
    "text": "going to be the quicker way to get started",
    "start": "2432480",
    "end": "2436599"
  },
  {
    "start": "2439000",
    "end": "2439000"
  },
  {
    "text": "um now a couple other services to call out that you might use with these container services first one which i already mentioned amazon ecr or elastic",
    "start": "2439599",
    "end": "2446640"
  },
  {
    "text": "container registry again this is really just a managed container image repository",
    "start": "2446640",
    "end": "2452560"
  },
  {
    "text": "so it has deep integration with our container services with the ecs and eks it also integrates with the docker cli",
    "start": "2452560",
    "end": "2459200"
  },
  {
    "text": "so you can take a docker file build a container image from the cli and directly push that into amazon ecr and",
    "start": "2459200",
    "end": "2466640"
  },
  {
    "text": "then from ecr deploy it via ecs or eks and being a managed service is",
    "start": "2466640",
    "end": "2472240"
  },
  {
    "text": "automatically scalable and highly available for you",
    "start": "2472240",
    "end": "2476800"
  },
  {
    "text": "now you might use ecr as part of your ci cd pipeline obviously as a lot of customers and",
    "start": "2477599",
    "end": "2483520"
  },
  {
    "text": "companies are moving to adopt containers a lot of times that's part of a larger push to adopt devops and ci cd and move",
    "start": "2483520",
    "end": "2489280"
  },
  {
    "text": "to micro services right so if you want to build the cicd ci cicd pipeline on",
    "start": "2489280",
    "end": "2494560"
  },
  {
    "text": "aws you can use a number of different services right so in this example you",
    "start": "2494560",
    "end": "2499599"
  },
  {
    "text": "can use aws code pipeline to create the ci cd pipeline itself and orchestrate",
    "start": "2499599",
    "end": "2505040"
  },
  {
    "text": "all the different steps in that pipeline and then as the source step in that pipeline you might use aws code commit",
    "start": "2505040",
    "end": "2511920"
  },
  {
    "text": "which is our managed service for git based repositories so you can store your docker file all of your application",
    "start": "2511920",
    "end": "2517839"
  },
  {
    "text": "coding components in code commit and then whenever new code is committed to that code commit repository via aws code",
    "start": "2517839",
    "end": "2525760"
  },
  {
    "text": "pipeline that can automatically trigger aws code build to run and code build is our managed build",
    "start": "2525760",
    "end": "2532400"
  },
  {
    "text": "service where you can build your code without having to provision a server to do that",
    "start": "2532400",
    "end": "2537680"
  },
  {
    "text": "and so in code build you can have a job run that takes your source code from code commit takes that docker file",
    "start": "2537680",
    "end": "2543440"
  },
  {
    "text": "automatically builds that docker file into a container image and pushes that image into amazon ecr",
    "start": "2543440",
    "end": "2550960"
  },
  {
    "text": "and then once that code build job completes code pipeline will trigger ecs",
    "start": "2550960",
    "end": "2556000"
  },
  {
    "text": "to pull down that new container image from ecr and update your running application",
    "start": "2556000",
    "end": "2562560"
  },
  {
    "text": "so you can do this isn't exclusive to ecs either you can build a very similar pipeline with eks but again we have all",
    "start": "2562560",
    "end": "2568480"
  },
  {
    "text": "the tools and services there to help you build a very robust ci cd pipeline for these services",
    "start": "2568480",
    "end": "2576160"
  },
  {
    "start": "2576000",
    "end": "2576000"
  },
  {
    "text": "a couple newer services to point out as well for service mesh and discovery",
    "start": "2576720",
    "end": "2581839"
  },
  {
    "text": "that you might want to use with containers in your containerized application first one being aws app mesh",
    "start": "2581839",
    "end": "2588880"
  },
  {
    "text": "so this is a service mesh for application level networking and really it's designed to give you consistent",
    "start": "2588880",
    "end": "2596400"
  },
  {
    "text": "visibility and traffic control over services that are a part of your application that might be running in",
    "start": "2596400",
    "end": "2603040"
  },
  {
    "text": "different compute environments so it works across clusters and container services so you might have one",
    "start": "2603040",
    "end": "2608640"
  },
  {
    "text": "service running an ecs one in eks one running on ec2 but you can use appmesh",
    "start": "2608640",
    "end": "2614240"
  },
  {
    "text": "to kind of overlay all of those services and give you one place to have consistent visibility and traffic",
    "start": "2614240",
    "end": "2620319"
  },
  {
    "text": "controls over that variety of compute environments it is aw aws managed service so it's aws",
    "start": "2620319",
    "end": "2627760"
  },
  {
    "text": "built and run but it also uses the open source envoy proxy which means that it",
    "start": "2627760",
    "end": "2633200"
  },
  {
    "text": "integrates with a number of partner and third-party tools that also integrate with the envoy proxy",
    "start": "2633200",
    "end": "2640079"
  },
  {
    "text": "now for service discovery another newer service we have is aws cloud map and this is a managed cloud resource",
    "start": "2642720",
    "end": "2650000"
  },
  {
    "text": "discovery service and really what you can do in cloud map is you can create custom names for your",
    "start": "2650000",
    "end": "2656720"
  },
  {
    "text": "application resources whether it's a database or application servers or a queue or even an s3 bucket and then the",
    "start": "2656720",
    "end": "2662960"
  },
  {
    "text": "cloud map service itself will automatically track the most up-to-date healthy location of that resource so as",
    "start": "2662960",
    "end": "2670240"
  },
  {
    "text": "you might change versions of that resource as it might become unhealthy and get replaced cloud map will continue to map and track that custom name then",
    "start": "2670240",
    "end": "2677440"
  },
  {
    "text": "map it to the actual location of the resource so that every time one of those resources and that endpoint changes you",
    "start": "2677440",
    "end": "2683839"
  },
  {
    "text": "don't have to go back into your application code and change the endpoint that you have in your application code",
    "start": "2683839",
    "end": "2688880"
  },
  {
    "text": "you can instead just do all of your service discovery and naming via the cloud map service itself",
    "start": "2688880",
    "end": "2695440"
  },
  {
    "start": "2698000",
    "end": "2698000"
  },
  {
    "text": "now a final call out the aws marketplace for containers if you guys aren't familiar with our marketplace in general",
    "start": "2698160",
    "end": "2704960"
  },
  {
    "text": "it's really just an online uh software catalog where um our partners and third parties can list",
    "start": "2704960",
    "end": "2711040"
  },
  {
    "text": "different software offerings um you know some of the offerings might be pre-configured amazon machine images",
    "start": "2711040",
    "end": "2716880"
  },
  {
    "text": "some of them might even be client applications or sas subscriptions but with the marketplace you can quickly",
    "start": "2716880",
    "end": "2723760"
  },
  {
    "text": "search for procure and deploy these software packages and it's all",
    "start": "2723760",
    "end": "2728960"
  },
  {
    "text": "integrated with your aws bill so it just goes on to your aws bill at the end of the month and what's really exciting about the",
    "start": "2728960",
    "end": "2734880"
  },
  {
    "text": "marketplace for containers is that we're now adding or we have added docker compliant containers as a new",
    "start": "2734880",
    "end": "2740480"
  },
  {
    "text": "fulfillment option on the marketplace so that means that sellers can create you know a custom container image and",
    "start": "2740480",
    "end": "2747040"
  },
  {
    "text": "then we can ingest and scan that into the marketplace so that if you are using some sort of",
    "start": "2747040",
    "end": "2752160"
  },
  {
    "text": "third party or partner tool that runs in a container and if they have it published on the marketplace you can",
    "start": "2752160",
    "end": "2757520"
  },
  {
    "text": "just go search on the marketplace find that container and quickly deploy it directly to ecs or eks within your own",
    "start": "2757520",
    "end": "2764480"
  },
  {
    "text": "account and again it's still just integrated with your aws bill and a lot of the marketplace listings have",
    "start": "2764480",
    "end": "2769920"
  },
  {
    "text": "different pricing models as well so some of them might be free some of them might have a free tier there might be byol",
    "start": "2769920",
    "end": "2777160"
  },
  {
    "text": "[Applause] or some of them might have usage based pricing where you're paying by the hour",
    "start": "2777160",
    "end": "2782720"
  },
  {
    "text": "for it as well um so now what's next right i know we",
    "start": "2782720",
    "end": "2788960"
  },
  {
    "text": "went over a ton of different services and information today i don't expect anyone to be an expert in any of this by",
    "start": "2788960",
    "end": "2794880"
  },
  {
    "text": "any means hopefully you guys just have a good idea of what services to go look at and start researching and playing with",
    "start": "2794880",
    "end": "2800640"
  },
  {
    "text": "um so first off next if you guys want to learn more about containers here at the summit we do have more sessions going on",
    "start": "2800640",
    "end": "2807200"
  },
  {
    "text": "i know there's a few tomorrow if you search in the app you should be able to find them we have one dedicated to ci cd",
    "start": "2807200",
    "end": "2812560"
  },
  {
    "text": "with containers one dedicated to the elastic container service for kubernetes we also have a chalk talk dedicated to",
    "start": "2812560",
    "end": "2818960"
  },
  {
    "text": "container security as well as a couple of other sessions but some other resources to point out is",
    "start": "2818960",
    "end": "2824960"
  },
  {
    "start": "2823000",
    "end": "2823000"
  },
  {
    "text": "um our containers on aws web page that has a links to a bunch of great resources",
    "start": "2824960",
    "end": "2830640"
  },
  {
    "text": "as with any other aws services we have a ton of documentation for all of our container services as well as a bunch of",
    "start": "2830640",
    "end": "2836560"
  },
  {
    "text": "blogs that have to do with containers everything from technical how to's to use cases to case studies",
    "start": "2836560",
    "end": "2842480"
  },
  {
    "text": "then we also have a ton of videos from past summits like this from re invent from webinars that dive a lot deeper",
    "start": "2842480",
    "end": "2849359"
  },
  {
    "text": "into some specific services",
    "start": "2849359",
    "end": "2852880"
  },
  {
    "text": "a couple workshops i also want to point out are the ecs and eksworkshop.com these were actually developed by brent",
    "start": "2854720",
    "end": "2860880"
  },
  {
    "text": "langston who's a developer advocate here at amazon web services and these are great if you want kind of a guided",
    "start": "2860880",
    "end": "2867440"
  },
  {
    "text": "you know hands-on tour through ecs and eks or if you just want to check it out to see what that workflow looks like end",
    "start": "2867440",
    "end": "2873920"
  },
  {
    "text": "to end highly recommend these as well as the awesome ecs project which",
    "start": "2873920",
    "end": "2880000"
  },
  {
    "text": "is uh published by nathan peck he's another developer advocate here at aws and this is really just a curated list",
    "start": "2880000",
    "end": "2886480"
  },
  {
    "text": "of resources and tools and guides for our container services so this is great to bookmark and reference as you",
    "start": "2886480",
    "end": "2893280"
  },
  {
    "text": "kind of go on your journey of learning more about containers on aws",
    "start": "2893280",
    "end": "2898640"
  },
  {
    "text": "otherwise that's all we've got for you uh dave and i will be out in the hallway for questions after this",
    "start": "2899599",
    "end": "2904960"
  },
  {
    "text": "um but thank you so much again for choosing us to kick off your 2019 public sector summit and uh please enjoy the",
    "start": "2904960",
    "end": "2910559"
  },
  {
    "text": "rest of your time here in dc you",
    "start": "2910559",
    "end": "2916960"
  }
]