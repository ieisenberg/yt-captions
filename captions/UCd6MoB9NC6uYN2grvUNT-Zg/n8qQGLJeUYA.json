[
  {
    "start": "0",
    "end": "145000"
  },
  {
    "text": "good afternoon everyone thank you very much for joining us today my name is Alex Smith I uh take care of media and",
    "start": "520",
    "end": "7080"
  },
  {
    "text": "entertainment Solutions architecture for Amazon web services Asia Pacific and",
    "start": "7080",
    "end": "12200"
  },
  {
    "text": "with me today I have harvo Jones a senior software development engineer for the Amazon cloudfront",
    "start": "12200",
    "end": "17960"
  },
  {
    "text": "service today we're going to be talking about some of the design patterns that we learned while building Amazon",
    "start": "17960",
    "end": "24160"
  },
  {
    "text": "cloudfront and how you in your platforms on AWS can use those same techniques",
    "start": "24160",
    "end": "30439"
  },
  {
    "text": "those same approaches to build highly available Services",
    "start": "30439",
    "end": "36399"
  },
  {
    "text": "however before we get started I really want to set the context of what a Content delivery network is and who",
    "start": "36399",
    "end": "42440"
  },
  {
    "text": "better than harvo who has actually been key in building one to do that so I'll let him kick off great thanks um so",
    "start": "42440",
    "end": "50680"
  },
  {
    "text": "before diving into lessons we've learned while building cloudfront it would probably help to Define what it is as as",
    "start": "50680",
    "end": "56600"
  },
  {
    "text": "Alex said so cloudfront is a Content delivery Network content distribution Network known as a as a CDN and what we",
    "start": "56600",
    "end": "64080"
  },
  {
    "text": "do is essentially we make the internet faster for the folks who use it and uh we do this with what we call points of",
    "start": "64080",
    "end": "70600"
  },
  {
    "text": "presence or cloudfront pops for short each of these pops is a location into",
    "start": "70600",
    "end": "76720"
  },
  {
    "text": "which we've deployed cloudfront infrastructure and with these pops we bring TCP connectivity closer to to to",
    "start": "76720",
    "end": "84880"
  },
  {
    "text": "uh internet users to viewing customers we reduce latency between them and our sites",
    "start": "84880",
    "end": "90479"
  },
  {
    "text": "and with the uh with the large caches we've deployed to these sites we're able to reduce overall delivery time uh and",
    "start": "90479",
    "end": "96159"
  },
  {
    "text": "we also have persistent connections back to Origins and optimized Network paths which allow us to reduce the time to",
    "start": "96159",
    "end": "102159"
  },
  {
    "text": "fetch content a new and so with these pops what we're able to do is we service viewing",
    "start": "102159",
    "end": "108119"
  },
  {
    "text": "customers on behalf of our publishing",
    "start": "108119",
    "end": "112360"
  },
  {
    "text": "customers yep we're all good so we service viewing customers on behalf of our publishing customers so what would",
    "start": "115560",
    "end": "122600"
  },
  {
    "text": "help is I think if we're able to zoom in into one of these cloudfront pops and",
    "start": "122600",
    "end": "128720"
  },
  {
    "text": "get a sense for how it's put together how it works under the hood um and that'll clue us into points of",
    "start": "128720",
    "end": "135160"
  },
  {
    "text": "availability risk that our service might face and that will help us understand the types of lessons that we've learned",
    "start": "135160",
    "end": "140720"
  },
  {
    "text": "in in building these cloudfront pops so if we zoom into one of these a",
    "start": "140720",
    "end": "147080"
  },
  {
    "start": "145000",
    "end": "145000"
  },
  {
    "text": "cloudfront pop the first thing that we see is we need network connectivity right so we have viewing customers who",
    "start": "147080",
    "end": "154319"
  },
  {
    "text": "want to submit requests to our cloud from Pops those requests have to reach us and then our replies have to reach",
    "start": "154319",
    "end": "160280"
  },
  {
    "text": "them so from each of these clock fromont pops we have this connectivity to other",
    "start": "160280",
    "end": "165560"
  },
  {
    "text": "networks and we'll go ahead and send out um route announcements uh containing our",
    "start": "165560",
    "end": "170760"
  },
  {
    "text": "IP space the IP space owned by each of these cloudfront points of presence um",
    "start": "170760",
    "end": "176480"
  },
  {
    "text": "so those announcements they tell the routers that we're connected to this is the uh the space owned by this pop and",
    "start": "176480",
    "end": "181879"
  },
  {
    "text": "then that message is propagated outward to all the routers between viewer networks and our own pops so a viewer",
    "start": "181879",
    "end": "188480"
  },
  {
    "text": "places a packet on The Wire destined for an address that that we own all routers along the path understand how to route",
    "start": "188480",
    "end": "195319"
  },
  {
    "text": "that packet and as you can see our availability is completely tied to these",
    "start": "195319",
    "end": "201360"
  },
  {
    "text": "Network providers and we want to avoid single points of failure so what we need is we need",
    "start": "201360",
    "end": "209080"
  },
  {
    "text": "connections to multiple providers to give us that redundancy um and of course that also",
    "start": "209080",
    "end": "215360"
  },
  {
    "text": "gives us the capacity to meet the the throughput needs of our",
    "start": "215360",
    "end": "220720"
  },
  {
    "text": "customers so if we zoom in a little closer we can peek a bit deeper under the hood we can get a better sense of",
    "start": "220720",
    "end": "227239"
  },
  {
    "text": "how a clock front pop is built what we see next is let's consider",
    "start": "227239",
    "end": "233400"
  },
  {
    "start": "231000",
    "end": "231000"
  },
  {
    "text": "a viewing customer who's using some web property say example.com the first thing",
    "start": "233400",
    "end": "239040"
  },
  {
    "text": "their application is going to need to do is translate that domain name into an IP address so that application will place a",
    "start": "239040",
    "end": "245159"
  },
  {
    "text": "DNS query onto the wire and eventually that query would reach a cloudfront name server one of our DNS",
    "start": "245159",
    "end": "252760"
  },
  {
    "text": "applications each of our DNS applications understands which of those many cloudfront pops is best suited to",
    "start": "252760",
    "end": "259759"
  },
  {
    "text": "service that viewing customer so we'll go ahead and we'll select IP addresses that belong to that",
    "start": "259759",
    "end": "265080"
  },
  {
    "text": "pop and we'll hand those back in the DNS reply that reply makes it it's why all",
    "start": "265080",
    "end": "270120"
  },
  {
    "text": "the way back to that viewer's application so then that viewer is able",
    "start": "270120",
    "end": "275919"
  },
  {
    "text": "to establish a connection with the uh with the cloudfront cash hosts the cloudfront pop that own that IP",
    "start": "275919",
    "end": "284600"
  },
  {
    "text": "address so you can imagine these internals being a series of cloud cash",
    "start": "284919",
    "end": "290880"
  },
  {
    "text": "hosts and we'll service that request their HTTP request um using the contents",
    "start": "290880",
    "end": "296560"
  },
  {
    "text": "of our cache and if we don't have that content in cach we we go ahead and fetch it from the origin a",
    "start": "296560",
    "end": "302039"
  },
  {
    "text": "new yeah this clicker isn't working no we'll just continue it's okay so we'll fetch it from the origin a new over our",
    "start": "302039",
    "end": "308240"
  },
  {
    "text": "persistent connections and we'll go ahead and see at our cache so in a nut in in a nutshell",
    "start": "308240",
    "end": "314759"
  },
  {
    "text": "that's kind of a a simplistic view of what a cloud fromont pop is made of there you",
    "start": "314759",
    "end": "320080"
  },
  {
    "text": "go so we have we have network connectivity we have DNS applications we have HTTP",
    "start": "320080",
    "end": "326199"
  },
  {
    "text": "applications and with that we run our service",
    "start": "326199",
    "end": "331440"
  },
  {
    "text": "you ready yep go for it all right so if we have a sense of what",
    "start": "332199",
    "end": "339800"
  },
  {
    "text": "cloudfront is we kind of have a sense for for how it's built under the hood if",
    "start": "339800",
    "end": "346080"
  },
  {
    "text": "we want to get to lessons that we've learned in maintaining availability we probably want to get a understanding of",
    "start": "346080",
    "end": "351360"
  },
  {
    "text": "what availability is and how we monitor it so availability is essentially your",
    "start": "351360",
    "end": "358759"
  },
  {
    "text": "customer's ability to use your service right so for cloudfront that can translate into let's see collaboration",
    "start": "358759",
    "end": "365759"
  },
  {
    "text": "amongst researchers or successful sales for merchants or maybe it's you sitting",
    "start": "365759",
    "end": "370919"
  },
  {
    "text": "in your on your living room sofa at the end of the day streaming your your favorite TV show and so all these use",
    "start": "370919",
    "end": "377120"
  },
  {
    "text": "cases they translate into the successful delivery of lots and lots of bits just continually delivering",
    "start": "377120",
    "end": "383479"
  },
  {
    "text": "bits so we'll want some sort of monitoring ability that tells us um",
    "start": "383479",
    "end": "389160"
  },
  {
    "text": "gives us a sense of our success at delivering these bits so that we know we're meeting our availability",
    "start": "389160",
    "end": "395479"
  },
  {
    "text": "goals so let's see what's available to us the first thing that we have the",
    "start": "395479",
    "end": "401880"
  },
  {
    "start": "398000",
    "end": "398000"
  },
  {
    "text": "first things that we have are serers side logs we have logs from uh the our",
    "start": "401880",
    "end": "407360"
  },
  {
    "text": "DNS applications our HTTP applications and we can mine these logs to to",
    "start": "407360",
    "end": "413840"
  },
  {
    "text": "generate statistics from them such as the request rate that we're serving to certain viewers or the the throughput",
    "start": "413840",
    "end": "421160"
  },
  {
    "text": "that viewers are are uh getting from our service the the error rate that they're experiencing so we can collect all these",
    "start": "421160",
    "end": "428080"
  },
  {
    "text": "stats together and build up a sense of our availability we also have canaries that",
    "start": "428080",
    "end": "434440"
  },
  {
    "text": "we built so you can think of a a bird in a cage that you take down into a coal mine right you want to make sure it's",
    "start": "434440",
    "end": "441039"
  },
  {
    "text": "still alive to tell you that there's there's no gas leak so similarly these canaries that we've built and deployed they give us an",
    "start": "441039",
    "end": "448319"
  },
  {
    "text": "indication uh into problems with our service and they they use our service",
    "start": "448319",
    "end": "454479"
  },
  {
    "text": "the way that customers do um DNS queries hdtp queries downloading content they'll",
    "start": "454479",
    "end": "460039"
  },
  {
    "text": "tell us when our service is experiencing problems but really they give us a",
    "start": "460039",
    "end": "465240"
  },
  {
    "text": "general sense of the reachability of our service not comprehensive because we haven't personally deployed these",
    "start": "465240",
    "end": "471520"
  },
  {
    "text": "canaries um amongst all the viewer networks that are actually using cloudfront so in addition to these",
    "start": "471520",
    "end": "478280"
  },
  {
    "text": "canaras that give us that General sense of availability we also want that comprehensive sense and we turn to third",
    "start": "478280",
    "end": "485199"
  },
  {
    "text": "party systems we turn to third party systems that perform HTTP tests globally from the thousands of your networks that",
    "start": "485199",
    "end": "491599"
  },
  {
    "text": "use us so with all these with all these stats available to us we're able to",
    "start": "491599",
    "end": "497039"
  },
  {
    "text": "collect them together and provide metrics to our operators that they look at on a on a daily basis um and we can",
    "start": "497039",
    "end": "504960"
  },
  {
    "text": "place alarms on these metrics uh in this case we see tricks that we can uh we can",
    "start": "504960",
    "end": "511720"
  },
  {
    "text": "categorize in whichever way we wish such as B region in this case and we're seeing a percentage of cloudfront",
    "start": "511720",
    "end": "517959"
  },
  {
    "text": "availability a percentage of requests that were successful from each region from from Asia Australia Europe and so",
    "start": "517959",
    "end": "527160"
  },
  {
    "text": "forth so if we have a sense for what cloudfront is and and how how it's built",
    "start": "527160",
    "end": "534600"
  },
  {
    "text": "and how we monitor availability the stage is probably set for us to start getting into into the types of uh things",
    "start": "534600",
    "end": "541120"
  },
  {
    "text": "that pose risk to our to our availability to try to then Garner some",
    "start": "541120",
    "end": "546160"
  },
  {
    "text": "some lessons that we've learned so let's start with an actual",
    "start": "546160",
    "end": "551760"
  },
  {
    "start": "547000",
    "end": "547000"
  },
  {
    "text": "Interruption to Cloud availability so this here is a a real",
    "start": "551760",
    "end": "558440"
  },
  {
    "start": "557000",
    "end": "557000"
  },
  {
    "text": "world example that we experienced what we're looking at is a a code snippet from our DNS application",
    "start": "558440",
    "end": "565200"
  },
  {
    "text": "that led to our application uh crashing so there's a certain type of DNS query",
    "start": "565200",
    "end": "570880"
  },
  {
    "text": "that led to the domain name being passed into this function as null which led to",
    "start": "570880",
    "end": "576959"
  },
  {
    "text": "line 32 attempting to dereference This n pointer leading to a seg",
    "start": "576959",
    "end": "583079"
  },
  {
    "text": "fault so that's an access violation so our application would crash and come back up and this certain type of query",
    "start": "583079",
    "end": "591120"
  },
  {
    "text": "that was tripping this poisonous cath was continually being sent to a number",
    "start": "591120",
    "end": "596160"
  },
  {
    "text": "of our servers so each time they received it they would crash again go down and come back",
    "start": "596160",
    "end": "601240"
  },
  {
    "text": "up so that's an an obvious lack of validation of external input which led",
    "start": "601240",
    "end": "607600"
  },
  {
    "text": "to this this repeated crashing of our processes so if we take this this",
    "start": "607600",
    "end": "614320"
  },
  {
    "text": "experience and try to run a thought experiment across other portions of our service where else might we be",
    "start": "614320",
    "end": "620760"
  },
  {
    "text": "vulnerable to these uh to lack of validation that causes application",
    "start": "620760",
    "end": "625800"
  },
  {
    "text": "failure to this to to case to changes and external state that might trip these",
    "start": "625800",
    "end": "631240"
  },
  {
    "text": "poisonous code paths so let's look at our uh our diagram of the one of our Cloud fromont",
    "start": "631240",
    "end": "637639"
  },
  {
    "start": "633000",
    "end": "633000"
  },
  {
    "text": "pops again the first touch point is the one that we just called out external queries",
    "start": "637639",
    "end": "645000"
  },
  {
    "text": "arriving from resolvers right if those queries are formed in such a way that they get past our validation checks they",
    "start": "645000",
    "end": "650959"
  },
  {
    "text": "could trip that poisonous code path again the next obvious one would be HTTP",
    "start": "650959",
    "end": "657240"
  },
  {
    "text": "requests that we receive from our viewers similar thing could happen there uh well of course there are also",
    "start": "657240",
    "end": "664320"
  },
  {
    "text": "the HTTP replies that we receive from Origins these various touch points where",
    "start": "664320",
    "end": "670200"
  },
  {
    "text": "we have to make sure that external input is validated so we don't trip these poisonous code paths caused by software",
    "start": "670200",
    "end": "677440"
  },
  {
    "text": "bugs well that's not it there's there are also other sources of input there's the configuration that we",
    "start": "677440",
    "end": "683880"
  },
  {
    "text": "ourselves deliver to our applications we deliver configuration to our gns",
    "start": "683880",
    "end": "688920"
  },
  {
    "text": "application telling them here's a brand new domain name that you should start handing out answers for um we'll also",
    "start": "688920",
    "end": "696000"
  },
  {
    "text": "deliver configuration to our HTTP applications telling them here's a new origin over here that you should start",
    "start": "696000",
    "end": "701320"
  },
  {
    "text": "fetching content from so perhaps that configuration is corrupted or missing which could impair",
    "start": "701320",
    "end": "707399"
  },
  {
    "text": "our service or on the flip side maybe the ingestion of that configuration also",
    "start": "707399",
    "end": "712519"
  },
  {
    "text": "trips a poisonous code path so we have two more red flags there um why stop there what about",
    "start": "712519",
    "end": "719480"
  },
  {
    "text": "certain points in time I don't know maybe the the clock ticks over to February 29th and your application",
    "start": "719480",
    "end": "725440"
  },
  {
    "text": "wasn't coded to handle leap years or maybe we take over to 2017 and your SSL",
    "start": "725440",
    "end": "731200"
  },
  {
    "text": "search across your entire fleet expired in 2016 another red flag right there um in",
    "start": "731200",
    "end": "738000"
  },
  {
    "text": "addition to points in time what about spans of time what if you uh for some reason deploy your your service to every",
    "start": "738000",
    "end": "744160"
  },
  {
    "text": "single host in your Fleet all at the same time but with a memory leak",
    "start": "744160",
    "end": "749440"
  },
  {
    "text": "then you have this this limited resource that's becoming that's depleting at the same rate across every host at some",
    "start": "749440",
    "end": "756360"
  },
  {
    "text": "point in time you'll reach that point of depletion we end up with a lot of red",
    "start": "756360",
    "end": "763320"
  },
  {
    "text": "flags and so we saw this on the cloudfront team and we kind of wanted to get our head around sort of a",
    "start": "763320",
    "end": "770279"
  },
  {
    "text": "comprehensive way to to address this um a way that that would help us prioritize",
    "start": "770279",
    "end": "775639"
  },
  {
    "text": "the highest risks in our service so we can address them in that priority order what we did we we came up with",
    "start": "775639",
    "end": "782440"
  },
  {
    "start": "782000",
    "end": "782000"
  },
  {
    "text": "this bucketization of types of risks to our service um these categories kind of",
    "start": "782440",
    "end": "787519"
  },
  {
    "text": "work for our service maybe they're different for your for your service what we have at the top here are",
    "start": "787519",
    "end": "793079"
  },
  {
    "text": "software bugs you know defects that we introduce ourselves there's also the case of data",
    "start": "793079",
    "end": "798680"
  },
  {
    "text": "corruption corruption that our system relies on to service our customers or data that may uh whose ingestion May",
    "start": "798680",
    "end": "805880"
  },
  {
    "text": "trip poisonous code paths we also have services that we depend upon right if those Services go",
    "start": "805880",
    "end": "813240"
  },
  {
    "text": "down that might that may impair our availability we kind of saw one of those earlier with um the the network",
    "start": "813240",
    "end": "819160"
  },
  {
    "text": "connectivity that we require from each pop there are also time bombs specific",
    "start": "819160",
    "end": "825160"
  },
  {
    "text": "points in time or spans of time that can lead to to an impairment of our",
    "start": "825160",
    "end": "831120"
  },
  {
    "text": "availability and in another cases surges and volume these rapid unanticipated",
    "start": "831120",
    "end": "837040"
  },
  {
    "text": "surges and volume that create hotpots within our system and impair our ability to service other",
    "start": "837040",
    "end": "844519"
  },
  {
    "text": "customers so we want to touch on some of the patterns that we've applied in our learnings to try to try to mitigate the",
    "start": "844519",
    "end": "850120"
  },
  {
    "text": "risks in each of these areas um before I do that I wanted to share",
    "start": "850120",
    "end": "856959"
  },
  {
    "start": "854000",
    "end": "854000"
  },
  {
    "text": "this with you so what we're looking at here is the rate of new feature releases from the",
    "start": "856959",
    "end": "864519"
  },
  {
    "text": "cloudfront service over the years these are features that were we announced publicly where we've improved",
    "start": "864519",
    "end": "872079"
  },
  {
    "text": "the usability of cloudfront we've added new capabilities that didn't exist",
    "start": "872079",
    "end": "878079"
  },
  {
    "text": "before and the thing is none of the things that we're talking about today are on these lists um there's a lot of",
    "start": "878079",
    "end": "884720"
  },
  {
    "text": "work that goes on behind the scenes to keep our service available and it's not",
    "start": "884720",
    "end": "889839"
  },
  {
    "text": "something that always ends up as an announcement that we share with customers so it's it's great to be able",
    "start": "889839",
    "end": "895440"
  },
  {
    "text": "to to share some of this with you today so let let's get into some of these",
    "start": "895440",
    "end": "901800"
  },
  {
    "text": "patterns that that we've collected together things that you can um reuse in different ways to to mitigate",
    "start": "901800",
    "end": "910560"
  },
  {
    "start": "909000",
    "end": "909000"
  },
  {
    "text": "risks we'll cover the pattern of food tasting the idea there is uh validating",
    "start": "911759",
    "end": "918600"
  },
  {
    "text": "changes to State before they're delivered to your production applications we'll cover the idea of",
    "start": "918600",
    "end": "924720"
  },
  {
    "text": "handling flash crowds these unanticipated surges in volume that create hot spots in your",
    "start": "924720",
    "end": "931560"
  },
  {
    "text": "system um we'll cover strategies of uh defense in depth where we take these",
    "start": "931560",
    "end": "936959"
  },
  {
    "text": "patterns and we apply them together so that we have the benefit of all of them should should one of these",
    "start": "936959",
    "end": "942600"
  },
  {
    "text": "fail um and with defense and depth will cover ideas such as uh the multiple",
    "start": "942600",
    "end": "947839"
  },
  {
    "text": "implementation pattern where you have two separate implementations of your application which reduces the chance",
    "start": "947839",
    "end": "953560"
  },
  {
    "text": "that you have a the same software defect in both of them we'll cover ideas of a reduced in blast radius by whichever",
    "start": "953560",
    "end": "961120"
  },
  {
    "text": "Dimension is you deem important for your service such as if you want to reduce blast radius by the number of customers",
    "start": "961120",
    "end": "967880"
  },
  {
    "text": "affected maybe you have certain sets of processes that are all dedicated to one group of customers another set to the",
    "start": "967880",
    "end": "974399"
  },
  {
    "text": "next group of customers and so forth so when there's impact from a certain type of change in state or external input",
    "start": "974399",
    "end": "981959"
  },
  {
    "text": "that affects one nth of your Fleet instead of all of your Fleet and then we'll also cover uh the",
    "start": "981959",
    "end": "987639"
  },
  {
    "text": "Jitter pattern to help us mitigate these time",
    "start": "987639",
    "end": "992040"
  },
  {
    "start": "992000",
    "end": "992000"
  },
  {
    "text": "bombs so starting with flash crowds we're probably or sorry starting with a food",
    "start": "992759",
    "end": "998759"
  },
  {
    "text": "tasting um most of us are probably familiar with uh the story of a Kings of",
    "start": "998759",
    "end": "1004079"
  },
  {
    "text": "yor they had vile enemies and those those enemies wanted to poison them right so King is sitting in his dining",
    "start": "1004079",
    "end": "1010600"
  },
  {
    "text": "hall his food's coming down and he says wait a minute I'm not going to eat that just yet uh you Squire come over here",
    "start": "1010600",
    "end": "1017680"
  },
  {
    "text": "and you taste this food I'm going to watch you and make sure you don't Keel over if you don't I'm going to eat it um",
    "start": "1017680",
    "end": "1025480"
  },
  {
    "text": "I guess that doesn't really work in practice unless all poisons are all fast acting all the time um but for us in the",
    "start": "1025480",
    "end": "1032240"
  },
  {
    "text": "software World it kind of is applicable our our applications do react quickly to poisonous",
    "start": "1032240",
    "end": "1037760"
  },
  {
    "text": "input and this idea of food tasting it can apply to that category of software",
    "start": "1037760",
    "end": "1043959"
  },
  {
    "text": "bugs where you're trying to prevent these poisonous code paths from being tripped when changes of state are",
    "start": "1043959",
    "end": "1050400"
  },
  {
    "text": "introduced it can apply to that category of data corruption such as maybe your your food tasting validation has certain",
    "start": "1050400",
    "end": "1057440"
  },
  {
    "text": "expectations that wouldn't be meant if that data were corrupted so here's how we implemented",
    "start": "1057440",
    "end": "1064000"
  },
  {
    "text": "it on the the DNS portion of our service so initially we have our viewing customers whose DNS queries are landing",
    "start": "1064000",
    "end": "1070799"
  },
  {
    "text": "on our DNS processes and those processes are also ingesting changes to state from",
    "start": "1070799",
    "end": "1076559"
  },
  {
    "text": "configuration demons um so these changes to State could be things such as uh",
    "start": "1076559",
    "end": "1082559"
  },
  {
    "text": "there's a uh here's a brand new domain name that you should start handing out IP addresses for or uh there's a pop",
    "start": "1082559",
    "end": "1089320"
  },
  {
    "text": "that's out of service I want you to stop handing out IP addresses for that pop over there you know various changes in",
    "start": "1089320",
    "end": "1094559"
  },
  {
    "text": "state and of course those changes the ingestion of those changes could trick these poisonous code",
    "start": "1094559",
    "end": "1100159"
  },
  {
    "text": "paths so here's the the idea that we introduced a new policy that no application has the ability to touch our",
    "start": "1100159",
    "end": "1108120"
  },
  {
    "text": "viewer fa DNS application that process except for this orchestrator this orchestrator takes a",
    "start": "1108120",
    "end": "1114480"
  },
  {
    "text": "snapshot of all the changes that are being prepared to be delivered to our DNS instant and instead of feeding that",
    "start": "1114480",
    "end": "1120919"
  },
  {
    "text": "snapshot of changes straight to our DNS application the viewer facing one we feed it to a replica of that application",
    "start": "1120919",
    "end": "1126480"
  },
  {
    "text": "sitting right on the side we feed it those changes and then we flood it with queries thousands and thousands of",
    "start": "1126480",
    "end": "1132280"
  },
  {
    "text": "queries the same kinds of queries that our customers are using we'll validate that every query",
    "start": "1132280",
    "end": "1138799"
  },
  {
    "text": "exceeds they all result in valid IP addresses being handed back that the application never crashes if all that",
    "start": "1138799",
    "end": "1144960"
  },
  {
    "text": "passes then we take that snapshot and we deliver deliver it over to our King DNS",
    "start": "1144960",
    "end": "1152159"
  },
  {
    "text": "instance so there's a bit that goes on and in getting that to work but it's the idea is is kind of uh easy to to",
    "start": "1152159",
    "end": "1159480"
  },
  {
    "text": "communicate when we show that we imple implemented it basically with with the file system you have your your production",
    "start": "1159480",
    "end": "1166720"
  },
  {
    "text": "viewer facing DNS a root directory down there at the bottom and you have the food taster",
    "start": "1166720",
    "end": "1173280"
  },
  {
    "text": "directory which has Sim links right into that that production directory uh those",
    "start": "1173280",
    "end": "1178400"
  },
  {
    "text": "Sim links allow us to take let's say routing. dat is a new piece of uh new configuration change that came in we go",
    "start": "1178400",
    "end": "1185440"
  },
  {
    "text": "ahead and replace that one sim link with a new piece of data and there you have a snapshot of everything that you're about",
    "start": "1185440",
    "end": "1191559"
  },
  {
    "text": "to deliver to your your customer facing process so then we flood that uh food",
    "start": "1191559",
    "end": "1197520"
  },
  {
    "text": "Tas for instance with queries with that snapshot once they all validate we move routing. data on to the the production",
    "start": "1197520",
    "end": "1206200"
  },
  {
    "text": "directory and that's how we implemented food tasting on the DNS portion of our",
    "start": "1206200",
    "end": "1211360"
  },
  {
    "text": "service so if we take the same kind of approach within AWS um and really try to",
    "start": "1211360",
    "end": "1217039"
  },
  {
    "start": "1215000",
    "end": "1215000"
  },
  {
    "text": "keep it as straightforward as cloudfront did so I love the Simplicity with which they address quite a difficult problem",
    "start": "1217039",
    "end": "1223520"
  },
  {
    "text": "and within AWS if you think about the way that you handle deployments typically they're very inex expensive",
    "start": "1223520",
    "end": "1229720"
  },
  {
    "text": "you might take a cloud formation template and create a similar or like for likee environment or you may deploy",
    "start": "1229720",
    "end": "1235480"
  },
  {
    "text": "over the top one of the bonuses of course of having that like for- like environment is that the original is I",
    "start": "1235480",
    "end": "1240919"
  },
  {
    "text": "and potent it's unchanged however similar to using a staging",
    "start": "1240919",
    "end": "1246720"
  },
  {
    "text": "environment there are situations and conditions which cannot be accurately reproduced while you can in some ways",
    "start": "1246720",
    "end": "1254120"
  },
  {
    "text": "have staging load testing Etc there is nothing that is quite the same as production",
    "start": "1254120",
    "end": "1259559"
  },
  {
    "text": "traffic so let's take the example of doing a deployment over the top of our existing files um this might be a",
    "start": "1259559",
    "end": "1266320"
  },
  {
    "text": "dependent file it might be configuration or it might be the code itself and in this case I'm going to assume you're",
    "start": "1266320",
    "end": "1272640"
  },
  {
    "text": "using using Code deploy but the approach is pretty much the same across anything so the example file I'm talking",
    "start": "1272640",
    "end": "1279039"
  },
  {
    "text": "about here is a goip database these are in use in basically every application",
    "start": "1279039",
    "end": "1284240"
  },
  {
    "text": "you use today e-commerce for fraud video on demand for uh Rights Management all",
    "start": "1284240",
    "end": "1290880"
  },
  {
    "text": "in almost every application you will require some sort of goip resolution now typically these files are",
    "start": "1290880",
    "end": "1298360"
  },
  {
    "text": "updated on a weekly basis every Tuesday you'll have a Cron job that automatically pulls it down or",
    "start": "1298360",
    "end": "1303640"
  },
  {
    "text": "automatically pushes it up within that Cron job you may already have some sort of check some balance to validate that",
    "start": "1303640",
    "end": "1310279"
  },
  {
    "text": "the file you're receiving is accurate that it's acceptable for use a very common approach is just to take an md5",
    "start": "1310279",
    "end": "1316600"
  },
  {
    "text": "sum or something and validate that but as with everything there's a lot more to consider than simple invalid",
    "start": "1316600",
    "end": "1323760"
  },
  {
    "text": "user configuration there's things that we can't control let's say there is a a",
    "start": "1323760",
    "end": "1329600"
  },
  {
    "text": "you have 10,000 servers and all of them pull it down at the same time there's now a problem at the Upstream so half of",
    "start": "1329600",
    "end": "1335360"
  },
  {
    "text": "them get a broken file while this case will be caught by something like a check some validation what happens if this is",
    "start": "1335360",
    "end": "1342279"
  },
  {
    "text": "an externally provided file that externally provided file has a check sum that matches a zerob byte file",
    "start": "1342279",
    "end": "1349279"
  },
  {
    "text": "in this case we need to take an extra few steps and take a SIM similar approach to how Amazon cloudfront",
    "start": "1349279",
    "end": "1354880"
  },
  {
    "text": "addresses so again simple is better it works well on a file system basis for the Amazon cloudfront team and assuming",
    "start": "1354880",
    "end": "1361760"
  },
  {
    "text": "that we've got that code deploy uh in place we're using that what we'll do is we'll complete a set of",
    "start": "1361760",
    "end": "1368360"
  },
  {
    "text": "Institue tests very similar to the food taster before we consider an application",
    "start": "1368360",
    "end": "1373919"
  },
  {
    "text": "complete now if you're not familiar with code deploy it has the concept of an appsc file this has many hooks which can",
    "start": "1373919",
    "end": "1381320"
  },
  {
    "text": "be executed at different points during a deployment life cycle here I've identified two different areas that you",
    "start": "1381320",
    "end": "1388080"
  },
  {
    "text": "might want to use for instance an after install at this section just do your simple validations verify the check on",
    "start": "1388080",
    "end": "1395240"
  },
  {
    "text": "make sure the file is syntactically valid but then syntactically valid is often not enough complete functional",
    "start": "1395240",
    "end": "1402159"
  },
  {
    "text": "tests against the application itself using the the um application start hook",
    "start": "1402159",
    "end": "1407919"
  },
  {
    "text": "this allows you to very easily run tens of thousands of let's say DNS queries or goip queries very quickly against your",
    "start": "1407919",
    "end": "1415159"
  },
  {
    "text": "application and then once that's complete then return this acts as a very simple but",
    "start": "1415159",
    "end": "1420919"
  },
  {
    "text": "very effective quality grate and because code deploy supports automatic roll back you can do this without ever affecting",
    "start": "1420919",
    "end": "1427320"
  },
  {
    "text": "end user traffic because if you were in a situation where the end user was um",
    "start": "1427320",
    "end": "1432720"
  },
  {
    "text": "where they didn't have a goip database or you were missing any key file you would end up with an availability interruption",
    "start": "1432720",
    "end": "1438960"
  },
  {
    "text": "so the way we've implemented this validation prevents any of those interruptions and also means that the production traffic",
    "start": "1438960",
    "end": "1445640"
  },
  {
    "text": "can keep going against that production platform so the next lesson that we'll",
    "start": "1445640",
    "end": "1452600"
  },
  {
    "text": "highlight from from our learnings building cloudfront deal with handling flash crowds so these are the those",
    "start": "1452600",
    "end": "1460640"
  },
  {
    "text": "rapid surges in volume that were unanticipated and they create hotspots",
    "start": "1460640",
    "end": "1465760"
  },
  {
    "text": "within your system and impair your ability to to service other customers so we address these surgeons",
    "start": "1465760",
    "end": "1473480"
  },
  {
    "text": "in volume with different strategies for load dispersion uh we have a a static",
    "start": "1473480",
    "end": "1479480"
  },
  {
    "text": "strategy that we've learned to use and a dynamic strategy so let's start with showing the",
    "start": "1479480",
    "end": "1487559"
  },
  {
    "start": "1485000",
    "end": "1485000"
  },
  {
    "text": "problem what we see here are metrics from one of our cloudfront Pops each of those lines is represents the request",
    "start": "1487559",
    "end": "1494399"
  },
  {
    "text": "per second that a cloudfront host is is experiencing is receiving",
    "start": "1494399",
    "end": "1499520"
  },
  {
    "text": "so you can see during this rapid period this rapid surge in volume the request rate rises from one up to 15 times it's",
    "start": "1499520",
    "end": "1507120"
  },
  {
    "text": "it's normal it's steady state level and that's not occurring across the pup across all the hosts it's",
    "start": "1507120",
    "end": "1512919"
  },
  {
    "text": "occurring on a subset of hosts they would rise they become unhealthy and we",
    "start": "1512919",
    "end": "1518000"
  },
  {
    "text": "would move traffic to the next set of healthy hosts so the original ones would then fall in their request rate and then",
    "start": "1518000",
    "end": "1524320"
  },
  {
    "text": "the next batch would rise become unhealthy and fall again so we have these rapid Rises and Falls in fall uh",
    "start": "1524320",
    "end": "1530159"
  },
  {
    "text": "in traffic kind of a cascading failure within the",
    "start": "1530159",
    "end": "1535520"
  },
  {
    "text": "pop so what was going on here is we had a we had a customer who was um running",
    "start": "1535520",
    "end": "1540600"
  },
  {
    "text": "an an interactive event with a television program which involved a a small period of time where their viewers",
    "start": "1540600",
    "end": "1547640"
  },
  {
    "text": "would vote online and the popularity was so high that that voting online was involved",
    "start": "1547640",
    "end": "1553919"
  },
  {
    "text": "this large Surge and traffic and what what kind of makes it",
    "start": "1553919",
    "end": "1559320"
  },
  {
    "text": "difficult for for us to manage is that these surges the onset occurs too quickly for an operator to be able to to",
    "start": "1559320",
    "end": "1565960"
  },
  {
    "text": "react to um and even if we did have an operator online who's able to to try to",
    "start": "1565960",
    "end": "1571640"
  },
  {
    "text": "to mitigate the these surges and volumes the frequency of these types of events",
    "start": "1571640",
    "end": "1576840"
  },
  {
    "text": "they occur too frequently for our operators to to be able to react every time to",
    "start": "1576840",
    "end": "1582279"
  },
  {
    "text": "them so we needed some way to mitigate this type of uh situation and",
    "start": "1582279",
    "end": "1588919"
  },
  {
    "text": "one caveat I should mention is we enjoy reducing our cost so we can pass on savings to our customers so we hadn't",
    "start": "1588919",
    "end": "1596080"
  },
  {
    "text": "deployed high-end Hardware load balancers to help us in this case um so what we turn to uh there's a",
    "start": "1596080",
    "end": "1604919"
  },
  {
    "start": "1603000",
    "end": "1603000"
  },
  {
    "text": "static strategy and a more of a dynamic strategy that we're using to help us uh disperse load Within These pops and even",
    "start": "1604919",
    "end": "1611559"
  },
  {
    "text": "between pops uh the static strategy involves um configuration that's",
    "start": "1611559",
    "end": "1616919"
  },
  {
    "text": "available to us within our Network gear uh rers have this configuration that allows us to tell it for for packets",
    "start": "1616919",
    "end": "1624039"
  },
  {
    "text": "that are destined for a given address I want you to disperse those packets to n number of next",
    "start": "1624039",
    "end": "1629399"
  },
  {
    "text": "Toops um ecmp is what that configuration is called equal cost multipath and that",
    "start": "1629399",
    "end": "1635399"
  },
  {
    "text": "dispersion is done in a consistent manner so that packets for any TCP connection would consistently go to the",
    "start": "1635399",
    "end": "1641399"
  },
  {
    "text": "same next toop so we're not severing those connections so what that configuration does it it gives us a an even dispersal",
    "start": "1641399",
    "end": "1648679"
  },
  {
    "text": "of traffic in the steady state so it works a large number of times and in some cases it works when we have these",
    "start": "1648679",
    "end": "1654600"
  },
  {
    "text": "rapid surges in volume as well however there there are some customers whose whose volume is so high",
    "start": "1654600",
    "end": "1661000"
  },
  {
    "text": "that this static uh dispersal setup it it doesn't work it doesn't work for all",
    "start": "1661000",
    "end": "1667240"
  },
  {
    "text": "cases so for those scenarios we've developed a feedback system where we'll go ahead and we'll take a measurement of",
    "start": "1667240",
    "end": "1674399"
  },
  {
    "text": "the request rate we'll look at the highest and low load lowest loaded posts in our system if that disparity is large",
    "start": "1674399",
    "end": "1681240"
  },
  {
    "text": "enough we'll go ahead and we'll react to that disparity by making changes in our system we might change that fan out to",
    "start": "1681240",
    "end": "1688720"
  },
  {
    "text": "go ahead and shift some traffic toward the lowest loaded hosts um or other changes uh and we we've applied this",
    "start": "1688720",
    "end": "1696440"
  },
  {
    "text": "this mitigator this flash crowd mitigation to even help us with lad disparities that occur between sister",
    "start": "1696440",
    "end": "1702480"
  },
  {
    "text": "pops between sibling Pops that are right next to each other where one is is experiencing the load and the other isn't you take take a measurement and",
    "start": "1702480",
    "end": "1709240"
  },
  {
    "text": "then you go ahead and you react to that measurement by making changes that disperse",
    "start": "1709240",
    "end": "1714679"
  },
  {
    "text": "load so this has helped us and what I'll show next is here's the TCP connections",
    "start": "1714679",
    "end": "1722679"
  },
  {
    "start": "1720000",
    "end": "1720000"
  },
  {
    "text": "per host in a in a different uh pop which experienced a similar Surge",
    "start": "1722679",
    "end": "1727720"
  },
  {
    "text": "and traffic as we saw initially and initially we saw host rise surging 15 times above their their stady",
    "start": "1727720",
    "end": "1734960"
  },
  {
    "text": "state level in this case host surged two times above their state state level and",
    "start": "1734960",
    "end": "1740640"
  },
  {
    "text": "they did so in unison which is why that rise is so much lower because all sibling hosts are helping out to Bear",
    "start": "1740640",
    "end": "1747399"
  },
  {
    "text": "the brunt of that load so so one thing we're a fan of is",
    "start": "1747399",
    "end": "1752919"
  },
  {
    "text": "so we've automated that that feedback system to help us disperse this load and we're we're a big fan of ensuring that",
    "start": "1752919",
    "end": "1760399"
  },
  {
    "text": "um operators understand how to operate uh systems we we give them tools to to",
    "start": "1760399",
    "end": "1766679"
  },
  {
    "text": "make sure that before we automate something we really understand how to automate that so once we've learned uh",
    "start": "1766679",
    "end": "1773720"
  },
  {
    "text": "how to mitigate these manually we then automate it based on those learnings and we're able to take the human out of the",
    "start": "1773720",
    "end": "1779720"
  },
  {
    "text": "picture to sort of react to these surges in volume now for those of you who watched",
    "start": "1779720",
    "end": "1786039"
  },
  {
    "text": "uh James Hamilton's talk last night some of you may have picked up on something he said which is elastic is The New",
    "start": "1786039",
    "end": "1792200"
  },
  {
    "text": "Normal bit of a move from cloud as a new normal as we said a couple of years ago and undoubtedly the best bit about cloud",
    "start": "1792200",
    "end": "1798360"
  },
  {
    "text": "computing for many people is that elasticity the autoscaling the ability to rise and fall as traffic comes in and",
    "start": "1798360",
    "end": "1805159"
  },
  {
    "text": "autoscaling works very very well I'm not trying to suggest people don't use it however there are situations where you",
    "start": "1805159",
    "end": "1811320"
  },
  {
    "text": "have traffic which is simply very very large you go from 15",
    "start": "1811320",
    "end": "1816519"
  },
  {
    "text": "requests per second and then within a 45 second period you'll hit 130,000 requests per second and the problem is",
    "start": "1816519",
    "end": "1822919"
  },
  {
    "text": "that dealing with this kind of traffic is very scary because it there's no good way to deal with that kind of thing over",
    "start": "1822919",
    "end": "1829279"
  },
  {
    "text": "a 15 10 30 second period because often 60 seconds can be too long especially",
    "start": "1829279",
    "end": "1835960"
  },
  {
    "text": "when it comes down to the different use cases for this kind of traffic so my first approach to deal",
    "start": "1835960",
    "end": "1843080"
  },
  {
    "text": "with this is going to sound very non-technical and very silly but it is it is simply plan ahead because if you",
    "start": "1843080",
    "end": "1849360"
  },
  {
    "text": "think about the causes of this kind of traffic is quite a lot because it'll",
    "start": "1849360",
    "end": "1855200"
  },
  {
    "start": "1855000",
    "end": "1855000"
  },
  {
    "text": "typically come down to things like a TV program or a live event you releasing a",
    "start": "1855200",
    "end": "1860440"
  },
  {
    "text": "new game and all of these are not unexpected all of these are actually",
    "start": "1860440",
    "end": "1866320"
  },
  {
    "text": "problems with communication as opposed to technology if you think that TV is scheduled by random it's not there's a",
    "start": "1866320",
    "end": "1872760"
  },
  {
    "text": "process which goes in and there's often just a breakdown between the business units and the it or engineering teams so",
    "start": "1872760",
    "end": "1879000"
  },
  {
    "text": "platforms are improperly sized there's often a case of things like in the game release uh point of view or when I",
    "start": "1879000",
    "end": "1886559"
  },
  {
    "text": "release a new feature there's somebody who makes a business decision to release a new feature and we can integrate we",
    "start": "1886559",
    "end": "1893799"
  },
  {
    "text": "can understand that taking established traffic patterns they can also be planned around but are often not having",
    "start": "1893799",
    "end": "1900720"
  },
  {
    "text": "worked in online TV related media for the last 10 years or so I can say that",
    "start": "1900720",
    "end": "1906080"
  },
  {
    "text": "very frequently people will forget that there is a channel uh there is a big program on every Saturday night and",
    "start": "1906080",
    "end": "1912880"
  },
  {
    "text": "infrastructure is not appropriately sized to deal with that so within an AWS point of you how can we deal with this",
    "start": "1912880",
    "end": "1919840"
  },
  {
    "text": "well first of all if you are an AWS support user you can use awsem the infrastructure event management system",
    "start": "1919840",
    "end": "1926399"
  },
  {
    "text": "this is great for instance if you were launching something to Mars and wanted to make sure that it went perfectly they",
    "start": "1926399",
    "end": "1932320"
  },
  {
    "text": "set up a war room spend some time with you load testing all that kind of configuration piece ahead of",
    "start": "1932320",
    "end": "1938000"
  },
  {
    "text": "time but then thinking about this from a more automated and more technical point of view you can actually schedule those",
    "start": "1938000",
    "end": "1944000"
  },
  {
    "text": "autoscaling groups this is something that's often forgotten but if if you have a program that you know will appear",
    "start": "1944000",
    "end": "1949600"
  },
  {
    "text": "every Saturday or you have a particular traffic pattern that you know will grow a little too fast for autoscaling to",
    "start": "1949600",
    "end": "1954840"
  },
  {
    "text": "catch up but you know when it will come in you can schedule around those events and then finally and probably most",
    "start": "1954840",
    "end": "1961159"
  },
  {
    "text": "interesting for this is the idea of integrating autoscaling with your application with your business logic so",
    "start": "1961159",
    "end": "1968360"
  },
  {
    "start": "1968000",
    "end": "1968000"
  },
  {
    "text": "if you take the idea again of a TV program why not extend your scheduling",
    "start": "1968360",
    "end": "1974080"
  },
  {
    "text": "application add in a parameter that says autoscaling group add in the expected",
    "start": "1974080",
    "end": "1979240"
  },
  {
    "text": "audience size add in the expected engagement rate from that and use this",
    "start": "1979240",
    "end": "1984760"
  },
  {
    "text": "to make a decision to automatically autoscale your platform before anything happens and then allow it to scale down",
    "start": "1984760",
    "end": "1991360"
  },
  {
    "text": "naturally over time just through the normal criteria of autoscaling then if we think about the",
    "start": "1991360",
    "end": "1997200"
  },
  {
    "text": "example like the game if I have a game which is I'm just pushing out a new",
    "start": "1997200",
    "end": "2002639"
  },
  {
    "text": "feature internally if you log in with Facebook or SnapChat you have the option",
    "start": "2002639",
    "end": "2008200"
  },
  {
    "text": "then to receive a free item well when you send that notification to a million",
    "start": "2008200",
    "end": "2013799"
  },
  {
    "text": "users you have a rough idea of how many people are coming in so create a big red button make it such that when you press",
    "start": "2013799",
    "end": "2020760"
  },
  {
    "text": "go on a notification no notifications go out until your platform has been appropriately scaled to deal with that",
    "start": "2020760",
    "end": "2028360"
  },
  {
    "text": "now these are things that I've been using in my career but I tend to meet people that say I can't plan ahead",
    "start": "2028360",
    "end": "2033519"
  },
  {
    "text": "because my traffic could be viral and well it's a fair call there are certain",
    "start": "2033519",
    "end": "2038600"
  },
  {
    "text": "traffic patterns which you don't control you don't control your traffic routing you don't control who shares your",
    "start": "2038600",
    "end": "2044639"
  },
  {
    "text": "articles so again a pretty straightforward pattern but something that I always need to call out is Cash",
    "start": "2044639",
    "end": "2051200"
  },
  {
    "text": "things this may sound very obvious but there's a particular kind of person that I've met in my career and usually he",
    "start": "2051200",
    "end": "2058240"
  },
  {
    "text": "says I can't cash things or she says or they say my website is dynamic and I",
    "start": "2058240",
    "end": "2065118"
  },
  {
    "text": "love these people because first of all it's usually the same person who says they can't plan ahead and secondly it",
    "start": "2065119",
    "end": "2071200"
  },
  {
    "text": "gives you a really good opportunity to get into the mind of what goes on in that application it lets you find out",
    "start": "2071200",
    "end": "2077118"
  },
  {
    "text": "exactly how their traffic works and what comes in because these Dynamic traffic patterns these really high surge traffic",
    "start": "2077119",
    "end": "2083040"
  },
  {
    "text": "patterns tend to come in from things like a newspaper or a news site they come in from voting sites they come in",
    "start": "2083040",
    "end": "2089480"
  },
  {
    "text": "from almost everything but when we look at what dynamic is a newspaper will require the ability",
    "start": "2089480",
    "end": "2096919"
  },
  {
    "text": "to remove an artic very quickly however the front page of a newspaper website the front page of a News website is not",
    "start": "2096919",
    "end": "2104359"
  },
  {
    "text": "that Dynamic really if you think about it the components that should be dynamic don't all have to be loaded there",
    "start": "2104359",
    "end": "2111079"
  },
  {
    "text": "secondly if you think of a voting site oh I couldn't possibly cash people are voting all of the time but for me as an",
    "start": "2111079",
    "end": "2117240"
  },
  {
    "text": "end user looking at the current vote count I don't need to worry about whether this is 1 second or 5sec stale",
    "start": "2117240",
    "end": "2124640"
  },
  {
    "text": "these are all examples of whether update does not need to be more than once a second and if you think about caching",
    "start": "2124640",
    "end": "2131280"
  },
  {
    "start": "2129000",
    "end": "2129000"
  },
  {
    "text": "even for one second if you take 10,000 requests tens of thousands of requests",
    "start": "2131280",
    "end": "2137640"
  },
  {
    "text": "at the edge if you apply caching at that point suddenly you're reducing it to",
    "start": "2137640",
    "end": "2142839"
  },
  {
    "text": "tens or low hundreds of requests per second this may be enough barrier on a",
    "start": "2142839",
    "end": "2148280"
  },
  {
    "text": "viral article or a similar use case to allow autoscaling to kick in and you still maintain that high availability",
    "start": "2148280",
    "end": "2154720"
  },
  {
    "text": "for your customers without the concern of of having to prescale so the final bit that I wanted",
    "start": "2154720",
    "end": "2161440"
  },
  {
    "start": "2160000",
    "end": "2160000"
  },
  {
    "text": "to cover as a solution for Flash crowds is serving only what you actually have",
    "start": "2161440",
    "end": "2166599"
  },
  {
    "text": "to if you take an example website typically you'll have a login button in the top right and that login button once",
    "start": "2166599",
    "end": "2176000"
  },
  {
    "start": "2168000",
    "end": "2168000"
  },
  {
    "text": "you once you uh have logged in will change it'll change to my account let's",
    "start": "2176000",
    "end": "2181800"
  },
  {
    "text": "say this isn't the AWS website let's say this is a a airline website it'll be replaced by my name my frequent flyer",
    "start": "2181800",
    "end": "2188680"
  },
  {
    "text": "number my status so the page has to be dynamic right because it's just for me",
    "start": "2188680",
    "end": "2194319"
  },
  {
    "text": "but if I'm browsing content that is shared for everybody why don't I just serve this section back why do I have to",
    "start": "2194319",
    "end": "2200720"
  },
  {
    "text": "serve an entirely fresh object to every single user so an easy way to approach this is",
    "start": "2200720",
    "end": "2206560"
  },
  {
    "text": "to handle this in clientside JavaScript serve back the existing page from a CDN",
    "start": "2206560",
    "end": "2212760"
  },
  {
    "text": "from a cache within your platform or even from S3 and then client side",
    "start": "2212760",
    "end": "2218200"
  },
  {
    "text": "JavaScript to just pull in that component this is an Overlook design pattern but it can save you because the",
    "start": "2218200",
    "end": "2224359"
  },
  {
    "text": "page generation time for that news article can be massively massively reduced when you're say sharing the same",
    "start": "2224359",
    "end": "2230800"
  },
  {
    "text": "article between everyone and secondly cloudfronts cache keys are",
    "start": "2230800",
    "end": "2236680"
  },
  {
    "text": "actually affected by user configuration if you configure cloudfronts wh list a header or Whit",
    "start": "2236680",
    "end": "2243240"
  },
  {
    "text": "list a cookie that will create a different cache key for that Behavior",
    "start": "2243240",
    "end": "2248960"
  },
  {
    "text": "this means you can use this within your application if you think of the situation where you have for instance",
    "start": "2248960",
    "end": "2254680"
  },
  {
    "text": "WordPress WordPress has the wp session cookie now if you've got a particularly",
    "start": "2254680",
    "end": "2259800"
  },
  {
    "text": "viral blog it's going live and everybody's very excited they likely to have a very high bounce rate after",
    "start": "2259800",
    "end": "2265440"
  },
  {
    "text": "they've hit that first page when they hit it for the first time however they don't have a cookie so why not vary upon",
    "start": "2265440",
    "end": "2272599"
  },
  {
    "text": "that cookie and then all of your fresh users people who have never visited before get that same page back from the",
    "start": "2272599",
    "end": "2278880"
  },
  {
    "text": "CDN however other users people who have logged in have commented have edited",
    "start": "2278880",
    "end": "2284280"
  },
  {
    "text": "they actually have the flexibility to maintain that dynamicism this is an example of a defense in",
    "start": "2284280",
    "end": "2290480"
  },
  {
    "text": "depth all right so the next um the next learning that we can pull from from our",
    "start": "2290480",
    "end": "2297760"
  },
  {
    "start": "2292000",
    "end": "2292000"
  },
  {
    "text": "experience building cloudfront is applying defense in depth where we take",
    "start": "2297760",
    "end": "2303240"
  },
  {
    "text": "some of these strategies and we apply them together in unison so that we have the benefit from all of them should",
    "start": "2303240",
    "end": "2308599"
  },
  {
    "text": "should one of them fail and there there are multiple strategies that you can layer together",
    "start": "2308599",
    "end": "2314280"
  },
  {
    "text": "you can do things such as caching the content that you depend upon from external services so that you have it",
    "start": "2314280",
    "end": "2320000"
  },
  {
    "text": "available to you should those Services uh become unavailable as Alex mentioned there's also the idea of a multiple",
    "start": "2320000",
    "end": "2326800"
  },
  {
    "text": "implementation so running different implementations of your application simultaneously that reduces the",
    "start": "2326800",
    "end": "2333280"
  },
  {
    "text": "likelihood you're going to have the same software defect in both of them and of",
    "start": "2333280",
    "end": "2338319"
  },
  {
    "text": "course uh as I mentioned before the idea of reducing blast radius using sharding",
    "start": "2338319",
    "end": "2343480"
  },
  {
    "text": "so reducing that blast radius based on whichever Dimension you deem appropriate for your",
    "start": "2343480",
    "end": "2348839"
  },
  {
    "text": "service so going back to the potential causes for failure when we ran that thought",
    "start": "2348839",
    "end": "2355040"
  },
  {
    "text": "experiment over the cloudfront system there were many touch points many external touch points which uh led to",
    "start": "2355040",
    "end": "2363160"
  },
  {
    "text": "the possibility of a lack of validation tripping poisonous code paths",
    "start": "2363160",
    "end": "2368880"
  },
  {
    "text": "and so we want to sort of come up with a way to to address these in general how",
    "start": "2368880",
    "end": "2374400"
  },
  {
    "text": "can we address application failure in general one way that the cloudfront team",
    "start": "2374400",
    "end": "2379640"
  },
  {
    "text": "had thought about was coming up with ideas just to avoid crashing can we prevent our applications from ever",
    "start": "2379640",
    "end": "2385880"
  },
  {
    "start": "2380000",
    "end": "2380000"
  },
  {
    "text": "crashing in production and there are some ideas there such as um using",
    "start": "2385880",
    "end": "2391200"
  },
  {
    "text": "comprehensive test coverage really making sure that that our unit tests are covering as much as we think is possible",
    "start": "2391200",
    "end": "2397760"
  },
  {
    "text": "um adopting fuzz testing to to throw random data at our applications to maybe catch cases that our developers hadn't",
    "start": "2397760",
    "end": "2404640"
  },
  {
    "text": "thought of or really improving our our static code analysis so that we can detect potential causes uh uh potential",
    "start": "2404640",
    "end": "2413119"
  },
  {
    "text": "segals by analyzing the code there's also ideas of just simplifying our systems um that might",
    "start": "2413119",
    "end": "2420280"
  },
  {
    "text": "make it uh easier for developers to keep those systems in their heads so that they're less less likely to produce",
    "start": "2420280",
    "end": "2426960"
  },
  {
    "text": "defects effects all these are are good ideas but they're not foolproof right so defects",
    "start": "2426960",
    "end": "2433480"
  },
  {
    "text": "can still make their way to production so so we then ask the question a little bit differently uh instead of trying to",
    "start": "2433480",
    "end": "2440200"
  },
  {
    "text": "avoid crashing are there ways that we can survive crashing keep our our",
    "start": "2440200",
    "end": "2445400"
  },
  {
    "start": "2445000",
    "end": "2445000"
  },
  {
    "text": "service up and running even when these crashing scenarios are introduced into production so then we we started a a",
    "start": "2445400",
    "end": "2452280"
  },
  {
    "text": "thought exercise around this area um the idea of reducing blast radius so when",
    "start": "2452280",
    "end": "2457560"
  },
  {
    "text": "when one of these problems does occur you're affecting a a subset of your service instead of the entire",
    "start": "2457560",
    "end": "2464880"
  },
  {
    "text": "service so ideas under reducing blast radius there are ideas such as charting",
    "start": "2464880",
    "end": "2471839"
  },
  {
    "text": "customers to separate processes or it might be sharting by geography or",
    "start": "2471839",
    "end": "2476920"
  },
  {
    "text": "whichever Dimension you you deem important so if there's a a poisonous query introduced by the data associated",
    "start": "2476920",
    "end": "2484359"
  },
  {
    "text": "with one of those customers it'll affect the group of processes that are servicing that group of customers",
    "start": "2484359",
    "end": "2490200"
  },
  {
    "text": "separate group of processes for your next group separate processes and so forth that'll help us reduce that blast",
    "start": "2490200",
    "end": "2496640"
  },
  {
    "text": "R to 1 inth of our Fleet um the idea of recovering",
    "start": "2496640",
    "end": "2502359"
  },
  {
    "text": "quickly thinking back to the uh the impact that we had in our DNS application when it would crash and come",
    "start": "2502359",
    "end": "2508880"
  },
  {
    "text": "back up each time it received that poisonous query if if that ability to to",
    "start": "2508880",
    "end": "2514520"
  },
  {
    "text": "restart was shortened to a small time window we would reduce sort of extended adages into a small slice of time so",
    "start": "2514520",
    "end": "2521520"
  },
  {
    "text": "that's another way to reduce blast radius and there's also the idea of multiple implementations that I",
    "start": "2521520",
    "end": "2527359"
  },
  {
    "text": "mentioned before um this idea is common in the in the airline industry with with",
    "start": "2527359",
    "end": "2532640"
  },
  {
    "text": "flight Control software I was actually um speaking with a pilot on my way over here about this this very strategy and",
    "start": "2532640",
    "end": "2540160"
  },
  {
    "text": "he described to me the pilot and co-pilot have different sets of instruments that they use to measure",
    "start": "2540160",
    "end": "2545359"
  },
  {
    "text": "measure the same things um ground speed air speed altitude that sort of thing different instruments different sets of",
    "start": "2545359",
    "end": "2551359"
  },
  {
    "text": "data provided to each person and they're constantly cross referencing each other um and then he also described to me the",
    "start": "2551359",
    "end": "2558800"
  },
  {
    "text": "uh there are there are disagreements at times between their two sets of instruments and they have a a third set",
    "start": "2558800",
    "end": "2564440"
  },
  {
    "text": "that they they can then refer to to sort of break ties between those uh when",
    "start": "2564440",
    "end": "2569559"
  },
  {
    "text": "there are disagreements and then another idea I also like is the idea of rejecting input",
    "start": "2569559",
    "end": "2576640"
  },
  {
    "text": "that previous made you crash uh thinking back to our application our DNS application let's imagine it had crashed",
    "start": "2576640",
    "end": "2583440"
  },
  {
    "text": "that very first time come back up and that poisonous query is received again",
    "start": "2583440",
    "end": "2588920"
  },
  {
    "text": "if we had implemented this last idea our application would say I I recognize you",
    "start": "2588920",
    "end": "2594359"
  },
  {
    "text": "you just made me crash so I'm going to ignore you and I'm going to go continue on servicing the rest of my my",
    "start": "2594359",
    "end": "2600720"
  },
  {
    "text": "queries so there are a few ideas here so one thing that we implemented",
    "start": "2600720",
    "end": "2606359"
  },
  {
    "text": "from this list we we took the the idea of multiple implementations we we kind of combined that a bit with sharding to",
    "start": "2606359",
    "end": "2612800"
  },
  {
    "text": "reduce blast radius and we appli this to the DNS portion of our",
    "start": "2612800",
    "end": "2618720"
  },
  {
    "text": "service we asked ourselves should should the second implementation should it be a a fallback system where it's it's",
    "start": "2618720",
    "end": "2625839"
  },
  {
    "text": "waiting on the side it's waiting observing our our customer facing application and observing waiting for it",
    "start": "2625839",
    "end": "2632079"
  },
  {
    "text": "to fail and should it fail it would step in and then start servicing customers",
    "start": "2632079",
    "end": "2637160"
  },
  {
    "text": "that was one idea but we decided we wanted to know if I go back we decided",
    "start": "2637160",
    "end": "2643000"
  },
  {
    "text": "we wanted to know that it always works um in other words we didn't want to encounter the situation where the",
    "start": "2643000",
    "end": "2650200"
  },
  {
    "text": "ability to step in line and service customers was broken and we didn't know it uh then we also asked ourselves okay",
    "start": "2650200",
    "end": "2657839"
  },
  {
    "text": "should this second implementation should it run in unison with our original implementation maybe run in front of it",
    "start": "2657839",
    "end": "2664520"
  },
  {
    "text": "or run behind it or on the same server we kind of leaned away from this idea",
    "start": "2664520",
    "end": "2669559"
  },
  {
    "text": "because we we didn't want to trade one point of failure for another if the ability to proxy was impaired or if the",
    "start": "2669559",
    "end": "2675839"
  },
  {
    "text": "host were impaired in some way so we kind of separated our Fleet into two separate halves called them",
    "start": "2675839",
    "end": "2683640"
  },
  {
    "text": "Stripes okay so we have stripes so 34 pops on one stripe running the original",
    "start": "2683640",
    "end": "2689960"
  },
  {
    "start": "2684000",
    "end": "2684000"
  },
  {
    "text": "implementation of our DNS application 34 pops on the second stripe um running the second",
    "start": "2689960",
    "end": "2696040"
  },
  {
    "text": "implementation wrote that one and go um each of these are servicing our our DNS queries and you can imagine if that",
    "start": "2696040",
    "end": "2704720"
  },
  {
    "text": "first stripe were to experience that poisonous code path again its ability to respond to denus pares as impaired we",
    "start": "2704720",
    "end": "2711200"
  },
  {
    "text": "still have that second stripe up and running which continues to service our customers so here's uh we see that it's",
    "start": "2711200",
    "end": "2718880"
  },
  {
    "text": "the multiple implementation pattern with with a flavor of uh separating these out",
    "start": "2718880",
    "end": "2724559"
  },
  {
    "text": "to try to reduce blast radius so we kind of sprinkled a little bit of that in there as",
    "start": "2724559",
    "end": "2729880"
  },
  {
    "text": "well so to to give you more of a sense of how we sort of layer these together I",
    "start": "2729880",
    "end": "2735440"
  },
  {
    "text": "wanted to cover another experience um another incident we experienced on the cloudon",
    "start": "2735440",
    "end": "2740839"
  },
  {
    "text": "side those DNS applications those those configuration Damons that I mentioned that are producing input to give uh to",
    "start": "2740839",
    "end": "2748520"
  },
  {
    "text": "our processes we encountered a scenario where these Damons were",
    "start": "2748520",
    "end": "2754280"
  },
  {
    "text": "producing a value uh they wanted to absolutify they were calling math.abs the result was coming out as negative",
    "start": "2754280",
    "end": "2760720"
  },
  {
    "text": "and so they would throw an exception over this so we had these configuration D across our Fleet that were that were",
    "start": "2760720",
    "end": "2766599"
  },
  {
    "text": "crashing in a loop and that itself is is kind of a kind of a good thing because they were",
    "start": "2766599",
    "end": "2772160"
  },
  {
    "text": "preventing this poisonous input from progressing forward toward our customer facing",
    "start": "2772160",
    "end": "2778440"
  },
  {
    "text": "applications but so the learning from me is it's it's kind of expected that math.abs will return a negative number",
    "start": "2778440",
    "end": "2785720"
  },
  {
    "start": "2779000",
    "end": "2779000"
  },
  {
    "text": "for one specific number uh the the negative most number in a 32bit",
    "start": "2785720",
    "end": "2790800"
  },
  {
    "text": "in that's expected because of the way tw's complement works you absolutify value by by flipping all the bits and",
    "start": "2790800",
    "end": "2798480"
  },
  {
    "text": "then adding one so the number rolls back around to to where it started so our actually ability to",
    "start": "2798480",
    "end": "2805839"
  },
  {
    "text": "service customers in the DNS portion of our service it was protected because we had coded those configuration demons",
    "start": "2805839",
    "end": "2812160"
  },
  {
    "text": "defensively to to crash when they encountered this poisonous input",
    "start": "2812160",
    "end": "2817240"
  },
  {
    "text": "but we wanted to look a little deeper to see what what could have happened if we had missed that defensive portion of the",
    "start": "2817240",
    "end": "2823160"
  },
  {
    "text": "coding we then looked at the uh the actual DNS implementation that would",
    "start": "2823160",
    "end": "2829200"
  },
  {
    "text": "have ingested this poisonous input and we saw that that side was coded defensively as well to ignore this",
    "start": "2829200",
    "end": "2835319"
  },
  {
    "text": "poisonous input so if it had been uh given uh that input it would have",
    "start": "2835319",
    "end": "2840880"
  },
  {
    "text": "continued on servicing customers without uh uh without failing so we had good coding practices",
    "start": "2840880",
    "end": "2847800"
  },
  {
    "text": "on both sides what if both of those were missed we also had our food taster in the middle our food taster which is",
    "start": "2847800",
    "end": "2855000"
  },
  {
    "text": "running there we're flooding it with queries that would have crashed if we had missed the validation on both sides it would have crashed when it had",
    "start": "2855000",
    "end": "2861440"
  },
  {
    "text": "ingested this poisonous input so we would have stopped it there and then we thought well what if we had missed it at",
    "start": "2861440",
    "end": "2866680"
  },
  {
    "text": "the food taster level we also had that second implementation where which would",
    "start": "2866680",
    "end": "2871800"
  },
  {
    "text": "have reduced the chance that we had the same software defect on both sides and that second implementation",
    "start": "2871800",
    "end": "2877359"
  },
  {
    "text": "would have kept serving customers should that first Stripe have failed so so it kind of looks like we",
    "start": "2877359",
    "end": "2883720"
  },
  {
    "text": "had a belt we had suspenders we had safety pins and we had duct tape all",
    "start": "2883720",
    "end": "2888800"
  },
  {
    "text": "holding up our pants during this event and our availability stayed up during",
    "start": "2888800",
    "end": "2894040"
  },
  {
    "text": "this period so just thinking about the same kind of idea of of striping applications",
    "start": "2894040",
    "end": "2900119"
  },
  {
    "text": "to maintain that availability within a Amazon Cloud friends one of the restrictions of",
    "start": "2900119",
    "end": "2905839"
  },
  {
    "text": "building a network which handles just that much traffic raw bits is it's very",
    "start": "2905839",
    "end": "2910880"
  },
  {
    "text": "difficult to use a load balancer with layer 7even awareness however in AWS you can we can use a a full TCP or HTTP low",
    "start": "2910880",
    "end": "2919040"
  },
  {
    "text": "balancer and what this enables us to do is to have multiple implementations multiple backend types across a fleet of",
    "start": "2919040",
    "end": "2926480"
  },
  {
    "text": "servers behind a single elb and at the risk of saying microservices I'm trying to make myself",
    "start": "2926480",
    "end": "2932359"
  },
  {
    "text": "sound trendy um this is very easy to implement by using a microservices approach and reimplementing a very",
    "start": "2932359",
    "end": "2938760"
  },
  {
    "text": "specific portion because for you to reimplement your entire application in a different language to avoid the problems",
    "start": "2938760",
    "end": "2945640"
  },
  {
    "text": "with a one language is very difficult and probably not the right choice for most companies however choosing a",
    "start": "2945640",
    "end": "2952480"
  },
  {
    "text": "particularly highrisk service and just reimplementing that as we did with the DNS piece is much easier so the example",
    "start": "2952480",
    "end": "2961280"
  },
  {
    "text": "I thought of first was two Factor authentication because it's incredibly",
    "start": "2961280",
    "end": "2966359"
  },
  {
    "text": "hard to get into your house when you've locked your keys inside it's incredibly hard to debug your broken two-factor",
    "start": "2966359",
    "end": "2972720"
  },
  {
    "text": "orse if you can't log in in the first place these are pretty typical uh they're usually an HTTP or similar API",
    "start": "2972720",
    "end": "2979720"
  },
  {
    "text": "in front of some back end so it's quite a it's reasonably few lines of code you don't tend to put much business logic in",
    "start": "2979720",
    "end": "2986200"
  },
  {
    "text": "here so the implementation is quite straightforwards and for us within AWS",
    "start": "2986200",
    "end": "2991359"
  },
  {
    "text": "you can just use the elastic low balancer attach multiple autoscaling groups there Each of which have an Ami",
    "start": "2991359",
    "end": "2997640"
  },
  {
    "text": "or application deployed with a different language those can be then balanced just",
    "start": "2997640",
    "end": "3003280"
  },
  {
    "text": "uh straight round dring distribution or you could even use a new application load balancer and then have path-based",
    "start": "3003280",
    "end": "3008799"
  },
  {
    "text": "routing to give you the access to either the main or either Target group behind there so it's a pretty simple approach",
    "start": "3008799",
    "end": "3015440"
  },
  {
    "text": "again I'm trying to keep things straightforward in the approach but it does give you that flexibility that even",
    "start": "3015440",
    "end": "3020480"
  },
  {
    "text": "when everything's on fire you can still get to your files so finally we're going to talk about the idea of jittering different",
    "start": "3020480",
    "end": "3027880"
  },
  {
    "start": "3024000",
    "end": "3024000"
  },
  {
    "text": "configuration items on your platform to avoid time bombs and this really comes down to one of two things either the",
    "start": "3027880",
    "end": "3035799"
  },
  {
    "text": "absolute point in time this happens because it's turned to February 29th or it happens through bugs introduced",
    "start": "3035799",
    "end": "3043040"
  },
  {
    "text": "through things like memory leaks now one of the examples that I'm",
    "start": "3043040",
    "end": "3048200"
  },
  {
    "start": "3046000",
    "end": "3046000"
  },
  {
    "text": "going to pick up and talk through is the problem with a homogeneous platform now",
    "start": "3048200",
    "end": "3054760"
  },
  {
    "text": "homogeneous platform is great it B basically means that everything is derived from the same template the same",
    "start": "3054760",
    "end": "3061040"
  },
  {
    "text": "Ami it does it means you don't have to worry about a version of Linux over here a version of Solaris over here another",
    "start": "3061040",
    "end": "3067040"
  },
  {
    "text": "version of Linux here and how you play with a nice set of tools across all of those but there is a problem with having",
    "start": "3067040",
    "end": "3073599"
  },
  {
    "text": "that homogeneous platform here I've got three servers the",
    "start": "3073599",
    "end": "3078760"
  },
  {
    "start": "3075000",
    "end": "3075000"
  },
  {
    "text": "uh green box here represents the root file system of those servers now in my",
    "start": "3078760",
    "end": "3084079"
  },
  {
    "text": "theoretical example I am a photo photo processing photo sharing website",
    "start": "3084079",
    "end": "3089839"
  },
  {
    "text": "so in my day-to-day operation I'll have things coming in for instance I'll have",
    "start": "3089839",
    "end": "3095160"
  },
  {
    "text": "configuration uh configuration updates coming in these are typically small they'll be cycled they'll only keep the",
    "start": "3095160",
    "end": "3101200"
  },
  {
    "text": "last couple but actually you know what last week uh we had some crashing issues in prod so now we've got a bunch of",
    "start": "3101200",
    "end": "3107000"
  },
  {
    "text": "binary patches running on those as well I haven't cleaned them out yet but where you can see it's only half full my dis",
    "start": "3107000",
    "end": "3113640"
  },
  {
    "text": "utilization as represented by the yellow is only 50% and you know what I'm monitoring",
    "start": "3113640",
    "end": "3119160"
  },
  {
    "text": "absolute fill so this is fine but then at some point one of my users decides to",
    "start": "3119160",
    "end": "3124680"
  },
  {
    "text": "digitize their entire photo collection and I get petabytes of pictures of cats coming and this all happens within a",
    "start": "3124680",
    "end": "3130960"
  },
  {
    "text": "very very very short period so now all of my servers all break at the same time because well I've",
    "start": "3130960",
    "end": "3136480"
  },
  {
    "text": "got my load balancing in place so it gets distributed equally across them now how did we deal with this traditionally",
    "start": "3136480",
    "end": "3142839"
  },
  {
    "text": "well you had instance level monitoring you each of your servers each of your your zones each of anything would have a",
    "start": "3142839",
    "end": "3149359"
  },
  {
    "start": "3143000",
    "end": "3143000"
  },
  {
    "text": "monitor in the event of my disc exceeding 80% it would alarm however as I've just shown this is like a flash",
    "start": "3149359",
    "end": "3155760"
  },
  {
    "text": "crowd this is a rate of fill that is unexpectedly high but you know in the olden days instance leval alerts I'd get",
    "start": "3155760",
    "end": "3163200"
  },
  {
    "text": "paged at 2 a.m. I'd be I'd respond and you know what eventually I'd look at it",
    "start": "3163200",
    "end": "3169160"
  },
  {
    "text": "and think I'm going to implement fill rate monitoring as well but fill rate monitoring wouldn't help because",
    "start": "3169160",
    "end": "3175359"
  },
  {
    "start": "3174000",
    "end": "3174000"
  },
  {
    "text": "remember this graph the rate of fill here would be so incredible that even if I received an",
    "start": "3175359",
    "end": "3180760"
  },
  {
    "text": "alert it wouldn't make a difference so if I responded it's to automated some things I could do would",
    "start": "3180760",
    "end": "3187680"
  },
  {
    "text": "be recycle my instances you know at the one at the point one becomes unhealthy",
    "start": "3187680",
    "end": "3192720"
  },
  {
    "text": "shut it down and run it up again but it's an unnecessary cost it may provide an interruption to availability it's not",
    "start": "3192720",
    "end": "3198720"
  },
  {
    "text": "the right choice secondly I could have an automated cleanup that just says well this file system is getting too full so",
    "start": "3198720",
    "end": "3205200"
  },
  {
    "text": "I'll I'll clean this out but if my rate of change is too high this won't work and if it can't be done",
    "start": "3205200",
    "end": "3211599"
  },
  {
    "text": "programmatically quick enough I certainly can't do it so this is an example used by many",
    "start": "3211599",
    "end": "3218640"
  },
  {
    "text": "situ many things but cloudfronts also take this approach which is jittering that file system identifying the",
    "start": "3218640",
    "end": "3225480"
  },
  {
    "text": "components which may fill and then providing a Jitter of variance across those this almost acts like a canary an",
    "start": "3225480",
    "end": "3232680"
  },
  {
    "text": "early warning sign because when your traffic does come in when you you see that load come in one node a few nodes a",
    "start": "3232680",
    "end": "3240079"
  },
  {
    "text": "percentage of your Fleet becomes impaired first and this gives you the ability to respond it gives you that",
    "start": "3240079",
    "end": "3246079"
  },
  {
    "text": "flexibility to respond now the important part of this is knowing your application and knowing",
    "start": "3246079",
    "end": "3251359"
  },
  {
    "text": "where your files are actually going to be written very very commonly you'll write temporary files to Varun or VAR",
    "start": "3251359",
    "end": "3257559"
  },
  {
    "text": "temp or somewhere like that now on the Amazon Linux Ami uh this is stored on",
    "start": "3257559",
    "end": "3263000"
  },
  {
    "text": "the root far system in the auntu Ami for instance it's us uses temp FS now",
    "start": "3263000",
    "end": "3268040"
  },
  {
    "text": "jittering or changing either of those within a single autoscaling group is actually quite tricky because you can't",
    "start": "3268040",
    "end": "3274119"
  },
  {
    "text": "provide that kind of configuration at the auto SC scaling group level to be varied so this comes back again to",
    "start": "3274119",
    "end": "3281960"
  },
  {
    "text": "knowing our application and knowing how it fits together take the photo example I will consciously separate out my",
    "start": "3281960",
    "end": "3288799"
  },
  {
    "text": "uploads into a separate directory not part of the existing file system hierarchy and then I will separate that",
    "start": "3288799",
    "end": "3295280"
  },
  {
    "text": "onto a separate volume which has that jittering I had some code which I did",
    "start": "3295280",
    "end": "3300520"
  },
  {
    "text": "not get through legal review so it will be on SlideShare later um but it's effectively 80 lines of bash to write",
    "start": "3300520",
    "end": "3306680"
  },
  {
    "text": "something that takes an EBS volume uh mounts it sorry attaches it",
    "start": "3306680",
    "end": "3312240"
  },
  {
    "text": "mounts it um creates a file system and then as you're actually creating the EBS",
    "start": "3312240",
    "end": "3317520"
  },
  {
    "text": "volume in the first place apply that Jitter it's incredibly straightforwards and in the testing I did it adds no more",
    "start": "3317520",
    "end": "3322760"
  },
  {
    "text": "than about 10 seconds to your system in it time but it does protect you from these",
    "start": "3322760",
    "end": "3328160"
  },
  {
    "start": "3328000",
    "end": "3328000"
  },
  {
    "text": "problems so thinking about that that's where one resource has expired uh sorry is filled over time or in response to",
    "start": "3328160",
    "end": "3335039"
  },
  {
    "text": "something but what else is there within your platform well SSL SE for a good example it's incredibly tempting to use",
    "start": "3335039",
    "end": "3341440"
  },
  {
    "text": "a star doer and apply it to everything but unless you have Auto renewals in place you can get caught out just quick",
    "start": "3341440",
    "end": "3349280"
  },
  {
    "text": "shout out ACM will help with that um but then think about domain name registrations what if your entire",
    "start": "3349280",
    "end": "3355160"
  },
  {
    "text": "platform run with glue or with NS records hosted on the same domain if you",
    "start": "3355160",
    "end": "3361520"
  },
  {
    "text": "look at Route 53 you may notice that your NS records are actually sharded they're separated across multiple tlds",
    "start": "3361520",
    "end": "3367680"
  },
  {
    "text": "and multiple domains so in the event of any problem with one TLD any TLD being",
    "start": "3367680",
    "end": "3373640"
  },
  {
    "text": "blacklisted by a country you still have those fallbacks and another thought is from a",
    "start": "3373640",
    "end": "3379240"
  },
  {
    "text": "deployment schedule point of view if you look inside your application and think about the deployment schedules if",
    "start": "3379240",
    "end": "3385400"
  },
  {
    "text": "everything comes online at exactly the same time what it means is that if you have a memory leak all of your instances",
    "start": "3385400",
    "end": "3391720"
  },
  {
    "text": "will fail at roughly the same time so you may want to apply a small offset a small Jitter in there as well but that's",
    "start": "3391720",
    "end": "3397640"
  },
  {
    "text": "not it have a look at your platforms have a look at the way that your application works and think about where",
    "start": "3397640",
    "end": "3403599"
  },
  {
    "text": "you can introduce small amounts of variant in order to improve your",
    "start": "3403599",
    "end": "3408798"
  },
  {
    "text": "availability so can can you guys still hear me no",
    "start": "3409920",
    "end": "3415520"
  },
  {
    "text": "well sounds like my m is good okay you want to take this I guess I'm",
    "start": "3415520",
    "end": "3420799"
  },
  {
    "text": "going to talk through this brilliant so just to wrap this up we've talked about many different areas where",
    "start": "3420799",
    "end": "3426640"
  },
  {
    "text": "your Avil where your availability can be affected if we look at the Pentagon of sadness we I hope we've addressed each",
    "start": "3426640",
    "end": "3433680"
  },
  {
    "text": "of the con each of the corners and how you might look at that from your application if you look at each of the",
    "start": "3433680",
    "end": "3440000"
  },
  {
    "start": "3439000",
    "end": "3439000"
  },
  {
    "text": "green sections here there's a little bit of a design pattern you can think of how you apply that from both the cloud aw",
    "start": "3440000",
    "end": "3446440"
  },
  {
    "text": "Amazon cloudfront point of view but also within your application but of course this isn't it spend some time afterwards",
    "start": "3446440",
    "end": "3453839"
  },
  {
    "text": "and just look at your application and work out where your particular risks are and if it comes to it invent new design",
    "start": "3453839",
    "end": "3461559"
  },
  {
    "text": "patterns with regards to the lessons learned today there's a couple that I just want to go over again first of all",
    "start": "3461559",
    "end": "3467319"
  },
  {
    "start": "3464000",
    "end": "3464000"
  },
  {
    "text": "think about that food tasting you can't necessarily rely on a syntax validation",
    "start": "3467319",
    "end": "3472640"
  },
  {
    "text": "or validation within the production facing application take a step back and think where can I validate with real",
    "start": "3472640",
    "end": "3479200"
  },
  {
    "text": "traffic before I go to prod where can I do that food tasting approach secondly flash",
    "start": "3479200",
    "end": "3486160"
  },
  {
    "text": "crowds if you can avoid scaling for the peak please do so but think about Integrations with auto scaling look at",
    "start": "3486160",
    "end": "3493200"
  },
  {
    "text": "your business applications and where you can fit those two together do so I'm a huge huge fan of caching all",
    "start": "3493200",
    "end": "3500480"
  },
  {
    "text": "over the place so cash even for a second because that reduction in origin load is huge and also think about what you",
    "start": "3500480",
    "end": "3507520"
  },
  {
    "text": "actually have to serve back dynamically use selective serving use the uh approach using cloudfront cash keys or",
    "start": "3507520",
    "end": "3514760"
  },
  {
    "text": "even just client side JavaScript and use all of these approaches to have this defense in depth",
    "start": "3514760",
    "end": "3520839"
  },
  {
    "text": "for instance things like implementation sharding may be May save you in the event of a production outage but also",
    "start": "3520839",
    "end": "3528039"
  },
  {
    "text": "look at where in that idea from cloudfront where they had the duct tape and so on and so forth where you might",
    "start": "3528039",
    "end": "3533599"
  },
  {
    "text": "be able to layer those defenses and finally while I don't encourage you to",
    "start": "3533599",
    "end": "3540200"
  },
  {
    "text": "randomize absolutely everything on your platform I would encourage you to look at where you do have that homogeneous",
    "start": "3540200",
    "end": "3546280"
  },
  {
    "text": "approach within your platform and try to layer it try to make sure you've got that little bit of",
    "start": "3546280",
    "end": "3551760"
  },
  {
    "text": "protection so I'd like to thank everybody for coming today I really appreciate it and we'd love to hear about your design patterns that you've",
    "start": "3551760",
    "end": "3557640"
  },
  {
    "text": "thought of as well but otherwise thank you very much and I will see you again",
    "start": "3557640",
    "end": "3563559"
  }
]