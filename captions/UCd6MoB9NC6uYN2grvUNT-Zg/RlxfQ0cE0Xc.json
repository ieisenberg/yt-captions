[
  {
    "text": "Joe Ziggler with Amazon web services we'll be starting here in just about uh two minutes I just want to get uh give a",
    "start": "280",
    "end": "5319"
  },
  {
    "text": "little time for any anyone else who wants to sign in the webinar so we'll get started here just",
    "start": "5319",
    "end": "11080"
  },
  {
    "text": "shortly e",
    "start": "28960",
    "end": "32960"
  },
  {
    "text": "okay everyone I think we're ready to get started uh again my name is Joe Ziggler I'm a technical evangelist for Amazon",
    "start": "87400",
    "end": "92640"
  },
  {
    "text": "web services thanks for joining us today we're going to talk about building a highly available scalable web properties",
    "start": "92640",
    "end": "98399"
  },
  {
    "text": "with AWS you'll notice also you can ask us questions there is a question uh a little chat question uh area there and",
    "start": "98399",
    "end": "105719"
  },
  {
    "text": "go to meeting feel free to ask us questions we have a couple of other employees of AWS here online to help",
    "start": "105719",
    "end": "112799"
  },
  {
    "text": "answer those questions and I will try to address some verbally at the end we most likely won't be able to get through all",
    "start": "112799",
    "end": "118640"
  },
  {
    "text": "the questions but uh we do have an email address that I'll I'll show here that we can follow up with you uh if you have",
    "start": "118640",
    "end": "124759"
  },
  {
    "text": "any uh left unanswered questions all right let's get",
    "start": "124759",
    "end": "130720"
  },
  {
    "text": "started so basically what we're going to talk about is five principles for for building highly scalable web properties",
    "start": "131040",
    "end": "137680"
  },
  {
    "text": "and these are actually the same five principles that Amazon uh used to develop its highly scalable",
    "start": "137680",
    "end": "143800"
  },
  {
    "text": "infrastructure and it's a lot of the different uh principles that we use when we design our services with Amazon web",
    "start": "143800",
    "end": "149440"
  },
  {
    "text": "services and that's elasticity designed for failure loose coupling security and",
    "start": "149440",
    "end": "156000"
  },
  {
    "text": "performance so I'll go into each one of these number one elasticity elasticity",
    "start": "156000",
    "end": "163239"
  },
  {
    "text": "is a fundamental property of the cloud it's really the difference between we talk about traditional it infrastructure",
    "start": "163239",
    "end": "169760"
  },
  {
    "text": "and the cloud now the Cornerstone of elasticity for Amazon is the ec2",
    "start": "169760",
    "end": "176440"
  },
  {
    "text": "instance the ec2 instance is our elastic compute cloud elastic Cloud compute is uh basically",
    "start": "176440",
    "end": "183280"
  },
  {
    "text": "it's your server processing instance and it has the ability to scale up and down both vertically by creating larger",
    "start": "183280",
    "end": "189720"
  },
  {
    "text": "instances and horizontally by adding more resources along with that we've got",
    "start": "189720",
    "end": "196440"
  },
  {
    "text": "cloudwatch and cloudwatch is a resource for monitoring your ec2 instances as well as your other Amazon resources now",
    "start": "196440",
    "end": "204080"
  },
  {
    "text": "that's going to work directly with ec2 and the reason that's important is",
    "start": "204080",
    "end": "209519"
  },
  {
    "text": "we use cloud watch to autoscale the ec2 instances we can use metrics from cloud",
    "start": "209519",
    "end": "215360"
  },
  {
    "text": "watch for example High CPU use to decide to automatically add new ec2 instances",
    "start": "215360",
    "end": "222200"
  },
  {
    "text": "to our Workforce and that goes together with what we call autoscaling which allows you to scale up",
    "start": "222200",
    "end": "229280"
  },
  {
    "text": "and down ec2 capacity so for example when you've got",
    "start": "229280",
    "end": "234680"
  },
  {
    "text": "your uh website running on ec2 you can combine cloudwatch with autoscaling to add new instances as the server load",
    "start": "234680",
    "end": "243239"
  },
  {
    "text": "increases behind that in front of that you can actually put your elastic load balancing or the elb and this allows you",
    "start": "243239",
    "end": "250280"
  },
  {
    "text": "to do uh Network traffic distribution across your instances here's an example of how that",
    "start": "250280",
    "end": "256400"
  },
  {
    "text": "would look you would have your own website sitting uh with elb and behind",
    "start": "256400",
    "end": "261880"
  },
  {
    "text": "that you've got your ec2 instance which is using cloudwatch to Auto scale out and this is how it would look in a real",
    "start": "261880",
    "end": "268360"
  },
  {
    "text": "scenario with it working let's say at 6: a.m your traffic is quite low but throughout the day you get",
    "start": "268360",
    "end": "274759"
  },
  {
    "text": "more traffic and your ec2 instance is under more pressure to serve more and more content what will happen is that will",
    "start": "274759",
    "end": "281919"
  },
  {
    "text": "trigger an alarm in cloudwatch and cloudwatch will then initiate that alarm",
    "start": "281919",
    "end": "287479"
  },
  {
    "text": "to Auto scaling which will create new ec2 instances those instances will",
    "start": "287479",
    "end": "293680"
  },
  {
    "text": "automatically join the elastic load balancer and the load balancer will now distribute that load across those",
    "start": "293680",
    "end": "301600"
  },
  {
    "text": "instances perhaps later in the day your load goes down so an important part of the elasticity is not only being able to",
    "start": "301600",
    "end": "307600"
  },
  {
    "text": "grow your server capacity but returning that server capacity to AWS for cost savings and in this case as we have less",
    "start": "307600",
    "end": "316160"
  },
  {
    "text": "traffic we can scale down the ec2 instances and go back to one instance",
    "start": "316160",
    "end": "322440"
  },
  {
    "text": "thus saving cost they automatically join the elastic load Bing groups and they also Auto Al uh",
    "start": "322440",
    "end": "330280"
  },
  {
    "text": "leave those groups and the load balancer will take that to account elasticity is an extremely",
    "start": "330280",
    "end": "336039"
  },
  {
    "text": "important fundamental part of cloud computing and building highly available applications it allows you to really",
    "start": "336039",
    "end": "341840"
  },
  {
    "text": "create adjustable",
    "start": "341840",
    "end": "345039"
  },
  {
    "text": "capacity next design principle design for failure so our CTO is is quite big",
    "start": "347360",
    "end": "352919"
  },
  {
    "text": "on that and he says everything fails all the time and so what you need to be able to do in this scenario is design",
    "start": "352919",
    "end": "359840"
  },
  {
    "text": "backwards you should create your applications to continue to function even if the underlying physical Hardware",
    "start": "359840",
    "end": "365840"
  },
  {
    "text": "fails or is removed or replaced in order to do that you need to follow some",
    "start": "365840",
    "end": "371599"
  },
  {
    "text": "steps first you should avoid single points of failure So within your entire architecture there should never be one",
    "start": "371599",
    "end": "377759"
  },
  {
    "text": "particular system that were it to fail would take down your entire",
    "start": "377759",
    "end": "383240"
  },
  {
    "text": "architecture assume that everything is going to fail and design backwards from that so for example I'll build I'll",
    "start": "383240",
    "end": "390919"
  },
  {
    "text": "build a very simple highly available web architecture here for you so starting with a web server we'll have a web",
    "start": "390919",
    "end": "396840"
  },
  {
    "text": "server running on an Amazon ec2 instance we're going to employ a service",
    "start": "396840",
    "end": "402000"
  },
  {
    "text": "from Amazon Amazon relational database service which is available as a hosted managed database service either in MySQL",
    "start": "402000",
    "end": "409720"
  },
  {
    "text": "Oracle or SQL Server flavors so in this case we have a very",
    "start": "409720",
    "end": "415000"
  },
  {
    "text": "simple two-tiered architecture now as it stands this this two-tiered architecture of course is not",
    "start": "415000",
    "end": "421160"
  },
  {
    "text": "designed for failure if either the database goes down or the web server goes down essentially my entire site",
    "start": "421160",
    "end": "426199"
  },
  {
    "text": "goes down so we're going to employ some steps here one step is we'll go ahead and",
    "start": "426199",
    "end": "432440"
  },
  {
    "text": "attach an elastic IP so that will be a public facing IP that I'm pointing to my ec2 instance now the nice thing about",
    "start": "432440",
    "end": "439440"
  },
  {
    "text": "that elastic IP is I could point that to other ec2 instances without an interrupting my traffic or affecting my",
    "start": "439440",
    "end": "445360"
  },
  {
    "text": "end users we can couple that with Amazon 53",
    "start": "445360",
    "end": "450639"
  },
  {
    "text": "which is our programmable domain name service it's a highly available domain service that propagates very quickly uh",
    "start": "450639",
    "end": "457039"
  },
  {
    "text": "throughout the internet and you can programmatically change its settings so what does this allow you to",
    "start": "457039",
    "end": "462639"
  },
  {
    "text": "do well in this case we have my website.com and it's being the DNS is",
    "start": "462639",
    "end": "467800"
  },
  {
    "text": "being resolved by Amazon Route 53 it's resolving to an elastic IP which is",
    "start": "467800",
    "end": "473039"
  },
  {
    "text": "pointing to an ec2 instance and using RDS well by using Route 53 I can make my",
    "start": "473039",
    "end": "479639"
  },
  {
    "text": "website more highly available let's say for example I want to roll out a new version of my website or perhaps I have",
    "start": "479639",
    "end": "485840"
  },
  {
    "text": "a a newer version of my web server what I can do in that case is launch a new ec2",
    "start": "485840",
    "end": "492319"
  },
  {
    "text": "instance and use the elastic IP to point it towards a different ec2 instance",
    "start": "492319",
    "end": "497440"
  },
  {
    "text": "where my my my users don't know that anything has actually changed in this case so they're not directly affected to",
    "start": "497440",
    "end": "503960"
  },
  {
    "text": "that and that new ec2 instance can use my relational database we can take that one step further",
    "start": "503960",
    "end": "510639"
  },
  {
    "text": "and put these behind a load balancer while that elastic load balancer is going to allow us to scale up it's going",
    "start": "510639",
    "end": "516240"
  },
  {
    "text": "to allow us to create new instances behind the scenes and be able to serve more customers so if we have an event",
    "start": "516240",
    "end": "522479"
  },
  {
    "text": "for example a very high server load or maybe uh slow response",
    "start": "522479",
    "end": "527480"
  },
  {
    "text": "times we can scale out and as we Auto scale those up those instances will join",
    "start": "527480",
    "end": "532839"
  },
  {
    "text": "the workforce and they'll connect to RDS if for something to happen to one of these",
    "start": "532839",
    "end": "538079"
  },
  {
    "text": "instances Auto scaling would automatically replace that instance with a new",
    "start": "538079",
    "end": "543279"
  },
  {
    "text": "one so now we've moved forward a little bit we have somewhat more highly available uh environment but there's",
    "start": "543279",
    "end": "550560"
  },
  {
    "text": "still a single point of failure we don't have to worry about elastic load balancer that's managed by Amazon and",
    "start": "550560",
    "end": "556800"
  },
  {
    "text": "that already has high amount availability we don't have to worry about Route 53 we don't have to worry about our ec2",
    "start": "556800",
    "end": "563040"
  },
  {
    "text": "instances because if something happened to one of them they automatically get replaced and we've got redundancy but right now we're something to have RDS",
    "start": "563040",
    "end": "570560"
  },
  {
    "text": "our entire system would go down so we've got a solution for that and that's Amazon RDS multi-az deployment or",
    "start": "570560",
    "end": "578680"
  },
  {
    "text": "multi-az in that environment you can actually have an easy to create hot",
    "start": "579120",
    "end": "584399"
  },
  {
    "text": "standby for RDS and this is a simple setting that you actually do when you start the RDS service this will create a",
    "start": "584399",
    "end": "591519"
  },
  {
    "text": "synchronous replicated slave instance sitting in another availability",
    "start": "591519",
    "end": "596959"
  },
  {
    "text": "Zone in the case that you've got a failure where all your your current applications are pointing to your master rdfs that",
    "start": "596959",
    "end": "604360"
  },
  {
    "text": "Master endpoint will then move automatically to the hot backup then in the background you can B",
    "start": "604360",
    "end": "611640"
  },
  {
    "text": "bring up another standby and start that replication again this helps you build a",
    "start": "611640",
    "end": "616760"
  },
  {
    "text": "more highly available service but what happens if something happens to availability Zone a in this",
    "start": "616760",
    "end": "622560"
  },
  {
    "text": "case as you can see all of our web servers are actually an A and which is something in the unlikely event",
    "start": "622560",
    "end": "628360"
  },
  {
    "text": "something happened to that at availability Zone we'd be down well with",
    "start": "628360",
    "end": "634000"
  },
  {
    "text": "autoscaling you can actually have it create ec2 instances across different",
    "start": "634000",
    "end": "640079"
  },
  {
    "text": "availability zones and the load balancer will also sit across those availability zones and this case were something to",
    "start": "640079",
    "end": "646399"
  },
  {
    "text": "happen to either availability Zone the other availability Zone would be able to grow and take up the traffic thus",
    "start": "646399",
    "end": "652120"
  },
  {
    "text": "keeping users up and not having any kind of downtime you can tie this together using",
    "start": "652120",
    "end": "658360"
  },
  {
    "text": "Cloud watch Cloud watch has different types of alarms that you can set in order for you to know what's happening",
    "start": "658360",
    "end": "663720"
  },
  {
    "text": "with your environment in this case we've got different metrics that we can look at we",
    "start": "663720",
    "end": "668760"
  },
  {
    "text": "can look at the server load for example we can take a look at the dis reads the uh the the dis uh write Ops read Ops we",
    "start": "668760",
    "end": "677399"
  },
  {
    "text": "can also look at the latency coming out of the web servers for example and you can tie those back into different alarms",
    "start": "677399",
    "end": "683399"
  },
  {
    "text": "that can be raised either for autoscaling or they could be alarms that uh can reach out and alert you in case",
    "start": "683399",
    "end": "689839"
  },
  {
    "text": "you're interested in finding out the status of your system so in this case I",
    "start": "689839",
    "end": "694959"
  },
  {
    "text": "can actually send an email out and then when everything returns to",
    "start": "694959",
    "end": "701600"
  },
  {
    "text": "a state that's okay I can also find out when that happened there's a lot of different things that you can you can do",
    "start": "701600",
    "end": "707279"
  },
  {
    "text": "within cloudwatch you can monitor many of our different systems for that you can set different types of notifications to find out what's happening and then if",
    "start": "707279",
    "end": "713720"
  },
  {
    "text": "you want to you can tie these back into autoscaling so you can actually tailor your auto scaling to exactly what you",
    "start": "713720",
    "end": "718800"
  },
  {
    "text": "want for example you can tailor Auto scaling to be time based in which case you could turn down servers if you know",
    "start": "718800",
    "end": "725600"
  },
  {
    "text": "that your load's going to go down maybe after five o'clock on Friday or you can say well if I have a high aggregate CPU",
    "start": "725600",
    "end": "732279"
  },
  {
    "text": "utilization for example if the aggregate of all my CPUs is over 80% I want you to",
    "start": "732279",
    "end": "737880"
  },
  {
    "text": "scale up more servers and if it drops below 50% I want you to scale them back",
    "start": "737880",
    "end": "743600"
  },
  {
    "text": "down so I want to talk about some of the AWS building blocks we really have two kinds of",
    "start": "743600",
    "end": "750240"
  },
  {
    "text": "different services that are running in AWS we have some that are inherently fault tolerant and those are usually",
    "start": "750240",
    "end": "756600"
  },
  {
    "text": "associated with a region so for example you can launch an S3 bucket and you can pick which region you want that bucket",
    "start": "756600",
    "end": "762399"
  },
  {
    "text": "to be in and for S3 you're dealing with about it's 11 NS of durability which means you can actually put a million",
    "start": "762399",
    "end": "769320"
  },
  {
    "text": "objects in S3 and over a period of about a 100,000 years you could lose one object so it's quite durable so",
    "start": "769320",
    "end": "776760"
  },
  {
    "text": "everything that runs in a region is benefiting automatically from the multiple multiple availability zones",
    "start": "776760",
    "end": "782920"
  },
  {
    "text": "that are part of that region S3 is automatically replicating between those zones for example Route 53 is available",
    "start": "782920",
    "end": "790079"
  },
  {
    "text": "because it's able to uh run across those different availability zones so anything that you see over here on the left here",
    "start": "790079",
    "end": "795959"
  },
  {
    "text": "default torrent Services you can assume that they're already highly available on the other side we do have",
    "start": "795959",
    "end": "803199"
  },
  {
    "text": "services that are fault tolerant but you really have to architect and use those Services correctly in order to get the",
    "start": "803199",
    "end": "809440"
  },
  {
    "text": "full benefits of fall tolerance and that's really the easy two instances RDS",
    "start": "809440",
    "end": "814560"
  },
  {
    "text": "and virtual private Cloud so I want to talk about one of our customers who successfully really engineered a highly",
    "start": "814560",
    "end": "821279"
  },
  {
    "text": "available service and that's Netflix Netflix right now is it's an",
    "start": "821279",
    "end": "828519"
  },
  {
    "text": "online streaming service used exclusively in the US they actually make up 25% of the internet traffic in",
    "start": "828519",
    "end": "835320"
  },
  {
    "text": "America at their Peak and now they're the number one cable provider in America",
    "start": "835320",
    "end": "840639"
  },
  {
    "text": "Netflix builds his architecture around the concept that everything fails and they've actually done it in a very",
    "start": "840639",
    "end": "846199"
  },
  {
    "text": "unique way they've created something called chaos monkey chaos monkey in the Simeon",
    "start": "846199",
    "end": "854160"
  },
  {
    "text": "Army what chaos monkey does is it actually goes through their entire architecture and it randomly fails",
    "start": "854160",
    "end": "861000"
  },
  {
    "text": "different parts so it will turn off ec2 instances for example it will make the",
    "start": "861000",
    "end": "866399"
  },
  {
    "text": "database go offline depending on what level of pain that they want the monkey to to actually induce this monkey is",
    "start": "866399",
    "end": "872240"
  },
  {
    "text": "actually running all the time within Netflix and so they have actually built their entire architectures to take that",
    "start": "872240",
    "end": "877680"
  },
  {
    "text": "in account they assume that the ec2 instances will be taken offline they have to have a highly available database",
    "start": "877680",
    "end": "883639"
  },
  {
    "text": "behind it so I encourage you to check out chaos monkey it has been made open source it's part of the siman army I",
    "start": "883639",
    "end": "890480"
  },
  {
    "text": "think if you Google for that you should be able to find everything about it so let's move on to another design",
    "start": "890480",
    "end": "897560"
  },
  {
    "text": "principle and that is loose coupling you want to build Loosely",
    "start": "897560",
    "end": "904399"
  },
  {
    "text": "coupled systems this is going to allow you to scale everything up a Loosely coupled system basically means you have",
    "start": "904399",
    "end": "911279"
  },
  {
    "text": "very clean interfaces between your different services and these interfaces should be able to",
    "start": "911279",
    "end": "918320"
  },
  {
    "text": "scale you should be able to create independent components so basically every component does one type of job one",
    "start": "918320",
    "end": "924920"
  },
  {
    "text": "service right you should be able to design everything as a black box you have a clear interface between these",
    "start": "924920",
    "end": "931040"
  },
  {
    "text": "different levels of services one service doesn't need to know how the another service functions independent internally",
    "start": "931040",
    "end": "937440"
  },
  {
    "text": "and it doesn't have any dependency on how that functions it only knows that it has this types of inputs these types of",
    "start": "937440",
    "end": "944319"
  },
  {
    "text": "outputs this will move move you towards thinking of more of a service oriented architecture and this is the kind of",
    "start": "944319",
    "end": "950639"
  },
  {
    "text": "architecture that is going to be able to scale and be highly available because you're going to have many of these Services running and if one service",
    "start": "950639",
    "end": "957399"
  },
  {
    "text": "takes a long time you'll be able to start the services so let's look at an example for",
    "start": "957399",
    "end": "964399"
  },
  {
    "text": "that let's say we have a very uh simple uh video encoding Service uh something",
    "start": "964720",
    "end": "970560"
  },
  {
    "text": "like one of our customers is a Vio and Vio allows you to upload uh movies and they will transcode those movies and",
    "start": "970560",
    "end": "977120"
  },
  {
    "text": "they'll publish it on their website if you were to build an architecture like this where you've got two services that",
    "start": "977120",
    "end": "983040"
  },
  {
    "text": "are tightly coupled as you upload that video file you would have a dependency on the transcode and publish step for",
    "start": "983040",
    "end": "990240"
  },
  {
    "text": "something to happen to that trans code and publish step your architecture perhaps would not even allow you to receive a file additionally what happens",
    "start": "990240",
    "end": "997839"
  },
  {
    "text": "when you receive a lot of files or if you can upload files faster than you can trans code and publish you need a way to",
    "start": "997839",
    "end": "1004560"
  },
  {
    "text": "decouple these Services one way you can do that is using a",
    "start": "1004560",
    "end": "1010680"
  },
  {
    "text": "q a q will allow the receive service to continue to receive files and then add",
    "start": "1010680",
    "end": "1015839"
  },
  {
    "text": "jobs to the trans code and publish service so let's take a look at how that would look in our",
    "start": "1015839",
    "end": "1021199"
  },
  {
    "text": "architecture so in this case I'm going to use something called elastic bean stock and elastic bean stock is a",
    "start": "1021199",
    "end": "1026520"
  },
  {
    "text": "container service from Amazon it allows you to run Java PHP and asp.net apps in",
    "start": "1026520",
    "end": "1033600"
  },
  {
    "text": "a managed environment which means we scale them up for you we handle the connection to the load balancer we do",
    "start": "1033600",
    "end": "1039280"
  },
  {
    "text": "all those settings for the auto scale environment I had talked about earlier however you can still go into the hood",
    "start": "1039280",
    "end": "1044720"
  },
  {
    "text": "and and decide how those settings work you can still see your ec2 instances getting launched",
    "start": "1044720",
    "end": "1050400"
  },
  {
    "text": "now we're going to go ahead and use that web app and to store these files that we're uploading I'm going to use Amazon S3 now",
    "start": "1050400",
    "end": "1058240"
  },
  {
    "text": "S3 as I said before is highly available excuse me S3 is actually it's",
    "start": "1058240",
    "end": "1065000"
  },
  {
    "text": "very highly available in fact at this point right now it's handling about uh 750,000 requests per second so it's a",
    "start": "1065000",
    "end": "1072679"
  },
  {
    "text": "really great environment for us to be able to use uh for storage for these uploading of these files so we'll",
    "start": "1072679",
    "end": "1078000"
  },
  {
    "text": "connect Mass stock to that now for the queing I'm going to use",
    "start": "1078000",
    "end": "1083080"
  },
  {
    "text": "Amazon simple Q service or sqs that is also a highly available service it has a",
    "start": "1083080",
    "end": "1088200"
  },
  {
    "text": "web endpoint that you can connect your application to and we can connect these together so",
    "start": "1088200",
    "end": "1095400"
  },
  {
    "text": "as you upload the file what's going to happen in this case is I'm going to grab the file my elastic beanock app I'm",
    "start": "1095400",
    "end": "1101120"
  },
  {
    "text": "going to place that file into S3 and then I'm going to queue up a job and I'm going to say hey look here's a file I",
    "start": "1101120",
    "end": "1107320"
  },
  {
    "text": "needed to be transcoded now what I can do with this case is I can build my put my transcoders and",
    "start": "1107320",
    "end": "1113520"
  },
  {
    "text": "connect it to that job queue and those transcoders they can autoscale so as we upload more files perhaps that job queue",
    "start": "1113520",
    "end": "1120640"
  },
  {
    "text": "is growing well guess what I can actually connect Auto uh autoscale to the job CU and I can say for example for",
    "start": "1120640",
    "end": "1128000"
  },
  {
    "text": "every 100 jobs I want you to to kick off another easy2 instance this means that",
    "start": "1128000",
    "end": "1133880"
  },
  {
    "text": "these two jobs now can scale independently and I get the benefits of loose coupling as these guys kick off",
    "start": "1133880",
    "end": "1139960"
  },
  {
    "text": "they can go to S3 and they can pull down that file and we don't have to worry about S3 scaling because as we said",
    "start": "1139960",
    "end": "1145440"
  },
  {
    "text": "before it's handling many many requests worldwide right now so this is a very simple workflow",
    "start": "1145440",
    "end": "1152200"
  },
  {
    "text": "but what happens if we want to get you know slightly more complex workflow for our web app so we'll take a look at something",
    "start": "1152200",
    "end": "1159120"
  },
  {
    "text": "like this we want to go ahead and have people upload the video and we're going to check the video and maybe let's say",
    "start": "1159120",
    "end": "1165720"
  },
  {
    "text": "we're offering a like a freemium type service if the video is too long we want to shorten the video if it's not too",
    "start": "1165720",
    "end": "1172919"
  },
  {
    "text": "long or after we shorten the video we want to check to make sure it's really a legi minute video so we're going to do a",
    "start": "1172919",
    "end": "1179120"
  },
  {
    "text": "little little bit of a decision process here if it's a if it looks like a Spam we're going to reject it and we're going to end the workflow if it's not spam",
    "start": "1179120",
    "end": "1186400"
  },
  {
    "text": "then we'll go ahead and transcode it and then we'll publish and notify our customer so how is that going to look in",
    "start": "1186400",
    "end": "1192200"
  },
  {
    "text": "the web architecture using the queuing services and adopting those Loosely coupled principles",
    "start": "1192200",
    "end": "1199600"
  },
  {
    "text": "so this is what we kind of started from this is a very simple workflow this is basically not checking to see if it's",
    "start": "1199600",
    "end": "1205159"
  },
  {
    "text": "spam not checking to see if if the video is too long and taking everything in and just automatically transcoding it and",
    "start": "1205159",
    "end": "1212240"
  },
  {
    "text": "this will scale and it's highly available but it doesn't really meet our our total business need so what would",
    "start": "1212240",
    "end": "1218000"
  },
  {
    "text": "the architecture look like if we wanted to include this more complex",
    "start": "1218000",
    "end": "1223159"
  },
  {
    "text": "workflow so here's one one way it would look and uh I know there's lots of squar",
    "start": "1223159",
    "end": "1228799"
  },
  {
    "text": "there and we just kind of go through this really quick so basically what would happen in this case is the entry",
    "start": "1228799",
    "end": "1234000"
  },
  {
    "text": "point into our business app is we upload a file the file would automatically go to S3 and elastic bean stock would put a",
    "start": "1234000",
    "end": "1240880"
  },
  {
    "text": "job into the sqs and say Hey I want you to check this video then we've got an",
    "start": "1240880",
    "end": "1246320"
  },
  {
    "text": "autoscaling group of ec2 instances whose only job it's going to be is to check",
    "start": "1246320",
    "end": "1251400"
  },
  {
    "text": "the video it's going to check the video and it's going to do one of two things it's either going to say hey you need to",
    "start": "1251400",
    "end": "1257200"
  },
  {
    "text": "be resized and create a sizing job or hey I need you to to be checked for spam",
    "start": "1257200",
    "end": "1262720"
  },
  {
    "text": "and you can see the decision trees are following that original logic and it's going through cues at every layer now we",
    "start": "1262720",
    "end": "1269159"
  },
  {
    "text": "can scale up quite well in this case if we lose an ec2 instance people are still",
    "start": "1269159",
    "end": "1274600"
  },
  {
    "text": "uploading files in fact we could lose the whole back end of our system and customers wouldn't actually know that",
    "start": "1274600",
    "end": "1280279"
  },
  {
    "text": "other than that their files would be ready a bit later there are some problems with this",
    "start": "1280279",
    "end": "1285559"
  },
  {
    "text": "type of architecture though well first of all it's it's kind of hard to maintain we've actually",
    "start": "1285559",
    "end": "1291840"
  },
  {
    "text": "hardcoded in a bunch of the workflow logic into the architecture it's also",
    "start": "1291840",
    "end": "1297279"
  },
  {
    "text": "really hard to audit what happens when there's an error somewhere in the way how do we find out that something's stuck in transcoding for example how do",
    "start": "1297279",
    "end": "1304039"
  },
  {
    "text": "we find out that a lot of more files are spamm aren't spam what happens when I have to change this workflow I'm GNA",
    "start": "1304039",
    "end": "1310720"
  },
  {
    "text": "have to completely change my architecture I'm going to have to add new ec2 instances connected into new sqs",
    "start": "1310720",
    "end": "1317200"
  },
  {
    "text": "hes in order to facilitate any kind of changes into that decision process and",
    "start": "1317200",
    "end": "1323240"
  },
  {
    "text": "it's really quite lowlevel architecture if you look at it so what is it that we're actually trying to",
    "start": "1323240",
    "end": "1330080"
  },
  {
    "text": "do so here's the here's that workflow we've got kind of two components to this workflow if we look at it right we have",
    "start": "1330080",
    "end": "1337320"
  },
  {
    "text": "actually we've got activities and steps right so this is the actual work right",
    "start": "1337320",
    "end": "1342679"
  },
  {
    "text": "check the video shorten the video check for spam reject transcode publish a no",
    "start": "1342679",
    "end": "1349880"
  },
  {
    "text": "and then we basically have a couple of decisions that are involved in that right so we can break this down into a",
    "start": "1349880",
    "end": "1356840"
  },
  {
    "text": "couple of things break this down into tasks decisions and history so we're",
    "start": "1356840",
    "end": "1362840"
  },
  {
    "text": "really focusing here on what our business workflow is not so much on the actual implementation not so much on the",
    "start": "1362840",
    "end": "1370000"
  },
  {
    "text": "architectural design for the workflow this is good because we can",
    "start": "1370000",
    "end": "1376480"
  },
  {
    "text": "build stateless systems this way and stateless systems are fundamental to being able to scale out horizontally and",
    "start": "1376480",
    "end": "1383400"
  },
  {
    "text": "horizontal scaling is really one of the benefits that the cloud brings to you because we can use that autoscaling",
    "start": "1383400",
    "end": "1389679"
  },
  {
    "text": "feature we can kick off new E2 instances which can bootstrap connect to the to",
    "start": "1389679",
    "end": "1395600"
  },
  {
    "text": "the load balance or connect to the cues and perform business processes it also means that it makes us more highly",
    "start": "1395600",
    "end": "1401279"
  },
  {
    "text": "available because if a machine drops off because it has no State we can add another machine to join back into the",
    "start": "1401279",
    "end": "1407320"
  },
  {
    "text": "pool without it damaging our workflow so we do have a service for this it's",
    "start": "1407320",
    "end": "1413039"
  },
  {
    "text": "called Amazon simple workflow and it allows you to create scalable resilient applications without having to focus in",
    "start": "1413039",
    "end": "1419960"
  },
  {
    "text": "so much on building an architecture that closely man matches that workflow now s swf keeps track of the",
    "start": "1419960",
    "end": "1427200"
  },
  {
    "text": "state for you it'll keep track of the executed tasks timeouts and",
    "start": "1427200",
    "end": "1433200"
  },
  {
    "text": "errors it's made of a couple of components fundamentally you have the actual simple workflow service and you",
    "start": "1433360",
    "end": "1439240"
  },
  {
    "text": "can assume that's highly available just like our other services that I mentioned earlier and within that you've got the",
    "start": "1439240",
    "end": "1445120"
  },
  {
    "text": "swf worker and the S swf decider so if we went back to our actual workflow you",
    "start": "1445120",
    "end": "1451120"
  },
  {
    "text": "can see where these would fit in we'd have a s swf worker for example to do the transcoding and a decider to decide",
    "start": "1451120",
    "end": "1458200"
  },
  {
    "text": "whether something's too long or Too Short or whether it's spam so the deciders they do the",
    "start": "1458200",
    "end": "1464840"
  },
  {
    "text": "coordination logic and what they do is they work on something we called long polling basically what happens is the decider",
    "start": "1464840",
    "end": "1472600"
  },
  {
    "text": "will connect to simple workflow service and it will pull and we will hold that service for up to 60 seconds to tell it",
    "start": "1472600",
    "end": "1479080"
  },
  {
    "text": "whether it has something to do this means that you don't have to have a lot of complex polling logic it'll evaluate",
    "start": "1479080",
    "end": "1485440"
  },
  {
    "text": "the workflow and it'll have it'll keep the execution history in adjacent format and that execution history is going to",
    "start": "1485440",
    "end": "1491799"
  },
  {
    "text": "allow us to build really complex workflow items and it's also going to make it so that everything's",
    "start": "1491799",
    "end": "1496960"
  },
  {
    "text": "auditable and then return the decision to S swf so s swf itself is the",
    "start": "1496960",
    "end": "1502159"
  },
  {
    "text": "coordinator you'd have the deci pull up a job decide what the next course of",
    "start": "1502159",
    "end": "1507240"
  },
  {
    "text": "action is and then return that next course of action into s swf and then it continues to loop on",
    "start": "1507240",
    "end": "1513520"
  },
  {
    "text": "that over and over again now you can actually write the",
    "start": "1513520",
    "end": "1518720"
  },
  {
    "text": "workers and deciders in uh the S swf SDK which we have for net Java and PHP or",
    "start": "1518720",
    "end": "1525640"
  },
  {
    "text": "you can call the API directly then we've got workers now workers are",
    "start": "1525640",
    "end": "1532600"
  },
  {
    "text": "the ones that are actually doing the tasks very similar environment they will be polling and they'll execute a task",
    "start": "1532600",
    "end": "1538840"
  },
  {
    "text": "and send heartbeats back to swf basically you'll have two outcomes for that task you'll have a success or a",
    "start": "1538840",
    "end": "1546000"
  },
  {
    "text": "failure and just like the decider it's going to continue to do this in a looping",
    "start": "1546000",
    "end": "1551279"
  },
  {
    "text": "fashion so how will that architecture kind of look well in this case for elastic",
    "start": "1551279",
    "end": "1557000"
  },
  {
    "text": "beanock what we'll do is have it communicate directly with simple workflow once a file is",
    "start": "1557000",
    "end": "1563440"
  },
  {
    "text": "uploaded simple workflow would then manage ec2 instances is either s swf",
    "start": "1563440",
    "end": "1569360"
  },
  {
    "text": "workers or swf deciders as as needed for the actual workflow you can add more of those to",
    "start": "1569360",
    "end": "1576399"
  },
  {
    "text": "scale out what's nice is those patterns we just covered previously they absolutely",
    "start": "1576399",
    "end": "1583399"
  },
  {
    "text": "apply for simple workflow in this particular project so in this case for",
    "start": "1583399",
    "end": "1589320"
  },
  {
    "text": "example if it turns out we have a lot of transcoding to do we can Auto scale out",
    "start": "1589320",
    "end": "1594679"
  },
  {
    "text": "those those ec2 SF workers and in fact if we have a lot of",
    "start": "1594679",
    "end": "1599720"
  },
  {
    "text": "files coming in we can also scale out those deciders what about high",
    "start": "1599720",
    "end": "1606000"
  },
  {
    "text": "availability well just like before we can scale these Services across availability zones just in case some",
    "start": "1606000",
    "end": "1612279"
  },
  {
    "text": "some unlikely event one of those availability zones was affected by some kind of event",
    "start": "1612279",
    "end": "1618600"
  },
  {
    "text": "we can also reach out to on premise so if you've got for example workers running your own corporate data center",
    "start": "1618600",
    "end": "1625240"
  },
  {
    "text": "you can still coordinate through simple workflow service you can also use not only on",
    "start": "1625240",
    "end": "1631120"
  },
  {
    "text": "demand instances but you can also use spot instances a very good case study for that of course is Vimeo again where",
    "start": "1631120",
    "end": "1638200"
  },
  {
    "text": "they've got a freemium model and a free freemium model and a paid model if you go with a free model you upload your",
    "start": "1638200",
    "end": "1644440"
  },
  {
    "text": "file it usually gets trans transcoded it's available within 24 hours hours if you go for the pay model it's usually",
    "start": "1644440",
    "end": "1650880"
  },
  {
    "text": "transcoded immediately and available in about you know under an hour and the way that they do that is if you're not",
    "start": "1650880",
    "end": "1656240"
  },
  {
    "text": "paying they actually use spot instances on the back end and those spot instances may be available they may not be",
    "start": "1656240",
    "end": "1662080"
  },
  {
    "text": "available but that way they can actually cut down their costs so what is this going to look",
    "start": "1662080",
    "end": "1668039"
  },
  {
    "text": "like so here's our original transcoding architecture fairly complex still highly",
    "start": "1668039",
    "end": "1674200"
  },
  {
    "text": "available still uh scales up as we needed but you know pretty much hardcoded to what our business logic is",
    "start": "1674200",
    "end": "1681559"
  },
  {
    "text": "so how will this look with simple workflow there we go a much more simple",
    "start": "1681559",
    "end": "1688679"
  },
  {
    "text": "architecture to deal with we have SIMPLE workflow running in the middle there we're still storing our files to",
    "start": "1688679",
    "end": "1694480"
  },
  {
    "text": "S3 but we let simple workflow manage our workers and our deciders and we're still highly available we're scaling up but",
    "start": "1694480",
    "end": "1701480"
  },
  {
    "text": "when we want to change our business logic we can work with the simple workflow service instead of reconfiguring our entire uh",
    "start": "1701480",
    "end": "1709880"
  },
  {
    "text": "architecture and this creates love because you have no new languages to learn your codee's going to work just",
    "start": "1709880",
    "end": "1715120"
  },
  {
    "text": "like it did before you do need to program a simple workflow itself with a Java library but everything else that",
    "start": "1715120",
    "end": "1721360"
  },
  {
    "text": "you want to write you can use any language you want and run those within ec2 instances we have a full API available",
    "start": "1721360",
    "end": "1728399"
  },
  {
    "text": "for this it's actually quite easy to use I encourage you just to take a look at it so you can see we actually have two",
    "start": "1728399",
    "end": "1735200"
  },
  {
    "text": "Services here available simple workflow service and sqs and sqs has actually been around in",
    "start": "1735200",
    "end": "1742799"
  },
  {
    "text": "some of the earlier days with Amazon web services and simple workflow this is a newer one that we've recently launched",
    "start": "1742799",
    "end": "1748880"
  },
  {
    "text": "and so you can kind of ask yourself well is there a bit of overlap there and there is actually because before simple",
    "start": "1748880",
    "end": "1754679"
  },
  {
    "text": "workflow service people would actually create these complex workflows using sqs or using their own QA service so as a",
    "start": "1754679",
    "end": "1761640"
  },
  {
    "text": "rule of thumb if you have a very simple chain tasks without any kind of complex",
    "start": "1761640",
    "end": "1768159"
  },
  {
    "text": "decision sqs is a really good way to create a Loosely coupled highly scalable",
    "start": "1768159",
    "end": "1773840"
  },
  {
    "text": "environment however if you've got tasks with a",
    "start": "1773840",
    "end": "1779559"
  },
  {
    "text": "decision graph attached to it then we would recommend using Amazon swf it will",
    "start": "1779559",
    "end": "1785080"
  },
  {
    "text": "just manage your services a lot easier it will create a simpler architecture uh and you'll still meet",
    "start": "1785080",
    "end": "1790360"
  },
  {
    "text": "all of our design principles when when you use it okay so now I'm going to move on to",
    "start": "1790360",
    "end": "1796440"
  },
  {
    "text": "security",
    "start": "1796440",
    "end": "1799440"
  },
  {
    "text": "so fundamental to AWS is the identity and access management or I am",
    "start": "1801480",
    "end": "1806760"
  },
  {
    "text": "service this functions very much in a similar environment that most people are used to by having groups and users and",
    "start": "1806760",
    "end": "1815720"
  },
  {
    "text": "roles and you can assign very granular permissions to these different users and to these different roles and you can",
    "start": "1815720",
    "end": "1822640"
  },
  {
    "text": "also make these these these users do not necessarily have to be people they can be applications for example so for in my",
    "start": "1822640",
    "end": "1828399"
  },
  {
    "text": "own architectures when I design uh a continuously a continuous integration environment The Continuous integration",
    "start": "1828399",
    "end": "1835320"
  },
  {
    "text": "server itself actually runs as a particular user that I have very strict permissions attached",
    "start": "1835320",
    "end": "1842760"
  },
  {
    "text": "to we also support multiactor authentication in this case you can use",
    "start": "1843519",
    "end": "1848559"
  },
  {
    "text": "for example you can buy a jamalo token I believe they're about uh n or10 that you can order from us or you can even use a",
    "start": "1848559",
    "end": "1856159"
  },
  {
    "text": "Google authenticator and you can use a virtual multiactor authentication and this can not only be used to log into your web",
    "start": "1856159",
    "end": "1864320"
  },
  {
    "text": "console you can also use it in your business Logic for example you can require multiactor authentication before",
    "start": "1864320",
    "end": "1869760"
  },
  {
    "text": "you allow it to delete from an S3 bucket or you can actually interface with multiactor authentication V our",
    "start": "1869760",
    "end": "1878679"
  },
  {
    "text": "apis so what you can do with a security groups is really create complex layered security take for example if we have",
    "start": "1879919",
    "end": "1886600"
  },
  {
    "text": "this type of architecture you've got an end user you've got a load balancer several layers of ec2 instances",
    "start": "1886600",
    "end": "1895000"
  },
  {
    "text": "so you've got basically here an end tiered architecture now kind of in the",
    "start": "1895000",
    "end": "1900480"
  },
  {
    "text": "traditional it world what you would end up doing in the case is you'd set up a DMZ you would have a certain level of",
    "start": "1900480",
    "end": "1907240"
  },
  {
    "text": "access on one side of the DMZ you have some f servers within the DM you",
    "start": "1907240",
    "end": "1912919"
  },
  {
    "text": "probably have your databases behind both sets of firewalls this is actually a lot",
    "start": "1912919",
    "end": "1918159"
  },
  {
    "text": "to do security groups you do set up arure different",
    "start": "1918159",
    "end": "1924840"
  },
  {
    "text": "security groups have different typ of rules onur so for",
    "start": "1924840",
    "end": "1931600"
  },
  {
    "text": "example front end",
    "start": "1932159",
    "end": "1936600"
  },
  {
    "text": "rules connection security groups IP",
    "start": "1942960",
    "end": "1949840"
  },
  {
    "text": "address",
    "start": "1952559",
    "end": "1955559"
  },
  {
    "text": "datab",
    "start": "1966559",
    "end": "1969559"
  },
  {
    "text": "envir also also",
    "start": "1975919",
    "end": "1979840"
  },
  {
    "text": "addon",
    "start": "1993279",
    "end": "1996279"
  },
  {
    "text": "okay move move onance",
    "start": "2019200",
    "end": "2025320"
  },
  {
    "text": "how increase your performance",
    "start": "2025320",
    "end": "2029960"
  },
  {
    "text": "take at a very scale you canor basic can",
    "start": "2031120",
    "end": "2036519"
  },
  {
    "text": "vertical scale scale what is SC well that TS to me you got a large",
    "start": "2036519",
    "end": "2043000"
  },
  {
    "text": "monation and the only way you scale it so for example",
    "start": "2043000",
    "end": "2050079"
  },
  {
    "text": "got running AWS what you can do is you stop",
    "start": "2050079",
    "end": "2056240"
  },
  {
    "text": "that instance and you create a larger run datab that datab back on and",
    "start": "2056240",
    "end": "2061320"
  },
  {
    "text": "immediately scale that up vertically right and we have lots of different flavors that you could use in order to",
    "start": "2061320",
    "end": "2066960"
  },
  {
    "text": "do this scaling we've got high memory instances High CPU instances cluster compute instances we",
    "start": "2066960",
    "end": "2073040"
  },
  {
    "text": "can actually use graphical processing units uh depending on what your workload is we recently have added High IO",
    "start": "2073040",
    "end": "2080079"
  },
  {
    "text": "instances that you can use you know for example you can actually create a cluster computer eight",
    "start": "2080079",
    "end": "2087480"
  },
  {
    "text": "extra large instance 60 uh 60.5 gigabytes of memory with 3.3 terabytes",
    "start": "2087480",
    "end": "2093480"
  },
  {
    "text": "of storage or if you need to use GPU you can actually do a quadruple extra",
    "start": "2093480",
    "end": "2100160"
  },
  {
    "text": "large GPU instance and we continuously are adding more instances based on feedback from our",
    "start": "2100160",
    "end": "2106680"
  },
  {
    "text": "customers another way in order to gain performance is Amazon elasticache and",
    "start": "2106680",
    "end": "2111760"
  },
  {
    "text": "that is a mcash d uh compatible inmemory cach system that we manage for you so if",
    "start": "2111760",
    "end": "2117760"
  },
  {
    "text": "You' ever used MC D it's very simple to to switch over and start using Amazon elastic cache how's how does that work",
    "start": "2117760",
    "end": "2127760"
  },
  {
    "text": "well typically what you'll find is that people like to put the inmemory caching layer between the database and the web",
    "start": "2127760",
    "end": "2133040"
  },
  {
    "text": "server and cache those results so if you've got a database That's Heavy on the read side you can use elastic cache",
    "start": "2133040",
    "end": "2139480"
  },
  {
    "text": "and it'll automatically manage the nodes for you to pull out the information on the database server and save that into C",
    "start": "2139480",
    "end": "2145920"
  },
  {
    "text": "it'll depend on what kind of framework you're using what kind of Technology stack uh I have built systems using uh",
    "start": "2145920",
    "end": "2151560"
  },
  {
    "text": "python ajeno for example and there was plugins that immediately just started working and started cing the database uh",
    "start": "2151560",
    "end": "2157880"
  },
  {
    "text": "with very minimal effort but it's going to depend on what your architecture is like and the technology stack that",
    "start": "2157880",
    "end": "2163040"
  },
  {
    "text": "you're actually using search engines now I've actually",
    "start": "2163040",
    "end": "2168800"
  },
  {
    "text": "had to implement architectures using search engines before and I can tell you search engines are hard I've worked with",
    "start": "2168800",
    "end": "2175760"
  },
  {
    "text": "a technology that I find myself spending a lot more time scaling up search engines and keeping up them up and",
    "start": "2175760",
    "end": "2182599"
  },
  {
    "text": "running as opposed to creating value for my customers and so we've actually got a",
    "start": "2182599",
    "end": "2187839"
  },
  {
    "text": "manage search engine service available and what do you know it actually comes from Amazon it's a search",
    "start": "2187839",
    "end": "2194119"
  },
  {
    "text": "engine that they have used and we have turned that into a service available to anybody and it has several features for",
    "start": "2194119",
    "end": "2200640"
  },
  {
    "text": "example it can do relevance and ranking for you it can do fast setting so if you",
    "start": "2200640",
    "end": "2207520"
  },
  {
    "text": "want to be able to drill down on the different searches you can do that it allows you to do range",
    "start": "2207520",
    "end": "2214359"
  },
  {
    "text": "searches and the name of it is Amazon Cloud search and it's a fully managed search service available from",
    "start": "2214359",
    "end": "2220599"
  },
  {
    "text": "us it's built originally on the A9 search technology that amazon.com",
    "start": "2220599",
    "end": "2227240"
  },
  {
    "text": "uses and what it really does is it brings this very complex problem down",
    "start": "2227240",
    "end": "2232720"
  },
  {
    "text": "and makes it so that anybody can actually use it and we will automatically scale you up and and we",
    "start": "2232720",
    "end": "2238800"
  },
  {
    "text": "can actually take in as much traffic as you want we can take as much data as you want and handle as many searches as you",
    "start": "2238800",
    "end": "2244240"
  },
  {
    "text": "want and we will scale that out for you in the back end and you you don't have to focus in on that so that gets rid of",
    "start": "2244240",
    "end": "2250000"
  },
  {
    "text": "you know that undifferentiated heavy lifting that we talk about a lot at Amazon and allows you to focus on using",
    "start": "2250000",
    "end": "2255359"
  },
  {
    "text": "that search and not actually Building Services to manage that se",
    "start": "2255359",
    "end": "2261480"
  },
  {
    "text": "search and this is what it looks like it's basically got two endpoints it's",
    "start": "2261480",
    "end": "2266760"
  },
  {
    "text": "got an endpoint that connects actually into your documents on what you want searched and then it provides a search endpoint that your application would use",
    "start": "2266760",
    "end": "2274119"
  },
  {
    "text": "in order to reach out and query and request the",
    "start": "2274119",
    "end": "2279799"
  },
  {
    "text": "search as your traffic grows we're able to partition that traffic across different instances running in the",
    "start": "2280200",
    "end": "2286839"
  },
  {
    "text": "background so you basically have two types of growth that you're going to find in Search and that's going to be",
    "start": "2286839",
    "end": "2292400"
  },
  {
    "text": "the quantity and the size of the document data and then the actual search requests in terms of volume and",
    "start": "2292400",
    "end": "2298640"
  },
  {
    "text": "complexity we're able to scale across both as the these different types of",
    "start": "2298640",
    "end": "2304119"
  },
  {
    "text": "growth so what would that look like in our web architecture",
    "start": "2304119",
    "end": "2309440"
  },
  {
    "text": "well again we're going to have our Auto scaling group here and I'm not showing it here but this would go across",
    "start": "2310160",
    "end": "2315280"
  },
  {
    "text": "availability zones for example we've got our RDS running with a read replica r as",
    "start": "2315280",
    "end": "2321160"
  },
  {
    "text": "a hot standby and we can include Amazon Cloud search and Cloud search just like many",
    "start": "2321160",
    "end": "2327599"
  },
  {
    "text": "of our different Services is highly available and we'll connect that endpoint into the databases to actually",
    "start": "2327599",
    "end": "2334119"
  },
  {
    "text": "do the indexing and the search uh endpoint is available to the ec2 instances so we brought together many",
    "start": "2334119",
    "end": "2341400"
  },
  {
    "text": "different concepts here let me show you what it would look like in a slightly more complex media sharing architecture",
    "start": "2341400",
    "end": "2348400"
  },
  {
    "text": "so I'm G to start with this guy it's actually quite quite big but when we break it down into the components you",
    "start": "2348400",
    "end": "2353599"
  },
  {
    "text": "can see how it works so let me clean this up here we go so here's our media sharing reference architecture let's",
    "start": "2353599",
    "end": "2359640"
  },
  {
    "text": "take a look at what's going on this and it's got a couple of services that uh I I didn't go into great depth about so",
    "start": "2359640",
    "end": "2365760"
  },
  {
    "text": "first of all on the very front end we're going to have Route 53 and Route 53 is going to allow us to programmatically",
    "start": "2365760",
    "end": "2371400"
  },
  {
    "text": "change our DNS whenever we need which means I could potentially point the our entire website to a different",
    "start": "2371400",
    "end": "2377560"
  },
  {
    "text": "infrastructure now Route 53 also has latency based routing that means if I wanted to I could have this type of",
    "start": "2377560",
    "end": "2384160"
  },
  {
    "text": "infrastructure sitting in different regions across the world and that way customers that are coming in from let's",
    "start": "2384160",
    "end": "2389720"
  },
  {
    "text": "say Japan for example would be shuttled to the services that are running in the Tokyo region so let's go behind that and",
    "start": "2389720",
    "end": "2397400"
  },
  {
    "text": "we've got several elastic load balancers running here so first of all perhaps we've got some Auto scaling going on the",
    "start": "2397400",
    "end": "2404359"
  },
  {
    "text": "web server side and these web servers are probably they're serving different requests people are asking for their",
    "start": "2404359",
    "end": "2409520"
  },
  {
    "text": "media files we've got a Content delivery Network here in the middle that's Amazon",
    "start": "2409520",
    "end": "2415319"
  },
  {
    "text": "cloudfront that is our uh CDM content delivery Network it's and right now we've got over uh 33 points of presence",
    "start": "2415319",
    "end": "2422440"
  },
  {
    "text": "available on that Network and I'm happy to say we just recently opened that point of presence",
    "start": "2422440",
    "end": "2427920"
  },
  {
    "text": "uh that we're serving uh cloudfront out of Sydney right now so for my Australian friends I think you'll find that quite",
    "start": "2427920",
    "end": "2433200"
  },
  {
    "text": "useful in this case cloudfront is using S3 as its origin so that means any",
    "start": "2433200",
    "end": "2439680"
  },
  {
    "text": "content that's placed in S3 is going to be distributed around the world via Cloud front and then we've got our",
    "start": "2439680",
    "end": "2446640"
  },
  {
    "text": "upload servers that are also sitting behind an elastic load balancer and these will all scale up as required and",
    "start": "2446640",
    "end": "2452319"
  },
  {
    "text": "they're going to connect into S3 to pull down data and to do transcoding and",
    "start": "2452319",
    "end": "2457359"
  },
  {
    "text": "maybe we have a very simple workflow and so in this case we're just going to use sqs and we're going to have different",
    "start": "2457359",
    "end": "2463000"
  },
  {
    "text": "types of instances connected to sqs to pull out the media files for types of processing and in the back end there you",
    "start": "2463000",
    "end": "2469720"
  },
  {
    "text": "can see there uh where that number four is we actually have two different kinds of instances we probably have some core",
    "start": "2469720",
    "end": "2475599"
  },
  {
    "text": "instances that are autoscaling out that are either reserved instances mean I I pay for these instances and I'm going to",
    "start": "2475599",
    "end": "2481800"
  },
  {
    "text": "use these instances all the time or on demand instances and then we're going to enhance our our working farm by",
    "start": "2481800",
    "end": "2488680"
  },
  {
    "text": "including spot instances and that's going to save us some costs that means we can use probably less of the on",
    "start": "2488680",
    "end": "2494440"
  },
  {
    "text": "demand instances when those spot inces are available in the back in we can have our data store our highly available",
    "start": "2494440",
    "end": "2503160"
  },
  {
    "text": "RDS and then we'll plug in Cloud search there on the back and this is your",
    "start": "2503160",
    "end": "2508280"
  },
  {
    "text": "overall architecture I'll just leave that up there so you can take a look at it a little bit longer",
    "start": "2508280",
    "end": "2516440"
  },
  {
    "text": "okay so we talked about really five of the main principles we talked about elasticity right we can we can ask the",
    "start": "2518359",
    "end": "2525400"
  },
  {
    "text": "cloud for as much server capacity as we want and we can return that capacity to the cloud as needed but in order to be",
    "start": "2525400",
    "end": "2531760"
  },
  {
    "text": "able to use that elasticity we really have to create applications that are able to scale out horizontally and that",
    "start": "2531760",
    "end": "2538960"
  },
  {
    "text": "usually means that are applications that are stateless and that as we add more servers we can basically service more",
    "start": "2538960",
    "end": "2545839"
  },
  {
    "text": "customers we talked about design for failure right great reference from Netflix by the way you can find a lot of",
    "start": "2545839",
    "end": "2552720"
  },
  {
    "text": "information about their architecture they have published uh white papers about it you can see how they design from day one for failure uh and feel",
    "start": "2552720",
    "end": "2559800"
  },
  {
    "text": "free to uh grab chaos monkey and try it out for yourself we talked about Loosely",
    "start": "2559800",
    "end": "2565119"
  },
  {
    "text": "a loose loose coupling of the architecture right so that is going to allow you to actually gain elasticity",
    "start": "2565119",
    "end": "2571160"
  },
  {
    "text": "throughout your entire architecture on every tier you're going to be able to scale up as the workflow is required and",
    "start": "2571160",
    "end": "2576760"
  },
  {
    "text": "scale down plus it means you're going to be more highly available if something happens to one of those back tiers as",
    "start": "2576760",
    "end": "2583000"
  },
  {
    "text": "that front tier is still able to accept orders for example you can ramp up the back tier if orders start backing up and",
    "start": "2583000",
    "end": "2589119"
  },
  {
    "text": "you can scale out that way we talked a bit about security so you can use security groups to create a multi-",
    "start": "2589119",
    "end": "2595319"
  },
  {
    "text": "layers of security throughout your architecture and we talked about performance different ways that you can",
    "start": "2595319",
    "end": "2601640"
  },
  {
    "text": "increase performance so for example vertical scaling we can add biger instances we talked about about",
    "start": "2601640",
    "end": "2607520"
  },
  {
    "text": "horizontal scaling you can add elastication into your architecture in order to improve database performance",
    "start": "2607520",
    "end": "2614160"
  },
  {
    "text": "and then you can also use some of our services which scale out and have consistent performance for example Cloud",
    "start": "2614160",
    "end": "2622280"
  },
  {
    "text": "search and this together will help you uh to actually get up and get running quite quickly so you want to get that",
    "start": "2623920",
    "end": "2629960"
  },
  {
    "text": "first version up as quickly as possible so well we're just wrapping up here I'm",
    "start": "2629960",
    "end": "2635640"
  },
  {
    "text": "going to go through and try to answer some question questions I just want to let you know that uh if I'm not able to",
    "start": "2635640",
    "end": "2640960"
  },
  {
    "text": "get to your questions you can email them here and we'll try to get a hold of you oh I almost forgot for my Australian",
    "start": "2640960",
    "end": "2647680"
  },
  {
    "text": "customers I think probably uh you might be interested in a little bit of announcement that we have uh coming up",
    "start": "2647680",
    "end": "2653800"
  },
  {
    "text": "uh and we do we've got a an A and Zed uh customer appreciation day coming in",
    "start": "2653800",
    "end": "2659040"
  },
  {
    "text": "November and that will be in Sydney so I hope to see everyone there okay well let's go to some questions",
    "start": "2659040",
    "end": "2667280"
  },
  {
    "text": "okay here we go uh first question I have can elb be used to scale up a set number of ec2 instances um elb itself is not",
    "start": "2682319",
    "end": "2690359"
  },
  {
    "text": "actually scaling up it works in conjunction with autoscaling and with autoscaling what you can do is you you",
    "start": "2690359",
    "end": "2696880"
  },
  {
    "text": "have different parameters that you can work with one of those parameters is going to be the reason that it actually does the auto scaling so in this case",
    "start": "2696880",
    "end": "2703000"
  },
  {
    "text": "you know you could do like high CPU but a couple of the other parameters that you use is a minimum number and a",
    "start": "2703000",
    "end": "2709119"
  },
  {
    "text": "maximum number of ac2 instances that you want so for example you could tell it you always wanted to run four instances",
    "start": "2709119",
    "end": "2716559"
  },
  {
    "text": "or sometimes we have customers who want to have one instance always running and they want to ensure that if something happens that instance if it fails over",
    "start": "2716559",
    "end": "2723240"
  },
  {
    "text": "it'll get restarted in that case they use autoscaling with kind of a floor and a ceiling set to one um so the answer is",
    "start": "2723240",
    "end": "2730400"
  },
  {
    "text": "yes it can uh you can also do it on time base for example you can say if you want to you can have five instances that are",
    "start": "2730400",
    "end": "2736040"
  },
  {
    "text": "running over the weekend and perhaps before people come in uh for work Monday morning you scale it up to 10 more",
    "start": "2736040",
    "end": "2743960"
  },
  {
    "text": "instances how are blob databases handled in Amazon well our relational database service is they're fully featured MySQL",
    "start": "2746079",
    "end": "2753240"
  },
  {
    "text": "SQL server and Oracle databases and so they're going to handle blob exactly the way that those vendors have designed the",
    "start": "2753240",
    "end": "2759319"
  },
  {
    "text": "databases to handle the blobs uh additionally we do have no SQL databases",
    "start": "2759319",
    "end": "2764680"
  },
  {
    "text": "but the those SQL databases are going to store everything as a Unicode and so you can't really store a high level of",
    "start": "2764680",
    "end": "2771680"
  },
  {
    "text": "binary data in it uh most customers are going to probably combine the database with using our Object Store S3 for blob",
    "start": "2771680",
    "end": "2779359"
  },
  {
    "text": "data because S3 is highly available and it has you know great degree of",
    "start": "2779359",
    "end": "2785079"
  },
  {
    "text": "performance and it can scale across so requests sometimes it makes more sense to have a key in the database and then",
    "start": "2785079",
    "end": "2790640"
  },
  {
    "text": "you go back to S3 in order to pull out uh that binary",
    "start": "2790640",
    "end": "2796480"
  },
  {
    "text": "data see does Amazon Dynamo DB have restrictions on the packet size so",
    "start": "2798319",
    "end": "2804480"
  },
  {
    "text": "underneath all of our all of our services it there are still web services and so we are restricted uh by the HTTP",
    "start": "2804480",
    "end": "2811839"
  },
  {
    "text": "protocols uh for the puts and the gets uh and that will include uh Amazon D DB",
    "start": "2811839",
    "end": "2817800"
  },
  {
    "text": "and I don't uh I don't have on the tip of my tongue what the exact size is but",
    "start": "2817800",
    "end": "2822880"
  },
  {
    "text": "uh that something I can follow up and and find out but yes there are restrictions on how much you can do in a",
    "start": "2822880",
    "end": "2827920"
  },
  {
    "text": "particular put in the get any plans to support rails and",
    "start": "2827920",
    "end": "2834800"
  },
  {
    "text": "beanock I would I would love to be able to to to address that question we've got basically beanock uh you know really",
    "start": "2834800",
    "end": "2841480"
  },
  {
    "text": "good for PHP Java and.net obviously uh it does not right now have support for",
    "start": "2841480",
    "end": "2846520"
  },
  {
    "text": "python or for Ruby but we have a lot of customers who ask for that so I would just say you know stay tuned for",
    "start": "2846520",
    "end": "2854759"
  },
  {
    "text": "that multiple IPS for a single ec2 instance seems to only be supported in",
    "start": "2858880",
    "end": "2864000"
  },
  {
    "text": "VPC when will it be supported in standard ec2 instances I actually I do not know uh what what our approach is on",
    "start": "2864000",
    "end": "2871079"
  },
  {
    "text": "that right now I'm going to need to follow up on that one uh within of course VPC you can now hand add uh a",
    "start": "2871079",
    "end": "2877280"
  },
  {
    "text": "couple of hundred of IP addresses to an ec2 instance but with the elastic IP you",
    "start": "2877280",
    "end": "2884400"
  },
  {
    "text": "can't so uh Simon thank you for asking about that one I will need to follow up on that and to see what we uh are doing",
    "start": "2884400",
    "end": "2890280"
  },
  {
    "text": "about",
    "start": "2890280",
    "end": "2892559"
  },
  {
    "text": "that let's see uh how does the Master Slave RDS work uh internally so what's",
    "start": "2895640",
    "end": "2901000"
  },
  {
    "text": "happening with uh when you do a multi multi-az RDS instance is you go you'll go to your original instance",
    "start": "2901000",
    "end": "2907280"
  },
  {
    "text": "and you can actually click this option that say Hey make this a multi-az RDS instance and it will back",
    "start": "2907280",
    "end": "2914680"
  },
  {
    "text": "itself up and it'll take a few minutes to do this but what will happen is you're you're actually going to be charged for two uh underlying ec2",
    "start": "2914680",
    "end": "2921559"
  },
  {
    "text": "instances and what's going to happen underneath it is that Master instance is going to synchronously send out and and",
    "start": "2921559",
    "end": "2927720"
  },
  {
    "text": "do uh copies of that data in a synchronous matter so you're guaranteed that the trans transaction is going",
    "start": "2927720",
    "end": "2933680"
  },
  {
    "text": "across those two instances uh were there anything to happen into that Master instance what happens is that endpoint",
    "start": "2933680",
    "end": "2939839"
  },
  {
    "text": "will fail over so that endpoint you're using for your database will fail over and point uh to the uh slave instance",
    "start": "2939839",
    "end": "2946480"
  },
  {
    "text": "that slave instance will become live now that failover process will actually take",
    "start": "2946480",
    "end": "2951559"
  },
  {
    "text": "a little bit of time so you will have downtime while that's happening and you'll have to build your application to",
    "start": "2951559",
    "end": "2956799"
  },
  {
    "text": "kind of deal with that but it'll be minimal downtime uh and especially compared to actually losing your master",
    "start": "2956799",
    "end": "2964760"
  },
  {
    "text": "database well those are all the questions that I had I think uh we're going to go ahead and uh wrap up now I",
    "start": "2965720",
    "end": "2972839"
  },
  {
    "text": "appreciate everyone uh dialing in and and listening to me drone on here for a few minutes if you've got questions that",
    "start": "2972839",
    "end": "2978319"
  },
  {
    "text": "we didn't get answered again uh let me just put up the uh",
    "start": "2978319",
    "end": "2984880"
  },
  {
    "text": "slide see just go over here",
    "start": "2985400",
    "end": "2993720"
  },
  {
    "text": "you can send uh your questions here and we'll follow up with you and again just want to remind you that if you are in",
    "start": "3008760",
    "end": "3014599"
  },
  {
    "text": "Australia please feel free to uh learn about our appreciation day this is the hashtag we'll have that updated with",
    "start": "3014599",
    "end": "3021440"
  },
  {
    "text": "information as it comes available and thanks again for",
    "start": "3021440",
    "end": "3029680"
  }
]