[
  {
    "start": "0",
    "end": "227000"
  },
  {
    "text": "foreign",
    "start": "480",
    "end": "3439"
  },
  {
    "text": "manager at AWS and I'm based out of Bangalore India welcome to AWS supports",
    "start": "7760",
    "end": "13320"
  },
  {
    "text": "you where AWS support experts provide tips to optimize performance in the cloud lower costs and provide you with",
    "start": "13320",
    "end": "19800"
  },
  {
    "text": "the best practices and design considerations joining me today is anirbin and gaurav from AWS support can",
    "start": "19800",
    "end": "26580"
  },
  {
    "text": "you give us a quick introduction anirban and gaurav thanks I said hey uh this is gaurav I am",
    "start": "26580",
    "end": "33120"
  },
  {
    "text": "a technical account manager based out of Delhi India and in my role I'm assigned with strategic isvs I enable customers",
    "start": "33120",
    "end": "39840"
  },
  {
    "text": "with migration support cost optimization and Security reviews I have interests in security and databases with focus on",
    "start": "39840",
    "end": "47640"
  },
  {
    "text": "Amazon Aurora and postgres equal and MySQL I'll hand it over to another one",
    "start": "47640",
    "end": "52800"
  },
  {
    "text": "hello everyone my name isena I'm a senior technical account manager in",
    "start": "52800",
    "end": "58440"
  },
  {
    "text": "Amazon web service I work with a large ISB customers helping them to build and",
    "start": "58440",
    "end": "64378"
  },
  {
    "text": "offer it scalable and high performance SAS application in the cloud I am",
    "start": "64379",
    "end": "69960"
  },
  {
    "text": "passionate about building scalable data warehouse and data solution for customers",
    "start": "69960",
    "end": "75840"
  },
  {
    "text": "over to you ASAP thanks so today we will be talking about",
    "start": "75840",
    "end": "81479"
  },
  {
    "text": "implementing SAS workload optimization with postgresql we will specifically focus on the Amazon RDS and Amazon",
    "start": "81479",
    "end": "88680"
  },
  {
    "text": "Aurora postgres of the AWS services now before we get into the details a",
    "start": "88680",
    "end": "93720"
  },
  {
    "text": "quick note to all the attendees online please use the chat window on the right hand side of your screen to let us know",
    "start": "93720",
    "end": "99900"
  },
  {
    "text": "where you're joining us from today and do share your thoughts and questions throughout the episode we look forward",
    "start": "99900",
    "end": "105600"
  },
  {
    "text": "to hearing from you we also provide a link to our survey so if you do if you'd",
    "start": "105600",
    "end": "110820"
  },
  {
    "text": "like to share how we did then please click on the link and leave your feedback so gaurav can you walk us",
    "start": "110820",
    "end": "116460"
  },
  {
    "text": "through what we are going to be discussing today absolutely thanks",
    "start": "116460",
    "end": "121500"
  },
  {
    "text": "so we have a packed agenda starting with introductions to RDS and Aurora from",
    "start": "121500",
    "end": "126659"
  },
  {
    "text": "there we go into the multi-tenant deployment models and talk about data partitioning with RDS also going into",
    "start": "126659",
    "end": "133200"
  },
  {
    "text": "the tenant isolation strategies using Amazon RDS we'll finally close it all",
    "start": "133200",
    "end": "138540"
  },
  {
    "text": "off with the demo throughout the discussion today we'll share links and resources with you via the chat we look",
    "start": "138540",
    "end": "144900"
  },
  {
    "text": "forward to your questions and shall try to try our best to take them on air please keep them coming",
    "start": "144900",
    "end": "150959"
  },
  {
    "text": "so with that I'll get started we begin with the customer story an isv or an independent software vendor",
    "start": "150959",
    "end": "158280"
  },
  {
    "text": "typically serves multiple customers in doing so they have a requirement to use attendance based approach for their SAS",
    "start": "158280",
    "end": "165239"
  },
  {
    "text": "workloads however they would still want to keep a few things in mind agility plays a",
    "start": "165239",
    "end": "171840"
  },
  {
    "text": "pivotal role as it determines the time to Market so that's on top of their priority list isvs are also conscious of",
    "start": "171840",
    "end": "179280"
  },
  {
    "text": "the effort needed to refactor the code they would also like the final solution to be secure",
    "start": "179280",
    "end": "185220"
  },
  {
    "text": "because security with is the center of everything that they do and finally keeping the cost Downs per tenant is",
    "start": "185220",
    "end": "192720"
  },
  {
    "text": "also something that our isvs are very very interested in so in this particular example for this",
    "start": "192720",
    "end": "198900"
  },
  {
    "text": "last ISB based out of Chennai the time on the account worked with the customer Architects to First Deep dive into their",
    "start": "198900",
    "end": "204959"
  },
  {
    "text": "current design and talk about their forward looking plans after due deliberations they suggested",
    "start": "204959",
    "end": "210360"
  },
  {
    "text": "using the bridge mode for their SAS workloads this was a happy middle path for them while the teams worked on",
    "start": "210360",
    "end": "216840"
  },
  {
    "text": "refactoring the code to eventually move into a pool model we'll definitely deep dive into the bridge and the pool models",
    "start": "216840",
    "end": "223319"
  },
  {
    "text": "in the coming slides so please stay tuned before we move any further I would like",
    "start": "223319",
    "end": "228959"
  },
  {
    "start": "227000",
    "end": "458000"
  },
  {
    "text": "to get us started with introductions to what is Amazon RDS and Amazon Aurora",
    "start": "228959",
    "end": "235080"
  },
  {
    "text": "Amazon relational database service was built by AWS to help their help the customers reduce the complexity in",
    "start": "235080",
    "end": "240900"
  },
  {
    "text": "supporting critical transactional applications RDS is available on several database",
    "start": "240900",
    "end": "247140"
  },
  {
    "text": "instance types and they are optimized for memory performance or i o depending on our customers needs we provide you",
    "start": "247140",
    "end": "254099"
  },
  {
    "text": "with six familiar database engines to choose from starting from Amazon Aurora which is compatible with mySQL and",
    "start": "254099",
    "end": "260040"
  },
  {
    "text": "postgrad MySQL postgresql mariadb SQL server and Oracle",
    "start": "260040",
    "end": "266520"
  },
  {
    "text": "RDS has made it easy to set up operate and scale a relational database in the",
    "start": "266520",
    "end": "271800"
  },
  {
    "text": "cloud it also helps you automate the time consuming Administration tasks such as",
    "start": "271800",
    "end": "277560"
  },
  {
    "text": "Hardware provisioning database setups patching and backups h a is just one click away so if you are",
    "start": "277560",
    "end": "285419"
  },
  {
    "text": "looking to get going RDS is the way to go it also provides cost efficiency and",
    "start": "285419",
    "end": "291600"
  },
  {
    "text": "is very easy to resize your setup once it's it's done",
    "start": "291600",
    "end": "297000"
  },
  {
    "text": "so what do we give you when we talk about RDS right we give you the ability to spend time innovating and building",
    "start": "297000",
    "end": "303479"
  },
  {
    "text": "your apps and manage and not spend time managing your infrastructure while you",
    "start": "303479",
    "end": "308580"
  },
  {
    "text": "focus on schema design query construction and query optimization we take care of the automated failovers the",
    "start": "308580",
    "end": "316740"
  },
  {
    "text": "backups the high availability the security and compliance needs that you and your organization has in the cloud",
    "start": "316740",
    "end": "324780"
  },
  {
    "text": "now looking at Amazon Arora Amazon Aurora took it a step further Amazon Aurora is a my Sequel and",
    "start": "324780",
    "end": "332039"
  },
  {
    "text": "postgres SQL compatible relational database built for cloud with the",
    "start": "332039",
    "end": "337440"
  },
  {
    "text": "performance and uh availability of a commercial database at one density cost",
    "start": "337440",
    "end": "343380"
  },
  {
    "text": "with the separation of storage and compute operations like backup are done without using your compute the",
    "start": "343380",
    "end": "350160"
  },
  {
    "text": "performance hence is built in it is scalable you can have up to 15 low",
    "start": "350160",
    "end": "356340"
  },
  {
    "text": "latency read replicas and especially using Amazon Global database which",
    "start": "356340",
    "end": "362280"
  },
  {
    "text": "supports multi-region read replication you can maintain low latency setup copies across not just",
    "start": "362280",
    "end": "369840"
  },
  {
    "text": "EAS but reasons all your backups are stored on S3 and you also have the",
    "start": "369840",
    "end": "375419"
  },
  {
    "text": "option of Fastback tracking using the point in time restore Amazon Aurora also currently builds its",
    "start": "375419",
    "end": "382440"
  },
  {
    "text": "storage volume in 10 GB logical blocks called protection groups the data in each protection group is replicated like",
    "start": "382440",
    "end": "390060"
  },
  {
    "text": "the across these six different storage nodes our customers can get up to 128 terabyte",
    "start": "390060",
    "end": "396360"
  },
  {
    "text": "worth of disk space for your mission critical databases so with this summary before we move on I",
    "start": "396360",
    "end": "402840"
  },
  {
    "text": "would like to have a quick check with our moderator if there are any questions as we proceed on",
    "start": "402840",
    "end": "410060"
  },
  {
    "text": "uh nothing yet gaurav so maybe we can continue okay thanks awesome so just doing a",
    "start": "411300",
    "end": "418560"
  },
  {
    "text": "double click on the uh architecture of Amazon Aurora right so here I am showing",
    "start": "418560",
    "end": "424440"
  },
  {
    "text": "you the graphical view of how the storage blocks are placed in different availability zones right uh these uh",
    "start": "424440",
    "end": "431639"
  },
  {
    "text": "storage blocks get replicated in the back end asynchronously where and we wait for four by six uh right Quorum and",
    "start": "431639",
    "end": "440400"
  },
  {
    "text": "three by six read quorum to give you the uh satisfaction and the consistency",
    "start": "440400",
    "end": "445500"
  },
  {
    "text": "that's needed in a commercial database um so from here I would like my",
    "start": "445500",
    "end": "451919"
  },
  {
    "text": "colleague anirban to take over to take us further",
    "start": "451919",
    "end": "456500"
  },
  {
    "start": "458000",
    "end": "921000"
  },
  {
    "text": "hello uh yes so in this section thanks gaurav so in this section we are going",
    "start": "458759",
    "end": "464400"
  },
  {
    "text": "to talk about various isolation strategies that can be applied when designing a multi-tenant SAS application",
    "start": "464400",
    "end": "472699"
  },
  {
    "text": "so when you talk about a sales session really we talk about two halves one is",
    "start": "474060",
    "end": "480599"
  },
  {
    "text": "application plane where your core business function works like you implement multi-tenant web application",
    "start": "480599",
    "end": "487400"
  },
  {
    "text": "microservices data particilling and tenant isolation other Hub is actually a",
    "start": "487400",
    "end": "492720"
  },
  {
    "text": "control plane where you it's it's mostly a horizontal services that Encompass",
    "start": "492720",
    "end": "498419"
  },
  {
    "text": "your application to operate and manage your application as a source solution",
    "start": "498419",
    "end": "504960"
  },
  {
    "text": "now when you newly onboard um tenant and connect an identity to 10",
    "start": "504960",
    "end": "510300"
  },
  {
    "text": "in context we talk about control plane we talk about a control plane where you are collecting matrixes and analytics",
    "start": "510300",
    "end": "516659"
  },
  {
    "text": "for your tenant it also connects your like when you",
    "start": "516659",
    "end": "521760"
  },
  {
    "text": "connect your tenant and your billing and metering story that is also a part of control plane",
    "start": "521760",
    "end": "527820"
  },
  {
    "text": "so it's really about a shared services that putting that you put around your",
    "start": "527820",
    "end": "533279"
  },
  {
    "text": "application that lets your lets you to position your solution as an sas",
    "start": "533279",
    "end": "538620"
  },
  {
    "text": "solution now in that application plane you can put all kinds of different systems right",
    "start": "538620",
    "end": "544440"
  },
  {
    "text": "but as long as you are putting all these blue boxes horizontal services to manage",
    "start": "544440",
    "end": "550140"
  },
  {
    "text": "and operate your application then it become a SAS solution",
    "start": "550140",
    "end": "555320"
  },
  {
    "text": "so in the next uh let's walk through what are the core architecture concept when you talk about assess right we are",
    "start": "559260",
    "end": "567060"
  },
  {
    "text": "talking how we can physically and logically storing the data for one tenant from another tenant that is",
    "start": "567060",
    "end": "573120"
  },
  {
    "text": "called Data partitioning right when you when we actually uh referring data",
    "start": "573120",
    "end": "578940"
  },
  {
    "text": "partitioning we are referring that not it is not the same as a tenant isolation so tenant isolation where we ensure that",
    "start": "578940",
    "end": "587279"
  },
  {
    "text": "1 10n cannot access another tenant's resources so no matter what if you are",
    "start": "587279",
    "end": "594120"
  },
  {
    "text": "using IM or any other security construct you must ensure that one tenant cannot",
    "start": "594120",
    "end": "599580"
  },
  {
    "text": "get to another 1080 sources we'll we'll talk about SAS identity so",
    "start": "599580",
    "end": "606360"
  },
  {
    "text": "SAS identity is a basically where you are connecting your user identity to a tenant context",
    "start": "606360",
    "end": "612240"
  },
  {
    "text": "now and also it is important how this tenant context is flow through your",
    "start": "612240",
    "end": "618540"
  },
  {
    "text": "system right onboarding is another concept where your tenant gets introduced to the system and",
    "start": "618540",
    "end": "626160"
  },
  {
    "text": "how that experience is going to look like in case of tiering where we talk about",
    "start": "626160",
    "end": "633320"
  },
  {
    "text": "mostly what type of like basic uh tearing or Advanced hearing so in that",
    "start": "633320",
    "end": "640260"
  },
  {
    "text": "case how you offer your feature to your different tenants right right and then Master then metering and",
    "start": "640260",
    "end": "646860"
  },
  {
    "text": "billing system is just to measure the tenant consumptions and the activity in",
    "start": "646860",
    "end": "652560"
  },
  {
    "text": "your system and generate build accordingly",
    "start": "652560",
    "end": "657139"
  },
  {
    "text": "one of the key requirement to address says is how you do isolate the data as",
    "start": "659160",
    "end": "665399"
  },
  {
    "text": "well as the compute resources so there are some key driver for that",
    "start": "665399",
    "end": "670500"
  },
  {
    "text": "isolation strategy tiering is like basic gold and premium",
    "start": "670500",
    "end": "676920"
  },
  {
    "text": "feature which you will offer and has a different SLA requirement for your for your tenant and that drives your",
    "start": "676920",
    "end": "683880"
  },
  {
    "text": "different isolation strategy it can be also a Noisy Neighbor scenario or your compliance requirement",
    "start": "683880",
    "end": "691079"
  },
  {
    "text": "where you are forced to use no share infrastructure",
    "start": "691079",
    "end": "697019"
  },
  {
    "text": "or it could be a legacy architecture that impending you to get into the",
    "start": "697019",
    "end": "702300"
  },
  {
    "text": "multi-tenant environment your isolation strategy could be driven by your new opportunity like large",
    "start": "702300",
    "end": "709260"
  },
  {
    "text": "Enterprise or SMB Market that you are trying to trying to cater",
    "start": "709260",
    "end": "715760"
  },
  {
    "text": "now tenant isolation is one of the foundational topic for every SAS",
    "start": "717000",
    "end": "724200"
  },
  {
    "text": "provider that must be addressed crossing the boundary of any form would",
    "start": "724200",
    "end": "730260"
  },
  {
    "text": "represent a significant unrecoverable event for a SAS business",
    "start": "730260",
    "end": "736260"
  },
  {
    "text": "the domain compliance deployment model or selection of",
    "start": "736260",
    "end": "741720"
  },
  {
    "text": "different AWS Services all brings its own unique set of consideration when you",
    "start": "741720",
    "end": "747180"
  },
  {
    "text": "are actually creating a tenant isolation story so there are some common models you find",
    "start": "747180",
    "end": "754260"
  },
  {
    "text": "us talking about we have mainly three architectural approach",
    "start": "754260",
    "end": "759899"
  },
  {
    "text": "on the left hand side you have a silo where nothing is shared",
    "start": "759899",
    "end": "765420"
  },
  {
    "text": "but this will be operationally and cost wise inefficient on the right hand side you have pool model",
    "start": "765420",
    "end": "772920"
  },
  {
    "text": "where it is a most common multi-tenancy multi multi-cancy architecture which",
    "start": "772920",
    "end": "778019"
  },
  {
    "text": "generally says all the SAS application followed where infrastructure is been shared and that",
    "start": "778019",
    "end": "786000"
  },
  {
    "text": "brings in lot of optimization or operational efficiency but achieving it would require an implementation of",
    "start": "786000",
    "end": "792360"
  },
  {
    "text": "appropriate tenant isolation strategy in the middle you have a bridge model",
    "start": "792360",
    "end": "798060"
  },
  {
    "text": "in which case in certain of the layers of architecture are share others are not",
    "start": "798060",
    "end": "804620"
  },
  {
    "text": "now before I move on uh the next section I would I'll take a pause and see if",
    "start": "807360",
    "end": "815279"
  },
  {
    "text": "there any question so far uh yes unable so do we have one uh we",
    "start": "815279",
    "end": "821279"
  },
  {
    "text": "have one question from the audience member um the question is that uh these isolation models that you just uh you",
    "start": "821279",
    "end": "826560"
  },
  {
    "text": "know spoke about are they exclusively running to postgres on RDS uh is what the question is",
    "start": "826560",
    "end": "833779"
  },
  {
    "text": "okay so uh no so these are the architectural concept you can fit your any AWS",
    "start": "833820",
    "end": "841380"
  },
  {
    "text": "Services you are using into those architectural Concepts it is overall the",
    "start": "841380",
    "end": "846480"
  },
  {
    "text": "way you are handling the tenant isolation so that we we are going to talk about",
    "start": "846480",
    "end": "851880"
  },
  {
    "text": "those things in a following sections even the demo will uh give you an idea how can you actually separate those",
    "start": "851880",
    "end": "858360"
  },
  {
    "text": "things out right okay yeah thanks and I think we also have a question from the previous",
    "start": "858360",
    "end": "863820"
  },
  {
    "text": "section to gaurav uh gaurav so the question is what if I launch a single AC or a single instance Aurora right do I",
    "start": "863820",
    "end": "871079"
  },
  {
    "text": "still get the benefit of the shared stories across disease yes um that's a very good question thanks",
    "start": "871079",
    "end": "876480"
  },
  {
    "text": "for asking and and yes you would the uh replication is uh not uh it's done on",
    "start": "876480",
    "end": "884160"
  },
  {
    "text": "the behind the scenes for you to give you the needed reliability and high availability while using Aurora so it is",
    "start": "884160",
    "end": "890339"
  },
  {
    "text": "available yes okay thank you so I think uh even if we go with a single instance uh single",
    "start": "890339",
    "end": "896579"
  },
  {
    "text": "Aurora instance for my cluster my storage would still be spun across multiple easies thereby making it more",
    "start": "896579",
    "end": "901920"
  },
  {
    "text": "durable right exactly exactly yes that's how it's designed uh to give you the",
    "start": "901920",
    "end": "907380"
  },
  {
    "text": "most uh uh resiliency and and high availability while using Aurora",
    "start": "907380",
    "end": "912839"
  },
  {
    "text": "perfect perfect thanks thanks I think we can continue",
    "start": "912839",
    "end": "918360"
  },
  {
    "text": "thank you so moving on uh in this section I'm",
    "start": "918360",
    "end": "924120"
  },
  {
    "start": "921000",
    "end": "1688000"
  },
  {
    "text": "going to talk about attribute based access control and how I am an attribute",
    "start": "924120",
    "end": "929459"
  },
  {
    "text": "based Access Control can be leveraged to achieve data partitioning in RDS postgresql",
    "start": "929459",
    "end": "937279"
  },
  {
    "text": "so the fundamental goal of a tenant isolation is to ensure one tenant is",
    "start": "940380",
    "end": "946860"
  },
  {
    "text": "prevented from accessing the data and resources of another tenant now let's drive deep how I am and tenant",
    "start": "946860",
    "end": "955680"
  },
  {
    "text": "isolation works together now there are there are three main",
    "start": "955680",
    "end": "962579"
  },
  {
    "text": "tenant isolation method in IIM let's briefly review them one by one",
    "start": "962579",
    "end": "969660"
  },
  {
    "text": "so one is role-based Access Control where each tenant has a dedicated IM",
    "start": "969660",
    "end": "975420"
  },
  {
    "text": "role or a static set of IM role uses to access the tenant resources",
    "start": "975420",
    "end": "981420"
  },
  {
    "text": "the number of roles in our back equals to the number of the definite role",
    "start": "981420",
    "end": "986940"
  },
  {
    "text": "definition multiplied by the number of tenants so rvac works well when you have a very",
    "start": "986940",
    "end": "993060"
  },
  {
    "text": "small number of tenant and relatively static policies dynamically generate iron policy is the",
    "start": "993060",
    "end": "1000199"
  },
  {
    "text": "method where you dynamically generate IM policy for a tenant according to the user identity",
    "start": "1000199",
    "end": "1006440"
  },
  {
    "text": "you may use this method when you have a highly Dynamic environment where roles",
    "start": "1006440",
    "end": "1012139"
  },
  {
    "text": "definitely definition frequently change or added you may also",
    "start": "1012139",
    "end": "1017720"
  },
  {
    "text": "choose this if you prefer to generate or manage iron policy by using your code",
    "start": "1017720",
    "end": "1023959"
  },
  {
    "text": "finally attribute based access control a back in this method it is suitable for a",
    "start": "1023959",
    "end": "1030438"
  },
  {
    "text": "wide range of SAS application because it lets you rely on the native construct of",
    "start": "1030439",
    "end": "1035540"
  },
  {
    "text": "IM for policy management you may choose a vac if your use case",
    "start": "1035540",
    "end": "1041298"
  },
  {
    "text": "doesn't require to support for a frequently changed or added role definition",
    "start": "1041299",
    "end": "1047199"
  },
  {
    "text": "now in case of attributes attributes are known as a custom tag in AWS",
    "start": "1049520",
    "end": "1055940"
  },
  {
    "text": "it is used for cost allocation Discovery Access Control in a bag instead of multiple role and",
    "start": "1055940",
    "end": "1063200"
  },
  {
    "text": "permission set for different resources you are going to have one rule based permission",
    "start": "1063200",
    "end": "1069559"
  },
  {
    "text": "on the left identities has attributes and you set those attributes to the identities on the right you have",
    "start": "1069559",
    "end": "1076700"
  },
  {
    "text": "resources and resources also can be set a different tag or attributes",
    "start": "1076700",
    "end": "1082340"
  },
  {
    "text": "in the middle you have a very simple rule that is based on matching",
    "start": "1082340",
    "end": "1087559"
  },
  {
    "text": "so you can write a very powerful simple generic rule that allow you to match a",
    "start": "1087559",
    "end": "1094280"
  },
  {
    "text": "custom tags in our demo today we are going to show",
    "start": "1094280",
    "end": "1099320"
  },
  {
    "text": "you that how you can tag a role and a resources and you kind of start seeing that the",
    "start": "1099320",
    "end": "1106220"
  },
  {
    "text": "how SAS application can scale with thousands of tenant because now your job is not to update",
    "start": "1106220",
    "end": "1112400"
  },
  {
    "text": "the policy rather your job is to make sure that attributes are set properly for your",
    "start": "1112400",
    "end": "1118340"
  },
  {
    "text": "tenant and I should and resources and then the permission will take care of themselves",
    "start": "1118340",
    "end": "1125740"
  },
  {
    "text": "so let's explore how you apply a data partitioning Concept in the",
    "start": "1127400",
    "end": "1132980"
  },
  {
    "text": "SAS application if you look at rdas",
    "start": "1132980",
    "end": "1138020"
  },
  {
    "text": "in the in The Silo model we could be separate database instances or cluster",
    "start": "1138020",
    "end": "1143480"
  },
  {
    "text": "per tenant with a complete separate set of table for each tenant",
    "start": "1143480",
    "end": "1148520"
  },
  {
    "text": "The Silo model excels in case of when you need a tenant performance and",
    "start": "1148520",
    "end": "1153799"
  },
  {
    "text": "security isolation it also completely eliminates a noise in",
    "start": "1153799",
    "end": "1159679"
  },
  {
    "text": "ever phenomena on the other hand you have we can Implement a pool model by",
    "start": "1159679",
    "end": "1166520"
  },
  {
    "text": "provisioning a single postgres instances and then use a row level security to",
    "start": "1166520",
    "end": "1172760"
  },
  {
    "text": "maintain the tenant data isolation row level security policies restrict which rows in the table are returned by",
    "start": "1172760",
    "end": "1179660"
  },
  {
    "text": "a select queries so this is where the isolation become a",
    "start": "1179660",
    "end": "1184940"
  },
  {
    "text": "little difficult because your database tables are now shared by multiple tenants and there should be a fine-grained",
    "start": "1184940",
    "end": "1192440"
  },
  {
    "text": "Access Control to protect attendant resources so unlike Silo example",
    "start": "1192440",
    "end": "1199039"
  },
  {
    "text": "resource based access cannot be used to achieve tenant isolation",
    "start": "1199039",
    "end": "1204160"
  },
  {
    "text": "instead a single postgres instance must be able to process the request from all",
    "start": "1204160",
    "end": "1209299"
  },
  {
    "text": "the tenants and isolate specific to the tenant or items based on their context",
    "start": "1209299",
    "end": "1218200"
  },
  {
    "text": "now when we talk about Silo isolation we focus first on the resource-based",
    "start": "1220160",
    "end": "1227419"
  },
  {
    "text": "isolation right in this case our isolation model is all one where the",
    "start": "1227419",
    "end": "1233059"
  },
  {
    "text": "tenant is essentially isolated in a single resources like a single database instance is a",
    "start": "1233059",
    "end": "1239900"
  },
  {
    "text": "single compute node and here the isolation boundary is actually a entire",
    "start": "1239900",
    "end": "1245179"
  },
  {
    "text": "resources and you it is much easier to build because your isolation model",
    "start": "1245179",
    "end": "1251059"
  },
  {
    "text": "usually construct their construct type like IM policies roles that works on the",
    "start": "1251059",
    "end": "1256700"
  },
  {
    "text": "resource level and can restrict your access at this level",
    "start": "1256700",
    "end": "1263620"
  },
  {
    "text": "but when we have a pool isolation level and that environment in the pool",
    "start": "1265039",
    "end": "1270200"
  },
  {
    "text": "environment it has to be an item level isolation",
    "start": "1270200",
    "end": "1275360"
  },
  {
    "text": "so here we need a more fine-grained view of the isolation because now your tenant",
    "start": "1275360",
    "end": "1282559"
  },
  {
    "text": "information is actually shared within a resource as an individual item",
    "start": "1282559",
    "end": "1288679"
  },
  {
    "text": "so in this example I have a database table where you can see an individual item are associated",
    "start": "1288679",
    "end": "1294860"
  },
  {
    "text": "with multiple tenants now this could be an rdas or any databases where you store the data",
    "start": "1294860",
    "end": "1301460"
  },
  {
    "text": "the idea is that we are now moving inside the resources and now individual",
    "start": "1301460",
    "end": "1307240"
  },
  {
    "text": "item inside the resources are the things we need to isolate",
    "start": "1307240",
    "end": "1312740"
  },
  {
    "text": "now this is where the isolation gets little tricky we we have to Define this equivalent",
    "start": "1312740",
    "end": "1319880"
  },
  {
    "text": "policy on the on the table and these policy should restrict the rows in that",
    "start": "1319880",
    "end": "1325580"
  },
  {
    "text": "table that are returned via select queries or that that is affected by insert update",
    "start": "1325580",
    "end": "1333140"
  },
  {
    "text": "or delete commands now this enforcement of rdbms low level",
    "start": "1333140",
    "end": "1338419"
  },
  {
    "text": "isolation policy at the table is complex and it is also a burden of your software",
    "start": "1338419",
    "end": "1344179"
  },
  {
    "text": "developer now in The Silo environment when you are",
    "start": "1344179",
    "end": "1352159"
  },
  {
    "text": "isolating a resource level we can rely on the time of deployment so when you are deploying the resources you create",
    "start": "1352159",
    "end": "1358760"
  },
  {
    "text": "an IM role attached it to the resource and then the isolation level is done",
    "start": "1358760",
    "end": "1365179"
  },
  {
    "text": "but when you're talking about ITIL item level isolation in the pool model we can't really on the time",
    "start": "1365179",
    "end": "1371960"
  },
  {
    "text": "do it in the deployment time we have to have some way to do it in a runtime or we called as you called it as",
    "start": "1371960",
    "end": "1380120"
  },
  {
    "text": "a runtime applied or runtime if enforced isolation so at the run time when tenant comes in",
    "start": "1380120",
    "end": "1387200"
  },
  {
    "text": "they try to access some resources they all will be coming as an as an",
    "start": "1387200",
    "end": "1392659"
  },
  {
    "text": "environment in the same resources so in the pool resources at the runtime our code actually has to go out and say",
    "start": "1392659",
    "end": "1399559"
  },
  {
    "text": "that oh you have this tenant context or you are coming from coming as an tenant three",
    "start": "1399559",
    "end": "1407179"
  },
  {
    "text": "let me go and grab what 10 entry can do by grabbing it a 10 10 and 3 policies",
    "start": "1407179",
    "end": "1414200"
  },
  {
    "text": "and then apply the policy and the runtime to scope down the access",
    "start": "1414200",
    "end": "1419360"
  },
  {
    "text": "now your resource when resource is deployed it had to be deployed in a very",
    "start": "1419360",
    "end": "1425419"
  },
  {
    "text": "wider context to support all the tenant can come in now at the runtime we have to resolve",
    "start": "1425419",
    "end": "1431900"
  },
  {
    "text": "the tenant called find out which tenant it is coming apply the policy dynamically based on",
    "start": "1431900",
    "end": "1438200"
  },
  {
    "text": "the incoming tenant context and then this this this will be coscoped",
    "start": "1438200",
    "end": "1444500"
  },
  {
    "text": "your access now this context gets applied when you are using attribute based Access Control",
    "start": "1444500",
    "end": "1450140"
  },
  {
    "text": "so our code sensor request to the database authorization and gets the credentials back and access the piece of",
    "start": "1450140",
    "end": "1457039"
  },
  {
    "text": "data it is it is supposed to access or it is allowed to access and that's the way how we scope our",
    "start": "1457039",
    "end": "1464539"
  },
  {
    "text": "access so here in the runtime enforcement and isolation is really comes in the",
    "start": "1464539",
    "end": "1470419"
  },
  {
    "text": "scenario where you are doing item level isolation so let's review uh sample Evac policy",
    "start": "1470419",
    "end": "1477380"
  },
  {
    "text": "with a session tag however can help you to do the isolation tenant tenant",
    "start": "1477380",
    "end": "1483140"
  },
  {
    "text": "isolation in an item level so this is a sample policy where a",
    "start": "1483140",
    "end": "1490280"
  },
  {
    "text": "persons and accents are allowed when the user resource tag and principal tag have the same value for the tenant",
    "start": "1490280",
    "end": "1497240"
  },
  {
    "text": "key now once off once you have this permission you go and create a resource you can",
    "start": "1497240",
    "end": "1504320"
  },
  {
    "text": "modify the resources you can tag it the way you want but you don't have to charge touch the",
    "start": "1504320",
    "end": "1509840"
  },
  {
    "text": "policy when the new tenant comes in because it will be it will be applied in",
    "start": "1509840",
    "end": "1515600"
  },
  {
    "text": "the runtime so this gives a lot of flexibility to the administrator and lot",
    "start": "1515600",
    "end": "1521179"
  },
  {
    "text": "of freedom for developer to go ahead and do it do the development now before you",
    "start": "1521179",
    "end": "1526700"
  },
  {
    "text": "actually before I hand over to gaurav I would I would take a I I will",
    "start": "1526700",
    "end": "1534440"
  },
  {
    "text": "stick a pause and ask Assad if there is any question um yes so there is a question and also",
    "start": "1534440",
    "end": "1541460"
  },
  {
    "text": "uh you know I had a couple of queries myself so firstly let me pick up the question from the audience so one of the",
    "start": "1541460",
    "end": "1547700"
  },
  {
    "text": "members is looking to understand if the row level security is supported both in",
    "start": "1547700",
    "end": "1552860"
  },
  {
    "text": "RDS postgres as well as Aurora postgres yes it is supported in the both RDS",
    "start": "1552860",
    "end": "1559460"
  },
  {
    "text": "postgres and Aurora postgres okay okay thank you and based on what",
    "start": "1559460",
    "end": "1564799"
  },
  {
    "text": "what we were highlighting so far right is it is it possible uh let's say to break out a tenant and then read the",
    "start": "1564799",
    "end": "1571100"
  },
  {
    "text": "data yes so when you when you're talking about the tenant you have to we talked",
    "start": "1571100",
    "end": "1578419"
  },
  {
    "text": "about SAS identity so you have to put your user identity and user identity",
    "start": "1578419",
    "end": "1583640"
  },
  {
    "text": "with a tenant context which become a SAS identity when you have a SAS identity and throws it to the the system in this",
    "start": "1583640",
    "end": "1591559"
  },
  {
    "text": "system you can actually separate the terrain data either within a single table or you can actually separate with",
    "start": "1591559",
    "end": "1598460"
  },
  {
    "text": "the database different different schemas and creating a separate table okay okay thank you and one one",
    "start": "1598460",
    "end": "1606080"
  },
  {
    "text": "additional thing is uh how can I be let's say 100 sure that my tenant data is completely isolated",
    "start": "1606080",
    "end": "1614320"
  },
  {
    "text": "okay so so there's uh in the demo I will show you that when you actually create a",
    "start": "1614539",
    "end": "1622520"
  },
  {
    "text": "role you you don't give in the first uh time when you are creating a policy you",
    "start": "1622520",
    "end": "1627919"
  },
  {
    "text": "are not giving anything and that at runtime you are setting the context by by sending a tag key based on",
    "start": "1627919",
    "end": "1636080"
  },
  {
    "text": "that key the scope has been defined so it is more likely when you are when you are when",
    "start": "1636080",
    "end": "1642200"
  },
  {
    "text": "you are when one role is assuming another role to get an access of the data from a database",
    "start": "1642200",
    "end": "1648559"
  },
  {
    "text": "that that particular time and the runtime applied context is very limited",
    "start": "1648559",
    "end": "1654860"
  },
  {
    "text": "right right it is it has to be like once you set it correctly by your application",
    "start": "1654860",
    "end": "1660740"
  },
  {
    "text": "it is ensure that your IM construct itself will create a STS STS token and",
    "start": "1660740",
    "end": "1668900"
  },
  {
    "text": "then scoped it and and uh like ensure that the tenant isolation has been has",
    "start": "1668900",
    "end": "1675140"
  },
  {
    "text": "been has been has been done on that level okay then I'll probably wait for the",
    "start": "1675140",
    "end": "1680600"
  },
  {
    "text": "demo then yeah yeah thanks thanks everybody no more questions at the at the moment so maybe",
    "start": "1680600",
    "end": "1685940"
  },
  {
    "text": "we can let gaurav proceed all right yeah thanks",
    "start": "1685940",
    "end": "1691179"
  },
  {
    "start": "1688000",
    "end": "2371000"
  },
  {
    "text": "so as an urban was taking us through uh the different isolations uh I think",
    "start": "1691179",
    "end": "1697460"
  },
  {
    "text": "that's uh a good point for us to talk about a high level architecture let's start with a very simple uh three-tier",
    "start": "1697460",
    "end": "1704360"
  },
  {
    "text": "web application architecture in which the static content is handled uh via cloudfront through S3 and the dynamic",
    "start": "1704360",
    "end": "1711740"
  },
  {
    "text": "requests flow into the API Gateway uh post processing of the business logic and finally makes it to the data store",
    "start": "1711740",
    "end": "1719419"
  },
  {
    "text": "at the bracket right so this is the basic structure of the application that",
    "start": "1719419",
    "end": "1724460"
  },
  {
    "text": "we are going to start with now in this example we have also included two simple e-commerce micro Services product and",
    "start": "1724460",
    "end": "1730880"
  },
  {
    "text": "order that provide basic uh crud operations which is",
    "start": "1730880",
    "end": "1737299"
  },
  {
    "text": "create read update and delete and each of these uh Services uh use Amazon RDS",
    "start": "1737299",
    "end": "1742940"
  },
  {
    "text": "to storage store and manage their data so overall this architecture includes the uh fundamental uh elements that are",
    "start": "1742940",
    "end": "1750679"
  },
  {
    "text": "part of a basic serverless web application now as we move forward and talk about the different",
    "start": "1750679",
    "end": "1757240"
  },
  {
    "text": "models and and the modes we'll introduce the IM policies and tenant context that",
    "start": "1757240",
    "end": "1763520"
  },
  {
    "text": "will be used to ensure the tenants are only allowed to access their own resources and not the resources that are",
    "start": "1763520",
    "end": "1771080"
  },
  {
    "text": "not supposed to be under their purview uh so so let's get started so I'll just",
    "start": "1771080",
    "end": "1776600"
  },
  {
    "text": "quickly change to a different view so looking at the tenant isolation using",
    "start": "1776600",
    "end": "1782120"
  },
  {
    "text": "postgres equal as focusing on The Silo model right so in this uh Silo model uh it's it the",
    "start": "1782120",
    "end": "1789679"
  },
  {
    "text": "implementation is done by provisioning a postgres equal instance for each tenant in an application now because of this",
    "start": "1789679",
    "end": "1797179"
  },
  {
    "text": "structure this model excels at tenant performance security isolation and it",
    "start": "1797179",
    "end": "1802580"
  },
  {
    "text": "completely animates uh any Noisy Neighbor phenomenon that you may otherwise encounter right here we are",
    "start": "1802580",
    "end": "1809539"
  },
  {
    "text": "using a separate API Gateway for each tenant however there is also an approach",
    "start": "1809539",
    "end": "1814940"
  },
  {
    "text": "in which the tenants can potentially share an API Gateway and the API Gateway",
    "start": "1814940",
    "end": "1820460"
  },
  {
    "text": "then routes the traffic to a tenant specific business function and then it eventually goes into the database",
    "start": "1820460",
    "end": "1828500"
  },
  {
    "text": "um so in in this setup uh of course there is some duplication uh all the Lambda",
    "start": "1828500",
    "end": "1835580"
  },
  {
    "text": "functions have the same code uh and they have uh similar structure in terms of",
    "start": "1835580",
    "end": "1841279"
  },
  {
    "text": "database because that's your application schema that you want uh but it's uh duplicated and then each endpoint is uh",
    "start": "1841279",
    "end": "1849200"
  },
  {
    "text": "defined in an environment variable of Lambda so that a separate role for each",
    "start": "1849200",
    "end": "1854360"
  },
  {
    "text": "Lambda function can be used uh permitting it to only access that endpoint",
    "start": "1854360",
    "end": "1860299"
  },
  {
    "text": "and uh eventually as roles work right they have an IM policy that uh grants",
    "start": "1860299",
    "end": "1866299"
  },
  {
    "text": "them permission only to a specific uh tenant on the instance um so in case of any cross tenant um",
    "start": "1866299",
    "end": "1874340"
  },
  {
    "text": "connect a call would be denied by uh at the IM level itself because it won't match the endpoint resource name as",
    "start": "1874340",
    "end": "1880880"
  },
  {
    "text": "specified in the policy so I I would say the key takeaway of The Silo model is that Lambda functions the endpoints and",
    "start": "1880880",
    "end": "1887480"
  },
  {
    "text": "roles each map uh one to one at the individual tenant level now uh moving",
    "start": "1887480",
    "end": "1892880"
  },
  {
    "text": "from here to the uh next one which is the pool model um",
    "start": "1892880",
    "end": "1898520"
  },
  {
    "text": "the pool model is implemented by provisioning one single post gray SQL",
    "start": "1898520",
    "end": "1904100"
  },
  {
    "text": "instance it could be again uh Amazon RDS or Aurora as an urban explained uh both",
    "start": "1904100",
    "end": "1909380"
  },
  {
    "text": "of those supported and then using the row level security we can maintain the",
    "start": "1909380",
    "end": "1915320"
  },
  {
    "text": "tenant data isolation now these RLS or row level security policies restrict which rows in a table are returned by",
    "start": "1915320",
    "end": "1922820"
  },
  {
    "text": "select insert update and delete commands right so this is where isolation is a",
    "start": "1922820",
    "end": "1928340"
  },
  {
    "text": "little tricky especially if you are trying to do it uh statically uh and uh",
    "start": "1928340",
    "end": "1934039"
  },
  {
    "text": "therefore we recommend that you use a final grain IM policies to protect your resources and um",
    "start": "1934039",
    "end": "1941299"
  },
  {
    "text": "because unlike unlike The Silo model example right the execution role cannot be constrained to a specific tenant it",
    "start": "1941299",
    "end": "1947720"
  },
  {
    "text": "must be able to process requests from all tenants but it still it should still be able to only read the data that's uh",
    "start": "1947720",
    "end": "1954260"
  },
  {
    "text": "tied to a particular tenant now as each request would come in in this model to the Lambda function we will apply a",
    "start": "1954260",
    "end": "1961880"
  },
  {
    "text": "policy at uh run time or dynamically based on the incoming tenants context right so this context gets applied using",
    "start": "1961880",
    "end": "1970059"
  },
  {
    "text": "uh something called attributes based access control or ABAC so attribute",
    "start": "1970059",
    "end": "1976460"
  },
  {
    "text": "based Access Control allows you to parameterize your policy to precisely Define the authorization that's needed",
    "start": "1976460",
    "end": "1982159"
  },
  {
    "text": "and again IM then validates the request Returns the database uh password as a",
    "start": "1982159",
    "end": "1987919"
  },
  {
    "text": "token as a one-time token and then Lambda can use that to call the Aurora",
    "start": "1987919",
    "end": "1993440"
  },
  {
    "text": "postgres compatible database or or the postgrades RDS right and this is where uh anirban will take us through in the",
    "start": "1993440",
    "end": "2000460"
  },
  {
    "text": "demo and then go go into a little more detail on on how this is working and we use tags here so tenant ID tags are used",
    "start": "2000460",
    "end": "2008320"
  },
  {
    "text": "to clearly Define and enunciate that the access once granted basis of the tag has",
    "start": "2008320",
    "end": "2016179"
  },
  {
    "text": "to of course the attack has to match the resource name narrowing the data to just those rows and then the data operations",
    "start": "2016179",
    "end": "2023620"
  },
  {
    "text": "are allowed okay so this is how how the uh this",
    "start": "2023620",
    "end": "2029140"
  },
  {
    "text": "model pool model works and now looking at the the bridge mode right so this uh",
    "start": "2029140",
    "end": "2034980"
  },
  {
    "text": "represents actually a combination of The Silo and pool models um so here um not all but some of the",
    "start": "2034980",
    "end": "2042580"
  },
  {
    "text": "layers at the infrastructure level are shared While others are dedicated to each standards uh so there are",
    "start": "2042580",
    "end": "2048280"
  },
  {
    "text": "advantages of using uh Silo and pool and then this is a happy middle path which",
    "start": "2048280",
    "end": "2053560"
  },
  {
    "text": "has its own advantages as well uh so in in our Bridge Approach the API and Lambda function are shared but the uh",
    "start": "2053560",
    "end": "2062138"
  },
  {
    "text": "uh post gray SQL instance uh is is provisioned at the tenant level and to",
    "start": "2062139",
    "end": "2069638"
  },
  {
    "text": "maintain uh tenant data isolation uh you use the logical constructs within the uh",
    "start": "2069639",
    "end": "2075398"
  },
  {
    "text": "database schema and logically separate the data now the entry point to this",
    "start": "2075399",
    "end": "2081280"
  },
  {
    "text": "solution looks very similar to what the pool model is right it again uses uh",
    "start": "2081280",
    "end": "2086500"
  },
  {
    "text": "ABAC and fine-grained flexibility of dynamic policies to control any access to the tenant data this approach also",
    "start": "2086500",
    "end": "2093280"
  },
  {
    "text": "requires that database connectivity from all the Lambda function uh is allowed and then",
    "start": "2093280",
    "end": "2100660"
  },
  {
    "text": "shared Lambda execution role can be used to achieve that so in this design the",
    "start": "2100660",
    "end": "2107200"
  },
  {
    "text": "Lambda function takes the tenant name from the context uh passed as a custom clean uh Java or web token or JWT and",
    "start": "2107200",
    "end": "2118480"
  },
  {
    "text": "then we use the tenant identifier as a database name to access the specific tenant data so like I said it strikes a",
    "start": "2118480",
    "end": "2125560"
  },
  {
    "text": "balance between the two models that we we looked at prior so",
    "start": "2125560",
    "end": "2131200"
  },
  {
    "text": "understanding and listening into all this I am sure there are questions right how do you really go about choosing your",
    "start": "2131339",
    "end": "2137920"
  },
  {
    "text": "data model isolation strategy uh so in this table I'm trying to highlight some",
    "start": "2137920",
    "end": "2143740"
  },
  {
    "text": "of those and then there is no uh one answer uh that works for every one of us right",
    "start": "2143740",
    "end": "2149619"
  },
  {
    "text": "there are advantages and benefits of using all three models and then it's",
    "start": "2149619",
    "end": "2154900"
  },
  {
    "text": "really where you are in the Journey of uh putting your uh SAS tenants out there",
    "start": "2154900",
    "end": "2161079"
  },
  {
    "text": "is this where the answer would come from uh so to highlight and quickly look at a few points right are The Silo model the",
    "start": "2161079",
    "end": "2167859"
  },
  {
    "text": "clear benefits are that you don't have uh the Noisy Neighbor interference so",
    "start": "2167859",
    "end": "2173680"
  },
  {
    "text": "you don't have to really uh work on it and address it at your code level your you can get the tenant level cost",
    "start": "2173680",
    "end": "2180160"
  },
  {
    "text": "metering uh you it doesn't you don't have to um bring I am into into your",
    "start": "2180160",
    "end": "2186339"
  },
  {
    "text": "into your code base uh disadvantages of course cost is a big uh challenge as",
    "start": "2186339",
    "end": "2192640"
  },
  {
    "text": "compared to the other two models and uh it also uh reduces your time to Market",
    "start": "2192640",
    "end": "2198579"
  },
  {
    "text": "so which is uh the most pressing concerns that we have seen our customers have right um but if you want maximum isolation and",
    "start": "2198579",
    "end": "2206800"
  },
  {
    "text": "minimum latency this is uh your model and then Silo is the preferred approach uh looking at at pool model it provides",
    "start": "2206800",
    "end": "2215500"
  },
  {
    "text": "better economies of scale it reduces the risk of hitting any any quotas that you",
    "start": "2215500",
    "end": "2221140"
  },
  {
    "text": "may otherwise it and the provision and provisioning times become shorter with this um it would still require some code",
    "start": "2221140",
    "end": "2229359"
  },
  {
    "text": "changes and then there is a medium to complex management over it that comes",
    "start": "2229359",
    "end": "2235839"
  },
  {
    "text": "with it and there are data access latency penalties uh however",
    "start": "2235839",
    "end": "2242380"
  },
  {
    "text": "low they might be they are still there so if you have a very low latency",
    "start": "2242380",
    "end": "2247780"
  },
  {
    "text": "workload which cannot take even a millisecond worth of lag then this model may not work well for you uh and when to",
    "start": "2247780",
    "end": "2255880"
  },
  {
    "text": "use it uh when you use the uh when you want the cost to be low and and your",
    "start": "2255880",
    "end": "2262900"
  },
  {
    "text": "tenants are ready to be onboarded and their users pattern is not as frequent",
    "start": "2262900",
    "end": "2268540"
  },
  {
    "text": "so this is the model that can be used there Bridge model",
    "start": "2268540",
    "end": "2273640"
  },
  {
    "text": "um so this like I said has a happy balance between the between the other two models right so if you um",
    "start": "2273640",
    "end": "2280839"
  },
  {
    "text": "I have to cross reference any uh data across tenants then definitely this is",
    "start": "2280839",
    "end": "2288280"
  },
  {
    "text": "one model that is very useful uh the any extensions that you're using as part of",
    "start": "2288280",
    "end": "2293560"
  },
  {
    "text": "your database that effort becomes one time with this model because you are end of the day using a common setup",
    "start": "2293560",
    "end": "2300220"
  },
  {
    "text": "um the overall disadvantage if I am to call out is the new tenant outboarding",
    "start": "2300220",
    "end": "2306520"
  },
  {
    "text": "agility is moderate not as agile as say the",
    "start": "2306520",
    "end": "2312579"
  },
  {
    "text": "other models and complex database maintenance tasks would have to be undertaken because your system catalog",
    "start": "2312579",
    "end": "2319720"
  },
  {
    "text": "tables will grow proportionately right so um when to use it when you need a balance and the time to refactor the",
    "start": "2319720",
    "end": "2327220"
  },
  {
    "text": "code and the effort going in is is there and then you want to make sure that you have a strategy to achieve that so um at",
    "start": "2327220",
    "end": "2336220"
  },
  {
    "text": "this stage I I think uh we are we are all set for the demo however before I bring another one to take us through the",
    "start": "2336220",
    "end": "2343060"
  },
  {
    "text": "demo I would like to ask our monitor ourselves if there are any questions from the audience at this stage",
    "start": "2343060",
    "end": "2349300"
  },
  {
    "text": "um no gaurav no questions I think uh you know the the slides especially that we are at which we are right now the",
    "start": "2349300",
    "end": "2354820"
  },
  {
    "text": "benefits disadvantages and uh when to use I think that perfectly sums it up I believe we can straight away proceed to",
    "start": "2354820",
    "end": "2360700"
  },
  {
    "text": "the demo sure yeah okay over to you",
    "start": "2360700",
    "end": "2366220"
  },
  {
    "text": "yes so let's bring up the demo okay uh so",
    "start": "2366220",
    "end": "2374260"
  },
  {
    "start": "2371000",
    "end": "2786000"
  },
  {
    "text": "today we are like in this table we are going to talk about the pool isolation model for postgres so what we are doing",
    "start": "2374260",
    "end": "2381040"
  },
  {
    "text": "here is that uh we'll be running a python notebook uh with an execution",
    "start": "2381040",
    "end": "2386619"
  },
  {
    "text": "role that will not have an access to run any type of connect to the databases",
    "start": "2386619",
    "end": "2392260"
  },
  {
    "text": "okay in the postgres we'll have another role which will have a parameterized policy where we will set up the session",
    "start": "2392260",
    "end": "2399220"
  },
  {
    "text": "tag assume that role create an SDS token send that token to create a",
    "start": "2399220",
    "end": "2406020"
  },
  {
    "text": "authentication TV request and then we'll get a password token",
    "start": "2406020",
    "end": "2411280"
  },
  {
    "text": "which will be only only we lie only we used for 15 minutes and then with that",
    "start": "2411280",
    "end": "2417579"
  },
  {
    "text": "token we'll go and access the DB endpoints now in this scenario so if you see so",
    "start": "2417579",
    "end": "2425380"
  },
  {
    "text": "that token is just for just for 50 uh it will be end up only",
    "start": "2425380",
    "end": "2430480"
  },
  {
    "text": "for 15 minutes now the first thing what we'll do we'll",
    "start": "2430480",
    "end": "2436180"
  },
  {
    "text": "go and create the data create the database okay so in",
    "start": "2436180",
    "end": "2442599"
  },
  {
    "text": "this scenario so in this in this case we'll go and",
    "start": "2442599",
    "end": "2448119"
  },
  {
    "text": "create a database and then while creating the database we will once it is",
    "start": "2448119",
    "end": "2453280"
  },
  {
    "text": "done and available we will take a note of few key points one is what is the endpoint",
    "start": "2453280",
    "end": "2459339"
  },
  {
    "text": "what is the certificate Authority and in the configurations tab we are also going to talk took a note of what is the DB",
    "start": "2459339",
    "end": "2467560"
  },
  {
    "text": "name and we want to make sure that I am authent IMDb authentication is enabled",
    "start": "2467560",
    "end": "2473859"
  },
  {
    "text": "because we'll be accessing these database through our IM policies IM roles",
    "start": "2473859",
    "end": "2479079"
  },
  {
    "text": "now in the database we logged it as an administrator create two two user one is",
    "start": "2479079",
    "end": "2486579"
  },
  {
    "text": "im1 and im2 will grieve give also a RDS underscore IM grants to that user",
    "start": "2486579",
    "end": "2493780"
  },
  {
    "text": "while doing so we'll also create a database and we'll give that database all privileges access to im1 user and IM",
    "start": "2493780",
    "end": "2501640"
  },
  {
    "text": "to user once you once we have done that uh well",
    "start": "2501640",
    "end": "2508660"
  },
  {
    "text": "we will log into that log into the newly created database",
    "start": "2508660",
    "end": "2513760"
  },
  {
    "text": "so let's log into that newly created database",
    "start": "2513760",
    "end": "2518819"
  },
  {
    "text": "once you log into the database you give a select privilege of all table within",
    "start": "2520660",
    "end": "2526060"
  },
  {
    "text": "the database to the im1 user and im2 users we're going to create a table where the",
    "start": "2526060",
    "end": "2531880"
  },
  {
    "text": "tenant ID will be one column and product ID and SQ will be other column and then insert three rows one is for IM users",
    "start": "2531880",
    "end": "2539200"
  },
  {
    "text": "and two are for im2 users with product ID and SQ",
    "start": "2539200",
    "end": "2544900"
  },
  {
    "text": "so once you've done that we'll run that query with the administrative privileges so if you have",
    "start": "2544900",
    "end": "2550720"
  },
  {
    "text": "a now evidence system privilege you can see all the data so now we can see the data there is one record for oim on",
    "start": "2550720",
    "end": "2556540"
  },
  {
    "text": "users and two record for im2 users now to to enable the row level security",
    "start": "2556540",
    "end": "2561700"
  },
  {
    "text": "for that particular product table will alter the table and enable the low level security and we'll create a tenant",
    "start": "2561700",
    "end": "2568420"
  },
  {
    "text": "isolation policy on the product table that with a check that matches with the",
    "start": "2568420",
    "end": "2574300"
  },
  {
    "text": "current user with the tenant ID in that car in that in the column of a",
    "start": "2574300",
    "end": "2580359"
  },
  {
    "text": "product table so now let's create some roles right so",
    "start": "2580359",
    "end": "2586839"
  },
  {
    "text": "we said that we have a we have a notebook which runs in a wider execution role which is an Amazon sagemaker",
    "start": "2586839",
    "end": "2592420"
  },
  {
    "text": "executioner role now this role is created a trusted relationship with this",
    "start": "2592420",
    "end": "2598000"
  },
  {
    "text": "role and this role will going to going to assume this this particular policy",
    "start": "2598000",
    "end": "2604720"
  },
  {
    "text": "but while uh like assume this policy it has to pass the principle tag that is",
    "start": "2604720",
    "end": "2612460"
  },
  {
    "text": "identified as a tenant ID and it has the access to connect the DB",
    "start": "2612460",
    "end": "2620859"
  },
  {
    "text": "where your original execution role doesn't have an access to that so it has to assume this role",
    "start": "2620859",
    "end": "2627099"
  },
  {
    "text": "to access the database now here we are creating a very python",
    "start": "2627099",
    "end": "2632800"
  },
  {
    "text": "using python SDK we are creating a temporary session where we are passing an row Arn and the Tenant ID and setting",
    "start": "2632800",
    "end": "2639579"
  },
  {
    "text": "up the tag over here so your tenant ID has set up a tag once you so this particular this is",
    "start": "2639579",
    "end": "2647260"
  },
  {
    "text": "creates for the temporary session right right now this when you pass that tag over there the tag will be replaced over",
    "start": "2647260",
    "end": "2654640"
  },
  {
    "text": "in this particular uh policy in the runtime and this will be this will be access via",
    "start": "2654640",
    "end": "2663160"
  },
  {
    "text": "this uh execution role which has an assumed role and Taxation",
    "start": "2663160",
    "end": "2668980"
  },
  {
    "text": "privilege now let's run our product Again by our administrator user and we'll see that I",
    "start": "2668980",
    "end": "2674980"
  },
  {
    "text": "am 1 and im2 has two two rows right and I am one users as one single rows",
    "start": "2674980",
    "end": "2682500"
  },
  {
    "text": "okay now let's call let's set the tenant ID as an im2 and run",
    "start": "2683859",
    "end": "2690220"
  },
  {
    "text": "create a create a temporary session so once you once you run that tenant ID",
    "start": "2690220",
    "end": "2695980"
  },
  {
    "text": "run that we are going to run a new uh give that temp uh row which has that Arn which is",
    "start": "2695980",
    "end": "2704920"
  },
  {
    "text": "aocity a s y temporary demo role which has that Dynamic policy a back policy",
    "start": "2704920",
    "end": "2711520"
  },
  {
    "text": "and then we'll we'll call that to create a temporary STS token a temporary",
    "start": "2711520",
    "end": "2717160"
  },
  {
    "text": "session and that with that session we'll call the DB Authentication token create a DB authentication token",
    "start": "2717160",
    "end": "2724480"
  },
  {
    "text": "which is just active for 15 minutes now this particular token is scoped only for 10",
    "start": "2724480",
    "end": "2731980"
  },
  {
    "text": "and 2. so when you so this when you run a query on that particular table on the",
    "start": "2731980",
    "end": "2738880"
  },
  {
    "text": "product table within that database though we are running a select star query that means select 10 and product",
    "start": "2738880",
    "end": "2745359"
  },
  {
    "text": "ID and SQ from that for that particular product table because it is scoped only for 10 and 2",
    "start": "2745359",
    "end": "2752079"
  },
  {
    "text": "it will only bring up two records it will not bring up the record which is a",
    "start": "2752079",
    "end": "2757960"
  },
  {
    "text": "tenant ID setup as a im user 1. now let's let's run the same code with",
    "start": "2757960",
    "end": "2764140"
  },
  {
    "text": "the IM user im1 users create the same session but it will",
    "start": "2764140",
    "end": "2769359"
  },
  {
    "text": "create a new DB authentication token now this DB authentications token now which",
    "start": "2769359",
    "end": "2775119"
  },
  {
    "text": "is created is scoped into for im1 and this concludes our demo",
    "start": "2775119",
    "end": "2783780"
  },
  {
    "start": "2786000",
    "end": "2936000"
  },
  {
    "text": "thank you everyone so uh back to Assad I said do you have any",
    "start": "2787000",
    "end": "2793599"
  },
  {
    "text": "questions so far we can take um uh so",
    "start": "2793599",
    "end": "2800140"
  },
  {
    "text": "um I I'm just checking well well I don't say any questions I",
    "start": "2800140",
    "end": "2807339"
  },
  {
    "text": "think uh you know there was one question about the demo itself which you you know shared right away and it also you know",
    "start": "2807339",
    "end": "2813579"
  },
  {
    "text": "summarizes what we did you know what we discussed throughout the session today especially about how do I make sure that",
    "start": "2813579",
    "end": "2819760"
  },
  {
    "text": "100 my data is being isolated or not right so yeah so that that brings",
    "start": "2819760",
    "end": "2826440"
  },
  {
    "text": "yeah sorry to interrupt so yeah there is another uh working code base uh that's",
    "start": "2826440",
    "end": "2832420"
  },
  {
    "text": "checked into GitHub that are customers and viewers can also refer to uh we'll",
    "start": "2832420",
    "end": "2837760"
  },
  {
    "text": "put it in the in the comments section uh so it gives a quick guide um they would just need to migrate to",
    "start": "2837760",
    "end": "2844119"
  },
  {
    "text": "the cloud formation template and it will quickly launch the setup for them and they it can be used as a player on uh to",
    "start": "2844119",
    "end": "2851079"
  },
  {
    "text": "test out the different modes that we have talked about perfect yeah",
    "start": "2851079",
    "end": "2857619"
  },
  {
    "text": "thanks uh thanks gaurav to bring that up uh so everyone uh today we looked at how to implement the SAS workload",
    "start": "2857619",
    "end": "2864040"
  },
  {
    "text": "optimization uh with postgresql uh we also looked into the multitarian deployment model uh the data",
    "start": "2864040",
    "end": "2869859"
  },
  {
    "text": "partitioning and tenant isolations along with the demo and if there are any questions uh that you still have um you",
    "start": "2869859",
    "end": "2876520"
  },
  {
    "text": "know you can post your questions on the repost.aws where one of our experts can provide you with an answer or your",
    "start": "2876520",
    "end": "2883119"
  },
  {
    "text": "question could become a topic of one of our future shows so if you also have a feedback please check the chat box on",
    "start": "2883119",
    "end": "2889660"
  },
  {
    "text": "the right for a link to our survey or you can email us at AWS supports you at the rate amazon.com we want to hear from",
    "start": "2889660",
    "end": "2896440"
  },
  {
    "text": "you tell us what else you'd like to see on this show please join in again uh in two weeks on",
    "start": "2896440",
    "end": "2902079"
  },
  {
    "text": "February 22nd at 10 AM IST where we will be discussing about reducing costs and",
    "start": "2902079",
    "end": "2908200"
  },
  {
    "text": "improving performance with Amazon document BB thank you for joining us at AWS supports you happy cloud computing",
    "start": "2908200",
    "end": "2915579"
  },
  {
    "text": "Happy Cloud Computing Epico computing",
    "start": "2915579",
    "end": "2920400"
  },
  {
    "text": "[Music] thank you",
    "start": "2922730",
    "end": "2928619"
  }
]