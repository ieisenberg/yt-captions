[
  {
    "start": "0",
    "end": "91000"
  },
  {
    "text": "hello and welcome to today's webinar entitled Journey Through the cloud cost optimization my name is Ryan and I'm",
    "start": "1240",
    "end": "8040"
  },
  {
    "text": "your host today take you through the topic of cost optimization within AWS uh",
    "start": "8040",
    "end": "13599"
  },
  {
    "text": "today's webinar is the last in our journey through the cloud Series so thank you for joining this morning our",
    "start": "13599",
    "end": "19520"
  },
  {
    "text": "agenda and the purpose behind these webinars is really to educate you on common use cases stepping stones and the",
    "start": "19520",
    "end": "26599"
  },
  {
    "text": "learnings that other customers have made through their journey into the Cloud giving you some best practices that will",
    "start": "26599",
    "end": "32360"
  },
  {
    "text": "hopefully bootstrap you and your projects and your route through to um being cost optimized in this case in",
    "start": "32360",
    "end": "40960"
  },
  {
    "text": "AWS cost optimization as a topic today is really it's a key step in the cloud",
    "start": "41399",
    "end": "46600"
  },
  {
    "text": "Journey so it's a a point in time within the cloud Journey that many people sit",
    "start": "46600",
    "end": "51760"
  },
  {
    "text": "back and look at how they they realize a CoStar architecture within AWS and today's webinar is about understanding",
    "start": "51760",
    "end": "58800"
  },
  {
    "text": "those properties how to use elasticity to gain some real and measurable benefit and ultimately to enable you to do more",
    "start": "58800",
    "end": "65439"
  },
  {
    "text": "in AWS whilst using less and become efficient in your operations so with that in mind today's",
    "start": "65439",
    "end": "72520"
  },
  {
    "text": "agenda is in three simple Parts it's talk about the fundamentals of AWS cost",
    "start": "72520",
    "end": "78119"
  },
  {
    "text": "optimization the properties of AWS that you can leverage to enable you to be cost efficient and then we're going to",
    "start": "78119",
    "end": "84400"
  },
  {
    "text": "talk in five steps how you can achieve cost optimization and then give you some tips on where to go next",
    "start": "84400",
    "end": "91920"
  },
  {
    "start": "91000",
    "end": "415000"
  },
  {
    "text": "so let's look firstly at the fundamentals of cost optimization and why we want to to achieve cost",
    "start": "92560",
    "end": "98560"
  },
  {
    "text": "optimization U firstly is that AWS is a utility so just as you would turn off an",
    "start": "98560",
    "end": "104560"
  },
  {
    "text": "electricity um switch when your fishing is using of it or lights when you leave the room as a utility computer and",
    "start": "104560",
    "end": "111200"
  },
  {
    "text": "storage can be turned off too so it should be a natural part of your thinking around architectures and",
    "start": "111200",
    "end": "116960"
  },
  {
    "text": "application deployments then not only can you consum consume Cloud resources very easily but you can turn them off or",
    "start": "116960",
    "end": "123320"
  },
  {
    "text": "throw them away when you're done just as easily and this drives a fundamental optimization within the cloud not only",
    "start": "123320",
    "end": "129599"
  },
  {
    "text": "about the resources you're using to get a workload done but of course because you pay for your utility as you use it",
    "start": "129599",
    "end": "135519"
  },
  {
    "text": "the price you're paying and the cost you're occurring secondly efficiency um when",
    "start": "135519",
    "end": "142480"
  },
  {
    "text": "you're being efficient with the resources you're using you're therefore being efficient with the price you're paying and the cost that you're",
    "start": "142480",
    "end": "149080"
  },
  {
    "text": "incurring you can do more within a given budget so if you think about how you might um budget for on premise fixed um",
    "start": "149080",
    "end": "157560"
  },
  {
    "text": "resources you have a certain cost that you can need to be working within and if you translate that into working within",
    "start": "157560",
    "end": "164040"
  },
  {
    "text": "AWS where you have variable costs if you can keep your variable costs low at particular times of the day the week the",
    "start": "164040",
    "end": "170239"
  },
  {
    "text": "year then you release essentially budget to do more things you become more agile you can spin up more environments you",
    "start": "170239",
    "end": "176319"
  },
  {
    "text": "can try more things out within AWS so you can become more efficient and agile by focusing on cost",
    "start": "176319",
    "end": "182720"
  },
  {
    "text": "optimization and then lastly um cost optimization drives uh 21st century",
    "start": "182720",
    "end": "189239"
  },
  {
    "text": "architectures it drives a number of the things that will help you achieve very highs scale um elastic applications",
    "start": "189239",
    "end": "197120"
  },
  {
    "text": "because cost optimization is all about bringing resources on when you need them and turning them off when you don't this",
    "start": "197120",
    "end": "202159"
  },
  {
    "text": "leads you into stateless high performance web application architectures it leads you into",
    "start": "202159",
    "end": "207280"
  },
  {
    "text": "disposable environments and a Dev test environment it leads you to Disaster Recovery",
    "start": "207280",
    "end": "212480"
  },
  {
    "text": "environments that are turned off unless you need them so it drives architectures that are cost aware and these are",
    "start": "212480",
    "end": "217560"
  },
  {
    "text": "fundamentally modern architectures within AWS so there's some key fundamentals",
    "start": "217560",
    "end": "224319"
  },
  {
    "text": "here turn off the lights when you stop using ec2 resources you stop paying for",
    "start": "224319",
    "end": "229439"
  },
  {
    "text": "them so an ec2 instance that um of any size when it's stopped you stop paying",
    "start": "229439",
    "end": "235319"
  },
  {
    "text": "the instance hourly price and you only pay for the storage of the EBS volumes if they're EBS backed instances uh",
    "start": "235319",
    "end": "242799"
  },
  {
    "text": "behind the scenes so you might have a couple of one tab drives on an instance you'll pay for the storage of those EBS",
    "start": "242799",
    "end": "249480"
  },
  {
    "text": "snapshots only and the EBS volumes only you won't be paying for any traffic to the EBS you won't be TR paying any",
    "start": "249480",
    "end": "255760"
  },
  {
    "text": "hourly rate for the ec2 instance so turning off the lights can fundamentally save you a lot of money and that's going",
    "start": "255760",
    "end": "261160"
  },
  {
    "text": "to be a theme that we're going to see throughout this presentation being elastic is another",
    "start": "261160",
    "end": "267240"
  },
  {
    "text": "fundamental so you want to be able to support workloads with the right amount of horsepower to get a job done um so",
    "start": "267240",
    "end": "273960"
  },
  {
    "text": "provisioning just the right amount of compute power or the compute storage that goes with that compute to get any",
    "start": "273960",
    "end": "280080"
  },
  {
    "text": "particular job done so whether that be a a batch processing job whether that be handling a peak of web traffic on a web",
    "start": "280080",
    "end": "286240"
  },
  {
    "text": "application whether that be creating uh a disaster recovery capability to handle",
    "start": "286240",
    "end": "291680"
  },
  {
    "text": "a portion of your users in your back office for example you want to be able to do that on an elastic basis and spin",
    "start": "291680",
    "end": "297800"
  },
  {
    "text": "up the resources that are required to get that job done and no more so following the demand curve if you like",
    "start": "297800",
    "end": "303759"
  },
  {
    "text": "by being elastic and you want to continually optimize as a fundamental here so you",
    "start": "303759",
    "end": "310400"
  },
  {
    "text": "can drive recurring and improving savings through these cost ofare architectures so if you know what",
    "start": "310400",
    "end": "316639"
  },
  {
    "text": "metrics are driving um if you like the computational density in your application the number of for example",
    "start": "316639",
    "end": "322960"
  },
  {
    "text": "concurrent users that you can support on a particular application the number of transactions you can process given so",
    "start": "322960",
    "end": "329840"
  },
  {
    "text": "much ec2 resource if you understand these sorts of metrics you can continually refine the type of um",
    "start": "329840",
    "end": "335479"
  },
  {
    "text": "application architecture the instance types the number of those that are in play at any given time to drive huge",
    "start": "335479",
    "end": "342319"
  },
  {
    "text": "efficiencies and to keep changing the Dynamics of your cost base so as we introduced for example new instance",
    "start": "342319",
    "end": "348880"
  },
  {
    "text": "types if you understand the metrics you can map those to new instance types and understand whether they're going to yield you further Savings in the future",
    "start": "348880",
    "end": "356120"
  },
  {
    "text": "and I'll look at some examples of that throughout this webinar today",
    "start": "356120",
    "end": "361639"
  },
  {
    "text": "okay so fundamentals kind of out of the way let's look at five steps for cost optimization and the five steps are",
    "start": "361680",
    "end": "368039"
  },
  {
    "text": "going to be implementing elastic capacity and um giving you some examples of what you can yield with um",
    "start": "368039",
    "end": "373919"
  },
  {
    "text": "implementation of elastic capacity we're going to look at instance types um and some of the Dynamics around choosing",
    "start": "373919",
    "end": "380479"
  },
  {
    "text": "different types of instances and then we'll look around reserved instances where you can reserve essentially a a",
    "start": "380479",
    "end": "387479"
  },
  {
    "text": "lower rate or lower price point on an instance type in a given region and availability Zone and then we'll delve",
    "start": "387479",
    "end": "393840"
  },
  {
    "text": "into the spot market and look at how customers are leveraging the spot market and some of the strategies around",
    "start": "393840",
    "end": "399120"
  },
  {
    "text": "playing with the spot market and how you can achieve some savings there and then some ideas around the use of services",
    "start": "399120",
    "end": "404639"
  },
  {
    "text": "rather than software and to give you a couple of examples of how that can save you money in a real term so the first of those is elastic",
    "start": "404639",
    "end": "412000"
  },
  {
    "text": "capacity so let's have a look at this so let's take a typical um chart of",
    "start": "412000",
    "end": "418800"
  },
  {
    "text": "server load and shown here is a a 24hour period for a fictitious application and",
    "start": "418800",
    "end": "425240"
  },
  {
    "text": "the server load grows over time when we can see that um in the morning it starts to shoot up there to a maximum around",
    "start": "425240",
    "end": "432199"
  },
  {
    "text": "the middle of the day and then um in the evening it tails off so if we were to",
    "start": "432199",
    "end": "437599"
  },
  {
    "text": "support that and let's say we can support that with a capacity of one server shown there on the graph we can",
    "start": "437599",
    "end": "443440"
  },
  {
    "text": "have um a traditional capacity required would be two servers so my my chart is too high in terms of server requirements",
    "start": "443440",
    "end": "450720"
  },
  {
    "text": "if I were to supply instances to support that load I would require one server for",
    "start": "450720",
    "end": "456080"
  },
  {
    "text": "8 hours so the first portion of my day I can achieve the the or support the load",
    "start": "456080",
    "end": "461759"
  },
  {
    "text": "with one instance in AWS as I go through the day I would add another server for8",
    "start": "461759",
    "end": "467360"
  },
  {
    "text": "hours or two servers join the peak and then in the evening I could support the load with just one server again so we",
    "start": "467360",
    "end": "474680"
  },
  {
    "text": "can see here that 4 six of my time is taken up with servers so I'm entally making a saving of a third by turning",
    "start": "474680",
    "end": "483120"
  },
  {
    "text": "off an extra server during the first 8 hours and the last 8 hours of this 24-hour",
    "start": "483120",
    "end": "488919"
  },
  {
    "text": "period so an example where we can follow the curve with a unit of resource in",
    "start": "488919",
    "end": "494680"
  },
  {
    "text": "this case an ec2 instance that can support half of my load at Peak and by doing turning off that instance or the",
    "start": "494680",
    "end": "501240"
  },
  {
    "text": "second instance during the morning and the evening I can make oneir savings um of my cost base for running that",
    "start": "501240",
    "end": "506520"
  },
  {
    "text": "application um looking at that in in reality and how",
    "start": "506520",
    "end": "511599"
  },
  {
    "start": "508000",
    "end": "634000"
  },
  {
    "text": "people achieve that if you take a typical architecture here I have my website.com fronted by an elastic load",
    "start": "511599",
    "end": "518360"
  },
  {
    "text": "balancer so an elastic load balancer the idea being that it's a regional service that can load balance my resources",
    "start": "518360",
    "end": "524519"
  },
  {
    "text": "across availability zones at the back end and shown here I have a single ec2 instance in an autoscaling group um that",
    "start": "524519",
    "end": "532800"
  },
  {
    "text": "at 2 a.m. in the morning per my previous example I have one of those instances to support my load and as I go through time",
    "start": "532800",
    "end": "540399"
  },
  {
    "text": "of 8:00 a.m. I will grow because 8: a.m. on my previous chart was the trigger point of requiring a second instance to",
    "start": "540399",
    "end": "546440"
  },
  {
    "text": "do the work now this can be triggered in a number of ways this could be triggered by schedule because I just know when my",
    "start": "546440",
    "end": "552519"
  },
  {
    "text": "Peak is coming but more likely that autoscaling group will generate an aggregate of cloud watch metrics so",
    "start": "552519",
    "end": "559399"
  },
  {
    "text": "showing those little green charts on my ec2 instances I'll be measuring for example the average CPU across the group",
    "start": "559399",
    "end": "567440"
  },
  {
    "text": "so in the first instance it'll be one instance when that CPU Rises to a level let's say 80% CPU it will trigger the",
    "start": "567440",
    "end": "575120"
  },
  {
    "text": "creation of a second instance based upon a machine image a saved image containing my software my configuration and launch",
    "start": "575120",
    "end": "582040"
  },
  {
    "text": "it into that Autos scaling group and as I go through the day I was staying at that point and then likewise my alter",
    "start": "582040",
    "end": "588360"
  },
  {
    "text": "scaling group can have a policy which says okay when the CPU average across those two servers has gone down to let's",
    "start": "588360",
    "end": "594880"
  },
  {
    "text": "say less than 30% then I will remove the instance that I added in the morning and I'll be back to one instance and this",
    "start": "594880",
    "end": "602360"
  },
  {
    "text": "way I can Implement elasticity with some very simple configurations of an auto",
    "start": "602360",
    "end": "607560"
  },
  {
    "text": "scaling group policy and launch configuration and fronting of elastic load balancer I can integrate metrics",
    "start": "607560",
    "end": "613800"
  },
  {
    "text": "not only like CPU load but I could integrate things like uh latency as seen",
    "start": "613800",
    "end": "618839"
  },
  {
    "text": "from the elastic load balancer so as it appears that my website.com slows down I",
    "start": "618839",
    "end": "623880"
  },
  {
    "text": "could add incremental resources and this way I can have just the right amount of resources to deploy behind the scenes to",
    "start": "623880",
    "end": "630480"
  },
  {
    "text": "support the load at a given time now in the real world this is a",
    "start": "630480",
    "end": "636920"
  },
  {
    "start": "634000",
    "end": "713000"
  },
  {
    "text": "customer example in the financial services space and this is a chart from their systems um operations dashboard so",
    "start": "636920",
    "end": "643200"
  },
  {
    "text": "this is real data from a real customer and we can see elasticity in action so at this point in time at t0 let's say we",
    "start": "643200",
    "end": "650120"
  },
  {
    "text": "start at less than 10 cores in operation in their cluster now this is a significant cluster for doing a",
    "start": "650120",
    "end": "656000"
  },
  {
    "text": "financial services analysis on Market data and as the market data rates and feeds change then more and more",
    "start": "656000",
    "end": "662519"
  },
  {
    "text": "resources are required to get a computational task done in a given time so their work clod is time bound they",
    "start": "662519",
    "end": "669200"
  },
  {
    "text": "want to achieve this in a particular time and therefore they need to grow the pool of resources behind the scenes to",
    "start": "669200",
    "end": "674320"
  },
  {
    "text": "deal with the changing market conditions so 10 cores and as we move up 24 hours later they're running at 1500 cores in",
    "start": "674320",
    "end": "681560"
  },
  {
    "text": "their cluster so 1,500 virtual cores and depending upon the instance sizes they're using that was more or less",
    "start": "681560",
    "end": "687760"
  },
  {
    "text": "instances over time that then drops back down to less than 10 cores and so on up to 600 cores and we can see a number of",
    "start": "687760",
    "end": "694600"
  },
  {
    "text": "Peaks that are in the order of a thousand plus instances now all that white space is time when they've stopped",
    "start": "694600",
    "end": "701160"
  },
  {
    "text": "resources they're not paying for the resources that the stopped and they have the availability of those resources to",
    "start": "701160",
    "end": "706600"
  },
  {
    "text": "start them again and bring them into the cluster as required as part of the elastic nature of their",
    "start": "706600",
    "end": "713160"
  },
  {
    "start": "713000",
    "end": "895000"
  },
  {
    "text": "configuration Autos scaling is key to this so clearly we can achieve Auto",
    "start": "713360",
    "end": "719399"
  },
  {
    "text": "scaling in a highly manual way we could just go into the AWS console and start",
    "start": "719399",
    "end": "724600"
  },
  {
    "text": "some instances as we see some Metric maybe alerting as of cloud watch to take some action um but by using autoscaling",
    "start": "724600",
    "end": "731760"
  },
  {
    "text": "framework within AWS we can achieve more or less automation around that so the first thing we can achieve by",
    "start": "731760",
    "end": "737760"
  },
  {
    "text": "implementing a launch configuration an autoscaling group and an autoscaling policy is then to be able to manually",
    "start": "737760",
    "end": "743880"
  },
  {
    "text": "trigger um an action against that Autos scaling group so we can send an API call",
    "start": "743880",
    "end": "749199"
  },
  {
    "text": "or use this the command line tools to launch or terminate instances as we see fit so if we have a demand curve that's",
    "start": "749199",
    "end": "756079"
  },
  {
    "text": "coming out to us we know that every Friday night that we have a peak of demand we can simply before we go home",
    "start": "756079",
    "end": "761639"
  },
  {
    "text": "on a Friday night issue an autoscaling command to double our capacity in the pool and another Monday morning we can",
    "start": "761639",
    "end": "767399"
  },
  {
    "text": "issue a command to scale that back and we can do that at the command line from assist admin's",
    "start": "767399",
    "end": "772519"
  },
  {
    "text": "workbench equally we could set a schedule to do that so we could schedule the the the auto scaling group to grow",
    "start": "772519",
    "end": "779720"
  },
  {
    "text": "or Shrink at times that we know um but more commonly we do this by policy so",
    "start": "779720",
    "end": "784920"
  },
  {
    "text": "I've talked about Cloud watch and scaling in response to changing conditions by reading cloudwatch metrics",
    "start": "784920",
    "end": "790680"
  },
  {
    "text": "we can make decisions about what policy actions to apply at a given time and this can be based upon simple metrics",
    "start": "790680",
    "end": "797800"
  },
  {
    "text": "like the CPU utilization like uh performance as seen from elastic load balancer but you can also write custom",
    "start": "797800",
    "end": "805040"
  },
  {
    "text": "metrics to uh cloudwatch and based upon those that you're writing out of your",
    "start": "805040",
    "end": "810199"
  },
  {
    "text": "application these could be business aware metrics that you're driving Auto scaling upon another function of Auto scaling is",
    "start": "810199",
    "end": "817279"
  },
  {
    "text": "the auto rebalances so as part and parcel of implementing elasticity and trying to be cost optimized you also get",
    "start": "817279",
    "end": "823120"
  },
  {
    "text": "a degree of um High availability balancing across availability zones so we'll always make sure that your your",
    "start": "823120",
    "end": "828839"
  },
  {
    "text": "servers are balanced across availability zones so a couple of examples here are scaling by policy is based upon metrics",
    "start": "828839",
    "end": "836480"
  },
  {
    "text": "from cloudwatch is to double the group size if the average CPU is greater than 80% and we can do that and ensure that",
    "start": "836480",
    "end": "843639"
  },
  {
    "text": "the the average CPU is greater than 80% for let's say 3 minutes consecutively",
    "start": "843639",
    "end": "848680"
  },
  {
    "text": "before we take the action and scaling down likewise would be decrement by let's say 10% if the average CPU is less",
    "start": "848680",
    "end": "855519"
  },
  {
    "text": "than 30% for another given time and we could say 1 minute 3 minutes 5 minutes whatever so we can achieve two policies",
    "start": "855519",
    "end": "862720"
  },
  {
    "text": "that work in tandem to grow and Shrink our resources to meet just the demand",
    "start": "862720",
    "end": "868600"
  },
  {
    "text": "that's coming matter us at that time and to get rid of the resources when the demand has subsided and therefore stop",
    "start": "868600",
    "end": "874000"
  },
  {
    "text": "paying for them but we can also schedule by uh scale by schedule so um to meet a",
    "start": "874000",
    "end": "879880"
  },
  {
    "text": "known demand uh common for around batch processing or a monthly peak in ordering",
    "start": "879880",
    "end": "885160"
  },
  {
    "text": "on an e-commerce site you can schedule these things up to 31 days in the future and you can set a recurring schedule of",
    "start": "885160",
    "end": "892440"
  },
  {
    "text": "scaling activities so another view of that and a",
    "start": "892440",
    "end": "898480"
  },
  {
    "text": "typical month end process here I have a chart of the day of the month so not to",
    "start": "898480",
    "end": "903519"
  },
  {
    "text": "30 let's say 30-day month at the bottom and we have instance count on the left and to support a given workload I've",
    "start": "903519",
    "end": "910279"
  },
  {
    "text": "typically got one instance throughout the month to handle a particular load but at a 3-day period at the end of the",
    "start": "910279",
    "end": "916639"
  },
  {
    "text": "month here I've got the the requirement to run six instances to run my load by",
    "start": "916639",
    "end": "922320"
  },
  {
    "text": "setting this on a schedule and rather than having six instances provisioned all the time um my monthly predictable",
    "start": "922320",
    "end": "928160"
  },
  {
    "text": "Peak process can be be hit I know when this peak of demand is going to come at me um and the traditional capacity would",
    "start": "928160",
    "end": "934839"
  },
  {
    "text": "be six instances as shown there in the red line and the elastic capacity there shown in yellow now the maths behind",
    "start": "934839",
    "end": "942839"
  },
  {
    "text": "this shows this is a 75% saving versus running six instances in a continual",
    "start": "942839",
    "end": "949000"
  },
  {
    "text": "basis running one and then six for the 3-day Peak and turning it off again",
    "start": "949000",
    "end": "954319"
  },
  {
    "text": "yields 75% cost savings okay so by doing some simple anal is of um when you",
    "start": "954319",
    "end": "961240"
  },
  {
    "text": "require instances and when you don't maybe for example in the dev test environment overnight unless your",
    "start": "961240",
    "end": "967920"
  },
  {
    "text": "developers are working um on a global basis and maybe sharing environments and different teams around the world if",
    "start": "967920",
    "end": "974079"
  },
  {
    "text": "you're running a Dev team that doesn't work through the night then stop the instances of the running that they are",
    "start": "974079",
    "end": "979920"
  },
  {
    "text": "using in those environments and you will yield a saving in the order of between 30 and 70% depending on what resources",
    "start": "979920",
    "end": "987000"
  },
  {
    "text": "are being turned off when so turn off the lights when you're",
    "start": "987000",
    "end": "993160"
  },
  {
    "start": "992000",
    "end": "1230000"
  },
  {
    "text": "done okay so that's elastic capacity um next on our agenda is the instance types",
    "start": "993160",
    "end": "999560"
  },
  {
    "text": "that you can use so there are a whole bunch of instances that you can choose from to run a given workload and they",
    "start": "999560",
    "end": "1006839"
  },
  {
    "text": "vary um in their family type so shown here is a a few instances so we s small",
    "start": "1006839",
    "end": "1013000"
  },
  {
    "text": "we have a standard family that goes up to a large there are high memory and high CPU variants um so where the",
    "start": "1013000",
    "end": "1020120"
  },
  {
    "text": "proportion of CPU to memory changes um we also have cluster compute instances",
    "start": "1020120",
    "end": "1025640"
  },
  {
    "text": "and instances with gpus but there are new families being added at all the time so recently we added um a new second",
    "start": "1025640",
    "end": "1032600"
  },
  {
    "text": "generation um medium family um in the US regions and they'll shortly come to uh",
    "start": "1032600",
    "end": "1038600"
  },
  {
    "text": "the EU where we have again a different ratio different performance on the um",
    "start": "1038600",
    "end": "1044199"
  },
  {
    "text": "the chipsets underly these things the memory allocations and so on we also have instances with local ephemeral",
    "start": "1044199",
    "end": "1051160"
  },
  {
    "text": "storage of SSD drives so that are particularly good for um application",
    "start": "1051160",
    "end": "1056919"
  },
  {
    "text": "workloads that require extremely high performance on a dis volume where you can architect around the fact that it's",
    "start": "1056919",
    "end": "1062720"
  },
  {
    "text": "a non-persistent drive in terms of the life cycle of the instance so there are a whole range of instances that you can",
    "start": "1062720",
    "end": "1069360"
  },
  {
    "text": "choose from so choosing the right instance is obviously going to be important in terms of being cost optimized because the bigger instances",
    "start": "1069360",
    "end": "1075880"
  },
  {
    "text": "you use the more you'll pay per hour so so to start with choosing your the",
    "start": "1075880",
    "end": "1081400"
  },
  {
    "text": "instance that best meets your basic requirements based upon memory and virtual CES is a good place to start so",
    "start": "1081400",
    "end": "1087400"
  },
  {
    "text": "if you have an application that you know how roughly it performs on a piece of physical Hardware then match that sort",
    "start": "1087400",
    "end": "1094679"
  },
  {
    "text": "of combination of memory and CPU in an instance in the cloud and do a little bit of instance testing and seeing how",
    "start": "1094679",
    "end": "1101039"
  },
  {
    "text": "things perform then tune so it's really easy to upsize or downsize your instance size",
    "start": "1101039",
    "end": "1108840"
  },
  {
    "text": "based upon monitoring um and you can use a service called trusted advisor which we'll look at a little bit later to help",
    "start": "1108840",
    "end": "1115600"
  },
  {
    "text": "you do this so as part of our support package um we will tell you when your instances are being underutilized or",
    "start": "1115600",
    "end": "1121120"
  },
  {
    "text": "over utilized and then lastly spread so you",
    "start": "1121120",
    "end": "1127000"
  },
  {
    "text": "can achieve High availability for the same price by taking smaller instances and spreading them across availability",
    "start": "1127000",
    "end": "1133440"
  },
  {
    "text": "zones so without having to increase cost you can become at more fault tolerant at",
    "start": "1133440",
    "end": "1139799"
  },
  {
    "text": "the same time as as Gathering metrics around how your applications perform on smaller instance sizes for example gives",
    "start": "1139799",
    "end": "1147280"
  },
  {
    "text": "you greater granularity in the terms of autoscaling if you can run your application on smaller instances you can",
    "start": "1147280",
    "end": "1153080"
  },
  {
    "text": "add increments that are smaller and more granular but key to all of these steps really is the Gathering of metrics so",
    "start": "1153080",
    "end": "1159600"
  },
  {
    "text": "you can understand your position and knowing your usage is really about using the cloudwatch",
    "start": "1159600",
    "end": "1166000"
  },
  {
    "text": "framework so an instance with cloudwatch enabled will generate a whole range of",
    "start": "1166000",
    "end": "1171320"
  },
  {
    "text": "Statistics um out of the box from free memory free CPU free HD hard dis and so on you can push custom metrics into um",
    "start": "1171320",
    "end": "1180039"
  },
  {
    "text": "cloudwatch so your application can post into the cloudwatch API so you might um",
    "start": "1180039",
    "end": "1186360"
  },
  {
    "text": "write business transactions processed or in a queue inside your application for example into cloudwatch now that to",
    "start": "1186360",
    "end": "1193080"
  },
  {
    "text": "drive some of the fundamental metrics that you're going to use to tune the instance sizes in play to choose the",
    "start": "1193080",
    "end": "1200080"
  },
  {
    "text": "density of transactions for example you can process on a given instance and you can do all of this at one minute",
    "start": "1200080",
    "end": "1205360"
  },
  {
    "text": "intervals so you got quite fine grain granularity around the the metrics that you can gather all of these things get",
    "start": "1205360",
    "end": "1211600"
  },
  {
    "text": "put into Cloud watch and then in this example for example I'm alerting on a two week cycle um to send me some",
    "start": "1211600",
    "end": "1217880"
  },
  {
    "text": "information when certain things thresholds are reached or breached and that I can then sort of take decisions",
    "start": "1217880",
    "end": "1224760"
  },
  {
    "text": "and um around what I do to tune the cycle based upon those metrics and",
    "start": "1224760",
    "end": "1230480"
  },
  {
    "start": "1230000",
    "end": "1404000"
  },
  {
    "text": "alarms now talking of metrics um you need to really choose the metrics that Mak sense for your application and your",
    "start": "1230480",
    "end": "1237840"
  },
  {
    "text": "workload and then you optimize for that metric so talking generically around what that sort of cycle means is that",
    "start": "1237840",
    "end": "1245760"
  },
  {
    "text": "for example you have three workloads and we're trying to understand the cost per",
    "start": "1245760",
    "end": "1251480"
  },
  {
    "text": "unit of work per instance of a given size so how many pieces of work can we",
    "start": "1251480",
    "end": "1257799"
  },
  {
    "text": "achieve on an instance of a given size and what is the cost per unit okay now",
    "start": "1257799",
    "end": "1263159"
  },
  {
    "text": "that's what drives if you like our computational density on an instance so here I got three workloads workload a b",
    "start": "1263159",
    "end": "1269360"
  },
  {
    "text": "and c and workload a may be optimal on a a four on four M1 extra large instances",
    "start": "1269360",
    "end": "1276279"
  },
  {
    "text": "whereas workload B might be optimal on 10 M1 mediums and workload C might be",
    "start": "1276279",
    "end": "1282799"
  },
  {
    "text": "optimal on an M3 double extra large on two of them okay and what I mean by",
    "start": "1282799",
    "end": "1288080"
  },
  {
    "text": "Optimal is that if we look at a simple example here firstly I might have the",
    "start": "1288080",
    "end": "1294000"
  },
  {
    "text": "ability to run a 10 M1 large instances on the top line um 100 concurrent jobs",
    "start": "1294000",
    "end": "1301480"
  },
  {
    "text": "okay and let's just talk generically about a job and what it could mean to you and your workload so that job could be the number of users that you can",
    "start": "1301480",
    "end": "1307880"
  },
  {
    "text": "support the number of um processes concurrently that you can run in a batch process the number of videos you could",
    "start": "1307880",
    "end": "1314600"
  },
  {
    "text": "transcode in parallel on a given instance so it could mean a whole range of things but in this case that means it",
    "start": "1314600",
    "end": "1320279"
  },
  {
    "text": "will cost me 0.26 per job on that instance versus um",
    "start": "1320279",
    "end": "1326880"
  },
  {
    "text": "running on an M3 extra large which is a new generation of instance that has an instance cost of 0.58 cents an hour okay",
    "start": "1326880",
    "end": "1334960"
  },
  {
    "text": "so um nearly well double the price of my M1 large but I can run on 10 of those",
    "start": "1334960",
    "end": "1341400"
  },
  {
    "text": "instances and I can run 300 concurrent jobs on those instances so if we look at",
    "start": "1341400",
    "end": "1347120"
  },
  {
    "text": "the price per job whilst my instance price seems a lot more and I might not",
    "start": "1347120",
    "end": "1352520"
  },
  {
    "text": "naturally think that it's going to be cost effective for me to move to that instance I can actually run a job at",
    "start": "1352520",
    "end": "1358360"
  },
  {
    "text": ".19 per job so I can do it cheaper so clearly there's a point in time when I",
    "start": "1358360",
    "end": "1363679"
  },
  {
    "text": "need to run more than 100 concurrent jobs and up to 300 concurrent jobs where",
    "start": "1363679",
    "end": "1369600"
  },
  {
    "text": "I would flip and move to this instance type and make a cost saving to perform the same",
    "start": "1369600",
    "end": "1376159"
  },
  {
    "text": "workload so think workload density and don't necessarily focus on the instance",
    "start": "1376159",
    "end": "1381520"
  },
  {
    "text": "hourly rate because that instance hourly rate you could get a lot more done with it with the newer instance types than",
    "start": "1381520",
    "end": "1386960"
  },
  {
    "text": "you could on order so there'll be Break Even points when we look at reserved instances later there's a similar",
    "start": "1386960",
    "end": "1392840"
  },
  {
    "text": "concept there um between heavy light and medium utilization reserved instances a similar concept applies here when we",
    "start": "1392840",
    "end": "1399480"
  },
  {
    "text": "look at the workload density for your particular workloads another way of um keeping an",
    "start": "1399480",
    "end": "1407360"
  },
  {
    "start": "1404000",
    "end": "1528000"
  },
  {
    "text": "eye on what's going on within AWS and the costs maybe per ec2",
    "start": "1407360",
    "end": "1413320"
  },
  {
    "text": "instance is looking at how you how we perform billing and how you can remain",
    "start": "1413320",
    "end": "1418400"
  },
  {
    "text": "aware of the levels of spend that are going on in accounts any given time so if you look at a billing structure",
    "start": "1418400",
    "end": "1424120"
  },
  {
    "text": "typically you have a master account and that you would have Consolidated billing potentially from a division within your",
    "start": "1424120",
    "end": "1430080"
  },
  {
    "text": "company division B here um that is been passed up to that master account for payment and division B has an I am",
    "start": "1430080",
    "end": "1436400"
  },
  {
    "text": "structure of different users and admins and within there you may be tagging resources so tagging for example ec2",
    "start": "1436400",
    "end": "1443159"
  },
  {
    "text": "Resources with a key value pair to say these ec2 resources belong to this project to this Dev test environment to",
    "start": "1443159",
    "end": "1450200"
  },
  {
    "text": "this production environment and so on and you can have multiple of those um",
    "start": "1450200",
    "end": "1455240"
  },
  {
    "text": "sub accounts being passed up by Consolidated billing into the master account and they've all got their individual tags they've got their",
    "start": "1455240",
    "end": "1461440"
  },
  {
    "text": "individual user bases and so on at the top level you can gain a view of what is going on because we can apply alerts on",
    "start": "1461440",
    "end": "1469120"
  },
  {
    "text": "the sub accounts so you can alert when a particular account has reached a particular level here $500 or",
    "start": "1469120",
    "end": "1475559"
  },
  {
    "text": "$3,000 um and then you can generate those as emails to administrators so if you subdivide your accounts in a way",
    "start": "1475559",
    "end": "1482919"
  },
  {
    "text": "that makes sense for project structures that you're looking to do cost analysis on tagging the resources properly",
    "start": "1482919",
    "end": "1488520"
  },
  {
    "text": "putting alerts on them you can start to get an idea of what's happening and at the top level all of that data can get",
    "start": "1488520",
    "end": "1494960"
  },
  {
    "text": "kicked out into ss3 as a CSV file that you can put into Excel or your favorite cost accounting",
    "start": "1494960",
    "end": "1501080"
  },
  {
    "text": "tool and all those tags flow through so you can have a top level Consolidated",
    "start": "1501080",
    "end": "1506919"
  },
  {
    "text": "view of the price of resources for a given project or a given application and",
    "start": "1506919",
    "end": "1512240"
  },
  {
    "text": "this is another tool this is a a retrospective at the month end tool for looking at Cost analysis and looking at",
    "start": "1512240",
    "end": "1518720"
  },
  {
    "text": "the process of optimizing what is happening looking at resources and looking at how you may cross charge",
    "start": "1518720",
    "end": "1524480"
  },
  {
    "text": "internally for the use of AWS",
    "start": "1524480",
    "end": "1528880"
  },
  {
    "start": "1528000",
    "end": "1651000"
  },
  {
    "text": "now I mentioned before um a tool called trusted advisor now trusted advisor is part of our support package and support",
    "start": "1529520",
    "end": "1537760"
  },
  {
    "text": "packages from AWS are a an ond demand um contract so it's a month-on-month",
    "start": "1537760",
    "end": "1543320"
  },
  {
    "text": "rolling contract and you can stop paying at any point in time you don't have to pre-commit for a year or anything like",
    "start": "1543320",
    "end": "1548919"
  },
  {
    "text": "that and at the business level of our support offering um it comes with something called trusted advisor and you",
    "start": "1548919",
    "end": "1556120"
  },
  {
    "text": "can get business level from $100 per month month for a proportion of your Amazon spend now trusted",
    "start": "1556120",
    "end": "1562440"
  },
  {
    "text": "advisor can be found on the support tab of the console circled there alongside phone support and web support and when",
    "start": "1562440",
    "end": "1569039"
  },
  {
    "text": "you go into trusted advisor one of the checks out of many checks that we will",
    "start": "1569039",
    "end": "1574200"
  },
  {
    "text": "make for you on your account is cost optimization checks so this Circ called",
    "start": "1574200",
    "end": "1580200"
  },
  {
    "text": "is about reserved instance optimizations so this is a trusted advisor looking at the instances that are running in an",
    "start": "1580200",
    "end": "1586600"
  },
  {
    "text": "account and saying in this case we could save $895,000 by reserving certain instances on a",
    "start": "1586600",
    "end": "1595240"
  },
  {
    "text": "different term and shown below is the the estimated cost of the instances and",
    "start": "1595240",
    "end": "1600360"
  },
  {
    "text": "what you would save if you did a one-year reserved instance and we'll talk about reserved instances in a moment and how they work and what what",
    "start": "1600360",
    "end": "1607080"
  },
  {
    "text": "they do another part of trusted advisor is a whole series of checks that we'll make we'll also look at the utilization",
    "start": "1607080",
    "end": "1614000"
  },
  {
    "text": "of resources so if you have ec2 instances that are not .1% utilized on",
    "start": "1614000",
    "end": "1619840"
  },
  {
    "text": "average in a month we will make a recommendation to you that you should downsize that instance type because you",
    "start": "1619840",
    "end": "1625520"
  },
  {
    "text": "don't need that size instance type that's running because it's clearly an underutilized resource so we'll make these recommendations for you that you",
    "start": "1625520",
    "end": "1632200"
  },
  {
    "text": "can go in via the web and then you can choose to tune your account to come to a better cost basis so we want you to be",
    "start": "1632200",
    "end": "1638480"
  },
  {
    "text": "cost optimized it's more efficient for you it means you'll do more with AWS it means you'll be a happier customer and",
    "start": "1638480",
    "end": "1644320"
  },
  {
    "text": "these tools like trusted advisor really put the power and the knowledge in your hands to take those",
    "start": "1644320",
    "end": "1650559"
  },
  {
    "start": "1651000",
    "end": "1962000"
  },
  {
    "text": "actions okay so that's instance types um I promise I talk about reserved instance because these are a really important um",
    "start": "1651159",
    "end": "1658279"
  },
  {
    "text": "billing mechanism for helping you contain costs so let's just be clear on how they work and what they do so we",
    "start": "1658279",
    "end": "1665640"
  },
  {
    "text": "have on demand instances so when I was talking about El elasticity earlier about being able to grab a Linux or a",
    "start": "1665640",
    "end": "1671799"
  },
  {
    "text": "Unix uh server or Windows Server um on demand you're going to pay a price for",
    "start": "1671799",
    "end": "1677600"
  },
  {
    "text": "that instance type um as you use it and when you're done you can throw it away so if you like the classic way of",
    "start": "1677600",
    "end": "1683000"
  },
  {
    "text": "engaging with AWS to get some compute resource so great for all ranges of use",
    "start": "1683000",
    "end": "1688399"
  },
  {
    "text": "cases but we have this other concept called a reserved instance and um this is a billing mechanism that sits across",
    "start": "1688399",
    "end": "1696200"
  },
  {
    "text": "the top of your account this isn't you saying I want that instance and I want to keep this instance forever and",
    "start": "1696200",
    "end": "1701320"
  },
  {
    "text": "Reserve that single instance that I have this is a mechanism by which you can pay",
    "start": "1701320",
    "end": "1706640"
  },
  {
    "text": "a a lower upfront fee but then receive a significant discount on the hourly rate",
    "start": "1706640",
    "end": "1713279"
  },
  {
    "text": "for that instance type so you choose essentially the availability Zone the",
    "start": "1713279",
    "end": "1719480"
  },
  {
    "text": "size of instance and the distribution that you're going to use like Linux or Windows um and in a region and you would",
    "start": "1719480",
    "end": "1727000"
  },
  {
    "text": "buy an RI for a term of one or 3 years and then when you run an instance of that type in that region in that",
    "start": "1727000",
    "end": "1734360"
  },
  {
    "text": "availability Zone you will receive the discount when you stop running you won't have any to apply the discount to so",
    "start": "1734360",
    "end": "1741279"
  },
  {
    "text": "it's a billing mechanism that's applied on the billing system and we will match any RIS you have to any running",
    "start": "1741279",
    "end": "1746840"
  },
  {
    "text": "instances that match those criteria and apply to discount on your monthly cycle now within reserved instances",
    "start": "1746840",
    "end": "1753679"
  },
  {
    "text": "there are different types you can buy so you could buy a heavy utilization",
    "start": "1753679",
    "end": "1759679"
  },
  {
    "text": "Ri so if you got a database server that's running 24x7 um you're never going to turn it",
    "start": "1759679",
    "end": "1765360"
  },
  {
    "text": "off so the utilization of that resource is greater than 80% in a given month",
    "start": "1765360",
    "end": "1770440"
  },
  {
    "text": "then by applying a heavy utilization reserved instance for that instance type you can lower cost by up to 58% for the",
    "start": "1770440",
    "end": "1777440"
  },
  {
    "text": "instance type say databases large scale high performance Computing and always on infrastructure or the Baseline in",
    "start": "1777440",
    "end": "1784000"
  },
  {
    "text": "elastic architecture would benefit from this type of RI but there are two other",
    "start": "1784000",
    "end": "1789080"
  },
  {
    "text": "types there's medium and there's light utilization RIS so medium and light are",
    "start": "1789080",
    "end": "1795519"
  },
  {
    "text": "really about the time in the month that you're going to be having that resource running or not so you have a resource",
    "start": "1795519",
    "end": "1801559"
  },
  {
    "text": "that's running between 40 and 80% of the time then a medium utilization RI makes the most economic sense and likewise",
    "start": "1801559",
    "end": "1809120"
  },
  {
    "text": "with light utilization R is 15 to 40% and you can see the cost savings there",
    "start": "1809120",
    "end": "1814480"
  },
  {
    "text": "of 49 and 34% respectively and they will apply to different use cases or",
    "start": "1814480",
    "end": "1819640"
  },
  {
    "text": "different tiers in your architecture depending upon the demand curve that hits you so if you look at a break even",
    "start": "1819640",
    "end": "1828000"
  },
  {
    "text": "chart these are lines that represent the different types of RIS okay so the red",
    "start": "1828000",
    "end": "1834000"
  },
  {
    "text": "line there is a heavy utilization R that's got a flat cost to it and then the others um are on demand where light",
    "start": "1834000",
    "end": "1840399"
  },
  {
    "text": "and uh medium have different slopes and then on demand there we can see in light blue now clearly you can plot your",
    "start": "1840399",
    "end": "1848360"
  },
  {
    "text": "utilization of a resource at any given time and we look at this as an example cost structure of a given instance type",
    "start": "1848360",
    "end": "1854080"
  },
  {
    "text": "but really what we're talking about is the ability to to choose the resource that's right on the white line there um",
    "start": "1854080",
    "end": "1860679"
  },
  {
    "text": "and then I can pre-book that um as a a reserved instance and I can yield savings so the savings there on 100%",
    "start": "1860679",
    "end": "1866799"
  },
  {
    "text": "neutralization you can see clearly between the peak of the light blue line at the top right of my chart and the",
    "start": "1866799",
    "end": "1872159"
  },
  {
    "text": "flat of the white there below is significant um and depending upon the instance size you'll use that'll be more",
    "start": "1872159",
    "end": "1879519"
  },
  {
    "text": "or less in real terms based upon the the traditional hourly rate and if you look at how you might",
    "start": "1879519",
    "end": "1886240"
  },
  {
    "text": "mix and match the ri type types if I go back to my 24-hour period that I had in",
    "start": "1886240",
    "end": "1891720"
  },
  {
    "text": "my original example I have a peak of demand during the middle of the day and I've got a baseline at the bottom that I",
    "start": "1891720",
    "end": "1898639"
  },
  {
    "text": "need to be running something all the time so shown on the left is a scale of instant size instance numbers I've got",
    "start": "1898639",
    "end": "1905000"
  },
  {
    "text": "two instances running all the time regardless 24x7 and these are heavy utilization RIS",
    "start": "1905000",
    "end": "1912000"
  },
  {
    "text": "in this case so I've achieved a cost saving by by applying that discount of",
    "start": "1912000",
    "end": "1917120"
  },
  {
    "text": "that level and then as I go up the tiers I can see the very Peak is a very small",
    "start": "1917120",
    "end": "1922720"
  },
  {
    "text": "Peak so I'm covering that with on demand because that Peak may or may not come but as I go into the purple and the",
    "start": "1922720",
    "end": "1929480"
  },
  {
    "text": "green these are utilization periods that change and are smaller as I go up so I've got a green is a medium utilization",
    "start": "1929480",
    "end": "1936559"
  },
  {
    "text": "R and a purple is a light utilization RI",
    "start": "1936559",
    "end": "1941760"
  },
  {
    "text": "by mixing and matching what we're doing is that as the curve hits us and I need to spin out resources to handle that",
    "start": "1941760",
    "end": "1947440"
  },
  {
    "text": "load we will then match for the period that I was running that type of resource and it was utilized for X point in time I'll",
    "start": "1947440",
    "end": "1953720"
  },
  {
    "text": "apply the discount for you and you can achieve a huge saving on your bill by applying some RIS into your",
    "start": "1953720",
    "end": "1961518"
  },
  {
    "text": "account okay so that's reserved instances and moving on to um a very",
    "start": "1961559",
    "end": "1968039"
  },
  {
    "start": "1962000",
    "end": "2099000"
  },
  {
    "text": "intive Innovative part of ows which is spot instances um so just on demand instan",
    "start": "1968039",
    "end": "1974240"
  },
  {
    "text": "reserved instances spot instances are about bidding on unused ec2 capacity and",
    "start": "1974240",
    "end": "1980159"
  },
  {
    "text": "there's a supply and demand um Marketplace that operates that determines the price of a given",
    "start": "1980159",
    "end": "1986000"
  },
  {
    "text": "resource now there's some dynamics of this that make this interesting and there's some things you need to be aware of if you're going to use spot so let's",
    "start": "1986000",
    "end": "1993519"
  },
  {
    "text": "have a look at those so how does this work in terms of our overall capacity",
    "start": "1993519",
    "end": "1999000"
  },
  {
    "text": "within AWS now this is a an idealized sort of chart but you think about the",
    "start": "1999000",
    "end": "2004559"
  },
  {
    "text": "reserved instances there's a number there an amount of uh capacity that we would keep available for reserved",
    "start": "2004559",
    "end": "2010600"
  },
  {
    "text": "instance purchases because these are people that are for example booking a heavy utilization R we know these",
    "start": "2010600",
    "end": "2017000"
  },
  {
    "text": "instances are going to be running 24x7 typically so there a portion of the AWS capacity that's given over to those",
    "start": "2017000",
    "end": "2023000"
  },
  {
    "text": "types of instances on top of that then there's varying OnDemand instance usage and this",
    "start": "2023000",
    "end": "2030000"
  },
  {
    "text": "will grow and Shrink around the world depending upon the time of the day and then there's a Delta at the top which is",
    "start": "2030000",
    "end": "2035639"
  },
  {
    "text": "called spot so this is the unused capacity that we're effectively making available at a given price depending on",
    "start": "2035639",
    "end": "2041639"
  },
  {
    "text": "how much is available at a given time and it's called The Spot",
    "start": "2041639",
    "end": "2046919"
  },
  {
    "text": "market so if you look in your console in the ec2 tab you can see spot instances",
    "start": "2047240",
    "end": "2053280"
  },
  {
    "text": "and then you'll be had a look at pricing history so this is an example of pricing history around a micro in the US east",
    "start": "2053280",
    "end": "2060000"
  },
  {
    "text": "region across all zones over three months and we can see how the price has varied in different availability zones",
    "start": "2060000",
    "end": "2066800"
  },
  {
    "text": "um and it's varied between uh not a lot at the bottom to around 2 cents Peak at the top okay so around the on demand",
    "start": "2066800",
    "end": "2074200"
  },
  {
    "text": "price for this instance type so typically you can receive a capacity in",
    "start": "2074200",
    "end": "2079679"
  },
  {
    "text": "AWS at a significant discount on the spot market so spot markets you you bid",
    "start": "2079679",
    "end": "2085720"
  },
  {
    "text": "a price okay so you're going to bid a price that you're willing to pay for this resource so let's say you bid um uh",
    "start": "2085720",
    "end": "2093720"
  },
  {
    "text": "uh 8 cents in this example where the current price on the market is 7 cents you will receive",
    "start": "2093720",
    "end": "2099520"
  },
  {
    "start": "2099000",
    "end": "2347000"
  },
  {
    "text": "resources so if your bid is greater than the spot price you get an instance now",
    "start": "2099520",
    "end": "2104599"
  },
  {
    "text": "the thing you need to be aware of is that if your bid Falls below the spot price your instance is",
    "start": "2104599",
    "end": "2111040"
  },
  {
    "text": "terminated okay so whilst you can achieve significant savings you need to be aware that your resources um may be",
    "start": "2111040",
    "end": "2118880"
  },
  {
    "text": "claimed back by AWS if you're no longer um bidding the right price and given the",
    "start": "2118880",
    "end": "2124160"
  },
  {
    "text": "market rate for that particular type of resource now you can go and programmatically read the price you can",
    "start": "2124160",
    "end": "2130320"
  },
  {
    "text": "look at the pricing history and you can make decisions on how you might strategize around the spot",
    "start": "2130320",
    "end": "2135720"
  },
  {
    "text": "Market um so given that resources may be uh pulled away from you any given time",
    "start": "2135720",
    "end": "2142079"
  },
  {
    "text": "on the spot Market you need to architect for that so some of the the ways in which people do that is that you",
    "start": "2142079",
    "end": "2148119"
  },
  {
    "text": "decouple components so um you would decouple for example the front end of your application from the back end so",
    "start": "2148119",
    "end": "2155040"
  },
  {
    "text": "that the front end would be always running maybe in back backend batch processing could leverage spot um or",
    "start": "2155040",
    "end": "2161240"
  },
  {
    "text": "using Frameworks such as elastic map produce managed Hadoop framework it's by Nature a very fault tolerant framework",
    "start": "2161240",
    "end": "2168720"
  },
  {
    "text": "you can handle the failure on the spot markets of individual nodes and her doop",
    "start": "2168720",
    "end": "2174040"
  },
  {
    "text": "cluster because the framework manages it um but also you can design with interruption in mind so by putting sqs",
    "start": "2174040",
    "end": "2182440"
  },
  {
    "text": "Q's in place to handle Persistence of of events or using things like simple workflow to ing together uh complex",
    "start": "2182440",
    "end": "2189480"
  },
  {
    "text": "workflows without having to rely on the instances to maintain State because that state could go if they're on spot",
    "start": "2189480",
    "end": "2195640"
  },
  {
    "text": "instances you can place data in durable stores such as S3 or simple DB or Dynamo",
    "start": "2195640",
    "end": "2200960"
  },
  {
    "text": "DB and effectively save your progress regularly on a given task then you would",
    "start": "2200960",
    "end": "2206599"
  },
  {
    "text": "be able to leverage that very low price of spot yet able to tolerate some sort of uh failure of that node when we",
    "start": "2206599",
    "end": "2213560"
  },
  {
    "text": "reclaim it if your price doesn't go uh favor for you on the",
    "start": "2213560",
    "end": "2220040"
  },
  {
    "text": "market have a example of how this works and how this um can achieve quite an",
    "start": "2220040",
    "end": "2225760"
  },
  {
    "text": "interesting Dynamic is that with elastic map produce they're pretty much a sort",
    "start": "2225760",
    "end": "2231680"
  },
  {
    "text": "of near linear scale so in this scenario I've got four instances to do a",
    "start": "2231680",
    "end": "2236920"
  },
  {
    "text": "computational task and let's say that task takes 14 hours and for sake of argument my price on on demand for that",
    "start": "2236920",
    "end": "2243960"
  },
  {
    "text": "instance type is0 50s so four instances for 40 14 hours at 50 is $28 to get this",
    "start": "2243960",
    "end": "2250359"
  },
  {
    "text": "particular job done maybe it's a a big computational task such as counting the number of Records or instance types of a",
    "start": "2250359",
    "end": "2257640"
  },
  {
    "text": "record within a very large log file that split up across four instances now scenario two around that",
    "start": "2257640",
    "end": "2264319"
  },
  {
    "text": "same job is that I could add Five Spot instances and because it's a near linear scale I've pretty much doubled the",
    "start": "2264319",
    "end": "2270760"
  },
  {
    "text": "resources I have available to the job so half the duration of this um EMR",
    "start": "2270760",
    "end": "2278000"
  },
  {
    "text": "um analysis and if I do the costing around that I've got my original um four",
    "start": "2278000",
    "end": "2285280"
  },
  {
    "text": "instances at0 50 but for half the time so I'm doing that for $14 versus the $28",
    "start": "2285280",
    "end": "2291319"
  },
  {
    "text": "previously and I have five instances and let's say that my spot price at this is half the on demand price so my spot",
    "start": "2291319",
    "end": "2298839"
  },
  {
    "text": "price here is 25 cents so 7 hours five instances at 25 cents is",
    "start": "2298839",
    "end": "2304040"
  },
  {
    "text": "$8.75 add the two together and I've got a cost of2 $2.75 versus",
    "start": "2304040",
    "end": "2310920"
  },
  {
    "text": "$28 so with the spot market and by wrapping it in a framework such as EMR",
    "start": "2310920",
    "end": "2316119"
  },
  {
    "text": "that enables me to be fault tolerant I've done more for Less so I've saved time I've done it in in half the time",
    "start": "2316119",
    "end": "2323599"
  },
  {
    "text": "and I've saved 22% on the cost so pretty good for paying less and getting something done quicker and this is",
    "start": "2323599",
    "end": "2330160"
  },
  {
    "text": "something that you can achieve in your own architectures by using spat 2 um because you can create highly parallel",
    "start": "2330160",
    "end": "2336720"
  },
  {
    "text": "workloads and and if you're fault tolerant to those failures or you implement a bidding strategy that",
    "start": "2336720",
    "end": "2342079"
  },
  {
    "text": "enables you to manage that and to reduce the risk of that you can achieve some significant cost savings so let's look",
    "start": "2342079",
    "end": "2348400"
  },
  {
    "start": "2347000",
    "end": "2696000"
  },
  {
    "text": "about at some of the bidding strategies that customers use if we look at some real data from um",
    "start": "2348400",
    "end": "2355960"
  },
  {
    "text": "the spot Market with an AWS the bid distribution for a thre Monon period here we can look at the bid price as a",
    "start": "2355960",
    "end": "2363040"
  },
  {
    "text": "percentage of the on demand price and the percentage of the distribution that's gone so we can see the blue bar in the middle is people bidding on the",
    "start": "2363040",
    "end": "2370640"
  },
  {
    "text": "on demand price 100% of the on demand price whereas at the far right we've got people bidding 200% twice the on demand",
    "start": "2370640",
    "end": "2378359"
  },
  {
    "text": "price and at the far left people bidding only 30% of the on demand price for that",
    "start": "2378359",
    "end": "2383480"
  },
  {
    "text": "given resource so that explains the chart now if I look at what people are doing um we've got a portion of people",
    "start": "2383480",
    "end": "2390000"
  },
  {
    "text": "down at the bottom there that are bidding near what is actually the reserved instance hourly price rate for",
    "start": "2390000",
    "end": "2395200"
  },
  {
    "text": "a given Resource as we move to the right right we have people bidding above the spot price history for that given",
    "start": "2395200",
    "end": "2401760"
  },
  {
    "text": "resource they're trying to follow the spot price on a given period of History we have people that are biding near or",
    "start": "2401760",
    "end": "2408440"
  },
  {
    "text": "the on demand price for that particular resource so they're prepared to pay up to what it would cost them normally to",
    "start": "2408440",
    "end": "2414000"
  },
  {
    "text": "get this resource on the spot market and at the right we have people bidding way above in this some case more than twice",
    "start": "2414000",
    "end": "2421520"
  },
  {
    "text": "the on demand price now this brings together some various different strategies that we see",
    "start": "2421520",
    "end": "2426960"
  },
  {
    "text": "customers is using so the first is um bid near the reserved hourly price you",
    "start": "2426960",
    "end": "2432160"
  },
  {
    "text": "only pay for a full hour now this is a dynamic of the spot Market which is interesting so if you can tolerate",
    "start": "2432160",
    "end": "2438960"
  },
  {
    "text": "failure um if you are interrupted on an instance within the hour you don't pay",
    "start": "2438960",
    "end": "2445160"
  },
  {
    "text": "for that hour um processing now on demand if you take an instance and then",
    "start": "2445160",
    "end": "2450400"
  },
  {
    "text": "drop it 30 minutes later you will pay a full hour for that instance but for spot if we interrupt you you don't get build",
    "start": "2450400",
    "end": "2457680"
  },
  {
    "text": "for that uh portion of the hour that the instance was running so if you bid at a low price and you can tolerate failure",
    "start": "2457680",
    "end": "2464640"
  },
  {
    "text": "each time you're interrupted you will get effectively some free processing now there are customers that are able to",
    "start": "2464640",
    "end": "2471880"
  },
  {
    "text": "accept a high degree of interruption that'll bid very close to the bottom",
    "start": "2471880",
    "end": "2477400"
  },
  {
    "text": "price or the market price at the lowest point and they will accept Interruption because they're ultimately getting extra",
    "start": "2477400",
    "end": "2483720"
  },
  {
    "text": "resources for free as part of the process so an extreme example bidding near the reserved hourly price so if",
    "start": "2483720",
    "end": "2490960"
  },
  {
    "text": "you're interrupted the hour is free another um example is bidding above",
    "start": "2490960",
    "end": "2497280"
  },
  {
    "text": "the on demand price so if you bid um at a level that is significantly more than",
    "start": "2497280",
    "end": "2503640"
  },
  {
    "text": "the ond demand price then over given history of the spot Market you can make a fair Assumption of how often you think",
    "start": "2503640",
    "end": "2510440"
  },
  {
    "text": "you'll be interrupted and it'll be far less than If you bid at a lower level so we saw on that previous chart that",
    "start": "2510440",
    "end": "2516319"
  },
  {
    "text": "customers were bidding 200% or more of the on demand price because they're only paying the spot price at a given time",
    "start": "2516319",
    "end": "2523839"
  },
  {
    "text": "they're bidding at a level which means that if the price does rise above on demand for a given period maybe for a",
    "start": "2523839",
    "end": "2530880"
  },
  {
    "text": "day or two they will pay more for that period than they would have on the on demand Price Market however for the",
    "start": "2530880",
    "end": "2538119"
  },
  {
    "text": "remaining period of time they're paying only what the current spot Market is priced out which is typically",
    "start": "2538119",
    "end": "2543800"
  },
  {
    "text": "significantly less than the ond demand price so net net they're still making",
    "start": "2543800",
    "end": "2548839"
  },
  {
    "text": "significant savings and they're reducing the risk of interruption by doing that sort of biding",
    "start": "2548839",
    "end": "2555520"
  },
  {
    "text": "strategy another thing about um customers that are implementing on the spot Market is that they are embodying",
    "start": "2556800",
    "end": "2564280"
  },
  {
    "text": "that implementation of a cost-aware architecture because their applications will be taking uh re feeds of the spot",
    "start": "2564280",
    "end": "2570920"
  },
  {
    "text": "market price for a given instance type and they were able to flip from spot to",
    "start": "2570920",
    "end": "2576000"
  },
  {
    "text": "on demand as price dictates because they've architected in a way that um their systems can be interrupted they've",
    "start": "2576000",
    "end": "2583160"
  },
  {
    "text": "architected in a way that enables them to automate the creation and destruction of resources and by having applications",
    "start": "2583160",
    "end": "2590040"
  },
  {
    "text": "that read the spot market and decide when the market price is moving in a way that's non-favorable they can move",
    "start": "2590040",
    "end": "2595559"
  },
  {
    "text": "processing from spot resources to on demand and then back again when the prices move back in the favor and there",
    "start": "2595559",
    "end": "2602200"
  },
  {
    "text": "are customers that are really doing this and that they are leveraging the automation within AWS enable to do this",
    "start": "2602200",
    "end": "2608480"
  },
  {
    "text": "and to achieve huge cost savings whilst not being interrupted as part of their",
    "start": "2608480",
    "end": "2614640"
  },
  {
    "text": "workloads some customers that are um using the spot Market extensively a range of them here um from academic",
    "start": "2614640",
    "end": "2621800"
  },
  {
    "text": "institutions to um popular video encoding sites that VMO and sharing sites but an interesting one at the top",
    "start": "2621800",
    "end": "2628720"
  },
  {
    "text": "right which gives an example that you could Implement yourself that may be useful to you is browser mob so browser",
    "start": "2628720",
    "end": "2634480"
  },
  {
    "text": "mob is an online testing tool where you can um load test a web application um and",
    "start": "2634480",
    "end": "2641559"
  },
  {
    "text": "part of that load testing you can spin up many hundreds of real instances or",
    "start": "2641559",
    "end": "2647240"
  },
  {
    "text": "servers running real browsers maybe running a selenium script for example in that browser and they will run up on the",
    "start": "2647240",
    "end": "2654480"
  },
  {
    "text": "spot Market instances for you to do that and you will therefore as a customer browser mob receive some sort of saving",
    "start": "2654480",
    "end": "2660599"
  },
  {
    "text": "overd doing that traditionally now they're doing a concept that you could do yourself so you could spin up",
    "start": "2660599",
    "end": "2665640"
  },
  {
    "text": "resources on the spot Market to perform load testing to perform more real world testing in a way that you wouldn't maybe",
    "start": "2665640",
    "end": "2672040"
  },
  {
    "text": "economically be able to do with on demand you couldn't justify the price on the spot Market it becomes cost",
    "start": "2672040",
    "end": "2677480"
  },
  {
    "text": "effective to do so and given that you can spin these up over every 2 or 3 hours run a low test for a couple of",
    "start": "2677480",
    "end": "2682800"
  },
  {
    "text": "hours and then turn them off um it's a great way of um performing some testing that you couldn't do in an on- premise",
    "start": "2682800",
    "end": "2689440"
  },
  {
    "text": "environment through capacity constraints as well as for economic reasons okay so that's um spot in",
    "start": "2689440",
    "end": "2698079"
  },
  {
    "start": "2696000",
    "end": "2896000"
  },
  {
    "text": "instances lastly um complimentary services so a short section here of talking about U software versus services",
    "start": "2698079",
    "end": "2706520"
  },
  {
    "text": "so if we look at um a classic stack here at the top of using an elastic load",
    "start": "2706520",
    "end": "2711680"
  },
  {
    "text": "balancer to front some web servers across multiple availability zones and compare that to running a software load",
    "start": "2711680",
    "end": "2719280"
  },
  {
    "text": "balancer at the bottom on an ec2 instance I'm trying to draw the the comparison of using load balancing as a",
    "start": "2719280",
    "end": "2725880"
  },
  {
    "text": "service versus installing load balancing a software on an instance now load balancing as a service cost as",
    "start": "2725880",
    "end": "2732599"
  },
  {
    "text": "0.028 per hour for you to use an elb versus running that on a small instance",
    "start": "2732599",
    "end": "2738079"
  },
  {
    "text": "will cost you 0.08 and if you look at what can happen",
    "start": "2738079",
    "end": "2743599"
  },
  {
    "text": "behind the scenes there as well is elastic load balancer is multi- availability Zone whereas a software",
    "start": "2743599",
    "end": "2748760"
  },
  {
    "text": "load balancer is inherently in one availability zone so the idea being that that there are services with an AWS that",
    "start": "2748760",
    "end": "2755680"
  },
  {
    "text": "you can achieve um cost optimizations from moving software that you might install and run in AWS and moving that",
    "start": "2755680",
    "end": "2762079"
  },
  {
    "text": "function onto the AWS equivalent service and there's a range of those that you can use another example would be sqs so",
    "start": "2762079",
    "end": "2769920"
  },
  {
    "text": "queing is a a common architectural component for use for decoupling um",
    "start": "2769920",
    "end": "2775880"
  },
  {
    "text": "tiers of an application or functions of an application so we might produce a message from one system like an order",
    "start": "2775880",
    "end": "2782520"
  },
  {
    "text": "taking system drops a message on sqsq and then there are boxes that in instances that consume those messages to",
    "start": "2782520",
    "end": "2789160"
  },
  {
    "text": "to process maybe an order or a video encoding job and so on and sqs is is",
    "start": "2789160",
    "end": "2794960"
  },
  {
    "text": "extremely cost effective because it's 1 cent per 10,000 requests so extremely cheap to um manage",
    "start": "2794960",
    "end": "2802920"
  },
  {
    "text": "persistent message cues at a regional level within AWS versus again having to",
    "start": "2802920",
    "end": "2809119"
  },
  {
    "text": "install an instance um install a software queue and do the same so software on ec2 of course you",
    "start": "2809119",
    "end": "2816400"
  },
  {
    "text": "can install software you can get any software you like and run it on ec2 and you can use all the custom features and",
    "start": "2816400",
    "end": "2821480"
  },
  {
    "text": "you can implement the latest um of a framework you can Implement commercial software and so on so um it's a great",
    "start": "2821480",
    "end": "2828400"
  },
  {
    "text": "thing to do however it does require some effort it requires an instance that has a cost Associated to it it will generate",
    "start": "2828400",
    "end": "2835240"
  },
  {
    "text": "typically a single point of failure in your architecture because it will generally be limited to one availability Zone and you need to administer yourself",
    "start": "2835240",
    "end": "2842119"
  },
  {
    "text": "okay so just like any other sort of software stack in any other environment AWS servic like elastic load balancer",
    "start": "2842119",
    "end": "2848400"
  },
  {
    "text": "like simple notification service a simple queueing service simple email service simple workflow and Dynamo DB",
    "start": "2848400",
    "end": "2854559"
  },
  {
    "text": "and more what you're getting as a pay as you go typically a much better price than running it yourself and to boot",
    "start": "2854559",
    "end": "2861440"
  },
  {
    "text": "you're getting scalability availability and high performance as as as part and parcel of consuming that service so",
    "start": "2861440",
    "end": "2868040"
  },
  {
    "text": "there's a whole range of services that um that I haven't mentioned here things like Cloud search for example rather",
    "start": "2868040",
    "end": "2873800"
  },
  {
    "text": "than installing an open search engine across a cluster of of instances in your environment you can simply consume",
    "start": "2873800",
    "end": "2879599"
  },
  {
    "text": "search as a service high performance take away all that pain of management",
    "start": "2879599",
    "end": "2884680"
  },
  {
    "text": "and save yourself a whole bunch of um uh money along the way by consuming it in",
    "start": "2884680",
    "end": "2891000"
  },
  {
    "text": "that way and letting us running it for you and removing the ec2 instance costs okay so closing off our webinar",
    "start": "2891000",
    "end": "2898800"
  },
  {
    "start": "2896000",
    "end": "2970000"
  },
  {
    "text": "today so in summary we've talked around elastic capacity really about turning things off when you don't need them and",
    "start": "2898800",
    "end": "2905599"
  },
  {
    "text": "only bringing on new resources as you need them and that can apply equally to a Dev test environment where you simply",
    "start": "2905599",
    "end": "2912240"
  },
  {
    "text": "turn stuff off at night when you're not using it uh as it does to a production environment where you bring resources on",
    "start": "2912240",
    "end": "2918559"
  },
  {
    "text": "Via things like autoscaling as you need them as well as throwing them away via Auto scaling we looked at instance types",
    "start": "2918559",
    "end": "2924680"
  },
  {
    "text": "so choosing the right instance for the density of the workload that you're performing and to put some thought",
    "start": "2924680",
    "end": "2930480"
  },
  {
    "text": "behind the metric that you're collecting and going to analyze against because you may find that a a different instance",
    "start": "2930480",
    "end": "2936040"
  },
  {
    "text": "type because you're better cost effective overall for your platform than maybe the hourly rate of that instance",
    "start": "2936040",
    "end": "2942440"
  },
  {
    "text": "type dictates the reserved instances so a great billing mechanism for reducing your costs and using things like trusted",
    "start": "2942440",
    "end": "2948920"
  },
  {
    "text": "advisor to get some advice on that spot instances for workloads that you can",
    "start": "2948920",
    "end": "2954760"
  },
  {
    "text": "tolerate Interruption on or where you're prepared to put the effort in to understand the spot market and to",
    "start": "2954760",
    "end": "2960520"
  },
  {
    "text": "develop a bidding strategy that works for you and of course not running software on ec2 instances but rather",
    "start": "2960520",
    "end": "2966240"
  },
  {
    "text": "consuming Services where they are available in AWS will save you money too so where to go next there's a number",
    "start": "2966240",
    "end": "2972720"
  },
  {
    "start": "2970000",
    "end": "3059000"
  },
  {
    "text": "of resources that we can point you to so there is an economics section on the uh aws.amazon.com",
    "start": "2972720",
    "end": "2979119"
  },
  {
    "text": "website and there's also a calculator calulator so um advis you is going to",
    "start": "2979119",
    "end": "2984200"
  },
  {
    "text": "have a look around and there within the economics section um and also in the white paper section there is a number of",
    "start": "2984200",
    "end": "2990839"
  },
  {
    "text": "papers and one of those is how AWS pricing works so we'll go into a lot of detail around this and there are",
    "start": "2990839",
    "end": "2996720"
  },
  {
    "text": "economics papers around a TCO of cloud building the case for cloud but also all",
    "start": "2996720",
    "end": "3002520"
  },
  {
    "text": "the topics I've covered today will be generally covered in one or more of those white papers in terms of how to",
    "start": "3002520",
    "end": "3007680"
  },
  {
    "text": "strategize around using AWS and some best practice advice on keeping costs contained um and just a quick view the",
    "start": "3007680",
    "end": "3014440"
  },
  {
    "text": "cost calculator that I mentioned simple monthly calculator you can uh leverage some templates in there that will",
    "start": "3014440",
    "end": "3020319"
  },
  {
    "text": "generate typical web application framework sort of structures or maybe batch processing structures and it will",
    "start": "3020319",
    "end": "3026880"
  },
  {
    "text": "give you an idea of what resources are required and you can tune this to a high degree of detail so you might want to",
    "start": "3026880",
    "end": "3032520"
  },
  {
    "text": "tune the amount of data that you think you're going to get in and out of an application for example and it will chot",
    "start": "3032520",
    "end": "3037680"
  },
  {
    "text": "up all the different parts of the bill and estimate your monthly bill that are coming out and you can add RIS to that",
    "start": "3037680",
    "end": "3043520"
  },
  {
    "text": "for example and see how that compares maybe if you were to make an RI purchase so take a look at the cost",
    "start": "3043520",
    "end": "3049520"
  },
  {
    "text": "calculator um find out more as always at aws.amazon.com and do let us know what",
    "start": "3049520",
    "end": "3055480"
  },
  {
    "text": "you think about these webinars drop us a note on the contact us form on the website thank",
    "start": "3055480",
    "end": "3062000"
  }
]