[
  {
    "start": "0",
    "end": "12000"
  },
  {
    "text": "thanks for coming my name is Konstantin Gonzalez I'm a Solutions Architect out of the AWS Germany organization and this",
    "start": "30",
    "end": "5850"
  },
  {
    "text": "is Marcus post-attack from our customer team internet and today we're going to talk about caching so our goal today is",
    "start": "5850",
    "end": "13860"
  },
  {
    "start": "12000",
    "end": "61000"
  },
  {
    "text": "to help you earn more money and also to save some money so that you can afford",
    "start": "13860",
    "end": "19560"
  },
  {
    "text": "your next trip to reinvent next year and we're going to do this through speed this is this session is all about",
    "start": "19560",
    "end": "25019"
  },
  {
    "text": "getting more speed into your application we're going to share some best practices through some architecture patterns and",
    "start": "25019",
    "end": "31850"
  },
  {
    "text": "to make this a little bit more concrete we have real world experiences from marques company team internet and as a",
    "start": "31850",
    "end": "39120"
  },
  {
    "text": "side effect where you're also gonna save some money and you're gonna see in a minute how it works so this session is",
    "start": "39120",
    "end": "44610"
  },
  {
    "text": "the first talk in the EdTech series please make sure you check out the other end tech sessions they're great sessions",
    "start": "44610",
    "end": "50700"
  },
  {
    "text": "lots of interesting stuff to learn about real-time bidding engines and machine learning for EdTech and all the other",
    "start": "50700",
    "end": "55739"
  },
  {
    "text": "stuff so make sure you check your schedules and go to the other sessions which which are going to be in a different room so what is EdTech there's",
    "start": "55739",
    "end": "65189"
  },
  {
    "start": "61000",
    "end": "115000"
  },
  {
    "text": "a lots of different things going on in EdTech but on a 10,000 foot level it's all about connecting publishers with",
    "start": "65189",
    "end": "71340"
  },
  {
    "text": "advertisers and that sort of happens in some form of bidding engine and bidding",
    "start": "71340",
    "end": "77369"
  },
  {
    "text": "is something that is limited in the EdTech business because there's only so much time you can let your customers",
    "start": "77369",
    "end": "83520"
  },
  {
    "text": "wait on your website until you decide what ads to give them so the bidding engine with a limited time creates kind",
    "start": "83520",
    "end": "89850"
  },
  {
    "text": "of like a hard cutoff until when you're bidding extra needs to have happened and then you'll go off and show your ads and",
    "start": "89850",
    "end": "96180"
  },
  {
    "text": "that cutoff is is actually something that can happen in a couple of milliseconds so it is very typical to",
    "start": "96180",
    "end": "102060"
  },
  {
    "text": "have just a couple of hundred milliseconds time in which you can have your whole bidding process and the more",
    "start": "102060",
    "end": "108930"
  },
  {
    "text": "you can get done during that hard cutoff time the more profitable your business is going to be so it really comes down",
    "start": "108930",
    "end": "115470"
  },
  {
    "start": "115000",
    "end": "130000"
  },
  {
    "text": "to having as much speed as possible in your application so you get to to get a",
    "start": "115470",
    "end": "121619"
  },
  {
    "text": "lot of transactions and do these transactions really really fast now how do you get to speed right how do you",
    "start": "121619",
    "end": "127770"
  },
  {
    "text": "improve your speed there are really three strategies you can you can follow one of them",
    "start": "127770",
    "end": "133270"
  },
  {
    "start": "130000",
    "end": "195000"
  },
  {
    "text": "is you can increase the rate at which you're running your transactions and minimize the time each transaction takes",
    "start": "133270",
    "end": "140350"
  },
  {
    "text": "and that can become really complex there's only so much you can optimize out of your application you can go",
    "start": "140350",
    "end": "146680"
  },
  {
    "text": "really down into the nitty-gritty details of your app trying to increase rate but it at some level it becomes",
    "start": "146680",
    "end": "152830"
  },
  {
    "text": "really complex now the other thing you can do is you can paralyze your application and polarization is also",
    "start": "152830",
    "end": "158800"
  },
  {
    "text": "something that can turn out to be complex once you go beyond a certain a certain level of polarization so the the",
    "start": "158800",
    "end": "166330"
  },
  {
    "text": "third approach you want to suggest to you is actually the lazy approach and it turns out that it's also an easy",
    "start": "166330",
    "end": "171880"
  },
  {
    "text": "approach and that is to do a lot to do list so in a way caching is a mechanism",
    "start": "171880",
    "end": "178060"
  },
  {
    "text": "for you to do less than your application so that you can get more done in aggregate so think of caching of ways to",
    "start": "178060",
    "end": "186520"
  },
  {
    "text": "save time through doing less but still being able to accomplish more in terms",
    "start": "186520",
    "end": "192340"
  },
  {
    "text": "of transactions and we're gonna show you how this works so in a way caching means",
    "start": "192340",
    "end": "197700"
  },
  {
    "start": "195000",
    "end": "226000"
  },
  {
    "text": "do the hard stuff that consumes your time only once and then reuse those",
    "start": "197700",
    "end": "203590"
  },
  {
    "text": "results as many times as possible and the reasoning here is that it turns out that in the cloud and in NIT memory it",
    "start": "203590",
    "end": "211690"
  },
  {
    "text": "tends to become cheaper and faster than CPU so if you can get your transaction",
    "start": "211690",
    "end": "217840"
  },
  {
    "text": "computed and then you save those results it's a lot easier to retrieve those results than computing them again so our",
    "start": "217840",
    "end": "226270"
  },
  {
    "start": "226000",
    "end": "247000"
  },
  {
    "text": "talk today is structured or around these four layers of cake we structured them",
    "start": "226270",
    "end": "231850"
  },
  {
    "text": "into a CH web tier app tier and database and each layer in this app in your",
    "start": "231850",
    "end": "237820"
  },
  {
    "text": "application offers some great opportunities for you to save time and to become faster through caching okay so",
    "start": "237820",
    "end": "247630"
  },
  {
    "start": "247000",
    "end": "284000"
  },
  {
    "text": "this is how most applications look like in some way you can relate your application to this diagram there is",
    "start": "247630",
    "end": "253750"
  },
  {
    "text": "some database where all the truths happens there is your actual application that sits in front of your database and",
    "start": "253750",
    "end": "259359"
  },
  {
    "text": "where the transactions happen then there is some kind of web layer where you touch the internet with your application",
    "start": "259359",
    "end": "265479"
  },
  {
    "text": "it could be a webserver it could be a load balancer it could be something else and then at the",
    "start": "265479",
    "end": "270920"
  },
  {
    "text": "edge this is where the outside internet comes into play where your actual clients your users are coming from and",
    "start": "270920",
    "end": "277880"
  },
  {
    "text": "we're going to work from your user back to your database through those four layers that I mentioned before so let's",
    "start": "277880",
    "end": "285380"
  },
  {
    "start": "284000",
    "end": "293000"
  },
  {
    "text": "start with edge caching which is your first opportunity to become faster and",
    "start": "285380",
    "end": "290630"
  },
  {
    "text": "add some speed into your application and the way to do is is by using Amazon",
    "start": "290630",
    "end": "295640"
  },
  {
    "start": "293000",
    "end": "353000"
  },
  {
    "text": "CloudFront which is our content delivery network from Amazon Amazon CloudFront gives you a hundred and seven edge",
    "start": "295640",
    "end": "301430"
  },
  {
    "text": "locations and that number is increasing almost every day now in 55 cities 24",
    "start": "301430",
    "end": "307850"
  },
  {
    "text": "countries and it supports both static and dynamic content so what it does is it runs a network of proxy servers",
    "start": "307850",
    "end": "314360"
  },
  {
    "text": "worldwide that are able to cache your static content such as HTML pages images",
    "start": "314360",
    "end": "319570"
  },
  {
    "text": "JavaScript CSS that sort of thing but there is one secret behind platform and",
    "start": "319570",
    "end": "324740"
  },
  {
    "text": "the secret here is that CloudFront can also add a lot of value and a lot of speed to your application even if it",
    "start": "324740",
    "end": "331730"
  },
  {
    "text": "doesn't cache at all and the reason here is that cloud phone gives you an optimized last mile delivery mechanism",
    "start": "331730",
    "end": "338660"
  },
  {
    "text": "so think of cloud phone is a network acceleration layer that you can put on top of your application that gives you",
    "start": "338660",
    "end": "344660"
  },
  {
    "text": "faster access to your users worldwide and I still remember almost five years",
    "start": "344660",
    "end": "350270"
  },
  {
    "text": "ago sitting in a conference room with Markos Ostertag now vp of engineering",
    "start": "350270",
    "end": "355400"
  },
  {
    "text": "and we were debating around cloud phone and I thought Marcus why don't you use cloud running he told me no we have",
    "start": "355400",
    "end": "361550"
  },
  {
    "text": "nothing to cache here so here's Marcos and he'll he'll tell you what he did with cloud front Thank",
    "start": "361550",
    "end": "368120"
  },
  {
    "text": "You Constantine yes Constantine just mentioned my name is Markus aesthetic I'm the VP of engineering at team Internet and before",
    "start": "368120",
    "end": "375170"
  },
  {
    "text": "I want to start talking about cloud form and what we're doing with cloud front just give you a rough overview about who is team Internet we are the leading",
    "start": "375170",
    "end": "381560"
  },
  {
    "text": "company in the domain monetization business or everything around around domain parking buying and selling traffic from the domain parking space",
    "start": "381560",
    "end": "388400"
  },
  {
    "text": "we're only 35 people our headquarters is in Munich Germany and we are a very very",
    "start": "388400",
    "end": "393650"
  },
  {
    "text": "tech focused company so we're always trying to leverage tech as much as possible and trying to squeeze out",
    "start": "393650",
    "end": "399590"
  },
  {
    "text": "everything with Tech and so we're trying to be as small on a number of people we're hiring",
    "start": "399590",
    "end": "405710"
  },
  {
    "text": "um but leveraging take as much as possible we have two main products one product is called parking crew that's",
    "start": "405710",
    "end": "411800"
  },
  {
    "text": "the red logo on the right which is a domain parking platform like many of you might already have seen some of our",
    "start": "411800",
    "end": "418040"
  },
  {
    "text": "pages hopefully any other on the project I want to talk about more in detail",
    "start": "418040",
    "end": "423260"
  },
  {
    "text": "about today is um tonic tonic is a real-time bidding marketplace for this domain traffic I think many of you are",
    "start": "423260",
    "end": "430970"
  },
  {
    "start": "427000",
    "end": "455000"
  },
  {
    "text": "working in the EdTech business so this should be pretty common to you we have a user that actually on types in the",
    "start": "430970",
    "end": "437210"
  },
  {
    "text": "domain name which is part of the parking company tonic gets a call on a server-to-server basis from the domain",
    "start": "437210",
    "end": "443060"
  },
  {
    "text": "parking company we're trying to figure out which is the highest bidder for exactly that request then we bring back",
    "start": "443060",
    "end": "449330"
  },
  {
    "text": "the bid to the parking company and then the parking company actually sells the traffic to us hopefully so the challenge",
    "start": "449330",
    "end": "456740"
  },
  {
    "start": "455000",
    "end": "511000"
  },
  {
    "text": "is for us when we started with tonic was that we needed to support clients worldwide that's pretty obvious right we",
    "start": "456740",
    "end": "464360"
  },
  {
    "text": "have the need of a latency below 300 milliseconds I see there are some smiling faces in the audience I know 300",
    "start": "464360",
    "end": "471650"
  },
  {
    "text": "milliseconds is a lot in the attic business on but it's still a challenge right and then we have 100% consistency",
    "start": "471650",
    "end": "480200"
  },
  {
    "text": "at the database level so the reason for that is that we're working on a prepaid basis so our users are actually have",
    "start": "480200",
    "end": "487760"
  },
  {
    "text": "some kind of budget or account on our platform and we only can deliver a bit",
    "start": "487760",
    "end": "493490"
  },
  {
    "text": "who actually still has some money in his account so the questions on that arise",
    "start": "493490",
    "end": "499130"
  },
  {
    "text": "where should we go multi region or is there an alternative and just as constant he mentioned when we talk with",
    "start": "499130",
    "end": "506090"
  },
  {
    "text": "Constantine about that he was like yeah maybe you want to do CloudFront so as we",
    "start": "506090",
    "end": "513229"
  },
  {
    "start": "511000",
    "end": "564000"
  },
  {
    "text": "talked this was the idea we had in mind this was kind of the architecture we had route 53 on top of everything or in",
    "start": "513229",
    "end": "520130"
  },
  {
    "text": "front of everything and then we had the most important regions for us which is us EU and asia-pacific and then as I",
    "start": "520130",
    "end": "527839"
  },
  {
    "text": "said we didn't have the need of 100% database consistency so this is",
    "start": "527839",
    "end": "533870"
  },
  {
    "text": "magichead comes in because there needs to be some syncing between different",
    "start": "533870",
    "end": "539089"
  },
  {
    "text": "regions to get this consistency and all of you who might have already thought",
    "start": "539089",
    "end": "544580"
  },
  {
    "text": "about building something like that or actually have build something like that I'm pretty sure you will say yeah that's",
    "start": "544580",
    "end": "551390"
  },
  {
    "text": "a complex problem because master master things are working but there are complex",
    "start": "551390",
    "end": "556760"
  },
  {
    "text": "to maintain there are complex to work with there is always a buck in it as always so as we talked about with",
    "start": "556760",
    "end": "563960"
  },
  {
    "text": "Constantine he said maybe you want to do something different and then just as President Lee mentioned I said we can't",
    "start": "563960",
    "end": "570620"
  },
  {
    "start": "564000",
    "end": "660000"
  },
  {
    "text": "use CloudFront we don't have anything to catch because it's a real-time bidding system what should we catch there every",
    "start": "570620",
    "end": "576710"
  },
  {
    "text": "answer is different from what we did just a few milliseconds before but the",
    "start": "576710",
    "end": "582650"
  },
  {
    "text": "problem is concept in said was more about that we don't need to catch",
    "start": "582650",
    "end": "587930"
  },
  {
    "text": "anything in CloudFront it's just about optimizing the latency for our customers",
    "start": "587930",
    "end": "593870"
  },
  {
    "text": "so that is the architecture we're running today we have cloud firm on top of everything as constantine already",
    "start": "593870",
    "end": "600740"
  },
  {
    "text": "mentioned there are 107 different edge locations so we're using just all of",
    "start": "600740",
    "end": "606170"
  },
  {
    "text": "them automatically because we just click the button of doing it all over the world and then we're just working out of",
    "start": "606170",
    "end": "612920"
  },
  {
    "text": "the use East one region so we only have to maintain one region we only have to",
    "start": "612920",
    "end": "618170"
  },
  {
    "text": "maintain one database in this region so no master master swing no replication",
    "start": "618170",
    "end": "623209"
  },
  {
    "text": "problems no database consistency problems because we're just using one",
    "start": "623209",
    "end": "628550"
  },
  {
    "text": "database or multiple database but only in one region and so this works pretty well for us we're saving a lot of",
    "start": "628550",
    "end": "636020"
  },
  {
    "text": "milliseconds on every single request and as we all know everything is about speed",
    "start": "636020",
    "end": "641779"
  },
  {
    "text": "so maybe you just want to try out even where the TTL of zero CloudFront might",
    "start": "641779",
    "end": "647209"
  },
  {
    "text": "help you to the best to just get a little bit faster than you are right now",
    "start": "647209",
    "end": "652940"
  },
  {
    "text": "but clock one can do a lot of more things besides optimizing the last mile and our Constantin we'll talk a little",
    "start": "652940",
    "end": "659270"
  },
  {
    "text": "bit about lambda edge thank you so cloud phone can help you with caching and even",
    "start": "659270",
    "end": "665510"
  },
  {
    "start": "660000",
    "end": "684000"
  },
  {
    "text": "if you think you can't cash second use case would be Excel Network acceleration and here's the third thing",
    "start": "665510",
    "end": "670580"
  },
  {
    "text": "you can do with cloud fund because since last year we introduced lamda at the",
    "start": "670580",
    "end": "675800"
  },
  {
    "text": "edge which means you can actually modify content at the edge layer as it is",
    "start": "675800",
    "end": "681980"
  },
  {
    "text": "flowing through the cloud phone network and there are actually four bits where you can do that the first is when the",
    "start": "681980",
    "end": "688820"
  },
  {
    "start": "684000",
    "end": "732000"
  },
  {
    "text": "end user issues an HTTP request against the cloud front cache you can run your",
    "start": "688820",
    "end": "694340"
  },
  {
    "text": "own lamda code and do something there you can modify the viewer request and there's the request maybe it's not can't",
    "start": "694340",
    "end": "701420"
  },
  {
    "text": "cannot be fulfilled by the cloud from cache you get the second chance to modify the request as it goes from cloud",
    "start": "701420",
    "end": "706850"
  },
  {
    "text": "phone to your origin in your back-end and as you deliver your content you can run your third lambda function to modify",
    "start": "706850",
    "end": "713510"
  },
  {
    "text": "the origin response and then right before your response reaches your user from the cache there's a fourth",
    "start": "713510",
    "end": "719900"
  },
  {
    "text": "opportunity where you can run your lambda code so it means that you now get to execute your code right if in front",
    "start": "719900",
    "end": "726950"
  },
  {
    "text": "of your user at the edge layer of your application worldwide and there are some a couple of interesting use cases where",
    "start": "726950",
    "end": "733310"
  },
  {
    "start": "732000",
    "end": "791000"
  },
  {
    "text": "you can leverage that the first one is you can do content customization at the edge so that means that as your as your",
    "start": "733310",
    "end": "740930"
  },
  {
    "text": "content is being delivered right to a user you can have a last minute or last second or last millisecond change in the",
    "start": "740930",
    "end": "748310"
  },
  {
    "text": "kind of content you deliverable for instance if you want to optimize for mobile devices or if you want to do something else the other thing you can",
    "start": "748310",
    "end": "754700"
  },
  {
    "text": "do is you can do visitor validation you can you can fail a lot faster if your visitor gives you the wrong API call",
    "start": "754700",
    "end": "761330"
  },
  {
    "text": "because it doesn't have to wait until it goes to the backend and then you're back and figures out moment well wait a moment this is not a valid call let's",
    "start": "761330",
    "end": "768080"
  },
  {
    "text": "give them an error message you can do that error checking at the edge and then take off load off of your back-end here",
    "start": "768080",
    "end": "774950"
  },
  {
    "text": "and the third thing you can do is you can use it for a be testing you can use the cloud fund edge layer with redundant",
    "start": "774950",
    "end": "780890"
  },
  {
    "text": "functions to differentiate between a and B groups in your a B testing and do this really really fast in a way so that a B",
    "start": "780890",
    "end": "788330"
  },
  {
    "text": "testing doesn't affect the speed of your application so let's do a quick recap here about edge caching you can use",
    "start": "788330",
    "end": "795140"
  },
  {
    "start": "791000",
    "end": "844000"
  },
  {
    "text": "cloud front to reduce your last mile latency you can leverage caching or doesn't matter you will always get a",
    "start": "795140",
    "end": "801770"
  },
  {
    "text": "benefit out of CloudFront if you put it in front of your application there I have a hard time figuring out a scenario",
    "start": "801770",
    "end": "807650"
  },
  {
    "text": "where Clutton would not add any value so try it out and see if it helps you in",
    "start": "807650",
    "end": "812960"
  },
  {
    "text": "your latency or in your caching needs here the other thing is you can save cost with cloud phone - because",
    "start": "812960",
    "end": "818410"
  },
  {
    "text": "gigabytes delivered over cloud front are cheaper than gigabytes delivered without",
    "start": "818410",
    "end": "823550"
  },
  {
    "text": "cloud front through the normal IP address or through normal region networking so even even if it doesn't",
    "start": "823550",
    "end": "830900"
  },
  {
    "text": "help you a lot with latency which I would doubt it really helps with your bill - and the other thing is you can",
    "start": "830900",
    "end": "836990"
  },
  {
    "text": "now use Nunda at the edge to bring your code your logic closer to your applications or sorry closer to your",
    "start": "836990",
    "end": "842750"
  },
  {
    "text": "users so let's move on to the next tier and that is the web tier this is kind of",
    "start": "842750",
    "end": "848300"
  },
  {
    "start": "844000",
    "end": "854000"
  },
  {
    "text": "like the the edge of your actual application in the cloud this is the bit where you deliver your content to your",
    "start": "848300",
    "end": "854780"
  },
  {
    "text": "user and in web tier caching what we do here is we introduce an extra layer",
    "start": "854780",
    "end": "860270"
  },
  {
    "text": "between the web tier and your application tier here and here's there's",
    "start": "860270",
    "end": "866930"
  },
  {
    "text": "a lot of opportunities here to catch something even before it reaches the cloud from cares now some people would",
    "start": "866930",
    "end": "873080"
  },
  {
    "text": "say wait a minute why do I need another cache here I'm already caching at the cloud from",
    "start": "873080",
    "end": "878230"
  },
  {
    "text": "layer right well if you're caching on a content delivery network like cloud front that's fine but a lot of those",
    "start": "878230",
    "end": "885320"
  },
  {
    "text": "requests are going to be forwarded back to your back-end because they are not captured because their original requests",
    "start": "885320",
    "end": "890420"
  },
  {
    "text": "or something like that and this is where you can have a bigger impact by deciding",
    "start": "890420",
    "end": "896270"
  },
  {
    "start": "892000",
    "end": "938000"
  },
  {
    "text": "what to cash upfront as part of your web cache in tier there are some popular solutions based on varnish nginx or even",
    "start": "896270",
    "end": "904160"
  },
  {
    "text": "an Apache module squid what habit all of them work similarly and the key thing",
    "start": "904160",
    "end": "909530"
  },
  {
    "text": "here is to try to cache your HTTP response in memory as it is already done",
    "start": "909530",
    "end": "915080"
  },
  {
    "text": "to avoid crafting it from scratch so instead of really going through all the",
    "start": "915080",
    "end": "920210"
  },
  {
    "text": "motions to deliver that HTTP response you can cache it at the web layer and that means that you should take a look",
    "start": "920210",
    "end": "926720"
  },
  {
    "text": "at your instances and favor those that have more like the r4 family if you don't want to",
    "start": "926720",
    "end": "934670"
  },
  {
    "text": "go through the trouble of modifying your existing application you can use a neat trick here because you can use the API",
    "start": "934670",
    "end": "940399"
  },
  {
    "start": "938000",
    "end": "970000"
  },
  {
    "text": "gateway which gives you an an in-memory cache right at the layer so on top of",
    "start": "940399",
    "end": "947240"
  },
  {
    "text": "the normal caching layer that cloud phone would give you you can add an in-memory cache right as part of the API",
    "start": "947240",
    "end": "952550"
  },
  {
    "text": "gateway and and and you can forget about everything else on this slide and just think of API gateway as an opportunity",
    "start": "952550",
    "end": "959690"
  },
  {
    "text": "for you to add a simple in-memory cache on top of your HTTP stack so one of the",
    "start": "959690",
    "end": "966470"
  },
  {
    "text": "things customer says ok I get it let's do caching what are the best practices here and the thing is you can",
    "start": "966470",
    "end": "974329"
  },
  {
    "start": "970000",
    "end": "1062000"
  },
  {
    "text": "cache all of the static content already you can put all of those images HTTP stuff in memory versus on disk and get",
    "start": "974329",
    "end": "981649"
  },
  {
    "text": "some extra latency that you can save there or or save some extra latency you",
    "start": "981649",
    "end": "986660"
  },
  {
    "text": "can even catch logged out users if you know that users logged out your your applications gonna follow a different",
    "start": "986660",
    "end": "992600"
  },
  {
    "text": "path and having the information there already that he is logged out that you need to ask him again for authentication",
    "start": "992600",
    "end": "998899"
  },
  {
    "text": "or something like that is a valuable information that you can cache and that helps you save on your applications the",
    "start": "998899",
    "end": "1005920"
  },
  {
    "text": "other thing is you should look into your log files and try to identify those HTTP requests that are really frequent and",
    "start": "1005920",
    "end": "1012010"
  },
  {
    "text": "then you want to cash upfront so this is kind of like active caching if you know that these users are gonna deliver a lot",
    "start": "1012010",
    "end": "1018100"
  },
  {
    "text": "of traffic why not cash them upfront so that you can deliver that response a lot faster and when caching when you think",
    "start": "1018100",
    "end": "1025630"
  },
  {
    "text": "about your caching strategy and we're gonna we're gonna dive deeper on this in in a couple of slides",
    "start": "1025630",
    "end": "1030910"
  },
  {
    "text": "choose your TTL s because whenever you choose to catch something you need to choose when to invalidate that",
    "start": "1030910",
    "end": "1036699"
  },
  {
    "text": "information and if you choose a time to live that is too long then you may see",
    "start": "1036699",
    "end": "1042160"
  },
  {
    "text": "some crazy stuff after every deployment because then you're gonna work with old data and it will confuse you so make",
    "start": "1042160",
    "end": "1048100"
  },
  {
    "text": "sure you have some sort of invalidation strategy here but even if you decide to use a really really small TTL just a",
    "start": "1048100",
    "end": "1055660"
  },
  {
    "text": "couple of seconds you will see in your log files that it really helps save a lot of time in aggregate",
    "start": "1055660",
    "end": "1063450"
  },
  {
    "start": "1062000",
    "end": "1094000"
  },
  {
    "text": "let's recap on the web caching itself and we're gonna repeat and go deeper into some of these issues in a couple of",
    "start": "1063580",
    "end": "1070120"
  },
  {
    "text": "of slides here but on the web caching it it pays off to have an extra cash between your content delivery network",
    "start": "1070120",
    "end": "1076120"
  },
  {
    "text": "and your application Amazon API gateway can give you an easy way to add an extra",
    "start": "1076120",
    "end": "1082240"
  },
  {
    "text": "cash layer on top of your application without having to run all this extra servers and make sure that you",
    "start": "1082240",
    "end": "1088120"
  },
  {
    "text": "understand your caching strategy here what do you cache and how long is your",
    "start": "1088120",
    "end": "1093160"
  },
  {
    "text": "time to live here okay let's move on to the core of your application or the",
    "start": "1093160",
    "end": "1098680"
  },
  {
    "start": "1094000",
    "end": "1099000"
  },
  {
    "text": "first half of your core which is the app tier so your application is sitting on a bunch of easy to servers and we're not",
    "start": "1098680",
    "end": "1105940"
  },
  {
    "text": "talking about how can you add value by putting a cache on top of that and and help you save time here and if there's",
    "start": "1105940",
    "end": "1114100"
  },
  {
    "text": "one thing that you take away from this talk here is you can really cache everything you can cache your sessions",
    "start": "1114100",
    "end": "1122080"
  },
  {
    "start": "1116000",
    "end": "1154000"
  },
  {
    "text": "you can cache your results we can cache aggregations that you put together out of different database connections and",
    "start": "1122080",
    "end": "1128320"
  },
  {
    "text": "cache them you can even catch your templates even though they're sitting there already pre computed on disk it",
    "start": "1128320",
    "end": "1134740"
  },
  {
    "text": "there's a lot of value in having them in memory versus on disk so you can even catch your static content within your",
    "start": "1134740",
    "end": "1140230"
  },
  {
    "text": "application even if you're if they are cached somewhere else you can catch your environment you can",
    "start": "1140230",
    "end": "1145780"
  },
  {
    "text": "catch your configurations like there is nothing you cannot cache and you'll see in a minute that it makes sense to cache everything",
    "start": "1145780",
    "end": "1151990"
  },
  {
    "text": "in memory as fast as possible because everything counts right so who knows",
    "start": "1151990",
    "end": "1157480"
  },
  {
    "start": "1154000",
    "end": "1249000"
  },
  {
    "text": "Depeche Mode I'm an old guy I know and I'm from Europe so so here's a Depeche",
    "start": "1157480",
    "end": "1162610"
  },
  {
    "text": "Mode song called everything counts in large amounts and nothing is truer than in caching and edtech because many",
    "start": "1162610",
    "end": "1170470"
  },
  {
    "text": "antique applications see tenths of thousands or even hundreds of thousands of requests per second and that means",
    "start": "1170470",
    "end": "1177490"
  },
  {
    "text": "even if you can shave of a microsecond or a millisecond in the latency of your",
    "start": "1177490",
    "end": "1182530"
  },
  {
    "text": "application they will add up big time so let's take a simple calculation let's",
    "start": "1182530",
    "end": "1188080"
  },
  {
    "text": "assume that you can save one millisecond out of every transaction through some form of caching or optimization and if",
    "start": "1188080",
    "end": "1195580"
  },
  {
    "text": "your application delivering 10,000 requests per second let's add up the numbers and you don't",
    "start": "1195580",
    "end": "1201730"
  },
  {
    "text": "need to pull out your calculators here on mobile phones I did the numbers for you it all adds up to more than 7,000",
    "start": "1201730",
    "end": "1208210"
  },
  {
    "text": "instance hours per month that are saved that you don't have to deliver your",
    "start": "1208210",
    "end": "1213820"
  },
  {
    "text": "application phone this is not just saving money because you don't have to run all of these ec2 instances this also",
    "start": "1213820",
    "end": "1220930"
  },
  {
    "text": "saves a lot and user experience it makes your user experience in aggregate that much better so that you will see a lot",
    "start": "1220930",
    "end": "1226780"
  },
  {
    "text": "more more people so it really pays off to be super super nerdy here and try to",
    "start": "1226780",
    "end": "1234430"
  },
  {
    "text": "shave off as many milliseconds out of your application because every millisecond is going to multiply it",
    "start": "1234430",
    "end": "1239460"
  },
  {
    "text": "10,000 fold in your typical application so the the next logical question is how",
    "start": "1239460",
    "end": "1244900"
  },
  {
    "text": "do I find those milliseconds that I want to optimize for and that is where logging and monitoring comes into play",
    "start": "1244900",
    "end": "1251710"
  },
  {
    "start": "1249000",
    "end": "1520000"
  },
  {
    "text": "so let's hear from Marcus how he is he was really good how he is dominating",
    "start": "1251710",
    "end": "1257320"
  },
  {
    "text": "monitoring at the team Internet okay now you set their expectations right so as Constantine said it's it's",
    "start": "1257320",
    "end": "1265660"
  },
  {
    "text": "important to know what you can cache and how you can cache and in the end it's",
    "start": "1265660",
    "end": "1270970"
  },
  {
    "text": "always about trying things out um the problem is if you try things out and you don't monitor those things you don't",
    "start": "1270970",
    "end": "1277480"
  },
  {
    "text": "learn anything right so what you're seeing here is a part of one of our dashboards we are having this is one of",
    "start": "1277480",
    "end": "1284500"
  },
  {
    "text": "our data about dashboards we're pushing a lot of data to them and then trying to figure out how we can optimize our",
    "start": "1284500",
    "end": "1291010"
  },
  {
    "text": "caching I just want to give you an overview or an idea about what we are what kind of metrics we are caching so",
    "start": "1291010",
    "end": "1298330"
  },
  {
    "text": "that you might be able to adapt that to your application or mind fight some funds find some ideas applying that you",
    "start": "1298330",
    "end": "1306280"
  },
  {
    "text": "might want to try out inside of your application what you can see here is each row is an own cache inside of his",
    "start": "1306280",
    "end": "1314500"
  },
  {
    "text": "own business domain so for us it's for example we're cashing domains we are caching advertisers we are caching",
    "start": "1314500",
    "end": "1321460"
  },
  {
    "text": "budgets we are cashing with actually caching everything and for each of those caches we have three main metrics and",
    "start": "1321460",
    "end": "1329410"
  },
  {
    "text": "that's what you see the columns on the left side you're seeing the so-called unique keys seen",
    "start": "1329410",
    "end": "1335500"
  },
  {
    "text": "that means how big is that dimension so how many different values have we seen",
    "start": "1335500",
    "end": "1342130"
  },
  {
    "text": "in a time frame like a second or five seconds or 10 seconds this is important",
    "start": "1342130",
    "end": "1348160"
  },
  {
    "text": "for the caching because the bigger that I mentioned so the more well use were actually seeing in that time frame the",
    "start": "1348160",
    "end": "1354760"
  },
  {
    "text": "bigger the memory consumed of this cache will be because obviously if you're",
    "start": "1354760",
    "end": "1361120"
  },
  {
    "text": "caching everything that comes in for different values that will add up inside of the memory so that's why this number",
    "start": "1361120",
    "end": "1367960"
  },
  {
    "text": "is very important for us then in the middle column you're seeing the percentage of the hit ratio the dark",
    "start": "1367960",
    "end": "1375850"
  },
  {
    "text": "blue part of the bars are the hits and the light blue bar light blue part of the bars are the misses you can see in",
    "start": "1375850",
    "end": "1383320"
  },
  {
    "text": "the first row that this cache is something working like 50 to 60 percent of a hit ratio which is okay and then",
    "start": "1383320",
    "end": "1390940"
  },
  {
    "text": "you see in the second of the third row those are pretty good I think the people in the front row will see that there is",
    "start": "1390940",
    "end": "1396910"
  },
  {
    "text": "a small line of light blue at the last row so those caches are working at 98 to",
    "start": "1396910",
    "end": "1403240"
  },
  {
    "text": "99 percent of a cache hit ratio which is awesome so this is exactly what you want to have right and then we have another",
    "start": "1403240",
    "end": "1410230"
  },
  {
    "text": "metric which is also telling us something about hits and misses but the",
    "start": "1410230",
    "end": "1415330"
  },
  {
    "text": "absolute numbers so every request we're doing against our cache we're pulling or",
    "start": "1415330",
    "end": "1422470"
  },
  {
    "text": "are we actually pushing a metric if was this one requests a hit or was it a miss",
    "start": "1422470",
    "end": "1427990"
  },
  {
    "text": "this gives us an idea compared to the percentage that are we increasing or",
    "start": "1427990",
    "end": "1433960"
  },
  {
    "text": "decreasing the overall volume of requests we're doing against our caches this is obviously important if we",
    "start": "1433960",
    "end": "1441210"
  },
  {
    "text": "correlate that to the overall request we're seeing because sometimes we see a peak in the requests but we don't see a",
    "start": "1441210",
    "end": "1448720"
  },
  {
    "text": "peak inside of the cache requests that's because sometimes you don't need all the",
    "start": "1448720",
    "end": "1454960"
  },
  {
    "text": "caches you're having for that requests because you're answering the requests or you're blocking requests before they",
    "start": "1454960",
    "end": "1460840"
  },
  {
    "text": "even hit the caches and this is very important too which are the caches I still need to",
    "start": "1460840",
    "end": "1467100"
  },
  {
    "text": "answer or asking I still need to ask even if I'm blocking requests or not",
    "start": "1467100",
    "end": "1473370"
  },
  {
    "text": "because that obviously gives you an idea about what caches need to be very",
    "start": "1473370",
    "end": "1478770"
  },
  {
    "text": "flexible and scaling in and scaling out what caches can be more stable and be",
    "start": "1478770",
    "end": "1484020"
  },
  {
    "text": "more settled and that's this gives you an idea about how you want to build your",
    "start": "1484020",
    "end": "1489270"
  },
  {
    "text": "caches so as I said it's everything about trying things out so sometimes you",
    "start": "1489270",
    "end": "1494910"
  },
  {
    "text": "build something in your application your monitor things for depending on how much you press you're seeing minutes hours",
    "start": "1494910",
    "end": "1501630"
  },
  {
    "text": "days or even weeks to find out based on that metrics to see is that something I",
    "start": "1501630",
    "end": "1507360"
  },
  {
    "text": "want to work on or even more want to work on because it seems to work but I need to tweak some things or is that",
    "start": "1507360",
    "end": "1514230"
  },
  {
    "text": "something that was just a stupid idea so if you have this metrics now you",
    "start": "1514230",
    "end": "1519750"
  },
  {
    "text": "actually can do something which is influenced I would say by Vincenzo",
    "start": "1519750",
    "end": "1525600"
  },
  {
    "start": "1520000",
    "end": "1628000"
  },
  {
    "text": "Pareto how many of you know about the Pareto principle that's good for the",
    "start": "1525600",
    "end": "1534570"
  },
  {
    "text": "others but the Pareto principle is about that there is always a small percentage",
    "start": "1534570",
    "end": "1541470"
  },
  {
    "text": "or most likely a small percentage of sources or kind of impact sources they",
    "start": "1541470",
    "end": "1548190"
  },
  {
    "text": "that do a huge impact on your overall system so that's why it's called most of",
    "start": "1548190",
    "end": "1554040"
  },
  {
    "text": "the time that 80/20 principle because you will find heavy hitters those might",
    "start": "1554040",
    "end": "1560520"
  },
  {
    "text": "be some publishers that are sending requests to you that also might be some advertisers that are buying a lot from",
    "start": "1560520",
    "end": "1567660"
  },
  {
    "text": "you those might be some things like I'm seeing much traffic from the US but not",
    "start": "1567660",
    "end": "1573870"
  },
  {
    "text": "so much for example from South Africa or something like that you need to find",
    "start": "1573870",
    "end": "1579150"
  },
  {
    "text": "those heavy hitters those very few sources that make a huge impact on your",
    "start": "1579150",
    "end": "1586590"
  },
  {
    "text": "system because if you found them you can do special things for them and I really",
    "start": "1586590",
    "end": "1592560"
  },
  {
    "text": "mean things like I want to do a total different caching for you I want to keep those things in",
    "start": "1592560",
    "end": "1598710"
  },
  {
    "text": "memory on the application instance and not doing something like an external cache or something so if you're able to",
    "start": "1598710",
    "end": "1605519"
  },
  {
    "text": "find those heavy hitters you can adapt to that inside of your application inside of your caching and you will make",
    "start": "1605519",
    "end": "1612480"
  },
  {
    "text": "a huge impact out of it because even if you do that for a very small percentage it will have a huge impact on your",
    "start": "1612480",
    "end": "1619169"
  },
  {
    "text": "overall system and talking so much about memory and caching in memory constantin",
    "start": "1619169",
    "end": "1624240"
  },
  {
    "text": "now will talk a lot more about memory and what we can do with memory Thank You Markus so we're in Las Vegas right so if",
    "start": "1624240",
    "end": "1632429"
  },
  {
    "start": "1628000",
    "end": "1724000"
  },
  {
    "text": "you look if you walked on the casino you will see those heavy hitters because these are the people who throw a lot of",
    "start": "1632429",
    "end": "1637830"
  },
  {
    "text": "money around and they get special tickets to shows they get special rooms they get all kinds of special treatment",
    "start": "1637830",
    "end": "1643259"
  },
  {
    "text": "so try to find your special guests and your special treatment to them is give",
    "start": "1643259",
    "end": "1648929"
  },
  {
    "text": "them RAM as much as possible and if you look at your existing machines and",
    "start": "1648929",
    "end": "1654210"
  },
  {
    "text": "thanks to Marcus you know you should be monitoring you should be monitoring Graham users how much RAM is actually",
    "start": "1654210",
    "end": "1659669"
  },
  {
    "text": "used in your applications and if you're not using close to 100% of your RAM you have a caching opportunity there already",
    "start": "1659669",
    "end": "1665610"
  },
  {
    "text": "so use the RAM that you already have even if it means duplicating data if you",
    "start": "1665610",
    "end": "1670980"
  },
  {
    "text": "if you find those heavy hitters and you have their records always present on RAM in every single instance doesn't matter",
    "start": "1670980",
    "end": "1677460"
  },
  {
    "text": "where they show up you will be able to service them immediately don't need don't need to ask another machine",
    "start": "1677460",
    "end": "1682679"
  },
  {
    "text": "because duplicate data is good if it helps you achieve speed and that means that you can also pre-load popular data",
    "start": "1682679",
    "end": "1690210"
  },
  {
    "text": "into your cache not just cache the stuff that you already did you can use the time that you're idling for",
    "start": "1690210",
    "end": "1696299"
  },
  {
    "text": "pre-computing data that can help your future customers and have them in RAM always ready to use some operating",
    "start": "1696299",
    "end": "1704669"
  },
  {
    "text": "systems come with a file system cache I'm just assuming that that yours does but if you're programming in a specific",
    "start": "1704669",
    "end": "1710490"
  },
  {
    "text": "language like PHP or Java or.net or whatever there is always a caching",
    "start": "1710490",
    "end": "1715919"
  },
  {
    "text": "framework you can use to leverage that ram inside your machines so what do you use what do you do if you don't have",
    "start": "1715919",
    "end": "1722340"
  },
  {
    "text": "enough RAM on your application servers you can add more RAM with Amazon ElastiCache which me which is basically",
    "start": "1722340",
    "end": "1728700"
  },
  {
    "text": "Ram as this it helps you manage a fleet of machines that are not nothing but RAM as",
    "start": "1728700",
    "end": "1734560"
  },
  {
    "text": "a service and be part of your application as an extra RAM based caching layer it comes with two engines",
    "start": "1734560",
    "end": "1742750"
  },
  {
    "text": "a Redis base engine and the memcache D based engine and both of these engines are great they're just different use",
    "start": "1742750",
    "end": "1749260"
  },
  {
    "text": "cases that you would might want to you look at to choose the right engine for you so memcache T is the easy option it's",
    "start": "1749260",
    "end": "1756460"
  },
  {
    "text": "fast it's open source but it doesn't offer any kind of persistence but it's a nice workhorse for caching everything on",
    "start": "1756460",
    "end": "1764020"
  },
  {
    "text": "some caching server like Amazon ElastiCache if you want to be more fancy",
    "start": "1764020",
    "end": "1770380"
  },
  {
    "text": "around your caching we would suggest taking a look at Redis already's comes with a lot more features it also offers",
    "start": "1770380",
    "end": "1778000"
  },
  {
    "start": "1772000",
    "end": "1805000"
  },
  {
    "text": "a persistency scheme so if the caching nodes go down there are some mechanisms you can use to have your cached content",
    "start": "1778000",
    "end": "1784870"
  },
  {
    "text": "always elate available highly available and it also comes with a scripting language that you can use to offload",
    "start": "1784870",
    "end": "1790300"
  },
  {
    "text": "some of the computations right at the cache level which can help you increase even more your performance and and be",
    "start": "1790300",
    "end": "1797080"
  },
  {
    "text": "more sophisticated here so it it's a good idea to check it out and it's also even faster than memcache T in many many",
    "start": "1797080",
    "end": "1803530"
  },
  {
    "text": "cases so let's recap the app side before we move on to the core of the",
    "start": "1803530",
    "end": "1809770"
  },
  {
    "start": "1805000",
    "end": "1857000"
  },
  {
    "text": "application so the the thing here is really monitor everything only if you",
    "start": "1809770",
    "end": "1815410"
  },
  {
    "text": "can see your request you will be able to make out those opportunities where you can increase speed in your application",
    "start": "1815410",
    "end": "1823180"
  },
  {
    "text": "by caching the right stuff try to find those heavy hitters the big people the big customers that are dominating your",
    "start": "1823180",
    "end": "1831190"
  },
  {
    "text": "application usage and do whatever it takes to make them as fast as possible because they that will benefit all of",
    "start": "1831190",
    "end": "1837550"
  },
  {
    "text": "the other users of your application as well cache everything there's nothing",
    "start": "1837550",
    "end": "1842560"
  },
  {
    "text": "you cannot cache and if you care something just cash in ram there's no value in caching something on disk",
    "start": "1842560",
    "end": "1847930"
  },
  {
    "text": "Ram is always gonna be faster than disk so use that Ram and consider using something like elastic cache to add more",
    "start": "1847930",
    "end": "1854740"
  },
  {
    "text": "RAM on top of your applications here so let's move on to the core of everything",
    "start": "1854740",
    "end": "1860260"
  },
  {
    "start": "1857000",
    "end": "1864000"
  },
  {
    "text": "which is the database this is where truth of your application resides and similarly to how you would place a cache",
    "start": "1860260",
    "end": "1867840"
  },
  {
    "text": "on top of your application you can place a cache in between your database and your application and it's a little bit",
    "start": "1867840",
    "end": "1873659"
  },
  {
    "text": "unintuitive because we have an extra piece of architecture between the database and the application and",
    "start": "1873659",
    "end": "1878820"
  },
  {
    "text": "ironically it is gonna help you increase the performance and decrease the latency even though it's an extra piece in the",
    "start": "1878820",
    "end": "1886409"
  },
  {
    "text": "puzzle here and it has an extra link to our chain but we will see in a minute how fast it can be and this is where",
    "start": "1886409",
    "end": "1893159"
  },
  {
    "text": "where most of Marcus's work of the last couple of years is coming from because he has really optimized caching all the",
    "start": "1893159",
    "end": "1900000"
  },
  {
    "start": "1897000",
    "end": "1950000"
  },
  {
    "text": "way through to the database here thanks again Konstantin yeah I think when you",
    "start": "1900000",
    "end": "1906570"
  },
  {
    "text": "actually signed up for that talk you might have think about database caching",
    "start": "1906570",
    "end": "1912000"
  },
  {
    "text": "right because this is where everybody focuses on and as konstantin said i",
    "start": "1912000",
    "end": "1917220"
  },
  {
    "text": "think it's also the most important part that's why I love this part the most and talk as you can see in the Clyde cloud",
    "start": "1917220",
    "end": "1924929"
  },
  {
    "text": "in this slide sorry caching the traditional way we have an application that is directly talking to",
    "start": "1924929",
    "end": "1930450"
  },
  {
    "text": "databases I just took DynamoDB in Amazon RDS here as an example and then we put",
    "start": "1930450",
    "end": "1935640"
  },
  {
    "text": "something in between like elastic hash also just mentioned by constantin if we",
    "start": "1935640",
    "end": "1941730"
  },
  {
    "text": "can't do that on our application service in RAM we should buy our external RAM and that's ElastiCache but then we",
    "start": "1941730",
    "end": "1950669"
  },
  {
    "start": "1950000",
    "end": "2060000"
  },
  {
    "text": "always come to the point where we need to think about cache invalidation there is this very famous quote from Phil",
    "start": "1950669",
    "end": "1956580"
  },
  {
    "text": "Carleton there are only two hard things in computer science cache invalidation and naming things and we all know how",
    "start": "1956580",
    "end": "1964620"
  },
  {
    "text": "hard it is if the variable should be named foo or bar right so the other thing is cache emulation for me there",
    "start": "1964620",
    "end": "1972210"
  },
  {
    "text": "are two ways how we can cache one is the typical cache invalidation with a time",
    "start": "1972210",
    "end": "1978090"
  },
  {
    "text": "to live so you have on TTL on the key that says please just live for 60",
    "start": "1978090",
    "end": "1984419"
  },
  {
    "text": "seconds or leave until this time two times dampers and then the caching",
    "start": "1984419",
    "end": "1989549"
  },
  {
    "text": "engine like gratis or memcache D or whatever caching we're using is invalidating that",
    "start": "1989549",
    "end": "1994919"
  },
  {
    "text": "and from there on it answers with and I don't have anything in here which is",
    "start": "1994919",
    "end": "2000230"
  },
  {
    "text": "cached the problem that arises is if we take the TTL very very low we obviously",
    "start": "2000230",
    "end": "2007789"
  },
  {
    "text": "are not so efficient on the cache head ratio because the cache invalidation",
    "start": "2007789",
    "end": "2013039"
  },
  {
    "text": "will lead to more and more invalidations if the TTL is very low and then we need",
    "start": "2013039",
    "end": "2018379"
  },
  {
    "text": "to ask our databases again which is exactly what we actually don't want to but if we do a very long time to live we",
    "start": "2018379",
    "end": "2026749"
  },
  {
    "text": "have the problem that if something changes inside of our back-end database we get not the right answer because the",
    "start": "2026749",
    "end": "2035029"
  },
  {
    "text": "cache has an old answer still safe and that will be safe for a long time because our TTL is very long so the",
    "start": "2035029",
    "end": "2042200"
  },
  {
    "text": "other way of how we can cache is keep the cache and sink all the time because",
    "start": "2042200",
    "end": "2048740"
  },
  {
    "text": "if we always know that the cache answers always with the same answer then the",
    "start": "2048740",
    "end": "2054770"
  },
  {
    "text": "database would do then we don't need to take care about the TTL anymore right",
    "start": "2054770",
    "end": "2059919"
  },
  {
    "text": "how we can do that synchronous writes our application can",
    "start": "2059919",
    "end": "2066049"
  },
  {
    "start": "2060000",
    "end": "2101000"
  },
  {
    "text": "actually write for every update or write to the database not only to the back-end",
    "start": "2066049",
    "end": "2071270"
  },
  {
    "text": "database in this case just as an example DynamoDB but also to the cache so every",
    "start": "2071270",
    "end": "2077358"
  },
  {
    "text": "time we write against DynamoDB we also ride against Redis or memcache T for example this works but it needs a huge",
    "start": "2077359",
    "end": "2086720"
  },
  {
    "text": "change inside of our application the benefit we get out of this is that some",
    "start": "2086720",
    "end": "2092388"
  },
  {
    "text": "databases for example dynamodb and Redis give us a so called off the write return",
    "start": "2092389",
    "end": "2097490"
  },
  {
    "text": "value so I just want to show you a little bit of code the most important",
    "start": "2097490",
    "end": "2102680"
  },
  {
    "start": "2101000",
    "end": "2126000"
  },
  {
    "text": "part here is the orange one that's a call against dynamodb you can",
    "start": "2102680",
    "end": "2107780"
  },
  {
    "text": "see for those who don't know that Java scripts or no GS and the return values updated new tells DynamoDB that after",
    "start": "2107780",
    "end": "2115849"
  },
  {
    "text": "dynamodb did the write it should give us back the value which is now inside of",
    "start": "2115849",
    "end": "2121849"
  },
  {
    "text": "dynamodb for exactly that object or data item we now can do exactly the same with",
    "start": "2121849",
    "end": "2127730"
  },
  {
    "start": "2126000",
    "end": "2204000"
  },
  {
    "text": "Redis that's the black part red is that's exactly the same we do an increment by float on",
    "start": "2127730",
    "end": "2132890"
  },
  {
    "text": "Redis we update a value and Redis gives us back from the value which is inside",
    "start": "2132890",
    "end": "2138770"
  },
  {
    "text": "of Redis now after we wrote that the orange part um now most of you will see",
    "start": "2138770",
    "end": "2146150"
  },
  {
    "text": "that's no js' we do both calls in parallel so we do the dynamodb call and we do the Redis call in parallel and",
    "start": "2146150",
    "end": "2152690"
  },
  {
    "text": "then the if Clause says hey now compare those two well use the reason why we're",
    "start": "2152690",
    "end": "2158780"
  },
  {
    "text": "doing that and we're and that's actually really apart out of our application we now can monitor if our cash is running",
    "start": "2158780",
    "end": "2165680"
  },
  {
    "text": "out of sync for whatever reason we can either do something against it like invalidating the cash right away because",
    "start": "2165680",
    "end": "2172760"
  },
  {
    "text": "obviously now our cash delivers wrong answers which is bad we can invalidate",
    "start": "2172760",
    "end": "2177980"
  },
  {
    "text": "it so on the next call the cash will be updated automatically or we can just",
    "start": "2177980",
    "end": "2183290"
  },
  {
    "text": "alert on that that somebody looks after it or we can just do nothing because",
    "start": "2183290",
    "end": "2188720"
  },
  {
    "text": "it's totally fine or whatever so this is not about what we can do it's more about how we can recognize that our cash is",
    "start": "2188720",
    "end": "2195230"
  },
  {
    "text": "running out of sync but most of you now will say it's nice but I don't want to",
    "start": "2195230",
    "end": "2201980"
  },
  {
    "text": "change my application Deathmatch lucky us we are running in AWS and AWS has",
    "start": "2201980",
    "end": "2207109"
  },
  {
    "start": "2204000",
    "end": "2291000"
  },
  {
    "text": "always a workaround where we don't need to do those heavy lifting things we can",
    "start": "2207109",
    "end": "2213020"
  },
  {
    "text": "use AWS services for example if you're working with DynamoDB or amazon aurora",
    "start": "2213020",
    "end": "2218349"
  },
  {
    "text": "there is a dynamodb stream or a so called stored procedure which can trigger a lambda function so why not let",
    "start": "2218349",
    "end": "2227599"
  },
  {
    "text": "the lambda function do the update inside of my cache so I don't need to do that",
    "start": "2227599",
    "end": "2232849"
  },
  {
    "text": "in my own application because now the lambda function makes sure that the",
    "start": "2232849",
    "end": "2238430"
  },
  {
    "text": "recently updated item or R or a row inside of my database gets also updated",
    "start": "2238430",
    "end": "2245089"
  },
  {
    "text": "inside of my Redis or inside of my cache this is uncoupled this has nothing to do",
    "start": "2245089",
    "end": "2251030"
  },
  {
    "text": "MS my application my application still can write and update always against the backend database but it can read all the",
    "start": "2251030",
    "end": "2258200"
  },
  {
    "text": "time from the cache because it can be sure or that value inside of the cache is updated the downside of this approach is",
    "start": "2258200",
    "end": "2265730"
  },
  {
    "text": "there is a small delay for cash updates that's pretty obvious because lambda the trigger of lambda and lambda itself",
    "start": "2265730",
    "end": "2272060"
  },
  {
    "text": "needs some time but this will build below that's what we are seeing below a second so if you're right now working",
    "start": "2272060",
    "end": "2278780"
  },
  {
    "text": "with a TTL for example of ten seconds this is still way better because this",
    "start": "2278780",
    "end": "2284000"
  },
  {
    "text": "works within a second and not within the ten seconds you might deliver a wrong answer based on your TTL but we don't",
    "start": "2284000",
    "end": "2293930"
  },
  {
    "start": "2291000",
    "end": "2394000"
  },
  {
    "text": "want to kill we don't want to care at all about caching and this is where a",
    "start": "2293930",
    "end": "2300380"
  },
  {
    "text": "new service from Amazon comes in I think it was launched six months ago or something like that which is called",
    "start": "2300380",
    "end": "2306410"
  },
  {
    "text": "Amazon DynamoDB accelerator short text and the idea behind is it that we don't",
    "start": "2306410",
    "end": "2313460"
  },
  {
    "text": "we as a customer don't need to take care about the caching at all we just talked",
    "start": "2313460",
    "end": "2318950"
  },
  {
    "text": "to Dax all the time the benefit for us as the customer is that there are SDKs",
    "start": "2318950",
    "end": "2324770"
  },
  {
    "text": "out there for Java and JavaScript right now that are DynamoDB api compatible",
    "start": "2324770",
    "end": "2330350"
  },
  {
    "text": "that means we don't need to change our application we just need to switch over",
    "start": "2330350",
    "end": "2335570"
  },
  {
    "text": "as you can see in the light blue code here what we had was a dynamo DB client and now we're just using the Amazon Dax",
    "start": "2335570",
    "end": "2342770"
  },
  {
    "text": "client from there on we can do our get item put item whatever we did against dynamo DB we do that now again stacks",
    "start": "2342770",
    "end": "2350120"
  },
  {
    "text": "and Dax is taking care of caching the things saving the things taking care",
    "start": "2350120",
    "end": "2356060"
  },
  {
    "text": "about TTL all this kind of stuff so it's actually a write through cache so we're",
    "start": "2356060",
    "end": "2361430"
  },
  {
    "text": "just talking against the cache all the time and don't care any more about what the back-end database dynamodb in this",
    "start": "2361430",
    "end": "2367730"
  },
  {
    "text": "case needs to be updated all this kind of stuff that's taken away from us as a customer you can do multiple tables with",
    "start": "2367730",
    "end": "2375320"
  },
  {
    "text": "one Dax cluster so even if you're running multiple hundreds of dynamo DB",
    "start": "2375320",
    "end": "2380360"
  },
  {
    "text": "tables you actually can use just one text cluster which is based on charting",
    "start": "2380360",
    "end": "2386600"
  },
  {
    "text": "and you could do multiple notes inside of the docs cluster as we're talking in the attack track speed is everything we",
    "start": "2386600",
    "end": "2393500"
  },
  {
    "text": "said it we did some performance testing of tax without tax you can see on the Left",
    "start": "2393500",
    "end": "2400369"
  },
  {
    "start": "2394000",
    "end": "2493000"
  },
  {
    "text": "we're talking of an average so talking about dynamodb directly we're talking about an average of five to six",
    "start": "2400369",
    "end": "2406819"
  },
  {
    "text": "milliseconds which is stayed pretty good right we have a consistent performance",
    "start": "2406819",
    "end": "2412160"
  },
  {
    "text": "we obviously have no warming phase because we're talking about our back-end database and we have detailed metrics",
    "start": "2412160",
    "end": "2418130"
  },
  {
    "text": "per request which is cool with Dex we're talking about an average of 400 to 450",
    "start": "2418130",
    "end": "2426880"
  },
  {
    "text": "microseconds so only 1/10 of what we're seeing with DynamoDB directly we have a",
    "start": "2426880",
    "end": "2433069"
  },
  {
    "text": "very consistent performance around this 50 microseconds obviously we have a",
    "start": "2433069",
    "end": "2439099"
  },
  {
    "text": "warming phase because now we're talking to a cache but what we've seen in our",
    "start": "2439099",
    "end": "2444440"
  },
  {
    "text": "application was that even on cold keys the average is below what we're seeing",
    "start": "2444440",
    "end": "2451160"
  },
  {
    "text": "on average against DynamoDB my assumption is that the reason for that",
    "start": "2451160",
    "end": "2456589"
  },
  {
    "text": "is that our connection handling to dynamically be out of our application is not so efficient what the Dex team can",
    "start": "2456589",
    "end": "2463730"
  },
  {
    "text": "do while talking to DynamoDB so latency is everything and every time we need to",
    "start": "2463730",
    "end": "2469190"
  },
  {
    "text": "wake up the connection or build up a connection that takes time obviously the Dex cluster does that it",
    "start": "2469190",
    "end": "2475549"
  },
  {
    "text": "does a better job than we do right now you we don't have metrics on request on",
    "start": "2475549",
    "end": "2481250"
  },
  {
    "text": "the Dex but you get a lot of metrics like the cache hit ratio and all this kind of stuff out of cloud watch with",
    "start": "2481250",
    "end": "2488329"
  },
  {
    "text": "typically delay of cloud work so still pretty good talking so much about",
    "start": "2488329",
    "end": "2493940"
  },
  {
    "start": "2493000",
    "end": "2636000"
  },
  {
    "text": "caching and talking so much about everything we say cache everything do",
    "start": "2493940",
    "end": "2500029"
  },
  {
    "text": "all the things in everything so catch everything sometimes has what should I",
    "start": "2500029",
    "end": "2508069"
  },
  {
    "text": "say catch everything sometimes means that you might forget something and we",
    "start": "2508069",
    "end": "2513589"
  },
  {
    "text": "did exactly that we forgot about something we forgot about negative caching when we build up one of our",
    "start": "2513589",
    "end": "2520039"
  },
  {
    "text": "biggest caches we had the problem of sometimes or actually unfortunately many",
    "start": "2520039",
    "end": "2526130"
  },
  {
    "text": "times DynamoDB answers with the no result and it's total ballot because in many times",
    "start": "2526130",
    "end": "2533050"
  },
  {
    "text": "if we're asking our DynamoDB hey give me the highest bid for the specific targeting options dynamodb says I don't",
    "start": "2533050",
    "end": "2540010"
  },
  {
    "text": "have a bit and it's totally fine it's also an answer the problem was in our application we had something like if",
    "start": "2540010",
    "end": "2546870"
  },
  {
    "text": "dynamodb answers then save that to the cache but DynamoDB had no results so we",
    "start": "2546870",
    "end": "2554020"
  },
  {
    "text": "didn't save something to the cache and so for the same targeting options we're again did the request against DynamoDB",
    "start": "2554020",
    "end": "2561010"
  },
  {
    "text": "and that's what you can see on the slide now because without negative caching so",
    "start": "2561010",
    "end": "2567190"
  },
  {
    "text": "without not saving that valuable information of DynamoDB has no result",
    "start": "2567190",
    "end": "2574150"
  },
  {
    "text": "for this specific query we had a cache hit ratio of 25 to 30% and then we",
    "start": "2574150",
    "end": "2581050"
  },
  {
    "text": "implemented the really simple thing of a with this question",
    "start": "2581050",
    "end": "2586870"
  },
  {
    "text": "dynamodb has no result to our Redis cache and with negative caching our",
    "start": "2586870",
    "end": "2592270"
  },
  {
    "text": "cache address you went up to 89 to 95% so a huge increase in the cached ratio",
    "start": "2592270",
    "end": "2599230"
  },
  {
    "text": "which actually means that we don't need to ask our dynamodb that often which",
    "start": "2599230",
    "end": "2604830"
  },
  {
    "text": "obviously means we are faster because our cache answers a lot faster than",
    "start": "2604830",
    "end": "2610780"
  },
  {
    "text": "dynamodb and we save a lot of money because we pay DynamoDB on the provision",
    "start": "2610780",
    "end": "2615910"
  },
  {
    "text": "throughput so think about that when you're thinking about what can you catch that even if in a no result there is",
    "start": "2615910",
    "end": "2623050"
  },
  {
    "text": "valuable information in it because you don't want to query your back-end database for the same query over and",
    "start": "2623050",
    "end": "2629500"
  },
  {
    "text": "over again just to get the same answer you can do you can save the answer even if it's a no answer to the cache so",
    "start": "2629500",
    "end": "2637600"
  },
  {
    "start": "2636000",
    "end": "2685000"
  },
  {
    "text": "let's wrap up the database caching thing catch everything even the negative results just as I said I think that's",
    "start": "2637600",
    "end": "2644200"
  },
  {
    "text": "the most important part we learned a lot of the out of that and we saved a lot of money while we were learning that",
    "start": "2644200",
    "end": "2650520"
  },
  {
    "text": "considered the cache auto-update with lambda for those that might be suitable you can combine application with",
    "start": "2650520",
    "end": "2657640"
  },
  {
    "text": "database cache because constantine said it read memcache are a good solution Redis",
    "start": "2657640",
    "end": "2663420"
  },
  {
    "text": "memcache are also a good solution for database caching so you can use actually the same database class at the same",
    "start": "2663420",
    "end": "2668700"
  },
  {
    "text": "caching cluster if you want to and I highly encourage you if you're able to do use tax because tax is an awesome",
    "start": "2668700",
    "end": "2675900"
  },
  {
    "text": "service which takes a lot of pain of the whole maintenance away from us as a customer and it just works out of the",
    "start": "2675900",
    "end": "2682559"
  },
  {
    "text": "box and delivers awesome results so now we have all the tiers and I think",
    "start": "2682559",
    "end": "2688499"
  },
  {
    "start": "2685000",
    "end": "2693000"
  },
  {
    "text": "Constantine will wrap up the whole talk cool so this is the recap after the recap as you go out of this talk and hit",
    "start": "2688499",
    "end": "2696779"
  },
  {
    "text": "lunch and the rest of Raymond it's easy to forget some stuff so maybe you should pull out your phone and take away some",
    "start": "2696779",
    "end": "2702420"
  },
  {
    "text": "two or three things you want to do on your application so who's using cloud font already let's have a quick talk",
    "start": "2702420",
    "end": "2708749"
  },
  {
    "text": "okay if you didn't right raise your hand check it out it can deliver value to you",
    "start": "2708749",
    "end": "2714089"
  },
  {
    "text": "even though you think there is nothing to cache monitor everything who is monitoring really everything Oh some",
    "start": "2714089",
    "end": "2721170"
  },
  {
    "text": "really good tip if you didn't raise your hand just write down monitor everything this is where you find your your",
    "start": "2721170",
    "end": "2726210"
  },
  {
    "text": "opportunities to cache and see where your opportunities are and they will likely end up in the top 20% of your",
    "start": "2726210",
    "end": "2732479"
  },
  {
    "text": "users and you want to do something really special for them which will have a huge impact on the rest of your",
    "start": "2732479",
    "end": "2738239"
  },
  {
    "text": "application consider adding a web cache even if you're using cloud fund already it can pay off to have another cache",
    "start": "2738239",
    "end": "2744599"
  },
  {
    "text": "between your app and your web cache and the cloud fund if you're not caching at",
    "start": "2744599",
    "end": "2751140"
  },
  {
    "text": "the a player who is using elastic cache already okay if you didn't raise your hand check it out",
    "start": "2751140",
    "end": "2756719"
  },
  {
    "text": "it can add value to your application and explore what you can cache and if and",
    "start": "2756719",
    "end": "2761789"
  },
  {
    "text": "remember that song everything counts in large amounts and even if you can save a millisecond of your transaction it will",
    "start": "2761789",
    "end": "2768960"
  },
  {
    "text": "add up big time and as you can see using decks it can be easy to save four or",
    "start": "2768960",
    "end": "2775920"
  },
  {
    "text": "five whole mini seconds just by using decks in front of dynamodb and that's",
    "start": "2775920",
    "end": "2781259"
  },
  {
    "text": "mind blowing because you can then for your 10,000 requests per second app you can multiply that by 10,000 you can save",
    "start": "2781259",
    "end": "2787650"
  },
  {
    "text": "thousands of dollars and more importantly you will be those milliseconds faster for every transaction and that will give",
    "start": "2787650",
    "end": "2794099"
  },
  {
    "text": "your users have better user experience it will give you more time to run those real-time bidding ups and find those",
    "start": "2794099",
    "end": "2800720"
  },
  {
    "text": "better users and create more value so cash everything and with that I hope you",
    "start": "2800720",
    "end": "2807479"
  },
  {
    "start": "2807000",
    "end": "3043000"
  },
  {
    "text": "get a lot of speed out of this talk and we still have 10 minutes or so for questions thank you very much",
    "start": "2807479",
    "end": "2814640"
  },
  {
    "text": "thank you we do have a couple of mics up there what feel free to walk up to a mic and ask your question hello in your",
    "start": "2818430",
    "end": "2826789"
  },
  {
    "text": "architecture diagram when you went from three regions to one region yeah and three databases to one database what",
    "start": "2826789",
    "end": "2834569"
  },
  {
    "text": "strategies did you use to mitigate that database as a single point of failure",
    "start": "2834569",
    "end": "2840500"
  },
  {
    "text": "actually as we're working mostly with DynamoDB AWS takes care of that",
    "start": "2840500",
    "end": "2845670"
  },
  {
    "text": "obviously if DynamoDB is going down in the whole region we will have a problem",
    "start": "2845670",
    "end": "2851150"
  },
  {
    "text": "but what we're doing we're actually replicating on our own system to another",
    "start": "2851150",
    "end": "2856559"
  },
  {
    "text": "region which is kind of a cold standby so we have everything in another region and then that's just something you need",
    "start": "2856559",
    "end": "2864000"
  },
  {
    "text": "to commit to that if the whole region is going down you will go down if you're",
    "start": "2864000",
    "end": "2869460"
  },
  {
    "text": "not ok with that and obviously you should do still the module region set up but if you're having something like ok",
    "start": "2869460",
    "end": "2876180"
  },
  {
    "text": "I'm ok with that that I need to manually migrate over if you're working with",
    "start": "2876180",
    "end": "2881190"
  },
  {
    "text": "cloud formation or so that's pretty simple you can migrate over the whole architecture to another region spin up",
    "start": "2881190",
    "end": "2887700"
  },
  {
    "text": "everything there because the data is already there if you make sure of that does that answer your question yes thank",
    "start": "2887700",
    "end": "2893099"
  },
  {
    "text": "you I remember remember DynamoDB already works out of three different",
    "start": "2893099",
    "end": "2898170"
  },
  {
    "text": "availability zones these are three different data centers that have non-correlated risks and I work with a",
    "start": "2898170",
    "end": "2903480"
  },
  {
    "text": "lot of enterprise customers they are very happy if they are sitting in one data center and they have a disaster",
    "start": "2903480",
    "end": "2908609"
  },
  {
    "text": "recovery solution the second data center and with DynamoDB you get a fault tolerant database that is already",
    "start": "2908609",
    "end": "2913829"
  },
  {
    "text": "running all those three data centers so having a fault tolerant row sorry having",
    "start": "2913829",
    "end": "2919410"
  },
  {
    "text": "a disaster recovery solution in the second region is something that typical enterprise customers dream of so this is",
    "start": "2919410",
    "end": "2924839"
  },
  {
    "text": "already a lot better than the usual set up next question so for database caching",
    "start": "2924839",
    "end": "2930660"
  },
  {
    "text": "you mentioned three options using Jack's changing your applications so that it talks to either the ElastiCache or the",
    "start": "2930660",
    "end": "2937770"
  },
  {
    "text": "database or making a lambda function do you have any criteria for how you decide which one of those is going to be the",
    "start": "2937770",
    "end": "2943920"
  },
  {
    "text": "best solution tried out and monitor everything that's what's the obvious",
    "start": "2943920",
    "end": "2949319"
  },
  {
    "text": "granter right actually we figure out based on the business domain what the cash is working",
    "start": "2949319",
    "end": "2955200"
  },
  {
    "text": "in so sometimes we we are more we are more happy to change the application and",
    "start": "2955200",
    "end": "2962099"
  },
  {
    "text": "actually monitoring if we're running out of sync I don't think there is a rule of",
    "start": "2962099",
    "end": "2968489"
  },
  {
    "text": "thumb you need to find out on your own what works best for you if you are okay with the delay of this one or two",
    "start": "2968489",
    "end": "2975180"
  },
  {
    "text": "seconds the a synchronous way is more on an architecture level than actually building something in your application",
    "start": "2975180",
    "end": "2981719"
  },
  {
    "text": "which might be hard so it might be easier to add something to the overall",
    "start": "2981719",
    "end": "2987029"
  },
  {
    "text": "architecture on the AWS side then rebuild something inside of your application then obviously this might be",
    "start": "2987029",
    "end": "2993539"
  },
  {
    "text": "the good choice but changing from dynamo DB to the tax way is really very very",
    "start": "2993539",
    "end": "3000200"
  },
  {
    "text": "simple and easy so if you have I think it's right now Java and JavaScript are",
    "start": "3000200",
    "end": "3005359"
  },
  {
    "text": "the SDKs that are available right now so if you have an application that is working with Java and JavaScript I",
    "start": "3005359",
    "end": "3010489"
  },
  {
    "text": "highly encourage you just to tried it out because it's a it's a very easy fix",
    "start": "3010489",
    "end": "3015529"
  },
  {
    "text": "inside of your application which gives you a lot of things coming from AWS at",
    "start": "3015529",
    "end": "3021229"
  },
  {
    "text": "that point so my approach would always be thinking about tax first then seeing",
    "start": "3021229",
    "end": "3027859"
  },
  {
    "text": "if I can work with the a synchronous way with the lambda thing and then go back to rebuilding something inside of my",
    "start": "3027859",
    "end": "3034069"
  },
  {
    "text": "application because that's most of the time the biggest pain right by the way for those people who are still sitting",
    "start": "3034069",
    "end": "3040819"
  },
  {
    "text": "here thanks for sitting here there is a quick plug here if you like this talk and since you're sitting here you seem",
    "start": "3040819",
    "end": "3046489"
  },
  {
    "text": "to have liked it oh there's another talk by Marcus and me we're gonna dive deeper into how to save money in the AR CSV or",
    "start": "3046489",
    "end": "3052789"
  },
  {
    "text": "three running lean architectures talk tomorrow so feel free to drop in and we're gonna go into a lot of data into",
    "start": "3052789",
    "end": "3059150"
  },
  {
    "text": "money saving tips there still have some time left next question please okay and how do you handle or have you approach",
    "start": "3059150",
    "end": "3067069"
  },
  {
    "text": "how do you approach handling the issue cache coherence between the layers because that's kind of the third hard",
    "start": "3067069",
    "end": "3073729"
  },
  {
    "text": "problem right cache coherence between layers is a hard problem you need to",
    "start": "3073729",
    "end": "3079279"
  },
  {
    "text": "understand your application and you need to do trade-offs about how old and infirm",
    "start": "3079279",
    "end": "3084410"
  },
  {
    "text": "you're capable of dealing with sometimes it's okay to have to work with old",
    "start": "3084410",
    "end": "3090560"
  },
  {
    "text": "information for the sake of better performance sometimes it's not okay and this is where you get to choose your TTL",
    "start": "3090560",
    "end": "3096650"
  },
  {
    "text": "logic and where you need to do a smart decision here how your TTL is going if it becomes critical to always have the",
    "start": "3096650",
    "end": "3104240"
  },
  {
    "text": "latest data no matter what this is where you want to be closer to the database",
    "start": "3104240",
    "end": "3109820"
  },
  {
    "text": "and when you want to have a tactic where the cache is updated at the same time as your database and this is probably one",
    "start": "3109820",
    "end": "3116630"
  },
  {
    "text": "of the other criterias for the previous question on how to choose which strategy to employ the database name yeah but",
    "start": "3116630",
    "end": "3122000"
  },
  {
    "text": "what I mean when you do that you can immediately update the database level cache that you have in your application",
    "start": "3122000",
    "end": "3128120"
  },
  {
    "text": "in memory application cache yes you need to invalidate those as well and that's",
    "start": "3128120",
    "end": "3133160"
  },
  {
    "text": "right and they're not CloudFront you have the ability to have front you know you don't have to invalid cloud from cloud phone actually asked you can",
    "start": "3133160",
    "end": "3139970"
  },
  {
    "text": "actually configure a TTL of zero with cloud front and then cloud front will simply issue an HTTP header request to",
    "start": "3139970",
    "end": "3146930"
  },
  {
    "text": "the origin and ask has this content changed and it is a lot cheaper to",
    "start": "3146930",
    "end": "3152120"
  },
  {
    "text": "answer to cloud front no this has not changed you can feel free to use your cached copy and you will save something",
    "start": "3152120",
    "end": "3158180"
  },
  {
    "text": "even in the event where you give clouds on a TTL of zero so for these types of data feel free to give clawed phone a",
    "start": "3158180",
    "end": "3164690"
  },
  {
    "text": "TTL of zero lot for both still be able to cache content but it will use those help requests to verify that it still is",
    "start": "3164690",
    "end": "3171860"
  },
  {
    "text": "working on current data and you can have a similar protocol between the",
    "start": "3171860",
    "end": "3176870"
  },
  {
    "text": "application layer or the database layer or you can merge the application cache with the database cache into the same",
    "start": "3176870",
    "end": "3183620"
  },
  {
    "text": "memcache the instance and kind of like work together again it is this case",
    "start": "3183620",
    "end": "3188720"
  },
  {
    "text": "specific for cloud fund you can use the HTTP head protocol there which saves a",
    "start": "3188720",
    "end": "3194360"
  },
  {
    "text": "lot of bandwidth especially for images and stuff and yes this is where you become a lot more geeky and",
    "start": "3194360",
    "end": "3200600"
  },
  {
    "text": "understanding where the trade-offs are one one thing I want to jump in here what we're doing is we're actually",
    "start": "3200600",
    "end": "3207680"
  },
  {
    "text": "thinking about the more control we have about the cache itself the higher the",
    "start": "3207680",
    "end": "3213770"
  },
  {
    "text": "TTL can be that's kind of our rule of thumb so actually we don't the cache of CloudFront because that's",
    "start": "3213770",
    "end": "3219650"
  },
  {
    "text": "total AWS but we we have 100% control about what we are keeping in memory in",
    "start": "3219650",
    "end": "3225560"
  },
  {
    "text": "our application so I can invalidate those things in memory on my application",
    "start": "3225560",
    "end": "3231110"
  },
  {
    "text": "server within microseconds so that gives me a huge opportunity to increase my TTL",
    "start": "3231110",
    "end": "3238610"
  },
  {
    "text": "because I know if I want to invalidate it I can do it right away with CloudFront I can't do that right away because",
    "start": "3238610",
    "end": "3245450"
  },
  {
    "text": "that's not something I built inside of my application so I need to figure out what seems to be the right TTL and we in",
    "start": "3245450",
    "end": "3253010"
  },
  {
    "text": "our application tend to have a lower TTL for those caches we don't control that",
    "start": "3253010",
    "end": "3258500"
  },
  {
    "text": "much than what we control on our own Redis for example but also in our own memory maybe helps and that's another",
    "start": "3258500",
    "end": "3265820"
  },
  {
    "text": "great reason to have your own web cache on top of your application but before crowdfund because then you can give",
    "start": "3265820",
    "end": "3272450"
  },
  {
    "text": "cloud for a TTL of zero and have that decision whether it's still valid or not under your control within your",
    "start": "3272450",
    "end": "3278570"
  },
  {
    "text": "application Thanks thank you thanks crosstalk I have question about how do",
    "start": "3278570",
    "end": "3284360"
  },
  {
    "text": "you catch the transition data light budget of the advertiser sorry I didn't",
    "start": "3284360",
    "end": "3291410"
  },
  {
    "text": "get the last part the transition what can sectional data light Patchett of advertiser okay the the what of the",
    "start": "3291410",
    "end": "3298880"
  },
  {
    "text": "advertiser sorry budget the budget okay um we're having that in Redis um and",
    "start": "3298880",
    "end": "3305120"
  },
  {
    "text": "what we're doing so we update everything in Redis and then in kind of a let's",
    "start": "3305120",
    "end": "3310670"
  },
  {
    "text": "call it a cron job so several times a day we're actually updating the budget",
    "start": "3310670",
    "end": "3316850"
  },
  {
    "text": "from the Redis back to our in our case Amazon Aurora or Amazon DynamoDB so we",
    "start": "3316850",
    "end": "3323960"
  },
  {
    "text": "are not really afraid of losing something in there even if Redis is not highly durable but we're totally okay of",
    "start": "3323960",
    "end": "3331220"
  },
  {
    "text": "losing something like the last five or ten minutes that's kind of the risk approach you need to do there and so",
    "start": "3331220",
    "end": "3337160"
  },
  {
    "text": "every five or ten minutes we're saving everything back to our dynamo DB which",
    "start": "3337160",
    "end": "3342800"
  },
  {
    "text": "is then kind of the backend database which is highly durable and nothing happens in there does that answer your",
    "start": "3342800",
    "end": "3348350"
  },
  {
    "text": "question but two key problem is that you need to know you deliver some",
    "start": "3348350",
    "end": "3353599"
  },
  {
    "text": "advertising you deliver some ass then you need to - the budget you need",
    "start": "3353599",
    "end": "3359510"
  },
  {
    "text": "to do the calculation and those happens Tom hi Tom yeah but reddest us all as we",
    "start": "3359510",
    "end": "3366770"
  },
  {
    "text": "are working just in one region that's the benefit of working just in one region you can increment and decrement",
    "start": "3366770",
    "end": "3373460"
  },
  {
    "text": "by float inside of Redis in an atomic way okay so and then we get the right",
    "start": "3373460",
    "end": "3378950"
  },
  {
    "text": "back return so we can do something like hey please decrease or actually increase with a negative for sine so decrease the",
    "start": "3378950",
    "end": "3387260"
  },
  {
    "text": "budget and give me the answer which is done after the decrease as that's atomic",
    "start": "3387260",
    "end": "3392750"
  },
  {
    "text": "we know exactly that's the right budget we have for this advertiser right now okay thank you last two minutes for",
    "start": "3392750",
    "end": "3400339"
  },
  {
    "start": "3399000",
    "end": "3525000"
  },
  {
    "text": "questions and already thank you please remember to rate this session we would like to be back here next year so let's",
    "start": "3400339",
    "end": "3407540"
  },
  {
    "text": "have the last question here now do you have any solution about expiring data especially in the s3 I mean when I the",
    "start": "3407540",
    "end": "3417230"
  },
  {
    "text": "data immediately knows when the data should be expired so when you you mean",
    "start": "3417230",
    "end": "3425240"
  },
  {
    "text": "keeping a tap on when is the data when when was the last update and when did the previous one expired right yeah",
    "start": "3425240",
    "end": "3431510"
  },
  {
    "text": "maybe you can yeah you can build a hash table on dynamodb to have that information ready and then have s3 as",
    "start": "3431510",
    "end": "3438890"
  },
  {
    "text": "the lazy part of that layer oh that's one strategy you can have here which means that the the source of truth about",
    "start": "3438890",
    "end": "3445400"
  },
  {
    "text": "the updates is in dynamo DB but the actual data is or the blobs are on s3 that's one strategy here yeah actually",
    "start": "3445400",
    "end": "3452780"
  },
  {
    "text": "using something like dynamo DB as a metadata storage so you're building something like a meter data storage in whatever database",
    "start": "3452780",
    "end": "3459650"
  },
  {
    "text": "you want to have it which you then can update and then you have kind of a pointer or a link to the a3 object but I",
    "start": "3459650",
    "end": "3466760"
  },
  {
    "text": "think it didn't work right out of the box in s3 so it's always that you need to create something like a metadata the",
    "start": "3466760",
    "end": "3473359"
  },
  {
    "text": "other strategy you can have is if you're using cloud front you can issue version numbers as part of your URL that means",
    "start": "3473359",
    "end": "3479299"
  },
  {
    "text": "if you update the data you update the URL with a different URL which means that it's guaranteed",
    "start": "3479299",
    "end": "3484940"
  },
  {
    "text": "that cloud fund will not have that one in its cache and it will always be forced to fetch it from the origin",
    "start": "3484940",
    "end": "3490220"
  },
  {
    "text": "because it encounters a new URL so as your application generates a new URL with a more recent version of the data",
    "start": "3490220",
    "end": "3496300"
  },
  {
    "text": "cloud fund will be guaranteed to go back to your origin to get that latest",
    "start": "3496300",
    "end": "3501530"
  },
  {
    "text": "revision without needing to issue a special invalidation call which takes time and and an effort is not under your",
    "start": "3501530",
    "end": "3507829"
  },
  {
    "text": "control so by giving out unique URLs for each new version of the data you can",
    "start": "3507829",
    "end": "3513410"
  },
  {
    "text": "have a consistency right through the whole chain through crowdfund okay thank",
    "start": "3513410",
    "end": "3518750"
  },
  {
    "text": "you you're welcome so thanks a lot for coming here enjoy the rest of Raymond and thank you",
    "start": "3518750",
    "end": "3526030"
  }
]