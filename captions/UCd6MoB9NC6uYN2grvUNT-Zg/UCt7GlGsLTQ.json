[
  {
    "text": "- Hi, my name is Talia Nassi,",
    "start": "5510",
    "end": "7270"
  },
  {
    "text": "and I'm a senior developer\nadvocate here at AWS serverless.",
    "start": "7270",
    "end": "10889"
  },
  {
    "text": "This video is about getting started",
    "start": "10890",
    "end": "12710"
  },
  {
    "text": "with event-driven architecture.",
    "start": "12710",
    "end": "14683"
  },
  {
    "text": "In modern application development,",
    "start": "16240",
    "end": "18050"
  },
  {
    "text": "event-driven architecture is becoming",
    "start": "18050",
    "end": "19970"
  },
  {
    "text": "more and more prominent",
    "start": "19970",
    "end": "21550"
  },
  {
    "text": "because it can make building applications",
    "start": "21550",
    "end": "23550"
  },
  {
    "text": "in the cloud easier.",
    "start": "23550",
    "end": "25650"
  },
  {
    "text": "Event-driven architecture can allow you",
    "start": "25650",
    "end": "27600"
  },
  {
    "text": "to decouple your services",
    "start": "27600",
    "end": "29540"
  },
  {
    "text": "which increases developer velocity",
    "start": "29540",
    "end": "32119"
  },
  {
    "text": "and can make it easier for\nyou to debug applications.",
    "start": "32120",
    "end": "35930"
  },
  {
    "text": "It can also help remove the bottleneck",
    "start": "35930",
    "end": "38050"
  },
  {
    "text": "that occurs when features\nexpand across different teams,",
    "start": "38050",
    "end": "41629"
  },
  {
    "text": "which allows teams to\nprogress more independently.",
    "start": "41630",
    "end": "44763"
  },
  {
    "text": "One way to think about how\nan application works is",
    "start": "45610",
    "end": "48740"
  },
  {
    "text": "as a system that reacts to\nevents from other places",
    "start": "48740",
    "end": "52230"
  },
  {
    "text": "like from within your application.",
    "start": "52230",
    "end": "54570"
  },
  {
    "text": "In this approach, you focus\non the system's interaction",
    "start": "54570",
    "end": "57829"
  },
  {
    "text": "with its surroundings as\na transmission of events.",
    "start": "57830",
    "end": "61270"
  },
  {
    "text": "The application receives\nand creates events,",
    "start": "61270",
    "end": "64320"
  },
  {
    "text": "and the inputs to the application",
    "start": "64320",
    "end": "66530"
  },
  {
    "text": "and outputs from the\napplication act as events.",
    "start": "66530",
    "end": "70233"
  },
  {
    "text": "In event-driven applications,",
    "start": "72330",
    "end": "73960"
  },
  {
    "text": "you have the event\nproducer, the event bus,",
    "start": "73960",
    "end": "76920"
  },
  {
    "text": "and the event consumer.",
    "start": "76920",
    "end": "78920"
  },
  {
    "text": "The event producer is the event source",
    "start": "78920",
    "end": "81100"
  },
  {
    "text": "that the events come from.",
    "start": "81100",
    "end": "82869"
  },
  {
    "text": "This can be an AWS\nservice, a custom event,",
    "start": "82870",
    "end": "86320"
  },
  {
    "text": "or an event that comes from\na third party SaaS app.",
    "start": "86320",
    "end": "89980"
  },
  {
    "text": "The event bus acts as an event\nrouter to route the events.",
    "start": "89980",
    "end": "94310"
  },
  {
    "text": "The event consumer, or\ntarget, listens for events",
    "start": "94310",
    "end": "97829"
  },
  {
    "text": "and acts only upon the\nevents they're interested in.",
    "start": "97830",
    "end": "100633"
  },
  {
    "text": "A common way of making components",
    "start": "103140",
    "end": "105130"
  },
  {
    "text": "of an application work together is through",
    "start": "105130",
    "end": "107659"
  },
  {
    "text": "an API-driven request\nresponse architecture",
    "start": "107660",
    "end": "111460"
  },
  {
    "text": "where you have requests and responses.",
    "start": "111460",
    "end": "113920"
  },
  {
    "text": "For example, you query a list\nof orders from an order's API",
    "start": "113920",
    "end": "118130"
  },
  {
    "text": "and the order's API response\nwith a list of orders.",
    "start": "118130",
    "end": "121640"
  },
  {
    "text": "This is an example of\nsynchronous architecture.",
    "start": "121640",
    "end": "124909"
  },
  {
    "text": "The system asking for the\norders waits for the response,",
    "start": "124910",
    "end": "128479"
  },
  {
    "text": "and you cannot move on until\nthe response comes back.",
    "start": "128480",
    "end": "132459"
  },
  {
    "text": "In this approach,",
    "start": "132460",
    "end": "133530"
  },
  {
    "text": "you send commands that\nare directed to a target.",
    "start": "133530",
    "end": "137030"
  },
  {
    "text": "For example, place this order,",
    "start": "137030",
    "end": "139920"
  },
  {
    "text": "or add this record to the database.",
    "start": "139920",
    "end": "143170"
  },
  {
    "text": "API thinking is synchronous thinking.",
    "start": "143170",
    "end": "146150"
  },
  {
    "text": "You can't move on until the\nAPI response comes back.",
    "start": "146150",
    "end": "150450"
  },
  {
    "text": "With APIs, you send\ncommands, do this thing,",
    "start": "150450",
    "end": "154940"
  },
  {
    "text": "it has an intent and it's\ndirected to a specific target.",
    "start": "154940",
    "end": "159563"
  },
  {
    "text": "An event is something that happened.",
    "start": "161210",
    "end": "163860"
  },
  {
    "text": "Maybe a new file has been created,",
    "start": "163860",
    "end": "166740"
  },
  {
    "text": "maybe an exception or error occurred,",
    "start": "166740",
    "end": "169790"
  },
  {
    "text": "maybe a new customer has\nbeen created in your system.",
    "start": "169790",
    "end": "173592"
  },
  {
    "text": "It tells you a fact.",
    "start": "174540",
    "end": "177159"
  },
  {
    "text": "Events are immutable, which\nmeans they cannot be changed.",
    "start": "177160",
    "end": "181063"
  },
  {
    "text": "So again, with events you describe effect",
    "start": "182820",
    "end": "185580"
  },
  {
    "text": "and others decide what to do with it",
    "start": "185580",
    "end": "187680"
  },
  {
    "text": "In a synchronous model shown on the left,",
    "start": "189960",
    "end": "192540"
  },
  {
    "text": "the client makes a request to service A,",
    "start": "192540",
    "end": "195370"
  },
  {
    "text": "service A call service B,",
    "start": "195370",
    "end": "197599"
  },
  {
    "text": "but then service A waits\nfor service B to respond",
    "start": "197600",
    "end": "201190"
  },
  {
    "text": "before it continues on",
    "start": "201190",
    "end": "202620"
  },
  {
    "text": "and eventually responds to the client.",
    "start": "202620",
    "end": "205360"
  },
  {
    "text": "In a synchronous\nevent-driven architecture,",
    "start": "205360",
    "end": "208230"
  },
  {
    "text": "there is no response path.",
    "start": "208230",
    "end": "210290"
  },
  {
    "text": "The service surfaces the event",
    "start": "210290",
    "end": "212680"
  },
  {
    "text": "and then immediately moves forward.",
    "start": "212680",
    "end": "215290"
  },
  {
    "text": "The trade off here is that\nthere's no direct channel",
    "start": "215290",
    "end": "218730"
  },
  {
    "text": "for service B to pass back\ninformation to service A",
    "start": "218730",
    "end": "222400"
  },
  {
    "text": "besides confirming it received the event.",
    "start": "222400",
    "end": "225299"
  },
  {
    "text": "But in many cases, you don't\nneed that explicit coupling",
    "start": "225300",
    "end": "228640"
  },
  {
    "text": "between the request and response channels.",
    "start": "228640",
    "end": "231222"
  },
  {
    "text": "An event is something that happened.",
    "start": "233480",
    "end": "235690"
  },
  {
    "text": "For example, a new record\nis added to a DynamoDB table",
    "start": "235690",
    "end": "239600"
  },
  {
    "text": "or an item is put into\nan Amazon S3 bucket.",
    "start": "239600",
    "end": "243330"
  },
  {
    "text": "Events are immutable, which\nmeans you cannot change them.",
    "start": "243330",
    "end": "247060"
  },
  {
    "text": "Once an event happens, you cannot undo it.",
    "start": "247060",
    "end": "250459"
  },
  {
    "text": "For example, if there is an event raised",
    "start": "250460",
    "end": "252710"
  },
  {
    "text": "when an order is placed,",
    "start": "252710",
    "end": "254320"
  },
  {
    "text": "there can be another event\nfor an order being canceled.",
    "start": "254320",
    "end": "257763"
  },
  {
    "text": "Events can come from various places",
    "start": "259130",
    "end": "260880"
  },
  {
    "text": "such as messaging systems or databases",
    "start": "260880",
    "end": "263460"
  },
  {
    "text": "both within and outside\nof your application.",
    "start": "263460",
    "end": "266680"
  },
  {
    "text": "Events are JSON objects\nthat tell you information",
    "start": "266680",
    "end": "270360"
  },
  {
    "text": "about something that\nhappened in your application.",
    "start": "270360",
    "end": "273259"
  },
  {
    "text": "In event-driven architecture,\nevents represent facts.",
    "start": "273260",
    "end": "277100"
  },
  {
    "text": "Each component of the\napplication raises an event",
    "start": "277100",
    "end": "280270"
  },
  {
    "text": "whenever any anything changes.",
    "start": "280270",
    "end": "282590"
  },
  {
    "text": "Other components listen and\ndecide what to do with it",
    "start": "282590",
    "end": "285960"
  },
  {
    "text": "and how they would like to react.",
    "start": "285960",
    "end": "288819"
  },
  {
    "text": "Events are observable.",
    "start": "288820",
    "end": "291150"
  },
  {
    "text": "Any service that is\nauthorized can watch an event.",
    "start": "291150",
    "end": "294750"
  },
  {
    "text": "Consider a coffee shop example",
    "start": "294750",
    "end": "296910"
  },
  {
    "text": "where there is a barista who makes coffee",
    "start": "296910",
    "end": "299320"
  },
  {
    "text": "and a pastry chef who makes pastries.",
    "start": "299320",
    "end": "302520"
  },
  {
    "text": "When a customer enters the coffee shop",
    "start": "302520",
    "end": "304590"
  },
  {
    "text": "and orders a cup of coffee,",
    "start": "304590",
    "end": "306340"
  },
  {
    "text": "the barista starts to make the coffee",
    "start": "306340",
    "end": "308590"
  },
  {
    "text": "and the pastry chef takes no action.",
    "start": "308590",
    "end": "311460"
  },
  {
    "text": "However, if a customer\ncomes into the coffee shop",
    "start": "311460",
    "end": "314440"
  },
  {
    "text": "and orders a chocolate croissant,",
    "start": "314440",
    "end": "316400"
  },
  {
    "text": "then the pastry chef starts\nmaking the chocolate croissant",
    "start": "316400",
    "end": "319100"
  },
  {
    "text": "and the barista takes no action.",
    "start": "319100",
    "end": "322060"
  },
  {
    "text": "The pastry chef is only interested",
    "start": "322060",
    "end": "324150"
  },
  {
    "text": "in orders relating to pastries,",
    "start": "324150",
    "end": "326009"
  },
  {
    "text": "and the barista is only interested",
    "start": "326010",
    "end": "327910"
  },
  {
    "text": "in events relating to coffee.",
    "start": "327910",
    "end": "330160"
  },
  {
    "text": "Here's an example of what\nan event could look like.",
    "start": "330160",
    "end": "333320"
  },
  {
    "text": "In the event above, S3 raises an event",
    "start": "333320",
    "end": "336380"
  },
  {
    "text": "when you put an item into an S3 bucket.",
    "start": "336380",
    "end": "339440"
  },
  {
    "text": "The event source is",
    "start": "339440",
    "end": "340520"
  },
  {
    "text": "an S3 bucket named sam-app-sourcebucket.",
    "start": "340520",
    "end": "343960"
  },
  {
    "text": "The object that's put",
    "start": "343960",
    "end": "345050"
  },
  {
    "text": "into the bucket is called brad.jpeg.",
    "start": "345050",
    "end": "348090"
  },
  {
    "text": "Many applications are built in a monolith",
    "start": "348090",
    "end": "350430"
  },
  {
    "text": "where the components are tightly coupled",
    "start": "350430",
    "end": "352600"
  },
  {
    "text": "and are highly dependent on each other.",
    "start": "352600",
    "end": "355100"
  },
  {
    "text": "This proves to be problematic\nwhen there's bugs,",
    "start": "355100",
    "end": "357700"
  },
  {
    "text": "and you are trying to pinpoint exactly",
    "start": "357700",
    "end": "359530"
  },
  {
    "text": "what part of the application is failing.",
    "start": "359530",
    "end": "361970"
  },
  {
    "text": "Decoupled architectures\nare composed of components",
    "start": "361970",
    "end": "364870"
  },
  {
    "text": "or services that are loosely coupled.",
    "start": "364870",
    "end": "367150"
  },
  {
    "text": "In an event-driven decoupled architecture,",
    "start": "367150",
    "end": "370030"
  },
  {
    "text": "you broadcast events without\ncaring who responds to them.",
    "start": "370030",
    "end": "373920"
  },
  {
    "text": "This saves time because events\ncan be queued and forwarded",
    "start": "373920",
    "end": "377100"
  },
  {
    "text": "whenever the receiver is\nready to process them.",
    "start": "377100",
    "end": "380190"
  },
  {
    "text": "This allows for building scalable,",
    "start": "380190",
    "end": "382250"
  },
  {
    "text": "highly modifiable systems.",
    "start": "382250",
    "end": "384393"
  },
  {
    "text": "Decoupled applications enable teams",
    "start": "385230",
    "end": "387450"
  },
  {
    "text": "to act more independently,\nwhich increases their velocity.",
    "start": "387450",
    "end": "391500"
  },
  {
    "text": "For example, with an API based integration",
    "start": "391500",
    "end": "394340"
  },
  {
    "text": "if my team wants to know about some change",
    "start": "394340",
    "end": "396470"
  },
  {
    "text": "that happened in another\nteam's microservice,",
    "start": "396470",
    "end": "398830"
  },
  {
    "text": "I have to ask that team to\nmake an API call to my service.",
    "start": "398830",
    "end": "402330"
  },
  {
    "text": "That means I have to\ndeal with authentication,",
    "start": "402330",
    "end": "404669"
  },
  {
    "text": "coordination with the other team",
    "start": "404670",
    "end": "406200"
  },
  {
    "text": "over the structure of\nthe API call, et cetera.",
    "start": "406200",
    "end": "409310"
  },
  {
    "text": "This causes back and forth between teams",
    "start": "409310",
    "end": "411500"
  },
  {
    "text": "which slows down development time.",
    "start": "411500",
    "end": "413513"
  },
  {
    "text": "With an event-driven\napplication, you can subscribe",
    "start": "414780",
    "end": "417200"
  },
  {
    "text": "to events that are sent\nfrom a microservice,",
    "start": "417200",
    "end": "420010"
  },
  {
    "text": "and the event router takes care",
    "start": "420010",
    "end": "421630"
  },
  {
    "text": "of routing the event and\nhandling authentication.",
    "start": "421630",
    "end": "425160"
  },
  {
    "text": "Decoupled applications also allow you",
    "start": "425160",
    "end": "427360"
  },
  {
    "text": "to build new features faster.",
    "start": "427360",
    "end": "430020"
  },
  {
    "text": "Adding new features or extending\nexisting ones is simpler",
    "start": "430020",
    "end": "433340"
  },
  {
    "text": "with event-driven architectures.",
    "start": "433340",
    "end": "435440"
  },
  {
    "text": "This is because you only\nhave to choose the event",
    "start": "435440",
    "end": "437860"
  },
  {
    "text": "you need to trigger your new feature",
    "start": "437860",
    "end": "439710"
  },
  {
    "text": "and then subscribe to it.",
    "start": "439710",
    "end": "441610"
  },
  {
    "text": "There's no need to modify any",
    "start": "441610",
    "end": "443280"
  },
  {
    "text": "of your existing services\nto add new functionality.",
    "start": "443280",
    "end": "446570"
  },
  {
    "text": "When you build applications\nusing event-driven architecture,",
    "start": "446570",
    "end": "450070"
  },
  {
    "text": "often you write less code",
    "start": "450070",
    "end": "451720"
  },
  {
    "text": "because you only need\nto consider new events",
    "start": "451720",
    "end": "454990"
  },
  {
    "text": "as well as which service is\nsubscribe to those events.",
    "start": "454990",
    "end": "458280"
  },
  {
    "text": "For example,",
    "start": "458280",
    "end": "459340"
  },
  {
    "text": "if you're building new\nfeatures for your application,",
    "start": "459340",
    "end": "462060"
  },
  {
    "text": "all you have to do is\nconsider the existing events",
    "start": "462060",
    "end": "464650"
  },
  {
    "text": "and then add senders and\nreceivers as necessary.",
    "start": "464650",
    "end": "468240"
  },
  {
    "text": "In this way, you speed up development time",
    "start": "468240",
    "end": "470590"
  },
  {
    "text": "because each functional unit is smaller",
    "start": "470590",
    "end": "473169"
  },
  {
    "text": "and there is often less code.",
    "start": "473170",
    "end": "475023"
  },
  {
    "text": "You also get better extensibility",
    "start": "476030",
    "end": "477820"
  },
  {
    "text": "with event-driven architecture.",
    "start": "477820",
    "end": "479890"
  },
  {
    "text": "Other teams can extend\nfeatures and add functionality",
    "start": "479890",
    "end": "483080"
  },
  {
    "text": "without impacting other microservices.",
    "start": "483080",
    "end": "485403"
  },
  {
    "text": "Producers of events have no\nknowledge of event consumers",
    "start": "486290",
    "end": "490250"
  },
  {
    "text": "which can help simplify\nthe microservice logic.",
    "start": "490250",
    "end": "493690"
  },
  {
    "text": "A common process to build\napplications is to work",
    "start": "493690",
    "end": "496300"
  },
  {
    "text": "with your product managers\nand business stakeholders",
    "start": "496300",
    "end": "498970"
  },
  {
    "text": "to gather requirements.",
    "start": "498970",
    "end": "500910"
  },
  {
    "text": "Developers then translate\nthose requirements into code.",
    "start": "500910",
    "end": "504660"
  },
  {
    "text": "However, there may be a disconnect",
    "start": "504660",
    "end": "506540"
  },
  {
    "text": "between the product\nrequirements and the code.",
    "start": "506540",
    "end": "509680"
  },
  {
    "text": "When you use events,",
    "start": "509680",
    "end": "510889"
  },
  {
    "text": "everyone in the business\nunderstands the logic.",
    "start": "510890",
    "end": "513840"
  },
  {
    "text": "You define the events in an application.",
    "start": "513840",
    "end": "516219"
  },
  {
    "text": "For example, a customer adds an item",
    "start": "516220",
    "end": "518539"
  },
  {
    "text": "to their shopping cart or a\ncustomer account is created,",
    "start": "518540",
    "end": "521430"
  },
  {
    "text": "and that becomes your\nproduct requirements.",
    "start": "521430",
    "end": "524219"
  },
  {
    "text": "Whenever that action\nhappens, it produces an event",
    "start": "524220",
    "end": "527120"
  },
  {
    "text": "and whoever is interested can\ntake action on that event.",
    "start": "527120",
    "end": "530770"
  },
  {
    "text": "For example,",
    "start": "530770",
    "end": "531603"
  },
  {
    "text": "a marketing manager could be interested",
    "start": "531603",
    "end": "533240"
  },
  {
    "text": "whenever a customer creates an account.",
    "start": "533240",
    "end": "535930"
  },
  {
    "text": "One way to choreograph this\nin event-driven architecture",
    "start": "535930",
    "end": "539380"
  },
  {
    "text": "is to have a marketing event bus",
    "start": "539380",
    "end": "541540"
  },
  {
    "text": "that listens for the new account event.",
    "start": "541540",
    "end": "544110"
  },
  {
    "text": "There could also be other teams",
    "start": "544110",
    "end": "545570"
  },
  {
    "text": "that are interested such\nas the analytics team",
    "start": "545570",
    "end": "548440"
  },
  {
    "text": "who could also subscribe to that event.",
    "start": "548440",
    "end": "550513"
  },
  {
    "text": "Each team and service\ncan subscribe to events",
    "start": "551750",
    "end": "554550"
  },
  {
    "text": "that are relevant to them.",
    "start": "554550",
    "end": "556750"
  },
  {
    "text": "Event-driven architecture is a great way",
    "start": "556750",
    "end": "558870"
  },
  {
    "text": "for businesses to describe\ntheir business problems",
    "start": "558870",
    "end": "561410"
  },
  {
    "text": "and represent them.",
    "start": "561410",
    "end": "562623"
  },
  {
    "text": "To learn more about\nevent-driven architecture,",
    "start": "564480",
    "end": "566660"
  },
  {
    "text": "head to serverlessland.com",
    "start": "566660",
    "end": "568620"
  },
  {
    "text": "where you'll find more\ncontent from me and my team.",
    "start": "568620",
    "end": "571300"
  },
  {
    "text": "I'm Talia Nassi, thanks for tuning in.",
    "start": "571300",
    "end": "573393"
  }
]