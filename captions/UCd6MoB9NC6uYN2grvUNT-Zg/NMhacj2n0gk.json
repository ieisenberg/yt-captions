[
  {
    "start": "0",
    "end": "38000"
  },
  {
    "text": "okay welcome everyone my name is Danielle gresock I'm a manager of solutions architecture based in Boston",
    "start": "1480",
    "end": "7759"
  },
  {
    "text": "um I hope you all are very excited today to talk about containers and hopefully everyone knows about the mini conference",
    "start": "7759",
    "end": "13679"
  },
  {
    "text": "that's taking place at the Mirage on December 1st and there will be some repeat sessions on December 2nd um I'll",
    "start": "13679",
    "end": "19720"
  },
  {
    "text": "refer to some of those sessions um but just to give some level setting here this particular session is just an",
    "start": "19720",
    "end": "26439"
  },
  {
    "text": "introductory level session um and so we're just going to talk about some of the um aspects of using Docker on AWS at",
    "start": "26439",
    "end": "36559"
  },
  {
    "text": "scale so the agenda for our session today first we're going to talk about why containers hopefully all of you are",
    "start": "37840",
    "end": "44440"
  },
  {
    "start": "38000",
    "end": "97000"
  },
  {
    "text": "here because you have you you're hearing about containers you think they're pretty exciting technology um and they",
    "start": "44440",
    "end": "50440"
  },
  {
    "text": "are one of the hottest architecture patterns that we're hearing about um and lots of our customers have a great",
    "start": "50440",
    "end": "55600"
  },
  {
    "text": "interest in them um but we'll talk about why you want to use them and what benefits they have in your applications",
    "start": "55600",
    "end": "62160"
  },
  {
    "text": "uh we'll talk about managing a cluster uh because you're never actually just going to run one or two containers right",
    "start": "62160",
    "end": "67360"
  },
  {
    "text": "you're going to be doing this at scale and some of the CH there are lots of",
    "start": "67360",
    "end": "72600"
  },
  {
    "text": "challenges with running a cluster at scale so we'll talk about ECS which is",
    "start": "72600",
    "end": "77920"
  },
  {
    "text": "our cluster management system for running containers and then we'll talk about uh the benefits that that service",
    "start": "77920",
    "end": "84560"
  },
  {
    "text": "has we'll talk about running services with ECS as well and then I'll do a just",
    "start": "84560",
    "end": "89720"
  },
  {
    "text": "a quick demo uh a little bit of Hands-On with the ECS CLI um and show you how to",
    "start": "89720",
    "end": "95040"
  },
  {
    "text": "set up a service on AWS okay so why should you be using",
    "start": "95040",
    "end": "100600"
  },
  {
    "start": "97000",
    "end": "177000"
  },
  {
    "text": "containers first and foremost so you know containers basically abstract the",
    "start": "100600",
    "end": "106040"
  },
  {
    "text": "architecture I'm sorry abstract the infrastructure and the operating system which really just allow you to focus on",
    "start": "106040",
    "end": "112680"
  },
  {
    "text": "your development workflow so Docker as a technology really provides you with the ability to hook into Linux features um",
    "start": "112680",
    "end": "121320"
  },
  {
    "text": "and the Linux C kernel that allow you to uh use such features as cgroups which",
    "start": "121320",
    "end": "126960"
  },
  {
    "text": "allow you to limit resource utilization and also name spaces which really allow you to provide process isolation so this",
    "start": "126960",
    "end": "135560"
  },
  {
    "text": "way you know certain processes can't see other processes and also you can uh",
    "start": "135560",
    "end": "140920"
  },
  {
    "text": "isolate parts of a shared file system so you know when I first started as a Solutions architect with AWS three years",
    "start": "140920",
    "end": "148000"
  },
  {
    "text": "ago I had a lot of uh customers in my uh patch which were doing software as a",
    "start": "148000",
    "end": "153640"
  },
  {
    "text": "service and platform as a service and they were really on the container early adoption um path pretty quickly and it",
    "start": "153640",
    "end": "161879"
  },
  {
    "text": "makes sense right because if you're running software as a service or platform as a service you want to make sure that uh you can really limit",
    "start": "161879",
    "end": "168599"
  },
  {
    "text": "resource utilization on a multi-tenant system um and that's something that you can do with the operating system level",
    "start": "168599",
    "end": "174599"
  },
  {
    "text": "and you can start your applications very quickly but that being said Paws and",
    "start": "174599",
    "end": "180319"
  },
  {
    "start": "177000",
    "end": "258000"
  },
  {
    "text": "sauce aren't aren't the only reasons to use containers um so briefly what",
    "start": "180319",
    "end": "186360"
  },
  {
    "text": "containers are is they allow you to uh virtualize the operating system I know",
    "start": "186360",
    "end": "192120"
  },
  {
    "text": "most of you are probably familiar with virtual machines which virtualize the underlying hardware and provide many",
    "start": "192120",
    "end": "198680"
  },
  {
    "text": "guest operating systems and what Docker does and why containers have really come",
    "start": "198680",
    "end": "205040"
  },
  {
    "text": "into uh to be ubiquitous is because they really make uh virtualizing the",
    "start": "205040",
    "end": "212159"
  },
  {
    "text": "operating system very easily Docker has a great amount of tools and workflows",
    "start": "212159",
    "end": "217920"
  },
  {
    "text": "that really allow you to build images and deployment workflows and they",
    "start": "217920",
    "end": "223439"
  },
  {
    "text": "allow people to interact with and manage these containers in a userfriendly way and this has made containers much",
    "start": "223439",
    "end": "230480"
  },
  {
    "text": "more broadly available so Docker images make it really easy to Define what is",
    "start": "230480",
    "end": "236599"
  },
  {
    "text": "going to run in a container and what versions there are for the application and you can put this into source code",
    "start": "236599",
    "end": "244040"
  },
  {
    "text": "and these concepts of containers really allow you to uh enable Automation in",
    "start": "244040",
    "end": "250760"
  },
  {
    "text": "your environment so you can really Define your app and you can build and share that image across your",
    "start": "250760",
    "end": "258680"
  },
  {
    "start": "258000",
    "end": "385000"
  },
  {
    "text": "organization some of the advantages of containers which is why a lot of people have a great deal of interest in them is",
    "start": "258880",
    "end": "265040"
  },
  {
    "text": "that they're portable um so the first I mean the image is consistent and",
    "start": "265040",
    "end": "270400"
  },
  {
    "text": "immutable and really no matter where you run it it's going to be the same behavior um so I don't know how many of",
    "start": "270400",
    "end": "278000"
  },
  {
    "text": "you work in software development and have built something on your machine and you run it and you say okay it works",
    "start": "278000",
    "end": "283360"
  },
  {
    "text": "just fine on my laptop on my workstation but then you try to actually deploy this",
    "start": "283360",
    "end": "288440"
  },
  {
    "text": "into production and the server is just different um this was my life prior to",
    "start": "288440",
    "end": "293759"
  },
  {
    "text": "coming to AWS and some that's the first reason why we chose to look into Docker containers um when I was working in",
    "start": "293759",
    "end": "300520"
  },
  {
    "text": "software development um and this is really a primary driver for people looking into Docker um the other thing",
    "start": "300520",
    "end": "307880"
  },
  {
    "text": "is that containers are very flexible so you can really create clean and",
    "start": "307880",
    "end": "313400"
  },
  {
    "text": "reproducible environments very quickly and they really make it easy to",
    "start": "313400",
    "end": "319000"
  },
  {
    "text": "decompose an app into smaller chunks such as microservices um microservices we'll",
    "start": "319000",
    "end": "325960"
  },
  {
    "text": "talk about in a minute but this uh really streamlined both the deployment",
    "start": "325960",
    "end": "331639"
  },
  {
    "text": "and the infrastructure management that you have to worry about containers are also very fast when",
    "start": "331639",
    "end": "338440"
  },
  {
    "text": "I was talking about building SAS or PA you can imagine that if I'm trying to um you know create an instantiation of an",
    "start": "338440",
    "end": "345720"
  },
  {
    "text": "application well I already have the operating system running right so I don't have to worry about starting up a",
    "start": "345720",
    "end": "352639"
  },
  {
    "text": "whole new Os or a whole new stack for a customer so this also uh has benefits",
    "start": "352639",
    "end": "359680"
  },
  {
    "text": "for Ops so if you are just maintaining this single image um the it can go and",
    "start": "359680",
    "end": "366639"
  },
  {
    "text": "update that base image and all you really have to worry about is building your code finally you know containers",
    "start": "366639",
    "end": "372440"
  },
  {
    "text": "are very efficient and you can really allocate the exact memory resources CPU",
    "start": "372440",
    "end": "377639"
  },
  {
    "text": "that you want um and this really makes running your underlying infrastructure a",
    "start": "377639",
    "end": "383080"
  },
  {
    "text": "lot more efficient so I many of you may have",
    "start": "383080",
    "end": "388840"
  },
  {
    "start": "385000",
    "end": "580000"
  },
  {
    "text": "heard this story before but if not um I'll just tell it again so 10 years ago",
    "start": "388840",
    "end": "394280"
  },
  {
    "text": "amazon.com actually was one large monolithic application and I'm sure many",
    "start": "394280",
    "end": "399599"
  },
  {
    "text": "of you have a similar um experience in your own environment but in order to",
    "start": "399599",
    "end": "405160"
  },
  {
    "text": "scale Amazon realized that they needed to change this apart change break this",
    "start": "405160",
    "end": "410479"
  },
  {
    "text": "apart because quite simply you know they had certain uh services such as the",
    "start": "410479",
    "end": "416000"
  },
  {
    "text": "order Management Service or the recommendations service or the user I UI",
    "start": "416000",
    "end": "421280"
  },
  {
    "text": "service and each of these Services had different needs from an infrastructure",
    "start": "421280",
    "end": "426879"
  },
  {
    "text": "perspective and they weren't able to scale the website as efficiently as they",
    "start": "426879",
    "end": "432479"
  },
  {
    "text": "wanted they also couldn't push out deployments as quickly as they wanted to you can imagine when you have this one",
    "start": "432479",
    "end": "439120"
  },
  {
    "text": "massive codebase you have to run all these tests and you just can't deploy and produce uh new features as quickly",
    "start": "439120",
    "end": "446160"
  },
  {
    "text": "as you want so in order to scale Amazon compos their application into individual",
    "start": "446160",
    "end": "452280"
  },
  {
    "text": "microservices which could be deployed separately so this allowed it to scale",
    "start": "452280",
    "end": "457400"
  },
  {
    "text": "each service separately for example let's say a recommendation engine that may be very memory intensive you may",
    "start": "457400",
    "end": "463800"
  },
  {
    "text": "want to have a set of instances that really meet that workload so and this",
    "start": "463800",
    "end": "469120"
  },
  {
    "text": "also was not just a codebase change this was really a cultural change as well and",
    "start": "469120",
    "end": "474199"
  },
  {
    "text": "it didn't happen overnight took some time so this is something where in order",
    "start": "474199",
    "end": "480199"
  },
  {
    "text": "to do this they decomposed their uh their software teams into smaller teams",
    "start": "480199",
    "end": "485479"
  },
  {
    "text": "we call them two Pizza teams um and then those those teams ended up owning a",
    "start": "485479",
    "end": "490840"
  },
  {
    "text": "service and they basically were able to deploy and all they had to worry about was essentially what their service",
    "start": "490840",
    "end": "497479"
  },
  {
    "text": "delivered and they didn't have to worry about any dependencies so as Services devolve into these",
    "start": "497479",
    "end": "505599"
  },
  {
    "text": "microservices containers are actually a very natural thing for this um and at",
    "start": "505599",
    "end": "511400"
  },
  {
    "text": "the mini conference down at the Mirage on uh Thursday there's actually one of",
    "start": "511400",
    "end": "516440"
  },
  {
    "text": "the sessions that you might want to look into is uh running microservices on Amazon ECS and then I'll have a deeper",
    "start": "516440",
    "end": "523640"
  },
  {
    "text": "dive into when you decide that microservices is the architecture pattern that you want to go down how to",
    "start": "523640",
    "end": "529800"
  },
  {
    "text": "integrate that with ECS so containers basically make it very",
    "start": "529800",
    "end": "535519"
  },
  {
    "text": "simple to model and the application and all of its dependencies are packaged into a sing a simple image with using a",
    "start": "535519",
    "end": "542959"
  },
  {
    "text": "Docker file and this can containers can support any image I'm sorry any",
    "start": "542959",
    "end": "549200"
  },
  {
    "text": "application in any language and this image is a versioned artifact that you can then store in",
    "start": "549200",
    "end": "555040"
  },
  {
    "text": "Source control and it really makes applications very easy to test and deploy because",
    "start": "555040",
    "end": "562279"
  },
  {
    "text": "they are basically just building from a single artifact and really containers simplify",
    "start": "562279",
    "end": "568360"
  },
  {
    "text": "your deployments so stateless servers really allow for a natural uh deployment",
    "start": "568360",
    "end": "574959"
  },
  {
    "text": "and allow you to reduce dependency conflicts that may exist in your",
    "start": "574959",
    "end": "580519"
  },
  {
    "start": "580000",
    "end": "605000"
  },
  {
    "text": "environment so let's talk about scheduling containers now that we know why we want to have them and what they",
    "start": "580920",
    "end": "586480"
  },
  {
    "text": "are let's talk about scheduling them I don't know if anyone's schedule actually looks like this if it does I'm very",
    "start": "586480",
    "end": "593079"
  },
  {
    "text": "jealous of you but um so scheduling a single resource is obviously pretty easy",
    "start": "593079",
    "end": "599519"
  },
  {
    "text": "I'm sure how many people have actually just run a single container on their laptop it's quite quite simple but",
    "start": "599519",
    "end": "606079"
  },
  {
    "start": "605000",
    "end": "649000"
  },
  {
    "text": "running a a cluster is actually very challenging so if you're going to run a",
    "start": "606079",
    "end": "612279"
  },
  {
    "text": "cluster you're going to need to know things such as how what do I do if a container dies do I reschedule it what",
    "start": "612279",
    "end": "618839"
  },
  {
    "text": "do I do if I want to put resources behind an elastic load balancer or any",
    "start": "618839",
    "end": "624079"
  },
  {
    "text": "other kind of load balancer how do I roll out new versions of my software um and you know am I",
    "start": "624079",
    "end": "630760"
  },
  {
    "text": "going to have to go and buy another piece of software to manage my cluster or manage uh another piece of software",
    "start": "630760",
    "end": "637839"
  },
  {
    "text": "so these are some of the questions and challenges that some of our customers who are running Docker on AWS already",
    "start": "637839",
    "end": "644440"
  },
  {
    "text": "had for us and this is what led us to build uh ECS so quite simply Amazon cont ec2",
    "start": "644440",
    "end": "652480"
  },
  {
    "text": "container service is a highly scalable and high performance container Management Service and you can use",
    "start": "652480",
    "end": "658600"
  },
  {
    "text": "Amazon e s to schedule the placement of your containers across a cluster and you can also integrate your own scheduler or",
    "start": "658600",
    "end": "665959"
  },
  {
    "text": "third-party scheduler to meet particular business needs specific",
    "start": "665959",
    "end": "672720"
  },
  {
    "text": "requirements so let's do a overview of what the components are of ECS",
    "start": "672839",
    "end": "679800"
  },
  {
    "start": "679000",
    "end": "708000"
  },
  {
    "text": "okay so first we start with a resource manager and the resource manager is",
    "start": "679800",
    "end": "685360"
  },
  {
    "text": "responsible for keeping track of resources such as memory CPU uh and storage that are available on",
    "start": "685360",
    "end": "693959"
  },
  {
    "text": "the cluster at any given time so you can see here we have uh resources of ec2",
    "start": "693959",
    "end": "700399"
  },
  {
    "text": "instances and they are all running Docker and they are spread across two",
    "start": "700399",
    "end": "705519"
  },
  {
    "text": "availability zones so the scheduler is responsible",
    "start": "705519",
    "end": "712079"
  },
  {
    "start": "708000",
    "end": "760000"
  },
  {
    "text": "for scheduling containers and tasks for execution so the scheduler will contains",
    "start": "712079",
    "end": "718240"
  },
  {
    "text": "algorithms for assigning tasks to nodes on the cluster based on resources that",
    "start": "718240",
    "end": "723279"
  },
  {
    "text": "happen to be available so in order to properly schedule you'll have to know",
    "start": "723279",
    "end": "728680"
  },
  {
    "text": "things such as what are the constraints that I have such as memory and CPU and how do I find resources in my",
    "start": "728680",
    "end": "736519"
  },
  {
    "text": "cluster to meet those constraints then simply I request a resource and then",
    "start": "736519",
    "end": "742680"
  },
  {
    "text": "confirm that the resource is available and that my container is scheduled and the scheduler is also responsible for",
    "start": "742680",
    "end": "749680"
  },
  {
    "text": "the task execution life cycle so it it knows if a task is alive or if it's dead",
    "start": "749680",
    "end": "757279"
  },
  {
    "text": "and if it's dead does it need to get rescheduled so EC's solution for cluster",
    "start": "757279",
    "end": "765279"
  },
  {
    "text": "management starts with this cluster management engine and what this cluster management",
    "start": "765279",
    "end": "771160"
  },
  {
    "text": "engine does is it has a pool it looks at this uh set of resources as simply a",
    "start": "771160",
    "end": "777440"
  },
  {
    "text": "pool of CPU memory and networking resources that it has available and",
    "start": "777440",
    "end": "783519"
  },
  {
    "text": "really the easy the instances themselves are really just easy2 instances that you can go on SSH into that you own um and",
    "start": "783519",
    "end": "791680"
  },
  {
    "text": "they are just checked into your cluster so you can have them run the operating",
    "start": "791680",
    "end": "797480"
  },
  {
    "text": "system that you want you can have them configured exactly how you want um and",
    "start": "797480",
    "end": "802600"
  },
  {
    "text": "this CL this is dynamically scalable so you can go and basically add instances to your cluster from you can have a one",
    "start": "802600",
    "end": "810199"
  },
  {
    "text": "instance cluster you can have as much as a you know you can have a thousand instance cluster if you'd like and you",
    "start": "810199",
    "end": "815880"
  },
  {
    "text": "can also segment your cluster for your needs such as Dev test",
    "start": "815880",
    "end": "822079"
  },
  {
    "start": "821000",
    "end": "862000"
  },
  {
    "text": "Etc and so installed on each instance is the ECS agent okay and the ECS agent is",
    "start": "822079",
    "end": "829639"
  },
  {
    "text": "what allows the instances themselves to communicate with the cluster management engine and it processes ECS commands and",
    "start": "829639",
    "end": "837839"
  },
  {
    "text": "turns them into docker and so this instructs the ec2 instances",
    "start": "837839",
    "end": "843240"
  },
  {
    "text": "to start and stop containers and then monitors the used and available resources that it has across the",
    "start": "843240",
    "end": "850279"
  },
  {
    "text": "cluster the ECS agent is actually uh published on GitHub and is open source",
    "start": "850279",
    "end": "856560"
  },
  {
    "text": "so you know we look forward to any comments or pull requests that you have for the",
    "start": "856560",
    "end": "863279"
  },
  {
    "start": "862000",
    "end": "932000"
  },
  {
    "text": "agent and so to coordinate the cluster we actually need to have a single source",
    "start": "863279",
    "end": "869240"
  },
  {
    "text": "of Truth for all of the instances in the cluster and what tasks happen to be running on the instances and the",
    "start": "869240",
    "end": "876160"
  },
  {
    "text": "containers that make up the tasks so um at the heart of ECS is a key value store",
    "start": "876160",
    "end": "883000"
  },
  {
    "text": "that stores all of the state information for the cluster um so in order to be",
    "start": "883000",
    "end": "888680"
  },
  {
    "text": "really robust and scalable the key value store has to be distributed for durability and availability that being",
    "start": "888680",
    "end": "896120"
  },
  {
    "text": "said because it is distributed uh keeping data consistent is actually a",
    "start": "896120",
    "end": "901759"
  },
  {
    "text": "pretty big challenge right so for example you know if two developers go",
    "start": "901759",
    "end": "906800"
  },
  {
    "text": "and request all of the remaining memory resources from an ec2 from you know a certain ec2 instance for their container",
    "start": "906800",
    "end": "914399"
  },
  {
    "text": "um only one container can actually be scheduled and the other one is going to you know be notified that their requests",
    "start": "914399",
    "end": "920199"
  },
  {
    "text": "couldn't get completed so as such you know a form of concurrency control had",
    "start": "920199",
    "end": "925360"
  },
  {
    "text": "to be put into place in order to make sure that multiple State changes uh",
    "start": "925360",
    "end": "930560"
  },
  {
    "text": "don't conflict and so let's talk about uh exactly how we achieve this concurrency",
    "start": "930560",
    "end": "937839"
  },
  {
    "start": "932000",
    "end": "989000"
  },
  {
    "text": "control under the hood so ECS is built using uh one of Amazon's core",
    "start": "937839",
    "end": "943920"
  },
  {
    "text": "distributed systems Primitives um it's called a paxos based transactional journal-based data store this is a",
    "start": "943920",
    "end": "951000"
  },
  {
    "text": "little bit of a mouthful but essentially what this data store does is that it keeps all of the changes it keeps a",
    "start": "951000",
    "end": "958040"
  },
  {
    "text": "record of all of the changes uh made to a data entry so essentially any right to",
    "start": "958040",
    "end": "965399"
  },
  {
    "text": "the data store is committed as a transaction in the journal with a specific order-based",
    "start": "965399",
    "end": "971560"
  },
  {
    "text": "ID and then the current value of the data store is the sum of all of the",
    "start": "971560",
    "end": "976759"
  },
  {
    "text": "transactions made as recorded by that journal and if you do a read from the key Value Store essentially you're just",
    "start": "976759",
    "end": "983399"
  },
  {
    "text": "getting a snapshot in time of the journal",
    "start": "983399",
    "end": "989120"
  },
  {
    "start": "989000",
    "end": "1035000"
  },
  {
    "text": "so in order for a right to succeed the right that gets proposed has to be the latest transaction since the last read",
    "start": "991279",
    "end": "998720"
  },
  {
    "text": "so if a user made a read and subsequently several rights occurred um then they tried to write based on that",
    "start": "998720",
    "end": "1005959"
  },
  {
    "text": "last ID that they had this R isn't going to succeed okay and so this primitive",
    "start": "1005959",
    "end": "1011680"
  },
  {
    "text": "really allows ECS to store its cluster data uh with optimistic concurrency so",
    "start": "1011680",
    "end": "1018920"
  },
  {
    "text": "so at no point during any reads or write to the key value store is the data ever",
    "start": "1018920",
    "end": "1025319"
  },
  {
    "text": "pessimistically locked and this really allows ECS to be high availability high",
    "start": "1025319",
    "end": "1030880"
  },
  {
    "text": "throughput and very low latency with regards to response",
    "start": "1030880",
    "end": "1036079"
  },
  {
    "start": "1035000",
    "end": "1077000"
  },
  {
    "text": "time another thing that's really unique about ECS is the API layer so we have",
    "start": "1036240",
    "end": "1043319"
  },
  {
    "text": "decoupled the container scheduling from the cluster management and so Amazon ECS",
    "start": "1043319",
    "end": "1049559"
  },
  {
    "text": "cluster manager is exposed through a set of API actions which allows you to",
    "start": "1049559",
    "end": "1055799"
  },
  {
    "text": "really access any of the cluster State information B that is stored in that key",
    "start": "1055799",
    "end": "1061280"
  },
  {
    "text": "value store so you can basically use the API to tie into other schedulers if",
    "start": "1061280",
    "end": "1067960"
  },
  {
    "text": "you'd like or also connect your cicd system if you want to deploy do a",
    "start": "1067960",
    "end": "1073200"
  },
  {
    "text": "deployment workflow with containers",
    "start": "1073200",
    "end": "1077720"
  },
  {
    "text": "and so the API allows you to connect different schedulers as I mentioned and it also provides logic around how to",
    "start": "1079520",
    "end": "1086120"
  },
  {
    "text": "stop and start containers um and ECS actually is designed to share the state",
    "start": "1086120",
    "end": "1093640"
  },
  {
    "text": "of the cluster so that you can use any variety of of scheduling tools that you",
    "start": "1093640",
    "end": "1099280"
  },
  {
    "text": "might need so some people use bin packing as an algorithm for putting containers on a instance so that they",
    "start": "1099280",
    "end": "1106440"
  },
  {
    "text": "have as many containers on one instance before they start going to another some prefer like more of a spread if you need",
    "start": "1106440",
    "end": "1112640"
  },
  {
    "text": "a highly available application you may want to do a spread algorithm those are",
    "start": "1112640",
    "end": "1118320"
  },
  {
    "text": "some examples of the different kinds of scheduling you can do um with a third party",
    "start": "1118320",
    "end": "1124759"
  },
  {
    "text": "scheduler so let's talk about some of the benefits of using ECS to manage your",
    "start": "1125840",
    "end": "1131440"
  },
  {
    "start": "1131000",
    "end": "1162000"
  },
  {
    "text": "containers so again there's really nothing to run um this is a managed service so you don't have to worry about",
    "start": "1131440",
    "end": "1137919"
  },
  {
    "text": "the underlying e to infrastructure and keeping that patched um and also it is a",
    "start": "1137919",
    "end": "1145240"
  },
  {
    "text": "complete it has complete State Management um and it manages all of your",
    "start": "1145240",
    "end": "1150559"
  },
  {
    "text": "cluster State and all of your containers and it has it built-in control and monitoring and you can really scale from",
    "start": "1150559",
    "end": "1157880"
  },
  {
    "text": "one contain you know tens of containers to thousands of containers uh with",
    "start": "1157880",
    "end": "1163320"
  },
  {
    "start": "1162000",
    "end": "1212000"
  },
  {
    "text": "ECS so earlier this year we actually ran a load test um and over over a 3-day",
    "start": "1163320",
    "end": "1169480"
  },
  {
    "text": "period we scaled a cluster um from about 200 instances to over a thousand as",
    "start": "1169480",
    "end": "1176000"
  },
  {
    "text": "represented by the purple line if you can see in this graph here and the green line shows the 99 percentile latency",
    "start": "1176000",
    "end": "1184240"
  },
  {
    "text": "response and the red line is the 50 percentile latency response and as you",
    "start": "1184240",
    "end": "1189760"
  },
  {
    "text": "can see that even as the cluster scaled up that ECS the response time for ECS",
    "start": "1189760",
    "end": "1195480"
  },
  {
    "text": "stayed pretty steady throughout um which kind of shows hopefully shows you that you know ECS will is stable and will",
    "start": "1195480",
    "end": "1202600"
  },
  {
    "text": "scale your cluster and and have the same response time essentially um no matter",
    "start": "1202600",
    "end": "1209080"
  },
  {
    "text": "the size that you're working with so ECS actually has two schedulers",
    "start": "1209080",
    "end": "1217120"
  },
  {
    "start": "1212000",
    "end": "1247000"
  },
  {
    "text": "that are built in uh one is a scheduler for long running applications and services and then the other is a",
    "start": "1217120",
    "end": "1224000"
  },
  {
    "text": "scheduler that is for batch jobs so shorter lived processes",
    "start": "1224000",
    "end": "1229400"
  },
  {
    "text": "and because ECS provides you with the power of apis it really allows you to integrate those other custom schedulers",
    "start": "1229400",
    "end": "1236840"
  },
  {
    "text": "as well as open source schedulers as you may uh choose and all of these really",
    "start": "1236840",
    "end": "1242600"
  },
  {
    "text": "allow you to have a very flexible methods to do scheduling on",
    "start": "1242600",
    "end": "1248120"
  },
  {
    "start": "1247000",
    "end": "1303000"
  },
  {
    "text": "ECS more importantly though Amazon ECS is actually built to work with the AWS services that you're used to using so",
    "start": "1248480",
    "end": "1255480"
  },
  {
    "text": "you can set up your cluster inside of a VPC um with security groups to control",
    "start": "1255480",
    "end": "1260679"
  },
  {
    "text": "network access as you need and you can store persistent information uh with EBS",
    "start": "1260679",
    "end": "1267000"
  },
  {
    "text": "volumes um that you that you might need to have in your cluster and of course you can rout traffic to your containers",
    "start": "1267000",
    "end": "1274039"
  },
  {
    "text": "using an elastic load balancer or if you choose one of our new application load balancers um and of course there is",
    "start": "1274039",
    "end": "1281080"
  },
  {
    "text": "cloud trail inte integration with ECS so you can see any of the changes to your",
    "start": "1281080",
    "end": "1287039"
  },
  {
    "text": "cluster all logged in the in cloud trail there's also a native support for cloud",
    "start": "1287039",
    "end": "1293480"
  },
  {
    "text": "watch um so that you can get alarmed on certain um states of your cluster and",
    "start": "1293480",
    "end": "1299640"
  },
  {
    "text": "you can actually respond to that as well so again the apis are",
    "start": "1299640",
    "end": "1308799"
  },
  {
    "start": "1303000",
    "end": "1361000"
  },
  {
    "text": "comprehensive and they really allow you to make ECS extensible for your needs um",
    "start": "1308799",
    "end": "1314200"
  },
  {
    "text": "and again I would recommend that you look at the container mini conference I there's a session actually with Netflix",
    "start": "1314200",
    "end": "1320679"
  },
  {
    "text": "talking about how they're using ECS in their environment with a lot of um customization and so that would be an if",
    "start": "1320679",
    "end": "1327919"
  },
  {
    "text": "you want to dive in further as far as how ECS can really be extensible to your environment something to check out um",
    "start": "1327919",
    "end": "1336360"
  },
  {
    "text": "and then also we have an ECS CLI to allow you to uh work with our ECS your",
    "start": "1336360",
    "end": "1343799"
  },
  {
    "text": "ECS cluster and this is open source actually um as well on GitHub and the",
    "start": "1343799",
    "end": "1349320"
  },
  {
    "text": "ECS CLI uh it supports Docker compose so you can write you can run Docker compose",
    "start": "1349320",
    "end": "1355559"
  },
  {
    "text": "on ECS without writing a task definition um and it's really easy to",
    "start": "1355559",
    "end": "1361640"
  },
  {
    "start": "1361000",
    "end": "1399000"
  },
  {
    "text": "use so as you can see here in the orange this is the sum total of what makes up",
    "start": "1361640",
    "end": "1366919"
  },
  {
    "text": "ECS and uh it really allows you to reduce the the amount of code that you",
    "start": "1366919",
    "end": "1372200"
  },
  {
    "text": "need to write in order to go from your idea into reality um and implementation",
    "start": "1372200",
    "end": "1377480"
  },
  {
    "text": "when building these distributed systems so much of the undifferentiated heavy lifting is and housekeeping is really",
    "start": "1377480",
    "end": "1384559"
  },
  {
    "text": "abstracted behind this set of API so let's talk a little bit about",
    "start": "1384559",
    "end": "1391720"
  },
  {
    "text": "services so you know how do you get your applications in containers distributed",
    "start": "1391720",
    "end": "1397440"
  },
  {
    "text": "across your cluster so you can model your",
    "start": "1397440",
    "end": "1402559"
  },
  {
    "start": "1399000",
    "end": "1436000"
  },
  {
    "text": "application using a task definition and everything that's in a task definition",
    "start": "1402559",
    "end": "1407880"
  },
  {
    "text": "runs on the same instance and really the file defines the containers that you want to run together um so a task",
    "start": "1407880",
    "end": "1415559"
  },
  {
    "text": "definition lets you specify Docker Concepts such as links to establish you know network channels behind the",
    "start": "1415559",
    "end": "1421600"
  },
  {
    "text": "containers and run volumes behind the containers as you might need and the task definitions are",
    "start": "1421600",
    "end": "1428520"
  },
  {
    "text": "tracked by name and revision just like your source code um and they are versioned artifacts that you can roll",
    "start": "1428520",
    "end": "1434159"
  },
  {
    "text": "back to if you need to so so in order to create a task",
    "start": "1434159",
    "end": "1439720"
  },
  {
    "start": "1436000",
    "end": "1489000"
  },
  {
    "text": "definition here's just a quick shot of the console and what it looks like um you specify the docker image for use",
    "start": "1439720",
    "end": "1446120"
  },
  {
    "text": "with your container and you know you can specify here resources such as CPU and",
    "start": "1446120",
    "end": "1452440"
  },
  {
    "text": "memory and ports and volumes for each container and you can specify what",
    "start": "1452440",
    "end": "1458240"
  },
  {
    "text": "commands run when the container starts up there's also maybe you can see this",
    "start": "1458240",
    "end": "1463440"
  },
  {
    "text": "an essential flag which you're going to want to check for at least one of the",
    "start": "1463440",
    "end": "1469080"
  },
  {
    "text": "the containers because that way you know if something happens where the task dies",
    "start": "1469080",
    "end": "1475320"
  },
  {
    "text": "it will know that your e your container needs to get",
    "start": "1475320",
    "end": "1480919"
  },
  {
    "text": "restarted so underneath the T the task definition is basically all",
    "start": "1482960",
    "end": "1489640"
  },
  {
    "text": "Json so once your task definition is created uh scheduling a task definition",
    "start": "1490559",
    "end": "1495919"
  },
  {
    "text": "onto an instance with available resources is goes and creates a task which is a running instantiation of your",
    "start": "1495919",
    "end": "1502919"
  },
  {
    "text": "task definition so just to get the terminology down so you know there are a few ways that you can go and get it onto",
    "start": "1502919",
    "end": "1510240"
  },
  {
    "text": "the instance um you can run the task you can start the task or you can create a",
    "start": "1510240",
    "end": "1515720"
  },
  {
    "text": "service which we'll talk about in a minute um that will handle Distributing it across your",
    "start": "1515720",
    "end": "1521020"
  },
  {
    "text": "[Music] cluster so you know as we mentioned a",
    "start": "1521020",
    "end": "1526080"
  },
  {
    "text": "task is essentially a unit of work and a grouping of related containers and you",
    "start": "1526080",
    "end": "1532279"
  },
  {
    "text": "can have a task that just has one container um or you can have up to 10 that really work together on a single",
    "start": "1532279",
    "end": "1538360"
  },
  {
    "text": "machine um so for example you know you could start with maybe engine X in front of rails with perhaps a redice cluster",
    "start": "1538360",
    "end": "1546440"
  },
  {
    "text": "behind it and that would all go into one task definition um and you can really",
    "start": "1546440",
    "end": "1551799"
  },
  {
    "text": "have as many you know tasks on an instance that will fit based on the scheduling algorithm that you have",
    "start": "1551799",
    "end": "1560240"
  },
  {
    "start": "1558000",
    "end": "1590000"
  },
  {
    "text": "so ECS has a scheduler that is good for long running uh applications called the",
    "start": "1560760",
    "end": "1566360"
  },
  {
    "text": "service scheduler and basically you reference a task",
    "start": "1566360",
    "end": "1571440"
  },
  {
    "text": "definition and the number of tasks that you want to run and that you can optionally go and place behind an elb if",
    "start": "1571440",
    "end": "1578080"
  },
  {
    "text": "you'd like um so then the scheduler will go and launch the number of task that",
    "start": "1578080",
    "end": "1583240"
  },
  {
    "text": "you request so you can also configure things such as autoscaling for your",
    "start": "1583240",
    "end": "1588760"
  },
  {
    "text": "cluster if you'd like and the scheduler will essentially",
    "start": "1588760",
    "end": "1593840"
  },
  {
    "start": "1590000",
    "end": "1612000"
  },
  {
    "text": "maintain the number of tasks that you want to run and have it automatically load balance across your availability",
    "start": "1593840",
    "end": "1601600"
  },
  {
    "text": "zones the cluster scheduler this long running service scheduler is a aware um",
    "start": "1601600",
    "end": "1607520"
  },
  {
    "text": "so that way it will balance things across your infrastructure and really scaling up and",
    "start": "1607520",
    "end": "1614679"
  },
  {
    "start": "1612000",
    "end": "1632000"
  },
  {
    "text": "down is fairly simple essentially you just tell the scheduler how many tasks that you need and then the scheduler",
    "start": "1614679",
    "end": "1621080"
  },
  {
    "text": "goes and takes care of launching those tasks and it will terminate tasks also",
    "start": "1621080",
    "end": "1626360"
  },
  {
    "text": "if you reduce if you choose to scale",
    "start": "1626360",
    "end": "1630720"
  },
  {
    "text": "down so if you look at this architecture diagram you can kind of see how the the",
    "start": "1633440",
    "end": "1639520"
  },
  {
    "text": "concepts that you know and love with uh autoscaling with instances that were",
    "start": "1639520",
    "end": "1644880"
  },
  {
    "text": "they're getting applied to Containers right so you can essentially use ECS to",
    "start": "1644880",
    "end": "1650559"
  },
  {
    "text": "respond to Cloud watch metrics to scale your service up as you need um and you",
    "start": "1650559",
    "end": "1656679"
  },
  {
    "text": "can have it also even if you're doing batch jobs maybe you maybe you're not doing a service and you just want it to",
    "start": "1656679",
    "end": "1662720"
  },
  {
    "text": "respond and um Scale based on perhaps Q depth or something like that in an sqsq",
    "start": "1662720",
    "end": "1670159"
  },
  {
    "text": "um and you just need to launch more containers um to do that um so these the",
    "start": "1670159",
    "end": "1675320"
  },
  {
    "text": "integration with cloudwatch is making running containers um even easier much",
    "start": "1675320",
    "end": "1681440"
  },
  {
    "text": "like you're used to already with managing applications with um ec2 and",
    "start": "1681440",
    "end": "1688399"
  },
  {
    "start": "1688000",
    "end": "1721000"
  },
  {
    "text": "autoscaling and again when you update a service um you basically deploy the new",
    "start": "1688880",
    "end": "1695039"
  },
  {
    "text": "version and the scheduler will go and launch tasks with that new version draining out the other the old",
    "start": "1695039",
    "end": "1703960"
  },
  {
    "text": "connections so essentially when the the old containers are moved off and then",
    "start": "1705519",
    "end": "1711279"
  },
  {
    "text": "the new containers are launched um the old ones basically uh drain off the elb",
    "start": "1711279",
    "end": "1717440"
  },
  {
    "text": "and you're left with the new version of your application we also have a few uh",
    "start": "1717440",
    "end": "1724480"
  },
  {
    "start": "1721000",
    "end": "1740000"
  },
  {
    "text": "Concepts such as minimum healthy percent and um maximum uh percent which really allows",
    "start": "1724480",
    "end": "1731559"
  },
  {
    "text": "you to determine if I'm going to run a cluster how what is the maximum number of containers I'm going to have this is",
    "start": "1731559",
    "end": "1737720"
  },
  {
    "text": "much into to you know am I going to do a blue green deployment or am I going to do a rolling deployment across my",
    "start": "1737720",
    "end": "1744960"
  },
  {
    "start": "1740000",
    "end": "1796000"
  },
  {
    "text": "cluster so if you have uh example here if you have minimum healthy percentage",
    "start": "1744960",
    "end": "1750000"
  },
  {
    "text": "of 50 and then a maximum of 100 this is akin to doing a rolling deployment where",
    "start": "1750000",
    "end": "1755760"
  },
  {
    "text": "basically you take half of your you apply half the changes to your cluster and then the other",
    "start": "1755760",
    "end": "1762799"
  },
  {
    "text": "half uh you can also do this without reducing capacity um and so so here in",
    "start": "1762799",
    "end": "1768799"
  },
  {
    "text": "this case you can set minimum of 100 maximum of 200 kind of akin to doing a a",
    "start": "1768799",
    "end": "1774080"
  },
  {
    "text": "blue green uh deployment with ECS okay so let me just switch here I'm",
    "start": "1774080",
    "end": "1782799"
  },
  {
    "text": "going to just show you a example of running a few uh commands here",
    "start": "1782799",
    "end": "1790679"
  },
  {
    "text": "with",
    "start": "1791080",
    "end": "1794080"
  },
  {
    "start": "1796000",
    "end": "1860000"
  },
  {
    "text": "ECS okay so earlier today as soon as I get my mouse going",
    "start": "1796760",
    "end": "1802640"
  },
  {
    "text": "here I set up a",
    "start": "1802640",
    "end": "1806399"
  },
  {
    "text": "cluster here we go",
    "start": "1816799",
    "end": "1821158"
  },
  {
    "text": "okay so can you all see that sorry my my computer's acting a little bit strange",
    "start": "1831600",
    "end": "1837880"
  },
  {
    "text": "here um so earlier today I set up a cluster basically uh this was very very",
    "start": "1837880",
    "end": "1844200"
  },
  {
    "text": "simple to set up um if you download the ECS CLI and you configure it to connect",
    "start": "1844200",
    "end": "1850399"
  },
  {
    "text": "to your uh instance I'm sorry to your own AWS account and it's a very simple",
    "start": "1850399",
    "end": "1857440"
  },
  {
    "text": "um command here so essentially it's just ECS CLI up",
    "start": "1857440",
    "end": "1864840"
  },
  {
    "start": "1860000",
    "end": "1948000"
  },
  {
    "text": "and then you give it your key pair uh and say how many instances do I want to",
    "start": "1864840",
    "end": "1869960"
  },
  {
    "text": "set up in my cluster and what kind of um instance type do I have so I picked a T2",
    "start": "1869960",
    "end": "1875960"
  },
  {
    "text": "mediums to set up my cluster and then if I go in here I can see that right now I",
    "start": "1875960",
    "end": "1882120"
  },
  {
    "text": "have two instances checked into my cluster and they are both active um but",
    "start": "1882120",
    "end": "1887480"
  },
  {
    "text": "what I'm going to do actually is put these behind an application load balancer to start because I think",
    "start": "1887480",
    "end": "1892639"
  },
  {
    "text": "that'll be um a more realistic uh view of exactly what kind of service",
    "start": "1892639",
    "end": "1900039"
  },
  {
    "text": "that we want to have with an",
    "start": "1900039",
    "end": "1903080"
  },
  {
    "text": "ALB okay actually I did this earlier so you can see here that in my elastic load",
    "start": "1908159",
    "end": "1914639"
  },
  {
    "text": "I'm sorry in my application load balancer I have have two instances inside of",
    "start": "1914639",
    "end": "1922039"
  },
  {
    "text": "it so what I'm going to do is I'm going to start with the ECS CLI and I'm going",
    "start": "1922760",
    "end": "1927919"
  },
  {
    "text": "to take a Docker compos file that I've already created",
    "start": "1927919",
    "end": "1934158"
  },
  {
    "start": "1948000",
    "end": "1983000"
  },
  {
    "text": "okay so this is a really really simple compos file and all it basically says is",
    "start": "1949880",
    "end": "1955880"
  },
  {
    "text": "look for this the latest which I've tagged latest image in my ECR repository",
    "start": "1955880",
    "end": "1962760"
  },
  {
    "text": "so is everyone familiar with ECR if not ECR is the ec2 container service",
    "start": "1962760",
    "end": "1968480"
  },
  {
    "text": "repository um much like U Docker Hub it's essentially a private repo for your",
    "start": "1968480",
    "end": "1974679"
  },
  {
    "text": "images so this is a very simple pH HP file that I've put into my ECR",
    "start": "1974679",
    "end": "1982919"
  },
  {
    "start": "1983000",
    "end": "2005000"
  },
  {
    "text": "repository and the first thing I'm going to do is I'm just going to start this",
    "start": "1984279",
    "end": "1990799"
  },
  {
    "text": "service and so the container the ECS uh cluster is responding and it's saying",
    "start": "1996600",
    "end": "2002519"
  },
  {
    "text": "okay um I'm going to start your container and if I go into the ec2",
    "start": "2002519",
    "end": "2008880"
  },
  {
    "start": "2005000",
    "end": "2027000"
  },
  {
    "text": "container service home um homepage I can see now I have a running task and I have",
    "start": "2008880",
    "end": "2015840"
  },
  {
    "text": "a repo here that I've set up in advance that has the latest version of",
    "start": "2015840",
    "end": "2023279"
  },
  {
    "text": "this which I built this morning so now that I have that service",
    "start": "2023279",
    "end": "2031559"
  },
  {
    "start": "2027000",
    "end": "2129000"
  },
  {
    "text": "up I'm actually going to scale it to be you know two container instances",
    "start": "2031559",
    "end": "2038840"
  },
  {
    "text": "my paste is not working right I'm not connecting",
    "start": "2061320",
    "end": "2069720"
  },
  {
    "text": "Ed there it is haha thank you I needed to get rid of that other one that was dead so this is",
    "start": "2074119",
    "end": "2082399"
  },
  {
    "text": "better yeah so okay now we have this service where we basically are running",
    "start": "2082919",
    "end": "2090200"
  },
  {
    "text": "a we have a pending task if I give this one more second it'll become a running task",
    "start": "2090200",
    "end": "2097480"
  },
  {
    "text": "okay so going in here if I go to my ec2",
    "start": "2098720",
    "end": "2105640"
  },
  {
    "text": "instance should actually just go to the low",
    "start": "2112960",
    "end": "2117240"
  },
  {
    "text": "balancer okay",
    "start": "2121880",
    "end": "2125880"
  },
  {
    "start": "2129000",
    "end": "2152000"
  },
  {
    "text": "okay so again this is really just a very simple PHP application actually this is also available on GitHub if you want to",
    "start": "2131520",
    "end": "2138320"
  },
  {
    "text": "step through this to see what setting up the uh very simple uh container PHP app",
    "start": "2138320",
    "end": "2145079"
  },
  {
    "text": "looks like okay that being said so great we showed how we can run the container we can scale the container um next",
    "start": "2145079",
    "end": "2153480"
  },
  {
    "start": "2152000",
    "end": "2185000"
  },
  {
    "text": "actually let's try and act change this to be a a service instead instead of",
    "start": "2153480",
    "end": "2158560"
  },
  {
    "text": "Simply uh tasks that are running so I'm just going to take that one down I'm going to change this into a",
    "start": "2158560",
    "end": "2168680"
  },
  {
    "text": "service okay so now this is uh creating this as a service we should see it",
    "start": "2174400",
    "end": "2179599"
  },
  {
    "text": "reflected in the",
    "start": "2179599",
    "end": "2183480"
  },
  {
    "start": "2185000",
    "end": "2233000"
  },
  {
    "text": "console okay it's a service with a single running task um I'm actually going to scale that up to be at least",
    "start": "2186160",
    "end": "2192640"
  },
  {
    "text": "two tasks so it moves nicely across my my instances that are load balanced",
    "start": "2192640",
    "end": "2201560"
  },
  {
    "text": "so this task is now",
    "start": "2222520",
    "end": "2225720"
  },
  {
    "start": "2233000",
    "end": "2283000"
  },
  {
    "text": "pending okay so the ECS service has reached a stable State it's set the the",
    "start": "2234480",
    "end": "2239760"
  },
  {
    "text": "uh cluster up with a service that has two tasks and then basically if you're going",
    "start": "2239760",
    "end": "2245000"
  },
  {
    "text": "to go and make changes to your application it's actually fairly easy so um what I'm going to do",
    "start": "2245000",
    "end": "2251920"
  },
  {
    "text": "here is I'm going to just I have that this PHP application I'm just going",
    "start": "2251920",
    "end": "2257000"
  },
  {
    "text": "to CD into",
    "start": "2257200",
    "end": "2261240"
  },
  {
    "text": "it if I just change this PHP file I mean really it's just HTML but you get the",
    "start": "2264760",
    "end": "2269880"
  },
  {
    "text": "idea",
    "start": "2269880",
    "end": "2272880"
  },
  {
    "start": "2283000",
    "end": "2308000"
  },
  {
    "text": "um and then essentially you can just basically run a Docker build command on this um I'm going to run it with no cash",
    "start": "2284880",
    "end": "2292440"
  },
  {
    "text": "um you kind of it's kind of like doing a make clean if you're used to building things like in C or whatnot just to kind",
    "start": "2292440",
    "end": "2299079"
  },
  {
    "text": "of get any caching out of it um because when you're just making a small change it might not pick that change up but",
    "start": "2299079",
    "end": "2308200"
  },
  {
    "start": "2308000",
    "end": "2366000"
  },
  {
    "text": "so once Docker build completes um it's really simple to then just go and tag",
    "start": "2310079",
    "end": "2316240"
  },
  {
    "text": "this image and then push it into your repository and then deploy it across your cluster",
    "start": "2316240",
    "end": "2324359"
  },
  {
    "text": "okay there's about 10 steps here so it's almost",
    "start": "2339680",
    "end": "2344400"
  },
  {
    "text": "finished so if I do a listing of my Docker images I see here this latest one",
    "start": "2359240",
    "end": "2364319"
  },
  {
    "text": "was created just 3 seconds ago and I'm going to uh go and log in to my",
    "start": "2364319",
    "end": "2372520"
  },
  {
    "start": "2366000",
    "end": "2395000"
  },
  {
    "text": "AWS ECR my EC",
    "start": "2372520",
    "end": "2377880"
  },
  {
    "text": "repository so I'm logged into that and I'm going to go and tag this as a latest",
    "start": "2387200",
    "end": "2393040"
  },
  {
    "text": "version okay my repo it has a little bit of a",
    "start": "2393040",
    "end": "2400400"
  },
  {
    "start": "2395000",
    "end": "2409000"
  },
  {
    "text": "strange name it's it's a a long it's basically my account ID uh DKR and then",
    "start": "2400400",
    "end": "2406720"
  },
  {
    "text": "the region that it's in so I've tagged it and as the latest",
    "start": "2406720",
    "end": "2412960"
  },
  {
    "text": "and now I'm going to go and push it into my",
    "start": "2412960",
    "end": "2417519"
  },
  {
    "text": "repo then if we go into the Repository",
    "start": "2424720",
    "end": "2429319"
  },
  {
    "text": "take a",
    "start": "2430520",
    "end": "2432880"
  },
  {
    "start": "2439000",
    "end": "2458000"
  },
  {
    "text": "minute and we can see here this is the latest version much later than the ones",
    "start": "2439960",
    "end": "2445599"
  },
  {
    "text": "that I did earlier this morning 10:42 there you go so now that I have that",
    "start": "2445599",
    "end": "2450720"
  },
  {
    "text": "latest version in my repo um I basically want to go and",
    "start": "2450720",
    "end": "2456480"
  },
  {
    "text": "update the server so probably the easiest way to do that",
    "start": "2456480",
    "end": "2461920"
  },
  {
    "start": "2458000",
    "end": "2472000"
  },
  {
    "text": "and which we'll do just in the confines of this quick live demo is just I'm going to stop I'm going to scale the",
    "start": "2461920",
    "end": "2467920"
  },
  {
    "text": "service to zero and then scale it back up to two so um there are other ways to do this",
    "start": "2467920",
    "end": "2475800"
  },
  {
    "start": "2472000",
    "end": "2553000"
  },
  {
    "text": "and uh I recommend looking going to some of the other um sessions and then you",
    "start": "2475800",
    "end": "2480839"
  },
  {
    "text": "can see how when you're going to be doing this at scale um certainly you don't want to be manually",
    "start": "2480839",
    "end": "2487599"
  },
  {
    "text": "manually updating your service um that being said um for this purpose it's quickest and",
    "start": "2487599",
    "end": "2495079"
  },
  {
    "text": "easiest way to do that",
    "start": "2495079",
    "end": "2498280"
  },
  {
    "text": "so so as it's",
    "start": "2507440",
    "end": "2511200"
  },
  {
    "text": "updating for",
    "start": "2516240",
    "end": "2520240"
  },
  {
    "text": "so new version of application deployed um and again you can do this",
    "start": "2555400",
    "end": "2560520"
  },
  {
    "text": "with zero downtime um and we have uh some sessions that'll go through and talk about how to do that um that being",
    "start": "2560520",
    "end": "2567559"
  },
  {
    "text": "said about 15 minutes left if you have any questions um we can start going into",
    "start": "2567559",
    "end": "2573200"
  },
  {
    "text": "that but before let me just go back here",
    "start": "2573200",
    "end": "2579119"
  },
  {
    "text": "essentially remember to uh fill out your evaluation form and take a look also at some of these related sessions that are",
    "start": "2580000",
    "end": "2587440"
  },
  {
    "text": "available um at the mini comp on December 1st",
    "start": "2587440",
    "end": "2592960"
  }
]