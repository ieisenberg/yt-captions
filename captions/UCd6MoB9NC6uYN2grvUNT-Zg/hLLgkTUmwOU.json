[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "in this video we'll dive a little deeper",
    "start": "439",
    "end": "3330"
  },
  {
    "text": "into Kinesis data streams and some of",
    "start": "3330",
    "end": "7079"
  },
  {
    "text": "the key concepts behind it before we do",
    "start": "7079",
    "end": "12389"
  },
  {
    "text": "so let's do a quick recap of the key",
    "start": "12389",
    "end": "15120"
  },
  {
    "text": "components that make up streaming",
    "start": "15120",
    "end": "17400"
  },
  {
    "text": "analytics the first component is that of",
    "start": "17400",
    "end": "22769"
  },
  {
    "text": "the source as an example you can have",
    "start": "22769",
    "end": "25710"
  },
  {
    "text": "clickstream data coming from mobile",
    "start": "25710",
    "end": "27660"
  },
  {
    "text": "devices and web applications as a source",
    "start": "27660",
    "end": "31230"
  },
  {
    "text": "you then have a stream ingestion layer",
    "start": "31230",
    "end": "34010"
  },
  {
    "text": "so this is where you could have an app",
    "start": "34010",
    "end": "36660"
  },
  {
    "text": "tier that is collecting source data such",
    "start": "36660",
    "end": "39510"
  },
  {
    "text": "as clickstream data and then publishing",
    "start": "39510",
    "end": "41760"
  },
  {
    "text": "it to the stream storage layer in our",
    "start": "41760",
    "end": "43800"
  },
  {
    "text": "case that would be Kinesis data streams",
    "start": "43800",
    "end": "45450"
  },
  {
    "text": "and then there's the stream processing",
    "start": "45450",
    "end": "47910"
  },
  {
    "text": "layer and lastly there is the",
    "start": "47910",
    "end": "50160"
  },
  {
    "text": "destination okay here's a simple",
    "start": "50160",
    "end": "56520"
  },
  {
    "text": "architecture that brings all of these",
    "start": "56520",
    "end": "58680"
  },
  {
    "text": "components together and here what I'd",
    "start": "58680",
    "end": "63390"
  },
  {
    "text": "like to emphasize is the consumption",
    "start": "63390",
    "end": "66479"
  },
  {
    "text": "part of it on the far right and within",
    "start": "66479",
    "end": "69329"
  },
  {
    "text": "the AWS family you can see that you have",
    "start": "69329",
    "end": "73770"
  },
  {
    "text": "a number of options for consuming from",
    "start": "73770",
    "end": "75929"
  },
  {
    "text": "Kinesis data streams you have Amazon",
    "start": "75929",
    "end": "80100"
  },
  {
    "text": "Kinesis data analytics you can use spark",
    "start": "80100",
    "end": "82710"
  },
  {
    "text": "on elastic MapReduce and was on ec2 and",
    "start": "82710",
    "end": "85740"
  },
  {
    "text": "AWS lambda let's spend some time looking",
    "start": "85740",
    "end": "91140"
  },
  {
    "start": "90000",
    "end": "90000"
  },
  {
    "text": "at some of the key requirements that",
    "start": "91140",
    "end": "92880"
  },
  {
    "text": "streaming workloads need Canisius data",
    "start": "92880",
    "end": "95939"
  },
  {
    "text": "streams provides high availability",
    "start": "95939",
    "end": "97670"
  },
  {
    "text": "strong durability high read concurrency",
    "start": "97670",
    "end": "101119"
  },
  {
    "text": "granular scaling and configurable data",
    "start": "101119",
    "end": "104819"
  },
  {
    "text": "retention right out of the box and",
    "start": "104819",
    "end": "107240"
  },
  {
    "text": "building on this list are the higher",
    "start": "107240",
    "end": "110069"
  },
  {
    "text": "level requirements that you see on top",
    "start": "110069",
    "end": "112679"
  },
  {
    "text": "there and this these are requirements",
    "start": "112679",
    "end": "115560"
  },
  {
    "text": "that Kinesis data streams facilitates",
    "start": "115560",
    "end": "118700"
  },
  {
    "text": "these include the ability to fan out to",
    "start": "118700",
    "end": "121770"
  },
  {
    "text": "multiple consumers and the ability to",
    "start": "121770",
    "end": "124139"
  },
  {
    "text": "replay data to handle downstream",
    "start": "124139",
    "end": "126299"
  },
  {
    "text": "failures",
    "start": "126299",
    "end": "128719"
  },
  {
    "start": "129000",
    "end": "129000"
  },
  {
    "text": "so what do you get when you provision a",
    "start": "133079",
    "end": "136150"
  },
  {
    "text": "Kinesis train at its core a stream is",
    "start": "136150",
    "end": "139629"
  },
  {
    "text": "made up of shards and a shard is the",
    "start": "139629",
    "end": "143079"
  },
  {
    "text": "fundamental unit of throughput and scale",
    "start": "143079",
    "end": "147129"
  },
  {
    "text": "and each shard gives you the ability to",
    "start": "147129",
    "end": "152739"
  },
  {
    "text": "ingest up to one megabyte per second and",
    "start": "152739",
    "end": "155079"
  },
  {
    "text": "1,000 transactions per second and in",
    "start": "155079",
    "end": "157870"
  },
  {
    "text": "each shard can emit up to two megabytes",
    "start": "157870",
    "end": "160510"
  },
  {
    "text": "per second you have by default a",
    "start": "160510",
    "end": "166180"
  },
  {
    "text": "retention period of 24 hours and you can",
    "start": "166180",
    "end": "168760"
  },
  {
    "text": "increase this to up to seven days and as",
    "start": "168760",
    "end": "173530"
  },
  {
    "text": "I mentioned earlier Kinesis makes it",
    "start": "173530",
    "end": "175810"
  },
  {
    "text": "easy to scale in and out depending on",
    "start": "175810",
    "end": "180069"
  },
  {
    "text": "your workload needs and the way to do",
    "start": "180069",
    "end": "182139"
  },
  {
    "text": "this is by changing the number of shards",
    "start": "182139",
    "end": "184719"
  },
  {
    "text": "in your cases application outright or",
    "start": "184719",
    "end": "187060"
  },
  {
    "text": "you can actually split an existing shard",
    "start": "187060",
    "end": "190450"
  },
  {
    "text": "into tube or merge to shards into one",
    "start": "190450",
    "end": "194980"
  },
  {
    "text": "this gives you a lot of flexibility in",
    "start": "194980",
    "end": "197760"
  },
  {
    "text": "responding to the needs of your workload",
    "start": "197760",
    "end": "202590"
  },
  {
    "start": "203000",
    "end": "203000"
  },
  {
    "text": "so we have shards how do we route data",
    "start": "205019",
    "end": "208530"
  },
  {
    "text": "into one or more assurance that are part",
    "start": "208530",
    "end": "212769"
  },
  {
    "text": "of your stream so let's look at what a",
    "start": "212769",
    "end": "216579"
  },
  {
    "text": "payload that goes into Kinesis looks",
    "start": "216579",
    "end": "218530"
  },
  {
    "text": "like you can think of a payload as",
    "start": "218530",
    "end": "220870"
  },
  {
    "text": "having a partition key and the rest of",
    "start": "220870",
    "end": "223359"
  },
  {
    "text": "it essentially being a data blob Kinesis",
    "start": "223359",
    "end": "226090"
  },
  {
    "text": "does not enforce schema it does not care",
    "start": "226090",
    "end": "230199"
  },
  {
    "text": "what's in the data blob however it is",
    "start": "230199",
    "end": "232599"
  },
  {
    "text": "important that you specify the partition",
    "start": "232599",
    "end": "234849"
  },
  {
    "text": "key you as the publisher have to specify",
    "start": "234849",
    "end": "239590"
  },
  {
    "text": "this partition key for every message",
    "start": "239590",
    "end": "241650"
  },
  {
    "text": "Kinesis then takes this partition key",
    "start": "241650",
    "end": "243970"
  },
  {
    "text": "hashes it and deposits it in the",
    "start": "243970",
    "end": "246879"
  },
  {
    "text": "showered corresponding to the resulting",
    "start": "246879",
    "end": "248409"
  },
  {
    "text": "hash value and each shard in a stream",
    "start": "248409",
    "end": "251879"
  },
  {
    "text": "has a hash range and taken together",
    "start": "251879",
    "end": "254949"
  },
  {
    "text": "these hash ranges make up a contiguous",
    "start": "254949",
    "end": "257380"
  },
  {
    "text": "range of hash values for the stream as a",
    "start": "257380",
    "end": "259719"
  },
  {
    "text": "whole",
    "start": "259719",
    "end": "262018"
  },
  {
    "start": "262000",
    "end": "262000"
  },
  {
    "text": "earlier I mentioned how each shard",
    "start": "264159",
    "end": "266509"
  },
  {
    "text": "supports one megabytes per second in",
    "start": "266509",
    "end": "269240"
  },
  {
    "text": "ingest capacity and two megabytes per",
    "start": "269240",
    "end": "271340"
  },
  {
    "text": "second of egress capacity what if you",
    "start": "271340",
    "end": "274909"
  },
  {
    "text": "wanted to add even more consumption",
    "start": "274909",
    "end": "276800"
  },
  {
    "text": "capacity with shard",
    "start": "276800",
    "end": "278949"
  },
  {
    "text": "well now you can use a relatively new",
    "start": "278949",
    "end": "281930"
  },
  {
    "text": "feature within Canisius data streams",
    "start": "281930",
    "end": "283610"
  },
  {
    "text": "called enhanced fan-out",
    "start": "283610",
    "end": "285319"
  },
  {
    "text": "to support additional consumers and each",
    "start": "285319",
    "end": "288860"
  },
  {
    "text": "of these consumers has a dedicated two",
    "start": "288860",
    "end": "292189"
  },
  {
    "text": "megabytes per second pipe available to",
    "start": "292189",
    "end": "295400"
  },
  {
    "text": "it for shard now in addition to the",
    "start": "295400",
    "end": "299300"
  },
  {
    "text": "added throughput enhanced fan-out",
    "start": "299300",
    "end": "301460"
  },
  {
    "text": "facilitates lower latency delivery of",
    "start": "301460",
    "end": "304129"
  },
  {
    "text": "messages to consumers now this is",
    "start": "304129",
    "end": "306379"
  },
  {
    "text": "because messages are pushed to register",
    "start": "306379",
    "end": "308300"
  },
  {
    "text": "consumers via a long-lived HTTP to",
    "start": "308300",
    "end": "311029"
  },
  {
    "text": "connection whereas without enhanced",
    "start": "311029",
    "end": "314150"
  },
  {
    "text": "fan-out consumers would have to pull the",
    "start": "314150",
    "end": "316550"
  },
  {
    "text": "stream for data",
    "start": "316550",
    "end": "319478"
  }
]