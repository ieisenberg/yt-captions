[
  {
    "text": "um so hi everyone my name is Dan zamansky I'm a senior product manager on our database Services team and I'm",
    "start": "520",
    "end": "7640"
  },
  {
    "text": "excited to be sharing the stage today with C deep from Expedia and um Ian from",
    "start": "7640",
    "end": "15760"
  },
  {
    "text": "Mbox so here's all we have for you today we'll start with an overview of what is",
    "start": "15760",
    "end": "22640"
  },
  {
    "text": "a nosql database what is the category of nosql databases we'll talk a little bit about the concept of a managed database",
    "start": "22640",
    "end": "30960"
  },
  {
    "text": "service um what it is and why we think it's something that's worth",
    "start": "30960",
    "end": "36160"
  },
  {
    "text": "considering we'll then do an overview of the two managed nosql services that we",
    "start": "36160",
    "end": "42120"
  },
  {
    "text": "offer today at AWS is Dynamo DB and elastic asach and then we'll have Co",
    "start": "42120",
    "end": "47760"
  },
  {
    "text": "deep and Ian share their use cases of building really cool applications using these two",
    "start": "47760",
    "end": "54800"
  },
  {
    "text": "Services um we will um we have almost a full hour of content but we will stay",
    "start": "54800",
    "end": "60239"
  },
  {
    "text": "here at the end so if you have any questions please come see us we'll be happy to talk to",
    "start": "60239",
    "end": "65280"
  },
  {
    "text": "you so with that let's jump right into it in no SQL so no SQL as a category gained a lot",
    "start": "65280",
    "end": "74240"
  },
  {
    "text": "of popularity in the recent years um providing a response for some of the",
    "start": "74240",
    "end": "79360"
  },
  {
    "text": "limitations of traditional SEO based databases and mainly those limitations",
    "start": "79360",
    "end": "84520"
  },
  {
    "text": "are the need for a rigid schema and a lot of the modern data that you get is unstructured get from different sources",
    "start": "84520",
    "end": "91920"
  },
  {
    "text": "um and the other one is the need to have uh high performance high and consistent",
    "start": "91920",
    "end": "97600"
  },
  {
    "text": "performance and availability at scale and um these are some limitations of traditional um SQL databases and this is",
    "start": "97600",
    "end": "106159"
  },
  {
    "text": "what the nosql category came to um came to address now nosql is not one database",
    "start": "106159",
    "end": "113560"
  },
  {
    "text": "it's a whole category of databases you have uh the four main types which are the key value stores uh colum nner",
    "start": "113560",
    "end": "120600"
  },
  {
    "text": "stores document stores and graph stores so here's what's available on AWS",
    "start": "120600",
    "end": "126360"
  },
  {
    "text": "we have two managed Services one is Dynamo DB which is a a key value in a",
    "start": "126360",
    "end": "132360"
  },
  {
    "text": "document store and the other one is elastic Ash which is an inmemory key Value Store um we'll talk about both of",
    "start": "132360",
    "end": "140120"
  },
  {
    "text": "those more in a few minutes now also AWS is obviously an open platform so you can",
    "start": "140120",
    "end": "147120"
  },
  {
    "text": "install and run any technology that you choose so you have a list here of just",
    "start": "147120",
    "end": "152319"
  },
  {
    "text": "some of the common names you might have heard um but you can essentially install",
    "start": "152319",
    "end": "158560"
  },
  {
    "text": "anything now when I say we have two managed Services let's talk a little bit",
    "start": "158560",
    "end": "163879"
  },
  {
    "text": "more about what that concept means so when you're building an application and you want your database to run besides",
    "start": "163879",
    "end": "172560"
  },
  {
    "text": "actually building that database layer and optimizing you know your queries optimizing your application there is a",
    "start": "172560",
    "end": "178400"
  },
  {
    "text": "lot of overhead involved in making sure that your database works correctly so",
    "start": "178400",
    "end": "183879"
  },
  {
    "text": "this is a list of tasks that you need to take care of if you are running it on your own um servers on premise and you",
    "start": "183879",
    "end": "191720"
  },
  {
    "text": "see that you have all the way from you know Hardware related tests bind St servers",
    "start": "191720",
    "end": "197760"
  },
  {
    "text": "cooling um electricity and then it goes up through operating system software",
    "start": "197760",
    "end": "203400"
  },
  {
    "text": "related configure in your database so there's a lot of things that you need to do which are not um the core of your",
    "start": "203400",
    "end": "210000"
  },
  {
    "text": "business the core of your application if you move it from on premise to AWS to the cloud and you run",
    "start": "210000",
    "end": "217280"
  },
  {
    "text": "it self-managed on ec2 this is where we offload some of those tasks for you so",
    "start": "217280",
    "end": "223280"
  },
  {
    "text": "you no longer need to you know buy servers you no longer need to install the operating system so some of the",
    "start": "223280",
    "end": "229040"
  },
  {
    "text": "things we take care for you but there is still a lot to be done on your end to make sure that your database works",
    "start": "229040",
    "end": "235280"
  },
  {
    "text": "correctly and this is where the value of managed services comes in if you switch",
    "start": "235280",
    "end": "241439"
  },
  {
    "text": "from self-managed to a managed database Services then we offload all of these",
    "start": "241439",
    "end": "247360"
  },
  {
    "text": "tasks um from you so that you could focus on you know what matters most is your application and we really we deal",
    "start": "247360",
    "end": "254519"
  },
  {
    "text": "with a lot of customers kind of going through this both those that are starting to build their application and",
    "start": "254519",
    "end": "260639"
  },
  {
    "text": "also more established customers and they they always have the same message that you know speed in business matters time",
    "start": "260639",
    "end": "267520"
  },
  {
    "text": "to Market matters the time that you're developers you know spend um matter so",
    "start": "267520",
    "end": "273160"
  },
  {
    "text": "you want to make sure that all of that is invested in what is differentiating your business and which is your",
    "start": "273160",
    "end": "279720"
  },
  {
    "text": "application so the purpose of this slide is really a small this is a small subset",
    "start": "279720",
    "end": "285479"
  },
  {
    "text": "out of many thousands and thousands of customers that are using our managed services and the purpose of the slide is",
    "start": "285479",
    "end": "291759"
  },
  {
    "text": "to show that there is really no one kind of type of customer whether it's I know",
    "start": "291759",
    "end": "297479"
  },
  {
    "text": "large companies or startups or a certain vertical or certain use case that can",
    "start": "297479",
    "end": "303520"
  },
  {
    "text": "benefit from offloading you know the management layer to AWS it's really something that's across the board",
    "start": "303520",
    "end": "310000"
  },
  {
    "text": "regardless of you know what is your business and what is the size of your company and that's why you see here all",
    "start": "310000",
    "end": "315600"
  },
  {
    "text": "the way from you know um small successful startups and all the way to big Enterprises like Adobe and uh TV",
    "start": "315600",
    "end": "323080"
  },
  {
    "text": "Global and Electronic Arts so let's talk more about the two",
    "start": "323080",
    "end": "328680"
  },
  {
    "text": "services that we offer in a managed fashion let's start with Dynamo DB Dynamo DB is our managed nsql database",
    "start": "328680",
    "end": "336440"
  },
  {
    "text": "Service uh developed within Amazon it is highly scalable which means",
    "start": "336440",
    "end": "342400"
  },
  {
    "text": "that it can scale to any essentially any size both in terms of um the size of",
    "start": "342400",
    "end": "348000"
  },
  {
    "text": "your database and in terms of the throughput that you are uh doing for reads and writes for this database um it",
    "start": "348000",
    "end": "355120"
  },
  {
    "text": "provides consistent single digigit millisecond latency at any scale and uh this is an important point so let me",
    "start": "355120",
    "end": "361720"
  },
  {
    "text": "spend a few more seconds talking about that when you start using and if you start",
    "start": "361720",
    "end": "368000"
  },
  {
    "text": "building your application your database is very small and you have tens or hundreds of Records it really doesn't",
    "start": "368000",
    "end": "373880"
  },
  {
    "text": "matter Almost Doesn't Matter What technology you use whether it's a SQL or no SQL or what no SQL all of those will",
    "start": "373880",
    "end": "381039"
  },
  {
    "text": "be fast you know the performance will be good um where databases are really",
    "start": "381039",
    "end": "386440"
  },
  {
    "text": "tested is when you take those know tens and hundreds of Records to many thousands and millions and billions and",
    "start": "386440",
    "end": "393240"
  },
  {
    "text": "that's where many of um the noo Technologies many of other Technologies",
    "start": "393240",
    "end": "398440"
  },
  {
    "text": "they start breaking or your performance ater rates and that's not something that happens in Dynamo DB so regardless of",
    "start": "398440",
    "end": "405680"
  },
  {
    "text": "the size of your database regardless of um the load that you have you'll still have consistently um low latency which",
    "start": "405680",
    "end": "413280"
  },
  {
    "text": "is both good for your application it's also very good thing for testing because when you just build your you know small",
    "start": "413280",
    "end": "420240"
  },
  {
    "text": "application and you see that it works in this small configuration then you know that know regardless of how big your",
    "start": "420240",
    "end": "426160"
  },
  {
    "text": "Dynamo DB table grows you will still have the same predictable performance another thing to mention",
    "start": "426160",
    "end": "432440"
  },
  {
    "text": "here is Dynamo DB is highly durable and available so every time you do a write",
    "start": "432440",
    "end": "438160"
  },
  {
    "text": "to Dynamo DB we store it on three different partitions to make sure that your data is",
    "start": "438160",
    "end": "444879"
  },
  {
    "text": "safe so Dynamo DB table let's dive a little bit into how it looks Dynamo DB",
    "start": "444879",
    "end": "450919"
  },
  {
    "text": "table consists of items um each item consists of attributes so attributes are the",
    "start": "450919",
    "end": "456560"
  },
  {
    "text": "building the basic building blocks of Dynamo DB now once you put your data in",
    "start": "456560",
    "end": "462160"
  },
  {
    "text": "attributes within your table this is where you want to query it the way to query it is the first way we give you to",
    "start": "462160",
    "end": "470199"
  },
  {
    "text": "query It Is by assigning a hash key so hash key is a unique key identifier so",
    "start": "470199",
    "end": "475280"
  },
  {
    "text": "think of a list of um think of a list of students for example in a class and you have a unique",
    "start": "475280",
    "end": "481039"
  },
  {
    "text": "ID for your student so you can query you know give me student with student ID uh",
    "start": "481039",
    "end": "486479"
  },
  {
    "text": "number five or 10 whatever the second option we have is a combination of a",
    "start": "486479",
    "end": "493360"
  },
  {
    "text": "hash key and a wrench key so in the first one if you choose to only use hash key then your hash key needs to be",
    "start": "493360",
    "end": "499919"
  },
  {
    "text": "unique if you choose to use a combination of hash key and wrench key then your hash key no longer needs to be",
    "start": "499919",
    "end": "505879"
  },
  {
    "text": "unique but the combination of hash and wrench key for every item does need to be unique and with wrench key you can do",
    "start": "505879",
    "end": "513800"
  },
  {
    "text": "um it's more powerful because you can also do wrench queries so for example if you have uh if we're talking about",
    "start": "513800",
    "end": "519039"
  },
  {
    "text": "students so you have your hash key as a identifier of a certain class and um",
    "start": "519039",
    "end": "525680"
  },
  {
    "text": "let's say you ranked your students you know based on their grades and you say give me the the first 10 students with",
    "start": "525680",
    "end": "533240"
  },
  {
    "text": "the highest grades on this class so this is a this is something you can do when you have um a hash key and the wrench",
    "start": "533240",
    "end": "539120"
  },
  {
    "text": "key um one more one more thing to um Point",
    "start": "539120",
    "end": "546519"
  },
  {
    "text": "here um generally when we kind of talk to customers that start working on on",
    "start": "546519",
    "end": "551839"
  },
  {
    "text": "their application their choosing database layer one mistake we sometimes see them do is they see a certain",
    "start": "551839",
    "end": "559720"
  },
  {
    "text": "database kind of technology and they decide that they're going to adapt you know their application and their query",
    "start": "559720",
    "end": "565519"
  },
  {
    "text": "parents to make sure that this engine or this te technology works well and um we",
    "start": "565519",
    "end": "572320"
  },
  {
    "text": "we see that happens and really our recommendation Our advice is to do the opposite is first think you know what is",
    "start": "572320",
    "end": "580720"
  },
  {
    "text": "what is your application ask yourself some questions like what are going to be my query patterns what are my latency",
    "start": "580720",
    "end": "586839"
  },
  {
    "text": "requirements Now what are my throughput requirements um what is going to be the",
    "start": "586839",
    "end": "591920"
  },
  {
    "text": "size now do I need High availability or not uh once you have all of those figured out it will be much easier for",
    "start": "591920",
    "end": "598519"
  },
  {
    "text": "you to decide you know whether um what technology is optimal for you in terms of data types",
    "start": "598519",
    "end": "606279"
  },
  {
    "text": "Dynamo DB supports all the um data types that you would expect from a key Value Store as well as a document",
    "start": "606279",
    "end": "613279"
  },
  {
    "text": "store and really with all of that you know management and the ability to",
    "start": "613279",
    "end": "619240"
  },
  {
    "text": "scale uh in essentially indefinitely and provide this High availability you would expect that there is a lot of kind of",
    "start": "619240",
    "end": "626240"
  },
  {
    "text": "configuration and tweaking going into this and you know this is a this is a cool thing about Dynamo DB that the",
    "start": "626240",
    "end": "632600"
  },
  {
    "text": "entire Dynamo DB is only 13 apis as you see here on the left that control you",
    "start": "632600",
    "end": "638160"
  },
  {
    "text": "know your tables as well as your items both for reads and for writes and what you don't see here is any kind of you",
    "start": "638160",
    "end": "646560"
  },
  {
    "text": "know increase decrease take um snapshot replicate there is none of this because",
    "start": "646560",
    "end": "652200"
  },
  {
    "text": "this is the essentially the essence of a managed service of us taking care of it for you we recently launched Dynamo DB",
    "start": "652200",
    "end": "659920"
  },
  {
    "text": "streams and we added the four apis on the right Dynamo DB streams is a log of",
    "start": "659920",
    "end": "665360"
  },
  {
    "text": "changes so every time you make a right Dynamo DB it also gets updated in Dynamo DB streams and then you can send the",
    "start": "665360",
    "end": "672920"
  },
  {
    "text": "streams to other services such as Kinesis or Lambda and there's a lot of cool things you can do with it we",
    "start": "672920",
    "end": "678760"
  },
  {
    "text": "actually have a workshop later today that talks about um event driven",
    "start": "678760",
    "end": "684040"
  },
  {
    "text": "Computing processing with Dynamo DB and Lambda and uh when we get to the further learning section I'll talk more about",
    "start": "684040",
    "end": "690760"
  },
  {
    "text": "that so what is the input that we require for you to be able to run Dynamo",
    "start": "690760",
    "end": "696800"
  },
  {
    "text": "DB for you Al the the only question that kind of we need your input for is um",
    "start": "696800",
    "end": "704480"
  },
  {
    "text": "what is the throughput um how many reads and how many writes are you going to do to that Dynamo DB table I know these two",
    "start": "704480",
    "end": "712079"
  },
  {
    "text": "are separate so it's like two knobs that you can turn up or down in how many reads and how many writes once you tell",
    "start": "712079",
    "end": "719040"
  },
  {
    "text": "us that then behind the scenes we will scale the data into enough Dynamo DB",
    "start": "719040",
    "end": "725000"
  },
  {
    "text": "physical partitions that we can accommodate you know any size and any throughput and this is this is something",
    "start": "725000",
    "end": "731440"
  },
  {
    "text": "that is dynamic so if you have a for example an e-commerce app and you have a a steady load and now you're preparing",
    "start": "731440",
    "end": "737880"
  },
  {
    "text": "for no Black Friday shopping so you can just dial this up now provision more",
    "start": "737880",
    "end": "743519"
  },
  {
    "text": "capacity when you're done dial it down and you only pay for the capacity that you have provisioned at the moment so",
    "start": "743519",
    "end": "750000"
  },
  {
    "text": "this is a really cool thing think about how much effort would it be to scale some um database when you do all of that",
    "start": "750000",
    "end": "757279"
  },
  {
    "text": "scaling up and scaling down on your own with that let's switch to our second",
    "start": "757279",
    "end": "763360"
  },
  {
    "text": "service for today and that's Amazon elastic as Amazon elastic Ash is our",
    "start": "763360",
    "end": "768480"
  },
  {
    "text": "inmemory service and U when I say that the first question I often get is you",
    "start": "768480",
    "end": "774079"
  },
  {
    "text": "know what is what's cool what's interesting about putting my data in memory and really what's interesting is",
    "start": "774079",
    "end": "780240"
  },
  {
    "text": "when you switch from having your data on a disk um to switching it in memory",
    "start": "780240",
    "end": "785720"
  },
  {
    "text": "you're talking about orders of magnitude of lower latency and uh faster throughput so it's it's really a big big",
    "start": "785720",
    "end": "793639"
  },
  {
    "text": "difference you can uh if you have a dis based database you can be talking about single digit to tens of milliseconds in",
    "start": "793639",
    "end": "801079"
  },
  {
    "text": "latency um when you have in memory like elastic cash calls to elastic Cas will return in less than one millisecond",
    "start": "801079",
    "end": "810199"
  },
  {
    "text": "so the second question is why is it important well when we interact with our customers on a daily basis what we see",
    "start": "810199",
    "end": "816839"
  },
  {
    "text": "is a big um increase in growth in realtime use cases now everybody has",
    "start": "816839",
    "end": "822800"
  },
  {
    "text": "obviously a mobile device they're playing mobile games that require real-time performance um adtech of course requires",
    "start": "822800",
    "end": "830279"
  },
  {
    "text": "realtime performance e-commerce social app so there's more and more of that um and this is where you need your database",
    "start": "830279",
    "end": "836680"
  },
  {
    "text": "to be highly performant another thing is load on your application would uh many times be spiky",
    "start": "836680",
    "end": "844680"
  },
  {
    "text": "and unpredictable so you will uh you know you have uh some application and now one of the celebrities tweeted about",
    "start": "844680",
    "end": "851720"
  },
  {
    "text": "you and you have 10 or 100 times more people you know um checking out your app",
    "start": "851720",
    "end": "857440"
  },
  {
    "text": "to know just this evening you need to make sure that your app is able to handle",
    "start": "857440",
    "end": "863920"
  },
  {
    "text": "that so Amazon elastic cache um is managed service that manages two",
    "start": "865160",
    "end": "871839"
  },
  {
    "text": "open-source inmemory key value stores okay two open-source key value um in",
    "start": "871839",
    "end": "878279"
  },
  {
    "text": "memory key value stores so the first word you see here is open source so the difference or one of the differences um",
    "start": "878279",
    "end": "884839"
  },
  {
    "text": "between Dynamo DB and elastic cach is Dynamo DB the technology that was built developed within Amazon um elastic cach",
    "start": "884839",
    "end": "893120"
  },
  {
    "text": "kind of takes two popular open- Source Technologies and then provides enhancements and a management l layer on",
    "start": "893120",
    "end": "899519"
  },
  {
    "text": "top of them it comes in two flavors so the two",
    "start": "899519",
    "end": "905199"
  },
  {
    "text": "uh most popular inmemory engines mkd and reddis mkd has been uh was introduced in",
    "start": "905199",
    "end": "913480"
  },
  {
    "text": "2003 and has been a kind of golden standard for caching since really the the beauty of MC G is",
    "start": "913480",
    "end": "922480"
  },
  {
    "text": "in its speed and its simplicity so it's in memory it's very fast it's very",
    "start": "922480",
    "end": "927560"
  },
  {
    "text": "simple it's essentially put in strings in memory um very low number of apis",
    "start": "927560",
    "end": "933759"
  },
  {
    "text": "mostly gets and puts what it doesn't provide is it doesn't provide any availability or",
    "start": "933759",
    "end": "940639"
  },
  {
    "text": "persistence options so the use cases for using mkd would be for data which is",
    "start": "940639",
    "end": "946199"
  },
  {
    "text": "either easily recoverable or something like a session store if you're okay with",
    "start": "946199",
    "end": "952240"
  },
  {
    "text": "um you know potentially having disruption to that uh um to that session",
    "start": "952240",
    "end": "958040"
  },
  {
    "text": "if you're looking look for something which is more durable and more persistent but still has the in-memory",
    "start": "958040",
    "end": "965240"
  },
  {
    "text": "latency the inmemory performance of mcash D this is where we offer redus so",
    "start": "965240",
    "end": "971040"
  },
  {
    "text": "redus is more of a inmemory um key value data store so it's",
    "start": "971040",
    "end": "976399"
  },
  {
    "text": "not it's not just for caching and the reason for that is it provides one it",
    "start": "976399",
    "end": "981800"
  },
  {
    "text": "provides High availability and persistent options so you can have read replicas that um kind of a primary",
    "start": "981800",
    "end": "988240"
  },
  {
    "text": "replica configuration that we talk about more in the next slide where if something happens to one of your nodes",
    "start": "988240",
    "end": "993959"
  },
  {
    "text": "you still have the data saved in another um it also provides more sophisticated",
    "start": "993959",
    "end": "999680"
  },
  {
    "text": "data types such as list sets and sorted sets and a few others and I encourage you to attend the elastic as deep dive",
    "start": "999680",
    "end": "1007560"
  },
  {
    "text": "session that we have tomorrow morning we go deeper into know each of those and what it means and what are some of the",
    "start": "1007560",
    "end": "1014120"
  },
  {
    "text": "cool use cases the cool stuff that you can do using them",
    "start": "1014120",
    "end": "1019800"
  },
  {
    "text": "so I talked a little bit about um replication on reddis um let's go into deeper into that",
    "start": "1020279",
    "end": "1027918"
  },
  {
    "text": "so in redus redus allows you to have a primary node a master and zero or more",
    "start": "1027919",
    "end": "1035000"
  },
  {
    "text": "replicas that will asynchronously replicate the data from that primary so your primary will be able to um accept",
    "start": "1035000",
    "end": "1042798"
  },
  {
    "text": "rights basically both read and write requests and your replicas are readon replicas so they get the data on the",
    "start": "1042799",
    "end": "1049120"
  },
  {
    "text": "primary and your application can read problem so this is a a cool option that redus provides but if this is something",
    "start": "1049120",
    "end": "1056679"
  },
  {
    "text": "that you are managing on your own right there's a lot of overhead involved so",
    "start": "1056679",
    "end": "1062240"
  },
  {
    "text": "for that configuration you need to provision the instances right you need to install redus on each you need to",
    "start": "1062240",
    "end": "1068480"
  },
  {
    "text": "attach the replicas to the primary now you need a monitoring system that you know if something happens to any one of",
    "start": "1068480",
    "end": "1075000"
  },
  {
    "text": "those nodes you detect this then you provision new replicas and connect them them and sync the data so there's really",
    "start": "1075000",
    "end": "1080200"
  },
  {
    "text": "a lot of overhead involved and the cool thing about elastic as is we do all of",
    "start": "1080200",
    "end": "1085919"
  },
  {
    "text": "this for you so we um with a few clicks on the console you can provision this",
    "start": "1085919",
    "end": "1091480"
  },
  {
    "text": "entire um this entire architecture that we call replication group that has a primary and one or more replicas they're",
    "start": "1091480",
    "end": "1098200"
  },
  {
    "text": "all connected they all have the data synced and we also monitor that in real time so that if know any of your nodes",
    "start": "1098200",
    "end": "1106080"
  },
  {
    "text": "fail so for example if one of your replicas fail we detect that we automatically bring up a new replica",
    "start": "1106080",
    "end": "1112400"
  },
  {
    "text": "sync it with a primary kind of have all the data on it um and that new replica will have the same end point as the old",
    "start": "1112400",
    "end": "1118919"
  },
  {
    "text": "one and that's actually important because that means that your application doesn't need to change what you don't",
    "start": "1118919",
    "end": "1124360"
  },
  {
    "text": "want to happen is every time you know there is something happen to your database layer now you have a a",
    "start": "1124360",
    "end": "1130039"
  },
  {
    "text": "different node with a different endpoint so now your application needs to account for that kind of on your client you need",
    "start": "1130039",
    "end": "1135360"
  },
  {
    "text": "to change that endpoint um so you don't need to do any of that here use an elastic Ash if your primary fails and",
    "start": "1135360",
    "end": "1141960"
  },
  {
    "text": "you have um the feature here is multi-az enabled then we also automatically",
    "start": "1141960",
    "end": "1148159"
  },
  {
    "text": "monitor the primary if that fails we select the most upto-date replica and promote it to become the new primary so",
    "start": "1148159",
    "end": "1154679"
  },
  {
    "text": "that your failover is faster than just waiting for a replacement of a node um and we propagate the end point that was",
    "start": "1154679",
    "end": "1161720"
  },
  {
    "text": "pointing to the old primary now to point to the new primary and the reason we do that is again so that your application",
    "start": "1161720",
    "end": "1168799"
  },
  {
    "text": "that is using that endpoint can continue using that same endpoint that will now",
    "start": "1168799",
    "end": "1174480"
  },
  {
    "text": "just point in a different node so again we do this so that your application doesn't need to change and kind of",
    "start": "1174480",
    "end": "1179799"
  },
  {
    "text": "there's nothing you need to do and all of this happens automatically so we'll get back to this",
    "start": "1179799",
    "end": "1187200"
  },
  {
    "text": "slide at the end of the session there is this has been a high level overview there's a lot more to learn both about",
    "start": "1187200",
    "end": "1193360"
  },
  {
    "text": "elastication and about Dynamo DB um with that and to hand it over to",
    "start": "1193360",
    "end": "1198840"
  },
  {
    "text": "deep to talk about their cool realtime analytics system they built using Dynamo DB and elastic",
    "start": "1198840",
    "end": "1205919"
  },
  {
    "text": "cash uh thanks Dan uh good afternoon everyone I'm Kip Chan and I'm from xedia",
    "start": "1209320",
    "end": "1216280"
  },
  {
    "text": "I'm here to talk about how xedia uses a uses Dynamo DB and elastic cache for a",
    "start": "1216280",
    "end": "1222120"
  },
  {
    "text": "real-time application so what can you expect part of this session I'll go through a",
    "start": "1222120",
    "end": "1228039"
  },
  {
    "text": "overview of what xedia does in AWS it'll talk about a the application the",
    "start": "1228039",
    "end": "1233760"
  },
  {
    "text": "realtime analytic application what was the initial design decisions that we made uh what were the challenges that we",
    "start": "1233760",
    "end": "1241200"
  },
  {
    "text": "faced after we were running for some time and then how did we redesign the application and also some of the",
    "start": "1241200",
    "end": "1248159"
  },
  {
    "text": "recommendations that we have for folks who are running Dynamo DB and elastic cache so I'm I'm engineering manager at",
    "start": "1248159",
    "end": "1256520"
  },
  {
    "text": "Expedia I lead a team of engine engers who provide self-service platform on top",
    "start": "1256520",
    "end": "1261799"
  },
  {
    "text": "of AWS Services uh we we have we run we have multiple vpcs in",
    "start": "1261799",
    "end": "1267480"
  },
  {
    "text": "Amazon U we have built self-service automation where teams can go and deploy",
    "start": "1267480",
    "end": "1272559"
  },
  {
    "text": "to multiple regions at any time that they want it's fully automated we have actually automated uh creation of vpcs",
    "start": "1272559",
    "end": "1280440"
  },
  {
    "text": "as well we follow devops principles uh we treade infrastructure as",
    "start": "1280440",
    "end": "1286440"
  },
  {
    "text": "software um and I'm also leading an effort right now to run our",
    "start": "1286440",
    "end": "1292760"
  },
  {
    "text": "microservices uh using Amazon's ec2 container service pra working at xedia I",
    "start": "1292760",
    "end": "1299240"
  },
  {
    "text": "worked at Shell and Microsoft I don't think xedia needs an",
    "start": "1299240",
    "end": "1304320"
  },
  {
    "text": "introduction Expedia is one of the world's leading travel agencies Out",
    "start": "1304320",
    "end": "1309679"
  },
  {
    "text": "There Our mission is to change travel with the power of Technology U we are",
    "start": "1309679",
    "end": "1315799"
  },
  {
    "text": "passionate about travel and we want to simplify um and improve the customer",
    "start": "1315799",
    "end": "1322440"
  },
  {
    "text": "experience with the power of uh technology we have more than 100 points",
    "start": "1322440",
    "end": "1328120"
  },
  {
    "text": "of sale across 60 countries and we have offices across the globe as",
    "start": "1328120",
    "end": "1334159"
  },
  {
    "text": "well so uh these are some of the services that we use in Amazon there are others as well um we have around 200",
    "start": "1334159",
    "end": "1343039"
  },
  {
    "text": "microservices that we are running in different Amazon regions we are in s",
    "start": "1343039",
    "end": "1348880"
  },
  {
    "text": "Amazon reasons right now and uh we have we use direct connect to connect to our data centers we have",
    "start": "1348880",
    "end": "1356400"
  },
  {
    "text": "vpcs which are which are PCI Compliant as well and uh our biggest uh usage of",
    "start": "1356400",
    "end": "1364720"
  },
  {
    "text": "Amazon is E2 we run big data processing as well in Amazon uh we run EMR we have",
    "start": "1364720",
    "end": "1371760"
  },
  {
    "text": "spark jobs that are running both ad hoc and uh streaming jobs as well",
    "start": "1371760",
    "end": "1378640"
  },
  {
    "text": "so this is a visual representation of our services that we have uh that we use in Amazon as you can see ec2 is the",
    "start": "1378640",
    "end": "1385279"
  },
  {
    "text": "biggest one then we do use lot of cloud formation Stacks uh Auto scaling groups",
    "start": "1385279",
    "end": "1391279"
  },
  {
    "text": "which again scale Up and Down based on the CPU and memory utilization and uh we use RDS for our",
    "start": "1391279",
    "end": "1399600"
  },
  {
    "text": "relational needs we have Dynamo DB elastic cache clusters and a lot of S3 storage",
    "start": "1399600",
    "end": "1408640"
  },
  {
    "text": "so this is all like all our footprint that we have in Amazon I'm just going to talk about one service that uses both",
    "start": "1408640",
    "end": "1415720"
  },
  {
    "text": "Dynamo DB and elastic cache so what is the application that I",
    "start": "1415720",
    "end": "1421480"
  },
  {
    "text": "want to talk about so the application collects the ab tests that happen on our",
    "start": "1421480",
    "end": "1426559"
  },
  {
    "text": "sites and processes that data and stores them in a data store right for those of",
    "start": "1426559",
    "end": "1432400"
  },
  {
    "text": "you who don't know what a AB testing is AB testing gives you a way where you can test the same application but two",
    "start": "1432400",
    "end": "1439400"
  },
  {
    "text": "different two different versions of the same application with the same customers that you have and you can gauge which",
    "start": "1439400",
    "end": "1446760"
  },
  {
    "text": "version of the application your customers uh would like typically AB",
    "start": "1446760",
    "end": "1451840"
  },
  {
    "text": "testing is done when you are launching a new feature and you want to know whether the feature that you are trying to build",
    "start": "1451840",
    "end": "1458520"
  },
  {
    "text": "is that something your customers would like rather than you spending like six months and then finding out whether my",
    "start": "1458520",
    "end": "1464840"
  },
  {
    "text": "application is actually worth uh used used by my customer",
    "start": "1464840",
    "end": "1470159"
  },
  {
    "text": "so that is AB testing but this is basically collects the ab test that run on all of our xedia sites it processes",
    "start": "1470159",
    "end": "1477440"
  },
  {
    "text": "about 200 million messages per day uh we use Apache storm we use elastic cache",
    "start": "1477440",
    "end": "1483760"
  },
  {
    "text": "and elastic Ash redis and Dynamo DB to store the process data uh the",
    "start": "1483760",
    "end": "1488960"
  },
  {
    "text": "application has been designed um designed to handle burst traffic that",
    "start": "1488960",
    "end": "1494640"
  },
  {
    "text": "happened throughout the day on our xedia sites so this is very high level architecture",
    "start": "1494640",
    "end": "1500679"
  },
  {
    "text": "diagram of our the application that I'm going to talk um we have a continuous stream of data which tells the different",
    "start": "1500679",
    "end": "1508399"
  },
  {
    "text": "interactions that are happening on our sites so we use Apache storm to hook into that stream of data we process that",
    "start": "1508399",
    "end": "1515919"
  },
  {
    "text": "data and we store it in both dynamodb and elastic cache you can see that I'm",
    "start": "1515919",
    "end": "1521440"
  },
  {
    "text": "using two stores here uh by the end of this presentation you will understand why I have two stores both Dynamo DB and",
    "start": "1521440",
    "end": "1527840"
  },
  {
    "text": "elastic cash RIS so again before I go deep into it",
    "start": "1527840",
    "end": "1534559"
  },
  {
    "text": "I'll begin with why did we choose Dynamo DB so our data store is a simple key",
    "start": "1534559",
    "end": "1541039"
  },
  {
    "text": "value based store right and when we started working on this application two",
    "start": "1541039",
    "end": "1546120"
  },
  {
    "text": "years ago um there was already success in xedia of people running Cassandra",
    "start": "1546120",
    "end": "1551240"
  },
  {
    "text": "cluster in AWS in AWS or in our data centers all right so we started spinning",
    "start": "1551240",
    "end": "1557720"
  },
  {
    "text": "setting time to spin up three node Cassandra cluster um and we spent about a week but we were nowhere close to",
    "start": "1557720",
    "end": "1565240"
  },
  {
    "text": "getting it up and running uh it's not that we couldn't get Cassandra actually working it's that the way that we wanted",
    "start": "1565240",
    "end": "1571440"
  },
  {
    "text": "we couldn't get it running and as with any other project the deadlines were tied so we started looking at Dynamo DB",
    "start": "1571440",
    "end": "1579159"
  },
  {
    "text": "and we were up and running in a day so the the main three reasons why we chose Dynamo DB was this setup right like it's",
    "start": "1579159",
    "end": "1585520"
  },
  {
    "text": "a manage setup I don't have to manage the infrastructure Amazon manage the infrastructure for me right and then the",
    "start": "1585520",
    "end": "1591279"
  },
  {
    "text": "monitoring which you get through cloudwatch and ease to scale as earlier D mention you just change the right",
    "start": "1591279",
    "end": "1597919"
  },
  {
    "text": "throughput and the read throughput and then you have your uh C uh Dynamo DB table scaling up and",
    "start": "1597919",
    "end": "1604520"
  },
  {
    "text": "down and the other benefit is you don't need a dedicated team to manage the infrastructure you you can actually",
    "start": "1604520",
    "end": "1610880"
  },
  {
    "text": "Focus that resources somewhere else to actually work on your",
    "start": "1610880",
    "end": "1616158"
  },
  {
    "text": "application so with this our initial design was just one Dynamo DB table with",
    "start": "1616520",
    "end": "1621919"
  },
  {
    "text": "the primary keying be the experiment date uh and then secondary key just to store the results that happened and",
    "start": "1621919",
    "end": "1628159"
  },
  {
    "text": "there were no other secondary keys that we had some of the assumptions that we started was we expected about 1.5 GB of",
    "start": "1628159",
    "end": "1636279"
  },
  {
    "text": "data per day and we wanted to store data for at least I think 6 months when we",
    "start": "1636279",
    "end": "1642080"
  },
  {
    "text": "started earlier and then we also wanted to make sure that it doesn't affect our",
    "start": "1642080",
    "end": "1648360"
  },
  {
    "text": "application performance um so the initial design",
    "start": "1648360",
    "end": "1653520"
  },
  {
    "text": "which pretty simple row creation we look up by the primary key if that data",
    "start": "1653520",
    "end": "1659080"
  },
  {
    "text": "doesn't exist then we create it in the Dynamo DB table and for updates we retrieve all the uh rows based on the",
    "start": "1659080",
    "end": "1666880"
  },
  {
    "text": "primary key check if there is an update and then uh update the data back to the",
    "start": "1666880",
    "end": "1672480"
  },
  {
    "text": "uh table so with this right we were up and running our application was performing",
    "start": "1672480",
    "end": "1679000"
  },
  {
    "text": "well we were happy but as time progressed we we saw that the requests",
    "start": "1679000",
    "end": "1685600"
  },
  {
    "text": "were getting throttled right all the right request that were we were trying to do on Dynamo DB were getting",
    "start": "1685600",
    "end": "1691919"
  },
  {
    "text": "throttled so to to mitigate that problem we started changing the uh right",
    "start": "1691919",
    "end": "1697440"
  },
  {
    "text": "throughput which resulted in significant cost right like as you change uh the",
    "start": "1697440",
    "end": "1703720"
  },
  {
    "text": "right through put you have to pay more to Amazon so we started paying we had we increased our ride throughput to 35,000",
    "start": "1703720",
    "end": "1711519"
  },
  {
    "text": "whereas it was uh the sustained um ride throughput was only",
    "start": "1711519",
    "end": "1716760"
  },
  {
    "text": "3,500 so even after we changed this we were seeing a lot of through uh request",
    "start": "1716760",
    "end": "1722559"
  },
  {
    "text": "getting throttled on us uh on on our table so the throttling happened as the",
    "start": "1722559",
    "end": "1728320"
  },
  {
    "text": "table size grew right we the table alone this one table is around 4.6 terabytes",
    "start": "1728320",
    "end": "1733840"
  },
  {
    "text": "worth of data in just one table so then we started looking at it and then we",
    "start": "1733840",
    "end": "1739760"
  },
  {
    "text": "started investigating why is this happening right we we don't want to change the right throughput forever and",
    "start": "1739760",
    "end": "1745640"
  },
  {
    "text": "then pay more right so then started looking at it then we looked at our",
    "start": "1745640",
    "end": "1751200"
  },
  {
    "text": "access patterns of how the data is being uh used so we what we found out was most",
    "start": "1751200",
    "end": "1757600"
  },
  {
    "text": "of our read and write requests was towards the most recent data even though",
    "start": "1757600",
    "end": "1763360"
  },
  {
    "text": "we were storing it for like an year we were not really the request that were com was only towards the recent data and",
    "start": "1763360",
    "end": "1771000"
  },
  {
    "text": "then there were lot of repeat requests that were happening which was wasting our throughput and the most important",
    "start": "1771000",
    "end": "1777559"
  },
  {
    "text": "thing please read the documentation carefully so we went back we read the documentation um so if you see uh Dynamo",
    "start": "1777559",
    "end": "1785399"
  },
  {
    "text": "DB creates a partition for every 10gb right so we were 4.6 terabytes of uh",
    "start": "1785399",
    "end": "1792360"
  },
  {
    "text": "table size so we had 460 uh partitions and on top of it the biggest problem is",
    "start": "1792360",
    "end": "1798120"
  },
  {
    "text": "is uh if you read again clearly this one uh what Amazon does is it distributes",
    "start": "1798120",
    "end": "1803720"
  },
  {
    "text": "the uh throughput that you assign to your table equally among the partitions so literally each partition only got 75",
    "start": "1803720",
    "end": "1811679"
  },
  {
    "text": "as their throughput even though we had 35,000 right and as I said earlier most of our",
    "start": "1811679",
    "end": "1817720"
  },
  {
    "text": "request was towards recent data not for all the data so that's why our uh",
    "start": "1817720",
    "end": "1823640"
  },
  {
    "text": "requests that were coming into the system were getting throttled so then we started looking at how can we optimize",
    "start": "1823640",
    "end": "1829399"
  },
  {
    "text": "this right so then we started we thought about adding a caching layer so that's",
    "start": "1829399",
    "end": "1835320"
  },
  {
    "text": "where redis comes into picture and I'll talk about why we chose elastic cache in the next slide we are using elastic",
    "start": "1835320",
    "end": "1842039"
  },
  {
    "text": "cache redis and the decision was we read uh from redis for the conditional reads",
    "start": "1842039",
    "end": "1849039"
  },
  {
    "text": "and everything else comes from Dynamo DB table if if there are no if there is no data in the in R it comes from dynamodb",
    "start": "1849039",
    "end": "1856519"
  },
  {
    "text": "and we we were expecting to get cut our uh throughput to like by 10 times like",
    "start": "1856519",
    "end": "1863039"
  },
  {
    "text": "to 3,500 so that was what we was expecting and then then uh again before",
    "start": "1863039",
    "end": "1869639"
  },
  {
    "text": "I go into what what were the improvements that we saw why we chose again elastic cash elastic cach supports",
    "start": "1869639",
    "end": "1875760"
  },
  {
    "text": "both M cach uh and redis and biggest benefit again as I mentioned earlier for",
    "start": "1875760",
    "end": "1881639"
  },
  {
    "text": "Dynamo as well it's managed so we don't have to keep running the ec2 instances",
    "start": "1881639",
    "end": "1886919"
  },
  {
    "text": "and then put R is on top of it uh and then you get cloudwatch monitoring we",
    "start": "1886919",
    "end": "1892600"
  },
  {
    "text": "get uh read replicas as earlier Dan mentioned you have you can have multiple",
    "start": "1892600",
    "end": "1897679"
  },
  {
    "text": "read replicas and then we haven't had a situation where we had to automatically",
    "start": "1897679",
    "end": "1902799"
  },
  {
    "text": "fall back to the replica but we know that at least if something goes back the uh read replicas will get promoted you",
    "start": "1902799",
    "end": "1910840"
  },
  {
    "text": "get mult automated backups multi-az uh Disaster Recovery scenario as well so",
    "start": "1910840",
    "end": "1916559"
  },
  {
    "text": "that's why we chose cash so after we had this in place right",
    "start": "1916559",
    "end": "1923080"
  },
  {
    "text": "all what we observed was the repeat requests were were not even making to Dynamo DB and everything was being",
    "start": "1923080",
    "end": "1929399"
  },
  {
    "text": "served from redis you can clearly see that right after we added it the right",
    "start": "1929399",
    "end": "1934960"
  },
  {
    "text": "uh the throttle request dropped down to zero and we were doing about",
    "start": "1934960",
    "end": "1941120"
  },
  {
    "text": "750,000 think 750,000 throttle right request as soon as we added red is it",
    "start": "1941240",
    "end": "1947039"
  },
  {
    "text": "just dropped down and the the hit ratio on the on the",
    "start": "1947039",
    "end": "1952200"
  },
  {
    "text": "radius was like 3 is to one so 3,000 hits versus th000 misses the th000 misses was served from dynamodb at that",
    "start": "1952200",
    "end": "1959799"
  },
  {
    "text": "point and then we as as I mentioned we were able to cut down our uh right",
    "start": "1959799",
    "end": "1965039"
  },
  {
    "text": "capacity to 3,500 now from 35,000 if you really look it's not",
    "start": "1965039",
    "end": "1971360"
  },
  {
    "text": "visible here but our actually sustained right read throughput right throughput right now is only 300 early was like",
    "start": "1971360",
    "end": "1978440"
  },
  {
    "text": "3,500 now that also came down to 300 but to make sure our application performs",
    "start": "1978440",
    "end": "1985279"
  },
  {
    "text": "well during uh Peak loads we are at 3,500 right and with this we have a very",
    "start": "1985279",
    "end": "1991559"
  },
  {
    "text": "high performant application with both Dynamo DB and elastic cach so these are some of the",
    "start": "1991559",
    "end": "1997120"
  },
  {
    "text": "recommendations that we have based on our experience right um take a close",
    "start": "1997120",
    "end": "2002600"
  },
  {
    "text": "look at your access patterns and then see your access pons will tell you a lot",
    "start": "2002600",
    "end": "2008639"
  },
  {
    "text": "of things how you can design your application then next up if you need any if you think there are a lot of repeat",
    "start": "2008639",
    "end": "2014720"
  },
  {
    "text": "requests that are coming into the system try adding a caching layer we are using redis you can use mcash as well and then",
    "start": "2014720",
    "end": "2023519"
  },
  {
    "text": "as I said earlier we were changing the right throughput so that our applications perform well even though",
    "start": "2023519",
    "end": "2029600"
  },
  {
    "text": "it's cost like you pay more but at least that keeps your application running so look have a very close look at the right",
    "start": "2029600",
    "end": "2036720"
  },
  {
    "text": "throughput and the read through that you have configured with that I think our",
    "start": "2036720",
    "end": "2043200"
  },
  {
    "text": "experience of using Dynamo DB and elastic cach f with for this application will also help you with this I will hand",
    "start": "2043200",
    "end": "2049480"
  },
  {
    "text": "it over to aan from [Applause]",
    "start": "2049480",
    "end": "2058240"
  },
  {
    "text": "mapbox school deep hi everyone uh I'm Ian Ward I work at mapbox uh I'm an",
    "start": "2058240",
    "end": "2063398"
  },
  {
    "text": "engineer on the platform team where I do a mix of system operations uh monitoring",
    "start": "2063399",
    "end": "2070040"
  },
  {
    "text": "and application development and I'm going to talk about",
    "start": "2070040",
    "end": "2075118"
  },
  {
    "text": "how we use dynamodb uh in conjunction with elasticache and a few other",
    "start": "2075119",
    "end": "2080320"
  },
  {
    "text": "services to improve improve our overall um performance around the world so I'm",
    "start": "2080320",
    "end": "2086320"
  },
  {
    "text": "going to explain a little bit about what mapbox is to paint the picture about the business requirements that we have U for",
    "start": "2086320",
    "end": "2093358"
  },
  {
    "text": "our customers and then uh explain more about how we use AWS",
    "start": "2093359",
    "end": "2098480"
  },
  {
    "text": "and then talk about why we use dynb and then how we use elasticache um to get additional",
    "start": "2098480",
    "end": "2105520"
  },
  {
    "text": "performance so first of all there are 11 of us here at this reinvent uh we have a booth uh we love talking about how we",
    "start": "2105520",
    "end": "2111680"
  },
  {
    "text": "use DS and hearing about how other people use it we also have uh sales and",
    "start": "2111680",
    "end": "2116720"
  },
  {
    "text": "support members from our team so stop on by the booth uh we're happy to talk so what is",
    "start": "2116720",
    "end": "2123320"
  },
  {
    "text": "mapbox mapbox is a mapping platform for uh developers it's uh uh we provide",
    "start": "2123320",
    "end": "2128680"
  },
  {
    "text": "tools um so uh design and data software uh to help you build Maps um to get the",
    "start": "2128680",
    "end": "2136440"
  },
  {
    "text": "exact look you're going for with the data that you want on that map and then we have developer tools so once you",
    "start": "2136440",
    "end": "2141800"
  },
  {
    "text": "build a map and push it up to our Global platform which is hosted in nine regions around the world uh you can pull down uh",
    "start": "2141800",
    "end": "2149480"
  },
  {
    "text": "the map into your application and we have apis uh for search and geocoding uh",
    "start": "2149480",
    "end": "2154599"
  },
  {
    "text": "and other apis like uh directions so design and data uh we have a program",
    "start": "2154599",
    "end": "2161240"
  },
  {
    "text": "called mapbox studio uh you can go and add data into this application and",
    "start": "2161240",
    "end": "2169119"
  },
  {
    "text": "edit it in a visual way completely visual way now in the newest version um and customize the map exactly as you",
    "start": "2169119",
    "end": "2175760"
  },
  {
    "text": "like using the exact fields that are available in the data that you add to it we also have a global streets uh base",
    "start": "2175760",
    "end": "2182839"
  },
  {
    "text": "layer that we provide uh that you're able to use as well",
    "start": "2182839",
    "end": "2187960"
  },
  {
    "text": "and then developer tools uh we have a mobile SDK so you can pull the map down from our platform into your application",
    "start": "2187960",
    "end": "2195280"
  },
  {
    "text": "uh or your web app so we have JavaScript SDK as well these are all open source the code is available on GitHub you can",
    "start": "2195280",
    "end": "2201720"
  },
  {
    "text": "look at them modify them and so on we have apis for doing things like",
    "start": "2201720",
    "end": "2207680"
  },
  {
    "text": "geocoding so you give a place name and you can get back a latitude and longitude or do the opposite give a lat",
    "start": "2207680",
    "end": "2212839"
  },
  {
    "text": "laon and you'll get back uh a place name and then we have uh apis for",
    "start": "2212839",
    "end": "2219280"
  },
  {
    "text": "walking biking and driving directions uh these are a few of the apis we have we have other apis you can read about them",
    "start": "2219280",
    "end": "2225040"
  },
  {
    "text": "on our uh website uh but the point here is that we have um building blocks you can combine use just one or two of them",
    "start": "2225040",
    "end": "2231319"
  },
  {
    "text": "or combine them all to get the exact uh needs for your use",
    "start": "2231319",
    "end": "2237040"
  },
  {
    "text": "case so um what I'm going to do is um talk about",
    "start": "2237040",
    "end": "2243280"
  },
  {
    "text": "um who uses map pox explain the business teed here um and then and then explain",
    "start": "2243280",
    "end": "2248440"
  },
  {
    "text": "how we uh meet that so this is a map uh that forsquare built using mapbox uh of",
    "start": "2248440",
    "end": "2254119"
  },
  {
    "text": "their user base around the world um so forsquare if you go to foursquare.com a",
    "start": "2254119",
    "end": "2259520"
  },
  {
    "text": "big component of their uh web page is the map uh you can search for places to",
    "start": "2259520",
    "end": "2265880"
  },
  {
    "text": "grab dinner get a coffee a coffee with your friends or a beer uh to meet up um and they the point here is that their",
    "start": "2265880",
    "end": "2272760"
  },
  {
    "text": "users are all over the world uh we have customers uh like for where Enterprise",
    "start": "2272760",
    "end": "2278079"
  },
  {
    "text": "customers high volume customers um and we also have customers that are just uh smaller uh but they're maybe based in",
    "start": "2278079",
    "end": "2284160"
  },
  {
    "text": "New Zealand uh or South America the thing is that they want um all these",
    "start": "2284160",
    "end": "2289280"
  },
  {
    "text": "customers want very fast maps and they want highly available Maps uh wherever they are so I'm going to get into next how we",
    "start": "2289280",
    "end": "2296720"
  },
  {
    "text": "uh meet that need and so uh the usage of uh ad's",
    "start": "2296720",
    "end": "2302400"
  },
  {
    "text": "Services by mapbox can be roughly broken down into uh two types uh we have process processing Stacks so to be able",
    "start": "2302400",
    "end": "2310119"
  },
  {
    "text": "to serve Maps we're processing um like our Global streets data is based on a",
    "start": "2310119",
    "end": "2315560"
  },
  {
    "text": "lot of is based on open street map which is like uh Wikipedia uh for maps anyone can create an account and edit",
    "start": "2315560",
    "end": "2322440"
  },
  {
    "text": "Geographic data about uh streets anywhere in the world um add data improve data uh and so on we're also",
    "start": "2322440",
    "end": "2330560"
  },
  {
    "text": "processing uh just last month uh we processed a few pedabytes of satell imagery uh so we have a satellite Bas",
    "start": "2330560",
    "end": "2337040"
  },
  {
    "text": "later that that you're able to use on your Maps as well and we're constantly processing uh changes as they're coming",
    "start": "2337040",
    "end": "2342240"
  },
  {
    "text": "in from uh both satellite and uh sources like open street map and then um before",
    "start": "2342240",
    "end": "2347560"
  },
  {
    "text": "so we have to do this processing before we can serve out any uh API requests um but then we have uh um Stacks that are",
    "start": "2347560",
    "end": "2355200"
  },
  {
    "text": "running our API as well so here's a diagram of uh example architecture uh in",
    "start": "2355200",
    "end": "2361720"
  },
  {
    "text": "the green there you can see open street map changes coming in uh we process those on uh e2s on the Market uh using",
    "start": "2361720",
    "end": "2368760"
  },
  {
    "text": "some applications that we're running uh same thing with routing data a lot of routing data is based on open street map",
    "start": "2368760",
    "end": "2374359"
  },
  {
    "text": "data as well and so as changes come in um one of our goals is to have a map",
    "start": "2374359",
    "end": "2379760"
  },
  {
    "text": "that is accurate to uh the current time so as soon as something changes around the world new stre uh streets are added",
    "start": "2379760",
    "end": "2386440"
  },
  {
    "text": "construction happens uh the order of a direction of a street changes it's changed and so we update that",
    "start": "2386440",
    "end": "2392599"
  },
  {
    "text": "immediately uh so that it's available on everyone's Maps um so then the the blue",
    "start": "2392599",
    "end": "2397640"
  },
  {
    "text": "here uh the platform is what I'm going to talk about uh next and this is a zoom in of that um",
    "start": "2397640",
    "end": "2405480"
  },
  {
    "text": "platform uh so this is an example this is a Maps API Service uh requests originate they come in through clients",
    "start": "2405480",
    "end": "2412079"
  },
  {
    "text": "mobile web uh the hit DNS we're using Route 53 and they'll hit one of uh",
    "start": "2412079",
    "end": "2417359"
  },
  {
    "text": "cloudfronts uh Edge uh caching locations around the world and from there using",
    "start": "2417359",
    "end": "2422560"
  },
  {
    "text": "latency based routing and it will go to one of nine regions around around the world we're running in all nine AB",
    "start": "2422560",
    "end": "2428880"
  },
  {
    "text": "regions around the world and it will hit an elb using latency based routing from",
    "start": "2428880",
    "end": "2434160"
  },
  {
    "text": "there the request will go back and hit application servers and then in order to um serve a",
    "start": "2434160",
    "end": "2441079"
  },
  {
    "text": "map we need to look up um that who that map belongs to so the user and then we",
    "start": "2441079",
    "end": "2447520"
  },
  {
    "text": "need to look up uh the details about that map so like the default zoom level um where the map",
    "start": "2447520",
    "end": "2453400"
  },
  {
    "text": "is centered by default and so on and so all these lookups go go to Dynamo",
    "start": "2453400",
    "end": "2460040"
  },
  {
    "text": "DB and then U once we get those uh that information we need to look up um",
    "start": "2460040",
    "end": "2466119"
  },
  {
    "text": "details uh and get U objects that have been processed um and put through the",
    "start": "2466119",
    "end": "2471319"
  },
  {
    "text": "processing uh part of our Stacks uh outputs are G put up to S3 so um Vector",
    "start": "2471319",
    "end": "2478400"
  },
  {
    "text": "tile data raster tiles that present uh map map data they're stored in S3 so we",
    "start": "2478400",
    "end": "2484119"
  },
  {
    "text": "need to fetch those and then our application will do things like composite uh these objects together",
    "start": "2484119",
    "end": "2490920"
  },
  {
    "text": "color them based on the needs of the particular map and then they're served back",
    "start": "2490920",
    "end": "2496960"
  },
  {
    "text": "out so as I said we're in nine regions around the world and we have a cloudfront uh in over 52 edric locations",
    "start": "2497079",
    "end": "2504960"
  },
  {
    "text": "in front of that so you get a lot of performance gain just by adding a CDN",
    "start": "2504960",
    "end": "2510400"
  },
  {
    "text": "but what I'm going to talk about is then what we do with Dynamo DB in elasticache to then uh save a lot of time in the the",
    "start": "2510400",
    "end": "2517319"
  },
  {
    "text": "back end as well so in dyo DB we store uh we use it as our metadata database uh when you",
    "start": "2517319",
    "end": "2524440"
  },
  {
    "text": "create an account on mapbox.com uh an object is created in Dynamo DB which represents uh your your user and then",
    "start": "2524440",
    "end": "2531400"
  },
  {
    "text": "when you create Maps we're creating documents uh in Dynamo DB that represent those Maps uh Records uh within the",
    "start": "2531400",
    "end": "2537800"
  },
  {
    "text": "database and then we have um things like data sets where you can draw on the map",
    "start": "2537800",
    "end": "2543680"
  },
  {
    "text": "uh draw areas on the map uh shapes um points and so on and then access tokens those are all also documents in Dynamo",
    "start": "2543680",
    "end": "2551599"
  },
  {
    "text": "DB and so we didn't always use Dynamo DB we started off with simple DB um about 5",
    "start": "2551599",
    "end": "2556720"
  },
  {
    "text": "years ago and this is another uh product uh by Amazon we switched off of that",
    "start": "2556720",
    "end": "2562160"
  },
  {
    "text": "because of some of the limitations at the time around uh the types that we could store in there and lengths and we",
    "start": "2562160",
    "end": "2567800"
  },
  {
    "text": "switched to couch TB and we started running our own couch TB Service uh a few servers to start with on ec2 but",
    "start": "2567800",
    "end": "2575280"
  },
  {
    "text": "then we as we were growing over the years um we ended up running uh in three",
    "start": "2575280",
    "end": "2580599"
  },
  {
    "text": "regions uh coub clusters so these clusters consisted of three to six nodes",
    "start": "2580599",
    "end": "2585680"
  },
  {
    "text": "in three regions uh around the world we were replicating between uh the three regions for Global redundency and then",
    "start": "2585680",
    "end": "2593319"
  },
  {
    "text": "just this summer we completed a a total migration to Dynamo DB so we're no no",
    "start": "2593319",
    "end": "2598520"
  },
  {
    "text": "longer running couch DB and uh I'll get into why we did this uh momentarily so first of all though why",
    "start": "2598520",
    "end": "2605480"
  },
  {
    "text": "no SQL uh we don't have a a ton of relations in our database uh between fields for example between columns um so",
    "start": "2605480",
    "end": "2613079"
  },
  {
    "text": "yes users own maps and uh tokens belong to users uh but we're not doing a lot of",
    "start": "2613079",
    "end": "2618720"
  },
  {
    "text": "like ad hoc querying and so on we do do a lot of this but they're in separate um separate Stacks that we're doing",
    "start": "2618720",
    "end": "2624319"
  },
  {
    "text": "analytics on so we use red shift for example we put all our all of our clont logs into red shift and we're able to do",
    "start": "2624319",
    "end": "2631000"
  },
  {
    "text": "operational um queries to see what's going on on the Edge at any given time",
    "start": "2631000",
    "end": "2636559"
  },
  {
    "text": "uh and also business intelligence U queries but this is all on a separate separate databases so we're able to",
    "start": "2636559",
    "end": "2642880"
  },
  {
    "text": "separate those concerns and we have uh new SQL on our API uh which is known um",
    "start": "2642880",
    "end": "2649599"
  },
  {
    "text": "for scalability and for just overall",
    "start": "2649599",
    "end": "2655119"
  },
  {
    "text": "performance and so with C TB uh we running it uh ourselves um does",
    "start": "2655119",
    "end": "2662160"
  },
  {
    "text": "everybody remember heart bed um so when heart bed occurred uh",
    "start": "2662160",
    "end": "2668200"
  },
  {
    "text": "I remember sitting there thinking how are we going to go and uh upgrade SSL",
    "start": "2668200",
    "end": "2675440"
  },
  {
    "text": "open SSL on all of our um database nodes uh upgrade the operating systems uh",
    "start": "2675440",
    "end": "2680520"
  },
  {
    "text": "upgrade engine x uh which we're using as a proxy in front of couch and also",
    "start": "2680520",
    "end": "2685760"
  },
  {
    "text": "thinking about okay so how is couchdb affected we do a lot of uh programming in node.js C++ and other languages but",
    "start": "2685760",
    "end": "2692640"
  },
  {
    "text": "we don't do a lot of earling programming which is what couchdb is written in and um so at the time we're just basically",
    "start": "2692640",
    "end": "2699160"
  },
  {
    "text": "trying to figure out what was affected and so on instead of um focusing time on",
    "start": "2699160",
    "end": "2704440"
  },
  {
    "text": "our application we were dealing with u what to do with this infrastructure so that uh security was maintained and it",
    "start": "2704440",
    "end": "2710599"
  },
  {
    "text": "was a lot of work it is a lot of work and then um we're also thinking at the time like as we're scaling up we're",
    "start": "2710599",
    "end": "2717040"
  },
  {
    "text": "looking at how do we go about partitioning our data across the CB nodes um once data wouldn't fit on",
    "start": "2717040",
    "end": "2723920"
  },
  {
    "text": "single nodes for example and we estimated that would take a month or two of work to be able to make that",
    "start": "2723920",
    "end": "2730000"
  },
  {
    "text": "transition to start partitioning data differently um and just decided that um",
    "start": "2730000",
    "end": "2735680"
  },
  {
    "text": "time is better spent on our application time is better spent on making our product better and not on worrying about",
    "start": "2735680",
    "end": "2741200"
  },
  {
    "text": "those details at this time and so dab it's fast it's available in nine regions",
    "start": "2741200",
    "end": "2746280"
  },
  {
    "text": "the regions where we're running uh and it integrates with other services like cloud trail uh like I",
    "start": "2746280",
    "end": "2752960"
  },
  {
    "text": "am and so looking uh back at this diagram here um as I said we're running",
    "start": "2752960",
    "end": "2758520"
  },
  {
    "text": "our application in nine regions and elastic cach is running in nine regions but S3 and Dynamo DB are running in two",
    "start": "2758520",
    "end": "2765559"
  },
  {
    "text": "regions two to three regions and so I want to talk about why why that is and how we get away with",
    "start": "2765559",
    "end": "2771960"
  },
  {
    "text": "that so there are trade-offs um we want High availability we want very high performance all around the world but",
    "start": "2771960",
    "end": "2778800"
  },
  {
    "text": "also can you imagine if you have we have billions and billions of objects stored in S3 hundreds of terabytes uh stored in",
    "start": "2778800",
    "end": "2786000"
  },
  {
    "text": "S3 of of geographic data and so if we were to store those in all nine regions total copies uh it would just be we",
    "start": "2786000",
    "end": "2793520"
  },
  {
    "text": "wouldn't be competitive cost wise uh and also the complexity for example if we were replicating you know it's complex",
    "start": "2793520",
    "end": "2799559"
  },
  {
    "text": "enough we're using Dy dyb streams in Lambda to replicate between Dynamo DB in",
    "start": "2799559",
    "end": "2805040"
  },
  {
    "text": "three regions but uh if we were replicating between nine regions you know it's the same would be the similar",
    "start": "2805040",
    "end": "2810920"
  },
  {
    "text": "strategy but when something goes wrong it's that much more complexity to deal with uh if replication breaks down or if",
    "start": "2810920",
    "end": "2816640"
  },
  {
    "text": "there's uh something that's inconsistent that we need to deal with uh so it's a trade-off about uh about that but we",
    "start": "2816640",
    "end": "2822599"
  },
  {
    "text": "also how do we how do we get the high performance if we're not running those those services in the same regions so",
    "start": "2822599",
    "end": "2828960"
  },
  {
    "text": "this is where elasticache comes into play for us uh we're we're able to use aach to effectively emulate Dynamo DB",
    "start": "2828960",
    "end": "2836680"
  },
  {
    "text": "and S3 in the regions where those two services are not running um and so uh",
    "start": "2836680",
    "end": "2844800"
  },
  {
    "text": "when a request comes through our application for Dynamo ddb object or an S3 object it goes to elasticache First",
    "start": "2844800",
    "end": "2852359"
  },
  {
    "text": "and checks if it's there if it's not there and this is um you know um much lower latency than going across for",
    "start": "2852359",
    "end": "2858920"
  },
  {
    "text": "example from U Sydney all the way to the United States or to Europe where Dynamo DB or S3 are running um if it's in last",
    "start": "2858920",
    "end": "2865760"
  },
  {
    "text": "cache we we immediately are able to return the request to the user if it's not then we have to go back but but",
    "start": "2865760",
    "end": "2873079"
  },
  {
    "text": "adding that caching layer makes a huge difference so with the last of cach we're able to be faster uh do things",
    "start": "2873079",
    "end": "2879000"
  },
  {
    "text": "much cheaper and it simplifies uh everything a great deal but not not having to deal with replicating",
    "start": "2879000",
    "end": "2886280"
  },
  {
    "text": "everywhere and so this is a glance of what latency looked like before we turned on elastic hash you can see there",
    "start": "2886280",
    "end": "2891880"
  },
  {
    "text": "in uh South America for example is very red red represents um slower more latent",
    "start": "2891880",
    "end": "2897920"
  },
  {
    "text": "um Australia New Zealand um much of Asia even in the Rockies there United States is uh somewhat reddish and if you look",
    "start": "2897920",
    "end": "2905760"
  },
  {
    "text": "once we turn elastic you can see that how it kind of makes a uh made a huge difference actually for us there's",
    "start": "2905760",
    "end": "2911640"
  },
  {
    "text": "another view of it in a graph uh this is a in a region in the United States where elasticache and S3 are not running sorry",
    "start": "2911640",
    "end": "2919359"
  },
  {
    "text": "where Dynamo DB and S3 are not running and this is a cold cache um this",
    "start": "2919359",
    "end": "2924440"
  },
  {
    "text": "represents latency from the elastic low balancer back to the application and then very quickly once the cach the",
    "start": "2924440",
    "end": "2930520"
  },
  {
    "text": "elastic cash cash warms up we drop uh below um well below 150 milliseconds and",
    "start": "2930520",
    "end": "2936280"
  },
  {
    "text": "over the course of an hour or two we get down to latency that's pretty much the",
    "start": "2936280",
    "end": "2941440"
  },
  {
    "text": "same as the latency uh as where we are running Dynamo DB and and and S3 in in",
    "start": "2941440",
    "end": "2947400"
  },
  {
    "text": "the regions where where we run those and so just to conclude uh the main points",
    "start": "2947400",
    "end": "2953200"
  },
  {
    "text": "um to sum this up is uh so we have 170 million users worldwide um that are",
    "start": "2953200",
    "end": "2958520"
  },
  {
    "text": "viewing our Maps uh or our customers Maps they built with mapbox and uh this is how we combine dyb and S3 with alasa",
    "start": "2958520",
    "end": "2966400"
  },
  {
    "text": "cache um to serve requests uh through nine regions and by doing this we're able to",
    "start": "2966400",
    "end": "2972720"
  },
  {
    "text": "cut end user latency in half and do that do it 85% cheaper than the alternative",
    "start": "2972720",
    "end": "2979400"
  },
  {
    "text": "Solutions uh which would be putting the information everywhere in all nine regions and so even with a CDN uh",
    "start": "2979400",
    "end": "2986960"
  },
  {
    "text": "there's a lot of time to save in the back end by uh making choices uh like",
    "start": "2986960",
    "end": "2992119"
  },
  {
    "text": "I've described here and we've learned to lean on abs for many Services we thought you know",
    "start": "2992119",
    "end": "2998000"
  },
  {
    "text": "when we're going to turn on we thought about turning on elasticas re using the reddis in lru mode we thought okay we're",
    "start": "2998000",
    "end": "3003040"
  },
  {
    "text": "going to build a a caching service ourselves right ready let's let's do it",
    "start": "3003040",
    "end": "3008319"
  },
  {
    "text": "then we thought you know what we're about to do is what we did with couchdb we be in that same spot uh again where",
    "start": "3008319",
    "end": "3014920"
  },
  {
    "text": "we'd have to deal with OS upgrades deal with software upgrades uh and all the difficulties around that and so we",
    "start": "3014920",
    "end": "3021040"
  },
  {
    "text": "didn't want to spend our time there uh we wanted to spend it on making mapbox itself better and so",
    "start": "3021040",
    "end": "3027200"
  },
  {
    "text": "um this is just overall uh kind of a a picture of how to use uh different ads",
    "start": "3027200",
    "end": "3033960"
  },
  {
    "text": "Services strategically together to reduce complexity and cost uh and meet meet your business",
    "start": "3033960",
    "end": "3040240"
  },
  {
    "text": "needs and with that uh thank you and uh pass it back to Dan",
    "start": "3040240",
    "end": "3046680"
  },
  {
    "text": "thanks all right first thanks a lot Ian and C for sharing two very interesting",
    "start": "3048920",
    "end": "3054280"
  },
  {
    "text": "use cases um as you can see there's a lot of different things you can do with",
    "start": "3054280",
    "end": "3060000"
  },
  {
    "text": "these building blocks of um Dynamo DB and elastic Cas this has been and we",
    "start": "3060000",
    "end": "3065400"
  },
  {
    "text": "just showed you too this has been a 200 level session there is a lot more to learn about these services and about",
    "start": "3065400",
    "end": "3072280"
  },
  {
    "text": "some of the use cases and design patterns that you can do so for Dynamo DB we have a deep dive session but",
    "start": "3072280",
    "end": "3079440"
  },
  {
    "text": "unfortunately that one happened earlier today however um there will be a recording of that session that I highly",
    "start": "3079440",
    "end": "3086760"
  },
  {
    "text": "recommend as uh there's a lot more into how to build and structure and query the",
    "start": "3086760",
    "end": "3092720"
  },
  {
    "text": "data on Dynamo DB some some of the considerations that could deepen Ian talked about but there's a lot",
    "start": "3092720",
    "end": "3098920"
  },
  {
    "text": "more um there is a workshop today about event driven proc processing programming so that is the one that I mentioned for",
    "start": "3098920",
    "end": "3107119"
  },
  {
    "text": "um Dynamo DB streams and Lambda um It's A New Concept actually we're trying this year it's a workshop so it's not a",
    "start": "3107119",
    "end": "3112559"
  },
  {
    "text": "session you will be trying things um trying things out on your own uh and we",
    "start": "3112559",
    "end": "3119000"
  },
  {
    "text": "have the Dynamo DB for Big Data that's tomorrow that's how do you use Dynamo DB",
    "start": "3119000",
    "end": "3125319"
  },
  {
    "text": "for some of your big data use cases and also some cool examples from other",
    "start": "3125319",
    "end": "3131040"
  },
  {
    "text": "customers as well for elastic cach we have our Deep dive session tomorrow morning when we will go much deeper into",
    "start": "3131040",
    "end": "3138079"
  },
  {
    "text": "both mkd and reddis how to configure each what are some of the again more use case and design patterns um how to",
    "start": "3138079",
    "end": "3144960"
  },
  {
    "text": "configure it correctly what are some of the mistakes to avoid um we also have a very detailed",
    "start": "3144960",
    "end": "3151400"
  },
  {
    "text": "white paper so this deck when it's available you'll have that link but you can also Google elastic cach white paper",
    "start": "3151400",
    "end": "3157240"
  },
  {
    "text": "and you will uh you'll find that with that thank you very much for coming appreciate it um please remember to",
    "start": "3157240",
    "end": "3164319"
  },
  {
    "text": "complete your evaluations we would love to hear your feedback K DPN and me will stay here",
    "start": "3164319",
    "end": "3169760"
  },
  {
    "text": "stick around so please come talk to us if you have any more questions thank you very much",
    "start": "3169760",
    "end": "3176799"
  }
]