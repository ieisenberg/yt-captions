[
  {
    "start": "0",
    "end": "29000"
  },
  {
    "text": "Welcome to another episode\nof 'Back To Basics'.",
    "start": "5043",
    "end": "7838"
  },
  {
    "text": "I'm Peter, and today we'll talk about \nserverless integration patterns",
    "start": "7838",
    "end": "12191"
  },
  {
    "text": "to allow systems to talk to each other.",
    "start": "12191",
    "end": "14600"
  },
  {
    "text": "For certain workloads, you may need to\npass information between systems.",
    "start": "14600",
    "end": "19108"
  },
  {
    "text": "Some can be external systems\nthat you do not control.",
    "start": "19108",
    "end": "23020"
  },
  {
    "text": "So the question is, how do you enable \ncommunication between these systems",
    "start": "23020",
    "end": "27214"
  },
  {
    "text": "if you don't own the code?",
    "start": "27214",
    "end": "29130"
  },
  {
    "start": "29000",
    "end": "59000"
  },
  {
    "text": "Let's say, for example,\nyou have an external application",
    "start": "29130",
    "end": "33171"
  },
  {
    "text": "that sends support tickets\nto your serverless AWS environment.",
    "start": "33172",
    "end": "37228"
  },
  {
    "text": "You may want to perform some sort \nof Natural Language Processing on a ticket",
    "start": "37228",
    "end": "42262"
  },
  {
    "text": "to determine its severity and run sentiment analysis.",
    "start": "42262",
    "end": "46038"
  },
  {
    "text": "What is the right pattern to build an event-based system",
    "start": "46038",
    "end": "50433"
  },
  {
    "text": "that integrates directly with third-party SaaS partners?",
    "start": "50433",
    "end": "53997"
  },
  {
    "text": "The best way to integrate applications together\nis to use Amazon EventBridge.",
    "start": "53998",
    "end": "59754"
  },
  {
    "start": "59000",
    "end": "82000"
  },
  {
    "text": "EventBridge is a flexible, fully-managed, event bus router.",
    "start": "60835",
    "end": "65115"
  },
  {
    "text": "You can directly connect with a growing list\nof SaaS application providers ",
    "start": "65116",
    "end": "69652"
  },
  {
    "text": "and AWS services\nwithout traversing the Internet.",
    "start": "69652",
    "end": "73170"
  },
  {
    "text": "Using a logical connection\nbetween your SaaS provider",
    "start": "73170",
    "end": "76652"
  },
  {
    "text": "and your AWS account,\ntraffic stays on the AWS network,",
    "start": "76652",
    "end": "80740"
  },
  {
    "text": "which helps keep your applications secure.",
    "start": "80740",
    "end": "83146"
  },
  {
    "start": "82000",
    "end": "119000"
  },
  {
    "text": "Let's take a look at the architecture.",
    "start": "84563",
    "end": "86511"
  },
  {
    "text": "From your partner application,\nyou configure your SaaS account",
    "start": "86511",
    "end": "90802"
  },
  {
    "text": "to emit events\nand accept those event sources in EventBridge.",
    "start": "90802",
    "end": "95409"
  },
  {
    "text": "EventBridge automatically creates\nan event bus",
    "start": "95409",
    "end": "98562"
  },
  {
    "text": "that collects these events.",
    "start": "98563",
    "end": "100236"
  },
  {
    "text": "From here, you can configure\nEventBridge rules",
    "start": "100236",
    "end": "104223"
  },
  {
    "text": "to route the event to different targets,\nincluding AWS Lambda.",
    "start": "104223",
    "end": "108453"
  },
  {
    "text": "For instance, you can have Lambda\nprocess these events,",
    "start": "108453",
    "end": "112259"
  },
  {
    "text": "then start an Amazon Comprehend job",
    "start": "112259",
    "end": "115318"
  },
  {
    "text": "to use Natural Language Processing\nto analyze ticket sentiment",
    "start": "115318",
    "end": "119165"
  },
  {
    "start": "119000",
    "end": "156000"
  },
  {
    "text": "and determine its severity.",
    "start": "119165",
    "end": "121385"
  },
  {
    "text": "Events use a specific JSON structure.",
    "start": "121385",
    "end": "124204"
  },
  {
    "text": "All events have the same top level fields\nlike event source, time stamp, and region,",
    "start": "124204",
    "end": "130614"
  },
  {
    "text": "followed by a detail field\nwhich is the body of the event.",
    "start": "130614",
    "end": "134052"
  },
  {
    "text": "Once these events are published\nto an event bus,",
    "start": "134052",
    "end": "137263"
  },
  {
    "text": "you set up rules that match something\nin the event.",
    "start": "137263",
    "end": "140419"
  },
  {
    "text": "Then you can route the event\nto a number of AWS services",
    "start": "140419",
    "end": "144425"
  },
  {
    "text": "as targets for processing.",
    "start": "144425",
    "end": "146364"
  },
  {
    "text": "You can also have multiple event producers",
    "start": "146364",
    "end": "149686"
  },
  {
    "text": "sending different events\nto a single event bus,",
    "start": "149686",
    "end": "152938"
  },
  {
    "text": "and simply use rules to route those different events\nto the appropriate target.",
    "start": "152938",
    "end": "158216"
  },
  {
    "start": "156000",
    "end": "193000"
  },
  {
    "text": "Another common pattern I've seen",
    "start": "158971",
    "end": "160847"
  },
  {
    "text": "is to use Amazon Simple Notification Service,\nor SNS,",
    "start": "160847",
    "end": "165106"
  },
  {
    "text": "for a publisher-subscriber, or pub-sub, architecture\nto process events.",
    "start": "165106",
    "end": "170745"
  },
  {
    "text": "This is a completely valid pattern\nto process events in parallel,",
    "start": "170745",
    "end": "174792"
  },
  {
    "text": "but EventBridge natively integrates\nwith a number of third-party SaaS partners,",
    "start": "174792",
    "end": "179776"
  },
  {
    "text": "so you don't have to deal with the complexities\nof writing custom code",
    "start": "179776",
    "end": "183909"
  },
  {
    "text": "to ingest these events with SNS.",
    "start": "183909",
    "end": "186519"
  },
  {
    "text": "SNS allows you to filter\nbased on message attributes,",
    "start": "187884",
    "end": "191260"
  },
  {
    "text": "but if you need more advanced filtering,\nyou should use Amazon EventBridge.",
    "start": "191260",
    "end": "195564"
  },
  {
    "text": "In our example, you could filter events\nby IP address matches",
    "start": "195565",
    "end": "200681"
  },
  {
    "text": "within the message content",
    "start": "200681",
    "end": "202549"
  },
  {
    "text": "and send those messages\nto separate targets.",
    "start": "202549",
    "end": "205285"
  },
  {
    "text": "EventBridge also has a schema registry",
    "start": "205285",
    "end": "208497"
  },
  {
    "start": "208000",
    "end": "238000"
  },
  {
    "text": "that helps you identify inversion event schemas.",
    "start": "208497",
    "end": "212069"
  },
  {
    "text": "EventBridge has a limit of five targets\nper rule.",
    "start": "212069",
    "end": "216122"
  },
  {
    "text": "in the case where you want to send events\nto hundreds or even thousands of targets,",
    "start": "216122",
    "end": "221023"
  },
  {
    "text": "you can work around this limit\nby publishing to SNS first as a target",
    "start": "221023",
    "end": "226028"
  },
  {
    "text": "and then implement a fan-out pattern\nto have the message in SNS",
    "start": "226028",
    "end": "230897"
  },
  {
    "text": "be consumed by multiple services simultaneously.",
    "start": "230897",
    "end": "233680"
  },
  {
    "text": "This pattern allows you to deliver events\nto Lambda functions",
    "start": "233680",
    "end": "237726"
  },
  {
    "text": "in other AWS accounts\nand other AWS Regions.",
    "start": "237726",
    "end": "241741"
  },
  {
    "start": "238000",
    "end": "281000"
  },
  {
    "text": "If EventBridge fails to send an event\ndue to client-side errors",
    "start": "243329",
    "end": "247444"
  },
  {
    "text": "like target unavailability\nor failed permissions,",
    "start": "247444",
    "end": "250839"
  },
  {
    "text": "EventBridge will retry sending to that target\nfor up to 24 hours.",
    "start": "250839",
    "end": "255541"
  },
  {
    "text": "EventBridge also supports\nDead Letter Queues",
    "start": "256383",
    "end": "259051"
  },
  {
    "text": "via Amazon SQS,\nor Simple Queue Service.",
    "start": "259051",
    "end": "262702"
  },
  {
    "text": "So with failed events,\nyou can capture them in a Dead Letter Queue",
    "start": "262702",
    "end": "267164"
  },
  {
    "text": "and process them later,\nreducing the risk of data loss.",
    "start": "267164",
    "end": "270451"
  },
  {
    "text": "In this episode, we looked at\nhow you can integrate distributed applications together",
    "start": "270451",
    "end": "276300"
  },
  {
    "text": "using Amazon EventBridge.",
    "start": "276300",
    "end": "277970"
  },
  {
    "text": "Check out the links below\nfor more details.",
    "start": "277970",
    "end": "280523"
  },
  {
    "text": "See you next time.",
    "start": "280523",
    "end": "282030"
  }
]