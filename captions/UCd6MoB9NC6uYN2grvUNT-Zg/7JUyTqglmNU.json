[
  {
    "text": "- [Pathik] Hello, my name is Pathik Shah.",
    "start": "1230",
    "end": "3600"
  },
  {
    "text": "I'm a senior big data architect",
    "start": "3600",
    "end": "5220"
  },
  {
    "text": "on the Amazon Athena team at AWS.",
    "start": "5220",
    "end": "8180"
  },
  {
    "text": "In this video, we'll be talking about",
    "start": "8180",
    "end": "10110"
  },
  {
    "text": "visual query execution\nanalysis in Amazon Athena.",
    "start": "10110",
    "end": "13233"
  },
  {
    "text": "I'll briefly introduce\nAmazon Athena service",
    "start": "16050",
    "end": "18269"
  },
  {
    "text": "and then we'll discuss the new\nvisual query analysis tools,",
    "start": "18270",
    "end": "21030"
  },
  {
    "text": "followed by a demo.",
    "start": "21030",
    "end": "22830"
  },
  {
    "text": "At the end,",
    "start": "22830",
    "end": "23663"
  },
  {
    "text": "I will share some resources\nto help you get started.",
    "start": "23663",
    "end": "26120"
  },
  {
    "text": "I'll start by sharing a few\nquick things about Athena.",
    "start": "29820",
    "end": "32936"
  },
  {
    "text": "Athena is a serverless\nanalytics query service",
    "start": "32936",
    "end": "35880"
  },
  {
    "text": "that makes it easy for you\nto analyze your data lake.",
    "start": "35880",
    "end": "39210"
  },
  {
    "text": "You can query your data",
    "start": "39210",
    "end": "40410"
  },
  {
    "text": "without having to set up and manage",
    "start": "40410",
    "end": "42390"
  },
  {
    "text": "any servers or data warehouses.",
    "start": "42390",
    "end": "44820"
  },
  {
    "text": "Just point your data into\nAmazon S3, define the schema,",
    "start": "44820",
    "end": "48720"
  },
  {
    "text": "and start querying using\nthe built-in query editor.",
    "start": "48720",
    "end": "51270"
  },
  {
    "text": "With Amazon Athena,",
    "start": "53250",
    "end": "54287"
  },
  {
    "text": "you pay only for the queries that you run.",
    "start": "54287",
    "end": "57120"
  },
  {
    "text": "You can save from 30% to 90% per query",
    "start": "57120",
    "end": "60480"
  },
  {
    "text": "and get better performance\nby compressing, partitioning,",
    "start": "60480",
    "end": "63630"
  },
  {
    "text": "and converting your data\ninto column formats,",
    "start": "63630",
    "end": "66540"
  },
  {
    "text": "like Parquet or ORC.",
    "start": "66540",
    "end": "67563"
  },
  {
    "text": "Customers running queries in Athena",
    "start": "69564",
    "end": "72202"
  },
  {
    "text": "want to tune their queries",
    "start": "72202",
    "end": "73980"
  },
  {
    "text": "to reduce the overall execution\ntime and the data scan.",
    "start": "73980",
    "end": "78232"
  },
  {
    "text": "They use EXPLAIN and EXPLAIN ANALYZE",
    "start": "78232",
    "end": "81570"
  },
  {
    "text": "to study the query execution\nplan and computational cost.",
    "start": "81570",
    "end": "85620"
  },
  {
    "text": "To make it easier to optimize the query,",
    "start": "85620",
    "end": "87621"
  },
  {
    "text": "we have launched visual\nquery analysis tools.",
    "start": "87621",
    "end": "90393"
  },
  {
    "text": "So let's talk more about it.",
    "start": "91830",
    "end": "93633"
  },
  {
    "text": "Query Plan helps understand\nhow the query will execute",
    "start": "94754",
    "end": "97710"
  },
  {
    "text": "before it's run.",
    "start": "97710",
    "end": "99269"
  },
  {
    "text": "(indistinct) Athena support",
    "start": "99269",
    "end": "101700"
  },
  {
    "text": "a generating EXPLAIN planning text,",
    "start": "101700",
    "end": "103350"
  },
  {
    "text": "JSON in a graphless format.",
    "start": "103350",
    "end": "105479"
  },
  {
    "text": "Customer decide to parse\nthe text or JSON output",
    "start": "105480",
    "end": "108090"
  },
  {
    "text": "using custom tools to\ngenerate a visualization",
    "start": "108090",
    "end": "110729"
  },
  {
    "text": "for better understanding of the query.",
    "start": "110730",
    "end": "112630"
  },
  {
    "text": "Now, with a single click, you\ncan generate the query plan",
    "start": "113610",
    "end": "116550"
  },
  {
    "text": "in either logical or distributed forms",
    "start": "116550",
    "end": "118830"
  },
  {
    "text": "on the Athena console.",
    "start": "118830",
    "end": "120596"
  },
  {
    "text": "This helps validate the SQL statement",
    "start": "120596",
    "end": "123210"
  },
  {
    "text": "and makes it easy to visually understand",
    "start": "123210",
    "end": "125340"
  },
  {
    "text": "the flow of the query.",
    "start": "125340",
    "end": "127280"
  },
  {
    "text": "Later on in the demo,",
    "start": "127280",
    "end": "129119"
  },
  {
    "text": "we will see how easy\nit is to see the joins",
    "start": "129120",
    "end": "131819"
  },
  {
    "text": "used in the query or validate predicate,",
    "start": "131820",
    "end": "134280"
  },
  {
    "text": "push down to the source,",
    "start": "134280",
    "end": "135870"
  },
  {
    "text": "or the operators that\nwill be used in the query.",
    "start": "135870",
    "end": "138269"
  },
  {
    "text": "Once the query has executed,",
    "start": "139830",
    "end": "141780"
  },
  {
    "text": "the total runtime and\ndata scanned by the query",
    "start": "141780",
    "end": "143690"
  },
  {
    "text": "is displayed on the console.",
    "start": "143690",
    "end": "145560"
  },
  {
    "text": "But customers are interested",
    "start": "145560",
    "end": "147180"
  },
  {
    "text": "in learning more about the\nquery execution details.",
    "start": "147180",
    "end": "150045"
  },
  {
    "text": "To study computational\ncost for a Q1 query,",
    "start": "150046",
    "end": "153390"
  },
  {
    "text": "one of the options is\nto use EXPLAIN ANALYZE",
    "start": "153390",
    "end": "155610"
  },
  {
    "text": "which gives output in\nthe form of text or JSON.",
    "start": "155610",
    "end": "158433"
  },
  {
    "text": "This output can be robust,",
    "start": "159360",
    "end": "160770"
  },
  {
    "text": "depending on the complexity of the query.",
    "start": "160770",
    "end": "163110"
  },
  {
    "text": "It can be difficult to\nread and parse the output.",
    "start": "163110",
    "end": "165560"
  },
  {
    "text": "To make this simpler and convenient,",
    "start": "166740",
    "end": "168750"
  },
  {
    "text": "Athena now supports displaying\nquery runtime statistics",
    "start": "168750",
    "end": "171540"
  },
  {
    "text": "on the console after the query\nhas completed the execution.",
    "start": "171540",
    "end": "175428"
  },
  {
    "text": "It will display this time spent",
    "start": "175428",
    "end": "177851"
  },
  {
    "text": "in the different phases of the query,",
    "start": "177851",
    "end": "179940"
  },
  {
    "text": "like queuing, planning,\nrunning, and service processing",
    "start": "179940",
    "end": "183570"
  },
  {
    "text": "along with the size of\ninput and output data.",
    "start": "183570",
    "end": "186596"
  },
  {
    "text": "For queries that require deeper analysis,",
    "start": "186596",
    "end": "189368"
  },
  {
    "text": "you can now examine granular\nquery execution details",
    "start": "189369",
    "end": "192720"
  },
  {
    "text": "presented as an interactive graph",
    "start": "192720",
    "end": "195090"
  },
  {
    "text": "that allows you to\nexplore the flow of data",
    "start": "195090",
    "end": "197459"
  },
  {
    "text": "through our query.",
    "start": "197460",
    "end": "198360"
  },
  {
    "text": "You can use it to identify\nbottlenecks in complex queries,",
    "start": "199590",
    "end": "203099"
  },
  {
    "text": "inspect operators, and\ndetailed execution statistics",
    "start": "203100",
    "end": "206550"
  },
  {
    "text": "for each query stage,",
    "start": "206550",
    "end": "208320"
  },
  {
    "text": "trace the flow of data between stages",
    "start": "208320",
    "end": "210270"
  },
  {
    "text": "to evaluate the impact of query\npredicates, and much more.",
    "start": "210270",
    "end": "214138"
  },
  {
    "text": "Let me show you a few examples",
    "start": "214138",
    "end": "216270"
  },
  {
    "text": "on how you can use the\nquery analysis tools.",
    "start": "216270",
    "end": "218910"
  },
  {
    "text": "This is the Athena console.",
    "start": "218910",
    "end": "220290"
  },
  {
    "text": "I have created a couple\nof tables in advance",
    "start": "220290",
    "end": "222360"
  },
  {
    "text": "on the TPCS data set.",
    "start": "222360",
    "end": "224185"
  },
  {
    "text": "Here's a simple query that we'll run.",
    "start": "224185",
    "end": "226593"
  },
  {
    "text": "As you can see,",
    "start": "227675",
    "end": "228782"
  },
  {
    "text": "there's a new pattern\nover here called EXPLAIN.",
    "start": "228782",
    "end": "231933"
  },
  {
    "text": "Click on it, it will generate\na visual plan of the EXPLAIN.",
    "start": "231933",
    "end": "234704"
  },
  {
    "text": "Let's go ahead and do that.",
    "start": "234704",
    "end": "237209"
  },
  {
    "text": "This is a logical plan of\nthe query that I just showed.",
    "start": "237210",
    "end": "240660"
  },
  {
    "text": "Here, you'll see different operators",
    "start": "240660",
    "end": "242400"
  },
  {
    "text": "used in the query, and\nthe flow of the operators.",
    "start": "242400",
    "end": "245131"
  },
  {
    "text": "(indistinct) to execute the query.",
    "start": "245132",
    "end": "248523"
  },
  {
    "text": "The first stage is a scan filter project",
    "start": "249630",
    "end": "251850"
  },
  {
    "text": "that is responsible for writing the table",
    "start": "251850",
    "end": "253877"
  },
  {
    "text": "and the details of the table\ncan be found over here.",
    "start": "253877",
    "end": "257160"
  },
  {
    "text": "As you can see the\ntable name is Line Item.",
    "start": "257160",
    "end": "259410"
  },
  {
    "text": "There are database name users,\nthen users used as CSTP.",
    "start": "259410",
    "end": "263430"
  },
  {
    "text": "You can also see the\npredicate filters used.",
    "start": "263430",
    "end": "266490"
  },
  {
    "text": "So for example, in this query",
    "start": "266490",
    "end": "267930"
  },
  {
    "text": "we used (indistinct) and\nthis is the filter value.",
    "start": "267930",
    "end": "271443"
  },
  {
    "text": "You can see the subsequent\nstages by rating",
    "start": "272904",
    "end": "276810"
  },
  {
    "text": "from downwards to upwards,",
    "start": "276810",
    "end": "278229"
  },
  {
    "text": "which is evident from the flow\nof TROs, as shown over here.",
    "start": "278229",
    "end": "283023"
  },
  {
    "text": "Now let's look at the distributed plan.",
    "start": "284190",
    "end": "286140"
  },
  {
    "text": "This shows an execution plan",
    "start": "289500",
    "end": "290820"
  },
  {
    "text": "in a distributed environment,\nwhich comprises of stages.",
    "start": "290820",
    "end": "294870"
  },
  {
    "text": "Each stage is processed\nby one or more nodes,",
    "start": "294870",
    "end": "297607"
  },
  {
    "text": "stage flow represents a data exchange",
    "start": "297607",
    "end": "299910"
  },
  {
    "text": "between cluster nodes.",
    "start": "299910",
    "end": "301203"
  },
  {
    "text": "Once you click on this stage,",
    "start": "302450",
    "end": "304620"
  },
  {
    "text": "on the right hand side\nyou'll see the operators",
    "start": "304620",
    "end": "306510"
  },
  {
    "text": "that are used in this stage.",
    "start": "306510",
    "end": "308340"
  },
  {
    "text": "Let's look at the operators in detail.",
    "start": "308340",
    "end": "310240"
  },
  {
    "text": "So hit the expand button,",
    "start": "311190",
    "end": "312390"
  },
  {
    "text": "and you'll be able to\nsee all the operators",
    "start": "312390",
    "end": "315000"
  },
  {
    "text": "used in the stage.",
    "start": "315000",
    "end": "316080"
  },
  {
    "text": "For this stage, we have only one operator,",
    "start": "316080",
    "end": "318330"
  },
  {
    "text": "which is ScanFilterProject,",
    "start": "318330",
    "end": "320400"
  },
  {
    "text": "but there will be stages",
    "start": "320400",
    "end": "321750"
  },
  {
    "text": "that would have more than one operators.",
    "start": "321750",
    "end": "323670"
  },
  {
    "text": "So this is a good view for such stages",
    "start": "323670",
    "end": "327600"
  },
  {
    "text": "where you want to look into the details",
    "start": "327600",
    "end": "329580"
  },
  {
    "text": "on the properties of\nthe operators and stuff.",
    "start": "329580",
    "end": "332133"
  },
  {
    "text": "Stage zero is the final stage\nwhere output is gathered",
    "start": "334920",
    "end": "339030"
  },
  {
    "text": "and written back to S3.",
    "start": "339030",
    "end": "342629"
  },
  {
    "text": "Let's run the query.",
    "start": "342629",
    "end": "344273"
  },
  {
    "text": "As you can see over here,",
    "start": "347550",
    "end": "348569"
  },
  {
    "text": "there's a new tab called Query Stats,",
    "start": "348570",
    "end": "350788"
  },
  {
    "text": "which shows details on how\nmuch data was processed,",
    "start": "350788",
    "end": "355199"
  },
  {
    "text": "how many input rows were\nfed into the engine,",
    "start": "355200",
    "end": "358800"
  },
  {
    "text": "how many rows were part of the output.",
    "start": "358800",
    "end": "362039"
  },
  {
    "text": "For this query it seems that",
    "start": "362040",
    "end": "364110"
  },
  {
    "text": "there were around 600 million rows,",
    "start": "364110",
    "end": "365879"
  },
  {
    "text": "and the input size was 74 GB.",
    "start": "365880",
    "end": "368520"
  },
  {
    "text": "And the number of output\nrows produced were 248,000.",
    "start": "368520",
    "end": "372720"
  },
  {
    "text": "And the size of the output\nfile is around 2.37 MB.",
    "start": "372720",
    "end": "375923"
  },
  {
    "text": "Also, you'll be able to\nsee the query timeline,",
    "start": "379380",
    "end": "381506"
  },
  {
    "text": "which shows us different\nphase of the query",
    "start": "381506",
    "end": "384060"
  },
  {
    "text": "that is queuing, planning,\nexecution and service processing.",
    "start": "384060",
    "end": "388290"
  },
  {
    "text": "Queuing is a phase",
    "start": "388290",
    "end": "389430"
  },
  {
    "text": "where query waits for resource allocation.",
    "start": "389430",
    "end": "391770"
  },
  {
    "text": "Planning is a phase where it\ndrives metadata from the table",
    "start": "391770",
    "end": "396029"
  },
  {
    "text": "and schedules the task.",
    "start": "396029",
    "end": "398280"
  },
  {
    "text": "Execution is the phase where it performs",
    "start": "398280",
    "end": "400111"
  },
  {
    "text": "the actual operations on the engine,",
    "start": "400111",
    "end": "402669"
  },
  {
    "text": "and service processing is a phase",
    "start": "402670",
    "end": "405104"
  },
  {
    "text": "where it takes time to\nupload the results to S3.",
    "start": "405104",
    "end": "409143"
  },
  {
    "text": "For this query, like you can see,",
    "start": "410272",
    "end": "412317"
  },
  {
    "text": "the maximum amount of time was\nspent in the execution stage.",
    "start": "412317",
    "end": "415680"
  },
  {
    "text": "Now, let's say we want to see more details",
    "start": "415680",
    "end": "418440"
  },
  {
    "text": "on what was generated\nin the execution phase.",
    "start": "418440",
    "end": "422034"
  },
  {
    "text": "Let's click on Execution Details.",
    "start": "422034",
    "end": "424233"
  },
  {
    "text": "Now you can see the execution stage",
    "start": "429720",
    "end": "431616"
  },
  {
    "text": "comprises of a flow chart,",
    "start": "431616",
    "end": "433710"
  },
  {
    "text": "which shows different stages\ninvolved in the query.",
    "start": "433710",
    "end": "436979"
  },
  {
    "text": "Where a query is executed,",
    "start": "436980",
    "end": "438420"
  },
  {
    "text": "execution is divided into\na hierarchy of stages.",
    "start": "438420",
    "end": "441600"
  },
  {
    "text": "Each query has a root stage,",
    "start": "441600",
    "end": "443100"
  },
  {
    "text": "which is responsible for\naggregating the output",
    "start": "443100",
    "end": "445020"
  },
  {
    "text": "from other stages.",
    "start": "445020",
    "end": "446669"
  },
  {
    "text": "If you click on the stage, you\nwill see different operators.",
    "start": "446670",
    "end": "448940"
  },
  {
    "text": "An operator consumes,\ntransforms, and produces data.",
    "start": "448940",
    "end": "452812"
  },
  {
    "text": "For example, the ScanFilter operator",
    "start": "452812",
    "end": "455880"
  },
  {
    "text": "fetches data from a connector,",
    "start": "455880",
    "end": "457860"
  },
  {
    "text": "applies the filter predicate,",
    "start": "457860",
    "end": "459030"
  },
  {
    "text": "and parses the subject of the data",
    "start": "459030",
    "end": "460552"
  },
  {
    "text": "as input to the next operator.",
    "start": "460552",
    "end": "462603"
  },
  {
    "text": "The execution time shown over here",
    "start": "463931",
    "end": "466380"
  },
  {
    "text": "is the time taken to execute the stage.",
    "start": "466380",
    "end": "468988"
  },
  {
    "text": "This helps in determining\nwhich stage is expensive,",
    "start": "468988",
    "end": "471420"
  },
  {
    "text": "and in turn you can turn to the operator",
    "start": "471420",
    "end": "473730"
  },
  {
    "text": "using the stage to see",
    "start": "473730",
    "end": "475805"
  },
  {
    "text": "if you can optimize the operator usage.",
    "start": "475805",
    "end": "477600"
  },
  {
    "text": "For example, for this query,",
    "start": "477600",
    "end": "479370"
  },
  {
    "text": "we can see that maximum of\ntime was spent in stage one.",
    "start": "479370",
    "end": "483479"
  },
  {
    "text": "So let's click on it.",
    "start": "483480",
    "end": "485001"
  },
  {
    "text": "On the right hand side\nyou'll see the, again,",
    "start": "485001",
    "end": "488550"
  },
  {
    "text": "the similar stats,",
    "start": "488550",
    "end": "489629"
  },
  {
    "text": "like how much data was fed into this stage",
    "start": "489630",
    "end": "492000"
  },
  {
    "text": "and how much of data was\noutput by this stage.",
    "start": "492000",
    "end": "494669"
  },
  {
    "text": "Along with the execution time.",
    "start": "494669",
    "end": "496920"
  },
  {
    "text": "You can also see the\noperator details over here,",
    "start": "496920",
    "end": "499467"
  },
  {
    "text": "which is similar to the\none we saw in EXPLAIN plan.",
    "start": "499467",
    "end": "502263"
  },
  {
    "text": "Let's click the stage zero.",
    "start": "506767",
    "end": "508117"
  },
  {
    "text": "So this is a stage\nwhich is responsible for",
    "start": "509261",
    "end": "510763"
  },
  {
    "text": "aggregating all the outputs together",
    "start": "510763",
    "end": "512969"
  },
  {
    "text": "and then write it back to S3.",
    "start": "512970",
    "end": "516209"
  },
  {
    "text": "So let's click on expand all.",
    "start": "516210",
    "end": "518669"
  },
  {
    "text": "Now you can see here,",
    "start": "518670",
    "end": "520079"
  },
  {
    "text": "remote source means that the\ndata was fed from stage one,",
    "start": "520080",
    "end": "523860"
  },
  {
    "text": "and then the next operator\nwas the output operator,",
    "start": "523860",
    "end": "526709"
  },
  {
    "text": "which was responsible\nfor putting two columns,",
    "start": "526710",
    "end": "529420"
  },
  {
    "text": "(indistinct) key and part key.",
    "start": "529420",
    "end": "531803"
  },
  {
    "text": "And as part of this, the\ninput size was around 2.37 MB",
    "start": "531803",
    "end": "536803"
  },
  {
    "text": "and output size was also similar.",
    "start": "537690",
    "end": "539340"
  },
  {
    "text": "All right, so now let's see",
    "start": "541182",
    "end": "543960"
  },
  {
    "text": "how we can use these details\nto optimize our query.",
    "start": "543960",
    "end": "547203"
  },
  {
    "text": "For example, this is the\nquery that joins two tables",
    "start": "548310",
    "end": "552090"
  },
  {
    "text": "and performs (indistinct) operation.",
    "start": "552090",
    "end": "553890"
  },
  {
    "text": "Let's hit the EXPLAIN plan.",
    "start": "556680",
    "end": "558029"
  },
  {
    "text": "Now you can see over here,",
    "start": "562843",
    "end": "563676"
  },
  {
    "text": "this is a distributed plan of the query,",
    "start": "563676",
    "end": "565770"
  },
  {
    "text": "but let's check the logical plan first.",
    "start": "565770",
    "end": "568173"
  },
  {
    "text": "As you can see over here,\nthe query is performing join,",
    "start": "577380",
    "end": "580080"
  },
  {
    "text": "and you can also see what other tables",
    "start": "580080",
    "end": "581700"
  },
  {
    "text": "are being fed into the join.",
    "start": "581700",
    "end": "583607"
  },
  {
    "text": "For this query, in the\nScanFilter operator,",
    "start": "583607",
    "end": "586830"
  },
  {
    "text": "we can see that the table\nthat is being read over here",
    "start": "586830",
    "end": "590700"
  },
  {
    "text": "is part table.",
    "start": "590700",
    "end": "592320"
  },
  {
    "text": "And on the other side,\nthere's a ScanProject stage,",
    "start": "592320",
    "end": "596453"
  },
  {
    "text": "which is responsible for\nreading table line item.",
    "start": "597600",
    "end": "600272"
  },
  {
    "text": "This layout tells that the table part",
    "start": "602130",
    "end": "604920"
  },
  {
    "text": "is on the left hand side of the join,",
    "start": "604920",
    "end": "607019"
  },
  {
    "text": "whereas table line items on the\nright hand side of the join.",
    "start": "607020",
    "end": "610261"
  },
  {
    "text": "It's for the best practices,",
    "start": "610261",
    "end": "612380"
  },
  {
    "text": "the corrector of join\nshould be (indistinct)",
    "start": "612380",
    "end": "615420"
  },
  {
    "text": "such that the table with\nhighest number of data",
    "start": "615420",
    "end": "617730"
  },
  {
    "text": "should be on the left\nhand side of the join.",
    "start": "617730",
    "end": "619889"
  },
  {
    "text": "The table with less number of data",
    "start": "619890",
    "end": "621330"
  },
  {
    "text": "should be on the right\nhand side of the join.",
    "start": "621330",
    "end": "624060"
  },
  {
    "text": "If you know your table sizes in advance,",
    "start": "624060",
    "end": "626340"
  },
  {
    "text": "this layout helps (indistinct)",
    "start": "626340",
    "end": "627513"
  },
  {
    "text": "that the correct join order is followed.",
    "start": "627513",
    "end": "629910"
  },
  {
    "text": "For the demo purpose,\nI used a simple query,",
    "start": "629910",
    "end": "632040"
  },
  {
    "text": "but if you have a complex query,",
    "start": "632040",
    "end": "634170"
  },
  {
    "text": "this layout will be useful",
    "start": "634170",
    "end": "636120"
  },
  {
    "text": "in validating the orders\nof the join is correct.",
    "start": "636120",
    "end": "639690"
  },
  {
    "text": "Then after the join stage,",
    "start": "639690",
    "end": "641220"
  },
  {
    "text": "there is aggregate partial stage,",
    "start": "641220",
    "end": "643529"
  },
  {
    "text": "followed by some (indistinct)",
    "start": "643530",
    "end": "645990"
  },
  {
    "text": "and then again, an aggregate stage.",
    "start": "645990",
    "end": "648089"
  },
  {
    "text": "So this is for counting\nthe number of records",
    "start": "648090",
    "end": "651120"
  },
  {
    "text": "that is being output as\npart of the join operation.",
    "start": "651120",
    "end": "654420"
  },
  {
    "text": "And finally, there is an output stage,",
    "start": "654420",
    "end": "656220"
  },
  {
    "text": "which is responsible for\nwriting results back to S3.",
    "start": "656220",
    "end": "658819"
  },
  {
    "text": "Now, let's study the execution\ndetails of this query.",
    "start": "659760",
    "end": "662410"
  },
  {
    "text": "As you can see over here,\nthere are four stages involved.",
    "start": "665460",
    "end": "668550"
  },
  {
    "text": "Let's see the results of stage one.",
    "start": "668550",
    "end": "670300"
  },
  {
    "text": "The stage one comprises of inner join,",
    "start": "676020",
    "end": "678360"
  },
  {
    "text": "which gets data from a remote source two,",
    "start": "678360",
    "end": "682140"
  },
  {
    "text": "which is the stage two,",
    "start": "682140",
    "end": "683670"
  },
  {
    "text": "and remote source three,\nwhich is the stage three.",
    "start": "683670",
    "end": "688083"
  },
  {
    "text": "As you can see, the stage two\nis filling 20 million rows",
    "start": "693720",
    "end": "698720"
  },
  {
    "text": "and stage three is\nfilling 600 million rows.",
    "start": "699030",
    "end": "701703"
  },
  {
    "text": "Now let's see what table\nis involved in stage two.",
    "start": "702660",
    "end": "705160"
  },
  {
    "text": "So in stage two, it's\nreading the table part.",
    "start": "707160",
    "end": "711003"
  },
  {
    "text": "And in stage three, it's\nreading the table line item.",
    "start": "712020",
    "end": "716283"
  },
  {
    "text": "Now, let's come back to\nthe join order again.",
    "start": "717240",
    "end": "720510"
  },
  {
    "text": "As you can see, the table\npart is small over here,",
    "start": "720510",
    "end": "724530"
  },
  {
    "text": "since it's only outputting\n267 megabytes of data,",
    "start": "724530",
    "end": "729240"
  },
  {
    "text": "whereas stage three has\noutput 7.8 gigabytes of data.",
    "start": "729240",
    "end": "734193"
  },
  {
    "text": "So here, the order of join",
    "start": "735270",
    "end": "737640"
  },
  {
    "text": "does not follow the best practice,",
    "start": "737640",
    "end": "739470"
  },
  {
    "text": "which can be validated\nby the execution details.",
    "start": "739470",
    "end": "742142"
  },
  {
    "text": "Let's go back and try\nchange the order of the join",
    "start": "743142",
    "end": "746610"
  },
  {
    "text": "and see the difference in the\nexecution time of stage one.",
    "start": "746610",
    "end": "749763"
  },
  {
    "text": "All right, let's check what\ntable was used in stage two.",
    "start": "764790",
    "end": "768610"
  },
  {
    "text": "So in stage two over here,",
    "start": "768610",
    "end": "771089"
  },
  {
    "text": "it's written data from table line item.",
    "start": "771090",
    "end": "773373"
  },
  {
    "text": "And in stage three, it's\nwritten data from table part.",
    "start": "775770",
    "end": "779043"
  },
  {
    "text": "So here, now stage two is\nfilling 7.8 gigs of data,",
    "start": "780000",
    "end": "784650"
  },
  {
    "text": "and stage three is filing\n267 megabytes of data.",
    "start": "784650",
    "end": "787620"
  },
  {
    "text": "So this is like the\ncorrect order of join now,",
    "start": "787620",
    "end": "790650"
  },
  {
    "text": "which means that stage two,",
    "start": "790650",
    "end": "793530"
  },
  {
    "text": "which is reading table from line item",
    "start": "793530",
    "end": "795480"
  },
  {
    "text": "is on the left hand side of the join,",
    "start": "795480",
    "end": "797310"
  },
  {
    "text": "and stage three, which\nis reading part table",
    "start": "797310",
    "end": "800220"
  },
  {
    "text": "is on right hand side of the join.",
    "start": "800220",
    "end": "802500"
  },
  {
    "text": "And as you can see,",
    "start": "802500",
    "end": "803610"
  },
  {
    "text": "the execution time of\nstage one is 28 minutes.",
    "start": "803610",
    "end": "806670"
  },
  {
    "text": "Whereas the execution time\nin the previous query was,",
    "start": "806670",
    "end": "810570"
  },
  {
    "text": "let's go back and check.",
    "start": "810570",
    "end": "812370"
  },
  {
    "text": "Yeah, it was 40 minutes for stage one.",
    "start": "812370",
    "end": "814950"
  },
  {
    "text": "So the correct order of the join",
    "start": "814950",
    "end": "816750"
  },
  {
    "text": "helps in reducing the time\nspent in that operation",
    "start": "816750",
    "end": "819660"
  },
  {
    "text": "and the execution datas\nwill help you optimize that.",
    "start": "819660",
    "end": "824160"
  },
  {
    "text": "Now let's take example of a query",
    "start": "824160",
    "end": "826089"
  },
  {
    "text": "where a number of partitions\nis being bottlenecked.",
    "start": "826089",
    "end": "829609"
  },
  {
    "text": "In this table, call one\nis the partition field,",
    "start": "829609",
    "end": "833520"
  },
  {
    "text": "which has around 100,000 partitions.",
    "start": "833520",
    "end": "836700"
  },
  {
    "text": "This query took around 18 seconds to run.",
    "start": "836700",
    "end": "840420"
  },
  {
    "text": "As you can see,",
    "start": "840420",
    "end": "841440"
  },
  {
    "text": "the query has filtered on\ncall one between one and 100.",
    "start": "841440",
    "end": "845250"
  },
  {
    "text": "Now let's check the query stats.",
    "start": "845250",
    "end": "846963"
  },
  {
    "text": "Here, the time spent in\nplanning phase is seven seconds,",
    "start": "849660",
    "end": "853079"
  },
  {
    "text": "which comprises of 94% of\nthe query execution time.",
    "start": "853080",
    "end": "856203"
  },
  {
    "text": "In order to reduce the time spent",
    "start": "858420",
    "end": "860190"
  },
  {
    "text": "in planning phase that\nis returning metadata",
    "start": "860190",
    "end": "862140"
  },
  {
    "text": "from Glue catalog,",
    "start": "862140",
    "end": "863550"
  },
  {
    "text": "there are a couple of ways to optimize it.",
    "start": "863550",
    "end": "866040"
  },
  {
    "text": "You can use partition\nindexing on the Glue table,",
    "start": "866040",
    "end": "869310"
  },
  {
    "text": "which will push down the filter",
    "start": "869310",
    "end": "871219"
  },
  {
    "text": "which is between one\nand 100 to the catalog,",
    "start": "871219",
    "end": "874140"
  },
  {
    "text": "and it will only retrieve the metadata",
    "start": "874140",
    "end": "876210"
  },
  {
    "text": "ranging from 1 to 100.",
    "start": "876210",
    "end": "877980"
  },
  {
    "text": "I've already run an example query on this.",
    "start": "877980",
    "end": "880920"
  },
  {
    "text": "So here it's, again, similar table,",
    "start": "880920",
    "end": "883154"
  },
  {
    "text": "where call one is the partition field",
    "start": "883155",
    "end": "885600"
  },
  {
    "text": "and the filter is also the same.",
    "start": "885600",
    "end": "887790"
  },
  {
    "text": "It is around 100,000 partitions.",
    "start": "887790",
    "end": "890310"
  },
  {
    "text": "As you can see,",
    "start": "890310",
    "end": "891300"
  },
  {
    "text": "the time spent in planning\nphase was 565 milliseconds,",
    "start": "891300",
    "end": "895411"
  },
  {
    "text": "which has reduced drastically\nfrom the previous table",
    "start": "895411",
    "end": "899460"
  },
  {
    "text": "where the partition\nindexing was not relevant.",
    "start": "899460",
    "end": "903011"
  },
  {
    "text": "You can also use partition projection",
    "start": "903011",
    "end": "905550"
  },
  {
    "text": "to reduce time spent in planning phase.",
    "start": "905550",
    "end": "907920"
  },
  {
    "text": "This way, the query\nstats help you optimize",
    "start": "907920",
    "end": "910709"
  },
  {
    "text": "the partitioning used\nfor your table and query.",
    "start": "910710",
    "end": "914030"
  },
  {
    "text": "In this example,",
    "start": "914030",
    "end": "915420"
  },
  {
    "text": "let's examine the GROUP BY\nclause behavior for this query.",
    "start": "915420",
    "end": "920130"
  },
  {
    "text": "As you can see,",
    "start": "920130",
    "end": "920963"
  },
  {
    "text": "we are using four columns\nin the GROUP BY clause.",
    "start": "920963",
    "end": "923553"
  },
  {
    "text": "I already ran the query once",
    "start": "924446",
    "end": "926279"
  },
  {
    "text": "and it took around 35 seconds to run.",
    "start": "926280",
    "end": "929100"
  },
  {
    "text": "Let's see the execution details.",
    "start": "929100",
    "end": "930699"
  },
  {
    "text": "From these execution details,",
    "start": "932580",
    "end": "933870"
  },
  {
    "text": "we see that the stage two spent\nmaximum time in executing.",
    "start": "933870",
    "end": "938870"
  },
  {
    "text": "Let's see what's going on.",
    "start": "939604",
    "end": "941250"
  },
  {
    "text": "So this stage has ScanProject operator",
    "start": "941250",
    "end": "943390"
  },
  {
    "text": "which fed the output to\nthe aggregate operator.",
    "start": "944276",
    "end": "947040"
  },
  {
    "text": "This aggregate is being performed",
    "start": "947040",
    "end": "949500"
  },
  {
    "text": "as part of the GROUP BY\nclause on the four columns,",
    "start": "949500",
    "end": "952388"
  },
  {
    "text": "which we can see over here.",
    "start": "952388",
    "end": "954723"
  },
  {
    "text": "Now let's say we want\nto reduce the runtime",
    "start": "958380",
    "end": "962010"
  },
  {
    "text": "of this query from 35 seconds.",
    "start": "962010",
    "end": "965130"
  },
  {
    "text": "So what can we do?",
    "start": "965130",
    "end": "966483"
  },
  {
    "text": "The GROUP BY operator distributes rows",
    "start": "967950",
    "end": "969780"
  },
  {
    "text": "based on the GROUP BY\ncolumns to worker nodes,",
    "start": "969780",
    "end": "972549"
  },
  {
    "text": "which hold the values in memory.",
    "start": "972549",
    "end": "974996"
  },
  {
    "text": "As the rows are being ingested,",
    "start": "974996",
    "end": "977358"
  },
  {
    "text": "the GROUP BY columns\nare looked up in memory,",
    "start": "977358",
    "end": "979676"
  },
  {
    "text": "and the values are compared.",
    "start": "979677",
    "end": "981798"
  },
  {
    "text": "So in order to optimize the\nperformance of GROUP BY,",
    "start": "981798",
    "end": "984993"
  },
  {
    "text": "you can limit the number of columns",
    "start": "984994",
    "end": "987630"
  },
  {
    "text": "within the SELECT and GROUP BY clause",
    "start": "987630",
    "end": "989430"
  },
  {
    "text": "to reduce the amount of\nmemory required to store,",
    "start": "989430",
    "end": "991820"
  },
  {
    "text": "because rows are held in memory",
    "start": "991820",
    "end": "993930"
  },
  {
    "text": "and aggregated for the GROUP BY clause.",
    "start": "993930",
    "end": "995880"
  },
  {
    "text": "Let's see an example where\nthe number of GROUP BY clause",
    "start": "997560",
    "end": "1000285"
  },
  {
    "text": "have been reduced to two compared to four.",
    "start": "1000285",
    "end": "1004222"
  },
  {
    "text": "As you can see here,",
    "start": "1005750",
    "end": "1006640"
  },
  {
    "text": "we are using only two columns\nin the GROUP BY clause,",
    "start": "1006640",
    "end": "1009680"
  },
  {
    "text": "and this query took around\nseven seconds to run.",
    "start": "1009680",
    "end": "1013010"
  },
  {
    "text": "Let's check the execution details.",
    "start": "1013010",
    "end": "1014873"
  },
  {
    "text": "As you can see,",
    "start": "1016940",
    "end": "1017960"
  },
  {
    "text": "the stage two ran in\none hour and 18 minutes,",
    "start": "1017960",
    "end": "1021620"
  },
  {
    "text": "where the GROUP BY clause\nhad only two columns,",
    "start": "1021620",
    "end": "1024652"
  },
  {
    "text": "like seen here.",
    "start": "1025700",
    "end": "1026899"
  },
  {
    "text": "Whereas the query where\nthe number of columns",
    "start": "1026900",
    "end": "1029959"
  },
  {
    "text": "in the GROUP BY clause were four,",
    "start": "1029960",
    "end": "1031159"
  },
  {
    "text": "the stage ran in two hours and 20 minutes.",
    "start": "1031160",
    "end": "1034910"
  },
  {
    "text": "And the output data was\naround 38 gigabytes.",
    "start": "1034910",
    "end": "1038366"
  },
  {
    "text": "Whereas for the query\nthat only had two columns,",
    "start": "1038367",
    "end": "1042379"
  },
  {
    "text": "the output data was four gigabytes.",
    "start": "1042380",
    "end": "1044449"
  },
  {
    "text": "So overall, this query ran faster",
    "start": "1044450",
    "end": "1046309"
  },
  {
    "text": "compared to the query with four columns",
    "start": "1046310",
    "end": "1049070"
  },
  {
    "text": "in the GROUP BY clause.",
    "start": "1049070",
    "end": "1050220"
  },
  {
    "text": "This way, the execution datas",
    "start": "1051140",
    "end": "1052580"
  },
  {
    "text": "will help you optimize different operators",
    "start": "1052580",
    "end": "1054980"
  },
  {
    "text": "used in your queries.",
    "start": "1054980",
    "end": "1056450"
  },
  {
    "text": "To help you get started,\nhere are some resources.",
    "start": "1056450",
    "end": "1059081"
  },
  {
    "text": "The links for these resources",
    "start": "1059082",
    "end": "1060740"
  },
  {
    "text": "are in the description panel of the video.",
    "start": "1060740",
    "end": "1063290"
  },
  {
    "text": "The What's New post and\nAthena documentation",
    "start": "1063290",
    "end": "1065480"
  },
  {
    "text": "have more details on the\nfeatures we discussed today.",
    "start": "1065480",
    "end": "1068570"
  },
  {
    "text": "The blog on Top Ten\nPerformance Tuning Tips",
    "start": "1068570",
    "end": "1070820"
  },
  {
    "text": "is a good reference for\noptimizing the Athena queries.",
    "start": "1070820",
    "end": "1073519"
  },
  {
    "text": "Thanks for watching this video,",
    "start": "1076700",
    "end": "1077960"
  },
  {
    "text": "and your continued use of Athena.",
    "start": "1077960",
    "end": "1079940"
  },
  {
    "text": "If you have questions\nor feedback to share,",
    "start": "1079940",
    "end": "1081799"
  },
  {
    "text": "please reach out to us at\nthe displayed email address.",
    "start": "1081800",
    "end": "1084710"
  },
  {
    "text": "Thank you.",
    "start": "1084710",
    "end": "1085543"
  }
]