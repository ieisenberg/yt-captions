[
  {
    "text": "good Morgan my name is Adam bristling well it's mine delicious funk that means",
    "start": "4460",
    "end": "12420"
  },
  {
    "text": "good right so therefore I will be doing the rest of this in English so thank you",
    "start": "12420",
    "end": "19920"
  },
  {
    "text": "for joining us on our database trek way almost got applause Wow see if I can",
    "start": "19920",
    "end": "25949"
  },
  {
    "text": "earn some later I have the easiest job at Amazon Web Services because I am the",
    "start": "25949",
    "end": "32488"
  },
  {
    "text": "chief evangelist for database analytics and machine learning which means my job is to make you excited about data this",
    "start": "32489",
    "end": "40199"
  },
  {
    "text": "is not hard because if you were here you're excited about data right okay",
    "start": "40199",
    "end": "46890"
  },
  {
    "text": "let's have something every so often today I'm going to ask you a yes-or-no question for yes do this for know do",
    "start": "46890",
    "end": "54059"
  },
  {
    "text": "this okay that's something there we go",
    "start": "54059",
    "end": "59150"
  },
  {
    "text": "so let's try that again is everybody here excited about data yeah okay about",
    "start": "59150",
    "end": "64948"
  },
  {
    "text": "three-quarters you did this and about 1/4 of you did this I'm not sure what",
    "start": "64949",
    "end": "71640"
  },
  {
    "text": "that means but we'll we'll figure it out later I live in Oregon so in Oregon that means",
    "start": "71640",
    "end": "78030"
  },
  {
    "text": "that you're using a certain herbs that I don't think are legal in Germany for personal use but not my problem all",
    "start": "78030",
    "end": "85890"
  },
  {
    "text": "right so before we go into the formal presentation I was just going to talk a little bit about the things that we do",
    "start": "85890",
    "end": "92370"
  },
  {
    "text": "the databases and analytics at AWS because we divide all this up into a",
    "start": "92370",
    "end": "98580"
  },
  {
    "text": "couple of large categories so one category over here is the relational databases we'll talk more about each of",
    "start": "98580",
    "end": "105600"
  },
  {
    "text": "these later but the whole idea there is to have manage services and we've",
    "start": "105600",
    "end": "111120"
  },
  {
    "text": "discovered that managed services are the key to doing a lot of interesting things like being able to operate at large",
    "start": "111120",
    "end": "116580"
  },
  {
    "text": "scale and being able to do micro services now if you're old like I am you",
    "start": "116580",
    "end": "122340"
  },
  {
    "text": "remember not that long ago maybe 10 years ago all the database questions are done everything was relational right the",
    "start": "122340",
    "end": "129179"
  },
  {
    "text": "only question was should you use Oracle or db2 or Microsoft but we're now in a world we're seeing a whole revolution of",
    "start": "129179",
    "end": "135540"
  },
  {
    "text": "not relational things coming up so we'll talk a little bit later today about what",
    "start": "135540",
    "end": "141080"
  },
  {
    "text": "we're doing with things like DynamoDB ElastiCache in neptune as well as other things going on in this non-relational",
    "start": "141080",
    "end": "147050"
  },
  {
    "text": "revolution then of course we have the world over here of analytics so the many",
    "start": "147050",
    "end": "152930"
  },
  {
    "text": "things that we can do to understand data and see what's happening with the data now the challenging thing let's see if I",
    "start": "152930",
    "end": "158810"
  },
  {
    "text": "can do this in the light is to keep all of these different databases analytics working together so that we have some",
    "start": "158810",
    "end": "164720"
  },
  {
    "text": "way to get some answers ok that's as much judgment as I'm going to do the",
    "start": "164720",
    "end": "170720"
  },
  {
    "text": "other thing to be aware of is that today we are being live broadcast on Twitch so",
    "start": "170720",
    "end": "179019"
  },
  {
    "text": "I'm going to ask you to feel free to ask any questions but normally I just ask",
    "start": "179019",
    "end": "185090"
  },
  {
    "text": "you to shout them out because we're being broadcast today I need you to raise your hand so we can get to a",
    "start": "185090",
    "end": "190880"
  },
  {
    "text": "microphone so here you're looking at a picture of me talking to you while I'm talking to you on the picture on Twitch",
    "start": "190880",
    "end": "196900"
  },
  {
    "text": "this also means that if there's anything you'd like to hear again or any of the other tracks you can listen to them at",
    "start": "196900",
    "end": "203600"
  },
  {
    "text": "your leisure by looking at the twitch broadcast it's a little bit behind isn't",
    "start": "203600",
    "end": "211519"
  },
  {
    "text": "it ok could I mute the twitch broadcast",
    "start": "211519",
    "end": "216739"
  },
  {
    "text": "I'll just kill it there we go alright I'm so the other thing that remember is",
    "start": "216739",
    "end": "224329"
  },
  {
    "text": "that if you do ask a question it will be on the internet forever so make sure",
    "start": "224329",
    "end": "230030"
  },
  {
    "text": "it's a good question ok so we're going",
    "start": "230030",
    "end": "236000"
  },
  {
    "text": "to start today by talking about microservices and one of the things I",
    "start": "236000",
    "end": "244280"
  },
  {
    "text": "find amusing is that we I gave these",
    "start": "244280",
    "end": "250250"
  },
  {
    "text": "nice short titles to our German team and they made all the titles longer so this",
    "start": "250250",
    "end": "255590"
  },
  {
    "text": "people went from microservices to a slightly longer title about data design",
    "start": "255590",
    "end": "261590"
  },
  {
    "text": "and modeling for microservices we're going to talk a bit about micro services and how that fits in so I'm gonna ask",
    "start": "261590",
    "end": "267979"
  },
  {
    "text": "you just a few question wonder how many pee we'll hear consider yourself developers okay it's good because this is dev day",
    "start": "267979",
    "end": "274730"
  },
  {
    "text": "so that's why you should be here some of you did not raise your hand is",
    "start": "274730",
    "end": "280220"
  },
  {
    "text": "anyone here can you think of yourself mostly as a data professional a database administrator a data engineer or data",
    "start": "280220",
    "end": "285590"
  },
  {
    "text": "scientist or something like that okay nobody alright so yes sorta all right a",
    "start": "285590",
    "end": "294070"
  },
  {
    "text": "little bit anybody here think of yourself as an architect a few of those I don't really",
    "start": "294070",
    "end": "302870"
  },
  {
    "text": "know what architect means I was I I spent 14 years of my career at IBM and I",
    "start": "302870",
    "end": "311060"
  },
  {
    "text": "was involved in a two-year long project there to define architect and the only answer we came up with is we think",
    "start": "311060",
    "end": "317030"
  },
  {
    "text": "you're smart and we don't want you to manage anybody so I hope that fits the architects here my own definition of an",
    "start": "317030",
    "end": "324170"
  },
  {
    "text": "architect is someone who can answer any question with it depends so that comes",
    "start": "324170",
    "end": "330590"
  },
  {
    "text": "up to I was an architect so what does it depend on well partly depends on how",
    "start": "330590",
    "end": "337220"
  },
  {
    "text": "you're gonna put your services together and micro and micro services are one of the big buzz words it's been around for",
    "start": "337220",
    "end": "343720"
  },
  {
    "text": "yes 10 years or so and it comes from a very simple need which is the need to",
    "start": "343720",
    "end": "350840"
  },
  {
    "text": "work at internet scale that the whole reason that drove micro services was we were moving from the world where an",
    "start": "350840",
    "end": "358130"
  },
  {
    "text": "enterprise application meant to big sa P insulation with a few hundred users to",
    "start": "358130",
    "end": "363980"
  },
  {
    "text": "an Internet application with millions of users and micro services are the only",
    "start": "363980",
    "end": "369200"
  },
  {
    "text": "way that yet been shown that you can build large applications at scale to the",
    "start": "369200",
    "end": "374270"
  },
  {
    "text": "to this very large size as well as being able to do things quicker and more effectively developing new features that",
    "start": "374270",
    "end": "381440"
  },
  {
    "text": "meet the needs of your organization so my last hand raising question for now",
    "start": "381440",
    "end": "387200"
  },
  {
    "text": "how many people here are currently working on some sort of micro services project ok oh good then you're in the",
    "start": "387200",
    "end": "393650"
  },
  {
    "text": "right session for the rest of you try to stay awake so",
    "start": "393650",
    "end": "399350"
  },
  {
    "text": "at Amazon we started in traditional way",
    "start": "399350",
    "end": "406420"
  },
  {
    "text": "1995 when the first amazon.com was built it was a monolithic application built",
    "start": "406420",
    "end": "412190"
  },
  {
    "text": "with Oracle and memcache took his about four months to realize we couldn't afford to use Oracle the way",
    "start": "412190",
    "end": "418400"
  },
  {
    "text": "that we hope to grow so we went to this one dot o version of a brand new database called my sequel and my sequel",
    "start": "418400",
    "end": "426500"
  },
  {
    "text": "actually came out eleven tired 21 years ago it's when I first started so we built the business on my sequel to",
    "start": "426500",
    "end": "432530"
  },
  {
    "text": "memcache went really well on to the public in 1996 1997 Amazon was",
    "start": "432530",
    "end": "438470"
  },
  {
    "text": "the first company to sell 1 million dollars online 1990 it was the first company to sell a billion dollars online",
    "start": "438470",
    "end": "445120"
  },
  {
    "text": "an American billion that's still a lot of money so very quickly we were growing",
    "start": "445120",
    "end": "451100"
  },
  {
    "text": "but into as high I was 2000 was a billion very quickly into the early",
    "start": "451100",
    "end": "456290"
  },
  {
    "text": "2000s it became clear that we were not able to keep up with what we needed with",
    "start": "456290",
    "end": "462620"
  },
  {
    "text": "a monolithic application and we started splitting this into small independent services today if you go to Amazon or",
    "start": "462620",
    "end": "470140"
  },
  {
    "text": "amazon.com you're looking at about 210 to 230 micro services that are coming",
    "start": "470140",
    "end": "476930"
  },
  {
    "text": "into play so I asked the architects over at Amazon could you give me a map of",
    "start": "476930",
    "end": "482510"
  },
  {
    "text": "what all of our micro services look like and they said it depends I told you",
    "start": "482510",
    "end": "487700"
  },
  {
    "text": "they're architects and I said well what does it depend on us as it pens if you care if anybody can read it he said well",
    "start": "487700",
    "end": "494390"
  },
  {
    "text": "just give me the map anyway and they said ok but nobody will be able to make any sense out of it and they were right",
    "start": "494390",
    "end": "499810"
  },
  {
    "text": "however everyone who registered for this next week you will get links to all of",
    "start": "499810",
    "end": "505430"
  },
  {
    "text": "the slides and all of the tracks and if you zoom in on this you can see that each of those little blocks does indeed",
    "start": "505430",
    "end": "510590"
  },
  {
    "text": "a well-defined micro service at least the main micro service and the lists of how they connect to each other so when",
    "start": "510590",
    "end": "517520"
  },
  {
    "text": "we first started this it went down the path of it being serviced service oriented architecture with each service",
    "start": "517520",
    "end": "522530"
  },
  {
    "text": "being a single purpose I'm going to share with you some of the things we've learned about making it work",
    "start": "522530",
    "end": "528680"
  },
  {
    "text": "one critical one is they connect only through api's no back doors so the only way to talk to",
    "start": "528680",
    "end": "534870"
  },
  {
    "text": "each micro services through its API the only way for micro services to connect to other things is through an API and",
    "start": "534870",
    "end": "543240"
  },
  {
    "text": "that they connect now initially we did it all over HTTP HTTP sometimes today we",
    "start": "543240",
    "end": "548730"
  },
  {
    "text": "use MQTT or other pieces but it's all standard network connections and this is",
    "start": "548730",
    "end": "555180"
  },
  {
    "text": "not easy distributed computing is hard this is",
    "start": "555180",
    "end": "560220"
  },
  {
    "text": "more difficult to write than traditional computing it's just more work you have",
    "start": "560220",
    "end": "565290"
  },
  {
    "text": "to have multiple databases across multiple services you have to find ways",
    "start": "565290",
    "end": "571250"
  },
  {
    "text": "that you can live with eventual consistency which is very disturbing to",
    "start": "571250",
    "end": "577230"
  },
  {
    "text": "a lot of developers who've never dealt with this before the idea that I will not have I can ask the same question",
    "start": "577230",
    "end": "583889"
  },
  {
    "text": "twice in a row and get different answers because I'm not always going to have all my data consistent consistency is very",
    "start": "583889",
    "end": "590850"
  },
  {
    "text": "expensive in a micro service environment so you only use it where it's really necessary lots of moving parts you have",
    "start": "590850",
    "end": "596550"
  },
  {
    "text": "to have Asus discovers services and coordinate them and route them",
    "start": "596550",
    "end": "601790"
  },
  {
    "text": "ultimately a few things you need every micro service has to have some sort of",
    "start": "601790",
    "end": "608850"
  },
  {
    "text": "registration there has to be some sort of repository that explains what the services are there has to be some method",
    "start": "608850",
    "end": "615390"
  },
  {
    "text": "of discovery services have to have a way to find what other services are available and where they are you can't",
    "start": "615390",
    "end": "621839"
  },
  {
    "text": "have them hard hard-coded IP addresses that will fail that's part of the wiring",
    "start": "621839",
    "end": "627839"
  },
  {
    "text": "the way that these services connect and you have to think about how you",
    "start": "627839",
    "end": "632910"
  },
  {
    "text": "administrate administer them you also have to deal with state a micro service must be stateless where it's not a micro",
    "start": "632910",
    "end": "639180"
  },
  {
    "text": "service but you gotta be storing some state so that state has to be in some sort of data engine now that could be a",
    "start": "639180",
    "end": "645510"
  },
  {
    "text": "flat file that could be a high-speed database that could be an in-memory structure but I have some sort of state management and I need to have metadata",
    "start": "645510",
    "end": "652769"
  },
  {
    "text": "and I've got to have versioning I think the number one mistake I see when people first start using micro services as they",
    "start": "652769",
    "end": "658199"
  },
  {
    "text": "fail to think about versioning but you build your first micro service then you build your second and they build your tenth and by the time you've got ten",
    "start": "658199",
    "end": "664980"
  },
  {
    "text": "micro services probably got a matrix about fifty services and versions going on so how do",
    "start": "664980",
    "end": "670110"
  },
  {
    "text": "you deal with that and use that effectively and then you need to deal with caching it's almost always got to",
    "start": "670110",
    "end": "676290"
  },
  {
    "text": "be necessary to have at least some of the micro services have some caching layer in order to accelerate their performance because each micro service",
    "start": "676290",
    "end": "683399"
  },
  {
    "text": "is going to be fast and each micro service is going to be able to talk to",
    "start": "683399",
    "end": "688889"
  },
  {
    "text": "other micro services in only a few milliseconds but if I've got 200 micro",
    "start": "688889",
    "end": "694319"
  },
  {
    "text": "services talking to each other and they each take 50 milliseconds and it's up to a long time so I'm gonna be meeting use",
    "start": "694319",
    "end": "701069"
  },
  {
    "text": "caching so I can get to sub-millisecond times and then we have to find ways to make it low friction to deploy and",
    "start": "701069",
    "end": "707790"
  },
  {
    "text": "automate the management monitoring it's all a lot of work so what exactly mean",
    "start": "707790",
    "end": "712860"
  },
  {
    "text": "when we do this well here some of the other things we found one make sure that you are not committed to any technology",
    "start": "712860",
    "end": "719430"
  },
  {
    "text": "stack now when you write a micro service when you put one together it's got to be",
    "start": "719430",
    "end": "724559"
  },
  {
    "text": "flexible today at Amazon when we write things our usual database choices",
    "start": "724559",
    "end": "729959"
  },
  {
    "text": "DynamoDB is that what we're gonna want five ten years ago that our choice was",
    "start": "729959",
    "end": "734999"
  },
  {
    "text": "my sequel or choice be ten years from now I don't know but we want it depends",
    "start": "734999",
    "end": "741720"
  },
  {
    "text": "thank you that's the correct answer but we and it depends on you know what happens in technologies but we need to",
    "start": "741720",
    "end": "747839"
  },
  {
    "text": "make sure that we're not stuck with a stack not trapped with any language not trapped with any technology because he's",
    "start": "747839",
    "end": "754050"
  },
  {
    "text": "need to be able to change over time you end up with this polyglot ecosystem it",
    "start": "754050",
    "end": "761279"
  },
  {
    "text": "was common belief in IT that the most important thing you could do was",
    "start": "761279",
    "end": "766290"
  },
  {
    "text": "centralize and standardize and get everybody using the same tools we're now a hundred and eighty degrees away from",
    "start": "766290",
    "end": "772439"
  },
  {
    "text": "that probably more accuracy we're 540 degrees away from that because it's an industry we kind of all turned around in",
    "start": "772439",
    "end": "778470"
  },
  {
    "text": "a circle then ended up pointing the other way so we have to find a way we have to live with the fact that I'm",
    "start": "778470",
    "end": "784290"
  },
  {
    "text": "gonna have different tools different databases different languages while living and working together and polygon",
    "start": "784290",
    "end": "791639"
  },
  {
    "text": "persistence not one big database lots and lots and lots of little",
    "start": "791639",
    "end": "799649"
  },
  {
    "text": "databases generally one database for microservice pattern now that might not",
    "start": "799649",
    "end": "805829"
  },
  {
    "text": "mean a physical database instance right it could be a dynamodb table per pattern",
    "start": "805829",
    "end": "811110"
  },
  {
    "text": "for example but i'm still gonna have many many different databases and data stored in many places this is necessary",
    "start": "811110",
    "end": "818309"
  },
  {
    "text": "for scalability it also leads to a problem because what's going to happen whenever you have the same data in two",
    "start": "818309",
    "end": "824459"
  },
  {
    "text": "different places over time they're gonna entropy right they're gonna go out of",
    "start": "824459",
    "end": "830639"
  },
  {
    "text": "sync so part of what we have to do is write some extra micro services every so often that go make sure those databases",
    "start": "830639",
    "end": "837600"
  },
  {
    "text": "get resynchronized again a lot of work",
    "start": "837600",
    "end": "843420"
  },
  {
    "text": "but it's necessary because now we start talking about what we get from doing all",
    "start": "843420",
    "end": "849899"
  },
  {
    "text": "of this work and there's some big benefits one of them is being able to do low friction deployment and the two key",
    "start": "849899",
    "end": "856319"
  },
  {
    "text": "methods of this are canary and Bluegreen I've never heard of these canary comes",
    "start": "856319",
    "end": "862319"
  },
  {
    "text": "from coal miners who would take a canary down in the coal mine it's good reason for this Canaries are very susceptible",
    "start": "862319",
    "end": "868290"
  },
  {
    "text": "to poison also there's no music in the coal mine they didn't have you know iPods back then so if the canary stops",
    "start": "868290",
    "end": "875309"
  },
  {
    "text": "singing run and microservice I'm sorry",
    "start": "875309",
    "end": "882029"
  },
  {
    "text": "to keep coughing in your ear and microservice the canary deployment means you have most of the users using the old",
    "start": "882029",
    "end": "889230"
  },
  {
    "text": "version and a few users using the new version and then you see how that works and if that works well you do a few more",
    "start": "889230",
    "end": "895319"
  },
  {
    "text": "in the new version and if that works well you rolled everyone to the new version so for example within the",
    "start": "895319",
    "end": "901769"
  },
  {
    "text": "amazon.com world we recently rolled out a new search engine now most people",
    "start": "901769",
    "end": "906990"
  },
  {
    "text": "wouldn't see this you just see the search bar but initially we set it ups about 5% of users would get the new",
    "start": "906990",
    "end": "913079"
  },
  {
    "text": "engine ninety five would get the old work pretty well next day we change it to 10% found a few bugs rolled it back",
    "start": "913079",
    "end": "920790"
  },
  {
    "text": "out went back to five it worked went back to ten it worked went up to twenty five it worked and then everybody had it",
    "start": "920790",
    "end": "926850"
  },
  {
    "text": "so this gives a low-friction deployment non-disruptive sometimes you can't do that for example when you're rolling out",
    "start": "926850",
    "end": "933930"
  },
  {
    "text": "a new database you probably can't have some people on old one and some on a new one or a new database version so in that",
    "start": "933930",
    "end": "940890"
  },
  {
    "text": "case you do blue green so I have my blue version that's running and have my green",
    "start": "940890",
    "end": "945990"
  },
  {
    "text": "version that's a new version and when I'm ready I can just change the DNS address and flip it over and now everyone's over here I'm probably going",
    "start": "945990",
    "end": "953190"
  },
  {
    "text": "to be synchronizing data and then I once I flip over I synchronize data back the other way so that I can flip back if I",
    "start": "953190",
    "end": "959820"
  },
  {
    "text": "have a problem so I flip that over run it and then if everything's great great if not flip back and then do that as",
    "start": "959820",
    "end": "965550"
  },
  {
    "text": "necessary if you do this right you can do it with an outage that's less than a second so it's not really disruptive to",
    "start": "965550",
    "end": "971460"
  },
  {
    "text": "users so at Amazon in most places that's called blue green and Netflix they call",
    "start": "971460",
    "end": "976860"
  },
  {
    "text": "that red black I was always curious about that and then I spoke to the head architect at Netflix they said why is",
    "start": "976860",
    "end": "983250"
  },
  {
    "text": "why do you call it red black he said because there are the first architect at Netflix was blue green colorblind so ok",
    "start": "983250",
    "end": "991050"
  },
  {
    "text": "that's a good reason so these are low friction deployments all right so if",
    "start": "991050",
    "end": "997020"
  },
  {
    "text": "you're doing this right let me give you some of the lessons that we had to learn the hard way over 10 years of building this out one each service must be",
    "start": "997020",
    "end": "1005150"
  },
  {
    "text": "elastic that means the service can grow or shrink independent of the other",
    "start": "1005150",
    "end": "1010700"
  },
  {
    "text": "services this is absolutely critical to",
    "start": "1010700",
    "end": "1016160"
  },
  {
    "text": "scalability so I'll give a good example of this anybody buy anything during",
    "start": "1016160",
    "end": "1021170"
  },
  {
    "text": "prime day last year Amazon a few nods so",
    "start": "1021170",
    "end": "1027949"
  },
  {
    "text": "what a normal Tuesday in the summer the dynamodb bee that's sitting behind",
    "start": "1027950",
    "end": "1034000"
  },
  {
    "text": "amazon.com does 3 4 billion queries a",
    "start": "1034000",
    "end": "1040040"
  },
  {
    "text": "day on prime day it did about 90 billion on the other hand the system that tracks",
    "start": "1040040",
    "end": "1047209"
  },
  {
    "text": "registered users you got a few new users but it only went up a few percent over a regular day so we want to make sure that",
    "start": "1047209",
    "end": "1054650"
  },
  {
    "text": "the things that have the higher use can go up and down independent of other pieces that's critical to micro service",
    "start": "1054650",
    "end": "1062120"
  },
  {
    "text": "second key piece is that it's resilient you have fault isolation boundaries you",
    "start": "1062120",
    "end": "1067850"
  },
  {
    "text": "design so that when a service fails not if when every all software will fail",
    "start": "1067850",
    "end": "1073280"
  },
  {
    "text": "eventually so when a service fails limit the blast radius limit how many other",
    "start": "1073280",
    "end": "1078680"
  },
  {
    "text": "things it affects and make sure we think about ways to recover make it composable",
    "start": "1078680",
    "end": "1084950"
  },
  {
    "text": "with api's and the last two are really hard make it both minimal and complete minimum means keep the service as simple",
    "start": "1084950",
    "end": "1091850"
  },
  {
    "text": "as you can complete is make sure the service does everything the service needs to do those two are friction with",
    "start": "1091850",
    "end": "1098030"
  },
  {
    "text": "each other they compete but the last thing here is perhaps the most important",
    "start": "1098030",
    "end": "1104270"
  },
  {
    "text": "thing and the biggest mistake I see made loose coupling is critical tight",
    "start": "1104270",
    "end": "1111350"
  },
  {
    "text": "coupling is when one service directly calls another service when one service",
    "start": "1111350",
    "end": "1116360"
  },
  {
    "text": "calls another service they're not really two services anymore you've just made them a single service because if I change anything in one",
    "start": "1116360",
    "end": "1123110"
  },
  {
    "text": "service have to have to test it across them both and that means any changes",
    "start": "1123110",
    "end": "1128120"
  },
  {
    "text": "become large regressions and I've really just made them another monolithic application that I'm calling micro",
    "start": "1128120",
    "end": "1133429"
  },
  {
    "text": "services to make micro services work they must be loosely coupled loosely",
    "start": "1133429",
    "end": "1139190"
  },
  {
    "text": "coupled means services never talk to other services services write data and accuse and that other services pull data",
    "start": "1139190",
    "end": "1146330"
  },
  {
    "text": "from the queues now let me be clear our queue here does not mean IBM MQ they",
    "start": "1146330",
    "end": "1151640"
  },
  {
    "text": "could or Amazon MQ or rabbitmq or it could be a file that one reads and other",
    "start": "1151640",
    "end": "1158120"
  },
  {
    "text": "rights or it could be a database entry or it could be a Redis entry it's",
    "start": "1158120",
    "end": "1164840"
  },
  {
    "text": "someplace that that data is the point is they're loosely coupled now services",
    "start": "1164840",
    "end": "1170570"
  },
  {
    "text": "right into queues and now I could have the target service the B service in this",
    "start": "1170570",
    "end": "1175580"
  },
  {
    "text": "case read the queue or I could have the queue itself push something out or I",
    "start": "1175580",
    "end": "1180800"
  },
  {
    "text": "could have things happen on a schedule there's many ways that this could work but the key point is that I use loose",
    "start": "1180800",
    "end": "1186500"
  },
  {
    "text": "coupling that every micro service region writes only from some sort of queue this",
    "start": "1186500",
    "end": "1192320"
  },
  {
    "text": "allows separation this allows elasticity this means that the development team",
    "start": "1192320",
    "end": "1197660"
  },
  {
    "text": "that's working on a never needs to really talk to the team that's working on B they just need to know what the",
    "start": "1197660",
    "end": "1204170"
  },
  {
    "text": "api's are and they can develop and work independently and those are the reason",
    "start": "1204170",
    "end": "1210260"
  },
  {
    "text": "you do this stuff because I get faster development when I do this I get more rapid development I get the",
    "start": "1210260",
    "end": "1217490"
  },
  {
    "text": "ability to do things much faster at Amazon before we started down the path of micro services we had a quarterly",
    "start": "1217490",
    "end": "1224090"
  },
  {
    "text": "release frame and once every three months we can put new things onto the website today across all of Amazon",
    "start": "1224090",
    "end": "1230330"
  },
  {
    "text": "globally we have one new release of some significant feature approximately every 15 hundred milliseconds so every one and",
    "start": "1230330",
    "end": "1238430"
  },
  {
    "text": "a half seconds some place on some Amazon service something new is being developed and deployed we're able to do that with",
    "start": "1238430",
    "end": "1245030"
  },
  {
    "text": "low friction because it's all micro services it also lets you do parallel development so there's an old bad joke",
    "start": "1245030",
    "end": "1253880"
  },
  {
    "text": "in computer science that nine women cannot make a baby in one month but they",
    "start": "1253880",
    "end": "1260900"
  },
  {
    "text": "can make a micro service in one month because they can each be working on different parts in parallel they don't",
    "start": "1260900",
    "end": "1268340"
  },
  {
    "text": "have to do it together so babies are monolithic don't try to change that please",
    "start": "1268340",
    "end": "1273550"
  },
  {
    "text": "but micro services are not they allow us to get parallelism to work you've all",
    "start": "1273550",
    "end": "1278990"
  },
  {
    "text": "seen this have you ever seen that or have you ever seen this that you're on a team and the team is behind schedule and",
    "start": "1278990",
    "end": "1284870"
  },
  {
    "text": "your managers go no problem we'll put extra developers on the team does that make it faster no in the long term it might but in the",
    "start": "1284870",
    "end": "1295130"
  },
  {
    "text": "short term now everybody who is developing is now helping the new people understand what they're doing but if I",
    "start": "1295130",
    "end": "1301190"
  },
  {
    "text": "can isolate these things into separate micro services then what I can do is say split those functions out and say okay",
    "start": "1301190",
    "end": "1307820"
  },
  {
    "text": "this team work on the display engine and this team work on the search engine and we're able to do those things in parallel this is why it's worth doing",
    "start": "1307820",
    "end": "1314780"
  },
  {
    "text": "all this hard work because I can do things fast and parallel and I can do true DevOps or as we now call it",
    "start": "1314780",
    "end": "1321530"
  },
  {
    "text": "devstack ops all right all right another hand question how many people here today",
    "start": "1321530",
    "end": "1326960"
  },
  {
    "text": "you believe you work in a DevOps environment okay it's a true DevOps do you own it do",
    "start": "1326960",
    "end": "1334169"
  },
  {
    "text": "you build it do you to play it do you secure it do you own the roadmap do you control",
    "start": "1334169",
    "end": "1339360"
  },
  {
    "text": "the tools because that's what real DevOps means means that team has complete authority and accountability",
    "start": "1339360",
    "end": "1344880"
  },
  {
    "text": "for what happens but there's also doing all this work means I get more",
    "start": "1344880",
    "end": "1350190"
  },
  {
    "text": "scalability I can build things like Scout 24 and Amazon and Airbnb and these",
    "start": "1350190",
    "end": "1358889"
  },
  {
    "text": "other really giant applications and Google and other things that have hundreds of millions or billions of",
    "start": "1358889",
    "end": "1364679"
  },
  {
    "text": "concurrent users I get higher availability I get better fault tolerance and official line is more",
    "start": "1364679",
    "end": "1372750"
  },
  {
    "text": "closely aligned to the business domain which is a a business speak way of",
    "start": "1372750",
    "end": "1378149"
  },
  {
    "text": "saying that when the business people want something they can actually get it in a few weeks not in a few years",
    "start": "1378149",
    "end": "1384029"
  },
  {
    "text": "wait traditionally has worked now what Amazon we do this with something called the to pizza team each service each",
    "start": "1384029",
    "end": "1392490"
  },
  {
    "text": "micro service is owned by a small team the team that when they stay late can two pizzas is enough to feed everybody",
    "start": "1392490",
    "end": "1399980"
  },
  {
    "text": "now when I started Amazon my wife heard about this and said good luck good news Darren you're a to pizza team all by",
    "start": "1399980",
    "end": "1406049"
  },
  {
    "text": "yourself yeah well that's more of a",
    "start": "1406049",
    "end": "1411269"
  },
  {
    "text": "personal flaw than a design characteristic but I would point out",
    "start": "1411269",
    "end": "1417299"
  },
  {
    "text": "that in many of our two Pizza teams there are fierce arguments about what kind of pizzas to get but we do",
    "start": "1417299",
    "end": "1424559"
  },
  {
    "text": "occasionally do that but the point is how many people is achieve eats a team it's somewhere between six and ten usually and that team has complete",
    "start": "1424559",
    "end": "1432690"
  },
  {
    "text": "ownership that means that team picks what we do we call them service teams",
    "start": "1432690",
    "end": "1439320"
  },
  {
    "text": "they own the primitives the service team is responsible for what the service does",
    "start": "1439320",
    "end": "1444480"
  },
  {
    "text": "we're publishing the api's for determining the roadmap for the service for for supporting the service when",
    "start": "1444480",
    "end": "1451019"
  },
  {
    "text": "calls come in when there's a problem that it doesn't work you own it you run",
    "start": "1451019",
    "end": "1456870"
  },
  {
    "text": "it you build it it's up to the service team to determine what tools they use so our default choices at Amazon for",
    "start": "1456870",
    "end": "1464890"
  },
  {
    "text": "example are Java and DynamoDB or if it's a customer facing that node nodejs",
    "start": "1464890",
    "end": "1471480"
  },
  {
    "text": "but if your team says you know I'm doing something that needs a lot of geographic information I'd rather use Postgres you",
    "start": "1471480",
    "end": "1478450"
  },
  {
    "text": "can use Postgres be a little more work for you to support it because you won't have all the support teams for tools but",
    "start": "1478450",
    "end": "1484720"
  },
  {
    "text": "that's up to you that's your choice and if you want to go way out and say no we have to write our own database for this because their needs are so weird ok",
    "start": "1484720",
    "end": "1491560"
  },
  {
    "text": "good luck with that but if that's what you choose to do that's what you choose to do and each",
    "start": "1491560",
    "end": "1497140"
  },
  {
    "text": "team has complete choice as to what tools are going to use and how they're going to deploy them the only places that we force things down have to do",
    "start": "1497140",
    "end": "1503920"
  },
  {
    "text": "with security another plate another and and network connectivity and other things that have to be universal so each",
    "start": "1503920",
    "end": "1510010"
  },
  {
    "text": "team has complete ownership of this not all of the teams are writing services",
    "start": "1510010",
    "end": "1515290"
  },
  {
    "text": "that a customer would see some are writing services for other service teams",
    "start": "1515290",
    "end": "1520350"
  },
  {
    "text": "so we have thousands and thousands of service teams in Amazon and is mentioned",
    "start": "1520350",
    "end": "1526510"
  },
  {
    "text": "here organizationally they roll up to various units so the biggest two units at Amazon are web services and commerce",
    "start": "1526510",
    "end": "1532090"
  },
  {
    "text": "and then there's many smaller units a good example of a small unit is twitch people who are broadcasting us right now",
    "start": "1532090",
    "end": "1537610"
  },
  {
    "text": "but which also is a collection of service teams we have some very small services that are just one team we have",
    "start": "1537610",
    "end": "1544960"
  },
  {
    "text": "big ones like Commerce or web services that are thousands of teams but this lets us build a way that other labels",
    "start": "1544960",
    "end": "1550210"
  },
  {
    "text": "has to do things quicker and effectively so since this is the database track now",
    "start": "1550210",
    "end": "1558250"
  },
  {
    "text": "you've talked about micro services what how does the data work underneath that and what's the data architecture well",
    "start": "1558250",
    "end": "1565480"
  },
  {
    "text": "again the traditional way to do this was a monolithic data store and put all the data in one place all together one big",
    "start": "1565480",
    "end": "1572290"
  },
  {
    "text": "data base doing all of your services this was the best way to do things 10-15",
    "start": "1572290",
    "end": "1578260"
  },
  {
    "text": "years ago for a very simple reason database licenses are really expensive and a lot of choices remain to minimize",
    "start": "1578260",
    "end": "1585790"
  },
  {
    "text": "the database license expense rather than go for what's best for the business or what's best for",
    "start": "1585790",
    "end": "1591920"
  },
  {
    "text": "innovation we believe that this is an anti-pattern that when you're in one big",
    "start": "1591920",
    "end": "1598460"
  },
  {
    "text": "database it's too hard to change it's too hard to advance and your costs are high so what we end up with in the micro",
    "start": "1598460",
    "end": "1607340"
  },
  {
    "text": "service world is polyglot persistence decentralized databases break the big",
    "start": "1607340",
    "end": "1613040"
  },
  {
    "text": "database into many smaller databases some of which will be redundant with each other each service chooses its own",
    "start": "1613040",
    "end": "1620420"
  },
  {
    "text": "and data store technology so in this case I might have one service that uses",
    "start": "1620420",
    "end": "1625730"
  },
  {
    "text": "dynamo on another service wants to run on my sequel which in the Amazon world would be relational database service",
    "start": "1625730",
    "end": "1631190"
  },
  {
    "text": "already yes and yet another service - what on top says well I need high-speed caching but I also need persistence so I'll",
    "start": "1631190",
    "end": "1638420"
  },
  {
    "text": "choose ElastiCache which is Redis and also RDS each team makes that decision",
    "start": "1638420",
    "end": "1644770"
  },
  {
    "text": "data is gated through the service API and are independently scalable which",
    "start": "1644770",
    "end": "1653330"
  },
  {
    "text": "leaves us some challenges at the data layer like how do i do transactional integrity when I do polyglot persistence",
    "start": "1653330",
    "end": "1663530"
  },
  {
    "text": "I'm always gonna have eventual consistency so generally I'm gonna do asynchronous calls which are non",
    "start": "1663530",
    "end": "1669680"
  },
  {
    "text": "blocking but I have to handle them so I'm gonna do things like stage commit",
    "start": "1669680",
    "end": "1675650"
  },
  {
    "text": "and roll back on failure and the way that you do that through what's called a correlation ID so as data passes from",
    "start": "1675650",
    "end": "1683330"
  },
  {
    "text": "one service to another service to another service you make sure that you have some sort of ID that identifies",
    "start": "1683330",
    "end": "1689120"
  },
  {
    "text": "this transaction so again I'm using an e-commerce example but I'm gonna have a UI and a catalog and a checkout that",
    "start": "1689120",
    "end": "1696410"
  },
  {
    "text": "goes to payment and shipping I'm gonna make sure that as those go along for a given transaction there's always going",
    "start": "1696410",
    "end": "1702500"
  },
  {
    "text": "to be a common unit in this case you had one two three and I need that because if",
    "start": "1702500",
    "end": "1707690"
  },
  {
    "text": "I have a failure I want to be able to roll back everything on you and one two three that could happen for two reasons",
    "start": "1707690",
    "end": "1715120"
  },
  {
    "text": "it's called business failure or technical failure the best practice for",
    "start": "1715120",
    "end": "1721190"
  },
  {
    "text": "this is to have a micro a rollback micro service so you have another micro service whole job it is is to roll back when",
    "start": "1721190",
    "end": "1727530"
  },
  {
    "text": "things don't work right so what do I mean by the two different types of",
    "start": "1727530",
    "end": "1733950"
  },
  {
    "text": "failure well a little more on this later but a a technical failures when",
    "start": "1733950",
    "end": "1739679"
  },
  {
    "text": "something doesn't work a lambda function failed a database crashed doesn't happen",
    "start": "1739679",
    "end": "1745590"
  },
  {
    "text": "much in managed services but it can still happen a business failure is when the technology works but there's",
    "start": "1745590",
    "end": "1751230"
  },
  {
    "text": "something wrong with the data so in the case here of a e-commerce what happens if we get all the way to the end and the",
    "start": "1751230",
    "end": "1756539"
  },
  {
    "text": "credit card is declined all right well then I have to roll back that transaction go back to the user and say",
    "start": "1756539",
    "end": "1762510"
  },
  {
    "text": "hmm there's a problem with your credit card so we're going to do this with have",
    "start": "1762510",
    "end": "1769440"
  },
  {
    "text": "functions in the microservices and some of those functions are going to be a roll back function and then optionally a",
    "start": "1769440",
    "end": "1775260"
  },
  {
    "text": "commit function so that these aren't actually committed until the commit function is called and these are api's",
    "start": "1775260",
    "end": "1781320"
  },
  {
    "text": "you build your micro-service now one of",
    "start": "1781320",
    "end": "1786570"
  },
  {
    "text": "the ways to make that easy is dynamodb and this is why we normally use DynamoDB and Amazon for run services because",
    "start": "1786570",
    "end": "1793590"
  },
  {
    "text": "whenever you change date and DynamoDB it's exposed as a stream and the streams are ordered and persistent for 24 hours",
    "start": "1793590",
    "end": "1800669"
  },
  {
    "text": "so that the data stays around is accessible and the stream can itself",
    "start": "1800669",
    "end": "1806280"
  },
  {
    "text": "drive lambda functions or drive other things to happen so therefore you can attach yourself to the date of instance",
    "start": "1806280",
    "end": "1812309"
  },
  {
    "text": "of interest home keep retrying until whatever you want to do actually happens",
    "start": "1812309",
    "end": "1817850"
  },
  {
    "text": "but when I get those errors have to have some way to do rollback so what we usually do is we create a transaction",
    "start": "1817850",
    "end": "1823559"
  },
  {
    "text": "manager micro service that can tell all the other microservices time to roll something back so often",
    "start": "1823559",
    "end": "1829919"
  },
  {
    "text": "dynamodb will be the trigger that makes that run but there'll be some sort of correlation ID so what we'll do is when",
    "start": "1829919",
    "end": "1835380"
  },
  {
    "text": "we have a failure we'll have an error table to Mike and dynamodb and into that",
    "start": "1835380",
    "end": "1840510"
  },
  {
    "text": "error table you will write the you would of the correlation ID that will create a stream the stream will then kick off the",
    "start": "1840510",
    "end": "1847440"
  },
  {
    "text": "various functions that say go roll all this back make sense I know this sounds",
    "start": "1847440",
    "end": "1853500"
  },
  {
    "text": "a little bit complicated but it's a lot easier than it sounds so that we end up with something like",
    "start": "1853500",
    "end": "1859590"
  },
  {
    "text": "this where I'm rolling along and I run into an error then that error rates to the error table if you like you could",
    "start": "1859590",
    "end": "1866010"
  },
  {
    "text": "also put it into an error stream whenever a queue and then that'll kick off my transaction manager function",
    "start": "1866010",
    "end": "1871260"
  },
  {
    "text": "which will then go and do roll backs against each other places at a problem",
    "start": "1871260",
    "end": "1876440"
  },
  {
    "text": "now what if I have bad code or a physical failure so I'll put it this way",
    "start": "1876440",
    "end": "1883980"
  },
  {
    "text": "lambdas are serverless right I'm assuming everyone here knows what a lambda is is that correct okay all right once again three quarters",
    "start": "1883980",
    "end": "1892169"
  },
  {
    "text": "are doing this and one quarter okay no is my English step bad okay so when I'm",
    "start": "1892169",
    "end": "1900990"
  },
  {
    "text": "writing lambdas a lambda actually runs in a container right it's server this",
    "start": "1900990",
    "end": "1906750"
  },
  {
    "text": "means you don't have to care about the server but it's not magics tell us a run on a server someplace new containers",
    "start": "1906750",
    "end": "1912059"
  },
  {
    "text": "fail sometimes yeah I mean and uh right now the the service level agreement for",
    "start": "1912059",
    "end": "1919080"
  },
  {
    "text": "ec2 is 99.95 and we're actually running about 99.9 eighth but even 99.9 eighth",
    "start": "1919080",
    "end": "1926399"
  },
  {
    "text": "that means that about one at a 200 are gonna or one out of 400 are gonna fail",
    "start": "1926399",
    "end": "1931830"
  },
  {
    "text": "each year so once in a while I have a failure now in Amazon that'll",
    "start": "1931830",
    "end": "1936990"
  },
  {
    "text": "automatically get fixed and replaced but it means something failed it might need to get rolled back and restarted you",
    "start": "1936990",
    "end": "1942990"
  },
  {
    "text": "find this in AWS on cloud watch logs so whenever I have any sort of physical",
    "start": "1942990",
    "end": "1948120"
  },
  {
    "text": "fail your code failure that'll show up in cloud watch so I need to make sure I set up some metric filters to have cloud",
    "start": "1948120",
    "end": "1954570"
  },
  {
    "text": "watch also be able to have the alarms kick off my transaction manager so they",
    "start": "1954570",
    "end": "1959610"
  },
  {
    "text": "can roll things back now a little warning about this if I'm using the stream another mistake I commonly see",
    "start": "1959610",
    "end": "1967529"
  },
  {
    "text": "make sure when you write your lambdas that pick things off the stream that they acknowledge that they got it off",
    "start": "1967529",
    "end": "1972539"
  },
  {
    "text": "the stream because remember the stream keeps pushing it until it's picked up so I've seen code written that it says if",
    "start": "1972539",
    "end": "1978990"
  },
  {
    "text": "there's a problem I'll do something but it never acknowledges it so what happens in the stream the head of the stream is",
    "start": "1978990",
    "end": "1984210"
  },
  {
    "text": "still that same problem and any future problems are backed up behind it so you got to take it out of the stream when",
    "start": "1984210",
    "end": "1990419"
  },
  {
    "text": "you're done so the next problem can come to the so just a little piece of designing that",
    "start": "1990419",
    "end": "1995500"
  },
  {
    "text": "so in any case we'll uh we'll watch the cloud watch metric and and also look for",
    "start": "1995500",
    "end": "2002170"
  },
  {
    "text": "in this case look for a metric that if I see the same correlation ID keep coming up means something's not acknowledging",
    "start": "2002170",
    "end": "2007630"
  },
  {
    "text": "the stream okay last trick in here keeping the data",
    "start": "2007630",
    "end": "2013960"
  },
  {
    "text": "consistent this is master data management so you'll probably need to write yet another microservice whose",
    "start": "2013960",
    "end": "2019420"
  },
  {
    "text": "whole job it is is to look across your different data stores and make sure the data is consistent so make sure that the",
    "start": "2019420",
    "end": "2025929"
  },
  {
    "text": "data coming in and the data coming out actually match make sure the one I have data in different stores are kept in",
    "start": "2025929",
    "end": "2031299"
  },
  {
    "text": "consistent ways make sure that if you're doing equity trading that all of the systems that are trading equities use it",
    "start": "2031299",
    "end": "2038950"
  },
  {
    "text": "the same way so that I don't have this one says Apple and this one says AAPL but that I have those things regular",
    "start": "2038950",
    "end": "2045100"
  },
  {
    "text": "lies and that's what we do with the master data management so it's yet another micro service you write to watch",
    "start": "2045100",
    "end": "2050350"
  },
  {
    "text": "other services usually this is something you want to want run on a schedule so",
    "start": "2050350",
    "end": "2055358"
  },
  {
    "text": "the trick of course to running the functions on a schedule is set up a cloud watch event and have the event",
    "start": "2055359",
    "end": "2060550"
  },
  {
    "text": "just kick off once an hour once every 10 minutes wherever often you want to check it all right so what database do I use",
    "start": "2060550",
    "end": "2069158"
  },
  {
    "text": "under all of this well the good news is AWS we have lots of managed databases",
    "start": "2069159",
    "end": "2074408"
  },
  {
    "text": "the bad news is you have lots of managed databases and the truth is almost",
    "start": "2074409",
    "end": "2081608"
  },
  {
    "text": "anything you want to do you can probably do with any of these right I could use a relational database I can use elastic",
    "start": "2081609",
    "end": "2088868"
  },
  {
    "text": "cache if I want something really fast which is Redis I can use DynamoDB if I",
    "start": "2088869",
    "end": "2093970"
  },
  {
    "text": "want something really scalable I can use RDS if I want something that uses",
    "start": "2093970",
    "end": "2099190"
  },
  {
    "text": "relational technologies redshift they don't normally use micro services except",
    "start": "2099190",
    "end": "2104740"
  },
  {
    "text": "for analytics because redshift is a data warehouse it reads very fast but it writes a little bit slow so it's usually",
    "start": "2104740",
    "end": "2110140"
  },
  {
    "text": "not on the right time scale for this but I might want to store things on ice 3 or I might want to store them in",
    "start": "2110140",
    "end": "2115180"
  },
  {
    "text": "elasticsearch some people actually use elastic search not just the search engine but as the cue to move data back",
    "start": "2115180",
    "end": "2120760"
  },
  {
    "text": "and forth or streaming in Kinesis or some combination of these",
    "start": "2120760",
    "end": "2125980"
  },
  {
    "text": "I noticed what I have on the side there doesn't say microservices service because the service is a whole bunch of",
    "start": "2125980",
    "end": "2131440"
  },
  {
    "text": "micro services that does something again they use the Amazon example the Amazon homepage is a service made up of a few",
    "start": "2131440",
    "end": "2139119"
  },
  {
    "text": "hundred micro services so how do I decide which service to use usually we",
    "start": "2139119",
    "end": "2147460"
  },
  {
    "text": "say if there's a functional reason that overrides so one example of a functional",
    "start": "2147460",
    "end": "2153040"
  },
  {
    "text": "reason is I need to be under a millisecond if any things have been under a millisecond I pretty much have",
    "start": "2153040",
    "end": "2158560"
  },
  {
    "text": "to use Redis the in-memory data store the loads we do things in microseconds another functional example is what I",
    "start": "2158560",
    "end": "2164890"
  },
  {
    "text": "mentioned earlier which is geographic information because Postgres is the only",
    "start": "2164890",
    "end": "2169900"
  },
  {
    "text": "database today arguably Oracle that really have strong GIS capabilities",
    "start": "2169900",
    "end": "2175380"
  },
  {
    "text": "geographical information system so that if for example I want the at the database layer to draw a bounding box",
    "start": "2175380",
    "end": "2182260"
  },
  {
    "text": "and determine if a given lat/long is in that box and usually a box doesn't mean a square it means like the borders of",
    "start": "2182260",
    "end": "2187990"
  },
  {
    "text": "bavaria okay the very is not a square all right it's a very complex shape with",
    "start": "2187990",
    "end": "2194020"
  },
  {
    "text": "all the things around the border Postgres does that really well but if you don't have that kind of very",
    "start": "2194020",
    "end": "2199210"
  },
  {
    "text": "specific functional need then we recommend you do this off of non functionals so what you end up doing is",
    "start": "2199210",
    "end": "2205180"
  },
  {
    "text": "you create a chart like this one specific to your organization and you might make in in this case four",
    "start": "2205180",
    "end": "2211240"
  },
  {
    "text": "different categories and you determine for your organization what those categories are so for this organization",
    "start": "2211240",
    "end": "2218790"
  },
  {
    "text": "they've decided that high latency things that don't meet a big latency it can",
    "start": "2218790",
    "end": "2225550"
  },
  {
    "text": "take more than a second and their idea of very low latency is less than 20 milliseconds now for your organization",
    "start": "2225550",
    "end": "2232119"
  },
  {
    "text": "low latency might be one millisecond it depends on what you're doing similarly we define some levels of",
    "start": "2232119",
    "end": "2237910"
  },
  {
    "text": "durability some levels of what we think are big or small and scaling levels of how available they need to be how public",
    "start": "2237910",
    "end": "2246430"
  },
  {
    "text": "the data is how quickly need to be able to recover so the highest level is data that I have to recover in five minutes",
    "start": "2246430",
    "end": "2252100"
  },
  {
    "text": "if I have an outage and then what level of skills they have in the organization you use this to then determine what's",
    "start": "2252100",
    "end": "2258960"
  },
  {
    "text": "right database for me when each service team is figuring out what to do so the",
    "start": "2258960",
    "end": "2264359"
  },
  {
    "text": "numbers on this chart are not service level agreements there are rough numbers where we see off different services but",
    "start": "2264359",
    "end": "2271260"
  },
  {
    "text": "for example with latency my relational databases will usually be under 10 milliseconds and always under 100 but",
    "start": "2271260",
    "end": "2278580"
  },
  {
    "text": "when I'm using elastic cash or Dax with Dinamo I can get that down to 1 millisecond as 3 on the other hand has",
    "start": "2278580",
    "end": "2288060"
  },
  {
    "text": "infinite size okay not really infinite but really really big we have some",
    "start": "2288060",
    "end": "2293880"
  },
  {
    "text": "customers that have moved one well-known customer is snapchat when they joined a",
    "start": "2293880",
    "end": "2298950"
  },
  {
    "text": "AWS they moved over for exabytes of data into AWS into s3 so we have really big",
    "start": "2298950",
    "end": "2305820"
  },
  {
    "text": "size on s3 on the other hand usually you don't need that much usually you don't",
    "start": "2305820",
    "end": "2310950"
  },
  {
    "text": "need exabytes for your data if you do you might be keeping a little too much data for that micro service so other",
    "start": "2310950",
    "end": "2317820"
  },
  {
    "text": "things have their own limits and then most of our services are highly available some more so than others",
    "start": "2317820",
    "end": "2325130"
  },
  {
    "text": "various recoverability if you're not familiar with em AZ that stands for a",
    "start": "2325130",
    "end": "2330150"
  },
  {
    "text": "multiple availability zone that's just saying have I checked off the box to have this spread across high",
    "start": "2330150",
    "end": "2335790"
  },
  {
    "text": "availability or not some services like dynamo you can't turn that off other services you have a choice",
    "start": "2335790",
    "end": "2341760"
  },
  {
    "text": "and then you finalize your choices that you've made so you look across these and",
    "start": "2341760",
    "end": "2347640"
  },
  {
    "text": "say after I have mapped these together I end up with a short list and then I",
    "start": "2347640",
    "end": "2352680"
  },
  {
    "text": "decide which ones I want to use so that gives me a choice for which data store",
    "start": "2352680",
    "end": "2359310"
  },
  {
    "text": "to use for which project often I will use multiples in any project so let me",
    "start": "2359310",
    "end": "2365010"
  },
  {
    "text": "walk through this in a real example I'm currently working with one of our customers that does settlement of bond",
    "start": "2365010",
    "end": "2372089"
  },
  {
    "text": "trades so usually this is government and government pod trading or government to",
    "start": "2372089",
    "end": "2377550"
  },
  {
    "text": "large to banks so the the problem here is the average transaction is 50 million",
    "start": "2377550",
    "end": "2385080"
  },
  {
    "text": "dollars for a transaction and if the transaction gets delayed the settlement",
    "start": "2385080",
    "end": "2390660"
  },
  {
    "text": "company has to pay the interest the delay time now you might say well it's only a few hours but when we're",
    "start": "2390660",
    "end": "2398609"
  },
  {
    "text": "talking about hundreds of millions of dollars that adds up very quickly so they settle a total of about three",
    "start": "2398609",
    "end": "2405720"
  },
  {
    "text": "trillion dollars per day of total bond sales on a typical working day",
    "start": "2405720",
    "end": "2411690"
  },
  {
    "text": "so three Tara dollars it's a lot of money so what are their requirements so",
    "start": "2411690",
    "end": "2416970"
  },
  {
    "text": "one requirement they have is that when things are ingested in for the bank's I",
    "start": "2416970",
    "end": "2422160"
  },
  {
    "text": "have to ingest that and absolutely reliably do it within 30 seconds every time then I need to pass that through",
    "start": "2422160",
    "end": "2430380"
  },
  {
    "text": "various services that are going to process it and then at the end of the process I need to write that into",
    "start": "2430380",
    "end": "2436499"
  },
  {
    "text": "something that is persistent and long-lasting and can be accessed by SQL",
    "start": "2436499",
    "end": "2441690"
  },
  {
    "text": "because there's some standard queries that people in the industry right all right that gives me some definitions",
    "start": "2441690",
    "end": "2447690"
  },
  {
    "text": "right so my one coming in where my size is very variable and I've got to always",
    "start": "2447690",
    "end": "2453150"
  },
  {
    "text": "be within 30 seconds what do you think is the right choice there would you use",
    "start": "2453150",
    "end": "2460640"
  },
  {
    "text": "say that louder even louder cuz my ears",
    "start": "2461869",
    "end": "2467279"
  },
  {
    "text": "are stuffed okay this is a tough room all right dynamo is what they ended up",
    "start": "2467279",
    "end": "2474900"
  },
  {
    "text": "choosing because we could have done that with dynamo we could have done that with relational but one of the features of",
    "start": "2474900",
    "end": "2481170"
  },
  {
    "text": "dynamos we'll talk about later today is Daniel you get the same performance no matter how busy it is and they wanted to",
    "start": "2481170",
    "end": "2488430"
  },
  {
    "text": "make sure because when you're in bond trading low stage you have a certain amount of busy but someday something",
    "start": "2488430",
    "end": "2493799"
  },
  {
    "text": "happens and you're much much busier so they want to make sure they always hit that 30-second mark the other trick that",
    "start": "2493799",
    "end": "2499680"
  },
  {
    "text": "they do is they're writing it into two different regions so the writing in the two places in the world just in case",
    "start": "2499680",
    "end": "2506220"
  },
  {
    "text": "some disaster happens they don't lose any transactions however as and then so",
    "start": "2506220",
    "end": "2514499"
  },
  {
    "text": "that's my highly reliable dynamo for ingestion through the process they'll have lots of little dynamo state engines",
    "start": "2514499",
    "end": "2520859"
  },
  {
    "text": "just holding data or sometimes Redis as cues to move data from one service to the next and at the end I need something that's",
    "start": "2520859",
    "end": "2527940"
  },
  {
    "text": "highly reliable and I can answer a query in SQL it's a dynamo doesn't support SQL so",
    "start": "2527940",
    "end": "2533400"
  },
  {
    "text": "what would you use there Aurora right and they're chased they looked at my sequel and Postgres they decided they",
    "start": "2533400",
    "end": "2539340"
  },
  {
    "text": "liked Postgres better that was a skills issue because before they use the cloud they were mostly Oracle Postgres is much",
    "start": "2539340",
    "end": "2546510"
  },
  {
    "text": "closer to Oracle just to the syntax and the way it operates but that's the way we kind of walk through these non",
    "start": "2546510",
    "end": "2552180"
  },
  {
    "text": "release non relation these are non-functional requirements in order to determine the data stores to use and of",
    "start": "2552180",
    "end": "2558210"
  },
  {
    "text": "course with Aurora they're also writing in the two regions just we have two copies and if I have some sort of",
    "start": "2558210",
    "end": "2563700"
  },
  {
    "text": "disaster I don't lose my data so you finalize out that choice and usually",
    "start": "2563700",
    "end": "2574099"
  },
  {
    "text": "most organizations you don't force the service teams what to use but you might",
    "start": "2574099",
    "end": "2580020"
  },
  {
    "text": "have a service team whose job it is to help the other service teams by putting together services to make it easy to",
    "start": "2580020",
    "end": "2585390"
  },
  {
    "text": "deploy something so within Amazon we have teams that make it easy for people to use dynamo you",
    "start": "2585390",
    "end": "2591060"
  },
  {
    "text": "have teams that make it easy for people to use Aurora you have teams that make it easy for people to use ElastiCache and pre configure them into our security",
    "start": "2591060",
    "end": "2598710"
  },
  {
    "text": "standards and other pieces last piece you have here is how do I report on how things are working so you have to do",
    "start": "2598710",
    "end": "2608070"
  },
  {
    "text": "some sort of consolidation and aggregation there's four patterns for this and three of them are good so the",
    "start": "2608070",
    "end": "2615990"
  },
  {
    "text": "pattern you should never use is the one in the lower right which is the composite which is when I write one data",
    "start": "2615990",
    "end": "2622380"
  },
  {
    "text": "service that tries to live read information from different services it",
    "start": "2622380",
    "end": "2627570"
  },
  {
    "text": "doesn't scale again it's tightly coupled I'm reading directly so don't do that",
    "start": "2627570",
    "end": "2633300"
  },
  {
    "text": "one each of the other three works the most common what I see is the one on the top left which is a poll model which it",
    "start": "2633300",
    "end": "2642810"
  },
  {
    "text": "what so I will have the data get copied or pulled into the aggregate reporting service the one that I usually prefer is",
    "start": "2642810",
    "end": "2651690"
  },
  {
    "text": "the one on the upper right which is a push model which is a fancy way of saying have every service emit a log",
    "start": "2651690",
    "end": "2657970"
  },
  {
    "text": "so every time something important happens in a service have it write a log and then my reporting section is just",
    "start": "2657970",
    "end": "2663700"
  },
  {
    "text": "log analytics and I can use elasticsearch or ELQ stack or Splunk or a whole bunch of tools that make it easy",
    "start": "2663700",
    "end": "2669640"
  },
  {
    "text": "to analyze all the logs the other one I've seen some people like to do especially if it's widely distributed",
    "start": "2669640",
    "end": "2674829"
  },
  {
    "text": "across different regions is publish and subscribe so that you have each of the services actually are a publisher that",
    "start": "2674829",
    "end": "2681640"
  },
  {
    "text": "will subscribe and then the data aggregation services the subscriber but all of these work in order to get the",
    "start": "2681640",
    "end": "2687220"
  },
  {
    "text": "data in back to my description of the the bond settlement system whenever I",
    "start": "2687220",
    "end": "2692410"
  },
  {
    "text": "have an ingest I am in a log where I write a final version I am in a log",
    "start": "2692410",
    "end": "2698099"
  },
  {
    "text": "every so often we compare the logs because if something went in and it didn't get to the other end within a",
    "start": "2698099",
    "end": "2704170"
  },
  {
    "text": "minute or two something funny is going on and I need to go back and find out what happened to that transaction this",
    "start": "2704170",
    "end": "2710440"
  },
  {
    "text": "is again one of our ways to avoid entropy there will always be entropy don't pretend it doesn't exist find ways",
    "start": "2710440",
    "end": "2717310"
  },
  {
    "text": "to deal with it so final thoughts use",
    "start": "2717310",
    "end": "2723550"
  },
  {
    "text": "non-functional requirements to identify the data stores for each service use polyglot persistence so that I don't",
    "start": "2723550",
    "end": "2729730"
  },
  {
    "text": "have bottlenecks that each of these things are able to scale and move independently embrace eventual",
    "start": "2729730",
    "end": "2735280"
  },
  {
    "text": "consistency learn to love it think about which things you're doing that don't need to be perfectly",
    "start": "2735280",
    "end": "2740740"
  },
  {
    "text": "consistent when you're saying how much inventory do I have does that need to be an exact number usually not what I'm",
    "start": "2740740",
    "end": "2749589"
  },
  {
    "text": "saying you know what's the temperature outside does it need to be accurate within milliseconds yeah if it's 10",
    "start": "2749589",
    "end": "2755020"
  },
  {
    "text": "minutes out of dates probably close enough other things need to be exactly accurate understand which ones need them",
    "start": "2755020",
    "end": "2760960"
  },
  {
    "text": "and only do that work when it's there and then think about your analytics requirements in the beginning so if you",
    "start": "2760960",
    "end": "2767020"
  },
  {
    "text": "put all of these kind of tools together use some of these things you too can develop microservices they'll let you",
    "start": "2767020",
    "end": "2772960"
  },
  {
    "text": "create applications that are flexible scalable changeable let you deal with",
    "start": "2772960",
    "end": "2778150"
  },
  {
    "text": "the new world so does anybody have any questions oh my god am i that boring",
    "start": "2778150",
    "end": "2786730"
  },
  {
    "text": "that nobody can come up with even one question are you so frightened by the warning up",
    "start": "2786730",
    "end": "2792020"
  },
  {
    "text": "there we go all right grant you get to run over with the microphone and don't",
    "start": "2792020",
    "end": "2800120"
  },
  {
    "text": "let the fact that you're live on the internet scare you in any way this is",
    "start": "2800120",
    "end": "2806630"
  },
  {
    "text": "basically on the Bluegreen deployment how it is done",
    "start": "2806630",
    "end": "2812150"
  },
  {
    "text": "do you really duplicate the whole infrastructure or is it only at the service level you duplicate the services",
    "start": "2812150",
    "end": "2819470"
  },
  {
    "text": "and the databases of underlying databases are the same because it",
    "start": "2819470",
    "end": "2824740"
  },
  {
    "text": "amounts to the cost at the end so normally when I want to do blue green I",
    "start": "2824740",
    "end": "2830720"
  },
  {
    "text": "only want to do one service at a time right I don't want to do the entire environment unless I actually have a",
    "start": "2830720",
    "end": "2837950"
  },
  {
    "text": "change that affects the entire environment so usually my blue green switch is I'm blue greening switching",
    "start": "2837950",
    "end": "2843980"
  },
  {
    "text": "out one specific service with that switch on the other hand if I really",
    "start": "2843980",
    "end": "2849950"
  },
  {
    "text": "need to do multiple services at once this is what's great about the cloud right because if I need extra capacity I",
    "start": "2849950",
    "end": "2856280"
  },
  {
    "text": "use that extra capacity when I don't need it anymore I can turn it off I can do those things temporarily and do them",
    "start": "2856280",
    "end": "2862460"
  },
  {
    "text": "the other thing that I like about the cloud is the ability to do a full performance testing which is something I",
    "start": "2862460",
    "end": "2869360"
  },
  {
    "text": "always recommend is if you should be testing these micro services have test copies of them and test it against the",
    "start": "2869360",
    "end": "2876380"
  },
  {
    "text": "full performance you think you'll need because that's the only way to discover whether a high workload is going to",
    "start": "2876380",
    "end": "2882560"
  },
  {
    "text": "break your service or not but I'm sorry there's another way to discover it which is not test it and find out in production I don't recommend that method",
    "start": "2882560",
    "end": "2890050"
  },
  {
    "text": "all right any other questions yes sir well let's let them get you the",
    "start": "2890050",
    "end": "2896210"
  },
  {
    "text": "microphone here come on grant step it up all right I have a question regarding",
    "start": "2896210",
    "end": "2902170"
  },
  {
    "text": "loosely and tightly cup of services you mentioned the the service discovery if I",
    "start": "2902170",
    "end": "2908810"
  },
  {
    "text": "have a micro service and I'm using some kind of service discovery from my console or Eureka from from Netflix is",
    "start": "2908810",
    "end": "2916760"
  },
  {
    "text": "it tightly or loosely because I'm not using any IP address I just know the name of the service but still I'm amused",
    "start": "2916760",
    "end": "2923770"
  },
  {
    "text": "the rest interface from the service where I need the data from okay so in",
    "start": "2923770",
    "end": "2928990"
  },
  {
    "text": "that case if I look at how Yuriko works what I'm actually doing is moving the",
    "start": "2928990",
    "end": "2934690"
  },
  {
    "text": "service information through an API call into the service registry that is a",
    "start": "2934690",
    "end": "2941770"
  },
  {
    "text": "loose coupling because the service registry isn't really calling it's going through the API into a data store so if",
    "start": "2941770",
    "end": "2949119"
  },
  {
    "text": "you think about the way Eureka's defined it really is a loose coupling environment the point is the discovery",
    "start": "2949119",
    "end": "2954460"
  },
  {
    "text": "service is not well sometimes in that case the discovery service will directly",
    "start": "2954460",
    "end": "2961060"
  },
  {
    "text": "call in order to fill its data store but in this case it can be eventually consistent so it's not a tight coupling",
    "start": "2961060",
    "end": "2967710"
  },
  {
    "text": "and I will say one don't let the definitely computer",
    "start": "2967710",
    "end": "2973540"
  },
  {
    "text": "science definitions become the enemy of making working services everything I just said no tight coupling I have been",
    "start": "2973540",
    "end": "2981880"
  },
  {
    "text": "working in some environments where as people say I've got to get all this done in 50 milliseconds all right well if I",
    "start": "2981880",
    "end": "2987550"
  },
  {
    "text": "have a 50 millisecond budget I can't do a lot of jumps so in that world sometimes you have to break the rules",
    "start": "2987550",
    "end": "2993640"
  },
  {
    "text": "and actually do a tight coupling just understand what you're getting and what your costs are when you break these",
    "start": "2993640",
    "end": "2998859"
  },
  {
    "text": "rules okay someone else had a question back here yeah it's actually a similar",
    "start": "2998859",
    "end": "3005609"
  },
  {
    "text": "question I'm just trying to guess grasp the concept you said that you should",
    "start": "3005609",
    "end": "3011270"
  },
  {
    "text": "loosely couple the micro services but when you're calling the service another",
    "start": "3011270",
    "end": "3017880"
  },
  {
    "text": "service through the API are you actually then pushing the response to the queues",
    "start": "3017880",
    "end": "3022890"
  },
  {
    "text": "or and with this you actually decouple the services more is the other idea",
    "start": "3022890",
    "end": "3029220"
  },
  {
    "text": "behind it so generally when one service is calling another services API what you",
    "start": "3029220",
    "end": "3035190"
  },
  {
    "text": "really want to be happening is that it's calling upon something that is queued and some data that is there so that when",
    "start": "3035190",
    "end": "3041460"
  },
  {
    "text": "when serve it when one cert when when I need one service to to call to another",
    "start": "3041460",
    "end": "3047369"
  },
  {
    "text": "service if it's a push model the queue itself should be a she'll be kicking something off so this is what I'm going",
    "start": "3047369",
    "end": "3054330"
  },
  {
    "text": "to use streaming or some sort of lambda function if it's a pole model where this service is pulling from that other service it",
    "start": "3054330",
    "end": "3061109"
  },
  {
    "text": "can call the API from that service that's okay as long as what's behind that what it's actually pulling from is",
    "start": "3061109",
    "end": "3067380"
  },
  {
    "text": "some sort of queue so I want to make sure I have the queue exposed by an API with that the pulling function does not",
    "start": "3067380",
    "end": "3074940"
  },
  {
    "text": "require tight integration with the rest of the service so as you probably have",
    "start": "3074940",
    "end": "3080849"
  },
  {
    "text": "noticed what I'm doing right now is a one-hour version of what's really a three-day course on designing micro",
    "start": "3080849",
    "end": "3086460"
  },
  {
    "text": "services so if you do that full version whether it's from us or others there's a",
    "start": "3086460",
    "end": "3091950"
  },
  {
    "text": "lot of examples about how you can do this and make the micro services work but again what we're really trying to",
    "start": "3091950",
    "end": "3097769"
  },
  {
    "text": "avoid is creating a world where a change to one micro service requires regression testing against multiple micro services",
    "start": "3097769",
    "end": "3104249"
  },
  {
    "text": "we're trying to make the micro service isolate so that all I need to know about that micro services is api's and",
    "start": "3104249",
    "end": "3110220"
  },
  {
    "text": "everything else is black box to every other service the question is is I so as",
    "start": "3110220",
    "end": "3121980"
  },
  {
    "text": "we saw from your images that in for micro services API you used mostly HTTP",
    "start": "3121980",
    "end": "3130039"
  },
  {
    "text": "and actually tried to Google in micro",
    "start": "3130039",
    "end": "3136890"
  },
  {
    "text": "services HTTP versus messaging and first question lens on a stack overflow which",
    "start": "3136890",
    "end": "3143009"
  },
  {
    "text": "starts with world I heard Amazon uses HTTP for its micro services so what is",
    "start": "3143009",
    "end": "3149249"
  },
  {
    "text": "the main reason is it only GDP or you mean it's mostly HTTP and some cases",
    "start": "3149249",
    "end": "3156509"
  },
  {
    "text": "messaging so if you're doing so when you say messaging what do you what do you",
    "start": "3156509",
    "end": "3162630"
  },
  {
    "text": "mean of grant Rd took away your microphone so if I if by messaging you",
    "start": "3162630",
    "end": "3168509"
  },
  {
    "text": "mean a a lighter way protocol like mqtt sometimes we will use that today if I",
    "start": "3168509",
    "end": "3174779"
  },
  {
    "text": "messaging you mean actually passing a message in the terms of like a message queue well that's passing over HTTP",
    "start": "3174779",
    "end": "3181259"
  },
  {
    "text": "services usually now with an Amazon we started enforcing the rule about three years ago of all HTTP had to be HT",
    "start": "3181259",
    "end": "3188970"
  },
  {
    "text": "GPS that everything should be secured and indeed I think in today's world there's no reason to ever use clear text",
    "start": "3188970",
    "end": "3195900"
  },
  {
    "text": "HTTP that just opens up a security risk that there's no reason to open up but",
    "start": "3195900",
    "end": "3201540"
  },
  {
    "text": "beyond that the main reason that we're stressing that is so make it clear that",
    "start": "3201540",
    "end": "3207090"
  },
  {
    "text": "I'm using standard Network topologies and that I'm not writing special",
    "start": "3207090",
    "end": "3212220"
  },
  {
    "text": "networking pieces for my micro services so for those not familiar with mqtt that is a very lightweight designed for",
    "start": "3212220",
    "end": "3218820"
  },
  {
    "text": "Internet of Things but sometimes it makes sense if I need to do high volumes and I have an application layer that",
    "start": "3218820",
    "end": "3225630"
  },
  {
    "text": "will take care of consistency because there it's essentially a high speed to UDP equivalent of moving data but there",
    "start": "3225630",
    "end": "3233280"
  },
  {
    "text": "there are times that it makes sense if I need to move data very lightweight all right one more question hi my question",
    "start": "3233280",
    "end": "3242010"
  },
  {
    "text": "is regarding loose coupled micro services and as you said that every time",
    "start": "3242010",
    "end": "3247080"
  },
  {
    "text": "a micro service has to write in a message queue so if you got transactions which are very much time constrained",
    "start": "3247080",
    "end": "3255180"
  },
  {
    "text": "then every time publishing or subscribing to those message topics wanted like increase the latencies so",
    "start": "3255180",
    "end": "3264150"
  },
  {
    "text": "the short answer is yes well increase the latency so then how do I deal with",
    "start": "3264150",
    "end": "3270869"
  },
  {
    "text": "that and do it so one way is to use very low latency if I care about latency",
    "start": "3270869",
    "end": "3276359"
  },
  {
    "text": "deeply use very low latency queues usually an in-memory store like Redis",
    "start": "3276359",
    "end": "3281839"
  },
  {
    "text": "the other piece is loose coupling sets you free it gives you parallelism and",
    "start": "3281839",
    "end": "3287040"
  },
  {
    "text": "let you grow but if I've got a hard business requirement but I've got it I got to get these ten services done in",
    "start": "3287040",
    "end": "3293040"
  },
  {
    "text": "15 50 milliseconds probably can't have them all queue in there I'm gonna have to have some faster ways having said",
    "start": "3293040",
    "end": "3300119"
  },
  {
    "text": "that in Redis I in an elastic cache as we call the hosted Redis and Amazon I",
    "start": "3300119",
    "end": "3305640"
  },
  {
    "text": "can read or write a 1k object in about 200 microseconds so given that speed I",
    "start": "3305640",
    "end": "3312630"
  },
  {
    "text": "can usually do many hops and still be within my budget again this is one of those functional requirements you have",
    "start": "3312630",
    "end": "3318300"
  },
  {
    "text": "to care about all right if you have more questions I'm gonna be hanging out here so come up and",
    "start": "3318300",
    "end": "3324010"
  },
  {
    "text": "talk to me otherwise I have two requests of you one go talk to our partners these",
    "start": "3324010",
    "end": "3329230"
  },
  {
    "text": "are the fine people who feed for the bread CIL's this morning if you uh the other stuff and please go out there and",
    "start": "3329230",
    "end": "3336940"
  },
  {
    "text": "do something really cool with micro-services thank you for your time [Applause]",
    "start": "3336940",
    "end": "3345640"
  }
]