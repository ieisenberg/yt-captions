[
  {
    "start": "0",
    "end": "232000"
  },
  {
    "text": "good morning everyone my name is Mina doubter",
    "start": "1730",
    "end": "6990"
  },
  {
    "text": "I'm here to talk about firecracker for today morning session I'm a Senior",
    "start": "6990",
    "end": "13710"
  },
  {
    "text": "Product Manager Amazon ec2 I'm also the PM for a firecracker and for bustable instances typically when we",
    "start": "13710",
    "end": "21210"
  },
  {
    "text": "talk about virtual machines secure and",
    "start": "21210",
    "end": "27630"
  },
  {
    "text": "fast are not two words that we use together but firecracker allows to create micro VMs that are both secure",
    "start": "27630",
    "end": "34440"
  },
  {
    "text": "and fast and they're well suited for service computing so today let's dive",
    "start": "34440",
    "end": "40710"
  },
  {
    "text": "into learning about firecracker so for the agenda we will go over the",
    "start": "40710",
    "end": "46920"
  },
  {
    "text": "introduction of firecracker we'll talk about the product definition a little bit about the design principles how it",
    "start": "46920",
    "end": "54360"
  },
  {
    "text": "came to be then we'll also cover the use cases one of the customers that that",
    "start": "54360",
    "end": "61859"
  },
  {
    "text": "uses firecracker is an internal customer AWS lambda then we'll also look into our",
    "start": "61859",
    "end": "67140"
  },
  {
    "text": "next customer which is AWS for gate that uses firecracker then we'll spend some",
    "start": "67140",
    "end": "73770"
  },
  {
    "text": "time a little bit about firecracker in the open-source community and the engagement that it has been receiving",
    "start": "73770",
    "end": "79520"
  },
  {
    "text": "and then we'll wrap up so what is firecracker so firecrackers and open",
    "start": "79520",
    "end": "87330"
  },
  {
    "text": "source virtualization technology it's a virtual machine manager that uses the",
    "start": "87330",
    "end": "93030"
  },
  {
    "text": "Linux kernel-based virtual machine also known as the KVM to create and manage",
    "start": "93030",
    "end": "99720"
  },
  {
    "text": "lightweight virtual machines or we call them the micro VMS so until now you",
    "start": "99720",
    "end": "105570"
  },
  {
    "text": "needed to choose between containers that offered fast high performance high",
    "start": "105570",
    "end": "112409"
  },
  {
    "text": "density environment for your lightweight workloads or you how to choose virtual",
    "start": "112409",
    "end": "118290"
  },
  {
    "text": "machines that offered a very secure boundary but with firecracker you no",
    "start": "118290",
    "end": "123570"
  },
  {
    "text": "longer have to choose the micro VM provides enhanced security",
    "start": "123570",
    "end": "129509"
  },
  {
    "text": "and workload isolation over traditional VMs while also providing the speed and",
    "start": "129509",
    "end": "135810"
  },
  {
    "text": "density of containers it is also a low resource overhead it is perfectly suited",
    "start": "135810",
    "end": "143580"
  },
  {
    "text": "for server less computing it was developed at Amazon AWS so in about",
    "start": "143580",
    "end": "150810"
  },
  {
    "text": "November 2017 we started development of firecracker specifically for these",
    "start": "150810",
    "end": "156780"
  },
  {
    "text": "internal customers lambda and Fargate lambda when it launched in three years",
    "start": "156780",
    "end": "163680"
  },
  {
    "text": "ago it was actually meant to offer server less compute but over time we saw",
    "start": "163680",
    "end": "171030"
  },
  {
    "text": "that as more and more customers were using it providing a single account",
    "start": "171030",
    "end": "176730"
  },
  {
    "text": "single instance isolation was not economically beneficial for us from a utilization standpoint so as we were",
    "start": "176730",
    "end": "184709"
  },
  {
    "text": "going to miss one second as we were",
    "start": "184709",
    "end": "190860"
  },
  {
    "text": "going through to setup our look into our virtualization technology we thought",
    "start": "190860",
    "end": "196380"
  },
  {
    "text": "there was opportunity for us to improve how our utilization was being done for",
    "start": "196380",
    "end": "201840"
  },
  {
    "text": "lambda and farken and that's how we started to think about firecracker the",
    "start": "201840",
    "end": "207060"
  },
  {
    "text": "origin of firecracker it was actually started from the chromium OS virtual",
    "start": "207060",
    "end": "212580"
  },
  {
    "text": "machine project which was originally written in rust the project was called across VM over time since we out",
    "start": "212580",
    "end": "220260"
  },
  {
    "text": "of the cross VM project both cross VM and firecracker have diverged quite a",
    "start": "220260",
    "end": "225989"
  },
  {
    "text": "bit to serve different customer needs so they're very different now so what",
    "start": "225989",
    "end": "233310"
  },
  {
    "start": "232000",
    "end": "232000"
  },
  {
    "text": "problem are we solving with firecracker it's really a hard packing problem so",
    "start": "233310",
    "end": "240239"
  },
  {
    "text": "when we think about lambda lambda offers a really good",
    "start": "240239",
    "end": "248150"
  },
  {
    "text": "compute contract for four customers that offers lightweight environment to do",
    "start": "249090",
    "end": "256900"
  },
  {
    "text": "their workload applications however it's a challenging environment for the",
    "start": "256900",
    "end": "262030"
  },
  {
    "text": "service providers to provide a cost-efficient at the same time provide the same privacy for customers and for",
    "start": "262030",
    "end": "271139"
  },
  {
    "text": "and also have the same kind of isolation boundaries so if you look at this this",
    "start": "271139",
    "end": "279130"
  },
  {
    "text": "is kind of a typical way how a workload is consuming resources you can think",
    "start": "279130",
    "end": "286120"
  },
  {
    "text": "about the y-axis as any resource it could be compute memory or network and so when customers pay for their tasks",
    "start": "286120",
    "end": "294190"
  },
  {
    "text": "essentially lambda worker has to make these resources available for the customer when the function needs to",
    "start": "294190",
    "end": "301660"
  },
  {
    "text": "execute so you can see that it's kind of like ups and downs here it's not an optimal utilization of resource so if",
    "start": "301660",
    "end": "309400"
  },
  {
    "text": "you think about multiple end customers trying to use those resources it it",
    "start": "309400",
    "end": "315039"
  },
  {
    "text": "really been taxed well takes up all the utilization but the key piece that is",
    "start": "315039",
    "end": "320889"
  },
  {
    "text": "missing here is the isolation boundary between different tasks that are running",
    "start": "320889",
    "end": "326020"
  },
  {
    "text": "on that workload so we needed to use virtual machines the virtual machines",
    "start": "326020",
    "end": "332949"
  },
  {
    "text": "that can actually Bend in this way that are flexible and what do we mean by bend",
    "start": "332949",
    "end": "337960"
  },
  {
    "text": "is essentially how we can always subscribe for resources so that when one task is idle the other can use up the",
    "start": "337960",
    "end": "344560"
  },
  {
    "text": "resource that is underutilized so on top of that if we want to bring in the isolation similar to the virtual",
    "start": "344560",
    "end": "352000"
  },
  {
    "text": "machines it provides the barrier and the isolation that can support different",
    "start": "352000",
    "end": "357190"
  },
  {
    "text": "tasks in the same secure way and still be fast and efficient and that is",
    "start": "357190",
    "end": "363610"
  },
  {
    "text": "essentially what firecracker is able to offer for lambda",
    "start": "363610",
    "end": "369479"
  },
  {
    "text": "so let's look at the product perspective the key benefits of firecracker it",
    "start": "369590",
    "end": "377070"
  },
  {
    "start": "370000",
    "end": "370000"
  },
  {
    "text": "actually stands on three corner pillars in how we thought about firecracker so",
    "start": "377070",
    "end": "383490"
  },
  {
    "text": "security is our number one principle startup time or the boot time",
    "start": "383490",
    "end": "388800"
  },
  {
    "text": "performance is our second principle and then helping bring better utilization is",
    "start": "388800",
    "end": "394860"
  },
  {
    "text": "our third principle so no matter how well you put so if you think about applications no matter how well you put",
    "start": "394860",
    "end": "403770"
  },
  {
    "text": "your applications and partition your accounts when you run your applications there are some CPU instructions that are",
    "start": "403770",
    "end": "410820"
  },
  {
    "text": "left behind that when the host machine gets access to those instructions can",
    "start": "410820",
    "end": "416550"
  },
  {
    "text": "potentially leave too vulnerable surface areas but because of the the minimal",
    "start": "416550",
    "end": "423450"
  },
  {
    "text": "device model of fire cracker it really reduces the attack surface on the",
    "start": "423450",
    "end": "429240"
  },
  {
    "text": "virtual machines fire cracker implements the minimal device model that",
    "start": "429240",
    "end": "434520"
  },
  {
    "text": "encapsulate all the non-essential functionalities and reduces the attack surface area of the micro VMs this",
    "start": "434520",
    "end": "441390"
  },
  {
    "text": "improves security decreases the startup time and increases our utilization",
    "start": "441390",
    "end": "447200"
  },
  {
    "text": "efficiencies of the hardware so let's look at the benefits from each",
    "start": "447200",
    "end": "454320"
  },
  {
    "text": "perspective so the fire cracker micro VM so it uses the KVM based virtualization",
    "start": "454320",
    "end": "459810"
  },
  {
    "text": "that provides enhanced security over traditional VMs this ensures that",
    "start": "459810",
    "end": "465540"
  },
  {
    "text": "workloads from different customers can run safely on the same hardware and",
    "start": "465540",
    "end": "471960"
  },
  {
    "text": "because of the minimal device model it also reduces the attack surface which provides more security",
    "start": "471960",
    "end": "478290"
  },
  {
    "text": "so in containers the same kernel is shared between different guest OSS but",
    "start": "478290",
    "end": "485820"
  },
  {
    "text": "in the case of firecracker each guest gets it it's different or unique kernel",
    "start": "485820",
    "end": "491310"
  },
  {
    "text": "so there is no sharing of kernel in addition to the minimal device space",
    "start": "491310",
    "end": "497330"
  },
  {
    "text": "because of the the small minimal surface",
    "start": "497330",
    "end": "504080"
  },
  {
    "text": "the it is really lightweight so because of that were able to launch micro VMs at",
    "start": "504080",
    "end": "509690"
  },
  {
    "text": "a very very fast rate so it is designed to have a minimal overhead you can",
    "start": "509690",
    "end": "516070"
  },
  {
    "text": "launch micro VMs in less than 120 milliseconds and at a mutation rate of",
    "start": "516070",
    "end": "522760"
  },
  {
    "text": "150 micro VMS per second per host so the",
    "start": "522760",
    "end": "529160"
  },
  {
    "text": "micro VM runs with reduced memory overload less than five megabytes per",
    "start": "529160",
    "end": "536650"
  },
  {
    "text": "footprint per micro VM enabling high density of micro VMs to be packed on a",
    "start": "536650",
    "end": "542480"
  },
  {
    "text": "single server so it provides a rate limiter built into every micro VM this",
    "start": "542480",
    "end": "549860"
  },
  {
    "text": "enables optimized sharing of the network storage resources within across those",
    "start": "549860",
    "end": "556670"
  },
  {
    "text": "thousands of micro VMs that's running on the same hardware so really the the density of how many micro Williams you",
    "start": "556670",
    "end": "562880"
  },
  {
    "text": "can run on each server depends on how much resources is available on that hardware so with fire cracker you can",
    "start": "562880",
    "end": "571000"
  },
  {
    "text": "see that we're making the same deep infrastructure to support service",
    "start": "571000",
    "end": "577070"
  },
  {
    "text": "computing the same way we've been investing in our easy to compute instances so today we support running",
    "start": "577070",
    "end": "585470"
  },
  {
    "text": "fire cracker or Intel CPU processors and later this year we will also be releasing support to run on AMD",
    "start": "585470",
    "end": "592490"
  },
  {
    "text": "processors and ARM processors we're also building integration of fire cracker to",
    "start": "592490",
    "end": "599840"
  },
  {
    "text": "support container D for kubernetes support",
    "start": "599840",
    "end": "605320"
  },
  {
    "start": "605000",
    "end": "605000"
  },
  {
    "text": "so let's look into our design principles so firecracker can safely run workloads",
    "start": "605380",
    "end": "614020"
  },
  {
    "text": "from different customers on a same hardware as I said because of its",
    "start": "614020",
    "end": "619690"
  },
  {
    "text": "lightweight nature it gets the likeness and the density of containers but it",
    "start": "619690",
    "end": "625930"
  },
  {
    "text": "also brings in the security of traditional VMs that the containers traditionally have locked customers can",
    "start": "625930",
    "end": "633610"
  },
  {
    "text": "create micro VMs of any V CPU and memory configuration that is suited for their",
    "start": "633610",
    "end": "639610"
  },
  {
    "text": "workload type and we'll see how different customer profiles have used",
    "start": "639610",
    "end": "646090"
  },
  {
    "text": "different CPU and memory configurations for their needs fat cracker also allows",
    "start": "646090",
    "end": "653440"
  },
  {
    "text": "our subscription of resources similar to the graph that we saw early on that",
    "start": "653440",
    "end": "658840"
  },
  {
    "text": "essentially is how it is able to fairly utilize all the resources that are",
    "start": "658840",
    "end": "664030"
  },
  {
    "text": "available on the server and be able to pack as many lightweight micro VMs on",
    "start": "664030",
    "end": "669370"
  },
  {
    "text": "the server so it has a pretty steady mutation rate we've been able to",
    "start": "669370",
    "end": "676390"
  },
  {
    "text": "benchmark up to 150 280 micro VMs per",
    "start": "676390",
    "end": "682450"
  },
  {
    "text": "host depending on how many cores that are available on the host 24 to 36 course",
    "start": "682450",
    "end": "690120"
  },
  {
    "text": "so as I said the number of VMs micro VM that you can run on the hardware is only",
    "start": "691710",
    "end": "697890"
  },
  {
    "text": "limited by the amount of resources that are available on the hardware so later",
    "start": "697890",
    "end": "704130"
  },
  {
    "text": "we'll see like how these different services lambda and forget are always subscribing these resources to utilize",
    "start": "704130",
    "end": "710610"
  },
  {
    "text": "them optimally through fire cracker and",
    "start": "710610",
    "end": "715700"
  },
  {
    "text": "then fire cracker each micro VM provides a guest facing API access to the host",
    "start": "715700",
    "end": "723120"
  },
  {
    "text": "configured metadata for network storage and basic devices such as serial serial",
    "start": "723120",
    "end": "730470"
  },
  {
    "text": "console and then there's also a key for sending a ctrl-alt-del for power",
    "start": "730470",
    "end": "736380"
  },
  {
    "text": "management as well yeah and then we talked about the minimalistic guest",
    "start": "736380",
    "end": "742950"
  },
  {
    "text": "device model which which primarily means that it supports very basic device emulation so that it reduces the attack",
    "start": "742950",
    "end": "750029"
  },
  {
    "text": "surface on the microbiomes so here's a list of host facing REST API s so you",
    "start": "750029",
    "end": "758220"
  },
  {
    "start": "752000",
    "end": "752000"
  },
  {
    "text": "have access to the get ap eyes and they're put ap eyes so the return gets",
    "start": "758220",
    "end": "764850"
  },
  {
    "text": "the general information about the instance so when you do a put action it",
    "start": "764850",
    "end": "771209"
  },
  {
    "text": "it you can send in a bunch of parameters some of these parameters are instant",
    "start": "771209",
    "end": "776970"
  },
  {
    "text": "start so this essentially allows you to start an instance and boot it up get to the guest OS then we have the send",
    "start": "776970",
    "end": "784500"
  },
  {
    "text": "ctrl-alt-del as you know it's a it's a instruction set that is typically",
    "start": "784500",
    "end": "790200"
  },
  {
    "text": "associated with a soft reboot in in most Linux distribution in the Firecracker",
    "start": "790200",
    "end": "797010"
  },
  {
    "text": "side the firecracker associates it exits",
    "start": "797010",
    "end": "802050"
  },
  {
    "text": "on CPU reset so the ctrl-alt-del can also be used for a graceful shutdown of",
    "start": "802050",
    "end": "807930"
  },
  {
    "text": "micro VMS so it's it's one of the keys that is actually available the only key",
    "start": "807930",
    "end": "814160"
  },
  {
    "text": "we also have the block device rescan so the block device rescan action is used",
    "start": "814160",
    "end": "819720"
  },
  {
    "text": "to trigger a rescan from the guest micro VM after it has",
    "start": "819720",
    "end": "825309"
  },
  {
    "text": "launched when the host has reach ain't has reaching has changed the configuration of the block device so",
    "start": "825309",
    "end": "832540"
  },
  {
    "text": "that the guests can update its data structure so typically this action is called after the guest has been launched",
    "start": "832540",
    "end": "839519"
  },
  {
    "text": "we also have the get API so they get API allows you to configure the machine so",
    "start": "839519",
    "end": "847389"
  },
  {
    "text": "when you call the get without doing a put it provides the default configuration of the machine which is usually one V CPU and 128 megabytes but",
    "start": "847389",
    "end": "856509"
  },
  {
    "text": "then you can use the put to configure your VM for the V CPU or the memory",
    "start": "856509",
    "end": "862269"
  },
  {
    "text": "configuration and all that you can also set your drives using the devices action",
    "start": "862269",
    "end": "871019"
  },
  {
    "text": "to set up your device ID as well yeah so",
    "start": "871019",
    "end": "879059"
  },
  {
    "text": "here's a design of micro VM so the fire cracker uses the user space the Linux",
    "start": "879059",
    "end": "885579"
  },
  {
    "text": "kernel-based virtual machine to provide isolation the fast startup startup time",
    "start": "885579",
    "end": "892029"
  },
  {
    "text": "and the low memory overhead of each micro VM enables you to pack thousands",
    "start": "892029",
    "end": "897279"
  },
  {
    "text": "of micro VMs so this means that every function or container group can be encapsulated with",
    "start": "897279",
    "end": "905290"
  },
  {
    "text": "a virtual machine barrier or the jailer here and enable different workloads from",
    "start": "905290",
    "end": "913540"
  },
  {
    "text": "multiple accounts and multiple customers to run on that same physical hardware",
    "start": "913540",
    "end": "919589"
  },
  {
    "text": "you can control the fire cracker process we are the restful api the set of API is",
    "start": "920189",
    "end": "926259"
  },
  {
    "text": "that we just looked Ali on it enables common actions such as configuring your",
    "start": "926259",
    "end": "931959"
  },
  {
    "text": "instances setting the V CPU and memory configurations for each of the micro VM",
    "start": "931959",
    "end": "937569"
  },
  {
    "text": "it allows running all these cellulous compute which are typically short-lived",
    "start": "937569",
    "end": "944669"
  },
  {
    "text": "workloads so even if you need to shut down many of these micro VMs and restart",
    "start": "944669",
    "end": "950110"
  },
  {
    "text": "them they are so fast that you don't need to maintain one poles so we'll look into",
    "start": "950110",
    "end": "960830"
  },
  {
    "text": "lambda and how lambda uses firecracker so before we dive into lambda just a",
    "start": "960830",
    "end": "967710"
  },
  {
    "text": "brief overview about lambda we built lambda it is it is as we built out",
    "start": "967710",
    "end": "976080"
  },
  {
    "text": "lambda we're optimizing for security reliability for performance and of",
    "start": "976080",
    "end": "983730"
  },
  {
    "text": "course for cost efficiency as well lambda is a foundational service that is",
    "start": "983730",
    "end": "990600"
  },
  {
    "text": "available in all AWS regions that are available today and because it's a",
    "start": "990600",
    "end": "995760"
  },
  {
    "text": "foundational service any new regions that are coming up we make sure that lambda is available as part of the",
    "start": "995760",
    "end": "1001670"
  },
  {
    "text": "region as we build out our systems behind the scenes we think about how to",
    "start": "1001670",
    "end": "1008240"
  },
  {
    "text": "distribute the service how to scale up and scale down how to work around",
    "start": "1008240",
    "end": "1014500"
  },
  {
    "text": "failures and down times amongst different AZ so that customers don't have to worry and manage all these",
    "start": "1014500",
    "end": "1020830"
  },
  {
    "text": "clusters and and of course we do that to preserve isolation and maximize",
    "start": "1020830",
    "end": "1027949"
  },
  {
    "text": "utilization as well so just as a data point just three years after lambda was",
    "start": "1027949",
    "end": "1036170"
  },
  {
    "text": "launched lambda is processing trillions of requests every month from hundreds",
    "start": "1036170",
    "end": "1041660"
  },
  {
    "text": "and thousands of customers active accounts today so it's it's heavily used and and quite popular from our customers",
    "start": "1041660",
    "end": "1051190"
  },
  {
    "text": "so so one of the primary systems in the Lamba architecture is called the worker",
    "start": "1051190",
    "end": "1057559"
  },
  {
    "text": "or Sol's of the server which provisions a secure environment for customer code",
    "start": "1057559",
    "end": "1063920"
  },
  {
    "text": "execution so what does the worker do it creates and manages a collection of",
    "start": "1063920",
    "end": "1070340"
  },
  {
    "text": "sandboxes it sets limit on San boxes such as the memory and the CPU available",
    "start": "1070340",
    "end": "1078020"
  },
  {
    "text": "for the function to execute it it manages customer code and and",
    "start": "1078020",
    "end": "1084900"
  },
  {
    "text": "mouth mounts it for execution it also has multiple language runtimes that it",
    "start": "1084900",
    "end": "1090330"
  },
  {
    "text": "manages it manages or it executes code through initialization and invoke and",
    "start": "1090330",
    "end": "1098070"
  },
  {
    "text": "and finally the AWS owned agents it also",
    "start": "1098070",
    "end": "1103230"
  },
  {
    "text": "manages the monitoring and the operation controls like providing feeds into cloud",
    "start": "1103230",
    "end": "1109200"
  },
  {
    "text": "watch so all that is what the worker does so we'll take a look into the lamda",
    "start": "1109200",
    "end": "1115560"
  },
  {
    "start": "1112000",
    "end": "1112000"
  },
  {
    "text": "worker architecture so the top you have your regular code which is essentially",
    "start": "1115560",
    "end": "1121620"
  },
  {
    "text": "the zip file and the layers that you want to run or we run on behalf of the",
    "start": "1121620",
    "end": "1127290"
  },
  {
    "text": "customers then we support a number of different languages as part of the",
    "start": "1127290",
    "end": "1134160"
  },
  {
    "text": "runtime there are the we support no Java C sharp and many more then we have the",
    "start": "1134160",
    "end": "1142550"
  },
  {
    "text": "underneath the runtime as the sandbox that hosts the runtime this is the copy",
    "start": "1142550",
    "end": "1147840"
  },
  {
    "text": "of Linux where we provide and and you're able to look into to see the file system",
    "start": "1147840",
    "end": "1153560"
  },
  {
    "text": "then below the guest OS is the hypervisor typically the virtualization",
    "start": "1153560",
    "end": "1163050"
  },
  {
    "text": "is enabled through the hypervisor and it runs on top of the host OS then we have",
    "start": "1163050",
    "end": "1169380"
  },
  {
    "text": "the host OS which is also powered by Amazon Linux for lambda today then at",
    "start": "1169380",
    "end": "1175830"
  },
  {
    "text": "the very bottom we have the physical hardware that all the systems use",
    "start": "1175830",
    "end": "1182750"
  },
  {
    "start": "1182000",
    "end": "1182000"
  },
  {
    "text": "so to keep workloads safe and separate so the code run time and sandbox are",
    "start": "1182860",
    "end": "1189740"
  },
  {
    "text": "only used by a single function from a single customer so if if a customer",
    "start": "1189740",
    "end": "1200000"
  },
  {
    "text": "sends a function and then again and again it is placed on the same sandbox",
    "start": "1200000",
    "end": "1205030"
  },
  {
    "text": "from the same customer serially so that it's it is not impacting the performance",
    "start": "1205030",
    "end": "1212169"
  },
  {
    "text": "however when we run the same work function on the same sandbox they",
    "start": "1212169",
    "end": "1218630"
  },
  {
    "text": "typically have a same spike or resource use pattern which means that all these",
    "start": "1218630",
    "end": "1225140"
  },
  {
    "text": "functions are going to spike for resource at the same time and then scale",
    "start": "1225140",
    "end": "1230390"
  },
  {
    "text": "down to ideal idle mode at the same time so that doesn't really resonate from a",
    "start": "1230390",
    "end": "1238870"
  },
  {
    "text": "optimal resource utilization so the guest operating systems are shared",
    "start": "1238870",
    "end": "1244910"
  },
  {
    "text": "across these multiple functions in an account but they are never shared across",
    "start": "1244910",
    "end": "1250760"
  },
  {
    "text": "multiple accounts so so the the boundary",
    "start": "1250760",
    "end": "1257720"
  },
  {
    "text": "that we put between these different accounts is virtualization through the hypervisor that is running",
    "start": "1257720",
    "end": "1264860"
  },
  {
    "text": "on top of the host OS so we with with introducing firecracker we can we can do",
    "start": "1264860",
    "end": "1272240"
  },
  {
    "text": "that we sorry before going into firecracker so the hypervisor",
    "start": "1272240",
    "end": "1277370"
  },
  {
    "text": "essentially helps kind of slicing and dicing the the physical hardware into",
    "start": "1277370",
    "end": "1282799"
  },
  {
    "text": "smaller isolated environments so that these functions can run for several",
    "start": "1282799",
    "end": "1288890"
  },
  {
    "text": "lists compute which are very lightweight without the hypervisor then like we don't have very small servers that can",
    "start": "1288890",
    "end": "1295940"
  },
  {
    "text": "run for the scale of individual functions so the question is how do we",
    "start": "1295940",
    "end": "1303410"
  },
  {
    "text": "manage providing the right isolation and at the same time providing the optimal",
    "start": "1303410",
    "end": "1309950"
  },
  {
    "text": "security as well so we will kind of go into that so let's take a look at how we do the",
    "start": "1309950",
    "end": "1316860"
  },
  {
    "start": "1314000",
    "end": "1314000"
  },
  {
    "text": "isolation part there are two ways we run lambda functions today one mode is where",
    "start": "1316860",
    "end": "1323250"
  },
  {
    "text": "each worker is a separate ec2 instance this is a great way to offer a secure",
    "start": "1323250",
    "end": "1329340"
  },
  {
    "text": "boundary and it's a fast way to build these functionalities this is how we've",
    "start": "1329340",
    "end": "1334770"
  },
  {
    "text": "created lambda and it's still used in the in the production where we use ec2 instances but that's this is more of the",
    "start": "1334770",
    "end": "1342150"
  },
  {
    "text": "traditional way how we did it but then there's also the new way that we started",
    "start": "1342150",
    "end": "1347220"
  },
  {
    "start": "1344000",
    "end": "1344000"
  },
  {
    "text": "using firecracker so we run bare metal instances which are essentially the bare metal instance that",
    "start": "1347220",
    "end": "1352740"
  },
  {
    "text": "you're able to access from the ec2 console so the firecracker micro VM",
    "start": "1352740",
    "end": "1357920"
  },
  {
    "text": "provides a sufficient security boundary to support multiple accounts running on",
    "start": "1357920",
    "end": "1365100"
  },
  {
    "text": "the same physical hardware so under firecracker were able to run a",
    "start": "1365100",
    "end": "1370200"
  },
  {
    "text": "lot of these micro VMs that gives more flexibility for us to run these",
    "start": "1370200",
    "end": "1376980"
  },
  {
    "text": "functions on the same physical hardware using the bare metal instances so this",
    "start": "1376980",
    "end": "1384420"
  },
  {
    "text": "really simplifies the security model for us so instead of having one function one",
    "start": "1384420",
    "end": "1390150"
  },
  {
    "text": "account on a single instance we now are able to run many functions on so one",
    "start": "1390150",
    "end": "1398130"
  },
  {
    "text": "function per micro VM many micro VMs for many accounts on the same hardware but",
    "start": "1398130",
    "end": "1405240"
  },
  {
    "text": "providing the same barriers to traditional VMs that we have run on",
    "start": "1405240",
    "end": "1410309"
  },
  {
    "text": "lambda so and this is really good for us in in a whole lot of ways because it",
    "start": "1410309",
    "end": "1416910"
  },
  {
    "text": "really helps that bin packing and improve our utilization so another",
    "start": "1416910",
    "end": "1423870"
  },
  {
    "start": "1422000",
    "end": "1422000"
  },
  {
    "text": "optimization that we do with lambda is how we pick workloads and and do our",
    "start": "1423870",
    "end": "1429150"
  },
  {
    "text": "placements so this is a worker or a server when we look at this from a",
    "start": "1429150",
    "end": "1436290"
  },
  {
    "text": "server perspective or a sandbox the packing the the same workload on on same",
    "start": "1436290",
    "end": "1442080"
  },
  {
    "text": "server it kind of shows like each server has a similar type of workloads so as you can see when you pack in the",
    "start": "1442080",
    "end": "1449760"
  },
  {
    "text": "same type of workloads on a single server each of them are going to compete",
    "start": "1449760",
    "end": "1455040"
  },
  {
    "text": "for resources and it's not an optimal use of the server however if we are able",
    "start": "1455040",
    "end": "1463470"
  },
  {
    "text": "to mix and match and use an optimal statistically loaded workload placement",
    "start": "1463470",
    "end": "1471120"
  },
  {
    "text": "then we have different type of diverse workloads that we can put up on each servers so that it mimics very similar",
    "start": "1471120",
    "end": "1479490"
  },
  {
    "text": "to the graph that we saw early on where they're each peeking for resources at different times and are optimally able",
    "start": "1479490",
    "end": "1486630"
  },
  {
    "text": "to use those resources and it also offers the same you know hardware",
    "start": "1486630",
    "end": "1492330"
  },
  {
    "text": "virtualization based security and isolation for each of these workloads so",
    "start": "1492330",
    "end": "1497400"
  },
  {
    "text": "we're able to have efficient high",
    "start": "1497400",
    "end": "1502679"
  },
  {
    "text": "density while also improving our utilization",
    "start": "1502679",
    "end": "1508250"
  },
  {
    "text": "okay so we'll go into our next use case",
    "start": "1510789",
    "end": "1516219"
  },
  {
    "start": "1512000",
    "end": "1512000"
  },
  {
    "text": "we'll talk about the Fargate use case but Before we jump into forget just a",
    "start": "1516219",
    "end": "1522399"
  },
  {
    "text": "quick overview of the container services landscape so we have the Amazon",
    "start": "1522399",
    "end": "1528969"
  },
  {
    "text": "ECS and eks to help manage your container services on ec2 instances",
    "start": "1528969",
    "end": "1537570"
  },
  {
    "text": "however Fargate is a really cool service that takes all the managing part out of",
    "start": "1537570",
    "end": "1545259"
  },
  {
    "text": "the customer and and does the managing of the cluster and scaling of cluster and the cluster utilization all of that",
    "start": "1545259",
    "end": "1553269"
  },
  {
    "text": "is managed by Fargate and customers don't have to worry about that they just have to configure their functions define",
    "start": "1553269",
    "end": "1560169"
  },
  {
    "text": "the amount of CPUs and memory required to run their functions and then load it up on easy ECS and Fargate will take",
    "start": "1560169",
    "end": "1566829"
  },
  {
    "text": "care of executing that at the optimal level and the nice part is that when",
    "start": "1566829",
    "end": "1573759"
  },
  {
    "text": "using Fargate you only pay for the resource that the application is using so all the overhead is taken out of the",
    "start": "1573759",
    "end": "1582309"
  },
  {
    "text": "customer hands then there's also the image registry or for container image",
    "start": "1582309",
    "end": "1588569"
  },
  {
    "text": "repository the ECR so it's it's it's",
    "start": "1588569",
    "end": "1594899"
  },
  {
    "text": "really cool to use the ECR for snapshotting container images in the",
    "start": "1594899",
    "end": "1602409"
  },
  {
    "text": "repository but it also is nice to use the ECR service for quickly scaling up",
    "start": "1602409",
    "end": "1610449"
  },
  {
    "text": "and scaling down of container functions so that you can really optimize for cost",
    "start": "1610449",
    "end": "1616989"
  },
  {
    "text": "as well based on the resource that the application needs so here's Fargate so far gate is a is a",
    "start": "1616989",
    "end": "1626829"
  },
  {
    "text": "compute engine for Amazon ECS it does managing of all your containers",
    "start": "1626829",
    "end": "1633659"
  },
  {
    "text": "the cluster scaling up and cluster utilization so with with Fargate you",
    "start": "1633760",
    "end": "1639700"
  },
  {
    "text": "only have to think about your containers so you can just focus on building your application and don't have to worry",
    "start": "1639700",
    "end": "1645880"
  },
  {
    "text": "about managing all these ec2 instances that are running underneath",
    "start": "1645880",
    "end": "1651610"
  },
  {
    "text": "so what Fargate does in the in the backend is when the functions come in",
    "start": "1651610",
    "end": "1658510"
  },
  {
    "text": "it works with ECS and the underlying ec2 instances for optimal placement of those",
    "start": "1658510",
    "end": "1665350"
  },
  {
    "text": "functions so now easy to has a wide range of instance family offerings from",
    "start": "1665350",
    "end": "1672190"
  },
  {
    "text": "general-purpose computer optimized memory optimized even graphics instances the instance sizes range from the Nano",
    "start": "1672190",
    "end": "1679300"
  },
  {
    "text": "size which is the smallest offering we have going all the way up to the the",
    "start": "1679300",
    "end": "1684550"
  },
  {
    "text": "largest metal size so there is quite a bit of a range but for functions that",
    "start": "1684550",
    "end": "1692950"
  },
  {
    "text": "requires something as small as a quarterly CPU and 128 cubes of mem or",
    "start": "1692950",
    "end": "1699490"
  },
  {
    "text": "even half a gig of ram these instances are not optimal sizes so yes while",
    "start": "1699490",
    "end": "1707880"
  },
  {
    "text": "Fargate and easy two are doing the the resource management it is not optimal",
    "start": "1707880",
    "end": "1713470"
  },
  {
    "text": "resource utilization for us so we we",
    "start": "1713470",
    "end": "1718600"
  },
  {
    "text": "have we had a problem when using ec2 instances for Fargate so yeah so this is",
    "start": "1718600",
    "end": "1726040"
  },
  {
    "start": "1724000",
    "end": "1724000"
  },
  {
    "text": "kind of like the the Fargate configuration and offerings Fargate offers about starting from a quarter of",
    "start": "1726040",
    "end": "1733840"
  },
  {
    "text": "e cpu which is essentially time sliced running all the way up to four V CPUs",
    "start": "1733840",
    "end": "1739240"
  },
  {
    "text": "and on the memory configuration side you can start from half a gig of ram running",
    "start": "1739240",
    "end": "1745630"
  },
  {
    "text": "all the way up to 30 gigs of ram in increments of 1 so you you're just it's",
    "start": "1745630",
    "end": "1751840"
  },
  {
    "text": "kind of like the elastic cloud coming to the next level of granularity is like the elastic resource utilization",
    "start": "1751840",
    "end": "1757180"
  },
  {
    "text": "whatever resource that you're utilizing you only pay for that and don't have to factor in the inefficiencies that are",
    "start": "1757180",
    "end": "1764560"
  },
  {
    "text": "built into the you know cookie cutter instance deck",
    "start": "1764560",
    "end": "1771510"
  },
  {
    "text": "so so let's look into how we came from",
    "start": "1771780",
    "end": "1777340"
  },
  {
    "start": "1772000",
    "end": "1772000"
  },
  {
    "text": "the ec2 instances to using micro VMS so in the case when Fargate was running",
    "start": "1777340",
    "end": "1786010"
  },
  {
    "text": "these functions when functions are being called in order to place them on",
    "start": "1786010",
    "end": "1791380"
  },
  {
    "text": "instances we have to maintain a warm pool of ec2 instances that were running so that we're not launching ec2",
    "start": "1791380",
    "end": "1798669"
  },
  {
    "text": "instances we know it takes time to launch those instances and we don't want customers waiting for these instances to become available so we maintain these",
    "start": "1798669",
    "end": "1805510"
  },
  {
    "text": "warm pools but with Firecracker you",
    "start": "1805510",
    "end": "1810880"
  },
  {
    "text": "don't have to maintain these wom pools and it actually offers yeah so you are",
    "start": "1810880",
    "end": "1819429"
  },
  {
    "start": "1814000",
    "end": "1814000"
  },
  {
    "text": "able to launch container like micro you",
    "start": "1819429",
    "end": "1825580"
  },
  {
    "text": "can launch your containers in the small lightweight fashion but also think about",
    "start": "1825580",
    "end": "1831429"
  },
  {
    "text": "having the same kind of boundary and isolation required for the secure",
    "start": "1831429",
    "end": "1837549"
  },
  {
    "text": "functioning of your workloads you can get rid of the warm pools required",
    "start": "1837549",
    "end": "1843250"
  },
  {
    "text": "because firecracker has less than 125 milliseconds of good time so as soon as",
    "start": "1843250",
    "end": "1848500"
  },
  {
    "text": "the function is being called a micro VM can be spun up based on the resource configuration that the task is looking",
    "start": "1848500",
    "end": "1855100"
  },
  {
    "text": "for and Fargate already takes care of placement of all these functions",
    "start": "1855100",
    "end": "1862630"
  },
  {
    "text": "optimally on different servers so that you can benefit from oversubscription as well making sure each micro VM has the",
    "start": "1862630",
    "end": "1870730"
  },
  {
    "text": "resources it needs and it takes care of the placement on the resource that is able to offer the required resource",
    "start": "1870730",
    "end": "1878950"
  },
  {
    "text": "can't aggression yeah and then we also have multi AZ availability so that you have high",
    "start": "1878950",
    "end": "1885580"
  },
  {
    "text": "durability for accessing these functions",
    "start": "1885580",
    "end": "1890610"
  },
  {
    "text": "so one of the so I talked a lot about improving our utilization while",
    "start": "1890610",
    "end": "1898030"
  },
  {
    "text": "maintaining security and providing the same isolation boundaries what what is",
    "start": "1898030",
    "end": "1903610"
  },
  {
    "text": "this all matter for customers if we're able to improve our utilization and and",
    "start": "1903610",
    "end": "1910060"
  },
  {
    "text": "bring down our cost it essentially translates back to giving passing on",
    "start": "1910060",
    "end": "1916030"
  },
  {
    "text": "those price those cost efficiencies back to our customers through price reductions and so earlier this year I",
    "start": "1916030",
    "end": "1924280"
  },
  {
    "text": "believe it was in January after we launched firecracker and and both lambda",
    "start": "1924280",
    "end": "1930040"
  },
  {
    "text": "and Fargate started adopting firecracker the efficiencies that Fargate was able",
    "start": "1930040",
    "end": "1936040"
  },
  {
    "text": "to achieve from firecracker essentially translated to price cuts for customers",
    "start": "1936040",
    "end": "1942670"
  },
  {
    "text": "were using four gates so if you can see some of the popular services the two vcp",
    "start": "1942670",
    "end": "1949120"
  },
  {
    "text": "and 16 cups of fram who were able to achieve up to 50% price reduction",
    "start": "1949120",
    "end": "1954870"
  },
  {
    "text": "earlier this year let's look into briefly of the container",
    "start": "1954870",
    "end": "1962440"
  },
  {
    "text": "the integration with firecracker that AWS is working on so as you know",
    "start": "1962440",
    "end": "1970900"
  },
  {
    "start": "1969000",
    "end": "1969000"
  },
  {
    "text": "firecracker is a open source project and within Amazon there are many open source",
    "start": "1970900",
    "end": "1977110"
  },
  {
    "text": "initiatives that are underway one such project is the The Container D",
    "start": "1977110",
    "end": "1982720"
  },
  {
    "text": "integration that we've been working on so our objective to integrate with",
    "start": "1982720",
    "end": "1989650"
  },
  {
    "text": "container D is to manage containers as fire cracker micro VMs so the project",
    "start": "1989650",
    "end": "1997300"
  },
  {
    "text": "the fire cracker container D essentially allows supporting multi tenant hosts",
    "start": "1997300",
    "end": "2006050"
  },
  {
    "text": "for four containers so it uses like as",
    "start": "2006160",
    "end": "2013550"
  },
  {
    "text": "much as possible we're trying to adhere to the OCI image format that is very",
    "start": "2013550",
    "end": "2019130"
  },
  {
    "text": "typically used in the the container ecosystem so that it could be a closer",
    "start": "2019130",
    "end": "2025280"
  },
  {
    "text": "to a plug-and-play experience for the container ecosystem users we're working",
    "start": "2025280",
    "end": "2033140"
  },
  {
    "text": "with popular orchestration frameworks to make it work with kubernetes is one of",
    "start": "2033140",
    "end": "2039770"
  },
  {
    "text": "our goal and with container the integration will be able to support with our easiest as well and and why we want",
    "start": "2039770",
    "end": "2049280"
  },
  {
    "text": "to do this it is helping define the future as much as we have all benefited",
    "start": "2049280",
    "end": "2055879"
  },
  {
    "text": "from having a light weight and and the efficiencies with containers we also",
    "start": "2055880",
    "end": "2062840"
  },
  {
    "text": "want to bring in the security that we've come to benefit from traditional VMs so",
    "start": "2062840",
    "end": "2069080"
  },
  {
    "text": "with firecracker integration in the container ecosystem we get the benefit of both so here's a quick architecture",
    "start": "2069080",
    "end": "2079429"
  },
  {
    "start": "2076000",
    "end": "2076000"
  },
  {
    "text": "of the firecracker and container the integration or the stack so it",
    "start": "2079430",
    "end": "2087010"
  },
  {
    "text": "essentially has three components it has the snapshot er it has the runtime and",
    "start": "2087010",
    "end": "2093830"
  },
  {
    "text": "then it has the agent so the the the agent is linking the container d outside",
    "start": "2093830",
    "end": "2102160"
  },
  {
    "text": "from sorry this is the the runtime is",
    "start": "2102160",
    "end": "2107710"
  },
  {
    "text": "linking the container D outside of the micro VM then we have the snapshot er",
    "start": "2107710",
    "end": "2113180"
  },
  {
    "text": "which is in process",
    "start": "2113180",
    "end": "2116800"
  },
  {
    "text": "component and then we have the micro VM which has a built in agent that is able",
    "start": "2120510",
    "end": "2126550"
  },
  {
    "text": "to invoke the run C and execute the containers within the micro VM that will",
    "start": "2126550",
    "end": "2135160"
  },
  {
    "text": "kind of briefly talk into the community engagement so firecracker as an open",
    "start": "2135160",
    "end": "2143950"
  },
  {
    "start": "2141000",
    "end": "2141000"
  },
  {
    "text": "source project so last year we announced the Firecracker open-source project at",
    "start": "2143950",
    "end": "2150520"
  },
  {
    "text": "reinvent so internally we decided to open source it around late October",
    "start": "2150520",
    "end": "2156250"
  },
  {
    "text": "so between late October and November when we announced we had very little",
    "start": "2156250",
    "end": "2161380"
  },
  {
    "text": "runway to actually get the code all ready for open source get the documentation put together we were super",
    "start": "2161380",
    "end": "2167920"
  },
  {
    "text": "excited about open sourcing the project the initiative so since we open sourced",
    "start": "2167920",
    "end": "2173350"
  },
  {
    "text": "it the responses have been overwhelmingly encouraging so we've got",
    "start": "2173350",
    "end": "2179260"
  },
  {
    "text": "a lot of feedback from the community members both from how to run firecracker",
    "start": "2179260",
    "end": "2184450"
  },
  {
    "text": "not only on AWS but also in other cloud environments we've got a ton of inputs",
    "start": "2184450",
    "end": "2190540"
  },
  {
    "text": "on how to improve our documentation our governance process we've also had a lot",
    "start": "2190540",
    "end": "2196330"
  },
  {
    "text": "of bug fixes and reports several feature",
    "start": "2196330",
    "end": "2201610"
  },
  {
    "text": "requests that have come in all of which are tracked on our github repo so as you",
    "start": "2201610",
    "end": "2207700"
  },
  {
    "text": "can see like about 27% of our pull requests are from community members",
    "start": "2207700",
    "end": "2215700"
  },
  {
    "text": "based on customers interest we've presented 12 different industry",
    "start": "2215790",
    "end": "2221200"
  },
  {
    "text": "conferences not only by AWS employees but we've also had presentations",
    "start": "2221200",
    "end": "2226780"
  },
  {
    "text": "provided by the open source community members as well",
    "start": "2226780",
    "end": "2232200"
  },
  {
    "text": "so a nice thing that has evolved from the Firecracker Open Source Initiative is the the rust vmm project so the rust",
    "start": "2232209",
    "end": "2241029"
  },
  {
    "text": "vmm is a it's an initiative that kind of organically grew based on building",
    "start": "2241029",
    "end": "2247890"
  },
  {
    "text": "virtual machine vmm blocks for different functionalities and and this was an",
    "start": "2247890",
    "end": "2255489"
  },
  {
    "text": "initiative that came together through the collaboration from multiple",
    "start": "2255489",
    "end": "2261219"
  },
  {
    "text": "participants from Google from Ally cloud from cloud Forge Intel who are all",
    "start": "2261219",
    "end": "2267369"
  },
  {
    "text": "working towards the same ideology to build modular vmm functionalities and",
    "start": "2267369",
    "end": "2276160"
  },
  {
    "text": "then they all came together to build the rust VMM project it has had very good",
    "start": "2276160",
    "end": "2282759"
  },
  {
    "text": "engagement from all these customers or community members and we have currently",
    "start": "2282759",
    "end": "2288789"
  },
  {
    "text": "three crates already available in the rust vmm kit github repo and more are in",
    "start": "2288789",
    "end": "2295119"
  },
  {
    "text": "the in the works to put in there so interestingly when we started working on",
    "start": "2295119",
    "end": "2301779"
  },
  {
    "text": "the rust vmm initiative Red Hat also announced that they're going in they're",
    "start": "2301779",
    "end": "2308529"
  },
  {
    "text": "thinking about the kimu vmm to use a modular fashion as well so in in in",
    "start": "2308529",
    "end": "2319239"
  },
  {
    "text": "using rust language so it's kind of interesting to see how the the rust VM",
    "start": "2319239",
    "end": "2325449"
  },
  {
    "text": "project has kind of started to take shape and and the industry is also kind of looking in the same space",
    "start": "2325449",
    "end": "2332969"
  },
  {
    "text": "so we'll also look into the integration of firecracker with other orchestration",
    "start": "2334310",
    "end": "2341670"
  },
  {
    "text": "providers so one of the key partners that we've been working with is the Kara",
    "start": "2341670",
    "end": "2347340"
  },
  {
    "text": "containers and we'll talk about Kara containers in the next slide a bit more depth we've also had integration with",
    "start": "2347340",
    "end": "2355080"
  },
  {
    "text": "unique a so unique a is a orchestration platform for lightweight VMs it provides",
    "start": "2355080",
    "end": "2362370"
  },
  {
    "text": "tools for compilation and management of applications turns it into you know",
    "start": "2362370",
    "end": "2367830"
  },
  {
    "text": "kernels that can run as bootable disk images in micro VMS or the traditional",
    "start": "2367830",
    "end": "2375930"
  },
  {
    "text": "lightweight VMS as well so unike brands and managers you know kernels and micro",
    "start": "2375930",
    "end": "2381570"
  },
  {
    "text": "VMs on a variety of cloud providers and also on local machine so earlier in",
    "start": "2381570",
    "end": "2388650"
  },
  {
    "text": "january unike integrated with fire cracker then we have OS p OS v so sv is",
    "start": "2388650",
    "end": "2399050"
  },
  {
    "text": "is a virtual modular virtual machine",
    "start": "2399050",
    "end": "2409890"
  },
  {
    "text": "that that that enables to run unmodified Linux applications in the cloud as well",
    "start": "2409890",
    "end": "2416400"
  },
  {
    "text": "so they came up with the Python script to launch firecracker micro VMs that is",
    "start": "2416400",
    "end": "2422790"
  },
  {
    "text": "available there's a blog on OS v how to use it as well so they've been able to",
    "start": "2422790",
    "end": "2429500"
  },
  {
    "text": "launch firecracker micro VMs under 10 milliseconds it's like five milliseconds",
    "start": "2429500",
    "end": "2436710"
  },
  {
    "text": "for their own device modules and then another five milliseconds to actually launch firecracker so it's pretty",
    "start": "2436710",
    "end": "2444330"
  },
  {
    "text": "interesting there so let's talk about the fact firecracker",
    "start": "2444330",
    "end": "2451480"
  },
  {
    "start": "2447000",
    "end": "2447000"
  },
  {
    "text": "and cata integration so the objective of cata containers was to build lightweight",
    "start": "2451480",
    "end": "2457420"
  },
  {
    "text": "virtual machines that seamlessly plugs into containers but it it it was going",
    "start": "2457420",
    "end": "2466000"
  },
  {
    "text": "down the path of using traditional kiemce you based hypervisors that is a",
    "start": "2466000",
    "end": "2472950"
  },
  {
    "text": "integration that it had available last year however it was intentionally set or",
    "start": "2472950",
    "end": "2479530"
  },
  {
    "text": "one of the design principles for color containers is to be hypervisor agnostic or to be able to embrace any or many",
    "start": "2479530",
    "end": "2487230"
  },
  {
    "text": "hypervisors that it can support so integrating with firecracker was something that was very interesting for",
    "start": "2487230",
    "end": "2493839"
  },
  {
    "text": "color containers right from the beginning so so when we announced the open source open sourcing fact rocker",
    "start": "2493839",
    "end": "2500079"
  },
  {
    "text": "last year they partnered with us and been working about integrating firecracker with Kara containers so",
    "start": "2500079",
    "end": "2507820"
  },
  {
    "text": "here's a view of what the color container integration looks like so it",
    "start": "2507820",
    "end": "2513010"
  },
  {
    "text": "can utilize both Runcie on this side kada",
    "start": "2513010",
    "end": "2518980"
  },
  {
    "text": "width firecracker or Kara with Kim you all within the same kubernetes for each",
    "start": "2518980",
    "end": "2527140"
  },
  {
    "text": "workload for in each containers so to achieve this configuration the cluster",
    "start": "2527140",
    "end": "2532270"
  },
  {
    "text": "must be configured to use either the cRIO or container D and it must use the",
    "start": "2532270",
    "end": "2540130"
  },
  {
    "text": "runtime plus name tag so you can see this is a sample yamo snippet on how to",
    "start": "2540130",
    "end": "2547900"
  },
  {
    "text": "define the runtime class name tag on what type of hypervisor",
    "start": "2547900",
    "end": "2552940"
  },
  {
    "text": "your container wants to run and the interesting part is within the container each workload can use different types of",
    "start": "2552940",
    "end": "2559930"
  },
  {
    "text": "the hypervisor as well so if you want to change from Kara FC to using kada key mu",
    "start": "2559930",
    "end": "2567099"
  },
  {
    "text": "you just change the runtime class name from Kara - FC to Kara - Kim you",
    "start": "2567099",
    "end": "2575880"
  },
  {
    "text": "so we ran into some technical difficulties so as backup I had a little",
    "start": "2575890",
    "end": "2582500"
  },
  {
    "text": "video done together so here's like the video of how we launched like a group of",
    "start": "2582500",
    "end": "2592580"
  },
  {
    "text": "micro VMs that was launched to do benchmarking for networking you can see",
    "start": "2592580",
    "end": "2598640"
  },
  {
    "text": "each of these little blocks are micro VMs that get launched in groups and this",
    "start": "2598640",
    "end": "2605360"
  },
  {
    "text": "is done - we did this to measure the boot time of like a group of micro VMs",
    "start": "2605360",
    "end": "2610850"
  },
  {
    "text": "running on a I three metal instance in the beginning you can see that little trail of blocks is essentially the",
    "start": "2610850",
    "end": "2618320"
  },
  {
    "text": "amount of network resource it is using while while launching but after after",
    "start": "2618320",
    "end": "2624050"
  },
  {
    "text": "some time those tails will go away so at a given time in each groups we launched",
    "start": "2624050",
    "end": "2631130"
  },
  {
    "text": "about 150 micro VMs on each of them to",
    "start": "2631130",
    "end": "2636850"
  },
  {
    "text": "see what is the launch time for each of them so here's a graph that shows the",
    "start": "2636850",
    "end": "2643460"
  },
  {
    "text": "metric all of these little sprinkle dots are micro VMs and the average time or",
    "start": "2643460",
    "end": "2648800"
  },
  {
    "text": "the time it took to boot up so you can see that the the mean average is about",
    "start": "2648800",
    "end": "2655310"
  },
  {
    "text": "152 milliseconds that we were able to measure on an i3 instance we should be",
    "start": "2655310",
    "end": "2660380"
  },
  {
    "text": "able to get better performance with m5 metal instances as well and then the",
    "start": "2660380",
    "end": "2667280"
  },
  {
    "text": "minimum the shortest time to launch micro VM was one hundred and twenty three milliseconds the highest it took",
    "start": "2667280",
    "end": "2673520"
  },
  {
    "text": "was like 290 nineteen milliseconds so it's pretty fast and and the fact that",
    "start": "2673520",
    "end": "2679850"
  },
  {
    "text": "you're able to launch about 4,000 micro VMs on a single hardware really speaks",
    "start": "2679850",
    "end": "2686030"
  },
  {
    "text": "for how well you can utilize the resources so who should use firecracker directly",
    "start": "2686030",
    "end": "2693700"
  },
  {
    "start": "2690000",
    "end": "2690000"
  },
  {
    "text": "so teams trying to build compute services so obviously with in AWS we",
    "start": "2693700",
    "end": "2699010"
  },
  {
    "text": "have service teams like lambda and Fargate who are using firecracker we're also working with other internal",
    "start": "2699010",
    "end": "2705490"
  },
  {
    "text": "services that need the same lightweight environment like containers with the",
    "start": "2705490",
    "end": "2711609"
  },
  {
    "text": "isolation barriers like a traditional VM so there's an opportunity for them to use something like fire cracker both the",
    "start": "2711609",
    "end": "2720070"
  },
  {
    "text": "teams kind of work together so we treat our internal services also like customers we also are working with the",
    "start": "2720070",
    "end": "2728440"
  },
  {
    "text": "traditional container stack providers to see opportunities to integrate fire cracker with them so they're also using",
    "start": "2728440",
    "end": "2734740"
  },
  {
    "text": "fire cracker like color containers and then we also have developers who want to",
    "start": "2734740",
    "end": "2741490"
  },
  {
    "text": "contribute to the fire cracker initiative or any of the initiatives that are tied with fire cracker like the",
    "start": "2741490",
    "end": "2747970"
  },
  {
    "text": "rust VM vmm should also be using fire cracker how do you get started so",
    "start": "2747970",
    "end": "2756190"
  },
  {
    "start": "2753000",
    "end": "2753000"
  },
  {
    "text": "there's a bunch of information about how to set up and launch a firecracker and",
    "start": "2756190",
    "end": "2761500"
  },
  {
    "text": "and see some of these demos for yourselves you can run fire cracker on AWS bare metal instances you can just",
    "start": "2761500",
    "end": "2767680"
  },
  {
    "text": "grab these metal instances from the ec2 console or through the API we also have",
    "start": "2767680",
    "end": "2773910"
  },
  {
    "text": "tested and and have instructions on how to run fire cracker on other cloud",
    "start": "2773910",
    "end": "2781030"
  },
  {
    "text": "providers on bare metal instances we we can also run fire cracker on GC Pease",
    "start": "2781030",
    "end": "2787869"
  },
  {
    "text": "nested words there are instructions for that as well and on Azure and then you",
    "start": "2787869",
    "end": "2794410"
  },
  {
    "text": "can also run firecracker locally on your machines as well",
    "start": "2794410",
    "end": "2800069"
  },
  {
    "text": "then there's this nice little fire cuddle CLI which is just a binary that",
    "start": "2801239",
    "end": "2807809"
  },
  {
    "text": "you can download to use to create firecracker VMs this is available in the",
    "start": "2807809",
    "end": "2813239"
  },
  {
    "text": "github repo as well so you can check it out yeah and then this is our github",
    "start": "2813239",
    "end": "2820650"
  },
  {
    "start": "2818000",
    "end": "2818000"
  },
  {
    "text": "repo anything you want to learn about firecracker all the information that I",
    "start": "2820650",
    "end": "2827130"
  },
  {
    "text": "shared today all that is documented in our firecracker github repo it is you",
    "start": "2827130",
    "end": "2835380"
  },
  {
    "text": "know it's it is a live open source project so all our development for or",
    "start": "2835380",
    "end": "2840749"
  },
  {
    "text": "firecracker is happening in the open all the issues on features that we are",
    "start": "2840749",
    "end": "2846269"
  },
  {
    "text": "developing are tracked as issues we regularly groom those issues and and we",
    "start": "2846269",
    "end": "2851519"
  },
  {
    "text": "have a road map that is published on a frequent basis so if you have any",
    "start": "2851519",
    "end": "2856710"
  },
  {
    "text": "interests comments features that you want to see with firecracker feel free",
    "start": "2856710",
    "end": "2862170"
  },
  {
    "text": "to reach out there create an issue and we'll groom that in our next sprint we",
    "start": "2862170",
    "end": "2869099"
  },
  {
    "text": "also have a slack room where all of our developer engineers are in the slack",
    "start": "2869099",
    "end": "2876089"
  },
  {
    "text": "room and it's it's it's very chatty very responsive a bunch of our firecracker",
    "start": "2876089",
    "end": "2883079"
  },
  {
    "text": "development team is based out of Bucharest Romania so and then we have few members here in Seattle as well so",
    "start": "2883079",
    "end": "2889650"
  },
  {
    "text": "between Europe time and US time you pretty much have a 24 hour response that",
    "start": "2889650",
    "end": "2896549"
  },
  {
    "text": "people always respond back on slack so I always have my phone going on bus so so",
    "start": "2896549",
    "end": "2904589"
  },
  {
    "text": "that concludes our presentation hopefully you've had the opportunity to learn something about firecracker and",
    "start": "2904589",
    "end": "2910559"
  },
  {
    "text": "how we're able to achieve the security and speed and performance of VMs and",
    "start": "2910559",
    "end": "2917579"
  },
  {
    "text": "containers in in a single environment if you have any questions I'll hang out",
    "start": "2917579",
    "end": "2923160"
  },
  {
    "text": "here after the presentation I think we have a next presentation at 9 o'clock so",
    "start": "2923160",
    "end": "2928940"
  },
  {
    "text": "I will wrap up thank you for coming today morning yeah and don't forget the",
    "start": "2928940",
    "end": "2936109"
  },
  {
    "text": "sir way thank you",
    "start": "2936109",
    "end": "2941200"
  }
]