[
  {
    "text": "okay folks so welcome um to this introduction a session about opsworks uh this is reza",
    "start": "3360",
    "end": "9280"
  },
  {
    "text": "i'm jonathan we're both from the officeworks team and we want to give you",
    "start": "9280",
    "end": "15759"
  },
  {
    "text": "an introduction to the underlying concepts of opsworks into how to customize it and how to um what the differences are",
    "start": "15759",
    "end": "23920"
  },
  {
    "text": "between chef server and other technologies people use before i go into details how many people",
    "start": "23920",
    "end": "29439"
  },
  {
    "text": "have used opsworks okay and of the others like do you have a",
    "start": "29439",
    "end": "35120"
  },
  {
    "text": "rough understanding how it looks like who has an understanding how roughly opsworks works what it should be great so that i don't have to do too",
    "start": "35120",
    "end": "41120"
  },
  {
    "text": "much of an introduction um so what we want to look into is",
    "start": "41120",
    "end": "46719"
  },
  {
    "text": "i want to i want to explain to you the opsworks lifecycle system which is a very important",
    "start": "46719",
    "end": "51760"
  },
  {
    "text": "part of opsworks um and to understand that gives you really the power to make use of opsworks",
    "start": "51760",
    "end": "58719"
  },
  {
    "text": "then razer is going to show you how you can customize opsworks how you can run for",
    "start": "58719",
    "end": "64158"
  },
  {
    "text": "example mongodb as a custom layout on opsworks with a with a setup with java and and elbs and how to to leverage",
    "start": "64159",
    "end": "70560"
  },
  {
    "text": "technologies that edwards doesn't support out of the box but you can by bringing your own cookbooks and chef recipes",
    "start": "70560",
    "end": "77040"
  },
  {
    "text": "you can basically anything that is scriptable you can make run on ops works and then we're going to close with um",
    "start": "77040",
    "end": "83119"
  },
  {
    "text": "it's a kind of comparison between chef server and offspring so this is a question we get a lot",
    "start": "83119",
    "end": "88240"
  },
  {
    "text": "what is the difference is how do i migrate like what do i have to take care of if i have chef server news and i want to use",
    "start": "88240",
    "end": "94240"
  },
  {
    "text": "ops works and we want to like make clear what the differences are and where it's the same and where",
    "start": "94240",
    "end": "99600"
  },
  {
    "text": "it differs a little bit so let's dug into the life cycle system um like i said",
    "start": "99600",
    "end": "106640"
  },
  {
    "text": "that's very important to understand that because that gives you the possibility to really uh exploit all the features that opsworks gives you the",
    "start": "106640",
    "end": "113360"
  },
  {
    "text": "the heart of opsworks is uh our agent so in order for us to be able to",
    "start": "113360",
    "end": "119119"
  },
  {
    "text": "execute commands on your behalf like to do deployments to uh install software on your instance",
    "start": "119119",
    "end": "125520"
  },
  {
    "text": "we have to be present on it and that's a big difference to other services that don't have anything running on your",
    "start": "125520",
    "end": "132480"
  },
  {
    "text": "instance so opsworks has an agent running that communicates back to the opsworks backend of an encrypted",
    "start": "132480",
    "end": "138720"
  },
  {
    "text": "and secure connection and executes commands that um that you tell it to do like um",
    "start": "138720",
    "end": "144480"
  },
  {
    "text": "bootstrap my machine or do a deployment and so on um that execution of commands is just a",
    "start": "144480",
    "end": "150959"
  },
  {
    "text": "chef solo run so if you're familiar with chef we just use the openshift solo version there you can choose if you want to use",
    "start": "150959",
    "end": "157519"
  },
  {
    "text": "chef 09 or chef 11 and we will keep up with future chef releases so that",
    "start": "157519",
    "end": "162959"
  },
  {
    "text": "we will provide you like a chef solo environment what are those those events that that",
    "start": "162959",
    "end": "169440"
  },
  {
    "text": "opsworks provides we offer five life cycle events that you can hook into",
    "start": "169440",
    "end": "174800"
  },
  {
    "text": "and extend with your own recipes the first one is setup like the initialization of the",
    "start": "174800",
    "end": "180159"
  },
  {
    "text": "instance then we have a configure which is like an event that you can respond with your recipes",
    "start": "180159",
    "end": "185760"
  },
  {
    "text": "to changes in the system then there is a deployment which means you are pushing actively new versions of",
    "start": "185760",
    "end": "191599"
  },
  {
    "text": "your app to the machines we have the undeploy which means you want to remove an application from running machines and then there is the",
    "start": "191599",
    "end": "197440"
  },
  {
    "text": "shutdown which offers the possibility for you to do a clean shutdown of machines like before we terminate it on ec2",
    "start": "197440",
    "end": "204000"
  },
  {
    "text": "you can um like clear resources flush anything from memory to disk and so on so we're",
    "start": "204000",
    "end": "209200"
  },
  {
    "text": "going to look into those in depth in a moment before we do that i want to",
    "start": "209200",
    "end": "214239"
  },
  {
    "text": "briefly like like explain to you what are the different stages of an instance like what kind of",
    "start": "214239",
    "end": "219280"
  },
  {
    "text": "states can it have and when do we fire those events so if you if you have a new instance we",
    "start": "219280",
    "end": "225680"
  },
  {
    "text": "start fresh we start like what in obstacles we call the new state um it doesn't even exist on ec2 yet it's",
    "start": "225680",
    "end": "231200"
  },
  {
    "text": "just you you told us i want to have an instance it should be of that type it should exist in that a z",
    "start": "231200",
    "end": "236879"
  },
  {
    "text": "it should be that operating system it um i want to use this specification for it",
    "start": "236879",
    "end": "242319"
  },
  {
    "text": "at some point you're telling us we should start it um which means the instance will run through the states of requested pending",
    "start": "242319",
    "end": "248879"
  },
  {
    "text": "booting at that point the booting state means it's fully running on ec2",
    "start": "248879",
    "end": "254480"
  },
  {
    "text": "so it's it's fully active now and the next stage will be the agent part installs itself and and calls back home",
    "start": "254480",
    "end": "260400"
  },
  {
    "text": "basically and requests this initialization so it should now become your rails application server your java app",
    "start": "260400",
    "end": "266400"
  },
  {
    "text": "server whatever you you told us it to be so what happens now is the the setup event",
    "start": "266400",
    "end": "271680"
  },
  {
    "text": "fires the machine will will run it and when it's ready with with uh with that setup and it",
    "start": "271680",
    "end": "277680"
  },
  {
    "text": "successfully completed the setup we will consider this instance online um",
    "start": "277680",
    "end": "283360"
  },
  {
    "text": "and it will be available for other for other instances to use and the the very important thing is and why we call that as continuous configuration",
    "start": "283360",
    "end": "289919"
  },
  {
    "text": "or continuous lifecycle system is that at that point in time we fire a configure event to all machines in your",
    "start": "289919",
    "end": "295199"
  },
  {
    "text": "stack so other instances can can respond to this change and now know",
    "start": "295199",
    "end": "300320"
  },
  {
    "text": "oh there is a new app server available i as a load bouncer can now serve traffic to it or if your new app",
    "start": "300320",
    "end": "307440"
  },
  {
    "text": "server turns out you can your database server can now add an acl entry in order for this instance to",
    "start": "307440",
    "end": "312639"
  },
  {
    "text": "allow to connect to it um so that that configure event is is like the stage where you would",
    "start": "312639",
    "end": "318880"
  },
  {
    "text": "make sure that your view of the stack is still the correct one and you can listen to notes coming and you can the same",
    "start": "318880",
    "end": "324400"
  },
  {
    "text": "thing you can do you can do a listen when notes are leaving the system",
    "start": "324400",
    "end": "330240"
  },
  {
    "text": "probably the majority of the time the instance will be in that online state and what you can do now is continuously deploy to it so you can",
    "start": "330240",
    "end": "335600"
  },
  {
    "text": "like deploy a new version of your app as often as you like and this is when we will file that deployment event",
    "start": "335600",
    "end": "342400"
  },
  {
    "text": "at some point you probably want to shut it down or replace the instance by a different one so you you start terminating that",
    "start": "342400",
    "end": "349120"
  },
  {
    "text": "machine this will fire the configure event again to every other nodes in the stack so",
    "start": "349120",
    "end": "354240"
  },
  {
    "text": "they know this server is no longer a part of the stack a load balancer can remove it from the",
    "start": "354240",
    "end": "359680"
  },
  {
    "text": "configuration the database server in our example can now remove the acl entry so that that ip is no longer allowed to",
    "start": "359680",
    "end": "365280"
  },
  {
    "text": "connect if you use kind of distributed databases you could now say okay we shouldn't",
    "start": "365280",
    "end": "371199"
  },
  {
    "text": "uh we should now try to chat with that machine for example um and also like i mentioned in the",
    "start": "371199",
    "end": "377759"
  },
  {
    "text": "beginning that we would not shut down the instance immediately so your instance now has some time to do a clean shutdown before we actually shut",
    "start": "377759",
    "end": "384160"
  },
  {
    "text": "it down on ec2 once we shut it down on ec2 you're back into that new stopped state",
    "start": "384160",
    "end": "389840"
  },
  {
    "text": "where if you had an instant store instance it's actually gone on ec2 just the model exists with us if you",
    "start": "389840",
    "end": "395360"
  },
  {
    "text": "have an ebs based or ebs backed instance it's of course still exists on ec2 and you can restart",
    "start": "395360",
    "end": "400960"
  },
  {
    "text": "and it will be the same instance on ec2 and to understand that",
    "start": "400960",
    "end": "406319"
  },
  {
    "text": "kind of life cycle is is is pretty important in order to know when on which lifecycle event should i",
    "start": "406319",
    "end": "411599"
  },
  {
    "text": "like run which recipes and it allows you to do like a kind of a dynamic configuration management so whenever",
    "start": "411599",
    "end": "417120"
  },
  {
    "text": "something changes in your in your state like a new server is showing up that event bubbles through to all the",
    "start": "417120",
    "end": "422319"
  },
  {
    "text": "others and they can respond to it and adopt the configuration dynamically let's briefly revisit the individual",
    "start": "422319",
    "end": "429440"
  },
  {
    "text": "events so that we we know when to use them and what they are exactly",
    "start": "429440",
    "end": "435039"
  },
  {
    "text": "so first we have the setup event this is this is sent whenever an instance first boots and you have you can use that in order to pre-configure",
    "start": "435440",
    "end": "442080"
  },
  {
    "text": "the machine run any bootstrapping um usually you install your software that you want to",
    "start": "442080",
    "end": "447199"
  },
  {
    "text": "permanently run in that machine at that stage so let's say you you want to have a java jboss",
    "start": "447199",
    "end": "453599"
  },
  {
    "text": "application server this is the time when you would run your recipes to install the jdk to install",
    "start": "453599",
    "end": "458800"
  },
  {
    "text": "jbus to make sure everything that you need on the machine is present that event only fires once in the",
    "start": "458800",
    "end": "465120"
  },
  {
    "text": "lifetime of a machine so usually you do that for that first initialization one important thing to to hint out is",
    "start": "465120",
    "end": "471759"
  },
  {
    "text": "that this initial setup includes the deploy event the reason is that probably when you",
    "start": "471759",
    "end": "477039"
  },
  {
    "text": "boot a new app server you want it to be ready right and ready means it should be deployed should have all my software on",
    "start": "477039",
    "end": "482400"
  },
  {
    "text": "it and that's why we include the deploy event um which means that if you look at the actual",
    "start": "482400",
    "end": "487759"
  },
  {
    "text": "recipe order what is going to be executed it looks like this we will first fire",
    "start": "487759",
    "end": "493520"
  },
  {
    "text": "our built-in setup recipes we'll then run your setup recipes that you told us to run",
    "start": "493520",
    "end": "499520"
  },
  {
    "text": "we'll then run our own deployment recipes and then we'll run yours",
    "start": "499520",
    "end": "505680"
  },
  {
    "text": "that is something that that usually it's unfortunately we don't make a um we",
    "start": "505680",
    "end": "510960"
  },
  {
    "text": "don't explain this good enough in in our ui we're going to to improve that in order to make it more clear",
    "start": "510960",
    "end": "516399"
  },
  {
    "text": "but this allows you to to hook both into the setup state and into the deployment state if you want to do any customization we're going",
    "start": "516399",
    "end": "522880"
  },
  {
    "text": "to talk in a minute about how you do that customization the next event is the configure event",
    "start": "522880",
    "end": "528560"
  },
  {
    "text": "and um that fires whenever an instance either enters or leaves the the online state so",
    "start": "528560",
    "end": "535040"
  },
  {
    "text": "usually you would use that to respond to make sure your contract is up to date to like do i need to know how many nodes there",
    "start": "535040",
    "end": "541760"
  },
  {
    "text": "are what the ip addresses are if so i would i would do whatever it needs to change during that step",
    "start": "541760",
    "end": "548240"
  },
  {
    "text": "the the simplest example is your app server needs to know where the database server is so you would add a recipe that checks",
    "start": "548240",
    "end": "555760"
  },
  {
    "text": "that regenerates your database config file that the app server is using during a configure step for example our",
    "start": "555760",
    "end": "562800"
  },
  {
    "text": "built-in rails layer and php layer nodejs layer this is what they're doing during that step they they just",
    "start": "562800",
    "end": "568399"
  },
  {
    "text": "regenerate for rails the database yaml file for php we have a simple php library that we regenerate",
    "start": "568399",
    "end": "574560"
  },
  {
    "text": "so that all the app stores always know what is the correct ip address of my of my database server so when you like shut down your database",
    "start": "574560",
    "end": "581680"
  },
  {
    "text": "server and replace it with it with a different machine like magically the new ip shows up in that file because the web",
    "start": "581680",
    "end": "588320"
  },
  {
    "text": "the app servers regenerate the file whenever whenever a server comes and goes should the server actually not be a",
    "start": "588320",
    "end": "594560"
  },
  {
    "text": "database server nothing happens that file stays the same so like your app servers",
    "start": "594560",
    "end": "599839"
  },
  {
    "text": "don't restart themselves for example um if the file ever changes in the example for rails like apache will will",
    "start": "599839",
    "end": "606320"
  },
  {
    "text": "restart the rails app so that the change will actually be effective to your app",
    "start": "606320",
    "end": "612000"
  },
  {
    "text": "the the other thing is the deployment um that happens when you explicitly",
    "start": "612000",
    "end": "617040"
  },
  {
    "text": "deploy your app either via the ui cli or apis um also part of setup like we said um",
    "start": "617040",
    "end": "623920"
  },
  {
    "text": "but you can file that at any time you like like whenever you say oh i have new version of my app i want to now make all my notes aware of it",
    "start": "623920",
    "end": "629760"
  },
  {
    "text": "you would file the deploy event and that will tell the nodes to please redownload the app from this is the location where",
    "start": "629760",
    "end": "635920"
  },
  {
    "text": "i told you it's going to be or do whatever like your custom deployment needs to do",
    "start": "635920",
    "end": "642079"
  },
  {
    "text": "this is also the place if you if you're not happy with the built-in deployment mechanisms we provide you would use that for custom hooks",
    "start": "642079",
    "end": "647600"
  },
  {
    "text": "so for example if you use rsync for deployment that's that's fine works with us you just have to provide the own recipes to",
    "start": "647600",
    "end": "654399"
  },
  {
    "text": "do it however you would like to deploy you can do it here with your own recipes",
    "start": "654399",
    "end": "661600"
  },
  {
    "text": "the undeploy event is is probably the the least used that happens when you delete an app but",
    "start": "661600",
    "end": "667360"
  },
  {
    "text": "you still have running app servers that have it in this case you can then remove it from the app and restart your app server",
    "start": "667360",
    "end": "673440"
  },
  {
    "text": "a use sketch would be let's say you host a large number of php apps as different v hosts on the",
    "start": "673440",
    "end": "679920"
  },
  {
    "text": "same fleet of app servers and when if one of your customers terminates the service with you you want to like",
    "start": "679920",
    "end": "686560"
  },
  {
    "text": "delete their the v host from from your machines you would do that in that step for example",
    "start": "686560",
    "end": "692240"
  },
  {
    "text": "and the last one is the shutdown event that allows you to um run any script that you need in order",
    "start": "692240",
    "end": "697920"
  },
  {
    "text": "to cleanly shut on a machine before it's actually taken out and terminated on ec2 so a good example is",
    "start": "697920",
    "end": "704720"
  },
  {
    "text": "you run some in-memory database and you need to make sure it's flush to disk before you actually terminate the machine",
    "start": "704720",
    "end": "710959"
  },
  {
    "text": "you have about 45 seconds to do that action afterwards we will we'll like force",
    "start": "710959",
    "end": "716079"
  },
  {
    "text": "terminate the machine um so if you have something that um so you need to make sure that you you stay within that limit",
    "start": "716079",
    "end": "722079"
  },
  {
    "text": "um otherwise we cannot guarantee that the that the action will actually complete",
    "start": "722079",
    "end": "727440"
  },
  {
    "text": "um now that we understand okay what are the like the different life cycles where can i hook in let's look at how can you now customize",
    "start": "727440",
    "end": "734000"
  },
  {
    "text": "opsworks like if i if i'm not happy with the built-in defaults what means do i have to to um like",
    "start": "734000",
    "end": "740560"
  },
  {
    "text": "customize it and use the software that that opsworks doesn't support it out of the box",
    "start": "740560",
    "end": "745760"
  },
  {
    "text": "in general there we have like different ways to do it and they they reach from very simple but that",
    "start": "745760",
    "end": "751120"
  },
  {
    "text": "means they're you also cannot do too much to you have a lot more control but they're probably a lot more complicated",
    "start": "751120",
    "end": "756480"
  },
  {
    "text": "you have to provide a lot more code so the simplest one is you just use the built-in layers",
    "start": "756480",
    "end": "762160"
  },
  {
    "text": "which actually means no no big customization apart from what you can do in the ui um then you can like influence how we",
    "start": "762160",
    "end": "769120"
  },
  {
    "text": "render templates how we configure the machines via via chef attributes you can use that",
    "start": "769120",
    "end": "774480"
  },
  {
    "text": "in using custom json you can do that via custom cookbooks the next step would be you use your",
    "start": "774480",
    "end": "781200"
  },
  {
    "text": "overwrite complete template files which means that that you change how we render like the apache vhos",
    "start": "781200",
    "end": "787360"
  },
  {
    "text": "configuration or the mysql configuration on disk but you still don't don't have your own chef recipe you just have a template",
    "start": "787360",
    "end": "793200"
  },
  {
    "text": "file providing a chef recipe is is a very",
    "start": "793200",
    "end": "798959"
  },
  {
    "text": "um like like big step for most people because they have to write a chef recipe that's why we also chef",
    "start": "798959",
    "end": "804720"
  },
  {
    "text": "also supports something called deploy hooks um which is something that you can provide within your app without having a",
    "start": "804720",
    "end": "810560"
  },
  {
    "text": "separate repository for your chef cookbooks and we're going to look into what you can do with that and and the",
    "start": "810560",
    "end": "816800"
  },
  {
    "text": "real full-blown solution is to use all the capabilities that chef offers which means you can either",
    "start": "816800",
    "end": "822480"
  },
  {
    "text": "provide a custom cookbook or custom recipes to extend our built-in layers or you can",
    "start": "822480",
    "end": "827920"
  },
  {
    "text": "just create your fully customized own layers don't use the the the stuff that we provide",
    "start": "827920",
    "end": "834639"
  },
  {
    "text": "just start with a blank machine and say okay i wanna those are the scripts i wanna run i don't care that amazon offers a rails",
    "start": "834639",
    "end": "841920"
  },
  {
    "text": "app server i need to configure totally differently this is how i do it and we're totally happy with that it's it's",
    "start": "841920",
    "end": "847600"
  },
  {
    "text": "um the important thing to to remember from that talk in that sense is",
    "start": "847600",
    "end": "853519"
  },
  {
    "text": "that opsworks is that life cycle system that we fire the right event at the right time to the right",
    "start": "853519",
    "end": "859600"
  },
  {
    "text": "instance of part of the right layer it just happens that we wrote a couple of chef recipes for common stacks for",
    "start": "859600",
    "end": "865760"
  },
  {
    "text": "common technologies if you're not if you if you want to customize more if you're not happy with those",
    "start": "865760",
    "end": "870959"
  },
  {
    "text": "feel free to bring your own feel free to to use whatever you like um the the power of ops works is really",
    "start": "870959",
    "end": "876639"
  },
  {
    "text": "that that life cycle system the integration with ec2 the the deployment support the",
    "start": "876639",
    "end": "882320"
  },
  {
    "text": "management and monitoring support um the the existing chef recipes just get you started",
    "start": "882320",
    "end": "889920"
  },
  {
    "text": "so let's dig into each of those things like i would use it the built-in layers are probably the simplest one so we have built eight",
    "start": "889920",
    "end": "896480"
  },
  {
    "text": "built-in layers ranging from rails php node.js java",
    "start": "896480",
    "end": "901920"
  },
  {
    "text": "to mysql aj proxy memcached and ganglia all the recipes that we use are open",
    "start": "901920",
    "end": "908000"
  },
  {
    "text": "source on github so you can look at them actually in our ui we actually we also link to them if you if you're interested",
    "start": "908000",
    "end": "914000"
  },
  {
    "text": "so you can feel free to to look at them and how to influence them feel free to submit pull requests if you",
    "start": "914000",
    "end": "919760"
  },
  {
    "text": "think they could be improved um and they offer you kind of a convenient way to get started",
    "start": "919760",
    "end": "925680"
  },
  {
    "text": "like we try to make them pretty general but but usually at some point if you especially the more complex your app gets at some",
    "start": "925680",
    "end": "932959"
  },
  {
    "text": "point you you're maybe not happy you want to influence it and you want to customize it the simplest way how you can do it is by",
    "start": "932959",
    "end": "939839"
  },
  {
    "text": "using attributes and before we look at attributes we need to revisit how how a chef template looks like",
    "start": "939839",
    "end": "947440"
  },
  {
    "text": "this is a typical chef template in this case a part of the template we use to render the apache configuration",
    "start": "947440",
    "end": "953279"
  },
  {
    "text": "so a template that is well written usually doesn't hard code values it um",
    "start": "953279",
    "end": "959519"
  },
  {
    "text": "it refers to them what is called in chef an attribute you can think of it as a variable basically so our example is the timeout",
    "start": "959519",
    "end": "968160"
  },
  {
    "text": "so here we define the timeout not just the hardcoded value but we say the timeout should be whatever is in",
    "start": "968160",
    "end": "973360"
  },
  {
    "text": "node apache timeout and by doing this you you're not you're not",
    "start": "973360",
    "end": "979440"
  },
  {
    "text": "tying your templates to specific configurations we make can make this valid dynamic you can override it how we're going to",
    "start": "979440",
    "end": "985279"
  },
  {
    "text": "see in a second and hopefully most of our templates are configurable this way because if",
    "start": "985279",
    "end": "992079"
  },
  {
    "text": "they are what you can now can do is you can change this value if you're not happy with our default",
    "start": "992079",
    "end": "998160"
  },
  {
    "text": "our default is written in our in the chef attributes file so in this case in the apache 2 cookbook there is an",
    "start": "998160",
    "end": "1004560"
  },
  {
    "text": "attribute file and somewhere it says default apache timeout equals 120 seconds",
    "start": "1004560",
    "end": "1011040"
  },
  {
    "text": "if you're not happy with that value and you want to change it because you want to so you want to have lower values or",
    "start": "1011040",
    "end": "1016720"
  },
  {
    "text": "higher values what you can do is utilize custom json so in opsworks",
    "start": "1016720",
    "end": "1021759"
  },
  {
    "text": "you can add arbitrary json to each stack and this this json will actually end up",
    "start": "1021759",
    "end": "1028480"
  },
  {
    "text": "in the chef run available as is a node attribute so in this case i'm just setting um like",
    "start": "1028480",
    "end": "1033600"
  },
  {
    "text": "underneath that that box you see the custom json json that i'm setting so i'm setting apache2",
    "start": "1033600",
    "end": "1039600"
  },
  {
    "text": "and then timeout to 60. so what happens when chef actually runs is that lookup value so node apache timeout",
    "start": "1039600",
    "end": "1046079"
  },
  {
    "text": "will be 60 and not 120 which means when chef renders the template the result will be",
    "start": "1046079",
    "end": "1052880"
  },
  {
    "text": "at a time out of 60 instead of instead of a default of 120.",
    "start": "1052880",
    "end": "1058400"
  },
  {
    "text": "by doing this using custom json you don't have to provide a custom chef recipe you don't have to provide your",
    "start": "1058400",
    "end": "1063600"
  },
  {
    "text": "own repository of chef cookbooks you just have to enter a json field in our ui doing that for maybe one or",
    "start": "1063600",
    "end": "1071840"
  },
  {
    "text": "two values is okay but probably at some point you realize maintaining a large json structure in a",
    "start": "1071840",
    "end": "1077039"
  },
  {
    "text": "text field or via the api is not the best way to do it and probably you want to version control",
    "start": "1077039",
    "end": "1082559"
  },
  {
    "text": "that you want to you want to have like like more control about that and the next stage how you could do it",
    "start": "1082559",
    "end": "1089760"
  },
  {
    "text": "which we recommend especially if you do more than one or two values is to use just a custom attribute file where you",
    "start": "1089760",
    "end": "1095200"
  },
  {
    "text": "overwrite the value in order to be able to do that you need to provide us with a repository",
    "start": "1095200",
    "end": "1100480"
  },
  {
    "text": "of your cookbooks so you need to have either like accessible by git svn http",
    "start": "1100480",
    "end": "1106960"
  },
  {
    "text": "or some zip file on s3 that your instances can reach that have your own chef recipes and",
    "start": "1106960",
    "end": "1112640"
  },
  {
    "text": "cookbooks in this case you need to have some attribute file that defines or overrides this value in this case you",
    "start": "1112640",
    "end": "1119520"
  },
  {
    "text": "use set patchy timer to 60 the result will be the same so when you render the template it will",
    "start": "1119520",
    "end": "1126400"
  },
  {
    "text": "have the value 60 in it instead of the value of um 120. um this way you can again like like",
    "start": "1126400",
    "end": "1133520"
  },
  {
    "text": "change the templates and the values that we provide um probably at some point you you're not",
    "start": "1133520",
    "end": "1140640"
  },
  {
    "text": "happy with like or this way of customizing is limited to our templates are limited to the to the",
    "start": "1140640",
    "end": "1146240"
  },
  {
    "text": "places where we provide you with a with an attribute lookup value maybe at some point you say okay i want",
    "start": "1146240",
    "end": "1152640"
  },
  {
    "text": "to have the apache config file looking totally separate totally different or maybe this value is not configurable um or i",
    "start": "1152640",
    "end": "1158720"
  },
  {
    "text": "need to change so many things that it would be just unmanageable doing that with with attributes so the the the",
    "start": "1158720",
    "end": "1164240"
  },
  {
    "text": "next step that you could do is overwrite the complete template so in this case you just provide us in",
    "start": "1164240",
    "end": "1170000"
  },
  {
    "text": "your own custom cookbooks um with the the same file under the same location",
    "start": "1170000",
    "end": "1175440"
  },
  {
    "text": "as the template you want to override so in this case you would have in your custom recipe cookbooks you would have apache 2 templates",
    "start": "1175440",
    "end": "1182400"
  },
  {
    "text": "there's actually a default missing i'm just just see and then apache 2 conf erb which is the",
    "start": "1182400",
    "end": "1188640"
  },
  {
    "text": "same path as the original template that we used to render this this file and in this case the content",
    "start": "1188640",
    "end": "1193679"
  },
  {
    "text": "can be arbitrary whatever you put in that content will end up on on the machine when chef renders the file you can of",
    "start": "1193679",
    "end": "1199840"
  },
  {
    "text": "course reference attributes in there you can have hard-coded values",
    "start": "1199840",
    "end": "1205280"
  },
  {
    "text": "whatever you have in it chef will take that and render it instead of hours",
    "start": "1205280",
    "end": "1210480"
  },
  {
    "text": "that that gives you the possibility to to really influence templates but you're still very much",
    "start": "1210559",
    "end": "1215840"
  },
  {
    "text": "tied to our recipes and you're still very much tied to how we do things if we don't have a template for something",
    "start": "1215840",
    "end": "1221840"
  },
  {
    "text": "you can't do it unfortunately with chef you cannot override recipes but what you can do you can provide us",
    "start": "1221840",
    "end": "1228080"
  },
  {
    "text": "with additional recipes so the next step is you",
    "start": "1228080",
    "end": "1233840"
  },
  {
    "text": "you do that either by providing a full-blown recipe or if if you only want to do something",
    "start": "1233840",
    "end": "1241200"
  },
  {
    "text": "within the deployment of an app you can actually also use deploy hooks deploy hooks are provided by by the chef",
    "start": "1241200",
    "end": "1247679"
  },
  {
    "text": "deploy resource that we use by default and there are four available um they're",
    "start": "1247679",
    "end": "1253679"
  },
  {
    "text": "called before migrate before simulink before restart and after restart and you can you can",
    "start": "1253679",
    "end": "1260559"
  },
  {
    "text": "you can basically do again anything in them and they will be run within the context of deployment of one application the important",
    "start": "1260559",
    "end": "1265840"
  },
  {
    "text": "difference to to full-blown recipes is that they will be run within uh the actual deployment process of your",
    "start": "1265840",
    "end": "1272080"
  },
  {
    "text": "app so you can like influence before we restart apache for you you can do something or before",
    "start": "1272080",
    "end": "1278480"
  },
  {
    "text": "if you use rails and do database migrations before the migrations are run you can do something in this case the only thing you need to",
    "start": "1278480",
    "end": "1284320"
  },
  {
    "text": "do is provide a directory called deploy in your application and have those files and it's one of",
    "start": "1284320",
    "end": "1290240"
  },
  {
    "text": "them or all of them depending on what you need um the file itself uses the capistrano syntax it's um it's like",
    "start": "1290240",
    "end": "1296240"
  },
  {
    "text": "uh influenced by it which um is a used to be a very popular um deployment",
    "start": "1296240",
    "end": "1301840"
  },
  {
    "text": "tool from from the ruby world the syntax looks like this so this is an example how you would do for example for",
    "start": "1301840",
    "end": "1308159"
  },
  {
    "text": "rails um asset pre-compile compilation of your css and javascript",
    "start": "1308159",
    "end": "1314720"
  },
  {
    "text": "um so so if you use like rates three or four what you usually do is you have um",
    "start": "1314720",
    "end": "1321120"
  },
  {
    "text": "your your javascript in coffeescript and you need to compile it um before you actually can can use it in",
    "start": "1321120",
    "end": "1326640"
  },
  {
    "text": "production so one way to do it you would compile it before you actually deploy it to us but that means you have",
    "start": "1326640",
    "end": "1332240"
  },
  {
    "text": "to check it out into source control or you have to put it in the zip file you deploy another way to do it is you do it on the",
    "start": "1332240",
    "end": "1337360"
  },
  {
    "text": "box before you're actually ready with the deployment so this is one way to do it um in this case you you go um you",
    "start": "1337360",
    "end": "1344720"
  },
  {
    "text": "execute the the rake fi the rate command in order to do that compilation and then we restart some random service",
    "start": "1344720",
    "end": "1351120"
  },
  {
    "text": "um just to to show that you can use either run commands as a deploy user or you can use sudo and then run",
    "start": "1351120",
    "end": "1356480"
  },
  {
    "text": "run things as root this way you can you can again you don't you can easily influence",
    "start": "1356480",
    "end": "1361760"
  },
  {
    "text": "the deployment part but you don't have access to full-blown chef in here if you want to use full-blown",
    "start": "1361760",
    "end": "1367600"
  },
  {
    "text": "chef what you need to do is use custom cookbooks the first step would probably be you manipulate our built-in layers so in",
    "start": "1367600",
    "end": "1373919"
  },
  {
    "text": "this case we added to the setup event for example of the database so we added a recipe",
    "start": "1373919",
    "end": "1380480"
  },
  {
    "text": "called backup run that we will execute as part of the setup and you have to provide the sources for",
    "start": "1380480",
    "end": "1386159"
  },
  {
    "text": "that so you would give us a repository of chef cookbooks and we would chef would find the backup",
    "start": "1386159",
    "end": "1391760"
  },
  {
    "text": "run recipe in it and would execute it whatever it's it's doing that's what will end up on the box so that gives you the",
    "start": "1391760",
    "end": "1396960"
  },
  {
    "text": "possibility in this case probably like you want to do an hourly backup of your my sequel",
    "start": "1396960",
    "end": "1402000"
  },
  {
    "text": "server of your mongodb so whatever whatever you do the the the the most extreme case of",
    "start": "1402000",
    "end": "1409919"
  },
  {
    "text": "customization is you create custom layers so you don't use what we provide you just say i want",
    "start": "1409919",
    "end": "1416159"
  },
  {
    "text": "to use a custom blank layer and i do whatever i need to do so we have customers running for example",
    "start": "1416159",
    "end": "1421760"
  },
  {
    "text": "erlang cassandra on it or you have some custom c daemon that needs to be installed and run",
    "start": "1421760",
    "end": "1427360"
  },
  {
    "text": "or you're not happy with the way we install php and you want to use the latest and greatest and install that",
    "start": "1427360",
    "end": "1433200"
  },
  {
    "text": "so for all of those things you can do just by using a custom layer and",
    "start": "1433200",
    "end": "1438320"
  },
  {
    "text": "creating that how it would look like is you basically add a layer you choose custom as the type in this case we're",
    "start": "1438320",
    "end": "1444880"
  },
  {
    "text": "going to deploy an erlang app so i'm giving it the name of erlang app server the short name is how it will be identified within",
    "start": "1444880",
    "end": "1450799"
  },
  {
    "text": "a chef run so that you can look it up from from other instances and then i add some recipes to it so i",
    "start": "1450799",
    "end": "1456880"
  },
  {
    "text": "install erlang and i need a recipe for deploying my app",
    "start": "1456880",
    "end": "1462399"
  },
  {
    "text": "this is an example how like the recipes could look like so it could have an airline cookbook where i have a recipe",
    "start": "1463840",
    "end": "1470159"
  },
  {
    "text": "to install earning and to de-install uninstall it and i have then a cookbook to deploy my erlang application",
    "start": "1470159",
    "end": "1475840"
  },
  {
    "text": "where i need to to in this case i implement deploy and undeploy and probably i will also implement uh configure in order to like tell it",
    "start": "1475840",
    "end": "1482960"
  },
  {
    "text": "where are the resources where are the other instances that i care about we're going to look",
    "start": "1482960",
    "end": "1488799"
  },
  {
    "text": "later and into detail how you could do that as an example with java and mongodb so",
    "start": "1488799",
    "end": "1495200"
  },
  {
    "text": "we're going to to see a little bit more how you can do that and then i can just happily add servers",
    "start": "1495200",
    "end": "1501279"
  },
  {
    "text": "to my to my custom layers in this case i have two erlang app servers and this is how i make sure that that",
    "start": "1501279",
    "end": "1508240"
  },
  {
    "text": "i actually run erlang on opsworks um another question that we often get is",
    "start": "1508240",
    "end": "1513919"
  },
  {
    "text": "what if i if i don't like chef and i want to do some other way of customization what if i already have",
    "start": "1513919",
    "end": "1519440"
  },
  {
    "text": "a bunch of chef bash scripts that i use in the past to initialize my servers and can i use that",
    "start": "1519440",
    "end": "1526559"
  },
  {
    "text": "today we only support chef but what you could do is you can easily have a simple chef recipe that just",
    "start": "1526559",
    "end": "1532080"
  },
  {
    "text": "calls out to your existing initialization scripts or that starts a puppet run for example",
    "start": "1532080",
    "end": "1537279"
  },
  {
    "text": "just passes the all the metadata that we provide to to puppet so this is a very simple example of how",
    "start": "1537279",
    "end": "1543440"
  },
  {
    "text": "to call uh bash from the chef recipe in this case to run some some random installer and do the typical",
    "start": "1543440",
    "end": "1550480"
  },
  {
    "text": "make make and stall dance so you can easily if you have something",
    "start": "1550480",
    "end": "1556640"
  },
  {
    "text": "some form of legacy or some form of existing scripts that you don't want to have to convert to",
    "start": "1556640",
    "end": "1561919"
  },
  {
    "text": "chef you can easily do that without the need to rewrite everything",
    "start": "1561919",
    "end": "1567039"
  },
  {
    "text": "one thing before i hand over to teresa to talk about the mongodb example that i wanted to to make sure you understand is the the",
    "start": "1568960",
    "end": "1575600"
  },
  {
    "text": "attribute tree and the the the metadata we provide so in general in chef there are different",
    "start": "1575600",
    "end": "1581120"
  },
  {
    "text": "sources of of chef attributes there is the underlying ohio layer that chef",
    "start": "1581120",
    "end": "1586480"
  },
  {
    "text": "discovers about the instance itself like what instance are you running what packages are installed",
    "start": "1586480",
    "end": "1592000"
  },
  {
    "text": "what how much memory does the box have then there are the cookbooks which provides default attributes",
    "start": "1592000",
    "end": "1598960"
  },
  {
    "text": "and then there are like three things that are special to to ops works one is the deployment json so you can",
    "start": "1598960",
    "end": "1604320"
  },
  {
    "text": "like override json per deployment so like set a specific revision for this deployment or",
    "start": "1604320",
    "end": "1609520"
  },
  {
    "text": "change specific value just for this deployment there is the stack configuration json like the built-in values that um",
    "start": "1609520",
    "end": "1616320"
  },
  {
    "text": "opsworks provide and we will dig in a second into that and then there's the custom json that that we that we had a look in earlier",
    "start": "1616320",
    "end": "1622400"
  },
  {
    "text": "that allows you to do any arbitrary random json that you would like and that will like influence all the others and win over those",
    "start": "1622400",
    "end": "1629279"
  },
  {
    "text": "apart from the low level ohio values that you can't change because you like cannot override them how much",
    "start": "1629279",
    "end": "1634320"
  },
  {
    "text": "memory you have unfortunately so that that's that confirmation json is",
    "start": "1634320",
    "end": "1639360"
  },
  {
    "text": "is interesting because this is how opsworks communicates the the information about the stacks to",
    "start": "1639360",
    "end": "1645600"
  },
  {
    "text": "your system um there are several sources to that so the they're all under the node opsworks",
    "start": "1645600",
    "end": "1650880"
  },
  {
    "text": "tree so there is information about the layers like which layers are in the system um like this is how the the load",
    "start": "1650880",
    "end": "1657360"
  },
  {
    "text": "balancer finds out that there are a new application service because it it says i want to have the ips of all the",
    "start": "1657360",
    "end": "1663120"
  },
  {
    "text": "servers in the layer rails application server or java application server for example",
    "start": "1663120",
    "end": "1668240"
  },
  {
    "text": "there is the instance tree that gives you information about the instance you're currently running on like in which layers um or what which",
    "start": "1668240",
    "end": "1675679"
  },
  {
    "text": "layers is this instance part of which ac is it in which vpc maybe which subnet uh what type is it",
    "start": "1675679",
    "end": "1684559"
  },
  {
    "text": "and all of those information that you would expect and then there is information about the stack itself like what is the name of the stack",
    "start": "1684559",
    "end": "1689600"
  },
  {
    "text": "what applications are deployed onto the stack and so on and apart from those for those things there is also of course the cookbook and",
    "start": "1689600",
    "end": "1695679"
  },
  {
    "text": "the layer specific attributes that you can look into and we're going to see later how we use that",
    "start": "1695679",
    "end": "1700799"
  },
  {
    "text": "in order to like ought to discover other nodes how like the mongodb nodes will discover where the other replica pairs are and so",
    "start": "1700799",
    "end": "1706720"
  },
  {
    "text": "on and we're also going to revisit that when i talk at the end a little bit what are the differences between chef server",
    "start": "1706720",
    "end": "1712559"
  },
  {
    "text": "and um and ops works but it's very very um like important to remember okay we",
    "start": "1712559",
    "end": "1718159"
  },
  {
    "text": "have that special data structure that you can look into and discover all the nodes there's also on every machine a simple",
    "start": "1718159",
    "end": "1724240"
  },
  {
    "text": "cli code tool that will give you that will basically print out this information so that in every box you can look into",
    "start": "1724240",
    "end": "1729840"
  },
  {
    "text": "it and see okay what is actually there and what is available and yeah with that i hand over to reza who",
    "start": "1729840",
    "end": "1737520"
  },
  {
    "text": "will talk about mongodb thank you jonathan",
    "start": "1737520",
    "end": "1742559"
  },
  {
    "text": "hi everybody so we are gonna yeah",
    "start": "1742559",
    "end": "1749120"
  },
  {
    "text": "we are gonna talk about a concrete example now we have seen the theory we have seen the life cycle event",
    "start": "1749120",
    "end": "1755600"
  },
  {
    "text": "framework we have seen the several customization possibilities the officers gives you",
    "start": "1755600",
    "end": "1761919"
  },
  {
    "text": "and we have seen the metadata that ops works ships delivers to the instances",
    "start": "1761919",
    "end": "1769600"
  },
  {
    "text": "and to the chef recipes okay um some of you may know that",
    "start": "1769600",
    "end": "1777279"
  },
  {
    "text": "upsorks offers of course i mean some of you may may have already used some of our",
    "start": "1777279",
    "end": "1783200"
  },
  {
    "text": "built-in layers right uh some may have even created their own",
    "start": "1783200",
    "end": "1788399"
  },
  {
    "text": "custom layers what i'm gonna do in the next 10 minutes with you is show you how easy is actually to",
    "start": "1788399",
    "end": "1797200"
  },
  {
    "text": "create a custom layer the key the safer software that is",
    "start": "1797200",
    "end": "1804480"
  },
  {
    "text": "built by your organization in case our deployment types are not fitting your needs you can",
    "start": "1804480",
    "end": "1810000"
  },
  {
    "text": "create your own types for software for open source software that your organization is",
    "start": "1810000",
    "end": "1815520"
  },
  {
    "text": "running you can leverage the hundreds of open source community cookbooks",
    "start": "1815520",
    "end": "1822640"
  },
  {
    "text": "that are in the are present in the chef community",
    "start": "1822640",
    "end": "1827760"
  },
  {
    "text": "all right enough said let's have a look at the example that we're going to use to",
    "start": "1828000",
    "end": "1834480"
  },
  {
    "text": "understand these principles um here we have a we're going to build",
    "start": "1834480",
    "end": "1840880"
  },
  {
    "text": "a stack which is composed by three layers uh and it's gonna run",
    "start": "1840880",
    "end": "1848000"
  },
  {
    "text": "a mongodb replica set we're going to have an elastic load balancing layer using",
    "start": "1848000",
    "end": "1853760"
  },
  {
    "text": "offsearch integrated support for aws elastic load balancer",
    "start": "1853760",
    "end": "1859120"
  },
  {
    "text": "we're going to use a java application server layer using the built-in java layer that we",
    "start": "1859120",
    "end": "1865679"
  },
  {
    "text": "have launched just recently and we're going to extend that and we'll see in a second how",
    "start": "1865679",
    "end": "1872159"
  },
  {
    "text": "and we're going to create our own custom layer as said custom layer that is going to run a",
    "start": "1872159",
    "end": "1877200"
  },
  {
    "text": "mongodb replica set now to make sure that we are all on the same page uh just let me spend two words on what",
    "start": "1877200",
    "end": "1884720"
  },
  {
    "text": "is a mongodb replica set mongodb replica set is a cluster of mongodb nodes",
    "start": "1884720",
    "end": "1889840"
  },
  {
    "text": "which act as a single mongodb database and they have the",
    "start": "1889840",
    "end": "1897440"
  },
  {
    "text": "possibility of failing over dynamically and they elect the nodes in the cluster",
    "start": "1897440",
    "end": "1903279"
  },
  {
    "text": "participating in the cluster are capable of electing a new master whenever the old master is failing the",
    "start": "1903279",
    "end": "1910640"
  },
  {
    "text": "master is going to receive your write operations and the other nodes optionally",
    "start": "1910640",
    "end": "1916720"
  },
  {
    "text": "can receive read operations from the clients in this case from the applications from the job",
    "start": "1916720",
    "end": "1923200"
  },
  {
    "text": "applications running on the boxes of our java application server layer",
    "start": "1923200",
    "end": "1928398"
  },
  {
    "text": "so let's recap for a second on the objectives that we want to achieve with this example we want to run mongodb as a custom layer",
    "start": "1929919",
    "end": "1937360"
  },
  {
    "text": "we want to use the chef community cookbook for mongodb",
    "start": "1937360",
    "end": "1943600"
  },
  {
    "text": "we are going to extend the java application layer because we want our java applications to be",
    "start": "1943600",
    "end": "1948720"
  },
  {
    "text": "aware of all the nodes that are composing the replica set this is important because a mongodb",
    "start": "1948720",
    "end": "1956720"
  },
  {
    "text": "client needs to know about all the members of the replica set before uh say to interact with it",
    "start": "1956720",
    "end": "1963840"
  },
  {
    "text": "properly and then we want to manage the system lifecycle which means for us we want to",
    "start": "1963840",
    "end": "1969120"
  },
  {
    "text": "take advantage of the features the officers give us and we want to say take advantage of things",
    "start": "1969120",
    "end": "1978159"
  },
  {
    "text": "like auto scaling or auto healing and indeed achieve a great operational",
    "start": "1978159",
    "end": "1984559"
  },
  {
    "text": "experience okay let's dig in how we're gonna do how",
    "start": "1984559",
    "end": "1990080"
  },
  {
    "text": "we're gonna build a mongodb custom layer we start with the community cookbook we",
    "start": "1990080",
    "end": "1998000"
  },
  {
    "text": "can see the url on the slide all right and again the chef community",
    "start": "1998000",
    "end": "2003039"
  },
  {
    "text": "has a catalog of hundreds of community cookbooks we're gonna leverage the functionality",
    "start": "2003039",
    "end": "2010559"
  },
  {
    "text": "that is already present in the cookbook okay so we are interested into",
    "start": "2010559",
    "end": "2016159"
  },
  {
    "text": "installing mongodb we are interested into having the mongodb nodes register with",
    "start": "2016159",
    "end": "2021679"
  },
  {
    "text": "their peers to form this replica set we want to have of course management of",
    "start": "2021679",
    "end": "2028240"
  },
  {
    "text": "the service startup and management of the shutdown of the notes in a clean way",
    "start": "2028240",
    "end": "2034159"
  },
  {
    "text": "okay so how we are gonna what we're gonna do",
    "start": "2034159",
    "end": "2041679"
  },
  {
    "text": "with this community cookbook the cookbook is a collection of recipes",
    "start": "2041679",
    "end": "2046720"
  },
  {
    "text": "where you can think if you don't know uh chef before this talk you can think of the recipes as",
    "start": "2046720",
    "end": "2052720"
  },
  {
    "text": "automation scripts all right written in ruby we're gonna leverage the um event like the life cycle",
    "start": "2052720",
    "end": "2061040"
  },
  {
    "text": "uh framework that we've seen before and we're gonna start taking the um",
    "start": "2061040",
    "end": "2068079"
  },
  {
    "text": "cookbook recipes and we're gonna bind them to the different life cycle events that we have available",
    "start": "2068079",
    "end": "2074079"
  },
  {
    "text": "this is quite easy through our ui and let's see that we're gonna bind two",
    "start": "2074079",
    "end": "2080000"
  },
  {
    "text": "recipes to the setup event and one recipe to the configure event",
    "start": "2080000",
    "end": "2085919"
  },
  {
    "text": "those recipes are to be executed in the order in which we add them this is important",
    "start": "2085919",
    "end": "2092560"
  },
  {
    "text": "for our setup event and let me tell you why the first recipe is the mongodb 10 gen repo this is going",
    "start": "2092560",
    "end": "2100640"
  },
  {
    "text": "to take care of actually setting up the package repositories for mongodb the official ones so that we can",
    "start": "2100640",
    "end": "2106800"
  },
  {
    "text": "uh install the latest stable version of course we could also choose with further customization which exit",
    "start": "2106800",
    "end": "2112079"
  },
  {
    "text": "version we wanna we wanna install this will run before the mongodb default",
    "start": "2112079",
    "end": "2117599"
  },
  {
    "text": "recipe which will take care of doing the basic setup as we have put it in the setup event this",
    "start": "2117599",
    "end": "2124560"
  },
  {
    "text": "means we're going to install mongodb and this means we're going to also create the initialization scripts they need scripts",
    "start": "2124560",
    "end": "2130160"
  },
  {
    "text": "to manage service startup and shutdown okay now the most important recipe of",
    "start": "2130160",
    "end": "2136560"
  },
  {
    "text": "our example is gonna be the mongodb replica set recipe that we're gonna tie",
    "start": "2136560",
    "end": "2142160"
  },
  {
    "text": "to the we're gonna bind to the configure event this is important and as we've seen",
    "start": "2142160",
    "end": "2147520"
  },
  {
    "text": "before whenever an instance in opsworks enters the online state or leaves the",
    "start": "2147520",
    "end": "2153280"
  },
  {
    "text": "online state you uh upstrokes will send a configure",
    "start": "2153280",
    "end": "2158720"
  },
  {
    "text": "event to all the instances across the stack in our case we want all the nodes in the mongodb",
    "start": "2158720",
    "end": "2165920"
  },
  {
    "text": "layer to actually run to actually say become aware of new nodes in their same",
    "start": "2165920",
    "end": "2173280"
  },
  {
    "text": "layer that become available or that are shutting down okay because they must know about",
    "start": "2173280",
    "end": "2180800"
  },
  {
    "text": "their their peers um",
    "start": "2180800",
    "end": "2186960"
  },
  {
    "text": "how we're gonna do this say how we are gonna actually leverage this this mongodb replica set recipe the",
    "start": "2186960",
    "end": "2194079"
  },
  {
    "text": "point is that the replica set recipe that is present in the official uh community",
    "start": "2194079",
    "end": "2201680"
  },
  {
    "text": "cookbook for mongodb uh leverages a um peculiarity a functionality of chef",
    "start": "2201680",
    "end": "2208720"
  },
  {
    "text": "server which is called chef search now as jonathan told us before and he's gonna actually show us",
    "start": "2208720",
    "end": "2214480"
  },
  {
    "text": "and talk about this a bit more later uh chef search is not available in opsworks okay",
    "start": "2214480",
    "end": "2219760"
  },
  {
    "text": "but opsworks um that is running a standalone flavor of shaft which is",
    "start": "2219760",
    "end": "2225200"
  },
  {
    "text": "called chef solo provides the recipes with a rich set",
    "start": "2225200",
    "end": "2230880"
  },
  {
    "text": "of metadata to leverage that metadata we're gonna then apply a simple change",
    "start": "2230880",
    "end": "2238640"
  },
  {
    "text": "to our recipe and this in essence is the core of this change",
    "start": "2238640",
    "end": "2244160"
  },
  {
    "text": "okay there is a couple of lines more that we're not going to show now because they are not meaningful",
    "start": "2244160",
    "end": "2250000"
  },
  {
    "text": "what we are doing here we are simply walking the opsworks attribute tree",
    "start": "2250000",
    "end": "2257520"
  },
  {
    "text": "and we are going to see that we are collecting all instances that are present in our layer",
    "start": "2257520",
    "end": "2262960"
  },
  {
    "text": "in our replica set layer and we are going to build a collection we are building a collection of uh",
    "start": "2262960",
    "end": "2270320"
  },
  {
    "text": "chef nodes which are representing the nodes the mongodb nodes and we're going to",
    "start": "2270320",
    "end": "2275760"
  },
  {
    "text": "return that to the existing replica set",
    "start": "2275760",
    "end": "2281040"
  },
  {
    "text": "recipe of the mongodb cookbook just that that's all i have to do to",
    "start": "2281040",
    "end": "2287760"
  },
  {
    "text": "enable uh my stack to use a replica set",
    "start": "2287760",
    "end": "2294240"
  },
  {
    "text": "we're gonna do also some more configuration okay some more customization",
    "start": "2294640",
    "end": "2299760"
  },
  {
    "text": "and we're going to leverage the custom chef json that opsworks let us bind to a",
    "start": "2299760",
    "end": "2305760"
  },
  {
    "text": "stack in this particular case we are going to set two values in the mongodb namespace",
    "start": "2305760",
    "end": "2312720"
  },
  {
    "text": "the mongodb namespace is already used by the chef mongodb",
    "start": "2312720",
    "end": "2317760"
  },
  {
    "text": "community cookbook and to pass this data to their to to its recipes we don't have",
    "start": "2317760",
    "end": "2324160"
  },
  {
    "text": "to do any change to the community cookbook we're setting two values",
    "start": "2324160",
    "end": "2329760"
  },
  {
    "text": "as you can see in the example one value is going to be the replica set",
    "start": "2329760",
    "end": "2336480"
  },
  {
    "text": "name which we're gonna set to the name of the layer to the short name of the layer in which",
    "start": "2336480",
    "end": "2342400"
  },
  {
    "text": "we host our mongodb replica set nodes and the other values the db path",
    "start": "2342400",
    "end": "2350079"
  },
  {
    "text": "we are going to tell our mongodb default recipe hey i want my mongodb",
    "start": "2350079",
    "end": "2357520"
  },
  {
    "text": "database to live on disk at that path in this case vol data",
    "start": "2357520",
    "end": "2364160"
  },
  {
    "text": "as a bonus because we have the possibility of doing this we're going to actually also take",
    "start": "2365520",
    "end": "2371440"
  },
  {
    "text": "advantage of officer support for ebs and it's",
    "start": "2371440",
    "end": "2376720"
  },
  {
    "text": "utterly simple to change the layer settings of our mongodb custom layer",
    "start": "2376720",
    "end": "2383280"
  },
  {
    "text": "and tell opsworks that for each of the instances each of every instance that",
    "start": "2383280",
    "end": "2388320"
  },
  {
    "text": "runs in the in the layer should have an additional ebs setup",
    "start": "2388320",
    "end": "2394160"
  },
  {
    "text": "mounted at the mount point wall data the same one that we are passing down to our chef",
    "start": "2394160",
    "end": "2399440"
  },
  {
    "text": "recipes and we want a we select one of the rate configurations that we support",
    "start": "2399440",
    "end": "2405760"
  },
  {
    "text": "the number of disks the size and gigabytes and we're done every time an instance",
    "start": "2405760",
    "end": "2412800"
  },
  {
    "text": "an offsearch instance is gonna it's gonna boot the upsource instance agent will take",
    "start": "2412800",
    "end": "2418160"
  },
  {
    "text": "care of setting this up for us",
    "start": "2418160",
    "end": "2424079"
  },
  {
    "text": "okay that's all we had to do to actually set up mongodb custom layer",
    "start": "2424079",
    "end": "2431520"
  },
  {
    "text": "not much right we're gonna now quickly go through",
    "start": "2431520",
    "end": "2438000"
  },
  {
    "text": "the changes that we need to actually extend the built-in java application layer as we said before",
    "start": "2438000",
    "end": "2444319"
  },
  {
    "text": "we want our java application servers to be aware of the mongodb",
    "start": "2444319",
    "end": "2449839"
  },
  {
    "text": "replica set nodes they must know all of them because they have to treat",
    "start": "2449839",
    "end": "2455119"
  },
  {
    "text": "them as a whole all right for doing that we're going to inspect what opsworks built-in java",
    "start": "2455119",
    "end": "2463520"
  },
  {
    "text": "layer is doing for us okay and for doing that we can simply",
    "start": "2463520",
    "end": "2469119"
  },
  {
    "text": "open the layer java server have a look at the built-in chef recipes and see the recipes that",
    "start": "2469119",
    "end": "2476560"
  },
  {
    "text": "are used we noticed that there is an observed java configure recipe used in the configure",
    "start": "2476560",
    "end": "2483440"
  },
  {
    "text": "uh event well that's the right event right every time there is a change in our stack",
    "start": "2483440",
    "end": "2488640"
  },
  {
    "text": "every time a mongodb node comes up or goes down we want to tell our job application",
    "start": "2488640",
    "end": "2494480"
  },
  {
    "text": "servers so but how to leverage this the most simple way we can use",
    "start": "2494480",
    "end": "2500800"
  },
  {
    "text": "another approach that jonathan told us before which is simply overriding the shaft templates",
    "start": "2500800",
    "end": "2506319"
  },
  {
    "text": "that come with the upsource java cookbook you can see the uh",
    "start": "2506319",
    "end": "2513359"
  },
  {
    "text": "template itself so the upstairs java configure recipe is setting up the web application",
    "start": "2513359",
    "end": "2518480"
  },
  {
    "text": "context normally and is doing it using this template",
    "start": "2518480",
    "end": "2524000"
  },
  {
    "text": "um what we're doing here is throwing away the the built-in template",
    "start": "2524000",
    "end": "2530079"
  },
  {
    "text": "and putting in in place our own and we're gonna walk again through the metadata through",
    "start": "2530079",
    "end": "2536160"
  },
  {
    "text": "the op source attribute 3 we're going to build a list of mongodb nodes",
    "start": "2536160",
    "end": "2541920"
  },
  {
    "text": "and we're going to pass those that list of mongodb nodes uh for instance in an environment and",
    "start": "2541920",
    "end": "2547760"
  },
  {
    "text": "variable in the web application context of course this is a very simple approach",
    "start": "2547760",
    "end": "2553440"
  },
  {
    "text": "and in production depending on your technology stack and so on",
    "start": "2553440",
    "end": "2558560"
  },
  {
    "text": "you're gonna use very different different approach but the principle is the same okay all right we are basically done",
    "start": "2558560",
    "end": "2567119"
  },
  {
    "text": "we just need to do one more thing and we are ready to actually run our stack we have to package our custom",
    "start": "2567119",
    "end": "2574880"
  },
  {
    "text": "cookbook to package it we're just going to build a tarball or an archive",
    "start": "2574880",
    "end": "2580319"
  },
  {
    "text": "um and we're going to have this what we can call compound cookbook or anyhow a",
    "start": "2580319",
    "end": "2586240"
  },
  {
    "text": "cookbook archive we're going to put the chef mongodb community cookbook there with our little",
    "start": "2586240",
    "end": "2592000"
  },
  {
    "text": "edition that we've seen before with our little change we're gonna put the upsource java addition that we have",
    "start": "2592000",
    "end": "2600000"
  },
  {
    "text": "just seen okay so just simply the template file and then we're gonna put the",
    "start": "2600000",
    "end": "2606000"
  },
  {
    "text": "dependencies of the chef mongodb cookbook by dependencies i mean other",
    "start": "2606000",
    "end": "2611119"
  },
  {
    "text": "cookbooks that the chef mongodb cookbook is actually using once this is done we package all of it",
    "start": "2611119",
    "end": "2618319"
  },
  {
    "text": "and we tell uh opsworks using one of the options we've seen before s3",
    "start": "2618319",
    "end": "2625040"
  },
  {
    "text": "http um um source code repos like git or or svn",
    "start": "2625040",
    "end": "2632240"
  },
  {
    "text": "in authenticated fashion or not to actually say where the off circuit instances will",
    "start": "2632240",
    "end": "2638560"
  },
  {
    "text": "be able to download our custom cookbook all right officers instances when coming",
    "start": "2638560",
    "end": "2644880"
  },
  {
    "text": "up we'll be able to download that will extract the contents of this file",
    "start": "2644880",
    "end": "2650160"
  },
  {
    "text": "uh and we'll be able to use the cookbooks that we have packaged",
    "start": "2650160",
    "end": "2656078"
  },
  {
    "text": "and that's it we're done in under say if we if we wait five more minutes",
    "start": "2656240",
    "end": "2663200"
  },
  {
    "text": "after pressing start all instances in our app source ui we're gonna achieve this having our",
    "start": "2663200",
    "end": "2669280"
  },
  {
    "text": "stack completely running",
    "start": "2669280",
    "end": "2672480"
  },
  {
    "text": "thanks so we're not fully done yet i promise you a third part um",
    "start": "2674839",
    "end": "2681599"
  },
  {
    "text": "the the third part is what are the differences between chefs of an ops chef and opsworks and",
    "start": "2681599",
    "end": "2686720"
  },
  {
    "text": "chef server like you know the open source edition or hosted chef um the we're going to talk about",
    "start": "2686720",
    "end": "2693599"
  },
  {
    "text": "how the the setup difference um also we already saw a couple of the things like",
    "start": "2693599",
    "end": "2698880"
  },
  {
    "text": "the discrete run uh runs or events that you have in opsworks versus uh like the one",
    "start": "2698880",
    "end": "2703920"
  },
  {
    "text": "continuous run that you have in in chef server we're going to talk about push versus pull briefly and the two",
    "start": "2703920",
    "end": "2709119"
  },
  {
    "text": "biggest things are probably search and data bags those are the most common questions that we hear um so first just a quick reminder what",
    "start": "2709119",
    "end": "2716079"
  },
  {
    "text": "the difference is if you have a typical chef server setup and if you have ops works so in opsworks we we have",
    "start": "2716079",
    "end": "2724079"
  },
  {
    "text": "chef solo and we don't have a chef server so we have our own custom backend that uses th that",
    "start": "2724079",
    "end": "2730240"
  },
  {
    "text": "triggers those events and then starts chef solo whenever that event starts in a typical um chef server setup",
    "start": "2730240",
    "end": "2737119"
  },
  {
    "text": "you have chef client which is basically just chef solo plus it calls back to the",
    "start": "2737119",
    "end": "2742319"
  },
  {
    "text": "to chef server every now and then and you have chef server which provides similar capabilities to",
    "start": "2742319",
    "end": "2747599"
  },
  {
    "text": "to opsworks but the couple of things where it differs are um on the one hand the life cycle events",
    "start": "2747599",
    "end": "2753520"
  },
  {
    "text": "uh hopefully by now you you unders you understand that um you have those distinct events that that fire whenever",
    "start": "2753520",
    "end": "2760960"
  },
  {
    "text": "something happens like you boot a new machine you shut it down a machine crashes and gets replaced",
    "start": "2760960",
    "end": "2766400"
  },
  {
    "text": "um the advantage is there they're way faster to execute so you don't have like one big chevron where you do everything",
    "start": "2766400",
    "end": "2772560"
  },
  {
    "text": "you can tell us that we know this is the configure step so i don't have to check if a patch is actually installed",
    "start": "2772560",
    "end": "2778560"
  },
  {
    "text": "i just have to render the database config file again and that gives you also context to know um",
    "start": "2778560",
    "end": "2784720"
  },
  {
    "text": "because you can you can like list you don't have to make your your recipes like fully aware of everything that is happening because you",
    "start": "2784720",
    "end": "2790480"
  },
  {
    "text": "can say this recipe will always only run on shutdown i don't have to be to care about those other things",
    "start": "2790480",
    "end": "2797359"
  },
  {
    "text": "the other big difference is the push versus pull model where in a chef server setup um you you",
    "start": "2797359",
    "end": "2803760"
  },
  {
    "text": "typically have for example the client run as a cron job or run continuously pulling every 15 maybe",
    "start": "2803760",
    "end": "2809599"
  },
  {
    "text": "i think the default i'm not sure if it still is but used to be like 30 minutes or something from the server which means",
    "start": "2809599",
    "end": "2815200"
  },
  {
    "text": "it's not usually you don't do deployments via that for example because you don't want like i change the config file that says what",
    "start": "2815200",
    "end": "2821359"
  },
  {
    "text": "the latest version is and then i wait half an hour for all my fleets to pick it up right you want to push it now to those five servers see um",
    "start": "2821359",
    "end": "2828880"
  },
  {
    "text": "and and immediately see the the result um in in in chef land you sometimes then use",
    "start": "2828880",
    "end": "2834720"
  },
  {
    "text": "knife for doing similar things but in opsworks we have that that push model where if you do a deployment it's",
    "start": "2834720",
    "end": "2841119"
  },
  {
    "text": "immediately pushed to all the machines and you can specify all of the your machines in a stack you can specify a",
    "start": "2841119",
    "end": "2846240"
  },
  {
    "text": "certain layer or just individual machines so you can say deploy this to one of my servers the new",
    "start": "2846240",
    "end": "2851599"
  },
  {
    "text": "version and then i re like observe i do like a kind of a one box testing and see if this machine has now a higher error rate",
    "start": "2851599",
    "end": "2857359"
  },
  {
    "text": "than others and only when i'm happy i'm pushing it to all of them that also gives us a",
    "start": "2857359",
    "end": "2862559"
  },
  {
    "text": "possibility to immediately respond to changes so in that model where you only apply the config changes every half an hour",
    "start": "2862559",
    "end": "2869119"
  },
  {
    "text": "it takes you how like in worst case 29 minutes to know that this database server is no",
    "start": "2869119",
    "end": "2874160"
  },
  {
    "text": "longer there where in opsworks it's immediate um so so this is where where",
    "start": "2874160",
    "end": "2881119"
  },
  {
    "text": "those those models differ a little bit um the probably the the the biggest change to to what you if you",
    "start": "2881119",
    "end": "2889200"
  },
  {
    "text": "take a community cookbooks and what what we we saw in the mongodb example what we had to do is how do we do discovery how do i find out where the nodes are",
    "start": "2889200",
    "end": "2895760"
  },
  {
    "text": "chef provides you the search function opsworks does it differently so you can",
    "start": "2895760",
    "end": "2902160"
  },
  {
    "text": "achieve the same mean so we saw how we could discover where are all my note my mongodb nodes but i we didn't",
    "start": "2902160",
    "end": "2908319"
  },
  {
    "text": "use search for that instead we relied on the node opsworks data structure that lists",
    "start": "2908319",
    "end": "2915119"
  },
  {
    "text": "me the metadata about my system it's kind of similar to partial search",
    "start": "2915119",
    "end": "2921520"
  },
  {
    "text": "if you know that feature from from chef server what we're going to do",
    "start": "2921520",
    "end": "2927040"
  },
  {
    "text": "in the future we want to align this so this is today is the thing where you have to be a little bit careful if",
    "start": "2927040",
    "end": "2932079"
  },
  {
    "text": "you use a community cookbook that uses search you have to like to change one or two lines to to do this query method",
    "start": "2932079",
    "end": "2938160"
  },
  {
    "text": "and this is something that we don't like because we want the experience to be seamless for you so we're going to work on on",
    "start": "2938160",
    "end": "2943920"
  },
  {
    "text": "making that that difference go away um but today it's important to know that it exists",
    "start": "2943920",
    "end": "2949599"
  },
  {
    "text": "and how you use that so a typical useful search is like i want to have the list of all servers",
    "start": "2949599",
    "end": "2954800"
  },
  {
    "text": "that are in the in the web role how you would say in in uh chef server which is like the web",
    "start": "2954800",
    "end": "2959839"
  },
  {
    "text": "layer and ops works um how you can do that um we already saw that in the mongodb example",
    "start": "2959839",
    "end": "2965760"
  },
  {
    "text": "but just um again a reminder i query the offspring's layers data",
    "start": "2965760",
    "end": "2971359"
  },
  {
    "text": "structure that lists me all the layers that are in my stack and all the instances that are in there so in this case i'm interested in the",
    "start": "2971359",
    "end": "2977599"
  },
  {
    "text": "in the ips of my rails app player server so i um find out okay what instances are in",
    "start": "2977599",
    "end": "2983920"
  },
  {
    "text": "that layer and then i iterate over them and grab just the private ip part",
    "start": "2983920",
    "end": "2989280"
  },
  {
    "text": "and this is how i can then populate a template that has them listed somewhere or do then whatever i would do that",
    "start": "2989280",
    "end": "2995520"
  },
  {
    "text": "later on so those first two lines would look differently if you use search",
    "start": "2995520",
    "end": "3000559"
  },
  {
    "text": "but the output is the same um so at the end you get the list of ips",
    "start": "3000559",
    "end": "3005920"
  },
  {
    "text": "of your ads of service and that's what you care about what you can't do this way is find out um",
    "start": "3005920",
    "end": "3014720"
  },
  {
    "text": "dynamic information that that is present only in onenote is provided by attribute data",
    "start": "3014720",
    "end": "3019839"
  },
  {
    "text": "so like if you write a dynamic attribute value in just one node um that is not like coming from",
    "start": "3019839",
    "end": "3026000"
  },
  {
    "text": "opsworks but you generate on one on one server you can't find it out this way because that data structure is",
    "start": "3026000",
    "end": "3032240"
  },
  {
    "text": "only has information that opsworks has and pushes down to the machines so if you generate something locally it",
    "start": "3032240",
    "end": "3037680"
  },
  {
    "text": "will not be present that data structure but for the vast majority of use cases where you you care about discovery",
    "start": "3037680",
    "end": "3045200"
  },
  {
    "text": "you can easily do it this way the the other big question that",
    "start": "3045200",
    "end": "3050400"
  },
  {
    "text": "people who are familiar with chef ask is what about data bags or encrypted data backs",
    "start": "3050400",
    "end": "3055760"
  },
  {
    "text": "right like how do i achieve again and again the answer is um you can easily reach the same goal",
    "start": "3055760",
    "end": "3061920"
  },
  {
    "text": "the means are slightly different and again this is something that we will try in the future to",
    "start": "3061920",
    "end": "3067280"
  },
  {
    "text": "make make uh easier and like that difference go away and just like give you the same",
    "start": "3067280",
    "end": "3072880"
  },
  {
    "text": "interface but under the hood we will implement it using the the way that i just i'm going to describe to you so",
    "start": "3072880",
    "end": "3079359"
  },
  {
    "text": "encrypted data bags there are two ways to do it like this the the first way is to",
    "start": "3079359",
    "end": "3085760"
  },
  {
    "text": "do data bags you can one way how it we already saw to do it is just using custom json so i can use on the stack or",
    "start": "3085760",
    "end": "3092559"
  },
  {
    "text": "on the deployment i can put any arbitrary json so if my goal is i have like a secret in",
    "start": "3092559",
    "end": "3097599"
  },
  {
    "text": "my um that i don't want to put in my cookbook because my cookbook is is in source control like i have 10",
    "start": "3097599",
    "end": "3103680"
  },
  {
    "text": "freelancers who have access to that i don't want to give them the the password to connect to the payment server",
    "start": "3103680",
    "end": "3109280"
  },
  {
    "text": "you could put it in uh the custom json and just reference it by an attribute value",
    "start": "3109280",
    "end": "3115040"
  },
  {
    "text": "afterwards itself stores it in an encrypted fashion but but you would have it in cleartext in that box so maybe",
    "start": "3115040",
    "end": "3120240"
  },
  {
    "text": "that's that's not good enough for you the next step you what you could do is you could um",
    "start": "3120240",
    "end": "3126079"
  },
  {
    "text": "store secrets on s3 so what you could do is you take the json file that you have locally very similar to how you would upload it to chef server um on a",
    "start": "3126079",
    "end": "3133920"
  },
  {
    "text": "chef server setup you you encrypt it locally and then you upload it to s3 you put it in a private bucket and then",
    "start": "3133920",
    "end": "3139599"
  },
  {
    "text": "you use im instance profiles or instance roles to grant your your instances access to that file on s3",
    "start": "3139599",
    "end": "3147119"
  },
  {
    "text": "so they can download it from within a recipe and then this way access the encrypted secret um",
    "start": "3147119",
    "end": "3154480"
  },
  {
    "text": "so you can in that sense the same way like transport secrets to the machines not have them in your cookbooks",
    "start": "3154480",
    "end": "3161520"
  },
  {
    "text": "this is a little bit more of a bose than than data bags but hopefully we will we'll soon be able",
    "start": "3161520",
    "end": "3168400"
  },
  {
    "text": "to announce that you no longer have to to to go to do this and can just use the the um",
    "start": "3168400",
    "end": "3174000"
  },
  {
    "text": "the data bags and the search apis um but the important thing is you can actually do the same things",
    "start": "3174000",
    "end": "3180079"
  },
  {
    "text": "um you may just have to change one two lines in your in your cookbooks so with that um hopefully we gave you a",
    "start": "3180079",
    "end": "3188000"
  },
  {
    "text": "good overview about how opsworks works under the hood what is like like for me the most important",
    "start": "3188000",
    "end": "3193520"
  },
  {
    "text": "thing that hopefully you took away is that life cycle framework to really understand how",
    "start": "3193520",
    "end": "3198720"
  },
  {
    "text": "and and when the the different events fire what the difference is and where i can use it and that in its in its heart like ops",
    "start": "3198720",
    "end": "3205200"
  },
  {
    "text": "works is an a life cycle automation framework where we happen to tie in chef in order to do",
    "start": "3205200",
    "end": "3211200"
  },
  {
    "text": "the things um but the like it's not limited to that and um you're not limited to the",
    "start": "3211200",
    "end": "3217119"
  },
  {
    "text": "built-in layers like it's highly customizable anything that is scriptable you can run on opsworks anything that",
    "start": "3217119",
    "end": "3222880"
  },
  {
    "text": "you can trigger with a chef run that you can trigger with with the best script you can make run on ops work so",
    "start": "3222880",
    "end": "3228559"
  },
  {
    "text": "we have customers running anything from earling to closure to scala to python to",
    "start": "3228559",
    "end": "3234720"
  },
  {
    "text": "to anything that is basically you can script and automate on machines",
    "start": "3234720",
    "end": "3240319"
  },
  {
    "text": "if you want to know more about opsworks if you for example want to have the source code to the examples we",
    "start": "3240400",
    "end": "3245839"
  },
  {
    "text": "we showed make sure to to go to the opsworks lab you can trust and try out obstacles there",
    "start": "3245839",
    "end": "3251680"
  },
  {
    "text": "you can find out later at the booth and we're going to um there is always uh somebody from opsworks there so you can ask any detailed",
    "start": "3251680",
    "end": "3257200"
  },
  {
    "text": "questions we have a twitter account we have some presentations on youtube and tutorials",
    "start": "3257200",
    "end": "3262800"
  },
  {
    "text": "um we recently uh launched an application management blog together with the cloud formation and beanstalk guys",
    "start": "3262800",
    "end": "3268960"
  },
  {
    "text": "um where we're going to post the the source code of the examples and the tutorial how to do the java and custom",
    "start": "3268960",
    "end": "3274480"
  },
  {
    "text": "mongodb layer um example and there is also a survey if you want to give us feedback",
    "start": "3274480",
    "end": "3280240"
  },
  {
    "text": "what features you would like to see anything that you think think is missing or like we could do improve feel free to to",
    "start": "3280240",
    "end": "3287359"
  },
  {
    "text": "fill that out we are very happy and eager for customer feedback and",
    "start": "3287359",
    "end": "3292960"
  },
  {
    "text": "the last thing that i have is just to remind you that right right after this session in the",
    "start": "3292960",
    "end": "3298400"
  },
  {
    "text": "same room intuit is going to talk about how they leverage opsworks to build their own",
    "start": "3298400",
    "end": "3304000"
  },
  {
    "text": "platform as a service solution so if you're interested about to hear more about opsworks about how",
    "start": "3304000",
    "end": "3309119"
  },
  {
    "text": "other companies are using it um just stay here otherwise",
    "start": "3309119",
    "end": "3314240"
  },
  {
    "text": "we would be open for questions and i think we have about like five minutes for questions",
    "start": "3314240",
    "end": "3321680"
  }
]