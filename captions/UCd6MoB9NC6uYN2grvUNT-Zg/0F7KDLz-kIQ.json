[
  {
    "text": "Hello. I'm Taehyun Kim from 'This is My Architecture'.\nToday, we are with Donguk Lee from Zigbang.",
    "start": "7190",
    "end": "11454"
  },
  {
    "text": "We will talk about the architecture of Zigbang.",
    "start": "11454",
    "end": "14336"
  },
  {
    "text": "- Hi.\n- Hello.",
    "start": "14336",
    "end": "17473"
  },
  {
    "text": "First, please introduce Zigbang.",
    "start": "17473",
    "end": "19652"
  },
  {
    "text": "Yes, Zigbang is an integrated platform service that \nprovides real estate information for apartments,",
    "start": "19652",
    "end": "24789"
  },
  {
    "text": "studios, and offices.",
    "start": "24789",
    "end": "27084"
  },
  {
    "text": "Currently, this is really for real estate,",
    "start": "27084",
    "end": "29767"
  },
  {
    "text": "but in the long run, it is growing \nto providing additional services related to living and housing.",
    "start": "29767",
    "end": "35888"
  },
  {
    "text": "Yes, here is the Zigbang architecture \nthat utilizes different AWS services.",
    "start": "35888",
    "end": "40706"
  },
  {
    "text": "Can you please explain the architecture?",
    "start": "40706",
    "end": "43922"
  },
  {
    "text": "Yes, I'll explain the overall architecture of the Zigbang service.",
    "start": "43922",
    "end": "47688"
  },
  {
    "text": "Please see the diagram.\nWhen an API request is delivered through a client,",
    "start": "47688",
    "end": "54145"
  },
  {
    "text": "Route53 forwards traffic to CloudFront.",
    "start": "54145",
    "end": "58292"
  },
  {
    "text": "This Route53 will pass back to the internal Route53.",
    "start": "58292",
    "end": "62672"
  },
  {
    "text": "This Route53 will send traffic to each server.",
    "start": "62672",
    "end": "68139"
  },
  {
    "text": "Each server sends a response to the client",
    "start": "68139",
    "end": "71464"
  },
  {
    "text": "through the CRUD operation in the database.",
    "start": "71464",
    "end": "73550"
  },
  {
    "text": "Initially, there was only one architecture \nwith API Gateway and Lambda.",
    "start": "73551",
    "end": "79906"
  },
  {
    "text": "Due to the traffic and cost issues, \nwe are operating it with ECS and Fargate.",
    "start": "79906",
    "end": "85814"
  },
  {
    "text": "Yes, when I see the architecture you described, \nthe part that uses Route53 seems",
    "start": "85815",
    "end": "91875"
  },
  {
    "text": "unique.",
    "start": "91875",
    "end": "93216"
  },
  {
    "text": "How did you construct the architecture \nto fix the issue?",
    "start": "93216",
    "end": "97849"
  },
  {
    "text": "First, the purpose of internal Route53 is \nthe weight distribution for traffic.",
    "start": "97849",
    "end": "103617"
  },
  {
    "text": "By placing the weight distribution in AWS, \nthe distribution can be achieved in real-time.",
    "start": "103617",
    "end": "110969"
  },
  {
    "text": "The weight distribution uses CloudWatch's monitoring through ECS \nmonitoring. CloudWatch provides information to Lambda,",
    "start": "110970",
    "end": "118911"
  },
  {
    "text": "so the AWS SDK determines the load on each server",
    "start": "118911",
    "end": "125474"
  },
  {
    "text": "and reflects it in real-time.",
    "start": "125474",
    "end": "128198"
  },
  {
    "text": "For processing the real-time weight, \nyou have one more Route53 inside.",
    "start": "128198",
    "end": "133922"
  },
  {
    "text": "In the back, you are using ECS ​​and Lambda together.",
    "start": "133922",
    "end": "138609"
  },
  {
    "text": "Is there any special reason?",
    "start": "138609",
    "end": "139672"
  },
  {
    "text": "In the case of this ECS, autoscaling itself was not enough \nto sustain the large amounts of traffic within a short time",
    "start": "139672",
    "end": "148994"
  },
  {
    "text": "due to the push marketing for events.",
    "start": "148994",
    "end": "151118"
  },
  {
    "text": "In order to prevent the traffic loss during autoscaling,",
    "start": "151118",
    "end": "154647"
  },
  {
    "text": "through the above structure, \ntraffic was increased to Lambda",
    "start": "154647",
    "end": "160149"
  },
  {
    "text": "and the load on ECS was reduced",
    "start": "160149",
    "end": "161969"
  },
  {
    "text": "during scale-out. ",
    "start": "161969",
    "end": "164394"
  },
  {
    "text": "On the contrary, when it's stable, we provided the stable services \nby reducing the proportion of Lambda in the API Gateway",
    "start": "164395",
    "end": "168675"
  },
  {
    "text": "and increasing the proportion of ECS.",
    "start": "168675",
    "end": "172679"
  },
  {
    "text": "It enabled us to use the cost savings \nand reliable traffic distribution.",
    "start": "172679",
    "end": "179650"
  },
  {
    "text": "When there was the large amount of traffic, you used Lambda \nso that ECS autoscaling could handle it a little more efficiently.",
    "start": "179650",
    "end": "187403"
  },
  {
    "text": "I see that you are using different DBs together.",
    "start": "187403",
    "end": "192426"
  },
  {
    "text": "Could you please explain the purpose of each\nand how the data will be used later?",
    "start": "192426",
    "end": "199017"
  },
  {
    "text": "In our Zigbang, we use 4 types of storage:",
    "start": "200189",
    "end": "204140"
  },
  {
    "text": "The first is ElastiCache, the second is DocumentDB, \nthe third is RDS, and the fourth is Elasticsearch.",
    "start": "204140",
    "end": "211216"
  },
  {
    "text": "First, in the case of ElastiCache, \nthe cache is intended to speed up ",
    "start": "211216",
    "end": "216593"
  },
  {
    "text": "the response to the volatile data.",
    "start": "216593",
    "end": "217995"
  },
  {
    "text": "DocumentDB is used for data",
    "start": "217995",
    "end": "221989"
  },
  {
    "text": "with a lot of inquiries ",
    "start": "221989",
    "end": "223532"
  },
  {
    "text": "or unstructured data.",
    "start": "223532",
    "end": "224617"
  },
  {
    "text": "RDS is the basic storage for basic CRUD.",
    "start": "224617",
    "end": "230454"
  },
  {
    "text": "Lastly, Elasticsearch is used for two purposes.",
    "start": "230454",
    "end": "234319"
  },
  {
    "text": "First, it is used as the search engine \nfor searching apartment addresses.",
    "start": "234320",
    "end": "238351"
  },
  {
    "text": "The second purpose is storing, managing, and collecting ",
    "start": "238351",
    "end": "242649"
  },
  {
    "text": "the application logging for trouble shooting.",
    "start": "242649",
    "end": "245276"
  },
  {
    "text": "It would not have been easy to manage the infrastructure \nto maintain Zigbang's overall architecture.",
    "start": "245276",
    "end": "252172"
  },
  {
    "text": "Could you please explain how you manage \nthe infrastructure in Zigbang?",
    "start": "252172",
    "end": "255186"
  },
  {
    "text": "All of our architectural designs and the direction of deployment \nis made through the AWS CDK.",
    "start": "255186",
    "end": "261420"
  },
  {
    "text": "Meaning that it borrows the concept of \"Infra as a Code\".",
    "start": "261420",
    "end": "265376"
  },
  {
    "text": "As you can see, we are also using ",
    "start": "265376",
    "end": "268868"
  },
  {
    "text": "the AWS SDK for some services ",
    "start": "268868",
    "end": "270694"
  },
  {
    "text": "or real-time changes. ",
    "start": "270694",
    "end": "271852"
  },
  {
    "text": "Yes, thanks for your explanation today.",
    "start": "272547",
    "end": "274415"
  },
  {
    "text": "Could you tell us a little about Zigbang's future plans?",
    "start": "274415",
    "end": "277655"
  },
  {
    "text": "Zigbang service is called a hybrid architecture \nwith duplexing method.",
    "start": "277655",
    "end": "284182"
  },
  {
    "text": "I designed the service with this hybrid architecture.",
    "start": "284183",
    "end": "287689"
  },
  {
    "text": "Internally, we are also working on MSA.",
    "start": "287689",
    "end": "291546"
  },
  {
    "text": "Therefore, in the long run, we aim to implement \nthe internal duplexing service with MSA.",
    "start": "291546",
    "end": "298061"
  },
  {
    "text": "The load balancing of all traffic",
    "start": "298061",
    "end": "300694"
  },
  {
    "text": "or service processing will be done through CDK, ",
    "start": "300694",
    "end": "302898"
  },
  {
    "text": "and we aim to design and develop a way",
    "start": "302898",
    "end": "306993"
  },
  {
    "text": "that microservices can be added \nor subtracted at any time.",
    "start": "306993",
    "end": "311117"
  },
  {
    "text": "I'm looking forward to seeing Zigbang's future.  ",
    "start": "311117",
    "end": "314167"
  },
  {
    "text": "Thank you.",
    "start": "314167",
    "end": "315039"
  },
  {
    "text": "This has been 'This is My Architecture'. \nThank you.",
    "start": "316543",
    "end": "319793"
  }
]