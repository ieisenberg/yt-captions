[
  {
    "start": "0",
    "end": "62000"
  },
  {
    "text": "welcome everyone thank you for coming to this session this is introduction to graph QL and also talked about any base",
    "start": "89",
    "end": "6569"
  },
  {
    "text": "apps Inc I'm super excited to talk to you guys about graph QL my name is Rohan Deshpande I'm a senior engineer with AWS",
    "start": "6569",
    "end": "14009"
  },
  {
    "text": "of being at Amazon for I don't know it's almost seven years at this point and if",
    "start": "14009",
    "end": "19680"
  },
  {
    "text": "pretty much been working in the mobile space since I've been at Amazon so you know not just applications but SDKs",
    "start": "19680",
    "end": "25890"
  },
  {
    "text": "tools services that people use to build mobile apps and I deal with mostly with",
    "start": "25890",
    "end": "31740"
  },
  {
    "text": "like the backend services and tooling that would use to add cloud capabilities to applications so one of the",
    "start": "31740",
    "end": "38370"
  },
  {
    "text": "technologies that has gained traction in the last few months or years especially the mobile space is graph QL and it's",
    "start": "38370",
    "end": "45899"
  },
  {
    "text": "not just for data access it's also become super important and super relevant for API aggregation and in this",
    "start": "45899",
    "end": "53850"
  },
  {
    "text": "talk I'll go over what graph kill is why it's actually become what it is and how",
    "start": "53850",
    "end": "59309"
  },
  {
    "text": "you can start using it so let's get started so you know first question what is graph QL I guess question for the",
    "start": "59309",
    "end": "66780"
  },
  {
    "start": "62000",
    "end": "547000"
  },
  {
    "text": "room how many of you guys know what graph QL is one person two people okay",
    "start": "66780",
    "end": "73680"
  },
  {
    "text": "cool two and a half people all right so I think the goal would be in the next 56 minutes you will all become experts",
    "start": "73680",
    "end": "80640"
  },
  {
    "text": "in graph QL so let's make that happen all right so the official definition as",
    "start": "80640",
    "end": "87000"
  },
  {
    "text": "it's written in the graphical documentation is it says graph QL is a query language for",
    "start": "87000",
    "end": "92790"
  },
  {
    "text": "api's and it's a runtime for fulfilling these queries with the existing data so",
    "start": "92790",
    "end": "99030"
  },
  {
    "text": "what that means is there's actually two parts of graph QL one is there's a specification which you can use to",
    "start": "99030",
    "end": "105149"
  },
  {
    "text": "define entities and how you can write your queries to access your data and access api's and whatnot this",
    "start": "105149",
    "end": "111420"
  },
  {
    "text": "specification is machine readable so you use it you know there's there's a well-defined type structure which you",
    "start": "111420",
    "end": "117180"
  },
  {
    "text": "use to define a model data domain and then the second part of the specification is the runtime right",
    "start": "117180",
    "end": "123030"
  },
  {
    "text": "that's what talks about now that you can model this type system and these queries how do they actually execute so it's",
    "start": "123030",
    "end": "129119"
  },
  {
    "text": "it's not one or the other it's actually both a graphical well well formed properly written graph kill",
    "start": "129119",
    "end": "135170"
  },
  {
    "text": "run time supports both the structure and the execution of these queries so you",
    "start": "135170",
    "end": "141170"
  },
  {
    "text": "know because of the name the name has graph in it right so one of the most common misconceptions is graph QL is only for querying graph databases which",
    "start": "141170",
    "end": "147950"
  },
  {
    "text": "is not really true you can use graph kill to represent and access any data",
    "start": "147950",
    "end": "153260"
  },
  {
    "text": "systems whether they're relational databases like my sequel or Postgres you",
    "start": "153260",
    "end": "158599"
  },
  {
    "text": "can use it to access api's can use it access nor no sequel databases like DynamoDB you can even use it access you",
    "start": "158599",
    "end": "165709"
  },
  {
    "text": "know non-standard things like files maybe good program queue layer on top of your file system it's totally possible",
    "start": "165709",
    "end": "171340"
  },
  {
    "text": "what graph kill lets you do what it actually encourages you to do is think in terms of the data your data domain",
    "start": "171340",
    "end": "177440"
  },
  {
    "text": "and the relationships between this between these data between these domains so you know you have a field maybe",
    "start": "177440",
    "end": "184280"
  },
  {
    "text": "coming through an API you want to be able to relate it to something that's stored in a relational database graphical I encourage you to think about",
    "start": "184280",
    "end": "190190"
  },
  {
    "text": "that in terms of the relationships in terms of a graph and that's how we model your domain as a graph of all these",
    "start": "190190",
    "end": "196459"
  },
  {
    "text": "related entities now graph kale comes the rich type system it includes",
    "start": "196459",
    "end": "202160"
  },
  {
    "text": "concepts like types interfaces unions enumerations",
    "start": "202160",
    "end": "207530"
  },
  {
    "text": "you know fields lists collections things you're pretty familiar with from other languages it also includes primitive",
    "start": "207530",
    "end": "214400"
  },
  {
    "text": "types I like integers and strings and floats and whatnot but it also has this",
    "start": "214400",
    "end": "219620"
  },
  {
    "text": "concept of custom primitive types these primitive types are called scalars in graph QL and so if you wanted to you",
    "start": "219620",
    "end": "226370"
  },
  {
    "text": "know define a date type for example because you want to perform validation you know date should have a particular set of characters in it and should be a",
    "start": "226370",
    "end": "233120"
  },
  {
    "text": "particular length you can do that upfront by defining your own custom scalars as well this entire type",
    "start": "233120",
    "end": "238970"
  },
  {
    "text": "definition is machine readable so because it's machine readable the runtime supports what's called",
    "start": "238970",
    "end": "245209"
  },
  {
    "text": "introspection as well an introspection is a capability for you to run queries against the endpoint to you know get the",
    "start": "245209",
    "end": "251870"
  },
  {
    "text": "type system right the metadata for that type system itself this is super cool because you know you can use this",
    "start": "251870",
    "end": "257840"
  },
  {
    "text": "introspection query and these capabilities to build tooling so you're not just stuck with here's an API",
    "start": "257840",
    "end": "263570"
  },
  {
    "text": "definition and you know you got some metadata but you can do things like compile-time I'm calling this query and",
    "start": "263570",
    "end": "268910"
  },
  {
    "text": "has this particular set of fields I need a pass so you can build tooling around code generation and compile time query",
    "start": "268910",
    "end": "274520"
  },
  {
    "text": "validation which becomes really helpful to make sure your programs run well and they read correctly there are three",
    "start": "274520",
    "end": "281450"
  },
  {
    "text": "types of operations in graph QL so there's queries which are useful for reading data there are mutations for",
    "start": "281450",
    "end": "288470"
  },
  {
    "text": "writing data and then there's a third operation in graph QL which is kind of unique it's called subscriptions which is for",
    "start": "288470",
    "end": "294020"
  },
  {
    "text": "listening to data you're listening you're listening for any changes that might happen on your back end wherever that may be",
    "start": "294020",
    "end": "300290"
  },
  {
    "text": "each of these operations is model as types and if you're familiar with crud",
    "start": "300290",
    "end": "305389"
  },
  {
    "text": "systems you know create read update delete systems or api's the queries kind",
    "start": "305389",
    "end": "310610"
  },
  {
    "text": "of map to like gets and lists and the mutations mapped it creates updates deletes any of the operations which",
    "start": "310610",
    "end": "317600"
  },
  {
    "text": "result in changes on the first state for that server so you don't need to understand what these are right now",
    "start": "317600",
    "end": "322729"
  },
  {
    "text": "we'll talk more about them as you go through our presentation and you know questions at the point so graph Gale was",
    "start": "322729",
    "end": "329870"
  },
  {
    "text": "created at Facebook in about 2012 right so it's about five six years or so at this point and the reason they created",
    "start": "329870",
    "end": "336770"
  },
  {
    "text": "it was because they were trying to address some problems related to data fetching and API consumption that their",
    "start": "336770",
    "end": "342289"
  },
  {
    "text": "developers were encountering the capabilities that they added to graph QL the features and you know the type",
    "start": "342289",
    "end": "348380"
  },
  {
    "text": "system and those kinds of things these were driven by practical problems and use cases that they were trying to solve",
    "start": "348380",
    "end": "353740"
  },
  {
    "text": "as they as you know the platform expanded to support all these different",
    "start": "353740",
    "end": "358789"
  },
  {
    "text": "types of apps and operating systems and you know browser versions and things at",
    "start": "358789",
    "end": "364160"
  },
  {
    "text": "the same time you know as more people moving on to mobile their back-end infrastructure was scaling up right they",
    "start": "364160",
    "end": "370250"
  },
  {
    "text": "were more into the micro services based architecture as well and they had hundreds of services that you need to call to render in just a single",
    "start": "370250",
    "end": "376700"
  },
  {
    "text": "component in the app and so they had to solve this problem of efficiently accessing data from all these clients",
    "start": "376700",
    "end": "382850"
  },
  {
    "text": "and you know at that point they were trying to solve it for maybe a few hundred million app installs or it",
    "start": "382850",
    "end": "388280"
  },
  {
    "text": "doesn't seem like a big number but you know look at with a look at where we are right now right there's over two billion",
    "start": "388280",
    "end": "394430"
  },
  {
    "text": "smartphones out there the primary mode in which people access your",
    "start": "394430",
    "end": "400010"
  },
  {
    "text": "applications anything on the web is using a mobile device and people have",
    "start": "400010",
    "end": "405500"
  },
  {
    "text": "spent over 1.6 trillion hours in 2017 just with on their devices and the apps those are pretty big",
    "start": "405500",
    "end": "411950"
  },
  {
    "text": "numbers right and given the scale you know it's really really important that",
    "start": "411950",
    "end": "417170"
  },
  {
    "text": "we make optimal use of resources both from a network point of view and from a",
    "start": "417170",
    "end": "422360"
  },
  {
    "text": "computer point of view so the problems that they were trying to solve the encounter and trying to solve actually",
    "start": "422360",
    "end": "427700"
  },
  {
    "text": "pretty common to any modern web or mobile application you know let's say you were some fictitious online book",
    "start": "427700",
    "end": "434150"
  },
  {
    "text": "retailer and you were selling books and you had some kind of a search page where you could search for book by some",
    "start": "434150",
    "end": "439250"
  },
  {
    "text": "keyword and then you know you have this page which kind of gives you search results right so you got book title",
    "start": "439250",
    "end": "445130"
  },
  {
    "text": "author maybe some pricing information you have some reviews because that's a very interesting concept for books so",
    "start": "445130",
    "end": "452750"
  },
  {
    "text": "you know in the past this page could probably be created with a couple of sequel queries and you really only had",
    "start": "452750",
    "end": "458090"
  },
  {
    "text": "dealeth web as a platform right you deal with different browsers and whatever but really was ultimately web as a platform",
    "start": "458090",
    "end": "463690"
  },
  {
    "text": "but you know it's a really different world now right so you have all these different devices and different form",
    "start": "463690",
    "end": "468860"
  },
  {
    "text": "factors especially since smartphones happen in 2007 so now you have you know",
    "start": "468860",
    "end": "474320"
  },
  {
    "text": "desktop applications with browsers but you might have you know voice assistants",
    "start": "474320",
    "end": "479840"
  },
  {
    "text": "that are trying to talk to your page as well they're trying to get some data from it you obviously have mobile apps that are getting more and more prominent and so",
    "start": "479840",
    "end": "486790"
  },
  {
    "text": "all all these different form factors have different requirements on how they want to render this data how they want",
    "start": "486790",
    "end": "493010"
  },
  {
    "text": "to get this data what fields they care about what information they care about at the same time you know in the backend",
    "start": "493010",
    "end": "498860"
  },
  {
    "text": "your scale is increased as well right like we tend to build more in terms of microservices because there's a bunch of benefits to it and so now these clients",
    "start": "498860",
    "end": "507110"
  },
  {
    "text": "these different types of clients have to get data from like a whole bunch of services so what you need to do is then",
    "start": "507110",
    "end": "512900"
  },
  {
    "text": "you know be able to access all this information and get it to your user very quickly because you know there's been a",
    "start": "512900",
    "end": "518090"
  },
  {
    "text": "bunch of studies down there down where you know if the page takes over 100 milliseconds to load or render people",
    "start": "518090",
    "end": "524270"
  },
  {
    "text": "are going to perceive it as slow and then you know once people move away it's pretty hard to bring them back so you as",
    "start": "524270",
    "end": "529430"
  },
  {
    "text": "engineers and you as programmers what we need the problems we need to solve or how do we all this data really quickly and how do",
    "start": "529430",
    "end": "535579"
  },
  {
    "text": "we get it efficiently so we can make this information available to our customers and users across all these",
    "start": "535579",
    "end": "541790"
  },
  {
    "text": "platforms so we do need solve for like the complexity of serving this content and you know there's been a you know",
    "start": "541790",
    "end": "551329"
  },
  {
    "start": "547000",
    "end": "659000"
  },
  {
    "text": "rest is been great right rest has been around for almost 20 years at this point but it has some limitations and it's a",
    "start": "551329",
    "end": "558620"
  },
  {
    "text": "very tried and tested solution it's got some well-established design and architectural patterns and these are",
    "start": "558620",
    "end": "564470"
  },
  {
    "text": "really really well adopted and you know it's not going to go away at any point right it's it's not like it's a one or the other but given the requirements we",
    "start": "564470",
    "end": "572180"
  },
  {
    "text": "have right now especially with all these different form factors I'll be able to support it's almost time it's almost like you know it's time for a new",
    "start": "572180",
    "end": "578329"
  },
  {
    "text": "philosophy for building some of these backing api's the challenges that we",
    "start": "578329",
    "end": "583459"
  },
  {
    "text": "face when managing this kind of application data are there's four main",
    "start": "583459",
    "end": "588860"
  },
  {
    "text": "challenges actually at this point there's data requirements because you have different data requirements across devices and they become exponentially",
    "start": "588860",
    "end": "595880"
  },
  {
    "text": "harder when users start sharing the device sharing the data across all these devices there are other users that want",
    "start": "595880",
    "end": "603290"
  },
  {
    "text": "instant access to their content and then they also want their content available offline right that's pretty important",
    "start": "603290",
    "end": "609260"
  },
  {
    "text": "like if you're on a plane and you can't access your photos you probably wouldn't be very happy with that application of",
    "start": "609260",
    "end": "615110"
  },
  {
    "text": "that experience but not only that they also want the data to be automatically synchronized when the network is",
    "start": "615110",
    "end": "621380"
  },
  {
    "text": "available so you don't just want your photos apps to be available offline you also want to keep adding photos to it",
    "start": "621380",
    "end": "626899"
  },
  {
    "text": "I'm making edits and when you come back online you wanted to automatically synchronize to maybe the cloud or to other devices that are interested in it",
    "start": "626899",
    "end": "633130"
  },
  {
    "text": "and finally we want to build for success right which you know you never know when an app's going to take off and get",
    "start": "633130",
    "end": "638930"
  },
  {
    "text": "really really popular so you need a plan for how big can I get how fast can I get that big and so we need to make sure our",
    "start": "638930",
    "end": "646910"
  },
  {
    "text": "backends can scale as the applications grow and as a usage grows so this turns into a very hard distributor systems",
    "start": "646910",
    "end": "653269"
  },
  {
    "text": "problem because you know scaling up infrastructure is not a very trivial exercise so given all these problems why",
    "start": "653269",
    "end": "661459"
  },
  {
    "text": "graph QL right there's tons of options out there rest is tried and proven what",
    "start": "661459",
    "end": "667279"
  },
  {
    "text": "what does graph kill bring that's unique and why does it have these specific capabilities that can help us solve problems so before we get into that just",
    "start": "667279",
    "end": "675740"
  },
  {
    "text": "really quickly I want to summarize like you know how traditional data fetching would work right so typically what you",
    "start": "675740",
    "end": "681829"
  },
  {
    "text": "do is you stand up a rest endpoint you send up a rest API which has a bunch of endpoints and then if your app wanted to",
    "start": "681829",
    "end": "688160"
  },
  {
    "text": "get some of this information you would make a bunch of calls here so the example it's a this is a blog post",
    "start": "688160",
    "end": "693769"
  },
  {
    "text": "application which has a blog post and maybe there's some comments attached to each of the post classically what you",
    "start": "693769",
    "end": "700790"
  },
  {
    "text": "would do in this case is you would make a call to the posts endpoint you'd get a list of IDs and then you would iterate",
    "start": "700790",
    "end": "706999"
  },
  {
    "text": "through each of those IDs getting more detail about the post and then you would get a list of comments for each of this",
    "start": "706999",
    "end": "712069"
  },
  {
    "text": "post and then iterate through that right so you would end up with an N power three kind of loop rest is great because",
    "start": "712069",
    "end": "719629"
  },
  {
    "text": "you know it's trivial to set up we all know HTTP works at this point so there's a bunch of tools out there but there's",
    "start": "719629",
    "end": "725149"
  },
  {
    "text": "some problems with this kind of a structure as well right one is modeling the relationships so blog to post to",
    "start": "725149",
    "end": "731839"
  },
  {
    "text": "comments that's a tree structure you have to model if you have if you if you",
    "start": "731839",
    "end": "738290"
  },
  {
    "text": "had information you wanted to get that was in a slightly different format how would you do that with that same kind of",
    "start": "738290",
    "end": "743930"
  },
  {
    "text": "an endpoint how do you support ordering how do you support pagination because you know if you have a million blog",
    "start": "743930",
    "end": "749120"
  },
  {
    "text": "posts you can't really get a million blog post and then throw away the information you want right you only want to get what is useful to the user at",
    "start": "749120",
    "end": "755779"
  },
  {
    "text": "that point and then how do you deal with changes for that data so let's let's go",
    "start": "755779",
    "end": "761360"
  },
  {
    "text": "back to our online bookseller example and looking in the search page and that's trying to understand using this",
    "start": "761360",
    "end": "768019"
  },
  {
    "text": "example why graph Gale has the concepts that it does so this is a fairly non-trivial page which is getting data",
    "start": "768019",
    "end": "773870"
  },
  {
    "text": "from some you know heterogeneous set of data sources right some of the information is probably coming from a no",
    "start": "773870",
    "end": "779509"
  },
  {
    "text": "sequel table called books in this case some of the inventory information is coming from probably a much more legacy",
    "start": "779509",
    "end": "786259"
  },
  {
    "text": "database which is relational and then maybe the reviews are coming through a third party API because you know they",
    "start": "786259",
    "end": "792529"
  },
  {
    "text": "have all kinds of spam detection and filtering and whatnot right so you're getting all this data to build this page from three different sources and you",
    "start": "792529",
    "end": "799129"
  },
  {
    "text": "need to get this data fast so each data source right the no sequel",
    "start": "799129",
    "end": "805300"
  },
  {
    "text": "store the sequel store the HTTP API they have their own way of representing the structure of this data and how and they",
    "start": "805300",
    "end": "812500"
  },
  {
    "text": "define how clients should interact with this data so if it's no sequel I would probably use some kind of an SDK with",
    "start": "812500",
    "end": "817870"
  },
  {
    "text": "relation I'll probably use like a JDBC ODBC connection the HTTP I would use some you know fetch or some kind of a",
    "start": "817870",
    "end": "824200"
  },
  {
    "text": "client to call these HTTP endpoints and then convert the JSON or whatever the format is back to what my page would",
    "start": "824200",
    "end": "830890"
  },
  {
    "text": "expect so now well my client needs to do is need to be aware of all these different technologies and then be able",
    "start": "830890",
    "end": "837100"
  },
  {
    "text": "to interact with them and translate them to the format it expects to show this data to the user so what we actually",
    "start": "837100",
    "end": "844360"
  },
  {
    "text": "need is some way to represent these data structures you know defined by these",
    "start": "844360",
    "end": "850180"
  },
  {
    "text": "downstream systems in in a common format so that clients don't need to understand and incorporate each and every one of",
    "start": "850180",
    "end": "856180"
  },
  {
    "text": "these data technologies and that's why graph Gale has a type system so this",
    "start": "856180",
    "end": "861640"
  },
  {
    "start": "857000",
    "end": "977000"
  },
  {
    "text": "lets you define the shape of the data as well as define the way you would access this data all right so you know we've",
    "start": "861640",
    "end": "869470"
  },
  {
    "text": "got a type system we've been able to abstract away all these sources next thing we want is our customers to be able to search for books on to give give",
    "start": "869470",
    "end": "877060"
  },
  {
    "text": "us back this page right so you know we can build a search endpoint takes in a keyword and it returns back a list of",
    "start": "877060",
    "end": "883540"
  },
  {
    "text": "ID's for all the books that match that keyword and this works but we have a bit",
    "start": "883540",
    "end": "891490"
  },
  {
    "text": "of a problem we're because now to get the information on this page what we",
    "start": "891490",
    "end": "896740"
  },
  {
    "text": "have to do is we end up calling api's or interfaces for each of the data sources right so for the book information we'll",
    "start": "896740",
    "end": "903880"
  },
  {
    "text": "call the no sequel table with whatever it sources for reviews will call the HTTP endpoint you know get some more",
    "start": "903880",
    "end": "909190"
  },
  {
    "text": "information back over there for the inventory information because there's two levels we're getting over there we",
    "start": "909190",
    "end": "914620"
  },
  {
    "text": "make two calls so well what we end up doing is we end up making n plus 1 calls",
    "start": "914620",
    "end": "920890"
  },
  {
    "text": "in this page the first call is to get the list of IDs and then you make n calls where n is each component which",
    "start": "920890",
    "end": "927880"
  },
  {
    "text": "actually be more than you know number of calls there but you'll make you'll end up making n calls just to get all the",
    "start": "927880",
    "end": "933760"
  },
  {
    "text": "information the show listened to build this page while it works you know it gets really",
    "start": "933760",
    "end": "938800"
  },
  {
    "text": "complex as your page gets bigger and you have more information there the first problem we have is page load",
    "start": "938800",
    "end": "944949"
  },
  {
    "text": "latency because you're making n plus 1 calls to build a page the second is you have this risk of any of these calls",
    "start": "944949",
    "end": "951249"
  },
  {
    "text": "failing right so what do you do if like you know the first book information renders but your while you're rendering",
    "start": "951249",
    "end": "956980"
  },
  {
    "text": "the second book maybe one of those inventory calls fails and then you can't you don't get that information you know",
    "start": "956980",
    "end": "962619"
  },
  {
    "text": "do you retry do you ignore it if you retry you know you increase latency right because you're continuing and",
    "start": "962619",
    "end": "968139"
  },
  {
    "text": "making the call again it takes more time so ultimately what this also results in is increasing your page complexity you",
    "start": "968139",
    "end": "973779"
  },
  {
    "text": "write all this code to handle failures and whatnot as well the reason we make",
    "start": "973779",
    "end": "978819"
  },
  {
    "start": "977000",
    "end": "1162000"
  },
  {
    "text": "all these calls is because each each single call list you know the wall call we made to get the list of books doesn't",
    "start": "978819",
    "end": "984369"
  },
  {
    "text": "give us all the information we need so this problem is called under fetching because you're not getting all the data",
    "start": "984369",
    "end": "989559"
  },
  {
    "text": "we expect in a single call so how do we fix it well why don't we just let that",
    "start": "989559",
    "end": "995649"
  },
  {
    "text": "search call we had returned back all the information we needed for that page right so you know in the results we get",
    "start": "995649",
    "end": "1001110"
  },
  {
    "text": "back everything we expect on that page we have the ID the title author pricing",
    "start": "1001110",
    "end": "1006179"
  },
  {
    "text": "information everything so now what we've done is we've taken this orchestration problem that was happening on the client",
    "start": "1006179",
    "end": "1011660"
  },
  {
    "text": "pushed it to the server which is a lot more reliable and the server can make all these calls faster so now a client",
    "start": "1011660",
    "end": "1017279"
  },
  {
    "text": "can just call a single endpoint gets all the information we need and we're good to go page loads really fast it's",
    "start": "1017279",
    "end": "1023490"
  },
  {
    "text": "actually introducing new problem over here if I build a search view that needs to",
    "start": "1023490",
    "end": "1029250"
  },
  {
    "text": "that's rendering this information for a different form factor maybe it's a different browser maybe it's more mobile",
    "start": "1029250",
    "end": "1034620"
  },
  {
    "text": "app you know different interface where now we might now be getting fields that",
    "start": "1034620",
    "end": "1040020"
  },
  {
    "text": "are just unnecessary for that form factor right so let's say I was doing a voice assistant command which is calling",
    "start": "1040020",
    "end": "1045659"
  },
  {
    "text": "my endpoint and really the only thing the voice assistant cares about is just",
    "start": "1045659",
    "end": "1050970"
  },
  {
    "text": "read the titles of the books right where if it calls the same end point we're returning back you know item sub item",
    "start": "1050970",
    "end": "1057149"
  },
  {
    "text": "information and quantities and review information which it doesn't really care about or need to know about so what",
    "start": "1057149",
    "end": "1062940"
  },
  {
    "text": "we're doing now is we're wasting bandwidth and wasting compute because of the server side we're making all these calls which the client will",
    "start": "1062940",
    "end": "1068090"
  },
  {
    "text": "so throw away then right there's no point to the data so let's try and solve for that instead of having a separate",
    "start": "1068090",
    "end": "1077630"
  },
  {
    "text": "endpoint that returns app specific data actually why don't we just set up a",
    "start": "1077630",
    "end": "1083120"
  },
  {
    "text": "separate endpoint that returns specific data for that form-factor so you know for the voice assistant maybe we'll have a search two endpoint",
    "start": "1083120",
    "end": "1089750"
  },
  {
    "text": "that gives us back just the structure that this that this form factor needs",
    "start": "1089750",
    "end": "1094880"
  },
  {
    "text": "this voice command needs so you know instead of returning back information that was useful for the front end we've now got a second API which returns by",
    "start": "1094880",
    "end": "1102049"
  },
  {
    "text": "just the things that a form factor needs so this works but this is again isn't an ideal situation because what happens as",
    "start": "1102049",
    "end": "1109039"
  },
  {
    "text": "you evolve that application to the next version right your product manager comes in and says hey you know what over here",
    "start": "1109039",
    "end": "1114230"
  },
  {
    "text": "we actually want to display some more inventory information but you know we",
    "start": "1114230",
    "end": "1119630"
  },
  {
    "text": "have all these old clients out there that we can't really update so I probably need you to set up another",
    "start": "1119630",
    "end": "1125330"
  },
  {
    "text": "endpoint which is backwards compatible or whatever and then only new clients will call this and now you're stuck supporting multiple endpoints and this",
    "start": "1125330",
    "end": "1132620"
  },
  {
    "text": "problem grows as you expand across form factors and OS versions and whatnot because you'll end up with having many",
    "start": "1132620",
    "end": "1139549"
  },
  {
    "text": "endpoints all serving pretty much the same data but just returning back data in like slightly different shape and",
    "start": "1139549",
    "end": "1145730"
  },
  {
    "text": "different format that's specific to that platform and that version so with",
    "start": "1145730",
    "end": "1151159"
  },
  {
    "text": "existing technology you can't easily customize the data coming back from these endpoints without creating",
    "start": "1151159",
    "end": "1156169"
  },
  {
    "text": "wrappers or additional endpoints per type of app version platform you know as many combinations over there so this",
    "start": "1156169",
    "end": "1162860"
  },
  {
    "start": "1162000",
    "end": "1214000"
  },
  {
    "text": "problem is called over fetching because now what we're doing is we're turning back more data than any of those platforms need and this problem gets",
    "start": "1162860",
    "end": "1169130"
  },
  {
    "text": "worse as the application evolves so what we really want are three things we want",
    "start": "1169130",
    "end": "1176000"
  },
  {
    "text": "the ability to get access to this data through a single endpoint right so as the app increases as App scaled-up we",
    "start": "1176000",
    "end": "1183080"
  },
  {
    "text": "don't need to support multiple endpoints we want to get this information in single request and we want to get",
    "start": "1183080",
    "end": "1190549"
  },
  {
    "text": "exactly the fields that ask for right no matter what the version is I would just want to get just the fields I'm asking",
    "start": "1190549",
    "end": "1195950"
  },
  {
    "text": "for and let's turn this exact fetching because we what we're saying is a client",
    "start": "1195950",
    "end": "1201320"
  },
  {
    "text": "should be able to back exactly he wants four and the way to do this is let the Klein control the",
    "start": "1201320",
    "end": "1207389"
  },
  {
    "text": "shape of the response let the client say here's the fields I need just give me these fields and nothing more nothing less and that's the concept in the",
    "start": "1207389",
    "end": "1215129"
  },
  {
    "text": "philosophy behind graphical queries so that's why they're designed the way they are where you specify the action but you",
    "start": "1215129",
    "end": "1221549"
  },
  {
    "text": "also specify the list of fields that are coming back as a result of that query execution okay so so far what we've got",
    "start": "1221549",
    "end": "1229950"
  },
  {
    "text": "for graph QL is we've got a type system and we've got the ability to run queries which can you know get some data from",
    "start": "1229950",
    "end": "1236039"
  },
  {
    "text": "our back-end in the shape that a client expects but what about modifying some of",
    "start": "1236039",
    "end": "1242940"
  },
  {
    "text": "this data right you know so far we completely sold on queries and we set up a graphical back-end which can give us",
    "start": "1242940",
    "end": "1248999"
  },
  {
    "text": "just the information we need but then what if we have this kind of a use case",
    "start": "1248999",
    "end": "1254399"
  },
  {
    "text": "right there's probably like a review page where people that read the review can then mark it as a this is helpful",
    "start": "1254399",
    "end": "1259499"
  },
  {
    "text": "not helpful and we need to store this information and then we'll display it on that page as the counter increments so",
    "start": "1259499",
    "end": "1267749"
  },
  {
    "text": "again classic way you would do this is you probably make a post call when someone hits helpful or not call you",
    "start": "1267749",
    "end": "1273029"
  },
  {
    "text": "back and you would increment a counter over there and then your client runs a graph QL query which says okay now give",
    "start": "1273029",
    "end": "1280440"
  },
  {
    "text": "me the counter for all these reviews for this particular review and tell me which ones are helpful right the clients doing",
    "start": "1280440",
    "end": "1285779"
  },
  {
    "text": "the right thing it's making a query giving asking for just the field it needs I mean the server returns back exactly that field but we've gone back",
    "start": "1285779",
    "end": "1294269"
  },
  {
    "text": "to the same n plus one problem here we're making n plus 1 calls 2 calls right we're making a call which changes",
    "start": "1294269",
    "end": "1299639"
  },
  {
    "text": "state and then we make a follow-up call which we then use to get the result of that state so can we optimize here so",
    "start": "1299639",
    "end": "1308490"
  },
  {
    "text": "instead of making two calls what if we just made a single call here which which",
    "start": "1308490",
    "end": "1313799"
  },
  {
    "text": "graph Gil can handle the server can apply the the changes that the call expects and then runs the query that we",
    "start": "1313799",
    "end": "1320039"
  },
  {
    "text": "specify and gives us the fields back right so we've collapsed the the right operation the post and the query into a",
    "start": "1320039",
    "end": "1327509"
  },
  {
    "text": "single graph concept called mutation and this is what mutations are designed for what they do is they take your change",
    "start": "1327509",
    "end": "1334080"
  },
  {
    "start": "1330000",
    "end": "1502000"
  },
  {
    "text": "they'll apply your change and then they'll run the query you specify as part of the request and",
    "start": "1334080",
    "end": "1339179"
  },
  {
    "text": "return back the data within that same single request and there's one more use",
    "start": "1339179",
    "end": "1344279"
  },
  {
    "text": "case that's actually very relevant to modern apps right we want the ability for liveness to make the app look like",
    "start": "1344279",
    "end": "1350159"
  },
  {
    "text": "it's alive things are changing without us having to you know force the user to me to",
    "start": "1350159",
    "end": "1356940"
  },
  {
    "text": "explicitly request for any data out there so let's say you know on this again going back to the reviews widget",
    "start": "1356940",
    "end": "1363479"
  },
  {
    "text": "let's say we have a count of total number of reviews and stars and whatnot and we wanted this counter to increment",
    "start": "1363479",
    "end": "1368849"
  },
  {
    "text": "automatically any time anyone play changes you know the Stars or whatever",
    "start": "1368849",
    "end": "1375059"
  },
  {
    "text": "on that review so typical implementation would be you run a query and you wait",
    "start": "1375059",
    "end": "1380549"
  },
  {
    "text": "you run it again anyway and you run it again and you know we're good Internet",
    "start": "1380549",
    "end": "1386369"
  },
  {
    "text": "citizens so we implement exponential back-off and jitter and all the fun stuff and we wait again you know we keep",
    "start": "1386369",
    "end": "1391409"
  },
  {
    "text": "pulling right we continue pulling we make these requests using Roth girl queries and we do it over and over again",
    "start": "1391409",
    "end": "1398190"
  },
  {
    "text": "over a period of time you know basically forever while the app is alive because we want to know what the latest value is",
    "start": "1398190",
    "end": "1403889"
  },
  {
    "text": "for that little widget out there so in order to build this kind of liveness capability you end up pulling the",
    "start": "1403889",
    "end": "1409979"
  },
  {
    "text": "service which is not ideal because one your back-end service now needs to scale",
    "start": "1409979",
    "end": "1415379"
  },
  {
    "text": "to support all these poles if you have a million clients you know you'll have a million clients pulling every some",
    "start": "1415379",
    "end": "1421169"
  },
  {
    "text": "duration and your back it needs to be able to support all those poles right so that becomes a challenging problem both",
    "start": "1421169",
    "end": "1427049"
  },
  {
    "text": "from a scaling perspective as well from a cost perspective and it's not ideal for your app as well because now you're",
    "start": "1427049",
    "end": "1432779"
  },
  {
    "text": "draining battery every pole has a direct impact on battery life and you know again there's a bunch of studies out",
    "start": "1432779",
    "end": "1438659"
  },
  {
    "text": "there which prove that which which I've proven that you know if people detect that their apps are draining the battery",
    "start": "1438659",
    "end": "1444929"
  },
  {
    "text": "the app is gone like it's very hard to bring it back to the device so what",
    "start": "1444929",
    "end": "1450119"
  },
  {
    "text": "graph girl lets you do to solve this problem is it lets you subscribe to events in this case your Apple subscribe",
    "start": "1450119",
    "end": "1455580"
  },
  {
    "text": "events for that book to reviews for that book anytime and it specifies a query",
    "start": "1455580",
    "end": "1461489"
  },
  {
    "text": "saying anytime you know review changes give me back the set of fields for this particular review ID so the way it works",
    "start": "1461489",
    "end": "1468029"
  },
  {
    "text": "is typically sets up a persistent connection this could be WebSockets or HTTP 2 or whatever and then it tells the",
    "start": "1468029",
    "end": "1476130"
  },
  {
    "text": "server here's a query I want you to run whenever this state changes and so anytime there's a change to that review",
    "start": "1476130",
    "end": "1482550"
  },
  {
    "text": "that particular view with ID 1 2 3 so we will run that query saying ok here's a",
    "start": "1482550",
    "end": "1488370"
  },
  {
    "text": "count and rating that you want let me send them back to you and it sends adjust that payload or the wire to the client so this helps to maintain network",
    "start": "1488370",
    "end": "1496470"
  },
  {
    "text": "efficiency right because you're only the server's only sending the fields or the client needs for that particular view again and that's why there are graphical",
    "start": "1496470",
    "end": "1504810"
  },
  {
    "start": "1502000",
    "end": "1623000"
  },
  {
    "text": "subscriptions so these are the 4 capabilities these are the four core capabilities that make up the graphical",
    "start": "1504810",
    "end": "1510390"
  },
  {
    "text": "specification you have a type system you have queries for reading you have mutations for writing and you have",
    "start": "1510390",
    "end": "1515640"
  },
  {
    "text": "subscriptions for listening to data so are you a question",
    "start": "1515640",
    "end": "1521269"
  },
  {
    "text": "yeah so the question is can you do a test and set so a mutation only defines writing the implementations up to you",
    "start": "1532970",
    "end": "1540570"
  },
  {
    "text": "we'll get to that later in the presentation yeah the test inside will really depend on your back-end data",
    "start": "1540570",
    "end": "1546000"
  },
  {
    "text": "source right if it's no sequel if it's DynamoDB or these atomic counters was relational store you probably do a",
    "start": "1546000",
    "end": "1551490"
  },
  {
    "text": "transactional update or something in that case again that's your",
    "start": "1551490",
    "end": "1558450"
  },
  {
    "text": "implementation the mutation doesn't care it just says here's the right here's a right behavior I'm gonna execute the",
    "start": "1558450",
    "end": "1564000"
  },
  {
    "text": "right behavior",
    "start": "1564000",
    "end": "1566540"
  },
  {
    "text": "yeah so that's a good question the question is you know if I have that many open WebSocket connections don't I need",
    "start": "1584810",
    "end": "1590900"
  },
  {
    "text": "to scale my hardware as well you probably will because depends on how many connections a single host can",
    "start": "1590900",
    "end": "1596120"
  },
  {
    "text": "handle your going to be physical there's physics away are gonna be bound by physics right and the discussion really",
    "start": "1596120",
    "end": "1603560"
  },
  {
    "text": "comes down the tradeoff really is you know is polling more efficient from a cost perspective and from a user",
    "start": "1603560",
    "end": "1610100"
  },
  {
    "text": "experience perspective compared to having a persistent connection that you can use to push updates down cool let's",
    "start": "1610100",
    "end": "1618830"
  },
  {
    "text": "move on good questions we'll pause again in a little bit for more questions okay so",
    "start": "1618830",
    "end": "1624440"
  },
  {
    "start": "1623000",
    "end": "1703000"
  },
  {
    "text": "wrapping up above the graphical specifications it was released in about 2015 as a specification not as an",
    "start": "1624440",
    "end": "1629510"
  },
  {
    "text": "implementation and a couple of things in the specification were very interesting one is it did not actually define the",
    "start": "1629510",
    "end": "1637640"
  },
  {
    "text": "protocol that the graphical will be implemented over so the most common",
    "start": "1637640",
    "end": "1642740"
  },
  {
    "text": "implementations over HTTP but you know those implementations out there that run on WebSockets I've actually seen one",
    "start": "1642740",
    "end": "1648620"
  },
  {
    "text": "running on USB which seemed pretty cool the other thing the specification did not talk about was the actual wire",
    "start": "1648620",
    "end": "1655940"
  },
  {
    "text": "format so you can get implement a wire format over JSON or protobufs or XML or you know whatever you want again the",
    "start": "1655940",
    "end": "1662930"
  },
  {
    "text": "most common implementations are JSON based but you know it's fairly easy to swap the wire protocol for any of these",
    "start": "1662930",
    "end": "1670070"
  },
  {
    "text": "for any of these graphical engines the cool thing about the specification was",
    "start": "1670070",
    "end": "1675110"
  },
  {
    "text": "because you know anyone could implement a server and a client that could interrupt with each other so you know",
    "start": "1675110",
    "end": "1680540"
  },
  {
    "text": "you could have a Java client talking to a ruby backhand or you could have a c-sharp client talking to a Python",
    "start": "1680540",
    "end": "1686450"
  },
  {
    "text": "back-end and you know everything would just work as long as they follow the specification so this was pretty",
    "start": "1686450",
    "end": "1691700"
  },
  {
    "text": "intriguing to a lot of companies because especially because they were scaling up and they were scaling out their micro",
    "start": "1691700",
    "end": "1697490"
  },
  {
    "text": "service backends and hence it gained momentum and adoption as a viable approach for implementing your API so",
    "start": "1697490",
    "end": "1704830"
  },
  {
    "start": "1703000",
    "end": "1744000"
  },
  {
    "text": "summarize the features of graph QL it's a strong type it's a strong type",
    "start": "1704830",
    "end": "1709850"
  },
  {
    "text": "specification so you can have you have a type system because it's strong type which you can use to represent entities",
    "start": "1709850",
    "end": "1716750"
  },
  {
    "text": "and operations it machine-readable because of which you can build tooling and cogeneration",
    "start": "1716750",
    "end": "1722359"
  },
  {
    "text": "capabilities using the introspection it has queries mutation that's the predictions for reading writing and for",
    "start": "1722359",
    "end": "1728210"
  },
  {
    "text": "listening to data its transport agnostic so you can implement it whatever protocol you want",
    "start": "1728210",
    "end": "1733909"
  },
  {
    "text": "and finally the client specifies the shape of the response which makes it very efficient over the wire because it",
    "start": "1733909",
    "end": "1739999"
  },
  {
    "text": "only sends the bits that it needs to do the client requests over the wire all",
    "start": "1739999",
    "end": "1746299"
  },
  {
    "text": "right so look at what graph QL is so let's look at how we can build a graphical API for this online bookstore",
    "start": "1746299",
    "end": "1752869"
  },
  {
    "text": "we've been talking about so setting up the problem again right we have",
    "start": "1752869",
    "end": "1758570"
  },
  {
    "text": "customers who are accessing our bookstore from various devices there's desktop apps there's skills there's",
    "start": "1758570",
    "end": "1764989"
  },
  {
    "text": "mobile apps and the data is coming from a whole bunch of services in the backend the scale may ask you know all it really",
    "start": "1764989",
    "end": "1773119"
  },
  {
    "text": "needs is a question like hey is this book available you know that's a very simple question all it needs is a simple",
    "start": "1773119",
    "end": "1779479"
  },
  {
    "text": "answer back here but your desktop application might be a little more full-featured it can do searches you can view reviews",
    "start": "1779479",
    "end": "1785869"
  },
  {
    "text": "it may have admin functionality where someone can manage inventory or manage reviews you know for admin users and",
    "start": "1785869",
    "end": "1793909"
  },
  {
    "text": "your mobile app might be more consumer facing right you can only search for books and view reviews so fairly limited in scope so let's build a graphical API",
    "start": "1793909",
    "end": "1801229"
  },
  {
    "text": "so that each of these clients can use to just get the data they want so start",
    "start": "1801229",
    "end": "1807200"
  },
  {
    "text": "with the no sequel table the dynamodb table for example this is kind of the structure you know we're using the model",
    "start": "1807200",
    "end": "1813559"
  },
  {
    "text": "of books right we have an ID which is unique for the book we have a title we have an author probably have a date",
    "start": "1813559",
    "end": "1819889"
  },
  {
    "text": "created so in graph Gale the way you would model this is with a type and we would call it type book which is our",
    "start": "1819889",
    "end": "1825739"
  },
  {
    "text": "book entity in this case the type is the identifier for this kind of this entity",
    "start": "1825739",
    "end": "1831889"
  },
  {
    "text": "we're defining on graph QL and the name is the book so you have the identifier and you have the name of that whatever",
    "start": "1831889",
    "end": "1838549"
  },
  {
    "text": "that energy is and then we have the unique identifier UID let's add that as the first field in here the capital ID",
    "start": "1838549",
    "end": "1846499"
  },
  {
    "text": "is a concept in graph QL that means this is a unique identifier",
    "start": "1846499",
    "end": "1851590"
  },
  {
    "text": "ultimately it results in a string this is useful from a cogeneration point of view because your tools can go okay I",
    "start": "1851590",
    "end": "1857409"
  },
  {
    "text": "know this is an identifier it's a pretty well-known convention to mark ident",
    "start": "1857409",
    "end": "1864549"
  },
  {
    "text": "identity fields with a cap ID the UID is called the field in this case so you",
    "start": "1864549",
    "end": "1870070"
  },
  {
    "text": "keep adding a bunch of fuels here and then the type of the field is the ID in this case so looking at this looking at",
    "start": "1870070",
    "end": "1878919"
  },
  {
    "text": "this slide there's a couple of things here one is you know you see the things within the curly braces so if you can",
    "start": "1878919",
    "end": "1884169"
  },
  {
    "text": "define these curly braces and here subfields in there then it's an entity or an object but if you cannot have",
    "start": "1884169",
    "end": "1890009"
  },
  {
    "text": "subfields within a type then it's a scaler so the ID doesn't have anything below it so it becomes a scalar okay so",
    "start": "1890009",
    "end": "1898600"
  },
  {
    "text": "we have a bunch of other fields here we have title and author we add those to our type as well the Creator is really",
    "start": "1898600",
    "end": "1904029"
  },
  {
    "text": "useful only from a data store perspective we don't really need to surface it to user so let's not add it",
    "start": "1904029",
    "end": "1910049"
  },
  {
    "text": "and so that's our book entity that's coming from one or sequel store",
    "start": "1910049",
    "end": "1915549"
  },
  {
    "text": "so now let's model it for the reviews which is coming from some kind of a third party API there's some JSON that's coming back we can model it similarly",
    "start": "1915549",
    "end": "1922210"
  },
  {
    "text": "you know with ID ID stars and text and the UID will refer to the book ID",
    "start": "1922210",
    "end": "1929249"
  },
  {
    "text": "similarly inventory table you know all we have is ID and quantity right and the",
    "start": "1929249",
    "end": "1934720"
  },
  {
    "text": "only thing we need in this inventory type is the UID which references the book and then we have quantity which is a total number of instances of that book",
    "start": "1934720",
    "end": "1941379"
  },
  {
    "text": "of the elbow all right so now what we've got is we've got our three entities that represent the three different data",
    "start": "1941379",
    "end": "1947980"
  },
  {
    "text": "sources we have throughout the book we've got the review we've got the inventory and they have fields that map",
    "start": "1947980",
    "end": "1953440"
  },
  {
    "text": "to whatever you know the underlying data sources so this gives us a abstraction",
    "start": "1953440",
    "end": "1960879"
  },
  {
    "text": "over the downstream data sources but this is not a complete view yet because what we have in model is the",
    "start": "1960879",
    "end": "1966070"
  },
  {
    "text": "relationships right the book has a relationship to reviews there's a and",
    "start": "1966070",
    "end": "1971139"
  },
  {
    "text": "there's a relationship to inventory so there's a one to one from book to inventory and there's a one-to-many relationship from the book to the",
    "start": "1971139",
    "end": "1977259"
  },
  {
    "text": "reviews so let's see how we can model n to model the one-to-many we just add a reviews field and then we're saying",
    "start": "1977259",
    "end": "1984909"
  },
  {
    "text": "is the type for that field is a collection of reviews the square brackets means this is a list of reviews",
    "start": "1984909",
    "end": "1991419"
  },
  {
    "text": "coming back and the reviews define is a type similarly if it's a one-to-one we're saying hey there's picking me only",
    "start": "1991419",
    "end": "1997269"
  },
  {
    "text": "be one record in the inventory so you define inventory field and then we say that type of that is the inventory you",
    "start": "1997269",
    "end": "2003269"
  },
  {
    "text": "know graphical type that specific entity and so now we've model a one-to-one relationship right so it's pretty easy",
    "start": "2003269",
    "end": "2008999"
  },
  {
    "text": "to model one-to-one or one-to-many relationships you would just do them as fields within your type",
    "start": "2008999",
    "end": "2016849"
  },
  {
    "start": "2016000",
    "end": "2340000"
  },
  {
    "text": "so once we've got the type yep sorry question type names within the schema",
    "start": "2016849",
    "end": "2024779"
  },
  {
    "text": "have to be unique yes the fields within a type don't have to be unique across different types so I can have an ID and",
    "start": "2024779",
    "end": "2031169"
  },
  {
    "text": "many different types in the same schema okay so we've got a type system let's",
    "start": "2031169",
    "end": "2036840"
  },
  {
    "text": "see how we can read this data how do we define these queries so remember everything in graph kills our type so in",
    "start": "2036840",
    "end": "2043769"
  },
  {
    "text": "order to define your queries you would define a query type in this case let's call it my query we've got a couple of",
    "start": "2043769",
    "end": "2049260"
  },
  {
    "text": "operations here we've got search which we use to pass in the keyword so we get a list of books back the result is the",
    "start": "2049260",
    "end": "2055260"
  },
  {
    "text": "square bracket book which means I'm going to expecting a list back and then I have a get book where I can pass in",
    "start": "2055260",
    "end": "2061289"
  },
  {
    "text": "the book ID and just get a specific book back and the way my client would invoke",
    "start": "2061289",
    "end": "2067648"
  },
  {
    "text": "this query is you know it says search it passes in whatever the keyword is it says I only want you ID and title and",
    "start": "2067649",
    "end": "2074730"
  },
  {
    "text": "it'll get just those fields back and so the server gets this query goes okay cool you're just asking for these two",
    "start": "2074730",
    "end": "2080220"
  },
  {
    "text": "fields I'm only going to get the values for this fields and return them back to you so one thing to notice over here is you know the book had a whole bunch of",
    "start": "2080220",
    "end": "2086908"
  },
  {
    "text": "fields right it had author and reviews and inventory as well this client doesn't care about those fields all it",
    "start": "2086909",
    "end": "2092608"
  },
  {
    "text": "really wants is the ID in the title so it only asks yd and title and the server will return back only the ID and the",
    "start": "2092609",
    "end": "2098309"
  },
  {
    "text": "title",
    "start": "2098309",
    "end": "2100670"
  },
  {
    "text": "we'll get to that hold that question cool so it's almost like you saw much",
    "start": "2104060",
    "end": "2110910"
  },
  {
    "text": "lights previously it's almost like you've seen my presentation cool all",
    "start": "2110910",
    "end": "2118620"
  },
  {
    "text": "right so let's look at it another case is another query which is a get booked which is getting back a specific field in this case we want to get a little",
    "start": "2118620",
    "end": "2125220"
  },
  {
    "text": "more information because we might be on like a detailed page or something so for reviews we want to get you know here give me the identifiers give me the",
    "start": "2125220",
    "end": "2132140"
  },
  {
    "text": "you know whatever the review text is give me the number of stars and for inventory give me the quantity if you",
    "start": "2132140",
    "end": "2138450"
  },
  {
    "text": "look in the left hand side you know these types also have these UID fields which refer to books right but in this case we're getting all this information",
    "start": "2138450",
    "end": "2144390"
  },
  {
    "text": "within the same query so getting that UID in three different places is redundant it's just it's wasting",
    "start": "2144390",
    "end": "2150510"
  },
  {
    "text": "bandwidth so we don't need to ask for it and the server will not return that value for us so we'll just get back",
    "start": "2150510",
    "end": "2157290"
  },
  {
    "text": "again the fields we expect in this case okay so that's kind of how queries work now if we want to write data we're",
    "start": "2157290",
    "end": "2163980"
  },
  {
    "text": "defining a mutation again define a type and let's say we have an operation to add a star to review we're specifying",
    "start": "2163980",
    "end": "2172050"
  },
  {
    "text": "the number of stars so again this works very similarly how queries work ultimately everything in graph kill is",
    "start": "2172050",
    "end": "2177900"
  },
  {
    "text": "actually a query like the way the runtime works is everything is defined as a query it's just the keywords the",
    "start": "2177900",
    "end": "2183540"
  },
  {
    "text": "query of the mutation keyword that tells you whether this is read only or read write or you know if the subscription so",
    "start": "2183540",
    "end": "2189860"
  },
  {
    "text": "ad start again what we're saying is add one more star to this review and giving back the number of stars server just",
    "start": "2189860",
    "end": "2196050"
  },
  {
    "text": "runs that one change and give you back just the field you expect and then for listening for data again",
    "start": "2196050",
    "end": "2202620"
  },
  {
    "text": "define a type for subscriptions in this case what we care about is I want to listen to any reviews that are added to",
    "start": "2202620",
    "end": "2210720"
  },
  {
    "text": "this particular book and I want to get back to the view object so the client in this case will issue a query saying okay",
    "start": "2210720",
    "end": "2217170"
  },
  {
    "text": "I am interested in reviews for book ID a one two three and I only want ID I want",
    "start": "2217170",
    "end": "2222990"
  },
  {
    "text": "the review ID and I want a number of stars back and then it goes and establishes this long-lived persistent",
    "start": "2222990",
    "end": "2229500"
  },
  {
    "text": "connection to your graph given point and so the server does anytime a review is",
    "start": "2229500",
    "end": "2234960"
  },
  {
    "text": "changed for that but or ID four for book ID one two three it'll run that query saying okay I just",
    "start": "2234960",
    "end": "2241750"
  },
  {
    "text": "want ID and review ID and stars whatever they are and it'll return them back has a single payload back to the client so",
    "start": "2241750",
    "end": "2248380"
  },
  {
    "text": "in this case we'll have two messages because there's probably two reviews based on that book okay so we put all",
    "start": "2248380",
    "end": "2255460"
  },
  {
    "text": "these together right we've got our type system and we've got our queries mutations and subscriptions again",
    "start": "2255460",
    "end": "2261250"
  },
  {
    "text": "modulus types and this whole collection of types and queries and operations are",
    "start": "2261250",
    "end": "2268720"
  },
  {
    "text": "gonna invoke this is expressed in graph kill using what's called a schema definition language which is also you'll",
    "start": "2268720",
    "end": "2276040"
  },
  {
    "text": "hear SDL a lot the abbreviation for schema definition language so this the",
    "start": "2276040",
    "end": "2281920"
  },
  {
    "text": "SDL is the complete machine readable description of these entities that make up your graph killed api and the",
    "start": "2281920",
    "end": "2287950"
  },
  {
    "text": "operations that can be invoked on your api is this schema element the thing that's highlighted in blue this is where",
    "start": "2287950",
    "end": "2294820"
  },
  {
    "text": "you describe if the operation or that type actually is a query or a mutation or subscription and that's what the",
    "start": "2294820",
    "end": "2301330"
  },
  {
    "text": "runtime uses to go oh cool you know what everything in here should be read only by convention or everything under this",
    "start": "2301330",
    "end": "2307330"
  },
  {
    "text": "mutation should be read right by convention everything in the subscription means there's a listener in",
    "start": "2307330",
    "end": "2313000"
  },
  {
    "text": "there somewhere so these these are the schema element forms the root of your graphical object",
    "start": "2313000",
    "end": "2319420"
  },
  {
    "text": "graph and so that's how the wrong time figures out you know what type of operation you're trying to execute when",
    "start": "2319420",
    "end": "2324790"
  },
  {
    "text": "you actually make that query to the server okay so you take a schema so",
    "start": "2324790",
    "end": "2330430"
  },
  {
    "text": "we've modular types and model operations we applied into a graphical endpoint and you know we should be good at this point",
    "start": "2330430",
    "end": "2337000"
  },
  {
    "text": "right we've got a functioning graphical API well not quite I think I know what",
    "start": "2337000",
    "end": "2344380"
  },
  {
    "text": "you're gonna ask but not quite how does the runtime actually know like you know what like how are these queries executor",
    "start": "2344380",
    "end": "2351730"
  },
  {
    "text": "right so if I actually say search book how does it know that you know there's",
    "start": "2351730",
    "end": "2357250"
  },
  {
    "text": "this book store in DynamoDB and there's this data coming from this relational",
    "start": "2357250",
    "end": "2362320"
  },
  {
    "text": "table so let's take a little bit into that and see how that works so when I",
    "start": "2362320",
    "end": "2367870"
  },
  {
    "text": "when I issue this get book query with a specific ID a runtime meets some",
    "start": "2367870",
    "end": "2373540"
  },
  {
    "text": "way to figure out like you know this data is coming from a DynamoDB table the way you actually express that the way",
    "start": "2373540",
    "end": "2379660"
  },
  {
    "text": "you provide that information to the runtime is through what's called a resolver think of it as a function that",
    "start": "2379660",
    "end": "2385870"
  },
  {
    "text": "you write it's actually code that you write so what you do is you provide a resolver to the runtime and you say",
    "start": "2385870",
    "end": "2392080"
  },
  {
    "text": "whenever someone's requesting this field or trying to run this query or this operation here's the code I want you to",
    "start": "2392080",
    "end": "2399100"
  },
  {
    "text": "run which gives which knows how to interact with the downstream data source gets whatever data it needs and then the",
    "start": "2399100",
    "end": "2404950"
  },
  {
    "text": "runtime goes okay cool I got this let me transform this over to whatever the graph Gil is and I'll give you back just",
    "start": "2404950",
    "end": "2410470"
  },
  {
    "text": "the information you need so the resolver is implemented it's you know it's code in any language you prefer you write",
    "start": "2410470",
    "end": "2416550"
  },
  {
    "text": "this is actually where graph killed the first four more M's because what or arms or object relational mapper so they try",
    "start": "2416550",
    "end": "2422260"
  },
  {
    "text": "and do is you'll define you ended your domain as a you know as a bunch of domain objects and then it does whatever",
    "start": "2422260",
    "end": "2428620"
  },
  {
    "text": "to generate sequel for you that will then execute write graph doesn't generate any sequel or any downstream",
    "start": "2428620",
    "end": "2433960"
  },
  {
    "text": "operations for you that's completely up to you you get to implement as you want if you know for here for example if you",
    "start": "2433960",
    "end": "2440740"
  },
  {
    "text": "wanted your batching you could implement this as a batch operation instead of a single operation so you're in complete control of what actually does get",
    "start": "2440740",
    "end": "2447430"
  },
  {
    "text": "executed by a graphical runtime so to answer your question",
    "start": "2447430",
    "end": "2454230"
  },
  {
    "text": "yeah so your question is you know I guess it's really what does the SEMA kind of map to right so yeah",
    "start": "2480579",
    "end": "2491140"
  },
  {
    "text": "the schema is not a Southern point it's actually the the the types is the types and the operations that endpoint",
    "start": "2491140",
    "end": "2498459"
  },
  {
    "text": "supports so if you're familiar with the rest you know write a Swaggart document typically right which has you know like",
    "start": "2498459",
    "end": "2504609"
  },
  {
    "text": "slash post or whatever the endpoint might be in this case let's say we probably have a slash books endpoint it's not modeling it as a bunch of",
    "start": "2504609",
    "end": "2511029"
  },
  {
    "text": "resources independent resources you model your API as types you have the",
    "start": "2511029",
    "end": "2516489"
  },
  {
    "text": "relationship between the types like books and reviews and inventory that's the relationship you model and then you're saying here's an operation I can",
    "start": "2516489",
    "end": "2522670"
  },
  {
    "text": "perform across this graph which is search is I'm quitting the graph or I'm calling get book with a particular ID",
    "start": "2522670",
    "end": "2529929"
  },
  {
    "text": "which is going to return back a specific node in the graph for me so that's that's kind of you want to think about graphically well",
    "start": "2529929",
    "end": "2537209"
  },
  {
    "text": "yeah that's that's a good way to think about it yeah well well I think we'll probably probably get a little more",
    "start": "2568160",
    "end": "2574610"
  },
  {
    "text": "clear once we actually look at an actual schema and build one so hold on till we get there it's it's supposed to be the",
    "start": "2574610",
    "end": "2581060"
  },
  {
    "text": "next session but I'm gonna see if we can actually build one really quickly as part of this talk as well okay yeah",
    "start": "2581060",
    "end": "2590109"
  },
  {
    "text": "there can be multiple tables yes it's up to you and how you implement the resolver it's ultimately a function so",
    "start": "2593350",
    "end": "2604760"
  },
  {
    "text": "if there are multiple parameters you define the signature of the method what needs to be passed in and you can modify",
    "start": "2604760",
    "end": "2611150"
  },
  {
    "text": "your schema to pass in the fields on the outbound side you have to adhere to what the runtime would expect from a contract",
    "start": "2611150",
    "end": "2617210"
  },
  {
    "text": "perspective right if you're saying multiple values are coming back you can make sure they come back in a format that one time can understand okay so",
    "start": "2617210",
    "end": "2625610"
  },
  {
    "text": "let's dig into this schema really quickly so you know we we wrote this The Sketchbook resolver which knows how to",
    "start": "2625610",
    "end": "2631190"
  },
  {
    "text": "talk to dynamo it's a single ID in this case we'll attach it to this field in",
    "start": "2631190",
    "end": "2636530"
  },
  {
    "text": "graph key all the way you attach resolvers to fields really ultimately it reduces down to a dictionary somewhere as a type and field and the values",
    "start": "2636530",
    "end": "2646360"
  },
  {
    "text": "attach it to it so now we runtime knows whenever I call get book this is the resolver needs to run which knows how to",
    "start": "2646360",
    "end": "2653000"
  },
  {
    "text": "talk to dynamo DB and get some results back and so that's how it was oliver's would work in this case there's a couple",
    "start": "2653000",
    "end": "2659570"
  },
  {
    "text": "of the fields in book right we had reviews an inventory which weren't coming from the dynamo DB table so reviews came from this HTTP endpoint and",
    "start": "2659570",
    "end": "2667820"
  },
  {
    "text": "inventory came from a relational database obviously if I call get book and talk to dynamo DB we're not gonna",
    "start": "2667820",
    "end": "2674810"
  },
  {
    "text": "get any values back for those fields so the way we solved for that is we create resolvers for each of these fields as",
    "start": "2674810",
    "end": "2681230"
  },
  {
    "text": "well so the Creator get reviews resolver that knows how they're talking HTTP attach it to this field similarly we'll",
    "start": "2681230",
    "end": "2687200"
  },
  {
    "text": "create an inventory resolver that knows how to talk relational attach it to the inventory field so now whenever I should",
    "start": "2687200",
    "end": "2693530"
  },
  {
    "text": "make a book query the runtime will know okay I need to run these resolvers and I",
    "start": "2693530",
    "end": "2698720"
  },
  {
    "text": "need to get this data back for you so resolvers can be attached to any field in graph QL not just the operation",
    "start": "2698720",
    "end": "2705650"
  },
  {
    "text": "types you define so it's not just on the get book you can actually have these fields on like these resolvers on fields",
    "start": "2705650",
    "end": "2711590"
  },
  {
    "text": "within a type as well which makes it pretty powerful because they actually override behaviors without having to",
    "start": "2711590",
    "end": "2717500"
  },
  {
    "text": "change your clients or change the structure of your schema or whatever so the key takeaway I think is remembered",
    "start": "2717500",
    "end": "2723260"
  },
  {
    "text": "every field every field in graph QL is a function as an it's a resolver you can",
    "start": "2723260",
    "end": "2729020"
  },
  {
    "text": "attach behaviors and code to any field to override any behaviors anywhere at any point in time in the in the",
    "start": "2729020",
    "end": "2734869"
  },
  {
    "text": "graphical runtime so this is digging a little deep into how the graph QL engine",
    "start": "2734869",
    "end": "2741500"
  },
  {
    "start": "2737000",
    "end": "2965000"
  },
  {
    "text": "actually execute queries this is a very simplified view but hopefully this will",
    "start": "2741500",
    "end": "2746540"
  },
  {
    "text": "kind of illustrate the point and you know you guys will understand how these things actually work so when I call get book I'm saying here's a bunch of fields",
    "start": "2746540",
    "end": "2753200"
  },
  {
    "text": "that I want right I'm saying I want you ID I want title and 1 reviews which has its own subset of fields and when",
    "start": "2753200",
    "end": "2758960"
  },
  {
    "text": "inventory which has a quantity coming back so what the runtime does is when it",
    "start": "2758960",
    "end": "2764060"
  },
  {
    "text": "gets this query it actually constructs what's called an abstract syntax tree a tree and it goes okay let's get book is",
    "start": "2764060",
    "end": "2771050"
  },
  {
    "text": "a bunch of fields at the same level so ID title reviews and inventory at the same level and then it goes down to the",
    "start": "2771050",
    "end": "2778100"
  },
  {
    "text": "next level and adds them to the node list and you know it goes down as your queries get deeper so when you actually",
    "start": "2778100",
    "end": "2784250"
  },
  {
    "text": "call get book the runtime goes okay this field of the top level you know what there's a result where it hatch so it",
    "start": "2784250",
    "end": "2789710"
  },
  {
    "text": "called get book resolver so I'm gonna run it get whatever data comes back I'm not going to return it back to the",
    "start": "2789710",
    "end": "2795500"
  },
  {
    "text": "client yet because I have all these other levels to resolve and then it moves down to the next level and then it",
    "start": "2795500",
    "end": "2801830"
  },
  {
    "text": "goes okay UID and title don't have any resolvers on them so if I got the values from get book resolver there's a mapping",
    "start": "2801830",
    "end": "2808130"
  },
  {
    "text": "it has and we'll just attach a scientist now at least through these fields but it goes to inventory and goes you know what",
    "start": "2808130",
    "end": "2813440"
  },
  {
    "text": "I have a get inventory resolver here that's getting data from a relational database so let me run that resolver gets whatever data it needs it's holding",
    "start": "2813440",
    "end": "2821660"
  },
  {
    "text": "on to the data at this point it goes to reviews you know gets that data as well and then it moves down to the next level",
    "start": "2821660",
    "end": "2829490"
  },
  {
    "text": "and it goes okay now here's some fields I mean it looks at all of them so it gets the values from the previous",
    "start": "2829490",
    "end": "2834860"
  },
  {
    "text": "level at assigns it to them and now that the entire query is complete all fields have been resolved it'll return back the",
    "start": "2834860",
    "end": "2841850"
  },
  {
    "text": "result for this get book query as part of that book object it what it does is",
    "start": "2841850",
    "end": "2848150"
  },
  {
    "text": "it actually runs the resolvers on all fields at the same level in parallel so forget book it would run get book",
    "start": "2848150",
    "end": "2855110"
  },
  {
    "text": "resolver then it goes down to the next level and it goes inventory and reviews both have resolvers on them so I'm going",
    "start": "2855110",
    "end": "2861140"
  },
  {
    "text": "to run them in parallel and then it goes down to the third level and goes there's no resolvers over here which also means",
    "start": "2861140",
    "end": "2866750"
  },
  {
    "text": "you know I've run all the resolvers which are null resolvers in parallel gets all the results back so that's one",
    "start": "2866750",
    "end": "2872090"
  },
  {
    "text": "difference between queries and mutations for queries that can run the resolvers and fields in parallel for mutations it",
    "start": "2872090",
    "end": "2877940"
  },
  {
    "text": "runs them sequentially except thing to keep in mind it's it's a top-down",
    "start": "2877940",
    "end": "2887420"
  },
  {
    "text": "pipeline yeah but one more thing to keep in mind here is you know it ran all it",
    "start": "2887420",
    "end": "2892520"
  },
  {
    "text": "ran there is also all these fields right but if we hadn't requested inventory and reviews your ast reduces down to just",
    "start": "2892520",
    "end": "2898910"
  },
  {
    "text": "get book UID and title right so on the server side the server is not doing any more work it doesn't need to go talk to",
    "start": "2898910",
    "end": "2905060"
  },
  {
    "text": "inventory resolver it's just doing a compute for that get bulk field and just calling dynamo DB so again this is cool",
    "start": "2905060",
    "end": "2911510"
  },
  {
    "text": "because you're saving compute on the server side you're not actually trying to get data for fields that you won't",
    "start": "2911510",
    "end": "2916640"
  },
  {
    "text": "need and you won't care about ok so now this this is a complete representation",
    "start": "2916640",
    "end": "2922670"
  },
  {
    "text": "of my graphical endpoint I've got my schema which defines my types I've got my operations I've got my resolvers",
    "start": "2922670",
    "end": "2929300"
  },
  {
    "text": "attached to the fields that I care about which know how to talk to the downstream data sources and now my clients can",
    "start": "2929300",
    "end": "2935180"
  },
  {
    "text": "abstract away you know the complexity of the backend and they can just talk graph",
    "start": "2935180",
    "end": "2940490"
  },
  {
    "text": "QL all my server now knows how to get the data from all these different fields and so you know we've talked about",
    "start": "2940490",
    "end": "2946730"
  },
  {
    "text": "building yet book over here we had a bunch of other operations we had search we had the mutations please for you guys",
    "start": "2946730",
    "end": "2954050"
  },
  {
    "text": "I guess build it as part of homework and when you get your feedback request send it to me and I'll grade you and then you know the best person will win a piece of",
    "start": "2954050",
    "end": "2961490"
  },
  {
    "text": "candy I guess all right so pretty exciting right graph",
    "start": "2961490",
    "end": "2969660"
  },
  {
    "start": "2965000",
    "end": "3150000"
  },
  {
    "text": "kill seems cool anyone going to jump over and use it now question",
    "start": "2969660",
    "end": "2977450"
  },
  {
    "text": "yeah so your question is the photos get books right which is actually the search call that I had in that case the",
    "start": "2998130",
    "end": "3004910"
  },
  {
    "text": "expectation would be that my resolve of the implementation I had would handle a",
    "start": "3004910",
    "end": "3010609"
  },
  {
    "text": "batch of IDs or something coming in and I would go talk to my downstream correct",
    "start": "3010609",
    "end": "3022509"
  },
  {
    "text": "yeah so you would model that in a schema somehow there's a more advanced concept called batching and data loader",
    "start": "3022509",
    "end": "3027769"
  },
  {
    "text": "specifically data loader will is what will actually help the runtime batch these calls as well to the downstream I",
    "start": "3027769",
    "end": "3033559"
  },
  {
    "text": "can talk to you more offline is actually a fairly advanced concept for this talk",
    "start": "3033559",
    "end": "3038319"
  },
  {
    "text": "yep a lot of it comes down to how you model your schema because you can tweak the behavior of the runtime by having",
    "start": "3057760",
    "end": "3063780"
  },
  {
    "text": "nested queries versus same level queries and you know you can use that optimize how your queries work in that case",
    "start": "3063780",
    "end": "3071549"
  },
  {
    "text": "question all that question that's a very",
    "start": "3089940",
    "end": "3097890"
  },
  {
    "text": "controversial question all right so let's first talk about you know running graph kill right let's say you want to",
    "start": "3097890",
    "end": "3104190"
  },
  {
    "text": "run graph here they're pretty excited about some of the capabilities it has so",
    "start": "3104190",
    "end": "3109910"
  },
  {
    "text": "obviously the question is you know do I run my own because it's pretty easy to pick one of these graph kill run times",
    "start": "3109910",
    "end": "3115800"
  },
  {
    "text": "and run them yourself so I think the main thing to think about here is if",
    "start": "3115800",
    "end": "3121830"
  },
  {
    "text": "you're planning to run it yourself there's a whole bunch of things you have to deal with from a operations",
    "start": "3121830",
    "end": "3127290"
  },
  {
    "text": "perspective right there's a if you're running in some servers and on whatever the server might be if you deal with",
    "start": "3127290",
    "end": "3132930"
  },
  {
    "text": "installing patching configuration of the servers deployments if you think about",
    "start": "3132930",
    "end": "3138599"
  },
  {
    "text": "high availability and scaling you know as you scale up for traffic scale down when traffic goes away there's a lot of",
    "start": "3138599",
    "end": "3144330"
  },
  {
    "text": "like undifferentiated heavy lifting over here right there's a few other considerations when you're running your own graphical server these are specific",
    "start": "3144330",
    "end": "3150150"
  },
  {
    "text": "to graph q ow first one is security now standard practices we do endpoint level security",
    "start": "3150150",
    "end": "3156210"
  },
  {
    "text": "right can I call an endpoint or not but graph kill has this concept of resolvers as well right this is what the actual",
    "start": "3156210",
    "end": "3162030"
  },
  {
    "text": "code lives in runs that talks to your data sources so how do you implement security add videos all the level",
    "start": "3162030",
    "end": "3168540"
  },
  {
    "text": "especially cause it's executing as a graph and you could nest fields you know like if you're doing a friend friend",
    "start": "3168540",
    "end": "3174270"
  },
  {
    "text": "friend list how do you guarantee that you know you don't accidentally have",
    "start": "3174270",
    "end": "3179700"
  },
  {
    "text": "some kind of a loophole where someone I shouldn't see a friend is able to get access to a friend so that becomes a",
    "start": "3179700",
    "end": "3185700"
  },
  {
    "text": "very complex thing to solve within graphic a well the other is the concept of what's called partial fulfillment",
    "start": "3185700",
    "end": "3192619"
  },
  {
    "text": "from a graphical engine perspective you return back a bunch of fields but you know for whatever reason if you as a",
    "start": "3192619",
    "end": "3199260"
  },
  {
    "text": "caller cannot get the data for that field you get a null value back well you should get a null value back so",
    "start": "3199260",
    "end": "3205080"
  },
  {
    "text": "implementing that behavior in your resolvers is again a fairly complex take undertaking then you have to deal with",
    "start": "3205080",
    "end": "3213030"
  },
  {
    "text": "things like nested queries right like what if I issue a query like this which is give me a list of friends of friends",
    "start": "3213030",
    "end": "3218760"
  },
  {
    "text": "or friends of friends and you just keep going on and on this query can very quickly explore into a very large",
    "start": "3218760",
    "end": "3226640"
  },
  {
    "text": "exponential problem that your servers to handle you know how do you implement balance how do you detect these kind of",
    "start": "3226640",
    "end": "3233240"
  },
  {
    "text": "like runaway queries this may or may not be malicious might just be someone trying something out and my browner a",
    "start": "3233240",
    "end": "3238369"
  },
  {
    "text": "server so how do you deal with that then you have query execution",
    "start": "3238369",
    "end": "3243559"
  },
  {
    "text": "you know like question that was just asked about what if I was didn't get books do a batch or not in that case I'm",
    "start": "3243559",
    "end": "3250549"
  },
  {
    "text": "making a bunch of calls from a downstream endpoint right let's say I would HTTP endpoint I can only handle one request per second but I'm asking",
    "start": "3250549",
    "end": "3257900"
  },
  {
    "text": "for three fields and let's say for whatever reason my resolver was set to only ask for one field I would be making",
    "start": "3257900",
    "end": "3264049"
  },
  {
    "text": "three calls per second to that endpoint it's not going to be able to handle that request rate so you need to think about",
    "start": "3264049",
    "end": "3269930"
  },
  {
    "text": "things like you know how do you bound your queries against this unbounded execution problem which means how do you",
    "start": "3269930",
    "end": "3276740"
  },
  {
    "text": "cap CPU and number of threads that are used for a query howdy bounded by time because you can have runaway queries I can run forever",
    "start": "3276740",
    "end": "3282980"
  },
  {
    "text": "already bounded by memory because again you know just physics here right you can only have certain amount of memory available how do you monitor this query",
    "start": "3282980",
    "end": "3291019"
  },
  {
    "text": "complexity how do you monitor the size of these responses that are coming back if you have multiple calls happening at",
    "start": "3291019",
    "end": "3297019"
  },
  {
    "text": "the same time how do you implement fairness so you know everyone can get serviced every query can is serviced",
    "start": "3297019",
    "end": "3302539"
  },
  {
    "text": "equally the other thing to think about is throttling both at the endpoints at the front of the graphical API but also",
    "start": "3302539",
    "end": "3309079"
  },
  {
    "text": "form a data source point of view implementing that is pretty important as well to make sure the you know you don't",
    "start": "3309079",
    "end": "3315230"
  },
  {
    "text": "end up taking down any of these endpoints on the load and then batching which I think was the question that was",
    "start": "3315230",
    "end": "3321559"
  },
  {
    "text": "just asked that's a very complex topic but you know it really helps improve the performance and the capabilities of a",
    "start": "3321559",
    "end": "3327769"
  },
  {
    "text": "graphical endpoint so implementing it is a very important thing to do for a well",
    "start": "3327769",
    "end": "3332799"
  },
  {
    "text": "for a for a really good graphical endpoint and then their subscriptions",
    "start": "3332799",
    "end": "3338210"
  },
  {
    "text": "right like if you have a million clients connected and you're sending these",
    "start": "3338210",
    "end": "3343549"
  },
  {
    "text": "updates to them how do you get these updates to them in a short amount of time how do you handle a client that's",
    "start": "3343549",
    "end": "3348890"
  },
  {
    "text": "not connected like do you queue the message or do you drop it right it's a consideration you need to make so these become this this fan-out problem is a",
    "start": "3348890",
    "end": "3356450"
  },
  {
    "text": "very hard distributor systems problem and typically you know you probably want to use a pubsub service to",
    "start": "3356450",
    "end": "3362270"
  },
  {
    "text": "solve this but you know it is a challenging problem you need to solve right if you're running your own",
    "start": "3362270",
    "end": "3367580"
  },
  {
    "text": "infrastructure so these are considerations that take you away from actually focusing on building",
    "start": "3367580",
    "end": "3373370"
  },
  {
    "start": "3369000",
    "end": "3600000"
  },
  {
    "text": "application and instead you need to start investing and solving infrastructure problems which probably",
    "start": "3373370",
    "end": "3379190"
  },
  {
    "text": "have been solved you know some shape or form and you can just reuse them as you can right so the less time you spend on",
    "start": "3379190",
    "end": "3385040"
  },
  {
    "text": "infrastructure maintenance and operations the more time you have in building features and improving application to solve your business",
    "start": "3385040",
    "end": "3390740"
  },
  {
    "text": "problems and so that's where a de bas absent came in that's actually the reason why we built the service it was",
    "start": "3390740",
    "end": "3396740"
  },
  {
    "text": "it's a it's it's a managed service it gives you graph QL but it also has subscription capabilities and enterprise",
    "start": "3396740",
    "end": "3403880"
  },
  {
    "text": "authorization capability so you can focus on just building your app and you get all the graphical capabilities you",
    "start": "3403880",
    "end": "3409190"
  },
  {
    "text": "need out of the box so some highlights it's a managed graphical service it's",
    "start": "3409190",
    "end": "3416270"
  },
  {
    "text": "serverless as and you don't have to run any info for it and it's perfect for interactive and application data it",
    "start": "3416270",
    "end": "3423020"
  },
  {
    "text": "connects to dynamodb elasticsearch any HTTP endpoint and lambda functions",
    "start": "3423020",
    "end": "3430810"
  },
  {
    "text": "lambda is the you know the service compute service which you can use to connect any of the aw service you want",
    "start": "3430810",
    "end": "3437000"
  },
  {
    "text": "through lambda it also has synchronization capabilities built in over the subscription channel",
    "start": "3437000",
    "end": "3442880"
  },
  {
    "text": "so you can do real-time data synchronization you got all flying capabilities as part of the SDKs which",
    "start": "3442880",
    "end": "3448640"
  },
  {
    "text": "know how to talk graph qaul how to handle online offline use cases and it",
    "start": "3448640",
    "end": "3455360"
  },
  {
    "text": "also has the ability for conflict detection resolution so if you're dealing with offline data you know you",
    "start": "3455360",
    "end": "3460730"
  },
  {
    "text": "very soon run into conflict scenario where two users have changed the same data being able to handle that efficiently and quickly is actually",
    "start": "3460730",
    "end": "3466670"
  },
  {
    "text": "pretty important and then as Enterprise features so it has full I am support it",
    "start": "3466670",
    "end": "3471950"
  },
  {
    "text": "has full cognitive support it has called me a usable support as well so you can have company to run your own directory",
    "start": "3471950",
    "end": "3477490"
  },
  {
    "text": "and it has YDC support as well so if you're running an open ID endpoint and",
    "start": "3477490",
    "end": "3482570"
  },
  {
    "text": "you absent can use that to authorize any requests that are coming in you can mix",
    "start": "3482570",
    "end": "3488390"
  },
  {
    "text": "and match so you know kind of the example I showed you this is just another illustration of it so with an app sync if you let's say",
    "start": "3488390",
    "end": "3494119"
  },
  {
    "text": "you have some data sitting in lastik search some data sitting in dynamodb you can set up a single lapsing endpoint",
    "start": "3494119",
    "end": "3500480"
  },
  {
    "text": "that your application can use to query against both without knowing that you have two different data sources under",
    "start": "3500480",
    "end": "3505849"
  },
  {
    "text": "the hood and then you can also hook up dynamo to elastic so it's streaming so",
    "start": "3505849",
    "end": "3513140"
  },
  {
    "text": "this is a pretty useful use case where you know you have a lot of rich capabilities in dynamo DB but maybe you",
    "start": "3513140",
    "end": "3518900"
  },
  {
    "text": "want like some advanced search capabilities which dynamo can't serve so you stream that data into elastic search",
    "start": "3518900",
    "end": "3524059"
  },
  {
    "text": "you can run things like geo queries maybe geolocation queries pretty common",
    "start": "3524059",
    "end": "3529339"
  },
  {
    "text": "pattern and then from a benefits perspective because app sync is a fully graphical compliant service you get all",
    "start": "3529339",
    "end": "3536960"
  },
  {
    "text": "the graphical benefits clients can get just the data they ask for it can access many of these resources and a single",
    "start": "3536960",
    "end": "3542990"
  },
  {
    "text": "call it has introspection capability so you get self documentation and code generation and those capabilities apps",
    "start": "3542990",
    "end": "3551119"
  },
  {
    "text": "link has react native Android iOS and JavaScript SDK is available these are",
    "start": "3551119",
    "end": "3557420"
  },
  {
    "text": "using the Apollo graphical client but we have a newer client called the amplified client as well so you can use either of",
    "start": "3557420",
    "end": "3563089"
  },
  {
    "text": "those to get all these capabilities you can get graph QL you can get real-time",
    "start": "3563089",
    "end": "3568309"
  },
  {
    "text": "synchronization you can get offline capabilities through either of these clients and you get data persistent",
    "start": "3568309",
    "end": "3575089"
  },
  {
    "text": "across restarts as well so if your app crashes or someone kills your app and it comes back up you don't lose state it's",
    "start": "3575089",
    "end": "3581180"
  },
  {
    "text": "still available for you offline and then it has optimistic UI if people are",
    "start": "3581180",
    "end": "3586220"
  },
  {
    "text": "familiar with it from a react perspective this usually means someone makes a change the app pretends the",
    "start": "3586220",
    "end": "3593660"
  },
  {
    "text": "change was successful and queues it and then it tries to write it over the network when the write succeeds it then",
    "start": "3593660",
    "end": "3598819"
  },
  {
    "text": "goes ok cool nothing more to do by the write fails it goes reverse the UI to whatever the previous state might be and",
    "start": "3598819",
    "end": "3605960"
  },
  {
    "text": "then how apps in works pretty simple you build a schema upload it you connect it",
    "start": "3605960",
    "end": "3611569"
  },
  {
    "text": "to your data sources using the resolvers and then you start calling apps an",
    "start": "3611569",
    "end": "3617119"
  },
  {
    "text": "endpoint and you know you'll get real-time messages and whatever you have all this capabilities out of the box",
    "start": "3617119",
    "end": "3622329"
  },
  {
    "text": "from a security perspective from a data flow and security perspective",
    "start": "3622329",
    "end": "3627520"
  },
  {
    "text": "so the resolvers that you implement with an app sync you implement them using this language called velocity template",
    "start": "3627520",
    "end": "3633430"
  },
  {
    "text": "language this is a pretty powerful domain-specific language that lets you express you know pretty much every",
    "start": "3633430",
    "end": "3639609"
  },
  {
    "text": "constructive would ever need one really cool thing about it is you write your VT",
    "start": "3639609",
    "end": "3646240"
  },
  {
    "text": "l so you actually can break it up into two parts you can break it up into the request template and you break it up into the response template the request",
    "start": "3646240",
    "end": "3653109"
  },
  {
    "text": "template is what gets executed on the way in so if I was running my you know get something query it hits the end",
    "start": "3653109",
    "end": "3660130"
  },
  {
    "text": "point it does all the parsing whatever and then it calls the request template where you can have a bunch of logic so",
    "start": "3660130",
    "end": "3665680"
  },
  {
    "text": "you can change the shape of the data or you can you know say there's some transformation when we run on it and",
    "start": "3665680",
    "end": "3670990"
  },
  {
    "text": "then it does the the interaction with your data source and then on the outbound side the response that coming",
    "start": "3670990",
    "end": "3676900"
  },
  {
    "text": "back from the data source is where you can do things like ok again you know here's the response coming back maybe I",
    "start": "3676900",
    "end": "3682000"
  },
  {
    "text": "want to change the value of the field or whatever and I want to return that you can do that in response template and then the result shows up back to your",
    "start": "3682000",
    "end": "3688420"
  },
  {
    "text": "client the template the the VTL the mapping template so resolvers actually",
    "start": "3688420",
    "end": "3694359"
  },
  {
    "text": "very useful because they give you an important capability fine-grained access control so the resolver level",
    "start": "3694359",
    "end": "3700329"
  },
  {
    "text": "authorization I was talking about you can implement this in the resolver itself or you can do checks like get to",
    "start": "3700329",
    "end": "3706630"
  },
  {
    "text": "access control checks like you know there's a couple of examples here you can do like hey is user in a group or as",
    "start": "3706630",
    "end": "3712210"
  },
  {
    "text": "username equal to this or is a certain field set or you know does the user",
    "start": "3712210",
    "end": "3717460"
  },
  {
    "text": "belong to this context these are checks you can do as part of the resolver templates to determine if you determine",
    "start": "3717460",
    "end": "3722589"
  },
  {
    "text": "if you want to return by Farrelly's or not this is again fairly advanced but",
    "start": "3722589",
    "end": "3727690"
  },
  {
    "text": "you have all these capabilities available to you just out of the box you don't need to use them if you don't need them and then from a real-time data",
    "start": "3727690",
    "end": "3735400"
  },
  {
    "text": "perspective you know again previously this would kind of be the way you would do subscriptions you would have your web",
    "start": "3735400",
    "end": "3741369"
  },
  {
    "text": "server flee then you would have single in a pub sub fleet which would handle these requests coming in and your",
    "start": "3741369",
    "end": "3747400"
  },
  {
    "text": "clients connected to your WebSocket servers and you would send this data around through here right so be able to manage all this infrastructure and all",
    "start": "3747400",
    "end": "3754420"
  },
  {
    "text": "these components but with app sync all that goes away you got a single endpoint which does",
    "start": "3754420",
    "end": "3759760"
  },
  {
    "text": "queries mutation that's Asians your client just connects and all you really focus on is the interaction",
    "start": "3759760",
    "end": "3766230"
  },
  {
    "text": "between your graphical query and your downstream data sources so it's very easy because if this is really easy to",
    "start": "3766230",
    "end": "3772980"
  },
  {
    "text": "start prototyping and building an application and then the way",
    "start": "3772980",
    "end": "3778110"
  },
  {
    "text": "subscriptions work just a couple of bullet points here one is it's implemented using MQTT over WebSockets mqtt is a lightweight pub/sub protocol",
    "start": "3778110",
    "end": "3786500"
  },
  {
    "text": "absalom Anna jiz these WebSocket connections for you so you know if your classic case is you on an app you go",
    "start": "3786500",
    "end": "3792750"
  },
  {
    "text": "through a tunnel and you come back on the other side you know you don't have to worry about as a developer",
    "start": "3792750",
    "end": "3797880"
  },
  {
    "text": "pre-established in connection the sdk will take care of that for you and then you also have the capability to provide a catch-up query so in this case it'll",
    "start": "3797880",
    "end": "3805890"
  },
  {
    "text": "actually run the query for you if you're being offline for too long to give you the latest state and then it",
    "start": "3805890",
    "end": "3810930"
  },
  {
    "text": "reestablishes a subscription connection from an offline data perspective some",
    "start": "3810930",
    "end": "3817320"
  },
  {
    "text": "rushing through this pretty quickly but from an offline data perspective you deal with conflicts so you know common",
    "start": "3817320",
    "end": "3823050"
  },
  {
    "text": "use case let's say Jane is working on a document and then Jane goes offline and then you know she continues working on",
    "start": "3823050",
    "end": "3830280"
  },
  {
    "text": "the document but then John comes in he's working on this this shared version of the document so now you have this this",
    "start": "3830280",
    "end": "3836550"
  },
  {
    "text": "fork in the document right - people are making edits and then when Jane comes back online then you have a conflict",
    "start": "3836550",
    "end": "3841830"
  },
  {
    "text": "because now you don't know which version actually wins in this case right there's a Jane's or is it John's is it a merge",
    "start": "3841830",
    "end": "3847080"
  },
  {
    "text": "of them what do you do in that case so to give you the the ability to solve for",
    "start": "3847080",
    "end": "3852810"
  },
  {
    "text": "this app singing allows you to detect and handle these conflicts in the cloud",
    "start": "3852810",
    "end": "3857960"
  },
  {
    "text": "so absent has this concept of optimistic version checks and so the versions of",
    "start": "3857960",
    "end": "3863190"
  },
  {
    "text": "mismatch then it determines there's a conflict and then you have four different strategies you can use in this case you can do client wins which means",
    "start": "3863190",
    "end": "3870540"
  },
  {
    "text": "you know last right that came in let that win server wins so whatever is on the server is the winner then there's an",
    "start": "3870540",
    "end": "3876540"
  },
  {
    "text": "interesting one called silent reject where the server actually pretends at the client one client might send an",
    "start": "3876540",
    "end": "3882600"
  },
  {
    "text": "update but the server goes ok cool the update was good and sends you back whatever the latest error in the server was this is super helpful for optimistic",
    "start": "3882600",
    "end": "3889440"
  },
  {
    "text": "UX because then your client can just update the view with whatever the latest state is on the server",
    "start": "3889440",
    "end": "3894570"
  },
  {
    "text": "without having to you know roll back the change and then force the user to make some kind of an action and if these",
    "start": "3894570",
    "end": "3901290"
  },
  {
    "text": "strategies I'm good enough it also allows you to like just plug into a custom lambda function you can run for the in conflict resolution so it'll pass",
    "start": "3901290",
    "end": "3908100"
  },
  {
    "text": "in all the context you need and you decide you know what should actually be the winner of that conflict scenario and",
    "start": "3908100",
    "end": "3914850"
  },
  {
    "text": "then on the client side there you know you can also have a ping say there's a conflict deal with it and you can have",
    "start": "3914850",
    "end": "3920430"
  },
  {
    "text": "the end-user decide what they want to do in that case from a client perspective",
    "start": "3920430",
    "end": "3927530"
  },
  {
    "text": "absent have its own client database it uses whatever the platform provides so local storage for web a sink for react",
    "start": "3927530",
    "end": "3934410"
  },
  {
    "text": "native and then sequel Lite on the native platforms this means you don't have to learn yet another data storage",
    "start": "3934410",
    "end": "3940650"
  },
  {
    "text": "technology it's really just know the graph QL and you get these offline capabilities available to you out of the",
    "start": "3940650",
    "end": "3946230"
  },
  {
    "text": "box you can preload the database and then the offline client is you can",
    "start": "3946230",
    "end": "3951570"
  },
  {
    "text": "configure it to handle its bandwidth aware so you can have it transmit data",
    "start": "3951570",
    "end": "3959130"
  },
  {
    "text": "only when it's on Wi-Fi you can do Wi-Fi and cellular and so you have control over how the synchronization might work",
    "start": "3959130",
    "end": "3964830"
  },
  {
    "text": "from a network perspective as well from a tooling point of view we think the",
    "start": "3964830",
    "end": "3970590"
  },
  {
    "text": "best tool out there right now is the AWS amplify library and the CLI amplify lets",
    "start": "3970590",
    "end": "3976890"
  },
  {
    "text": "you have you know it lets you create a graphical endpoint manager graphical resolvers it actually lets you get build",
    "start": "3976890",
    "end": "3984570"
  },
  {
    "text": "a graphical endpoint really really quickly without actually having to write resolvers or anything of that sort so if",
    "start": "3984570",
    "end": "3990810"
  },
  {
    "text": "you look at this it's got this capability called the graph QL transformer so if you look at the type post and it's got these little add",
    "start": "3990810",
    "end": "3997290"
  },
  {
    "text": "things on them right those things are called directives this what is it like eight lines seven lines of code this",
    "start": "3997290",
    "end": "4004310"
  },
  {
    "text": "will actually transform through this amplify graphical transformer into about three or four hundred lines of cloud",
    "start": "4004310",
    "end": "4010520"
  },
  {
    "text": "formation and probably another three four hundred lines of resolver logic which you don't have to write the ad",
    "start": "4010520",
    "end": "4018320"
  },
  {
    "text": "model just means this DynamoDB so this will actually construct a full crowd api",
    "start": "4018320",
    "end": "4024110"
  },
  {
    "text": "for you that can talk dynamo DB and build the schema set of the point you know gives you all the",
    "start": "4024110",
    "end": "4030079"
  },
  {
    "text": "capabilities you need so you can really just focus on the app again so we can",
    "start": "4030079",
    "end": "4035869"
  },
  {
    "text": "probably do a quick demo on this but I think we're a little bit over time so let's wrap this up and we can do that offline cool so we'll",
    "start": "4035869",
    "end": "4043640"
  },
  {
    "text": "skip this for now and then I think the the question I heard a little while ago rest versus graph QL should I use graph",
    "start": "4043640",
    "end": "4052249"
  },
  {
    "text": "kill for everything or should I use rest for everything or you know what's the right thing to do",
    "start": "4052249",
    "end": "4057910"
  },
  {
    "text": "rest in graph kill are complementary if you read all the material on the",
    "start": "4057910",
    "end": "4062960"
  },
  {
    "text": "internet it seems like you have to make a choice you don't have to make a choice you can use rest and graph kill together",
    "start": "4062960",
    "end": "4069079"
  },
  {
    "text": "you can put graph QL in front of rest endpoints you can put a rest endpoint in front of graphical endpoints you know",
    "start": "4069079",
    "end": "4074089"
  },
  {
    "text": "pick what you think is the right tool for the right job there's some guidance on you know when you might prefer rest",
    "start": "4074089",
    "end": "4081319"
  },
  {
    "text": "versus when you might prefer graph QL now this doesn't mean these are hard and fast rules of course I've actually seen",
    "start": "4081319",
    "end": "4088039"
  },
  {
    "text": "a graphical end point which people use to upload giant blobs to s3 not sure if",
    "start": "4088039",
    "end": "4093410"
  },
  {
    "text": "that's the right thing to do but at the same time I've seen a graphical endpoint which all it does is just return back a",
    "start": "4093410",
    "end": "4099560"
  },
  {
    "text": "single hard-coded value which again I'm like okay cool I guess it works for yeah they know uses the guidance you don't",
    "start": "4099560",
    "end": "4107150"
  },
  {
    "text": "have to pick and choose you can mix and match it's actually fairly easy to transition from graph kale to rest so",
    "start": "4107150",
    "end": "4113659"
  },
  {
    "text": "you can start we'll graph kale you can decide this this endpoint doesn't work for me let me go stand up restful endpoint you can have a bunch of rest",
    "start": "4113659",
    "end": "4119988"
  },
  {
    "text": "endpoints you can build an abstraction layer and graph you all on top of them but that doesn't mean your clients have",
    "start": "4119989",
    "end": "4125028"
  },
  {
    "text": "to talk on the graphical they can you can choose maybe for whatever reason to call the restful endpoint directly as",
    "start": "4125029",
    "end": "4130460"
  },
  {
    "text": "well so it really just depends on use case you know this graph kill is another",
    "start": "4130460",
    "end": "4135920"
  },
  {
    "text": "tool that you have access to so evaluate",
    "start": "4135920",
    "end": "4140929"
  },
  {
    "text": "it use it and you know ultimately what matters is the experience you build for your customer so see which one really",
    "start": "4140929",
    "end": "4146750"
  },
  {
    "text": "works well for you all right so we looked at what is graph QL we covered",
    "start": "4146750",
    "end": "4151880"
  },
  {
    "text": "why it was created we looked a little bit at how to build a graph QL API we",
    "start": "4151880",
    "end": "4157699"
  },
  {
    "text": "looked at how we can operate our graph Kilian production and we have not built a graph key leaf",
    "start": "4157699",
    "end": "4163230"
  },
  {
    "text": "here but we will in a few minutes so stay tuned and thank you for your time",
    "start": "4163230",
    "end": "4168660"
  },
  {
    "text": "for this session we'll take a little break there's questions I'll talk to you really quickly I think we'll take about",
    "start": "4168660",
    "end": "4175500"
  },
  {
    "text": "a five minute break and we'll get started at 2:15 with the next session which is hands-on and we'll build a",
    "start": "4175500",
    "end": "4180838"
  },
  {
    "text": "graphical API and some clients for it all right thank you",
    "start": "4180839",
    "end": "4185779"
  }
]