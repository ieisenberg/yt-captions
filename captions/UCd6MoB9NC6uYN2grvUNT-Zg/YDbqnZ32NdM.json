[
  {
    "start": "0",
    "end": "20000"
  },
  {
    "text": "hello everyone this is Trion Kim again",
    "start": "1500",
    "end": "4319"
  },
  {
    "text": "I'm a container specialist Solutions",
    "start": "4319",
    "end": "6899"
  },
  {
    "text": "architect at Amazon web services and",
    "start": "6899",
    "end": "10019"
  },
  {
    "text": "this is a series of learning talk on ECS",
    "start": "10019",
    "end": "12900"
  },
  {
    "text": "and fargate",
    "start": "12900",
    "end": "14639"
  },
  {
    "text": "today we are going to talk about ECS",
    "start": "14639",
    "end": "17039"
  },
  {
    "text": "Auto scaling with demo",
    "start": "17039",
    "end": "20779"
  },
  {
    "start": "20000",
    "end": "74000"
  },
  {
    "text": "first of all let's figure out what Auto",
    "start": "21300",
    "end": "23880"
  },
  {
    "text": "scaling on ECS is",
    "start": "23880",
    "end": "26519"
  },
  {
    "text": "so when we are talking about Auto",
    "start": "26519",
    "end": "28740"
  },
  {
    "text": "scaling on ECS the fundamental unit of",
    "start": "28740",
    "end": "31980"
  },
  {
    "text": "scale is a task",
    "start": "31980",
    "end": "34260"
  },
  {
    "text": "and a task is basically a collection of",
    "start": "34260",
    "end": "37800"
  },
  {
    "text": "one or more containers",
    "start": "37800",
    "end": "40079"
  },
  {
    "text": "usually one but sometimes more than one",
    "start": "40079",
    "end": "42840"
  },
  {
    "text": "in case of sidecars",
    "start": "42840",
    "end": "45719"
  },
  {
    "text": "and tasks have resource limits",
    "start": "45719",
    "end": "48539"
  },
  {
    "text": "though the resource limits are the",
    "start": "48539",
    "end": "50700"
  },
  {
    "text": "fundamental limits of any Computing",
    "start": "50700",
    "end": "53160"
  },
  {
    "text": "resources in AWS including CPU memory",
    "start": "53160",
    "end": "57320"
  },
  {
    "text": "iops and network bandwidth",
    "start": "57320",
    "end": "61878"
  },
  {
    "text": "customers can declare task limit for CPU",
    "start": "62059",
    "end": "65820"
  },
  {
    "text": "and memory",
    "start": "65820",
    "end": "67740"
  },
  {
    "text": "in Far gate it is required but in ec2 it",
    "start": "67740",
    "end": "72540"
  },
  {
    "text": "is optional",
    "start": "72540",
    "end": "75200"
  },
  {
    "start": "74000",
    "end": "156000"
  },
  {
    "text": "getting started with auto scaling you",
    "start": "76740",
    "end": "79380"
  },
  {
    "text": "need to identify a scaling metric which",
    "start": "79380",
    "end": "82320"
  },
  {
    "text": "will be a criteria for triggering",
    "start": "82320",
    "end": "85200"
  },
  {
    "text": "scaling",
    "start": "85200",
    "end": "87540"
  },
  {
    "text": "scaling metric is a metric that is an",
    "start": "87540",
    "end": "91080"
  },
  {
    "text": "initial of the current Demand on the",
    "start": "91080",
    "end": "93659"
  },
  {
    "text": "overall application",
    "start": "93659",
    "end": "95820"
  },
  {
    "text": "therefore as demand grows the value",
    "start": "95820",
    "end": "99180"
  },
  {
    "text": "either increases as demand or false",
    "start": "99180",
    "end": "102479"
  },
  {
    "text": "within the metric decreases",
    "start": "102479",
    "end": "105240"
  },
  {
    "text": "but it could be the inverse as well just",
    "start": "105240",
    "end": "108720"
  },
  {
    "text": "depending on the metric you choose",
    "start": "108720",
    "end": "111899"
  },
  {
    "text": "in order to Be an Effective scaling",
    "start": "111899",
    "end": "114600"
  },
  {
    "text": "metric that metric has to be a",
    "start": "114600",
    "end": "117299"
  },
  {
    "text": "proportional metric",
    "start": "117299",
    "end": "119399"
  },
  {
    "text": "and what proportional metric means it",
    "start": "119399",
    "end": "122820"
  },
  {
    "text": "has to have a particular Behavior above",
    "start": "122820",
    "end": "125399"
  },
  {
    "text": "it",
    "start": "125399",
    "end": "126840"
  },
  {
    "text": "for instance if we hold the number of",
    "start": "126840",
    "end": "129780"
  },
  {
    "text": "tasks in our service study and if load",
    "start": "129780",
    "end": "133560"
  },
  {
    "text": "doubles then the value of the metric has",
    "start": "133560",
    "end": "136739"
  },
  {
    "text": "to be doubled as well",
    "start": "136739",
    "end": "139739"
  },
  {
    "text": "course with most modern runtimes and web",
    "start": "139739",
    "end": "142860"
  },
  {
    "text": "work rows a scaling metric might be a",
    "start": "142860",
    "end": "145860"
  },
  {
    "text": "CPU",
    "start": "145860",
    "end": "147060"
  },
  {
    "text": "but it really depends on your work",
    "start": "147060",
    "end": "149580"
  },
  {
    "text": "growth characteristics",
    "start": "149580",
    "end": "151560"
  },
  {
    "text": "so make sure that your scaling metric is",
    "start": "151560",
    "end": "154440"
  },
  {
    "text": "proportional",
    "start": "154440",
    "end": "157040"
  },
  {
    "start": "156000",
    "end": "265000"
  },
  {
    "text": "in ECS each scaling policies are powered",
    "start": "158220",
    "end": "161879"
  },
  {
    "text": "by application Auto scaling which is",
    "start": "161879",
    "end": "165620"
  },
  {
    "text": "technically different with easy total",
    "start": "165620",
    "end": "168660"
  },
  {
    "text": "scaling",
    "start": "168660",
    "end": "170400"
  },
  {
    "text": "application to scaling is configured",
    "start": "170400",
    "end": "173760"
  },
  {
    "text": "draw policies",
    "start": "173760",
    "end": "175620"
  },
  {
    "text": "and there are three kinds of policies",
    "start": "175620",
    "end": "177959"
  },
  {
    "text": "that can be used which is Target",
    "start": "177959",
    "end": "180180"
  },
  {
    "text": "tracking sub scaling and schedule the",
    "start": "180180",
    "end": "183360"
  },
  {
    "text": "scaling",
    "start": "183360",
    "end": "185280"
  },
  {
    "text": "with Target tracking first of all you",
    "start": "185280",
    "end": "188400"
  },
  {
    "text": "can choose the metric you want to track",
    "start": "188400",
    "end": "190860"
  },
  {
    "text": "and then choose the value that you want",
    "start": "190860",
    "end": "194340"
  },
  {
    "text": "that metric try to stay at",
    "start": "194340",
    "end": "197640"
  },
  {
    "text": "after configuration the auto scaling",
    "start": "197640",
    "end": "200700"
  },
  {
    "text": "engine or the just the number of tasks",
    "start": "200700",
    "end": "203400"
  },
  {
    "text": "automatically to make them the value and",
    "start": "203400",
    "end": "206640"
  },
  {
    "text": "keep the value stable",
    "start": "206640",
    "end": "208980"
  },
  {
    "text": "it is very easy to configure and low",
    "start": "208980",
    "end": "212519"
  },
  {
    "text": "maintenance",
    "start": "212519",
    "end": "214920"
  },
  {
    "text": "with top scaling you can choose the",
    "start": "214920",
    "end": "217800"
  },
  {
    "text": "metric threshold by yourselves and",
    "start": "217800",
    "end": "220500"
  },
  {
    "text": "choose exactly how many resources to add",
    "start": "220500",
    "end": "223560"
  },
  {
    "text": "or remove when address all the guests",
    "start": "223560",
    "end": "226500"
  },
  {
    "text": "crossed",
    "start": "226500",
    "end": "228180"
  },
  {
    "text": "it is the most customizable but it is",
    "start": "228180",
    "end": "231540"
  },
  {
    "text": "also one of the most challenging",
    "start": "231540",
    "end": "233459"
  },
  {
    "text": "policies to configure",
    "start": "233459",
    "end": "236640"
  },
  {
    "text": "therefore it is important to configure",
    "start": "236640",
    "end": "239580"
  },
  {
    "text": "those parameters based on abundant",
    "start": "239580",
    "end": "242360"
  },
  {
    "text": "experience from operating your workload",
    "start": "242360",
    "end": "247799"
  },
  {
    "text": "and then finally schedule the scaling is",
    "start": "247799",
    "end": "250980"
  },
  {
    "text": "very simple",
    "start": "250980",
    "end": "252180"
  },
  {
    "text": "at a certain time of day the number of",
    "start": "252180",
    "end": "254879"
  },
  {
    "text": "resources are set to the Target value",
    "start": "254879",
    "end": "258419"
  },
  {
    "text": "it is also very straightforward and you",
    "start": "258419",
    "end": "261359"
  },
  {
    "text": "can easily say this is similar to the",
    "start": "261359",
    "end": "263520"
  },
  {
    "text": "Chrome drop",
    "start": "263520",
    "end": "266000"
  },
  {
    "start": "265000",
    "end": "361000"
  },
  {
    "text": "today I have prepared a demo regarding",
    "start": "267300",
    "end": "270120"
  },
  {
    "text": "Target tracking based on average cput",
    "start": "270120",
    "end": "272639"
  },
  {
    "text": "utilization",
    "start": "272639",
    "end": "274139"
  },
  {
    "text": "but before that let's take a look what",
    "start": "274139",
    "end": "277500"
  },
  {
    "text": "Target tracking scaling is in a bit more",
    "start": "277500",
    "end": "280139"
  },
  {
    "text": "detail",
    "start": "280139",
    "end": "281900"
  },
  {
    "text": "I told you that the most common scaling",
    "start": "281900",
    "end": "285360"
  },
  {
    "text": "policy is Target tracking",
    "start": "285360",
    "end": "288360"
  },
  {
    "text": "you can see here that I have created a",
    "start": "288360",
    "end": "291479"
  },
  {
    "text": "policy",
    "start": "291479",
    "end": "292740"
  },
  {
    "text": "my target metric is a CPU utilization",
    "start": "292740",
    "end": "296040"
  },
  {
    "text": "percent that the average value",
    "start": "296040",
    "end": "299520"
  },
  {
    "text": "and the target value is a 70 percent",
    "start": "299520",
    "end": "303660"
  },
  {
    "text": "so this is the value that we are going",
    "start": "303660",
    "end": "306660"
  },
  {
    "text": "to try to approach and you can see here",
    "start": "306660",
    "end": "309840"
  },
  {
    "text": "that over time my CP utilization average",
    "start": "309840",
    "end": "313500"
  },
  {
    "text": "has closed a 70 threshold",
    "start": "313500",
    "end": "318060"
  },
  {
    "text": "we are now in Bridge and application of",
    "start": "318060",
    "end": "321479"
  },
  {
    "text": "the scaling is going to react by",
    "start": "321479",
    "end": "324300"
  },
  {
    "text": "increasing my task account from 10 to",
    "start": "324300",
    "end": "327479"
  },
  {
    "text": "12.",
    "start": "327479",
    "end": "329220"
  },
  {
    "text": "and then in some time what's going to",
    "start": "329220",
    "end": "332340"
  },
  {
    "text": "happen is the amount of average CPU",
    "start": "332340",
    "end": "336180"
  },
  {
    "text": "utilization is going to fall and we are",
    "start": "336180",
    "end": "340380"
  },
  {
    "text": "going to approach that 70 Target value",
    "start": "340380",
    "end": "343800"
  },
  {
    "text": "that we want",
    "start": "343800",
    "end": "346020"
  },
  {
    "text": "so this is fairly straightforward and",
    "start": "346020",
    "end": "348900"
  },
  {
    "text": "very simple to understand and used by",
    "start": "348900",
    "end": "351960"
  },
  {
    "text": "majority of customers",
    "start": "351960",
    "end": "355580"
  },
  {
    "text": "so like always let's jump into the ECS",
    "start": "355860",
    "end": "359699"
  },
  {
    "text": "console",
    "start": "359699",
    "end": "362120"
  },
  {
    "text": "I already prepared sample service for",
    "start": "363139",
    "end": "366600"
  },
  {
    "text": "today's Auto scaling demo",
    "start": "366600",
    "end": "368699"
  },
  {
    "text": "for examining how this service has been",
    "start": "368699",
    "end": "372300"
  },
  {
    "text": "set up click this service and click the",
    "start": "372300",
    "end": "375660"
  },
  {
    "text": "update button",
    "start": "375660",
    "end": "378500"
  },
  {
    "text": "as you can see the number of desired",
    "start": "379139",
    "end": "382560"
  },
  {
    "text": "tasks is 2.",
    "start": "382560",
    "end": "384960"
  },
  {
    "text": "scroll down a little bit",
    "start": "384960",
    "end": "387600"
  },
  {
    "text": "and open the service auto scaling tab",
    "start": "387600",
    "end": "392780"
  },
  {
    "text": "um this service auto scaling has a",
    "start": "393000",
    "end": "395639"
  },
  {
    "text": "minimum size of two tasks and a maximum",
    "start": "395639",
    "end": "398940"
  },
  {
    "text": "size of five tasks",
    "start": "398940",
    "end": "402139"
  },
  {
    "text": "bottom of that Target tracking is",
    "start": "403680",
    "end": "406800"
  },
  {
    "text": "configured and scaling metric is ECS",
    "start": "406800",
    "end": "410520"
  },
  {
    "text": "service average CP utilization",
    "start": "410520",
    "end": "413940"
  },
  {
    "text": "by default we provide average CPU",
    "start": "413940",
    "end": "417720"
  },
  {
    "text": "average memory and application load",
    "start": "417720",
    "end": "421860"
  },
  {
    "text": "balancer request per Target",
    "start": "421860",
    "end": "424560"
  },
  {
    "text": "but you can also use customize the",
    "start": "424560",
    "end": "427680"
  },
  {
    "text": "metric",
    "start": "427680",
    "end": "429000"
  },
  {
    "text": "in this demo I am going to use average",
    "start": "429000",
    "end": "431580"
  },
  {
    "text": "recipient utilization",
    "start": "431580",
    "end": "434780"
  },
  {
    "text": "in terms of Target value I have set this",
    "start": "435539",
    "end": "438660"
  },
  {
    "text": "value to 20",
    "start": "438660",
    "end": "440419"
  },
  {
    "text": "to ensure a smooth demo with kick",
    "start": "440419",
    "end": "444000"
  },
  {
    "text": "scaling",
    "start": "444000",
    "end": "446599"
  },
  {
    "text": "let's move to the cloud watch console",
    "start": "447840",
    "end": "450539"
  },
  {
    "text": "and figure out more",
    "start": "450539",
    "end": "454099"
  },
  {
    "start": "453000",
    "end": "523000"
  },
  {
    "text": "I already made ECS dashboard with two",
    "start": "456300",
    "end": "460380"
  },
  {
    "text": "graphs as you can see",
    "start": "460380",
    "end": "462840"
  },
  {
    "text": "one is for the average cput utilization",
    "start": "462840",
    "end": "466080"
  },
  {
    "text": "for sample service",
    "start": "466080",
    "end": "468800"
  },
  {
    "text": "and",
    "start": "468800",
    "end": "470400"
  },
  {
    "text": "the other one is for the running and the",
    "start": "470400",
    "end": "474780"
  },
  {
    "text": "desired task account",
    "start": "474780",
    "end": "477840"
  },
  {
    "text": "since most of time those two values are",
    "start": "477840",
    "end": "481259"
  },
  {
    "text": "almost similar they overlapped at this",
    "start": "481259",
    "end": "484620"
  },
  {
    "text": "point in this graph",
    "start": "484620",
    "end": "487560"
  },
  {
    "text": "and I did the load testing behind the",
    "start": "487560",
    "end": "490919"
  },
  {
    "text": "scene as you can see in here",
    "start": "490919",
    "end": "495620"
  },
  {
    "text": "average CPU utilization has exceeded 20",
    "start": "497120",
    "end": "502199"
  },
  {
    "text": "percent and accordingly uh the scale",
    "start": "502199",
    "end": "506520"
  },
  {
    "text": "operation is also in progress and you",
    "start": "506520",
    "end": "511500"
  },
  {
    "text": "can see in here we are running test",
    "start": "511500",
    "end": "513659"
  },
  {
    "text": "count or meet the desired task account",
    "start": "513659",
    "end": "518180"
  },
  {
    "text": "in addition I want to show you Cloud",
    "start": "519120",
    "end": "521580"
  },
  {
    "text": "watch alarm also",
    "start": "521580",
    "end": "524899"
  },
  {
    "start": "523000",
    "end": "560000"
  },
  {
    "text": "since the service auto scaling creates",
    "start": "526100",
    "end": "529140"
  },
  {
    "text": "and manages their Cloud watch alarms you",
    "start": "529140",
    "end": "532440"
  },
  {
    "text": "can see the alarms associated with",
    "start": "532440",
    "end": "534720"
  },
  {
    "text": "Target tracking scaling",
    "start": "534720",
    "end": "537540"
  },
  {
    "text": "checking condition Tab and as you can",
    "start": "537540",
    "end": "541920"
  },
  {
    "text": "see in here",
    "start": "541920",
    "end": "544320"
  },
  {
    "text": "um you can see the same scaling",
    "start": "544320",
    "end": "548880"
  },
  {
    "text": "condition I have set up in ECS service",
    "start": "548880",
    "end": "552839"
  },
  {
    "text": "when in alarm scaling policy is going to",
    "start": "552839",
    "end": "556200"
  },
  {
    "text": "be executed",
    "start": "556200",
    "end": "558980"
  },
  {
    "start": "560000",
    "end": "589000"
  },
  {
    "text": "this is all I have to share today please",
    "start": "561899",
    "end": "564720"
  },
  {
    "text": "keep in mind which metric is why for",
    "start": "564720",
    "end": "567540"
  },
  {
    "text": "auto scaling and three kinds of Auto",
    "start": "567540",
    "end": "570540"
  },
  {
    "text": "scaling policies",
    "start": "570540",
    "end": "573000"
  },
  {
    "text": "if you have any questions or feedback",
    "start": "573000",
    "end": "575640"
  },
  {
    "text": "drop me a line",
    "start": "575640",
    "end": "577740"
  },
  {
    "text": "thanks for Watch Lightning talk on ECS",
    "start": "577740",
    "end": "580380"
  },
  {
    "text": "and fargate see you next time",
    "start": "580380",
    "end": "584360"
  }
]