[
  {
    "text": "Welcome to 'Back To Basics'.",
    "start": "4940",
    "end": "6567"
  },
  {
    "text": "I am Sid, and today we'll talk about \nan architecture pattern on how you can build",
    "start": "6567",
    "end": "10652"
  },
  {
    "text": "serverless asynchronous webapps \nusing API Gateway and WebSockets.",
    "start": "10652",
    "end": "14874"
  },
  {
    "text": "Now before we dive into \nthe AWS architecture,",
    "start": "14874",
    "end": "17796"
  },
  {
    "text": "let's spend a few minutes understanding",
    "start": "17797",
    "end": "19655"
  },
  {
    "text": "where and why would you use WebSockets \nand asynchronous communication.",
    "start": "19655",
    "end": "23117"
  },
  {
    "text": "Let's consider a scenario where you have \na webapp hosted on a server",
    "start": "23614",
    "end": "27427"
  },
  {
    "text": "and a user is accessing the webapp \nthrough their laptop's web browser.",
    "start": "27427",
    "end": "31398"
  },
  {
    "text": "The web server has to communicate \nwith downstream app server",
    "start": "31398",
    "end": "34971"
  },
  {
    "text": "in order to fulfill the request.",
    "start": "34971",
    "end": "37117"
  },
  {
    "text": "In a synchronous flow, \nuser makes an HTTP request.",
    "start": "37117",
    "end": "41191"
  },
  {
    "text": "This request blocks the execution of code \nwithin the web page",
    "start": "41191",
    "end": "45140"
  },
  {
    "text": "until the response is received.",
    "start": "45140",
    "end": "47087"
  },
  {
    "text": "The freezing of web page \nisn't a good user experience,",
    "start": "47088",
    "end": "50021"
  },
  {
    "text": "especially when request response \nlatency is high.",
    "start": "50021",
    "end": "52992"
  },
  {
    "text": "To solve this problem, \ndevelopers typically use",
    "start": "52992",
    "end": "55857"
  },
  {
    "text": "AJAX APIs like XMLHttpRequest",
    "start": "55857",
    "end": "59102"
  },
  {
    "text": "and Fetch API to implement \ncallbacks and promises.",
    "start": "59103",
    "end": "63000"
  },
  {
    "text": "Now while AJAX is great, \nthere are use cases",
    "start": "63000",
    "end": "65983"
  },
  {
    "text": "where simply using these APIs \nisn't enough.",
    "start": "65983",
    "end": "68787"
  },
  {
    "text": "The first use case is where the request \ntakes much longer to process and respond to",
    "start": "68787",
    "end": "73646"
  },
  {
    "text": "than what a TCP connection \ncan stay active for.",
    "start": "73646",
    "end": "76791"
  },
  {
    "text": "And second, where the server needs to send \nmessages to the user on demand.",
    "start": "76791",
    "end": "81574"
  },
  {
    "text": "Example here would be chat applications, \nmulti-player games, ",
    "start": "81574",
    "end": "85013"
  },
  {
    "text": "and financial trading platforms.",
    "start": "85013",
    "end": "87071"
  },
  {
    "text": "Now one way I have seen this use case \nbeing implemented is by using polling.",
    "start": "87071",
    "end": "91763"
  },
  {
    "text": "You can implement regular polling \nwhere you send a request to the server",
    "start": "91763",
    "end": "96049"
  },
  {
    "text": "and instead of immediately waiting \nfor a response,",
    "start": "96049",
    "end": "98548"
  },
  {
    "text": "the client polls or reaches out \nto the server repeatedly",
    "start": "98548",
    "end": "101947"
  },
  {
    "text": "in a defined time interval, \nchecking for a response or a new message.",
    "start": "101947",
    "end": "106503"
  },
  {
    "text": "Every poll is a new HTTP request \nand can result in an empty response,",
    "start": "106503",
    "end": "111020"
  },
  {
    "text": "so it's not very efficient.",
    "start": "111020",
    "end": "113022"
  },
  {
    "text": "Alternatively, you can implement \nlong polling,",
    "start": "113704",
    "end": "116517"
  },
  {
    "text": "where the web server \ndoesn't respond immediately,",
    "start": "116517",
    "end": "118919"
  },
  {
    "text": "but rather keeps the connection open \nfor as long as it can without timing out,",
    "start": "118919",
    "end": "123179"
  },
  {
    "text": "and responds when it has \nsomething to report.",
    "start": "123179",
    "end": "125445"
  },
  {
    "text": "While better than regular polling,",
    "start": "125445",
    "end": "127290"
  },
  {
    "text": "long polling can still result in \nempty responses",
    "start": "127290",
    "end": "130201"
  },
  {
    "text": "and is very taxing on the server.",
    "start": "130201",
    "end": "132346"
  },
  {
    "text": "The better way is to use WebSockets.",
    "start": "133200",
    "end": "135673"
  },
  {
    "text": "WebSocket is a TCP-based protocol",
    "start": "135673",
    "end": "138306"
  },
  {
    "text": "which enables bi-directional \nfull duplex communication,",
    "start": "138306",
    "end": "141631"
  },
  {
    "text": "where the client and the server \ncan independently send messages to each other.",
    "start": "141631",
    "end": "145847"
  },
  {
    "text": "WebSocket protocol is much more \nlight weight than long polling.",
    "start": "145847",
    "end": "150092"
  },
  {
    "text": "Now let's see how we can build \nserverless web architectures on AWS",
    "start": "150092",
    "end": "154528"
  },
  {
    "text": "using API Gateway and WebSockets.",
    "start": "154528",
    "end": "157345"
  },
  {
    "text": "In API Gateway your Websocket API \naccesses stateful frontend",
    "start": "158015",
    "end": "162870"
  },
  {
    "text": "for AWS services like Lambda \nand DynamoDB.",
    "start": "162870",
    "end": "166159"
  },
  {
    "text": "In your WebSocket API, \nincoming JSON messages",
    "start": "166160",
    "end": "170321"
  },
  {
    "text": "can be routed to the right back end \nbased on the routes you define.",
    "start": "170321",
    "end": "174795"
  },
  {
    "text": "For our scenario, we will configure \nthree routes.",
    "start": "174795",
    "end": "178323"
  },
  {
    "text": "First is a Connect route.",
    "start": "178323",
    "end": "181075"
  },
  {
    "text": "This is used when a client first connects \nto your WebSocket API.",
    "start": "181075",
    "end": "185163"
  },
  {
    "text": "You can define a Lambda proxy integration \nfor this route,",
    "start": "185163",
    "end": "188694"
  },
  {
    "text": "which gets triggered when the user \nconnects to the WebSocket API.",
    "start": "188695",
    "end": "192300"
  },
  {
    "text": "The Lambda function stores \nthe WebSocket Connection ID",
    "start": "192300",
    "end": "195740"
  },
  {
    "text": "in a DynamoDB table. ",
    "start": "195740",
    "end": "197459"
  },
  {
    "text": "We will see in a bit why that's required.",
    "start": "197459",
    "end": "200398"
  },
  {
    "text": "Next, you define a SendMessage route.",
    "start": "200398",
    "end": "203704"
  },
  {
    "text": "This is used when the user \nsends a message.",
    "start": "203704",
    "end": "206668"
  },
  {
    "text": "Another Lambda integration \ntakes this message ",
    "start": "206668",
    "end": "209338"
  },
  {
    "text": "and persist it into a DynamoDB table.",
    "start": "209338",
    "end": "212103"
  },
  {
    "text": "Next, leveraging DynamoDB streams, \nthese messages can be",
    "start": "212103",
    "end": "216668"
  },
  {
    "text": "asynchronously processed \nby another Lambda function ",
    "start": "216668",
    "end": "219477"
  },
  {
    "text": "that performs the business logic \nand generates the response.",
    "start": "219477",
    "end": "222825"
  },
  {
    "text": "Now you must be wondering \nwhy use a Lambda function",
    "start": "223450",
    "end": "226416"
  },
  {
    "text": "to write data to DynamoDB just to trigger \nanother Lambda function to process it.",
    "start": "226416",
    "end": "231147"
  },
  {
    "text": "This is to decouple the back end processing \nfrom the incoming request.",
    "start": "231147",
    "end": "235571"
  },
  {
    "text": "If we were to push all the business logic \nto a single Lambda function,",
    "start": "235571",
    "end": "239450"
  },
  {
    "text": "and if this Lambda function \ntakes too long or errors out,",
    "start": "239450",
    "end": "242542"
  },
  {
    "text": "we end up adding latency to our flow.",
    "start": "242542",
    "end": "244941"
  },
  {
    "text": "Additionally, if you had any \ndownstream dependencies,",
    "start": "244941",
    "end": "248217"
  },
  {
    "text": "adding a queue or a stream acts as a buffer \nto store a pending request,",
    "start": "248218",
    "end": "253096"
  },
  {
    "text": "which can be consumed \nby the downstream processing layer",
    "start": "253096",
    "end": "255722"
  },
  {
    "text": "at a pace that works for them. ",
    "start": "255723",
    "end": "257564"
  },
  {
    "text": "Using the connection ID \nwhich we persist it into DynamoDB earlier,",
    "start": "258104",
    "end": "262557"
  },
  {
    "text": "the Lambda function can create \na callback URL,",
    "start": "262557",
    "end": "265079"
  },
  {
    "text": "which it uses to push a message \nto the client asynchronously.",
    "start": "265079",
    "end": "268634"
  },
  {
    "text": "Additionally, the Lambda function can push \nmultiple messages to the user if required",
    "start": "269008",
    "end": "274113"
  },
  {
    "text": "using the same callback URL.",
    "start": "274113",
    "end": "276170"
  },
  {
    "text": "Note that a single WebSocket API connection \ncan last for up to two hours,",
    "start": "276394",
    "end": "280755"
  },
  {
    "text": "so you don't have to worry \nabout time-outs.",
    "start": "280755",
    "end": "282834"
  },
  {
    "text": "During this period, both parties \ncan exchange any number of messages.",
    "start": "282834",
    "end": "287041"
  },
  {
    "text": "Finally, when the session is completed,",
    "start": "287041",
    "end": "290111"
  },
  {
    "text": "the user sends a disconnect\nwhich triggers the disconnect route.",
    "start": "290111",
    "end": "294007"
  },
  {
    "text": "Here, another Lambda integration \ncan optionally clean up the entries ",
    "start": "294007",
    "end": "297651"
  },
  {
    "text": "in the DynamoDB database.",
    "start": "297651",
    "end": "299441"
  },
  {
    "text": "In this session, we saw how \nWebSockets can enable",
    "start": "299941",
    "end": "302942"
  },
  {
    "text": "true asynchronous \nbi-directional communication",
    "start": "302942",
    "end": "305633"
  },
  {
    "text": "between a client and a server.",
    "start": "305633",
    "end": "307369"
  },
  {
    "text": "Further, we explored \na serverless architecture ",
    "start": "307369",
    "end": "310281"
  },
  {
    "text": "leveraging API Gateway, Lambda, \nand DynamoDB",
    "start": "310282",
    "end": "313184"
  },
  {
    "text": "to implement a WebSocket API on AWS.",
    "start": "313184",
    "end": "316134"
  },
  {
    "text": "Check out the links below \nfor more details.",
    "start": "316134",
    "end": "318415"
  },
  {
    "text": "See you next time.",
    "start": "318415",
    "end": "319637"
  }
]