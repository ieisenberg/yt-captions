[
  {
    "text": "hello folks my name is inder I'm senior",
    "start": "880",
    "end": "3399"
  },
  {
    "text": "product manager with Amazon document DB",
    "start": "3399",
    "end": "5720"
  },
  {
    "text": "today we learn about Vector search and",
    "start": "5720",
    "end": "7759"
  },
  {
    "text": "how to build a semantic search app using",
    "start": "7759",
    "end": "10360"
  },
  {
    "text": "it so let's get",
    "start": "10360",
    "end": "12960"
  },
  {
    "text": "started my presentation will be divided",
    "start": "12960",
    "end": "15480"
  },
  {
    "text": "into four parts I'll quickly introduce",
    "start": "15480",
    "end": "18119"
  },
  {
    "text": "you to Amazon document DB then we will",
    "start": "18119",
    "end": "21400"
  },
  {
    "text": "Deep dive into Vector search capability",
    "start": "21400",
    "end": "24240"
  },
  {
    "text": "the third most interesting part I will",
    "start": "24240",
    "end": "26720"
  },
  {
    "text": "tell you how to build a semantic search",
    "start": "26720",
    "end": "28679"
  },
  {
    "text": "app show you a demo as as well as my",
    "start": "28679",
    "end": "30560"
  },
  {
    "text": "notebook and then in the end I will give",
    "start": "30560",
    "end": "32960"
  },
  {
    "text": "you four reasons why to choose document",
    "start": "32960",
    "end": "35160"
  },
  {
    "text": "DB as your vector",
    "start": "35160",
    "end": "38440"
  },
  {
    "text": "store Amazon document DB as name suggest",
    "start": "39320",
    "end": "42879"
  },
  {
    "text": "is a Json based document database the",
    "start": "42879",
    "end": "46239"
  },
  {
    "text": "best part with document databases are",
    "start": "46239",
    "end": "48399"
  },
  {
    "text": "they are very developer friendly and",
    "start": "48399",
    "end": "51280"
  },
  {
    "text": "require no schema so very AP for",
    "start": "51280",
    "end": "54600"
  },
  {
    "text": "unstructured data document DB database",
    "start": "54600",
    "end": "59079"
  },
  {
    "text": "is designed in a way that the storage",
    "start": "59079",
    "end": "61760"
  },
  {
    "text": "and compute are decoupled so you can",
    "start": "61760",
    "end": "64559"
  },
  {
    "text": "scale these two components independently",
    "start": "64559",
    "end": "67560"
  },
  {
    "text": "which is helpful in cost",
    "start": "67560",
    "end": "70200"
  },
  {
    "text": "optimization we support two offerings",
    "start": "70200",
    "end": "73280"
  },
  {
    "text": "instance based and elastic clusters our",
    "start": "73280",
    "end": "76560"
  },
  {
    "text": "database are fully managed you take care",
    "start": "76560",
    "end": "79759"
  },
  {
    "text": "of your applications and we take care of",
    "start": "79759",
    "end": "82400"
  },
  {
    "text": "all your database needs we are one of",
    "start": "82400",
    "end": "86000"
  },
  {
    "text": "the database which provides dual pricing",
    "start": "86000",
    "end": "88920"
  },
  {
    "text": "model standard offering and I optimized",
    "start": "88920",
    "end": "92920"
  },
  {
    "text": "offering we are Enterprise ready provide",
    "start": "92920",
    "end": "96439"
  },
  {
    "text": "availability of",
    "start": "96439",
    "end": "97880"
  },
  {
    "text": "49 uh we copy your storage across three",
    "start": "97880",
    "end": "102399"
  },
  {
    "text": "availability zones that provides data",
    "start": "102399",
    "end": "105840"
  },
  {
    "text": "durability uh our availability is also",
    "start": "105840",
    "end": "108399"
  },
  {
    "text": "very high we have a feature called",
    "start": "108399",
    "end": "110320"
  },
  {
    "text": "Global clusters that helps you in",
    "start": "110320",
    "end": "112520"
  },
  {
    "text": "Disaster Recovery during region outage",
    "start": "112520",
    "end": "115960"
  },
  {
    "text": "also provides you local reads we are",
    "start": "115960",
    "end": "118600"
  },
  {
    "text": "part of AWS so document DB has all the",
    "start": "118600",
    "end": "122119"
  },
  {
    "text": "tier one security features and last but",
    "start": "122119",
    "end": "125320"
  },
  {
    "text": "not the least we are compatible with",
    "start": "125320",
    "end": "127000"
  },
  {
    "text": "mongodb API which a lot of developers",
    "start": "127000",
    "end": "129560"
  },
  {
    "text": "like it before we Deep dive into Vector",
    "start": "129560",
    "end": "132480"
  },
  {
    "text": "search I wanted to address the question",
    "start": "132480",
    "end": "134959"
  },
  {
    "text": "why vectors are important vectors are a",
    "start": "134959",
    "end": "137560"
  },
  {
    "text": "way by which machines are able to",
    "start": "137560",
    "end": "139720"
  },
  {
    "text": "understand the unstructured data be it",
    "start": "139720",
    "end": "141959"
  },
  {
    "text": "text audio or video I'm taking a very",
    "start": "141959",
    "end": "145800"
  },
  {
    "text": "famous example here I have four vectors",
    "start": "145800",
    "end": "147959"
  },
  {
    "text": "on the screen queen king woman and man",
    "start": "147959",
    "end": "151120"
  },
  {
    "text": "uh these vectors have two Dimensions uh",
    "start": "151120",
    "end": "154040"
  },
  {
    "text": "Dimension One is gender related",
    "start": "154040",
    "end": "157000"
  },
  {
    "text": "Dimension two is royalty related we can",
    "start": "157000",
    "end": "160480"
  },
  {
    "text": "see x coordinate 0.3 is same as woman x",
    "start": "160480",
    "end": "165159"
  },
  {
    "text": "coordinate 0.3 so they are similar in",
    "start": "165159",
    "end": "167480"
  },
  {
    "text": "the gender dimension in the same way",
    "start": "167480",
    "end": "170080"
  },
  {
    "text": "King is equal to man in the gender",
    "start": "170080",
    "end": "173280"
  },
  {
    "text": "Dimension 0.5 however if you look the y",
    "start": "173280",
    "end": "176319"
  },
  {
    "text": "coordinate Queen and King are similar",
    "start": "176319",
    "end": "178879"
  },
  {
    "text": "0.9 0 .7 these two numbers are closer",
    "start": "178879",
    "end": "183440"
  },
  {
    "text": "and wom and man are together 0.4 and 0.2",
    "start": "183440",
    "end": "186920"
  },
  {
    "text": "are closer so machines will understand",
    "start": "186920",
    "end": "189280"
  },
  {
    "text": "that Queen and woman are similar on the",
    "start": "189280",
    "end": "192319"
  },
  {
    "text": "gender Dimension and probably Queen and",
    "start": "192319",
    "end": "194720"
  },
  {
    "text": "King are similar on the royalty",
    "start": "194720",
    "end": "196319"
  },
  {
    "text": "dimensions and that is how the",
    "start": "196319",
    "end": "197680"
  },
  {
    "text": "unstructured data is making sense and",
    "start": "197680",
    "end": "200440"
  },
  {
    "text": "the patterns are emerging what is Vector",
    "start": "200440",
    "end": "202799"
  },
  {
    "text": "search for Amazon document DB like I",
    "start": "202799",
    "end": "205200"
  },
  {
    "text": "explained before document DB is a",
    "start": "205200",
    "end": "206959"
  },
  {
    "text": "document data store if you marry that",
    "start": "206959",
    "end": "209480"
  },
  {
    "text": "with Vector database you get Vector",
    "start": "209480",
    "end": "211319"
  },
  {
    "text": "search for Amazon document DB so you get",
    "start": "211319",
    "end": "213799"
  },
  {
    "text": "best of both the worlds and especially",
    "start": "213799",
    "end": "215720"
  },
  {
    "text": "in case of AIML workloads unstructured",
    "start": "215720",
    "end": "218360"
  },
  {
    "text": "data is prevailing so document DB is",
    "start": "218360",
    "end": "220599"
  },
  {
    "text": "very powerful and now if you mix it with",
    "start": "220599",
    "end": "223920"
  },
  {
    "text": "Vector database then it becomes even",
    "start": "223920",
    "end": "226560"
  },
  {
    "text": "more powerful what are the advantages",
    "start": "226560",
    "end": "228720"
  },
  {
    "text": "you eliminate the need to manage two",
    "start": "228720",
    "end": "230640"
  },
  {
    "text": "database um now you don't have to sync",
    "start": "230640",
    "end": "233000"
  },
  {
    "text": "data from one database to another or",
    "start": "233000",
    "end": "235599"
  },
  {
    "text": "copy them there is no extra cost and",
    "start": "235599",
    "end": "239120"
  },
  {
    "text": "once you eliminate all of this and the",
    "start": "239120",
    "end": "241720"
  },
  {
    "text": "vector search is built natively that",
    "start": "241720",
    "end": "243760"
  },
  {
    "text": "means your query performance will also",
    "start": "243760",
    "end": "245480"
  },
  {
    "text": "be enhanced so it is win-win for the",
    "start": "245480",
    "end": "249079"
  },
  {
    "text": "customers it's very easy to get started",
    "start": "249079",
    "end": "251799"
  },
  {
    "text": "with Vector search in document DB you",
    "start": "251799",
    "end": "253760"
  },
  {
    "text": "don't have to spin off a new cluster or",
    "start": "253760",
    "end": "256320"
  },
  {
    "text": "switch on a new setting the API is again",
    "start": "256320",
    "end": "260040"
  },
  {
    "text": "intact uh you can see the similar",
    "start": "260040",
    "end": "262960"
  },
  {
    "text": "structure create index dollar search are",
    "start": "262960",
    "end": "266160"
  },
  {
    "text": "existing mongodb apis and within that we",
    "start": "266160",
    "end": "269320"
  },
  {
    "text": "have given in the functionality of",
    "start": "269320",
    "end": "270840"
  },
  {
    "text": "vector search again Json is the base",
    "start": "270840",
    "end": "274720"
  },
  {
    "text": "very easy to read and write the code",
    "start": "274720",
    "end": "278039"
  },
  {
    "text": "there are variety of use cases in Vector",
    "start": "278039",
    "end": "280039"
  },
  {
    "text": "search but we are seeing four common use",
    "start": "280039",
    "end": "283199"
  },
  {
    "text": "cases here semantic search which we are",
    "start": "283199",
    "end": "286000"
  },
  {
    "text": "covering today basically searching the",
    "start": "286000",
    "end": "288360"
  },
  {
    "text": "database not just on the keyword but",
    "start": "288360",
    "end": "291199"
  },
  {
    "text": "also on the meaning of that word second",
    "start": "291199",
    "end": "293720"
  },
  {
    "text": "is recommendation engine imagine you are",
    "start": "293720",
    "end": "296039"
  },
  {
    "text": "a product catalog website or a movie",
    "start": "296039",
    "end": "298759"
  },
  {
    "text": "streaming company and you want to show",
    "start": "298759",
    "end": "301400"
  },
  {
    "text": "movies or products similar to your",
    "start": "301400",
    "end": "303880"
  },
  {
    "text": "users's profile or needs then Vector",
    "start": "303880",
    "end": "306520"
  },
  {
    "text": "search could be a great way to implement",
    "start": "306520",
    "end": "309000"
  },
  {
    "text": "it very common and popular uh use case",
    "start": "309000",
    "end": "311720"
  },
  {
    "text": "chatbots especially in the domain of",
    "start": "311720",
    "end": "314199"
  },
  {
    "text": "customer care again in Vector search can",
    "start": "314199",
    "end": "316960"
  },
  {
    "text": "be very useful to implement that fourth",
    "start": "316960",
    "end": "319479"
  },
  {
    "text": "anomaly detection imagine Financial",
    "start": "319479",
    "end": "321880"
  },
  {
    "text": "Services sector uh say you have a",
    "start": "321880",
    "end": "324400"
  },
  {
    "text": "banking app which is alerting you if you",
    "start": "324400",
    "end": "327680"
  },
  {
    "text": "spend an amount which is more than the",
    "start": "327680",
    "end": "329880"
  },
  {
    "text": "typical average that you spend or you",
    "start": "329880",
    "end": "332960"
  },
  {
    "text": "shopped at a place where it's not the",
    "start": "332960",
    "end": "335840"
  },
  {
    "text": "usual uh uh shop or it's not the usual",
    "start": "335840",
    "end": "339560"
  },
  {
    "text": "brand that you buy and it alerts you so",
    "start": "339560",
    "end": "342600"
  },
  {
    "text": "all those can be achieved through Vector",
    "start": "342600",
    "end": "344919"
  },
  {
    "text": "search Vector search supports 2,000",
    "start": "344919",
    "end": "348919"
  },
  {
    "text": "dimensions for the index uh we give",
    "start": "348919",
    "end": "352319"
  },
  {
    "text": "functionality of all the three distance",
    "start": "352319",
    "end": "354440"
  },
  {
    "text": "metrics whether youlean cosign do",
    "start": "354440",
    "end": "356759"
  },
  {
    "text": "product you as user have the option to",
    "start": "356759",
    "end": "359240"
  },
  {
    "text": "choose right now we are supporting two",
    "start": "359240",
    "end": "361160"
  },
  {
    "text": "index typee hnsw the most performant and",
    "start": "361160",
    "end": "364400"
  },
  {
    "text": "the default index we also give our",
    "start": "364400",
    "end": "367080"
  },
  {
    "text": "customers the option to choose IVF flat",
    "start": "367080",
    "end": "370319"
  },
  {
    "text": "which is very useful in case of PC's",
    "start": "370319",
    "end": "373000"
  },
  {
    "text": "because the index build time is quite",
    "start": "373000",
    "end": "377160"
  },
  {
    "text": "less so let's see how to build a",
    "start": "377400",
    "end": "380080"
  },
  {
    "text": "semantic search app before I show you",
    "start": "380080",
    "end": "383000"
  },
  {
    "text": "the demo I wanted to walk you through",
    "start": "383000",
    "end": "384720"
  },
  {
    "text": "the basic",
    "start": "384720",
    "end": "385800"
  },
  {
    "text": "architecture the first step in the",
    "start": "385800",
    "end": "388199"
  },
  {
    "text": "semantic search app will be to load the",
    "start": "388199",
    "end": "390919"
  },
  {
    "text": "database and to load the relevant Vector",
    "start": "390919",
    "end": "393400"
  },
  {
    "text": "embeddings into document DB now to do",
    "start": "393400",
    "end": "397080"
  },
  {
    "text": "that you need to know which Fields you",
    "start": "397080",
    "end": "399160"
  },
  {
    "text": "want to convert into vector embeddings",
    "start": "399160",
    "end": "401000"
  },
  {
    "text": "and also choose a model in My Demo I",
    "start": "401000",
    "end": "403919"
  },
  {
    "text": "will be choosing uh Amazon's Titan",
    "start": "403919",
    "end": "406919"
  },
  {
    "text": "embedding model however you are free to",
    "start": "406919",
    "end": "409280"
  },
  {
    "text": "choose whatever you",
    "start": "409280",
    "end": "410840"
  },
  {
    "text": "want once my model is chosen and I have",
    "start": "410840",
    "end": "417000"
  },
  {
    "text": "converted the relevant Fields into the",
    "start": "417000",
    "end": "419120"
  },
  {
    "text": "vector embeddings I can go to step two",
    "start": "419120",
    "end": "422400"
  },
  {
    "text": "where now my client application will ask",
    "start": "422400",
    "end": "425800"
  },
  {
    "text": "a query say my query is adventurous",
    "start": "425800",
    "end": "428319"
  },
  {
    "text": "movies but then this query itself is",
    "start": "428319",
    "end": "432319"
  },
  {
    "text": "also unstructured data that is text so I",
    "start": "432319",
    "end": "435240"
  },
  {
    "text": "need to convert that query into Vector",
    "start": "435240",
    "end": "438240"
  },
  {
    "text": "embeddings once that is done the",
    "start": "438240",
    "end": "440840"
  },
  {
    "text": "embedding model will send that query",
    "start": "440840",
    "end": "443160"
  },
  {
    "text": "back to the client",
    "start": "443160",
    "end": "444680"
  },
  {
    "text": "application U by converting that into",
    "start": "444680",
    "end": "447400"
  },
  {
    "text": "vector embeddings and now my client",
    "start": "447400",
    "end": "450319"
  },
  {
    "text": "application can take that vetor",
    "start": "450319",
    "end": "452080"
  },
  {
    "text": "embedding and send it to the embedded",
    "start": "452080",
    "end": "455599"
  },
  {
    "text": "query send it to the document DB so that",
    "start": "455599",
    "end": "459479"
  },
  {
    "text": "it can query that database once document",
    "start": "459479",
    "end": "462840"
  },
  {
    "text": "DB receives that embedded query it will",
    "start": "462840",
    "end": "465639"
  },
  {
    "text": "search all the documents and uh try to",
    "start": "465639",
    "end": "469599"
  },
  {
    "text": "get the similar",
    "start": "469599",
    "end": "470919"
  },
  {
    "text": "documents once the similar documents are",
    "start": "470919",
    "end": "473360"
  },
  {
    "text": "there we come to our ultimate step that",
    "start": "473360",
    "end": "476560"
  },
  {
    "text": "those similar documents will be sent",
    "start": "476560",
    "end": "478120"
  },
  {
    "text": "back to the client application and your",
    "start": "478120",
    "end": "480360"
  },
  {
    "text": "semetic search um app is",
    "start": "480360",
    "end": "484159"
  },
  {
    "text": "completed and this basic architecture is",
    "start": "484159",
    "end": "488560"
  },
  {
    "text": "the foundation of all other use cases",
    "start": "488560",
    "end": "491840"
  },
  {
    "text": "for example drag let's see that in a",
    "start": "491840",
    "end": "497199"
  },
  {
    "text": "demo so here is the demo I've built a",
    "start": "497599",
    "end": "500680"
  },
  {
    "text": "movie search app um and this app is",
    "start": "500680",
    "end": "505400"
  },
  {
    "text": "backed by database which has list of",
    "start": "505400",
    "end": "507560"
  },
  {
    "text": "movies with their movie description and",
    "start": "507560",
    "end": "509520"
  },
  {
    "text": "some other details uh let's say I want",
    "start": "509520",
    "end": "512518"
  },
  {
    "text": "to see movies related to aliens I search",
    "start": "512519",
    "end": "516320"
  },
  {
    "text": "the word aliens",
    "start": "516320",
    "end": "518518"
  },
  {
    "text": "traditionally how the search works is if",
    "start": "518519",
    "end": "521919"
  },
  {
    "text": "I click on the text search it will",
    "start": "521919",
    "end": "523919"
  },
  {
    "text": "search for the keyword aliens here there",
    "start": "523919",
    "end": "526480"
  },
  {
    "text": "is one keyword that is why I got Avatar",
    "start": "526480",
    "end": "529360"
  },
  {
    "text": "here is another word alien I got",
    "start": "529360",
    "end": "531480"
  },
  {
    "text": "Spider-Man 3 avatar looks like a good",
    "start": "531480",
    "end": "534080"
  },
  {
    "text": "result Spider-Man 3 I'm not sure but",
    "start": "534080",
    "end": "536880"
  },
  {
    "text": "again the search looks good because the",
    "start": "536880",
    "end": "539600"
  },
  {
    "text": "word alien is there if I do the same",
    "start": "539600",
    "end": "542839"
  },
  {
    "text": "search",
    "start": "542839",
    "end": "545440"
  },
  {
    "text": "semantically now I get Star Wars which",
    "start": "545440",
    "end": "548519"
  },
  {
    "text": "is good result in this context however",
    "start": "548519",
    "end": "552160"
  },
  {
    "text": "you can see there is no word alien in it",
    "start": "552160",
    "end": "554440"
  },
  {
    "text": "in the description and still it's fine",
    "start": "554440",
    "end": "558120"
  },
  {
    "text": "that so that is good that is what we",
    "start": "558120",
    "end": "560160"
  },
  {
    "text": "want semantic search to do and then",
    "start": "560160",
    "end": "562800"
  },
  {
    "text": "Avatar again a good result this was also",
    "start": "562800",
    "end": "566880"
  },
  {
    "text": "there in teex Search and it is also",
    "start": "566880",
    "end": "569399"
  },
  {
    "text": "captured by semantic search so here",
    "start": "569399",
    "end": "572160"
  },
  {
    "text": "semantic search is very useful because",
    "start": "572160",
    "end": "573880"
  },
  {
    "text": "it's able to capture Star Wars as well",
    "start": "573880",
    "end": "576120"
  },
  {
    "text": "as Avatar and Tech search wasn't able to",
    "start": "576120",
    "end": "579720"
  },
  {
    "text": "capture the Star Wars movie let's take",
    "start": "579720",
    "end": "582920"
  },
  {
    "text": "something else say",
    "start": "582920",
    "end": "584800"
  },
  {
    "text": "wizard now visit again we do text search",
    "start": "584800",
    "end": "589120"
  },
  {
    "text": "we get Harry Potter in the word visit is",
    "start": "589120",
    "end": "591880"
  },
  {
    "text": "there that is why we get uh Harry Potter",
    "start": "591880",
    "end": "595720"
  },
  {
    "text": "here also it's mentioned but we also get",
    "start": "595720",
    "end": "598399"
  },
  {
    "text": "a lot of the Rings again the word visit",
    "start": "598399",
    "end": "601240"
  },
  {
    "text": "is there",
    "start": "601240",
    "end": "603800"
  },
  {
    "text": "now semantic search if I do I get all",
    "start": "603800",
    "end": "608200"
  },
  {
    "text": "the results at different versions of",
    "start": "608200",
    "end": "609920"
  },
  {
    "text": "Harry Potter I don't get a lot of the",
    "start": "609920",
    "end": "611760"
  },
  {
    "text": "Rings again semantically Harry",
    "start": "611760",
    "end": "615079"
  },
  {
    "text": "Potter uh is close to the magic word",
    "start": "615079",
    "end": "618399"
  },
  {
    "text": "magic and probably that is why it is",
    "start": "618399",
    "end": "621240"
  },
  {
    "text": "giving us uh all the Harry Potters and",
    "start": "621240",
    "end": "624279"
  },
  {
    "text": "not lot of the",
    "start": "624279",
    "end": "626440"
  },
  {
    "text": "Rings and so here comes another point",
    "start": "626440",
    "end": "630000"
  },
  {
    "text": "that sometimes for more intuitive result",
    "start": "630000",
    "end": "633760"
  },
  {
    "text": "you might have to combine text search",
    "start": "633760",
    "end": "635440"
  },
  {
    "text": "and semantic search or combine different",
    "start": "635440",
    "end": "637800"
  },
  {
    "text": "forms of searches which you can easily",
    "start": "637800",
    "end": "639760"
  },
  {
    "text": "do with document DB and that is the",
    "start": "639760",
    "end": "642320"
  },
  {
    "text": "hybrid search you can build for your",
    "start": "642320",
    "end": "644160"
  },
  {
    "text": "AIML",
    "start": "644160",
    "end": "646600"
  },
  {
    "text": "applications so let's see how I build",
    "start": "646600",
    "end": "649399"
  },
  {
    "text": "this and what is happening behind the",
    "start": "649399",
    "end": "651040"
  },
  {
    "text": "scenes I'll show you my",
    "start": "651040",
    "end": "654240"
  },
  {
    "text": "notebook okay so let's look at my",
    "start": "654240",
    "end": "657120"
  },
  {
    "text": "notebook I have coded um my semantic",
    "start": "657120",
    "end": "659839"
  },
  {
    "text": "search app",
    "start": "659839",
    "end": "661399"
  },
  {
    "text": "in Python so here are my dependencies I",
    "start": "661399",
    "end": "665959"
  },
  {
    "text": "use gradio for my demo as you saw here",
    "start": "665959",
    "end": "670160"
  },
  {
    "text": "is my connection string I'm using p",
    "start": "670160",
    "end": "673000"
  },
  {
    "text": " uh library to connect to my",
    "start": "673000",
    "end": "676079"
  },
  {
    "text": "document DB cluster I already had it uh",
    "start": "676079",
    "end": "679760"
  },
  {
    "text": "my database is semantic demo and",
    "start": "679760",
    "end": "682639"
  },
  {
    "text": "collection movies uh and once I'm",
    "start": "682639",
    "end": "685760"
  },
  {
    "text": "connected I'm ready to go then like I",
    "start": "685760",
    "end": "689440"
  },
  {
    "text": "said you should have a embedding model",
    "start": "689440",
    "end": "693600"
  },
  {
    "text": "so here I'm using Bedrock so I'm",
    "start": "693600",
    "end": "695880"
  },
  {
    "text": "initializing the Bedrock",
    "start": "695880",
    "end": "698200"
  },
  {
    "text": "client uh here was my movie so when I",
    "start": "698200",
    "end": "701120"
  },
  {
    "text": "uploaded my database I used this CSV",
    "start": "701120",
    "end": "704279"
  },
  {
    "text": "file and uploaded it to document DB um",
    "start": "704279",
    "end": "708279"
  },
  {
    "text": "and then once that data was uploaded I",
    "start": "708279",
    "end": "710560"
  },
  {
    "text": "had to convert that into embeddings for",
    "start": "710560",
    "end": "712639"
  },
  {
    "text": "that I created a uh embedding function",
    "start": "712639",
    "end": "717399"
  },
  {
    "text": "again I am giving the model",
    "start": "717399",
    "end": "719800"
  },
  {
    "text": "specifications here Amazon Titan like I",
    "start": "719800",
    "end": "722800"
  },
  {
    "text": "said was my model uh from",
    "start": "722800",
    "end": "725720"
  },
  {
    "text": "bedrock and then I generated this",
    "start": "725720",
    "end": "730120"
  },
  {
    "text": "function uh I'm basically taking giving",
    "start": "730120",
    "end": "734320"
  },
  {
    "text": "the input as Json and then I'm getting",
    "start": "734320",
    "end": "737440"
  },
  {
    "text": "the response and from the response there",
    "start": "737440",
    "end": "740360"
  },
  {
    "text": "are a lot of fields I'm just interested",
    "start": "740360",
    "end": "742240"
  },
  {
    "text": "in the embedding so I'm just taking out",
    "start": "742240",
    "end": "744199"
  },
  {
    "text": "that embedding again all that um API",
    "start": "744199",
    "end": "748480"
  },
  {
    "text": "structure",
    "start": "748480",
    "end": "749680"
  },
  {
    "text": "of Bedrock you can get it from the",
    "start": "749680",
    "end": "752320"
  },
  {
    "text": "documentation very",
    "start": "752320",
    "end": "754360"
  },
  {
    "text": "easy and once that is done I loaded all",
    "start": "754360",
    "end": "758040"
  },
  {
    "text": "the document embeddings into my database",
    "start": "758040",
    "end": "761839"
  },
  {
    "text": "again I did that in batches here it's",
    "start": "761839",
    "end": "764720"
  },
  {
    "text": "just you can do it uh in one go because",
    "start": "764720",
    "end": "768079"
  },
  {
    "text": "I just had 50 documents but in case you",
    "start": "768079",
    "end": "770199"
  },
  {
    "text": "have uh thousands of documents it's",
    "start": "770199",
    "end": "772760"
  },
  {
    "text": "recommended to do in in batches um once",
    "start": "772760",
    "end": "776120"
  },
  {
    "text": "that is done you can create your hnsw",
    "start": "776120",
    "end": "779519"
  },
  {
    "text": "Vector index uh in this case I did it on",
    "start": "779519",
    "end": "783600"
  },
  {
    "text": "embedding field now it's good time to",
    "start": "783600",
    "end": "785880"
  },
  {
    "text": "show you how a typical document would",
    "start": "785880",
    "end": "789120"
  },
  {
    "text": "look like so say for example I go to my",
    "start": "789120",
    "end": "792040"
  },
  {
    "text": "semantic demo a database collection",
    "start": "792040",
    "end": "795399"
  },
  {
    "text": "movies if I click on my documents here",
    "start": "795399",
    "end": "799079"
  },
  {
    "text": "let's look at one of the documents you",
    "start": "799079",
    "end": "800920"
  },
  {
    "text": "see here is the movie title here is the",
    "start": "800920",
    "end": "803760"
  },
  {
    "text": "overview which is the movie description",
    "start": "803760",
    "end": "806160"
  },
  {
    "text": "and this is the field which I chose I",
    "start": "806160",
    "end": "809360"
  },
  {
    "text": "converted then to vector embeddings and",
    "start": "809360",
    "end": "812199"
  },
  {
    "text": "then see here you can see the embedding",
    "start": "812199",
    "end": "815040"
  },
  {
    "text": "from bedrocks Titan model uh it has 1536",
    "start": "815040",
    "end": "819839"
  },
  {
    "text": "dimensions",
    "start": "819839",
    "end": "821519"
  },
  {
    "text": "and and this embedding refers to this",
    "start": "821519",
    "end": "824440"
  },
  {
    "text": "overview field I could have chosen other",
    "start": "824440",
    "end": "826880"
  },
  {
    "text": "field as well but this is what I wanted",
    "start": "826880",
    "end": "829639"
  },
  {
    "text": "to semantically search the description",
    "start": "829639",
    "end": "831880"
  },
  {
    "text": "so I did that overview field similar if",
    "start": "831880",
    "end": "834480"
  },
  {
    "text": "I click on another document you can see",
    "start": "834480",
    "end": "836920"
  },
  {
    "text": "it's the same another movie",
    "start": "836920",
    "end": "839560"
  },
  {
    "text": "uh description and then the embeddings",
    "start": "839560",
    "end": "842240"
  },
  {
    "text": "so all the documents in the database now",
    "start": "842240",
    "end": "844399"
  },
  {
    "text": "have the embeddings so that I can search",
    "start": "844399",
    "end": "848160"
  },
  {
    "text": "semantically uh once so and then like I",
    "start": "848600",
    "end": "852120"
  },
  {
    "text": "said I created the hnsw index very",
    "start": "852120",
    "end": "854680"
  },
  {
    "text": "important like Dimensions should be",
    "start": "854680",
    "end": "856800"
  },
  {
    "text": "similar to uh what your embedding model",
    "start": "856800",
    "end": "859440"
  },
  {
    "text": "is using uh M and EF constructions are",
    "start": "859440",
    "end": "862600"
  },
  {
    "text": "the parameters that can help you",
    "start": "862600",
    "end": "864279"
  },
  {
    "text": "fine-tune your recall and uh QPS so it's",
    "start": "864279",
    "end": "868480"
  },
  {
    "text": "very important to fine tune these",
    "start": "868480",
    "end": "870399"
  },
  {
    "text": "parameters based on your needs uh we",
    "start": "870399",
    "end": "873199"
  },
  {
    "text": "always give the recommended setting and",
    "start": "873199",
    "end": "875240"
  },
  {
    "text": "default values in our uh documentation",
    "start": "875240",
    "end": "877920"
  },
  {
    "text": "which you can use to start with um once",
    "start": "877920",
    "end": "880920"
  },
  {
    "text": "you are moving towards production load",
    "start": "880920",
    "end": "882959"
  },
  {
    "text": "you should figure out what is the best",
    "start": "882959",
    "end": "885199"
  },
  {
    "text": "value for your use",
    "start": "885199",
    "end": "888120"
  },
  {
    "text": "case once that is done I also created a",
    "start": "888120",
    "end": "891959"
  },
  {
    "text": "text index a document DB again has both",
    "start": "891959",
    "end": "895120"
  },
  {
    "text": "native text and Vector search uh which",
    "start": "895120",
    "end": "898000"
  },
  {
    "text": "is very useful for different use cases",
    "start": "898000",
    "end": "900759"
  },
  {
    "text": "so I created also the text index once",
    "start": "900759",
    "end": "903720"
  },
  {
    "text": "that is done I can create two functions",
    "start": "903720",
    "end": "907320"
  },
  {
    "text": "uh one semantic search function another",
    "start": "907320",
    "end": "909839"
  },
  {
    "text": "text search function in the semantic",
    "start": "909839",
    "end": "912120"
  },
  {
    "text": "search function I'm using the vector",
    "start": "912120",
    "end": "913880"
  },
  {
    "text": "search uh I'm telling here what Vector",
    "start": "913880",
    "end": "917880"
  },
  {
    "text": "to search um by calling the embedding",
    "start": "917880",
    "end": "922240"
  },
  {
    "text": "function converting the query into that",
    "start": "922240",
    "end": "924959"
  },
  {
    "text": "embedding then giving the path which",
    "start": "924959",
    "end": "927839"
  },
  {
    "text": "Vector Where is the Vector field where",
    "start": "927839",
    "end": "930040"
  },
  {
    "text": "it needs to search then the similarity",
    "start": "930040",
    "end": "933319"
  },
  {
    "text": "dimension in this case I'm using do",
    "start": "933319",
    "end": "935759"
  },
  {
    "text": "product it is very important that this s",
    "start": "935759",
    "end": "938880"
  },
  {
    "text": "similarity Dimension should match the",
    "start": "938880",
    "end": "941079"
  },
  {
    "text": "similarity dimension of your vector",
    "start": "941079",
    "end": "943639"
  },
  {
    "text": "index otherwise uh it will not uh take",
    "start": "943639",
    "end": "947560"
  },
  {
    "text": "that index so for example if I go above",
    "start": "947560",
    "end": "952880"
  },
  {
    "text": "this should also be dot product like it",
    "start": "952880",
    "end": "954839"
  },
  {
    "text": "is uh it's very important it should be",
    "start": "954839",
    "end": "957759"
  },
  {
    "text": "same and and then the K is three in this",
    "start": "957759",
    "end": "961920"
  },
  {
    "text": "case so it will give me top three",
    "start": "961920",
    "end": "965319"
  },
  {
    "text": "results and uh similar way I did for uh",
    "start": "965319",
    "end": "969839"
  },
  {
    "text": "text search I created the text search",
    "start": "969839",
    "end": "972759"
  },
  {
    "text": "function using dollar match and dollar",
    "start": "972759",
    "end": "974480"
  },
  {
    "text": "text and once that is done I was able to",
    "start": "974480",
    "end": "978160"
  },
  {
    "text": "call them so like we saw if I search",
    "start": "978160",
    "end": "982040"
  },
  {
    "text": "semantic aliens I used to get Star Wars",
    "start": "982040",
    "end": "985160"
  },
  {
    "text": "but this Star Wars was uh not available",
    "start": "985160",
    "end": "988759"
  },
  {
    "text": "when then I used to uh text Search the",
    "start": "988759",
    "end": "991120"
  },
  {
    "text": "word",
    "start": "991120",
    "end": "991959"
  },
  {
    "text": "aliens so that is how you build the",
    "start": "991959",
    "end": "994759"
  },
  {
    "text": "semantic search app pretty easy um again",
    "start": "994759",
    "end": "999120"
  },
  {
    "text": "it doesn't involve that much code very",
    "start": "999120",
    "end": "1002399"
  },
  {
    "text": "user friendly and developer friendly to",
    "start": "1002399",
    "end": "1004480"
  },
  {
    "text": "code uh Vector",
    "start": "1004480",
    "end": "1007120"
  },
  {
    "text": "search okay so that was semantic search",
    "start": "1007120",
    "end": "1009680"
  },
  {
    "text": "demo before we sign off I wanted to give",
    "start": "1009680",
    "end": "1012279"
  },
  {
    "text": "you four reasons why you should choose",
    "start": "1012279",
    "end": "1014040"
  },
  {
    "text": "document DB as Vector store for your",
    "start": "1014040",
    "end": "1016560"
  },
  {
    "text": "AIML workloads number number one reason",
    "start": "1016560",
    "end": "1020000"
  },
  {
    "text": "is a lot of your AIML applications will",
    "start": "1020000",
    "end": "1023480"
  },
  {
    "text": "involve unstructured data document DB",
    "start": "1023480",
    "end": "1026558"
  },
  {
    "text": "being a document database is very",
    "start": "1026559",
    "end": "1029400"
  },
  {
    "text": "powerful in those scenarios it has a",
    "start": "1029400",
    "end": "1031678"
  },
  {
    "text": "flexible schema so you don't need to",
    "start": "1031679",
    "end": "1034280"
  },
  {
    "text": "plan ahead and you can on the go uh",
    "start": "1034280",
    "end": "1038678"
  },
  {
    "text": "change your database schema as you want",
    "start": "1038679",
    "end": "1041678"
  },
  {
    "text": "because we are schema less second like",
    "start": "1041679",
    "end": "1044798"
  },
  {
    "text": "we also saw briefly in the demo that",
    "start": "1044799",
    "end": "1047678"
  },
  {
    "text": "document DB has a rich aggregation",
    "start": "1047679",
    "end": "1050360"
  },
  {
    "text": "pipeline uh lot of times your best",
    "start": "1050360",
    "end": "1053360"
  },
  {
    "text": "results won't be just semantic search or",
    "start": "1053360",
    "end": "1056080"
  },
  {
    "text": "or just teex search it will be",
    "start": "1056080",
    "end": "1058520"
  },
  {
    "text": "combination of both or combination with",
    "start": "1058520",
    "end": "1061600"
  },
  {
    "text": "other traditional indexes and document",
    "start": "1061600",
    "end": "1064360"
  },
  {
    "text": "DB has a rich quering capability and",
    "start": "1064360",
    "end": "1067039"
  },
  {
    "text": "aggregation pipeline you can make use of",
    "start": "1067039",
    "end": "1069320"
  },
  {
    "text": "all that and create different stages uh",
    "start": "1069320",
    "end": "1072440"
  },
  {
    "text": "to filter your documents and reach at",
    "start": "1072440",
    "end": "1074559"
  },
  {
    "text": "the best results third we are one of the",
    "start": "1074559",
    "end": "1077640"
  },
  {
    "text": "database where which has dual pricing",
    "start": "1077640",
    "end": "1080440"
  },
  {
    "text": "model so uh sometimes paper Ed pricing",
    "start": "1080440",
    "end": "1084280"
  },
  {
    "text": "model are standard offering will be very",
    "start": "1084280",
    "end": "1086960"
  },
  {
    "text": "useful for you or cost effective for you",
    "start": "1086960",
    "end": "1089840"
  },
  {
    "text": "you can go with that there will be some",
    "start": "1089840",
    "end": "1091960"
  },
  {
    "text": "clusters which will require heavy iOS in",
    "start": "1091960",
    "end": "1095760"
  },
  {
    "text": "that case you can choose for those",
    "start": "1095760",
    "end": "1098000"
  },
  {
    "text": "clusters only are IO optimized pricing",
    "start": "1098000",
    "end": "1101440"
  },
  {
    "text": "again so this flexibility of pricing",
    "start": "1101440",
    "end": "1103840"
  },
  {
    "text": "models offers you a lot of cost",
    "start": "1103840",
    "end": "1107600"
  },
  {
    "text": "advantages and and the last we are part",
    "start": "1107600",
    "end": "1110120"
  },
  {
    "text": "of AWS so being part of AWS you get lot",
    "start": "1110120",
    "end": "1114360"
  },
  {
    "text": "of Integrations with other services so",
    "start": "1114360",
    "end": "1116440"
  },
  {
    "text": "that you can easily move your data in",
    "start": "1116440",
    "end": "1118320"
  },
  {
    "text": "and out of document DB and also you",
    "start": "1118320",
    "end": "1121200"
  },
  {
    "text": "leverage uh tier one security features",
    "start": "1121200",
    "end": "1124320"
  },
  {
    "text": "which are very important for your",
    "start": "1124320",
    "end": "1126520"
  },
  {
    "text": "mission critical",
    "start": "1126520",
    "end": "1128760"
  },
  {
    "text": "applications hope you like the demo uh",
    "start": "1128760",
    "end": "1131919"
  },
  {
    "text": "do give us feedback and let's build",
    "start": "1131919",
    "end": "1133960"
  },
  {
    "text": "together with Vector search for Amazon",
    "start": "1133960",
    "end": "1135640"
  },
  {
    "text": "document DB thank",
    "start": "1135640",
    "end": "1137720"
  },
  {
    "text": "you",
    "start": "1137720",
    "end": "1140720"
  }
]