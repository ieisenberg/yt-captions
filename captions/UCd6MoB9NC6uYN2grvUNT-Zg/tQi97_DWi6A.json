[
  {
    "text": "hi there welcome to this demonstration",
    "start": "120",
    "end": "2200"
  },
  {
    "text": "on Amazon upflow and flow chaining",
    "start": "2200",
    "end": "4200"
  },
  {
    "text": "patterns my name is Kam Shan GF and I'm",
    "start": "4200",
    "end": "6799"
  },
  {
    "text": "a senior specialist Solutions architect",
    "start": "6799",
    "end": "8519"
  },
  {
    "text": "with AWS and today I'm going to show you",
    "start": "8519",
    "end": "11120"
  },
  {
    "text": "how to build this pattern Amazon upflow",
    "start": "11120",
    "end": "14160"
  },
  {
    "text": "is a fully managed integration service",
    "start": "14160",
    "end": "16480"
  },
  {
    "text": "that helps you securely transfer data",
    "start": "16480",
    "end": "18480"
  },
  {
    "text": "between SAS applications such as",
    "start": "18480",
    "end": "20080"
  },
  {
    "text": "Salesforce sap Google analytics Facebook",
    "start": "20080",
    "end": "23080"
  },
  {
    "text": "ads service now and many many more and",
    "start": "23080",
    "end": "26400"
  },
  {
    "text": "AWS services such as Amazon simple",
    "start": "26400",
    "end": "28640"
  },
  {
    "text": "storage service S3 short and Amazon red",
    "start": "28640",
    "end": "31759"
  },
  {
    "text": "shift you can do this with just a few",
    "start": "31759",
    "end": "34160"
  },
  {
    "text": "clicks on the AWS console and without",
    "start": "34160",
    "end": "36520"
  },
  {
    "text": "writing any",
    "start": "36520",
    "end": "38600"
  },
  {
    "text": "code now before we begin building our",
    "start": "38600",
    "end": "41440"
  },
  {
    "text": "solution let me explain what the flow",
    "start": "41440",
    "end": "43360"
  },
  {
    "text": "chaining patterns are Amazon upflow",
    "start": "43360",
    "end": "46120"
  },
  {
    "text": "allows you to easily connect to SAS",
    "start": "46120",
    "end": "47920"
  },
  {
    "text": "applications and either read or write",
    "start": "47920",
    "end": "50120"
  },
  {
    "text": "data you can use the service to directly",
    "start": "50120",
    "end": "52680"
  },
  {
    "text": "integrate to two SAS applications for",
    "start": "52680",
    "end": "54600"
  },
  {
    "text": "example you can bring user information",
    "start": "54600",
    "end": "57399"
  },
  {
    "text": "from zenes and write it directly into",
    "start": "57399",
    "end": "60160"
  },
  {
    "text": "your Salesforce instance however",
    "start": "60160",
    "end": "62879"
  },
  {
    "text": "sometimes the data from the source",
    "start": "62879",
    "end": "64518"
  },
  {
    "text": "application may not directly be",
    "start": "64519",
    "end": "66240"
  },
  {
    "text": "applicable to your destination you may",
    "start": "66240",
    "end": "68680"
  },
  {
    "text": "need to either process flatten or enrich",
    "start": "68680",
    "end": "71439"
  },
  {
    "text": "the data before you can write it to your",
    "start": "71439",
    "end": "74080"
  },
  {
    "text": "destination this is where flow chaining",
    "start": "74080",
    "end": "76600"
  },
  {
    "text": "patterns comes in handy so let's see",
    "start": "76600",
    "end": "79360"
  },
  {
    "text": "what are we going to build today for",
    "start": "79360",
    "end": "81280"
  },
  {
    "text": "today's demonstration I will build an",
    "start": "81280",
    "end": "83040"
  },
  {
    "text": "event driven flow chaining pattern",
    "start": "83040",
    "end": "85799"
  },
  {
    "text": "Amazon upflow will help me read my",
    "start": "85799",
    "end": "87840"
  },
  {
    "text": "products data from my sap in",
    "start": "87840",
    "end": "90640"
  },
  {
    "text": "which I will then store on Amazon S3",
    "start": "90640",
    "end": "93680"
  },
  {
    "text": "once the data is saved I will then use",
    "start": "93680",
    "end": "95840"
  },
  {
    "text": "the native integration between Amazon",
    "start": "95840",
    "end": "97799"
  },
  {
    "text": "appf flow and Amazon event bridge to",
    "start": "97799",
    "end": "100399"
  },
  {
    "text": "automatically trigger another flow and",
    "start": "100399",
    "end": "102960"
  },
  {
    "text": "write my extracted data into Salesforce",
    "start": "102960",
    "end": "106399"
  },
  {
    "text": "to trigger the second flow I will use",
    "start": "106399",
    "end": "109040"
  },
  {
    "text": "AWS step functions a serverless",
    "start": "109040",
    "end": "111200"
  },
  {
    "text": "orchestration service that lets us",
    "start": "111200",
    "end": "113280"
  },
  {
    "text": "integrate with AWS services without the",
    "start": "113280",
    "end": "116399"
  },
  {
    "text": "need of writing any code so let's dive",
    "start": "116399",
    "end": "119439"
  },
  {
    "text": "on the WS console and build our",
    "start": "119439",
    "end": "122399"
  },
  {
    "text": "solution okay so the first thing we're",
    "start": "122399",
    "end": "124360"
  },
  {
    "text": "going to do is create an EST bucket and",
    "start": "124360",
    "end": "127680"
  },
  {
    "text": "we're going to call this",
    "start": "127680",
    "end": "129440"
  },
  {
    "text": "bucket flow chaining demo I'm going to",
    "start": "129440",
    "end": "132000"
  },
  {
    "text": "leave all the options as",
    "start": "132000",
    "end": "133959"
  },
  {
    "text": "default uh and then we need to navigate",
    "start": "133959",
    "end": "136480"
  },
  {
    "text": "to uh Amazon appf flow uh where we need",
    "start": "136480",
    "end": "139319"
  },
  {
    "text": "to create uh first of all the",
    "start": "139319",
    "end": "141440"
  },
  {
    "text": "connections uh and then the flow so",
    "start": "141440",
    "end": "143879"
  },
  {
    "text": "first connection is",
    "start": "143879",
    "end": "146480"
  },
  {
    "text": "sap uh we need to provide all the valid",
    "start": "146480",
    "end": "150080"
  },
  {
    "text": "input",
    "start": "150080",
    "end": "152720"
  },
  {
    "text": "here uh and the second connector is a c",
    "start": "154599",
    "end": "159959"
  },
  {
    "text": "Force okay now that we have the",
    "start": "162879",
    "end": "165159"
  },
  {
    "text": "connections created it's time to create",
    "start": "165159",
    "end": "167519"
  },
  {
    "text": "our flow so the first flow will take the",
    "start": "167519",
    "end": "170159"
  },
  {
    "text": "data from sap and store it into uh",
    "start": "170159",
    "end": "173519"
  },
  {
    "text": "Amazon simple storage Service uh so",
    "start": "173519",
    "end": "176200"
  },
  {
    "text": "we're going to select sep as a source uh",
    "start": "176200",
    "end": "179360"
  },
  {
    "text": "we have already created the connection",
    "start": "179360",
    "end": "181480"
  },
  {
    "text": "and here we're going to select our",
    "start": "181480",
    "end": "183959"
  },
  {
    "text": "products uh which are coming in this",
    "start": "183959",
    "end": "187879"
  },
  {
    "text": "object from this",
    "start": "187879",
    "end": "190920"
  },
  {
    "text": "object uh the destination we're going to",
    "start": "191440",
    "end": "193840"
  },
  {
    "text": "choose Amazon S3 we're going to choose",
    "start": "193840",
    "end": "196120"
  },
  {
    "text": "the bucket that we've just created we",
    "start": "196120",
    "end": "198280"
  },
  {
    "text": "don't need to put a prefix flow will",
    "start": "198280",
    "end": "200680"
  },
  {
    "text": "automatically add us one with the name",
    "start": "200680",
    "end": "202920"
  },
  {
    "text": "of the flow uh I will save the data into",
    "start": "202920",
    "end": "205640"
  },
  {
    "text": "uh CSV format so we can read it uh and",
    "start": "205640",
    "end": "208799"
  },
  {
    "text": "then I'm going to use to map all Fields",
    "start": "208799",
    "end": "211200"
  },
  {
    "text": "directly feature here which will do a",
    "start": "211200",
    "end": "213319"
  },
  {
    "text": "one to one mapping um Amazon S3 is a",
    "start": "213319",
    "end": "217959"
  },
  {
    "text": "schemesspring data which was created",
    "start": "229680",
    "end": "232959"
  },
  {
    "text": "before I certain",
    "start": "232959",
    "end": "235680"
  },
  {
    "text": "date uh and that's really it uh we're",
    "start": "235680",
    "end": "238319"
  },
  {
    "text": "going to create an execute this flow",
    "start": "238319",
    "end": "241439"
  },
  {
    "text": "which will bring a subset of our",
    "start": "241439",
    "end": "243439"
  },
  {
    "text": "products into Amazon",
    "start": "243439",
    "end": "245560"
  },
  {
    "text": "S3 okay we can see that less than 1",
    "start": "245560",
    "end": "248280"
  },
  {
    "text": "minute it took for up flow to bring",
    "start": "248280",
    "end": "251200"
  },
  {
    "text": "341 uh Records into S3 and if we go to",
    "start": "251200",
    "end": "254920"
  },
  {
    "text": "our S3 bucket we can actually query and",
    "start": "254920",
    "end": "258280"
  },
  {
    "text": "see the data using S3 select so I'm",
    "start": "258280",
    "end": "260759"
  },
  {
    "text": "going to uh just leave everything as",
    "start": "260759",
    "end": "262720"
  },
  {
    "text": "default I run a query and you can see",
    "start": "262720",
    "end": "265240"
  },
  {
    "text": "that the data is already here now it's",
    "start": "265240",
    "end": "268160"
  },
  {
    "text": "time to create the second floor",
    "start": "268160",
    "end": "270120"
  },
  {
    "text": "which will take the data from this S3",
    "start": "270120",
    "end": "271960"
  },
  {
    "text": "bucket and it will create uh and it will",
    "start": "271960",
    "end": "275080"
  },
  {
    "text": "add it to our sales force instance so uh",
    "start": "275080",
    "end": "277880"
  },
  {
    "text": "in this case we're going to choose S3 as",
    "start": "277880",
    "end": "279759"
  },
  {
    "text": "a source uh we're going to choose the",
    "start": "279759",
    "end": "281759"
  },
  {
    "text": "same bucket uh and we need to give uh",
    "start": "281759",
    "end": "284919"
  },
  {
    "text": "the same uh bucket prefix which is the",
    "start": "284919",
    "end": "287759"
  },
  {
    "text": "name of the first flow we",
    "start": "287759",
    "end": "289759"
  },
  {
    "text": "created uh the data is in CSV format uh",
    "start": "289759",
    "end": "293240"
  },
  {
    "text": "and the destination of our data is Sal",
    "start": "293240",
    "end": "296320"
  },
  {
    "text": "Force um which choose the connection and",
    "start": "296320",
    "end": "300240"
  },
  {
    "text": "for the purpose of this demonstration I",
    "start": "300240",
    "end": "301919"
  },
  {
    "text": "have created a custom object in",
    "start": "301919",
    "end": "305199"
  },
  {
    "text": "Salesforce which is called sap product",
    "start": "305199",
    "end": "308680"
  },
  {
    "text": "uh now we can choose which API to use uh",
    "start": "308680",
    "end": "311479"
  },
  {
    "text": "we'll choose book API just for",
    "start": "311479",
    "end": "313360"
  },
  {
    "text": "convenience it is very important to",
    "start": "313360",
    "end": "315680"
  },
  {
    "text": "select an error uh handling bucket uh",
    "start": "315680",
    "end": "319600"
  },
  {
    "text": "because sometimes when we write data",
    "start": "319600",
    "end": "321199"
  },
  {
    "text": "into the destination get um kind of",
    "start": "321199",
    "end": "324360"
  },
  {
    "text": "experience problems and we want to",
    "start": "324360",
    "end": "326960"
  },
  {
    "text": "report those problems into a specific",
    "start": "326960",
    "end": "328880"
  },
  {
    "text": "place we we can choose to either stop",
    "start": "328880",
    "end": "330639"
  },
  {
    "text": "the flow if we encounter error or we can",
    "start": "330639",
    "end": "333560"
  },
  {
    "text": "also ignore and continue the flow",
    "start": "333560",
    "end": "335639"
  },
  {
    "text": "execution if for example we don't know",
    "start": "335639",
    "end": "337560"
  },
  {
    "text": "if our data set is uh kind of um uh in",
    "start": "337560",
    "end": "341319"
  },
  {
    "text": "the right shape and form uh we will run",
    "start": "341319",
    "end": "343520"
  },
  {
    "text": "this uh flow on",
    "start": "343520",
    "end": "345360"
  },
  {
    "text": "demand uh and here again we need to map",
    "start": "345360",
    "end": "348520"
  },
  {
    "text": "the fields now uh because Salesforce is",
    "start": "348520",
    "end": "351080"
  },
  {
    "text": "a schema it has a well defined schema we",
    "start": "351080",
    "end": "354360"
  },
  {
    "text": "have to either select all the fields",
    "start": "354360",
    "end": "356240"
  },
  {
    "text": "from here from source of destination uh",
    "start": "356240",
    "end": "359000"
  },
  {
    "text": "or we need to we can upload a CSV file",
    "start": "359000",
    "end": "362479"
  },
  {
    "text": "which has only two columns it has the",
    "start": "362479",
    "end": "364319"
  },
  {
    "text": "name of the source field and the name of",
    "start": "364319",
    "end": "366880"
  },
  {
    "text": "the destination field and upflow will do",
    "start": "366880",
    "end": "369360"
  },
  {
    "text": "uh the mapping for",
    "start": "369360",
    "end": "371520"
  },
  {
    "text": "us uh and now we have the two flows uh",
    "start": "371520",
    "end": "375440"
  },
  {
    "text": "but obviously uh we want to uh make it",
    "start": "375440",
    "end": "378560"
  },
  {
    "text": "so uh the second flow automatically",
    "start": "378560",
    "end": "380840"
  },
  {
    "text": "starts after the first one executes and",
    "start": "380840",
    "end": "383759"
  },
  {
    "text": "to do so we need to do several more",
    "start": "383759",
    "end": "386000"
  },
  {
    "text": "things uh we need to introduce uh AWS",
    "start": "386000",
    "end": "388759"
  },
  {
    "text": "step function",
    "start": "388759",
    "end": "389960"
  },
  {
    "text": "uh which will be the mechanism we use to",
    "start": "389960",
    "end": "392000"
  },
  {
    "text": "start the second flow uh without writing",
    "start": "392000",
    "end": "394720"
  },
  {
    "text": "any code uh so it's a a very uh useful",
    "start": "394720",
    "end": "399000"
  },
  {
    "text": "Service uh to integrate uh different AWS",
    "start": "399000",
    "end": "402319"
  },
  {
    "text": "services in a no code fashion so it's",
    "start": "402319",
    "end": "404560"
  },
  {
    "text": "going to be only one step uh and it's",
    "start": "404560",
    "end": "407160"
  },
  {
    "text": "going to be called start flow so start",
    "start": "407160",
    "end": "410000"
  },
  {
    "text": "flow is an API call to uh the upflow",
    "start": "410000",
    "end": "413080"
  },
  {
    "text": "control plan and this IP code only",
    "start": "413080",
    "end": "415520"
  },
  {
    "text": "requires one uh uh kind of uh input",
    "start": "415520",
    "end": "418919"
  },
  {
    "text": "which is the the flow name uh we need to",
    "start": "418919",
    "end": "420919"
  },
  {
    "text": "provide the second flow name here",
    "start": "420919",
    "end": "423120"
  },
  {
    "text": "because that's the one we're going to",
    "start": "423120",
    "end": "424680"
  },
  {
    "text": "start conveniently um Step function is",
    "start": "424680",
    "end": "427759"
  },
  {
    "text": "telling us that uh for some reason it's",
    "start": "427759",
    "end": "429840"
  },
  {
    "text": "not able to automatically uh generate a",
    "start": "429840",
    "end": "433520"
  },
  {
    "text": "policy here uh to in order to start the",
    "start": "433520",
    "end": "436080"
  },
  {
    "text": "flow so we will need to do this manually",
    "start": "436080",
    "end": "439000"
  },
  {
    "text": "uh which is not that difficult we just",
    "start": "439000",
    "end": "441240"
  },
  {
    "text": "need to open the a row uh that will be",
    "start": "441240",
    "end": "444080"
  },
  {
    "text": "used the execution row uh for step",
    "start": "444080",
    "end": "446280"
  },
  {
    "text": "function and we can create an inline",
    "start": "446280",
    "end": "448720"
  },
  {
    "text": "policy here here and say okay uh you",
    "start": "448720",
    "end": "451800"
  },
  {
    "text": "will be allowed",
    "start": "451800",
    "end": "453599"
  },
  {
    "text": "to uh perform actions on UPF flow start",
    "start": "453599",
    "end": "459120"
  },
  {
    "text": "flow uh and we're going to be generous",
    "start": "459120",
    "end": "461319"
  },
  {
    "text": "and give all uh flows uh to be uh for",
    "start": "461319",
    "end": "466080"
  },
  {
    "text": "step function to be able to run any flow",
    "start": "466080",
    "end": "468440"
  },
  {
    "text": "we",
    "start": "468440",
    "end": "470560"
  },
  {
    "text": "want uh okay that's about it so we have",
    "start": "470960",
    "end": "474680"
  },
  {
    "text": "three out of the four constructs we have",
    "start": "474680",
    "end": "476479"
  },
  {
    "text": "we have the two flows we have the step",
    "start": "476479",
    "end": "478280"
  },
  {
    "text": "function that will start the same second",
    "start": "478280",
    "end": "479520"
  },
  {
    "text": "flow and we now need to somehow combine",
    "start": "479520",
    "end": "481720"
  },
  {
    "text": "everything together and the way we do",
    "start": "481720",
    "end": "483800"
  },
  {
    "text": "this is with Amazon event Bridge which",
    "start": "483800",
    "end": "486159"
  },
  {
    "text": "is our serverless event bus uh when",
    "start": "486159",
    "end": "488840"
  },
  {
    "text": "upflow started the first job to bring",
    "start": "488840",
    "end": "490840"
  },
  {
    "text": "the data from sap into S3 the moment",
    "start": "490840",
    "end": "493599"
  },
  {
    "text": "this job completed successfully it",
    "start": "493599",
    "end": "495800"
  },
  {
    "text": "actually emitted an event in event",
    "start": "495800",
    "end": "497560"
  },
  {
    "text": "bridge and what uh that gives us as an",
    "start": "497560",
    "end": "500800"
  },
  {
    "text": "advantage is here we can create a rule",
    "start": "500800",
    "end": "503400"
  },
  {
    "text": "and we can intercept this event and we",
    "start": "503400",
    "end": "505919"
  },
  {
    "text": "can say okay uh event from AWS Service",
    "start": "505919",
    "end": "509000"
  },
  {
    "text": "app flow uh Al flows several different",
    "start": "509000",
    "end": "511960"
  },
  {
    "text": "events but the one that we are",
    "start": "511960",
    "end": "513320"
  },
  {
    "text": "interested in is end flow report so when",
    "start": "513320",
    "end": "515399"
  },
  {
    "text": "the job completes uh and uh we want to",
    "start": "515399",
    "end": "518839"
  },
  {
    "text": "be a little bit more specific because",
    "start": "518839",
    "end": "520279"
  },
  {
    "text": "this will give us all uh this rule will",
    "start": "520279",
    "end": "523080"
  },
  {
    "text": "intercept any uh event for any flow that",
    "start": "523080",
    "end": "527279"
  },
  {
    "text": "comes from our flow so what we want to",
    "start": "527279",
    "end": "528839"
  },
  {
    "text": "do is we want to go a level deeper and",
    "start": "528839",
    "end": "532080"
  },
  {
    "text": "actually read the details of this event",
    "start": "532080",
    "end": "535839"
  },
  {
    "text": "uh and what the the event producer is",
    "start": "535839",
    "end": "538200"
  },
  {
    "text": "providing us and uh in this case the",
    "start": "538200",
    "end": "540160"
  },
  {
    "text": "event producer is UPF flow and pro and",
    "start": "540160",
    "end": "542079"
  },
  {
    "text": "it provides as part of the event the",
    "start": "542079",
    "end": "543720"
  },
  {
    "text": "name of the flow the status of the job",
    "start": "543720",
    "end": "546240"
  },
  {
    "text": "plus many other things like how many Els",
    "start": "546240",
    "end": "548160"
  },
  {
    "text": "were processed how many failed and so on",
    "start": "548160",
    "end": "550399"
  },
  {
    "text": "so we are actually telling event brid",
    "start": "550399",
    "end": "553240"
  },
  {
    "text": "now to only look at end flow report for",
    "start": "553240",
    "end": "557120"
  },
  {
    "text": "uh flow with the name sap products to S3",
    "start": "557120",
    "end": "559680"
  },
  {
    "text": "the first flow we created and only if",
    "start": "559680",
    "end": "561800"
  },
  {
    "text": "the status is successful and once an",
    "start": "561800",
    "end": "564640"
  },
  {
    "text": "event comes that matches this pattern we",
    "start": "564640",
    "end": "566800"
  },
  {
    "text": "need to uh uh uh kind of route to our",
    "start": "566800",
    "end": "569640"
  },
  {
    "text": "Target and in our case our Target is",
    "start": "569640",
    "end": "572079"
  },
  {
    "text": "just the step function that we've",
    "start": "572079",
    "end": "573839"
  },
  {
    "text": "created uh this is everything we need to",
    "start": "573839",
    "end": "576560"
  },
  {
    "text": "do so uh now before we start the actual",
    "start": "576560",
    "end": "581360"
  },
  {
    "text": "uh end to end demo uh we need to do a",
    "start": "581360",
    "end": "584120"
  },
  {
    "text": "couple of things we want to uh first of",
    "start": "584120",
    "end": "586440"
  },
  {
    "text": "all uh go and uh kind of empty our S3",
    "start": "586440",
    "end": "590320"
  },
  {
    "text": "bucket because we're going to get this",
    "start": "590320",
    "end": "592320"
  },
  {
    "text": "data set",
    "start": "592320",
    "end": "595120"
  },
  {
    "text": "again",
    "start": "596000",
    "end": "598120"
  },
  {
    "text": "okay",
    "start": "598120",
    "end": "599640"
  },
  {
    "text": "and the other thing we want to do is we",
    "start": "599640",
    "end": "601079"
  },
  {
    "text": "want to make sure that in uh kind of",
    "start": "601079",
    "end": "603279"
  },
  {
    "text": "Salesforce if we go into this sap",
    "start": "603279",
    "end": "605839"
  },
  {
    "text": "objects we don't have any uh uh any",
    "start": "605839",
    "end": "609399"
  },
  {
    "text": "records at the moment",
    "start": "609399",
    "end": "611399"
  },
  {
    "text": "so we can verify this by saying oh so we",
    "start": "611399",
    "end": "614279"
  },
  {
    "text": "can see there is no records here uh now",
    "start": "614279",
    "end": "617160"
  },
  {
    "text": "back into uh UPF",
    "start": "617160",
    "end": "621360"
  },
  {
    "text": "flow we can again start restart the",
    "start": "624880",
    "end": "627720"
  },
  {
    "text": "whole process so we got start the first",
    "start": "627720",
    "end": "629839"
  },
  {
    "text": "flow which will take the data from sap",
    "start": "629839",
    "end": "632839"
  },
  {
    "text": "into uh S3 and now as soon as this job",
    "start": "632839",
    "end": "637200"
  },
  {
    "text": "completes uh event bridge will trigger",
    "start": "637200",
    "end": "639800"
  },
  {
    "text": "the step function which on on sign will",
    "start": "639800",
    "end": "643240"
  },
  {
    "text": "trigger uh the next flow uh that will",
    "start": "643240",
    "end": "645720"
  },
  {
    "text": "write the data into our destination",
    "start": "645720",
    "end": "648079"
  },
  {
    "text": "essentially forming this flow chaining",
    "start": "648079",
    "end": "650720"
  },
  {
    "text": "pattern okay so the flow completed",
    "start": "650720",
    "end": "653399"
  },
  {
    "text": "successfully and we can see now the data",
    "start": "653399",
    "end": "655839"
  },
  {
    "text": "is again processed and now if we go back",
    "start": "655839",
    "end": "658720"
  },
  {
    "text": "to our step function uh we can see that",
    "start": "658720",
    "end": "662120"
  },
  {
    "text": "we have one successful flow ex one",
    "start": "662120",
    "end": "664440"
  },
  {
    "text": "successful step function execution which",
    "start": "664440",
    "end": "666720"
  },
  {
    "text": "was triggered by event Bridge uh and",
    "start": "666720",
    "end": "669320"
  },
  {
    "text": "that on the on its own have started the",
    "start": "669320",
    "end": "672000"
  },
  {
    "text": "uh next flow execution so if we go back",
    "start": "672000",
    "end": "674440"
  },
  {
    "text": "to flows uh we can see that our second",
    "start": "674440",
    "end": "677200"
  },
  {
    "text": "flow which is s32 Salesforce have",
    "start": "677200",
    "end": "679519"
  },
  {
    "text": "already",
    "start": "679519",
    "end": "680760"
  },
  {
    "text": "succeeded uh but we can see here in run",
    "start": "680760",
    "end": "683519"
  },
  {
    "text": "history that it run only once and have",
    "start": "683519",
    "end": "686000"
  },
  {
    "text": "processed 341 records now if we go back",
    "start": "686000",
    "end": "689320"
  },
  {
    "text": "into our Salesforce and refresh uh we",
    "start": "689320",
    "end": "692519"
  },
  {
    "text": "should be able to see our products in",
    "start": "692519",
    "end": "695480"
  },
  {
    "text": "here thank you for watching this",
    "start": "695480",
    "end": "697440"
  },
  {
    "text": "demonstration on Amazon upflow and flow",
    "start": "697440",
    "end": "699480"
  },
  {
    "text": "training patterns today you learn two",
    "start": "699480",
    "end": "701880"
  },
  {
    "text": "things how to use Amazon upflow to read",
    "start": "701880",
    "end": "704399"
  },
  {
    "text": "and write data from different SCE",
    "start": "704399",
    "end": "706680"
  },
  {
    "text": "applications and how to leverage a",
    "start": "706680",
    "end": "709079"
  },
  {
    "text": "native integration between upflow event",
    "start": "709079",
    "end": "711480"
  },
  {
    "text": "bridge and step functions to automate a",
    "start": "711480",
    "end": "714279"
  },
  {
    "text": "process using event driven",
    "start": "714279",
    "end": "717959"
  },
  {
    "text": "architectures",
    "start": "717959",
    "end": "720959"
  }
]