[
  {
    "start": "0",
    "end": "298000"
  },
  {
    "text": "good afternoon ladies and gentlemen I'm going to back off the microphone now how's everyone doing welcome we're",
    "start": "280",
    "end": "8080"
  },
  {
    "text": "very excited to be here at the AWS public sector Summit my name is Pete newer and I'm A Cloud architect with",
    "start": "8080",
    "end": "13200"
  },
  {
    "text": "deoe Consulting uh thank you for taking the time to join us today uh our time together this hour will be spent with",
    "start": "13200",
    "end": "20640"
  },
  {
    "text": "dgul Valentine who is the principal products manager for serverless at AWS",
    "start": "20640",
    "end": "26119"
  },
  {
    "text": "uh we will explore the evolution of servis at AWS and get updates on AWS",
    "start": "26119",
    "end": "32160"
  },
  {
    "text": "Lambda and the broader servess ecosystem and regardless of where you are in your own personal or Enterprise path to Cloud",
    "start": "32160",
    "end": "39960"
  },
  {
    "text": "uh you'll be sure to and expect to learn a lot about the benefits and some of the mission outcomes that servus has enabled",
    "start": "39960",
    "end": "46520"
  },
  {
    "text": "in the marketplace and what's available to you uh at deoe we operate at the",
    "start": "46520",
    "end": "51760"
  },
  {
    "text": "intersection of where Cloud meets our clients missions uh from cloud native and cyber to Data Center transformation",
    "start": "51760",
    "end": "59399"
  },
  {
    "text": "and multi Cloud management our offerings focus on helping our clients understand new Cloud Trends and how they fit into",
    "start": "59399",
    "end": "65198"
  },
  {
    "text": "your broader adoption strategy things like servis and the impact that they have on increasing agility and reducing",
    "start": "65199",
    "end": "71200"
  },
  {
    "text": "costs please do come feel free to come say hello I'll be in the back uh after the session and please do visit our",
    "start": "71200",
    "end": "77640"
  },
  {
    "text": "booth uh where you can learn more about how deoe can cloud ready your mission transform your data into Mission",
    "start": "77640",
    "end": "83640"
  },
  {
    "text": "insights uh manage risks and deliver applications at the speed of digital and with that I'd like to present Google",
    "start": "83640",
    "end": "89960"
  },
  {
    "text": "Valentine thank you very much okay um so uh good afternoon",
    "start": "89960",
    "end": "96200"
  },
  {
    "text": "everyone my name is uh dle Valentine I'm uh as we got introduced to principal product manager with AWS in serverless",
    "start": "96200",
    "end": "102720"
  },
  {
    "text": "I've been with Amazon almost five years and worked on quite a few interesting things high performance Computing building new Services um it's about at",
    "start": "102720",
    "end": "110200"
  },
  {
    "text": "this point in the presentation if you've ever seen any of our serverless talks in the past that rgm Tim Wagner will come",
    "start": "110200",
    "end": "115520"
  },
  {
    "text": "out and try and Destroy some servers uh he takes a baseball bat to them uh if you're lucky he takes a samurai sword to",
    "start": "115520",
    "end": "121640"
  },
  {
    "text": "them uh he made them disappear in Vegas uh at the serverless comp he actually",
    "start": "121640",
    "end": "126799"
  },
  {
    "text": "decided to make a serverless smoothie with a Blend Tech uh unfortunately I wasn't approved to do any of those",
    "start": "126799",
    "end": "132800"
  },
  {
    "text": "things uh so I'm just allowed to give the presentation and and wait and hope one time that I'll get to come and blend",
    "start": "132800",
    "end": "138560"
  },
  {
    "text": "blend something or destroy something so uh for those of you who",
    "start": "138560",
    "end": "144560"
  },
  {
    "text": "haven't already joined us on the serverless journey um I want to bring you up to spee uh with what Lambda is",
    "start": "144560",
    "end": "151680"
  },
  {
    "text": "with what serverless is what the ecosystem of serverless is on top of",
    "start": "151680",
    "end": "157080"
  },
  {
    "text": "AWS and then we'll take a look at how customers are achieving faster time to Market shorter time to deploy code more",
    "start": "157080",
    "end": "164519"
  },
  {
    "text": "secure architectures and more real-time business results by adopting serverless Solutions and then finally we'll take a",
    "start": "164519",
    "end": "171599"
  },
  {
    "text": "look at some of the specific features in both Lambda API Gateway and the serverless ecosystem which we've",
    "start": "171599",
    "end": "177800"
  },
  {
    "text": "launched over the last couple of months and highlight some of the key features in those new services so before I dive",
    "start": "177800",
    "end": "183599"
  },
  {
    "text": "too deep into our presentation real quick show a hands how many people would consider themselves to be production on",
    "start": "183599",
    "end": "190000"
  },
  {
    "text": "serverless today okay so there's a few people in",
    "start": "190000",
    "end": "195120"
  },
  {
    "text": "there how many people are using Lambda feel like they're doing something with serverless and and you know they're on",
    "start": "195120",
    "end": "200840"
  },
  {
    "text": "the journey they've started cool it's good one hands up who's here to find out what the",
    "start": "200840",
    "end": "206599"
  },
  {
    "text": "serverless thing is okay cool so we have a good mix and hopefully we'll be able to cover all of",
    "start": "206599",
    "end": "212760"
  },
  {
    "text": "that um as we go through uh you know hopefully we'll we'll tease out all these different things the the tips and",
    "start": "212760",
    "end": "219200"
  },
  {
    "text": "tricks as we go I have the the privilege of having built actual Production Services on top of serverless so I've",
    "start": "219200",
    "end": "224599"
  },
  {
    "text": "got some Battle Scars From as well and if we have enough time at the end of the presentation we'll try and do a little bit of",
    "start": "224599",
    "end": "231480"
  },
  {
    "text": "Q&A so what what is serverless what is the the whole notion of serverless for",
    "start": "231480",
    "end": "237959"
  },
  {
    "text": "you and for us serverless Computing lets you build and run applications without thinking about servers your application",
    "start": "237959",
    "end": "246120"
  },
  {
    "text": "still runs on servers we still have servers there is no magic there like they don't disappear but this the",
    "start": "246120",
    "end": "252879"
  },
  {
    "text": "management the responsibility of the servers moves over to AWS you no longer",
    "start": "252879",
    "end": "258040"
  },
  {
    "text": "need to think about Hardware provisioning OS patching uptime dealing",
    "start": "258040",
    "end": "264320"
  },
  {
    "text": "with maintenance Cycles Hardware refresh that all moves over to AWS and that's",
    "start": "264320",
    "end": "269560"
  },
  {
    "text": "the the responsibility of the AWS Lambda team and it's not just the hardware infrastructure that you get to stop",
    "start": "269560",
    "end": "275680"
  },
  {
    "text": "worrying about it's also the servers themselves the software components of the servers no more Chef deployment",
    "start": "275680",
    "end": "282280"
  },
  {
    "text": "scripts to make sure all the servers are configured at the right release or making sure that the right version of",
    "start": "282280",
    "end": "288280"
  },
  {
    "text": "the application is deployed at the right time application deployment happens at the same time as the request is being",
    "start": "288280",
    "end": "294320"
  },
  {
    "text": "made in the serverless architecture so let's take a little bit",
    "start": "294320",
    "end": "299800"
  },
  {
    "start": "298000",
    "end": "298000"
  },
  {
    "text": "of a a look at the evolution of how we got to serverless understand a little bit about where we started the journey",
    "start": "299800",
    "end": "307240"
  },
  {
    "text": "that we've all been on I think in it as a whole and what it looks like the",
    "start": "307240",
    "end": "312639"
  },
  {
    "text": "modern era of computing has gone through several phases which each with each New Era shaping the software and the",
    "start": "312639",
    "end": "320080"
  },
  {
    "text": "operational procedures before it and then going forward we started out with physical data centers servers racked in",
    "start": "320080",
    "end": "327960"
  },
  {
    "text": "your own environment constraints there being the number of servers you had and the size of your",
    "start": "327960",
    "end": "333880"
  },
  {
    "text": "environment and then we made a move into virtualization so the ability for you to start to virtualize your servers so you",
    "start": "333880",
    "end": "340880"
  },
  {
    "text": "started to get amazing economy out of the utilization but you were still bound physically by the constraints of your",
    "start": "340880",
    "end": "347639"
  },
  {
    "text": "data center you could only go as big as the rooms assigned or as much cooling and power as you had available before",
    "start": "347639",
    "end": "353280"
  },
  {
    "text": "you had to start building more of that physical infrastructure so the cloud took your virtual servers and moved all",
    "start": "353280",
    "end": "359720"
  },
  {
    "text": "of that physical management the HVAC and the building and turned it into a provisioning operation create servers",
    "start": "359720",
    "end": "366560"
  },
  {
    "text": "and with an API response you got virtual machines in the cloud at each stage of evolution",
    "start": "366560",
    "end": "373599"
  },
  {
    "start": "372000",
    "end": "372000"
  },
  {
    "text": "provided a key Improvement virtualization improved utilization and increased uptime for",
    "start": "373599",
    "end": "380639"
  },
  {
    "text": "applications and made it more resilient to hardware and software failures within your",
    "start": "380639",
    "end": "385960"
  },
  {
    "text": "architecture the move to Cloud capitalized on this trend turning the lengthy and expensive data",
    "start": "385960",
    "end": "392360"
  },
  {
    "text": "center projects into API calls it also began the important process of Shifting",
    "start": "392360",
    "end": "397560"
  },
  {
    "text": "the burden of Maintenance from application owners to cloud service",
    "start": "397560",
    "end": "403919"
  },
  {
    "text": "providers but even with Cloud infrastructure it has limitations you still need to administer the virtual",
    "start": "403919",
    "end": "410120"
  },
  {
    "text": "servers we didn't remove the need to ensure that all of your machines were configured",
    "start": "410120",
    "end": "415919"
  },
  {
    "text": "consistently this capacity and then in addition to that we also left you with the challenge of managing capacity you",
    "start": "415919",
    "end": "422479"
  },
  {
    "text": "still need to make sure that you have the right amount of capacity available for your applications if you have too",
    "start": "422479",
    "end": "428080"
  },
  {
    "text": "much capacity it's over provisioned and underutilized if you have too little capacity then you might end up giving an",
    "start": "428080",
    "end": "434720"
  },
  {
    "text": "impact to your applications that are running on top of that infrastructure now we give you tooling on top of the AWS Cloud to do this but it was still on",
    "start": "434720",
    "end": "441319"
  },
  {
    "text": "you to go ahead and manage that and control how that was going to be implemented and that's a challenge and",
    "start": "441319",
    "end": "446520"
  },
  {
    "text": "it's a hard managing fleets of servers",
    "start": "446520",
    "end": "451520"
  },
  {
    "text": "so AWS asked ourselves a question or we as a team we asked ourselves a question and uh the question was so how can we",
    "start": "451720",
    "end": "458680"
  },
  {
    "text": "meet future needs by further reducing friction in the it management process that keeps us from rapidly introducing",
    "start": "458680",
    "end": "465120"
  },
  {
    "text": "and scaling new applications and our answer to that is AWS Lambda the serverless compute",
    "start": "465120",
    "end": "472840"
  },
  {
    "text": "solution it offers all of the benefits and compute power of existing Cloud infrastructure without the operational",
    "start": "472840",
    "end": "478879"
  },
  {
    "text": "complexity of running your own Fleet of servers and managing those Fleet of servers within",
    "start": "478879",
    "end": "483960"
  },
  {
    "text": "your environment both the hardware and the software models get simpler and",
    "start": "483960",
    "end": "491198"
  },
  {
    "text": "easier all of the responsibilities we previously discussed they go away no more provisioning and utilization to",
    "start": "493720",
    "end": "500319"
  },
  {
    "text": "worry about no more availability and fault tolerance no more scaling no more",
    "start": "500319",
    "end": "505759"
  },
  {
    "text": "operations and management with Lambda these challenges all move over to",
    "start": "505759",
    "end": "511159"
  },
  {
    "text": "AWS you can focus on your business logic rather than where and how it runs",
    "start": "511159",
    "end": "516919"
  },
  {
    "text": "security patching like for example dealing with dirty cow exploit Hardware migrations moving from one generation of",
    "start": "516919",
    "end": "523120"
  },
  {
    "text": "Hardware to another machine maintenance cycling that needs to be carried out all aws's responsibility and it doesn't cost",
    "start": "523120",
    "end": "531240"
  },
  {
    "text": "Lambda developers any time or effort they don't need to think about that it's not something they worry about in their",
    "start": "531240",
    "end": "538440"
  },
  {
    "text": "architecture now serverless is a form of event",
    "start": "538440",
    "end": "543839"
  },
  {
    "start": "540000",
    "end": "540000"
  },
  {
    "text": "Computing or event-driven Computing and event-driven Computing is a large space and and fundamentally probably one of",
    "start": "543839",
    "end": "550160"
  },
  {
    "text": "the most powerful ways to think about building application architectures because all of the compute is driven by",
    "start": "550160",
    "end": "556360"
  },
  {
    "text": "specific events function as a service is one of the ways that you can solve event driven",
    "start": "556360",
    "end": "563480"
  },
  {
    "text": "Computing and you can today deploy your own architectures that provide function",
    "start": "563480",
    "end": "568800"
  },
  {
    "text": "as a service but we fundamentally believe that serverless is where you actually deliver",
    "start": "568800",
    "end": "577000"
  },
  {
    "text": "the entire thing without the customer thinking about how to deploy and manage that function as a service how much",
    "start": "577000",
    "end": "583200"
  },
  {
    "text": "infrastructure is required to build it and ex and and operate and how to maintain it once it's up and deployed",
    "start": "583200",
    "end": "589000"
  },
  {
    "text": "and that's where we think Lambda sits we think Lambda is the answer to True serverless",
    "start": "589000",
    "end": "594800"
  },
  {
    "text": "Computing so we said it's already event driven and with the event driven model",
    "start": "595160",
    "end": "600320"
  },
  {
    "text": "it's very very easy for you to construct an application that will continuously Scale based on the amount of events that",
    "start": "600320",
    "end": "607360"
  },
  {
    "text": "are passing through it continuous scaling is a core promise of AWS",
    "start": "607360",
    "end": "613360"
  },
  {
    "text": "Lambda it scales based on request not based on CPU utilization or number of",
    "start": "613360",
    "end": "620160"
  },
  {
    "text": "users it's literally request per request driven scaling it's also truly payer usage when",
    "start": "620160",
    "end": "629320"
  },
  {
    "text": "when your code is not running there is no cost we bill by the 100 millisecond",
    "start": "629320",
    "end": "635240"
  },
  {
    "text": "for a Lambda function's execution so when someone's executing a Lambda function it's getting metered when that",
    "start": "635240",
    "end": "641760"
  },
  {
    "text": "Lambda function is not being executed because there's no events in your event driven model there's no cost to having",
    "start": "641760",
    "end": "647279"
  },
  {
    "text": "your application deployed but on its own Lambda is just",
    "start": "647279",
    "end": "654320"
  },
  {
    "start": "651000",
    "end": "651000"
  },
  {
    "text": "the compute component of an entire serverless ecosystem on top of AWS",
    "start": "654320",
    "end": "660920"
  },
  {
    "text": "we think of serverless as many many components and I'm going to spend a little bit of time later on in the presentation talking about some of the",
    "start": "660920",
    "end": "667639"
  },
  {
    "text": "key features and and how to use those features but I want to call out how we think about it a little bit so when you",
    "start": "667639",
    "end": "673560"
  },
  {
    "text": "look at something like say Amazon S3 serverless storage you don't have to think about is there enough capacity to",
    "start": "673560",
    "end": "679079"
  },
  {
    "text": "store my data is my data going to be available who deals with making sure the servers are up and running in my storage",
    "start": "679079",
    "end": "685440"
  },
  {
    "text": "solution Dynamo DB no SQL storage or no SQL data database serverless you don't",
    "start": "685440",
    "end": "691720"
  },
  {
    "text": "need to think about deploying the Dynamo DB infrastructure when you get started Kinesis analytics in a serverless",
    "start": "691720",
    "end": "698720"
  },
  {
    "text": "fashion you can even join for example API Gateway to Kinesis and do real-time streaming ingest over simple HTTP",
    "start": "698720",
    "end": "705920"
  },
  {
    "text": "endpoints Amazon API Gateway the ability to put a restful interface in front of many AWS services including Lambda and",
    "start": "705920",
    "end": "712800"
  },
  {
    "text": "your other services no servers to deployer scale step functions and we'll talk a little bit around some of the",
    "start": "712800",
    "end": "718519"
  },
  {
    "text": "step functions functionality the ability to orchestrate things with State machines in a fundamentally stateless",
    "start": "718519",
    "end": "724560"
  },
  {
    "text": "architecture which Lambda is the ability to orchestrate functions is extremely powerful the ability to use decision",
    "start": "724560",
    "end": "730399"
  },
  {
    "text": "logic as to whether you want to invoke one function after another function synchronize and barrier operations it's",
    "start": "730399",
    "end": "736600"
  },
  {
    "text": "an amazing amount of control talk about x-ray a little bit as we go further on the ability to Deep dive into Pion Trace",
    "start": "736600",
    "end": "744040"
  },
  {
    "text": "points inside your application and then we'll go a little bit further into some of the edge computed uh I something I",
    "start": "744040",
    "end": "749600"
  },
  {
    "text": "think is really cool the ability to run Lambda all the way out on the edge and even on devices that aren't in the",
    "start": "749600",
    "end": "756560"
  },
  {
    "start": "756000",
    "end": "756000"
  },
  {
    "text": "cloud so serverless changes how we deliver applications and it also changes",
    "start": "757040",
    "end": "762399"
  },
  {
    "text": "how customers start delivering their applications all of these Services have a common goal speeding up the Innovation",
    "start": "762399",
    "end": "768959"
  },
  {
    "text": "and delivery W flywheel by removing the friction of thinking about compute storage and",
    "start": "768959",
    "end": "775600"
  },
  {
    "text": "networking it makes it easier for application Developers to do quick deployments immediately to a large Fleet",
    "start": "775600",
    "end": "782880"
  },
  {
    "text": "driven by Lambda and immediately expose that application code to a new set of",
    "start": "782880",
    "end": "788279"
  },
  {
    "text": "customers there's no need to deploy code across multiple azs Lambda takes care of",
    "start": "788279",
    "end": "793839"
  },
  {
    "text": "that there's no need to deploy capacity management or Fleet policies as we scale",
    "start": "793839",
    "end": "799079"
  },
  {
    "text": "out your application all of that's taken care of by Lambda and all of these capabilities when combined together",
    "start": "799079",
    "end": "806360"
  },
  {
    "text": "Drive the flywheel of innovation for you as a customer it's possible for you to move faster and more agile using a",
    "start": "806360",
    "end": "813079"
  },
  {
    "text": "serverless architecture so I want to talk a little",
    "start": "813079",
    "end": "818680"
  },
  {
    "text": "bit about serverless today where are serverless customers today what are the",
    "start": "818680",
    "end": "824839"
  },
  {
    "text": "use cases that we're seeing with our serverless customers what are some of the patterns that serverless customers",
    "start": "824839",
    "end": "830759"
  },
  {
    "text": "and partners are using to build on top of AWS and you can take advantage",
    "start": "830759",
    "end": "837079"
  },
  {
    "start": "837000",
    "end": "837000"
  },
  {
    "text": "of so common use case now the one thing that it's quite evident when you start talking about",
    "start": "837079",
    "end": "842920"
  },
  {
    "text": "common use cases with serverless is there's a lot of them there's no one use case there's no one thing that Lambda is",
    "start": "842920",
    "end": "849920"
  },
  {
    "text": "designed specifically to do it's able to do many many different things and this is possible with the serverless",
    "start": "849920",
    "end": "856480"
  },
  {
    "text": "ecosystem of connectors and triggers and Integrations so if we start with web",
    "start": "856480",
    "end": "861519"
  },
  {
    "text": "applications for example you can start by hosting a completely static website",
    "start": "861519",
    "end": "866839"
  },
  {
    "text": "on S3 and when anyone hits that you get the power and durability of S3 serving",
    "start": "866839",
    "end": "872320"
  },
  {
    "text": "that and you don't need to do any servers anywhere you just deploy your static content up to S3 and everyone can",
    "start": "872320",
    "end": "878240"
  },
  {
    "text": "access it but then you can start adding Dynamic content into your website you",
    "start": "878240",
    "end": "883480"
  },
  {
    "text": "can take an API Gateway to put a restful interface or HTTP interface in front of a Lambda function and now do interactive",
    "start": "883480",
    "end": "890160"
  },
  {
    "text": "content within your web pages Dynamic web page generation using a Lambda function and no servers and when you",
    "start": "890160",
    "end": "897680"
  },
  {
    "text": "have a flash sale or your site is the hottest site on Reddit that day it scales seamlessly with no concern at all",
    "start": "897680",
    "end": "907040"
  },
  {
    "text": "for the volume of traffic that's being sent to it because it's serverless when we take a look at",
    "start": "907040",
    "end": "912839"
  },
  {
    "text": "backends backends are really fascinating customers are building more and more advanced backends on AWS Lambda because",
    "start": "912839",
    "end": "920600"
  },
  {
    "text": "they can easily access all of the serverless backend components for persistence and state the ability to",
    "start": "920600",
    "end": "926680"
  },
  {
    "text": "store and read data from S3 and Dynamo the ability to use step functions to make decision logic as they go through",
    "start": "926680",
    "end": "933240"
  },
  {
    "text": "the back end with mobile it's possible to build really Rich mobile applications",
    "start": "933240",
    "end": "939000"
  },
  {
    "text": "that are serverless using things like Cognito to manage mobile data and the",
    "start": "939000",
    "end": "944160"
  },
  {
    "text": "mobile identity and then deploying all of that out through things like cloudfront so it's easily accessible to",
    "start": "944160",
    "end": "950680"
  },
  {
    "text": "mobile devices and any of the logic inside the application being powered by a Lambda function iot devices so devices",
    "start": "950680",
    "end": "958680"
  },
  {
    "text": "all all the way out on the edge devices that are far far away from the cloud maybe operating the back of a",
    "start": "958680",
    "end": "964199"
  },
  {
    "text": "refrigerator or in an agricultural machine the ability for those devices to",
    "start": "964199",
    "end": "969560"
  },
  {
    "text": "make calls back up into the cloud where they maybe have to unload sensor data or",
    "start": "969560",
    "end": "975040"
  },
  {
    "text": "they want to get an update of status of data they need to operate by moving that into a serverless architecture you don't",
    "start": "975040",
    "end": "981279"
  },
  {
    "text": "need to worry about scaling that backend anymore for the number of devices as the number of devices grows your back end",
    "start": "981279",
    "end": "988120"
  },
  {
    "text": "automatically grows grows if the frequency that the devices call in changes and you suddenly have spikes",
    "start": "988120",
    "end": "994000"
  },
  {
    "text": "that automatically grows big data use cases now this is one",
    "start": "994000",
    "end": "999079"
  },
  {
    "text": "of the first use cases we had for AWS Lambda with big data we see many many",
    "start": "999079",
    "end": "1004800"
  },
  {
    "text": "customers moving large volumes of data up into for example S3 or pulling it",
    "start": "1004800",
    "end": "1009880"
  },
  {
    "text": "into Kinesis for stream analysis and using AWS Lambda you can build an entire",
    "start": "1009880",
    "end": "1015680"
  },
  {
    "text": "serverless data analytics platform that Works using triggers so when you upload",
    "start": "1015680",
    "end": "1021000"
  },
  {
    "text": "data into S3 it triggers a function in Lambda and that Lambda function can then do analysis on that object or that piece",
    "start": "1021000",
    "end": "1028240"
  },
  {
    "text": "of data you place in S3 and immediately publish the result that can move data",
    "start": "1028240",
    "end": "1033720"
  },
  {
    "text": "analytics from hours or even days down to minutes and less the data is being",
    "start": "1033720",
    "end": "1040038"
  },
  {
    "text": "analyzed in near Real Time by functions that operate on discrete portions of your data as it's being",
    "start": "1040039",
    "end": "1046038"
  },
  {
    "text": "uploaded um media and log process ing so the ability to do log processing in the",
    "start": "1046039",
    "end": "1052200"
  },
  {
    "text": "cloud has been around for quite some time people building big Hadoop clusters doing analysis by having your log files",
    "start": "1052200",
    "end": "1059000"
  },
  {
    "text": "push to S3 in a similar Big Data platform you can have immediate log file analysis publishing out those log files",
    "start": "1059000",
    "end": "1065720"
  },
  {
    "text": "can be going to Kinesis so you can be ingesting them in real time and having a Lambda function cut into the stream and",
    "start": "1065720",
    "end": "1071200"
  },
  {
    "text": "do analysis as they go through in chatbots things like Amazon Echo and",
    "start": "1071200",
    "end": "1077039"
  },
  {
    "text": "Amazon Lex Lambda has native Integrations into those so it's now possible to build really powerful and",
    "start": "1077039",
    "end": "1083840"
  },
  {
    "text": "Rich chat Bots that are serverless no infrastructure behind them for you to manage and scale and deliver a really",
    "start": "1083840",
    "end": "1091200"
  },
  {
    "text": "rich interactive experience for your customers who are interacting over those mediums or Alexa skills and the more",
    "start": "1091200",
    "end": "1097280"
  },
  {
    "text": "Alexa device is talking to it you don't need to scale it automatically",
    "start": "1097280",
    "end": "1102639"
  },
  {
    "text": "scales so let me uh take a little bit of a look at the uh map produce uh model I",
    "start": "1103360",
    "end": "1108520"
  },
  {
    "text": "I think it's a really interesting one because a lot of people associate a map produced framework with a large",
    "start": "1108520",
    "end": "1114720"
  },
  {
    "text": "collection of commodity servers with a big hdfs file system it's kind of like a big HBC approach to to Big Data and",
    "start": "1114720",
    "end": "1122640"
  },
  {
    "text": "we've seen a lot of customers now moving towards a serverless map produce implementation on top of AWS Lambda and",
    "start": "1122640",
    "end": "1130960"
  },
  {
    "text": "the way they do this is your inputs are basically puts on S3 you then have a map phase in the",
    "start": "1130960",
    "end": "1138159"
  },
  {
    "text": "functions so it's a dedicated function for the map phase after that it then usually goes through a coordinator which",
    "start": "1138159",
    "end": "1144760"
  },
  {
    "text": "is not in here and then onto a reduced phase and then a final reduced phase followed by a publication of results and",
    "start": "1144760",
    "end": "1151520"
  },
  {
    "text": "this can happen real time on data sets and in fact we actually thought it was",
    "start": "1151520",
    "end": "1156840"
  },
  {
    "start": "1155000",
    "end": "1155000"
  },
  {
    "text": "so so good of a reference architecture that we took our time and we've actually published a reference architecture on",
    "start": "1156840",
    "end": "1164000"
  },
  {
    "text": "AWS Labs GitHub that deploys this and enables you to build this archit",
    "start": "1164000",
    "end": "1169039"
  },
  {
    "text": "chitecture and so if we start up on the the top left hand side we have the data something coming from the driver number",
    "start": "1169039",
    "end": "1175679"
  },
  {
    "text": "one and it's pushing data into the input bucket and as data is put in that input bucket it actually triggers a mapper",
    "start": "1175679",
    "end": "1182240"
  },
  {
    "text": "function number two and then it goes to the mapper output and the mapper output's going back into S3 maybe a",
    "start": "1182240",
    "end": "1188080"
  },
  {
    "text": "different prefix inside your bucket and then it has a coordinator and the coordinator is outputting job State as",
    "start": "1188080",
    "end": "1194360"
  },
  {
    "text": "well and letting you know how it's moving along and then it moves into the mapper face the reducer phase where it's",
    "start": "1194360",
    "end": "1200520"
  },
  {
    "text": "reducing down the results from the earlier stage and we have a final reducer that will push the result out",
    "start": "1200520",
    "end": "1206799"
  },
  {
    "text": "and those results are being pushed in real time as the data is being ingested it's actually real time map producing on",
    "start": "1206799",
    "end": "1212520"
  },
  {
    "text": "top of that data set and we've analyzed uh a couple of big data set",
    "start": "1212520",
    "end": "1218440"
  },
  {
    "text": "benchmarks and we did 126.80 million rows and when we analyze",
    "start": "1218440",
    "end": "1226400"
  },
  {
    "text": "these queries against others like red shift and H shark Hive they were all",
    "start": "1226400",
    "end": "1231440"
  },
  {
    "text": "faster except red shift but but we know who's building red shift and the team who's working on that so it's an",
    "start": "1231440",
    "end": "1237559"
  },
  {
    "text": "extremely powerful scalable system that enables you to do serverless big data",
    "start": "1237559",
    "end": "1244120"
  },
  {
    "text": "processing another framework that recently came out and is getting a lot of attention is something called pyen so",
    "start": "1244120",
    "end": "1250919"
  },
  {
    "text": "pyen is a completely open source map produce framework for Lambda and they've",
    "start": "1250919",
    "end": "1256159"
  },
  {
    "text": "published some really phenomenal benchmarks and I think the thing that's really interesting is when they're doing",
    "start": "1256159",
    "end": "1261840"
  },
  {
    "text": "these benchmarks they're publishing them in numbers and in sort of Benchmark uh",
    "start": "1261840",
    "end": "1267799"
  },
  {
    "text": "classifications that you'd used to see from really really big systems and these are systems that are costing pennies to",
    "start": "1267799",
    "end": "1274600"
  },
  {
    "text": "run through and so they are actually able to achieve in some of their data sets 60 gigabytes a second read and 50",
    "start": "1274600",
    "end": "1280799"
  },
  {
    "text": "gigabytes a second from S3 and right those are huge volumes of IO in and out",
    "start": "1280799",
    "end": "1287200"
  },
  {
    "text": "of S3 in a serverless architecture and the academics agree as",
    "start": "1287200",
    "end": "1292799"
  },
  {
    "text": "well I actually think this is uh for me I actually think this is really interesting so my background is high performance Computing I spent a long",
    "start": "1292799",
    "end": "1299200"
  },
  {
    "text": "time dealing with wrangling big HBC clusters and you know managing who was allowed to have access and priorities",
    "start": "1299200",
    "end": "1305799"
  },
  {
    "text": "and scheduling and all the stuff that goes with this and and they call this out in this paper at the University of",
    "start": "1305799",
    "end": "1311440"
  },
  {
    "text": "California that most people don't ever get access to distributed computing at scale it's a really really restricted",
    "start": "1311440",
    "end": "1318080"
  },
  {
    "text": "set of people who get access to really big computers and can run things at scale and that that's really a shame to",
    "start": "1318080",
    "end": "1325080"
  },
  {
    "text": "be honest like there's an awful lot of really cool work could be done if you were just given a bit of time on it and",
    "start": "1325080",
    "end": "1330440"
  },
  {
    "text": "if you're lucky you maybe get some background time on the nighttime queue or something like that but that's not the same as actually getting access to",
    "start": "1330440",
    "end": "1335919"
  },
  {
    "text": "go work on this and so they've done a phenomenal paper they referenced pyen in here I recommend looking it up about how",
    "start": "1335919",
    "end": "1342159"
  },
  {
    "text": "you can actually get access to just phenomenal amounts of distributed compute power in an easy to ous frame",
    "start": "1342159",
    "end": "1348480"
  },
  {
    "text": "framework that really unlocks distributed computing for much larger audience of",
    "start": "1348480",
    "end": "1355240"
  },
  {
    "text": "people so a couple of things have changed uh in in Lambda in the last uh period And I want to highlight some of",
    "start": "1356360",
    "end": "1362600"
  },
  {
    "text": "these changes so we started out with 100 concurrent functions that was our initial one uh we've gone to 200",
    "start": "1362600",
    "end": "1369240"
  },
  {
    "text": "concurrent functions we went to 400 concurrent functions oh we're actually at a",
    "start": "1369240",
    "end": "1374400"
  },
  {
    "text": "thousand sorry we're at a thousand concurrent functions now and so 1,000 concurrent functions per second is our",
    "start": "1374400",
    "end": "1381200"
  },
  {
    "text": "default limit in Lambda and and the reason I wanted to highlight this is for",
    "start": "1381200",
    "end": "1386279"
  },
  {
    "text": "some people if you're doing 100 millisecond functions that's 10,000 invokes per second that's the default",
    "start": "1386279",
    "end": "1394080"
  },
  {
    "text": "limit for any customer starting with AWS Lambda today and so it's a huge amount of power at your fingertips that you can",
    "start": "1394080",
    "end": "1400880"
  },
  {
    "text": "immediately start to use for building large complex",
    "start": "1400880",
    "end": "1405559"
  },
  {
    "text": "applications so there's a lot of customers building on serverless Lambda has been out for a little over 2 years",
    "start": "1407240",
    "end": "1414799"
  },
  {
    "text": "now uh the growth and the pace of adoption of serverless is is absolutely",
    "start": "1414799",
    "end": "1419840"
  },
  {
    "text": "breathtaking um from successful startups like ad roll and logal litics to Fortune 500 companies like Coca-Cola and Global",
    "start": "1419840",
    "end": "1426400"
  },
  {
    "text": "Enterprises like Thompson routers companies of all sizes all shapes all workloads are moving over and starting",
    "start": "1426400",
    "end": "1433960"
  },
  {
    "text": "to leverage the benefits of a serverless architecture I just want to take a moment and call out a couple of them",
    "start": "1433960",
    "end": "1441200"
  },
  {
    "start": "1440000",
    "end": "1440000"
  },
  {
    "text": "specifically so Thompson routers Thompson routers has a real-time analytics engine that processes data at",
    "start": "1441200",
    "end": "1447960"
  },
  {
    "text": "a rate of 4,000 requests per second and it's all serverless now they have",
    "start": "1447960",
    "end": "1453039"
  },
  {
    "text": "real-time analytics of data coming in from all of their different feeds going directly into a serverless",
    "start": "1453039",
    "end": "1459360"
  },
  {
    "text": "architecture finra finra is a a customer we've spoke about many times at AWS um",
    "start": "1459360",
    "end": "1465919"
  },
  {
    "text": "I've been with AWS long enough to see how finra start started their Journey they used to run very large Hadoop",
    "start": "1465919",
    "end": "1471240"
  },
  {
    "text": "clusters they do analysis of all of the trades within the US markets and they analyze those trades for bad behaviors",
    "start": "1471240",
    "end": "1478840"
  },
  {
    "text": "or unexpected behaviors in the stock market these were massive massive Hadoop clusters and it took hours to get",
    "start": "1478840",
    "end": "1485440"
  },
  {
    "text": "answers and they've now been able to move that over into a completely serverless architecture and they're now",
    "start": "1485440",
    "end": "1490679"
  },
  {
    "text": "able to get answers in minutes they can detect fraudulent activities or unexpected behaviors in the stock market",
    "start": "1490679",
    "end": "1497520"
  },
  {
    "text": "in minutes through a serverless architecture and the volumes in the stock markets now literally follow the",
    "start": "1497520",
    "end": "1503960"
  },
  {
    "text": "volume of serverless activity they have there's no over-provisioning or under-provisioning of the architecture",
    "start": "1503960",
    "end": "1509159"
  },
  {
    "text": "or backlogs of data building up while they're going through this Hurst has reduced the time to",
    "start": "1509159",
    "end": "1515840"
  },
  {
    "text": "ingest and process data for its analytics pipeline by 97% they used to do this previously in 4",
    "start": "1515840",
    "end": "1523320"
  },
  {
    "text": "hours in their in their old batch system so this is this has been huge for them to come down to",
    "start": "1523320",
    "end": "1530360"
  },
  {
    "text": "minutes Vivo it's a Content platform for artists and musicians they've now been",
    "start": "1530360",
    "end": "1536360"
  },
  {
    "text": "able to handle ATX their normal traffic in spikes so this is when an artist publishes new content and it's a hot new",
    "start": "1536360",
    "end": "1544279"
  },
  {
    "text": "artist it's in the Billboard top something and everybody rushes to find out all about the artist the details",
    "start": "1544279",
    "end": "1550520"
  },
  {
    "text": "around what they've just released previously they had to build an architecture that was ready for that but",
    "start": "1550520",
    "end": "1555640"
  },
  {
    "text": "how would they know when to be ready how do they know when the artist is going to break how do they know this artist is the artist that will get the most",
    "start": "1555640",
    "end": "1561520"
  },
  {
    "text": "airtime that week and so this enables them now to no longer have to try and hope that they'll get it right in",
    "start": "1561520",
    "end": "1566919"
  },
  {
    "text": "scaling serverless scales automatically for them and Expedia uses an awful lot of",
    "start": "1566919",
    "end": "1573240"
  },
  {
    "text": "serverless so Expedia has multiple serverless use cases including an automated cic cicd platform that has 3",
    "start": "1573240",
    "end": "1582440"
  },
  {
    "text": "million code deployments per month at a cost of less than a dollar using serverless as well as their devops",
    "start": "1582440",
    "end": "1589600"
  },
  {
    "text": "automation platform which is generation of traveler profiles and it performs more than 1.2 billion requests each",
    "start": "1589600",
    "end": "1597640"
  },
  {
    "text": "month so I think it's really interesting to see these workloads and it highlights just the diversity of the workloads that",
    "start": "1597640",
    "end": "1604919"
  },
  {
    "text": "people are able to build and construct on top of the serverless",
    "start": "1604919",
    "end": "1610760"
  },
  {
    "start": "1610000",
    "end": "1610000"
  },
  {
    "text": "platform so serverless is really becoming the core of a modern app",
    "start": "1611000",
    "end": "1616919"
  },
  {
    "text": "ecosystem um on top of this there's lots and lots of components around these modern",
    "start": "1616919",
    "end": "1622679"
  },
  {
    "text": "applications and we're going to spend a little bit of time understanding how these tools and components come together",
    "start": "1622679",
    "end": "1629120"
  },
  {
    "text": "to enable you to build serverless applications",
    "start": "1629120",
    "end": "1636000"
  },
  {
    "text": "sorry so we talked a little bit about the history of the the service AWS Lambda we've talked a little bit around",
    "start": "1636000",
    "end": "1642200"
  },
  {
    "text": "how the customers are using the the platform and now what I want to do is probably pivot a little bit more into",
    "start": "1642200",
    "end": "1647919"
  },
  {
    "text": "the technical component of the session today talk about the actual components within serverless uh I also want to",
    "start": "1647919",
    "end": "1655159"
  },
  {
    "text": "highlight some of the core features that we've launched in the platform and hopefully this will give you food for thought for questions as we come up to",
    "start": "1655159",
    "end": "1661799"
  },
  {
    "text": "the end of our session today so a serverless platform has in",
    "start": "1661799",
    "end": "1669559"
  },
  {
    "start": "1664000",
    "end": "1664000"
  },
  {
    "text": "our opinion a core set of capabilities uh a cloud logic layer so",
    "start": "1669559",
    "end": "1674640"
  },
  {
    "text": "this is the ability to execute logic decisions or orchestration and State",
    "start": "1674640",
    "end": "1680039"
  },
  {
    "text": "Management uh responsiveness to data sources so a a rich broad set of data",
    "start": "1680039",
    "end": "1686919"
  },
  {
    "text": "sources that can be interfaced or trigger events inside of a serverless",
    "start": "1686919",
    "end": "1692240"
  },
  {
    "text": "platform um the ability to Define your applications in a framework an ecosystem",
    "start": "1692240",
    "end": "1698919"
  },
  {
    "text": "so there needs to be a vibrant ecosystem both of tooling that's provided as part of the serverless platform and people",
    "start": "1698919",
    "end": "1705440"
  },
  {
    "text": "building tooling around that setad of inte ation libraries to make it easier for you to build serverless applications",
    "start": "1705440",
    "end": "1712399"
  },
  {
    "text": "security and access controls reliability and performance and global scale those bottom three are really key across the",
    "start": "1712399",
    "end": "1718720"
  },
  {
    "text": "whole AWS platform so the cloud logic",
    "start": "1718720",
    "end": "1724720"
  },
  {
    "start": "1721000",
    "end": "1721000"
  },
  {
    "text": "lay Computing is the Keystone of the serverless platform and Lambda is the central Hub that receives events",
    "start": "1724720",
    "end": "1731200"
  },
  {
    "text": "processes them and makes calls to the other AWS services and third party surveys if Lambda is the implementation",
    "start": "1731200",
    "end": "1738440"
  },
  {
    "text": "then API Gateway is the interface offering fully managed apis with fine grained access SC control and usage",
    "start": "1738440",
    "end": "1745200"
  },
  {
    "text": "controls and I want to take a quick look at some of the new features we've added in those",
    "start": "1745200",
    "end": "1751440"
  },
  {
    "text": "recently so we added a new Lambda runtime we added node.js 6.10 that was",
    "start": "1751440",
    "end": "1756799"
  },
  {
    "text": "earlier this year and we also recently announced python 3.6 now python 3.6 has received an awful",
    "start": "1756799",
    "end": "1764880"
  },
  {
    "text": "lot of positive feedback I personally am a python developer and python 27 was great but python 36 is a really mature",
    "start": "1764880",
    "end": "1772640"
  },
  {
    "text": "library or a really mature language with a strong set of standard libraries and so being able to develop things in",
    "start": "1772640",
    "end": "1778559"
  },
  {
    "text": "Python 36 natively on top of Lambda is a is a huge change for",
    "start": "1778559",
    "end": "1783880"
  },
  {
    "text": "us when we talk about the ability to observe and control access in your",
    "start": "1783880",
    "end": "1789080"
  },
  {
    "text": "Lambda functions tagging is the key thing that customers ask for so we recently launched tagging for Lambda now",
    "start": "1789080",
    "end": "1795000"
  },
  {
    "text": "it gives you the ability to add metadata to your Lambda function using tags for example project team Department cost",
    "start": "1795000",
    "end": "1802360"
  },
  {
    "text": "center and because you can do things like tag it with cost center and our tagging is integrated into our billing",
    "start": "1802360",
    "end": "1809080"
  },
  {
    "text": "it's now possible to do detailed cost base analysis of Lambda usage within your account so if you're tagging your",
    "start": "1809080",
    "end": "1816120"
  },
  {
    "text": "Lambda functions to teams who are using them or projects who created them it's now possible in detailed billing to see",
    "start": "1816120",
    "end": "1823159"
  },
  {
    "text": "the cost of those functions and how they're being used and this is actually a really big change for our customers it",
    "start": "1823159",
    "end": "1828760"
  },
  {
    "text": "was a lot of log diving in the past so we're very excited to be able to make that available and a couple of other recent",
    "start": "1828760",
    "end": "1835320"
  },
  {
    "text": "changes around the cloud logic layer so iterator age for Amazon Kinesis records",
    "start": "1835320",
    "end": "1842000"
  },
  {
    "text": "and Dynamo DB streams so if you've taken a Dynamo Dynamo DB stream which is basically a",
    "start": "1842000",
    "end": "1850159"
  },
  {
    "text": "streaming record of all changes to a Dynamo DB table you can connect that or",
    "start": "1850159",
    "end": "1855279"
  },
  {
    "text": "integrate it with a Lambda function so that the Lambda function processes that stream and makes logic decisions or does",
    "start": "1855279",
    "end": "1862159"
  },
  {
    "text": "logic in the cloud on top of those now it's all asynchronous so these are what we call our event-based model inside of",
    "start": "1862159",
    "end": "1869320"
  },
  {
    "text": "Lambda and in the past it was hard to tell how old records were how old that",
    "start": "1869320",
    "end": "1875240"
  },
  {
    "text": "that cue of asynchronous events were so this now gives you the ability to see how long it's taking for events to",
    "start": "1875240",
    "end": "1881519"
  },
  {
    "text": "process through your async pipeline and the other thing we've added is the ability to view function policy IES from",
    "start": "1881519",
    "end": "1888440"
  },
  {
    "text": "the console so if for the people who are really deep in Lambda the the people who said that they were doing production",
    "start": "1888440",
    "end": "1894159"
  },
  {
    "text": "workloads there's two ways of sort of securing and controlling access to a Lambda function you can do it through a",
    "start": "1894159",
    "end": "1901880"
  },
  {
    "text": "im am policy and Define what person has access to it but you can also do what's called a resource policy and a resource",
    "start": "1901880",
    "end": "1908919"
  },
  {
    "text": "policy is a policy that's associated with the Lambda resource itself and in a Lambda function policy you can say for",
    "start": "1908919",
    "end": "1915440"
  },
  {
    "text": "example I want to allow S3 call this or I want to allow API Gateway and it's a",
    "start": "1915440",
    "end": "1920960"
  },
  {
    "text": "much more F grained way of controlling access at the function level previously you had to use the AWS CLI to view this",
    "start": "1920960",
    "end": "1927880"
  },
  {
    "text": "policy and so we recently added the ability to see these policies in the console make it much easier for people",
    "start": "1927880",
    "end": "1933120"
  },
  {
    "text": "who are developing and debugging these we've also achieved Hippa",
    "start": "1933120",
    "end": "1938639"
  },
  {
    "text": "compliance for Amazon API Gateway um there's another thing I don't think I've maybe gotten here we should call out for",
    "start": "1938639",
    "end": "1945600"
  },
  {
    "text": "the the govcloud customers we launched Lambda in govcloud uh just last week and so that's a really big deal yeah thank",
    "start": "1945600",
    "end": "1952639"
  },
  {
    "text": "you one govcloud customer um we also added uh a little",
    "start": "1952639",
    "end": "1960039"
  },
  {
    "text": "bit more to API Gateway um as someone who's built a service on top of this this is something that I actually get",
    "start": "1960039",
    "end": "1965720"
  },
  {
    "text": "really excited about so when I think about serverless and what it's done for me in the world of servers is I no",
    "start": "1965720",
    "end": "1972159"
  },
  {
    "text": "longer need to worry about servers I don't I don't have to worry about the provisioning and management of them when",
    "start": "1972159",
    "end": "1977200"
  },
  {
    "text": "I'm building a set of apis or I'm building a service that exposes itself as apis request validation is an",
    "start": "1977200",
    "end": "1985080"
  },
  {
    "text": "important but often annoying amount of work I have to do with inside my code I",
    "start": "1985080",
    "end": "1990919"
  },
  {
    "text": "have to validate that if I was expecting a string I got a string so I don't throw an exception in my code and if I do I",
    "start": "1990919",
    "end": "1996720"
  },
  {
    "text": "need to catch it and throw it appropriately so the person who was calling my API gets a nice friendly",
    "start": "1996720",
    "end": "2001799"
  },
  {
    "text": "message that says unfortunately I was looking for a string and you sent me something that wasn't a string and",
    "start": "2001799",
    "end": "2007320"
  },
  {
    "text": "that's plate code to anyone who builds applications at scale but it gets very big very quickly so every single field",
    "start": "2007320",
    "end": "2014159"
  },
  {
    "text": "should have input validation you should validate that you're catching and checking all of those as you go through",
    "start": "2014159",
    "end": "2019200"
  },
  {
    "text": "and so what we've done with API request validation is in your request model for API Gateway you're already telling API",
    "start": "2019200",
    "end": "2026320"
  },
  {
    "text": "Gateway what to expect you're you're saying that name should be a string and that num you know house number should be",
    "start": "2026320",
    "end": "2031960"
  },
  {
    "text": "an integer or a number and so you've already defined that in there and so when you turn on request validation API",
    "start": "2031960",
    "end": "2038639"
  },
  {
    "text": "Gateway will actually do the work of validating that the request complies with the request format or the request",
    "start": "2038639",
    "end": "2045240"
  },
  {
    "text": "map that you've defined and then reject the request with a 400 error which typically means client error saying",
    "start": "2045240",
    "end": "2051919"
  },
  {
    "text": "request doesn't meet validation now for the person writing the code in the Lambda function I don't actually need to",
    "start": "2051919",
    "end": "2058000"
  },
  {
    "text": "do any more request validation I can assume that the payload I receive within",
    "start": "2058000",
    "end": "2063560"
  },
  {
    "text": "bounds is valid I don't need to check anymore the contents so now I'm right",
    "start": "2063560",
    "end": "2068960"
  },
  {
    "text": "back to where I want to be which is only writing business logic inside my function I don't need to deal with boiler plate anymore keeps my function",
    "start": "2068960",
    "end": "2075760"
  },
  {
    "text": "codebase smaller enables me as a developer to focus on the things are important as I go",
    "start": "2075760",
    "end": "2081560"
  },
  {
    "text": "through we've also added ACM integration so AWS certificate",
    "start": "2081560",
    "end": "2087240"
  },
  {
    "text": "manager AWS certificate manager is uh a free and super awesome way to add SSL or",
    "start": "2087240",
    "end": "2094118"
  },
  {
    "text": "TLS certificates to AWS resources and with the integration with API Gateway",
    "start": "2094119",
    "end": "2100680"
  },
  {
    "text": "it's now easy to use certificates you've generated there you know my API or api.my company.com and have that",
    "start": "2100680",
    "end": "2108160"
  },
  {
    "text": "Associated automatically with the custom domain and then ACM takes care of certificate renewal and rotation you",
    "start": "2108160",
    "end": "2115200"
  },
  {
    "text": "don't ever have to worry about getting that trouble ticket from a customer that says I tried to hit your SSL and it told",
    "start": "2115200",
    "end": "2120839"
  },
  {
    "text": "me your certificates expired it's a huge trust breaker if you uh ever hit that one so that that's a really exciting",
    "start": "2120839",
    "end": "2127320"
  },
  {
    "text": "feature here I talked about responsive data sources so a broad and and deep",
    "start": "2127320",
    "end": "2134480"
  },
  {
    "start": "2128000",
    "end": "2128000"
  },
  {
    "text": "ecosystem of data sources that you can use in a serverless world and how that's",
    "start": "2134480",
    "end": "2139599"
  },
  {
    "text": "important to make serverless successful so Lambda supports a very",
    "start": "2139599",
    "end": "2145599"
  },
  {
    "start": "2143000",
    "end": "2143000"
  },
  {
    "text": "broad set of event sources and these sources are things like Triggers on put",
    "start": "2145599",
    "end": "2151079"
  },
  {
    "text": "of an S3 object but we've gone even further than that and we use we've",
    "start": "2151079",
    "end": "2156319"
  },
  {
    "text": "expanded that to include a large set of different triggers so for example we now support Kinesis fire hose one of the",
    "start": "2156319",
    "end": "2162880"
  },
  {
    "text": "fast ways of getting data in you can attach a Lambda function to that you can now trigger things from an Amazon Aurora",
    "start": "2162880",
    "end": "2170880"
  },
  {
    "text": "database as a Lambda function and for folks who spent a lot of time dealing with stored procedures wow we just made",
    "start": "2170880",
    "end": "2177880"
  },
  {
    "text": "stored procedures entirely function-based inside of the cloud which is which is really cool um we talk about",
    "start": "2177880",
    "end": "2185160"
  },
  {
    "text": "snowball Edge um I'm going to talk about that probably a little bit more in a slide further on but for the folks who don't know Snowball Edge is the ability",
    "start": "2185160",
    "end": "2192599"
  },
  {
    "text": "for you to have a storage and compute device that you take on Prem and you can",
    "start": "2192599",
    "end": "2197760"
  },
  {
    "text": "even run Lambda functions in there so as data is being loaded onto the snowball",
    "start": "2197760",
    "end": "2202960"
  },
  {
    "text": "device it will actually pass through or be uh triggered against a Lambda",
    "start": "2202960",
    "end": "2208720"
  },
  {
    "text": "function so you can do data validation and say the data I'm uploading at the edge in this device I shipped out to my",
    "start": "2208720",
    "end": "2215119"
  },
  {
    "text": "remote location has to be compant with this standard I want I want all the records to be uniform length and so you",
    "start": "2215119",
    "end": "2221560"
  },
  {
    "text": "can actually have a Lambda function on a snowball Edge device that does that um AWS config AWS cloud formation",
    "start": "2221560",
    "end": "2230040"
  },
  {
    "text": "AWS Commit This is where Lambda really becomes the Swiss army knife on top of",
    "start": "2230040",
    "end": "2236240"
  },
  {
    "text": "your services so you can take AWS config and when there's a rule change inside AWS",
    "start": "2236240",
    "end": "2242280"
  },
  {
    "text": "config so AWS config keeps track of all of the resources within your account and the state of them and as the state",
    "start": "2242280",
    "end": "2248200"
  },
  {
    "text": "changes it generates events in in AWS config events you can have a Lambda function that takes a look at that event",
    "start": "2248200",
    "end": "2254520"
  },
  {
    "text": "and takes corrective action now the classic example that a lot of companies are adopting now is no tag no run so you",
    "start": "2254520",
    "end": "2262960"
  },
  {
    "text": "launch an instance or a database and it comes up and it doesn't have a tag that says cost center or project or team",
    "start": "2262960",
    "end": "2270560"
  },
  {
    "text": "there's an AWS config event for that there's a Lambda function that says no tags and it says stop or terminate and",
    "start": "2270560",
    "end": "2277880"
  },
  {
    "text": "there's no there's no email there's no nicity it's just real simple No Tag no run and it's very very easy to do with",
    "start": "2277880",
    "end": "2283800"
  },
  {
    "text": "this and you can control exactly how you want that to happen with cloud formation you can basically build any custom",
    "start": "2283800",
    "end": "2290960"
  },
  {
    "text": "resource you want with a Lambda function so you can even use cloud formation to",
    "start": "2290960",
    "end": "2297200"
  },
  {
    "text": "orchestrate components in your own data center you may have resources that you",
    "start": "2297200",
    "end": "2302480"
  },
  {
    "text": "want to turn on or register with when you create a cloud information stack by",
    "start": "2302480",
    "end": "2307680"
  },
  {
    "text": "creating a custom resource with AWS Lambda you can actually have that Lambda call make a call back into your data",
    "start": "2307680",
    "end": "2313720"
  },
  {
    "text": "center maybe you need to update your config management database that's still hosted on Prem you can make that call it",
    "start": "2313720",
    "end": "2319800"
  },
  {
    "text": "will call back in and it's part of your Cloud information stack it's extremely powerful and then we have things like",
    "start": "2319800",
    "end": "2325920"
  },
  {
    "text": "Lex and and others folks like twio who've added things like twilio functions that give you the ability to",
    "start": "2325920",
    "end": "2331599"
  },
  {
    "text": "do serverless interactions over different text messaging channels or Lex with the ability to do a chat bot Direct",
    "start": "2331599",
    "end": "2339440"
  },
  {
    "start": "2339000",
    "end": "2339000"
  },
  {
    "text": "ly then we have integration libraries um when we think about",
    "start": "2339720",
    "end": "2346280"
  },
  {
    "text": "integration libraries it's the ability for you to get access to more apis that",
    "start": "2346280",
    "end": "2351800"
  },
  {
    "text": "aren't already integrated into your system and so Amazon API Gateway listings are now available in",
    "start": "2351800",
    "end": "2358280"
  },
  {
    "text": "Marketplace so what that enables you to do if you're a service provider or you're providing services to customers",
    "start": "2358280",
    "end": "2364319"
  },
  {
    "text": "who you want to charge for is the ability to provision a serverless application through API Gateway and have",
    "start": "2364319",
    "end": "2370880"
  },
  {
    "text": "customers consume that and build onto their everyday normal AWS account",
    "start": "2370880",
    "end": "2376040"
  },
  {
    "text": "without having to go any further than just clicking I want to use this service it's an extremely powerful integration I",
    "start": "2376040",
    "end": "2381680"
  },
  {
    "text": "think and we're we're seeing a lot of interesting uses uh two of the interesting ones I wanted to highlight",
    "start": "2381680",
    "end": "2386720"
  },
  {
    "text": "was entity Doo so entity Doo has actually got an image mutation Library H",
    "start": "2386720",
    "end": "2393400"
  },
  {
    "text": "or an image recognition library and then F secure is for you URL um was the right",
    "start": "2393400",
    "end": "2400200"
  },
  {
    "text": "way to describe it um content validation of URLs to make sure the reputation of",
    "start": "2400200",
    "end": "2405359"
  },
  {
    "text": "the URLs at a certain level so you know is this URL an appropriate URL to go to for my organization things like that and",
    "start": "2405359",
    "end": "2411920"
  },
  {
    "text": "these are available today in the AWS Marketplace is apis that you can just make calls to from your serverless",
    "start": "2411920",
    "end": "2417200"
  },
  {
    "text": "application and consume or you could publish your own in there as",
    "start": "2417200",
    "end": "2422760"
  },
  {
    "start": "2422000",
    "end": "2422000"
  },
  {
    "text": "well so reliability and performance um reliability in performance is something",
    "start": "2422960",
    "end": "2430280"
  },
  {
    "text": "that's ultimately our responsibility for a large part we've taken on the",
    "start": "2430280",
    "end": "2435520"
  },
  {
    "text": "responsibility to make sure that the Lambda platform is up and running and it's delivering your functions the",
    "start": "2435520",
    "end": "2441359"
  },
  {
    "text": "concurrency that you expect but sometimes your code doesn't go well",
    "start": "2441359",
    "end": "2446440"
  },
  {
    "text": "sometimes your function is maybe what's not effectively working or sometimes the data you're putting into that function",
    "start": "2446440",
    "end": "2452880"
  },
  {
    "text": "isn't expected and so one of the features we launched about uh almost a",
    "start": "2452880",
    "end": "2458960"
  },
  {
    "text": "year ago but it's a feature I want to highlight today specifically is dead letter cues now with dead letter cu's it",
    "start": "2458960",
    "end": "2465680"
  },
  {
    "text": "enables you to redirect failed events to an SNS or an sqs topic for further",
    "start": "2465680",
    "end": "2472480"
  },
  {
    "text": "processing now as I mentioned earlier my background is in HBC and I've built a lot of batch systems including you know",
    "start": "2472480",
    "end": "2479000"
  },
  {
    "text": "actual batch services and when you understand what this architecture gives you I think it's probably one of the",
    "start": "2479000",
    "end": "2484480"
  },
  {
    "text": "most powerful things we've done for for high volume process so in your normal pipeline you have a",
    "start": "2484480",
    "end": "2490839"
  },
  {
    "text": "single function and the only code that's in there is the happy path it's a really really small piece of code its job is",
    "start": "2490839",
    "end": "2497560"
  },
  {
    "text": "just to do the one thing that it's supposed to do in the pipeline maybe it's a data transform maybe you're",
    "start": "2497560",
    "end": "2502960"
  },
  {
    "text": "analyzing records to look for a particular piece of data but that's the only thing you do in there there's no",
    "start": "2502960",
    "end": "2508640"
  },
  {
    "text": "conditionals there's no fault handling there's no error checking you just do one thing and one thing really well",
    "start": "2508640",
    "end": "2515480"
  },
  {
    "text": "99.9% of your traffic is going to use that happy path function the one that's super super lean that you don't ever",
    "start": "2515480",
    "end": "2522440"
  },
  {
    "text": "have to worry about and then you have a dead letter q for things that fail and the dead letter Q is also connected to a",
    "start": "2522440",
    "end": "2528720"
  },
  {
    "text": "Lambda function and that dead letter Q has got a really rich heavy function",
    "start": "2528720",
    "end": "2535000"
  },
  {
    "text": "really verbose it echoes the contents of the event as it's coming in it does a whole bunch of error handling and",
    "start": "2535000",
    "end": "2542000"
  },
  {
    "text": "checking maybe it tries to validate the data using a different set of parameters and you can make changes to this",
    "start": "2542000",
    "end": "2548079"
  },
  {
    "text": "function all day long and you're not changing your happy path code you're not touching the piece of code that",
    "start": "2548079",
    "end": "2554160"
  },
  {
    "text": "processes 99.9% of your work and this separates the two outs so that when you're doing",
    "start": "2554160",
    "end": "2560119"
  },
  {
    "text": "deployments to this piece of code that's important to deal with failure you're not ever touching the piece of code that",
    "start": "2560119",
    "end": "2565319"
  },
  {
    "text": "deals with happy path so as more and more customers are",
    "start": "2565319",
    "end": "2572800"
  },
  {
    "start": "2568000",
    "end": "2568000"
  },
  {
    "text": "moving from monolithic applications and adopting things like Lambda functions to build out",
    "start": "2572800",
    "end": "2578680"
  },
  {
    "text": "microservices um you end up with lots and lots of components so what happens when you have",
    "start": "2578680",
    "end": "2585520"
  },
  {
    "text": "an entire application made up of all of these little functions uh Dynamo tables",
    "start": "2585520",
    "end": "2591280"
  },
  {
    "text": "API M Points how do you manage that how how do you bring all of that together in",
    "start": "2591280",
    "end": "2596920"
  },
  {
    "text": "a way that it's something you can manage as an application or a deployment unit",
    "start": "2596920",
    "end": "2602839"
  },
  {
    "text": "and so this is where we meet Sam um Sam is our squirrel or as we refer to him",
    "start": "2602839",
    "end": "2608880"
  },
  {
    "text": "the serverless application model um Sam will appear more and more as you go",
    "start": "2608880",
    "end": "2614680"
  },
  {
    "text": "around our a the presentation today and B as you go around the serverless website on AWS and Sam is a way for you",
    "start": "2614680",
    "end": "2621800"
  },
  {
    "text": "to identify part of our framework and tooling that we're using to build serverless",
    "start": "2621800",
    "end": "2627440"
  },
  {
    "text": "applications so it's a standard model for representing serverless applications on AWS it brings together all the parts",
    "start": "2627440",
    "end": "2634599"
  },
  {
    "start": "2628000",
    "end": "2628000"
  },
  {
    "text": "of a micro service in a standard way that you can describe or model it with",
    "start": "2634599",
    "end": "2640240"
  },
  {
    "text": "Sam you can now have a simple language for talking about the pieces of your application the function the API the",
    "start": "2640240",
    "end": "2645520"
  },
  {
    "text": "event the data stores and more and with this model you can now inform all of the steps in an application's life cycle",
    "start": "2645520",
    "end": "2652000"
  },
  {
    "text": "building packaging deployment and maintenance so what it does is it",
    "start": "2652000",
    "end": "2657119"
  },
  {
    "text": "controls how your application is defined it's natively supported by AWS Cloud information so you can think of it as a",
    "start": "2657119",
    "end": "2663359"
  },
  {
    "text": "superet of AWS Cloud information you can export any function as a Sam template",
    "start": "2663359",
    "end": "2669559"
  },
  {
    "text": "you can package and deploy Sam templates easily using the CLI and a really important thing I think is we've",
    "start": "2669559",
    "end": "2675319"
  },
  {
    "text": "released this as an open specification under the Apache 20 license so this enables anyone to use the Sam",
    "start": "2675319",
    "end": "2682559"
  },
  {
    "text": "specification to build serverless applications and incorporate them in their workloads we added a couple of new",
    "start": "2682559",
    "end": "2688599"
  },
  {
    "text": "features recently for people who' have already started using it support for inline Swagger so you can now inline a Swagger document inside of your Sam",
    "start": "2688599",
    "end": "2695319"
  },
  {
    "text": "template and InCentric functions or intrinsic functions the ability to use things like ref and FN get attributes",
    "start": "2695319",
    "end": "2703760"
  },
  {
    "text": "inside now cicd is inside Amazon like",
    "start": "2703760",
    "end": "2709280"
  },
  {
    "text": "critical that's how we build and deploy our services and more and more customers have adopted cicd for their application",
    "start": "2709280",
    "end": "2715960"
  },
  {
    "text": "deployments and as they move to serverless they often come with the question well how do we do cicd in the",
    "start": "2715960",
    "end": "2721599"
  },
  {
    "text": "serverless world how do we ensure that we stay with all the benefits we got from that and now that we've introduced",
    "start": "2721599",
    "end": "2728319"
  },
  {
    "text": "Sam there's a way for you to Define an application and once you've used your",
    "start": "2728319",
    "end": "2733640"
  },
  {
    "text": "Sam definition you can commit that to GitHub or Amazon S3 or code commit and",
    "start": "2733640",
    "end": "2740000"
  },
  {
    "text": "then using Code pipeline you can move that into code build and code build will",
    "start": "2740000",
    "end": "2745119"
  },
  {
    "text": "actually build your Lambda function artifact and for people who've been building a lot of Lambda functions for a",
    "start": "2745119",
    "end": "2751280"
  },
  {
    "text": "while now you can also pip an mpm inside code build so you don't need to push up the dependencies of your Lambda function",
    "start": "2751280",
    "end": "2758000"
  },
  {
    "text": "anymore when you do your commit you can just push the code and then you can move",
    "start": "2758000",
    "end": "2763040"
  },
  {
    "text": "it through a test environment and validate the functions using Code build again and because it's cloud formation",
    "start": "2763040",
    "end": "2768760"
  },
  {
    "text": "you can go out and do a deployment to multiple stages test Dev and have a whole pipeline to accelerate yourself",
    "start": "2768760",
    "end": "2775000"
  },
  {
    "text": "through that and that's great we now have cicd we have applications defin a Sam but but",
    "start": "2775000",
    "end": "2781880"
  },
  {
    "text": "how do we debug this like how do we truly discover when things go wrong where the problems Li",
    "start": "2781880",
    "end": "2788280"
  },
  {
    "text": "and so this is where Amazon or AWS x-ray comes in so x-ray enables you to do",
    "start": "2788280",
    "end": "2793800"
  },
  {
    "text": "tracing and debugging of applications and it's supported across the serverless",
    "start": "2793800",
    "end": "2799280"
  },
  {
    "text": "ecosystem and so it will enable you to pinpoint precise specific issues and",
    "start": "2799280",
    "end": "2804440"
  },
  {
    "text": "identify where that issue is and what happens I'm looking at my time here I'm a little bit tight so we'll go a little",
    "start": "2804440",
    "end": "2810079"
  },
  {
    "text": "bit quicker so we'll talk about how to use x-ray because I think it's important to highlight the example so this is a",
    "start": "2810079",
    "end": "2815680"
  },
  {
    "start": "2811000",
    "end": "2811000"
  },
  {
    "text": "very very simple Lambda function okay and I'm just doing a put item in a in a bucket and I'm going to execute this and",
    "start": "2815680",
    "end": "2822640"
  },
  {
    "text": "take a look at what's called the service map within xray so you can see in the service map here the client made a call",
    "start": "2822640",
    "end": "2827760"
  },
  {
    "text": "to Lambda Lambda invoked a function and inside the function we made a call to S3",
    "start": "2827760",
    "end": "2832960"
  },
  {
    "text": "but that cult S3 got a 4xx because of the orange highlighted in there if I go",
    "start": "2832960",
    "end": "2838800"
  },
  {
    "text": "dive down into the actual trace for this and you can see for example the trace has the request ID and all of the timing",
    "start": "2838800",
    "end": "2844880"
  },
  {
    "text": "and the bars for this and I click on it it says the specific bucket does not",
    "start": "2844880",
    "end": "2850480"
  },
  {
    "text": "exist that's the actual error that occurred inside that function and if we take a quick look at the code here you",
    "start": "2850480",
    "end": "2856800"
  },
  {
    "text": "can see there's a misspelling on bucket and so clearly this is what happened now it's a very very simple example a",
    "start": "2856800",
    "end": "2863599"
  },
  {
    "text": "misspelling in the bucket is something you might have CAU anyway in your earlier testing but when you have a serverless application at scale with",
    "start": "2863599",
    "end": "2869960"
  },
  {
    "text": "many different data sources you're ingesting the ability to do a trace level analysis and identify exactly",
    "start": "2869960",
    "end": "2876200"
  },
  {
    "text": "where that problem occurred and with what component and service is a really powerful feature easy enough to fix and",
    "start": "2876200",
    "end": "2882839"
  },
  {
    "text": "if we run it again we see it goes green all of the way so I want to talk a little bit about",
    "start": "2882839",
    "end": "2890000"
  },
  {
    "start": "2888000",
    "end": "2888000"
  },
  {
    "text": "the developer ecosystem and this is the commercial developer ecosystem so we've got",
    "start": "2890000",
    "end": "2895599"
  },
  {
    "text": "companies like twio who enhance enhance their core capabilities of Lambda by integrating it with their messaging apis",
    "start": "2895599",
    "end": "2902480"
  },
  {
    "text": "zapper who's making it easier to connect applications and automate workflows for Enterprise systems uh data dog and logl and Splunk",
    "start": "2902480",
    "end": "2910400"
  },
  {
    "text": "are building serverless applications to enable developers to do more enhanced and more enhanced and advanced auditing",
    "start": "2910400",
    "end": "2916920"
  },
  {
    "text": "of their application behaviors and there's even more companies like this inside the Amazon partner Network it's",
    "start": "2916920",
    "end": "2923520"
  },
  {
    "text": "really really amazing to see how fast the serverless ecosystem is growing but then we also have an",
    "start": "2923520",
    "end": "2929119"
  },
  {
    "start": "2927000",
    "end": "2927000"
  },
  {
    "text": "open-source developer ecosystem so the open source developer ecosystem you can see Sam there but we also have things",
    "start": "2929119",
    "end": "2934920"
  },
  {
    "text": "like the Express framework and chalice framework that we've published Python and node.js uh the serverless.yml",
    "start": "2934920",
    "end": "2943839"
  },
  {
    "text": "meaning when someone calls an API it directly triggers a step function so you don't need to call a Lambda function to",
    "start": "2966720",
    "end": "2973000"
  },
  {
    "text": "call a step function it goes directly to a step function you can now do error handling for Lambda functions so it",
    "start": "2973000",
    "end": "2978400"
  },
  {
    "text": "actually truly understands the error codes and you can send cloudwatch events directly to a step function so if you've",
    "start": "2978400",
    "end": "2983520"
  },
  {
    "text": "got a cloudwatch event for dealing with AWS config it can go to a step function that can have logic decisions in there",
    "start": "2983520",
    "end": "2989200"
  },
  {
    "text": "before executing now I talked a little bit at the beginning about how exciting it is",
    "start": "2989200",
    "end": "2995520"
  },
  {
    "text": "to see Lambda every where Lambda leaving the the the the the confines of of the region and so AWS green grass is",
    "start": "2995520",
    "end": "3002640"
  },
  {
    "text": "something that went GA just last week or actually yeah yeah just last week it went GA so AWS Greengrass enables you to",
    "start": "3002640",
    "end": "3009680"
  },
  {
    "text": "deploy Lambda functions to iot devices they actually enables you to take a Lambda development environment a Lambda",
    "start": "3009680",
    "end": "3016359"
  },
  {
    "text": "programming environment and deploy it down onto a device that could be as we said in a refrigerator or on a an",
    "start": "3016359",
    "end": "3023119"
  },
  {
    "text": "agricultural device so now you have the ability to execute the same code path that you're executing up in the cloud",
    "start": "3023119",
    "end": "3029760"
  },
  {
    "text": "but right beside where the data is being ingested or where the sensors are being triggered so really really exciting",
    "start": "3029760",
    "end": "3035559"
  },
  {
    "text": "thing to see Lambda in places that that really aren't even connected to the cloud in some places snowball Edge I touched about",
    "start": "3035559",
    "end": "3042680"
  },
  {
    "start": "3041000",
    "end": "3041000"
  },
  {
    "text": "this earlier on it's the ability to deploy code out onto a snowball device and have Lambda actually execute code",
    "start": "3042680",
    "end": "3048880"
  },
  {
    "text": "while your uh data is being loaded onto the snowball device and then AWS today has has many",
    "start": "3048880",
    "end": "3057480"
  },
  {
    "text": "different regions and Lambda is available in almost all of our regions 13 regions today and we're working",
    "start": "3057480",
    "end": "3063119"
  },
  {
    "text": "really hard to be in every region all over the globe and that's really amazing and we're really excited about the",
    "start": "3063119",
    "end": "3069000"
  },
  {
    "text": "number of regions we we're in I think we just recently launched in sou Pao and govcloud was last week but going further",
    "start": "3069000",
    "end": "3076559"
  },
  {
    "text": "than that is the ability to put Lambda all the way out to the edge we're the closest point of AWS to your customers",
    "start": "3076559",
    "end": "3084000"
  },
  {
    "text": "so this is something called Lambda at the edge and it still in preview today but it enables customers to actually",
    "start": "3084000",
    "end": "3090160"
  },
  {
    "text": "have nodejs functions that operate inside of a cloud front pop so the idea",
    "start": "3090160",
    "end": "3097520"
  },
  {
    "start": "3094000",
    "end": "3094000"
  },
  {
    "text": "here is that when someone makes a request to a cloudfront pop you can trigger a piece of nodejs code to handle",
    "start": "3097520",
    "end": "3103599"
  },
  {
    "text": "the request and response Behavior right at the edge you don't need to bring it all the way back to your origin that",
    "start": "3103599",
    "end": "3108880"
  },
  {
    "text": "might be running in the data Cent or running up in the the region it happens right at the edge closest to the",
    "start": "3108880",
    "end": "3114480"
  },
  {
    "text": "customer and so you can handle orig requests origin responses and also viewer responses and the patterns in",
    "start": "3114480",
    "end": "3121079"
  },
  {
    "text": "here are really quite extensive and over time we're going to continue to expand these capabilities to a point where",
    "start": "3121079",
    "end": "3126520"
  },
  {
    "text": "you're truly going to be able to render Dynamic content on the edge without going back to An Origin all through a",
    "start": "3126520",
    "end": "3132359"
  },
  {
    "text": "Lambda function um the other one that's really",
    "start": "3132359",
    "end": "3138880"
  },
  {
    "text": "interesting in here is so I just did custo content customization visitor validation being able to check people",
    "start": "3138880",
    "end": "3145160"
  },
  {
    "text": "are who they say they are right at at the edge and never sending that back it's very easy to do and AB testing is",
    "start": "3145160",
    "end": "3150680"
  },
  {
    "text": "really amazing so with AB testing you can make decisions at the edge as to which origin you want to send that",
    "start": "3150680",
    "end": "3156839"
  },
  {
    "text": "request to and these Lambda functions they deploy in the same way you normally deploy Lambda functions so you can make",
    "start": "3156839",
    "end": "3161960"
  },
  {
    "text": "updates to these real time so serverless has now become a",
    "start": "3161960",
    "end": "3167839"
  },
  {
    "text": "fundamental component of modern applications uh a couple of years ago uh our GM Tim was up on stage at reinvent",
    "start": "3167839",
    "end": "3175440"
  },
  {
    "text": "announcing this crazy new idea that we'd have functions as compute or compute as",
    "start": "3175440",
    "end": "3180920"
  },
  {
    "text": "functions and that the only thing you'd pay for was the time that it executed and all you had to do was send us a",
    "start": "3180920",
    "end": "3187079"
  },
  {
    "text": "little bit of script or a little bit of code and we' we'd take care of all of the rest and if we look at where we are",
    "start": "3187079",
    "end": "3192559"
  },
  {
    "text": "today it is it is a huge massive growth in this space uh but as we like to say",
    "start": "3192559",
    "end": "3198119"
  },
  {
    "text": "in AWS it's still only day one for us in serverless we have an awful lot more to go uh we're really excited to see what",
    "start": "3198119",
    "end": "3205240"
  },
  {
    "text": "customers like yourselves able to do with the platform and uh That's all folks thank you very much for coming to",
    "start": "3205240",
    "end": "3211640"
  },
  {
    "text": "the cist talk",
    "start": "3211640",
    "end": "3216520"
  }
]