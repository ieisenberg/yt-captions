[
  {
    "start": "0",
    "end": "333000"
  },
  {
    "text": "well welcome everyone late in the day here this is the introducing AWS app",
    "start": "5899",
    "end": "15240"
  },
  {
    "text": "mesh session I'm Nick Colt I'm a principal product manager at AWS so",
    "start": "15240",
    "end": "25340"
  },
  {
    "text": "we're gonna start today talking about some big-picture questions why a service",
    "start": "25340",
    "end": "34230"
  },
  {
    "text": "Mash what is a service mesh what why would you be interested in or need a service mesh",
    "start": "34230",
    "end": "39600"
  },
  {
    "text": "how does AWS think about service mesh an app mash and then after we cover those",
    "start": "39600",
    "end": "47760"
  },
  {
    "text": "kind of big picture ideas then we'll zoom in and talk about app mesh in",
    "start": "47760",
    "end": "54180"
  },
  {
    "text": "particular how it works and I'll even do a live demo hope you have a phone or laptop with you you can participate in",
    "start": "54180",
    "end": "61289"
  },
  {
    "text": "the demo so big picture app mesh I want",
    "start": "61289",
    "end": "69510"
  },
  {
    "text": "to set the stage for how we're thinking about app mesh not just today but moving",
    "start": "69510",
    "end": "75689"
  },
  {
    "text": "forward so the way we think about app mesh at AWS is what we call application",
    "start": "75689",
    "end": "82619"
  },
  {
    "text": "level networking so the idea is that if",
    "start": "82619",
    "end": "87960"
  },
  {
    "text": "you look historically containers or micro services or even regular services",
    "start": "87960",
    "end": "94320"
  },
  {
    "text": "that are running on ec2 when you start building applications based on",
    "start": "94320",
    "end": "100020"
  },
  {
    "text": "containers and micro services one of the first things that you have to do is build a bunch of network infrastructure",
    "start": "100020",
    "end": "106520"
  },
  {
    "text": "you have to create a virtual private cloud or VPC if to create subnets",
    "start": "106520",
    "end": "112220"
  },
  {
    "text": "security groups nap gateways Internet gateways route tables a whole bunch of",
    "start": "112220",
    "end": "119579"
  },
  {
    "text": "stuff that you have to do before you even get to your application on the",
    "start": "119579",
    "end": "126390"
  },
  {
    "text": "other hand if you're developing micro services and you're running a micro",
    "start": "126390",
    "end": "131580"
  },
  {
    "text": "service based architecture your developers really just care about the applications and which application",
    "start": "131580",
    "end": "139970"
  },
  {
    "text": "can talk to which other application which service can talk to which service and the logging and the observability",
    "start": "139970",
    "end": "146900"
  },
  {
    "text": "around those services and they don't really want to have to think about all of that networking stuff the networking",
    "start": "146900",
    "end": "153230"
  },
  {
    "text": "stuff is implementation details that an application shouldn't really have to know about and so app mash is the first",
    "start": "153230",
    "end": "162800"
  },
  {
    "text": "step towards achieving a vision of an application level network where",
    "start": "162800",
    "end": "169840"
  },
  {
    "text": "operators and developers can focus on their applications and think about what",
    "start": "169840",
    "end": "174860"
  },
  {
    "text": "their applications need and they don't have to think about the network so at",
    "start": "174860",
    "end": "182180"
  },
  {
    "text": "mesh is a step in that direction app mesh because it's application level",
    "start": "182180",
    "end": "188120"
  },
  {
    "text": "network it works across many different compute primitives including ec2 UCS",
    "start": "188120",
    "end": "194450"
  },
  {
    "text": "farg ad KS eventually will incorporate things like API gateway and lambda so",
    "start": "194450",
    "end": "201739"
  },
  {
    "text": "you should that's how you should think about app mash is that its application level networking that works across",
    "start": "201739",
    "end": "207130"
  },
  {
    "text": "compute primitives and to just hammer that point home I want to emphasize if",
    "start": "207130",
    "end": "215180"
  },
  {
    "text": "there's one thing to take away from the presentation today if there's one thing that you remember if there's one picture",
    "start": "215180",
    "end": "221269"
  },
  {
    "text": "you take of a slide it's this one which is that app mesh works across compute",
    "start": "221269",
    "end": "227239"
  },
  {
    "text": "services it is not tied into a specific container Orchestrator or compute",
    "start": "227239",
    "end": "234620"
  },
  {
    "text": "primitive so it works with Amazon ECS which is our Amazon AWS native container",
    "start": "234620",
    "end": "242060"
  },
  {
    "text": "Orchestrator it works with Fargate which is our server list container platform it works with eks which is our managed",
    "start": "242060",
    "end": "249620"
  },
  {
    "text": "kubernetes platform it works even with services services that are running directly on ec2 that are even running in",
    "start": "249620",
    "end": "255829"
  },
  {
    "text": "containers and we'll see that in the demo that I do also works on kubernetes if you're running your own kubernetes",
    "start": "255829",
    "end": "261680"
  },
  {
    "text": "cluster you're not using the managed kubernetes service works with that also works",
    "start": "261680",
    "end": "266930"
  },
  {
    "text": "equally well with all of these compute services so just keep that in mind this",
    "start": "266930",
    "end": "272660"
  },
  {
    "text": "is not specifically tied to containers it's not specifically tied to ECS or kubernetes its application level",
    "start": "272660",
    "end": "279560"
  },
  {
    "text": "networking across compute services so now I want to take a step even farther",
    "start": "279560",
    "end": "286910"
  },
  {
    "text": "back and look at the need for a service",
    "start": "286910",
    "end": "292400"
  },
  {
    "text": "mesh in general and as you may have",
    "start": "292400",
    "end": "297530"
  },
  {
    "text": "heard Amazon as a customer obsessed company that's one of our leadership principles and so one of that things",
    "start": "297530",
    "end": "305240"
  },
  {
    "text": "that that customer obsession means is that we listen really closely to our customers and the problems they're",
    "start": "305240",
    "end": "311419"
  },
  {
    "text": "having and the things that make them happy and there's really nobody better to explain that than a customer which is",
    "start": "311419",
    "end": "318500"
  },
  {
    "text": "why I'd like to invite an in mahajan to the stage who is the executive director",
    "start": "318500",
    "end": "323960"
  },
  {
    "text": "of service engineering in Edmonds comm and he's going to talk about the journey that they're going through at Edmonds",
    "start": "323960",
    "end": "330139"
  },
  {
    "text": "and the benefit of service mesh thanks Nick",
    "start": "330139",
    "end": "336820"
  },
  {
    "start": "333000",
    "end": "643000"
  },
  {
    "text": "good evening everyone and as Nick mentioned I'm Nitin Mahajan I work for",
    "start": "337000",
    "end": "344030"
  },
  {
    "text": "Edmonds calm in my current role I provide it as a service I'm responsible",
    "start": "344030",
    "end": "350240"
  },
  {
    "text": "for providing data as a service at Edmonds and what it means as acquiring",
    "start": "350240",
    "end": "356960"
  },
  {
    "text": "data converting raw data into rich domain objects and exposing that data",
    "start": "356960",
    "end": "362900"
  },
  {
    "text": "Wow you know microservices API is so we at",
    "start": "362900",
    "end": "370250"
  },
  {
    "text": "Edmonds on the business side help car manufacturers market their you know new",
    "start": "370250",
    "end": "376909"
  },
  {
    "text": "car models and we help over 20 million monthly car shoppers who visit Edmonds",
    "start": "376909",
    "end": "382669"
  },
  {
    "text": "calm connect with over 10,000 dealer partners to facilitate their karmic",
    "start": "382669",
    "end": "387740"
  },
  {
    "text": "needs now let me tell you one thing like we at Edmonds loves car so much so that",
    "start": "387740",
    "end": "396070"
  },
  {
    "text": "to celebrate our 50th anniversary we did mount 1966 Corvette Stingray on a rotating",
    "start": "396070",
    "end": "404749"
  },
  {
    "text": "turntable in our atrium and not just that to represent our ongoing",
    "start": "404749",
    "end": "412419"
  },
  {
    "text": "reinvention we also mounted the most modern version of Corvette upside-down",
    "start": "412419",
    "end": "418360"
  },
  {
    "text": "rotating in the ceiling on top of the reception desk this transformation took",
    "start": "418360",
    "end": "425389"
  },
  {
    "text": "over 50 years and today I'm going to talk about similar transformation which",
    "start": "425389",
    "end": "431330"
  },
  {
    "text": "is from monolith to micro-services and I'm going to talk about you know what",
    "start": "431330",
    "end": "436909"
  },
  {
    "text": "our micro-services what do you need them what are the principles you should be",
    "start": "436909",
    "end": "442610"
  },
  {
    "text": "following if you're trying to you know transition from monolith to micro-service irrespective of whether",
    "start": "442610",
    "end": "449059"
  },
  {
    "text": "you're starting or you are in the middle or you're done with your journey and lastly you know some of the challenges",
    "start": "449059",
    "end": "455019"
  },
  {
    "text": "which you face with micro-services and where service mesh comes into play so",
    "start": "455019",
    "end": "462849"
  },
  {
    "text": "let's start with what are micro services micro service is something which is",
    "start": "462849",
    "end": "469819"
  },
  {
    "text": "small and focused to do one thing well and you could say you can rewrite this",
    "start": "469819",
    "end": "475610"
  },
  {
    "text": "micro service within very short period of time some people say two weeks but you can",
    "start": "475610",
    "end": "480709"
  },
  {
    "text": "you know engage based on you don't really need to spend years on doing this and lastly it follows single",
    "start": "480709",
    "end": "487129"
  },
  {
    "text": "responsibility principle so micro",
    "start": "487129",
    "end": "492199"
  },
  {
    "text": "services emerge from this world of you know automation lean development fail",
    "start": "492199",
    "end": "501979"
  },
  {
    "text": "fast continuous delivery domain driven design and I would say I think something",
    "start": "501979",
    "end": "507319"
  },
  {
    "text": "which put micro services on steroids is virtualization and cloud so that's how",
    "start": "507319",
    "end": "513860"
  },
  {
    "text": "you know we talk about micro services on a daily basis now you hear it you know everywhere so attachments we had made",
    "start": "513860",
    "end": "523339"
  },
  {
    "text": "significant progress in our micro service journey and every journey comes",
    "start": "523339",
    "end": "528829"
  },
  {
    "text": "with some challenges and I'm going to share a story of one of her challenge",
    "start": "528829",
    "end": "534050"
  },
  {
    "text": "a couple of years ago we made a decision to replace our search engine from Apache",
    "start": "534050",
    "end": "540380"
  },
  {
    "text": "Solr to elastic search and it was a natural you know progression we our data was",
    "start": "540380",
    "end": "546680"
  },
  {
    "text": "growing and we wanted new capabilities and elk stack was really amazing at that",
    "start": "546680",
    "end": "552410"
  },
  {
    "text": "point in time and I think it's still doing great so we took a very standard",
    "start": "552410",
    "end": "557780"
  },
  {
    "text": "format for this migration we said hey and I'm going to build a parallel elk",
    "start": "557780",
    "end": "562790"
  },
  {
    "text": "stack a parallel last exertion a strict search database and build services on",
    "start": "562790",
    "end": "568370"
  },
  {
    "text": "top of that and slowly start transitioning our clients to this new service elastic batch service now irony",
    "start": "568370",
    "end": "576350"
  },
  {
    "text": "is two years into it we are still maintaining both systems so which which",
    "start": "576350",
    "end": "583310"
  },
  {
    "text": "basically you know does two different two problems one is we have to pay in",
    "start": "583310",
    "end": "588320"
  },
  {
    "text": "terms of maintenance and infrastructure and even the bigger one is data consistency issues we have to deal with",
    "start": "588320",
    "end": "595760"
  },
  {
    "text": "these two sources of truth and when your site is powered by two sources of truth you have to make sure that is consistent",
    "start": "595760",
    "end": "602450"
  },
  {
    "text": "and it's really tough when you are dealing with such things when we do",
    "start": "602450",
    "end": "608180"
  },
  {
    "text": "retrospective we did not really follow micro service principles when we did",
    "start": "608180",
    "end": "613670"
  },
  {
    "text": "this first you know solar backed service and there were 10 20 30 applications",
    "start": "613670",
    "end": "620060"
  },
  {
    "text": "which are all connecting to the solar database and now once you have to replace it you have to rewrite all those",
    "start": "620060",
    "end": "625850"
  },
  {
    "text": "30 applications compared to single responsibility principle you have one",
    "start": "625850",
    "end": "631010"
  },
  {
    "text": "application doing one thing so that's that's what I think one of the takeaways you know when you're doing if you're",
    "start": "631010",
    "end": "636950"
  },
  {
    "text": "doing micro services make sure you're not you know you you segment these",
    "start": "636950",
    "end": "641960"
  },
  {
    "text": "things so taking a step back I think all",
    "start": "641960",
    "end": "647540"
  },
  {
    "start": "643000",
    "end": "1217000"
  },
  {
    "text": "of you are familiar with this but what is the monolith monolith is where you",
    "start": "647540",
    "end": "652940"
  },
  {
    "text": "know you have your entire application all components of application packaged as one unit a better search TM LGS or",
    "start": "652940",
    "end": "661250"
  },
  {
    "text": "all the services and most of the time they talk to single database",
    "start": "661250",
    "end": "666270"
  },
  {
    "text": "and your entire dev team is working on that same piece of software now monoliths are not inherently bad I",
    "start": "666270",
    "end": "674520"
  },
  {
    "text": "think if you're starting something new or if you have a small team and",
    "start": "674520",
    "end": "680840"
  },
  {
    "text": "complexity of your software is low it is okay and it's fine to do monoliths and",
    "start": "680840",
    "end": "686630"
  },
  {
    "text": "they do have advantage like it's easy to troubleshoot and if there's a failure you can find that easily where monoliths",
    "start": "686630",
    "end": "695220"
  },
  {
    "text": "are bad is when your software complexity grows and at the same time your team",
    "start": "695220",
    "end": "702210"
  },
  {
    "text": "size grows that's when you start facing issues with monolith and the two main",
    "start": "702210",
    "end": "707820"
  },
  {
    "text": "issues are how fast you are shipping your software and number two is scalability like if you have to scale",
    "start": "707820",
    "end": "715400"
  },
  {
    "text": "you have no option you have to scale entire monolith in this in this diagram let's say service is which needs more",
    "start": "715400",
    "end": "722040"
  },
  {
    "text": "traffic or more compute power you have no option you are going to really really",
    "start": "722040",
    "end": "727220"
  },
  {
    "text": "multiply the entire monolith so this is where micro services come",
    "start": "727220",
    "end": "733920"
  },
  {
    "text": "into play and the question is hey why do you need micro service in today's",
    "start": "733920",
    "end": "739980"
  },
  {
    "text": "competitive world you cannot go to business and say I'm going to take four",
    "start": "739980",
    "end": "745380"
  },
  {
    "text": "weeks six weeks or you know six months to deploy an artifact or deploy a business feature what business needs is",
    "start": "745380",
    "end": "752570"
  },
  {
    "text": "they want to test their hypotheses multiple times a day or multiple times a week gather feedback and make a pivot so",
    "start": "752570",
    "end": "760650"
  },
  {
    "text": "they want to test the quantum collect data and deploy a next version of artifact run multiple a/b tests in every",
    "start": "760650",
    "end": "768840"
  },
  {
    "text": "day and this is where this modern software development this micro services",
    "start": "768840",
    "end": "775230"
  },
  {
    "text": "architecture is coming handy and what micro services enables is it enables you",
    "start": "775230",
    "end": "783660"
  },
  {
    "text": "to build small cross-functional development teams which further enables",
    "start": "783660",
    "end": "788970"
  },
  {
    "text": "you to have CI CD continuous delivery that's the whole whole gist of it you",
    "start": "788970",
    "end": "795240"
  },
  {
    "text": "know if you think you're doing micro services and you're not able to deploy your ship your software",
    "start": "795240",
    "end": "800250"
  },
  {
    "text": "multiple times a day or multiple times a week I think it's time to recheck there is something wrong so I talked about you",
    "start": "800250",
    "end": "811320"
  },
  {
    "text": "know covering few principles if you are beginning to you know split your",
    "start": "811320",
    "end": "817380"
  },
  {
    "text": "monolith if you think you know your team sizes drawn and complexity is growing and you want to split first thing I",
    "start": "817380",
    "end": "824790"
  },
  {
    "text": "think you need to think of as your micro services should be loosely coupled and they should have high cohesion loosely",
    "start": "824790",
    "end": "832380"
  },
  {
    "text": "coupled don't do what I give you an example of solar if if you have so many",
    "start": "832380",
    "end": "837870"
  },
  {
    "text": "dependency it's it's not loosely coupled and you want to make sure you are able to change a software without really",
    "start": "837870",
    "end": "844980"
  },
  {
    "text": "impacting anything else at the same time you need high cohesion you do not want",
    "start": "844980",
    "end": "850140"
  },
  {
    "text": "to break it so small that to deploy one feature you have to deploy you know or",
    "start": "850140",
    "end": "855390"
  },
  {
    "text": "launch one feature you are deploying 20 different artifacts that's that's where you need to have a high cohesion and how",
    "start": "855390",
    "end": "864090"
  },
  {
    "text": "do you achieve that this this is bounded",
    "start": "864090",
    "end": "869340"
  },
  {
    "text": "context this is a basic design or I should say very basic domain driven design pattern this tells you you know",
    "start": "869340",
    "end": "876480"
  },
  {
    "text": "how you want to split your monolith into micro services and how to really achieve cohesion while keeping this loosely",
    "start": "876480",
    "end": "884190"
  },
  {
    "text": "coupled interfaces I would suggest you know I think reading this this is a difficult pattern to implement but I",
    "start": "884190",
    "end": "891990"
  },
  {
    "text": "think it gives you an idea you know what you should be doing how should you be really splitting a monolith and another",
    "start": "891990",
    "end": "900630"
  },
  {
    "text": "view of I should say and I should say I think I can talk to Edmunds examples",
    "start": "900630",
    "end": "906630"
  },
  {
    "text": "here you can split your monolith by two aspects one by business capability and",
    "start": "906630",
    "end": "913550"
  },
  {
    "text": "second sub-domain so what I mean by splitting Amon elizabeth sub-domain is",
    "start": "913550",
    "end": "919890"
  },
  {
    "text": "if I take Edmunds example we have sub domain level core services if you I",
    "start": "919890",
    "end": "926820"
  },
  {
    "text": "don't know if you have visited Edmunds or not but we need to really show make",
    "start": "926820",
    "end": "931860"
  },
  {
    "text": "model years of a car we need to show photos of car we need to show what incentives are available in given zip code all all",
    "start": "931860",
    "end": "938910"
  },
  {
    "text": "those services are core services and that's how you know a sub-domain level service is a vehicle service or it's a",
    "start": "938910",
    "end": "945570"
  },
  {
    "text": "photo service and other aspect is business capability if you are trying to",
    "start": "945570",
    "end": "952589"
  },
  {
    "text": "do a car research or as a business we want to build a car search capability",
    "start": "952589",
    "end": "957779"
  },
  {
    "text": "that itself is a micro service or car buying is a micro service so these are",
    "start": "957779",
    "end": "963209"
  },
  {
    "text": "various ways or techniques we have internally used to you know - for our",
    "start": "963209",
    "end": "968970"
  },
  {
    "text": "micro service journey and this diagram is showing our current very high-level a",
    "start": "968970",
    "end": "976050"
  },
  {
    "text": "micro service architecture and a lot of the principles I talked earlier are applied in this if I start from extreme",
    "start": "976050",
    "end": "984029"
  },
  {
    "text": "right that is where I think a lot of my responsibility comes in to providing",
    "start": "984029",
    "end": "989519"
  },
  {
    "text": "data as a service and extreme right you see this data base layer we are using",
    "start": "989519",
    "end": "996060"
  },
  {
    "text": "heterogeneous data base layer we are using MongoDB elasticsearch DynamoDB",
    "start": "996060",
    "end": "1001430"
  },
  {
    "text": "Redis and developers have their ability or they have freedom that's what's power of micro services they have ability to",
    "start": "1001430",
    "end": "1008870"
  },
  {
    "text": "pick a database technology based on the use case and most of our core domain",
    "start": "1008870",
    "end": "1014690"
  },
  {
    "text": "services are written in Java and this this layer is where I was referring to",
    "start": "1014690",
    "end": "1020029"
  },
  {
    "text": "you know vehicle API or a photo API or incentive API in the middleware DC the",
    "start": "1020029",
    "end": "1027319"
  },
  {
    "text": "product teams that is are split by business functionality and product teams",
    "start": "1027319",
    "end": "1034160"
  },
  {
    "text": "can come and do their own development and pick their technology like you know nodejs or java and they are building",
    "start": "1034160",
    "end": "1041780"
  },
  {
    "text": "like you know car search service or the building a car buying service this",
    "start": "1041780",
    "end": "1047449"
  },
  {
    "text": "pattern is also called BFF which is back-end for front-end I think Netflix heavily uses this pattern if I keep",
    "start": "1047449",
    "end": "1055910"
  },
  {
    "text": "going you know I think platform team again it's a micro service where we build our own gateway I'm not talking",
    "start": "1055910",
    "end": "1063890"
  },
  {
    "text": "Amazon gateway this gateway is responsible for caching resilience we",
    "start": "1063890",
    "end": "1069500"
  },
  {
    "text": "have hysterics Netflix hysterics library there and on extreme end is we are again",
    "start": "1069500",
    "end": "1076100"
  },
  {
    "text": "product teams come into play and we use react and redux for building rich UI",
    "start": "1076100",
    "end": "1082520"
  },
  {
    "text": "components now this is very high-level view of how micro service architecture",
    "start": "1082520",
    "end": "1090980"
  },
  {
    "text": "will look like but reality is way more complex than what you see in this diagram reality is this so this is a",
    "start": "1090980",
    "end": "1102740"
  },
  {
    "text": "screenshot from our production environment which is this is powering our website and all of each of these",
    "start": "1102740",
    "end": "1110120"
  },
  {
    "text": "dots big dots are compute a compute node whether it's ECS container or it has ec2",
    "start": "1110120",
    "end": "1118400"
  },
  {
    "text": "instance and it is really really difficult when you are dealing with we",
    "start": "1118400",
    "end": "1124640"
  },
  {
    "text": "are looking at you know roughly around thousand compute nodes and it is it",
    "start": "1124640",
    "end": "1130640"
  },
  {
    "text": "becomes a nightmare when you have to really manage or support a system like this so with this I think the challenges",
    "start": "1130640",
    "end": "1140570"
  },
  {
    "text": "we face with micro services and it's not just us at Edmonds this is a normal",
    "start": "1140570",
    "end": "1146450"
  },
  {
    "text": "problem which once you have all these small pieces talking to each other how do you really control service to service",
    "start": "1146450",
    "end": "1153620"
  },
  {
    "text": "communication how do you really get visibility into service to service communication how do you really organize",
    "start": "1153620",
    "end": "1160820"
  },
  {
    "text": "your small devop teams which are you know which are which are trying to you",
    "start": "1160820",
    "end": "1166730"
  },
  {
    "text": "know get in a bring innovation in your in your company and how do you trust on",
    "start": "1166730",
    "end": "1172130"
  },
  {
    "text": "the security and compliance so what is missing is or what is needed is this",
    "start": "1172130",
    "end": "1181850"
  },
  {
    "text": "consistent communication management complete visibility into this micro services mesh and failure isolation",
    "start": "1181850",
    "end": "1190450"
  },
  {
    "text": "protection and fine grained deployment controls and thatís where industry has",
    "start": "1190450",
    "end": "1196760"
  },
  {
    "text": "come up with the solution service mesh and I think with this I'll hand over to Nick to walk",
    "start": "1196760",
    "end": "1203970"
  },
  {
    "text": "you guys through his awesome demo with that mesh plus a lot of other stuff",
    "start": "1203970",
    "end": "1211040"
  },
  {
    "text": "thank you thank you so I think that",
    "start": "1211040",
    "end": "1218970"
  },
  {
    "text": "especially that that chart showing the reality of just how many services are running in production and what's the",
    "start": "1218970",
    "end": "1224940"
  },
  {
    "text": "topology of them talking to each other shows how there can be challenges with",
    "start": "1224940",
    "end": "1229950"
  },
  {
    "text": "micro services so with that then we're gonna dive into app mesh and how it can help you solve those challenges so in",
    "start": "1229950",
    "end": "1239070"
  },
  {
    "start": "1236000",
    "end": "1539000"
  },
  {
    "text": "particular the problem that we're addressing today with app mesh is what I",
    "start": "1239070",
    "end": "1245250"
  },
  {
    "text": "call inter-service traffic also known as east-west traffic so if you think about",
    "start": "1245250",
    "end": "1251070"
  },
  {
    "text": "the case of Edmunds they've got tons of services running they own all those services there may be different teams",
    "start": "1251070",
    "end": "1257250"
  },
  {
    "text": "managing them but they own all those services and those services are talking to each other and that's how they're that's how their service their",
    "start": "1257250",
    "end": "1263370"
  },
  {
    "text": "edmunds.com application works so that's east-west traffic that's services that",
    "start": "1263370",
    "end": "1269880"
  },
  {
    "text": "you own talking to each other as opposed to north-south traffic which is clients",
    "start": "1269880",
    "end": "1275490"
  },
  {
    "text": "out on the internet coming in your front door and talking to your services AWS",
    "start": "1275490",
    "end": "1281190"
  },
  {
    "text": "has other products like application load balance or API gateway that are designed for that use case today Avinash is",
    "start": "1281190",
    "end": "1287640"
  },
  {
    "text": "focused on the east-west inter-service traffic problem so if you think about an environment in which you have many",
    "start": "1287640",
    "end": "1293940"
  },
  {
    "text": "different services running talking to each other some of the common things that you'd like to get our things like",
    "start": "1293940",
    "end": "1300270"
  },
  {
    "text": "logs and metrics and traces what does that mean exactly well if you just take",
    "start": "1300270",
    "end": "1306120"
  },
  {
    "text": "a really simple example of two services if I have service a and service Abby and",
    "start": "1306120",
    "end": "1311610"
  },
  {
    "text": "service a is talking to service B and when I say talking to I mean it is for example making HTTP requests to service",
    "start": "1311610",
    "end": "1319170"
  },
  {
    "text": "B layer seven traffic if I want to log",
    "start": "1319170",
    "end": "1324360"
  },
  {
    "text": "those requests that are going into B of course I could just turn on logging in B",
    "start": "1324360",
    "end": "1331140"
  },
  {
    "text": "depending on how its implemented and have logs every time a request comes in to be but now extend that problem to",
    "start": "1331140",
    "end": "1338850"
  },
  {
    "text": "the case of a hundred services written in Python and go and net and C++ and who",
    "start": "1338850",
    "end": "1345330"
  },
  {
    "text": "knows what else and I want to have uniform logs coming out of all of those services how do I do that well I can go",
    "start": "1345330",
    "end": "1352830"
  },
  {
    "text": "talk to those all those different service teams and do a bunch of work to get them all to use the same logging SDK",
    "start": "1352830",
    "end": "1359130"
  },
  {
    "text": "and hopefully they keep that SDK up to date it's challenging right very",
    "start": "1359130",
    "end": "1364710"
  },
  {
    "text": "challenging to actually get uniform logs out of many many different services same",
    "start": "1364710",
    "end": "1371220"
  },
  {
    "text": "thing with with metrics so what is metrics metrics means that I'm like",
    "start": "1371220",
    "end": "1376680"
  },
  {
    "text": "counting something like I'm counting bytes and received I'm counting the number of requests that succeeded or failed I want to get uniform metrics out",
    "start": "1376680",
    "end": "1384540"
  },
  {
    "text": "of all of my services tracing I'll talk more about tracing later but tracing in",
    "start": "1384540",
    "end": "1389580"
  },
  {
    "text": "some ways as a specialized form of logging where I want to follow a request as it goes through my whole system load",
    "start": "1389580",
    "end": "1398310"
  },
  {
    "text": "balancing so usually it's the case even in a simple example like just to",
    "start": "1398310",
    "end": "1403740"
  },
  {
    "text": "services service a making request a service B that B actually has multiple",
    "start": "1403740",
    "end": "1408870"
  },
  {
    "text": "endpoints like it's running as a kubernetes service or it's running as a",
    "start": "1408870",
    "end": "1413970"
  },
  {
    "text": "an e CS or a Fargate service there may be 10 20 or 100 containers that are all",
    "start": "1413970",
    "end": "1419030"
  },
  {
    "text": "serving up the functionality of B and I want a to like to load balance to all",
    "start": "1419030",
    "end": "1425370"
  },
  {
    "text": "those containers but I don't want to have to build in load balancing into the",
    "start": "1425370",
    "end": "1430380"
  },
  {
    "text": "app actual application code for a because then I'd have to go back to the route of saying oh I got a bike download",
    "start": "1430380",
    "end": "1436710"
  },
  {
    "text": "an SDK or write my own and now I have to have all my teams keep that up to date I would like the mash to do the load",
    "start": "1436710",
    "end": "1443280"
  },
  {
    "text": "balancing for me B might roll out the",
    "start": "1443280",
    "end": "1448710"
  },
  {
    "text": "service team for B might roll out a new version they've got a new version of their service they want all of the",
    "start": "1448710",
    "end": "1454680"
  },
  {
    "text": "clients to start using the new version but only a small percentage of the traffic so that they can test and see",
    "start": "1454680",
    "end": "1460830"
  },
  {
    "text": "whether it works in production they don't want anybody else to know that that's happening so how can I get",
    "start": "1460830",
    "end": "1466890"
  },
  {
    "text": "a to start sending some of its requests to the new version of be but I don't",
    "start": "1466890",
    "end": "1471900"
  },
  {
    "text": "want the a-team who's developing a to have to know that that's happening or go in and change their code to make that",
    "start": "1471900",
    "end": "1477690"
  },
  {
    "text": "happen I'd like it to just happen all of this stuff is kind of getting at the idea of",
    "start": "1477690",
    "end": "1484010"
  },
  {
    "text": "decoupling the service teams one of the purported benefits of Micra services is",
    "start": "1484010",
    "end": "1490530"
  },
  {
    "text": "increasing this the velocity of development and delivery but you can't",
    "start": "1490530",
    "end": "1495690"
  },
  {
    "text": "do that if all your teams are highly coupled to each other that every time one team does a release the other teams",
    "start": "1495690",
    "end": "1500790"
  },
  {
    "text": "have to know about it and sign off on it you they need to be able to iterate independently and that's where you get",
    "start": "1500790",
    "end": "1506340"
  },
  {
    "text": "that accelerated pace of development so ideally a MASH would enable them to do",
    "start": "1506340",
    "end": "1512490"
  },
  {
    "text": "that would help D couple them further would minimize impact on the application code so the developers who are super",
    "start": "1512490",
    "end": "1519600"
  },
  {
    "text": "good at writing application code can focus on their a unique business logic of their service and not have to spend",
    "start": "1519600",
    "end": "1525930"
  },
  {
    "text": "time on heavy lifting of things like load balancing and traffic shifting so",
    "start": "1525930",
    "end": "1530970"
  },
  {
    "text": "these are the problems that we're solving with that mesh this is where we're focused with that mesh is solving",
    "start": "1530970",
    "end": "1536610"
  },
  {
    "text": "these these challenges and how we do that is with a sort of two-part",
    "start": "1536610",
    "end": "1544620"
  },
  {
    "start": "1539000",
    "end": "1637000"
  },
  {
    "text": "architecture so there's a proxy component to app mesh also called the",
    "start": "1544620",
    "end": "1552060"
  },
  {
    "text": "data plane the proxy is the thing that physically does all of that",
    "start": "1552060",
    "end": "1557190"
  },
  {
    "text": "functionality that I just described it is the thing that actually does the load balancing it does the traffic shifting",
    "start": "1557190",
    "end": "1562770"
  },
  {
    "text": "it generates the logs and the metrics does all that stuff of course if the",
    "start": "1562770",
    "end": "1569310"
  },
  {
    "text": "proxy is gonna do all that somebody has to tell it what to do you don't really",
    "start": "1569310",
    "end": "1574740"
  },
  {
    "text": "want to have to have a configuration file that you're distributing manually to hundreds or thousands of running",
    "start": "1574740",
    "end": "1580800"
  },
  {
    "text": "proxies and then try to update that configuration file when you change something so that's what the control",
    "start": "1580800",
    "end": "1586350"
  },
  {
    "text": "plane does what we offer an at mesh is a highly available managed control plane",
    "start": "1586350",
    "end": "1592080"
  },
  {
    "text": "each proxy that is running is connected to the control plane and the control plane is responsible for keeping the",
    "start": "1592080",
    "end": "1598590"
  },
  {
    "text": "proxy configuration up-to-date so when you go into the at mesh api's and you create at mesh resources which",
    "start": "1598590",
    "end": "1606840"
  },
  {
    "text": "would be things like a mesh and a virtual service which you can read about in the documentation what those things mean you can find examples online that",
    "start": "1606840",
    "end": "1613860"
  },
  {
    "text": "show how to use those constructs you go into the console or you go into the API you create your app mesh resources and",
    "start": "1613860",
    "end": "1619410"
  },
  {
    "text": "then all that gets translated into proxy configuration by the control plane and it distributes that configuration out to",
    "start": "1619410",
    "end": "1626640"
  },
  {
    "text": "all the running proxies for you so that",
    "start": "1626640",
    "end": "1632370"
  },
  {
    "text": "architecture helps us achieve all of those goals that I just outlined on the previous page so why why are the proxy",
    "start": "1632370",
    "end": "1640260"
  },
  {
    "text": "approach because you might be wondering well wait a second you're saying you're using this proxy so now I have to run",
    "start": "1640260",
    "end": "1647430"
  },
  {
    "text": "another piece of code so why do I have to run another piece of code what are",
    "start": "1647430",
    "end": "1652500"
  },
  {
    "text": "the benefits of doing that well the benefits are that now I can run that",
    "start": "1652500",
    "end": "1659370"
  },
  {
    "text": "proxy I can install it and upgrade it independently of my application code",
    "start": "1659370",
    "end": "1665510"
  },
  {
    "text": "because it's not like tied in and I'm not building it into the code I'm not forcing the developers to use this",
    "start": "1665510",
    "end": "1671280"
  },
  {
    "text": "particular library or SDK the configuration of the proxy is",
    "start": "1671280",
    "end": "1676550"
  },
  {
    "text": "independent of the configuration and business logic of your applications the proxies have their own business logic",
    "start": "1676550",
    "end": "1682890"
  },
  {
    "text": "and their own configuration your applications have their special business logic and configuration and those two",
    "start": "1682890",
    "end": "1688080"
  },
  {
    "text": "are completely separate from one another it also minimizes inconsistencies even",
    "start": "1688080",
    "end": "1694260"
  },
  {
    "text": "if I am running services written in a bunch of different languages running on three different compute platforms I can",
    "start": "1694260",
    "end": "1701940"
  },
  {
    "text": "have the same proxy running everywhere down by the same specific version and I can use the same configuration",
    "start": "1701940",
    "end": "1708300"
  },
  {
    "text": "everywhere so I get a nice consistent configuration of my mesh independent of the language",
    "start": "1708300",
    "end": "1713490"
  },
  {
    "text": "and platforms that the different service teams are using so that's why we go with the sidecar proxy approach really the",
    "start": "1713490",
    "end": "1720690"
  },
  {
    "text": "only other option besides a proxy would be an SDK and with an SDK I've kind of",
    "start": "1720690",
    "end": "1726660"
  },
  {
    "text": "outlined some of the challenges there already but it's got to be available in all the languages that the services are",
    "start": "1726660",
    "end": "1731910"
  },
  {
    "text": "written in we've customers tell us yeah we have an SDK right now that we wrote that does a lot",
    "start": "1731910",
    "end": "1738210"
  },
  {
    "text": "of this but now we've got a team saying they want to write and go and our SDK doesn't working go so we can either",
    "start": "1738210",
    "end": "1744240"
  },
  {
    "text": "spend a bunch of money in developing it and go or we can tell that service team no you can't use go so with the sidecar",
    "start": "1744240",
    "end": "1750960"
  },
  {
    "text": "proxy all those issues go away if you're",
    "start": "1750960",
    "end": "1757140"
  },
  {
    "start": "1755000",
    "end": "1851000"
  },
  {
    "text": "using containers if you're using ECS or far gate or eks or kubernetes this the",
    "start": "1757140",
    "end": "1762929"
  },
  {
    "text": "proxy approach is really easy to implement because you just run that proxy as a container and you run it as a",
    "start": "1762929",
    "end": "1770520"
  },
  {
    "text": "sidecar container what does that mean a sidecar container well if you're not",
    "start": "1770520",
    "end": "1776460"
  },
  {
    "text": "familiar with container orchestrators ECS and Fargate & eks they have a",
    "start": "1776460",
    "end": "1782250"
  },
  {
    "text": "similar concept in mind which is either a task or a pod where you you have a group of related containers that you",
    "start": "1782250",
    "end": "1788789"
  },
  {
    "text": "specify in a configuration file and those containers kind of run together as a unit and so what you can do with this",
    "start": "1788789",
    "end": "1796620"
  },
  {
    "text": "proxy model the sidecar proxy is you can just put in that specification that",
    "start": "1796620",
    "end": "1802590"
  },
  {
    "text": "lists all the containers you want to run and each task or pod you can just put the container for the proxy into that",
    "start": "1802590",
    "end": "1808919"
  },
  {
    "text": "definition and now you're running the proxy along with all the other containers that you're already running in your application and then that proxy",
    "start": "1808919",
    "end": "1817470"
  },
  {
    "text": "handles all of the traffic so what happens is that if you have other containers that are running and your",
    "start": "1817470",
    "end": "1823980"
  },
  {
    "text": "task or your pod and they make a HTTP request that's going out the door that request gets intercepted by the proxy",
    "start": "1823980",
    "end": "1831030"
  },
  {
    "text": "sitting right next to it running on the same instance and then the proxy is the thing that implicates implements the all",
    "start": "1831030",
    "end": "1838980"
  },
  {
    "text": "of the mesh logic so this pattern is especially attractive with containers",
    "start": "1838980",
    "end": "1844970"
  },
  {
    "text": "but remember you don't have to use containers to use that mesh or to use a sidecar proxy at mesh uses the Envoy",
    "start": "1844970",
    "end": "1854460"
  },
  {
    "start": "1851000",
    "end": "2024000"
  },
  {
    "text": "proxy if you haven't heard of envoy P access log so every request that comes",
    "start": "1854460",
    "end": "1859890"
  },
  {
    "text": "into or goes out of that sidecar container gets logged and that log is",
    "start": "1859890",
    "end": "1865440"
  },
  {
    "text": "available as a container law if you're running in a container environment which means then that it's",
    "start": "1865440",
    "end": "1870480"
  },
  {
    "text": "very easy to ingest that into cloud watch log so now you can have a single place where all of your mesh logs are",
    "start": "1870480",
    "end": "1876720"
  },
  {
    "text": "coming in Metrix we have a couple",
    "start": "1876720",
    "end": "1881730"
  },
  {
    "text": "different ways that you can get metrics so one is cloud watch metrics but you",
    "start": "1881730",
    "end": "1886770"
  },
  {
    "text": "can also push easily push metrics out in stats D format which means they can go into data dog and some other metrics",
    "start": "1886770",
    "end": "1892680"
  },
  {
    "text": "aggregators or you can use Prometheus compatible metrics system to actually",
    "start": "1892680",
    "end": "1898770"
  },
  {
    "text": "pull metrics out of all of them running on voice and the metrics include things",
    "start": "1898770",
    "end": "1904800"
  },
  {
    "text": "like error rates success rates bytes sent and received current open",
    "start": "1904800",
    "end": "1910350"
  },
  {
    "text": "connections those those kinds of things tracing I said before that I would talk",
    "start": "1910350",
    "end": "1916380"
  },
  {
    "text": "about tracing if you're not familiar with tracing tracing it the idea there is that if I have a multi-tiered",
    "start": "1916380",
    "end": "1922530"
  },
  {
    "text": "architecture like kind of what's shown on this slide here where I may have multiple services and like a chain of",
    "start": "1922530",
    "end": "1929820"
  },
  {
    "text": "requests that happen any time something comes in the front door it can get",
    "start": "1929820",
    "end": "1935760"
  },
  {
    "text": "complicated in that type of architecture if something goes wrong to diagnose well",
    "start": "1935760",
    "end": "1941310"
  },
  {
    "text": "okay I see an error on the request that came in from the load balancer where",
    "start": "1941310",
    "end": "1946710"
  },
  {
    "text": "what caused that error like was it three levels down and my request or why did that happen",
    "start": "1946710",
    "end": "1952020"
  },
  {
    "text": "so what tracing does is you inject special headers into the HTTP requests",
    "start": "1952020",
    "end": "1958260"
  },
  {
    "text": "that get propagated through so that you can actually follow and say well this requests trigger this one which trigger",
    "start": "1958260",
    "end": "1963780"
  },
  {
    "text": "this one which triggered this one and this one here took an extra ten seconds so that's why the whole thing took",
    "start": "1963780",
    "end": "1969660"
  },
  {
    "text": "longer than I thought or this one caused the error so that's why I had an error upstream from that so that's the value",
    "start": "1969660",
    "end": "1975960"
  },
  {
    "text": "of tracing in some ways it's a special form of logging now to really do tracing",
    "start": "1975960",
    "end": "1983280"
  },
  {
    "text": "you do have to instrument your application because no mesh can",
    "start": "1983280",
    "end": "1988560"
  },
  {
    "text": "magically figure out the business logic inside your application I can't figure out for you that because a request came",
    "start": "1988560",
    "end": "1995160"
  },
  {
    "text": "in here it generated a request there I don't know that that's necessarily going to happen or not",
    "start": "1995160",
    "end": "2000240"
  },
  {
    "text": "so you do have to put in the for whatever tracing system you're gonna use you got to integrate in an SDK in your",
    "start": "2000240",
    "end": "2006750"
  },
  {
    "text": "applications what we're doing an app mash is we're propagating those traces through the Envoy proxies so that you",
    "start": "2006750",
    "end": "2014160"
  },
  {
    "text": "can actually follow not only the traces in your application but the traces in the mesh also I'll show you a real",
    "start": "2014160",
    "end": "2021330"
  },
  {
    "text": "example so to help you understand what exactly that means the other piece the",
    "start": "2021330",
    "end": "2028320"
  },
  {
    "start": "2024000",
    "end": "2087000"
  },
  {
    "text": "other area of benefit besides observability is what we call traffic management means things like based on an",
    "start": "2028320",
    "end": "2037500"
  },
  {
    "text": "HTTP HTTP path I might want to actually send a request to a different place the",
    "start": "2037500",
    "end": "2043620"
  },
  {
    "text": "client doesn't know that that's happening it just thinks that it made a request to a particular URL but the mesh",
    "start": "2043620",
    "end": "2049169"
  },
  {
    "text": "can route based on the path of that request that actually send it to like",
    "start": "2049170",
    "end": "2054389"
  },
  {
    "text": "different versions of the service or maybe even different micro-services so that I can have a virtual service that",
    "start": "2054390",
    "end": "2062370"
  },
  {
    "text": "looks like it's a single domain name with a bunch of paths below it but then",
    "start": "2062370",
    "end": "2067770"
  },
  {
    "text": "actually I've implemented it as a bunch of micro services on the backend and the mesh is routing those requests to the",
    "start": "2067770",
    "end": "2072810"
  },
  {
    "text": "different micro services and the clients don't have to know that that's kind of like microcircuits to monolith like I",
    "start": "2072810",
    "end": "2079169"
  },
  {
    "text": "have a micro services than I'm presenting it as if it's a monolith you can easily do that kind of thing with a",
    "start": "2079170",
    "end": "2084330"
  },
  {
    "text": "mesh so you may already be aware of this",
    "start": "2084330",
    "end": "2091139"
  },
  {
    "start": "2087000",
    "end": "2122000"
  },
  {
    "text": "but we launched at mesh into general availability a few weeks ago at the Santa Clara summit really excited about",
    "start": "2091140",
    "end": "2096659"
  },
  {
    "text": "that so it comes with these observability and traffic control features it's compatible across all AWS",
    "start": "2096660",
    "end": "2102840"
  },
  {
    "text": "managed container services as well as self managed kubernetes and even services running on ec2 that's kind of",
    "start": "2102840",
    "end": "2110490"
  },
  {
    "text": "that key point that I was talking about that app mesh is application level networking it works across multiple",
    "start": "2110490",
    "end": "2115710"
  },
  {
    "text": "compute per motives you can even have a single mesh spanning multiple compute primitives at the same time so how does",
    "start": "2115710",
    "end": "2125760"
  },
  {
    "start": "2122000",
    "end": "2168000"
  },
  {
    "text": "app mesh actually work if you want to get started with that mesh what do you need to do remember we talked about the",
    "start": "2125760",
    "end": "2131610"
  },
  {
    "text": "two pieces the control plane and the data or the proxy so on the control plane",
    "start": "2131610",
    "end": "2137820"
  },
  {
    "text": "side you use the add mesh API or the CLI or SDK or you can go into the console to",
    "start": "2137820",
    "end": "2144780"
  },
  {
    "text": "create meshes virtual nodes virtual routes and routers virtual services those are app mesh resources that define",
    "start": "2144780",
    "end": "2151770"
  },
  {
    "text": "the connectivity of your mesh and then you take your service let's say you're",
    "start": "2151770",
    "end": "2158700"
  },
  {
    "text": "running a TCS service and even the traffic shaping the observability benefits but you can migrate like one at",
    "start": "2158700",
    "end": "2166290"
  },
  {
    "text": "a time if you want to so I'm actually going to show you a demo now very simple",
    "start": "2166290",
    "end": "2173850"
  },
  {
    "text": "demo but if you have your phone handy feel free to bring up that URL there app",
    "start": "2173850",
    "end": "2180210"
  },
  {
    "text": "color teller demo comm I'm gonna explain",
    "start": "2180210",
    "end": "2185940"
  },
  {
    "text": "what the architecture is of this application it is the simplest possible micro service application there are two",
    "start": "2185940",
    "end": "2195360"
  },
  {
    "text": "services one of them is called the gateway it's not an API gateway don't",
    "start": "2195360",
    "end": "2201360"
  },
  {
    "text": "get thrown off by the name it just happens to be called gateway it's a",
    "start": "2201360",
    "end": "2206850"
  },
  {
    "text": "service that's running in ECS it's a container and that gateway container is",
    "start": "2206850",
    "end": "2215520"
  },
  {
    "text": "hooked up to a load balancer to an application load balancer and then there's actually like a web application",
    "start": "2215520",
    "end": "2220920"
  },
  {
    "text": "which is app color teller demo com that is using that load balancer so what",
    "start": "2220920",
    "end": "2227400"
  },
  {
    "text": "happens when you bring up that page I'll",
    "start": "2227400",
    "end": "2232440"
  },
  {
    "text": "switch to it temporarily is you see this the color is red",
    "start": "2232440",
    "end": "2239090"
  },
  {
    "text": "so what's what's happening there well there's a web application some JavaScript and it's making a request to",
    "start": "2239090",
    "end": "2246240"
  },
  {
    "text": "the load balancer the load balancer is forwarding the request into the Gateway and the Gateway remember that's just",
    "start": "2246240",
    "end": "2252540"
  },
  {
    "text": "happens to be the name of it it's just an ECS service it's not like an actual AWS gateway gets that request and it",
    "start": "2252540",
    "end": "2261360"
  },
  {
    "text": "turns around and it makes in turn makes another request to a service called color teller which",
    "start": "2261360",
    "end": "2267360"
  },
  {
    "text": "an internal only service the color teller service is not externally accessible it's running in a private",
    "start": "2267360",
    "end": "2273090"
  },
  {
    "text": "network and the color teller returns an answer red and then the Gateway turns",
    "start": "2273090",
    "end": "2278490"
  },
  {
    "text": "our on it returns that answer to the web page and the web page renders the result",
    "start": "2278490",
    "end": "2283610"
  },
  {
    "text": "like I said it's like the simplest possible application and I can click the",
    "start": "2283610",
    "end": "2289320"
  },
  {
    "text": "button and you can't tell but it's actually making requests every time I click the button and getting the same answer every time so that's that's the",
    "start": "2289320",
    "end": "2299430"
  },
  {
    "text": "application right now I actually do have it running into mesh so what's actually",
    "start": "2299430",
    "end": "2308520"
  },
  {
    "start": "2305000",
    "end": "2449000"
  },
  {
    "text": "running is the color teller integrated into the mesh so what's actually",
    "start": "2308520",
    "end": "2314970"
  },
  {
    "text": "happening is not only is there a gateway container but there's an envoy sitting right next to that gateway container and",
    "start": "2314970",
    "end": "2323280"
  },
  {
    "text": "actually the Gateway container is running as an ECS service so there's actually three of them running in",
    "start": "2323280",
    "end": "2328560"
  },
  {
    "text": "parallel and the load balancers sending requests round-robin to all three",
    "start": "2328560",
    "end": "2334040"
  },
  {
    "text": "there's three envoys sitting there the Envoy is hooked up to the control plane and it is emitting logs and traces",
    "start": "2334040",
    "end": "2342060"
  },
  {
    "text": "also coming out of the Envoy not coming out of my application my application has no idea that logs and traces are turned",
    "start": "2342060",
    "end": "2349170"
  },
  {
    "text": "on it's just a some very simple little node application that gets a request and makes a request and then the color",
    "start": "2349170",
    "end": "2357990"
  },
  {
    "text": "teller also has an envoy so what actually happens when a request comes in from the load balancer is it goes into",
    "start": "2357990",
    "end": "2364350"
  },
  {
    "text": "the gateway it actually goes into the Gateway envoy first the diagram here is",
    "start": "2364350",
    "end": "2370470"
  },
  {
    "text": "slightly wrong the the request from the load balancer actually goes into the Envoy container first which forwards it",
    "start": "2370470",
    "end": "2377100"
  },
  {
    "text": "to the Gateway container the Gateway container says I've got a request to came in from somewhere I'll turn around",
    "start": "2377100",
    "end": "2383070"
  },
  {
    "text": "to make a request to the color teller service that request actually gets intercepted by the Envoy the Envoy says",
    "start": "2383070",
    "end": "2391200"
  },
  {
    "text": "I'm going to interpret what I'm supposed to do with this you're making a request to the color teller service I'm gonna",
    "start": "2391200",
    "end": "2396840"
  },
  {
    "text": "forward that to the color teller red service actually there is no actual color teller",
    "start": "2396840",
    "end": "2404850"
  },
  {
    "text": "service there's only color teller red but the Gateway doesn't know that the Envoy and the mesh know that they know",
    "start": "2404850",
    "end": "2412050"
  },
  {
    "text": "that any request that comes into the color teller service is actually supposed to go to the color teller red",
    "start": "2412050",
    "end": "2417660"
  },
  {
    "text": "service and the envoy changes the request and sends it to the colored teller red service which then goes in to",
    "start": "2417660",
    "end": "2424950"
  },
  {
    "text": "the envoy sitting and the color teller service which then forwards it to the actual container so I got like some",
    "start": "2424950",
    "end": "2431640"
  },
  {
    "text": "extra hops in there but two of those extra hops are happening between containers on the same machine so",
    "start": "2431640",
    "end": "2437850"
  },
  {
    "text": "they're super low latency they're almost invisible so like I said I have this",
    "start": "2437850",
    "end": "2445470"
  },
  {
    "text": "running in the mesh that's the application that you're actually using and I hope you're all mashing that",
    "start": "2445470",
    "end": "2450480"
  },
  {
    "start": "2449000",
    "end": "2693000"
  },
  {
    "text": "button a bunch of times because we need to generate some data here I'm going to show you what the traces look like so",
    "start": "2450480",
    "end": "2460020"
  },
  {
    "text": "this is the x-ray console what does this mean so this have a pointer on it it",
    "start": "2460020",
    "end": "2469860"
  },
  {
    "text": "doesn't have a pointer okay so the thing that says clients that's you guys okay",
    "start": "2469860",
    "end": "2477000"
  },
  {
    "text": "you're making requests they come into that first circle the green circle where",
    "start": "2477000",
    "end": "2482490"
  },
  {
    "text": "it says color teller slash gateway and then you'll notice below that it says AWS app mash proxy that is the Envoy",
    "start": "2482490",
    "end": "2489080"
  },
  {
    "text": "container sitting in the Gateway there's actually three but a zoom out a little",
    "start": "2489080",
    "end": "2494700"
  },
  {
    "text": "more here what you can't quite see let",
    "start": "2494700",
    "end": "2501270"
  },
  {
    "text": "me see if I reload this way zoom out a little bit there we go what you can see",
    "start": "2501270",
    "end": "2507330"
  },
  {
    "text": "is that a nice little thing I did here",
    "start": "2507330",
    "end": "2512700"
  },
  {
    "text": "is that actually the color teller red is running on as an on an ec2 instance so the red service is not even running as a",
    "start": "2512700",
    "end": "2519780"
  },
  {
    "text": "container it's just a process I literally logged into a shell ssh into",
    "start": "2519780",
    "end": "2525540"
  },
  {
    "text": "the instance and typed node color teller ogs and that's how i ran the red color",
    "start": "2525540",
    "end": "2531090"
  },
  {
    "text": "teller it's not even a container mesh no doesn't care running an envoy on that",
    "start": "2531090",
    "end": "2536380"
  },
  {
    "text": "instance so it's doing the same thing that it does everywhere I also have",
    "start": "2536380",
    "end": "2542920"
  },
  {
    "text": "logging turned on now we'll see how much",
    "start": "2542920",
    "end": "2547960"
  },
  {
    "text": "you're really hitting that button so these are the access logs for the read",
    "start": "2547960",
    "end": "2556799"
  },
  {
    "text": "process that's running on ec2 so I'll",
    "start": "2556799",
    "end": "2563650"
  },
  {
    "text": "just do 30 seconds here so these are live access logs looks like somebody's hitting it a lot",
    "start": "2563650",
    "end": "2571318"
  },
  {
    "text": "now what's cool about that logs is that my node application does no logging",
    "start": "2571920",
    "end": "2577750"
  },
  {
    "text": "whatsoever so imagine I'm the service team for the color tiller red service boss said you",
    "start": "2577750",
    "end": "2584289"
  },
  {
    "text": "got to do logging I said screw it I'm not to logging too bad you're doing logging the mash is",
    "start": "2584289",
    "end": "2589599"
  },
  {
    "text": "doing logging for you we turned it on you didn't have to do anything it's logging anyway and I can get the same",
    "start": "2589599",
    "end": "2597700"
  },
  {
    "text": "format logs regardless of what application language I'm using Python",
    "start": "2597700",
    "end": "2603309"
  },
  {
    "text": "Java doesn't matter the logs are all going to be in the same format likewise",
    "start": "2603309",
    "end": "2609279"
  },
  {
    "text": "I had those traces where I actually see the envoys in the traces okay so now the",
    "start": "2609279",
    "end": "2617349"
  },
  {
    "text": "red team is running on ec2 and they've decided they're gonna containerize",
    "start": "2617349",
    "end": "2623970"
  },
  {
    "text": "they're gonna run on kubernetes and they're gonna change the color so they want to try out a new version of a",
    "start": "2624059",
    "end": "2630099"
  },
  {
    "text": "service but being a little risk-averse company says well we don't want you to",
    "start": "2630099",
    "end": "2636309"
  },
  {
    "text": "go to kubernetes and change it to color all at the same time without testing it out a little bit",
    "start": "2636309",
    "end": "2642970"
  },
  {
    "text": "first so let's just start routing a little traffic to it so we've already",
    "start": "2642970",
    "end": "2648250"
  },
  {
    "text": "got a new color running and it's already running on kubernetes we got colored colored green running it's already up",
    "start": "2648250",
    "end": "2657819"
  },
  {
    "text": "and running but no traffic is being routed to it so I'm gonna go in and I'm",
    "start": "2657819",
    "end": "2664450"
  },
  {
    "text": "going to edit my route I'll be a little aggressive and I'm gonna send 50:50 traffic you know really",
    "start": "2664450",
    "end": "2672700"
  },
  {
    "text": "if you're doing a canary deployment you should do like ninety ten but for the purposes of a demo so I don't have to",
    "start": "2672700",
    "end": "2677710"
  },
  {
    "text": "click the button ten times to get green show to show up I'm gonna make it 50/50",
    "start": "2677710",
    "end": "2683940"
  },
  {
    "text": "okay well you all hit the button please and tell me what you get people get in",
    "start": "2683940",
    "end": "2693670"
  },
  {
    "start": "2693000",
    "end": "2931000"
  },
  {
    "text": "green you saw how fast that showed up right it takes about five seconds or so",
    "start": "2693670",
    "end": "2699160"
  },
  {
    "text": "maybe ten for the configuration to change the beauty of this is that the",
    "start": "2699160",
    "end": "2705489"
  },
  {
    "text": "gateway service has no idea that red and green exist all it knows is I'm making",
    "start": "2705489",
    "end": "2711279"
  },
  {
    "text": "requests to a service called color teller I change the mash and now I've",
    "start": "2711279",
    "end": "2716739"
  },
  {
    "text": "started routing 50:50 I'm gonna hit the",
    "start": "2716739",
    "end": "2722109"
  },
  {
    "text": "button to make sure we're generating enough data for x-ray I can go into",
    "start": "2722109",
    "end": "2728440"
  },
  {
    "text": "x-ray and once it updates we should see green okay so now I see that I have red",
    "start": "2728440",
    "end": "2739660"
  },
  {
    "text": "and green and you'll notice kind of where the arrows come out of so the Gateway container there's a circle in",
    "start": "2739660",
    "end": "2746170"
  },
  {
    "text": "the upper left it's looks this the traffic looks the same as it did before comes in from the Envoy goes back out to",
    "start": "2746170",
    "end": "2753460"
  },
  {
    "text": "the Envoy where what changed is the Envoy container itself that circle on the lower left which is the proxy for",
    "start": "2753460",
    "end": "2760569"
  },
  {
    "text": "the Gateway service it knows about red and green and it knows when it gets a request for the color teller service",
    "start": "2760569",
    "end": "2766900"
  },
  {
    "text": "it's supposed to split the traffic 50/50 between red and green and so that's where we see the arrows come out so what",
    "start": "2766900",
    "end": "2773319"
  },
  {
    "text": "I like about this x-ray view is that it's kind of showing you what's really happening you have your conceptual view",
    "start": "2773319",
    "end": "2778690"
  },
  {
    "text": "in the mesh of I just have service making requests to color teller and this",
    "start": "2778690",
    "end": "2784059"
  },
  {
    "text": "is showing you what's actually happening and you can even drill down and look at",
    "start": "2784059",
    "end": "2790440"
  },
  {
    "text": "individual and this is just a function of x-ray this isn't unique to app mesh but you can drill down and look at",
    "start": "2790440",
    "end": "2796900"
  },
  {
    "text": "individual traces and see the timing and see like how much time the mesh add to my requests so for",
    "start": "2796900",
    "end": "2805740"
  },
  {
    "text": "example here I can see that it was about one millisecond of latency due to the proxy sitting in front of the color",
    "start": "2805740",
    "end": "2811710"
  },
  {
    "text": "teller red service millisecond I think I can accept an extra millisecond to get these benefits so really nice that I'm",
    "start": "2811710",
    "end": "2824970"
  },
  {
    "text": "able to make that change to my configuration and have that change show up live and green is running on",
    "start": "2824970",
    "end": "2834030"
  },
  {
    "text": "kubernetes so I now have a mesh with three different compute services ECS ec2",
    "start": "2834030",
    "end": "2840240"
  },
  {
    "text": "and kubernetes eks and it's all the same mesh because I'm not tied into a",
    "start": "2840240",
    "end": "2846180"
  },
  {
    "text": "particular compute platform I can run my mesh across multiple compute Klat forms",
    "start": "2846180",
    "end": "2852119"
  },
  {
    "text": "I can even use the mesh to help me migrate from ec2 to containers and my",
    "start": "2852119",
    "end": "2859920"
  },
  {
    "text": "other services don't have to know that that's happening so you know a lot of people when they think about service",
    "start": "2859920",
    "end": "2865470"
  },
  {
    "text": "meshes they have the idea that somehow you need to be running a micro service architecture first and that you need to",
    "start": "2865470",
    "end": "2873000"
  },
  {
    "text": "be running in containers are running in kubernetes first before you can use a mesh we actually think the reverse that",
    "start": "2873000",
    "end": "2879059"
  },
  {
    "text": "a mesh can help you transition to a micro service architecture and it can help you containerize that's step one in",
    "start": "2879059",
    "end": "2886710"
  },
  {
    "text": "your micro service and container journey is get running with a mesh first get at",
    "start": "2886710",
    "end": "2892230"
  },
  {
    "text": "mesh up and running with your existing services then start refactoring redesigning getting things running in",
    "start": "2892230",
    "end": "2897839"
  },
  {
    "text": "containers it'd be a lot easier to do that if you have everything everything running in the mesh first",
    "start": "2897839",
    "end": "2904880"
  },
  {
    "text": "okay so super simple demo illustrates",
    "start": "2914050",
    "end": "2921050"
  },
  {
    "text": "the concept as you can imagine these same context concepts would extend out to hundreds many many services running",
    "start": "2921050",
    "end": "2927860"
  },
  {
    "text": "on thousands of containers same idea I do want to mention the partners that we",
    "start": "2927860",
    "end": "2935300"
  },
  {
    "start": "2931000",
    "end": "2979000"
  },
  {
    "text": "launched with especially in the areas of observability there's some really nice",
    "start": "2935300",
    "end": "2941570"
  },
  {
    "text": "solutions here to bring in all these different metrics logs and traces unto a single pane of glass some partners",
    "start": "2941570",
    "end": "2948740"
  },
  {
    "text": "working in the area of security helping you to secure your mash in your containers some of them are working on",
    "start": "2948740",
    "end": "2955280"
  },
  {
    "text": "solutions that actually do really nice controlled deployment where they're doing that weighted routing that I",
    "start": "2955280",
    "end": "2961910"
  },
  {
    "text": "showed you but they're automating that with the deployment so that as a deployment happens they're shifting the",
    "start": "2961910",
    "end": "2967130"
  },
  {
    "text": "traffic for you monitoring the metrics and automatically rolling back the deployment if the app mesh metrics get",
    "start": "2967130",
    "end": "2974090"
  },
  {
    "text": "outside their defined thresholds some really nice partner solutions roadmap so",
    "start": "2974090",
    "end": "2981680"
  },
  {
    "start": "2979000",
    "end": "3034000"
  },
  {
    "text": "we're really working at AWS on being much more transparent publicly about",
    "start": "2981680",
    "end": "2987230"
  },
  {
    "text": "what's coming so in that vein we're",
    "start": "2987230",
    "end": "2992900"
  },
  {
    "text": "telling you here what's available today but also what's coming soon and what are the bigger longer-term projects that",
    "start": "2992900",
    "end": "2998660"
  },
  {
    "text": "we're working on so near term you're gonna see a lot more features in the area of traffic shaping for that's what",
    "start": "2998660",
    "end": "3006340"
  },
  {
    "text": "most of those things on that list are longer term things like mutual TLS and",
    "start": "3006340",
    "end": "3011710"
  },
  {
    "text": "mesh peering mesh peering means can I run two meshes and have them talk to",
    "start": "3011710",
    "end": "3016870"
  },
  {
    "text": "each other instead of having to put everything in one mesh for example now",
    "start": "3016870",
    "end": "3022660"
  },
  {
    "text": "this is subject to change we're gonna as more customers use this and tell us about it I'm sure we'll be adding to",
    "start": "3022660",
    "end": "3028090"
  },
  {
    "text": "this list and changing some of the priorities but really want to be transparent with you and tell you what's",
    "start": "3028090",
    "end": "3033250"
  },
  {
    "text": "coming to the best of our knowledge to get started you can go to the product",
    "start": "3033250",
    "end": "3039460"
  },
  {
    "text": "landing page it's got some documentation there getting started guides we actually",
    "start": "3039460",
    "end": "3045310"
  },
  {
    "text": "have a public road map github also so that road matter that I just showed you is available on github",
    "start": "3045310",
    "end": "3050350"
  },
  {
    "text": "in much more detail if there's something that you want at mesh to do go to the",
    "start": "3050350",
    "end": "3057040"
  },
  {
    "text": "road map on github and and create an issue and you know if we hear about it",
    "start": "3057040",
    "end": "3064030"
  },
  {
    "text": "we think it's a good idea we hear from other customers is a good chance that I'll get into the product we're also",
    "start": "3064030",
    "end": "3071530"
  },
  {
    "text": "doing something really new for AWS that we're calling the beta Channel and the",
    "start": "3071530",
    "end": "3078190"
  },
  {
    "text": "concept there is that some of those features that are coming soon will actually be available in beta form",
    "start": "3078190",
    "end": "3084720"
  },
  {
    "text": "before they go into production you'll be able to literally try out a feature while it's still in development before",
    "start": "3084720",
    "end": "3092350"
  },
  {
    "text": "it goes into production which to my knowledge is something that we've never done before at AWS we've done previews",
    "start": "3092350",
    "end": "3099010"
  },
  {
    "text": "like we did with that mesh where the whole service was kind of in beta we've never done a service that's already",
    "start": "3099010",
    "end": "3104620"
  },
  {
    "text": "released and now we're adding features to it and giving early access to those features that's not some kind of white",
    "start": "3104620",
    "end": "3110620"
  },
  {
    "text": "list thing that's open to the public anybody that has an AWS account will be able to try out the beta Channel so with",
    "start": "3110620",
    "end": "3118510"
  },
  {
    "start": "3118000",
    "end": "3163000"
  },
  {
    "text": "that thank you thank you very much for staying late here we're really excited",
    "start": "3118510",
    "end": "3124180"
  },
  {
    "text": "about app mash and the things that it's going to be able to do for our customers so if you haven't tried it out yet please do let us know through github",
    "start": "3124180",
    "end": "3131100"
  },
  {
    "text": "what you need what you want to see and please do also complete the session",
    "start": "3131100",
    "end": "3136120"
  },
  {
    "text": "survey we really take those seriously so it would be great if you take the time to fill that out thank you",
    "start": "3136120",
    "end": "3143130"
  },
  {
    "text": "[Applause]",
    "start": "3143130",
    "end": "3150509"
  },
  {
    "text": "you",
    "start": "3162700",
    "end": "3164760"
  }
]