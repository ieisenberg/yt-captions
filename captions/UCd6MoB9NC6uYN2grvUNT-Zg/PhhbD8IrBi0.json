[
  {
    "start": "0",
    "end": "16000"
  },
  {
    "text": "In this video, you'll see how you can \nsecure your AWS data architecture.",
    "start": "160",
    "end": "3884"
  },
  {
    "text": "Using built-in security controls, you \ncan manage user access to your Amazon",
    "start": "4320",
    "end": "8160"
  },
  {
    "text": "Redshift clusters and grant user \npermissions to your Amazon Simple",
    "start": "8160",
    "end": "11360"
  },
  {
    "text": "Storage Service (Amazon S3) data lake \nto safely democratize data access.",
    "start": "11360",
    "end": "15989"
  },
  {
    "start": "16000",
    "end": "69000"
  },
  {
    "text": "Let's begin at our Amazon Redshift dashboard.",
    "start": "17089",
    "end": "19489"
  },
  {
    "text": "For our purposes, we already have a \nRedshift cluster created in our account.",
    "start": "21919",
    "end": "25388"
  },
  {
    "text": "Let's review the cluster's properties.",
    "start": "29179",
    "end": "30778"
  },
  {
    "text": "We can see that this cluster was created \nwithin a virtual private cloud (VPC),",
    "start": "35719",
    "end": "40199"
  },
  {
    "text": "and within a particular subnet \ndefined by a subnet group.",
    "start": "40199",
    "end": "43120"
  },
  {
    "text": "Let’s look at the subnet group.",
    "start": "44279",
    "end": "45639"
  },
  {
    "text": "The subnet group comprises three \nsubnets in three Availability Zones.",
    "start": "48088",
    "end": "51688"
  },
  {
    "text": "Since the cluster is created within a subnet, a \nnetwork access control list (ACL) can be applied.",
    "start": "54619",
    "end": "60131"
  },
  {
    "text": "By default, a security group is assigned for \ncontrolling inbound and outbound traffic,",
    "start": "60379",
    "end": "64709"
  },
  {
    "text": "and the public access option is disabled.",
    "start": "64709",
    "end": "66829"
  },
  {
    "text": "An AWS Identity and Access Management (IAM) role",
    "start": "69649",
    "end": "73329"
  },
  {
    "text": "has been assigned to control which AWS \nservices the cluster can connect to.",
    "start": "73329",
    "end": "77029"
  },
  {
    "text": "We can secure the cluster by \ndefining which users have access,",
    "start": "78299",
    "end": "81659"
  },
  {
    "text": "and even what tables or parts of \ntables they can view or modify.",
    "start": "81659",
    "end": "84778"
  },
  {
    "text": "We’ll look at two ways to grant user permissions: \nthrough the IAM role and with the query editor.",
    "start": "85319",
    "end": "89959"
  },
  {
    "text": "Let's first try with the query editor.",
    "start": "90709",
    "end": "92469"
  },
  {
    "text": "We'll use the built-in query \ndata and the current connection.",
    "start": "95539",
    "end": "98265"
  },
  {
    "text": "If we wanted to change the connection,",
    "start": "100599",
    "end": "102257"
  },
  {
    "text": "we could provide information about\nthe cluster and database here.",
    "start": "102258",
    "end": "105111"
  },
  {
    "text": "In this case, let’s move on.",
    "start": "105309",
    "end": "106588"
  },
  {
    "text": "As you can see, the dev database \ncomprises a number of tables.",
    "start": "108809",
    "end": "112062"
  },
  {
    "text": "As the Redshift administrator, we'll create an analyst user\nand grant access to only some of the tables—",
    "start": "112449",
    "end": "117744"
  },
  {
    "text": "and only some of the columns in those tables.",
    "start": "117745",
    "end": "119908"
  },
  {
    "text": "Now that the analyst user is created, we'll grant the user SELECT access\nto three tables in the dev database: sales, event, and date.",
    "start": "125089",
    "end": "132448"
  },
  {
    "text": "We’ll also grant access to two of the \nfour columns in the category table.",
    "start": "134159",
    "end": "137679"
  },
  {
    "text": "Controlling access at the column level allows\nus to protect personally identifiable data",
    "start": "138339",
    "end": "142728"
  },
  {
    "text": "while still providing analysts with the data they need.",
    "start": "142728",
    "end": "145028"
  },
  {
    "text": "Let's switch to the analyst user’s point of view.",
    "start": "145889",
    "end": "148049"
  },
  {
    "text": "Now we're logged in.\nLet's connect to the dev database.",
    "start": "150329",
    "end": "153096"
  },
  {
    "text": "We can see the three tables \nthe analyst user has access to.",
    "start": "156000",
    "end": "158870"
  },
  {
    "text": "Let’s expand the date table to \nsee the columns we can query.",
    "start": "161759",
    "end": "164319"
  },
  {
    "text": "Let's run a query to capture all \naccessible data in the date table.",
    "start": "167208",
    "end": "170327"
  },
  {
    "text": "Let's run another query on the two columns from \nthe category table this user has access to.",
    "start": "175628",
    "end": "179828"
  },
  {
    "text": "Now let’s see what happens if the query includes \na column the analyst user cannot access.",
    "start": "184919",
    "end": "189058"
  },
  {
    "text": "The query editor has responded \nwith an error message.",
    "start": "191448",
    "end": "193907"
  },
  {
    "text": "Let's return to the admin user's account.",
    "start": "196808",
    "end": "198648"
  },
  {
    "start": "200000",
    "end": "370000"
  },
  {
    "text": "A second way to grant cluster permissions is by managing\nthe IAM role that governs the Redshift cluster.",
    "start": "200898",
    "end": "205937"
  },
  {
    "text": "For instance, in the IAM \npermissions for our analyst user,",
    "start": "207338",
    "end": "210299"
  },
  {
    "text": "full access is granted to the Redshift \nquery editor and Amazon Athena,",
    "start": "210299",
    "end": "214049"
  },
  {
    "text": "but read-only access is granted \nto the Redshift console.",
    "start": "214049",
    "end": "216767"
  },
  {
    "text": "Now that we’ve looked at how the \ndata warehouse can be secured,",
    "start": "220699",
    "end": "223419"
  },
  {
    "text": "let’s look into securing the data lake.",
    "start": "223419",
    "end": "225208"
  },
  {
    "text": "In this example, we have an Amazon \nS3 bucket serving as the data lake.",
    "start": "225908",
    "end": "229441"
  },
  {
    "text": "It contains two objects: events and users.",
    "start": "229768",
    "end": "232497"
  },
  {
    "text": "As you can see here in AWS Lake Formation, we’ve \nregistered the S3 location as our data lake.",
    "start": "237549",
    "end": "242538"
  },
  {
    "text": "We also created a database for our AWS Glue Data Catalog",
    "start": "244178",
    "end": "247724"
  },
  {
    "text": "by crawling the files in the S3 bucket and creating \nthe corresponding metadata tables.",
    "start": "247725",
    "end": "252089"
  },
  {
    "text": "From here we can grant table \naccess to specific users.",
    "start": "254338",
    "end": "257177"
  },
  {
    "text": "We’ll work with the events table first and permit \nthe analyst user to query parts of the data.",
    "start": "259439",
    "end": "263709"
  },
  {
    "text": "We’ll give this user SELECT permissions, \nkeeping the default for all data access.",
    "start": "269549",
    "end": "273837"
  },
  {
    "text": "Next, we’ll grant access to \nthe users database table.",
    "start": "277839",
    "end": "280621"
  },
  {
    "text": "This time we’ll give the user SELECT \npermissions, but with only column-based access.",
    "start": "291999",
    "end": "296167"
  },
  {
    "text": "We'll exclude columns containing \ncertain personally identifiable data.",
    "start": "300408",
    "end": "303845"
  },
  {
    "text": "Now that we've granted the analyst \nuser permissions to the data lake,",
    "start": "314209",
    "end": "317158"
  },
  {
    "text": "let's perform some queries from that account.",
    "start": "317158",
    "end": "319017"
  },
  {
    "text": "With a page refresh, we see the user has \naccess to the two tables in the database.",
    "start": "321738",
    "end": "325818"
  },
  {
    "text": "Let's run a query to collect 10 \ndata results from the users table.",
    "start": "328178",
    "end": "331298"
  },
  {
    "text": "The query runs successfully.",
    "start": "333158",
    "end": "334585"
  },
  {
    "text": "From the analyst user's perspective, there is no indication\nthat some data columns are blocked.",
    "start": "335051",
    "end": "339178"
  },
  {
    "text": "Let's adjust the query to \napply to the events table.",
    "start": "342278",
    "end": "344678"
  },
  {
    "text": "The analyst user is again able to \nsuccessfully run this Select query.",
    "start": "350358",
    "end": "353878"
  },
  {
    "text": "Often, users use more than one AWS service \nto connect with or query their data lake.",
    "start": "356549",
    "end": "360949"
  },
  {
    "text": "Accordingly, the AWS data architecture has many ways to maintain\ndata security while democratizing access between services.",
    "start": "361449",
    "end": "368117"
  },
  {
    "start": "370000",
    "end": "450000"
  },
  {
    "text": "As an example, we'll bring data from outside the data lake\nand join it with some data in our Redshift data warehouse.",
    "start": "370488",
    "end": "375767"
  },
  {
    "text": "From the admin user account, we’ll run a query \nto create an external schema on our database.",
    "start": "376399",
    "end": "380728"
  },
  {
    "text": "We’ll now grant the analyst user \naccess to the schema’s tables.",
    "start": "381798",
    "end": "384827"
  },
  {
    "text": "Another way to grant user access is by revising\nthe permissions for the data lake that houses the database.",
    "start": "386908",
    "end": "391707"
  },
  {
    "text": "From the data lake permissions\npage on AWS Lake Formation,",
    "start": "392848",
    "end": "396201"
  },
  {
    "text": "we can search for the principal IAM role that governs the Redshift cluster\nand ensure it has access to all tables in the database.",
    "start": "396201",
    "end": "402228"
  },
  {
    "text": "In this case, the role has access \nto all tables in the database.",
    "start": "403919",
    "end": "407048"
  },
  {
    "text": "Let’s switch to the analyst user one last time.",
    "start": "409128",
    "end": "411367"
  },
  {
    "text": "We’ll select the schema in the dev database and perform some   queries\nthat join the data from our Redshift cluster with our data lake.",
    "start": "414128",
    "end": "419849"
  },
  {
    "text": "With this code, we'll join the sales table from the dev database\nto the users table from the external schema.",
    "start": "424258",
    "end": "429298"
  },
  {
    "text": "The analyst user can now view the joined data in the tables\nand columns the role has been granted access to.",
    "start": "432418",
    "end": "437338"
  },
  {
    "text": "You’ve just seen how you can \nsecure your AWS data architecture.",
    "start": "439089",
    "end": "442209"
  },
  {
    "text": "You can learn more about this topic in \nthe description and links for this video.",
    "start": "443289",
    "end": "446561"
  },
  {
    "text": "Thanks for watching. Now it's your turn to try.",
    "start": "446828",
    "end": "448809"
  }
]