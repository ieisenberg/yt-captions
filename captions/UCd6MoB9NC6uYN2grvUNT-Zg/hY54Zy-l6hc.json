[
  {
    "start": "0",
    "end": "26000"
  },
  {
    "text": "hello my name is Otto Cruiser and I'm a",
    "start": "1140",
    "end": "4440"
  },
  {
    "text": "Senior Solutions developer at AWS",
    "start": "4440",
    "end": "7259"
  },
  {
    "text": "in this video I will show you how you",
    "start": "7259",
    "end": "9540"
  },
  {
    "text": "can add passwordless authentication to",
    "start": "9540",
    "end": "11460"
  },
  {
    "text": "your web and mobile apps with Amazon",
    "start": "11460",
    "end": "13380"
  },
  {
    "text": "cognito",
    "start": "13380",
    "end": "15000"
  },
  {
    "text": "many users like password as",
    "start": "15000",
    "end": "16859"
  },
  {
    "text": "authentication such as signing in with",
    "start": "16859",
    "end": "19080"
  },
  {
    "text": "face ID or touch ID as they don't have",
    "start": "19080",
    "end": "21779"
  },
  {
    "text": "to remember passwords in that case",
    "start": "21779",
    "end": "24119"
  },
  {
    "text": "it can also be more secure",
    "start": "24119",
    "end": "27080"
  },
  {
    "start": "26000",
    "end": "51000"
  },
  {
    "text": "elaborate research has shown that",
    "start": "27080",
    "end": "29340"
  },
  {
    "text": "inadvertent data acts as events where",
    "start": "29340",
    "end": "31500"
  },
  {
    "text": "threat actors gain access to companies",
    "start": "31500",
    "end": "33480"
  },
  {
    "text": "data are very costly such events cost",
    "start": "33480",
    "end": "37020"
  },
  {
    "text": "companies no less than 4.35 million",
    "start": "37020",
    "end": "39960"
  },
  {
    "text": "dollars on average in 2022",
    "start": "39960",
    "end": "42780"
  },
  {
    "text": "research suggests that the majority of",
    "start": "42780",
    "end": "45600"
  },
  {
    "text": "companies will face such an inadvertent",
    "start": "45600",
    "end": "47640"
  },
  {
    "text": "data access event at one point in time",
    "start": "47640",
    "end": "51980"
  },
  {
    "start": "51000",
    "end": "71000"
  },
  {
    "text": "most inadvertent data access events are",
    "start": "52320",
    "end": "55079"
  },
  {
    "text": "caused by threat actors who manage to",
    "start": "55079",
    "end": "57000"
  },
  {
    "text": "get their hands on valid credentials",
    "start": "57000",
    "end": "59579"
  },
  {
    "text": "they use these credentials to access the",
    "start": "59579",
    "end": "61920"
  },
  {
    "text": "company systems",
    "start": "61920",
    "end": "63600"
  },
  {
    "text": "these inadvertent data access events are",
    "start": "63600",
    "end": "66060"
  },
  {
    "text": "also the hardest to identify and more",
    "start": "66060",
    "end": "68520"
  },
  {
    "text": "costly to remediate",
    "start": "68520",
    "end": "71520"
  },
  {
    "start": "71000",
    "end": "100000"
  },
  {
    "text": "a common way threat actors manage to",
    "start": "71520",
    "end": "74220"
  },
  {
    "text": "steal credentials is by phishing",
    "start": "74220",
    "end": "76860"
  },
  {
    "text": "fishing is a form of social engineering",
    "start": "76860",
    "end": "79200"
  },
  {
    "text": "where threat actors deceive people into",
    "start": "79200",
    "end": "81360"
  },
  {
    "text": "revealing sensitive information or",
    "start": "81360",
    "end": "83939"
  },
  {
    "text": "installing malware",
    "start": "83939",
    "end": "85680"
  },
  {
    "text": "be on your guard and don't think that",
    "start": "85680",
    "end": "87900"
  },
  {
    "text": "you will never fall for fishing there",
    "start": "87900",
    "end": "90360"
  },
  {
    "text": "have been cases of top Engineers working",
    "start": "90360",
    "end": "92640"
  },
  {
    "text": "at top companies that fell for fishing",
    "start": "92640",
    "end": "95220"
  },
  {
    "text": "these cases evidence that it can happen",
    "start": "95220",
    "end": "97740"
  },
  {
    "text": "to anyone",
    "start": "97740",
    "end": "100520"
  },
  {
    "start": "100000",
    "end": "124000"
  },
  {
    "text": "if you don't use passwords to sign in",
    "start": "100740",
    "end": "103259"
  },
  {
    "text": "you're also not at risk of your password",
    "start": "103259",
    "end": "105479"
  },
  {
    "text": "being stolen",
    "start": "105479",
    "end": "107159"
  },
  {
    "text": "this is why many organizations are now",
    "start": "107159",
    "end": "109439"
  },
  {
    "text": "looking to move to passwordless",
    "start": "109439",
    "end": "111060"
  },
  {
    "text": "Authentication",
    "start": "111060",
    "end": "112680"
  },
  {
    "text": "especially organizations are looking at",
    "start": "112680",
    "end": "114899"
  },
  {
    "text": "using phishing resistant credentials",
    "start": "114899",
    "end": "117540"
  },
  {
    "text": "these are credentials that are designed",
    "start": "117540",
    "end": "119700"
  },
  {
    "text": "to be impossible to steal",
    "start": "119700",
    "end": "121860"
  },
  {
    "text": "I'll talk more about this later",
    "start": "121860",
    "end": "125540"
  },
  {
    "text": "use Amazon Cognito to add authentication",
    "start": "125579",
    "end": "128340"
  },
  {
    "text": "to your customer facing applications",
    "start": "128340",
    "end": "131160"
  },
  {
    "text": "Amazon Cognito helps you implement",
    "start": "131160",
    "end": "133620"
  },
  {
    "text": "secure frictionless customer identity",
    "start": "133620",
    "end": "136080"
  },
  {
    "text": "and access management that skills",
    "start": "136080",
    "end": "138480"
  },
  {
    "text": "Amazon Cognito supports custom",
    "start": "138480",
    "end": "140400"
  },
  {
    "text": "authentication flows which give you the",
    "start": "140400",
    "end": "142980"
  },
  {
    "text": "possibility to create passwordless",
    "start": "142980",
    "end": "145140"
  },
  {
    "text": "authentication flows",
    "start": "145140",
    "end": "148140"
  },
  {
    "start": "147000",
    "end": "256000"
  },
  {
    "text": "to make it easier for customers to add",
    "start": "148140",
    "end": "150780"
  },
  {
    "text": "passwordless authentication to their",
    "start": "150780",
    "end": "152520"
  },
  {
    "text": "applications that use Amazon Cognito AWS",
    "start": "152520",
    "end": "155580"
  },
  {
    "text": "published the Amazon Cognito",
    "start": "155580",
    "end": "157080"
  },
  {
    "text": "passwordless authentication solution",
    "start": "157080",
    "end": "159080"
  },
  {
    "text": "this is a reference implementation of",
    "start": "159080",
    "end": "161819"
  },
  {
    "text": "passwordless authentication with Amazon",
    "start": "161819",
    "end": "163440"
  },
  {
    "text": "Cognito that you can run as is and use",
    "start": "163440",
    "end": "166860"
  },
  {
    "text": "as inspiration for further development",
    "start": "166860",
    "end": "168840"
  },
  {
    "text": "of your own",
    "start": "168840",
    "end": "169980"
  },
  {
    "text": "it supports several forms of",
    "start": "169980",
    "end": "171959"
  },
  {
    "text": "passwordless Authentication",
    "start": "171959",
    "end": "174660"
  },
  {
    "text": "it supports 502 or web buff n which is a",
    "start": "174660",
    "end": "178379"
  },
  {
    "text": "set of Open Standards developed by the",
    "start": "178379",
    "end": "180120"
  },
  {
    "text": "Fido Alliance 502 is designed to be",
    "start": "180120",
    "end": "182760"
  },
  {
    "text": "phishing resistant it uses public key",
    "start": "182760",
    "end": "184980"
  },
  {
    "text": "cryptography to authenticate users which",
    "start": "184980",
    "end": "187680"
  },
  {
    "text": "involves creating public private key",
    "start": "187680",
    "end": "189360"
  },
  {
    "text": "pairs",
    "start": "189360",
    "end": "190500"
  },
  {
    "text": "a private key is stored securely on the",
    "start": "190500",
    "end": "192540"
  },
  {
    "text": "user's device while the public key is",
    "start": "192540",
    "end": "194640"
  },
  {
    "text": "registered with the online service",
    "start": "194640",
    "end": "196980"
  },
  {
    "text": "when the user attempts to authenticate",
    "start": "196980",
    "end": "199019"
  },
  {
    "text": "their device generates a cryptographic",
    "start": "199019",
    "end": "201000"
  },
  {
    "text": "signature that can be verified using the",
    "start": "201000",
    "end": "203519"
  },
  {
    "text": "registered public key",
    "start": "203519",
    "end": "205620"
  },
  {
    "text": "502 supports a range of authentication",
    "start": "205620",
    "end": "208080"
  },
  {
    "text": "methods including biometric",
    "start": "208080",
    "end": "210420"
  },
  {
    "text": "authentication such as fingerprint or",
    "start": "210420",
    "end": "212879"
  },
  {
    "text": "facial recognition Hardware tokens such",
    "start": "212879",
    "end": "215940"
  },
  {
    "text": "as USB security keys and platform",
    "start": "215940",
    "end": "218519"
  },
  {
    "text": "authenticators such as Windows hello or",
    "start": "218519",
    "end": "221459"
  },
  {
    "text": "Apple's Touch ID",
    "start": "221459",
    "end": "223379"
  },
  {
    "text": "besides 502 the AWS passwordless",
    "start": "223379",
    "end": "226620"
  },
  {
    "text": "solution also supports signing in with",
    "start": "226620",
    "end": "228659"
  },
  {
    "text": "magic links",
    "start": "228659",
    "end": "230159"
  },
  {
    "text": "to sign in users enter their email",
    "start": "230159",
    "end": "232680"
  },
  {
    "text": "address and then a one-time use secret",
    "start": "232680",
    "end": "235080"
  },
  {
    "text": "sign-in link is emailed to them",
    "start": "235080",
    "end": "237420"
  },
  {
    "text": "this is a convenient sign-in method that",
    "start": "237420",
    "end": "240420"
  },
  {
    "text": "doesn't require using a password but it",
    "start": "240420",
    "end": "242879"
  },
  {
    "text": "is not phishing resistant and therefore",
    "start": "242879",
    "end": "244980"
  },
  {
    "text": "we recommend to use it as a fallback",
    "start": "244980",
    "end": "247319"
  },
  {
    "text": "mechanism and to encourage users to use",
    "start": "247319",
    "end": "249900"
  },
  {
    "text": "502 instead",
    "start": "249900",
    "end": "252060"
  },
  {
    "text": "I will now demonstrate the AWS",
    "start": "252060",
    "end": "254340"
  },
  {
    "text": "passwordless solution",
    "start": "254340",
    "end": "257100"
  },
  {
    "text": "the solution includes both backend and",
    "start": "257100",
    "end": "259560"
  },
  {
    "text": "front-end code for the back end it has a",
    "start": "259560",
    "end": "262380"
  },
  {
    "text": "cdk construct that includes everything",
    "start": "262380",
    "end": "264300"
  },
  {
    "text": "you need to add passwordless",
    "start": "264300",
    "end": "265740"
  },
  {
    "text": "Authentication",
    "start": "265740",
    "end": "267060"
  },
  {
    "text": "such as predefined Lambda triggers for",
    "start": "267060",
    "end": "269340"
  },
  {
    "text": "your usual pool to dynamodb tables a KMS",
    "start": "269340",
    "end": "272880"
  },
  {
    "text": "key and API Gateway",
    "start": "272880",
    "end": "275040"
  },
  {
    "text": "the cdk construct has many parameters",
    "start": "275040",
    "end": "277320"
  },
  {
    "text": "with which you can customize the",
    "start": "277320",
    "end": "278940"
  },
  {
    "text": "deployment",
    "start": "278940",
    "end": "280139"
  },
  {
    "text": "for the front end the solution is",
    "start": "280139",
    "end": "281940"
  },
  {
    "text": "Javascript functions and pre-built",
    "start": "281940",
    "end": "284100"
  },
  {
    "text": "sample react components and hooks that",
    "start": "284100",
    "end": "286380"
  },
  {
    "text": "work with the back end",
    "start": "286380",
    "end": "288660"
  },
  {
    "text": "the end-to-end example that I'll deploy",
    "start": "288660",
    "end": "290699"
  },
  {
    "text": "in this video will deploy a cdk stack",
    "start": "290699",
    "end": "293340"
  },
  {
    "text": "with the solutions construct",
    "start": "293340",
    "end": "295380"
  },
  {
    "text": "the stack also includes a cloudfront",
    "start": "295380",
    "end": "297720"
  },
  {
    "text": "distribution and S3 bucket where I will",
    "start": "297720",
    "end": "300360"
  },
  {
    "text": "upload the sample web application to",
    "start": "300360",
    "end": "302340"
  },
  {
    "text": "with which we can demonstrate the sign",
    "start": "302340",
    "end": "304500"
  },
  {
    "text": "in process",
    "start": "304500",
    "end": "307160"
  },
  {
    "start": "306000",
    "end": "650000"
  },
  {
    "text": "for this demo I will clone the solution",
    "start": "307740",
    "end": "309960"
  },
  {
    "text": "from GitHub to my local machine and",
    "start": "309960",
    "end": "311880"
  },
  {
    "text": "deploy the end-to-end example that is",
    "start": "311880",
    "end": "313800"
  },
  {
    "text": "included in the solution to my own AWS",
    "start": "313800",
    "end": "316020"
  },
  {
    "text": "account",
    "start": "316020",
    "end": "316979"
  },
  {
    "text": "the end-to-end example has two parts",
    "start": "316979",
    "end": "319199"
  },
  {
    "text": "first I will deploy the back end which",
    "start": "319199",
    "end": "321900"
  },
  {
    "text": "is a cdk stack and then I can run the",
    "start": "321900",
    "end": "324419"
  },
  {
    "text": "front end against that back end to",
    "start": "324419",
    "end": "326880"
  },
  {
    "text": "deploy the back end I must meet the",
    "start": "326880",
    "end": "328860"
  },
  {
    "text": "prereqs mentioned one important prereq",
    "start": "328860",
    "end": "331620"
  },
  {
    "text": "is that you need to have a verified SES",
    "start": "331620",
    "end": "333900"
  },
  {
    "text": "identity to use as from address for the",
    "start": "333900",
    "end": "336539"
  },
  {
    "text": "magic link emails furthermore if you are",
    "start": "336539",
    "end": "339900"
  },
  {
    "text": "still in the SES sandbox which you are",
    "start": "339900",
    "end": "342360"
  },
  {
    "text": "by default you must also verify all",
    "start": "342360",
    "end": "345000"
  },
  {
    "text": "email addresses that you want to send",
    "start": "345000",
    "end": "346860"
  },
  {
    "text": "emails to",
    "start": "346860",
    "end": "349199"
  },
  {
    "text": "I will now clone the solution from",
    "start": "349199",
    "end": "351060"
  },
  {
    "text": "GitHub to my local machine and deploy",
    "start": "351060",
    "end": "353100"
  },
  {
    "text": "the end-to-end example all these steps",
    "start": "353100",
    "end": "355500"
  },
  {
    "text": "are also explained in the readme",
    "start": "355500",
    "end": "357600"
  },
  {
    "text": "after cloning I change directory to the",
    "start": "357600",
    "end": "360000"
  },
  {
    "text": "end to end example cdk directory I",
    "start": "360000",
    "end": "363120"
  },
  {
    "text": "install dependencies which includes",
    "start": "363120",
    "end": "364919"
  },
  {
    "text": "installing a solution from npm and since",
    "start": "364919",
    "end": "367740"
  },
  {
    "text": "this will take a few moments let me",
    "start": "367740",
    "end": "369360"
  },
  {
    "text": "pause the recording while this runs",
    "start": "369360",
    "end": "373099"
  },
  {
    "text": "the MBM install has completed now as the",
    "start": "374220",
    "end": "377340"
  },
  {
    "text": "readme explains I must create an M local",
    "start": "377340",
    "end": "379860"
  },
  {
    "text": "file and enter the email address that",
    "start": "379860",
    "end": "382139"
  },
  {
    "text": "magic link should be sent from",
    "start": "382139",
    "end": "384240"
  },
  {
    "text": "to keep this demo Speedy I've already",
    "start": "384240",
    "end": "386340"
  },
  {
    "text": "done that and this is what that file",
    "start": "386340",
    "end": "387840"
  },
  {
    "text": "looks like",
    "start": "387840",
    "end": "390259"
  },
  {
    "text": "I will bootstrap the AWS account for cdk",
    "start": "392819",
    "end": "395580"
  },
  {
    "text": "you only need to do this once in an",
    "start": "395580",
    "end": "397860"
  },
  {
    "text": "account for each region that you want to",
    "start": "397860",
    "end": "399720"
  },
  {
    "text": "use with cdk",
    "start": "399720",
    "end": "402800"
  },
  {
    "text": "as you can see in this case I already",
    "start": "407460",
    "end": "409740"
  },
  {
    "text": "bootstrapped the account earlier okay so",
    "start": "409740",
    "end": "412319"
  },
  {
    "text": "let's deploy the end-to-end example cdk",
    "start": "412319",
    "end": "414479"
  },
  {
    "text": "stack",
    "start": "414479",
    "end": "416840"
  },
  {
    "text": "as you saw this was pretty quick because",
    "start": "429600",
    "end": "432300"
  },
  {
    "text": "I already deployed this tag earlier",
    "start": "432300",
    "end": "434220"
  },
  {
    "text": "while the video was passed to keep this",
    "start": "434220",
    "end": "436080"
  },
  {
    "text": "demo Speedy otherwise this would take a",
    "start": "436080",
    "end": "438479"
  },
  {
    "text": "few minutes",
    "start": "438479",
    "end": "439500"
  },
  {
    "text": "note the cloud formation outputs",
    "start": "439500",
    "end": "441539"
  },
  {
    "text": "displayed we will need these values in",
    "start": "441539",
    "end": "443520"
  },
  {
    "text": "the next step or we will deploy and run",
    "start": "443520",
    "end": "445680"
  },
  {
    "text": "the front end",
    "start": "445680",
    "end": "448280"
  },
  {
    "text": "let's deploy the front end now take note",
    "start": "448860",
    "end": "451620"
  },
  {
    "text": "of the spa URL cloud formation output",
    "start": "451620",
    "end": "454380"
  },
  {
    "text": "that's where we can access the sample",
    "start": "454380",
    "end": "456419"
  },
  {
    "text": "web app once deployment is done",
    "start": "456419",
    "end": "458759"
  },
  {
    "text": "I navigate to the client directory and",
    "start": "458759",
    "end": "461039"
  },
  {
    "text": "install dependencies there",
    "start": "461039",
    "end": "464240"
  },
  {
    "text": "after that we have to create an EnV",
    "start": "464520",
    "end": "466500"
  },
  {
    "text": "local file again like we did for cdk",
    "start": "466500",
    "end": "468720"
  },
  {
    "text": "deployment also and we will use the",
    "start": "468720",
    "end": "470880"
  },
  {
    "text": "cloud formation outputs that I showed",
    "start": "470880",
    "end": "472680"
  },
  {
    "text": "you earlier in that file now I already",
    "start": "472680",
    "end": "474960"
  },
  {
    "text": "created this file in the background",
    "start": "474960",
    "end": "476400"
  },
  {
    "text": "while the video is passed and I'll just",
    "start": "476400",
    "end": "478560"
  },
  {
    "text": "show you now what that file looks like",
    "start": "478560",
    "end": "480120"
  },
  {
    "text": "for me",
    "start": "480120",
    "end": "482160"
  },
  {
    "text": "okay so let's build the web app and",
    "start": "482160",
    "end": "484080"
  },
  {
    "text": "deploy it to S3",
    "start": "484080",
    "end": "487099"
  },
  {
    "text": "one final thing to do before we can run",
    "start": "496919",
    "end": "499319"
  },
  {
    "text": "the demo is to create a test user to",
    "start": "499319",
    "end": "501599"
  },
  {
    "text": "sign in with so let's do that now",
    "start": "501599",
    "end": "503520"
  },
  {
    "text": "navigate to Cognito in the AWS console",
    "start": "503520",
    "end": "506400"
  },
  {
    "text": "and create a test usually there",
    "start": "506400",
    "end": "508860"
  },
  {
    "text": "remember if you're still in the Amazon",
    "start": "508860",
    "end": "511319"
  },
  {
    "text": "SES sandbox then you need to verify this",
    "start": "511319",
    "end": "514260"
  },
  {
    "text": "email address there also",
    "start": "514260",
    "end": "516479"
  },
  {
    "text": "let's generate the password because we",
    "start": "516479",
    "end": "518459"
  },
  {
    "text": "don't use the password anyway",
    "start": "518459",
    "end": "521520"
  },
  {
    "text": "foreign",
    "start": "521520",
    "end": "523760"
  },
  {
    "text": "the demo now let's sign in with our test",
    "start": "525560",
    "end": "528540"
  },
  {
    "text": "user since we didn't create any 502",
    "start": "528540",
    "end": "531120"
  },
  {
    "text": "credentials yet for the test user the",
    "start": "531120",
    "end": "533040"
  },
  {
    "text": "only way we can sign in with this user",
    "start": "533040",
    "end": "534959"
  },
  {
    "text": "is by using a magic link so let's do",
    "start": "534959",
    "end": "537540"
  },
  {
    "text": "that",
    "start": "537540",
    "end": "539779"
  },
  {
    "text": "I will pause the recording momentarily",
    "start": "544260",
    "end": "546420"
  },
  {
    "text": "while we wait for the email to be sent",
    "start": "546420",
    "end": "548459"
  },
  {
    "text": "to us",
    "start": "548459",
    "end": "550820"
  },
  {
    "text": "okay the magic link is in let's click it",
    "start": "551220",
    "end": "553920"
  },
  {
    "text": "and sign in",
    "start": "553920",
    "end": "556700"
  },
  {
    "text": "there we go we've successfully signed in",
    "start": "557820",
    "end": "560040"
  },
  {
    "text": "with the magic link",
    "start": "560040",
    "end": "562980"
  },
  {
    "text": "now what you see here is of course a",
    "start": "562980",
    "end": "564959"
  },
  {
    "text": "sample web application and if you would",
    "start": "564959",
    "end": "567240"
  },
  {
    "text": "use this solution this would be where",
    "start": "567240",
    "end": "569580"
  },
  {
    "text": "you would see your web app instead",
    "start": "569580",
    "end": "572040"
  },
  {
    "text": "what you see here at the top right is",
    "start": "572040",
    "end": "574320"
  },
  {
    "text": "our prefab react component that makes it",
    "start": "574320",
    "end": "576899"
  },
  {
    "text": "easy for users to add 502 credentials so",
    "start": "576899",
    "end": "579839"
  },
  {
    "text": "they can set up face ID or touch ID to",
    "start": "579839",
    "end": "582420"
  },
  {
    "text": "sign in with",
    "start": "582420",
    "end": "584220"
  },
  {
    "text": "let me do that right now I'm on a",
    "start": "584220",
    "end": "586440"
  },
  {
    "text": "MacBook a Macbook support Touch ID so",
    "start": "586440",
    "end": "588720"
  },
  {
    "text": "let's set that up",
    "start": "588720",
    "end": "591560"
  },
  {
    "text": "this is where I touch my MacBook on the",
    "start": "593040",
    "end": "595440"
  },
  {
    "text": "touch ID spot",
    "start": "595440",
    "end": "598019"
  },
  {
    "text": "I need to provide a name so let's type",
    "start": "598019",
    "end": "600420"
  },
  {
    "text": "MacBook",
    "start": "600420",
    "end": "602700"
  },
  {
    "text": "that's it and 502 Touch ID has now been",
    "start": "602700",
    "end": "605820"
  },
  {
    "text": "activated",
    "start": "605820",
    "end": "607019"
  },
  {
    "text": "let's see it in action I'll sign out",
    "start": "607019",
    "end": "611100"
  },
  {
    "text": "you'll notice the sign in page looks a",
    "start": "611100",
    "end": "613260"
  },
  {
    "text": "little different now because our prefab",
    "start": "613260",
    "end": "614880"
  },
  {
    "text": "react component remembers the last user",
    "start": "614880",
    "end": "617459"
  },
  {
    "text": "and offers now to sign in with face or",
    "start": "617459",
    "end": "620339"
  },
  {
    "text": "touch so let's do let's do that",
    "start": "620339",
    "end": "623640"
  },
  {
    "text": "touching my MacBook again",
    "start": "623640",
    "end": "627140"
  },
  {
    "text": "and I'm in",
    "start": "627240",
    "end": "630019"
  },
  {
    "text": "I'll conclude this demo with quickly",
    "start": "630060",
    "end": "632580"
  },
  {
    "text": "showing the authenticator manager which",
    "start": "632580",
    "end": "634980"
  },
  {
    "text": "is another prefab react component that",
    "start": "634980",
    "end": "638160"
  },
  {
    "text": "is part of the solution that shows all",
    "start": "638160",
    "end": "639959"
  },
  {
    "text": "the registered Fighter 2 credentials for",
    "start": "639959",
    "end": "641880"
  },
  {
    "text": "the user at hand and can be used by the",
    "start": "641880",
    "end": "644519"
  },
  {
    "text": "user to register other Fighter 2",
    "start": "644519",
    "end": "646860"
  },
  {
    "text": "credentials so they can sign in with",
    "start": "646860",
    "end": "649200"
  },
  {
    "text": "those as well",
    "start": "649200",
    "end": "651240"
  },
  {
    "start": "650000",
    "end": "701000"
  },
  {
    "text": "that concludes this video we have seen",
    "start": "651240",
    "end": "654180"
  },
  {
    "text": "how you can add passwordless",
    "start": "654180",
    "end": "655440"
  },
  {
    "text": "authentication to your applications with",
    "start": "655440",
    "end": "657420"
  },
  {
    "text": "Amazon Cognito in the open source",
    "start": "657420",
    "end": "659279"
  },
  {
    "text": "passwordless solution I've demonstrated",
    "start": "659279",
    "end": "661800"
  },
  {
    "text": "502 sign in using Touch ID on my MacBook",
    "start": "661800",
    "end": "664680"
  },
  {
    "text": "but that would work very similar without",
    "start": "664680",
    "end": "667560"
  },
  {
    "text": "needing any changes to the code with",
    "start": "667560",
    "end": "669720"
  },
  {
    "text": "Windows hello UB key and on your Android",
    "start": "669720",
    "end": "672720"
  },
  {
    "text": "or iOS mobile phone",
    "start": "672720",
    "end": "675000"
  },
  {
    "text": "many modern devices support 502 I've",
    "start": "675000",
    "end": "678540"
  },
  {
    "text": "also demonstrated magic links to you but",
    "start": "678540",
    "end": "681240"
  },
  {
    "text": "you should favor 502 if you can as it is",
    "start": "681240",
    "end": "683880"
  },
  {
    "text": "fishing resistant",
    "start": "683880",
    "end": "685800"
  },
  {
    "text": "use the open source passwordless",
    "start": "685800",
    "end": "687839"
  },
  {
    "text": "solution as inspiration for your own",
    "start": "687839",
    "end": "689579"
  },
  {
    "text": "sign-in implementations with Amazon",
    "start": "689579",
    "end": "691260"
  },
  {
    "text": "cognito",
    "start": "691260",
    "end": "692640"
  },
  {
    "text": "and have fun building",
    "start": "692640",
    "end": "695839"
  }
]