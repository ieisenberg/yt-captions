[
  {
    "text": " ",
    "start": "952",
    "end": "2400"
  },
  {
    "text": "Welcome to Back to Basics!\nMy name is Mai Nishitani, a Solutions Architect from AWS.",
    "start": "6399",
    "end": "10980"
  },
  {
    "text": "In this session you'll learn all about best \npractice architecture patterns for observability  ",
    "start": "11760",
    "end": "16740"
  },
  {
    "text": "with Amazon Elastic Kubernetes Service or \nAmazon EKS which is a container orchestrator. ",
    "start": "16740",
    "end": "21960"
  },
  {
    "text": "So why do we need observability for Kubernetes in \ngeneral?\nThat's to detect, investigate, and remediate  ",
    "start": "22860",
    "end": "29160"
  },
  {
    "text": "issues for your systems and your customers that \nuse your application on EKS. ",
    "start": "29160",
    "end": "35460"
  },
  {
    "text": "But can't you just use the standard monitoring tools that you've used \nwith your virtual machines?   ",
    "start": "35460",
    "end": "41699"
  },
  {
    "text": "Not so fast, they might not be the right tool for the right job. Especially \nfor distributed architectures like Kubernetes.  ",
    "start": "41700",
    "end": "46320"
  },
  {
    "text": "With microservices architectures there are \nmultiple pods being created and going away within  ",
    "start": "47280",
    "end": "52260"
  },
  {
    "text": "minutes. Now due to this ephemeral nature of Kubernetes \nthe usual monitoring tools that we're used to with  ",
    "start": "52260",
    "end": "59519"
  },
  {
    "text": "virtual machines that have predefined logs and \nmetrics aren't adequate enough in troubleshooting  problems.",
    "start": "60180",
    "end": "66300"
  },
  {
    "text": "Now why do we need to troubleshoot \nproblems? That's because your end users won't  ",
    "start": "66300",
    "end": "72480"
  },
  {
    "text": "be happy if your service isn't up. You might even have service level agreements or SLAs in place to  ",
    "start": "72480",
    "end": "79680"
  },
  {
    "text": "ensure that your applications are operational \nunder certain conditions. Let's say you're a  ",
    "start": "79680",
    "end": "84840"
  },
  {
    "text": "platform engineer at a pet food company \nthat runs a web app on a Kubernetes cluster. ",
    "start": "84840",
    "end": "89100"
  },
  {
    "text": "The web application is experiencing performance \nissues and your customers are complaining about it.  ",
    "start": "89640",
    "end": "95460"
  },
  {
    "text": "To troubleshoot the issue you'll need to use \nend-to-end observability techniques and tools  ",
    "start": "95460",
    "end": "100260"
  },
  {
    "text": "from your front end all the way to the back end. This includes logging, metrics, and tracing.  ",
    "start": "100260",
    "end": "105420"
  },
  {
    "text": "First, you'll need to gather metrics and logs \nfrom all the components on the application  ",
    "start": "106140",
    "end": "110700"
  },
  {
    "text": "including dependencies, the Kubernetes \nnodes, and the cluster itself. You can use  ",
    "start": "110700",
    "end": "115860"
  },
  {
    "text": "a tool like AWS Distro for Open Telemetry to \ncentralize and process the logs and metrics.  ",
    "start": "115860",
    "end": "121080"
  },
  {
    "text": "You can use a tool like Amazon Managed Services \nfor Prometheus to collect the metrics and ",
    "start": "121680",
    "end": "126780"
  },
  {
    "text": "Amazon Managed Services for Grafana or Amazon CloudWatch \nto visualize the metrics. Finally you'll need to  ",
    "start": "126780",
    "end": "133260"
  },
  {
    "text": "use tracing to understand how the requests are \nflowing through to the system and identify any  ",
    "start": "133260",
    "end": "138599"
  },
  {
    "text": "performance bottlenecks. You could use a tool like \nAWS X-Ray to visualize the trace data. ",
    "start": "138600",
    "end": "145140"
  },
  {
    "text": "Using these observability techniques you'll be able to gain an \nunderstanding of the state of your system and then  ",
    "start": "145140",
    "end": "150840"
  },
  {
    "text": "you'll be able to identify the root cause of your \nperformance issues. Once you've identified the  ",
    "start": "150840",
    "end": "156120"
  },
  {
    "text": "root cause, you'll be able to work on a solution from there. \nIn this case we found out quickly  ",
    "start": "156120",
    "end": "162000"
  },
  {
    "text": "that the bottleneck was around your Storefront \nand Datastore apps with the AWS X-Ray trace.  ",
    "start": "162000",
    "end": "166860"
  },
  {
    "text": "See how you can see the average response latency \nfor each segment.. which allows you to dive deeper  ",
    "start": "167580",
    "end": "173520"
  },
  {
    "text": "into these apps with CloudWatch metrics and \nlogs for some root cause analysis. ",
    "start": "173520",
    "end": "178560"
  },
  {
    "text": "Let's check out the architecture pattern.\nAWS Distro for Open Telemetry is a tool that allows you to monitor  ",
    "start": "178560",
    "end": "183900"
  },
  {
    "text": "your application's performance by collecting \nand analyzing telemetry data such as traces, ",
    "start": "183900",
    "end": "189239"
  },
  {
    "text": "metrics, and logs. It works by using receivers to \ncollect the data, processors to perform tasks such  ",
    "start": "189240",
    "end": "196200"
  },
  {
    "text": "as filtering and transforming the data. \nExporters send the data into multiple destinations such  ",
    "start": "196200",
    "end": "201840"
  },
  {
    "text": "as AWS X-Ray or Amazon Managed Services for \nPrometheus and Amazon CloudWatch. ",
    "start": "201840",
    "end": "208680"
  },
  {
    "text": "So how does that benefit your microservices applications? \nYou will have full control of your observability data  ",
    "start": "208680",
    "end": "213659"
  },
  {
    "text": "for your microservice on EKS with the flexibility \nto send data to multiple destinations in parallel.  ",
    "start": "213660",
    "end": "219960"
  },
  {
    "text": "The best practice to implement this pattern is \nwith Amazon EKS Blueprints. With EKS Blueprints, you  ",
    "start": "220620",
    "end": "227700"
  },
  {
    "text": "can use it with AWS CDK and Terraform to create consistent environments in configure your EKS",
    "start": "227700",
    "end": "233879"
  },
  {
    "text": "cluster with observability tools across multiple \nAWS accounts and Regions using infrastructure  ",
    "start": "233880",
    "end": "239820"
  },
  {
    "text": "as code and automation. Have a look at the resources below to get started with implementing  ",
    "start": "239820",
    "end": "244920"
  },
  {
    "text": "observability tools for Amazon EKS so you can \nmeet your SLAs and keep your end users happy!",
    "start": "244920",
    "end": "250860"
  },
  {
    "text": "Thank you for watching. Keep on modernizing on containers, see you next time !",
    "start": "251940",
    "end": "262387"
  }
]