[
  {
    "start": "0",
    "end": "79000"
  },
  {
    "text": "[Music]",
    "start": "650",
    "end": "8550"
  },
  {
    "text": "[Applause] [Music]",
    "start": "8550",
    "end": "14850"
  },
  {
    "text": "so I'm really excited to talk with you all and interact with you all this is a",
    "start": "15170",
    "end": "21480"
  },
  {
    "text": "talk specifically about lambda I sometimes whose word serverless",
    "start": "21480",
    "end": "26760"
  },
  {
    "text": "interchangeably with lambda so forgive me there but let's do a quick survey of the room just so I know what we're",
    "start": "26760",
    "end": "33390"
  },
  {
    "text": "dealing with here so how many people have used lambda before cool so a lot of",
    "start": "33390",
    "end": "39540"
  },
  {
    "text": "people how many people have used lambda for applications in production okay cool",
    "start": "39540",
    "end": "47070"
  },
  {
    "text": "so pretty solid showing but let's get started so my name is Luke I work at a",
    "start": "47070",
    "end": "54210"
  },
  {
    "text": "company called Quinn base we make it easy to buy and so cryptocurrency among",
    "start": "54210",
    "end": "60930"
  },
  {
    "text": "various other things fun fact about me is that I'm having a kid in about a",
    "start": "60930",
    "end": "66960"
  },
  {
    "text": "month but yes I'm terrified coinbase how",
    "start": "66960",
    "end": "80189"
  },
  {
    "start": "79000",
    "end": "455000"
  },
  {
    "text": "many people here have a Quinn base account Wow in a clap we wouldn't have",
    "start": "80189",
    "end": "87659"
  },
  {
    "text": "gotten a clap a year ago but yes I work",
    "start": "87659",
    "end": "93090"
  },
  {
    "text": "for Quinn base and this is a picture of what the website looks like you can see",
    "start": "93090",
    "end": "98250"
  },
  {
    "text": "some of different currencies we support and generally what the app looks like we kind of show you what you're buying and",
    "start": "98250",
    "end": "104880"
  },
  {
    "text": "you know our goal is to make it as easy as possible to buy and get exposure to crypto assets and really we aim to be",
    "start": "104880",
    "end": "112020"
  },
  {
    "text": "the easiest and most trusted place to buy and sell cryptocurrency not only of",
    "start": "112020",
    "end": "117060"
  },
  {
    "text": "slides to talk about this but the general gist of it is that if you roll",
    "start": "117060",
    "end": "122159"
  },
  {
    "text": "back the clock to 2017 when base was a little bit of a mess and when I say mess",
    "start": "122159",
    "end": "129660"
  },
  {
    "text": "I mean we were a I should just put the size in but we",
    "start": "129660",
    "end": "135270"
  },
  {
    "text": "basically went down a lot does anybody and anybody tried to use coinbase and had trouble before yeah okay great so we",
    "start": "135270",
    "end": "143040"
  },
  {
    "text": "didn't have we don't always have the greatest reputation for reliability and that's for a bunch of reasons we have",
    "start": "143040",
    "end": "149489"
  },
  {
    "text": "really bursty traffic we use MongoDB but",
    "start": "149489",
    "end": "154650"
  },
  {
    "text": "primarily we're a financial company who needs to do very highly consistent things we need to do those highly",
    "start": "154650",
    "end": "160349"
  },
  {
    "text": "consistent things in a really bursty manner and that leads to a lot of the challenges we have technically so I'll",
    "start": "160349",
    "end": "167489"
  },
  {
    "text": "try to tie that in throughout the presentation but let's get started let's",
    "start": "167489",
    "end": "172799"
  },
  {
    "text": "talk about the good old days this is me as 400 who has seen an answer 100 before",
    "start": "172799",
    "end": "178580"
  },
  {
    "text": "this is what I slightly cut my teeth on there were one of these at the first place I worked and it wasn't fun but you",
    "start": "178580",
    "end": "186569"
  },
  {
    "text": "know on the left is a relatively modern server rack and on the path to what we call server list today is started with a",
    "start": "186569",
    "end": "194880"
  },
  {
    "text": "server and servers were great especially if you are someone who had the",
    "start": "194880",
    "end": "199890"
  },
  {
    "text": "opportunity to be in a data center when you get to rack and stack things there's a lot of fun I thought but servers are",
    "start": "199890",
    "end": "207720"
  },
  {
    "text": "kind of brutal if you want to add capacity what do you have to do you have to go actually add a server this made a",
    "start": "207720",
    "end": "213989"
  },
  {
    "text": "lot of sense maybe if you were a massive company but for smaller companies it may you had to think about what happens if I",
    "start": "213989",
    "end": "219840"
  },
  {
    "text": "buy a server or so on and there was no concept of theoretically being able to do something like blue/green deploy I",
    "start": "219840",
    "end": "225239"
  },
  {
    "text": "mean I guess theoretically of course there is but you know a lot of these modern DevOps practices around pets versus cattle they didn't really exist",
    "start": "225239",
    "end": "233280"
  },
  {
    "text": "back then but in a more recent world virtualization came on the scene this",
    "start": "233280",
    "end": "238650"
  },
  {
    "text": "idea that you could run multiple actual lessons on a single host and this is kind of your VMware Zork APM's there's",
    "start": "238650",
    "end": "246660"
  },
  {
    "text": "ends and these kind of slightly were the next step on the path to a theoretical",
    "start": "246660",
    "end": "252989"
  },
  {
    "text": "server list world and in this world things were better right you could rack up a server you",
    "start": "252989",
    "end": "258000"
  },
  {
    "text": "could put up you could share without you can share hosts you could do things like",
    "start": "258000",
    "end": "263760"
  },
  {
    "text": "Imaging a little bit more easily but really not too much change for this",
    "start": "263760",
    "end": "269280"
  },
  {
    "text": "important step but in 2006 Amazon came onto the scene in 2006 a lot changed I",
    "start": "269280",
    "end": "275580"
  },
  {
    "text": "think because rather even with virtualization you still had to go rack so they go sack so I did talk to the",
    "start": "275580",
    "end": "281640"
  },
  {
    "text": "networking guys and figure out how they could everything set up but in 2006 Amazon says do you want a",
    "start": "281640",
    "end": "288630"
  },
  {
    "text": "server will give you a server that was a really big deal but today we have these",
    "start": "288630",
    "end": "294870"
  },
  {
    "text": "concepts of server lists now I know the first thing going through about a tenth",
    "start": "294870",
    "end": "300810"
  },
  {
    "text": "of yours mines is there are servers why do you call it serverless how many",
    "start": "300810",
    "end": "308550"
  },
  {
    "text": "people identify with this yes and you're absolutely right there are servers there",
    "start": "308550",
    "end": "316260"
  },
  {
    "text": "there will always be servers just of this is that I think what we're trying to draw here will we say serverless is",
    "start": "316260",
    "end": "323370"
  },
  {
    "text": "you no longer need to be concerned with what a server is what an operating",
    "start": "323370",
    "end": "329910"
  },
  {
    "text": "system is you no longer need to be concerned with patching your OS you",
    "start": "329910",
    "end": "335070"
  },
  {
    "text": "never you no longer need to be concerned with Oh interesting I wonder how many processes I can run on this before",
    "start": "335070",
    "end": "342420"
  },
  {
    "text": "things start to explode the point is though today I have three major things I hear that I think kind of exemplify",
    "start": "342420",
    "end": "348420"
  },
  {
    "text": "service in my mind the top one is far gate I'm not going to talk about that today lambda which we're here to talk about today and dynamodb which I",
    "start": "348420",
    "end": "354420"
  },
  {
    "text": "consider to be like the modern server list database right and the premise of",
    "start": "354420",
    "end": "360060"
  },
  {
    "text": "service the real premise in my mind of what serverless offers us is the ability to build an application pick a good",
    "start": "360060",
    "end": "367830"
  },
  {
    "text": "partition key in the case of dynamodb and theoretically scale an application forever without ever having to worry",
    "start": "367830",
    "end": "374070"
  },
  {
    "text": "about how many servers there are or you know any of the other concerns which",
    "start": "374070",
    "end": "379410"
  },
  {
    "text": "will give it into in a second cool so just I forgot to say this I really like",
    "start": "379410",
    "end": "385530"
  },
  {
    "text": "when people ask the questions I'm here so if you have questions or comments pop shots random things drop em on I'll try",
    "start": "385530",
    "end": "393840"
  },
  {
    "text": "to look every once in a while it helps me get a feel for the room but let's get going",
    "start": "393840",
    "end": "399990"
  },
  {
    "text": "so in this people prefer the concept of server fool so server fool is this",
    "start": "399990",
    "end": "405790"
  },
  {
    "text": "concept that server list came about and the people who don't run easily two",
    "start": "405790",
    "end": "411490"
  },
  {
    "text": "instances are like well what do we call what we do and we're like your server full because it's not certainly but the",
    "start": "411490",
    "end": "418750"
  },
  {
    "text": "change from going from server full and running a server having an app on there that for many of us is intuitive right",
    "start": "418750",
    "end": "427510"
  },
  {
    "text": "the same exact pattern all the way from the original server all the way to docker right you're still Linux process",
    "start": "427510",
    "end": "434470"
  },
  {
    "text": "doing something stays around for a while but moving to server list is a learning",
    "start": "434470",
    "end": "440350"
  },
  {
    "text": "curve there are just straight-up differences between the way we do those things so this talk is kind of addressed at partially how do we think about",
    "start": "440350",
    "end": "448000"
  },
  {
    "text": "similar patterns that we would work with in a server full world in a server list",
    "start": "448000",
    "end": "453730"
  },
  {
    "text": "world yeah so one of the major things in my mind that helps make server less easy",
    "start": "453730",
    "end": "460570"
  },
  {
    "start": "455000",
    "end": "673000"
  },
  {
    "text": "is AWS Sam has anybody used AWS Sam before great great so AWS Sam is a",
    "start": "460570",
    "end": "470530"
  },
  {
    "text": "really easy way to define a server list function and associated resources in a",
    "start": "470530",
    "end": "477250"
  },
  {
    "text": "yamo file the mo files of the future we all know this at this point but this",
    "start": "477250",
    "end": "483760"
  },
  {
    "text": "right here is a lambda function defined in AWS Sam template so it's similar to cloud formation actually has full",
    "start": "483760",
    "end": "489850"
  },
  {
    "text": "compatibility with cloud formation and Sam gives you a lot of benefits and that's the little mascot squirrel Sam",
    "start": "489850",
    "end": "496210"
  },
  {
    "text": "lets you bootstrap a lambda application you just run Sam and knit and you immediately get you see on the Left",
    "start": "496210",
    "end": "503320"
  },
  {
    "text": "there's like a tree you can see it gives you a make file to execute your function it gives you a boilerplate for your",
    "start": "503320",
    "end": "510190"
  },
  {
    "text": "actual lambda function and the template diamo which is what I showed you back",
    "start": "510190",
    "end": "515530"
  },
  {
    "text": "here where you have this code here that defines your actual function I'm gonna be pointing to Sam Sam is what I",
    "start": "515530",
    "end": "522310"
  },
  {
    "text": "recommend there multiple frameworks that make it easy to use lambda and serverless",
    "start": "522310",
    "end": "529140"
  },
  {
    "text": "there's a framework confusingly enough called serverless same buddy used surveillance",
    "start": "529250",
    "end": "534550"
  },
  {
    "text": "yes sir list is pretty cool it's not made by Amazon though the number one",
    "start": "534550",
    "end": "540800"
  },
  {
    "text": "thing that Sam does really well is AWS built into sand the ability to do really",
    "start": "540800",
    "end": "546379"
  },
  {
    "text": "easy local development Sam is not just templating out what your function looks",
    "start": "546379",
    "end": "553670"
  },
  {
    "text": "like what sqs queues like they're how API gate work hey you've got a gateway works and so on Sam is the ability to",
    "start": "553670",
    "end": "560329"
  },
  {
    "text": "run a lambda function on your laptop if you've tried to do lambda development up in actually easy WS it can be a little",
    "start": "560329",
    "end": "568040"
  },
  {
    "text": "bit confusing cloud9 is pretty cool you can modify your functions but it's really nice to do things on your laptop and that's one",
    "start": "568040",
    "end": "573560"
  },
  {
    "text": "of the major things that Sam provides you it's a deployment framework as well you can just run Sam deploy which is",
    "start": "573560",
    "end": "579259"
  },
  {
    "text": "kind of cloud formation deploy and you can deploy a lambda function or you can deploy any cloud formation resources you",
    "start": "579259",
    "end": "585379"
  },
  {
    "text": "put alongside Sam is way cool actually found all these stupid versions of the",
    "start": "585379",
    "end": "592459"
  },
  {
    "text": "Sam logo these are just little diesel",
    "start": "592459",
    "end": "597740"
  },
  {
    "text": "squirrels I guess and then I found this one here on the Left which is Uncle Sam and I was like man there's so many",
    "start": "597740",
    "end": "605000"
  },
  {
    "text": "creative people in the world what if I took my energy and I made my own fan",
    "start": "605000",
    "end": "610430"
  },
  {
    "text": "version of AWS Sam so AWS Sam uses docker and the way it",
    "start": "610430",
    "end": "616279"
  },
  {
    "text": "uses docker is when you're actually invoking a lambda on your laptop the way that you do that is it actually launches",
    "start": "616279",
    "end": "623839"
  },
  {
    "text": "a dr. container that emulates what a lambda is write a lambda is just a Linux a title of Linux micro VM I guess and so",
    "start": "623839",
    "end": "632600"
  },
  {
    "text": "Sam and dr. Isaac what if there was so I spent two hours today on this and I present to you this quail",
    "start": "632600",
    "end": "642840"
  },
  {
    "text": "it's pretty impressive I'm not a graphic designer I yeah it's as well but I don't like the name squill so I am counting on",
    "start": "642840",
    "end": "653040"
  },
  {
    "text": "all of you to think what is better than squill for this guy so whoever comes with the best idea for scale on slide oh",
    "start": "653040",
    "end": "659910"
  },
  {
    "text": "I got a prize package of like a whole bunch of coin based t-shirts so be",
    "start": "659910",
    "end": "670170"
  },
  {
    "text": "thinking about the squeal well let's get into our first pattern that's what we're here for after all right so let's say",
    "start": "670170",
    "end": "677910"
  },
  {
    "start": "673000",
    "end": "810000"
  },
  {
    "text": "theoretically we have a lonely lambda function right what is the lambda",
    "start": "677910",
    "end": "683370"
  },
  {
    "text": "function same oh I take a guess a Miguel out what is a lambda like when's the plate function certainly is a function",
    "start": "683370",
    "end": "694500"
  },
  {
    "text": "so that's that's how their soul right the way that you would define a straight",
    "start": "694500",
    "end": "699780"
  },
  {
    "text": "lambda function in AWS is similar to this on the right here this is how you do it in a tab is Sam which is a pretty",
    "start": "699780",
    "end": "706080"
  },
  {
    "text": "good framework right and all it's basically saying if we're running through like what's actually on there use this file here called mean in that",
    "start": "706080",
    "end": "715470"
  },
  {
    "text": "file called main call the handler function inside of there the runtime",
    "start": "715470",
    "end": "722070"
  },
  {
    "text": "Ruby 2.5 roll I am roll right that you want this function to be run by and like",
    "start": "722070",
    "end": "729390"
  },
  {
    "text": "a timeout and then there are several several several other options that you can choose for that lambda but this",
    "start": "729390",
    "end": "735750"
  },
  {
    "text": "alone here will deploy my crappy little function to AWS and with this we have a",
    "start": "735750",
    "end": "744450"
  },
  {
    "text": "crap program and right here you can see that all it does is check to see if one",
    "start": "744450",
    "end": "749790"
  },
  {
    "text": "of the keys pretty simple lambda function right and that's the starting point right lambda at the beginning is",
    "start": "749790",
    "end": "756720"
  },
  {
    "text": "really just executing whatever code you put in the function and that makes sense right so we can just from anywhere in",
    "start": "756720",
    "end": "762690"
  },
  {
    "text": "AWS now invoke that function why is that useful well first of all you've built",
    "start": "762690",
    "end": "768600"
  },
  {
    "text": "your own custom API inside of AWS you can use im2 Gate that function so on and",
    "start": "768600",
    "end": "774300"
  },
  {
    "text": "I see you see down here I have like you would test that locally that's pretty cool being able to invoke a",
    "start": "774300",
    "end": "780279"
  },
  {
    "text": "lambda function is pretty cool and we have this code here right that it uh and",
    "start": "780279",
    "end": "785579"
  },
  {
    "text": "straight up if you're thinking about this you can totally do anything I'm talking about here on a server whether",
    "start": "785579",
    "end": "792459"
  },
  {
    "text": "we have a dull 2950 on the Left we have an m5 large AWS we can execute all this",
    "start": "792459",
    "end": "799149"
  },
  {
    "text": "stupid code whatever code we put up there oh somebody somebody asked me",
    "start": "799149",
    "end": "804879"
  },
  {
    "text": "about cold starts and V pcs will get there but I want to be really clear this",
    "start": "804879",
    "end": "812980"
  },
  {
    "start": "810000",
    "end": "930000"
  },
  {
    "text": "crappy little function I just talked about right there there's some big benefits to using",
    "start": "812980",
    "end": "818079"
  },
  {
    "text": "lambda for starters we don't have racks and data centers yeah obviously we",
    "start": "818079",
    "end": "824680"
  },
  {
    "text": "haven't had those in a while but we lose entire concepts we start to talk about lambda we entirely remove this concept",
    "start": "824680",
    "end": "833649"
  },
  {
    "text": "of redundancy but redundancy mean like high availability an ec2 world how many easy two instances do you need",
    "start": "833649",
    "end": "840100"
  },
  {
    "text": "for a high availability application you need to write because if one breaks you",
    "start": "840100",
    "end": "846339"
  },
  {
    "text": "know how do you keep up lambda that concept is just completely eliminated if",
    "start": "846339",
    "end": "852220"
  },
  {
    "text": "you're running a web server you no longer need AWS abstracts away these concepts of puma or nginx or",
    "start": "852220",
    "end": "858430"
  },
  {
    "text": "Apache there's no more concept of what OS you're running you don't know longer",
    "start": "858430",
    "end": "863740"
  },
  {
    "text": "need to figure out how to on your operating system you know patch what's",
    "start": "863740",
    "end": "869230"
  },
  {
    "text": "going on you never need to figure out what version of the OS are running Amazon just picks one for you and you",
    "start": "869230",
    "end": "874300"
  },
  {
    "text": "use it you're happy there's no more concepts of networking DPC's I mean",
    "start": "874300",
    "end": "879429"
  },
  {
    "text": "there can be of course but a lot of this complexity is removed we made that",
    "start": "879429",
    "end": "884709"
  },
  {
    "text": "simple template we got it running in AWS and we didn't have to do anything else you didn't have to do anything else",
    "start": "884709",
    "end": "890290"
  },
  {
    "text": "nativist yeah finally kind of running through this there's no scaling challenges no auto scan does anybody",
    "start": "890290",
    "end": "898120"
  },
  {
    "text": "tried using AWS Otto's going for ec2 and found it to be a delightful experience",
    "start": "898120",
    "end": "904589"
  },
  {
    "text": "lambda scales automatically lambda doesn't try to figure out what your CPU utilization is and scale your ec2",
    "start": "905570",
    "end": "911850"
  },
  {
    "text": "instances lambda says oh you have a new request I'm gonna launch a new land before you finally know you'll be these",
    "start": "911850",
    "end": "919110"
  },
  {
    "text": "new ouch eggs and so on lambda removes complexity so we have our lonely lambda",
    "start": "919110",
    "end": "925110"
  },
  {
    "text": "let's move on to another pattern that was kind of a cop-out pattern a lambda without anything but how what is lambda",
    "start": "925110",
    "end": "933180"
  },
  {
    "start": "930000",
    "end": "1190000"
  },
  {
    "text": "right it's a function but what what what do functions get they get an input right",
    "start": "933180",
    "end": "938210"
  },
  {
    "text": "so what what input can we send to lambda function so let's talk about the most",
    "start": "938210",
    "end": "943500"
  },
  {
    "text": "simple input possible this is a cloud watch event and this is a cron like",
    "start": "943500",
    "end": "949380"
  },
  {
    "text": "schedule for a lambda this is the easiest way to search a leverage lambda in ec2 instances of kuan ec2 instance",
    "start": "949380",
    "end": "956930"
  },
  {
    "text": "maybe runs a job let's say every hour with cloud watch you can invoke a lambda",
    "start": "956930",
    "end": "964440"
  },
  {
    "text": "once every hour let's say once every minute and that lambda will only cost you the period when it's actually",
    "start": "964440",
    "end": "970350"
  },
  {
    "text": "running that one minute so that's a really simple pattern but what's actually happening under the hood here",
    "start": "970350",
    "end": "976190"
  },
  {
    "text": "so just quickly showing you what it looks like in Sam you just we take that same lambda and you'd say oh put a",
    "start": "976190",
    "end": "981660"
  },
  {
    "text": "5-minute schedule on it right pretty cool pretty easy what's actually happening right I showed you what that",
    "start": "981660",
    "end": "987540"
  },
  {
    "text": "code looked like and every five minutes we're calling that code what's actually happening under the hood here what type",
    "start": "987540",
    "end": "994350"
  },
  {
    "text": "of magic is happening under AWS is hood right is it does it have all these big",
    "start": "994350",
    "end": "999480"
  },
  {
    "text": "machines or just executing arbitrary code on them no that wouldn't be very secure so what are they actually doing",
    "start": "999480",
    "end": "1005890"
  },
  {
    "text": "well they're launching your code they're launching your code in a micro VM a",
    "start": "1005890",
    "end": "1011060"
  },
  {
    "text": "little tiny Linux virtual machine in that little tiny Linux virtual machine",
    "start": "1011060",
    "end": "1016070"
  },
  {
    "text": "we'll stick around Amazon leaves them up for about 45 minutes and you can see now every time",
    "start": "1016070",
    "end": "1021290"
  },
  {
    "text": "we're calling this function let's say for every minute every five minutes that same Linux virtual machine is still",
    "start": "1021290",
    "end": "1028189"
  },
  {
    "text": "sticking around right and this is a concept I'm you know I really want to drive home a lambda function is not just",
    "start": "1028190",
    "end": "1035270"
  },
  {
    "text": "some very ephemeral function that's run and then disappears that same",
    "start": "1035270",
    "end": "1040548"
  },
  {
    "text": "function that same vert micro VM stays around and let's say every we had that",
    "start": "1040549",
    "end": "1048889"
  },
  {
    "text": "same micro VM in that same micro VM where it was around for three different implications and then we launch a new",
    "start": "1048889",
    "end": "1055759"
  },
  {
    "text": "one for those first three invitations the state of that function is kept",
    "start": "1055759",
    "end": "1061490"
  },
  {
    "text": "around this is a really important point when you're working with lambda is that lambda win these functions stick around",
    "start": "1061490",
    "end": "1067460"
  },
  {
    "text": "and for up to 45 minutes and you can imagine in 45 minutes how many possible requests could possibly occur thousands",
    "start": "1067460",
    "end": "1074240"
  },
  {
    "text": "right in that period of time you can keep things you can keep cash you can",
    "start": "1074240",
    "end": "1081320"
  },
  {
    "text": "keep you can set conflict mainly cash but you can open database connections you can keep them open all the lambda is",
    "start": "1081320",
    "end": "1088370"
  },
  {
    "text": "to drive this home is a simple little VM that is paused between invitations",
    "start": "1088370",
    "end": "1095500"
  },
  {
    "text": "eventually though that VM is torn down and eventually you get a new one so",
    "start": "1095500",
    "end": "1100759"
  },
  {
    "text": "that's why I have a little yellow code right and you lose all the state you build up so lambda is really powerful in",
    "start": "1100759",
    "end": "1107179"
  },
  {
    "text": "the way that it is able to cache what you put into it and it is able to store things between indications but you can't",
    "start": "1107179",
    "end": "1114320"
  },
  {
    "text": "count on what's being stored in between indications being available so does",
    "start": "1114320",
    "end": "1121639"
  },
  {
    "text": "anybody noticed the other thing I put in this slide is the time it takes for that lambda to invoke does anybody here had",
    "start": "1121639",
    "end": "1128750"
  },
  {
    "text": "fun with lambda cold stars before so when we launched let's see if this plays",
    "start": "1128750",
    "end": "1135409"
  },
  {
    "text": "in fireworks oh yeah when we launch a new one of these micro beams that's not",
    "start": "1135409",
    "end": "1142580"
  },
  {
    "text": "instantaneous amazon has to go they have to go to s3 they have to pull down all their code and what other other stuff",
    "start": "1142580",
    "end": "1149179"
  },
  {
    "text": "you jammed in there and they have to launch it on whatever hypervisor they're running this on and that could take 400",
    "start": "1149179",
    "end": "1154610"
  },
  {
    "text": "milliseconds the next one no doesn't have to do that and that's why Amazon",
    "start": "1154610",
    "end": "1160639"
  },
  {
    "text": "keeps you since ROM that's why they let you have this state not just because you",
    "start": "1160639",
    "end": "1166100"
  },
  {
    "text": "can keep cache which is nice but also so that they don't have to continue to pay this penalty I could imagine a future world where",
    "start": "1166100",
    "end": "1172520"
  },
  {
    "text": "they literally launch a new one of these little code or like one of these little micro games for every single request but",
    "start": "1172520",
    "end": "1178970"
  },
  {
    "text": "think about how inefficient that would be to constantly be fetching that package drive this home it's no",
    "start": "1178970",
    "end": "1187130"
  },
  {
    "text": "different than a docker container right it's just a tiny little virtual machine so HTTP we've talked about the fact that",
    "start": "1187130",
    "end": "1193970"
  },
  {
    "start": "1190000",
    "end": "1233000"
  },
  {
    "text": "maybe you have this lambda maybe this code that does something right and the way that this code does something is",
    "start": "1193970",
    "end": "1200270"
  },
  {
    "text": "right now we're just invoking a lambda or we're doing it on schedule but let's say we want to do something that I love you do which is run a web server how",
    "start": "1200270",
    "end": "1209330"
  },
  {
    "text": "many people pretty much run web servers and that's pretty much it even oh yeah",
    "start": "1209330",
    "end": "1217870"
  },
  {
    "text": "everything's just a web server in my mind and does anybody know how AWS",
    "start": "1217870",
    "end": "1223610"
  },
  {
    "text": "handles the web server component of a service application API gateway great so",
    "start": "1223610",
    "end": "1233300"
  },
  {
    "start": "1233000",
    "end": "1346000"
  },
  {
    "text": "what does API gateway do API gateway is pretty much exactly that it is an HTTP",
    "start": "1233300",
    "end": "1239690"
  },
  {
    "text": "gateway to other services in AWS well with lambda lambda all it does is take",
    "start": "1239690",
    "end": "1245330"
  },
  {
    "text": "events right and a lambda event is really nothing more than just blob the",
    "start": "1245330",
    "end": "1252440"
  },
  {
    "text": "string right mostly usually JSON and we need to be able to get these lambda events",
    "start": "1252440",
    "end": "1257660"
  },
  {
    "text": "something resembling an HTTP request and we need to let them respond with something resembling an HTTP response so",
    "start": "1257660",
    "end": "1266510"
  },
  {
    "text": "that's what API gateway does API gateway is that layer between your lambda and the outside world it can do",
    "start": "1266510",
    "end": "1273050"
  },
  {
    "text": "authentication it can do transformations ahead of your lambda but really all it's",
    "start": "1273050",
    "end": "1279140"
  },
  {
    "text": "doing is bridging the outside world to your function so you can see here I have",
    "start": "1279140",
    "end": "1285110"
  },
  {
    "text": "a theoretical API gateway you can set up all different types of routes in an API gateway to pass it to different lambda",
    "start": "1285110",
    "end": "1291890"
  },
  {
    "text": "functions to different little functions or series of code and what API gateway",
    "start": "1291890",
    "end": "1298760"
  },
  {
    "text": "does is is it effectively passes through what looks like an HTTP request to your",
    "start": "1298760",
    "end": "1305020"
  },
  {
    "text": "lambda function so this example here shows that we're passing through a path let's say V 1 loop pass and you get all",
    "start": "1305020",
    "end": "1315130"
  },
  {
    "text": "the same things you would a normal HTTP request right you get the HTTP header",
    "start": "1315130",
    "end": "1320520"
  },
  {
    "text": "headers you get the HB method you get query string parameters and you get a",
    "start": "1320520",
    "end": "1326050"
  },
  {
    "text": "body and with a lambda function all you do is you get that HTTP request and you",
    "start": "1326050",
    "end": "1333820"
  },
  {
    "text": "send it back out with basically an HTTP response a status code headers and a",
    "start": "1333820",
    "end": "1339760"
  },
  {
    "text": "body no no making you a sandwich that's basically how API gateway works with",
    "start": "1339760",
    "end": "1345070"
  },
  {
    "text": "HTTP but you may be wondering at this point how does concurrency work in this",
    "start": "1345070",
    "end": "1350710"
  },
  {
    "start": "1346000",
    "end": "1483000"
  },
  {
    "text": "world let's say we have an HTTP service we want to be able to handle a theoretical massive burst in traffic",
    "start": "1350710",
    "end": "1357670"
  },
  {
    "text": "let's say we just launched a new libre currency people will follow up to Paris if people know Libre",
    "start": "1357670",
    "end": "1363630"
  },
  {
    "text": "yeah Libre let's say we launched Libre tomorrow definitely not saying that that's happening well let's say we",
    "start": "1363630",
    "end": "1369160"
  },
  {
    "text": "launched Libre tomorrow we get a lot of traffic to this site right how does lambda actually handle all of this",
    "start": "1369160",
    "end": "1375190"
  },
  {
    "text": "concurrency so it actually is pretty simple so up here I don't know if this",
    "start": "1375190",
    "end": "1382870"
  },
  {
    "text": "makes sense number one here is the first request to come through after this first",
    "start": "1382870",
    "end": "1388690"
  },
  {
    "text": "request comes through and our code is working what happens when the second request comes through we have to launch into one of these little containers",
    "start": "1388690",
    "end": "1394390"
  },
  {
    "text": "right we have to pay a little bit of a cold star penalty a boom now we can",
    "start": "1394390",
    "end": "1399550"
  },
  {
    "text": "start processing that second request third request comes through we still don't have any availability we still",
    "start": "1399550",
    "end": "1406059"
  },
  {
    "text": "can't use one of our original two containers that we launched or micro VMs",
    "start": "1406059",
    "end": "1411700"
  },
  {
    "text": "to serve that request so we still have to lunch another one and so until the fourth but what happens with the fifth",
    "start": "1411700",
    "end": "1420360"
  },
  {
    "text": "well assuming the fifth comes in after concurrency number one finishes we can",
    "start": "1420360",
    "end": "1427090"
  },
  {
    "text": "just start to reuse existing lambda functions the gist of concurrency here is that AWS will continue to launch",
    "start": "1427090",
    "end": "1435940"
  },
  {
    "text": "these functions for you and reuse them as frequently as possible and it will do this damn near forever so you can see",
    "start": "1435940",
    "end": "1442360"
  },
  {
    "text": "here this is like a theoretical code and the amount of times the ADA base is",
    "start": "1442360",
    "end": "1447610"
  },
  {
    "text": "launching these little things right aw man I did this signs an order",
    "start": "1447610",
    "end": "1453450"
  },
  {
    "text": "AWS will continue to launch these little functions",
    "start": "1453450",
    "end": "1459060"
  },
  {
    "text": "forever actually that's not really true how many people have run into the concurrency limits",
    "start": "1459060",
    "end": "1466260"
  },
  {
    "text": "anybody so let you go as far as you want proven that you can do it and you will",
    "start": "1467190",
    "end": "1472510"
  },
  {
    "text": "continue to pay them money there is nothing to stop an AWS from launching",
    "start": "1472510",
    "end": "1477550"
  },
  {
    "text": "new servers they handle as many invitations as you want what Amazon",
    "start": "1477550",
    "end": "1483400"
  },
  {
    "start": "1483000",
    "end": "1585000"
  },
  {
    "text": "tries to do though is they try to prevent you from shooting yourself in the foot because what happens with an",
    "start": "1483400",
    "end": "1491980"
  },
  {
    "text": "application that scales truly truly fluidly and forever what's the downstream effect of that",
    "start": "1491980",
    "end": "1498940"
  },
  {
    "text": "well first if you use a regular old DB that has connections you're gonna wipe",
    "start": "1498940",
    "end": "1504400"
  },
  {
    "text": "that thing out you're gonna run out of connections let's say you have downstream customers and you just are",
    "start": "1504400",
    "end": "1510730"
  },
  {
    "text": "wiping them out basically if you are accidentally using all this capacity",
    "start": "1510730",
    "end": "1516429"
  },
  {
    "text": "Amazon is trying to protect you from that the last the easiest thing in the",
    "start": "1516429",
    "end": "1521440"
  },
  {
    "text": "world to do with a tag is lambda is the DDoS yourself or DDoS someone else",
    "start": "1521440",
    "end": "1527410"
  },
  {
    "text": "because it's possible what happens if you go recurse you start recursively blasting off ten new functions ten new",
    "start": "1527410",
    "end": "1534040"
  },
  {
    "text": "functions ten new functions ten new functions how does it go stop there so that's why there's this concept of",
    "start": "1534040",
    "end": "1539710"
  },
  {
    "text": "concurrency for lambda function when you choose concurrency for a lambda function",
    "start": "1539710",
    "end": "1545530"
  },
  {
    "text": "you actually reserve that many concurrent functions so kind of slipping back to this one Amazon lets you reserve",
    "start": "1545530",
    "end": "1553000"
  },
  {
    "text": "how many of these you want and it guarantees they'll be there for you because a really common thing is that in",
    "start": "1553000",
    "end": "1559300"
  },
  {
    "text": "the same AWS account you'll have like let's say you have five different applications and one of them uses all of",
    "start": "1559300",
    "end": "1565630"
  },
  {
    "text": "your AWS account wide currency you want to be able to reserve those for yourself you can use that the",
    "start": "1565630",
    "end": "1571540"
  },
  {
    "text": "other way though and you can use as a limit so the concurrency is set for a function is the limit to the amount so",
    "start": "1571540",
    "end": "1576820"
  },
  {
    "text": "if we set our concurrency to four that means we'll only ever out be allowed to have four of these micro-p ends running",
    "start": "1576820",
    "end": "1584310"
  },
  {
    "text": "so concurrency is super important HTTP is super important let's move on to the next pattern so next pattern I want to",
    "start": "1584910",
    "end": "1591850"
  },
  {
    "start": "1585000",
    "end": "1635000"
  },
  {
    "text": "talk about is the async pattern this is a really big pattern it's the real sweet",
    "start": "1591850",
    "end": "1597550"
  },
  {
    "text": "spot for lambda so API gateway is break",
    "start": "1597550",
    "end": "1603850"
  },
  {
    "text": "for lambda but what happens with a cold start your customer gets a slower",
    "start": "1603850",
    "end": "1611740"
  },
  {
    "text": "request hot path lambdas will always result especially for lower frequency",
    "start": "1611740",
    "end": "1618070"
  },
  {
    "text": "applications in slower in higher percentile latency so I'll get into that",
    "start": "1618070",
    "end": "1625900"
  },
  {
    "text": "in a second but async is really the sweet spot for a Douglas lambda to save an API gateway and you're making a",
    "start": "1625900",
    "end": "1631300"
  },
  {
    "text": "request down to a function and do you want something else to happen later AWS",
    "start": "1631300",
    "end": "1640390"
  },
  {
    "start": "1635000",
    "end": "1851000"
  },
  {
    "text": "has a lot of options for you here so the best thing about the async pattern in",
    "start": "1640390",
    "end": "1645880"
  },
  {
    "text": "AWS is that so theoretically a lambda function can write to any one of these",
    "start": "1645880",
    "end": "1651880"
  },
  {
    "text": "for services I guess maybe a question for the room is how familiar are people with these four services people use",
    "start": "1651880",
    "end": "1659290"
  },
  {
    "text": "these services really high level all of these services let you put something",
    "start": "1659290",
    "end": "1665590"
  },
  {
    "text": "into him and then all of these services let you also take something back out of",
    "start": "1665590",
    "end": "1672670"
  },
  {
    "text": "them event-driven so sqs is a queue put things in you can",
    "start": "1672670",
    "end": "1677860"
  },
  {
    "text": "get zoom back off with the lambda can use the streams it's also queue take something out with AWS lambda DynamoDB",
    "start": "1677860",
    "end": "1685000"
  },
  {
    "text": "is a database but it has this concept of dynamodb streams or such you every time",
    "start": "1685000",
    "end": "1690220"
  },
  {
    "text": "something's modifying a dynamodb table push out to a lambda function the same with s3 i put an object in s3 you",
    "start": "1690220",
    "end": "1698500"
  },
  {
    "text": "trigger lambda on any object create so ASIC is a really powerful pattern with",
    "start": "1698500",
    "end": "1704080"
  },
  {
    "text": "AWS and if you think about like something like Kinesis data stream so Kinesis data streams is really cool it's",
    "start": "1704080",
    "end": "1710560"
  },
  {
    "text": "different than SQS specifically because you can have ordering within a partition so if you choose the partition key you",
    "start": "1710560",
    "end": "1716440"
  },
  {
    "text": "can have ordering within that partition but what's even cooler about Kinesis data streams is you can replay events so",
    "start": "1716440",
    "end": "1724360"
  },
  {
    "text": "I recommend looking into king stations for certain use cases you should probably use sqs but that's beside the",
    "start": "1724360",
    "end": "1729880"
  },
  {
    "text": "point but the way that lambda works with these async type of jobs is that Kinesis",
    "start": "1729880",
    "end": "1738910"
  },
  {
    "text": "is charted right you can have up to like whatever I guess as many shards as they're double so that you have and for",
    "start": "1738910",
    "end": "1745780"
  },
  {
    "text": "each of these shards you basically get a single lambda function to consume events",
    "start": "1745780",
    "end": "1751900"
  },
  {
    "text": "from those charts so I'm gonna try to break this down a little bit more and show you why this is really powerful so",
    "start": "1751900",
    "end": "1757690"
  },
  {
    "text": "let's say you have a Kinesis data stream with four partitions you're putting data in constantly and you're in a server",
    "start": "1757690",
    "end": "1764800"
  },
  {
    "text": "full world in a server full world are easy to world you have to launch either",
    "start": "1764800",
    "end": "1772330"
  },
  {
    "text": "a single easy to instance per shard where you need to have a single ec2 instance handle each one of these shards",
    "start": "1772330",
    "end": "1778450"
  },
  {
    "text": "so if you want to add more shards you either have to add more ec2 instances where you need to figure out how to have",
    "start": "1778450",
    "end": "1784450"
  },
  {
    "text": "the same ec2 instance continue to partition off these shards if you grow",
    "start": "1784450",
    "end": "1789790"
  },
  {
    "text": "the total number of cases stream partitions to let's say a thousand you",
    "start": "1789790",
    "end": "1795070"
  },
  {
    "text": "have to figure out how to have like four or five ec2 instances let's say consume off of all of these partitions lambda",
    "start": "1795070",
    "end": "1801070"
  },
  {
    "text": "just launches a single lambda function for each partition you have in Kinesis",
    "start": "1801070",
    "end": "1806410"
  },
  {
    "text": "the reason this is so powerful is that can you lambda effectively is able to",
    "start": "1806410",
    "end": "1812620"
  },
  {
    "text": "dynamically scale for no matter how much you're pumping into Kinesis data streams",
    "start": "1812620",
    "end": "1818620"
  },
  {
    "text": "and it does that in a way that is completely transparent to you you don't need to worry about how services are",
    "start": "1818620",
    "end": "1826480"
  },
  {
    "text": "consuming events from Kinesis data streams so lambdas really awesome for a say another maybe good example of this is",
    "start": "1826480",
    "end": "1833010"
  },
  {
    "text": "like let's say you have a bucket called cats and you put cat objects in and you",
    "start": "1833010",
    "end": "1839730"
  },
  {
    "text": "want to convert them and I called the other bucket cool cats maybe we're converting the cat to look that's just",
    "start": "1839730",
    "end": "1845690"
  },
  {
    "text": "cool transformation it's cooler not and",
    "start": "1845690",
    "end": "1851419"
  },
  {
    "start": "1851000",
    "end": "1984000"
  },
  {
    "text": "this could be useful for a million different things let's say you're trying to do image resizing right customer uploads a an image puts it in the CV",
    "start": "1851419",
    "end": "1858570"
  },
  {
    "text": "cat's bucket you want to immediately get a scaled image you want to get black-and-white image you want to get a",
    "start": "1858570",
    "end": "1866450"
  },
  {
    "text": "tiny little icon for like a profile picture or so on this is a really cool",
    "start": "1866450",
    "end": "1872370"
  },
  {
    "text": "pattern because as the image gets put in s3 immediately a lambda function will be there it doesn't matter how many are",
    "start": "1872370",
    "end": "1877500"
  },
  {
    "text": "putting in s3 it's completely completely extracted away and you can immediately",
    "start": "1877500",
    "end": "1882720"
  },
  {
    "text": "you can be piling pictures in and you can have lambda functions pushing out into new buckets and so on forever",
    "start": "1882720",
    "end": "1890390"
  },
  {
    "text": "there's this concept I feel about async test and there's this anxiety what if",
    "start": "1890390",
    "end": "1896940"
  },
  {
    "text": "lambda drops an event on the floor what happens if you get an error with lambda",
    "start": "1896940",
    "end": "1902450"
  },
  {
    "text": "what happens if you have a whole bunch of events come through and at that point in time some back-end service is broken",
    "start": "1902450",
    "end": "1910640"
  },
  {
    "text": "say yes three is down again what do you do there's a lambda function looking to",
    "start": "1910640",
    "end": "1916500"
  },
  {
    "text": "lambda function do well this is kind of a theme of lambda in AWS they don't make",
    "start": "1916500",
    "end": "1921720"
  },
  {
    "text": "you worry about this they don't make you worry about this in the context of your function they don't say oh if something",
    "start": "1921720",
    "end": "1927660"
  },
  {
    "text": "is broken now your function needs to worry about the logic for how to go put this object somewhere to be consumed",
    "start": "1927660",
    "end": "1933030"
  },
  {
    "text": "later am digit AWS just says well if you throw an error in the lambda function",
    "start": "1933030",
    "end": "1939380"
  },
  {
    "text": "we're gonna retry it and AWS promises this dole retry and a sick event up to",
    "start": "1939380",
    "end": "1946169"
  },
  {
    "text": "three times spaced out a little bit but what happens when they finally fail for",
    "start": "1946169",
    "end": "1951240"
  },
  {
    "text": "the last time well you can just put it in an SQL you and I kind of had this funny idea",
    "start": "1951240",
    "end": "1957740"
  },
  {
    "text": "it'd be funny if you just recursively just loaded it back in because you could listen that function to its own sq sq",
    "start": "1957740",
    "end": "1966650"
  },
  {
    "text": "and just keep going back around until it work but that's probably stupid but",
    "start": "1966650",
    "end": "1972500"
  },
  {
    "text": "there is definitely a lot of power here to being able to send when you have",
    "start": "1972500",
    "end": "1980630"
  },
  {
    "text": "failed events put them in a queue for processing later cool so let's talk",
    "start": "1980630",
    "end": "1985910"
  },
  {
    "start": "1984000",
    "end": "2008000"
  },
  {
    "text": "about a little mini met meta pattern here so the API gateway let's say it's calling your ADA baseline two functions",
    "start": "1985910",
    "end": "1992390"
  },
  {
    "text": "and then you want to create a user and then after you've created a user you put",
    "start": "1992390",
    "end": "1997460"
  },
  {
    "text": "it in dynamo DB you want to do some fun acing stuff afterward you want to go",
    "start": "1997460",
    "end": "2002830"
  },
  {
    "text": "create users accounts you want to go do other fun stuff pretty cool but what if",
    "start": "2002830",
    "end": "2009520"
  },
  {
    "text": "you want to do two different async things this is pretty frustrating a lot of AWS services looking at you",
    "start": "2009520",
    "end": "2017650"
  },
  {
    "text": "cloud trail specifically only let you listen with a single lambda function to",
    "start": "2017650",
    "end": "2023880"
  },
  {
    "text": "an event stream so how do you deal with something like this well you really like",
    "start": "2023880",
    "end": "2030280"
  },
  {
    "text": "to be able to just fan out now you'd like to be able to have a single event go into SNS and then go to a whole bunch",
    "start": "2030280",
    "end": "2036940"
  },
  {
    "text": "of different lambda functions or maybe even not just lambda functions maybe ask us accused maybe you'd like to go to a",
    "start": "2036940",
    "end": "2043000"
  },
  {
    "text": "server full service maybe you'd like to go have it go all over well that's where",
    "start": "2043000",
    "end": "2048340"
  },
  {
    "text": "SS comes in S&S is a really powerful tool that lets",
    "start": "2048340",
    "end": "2053889"
  },
  {
    "text": "you put an event in and have it send to multiple different places so it's push",
    "start": "2053890",
    "end": "2060250"
  },
  {
    "text": "notifications right this is a really powerful pattern for when you're trying to send a single event to many different",
    "start": "2060250",
    "end": "2068139"
  },
  {
    "text": "plates this can be many different lambdas or so on but at this point I've",
    "start": "2068140",
    "end": "2074290"
  },
  {
    "start": "2071000",
    "end": "2219000"
  },
  {
    "text": "been paying attention you may be wondering okay we're talking about a lot of lambdas here we're really starting to",
    "start": "2074290",
    "end": "2080260"
  },
  {
    "text": "find a lambda for every use case and that's basically what happens but how much does all this cost so if you pull",
    "start": "2080260",
    "end": "2086740"
  },
  {
    "text": "up AWS this actual price Paige what they basically show you here is that for a 128 megabytes you pay",
    "start": "2086740",
    "end": "2095858"
  },
  {
    "text": "there are a lot of zeros there but basically nothing for a single invocation all of you who got in this",
    "start": "2095859",
    "end": "2102229"
  },
  {
    "text": "room have a nativist account you all have a free tier you can execute a single lambda 128 megabytes and 3",
    "start": "2102229",
    "end": "2109099"
  },
  {
    "text": "million times for nothing oh sorry dude right clear cold-start is not considered",
    "start": "2109099",
    "end": "2115069"
  },
  {
    "text": "I know that's just like it's under the hood cost to AWS eats you don't pay for",
    "start": "2115069",
    "end": "2120440"
  },
  {
    "text": "that booting up of the instance only once it's booted up the actual cost as it runs but if we were to try to break",
    "start": "2120440",
    "end": "2127099"
  },
  {
    "text": "it down right Amazon is using probably the same infrastructure they're using",
    "start": "2127099",
    "end": "2132859"
  },
  {
    "text": "for ec2 to run these lambda functions so let's take that really crazy number",
    "start": "2132859",
    "end": "2138979"
  },
  {
    "text": "there for how much it costs to run 100 millisecond lambda function Lovelight by 10 get a second and so on we get the",
    "start": "2138979",
    "end": "2145309"
  },
  {
    "text": "hourly rate which is about six second six cents an hour for a one gigabyte",
    "start": "2145309",
    "end": "2150859"
  },
  {
    "text": "lambda function if you used it continuously non-stop it needs to two",
    "start": "2150859",
    "end": "2157819"
  },
  {
    "text": "instance i tried to make the prices about even a 4 gigabyte ec2 instance",
    "start": "2157819",
    "end": "2163160"
  },
  {
    "text": "would cost about 8 cents right so there's some serious markup here but I",
    "start": "2163160",
    "end": "2170749"
  },
  {
    "text": "don't think that's always a fair comparison if you were to try to break it down let's say Quinn base rpm was at",
    "start": "2170749",
    "end": "2178180"
  },
  {
    "text": "theoretically 250,000 requests per minute at a point in time and it's way",
    "start": "2178180",
    "end": "2183799"
  },
  {
    "text": "over provisioned right now right why are we way over provisioned as queen bees",
    "start": "2183799",
    "end": "2190749"
  },
  {
    "text": "burst burst how long does it take to launch an ec2 instance it's not it's not",
    "start": "2192519",
    "end": "2198140"
  },
  {
    "text": "too fast so we have to be way over provisioned all the time for a theoretical burst so let's say we are",
    "start": "2198140",
    "end": "2204499"
  },
  {
    "text": "theoretically over-provision we got a bunch of these big 18 Excel servers running I think they're 41 there and",
    "start": "2204499",
    "end": "2211930"
  },
  {
    "text": "that costs about 79 bucks an hour that's pretty expensive",
    "start": "2211930",
    "end": "2217930"
  },
  {
    "text": "now what's running on those servers what's running are a bunch of Puma",
    "start": "2217930",
    "end": "2223460"
  },
  {
    "start": "2219000",
    "end": "2376000"
  },
  {
    "text": "workers so Puma is like a web server or Ruby each one of those has about eight",
    "start": "2223460",
    "end": "2229970"
  },
  {
    "text": "hundred twenty five megabytes that's using and our p90 response time I was",
    "start": "2229970",
    "end": "2236030"
  },
  {
    "text": "really I'm really rounding up here it's probably more like 120 milliseconds but let's give it the real benefit of the doubt is around 200 milliseconds so if I",
    "start": "2236030",
    "end": "2245150"
  },
  {
    "text": "go on that lambda pricing page I can see that for an 832 megabyte lambda function",
    "start": "2245150",
    "end": "2252160"
  },
  {
    "text": "it costs I mean still I don't even know how many zeros there are but if you do the math that would mean that if we were",
    "start": "2252160",
    "end": "2257960"
  },
  {
    "text": "serving all those requests in an hour all those 15 million requests per hour",
    "start": "2257960",
    "end": "2263120"
  },
  {
    "text": "at that price it would be $40 $40 an",
    "start": "2263120",
    "end": "2268550"
  },
  {
    "text": "hour versus what would be $79 dollars right now obviously this is a trap as",
    "start": "2268550",
    "end": "2274850"
  },
  {
    "text": "it's been pointed out because API gateway does cost a lot of money and bandwidth and so on I didn't actually",
    "start": "2274850",
    "end": "2280790"
  },
  {
    "text": "run the specific numbers on API gateway but it's it's probably still gonna come",
    "start": "2280790",
    "end": "2285980"
  },
  {
    "text": "out underneath the cost of this API gateway to primarily charges based on",
    "start": "2285980",
    "end": "2291200"
  },
  {
    "text": "bandwidth and request the point I'm trying to make here is that lambda in a",
    "start": "2291200",
    "end": "2296420"
  },
  {
    "text": "continuous workload of a compared to a server that is perfectly utilized is",
    "start": "2296420",
    "end": "2303020"
  },
  {
    "text": "going to be more expensive but in a situation where you're always over",
    "start": "2303020",
    "end": "2309410"
  },
  {
    "text": "provisioned most ec2 instances most and",
    "start": "2309410",
    "end": "2314870"
  },
  {
    "text": "this is in a company theoretically that is doing a good job are probably around 30 to 40 percent CPU utilize lambda",
    "start": "2314870",
    "end": "2323720"
  },
  {
    "text": "functions are a hundred percent utilized all the time",
    "start": "2323720",
    "end": "2329150"
  },
  {
    "text": "by definition so there's a whole conversation here about how cost works",
    "start": "2329150",
    "end": "2334220"
  },
  {
    "text": "with lambda and I guess the major takeaway is that it depends on usage but I think there's a conception that lambda",
    "start": "2334220",
    "end": "2340340"
  },
  {
    "text": "is always more expensive but I don't think that's actually true I mean AWS knows that you are not using 100",
    "start": "2340340",
    "end": "2347020"
  },
  {
    "text": "the CPU and for most services that are not perfectly maximizing their ec2",
    "start": "2347020",
    "end": "2353080"
  },
  {
    "text": "instances which they aren't lambda super in my opinion especially so let's think",
    "start": "2353080",
    "end": "2358360"
  },
  {
    "text": "about we take we remove API gateway from the picture though we're just doing a sync like you have like a really big",
    "start": "2358360",
    "end": "2363520"
  },
  {
    "text": "queue that you're trying to work through like a data processing queue you're just trying to process a bunch of jobs land is gonna be cheaper I think I mean it's",
    "start": "2363520",
    "end": "2370450"
  },
  {
    "text": "just it doesn't even factor in those bandwidth costs compared to ec2 so API",
    "start": "2370450",
    "end": "2377320"
  },
  {
    "start": "2376000",
    "end": "2444000"
  },
  {
    "text": "gateway authorizes so this is another fun pattern as an api gateway is a",
    "start": "2377320",
    "end": "2383200"
  },
  {
    "text": "really magical tool that can be hard to use maybe but yeah you learn to love it and api gateway is an interface for the",
    "start": "2383200",
    "end": "2391869"
  },
  {
    "text": "rest of your infrastructure a public interface for the rest of your infrastructure so api gateway is able to",
    "start": "2391869",
    "end": "2397780"
  },
  {
    "text": "interface down to multiple other services in maybe with almost any AWS service as a matter of fact and what's",
    "start": "2397780",
    "end": "2404170"
  },
  {
    "text": "really cool about api gateway is that you can use what's called a lambda authorizer and here's kind of a well we",
    "start": "2404170",
    "end": "2409630"
  },
  {
    "text": "didn't like that anyway but the api gateway can call out to a lambda with like let's say an authorization header",
    "start": "2409630",
    "end": "2415990"
  },
  {
    "text": "and say hey is this person allowed to continue and this is a really powerful",
    "start": "2415990",
    "end": "2422080"
  },
  {
    "text": "pattern because theoretically you can put an api gateway out front of a service you can have a user directly",
    "start": "2422080",
    "end": "2429490"
  },
  {
    "text": "request to the API gateway pass their authorization through that lambda and go directly to a service completely",
    "start": "2429490",
    "end": "2435220"
  },
  {
    "text": "bypassing application servers and so on yeah really powerful pattern but we kind",
    "start": "2435220",
    "end": "2442540"
  },
  {
    "text": "of talk like a pig anyway anyway what I want to talk a little bit about how we're using this internally at coinbase",
    "start": "2442540",
    "end": "2447820"
  },
  {
    "start": "2444000",
    "end": "2582000"
  },
  {
    "text": "we have this tool called fan where internally and Fenrir is how we a very",
    "start": "2447820",
    "end": "2456359"
  },
  {
    "text": "security-conscious company allow developers to go from one of those Sam",
    "start": "2456359",
    "end": "2464050"
  },
  {
    "text": "templates to production without any",
    "start": "2464050",
    "end": "2469619"
  },
  {
    "text": "approvals at all so coinbase we were really big into approvals we have this",
    "start": "2469619",
    "end": "2474790"
  },
  {
    "text": "whole concept of consensus in order to do anything you need consensus you need to make sure you have multiple other people sign-off",
    "start": "2474790",
    "end": "2480550"
  },
  {
    "text": "but at coinbase because of the way we were able to sandbox lambda and because",
    "start": "2480550",
    "end": "2485980"
  },
  {
    "text": "of the way that we're able to and I have slides in appendix but as if people want",
    "start": "2485980",
    "end": "2492250"
  },
  {
    "text": "to go through the details we're able to take that code that I've been showing you and we're able to lock it down in a",
    "start": "2492250",
    "end": "2499540"
  },
  {
    "text": "very special way that we can let developers deploy entire applications with DynamoDB sqs is so on without",
    "start": "2499540",
    "end": "2505960"
  },
  {
    "text": "having to worry about approvals or creating resources or anything of this sort so this is one of the cool things we're",
    "start": "2505960",
    "end": "2512470"
  },
  {
    "text": "doing internally with them and this has allowed us to really have a lot of pickup for lambda internally because as",
    "start": "2512470",
    "end": "2517840"
  },
  {
    "text": "companies get bigger anybody asked but assume most of your Sparkle how many people here in a company with more than",
    "start": "2517840",
    "end": "2523420"
  },
  {
    "text": "50 engineers okay that's what I thought sweet okay so as you get to a bigger as",
    "start": "2523420",
    "end": "2531610"
  },
  {
    "text": "you get to bigger and bigger size companies it gets harder and harder and harder to do new things there inevitably",
    "start": "2531610",
    "end": "2538900"
  },
  {
    "text": "are more important things that are happening right there there are security concerns you have entire infrastructure",
    "start": "2538900",
    "end": "2545350"
  },
  {
    "text": "teams it's bring up and seemingly exist to just make things difficult sometimes the way we're using lambda here and the",
    "start": "2545350",
    "end": "2551920"
  },
  {
    "text": "reason we're excited about lambda Quinn basis we feel it offers developers the ability to quickly launch applications",
    "start": "2551920",
    "end": "2558700"
  },
  {
    "text": "and the reason of this Cookie Monster here is because we use the tool called",
    "start": "2558700",
    "end": "2563770"
  },
  {
    "text": "cookie cutters to do this has anybody heard of cookie cutters before it's like a Python library yeah good girders are cool were able to provision an app like",
    "start": "2563770",
    "end": "2570250"
  },
  {
    "text": "an entire scaffolded application with a cookie cutter and have it deployed for a developer in under five minutes",
    "start": "2570250",
    "end": "2575610"
  },
  {
    "text": "that doesn't include writing the code but that takes longer than five minutes",
    "start": "2575610",
    "end": "2580630"
  },
  {
    "text": "I hope so WebSockets so as I said I'm",
    "start": "2580630",
    "end": "2586000"
  },
  {
    "text": "have a kid and that kids gonna probably even though I don't want them to have",
    "start": "2586000",
    "end": "2591610"
  },
  {
    "text": "access to a phone at a very young age because if I'm not gonna lie it seems",
    "start": "2591610",
    "end": "2597940"
  },
  {
    "text": "like a really good way to distract a child but phones and apps love WebSockets",
    "start": "2597940",
    "end": "2606750"
  },
  {
    "start": "2602000",
    "end": "2688000"
  },
  {
    "text": "because the WebSockets provide are an awesome push interface a bi-directional interface and API gateway does this",
    "start": "2606750",
    "end": "2613440"
  },
  {
    "text": "really well in the way they do this with lambda is actually pretty clever so API gateway actually is able to",
    "start": "2613440",
    "end": "2619530"
  },
  {
    "text": "provide you these lambdas are a feminine right there kind of coming and going and what API gateway is able to do is its",
    "start": "2619530",
    "end": "2626640"
  },
  {
    "text": "able to provide you this interface where it can keep a persistent connection open",
    "start": "2626640",
    "end": "2631760"
  },
  {
    "text": "a non connection invoke a lambda that then you store a connection ID or a",
    "start": "2631760",
    "end": "2638490"
  },
  {
    "text": "session ID and DynamoDB that you can then reference to send events to a user",
    "start": "2638490",
    "end": "2644990"
  },
  {
    "text": "when the user disconnects you have another Lander function that goes and cleans up that reference in dynamodb",
    "start": "2644990",
    "end": "2650400"
  },
  {
    "text": "table but the point here is that there's a really powerful cool interface here that allows you to maintain a persistent",
    "start": "2650400",
    "end": "2656310"
  },
  {
    "text": "connection with an ephemeral service I think that's pretty cool but you may be",
    "start": "2656310",
    "end": "2661829"
  },
  {
    "text": "wondering there's got to be a catch and this is like almost all the questions here there's always a catch it's not",
    "start": "2661829",
    "end": "2668280"
  },
  {
    "text": "price I don't think price is the catch catches cold starts we've kind of talked",
    "start": "2668280",
    "end": "2676829"
  },
  {
    "text": "about him a little bit already but what happens when you redeploy a lambda",
    "start": "2676829",
    "end": "2681869"
  },
  {
    "text": "function with new code everything passed",
    "start": "2681869",
    "end": "2689730"
  },
  {
    "start": "2688000",
    "end": "2811000"
  },
  {
    "text": "the cold stuff not just the lambda functions that guard garbage-collected not the ones for new capacity they all",
    "start": "2689730",
    "end": "2697560"
  },
  {
    "text": "need to cold start that's a really bad experience for a user if every request for a whole period of time needs to",
    "start": "2697560",
    "end": "2705089"
  },
  {
    "text": "closer and obviously that's only like maybe 400 500 milliseconds but depending",
    "start": "2705089",
    "end": "2710310"
  },
  {
    "text": "on your application that could take you over the edge to where it's a bad user experience right",
    "start": "2710310",
    "end": "2715760"
  },
  {
    "text": "the other interesting thing here is if you if you have if you're maintaining database connections in these lambdas",
    "start": "2715760",
    "end": "2722069"
  },
  {
    "text": "that means you have to go out and create theoretically 500 or whatever new",
    "start": "2722069",
    "end": "2727710"
  },
  {
    "text": "database connections to your database boom right that can be really expensive of run into issues with something aw",
    "start": "2727710",
    "end": "2734940"
  },
  {
    "text": "she does a really good job with your is this concept of linear to place so if you're experimenting with lambda and you",
    "start": "2734940",
    "end": "2740640"
  },
  {
    "text": "run into this issue this is something we've had a lot of success with success with internally what they'll do is",
    "start": "2740640",
    "end": "2746520"
  },
  {
    "text": "they'll actually with Sam and just a simple line or two they'll basically rather than deploy everything at one",
    "start": "2746520",
    "end": "2754230"
  },
  {
    "text": "time like your build deploy 10% anytime wait five minutes or one minute or",
    "start": "2754230",
    "end": "2760859"
  },
  {
    "text": "whatever you want to customize it then we'll do the next ten percent and so on until they've migrated everything to the new version this way you're only having",
    "start": "2760859",
    "end": "2768000"
  },
  {
    "text": "as many cold start times that are active you know as few cool certs as possible at the same time",
    "start": "2768000",
    "end": "2773369"
  },
  {
    "text": "the other cool thing they do are canary to place so if you're deploying an ec2 instance usually you have this concept",
    "start": "2773369",
    "end": "2779730"
  },
  {
    "text": "of a health check right if you're doing a blue ring deploying you have a load balancer new instances won't come up",
    "start": "2779730",
    "end": "2784800"
  },
  {
    "text": "behind the load balance or without passing a health check if you deploy lambda functions but it's uploading a zip to AWS you lose out on that",
    "start": "2784800",
    "end": "2792540"
  },
  {
    "text": "capability what if you upload a bad package a bad version of code so canary",
    "start": "2792540",
    "end": "2799710"
  },
  {
    "text": "to place upload 10% of your code they watch the error rate of that version of",
    "start": "2799710",
    "end": "2804810"
  },
  {
    "text": "your lambda function wait for it to actually be successful and then to play the balance really cool feature but the",
    "start": "2804810",
    "end": "2812640"
  },
  {
    "start": "2811000",
    "end": "2964000"
  },
  {
    "text": "big one here are V PC cold starts and this is what people want to know about so all the fun things live in a V PC",
    "start": "2812640",
    "end": "2821329"
  },
  {
    "text": "everything fun you want to talk to postgrads you want to talk to any a load balancer you want to talk to Redis or",
    "start": "2821329",
    "end": "2829230"
  },
  {
    "text": "god forbid MongoDB they all live in a V PC as a matter of fact there's a whole",
    "start": "2829230",
    "end": "2836099"
  },
  {
    "text": "argument to be made here that AWS has done a lot of really good work and has",
    "start": "2836099",
    "end": "2842069"
  },
  {
    "text": "had to work really hard to get around this limitation they have features now like the data API for Postgres and added",
    "start": "2842069",
    "end": "2850829"
  },
  {
    "text": "just set wait nobody's staying in trouble they they've had the data API for my sequel Aurora right and their",
    "start": "2850829",
    "end": "2858300"
  },
  {
    "text": "ways to get around these limitations but really does anybody know how long a VPC",
    "start": "2858300",
    "end": "2863550"
  },
  {
    "text": "cold start can take no a number ten seconds and that's why I have the",
    "start": "2863550",
    "end": "2870210"
  },
  {
    "text": "same polling out here because Usain Bolt can run a hundred meters faster than a cold start think about",
    "start": "2870210",
    "end": "2876869"
  },
  {
    "text": "that we're talking about computers ten seconds slower than Usain Bolt this",
    "start": "2876869",
    "end": "2883410"
  },
  {
    "text": "will get fixed one day but this is a major issue there are some workarounds here the classic workaround if you are",
    "start": "2883410",
    "end": "2890520"
  },
  {
    "text": "not doing it is running so basically a cold start actually the 10 second what a",
    "start": "2890520",
    "end": "2896180"
  },
  {
    "text": "BBC cold start does anybody know it's actually hack why sets though so the reason of UPC cold",
    "start": "2896180",
    "end": "2902579"
  },
  {
    "text": "start is actually that so is it needs to launch a new Eni so ice to launch a new network interface in your V PC and then",
    "start": "2902579",
    "end": "2911160"
  },
  {
    "text": "connect it to your lambda that V PC cool start actually doesn't happen if you",
    "start": "2911160",
    "end": "2916470"
  },
  {
    "text": "already have en eyes in place and the easiest way to keep Ian eyes in place is to just run your lambda on a",
    "start": "2916470",
    "end": "2922349"
  },
  {
    "text": "schedule and keep those a nice warm the reason you pay that BBC cold start penalty is if you're Ian's eyes get torn",
    "start": "2922349",
    "end": "2928500"
  },
  {
    "text": "down if you're not using a lambda the more you use your lambda function the",
    "start": "2928500",
    "end": "2933660"
  },
  {
    "text": "more en eyes Ukraine the less of these V PC cold starts you experience this is something that I think is very scary but",
    "start": "2933660",
    "end": "2940230"
  },
  {
    "text": "in practice the more we use lambda the fewer V PC cold starts we deal with and",
    "start": "2940230",
    "end": "2946079"
  },
  {
    "text": "the less of an impact this actually has now that being said a V PC cold start is",
    "start": "2946079",
    "end": "2951750"
  },
  {
    "text": "a really really nice forcing function to avoid all these little toys down here and use dynamodb instead which I highly",
    "start": "2951750",
    "end": "2960030"
  },
  {
    "text": "recommend for another time so I say my",
    "start": "2960030",
    "end": "2966329"
  },
  {
    "start": "2964000",
    "end": "2990000"
  },
  {
    "text": "to use step functions yes step functions are a cool little state machine we use them very heavily at",
    "start": "2966329",
    "end": "2973680"
  },
  {
    "text": "coinbase for deploying applications and other fun things the way step functions work is effectively you run a function",
    "start": "2973680",
    "end": "2981030"
  },
  {
    "text": "depending on the output you run a different function of different inputs and so on and the state machine these little graphs they can do really cool",
    "start": "2981030",
    "end": "2987599"
  },
  {
    "text": "things with lambda but another fun thing is logs metrics and so on monitoring a",
    "start": "2987599",
    "end": "2995220"
  },
  {
    "text": "lambda function so your two options for monitoring or",
    "start": "2995220",
    "end": "3001670"
  },
  {
    "text": "lambda function are one leveraging AWS as tools AWS has really great tools",
    "start": "3001670",
    "end": "3010219"
  },
  {
    "text": "called x-ray and cloud watch an x-ray and cloud watch are pretty cool because they allow you to send UDP events and",
    "start": "3010219",
    "end": "3018049"
  },
  {
    "text": "from the perspective of x-ray or asynchronous events from the perspective of cloud watch and it's really useful",
    "start": "3018049",
    "end": "3024619"
  },
  {
    "text": "up until recently actually I don't know if anybody's used there's a new feature called cloud watch insights or cloud",
    "start": "3024619",
    "end": "3030829"
  },
  {
    "text": "yeah yeah yeah cloud which incites it's actually a really really really good way",
    "start": "3030829",
    "end": "3038029"
  },
  {
    "text": "to view logs and it actually allows you to do complex aggregations and so on with your logs but that didn't exist",
    "start": "3038029",
    "end": "3044420"
  },
  {
    "text": "up until previously but let's say you want to use existing tools let's say you're using lambda and you you used a",
    "start": "3044420",
    "end": "3050359"
  },
  {
    "text": "dog you want to get those events out a snowflake events are created um this is",
    "start": "3050359",
    "end": "3055699"
  },
  {
    "text": "a really awkward situation because with these lambda functions the real latency sensitive you can't just send these events off and soar asynchronously send",
    "start": "3055699",
    "end": "3064609"
  },
  {
    "text": "them later with like an agent on the host right so this is an awkward situation what ends up having to happen",
    "start": "3064609",
    "end": "3069859"
  },
  {
    "text": "is that your providers need to scrape AWS is tools so my advice try to just",
    "start": "3069859",
    "end": "3076999"
  },
  {
    "text": "use AWS as tools because they're not actually as good as some of these other tools but it's just less of a headache",
    "start": "3076999",
    "end": "3082609"
  },
  {
    "text": "and if you can just learn to love cloud watch which ok you just learn to love",
    "start": "3082609",
    "end": "3089449"
  },
  {
    "text": "cloud watch it'll make your life a lot easier but if you if anybody wants ask more questions about this I have more",
    "start": "3089449",
    "end": "3095179"
  },
  {
    "text": "material so final pattern let's say we",
    "start": "3095179",
    "end": "3102049"
  },
  {
    "start": "3096000",
    "end": "3206000"
  },
  {
    "text": "want to get an item we have with a lambda function and a API gateway and DynamoDB to then label them we have a",
    "start": "3102049",
    "end": "3111979"
  },
  {
    "text": "guy here he's trying to get night up what does he have to do he has to go through API gateway he has to go to a",
    "start": "3111979",
    "end": "3120170"
  },
  {
    "text": "lambda and then he has to go to a dynamo DB table get an item work his way all",
    "start": "3120170",
    "end": "3126739"
  },
  {
    "text": "the way back so I'd like to propose to everyone this idea of codeless codeless means rather than",
    "start": "3126739",
    "end": "3134670"
  },
  {
    "text": "having to go to a function at all why don't we just go to dynamodb anybody see",
    "start": "3134670",
    "end": "3140220"
  },
  {
    "text": "any problems with this sounds great so I'm going to show you how codeless works so the first most important thing about",
    "start": "3140220",
    "end": "3148170"
  },
  {
    "text": "codeless is you define up in the sorry I'm just kidding",
    "start": "3148170",
    "end": "3154710"
  },
  {
    "text": "what are the most interesting things about trying to remove business logic from applications we're using you know",
    "start": "3154710",
    "end": "3162150"
  },
  {
    "text": "removing things like AWS lambda from the picture or even application servers is in my experience I don't know if you",
    "start": "3162150",
    "end": "3170310"
  },
  {
    "text": "think that this is easier or harder than writing actual application code but I",
    "start": "3170310",
    "end": "3177030"
  },
  {
    "text": "stole these off of AWS is actual documentation you can't tell me that all",
    "start": "3177030",
    "end": "3184380"
  },
  {
    "text": "these back slashed all these tabs and new lines how confusing is that oh man",
    "start": "3184380",
    "end": "3192690"
  },
  {
    "text": "that was cuz I ran out of patterns I had to put this one in here but that's it everybody thanks for listening",
    "start": "3192690",
    "end": "3200030"
  },
  {
    "text": "oh man so I have a lot of questions I'm gonna work through them pretty quick but",
    "start": "3204089",
    "end": "3209670"
  },
  {
    "start": "3206000",
    "end": "3345000"
  },
  {
    "text": "ask clarifying questions so code sharing and reuse across lambda functions I don't really I haven't had extremely",
    "start": "3209670",
    "end": "3216569"
  },
  {
    "text": "great experiences with layers layers are just file system things so if we're using golang that can be a little bit",
    "start": "3216569",
    "end": "3223199"
  },
  {
    "text": "more difficult because you can't really use the layer with go unless you're actually writing binaries and shelling",
    "start": "3223199",
    "end": "3228299"
  },
  {
    "text": "out so API gateway costs we just eat",
    "start": "3228299",
    "end": "3233430"
  },
  {
    "text": "them just say that it's a really major convenience and you just use API gateway",
    "start": "3233430",
    "end": "3240079"
  },
  {
    "text": "so somebody asked here is there a chance of the new requesting the cache responses for a previous request in an",
    "start": "3240079",
    "end": "3246180"
  },
  {
    "text": "available microbial for the most part if you just had a function that was receiving requests and responding to",
    "start": "3246180",
    "end": "3251489"
  },
  {
    "text": "them you would not actually have to deal with I lost the question but you would not",
    "start": "3251489",
    "end": "3259439"
  },
  {
    "text": "actually have to deal with anything any issues at all regarding caching if you",
    "start": "3259439",
    "end": "3265709"
  },
  {
    "text": "store it it's the same as caching in a situation you can shoot yourself in the foot but if you don't cache something",
    "start": "3265709",
    "end": "3270869"
  },
  {
    "text": "you can't have you can't accidentally put your cash rate-limiting across",
    "start": "3270869",
    "end": "3277589"
  },
  {
    "text": "lambdas so that's a really good question and the best possible way that we're",
    "start": "3277589",
    "end": "3283469"
  },
  {
    "text": "dealing with this now is reserving concurrency for lambdas so if you need to rate limit across lambdas",
    "start": "3283469",
    "end": "3289229"
  },
  {
    "text": "theoretically you could there's not really a clever way I can think of other",
    "start": "3289229",
    "end": "3294599"
  },
  {
    "text": "than using AWS as own tools to prevent lambdas from growing too quickly",
    "start": "3294599",
    "end": "3302029"
  },
  {
    "text": "oh man how do you keep track such captured the entire flows of services",
    "start": "3304720",
    "end": "3310930"
  },
  {
    "text": "slash lambda functions and configurations of middlemen services like API gateway such fan-out",
    "start": "3310930",
    "end": "3316660"
  },
  {
    "text": "so x-ray actually does this really well I don't know if people have actually had anybody have good experiences with x-ray",
    "start": "3316660",
    "end": "3323410"
  },
  {
    "text": "across a diverse ecosystem yeah it's pretty cool I'm tolls like dater dog actually do a",
    "start": "3323410",
    "end": "3328510"
  },
  {
    "text": "really good job of consuming x-ray spans and traces and combining them with",
    "start": "3328510",
    "end": "3334540"
  },
  {
    "text": "server full traces and spans so we've had success as things have gotten more convoluted of following spins through",
    "start": "3334540",
    "end": "3340569"
  },
  {
    "text": "our using x-ray so somebody brought up",
    "start": "3340569",
    "end": "3346900"
  },
  {
    "start": "3345000",
    "end": "3535000"
  },
  {
    "text": "using api gateways of proxy integration in fronting the front of a monolithic lambda versus fully managing resources",
    "start": "3346900",
    "end": "3353800"
  },
  {
    "text": "and methods with api gateway that that's a waste of your money there if you're if",
    "start": "3353800",
    "end": "3360010"
  },
  {
    "text": "you want to have an HTTP interface to a lambda function i didn't bring this up in their talk you can just use a nail be",
    "start": "3360010",
    "end": "3366910"
  },
  {
    "text": "actually it'll be much cheaper than an api gateway and alb can path based route",
    "start": "3366910",
    "end": "3372940"
  },
  {
    "text": "to a lambda function and that will actually be way cheaper if you're not doing any of the magical api gateway",
    "start": "3372940",
    "end": "3379390"
  },
  {
    "text": "functionality the primary magical api gateway functionality is the lambda",
    "start": "3379390",
    "end": "3385089"
  },
  {
    "text": "authorized authorizers i was talking about that gives you a really good off story and you can actually theoretically",
    "start": "3385089",
    "end": "3391510"
  },
  {
    "text": "but several different services all with the same off layer being api gateway a really powerful tool how do you do your",
    "start": "3391510",
    "end": "3400119"
  },
  {
    "text": "lambda functions so debugging lambda functions is a pain point but it's not no less of a pain point than a server",
    "start": "3400119",
    "end": "3406930"
  },
  {
    "text": "you can SSH into and a company like coinbase we don't ask the sage into",
    "start": "3406930",
    "end": "3412869"
  },
  {
    "text": "servers to debug so a lot of the ways you debug hopefully locally good tests",
    "start": "3412869",
    "end": "3421020"
  },
  {
    "text": "and some elbow grease this window",
    "start": "3421020",
    "end": "3429460"
  },
  {
    "text": "authorizers work for granting access to external consumers or shall we consider something else Cognito i guess don't",
    "start": "3429460",
    "end": "3436780"
  },
  {
    "text": "know external summers means but the answer is yes and no so you can use like we use API",
    "start": "3436780",
    "end": "3443810"
  },
  {
    "text": "gateway for external consumers absolutely really APA authorizers can do",
    "start": "3443810",
    "end": "3450530"
  },
  {
    "text": "anything except you're signing flow and that's what Cognito will give you as a sign-in flow to set like a JWT or",
    "start": "3450530",
    "end": "3456770"
  },
  {
    "text": "something that then api gateway can interpret yeah sorry",
    "start": "3456770",
    "end": "3471380"
  },
  {
    "text": "maybe i didn't clarify this enough that's what AWS Sam does it tries really hard they have a docker container that",
    "start": "3471380",
    "end": "3477560"
  },
  {
    "text": "is designed to mimic as much as possible what a lambda function sees because is",
    "start": "3477560",
    "end": "3482570"
  },
  {
    "text": "literally just Amazon Linux super stripped down sandbox environment right and that's as close as you can get and",
    "start": "3482570",
    "end": "3488510"
  },
  {
    "text": "that's how we do local development you just launch a DynamoDB my sequel container docker container and you just",
    "start": "3488510",
    "end": "3494060"
  },
  {
    "text": "communicate between them I think one of the biggest issues with that whole flow is that the like one of the interesting",
    "start": "3494060",
    "end": "3501650"
  },
  {
    "text": "caveat is that if you're trying to do weird stuff inside of the Linux file system or like trying to do weird things",
    "start": "3501650",
    "end": "3507440"
  },
  {
    "text": "inside the lambda cuz that lambda can do anything right and that's you can do anything except you can't do anything",
    "start": "3507440",
    "end": "3513410"
  },
  {
    "text": "like let's say you want to have a version of Python on a ruby lamp that don't ask why that's complicated right",
    "start": "3513410",
    "end": "3520370"
  },
  {
    "text": "you don't know what type of libraries exists like shared libraries it can get really complicated so there you have",
    "start": "3520370",
    "end": "3527600"
  },
  {
    "text": "more permissions on those local environment lambdas than you do on the real-life lambdas so we've yet there's",
    "start": "3527600",
    "end": "3536240"
  },
  {
    "start": "3535000",
    "end": "3599000"
  },
  {
    "text": "the same template create the I am rule um yeah it was a mess up it will not create the I'm role unless you to find",
    "start": "3536240",
    "end": "3541820"
  },
  {
    "text": "the I am role elsewhere but what Sam does really well is you can actually define specifically the policies you want a great create and or give your",
    "start": "3541820",
    "end": "3549320"
  },
  {
    "text": "lambda function so if you want to give your lambda function the ability to do something they have a little short snippets that you can post in there so",
    "start": "3549320",
    "end": "3556160"
  },
  {
    "text": "you can say policies equals be able to access the dynamodb table or be able to access SQL cue or you can create the I",
    "start": "3556160",
    "end": "3563150"
  },
  {
    "text": "am role with confirmation oh man how do you do with hundreds of lambdas and",
    "start": "3563150",
    "end": "3568700"
  },
  {
    "text": "distributed production that's you really have to rely on",
    "start": "3568700",
    "end": "3576800"
  },
  {
    "text": "distributed tracing you have to you have to be able to have a way to pass around",
    "start": "3576800",
    "end": "3581990"
  },
  {
    "text": "spans span IDs and you need to be able to be able to do distribute tracing or your goner we're you know one of the",
    "start": "3581990",
    "end": "3588080"
  },
  {
    "text": "common ways to do this is like you just have an ID that you log out on each one and you need to be able to follow the breadcrumb trail somehow it's very",
    "start": "3588080",
    "end": "3594740"
  },
  {
    "text": "possible there's like tons of off-the-shelf solutions for this you either pay for one or you use x-ray",
    "start": "3594740",
    "end": "3599860"
  },
  {
    "text": "x-ray isn't particularly expensive and it does a lot of this read well and it'll track request through s3",
    "start": "3599860",
    "end": "3605390"
  },
  {
    "text": "theoretically which is really powerful or not has three sqs maybe s3 we the",
    "start": "3605390",
    "end": "3612020"
  },
  {
    "text": "toys for our lambda deployments maybe I should have more clear is that told Fenrir it's a custom written thing all it does is take a CloudFormation stack",
    "start": "3612020",
    "end": "3618020"
  },
  {
    "text": "and apply it after we validated it we validate a cloud formation stack and we apply it if we use cloud fire service",
    "start": "3618020",
    "end": "3626300"
  },
  {
    "text": "resources they apparently have almost no cold start yeah because they only use JavaScript to let you do super limited",
    "start": "3626300",
    "end": "3631340"
  },
  {
    "text": "things and R&A WS and so on I think",
    "start": "3631340",
    "end": "3636590"
  },
  {
    "text": "cloud form cloud fleurs serverless and my understanding is basically just like",
    "start": "3636590",
    "end": "3642200"
  },
  {
    "text": "modify HTTP request before they get through I think there's stuff like a JavaScript sandboxes I don't know how",
    "start": "3642200",
    "end": "3647480"
  },
  {
    "text": "they did but yeah there's probably very little to no cold start for cloud first I don't have much experience with them",
    "start": "3647480",
    "end": "3654070"
  },
  {
    "text": "[Music] the performance availability or availability issues still happen just to",
    "start": "3654070",
    "end": "3660170"
  },
  {
    "text": "be really clear quinby's the entire company is not on lambda today we would love to move to a",
    "start": "3660170",
    "end": "3666260"
  },
  {
    "text": "world where we don't have to worry about provisioning servers over again and everything is in a lambda function that",
    "start": "3666260",
    "end": "3672830"
  },
  {
    "text": "day maybe all happen we've not had an outage from a lambda function or a",
    "start": "3672830",
    "end": "3677990"
  },
  {
    "text": "service application yet we're availability issues occasionally you'll see timeouts you're like was that the",
    "start": "3677990",
    "end": "3683810"
  },
  {
    "text": "lambda function or was that our code so we're not there here how do you reduce",
    "start": "3683810",
    "end": "3691310"
  },
  {
    "text": "the warmup time for lambdas deployed inside the pcs I think I kind of already said this a little bit one of them is",
    "start": "3691310",
    "end": "3696500"
  },
  {
    "text": "wait for AWS to fix it the second is just making sure you try",
    "start": "3696500",
    "end": "3705460"
  },
  {
    "text": "as much as possible to maintain even pressure on an application lambdas do best in a world where they actually get",
    "start": "3705460",
    "end": "3713050"
  },
  {
    "text": "traffic the worst land to function in the world is one that doesn't get used much and reaches inside of EPC so then",
    "start": "3713050",
    "end": "3720730"
  },
  {
    "text": "the ni gets cleaned up the lambda gets cleaned up and every time you invoke it it gets cold started and this is why cold starts get a really bad reputation",
    "start": "3720730",
    "end": "3727090"
  },
  {
    "text": "because a lot of the people who use lambda are doing it with VP C's because I want to access and yell be they want",
    "start": "3727090",
    "end": "3733540"
  },
  {
    "text": "access my sequel and then they run into issues when they inevitably are only",
    "start": "3733540",
    "end": "3738760"
  },
  {
    "text": "using the lambda infrequently and they have ten second cold sores like that's brutal",
    "start": "3738760",
    "end": "3744210"
  },
  {
    "text": "yeah any any last questions from people would like want to actually say something yeah sure have failed you want",
    "start": "3745020",
    "end": "3756310"
  },
  {
    "text": "to run get the binary on a function",
    "start": "3756310",
    "end": "3762240"
  },
  {
    "text": "[Music] anything like blockchain I mean like you know you can't run a lot of apps on",
    "start": "3763770",
    "end": "3769600"
  },
  {
    "text": "something that can only run for fifteen minutes if you want to do a terraform apply theoretically or you want to run a",
    "start": "3769600",
    "end": "3777640"
  },
  {
    "text": "blockchain node or so on we've shot down",
    "start": "3777640",
    "end": "3783100"
  },
  {
    "text": "a lot of ideas that needed to go into a V PC because we haven't wanted to have a V PC cold start at lambda and a customer",
    "start": "3783100",
    "end": "3789400"
  },
  {
    "text": "hot path we've backed off of that slightly recently because we've actually started to see success with higher",
    "start": "3789400",
    "end": "3795700"
  },
  {
    "text": "provision like more heavily like heavily utilized lambda functions and how",
    "start": "3795700",
    "end": "3802690"
  },
  {
    "text": "infrequently you actually have a V PC cold start in the real world",
    "start": "3802690",
    "end": "3807759"
  },
  {
    "text": "oh good question uh five to ten percents",
    "start": "3807759",
    "end": "3814539"
  },
  {
    "text": "but this is a reason how what percentage bar functionality is only bit okay so",
    "start": "3814539",
    "end": "3821319"
  },
  {
    "text": "that's it for the official talk I'm hanging out for whatever so if anybody was asked questions feel free",
    "start": "3821319",
    "end": "3827670"
  },
  {
    "text": "[Applause] [Music]",
    "start": "3827670",
    "end": "3838590"
  },
  {
    "text": "you",
    "start": "3844380",
    "end": "3846440"
  }
]