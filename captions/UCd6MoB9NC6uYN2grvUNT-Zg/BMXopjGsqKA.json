[
  {
    "text": "hello everyone in this session we are going to learn how you can do locking",
    "start": "530",
    "end": "5879"
  },
  {
    "text": "debugging and monitoring of your dotnet applications on AWS my name is sri",
    "start": "5879",
    "end": "11070"
  },
  {
    "text": "vanthu Tanaka and I'm a partner solution architect at Amazon Web Services what's",
    "start": "11070",
    "end": "16560"
  },
  {
    "text": "the agenda for today's session we are going to learn why distributed or cloud",
    "start": "16560",
    "end": "21660"
  },
  {
    "text": "debugging is different from traditional environment debugging we are going to",
    "start": "21660",
    "end": "26760"
  },
  {
    "text": "explore some login options available for dotnet developers on a lab this platform and how you can easily integrate your",
    "start": "26760",
    "end": "33500"
  },
  {
    "text": "current existing login mechanisms with AWS we will then look into how to",
    "start": "33500",
    "end": "39989"
  },
  {
    "text": "integrate with Amazon CloudWatch events so that you can act upon different",
    "start": "39989",
    "end": "45239"
  },
  {
    "text": "events happening on our watch we will finally dig deep into AWS X ray and then",
    "start": "45239",
    "end": "51420"
  },
  {
    "text": "X explore how you can integrate different internet applications with",
    "start": "51420",
    "end": "57390"
  },
  {
    "text": "x-ray so that you can do distributed debugging very easily so let's get started",
    "start": "57390",
    "end": "64640"
  },
  {
    "text": "the first thing to understand that there's a big difference between traditional environments and cloud",
    "start": "65820",
    "end": "72520"
  },
  {
    "text": "environments in crowded environments the server's autoscale so they are not going",
    "start": "72520",
    "end": "79780"
  },
  {
    "text": "to live for a long time for example during the morning peak time you may",
    "start": "79780",
    "end": "84790"
  },
  {
    "text": "have a server that will run for a few minutes to absorb that peak workload and then they are going to die so if you",
    "start": "84790",
    "end": "91119"
  },
  {
    "text": "keep your login data or some important information about application performance or things related to",
    "start": "91119",
    "end": "98590"
  },
  {
    "text": "application logs in the server when the server dies you are going to lose them so you need to find some ways to bring",
    "start": "98590",
    "end": "105490"
  },
  {
    "text": "these important information like performance data your exceptions that happens in the application back into",
    "start": "105490",
    "end": "111970"
  },
  {
    "text": "some central repository and also you have for example imagine you are running a large set of containers on your",
    "start": "111970",
    "end": "120940"
  },
  {
    "text": "environment the nature of how they operate is once you want to run some",
    "start": "120940",
    "end": "126250"
  },
  {
    "text": "tasks you are going to run it to it some containers and after that that containers may die so how can you track",
    "start": "126250",
    "end": "132670"
  },
  {
    "text": "the events happening on those containers and then keep them in a secure central location so that you can access them",
    "start": "132670",
    "end": "139510"
  },
  {
    "text": "later so first thing you need to understand is that there's a big difference between traditional environments where the servers are",
    "start": "139510",
    "end": "146830"
  },
  {
    "text": "running for a long time and you don't terminate them completely and the cloud environments the second thing is that",
    "start": "146830",
    "end": "154390"
  },
  {
    "text": "remote debugging is good for development and test environments but not for production we don't need developers",
    "start": "154390",
    "end": "161620"
  },
  {
    "text": "allowed to have remote debugging but the thing is it's not something that you can",
    "start": "161620",
    "end": "166780"
  },
  {
    "text": "use in production environment with production data so we need to find some clever ways how we can do this in",
    "start": "166780",
    "end": "173500"
  },
  {
    "text": "production environment and specially in cloud environments where you will have not only one server but thousands of",
    "start": "173500",
    "end": "180100"
  },
  {
    "text": "servers if you try to remote debug into server or server farm which Auto scales",
    "start": "180100",
    "end": "187290"
  },
  {
    "text": "once you attach into a remote debugger the server may die after few minutes or",
    "start": "187290",
    "end": "192850"
  },
  {
    "text": "you will find it really difficult because the request may get routed only not onto the server that you are",
    "start": "192850",
    "end": "198510"
  },
  {
    "text": "to attach show studio but maybe to another server so that's why the remote",
    "start": "198510",
    "end": "203730"
  },
  {
    "text": "debugging is not a good option for distributed check-in or distributed debugging the final thing is that",
    "start": "203730",
    "end": "211970"
  },
  {
    "text": "Microsoft's debugging is a whole new thing the reason why I'm saying that is imagine that you have set of micro",
    "start": "211970",
    "end": "219989"
  },
  {
    "text": "services and some of these services that you invoke may not be even dotnet",
    "start": "219989",
    "end": "225150"
  },
  {
    "text": "applications so if you try to for example remote debug you will not have an option for example to attach into the",
    "start": "225150",
    "end": "233549"
  },
  {
    "text": "processors running there may be some job application or it may be a remote end",
    "start": "233549",
    "end": "238560"
  },
  {
    "text": "point that you invoke may be a service endpoint of another service provider so",
    "start": "238560",
    "end": "243629"
  },
  {
    "text": "you need to find some clever ways to debug these distributed systems where you have a lot of micro services so",
    "start": "243629",
    "end": "250379"
  },
  {
    "text": "let's get to the login section and then understand what are the options",
    "start": "250379",
    "end": "255510"
  },
  {
    "text": "available for dotnet developers to log into AWS platform there are multiple",
    "start": "255510",
    "end": "260850"
  },
  {
    "text": "ways the options available for you depends the option that you are going to",
    "start": "260850",
    "end": "266010"
  },
  {
    "text": "select depends on what kind of use cases you have and how you want to modify you",
    "start": "266010",
    "end": "272880"
  },
  {
    "text": "existing code base to integrate with AWS the simple method is to write into",
    "start": "272880",
    "end": "280080"
  },
  {
    "text": "Windows event logs these windows event logs have been there for a long time on",
    "start": "280080",
    "end": "285750"
  },
  {
    "text": "Windows platforms so you may use a code base like this where you use event log",
    "start": "285750",
    "end": "290820"
  },
  {
    "text": "entries and then write some warnings error messages to window cement works so",
    "start": "290820",
    "end": "296910"
  },
  {
    "text": "if your application also already using these kind of mechanisms how can you get",
    "start": "296910",
    "end": "302400"
  },
  {
    "text": "these entries back into AWS so that means the server dies you still have these entries available in a central",
    "start": "302400",
    "end": "309210"
  },
  {
    "text": "location let's say you have this application and you write into Windows",
    "start": "309210",
    "end": "314430"
  },
  {
    "text": "event logs so AWS has something called AWS cloud watch agent which runs on your",
    "start": "314430",
    "end": "322349"
  },
  {
    "text": "Windows machine and it can read these windows event logs and then send them in to a central repository called Amazon",
    "start": "322349",
    "end": "328770"
  },
  {
    "text": "CloudWatch Amazon Cloud Watch place where all your diagnostic data are",
    "start": "328770",
    "end": "335960"
  },
  {
    "text": "kept and you can easily integrate it using this method you for your donate",
    "start": "335960",
    "end": "341480"
  },
  {
    "text": "applications the second approach is to",
    "start": "341480",
    "end": "348260"
  },
  {
    "text": "use windows performance counters let's say you have an application that writes some windows performance count the time",
    "start": "348260",
    "end": "354740"
  },
  {
    "text": "into windows performance counters lock so here you are capturing time series",
    "start": "354740",
    "end": "360500"
  },
  {
    "text": "data these performers count data can be your custom counters or they can be",
    "start": "360500",
    "end": "366110"
  },
  {
    "text": "already existing counters like memory utilization the lot of information that is already available things like for",
    "start": "366110",
    "end": "373070"
  },
  {
    "text": "example how many times the garbage collector and you can capture data like",
    "start": "373070",
    "end": "378160"
  },
  {
    "text": "how often you get cache hits in your memcache so let's say you want to",
    "start": "378160",
    "end": "384620"
  },
  {
    "text": "capture this data Amazon CloudWatch agent can read these performance counters and then send them into Amazon",
    "start": "384620",
    "end": "391460"
  },
  {
    "text": "Cloud watch so that's another approach to capture some debug and login",
    "start": "391460",
    "end": "397820"
  },
  {
    "text": "information into a central repository of",
    "start": "397820",
    "end": "403480"
  },
  {
    "text": "course you can use the typical login that you have been already using imagine",
    "start": "403480",
    "end": "409070"
  },
  {
    "text": "that you are using some of these famous open-source libraries so you may be",
    "start": "409070",
    "end": "414290"
  },
  {
    "text": "using nlog which is a very famous logging framework for dotnet platform or",
    "start": "414290",
    "end": "420560"
  },
  {
    "text": "log for neck or Microsoft Enterprise library if you use any of these tools and then imagine you are writing them",
    "start": "420560",
    "end": "427820"
  },
  {
    "text": "into a log file in your server Amazon Cloud what agent can read this file and",
    "start": "427820",
    "end": "434270"
  },
  {
    "text": "then send it into Amazon CloudWatch and then keep them in a central repository you can of course use cloud",
    "start": "434270",
    "end": "443450"
  },
  {
    "text": "watch API directly you download a new code package and with few entries with",
    "start": "443450",
    "end": "453530"
  },
  {
    "text": "few code you can easily write different parameters into Amazon CloudWatch so in",
    "start": "453530",
    "end": "459110"
  },
  {
    "text": "this case you don't go to indirect way to interact with cloud watch you directly write into Amazon",
    "start": "459110",
    "end": "465180"
  },
  {
    "text": "watch the fifth method is to use some custom log providers for example imagine",
    "start": "465180",
    "end": "472770"
  },
  {
    "text": "that you are using some login library like in log or log finet they all expose",
    "start": "472770",
    "end": "479820"
  },
  {
    "text": "some way to extend the existing locking mechanism something like I provided you",
    "start": "479820",
    "end": "486780"
  },
  {
    "text": "can log the details that you are writing using that API into an SQL Server or a",
    "start": "486780",
    "end": "492930"
  },
  {
    "text": "special XML format so you can write your own provider that will interact with",
    "start": "492930",
    "end": "498840"
  },
  {
    "text": "Amazon CloudWatch using Amazon CloudWatch dotnet API and then write them directly into Amazon CloudWatch so",
    "start": "498840",
    "end": "505800"
  },
  {
    "text": "in this way you can control what kind of date time formats you want to have",
    "start": "505800",
    "end": "511020"
  },
  {
    "text": "what's the ordering that you want to write them so all these things are under",
    "start": "511020",
    "end": "516270"
  },
  {
    "text": "your control of course if you are lazy to use exiting log providers and then",
    "start": "516270",
    "end": "523110"
  },
  {
    "text": "extend their interfaces we have provided some new get packages that you can use",
    "start": "523110",
    "end": "529080"
  },
  {
    "text": "to readily integrate with famous login libraries like in log or log for net and",
    "start": "529080",
    "end": "535890"
  },
  {
    "text": "in this way you don't need to write your own custom providers you can directly interact with cloud virtues in these new",
    "start": "535890",
    "end": "542220"
  },
  {
    "text": "packages of course we chose to do remote debugger is still an option so if you",
    "start": "542220",
    "end": "550470"
  },
  {
    "text": "are planning to use remote debugger or what you need to do is to install the remote pools which was - you think this",
    "start": "550470",
    "end": "556589"
  },
  {
    "text": "case I am installing for 2017 do some configuration telling what account that",
    "start": "556589",
    "end": "563190"
  },
  {
    "text": "remote diba has to run configure some securities and then allow that remote",
    "start": "563190",
    "end": "571709"
  },
  {
    "text": "debug user to login as a service start",
    "start": "571709",
    "end": "576779"
  },
  {
    "text": "the service and after that of course you can attach which was to do into the processes running on these machines",
    "start": "576779",
    "end": "584430"
  },
  {
    "text": "provided that you have configured your firewalls firewall rules and civic",
    "start": "584430",
    "end": "589890"
  },
  {
    "text": "groups correctly and the debugging experience is similar you give you a ec2 machine image or you",
    "start": "589890",
    "end": "597130"
  },
  {
    "text": "will ask Beanstalk instance that is running and you can attach to for",
    "start": "597130",
    "end": "604089"
  },
  {
    "text": "example your IRS worker process so this is some options like if you are going to",
    "start": "604089",
    "end": "609880"
  },
  {
    "text": "run your application on Amazon ec2 or Amazon AWS elastic Beanstalk you can",
    "start": "609880",
    "end": "615490"
  },
  {
    "text": "easily do that but in distributed environments as I said before this is",
    "start": "615490",
    "end": "621610"
  },
  {
    "text": "not a good idea because a your request is going to be served by multiple",
    "start": "621610",
    "end": "627490"
  },
  {
    "text": "applications multiple run in ec2 instances or multiple run in instance of",
    "start": "627490",
    "end": "633459"
  },
  {
    "text": "your application and you don't know to which application that you got the",
    "start": "633459",
    "end": "640000"
  },
  {
    "text": "request and also these servers are going to die maybe while you are debugging if",
    "start": "640000",
    "end": "649420"
  },
  {
    "text": "you don't want to have some of our API is in your code base you can of course",
    "start": "649420",
    "end": "656290"
  },
  {
    "text": "wrap them with your own interfaces and then you can use your interfaces instead",
    "start": "656290",
    "end": "663399"
  },
  {
    "text": "of using Amazon provided interfaces let's go for a demo and then see how you",
    "start": "663399",
    "end": "669610"
  },
  {
    "text": "can easily integrated different login mechanism you already have with Amazon",
    "start": "669610",
    "end": "674649"
  },
  {
    "text": "services this is a sample JSON documents that you",
    "start": "674649",
    "end": "683399"
  },
  {
    "text": "use to configure AWS cloud watch agent here I want to stream some custom log",
    "start": "683399",
    "end": "689040"
  },
  {
    "text": "data so I have specified it I want to capture some windows event logs whether",
    "start": "689040",
    "end": "694350"
  },
  {
    "text": "I will here we can specify whether you want to capture information errors or you want to capture critical data you",
    "start": "694350",
    "end": "702089"
  },
  {
    "text": "then specify what windows performance counters that you want to capture the time interval so it could be existing",
    "start": "702089",
    "end": "708120"
  },
  {
    "text": "windows performance counters or your custom even rows performance counters the important thing to understand is",
    "start": "708120",
    "end": "714510"
  },
  {
    "text": "that windows performance counters is very powerful you can even capture very",
    "start": "714510",
    "end": "721050"
  },
  {
    "text": "detail the serial level information so if you just explore I strongly recommend",
    "start": "721050",
    "end": "726750"
  },
  {
    "text": "that to explore some of the performance counters available for you things like for example how many times the garbage",
    "start": "726750",
    "end": "734040"
  },
  {
    "text": "collector and you can look for things like the number of threads running you",
    "start": "734040",
    "end": "743910"
  },
  {
    "text": "can generation to sizes of your garbage collector you can look for things like",
    "start": "743910",
    "end": "751220"
  },
  {
    "text": "cash it's ratios if you would memcache if you are using asp.net you can look",
    "start": "751220",
    "end": "757860"
  },
  {
    "text": "for things like how many times the application pool restarted so there are a lot of information available for you",
    "start": "757860",
    "end": "764490"
  },
  {
    "text": "already you on windows performance counters so the question is how you can get them back into cloud watch you",
    "start": "764490",
    "end": "771480"
  },
  {
    "text": "configure this JSON document and then the cloud watch agent that runs behind",
    "start": "771480",
    "end": "777360"
  },
  {
    "text": "the scene on your servers can send this data to AWS a very common question that I get when I",
    "start": "777360",
    "end": "786590"
  },
  {
    "text": "present this way of sending log data windows performance counters exceptions",
    "start": "786590",
    "end": "792410"
  },
  {
    "text": "to cloud virtues in cloud watch agent is that what happens if the ec2 instance or",
    "start": "792410",
    "end": "798980"
  },
  {
    "text": "the VM that you are running terminates as part of let's say scaling in activity",
    "start": "798980",
    "end": "804590"
  },
  {
    "text": "will the cloud watch agent have enough time to send the log files or the",
    "start": "804590",
    "end": "809900"
  },
  {
    "text": "performance counters to cloud watch the answer is in production environment you",
    "start": "809900",
    "end": "816620"
  },
  {
    "text": "design your systems in a way that the Syst the ec2 instances are not terminated",
    "start": "816620",
    "end": "822860"
  },
  {
    "text": "immediately but there's a small time gap and during which the cloud watch agent will have enough time to send it to the",
    "start": "822860",
    "end": "830060"
  },
  {
    "text": "cloud watch a classic example is there are some events that you get before ec2",
    "start": "830060",
    "end": "838910"
  },
  {
    "text": "instance terminates and you can make sure that the instance is terminated",
    "start": "838910",
    "end": "844360"
  },
  {
    "text": "only when per watch agent finished sending the data so it could be for",
    "start": "844360",
    "end": "850790"
  },
  {
    "text": "example when the auto-scaling runs and scaling in activity happens you have",
    "start": "850790",
    "end": "858590"
  },
  {
    "text": "some events that you can react and then send this log data and once it's since",
    "start": "858590",
    "end": "867230"
  },
  {
    "text": "it's there I will appear under logs you can select the log so you can define any",
    "start": "867230",
    "end": "872570"
  },
  {
    "text": "names or log groups if you want if you want to categorize them and when you select this you can see that these logs",
    "start": "872570",
    "end": "878210"
  },
  {
    "text": "appearance so this is a custom log that I have sent into cloud watch what I have done was I specified what's the location",
    "start": "878210",
    "end": "885530"
  },
  {
    "text": "of that file this is in this case see custom logs and this is the text file",
    "start": "885530",
    "end": "891710"
  },
  {
    "text": "crown watch agent knows to send Delta changes so it's not going to send the full file always so that's one way to",
    "start": "891710",
    "end": "901400"
  },
  {
    "text": "capture your login information if you warned to for example capture windows",
    "start": "901400",
    "end": "909320"
  },
  {
    "text": "event logs in this case I have captured them on the system event logs I can export them for example a sex",
    "start": "909320",
    "end": "915800"
  },
  {
    "text": "documents so I have like some of you in windows event blocks that I captured so",
    "start": "915800",
    "end": "921670"
  },
  {
    "text": "this may be coming from multiple servers so here I have some you know Stephen",
    "start": "921670",
    "end": "928190"
  },
  {
    "text": "blocks that I already captured so let's try to search some of these windows event logs and then try to locate the",
    "start": "928190",
    "end": "935029"
  },
  {
    "text": "entries so if you look at this event log entry you can find that it has something",
    "start": "935029",
    "end": "941209"
  },
  {
    "text": "called WMI performance adapter so that's",
    "start": "941209",
    "end": "946579"
  },
  {
    "text": "the text that I want to search so imagine that this is an exception that you log into Windows event logs you can",
    "start": "946579",
    "end": "952760"
  },
  {
    "text": "easily go into cloud watch and then search for that entry so if you have",
    "start": "952760",
    "end": "958970"
  },
  {
    "text": "like millions of Records you can easily search it and narrow down your search to",
    "start": "958970",
    "end": "964279"
  },
  {
    "text": "the only the things that you are looking for right so that's an easy way that you can search called watch entries and then",
    "start": "964279",
    "end": "971240"
  },
  {
    "text": "find where they're happened of course you can narrow it down based on the time",
    "start": "971240",
    "end": "978050"
  },
  {
    "text": "that it happened another approach to do is to plot your data against some",
    "start": "978050",
    "end": "983540"
  },
  {
    "text": "timeline rights so if you want to capture time series data like windows performance counters you can use the",
    "start": "983540",
    "end": "989300"
  },
  {
    "text": "matrices so there are a lot of already existing in values you can capture for",
    "start": "989300",
    "end": "994760"
  },
  {
    "text": "different AWS services in the case of windows platform if you want to capture",
    "start": "994760",
    "end": "1000070"
  },
  {
    "text": "performance counters they will appear on the CW agent which I have created here",
    "start": "1000070",
    "end": "1006820"
  },
  {
    "text": "so you can plot them against some graph if you don't like that graph there are",
    "start": "1006820",
    "end": "1012310"
  },
  {
    "text": "multiple ways that you can create very compelling dashboards there are a lot of partner solutions for example Splunk",
    "start": "1012310",
    "end": "1019779"
  },
  {
    "text": "that allows you to create stunning visuals out of the data that it gathers from cloud watch the cloud watch itself",
    "start": "1019779",
    "end": "1028089"
  },
  {
    "text": "allows some basic graphing and charting but if you want to have for example maps",
    "start": "1028089",
    "end": "1035020"
  },
  {
    "text": "and heat maps there are a lot of partner solutions available shortly I will",
    "start": "1035020",
    "end": "1040120"
  },
  {
    "text": "showcase you how to do integrate cloud watch with one AWS is called elastic",
    "start": "1040120",
    "end": "1046178"
  },
  {
    "text": "search so that's one way to our data along sometime axis of course",
    "start": "1046179",
    "end": "1055050"
  },
  {
    "text": "you can integrate this one with s3 and then send this log data to s3 oh you can",
    "start": "1055050",
    "end": "1060450"
  },
  {
    "text": "stream this data to immerse an elastic search service elastic search is think",
    "start": "1060450",
    "end": "1067050"
  },
  {
    "text": "it as a one big index so what I'm going to do now is to showcase you how to",
    "start": "1067050",
    "end": "1072330"
  },
  {
    "text": "integrate with the elastic search so go to elastic search what you're going to do here is to create elastic search",
    "start": "1072330",
    "end": "1078900"
  },
  {
    "text": "cluster that will maintain your index give it a name",
    "start": "1078900",
    "end": "1084540"
  },
  {
    "text": "what's the version you want to run [Music] specify how much storage you are going to allocate the network that you are",
    "start": "1084540",
    "end": "1091230"
  },
  {
    "text": "going to run a few configuration it's not very complex you just select few parameters click",
    "start": "1091230",
    "end": "1096900"
  },
  {
    "text": "Next Next Next and you can create the elastic search cluster very easily of",
    "start": "1096900",
    "end": "1103110"
  },
  {
    "text": "course you can define a very complex security usually you expose if it is a",
    "start": "1103110",
    "end": "1108120"
  },
  {
    "text": "development environment to the network that the developers are accessing this so in this case I'm going to allow it to",
    "start": "1108120",
    "end": "1114750"
  },
  {
    "text": "a certain network and not going to give very complex configuration all right",
    "start": "1114750",
    "end": "1120420"
  },
  {
    "text": "click confirm and it takes about five six minutes to create the cluster so once the cluster is ready you can go",
    "start": "1120420",
    "end": "1127380"
  },
  {
    "text": "into that and then it will provide you",
    "start": "1127380",
    "end": "1132590"
  },
  {
    "text": "URL to login into kibana so kibana is an open source dashboard in",
    "start": "1132590",
    "end": "1139050"
  },
  {
    "text": "tool that you can use to create a stunning dashboards and visuals so I log",
    "start": "1139050",
    "end": "1144900"
  },
  {
    "text": "in into this Cabana right now it because I'm connecting from my development Network it allows me to I have access to",
    "start": "1144900",
    "end": "1151410"
  },
  {
    "text": "that so I can because this is integrated with the Amazon Elastic search service",
    "start": "1151410",
    "end": "1157520"
  },
  {
    "text": "you can look for some indexes that the elasticsearch service already has so in",
    "start": "1157520",
    "end": "1164160"
  },
  {
    "text": "this case I have some one some index created for cloud watch so I select that",
    "start": "1164160",
    "end": "1169200"
  },
  {
    "text": "index and I'm going to create some data set out of it so once you select this",
    "start": "1169200",
    "end": "1175380"
  },
  {
    "text": "index you want to tell what's the time stamp is going to be",
    "start": "1175380",
    "end": "1181080"
  },
  {
    "text": "and then cover the next step and it will ask you to select the fields or the",
    "start": "1181080",
    "end": "1187680"
  },
  {
    "text": "columns that you want to have in this data set so it could be string it could",
    "start": "1187680",
    "end": "1193050"
  },
  {
    "text": "be numerical values so if you want to take the average of course you can do it along a numerical value so in this case",
    "start": "1193050",
    "end": "1199860"
  },
  {
    "text": "I'm capturing VPC flow logs that capture network traffic into my virtual private",
    "start": "1199860",
    "end": "1205740"
  },
  {
    "text": "cloud so the index is based out of that and you have things like IP addresses",
    "start": "1205740",
    "end": "1210960"
  },
  {
    "text": "port numbers in this log I'm going to create a nice dashboard out of it so",
    "start": "1210960",
    "end": "1218040"
  },
  {
    "text": "let's create few visuals I'm going to create a histogram I'm not an expert in",
    "start": "1218040",
    "end": "1224430"
  },
  {
    "text": "cabanas so this visual is not going to be great but I can select things like",
    "start": "1224430",
    "end": "1230370"
  },
  {
    "text": "the x-axis what's going to be the y-axis how you are going to aggregate the information so after few entries you can",
    "start": "1230370",
    "end": "1237870"
  },
  {
    "text": "easily create few charts out of it right so mind you this is one option to create",
    "start": "1237870",
    "end": "1244430"
  },
  {
    "text": "charts so I created a lack of some histogram not the greatest visual that",
    "start": "1244430",
    "end": "1250200"
  },
  {
    "text": "you can think of so once I create this visual I can save it with a name right",
    "start": "1250200",
    "end": "1257150"
  },
  {
    "text": "so if I go into saving I can give it a name and then save that so test some",
    "start": "1257150",
    "end": "1264090"
  },
  {
    "text": "graph save it so once you create like multiple visuals you can create a",
    "start": "1264090",
    "end": "1269460"
  },
  {
    "text": "dashboard out of it so just create a dashboard you can then add visuals that",
    "start": "1269460",
    "end": "1276330"
  },
  {
    "text": "you have already created in this case the test graph that I have here and then",
    "start": "1276330",
    "end": "1281940"
  },
  {
    "text": "create a dashboard out of it so you can use for example this one to create some",
    "start": "1281940",
    "end": "1288210"
  },
  {
    "text": "dashboard that will represent your application performance how many times the garbage collector ran or protect",
    "start": "1288210",
    "end": "1294630"
  },
  {
    "text": "against your sales so there are multiple options you can integrate with existing partner solutions so far we have studied",
    "start": "1294630",
    "end": "1302610"
  },
  {
    "text": "different ways that you can stream data into Amazon Cloud Watch",
    "start": "1302610",
    "end": "1307950"
  },
  {
    "text": "so they may be coming from direct API interaction or maybe you a stream in your log",
    "start": "1307950",
    "end": "1313580"
  },
  {
    "text": "to some proxy like Amazon CloudWatch agent so regardless how how you send the",
    "start": "1313580",
    "end": "1319550"
  },
  {
    "text": "data those data is going to end up in cloud watch so that's one part of the story the other part is that you want to",
    "start": "1319550",
    "end": "1326540"
  },
  {
    "text": "act upon on this data so for example when you get an exception you want to do something when there's a security leak",
    "start": "1326540",
    "end": "1332810"
  },
  {
    "text": "you want to do something for that Amazon Cloud watch is integrated with Amazon",
    "start": "1332810",
    "end": "1338840"
  },
  {
    "text": "lambda and you can invoke her AWS lambda function when certain events happens and",
    "start": "1338840",
    "end": "1345790"
  },
  {
    "text": "the beauty of that one is now you can reactively take some actions when",
    "start": "1345790",
    "end": "1352460"
  },
  {
    "text": "certain events happens or when certain entries appear on cloud watch to give an",
    "start": "1352460",
    "end": "1360080"
  },
  {
    "text": "example let me show case you an example use case so in one of the companies that",
    "start": "1360080",
    "end": "1366830"
  },
  {
    "text": "I worked before we were creating some image rendering web service so behind",
    "start": "1366830",
    "end": "1373700"
  },
  {
    "text": "the scenes we do some physics simulation and did create some body models which",
    "start": "1373700",
    "end": "1383540"
  },
  {
    "text": "get directed into DirectX API alright Microsoft DirectX rendering",
    "start": "1383540",
    "end": "1389120"
  },
  {
    "text": "engine there's a C++ CLI wrapper and so",
    "start": "1389120",
    "end": "1394820"
  },
  {
    "text": "the WCF for the windows communication foundation endpoint communicates with",
    "start": "1394820",
    "end": "1400460"
  },
  {
    "text": "this is C+ pasilla wrapper and get some JPEG images that it's renders to the",
    "start": "1400460",
    "end": "1407390"
  },
  {
    "text": "website right there was a bug in this pipeline which we found later is in one",
    "start": "1407390",
    "end": "1416480"
  },
  {
    "text": "of the mistake that we have done in our direct recording that we are not",
    "start": "1416480",
    "end": "1423470"
  },
  {
    "text": "properly disposing certain buffers we have allocated and that caused the images that have been rendered through",
    "start": "1423470",
    "end": "1430190"
  },
  {
    "text": "this WCF service to be black images right so there was a buck in the system",
    "start": "1430190",
    "end": "1435730"
  },
  {
    "text": "but the challenge here was that we didn't have enough time to fix this bug",
    "start": "1435730",
    "end": "1441920"
  },
  {
    "text": "because we were doing some production deployment there was some even that we plan to run this",
    "start": "1441920",
    "end": "1447369"
  },
  {
    "text": "application so but but in thing that we understood was that this issue happens",
    "start": "1447369",
    "end": "1456039"
  },
  {
    "text": "only when we're end about forty thousand images right so a quick fix that we gave",
    "start": "1456039",
    "end": "1464350"
  },
  {
    "text": "for that funny is when it runs for about when it renders about thirty five",
    "start": "1464350",
    "end": "1469450"
  },
  {
    "text": "thousand images we restart the service right so once you restart the service the the memory leak is gone because you",
    "start": "1469450",
    "end": "1477639"
  },
  {
    "text": "need to again rent about another forty thousand before it appears right it's a",
    "start": "1477639",
    "end": "1482980"
  },
  {
    "text": "dirty fix but it did the work we wanted to do until we find where the problem",
    "start": "1482980",
    "end": "1488019"
  },
  {
    "text": "was so in this kind of a situation you can monitor for example how many times",
    "start": "1488019",
    "end": "1493809"
  },
  {
    "text": "these services in walk using cloud watch for example you can integrate your lot",
    "start": "1493809",
    "end": "1500259"
  },
  {
    "text": "balancers with cloud watch and then fire an alarm when you get certain number of",
    "start": "1500259",
    "end": "1505809"
  },
  {
    "text": "requests and then you can trigger a lambda function to restart a service or",
    "start": "1505809",
    "end": "1511029"
  },
  {
    "text": "restart the service that is leaking the memory so every simple approach that you",
    "start": "1511029",
    "end": "1519340"
  },
  {
    "text": "can use to fix certain issues when you don't know where the problem is happening of course you need to find a",
    "start": "1519340",
    "end": "1526119"
  },
  {
    "text": "permanent solutions once you identify where the problem is another good",
    "start": "1526119",
    "end": "1532809"
  },
  {
    "text": "example is when you get exceptions right so this is a classic example if you have",
    "start": "1532809",
    "end": "1538299"
  },
  {
    "text": "been using or if you have been doing some asp.net development this yellow page is very very common one so you can",
    "start": "1538299",
    "end": "1546730"
  },
  {
    "text": "capture things like HTTP errors and then create cloud watch alarms that you can",
    "start": "1546730",
    "end": "1553690"
  },
  {
    "text": "fire to trigger a lambda function that can do certain health checks or that can",
    "start": "1553690",
    "end": "1561369"
  },
  {
    "text": "act upon in them and then let's say send an email so there are different ways that you can integrate cloud watch to",
    "start": "1561369",
    "end": "1568929"
  },
  {
    "text": "reactively act upon two different events happening in your environment debugging",
    "start": "1568929",
    "end": "1575559"
  },
  {
    "text": "microservices is a whole new challenge just imagine that you have an application that you have written in",
    "start": "1575559",
    "end": "1582039"
  },
  {
    "text": "dotnet that invokes some third-party services so these third-party services",
    "start": "1582039",
    "end": "1587169"
  },
  {
    "text": "may not even run dotnet they may run on Java and expose a REST API if the",
    "start": "1587169",
    "end": "1592960"
  },
  {
    "text": "third-party service let's say change their API and your application is no longer compatible with their new API of",
    "start": "1592960",
    "end": "1599739"
  },
  {
    "text": "course it's going to run error so an how can you trace these errors if you are in",
    "start": "1599739",
    "end": "1605649"
  },
  {
    "text": "work in a lot of services another good example is let's say once in a while",
    "start": "1605649",
    "end": "1611350"
  },
  {
    "text": "some of the service in location times out because the third-party service or",
    "start": "1611350",
    "end": "1617470"
  },
  {
    "text": "your own service times out so how can you trace us this once in awhile a situation that happens across millions",
    "start": "1617470",
    "end": "1624789"
  },
  {
    "text": "of requests that you invoke or make to get some service out of a micro service",
    "start": "1624789",
    "end": "1630609"
  },
  {
    "text": "so there are lot of challenges in tracing across multiple micro services partly because they crosses your",
    "start": "1630609",
    "end": "1637570"
  },
  {
    "text": "application boundaries and you don't have control over what the third-party or your subordinate service provider is",
    "start": "1637570",
    "end": "1645999"
  },
  {
    "text": "providing so let's understand how you can easily debug this kind of an application using a service called AWS",
    "start": "1645999",
    "end": "1653529"
  },
  {
    "text": "extreme so at a place extra is some tooling that we provide for dotnet",
    "start": "1653529",
    "end": "1660970"
  },
  {
    "text": "developers especially that you can easily integrate with existing applications so we provide an SDK that",
    "start": "1660970",
    "end": "1669129"
  },
  {
    "text": "you can use to trace across different service in location it helps you to",
    "start": "1669129",
    "end": "1674830"
  },
  {
    "text": "capture exceptions things like timeouts and then visualize it in a way that you",
    "start": "1674830",
    "end": "1684129"
  },
  {
    "text": "can easily pinpoint where the errors happens shortly I'm going to give you a demo that will showcase the power of AWS",
    "start": "1684129",
    "end": "1691690"
  },
  {
    "text": "extreme and then show you how you can easily integrate it with some applications so how it works is you use",
    "start": "1691690",
    "end": "1703059"
  },
  {
    "text": "our SDK to trace different requests that you use in your",
    "start": "1703059",
    "end": "1709450"
  },
  {
    "text": "application and then the extra agent",
    "start": "1709450",
    "end": "1714620"
  },
  {
    "text": "that is running on the machine or AWS lambda or AWS Amazon Elastic Beanstalk",
    "start": "1714620",
    "end": "1721660"
  },
  {
    "text": "capture these tracers and then send it to a central location and based on a",
    "start": "1721660",
    "end": "1726860"
  },
  {
    "text": "traced ID it can then combine these different tracers coming from your application or from another third-party",
    "start": "1726860",
    "end": "1733940"
  },
  {
    "text": "application into one trace log so that you can easily find what happened when",
    "start": "1733940",
    "end": "1740900"
  },
  {
    "text": "it happens what are the exception being Tron's what are the returns is how long it took to invoke service and then summarize it in",
    "start": "1740900",
    "end": "1749210"
  },
  {
    "text": "a way that you can easily visualize it and then pinpoint where there are happens so let's go for a demo and then",
    "start": "1749210",
    "end": "1757370"
  },
  {
    "text": "see how this works so this demo is based on a simple application called my",
    "start": "1757370",
    "end": "1763910"
  },
  {
    "text": "octopus application so it's written in asp.net MVC code it has Web API and",
    "start": "1763910",
    "end": "1771070"
  },
  {
    "text": "because it's a espírito application of course you can run it on AWS lambda or",
    "start": "1771070",
    "end": "1777440"
  },
  {
    "text": "you can run it on AWS elastic Beanstalk which is our managed version of iOS web",
    "start": "1777440",
    "end": "1784190"
  },
  {
    "text": "services which you can host this application so how this works is I have",
    "start": "1784190",
    "end": "1790520"
  },
  {
    "text": "this asp.net application in this case of course I'm going to run it on AWC lambda function and it's going to invoke some",
    "start": "1790520",
    "end": "1798400"
  },
  {
    "text": "control actions so I have integrated with Amazon API gateway where I expose",
    "start": "1798400",
    "end": "1804080"
  },
  {
    "text": "this website using an API endpoint and so this API endpoint when I invokes it",
    "start": "1804080",
    "end": "1810950"
  },
  {
    "text": "this application invokes Amazon s3 bucket API to list the buckets that I",
    "start": "1810950",
    "end": "1817040"
  },
  {
    "text": "have in my account and it also invokes Amazon sqs or simple queuing services to",
    "start": "1817040",
    "end": "1822530"
  },
  {
    "text": "list down the queues or list down the list to names and then show it this is a",
    "start": "1822530",
    "end": "1830810"
  },
  {
    "text": "simple micro service that invokes - AWS services so let's see how this",
    "start": "1830810",
    "end": "1836450"
  },
  {
    "text": "works and how you can use extra to debug this application I'm in my visual studio I",
    "start": "1836450",
    "end": "1846740"
  },
  {
    "text": "have created a very simple asp.net MVC web application you can find that I have",
    "start": "1846740",
    "end": "1854900"
  },
  {
    "text": "added a few dependencies so they all come as new code packages I added some",
    "start": "1854900",
    "end": "1860710"
  },
  {
    "text": "references for extry nuclear packages if",
    "start": "1860710",
    "end": "1866780"
  },
  {
    "text": "I run this it runs as a normal IRS website of course you can deploy into",
    "start": "1866780",
    "end": "1872929"
  },
  {
    "text": "elastic beanstalk or edit where double is lambda write a simple is website that",
    "start": "1872929",
    "end": "1878570"
  },
  {
    "text": "I created so let's see how I have integrated extra tracing into this",
    "start": "1878570",
    "end": "1886730"
  },
  {
    "text": "application so let's stop this application and if you go into the pages",
    "start": "1886730",
    "end": "1894700"
  },
  {
    "text": "let's go into first the startup class you can find that at the startup I have",
    "start": "1894700",
    "end": "1901780"
  },
  {
    "text": "mentioned that I want to trace us all the requests that is going for sqs and",
    "start": "1901780",
    "end": "1906919"
  },
  {
    "text": "history all right so that's one way to tell x-ray that you need to trace all",
    "start": "1906919",
    "end": "1912919"
  },
  {
    "text": "this information alternately if you want to trace all database services you can",
    "start": "1912919",
    "end": "1918100"
  },
  {
    "text": "say register x-ray for all AWS services like this right so I'm creating all the",
    "start": "1918100",
    "end": "1926900"
  },
  {
    "text": "invocation of AWS services I can inject",
    "start": "1926900",
    "end": "1933400"
  },
  {
    "text": "interfaces as a dependency injection so this is what I'm doing here so if you are using a framework like unity you can",
    "start": "1933400",
    "end": "1941270"
  },
  {
    "text": "also do that so in the logger I have an extension method here and I'm going to",
    "start": "1941270",
    "end": "1948049"
  },
  {
    "text": "call it logger at lambda logger all the other cloud service providers also",
    "start": "1948049",
    "end": "1953090"
  },
  {
    "text": "integrate their locking mechanism in a method like that so we use the same",
    "start": "1953090",
    "end": "1958190"
  },
  {
    "text": "methods that Microsoft provides or extension points that Microsoft provides",
    "start": "1958190",
    "end": "1963740"
  },
  {
    "text": "to add extensions into x-ray so here I'm tracing because I'm going to",
    "start": "1963740",
    "end": "1972700"
  },
  {
    "text": "run this on a lambda function I'm going to trace it at this lambda logger and this is where the root is defined so I",
    "start": "1972700",
    "end": "1980830"
  },
  {
    "text": "mention it as my octopus app so it knows the invocation comes from my octopus app",
    "start": "1980830",
    "end": "1988679"
  },
  {
    "text": "so in the service template you can find",
    "start": "1988679",
    "end": "1994629"
  },
  {
    "text": "that I have enabled the tracing as active so that it will enable the trace",
    "start": "1994629",
    "end": "1999909"
  },
  {
    "text": "sins once I deploy this one into lambda function all right so let's go into of",
    "start": "1999909",
    "end": "2007740"
  },
  {
    "text": "course I can deploy this one into a WC elastic Beanstalk this is yet another iOS web site but in this case I'm going",
    "start": "2007740",
    "end": "2014159"
  },
  {
    "text": "to publish into a SS lambda you can do",
    "start": "2014159",
    "end": "2020039"
  },
  {
    "text": "it from your visual studio itself or if you have a CI CD pipeline you can do it with some command lines so you specify",
    "start": "2020039",
    "end": "2028080"
  },
  {
    "text": "what's the profile you are going to use to which region you are going to publish and what dotnet framework that you are",
    "start": "2028080",
    "end": "2034470"
  },
  {
    "text": "going to use and you click publish so it will zip it up and then publish into a WC lambda so after a while the lambda",
    "start": "2034470",
    "end": "2043830"
  },
  {
    "text": "publication will finish because I have already published this website you can find that it's an upgrade in progress",
    "start": "2043830",
    "end": "2050460"
  },
  {
    "text": "instead of create and after a while the braid will succeed so update is",
    "start": "2050460",
    "end": "2058290"
  },
  {
    "text": "completed now and it gives a URL that I can invoke so let's go into our console",
    "start": "2058290",
    "end": "2066780"
  },
  {
    "text": "and then find where this is created this website has an API endpoint so if I go",
    "start": "2066780",
    "end": "2073829"
  },
  {
    "text": "into Amazon API gateway you can find that there's an endpoint called my octopus app and it has a few stages one",
    "start": "2073829",
    "end": "2083819"
  },
  {
    "text": "for production and one for staging so I'm going for the production endpoint and copy that URL copy this URL and I'm",
    "start": "2083819",
    "end": "2098130"
  },
  {
    "text": "going to open that URL in a browser so like before that you saw this website running on your",
    "start": "2098130",
    "end": "2104460"
  },
  {
    "text": "local machine on local is so this is now running in a service environment and you",
    "start": "2104460",
    "end": "2110130"
  },
  {
    "text": "get the same experience so what I'm going to do now is to invoke a head",
    "start": "2110130",
    "end": "2118520"
  },
  {
    "text": "controller called helper you can find that I'm injecting my dependencies in this case API interfaces to invoke",
    "start": "2118520",
    "end": "2126210"
  },
  {
    "text": "Amazon s3 I'm an Amazon sqs so all our API is are expose as interfaces so if",
    "start": "2126210",
    "end": "2132599"
  },
  {
    "text": "you want to mock them for unit tests you can easily do that so I'm invoking a few",
    "start": "2132599",
    "end": "2137820"
  },
  {
    "text": "AWS services list bucket and list queues so when I invoke that it's invoking some",
    "start": "2137820",
    "end": "2145170"
  },
  {
    "text": "different services where it represent or is simulate an invocation of a micro service so I'm also writing certain",
    "start": "2145170",
    "end": "2152849"
  },
  {
    "text": "parameters into console because I am enable lambda logger all these console right lines are also traced and they",
    "start": "2152849",
    "end": "2160530"
  },
  {
    "text": "will appear in my cloud watch so this is the configuration on are given so let's",
    "start": "2160530",
    "end": "2166320"
  },
  {
    "text": "go into that view the help view where it invokes the method so all what is doing",
    "start": "2166320",
    "end": "2173550"
  },
  {
    "text": "is printing this list of s3 buckets I have into the HTT P page so this is the",
    "start": "2173550",
    "end": "2182310"
  },
  {
    "text": "lam extra X we you that showcase you hey I start my octopus app and it invokes",
    "start": "2182310",
    "end": "2189930"
  },
  {
    "text": "two services sqs and history so I can drill down into this invocation and then",
    "start": "2189930",
    "end": "2197010"
  },
  {
    "text": "see what happens if there are any errors it will showcase you in this case there's no any errors and if I go into",
    "start": "2197010",
    "end": "2203280"
  },
  {
    "text": "this trace you can find that the start where I mention abuse x-ray my octopus",
    "start": "2203280",
    "end": "2209670"
  },
  {
    "text": "app and that's where the root of this stress comes from and then it's invoked to services s3 and SQS you can find the",
    "start": "2209670",
    "end": "2217880"
  },
  {
    "text": "API endpoints that invoked so example if sqs timeout you can find some issues",
    "start": "2217880",
    "end": "2225300"
  },
  {
    "text": "happen there so if I go into my lambda function I can view traces from there",
    "start": "2225300",
    "end": "2232319"
  },
  {
    "text": "also when I publish this it got published under function call my octopus",
    "start": "2232319",
    "end": "2239170"
  },
  {
    "text": "app so if I go into that lambda function you can do some monitoring so here it",
    "start": "2239170",
    "end": "2245740"
  },
  {
    "text": "gives an idea around how this lambda function is in mark in this case it's through API gateway but if you go into",
    "start": "2245740",
    "end": "2253690"
  },
  {
    "text": "the monitoring section of your lambda function you can find things like how",
    "start": "2253690",
    "end": "2259420"
  },
  {
    "text": "many times this lambda function is invoke and also you can go to the logs to capture things like console.writeline",
    "start": "2259420",
    "end": "2267120"
  },
  {
    "text": "so here I'm going into the log that lambda function created and you can find",
    "start": "2267120",
    "end": "2273820"
  },
  {
    "text": "that there are a few entries that it has added so let's see where this hello guys",
    "start": "2273820",
    "end": "2279340"
  },
  {
    "text": "entry actually came from right so everything that you write to the console",
    "start": "2279340",
    "end": "2285370"
  },
  {
    "text": "or everything that you explicitly write to cloud Lodge will appear here so if I",
    "start": "2285370",
    "end": "2293770"
  },
  {
    "text": "go into my code base and then look where this entry call hello guys came from you",
    "start": "2293770",
    "end": "2302200"
  },
  {
    "text": "can find it I guess in the index where I'd happier so you can find that I'm",
    "start": "2302200",
    "end": "2308440"
  },
  {
    "text": "doing a console.writeline call hello guys and that's why it ended up in the cloud watch so in this way you can",
    "start": "2308440",
    "end": "2314770"
  },
  {
    "text": "easily trace any errors that you have you can capture exceptions if you like",
    "start": "2314770",
    "end": "2320550"
  },
  {
    "text": "if there are any errors there are special API endpoints provided for you to capture exception and lock them",
    "start": "2320550",
    "end": "2327460"
  },
  {
    "text": "directly so here if I go into this you",
    "start": "2327460",
    "end": "2334450"
  },
  {
    "text": "can find that the different how long each invocation took and you can easily",
    "start": "2334450",
    "end": "2342160"
  },
  {
    "text": "pinpoint some bad behaving invocations for example if one of the service takes",
    "start": "2342160",
    "end": "2348670"
  },
  {
    "text": "too long to invoke you can trace where that problem happened x-ray provides",
    "start": "2348670",
    "end": "2353920"
  },
  {
    "text": "some ways to filter the entries that you find in its console for example here I'm",
    "start": "2353920",
    "end": "2359860"
  },
  {
    "text": "applying filter condition to filter the URLs that I'm interested in here you can",
    "start": "2359860",
    "end": "2365590"
  },
  {
    "text": "clearly find that there are few invocation in the tray slits that shows",
    "start": "2365590",
    "end": "2371109"
  },
  {
    "text": "about 13 second latency which is clearly unacceptable so if that's the case if it",
    "start": "2371109",
    "end": "2378820"
  },
  {
    "text": "takes about 13 seconds to do this remote sign up seems like there's an issue with",
    "start": "2378820",
    "end": "2384099"
  },
  {
    "text": "that so what you can do is now to go into detail and then explore where this problem happens you can clearly see that",
    "start": "2384099",
    "end": "2392260"
  },
  {
    "text": "in when you dig deep into that trace entry that the Amazon DynamoDB",
    "start": "2392260",
    "end": "2398970"
  },
  {
    "text": "invocation took about twelve point nine second and it's a put item request and",
    "start": "2398970",
    "end": "2405060"
  },
  {
    "text": "maybe there's something bad happening when you try to do some put items so if",
    "start": "2405060",
    "end": "2410740"
  },
  {
    "text": "you go into some more detail around this why this happened you can even trace further here once you go into the",
    "start": "2410740",
    "end": "2418420"
  },
  {
    "text": "segment you can find that when you invoke this put item it has retried the",
    "start": "2418420",
    "end": "2423849"
  },
  {
    "text": "put item invocation for about nine times seems like there's something wrong is",
    "start": "2423849",
    "end": "2429310"
  },
  {
    "text": "happening in this application and you can easily trace where it is happening",
    "start": "2429310",
    "end": "2434339"
  },
  {
    "text": "so do I apply some filtering again for HTTP status 409 where the conflict",
    "start": "2434339",
    "end": "2440680"
  },
  {
    "text": "happens and you can find that there are several entries that you can see with",
    "start": "2440680",
    "end": "2446859"
  },
  {
    "text": "for nine trace right so if you go dig",
    "start": "2446859",
    "end": "2452200"
  },
  {
    "text": "deep into that you can clearly see that with the mark that it gives you with the",
    "start": "2452200",
    "end": "2458260"
  },
  {
    "text": "orange exclamation mark that for these API endpoints something bad is happening",
    "start": "2458260",
    "end": "2464500"
  },
  {
    "text": "and you get the 409 Oh HTTP conflicts errors so if you go deep into that you",
    "start": "2464500",
    "end": "2470170"
  },
  {
    "text": "can find where that exception is happening and of course if you use C sharp API if it is not in the",
    "start": "2470170",
    "end": "2477430"
  },
  {
    "text": "application you can find while in which line that it happened and you can easily",
    "start": "2477430",
    "end": "2482470"
  },
  {
    "text": "pinpoint where the problems are happening so so far we learn about extry",
    "start": "2482470",
    "end": "2488710"
  },
  {
    "text": "and how you can use it to debug distributed application hope you enjoy",
    "start": "2488710",
    "end": "2494859"
  },
  {
    "text": "the session you'll learn about how you can easily integrate your existing login",
    "start": "2494859",
    "end": "2500470"
  },
  {
    "text": "mechanism to use in your dotnet applications with AWS how you can do distributed debugging",
    "start": "2500470",
    "end": "2507220"
  },
  {
    "text": "how you can easily use cloud watch integrated debugging techniques to check",
    "start": "2507220",
    "end": "2513010"
  },
  {
    "text": "and debug complex applications that you may write in your environments thank you",
    "start": "2513010",
    "end": "2520950"
  }
]