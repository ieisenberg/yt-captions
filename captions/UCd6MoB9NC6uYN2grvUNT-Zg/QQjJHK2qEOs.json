[
  {
    "start": "0",
    "end": "33000"
  },
  {
    "text": "welcome to designing microservices with survivalist my name is David Massey I'm",
    "start": "60",
    "end": "6750"
  },
  {
    "text": "a senior product manager on AWS service and today I'm also going to be joined by",
    "start": "6750",
    "end": "12750"
  },
  {
    "text": "Nick Kanani who's a senior director at ng partners and he's going to share",
    "start": "12750",
    "end": "18630"
  },
  {
    "text": "later with us his team experience with server lists and building service micro",
    "start": "18630",
    "end": "24240"
  },
  {
    "text": "services so let's get started but let's",
    "start": "24240",
    "end": "29820"
  },
  {
    "text": "first do some baselining and kind of define what micro service is actually",
    "start": "29820",
    "end": "36440"
  },
  {
    "start": "33000",
    "end": "33000"
  },
  {
    "text": "what this term actually means so micro",
    "start": "36440",
    "end": "41610"
  },
  {
    "text": "services is an architectural approach which advocates for creation of",
    "start": "41610",
    "end": "48410"
  },
  {
    "text": "applications as a suite of independent services that interact with each other",
    "start": "48410",
    "end": "54570"
  },
  {
    "text": "over the Internet typically using REST API",
    "start": "54570",
    "end": "59870"
  },
  {
    "text": "and these services can be and should be managed independently with minimal",
    "start": "59870",
    "end": "67380"
  },
  {
    "text": "amount of central organization moreover",
    "start": "67380",
    "end": "72900"
  },
  {
    "text": "they can be delivered and deployed independently as well",
    "start": "72900",
    "end": "78290"
  },
  {
    "text": "they're scoped as part of under a",
    "start": "78290",
    "end": "83369"
  },
  {
    "text": "bounded context of different business capabilities and a good micro service",
    "start": "83369",
    "end": "92430"
  },
  {
    "text": "should have some characteristics which make it more resilient to failures which makes your entire application lures you",
    "start": "92430",
    "end": "98759"
  },
  {
    "text": "into failures but that doesn't really",
    "start": "98759",
    "end": "105720"
  },
  {
    "start": "103000",
    "end": "103000"
  },
  {
    "text": "tell us about why you want to kind of embark on a journey of implementing and",
    "start": "105720",
    "end": "111509"
  },
  {
    "text": "micro services architecture so let's kind of spend some time talking about",
    "start": "111509",
    "end": "117509"
  },
  {
    "text": "that essentially there are two very high-level goals that you would like to pursue when you're moving away from",
    "start": "117509",
    "end": "125240"
  },
  {
    "text": "having a monolithic architecture going into micro services from the business",
    "start": "125240",
    "end": "132209"
  },
  {
    "text": "perspective you want to increase the pace of your innovation and the time to market to bring no new new",
    "start": "132209",
    "end": "139480"
  },
  {
    "text": "features and new capabilities for your customers from an organizational perspective micro",
    "start": "139480",
    "end": "148900"
  },
  {
    "text": "services encourage and to end ownership which empowers your teams to own the",
    "start": "148900",
    "end": "159549"
  },
  {
    "text": "service end-to-end include from from",
    "start": "159549",
    "end": "165120"
  },
  {
    "text": "development to up to operations to testing and everything that the software",
    "start": "165120",
    "end": "171670"
  },
  {
    "text": "development lifecycle involves and they are free to choose you know the right",
    "start": "171670",
    "end": "178180"
  },
  {
    "text": "tools to actually solve the problems that that that that they're out to solve",
    "start": "178180",
    "end": "186959"
  },
  {
    "text": "now getting to kind of achieving these goals dictates that your micro services",
    "start": "187079",
    "end": "193420"
  },
  {
    "text": "should adhere to some you know high-level architectural pillars and",
    "start": "193420",
    "end": "199799"
  },
  {
    "text": "these are the pillars that we're going to discuss today from a surrealist lens",
    "start": "199799",
    "end": "205049"
  },
  {
    "text": "and those pillars are resilience and how you make your entire application more",
    "start": "205049",
    "end": "210340"
  },
  {
    "text": "resilient and how you make the individual micro services more resilient",
    "start": "210340",
    "end": "216599"
  },
  {
    "text": "scalability is another one and here you really want to make sure that your micro",
    "start": "216720",
    "end": "223389"
  },
  {
    "text": "services are able to scale independently according to the resources and the",
    "start": "223389",
    "end": "229180"
  },
  {
    "text": "traffic that they require instead of scaling the entire application and the",
    "start": "229180",
    "end": "237819"
  },
  {
    "text": "third one is continuous delivery which enables you to deliver changes",
    "start": "237819",
    "end": "243209"
  },
  {
    "text": "frequently but safely and reducing the the cost of of errors",
    "start": "243209",
    "end": "251849"
  },
  {
    "text": "so now kind of let's bring you know server listen to the picture and how all",
    "start": "253410",
    "end": "259079"
  },
  {
    "start": "254000",
    "end": "254000"
  },
  {
    "text": "of this relates to service so essentially with a service approach you",
    "start": "259080",
    "end": "265830"
  },
  {
    "text": "get a lot of the best practices that you want in your micro services out of the box and the mental model with which you",
    "start": "265830",
    "end": "275880"
  },
  {
    "text": "think about service applications very much aligns with the mental model that you want to have for micro services and",
    "start": "275880",
    "end": "283470"
  },
  {
    "text": "so the other best practices that you want to have are much easier to achieve and reason about one point to make",
    "start": "283470",
    "end": "292590"
  },
  {
    "text": "though is server list is definitely is not a silver bullet so you still need to",
    "start": "292590",
    "end": "298340"
  },
  {
    "text": "you know write your code efficiently and diligently and properly log and monitor",
    "start": "298340",
    "end": "305130"
  },
  {
    "text": "your applications and tests and so on so all these still apply",
    "start": "305130",
    "end": "311930"
  },
  {
    "text": "so having kind of set the context for our conversation today let's kind of",
    "start": "311930",
    "end": "318240"
  },
  {
    "text": "start reviewing these pillars and how you can achieve them in a service micro",
    "start": "318240",
    "end": "324990"
  },
  {
    "text": "service and the first one that we're going to talk about is as resilience",
    "start": "324990",
    "end": "331550"
  },
  {
    "text": "when you implement your architecture in as part of in a micro services fashion",
    "start": "333110",
    "end": "339770"
  },
  {
    "text": "they're interacting over the network and network has some intrinsic qualities to",
    "start": "339770",
    "end": "347730"
  },
  {
    "text": "it which include you know that you can't rely on the network being reliable all",
    "start": "347730",
    "end": "353790"
  },
  {
    "text": "the time and you cannot rely on it having you know consistent latencies at",
    "start": "353790",
    "end": "361470"
  },
  {
    "text": "all times and so since these are the characteristics you want to introduce",
    "start": "361470",
    "end": "367110"
  },
  {
    "text": "additional robustness to your micro services and how they interact with each other and these are architect",
    "start": "367110",
    "end": "374850"
  },
  {
    "text": "architecting them for high availability applying throttles for for your micro",
    "start": "374850",
    "end": "381660"
  },
  {
    "text": "services and the calls that they make and employ retries and",
    "start": "381660",
    "end": "386880"
  },
  {
    "text": "time outs these are the essentials of implementing a good distributed",
    "start": "386880",
    "end": "393120"
  },
  {
    "text": "architecture so let's see how that kind of looks in a service world when you",
    "start": "393120",
    "end": "404100"
  },
  {
    "text": "build your applications and micro services on lambda you essentially get high availability out of the box a lot",
    "start": "404100",
    "end": "411030"
  },
  {
    "text": "of the things that a lot of the best practices and things you need to",
    "start": "411030",
    "end": "416450"
  },
  {
    "text": "implement in a traditional server full applications like you know implementing",
    "start": "416450",
    "end": "424050"
  },
  {
    "text": "your application to work across multiple availability zones and introducing",
    "start": "424050",
    "end": "430230"
  },
  {
    "text": "additional redundancy lambda does all of that for you and that applies both to",
    "start": "430230",
    "end": "435780"
  },
  {
    "text": "lambda the service and the functions that it runs for you so it runs a",
    "start": "435780",
    "end": "442790"
  },
  {
    "text": "default across in each AWS region across all the availability zones and has",
    "start": "442790",
    "end": "449700"
  },
  {
    "text": "additional redundancy and resiliency so",
    "start": "449700",
    "end": "454880"
  },
  {
    "text": "that's great when you run in one region but if you want to deploy your stack",
    "start": "454880",
    "end": "460290"
  },
  {
    "text": "globally there are some additional things that you might want to consider in order to have a truly global",
    "start": "460290",
    "end": "467400"
  },
  {
    "start": "466000",
    "end": "466000"
  },
  {
    "text": "deployment now let me share with you how you get it can get to a global",
    "start": "467400",
    "end": "473130"
  },
  {
    "text": "deployment with serverless application so in this diagram what you see is that we have a micro service which is",
    "start": "473130",
    "end": "480210"
  },
  {
    "text": "composed of an API gateway HTTP endpoint which is backed by a lambda function and",
    "start": "480210",
    "end": "488000"
  },
  {
    "text": "what we have here is a micro service that is deployed it's the same micro",
    "start": "488000",
    "end": "493470"
  },
  {
    "text": "service deployed across two regions US East one and US West two now here we're",
    "start": "493470",
    "end": "502800"
  },
  {
    "text": "utilizing a feature that we just recently released an API gateway which",
    "start": "502800",
    "end": "507930"
  },
  {
    "text": "allows you to set a custom domain which will be integrated with both regional",
    "start": "507930",
    "end": "515430"
  },
  {
    "text": "end points of HTTP of API gateway and you can see here that you know we",
    "start": "515430",
    "end": "522700"
  },
  {
    "text": "have DNS entries in our route 53 set up which point our custom domain which is",
    "start": "522700",
    "end": "530140"
  },
  {
    "text": "called hello world API dot replaced with your own company name we have that",
    "start": "530140",
    "end": "535830"
  },
  {
    "text": "configured for both the u.s. East one and the u.s. West two regions so what",
    "start": "535830",
    "end": "543310"
  },
  {
    "text": "does that give us essentially now we can use a routing policies within route 53",
    "start": "543310",
    "end": "550620"
  },
  {
    "text": "that are available there so you can apply you know latency based best",
    "start": "550620",
    "end": "557110"
  },
  {
    "text": "latency based routing you can apply weight weight based routing and it will",
    "start": "557110",
    "end": "564460"
  },
  {
    "text": "distribute the calls of according to the routing that you define so now we have",
    "start": "564460",
    "end": "572710"
  },
  {
    "text": "you know truly globally deployed server less microservice but it's still nothing",
    "start": "572710",
    "end": "580600"
  },
  {
    "text": "full picture we we now want to introduce additional resiliency across AWS regions",
    "start": "580600",
    "end": "587290"
  },
  {
    "text": "for a case where in one of the regions are micro service is experiencing",
    "start": "587290",
    "end": "592800"
  },
  {
    "text": "disruption and availability so how do we go about that well",
    "start": "592800",
    "end": "600550"
  },
  {
    "start": "600000",
    "end": "600000"
  },
  {
    "text": "route 53 now allows us to set health checks across the different endpoints so",
    "start": "600550",
    "end": "607210"
  },
  {
    "text": "it will ping each micro service in inch of the regions with a request and expect",
    "start": "607210",
    "end": "613990"
  },
  {
    "text": "and expect some sort of a response and if the responses as expected then it",
    "start": "613990",
    "end": "619000"
  },
  {
    "text": "concludes that the service is healthy and what you see here is a snippet from",
    "start": "619000",
    "end": "625570"
  },
  {
    "text": "a CloudFormation template which sets that health check and as we have that",
    "start": "625570",
    "end": "632920"
  },
  {
    "text": "now whenever you know one of the services doesn't behave as expected the",
    "start": "632920",
    "end": "638860"
  },
  {
    "text": "traffic will be routed to services that are deployed in other regions so here we",
    "start": "638860",
    "end": "646330"
  },
  {
    "text": "have implemented additional resiliency on top of what we get with just a great",
    "start": "646330",
    "end": "651339"
  },
  {
    "text": "regional deployment and we have an active-active failover setup here the next best practice is",
    "start": "651339",
    "end": "660810"
  },
  {
    "start": "660000",
    "end": "660000"
  },
  {
    "text": "throttling and let's first kind of talk about why do we even need throttling in",
    "start": "660810",
    "end": "668770"
  },
  {
    "text": "a microservices set up we have micro-services interacting with other micro services over the network and the",
    "start": "668770",
    "end": "678550"
  },
  {
    "text": "micro service that you own might be talking to micro services that are owned by completely other teams and these",
    "start": "678550",
    "end": "685450"
  },
  {
    "text": "services have different guarantees on",
    "start": "685450",
    "end": "690550"
  },
  {
    "text": "the amount of traffic that they can serve so as an owner of the micro",
    "start": "690550",
    "end": "697300"
  },
  {
    "text": "service you want to make sure that your service doesn't get overwhelmed by a sudden influx of requests and the in",
    "start": "697300",
    "end": "705010"
  },
  {
    "text": "order the way to go about it is to implement throttle throttling logic within the micro service in this example",
    "start": "705010",
    "end": "714160"
  },
  {
    "text": "that I'm showing we have a front-end service which interacts with other three services which all may have varying",
    "start": "714160",
    "end": "721240"
  },
  {
    "text": "levels of traffic that they can support so you know in a traditional sense",
    "start": "721240",
    "end": "729250"
  },
  {
    "start": "727000",
    "end": "727000"
  },
  {
    "text": "when you implement your micro services throttling is hard to instrument both on",
    "start": "729250",
    "end": "736270"
  },
  {
    "text": "the client logic which makes the calls and the downstream service that that",
    "start": "736270",
    "end": "743170"
  },
  {
    "text": "receives them and let's go over some of the things that you need to implement in",
    "start": "743170",
    "end": "749710"
  },
  {
    "text": "order to have throttling so on the back end you want to manage API keys to keep",
    "start": "749710",
    "end": "754990"
  },
  {
    "text": "track of the users that are calling your api's moreover for each user you want to",
    "start": "754990",
    "end": "764530"
  },
  {
    "text": "have measurements of the steady rates that they make and kind of be able to",
    "start": "764530",
    "end": "769810"
  },
  {
    "text": "put limitation on that and also for burst rates and if you really want to go",
    "start": "769810",
    "end": "778360"
  },
  {
    "text": "granular about it then you want to have all these capabilities for each method of your API",
    "start": "778360",
    "end": "785250"
  },
  {
    "text": "on the client side you want to identify when the cold calls you make get",
    "start": "785630",
    "end": "790670"
  },
  {
    "text": "throttled and adjusted behavior accordingly so it's not an easy task but",
    "start": "790670",
    "end": "796370"
  },
  {
    "text": "when you build on top of surveil as you know this comes out of the box and in",
    "start": "796370",
    "end": "802040"
  },
  {
    "start": "797000",
    "end": "797000"
  },
  {
    "text": "this example you know what you're seeing is how we can define a usage plan with",
    "start": "802040",
    "end": "807560"
  },
  {
    "text": "an API gateway which does all of that for you as part of the configuration of",
    "start": "807560",
    "end": "813380"
  },
  {
    "text": "your API so you can set throttling for the overall request rate and that kind",
    "start": "813380",
    "end": "818870"
  },
  {
    "text": "of burst buckets and you can also set quotas for a period of time and you can",
    "start": "818870",
    "end": "828350"
  },
  {
    "text": "do so also you know very granular lis across different API stages that you",
    "start": "828350",
    "end": "833540"
  },
  {
    "text": "have so that's good kind of for for the downstream service how how it can",
    "start": "833540",
    "end": "840019"
  },
  {
    "text": "protect itself but then how do we monitor you know whether the calls that",
    "start": "840019",
    "end": "847940"
  },
  {
    "start": "842000",
    "end": "842000"
  },
  {
    "text": "we make and what the rate of those calls that get throttled and here you can use",
    "start": "847940",
    "end": "854959"
  },
  {
    "text": "AWS x-ray for generating a service map of that illustrates you know the entire",
    "start": "854959",
    "end": "863920"
  },
  {
    "text": "your entire distributed application and",
    "start": "863920",
    "end": "868959"
  },
  {
    "text": "in this example we have a very simple setup where we have a lambda function",
    "start": "868959",
    "end": "873980"
  },
  {
    "text": "calling to a dynamodb table and amazon recognition so this is just an example",
    "start": "873980",
    "end": "881660"
  },
  {
    "text": "of a service map that you can see and it shows us you know very useful information on you know average Layton",
    "start": "881660",
    "end": "889279"
  },
  {
    "text": "sees that calls take and a whole bunch",
    "start": "889279",
    "end": "894500"
  },
  {
    "text": "of other very very good information but in this example what I want to draw your attention to is kind of the purple part",
    "start": "894500",
    "end": "901730"
  },
  {
    "text": "of the calls that are made to recognition DynamoDB which are",
    "start": "901730",
    "end": "908230"
  },
  {
    "text": "essentially which represent throttle calls so you can now understand that you have an issue with your dynamodb table",
    "start": "908230",
    "end": "917270"
  },
  {
    "text": "which throttles the requests that are made to it and you can then take action to remediate that for example one thing",
    "start": "917270",
    "end": "924740"
  },
  {
    "text": "you can do is increase the the capacity the the read capacity of your dynamodb",
    "start": "924740",
    "end": "931280"
  },
  {
    "text": "table to make sure calls are successful",
    "start": "931280",
    "end": "936760"
  },
  {
    "start": "938000",
    "end": "938000"
  },
  {
    "text": "the next topic we're going to talk about is how you set write timeouts and retries and again going back to my",
    "start": "938650",
    "end": "945440"
  },
  {
    "text": "earlier point about network not being reliable that you know requires you to",
    "start": "945440",
    "end": "951200"
  },
  {
    "text": "implement both timeouts and retries without setting any timeouts your",
    "start": "951200",
    "end": "956420"
  },
  {
    "text": "application might just hang on they call and on a response that will never arrive",
    "start": "956420",
    "end": "962260"
  },
  {
    "text": "if you set the timeouts for too short of a period of time then you might you know",
    "start": "962260",
    "end": "968140"
  },
  {
    "text": "discard or retry for responses that that are arriving so it's important to get",
    "start": "968140",
    "end": "974390"
  },
  {
    "text": "that right and there are some best",
    "start": "974390",
    "end": "979670"
  },
  {
    "text": "practices to how you want to go about it it's very hard to determine what is the",
    "start": "979670",
    "end": "986420"
  },
  {
    "text": "optimal timeout that you want to have as you deploy your applications to production it's something that it's very",
    "start": "986420",
    "end": "993350"
  },
  {
    "text": "hard to even test in a staging environment because the way network",
    "start": "993350",
    "end": "999050"
  },
  {
    "text": "behaves in production is different so the best practice here is really to vlog",
    "start": "999050",
    "end": "1004600"
  },
  {
    "text": "diligently set default timeouts that look you know sort of okay to you at",
    "start": "1004600",
    "end": "1012460"
  },
  {
    "text": "start and then log diligently in when timeouts occur and adjust the behavior",
    "start": "1012460",
    "end": "1017470"
  },
  {
    "text": "of your application accordingly and for",
    "start": "1017470",
    "end": "1022870"
  },
  {
    "text": "for retry and then for retries you you want to have a retries that employ",
    "start": "1022870",
    "end": "1028870"
  },
  {
    "text": "exponential back-off so you do not overwhelm the services that you're",
    "start": "1028870",
    "end": "1036189"
  },
  {
    "text": "making calls to now when you employ timeouts and retries duplicates",
    "start": "1036190",
    "end": "1042069"
  },
  {
    "text": "duplicate requests might arrive - to your micro service and you want to be",
    "start": "1042070",
    "end": "1047230"
  },
  {
    "text": "prepared for that - so you'll want to have some sort of logic that deals with that whether you know you",
    "start": "1047230",
    "end": "1052390"
  },
  {
    "text": "make some you apply some IDs to request that that you see or any other logic",
    "start": "1052390",
    "end": "1059380"
  },
  {
    "text": "that does that and again let's kind of apply everything that we discussed so",
    "start": "1059380",
    "end": "1066370"
  },
  {
    "text": "far on timeouts and retries for serverless and how that looks in a service world",
    "start": "1066370",
    "end": "1072570"
  },
  {
    "start": "1067000",
    "end": "1067000"
  },
  {
    "text": "so what lambda you can actually set timeouts for your functions as part of",
    "start": "1072570",
    "end": "1077590"
  },
  {
    "text": "the configuration of your of your function and what that gives you is that",
    "start": "1077590",
    "end": "1082720"
  },
  {
    "text": "now you don't have to have that as part of your code so you can keep good",
    "start": "1082720",
    "end": "1088390"
  },
  {
    "text": "hygiene inside your code where you know this this kind of orchestration logic is",
    "start": "1088390",
    "end": "1095710"
  },
  {
    "text": "moved to the configuration part so your code is like maintains good readability",
    "start": "1095710",
    "end": "1104710"
  },
  {
    "text": "and you can focus on writing you know business logic which it differentiates your application when you use the",
    "start": "1104710",
    "end": "1113590"
  },
  {
    "text": "asynchronous and vacation mode for lambda and this is a mode which you know you can use with the API is that lambda",
    "start": "1113590",
    "end": "1120760"
  },
  {
    "text": "provides or also are associated with some of the kind of very popular event sources at lambda supports like s 3 and",
    "start": "1120760",
    "end": "1127779"
  },
  {
    "text": "s and s so for the asynchronous and vocation mode you get retries out of the",
    "start": "1127779",
    "end": "1135760"
  },
  {
    "text": "box so if a message is not processed the first time lambda will keep retrying on",
    "start": "1135760",
    "end": "1141610"
  },
  {
    "text": "up to three times until it is successful and moreover you can then set that",
    "start": "1141610",
    "end": "1148630"
  },
  {
    "text": "letter queues for messages that weren't processed successfully and discard them there and then said read rive policies",
    "start": "1148630",
    "end": "1155799"
  },
  {
    "text": "for that that letter Q to kind of process those events as well",
    "start": "1155799",
    "end": "1162148"
  },
  {
    "text": "now if you want to have you know a very",
    "start": "1165510",
    "end": "1170770"
  },
  {
    "text": "elaborate orchestration of your different micro-services and lambda functions you can use things like AWS",
    "start": "1170770",
    "end": "1178180"
  },
  {
    "text": "dev functions for that and and this is really kind of building on that",
    "start": "1178180",
    "end": "1183910"
  },
  {
    "text": "capability of you know focusing on business logic and abstracting away",
    "start": "1183910",
    "end": "1189870"
  },
  {
    "text": "State and orchestration to to be something separate that is managed",
    "start": "1189870",
    "end": "1195940"
  },
  {
    "text": "separately in this particular example what we see is a create account flow",
    "start": "1195940",
    "end": "1202930"
  },
  {
    "text": "where a user tries to create an account and if the user is successful then you",
    "start": "1202930",
    "end": "1208420"
  },
  {
    "text": "send a welcome email an issue of those return of rectangular nodes is actually lambda function which only focuses on",
    "start": "1208420",
    "end": "1215710"
  },
  {
    "text": "that you know very specific business logic now if a welcome email if a create",
    "start": "1215710",
    "end": "1223000"
  },
  {
    "text": "account attempt is failed that the step function state machine will invoke a",
    "start": "1223000",
    "end": "1228520"
  },
  {
    "text": "catch clause which then would run the suggest account name a function which",
    "start": "1228520",
    "end": "1233860"
  },
  {
    "text": "would suggest the user a valid account me so you can see we have a fairly",
    "start": "1233860",
    "end": "1239020"
  },
  {
    "text": "elaborate orchestration here which has nothing to do with our code and is managed separately so we talked about",
    "start": "1239020",
    "end": "1250330"
  },
  {
    "text": "kind of resiliency of reliability and the second player we're going to discuss now is scalability and as I mentioned",
    "start": "1250330",
    "end": "1257770"
  },
  {
    "text": "previously the characteristic that you want your application to have is that",
    "start": "1257770",
    "end": "1262990"
  },
  {
    "text": "each micro service can scale independently and again discussing that",
    "start": "1262990",
    "end": "1270100"
  },
  {
    "text": "in the service context that again comes something that the that you get you know",
    "start": "1270100",
    "end": "1275260"
  },
  {
    "text": "as an inbuilt capability if you have your micro services implemented as lambda functions then each lambda",
    "start": "1275260",
    "end": "1283030"
  },
  {
    "text": "function will get its own you know scaling behavior that comes with",
    "start": "1283030",
    "end": "1289290"
  },
  {
    "text": "built-in metrics and logging and so you",
    "start": "1289290",
    "end": "1295090"
  },
  {
    "text": "know this is a very desirable state that as you get started all of that comes built-in now lambda will scale according",
    "start": "1295090",
    "end": "1308679"
  },
  {
    "text": "to the number of events that it receives and it will do so automatically on your own on your behalf so you never get to",
    "start": "1308679",
    "end": "1317350"
  },
  {
    "text": "pay for Idol because you know each lambda invocation actually does some work but that scaling behavior has some",
    "start": "1317350",
    "end": "1327130"
  },
  {
    "text": "characteristics which I want to discuss with you because it might empower you to have some additional tools and a good",
    "start": "1327130",
    "end": "1335620"
  },
  {
    "text": "mental model to improve the performance of your service micro-services so how",
    "start": "1335620",
    "end": "1344140"
  },
  {
    "text": "does actually a lambda scale lambda functions essentially architected on a",
    "start": "1344140",
    "end": "1352470"
  },
  {
    "text": "container architecture that is abstracted away from you so you do not",
    "start": "1352470",
    "end": "1360040"
  },
  {
    "text": "need to kind of manage any of that logic but when a new event comes in into your",
    "start": "1360040",
    "end": "1370890"
  },
  {
    "text": "lambda function it will try to process it on one of the containers that it used",
    "start": "1370890",
    "end": "1376570"
  },
  {
    "text": "to process previous events and between invocations of a function it will",
    "start": "1376570",
    "end": "1383620"
  },
  {
    "text": "usually freeze those containers for some time and and keep them in anticipation",
    "start": "1383620",
    "end": "1390250"
  },
  {
    "text": "that more events will time it if you are now creating a completely new function",
    "start": "1390250",
    "end": "1396309"
  },
  {
    "text": "or a version of a function or your application suddenly sees a big scale-up event where lambda does not have",
    "start": "1396309",
    "end": "1405160"
  },
  {
    "text": "sufficient number of worm containers to process those it will create a new",
    "start": "1405160",
    "end": "1410710"
  },
  {
    "text": "container the former case that I described where it uses an existing",
    "start": "1410710",
    "end": "1416740"
  },
  {
    "text": "container we will refer to as a warm start and the latter case would call it",
    "start": "1416740",
    "end": "1423160"
  },
  {
    "text": "a cold start and there is some misconception when I talk to customers",
    "start": "1423160",
    "end": "1428950"
  },
  {
    "text": "about the those two and the misconception is that",
    "start": "1428950",
    "end": "1434659"
  },
  {
    "text": "customers kind of sometimes think that coal starts you know is a big thing and has a profound impact but actually you",
    "start": "1434659",
    "end": "1442760"
  },
  {
    "text": "know the best majority of the unifications for a application that has any meaningful traffic well it is rolled",
    "start": "1442760",
    "end": "1450320"
  },
  {
    "text": "in worm starts so this is really an area where you want to put your focus on improving the performance of your",
    "start": "1450320",
    "end": "1456409"
  },
  {
    "text": "applications but there are some things",
    "start": "1456409",
    "end": "1462830"
  },
  {
    "text": "to know about whole charts as well so let's kind of look at the anatomy of a coaster so what happens during upholster",
    "start": "1462830",
    "end": "1471039"
  },
  {
    "text": "lambda the service will download the code into the newly provision container",
    "start": "1471039",
    "end": "1476299"
  },
  {
    "text": "so it will download the code and start the container and then it will initialize the runtime on which that",
    "start": "1476299",
    "end": "1482480"
  },
  {
    "text": "runs and run all the global scope initialization included in your code and",
    "start": "1482480",
    "end": "1489460"
  },
  {
    "text": "only then it will invoke the your handler code and that's kind of where your business logic lies so I'm telling",
    "start": "1489460",
    "end": "1498980"
  },
  {
    "text": "you oldest because now I'm one of sure share with you some best practices on optimizing the performance of your",
    "start": "1498980",
    "end": "1505900"
  },
  {
    "text": "applications for us both for cold starts and warm starts so let's start with discussing cold starts and the things",
    "start": "1505900",
    "end": "1512030"
  },
  {
    "text": "you can do there the theme here really is that you want to minimize the the",
    "start": "1512030",
    "end": "1521210"
  },
  {
    "text": "complexity of the dependencies that you've put as part of your dependent deployment packages one example for",
    "start": "1521210",
    "end": "1530270"
  },
  {
    "text": "compiled languages such as Java and.net would be to use the modularity of the AWS SDK which allows you to import only",
    "start": "1530270",
    "end": "1538760"
  },
  {
    "text": "the modules that you actually use in your function so as an example if you use only s3 if you only call to s3 from",
    "start": "1538760",
    "end": "1550070"
  },
  {
    "text": "your function then you only need those libraries to be improved interior deployment package by doing so you can",
    "start": "1550070",
    "end": "1558440"
  },
  {
    "text": "shave off the size of your deployment package from you know hundreds of hundreds of megabytes or so",
    "start": "1558440",
    "end": "1564059"
  },
  {
    "text": "- you know single-digit numbers and that would allow you know a faster download",
    "start": "1564059",
    "end": "1570870"
  },
  {
    "text": "time for for your code and also improved the initialization time building on that",
    "start": "1570870",
    "end": "1578580"
  },
  {
    "text": "you really want to reduce kind of the complexity of the initialization of your code so instead of using you know",
    "start": "1578580",
    "end": "1584880"
  },
  {
    "text": "heavyweight frameworks like spring again in the Java world for dependency",
    "start": "1584880",
    "end": "1591360"
  },
  {
    "text": "injection you might want to use something lightweight like dagger instead so that's not a way to go about",
    "start": "1591360",
    "end": "1599419"
  },
  {
    "text": "so we talked about how you can improve your cold start behavior let's don't",
    "start": "1599419",
    "end": "1604500"
  },
  {
    "text": "talk about warm start because that's really the the common case and here what",
    "start": "1604500",
    "end": "1610830"
  },
  {
    "text": "do you really want to make sure that within your handler code the one that gets invoked across your invocations you",
    "start": "1610830",
    "end": "1619049"
  },
  {
    "text": "keep that code as lightweight as possible and you don't perform any initialization that can be done prior I",
    "start": "1619049",
    "end": "1627529"
  },
  {
    "text": "shared with you kind of the container reuse strategy that lambda has and that",
    "start": "1627529",
    "end": "1637919"
  },
  {
    "text": "that gives you a lot of capability to keep kind of soft state within your",
    "start": "1637919",
    "end": "1643669"
  },
  {
    "text": "within your code within your global scope code so things like you know global variables or establishing",
    "start": "1643669",
    "end": "1651179"
  },
  {
    "text": "connections to databases or connections to an HTTP endpoint all those should be",
    "start": "1651179",
    "end": "1657179"
  },
  {
    "text": "done outside of your handler code and then within the handler code you only check that this is this initialization",
    "start": "1657179",
    "end": "1664020"
  },
  {
    "text": "is still valid nor that connection is still valid and only re-establish that if necessary",
    "start": "1664020",
    "end": "1672799"
  },
  {
    "text": "so we talked about scaling and they hope now you have kind of more tools to apply",
    "start": "1677220",
    "end": "1683799"
  },
  {
    "text": "some performance improvements to your service microservices the third pillar",
    "start": "1683799",
    "end": "1688990"
  },
  {
    "text": "that I'd like to talk about is continuous delivery and this is really the core of micro services because the",
    "start": "1688990",
    "end": "1694809"
  },
  {
    "text": "entire purpose is to deliver changes more rapidly and increase the pace of innovation and as you go about can you",
    "start": "1694809",
    "end": "1704350"
  },
  {
    "text": "know instrumenting is service instrumenting the process continuous delivery process for your micro service",
    "start": "1704350",
    "end": "1711059"
  },
  {
    "text": "you want you might want to consider four milestones against which you want to measure you know how good your process",
    "start": "1711059",
    "end": "1717850"
  },
  {
    "start": "1713000",
    "end": "1713000"
  },
  {
    "text": "is now let's quickly go over those milestones first your process should be",
    "start": "1717850",
    "end": "1724210"
  },
  {
    "text": "the way you model your application or micro service and the way that you think",
    "start": "1724210",
    "end": "1729519"
  },
  {
    "text": "about your deployment process should be relatively easy to interpret you also",
    "start": "1729519",
    "end": "1736720"
  },
  {
    "text": "want to make sure that you are making frequent changes and do so in small",
    "start": "1736720",
    "end": "1742210"
  },
  {
    "text": "batches and those should have scoped impact to reduce risk of bad changes and",
    "start": "1742210",
    "end": "1750179"
  },
  {
    "text": "finally to bring it all together you want to automate the entire process so",
    "start": "1750179",
    "end": "1755559"
  },
  {
    "text": "how can we achieve all these four milestones minister bless my CRO service",
    "start": "1755559",
    "end": "1761580"
  },
  {
    "text": "so let's talk about that and start with the first milestone and there I want to",
    "start": "1761580",
    "end": "1767110"
  },
  {
    "text": "talk to you about Sam which is this cute squirrel but it's also the service",
    "start": "1767110",
    "end": "1772299"
  },
  {
    "text": "application model and the service application model lets you have a template where you can define all the",
    "start": "1772299",
    "end": "1780750"
  },
  {
    "text": "resources that are involved in building your micro service this framework is",
    "start": "1780750",
    "end": "1791820"
  },
  {
    "text": "supported by cloud formation so once you template eyes your application and you",
    "start": "1791820",
    "end": "1798820"
  },
  {
    "text": "can also then version it and share it with with other teams you can also use",
    "start": "1798820",
    "end": "1804549"
  },
  {
    "text": "cloud formation as the deployment engine for your service applique",
    "start": "1804549",
    "end": "1810960"
  },
  {
    "text": "so I talked a little bit at high level but here's an example of how sem",
    "start": "1812399",
    "end": "1817659"
  },
  {
    "text": "template can look like this time template really defines you know basic micro services a micro service which",
    "start": "1817659",
    "end": "1824590"
  },
  {
    "text": "involves in lambda function connected to",
    "start": "1824590",
    "end": "1829690"
  },
  {
    "text": "an API gate gateway endpoint and a dynamodb table and here you see that you",
    "start": "1829690",
    "end": "1837460"
  },
  {
    "text": "know it's very digestible easy to inspect and it defines all the properties of that micro service",
    "start": "1837460",
    "end": "1843820"
  },
  {
    "text": "including where the code for it lives what is the runtime that is used to run",
    "start": "1843820",
    "end": "1848980"
  },
  {
    "text": "your lambda function what are the I M policies that it requires what is the",
    "start": "1848980",
    "end": "1854619"
  },
  {
    "text": "integration type that it has with event source which is API gateway endpoint and",
    "start": "1854619",
    "end": "1863049"
  },
  {
    "text": "they also define your Dynamo table and going back to my point now now this is",
    "start": "1863049",
    "end": "1869470"
  },
  {
    "text": "something that you can really version and as you implement additional changes and add additional resources to it then",
    "start": "1869470",
    "end": "1875649"
  },
  {
    "text": "that can be captured in one place so now we can put a check on that milestone",
    "start": "1875649",
    "end": "1882419"
  },
  {
    "text": "let's now look at how we can deliver changes frequently and in small patches and here we meet our old friend the",
    "start": "1882419",
    "end": "1890320"
  },
  {
    "text": "squirrel again but here this is a part of some local which is a local framework",
    "start": "1890320",
    "end": "1899049"
  },
  {
    "text": "for you to test your applications and micro services on your workstation",
    "start": "1899049",
    "end": "1904590"
  },
  {
    "text": "before you move them to the cloud what this framework gives you is the ability",
    "start": "1904590",
    "end": "1910989"
  },
  {
    "text": "to test your functions in a environment that has high fidelity to the execution",
    "start": "1910989",
    "end": "1917139"
  },
  {
    "text": "environment of the cloud lambda and do all the testing there before you're",
    "start": "1917139",
    "end": "1924279"
  },
  {
    "text": "ready to perform and deployment to the cloud and it comes with a lot of kind of",
    "start": "1924279",
    "end": "1930279"
  },
  {
    "text": "capabilities that emulate the actual Cloudland of behavior like timeouts and",
    "start": "1930279",
    "end": "1935950"
  },
  {
    "text": "memory limits and runtimes and also supports API gateway for",
    "start": "1935950",
    "end": "1942530"
  },
  {
    "text": "the proxy integration type of API in gateway and so as you test your function",
    "start": "1942530",
    "end": "1950410"
  },
  {
    "text": "you can then access logs locally on your workstation and it really iterate very rapidly that way great so the third the",
    "start": "1950410",
    "end": "1964490"
  },
  {
    "text": "third thing that I want to talk to you is now how can you have scoped how you",
    "start": "1964490",
    "end": "1971120"
  },
  {
    "text": "can make changes that have scoped impact here I'm really excited to share with",
    "start": "1971120",
    "end": "1977810"
  },
  {
    "start": "1976000",
    "end": "1976000"
  },
  {
    "text": "you a feature that is coming soon to AWS lambda and by soon I mean later today",
    "start": "1977810",
    "end": "1985390"
  },
  {
    "text": "which allows you to define pre assigned",
    "start": "1985390",
    "end": "1991150"
  },
  {
    "text": "race with which traffic will be routed to your versions of your function so we",
    "start": "1991150",
    "end": "2000220"
  },
  {
    "text": "already have a concept in lambda which is called aliases and aliases really a",
    "start": "2000220",
    "end": "2005680"
  },
  {
    "text": "mapping to a certain version of your function so just as an example you can",
    "start": "2005680",
    "end": "2011710"
  },
  {
    "text": "have a prodigious which points to a certain version of your function and then you have a staging alias which",
    "start": "2011710",
    "end": "2018880"
  },
  {
    "text": "points to another version but before",
    "start": "2018880",
    "end": "2024720"
  },
  {
    "text": "something that you had to do when you deployed and wanted to deploy a new version to production is that you had to",
    "start": "2024720",
    "end": "2031450"
  },
  {
    "text": "go all in you had to route all the traffic to the new version to which that alias points to with this feature you",
    "start": "2031450",
    "end": "2039340"
  },
  {
    "text": "can now point to two versions of your function and as you roll out new",
    "start": "2039340",
    "end": "2045160"
  },
  {
    "text": "versions of functions you can assign specific percentage of how much of the",
    "start": "2045160",
    "end": "2050679"
  },
  {
    "text": "traffic will now be routed to it and with this capability you can employ some",
    "start": "2050679",
    "end": "2058388"
  },
  {
    "text": "of the you know deployment best practices such as Bluegreen deployments or canary deployments and so on so I",
    "start": "2058389",
    "end": "2067510"
  },
  {
    "text": "talked a lot but I know when I kind of show you how that actually looks like so",
    "start": "2067510",
    "end": "2072690"
  },
  {
    "text": "in this example we have a function called my function and an alias and we",
    "start": "2072690",
    "end": "2079870"
  },
  {
    "text": "have only one version of that function and we have an alias which points to",
    "start": "2079870",
    "end": "2084879"
  },
  {
    "text": "that version is called my alias sorry and now we iterate on on our function",
    "start": "2084880",
    "end": "2093550"
  },
  {
    "text": "and we add some additional capabilities to it and I want to promote that that",
    "start": "2093550",
    "end": "2100600"
  },
  {
    "text": "version so what do we choose we update the function code and we published that as a new version of our function and so",
    "start": "2100600",
    "end": "2107980"
  },
  {
    "text": "far it's all kind of familiar lambda but that third API call that you see here is",
    "start": "2107980",
    "end": "2113730"
  },
  {
    "text": "what this feature is all about so now we say to our alias point to version number",
    "start": "2113730",
    "end": "2120700"
  },
  {
    "text": "two and make 5% of the traffic that you",
    "start": "2120700",
    "end": "2125710"
  },
  {
    "text": "see be routed to that specific version and now you can really monitor your",
    "start": "2125710",
    "end": "2132820"
  },
  {
    "text": "lambda function for any increased error rates and as you gain more confidence",
    "start": "2132820",
    "end": "2138330"
  },
  {
    "text": "with how that new version performs I'll route more and more traffic to it until",
    "start": "2138330",
    "end": "2146430"
  },
  {
    "text": "your entire all of the traffic is routed to the newer version great so now let's",
    "start": "2146430",
    "end": "2158350"
  },
  {
    "text": "kind of see how that all comes together in a process and how you can automate",
    "start": "2158350",
    "end": "2164260"
  },
  {
    "text": "your deployments fully and here I want",
    "start": "2164260",
    "end": "2169780"
  },
  {
    "text": "to talk to you about using AWS code pipeline to build robust pipelines for",
    "start": "2169780",
    "end": "2178030"
  },
  {
    "text": "deploying your service micro services so",
    "start": "2178030",
    "end": "2183120"
  },
  {
    "text": "we already talked about how with some templates you can now kind of version",
    "start": "2183120",
    "end": "2188320"
  },
  {
    "text": "them and by putting them in a code repository along with the function code",
    "start": "2188320",
    "end": "2194550"
  },
  {
    "text": "and then connecting them to your delivery pipeline what will happen in",
    "start": "2194550",
    "end": "2200410"
  },
  {
    "text": "that situation is that with each commit that you make to your code it will trigger an automated run of the pipeline",
    "start": "2200410",
    "end": "2208140"
  },
  {
    "text": "deploy your coat to the different environments and you have you can have multiple environments such as a beta",
    "start": "2208140",
    "end": "2214680"
  },
  {
    "text": "environment or staging and environment reduction environment and a typical flow",
    "start": "2214680",
    "end": "2220680"
  },
  {
    "text": "of that would be that your code and the Sun template will be built and packaged",
    "start": "2220680",
    "end": "2227700"
  },
  {
    "text": "and you can have you know multiple options there and you can have you can",
    "start": "2227700",
    "end": "2233400"
  },
  {
    "text": "connect your Jenkins to work as part of your pipeline or you can use a fully",
    "start": "2233400",
    "end": "2238920"
  },
  {
    "text": "managed service such as AWS code built to compile build and test unit test your",
    "start": "2238920",
    "end": "2245370"
  },
  {
    "text": "code and then package it and then across the different environments you have",
    "start": "2245370",
    "end": "2250490"
  },
  {
    "text": "integration with cloud formation that",
    "start": "2250490",
    "end": "2256770"
  },
  {
    "text": "can perform the actual deployment so here what you can see an illustration of",
    "start": "2256770",
    "end": "2262590"
  },
  {
    "text": "you know an environment which would call beta which creates the cloud formation",
    "start": "2262590",
    "end": "2268470"
  },
  {
    "text": "change set and then deploys that set and the last step is that we're running some",
    "start": "2268470",
    "end": "2274590"
  },
  {
    "text": "tests against the newly changed code and you can gradually onboard this until you",
    "start": "2274590",
    "end": "2282960"
  },
  {
    "text": "achieve full automation and what one capability of code pipeline that you",
    "start": "2282960",
    "end": "2289020"
  },
  {
    "text": "have if you don't feel that you're ready to go you know in a full automated way is manual approvals that lets you pause",
    "start": "2289020",
    "end": "2296610"
  },
  {
    "text": "the deployment between before the hits production and do some additional",
    "start": "2296610",
    "end": "2301830"
  },
  {
    "text": "testing great so now we have a good and",
    "start": "2301830",
    "end": "2310800"
  },
  {
    "start": "2306000",
    "end": "2306000"
  },
  {
    "text": "robust continuous delivery process for delivering our service micro services so",
    "start": "2310800",
    "end": "2321810"
  },
  {
    "text": "we talked about the three architectural pillars with which you want to think",
    "start": "2321810",
    "end": "2326820"
  },
  {
    "text": "about your service micro services and let's kind of now bring it all together",
    "start": "2326820",
    "end": "2333910"
  },
  {
    "text": "do a quick recap of what we discussed today first we talked about resilience",
    "start": "2333910",
    "end": "2340270"
  },
  {
    "text": "and some of the built-in capabilities that lambda an API Gateway come with and",
    "start": "2340270",
    "end": "2346750"
  },
  {
    "text": "also how these capabilities allow you to keep your code you know free of any",
    "start": "2346750",
    "end": "2354060"
  },
  {
    "text": "orchestration logic and have good hygiene for your code and finally we",
    "start": "2354060",
    "end": "2360760"
  },
  {
    "text": "talked about how you can now have you know global deployments with cross",
    "start": "2360760",
    "end": "2366460"
  },
  {
    "text": "region and failover scenarios with uncovered scalability and discuss how",
    "start": "2366460",
    "end": "2371890"
  },
  {
    "text": "lambda actually scales and then discuss",
    "start": "2371890",
    "end": "2377140"
  },
  {
    "text": "some best best practices around how you know what what are the things that you can do to improve the performance since",
    "start": "2377140",
    "end": "2383920"
  },
  {
    "text": "you're getting from your service micro services and finally we talked about continuous delivery and how you can have",
    "start": "2383920",
    "end": "2392230"
  },
  {
    "text": "a process that is easy to model and reason about and how you can deliver",
    "start": "2392230",
    "end": "2399310"
  },
  {
    "text": "changes across you know starting from local development spanning deployments",
    "start": "2399310",
    "end": "2408790"
  },
  {
    "text": "to the different stages until production and also how you can do that safely",
    "start": "2408790",
    "end": "2414930"
  },
  {
    "text": "until you reach a fully automated process so I hope now you have kind of",
    "start": "2414930",
    "end": "2421030"
  },
  {
    "text": "more tools and and skills to go back and",
    "start": "2421030",
    "end": "2427570"
  },
  {
    "text": "as you embark on your service journey I kind of apply some of these things to",
    "start": "2427570",
    "end": "2434950"
  },
  {
    "text": "make your applications perform better and be more resilient and that brings me",
    "start": "2434950",
    "end": "2441070"
  },
  {
    "text": "to kind of what nick is gonna share with us so I now want to invite Nick to share",
    "start": "2441070",
    "end": "2447340"
  },
  {
    "text": "national Geographics story with serverless and their experience with it",
    "start": "2447340",
    "end": "2452410"
  },
  {
    "text": "Thanks thanks David Sam Nick and I am the director of platform software platforms",
    "start": "2452410",
    "end": "2458350"
  },
  {
    "text": "at National Geographic and I'll love us a little bit of National Geographic so",
    "start": "2458350",
    "end": "2463990"
  },
  {
    "start": "2463000",
    "end": "2463000"
  },
  {
    "text": "national Geographics main purpose the main is to refer the people's understanding",
    "start": "2463990",
    "end": "2469049"
  },
  {
    "text": "and knowledge about the world and it's really trying to make you feel like an explorer every day in your living room and a lot of people wouldn't think of a",
    "start": "2469049",
    "end": "2476400"
  },
  {
    "text": "National Geographic they usually think about the TV channel in a magazine but there's a lot more to it so for example",
    "start": "2476400",
    "end": "2482369"
  },
  {
    "text": "their products would travel where you can take an expedition with an explorer their products for kids we publish books",
    "start": "2482369",
    "end": "2487799"
  },
  {
    "text": "we have live events and all of this is designed to create a 360 experience for you and also over the years National",
    "start": "2487799",
    "end": "2495450"
  },
  {
    "text": "Geographic has really created a pretty large strong reach so we have announced six point four billion content",
    "start": "2495450",
    "end": "2501450"
  },
  {
    "text": "interactions across a digital properties we reach around close to 500 million households on the TV side we have close",
    "start": "2501450",
    "end": "2508859"
  },
  {
    "text": "to 400 million followers on social we run the largest brands on social on Instagram and we're 172 countries 43",
    "start": "2508859",
    "end": "2517259"
  },
  {
    "text": "languages and the road cool here all of this is centered around creating in a",
    "start": "2517259",
    "end": "2522539"
  },
  {
    "text": "team of the purpose and part of that is the National Geographic is the only media company that returns",
    "start": "2522539",
    "end": "2527549"
  },
  {
    "text": "27 percent of our proceeds back to a non-profit National Geographic Society to further invest in science exploration",
    "start": "2527549",
    "end": "2535289"
  },
  {
    "text": "conservation education so as you can imagine or the last one in 30 years there's a lot of technology that's been",
    "start": "2535289",
    "end": "2541440"
  },
  {
    "text": "built up and we're really in a phase where we're going back and taking a look at all four technology and trying to",
    "start": "2541440",
    "end": "2546989"
  },
  {
    "text": "modernize the technology stacks as we expand more internationally inhale so",
    "start": "2546989",
    "end": "2552839"
  },
  {
    "text": "interesting part is that we actually have a lot of technologies sitting in data centers in the US and we're trying",
    "start": "2552839",
    "end": "2558150"
  },
  {
    "text": "to migrate everything to the cloud and we're really starting this journey right now and what we're trying to focus on",
    "start": "2558150",
    "end": "2564269"
  },
  {
    "text": "right now is incubating new ideas and innovation and that's what really brings",
    "start": "2564269",
    "end": "2569279"
  },
  {
    "text": "me to the product that we launched recently cannot go1 and this is a mobile app that we launched in Australia and",
    "start": "2569279",
    "end": "2575160"
  },
  {
    "text": "it's in partnership with the telecom kalapas is only available to subscribers of that hollow comm and the goal was",
    "start": "2575160",
    "end": "2581039"
  },
  {
    "text": "should try to create an application that really gives you user per slice content experience that really works well with a",
    "start": "2581039",
    "end": "2587069"
  },
  {
    "text": "TV channel and the kind of content coming out there as well and a couple of milestones that we had with this",
    "start": "2587069",
    "end": "2592319"
  },
  {
    "text": "application so it is the first app that we've launched that actually has a mobile app that we launched it has",
    "start": "2592319",
    "end": "2597690"
  },
  {
    "text": "content of a variety of sources so we have the magazine content we have TV shows we have live",
    "start": "2597690",
    "end": "2603060"
  },
  {
    "text": "video and social content all coming of an app another part is also is the first time we really have a lot of content for",
    "start": "2603060",
    "end": "2609030"
  },
  {
    "text": "130 years coming to an application as well and then it's the first app that we actually built on servers so it's really",
    "start": "2609030",
    "end": "2614880"
  },
  {
    "text": "a learning experience that we went through as part of going from something where we use ec2 use in traditional technologies in Amazon and then try to",
    "start": "2614880",
    "end": "2621990"
  },
  {
    "text": "apply so blessed technology along the way so what's the application of her she look like this is kind of what we've",
    "start": "2621990",
    "end": "2628200"
  },
  {
    "start": "2625000",
    "end": "2625000"
  },
  {
    "text": "landed up with and it's kind of broken up in a couple of different phases so the first phase is really very big",
    "start": "2628200",
    "end": "2633720"
  },
  {
    "start": "2633000",
    "end": "2633000"
  },
  {
    "text": "aggregating content and we have a couple of different CMS is spread across the world so for this application most of",
    "start": "2633720",
    "end": "2640680"
  },
  {
    "text": "the contents coming from the US and a content management system in Australia and that's where we get personal content",
    "start": "2640680",
    "end": "2646380"
  },
  {
    "text": "localized content for the Australian market if you have some upstream systems that are gonna get this content and",
    "start": "2646380",
    "end": "2651750"
  },
  {
    "text": "normalize it but then we also have different systems for video we have one for the US there's a different one in",
    "start": "2651750",
    "end": "2658950"
  },
  {
    "text": "Australia live video come from a different place and that needs to kind of get aggregated over together as well",
    "start": "2658950",
    "end": "2664170"
  },
  {
    "text": "and normalized so we have our nodejs application that runs on ec2 and this",
    "start": "2664170",
    "end": "2669900"
  },
  {
    "text": "really doesn't fit the service morale and this is something that's going to come back and take a look at but it's really trying to aggregate the content",
    "start": "2669900",
    "end": "2676020"
  },
  {
    "text": "normalize it and then prepare it for delivery so we have couple of layers aggregations as I mentioned before we do",
    "start": "2676020",
    "end": "2681690"
  },
  {
    "text": "aggregation upstream but that's purpose is to renormalize the data model this one is a suitable for delivery at last",
    "start": "2681690",
    "end": "2688590"
  },
  {
    "text": "mile so what we what this nodejs app does is really kind of prepares a data it formats the data for what's",
    "start": "2688590",
    "end": "2694650"
  },
  {
    "text": "appropriate for cloud search indexes and so on and keeps it ready for mobile app to use and we also store files that we get like",
    "start": "2694650",
    "end": "2701670"
  },
  {
    "text": "image files and so on into s3 and that brings acid asynchronous processing where we have events on lambda functions",
    "start": "2701670",
    "end": "2707880"
  },
  {
    "start": "2704000",
    "end": "2704000"
  },
  {
    "text": "so when we get a file over the Gammage file we have that new function then then resize the image crop it and so on we",
    "start": "2707880",
    "end": "2715080"
  },
  {
    "text": "also have other lambda functions that can evoke with the recognition servers we have lambda function to keep information is local to Australia layer",
    "start": "2715080",
    "end": "2721650"
  },
  {
    "text": "up to date so example show times they need to be kept up to date to that for that market what we have the US may not",
    "start": "2721650",
    "end": "2727560"
  },
  {
    "text": "apply there and we also have lambda function I wrote we work on personalization of content as well",
    "start": "2727560",
    "end": "2733750"
  },
  {
    "text": "and the last part is the delivery side which is mostly powered through API gateway and lambda functions and we have",
    "start": "2733750",
    "end": "2738849"
  },
  {
    "start": "2734000",
    "end": "2734000"
  },
  {
    "text": "an API history broken or three this content user administration and the content API is really working with the",
    "start": "2738849",
    "end": "2746410"
  },
  {
    "text": "data that's in cloud search so we have feed the cloud search and that's the primary source of most of the content that goes into the application and what",
    "start": "2746410",
    "end": "2753340"
  },
  {
    "text": "the user sees in different sections as I navigate around the user API is really associated with managing user state",
    "start": "2753340",
    "end": "2759340"
  },
  {
    "text": "session whether users doing the application as kind of readwrite API and it's really pushing data mostly back",
    "start": "2759340",
    "end": "2765369"
  },
  {
    "text": "into DynamoDB and the administration API is not really a content management API",
    "start": "2765369",
    "end": "2770500"
  },
  {
    "text": "is more about positioning and administrating what a user can see so for example if you have some articles",
    "start": "2770500",
    "end": "2775900"
  },
  {
    "text": "that someone D deem deems is not appropriate for the student market you can go to her it off if you find that",
    "start": "2775900",
    "end": "2781330"
  },
  {
    "text": "tagging is they'll be different in the US and you want to kind of reposition the content in them and actually app we",
    "start": "2781330",
    "end": "2786520"
  },
  {
    "text": "can go in and say okay show this in a different section and more changes position in the feed so that's what the",
    "start": "2786520",
    "end": "2791710"
  },
  {
    "text": "that's what that API does and while each one of these do work independently from each other if the user API is down you",
    "start": "2791710",
    "end": "2798640"
  },
  {
    "text": "may go and get content but you won't get personalized content right so dirty doesn't work well so that's where kind",
    "start": "2798640",
    "end": "2803740"
  },
  {
    "text": "of things come together as while you can build things to be separate you really need them to work together get a full",
    "start": "2803740",
    "end": "2809170"
  },
  {
    "text": "picture and get a really good user experience so a couple of goals that we try to do that really kind of provide value to the",
    "start": "2809170",
    "end": "2816070"
  },
  {
    "start": "2813000",
    "end": "2813000"
  },
  {
    "text": "user one of those goals is request ization and this really is powered by a",
    "start": "2816070",
    "end": "2821200"
  },
  {
    "text": "lot of data that we capture in the application so when a user goes into the application they navigate around we",
    "start": "2821200",
    "end": "2826570"
  },
  {
    "text": "track what they look at we track how much time to spend on different articles and different photographs and videos",
    "start": "2826570",
    "end": "2831910"
  },
  {
    "text": "inside there they can favour the video so they have like favorited lists and we track that information as well and all",
    "start": "2831910",
    "end": "2838119"
  },
  {
    "text": "that gets stored in DynamoDB and then we use lambda function processing in the back to create a profile for this user",
    "start": "2838119",
    "end": "2844480"
  },
  {
    "text": "and a custom feed and cloud search and then that's really poor powers precise",
    "start": "2844480",
    "end": "2849550"
  },
  {
    "text": "content that we pushed over to the user on the application side and this is also",
    "start": "2849550",
    "end": "2855339"
  },
  {
    "text": "an example of where why we can't have content store in two places so earlier on when we've built content over you put",
    "start": "2855339",
    "end": "2861369"
  },
  {
    "text": "in a dynamo D being Cloud search and we create a personalized feed we take the raw content we put into dynamo DB and",
    "start": "2861369",
    "end": "2866770"
  },
  {
    "text": "recreate the index the feeds in cows first there we did look at elasticsearch as an option to",
    "start": "2866770",
    "end": "2873549"
  },
  {
    "text": "cloud search and we found that we really didn't need some of the extensions that",
    "start": "2873549",
    "end": "2879220"
  },
  {
    "text": "you would use the elasticsearch so example we're not doing things that would need a LK or Cabana and kind of stuff on top of it so the simplicity of",
    "start": "2879220",
    "end": "2886569"
  },
  {
    "text": "using class search as a managed solution just worked for us and we had that with auto scaling of like two nodes to get",
    "start": "2886569",
    "end": "2892780"
  },
  {
    "text": "some redundancy out of it now another part really be doing personalization really is to push",
    "start": "2892780",
    "end": "2897940"
  },
  {
    "text": "notifications so once somebody comes to app and they take a look and they browse around that I okay looks kind of cool",
    "start": "2897940",
    "end": "2904210"
  },
  {
    "text": "I'll come back later and they really don't get a feel for when to come back so how do you been do you how do you do the user back to the application and we",
    "start": "2904210",
    "end": "2911230"
  },
  {
    "text": "use SNS for this and we support IRS and Android devices and we allow you to kind of have as many devices as you want so",
    "start": "2911230",
    "end": "2917710"
  },
  {
    "text": "the real goal that we wanted to work around was trying to make sure we are thoughtful and respectful of the users time right so when we support multiple",
    "start": "2917710",
    "end": "2925510"
  },
  {
    "text": "devices we allow the user to pick a preferred device I got two kids we have like five devices between the kids and",
    "start": "2925510",
    "end": "2932500"
  },
  {
    "text": "my phone's in somewhere and since this is designed to kind of work with a telecom you kind of lot of this is maybe",
    "start": "2932500",
    "end": "2938349"
  },
  {
    "text": "be used at home so you got notification you really don't want five devices buzzing at the same time right so you",
    "start": "2938349",
    "end": "2943630"
  },
  {
    "text": "can pick a preferred one and that kind of helps that experience a little bit better also in other part is we try to",
    "start": "2943630",
    "end": "2949630"
  },
  {
    "text": "respect users like sleep time right so we give you quiet hours so while someone's editing and managing this",
    "start": "2949630",
    "end": "2955930"
  },
  {
    "text": "application in the u.s. we don't want them to accidentally wake you up at night so we allow you to have silent",
    "start": "2955930",
    "end": "2961119"
  },
  {
    "text": "hours quiet hours they connect to the experience too and since a lot of this is based on processes ation and a",
    "start": "2961119",
    "end": "2966670"
  },
  {
    "text": "profile can sometimes recommend four things one day well next day a couple does fewer things we try to limit how",
    "start": "2966670",
    "end": "2973420"
  },
  {
    "text": "many push notifications we send you because the last thing we want to do is kind of become noise right someone",
    "start": "2973420",
    "end": "2978700"
  },
  {
    "text": "turned you become noise you get annoyed with a push notification you turn it off and then usually you don't turn it back on right so we so what we really found",
    "start": "2978700",
    "end": "2985569"
  },
  {
    "text": "is that using SNS and so on what oh well and it allowed us really focus on the features of the application versus just",
    "start": "2985569",
    "end": "2992319"
  },
  {
    "text": "trying to build out the basics of how you can adjust orchestrate and deliver push notifications",
    "start": "2992319",
    "end": "2998470"
  },
  {
    "text": "so we didn't hit a couple issues so as we were building the application we",
    "start": "2998470",
    "end": "3003599"
  },
  {
    "start": "2999000",
    "end": "2999000"
  },
  {
    "text": "found that we had a lot of metadata on the text content but the images didn't really have a lot of metadata and that",
    "start": "3003599",
    "end": "3010290"
  },
  {
    "text": "would really some be something that would inhibit how are we surface content that's not tied to an article all right so since we're trying to create an",
    "start": "3010290",
    "end": "3016260"
  },
  {
    "text": "experience where you can see images for the gallery's video not just magazine articles we need to make sure we can",
    "start": "3016260",
    "end": "3021839"
  },
  {
    "text": "surface and personalize that and a big part of National Geographic is the photography as well so we give it a",
    "start": "3021839",
    "end": "3028349"
  },
  {
    "text": "choices either we ask our producers to go back and read tagged images and that",
    "start": "3028349",
    "end": "3033510"
  },
  {
    "text": "would really be really cost prohibitive and time-consuming and also because we have so much content they have to pick",
    "start": "3033510",
    "end": "3040200"
  },
  {
    "text": "and choose what they really want to tag which surely wouldn't allow us to deliver onto a promise so this is really",
    "start": "3040200",
    "end": "3046500"
  },
  {
    "text": "where recognition really helped out as a plug-and-play mechanism we pulled it in it gives us a pretty good confidence",
    "start": "3046500",
    "end": "3053040"
  },
  {
    "text": "level and the worked out really well on on label detection and it really allowed",
    "start": "3053040",
    "end": "3058560"
  },
  {
    "text": "us to do two things not only just surface and can I apply metadata to the content posting give us",
    "start": "3058560",
    "end": "3064140"
  },
  {
    "text": "understanding what's in the image so for example some of our a synchronous processing discs and smart cropping",
    "start": "3064140",
    "end": "3069390"
  },
  {
    "text": "maybe try to find a focal point in the image and then crop the image so we don't need people to go in and crop all",
    "start": "3069390",
    "end": "3075089"
  },
  {
    "text": "the images in this case if we find out that an image actually has a map or chart we don't crop it we let a box set",
    "start": "3075089",
    "end": "3082170"
  },
  {
    "text": "make it fit the aspect ratio so you can see the full image and this way we kind of had a bit better decision making on",
    "start": "3082170",
    "end": "3087690"
  },
  {
    "text": "automated coughing now probably a couple issues we hit with this is that along",
    "start": "3087690",
    "end": "3093900"
  },
  {
    "text": "the way we had a couple of cases where we were blowing past the 1.5 gigabyte RAM limit lambda functions and it took",
    "start": "3093900",
    "end": "3100950"
  },
  {
    "text": "us quite a little while to find out what the issue was and it turned out to be a real simple issue it was like our uncompressed images in",
    "start": "3100950",
    "end": "3107520"
  },
  {
    "text": "the file system of 15 Meg's but when you kind of have to blow you decompress it",
    "start": "3107520",
    "end": "3113640"
  },
  {
    "text": "then you kind of encode it to kind of standard recognition it was going over 1.5 gigs and the really lesson that we",
    "start": "3113640",
    "end": "3118800"
  },
  {
    "text": "learned here was that you really don't need large images to get accuracy with night recognition so we kind of go back",
    "start": "3118800",
    "end": "3124710"
  },
  {
    "text": "in I began a process and resized images earlier so get fit within that kind of limit service labelled",
    "start": "3124710",
    "end": "3131280"
  },
  {
    "text": "and also we found that for us at least the average response time recognition was one point five to two seconds and",
    "start": "3131280",
    "end": "3138290"
  },
  {
    "text": "that makes it not appropriate at least for our expedition on the run time side something more you wanna use on the",
    "start": "3138290",
    "end": "3144360"
  },
  {
    "text": "background processing but even then but you need to understand really how is gonna work to understand what your",
    "start": "3144360",
    "end": "3149520"
  },
  {
    "text": "workload is if you have a lot of images coming in you have case of your bulk images coming in you might do bulk bulk",
    "start": "3149520",
    "end": "3154980"
  },
  {
    "text": "migration you know you might get backed up for a while so you need to can understand how you wanna handle it",
    "start": "3154980",
    "end": "3160350"
  },
  {
    "text": "through pert how many images you understand how you understand errors and logging and so on but the real message",
    "start": "3160350",
    "end": "3166440"
  },
  {
    "text": "here is you need to look at a service understand the service truly play with it expend experiment with it to kind of",
    "start": "3166440",
    "end": "3173340"
  },
  {
    "text": "extract the full valley or what you want to get a couple of things that we're going to look at in the future is that",
    "start": "3173340",
    "end": "3179760"
  },
  {
    "text": "really how we handle State in the application so we have a couple of phases the pipeline right now we have lambda managing lambda which is good but",
    "start": "3179760",
    "end": "3186840"
  },
  {
    "text": "it adds some complexity to the code and that's something that would come back and take a look at in the future as well",
    "start": "3186840",
    "end": "3193010"
  },
  {
    "text": "now any mobile app is not gonna be worth us all of us not performing right means just sitting there and cleaning for couple you're waiting for like five",
    "start": "3193010",
    "end": "3198870"
  },
  {
    "start": "3194000",
    "end": "3194000"
  },
  {
    "text": "seconds you don't get the content you're pretty much done you're gone so what we found is the muse API gateway",
    "start": "3198870",
    "end": "3204840"
  },
  {
    "text": "it really didn't add much run overhead so there charts on the right the fact that you can't see a difference between",
    "start": "3204840",
    "end": "3210930"
  },
  {
    "text": "two lines that means their overhead is very low and most of the time in the duration for if I gave a really was tied",
    "start": "3210930",
    "end": "3217200"
  },
  {
    "text": "to the actual integration lambda which is lambda actually achieved in code one thing to notice here is that we don't",
    "start": "3217200",
    "end": "3222900"
  },
  {
    "text": "use authorization lambdas and most of authorizations are in code so that's not",
    "start": "3222900",
    "end": "3228180"
  },
  {
    "text": "really adding some overhead on the flip side that does make a couple things easier for us because just have less",
    "start": "3228180",
    "end": "3233520"
  },
  {
    "text": "lambdas to manage to the set the first the diagram on the left is really",
    "start": "3233520",
    "end": "3238710"
  },
  {
    "text": "looking at how lambda reacted to your traffic spikes and for the most part we found that that's blue",
    "start": "3238710",
    "end": "3245280"
  },
  {
    "text": "it was pretty consistent now one thing to note here is here is again it depends on what your rate of traffic spike",
    "start": "3245280",
    "end": "3251280"
  },
  {
    "text": "growth is right for so us the grade the rate of growth wasn't necessarily going from a thousand to twenty thousand a",
    "start": "3251280",
    "end": "3257010"
  },
  {
    "text": "second it was a smaller growth so we didn't have too many challenges here but as you build this out Nene you can",
    "start": "3257010",
    "end": "3263490"
  },
  {
    "text": "understand what your traffic expedition might be and then really fine-tune optimize and David a really good job talking about",
    "start": "3263490",
    "end": "3270360"
  },
  {
    "text": "the container lifecycle high optimize and that's there's a key message there the service is really easy to get",
    "start": "3270360",
    "end": "3277230"
  },
  {
    "text": "started and actually part of the beauty of servers at the same time if you really want to use it well need to",
    "start": "3277230",
    "end": "3282780"
  },
  {
    "text": "understand of how it really works you need to understand the service limits you need to understand why the service",
    "start": "3282780",
    "end": "3287910"
  },
  {
    "text": "limits are there how its architected behind the scenes and once you understand that better you can really",
    "start": "3287910",
    "end": "3292950"
  },
  {
    "text": "extract more value out of your services and how you can they use a system and that's the case where if you understand",
    "start": "3292950",
    "end": "3298440"
  },
  {
    "text": "Coast versus warm starts what's the pattern of traffic going to be any application it helps you out so in our",
    "start": "3298440",
    "end": "3303960"
  },
  {
    "text": "case when we don't use the authorization lambda and we have one lambda per API it simplifies our backup solution for how",
    "start": "3303960",
    "end": "3311010"
  },
  {
    "text": "you want to keep you know keep warm keep the lambdas warm right so it really dedicated look at that and really spend",
    "start": "3311010",
    "end": "3317640"
  },
  {
    "text": "some time with it just because you can get started early it doesn't mean it's going to perform right there on day one",
    "start": "3317640",
    "end": "3323910"
  },
  {
    "text": "a couple of things also we kind of head out as they're dynamodb performance was pretty good for us and part of that was",
    "start": "3323910",
    "end": "3330510"
  },
  {
    "text": "we try to separate read table versus write tables as much as possible in some cases you can't and you have tables that",
    "start": "3330510",
    "end": "3336690"
  },
  {
    "text": "do both but if you can then you can try to optimize your partition logic and",
    "start": "3336690",
    "end": "3341910"
  },
  {
    "text": "your SAR keys on dynamodb tables for that purpose that helps you get some benefit out of it as well and that",
    "start": "3341910",
    "end": "3347880"
  },
  {
    "text": "really just go solicited the only point on understanding the service with the deeper so what's next for us right so",
    "start": "3347880",
    "end": "3354990"
  },
  {
    "start": "3352000",
    "end": "3352000"
  },
  {
    "text": "let's mention before we have lambda core badging lambda code and in some cases that's really good to do and some cases",
    "start": "3354990",
    "end": "3360750"
  },
  {
    "text": "are not so we want to go back and take a look at some of the features ever launched while we were in development and see if that's going to be useful to",
    "start": "3360750",
    "end": "3366570"
  },
  {
    "text": "us so step functions is one if that doesn't work out we might look at a simple workflow service and see how that fits in we really a version one of",
    "start": "3366570",
    "end": "3374240"
  },
  {
    "text": "proposition service right now and it's great when you have nothing and you have something it really gets you forward it",
    "start": "3374240",
    "end": "3380160"
  },
  {
    "text": "really allows you to understand how your users interact with our servers so it's really beneficial and but now we want to",
    "start": "3380160",
    "end": "3385560"
  },
  {
    "text": "go back and take a look at how do we take that further all right so a couple things going to go back and can already iterate on on our side and another pod",
    "start": "3385560",
    "end": "3392280"
  },
  {
    "text": "really comes up also is metrics so you get a good healthy number of metrics with cloud Wow",
    "start": "3392280",
    "end": "3397630"
  },
  {
    "text": "but you there are a cases where you're gonna need to go and input custom mystics and depending what you want to",
    "start": "3397630",
    "end": "3402880"
  },
  {
    "text": "look at and we have we do have some but we need to go back and add some more and custom metrics can be tricky because if",
    "start": "3402880",
    "end": "3410469"
  },
  {
    "text": "you're trying to compensate for some metrics you used to in the old world that's not available now and they're",
    "start": "3410469",
    "end": "3415809"
  },
  {
    "text": "trying to design it out you could have an error in your own metric logic they kind of now gives you a false positive how things working so",
    "start": "3415809",
    "end": "3422679"
  },
  {
    "text": "we need to go back and take a look at how that works and how we kind of enhance that to get some more visibility as well so in ensure drily we really had",
    "start": "3422679",
    "end": "3432039"
  },
  {
    "start": "3429000",
    "end": "3429000"
  },
  {
    "text": "a good experience our first experience with Sir Willis we found that a lot of",
    "start": "3432039",
    "end": "3437199"
  },
  {
    "text": "scaling issues really we didn't have to worry about it worked out of the box as long as we spent the time to understand",
    "start": "3437199",
    "end": "3442299"
  },
  {
    "text": "the system and all this really allowed us to spend time on future development which is really where you want to be",
    "start": "3442299",
    "end": "3448089"
  },
  {
    "text": "right so it's great to be an Amazon that you can pay as you go and that's really cool but also spending time on the right",
    "start": "3448089",
    "end": "3456880"
  },
  {
    "text": "features is really important I mean every user expects in the mobile apps to get updated every two weeks in the App",
    "start": "3456880",
    "end": "3463389"
  },
  {
    "text": "Store you couldn't be doing a lot of development the apps and improving features so you want to make sure you're",
    "start": "3463389",
    "end": "3468669"
  },
  {
    "text": "keeping mind opportunity cost or not working the right features because it goes to get it create a good product experience or V fam was that reason so",
    "start": "3468669",
    "end": "3475659"
  },
  {
    "text": "let's take so far allowed us to really focus on experience of the application not on genetic orchestration that we",
    "start": "3475659",
    "end": "3481989"
  },
  {
    "text": "don't need to use and also use some ready-made features that we don't have to build ourselves so hopefully there",
    "start": "3481989",
    "end": "3488380"
  },
  {
    "text": "was some useful information for you and if you try it out as a we recommend you do you come back and show you experience",
    "start": "3488380",
    "end": "3494829"
  },
  {
    "text": "as well yeah thank you [Applause]",
    "start": "3494829",
    "end": "3502429"
  },
  {
    "text": "thank you very much Nick and I will hang outside for a little bit to answer any",
    "start": "3505070",
    "end": "3511410"
  },
  {
    "text": "questions that you might have so yeah please feel free to to ask any questions thank you",
    "start": "3511410",
    "end": "3518540"
  }
]