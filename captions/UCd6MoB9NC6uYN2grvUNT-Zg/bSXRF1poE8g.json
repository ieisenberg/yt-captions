[
  {
    "start": "0",
    "end": "97000"
  },
  {
    "text": "hey everyone thanks for coming out today uh my name is Andy Troutman I'm a senior manager here in AWS I mostly focus on",
    "start": "1319",
    "end": "8760"
  },
  {
    "text": "our software deployment tools uh code deploy being our publicly facing one today I'm going to talk about uh devops",
    "start": "8760",
    "end": "15200"
  },
  {
    "text": "on ads specifically I'm going to talk about choosing the right uh deployment techniques uh for your",
    "start": "15200",
    "end": "21400"
  },
  {
    "text": "application uh I'm going to cover a few things I'll keep returning to this slide and then we we'll keep adding on to it",
    "start": "21400",
    "end": "27519"
  },
  {
    "text": "this talk uh if I'm Successful by the end and you will have a broad array of",
    "start": "27519",
    "end": "33440"
  },
  {
    "text": "new terms and tools to go dig deeper into uh and some sense of what may or",
    "start": "33440",
    "end": "38559"
  },
  {
    "text": "may not work for you so we'll we'll start by talking about uh how to reduce the blast radius of a bad change so",
    "start": "38559",
    "end": "44600"
  },
  {
    "text": "assuming that you release software that you probably didn't want to release uh what can you do to make sure it doesn't",
    "start": "44600",
    "end": "50320"
  },
  {
    "text": "uh impact all of your customers the fewest numbers of customers possible we'll talk about techniques to avoid",
    "start": "50320",
    "end": "56000"
  },
  {
    "text": "impact altogether so how do I actually uh release a piece of code make sure that I'm as as confident as I can be",
    "start": "56000",
    "end": "63160"
  },
  {
    "text": "that uh everything will go as expected and then we'll also talk about how to deal with data in the context of a",
    "start": "63160",
    "end": "69439"
  },
  {
    "text": "software change I think every time I give a talk on software deployment this is the most commonly asked question afterwards uh how do I deal with uh",
    "start": "69439",
    "end": "76520"
  },
  {
    "text": "schema changes or data changes as part of my software release process so I'll try and give you a couple uh couple",
    "start": "76520",
    "end": "83439"
  },
  {
    "text": "tools for that as well uh throughout I'm going to try and do some live demos so that should be fun SL terrifying",
    "start": "83439",
    "end": "90720"
  },
  {
    "text": "and uh hopefully everything will go well I'll I'll show you a bunch of different AWS tools and how you can leverage them to get your job",
    "start": "90720",
    "end": "96920"
  },
  {
    "text": "done so every time I do one of these talks the uh piece of advice I always get is tell a good story uh there's two",
    "start": "96920",
    "end": "104520"
  },
  {
    "start": "97000",
    "end": "159000"
  },
  {
    "text": "ways to tell a good story one is just to steal a good story and repurpose it uh or to write a really good story uh I'm",
    "start": "104520",
    "end": "110799"
  },
  {
    "text": "not going to do the second one I'm just going to steal one so I'm going to steal a seminal 80s classic Lethal Weapon um",
    "start": "110799",
    "end": "118000"
  },
  {
    "text": "for those of you not familiar with Lethal Weapon no problem it's a buddy cop movie you've got uh two",
    "start": "118000",
    "end": "124439"
  },
  {
    "text": "protagonists uh the first is the uh is Murdoch the grizzled veteran cop and the",
    "start": "124439",
    "end": "130360"
  },
  {
    "text": "other one is rigs his uh crazy sidekick um rookie",
    "start": "130360",
    "end": "135800"
  },
  {
    "text": "cop uh in our example uh Murdoch is going to be the season software engineer",
    "start": "135800",
    "end": "142519"
  },
  {
    "text": "and rigs is going to be the new devops engineer at the beginning of any good buddy cop movie when they meet there's",
    "start": "142519",
    "end": "148720"
  },
  {
    "text": "always friction so there's no love loss between our characters initially uh and we have to figure out how they can work",
    "start": "148720",
    "end": "154480"
  },
  {
    "text": "together and uh and combine themselves to be better than their parts so let's jump in uh I'll start",
    "start": "154480",
    "end": "162080"
  },
  {
    "start": "159000",
    "end": "431000"
  },
  {
    "text": "with how to reduce the blast radius um punchline is slowly introduce changes",
    "start": "162080",
    "end": "168720"
  },
  {
    "text": "to your customers don't uh go all broke and uh and push out a change to everyone at the same time so how do you do that",
    "start": "168720",
    "end": "176040"
  },
  {
    "text": "I'll start I'll start with this one um by using uh Murdoch as our as our protagonist so in muro's world every",
    "start": "176040",
    "end": "182200"
  },
  {
    "text": "piece of software that's going out the door likely has a bug in it uh it has a pretty big bug it has a really big bug",
    "start": "182200",
    "end": "188280"
  },
  {
    "text": "he's always convinced that no matter what is getting released it is probably bad uh and so he spends a lot of his",
    "start": "188280",
    "end": "194840"
  },
  {
    "text": "time thinking about how to prevent bad software from going out the door and he puts a lot of rigor and process around the software release process he knows",
    "start": "194840",
    "end": "202519"
  },
  {
    "text": "that if he releases software on his first set of servers and it doesn't get caught that it's going to propagate",
    "start": "202519",
    "end": "208519"
  },
  {
    "text": "everywhere and is going to have many more problems he also knows that he works for",
    "start": "208519",
    "end": "215239"
  },
  {
    "text": "a large company and the problem is even worse than he imagined because they distribute globally right so he's got",
    "start": "215239",
    "end": "221799"
  },
  {
    "text": "problems all over the world if he doesn't catch it early so what is he do uh compartmentalization is the name",
    "start": "221799",
    "end": "229319"
  },
  {
    "text": "of the game right so how can we create uh tiny pieces that can fail independently of each other how do we",
    "start": "229319",
    "end": "235360"
  },
  {
    "text": "make sure that those pieces can be deployed to uh in absence of deploying to everything",
    "start": "235360",
    "end": "240480"
  },
  {
    "text": "so the first thing he's going to take advantage of is is regional segmentation uh he runs on AWS so um for those of you",
    "start": "240480",
    "end": "247000"
  },
  {
    "text": "not familiar AWS has this concept of regions regions are globally distributed stacks of our web services all over the",
    "start": "247000",
    "end": "253959"
  },
  {
    "text": "world uh they are network isolated from each other they are fault isolated from each other the intent is that if one",
    "start": "253959",
    "end": "260239"
  },
  {
    "text": "region goes down it shouldn't have any impact on any other region so he gets this for free as long as he's deploying",
    "start": "260239",
    "end": "265800"
  },
  {
    "text": "and leveraging rep Services across regions uh he's getting you know some light form of segmentation that's of",
    "start": "265800",
    "end": "272199"
  },
  {
    "text": "course not good enough for him he'll also take advantage of availability zones zonal segmentation within any AWS",
    "start": "272199",
    "end": "279840"
  },
  {
    "text": "region you uh again have multiple uh isolated Stacks that are intended to",
    "start": "279840",
    "end": "285160"
  },
  {
    "text": "fail independently of each other uh you can use those to distribute your compute logic your web servers or whatever it is",
    "start": "285160",
    "end": "292080"
  },
  {
    "text": "you're running your worker nodes across the availability zones and again you get a little bit of additional segmentation",
    "start": "292080",
    "end": "298199"
  },
  {
    "text": "these uh are intended to also fail um independently of each",
    "start": "298199",
    "end": "303840"
  },
  {
    "text": "other of course he's going to go further anytime he he deploys he wants",
    "start": "304280",
    "end": "309759"
  },
  {
    "text": "to deploy in a phased manner uh or a a rolling deployment right so this means",
    "start": "309759",
    "end": "315120"
  },
  {
    "text": "deploy to a single host see how it goes perhaps test it uh you may call this one",
    "start": "315120",
    "end": "320160"
  },
  {
    "text": "box or Canary testing uh make sure that it uh it works as expected before you go",
    "start": "320160",
    "end": "325680"
  },
  {
    "text": "and blast it to the rest of your customers and your Fleet so proceed with caution in addition to server",
    "start": "325680",
    "end": "332160"
  },
  {
    "text": "segmentation we can talk about stack segmentation everyone uh probably already does stack stack segmentation",
    "start": "332160",
    "end": "337680"
  },
  {
    "text": "but if not you should uh in AWS and in Amazon we typically uh you know have a",
    "start": "337680",
    "end": "343560"
  },
  {
    "text": "three kind of Stack architecture we have the development environments where uh it's completely Wild Wild West our our",
    "start": "343560",
    "end": "350720"
  },
  {
    "text": "developers push to it whenever they want the code that goes there is in various states of testing it can be for",
    "start": "350720",
    "end": "356919"
  },
  {
    "text": "experimentation basically everything in Dev is is highly untrusted once you have a set of changes",
    "start": "356919",
    "end": "362560"
  },
  {
    "text": "that you think are ready to show to customers that goes to a test stack or an integration stack that's where uh uh",
    "start": "362560",
    "end": "369880"
  },
  {
    "text": "testing is expected to to have happened already so your your uh writing test that you're shipping along with your",
    "start": "369880",
    "end": "375840"
  },
  {
    "text": "code uh your code is being tested there uh test stack looks a lot like your",
    "start": "375840",
    "end": "382080"
  },
  {
    "text": "production stack so for the most part uh your test stack should um be",
    "start": "382080",
    "end": "388120"
  },
  {
    "text": "configured with the same permissions as production uh it should be scaled in most cases similar to production um it",
    "start": "388120",
    "end": "395560"
  },
  {
    "text": "should it should as much as possible mimic production and then finally production is exactly what it sounds like it's when your customers are",
    "start": "395560",
    "end": "401160"
  },
  {
    "text": "actually going to experience the new piece of code that you pushed out the door it's available um to everyone and",
    "start": "401160",
    "end": "408960"
  },
  {
    "text": "uh code that goes there you should have the highest level of confidence that it actually is going to work right so uh",
    "start": "408960",
    "end": "415160"
  },
  {
    "text": "you you'll see I've drawn little brick walls between these the intention is that these are again completely completely isolated do not share",
    "start": "415160",
    "end": "421360"
  },
  {
    "text": "credentials across your various Stacks do not um share permissions across",
    "start": "421360",
    "end": "426639"
  },
  {
    "text": "Stacks when you can avoid it it always ends up biting you in some way or another so that's Murdock's view of the",
    "start": "426639",
    "end": "434360"
  },
  {
    "start": "431000",
    "end": "563000"
  },
  {
    "text": "world uh everything has to be uh compartmentalized into tiny little pieces each one of those pieces has to",
    "start": "434360",
    "end": "441160"
  },
  {
    "text": "have a report written about it in order to get it out the door let's switch and talk about rig's view of the world how",
    "start": "441160",
    "end": "446639"
  },
  {
    "text": "he believes software should should go out the door in rg's uh view of the world he he",
    "start": "446639",
    "end": "453639"
  },
  {
    "text": "doesn't have time for that right he doesn't have time uh he doesn't want to take you know a week to write a report",
    "start": "453639",
    "end": "459039"
  },
  {
    "text": "about the the change he's going to fix while he doesn't disagree with the idea of compartmentalization he doesn't think",
    "start": "459039",
    "end": "464199"
  },
  {
    "text": "that's the emphasis and R's world it's all about the code right and specifically it's about complexity of",
    "start": "464199",
    "end": "469720"
  },
  {
    "text": "the change right so in rs's world uh reducing the complexity of any single",
    "start": "469720",
    "end": "474840"
  },
  {
    "text": "change is the name of the game to illustrate this a little bit imagine you're shipping",
    "start": "474840",
    "end": "480000"
  },
  {
    "text": "um an update uh that's large it could be a bunch of files across multiple web services or just a lot of change even",
    "start": "480000",
    "end": "487199"
  },
  {
    "text": "within a single web service um for every piece of change that you have There's an opportunity for a bug so with a big",
    "start": "487199",
    "end": "493080"
  },
  {
    "text": "change you have an opportunity for lots of bugs right so the bigger the change the more risky it it naturally is going",
    "start": "493080",
    "end": "499159"
  },
  {
    "text": "to be the more likely it is that you're going to get something wrong or miss an interaction or you know Miss a test um",
    "start": "499159",
    "end": "505919"
  },
  {
    "text": "and so this makes it very hard to ship these large changes so in rig's world we",
    "start": "505919",
    "end": "511120"
  },
  {
    "text": "we want to reduce the size of any change and we want to ship more often right so ship smaller things more frequently the",
    "start": "511120",
    "end": "516640"
  },
  {
    "text": "nice thing about smaller changes is even if they do uh end up having a bug um",
    "start": "516640",
    "end": "522080"
  },
  {
    "text": "it's a lot easier to remediate that in the form of a roll back when you have a really big change set across multiple services or even within the same web",
    "start": "522080",
    "end": "528800"
  },
  {
    "text": "service when you encounter an error you have a lot more space uh search space that you need to go through to figure",
    "start": "528800",
    "end": "534519"
  },
  {
    "text": "out what exactly just happened and so uh small changes make this a lot easier if you're Shi shipping things quickly and",
    "start": "534519",
    "end": "540880"
  },
  {
    "text": "iteratively uh and frequently it's very easy to say h it was working now it wasn't working with this change roll",
    "start": "540880",
    "end": "546440"
  },
  {
    "text": "back that single one right so that's really where rigs wants to spend his time he wants to he's he's fine with",
    "start": "546440",
    "end": "552160"
  },
  {
    "text": "compartmentalizing but he really wants to focus on uh more of a continuous deployment model right so ship things",
    "start": "552160",
    "end": "557839"
  },
  {
    "text": "quickly ship things in small batches um avoid complexity of any particular",
    "start": "557839",
    "end": "563720"
  },
  {
    "start": "563000",
    "end": "865000"
  },
  {
    "text": "change so let's try and do a demo",
    "start": "563720",
    "end": "568680"
  },
  {
    "text": "cool so um just as I said I'll try and motivate this whole talk with uh with",
    "start": "570560",
    "end": "575640"
  },
  {
    "text": "some examples so two tools that you can use to um build out your release process one is uh code pipelines code pipelines",
    "start": "575640",
    "end": "583360"
  },
  {
    "text": "is a tool we have here in AWS to visualize your release process and to",
    "start": "583360",
    "end": "588880"
  },
  {
    "text": "automate it uh for those of you not familiar with code pipelines here's probably the simplest pipeline you could",
    "start": "588880",
    "end": "594200"
  },
  {
    "text": "ever have we have a source stage uh and a little arrow that puts it into a beta stage uh that uses code deploy right so",
    "start": "594200",
    "end": "601839"
  },
  {
    "text": "at a at a very simple this is a simple visualization to show you that when I check in code the first thing that",
    "start": "601839",
    "end": "607160"
  },
  {
    "text": "happens is I pick it up and deploy it with code deploy now this is uh as I said probably the simplest pipeline you",
    "start": "607160",
    "end": "612360"
  },
  {
    "text": "could possibly have uh in the real world you're going to have much more complicated cases if we're going to",
    "start": "612360",
    "end": "617519"
  },
  {
    "text": "follow Murdoch's advice and compartmentalize thing to the to the nth degree uh we're going to probably need",
    "start": "617519",
    "end": "623680"
  },
  {
    "text": "some automation around building these pipelines and keeping them consistent that's where cloud formation comes in",
    "start": "623680",
    "end": "629000"
  },
  {
    "text": "Cloud information is a template driven Service uh that stands up and configures infrastructure for you it can also stand",
    "start": "629000",
    "end": "635200"
  },
  {
    "text": "up and configure other AD services such as code pipelines so what I'll do here is I'll just create a brand new stack um",
    "start": "635200",
    "end": "641560"
  },
  {
    "text": "using cloud formation excuse me so I'm just going to open up this",
    "start": "641560",
    "end": "648079"
  },
  {
    "text": "Json file click",
    "start": "648079",
    "end": "652560"
  },
  {
    "text": "next um something I won't lose in my list oops",
    "start": "653680",
    "end": "661240"
  },
  {
    "text": "this is just me acknowledging that I'm going to create some permissions along with this okay so now we have um the",
    "start": "669040",
    "end": "675399"
  },
  {
    "text": "stack being created this one I'm um just creating the the skeleton of the of the stack so it should happen relatively",
    "start": "675399",
    "end": "682120"
  },
  {
    "text": "quickly um so if I go over here to code Pipeline and we give it a refresh we",
    "start": "682120",
    "end": "687959"
  },
  {
    "text": "should hopefully in a moment here see a new stack stood",
    "start": "687959",
    "end": "693959"
  },
  {
    "text": "up as you can see along the bottom here you can uh you can watch the events Flow by so you can watch what step of the",
    "start": "696600",
    "end": "702160"
  },
  {
    "text": "creation process uh cloud formation is in uh this one is going to create a bunch of roles it's going to create some",
    "start": "702160",
    "end": "707880"
  },
  {
    "text": "sample Lambda functions and upload them um it's going to do a bunch of things",
    "start": "707880",
    "end": "714920"
  },
  {
    "text": "all right I'll give it uh 10 more seconds and then I'll pull the Martha Stewart twick and",
    "start": "728680",
    "end": "735680"
  },
  {
    "text": "show you a pre-baked",
    "start": "735680",
    "end": "738639"
  },
  {
    "text": "one okay well here's the exact same template uh this Dev 310 uh so I I ran",
    "start": "745920",
    "end": "753240"
  },
  {
    "text": "this earlier let me let me just click on that so that we're not uh watching cl foration to its thing so uh here is a",
    "start": "753240",
    "end": "759920"
  },
  {
    "text": "much more complicated stack uh here's just an example of automatically creating one so as before we have a",
    "start": "759920",
    "end": "765040"
  },
  {
    "text": "source stage this is where our code is coming from uh now we have a bunch of commit actions uh anything any of these",
    "start": "765040",
    "end": "772320"
  },
  {
    "text": "boxes that are next to each other are happening in parallel so you can have parallel actions within any pipeline",
    "start": "772320",
    "end": "778720"
  },
  {
    "text": "stage uh and then anything below them is a sequential action right so in this case",
    "start": "778720",
    "end": "783920"
  },
  {
    "text": "this is essentially building the code um running some static analysis and if both of those things succeed it will carry on",
    "start": "783920",
    "end": "790240"
  },
  {
    "text": "to do unit testing then we head into the that software release process that we've been talking about right so",
    "start": "790240",
    "end": "797800"
  },
  {
    "text": "um uh deploying code running tests waiting for manual approvals deploying",
    "start": "797800",
    "end": "803639"
  },
  {
    "text": "to a single a running tests on that a deploying to a production uh the rest of",
    "start": "803639",
    "end": "809480"
  },
  {
    "text": "the production a uh deploying to the one box of the next a I'm not going to keep going but you can see because this can",
    "start": "809480",
    "end": "816320"
  },
  {
    "text": "get quite long quite complicated uh and the nice thing is that I didn't have to go build build all of this by scratch uh",
    "start": "816320",
    "end": "822720"
  },
  {
    "text": "I could leverage a cloud formation I I write a template once and then I can push it everywhere I want to uh that",
    "start": "822720",
    "end": "830040"
  },
  {
    "text": "that way I also have a um configuration as code right so I have a template that I can check into my git repository and I",
    "start": "830040",
    "end": "837279"
  },
  {
    "text": "conversion control and I can actually see anytime I want the definition of what my release process looks like if I",
    "start": "837279",
    "end": "842800"
  },
  {
    "text": "want to visually see it I can go to pipelines and realize it there as well uh let's see if I just just because I'm",
    "start": "842800",
    "end": "849880"
  },
  {
    "text": "personally curious okay so stack did create if I go back here there we",
    "start": "849880",
    "end": "858680"
  },
  {
    "text": "go same pipeline",
    "start": "858680",
    "end": "863360"
  },
  {
    "start": "865000",
    "end": "1012000"
  },
  {
    "text": "cool okay so now that we've got our code pipeline set",
    "start": "866199",
    "end": "872079"
  },
  {
    "text": "up we've got something that can automate our release process it's highly compartmentalized so uh our sea and",
    "start": "872079",
    "end": "877399"
  },
  {
    "text": "Veteran will feel comfortable with it uh in any good buddy movie at this point they're starting to feel the love",
    "start": "877399",
    "end": "882600"
  },
  {
    "text": "they've beat the first bad guy they've whatever arrested someone with a uh a traffic ticket or whatever it is right",
    "start": "882600",
    "end": "888560"
  },
  {
    "text": "so they're they're feeling good about themselves it's time to go and take on the next boss uh and it's also time to",
    "start": "888560",
    "end": "893639"
  },
  {
    "text": "introduce our next character which is uh the software Dev manager right um in the",
    "start": "893639",
    "end": "898680"
  },
  {
    "text": "movie this would be of course uh the um the commissioner or uh or the chief of",
    "start": "898680",
    "end": "906079"
  },
  {
    "text": "police so one of the things that happens when you compartmentalize if you do a really good job at it is you end up with",
    "start": "906079",
    "end": "912360"
  },
  {
    "text": "a very long pipeline right so if you if you take this to the nth degree and you have a one box for every a and you",
    "start": "912360",
    "end": "919079"
  },
  {
    "text": "deploy every a and you do phase deployments in every a you end up with something like this right it goes on and",
    "start": "919079",
    "end": "924560"
  },
  {
    "text": "on and on so you've you've traded off one form of complexity for another the problem with an extremely long pipeline",
    "start": "924560",
    "end": "930800"
  },
  {
    "text": "is that you can have lots of changes in different stages of the pipeline and this can be just as confusing as",
    "start": "930800",
    "end": "936079"
  },
  {
    "text": "releasing a big change one one unit at a time so what do you do you you we need",
    "start": "936079",
    "end": "941399"
  },
  {
    "text": "to look for some sort of balance here um typically what I would advise is try to",
    "start": "941399",
    "end": "946800"
  },
  {
    "text": "figure out how to accelerate your release process as you go right so as I showed with code pipelines I can run",
    "start": "946800",
    "end": "952000"
  },
  {
    "text": "things in parallel I would advise starting off slowly just like we did before deploy to a one box maybe go one",
    "start": "952000",
    "end": "957680"
  },
  {
    "text": "AZ at a time for your first piece of software once you see things getting through uh multiple stages of your",
    "start": "957680",
    "end": "963920"
  },
  {
    "text": "release process and succeeding then you can start to uh build confidence in that change and you can start to accelerate",
    "start": "963920",
    "end": "970079"
  },
  {
    "text": "so that's what you see here on the far top right is maybe then we can go to multiple canaras at the same time right",
    "start": "970079",
    "end": "975880"
  },
  {
    "text": "so maybe release the code to multiple one boxes and see how that's going if that's going well we can continue with",
    "start": "975880",
    "end": "981240"
  },
  {
    "text": "the production roll out in parallel if you do this it will shorten your pipeline which means it will shorten any",
    "start": "981240",
    "end": "987040"
  },
  {
    "text": "uh the time it takes for any particular release to get out the door and ultimately that's a good thing uh if you",
    "start": "987040",
    "end": "992720"
  },
  {
    "text": "don't do this and you ship code very frequently you end up with lots of little pieces kind of sprinkled across",
    "start": "992720",
    "end": "998000"
  },
  {
    "text": "many many different stages and that can be quite bad so just a lesson learn",
    "start": "998000",
    "end": "1004560"
  },
  {
    "text": "there this also makes our uh Dev manager happy because code is getting out the door and her schedule isn't getting",
    "start": "1004560",
    "end": "1010480"
  },
  {
    "text": "interrupted that's always good all right so we've talked a little bit about how to compartmentalize I've",
    "start": "1010480",
    "end": "1017079"
  },
  {
    "start": "1012000",
    "end": "1232000"
  },
  {
    "text": "showed you a couple tools that I think can help you along Ong the way uh let's talk about some techniques to avoid",
    "start": "1017079",
    "end": "1022360"
  },
  {
    "text": "disaster in the first place so anytime we talk about avoiding disaster we're of course going to talk",
    "start": "1022360",
    "end": "1028038"
  },
  {
    "text": "about testing I'm not going to spend a lot of time here talking about unit testing I'm",
    "start": "1028039",
    "end": "1034798"
  },
  {
    "text": "hoping that everyone is bought in on the idea that you should test your code if you're not bought in one more person",
    "start": "1034880",
    "end": "1040280"
  },
  {
    "text": "telling you to test your code isn't going to matter so um so everyone should do upfront testing unit integration",
    "start": "1040280",
    "end": "1046319"
  },
  {
    "text": "testing inste I want to talk about continuous testing some people call this uh synthetic traffic or um we also we",
    "start": "1046319",
    "end": "1053320"
  },
  {
    "text": "call this uh continual Canary testing here in uh in adws the reason that I think that you",
    "start": "1053320",
    "end": "1059880"
  },
  {
    "text": "want to do continuous testing is that I think you can catch a variety of bugs in your software by doing upfront testing",
    "start": "1059880",
    "end": "1065200"
  },
  {
    "text": "by do it unit testing or end to end testing or functional testing all of these are good practices and you should absolutely do them but there are a lot",
    "start": "1065200",
    "end": "1071919"
  },
  {
    "text": "of cases especially when we're dealing with distributed web services that upfront testing won't catch specifically",
    "start": "1071919",
    "end": "1077679"
  },
  {
    "text": "things that change outside of a software deployment and for those things we want to be able to catch them we want to know",
    "start": "1077679",
    "end": "1082960"
  },
  {
    "text": "about failures before our customers do and if we're going to do that we're going to need to drive synthetic traffic",
    "start": "1082960",
    "end": "1088159"
  },
  {
    "text": "to our apis or our services to make sure that they're continuously working some of the kinds of failures",
    "start": "1088159",
    "end": "1094600"
  },
  {
    "text": "that I'm talking about um permissions problems right so uh if uh if you change",
    "start": "1094600",
    "end": "1100120"
  },
  {
    "text": "a permission it can have an extremely big and wide impact on your services that usually happens outside of the",
    "start": "1100120",
    "end": "1106039"
  },
  {
    "text": "context of a software change dependencies uh as we all move towards microservices and we have lots",
    "start": "1106039",
    "end": "1112080"
  },
  {
    "text": "and lots of uh tiny pieces all talking to each other uh some uh a dependency",
    "start": "1112080",
    "end": "1117159"
  },
  {
    "text": "that you don't directly own or pay attention to can fail and cause an impact on your service uh that happens",
    "start": "1117159",
    "end": "1122799"
  },
  {
    "text": "again outside of the context of your software deployment change and then Byzantine erors there's a ton of these",
    "start": "1122799",
    "end": "1128280"
  },
  {
    "text": "right so the the the things you didn't test for or um the guy tripping over a",
    "start": "1128280",
    "end": "1134120"
  },
  {
    "text": "power cord or the hardware failure or forgetting to rotate your logs and filling up the hard drive right there's",
    "start": "1134120",
    "end": "1139159"
  },
  {
    "text": "there's lots of things that fail outside of a an immediate software change that happen Downstream that you potentially",
    "start": "1139159",
    "end": "1145559"
  },
  {
    "text": "don't check or or don't catch in your kind of formal testing the other thing I'll call out is",
    "start": "1145559",
    "end": "1153159"
  },
  {
    "text": "that uh one of the reasons we really want to drive synthetic traffic is because in a lot of cases especially for",
    "start": "1153159",
    "end": "1159960"
  },
  {
    "text": "control plane operations so when humans are actually configuring things with your service the call rates are usually",
    "start": "1159960",
    "end": "1166559"
  },
  {
    "text": "relatively modest right even for a large service there are parts of your API footprint that are probably very rarely",
    "start": "1166559",
    "end": "1172080"
  },
  {
    "text": "called so just as a thought of experiment if you if you want to be able to monitor things with 5minute granularity so you want to know roughly",
    "start": "1172080",
    "end": "1178520"
  },
  {
    "text": "within five minutes that something is broken uh there's this Theory called the nyquest rate I guess it's not a theory",
    "start": "1178520",
    "end": "1184679"
  },
  {
    "text": "it's a law rule nist rate and sampling Theory basically says that if you want",
    "start": "1184679",
    "end": "1189760"
  },
  {
    "text": "to know something at granularity X you need to sample it twice as frequently right so in this case if I want to know",
    "start": "1189760",
    "end": "1196080"
  },
  {
    "text": "uh about a failure within 5 minutes I really need to uh have a continuous heartbeat of API calls to it every 2 and",
    "start": "1196080",
    "end": "1202880"
  },
  {
    "text": "a half minutes and that's for five minute data everyone in here I'm sure wants one minute data or sub one minute",
    "start": "1202880",
    "end": "1208640"
  },
  {
    "text": "data right so uh do the math you quickly end up with a lot of API calls to a lot of sparse um apis that you probably",
    "start": "1208640",
    "end": "1215760"
  },
  {
    "text": "cannot rely on your customers calling and letting you know aren't working this is also very important when you're rolling out software because we want to",
    "start": "1215760",
    "end": "1222080"
  },
  {
    "text": "be able to roll back quickly and we can't roll back quickly unless we're um unless we have continuous testing in",
    "start": "1222080",
    "end": "1228679"
  },
  {
    "text": "production that tells us when something is broken or has gone wrong so let me uh let me show you",
    "start": "1228679",
    "end": "1234000"
  },
  {
    "start": "1232000",
    "end": "1474000"
  },
  {
    "text": "another demo I'll I'll uh I'll motivate this a little bit with a auto rollback",
    "start": "1234000",
    "end": "1239919"
  },
  {
    "text": "demo so I'm going to close up some of these so for this demo I'm going to use uh code deploy code deploy is another ad",
    "start": "1240039",
    "end": "1248120"
  },
  {
    "text": "service focused on deploying uh software or any any bits that you want out to",
    "start": "1248120",
    "end": "1254120"
  },
  {
    "text": "ec2 or Auto scaling um so in this one I'm just going to do do a quick auto rollback demo one",
    "start": "1254120",
    "end": "1260400"
  },
  {
    "text": "of the one of the nice features of code deploy excuse me so uh I'm just going to this is my cloudwatch application I'm",
    "start": "1260400",
    "end": "1266320"
  },
  {
    "text": "going to deploy to a set of ec2 instances that I've named Auto rollback I will pick a new version of my",
    "start": "1266320",
    "end": "1276159"
  },
  {
    "text": "software I um in this case I'm going to deploy everything all at once in parallel don't do that but for the for",
    "start": "1276159",
    "end": "1283760"
  },
  {
    "text": "the purposes of a demo U speed things along I'll do that and then as you see down here I have it configured automatically roll back so one of the",
    "start": "1283760",
    "end": "1290320"
  },
  {
    "text": "nice things about code deploy I'll just kick this off is um when I'm doing a software deployment I can I can register",
    "start": "1290320",
    "end": "1297159"
  },
  {
    "text": "cloudwatch alarms uh to the code deploy application and if any of those alarms go into alarm if they trigger while the",
    "start": "1297159",
    "end": "1304320"
  },
  {
    "text": "the roll the roll out is happening code deploy will detect that and automatically stop the deployment and if",
    "start": "1304320",
    "end": "1310120"
  },
  {
    "text": "you want you can also configure code deploy to automatically remediate it by rolling back to the last good version",
    "start": "1310120",
    "end": "1316480"
  },
  {
    "text": "that was deployed so so uh in this case I'm uh just kicking off a deployment here I'll",
    "start": "1316480",
    "end": "1323480"
  },
  {
    "text": "jump in here real quick for those of you not familiar with code deploy I'll just describe what you're looking at up here is a lot of static information about",
    "start": "1323480",
    "end": "1330000"
  },
  {
    "text": "what I just uh requested it's essentially the the files that I'm deploying where they're going to uh the",
    "start": "1330000",
    "end": "1336200"
  },
  {
    "text": "deployment ID down here is the instances that I'm deploying to so in this case I'm just deploying to three ec2",
    "start": "1336200",
    "end": "1342480"
  },
  {
    "text": "instances this will um periodically update and you can watch uh progress as",
    "start": "1342480",
    "end": "1348279"
  },
  {
    "text": "it rolls across the fleet in addition to so now that I've got code deploy up and running I'll I'll",
    "start": "1348279",
    "end": "1354000"
  },
  {
    "text": "go over to cloudwatch so for those of you again not familiar this is cloudwatch cloudwatch is our uh",
    "start": "1354000",
    "end": "1359640"
  },
  {
    "text": "monitoring and alarming tool for AWS customers uh this is uh just a very",
    "start": "1359640",
    "end": "1364760"
  },
  {
    "text": "simple um uh metric that I set up it's it's measuring faults on this uh this uh",
    "start": "1364760",
    "end": "1371919"
  },
  {
    "text": "uh Auto roll back demo Fleet that I have so in in steady state everything is looking good there's no Faults happening",
    "start": "1371919",
    "end": "1377799"
  },
  {
    "text": "we're nice and happy happy uh over here there's uh an alarm associated with cloudwatch let me see if I refresh if I",
    "start": "1377799",
    "end": "1384960"
  },
  {
    "text": "can catch it okay so um I just gave this graph a quick refresh and you can see suddenly we have um faults so likely",
    "start": "1384960",
    "end": "1392440"
  },
  {
    "text": "those Faults Are attributable to this deployment that's going on oh",
    "start": "1392440",
    "end": "1399399"
  },
  {
    "text": "so so uh you can see that the deployment succeeded it beat the",
    "start": "1399520",
    "end": "1406120"
  },
  {
    "text": "graph well that's what you get for doing live demo right let's",
    "start": "1406120",
    "end": "1412039"
  },
  {
    "text": "see yeah so um in this case I probably should have uh made my deployment slower",
    "start": "1412039",
    "end": "1417200"
  },
  {
    "text": "because my deployment finished before the alarm could actually trigger so uh there you go I guess that it drives home",
    "start": "1417200",
    "end": "1422880"
  },
  {
    "text": "my point that you need to monitor things continuously with High granularity um as you can see here um in my previous demo",
    "start": "1422880",
    "end": "1429279"
  },
  {
    "text": "of this uh what what would what I was hoping to have happen of course is that the alarm triggers and an automatic roll",
    "start": "1429279",
    "end": "1435000"
  },
  {
    "text": "back gets kicked off so this is the original deployment it gets stopped so",
    "start": "1435000",
    "end": "1440320"
  },
  {
    "text": "uh as you can see here it succeeded on the first host the alarm went into alarm the it then failed the host that it was",
    "start": "1440320",
    "end": "1447159"
  },
  {
    "text": "uh it it had started mid-flight uh and then it skipped the last host then that deployment stopped and we triggered an",
    "start": "1447159",
    "end": "1454279"
  },
  {
    "text": "automatic roll back which returned the fleet back to its previous state okay so that's a just a quick demo",
    "start": "1454279",
    "end": "1462760"
  },
  {
    "text": "of automatic roll backs and uh a lot of that of course can't happen if you're not driving",
    "start": "1462760",
    "end": "1468760"
  },
  {
    "text": "traffic to your apis during a deployment because you'll never have anything to alarm",
    "start": "1468760",
    "end": "1473919"
  },
  {
    "text": "on cool so um testing is something that both uh our grizzled veteran and our and",
    "start": "1473919",
    "end": "1482640"
  },
  {
    "start": "1474000",
    "end": "1745000"
  },
  {
    "text": "our newbie are very happy about uh now we're going to get into some more modern topics that are going to make our old",
    "start": "1482640",
    "end": "1487760"
  },
  {
    "text": "guy grumpy so let's talk about um immutable infrastructure so before I uh jump into",
    "start": "1487760",
    "end": "1494960"
  },
  {
    "text": "IM mutable infrastructure I'll start by talking about in place deployments so inplace deployments is probably the",
    "start": "1494960",
    "end": "1500840"
  },
  {
    "text": "traditional way that most of you have deployed software in a in a data center or onto host that you typically own um",
    "start": "1500840",
    "end": "1507080"
  },
  {
    "text": "I'll just visualize I'll visually explain this so what we have here is a very simple application fronted by an",
    "start": "1507080",
    "end": "1513159"
  },
  {
    "text": "elastic load balancer and two virtual machines to E2 instances to deploy an to perform an",
    "start": "1513159",
    "end": "1519520"
  },
  {
    "text": "inplace deployment that's not impactful the first thing I'm going to do is I'm going to remove traffic from one of the instances I want to deploy to so I'll",
    "start": "1519520",
    "end": "1526000"
  },
  {
    "text": "stop sending customer requests to it then I will um assume uh take the first",
    "start": "1526000",
    "end": "1532360"
  },
  {
    "text": "version of the application and I'll turn it off once it's off I'll install a new",
    "start": "1532360",
    "end": "1537640"
  },
  {
    "text": "version of the application so V2 once V2 is up I can test it as much as I want I",
    "start": "1537640",
    "end": "1542880"
  },
  {
    "text": "can validate that everything looks as healthy as I care to validate note that this is not causing customer impact",
    "start": "1542880",
    "end": "1548520"
  },
  {
    "text": "because we're not routing traffic to this version two yet it's it's still out of the load balancer from that perspective once we're confident in the",
    "start": "1548520",
    "end": "1555799"
  },
  {
    "text": "change we can reintroduce traffic to the load balancer and our inplace update has happened right so this is the you know very",
    "start": "1555799",
    "end": "1562799"
  },
  {
    "text": "traditional way of doing a software change it's basically Paving bits on top of a pre-existing virtual machine",
    "start": "1562799",
    "end": "1568480"
  },
  {
    "text": "replacing what you have with something new let's talk about so you know uh my",
    "start": "1568480",
    "end": "1575000"
  },
  {
    "text": "generation would say yep that's how you do software change uh the new generation would say that's really old school what the heck are you doing so let's talk",
    "start": "1575000",
    "end": "1582159"
  },
  {
    "text": "about immutable infrastructure so immutable infrastructure is um the religion and blue green is sort of an",
    "start": "1582159",
    "end": "1587919"
  },
  {
    "text": "implement ation So philosophically speaking immutable infrastructure is this idea that rather than mutate state",
    "start": "1587919",
    "end": "1595159"
  },
  {
    "text": "so rather than change uh an existing resource that we have out serving customer traffic we instead introduce a",
    "start": "1595159",
    "end": "1601159"
  },
  {
    "text": "new copy of it that's updated or configured the way we want and then we migrate customers to that new thing",
    "start": "1601159",
    "end": "1606880"
  },
  {
    "text": "right so we don't touch old we don't mutate we keep it immutable and instead we move people to a new one so uh in the",
    "start": "1606880",
    "end": "1613960"
  },
  {
    "text": "context of updating software on an ec2 instance what does this look like uh same exact example here we have a load",
    "start": "1613960",
    "end": "1619880"
  },
  {
    "text": "balancer two instances that we want to update and we have V1 running on one of",
    "start": "1619880",
    "end": "1625440"
  },
  {
    "text": "them this time we're going to spin up an entirely new virtual machine so spin up another ec2 instance uh with the new",
    "start": "1625440",
    "end": "1632000"
  },
  {
    "text": "version of software so now we have version two up and running once that's done we can introduce traffic to it right so tell the load balancer to start",
    "start": "1632000",
    "end": "1638559"
  },
  {
    "text": "sending customers to the new version of the software and then finally turn off the old version of software just like",
    "start": "1638559",
    "end": "1644480"
  },
  {
    "text": "before when we spin up that new virtual machine we can uh tested as much as we want it's not serving any customer",
    "start": "1644480",
    "end": "1650919"
  },
  {
    "text": "traffic it's in isolation we can do whatever we want with it um so some of you might be thinking",
    "start": "1650919",
    "end": "1656760"
  },
  {
    "text": "well that seems more complicated like I had to spin up another virtual machine and get my code on that isn't it just easier to take the thing I already have",
    "start": "1656760",
    "end": "1662600"
  },
  {
    "text": "and update it maybe uh I think the place where this really shines is in roll back situations",
    "start": "1662600",
    "end": "1669200"
  },
  {
    "text": "right so one of the nice things about a roll back when you're doing a blue green deployment is this right so to do a roll",
    "start": "1669200",
    "end": "1674919"
  },
  {
    "text": "back I just reintroduced traffic to the version one of machine which I've kept around for a little while and I can be",
    "start": "1674919",
    "end": "1681240"
  },
  {
    "text": "highly confident that when I start sending customers to that version of my application it's going to work I mean nothing has changed about it the only",
    "start": "1681240",
    "end": "1686640"
  },
  {
    "text": "thing I did was stop sending customer traffic to it and then of course I'm going to unbind version two and I'm",
    "start": "1686640",
    "end": "1692120"
  },
  {
    "text": "right back to where I was so that's a really nice thing um one of the uh",
    "start": "1692120",
    "end": "1698679"
  },
  {
    "text": "excuse me so uh I I would say with the muu infrastructure the roll back story",
    "start": "1698679",
    "end": "1704039"
  },
  {
    "text": "is is something that's that you can be highly confident in unlike in place deployments where where the roll back",
    "start": "1704039",
    "end": "1709159"
  },
  {
    "text": "really means you have to figure out how to undo the state change that you did on the virtual machine and that can be very error prone uh it also means if you if",
    "start": "1709159",
    "end": "1716640"
  },
  {
    "text": "you really want to do it with high confidence you need to with all of your software changes test the roll out and the roll back scenario together at the",
    "start": "1716640",
    "end": "1723760"
  },
  {
    "text": "same time before you go to production uh with this much much much more simple much more straightforward I would also",
    "start": "1723760",
    "end": "1730080"
  },
  {
    "text": "say the roll back is is typically faster in uh in a Blu green deployment because all we're doing is instructing the load",
    "start": "1730080",
    "end": "1735399"
  },
  {
    "text": "balancers to start sending traffic to it again in a roll back in an inplace model we have to figure out how to again undo",
    "start": "1735399",
    "end": "1741559"
  },
  {
    "text": "the changes and then reintroduce traffic so a little bit more work let's do another demo or let's try",
    "start": "1741559",
    "end": "1748200"
  },
  {
    "text": "and do another",
    "start": "1748200",
    "end": "1750639"
  },
  {
    "text": "demo okay so um what what I'm going to demo for you now is uh using Codey to do uh immutable",
    "start": "1755960",
    "end": "1764519"
  },
  {
    "text": "uh blue green deployments uh this is new functionality so this actually isn't even released yet but I figured you know",
    "start": "1764519",
    "end": "1770840"
  },
  {
    "text": "why come all the way to Vegas and not show something new uh if you're an existing code deploy customer and you want to play around with this come find",
    "start": "1770840",
    "end": "1777399"
  },
  {
    "text": "me after the talk uh we can get you signed up for the beta the feature is going to release sometime early next",
    "start": "1777399",
    "end": "1783080"
  },
  {
    "text": "year so what I have here is the typical congratulations page when you uh launch your first code deploy sample",
    "start": "1783080",
    "end": "1788799"
  },
  {
    "text": "application it's just a you know uh it's it's typical welcome to welcome to code",
    "start": "1788799",
    "end": "1794159"
  },
  {
    "start": "1794000",
    "end": "1952000"
  },
  {
    "text": "deploy so now let me do a blue green deployment to this so I'll select blue",
    "start": "1794159",
    "end": "1801559"
  },
  {
    "text": "green so uh this is pretty much the exact same page I filled out before um to create a deployment the only",
    "start": "1801919",
    "end": "1807559"
  },
  {
    "text": "difference you'll notice here is that my deployment type is now blue green uh let",
    "start": "1807559",
    "end": "1814159"
  },
  {
    "text": "me pick a version again uh for the purposes of",
    "start": "1814159",
    "end": "1822399"
  },
  {
    "text": "speed I'll go all at once I'm not going to bother with automatic roll back in this case so let me kick off the deployment",
    "start": "1822399",
    "end": "1829519"
  },
  {
    "text": "here so uh same deployment visualization page we had before uh you'll notice a few things have changed so over here on",
    "start": "1829519",
    "end": "1835640"
  },
  {
    "text": "the rightand pan we don't have a single slider bar but we have it broken down into multiple sliders so the steps that",
    "start": "1835640",
    "end": "1841240"
  },
  {
    "text": "are going to happen with um a Blu green deployment Step One is of course we're going to provision new instances so",
    "start": "1841240",
    "end": "1846320"
  },
  {
    "text": "we're going to uh make a copy of your autoscaling group or spin up new ec2 instances uh that will be the green",
    "start": "1846320",
    "end": "1852399"
  },
  {
    "text": "Fleet the new Fleet that we're going to Target then we'll perform uh the software change so we'll actually just",
    "start": "1852399",
    "end": "1857480"
  },
  {
    "text": "do a traditional Cod deploy deployment onto that new infrastructure once that infrastructure um is deployed",
    "start": "1857480",
    "end": "1865440"
  },
  {
    "text": "to um we will optionally wait so at that point we've stood up your new Fleet it's",
    "start": "1865440",
    "end": "1871559"
  },
  {
    "text": "running um and it has software running on it uh we we then uh you can",
    "start": "1871559",
    "end": "1877080"
  },
  {
    "text": "optionally pause the deployment uh that gives you as the deployer an opportunity to test it or you could even automate",
    "start": "1877080",
    "end": "1882840"
  },
  {
    "text": "the testing at that point right so you can make sure that the green Fleet is working as expected run it through your",
    "start": "1882840",
    "end": "1887919"
  },
  {
    "text": "functional integration tests um send synthetic traffic to it whatever you want to do to build confidence in it um",
    "start": "1887919",
    "end": "1894080"
  },
  {
    "text": "once your confidence in it then you would uh perform the routing step so in a moment here once it's done uh",
    "start": "1894080",
    "end": "1899639"
  },
  {
    "text": "provisioning and deploying you'll see a little button pop up uh that'll allow us to Route traffic so when when we Route",
    "start": "1899639",
    "end": "1906000"
  },
  {
    "text": "traffic um I didn't go through the the setup of this but essentially as part of defining my application now I also",
    "start": "1906000",
    "end": "1912320"
  },
  {
    "text": "include uh an elastic load balancer so once code deploy knows about the load balancer it will hand all the",
    "start": "1912320",
    "end": "1918320"
  },
  {
    "text": "coordination of unbinding old instances and binding new instances for those of you who are a little bit more familiar",
    "start": "1918320",
    "end": "1924000"
  },
  {
    "text": "with code deploy a lot of the existing configuration works so in code deploy you can set up uh your deployments to",
    "start": "1924000",
    "end": "1929880"
  },
  {
    "text": "deploy in a phased fashion right so you can deploy one instance at a time or 10% at a time or 50% at a time all of the",
    "start": "1929880",
    "end": "1937919"
  },
  {
    "text": "same configuration still works with blue green deployments so uh when when I actually perform that traffic swap I can",
    "start": "1937919",
    "end": "1944320"
  },
  {
    "text": "do it in a phase manner I can I can swap two instances in swap out see if I like that and continue on in that",
    "start": "1944320",
    "end": "1951360"
  },
  {
    "text": "fashion uh just scrolling down here just since we have some what you can see here",
    "start": "1951360",
    "end": "1956760"
  },
  {
    "text": "um is is just a a view of our traffic so right now our original instances there's",
    "start": "1956760",
    "end": "1962600"
  },
  {
    "text": "three of them still in the load balancer and we and because we haven't uh instructed code deploy to perform that",
    "start": "1962600",
    "end": "1968880"
  },
  {
    "text": "swap action none of our new uh green instances are in the load balancer this",
    "start": "1968880",
    "end": "1973960"
  },
  {
    "text": "is the same visualization page we had before here I'll give it a refresh and see if I can catch things",
    "start": "1973960",
    "end": "1980600"
  },
  {
    "text": "Midway um so so again this is the same um instance level view of the deployment",
    "start": "1980600",
    "end": "1986279"
  },
  {
    "text": "that's happening uh now we have essentially two fleets we have the replacement Fleet and the original fleet",
    "start": "1986279",
    "end": "1992799"
  },
  {
    "text": "and we also include uh you know traffic status for those so are they uh are they serving traffic um or are they not um as",
    "start": "1992799",
    "end": "2000919"
  },
  {
    "text": "this updates you'll also see life cycle events happening on the new Fleet and of course the original fleet isn't being",
    "start": "2000919",
    "end": "2006760"
  },
  {
    "text": "touched it's just in the load balancer serving customers excuse",
    "start": "2006760",
    "end": "2014960"
  },
  {
    "text": "me excuse me so um as you can see uh provisioning",
    "start": "2018720",
    "end": "2025480"
  },
  {
    "text": "is done now we're just waiting for the deployment to wrap",
    "start": "2025480",
    "end": "2030159"
  },
  {
    "text": "up I'll do the thing I tell my people not to do and spam refresh until it tells me what I want",
    "start": "2032120",
    "end": "2037820"
  },
  {
    "text": "[Laughter] um so we're in after install so we",
    "start": "2037820",
    "end": "2044320"
  },
  {
    "text": "should see this wrap up here pretty",
    "start": "2044320",
    "end": "2048760"
  },
  {
    "text": "quickly sorry say it again have yes",
    "start": "2062159",
    "end": "2069480"
  },
  {
    "text": "yes got it yeah so um just to for everyone so everyone can hear uh the question was um",
    "start": "2075480",
    "end": "2082800"
  },
  {
    "text": "that that step three when I go to SL to uh to flip the capacity am I running any tests uh ahead of that or or tests",
    "start": "2082800",
    "end": "2089358"
  },
  {
    "text": "automatically kicked off so for each of the um each of the hosts there's a this is concept and code deploy called life",
    "start": "2089359",
    "end": "2095720"
  },
  {
    "text": "cycle events this is the the hooks where you can run any code you want we have a before U we've introduced a couple new",
    "start": "2095720",
    "end": "2102119"
  },
  {
    "text": "life cycle events so before we perform the flip is is one of the new ones so um",
    "start": "2102119",
    "end": "2108040"
  },
  {
    "text": "yes you can use that to trigger any kind of testing you want on the green Fleet before we perform the flip",
    "start": "2108040",
    "end": "2114560"
  },
  {
    "text": "yeah okay so let's see",
    "start": "2114560",
    "end": "2120000"
  },
  {
    "text": "here I I'll probably cut it off at this one go ahead",
    "start": "2122280",
    "end": "2127640"
  },
  {
    "text": "tell how long you want to wait okay uh the question was um in the",
    "start": "2127760",
    "end": "2133680"
  },
  {
    "text": "ammo file so someone who clearly us Cod before code deploy has this uh yl file that is essentially telling telling code",
    "start": "2133680",
    "end": "2140480"
  },
  {
    "text": "deploy what scripts you want it to run when it's deploying uh the question was uh in that yo file can I specify how",
    "start": "2140480",
    "end": "2147000"
  },
  {
    "text": "long I want it to wait that configuration actually lives on the deployment group so per um uh per uh",
    "start": "2147000",
    "end": "2154319"
  },
  {
    "text": "stack that you want to deploy to you can individually configure each of those uh to tell us how long you want to wait",
    "start": "2154319",
    "end": "2159800"
  },
  {
    "text": "right so you can tell us to wait you know an hour a day 5 days um or if you",
    "start": "2159800",
    "end": "2166119"
  },
  {
    "text": "don't want to wait um you want you're using continuous deployment and you and you don't want a an a manual action in",
    "start": "2166119",
    "end": "2172200"
  },
  {
    "text": "your your automation you can just tell us to start deploying",
    "start": "2172200",
    "end": "2177079"
  },
  {
    "text": "immediately all right starting to starting to think oh there we go so um now the",
    "start": "2177800",
    "end": "2184880"
  },
  {
    "text": "deployment is ready now uh as I said we've got the green Fleet stood up we've got the deployment done now I can click",
    "start": "2184880",
    "end": "2190839"
  },
  {
    "text": "this route traffic button and this will actually start the process of uh binding",
    "start": "2190839",
    "end": "2196560"
  },
  {
    "text": "the new green Fleet to the to the elastic load balancer and unbinding the old Fleet since I did this all in",
    "start": "2196560",
    "end": "2203560"
  },
  {
    "text": "parallel uh this should happen relatively quickly I'll uh I'll sit here and again spam refresh to see if I can",
    "start": "2203560",
    "end": "2211119"
  },
  {
    "text": "um catch our display in a interesting state",
    "start": "2211119",
    "end": "2216720"
  },
  {
    "text": "sure go ahead I'm sorry ask the",
    "start": "2220599",
    "end": "2228318"
  },
  {
    "text": "question the question was would these two instances use the same database or a different database um that's going to be",
    "start": "2230880",
    "end": "2236800"
  },
  {
    "text": "kind of up to you as the implementer in this example you know this is just I'm I'm thinking of this as a static web",
    "start": "2236800",
    "end": "2242079"
  },
  {
    "text": "service um so they could they could both call the same backend that would be fine",
    "start": "2242079",
    "end": "2247400"
  },
  {
    "text": "um",
    "start": "2247400",
    "end": "2249520"
  },
  {
    "text": "um my first demo happens too fast my second demo too",
    "start": "2256680",
    "end": "2262640"
  },
  {
    "text": "slow yeah that's",
    "start": "2263359",
    "end": "2266759"
  },
  {
    "text": "right go ahead",
    "start": "2269280",
    "end": "2273400"
  },
  {
    "text": "sorry ask it again uh yeah so the question was um",
    "start": "2278520",
    "end": "2284839"
  },
  {
    "text": "will these demos be available uh yeah we could probably make them available if you um go to AWS Labs there's a Code",
    "start": "2284839",
    "end": "2290800"
  },
  {
    "text": "deploy section and we'll see if we can get it all in there um so you can you can check it out there okay so now you",
    "start": "2290800",
    "end": "2296520"
  },
  {
    "text": "see um we've I I managed to finally catch it in a in a intermediate state so now we've bound the the three green",
    "start": "2296520",
    "end": "2303319"
  },
  {
    "text": "instances to the load balancer and we have the original Three instances still in place the next step of course is that",
    "start": "2303319",
    "end": "2309880"
  },
  {
    "text": "we're going to begin the unbinding process for those last instances oh actually um so that that's",
    "start": "2309880",
    "end": "2315920"
  },
  {
    "text": "now completed so now you can see uh all the old instances are gone and now we've",
    "start": "2315920",
    "end": "2321240"
  },
  {
    "text": "essentially completed the the deployment last thing that happens is we um Can optionally terminate your old instances",
    "start": "2321240",
    "end": "2327760"
  },
  {
    "text": "just like the weight step that I talked about in between switching you can specify how long you want us to hold on to your old uh blue Fleet before we",
    "start": "2327760",
    "end": "2336000"
  },
  {
    "text": "before we um terminate the inst distes for you if you want us to not touch it and just leave it there indefinitely and",
    "start": "2336000",
    "end": "2341680"
  },
  {
    "text": "and you uh go and clean it up manually that's also an option most people you know want to keep it around for some",
    "start": "2341680",
    "end": "2347040"
  },
  {
    "text": "number of hours or days after deployment is as a you know a roll back mechanism",
    "start": "2347040",
    "end": "2352800"
  },
  {
    "text": "okay deployments done I'm going to Soldier on",
    "start": "2352800",
    "end": "2357440"
  },
  {
    "start": "2355000",
    "end": "2417000"
  },
  {
    "text": "here all right I have to start talking a little bit faster okay immutable",
    "start": "2360160",
    "end": "2365640"
  },
  {
    "text": "infrastructure um you know and everything when I talk about immutable infrastructure and we talk about blue green deployments the question is uh",
    "start": "2365640",
    "end": "2371160"
  },
  {
    "text": "when should I use them when uh uh should I should I always do blue green deployments in general my advice is",
    "start": "2371160",
    "end": "2376720"
  },
  {
    "text": "prefer mutable infrastructure prefer doing it um if if it if it at all works for you there are a couple Corner cases",
    "start": "2376720",
    "end": "2383280"
  },
  {
    "text": "that'll call out where immutable infrastructure uh can potentially um not be the perfect fit do note that the",
    "start": "2383280",
    "end": "2389920"
  },
  {
    "text": "deployment is slightly longer as you saw we have to spend time standing up virtual machines and then deploying to",
    "start": "2389920",
    "end": "2396119"
  },
  {
    "text": "them clearly deploying to existing virtual machines is going to be a little bit faster um that's an amortised cost",
    "start": "2396119",
    "end": "2402520"
  },
  {
    "text": "in my opinion you know you can spin up those virtual machines out of band and and not really worry about that time but",
    "start": "2402520",
    "end": "2407760"
  },
  {
    "text": "if you're you know Ultra concerned about how long from the time you hit the button to the time it goes into production um you know a mutable",
    "start": "2407760",
    "end": "2414760"
  },
  {
    "text": "infrastructure is going to take a little bit more time uh if you storing State on your ec2",
    "start": "2414760",
    "end": "2420000"
  },
  {
    "text": "instances uh do note that the whole premise here is that we're going to throw those instances away and any state",
    "start": "2420000",
    "end": "2425160"
  },
  {
    "text": "that's sitting on those instances is going to go with them right so if you're storing uh if you're caching data on the",
    "start": "2425160",
    "end": "2430400"
  },
  {
    "text": "instances or you're storing logs or you're storing anything else in a blue green model that's not going to stick",
    "start": "2430400",
    "end": "2435720"
  },
  {
    "text": "around you're going to have to figure out how to get it off my general advice is to leverage other AWS web services of",
    "start": "2435720",
    "end": "2441560"
  },
  {
    "text": "course right so store data in stateful services like S3 Dynamo uh if you're using caching elastic cache",
    "start": "2441560",
    "end": "2448280"
  },
  {
    "text": "Etc uh finally you know when you perform a Blu green deployment there is a period in which you are running more instances",
    "start": "2448280",
    "end": "2454440"
  },
  {
    "text": "than your standard footprint right so we're going to spin up extra copy of our Fleet to be able to move to it so if you",
    "start": "2454440",
    "end": "2460640"
  },
  {
    "text": "are in any way resource constrained which if you are using the cloud you are probably not but let's assume maybe your",
    "start": "2460640",
    "end": "2466359"
  },
  {
    "text": "company um bought just the right amount of reserved instances and won't let you spin up anything else that's something",
    "start": "2466359",
    "end": "2471880"
  },
  {
    "text": "you're going to have to go figure out and negotiate ask for three more instances uh instance hours a",
    "start": "2471880",
    "end": "2478240"
  },
  {
    "text": "deployment so other than that I think uh I kind of I tend to agree with rigs here uh you'd be crazy not to do a mutable",
    "start": "2478240",
    "end": "2484680"
  },
  {
    "text": "deployments still you know there are those that won't oh um this is a uh my my Dev manager is",
    "start": "2484680",
    "end": "2493440"
  },
  {
    "text": "always here to remind me of a couple anti patterns to call out this is one that I occasionally see with blue green",
    "start": "2493440",
    "end": "2498720"
  },
  {
    "start": "2496000",
    "end": "2580000"
  },
  {
    "text": "deployments so people will stand up their green Fleet in their test environment they will test it and test",
    "start": "2498720",
    "end": "2504800"
  },
  {
    "text": "and then they will perform a swap right so they will actually kind of promote between their Stacks right so they'll",
    "start": "2504800",
    "end": "2511200"
  },
  {
    "text": "they'll promote test to production and then they'll move production back down to test I'm not a big fan of this um",
    "start": "2511200",
    "end": "2516880"
  },
  {
    "text": "because it breaks the compartmentalization that we were talking about earlier it means that that uh wall between your test environment",
    "start": "2516880",
    "end": "2522040"
  },
  {
    "text": "and your production environment is now semi-permeable because you have to have permissions that operate across the",
    "start": "2522040",
    "end": "2527599"
  },
  {
    "text": "boundaries um or you have to do some complicated switching of permissions as you promote um so in general I think",
    "start": "2527599",
    "end": "2534480"
  },
  {
    "text": "like if you're going to do a blue green avoid this pattern just spin up a new copy in production and move to it rather",
    "start": "2534480",
    "end": "2540319"
  },
  {
    "text": "than trying to kind of swap between your Stacks again I agree crazy all right",
    "start": "2540319",
    "end": "2546119"
  },
  {
    "text": "let's talk about containers quickly I've got a little bit of time so containers um containers is another you",
    "start": "2546119",
    "end": "2553119"
  },
  {
    "text": "know new technology that you'll encounter um when people ask me uh about",
    "start": "2553119",
    "end": "2558440"
  },
  {
    "text": "how do containers relate to the software release process or the deployment process I start by explaining to me",
    "start": "2558440",
    "end": "2563520"
  },
  {
    "text": "containers are just another turtle on the stack right so they're another form of compartmentalization they're another",
    "start": "2563520",
    "end": "2568640"
  },
  {
    "text": "form of virtualization containers are in and of themselves I I don't think they change",
    "start": "2568640",
    "end": "2574960"
  },
  {
    "text": "the approaches that we will take to deploying software they just add additional assurances which are nice to",
    "start": "2574960",
    "end": "2580240"
  },
  {
    "start": "2580000",
    "end": "2660000"
  },
  {
    "text": "have so let's look at a a Blu graen deployment using containers so here we",
    "start": "2580240",
    "end": "2585520"
  },
  {
    "text": "have you know uh the blue Fleet on the left the green Fleet on the right and we'll visualize the containers as these",
    "start": "2585520",
    "end": "2590599"
  },
  {
    "text": "little gray boxes um if you're using something like Docker you know I typically think of it as a bounding box",
    "start": "2590599",
    "end": "2595880"
  },
  {
    "text": "around in my application right so I get nice assurances about um what my application can access on the virtual",
    "start": "2595880",
    "end": "2602520"
  },
  {
    "text": "machine right so processes file systems ports Etc",
    "start": "2602520",
    "end": "2608079"
  },
  {
    "text": "um in a traditional blue green model I would just stop routing traffic to version one of this and start routing traffic to version two with containers",
    "start": "2608079",
    "end": "2614160"
  },
  {
    "text": "it's essentially the same I need to move my customers from version one to version two uh the thing that's nice about",
    "start": "2614160",
    "end": "2620200"
  },
  {
    "text": "containers is once we draw this uh bounding box around our application if we're highly confident in that there's",
    "start": "2620200",
    "end": "2626359"
  },
  {
    "text": "really no reason why we can't run both versions of our application on a single virtual machine right so rather than",
    "start": "2626359",
    "end": "2632319"
  },
  {
    "text": "spinning up a whole new virtual machine putting containers on it we can actually operate with a lot more confidence using",
    "start": "2632319",
    "end": "2637760"
  },
  {
    "text": "containers in a multi-tenancy way right so I can actually run multiple versions of my application or multiple disparate",
    "start": "2637760",
    "end": "2643720"
  },
  {
    "text": "applications on the same virtual machine and have a fair degree of confidence that that's going to work out to me this",
    "start": "2643720",
    "end": "2649880"
  },
  {
    "text": "is really the the principal advantage of containers as they relate to deployments I don't have to use as many virtual",
    "start": "2649880",
    "end": "2655200"
  },
  {
    "text": "machines um and I save the cost of spinning up a virtual machine when I'm doing a blue green",
    "start": "2655200",
    "end": "2660559"
  },
  {
    "start": "2660000",
    "end": "2712000"
  },
  {
    "text": "deployment so regardless of how you deploy containers are a good thing I don't want to uh come across as as",
    "start": "2660559",
    "end": "2666839"
  },
  {
    "text": "things that they're not you know as I said they create a nice perimeter they add consistency to your development",
    "start": "2666839",
    "end": "2672240"
  },
  {
    "text": "process so another really nice advantage of containers is um if you develop within a container on your desktop and",
    "start": "2672240",
    "end": "2678440"
  },
  {
    "text": "move that onto your production servers you have a higher degree of confidence that that change is actually going to work in production the way it worked in",
    "start": "2678440",
    "end": "2684800"
  },
  {
    "text": "in uh in your test environment because you don't have a bunch of Cru or things that you can access on your Dev desktop",
    "start": "2684800",
    "end": "2690880"
  },
  {
    "text": "that you can't access in production the container is kind of enforcing those best practices uh containers in general",
    "start": "2690880",
    "end": "2696720"
  },
  {
    "text": "are great great packaging mechanism right so they they make a nice little uh bundle that you can move around pretty easily so these are all good reasons to",
    "start": "2696720",
    "end": "2703520"
  },
  {
    "text": "prefer containers but I don't think they fundamentally change the approaches you should take when you're deploying or managing your fleets you should still",
    "start": "2703520",
    "end": "2709920"
  },
  {
    "text": "compartmentalize you should still adopt IM mutable infrastructure one of the anti patterns",
    "start": "2709920",
    "end": "2715680"
  },
  {
    "start": "2712000",
    "end": "2807000"
  },
  {
    "text": "I see with containers everyone uh hears about containers they get excited about it and they go back to their monolithic",
    "start": "2715680",
    "end": "2723520"
  },
  {
    "text": "application and they containerize it I'm going to use air quotes there so they take this big application and they break",
    "start": "2723520",
    "end": "2728839"
  },
  {
    "text": "it into a bunch of microservices I'm going to use more air quotes right um and they create this monstrosity right",
    "start": "2728839",
    "end": "2735200"
  },
  {
    "text": "so they have a bunch of things running in containers that are highly coupled to each other and need to all be on the same virtual machine this does not make",
    "start": "2735200",
    "end": "2742200"
  },
  {
    "text": "for a better deployment process you've taken what used to be uh Deployable as a single unit and now you've made it much",
    "start": "2742200",
    "end": "2747559"
  },
  {
    "text": "more brittle now I have in this case five separate units that all have to be deployed in lock step and I have to know",
    "start": "2747559",
    "end": "2753359"
  },
  {
    "text": "the relationships between the pieces in order to deploy them so my advice is like um it's fine to start U",
    "start": "2753359",
    "end": "2760440"
  },
  {
    "text": "containerizing your application as a first step but don't view that as the end step if you just create 10 little",
    "start": "2760440",
    "end": "2765960"
  },
  {
    "text": "applications that all must be working together on the same box you haven't probably solved your complexity problem",
    "start": "2765960",
    "end": "2771960"
  },
  {
    "text": "instead you want to move to a world like this right where your containers really are operating independent of each other",
    "start": "2771960",
    "end": "2777960"
  },
  {
    "text": "you can run multiple copies of them on the same virtual machine and you can create clusters that can then fail",
    "start": "2777960",
    "end": "2783200"
  },
  {
    "text": "independently right now when I want to update the the green application and in this case it's very straightforward to",
    "start": "2783200",
    "end": "2788680"
  },
  {
    "text": "do so I don't also have to coordinate what the state is of the other uh containers that are running on my",
    "start": "2788680",
    "end": "2794040"
  },
  {
    "text": "virtual machine all right we've made it to data",
    "start": "2794040",
    "end": "2800079"
  },
  {
    "text": "so the final the final showdown data right so what do I do with stateful stuff when I deploy uh how do I deal",
    "start": "2800079",
    "end": "2805640"
  },
  {
    "text": "with it so um many a uh book has been written",
    "start": "2805640",
    "end": "2811880"
  },
  {
    "start": "2807000",
    "end": "2953000"
  },
  {
    "text": "on how to manage data in an Enterprise environment many uh master thesis and",
    "start": "2811880",
    "end": "2817400"
  },
  {
    "text": "dis rotation has probably been written on this I'm clearly not going to go into um the level of depth this topic",
    "start": "2817400",
    "end": "2823319"
  },
  {
    "text": "probably deserves but I I'll cover what I view as probably the most common case for for a lot of customers that's pretty",
    "start": "2823319",
    "end": "2829000"
  },
  {
    "text": "easy to get wrong so in this example I'm not going to talk about any particular data schema uh I'm going to represent",
    "start": "2829000",
    "end": "2835440"
  },
  {
    "text": "everything as shapes just to keep things simple so in this case what I have is a database uh the shape of my data is this",
    "start": "2835440",
    "end": "2841520"
  },
  {
    "text": "beautiful green triangle uh I have a web service here so I publish you know the web service is",
    "start": "2841520",
    "end": "2846880"
  },
  {
    "text": "expecting to pull triangular-shaped data out of my database and then uh my web service has two clients Each of which",
    "start": "2846880",
    "end": "2852880"
  },
  {
    "text": "are also expecting triangular shaped data so what I want to do I want to move to a a new schema right so I want to",
    "start": "2852880",
    "end": "2859920"
  },
  {
    "text": "move to a new shape of data I want to introduce yellow squares the first thing I'm going to do",
    "start": "2859920",
    "end": "2865280"
  },
  {
    "text": "is I'm going to update my service to be able to read and write and speak yellow",
    "start": "2865280",
    "end": "2870839"
  },
  {
    "text": "squares once I do that um everything's simple I just introduce squares for my",
    "start": "2870839",
    "end": "2876839"
  },
  {
    "text": "my database and everything works just fine of course does not what I always",
    "start": "2876839",
    "end": "2883160"
  },
  {
    "text": "inevitably forget about is my clients right which are much harder because they can be all over the place my clients",
    "start": "2883160",
    "end": "2888559"
  },
  {
    "text": "don't know how to speak squares because I haven't uh migrated them to speak squares and so they immediately Break",
    "start": "2888559",
    "end": "2895400"
  },
  {
    "text": "Even though I did a ton of testing on my actual web service and everything worked fine all my apis worked as expected it's",
    "start": "2895400",
    "end": "2901359"
  },
  {
    "text": "when I get to dependencies that I have a problem all right so let's try again uh",
    "start": "2901359",
    "end": "2906400"
  },
  {
    "text": "you will see I've cleverly colored our clients blue and hint um what I really",
    "start": "2906400",
    "end": "2912720"
  },
  {
    "text": "think um most most the the trick to me in managing data is you should really view it as a migration of your clients I",
    "start": "2912720",
    "end": "2919079"
  },
  {
    "text": "think the easiest way to think of it as another type of immutable change right so migrating your clients to a new data",
    "start": "2919079",
    "end": "2925760"
  },
  {
    "text": "format as opposed to performing a software change in place so same thing I want to introduce squares uh first thing",
    "start": "2925760",
    "end": "2932680"
  },
  {
    "text": "I'm going to do is update my my service or my request router to be able to read",
    "start": "2932680",
    "end": "2938359"
  },
  {
    "text": "and write squares I'm also going to make sure that it continues to read and write triangles right so if my clients are",
    "start": "2938359",
    "end": "2943760"
  },
  {
    "text": "requesting our original data format let them keep doing so we don't have to update them yet once I have this in",
    "start": "2943760",
    "end": "2949440"
  },
  {
    "text": "place I can start publishing squares alongside triangles then I can introduce new clients these new clients are my green",
    "start": "2949440",
    "end": "2956000"
  },
  {
    "text": "clients they know how to speak squares once I've actually seen them reading and writing the square data and and they're",
    "start": "2956000",
    "end": "2962880"
  },
  {
    "text": "happy with it then um I can start to drain away traffic I can start to migrate away my clients that are",
    "start": "2962880",
    "end": "2969359"
  },
  {
    "text": "speaking the old data format and eventually I can turn them off and in doing so I've managed to migrate my",
    "start": "2969359",
    "end": "2975160"
  },
  {
    "text": "customers uh to square data without causing an impact um I think this is",
    "start": "2975160",
    "end": "2980240"
  },
  {
    "text": "very similar an approach uh clearly a lot of the complexity here is in that request routing layer so uh having the",
    "start": "2980240",
    "end": "2986839"
  },
  {
    "text": "request router be able to serve two disparate types of customers with the data that they want you have to get that",
    "start": "2986839",
    "end": "2991960"
  },
  {
    "text": "right that's still I believe a lot easier to get right than um a lock step migration of the request router along",
    "start": "2991960",
    "end": "2998839"
  },
  {
    "text": "with all of your clients break that apart and view them as as separate steps so um what can you do to make this",
    "start": "2998839",
    "end": "3006040"
  },
  {
    "text": "easier on yourselves I'll uh I'll do one more demo it's more of a static demo",
    "start": "3006040",
    "end": "3011400"
  },
  {
    "text": "but so um for those of you who are familiar with application load balancers application load balancers are a new",
    "start": "3011400",
    "end": "3017480"
  },
  {
    "text": "load balancing solution that uh go along with classic load balancers also formerly known as elastic load balancers",
    "start": "3017480",
    "end": "3024400"
  },
  {
    "text": "and they have a really cool feature which is um path-based routing so with",
    "start": "3024400",
    "end": "3029839"
  },
  {
    "text": "path-based routing I can actually with a single load balancer specify multiple paths and have those paths route to",
    "start": "3029839",
    "end": "3036599"
  },
  {
    "text": "different compute capacity which is what I've done in this example so here's the load balancer page if I click on",
    "start": "3036599",
    "end": "3042040"
  },
  {
    "text": "listeners over here um I'll show you I have two separate sets of listeners so",
    "start": "3042040",
    "end": "3047480"
  },
  {
    "text": "what what all this is saying is that I have uh for any path that is prefixed with V1 so if I am using restful",
    "start": "3047480",
    "end": "3054680"
  },
  {
    "text": "services in this case and I uh version my path in the URL I can all of that all",
    "start": "3054680",
    "end": "3060440"
  },
  {
    "text": "of the traffic that is prefixed with version one will get routed to my sample app version one all traffic that is on",
    "start": "3060440",
    "end": "3066839"
  },
  {
    "text": "version two will get routed to sample app version two and um then I have these Target groups these Target groups are",
    "start": "3066839",
    "end": "3073880"
  },
  {
    "text": "backed by um ECS so ECS is the ec2 container service so um just like before",
    "start": "3073880",
    "end": "3081520"
  },
  {
    "text": "you'll see I have a very mirrored uh setup I have a sample app version one and a sample app version two and I have",
    "start": "3081520",
    "end": "3089040"
  },
  {
    "text": "um four tasks running for each of them so you could think of this as four copies of my application running on my",
    "start": "3089040",
    "end": "3095480"
  },
  {
    "text": "cluster um again because I'm taking advantage of ECS and containers I can run these copies of my application on",
    "start": "3095480",
    "end": "3102319"
  },
  {
    "text": "the same virtual machines or I can smear them across multiple virtual machines however I want to do it the nice thing",
    "start": "3102319",
    "end": "3107440"
  },
  {
    "text": "here is that the load balancer now acts as that request we so I don't actually have to get as much right as long as I'm",
    "start": "3107440",
    "end": "3113599"
  },
  {
    "text": "versioning my application or or my apis my my restful web services with a version number the E will route to the",
    "start": "3113599",
    "end": "3120359"
  },
  {
    "text": "appropriate application servers and this is just a really dumb static web page but as you can see um here it's the same",
    "start": "3120359",
    "end": "3128319"
  },
  {
    "text": "load balancer that's running both the version one and version two of my application the only difference here is the path so um I think this is kind of a",
    "start": "3128319",
    "end": "3136920"
  },
  {
    "text": "neat trick uh I definitely think if you're if you're looking for uh if you're looking at load bouncing",
    "start": "3136920",
    "end": "3142480"
  },
  {
    "text": "Solutions definitely check out Al check out the path-based routing I think it can make a lot of these uh migration scenarios are really straightforward to",
    "start": "3142480",
    "end": "3151079"
  },
  {
    "text": "do all right my back all right despite a little slowness",
    "start": "3151520",
    "end": "3158440"
  },
  {
    "start": "3155000",
    "end": "3211000"
  },
  {
    "text": "I I managed to finish with a little bit of time left so uh just to quickly go through Lessons Learned again um you",
    "start": "3158440",
    "end": "3165319"
  },
  {
    "text": "know reduce if you want to reduce the blast radius of things you need to introduce changes slowly compartmentalize things and break them",
    "start": "3165319",
    "end": "3171599"
  },
  {
    "text": "up into pieces uh if you want to be able to roll back you really need to have a",
    "start": "3171599",
    "end": "3176640"
  },
  {
    "text": "continuous monitoring or continuous traffic being driven to the applications you want to be able to alarm on uh",
    "start": "3176640",
    "end": "3183000"
  },
  {
    "text": "prefer blue green deployments prefer a mutable infrastructure when you can containers are great use containers when",
    "start": "3183000",
    "end": "3188799"
  },
  {
    "text": "you can but I don't think that they you have to fundamentally rethink the way you deploy your software by using",
    "start": "3188799",
    "end": "3193960"
  },
  {
    "text": "containers and if you're doing a data migration change of course view it as that a migration as opposed to just a",
    "start": "3193960",
    "end": "3200720"
  },
  {
    "text": "standard software update cool I think that's all I have thank you all for spending your last few",
    "start": "3200720",
    "end": "3208990"
  },
  {
    "text": "[Applause]",
    "start": "3208990",
    "end": "3212190"
  }
]