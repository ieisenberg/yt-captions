[
  {
    "start": "0",
    "end": "126000"
  },
  {
    "text": "hi everyone good afternoon thanks for joining us today it's a great pleasure",
    "start": "0",
    "end": "5730"
  },
  {
    "text": "to have you all here hope you're having a great time at read Matt my name is Balaji Eyre with",
    "start": "5730",
    "end": "12360"
  },
  {
    "text": "database professional services I'm here today with my colleague hi good afternoon everyone my name is prologue",
    "start": "12360",
    "end": "17580"
  },
  {
    "text": "Rob I'm an ADA bliss Solutions Architect today's session is optimizing the data",
    "start": "17580",
    "end": "23880"
  },
  {
    "text": "tier in surveillance web application this being a 300 level session we assume",
    "start": "23880",
    "end": "30449"
  },
  {
    "text": "you have a family - understanding of lambda as we all know every web",
    "start": "30449",
    "end": "36750"
  },
  {
    "text": "application needs a data tier it's very important to choose the right data tier based on your workload pattern we",
    "start": "36750",
    "end": "44640"
  },
  {
    "text": "there's no sequel or sequel do you want to add a caching layer in front of your",
    "start": "44640",
    "end": "49920"
  },
  {
    "text": "database you're also trying to answer some very important questions how can I",
    "start": "49920",
    "end": "56250"
  },
  {
    "text": "scale my data tier how can I reduce the lag time how can I reduce the latency",
    "start": "56250",
    "end": "62699"
  },
  {
    "text": "and increase the performance of my application the goal of this session is",
    "start": "62699",
    "end": "68670"
  },
  {
    "text": "to help you that information specifically around choosing the appropriate data tier for your server",
    "start": "68670",
    "end": "74250"
  },
  {
    "text": "list web application we will also look into some VPC configurations some best",
    "start": "74250",
    "end": "80460"
  },
  {
    "text": "practices performance guidelines and some design considerations around language runtimes retries and caching",
    "start": "80460",
    "end": "88520"
  },
  {
    "text": "let's get started we're going to start",
    "start": "88520",
    "end": "93659"
  },
  {
    "text": "with yet anatomy of a typical service application we look into two different",
    "start": "93659",
    "end": "98759"
  },
  {
    "text": "architecture patterns web application and a mobile application then we will",
    "start": "98759",
    "end": "105420"
  },
  {
    "text": "look into how lambda integrates with each of the data tiers dynamodb RDS in",
    "start": "105420",
    "end": "111810"
  },
  {
    "text": "ElastiCache we have excellent demos for each one of them so we will also look",
    "start": "111810",
    "end": "118680"
  },
  {
    "text": "into some additional best practices and we'll have some time for Q&A",
    "start": "118680",
    "end": "124789"
  },
  {
    "start": "126000",
    "end": "126000"
  },
  {
    "text": "here's a construct of a typical web application architecture so in this",
    "start": "127860",
    "end": "136209"
  },
  {
    "text": "example I have a simple blog site as you can see Amazon API gateway is your front",
    "start": "136209",
    "end": "143799"
  },
  {
    "text": "end that's where the users are going to be connecting there will be users",
    "start": "143799",
    "end": "149590"
  },
  {
    "text": "connecting to your website to view the blogs and there will be users trying to",
    "start": "149590",
    "end": "156250"
  },
  {
    "text": "get access to your blog site they're creating a new account they get authorization so in this case I'm using",
    "start": "156250",
    "end": "163150"
  },
  {
    "text": "a Cognito as an example for managing users Cognito",
    "start": "163150",
    "end": "169750"
  },
  {
    "text": "user pools is a new functionality that we released we have some demos that can go into detail of what it offers and",
    "start": "169750",
    "end": "177299"
  },
  {
    "text": "once the users connect to API gateway and lambda is your logic tier in this case where the users can trigger for",
    "start": "177299",
    "end": "184629"
  },
  {
    "text": "signups and they get a SCS email with the verification ID and they can use that for login to your website that's",
    "start": "184629",
    "end": "191260"
  },
  {
    "text": "all provided by kognito and your lambda function will trigger that email once",
    "start": "191260",
    "end": "197019"
  },
  {
    "text": "you get your authorization email you will connect your locs website and at",
    "start": "197019",
    "end": "203319"
  },
  {
    "text": "that point your ad bus lambda can help you connect to each one of the data tiers another architecture pattern is",
    "start": "203319",
    "end": "212680"
  },
  {
    "text": "using a mobile let's say you have users that are connecting to your mobile application same pattern Amazon API",
    "start": "212680",
    "end": "222190"
  },
  {
    "text": "gateway is your front-end and your logic tier is provided by the lambda functions",
    "start": "222190",
    "end": "230430"
  },
  {
    "text": "and your data tier you have different options to connect to if you noticed",
    "start": "230430",
    "end": "241239"
  },
  {
    "text": "we're not using any servers in this in both of these architecture patterns",
    "start": "241239",
    "end": "246930"
  },
  {
    "text": "we're using lambda primarily it's a service way of executing code if you",
    "start": "246930",
    "end": "253660"
  },
  {
    "text": "listen to Werner's keynote this morning he mentioned we moved from pet to cattle",
    "start": "253660",
    "end": "258669"
  },
  {
    "text": "to now on to herd and this is your herd you don't have to",
    "start": "258669",
    "end": "264759"
  },
  {
    "text": "manage any servers or the networking components you're just using compute as",
    "start": "264759",
    "end": "270279"
  },
  {
    "text": "a service provided by lambda in a purely serverless manner in the world of",
    "start": "270279",
    "end": "275770"
  },
  {
    "text": "serverless the hardware becomes invisible and you're primarily",
    "start": "275770",
    "end": "283029"
  },
  {
    "text": "connecting to lambda for executing various components of your code I want",
    "start": "283029",
    "end": "293409"
  },
  {
    "start": "291000",
    "end": "291000"
  },
  {
    "text": "to introduce you to a different data to your options that we have in AWS today the first one is Amazon DynamoDB it's a",
    "start": "293409",
    "end": "301689"
  },
  {
    "text": "document document and key value key value store very highly scalable and",
    "start": "301689",
    "end": "306719"
  },
  {
    "text": "it's a no sequel data store and there's Amazon ElastiCache is an in-memory key",
    "start": "306719",
    "end": "312490"
  },
  {
    "text": "value store it provides fully managed and highly scalable Redis or memcache D",
    "start": "312490",
    "end": "318099"
  },
  {
    "text": "and there's Amazon RDS it is a highly",
    "start": "318099",
    "end": "324400"
  },
  {
    "text": "scalable fully managed relational database supports a variety of database",
    "start": "324400",
    "end": "329889"
  },
  {
    "text": "engines then there's Amazon redshift it's our data warehousing solution primarily for your analytics based",
    "start": "329889",
    "end": "336250"
  },
  {
    "text": "workloads in this specific talk we're going to cover dynamo DB ElastiCache and",
    "start": "336250",
    "end": "341919"
  },
  {
    "text": "RDS there's one decision that you got to",
    "start": "341919",
    "end": "348189"
  },
  {
    "text": "make early on no sequel or sequel so how do you choose that what are some of the",
    "start": "348189",
    "end": "354909"
  },
  {
    "text": "things that you look for to choose to making that decision it depends on the",
    "start": "354909",
    "end": "360849"
  },
  {
    "text": "data you're trying to use easier data that's heavily structured",
    "start": "360849",
    "end": "366479"
  },
  {
    "text": "does it have a partial schema is it denormalized easier data is a key simple",
    "start": "366479",
    "end": "376629"
  },
  {
    "text": "key value pair store for example you're processing a big data stream you're",
    "start": "376629",
    "end": "383740"
  },
  {
    "text": "processing a log stream you're managing some key value pairs we will see examples for some of these",
    "start": "383740",
    "end": "391169"
  },
  {
    "text": "the performance is the performance and availability scale is really the key when it comes to no sequel stores by",
    "start": "391520",
    "end": "402020"
  },
  {
    "text": "using no sequel it provides horizontal scaling options on the other hand their",
    "start": "402020",
    "end": "410599"
  },
  {
    "text": "sequel is your data supports a strict",
    "start": "410599",
    "end": "415849"
  },
  {
    "text": "schema does it require a strict schema does it involve complex relationships between data sets across tables is your",
    "start": "415849",
    "end": "427190"
  },
  {
    "text": "data transactional in nature does it require the acid principles atomic city",
    "start": "427190",
    "end": "435520"
  },
  {
    "text": "consistency isolation and durability then sequel is your option what if your",
    "start": "435520",
    "end": "448039"
  },
  {
    "text": "data is ready to support no sequel but you have a lot of tool sets that are built around sequel and you have a lot",
    "start": "448039",
    "end": "457159"
  },
  {
    "text": "of different applications that already understand sequel so how do you choose",
    "start": "457159",
    "end": "462800"
  },
  {
    "text": "which one to use at that point you have to weigh in the choices depending on",
    "start": "462800",
    "end": "468530"
  },
  {
    "text": "what you're trying to accomplish in your application here are some of the common",
    "start": "468530",
    "end": "475219"
  },
  {
    "start": "473000",
    "end": "473000"
  },
  {
    "text": "use cases that we see using DynamoDB AdTech is very popular using DynamoDB",
    "start": "475219",
    "end": "483320"
  },
  {
    "text": "due to performance and scale and millisecond microsecond latency you can accomplish using DynamoDB let's say",
    "start": "483320",
    "end": "490099"
  },
  {
    "text": "you're trying to place ad and you have only a few seconds to milliseconds to be able to show which ad you want to",
    "start": "490099",
    "end": "495919"
  },
  {
    "text": "display or user session management that's another very common use case IOT",
    "start": "495919",
    "end": "506060"
  },
  {
    "text": "is a very popular use case as well where you're getting a lot of metadata from",
    "start": "506060",
    "end": "511460"
  },
  {
    "text": "millions of devices and we want to provide real-time notifications gaming",
    "start": "511460",
    "end": "519159"
  },
  {
    "text": "are you trying to handle a leaderboard that is constantly changing mobile and",
    "start": "519159",
    "end": "531470"
  },
  {
    "text": "web very popular are you trying to store user profiles for your users that are",
    "start": "531470",
    "end": "536840"
  },
  {
    "text": "connecting to your website and you're trying to capture some details are you",
    "start": "536840",
    "end": "542420"
  },
  {
    "text": "trying to store specific metadata for your user or your application we see",
    "start": "542420",
    "end": "548120"
  },
  {
    "text": "DynamoDB a very common use case for a lot of these patterns so what is the",
    "start": "548120",
    "end": "557210"
  },
  {
    "start": "552000",
    "end": "552000"
  },
  {
    "text": "configuration look like for lambda with DynamoDB since its serverless",
    "start": "557210",
    "end": "564590"
  },
  {
    "text": "application there's no V PC configuration required",
    "start": "564590",
    "end": "569650"
  },
  {
    "text": "you have I am roles for user authentication unlike your traditional",
    "start": "570160",
    "end": "577760"
  },
  {
    "text": "sequel server database you have to have a user ID and a password to connect to",
    "start": "577760",
    "end": "582860"
  },
  {
    "text": "it in this case it supports I am first hand so you can leverage the",
    "start": "582860",
    "end": "590420"
  },
  {
    "text": "fine-grained access control what it really means is you can have user access",
    "start": "590420",
    "end": "596930"
  },
  {
    "text": "specific to your certain growth of your DynamoDB or certain columns of your dynamodb you can accomplish by using",
    "start": "596930",
    "end": "604100"
  },
  {
    "text": "this fine-grained access control that is provided by DynamoDB",
    "start": "604100",
    "end": "608470"
  },
  {
    "text": "dynamodb api offers a very simple user model there are about 15 different API",
    "start": "614990",
    "end": "622110"
  },
  {
    "text": "options that is available for dynamodb create table delete table scan and so",
    "start": "622110",
    "end": "629400"
  },
  {
    "text": "forth and you can invoke concurrent connections scale in our example we're",
    "start": "629400",
    "end": "636150"
  },
  {
    "text": "going to see like how DynamoDB can scale to be able to handle traffic by offering",
    "start": "636150",
    "end": "641400"
  },
  {
    "text": "a simple configuration setting if your",
    "start": "641400",
    "end": "648480"
  },
  {
    "text": "performance need to be increased you can simply dial up your read and write speed and you automatically get that new performance that your",
    "start": "648480",
    "end": "655950"
  },
  {
    "text": "application needs DynamoDB is a persistent data store so your data is",
    "start": "655950",
    "end": "662730"
  },
  {
    "text": "stored in the disk so you can offer you can provide you a single-digit",
    "start": "662730",
    "end": "669050"
  },
  {
    "text": "millisecond latency what if your application needs microsecond latency",
    "start": "669050",
    "end": "676160"
  },
  {
    "text": "what do you do you confront ElastiCache in front of your dynamodb and that can",
    "start": "676160",
    "end": "682830"
  },
  {
    "text": "offer you microsecond latency for your application especially for read performance first demo I'm going to show",
    "start": "682830",
    "end": "693740"
  },
  {
    "text": "your blog application where users will be connecting to API gateway it offers",
    "start": "693740",
    "end": "699630"
  },
  {
    "text": "fully managed card functionalities we will see different HTTP methods for each",
    "start": "699630",
    "end": "705510"
  },
  {
    "text": "of the use cases and that will trigger a lambda function when I first sign up and",
    "start": "705510",
    "end": "712730"
  },
  {
    "text": "once I signed up I'm going to use that user ID and password to create new blogs and manage my blogs",
    "start": "712730",
    "end": "721370"
  },
  {
    "text": "so what I have here it is a simple blog application so it's a signup page where",
    "start": "732450",
    "end": "738510"
  },
  {
    "text": "I'm pulling in my information and once I click some it and I get a verification",
    "start": "738510",
    "end": "743820"
  },
  {
    "text": "code through my email that I have configured using cognero user pool",
    "start": "743820",
    "end": "749870"
  },
  {
    "text": "cognitive user pool is a fully managed user management solution that is available in AWS where I have a lots of",
    "start": "749870",
    "end": "759449"
  },
  {
    "text": "different users here you can set different attributes of some of the questions that you want to request as",
    "start": "759449",
    "end": "766199"
  },
  {
    "text": "they sign up you can set password",
    "start": "766199",
    "end": "772230"
  },
  {
    "text": "policies the minimum link for the password and other settings do you want",
    "start": "772230",
    "end": "782339"
  },
  {
    "text": "to turn on MFA for your users and you",
    "start": "782339",
    "end": "787889"
  },
  {
    "text": "have different message customizations for different code paths you can",
    "start": "787889",
    "end": "793709"
  },
  {
    "text": "remember user devices on how they connect it to you have like different",
    "start": "793709",
    "end": "799680"
  },
  {
    "text": "triggers that can trigger a specific lambda function depending on what you're trying to do for each of the code paths",
    "start": "799680",
    "end": "805100"
  },
  {
    "text": "so I already have a user ID that is created so refresh",
    "start": "805100",
    "end": "812390"
  },
  {
    "text": "and I have published a few blog post as you could see on the back end you'd use",
    "start": "818690",
    "end": "825590"
  },
  {
    "text": "this DynamoDB",
    "start": "825590",
    "end": "828520"
  },
  {
    "text": "you could see the first blog second blog third and welcome and so forth in your DynamoDB table let's take a look at one",
    "start": "835690",
    "end": "841570"
  },
  {
    "text": "of them",
    "start": "841570",
    "end": "843750"
  },
  {
    "text": "I'm going to login and I can see all my blog posts let's say I want to update a",
    "start": "852529",
    "end": "858019"
  },
  {
    "text": "blog post I want to remove this and",
    "start": "858019",
    "end": "865220"
  },
  {
    "text": "publish it then I can go back to my blog site I can see the newly updated already",
    "start": "865220",
    "end": "873740"
  },
  {
    "text": "there so what happens in the back end so what you're connecting to is the API",
    "start": "873740",
    "end": "880970"
  },
  {
    "text": "gateway so API gateway offers all the HTTP functions that you want to",
    "start": "880970",
    "end": "886639"
  },
  {
    "text": "automatically configure so the clients is your is your customers connecting to",
    "start": "886639",
    "end": "892819"
  },
  {
    "text": "that website and that invokes the method request that's going to call the",
    "start": "892819",
    "end": "900199"
  },
  {
    "text": "DynamoDB table so in this case i have configured the method request to perform",
    "start": "900199",
    "end": "906139"
  },
  {
    "text": "certain actions",
    "start": "906139",
    "end": "908558"
  },
  {
    "text": "so these are the different options that is available for you for configures specific user requests when I go to",
    "start": "914280",
    "end": "921450"
  },
  {
    "text": "integration path you notice I am",
    "start": "921450",
    "end": "927420"
  },
  {
    "text": "executing it called - my dynamo DB database so this is how I'm updating to",
    "start": "927420",
    "end": "933060"
  },
  {
    "text": "my dynamo DB database on the backend and",
    "start": "933060",
    "end": "936830"
  },
  {
    "text": "I also have a simple JSON blog for my front-end if my front an application wanted to get the JSON and want to do",
    "start": "941960",
    "end": "949500"
  },
  {
    "text": "some interesting things with that they can access this URL and I can render that information",
    "start": "949500",
    "end": "957050"
  },
  {
    "text": "so let's post a new blog",
    "start": "963020",
    "end": "966490"
  },
  {
    "text": "then I'd refresh my page",
    "start": "987150",
    "end": "990290"
  },
  {
    "text": "sure enough the new blog post appears and there's the entry in your DynamoDB",
    "start": "992650",
    "end": "997710"
  },
  {
    "text": "table that is automatically added which",
    "start": "997710",
    "end": "1003300"
  },
  {
    "text": "we could see from here right so what we saw here your front end is provided by",
    "start": "1003300",
    "end": "1010620"
  },
  {
    "text": "EPA gateway you don't have to create those are the invocation methods that's",
    "start": "1010620",
    "end": "1015750"
  },
  {
    "text": "automatically configured and you just got to sit in the parameters and inside your message where you're invoking the",
    "start": "1015750",
    "end": "1021270"
  },
  {
    "text": "post-match method I'm adding a entry to my dynamodb table and my front end I'm",
    "start": "1021270",
    "end": "1027780"
  },
  {
    "text": "simply querying that request and providing that information",
    "start": "1027780",
    "end": "1033170"
  },
  {
    "start": "1044000",
    "end": "1044000"
  },
  {
    "text": "now I'm going to hand over to my colleague prologue good afternoon",
    "start": "1044640",
    "end": "1049820"
  },
  {
    "text": "so as we just saw Balaji took us through the configuration of enabling lambda",
    "start": "1049820",
    "end": "1057570"
  },
  {
    "text": "functions to talk to back-end data tiers like lambda what I'm going to take us",
    "start": "1057570",
    "end": "1063419"
  },
  {
    "text": "through the next few minutes is lambda connecting to the backend sequel",
    "start": "1063419",
    "end": "1069510"
  },
  {
    "text": "database like any relational databases Aurora my sequel Oracle databases that",
    "start": "1069510",
    "end": "1076140"
  },
  {
    "text": "you want to choose and also an elastic cash layer that you want to front-end in",
    "start": "1076140",
    "end": "1082110"
  },
  {
    "text": "front of your database as well so we will walk through both the configuration and a demo of how lambda can interact",
    "start": "1082110",
    "end": "1089610"
  },
  {
    "text": "with both this back-end data tiers and look at some of the considerations around configuration and performance so",
    "start": "1089610",
    "end": "1098789"
  },
  {
    "text": "I think people who are coming in from the sequel world they pretty much",
    "start": "1098789",
    "end": "1105419"
  },
  {
    "text": "realize that where you'd be using relational databases for mostly strict",
    "start": "1105419",
    "end": "1111480"
  },
  {
    "text": "structured data sets transactional queries and things like that so RDS",
    "start": "1111480",
    "end": "1117059"
  },
  {
    "text": "provides a managed fully managed relational database experience that",
    "start": "1117059",
    "end": "1122130"
  },
  {
    "text": "offers the favorite database that you can set up and provision within a matter of minutes like Oracle Microsoft sequel",
    "start": "1122130",
    "end": "1130470"
  },
  {
    "text": "server from the commercial side and various open source databases like my sequel Postgres Arora and few others so",
    "start": "1130470",
    "end": "1139649"
  },
  {
    "text": "typical use cases wherever you require a relational database with a lambda",
    "start": "1139649",
    "end": "1145740"
  },
  {
    "text": "function that's front ending it you would want to use an RDS and the good",
    "start": "1145740",
    "end": "1151350"
  },
  {
    "text": "thing here is RDS gels very well with the serverless nature of lambda because",
    "start": "1151350",
    "end": "1157830"
  },
  {
    "text": "again here you are not necessarily managing the underlying hardware the",
    "start": "1157830",
    "end": "1163679"
  },
  {
    "text": "operating system and server for your RDS database because it's a managed database",
    "start": "1163679",
    "end": "1168750"
  },
  {
    "text": "experience that you can simply click and launch a database in a few minutes and access the database using sequel",
    "start": "1168750",
    "end": "1175289"
  },
  {
    "text": "endpoints that's all you need to do right all the other vacations of the underlying operating",
    "start": "1175289",
    "end": "1180600"
  },
  {
    "text": "system database configuration backups will be done by the RDS service in",
    "start": "1180600",
    "end": "1186450"
  },
  {
    "text": "addition if you want to easily move or migrate data your from your on-premises",
    "start": "1186450",
    "end": "1193169"
  },
  {
    "text": "databases to ideas we also have database migration service to that you can take",
    "start": "1193169",
    "end": "1199470"
  },
  {
    "text": "advantage to either replicate data for backup RDR or simply use that to migrate",
    "start": "1199470",
    "end": "1205470"
  },
  {
    "text": "your databases to a dubious Amazon",
    "start": "1205470",
    "end": "1210630"
  },
  {
    "start": "1209000",
    "end": "1209000"
  },
  {
    "text": "Aurora is a fast highly available and my sequel fully my sequel compatible",
    "start": "1210630",
    "end": "1217169"
  },
  {
    "text": "database so when the same my sequel compatible database this is not just a",
    "start": "1217169",
    "end": "1223230"
  },
  {
    "text": "fork of my sequel Aurora has been written from the ground up to be able to",
    "start": "1223230",
    "end": "1228360"
  },
  {
    "text": "support the necessary performance and high availability so in order to how did",
    "start": "1228360",
    "end": "1234510"
  },
  {
    "text": "we achieve that is we have separated out or we have decoupled the sequel and the",
    "start": "1234510",
    "end": "1240690"
  },
  {
    "text": "transaction layer away from the underlying data layer that means you can scale your sequel layer which sits on on",
    "start": "1240690",
    "end": "1247890"
  },
  {
    "text": "an IDs ec2 instance whereas the underlying data tier is a high-performance data storage that's",
    "start": "1247890",
    "end": "1254760"
  },
  {
    "text": "shared by the Aurora database so by doing this we are not only decoupling",
    "start": "1254760",
    "end": "1260100"
  },
  {
    "text": "the sequel versus the back in tier but you'll also have the ability to replicate and also take advantage of the",
    "start": "1260100",
    "end": "1267030"
  },
  {
    "text": "high availability nature of the service as you can see any data that is written",
    "start": "1267030",
    "end": "1273570"
  },
  {
    "text": "to Aurora database is replicated across multiple availability zone in a region",
    "start": "1273570",
    "end": "1278669"
  },
  {
    "text": "in addition it can scale to as much as 64 terabytes with up to 15 great",
    "start": "1278669",
    "end": "1284460"
  },
  {
    "text": "replicas this is super helpful if you have a very read heavy workload and you",
    "start": "1284460",
    "end": "1290309"
  },
  {
    "text": "want to distribute read traffic across multiple replicas and what you can do with when you couple with lambda",
    "start": "1290309",
    "end": "1296789"
  },
  {
    "text": "functions you can easily paralyze multiple lambda functions and then try",
    "start": "1296789",
    "end": "1302760"
  },
  {
    "text": "to query the read replicas at the same time so as biology walked through the",
    "start": "1302760",
    "end": "1311070"
  },
  {
    "text": "configuration and perform I'll be doing the same with IDs and ElastiCache so there are two aspects",
    "start": "1311070",
    "end": "1316509"
  },
  {
    "text": "with IDs when you want to invoke or when you want to interact a lambda function",
    "start": "1316509",
    "end": "1321940"
  },
  {
    "text": "to a RDS database number one is since an",
    "start": "1321940",
    "end": "1327279"
  },
  {
    "text": "RDS database lives within every PC that you own and manage lambda would need to",
    "start": "1327279",
    "end": "1334840"
  },
  {
    "text": "be able to access the V PC resources in",
    "start": "1334840",
    "end": "1340090"
  },
  {
    "text": "order to be able to interact with an RDS database lambda functions when you",
    "start": "1340090",
    "end": "1346470"
  },
  {
    "text": "create will have default access to internet that means you can easily call using public endpoint and whatnot",
    "start": "1346470",
    "end": "1353519"
  },
  {
    "text": "however if you want to grant lambda function access to your the PC resources",
    "start": "1353519",
    "end": "1360759"
  },
  {
    "text": "for example IDs elastic cache and your own ec2 instance that you might have an",
    "start": "1360759",
    "end": "1368139"
  },
  {
    "text": "application associated with then you need to make some configuration for your lambda function it will not have the",
    "start": "1368139",
    "end": "1374830"
  },
  {
    "text": "default function that allows you to easily connect to a vp c resource so",
    "start": "1374830",
    "end": "1379960"
  },
  {
    "text": "number one you need to make sure that you allow the appropriate subnet and the security group configuration within the",
    "start": "1379960",
    "end": "1386230"
  },
  {
    "text": "lambda I will show you that in a minute on my demo where you can easily specify what subject your lambda function should",
    "start": "1386230",
    "end": "1393669"
  },
  {
    "text": "be able to talk to with your V PC resources and the security group rule that the lambda should be able to",
    "start": "1393669",
    "end": "1399580"
  },
  {
    "text": "interact with your resources in addition to that lambda would also need to have",
    "start": "1399580",
    "end": "1405429"
  },
  {
    "text": "an I am function execution role because it will not have default access to the",
    "start": "1405429",
    "end": "1411490"
  },
  {
    "text": "resources you'd need to explicitly assign an execution role to the lambda",
    "start": "1411490",
    "end": "1417100"
  },
  {
    "text": "function so that lambda when it needs to talk to a V PC when it needs to talk to",
    "start": "1417100",
    "end": "1422980"
  },
  {
    "text": "an RDS resource it will simply provision an elastic network interface at the",
    "start": "1422980",
    "end": "1429009"
  },
  {
    "text": "backend and that's done by the service and then that he and I would be attached",
    "start": "1429009",
    "end": "1435070"
  },
  {
    "text": "to the V PC resources thereby the lambda function will have a path or routing",
    "start": "1435070",
    "end": "1441220"
  },
  {
    "text": "paths to access your IDs resources and of course the",
    "start": "1441220",
    "end": "1446230"
  },
  {
    "text": "security group rules let's say for example your RDS database should allow inbound rules to allow traffic coming in",
    "start": "1446230",
    "end": "1453880"
  },
  {
    "text": "from the lambda by doing this when you",
    "start": "1453880",
    "end": "1459460"
  },
  {
    "text": "enable access for your lambda to V PC it will also gain access to other peer v",
    "start": "1459460",
    "end": "1464890"
  },
  {
    "text": "pcs that you already have in place including VPN endpoints and your private",
    "start": "1464890",
    "end": "1471130"
  },
  {
    "text": "s3 endpoints that means it can easily take advantage of the private s3 endpoints to be able to talk to s3 as",
    "start": "1471130",
    "end": "1477220"
  },
  {
    "text": "well however keep in mind that as I",
    "start": "1477220",
    "end": "1486640"
  },
  {
    "text": "mentioned by default it will have access to Internet however when you enable a lambda function access to V PC resources",
    "start": "1486640",
    "end": "1494410"
  },
  {
    "text": "it loses access to internet so that's by intentional because we want to ensure",
    "start": "1494410",
    "end": "1500470"
  },
  {
    "text": "that there is separation so what you want to do even if you have your",
    "start": "1500470",
    "end": "1506549"
  },
  {
    "text": "configuration set within your repiy C say Auto assign public IP within your",
    "start": "1506549",
    "end": "1511990"
  },
  {
    "text": "subnet and you have an Internet gateway that is attached to your V PC and all",
    "start": "1511990",
    "end": "1518020"
  },
  {
    "text": "the necessary configuration that is done you will still not be able to have a lambda access the V PC resource and a",
    "start": "1518020",
    "end": "1527410"
  },
  {
    "text": "public endpoint at the same time so what you do for example you might have a",
    "start": "1527410",
    "end": "1533530"
  },
  {
    "text": "situation that a lambda function would need to have access to an RDS at the",
    "start": "1533530",
    "end": "1539260"
  },
  {
    "text": "same time it needs to maybe talk to DynamoDB which is a public endpoint or a",
    "start": "1539260",
    "end": "1544360"
  },
  {
    "text": "kms service which lambda can use to encrypt and decrypt database credentials",
    "start": "1544360",
    "end": "1550419"
  },
  {
    "text": "that you use for your RDS database what do you do with that so you can easily",
    "start": "1550419",
    "end": "1557669"
  },
  {
    "text": "either provision in that instance within your repiy C and have the lambda",
    "start": "1557669",
    "end": "1564490"
  },
  {
    "text": "function associate that with the NAT gateway so that it can route traffic from the lambda function to the internet",
    "start": "1564490",
    "end": "1571330"
  },
  {
    "text": "or to the public a SS endpoints through the NAT gateway you can also easily take",
    "start": "1571330",
    "end": "1576760"
  },
  {
    "text": "advantage of her Amazon VP seen at Gateway very simple you can get up and running",
    "start": "1576760",
    "end": "1581900"
  },
  {
    "text": "with an ADD gateway in couple of minutes with couple of clicks I have the demo as well so by doing that you are also",
    "start": "1581900",
    "end": "1590450"
  },
  {
    "text": "ensuring that you have the right security control in place that means the lambda function will only have outbound",
    "start": "1590450",
    "end": "1596060"
  },
  {
    "text": "access to the internet or to the public endpoint without exposing everything through the NAT gateway at the same time",
    "start": "1596060",
    "end": "1602060"
  },
  {
    "text": "the lambda function can securely access your V PC resources like your database",
    "start": "1602060",
    "end": "1608000"
  },
  {
    "text": "ec2 instances keep in mind that you need to have enough IPS for your en is that",
    "start": "1608000",
    "end": "1615020"
  },
  {
    "text": "means for every lambda invocation it will create the necessary elastic",
    "start": "1615020",
    "end": "1620390"
  },
  {
    "text": "network interface at the back end so that means let's say you invoke a lambda function now you can actually go to the",
    "start": "1620390",
    "end": "1626270"
  },
  {
    "text": "console and you can actually within your account you'll see an en I that was created and after some time due to the",
    "start": "1626270",
    "end": "1633530"
  },
  {
    "text": "nature of lambda write the e and I will simply go away it's cleaned up at the",
    "start": "1633530",
    "end": "1639140"
  },
  {
    "text": "back end because the lambda will go into a cold state and the next time you again rien VOC again in en I is created so",
    "start": "1639140",
    "end": "1646730"
  },
  {
    "text": "make sure that you don't need like unique IP address are realized but just",
    "start": "1646730",
    "end": "1652220"
  },
  {
    "text": "make sure that you have good number of IPs to support lambda access accessing",
    "start": "1652220",
    "end": "1657260"
  },
  {
    "text": "your V PC resources also if you have any",
    "start": "1657260",
    "end": "1663040"
  },
  {
    "text": "easy to instances are your applications within your V PC that has a",
    "start": "1663040",
    "end": "1668600"
  },
  {
    "text": "public-facing or the talks to the internet try to avoid dns resolution of",
    "start": "1668600",
    "end": "1675110"
  },
  {
    "text": "the public hostname when you are accessing the lambda function because it adds the additional latency for it to",
    "start": "1675110",
    "end": "1682760"
  },
  {
    "text": "get the name resolution and then go and talk to the necessary source so let's say you have your IDs database when you",
    "start": "1682760",
    "end": "1690290"
  },
  {
    "text": "launch an audience database within an VPC resource unless you require just don't enable public access to the",
    "start": "1690290",
    "end": "1696740"
  },
  {
    "text": "database that means it will have private IP so that when lambda it will only talk through the private IP layer where there",
    "start": "1696740",
    "end": "1704150"
  },
  {
    "text": "by it does not have to go through a dns resolution process which will add more latency and cost your lambda function",
    "start": "1704150",
    "end": "1712930"
  },
  {
    "text": "from a performance perspective it is very important to choose appropriate RDS",
    "start": "1714620",
    "end": "1720840"
  },
  {
    "text": "instance for high concurrency unlike DynamoDB or ElastiCache which is",
    "start": "1720840",
    "end": "1728010"
  },
  {
    "text": "designed to handle for scale a deus at the back end it's still a relational",
    "start": "1728010",
    "end": "1734130"
  },
  {
    "text": "database right so you need to make sure that the database can support the",
    "start": "1734130",
    "end": "1739560"
  },
  {
    "text": "appropriate number of concurrent connections that you want to issue from your lambda function you're doing maybe",
    "start": "1739560",
    "end": "1744570"
  },
  {
    "text": "hundreds or thousands of invitations from a lambda function to the RDS database constantly in the matter of few",
    "start": "1744570",
    "end": "1751050"
  },
  {
    "text": "minutes then you need to ensure that your database can support that maybe you",
    "start": "1751050",
    "end": "1756660"
  },
  {
    "text": "don't want to set up a t2 database instance and then invoke thousands or ten thousands of lambda invocations to",
    "start": "1756660",
    "end": "1762720"
  },
  {
    "text": "your database because probably that will slow down the entire process so make sure that you choose the appropriate RDS",
    "start": "1762720",
    "end": "1769560"
  },
  {
    "text": "instance especially when you have a high concurrency with lambda functions",
    "start": "1769560",
    "end": "1775610"
  },
  {
    "text": "there's also a an architecture that you can use which we call a skinny c",
    "start": "1775610",
    "end": "1781500"
  },
  {
    "text": "sandwich that means you are throttling the back end differently than the front",
    "start": "1781500",
    "end": "1786720"
  },
  {
    "text": "end so you have huge number of ingress traffic coming in and then you have",
    "start": "1786720",
    "end": "1792510"
  },
  {
    "text": "lambda invocations happening maybe the back end database is not really able to keep up with all the concurrency what",
    "start": "1792510",
    "end": "1799530"
  },
  {
    "text": "you can do is you can have a lambda function and then put a Kinesis stream in between so that the Kinesis stream",
    "start": "1799530",
    "end": "1805380"
  },
  {
    "text": "acts as a buffer layer before another lambda function kicks in and goes and talks to the backend database that way",
    "start": "1805380",
    "end": "1812430"
  },
  {
    "text": "you're introducing a buffer layer between your ingress traffic and back to your data tier however I think we all",
    "start": "1812430",
    "end": "1823020"
  },
  {
    "text": "know that by adding additional layers in between this chance that it can add additional latency so keep that in mind",
    "start": "1823020",
    "end": "1829500"
  },
  {
    "text": "keep that in mind when you are doing large number of invocations another good",
    "start": "1829500",
    "end": "1835110"
  },
  {
    "text": "practice is instantiate database connections outside the function handler so if you are aware of the lambda",
    "start": "1835110",
    "end": "1841350"
  },
  {
    "text": "function right when you write your lambda function you start your initialization and then you have your handler code that gets invoked",
    "start": "1841350",
    "end": "1848670"
  },
  {
    "text": "and iteratively runs right so when you are actually creating the connection",
    "start": "1848670",
    "end": "1854580"
  },
  {
    "text": "which is essentially the database endpoint username password and the connection string and so on and so forth",
    "start": "1854580",
    "end": "1860370"
  },
  {
    "text": "try to do that outside your handler that way the connection is maintained for",
    "start": "1860370",
    "end": "1866790"
  },
  {
    "text": "subsequent reuse especially if you are invoking the lambda function multiple",
    "start": "1866790",
    "end": "1872760"
  },
  {
    "text": "times in a matter of few minutes few seconds the connection pool or the database connection is maintained from",
    "start": "1872760",
    "end": "1879840"
  },
  {
    "text": "the lambda function to the backend database that way it does not have to actually go through the connection",
    "start": "1879840",
    "end": "1885330"
  },
  {
    "text": "process every time however if you are running the lambda function maybe every few hours then you can't help it because",
    "start": "1885330",
    "end": "1893460"
  },
  {
    "text": "it will have to create the connection every time so make sure that you have the appropriate design practice when you",
    "start": "1893460",
    "end": "1899820"
  },
  {
    "text": "are writing your lambda function this various language library is available",
    "start": "1899820",
    "end": "1905190"
  },
  {
    "text": "that will enable you to maintain some connection pool just take a look at it but I think just having a database",
    "start": "1905190",
    "end": "1912240"
  },
  {
    "text": "connection outside the index handler it should be really helpful",
    "start": "1912240",
    "end": "1917030"
  },
  {
    "text": "I think meaning I already talked about that use RDS database definitely when you require faster xx performance",
    "start": "1917429",
    "end": "1924179"
  },
  {
    "text": "especially RDS with lambda works very well for complex query right",
    "start": "1924179",
    "end": "1930120"
  },
  {
    "text": "it definitely provides faster query performance especially when it needs to talk to multiple tables for complex",
    "start": "1930120",
    "end": "1936059"
  },
  {
    "text": "queries joints and things like that each database instance type also has a",
    "start": "1936059",
    "end": "1941520"
  },
  {
    "text": "different max connection setting so make sure that you are also ensuring that you set or fine-tune the max connections the",
    "start": "1941520",
    "end": "1950190"
  },
  {
    "text": "max connection 482 is different than max connection for a C for instance so when",
    "start": "1950190",
    "end": "1956790"
  },
  {
    "text": "you are provisioning the database and you have concurrency with the lamb depending on the workload that you are",
    "start": "1956790",
    "end": "1962280"
  },
  {
    "text": "running make sure that you are fine-tuning that parameter as well so",
    "start": "1962280",
    "end": "1967620"
  },
  {
    "start": "1967000",
    "end": "1967000"
  },
  {
    "text": "the demo I'm showing here is you have a lambda function that axis R connects",
    "start": "1967620",
    "end": "1974280"
  },
  {
    "text": "reach and writes data to an Aurora back in database which is inside your V PC",
    "start": "1974280",
    "end": "1980110"
  },
  {
    "text": "and in order to get your database username password credentials I am using",
    "start": "1980110",
    "end": "1985630"
  },
  {
    "text": "kms which is a public endpoint to be able to decrypt the password at runtime",
    "start": "1985630",
    "end": "1992730"
  },
  {
    "text": "within the lambda function so that you are not entering your username and",
    "start": "1992730",
    "end": "1998260"
  },
  {
    "text": "password you should never in fact hard-code your username and password in",
    "start": "1998260",
    "end": "2003539"
  },
  {
    "text": "in a lambda function right we also today announced environment",
    "start": "2003539",
    "end": "2009059"
  },
  {
    "text": "variable support so you can do some of those but always ensure that don't try too hard code or maybe put your password",
    "start": "2009059",
    "end": "2015630"
  },
  {
    "text": "credential in in the lambda function package in a clear text file right so I",
    "start": "2015630",
    "end": "2022080"
  },
  {
    "text": "am using kms so the encrypt encrypt option that means the the password file that you are",
    "start": "2022080",
    "end": "2029279"
  },
  {
    "text": "encrypting is usually a one-time thing right before you actually invoke you encrypt the password file package up the",
    "start": "2029279",
    "end": "2036779"
  },
  {
    "text": "package the password file along with your lambda function upload that to lambda function and then the next time",
    "start": "2036779",
    "end": "2042690"
  },
  {
    "text": "lambda would needs to connect to the database it simply goes torch the kms uses the keys to decrypt only not",
    "start": "2042690",
    "end": "2050250"
  },
  {
    "text": "encrypt write decrypt and then passes the password in memory back to the function so that the lambda can talk",
    "start": "2050250",
    "end": "2056580"
  },
  {
    "text": "read and write data to the database so that is what I am showing here today so",
    "start": "2056580",
    "end": "2066330"
  },
  {
    "text": "by by doing this what I am showing the functionality here is the lambda",
    "start": "2066330",
    "end": "2072450"
  },
  {
    "text": "function is able to access both RDS resources which is behind a V PC which",
    "start": "2072450",
    "end": "2077908"
  },
  {
    "text": "is the lambda V PC configuration and the not gateway configuration so that it can",
    "start": "2077909",
    "end": "2083398"
  },
  {
    "text": "access talk to the kms public endpoint which is outside the V PC",
    "start": "2083399",
    "end": "2089569"
  },
  {
    "text": "all right let's go with it so let me so",
    "start": "2093770",
    "end": "2103310"
  },
  {
    "text": "have a simple lambda function here meaning I am NOT a very core developer",
    "start": "2103310",
    "end": "2111920"
  },
  {
    "text": "so just forgive my syntactical thing here in the code but it's a simple Python function that essentially has an",
    "start": "2111920",
    "end": "2120020"
  },
  {
    "text": "RDS connection point which is an Aurora database and I have environment variable set for the user name and name and",
    "start": "2120020",
    "end": "2126650"
  },
  {
    "text": "things like that and then I have a function running that essentially",
    "start": "2126650",
    "end": "2131830"
  },
  {
    "text": "connects to the IDs database and maybe just write some records and then read",
    "start": "2131830",
    "end": "2138170"
  },
  {
    "text": "some records from the database right it is a simple function but I think you get the idea that the the main demo",
    "start": "2138170",
    "end": "2145720"
  },
  {
    "text": "functionality is to show how you can easily connect with RDS as well as kms endpoints and you have this function",
    "start": "2145720",
    "end": "2153530"
  },
  {
    "text": "that essentially uses the kms to tree to decrypt the password at runtime and I'm",
    "start": "2153530",
    "end": "2161060"
  },
  {
    "text": "using a regex expression to cap to extract the the exact the password",
    "start": "2161060",
    "end": "2166730"
  },
  {
    "text": "within the encrypted funky file and then passing that in memory back to the",
    "start": "2166730",
    "end": "2172730"
  },
  {
    "text": "function so that it can go and talk read write data to the RDS database so that'sthat's the the code here now let's",
    "start": "2172730",
    "end": "2181730"
  },
  {
    "text": "go ahead and build that meaning the function is by let us go ahead and ensure that so this is my laptop so I",
    "start": "2181730",
    "end": "2197150"
  },
  {
    "text": "have this package here which is essentially",
    "start": "2197150",
    "end": "2202690"
  },
  {
    "text": "which is the lambda function package and you can see this is the app Python code",
    "start": "2210990",
    "end": "2216300"
  },
  {
    "text": "that I just showed you now first we need to package this and then upload to",
    "start": "2216300",
    "end": "2222839"
  },
  {
    "text": "lambda so before as I mentioned before you upload you need to encrypt the",
    "start": "2222839",
    "end": "2228990"
  },
  {
    "text": "password key file so I'll go ahead and so this is my clear text I'm not going",
    "start": "2228990",
    "end": "2237000"
  },
  {
    "text": "to show it however so this is my clear",
    "start": "2237000",
    "end": "2244619"
  },
  {
    "text": "text ASCII text password file they can just be a password string or whatever",
    "start": "2244619",
    "end": "2250710"
  },
  {
    "text": "meaning however format that you are comfortable with so that you can extract that password information within your",
    "start": "2250710",
    "end": "2256109"
  },
  {
    "text": "lambda function so let's go ahead and let for in order to slightly accelerate",
    "start": "2256109",
    "end": "2265260"
  },
  {
    "text": "the process I have I'm just copying pasting the kms command",
    "start": "2265260",
    "end": "2274069"
  },
  {
    "text": "so use a SS KMS encrypt that's my KMS",
    "start": "2276290",
    "end": "2281910"
  },
  {
    "text": "key and then i'm using the plain text file to encrypt and I'm using the the",
    "start": "2281910",
    "end": "2288060"
  },
  {
    "text": "cipher text if I cipher text block in base64 encoding and then I'm generating",
    "start": "2288060",
    "end": "2293640"
  },
  {
    "text": "a encrypted password file there you go",
    "start": "2293640",
    "end": "2299430"
  },
  {
    "text": "so this command goes and talks to my KMS key file generates the password in an",
    "start": "2299430",
    "end": "2306450"
  },
  {
    "text": "encrypted so if I do encrypted so this",
    "start": "2306450",
    "end": "2312240"
  },
  {
    "text": "is a encrypted file right now we are going to copy this file to the lambda",
    "start": "2312240",
    "end": "2321839"
  },
  {
    "text": "directory so there you go now this is your this is our function",
    "start": "2321839",
    "end": "2328849"
  },
  {
    "text": "so we have the encrypted password file we have the package the PI my sequel in order to connect to",
    "start": "2338920",
    "end": "2344980"
  },
  {
    "text": "the database so we have everything here now let's go ahead and zip it up I am",
    "start": "2344980",
    "end": "2354519"
  },
  {
    "text": "just copying",
    "start": "2354519",
    "end": "2357269"
  },
  {
    "text": "so it's now zipped so we have an RDS lambda dot zip everything is ready now",
    "start": "2361320",
    "end": "2368760"
  },
  {
    "text": "let's go to the console so I have the lambda function here so I already have",
    "start": "2368760",
    "end": "2374010"
  },
  {
    "text": "the previous lambda function I am going to we are going to update that with the the new package that we just created so",
    "start": "2374010",
    "end": "2381360"
  },
  {
    "text": "what I am doing here is I am going to use the zip file upload a zip file",
    "start": "2381360",
    "end": "2387230"
  },
  {
    "text": "upload and then use the zip that we just created and then save it so now the",
    "start": "2387230",
    "end": "2398130"
  },
  {
    "text": "lambda function has the new package with the encrypted password file we also have",
    "start": "2398130",
    "end": "2406350"
  },
  {
    "text": "the cloud watch locks open I'll show you that because when we invoke the lambda function it's going to send all the",
    "start": "2406350",
    "end": "2413640"
  },
  {
    "text": "logging to cloud watch so that we can compare and see all the execution that was performed in the lambda and we can",
    "start": "2413640",
    "end": "2420330"
  },
  {
    "text": "also see the Select statement through the cloud watch okay but before that I also quickly want to show in fact so I",
    "start": "2420330",
    "end": "2431850"
  },
  {
    "text": "want to show the VPC configuration for lambda so if you click on advanced",
    "start": "2431850",
    "end": "2438780"
  },
  {
    "text": "settings there you go here you are actually specifying the VPC",
    "start": "2438780",
    "end": "2445080"
  },
  {
    "text": "where the RDS leaves so that the lambda can create an en I attached to the V PC",
    "start": "2445080",
    "end": "2451860"
  },
  {
    "text": "and then talk to your database and then you have your subnets the VPC group the security group and everything mentioned",
    "start": "2451860",
    "end": "2457950"
  },
  {
    "text": "there I also want to show quickly the Aurora database that I have that we are",
    "start": "2457950",
    "end": "2464730"
  },
  {
    "text": "reading and writing into so we have the",
    "start": "2464730",
    "end": "2471030"
  },
  {
    "text": "Aurora database here and you can see",
    "start": "2471030",
    "end": "2477300"
  },
  {
    "text": "some details here it lives in u.s. west to a these are the subnet and then I",
    "start": "2477300",
    "end": "2483210"
  },
  {
    "text": "want to show one more thing which is the NAT part so if you go to the subnet and",
    "start": "2483210",
    "end": "2491970"
  },
  {
    "text": "then say us to be which is where our ideas leaves",
    "start": "2491970",
    "end": "2499220"
  },
  {
    "text": "see the route table and you can see anything out bond 0 0 0 0 which is going",
    "start": "2499220",
    "end": "2506370"
  },
  {
    "text": "out to the Internet will have to go through the NAT gateway instead of",
    "start": "2506370",
    "end": "2511560"
  },
  {
    "text": "Internet gateway so keep in mind as I mentioned even if you specify Internet gateway your lambda function cannot talk",
    "start": "2511560",
    "end": "2517890"
  },
  {
    "text": "to the internet you have to use an ADD gateway or a NAT instance within your V",
    "start": "2517890",
    "end": "2523020"
  },
  {
    "text": "PC ok so the lambda function within the sublet now hacks has access why are the",
    "start": "2523020",
    "end": "2528960"
  },
  {
    "text": "not gateway to the kms and then I showed you the database so we are all good now",
    "start": "2528960",
    "end": "2536760"
  },
  {
    "text": "what I what we can do is I'll also open",
    "start": "2536760",
    "end": "2543830"
  },
  {
    "text": "cloud watch now what we'll do is we'll",
    "start": "2543830",
    "end": "2551280"
  },
  {
    "text": "go ahead and invoke the lambda function",
    "start": "2551280",
    "end": "2557450"
  },
  {
    "text": "so invoke the lambda function let me clear the screen so that it's visible I",
    "start": "2560300",
    "end": "2565710"
  },
  {
    "text": "hope it's visible to all of you in the back so I am just invoking the lambda",
    "start": "2565710",
    "end": "2574440"
  },
  {
    "text": "function and then I am just redirecting the output to an output dot X so that you can we can see the output so as you",
    "start": "2574440",
    "end": "2584550"
  },
  {
    "text": "can see the first time invocation of lambda talking to an IDs it has to go",
    "start": "2584550",
    "end": "2591480"
  },
  {
    "text": "ahead and attach itself to the VPC create the eni and then go and execute",
    "start": "2591480",
    "end": "2598560"
  },
  {
    "text": "the sequel statements that we issued within the lambda function keep in mind it has strategy and I it has to go to",
    "start": "2598560",
    "end": "2604800"
  },
  {
    "text": "kms public endpoint decrypt the password get it back pass it to the function and",
    "start": "2604800",
    "end": "2609860"
  },
  {
    "text": "then read and write records to RDS so the first time is always a cold start it",
    "start": "2609860",
    "end": "2615540"
  },
  {
    "text": "will take X amount of seconds of milliseconds as you can see the status code is 200 which is successful now",
    "start": "2615540",
    "end": "2622590"
  },
  {
    "text": "let's just quickly see the output you can see some new records that have been",
    "start": "2622590",
    "end": "2627660"
  },
  {
    "text": "added but let us go ahead and look at the cloud watch to make sure we can actually",
    "start": "2627660",
    "end": "2635089"
  },
  {
    "text": "see the records so you can see this time 1643 which has just invoked and if you",
    "start": "2635089",
    "end": "2643020"
  },
  {
    "text": "see the cloud watch locks it says success connection - RDS equal instance",
    "start": "2643020",
    "end": "2649730"
  },
  {
    "text": "succeeded and you have all the records that we did a sequels select star and",
    "start": "2649730",
    "end": "2654839"
  },
  {
    "text": "then finally you can see at the bottom the duration which is whatever 16.5",
    "start": "2654839",
    "end": "2660560"
  },
  {
    "text": "milliseconds so if you issue the same command or issue the same execution",
    "start": "2660560",
    "end": "2667920"
  },
  {
    "text": "sequel now because the lambda function and the container behind that is already",
    "start": "2667920",
    "end": "2673470"
  },
  {
    "text": "started it will just reuse the connection as I said without having to",
    "start": "2673470",
    "end": "2679050"
  },
  {
    "text": "go back and do all the things the yin ice is in place everything is placed the next time it would be much lesser and",
    "start": "2679050",
    "end": "2687170"
  },
  {
    "text": "Balaji will also demonstrate that in his code as well so as we saw that using the",
    "start": "2687170",
    "end": "2694740"
  },
  {
    "text": "VPC configuration the nat configuration you have lambda accessing both VPC",
    "start": "2694740",
    "end": "2699839"
  },
  {
    "text": "resources and public endpoint and not only public endpoint it can go and talk to your resources within your on-premise",
    "start": "2699839",
    "end": "2706560"
  },
  {
    "text": "data center right because lambda has access to internet yeah he can go and talk to your connection within if you",
    "start": "2706560",
    "end": "2713670"
  },
  {
    "text": "have a VPN connection or a direct connector whatnot it can go and talk to some of your application resource",
    "start": "2713670",
    "end": "2718980"
  },
  {
    "text": "on-premise as well now let's switch back to",
    "start": "2718980",
    "end": "2726710"
  },
  {
    "text": "all right so it's not hard marrying once you have",
    "start": "2732369",
    "end": "2740390"
  },
  {
    "text": "the initial configuration in place it's pretty much it iterative process so just make sure that you follow some of the",
    "start": "2740390",
    "end": "2747110"
  },
  {
    "text": "best practices that I outlined there now we want to ElastiCache ElastiCache",
    "start": "2747110",
    "end": "2756790"
  },
  {
    "start": "2750000",
    "end": "2750000"
  },
  {
    "text": "people who maintain and manage databases right we all know that database",
    "start": "2756790",
    "end": "2763850"
  },
  {
    "text": "performance is dependent on the back-end disk i/o and things like that however",
    "start": "2763850",
    "end": "2769780"
  },
  {
    "text": "there are only certain things that you can optimize your database to improve",
    "start": "2769780",
    "end": "2774860"
  },
  {
    "text": "performance right if you require very low latency in the order of microseconds when you are doing",
    "start": "2774860",
    "end": "2781010"
  },
  {
    "text": "concurrent transaction at scale meaning one or two transactions that's fine but keep in mind that you always need to",
    "start": "2781010",
    "end": "2787760"
  },
  {
    "text": "plan for concurrency at scale in which case it's always a good practice that",
    "start": "2787760",
    "end": "2794060"
  },
  {
    "text": "you add a que caching layer in front of your database right and that is the most common use case that we always know with",
    "start": "2794060",
    "end": "2801200"
  },
  {
    "text": "caching when you say caching we always immediately get our mind set saying yeah",
    "start": "2801200",
    "end": "2807050"
  },
  {
    "text": "you can put that put a cache in front of your database and that's it however elastic cache so elastic as supports",
    "start": "2807050",
    "end": "2814550"
  },
  {
    "text": "both memcache D as well as Redis so it supports both versions that you can configure based on your preference",
    "start": "2814550",
    "end": "2821300"
  },
  {
    "text": "however in addition to just pure caching for improving read performance there are",
    "start": "2821300",
    "end": "2826490"
  },
  {
    "text": "various other use cases that people are our customers are using ElastiCache one is Redis not only provides pure caching",
    "start": "2826490",
    "end": "2834770"
  },
  {
    "text": "but also acts as an in-memory data store data structure that means it's a full data structure with with less sorts and",
    "start": "2834770",
    "end": "2842120"
  },
  {
    "text": "lot of things so it's it's nothing but a no sequel database except that it is in",
    "start": "2842120",
    "end": "2848270"
  },
  {
    "text": "memory dynamodb say this base no sequel Redis ElastiCache is a no sequel in",
    "start": "2848270",
    "end": "2855110"
  },
  {
    "text": "memory and you get fast performance and capabilities of a no sequel database so",
    "start": "2855110",
    "end": "2860510"
  },
  {
    "text": "definitely a lot of use cases around that especially around high-performance leaderboards session management where",
    "start": "2860510",
    "end": "2867830"
  },
  {
    "text": "you need in the order of microsecond millisecond latency because you don't have the time to wait and get back the response and",
    "start": "2867830",
    "end": "2874730"
  },
  {
    "text": "whatnot right and you can also use that as an even counter quick given counter ready supports increment counter sitamma",
    "start": "2874730",
    "end": "2881450"
  },
  {
    "text": "City right atomic counters so you can if you want to simply increment counter decrement counter quickly you can do",
    "start": "2881450",
    "end": "2888230"
  },
  {
    "text": "that at very fast pace so same thing configuration and performance let's look",
    "start": "2888230",
    "end": "2895550"
  },
  {
    "start": "2891000",
    "end": "2891000"
  },
  {
    "text": "at that configuration since ElastiCache also lives within your V PC you need to",
    "start": "2895550",
    "end": "2903530"
  },
  {
    "text": "go through the same configuration that I just showed for IDs database it's essentially a lambda configuration for V",
    "start": "2903530",
    "end": "2910490"
  },
  {
    "text": "PC that's it it's not like particular to RDS or easy tor ElastiCache as long as",
    "start": "2910490",
    "end": "2915890"
  },
  {
    "text": "you enable the V PC configuration for your lambda it can access any of these resources provided that it's in the",
    "start": "2915890",
    "end": "2921860"
  },
  {
    "text": "appropriate subnet and whatnot you can also use simply use I am roles to be able to manage access authentication to",
    "start": "2921860",
    "end": "2928550"
  },
  {
    "text": "your elastic resources RDS you require username password for your database I am",
    "start": "2928550",
    "end": "2935120"
  },
  {
    "text": "won't work won't cut it for you there right so you require the additional configuration of username password",
    "start": "2935120",
    "end": "2942410"
  },
  {
    "text": "management but here you don't have such complexity and whenever you are writing",
    "start": "2942410",
    "end": "2948770"
  },
  {
    "text": "lambda functions for ElastiCache access try to take advantage of some of the libraries that are provided note library",
    "start": "2948770",
    "end": "2955460"
  },
  {
    "text": "no disk or a PI memcache that allow you to actually have the lambda function discover the ElastiCache cluster nodes",
    "start": "2955460",
    "end": "2962170"
  },
  {
    "text": "within your function so that it does not have to go and look for it the nodes and things like that especially in failure",
    "start": "2962170",
    "end": "2968360"
  },
  {
    "text": "conditions simple right from a performance perspective again",
    "start": "2968360",
    "end": "2975910"
  },
  {
    "text": "ElastiCache is meant to provide concurrency at scale because of the",
    "start": "2975910",
    "end": "2981170"
  },
  {
    "text": "in-memory data structure and the in-memory caching layer it it is able to",
    "start": "2981170",
    "end": "2986600"
  },
  {
    "text": "provide you with fast microsecond latency to your application at scale however you also need to ensure that you",
    "start": "2986600",
    "end": "2993500"
  },
  {
    "text": "are using the appropriate instance type with elastic cache as well right although even a single ElastiCache",
    "start": "2993500",
    "end": "3000220"
  },
  {
    "text": "instance node can support concurrency in the high-order upper bound of",
    "start": "3000220",
    "end": "3006759"
  },
  {
    "text": "millions of transactions requests per second but if you are doing that at very",
    "start": "3006759",
    "end": "3012819"
  },
  {
    "text": "large scale just ensure that you're selecting the appropriate ElastiCache instance for your lambda function",
    "start": "3012819",
    "end": "3018400"
  },
  {
    "text": "especially with lambda functions it's quite important but it is pipeline so",
    "start": "3018400",
    "end": "3028319"
  },
  {
    "text": "radius is a TCP server that means it's based on request response architecture",
    "start": "3028319",
    "end": "3035499"
  },
  {
    "text": "right so you have a request sent to the ready server Redis response back to the",
    "start": "3035499",
    "end": "3042579"
  },
  {
    "text": "client so you send three requests Redis will process that one at a time request",
    "start": "3042579",
    "end": "3050619"
  },
  {
    "text": "response which means it is kind of a a serialized that means it has to for",
    "start": "3050619",
    "end": "3056109"
  },
  {
    "text": "every request it has to complete the response time which will add the round-trip latency for every request",
    "start": "3056109",
    "end": "3062589"
  },
  {
    "text": "right while that is okay if you are doing single reads and writes are access",
    "start": "3062589",
    "end": "3070150"
  },
  {
    "text": "however in lambda functions when you are doing batch updates to Redis strings",
    "start": "3070150",
    "end": "3076539"
  },
  {
    "text": "less counters like hundreds of batch updates right then without using",
    "start": "3076539",
    "end": "3083920"
  },
  {
    "text": "pipeline you will have a latency issue and then that can impact your lambda function as well keep in mind lambda is",
    "start": "3083920",
    "end": "3091480"
  },
  {
    "text": "a transient compute system that can run for five minutes and so on so forth so just always keep that in mind right so",
    "start": "3091480",
    "end": "3101259"
  },
  {
    "text": "ladies pipeline is super helpful if you want to do real bulk upload updates to",
    "start": "3101259",
    "end": "3107440"
  },
  {
    "text": "the Redis back-end so that the pipeline what it will do is it does not have to",
    "start": "3107440",
    "end": "3114519"
  },
  {
    "text": "wait for each response or each request that means if you are doing hundreds and",
    "start": "3114519",
    "end": "3120309"
  },
  {
    "text": "thousands of updates it does not have to send the response one by one rather it queues everything in memory",
    "start": "3120309",
    "end": "3127150"
  },
  {
    "text": "and then it just sends a response or you can read that one one time so it",
    "start": "3127150",
    "end": "3133720"
  },
  {
    "text": "drastically reduces the round-trip latency with between lambda functions and elastic cash read is super",
    "start": "3133720",
    "end": "3140240"
  },
  {
    "text": "helpful right however given the memory constraints and whatnot when you are",
    "start": "3140240",
    "end": "3146570"
  },
  {
    "text": "doing batch bulk updates keep in mind that you might want to batch it up maybe",
    "start": "3146570",
    "end": "3153190"
  },
  {
    "text": "hundreds or thousands or 10,000 requests per second if you have say million updates you probably don't want to issue",
    "start": "3153190",
    "end": "3160310"
  },
  {
    "text": "that at one set so issue a batch of 100,000 and then the second hundred thousand third hundred thousand three a",
    "start": "3160310",
    "end": "3166850"
  },
  {
    "text": "lambda function you can iteratively do that right through lazy load so here",
    "start": "3166850",
    "end": "3173900"
  },
  {
    "text": "again you need to decide whether your application or your lambda function can",
    "start": "3173900",
    "end": "3178940"
  },
  {
    "text": "sustain read latency versus write latency so when you are doing so since",
    "start": "3178940",
    "end": "3187700"
  },
  {
    "text": "elastic cache are even radius and memcache T is not a transparent caching",
    "start": "3187700",
    "end": "3194300"
  },
  {
    "text": "layer so when I say transparent not transparent I mean to say that unlike a",
    "start": "3194300",
    "end": "3199970"
  },
  {
    "text": "traditional cache based storage system let's say it writes through and then the data is updated twice you have to have",
    "start": "3199970",
    "end": "3207560"
  },
  {
    "text": "your client application be able to handle that right to your elastic cache",
    "start": "3207560",
    "end": "3212780"
  },
  {
    "text": "as well as to the back-end database so your application has to be be able to do",
    "start": "3212780",
    "end": "3219230"
  },
  {
    "text": "that right so if you are doing lazy load right a request comes in it looks up in",
    "start": "3219230",
    "end": "3226640"
  },
  {
    "text": "the cache cache miss goes back to the database gets the request and then your",
    "start": "3226640",
    "end": "3234590"
  },
  {
    "text": "client application the code that you are written at the time should be able to add that record back to the Redis cash",
    "start": "3234590",
    "end": "3241610"
  },
  {
    "text": "or ElastiCache in which case the round-trip latency for read/write will",
    "start": "3241610",
    "end": "3249590"
  },
  {
    "text": "slightly increase because one request to the cache layer at the first cache miss",
    "start": "3249590",
    "end": "3256670"
  },
  {
    "text": "goes to the database second trip and then finally the application also has",
    "start": "3256670",
    "end": "3264140"
  },
  {
    "text": "write back to the cache because it sees that okay this needs to be in the cache so three trips",
    "start": "3264140",
    "end": "3271020"
  },
  {
    "text": "it adds the right latency however if you are doing right through then you need to",
    "start": "3271020",
    "end": "3279900"
  },
  {
    "text": "see the read latency right so usually people are I'm saying applications are",
    "start": "3279900",
    "end": "3287100"
  },
  {
    "text": "both tuned towards a little latency on the right side then on the read you",
    "start": "3287100",
    "end": "3292980"
  },
  {
    "text": "always want to get the reads faster right it's it's always by nature when you want to run a query you need to get",
    "start": "3292980",
    "end": "3299460"
  },
  {
    "text": "the reads faster but you are willing to make the compromise for writes little bit longer because you know that it",
    "start": "3299460",
    "end": "3306150"
  },
  {
    "text": "always takes that additional bit of time when you are doing some writes as supposed to read because the also it",
    "start": "3306150",
    "end": "3313620"
  },
  {
    "text": "depends on the nature of your application but generally applications are more sensitive to reads than to the",
    "start": "3313620",
    "end": "3319230"
  },
  {
    "text": "rights so make sure that you handle that within the ElastiCache especially for",
    "start": "3319230",
    "end": "3324990"
  },
  {
    "text": "lambda functions memcache T is ideally suited for read heavy workloads that",
    "start": "3324990",
    "end": "3331140"
  },
  {
    "text": "means memcache T provides very high performance for caching whereas Redis",
    "start": "3331140",
    "end": "3337370"
  },
  {
    "text": "because it's not only a caching layer but it also is an in-memory data structure like a no sequel database",
    "start": "3337370",
    "end": "3344300"
  },
  {
    "text": "radius is more suited towards write heavy workloads because it can write",
    "start": "3344300",
    "end": "3351270"
  },
  {
    "text": "using the data structures and whatnot so depending on your application function",
    "start": "3351270",
    "end": "3357210"
  },
  {
    "text": "you can evaluate some of this and I",
    "start": "3357210",
    "end": "3362430"
  },
  {
    "text": "talked about that instead of updating the cache right you can easily just invalidate the cache and then when you",
    "start": "3362430",
    "end": "3368910"
  },
  {
    "text": "are actually you have the client application write the data back write",
    "start": "3368910",
    "end": "3374040"
  },
  {
    "text": "the data to the caching layer so you are not worried about the hotness of the",
    "start": "3374040",
    "end": "3380280"
  },
  {
    "text": "cache or the data within the cache but rather the client application is able to handle that additional latency so that",
    "start": "3380280",
    "end": "3386400"
  },
  {
    "text": "when it reads or writes it can get it back from the cache layer all right so I",
    "start": "3386400",
    "end": "3397290"
  },
  {
    "start": "3394000",
    "end": "3394000"
  },
  {
    "text": "am going to now hand it back to Balaji for him to walk through couple of demos",
    "start": "3397290",
    "end": "3403080"
  },
  {
    "text": "that we have for alas to cache with lambda and also some IOT",
    "start": "3403080",
    "end": "3408630"
  },
  {
    "text": "with elastic cache and lambda as well so those are cool demos and take us through the rest of the presentation thank you",
    "start": "3408630",
    "end": "3415069"
  },
  {
    "text": "thanks Brad so we have a four minutes left so I'm going to try to do my best",
    "start": "3415069",
    "end": "3420150"
  },
  {
    "text": "to cover some of these so just to quickly summarize we noticed how we were able to use fully managed service right",
    "start": "3420150",
    "end": "3426510"
  },
  {
    "text": "from user creation all the way to your front has to be four endpoints to your",
    "start": "3426510",
    "end": "3431579"
  },
  {
    "text": "lambda invocation all the way to your data tier if you're a web application developer or a mobile application developer you know how this important",
    "start": "3431579",
    "end": "3438150"
  },
  {
    "text": "this is that you don't have to manage your users or you don't have to manage your function invitations and with a",
    "start": "3438150",
    "end": "3443609"
  },
  {
    "text": "single click of a button you can increase the performance of your logic tier or your data tier in add to any",
    "start": "3443609",
    "end": "3449779"
  },
  {
    "text": "range to support your application so what I'm going to show right now is using elastic cash and lambda an API",
    "start": "3449779",
    "end": "3456660"
  },
  {
    "text": "gateway I have a simple application that's that connects to the memcache D on the backend and I have another demo",
    "start": "3456660",
    "end": "3465599"
  },
  {
    "text": "using IOT devices where I'm streaming a lot of devices that connects to the register on the backend so in this",
    "start": "3465599",
    "end": "3470910"
  },
  {
    "text": "example what I have is a API gateway where customers are going to be connecting from the what you see as",
    "start": "3470910",
    "end": "3477270"
  },
  {
    "text": "client and the integration request is going to be the one sending the request to my lambda function for my logic tier",
    "start": "3477270",
    "end": "3484109"
  },
  {
    "text": "on the back end is going to connect to your memcache D database so integration requests I have the lambda function that",
    "start": "3484109",
    "end": "3491099"
  },
  {
    "text": "is mapped once I deploy the API gateway and I have a URL that is available for",
    "start": "3491099",
    "end": "3496710"
  },
  {
    "text": "my for me to access this is what your customers or your clients will be accessing this is my lambda function one",
    "start": "3496710",
    "end": "3502770"
  },
  {
    "text": "of the best practices about as Brella I talked about in the printed talk you",
    "start": "3502770",
    "end": "3507839"
  },
  {
    "text": "want to be able to define your connection out outside of your handler so this enables your connection to be we",
    "start": "3507839",
    "end": "3514529"
  },
  {
    "text": "can't we invoked and you don't have to see you're not closing the connection here right you don't have to because",
    "start": "3514529",
    "end": "3520319"
  },
  {
    "text": "lambda on the container on the back end it's smart enough to know there's a connection that is active so I'm going to go ahead and reuse the connection and",
    "start": "3520319",
    "end": "3526380"
  },
  {
    "text": "let's say if you're downloading a file or anything like that in your container",
    "start": "3526380",
    "end": "3531450"
  },
  {
    "text": "it'll be available for you to access so this is the function that I'm accessing on and for my lambda and this is my",
    "start": "3531450",
    "end": "3538319"
  },
  {
    "text": "ElastiCache node and what I'm going to do I'm going to access the production URL you notice",
    "start": "3538319",
    "end": "3549099"
  },
  {
    "text": "there's a bit of a delay this is what we to call a cold start what it means is as",
    "start": "3549099",
    "end": "3554560"
  },
  {
    "text": "proud of highlighted in this talk as well there the container is trying to spin up on the back end so now we have",
    "start": "3554560",
    "end": "3561760"
  },
  {
    "text": "access now we have a value so what's happening in the back end because it's lambda function is invoked for the first",
    "start": "3561760",
    "end": "3568210"
  },
  {
    "text": "time I haven't invoked it before to specifically display the cold start scenario it's typical for a common web",
    "start": "3568210",
    "end": "3574930"
  },
  {
    "text": "applications - for users to connect in the morning and at and when evening and",
    "start": "3574930",
    "end": "3580270"
  },
  {
    "text": "late night the users will bleed out and your lambda function is not getting invoked so we can get into a state where the first person connecting in the next",
    "start": "3580270",
    "end": "3586839"
  },
  {
    "text": "day morning can't experience some sort the same similar delay so what can you",
    "start": "3586839",
    "end": "3591910"
  },
  {
    "text": "do in the back end you can have a cloud watch alarm run at frequent intervals that can invoke your lambda functions so",
    "start": "3591910",
    "end": "3598960"
  },
  {
    "text": "that way it's always in a warm state so what happens when I connect to this link for the second time I'm going to open",
    "start": "3598960",
    "end": "3605650"
  },
  {
    "text": "incognito window and access this function what happens when I access it",
    "start": "3605650",
    "end": "3611619"
  },
  {
    "text": "subsequently we don't see that delay anymore right that is that is really",
    "start": "3611619",
    "end": "3617050"
  },
  {
    "text": "what you how do you want to configure your application so now we have a second demo what I have here is using IOT I",
    "start": "3617050",
    "end": "3623050"
  },
  {
    "text": "have a simulator where I am publishing a lot of devices assimilating devices and",
    "start": "3623050",
    "end": "3628420"
  },
  {
    "text": "the temperature and humidity and IP information into my eight OBS IOT service alias IOT service is a fully",
    "start": "3628420",
    "end": "3635950"
  },
  {
    "text": "managed IOT service it can support billions of devices and and trillions of messages into into the system so I have",
    "start": "3635950",
    "end": "3643630"
  },
  {
    "text": "a sensor hub that is set up and here this is this is where I'm accessing the",
    "start": "3643630",
    "end": "3649329"
  },
  {
    "text": "lambda function with that query information I'm getting the query from all the temperature readings and",
    "start": "3649329",
    "end": "3654819"
  },
  {
    "text": "invoking the lambda functions on the backend so this is my IOT mqtt client",
    "start": "3654819",
    "end": "3661089"
  },
  {
    "text": "all the men impute EDD messages I can see here in real-time and in my lambda function what I have",
    "start": "3661089",
    "end": "3669250"
  },
  {
    "text": "I'm connecting to the register and I'm adding some values based on the temperature if the temperature is",
    "start": "3669250",
    "end": "3674560"
  },
  {
    "text": "in a certain value I'm going to add a certain condition to that hot cold warm exit so inside my configuration we",
    "start": "3674560",
    "end": "3684820"
  },
  {
    "text": "noticed different options that are available for memory and subnet and whatnot and the triggers that is where",
    "start": "3684820",
    "end": "3690640"
  },
  {
    "text": "my IOT is triggering the lambda function in the monitoring we see lambda is able",
    "start": "3690640",
    "end": "3695800"
  },
  {
    "text": "to each was invoked about 14,000 times as you can see there's no service",
    "start": "3695800",
    "end": "3701560"
  },
  {
    "text": "involved there you're simply using compute and my lambda can really scale up to that much and with zero errors",
    "start": "3701560",
    "end": "3709360"
  },
  {
    "text": "here on the back end in my ElastiCache I do have a similar data point as well my",
    "start": "3709360",
    "end": "3717000"
  },
  {
    "text": "Redis cluster in the back which is the ElastiCache can also scale with my logic",
    "start": "3717000",
    "end": "3723850"
  },
  {
    "text": "tier which is my lambda what I also have",
    "start": "3723850",
    "end": "3730360"
  },
  {
    "text": "is a simple web front-end that can display only front end all the data from",
    "start": "3730360",
    "end": "3735640"
  },
  {
    "text": "my temperature in a simple elastic Beanstalk application actually what",
    "start": "3735640",
    "end": "3742690"
  },
  {
    "text": "you're noticing here so I'm having a lot of data coming to my IOT service in the previous demo we saw using API gateway",
    "start": "3742690",
    "end": "3749050"
  },
  {
    "text": "here is IOT depending on whatever your front-end may be and you have your lambda function that can scale with your",
    "start": "3749050",
    "end": "3756670"
  },
  {
    "text": "application and also your elastic as nodes memcache D or your Redis can scale fully in a fully managed way with a",
    "start": "3756670",
    "end": "3763540"
  },
  {
    "text": "simple change of a parameter you can automatically scale your application to whatever your application needs right go",
    "start": "3763540",
    "end": "3771640"
  },
  {
    "text": "back to the now we're going to go back to the presentation we're going to look into some best practices around design",
    "start": "3771640",
    "end": "3777640"
  },
  {
    "text": "configurations so language runtime the",
    "start": "3777640",
    "end": "3782830"
  },
  {
    "text": "size of the functions and libraries will matter for example Python has a better",
    "start": "3782830",
    "end": "3787840"
  },
  {
    "text": "startup latency and we know that when Java Virtual Machine is already up and running it provides a far faster warm",
    "start": "3787840",
    "end": "3794800"
  },
  {
    "text": "option we also notice the size of the function when you're avoiding when",
    "start": "3794800",
    "end": "3800230"
  },
  {
    "text": "you're including the libraries on your Python imports or any of the supported languages we support nodejs and we",
    "start": "3800230",
    "end": "3806290"
  },
  {
    "text": "release the support for c-sharp as well and also Java make sure when you're importing the libraries you're importing only the",
    "start": "3806290",
    "end": "3811810"
  },
  {
    "text": "specific modules and this very common practice across developers including myself where we import the libraries at",
    "start": "3811810",
    "end": "3818020"
  },
  {
    "text": "some point and the code changes over time and then your imports are you're using some imports that are not",
    "start": "3818020",
    "end": "3823330"
  },
  {
    "text": "currently active so there are simple tools that it's available to do to do some housecleaning and cleanup you want",
    "start": "3823330",
    "end": "3829270"
  },
  {
    "text": "to make sure you include that as part of your development process because the size of the functional libraries will",
    "start": "3829270",
    "end": "3834700"
  },
  {
    "text": "impact the lambda invocation and larger memory size to improve the latency so",
    "start": "3834700",
    "end": "3840790"
  },
  {
    "text": "you can change them there are about 23 different options that are available more than 23 options that are available",
    "start": "3840790",
    "end": "3846490"
  },
  {
    "text": "for lambda memory size play with those numbers see what is the appropriate configuration where you're getting the best performance for your application if",
    "start": "3846490",
    "end": "3854140"
  },
  {
    "text": "you have own libraries if you have data libraries from different parts of your organization that you want to use you can use as part of your lambda library",
    "start": "3854140",
    "end": "3861190"
  },
  {
    "text": "as well there are no restriction in terms of what you can do with lambda as long as you have a code that is",
    "start": "3861190",
    "end": "3867640"
  },
  {
    "text": "executing in a process that executing wouldn't that find me the maximum time line or anything any of the supporting",
    "start": "3867640",
    "end": "3874570"
  },
  {
    "text": "languages you can use lambda maybe you",
    "start": "3874570",
    "end": "3880720"
  },
  {
    "text": "want to do the last slide yeah of this I think we are running out of time we'll",
    "start": "3880720",
    "end": "3885820"
  },
  {
    "text": "be posting all the slides online so so retries what if your lambda function",
    "start": "3885820",
    "end": "3891430"
  },
  {
    "text": "fails to invoke an action so what happens when it comes to retrying or about their even order how are you going",
    "start": "3891430",
    "end": "3897190"
  },
  {
    "text": "to manage that let's say your function is function calls accessed synchronously in that",
    "start": "3897190",
    "end": "3903190"
  },
  {
    "text": "case if you have a API Gateway and you're calling a lambda function that is a synchronous invocation so in that case",
    "start": "3903190",
    "end": "3909250"
  },
  {
    "text": "you want to leave it up to their client to control it entirely part of the SDK",
    "start": "3909250",
    "end": "3915180"
  },
  {
    "text": "let's say your lambda function is calling an asynchronous manner after three tries the lambda is going to",
    "start": "3915180",
    "end": "3920440"
  },
  {
    "text": "discard the event so in that case you can let the function fail and lambda",
    "start": "3920440",
    "end": "3925750"
  },
  {
    "text": "will drop the event in the sqs or SNS queue this is a very exciting feature that we released a few hours ago that",
    "start": "3925750",
    "end": "3932830"
  },
  {
    "text": "was announced few hours ago this morning it's called dead letter Q where you can let the function fail and the lambda",
    "start": "3932830",
    "end": "3938890"
  },
  {
    "text": "will keep that in an sqs or for retry and or you can actually take",
    "start": "3938890",
    "end": "3944200"
  },
  {
    "text": "some actions based upon that so the",
    "start": "3944200",
    "end": "3949720"
  },
  {
    "text": "lambda can also pull a kinetic stream or a dynamodb update stream where if you have a kinetic stream that actually it's",
    "start": "3949720",
    "end": "3956410"
  },
  {
    "text": "available for about 24 hour period solo you can have the lambda function to use access the guiness stream and exhaust",
    "start": "3956410",
    "end": "3962500"
  },
  {
    "text": "all the way until it's done so in that case the ordering is also preserved",
    "start": "3962500",
    "end": "3967740"
  },
  {
    "text": "thank you so much for your time we try to get as much as we can so thank you so",
    "start": "3967740",
    "end": "3972910"
  },
  {
    "text": "much so make sure that make sure you fill evaluation please provide some feedback it's going to be very health",
    "start": "3972910",
    "end": "3979210"
  },
  {
    "text": "ank you",
    "start": "3979210",
    "end": "3981420"
  }
]