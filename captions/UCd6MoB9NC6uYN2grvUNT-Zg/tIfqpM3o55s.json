[
  {
    "start": "0",
    "end": "85000"
  },
  {
    "text": "so my name is Bob Kinney I'm a senior engineer working on API gateleg and today we're going to be talking a little",
    "start": "599",
    "end": "5879"
  },
  {
    "text": "bit about how to operate your server list API at scale so just kind of a",
    "start": "5879",
    "end": "12269"
  },
  {
    "text": "brief overview of what we're going to be talking about tonight we'll do a real brief overview hopefully it'll just be a",
    "start": "12269",
    "end": "17400"
  },
  {
    "text": "review for everybody about what we actually taught what we're talking about when we talk about service with AWS",
    "start": "17400",
    "end": "22730"
  },
  {
    "text": "specifically focusing on API gateway and lambda then we'll talk a little bit about how you can customize your API",
    "start": "22730",
    "end": "28650"
  },
  {
    "text": "using custom timeouts and Gateway responses then we'll move into you monitoring your API with cloud watch",
    "start": "28650",
    "end": "34230"
  },
  {
    "text": "logs metrics and alarms finally we'll talk about or sorry next we'll talk about protecting your API with",
    "start": "34230",
    "end": "40290"
  },
  {
    "text": "authorization throttling and usage plans and then finally I'll do a demonstration and show off our newly launched feature",
    "start": "40290",
    "end": "47250"
  },
  {
    "text": "for updating your API is with canary release deployments so what do we",
    "start": "47250",
    "end": "52920"
  },
  {
    "text": "actually mean when we talk about service obviously it means that there's no servers obviously that's a little bit of",
    "start": "52920",
    "end": "59219"
  },
  {
    "text": "a misnomer but from your perspective there are no servers for you to run no more ec2 instances no more dedicated hosts you don't you it scales up as you",
    "start": "59219",
    "end": "67770"
  },
  {
    "text": "as needed so when it when you need the scale you can get it you never pay for",
    "start": "67770",
    "end": "72869"
  },
  {
    "text": "the idle usage you only pay for the invocations and the lambda compute time that you're actually using and as with",
    "start": "72869",
    "end": "80549"
  },
  {
    "text": "all other AWS services availability and fault tolerance is built in so the first",
    "start": "80549",
    "end": "86909"
  },
  {
    "start": "85000",
    "end": "85000"
  },
  {
    "text": "component is sort of the entry point I like to think it as the entry point for the server list model is the Amazon API",
    "start": "86909",
    "end": "92130"
  },
  {
    "text": "gateway which is the service I happen to work on so it allows you to create a unified REST API interface integrated",
    "start": "92130",
    "end": "100320"
  },
  {
    "text": "with any number of services on the backend it has built-in DDoS protection and throttling to protect your back end",
    "start": "100320",
    "end": "107040"
  },
  {
    "text": "you can authenticate and authorize your requests as well as throttle excuse-me throttle meter and monetize",
    "start": "107040",
    "end": "113549"
  },
  {
    "text": "your API usage to build for third parties so what you see on the screen is",
    "start": "113549",
    "end": "119520"
  },
  {
    "start": "117000",
    "end": "117000"
  },
  {
    "text": "a high-level architectural design for API gateway as it launched the way back",
    "start": "119520",
    "end": "126570"
  },
  {
    "text": "when two years ago so we have our clients whether they be mobile apps web",
    "start": "126570",
    "end": "131700"
  },
  {
    "text": "sites or services making calls over the Internet through to a DNS",
    "start": "131700",
    "end": "136770"
  },
  {
    "text": "name pointing to a REST API which is funded by a built-in CloudFront distribution which then had connects to",
    "start": "136770",
    "end": "143220"
  },
  {
    "text": "the API gateway service once it hits the API gateway service we have integrations with cloud watch in a built-in caching",
    "start": "143220",
    "end": "149520"
  },
  {
    "text": "layer before it eventually goes off to your integrations and those integrations could be a two Bs lambda and endpoint",
    "start": "149520",
    "end": "155970"
  },
  {
    "text": "running in ec2 and the other Rd be any other AWS service as well as any other",
    "start": "155970",
    "end": "161670"
  },
  {
    "text": "public HTTP endpoint so about a month ago we launched what we call regional",
    "start": "161670",
    "end": "169350"
  },
  {
    "text": "API endpoints so many of our customers that were running services COK talking to api gateway api's were seeing higher",
    "start": "169350",
    "end": "177480"
  },
  {
    "text": "than expected latencies and part of that was due to the fact that the traffic had to go out to the cloud from pop then",
    "start": "177480",
    "end": "183599"
  },
  {
    "text": "come back into the regions talk to the API gateway service so for those customers we now offer this as a",
    "start": "183599",
    "end": "189390"
  },
  {
    "text": "solution where you can actually talk directly to the API gateway service and remove the cloud front from the loop this also allows you to put clout your",
    "start": "189390",
    "end": "196500"
  },
  {
    "text": "own cloud front distribution in front of your API and take advantage of edge caching so if you if you want to so the",
    "start": "196500",
    "end": "206250"
  },
  {
    "start": "204000",
    "end": "204000"
  },
  {
    "text": "other half of the equation that we'll be talking about a little bit today is the AWS lambda service and hopefully everybody is familiar with this it",
    "start": "206250",
    "end": "212730"
  },
  {
    "text": "allows you to bring your own own code various runtimes from nodejs Java Python",
    "start": "212730",
    "end": "218010"
  },
  {
    "text": "and C sharp you can bring your own libraries a simple scalable simple",
    "start": "218010",
    "end": "223380"
  },
  {
    "text": "resource model where you actually just define the amount of memory that you want to allocate to your function that",
    "start": "223380",
    "end": "228900"
  },
  {
    "text": "also has benefits for the amount of CPU that you get it's flexible use so you",
    "start": "228900",
    "end": "234329"
  },
  {
    "text": "can invoke it synchronously whether you're for API gateway or asynchronously via other events and those events those",
    "start": "234329",
    "end": "241470"
  },
  {
    "text": "event sources can be things like s3 or S&S or any other a to be many other AWS",
    "start": "241470",
    "end": "247560"
  },
  {
    "text": "services and you can grant access to those selectively to those functions for",
    "start": "247560",
    "end": "254010"
  },
  {
    "text": "access into your V pcs as well as fine-grained excuse-me control over your functions for invocation so now we've",
    "start": "254010",
    "end": "263099"
  },
  {
    "text": "set the table I want to introduce you to my friend Doug and Doug is a good Seattle light he likes coffee he also happens to work",
    "start": "263099",
    "end": "269940"
  },
  {
    "text": "in the tech industry and writes apps in his spare time so he's decided to link these two things together and build a",
    "start": "269940",
    "end": "276510"
  },
  {
    "text": "service that he calls tamper it's a service that allows him customers to review coffee shops and coffee roasters",
    "start": "276510",
    "end": "284090"
  },
  {
    "text": "bugs decided to build the entire back-end for our tamper completely service using api gateway",
    "start": "284090",
    "end": "290670"
  },
  {
    "text": "atlanta so doug built the first version",
    "start": "290670",
    "end": "295740"
  },
  {
    "start": "292000",
    "end": "292000"
  },
  {
    "text": "of this service tamper by aggregating some data from external sources and so",
    "start": "295740",
    "end": "300920"
  },
  {
    "text": "this allowed him to quickly develop and prototype it unfortunately some of these",
    "start": "300920",
    "end": "306750"
  },
  {
    "text": "third-party services aren't as reliable as he would like and so some of the requests will timeout and the default",
    "start": "306750",
    "end": "313580"
  },
  {
    "text": "default timeouts for api gateway are 30 seconds so requests will take 30 seconds",
    "start": "313580",
    "end": "319740"
  },
  {
    "text": "to timeout and this was causing some problems in his initial beta testing so",
    "start": "319740",
    "end": "326070"
  },
  {
    "text": "Doug would like a way to be able to control how long each of his invocations take and fail fast and build retry into",
    "start": "326070",
    "end": "332550"
  },
  {
    "text": "his clients so that leads us into our first topic which is custom timeouts for",
    "start": "332550",
    "end": "338700"
  },
  {
    "text": "customizing your API so lambda already has the capabilities for setting the",
    "start": "338700",
    "end": "345540"
  },
  {
    "start": "340000",
    "end": "340000"
  },
  {
    "text": "actual the cap on your invocation for your function you can set that on a per",
    "start": "345540",
    "end": "351180"
  },
  {
    "text": "function basis now as of last week you can now also set a custom timeout in",
    "start": "351180",
    "end": "358860"
  },
  {
    "text": "your API gateway under invocations on the screen it says one second that's actually the minimum is 50 milliseconds",
    "start": "358860",
    "end": "365430"
  },
  {
    "text": "up to the maximum of 29 seconds and you can set this on any integration type",
    "start": "365430",
    "end": "371460"
  },
  {
    "text": "whether it be HTTP lambda or another AWS service and you can set this on a per",
    "start": "371460",
    "end": "376710"
  },
  {
    "text": "method basis so now that Doug has custom",
    "start": "376710",
    "end": "381810"
  },
  {
    "text": "timeouts he's able to fail fast do retry as in his clients and have a much better experience inside of his application and",
    "start": "381810",
    "end": "388800"
  },
  {
    "text": "is able to move on so now that Doug has got his API working he's built a mobile",
    "start": "388800",
    "end": "397620"
  },
  {
    "text": "application both iOS and Android but he wants to build a mobile a website experienced as well he's",
    "start": "397620",
    "end": "404330"
  },
  {
    "text": "gotten most of the most of the basic functionality working and has cores working working in the happy case but",
    "start": "404330",
    "end": "410780"
  },
  {
    "text": "unfortunately there are a number of error messages that are a couple of error handling cases that are not",
    "start": "410780",
    "end": "416180"
  },
  {
    "text": "working and browsers actually reporting cores errors this is because the Google",
    "start": "416180",
    "end": "422810"
  },
  {
    "text": "excuse me even though he's configured his API to return those responses API gateway is",
    "start": "422810",
    "end": "427879"
  },
  {
    "text": "generating those air responses in intercepting the configuration so he needs a way to be able to add that",
    "start": "427879",
    "end": "434199"
  },
  {
    "text": "configuration to the error messages being generated by API gateway thankfully there is an a way to do this",
    "start": "434199",
    "end": "441590"
  },
  {
    "text": "now and that's a feature that we launched recently called Gately responses so Gabri responses allows you",
    "start": "441590",
    "end": "449150"
  },
  {
    "start": "443000",
    "end": "443000"
  },
  {
    "text": "to customize the error message is returned by api gateway in various errors in areas so the things that you",
    "start": "449150",
    "end": "456020"
  },
  {
    "text": "can customize are the obviously the HTTP response code you can modify the body content if you want to change the error",
    "start": "456020",
    "end": "462289"
  },
  {
    "text": "message as well as add headers which is the thing that we're most interested in here you can specify your gateway",
    "start": "462289",
    "end": "469340"
  },
  {
    "text": "responses on a per error mod basis or set default handlers for 4x X and 5 X X",
    "start": "469340",
    "end": "475819"
  },
  {
    "text": "error codes so now what I'm going to go ahead and do is do a short demonstration",
    "start": "475819",
    "end": "481370"
  },
  {
    "text": "of how we can actually set that up",
    "start": "481370",
    "end": "484870"
  },
  {
    "text": "okay so I have I'm in I've got my API",
    "start": "498780",
    "end": "504160"
  },
  {
    "text": "gateway console up I have a very simple API here that I'm going to go ahead and",
    "start": "504160",
    "end": "510190"
  },
  {
    "text": "visit the gateway responses tab and so you see here we've got our default 4 X X",
    "start": "510190",
    "end": "516820"
  },
  {
    "text": "and 5 X X that I was mentioning earlier as well as a bunch of other specific error messages I basically just want to",
    "start": "516820",
    "end": "523120"
  },
  {
    "text": "add course headers to all of my error messages so I'm just going to override the default 4 X X + 5 X X so the first",
    "start": "523120",
    "end": "530410"
  },
  {
    "text": "thing I'm going to do is actually add my I my headers for course so I'm going to",
    "start": "530410",
    "end": "538840"
  },
  {
    "text": "add my methods because I'm putting",
    "start": "538840",
    "end": "545740"
  },
  {
    "text": "static strings I have to enclose those in quotes now we'll add our access",
    "start": "545740",
    "end": "553180"
  },
  {
    "text": "control headers",
    "start": "553180",
    "end": "555839"
  },
  {
    "text": "and then finally we will add our origin now here obviously I'm using star but if",
    "start": "560790",
    "end": "568570"
  },
  {
    "text": "you wanted to lock that down to a specific domain you could do that here",
    "start": "568570",
    "end": "573690"
  },
  {
    "text": "and then additionally I'm going to go ahead and update the error message and add a little playful error message",
    "start": "575310",
    "end": "585000"
  },
  {
    "text": "so I'll go ahead and save my gateway response now that's that just saves it into the API gateway service I do need",
    "start": "592120",
    "end": "599660"
  },
  {
    "text": "to still deploy that change so I'll go back over to the resources tab to play it now and deploy it to my prod stage",
    "start": "599660",
    "end": "609820"
  },
  {
    "text": "now this method is actually so obviously I'm getting a 200 response here with",
    "start": "611950",
    "end": "618890"
  },
  {
    "text": "some actual some actual value if I want to test my 4xx response all I really",
    "start": "618890",
    "end": "624529"
  },
  {
    "text": "need to do is just use a path that is not mapped in my API and I'll get back",
    "start": "624529",
    "end": "629810"
  },
  {
    "text": "the default 403 error message so we can see here that we actually have our",
    "start": "629810",
    "end": "635089"
  },
  {
    "text": "custom error message and if I take this over to a command line and use curl we",
    "start": "635089",
    "end": "642200"
  },
  {
    "text": "can see that we're also getting our course headers so this is an easy way",
    "start": "642200",
    "end": "647270"
  },
  {
    "text": "for you to customize the error responses for all of the error cases that API gateway may generate so let's check back",
    "start": "647270",
    "end": "660380"
  },
  {
    "text": "in with Doug now that he's even been able to get cores working and all of his error handling he's able to build a",
    "start": "660380",
    "end": "666190"
  },
  {
    "text": "JavaScript web app and complete the the whole ecosystem that he's trying to build with tamper and he's ready to go",
    "start": "666190",
    "end": "672830"
  },
  {
    "text": "live so we'll fast forward a little bit to the first reviews of tamper and you",
    "start": "672830",
    "end": "678500"
  },
  {
    "start": "675000",
    "end": "675000"
  },
  {
    "text": "can see here the early responses have been somewhat mixed and that's probably",
    "start": "678500",
    "end": "683720"
  },
  {
    "text": "putting it kindly so obviously that's having a little bit of problems with the",
    "start": "683720",
    "end": "689390"
  },
  {
    "text": "customers receiving errors in his API so he needs a way to be able to figure out what's going on and that will segue into",
    "start": "689390",
    "end": "696260"
  },
  {
    "text": "our next topic we'll be talking about monitoring specifically using cloud",
    "start": "696260",
    "end": "701839"
  },
  {
    "text": "watch metrics so both API gateway and",
    "start": "701839",
    "end": "708020"
  },
  {
    "start": "705000",
    "end": "705000"
  },
  {
    "text": "lambda support a number of default metrics the ones you see listed up here",
    "start": "708020",
    "end": "714800"
  },
  {
    "text": "on the screen are the ones that you get by default pre API gateway so that includes our count which is our overall",
    "start": "714800",
    "end": "720950"
  },
  {
    "text": "invocation count that will include both errors throttles any request that's received by the API",
    "start": "720950",
    "end": "727130"
  },
  {
    "text": "gateway service then we have our 4 xx and 5 xx error counts these can also be",
    "start": "727130",
    "end": "733209"
  },
  {
    "text": "graphed in cloud watch with averages to get your percentage of errors not just",
    "start": "733209",
    "end": "738500"
  },
  {
    "text": "your overall error counts we additionally law emit two different",
    "start": "738500",
    "end": "743990"
  },
  {
    "text": "latency metrics one which is what we just call latency which is the time from when the API gateway service receives",
    "start": "743990",
    "end": "750259"
  },
  {
    "text": "the request to when a response is sent to the client and the second one is the integration latency and that's the time",
    "start": "750259",
    "end": "756470"
  },
  {
    "text": "from when API gateway sends a request to your integration from when it receives a response so if you're interested in",
    "start": "756470",
    "end": "762529"
  },
  {
    "text": "seeing the overhead added by it by using API gateway you take your latency - the",
    "start": "762529",
    "end": "768230"
  },
  {
    "text": "integration latency and that's the overhead introduced by API gateway additionally if you use the built-in",
    "start": "768230",
    "end": "774829"
  },
  {
    "text": "caching service the building caching in API gateway we emit cache metrics for",
    "start": "774829",
    "end": "780649"
  },
  {
    "text": "base 4 hits and misses and again these also can be used these also can be",
    "start": "780649",
    "end": "786199"
  },
  {
    "text": "graphed as averages to get your cache hit-and-miss percentages so in addition",
    "start": "786199",
    "end": "794029"
  },
  {
    "text": "to the default metrics you also are able to add additional detailed metrics these",
    "start": "794029",
    "end": "801079"
  },
  {
    "text": "are the same set of metrics that we saw in the previous slide but they are set on a per method basis so it allows you",
    "start": "801079",
    "end": "807019"
  },
  {
    "text": "to see more granular detail you can set this at deep by default in the stage",
    "start": "807019",
    "end": "812540"
  },
  {
    "text": "level or override this on specific method methods that you're interested in monitoring so the default metrics are a",
    "start": "812540",
    "end": "820490"
  },
  {
    "text": "free free included free of charge and they're broken bound by the API stage if you want to enable detailed metrics",
    "start": "820490",
    "end": "827600"
  },
  {
    "text": "standard CloudWatch pricing applies so you pay on a per metric per metric basis",
    "start": "827600",
    "end": "834019"
  },
  {
    "text": "and you can enable that and it's broken down by method once we have metrics then",
    "start": "834019",
    "end": "841850"
  },
  {
    "text": "we are able to set alarms on those metrics any metric obviously can be tied to an alarm the alarm notification can",
    "start": "841850",
    "end": "849319"
  },
  {
    "text": "then be sent to an SNS topic and the nationís topic can then have any number of destinations whether it be an email",
    "start": "849319",
    "end": "854750"
  },
  {
    "text": "address and SQS queue or if you wanted to double down on your server listing infrastructure you could",
    "start": "854750",
    "end": "859830"
  },
  {
    "text": "even invoke a lambda function to attempt an automated mitigation so what I'll go",
    "start": "859830",
    "end": "865500"
  },
  {
    "text": "ahead do go do now is demonstrate how we can set up some worms based on some",
    "start": "865500",
    "end": "871290"
  },
  {
    "text": "CloudWatch metrics so I still have my my",
    "start": "871290",
    "end": "877410"
  },
  {
    "text": "existing API here which is a very simple API and I'm going to use a tool called",
    "start": "877410",
    "end": "883470"
  },
  {
    "text": "Gatling to actually generate some amount of traffic to to this API all it's going",
    "start": "883470",
    "end": "890130"
  },
  {
    "text": "to do is hit this particular method in my API which is calling a lambda function which occasionally generates a",
    "start": "890130",
    "end": "897420"
  },
  {
    "text": "500 error message so I'm going to go ahead and start up Gatling scripts I'm",
    "start": "897420",
    "end": "906150"
  },
  {
    "text": "going to filter out some of the verbose logging that it generates",
    "start": "906150",
    "end": "911720"
  },
  {
    "text": "go ahead and start my random errors test",
    "start": "915190",
    "end": "920290"
  },
  {
    "text": "[Applause] and so we're hearing what we're seeing",
    "start": "922510",
    "end": "929690"
  },
  {
    "text": "here yes apparently I did not fix my permissions so I'm getting all five",
    "start": "929690",
    "end": "935210"
  },
  {
    "text": "hundreds that's great so if I go over to the go over to the cloud watch dashboard",
    "start": "935210",
    "end": "945130"
  },
  {
    "text": "what I should be able to see here if I go over to the metrics and go to API",
    "start": "947500",
    "end": "955190"
  },
  {
    "text": "gateway stage in that 2017 and then look",
    "start": "955190",
    "end": "966860"
  },
  {
    "text": "at my 5-xx error count what I'll probably see here is that if i graph the",
    "start": "966860",
    "end": "973430"
  },
  {
    "text": "average is that's interesting",
    "start": "973430",
    "end": "985210"
  },
  {
    "text": "so what I should be seeing here is eventually a there we go so there's the",
    "start": "986920",
    "end": "994270"
  },
  {
    "text": "last data point now I'm getting 100% of those errors are actually causing 500s so what I would",
    "start": "994270",
    "end": "1002250"
  },
  {
    "text": "normally do here is go ahead and set an alarm by clicking on this belt icon if I",
    "start": "1002250",
    "end": "1011100"
  },
  {
    "text": "choose one minute metrics and so I all I have to do is give it a name and I'll",
    "start": "1011100",
    "end": "1022800"
  },
  {
    "text": "set that for it doesn't really matter because the values we're doing 100 percent of errors so we'll just say that",
    "start": "1022800",
    "end": "1029339"
  },
  {
    "text": "if we were alarm on five percent of error metrics for for one data point and",
    "start": "1029339",
    "end": "1036480"
  },
  {
    "text": "then we'll go ahead and set my email",
    "start": "1036480",
    "end": "1041939"
  },
  {
    "text": "address so I've set up a temporary gmail address for for getting the alerts and",
    "start": "1041940",
    "end": "1047339"
  },
  {
    "text": "then I'll go ahead and create the alarm so when I initially create the alarm the",
    "start": "1047339",
    "end": "1053220"
  },
  {
    "text": "alarm will be in an insufficient data state eventually what we should see is is after about a minute the state will",
    "start": "1053220",
    "end": "1059610"
  },
  {
    "text": "the alarm will will have enough data to actually trigger the alarm and generate",
    "start": "1059610",
    "end": "1064920"
  },
  {
    "text": "a email message to that gmail address and we've already seen it transfer into",
    "start": "1064920",
    "end": "1072600"
  },
  {
    "text": "arm State and if I go over to my email hopefully we get our email not quite yet",
    "start": "1072600",
    "end": "1083870"
  },
  {
    "text": "so normally here at this point then you would be able to have your operator",
    "start": "1084860",
    "end": "1090740"
  },
  {
    "text": "respond to your alarm figure out what the root cause of the problem is and move on so now of course this is the",
    "start": "1090740",
    "end": "1101299"
  },
  {
    "text": "part that decides to fail",
    "start": "1101299",
    "end": "1104500"
  },
  {
    "text": "okay so that says it's an alarm state and I still haven't gotten our email unfortunately okay well unfortunately",
    "start": "1120299",
    "end": "1128669"
  },
  {
    "text": "it's tough to move on okay",
    "start": "1128669",
    "end": "1132289"
  },
  {
    "text": "ok so now we've got our alarms configured and hopefully in production",
    "start": "1137570",
    "end": "1143010"
  },
  {
    "text": "we're actually getting our emails quickly so we know when we're having problems with our API but we don't",
    "start": "1143010",
    "end": "1150180"
  },
  {
    "text": "necessarily know why we're actually getting errors so that segues into our",
    "start": "1150180",
    "end": "1156300"
  },
  {
    "text": "next topic which is specifically talking about logging using Amazon CloudWatch logs",
    "start": "1156300",
    "end": "1161810"
  },
  {
    "start": "1161000",
    "end": "1161000"
  },
  {
    "text": "so both API gateway and lambda have native integration with cloud watch logs",
    "start": "1161810",
    "end": "1167870"
  },
  {
    "text": "so API gateway offers two flavors of logging now so the basic more basic",
    "start": "1167870",
    "end": "1173520"
  },
  {
    "text": "logging that we just launched with the service offers basic request response",
    "start": "1173520",
    "end": "1179280"
  },
  {
    "text": "logging any transformations that you may have you may have applied in your API as",
    "start": "1179280",
    "end": "1184890"
  },
  {
    "text": "well as overall request response status",
    "start": "1184890",
    "end": "1189980"
  },
  {
    "text": "additionally as of last week we launched what we call access logging and this is",
    "start": "1189980",
    "end": "1195450"
  },
  {
    "text": "allows you to customize a log line to receive inside of your cloud watch logs",
    "start": "1195450",
    "end": "1200580"
  },
  {
    "text": "that is akin to a patchy style log format so the common log format is one",
    "start": "1200580",
    "end": "1206130"
  },
  {
    "text": "of the sort of the out-of-the-box formats that we can use to enable cloud",
    "start": "1206130",
    "end": "1211680"
  },
  {
    "text": "watch logs on the lambda side we actually can log the native logging is",
    "start": "1211680",
    "end": "1217770"
  },
  {
    "text": "under your control out of your code so anything that you log directly from your function ends up in your cloud watch",
    "start": "1217770",
    "end": "1223230"
  },
  {
    "text": "logs and you can announce it however you see fit once you have those logs you can",
    "start": "1223230",
    "end": "1229380"
  },
  {
    "text": "set up what's called log pivots and lob pivots allow you to set up filters to",
    "start": "1229380",
    "end": "1235380"
  },
  {
    "text": "graph metrics and so you can do search queries for specific error strings or search strings for status codes and then",
    "start": "1235380",
    "end": "1243780"
  },
  {
    "text": "once you have those metrics you can set an alarm on that and then jump directly to the actual log entries that are",
    "start": "1243780",
    "end": "1250530"
  },
  {
    "text": "generating the alarm state so now we'll go ahead and actually see",
    "start": "1250530",
    "end": "1257729"
  },
  {
    "text": "if we can try to diagnose exactly what's going on with our API and of course when",
    "start": "1257729",
    "end": "1269879"
  },
  {
    "text": "we come back we have our hermit so the email did finally work all right",
    "start": "1269879",
    "end": "1275129"
  },
  {
    "text": "so first things first go over to API gateway and all of the logging for API",
    "start": "1275129",
    "end": "1289559"
  },
  {
    "text": "gateway is set on the stage level much like the detailed metrics can be overridden on a per method basis if we",
    "start": "1289559",
    "end": "1296220"
  },
  {
    "text": "want so I'm going to go to my stages go",
    "start": "1296220",
    "end": "1301859"
  },
  {
    "text": "to my particular prod and then I'm going to enable logs at the error level as",
    "start": "1301859",
    "end": "1308249"
  },
  {
    "text": "well as enable access logging now for unlike the default logs for access",
    "start": "1308249",
    "end": "1316169"
  },
  {
    "text": "logging we can actually provide a log group to actually log all of our access logs - this allows you to actually",
    "start": "1316169",
    "end": "1323249"
  },
  {
    "text": "aggregate your access logs across multiple API so you should you so choose",
    "start": "1323249",
    "end": "1328399"
  },
  {
    "text": "or you can just create a access log group or a log group per API the console",
    "start": "1328399",
    "end": "1336840"
  },
  {
    "text": "has some default formats so I'm going to go ahead and just going to use the CLF for the common log format and I'm going",
    "start": "1336840",
    "end": "1342960"
  },
  {
    "text": "to go ahead and save those changes then I'm going to go to my API and actually",
    "start": "1342960",
    "end": "1353690"
  },
  {
    "text": "hit a in point that I know will generate an error",
    "start": "1353960",
    "end": "1361008"
  },
  {
    "text": "so if I just hit refresh a couple of times you can see here that I'm getting a internal server error for a default",
    "start": "1362519",
    "end": "1369909"
  },
  {
    "text": "five AK 505 xx error and if I go back over to the cloud watch console and go",
    "start": "1369909",
    "end": "1377889"
  },
  {
    "text": "to my logs I should be able to find the specific request IDs as well as the",
    "start": "1377889",
    "end": "1382899"
  },
  {
    "text": "status code in our access logs so here's my access logs group hopefully we'll see",
    "start": "1382899",
    "end": "1390909"
  },
  {
    "text": "some logs don't do this to me okay so",
    "start": "1390909",
    "end": "1399730"
  },
  {
    "text": "let's check and see if our regular logs haven't either",
    "start": "1399730",
    "end": "1404669"
  },
  {
    "text": "let's double-check and make sure that we've configured this correctly",
    "start": "1405370",
    "end": "1410549"
  },
  {
    "text": "save my changes get the EPI",
    "start": "1414450",
    "end": "1420500"
  },
  {
    "text": "move away oh here we go okay so let me",
    "start": "1425340",
    "end": "1434820"
  },
  {
    "text": "just go back to my access logs real quick there we go",
    "start": "1434820",
    "end": "1443130"
  },
  {
    "text": "filter by the time and we get the data that we want so so I mentioned so we can",
    "start": "1443130",
    "end": "1448860"
  },
  {
    "text": "get a we get a single log line and then the Apache common log format so we get",
    "start": "1448860",
    "end": "1454110"
  },
  {
    "text": "our source IP our request time the path that was requested our status code the",
    "start": "1454110",
    "end": "1460590"
  },
  {
    "text": "size as well as a request ID so this is really useful when you're asked when you're requesting support for instance",
    "start": "1460590",
    "end": "1467130"
  },
  {
    "text": "but it also allows us to search for our actual logs the the deep more detailed",
    "start": "1467130",
    "end": "1474210"
  },
  {
    "text": "logs inside of our non access logs for API gateway so if I flip back to my",
    "start": "1474210",
    "end": "1479550"
  },
  {
    "text": "other log group and I search the logs the request ID contains a separator",
    "start": "1479550",
    "end": "1486870"
  },
  {
    "text": "characters so this needs to be escaped with quotes I get my error message that",
    "start": "1486870",
    "end": "1494040"
  },
  {
    "text": "was recorded by API gateway that was generating the 500 so I see here that my permissions on the lambda function are",
    "start": "1494040",
    "end": "1500040"
  },
  {
    "text": "not correct so I happen to have a quick",
    "start": "1500040",
    "end": "1505260"
  },
  {
    "text": "line here to set those permissions correctly which I'll go ahead and run",
    "start": "1505260",
    "end": "1510270"
  },
  {
    "text": "from my CLI",
    "start": "1510270",
    "end": "1513530"
  },
  {
    "text": "and then I'll go back to my here and now",
    "start": "1515850",
    "end": "1520920"
  },
  {
    "text": "I've got my refresh I've got a 200 response with the correct data if I go back over to my logs to my access logs",
    "start": "1520920",
    "end": "1532250"
  },
  {
    "text": "we can now see a 200 response with the same data that they're our quest IDs so",
    "start": "1534410",
    "end": "1540930"
  },
  {
    "text": "this is a great way for for you to actually look at the error messages",
    "start": "1540930",
    "end": "1546720"
  },
  {
    "text": "being generated and then or at look at the errors being generated and then dig",
    "start": "1546720",
    "end": "1552090"
  },
  {
    "text": "down deep with the the request IDs you could then take this request ID type it into your lambda logs search your lambda",
    "start": "1552090",
    "end": "1558900"
  },
  {
    "text": "logs for those request IDs to look inside of your lambda function as well additionally you can use the access logs",
    "start": "1558900",
    "end": "1565680"
  },
  {
    "text": "and export them to s3 send them to another and send them to an analytic system if you wanted to get additional",
    "start": "1565680",
    "end": "1572850"
  },
  {
    "text": "contextual information about the requests coming in on your API okay so",
    "start": "1572850",
    "end": "1585300"
  },
  {
    "text": "thanks to thanks to logging duds been able to figure out that there was a bug",
    "start": "1585300",
    "end": "1591390"
  },
  {
    "text": "in the original beta version of his his application that was hitting out that's hitting a legacy API and a much higher",
    "start": "1591390",
    "end": "1598080"
  },
  {
    "text": "rate than them was expected and that's using up valuable resources that his",
    "start": "1598080",
    "end": "1604020"
  },
  {
    "text": "production customers aren't the the calls for his production customers aren't able to use so Doug needs a way",
    "start": "1604020",
    "end": "1610170"
  },
  {
    "text": "to be able to limit the impact of this bad bad version and this for this legacy API so that the resources can be used to",
    "start": "1610170",
    "end": "1617790"
  },
  {
    "text": "serve his prod traffic so that segues into our next topic which is protecting",
    "start": "1617790",
    "end": "1623940"
  },
  {
    "text": "your API with throttling so API gateway supports or has three levels of law",
    "start": "1623940",
    "end": "1629820"
  },
  {
    "start": "1626000",
    "end": "1626000"
  },
  {
    "text": "throttling the first and the most granular is the API key level throttling that's managed via usage plans which",
    "start": "1629820",
    "end": "1636570"
  },
  {
    "text": "I'll talk a little bit about later but that's the the most fine-grain ways that you can configure throttling the next",
    "start": "1636570",
    "end": "1642960"
  },
  {
    "text": "level is method level throttling so that's configurable in the stage settings you can set a default",
    "start": "1642960",
    "end": "1650149"
  },
  {
    "text": "method level throttling in the stage or as with other things specify overrides on a per method basis then finally an",
    "start": "1650149",
    "end": "1657529"
  },
  {
    "text": "account level throttling is applied and those limits are defined on a per region",
    "start": "1657529",
    "end": "1663890"
  },
  {
    "text": "for account basis and you can request an increase in that as you need some",
    "start": "1663890",
    "end": "1669770"
  },
  {
    "text": "important things to note any request that is throttled is not built so if you",
    "start": "1669770",
    "end": "1674830"
  },
  {
    "text": "need to protect your API from malicious code the this is one way you can protect",
    "start": "1674830",
    "end": "1680570"
  },
  {
    "text": "your API for malicious attacks so it's",
    "start": "1680570",
    "end": "1687200"
  },
  {
    "text": "important to talk a little bit about how API gateway actually implements throttling like a lot of AWS services it",
    "start": "1687200",
    "end": "1694730"
  },
  {
    "text": "uses a token bucket algorithm that basically means that when a request comes in a token is try to retrieve from",
    "start": "1694730",
    "end": "1702470"
  },
  {
    "text": "the bucket if there are tokens available in the bucket it takes a token there's no tokens available that request is considered",
    "start": "1702470",
    "end": "1708409"
  },
  {
    "text": "throttled when we talk about token bucket algorithm there's two values the",
    "start": "1708409",
    "end": "1713960"
  },
  {
    "text": "burst which is the size of the bucket how many tokens can actually fit in the bucket in any given time and then the",
    "start": "1713960",
    "end": "1719990"
  },
  {
    "text": "rate is the rate how quickly tokens are added to the bucket the replenish rate",
    "start": "1719990",
    "end": "1726010"
  },
  {
    "text": "when we normally talk about rates we talk about rates at a RPS rate so the",
    "start": "1726010",
    "end": "1731539"
  },
  {
    "text": "number of tokens per second well that's not to say that when a second boundary tokens are added to the bucket it's a",
    "start": "1731539",
    "end": "1737360"
  },
  {
    "text": "continuous fill rate so think of it more like a spigot rather than a bucket pouring into the into our token bucket",
    "start": "1737360",
    "end": "1745870"
  },
  {
    "text": "so now I'm going to go ahead and do a demo demo that will hopefully go better for enabling throttling so I've got",
    "start": "1745990",
    "end": "1756529"
  },
  {
    "text": "another gatling simulation that I that hits a specific method in my API and",
    "start": "1756529",
    "end": "1765590"
  },
  {
    "text": "then I'm going to go ahead and start that up and then we'll enable throttling on it after the fact so we'll go ahead",
    "start": "1765590",
    "end": "1772070"
  },
  {
    "text": "and start off Gatling again I'll start my throttle test hopefully",
    "start": "1772070",
    "end": "1781389"
  },
  {
    "text": "this one's not generating 500s ok these ones are okay good so what we're seeing",
    "start": "1781389",
    "end": "1788079"
  },
  {
    "text": "here is is that all of these all of these requests are generating okay's or 200 status codes that's because I've not",
    "start": "1788079",
    "end": "1795190"
  },
  {
    "text": "enabled any throttling on this API at all we're roughly doing about 100 RPS",
    "start": "1795190",
    "end": "1800879"
  },
  {
    "text": "and what I'm going to go ahead and do is throttle that down to a much much lower rate so as I mentioned that's going to",
    "start": "1800879",
    "end": "1809799"
  },
  {
    "text": "be set in the stages stage settings and I'll go ahead and enable throttling and",
    "start": "1809799",
    "end": "1816429"
  },
  {
    "text": "I'll go ahead and set it on the specific method so go down to our get method and set overrides on stage enable throttling",
    "start": "1816429",
    "end": "1825459"
  },
  {
    "text": "and then I'll set a much lower limit here as all set to RP us now hopefully",
    "start": "1825459",
    "end": "1833559"
  },
  {
    "text": "what I'll see is pretty much instantaneously or as about as",
    "start": "1833559",
    "end": "1840249"
  },
  {
    "text": "instantaneous as it can be yeah there we go",
    "start": "1840249",
    "end": "1845320"
  },
  {
    "text": "great so we're starting to see some chaos so that means that we're getting some 429 responses in in response to",
    "start": "1845320",
    "end": "1852789"
  },
  {
    "text": "some of these requests now some requests are still getting through and getting OK's but the rest of them getting 429 s",
    "start": "1852789",
    "end": "1858429"
  },
  {
    "text": "and not showing up on my bill so",
    "start": "1858429",
    "end": "1862289"
  },
  {
    "text": "obviously I was setting small values here you can actually set fractional",
    "start": "1865440",
    "end": "1871419"
  },
  {
    "text": "limits basically about the the absolute lower limit on the throttling rates is about one rpm anything lower than that",
    "start": "1871419",
    "end": "1879729"
  },
  {
    "text": "and we would lose some of the granularity but",
    "start": "1879729",
    "end": "1884158"
  },
  {
    "text": "so checking back in with Doug now that he's been able to throttle the bad API",
    "start": "1889399",
    "end": "1894889"
  },
  {
    "text": "he his production customers are their traffic is getting through they're no",
    "start": "1894889",
    "end": "1900690"
  },
  {
    "text": "longer getting errors the reviews are starting to improve and the version the",
    "start": "1900690",
    "end": "1906869"
  },
  {
    "text": "customers that are using the old buggy version are gonna get some 429 sure but those are beta customers that he can do",
    "start": "1906869",
    "end": "1912809"
  },
  {
    "text": "some soft touch and get them to upgrade to the new production version of the app",
    "start": "1912809",
    "end": "1918110"
  },
  {
    "text": "so because all of the the because the experience is improved for his",
    "start": "1918919",
    "end": "1924179"
  },
  {
    "text": "production customers some of the coffee shops and Coffee Roasters have started to notice that their customers are using",
    "start": "1924179",
    "end": "1929489"
  },
  {
    "text": "this tamper app and they've reached out to Doug to actually talk to him about adding promotions inside of the",
    "start": "1929489",
    "end": "1935940"
  },
  {
    "text": "application so that they can offer you know some coupons for valid value drippy",
    "start": "1935940",
    "end": "1942090"
  },
  {
    "text": "customers so Doug needs a way to open up a portion of his API so that these",
    "start": "1942090",
    "end": "1947119"
  },
  {
    "text": "coffee shops can actually submit the promotions without him having to be a go-between",
    "start": "1947119",
    "end": "1954409"
  },
  {
    "text": "so that'll segue into our next topic which is talking about authentication and authorization in API gateway so what",
    "start": "1954950",
    "end": "1963330"
  },
  {
    "text": "you see up on the screen is a various comparison of a number of the authentication types that are",
    "start": "1963330",
    "end": "1969869"
  },
  {
    "text": "authorization types that are supporting API gateway excuse me so all the way on",
    "start": "1969869",
    "end": "1976619"
  },
  {
    "text": "the Left we have a WSI M so that's using actual a actual AWS credentials and",
    "start": "1976619",
    "end": "1982499"
  },
  {
    "text": "doing signature version for then a policy is applied to those credentials and we can validate that policy against",
    "start": "1982499",
    "end": "1989519"
  },
  {
    "text": "the the Arne's describing the API next",
    "start": "1989519",
    "end": "1995220"
  },
  {
    "text": "up is our token authorizer what we used to call the custom authorizer and the custom authorizer allows you to",
    "start": "1995220",
    "end": "2002059"
  },
  {
    "text": "write your own lambda code for validating what we call the token source so that would be a specific header that",
    "start": "2002059",
    "end": "2009049"
  },
  {
    "text": "would actually contain in most cases like an OAuth token or an OID C token",
    "start": "2009049",
    "end": "2014149"
  },
  {
    "text": "that you can crack validate and return a yes or no response to say whether or not",
    "start": "2014149",
    "end": "2019369"
  },
  {
    "text": "this token is valid to sort of emulate the same",
    "start": "2019369",
    "end": "2024380"
  },
  {
    "text": "functionality that you can get with I am you return a policy associated with that token and that policy can be cashed for",
    "start": "2024380",
    "end": "2030980"
  },
  {
    "text": "up to 60 minutes and that policy is expected to describe all of the permissions in that API that the",
    "start": "2030980",
    "end": "2037460"
  },
  {
    "text": "customer that token can actually use very recently we launched what we call",
    "start": "2037460",
    "end": "2044299"
  },
  {
    "text": "the request authorizer which is an evolution on our token authorizer so instead of just having a single header",
    "start": "2044299",
    "end": "2049730"
  },
  {
    "text": "you can actually have multiple headers or query strings past your lambda function to do more complex",
    "start": "2049730",
    "end": "2056240"
  },
  {
    "text": "authorization strategies and then finally we have support for the kognito",
    "start": "2056240",
    "end": "2061460"
  },
  {
    "text": "user pools for authorization or at least authentication so if this is good if you",
    "start": "2061460",
    "end": "2068570"
  },
  {
    "text": "want to be able to offer access to only logged in users but you can't use this for at least not today for controlling",
    "start": "2068570",
    "end": "2075580"
  },
  {
    "text": "portions of the API that a customer has access to so the thing to highlight here",
    "start": "2075580",
    "end": "2083570"
  },
  {
    "text": "is or a couple things to highlight here so for both AWS I am incognito there's",
    "start": "2083570",
    "end": "2089210"
  },
  {
    "text": "no additional charge for any for adding this a kind of authorization and for the",
    "start": "2089210",
    "end": "2095658"
  },
  {
    "text": "token authorized and the request authorizer you pay for the invocations on your lambda function but if the",
    "start": "2095659",
    "end": "2101060"
  },
  {
    "text": "request is denied by policy again API gateway does not bill for a failed",
    "start": "2101060",
    "end": "2106490"
  },
  {
    "text": "authorization request okay so now I'm",
    "start": "2106490",
    "end": "2112490"
  },
  {
    "text": "going to go ahead and do a demo of a custom authorizer so this is actually a",
    "start": "2112490",
    "end": "2119170"
  },
  {
    "text": "request that we've seen in the past for",
    "start": "2119380",
    "end": "2125420"
  },
  {
    "text": "customers with legacy api's so I'm actually going to implement basic HTTP off for my API gateway API so I've",
    "start": "2125420",
    "end": "2135470"
  },
  {
    "text": "actually already set up my authorizer I've set it up as a request authorizer strictly speaking basic doesn't actually",
    "start": "2135470",
    "end": "2143630"
  },
  {
    "text": "require multiple headers and only requires the single authorization header but I've just I've configured it as a request authorizer here for",
    "start": "2143630",
    "end": "2151109"
  },
  {
    "text": "to use the new feature so i i'm using the authorization header and i can go",
    "start": "2151109",
    "end": "2157019"
  },
  {
    "text": "over and actually look at that code in the lambda console and so my request",
    "start": "2157019",
    "end": "2168239"
  },
  {
    "text": "authorizer is just and then going to take the its all the way down so that",
    "start": "2168239",
    "end": "2177720"
  },
  {
    "text": "it's just going to take the the authorization header that gets passed in base64 decode it figure out what the",
    "start": "2177720",
    "end": "2183569"
  },
  {
    "text": "username and password is and then compare it against a hard-coded set of",
    "start": "2183569",
    "end": "2188579"
  },
  {
    "text": "credentials obviously you could use this to link up with a database with a username and password store should you",
    "start": "2188579",
    "end": "2195480"
  },
  {
    "text": "so choose and then any user that's not authorized we will return an",
    "start": "2195480",
    "end": "2200789"
  },
  {
    "text": "unauthorized request and that basically just reject the authorization so now i'm",
    "start": "2200789",
    "end": "2208680"
  },
  {
    "text": "gonna go back to the APA gateway console because there's one other piece that i need to configure which is the response",
    "start": "2208680",
    "end": "2216900"
  },
  {
    "text": "when no authentication is presented so a 401 error so in basic auth i need to",
    "start": "2216900",
    "end": "2221970"
  },
  {
    "text": "make sure that i actually were returned a an appropriate header to tell the",
    "start": "2221970",
    "end": "2227489"
  },
  {
    "text": "browser to prompt the user for the username and password so we'll go ahead to the gateway responses i'm also going",
    "start": "2227489",
    "end": "2235349"
  },
  {
    "text": "to go ahead and reset this guy just so that I don't get this later and oh it's",
    "start": "2235349",
    "end": "2243569"
  },
  {
    "text": "already here I'm left over from a previous previous demo so I've added the WWF etiquette header with basic so if",
    "start": "2243569",
    "end": "2250950"
  },
  {
    "text": "when I hit my API without credentials configured I should get a promise",
    "start": "2250950",
    "end": "2256970"
  },
  {
    "text": "I'm gonna go to ahead and copy this and start an incognito so as you can see I",
    "start": "2264890",
    "end": "2272460"
  },
  {
    "text": "get my 401 response back in my browser is now prompting me for a password so I'll go ahead and enter in my",
    "start": "2272460",
    "end": "2278400"
  },
  {
    "text": "unprivileged user and I get a response",
    "start": "2278400",
    "end": "2283859"
  },
  {
    "text": "telling me about my user information so this is actually using the contextual",
    "start": "2283859",
    "end": "2288930"
  },
  {
    "text": "information you can pass back from the custom authorizer so any key value dictionary or any key value you want to",
    "start": "2288930",
    "end": "2295980"
  },
  {
    "text": "pass back from your authorizer you can do so and then ingest it inside of your actual business logic functions so this",
    "start": "2295980",
    "end": "2305480"
  },
  {
    "text": "user is only allowed to access this specific method if I try to access a",
    "start": "2305480",
    "end": "2310950"
  },
  {
    "text": "more privileged method I should get an error message I didn't deploy that change of course I",
    "start": "2310950",
    "end": "2316680"
  },
  {
    "text": "didn't so I get my default my default error message which is left over from my 4-xx error message tests indicating that",
    "start": "2316680",
    "end": "2325290"
  },
  {
    "text": "I don't have access to this method if I go ahead and terminate this incognito session and open up a new one and then",
    "start": "2325290",
    "end": "2337380"
  },
  {
    "text": "log in with my privileged user and actually type the password correctly",
    "start": "2337380",
    "end": "2345730"
  },
  {
    "text": "it's now telling me that I'm logged in as the admin user so the the authorizer has sent back the contextual information",
    "start": "2345730",
    "end": "2352130"
  },
  {
    "text": "that I'm logged in as the auth the admin user and then if I go and try to access my privileged resource that also I get a",
    "start": "2352130",
    "end": "2361070"
  },
  {
    "text": "valid response from here as well so this way I'm able to actually protect",
    "start": "2361070",
    "end": "2366200"
  },
  {
    "text": "portions of my API using HTTP off",
    "start": "2366200",
    "end": "2371320"
  },
  {
    "start": "2378000",
    "end": "2378000"
  },
  {
    "text": "okay so checking back in with Doug again the promotion's have been a hit and so",
    "start": "2378730",
    "end": "2384710"
  },
  {
    "text": "tampers growing even even larger than it was before and now he's actually talking",
    "start": "2384710",
    "end": "2391640"
  },
  {
    "text": "with other services that are interested in partnering with them like a new",
    "start": "2391640",
    "end": "2396710"
  },
  {
    "text": "service that's actually a that were reviews brunch spots and they're interested in in cooperating together",
    "start": "2396710",
    "end": "2402890"
  },
  {
    "text": "and sharing information so now Doug needs a way to be able to share aspects or portions of his API with these third",
    "start": "2402890",
    "end": "2409700"
  },
  {
    "text": "parties while also tracking usage and limiting usage for potential billing",
    "start": "2409700",
    "end": "2415340"
  },
  {
    "text": "purposes later so that'll be our last topic about protecting our AP is with",
    "start": "2415340",
    "end": "2421280"
  },
  {
    "text": "usage plans so usage plans are a way for",
    "start": "2421280",
    "end": "2427430"
  },
  {
    "start": "2423000",
    "end": "2423000"
  },
  {
    "text": "describing a set of permissions or throttling for a given API key so there",
    "start": "2427430",
    "end": "2434240"
  },
  {
    "text": "are basically three parts of the usage plan the throttling rate which is using token bucket algorithm so rate and burst",
    "start": "2434240",
    "end": "2440720"
  },
  {
    "text": "and that's a rescue team and that is applied on a per key basis every key in",
    "start": "2440720",
    "end": "2446720"
  },
  {
    "text": "the plan gets the throttling limit additionally you can also set quotas so that's for periodic usage for daily",
    "start": "2446720",
    "end": "2454280"
  },
  {
    "text": "weekly or monthly limits and then finally we also get built in daily usage",
    "start": "2454280",
    "end": "2459859"
  },
  {
    "text": "reports on a per key basis inside of the plan for use in for billing additionally",
    "start": "2459859",
    "end": "2467750"
  },
  {
    "text": "you there's also native integration with usage plans in the AWS marketplace so if",
    "start": "2467750",
    "end": "2472940"
  },
  {
    "text": "you're actually interested in reselling your API you can set up a plan list it inside of the AWS marketplace and then a",
    "start": "2472940",
    "end": "2479390"
  },
  {
    "text": "TBS will actually take care of the billing and metering for you so that",
    "start": "2479390",
    "end": "2485900"
  },
  {
    "text": "Doug is integrated with usage plans tamper is growing even even more and now",
    "start": "2485900",
    "end": "2492590"
  },
  {
    "text": "he's starting to run into some scaling problems based on some early design decisions than he made when he first",
    "start": "2492590",
    "end": "2497660"
  },
  {
    "text": "wrote the app he's gone ahead and rewritten those portions with the",
    "start": "2497660",
    "end": "2503359"
  },
  {
    "text": "greater understanding of the API at scale and even though he has unit tests",
    "start": "2503359",
    "end": "2508550"
  },
  {
    "text": "and he's gone through and done some some load tests debugging he's still a little concerned",
    "start": "2508550",
    "end": "2513650"
  },
  {
    "text": "about flipping a hundred percent of the traffic without in sort of one big bag",
    "start": "2513650",
    "end": "2520750"
  },
  {
    "text": "so he needs a way to be able to slowly roll out this update to a portion of his",
    "start": "2520750",
    "end": "2525980"
  },
  {
    "text": "traffic validate it and then increase it over time and that's where I get to talk",
    "start": "2525980",
    "end": "2532250"
  },
  {
    "text": "about the brand new feature that we just launched today which is called carry release deployments so brand new just",
    "start": "2532250",
    "end": "2540710"
  },
  {
    "start": "2538000",
    "end": "2538000"
  },
  {
    "text": "available today canary release deployments allows you to",
    "start": "2540710",
    "end": "2546050"
  },
  {
    "text": "tag deployment as a canary for your stage so normally when we set up a stage",
    "start": "2546050",
    "end": "2552130"
  },
  {
    "text": "we or when we create a deployment we associate it with a stage and 100% of that deployment receives traffic with",
    "start": "2552130",
    "end": "2560000"
  },
  {
    "text": "the canary deployment you can specify the percentage that the carry species based on are compared to your regular",
    "start": "2560000",
    "end": "2566840"
  },
  {
    "text": "deployment you get isolated metrics and",
    "start": "2566840",
    "end": "2572240"
  },
  {
    "text": "logging so you can see just the logs metrics for your canary and any changes",
    "start": "2572240",
    "end": "2577580"
  },
  {
    "text": "that can be tied to a deployment can be tested with the canary canary deployment this includes things like stage",
    "start": "2577580",
    "end": "2583130"
  },
  {
    "text": "variables so now we'll go ahead and demonstrate using canary deployments",
    "start": "2583130",
    "end": "2591340"
  },
  {
    "text": "okay so inside of the console the first thing I need to do is actually enable",
    "start": "2596950",
    "end": "2603470"
  },
  {
    "text": "the canary deployments so over on this new tab I have this new button for",
    "start": "2603470",
    "end": "2610280"
  },
  {
    "text": "creating a canary and when I first create the canary API gateway sets up",
    "start": "2610280",
    "end": "2616700"
  },
  {
    "text": "the same deployment that's already set as prod as my canary now when I try to",
    "start": "2616700",
    "end": "2621770"
  },
  {
    "text": "go to deploy first thing I'll do is actually set my values for what I want my canary to receive so I'll go ahead",
    "start": "2621770",
    "end": "2627470"
  },
  {
    "text": "and say that I'm gonna send 10% of the traffic to my canary go ahead and click",
    "start": "2627470",
    "end": "2633320"
  },
  {
    "text": "OK and that's immediate immediately applied at the stage level then if I go",
    "start": "2633320",
    "end": "2641000"
  },
  {
    "text": "back to my API definition and do a deployment they'll not notice that my",
    "start": "2641000",
    "end": "2648200"
  },
  {
    "text": "prod stage no the console is noting that my prod stage is canary enabled so the",
    "start": "2648200",
    "end": "2653300"
  },
  {
    "text": "console by default will force you into deploying to your canary first then you promote your canary up to the production",
    "start": "2653300",
    "end": "2659930"
  },
  {
    "text": "stage after you validated it the API allows you to bypass this if you want but this is a the recommended workflow",
    "start": "2659930",
    "end": "2667280"
  },
  {
    "text": "that we we want to encourage customers to use so deploy to your canary first test and validate dial up the traffic",
    "start": "2667280",
    "end": "2674360"
  },
  {
    "text": "eventually promote the canary to your production stage",
    "start": "2674360",
    "end": "2679450"
  },
  {
    "text": "so once I deploy my canary I'm gonna go ahead and actually start up my my",
    "start": "2682710",
    "end": "2693960"
  },
  {
    "text": "Gatling request again so that I can see some metrics so I mentioned that we also",
    "start": "2693960",
    "end": "2698970"
  },
  {
    "text": "get isolated metrics and logging now even though I'm able to see the the",
    "start": "2698970",
    "end": "2704910"
  },
  {
    "text": "metrics and logs in isolation I also they also get rolled up into your",
    "start": "2704910",
    "end": "2710550"
  },
  {
    "text": "regular metrics so it's not just so you don't have to worry about looking at both at the same time you can look at",
    "start": "2710550",
    "end": "2717300"
  },
  {
    "text": "your specific canary metrics but you can also look at your service in aggregate I'm gonna go ahead and start off my",
    "start": "2717300",
    "end": "2722880"
  },
  {
    "text": "throttle simulation again just so that I can get some traffic on my API and then",
    "start": "2722880",
    "end": "2731760"
  },
  {
    "text": "if I go over to the cloud watch console and go to the metrics API gateway by",
    "start": "2731760",
    "end": "2738540"
  },
  {
    "text": "stage good reinvent 2013 API you'll",
    "start": "2738540",
    "end": "2744450"
  },
  {
    "text": "notice here that I have both a prod stage as well as this prod slash canary stage so the prod slash canary is the",
    "start": "2744450",
    "end": "2751440"
  },
  {
    "text": "specific canary metrics so if i graph both the count for the overall API as",
    "start": "2751440",
    "end": "2757530"
  },
  {
    "text": "well as the canary and graph the sum for",
    "start": "2757530",
    "end": "2766020"
  },
  {
    "text": "one minute what we should eventually start seeing",
    "start": "2766020",
    "end": "2772330"
  },
  {
    "text": "is on these last data points once we start actually getting requests which we",
    "start": "2772330",
    "end": "2779890"
  },
  {
    "text": "should eventually see is is that the will get the overall count of the number of requests that are coming into the API",
    "start": "2779890",
    "end": "2786550"
  },
  {
    "text": "and then we should see roughly about 10 percent of the requests going a 10",
    "start": "2786550",
    "end": "2791800"
  },
  {
    "text": "percent of that number in any given minute period going to the canary okay",
    "start": "2791800",
    "end": "2798820"
  },
  {
    "text": "so our last data point we got it's about 88,000 or roughly about eighty nine",
    "start": "2798820",
    "end": "2805990"
  },
  {
    "text": "thousand going to the whole stage and so the whole stage and then roughly ten percent of that eight point nine",
    "start": "2805990",
    "end": "2812250"
  },
  {
    "text": "thousand going to the canary so this allows you to sew all of the same",
    "start": "2812250",
    "end": "2818800"
  },
  {
    "text": "metrics that we talked about before your 5 X X 4 xx counts Layton sees are available inside of the canary stage so",
    "start": "2818800",
    "end": "2826750"
  },
  {
    "text": "you can set your alarms and actually do automatic rollback with lambda should",
    "start": "2826750",
    "end": "2831880"
  },
  {
    "text": "you breach any any sort of your SLA s on your API when you do deploy your canary deployments you can also if you want to",
    "start": "2831880",
    "end": "2839700"
  },
  {
    "text": "automate the promotion so you can set up a cloud watch event that will trigger the promotion of your canary to your",
    "start": "2839700",
    "end": "2845920"
  },
  {
    "text": "production traffic assuming that you haven't breached your thresholds so",
    "start": "2845920",
    "end": "2852160"
  },
  {
    "text": "additionally we also have our access logs and our regular logging also with",
    "start": "2852160",
    "end": "2857950"
  },
  {
    "text": "the slash canary convention so our access logs slash canary our stage logs",
    "start": "2857950",
    "end": "2863680"
  },
  {
    "text": "slash canary and we can see the individual requests going to our canary stage 2 then eventually look back so as",
    "start": "2863680",
    "end": "2871870"
  },
  {
    "text": "we can see here these are obviously at 4:29 s because I still have the throttling enabled and on this method",
    "start": "2871870",
    "end": "2878430"
  },
  {
    "text": "and that's canary release deployments",
    "start": "2878430",
    "end": "2883890"
  },
  {
    "text": "okay so tampers is growing so much that",
    "start": "2889270",
    "end": "2894710"
  },
  {
    "text": "now Doug is is actually doing this as his day job and he's actually brought in additional people to to work on tampers",
    "start": "2894710",
    "end": "2902660"
  },
  {
    "text": "so he needs some process and some some process in place to help bring these",
    "start": "2902660",
    "end": "2908900"
  },
  {
    "text": "people on board and maintain the overall operations of his service so now I'm",
    "start": "2908900",
    "end": "2915170"
  },
  {
    "start": "2915000",
    "end": "2915000"
  },
  {
    "text": "going to talk a little bit about some of the various methods you can manage your",
    "start": "2915170",
    "end": "2920810"
  },
  {
    "text": "API lifecycle the first and most basic",
    "start": "2920810",
    "end": "2926120"
  },
  {
    "text": "is the API stage so we already saw that when we were talking about canary release deployment but the API stage is",
    "start": "2926120",
    "end": "2933170"
  },
  {
    "text": "a named version or a name deployment and the intention is for the to use this for",
    "start": "2933170",
    "end": "2939260"
  },
  {
    "text": "various versions of your API whether you call that dev test prod or alpha beta",
    "start": "2939260",
    "end": "2944510"
  },
  {
    "text": "gamma different versions as you promote through it supports parameterised values",
    "start": "2944510",
    "end": "2951680"
  },
  {
    "text": "through stage variables so if you have a different database per stage you can set that as a stage variable to pass down to",
    "start": "2951680",
    "end": "2958430"
  },
  {
    "text": "your integrations or your lambda functions the next thing for managing",
    "start": "2958430",
    "end": "2965330"
  },
  {
    "start": "2963000",
    "end": "2963000"
  },
  {
    "text": "your API is is custom domains so this allows you to run your API inside of",
    "start": "2965330",
    "end": "2970850"
  },
  {
    "text": "your own DNS so by default when you create your REST API you get a Amazon AWS comm domain with a gooood",
    "start": "2970850",
    "end": "2978020"
  },
  {
    "text": "representing your REST API ID if you want to put a DNS name on top of that you can configure that with a custom",
    "start": "2978020",
    "end": "2985040"
  },
  {
    "text": "domain inside of API gateway this is actually one of our recommendations if you're interested in versioning your API",
    "start": "2985040",
    "end": "2991570"
  },
  {
    "text": "so that you can actually maintain your two versions as independent REST API s and iterate on them independently so you",
    "start": "2991570",
    "end": "2998750"
  },
  {
    "text": "can set up a PID for instance API tamper comm slash v1 to go to the v1 version of",
    "start": "2998750",
    "end": "3005050"
  },
  {
    "text": "your REST API and API to tamper comm slash v2 v2 to go to your v2 API and",
    "start": "3005050",
    "end": "3010620"
  },
  {
    "text": "with the launch of regional API endpoints now there's no longer a",
    "start": "3010620",
    "end": "3015640"
  },
  {
    "text": "restriction so you can actually create the same custom domain in multiple region which allows you to do either failover",
    "start": "3015640",
    "end": "3023650"
  },
  {
    "text": "or active-active multi-region redundancy and there's actually a workshop focused",
    "start": "3023650",
    "end": "3030190"
  },
  {
    "text": "solely on this topic so if you don't have time to do that while you're at reinvent the materials will be available",
    "start": "3030190",
    "end": "3036400"
  },
  {
    "text": "later so dude you do check out that if you're interested so now we also need a",
    "start": "3036400",
    "end": "3045039"
  },
  {
    "text": "way to actually describe our api's now certainly you can go through and click through the console and configure API",
    "start": "3045039",
    "end": "3052119"
  },
  {
    "text": "that way but it's it's really nice to be able to actually describe the API in a",
    "start": "3052119",
    "end": "3058930"
  },
  {
    "text": "definition that you can view and treat as code and the on the default supported",
    "start": "3058930",
    "end": "3066460"
  },
  {
    "text": "mechanism inside of a PA gateway is with swagger and if you're not familiar with swagger it's a standard from the open",
    "start": "3066460",
    "end": "3072670"
  },
  {
    "text": "API initiative currently the 2.0 version is a subset of 2.0 version is supported",
    "start": "3072670",
    "end": "3079270"
  },
  {
    "text": "inside of API gateway and I do realize that 3.0 is available and we have asked we have plenty of customers asking for",
    "start": "3079270",
    "end": "3086109"
  },
  {
    "text": "that and we will definitely consider adding that in the future so swagger",
    "start": "3086109",
    "end": "3093730"
  },
  {
    "text": "supports Jason and yamo as the actual definition and you can import swagger as",
    "start": "3093730",
    "end": "3101109"
  },
  {
    "text": "well as get it back out so this is a great way to actually replicate your API definitions across regions for that",
    "start": "3101109",
    "end": "3108069"
  },
  {
    "text": "cross region redundancy we were talking about earlier additionally AWS has what",
    "start": "3108069",
    "end": "3116650"
  },
  {
    "start": "3112000",
    "end": "3112000"
  },
  {
    "text": "we call the serverless application model or Sam for short and we see here Sam the squirrel which is",
    "start": "3116650",
    "end": "3122440"
  },
  {
    "text": "our mascot for for the service app application model so Sam is an extension",
    "start": "3122440",
    "end": "3128500"
  },
  {
    "text": "of cloud formation it simplifies some of the API gateway specific configuration",
    "start": "3128500",
    "end": "3135520"
  },
  {
    "text": "in cloud formation such that you write much less boilerplate in order to set up your API so you have a bunch of resource",
    "start": "3135520",
    "end": "3144549"
  },
  {
    "text": "types including functions API is in tables so you can simplify your DynamoDB table provisioning as well",
    "start": "3144549",
    "end": "3151789"
  },
  {
    "text": "and because it's an extension of CloudFormation you can actually mix-and-match and add additional cloud",
    "start": "3151789",
    "end": "3158209"
  },
  {
    "text": "formation values as well highlight there",
    "start": "3158209",
    "end": "3163609"
  },
  {
    "start": "3161000",
    "end": "3161000"
  },
  {
    "text": "so things like s3 or Kinesis or step functions if you want to add those as explicit CloudFormation resources on top",
    "start": "3163609",
    "end": "3170269"
  },
  {
    "text": "of your Sam template you can do that Sam also supports parameters and mappings and outputs same as any other",
    "start": "3170269",
    "end": "3176179"
  },
  {
    "text": "CloudFormation stack and import supports intrinsic functions as well as import value and like the swagger definition",
    "start": "3176179",
    "end": "3183499"
  },
  {
    "text": "and CloudFormation itself that supports yam or json is the actual language for definition so I would be remiss if I",
    "start": "3183499",
    "end": "3193249"
  },
  {
    "text": "didn't also mention that there's a number of other methods for doing exactly the same thing so things like",
    "start": "3193249",
    "end": "3199219"
  },
  {
    "text": "AWS Challis or server lists are popular frameworks for actually describing and",
    "start": "3199219",
    "end": "3205069"
  },
  {
    "text": "deploying your api's so feel free to use whatever tool you feel most comfortable with that actually helps you in your own",
    "start": "3205069",
    "end": "3211459"
  },
  {
    "text": "process so once we actually have our definition and we have our code we need",
    "start": "3211459",
    "end": "3217909"
  },
  {
    "text": "some way of actually deploying it or building and deploying it and so I wanna",
    "start": "3217909",
    "end": "3224569"
  },
  {
    "text": "highlight a couple of other services first is AWS code built if you're not",
    "start": "3224569",
    "end": "3229999"
  },
  {
    "text": "familiar it's our managed build system so it's a fully managed build environment much like other area to be a",
    "start": "3229999",
    "end": "3237259"
  },
  {
    "text": "lesser versus you pay only for the compute time than you actually use you it scales up to to come scales up to",
    "start": "3237259",
    "end": "3245029"
  },
  {
    "text": "four for your your needs for your building and it integrates directively with code pipeline and jenkins it can",
    "start": "3245029",
    "end": "3252799"
  },
  {
    "text": "also be used as a is a test step inside of code pipeline which is the next",
    "start": "3252799",
    "end": "3257959"
  },
  {
    "text": "service that I would like to talk about which is a mechanism for actually describing and visualizing your",
    "start": "3257959",
    "end": "3263569"
  },
  {
    "text": "promotion through your various stages of your PI of your applications lifecycle",
    "start": "3263569",
    "end": "3269499"
  },
  {
    "text": "so this will allows you to build continuous delivery pipelines for your",
    "start": "3269499",
    "end": "3275329"
  },
  {
    "text": "AP is you run your code build step on commits you deploy it using cloud",
    "start": "3275329",
    "end": "3283309"
  },
  {
    "text": "formation or orco deployed you run tests again either",
    "start": "3283309",
    "end": "3288770"
  },
  {
    "text": "with Jenkins or with cohhd cohhd builds and then do promotions based on whether",
    "start": "3288770",
    "end": "3294680"
  },
  {
    "text": "or not those tests pass or fail so that",
    "start": "3294680",
    "end": "3300710"
  },
  {
    "start": "3299000",
    "end": "3299000"
  },
  {
    "text": "brings us to the end of the talk and if I can get you to take away anything from this talk it's to be like my friend Doug",
    "start": "3300710",
    "end": "3307960"
  },
  {
    "text": "and you can be like Doug by customizing your API for your operational needs by",
    "start": "3307960",
    "end": "3313100"
  },
  {
    "text": "adding headers or generating eric customizing your error messages monitor",
    "start": "3313100",
    "end": "3318140"
  },
  {
    "text": "your api's with cloud watch logs and metrics and set up operational alarms",
    "start": "3318140",
    "end": "3324280"
  },
  {
    "text": "use the logging to actually diagnose and correct those errors make use of the",
    "start": "3324280",
    "end": "3329420"
  },
  {
    "text": "throttling and authorization built into API gateway to protect your api from bad actors make your api available to third",
    "start": "3329420",
    "end": "3337550"
  },
  {
    "text": "parties listed on the AWS marketplace if you so choose as well as manager api",
    "start": "3337550",
    "end": "3342860"
  },
  {
    "text": "with the tools that make the most sense for your environment so if you're",
    "start": "3342860",
    "end": "3349430"
  },
  {
    "text": "interested in learning more the server list homepage aws.amazon.com slash",
    "start": "3349430",
    "end": "3355010"
  },
  {
    "text": "serverless is a great jumping-off point to get to documentation and other services and services in the server list",
    "start": "3355010",
    "end": "3361160"
  },
  {
    "text": "family and then there's some additional ways to connect out with us first and",
    "start": "3361160",
    "end": "3367760"
  },
  {
    "text": "most obvious is then AWS forums so these are service specific forums where you can ask questions from other users as",
    "start": "3367760",
    "end": "3374090"
  },
  {
    "text": "well as the AWS service teams additionally Stack Overflow is obviously",
    "start": "3374090",
    "end": "3379340"
  },
  {
    "text": "a great resource for getting community support but AAAS engineers also do",
    "start": "3379340",
    "end": "3384680"
  },
  {
    "text": "monitor these forums on specifically the tags that are tied to their service teams so that's another way to get",
    "start": "3384680",
    "end": "3390590"
  },
  {
    "text": "support as well and then finally the github repositories so github / github /",
    "start": "3390590",
    "end": "3398330"
  },
  {
    "text": "AWS which is where most of our official SDKs are housed and then the AWS labs",
    "start": "3398330",
    "end": "3404170"
  },
  {
    "text": "organization which is where a lot of our demos and examples as well as Sam live",
    "start": "3404170",
    "end": "3412360"
  },
  {
    "text": "so that's that's everything thank you very much for coming out do please fill out the evaluations for",
    "start": "3412360",
    "end": "3420390"
  },
  {
    "text": "the talk that's a great way for to make sure that for myself and for the company to make sure that we're providing great",
    "start": "3420390",
    "end": "3425970"
  },
  {
    "text": "content for you every year at reinvent so that we can continue to improve so thank you very much",
    "start": "3425970",
    "end": "3431330"
  },
  {
    "text": "[Applause]",
    "start": "3431330",
    "end": "3435489"
  }
]