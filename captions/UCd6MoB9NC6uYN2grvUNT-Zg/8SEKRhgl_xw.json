[
  {
    "start": "0",
    "end": "54000"
  },
  {
    "text": "hello everyone how you doing awesome thank you for coming I know it's 5 p.m.",
    "start": "30",
    "end": "5640"
  },
  {
    "text": "I know everyone's looking forward to the party he's coming to the party cool if you see me there come and see me come",
    "start": "5640",
    "end": "11820"
  },
  {
    "text": "and say hello so I'm here today joined by our friends from a partner from we've",
    "start": "11820",
    "end": "17340"
  },
  {
    "text": "works to talk to you about operations with ECS ok so we're gonna be talking",
    "start": "17340",
    "end": "22859"
  },
  {
    "text": "about best practices we're gonna be talking about security we're gonna be talking about how to deploy ECS we're",
    "start": "22859",
    "end": "29279"
  },
  {
    "text": "gonna be talking about availability scaling monitoring logging all those kind of normal operational concerns and",
    "start": "29279",
    "end": "37140"
  },
  {
    "text": "then my friend phones here from we've works is going to come up on stage and he's going to show you some really cool",
    "start": "37140",
    "end": "42690"
  },
  {
    "text": "stuffs they've been working on so if you've not heard of we've works they do some really really cool things around service discovery networking monitoring",
    "start": "42690",
    "end": "50190"
  },
  {
    "text": "and it all works amazingly with ECS so before we start I want to just sort of",
    "start": "50190",
    "end": "56520"
  },
  {
    "start": "54000",
    "end": "54000"
  },
  {
    "text": "baseline knowledge here and just talk about a few of the key components of ECS and then we're going to start talking",
    "start": "56520",
    "end": "62520"
  },
  {
    "text": "through the operational responsibilities involved with those so first of all",
    "start": "62520",
    "end": "67890"
  },
  {
    "text": "we've got you see our our container registry so I manage container registry somewhere where you can store securely",
    "start": "67890",
    "end": "75060"
  },
  {
    "text": "your containers and your images then we've got ECS the service itself so",
    "start": "75060",
    "end": "81210"
  },
  {
    "text": "fully managed container management service so ETS is responsible for receiving your tasks definitions and",
    "start": "81210",
    "end": "88310"
  },
  {
    "text": "scheduling them and placing them and keeping them available and keeping them online within your cluster finally at",
    "start": "88310",
    "end": "95610"
  },
  {
    "text": "the bottom here we've got your container instances so this is your pool of compute where your containers are going",
    "start": "95610",
    "end": "100740"
  },
  {
    "text": "to run ok so let's talk through each one of these components and talk through",
    "start": "100740",
    "end": "105840"
  },
  {
    "start": "103000",
    "end": "103000"
  },
  {
    "text": "some of the operational responsibilities that you have and some other ones that we at AWS half and we have crafted for",
    "start": "105840",
    "end": "111840"
  },
  {
    "text": "you so with ECS itself we look after a lot for you here so as it's a managed",
    "start": "111840",
    "end": "119250"
  },
  {
    "text": "service we're going to be looking after the security and monitoring the patching of the service keeping it available for",
    "start": "119250",
    "end": "125670"
  },
  {
    "text": "you scaling it and also looking at cost control on our side",
    "start": "125670",
    "end": "131310"
  },
  {
    "text": "so all you really need to worry about when deploying in see s cluster is creating it and that's",
    "start": "131310",
    "end": "136830"
  },
  {
    "text": "as simple as one line in the CLI you see out there so really nice and easy then",
    "start": "136830",
    "end": "143520"
  },
  {
    "text": "we look at EC are the container registry so with this there's a little bit more for you to think about so again we're",
    "start": "143520",
    "end": "150090"
  },
  {
    "text": "going to be looking after the monitoring and availability of your container registry we're going to be scaling that",
    "start": "150090",
    "end": "155190"
  },
  {
    "text": "for you and patching it behind the scenes etc but you're going to need to look at deployment and how you get your",
    "start": "155190",
    "end": "161790"
  },
  {
    "text": "containers in there you're going to need to look at cost control so do you keep",
    "start": "161790",
    "end": "167489"
  },
  {
    "text": "all of your container images forever do you lifecycle them so we have this if",
    "start": "167489",
    "end": "172890"
  },
  {
    "text": "you if you work with AWS before we have a shared model of responsibility we talked a lot about it when it comes to",
    "start": "172890",
    "end": "178769"
  },
  {
    "text": "security but it applies with operations as well so we're looking after the",
    "start": "178769",
    "end": "183930"
  },
  {
    "text": "operations of the cloud you're looking after operations within the cloud using the building blocks that we provide so",
    "start": "183930",
    "end": "190890"
  },
  {
    "text": "for each of these blue items here I'm going to be talking you through today how you can utilize the building blocks we provide to achieve these when we look",
    "start": "190890",
    "end": "200700"
  },
  {
    "text": "at the container instances so these are the pool of compute the instances that are going to actually run your",
    "start": "200700",
    "end": "205799"
  },
  {
    "text": "containers there's a bit more for you to think about here ok so how do you best deploy these how do you manage your",
    "start": "205799",
    "end": "212910"
  },
  {
    "text": "costs how do you reduce your cost and optimize how do you patch your container instances how do you look after",
    "start": "212910",
    "end": "219930"
  },
  {
    "text": "monitoring and make sure that you're not exceeding CPU memory etc how do you do",
    "start": "219930",
    "end": "224970"
  },
  {
    "text": "scaling and availability and security as well so I'm going to talk you through",
    "start": "224970",
    "end": "230340"
  },
  {
    "text": "all of these essentially we're providing the building blocks so we're providing",
    "start": "230340",
    "end": "240360"
  },
  {
    "text": "the building blocks here so when it comes to things like deployment how do you deploy an ECS container instance an",
    "start": "240360",
    "end": "247410"
  },
  {
    "text": "ecs container instance is just an ec2 resource is an instance in itself ok so the normal technologies apply here so",
    "start": "247410",
    "end": "254820"
  },
  {
    "text": "cloud formation is a great option maybe use the CLI as the SDKs how do you deal",
    "start": "254820",
    "end": "259979"
  },
  {
    "text": "with security within your container instances so again the normal way that you do using iam things like instance",
    "start": "259979",
    "end": "266640"
  },
  {
    "text": "roles inspector if you haven't seen inspector advised you go and check it out",
    "start": "266640",
    "end": "271650"
  },
  {
    "text": "so it's vulnerability scanning and manage vulnerability scanning service they can check your container instances",
    "start": "271650",
    "end": "277290"
  },
  {
    "text": "to make sure that you you don't have any vulnerabilities they're monitoring the cloud watch their ACS has really tight",
    "start": "277290",
    "end": "283680"
  },
  {
    "text": "integration with cloud watch we're going to go through that and cover some best practices there for monitoring and",
    "start": "283680",
    "end": "288830"
  },
  {
    "text": "scaling unavailability you have the all the powers of an auto scaling group available to you for cost control and it",
    "start": "288830",
    "end": "295860"
  },
  {
    "text": "covers some common cost control measures as well around DCs later on when it",
    "start": "295860",
    "end": "302340"
  },
  {
    "start": "301000",
    "end": "301000"
  },
  {
    "text": "comes to tossing containers so with ECS the ETS service is going to be taken",
    "start": "302340",
    "end": "307920"
  },
  {
    "text": "care of deployment so it's going to be looking at your container instances working out where those containers can",
    "start": "307920",
    "end": "313110"
  },
  {
    "text": "be slotted in in terms of CPU in terms of memory we're going to be monitoring them and if it's a long-running service",
    "start": "313110",
    "end": "319230"
  },
  {
    "text": "we're going to take care of keeping that service available for you well you need to think about is the scaling properties",
    "start": "319230",
    "end": "325920"
  },
  {
    "text": "for your tasking containers so do you want to auto scale your tasks on containers if you do what metric do you",
    "start": "325920",
    "end": "332730"
  },
  {
    "text": "want to use so we'll cover some best practices there as we go through also around security so how do you ensure",
    "start": "332730",
    "end": "339270"
  },
  {
    "text": "that what's going on in your containers is recent patched up to date maybe you've got a container that was built",
    "start": "339270",
    "end": "345540"
  },
  {
    "text": "six months ago with an outdated base operating system so I'll show you some strategies for improving that we'll talk",
    "start": "345540",
    "end": "353040"
  },
  {
    "text": "a bit about logging and how you can really easily set up centralized logging across your whole cluster and contain a",
    "start": "353040",
    "end": "358230"
  },
  {
    "text": "landscape and also patching as well so first up deployment this is mainly going",
    "start": "358230",
    "end": "365790"
  },
  {
    "text": "to cover how to get ECS up and running and best practices here so the first",
    "start": "365790",
    "end": "371160"
  },
  {
    "text": "question I normally get asked by customers is how should I set this up so one option is the AWS management console",
    "start": "371160",
    "end": "377940"
  },
  {
    "text": "okay so the ECS team recently updated this it's got a nice wizard now that will actually create your cluster for",
    "start": "377940",
    "end": "384390"
  },
  {
    "text": "you this is a really nice option if you're new to ETS ok it's going to get you up and running very very quickly with a",
    "start": "384390",
    "end": "391020"
  },
  {
    "text": "pool of compute the trouble is when you start operating at scale you don't tend",
    "start": "391020",
    "end": "397470"
  },
  {
    "text": "to have just one cluster right you've got dev QA products maybe you've got one for PCI stuff maybe",
    "start": "397470",
    "end": "403800"
  },
  {
    "text": "you've got one for graphical compute stuff so you end up with a lot of clusters and with a management console",
    "start": "403800",
    "end": "409560"
  },
  {
    "text": "it's it's great for exploring but you don't get that repeatability and the benefits of infrastructure is code for",
    "start": "409560",
    "end": "415260"
  },
  {
    "text": "example so if you're like a programmer",
    "start": "415260",
    "end": "420270"
  },
  {
    "text": "or you good at scripting or maybe you're like king of the bash one-liners the default response normally is okay I'll",
    "start": "420270",
    "end": "426960"
  },
  {
    "text": "write a script okay I'm sure I can scrape this AWS has CLI SDKs etc I can",
    "start": "426960",
    "end": "432960"
  },
  {
    "text": "do this it's actually quite hard to get this right and this is sort of standard across most AWS services here so if you",
    "start": "432960",
    "end": "439980"
  },
  {
    "text": "do try and script a whole environment like this you need to start thinking about what happens if my script fails halfway through how do I deal with that",
    "start": "439980",
    "end": "447030"
  },
  {
    "text": "do I write safety checks off the each AWS command to make sure it ran okay Chloe roll back if I do have a problem",
    "start": "447030",
    "end": "453420"
  },
  {
    "text": "and then all of a sudden how do I upgrade that and manage state and so I need to add more instances change the",
    "start": "453420",
    "end": "459720"
  },
  {
    "text": "army ID for example then you stop thinking about update scripts and you know it all becomes more difficult than",
    "start": "459720",
    "end": "466230"
  },
  {
    "text": "you first thought so a really great answer here is cloud formation now get a",
    "start": "466230",
    "end": "472320"
  },
  {
    "text": "show of hands if you use cloud formation today awesome lots of you how happy are we that yeah more support came out makes",
    "start": "472320",
    "end": "482250"
  },
  {
    "text": "this a lot easier so I'm going to show you some best practices for deploying ECS with cloud formation today so this",
    "start": "482250",
    "end": "490080"
  },
  {
    "text": "is Alice she has a few requirements her boss is a bit of a hard case and is",
    "start": "490080",
    "end": "495419"
  },
  {
    "text": "pushing how to get this out as soon as possible and she needs to deploy a new environment it's got to be self-contained deployable",
    "start": "495419",
    "end": "501840"
  },
  {
    "text": "unit and her team's always asking for more and more environments so it needs to be repeatable you know no human error",
    "start": "501840",
    "end": "508260"
  },
  {
    "text": "etc auditable and self-documenting because hey who wants to keep an Excel",
    "start": "508260",
    "end": "513630"
  },
  {
    "text": "spreadsheet of firewall rules so this is where cloud formation comes in so for those in the room that don't",
    "start": "513630",
    "end": "520440"
  },
  {
    "text": "use cloud formation today it allows you to specify the resources you want to be created and updated and managed in your",
    "start": "520440",
    "end": "526380"
  },
  {
    "text": "AWS account in a Yama law Jason template so when it comes to deploy this it's you",
    "start": "526380",
    "end": "533820"
  },
  {
    "text": "can either use the management console to deploy your templates more commonly in larger environments you're going to be putting it through continuous",
    "start": "533820",
    "end": "540300"
  },
  {
    "text": "integration environments continuous deployment environments so all of a sudden if you've got all of your infrastructure as code in a template you",
    "start": "540300",
    "end": "547890"
  },
  {
    "text": "can put that through your normal software development CI CD type pipeline and you can start running unit tests and",
    "start": "547890",
    "end": "553529"
  },
  {
    "text": "pen tests in an automatic fashion on your infrastructure so some really good benefits there you see the command here",
    "start": "553529",
    "end": "560160"
  },
  {
    "text": "just to create the stack for the first time that's going to spin up everything in the template when it comes to",
    "start": "560160",
    "end": "566820"
  },
  {
    "text": "updating I can make a change in my template for example say a new ECS army gets published I can just change that",
    "start": "566820",
    "end": "573390"
  },
  {
    "text": "and cloud formation is just going to change what's needed it's gonna recognize it's not going to redeploy the whole environment and it's gonna update",
    "start": "573390",
    "end": "580440"
  },
  {
    "text": "my stack for me if I need a new environment I can just change the stack",
    "start": "580440",
    "end": "585870"
  },
  {
    "text": "name and then I get a whole nother environment side-by-side really quickly really easily so I know talked a bit",
    "start": "585870",
    "end": "593519"
  },
  {
    "text": "about how to do ECS with cloud formation now and some best practices here so you can see on the left the AWS CLI for",
    "start": "593519",
    "end": "600300"
  },
  {
    "text": "deploying a container registry at just one command it's very similar within cloud formation so you specify here an",
    "start": "600300",
    "end": "607470"
  },
  {
    "text": "ECR repository and I'm gonna give it a name of my app when I want to actually",
    "start": "607470",
    "end": "613829"
  },
  {
    "text": "use ECR again really really simple so we have an ECR get logging command and",
    "start": "613829",
    "end": "620399"
  },
  {
    "text": "that's going to get the the repository credentials good tip here we have a",
    "start": "620399",
    "end": "626640"
  },
  {
    "text": "credential help up if you're using ECR today use this it's gonna mean that you don't have to do that whole",
    "start": "626640",
    "end": "632220"
  },
  {
    "text": "authentication loop that first command there you can just use docker push docker pool and docker is automatically",
    "start": "632220",
    "end": "638279"
  },
  {
    "text": "going to authenticate you with the registry there so deploying an ets",
    "start": "638279",
    "end": "644220"
  },
  {
    "text": "cluster again really really simple in a cloud formation template this is the actual cluster itself so all we're gonna",
    "start": "644220",
    "end": "651779"
  },
  {
    "text": "give it as a name at this stage and then that's not that useful on its own so we probably need some container instances",
    "start": "651779",
    "end": "658410"
  },
  {
    "text": "and this if you remember back to our original slide where we showed the responsibilities this is probably where",
    "start": "658410",
    "end": "664470"
  },
  {
    "text": "most of the operational responsibilities lie okay so what I'm showing here on the left is a",
    "start": "664470",
    "end": "670950"
  },
  {
    "text": "best practice V PC deployment with EC s inside it ok so I'm going to talk this",
    "start": "670950",
    "end": "676020"
  },
  {
    "text": "through I know it's a busy graph essentially at the top we've got a V PC covers a region we've got availability",
    "start": "676020",
    "end": "683250"
  },
  {
    "text": "zones inside we've got a standard to tier V PC in terms of subnets so we've",
    "start": "683250",
    "end": "688320"
  },
  {
    "text": "got a couple of public subnets one in each available T zone a couple of private ones we've got an application",
    "start": "688320",
    "end": "693930"
  },
  {
    "text": "load balancer in there so really nice integration with e CS I'm gonna show you some features that I can do in a minute",
    "start": "693930",
    "end": "701220"
  },
  {
    "text": "nat gateways for outbound traffic and an auto scaling group of container instances so that's your actual pool of",
    "start": "701220",
    "end": "707400"
  },
  {
    "text": "compute here by putting it in an auto scaling group you're going to get self-healing so if we had an AZ failure",
    "start": "707400",
    "end": "713790"
  },
  {
    "text": "or one of your instances dies the auto scaling group will automatically self Hill and it will deploy those in the",
    "start": "713790",
    "end": "719880"
  },
  {
    "text": "other availability zone or spread the load appropriately there so you get really nice self-healing properties saving your on-call people having to be",
    "start": "719880",
    "end": "726840"
  },
  {
    "text": "woken up in the middle of the night I'm also going to show you how to do centralized logging with cloud watch set",
    "start": "726840",
    "end": "732570"
  },
  {
    "text": "that up really easily so that you can get all your container logs in one place if we break this down and look at the",
    "start": "732570",
    "end": "738360"
  },
  {
    "start": "735000",
    "end": "735000"
  },
  {
    "text": "inbound traffic route here you can see we've got the the HTTP requests coming",
    "start": "738360",
    "end": "743790"
  },
  {
    "text": "in in this case with running an API a simple web service the alb the",
    "start": "743790",
    "end": "749190"
  },
  {
    "text": "application load balancer can use path based routing to decide which containers you go to which ECS services and tasks",
    "start": "749190",
    "end": "756770"
  },
  {
    "text": "it also supports dynamic host port mapping so this means that if you have a container that you want to bind to port",
    "start": "756770",
    "end": "763560"
  },
  {
    "text": "80 on the host there's only one port 80 on each host normally right unless you've got multiple IPS and stuff and",
    "start": "763560",
    "end": "768750"
  },
  {
    "text": "then it gets very complicated so when you're using the alb with ECS it'll actually dynamically generate a host",
    "start": "768750",
    "end": "775080"
  },
  {
    "text": "port for you and it will maintain that mapping and what that means in reality is that you can get much better packing",
    "start": "775080",
    "end": "780600"
  },
  {
    "text": "of your containers on each host and much better cost efficiency outbound traffic",
    "start": "780600",
    "end": "786660"
  },
  {
    "text": "so we've got private subnets are ECS container instances are in private subnets",
    "start": "786660",
    "end": "792030"
  },
  {
    "text": "we may want that to be completely isolated from the internet but in reality there are normally cases where",
    "start": "792030",
    "end": "797400"
  },
  {
    "text": "you want your containers to speak outbound to other services maybe third party api's",
    "start": "797400",
    "end": "802910"
  },
  {
    "text": "so we're using in this case in that gateways to route outbound traffic from our private subnets",
    "start": "802910",
    "end": "810170"
  },
  {
    "text": "logging so cloud watch logs I'm going to show you how to integrate cloud watch logs with your task definitions really",
    "start": "810170",
    "end": "816689"
  },
  {
    "text": "easily so the too long didn't read here is the everything in that diagram we",
    "start": "816689",
    "end": "823529"
  },
  {
    "text": "have a reference architecture for on github so to set up cloud formation templates rittany amel you can click the launch",
    "start": "823529",
    "end": "830189"
  },
  {
    "text": "stack button and it's going to launch that whole thing in your account for you so really really easy to get started it",
    "start": "830189",
    "end": "836670"
  },
  {
    "text": "takes up 10-15 minutes to run into your account and you're going to have that whole production ready best practice",
    "start": "836670",
    "end": "841949"
  },
  {
    "text": "setup so let's talk through some of the other pillars of operational best",
    "start": "841949",
    "end": "848639"
  },
  {
    "text": "practice here cost optimization so you've got your ECS cluster deployed and your starting using it but now you want",
    "start": "848639",
    "end": "855329"
  },
  {
    "text": "to reduce cost further so the way you do this is very standard to the rest of AWS",
    "start": "855329",
    "end": "860519"
  },
  {
    "start": "857000",
    "end": "857000"
  },
  {
    "text": "and ec2 right container instances are just ec2 resources so you can use",
    "start": "860519",
    "end": "866899"
  },
  {
    "text": "reserved instances if you know that you have a standard demand you can reserve",
    "start": "866899",
    "end": "872790"
  },
  {
    "text": "that standard demand and use on demand for your Peaks okay so really really stand a best practice they're up to 75%",
    "start": "872790",
    "end": "880019"
  },
  {
    "text": "savings another option is to use spot so",
    "start": "880019",
    "end": "886649"
  },
  {
    "start": "882000",
    "end": "882000"
  },
  {
    "text": "if you haven't seen spot before it allows you to bid on unused capacity and our date centers you can get really",
    "start": "886649",
    "end": "891809"
  },
  {
    "text": "really good cost savings using spot we have something called spot fleet that allows you to say I don't really care",
    "start": "891809",
    "end": "898589"
  },
  {
    "text": "what instance type I have okay I maybe want some sea fours maybe the new new",
    "start": "898589",
    "end": "904290"
  },
  {
    "text": "instance types you select which ones you want you say roughly how many CPUs you want how much memory you want and spot",
    "start": "904290",
    "end": "910829"
  },
  {
    "text": "FLE is going to create that diverse pool of instances so it's a really nice way of using spot and it works really well",
    "start": "910829",
    "end": "916920"
  },
  {
    "text": "with ECS another option another good tip is to use multiple SES clusters so",
    "start": "916920",
    "end": "923790"
  },
  {
    "start": "918000",
    "end": "918000"
  },
  {
    "text": "purpose purpose-driven here so in this example we've got a development cluster running on spot we've got production",
    "start": "923790",
    "end": "930809"
  },
  {
    "text": "using auto scaling group with our eyes for reserved instances and on demand for peak",
    "start": "930809",
    "end": "936390"
  },
  {
    "text": "and we've got a spot flee of GPU instances for our batch stuff okay maybe you don't want everything running on GPU",
    "start": "936390",
    "end": "942600"
  },
  {
    "text": "because that will that will increase cost so think of this when you're creating your clusters is very easy very",
    "start": "942600",
    "end": "948030"
  },
  {
    "text": "quick to create ECS clusters so it's not the overhead it might be with some other solutions scaling how best to scale okay",
    "start": "948030",
    "end": "957360"
  },
  {
    "text": "so there's a couple of different dimensions we need to think about here first of all is our pool of compute so",
    "start": "957360",
    "end": "963570"
  },
  {
    "text": "again as I mentioned normal auto scaling rules apply here same as with ec2 use auto scaling groups set your minimum and",
    "start": "963570",
    "end": "970050"
  },
  {
    "text": "maximum pool and then scale up and down how do you scale up and down what metrics should use this depends on your",
    "start": "970050",
    "end": "977400"
  },
  {
    "text": "workload a bit but we have some best practices here so our recommendation is to use the memory reservation cloud",
    "start": "977400",
    "end": "983910"
  },
  {
    "text": "watch metric so this is going to allow you to watch how many containers how",
    "start": "983910",
    "end": "989970"
  },
  {
    "text": "many tasks have been assigned to your ECS house what the memory reservation is and if you water scale based on this it",
    "start": "989970",
    "end": "996330"
  },
  {
    "text": "means that you're not going to get those out of capacity errors when you're trying to provision too many containers and you don't have enough memory there",
    "start": "996330",
    "end": "1002150"
  },
  {
    "text": "so this is a good baseline metric to use",
    "start": "1002150",
    "end": "1007240"
  },
  {
    "start": "1007000",
    "end": "1007000"
  },
  {
    "text": "the other dimension you need to think about once you've got your auto scaling pool of compute is the individual",
    "start": "1007240",
    "end": "1013640"
  },
  {
    "text": "scaling properties of each service that you have so if you have a long-running set of containers maybe a website or",
    "start": "1013640",
    "end": "1020360"
  },
  {
    "text": "something how do you want that to scale within your pool of compute do you just want one copy of it to 100 do you want",
    "start": "1020360",
    "end": "1026689"
  },
  {
    "text": "to auto scale so we have application auto scaling it works very similarly to it does with instances so you specify",
    "start": "1026690",
    "end": "1032959"
  },
  {
    "text": "the minimum and maximum and desired number and then your scaling metric as well so in this case I'm scaling based",
    "start": "1032959",
    "end": "1039650"
  },
  {
    "text": "on CPU the number of containers I'm running from and you do this by setting cloud watch alarms you can actually use",
    "start": "1039650",
    "end": "1045829"
  },
  {
    "text": "custom metrics in both of these types of auto scaling so if maybe you're a ticket website and you want to scale based on",
    "start": "1045829",
    "end": "1051320"
  },
  {
    "text": "number of tickets sold or some kind of metric like that that's completely possible as well security next pillar so",
    "start": "1051320",
    "end": "1061160"
  },
  {
    "text": "at AWS security is job zero for us a number one priority so we want to allow",
    "start": "1061160",
    "end": "1067460"
  },
  {
    "text": "you to do the same and provide you the primitives to do that so first up I've got my pool",
    "start": "1067460",
    "end": "1072830"
  },
  {
    "start": "1071000",
    "end": "1071000"
  },
  {
    "text": "of compute I've got my container instances how do i scale that how do i patch that so we have our ECS optimized am iose and",
    "start": "1072830",
    "end": "1080960"
  },
  {
    "text": "every so often we release a new version maybe you're using a different operating system you want to patch that one really",
    "start": "1080960",
    "end": "1086870"
  },
  {
    "text": "nice way with cloud formation is by using something called an autos sorry an",
    "start": "1086870",
    "end": "1092659"
  },
  {
    "text": "auto scaling rolling update policy so this is something that you add into your auto scaling group to say the batch",
    "start": "1092659",
    "end": "1099320"
  },
  {
    "text": "sizes right when I change the army ID at the top and run that cloud formation update stack how many instances should",
    "start": "1099320",
    "end": "1106460"
  },
  {
    "text": "should cloud formation roll at a time so using this you can get really nice and easy zero downtime updates and patching",
    "start": "1106460",
    "end": "1113690"
  },
  {
    "text": "of your pool of compute when it comes to patching your containers this is where",
    "start": "1113690",
    "end": "1120620"
  },
  {
    "start": "1117000",
    "end": "1117000"
  },
  {
    "text": "we look to a partner so really good partner in this space is someone called twist lock so they have a solution that",
    "start": "1120620",
    "end": "1127190"
  },
  {
    "text": "allows automatic scanning of container images okay so as soon as someone checks",
    "start": "1127190",
    "end": "1133429"
  },
  {
    "text": "something into version control this can integrate with your CI CD system do vulnerability scans have a look at",
    "start": "1133429",
    "end": "1139580"
  },
  {
    "text": "what's going on inside the container and flag that and prevent that that problem ever hitting production so really nice",
    "start": "1139580",
    "end": "1146840"
  },
  {
    "text": "service there recommend to go and check it out one way that you can minimize that and",
    "start": "1146840",
    "end": "1153830"
  },
  {
    "start": "1150000",
    "end": "1150000"
  },
  {
    "text": "the best practice is to use the smallest container base as you can right so in this case I'm using scratch which is a",
    "start": "1153830",
    "end": "1160940"
  },
  {
    "text": "docker container docker image with absolutely nothing in it so this is a really good option if you've got like a",
    "start": "1160940",
    "end": "1166789"
  },
  {
    "text": "static binary maybe but with go or something that you just want to run and you you want to minimize your attack",
    "start": "1166789",
    "end": "1172580"
  },
  {
    "text": "surface I am rolls if you have containers that",
    "start": "1172580",
    "end": "1179090"
  },
  {
    "text": "need to access AWS services do not hard-coded credentials in them there's no need okay so we have two",
    "start": "1179090",
    "end": "1186860"
  },
  {
    "text": "types of roles that you can use instead so we have instant space roles and these are normal ec2 property this one this",
    "start": "1186860",
    "end": "1195020"
  },
  {
    "text": "will apply permissions to your whole container instance or group of if you using auto scaling and every container",
    "start": "1195020",
    "end": "1201500"
  },
  {
    "text": "inside it so it's quite broad if you've got maybe a logging solution that all of your containers or something",
    "start": "1201500",
    "end": "1207830"
  },
  {
    "text": "need access to an s3 bucket then maybe you use it actually best practice in most cases is to use the principle of",
    "start": "1207830",
    "end": "1214850"
  },
  {
    "text": "least privilege and use I am roles for tasks so these allow you to specify an I",
    "start": "1214850",
    "end": "1220040"
  },
  {
    "text": "am role that's local to each set of containers each task so how do you pass",
    "start": "1220040",
    "end": "1227840"
  },
  {
    "start": "1226000",
    "end": "1226000"
  },
  {
    "text": "in configuration and secrets into your containers what's the best practice there so there's a couple of options",
    "start": "1227840",
    "end": "1234590"
  },
  {
    "text": "here they have their pros and cons I'll run through when you'd use each so environment variables within a task",
    "start": "1234590",
    "end": "1241340"
  },
  {
    "text": "definition in ECS it's really easy to pass in environment variables into your containers it's a great option for",
    "start": "1241340",
    "end": "1247220"
  },
  {
    "text": "setting configuration data it's not a great option for passwords and secrets",
    "start": "1247220",
    "end": "1253040"
  },
  {
    "text": "and database credentials etc environment variables are never going to be the most",
    "start": "1253040",
    "end": "1258560"
  },
  {
    "text": "secure option for that so in that case what you want to do is use the",
    "start": "1258560",
    "end": "1264560"
  },
  {
    "text": "environment variables to provide a pointer to a location in s3 or DynamoDB to some data that's been encrypted right",
    "start": "1264560",
    "end": "1272180"
  },
  {
    "text": "a great way of doing this is with KMS or key management service so we encrypt that data and then using the IAM role in",
    "start": "1272180",
    "end": "1279110"
  },
  {
    "text": "your task definition so the role specific to that group of containers you can then say okay only this group of",
    "start": "1279110",
    "end": "1286190"
  },
  {
    "text": "containers only this task has permission to decrypt that data out of s3 so this is a really nice way of passing in",
    "start": "1286190",
    "end": "1292850"
  },
  {
    "text": "secrets into your containers there's a couple of open-source projects on github",
    "start": "1292850",
    "end": "1299060"
  },
  {
    "text": "that help automate this etc so just have a look around on github and for KMS encryption tools monitoring logging so I",
    "start": "1299060",
    "end": "1309770"
  },
  {
    "text": "mentioned that ECS has really tight integration with cloud watch so this is going to allow you to have really really",
    "start": "1309770",
    "end": "1315830"
  },
  {
    "text": "nice easy monitoring of metrics but also logs as well so I'll talk through some",
    "start": "1315830",
    "end": "1321050"
  },
  {
    "text": "best practices around this so when you first deploy your ECS cluster this is",
    "start": "1321050",
    "end": "1326780"
  },
  {
    "text": "what you get so this is just taken from the ETS console by default you get metrics on CPU utilization for your",
    "start": "1326780",
    "end": "1333410"
  },
  {
    "text": "whole cluster memory utilization but also the reservations as well we spoke about earlier you can then dive",
    "start": "1333410",
    "end": "1340649"
  },
  {
    "text": "a bit deeper and look at individual container metrics so you can link things like your latency on your EOB or alb you",
    "start": "1340649",
    "end": "1348630"
  },
  {
    "text": "can look at per tasks CPU and memory for example when it comes to logging there's",
    "start": "1348630",
    "end": "1357120"
  },
  {
    "text": "a really neat way to get very easy centralized logging on ECS so it's using something called the AWS logs driver for",
    "start": "1357120",
    "end": "1364679"
  },
  {
    "text": "docker ok this is open source available on github part of the docker project we",
    "start": "1364679",
    "end": "1369809"
  },
  {
    "text": "actually support a load of different log drivers so for example if you're running Splunk or fluent d syslog for example",
    "start": "1369809",
    "end": "1377669"
  },
  {
    "text": "maybe you've got a central syslog server this is a really great option as well I'm just going to show you the AWS log",
    "start": "1377669",
    "end": "1383039"
  },
  {
    "text": "side so this is allows you to really easily export all of your container logs straight into cloud watch logs you don't",
    "start": "1383039",
    "end": "1390270"
  },
  {
    "text": "even do anything more than Sun screen here just add that to your task definition so I'm specifying a log group",
    "start": "1390270",
    "end": "1397020"
  },
  {
    "text": "here and also region where I want these logs to end up if by the way you want to add more available log drivers there",
    "start": "1397020",
    "end": "1403860"
  },
  {
    "text": "this is on github it's part of the ECS agent on github so just submit a pull request this is the result saying cloud",
    "start": "1403860",
    "end": "1411960"
  },
  {
    "text": "rocks logs within the AWS console you can see here I've got a go binary it's you know serving HTTP requests something",
    "start": "1411960",
    "end": "1420570"
  },
  {
    "text": "really cool you can do with cloud rocks logs is something called metric filters does anyone here know what metric",
    "start": "1420570",
    "end": "1426240"
  },
  {
    "start": "1422000",
    "end": "1422000"
  },
  {
    "text": "filters are cool ok and not many people that I speak to you do they're really",
    "start": "1426240",
    "end": "1432720"
  },
  {
    "text": "really cool so this allows you to set wildcard text based search patterns that it's going to look across your logs for",
    "start": "1432720",
    "end": "1438600"
  },
  {
    "text": "and trigger a metric right so it turns it into a cloud watch metric so in this",
    "start": "1438600",
    "end": "1444149"
  },
  {
    "text": "case up here on the top left I'm looking for the string internal error in my logs and a little sample when you first set",
    "start": "1444149",
    "end": "1450600"
  },
  {
    "text": "up your metric filter is gonna say ok I found this in 5 out of a sample of 50 log files for example the end result",
    "start": "1450600",
    "end": "1457559"
  },
  {
    "text": "what you see in cloud watch is a graph a metric for this ok so if you know you have certain things in your container",
    "start": "1457559",
    "end": "1464250"
  },
  {
    "text": "logs that you want to watch for this is a really cool way of getting monitoring and graphing so that really easily",
    "start": "1464250",
    "end": "1471420"
  },
  {
    "text": "you can obviously these are standard cloud watch metrics you can set alarms on those as well right so you could trigger a lambda function or an SNS post",
    "start": "1471420",
    "end": "1478800"
  },
  {
    "text": "there so you can integrate with your monitoring systems or maybe wake someone up in the middle of the night depending",
    "start": "1478800",
    "end": "1484560"
  },
  {
    "text": "on what it is so really really cool that something we added recently as well is when you have these metrics for cloud",
    "start": "1484560",
    "end": "1490800"
  },
  {
    "text": "watch logs you can just right click on that graph point and say show me the logs for this point in time ok so really",
    "start": "1490800",
    "end": "1498480"
  },
  {
    "text": "easy correlation between your metrics and graphs and the logs behind it so I",
    "start": "1498480",
    "end": "1505830"
  },
  {
    "start": "1505000",
    "end": "1505000"
  },
  {
    "text": "want to summarize before I handover the funds here a lot of this we're gonna be responsible",
    "start": "1505830",
    "end": "1512280"
  },
  {
    "text": "for operations of the cloud okay there is gonna be stuff that you're going to be responsible for in terms of",
    "start": "1512280",
    "end": "1517860"
  },
  {
    "text": "operations but at every stage we're going to be giving you the building blocks and best practices to help you",
    "start": "1517860",
    "end": "1523020"
  },
  {
    "text": "out there okay I promised I wouldn't forget to give you the clicker my name",
    "start": "1523020",
    "end": "1534420"
  },
  {
    "text": "is Alfonso Costa and I'm a software engineer for with works we're a startup",
    "start": "1534420",
    "end": "1539490"
  },
  {
    "text": "company an Amazon partner whose ultimate goal is to simplify the management",
    "start": "1539490",
    "end": "1549020"
  },
  {
    "text": "operation and development of micro service-oriented applications we work in",
    "start": "1549020",
    "end": "1556050"
  },
  {
    "text": "different areas to make that possible we work on with networking including service discovery visualization controls",
    "start": "1556050",
    "end": "1566270"
  },
  {
    "text": "continuous deployment and matrix aggregation and monitoring but today I'm",
    "start": "1566270",
    "end": "1571860"
  },
  {
    "text": "gonna be focusing on two of those areas which are networking and I'm gonna be",
    "start": "1571860",
    "end": "1579210"
  },
  {
    "text": "particularly talking about service discovery and beast validation and control who has heard from weave works",
    "start": "1579210",
    "end": "1586920"
  },
  {
    "text": "here before raise your hands okay quite a few people to make this as",
    "start": "1586920",
    "end": "1592830"
  },
  {
    "text": "interesting as possible considering the time it is I would encourage you to interrupt me and ask questions just",
    "start": "1592830",
    "end": "1599340"
  },
  {
    "text": "raise your hand or go to the mic right there and ask them I love interruptions",
    "start": "1599340",
    "end": "1605310"
  },
  {
    "text": "so don't worry about that so as I was saying I'm gonna be focusing on networking visualization and control and",
    "start": "1605310",
    "end": "1614220"
  },
  {
    "text": "I'm gonna be doing that because those two areas and and how we solve those",
    "start": "1614220",
    "end": "1619890"
  },
  {
    "text": "problems compliment ECS really really well as you'll see",
    "start": "1619890",
    "end": "1625550"
  },
  {
    "text": "first I'm gonna be talking about weave net which was the first multi host",
    "start": "1625550",
    "end": "1634070"
  },
  {
    "text": "overlay solution for containers what it",
    "start": "1634070",
    "end": "1641400"
  },
  {
    "text": "does in a natural to put it in really really simple terms it allocates one IP",
    "start": "1641400",
    "end": "1648510"
  },
  {
    "text": "per container why would we do that no port clashes so imagine you want to",
    "start": "1648510",
    "end": "1653790"
  },
  {
    "text": "have 20 web servers and typically you want a web server to listen on port 80",
    "start": "1653790",
    "end": "1659340"
  },
  {
    "text": "right with an IP per container you don't have that problem with clashes and you",
    "start": "1659340",
    "end": "1664860"
  },
  {
    "text": "know port mapping maybe I should be using another another port and I should have my load balancer pointing to that",
    "start": "1664860",
    "end": "1670530"
  },
  {
    "text": "particular port you don't have to worry about that we also provide automatic DNS",
    "start": "1670530",
    "end": "1676950"
  },
  {
    "text": "based service yeah question we do you",
    "start": "1676950",
    "end": "1686100"
  },
  {
    "text": "mean IPS on the containers themselves the question is are we using networks in",
    "start": "1686100",
    "end": "1693900"
  },
  {
    "text": "network interfaces to do that well everyone does so in a container you have",
    "start": "1693900",
    "end": "1701100"
  },
  {
    "text": "a virtual Ethernet interface which gets an IP question is how do you connect",
    "start": "1701100",
    "end": "1707760"
  },
  {
    "text": "that network interface to the rest of the system and the host in that case we we plug it together with with the",
    "start": "1707760",
    "end": "1714960"
  },
  {
    "text": "overlay network does that answer your question okay so I was I was saying that",
    "start": "1714960",
    "end": "1724440"
  },
  {
    "text": "we have automatic DNS service discovery what we do is when we create a container",
    "start": "1724440",
    "end": "1732420"
  },
  {
    "text": "when docker creates a container we learn about it I'll tell you how we do that later and we associate",
    "start": "1732420",
    "end": "1738780"
  },
  {
    "text": "DNS record to the IP of that container so if I have a container named foo with",
    "start": "1738780",
    "end": "1745920"
  },
  {
    "text": "IP 10 10 10 10 we will create a DNS record and we will propagate it to the",
    "start": "1745920",
    "end": "1751380"
  },
  {
    "text": "rest of the hosts so that they're automatically aware of it we assign the",
    "start": "1751380",
    "end": "1758190"
  },
  {
    "text": "I piece of the containers automatically which is a headache in many cases we do that using something called CR DTS which",
    "start": "1758190",
    "end": "1764730"
  },
  {
    "text": "I'm not going to describe conflict-free replicated data types and we have",
    "start": "1764730",
    "end": "1769950"
  },
  {
    "text": "minimum overhead that's because we're using openly switch mbx line",
    "start": "1769950",
    "end": "1775800"
  },
  {
    "text": "encapsulation which is accelerated by the network interface and Amazon of",
    "start": "1775800",
    "end": "1781440"
  },
  {
    "text": "course has unique interfaces which accelerate be excellent and in the particular case of Amazon we have an",
    "start": "1781440",
    "end": "1788820"
  },
  {
    "text": "alternative implementation without overlay which will manage routes of your",
    "start": "1788820",
    "end": "1794250"
  },
  {
    "text": "bpc infrastructure so that you have the",
    "start": "1794250",
    "end": "1802380"
  },
  {
    "text": "your traffic going to the right container without any overlay or overhead that's what we called the AWS",
    "start": "1802380",
    "end": "1809430"
  },
  {
    "text": "VPC mode on top of that we don't use a centralized data store you need to store",
    "start": "1809430",
    "end": "1816630"
  },
  {
    "text": "the topology information of the network and the service discover information of",
    "start": "1816630",
    "end": "1822960"
  },
  {
    "text": "the network somewhere but we don't centralized it how do we do that then so",
    "start": "1822960",
    "end": "1828330"
  },
  {
    "text": "as I said when our container is created in one of the hosts we learn about it",
    "start": "1828330",
    "end": "1833340"
  },
  {
    "text": "and our infrastructure will propagate it through a protocol called gossip and it",
    "start": "1833340",
    "end": "1839790"
  },
  {
    "text": "has a really good name because it works like gossip in real life so a host will",
    "start": "1839790",
    "end": "1845520"
  },
  {
    "text": "pick a few other hosts to talk to to propagate information of that new",
    "start": "1845520",
    "end": "1850770"
  },
  {
    "text": "container or that new host and those hosts at the same time will do the same with a few other hosts and that",
    "start": "1850770",
    "end": "1857370"
  },
  {
    "text": "propagates exponentially and eventually the full network will learn about it this has implications on partition",
    "start": "1857370",
    "end": "1864420"
  },
  {
    "text": "tolerance if you don't have a centralized data store if there's a partition in your network even if those",
    "start": "1864420",
    "end": "1872700"
  },
  {
    "text": "sites won't be able to talk to each other they will still operate",
    "start": "1872700",
    "end": "1878660"
  },
  {
    "text": "individually without problems so the the containers on one side will be still be",
    "start": "1878660",
    "end": "1884010"
  },
  {
    "text": "able to talk to each other and the containers on the other side will still be able to talk to each other it's a",
    "start": "1884010",
    "end": "1890730"
  },
  {
    "text": "multi data center solution in fact we are cloud agnostic you can create the",
    "start": "1890730",
    "end": "1896190"
  },
  {
    "text": "overlay Network inaudible yes communicating with on-premise for instance which is a great",
    "start": "1896190",
    "end": "1901230"
  },
  {
    "text": "way to transition from the monoliths to micro service applications in the cloud",
    "start": "1901230",
    "end": "1906540"
  },
  {
    "text": "and we also provide encryption another great feature which I didn't",
    "start": "1906540",
    "end": "1913170"
  },
  {
    "text": "include in this list there's multicast since we are implementing an overlay",
    "start": "1913170",
    "end": "1918660"
  },
  {
    "text": "network and we are one layer on top of the of the physical network or virtual",
    "start": "1918660",
    "end": "1925290"
  },
  {
    "text": "network if you are using V PC we can implement multicast and that's a great",
    "start": "1925290",
    "end": "1931230"
  },
  {
    "text": "feature for finance applications like training trading or stock exchanges",
    "start": "1931230",
    "end": "1937730"
  },
  {
    "start": "1937000",
    "end": "1937000"
  },
  {
    "text": "here's an example of a potential overlay network each of those hexagons represent",
    "start": "1937730",
    "end": "1944670"
  },
  {
    "text": "the container and the edges between routes for communication as you can see",
    "start": "1944670",
    "end": "1951750"
  },
  {
    "text": "we have a group of containers on the left and another distinguishable a group of containers on the right but they're",
    "start": "1951750",
    "end": "1958140"
  },
  {
    "text": "not fully connected in order to get from a container on the left to a container on the right there's no direct route",
    "start": "1958140",
    "end": "1965510"
  },
  {
    "text": "we've not supports non fully connected to Paulo G's it will learn about the",
    "start": "1965510",
    "end": "1970710"
  },
  {
    "text": "topology of the network and do the right thing in terms of routing the packets from one container to the other now",
    "start": "1970710",
    "end": "1978560"
  },
  {
    "text": "let's talk a little bit about service discovery as I said actually what are",
    "start": "1978560",
    "end": "1984750"
  },
  {
    "start": "1979000",
    "end": "1979000"
  },
  {
    "text": "you guys using for service discovery it's coming on console okay is anybody",
    "start": "1984750",
    "end": "1991650"
  },
  {
    "text": "using al B's somebody's using L B's al B's okay those are all potential ways of",
    "start": "1991650",
    "end": "1999960"
  },
  {
    "text": "doing service discovery you could even have a static text file from IP to",
    "start": "1999960",
    "end": "2005660"
  },
  {
    "text": "service if you wanted to do shape right but so how we do it on weave net is as I",
    "start": "2005660",
    "end": "2014059"
  },
  {
    "text": "mentioned a container is created we learn about it here we have a few",
    "start": "2014059",
    "end": "2019190"
  },
  {
    "text": "containers with name a very original name name and we will create an a record",
    "start": "2019190",
    "end": "2026320"
  },
  {
    "text": "associating name to the IP of that container then if client our container",
    "start": "2026320",
    "end": "2033590"
  },
  {
    "text": "operating as a client wants to connect to the service name it will make a DNS",
    "start": "2033590",
    "end": "2040009"
  },
  {
    "text": "request to our DNS implementation which we hook in automatically and it will",
    "start": "2040009",
    "end": "2046549"
  },
  {
    "text": "connect to one of those name containers can you tell me too which one it will it",
    "start": "2046549",
    "end": "2053480"
  },
  {
    "text": "will connect a man here it says random",
    "start": "2053480",
    "end": "2060470"
  },
  {
    "text": "yeah and that's that's correct so we choose to to order the records",
    "start": "2060470",
    "end": "2065569"
  },
  {
    "text": "randomly so it could be any of those and that's a very simple scheme with which",
    "start": "2065569",
    "end": "2071358"
  },
  {
    "text": "to do load balancing in the next request the DNS requests the the order of the of",
    "start": "2071359",
    "end": "2077839"
  },
  {
    "text": "the records will be different the client will pick a different IP and that's how",
    "start": "2077839",
    "end": "2083240"
  },
  {
    "text": "you you get load balancing so let's see",
    "start": "2083240",
    "end": "2090349"
  },
  {
    "text": "another simple example and let's see it for anything for structural point of view so what we have here is due to your",
    "start": "2090349",
    "end": "2097730"
  },
  {
    "text": "application it's not even microservices I wanted to to keep it simple you could",
    "start": "2097730",
    "end": "2103069"
  },
  {
    "text": "you could say it's a it's a 2 T or application from the from the 90s if you still wanted to there's a layer of HTTP",
    "start": "2103069",
    "end": "2111260"
  },
  {
    "text": "servers serving HTML and there's another layer of what I call data producers a",
    "start": "2111260",
    "end": "2117170"
  },
  {
    "text": "data producer could be a database anything producing data which needs to be my shot massaged by the by the web",
    "start": "2117170",
    "end": "2124790"
  },
  {
    "text": "server before being served to the clients now in order to make that",
    "start": "2124790",
    "end": "2131450"
  },
  {
    "text": "possible the web servers need to complete to contact the the databases",
    "start": "2131450",
    "end": "2137510"
  },
  {
    "text": "right or the data producers it could be a key valley story could be anything and this is the V on on e CS on",
    "start": "2137510",
    "end": "2147090"
  },
  {
    "start": "2144000",
    "end": "2144000"
  },
  {
    "text": "the bottom is the OPAC Amazon SES infrastructure and then achieve in each",
    "start": "2147090",
    "end": "2152940"
  },
  {
    "text": "of the notes you have an e CS agent which is in charge of managing that node or in Amazon terminology container",
    "start": "2152940",
    "end": "2160110"
  },
  {
    "text": "instance so let me ask the question",
    "start": "2160110",
    "end": "2166950"
  },
  {
    "text": "again how does the HTTP server find the data producer how would you do that anybody there's again multiple ways to",
    "start": "2166950",
    "end": "2177510"
  },
  {
    "text": "do this you can use console you can use a lbs you can even use the obese but",
    "start": "2177510",
    "end": "2184050"
  },
  {
    "text": "those require management right you need to set them up and in particularly nee",
    "start": "2184050",
    "end": "2189300"
  },
  {
    "text": "lbs and a lbs you need to have credentials in the Amazon infrastructure",
    "start": "2189300",
    "end": "2194550"
  },
  {
    "text": "to create those so this is how it would look with we've installed in your",
    "start": "2194550",
    "end": "2202770"
  },
  {
    "text": "instances in fact we provide an AMI and CloudFormation templates based on the",
    "start": "2202770",
    "end": "2210420"
  },
  {
    "text": "vanilla ECS ami to install this without without any complications in five",
    "start": "2210420",
    "end": "2217440"
  },
  {
    "text": "minutes so what we do is in each of the nodes we install two extra components",
    "start": "2217440",
    "end": "2223800"
  },
  {
    "text": "the we've router and we've DNS and the we've proxy so the easiest agent as I",
    "start": "2223800",
    "end": "2232050"
  },
  {
    "text": "mentioned is in charge of creating containers stopping them and managing",
    "start": "2232050",
    "end": "2237210"
  },
  {
    "text": "them based on the services you create the tasks we create so on and so forth",
    "start": "2237210",
    "end": "2242250"
  },
  {
    "text": "so what we do is we place a weak proxy between the ECS agent and docker",
    "start": "2242250",
    "end": "2248480"
  },
  {
    "text": "so whenever a container is created removed or something happens with it we",
    "start": "2248480",
    "end": "2255870"
  },
  {
    "text": "learn about it and then the most important piece of it all is the weave",
    "start": "2255870",
    "end": "2261570"
  },
  {
    "text": "router and DNS so whenever a container is created the weave proxy will tell all",
    "start": "2261570",
    "end": "2267300"
  },
  {
    "text": "the weave router hey I have a container here please make sure that all",
    "start": "2267300",
    "end": "2273880"
  },
  {
    "text": "the notes in the network know about this container I know about its DNS record it",
    "start": "2273880",
    "end": "2279130"
  },
  {
    "text": "gets propagated through gossip in all the network and that's how you get service discovery any questions yes the",
    "start": "2279130",
    "end": "2295750"
  },
  {
    "text": "question is is it a standard DNS implementation does it use port 53 yes",
    "start": "2295750",
    "end": "2301180"
  },
  {
    "text": "it is and it's seamless because we make sure that your DNS configuration in your",
    "start": "2301180",
    "end": "2307030"
  },
  {
    "text": "container will point toward DNS implement to your DNS server with DNS",
    "start": "2307030",
    "end": "2314700"
  },
  {
    "start": "2314000",
    "end": "2314000"
  },
  {
    "text": "now I would like to talk a bit about weave scope weave scope Easter micro",
    "start": "2315780",
    "end": "2323920"
  },
  {
    "text": "service visualization and control solution it creates a map of your micro",
    "start": "2323920",
    "end": "2332920"
  },
  {
    "text": "services without instrumenting them that means that you don't need to modify your",
    "start": "2332920",
    "end": "2338770"
  },
  {
    "text": "application in any way we will look at the docker API we will look at the profile system - the connection tracking",
    "start": "2338770",
    "end": "2345640"
  },
  {
    "text": "and we will collect that information and present it in a cohesive way by the way",
    "start": "2345640",
    "end": "2351580"
  },
  {
    "text": "this arm we've met and most of the of the weave works components are completely open-source you can find the",
    "start": "2351580",
    "end": "2360490"
  },
  {
    "text": "source code on github if you're curious so let me dive in a little bit into",
    "start": "2360490",
    "end": "2367990"
  },
  {
    "text": "what's with scope and how we how you",
    "start": "2367990",
    "end": "2373030"
  },
  {
    "text": "operate it well what we do is run an agent on each of your hosts in a",
    "start": "2373030",
    "end": "2379180"
  },
  {
    "text": "container but just a single one and that's what we call the scope probe it",
    "start": "2379180",
    "end": "2384490"
  },
  {
    "text": "will gather information about that particular host the containers in that host the connections which are happening",
    "start": "2384490",
    "end": "2390330"
  },
  {
    "text": "it will generate something we call that a report which has C again C or DT",
    "start": "2390330",
    "end": "2396550"
  },
  {
    "text": "semantics in order to merge them together and we compile all those",
    "start": "2396550",
    "end": "2403840"
  },
  {
    "text": "reports from the different hosts which are reported regular merge them I'm present them in the UI",
    "start": "2403840",
    "end": "2413130"
  },
  {
    "text": "the second important feature of scope",
    "start": "2413130",
    "end": "2418210"
  },
  {
    "text": "are the controls you will be able to interact with your infrastructure you will be able to create terminal stop",
    "start": "2418210",
    "end": "2424990"
  },
  {
    "text": "containers augment the replication factor of your application and we do that through controls what I presented",
    "start": "2424990",
    "end": "2435460"
  },
  {
    "start": "2433000",
    "end": "2433000"
  },
  {
    "text": "before is the standalone version of scope which you can stop install yourself with because it's open source",
    "start": "2435460",
    "end": "2442590"
  },
  {
    "text": "in the same way to simplify the operation of web scope and to provide",
    "start": "2442590",
    "end": "2449050"
  },
  {
    "text": "some enterprise features such as user authentication user management and team",
    "start": "2449050",
    "end": "2454420"
  },
  {
    "text": "management we're offering web scope into weave cloud which is your cloud offering and it but it operates in the same way",
    "start": "2454420",
    "end": "2462340"
  },
  {
    "text": "the only difference is that the probes will report to with cloud instead of an",
    "start": "2462340",
    "end": "2469330"
  },
  {
    "text": "app we will manage the app for you ok any questions so far",
    "start": "2469330",
    "end": "2474960"
  },
  {
    "text": "no great and again or a mis and",
    "start": "2474960",
    "end": "2482710"
  },
  {
    "text": "CloudFormation templates come with both with net and weave scope which you can",
    "start": "2482710",
    "end": "2489640"
  },
  {
    "text": "connect to your own app and run it standalone or you can connect a wiff cloud and to finish my presentation I",
    "start": "2489640",
    "end": "2499180"
  },
  {
    "text": "would like to demo with cloud and I'm gonna change the display I'm not doing a",
    "start": "2499180",
    "end": "2505060"
  },
  {
    "text": "magic magic trick yes I would like to",
    "start": "2505060",
    "end": "2511660"
  },
  {
    "text": "showcase microservice demo application which we call sock shop it's a demo",
    "start": "2511660",
    "end": "2518940"
  },
  {
    "text": "front-end of an e-commerce website selling socks which you can see here it",
    "start": "2518940",
    "end": "2525940"
  },
  {
    "text": "has a little bit of nodejs a little bit of Java a little bit of gold robin NQ",
    "start": "2525940",
    "end": "2532960"
  },
  {
    "text": "MongoDB we went bananas right because we wanted to have a way to demonstrate microservices and so that people could",
    "start": "2532960",
    "end": "2540280"
  },
  {
    "text": "interact with them it's all open source you can play with it in fact I'm going to be playing with it now and it supports multiple clouds",
    "start": "2540280",
    "end": "2550490"
  },
  {
    "text": "and of course it supports CCS in order to launch it you would just click on",
    "start": "2550490",
    "end": "2555710"
  },
  {
    "text": "Quick Start ECS and we have a cloud",
    "start": "2555710",
    "end": "2561230"
  },
  {
    "text": "formation template with which you can launch it in a few minutes so this will",
    "start": "2561230",
    "end": "2566450"
  },
  {
    "text": "bring me to my cloud is it big enough can you see it okay you will click Next",
    "start": "2566450",
    "end": "2574510"
  },
  {
    "text": "give it a name let's say app very original provide a key name that's the",
    "start": "2574510",
    "end": "2581540"
  },
  {
    "text": "SSH key in order to access the instances later on let's use the we VCS demo and",
    "start": "2581540",
    "end": "2587859"
  },
  {
    "text": "we've cloud service token this is a token you will get from your weave cloud account I'm gonna make one up and you",
    "start": "2587859",
    "end": "2600589"
  },
  {
    "text": "will press next next acknowledge the",
    "start": "2600589",
    "end": "2606440"
  },
  {
    "text": "confirmation might create ami resources and create this would take around 10",
    "start": "2606440",
    "end": "2614480"
  },
  {
    "text": "minutes to run but I don't want you guys to wait for it here so I've created an other stack before which I called sock",
    "start": "2614480",
    "end": "2622910"
  },
  {
    "text": "shop if you click on the stack you get some output parameters with the front",
    "start": "2622910",
    "end": "2629359"
  },
  {
    "text": "end of the application which I actually already opened here yeah so this is the",
    "start": "2629359",
    "end": "2636770"
  },
  {
    "text": "running up you have a catalog of socks say ok I'm gonna buy the colorful ones",
    "start": "2636770",
    "end": "2644660"
  },
  {
    "text": "and I'm gonna go to the court yeah it's fully functional and the ami a port from",
    "start": "2644660",
    "end": "2652190"
  },
  {
    "text": "spawning the application itself it has spawned we've met and we've scoped we're",
    "start": "2652190",
    "end": "2657680"
  },
  {
    "text": "using weave net for service discovery and networking and we've scope for visualization and control what you're",
    "start": "2657680",
    "end": "2665630"
  },
  {
    "text": "seeing here is the main view of waves coping with cloud on the upper part",
    "start": "2665630",
    "end": "2674370"
  },
  {
    "text": "you are offered different views you can interact with what you usually now is",
    "start": "2674370",
    "end": "2679860"
  },
  {
    "text": "the service ACS services view each of these polygons will represent an entity",
    "start": "2679860",
    "end": "2686010"
  },
  {
    "text": "in the view in this particular case it's an SES service and edges between",
    "start": "2686010",
    "end": "2691280"
  },
  {
    "text": "represent a connection between those two entities there's no traffic happening",
    "start": "2691280",
    "end": "2698790"
  },
  {
    "text": "right now but and I don't want to be clicking around the app to generate the",
    "start": "2698790",
    "end": "2704070"
  },
  {
    "text": "traffic so what I'm what I'm gonna be using is a load test or application in",
    "start": "2704070",
    "end": "2713430"
  },
  {
    "text": "order to generate traffic on the website that that's also offered by by the micro",
    "start": "2713430",
    "end": "2720120"
  },
  {
    "text": "services organization and github so up",
    "start": "2720120",
    "end": "2725130"
  },
  {
    "text": "I'm gonna go ahead and click yeah and it's generating traffic and we can see",
    "start": "2725130",
    "end": "2732840"
  },
  {
    "text": "actually in the tasks yeah we saw new traffic was happen it was being",
    "start": "2732840",
    "end": "2739230"
  },
  {
    "text": "generated in the app we can dive deeper into the application hour or we can see",
    "start": "2739230",
    "end": "2746280"
  },
  {
    "text": "for instance details on on the easiest services we see that there's three",
    "start": "2746280",
    "end": "2752310"
  },
  {
    "text": "desired tasks there are three running tasks we have information about the",
    "start": "2752310",
    "end": "2759050"
  },
  {
    "text": "outbound connections on the containers everything's hyperlinked so we can we",
    "start": "2759050",
    "end": "2767010"
  },
  {
    "text": "can see information about the front-end container and we can dive into other",
    "start": "2767010",
    "end": "2773460"
  },
  {
    "text": "views for instance here's a container view let's let's try to solve any an",
    "start": "2773460",
    "end": "2783180"
  },
  {
    "text": "imaginary problem here let's let's think that we have a problem rather than queue and we want to see information about the",
    "start": "2783180",
    "end": "2789690"
  },
  {
    "text": "RabbitMQ container so we can search and",
    "start": "2789690",
    "end": "2795050"
  },
  {
    "text": "we find the rabbitmq container we bring it up and we have some information on",
    "start": "2795050",
    "end": "2800820"
  },
  {
    "text": "CPU consumption and other things but let's say I want to dive even deeper",
    "start": "2800820",
    "end": "2807900"
  },
  {
    "text": "and get information on RabbitMQ itself it's not fully integrated with wit scope yet so but I can create a terminal and",
    "start": "2807900",
    "end": "2818250"
  },
  {
    "text": "interact with it directly this is a fully functional phony fully functioning",
    "start": "2818250",
    "end": "2823740"
  },
  {
    "text": "terminal and I can do the rabbit and Q CTL status and there you go you've got",
    "start": "2823740",
    "end": "2831990"
  },
  {
    "text": "the start of rabbit and Q in the same way we can see the locks of the of the",
    "start": "2831990",
    "end": "2837809"
  },
  {
    "text": "front ends real time let me find the front ends here you go and by clicking",
    "start": "2837809",
    "end": "2845849"
  },
  {
    "text": "on this control you see the requests coming in in real time which is great",
    "start": "2845849",
    "end": "2851819"
  },
  {
    "text": "for debugging now if I know this yes so",
    "start": "2851819",
    "end": "2862230"
  },
  {
    "text": "in order to make it easy for you we're filtering out all the system containers because they're attacked especially but",
    "start": "2862230",
    "end": "2868950"
  },
  {
    "text": "we can show them and show everything which is happening what you see here is a full infrastructure including your",
    "start": "2868950",
    "end": "2874710"
  },
  {
    "text": "application you see the UCS agent you see the web scope container you see the weave net container and if you if you",
    "start": "2874710",
    "end": "2883980"
  },
  {
    "text": "look at the bottom of the screen you see some clouds there saying",
    "start": "2883980",
    "end": "2888990"
  },
  {
    "text": "ECS that means we're representing access to external services the ECS agent is",
    "start": "2888990",
    "end": "2894690"
  },
  {
    "text": "accessing ECS infrastructure so we represent it so that you know exactly what services are being accessed in this",
    "start": "2894690",
    "end": "2901710"
  },
  {
    "text": "case it's easy yes but it could be an RDS instance or it could be dynamo so on",
    "start": "2901710",
    "end": "2906960"
  },
  {
    "text": "and so forth in this view things are getting a little bit hairy and surely it",
    "start": "2906960",
    "end": "2912059"
  },
  {
    "text": "will happen with Whitby infrastructures in order to help with that we have",
    "start": "2912059",
    "end": "2917369"
  },
  {
    "text": "created a table view which will be more familiar to people using top and system",
    "start": "2917369",
    "end": "2927569"
  },
  {
    "text": "administrators in this way you can compare CPU and memory and see all your",
    "start": "2927569",
    "end": "2936270"
  },
  {
    "text": "containers at once actually works in the containers view but it works in other abuse in fact",
    "start": "2936270",
    "end": "2941370"
  },
  {
    "text": "we can show all your processes running",
    "start": "2941370",
    "end": "2946440"
  },
  {
    "text": "in your full infrastructure at once in the same way we can zoom in and look at",
    "start": "2946440",
    "end": "2954450"
  },
  {
    "text": "the processes we can also zoom out and have a look at the hosts view this is a",
    "start": "2954450",
    "end": "2961140"
  },
  {
    "text": "cluster formed by three container instances and here we can see the connections between them and again the",
    "start": "2961140",
    "end": "2967500"
  },
  {
    "text": "access to the ACS service and the Internet and finally in the same way we",
    "start": "2967500",
    "end": "2977850"
  },
  {
    "text": "can get detailed information about the weave net network here's a view with the",
    "start": "2977850",
    "end": "2984750"
  },
  {
    "text": "three peers the three hosts and detailed information on we've met so for instance",
    "start": "2984750",
    "end": "2991170"
  },
  {
    "text": "we see that this particular pair has two connections which are established and are using fast data path so it's using",
    "start": "2991170",
    "end": "2998190"
  },
  {
    "text": "the open base which encapsulation and that will be all from me",
    "start": "2998190",
    "end": "3005920"
  },
  {
    "text": "thanks a lot for for listening and I will be happy to answer any questions you have",
    "start": "3005920",
    "end": "3012819"
  },
  {
    "text": "[Applause]",
    "start": "3012910",
    "end": "3017520"
  }
]