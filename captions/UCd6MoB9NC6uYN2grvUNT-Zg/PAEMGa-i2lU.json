[
  {
    "start": "0",
    "end": "54000"
  },
  {
    "text": "good afternoon everyone welcome to today's session on Firecracker typically",
    "start": "1630",
    "end": "8920"
  },
  {
    "text": "when we talk about virtual machines fast is not the adjective that is being used",
    "start": "8920",
    "end": "14070"
  },
  {
    "text": "however we see that there's a need to create run times if we want to run",
    "start": "14070",
    "end": "20590"
  },
  {
    "text": "multi-tenant or clothes at the same time also to run lightweight secure functions",
    "start": "20590",
    "end": "31509"
  },
  {
    "text": "or tasks in container like environment we want flexibility and high density with fast performance so that is what",
    "start": "31509",
    "end": "39160"
  },
  {
    "text": "firecracker essentially provides so today we will be learning about firecracker how it makes a secure and",
    "start": "39160",
    "end": "45670"
  },
  {
    "text": "fast micro VMs my name is Meena Geller and I also have Erin will be joining me in today's presentation so what is",
    "start": "45670",
    "end": "54910"
  },
  {
    "start": "54000",
    "end": "54000"
  },
  {
    "text": "firecracker so firecracker is a open source virtualization technology it's a",
    "start": "54910",
    "end": "60670"
  },
  {
    "text": "virtual machine manager it uses Linux kernel-based virtual machine to create",
    "start": "60670",
    "end": "66369"
  },
  {
    "text": "and manage lightweight VMs that we started calling as micro VMs before",
    "start": "66369",
    "end": "73450"
  },
  {
    "text": "firecracker it was a hard choice that developers had to make by choosing a",
    "start": "73450",
    "end": "80189"
  },
  {
    "text": "secure environment that had hardware virtualization based isolation and",
    "start": "80189",
    "end": "85619"
  },
  {
    "text": "workloads security or use container like lightweight high-density cgroups",
    "start": "85619",
    "end": "93520"
  },
  {
    "text": "but with fire cracker you don't no longer have to make that choice you get both so fire cracker provides enhanced",
    "start": "93520",
    "end": "102369"
  },
  {
    "text": "security and workload isolation over traditional VMs while also enabling",
    "start": "102369",
    "end": "107799"
  },
  {
    "text": "speed and and the density of containers",
    "start": "107799",
    "end": "114119"
  },
  {
    "text": "it uses extremely low resource overhead which actually makes it suitable for",
    "start": "114119",
    "end": "120340"
  },
  {
    "text": "running server less computing it was developed at Amazon Web Services to",
    "start": "120340",
    "end": "127780"
  },
  {
    "text": "improve the customer experience of services like lambda and Fargate when we launched lambda in",
    "start": "127780",
    "end": "136000"
  },
  {
    "text": "2014 we will focus on providing a secure environment for customers to run their",
    "start": "136000",
    "end": "141790"
  },
  {
    "text": "tasks so what we did was we ran these tasks in single I was single account",
    "start": "141790",
    "end": "147850"
  },
  {
    "text": "single tasks on each ec2 instance over time we realized that we need a more",
    "start": "147850",
    "end": "153190"
  },
  {
    "text": "scalable efficient environment in addition to providing the same level of security as traditional VMs and that's",
    "start": "153190",
    "end": "159700"
  },
  {
    "text": "the premises of how we developed firecracker so taking a closer look at",
    "start": "159700",
    "end": "168580"
  },
  {
    "text": "lambda so if we zoom into a single lambda worker server this is like a",
    "start": "168580",
    "end": "174850"
  },
  {
    "text": "physical machine which provides all the compute resource like CPU memory or",
    "start": "174850",
    "end": "181870"
  },
  {
    "text": "other network resources when customers pay for a specific workload function to",
    "start": "181870",
    "end": "189940"
  },
  {
    "text": "run on the worker we don't have visibility into when they're going to",
    "start": "189940",
    "end": "196300"
  },
  {
    "text": "require the resource and in what succession those resource requests are going to come in but we need to make",
    "start": "196300",
    "end": "202030"
  },
  {
    "text": "them available so how do we make utilization of that physical resource",
    "start": "202030",
    "end": "208300"
  },
  {
    "text": "efficient so if we run more and more functions on a single physical Hardware",
    "start": "208300",
    "end": "215470"
  },
  {
    "text": "it becomes more efficient in terms of the resource utilization but when we'd",
    "start": "215470",
    "end": "221230"
  },
  {
    "text": "run multiple functions from multiple accounts on a same physical Hardware how",
    "start": "221230",
    "end": "226990"
  },
  {
    "text": "do we ensure that one set of arbitrary binary codes from one account doesn't",
    "start": "226990",
    "end": "232420"
  },
  {
    "text": "jeopardize the security of other environments so that is where we need to",
    "start": "232420",
    "end": "238660"
  },
  {
    "text": "use virtual machines but virtual machines don't provide this level of",
    "start": "238660",
    "end": "244540"
  },
  {
    "text": "flexibility over subscription and the nature of high mutation in a traditional",
    "start": "244540",
    "end": "252190"
  },
  {
    "text": "sandbox environment so fire cracker helps provide that level of flexibility",
    "start": "252190",
    "end": "257920"
  },
  {
    "text": "and also the same security so here are the benefits of fire cracker security",
    "start": "257920",
    "end": "265670"
  },
  {
    "start": "261000",
    "end": "261000"
  },
  {
    "text": "efficiency and performance so how do we get that firecracker uses a minimal",
    "start": "265670",
    "end": "272350"
  },
  {
    "text": "device model which means that it only has a very limited set of",
    "start": "272350",
    "end": "277760"
  },
  {
    "text": "functionalities and and the dot implement legacy device emulations as",
    "start": "277760",
    "end": "285260"
  },
  {
    "text": "you would see in like a key mu this improves security because it reduces the",
    "start": "285260",
    "end": "290420"
  },
  {
    "text": "attack surface on the micro VMs it because of the minimal device model it",
    "start": "290420",
    "end": "296720"
  },
  {
    "text": "improves our startup efficiency time and it increases our hardware resource",
    "start": "296720",
    "end": "302660"
  },
  {
    "text": "utilization as well because of the low overhead so let's look into what that means",
    "start": "302660",
    "end": "308290"
  },
  {
    "text": "so security so firecracker VMs it uses the KVM based virtualization that",
    "start": "308290",
    "end": "314240"
  },
  {
    "text": "provides enhanced security over traditional VMs this ensures that workloads from different end customers",
    "start": "314240",
    "end": "321350"
  },
  {
    "text": "can safely run on the same machine and because of the minimal device model it",
    "start": "321350",
    "end": "326750"
  },
  {
    "text": "also reduces the attack surface on the micro VMs then we have speed by design",
    "start": "326750",
    "end": "334370"
  },
  {
    "text": "so in addition to this minimal device model firecracker has it accelerates the",
    "start": "334370",
    "end": "342160"
  },
  {
    "text": "kernel loading and provides the minimal guest kernel at a really fast pace it",
    "start": "342160",
    "end": "349190"
  },
  {
    "text": "only has two devices the were tire net and were tire block and it has few keys",
    "start": "349190",
    "end": "354950"
  },
  {
    "text": "to do power management on the micro VMs so this enables the low overhead in",
    "start": "354950",
    "end": "361370"
  },
  {
    "text": "terms of how much memory it requires and allows for the fast put up of each of",
    "start": "361370",
    "end": "366800"
  },
  {
    "text": "these micro VMs so we have done some benchmarking and we're able to achieve up to less than 120 125 milliseconds to",
    "start": "366800",
    "end": "377060"
  },
  {
    "text": "launch hundred and 50 micrograms per second in a single host then we talked",
    "start": "377060",
    "end": "382700"
  },
  {
    "text": "about the scale and efficiency so each micro VM friends with a reduced memory overhead has less than five megabytes",
    "start": "382700",
    "end": "389450"
  },
  {
    "text": "for enabling a high-density micro VM each all of them packed on a",
    "start": "389450",
    "end": "394940"
  },
  {
    "text": "single server so the Firecracker also provides a rate limiter the rate limiters used to equally",
    "start": "394940",
    "end": "402030"
  },
  {
    "text": "distribute resources across hundreds of VMs that can run on a single host and then with firecracker you can see that",
    "start": "402030",
    "end": "409500"
  },
  {
    "text": "we're making the same deep investment that in from an infrastructure standpoint for silver less compute same",
    "start": "409500",
    "end": "416220"
  },
  {
    "text": "way we have done with traditional ec2 instances we started with support for Intel processors and we are working on",
    "start": "416220",
    "end": "422910"
  },
  {
    "text": "supporting AMD and arm bait processors as well and those should be coming out soon we're also integrating firecracker",
    "start": "422910",
    "end": "431340"
  },
  {
    "text": "with container d4 the container ecosystem so let's talk a little bit",
    "start": "431340",
    "end": "438870"
  },
  {
    "start": "437000",
    "end": "437000"
  },
  {
    "text": "about the firecracker design principles so firecracker can safely run multi",
    "start": "438870",
    "end": "445170"
  },
  {
    "text": "tenant workloads from different customers on the same machine so this is possible because of the hardware",
    "start": "445170",
    "end": "451800"
  },
  {
    "text": "virtualization based security that the micro biomes offer customers can create",
    "start": "451800",
    "end": "458270"
  },
  {
    "text": "micro VMs of any V CPU and memory configuration to match their workload",
    "start": "458270",
    "end": "465390"
  },
  {
    "text": "requirements so this allows to map nicely for services like lambda and Fargate for the different set of",
    "start": "465390",
    "end": "471980"
  },
  {
    "text": "configurations that each of these services offer firecracker my chromium's",
    "start": "471980",
    "end": "479370"
  },
  {
    "text": "it also allows our subscription both the compute and memory resources so to that",
    "start": "479370",
    "end": "485130"
  },
  {
    "text": "extent were able to improve the efficiency of how we are using the",
    "start": "485130",
    "end": "490140"
  },
  {
    "text": "underlying physical resource it also offers a steady state mutation you can",
    "start": "490140",
    "end": "497190"
  },
  {
    "text": "launch up to 100 micro VMs per host per second which is roughly about 4 micro",
    "start": "497190",
    "end": "504270"
  },
  {
    "text": "biomes for physical core so if you can use that on a hardware that has about 36",
    "start": "504270",
    "end": "511620"
  },
  {
    "text": "course you can really spin up a lot of micro bm's so how much can you launch on",
    "start": "511620",
    "end": "519450"
  },
  {
    "text": "a single hardware it's only limited by the amount of resources that are available on the hardware so at the",
    "start": "519450",
    "end": "525870"
  },
  {
    "text": "scale of 100 hundred plus micro VMs it really packs a lot of VMS on a single host so each micro vm",
    "start": "525870",
    "end": "534470"
  },
  {
    "text": "exposes the host tracing api we are an in process HTTP server and then each",
    "start": "534470",
    "end": "540540"
  },
  {
    "text": "micro vm can provide guest facing access to host configured metadata services",
    "start": "540540",
    "end": "546270"
  },
  {
    "text": "which is accessible via the mmds api so",
    "start": "546270",
    "end": "551580"
  },
  {
    "start": "551000",
    "end": "551000"
  },
  {
    "text": "here's the list of api's that are accessible through the HTTP server using",
    "start": "551580",
    "end": "558330"
  },
  {
    "text": "on specific URLs carrying the json model data the return generally returns the",
    "start": "558330",
    "end": "566310"
  },
  {
    "text": "the instance information you can call put actions and you can also initiate",
    "start": "566310",
    "end": "573900"
  },
  {
    "text": "actions with them like instant start which spins up a new micro VM you can",
    "start": "573900",
    "end": "579180"
  },
  {
    "text": "send send ctrl-alt-del typically send control ctrl-alt-del does a instant or",
    "start": "579180",
    "end": "588120"
  },
  {
    "text": "reboot in a typical Linux distribution on the Firecracker side when the CPU",
    "start": "588120",
    "end": "596090"
  },
  {
    "text": "resets the micro VM exits so it's a good way to shut down micro VMs as well we",
    "start": "596090",
    "end": "604950"
  },
  {
    "text": "also have a block device rescan so the block device rescan action is used to trigger a rescan on the micro VM",
    "start": "604950",
    "end": "612200"
  },
  {
    "text": "attached to the block device after some times it has like the the backing file",
    "start": "612200",
    "end": "618960"
  },
  {
    "text": "has to be refreshed on the internal data",
    "start": "618960",
    "end": "624030"
  },
  {
    "text": "structure so this can be done after the micro VM is instantiated we also have",
    "start": "624030",
    "end": "629190"
  },
  {
    "text": "the get machine config action that will allow you to convict the micro VM to any",
    "start": "629190",
    "end": "636870"
  },
  {
    "text": "V CPU configuration and same way with whatever memory you need for the micro",
    "start": "636870",
    "end": "642450"
  },
  {
    "text": "VM the v CPU could be one or any number in even even numbers depending on the",
    "start": "642450",
    "end": "649770"
  },
  {
    "text": "type of workload you need and then you can use call to put actions to configure",
    "start": "649770",
    "end": "655470"
  },
  {
    "text": "all these instances as well we also have",
    "start": "655470",
    "end": "660940"
  },
  {
    "text": "the drive drive action which will help create new drives and you can provide a path on where to define those drives",
    "start": "660940",
    "end": "669149"
  },
  {
    "text": "yeah so firecracker it runs in the user",
    "start": "669149",
    "end": "676930"
  },
  {
    "start": "673000",
    "end": "673000"
  },
  {
    "text": "space and it uses the Linux kernel-based virtual machine to create micro VMs it's",
    "start": "676930",
    "end": "682690"
  },
  {
    "text": "a fast startup time and low memory overhead allows each micro veeam to be",
    "start": "682690",
    "end": "689230"
  },
  {
    "text": "packed really well in a single hardware so we've been successfully able to pack",
    "start": "689230",
    "end": "695440"
  },
  {
    "text": "thousands of micro Williams in a single hardware or server this means that every",
    "start": "695440",
    "end": "701709"
  },
  {
    "text": "function or container gets its own micro VM it's its own virtual machine barrier",
    "start": "701709",
    "end": "708070"
  },
  {
    "text": "so in a secure environment so in addition to having that security because",
    "start": "708070",
    "end": "715000"
  },
  {
    "text": "of its lightweightness you get the experience of traditional containers fire cracker is it's an alternative to",
    "start": "715000",
    "end": "722170"
  },
  {
    "text": "key mu which is an established vm m with general-purpose feature sets and it can",
    "start": "722170",
    "end": "728200"
  },
  {
    "text": "support a wide range of guest operating systems and then here you can control",
    "start": "728200",
    "end": "734829"
  },
  {
    "text": "the fire cracker processes by calling the restful api so we have the api's",
    "start": "734829",
    "end": "741610"
  },
  {
    "text": "that we shared so it has a restful api that has the common functions where the",
    "start": "741610",
    "end": "747339"
  },
  {
    "text": "guests can communicate with a host and then we also have the rate limiter that",
    "start": "747339",
    "end": "752529"
  },
  {
    "text": "helps manage the granularity of how network and storage resources are",
    "start": "752529",
    "end": "757779"
  },
  {
    "text": "allocated between the different micro BMS and the rate limiter also helps you",
    "start": "757779",
    "end": "764740"
  },
  {
    "text": "to configure how you want to manage the burst experience of each of these",
    "start": "764740",
    "end": "769870"
  },
  {
    "text": "resources within a micro VM you also have access to the metadata from the",
    "start": "769870",
    "end": "778240"
  },
  {
    "text": "host into the guest so that's that's something that the guests can",
    "start": "778240",
    "end": "783390"
  },
  {
    "text": "communicate with the host and configure it as well so we'll look into one of the",
    "start": "783390",
    "end": "790089"
  },
  {
    "text": "use case on how is using firecracker so lambda is a",
    "start": "790089",
    "end": "797519"
  },
  {
    "text": "global service as we call it a foundational service available in all of AWS regions and all new regions will",
    "start": "797519",
    "end": "804639"
  },
  {
    "text": "offer them as well we build our systems behind the scenes to make sure that it",
    "start": "804639",
    "end": "810519"
  },
  {
    "text": "can distribute load it can work around failures it can scale up and down so that customers don't have to worry about",
    "start": "810519",
    "end": "816309"
  },
  {
    "text": "managing their clusters and fleet and of course while doing all of that we need",
    "start": "816309",
    "end": "821319"
  },
  {
    "text": "to make sure that we preserve isolation and then maximize utilization as well so",
    "start": "821319",
    "end": "826869"
  },
  {
    "text": "that the cost benefits are passed on to our customers one of the primary systems",
    "start": "826869",
    "end": "833559"
  },
  {
    "text": "that powers lambda is called the worker so what does the worker do so worker it",
    "start": "833559",
    "end": "840369"
  },
  {
    "text": "creates and manages a collection of sandboxes it sets the limits on the",
    "start": "840369",
    "end": "845860"
  },
  {
    "text": "sandbox in terms of Hamid CPU and memory is allocated for that sandbox it then",
    "start": "845860",
    "end": "851199"
  },
  {
    "text": "downloads the customers code and makes it mounts it and gets it ready for",
    "start": "851199",
    "end": "856329"
  },
  {
    "text": "execution and once the initialization invoker's is called then the customer",
    "start": "856329",
    "end": "862540"
  },
  {
    "text": "code is executed and and also the worker helps provide some of the AWS agents for",
    "start": "862540",
    "end": "870069"
  },
  {
    "text": "monitoring and operations which is like the cloud watch tools so here's a closer",
    "start": "870069",
    "end": "877119"
  },
  {
    "start": "875000",
    "end": "875000"
  },
  {
    "text": "look at the architectures at the top you have the customers code there's a file that is a share then we have the lambda",
    "start": "877119",
    "end": "884499"
  },
  {
    "text": "runtime lambda runtime support so many different runtime like the node.js by a",
    "start": "884499",
    "end": "891339"
  },
  {
    "text": "Python Java and c-sharp so underneath the runtime we have the sandbox that",
    "start": "891339",
    "end": "898319"
  },
  {
    "text": "provides a copy of the guest Linux that we run and then the guest OS is running",
    "start": "898319",
    "end": "905980"
  },
  {
    "text": "on top of the hypervisor it's it's actually multiplexed across the hardware through virtualization so the",
    "start": "905980",
    "end": "913209"
  },
  {
    "text": "virtualization is enabled through the hypervisor and then the hypervisor is running on the host OS in this case it's",
    "start": "913209",
    "end": "920049"
  },
  {
    "text": "the Amazon Linux that we run now this is running on top of the physical server so",
    "start": "920049",
    "end": "929410"
  },
  {
    "start": "929000",
    "end": "929000"
  },
  {
    "text": "to keep the workload safe and and separate code and run time and sandbox",
    "start": "929410",
    "end": "936249"
  },
  {
    "text": "are are usually one function so one function comprises of the customers code",
    "start": "936249",
    "end": "942879"
  },
  {
    "text": "running its runtime within one sandbox so we never share that sandbox with",
    "start": "942879",
    "end": "948699"
  },
  {
    "text": "multiple accounts functions they there's a Wii and then each of",
    "start": "948699",
    "end": "955119"
  },
  {
    "text": "these functions within a sandbox is kind of if you invoke the functions they",
    "start": "955119",
    "end": "960639"
  },
  {
    "text": "always sequentially arrange in the same sandbox then we have the guest OS systems that",
    "start": "960639",
    "end": "968589"
  },
  {
    "text": "is shared across multiple accounts and there's never one sandbox shared between",
    "start": "968589",
    "end": "975459"
  },
  {
    "text": "multiple accounts so the one is to end mapping of the multiple AWS accounts on",
    "start": "975459",
    "end": "981129"
  },
  {
    "text": "ec2 instances or or other equivalent hypervisor on which it is running so",
    "start": "981129",
    "end": "988379"
  },
  {
    "text": "then we have the the boundary that we put between the different account is the",
    "start": "988379",
    "end": "993879"
  },
  {
    "text": "the virtualization layer so there are two types of virtualization layer that",
    "start": "993879",
    "end": "999399"
  },
  {
    "text": "we offer today one is the ec2 virtualization that is",
    "start": "999399",
    "end": "1005999"
  },
  {
    "start": "1004000",
    "end": "1004000"
  },
  {
    "text": "traditional and then here the other one is the Firecracker so firecracker is a",
    "start": "1005999",
    "end": "1012329"
  },
  {
    "start": "1008000",
    "end": "1008000"
  },
  {
    "text": "virtualization that is provided on a bare metal instance this is very similar",
    "start": "1012329",
    "end": "1018449"
  },
  {
    "text": "to a bare metal instance that you will be able to access from our ec2 console that provides the high performance for",
    "start": "1018449",
    "end": "1026970"
  },
  {
    "text": "these functions so this really",
    "start": "1026970",
    "end": "1032220"
  },
  {
    "text": "simplifies the security model for us by using micro VMs and placing each",
    "start": "1032220",
    "end": "1038519"
  },
  {
    "text": "function within a single micro VM and so we're able to run multiple accounts each",
    "start": "1038519",
    "end": "1046438"
  },
  {
    "text": "having it so one function or count in each micro BMS allocated to multiple accounts running on the same",
    "start": "1046439",
    "end": "1052900"
  },
  {
    "text": "physical hardware helps us to improve efficiency this is also a good programming model because it provides",
    "start": "1052900",
    "end": "1059260"
  },
  {
    "text": "good isolation between all the individual functions as well another",
    "start": "1059260",
    "end": "1064960"
  },
  {
    "start": "1064000",
    "end": "1064000"
  },
  {
    "text": "optimization that we do is how we pack these workloads typically customers",
    "start": "1064960",
    "end": "1071890"
  },
  {
    "text": "think that we take same type of workloads and then create multiple sandboxes in a single Hardware and then",
    "start": "1071890",
    "end": "1079150"
  },
  {
    "text": "run the same type of four codes on the same hardware it turns out if you run if",
    "start": "1079150",
    "end": "1084550"
  },
  {
    "text": "you're running same workload on the same physical server they're going to have a",
    "start": "1084550",
    "end": "1089560"
  },
  {
    "text": "very correlated pattern of how resources are being used in terms of bursting at",
    "start": "1089560",
    "end": "1094960"
  },
  {
    "text": "the same time and then being idle at the same time so if we truly want to maximize our utilization we want to do a",
    "start": "1094960",
    "end": "1104080"
  },
  {
    "text": "spread placement that allows on placement of uncorrelated workloads",
    "start": "1104080",
    "end": "1109090"
  },
  {
    "text": "across multiple or a fleet of servers so that we are doing a real good bin",
    "start": "1109090",
    "end": "1116830"
  },
  {
    "text": "packing of workloads that require different resources and having more utilization so this really helps us to",
    "start": "1116830",
    "end": "1125290"
  },
  {
    "start": "1124000",
    "end": "1124000"
  },
  {
    "text": "make sure that we also have a secure boundary for functions while being able",
    "start": "1125290",
    "end": "1132610"
  },
  {
    "text": "to provide a high performance fast-acting container like environment for our tasks",
    "start": "1132610",
    "end": "1140590"
  },
  {
    "text": "and functions so pass it on to Arun to talk about the container ecosystem all",
    "start": "1140590",
    "end": "1153220"
  },
  {
    "text": "right so my name is Arun Gupta I'm working the open source team at Amazon now let's take a look at it how",
    "start": "1153220",
    "end": "1159730"
  },
  {
    "text": "firecracker integrates with containers you know what are the ways by which you can look at it now",
    "start": "1159730",
    "end": "1165340"
  },
  {
    "text": "if you look at what does AWS offer in terms of containers we look at it from three different perspective first is the",
    "start": "1165340",
    "end": "1171730"
  },
  {
    "text": "management so you're looking at Amazon ECS which is a service that we launched back in 2014 which is when docker was",
    "start": "1171730",
    "end": "1178930"
  },
  {
    "text": "young there was no kubernetes cost wanted to run docker at scale and that's why we launched fully managed container",
    "start": "1178930",
    "end": "1185679"
  },
  {
    "text": "Orchestrator for you customers loved kubernetes more than 50% of kubernetes runs on AWS but they wanted us to",
    "start": "1185679",
    "end": "1192250"
  },
  {
    "text": "provide a managed service that's the reason we launched Amazon eks last year it wengie a so those are served from the",
    "start": "1192250",
    "end": "1199570"
  },
  {
    "text": "management perspective then under the hood you could run them on ec2 that means we provide a control plane and you",
    "start": "1199570",
    "end": "1205720"
  },
  {
    "text": "bring your data plane and attach it to the control plane and you run it that way now AWS Fargate is an innovative",
    "start": "1205720",
    "end": "1212380"
  },
  {
    "text": "technology which really allows you to say you want to run containers you don't want to focus on the undifferentiated",
    "start": "1212380",
    "end": "1217960"
  },
  {
    "text": "heavy lifting use on a build apps and let somebody else manage the containers whatever it is for you so AWS for gate",
    "start": "1217960",
    "end": "1225460"
  },
  {
    "text": "is a mechanism by which you say here is my container run it scale it monitor it debug it you know things need to happen",
    "start": "1225460",
    "end": "1232149"
  },
  {
    "text": "just do it for me so today if you think about Amazon ECS and eks they both run",
    "start": "1232149",
    "end": "1239019"
  },
  {
    "text": "using Amazon ec2 that means control plane managed bring your data plane and ECS today also work with for gate and",
    "start": "1239019",
    "end": "1246970"
  },
  {
    "text": "I'll get him to forget a bit more detail EK s+ forget integration is something that we are working on because that",
    "start": "1246970",
    "end": "1252880"
  },
  {
    "text": "really needs to be done in a upstream compatible manner so that you know you can still continue to run your applications that are running on Prem",
    "start": "1252880",
    "end": "1259120"
  },
  {
    "text": "and then bring them to AWS and registry is of course a very critical part of where you push your application and you",
    "start": "1259120",
    "end": "1265419"
  },
  {
    "text": "know registry is something pretty much that you don't want to think about I pushed my application I'm going to",
    "start": "1265419",
    "end": "1270460"
  },
  {
    "text": "download my application you know if I'm doing 4,000 pulls for for one particular image in a second it should support it",
    "start": "1270460",
    "end": "1278679"
  },
  {
    "text": "and that's the scale that Amazon ECR essentially operates at so think of it from management hosting an image",
    "start": "1278679",
    "end": "1285010"
  },
  {
    "text": "registry perspective those are the three ways by which we look at it now let's talk a little bit about AWS for gate as",
    "start": "1285010",
    "end": "1292330"
  },
  {
    "text": "I said so AWS for gate as I said what you do is you bring in a container you",
    "start": "1292330",
    "end": "1297720"
  },
  {
    "text": "write a task definition which is Amazon ECS language you need to create really",
    "start": "1297720",
    "end": "1303070"
  },
  {
    "text": "ECS cluster that is primarily for administrative perspective but no nodes",
    "start": "1303070",
    "end": "1308110"
  },
  {
    "text": "that needs to be added over there you know you set up your thresholds if you meet the thresholds the number of",
    "start": "1308110",
    "end": "1314440"
  },
  {
    "text": "replicas of the container automatically grow now how does that work behind the scene so let's talk about that a little",
    "start": "1314440",
    "end": "1320800"
  },
  {
    "text": "bit essentially what you say is I wanna run very much like lambda in a sense",
    "start": "1320800",
    "end": "1326920"
  },
  {
    "start": "1322000",
    "end": "1322000"
  },
  {
    "text": "there are 40 different configurations that are available so you can say run this container with so much be CPU so",
    "start": "1326920",
    "end": "1334600"
  },
  {
    "text": "much memory and that's all you say and behind the scene I'll talk about how that works we allocate an ec2 instance",
    "start": "1334600",
    "end": "1341260"
  },
  {
    "text": "and run that Fargate task for you and you can see there are like 40 different combinations depending upon how much V",
    "start": "1341260",
    "end": "1347920"
  },
  {
    "text": "CPU versus memory that you want okay so how does that work behind the scene well first of all on the right side what you",
    "start": "1347920",
    "end": "1354670"
  },
  {
    "start": "1352000",
    "end": "1352000"
  },
  {
    "text": "see there's a service account which is the AWS service account you never see that but we have instances a bunch of",
    "start": "1354670",
    "end": "1361660"
  },
  {
    "text": "ec2 instances that are running in a warm pool and we keep those instances ready for you now you say okay I want to run",
    "start": "1361660",
    "end": "1368590"
  },
  {
    "text": "and you can see the blue green and orange are from three different accounts so now you tell us that okay run this",
    "start": "1368590",
    "end": "1375070"
  },
  {
    "text": "for gate tasks with so much V CPU and so much memory we go behind the scene we",
    "start": "1375070",
    "end": "1380110"
  },
  {
    "text": "find out what is the closest matching ec2 instance we bring that ec2 instance",
    "start": "1380110",
    "end": "1385180"
  },
  {
    "text": "from the warm food because it's already ready primed for you to use and then we run your for gate task instance on that",
    "start": "1385180",
    "end": "1392200"
  },
  {
    "text": "ec2 instance if you say scale it then we bring in more instances of that type and",
    "start": "1392200",
    "end": "1398290"
  },
  {
    "text": "then we run multiple the key part here is to understand because we are using ec2 as a virtualization boundary so",
    "start": "1398290",
    "end": "1405340"
  },
  {
    "text": "that's really one instance and one task is how we are running it but from a user perspective you know all you pay for is",
    "start": "1405340",
    "end": "1411790"
  },
  {
    "text": "our gate task you don't see any of this happening behind the scenes you may",
    "start": "1411790",
    "end": "1417070"
  },
  {
    "text": "realize that this is slightly inefficient for us because I may say quarter CPU and two gigabytes of memory",
    "start": "1417070",
    "end": "1423670"
  },
  {
    "text": "but there is really no easy to instance that matches that type so how do we make it more efficient within",
    "start": "1423670",
    "end": "1429760"
  },
  {
    "text": "AWS we are always looking at ways on how we can make our infrastructure more efficient so that we can do the saving",
    "start": "1429760",
    "end": "1436750"
  },
  {
    "text": "and then pass on the cost to the customer so let's take a look at that so",
    "start": "1436750",
    "end": "1442300"
  },
  {
    "start": "1441000",
    "end": "1441000"
  },
  {
    "text": "what we do is with firecracker how does this game change first of all we don't need to",
    "start": "1442300",
    "end": "1449380"
  },
  {
    "text": "have one forget tasks per one ec2 instance okay because forget really allows you to say",
    "start": "1449380",
    "end": "1455650"
  },
  {
    "text": "tell me the how much CPU how much memory you want I'm gonna create a micro VM for you so you really take one task you",
    "start": "1455650",
    "end": "1464140"
  },
  {
    "text": "create a corresponding micro VM for it and you put the tasks into it then",
    "start": "1464140",
    "end": "1470770"
  },
  {
    "text": "because you don't need those warm ec2 instances so all of that service account that thing that we maintain on the",
    "start": "1470770",
    "end": "1476950"
  },
  {
    "text": "backend for you that is no longer needed here essentially because for the Firecracker micro VM starts up rather",
    "start": "1476950",
    "end": "1483340"
  },
  {
    "text": "rapidly and as Nina talked about 150 micro VMS per second depending upon the",
    "start": "1483340",
    "end": "1488950"
  },
  {
    "text": "host that you're running is totally possible that you can really create it on demand and now what we do is we can",
    "start": "1488950",
    "end": "1496090"
  },
  {
    "text": "take those big bare metal hosts and these micro VMS because it is using KVM",
    "start": "1496090",
    "end": "1501610"
  },
  {
    "text": "as the underlying virtualization technology that is sort of the security boundary as well we can place all of",
    "start": "1501610",
    "end": "1507460"
  },
  {
    "text": "these micro VMs on a lot of bare metal hosts and once you have placed them very",
    "start": "1507460",
    "end": "1513340"
  },
  {
    "text": "much like lambda we can actually do statistical multiplexing and place the workloads around so that not all CPU",
    "start": "1513340",
    "end": "1520780"
  },
  {
    "text": "intensive workloads or on one bare metal as opposed to all memory on one we can do statistical multiplexing to say okay",
    "start": "1520780",
    "end": "1526930"
  },
  {
    "text": "let's put the workload together so that we are getting the maximum utilization of the bare metal resources that are",
    "start": "1526930",
    "end": "1533710"
  },
  {
    "text": "being used behind the scene now we have started deploying forget workloads and",
    "start": "1533710",
    "end": "1539590"
  },
  {
    "text": "also if you are running in a particular region depending upon where you are you will be served by a fire cracker micro",
    "start": "1539590",
    "end": "1545260"
  },
  {
    "text": "BM in the back end so because of the efficiency and the cost that we have seen internally in running our",
    "start": "1545260",
    "end": "1551590"
  },
  {
    "text": "infrastructure we did a cost reduction earlier this year you know for Fargate",
    "start": "1551590",
    "end": "1556930"
  },
  {
    "text": "so if you're running a four gate task depending upon what CPU memory combination that you are running we have",
    "start": "1556930",
    "end": "1562360"
  },
  {
    "text": "been able to do 35 percent to 50 percent cumulative price reduction for you know",
    "start": "1562360",
    "end": "1568270"
  },
  {
    "text": "I mean no customers has ever complained that why did he put the fries down so we have done the price reduction over 70",
    "start": "1568270",
    "end": "1574300"
  },
  {
    "text": "plus times and pass it on to our customers as we have gained achieve you know achieve those improvements within our",
    "start": "1574300",
    "end": "1580490"
  },
  {
    "text": "infrastructure and firecracker is a way that enable this if you want to read about it how we did this here's a",
    "start": "1580490",
    "end": "1586280"
  },
  {
    "text": "pointer to the blog and the slides will definitely be made available Mina also",
    "start": "1586280",
    "end": "1592490"
  },
  {
    "text": "talked about a little bit about firecracker and container D so let's talk about what that project is now what",
    "start": "1592490",
    "end": "1599510"
  },
  {
    "text": "we can do with continuity continuity is a runtime which basically spins up your containers and is heavily being used in",
    "start": "1599510",
    "end": "1605299"
  },
  {
    "text": "the kubernetes land essentially so what we can do is we can use container D to manage your containers as firecracker",
    "start": "1605299",
    "end": "1612530"
  },
  {
    "text": "micro VMs so essentially you have a container D process sitting up there on the top then you can tell container D",
    "start": "1612530",
    "end": "1619850"
  },
  {
    "text": "that I need to run a container container D will go run a firecracker micro VM for",
    "start": "1619850",
    "end": "1625190"
  },
  {
    "text": "you within which it's gonna place your container and then it's gonna say go run it and I'll talk about the possible",
    "start": "1625190",
    "end": "1632179"
  },
  {
    "text": "architecture that we are looking at it this is the work is all done in open",
    "start": "1632179",
    "end": "1637429"
  },
  {
    "text": "source manner so you can definitely take a look at it what it also enables is a multi-tenant hosts because firecracker",
    "start": "1637429",
    "end": "1644809"
  },
  {
    "text": "gives you their security virtualization boundary now container D can run you know containers from different customers",
    "start": "1644809",
    "end": "1651380"
  },
  {
    "text": "on the same bare-metal host to maintain the upstream compatibility is fundamentally important that we use",
    "start": "1651380",
    "end": "1657620"
  },
  {
    "text": "basically an over CI image format so docker is a popular OCI image format and so essentially you can say hey this",
    "start": "1657620",
    "end": "1664220"
  },
  {
    "text": "firecracker container the integration is cool I can bring in a docker image and now I can potentially run either ECS",
    "start": "1664220",
    "end": "1671720"
  },
  {
    "text": "task or a kubernetes pod inside a firecracker micro VM",
    "start": "1671720",
    "end": "1677570"
  },
  {
    "text": "because both of them they end up using docker image as the base so our goal is",
    "start": "1677570",
    "end": "1684320"
  },
  {
    "text": "to make it work basically both with Amazon ECS and he cares so this work as I said earlier is being done in the open",
    "start": "1684320",
    "end": "1690260"
  },
  {
    "text": "source in the firecracker repo take a look at firecracker container D github organization in the FAQ across in the",
    "start": "1690260",
    "end": "1697909"
  },
  {
    "text": "repo actually a fire container ad repo and that's where all the work is being done I would love to see you know your",
    "start": "1697909",
    "end": "1703400"
  },
  {
    "text": "thought process how the design is evolving what else would you like to see what's working or not",
    "start": "1703400",
    "end": "1710149"
  },
  {
    "text": "so the goal over here is to define a future where we can have security and",
    "start": "1710149",
    "end": "1715659"
  },
  {
    "text": "lightness all combined together so you can get the security of virtualization and agility of containers combined",
    "start": "1715659",
    "end": "1722689"
  },
  {
    "text": "together being enabled by fire cracker essentially so let's talk a little bit about the architecture here essentially",
    "start": "1722689",
    "end": "1728869"
  },
  {
    "start": "1726000",
    "end": "1726000"
  },
  {
    "text": "there are three main components so there is a snapshot er there is a runtime and there is an agent here so the snapshot",
    "start": "1728869",
    "end": "1735649"
  },
  {
    "text": "er is basically linking container D to the fire cracker which is you see right above on the top here essentially now",
    "start": "1735649",
    "end": "1742039"
  },
  {
    "text": "the fire cracker the runtime is implemented as an out of process now if you look at this the on the right is",
    "start": "1742039",
    "end": "1748699"
  },
  {
    "text": "where my micro VM is both snap shorter and runtime are out of process essentially over there and it basically",
    "start": "1748699",
    "end": "1755659"
  },
  {
    "text": "communicates with the Shimron time using TT RPC protocol over there it uses the",
    "start": "1755659",
    "end": "1762229"
  },
  {
    "text": "VM disk image and the kernel image to spin up your micro bein so you say that's how anyway a firecracker works so",
    "start": "1762229",
    "end": "1768559"
  },
  {
    "text": "you have to give it a kernel image and a disk image and then it spits pins up your micro VM over there so once the disk image in the kernel",
    "start": "1768559",
    "end": "1775309"
  },
  {
    "text": "image is used your micro VM is implemented or started then you have an internal fire cracker agent which is",
    "start": "1775309",
    "end": "1781819"
  },
  {
    "text": "basically listening for your fire cracker api's that tell me what needs to be done as we talked about there is a",
    "start": "1781819",
    "end": "1787639"
  },
  {
    "text": "rest bunch of rest api is once the fire cracker and vm is configured then you",
    "start": "1787639",
    "end": "1792649"
  },
  {
    "text": "can invoke those rest api is talking to the fire cracker agent to do the things that needs to be done in the micro BM so",
    "start": "1792649",
    "end": "1804679"
  },
  {
    "start": "1803000",
    "end": "1803000"
  },
  {
    "text": "one of the fundamental things that we've been shying away we don't want to call it as an Amazon fire cracker or AWS fire",
    "start": "1804679",
    "end": "1811009"
  },
  {
    "text": "cracker we truly want to run this as an open source project sure it was created as a need Chris created by Amazon at AWS",
    "start": "1811009",
    "end": "1819979"
  },
  {
    "text": "but really what we are looking at it as a purely open source project so you really want to hear from you as a matter",
    "start": "1819979",
    "end": "1826699"
  },
  {
    "text": "of fact over 88 contributions from 32 open source contributors which is about",
    "start": "1826699",
    "end": "1832519"
  },
  {
    "text": "quarter of the contributions are from external contributors so Amazon is still one of the major contributors to it I",
    "start": "1832519",
    "end": "1839269"
  },
  {
    "text": "want to give a prop to actually Diana who's sitting in the audience here she is one of the fire cracker maintain yours I've been working on the",
    "start": "1839269",
    "end": "1845120"
  },
  {
    "text": "project from the very first day we have any questions please feel free to talk to her she'll be excited to answer all",
    "start": "1845120",
    "end": "1851750"
  },
  {
    "text": "of those for you there are dozens of bug reports feature requests RFC feedback is",
    "start": "1851750",
    "end": "1857929"
  },
  {
    "text": "truly we and that's sort of where I play in because I am I'm we have that customer empathy I want to make sure",
    "start": "1857929",
    "end": "1864050"
  },
  {
    "text": "this is truly run as an open source project we do talks at different",
    "start": "1864050",
    "end": "1869360"
  },
  {
    "text": "conferences so we're doing more and more not just doing the thing but also talking about it so that we give an",
    "start": "1869360",
    "end": "1874970"
  },
  {
    "text": "opportunity to talk to customers here another part that I am super interested about is a rust vmm now if you think",
    "start": "1874970",
    "end": "1881960"
  },
  {
    "text": "about you know when we talk to our customers they tell us firecracker is cool but you know here are like five",
    "start": "1881960",
    "end": "1887390"
  },
  {
    "text": "different things I also want to add to firecracker and our tenets and the Charter are very clearly defined on the",
    "start": "1887390",
    "end": "1894020"
  },
  {
    "text": "project itself so we want to make sure firecracker stays true to its tenets and charter but we don't want to deny those",
    "start": "1894020",
    "end": "1900650"
  },
  {
    "text": "customers as well so what we are doing is we are looking at the building blocks of firecracker and moving them to this",
    "start": "1900650",
    "end": "1906710"
  },
  {
    "text": "rust vmm project firecracker is written in rust so what we have done is we have creating we're working with other",
    "start": "1906710",
    "end": "1911900"
  },
  {
    "text": "industry players to create those vmm crates so what long-term vision essentially is we want firecracker to be",
    "start": "1911900",
    "end": "1918650"
  },
  {
    "text": "a kind of micro VM which is built using those rust vmm components or crates so",
    "start": "1918650",
    "end": "1926210"
  },
  {
    "text": "that now you have a need you want to build a custom micro BM or custom vmm take a look at those crates build your",
    "start": "1926210",
    "end": "1932990"
  },
  {
    "text": "custom vmm because that's where the work is happening that's essentially how we see firecracker evolving in the future",
    "start": "1932990",
    "end": "1939140"
  },
  {
    "text": "as well so that's again a great place if you want to collaborate if you are interested in rust talk to us we would",
    "start": "1939140",
    "end": "1944540"
  },
  {
    "text": "love to get you engaged over there talk about transparency literally what three",
    "start": "1944540",
    "end": "1950570"
  },
  {
    "start": "1947000",
    "end": "1947000"
  },
  {
    "text": "days ago I think well we have been working on this for a long time so we did a RFC like an issue and we looked at",
    "start": "1950570",
    "end": "1958309"
  },
  {
    "text": "customer feedback what are the features that they want us to work upon so there was a lot of discussions on the RFC",
    "start": "1958309",
    "end": "1963679"
  },
  {
    "text": "which was basically one issue but about three days ago we actually open source completely made completely public what",
    "start": "1963679",
    "end": "1970700"
  },
  {
    "text": "our road map looks like now the you can see the categories over here are like",
    "start": "1970700",
    "end": "1975740"
  },
  {
    "text": "researching contributions welcome up coming so at least you get a sense of what we are working on and we",
    "start": "1975740",
    "end": "1982060"
  },
  {
    "text": "would love to hear your feedback on this what's working what's not working is it rightly categorized so we want to be",
    "start": "1982060",
    "end": "1988420"
  },
  {
    "text": "more transparent and as we were discussing in our the clarity is important so that you see clearly here",
    "start": "1988420",
    "end": "1994150"
  },
  {
    "text": "what is coming out in an S part of this open source project there's a lot of",
    "start": "1994150",
    "end": "2000240"
  },
  {
    "start": "1998000",
    "end": "1998000"
  },
  {
    "text": "firecracker integration that is happening with open source projects let me talk a little bit about that as well",
    "start": "2000240",
    "end": "2005510"
  },
  {
    "text": "right after firecracker was launched a train went we had a very good meeting with Carter containers and I'll talk",
    "start": "2005510",
    "end": "2011880"
  },
  {
    "text": "about that a little bit more detail but unique a you know is open source project that basically takes your application",
    "start": "2011880",
    "end": "2018690"
  },
  {
    "text": "sources and containers and create micro VMs for that so that's a cool project there's a blog written on this and how",
    "start": "2018690",
    "end": "2024690"
  },
  {
    "text": "you can use unique to actually create a firecracker based micro VM so literally",
    "start": "2024690",
    "end": "2030330"
  },
  {
    "text": "you can take your application sources or containers and say use the unique and firecracker integration to run a micro",
    "start": "2030330",
    "end": "2037350"
  },
  {
    "text": "VM for me os V is again a special operating system that is tasks to run a",
    "start": "2037350",
    "end": "2044040"
  },
  {
    "text": "single application and all very tuned for containers kind of our environment now there is an integration between OS v",
    "start": "2044040",
    "end": "2051389"
  },
  {
    "text": "and firecracker as well OS V is different in the sense you know if you look at a virtual machine it's a very",
    "start": "2051390",
    "end": "2057360"
  },
  {
    "text": "generic virtual machine that can run anything Westby is tuned for containers in that sense but again with OS v you",
    "start": "2057360",
    "end": "2063960"
  },
  {
    "text": "can say use firecracker as a mechanism to provision my micro VM and it'll do that and we've ignite is a brand-new",
    "start": "2063960",
    "end": "2071040"
  },
  {
    "text": "project that was literally launched last week so let me talk about that will be free about them now",
    "start": "2071040",
    "end": "2076950"
  },
  {
    "start": "2075000",
    "end": "2075000"
  },
  {
    "text": "Cora containers is an open source project that is really targeting to build a lightweight VM for running",
    "start": "2076950",
    "end": "2082830"
  },
  {
    "text": "containers okay and it seems seamlessly plugs into containers so customers have been using",
    "start": "2082830",
    "end": "2088169"
  },
  {
    "text": "it now Carter containers has this concept of pluggable hypervisors by default it uses qmu now one of their",
    "start": "2088169",
    "end": "2096179"
  },
  {
    "text": "biggest customer Oscar is qmu is good but it's very feature-rich very heavyweight so they wanted a little bit",
    "start": "2096179",
    "end": "2101850"
  },
  {
    "text": "more targeted a lightweight hypervisor and that's exactly where got a fire",
    "start": "2101850",
    "end": "2108270"
  },
  {
    "text": "cracker kind of fits as part of their needs if you look at it essentially you can use cotta containers to run in",
    "start": "2108270",
    "end": "2114570"
  },
  {
    "text": "kubernetes using lightweight micro VMs by default when you say cubelet",
    "start": "2114570",
    "end": "2120680"
  },
  {
    "text": "provision my part it uses CRI uses runtime class runtime class says ok by",
    "start": "2120680",
    "end": "2128430"
  },
  {
    "text": "default I'm gonna use QM you go provision run see and provision my part",
    "start": "2128430",
    "end": "2133470"
  },
  {
    "text": "but then what you can do is you can say use annotation in your part spec by",
    "start": "2133470",
    "end": "2139500"
  },
  {
    "text": "which it will say oh by the way now I'm using kata firecracker integration so in which case is gonna go the right on the",
    "start": "2139500",
    "end": "2145890"
  },
  {
    "text": "right side where it uses a cart or runtime and uses a firecracker vm micro vm to provision your vm and then runs a",
    "start": "2145890",
    "end": "2153840"
  },
  {
    "text": "part inside that that's pretty cool integration we've ignite this is a",
    "start": "2153840",
    "end": "2158910"
  },
  {
    "start": "2156000",
    "end": "2156000"
  },
  {
    "text": "project that I am super excited about as well because if you think about when we originally created firecracker our",
    "start": "2158910",
    "end": "2164430"
  },
  {
    "text": "thought process was this would be primarily relevant for container Orchestrator we ignite says that's not",
    "start": "2164430",
    "end": "2171120"
  },
  {
    "text": "true because that's where the innovation is happening they say is you know firecracker is a vmm so we should be",
    "start": "2171120",
    "end": "2179070"
  },
  {
    "text": "able to create a VM and because you create quickly we're gonna leverage that capability so it's open source",
    "start": "2179070",
    "end": "2185190"
  },
  {
    "text": "EMM with the container UX essentially so what you can do is it you can bring your",
    "start": "2185190",
    "end": "2190500"
  },
  {
    "text": "darker or OCI compatible images and it will create a firecracker micro VM and",
    "start": "2190500",
    "end": "2196380"
  },
  {
    "text": "it will run your OCI images in that micro BM essentially that really opens",
    "start": "2196380",
    "end": "2202020"
  },
  {
    "text": "up a lot of possibilities the primary possibility that it you know that weave is targeting right now at",
    "start": "2202020",
    "end": "2207300"
  },
  {
    "text": "least is how you can enable a get off style you know quick you know where you do git push you target to a git repo it",
    "start": "2207300",
    "end": "2214680"
  },
  {
    "text": "builds your entire image brings that docker OCI image runs it in the firecracker micro VM you can do quick",
    "start": "2214680",
    "end": "2220770"
  },
  {
    "text": "testing and that is possible because of the lightweight nature of firecracker and how fast can it bootstrap it's as",
    "start": "2220770",
    "end": "2229200"
  },
  {
    "text": "simple as saying ignite get offs repo that's it just download the ignore it CLI say Peters repo and you have to have",
    "start": "2229200",
    "end": "2235590"
  },
  {
    "text": "the VMS back over there and that's it that's what enables guitars for you this",
    "start": "2235590",
    "end": "2240630"
  },
  {
    "text": "is where you can find all the information about ignite by itself morning Radu actually gave a webinar",
    "start": "2240630",
    "end": "2246340"
  },
  {
    "text": "with we've works on how firecracker and ignite looks at it so if you're interested I'll tweet that link again",
    "start": "2246340",
    "end": "2252550"
  },
  {
    "text": "and so take a look at that so who should use firecracker directly teams building",
    "start": "2252550",
    "end": "2258640"
  },
  {
    "text": "compute services you know if you are building container Orchestrator if you are developer and security engineers",
    "start": "2258640",
    "end": "2264430"
  },
  {
    "text": "that it matters to you that you can use it and again we have seen more doors being open because of weave ignite that",
    "start": "2264430",
    "end": "2271510"
  },
  {
    "text": "this is much more widely used so getting started with firecracker you can use it either on bare metal so I have done",
    "start": "2271510",
    "end": "2278470"
  },
  {
    "text": "several demos around how you can fire it up on AWS bare metal instance it runs very well under nested word as well so",
    "start": "2278470",
    "end": "2285400"
  },
  {
    "text": "Joe bata did a TGI Kade series and there he used GCP nested work and he showed",
    "start": "2285400",
    "end": "2291370"
  },
  {
    "text": "how to run firecracker over there so whether it is bare metal your laptop wherever it is is completely independent",
    "start": "2291370",
    "end": "2297610"
  },
  {
    "text": "is in no way restricted to a cloud very",
    "start": "2297610",
    "end": "2303460"
  },
  {
    "text": "easy to get started this firecracker there is just like you control there is fire control all you do is I'm gonna",
    "start": "2303460",
    "end": "2309820"
  },
  {
    "text": "create a micro VM you give it a kernel and a root driver on a root drive it basically takes that image you know",
    "start": "2309820",
    "end": "2315970"
  },
  {
    "text": "creates your entire micro VM with that layout and ready to roll and you can by the way you can create your own kernel",
    "start": "2315970",
    "end": "2322240"
  },
  {
    "text": "images and root systems as well so feel free to use it on the firecracker repo we have a link to a s3 bucket where we",
    "start": "2322240",
    "end": "2330040"
  },
  {
    "text": "have a whole bunch of you know these root systems and kernels so at least to get you started and play with them last",
    "start": "2330040",
    "end": "2338380"
  },
  {
    "start": "2336000",
    "end": "2336000"
  },
  {
    "text": "but not the least this is where you can find all the information about firecracker this is the firecracker micro gram get github repo and that's",
    "start": "2338380",
    "end": "2345670"
  },
  {
    "text": "where we want to collaborate and work with you and as I said earlier the internal and the external customers we",
    "start": "2345670",
    "end": "2352450"
  },
  {
    "text": "treat the same way because even the internal engineering team is aligning with the external roadmap so there is no",
    "start": "2352450",
    "end": "2358210"
  },
  {
    "text": "such thing as internal firecracker you know this is what is one thing everybody is conforming to that truth thank you",
    "start": "2358210",
    "end": "2365140"
  },
  {
    "start": "2365000",
    "end": "2365000"
  },
  {
    "text": "very much I would encourage you to raid the app you know read the not the app but the talk itself thank you so much",
    "start": "2365140",
    "end": "2373580"
  },
  {
    "text": "you [Music] [Applause]",
    "start": "2373580",
    "end": "2378900"
  }
]