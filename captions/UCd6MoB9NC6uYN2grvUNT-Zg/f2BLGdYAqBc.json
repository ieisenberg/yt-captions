[
  {
    "text": "hi all welcome to this video where we",
    "start": "880",
    "end": "2879"
  },
  {
    "text": "will introduce the new amazon redshift",
    "start": "2879",
    "end": "4799"
  },
  {
    "text": "data api",
    "start": "4799",
    "end": "6000"
  },
  {
    "text": "my name is vaidy and i'll be joined a",
    "start": "6000",
    "end": "7680"
  },
  {
    "text": "little later by my colleague harshida",
    "start": "7680",
    "end": "9840"
  },
  {
    "text": "and we're both from the redshift team",
    "start": "9840",
    "end": "11120"
  },
  {
    "text": "here at aws amazon redshift can now be",
    "start": "11120",
    "end": "14080"
  },
  {
    "text": "accessed using the built-in data api",
    "start": "14080",
    "end": "16240"
  },
  {
    "text": "making it easy to build web services",
    "start": "16240",
    "end": "18000"
  },
  {
    "text": "based applications and integrating with",
    "start": "18000",
    "end": "19680"
  },
  {
    "text": "services",
    "start": "19680",
    "end": "20560"
  },
  {
    "text": "including aws lambda aws appsync",
    "start": "20560",
    "end": "23760"
  },
  {
    "text": "and aws cloud 9.",
    "start": "23760",
    "end": "27119"
  },
  {
    "text": "let's start by discussing what our",
    "start": "28080",
    "end": "30480"
  },
  {
    "text": "customers have been asking us",
    "start": "30480",
    "end": "32160"
  },
  {
    "text": "that led us to build this feature our",
    "start": "32160",
    "end": "35200"
  },
  {
    "text": "customers have been asking how do i get",
    "start": "35200",
    "end": "37040"
  },
  {
    "text": "started after i create the first cluster",
    "start": "37040",
    "end": "39520"
  },
  {
    "text": "what driver do i need to use how to",
    "start": "39520",
    "end": "41920"
  },
  {
    "text": "create my first query right after i",
    "start": "41920",
    "end": "43760"
  },
  {
    "text": "create",
    "start": "43760",
    "end": "44000"
  },
  {
    "text": "my first cluster how can i use redshift",
    "start": "44000",
    "end": "46480"
  },
  {
    "text": "from a lambda function",
    "start": "46480",
    "end": "47680"
  },
  {
    "text": "do i need to use a driver how do i build",
    "start": "47680",
    "end": "50239"
  },
  {
    "text": "an event-driven pipeline for redshift",
    "start": "50239",
    "end": "52000"
  },
  {
    "text": "using components within the aws",
    "start": "52000",
    "end": "53760"
  },
  {
    "text": "ecosystem",
    "start": "53760",
    "end": "54960"
  },
  {
    "text": "how to run a query on redshift using",
    "start": "54960",
    "end": "56840"
  },
  {
    "text": "javascript",
    "start": "56840",
    "end": "58079"
  },
  {
    "text": "the fundamental challenge across all",
    "start": "58079",
    "end": "60239"
  },
  {
    "text": "these questions",
    "start": "60239",
    "end": "61199"
  },
  {
    "text": "as we tried to identify a theme was that",
    "start": "61199",
    "end": "63920"
  },
  {
    "text": "redshift could not be accessed from",
    "start": "63920",
    "end": "65439"
  },
  {
    "text": "programming languages at the aws sdk",
    "start": "65439",
    "end": "67680"
  },
  {
    "text": "supports",
    "start": "67680",
    "end": "68720"
  },
  {
    "text": "or from aws lambda functions without",
    "start": "68720",
    "end": "71680"
  },
  {
    "text": "having to depend on third-party drivers",
    "start": "71680",
    "end": "75840"
  },
  {
    "text": "the data api simplifies access to amazon",
    "start": "76880",
    "end": "79439"
  },
  {
    "text": "redshift by removing the need to manage",
    "start": "79439",
    "end": "81439"
  },
  {
    "text": "database connections and credentials",
    "start": "81439",
    "end": "84080"
  },
  {
    "text": "instead you can execute sql commands to",
    "start": "84080",
    "end": "86080"
  },
  {
    "text": "an amazon redship cluster by simply",
    "start": "86080",
    "end": "87920"
  },
  {
    "text": "invoking a public service endpoint",
    "start": "87920",
    "end": "90240"
  },
  {
    "text": "to run queries against that cluster",
    "start": "90240",
    "end": "92479"
  },
  {
    "text": "directly using the aws sdk",
    "start": "92479",
    "end": "95439"
  },
  {
    "text": "the rechip data api simplifies data",
    "start": "95439",
    "end": "97600"
  },
  {
    "text": "access ingest",
    "start": "97600",
    "end": "98720"
  },
  {
    "text": "and egress from languages supported with",
    "start": "98720",
    "end": "100960"
  },
  {
    "text": "aws sdks such as python",
    "start": "100960",
    "end": "103520"
  },
  {
    "text": "go java node.js php",
    "start": "103520",
    "end": "107040"
  },
  {
    "text": "ruby and c-plus plus so you can focuses",
    "start": "107040",
    "end": "110079"
  },
  {
    "text": "focus on building applications versus",
    "start": "110079",
    "end": "113280"
  },
  {
    "text": "managing infrastructure",
    "start": "113280",
    "end": "115040"
  },
  {
    "text": "you can access it from the command line",
    "start": "115040",
    "end": "116640"
  },
  {
    "text": "interface and since the data api",
    "start": "116640",
    "end": "119200"
  },
  {
    "text": "leverages iam user credentials or",
    "start": "119200",
    "end": "121439"
  },
  {
    "text": "database credentials stored in aws",
    "start": "121439",
    "end": "123280"
  },
  {
    "text": "secrets manager",
    "start": "123280",
    "end": "124560"
  },
  {
    "text": "you do not need to pass credentials and",
    "start": "124560",
    "end": "126479"
  },
  {
    "text": "api calls and finally",
    "start": "126479",
    "end": "128879"
  },
  {
    "text": "the data api stores your query results",
    "start": "128879",
    "end": "131520"
  },
  {
    "text": "for 24 hours",
    "start": "131520",
    "end": "132720"
  },
  {
    "text": "and is asynchronous so you can retrieve",
    "start": "132720",
    "end": "134480"
  },
  {
    "text": "your results faster",
    "start": "134480",
    "end": "137360"
  },
  {
    "text": "there are a number of use cases that",
    "start": "137520",
    "end": "139599"
  },
  {
    "text": "will benefit from the launch of the data",
    "start": "139599",
    "end": "141200"
  },
  {
    "text": "api",
    "start": "141200",
    "end": "142239"
  },
  {
    "text": "namely retrieving and manipulating data",
    "start": "142239",
    "end": "145120"
  },
  {
    "text": "programmatically in redshift",
    "start": "145120",
    "end": "147040"
  },
  {
    "text": "integrating with sagemaker notebooks to",
    "start": "147040",
    "end": "148720"
  },
  {
    "text": "make data make",
    "start": "148720",
    "end": "150239"
  },
  {
    "text": "access easier for data scientists and",
    "start": "150239",
    "end": "152400"
  },
  {
    "text": "analysts",
    "start": "152400",
    "end": "153519"
  },
  {
    "text": "and simplifying the process of loading",
    "start": "153519",
    "end": "155920"
  },
  {
    "text": "and unloading data from redshift",
    "start": "155920",
    "end": "158239"
  },
  {
    "text": "next i will invite harshida to",
    "start": "158239",
    "end": "160879"
  },
  {
    "text": "demonstrate how you can access redshift",
    "start": "160879",
    "end": "162640"
  },
  {
    "text": "from the aws command line interface",
    "start": "162640",
    "end": "164720"
  },
  {
    "text": "using the data api thank you vedi",
    "start": "164720",
    "end": "168560"
  },
  {
    "text": "i'll now walk you through how you can",
    "start": "168560",
    "end": "170800"
  },
  {
    "text": "access amazon redshift",
    "start": "170800",
    "end": "173440"
  },
  {
    "text": "from a command line using data api for",
    "start": "173440",
    "end": "176480"
  },
  {
    "text": "this demo i'm",
    "start": "176480",
    "end": "177440"
  },
  {
    "text": "going to use an existing redshift",
    "start": "177440",
    "end": "180480"
  },
  {
    "text": "cluster a data api which is already",
    "start": "180480",
    "end": "183599"
  },
  {
    "text": "pre-spun",
    "start": "183599",
    "end": "184239"
  },
  {
    "text": "up for the database credentials",
    "start": "184239",
    "end": "188239"
  },
  {
    "text": "i'm going to leverage a secrets manager",
    "start": "188239",
    "end": "190480"
  },
  {
    "text": "which is going to store",
    "start": "190480",
    "end": "191840"
  },
  {
    "text": "the database credential which i will be",
    "start": "191840",
    "end": "194319"
  },
  {
    "text": "using",
    "start": "194319",
    "end": "194959"
  },
  {
    "text": "as part of the cli demo let's go ahead",
    "start": "194959",
    "end": "197440"
  },
  {
    "text": "and get started",
    "start": "197440",
    "end": "198400"
  },
  {
    "text": "we'll do aws help",
    "start": "198400",
    "end": "202159"
  },
  {
    "text": "and we'll grab for redshift",
    "start": "202159",
    "end": "205760"
  },
  {
    "text": "so now we can see redshift data",
    "start": "206400",
    "end": "209519"
  },
  {
    "text": "is accessible through the command line",
    "start": "209519",
    "end": "214080"
  },
  {
    "text": "now we'll get started and see what kind",
    "start": "214080",
    "end": "216480"
  },
  {
    "text": "of functions",
    "start": "216480",
    "end": "217680"
  },
  {
    "text": "we can access with redshift data",
    "start": "217680",
    "end": "222640"
  },
  {
    "text": "so you can cancel statements describe",
    "start": "223599",
    "end": "227040"
  },
  {
    "text": "statements",
    "start": "227040",
    "end": "227920"
  },
  {
    "text": "execute statements the statements that",
    "start": "227920",
    "end": "230640"
  },
  {
    "text": "you can execute could be",
    "start": "230640",
    "end": "232159"
  },
  {
    "text": "ddl or dml list databases",
    "start": "232159",
    "end": "236319"
  },
  {
    "text": "schema statements and tables",
    "start": "236319",
    "end": "241840"
  },
  {
    "text": "let's take a look at what are the",
    "start": "242319",
    "end": "245040"
  },
  {
    "text": "existing",
    "start": "245040",
    "end": "246000"
  },
  {
    "text": "schemas in the data api redshift cluster",
    "start": "246000",
    "end": "249760"
  },
  {
    "text": "that we already have",
    "start": "249760",
    "end": "255840"
  },
  {
    "text": "so with this we are calling list schema",
    "start": "259680",
    "end": "262079"
  },
  {
    "text": "providing the database the cluster id",
    "start": "262079",
    "end": "264320"
  },
  {
    "text": "which is data api",
    "start": "264320",
    "end": "266160"
  },
  {
    "text": "and secrets manager or the r for the",
    "start": "266160",
    "end": "269360"
  },
  {
    "text": "secret",
    "start": "269360",
    "end": "271440"
  },
  {
    "text": "the database that we are connecting to",
    "start": "271440",
    "end": "273440"
  },
  {
    "text": "which is dev and the region",
    "start": "273440",
    "end": "275360"
  },
  {
    "text": "right now i'm using usb2 so this is",
    "start": "275360",
    "end": "278720"
  },
  {
    "text": "listing",
    "start": "278720",
    "end": "279280"
  },
  {
    "text": "all the schemas which are present on",
    "start": "279280",
    "end": "281199"
  },
  {
    "text": "that redshift cluster",
    "start": "281199",
    "end": "282720"
  },
  {
    "text": "now let's look at the tables which are",
    "start": "282720",
    "end": "284880"
  },
  {
    "text": "in the schema adb305",
    "start": "284880",
    "end": "288400"
  },
  {
    "text": "so to get the list of the tables we'll",
    "start": "288400",
    "end": "290400"
  },
  {
    "text": "execute list tables",
    "start": "290400",
    "end": "292400"
  },
  {
    "text": "function there are these are the",
    "start": "292400",
    "end": "295280"
  },
  {
    "text": "external tables",
    "start": "295280",
    "end": "296639"
  },
  {
    "text": "uh within that schema and the one that",
    "start": "296639",
    "end": "299280"
  },
  {
    "text": "we are going to execute the query",
    "start": "299280",
    "end": "300880"
  },
  {
    "text": "against is ny",
    "start": "300880",
    "end": "302240"
  },
  {
    "text": "pub table which is the publicly",
    "start": "302240",
    "end": "304800"
  },
  {
    "text": "available new york taxi",
    "start": "304800",
    "end": "308159"
  },
  {
    "text": "data",
    "start": "308840",
    "end": "310000"
  },
  {
    "text": "now let's execute the sql statement",
    "start": "310000",
    "end": "313440"
  },
  {
    "text": "to figure out the min in the max year",
    "start": "313440",
    "end": "317759"
  },
  {
    "text": "and once you execute the sql statement",
    "start": "317759",
    "end": "320720"
  },
  {
    "text": "or execute statement",
    "start": "320720",
    "end": "322240"
  },
  {
    "text": "you will get an id so this is",
    "start": "322240",
    "end": "325440"
  },
  {
    "text": "the id that is provided by data api once",
    "start": "325440",
    "end": "328639"
  },
  {
    "text": "we have the id",
    "start": "328639",
    "end": "331280"
  },
  {
    "text": "let's identify the status or figure out",
    "start": "331280",
    "end": "333600"
  },
  {
    "text": "the status of that query",
    "start": "333600",
    "end": "336479"
  },
  {
    "text": "and for this we are going to run",
    "start": "336479",
    "end": "338240"
  },
  {
    "text": "describe statement",
    "start": "338240",
    "end": "339680"
  },
  {
    "text": "uh the query has completed so it's",
    "start": "339680",
    "end": "341600"
  },
  {
    "text": "finished",
    "start": "341600",
    "end": "342720"
  },
  {
    "text": "and it will provide you information on",
    "start": "342720",
    "end": "344720"
  },
  {
    "text": "the duration",
    "start": "344720",
    "end": "345919"
  },
  {
    "text": "and this data is available for 24 hours",
    "start": "345919",
    "end": "349120"
  },
  {
    "text": "to fetch",
    "start": "349120",
    "end": "349919"
  },
  {
    "text": "now to fetch the results from this query",
    "start": "349919",
    "end": "351759"
  },
  {
    "text": "id we are going to execute get statement",
    "start": "351759",
    "end": "354479"
  },
  {
    "text": "results",
    "start": "354479",
    "end": "355680"
  },
  {
    "text": "and this is the output the min and the",
    "start": "355680",
    "end": "358000"
  },
  {
    "text": "max value of the year 2009",
    "start": "358000",
    "end": "360319"
  },
  {
    "text": "and 2016. so with this what we saw is",
    "start": "360319",
    "end": "363919"
  },
  {
    "text": "how you can get started in 10 seconds in",
    "start": "363919",
    "end": "366400"
  },
  {
    "text": "less than 10 seconds once you have a",
    "start": "366400",
    "end": "368160"
  },
  {
    "text": "retrieve cluster",
    "start": "368160",
    "end": "369759"
  },
  {
    "text": "to start querying using data api",
    "start": "369759",
    "end": "372960"
  },
  {
    "text": "and execute dml or ddl",
    "start": "372960",
    "end": "376319"
  },
  {
    "text": "statements against your redshift cluster",
    "start": "376319",
    "end": "378639"
  },
  {
    "text": "with the second demo we'll dive into",
    "start": "378639",
    "end": "380720"
  },
  {
    "text": "how you can leverage aws sdk in your",
    "start": "380720",
    "end": "383680"
  },
  {
    "text": "python programmatically using porto 3.",
    "start": "383680",
    "end": "388000"
  },
  {
    "text": "with data api this requires no driver",
    "start": "388000",
    "end": "391199"
  },
  {
    "text": "management",
    "start": "391199",
    "end": "392080"
  },
  {
    "text": "or database connection management is",
    "start": "392080",
    "end": "393919"
  },
  {
    "text": "needed plus the execution of the query",
    "start": "393919",
    "end": "396160"
  },
  {
    "text": "against redshift cluster is asynchronous",
    "start": "396160",
    "end": "398400"
  },
  {
    "text": "in nature",
    "start": "398400",
    "end": "399600"
  },
  {
    "text": "so now let's look at the python code",
    "start": "399600",
    "end": "402960"
  },
  {
    "text": "in the python code we'll import photo3",
    "start": "402960",
    "end": "406240"
  },
  {
    "text": "specify the cluster the database",
    "start": "406240",
    "end": "409759"
  },
  {
    "text": "the user and the region where the",
    "start": "409759",
    "end": "412800"
  },
  {
    "text": "retrieve cluster is secondly we'll get",
    "start": "412800",
    "end": "416080"
  },
  {
    "text": "the client",
    "start": "416080",
    "end": "416960"
  },
  {
    "text": "for redshift data and then",
    "start": "416960",
    "end": "420840"
  },
  {
    "text": "execute statement",
    "start": "420840",
    "end": "423599"
  },
  {
    "text": "to execute the query against the",
    "start": "423599",
    "end": "425120"
  },
  {
    "text": "redshift cluster using the same new york",
    "start": "425120",
    "end": "427759"
  },
  {
    "text": "taxi",
    "start": "427759",
    "end": "428639"
  },
  {
    "text": "data where we will retrieve the type of",
    "start": "428639",
    "end": "430560"
  },
  {
    "text": "the taxis and the corresponding record",
    "start": "430560",
    "end": "432319"
  },
  {
    "text": "count in the year of 2016",
    "start": "432319",
    "end": "434479"
  },
  {
    "text": "month of january and february the query",
    "start": "434479",
    "end": "437599"
  },
  {
    "text": "execution is going to run",
    "start": "437599",
    "end": "439319"
  },
  {
    "text": "asynchronously and this execute",
    "start": "439319",
    "end": "441759"
  },
  {
    "text": "statement will return a query id",
    "start": "441759",
    "end": "444639"
  },
  {
    "text": "we will use the query id to describe the",
    "start": "444639",
    "end": "447520"
  },
  {
    "text": "statement",
    "start": "447520",
    "end": "448960"
  },
  {
    "text": "and which will give us the status of the",
    "start": "448960",
    "end": "451039"
  },
  {
    "text": "query id and once the query",
    "start": "451039",
    "end": "452960"
  },
  {
    "text": "has completed the status will be",
    "start": "452960",
    "end": "455120"
  },
  {
    "text": "finished",
    "start": "455120",
    "end": "456479"
  },
  {
    "text": "and once it's completed we will retrieve",
    "start": "456479",
    "end": "459840"
  },
  {
    "text": "by the results using get statement",
    "start": "459840",
    "end": "462000"
  },
  {
    "text": "results",
    "start": "462000",
    "end": "463039"
  },
  {
    "text": "the data the format of the get statement",
    "start": "463039",
    "end": "466479"
  },
  {
    "text": "result will be in a json format which",
    "start": "466479",
    "end": "468479"
  },
  {
    "text": "would",
    "start": "468479",
    "end": "468800"
  },
  {
    "text": "include column metadata and records and",
    "start": "468800",
    "end": "472000"
  },
  {
    "text": "for the purpose of the display we'll use",
    "start": "472000",
    "end": "474240"
  },
  {
    "text": "data frame to format",
    "start": "474240",
    "end": "475919"
  },
  {
    "text": "the output so now go ahead",
    "start": "475919",
    "end": "479120"
  },
  {
    "text": "and execute this statement",
    "start": "479120",
    "end": "482240"
  },
  {
    "text": "so executing the query provided this",
    "start": "482240",
    "end": "484240"
  },
  {
    "text": "query id",
    "start": "484240",
    "end": "486319"
  },
  {
    "text": "and using that query id we fetched the",
    "start": "486319",
    "end": "489440"
  },
  {
    "text": "results",
    "start": "489440",
    "end": "490639"
  },
  {
    "text": "the output of which is in the json",
    "start": "490639",
    "end": "492400"
  },
  {
    "text": "format so you get column metadata",
    "start": "492400",
    "end": "495840"
  },
  {
    "text": "and the records which is the output of",
    "start": "495840",
    "end": "498960"
  },
  {
    "text": "the query results",
    "start": "498960",
    "end": "500639"
  },
  {
    "text": "so for this query we got total of three",
    "start": "500639",
    "end": "502879"
  },
  {
    "text": "records as the output",
    "start": "502879",
    "end": "505440"
  },
  {
    "text": "and here is the corresponding formatted",
    "start": "505440",
    "end": "508400"
  },
  {
    "text": "display",
    "start": "508400",
    "end": "509120"
  },
  {
    "text": "thank you for watching",
    "start": "509120",
    "end": "516000"
  }
]