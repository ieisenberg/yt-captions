[
  {
    "start": "0",
    "end": "8000"
  },
  {
    "text": "hey this is kirk from the dynamodb team",
    "start": "480",
    "end": "2320"
  },
  {
    "text": "and today we are talking about the core",
    "start": "2320",
    "end": "4240"
  },
  {
    "text": "concepts of tables items and attributes",
    "start": "4240",
    "end": "7520"
  },
  {
    "text": "so let's get going",
    "start": "7520",
    "end": "9360"
  },
  {
    "start": "8000",
    "end": "49000"
  },
  {
    "text": "think of a dynamodb table like a bucket",
    "start": "9360",
    "end": "11280"
  },
  {
    "text": "you securely store your data in",
    "start": "11280",
    "end": "13360"
  },
  {
    "text": "in this case it's your applications data",
    "start": "13360",
    "end": "15519"
  },
  {
    "text": "and what are called items in dynamodb",
    "start": "15519",
    "end": "18640"
  },
  {
    "text": "each table must have a primary key",
    "start": "18640",
    "end": "20720"
  },
  {
    "text": "defined which is enforced and has its",
    "start": "20720",
    "end": "23119"
  },
  {
    "text": "own table level settings for capacity",
    "start": "23119",
    "end": "25519"
  },
  {
    "text": "backups replication and so on",
    "start": "25519",
    "end": "28560"
  },
  {
    "text": "beyond the primary key which is required",
    "start": "28560",
    "end": "30560"
  },
  {
    "text": "for every item the schema for each item",
    "start": "30560",
    "end": "32719"
  },
  {
    "text": "in the table is flexible and each item",
    "start": "32719",
    "end": "34960"
  },
  {
    "text": "can have completely different attributes",
    "start": "34960",
    "end": "36960"
  },
  {
    "text": "than another item keep in mind that an",
    "start": "36960",
    "end": "39360"
  },
  {
    "text": "item is the core unit of data in",
    "start": "39360",
    "end": "41280"
  },
  {
    "text": "dynamodb",
    "start": "41280",
    "end": "42719"
  },
  {
    "text": "you've already heard me mention primary",
    "start": "42719",
    "end": "44320"
  },
  {
    "text": "keys but let's actually jump into what",
    "start": "44320",
    "end": "46000"
  },
  {
    "text": "that means what they're made up of and",
    "start": "46000",
    "end": "47680"
  },
  {
    "text": "how they relate to items",
    "start": "47680",
    "end": "49680"
  },
  {
    "start": "49000",
    "end": "161000"
  },
  {
    "text": "first let's talk about what makes up a",
    "start": "49680",
    "end": "51280"
  },
  {
    "text": "primary key then we'll define what the",
    "start": "51280",
    "end": "53199"
  },
  {
    "text": "primary key is",
    "start": "53199",
    "end": "54879"
  },
  {
    "text": "this is kind of a chicken in the egg",
    "start": "54879",
    "end": "56239"
  },
  {
    "text": "situation so bear with me for a moment",
    "start": "56239",
    "end": "59120"
  },
  {
    "text": "for each item there are two types of",
    "start": "59120",
    "end": "60960"
  },
  {
    "text": "keys there is a partition key which is",
    "start": "60960",
    "end": "63280"
  },
  {
    "text": "also called a hash key and a sort key",
    "start": "63280",
    "end": "65600"
  },
  {
    "text": "which is also called a range key if you",
    "start": "65600",
    "end": "68080"
  },
  {
    "text": "think about those names for a moment you",
    "start": "68080",
    "end": "69600"
  },
  {
    "text": "can probably see what they are and what",
    "start": "69600",
    "end": "71360"
  },
  {
    "text": "their function is",
    "start": "71360",
    "end": "72960"
  },
  {
    "text": "a partition key notes where that data",
    "start": "72960",
    "end": "74640"
  },
  {
    "text": "will be stored in the database which",
    "start": "74640",
    "end": "76400"
  },
  {
    "text": "partition will it be in the partition",
    "start": "76400",
    "end": "78640"
  },
  {
    "text": "key's value is hashed by the database",
    "start": "78640",
    "end": "80720"
  },
  {
    "text": "and thus y can also be called a hash key",
    "start": "80720",
    "end": "83759"
  },
  {
    "text": "a sort key denotes how the items which",
    "start": "83759",
    "end": "85840"
  },
  {
    "text": "share the same partition key are sorted",
    "start": "85840",
    "end": "88240"
  },
  {
    "text": "within that partition key a sort key is",
    "start": "88240",
    "end": "90640"
  },
  {
    "text": "how you can represent one-to-many",
    "start": "90640",
    "end": "92240"
  },
  {
    "text": "relationships in dynamodb with what is",
    "start": "92240",
    "end": "94400"
  },
  {
    "text": "called an item collection this is where",
    "start": "94400",
    "end": "96640"
  },
  {
    "text": "two or more items have the same",
    "start": "96640",
    "end": "97920"
  },
  {
    "text": "partition key but different sort keys",
    "start": "97920",
    "end": "99920"
  },
  {
    "text": "with each item being related by the",
    "start": "99920",
    "end": "101920"
  },
  {
    "text": "partition key",
    "start": "101920",
    "end": "103439"
  },
  {
    "text": "we'll look deeper at this critical",
    "start": "103439",
    "end": "104799"
  },
  {
    "text": "concept here in a moment",
    "start": "104799",
    "end": "106560"
  },
  {
    "text": "now that you know about these two types",
    "start": "106560",
    "end": "108000"
  },
  {
    "text": "of keys let's discuss how they come into",
    "start": "108000",
    "end": "109680"
  },
  {
    "text": "play and talk about primary keys of the",
    "start": "109680",
    "end": "111759"
  },
  {
    "text": "table",
    "start": "111759",
    "end": "112880"
  },
  {
    "text": "primary key comes in two different types",
    "start": "112880",
    "end": "115360"
  },
  {
    "text": "there is a simple primary key which",
    "start": "115360",
    "end": "117280"
  },
  {
    "text": "means it just has a partition key on",
    "start": "117280",
    "end": "119040"
  },
  {
    "text": "that table",
    "start": "119040",
    "end": "120320"
  },
  {
    "text": "then there is a composite primary key",
    "start": "120320",
    "end": "122240"
  },
  {
    "text": "which means that table is configured to",
    "start": "122240",
    "end": "124399"
  },
  {
    "text": "have a partition key and sort key",
    "start": "124399",
    "end": "126320"
  },
  {
    "text": "required and every item inserted into",
    "start": "126320",
    "end": "128879"
  },
  {
    "text": "that table must have that primary key as",
    "start": "128879",
    "end": "131599"
  },
  {
    "text": "part of the item",
    "start": "131599",
    "end": "133120"
  },
  {
    "text": "so why is this all important well when",
    "start": "133120",
    "end": "135360"
  },
  {
    "text": "querying dynamodb you have to give it",
    "start": "135360",
    "end": "137360"
  },
  {
    "text": "the partition key and you can optionally",
    "start": "137360",
    "end": "139760"
  },
  {
    "text": "give it the sort key",
    "start": "139760",
    "end": "141360"
  },
  {
    "text": "otherwise you're doing a full table scan",
    "start": "141360",
    "end": "143360"
  },
  {
    "text": "of the table like any other database",
    "start": "143360",
    "end": "145520"
  },
  {
    "text": "full table scans have their place but",
    "start": "145520",
    "end": "147440"
  },
  {
    "text": "you should avoid doing scan operations",
    "start": "147440",
    "end": "149840"
  },
  {
    "text": "as a primary query mechanism they're not",
    "start": "149840",
    "end": "152560"
  },
  {
    "text": "always efficient and used too frequently",
    "start": "152560",
    "end": "154640"
  },
  {
    "text": "that can have cost implications",
    "start": "154640",
    "end": "157280"
  },
  {
    "text": "for more information on scan operations",
    "start": "157280",
    "end": "159360"
  },
  {
    "text": "check the link in the description",
    "start": "159360",
    "end": "161920"
  },
  {
    "text": "let's look at a sample data model real",
    "start": "161920",
    "end": "163519"
  },
  {
    "text": "quick to show these concepts in action",
    "start": "163519",
    "end": "166160"
  },
  {
    "text": "now this happens to be a view from a",
    "start": "166160",
    "end": "168080"
  },
  {
    "text": "tool called no sql workbench for",
    "start": "168080",
    "end": "169599"
  },
  {
    "text": "dynamodb",
    "start": "169599",
    "end": "171280"
  },
  {
    "text": "this example presents three separate but",
    "start": "171280",
    "end": "173760"
  },
  {
    "text": "related items we'll talk about each one",
    "start": "173760",
    "end": "175760"
  },
  {
    "text": "of these items and dive a little bit",
    "start": "175760",
    "end": "177360"
  },
  {
    "text": "deeper to show you examples on how this",
    "start": "177360",
    "end": "179760"
  },
  {
    "text": "affects data modeling with dynamodb",
    "start": "179760",
    "end": "182720"
  },
  {
    "text": "let's look at the first item",
    "start": "182720",
    "end": "184560"
  },
  {
    "text": "it has a partition key of account 1 2 3",
    "start": "184560",
    "end": "187120"
  },
  {
    "text": "4 and then a sort key of inventory colon",
    "start": "187120",
    "end": "190000"
  },
  {
    "text": "colon armor",
    "start": "190000",
    "end": "191519"
  },
  {
    "text": "the value of the sort key is just a",
    "start": "191519",
    "end": "193040"
  },
  {
    "text": "string but this identifies this",
    "start": "193040",
    "end": "195200"
  },
  {
    "text": "particular item in my data model as",
    "start": "195200",
    "end": "197200"
  },
  {
    "text": "being the player's armor section of",
    "start": "197200",
    "end": "198879"
  },
  {
    "text": "their inventory and you might ask why",
    "start": "198879",
    "end": "200800"
  },
  {
    "text": "the double colon in between inventory",
    "start": "200800",
    "end": "202640"
  },
  {
    "text": "and armor",
    "start": "202640",
    "end": "203680"
  },
  {
    "text": "double colons is just a delimiter i like",
    "start": "203680",
    "end": "205680"
  },
  {
    "text": "to use personally as really nothing else",
    "start": "205680",
    "end": "207920"
  },
  {
    "text": "uses double colons i use it to identify",
    "start": "207920",
    "end": "210159"
  },
  {
    "text": "my different object types and i did a",
    "start": "210159",
    "end": "211599"
  },
  {
    "text": "model like this and then later on i can",
    "start": "211599",
    "end": "213840"
  },
  {
    "text": "do substrings and other functions in my",
    "start": "213840",
    "end": "215680"
  },
  {
    "text": "code that i might need on this value",
    "start": "215680",
    "end": "218080"
  },
  {
    "text": "you can see the second item with the",
    "start": "218080",
    "end": "219680"
  },
  {
    "text": "same account number as the partition key",
    "start": "219680",
    "end": "221920"
  },
  {
    "text": "but this item is the player's weapons",
    "start": "221920",
    "end": "223760"
  },
  {
    "text": "inventory",
    "start": "223760",
    "end": "224959"
  },
  {
    "text": "now why would i have a separate item for",
    "start": "224959",
    "end": "227519"
  },
  {
    "text": "the same inventory",
    "start": "227519",
    "end": "229120"
  },
  {
    "text": "in this case it's a data modeling",
    "start": "229120",
    "end": "230720"
  },
  {
    "text": "decision based on the access patterns of",
    "start": "230720",
    "end": "232560"
  },
  {
    "text": "my application in my game i display a",
    "start": "232560",
    "end": "235200"
  },
  {
    "text": "player's inventory on different panels",
    "start": "235200",
    "end": "237680"
  },
  {
    "text": "and a player's inventory will grow over",
    "start": "237680",
    "end": "239519"
  },
  {
    "text": "time to be quite large when i write to",
    "start": "239519",
    "end": "242000"
  },
  {
    "text": "the player's weapons inventory i am",
    "start": "242000",
    "end": "244159"
  },
  {
    "text": "probably not going to be writing to the",
    "start": "244159",
    "end": "245760"
  },
  {
    "text": "armor inventory in this particular case",
    "start": "245760",
    "end": "248159"
  },
  {
    "text": "their inventory might go above a few",
    "start": "248159",
    "end": "249840"
  },
  {
    "text": "kilobytes over time and instead of",
    "start": "249840",
    "end": "251920"
  },
  {
    "text": "writing the entire inventory each time i",
    "start": "251920",
    "end": "253760"
  },
  {
    "text": "want to swap out let's say a sword",
    "start": "253760",
    "end": "256400"
  },
  {
    "text": "i can just update just the weapons",
    "start": "256400",
    "end": "258720"
  },
  {
    "text": "inventory",
    "start": "258720",
    "end": "260079"
  },
  {
    "text": "this does not mean i can't get the",
    "start": "260079",
    "end": "261680"
  },
  {
    "text": "user's entire inventory if i need it",
    "start": "261680",
    "end": "263680"
  },
  {
    "text": "though",
    "start": "263680",
    "end": "264479"
  },
  {
    "text": "i can do a query operation with the",
    "start": "264479",
    "end": "266160"
  },
  {
    "text": "begins with expression and get all the",
    "start": "266160",
    "end": "268320"
  },
  {
    "text": "items that start with inventory in the",
    "start": "268320",
    "end": "270479"
  },
  {
    "text": "sort key in just one query think in",
    "start": "270479",
    "end": "273600"
  },
  {
    "text": "terms of a sql statement i could do a",
    "start": "273600",
    "end": "275600"
  },
  {
    "text": "select star from my table",
    "start": "275600",
    "end": "277840"
  },
  {
    "text": "where user equals account 1 2 3 4 and",
    "start": "277840",
    "end": "281120"
  },
  {
    "text": "the sort key like inventory percent sign",
    "start": "281120",
    "end": "284639"
  },
  {
    "text": "perhaps in my game i do a query to the",
    "start": "284639",
    "end": "286479"
  },
  {
    "text": "database to get all the inventory",
    "start": "286479",
    "end": "288080"
  },
  {
    "text": "objects for that particular player to",
    "start": "288080",
    "end": "290080"
  },
  {
    "text": "display their inventory on screen",
    "start": "290080",
    "end": "292880"
  },
  {
    "text": "but when i go to write their inventory",
    "start": "292880",
    "end": "294720"
  },
  {
    "text": "changes back to the database i only want",
    "start": "294720",
    "end": "297280"
  },
  {
    "text": "to make changes to the exact sections of",
    "start": "297280",
    "end": "299199"
  },
  {
    "text": "the inventory they actually changed",
    "start": "299199",
    "end": "302880"
  },
  {
    "text": "the third item here is the player's",
    "start": "302880",
    "end": "304479"
  },
  {
    "text": "login information",
    "start": "304479",
    "end": "306160"
  },
  {
    "text": "this item contains the user's password",
    "start": "306160",
    "end": "308080"
  },
  {
    "text": "hashed of course",
    "start": "308080",
    "end": "309520"
  },
  {
    "text": "the state of their account and the last",
    "start": "309520",
    "end": "311680"
  },
  {
    "text": "login date in unix epoch format",
    "start": "311680",
    "end": "314720"
  },
  {
    "text": "all three items together make up what is",
    "start": "314720",
    "end": "316479"
  },
  {
    "text": "called an item collection in dynamodb",
    "start": "316479",
    "end": "319520"
  },
  {
    "text": "they have the same partition key",
    "start": "319520",
    "end": "321039"
  },
  {
    "text": "therefore they are related data",
    "start": "321039",
    "end": "323759"
  },
  {
    "text": "in this case they are the items related",
    "start": "323759",
    "end": "325440"
  },
  {
    "text": "to that one player in the game and",
    "start": "325440",
    "end": "327039"
  },
  {
    "text": "likely there would be far more items in",
    "start": "327039",
    "end": "328800"
  },
  {
    "text": "a fully fleshed out player when items",
    "start": "328800",
    "end": "330880"
  },
  {
    "text": "have the same partition key dynamodb",
    "start": "330880",
    "end": "332960"
  },
  {
    "text": "tries to keep these related items within",
    "start": "332960",
    "end": "334720"
  },
  {
    "text": "the same partition in the database",
    "start": "334720",
    "end": "336800"
  },
  {
    "text": "thus keeping access times for your data",
    "start": "336800",
    "end": "338639"
  },
  {
    "text": "as low and consistent as possible to",
    "start": "338639",
    "end": "341039"
  },
  {
    "start": "340000",
    "end": "386000"
  },
  {
    "text": "summarize in dynamodb you have tables",
    "start": "341039",
    "end": "343600"
  },
  {
    "text": "tables have items items have attributes",
    "start": "343600",
    "end": "346560"
  },
  {
    "text": "you have partition keys sort keys and",
    "start": "346560",
    "end": "348639"
  },
  {
    "text": "one or both can be configured to be the",
    "start": "348639",
    "end": "350240"
  },
  {
    "text": "table's primary key primary keys can be",
    "start": "350240",
    "end": "352960"
  },
  {
    "text": "simple which means the table is",
    "start": "352960",
    "end": "354320"
  },
  {
    "text": "configured with only a partition key or",
    "start": "354320",
    "end": "356720"
  },
  {
    "text": "the primary key can be composite which",
    "start": "356720",
    "end": "358880"
  },
  {
    "text": "means the table is configured with both",
    "start": "358880",
    "end": "360400"
  },
  {
    "text": "a partition and sort key finally when",
    "start": "360400",
    "end": "363120"
  },
  {
    "text": "you need to represent a one-to-many",
    "start": "363120",
    "end": "364720"
  },
  {
    "text": "relationship use an item collection",
    "start": "364720",
    "end": "366560"
  },
  {
    "text": "where you have the partition key be the",
    "start": "366560",
    "end": "368240"
  },
  {
    "text": "same in each item and the sort key",
    "start": "368240",
    "end": "369919"
  },
  {
    "text": "identifies the item further for a quick",
    "start": "369919",
    "end": "372400"
  },
  {
    "text": "consistent selection by your application",
    "start": "372400",
    "end": "375840"
  },
  {
    "text": "thanks to be on the lookout for more",
    "start": "375840",
    "end": "377039"
  },
  {
    "text": "core concept videos here and on our",
    "start": "377039",
    "end": "379039"
  },
  {
    "text": "twitter handle at dynamodb",
    "start": "379039",
    "end": "383000"
  }
]